{
    "Shader": {
        "info": {
            "date": "1622186238",
            "description": "Figured it out!",
            "flags": 0,
            "hasliked": 0,
            "id": "7tf3WM",
            "likes": 8,
            "name": "Distance to Voronoi",
            "published": 3,
            "tags": [
                "2d",
                "voronoi",
                "sdf",
                "borders",
                "exact"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 195
        },
        "renderpass": [
            {
                "code": "// Hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nfloat Hash11(in float x) {\n    x = fract(x * 0.1031);\n    x *= x + 33.33;\n    x *= x + x;\n    return fract(x);\n}\n\n// Random cycling points\nvec2 getPoint(in vec2 cell) {\n    float freq = Hash11(dot(cell, vec2(393.84, 673.48))) * 3.0 + 1.0;\n    float phase = Hash11(dot(cell, vec2(348.46, 183.37)));\n    float amp = Hash11(dot(cell, vec2(275.35, 741.69)));\n\n    float t = iTime * freq + phase;\n    return cell + 0.5 + 0.5 * vec2(cos(t), sin(t)) * amp;\n}\n\nvec3 sdVoronoi(in vec2 p) {\n    // Get closest point\n    vec2 cell = floor(p), closest = getPoint(cell);\n    float minDist = length(p - closest);\n    for (int i=-1; i < 2; i++) {\n        for (int j=-1; j < 2; j++) {\n            if (i == 0 && j == 0) continue;\n            vec2 curCell = cell + vec2(i, j), curPoint = getPoint(curCell);\n            float dist = length(p - curPoint);\n            if (dist < minDist) {\n                closest = curPoint;\n                minDist = dist;\n            }\n        }\n    }\n\n    // Get closest border\n    cell = floor(closest);\n    vec2 p1 = getPoint(cell + 1.0);\n    float dist = dot(p - 0.5 * (closest + p1), normalize(closest - p1));\n    for (int i=-2; i < 3; i++) {\n        for (int j=-2; j < 3; j++) {\n            if ((i == 0 && j == 0) || (i == 1 && j == 1)) continue;\n            vec2 curPoint = getPoint(cell + vec2(i, j));\n            dist = min(dist, dot(p - 0.5 * (closest + curPoint), normalize(closest - curPoint)));\n        }\n    }\n\n    return vec3(closest, dist);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 8.0;\n    vec3 voro = sdVoronoi(uv);\n\n    fragColor = vec4(smoothstep(0.05, 0.0, voro.z) + 0.25 + 0.25 * sin(voro.z * 50.0));\n    fragColor.rgb = mix(fragColor.rgb, vec3(1.0, 0.8, 0.0), smoothstep(0.05, 0.0, length(uv - voro.xy) - 0.05));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}