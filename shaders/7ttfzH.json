{
    "Shader": {
        "info": {
            "date": "1662689769",
            "description": "Yet another fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "7ttfzH",
            "likes": 5,
            "name": "Fractal mosaic 12 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 350
        },
        "renderpass": [
            {
                "code": "#define fmod(x,y) mod(floor(x),y)\nvec2 triangle_wave(vec2 a){\n    vec2 a2 = //change this constant to get other interesting patterns\n        vec2(1.,0.5)\n        //vec2(2.5,-1.)\n        //vec2(-2.,.5+mod(floor(a.x),2.))\n\n        \n        //vec2(1.5,0.)\n        \n        //vec2(1.,1.5)\n    ,\n    \n    a1 = a+a2;\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n    //a1 += (distance(floor(a1),round(a1)))*1.5;\n\n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\nvec3 image1(vec2 uv,float sign1){\n    float scale = 1.5;\n    vec3 col = vec3(0.);\n    vec2 t2 = vec2(0.);\n    bool t3 = false;\n    for(int k = 0; k < 12; k++){\n        //uv += float(t3);\n        //uv += floor(uv+vec2(1.,.5))/1.5;\n        t3 = uv.x*sign1 > uv.y*sign1 || !t3;\n        //t3 = uv.x > uv.y && !t3;\n        uv =\n            abs(-.5+uv+t2)/scale+float(!t3)/2.;\n            //fract(.5+uv+t2)/scale+float(!t3)/2.;\n        \n        //uv *= -1.;\n        //uv += (distance(floor(uv),round(uv+.5)));\n\n        //if(uv.y>uv.x) uv = uv.yx;\n        t2 = triangle_wave(uv+.5);\n        //t2 = abs(t2);\n        \n        //uv += floor(uv.y-uv.x);\n        \n        uv = t2-triangle_wave(uv.yx);\n        \n\n        //uv.x -= max(uv.y,-uv.x)/2.;\n        \n        //uv += dot(uv,uv)/4.; //makes another interesting pattern\n\n        //uv.x += sign(uv.y-uv.x)/2.;\n\n        float c1 =\n            uv.y-uv.x\n            //uv.y*sign(uv.x)-uv.x\n        ;\n        \n        //another really interesting pattern\n        //uv.x += .5;\n\n        \n\n        //c1 = max(c1,t2.x-t2.y);\n        col = vec3(c1,col.yz);\n        //col *= abs(col+.5);\n\n        //col = col.xzy;\n        if(t2.x < t2.y && t3) col = col.yzx;\n        \n        //if(t2.x > t2.y && !t3) col = col.zxy;\n        //if(t2.x*uv.x < t2.y*uv.y) col = col.yzx;\n        //if(t2.x-t2.y > uv.x-uv.y) col = col.yzx;\n        //if(uv.x>uv.y) {uv=-uv;t2=-t2;}\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    float t1 = 16.*4.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n        if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    \n    vec3 col =\n        image1(uv,1.);\n        //image1(uv,-1.);\n    fragColor = vec4(abs(col)*2.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//#define fmod(x,y) mod(floor(x),y)\n#define fmod(x,y) mod(floor(x)+floor((x)/5./5.),y)\n#define fmod0(x,y) mod(floor(x)*4.-floor((x)/4.),y)\n#define fmod1(x,y) mod(floor(x)*(4.+mod(floor(x),4.))-floor((x)/(4.+mod(floor(x),4.))),y)\n#define fmod2(x,y) mod(floor(x)*(1.+mod(floor(x),4.))+floor((x)/4.),y)\n#define fmod3(x,y) mod(floor((x)/4.+pow(2.,mod(floor(x),4.))),y)\n#define fmod4(x,y) mod(floor(y*((x)/y+floor((x)/y)/y)),y)\n#define fmax(x,y) max(mod(floor(-(x)/2.),y),mod(floor(x),y))\n\n\nint gcd (int a, int b) {    // Euclid algorithm:   gcd(a,b) = gcd(b, a%b) ; gcd(a,0) = a\n    int c;             \n    while ( b>0 && (c = a%b) != a ) a=b, b=c; \n    return b==0 ? a : c;\n}\n\nfloat gcd(float a, float b){\n   return float(gcd(int(a),int(b)));\n}\n\nvec2 mainSound(int samp, float time){\n  \n  float tempo = 1.;\n  time /= tempo;\n  \n  //for(int i = 0; i < 5; i++){ time += fmod(floor(time*5.),2.); }\n  \n  float s1 = 5.,\n  \n  \n  \n  s2 = 7.,\n  t =\n      time\n      //time - fmod(time,5.+fmod(time*s1,7.))\n      //time/(1.+fmod(time,2.))\n  ,\n  m1 = fmod(t/s2,s2),\n  m4 = fmod(t/s1+m1,s2),\n  m3 = fmod((t+gcd(m1,m4))*(s1)/abs(s1/2.-gcd(m1,m4)),s2);\n  \n  t *= s1*s1;\n  //t /= (1.+fmod(time,2.))/(1.+fmod(time/2.,2.)); //varying tempo\n\n\n  float m2 = 1. + fmod(t/s1,s1);\n  \n  float a=\n      64.*((1.-sqrt(fract(t/s1)/1.25)))*.2\n      //sqrt((1.-sqrt(fract(t/s1))))*.2\n  ,\n  \n  nb = pow(2.,(m3+m2)/5.+7.)*tempo;\n\n  return abs(.5-vec2(fract(time*nb*.998)\n   ,fract(time*nb)))*a;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}