{
    "Shader": {
        "info": {
            "date": "1655768469",
            "description": "Fork of original shader, now with comments!\n\nGenerates tileable blue noise / poisson disc of floor-pow2-window-res size.\n\nRight 20% of window shows which pixels have been swapped in the current frame.\n\nClick with left mouse button to reset.",
            "flags": 32,
            "hasliked": 0,
            "id": "sdVyWc",
            "likes": 6,
            "name": "Fork of Blue Noise",
            "published": 3,
            "tags": [
                "noise",
                "hash",
                "bluenoise"
            ],
            "usePreview": 0,
            "username": "AshenFlowersFalling",
            "viewed": 468
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 sz = ivec2(pow(vec2(2.0), floor(log2(iResolution.xy))));\n    ivec2 px = ivec2(fragCoord) % sz;\n    float v = texelFetch(iChannel0, px, 0).r;    \n    \n    fragColor = vec4(v, v, v, 1.0);\n    \n    if (gl_FragCoord.x/iResolution.x > 0.8)\n        fragColor = texelFetch(iChannel0, px, 0).gggg;\n#if SHOW_DITHERING\n    ivec2 tpos = ivec2(fragCoord) % textureSize(iChannel1, 0);\n    if (gl_FragCoord.x/iResolution.x > 0.5)\n    {\n        if (v < texelFetch(iChannel1, tpos, 0).r)\n            fragColor = vec4(1.0);\n        else\n            fragColor = vec4(0.0);\n    }\n    else\n    {\n        if (random(vec2(px)) < texelFetch(iChannel1, tpos, 0).r)\n            fragColor = vec4(1.0);\n        else\n            fragColor = vec4(0.0);\n    }\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define SHOW_DITHERING 0 // show white/blue noise dithered image\n#define POISSON_DISC 0   // generate approximate poisson disc texture instead of blue noise\n#define USE_MAX 1        // use \"max\" as the comparison, otherwise use \"min\"\n#define QUANTIZE 0       // quantise initial noise to 8-bits?\n\n#define INIT_FRAMES 1\n\n#define R2 11 // 19 works well for high-quality\n\n#define SIGMA 1.41421356237\n#define M_PI 3.14159265359\n\n\n// high-quality hash, modified version of old version of XXHash32 from https://github.com/Cyan4973/xxHash (BSD license)\n\nstruct vec5\n{\n\tfloat v[5];\n};\nstruct uvec5\n{\n\tuint v[5];\n};\nstruct vec6\n{\n\tfloat v[6];\n};\nstruct uvec6\n{\n\tuint v[6];\n};\n\nuvec6 touvec6(uvec5 x) { uvec6 x6;    x6.v[0] = x.v[0]; x6.v[1] = x.v[1]; x6.v[2] = x.v[2]; x6.v[3] = x.v[3]; x6.v[4] = x.v[4]; x6.v[5] = uint(0);    return x6;}\nuvec6 touvec6(uvec4 x) { uvec6 x6;    x6.v[0] = x.x;    x6.v[1] = x.y;    x6.v[2] = x.z;    x6.v[3] = x.w;    x6.v[4] = uint(0);x6.v[5] = uint(0);    return x6;}\nuvec6 touvec6(uvec3 x) { uvec6 x6;    x6.v[0] = x.x;    x6.v[1] = x.y;    x6.v[2] = x.z;    x6.v[3] = uint(0);x6.v[4] = uint(0);x6.v[5] = uint(0);    return x6;}\nuvec6 touvec6(uvec2 x) { uvec6 x6;    x6.v[0] = x.x;    x6.v[1] = x.y;    x6.v[2] = uint(0);x6.v[3] = uint(0);x6.v[4] = uint(0);x6.v[5] = uint(0);    return x6;}\nuvec6 touvec6(uint  x) { uvec6 x6;    x6.v[0] = x;      x6.v[1] = uint(0);x6.v[2] = uint(0);x6.v[3] = uint(0);x6.v[4] = uint(0);x6.v[5] = uint(0);    return x6;}\n\n#define PRIME32_1\t2654435761U\n#define PRIME32_2\t2246822519U\n#define PRIME32_3\t3266489917U\n#define PRIME32_4\t668265263U\n#define PRIME32_5\t374761393U\n\nuint rotl32(uint x, int shift)\n{\n\treturn (x << shift) | (x >> (32 - shift));\n}\nvoid XXH32_InitV(inout uint v[4], uint seed)\n{\n    v[0] = seed + PRIME32_1 + PRIME32_2;\n    v[1] = seed + PRIME32_2;\n    v[2] = seed + uint(0);\n    v[3] = seed - PRIME32_1;\n}\nvoid XXH32_Inner(const uint p[4], inout uint v[4])\n{\n    v[0] += p[0] * PRIME32_2;\n    v[0] = rotl32(v[0], 13);\n    v[0] *= PRIME32_1;\n\n    v[1] += p[1] * PRIME32_2;\n    v[1] = rotl32(v[1], 13);\n    v[1] *= PRIME32_1;\n\n    v[2] += p[2] * PRIME32_2;\n    v[2] = rotl32(v[2], 13);\n    v[2] *= PRIME32_1;\n\n    v[3] += p[3] * PRIME32_2;\n    v[3] = rotl32(v[3], 13);\n    v[3] *= PRIME32_1;\n}\n\nuint XXHash32_32(uint input_s[8])\n{\n    uint h32;\n\tuint v[4];\n\n\tXXH32_InitV(v, uint(0));\n\n\tXXH32_Inner(uint[4](input_s[0], input_s[1], input_s[2], input_s[3]), v);\n    XXH32_Inner(uint[4](input_s[4], input_s[5], input_s[6], input_s[7]), v);\n\n    h32 = rotl32(v[0], 1) + rotl32(v[1], 7) + rotl32(v[2], 12) + rotl32(v[3], 18);\n\n    h32 += uint(32);\n\n    h32 ^= h32 >> 15;\n    h32 *= PRIME32_2;\n    h32 ^= h32 >> 13;\n    h32 *= PRIME32_3;\n    h32 ^= h32 >> 16;\n\n    return h32;\n}\n\nuint hash(uvec6 x, uint seed) \n{\n    uint inputs[8] = uint[8](x.v[0], x.v[1], x.v[2], x.v[3], x.v[4], x.v[5], uint(0), uint(seed));\n    \n    return XXHash32_32(inputs);\n}\nuint hash(uvec5 x, uint seed) { return hash(touvec6(x), seed);}\nuint hash(uvec4 x, uint seed) { return hash(touvec6(x), seed);}\nuint hash(uvec3 x, uint seed) { return hash(touvec6(x), seed);}\nuint hash(uvec2 x, uint seed) { return hash(touvec6(x), seed);}\nuint hash(uint x, uint seed)  { return hash(touvec6(x), seed);}\nuint hash(uvec6 x) \n{\n    uint inputs[8] = uint[8](x.v[0], x.v[1], x.v[2], x.v[3], x.v[4], x.v[5], uint(0), uint(0));\n    \n    return XXHash32_32(inputs);\n}\nuint hash(uvec5 x) { return hash(touvec6(x));}\nuint hash(uvec4 x) { return hash(touvec6(x));}\nuint hash(uvec3 x) { return hash(touvec6(x));}\nuint hash(uvec2 x) { return hash(touvec6(x));}\nuint hash(uint x)  { return hash(touvec6(x));}\n\n\n\nuint lzcnt(uint x)\n{\n    x |= x >> 1;\n    x |= x >> 2;\n    x |= x >> 4;\n    x |= x >> 8;\n    x |= x >> 16;\n    \n    uint c;\n    \n    x = x - ((x >> 1) & uint(0x55555555));                    \n    x = (x & uint(0x33333333)) + ((x >> 2) & uint(0x33333333));\n    c = ((x + (x >> 4) & uint(0xF0F0F0F)) * uint(0x1010101)) >> 24;\n\n    return uint(32) - c;\n}\n\nfloat floatrandhq(uvec6 x) \n{\n    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask\n    const uint mantissabits = uint(23);\n    const uint exponentbits = uint(8);\n    const uint hashbits     = uint(32);\n    const uint hashbitslg2  = uint(5);\n    uint current;\n    uint cnt;\n    uint pw2;    \n    // ceil((2^(ebits - 1) - 2) / 2^hashbits)\n    uint maxrec = (uint(1 << (exponentbits - uint(1))) - uint(2) + hashbits - uint(1)) >> hashbitslg2;\n    uint m;\n    uint i;\n    \n    current = hash(x, uint(0));\n    cnt = lzcnt(current);\n    pw2 = cnt;\n\n    for (i = uint(1); (i < maxrec) && (cnt == hashbits); i++)\n    {\n        current = hash(x, i +  uint(1));\n        cnt = lzcnt(current);\n        pw2 += cnt;\n    }\n    \n    // if less than 23 bits left, we need to generate a new hash to fill the mantissa\n    if ((int(hashbits) - int(cnt) - 1) < int(mantissabits))\n        current = hash(x, i +  uint(1));\n    \n    if (pw2 < uint(1 << (exponentbits - uint(1))) - uint(2))\n        m = (uint(1 << (exponentbits - uint(1))) - uint(2) - pw2) << mantissabits;\n    else // subnormal\n        m = uint(0);\n        \n    m |= ieeeMantissa & current;\n    \n\n    return uintBitsToFloat( m );\n}\n\nuvec5 floatBitsToUint2(vec5 v)\n{\n    uvec5 u;\n\n    u.v[0] = floatBitsToUint(v.v[0]);\n    u.v[1] = floatBitsToUint(v.v[1]);\n    u.v[2] = floatBitsToUint(v.v[2]);\n    u.v[3] = floatBitsToUint(v.v[3]);\n    u.v[4] = floatBitsToUint(v.v[4]);\n\n    return u;\n}\n\nfloat random( float x ) { return floatrandhq(touvec6(floatBitsToUint(x))); }\nfloat random( vec2  v ) { return floatrandhq(touvec6(floatBitsToUint(v))); }\nfloat random( vec3  v ) { return floatrandhq(touvec6(floatBitsToUint(v))); }\nfloat random( vec4  v ) { return floatrandhq(touvec6(floatBitsToUint(v))); }\nfloat random( vec5  v ) { return floatrandhq(touvec6(floatBitsToUint2(v))); }\nfloat random( vec6  v ) \n{ \n    return floatrandhq(\n            uvec6(uint[6](\n                floatBitsToUint(v.v[0]),\n                floatBitsToUint(v.v[1]),\n                floatBitsToUint(v.v[2]),\n                floatBitsToUint(v.v[3]),\n                floatBitsToUint(v.v[4]),\n                floatBitsToUint(v.v[5])\n                ))\n        );\n}\n\n\nfloat gaussian (float x, float sigma) \n{\n    float h0 = x / sigma;\n    float h = h0 * h0 * -0.5;\n    float a = 1.0 / (sigma * sqrt(2.0 * M_PI));\n    return a * exp(h);\n}\n\nfloat distf(float v, float x) {\n    return 1.0 - x;\n}\n\nvec2 quantify_error (sampler2D channel, ivec2 p, ivec2 sz, float val0, float val1) \n{\n    float Rf = float(R2) / 2.0;\n    int R = int(Rf);\n    float has0 = 0.0;\n    float has1 = 0.0;\n    float w = 0.0;\n    \n    for (int sy = -R; sy <= R; ++sy) \n    {\n        for (int sx = -R; sx <= R; ++sx) \n        {\n            float d = length(vec2(sx,sy));\n            \n            if ((d > Rf) || ((sx == 0) && (sy == 0)))\n                continue;\n                \n            ivec2 t = (p + ivec2(sx,sy) + sz) % sz;\n\t\t\tfloat v = texelFetch(channel, t, 0).r;\n\n            float dist0 = abs(v - val0);\n            float dist1 = abs(v - val1);\n\n            float q = gaussian(d, SIGMA);\n\n            w += q;            \n            has0 += distf(val0, dist0) * q;\n            has1 += distf(val1, dist1) * q;\n            \n        }\n    }\n\n    return vec2(has0 / w, has1 / w);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#if USE_MAX\n#define CMPF max\n#else\n#define CMPF min\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float swap = 0.0;\n#if USE_MAX\n    // if using max\n    float chance_limit = 0.64; // only converges if <= ~0.661819 @ 640 x 480 (512 x 256), or ~0.661 @ 1920 x 1080 (1024 x 1024)\n#else    \n    // if using min\n    float chance_limit = 0.24; // only converges if <= ~0.25 @ 640 x 480 (512 x 256)\n#endif    \n    ivec2 p0 = ivec2(fragCoord);\n    \n    if (iFrame < INIT_FRAMES || iMouse.z > 0.0) \n    {\n        // uniform histogram of values, can change to arbitrary histogram\n        float v = random(vec3(p0, float(iFrame)));\n#if QUANTIZE && !POISSON_DISC\n        v = floor(v * 256.0) / 256.0;\n#elif POISSON_DISC\n        v = v < 0.875 ? 0.0 : 1.0;  // only converges for >= ~0.825\n#endif\n        fragColor = vec4(v, vec3(0.0));\n        return;\n    }\n    \n    ivec2 sz = ivec2(pow(vec2(2.0), floor(log2(iResolution.xy)))); // make data power-of-two in dimensions\n    uint hashval = hash(uint(iFrame), uint(0));\n    ivec2 mask = ivec2(uvec2(hashval >> 16, hashval & uint(0xFFFF)) % uvec2(sz));// constant mask for all pixels in the current frame\n\n    ivec2 p1 = (p0 ^ mask) % sz; // coordinates of pixel to potentially swap with, importantly this is a one-to-one mapping between pairs\n\n    float v0 = texelFetch(iChannel0, p0, 0).r; // get data at current pixel\n    float v1 = texelFetch(iChannel0, p1, 0).r; // get data at pixel to potentially swap with\n\n    float chance0 = random(vec3(p0, float(iFrame))); // random number [0, 1) seeded with p0 coords and current frame\n    float chance1 = random(vec3(p1, float(iFrame))); // random number [0, 1) seeded with p1 coords and current frame\n    float chance = CMPF(chance0, chance1);           // any function that's order-independent with respect to \"chance0\" and \"chance1\"\n\n    if (chance > chance_limit) // limit swapping rate to make sure algorithm converges\n    {\n        fragColor = vec4(v0, vec3(0.0));\n        return;\n    }\n\n    vec2 s0_x0 = quantify_error(iChannel0, p0, sz, v0, v1);\n    vec2 s1_x1 = quantify_error(iChannel0, p1, sz, v1, v0);\n\n    float err_s = s0_x0.x + s1_x1.x;\n    float err_x = s0_x0.y + s1_x1.y;\n\n    float p = v0;\n\n    // less error if a swap were to take place: so swap.\n    // note that this code will ALWAYS execute at p1 if it executed at p0, and vice-versa\n    if (err_x < err_s) \n    {\n        p = v1;\n        if (v0 != v1)\n            swap += 1.0;\n    }\n\n    fragColor = vec4(p, swap, 0.0, 1.0);\n}                        \n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}