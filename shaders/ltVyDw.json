{
    "Shader": {
        "info": {
            "date": "1536631156",
            "description": "https://soundcloud.com/ngc4244/tespress",
            "flags": 96,
            "hasliked": 0,
            "id": "ltVyDw",
            "likes": 3,
            "name": "Test [ Press ]",
            "published": 3,
            "tags": [
                "raymarch",
                "music",
                "city",
                "love",
                "soundcloud",
                "nebulous"
            ],
            "usePreview": 0,
            "username": "Nimajamin",
            "viewed": 541
        },
        "renderpass": [
            {
                "code": "// -------- ------- ------ ----- ---- --- -- -\n//\n//              Test [ Press ]\n//\n//              N-e-b-u-l-o-u-s\n//\n// \"There is no destination but the journey itself.\"\n//\n// -------- ------- ------ ----- ---- --- -- -\n// \n// So very heavily based on the supurb shader:\n//\n// https://www.shadertoy.com/view/XtsSWs\n//\n// Created by otaviogood in 2015-Sep-24\n//\n// The use of which very kindly granted by the notice below..\n//\n//  Thank you dearly Otavio.\n//\n// -------- ------- ------ ----- ---- --- -- -\n\n// -------- ------- ------ ----- ---- --- -- -\n//\n//  Modified by: Nimajamin - July-2017 - Sep 2018\n//\n// -------- ------- ------ ----- ---- --- -- -\n\n/*--------------------------------------------------------------------------------------\nLicense CC0 - http://creativecommons.org/publicdomain/zero/1.0/\nTo the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.\n----------------------------------------------------------------------------------------\n^ This means do ANYTHING YOU WANT with this code. Because we are programmers, not lawyers.\n-Otavio Good\n*/\n\n//\n// -------------------------------------------------------------\n//\n// Kaleidoscope code by: randomekek \n//\n// From the shader: \"rotating kaleidoscope\"\n//\n// - https://www.shadertoy.com/view/Msy3Dt\n//\n// -------------------------------------------------------------\n//\n\n//\n// Comment these lines in & out to select options.. :)\n//\n\n#define APPLY_VFX\n//#define APPLY_2D_FFT\n\n//#define MONO_PALETTE_FFT\n#define FIRE_PALETTE_FFT\n\n// -------- ------- ------ ----- ---- --- -- -\n\nvec4  saturate(  vec4 a ) { return clamp( a, 0.0, 1.0 ); }\nvec3  saturate(  vec3 a ) { return clamp( a, 0.0, 1.0 ); }\nvec2  saturate(  vec2 a ) { return clamp( a, 0.0, 1.0 ); }\nfloat saturate( float a ) { return clamp( a, 0.0, 1.0 ); }\n\n// -------- ------- ------ ----- ---- --- -- -\n//\n// BCH: This function returns the spectrograph 'rgba' data..\n//\n// -------- ------- ------ ----- ---- --- -- -\n\n//#define MONO_FFT\n#define FIRE_FFT\n\nvec4 GetSpectrograph( in vec2 uv )\n{\n    float fft = texture( iChannel2, uv ).x;\n    \n#ifdef MONO_FFT\n\n    return vec4( fft, fft, fft, fft );\n    \n#else  // MONO_FFT\n    \n  #ifdef FIRE_FFT\n    float lerp_r = saturate( 1.0 - uv.y * 1.0 );\n    float lerp_g = saturate( 1.0 - uv.y * 2.0 + ( 1.0 /   ( iResolution.y / 3.0 )         ) );\n    float lerp_b = saturate( 1.0 - uv.y * 3.0 + ( 1.0 / ( ( iResolution.y / 3.0 ) * 2.0 ) ) );\n  #else  // FIRE_FFT\n    float lerp_r = saturate( uv.y * 1.0 );\n    float lerp_g = saturate( uv.y * 2.0 + ( 1.0 /   ( iResolution.y / 3.0 )         ) );\n    float lerp_b = saturate( uv.y * 3.0 + ( 1.0 / ( ( iResolution.y / 3.0 ) * 2.0 ) ) );\n  #endif // FIRE_FFT\n    \n    return vec4( fft * lerp_r, fft * lerp_g, fft * lerp_b, fft );\n    \n  #endif // MONO_FFT\n}\n\n// -------- ------- ------ ----- ---- --- -- -\n\nfloat uvMask( in vec2 uv )\n{\n    return ( uv.x >= 0.0 && uv.x <= 1.0 && uv.y >= 0.0 && uv.y <= 1.0 ) ? 1.0 : 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 win_uv = -0.1 + uv * vec2( 2.5, 2.6 );\n    \n    vec4            dry = texture( iChannel0, uv );\n    vec4 motion_blurred = texture( iChannel1, uv );\n\tvec4   spectrograph = texture( iChannel2, win_uv ) * uvMask( win_uv );\n    float win_mask_mul = mix( 1.0, 0.666, uvMask( win_uv ) );\n\n    // Un-comment the clamp bit for \"pixel-ish' kind of effect, \"1.0\" for scalines only..\n    float pixline = 1.0;//clamp(cos(fract(uv.y * 240.0))*1.44, 0.0, 1.0);\n    float scanline = 1.0 + clamp(tan(2.0 * fract(uv.y * (iResolution.y * 0.25))), 0.0, 1.0) * pixline;\n\n   \t// Apply scanlines after - for the Teal..\n//  \tmotion_blurred *= clamp( (0.4 * vec4(pow(scanline,3.0))), 0.6, 1.2 );\n\n#ifdef APPLY_VFX\n\n #ifdef APPLY_2D_FFT\n    \n  #ifdef MONO_PALETTE_FFT\n\n    fragColor = motion_blurred * win_mask_mul + vec4( spectrograph.xxx, 0.0 );\n    \n  #else  // MONO_PALETTE_FFT\n    \n    #ifdef FIRE_PALETTE_FFT\n        float lerp_r = saturate( 1.0 - uv.y * 1.0 );\n        float lerp_g = saturate( 1.0 - uv.y * 2.0 + ( 1.0 /   ( iResolution.y / 3.0 )         ) );\n        float lerp_b = saturate( 1.0 - uv.y * 3.0 + ( 1.0 / ( ( iResolution.y / 3.0 ) * 2.0 ) ) );\n    #else  // FIRE_PALETTE_FFT\n        float lerp_r = saturate( uv.y * 1.0 );\n        float lerp_g = saturate( uv.y * 2.0 + ( 1.0 /   ( iResolution.y / 3.0 )         ) );\n        float lerp_b = saturate( uv.y * 3.0 + ( 1.0 / ( ( iResolution.y / 3.0 ) * 2.0 ) ) );\n    #endif // FIRE_PALETTE_FFT\n    \n    vec4 rgb_spec = vec4( spectrograph.x * lerp_r,\n                          spectrograph.x * lerp_g,\n                          spectrograph.x * lerp_b,\n                          0.0f );\n    \n    vec4 bass_pump = GetSpectrograph( vec2( 1.0, 0.004 ) ).xxxx;\n\n    fragColor = motion_blurred * win_mask_mul\n\t          + motion_blurred * vec4( 0.2, 0.6, 0.9, 1.0f ) * saturate( pow( bass_pump.x * 1.4, 8.0 ))\n        \t  + rgb_spec * vec4( 2.0 );\n    \n    \n  #endif // MONO_PALETTE_FFT\n\n #else  // APPLY_2D_FFT\n\n\tfragColor = motion_blurred;\n\n #endif // APPLY_2D_FFT\n\n#else  // APPLY_VFX    \n    \n    fragColor = dry;\n    \n#endif // APPLY_VFX        \n   // fragColor += dry*0.3;\n //   fragColor *= 0.6;;\n}\n\n// -------- ------- ------ ----- ---- --- -- -\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// -------- ------- ------ ----- ---- --- -- -\n//\n//     \"Old-Skool\" Real-Time Motion-Blur\n//\n//     Using Feedback. ( 90's Style :D )\n//\n// -------- ------- ------ ----- ---- --- -- -\n\nconst float fSlew = 0.65;\t\t\t\t\t\t\t// Trippy trails man! o_O\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec4 history = texture( iChannel0, uv );\t\t// Read what is already in 'this' Buf A - The past..\n    vec4     now = texture( iChannel1, uv );\t\t// Read the city rendering - The Now..\n    \n    fragColor = ( ( now - history ) * fSlew ) + history;\t// Use a fraction of the past to slow time down..\n}\n\n// -------- ------- ------ ----- ---- --- -- -\n//\n// The last line (and the value fSlew) is a subtrative filter...\n//\n//  (A 'dampener' that applies a fraction of the past to slow a value change down).\n// \n//   fSlew = [ 0.0 : 0% Dampening = Free-Motion / No resitance to change in value (res = now) \n//             <-> \n//             1.0 : 100% Dampening = Static / No Change in value (res = past) ]\n//\n//   fSlew = 0.975 == Trippy Trails..! ;)\n//\n// You can do this trick for vectors too.. (to smooth motion, etc..)\n//\n// [E] (end)\n//  ^\n//   \\\n//    \\\n//     \\\n//     [S] (start)\n//\n// end' = ( ( end - start ) * fSlew ) + start;\n//\n// e.g.\n//\n// vec3 last_pos = { 0.0, 0.0, 0.0 };\n// vec3 pos = { 0.0, 0.0, 0.0 };\n//\n// void main()\n// {\n//    // ---- --- -- -\n//\n//    pos.x = joystick.x;  \t// For example..\n//    pos.y = joystick.y;  \t// \n//    pos.z = speed;  \t\t// For example..\n//\n//    // At this point in the code.. pos.xyz contains the desired position... (The input).\n//\n//    // ---- --- -- -\n//    pos.x = (pos.x - last_pos.x) * fSlew + last_pos.x;\n//    pos.y = (pos.y - last_pos.y) * fSlew + last_pos.y;\n//    pos.z = (pos.z - last_pos.z) * fSlew + last_pos.z;\n//\n//    (or)\n//\n//    pos.xyz = (pos.xyz - last_pos.xyz) * fSlew + last_pos.xyz;\n//\n//    (or)\n//\n//    pos = (pos - last_pos) * fSlew + last_pos;\n//\n//    // ---- --- -- -\n//    //\n//    // Use \"pos.xyz\" here...\n//    //\n//    // ---- --- -- -\n//\n//\n//    // At this point in the code.. pos.xyz contains the smoothed position.\n//\n//    // ---- --- -- -\n//\n//    // Afterwards, update the 'history-buffer' with what the current value was. :)\n//    last_pos.x = pos.x;\n//    last_pos.y = pos.y;\n//    last_pos.z = pos.z;\n//\n//    (or)\n//\n//    last_pos.xyz = pos.xyz;\n//\n//    (or)\n//\n//    last_pos = pos;\n// }\n//\n// -------- ------- ------ ----- ---- --- -- -\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// -------- ------- ------ ----- ---- --- -- -\n//\n// https://www.shadertoy.com/view/XtsSWs\n//\n// Created by otaviogood in 2015-Sep-24\n//\n// Skyline\n//\n// Tags: procedural, raymarch, city, skyline\n//\n// -------- ------- ------ ----- ---- --- -- -\n\n// -------- ------- ------ ----- ---- --- -- -\n//\n//              Test [ Press ]\n//\n//              N-e-b-u-l-o-u-s\n//\n// \"There is no destination but the journey itself.\"\n//\n// -------- ------- ------ ----- ---- --- -- -\n\n/*--------------------------------------------------------------------------------------\nLicense CC0 - http://creativecommons.org/publicdomain/zero/1.0/\nTo the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.\n----------------------------------------------------------------------------------------\n^ This means do ANYTHING YOU WANT with this code. Because we are programmers, not lawyers.\n-Otavio Good\n*/\n\n// ---------------- Config ----------------\n//\n// This is an option that lets you render high quality frames for screenshots. It enables\n// stochastic antialiasing and motion blur automatically for any shader.\n//\n\n//#define NON_REALTIME_HQ_RENDER\n\nconst float frameToRenderHQ = 50.0; // Time in seconds of frame to render\n\nconst float antialiasingSamples = 16.0; // 16x antialiasing - too much might make the shader compiler angry.\n\n//#define MANUAL_CAMERA\n\n// --------------------------------------------------------\n// These variables are for the non-realtime block renderer.\n\nfloat localTime = 0.0;\nfloat seed = 1.0;\n\n// Animation variables\nfloat fade = 1.0;\nvec3 sunDir;\nvec3 sunCol;\nfloat exposure = 1.0;\nvec3 skyCol, horizonCol;\n\n// other\nfloat marchCount = 0.0;\n\n// BCH: GLobal screen-space 0->1 uv coord's..\nvec2 gUV;\n\n// ---- noise functions ----\nfloat v31(vec3 a)\n{\n    return a.x + a.y * 37.0 + a.z * 521.0;\n}\nfloat v21(vec2 a)\n{\n    return a.x + a.y * 37.0;\n}\nfloat Hash11(float a)\n{\n    return fract(sin(a)*10403.9);\n}\nfloat Hash21(vec2 uv)\n{\n    float f = uv.x + uv.y * 37.0;\n    return fract(sin(f)*104003.9);\n}\nvec2 Hash22(vec2 uv)\n{\n    float f = uv.x + uv.y * 37.0;\n    return fract(cos(f)*vec2(10003.579, 37049.7));\n}\nvec2 Hash12(float f)\n{\n    return fract(cos(f)*vec2(10003.579, 37049.7));\n}\nfloat Hash1d(float u)\n{\n    return fract(sin(u)*143.9);\t// scale this down to kill the jitters\n}\nfloat Hash2d(vec2 uv)\n{\n    float f = uv.x + uv.y * 37.0;\n    return fract(sin(f)*104003.9);\n}\nfloat Hash3d(vec3 uv)\n{\n    float f = uv.x + uv.y * 37.0 + uv.z * 521.0;\n    return fract(sin(f)*110003.9);\n}\nfloat mixP(float f0, float f1, float a)\n{\n    return mix(f0, f1, a*a*(3.0-2.0*a));\n}\nconst vec2 zeroOne = vec2(0.0, 1.0);\nfloat noise2d(vec2 uv)\n{\n    vec2 fr = fract(uv.xy);\n    vec2 fl = floor(uv.xy);\n    float h00 = Hash2d(fl);\n    float h10 = Hash2d(fl + zeroOne.yx);\n    float h01 = Hash2d(fl + zeroOne);\n    float h11 = Hash2d(fl + zeroOne.yy);\n    return mixP(mixP(h00, h10, fr.x), mixP(h01, h11, fr.x), fr.y);\n}\n\nfloat noise(vec3 uv)\n{\n    vec3 fr = fract(uv.xyz);\n    vec3 fl = floor(uv.xyz);\n    float h000 = Hash3d(fl);\n    float h100 = Hash3d(fl + zeroOne.yxx);\n    float h010 = Hash3d(fl + zeroOne.xyx);\n    float h110 = Hash3d(fl + zeroOne.yyx);\n    float h001 = Hash3d(fl + zeroOne.xxy);\n    float h101 = Hash3d(fl + zeroOne.yxy);\n    float h011 = Hash3d(fl + zeroOne.xyy);\n    float h111 = Hash3d(fl + zeroOne.yyy);\n    return mixP(\n        mixP(mixP(h000, h100, fr.x),\n             mixP(h010, h110, fr.x), fr.y),\n        mixP(mixP(h001, h101, fr.x),\n             mixP(h011, h111, fr.x), fr.y)\n        , fr.z);\n}\n\nconst float PI=3.14159265;\n\nvec4  saturate( vec4 a) { return clamp(a, 0.0, 1.0); }\nvec3  saturate( vec3 a) { return clamp(a, 0.0, 1.0); }\nvec2  saturate( vec2 a) { return clamp(a, 0.0, 1.0); }\nfloat saturate(float a) { return clamp(a, 0.0, 1.0); }\n\n//\n// BCH: VOLUME RENDERING PARAMS..\n//\n\n#define iterations2 7\n#define formuparam2 0.33\n\n#define volsteps2 20\n#define stepsize2 0.1\n\n#define zoom2   0.400\n#define tile2   0.850\n#define speed2  0.010 \n\n#define brightness2 0.0015\n#define darkmatter2 0.300\n#define distfading2 0.730\n#define saturation2 0.850\n\n#define kContrast2 1.0\n#define kBrightness2 0.0\n#define kSaturation2 0.0\n\n// RGB Eye response..\nconst vec3 deSatConst = vec3( 0.299, 0.587, 0.114 );\n\n//\n// BCH: This function returns the spectrograph 'rgba' data..\n//\n\n//#define MONO_FFT\n#define FIRE_FFT\n\nvec4 GetSpectrograph( in vec2 uv )\n{\n    float fft = texture( iChannel1, uv ).x;\n    \n#ifdef MONO_FFT\n\n    return vec4( fft, fft, fft, fft );\n    \n#else  // MONO_FFT\n    \n  #ifdef FIRE_FFT\n    float lerp_r = saturate( 1.0 - uv.y * 1.0 );\n    float lerp_g = saturate( 1.0 - uv.y * 2.0 + ( 1.0 /   ( iResolution.y / 3.0 )         ) );\n    float lerp_b = saturate( 1.0 - uv.y * 3.0 + ( 1.0 / ( ( iResolution.y / 3.0 ) * 2.0 ) ) );\n  #else  // FIRE_FFT\n    float lerp_r = saturate( uv.y * 1.0 );\n    float lerp_g = saturate( uv.y * 2.0 + ( 1.0 /   ( iResolution.y / 3.0 )         ) );\n    float lerp_b = saturate( uv.y * 3.0 + ( 1.0 / ( ( iResolution.y / 3.0 ) * 2.0 ) ) );\n  #endif // FIRE_FFT\n    \n    return vec4( fft * lerp_r, fft * lerp_g, fft * lerp_b, fft );\n    \n  #endif // MONO_FFT\n}\n\n// This function basically is a procedural environment map that makes the sun\nvec3 GetSunColorSmall( in vec3 rayDir, in vec3 sunDir )\n{\n\tvec3 localRay = normalize(rayDir);\n\tfloat dist = 1.0 - (dot(localRay, sunDir) * 0.5 + 0.5);\n\tfloat sunIntensity = 0.05 / dist;\n    sunIntensity += exp(-dist*150.0)*7000.0;\n\tsunIntensity = min(sunIntensity, 40000.0);\n\treturn sunCol * sunIntensity*0.025;\n}\n\nvec3 GetEnvMap(vec3 rayDir, vec3 sunDir)\n{\n    // fade the sky color, multiply sunset dimming\n    vec3 finalColor = mix(horizonCol, skyCol, pow(saturate(rayDir.y), 0.47))*0.95;\n    // make clouds - just a horizontal plane with noise\n    float n = noise2d(rayDir.xz/rayDir.y*1.0);\n    n += noise2d(rayDir.xz/rayDir.y*2.0)*0.5;\n    n += noise2d(rayDir.xz/rayDir.y*4.0)*0.25;\n    n += noise2d(rayDir.xz/rayDir.y*8.0)*0.125;\n    n = pow(abs(n), 3.0);\n    n = mix(n * 0.2, n, saturate(abs(rayDir.y * 8.0)));  // fade clouds in distance\n    finalColor = mix(finalColor, (vec3(1.0)+sunCol*10.0)*0.75*saturate((rayDir.y+0.2)*5.0), saturate(n*0.125));\n\n    // add the sun\n    finalColor += GetSunColorSmall(rayDir, sunDir);\n    return finalColor;\n}\n\nvec3 GetEnvMapSkyline(vec3 rayDir, vec3 sunDir, float height)\n{\n    vec3 finalColor = GetEnvMap(rayDir, sunDir);\n\n    // Make a skyscraper skyline reflection.\n    float radial = atan(rayDir.z, rayDir.x)*4.0;\n    float skyline = floor((sin(5.3456*radial) + sin(1.234*radial)+ sin(2.177*radial))*0.6);\n    radial *= 4.0;\n    skyline += floor((sin(5.0*radial) + sin(1.234*radial)+ sin(2.177*radial))*0.6)*0.1;\n    float mask = saturate((rayDir.y*8.0 - skyline-2.5+height)*24.0);\n    float vert = sign(sin(radial*32.0))*0.5+0.5;\n    float hor = sign(sin(rayDir.y*256.0))*0.5+0.5;\n    mask = saturate(mask + (1.0-hor*vert)*0.05);\n    finalColor = mix(finalColor * vec3(0.1,0.07,0.05), finalColor, mask);\n\n\treturn finalColor;\n}\n\n// min function that supports materials in the y component\nvec2 matmin(vec2 a, vec2 b)\n{\n    if (a.x < b.x) return a;\n    else return b;\n}\n\n// ---- shapes defined by distance fields ----\n// See this site for a reference to more distance functions...\n// https://iquilezles.org/articles/distfunctions\n\n// signed box distance field\nfloat sdBox(vec3 p, vec3 radius)\n{\n  vec3 dist = abs(p) - radius;\n  return min(max(dist.x, max(dist.y, dist.z)), 0.0) + length(max(dist, 0.0));\n}\n\n// capped cylinder distance field\nfloat cylCap(vec3 p, float r, float lenRad)\n{\n    float a = length(p.xy) - r;\n    a = max(a, abs(p.z) - lenRad);\n    return a;\n}\n\n// k should be negative. -4.0 works nicely.\n// smooth blending function\nfloat smin(float a, float b, float k)\n{\n\treturn log2(exp2(k*a)+exp2(k*b))/k;\n}\n\nfloat Repeat(float a, float len)\n{\n    return mod(a, len) - 0.5 * len;\n}\n\n// Distance function that defines the car.\n// Basically it's 2 boxes smooth-blended together and a mirrored cylinder for the wheels.\nvec2 Car(vec3 baseCenter, float unique)\n{\n    // bottom box\n    float car = sdBox(baseCenter + vec3(0.0, -0.008, 0.001), vec3(0.01, 0.00225, 0.0275));\n    // top box smooth blended\n    car = smin(car, sdBox(baseCenter + vec3(0.0, -0.016, 0.008), vec3(0.005, 0.0005, 0.01)), -160.0);\n    // mirror the z axis to duplicate the cylinders for wheels\n    vec3 wMirror = baseCenter + vec3(0.0, -0.005, 0.0);\n    wMirror.z = abs(wMirror.z)-0.02;\n    float wheels = cylCap((wMirror).zyx, 0.004, 0.0135);\n    // Set materials\n    vec2 distAndMat = vec2(wheels, 3.0);\t// car wheels\n    // Car material is some big number that's unique to each car\n    // so I can have each car be a different color\n    distAndMat = matmin(distAndMat, vec2(car, 100000.0 + unique));\t// car\n    return distAndMat;\n}\n\n// How much space between voxel borders and geometry for voxel ray march optimization\nfloat voxelPad = 0.2;\n// p should be in [0..1] range on xz plane\n// pint is an integer pair saying which city block you are on\nvec2 CityBlock(vec3 p, vec2 pint)\n{\n    // Get random numbers for this block by hashing the city block variable\n    vec4 rand;\n    rand.xy = Hash22(pint);\n    rand.zw = Hash22(rand.xy);\n    vec2 rand2 = Hash22(rand.zw);\t// BCH: ..apply fft here?\n\n    // Radius of the building\n    float baseRad = 0.2 + (rand.x) * 0.1;\n    baseRad = floor(baseRad * 20.0+0.5)/20.0;\t// try to snap this for window texture\n\n    // make position relative to the middle of the block\n    vec3 baseCenter = p - vec3(0.5, 0.0, 0.5);\n    float height = rand.w*rand.z + 0.1; // height of first building block\n    // Make the city skyline higher in the middle of the city.\n    float downtown = saturate(4.0 / length(pint.xy));\n    height *= downtown;\n    height *= 1.5+(baseRad-0.15)*20.0;\n    height += 0.1;\t// minimum building height\n    //height += sin(iTime + pint.x);\t// animate the building heights if you're feeling silly\n    height = floor(height*20.0)*0.05;\t// height is in floor units - each floor is 0.05 high.\n\n    //\n    // BCH ..use: \"height\" here..\n    //\n    \n    float rad = sqrt( dot( rand.x, rand.z ) ) / 40.0;\n    vec4 bass_pump = pow( GetSpectrograph( vec2( 1.0, rand.y / 8.0 ) ) * 1.4, vec4(8.0) );\n    \n    height *= 0.5 * ( ( 0.4 * bass_pump.z ) + 0.2 ) + 1.25;\n\n    //\n\t// large building piece..\n    //\n    float d = sdBox(baseCenter, vec3(baseRad, height, baseRad));\n    \n    //\n    // road..\n    //\n    d = min(d, p.y);\n\n    //if (length(pint.xy) > 8.0) return vec2(d, mat);\t// Hack to LOD in the distance\n\n    // height of second building section\n    float height2 = max(0.0, rand.y * 2.0 - 1.0) * downtown;\n    height2 = floor(height2*20.0)*0.05;\t// floor units\n    rand2 = floor(rand2*20.0)*0.05;\t// floor units\n    // size pieces of building\n\td = min(d, sdBox(baseCenter - vec3(0.0, height, 0.0), vec3(baseRad, height2 - rand2.y, baseRad*0.4)));\n\td = min(d, sdBox(baseCenter - vec3(0.0, height, 0.0), vec3(baseRad*0.4, height2 - rand2.x, baseRad)));\n    // second building section\n    if (rand2.y > 0.25)\n    {\n\t\td = min(d, sdBox(baseCenter - vec3(0.0, height, 0.0), vec3(baseRad*0.8, height2, baseRad*0.8)));\n        // subtract off piece from top so it looks like there's a wall around the roof.\n        float topWidth = baseRad;\n        if (height2 > 0.0) topWidth = baseRad * 0.8;\n\t\td = max(d, -sdBox(baseCenter - vec3(0.0, height+height2, 0.0), vec3(topWidth-0.0125, 0.015, topWidth-0.0125)));\n    }\n    else\n    {\n        // Cylinder top section of building\n\t\tif (height2 > 0.0) d = min(d, cylCap((baseCenter - vec3(0.0, height, 0.0)).xzy, baseRad*0.8, height2));\n    }\n    // mini elevator shaft boxes on top of building\n\td = min(d, sdBox(baseCenter - vec3((rand.x-0.5)*baseRad, height+height2, (rand.y-0.5)*baseRad),\n                     vec3(baseRad*0.3*rand.z, 0.1*rand2.y, baseRad*0.3*rand2.x+0.025)));\n    // mirror another box (and scale it) so we get 2 boxes for the price of 1.\n    vec3 boxPos = baseCenter - vec3((rand2.x-0.5)*baseRad, height+height2, (rand2.y-0.5)*baseRad);\n    float big = sign(boxPos.x);\n    boxPos.x = abs(boxPos.x)-0.02 - baseRad*0.3*rand.w;\n\td = min(d, sdBox(boxPos,\n    vec3(baseRad*0.3*rand.w, 0.07*rand.y, baseRad*0.2*rand.x + big*0.025)));\n\n    // Put domes on some building tops for variety\n    if (rand.y < 0.04)\n    {\n        d = min(d, length(baseCenter - vec3(0.0, height, 0.0)) - baseRad*0.8);\n    }\n\n    //d = max(d, p.y);  // flatten the city for debugging cars\n\n    // Need to make a material variable.\n    vec2 distAndMat = vec2(d, 0.0);\n    // sidewalk box with material\n    distAndMat = matmin(distAndMat, vec2(sdBox(baseCenter, vec3(0.35, 0.005, 0.35)), 1.0));\n\n    return distAndMat;\n}\n\n// This is the distance function that defines all the scene's geometry.\n// The input is a position in space.\n// The output is the distance to the nearest surface and a material index.\nvec2 DistanceToObject(vec3 p)\n{\n//  p.y += noise2d((p.xz)*0.0625)*2.0; // Hills\n    \n    \n    vec3 rep = p;\n    rep.xz = fract(p.xz); // [0..1] for representing the position in the city block\n    vec2 distAndMat = CityBlock(rep, floor(p.xz));\n\n    // Set up the cars. This is doing a lot of mirroring and repeating because I\n    // only want to do a single call to the car distance function for all the\n    // cars in the scene. And there's a lot of traffic!\n    vec3 p2 = p;\n    rep.xyz = p2;\n    float carTime = localTime*0.2;  // Speed of car driving\n    float crossStreet = 1.0;  // whether we are north/south or east/west\n    float repeatDist = 0.25;  // Car density bumper to bumper\n    // If we are going north/south instead of east/west (?) make cars that are\n    // stopped in the street so we don't have collisions.\n    if (abs(fract(rep.x)-0.5) < 0.35)\n    {\n        p2.x += 0.05;\n        p2.xz = p2.zx * vec2(-1.0,1.0);  // Rotate 90 degrees\n        rep.xz = p2.xz;\n        crossStreet = 0.0;\n        repeatDist = 0.16;  // Denser traffic on cross streets\n    }\n    \n    rep.z += floor(p2.x);\t// shift so less repitition between parallel blocks\n    rep.x = Repeat(p2.x - 0.5, 1.0);\t// repeat every block\n    rep.z = rep.z*sign(rep.x);\t// mirror but keep cars facing the right way\n    rep.x = (rep.x*sign(rep.x))-0.09;\n    rep.z -= carTime * crossStreet;\t// make cars move\n    float uniqueID = floor(rep.z/repeatDist);\t// each car gets a unique ID that we can use for colors\n    rep.z = Repeat(rep.z, repeatDist);\t// repeat the line of cars every quarter block\n    rep.x += (Hash11(uniqueID)*0.075-0.01);\t// nudge cars left and right to take both lanes\n    float frontBack = Hash11(uniqueID*0.987)*0.18-0.09;\n    frontBack *= sin(localTime*2.0 + uniqueID);\n    rep.z += frontBack * crossStreet; // nudge cars forward back for variation\n    vec2 carDist1 = Car(rep, uniqueID); // car distance function\n    rep.y -= 0.75;\n    vec2 carDist2 = Car(rep, uniqueID); // car distance function\n\n    vec2 carDist = min( carDist1, carDist2 ); \n\n    // Drop the cars in the scene with materials\n    distAndMat = matmin(distAndMat, carDist);\n\n    return distAndMat;\n}\n\n// This basically makes a procedural texture map for the sides of the buildings.\n// It makes a texture, a normal for normal mapping, and a mask for window reflection.\nvoid CalcWindows(vec2 block, vec3 pos, inout vec3 texColor, inout float windowRef, inout vec3 normal)\n{\n    vec3 hue = vec3(Hash21(block)*0.8, Hash21(block*7.89)*0.4, Hash21(block*37.89)*0.5);\n    texColor += hue*0.4;\n    texColor *= 0.75;\n    float window = 0.0;\n    window = max(window, mix(0.2, 1.0, floor(fract(pos.y*20.0-0.35)*2.0+0.1)));\n    if (pos.y < 0.05) window = 1.0;\n    float winWidth = Hash21(block*4.321)*2.0;\n    if ((winWidth < 1.3) && (winWidth >= 1.0)) winWidth = 1.3;\n    window = max(window, mix(0.2, 1.0, floor(fract(pos.x * 40.0+0.05)*winWidth)));\n    window = max(window, mix(0.2, 1.0, floor(fract(pos.z * 40.0+0.05)*winWidth)));\n    if (window < 0.5)\n    {\n        windowRef += 1.0;\n    }\n    window *= Hash21(block*1.123);\n    texColor *= window;\n\n    float rad = sqrt( dot( pos.x, pos.z ) ) / 40.0;\n    vec4 bass_pump = windowRef * 12.0 * pow( GetSpectrograph( vec2( rad, pos.y / 8.0 ) ) * 1.4, vec4(8.0) );\n\n    texColor += 2.0 * bass_pump.xyz * (1.0 - window);\n\n    float wave = floor(sin((pos.y*40.0-0.1)*PI)*0.505-0.5)+1.0;\n    normal.y -= max(-1.0, min(1.0, -wave*0.5));\n    float pits = min(1.0, abs(sin((pos.z*80.0)*PI))*4.0)-1.0;\n    normal.z += pits*0.25;\n    pits = min(1.0, abs(sin((pos.x*80.0)*PI))*4.0)-1.0;\n    normal.x += pits*0.25;\n}\n\n// Input is UV coordinate of pixel to render.\n// Output is RGB color.\nvec3 RayTrace(in vec2 fragCoord )\n{\n    marchCount = 0.0;\n\t// -------------------------------- animate ---------------------------------------\n    sunCol = vec3(258.0, 248.0, 200.0) / 3555.0;\n\tsunDir = normalize(vec3(0.93, 1.0, 1.0));\n    horizonCol = vec3(1.0, 0.95, 0.85)*0.9;\n    skyCol = vec3(0.3,0.5,0.95);\n    exposure = 1.0;\n    fade = 1.0;\n\n\tvec3 camPos, camUp, camLookat;\n\t// ------------------- Set up the camera rays for ray marching --------------------\n    // Map uv to [-1.0..1.0]\n\tvec2 uv = fragCoord.xy/iResolution.xy * 2.0 - 1.0;\n    uv /= 2.0;  // zoom in\n\n#ifdef MANUAL_CAMERA\n    // Camera up vector.\n\tcamUp=vec3(0,1,0);\n\n\t// Camera lookat.\n\tcamLookat=vec3(0,0.0,0);\n\n    // debugging camera\n    float mx=-iMouse.x/iResolution.x*PI*2.0;// + localTime * 0.05;\n\tfloat my=iMouse.y/iResolution.y*3.14*0.5 + PI/2.0;// + sin(localTime * 0.3)*0.8+0.1;//*PI/2.01;\n\tcamPos = vec3(cos(my)*cos(mx),sin(my),cos(my)*sin(mx))*7.35;//7.35\n#else\n    // Do the camera fly-by animation and different scenes.\n    // Time variables for start and end of each scene\n    const float t0 = 0.0;\n    const float t1 = 8.0;\n    const float t2 = 14.0;\n    const float t3 = 24.0;\n    const float t4 = 38.0;\n    const float t5 = 56.0;\n    const float t6 = 58.0;\n    /*const float t0 = 0.0;\n    const float t1 = 0.0;\n    const float t2 = 0.0;\n    const float t3 = 0.0;\n    const float t4 = 0.0;\n    const float t5 = 16.0;\n    const float t6 = 18.0;*/\n    // Repeat the animation after time t6\n    localTime = fract(localTime / t6) * t6;\n    if (localTime < t1)\n    {\n        float time = localTime - t0;\n        float alpha = time / (t1 - t0);\n        fade = saturate(time);\n        fade *= saturate(t1 - localTime);\n        camPos = vec3(13.0, 3.3, -3.5);\n        camPos.x -= smoothstep(0.0, 1.0, alpha) * 4.8;\n        camUp=vec3(0,1,0);\n        camLookat=vec3(0,1.5,1.5);\n    } else if (localTime < t2)\n    {\n        float time = localTime - t1;\n        float alpha = time / (t2 - t1);\n        fade = saturate(time);\n        fade *= saturate(t2 - localTime);\n        camPos = vec3(26.0, 0.05+smoothstep(0.0, 1.0, alpha)*0.4, 2.0);\n        camPos.z -= alpha * 2.8;\n        camUp=vec3(0,1,0);\n        camLookat=vec3(camPos.x-0.3,-8.15,-40.0);\n        \n        sunDir = normalize(vec3(0.95, 0.6, 1.0));\n        sunCol = vec3(258.0, 248.0, 160.0) / 3555.0;\n        exposure *= 0.7;\n        skyCol *= 1.5;\n    } else if (localTime < t3)\n    {\n        float time = localTime - t2;\n        float alpha = time / (t3 - t2);\n        fade = saturate(time);\n        fade *= saturate(t3 - localTime);\n        camPos = vec3(12.0, 6.3, -0.5);\n        camPos.y -= alpha * 5.5;\n        camPos.x = cos(alpha*1.0) * 5.2;\n        camPos.z = sin(alpha*1.0) * 5.2;\n        camUp=normalize(vec3(0,1,-0.5 + alpha * 0.5));\n        camLookat=vec3(0,1.0,-0.5);\n    } else if (localTime < t4)\n    {\n        float time = localTime - t3;\n        float alpha = time / (t4 - t3);\n        fade = saturate(time);\n        fade *= saturate(t4 - localTime);\n        camPos = vec3(2.15-alpha*0.5, 0.02, -1.0-alpha*0.2);\n        camPos.y += smoothstep(0.0,1.0,alpha*alpha) * 3.4;\n        camUp=normalize(vec3(0,1,0.0));\n        camLookat=vec3(0,0.5+alpha,alpha*5.0);\n    } else if (localTime < t5)\n    {\n        float time = localTime - t4;\n        float alpha = time / (t5 - t4);\n        fade = saturate(time);\n        fade *= saturate(t5 - localTime);\n        camPos = vec3(-2.0, 1.3- alpha*1.2, -10.5-alpha*0.5);\n        camUp=normalize(vec3(0,1,0.0));\n        camLookat=vec3(-2.0,0.3+alpha,-0.0);\n        sunDir = normalize(vec3(0.5-alpha*0.6, 0.3-alpha*0.3, 1.0));\n        sunCol = vec3(258.0, 148.0, 60.0) / 3555.0;\n        localTime *= 16.0;\n        exposure *= 0.4;\n        horizonCol = vec3(1.0, 0.5, 0.35)*2.0;\n        skyCol = vec3(0.75,0.5,0.95);\n\n    } else if (localTime < t6)\n    {\n        fade = 0.0;\n        camPos = vec3(26.0, 100.0, 2.0);\n        camUp=vec3(0,1,0);\n        camLookat=vec3(0.3,0.15,0.0);\n    }\n#endif\n\n\t// Camera setup for ray tracing / marching\n\tvec3 camVec=normalize(camLookat - camPos);\n\tvec3 sideNorm=normalize(cross(camUp, camVec));\n\tvec3 upNorm=cross(camVec, sideNorm);\n\tvec3 worldFacing=(camPos + camVec);\n\tvec3 worldPix = worldFacing + uv.x * sideNorm * (iResolution.x/iResolution.y) + uv.y * upNorm;\n\tvec3 rayVec = normalize(worldPix - camPos);\n\n\t// ----------------------------- Ray march the scene ------------------------------\n\tvec2 distAndMat;  // Distance and material\n\tfloat t = 0.05;// + Hash2d(uv)*0.1;\t// random dither-fade things close to the camera\n\tconst float maxDepth = 45.0; // farthest distance rays will travel\n\tvec3 pos = vec3(0.0);\n    const float smallVal = 0.000625;\n\t// ray marching time\n    for (int i = 0; i < 250; i++)\t// This is the count of the max times the ray actually marches.\n    {\n        marchCount+=1.0;\n        // Step along the ray.\n        pos = (camPos + rayVec * t);\n        // This is _the_ function that defines the \"distance field\".\n        // It's really what makes the scene geometry. The idea is that the\n        // distance field returns the distance to the closest object, and then\n        // we know we are safe to \"march\" along the ray by that much distance\n        // without hitting anything. We repeat this until we get really close\n        // and then break because we have effectively hit the object.\n        distAndMat = DistanceToObject(pos);\n\n        // 2d voxel walk through the city blocks.\n        // The distance function is not continuous at city block boundaries,\n        // so we have to pause our ray march at each voxel boundary.\n        float walk = distAndMat.x;\n        float dx = -fract(pos.x);\n        if (rayVec.x > 0.0) dx = fract(-pos.x);\n        float dz = -fract(pos.z);\n        if (rayVec.z > 0.0) dz = fract(-pos.z);\n        float nearestVoxel = min(fract(dx/rayVec.x), fract(dz/rayVec.z))+voxelPad;\n        nearestVoxel = max(voxelPad, nearestVoxel);// hack that assumes streets and sidewalks are this wide.\n        //nearestVoxel = max(nearestVoxel, t * 0.02); // hack to stop voxel walking in the distance.\n        walk = min(walk, nearestVoxel);\n\n        // move down the ray a safe amount\n        t += walk;\n        // If we are very close to the object, let's call it a hit and exit this loop.\n        if ((t > maxDepth) || (abs(distAndMat.x) < smallVal)) break;\n    }\n\n    // Ray trace a ground plane to infinity\n    float alpha = -camPos.y / rayVec.y;\n    if ((t > maxDepth) && (rayVec.y < -0.0))\n    {\n        pos.xz = camPos.xz + rayVec.xz * alpha;\n        pos.y = -0.0;\n        t = alpha;\n        distAndMat.y = 0.0;\n        distAndMat.x = 0.0;\n    }\n\t// --------------------------------------------------------------------------------\n\t// Now that we have done our ray marching, let's put some color on this geometry.\n\t\n    vec3 finalColor = vec3(0.0);\n\n    // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n    float time = iTime * 1.0 + 0.25;\n  \n\tvec3 dir = camLookat.xyz;    \n\tvec3 from = camPos.xyz;    \n    \n    //\n\t// Volumetric rendering 2nd pass - Larger Stars..\n\t//\n\tfloat s2 = 0.1;\n\tfloat fade2 = 1.0;\n\tvec3 v2 = vec3(0.0);\n\tfor ( int r = 0; r < volsteps2; r++ ) \n    {\n\t\tvec3 p = from + s2 * dir * 0.5;\n\t\tp = abs( vec3( tile2 ) - mod( p, vec3( tile2 * 2.0 ) ) ); // tiling fold\n\t\tfloat pa = 0.0;\n\t\tfloat a = 0.0;\n\n\t\tfor (int i=0; i<iterations2; i++) \n        { \n\t\t\tp=abs(p)/dot(p,p)-formuparam2; \t// the magic formula\n\t\t\ta+=abs(length(p)-pa); \t\t\t// absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\t\n        float dm = max(0.0,darkmatter2-a*a*0.001); \t// dark matter\n\t\ta*= a * a; \t\t\t\t\t\t\t\t\t// add contrast\n\t\tif (r>6) fade2 *= 1.0 - dm; \t\t\t\t// dark matter, don't render near\n        v2 += fade2;\n\t\tv2 += vec3( s2, s2*s2, s2*s2*s2*s2 ) * a * brightness2 * fade2; // colouring based on distance\n        fade2 *= distfading2; \t\t\t\t\t\t// distance fading\n        s2 += stepsize2;\n\t}\n\t\n    v2 = mix(vec3(length(v2)),v2,saturation2) * 0.01; // colour adjust\n    \n    float deSat2 = dot( v2.xyz, deSatConst );   \n   \tvec3 saturateRGB2 = mix( vec3( deSat2, deSat2, deSat2 ), v2.xyz, kSaturation2 );\n    vec3 brightnessRGB2 = clamp( saturateRGB2 + kBrightness2, 0.0, 1.0 );\n    vec3 contrastRGB2 = clamp( pow( brightnessRGB2 * 2.0, vec3( kContrast2, kContrast2, kContrast2 ) ) * 0.5, 0.0, 1.0 );\n\t    \n    // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n    // If a ray actually hit the object, let's light it.\n    if ((t <= maxDepth) || (t == alpha))\n\t{\n        float dist = distAndMat.x;\n        // calculate the normal from the distance field. The distance field is a volume, so if you\n        // sample the current point and neighboring points, you can use the difference to get\n        // the normal.\n        vec3 smallVec = vec3(smallVal, 0, 0);\n        vec3 normalU = vec3(dist - DistanceToObject(pos - smallVec.xyy).x,\n                           dist - DistanceToObject(pos - smallVec.yxy).x,\n                           dist - DistanceToObject(pos - smallVec.yyx).x);\n        vec3 normal = normalize(normalU);\n\n        // calculate 2 ambient occlusion values. One for global stuff and one\n        // for local stuff\n        float ambientS = 1.0;\n        ambientS *= saturate(DistanceToObject(pos + normal * 0.0125).x*80.0);\n        ambientS *= saturate(DistanceToObject(pos + normal * 0.025).x*40.0);\n        ambientS *= saturate(DistanceToObject(pos + normal * 0.05).x*20.0);\n        ambientS *= saturate(DistanceToObject(pos + normal * 0.1).x*10.0);\n        ambientS *= saturate(DistanceToObject(pos + normal * 0.2).x*5.0);\n        ambientS *= saturate(DistanceToObject(pos + normal * 0.4).x*2.5);\n        //ambientS *= saturate(DistanceToObject(pos + normal * 0.8).x*1.25);\n        float ambient = ambientS;// * saturate(DistanceToObject(pos + normal * 1.6).x*1.25*0.5);\n        //ambient *= saturate(DistanceToObject(pos + normal * 3.2)*1.25*0.25);\n        //ambient *= saturate(DistanceToObject(pos + normal * 6.4)*1.25*0.125);\n        ambient = max(0.025, pow(ambient, 0.5));\t// tone down ambient with a pow and min clamp it.\n        ambient = saturate(ambient);\n\n        // calculate the reflection vector for highlights\n        vec3 ref = reflect(rayVec, normal);\n\n        // Trace a ray toward the sun for sun shadows\n        float sunShadow = 1.0;\n        float iter = 0.01;\n        vec3 nudgePos = pos + normal*0.002;\t// don't start tracing too close or inside the object\n\t\tfor (int i = 0; i < 40; i++)\n        {\n            vec3 shadowPos = nudgePos + sunDir * iter;\n            float tempDist = DistanceToObject(shadowPos).x;\n\t        sunShadow *= saturate(tempDist*150.0);\t// Shadow hardness\n            if (tempDist <= 0.0) break;\n\n            float walk = tempDist;\n            float dx = -fract(shadowPos.x);\n            if (sunDir.x > 0.0) dx = fract(-shadowPos.x);\n            float dz = -fract(shadowPos.z);\n            if (sunDir.z > 0.0) dz = fract(-shadowPos.z);\n            float nearestVoxel = min(fract(dx/sunDir.x), fract(dz/sunDir.z))+smallVal;\n            nearestVoxel = max(0.2, nearestVoxel);// hack that assumes streets and sidewalks are this wide.\n            walk = min(walk, nearestVoxel);\n\n            iter += max(0.01, walk);\n            if (iter > 4.5) break;\n        }\n        sunShadow = saturate(sunShadow);\n\n        // make a few frequencies of noise to give it some texture\n        float n =0.0;\n        n += noise(pos*32.0);\n        n += noise(pos*64.0);\n        n += noise(pos*128.0);\n        n += noise(pos*256.0);\n        n += noise(pos*512.0);\n        n = mix(0.7, 0.95, n);\n\n        // ------ Calculate texture color  ------\n        vec2 block = floor(pos.xz);\n        vec3 texColor = vec3(0.95, 1.0, 1.0);\n        texColor *= 0.8;\n        float windowRef = 0.0;\n        // texture map the sides of buildings\n        if ((normal.y < 0.1) && (distAndMat.y == 0.0))\n        {\n            vec3 posdx = dFdx(pos);\n            vec3 posdy = dFdy(pos);\n            vec3 posGrad = posdx * Hash21(uv) + posdy * Hash21(uv*7.6543);\n\n            // Quincunx antialias the building texture and normal map.\n            // I guess procedural textures are hard to mipmap.\n            vec3 colTotal = vec3(0.0);\n            vec3 colTemp = texColor;\n            vec3 nTemp = vec3(0.0);\n            CalcWindows(block, pos, colTemp, windowRef, nTemp);\n            colTotal = colTemp;\n\n            colTemp = texColor;\n            CalcWindows(block, pos + posdx * 0.666, colTemp, windowRef, nTemp);\n            colTotal += colTemp;\n\n            colTemp = texColor;\n            CalcWindows(block, pos + posdx * 0.666 + posdy * 0.666, colTemp, windowRef, nTemp);\n            colTotal += colTemp;\n\n            colTemp = texColor;\n            CalcWindows(block, pos + posdy * 0.666, colTemp, windowRef, nTemp);\n            colTotal += colTemp;\n\n            colTemp = texColor;\n            CalcWindows(block, pos + posdx * 0.333 + posdy * 0.333, colTemp, windowRef, nTemp);\n            colTotal += colTemp;\n\n            texColor = colTotal * 0.2;\n            windowRef *= 0.2;\n\n            normal = normalize(normal + nTemp * 0.2);\n        }\n        else\n        {\n            // Draw the road\n            float xroad = abs(fract(pos.x+0.5)-0.5);\n            float zroad = abs(fract(pos.z+0.5)-0.5);\n            float road = saturate((min(xroad, zroad)-0.143)*480.0);\n            texColor *= 1.0-normal.y*0.95*Hash21(block*9.87)*road; // change rooftop color\n            texColor *= mix(0.1, 1.0, road);\n\n            // double yellow line in middle of road\n            float yellowLine = saturate(1.0-(min(xroad, zroad)-0.002)*480.0);\n            yellowLine *= saturate((min(xroad, zroad)-0.0005)*480.0);\n            yellowLine *= saturate((xroad*xroad+zroad*zroad-0.05)*880.0);\n            texColor = mix(texColor, vec3(1.0, 0.8, 0.3), yellowLine);\n\n            // white dashed lines on road\n            float whiteLine = saturate(1.0-(min(xroad, zroad)-0.06)*480.0);\n            whiteLine *= saturate((min(xroad, zroad)-0.056)*480.0);\n            whiteLine *= saturate((xroad*xroad+zroad*zroad-0.05)*880.0);\n            whiteLine *= saturate(1.0-(fract(zroad*8.0)-0.5)*280.0);  // dotted line\n            whiteLine *= saturate(1.0-(fract(xroad*8.0)-0.5)*280.0);\n            texColor = mix(texColor, vec3(0.5), whiteLine);\n\n            whiteLine = saturate(1.0-(min(xroad, zroad)-0.11)*480.0);\n            whiteLine *= saturate((min(xroad, zroad)-0.106)*480.0);\n            whiteLine *= saturate((xroad*xroad+zroad*zroad-0.06)*880.0);\n            texColor = mix(texColor, vec3(0.5), whiteLine);\n\n            // crosswalk\n            float crossWalk = saturate(1.0-(fract(xroad*40.0)-0.5)*280.0);\n            crossWalk *= saturate((zroad-0.15)*880.0);\n            crossWalk *= saturate((-zroad+0.21)*880.0)*(1.0-road);\n            crossWalk *= n*n;\n            texColor = mix(texColor, vec3(0.25), crossWalk);\n            crossWalk = saturate(1.0-(fract(zroad*40.0)-0.5)*280.0);\n            crossWalk *= saturate((xroad-0.15)*880.0);\n            crossWalk *= saturate((-xroad+0.21)*880.0)*(1.0-road);\n            crossWalk *= n*n;\n            texColor = mix(texColor, vec3(0.25), crossWalk);\n\n            {\n                // sidewalk cracks\n                float sidewalk = 1.0;\n                vec2 blockSize = vec2(100.0);\n                if (pos.y > 0.1) blockSize = vec2(10.0, 50);\n                //sidewalk *= pow(abs(sin(pos.x*blockSize)), 0.025);\n                //sidewalk *= pow(abs(sin(pos.z*blockSize)), 0.025);\n                sidewalk *= saturate(abs(sin(pos.z*blockSize.x)*800.0/blockSize.x));\n                sidewalk *= saturate(abs(sin(pos.x*blockSize.y)*800.0/blockSize.y));\n                sidewalk = saturate(mix(0.7, 1.0, sidewalk));\n                sidewalk = saturate((1.0-road) + sidewalk);\n                texColor *= sidewalk;\n            }\n        }\n        // Car tires are almost black to not call attention to their ugly.\n        if (distAndMat.y == 3.0)\n        {\n            texColor = vec3(0.05);\n        }\n\n        // apply noise\n        texColor *= vec3(1.0)*n*0.05;\n        texColor *= 0.7;\n        texColor = saturate(texColor);\n\n        float windowMask = 0.0;\n        if (distAndMat.y >= 100.0)\n        {\n            // car texture and windows\n            texColor = vec3(Hash11(distAndMat.y)*1.0, Hash11(distAndMat.y*8.765), Hash11(distAndMat.y*17.731))*0.1;\n            texColor = pow(abs(texColor), vec3(0.2));  // bias toward white\n            texColor = max(vec3(0.25), texColor);  // not too saturated color.\n            texColor.z = min(texColor.y, texColor.z);  // no purple cars. just not realistic. :)\n            texColor *= Hash11(distAndMat.y*0.789) * 0.15;\n            windowMask = saturate( max(0.0, abs(pos.y - 0.0175)*3800.0)-10.0);\n            vec2 dirNorm = abs(normalize(normal.xz));\n            float pillars = saturate(1.0-max(dirNorm.x, dirNorm.y));\n            pillars = pow(max(0.0, pillars-0.15), 0.125);\n            windowMask = max(windowMask, pillars);\n            texColor *= windowMask;\n        }\n\n        // ------ Calculate lighting color ------\n        // Start with sun color, standard lighting equation, and shadow\n        vec3 lightColor = vec3(100.0)*sunCol * saturate(dot(sunDir, normal)) * sunShadow;\n        // weighted average the near ambient occlusion with the far for just the right look\n        float ambientAvg = (ambient*3.0 + ambientS) * 0.25;\n        // Add sky color with ambient acclusion\n        lightColor += (skyCol * saturate(normal.y *0.5+0.5))*pow(ambientAvg, 0.35)*2.5;\n        lightColor *= 4.0;\n\n        // finally, apply the light to the texture.\n        finalColor = texColor * lightColor;\n        // Reflections for cars\n        if (distAndMat.y >= 100.0)\n        {\n            float yfade = max(0.01, min(1.0, ref.y*100.0));\n            // low-res way of making lines at the edges of car windows. Not sure I like it.\n            yfade *= (saturate(1.0-abs(dFdx(windowMask)*dFdy(windowMask))*250.995));\n            finalColor += GetEnvMapSkyline(ref, sunDir, pos.y-1.5)*0.3*yfade*max(0.4,sunShadow);\n            finalColor += saturate( texture(iChannel0, ref).xyz - vec3(0.35) ) * 0.15 * max( 0.2, sunShadow );\n        }\n        // reflections for building windows\n        if (windowRef != 0.0)\n        {\n            finalColor *= mix(1.0, 0.6, windowRef);\n            float yfade = max(0.01, min(1.0, ref.y*100.0));\n            finalColor += GetEnvMapSkyline(ref, sunDir, pos.y-0.5)*0.6*yfade*max(0.6,sunShadow)*windowRef;//*(windowMask*0.5+0.5);\n            finalColor += saturate( texture(iChannel0, ref).xyz - vec3(0.35))*0.15*max(0.25,sunShadow)*windowRef;\n        }\n        finalColor *= 0.9;\n        // fog that fades to reddish plus the sun color so that fog is brightest towards sun\n        vec3 rv2 = rayVec;\n        rv2.y *= saturate(sign(rv2.y));\n        vec3 fogColor = GetEnvMap(rv2, sunDir);\n        fogColor = min(vec3(9.0), fogColor);\n        finalColor = mix(fogColor, finalColor, exp(-t*0.02));\n\n        // visualize length of gradient of distance field to check distance field correctness\n        //finalColor = vec3(0.5) * (length(normalU) / smallVec.x);\n        //finalColor = vec3(marchCount)/255.0;\n\t}\n    else\n    {\n        // Our ray trace hit nothing, so draw sky.\n        finalColor = GetEnvMap(rayVec, sunDir);\n    }\n\n    finalColor.xyz += contrastRGB2;\n\n    // vignette?\n    finalColor *= vec3(1.0) * saturate(1.0 - length(uv/2.5));\n    finalColor *= 1.3*exposure;\n\n\t// output the final color without gamma correction - will do gamma later.\n\treturn vec3(clamp(finalColor, 0.0, 1.0)*saturate(fade+0.2));\n}\n\n#ifdef NON_REALTIME_HQ_RENDER\n// This function breaks the image down into blocks and scans\n// through them, rendering 1 block at a time. It's for non-\n// realtime things that take a long time to render.\n\n// This is the frame rate to render at. Too fast and you will\n// miss some blocks.\nconst float blockRate = 20.0;\nvoid BlockRender(in vec2 fragCoord)\n{\n    // blockSize is how much it will try to render in 1 frame.\n    // adjust this smaller for more complex scenes, bigger for\n    // faster render times.\n    const float blockSize = 64.0;\n    // Make the block repeatedly scan across the image based on time.\n    float frame = floor(iTime * blockRate);\n    vec2 blockRes = floor(iResolution.xy / blockSize) + vec2(1.0);\n    // ugly bug with mod.\n    //float blockX = mod(frame, blockRes.x);\n    float blockX = fract(frame / blockRes.x) * blockRes.x;\n    //float blockY = mod(floor(frame / blockRes.x), blockRes.y);\n    float blockY = fract(floor(frame / blockRes.x) / blockRes.y) * blockRes.y;\n    // Don't draw anything outside the current block.\n    if ((fragCoord.x - blockX * blockSize >= blockSize) ||\n    \t(fragCoord.x - (blockX - 1.0) * blockSize < blockSize) ||\n    \t(fragCoord.y - blockY * blockSize >= blockSize) ||\n    \t(fragCoord.y - (blockY - 1.0) * blockSize < blockSize))\n    {\n        discard;\n    }\n}\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tgUV = fragCoord.xy / iResolution.xy;\n\n#ifdef NON_REALTIME_HQ_RENDER\n    // Optionally render a non-realtime scene with high quality\n    BlockRender(fragCoord);\n#endif\n\n    // Do a multi-pass render\n    vec3 finalColor = vec3(0.0);\n#ifdef NON_REALTIME_HQ_RENDER\n    for (float i = 0.0; i < antialiasingSamples; i++)\n    {\n        const float motionBlurLengthInSeconds = 1.0 / 60.0;\n        // Set this to the time in seconds of the frame to render.\n\t    localTime = frameToRenderHQ;\n        // This line will motion-blur the renders\n        localTime += Hash11(v21(fragCoord + seed)) * motionBlurLengthInSeconds;\n        // Jitter the pixel position so we get antialiasing when we do multiple passes.\n        vec2 jittered = fragCoord.xy + vec2(\n            Hash21(fragCoord + seed),\n            Hash21(fragCoord*7.234567 + seed)\n            );\n        // don't antialias if only 1 sample.\n        if (antialiasingSamples == 1.0) jittered = fragCoord;\n        // Accumulate one pass of raytracing into our pixel value\n\t    finalColor += RayTrace(jittered);\n        // Change the random seed for each pass.\n\t    seed *= 1.01234567;\n    }\n    // Average all accumulated pixel intensities\n    finalColor /= antialiasingSamples;\n#else\n    // Regular real-time rendering\n    localTime = iTime;\n    finalColor = RayTrace(fragCoord);\n#endif\n\n    fragColor = vec4(sqrt(clamp(finalColor, 0.0, 1.0)),1.0);\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// -------- ------- ------ ----- ---- --- -- -\n//\n//              Test [ Press ]\n//\n//              N-e-b-u-l-o-u-s\n//\n// \"There is no destination but the journey itself.\"\n//\n// -------- ------- ------ ----- ---- --- -- -\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pixelSize = 1.0 / iResolution.xy;\n    vec2        uv = fragCoord.xy * pixelSize;\n    \n    float fft;\n    \n    if ( uv.x > ( 1.0 - pixelSize.x ) )\n    {\n        //\n        // Draw the incoming souncloud fft data into the very right hand side of the display..\n        //\n    \t\n        fft = texture( iChannel0, uv.yx * vec2( 1.0, -1.0 ) + vec2( 0.0, 1.0 ) ).x;\n    }\n    else\n    {\n        //\n        // Otherwise, use feedback by reading what is already in this display buffer!\n        //\n        //  ( see: iChannel1 - it refers to 'this' texture buffer, namely: \"Buf C\" )\n        //\n        \n        fft = texture( iChannel1, uv + vec2( 4.0, 0.0 ) * pixelSize ).x;\n    }\n    \n    fragColor = vec4( fft, fft, fft, 0.0 );\n}\n\n// -------- ------- ------ ----- ---- --- -- -\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 16068,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/ngc4244/tespress"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// -------- ------- ------ ----- ---- --- -- -\n//\n//              Test [ Press ]\n//\n//              N-e-b-u-l-o-u-s\n//\n// \"There is no destination but the journey itself.\"\n//\n// -------- ------- ------ ----- ---- --- -- -\n// \n// So very heavily based on the supurb shader:\n//\n// https://www.shadertoy.com/view/XtsSWs\n//\n// Created by otaviogood in 2015-Sep-24\n//\n// The use of which very kindly granted by the notice below..\n//\n//  Thank you dearly Otavio.\n//\n// -------- ------- ------ ----- ---- --- -- -\n\n// -------- ------- ------ ----- ---- --- -- -\n//\n//  Modified by: Nimajamin - July 2017 - Sep 2018\n//\n// -------- ------- ------ ----- ---- --- -- -\n\n/*--------------------------------------------------------------------------------------\nLicense CC0 - http://creativecommons.org/publicdomain/zero/1.0/\nTo the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.\n----------------------------------------------------------------------------------------\n^ This means do ANYTHING YOU WANT with this code. Because we are programmers, not lawyers.\n-Otavio Good\n*/\n\n//\n// -------------------------------------------------------------\n//\n// Kaleidoscope code by: randomekek \n//\n// From the shader: \"rotating kaleidoscope\"\n//\n// - https://www.shadertoy.com/view/Msy3Dt\n//\n// -------------------------------------------------------------\n//\n// Soundtrack: \"Test [ Press ]\" N-e-b-u-l-o-u-s 2018 [ ngc4244 ]\n//\n// - https://soundcloud.com/ngc4244/tespress\n//\n// -------------------------------------------------------------\n//\n\n// Base image is generated in the Buff-B pass..\nvec4 baseImage(in vec2 uv) \n{\n\treturn texture( iChannel1, uv );   \n}\n\nvec4 spectralImage( in vec2 uv )\n{\n    return texture( iChannel0, vec2( uv.x, 1.0 - uv.y ) );\n}\n\n// maps points onto unit square.\nconst vec2 tile = vec2(1.0, sqrt(3.0)*0.5);\nconst float pi = 3.1415926;\nconst float sixty = pi / 3.0;\nconst float track_length = 444.0;\n\nvec2 kaleidoscope(in vec2 uv) \n{\n    float row = floor(uv.x / tile.x);\n    vec2 local = (fract(uv + mod(row,2.0)*vec2(-2.0*uv.x,0.0)/ tile) - 0.5) * tile;\n    float theta = atan(local.y, local.x);\n    float triangle = floor(theta / sixty);\n    float rotated = mod(theta + mod(triangle,2.0)*(sixty - 2.0*theta), sixty);\n    return length(local) * vec2(cos(rotated), sin(rotated));\n}\n\nvec2 kaleidoscope_freak(in vec2 uv) \n{\n    vec2 del = vec2( 0.5 - uv );\n    float rad = sqrt( dot(del,del) ) * fract( iTime / track_length );\n    float row = floor(uv.x / tile.x);\n    vec2 local = (fract(uv + mod(row,2.0)*vec2(-2.0*uv.x,0.0)/ tile) - 0.5) * tile;\n    float theta = atan(local.y, local.x) + spectralImage(vec2(1.0, rad)).x * (1.0+(rad*rad)) * 4.0;\n    float triangle = floor(theta / sixty);\n    float rotated = mod(theta + mod(triangle,2.0)*(sixty - 2.0*theta), sixty);\n    return length(local) * vec2(cos(rotated), sin(rotated));\n}\n\nvec2 rotate(in vec2 uv, in float theta) \n{\n    mat2 rotate = mat2(cos(theta), sin(theta), -sin(theta), cos(theta));\n    return rotate*uv  * 1.0 + 10.0 * fract( iTime / track_length );\n}\n\nvec2 slide(in vec2 uv, in float theta) \n{\n    float zoom = 0.2 + 0.2 * (1.0 - sin(theta));\n    vec2 translate = theta*vec2(1.0, 1.0);\n    return rotate(uv + translate, theta) * zoom;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = fract ( ( iTime + 9.15 ) / track_length ) * track_length;\n    vec2 scr_uv = (fragCoord.xy / iResolution.xy);\n    vec2 city_uv = scr_uv;\n    scr_uv.x = ( (scr_uv.x - 0.5) * (iResolution.x / iResolution.y) ) + 0.5;\n\tvec2 uv = (fragCoord.xy / iResolution.xx - 0.5) * 7.0;\n    vec2 del = vec2( 0.5 - scr_uv );\n    float rad_r = 1.0- sqrt( dot(del,del) * 2.2 );// * fract( iTime / 2638.0 );\n    float rad_g = 1.0- sqrt( dot(del,del) );// * fract( iTime / 2638.0 );\n    float rad_b = 1.0- sqrt( dot(del,del) * 0.2 );// * fract( iTime / 2638.0 );\n    \n    vec4 rad = vec4( rad_r, rad_g, rad_b, 0.0);\n    vec4 rad2 = vec4( rad_r, rad_g, rad_b, 0.0) + ((track_length-t)/track_length) * vec4( 1.0-rad_r, rad_g, rad_b, 0.0);\n    \n    float frek = clamp( spectralImage( vec2( rad2.y, 0.3 ) ).x * 3.0, 0.0, 1.2 );\n                               \n    vec4 scr_image = baseImage( city_uv );\n    vec4 kal_image = baseImage( rotate(kaleidoscope(scr_uv.yx), t * 0.1) * 4.0 ) * frek;\n    vec4 kal_image_freak = baseImage( rotate(kaleidoscope_freak(scr_uv.yx), t * 0.1) * 4.0 ) * frek;\n\tfragColor = rad * scr_image * (0.2 + (1.0-rad)) * 0.6\n              + (rad * kal_image_freak) \n              + ((1.0-rad) * scr_image * ( kal_image * baseImage( rotate(kaleidoscope(slide(uv, t*0.048)), t*0.12) * 4.0 ) ) );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}