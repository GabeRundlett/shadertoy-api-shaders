{
    "Shader": {
        "info": {
            "date": "1578783703",
            "description": "aims to represent matrix multiplication to the math circle coordinates.\nEnter your matrix in matrixModifier.\nYou can make a square if you use pInfinite distance.",
            "flags": 0,
            "hasliked": 0,
            "id": "tlGGWh",
            "likes": 6,
            "name": "CircleMatrix2D",
            "published": 3,
            "tags": [
                "math"
            ],
            "usePreview": 0,
            "username": "Lordinator",
            "viewed": 487
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n\nfloat smoothEquality(float a, float b, float sharpness){\n    return exp(-abs(a-b)*sharpness);\n}\n\nfloat pInfiniteLength(vec2 a){\n    return  max(abs(a.x),abs(a.y));\n}\n\n/*\n\th : given in radians.\n\ts : from 0 to 1.\n\tv : from 0 to 1.\n*/\nvec3 hsvToRgb(vec3 hsv){/* disgusting (and not understood) but from wikipedia :\n\t\t\t\t\t\thttps://fr.wikipedia.org/wiki/Teinte_Saturation_Valeur */\n    float s = hsv.y;\n    float v = hsv.z;\n    \n    \n    vec3 rgb;\n    hsv.x *= 180.f/pi;\n    hsv.x = mod(hsv.x,360.f);\n    int state = int(hsv.x/60.f)%6;\n    float f = hsv.x/60.f - float(state);\n    \n    float l = (1.f - s);\n    float m = (1.f - s * f);\n    float n = (1.f - (1.f-f) * s);\n\t\n    return v * vec3[](vec3(1,n,l),\n                 vec3(m,1,l),\n                 vec3(l,1,n),\n                 vec3(l,m,1),\n                 vec3(n,l,1),\n                 vec3(1,l,m))[state];\n}\n\nvec3 smoothedCircle(vec2 xy, vec2 center,\n                    float radius, float sharpness){\n    xy/=radius;\n    return vec3(hsvToRgb(vec3(pi + atan(xy.y,xy.x),1.0f,\n                              smoothEquality(length(xy-center),radius,sharpness))));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float angle = iTime*iTime*0.5;\n        mat2 matrixModifier =mat2(2.0*cos(angle), .1*sin(angle),\n                              -sin(angle), cos(angle));\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 xy = fragCoord;\n\txy -= iResolution.xy * 0.5f;\n    xy *= 0.01;\n    vec2 modifiedXY = xy * inverse(matrixModifier);\n    // Time varying pixel color\n    vec3 col = \tsmoothedCircle(modifiedXY\t,vec2(0,0),1.f,15.f)+\n        \t\tsmoothedCircle(xy\t\t\t,vec2(0,0),0.5f,4.f);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}