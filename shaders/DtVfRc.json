{
    "Shader": {
        "info": {
            "date": "1702341417",
            "description": "another basic ui element for whatever you want\n",
            "flags": 32,
            "hasliked": 0,
            "id": "DtVfRc",
            "likes": 4,
            "name": "ui tabs",
            "published": 3,
            "tags": [
                "mouse",
                "sdf",
                "input"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 151
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    //make sure your mouse coordinates in buffer A are in uv coords\n    vec2 uv = uv_transform(fragCoord,iResolution.xy);\n    float pxunit = 1.0/iResolution.y; //the size of a pixel for blending\n\n    //position of handle\n    int selected = int(texelFetch(iChannel0,ivec2(0,0),0).x);\n    //vec2 p = toggled ? vec2(-toggleRadius,0) : vec2(toggleRadius,0);\n    \n    vec3 col = mix(vec3(0.8),vec3(1),float(abs(mod(uv.x,0.1) - mod(uv.y,0.1)) > 0.05));\n    \n    bool isTab = false;\n    for (int i = 0; i < tabs; i++){\n        vec2 offset = vec2(float(i)*(tabSize.x*2.0 + 0.03),0);\n        if (uv.x < tabSize.x + offset.x + 0.015 && uv.x > -tabSize.x + offset.x - 0.015 && uv.y < tabSize.y + 0.015 && uv.y > -tabSize.y){\n            if (i == selected){\n                float innerdist = min(sdRoundBox(uv - offset, tabSize, vec4(tabCorner,0,tabCorner,0)), uv.y + tabSize.y - pxunit*2.0 - 0.002);\n                col = mix(col, vec3(0.6), smoothstep(0.0, pxunit, innerdist));\n                col = mix(col, vec3(0.2), smoothstep(0.0, pxunit, 0.002-abs(innerdist)));\n            } else {\n                float innerdist = sdRoundBox(uv - offset, tabSize, vec4(tabCorner,0,tabCorner,0));\n                float edgedist = uv.y + tabSize.y - pxunit*2.0 - 0.002;\n                vec3 tabcol = mix(vec3(0.8), vec3(0.6), smoothstep(0.0, pxunit, innerdist));\n                tabcol = mix(tabcol, vec3(0.2), smoothstep(0.0, pxunit, 0.002-abs(innerdist)));\n                col = mix(col, tabcol, smoothstep(0.0, pxunit, edgedist));\n                col = mix(col, vec3(0.2), smoothstep(0.0, pxunit, 0.002-abs(edgedist)));\n            }\n            isTab = true;\n        }\n    }\n    if (!isTab){\n        float edgedist = uv.y + tabSize.y - pxunit*2.0 - 0.002;\n        col = mix(col, vec3(0.6), smoothstep(0.0, pxunit, edgedist));\n        col = mix(col, vec3(0.2), smoothstep(0.0, pxunit, 0.002-abs(edgedist)));\n    }\n        \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 data = vec4(0);\n    if (floor(fragCoord) == vec2(0,0)){\n        float index = texelFetch(iChannel0,ivec2(0,0),0).x;\n        vec2 mc = uv_transform(abs(iMouse.zw),iResolution.xy);\n        float idx = floor((mc.x + tabSize.x)/(tabSize.x*2.0 + 0.03));\n        vec2 offset = vec2(idx*(tabSize.x*2.0 + 0.03),0);\n        if (iMouse.w >= 0.0 && sdRoundBox(mc - offset, tabSize, vec4(tabCorner,0,tabCorner,0)) < 0.0){\n            index = idx;\n        }\n        \n        data = vec4(index,0,0,0);\n    }\n    fragColor = data;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const vec2 tabSize = vec2(0.15,0.12);\nconst float tabCorner = 0.05;\nconst int tabs = 5;\n\nvec2 uv_transform(vec2 uv, vec2 res){\n    return (uv - res/2.0)/res.y - vec2(-0.65,0);\n}\n\nvec2 pointOnLine(vec2 a, vec2 b, vec2 p){\n    vec2 ab = b - a;\n    return a + clamp(dot(p - a, ab)/dot(ab, ab),0.0,1.0)*ab;\n}\n\nfloat sdLine(vec2 a, vec2 b, vec2 p){\n    return distance(p,pointOnLine(a,b,p));\n}\n\n//https://www.shadertoy.com/view/4llXD7\nfloat sdRoundBox( in vec2 p, in vec2 b, in vec4 r ) {\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\n#define PI 3.14159",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}