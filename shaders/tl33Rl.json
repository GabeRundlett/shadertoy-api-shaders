{
    "Shader": {
        "info": {
            "date": "1578290734",
            "description": "ball, cube and octahedron",
            "flags": 0,
            "hasliked": 0,
            "id": "tl33Rl",
            "likes": 2,
            "name": "Ball in several metric spaces",
            "published": 3,
            "tags": [
                "imi202001"
            ],
            "usePreview": 0,
            "username": "tomoe",
            "viewed": 301
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159265359;\nfloat kyoto(vec3 p){\n    float scale = 1.0 / sqrt(2.0);\n    return scale * (abs(p.x) + abs(p.y) + abs(p.z));\n}\nfloat shogi(vec3 p) {\n    float scale = sqrt(2.0);\n    return scale * max(max(abs(p.x), abs(p.y)), abs(p.z));\n}\nfloat euc(vec3 p){\n    float scale = 1.0;\n    return scale * length(p);\n}\nfloat dist(vec3 p){\n    float t = abs(mod(0.5 * iTime, 4.0) - 2.0);\n    return mix(\n        mix(euc(p), shogi(p), clamp(t, 0.0, 1.0)),\n        kyoto(p), clamp(t - 1.0, 0.0, 1.0)\n    );\n}\nfloat ballSDF(vec3 p) {\n    return dist(p) - 1.;\n}\nvec3 gradSDF(vec3 p) {\n    float d = 0.0001;\n    return normalize(vec3(\n        ballSDF(p + vec3(d, 0.0, 0.0)) - ballSDF(p + vec3(-d, 0.0, 0.0)),\n        ballSDF(p + vec3(0.0, d, 0.0)) - ballSDF(p + vec3(0.0, - d, 0.0)),\n        ballSDF(p + vec3(0.0, 0.0, d)) - ballSDF(p + vec3(0.0, 0.0, - d))\n    ));\n}\nmat3 euler(float h, float p, float r){\n    return mat3(\n        cos(r)*cos(h)-sin(r)*sin(p)*sin(h), -sin(r)*cos(p), cos(r)*sin(h)+sin(r)*sin(p)*cos(h),\n        sin(r)*cos(h)+cos(r)*sin(p)*sin(h), cos(r)*cos(p), sin(r)*sin(h)-cos(r)*sin(p)*cos(h),\n        -cos(p)*sin(h), sin(p), cos(p)*cos(h)\n    ); \n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // fragment position\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    // transformation\n    float t = 0.5 * iTime;\n    mat3 g = euler(t, t, t);\n\n    // camera\n    vec3 cPos = g * vec3(0.0, 0.0, 2.0);\n    vec3 cDir = g * vec3(0.0, 0.0, - 1.0);\n    vec3 cUp = g * vec3(0.0, 1.0, 0.0);\n    vec3 cSide = cross(cDir, cUp);\n    float targetDepth = 1.0;\n    \n    // light\n    vec3 lightPos = g *vec3(0.0, 1.0, 1.0);\n\n    // ray\n    vec3 ray = cSide * p.x + cUp * p.y + cDir * targetDepth;\n    ray = ray / dist(ray);\n    \n    // marching loop\n    vec3 rPos = cPos;\n    for(int i = 0; i < 60; i++ ) {\n        rPos += ray * ballSDF(rPos);\n    }\n    \n    if (abs(ballSDF(rPos)) < 0.001) { //object\n        vec3 normal = gradSDF(rPos);\n        float diff = clamp(dot(normalize(lightPos - rPos), gradSDF(rPos)), 0.0, 1.0);\n        vec3 col = vec3(0.0, 1.0, 0.0);\n        fragColor = vec4(diff * col, 1.0);\n    } else {    //background\n        fragColor = vec4(1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}