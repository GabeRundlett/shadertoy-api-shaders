{
    "Shader": {
        "info": {
            "date": "1534198179",
            "description": "Made in 2.5 hours for Ludum Dare 42. \nTheme: Running out of space\nhttps://ldjam.com/events/ludum-dare/42/space-growth\nDue to time constraints, I made a shader instead of a game this time!\nIt's a cellular automata inspired by space colonization.",
            "flags": 32,
            "hasliked": 0,
            "id": "ltdyDj",
            "likes": 25,
            "name": "[LD42] Space Growth",
            "published": 3,
            "tags": [
                "text",
                "cellularautomata",
                "ldjam",
                "ludumdare"
            ],
            "usePreview": 1,
            "username": "irwatts",
            "viewed": 1447
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Sample Buf A\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Font\nconst int GLYPHS_X = 16;\nconst int GLYPHS_Y = 16;\nconst int NUMBERS_OFFSET = 48;\n\nvec4 drawGlyph( in int index, in vec2 uv, in vec4 bounds )\n{\n    if (uv.x >= bounds.x && uv.y >= bounds.y && uv.x <= bounds.z && uv.y <= bounds.w)\n    {\n        float glyphX = float(index % GLYPHS_X);\n        float glyphY = float(GLYPHS_Y-(index / GLYPHS_X)-1);\n        float glyphWidth = 1.0/float(GLYPHS_X);\n        float glyphHeight = 1.0/float(GLYPHS_Y);\n        vec4 glyphBounds;\n        glyphBounds.x = glyphX*glyphWidth;\n        glyphBounds.y = glyphY*glyphHeight;\n        glyphBounds.z = glyphX*glyphWidth+glyphWidth;\n        glyphBounds.w = glyphY*glyphHeight+glyphHeight;\n        vec2 drawUV = (uv-bounds.xy)/(bounds.zw-bounds.xy);\n        vec2 glyphUV = glyphBounds.xy+(glyphBounds.zw-glyphBounds.xy)*drawUV;\n        \n        vec4 col = texture(iChannel1, glyphUV, 4.0);\n        \n        // Fade edges\n        col *= pow(1.0-clamp(length((drawUV-vec2(0.5))*2.0),0.0,1.0), 2.0);\n        \n        return col;\n    }\n    return vec4(0.0);\n}\n\n// Space Colonization\nconst int GREATER_NEIGHBOR_DIST = 8;\nconst float GROW_ALPHA_THRESHOLD = 0.5;\nconst float GROW_DOT_THRESHOLD = 0.9;\nconst float PREVIOUS_FRAME_DAMPING = 0.98;\n\nfloat randFloat( in float n )\n{\n    return fract( sin( n*64.19 )*420.82 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Sample previous frame and fade\n    fragColor = texture(iChannel0, uv)*PREVIOUS_FRAME_DAMPING;\n\t\n    float alpha = 0.0;\n    \n    // Draw '42' text\n    vec4 samp = vec4(0.0);\n    samp = max(samp, drawGlyph(NUMBERS_OFFSET+4, uv, vec4(0.0,0.0,0.75,1.0)));\n    samp = max(samp, drawGlyph(NUMBERS_OFFSET+2, uv, vec4(0.25,0.0,1.0,1.0)));\n    alpha = samp.r*3.0;\n    \n    // Draw sparkles to act as colonization targets\n    alpha += pow(randFloat(fragCoord.x*0.001+fragCoord.y+iTime*0.0001),200.0);\n    \n    // Add a little gradient for variation\n    alpha += cos(uv.y+0.5)*0.042;\n    \n    fragColor = max(fragColor, vec4(alpha));\n\n    if (fragColor.r < 1.0)\n    {\n        // Check Moore neighborhood for valid growth start pixels\n        float brightestAlpha = 0.0;\n        vec2 startUV;\n        int numNeighbors = 0;\n        for (int x=-1; x<=1; x++)\n        {\n            for (int y=-1; y<=1; y++)\n            {\n                vec2 sampUV = uv+(vec2(x,y)/iResolution.xy);\n                samp = texture(iChannel0, sampUV);\n                if (samp.a >= GROW_ALPHA_THRESHOLD)\n                {\n                    // Found valid neighbor\n                    numNeighbors++;\n                    if (samp.a > brightestAlpha)\n                    {\n                        brightestAlpha = samp.a;\n                        startUV = sampUV;\n                    }\n                }\n            }\n        }\n        if (numNeighbors > 0)\n        {\n            // Search for brightest neighbor in greater neighboorhood\n            vec2 brightestUV;\n            brightestAlpha = 0.0;\n            for (int x=-GREATER_NEIGHBOR_DIST; x<=GREATER_NEIGHBOR_DIST; x++)\n            {\n                for (int y=-GREATER_NEIGHBOR_DIST; y<=GREATER_NEIGHBOR_DIST; y++)\n                {\n                    vec2 sampUV = uv+(vec2(x,y)/iResolution.xy);\n                    samp = texture(iChannel0, sampUV);\n                    if (samp.a > brightestAlpha)\n                    {\n                        brightestAlpha = samp.a;\n                        brightestUV = sampUV;\n                    }\n                }\n            }\n\t\t\t// Grow towards brightest if in path\n            vec2 brightestDir = normalize(brightestUV-startUV);\n            vec2 currDir = normalize(uv-startUV);\n            float dirDot = dot(brightestDir, currDir);\n            if (dirDot > GROW_DOT_THRESHOLD)\n            {\n                fragColor += vec4(0.1)*dirDot;\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}