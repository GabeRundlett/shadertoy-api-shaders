{
    "Shader": {
        "info": {
            "date": "1586028068",
            "description": "Here's another edit of the [url=https://www.shadertoy.com/view/tdlyD2]\"Heritable xenobiotic\"[/url] shader. I only modified the \"sph\" function to change the geometry.",
            "flags": 0,
            "hasliked": 0,
            "id": "3dSyzh",
            "likes": 1,
            "name": "Heritable xenobiotic (edit 2)",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 301
        },
        "renderpass": [
            {
                "code": "//-------------------------------------------------------------------\n// Trying out ShaderToy and trying to get to grips with ray marching.\n// Inspired by the amazing creations of Evvvvil, Nusan and Shane\n//-------------------------------------------------------------------\n\n#define MD 30.\t\t// max distance\n#define SD 0.0001    // surface distance\n#define MS 250      // max number of steps to march\n#define EPS 0.0001   // distance used for sampling the gradient\n\nfloat time;\n\n// always handy to have PI available\nconst float PI = acos(-1.);\nconst float TWOPI = 2.*PI;\n\n// fog color.\nconst vec3 fog = vec3(.05,.25, .05);\n\n// always need some glow!\nfloat glw = 0.;\n\n// sphere SDF\nfloat sph(vec3 p, float r){return length(p)-r/sin(p.y);}\n\n// min and max which preserve material\nvec2 mmin(vec2 a, vec2 b) {return a.x < b.x ? a:b;}\nvec2 mmax(vec2 a, vec2 b) {return a.x > b.x ? a:b;}\n\n\n// 2d rotation\nvoid rot(inout vec2 p, float a) {\n    float c=cos(a), s=sin(a);\n    p *= mat2(c,-s,s,c);\n}\n\n// I was going to do something complicated here,\n// but ended up doing a sphere!\nvec2 prim(vec3 p) {\n    return vec2(sph(p, .5), 5);\n}\n\n// the SDF for the scene\nvec2 map(vec3 p) {\n    \n    // wiggle x\n    p.x += sin(p.z + time*.2)*.5;\n    // spiral\n    rot(p.xy, sin(p.z / 3.));\n    // scroll along z\n    p.z -= time/3.;\n    \n    // repeat everything\n    vec3 mp;\n    mp.x = mod(p.x, 2.3)-1.15;\n    mp.y = mod(p.y, 2.3)-1.15;\n    mp.z = mod(p.z,.6)-.3;\n    \n    // fractal (ish)\n    vec4 ap = vec4(mp,1.);\n    // big purple sphere\n    vec2 a=prim(mp);\n    a.x *= .6;\n    // smaller black spheres\n    int n=4;\n    for(int i=1; i<=n; ++i) {\n    \tap *= 2.5; // scale\n        ap.xyz = abs(ap.xyz)-vec3(.8); // symmetry\n        rot(ap.xy, ap.z*.1 + time*.5); // movement\n        vec2 b = prim(ap.xyz); // sphere\n        b.x /= ap.w; // correct for scaling\n        b.x *= .6;   // patch up the SDF\n        b.y= 1.;     // paint it black\n        a=mmin(a, b);\n        \n    }\n    \n    // Sparkles. Lots of them.\n    rot(p.xy, time*.3);\n    vec2 b = vec2(length(cos(p*1.+vec3(1.5+p.z*.05*sin(time),1.7+sin(time)*.2,time*2.)))-.001 ,6.);\n    glw += .1/(.1*b.x*b.x*10000.);\n    b.x *= .6;\n    \n    // final distance\n    vec2 d=mmin(a,b);\n    return d;\n}\n\n// determine the normal at point p by sampling the gradient of the SDF\nvec3 normal(vec3 p) {\n \tvec2 off = vec2(EPS, 0.);\n    return normalize(map(p).x - vec3(map(p-off.xyy).x,map(p-off.yxy).x,map(p-off.yyx).x));\n}\n\n//-------------------------------------------------------------\n// lighting and colour,\n// heavily based on Evvvvil's Micro Lighting Engine Broski (TM)\n//-------------------------------------------------------------\n\n// shortcuts for calculating fake ambient occlusion and subsurface scattering\n#define aoc(d) clamp(map(p + n * d).x/d, 0., 1.)\n#define sss(d) smoothstep(0.,1.,map(p+ld*d).x/d)\n\nvec3 surface(vec3 ro, vec3 rd, vec2 hit) {\n\tfloat d=hit.x;         // distance from ray origin\n    float m = hit.y;       // materialID\n    \n    // albedo, or base color, based on material ID\t\n    vec3 al = m < 5. ? vec3(0) : \n    \t\tm > 5. ? vec3(1) :\n    \t\tvec3(.1,.1,.4);\n    \n    vec3 p = ro + rd * d;  // the point in space\n    vec3 n = normal(p);    // normal of the SDF at point p\n    \n    vec3 ld = normalize(vec3(-1));     // light direction\n    float diff = max(0., dot(n, -ld)); // diffuse illumination\n    \n    vec3 lr = reflect(ld, n);          // reflected light ray\n    float spec = pow(max(0., dot(lr,-rd)),32.); // specular component\n \n    float frz = pow(max(0.1, 1. - dot(n,-rd)),4.)*.5; // freznel)\n\t\n    float ao = aoc(.1); // fake AO\n    float ss = sss(1.); // fake subsurface scattering\n    \n    vec3 col =  al * ao * (diff + ss) + spec; // combine it all together\n    col = mix(col, fog, frz);         // fog the edges\n    \n    return col; // the final color\n}\n\n// ray marching loop\nvec3 march(vec3 ro, vec3 rd) {\n\tfloat dd=0.1;\t\t// start with a slight z offset\n    vec3 col=vec3(0);   // no color initially\n    vec3 p=ro + rd * dd;// current point\n    \n    for(int i=0; i<MS; ++i) {  // start marching\n     \tvec2 d = map(p);  // distance to SDF\n        \n        if(d.x < SD) { // close to a surface\n            // get the color of the surface\n            col += d.y > 0. ? surface(ro, rd, vec2(dd, d.y)) : vec3(0.);\n            break; // we're done\n        }\n        \n        if(dd > MD) { // we've reached the max draw distance,\n            dd = MD;\n            break;    // and we're done\n        }\n        \n        dd += d.x;     // track the total distance\n        p += rd * d.x; // and update the current position\n    }\n    \n    // blend in some distance-based fog and return\n    return mix(fog * pow(max(0., dot(rd, vec3(0,0,-1))),20.), col, exp(-0.003*dd*dd*dd));\n}\n\n\n// given the ray origin, lookat point and uv's, calculate the ray direction\nvec3 raydir(vec3 ro, vec3 la, vec2 uv) {\n    // x,y and z axes\n    vec3 cz = normalize(la-ro);\n    vec3 cx = normalize(cross(cz,vec3(0,1,0)));\n    vec3 cy = normalize(cross(cx,cz));\n    // project and normalize\n    return normalize(cx*uv.x + cy*uv.y + cz);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    // make sure that the pixels are square\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    // get rid of some artifacts\n    time = mod(iTime, 62.39);\n    \n    // setup the ray\n    vec3 ro = vec3(0,0,1);\n    vec3 rd = raydir(ro, vec3(0)-ro, uv);\n    \n    // march\n    vec3 col = march(ro, rd);\n\n    col += glw;\n    // exposure\n    col = vec3(1) - exp(-col * 1.1);\n    // gamma\n    col = pow(col, vec3(1./2.2));\n    // final color\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}