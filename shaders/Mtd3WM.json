{
    "Shader": {
        "info": {
            "date": "1469713345",
            "description": "metameric colors as https://www.shadertoy.com/view/Xlt3D7\nintegrated in depth as https://www.shadertoy.com/view/XldGDM\nfrom bottom to top:\n1 peak at green, 2 peaks around green, box around green, cos around green, 2 peaks at +-pi/3, 1 peak + const",
            "flags": 0,
            "hasliked": 0,
            "id": "Mtd3WM",
            "likes": 4,
            "name": "colors (spectrum+volume)",
            "published": 3,
            "tags": [
                "volume",
                "spectrum",
                "tutorial",
                "fluid",
                "color",
                "metameric"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1015
        },
        "renderpass": [
            {
                "code": "// following https://www.shadertoy.com/view/Xlt3D7\n// refs: https://en.wikipedia.org/wiki/Metamerism_(color)\n//       https://en.wikipedia.org/wiki/Trichromacy\n\n// for simplicity, cone response is approximated by (1 + cos(3.14*(f-f0) )/2. (clamped)\n//                                                  with f0 = -2/3, 0, 2/3\n// f in [-1 (red) , 1 (violet) ]\n// perception = int( colorSpectrum(f) * coneResponse(f) )/2.\n\n// ATTENTION:\n// - normalization is heuristical :-)\n// - prev shader is more about surface color while this one is about volumes\n\n  #define T0 .8            // max transp. No pure transp is more realistic\n//#define T0 1.            // transp=1. ease comparison with prev shader\n  #define Z 8.             // max depth (from left to right)\n  #define W (a/1.)         // width around green\n  #define N 50.            // spectrum sampling rate\n\n#define RGB(f, fc) ( .5 + .5* cos(3.14*clamp(f-(fc),-1.,1.) ) )\n#define EQ(f,a) ( abs(f-(a)) < .5/N )\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    O -= O;\n    vec2 R = iResolution.xy;\n    U /= R;\n    float y = 6.*U.y, a = fract(y),               // a (vertical inside band) = spectrum param\n          f, I, v=0., z = Z*U.x;                  // z = depth (from left to right)\n    if (a < 6./R.y) return;                       // line separator\n    if (abs(z-1.)<Z/R.x) { O.g++; return;}        // unit length of depth\n    \n    for (float f=-1.3; f<1.3; f+=1./N) {            // --- color spectrum (normalized):\n        I =   y > 5. ?   EQ(f,0.) ? 1. : a/N               // 1 peak + const int=a\n            : y > 4. ?   EQ(abs(f), 1./3.) ? 1. : 0.       // 2 fix peaks around green\n            : y > 3. ?   .5 + .5*cos(3.14*clamp(f,-1.,1.)) // cos around green\n            : y > 2. ?   abs(f) <  W  ? 1. : 0.            // box around green (and beyond)\n            : y > 1. ?   EQ(abs(f),W) ? 1. : 0.            // 2 peaks around green (and beyond)\n            :            EQ(f,0.) ? 1. : 0.;               // 1 peak at green\n        v += I;\n        I *= T0;                                  // max transparency not really 1, you know :-)\n        I = pow(I, z);                            // depth extinction\n        O[0] += I * RGB(f, -2./3.);               // perceptive integration\n        O[1] += I * RGB(f,  0.   );\n        O[2] += I * RGB(f,  2./3.);\n    }\n    \n    // tone mapping using iso intensity for 1 unit length of spectrum\n    O /= v;\n /* O /=   y > 5. ?   1.+a          // 1 peak + const a\n         : y > 4. ?   2.            // 2 fix peaks around green\n         : y > 3. ?   N             // cos around green\n         : y > 2. ?   2.*W*N        // box around green (and beyond)\n         : y > 1. ?   2.            // 2 peaks around green (and beyond)\n         :            1.;           // 1 peak at green       \n    */\n // O /= max(O.r,max(O.g,O.b));     // chrominance only\n    O = pow(O,vec4(1./2.2));        // RGB to sRGB transform\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}