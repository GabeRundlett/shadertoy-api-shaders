{
    "Shader": {
        "info": {
            "date": "1611580983",
            "description": "Warhol's tomato soup cans live (mouse to upper-right for restart)",
            "flags": 32,
            "hasliked": 0,
            "id": "3tKyRt",
            "likes": 13,
            "name": "Soup Can Dynamics",
            "published": 3,
            "tags": [
                "collision",
                "dynamics",
                "warhol",
                "physics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 411
        },
        "renderpass": [
            {
                "code": "// \"Soup Can Dynamics\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvoid HexVorInit ();\nvec4 HexVor (vec2 p);\nmat3 QtToRMat (vec4 q);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nmat3 StdVuMat (float el, float az);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (int idVar);\n\n#define VAR_ZERO min (iFrame, 0)\n\nmat3 mRotHit;\nvec3 qHit, qnHit, ltDir;\nfloat dstFar, cylRad, cylLen, bCylRad, bCylHt;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\n\nconst int nObj = 16;\n\nvec4 CylHit (vec3 ro, vec3 rd, float r, float h)\n{\n  vec3 s;\n  float d, a, b, w;\n  d = dstFar;\n  a = dot (rd.xy, rd.xy);\n  b = dot (rd.xy, ro.xy);\n  w = b * b - a * (dot (ro.xy, ro.xy) - r * r);\n  if (w > 0.) {\n    if (a > 0.) {\n      d = (- b - sqrt (w)) / a;\n      s = ro + d * rd;\n    } else s = vec3 (0., 0., h);\n    if (d < 0. || abs (s.z) > h) {\n      d = - (sign (rd.z) * ro.z + h) / abs (rd.z);\n      if (d < 0. || length (ro.xy + d * rd.xy) > r) d = dstFar;\n    }\n  }\n  return vec4 (s, d);\n}\n\nfloat ObjHit (vec3 ro, vec3 rd)\n{\n  mat3 mRot;\n  vec4 ds;\n  vec3 rm, rom, rdm;\n  float dMin;\n  dMin = dstFar;\n  for (int n = VAR_ZERO; n < nObj; n ++) {\n    rm = Loadv4 (4 * n).xyz;\n    mRot = QtToRMat (Loadv4 (4 * n + 2));\n    rom = (ro - rm) * mRot;\n    rdm = rd * mRot;\n    ds = CylHit (rom, rdm, cylRad, cylLen);\n    if (ds.w < dMin) {\n      dMin = ds.w;\n      qHit = rom + dMin * rdm;\n      mRotHit = mRot;\n      qnHit = (abs (ds.z) > cylLen) ? vec3 (0., 0., - sign (rdm.z)) : vec3 (normalize (ds.xy), 0.);\n    }\n  }\n  if (dMin < dstFar) qnHit = mRotHit * qnHit;\n  return dMin;\n}\n\nfloat ObjHitSh (vec3 ro, vec3 rd, float rng)\n{\n  mat3 mRot;\n  vec4 ds;\n  vec3 rm, rom, rdm;\n  float dMin;\n  dMin = dstFar;\n   for (int n = VAR_ZERO; n < nObj; n ++) {\n    rm = Loadv4 (4 * n).xyz;\n    mRot = QtToRMat (Loadv4 (4 * n + 2));\n    rom = (ro - rm) * mRot;\n    rdm = rd * mRot;\n    ds = CylHit (rom, rdm, cylRad, cylLen);\n    if (ds.w < dMin) dMin = ds.w;\n  }\n  return smoothstep (0.5 * rng, rng, dMin);\n}\n\nvec4 InCylHit (vec3 ro, vec3 rd)\n{\n  vec3 s, vn;\n  float d, a, b, w, srdy;\n  d = dstFar;\n  vn = vec3 (0.);\n  a = dot (rd.xz, rd.xz);\n  b = dot (rd.xz, ro.xz);\n  w = b * b - a * (dot (ro.xz, ro.xz) - bCylRad * bCylRad);\n  if (w > 0.) {\n    srdy = sign (rd.y);\n    if (a > 0.) {\n      d = (- b + sqrt (w)) / a;\n      s = ro + d * rd;\n    } else s.y = bCylHt;\n    if (abs (s.y) < bCylHt) vn.xz = - s.xz / bCylRad;\n    else {\n      d = (- srdy * ro.y + bCylHt) / abs (rd.y);\n      vn.y = - srdy;\n    }\n  }\n  return vec4 (d, vn);\n}\n\nvec3 ShStagGrid (vec2 p)\n{\n  vec2 q, sq, ss;\n  q = p;\n  if (2. * floor (0.5 * floor (q.y)) != floor (q.y)) q.x += 0.5;\n  sq = smoothstep (0.05, 0.1, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.5 * smoothstep (0.3, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.8 + 0.2 * sq.x * sq.y, ss.y);\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec4 vc, db4;\n  vec3 vn, col, rg, vnCyl;\n  vec2 qw, wSize;\n  float dCyl, hy, y, b, a, ga, sh;\n  bool isLit;\n  isLit = true;\n  ro.y -= 0.25;\n  db4 = InCylHit (ro + vec3 (0., - bCylHt, 0.), rd);\n  dCyl = db4.x;\n  vnCyl = db4.yzw;\n  ro += dCyl * rd;\n  if (vnCyl.y == 0.) {\n    vn = vnCyl;\n    hy = mod (ro.y / bCylHt + 0.5, 1.) - 0.5;\n    a = atan (vn.x, - vn.z) / pi;\n    wSize = vec2 (0.28, 0.33);\n    qw = abs (vec2 (mod (32. * 0.5 * (1. + a) + 0.5, 1.), abs (hy)) - 0.5) - 0.5 * wSize;\n    if (Maxv2 (abs (qw) - wSize * vec2 (0.43, 0.47)) < 0.) {\n      col = vec3 (0., 0., 1.);\n      isLit = false;\n    } else {\n      col = vec3 (0.4, 0.5, 0.4);\n      if (Maxv2 (qw - 0.5 * wSize) > 0.) {\n        y = abs (abs (hy) - 0.5) - 0.5;\n        if (y > - 0.3/16.) {\n          col = vec3 (0.6, 0.7, 0.5);\n          vn.xz = Rot2D (vn.xz, - pi * a);\n          vn.yz = Rot2D (vn.yz, 0.15 * pi * (1. - 2. * SmoothBump (0.15, 0.25, 0.05, 16. * (0.5 - y))) * sign (hy));\n          vn.xz = Rot2D (vn.xz, pi * a);\n        } else {\n          col = vec3 (0.7, 0.75, 0.7);\n          qw = 8. * vec2 (12. * a, 2. * hy);\n          rg = ShStagGrid (qw);\n          col *= rg.y * (1. - 0.2 * Noisefv2 (32. * qw));\n          rg.xz *= sign ((abs (vn.x) > abs (vn.z)) ? vn.x : vn.z);\n          if (abs (vn.x) > abs (vn.z)) {\n            if (rg.x == 0.) vn.xy = Rot2D (vn.xy, rg.z);\n            else vn.xz = Rot2D (vn.xz, rg.x);\n          } else {\n            if (rg.x == 0.) vn.zy = Rot2D (vn.zy, rg.z);\n            else vn.zx = Rot2D (vn.zx, rg.x);\n          }\n        }\n      }\n    }\n  } else if (vnCyl.y > 0.) {\n    vc = HexVor (0.5 * ro.zx);\n    b = 1. - smoothstep (-0.2, -0.05, rd.y) * smoothstep (0.4, 0.8, dCyl / (1.6 * bCylRad));\n    vn = mix (vec3 (0., 1., 0.), normalize (vec3 (- vc.y, 4., - vc.z)), b * SmoothBump (0.05, 0.13, 0.02, vc.x));\n    col = vec3 (0.65, 0.62, 0.6) * (0.7 + 0.3 * b * step (0.06 + 0.03 * vc.w, vc.x) *\n       (1. - 0.3 * Noisefv2 (16. * ro.xz))) * vec3 (1., 0.94 + 0.06 * vc.w, 1. - 0.06 * vc.w);\n  } else {\n    b = 0.;\n    qw = ro.xz / bCylRad;\n    ga = 2.39996;\n    for (float n = float (VAR_ZERO); n < 128.; n ++) b += 1. - smoothstep (0.03, 0.035,\n       length (qw - sqrt (n / 128.) * sin (n * ga + vec2 (0.5 * pi, 0.))));\n    col = mix (vec3 (0.6, 0.7, 1.), vec3 (1., 1., 0.4), b);\n    isLit = false;\n  }\n  if (isLit) {\n    sh = (vnCyl.y > -0.5) ? ObjHitSh (ro + 0.01 * ltDir, ltDir, 30.) : 1.;\n    col *= 0.5 + 0.5 * sh * max (dot (vn, ltDir), 0.);\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col;\n  float dstObj, spec, sh, r, a;\n  bool isRefl;\n  HexVorInit ();\n  isRefl = false;\n  dstObj = ObjHit (ro, rd);\n  r = length (qHit.xy);\n  if (dstObj < dstFar && r < cylRad - 0.1) {\n    ro += dstObj * rd;\n    vn = qnHit * mRotHit;\n    a = atan (qHit.y, - qHit.x);\n    vn.xy = Rot2D (vn.xy, - a);\n    vn.xz = Rot2D (vn.xz, 0.05 * pi * sin (12. * pi * r / cylRad) * step (cylRad / 6., r));\n    vn.xy = Rot2D (vn.xy, a);\n    vn = mRotHit * vn;\n    rd = reflect (rd, vn);\n    ro += 0.01 * rd;\n    dstObj = ObjHit (ro, rd);\n    isRefl = true;\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = qnHit;\n    r = length (qHit.xy);\n    if (r < cylRad - 0.001) {\n      col = mix (col, vec3 (0.8), step (cylRad - 0.1, r));\n    } else {\n      col = mix (vec3 (1., 0.2, 0.2), vec3 (0.9), step (0., qHit.z));\n      col = mix (col, vec3 (0.8), step (cylLen - 0.2, abs (qHit.z)));\n      r = length (qHit.xz);\n      col = mix (vec3 (1., 1., 0.2), col, smoothstep (0., 0.02, r - 0.5 * cylRad));\n      col = mix (vec3 (0.4, 0.4, 1.), col, smoothstep (0., 0.02, abs (r - 0.5 * cylRad) - 0.05));\n      if (abs (qHit.z) > 0.08 * cylRad || qHit.x * sign (qHit.y) > 0.)\n         col = mix (vec3 (0.4, 0.4, 1.), col, smoothstep (0., 0.02, abs (r - 0.3 * cylRad) - 0.15));\n      if (r > 0.5 * cylRad) vn = mRotHit * VaryNf (16. * qHit, vn * mRotHit, 0.4);\n    }\n    spec = 0.2;\n    sh = 0.5 + 0.5 * ObjHitSh (ro + 0.01 * ltDir, ltDir, 30.);\n    col = col * (0.2 +  0.1 * max (dot (normalize (- ltDir.xz), vn.xz), 0.) + 0.8 * sh * max (dot (vn, ltDir), 0.)) +\n       spec * step (0.95, sh) * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n  } else col = BgCol (ro, rd);\n  if (isRefl) col = mix (col, vec3 (0.5), 0.4);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, stDat;\n  vec3 col, rd, ro;\n  vec2 canvas, uv;\n  float az, el, asp, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  asp = canvas.x / canvas.y;\n  stDat = Loadv4 (4 * nObj + 1);\n  cylRad = stDat.x;\n  cylLen = stDat.y;\n  bCylRad = stDat.z;\n  bCylHt = stDat.w;\n  stDat = Loadv4 (4 * nObj + 2);\n  mPtr.xyz = stDat.xyz;\n  dstFar = 200.;\n  az = 0.;\n  el = -0.13 * pi;\n  if (mPtr.z > 0. && Minv2 (mPtr.xy + 0.05 * vec2 (1. / asp, 1.) - 0.5) < 0.) {\n    el += 0.3 * pi * mPtr.y;\n    az += 0.45 * pi * mPtr.x;\n  }\n  el = clamp (el, -0.28 * pi, -0.05 * pi);\n  az = clamp (az, -0.2 * pi, 0.2 * pi);\n  vuMat = StdVuMat (el, az);\n  zmFac = 2.;\n  ro = vec3 (0., 1.5 * bCylHt, -0.9 * bCylRad);\n  rd = vuMat * normalize (vec3 ((2. * tan (0.5 * atan (uv.x / (zmFac * asp)))) * asp, uv.y / zmFac, 1.));\n  ltDir = normalize (vec3 (1., 2., -1.));\n  col = ShowScene (ro, rd);\n  if (mPtr.z > 0. && min (uv.x - asp, uv.y - 1.) > -0.07) col = mix (col, vec3 (1., 1., 0.), 0.5);\n  fragColor = vec4 (col, 1.);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec2 gVec[7], hVec[7];\n\nvoid HexVorInit ()\n{\n  vec3 e = vec3 (1., 0., -1.);\n  gVec[0] = e.yy;\n  gVec[1] = e.xy;\n  gVec[2] = e.yx;\n  gVec[3] = e.xz;\n  gVec[4] = e.zy;\n  gVec[5] = e.yz;\n  gVec[6] = e.zx;\n  for (int k = 0; k < 7; k ++) hVec[k] = HexToPix (gVec[k]);\n}\n\nvec4 HexVor (vec2 p)\n{\n  vec4 sd, udm;\n  vec2 ip, fp, d, u;\n  float amp;\n  amp = 0.7;\n  ip = PixToHex (p);\n  fp = p - HexToPix (ip);\n  sd = vec4 (4.);\n  udm = vec4 (4.);\n  for (int k = VAR_ZERO; k < 7; k ++) {\n    u = Hashv2v2 (ip + gVec[k]);\n    d = hVec[k] + amp * (0.4 + 0.6 * u.x) * sin (2. * pi * (u.y - 0.5) + vec2 (0.5 * pi, 0.)) - fp;\n    sd.w = dot (d, d);\n    if (sd.w < sd.x) {\n      sd = sd.wxyw;\n      udm = vec4 (d, u);\n    } else sd = (sd.w < sd.y) ? sd.xwyw : ((sd.w < sd.z) ? sd.xyww : sd);\n  }\n  sd.xyz = sqrt (sd.xyz);\n  return vec4 (SmoothMin (sd.y, sd.z, 0.3) - sd.x, udm.xy, Hashfv2 (udm.zw));\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Soup Can Dynamics\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\n#define VAR_ZERO min (iFrame, 0)\n\nfloat todCur, nStep, cylRad, cylLen, bCylRad, bCylHt, fOvlap, fricN, fricT, fricS;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nconst int nObj = 16;\nconst int nSphObj = 62;\n\nvec3 RSph (float s)\n{\n  vec3 r;\n  float z;\n  if (s < 60.) {\n    z = floor (s / 10.);\n    r = vec3 ((cylRad - 0.5) * sin (2. * pi * mod (s + 0.5 * z, 10.) / 10. + vec2 (0.5 * pi, 0.)),\n       (cylLen - 0.5) * (z - 2.5) / 2.5);\n  } else {\n    r = vec3 (0., 0., (cylLen - 0.5) * (2. * (s - 60.) - 1.));\n  }\n  return r;\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  vec3 f;\n  float vRel, fo, drv;\n  fo = fOvlap * (1. / rSep - 1.);\n  drv = dot (dr, dv) / (rSep * rSep);\n  dv -= drv * dr;\n  vRel = length (dv);\n  fo = max (fo - fricN * drv, 0.);\n  f = fo * dr;\n  if (vRel > 0.001) f -= min (fricT, fricS * abs (fo) * rSep / vRel) * dv;\n  return f;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot, mRotN;\n  vec3 rmN, vmN, wmN, dr, dv, rts, rtsN, rms, vms, fc, am, wam, rMom;\n  float farSep, rSep, grav, dt, tqUp;\n  fOvlap = 1000.;\n  fricN = 0.5;\n  fricT = 2.;\n  fricS = 2.;\n  tqUp = 2.5;\n  grav = 10.;\n  dt = 0.01;\n  rm = Loadv4 (4 * mId).xyz;\n  vm = Loadv4 (4 * mId + 1).xyz;\n  qm = Loadv4 (4 * mId + 2);\n  wm = Loadv4 (4 * mId + 3).xyz;\n  if (nStep < 20.) return;\n  mRot = QtToRMat (qm);\n  farSep = 2. * length (vec2 (cylRad, cylLen)) + 2.;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = VAR_ZERO; n < nObj; n ++) {\n    rmN = Loadv4 (4 * n).xyz;\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = Loadv4 (4 * n + 1).xyz;\n      mRotN = QtToRMat (Loadv4 (4 * n + 2));\n      wmN = Loadv4 (4 * n + 3).xyz;\n      for (int j1 = VAR_ZERO; j1 < nSphObj; j1 ++) {\n        rts = mRot * RSph (float (j1));\n        rms = rm + rts;\n        vms = vm + cross (wm, rts);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (int j2 = VAR_ZERO; j2 < nSphObj; j2 ++) {\n          rtsN = mRotN * RSph (float (j2));\n          dr = rms - (rmN + rtsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rtsN));\n        }\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  rMom = vec3 (0.);\n  for (int j = VAR_ZERO; j < nSphObj; j ++) {\n    rts = RSph (float (j));\n    rMom += dot (rts, rts) - rts * rts + 1./6.;\n    rts = mRot * rts;\n    rms = rm + rts;\n    vms = vm + cross (wm, rts);\n    rSep = bCylRad - length (rms.xz);\n    if (rSep < 1.) {\n      fc = FcFun (vec3 (- rSep * normalize (rms.xz), 0.).xzy, rSep, vms);\n      am += fc;\n      wam += cross (rts, fc);\n    }    \n    rSep = abs (abs (rms.y + bCylHt) - bCylHt);\n    if (rSep < 1.) {\n      fc = FcFun (vec3 (0., rSep * sign (rms.y), 0.), rSep, vms);\n      am += fc;\n      wam += cross (rts, fc);\n    }\n  }\n  rMom /= float (nSphObj);\n  wam = mRot * (wam * mRot / rMom);\n  wam += tqUp * cross (vec3 (0., 1., 0.), mRot * vec3 (0., 0., 1.));\n  am.y -=  grav;\n  vm += dt * am;\n  rm += dt * vm;\n  wm += dt * wam;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  float b = Hashff (todCur + float (mId));\n  rm = vec3 (9. * (mod (float (mId), 4.) - 1.5), 9., 9. * (floor (float (mId) / 4.) - 1.5));\n  qm = EulToQt (vec3 (0., 0.5 * pi * (0.8 + 0.4 * b), 0.));\n  vm = vec3 (- 3. * rm.xz / max (0.1, length (rm.xz)), 0.).xzy;\n  wm = vec3 (0.5 * (b - 0.5));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, stDat, qm;\n  vec3 rm, vm, wm;\n  vec2 canvas, iFrag;\n  float tCur, mxStep, asp;\n  int mId, pxId, kp;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nObj + 3) discard;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  mId = (pxId < 4 * nObj) ? mId = pxId / 4 : -1;\n  doInit = false;\n  mxStep = 2400.;\n  if (iFrame <= 5) {\n    nStep = 0.;\n    doInit = true;\n    cylRad = 2.2;\n    cylLen = 2.7;\n    bCylRad = 40.;\n    bCylHt = 15.;\n  } else {\n    stDat = Loadv4 (4 * nObj);\n    nStep = stDat.x;\n    stDat = Loadv4 (4 * nObj + 1);\n    cylRad = stDat.x;\n    cylLen = stDat.y;\n    bCylRad = stDat.z;\n    bCylHt = stDat.w;\n    ++ nStep;\n    if (nStep > mxStep) doInit = true;\n  }\n  if (mPtr.z > 0. && mPtr.x > 0.5 - 0.03 / asp && mPtr.y > 0.5 - 0.03 && nStep > 50.) doInit = true;\n  if (doInit) nStep = 0.;\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm);\n    else Step (mId, rm, vm, qm, wm);\n    kp = 4 * mId;\n    if      (pxId == kp + 0) stDat = vec4 (rm, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (vm, 0.);\n    else if (pxId == kp + 2) stDat = qm;\n    else if (pxId == kp + 3) stDat = vec4 (wm, 0.);\n  } else {\n    kp = 4 * nObj;\n    if      (pxId == kp + 0) stDat = vec4 (nStep, mxStep, 0., 0.);\n    else if (pxId == kp + 1) stDat = vec4 (cylRad, cylLen, bCylRad, bCylHt);\n    else if (pxId == kp + 2) stDat = vec4 (mPtr.xyz, 0.);\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz = vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n     \n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;\n  a2 = 0.5 * (e.x - e.z);\n  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);\n  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3), c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Soup Can Dynamics\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\n#define VAR_ZERO min (iFrame, 0)\n\nfloat todCur, nStep, cylRad, cylLen, bCylRad, bCylHt, fOvlap, fricN, fricT, fricS;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nconst int nObj = 16;\nconst int nSphObj = 62;\n\nvec3 RSph (float s)\n{\n  vec3 r;\n  float z;\n  if (s < 60.) {\n    z = floor (s / 10.);\n    r = vec3 ((cylRad - 0.5) * sin (2. * pi * mod (s + 0.5 * z, 10.) / 10. + vec2 (0.5 * pi, 0.)),\n       (cylLen - 0.5) * (z - 2.5) / 2.5);\n  } else {\n    r = vec3 (0., 0., (cylLen - 0.5) * (2. * (s - 60.) - 1.));\n  }\n  return r;\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  vec3 f;\n  float vRel, fo, drv;\n  fo = fOvlap * (1. / rSep - 1.);\n  drv = dot (dr, dv) / (rSep * rSep);\n  dv -= drv * dr;\n  vRel = length (dv);\n  fo = max (fo - fricN * drv, 0.);\n  f = fo * dr;\n  if (vRel > 0.001) f -= min (fricT, fricS * abs (fo) * rSep / vRel) * dv;\n  return f;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot, mRotN;\n  vec3 rmN, vmN, wmN, dr, dv, rts, rtsN, rms, vms, fc, am, wam, rMom;\n  float farSep, rSep, grav, dt, tqUp;\n  fOvlap = 1000.;\n  fricN = 0.5;\n  fricT = 2.;\n  fricS = 2.;\n  tqUp = 2.5;\n  grav = 10.;\n  dt = 0.01;\n  rm = Loadv4 (4 * mId).xyz;\n  vm = Loadv4 (4 * mId + 1).xyz;\n  qm = Loadv4 (4 * mId + 2);\n  wm = Loadv4 (4 * mId + 3).xyz;\n  if (nStep < 20.) return;\n  mRot = QtToRMat (qm);\n  farSep = 2. * length (vec2 (cylRad, cylLen)) + 2.;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = VAR_ZERO; n < nObj; n ++) {\n    rmN = Loadv4 (4 * n).xyz;\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = Loadv4 (4 * n + 1).xyz;\n      mRotN = QtToRMat (Loadv4 (4 * n + 2));\n      wmN = Loadv4 (4 * n + 3).xyz;\n      for (int j1 = VAR_ZERO; j1 < nSphObj; j1 ++) {\n        rts = mRot * RSph (float (j1));\n        rms = rm + rts;\n        vms = vm + cross (wm, rts);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (int j2 = VAR_ZERO; j2 < nSphObj; j2 ++) {\n          rtsN = mRotN * RSph (float (j2));\n          dr = rms - (rmN + rtsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rtsN));\n        }\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  rMom = vec3 (0.);\n  for (int j = VAR_ZERO; j < nSphObj; j ++) {\n    rts = RSph (float (j));\n    rMom += dot (rts, rts) - rts * rts + 1./6.;\n    rts = mRot * rts;\n    rms = rm + rts;\n    vms = vm + cross (wm, rts);\n    rSep = bCylRad - length (rms.xz);\n    if (rSep < 1.) {\n      fc = FcFun (vec3 (- rSep * normalize (rms.xz), 0.).xzy, rSep, vms);\n      am += fc;\n      wam += cross (rts, fc);\n    }    \n    rSep = abs (abs (rms.y + bCylHt) - bCylHt);\n    if (rSep < 1.) {\n      fc = FcFun (vec3 (0., rSep * sign (rms.y), 0.), rSep, vms);\n      am += fc;\n      wam += cross (rts, fc);\n    }\n  }\n  rMom /= float (nSphObj);\n  wam = mRot * (wam * mRot / rMom);\n  wam += tqUp * cross (vec3 (0., 1., 0.), mRot * vec3 (0., 0., 1.));\n  am.y -=  grav;\n  vm += dt * am;\n  rm += dt * vm;\n  wm += dt * wam;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  float b = Hashff (todCur + float (mId));\n  rm = vec3 (9. * (mod (float (mId), 4.) - 1.5), 9., 9. * (floor (float (mId) / 4.) - 1.5));\n  qm = EulToQt (vec3 (0., 0.5 * pi * (0.8 + 0.4 * b), 0.));\n  vm = vec3 (- 3. * rm.xz / max (0.1, length (rm.xz)), 0.).xzy;\n  wm = vec3 (0.5 * (b - 0.5));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, stDat, qm;\n  vec3 rm, vm, wm;\n  vec2 canvas, iFrag;\n  float tCur, mxStep, asp;\n  int mId, pxId, kp;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nObj + 3) discard;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  mId = (pxId < 4 * nObj) ? mId = pxId / 4 : -1;\n  doInit = false;\n  mxStep = 2400.;\n  if (iFrame <= 5) {\n    nStep = 0.;\n    doInit = true;\n    cylRad = 2.2;\n    cylLen = 2.7;\n    bCylRad = 40.;\n    bCylHt = 15.;\n  } else {\n    stDat = Loadv4 (4 * nObj);\n    nStep = stDat.x;\n    stDat = Loadv4 (4 * nObj + 1);\n    cylRad = stDat.x;\n    cylLen = stDat.y;\n    bCylRad = stDat.z;\n    bCylHt = stDat.w;\n    ++ nStep;\n    if (nStep > mxStep) doInit = true;\n  }\n  if (mPtr.z > 0. && mPtr.x > 0.5 - 0.03 / asp && mPtr.y > 0.5 - 0.03 && nStep > 50.) doInit = true;\n  if (doInit) nStep = 0.;\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm);\n    else Step (mId, rm, vm, qm, wm);\n    kp = 4 * mId;\n    if      (pxId == kp + 0) stDat = vec4 (rm, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (vm, 0.);\n    else if (pxId == kp + 2) stDat = qm;\n    else if (pxId == kp + 3) stDat = vec4 (wm, 0.);\n  } else {\n    kp = 4 * nObj;\n    if      (pxId == kp + 0) stDat = vec4 (nStep, mxStep, 0., 0.);\n    else if (pxId == kp + 1) stDat = vec4 (cylRad, cylLen, bCylRad, bCylHt);\n    else if (pxId == kp + 2) stDat = vec4 (mPtr.xyz, 0.);\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz = vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n     \n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;\n  a2 = 0.5 * (e.x - e.z);\n  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);\n  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3), c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}