{
    "Shader": {
        "info": {
            "date": "1612175878",
            "description": "http://psoup.math.wisc.edu/mcell/rullex_cycl.html\n\npress the 'r' key to restart the cellular automata",
            "flags": 48,
            "hasliked": 0,
            "id": "tttBzr",
            "likes": 4,
            "name": "cyclic cellular automata shader",
            "published": 3,
            "tags": [
                "automata",
                "cellular"
            ],
            "usePreview": 0,
            "username": "zzggbb",
            "viewed": 361
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 color, in vec2 pixel){\n    color = vec4(texelFetch(GRID, ivec2(pixel), 0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float hash12(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * .1031 + fract(iTime));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec4 fetch(vec2 center, int offx, int offy) {\n    ivec2 new = ivec2(center) + ivec2(offx, offy);\n    ivec2 MAX = ivec2(iResolution) - 1;\n    if (new.x > MAX.x) new.x = new.x - MAX.x;\n    if (new.y > MAX.y) new.y = new.y - MAX.y;\n    if (new.x < 0) new.x = MAX.x + new.x;\n    if (new.y < 0) new.y = MAX.y + new.y;\n    return texelFetch(GRID, new, 0);\n}\n\nvec3 get_color(float index) {\n    float t = index / (N_COLORS - 1.0);\n    #if COLOR_MODE == 1\n        return mix(COLOR_A, COLOR_B, t);\n    #else\n        return cos_gradient(t);\n    #endif\n}\n\nvec4 next_state(vec4 state) {\n    float index = state.a + 1.0;\n    if (index > N_COLORS) index = 1.0;\n    return vec4(get_color(index-1.0), index);\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\nint von_neumann_search(vec2 p, int range, float state) {\n    /*\n    Gets the number of cells that are in state 'state' within the \n    extended von-neumann neighborhood (specified by range) of point 'p'.\n    */\n    int matching_neighbors = 0;\n    for (int i=-range; i<range+1; i++) {\n        int Y = abs(abs(i) - range);\n        for (int j=-Y; j<Y+1; j++) {\n            if (fetch(p, i, j).a == state)\n                matching_neighbors++;\n        }\n    }\n    return matching_neighbors;\n}\n\nint moore_search(vec2 p, int range, float state) {\n    /*\n    Gets the number of cells that are in state 'state' within the\n    extended moore neighborhood (specified by range) of point 'p'.\n    */\n    int matching_neighbors = 0;\n    for (int i=-range; i<range+1; i++) \n        for (int j=-range; j<range+1; j++)\n            if (fetch(p, i, j).a == state)\n                matching_neighbors++;\n                \n    return matching_neighbors;\n}\n\nint search(vec2 p, int range, float state) {\n    #if NEIGHBORHOOD_MODE == 1\n        return von_neumann_search(p, range, state);\n    #else\n        return moore_search(p, range, state);\n    #endif\n}\n\nfloat majority_search(vec2 p, int range) {\n    /*\n    Gets the index of the color with the majority in the neighborhood.\n    */\n    \n    int counts[int(N_COLORS)];\n    \n    // search neighborhood and update counts\n    for (int i=-range; i<range+1; i++)\n        for (int j=-range; j<range+1; j++)\n            counts[int(fetch(p, i, j).a)-1]++;\n    \n    // find max index\n    int max_index = 0;\n    for (int i=0; i<int(N_COLORS); i++)\n        if (counts[max_index] < counts[i])\n            max_index = i;\n    \n    return float(max_index);\n}\n\nvoid mainImage(out vec4 pixel_state, in vec2 pixel){    \n    if (key_down(KEY_RESET) || fetch(pixel,0,0).a == 0.0) {\n        float index = floor(hash12(pixel)*N_COLORS);\n        pixel_state = vec4(get_color(index), index+1.0);\n        return;\n    }\n    vec4 state = fetch(pixel, 0, 0);\n    \n    #if (MAJORITY_SEARCH)\n        float index = majority_search(pixel, RANGE);\n        pixel_state = vec4(get_color(index), index+1.0);\n    #else\n        vec4 next_state = next_state(state);\n        if (GREENSBERG_HASTINGS && state.a > 1.0) {\n            pixel_state = next_state;\n            return;\n        }\n        int neighbors_next_state = search(pixel, RANGE, next_state.a);\n        pixel_state = neighbors_next_state >= THRESHOLD ? next_state : state;\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.14159\n\n#define GRID iChannel0\n#define KEYBOARD iChannel1\n\n// press 'r' key to reset. see https://keycode.info/ for other keycodes\n#define KEY_RESET 82\n\n// Use 1 to use majority update method\n// Use 0 to use Cyclic Celular Automata update method\n#define MAJORITY_SEARCH 0\n\n/*\nCyclic Cellular Automata (CCA) exhibit complex self-organization by \niteration of an extremely simple update rule. A specified number of \ncolors are arranged cyclically in a \"color wheel\". Each color can only \nadvance to the next, the last cycling to the first. \n\nIn each frame update, a cell's color advances to the next color if there \nare at least THRESHOLD cells of the next color within its neighborhood.\n\nIn the Greensberg-Hastings model, the threshold condition only applies to\ncells that have the first color. All cells that are colored with colors\nother than the first color automatically advance to the next color.\n\nThese simple dynamics exhibit complex self-organization starting from \nrandomness. This class of cellular automatons was discovered and explored \nby David Griffeath\n*/\n\n#define RANGE 3\n#define THRESHOLD 4\n#define N_COLORS 5.0\n\n// Use 1 for linear gradient between Color A and Color B\n// Use 2 for cosine gradient\n#define COLOR_MODE 2\n\n// Endpoint colors of the linear gradient, if color mode 1 is used.\n#define COLOR_A vec3(1.000,0.000,0.298)\n#define COLOR_B vec3(0.000,1.000,0.031)\n\n// Use 1 for Von-Neumann neighborhoods\n// Use 2 for Moore neighborhoods\n#define NEIGHBORHOOD_MODE 1\n#define GREENSBERG_HASTINGS false\n\nvec3 cos_gradient(float t) {\n    vec3 a = vec3(0.5);\n    vec3 b = vec3(0.5);\n    vec3 c = vec3(1.0);\n    vec3 d = vec3(0.00, 0.33, 0.67);\n    return a + b * cos(2.0*PI*(c*t+d));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}