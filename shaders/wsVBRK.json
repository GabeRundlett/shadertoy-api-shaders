{
    "Shader": {
        "info": {
            "date": "1607544162",
            "description": "Remix of aiekick's Ray Marching Experiment 43: [url]https://www.shadertoy.com/view/lstXRl[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wsVBRK",
            "likes": 4,
            "name": "Play Parching Apexperiment, fork",
            "published": 3,
            "tags": [
                "ray",
                "experiment",
                "marching",
                "remix",
                "glitch",
                "fork",
                "weird",
                "error",
                "43"
            ],
            "usePreview": 0,
            "username": "404Glaciergargamel",
            "viewed": 546
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\nfloat dstepf = 0.1;\n\nvec4 displ(vec3 p)\n{\n    vec2 g = p.xz;\n    vec3 col =  texture(iChannel1, g+iTime*0.2).rrr;\n   \tcol = clamp(col, 0., 1.);\n    float dist = dot(col,vec3(0.1));\n    return vec4(dist,col);\n}\n\nvec4 map(vec3 p)\n{\n    vec4 disp1 = displ(p*.2);\n    vec4 disp2 = displ(p*.3);\n    float m = length(p);\n    float me = m - 5.78 + disp1.x;\n    float mi = m - 5.5 - disp1.x;\n    float mk = m - 5.5 + disp2.x;\n    float mei = max(-mi, me);\n    if (mk < mei) \n    {\n        dstepf += 0.035;\n        return vec4(mk, disp2.y*vec3(0.3,0.6,0.3));\n    }\n    dstepf += 0.015;\n    return vec4(mei, disp1.y*vec3(0.6,0.3,0.6));\n}\n\n///////////////////////////////////////////\n//FROM IQ Shader https://www.shadertoy.com/view/Xds3zN\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 2.0;\n    float t = mint;\n    for( int i=1; i<26; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 9.0*h/t );\n        t += clamp( h, 0.03, 0.20 );\n        if( h<0.002 || t>tmax ) break;\n    }\n    return clamp( res, 0.1, 2.0 );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.04, 1., 1. );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.1;\n    float sca = 2.0;\n    for( int i=1; i<6; i++ )\n    {\n        float hr = 0.02 + 0.22*float(i)/5.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 1.05;\n    }\n    return clamp( 2.0 - 4.0*occ, 0.1, 2.0 );    \n}\n\n///////////////////////////////////////////\nfloat march(vec3 ro, vec3 rd, float rmPrec, float maxd, float mapPrec)\n{\n    float s = rmPrec,so=s;\n    float d = 1.;\n    for(int i=1;i<350;i++)\n    {      \n        if (s<rmPrec||s>maxd) break;\n        s = map(ro+rd*d).x;\n        s *= (s>so?2.5:2.);so=s; // Enhanced Sphere Tracing => lgdv.cs.fau.de/get/2234 \n        d += s * mapPrec;\n    }\n    return d;\n}\n\n////////MAIN///////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime*0.35;\n    float cam_a = time; // angle z\n    \n    float cam_e = 6.52;//*(sin(time*2.)*.5+.5); // elevation\n    float cam_d = 2.88; // distance to origin axis\n    \n    vec3 camUp=vec3(1,2,1);//Change camere up vector here\n  \tvec3 camView=vec3(-1,-1,-1); //Change camere view here\n  \tfloat li = 0.7; // light intensity\n    float prec = 0.00002; // ray marching precision\n    float maxd = 60.; // ray marching distance max\n    float refl_i = 0.55; // reflexion intensity\n    float refr_a = 0.8; // refraction angle\n    float refr_i = 0.9; // refraction intensity\n    float bii = 0.45; // bright init intensity\n    float marchPrecision = 0.6; // ray marching tolerance precision\n    \n    /////////////////////////////////////////////////////////\n    if ( iMouse.z>1.) cam_e = iMouse.x/iResolution.x * 20.; // mouse x axis \n    if ( iMouse.z>1.) cam_d = iMouse.y/iResolution.y * 60.; // mouse y axis \n    /////////////////////////////////////////////////////////\n    \n    vec2 s = iResolution.xy;\n    vec2 uv = (fragCoord*3.-s)/s.y;\n    \n    vec3 col = vec3(1.);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); //\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    float d = march(ro, rd, prec, maxd, marchPrecision);\n    \n    if (d<maxd)\n    {\n        vec2 e = vec2(-2., 2.)*0.006; \n    \tvec3 p = ro+rd*d;\n        vec3 n = calcNormal(p);\n        \n        b=li;\n        \n        vec3 reflRay = reflect(rd, n);\n\t\tvec3 refrRay = refract(rd, n, refr_a);\n        \n        vec3 cubeRefl = textureLod(iChannel0, reflRay,1.).rgb * refl_i;\n        vec3 cubeRefr = textureLod(iChannel0, refrRay,1.).rgb * refr_i;\n        \n        col = cubeRefl + cubeRefr + pow(b, 15.);\n        \n       \t// lighting        \n        float occ = calcAO( p, n );\n\t\tvec3  lig = normalize( vec3(-0.7, 0.8, -0.6) );\n\t\tfloat amb = clamp( 0.6+0.6*n.y, 0.1, 2.0 );\n        float dif = clamp( dot( n, lig ), 0.1, 2.0 );\n        float bac = clamp( dot( n, normalize(vec3(-lig.x,0.1,-lig.z))), 0.1, 2.0 )*clamp( 2.0-p.y,0.1,2.0);\n        float dom = smoothstep( -0.2, 0.2, reflRay.y );\n        float fre = pow( clamp(2.0+dot(n,rd),0.1,2.0), 3.0 );\n\t\tfloat spe = pow(clamp( dot( reflRay, lig ), 0.1, 2.0 ),26.0);\n        \n        dif *= softshadow( p, lig, 0.03, 3.5 );\n       \tdom *= softshadow( p, reflRay, 0.03, 3.5 );\n\n\t\tvec3 brdf = vec3(0.1);\n        brdf += 2.20*dif*vec3(2.00,1.00,0.70);\n\t\tbrdf += 2.20*spe*vec3(2.00,1.00,0.70)*dif;\n        brdf += 0.40*amb*vec3(0.60,0.80,2.00)*occ;\n        brdf += 0.50*dom*vec3(0.60,0.80,2.00)*occ;\n        brdf += 0.40*bac*vec3(0.35,0.35,0.35)*occ;\n        brdf += 0.50*fre*vec3(2.00,2.00,2.00)*occ;\n\t\tbrdf += 0.03;\n\t\tcol = col*brdf;\n\n    \tcol = mix( col, vec3(0.9,1.0,2.0), 2.0-exp( -0.0006*d*d ) );\n        \n       \tcol = mix(col, map(p).yzw, 0.6);\n    }\n    else\n    {\n        b+=0.2;\n        col = texture(iChannel0, rd).rgb;\n    }\n    \n\tfragColor.rgb = col * dstepf;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}