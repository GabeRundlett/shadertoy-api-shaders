{
    "Shader": {
        "info": {
            "date": "1714951220",
            "description": "Series To explore Ray Marching\n\nResource from @The_ArtOfCode\nThe Art of Code (Dec 7, 2018) \"ShaderToy Tutorial - Ray Marching for Dummies!\" https://youtu.be/PGtv-dBi2wE",
            "flags": 0,
            "hasliked": 0,
            "id": "wlfGzl",
            "likes": 1,
            "name": "MarchingRays_Template0",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "jbracey2004",
            "viewed": 109
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define epsilon 0.01\n\nfloat getDistScene(vec3 pos){\n    vec4 sphere = vec4(0, 1, 5, 1);\n    \n    float sphereDist = length(pos - sphere.xyz) - sphere.w;\n    float planeDist = pos.y;\n    \n    float dist = min(sphereDist, planeDist);\n    \n    return dist;\n}\n\nfloat rayMarch(vec3 pos, vec3 dir) {\n    float d0 = 0.0;\n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = pos + dir*d0;\n        float dS = getDistScene(p);\n        d0 += dS;\n        if(d0>MAX_DIST || dS<epsilon) {\n            break;\n        }\n    }\n    return d0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 uvN = (2.0*uv - 1.0);\n    vec3 csRay = normalize(vec3(uvN.xy, 1.0));\n    vec3 posCam = vec3(0.0, 1.0, 0.0);\n    \n    float d = rayMarch(posCam, csRay);\n    vec3 col = vec3(1. - d/6.);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}