{
    "Shader": {
        "info": {
            "date": "1541360492",
            "description": "Why do androids love penguins?",
            "flags": 0,
            "hasliked": 0,
            "id": "4tdBWf",
            "likes": 12,
            "name": "Androids Love Penguins",
            "published": 3,
            "tags": [
                "projection",
                "linux",
                "snow",
                "android",
                "penguin"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 630
        },
        "renderpass": [
            {
                "code": "// \"Androids Love Penguins\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Why do androids love penguins? (mouseable)\n\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat PrEllipsDf (vec3 p, vec3 r);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Noisefv2 (vec2 p);\nvec3 Noisev3v2 (vec2 p);\nfloat Fbm2s (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define N_PENG 3\n\nmat3 pngMat[N_PENG], pMat;\nvec3 pngPos[N_PENG], pPos, qHit, sunDir, trkA, trkF, rmSize;\nvec2 scrnSize;\nfloat dstFar, tCur, fAng, rAngA, scrnUp;\nint idObj;\nbool doSh;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nvec3 TrackPath (float t)\n{\n  return vec3 (dot (trkA, sin (trkF * t)), 0.5 * cos (0.007 * t) * cos (0.01 * t), t);\n}\n\nvec3 TrackDir (float t)\n{\n  return vec3 (dot (trkF * trkA, cos (trkF * t)), 0., 1.);\n}\n\nvec3 TrackAcc (float t)\n{\n  return vec3 (dot (trkF * trkF * trkA, - sin (trkF * t)), 0., 0.);\n}\n\nfloat GrndHt (vec2 p)\n{\n  float w;\n  w = p.x - TrackPath (p.y).x;\n  return SmoothMin (8. * Fbm2s (0.05 * p), 0.1 * w * w - 0.5, 0.5) + Fbm2s (0.1 * p);\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 220; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz);\n    if (h < 0. || s > dstFar) break;\n    sLo = s;\n    s += max (0.01 * s, 0.4 * h);\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (p.y > GrndHt (p.xz)) sLo = s;\n      else sHi = s;\n    }\n    dHit = 0.5 * (sLo + sHi);\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  vec2 e = vec2 (0.01, 0.);\n  return normalize (vec3 (GrndHt (p.xz) - vec2 (GrndHt (p.xz + e.xy),\n     GrndHt (p.xz + e.yx)), e.x).xzy);\n}\n\nfloat PengDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, dh;\n  p.xz *= -1.;\n  q = p;\n  d = PrEllipsDf (q.xzy, vec3 (1.3, 1.2, 1.4));\n  q.y -= 1.5;\n  dh = PrEllipsDf (q.xzy, vec3 (0.8, 0.6, 1.3));\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.3, 2., -0.4);\n  d = SmoothMin (d, max (dh, - PrCylDf (q, 0.15, 0.3)), 0.2);\n  DMINQ (1);\n  q = p;\n  q.yz -= vec2 (1.6, -0.6);\n  d = max (PrEllipsDf (q, vec3 (0.4, 0.2, 0.6)), 0.01 - abs (q.y));\n  DMINQ (2);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.3, 2., -0.4);\n  d = PrSphDf (q, 0.15);\n  DMINQ (3);\n  q = p;\n  q.x = abs (q.x);\n  q.xy -= vec2 (0.6, -1.05);\n  q.yz = Rot2D (q.yz, -0.5 * pi);\n  q.y -= -0.6;\n  d = PrCylDf (q.xzy, 0.12, 0.7);\n  DMINQ (4);\n  q -= vec3 (0.1, -0.67, -0.4);\n  q.xz = Rot2D (q.xz, -0.07 * pi);\n  d = PrEllipsDf (q.xzy, vec3 (0.15, 0.5, 0.05));\n  q.z -= 0.5;\n  q.xz = Rot2D (q.xz, 0.15 * pi);\n  q.z -= -0.5;\n  d = SmoothMin (d, PrEllipsDf (q.xzy, vec3 (0.15, 0.5, 0.05)), 0.05);\n  q.z -= 0.5;\n  q.xz = Rot2D (q.xz, -0.3 * pi);\n  q.z -= -0.5;\n  d = SmoothMin (d, PrEllipsDf (q.xzy, vec3 (0.15, 0.5, 0.05)), 0.05);\n  DMINQ (5);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (1.1, 0.3, -0.2);\n  q.yz = Rot2D (q.yz, -0.25 * pi);\n  q.xy = Rot2D (q.xy, fAng) - vec2 (0.1, -0.4);\n  d = PrEllipsDf (q.xzy, vec3 (0.05, 0.25, 0.9));\n  DMINQ (6);\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float d, dMin;\n  dMin = dstFar;\n  for (int j = 0; j < N_PENG; j ++) {\n    q = p - pngPos[j];\n    d = PrSphDf (q, 3.);\n    if (doSh || d < 0.1) dMin = PengDf (pngMat[j] * q, dMin);\n    else dMin = min (dMin, d);\n  }\n  q = p;\n  q.x -= TrackPath (p.z).x;\n  q.y -= 2.;\n  q.z = mod (q.z + 20., 40.) - 20.;\n  d = 0.8 * PrTorusDf (q, 0.3, 7.);\n  DMINQ (7);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 160; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0005, -0.0005);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat GrndSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float sh, d, h;\n  doSh = true;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 30; j ++) {\n    p = ro + d * rd;\n    h = p.y - GrndHt (p.xz);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float f;\n  rd.y = abs (rd.y) + 0.0001;\n  ro.xz += 0.5 * tCur;\n  f = Fbm2s (0.02 * (rd.xz * (100. - ro.y) / rd.y + ro.xz));\n  col = vec3 (0.1, 0.2, 0.4);\n  col = mix (col, vec3 (0.8), clamp (3. * (f - 0.5) * rd.y + 0.1, 0., 1.));\n  return col;\n}\n\nvoid PengPM (float s, float dir)\n{\n  vec3 vel, va, acc, ort, cr, sr;\n  pPos = TrackPath (s);\n  vel = TrackDir (s);\n  acc = TrackAcc (s);\n  pPos.x -= 50. * acc.x;\n  va = cross (acc, vel) / length (vel);\n  ort = vec3 (-0.1 * dir, atan (vel.z, vel.x) - 0.5 * dir * pi,\n     12. * dir * length (va) * sign (va.y));\n  cr = cos (ort);\n  sr = sin (ort);\n  pMat = mat3 (cr.z, - sr.z, 0., sr.z, cr.z, 0., 0., 0., 1.) *\n         mat3 (1., 0., 0., 0., cr.x, - sr.x, 0., sr.x, cr.x) *\n         mat3 (cr.y, 0., - sr.y, 0., 1., 0., sr.y, 0., cr.y);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, vns;\n  float dstGrnd, dstObj, gg, dx, sh;\n  doSh = false;\n  dstGrnd = GrndRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstGrnd) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj != 3) {\n      if (idObj == 1) col4 = (qHit.z < -0.2 || qHit.z > 0.4 && abs (qHit.x) < 0.04 ||\n         qHit.z < 0.4 && length (qHit.xy) < 0.2) ? vec4 (0.9, 0.9, 0.9, 0.1) :\n         vec4 (0.15, 0.15, 0.2, 0.1);\n      else if (idObj == 2) col4 = vec4 (1., 0.8, 0.2, 0.2);\n      else if (idObj == 4) col4 = vec4 (0.8, 0.8, 0., 0.2);\n      else if (idObj == 5) col4 = vec4 (0.9, 0.9, 0., 0.2);\n      else if (idObj == 6) col4 = vec4 (0.2, 0.2, 0.25, 0.1);\n      else if (idObj == 7) col4 = vec4 (0.3, 0.4, 0.7, 0.2);\n      sh = ObjSShadow (ro, sunDir);\n      col = col4.rgb * (0.2 + 0.1 * max (- dot (vn.xz, normalize (sunDir.xz)), 0.) +\n         0.7 * sh * max (dot (vn, sunDir), 0.)) +\n         sh * col4.a * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n    } else col = SkyCol (ro, reflect (rd, vn));\n  } else if (dstGrnd < dstFar) {\n    ro += dstGrnd * rd;\n    vn = GrndNf (ro);\n    gg = smoothstep (0.6, 0.9, vn.y);\n    vn = VaryNf (4. * ro, vn, 0.5);\n    vns = normalize (Noisev3v2 (128. * ro.xz) - 0.5);\n    vns.y = abs (vns.y);\n    dx = abs (ro.x - TrackPath (ro.z).x);\n    col = vec3 (1.) * mix (1.1, 1., gg) * (0.7 +\n       0.3 * mix (Noisefv2 (vec2 (16. * dx, 0.5 * ro.z)), 1., smoothstep (0., 2., dx)));\n    sh = min (GrndSShadow (ro, sunDir), ObjSShadow (ro, sunDir));\n    col = col * (0.2 + 0.1 * max (- dot (vn.xz, normalize (sunDir.xz)), 0.) +\n       0.7 * sh * max (dot (vn, sunDir), 0.)) +\n       0.3 * sh * gg * smoothstep (0.3, 0.5, dot (vn, sunDir)) *\n       pow (max (dot (normalize (sunDir - rd), vns), 0.), 8.);\n  } else col = SkyCol (ro, rd);\n  return pow (clamp (col, 0., 1.), vec3 (0.9));\n}\n\nfloat RobDf (vec3 p)\n{\n  vec3 q;\n  float d, szFac;\n  szFac = 0.8;\n  p /= szFac;\n  p.y -= -1.2;\n  q = p;\n  q.y -= 2.3;\n  d = max (PrSphDf (q, 0.85), - q.y - 0.2);\n  q = p;\n  q.y -= 1.5;\n  d = min (d, PrRoundCylDf (q.xzy, 0.9, 0.28, 0.75));\n  q = p;\n  q.x = abs (q.x) - 1.05;\n  q.y -= 2.;\n  q.yz = Rot2D (q.yz, rAngA);\n  q.y -= -0.5;\n  d = min (d, PrRoundCylDf (q.xzy, 0.2, 0.15, 0.6));\n  q = p;\n  q.x = abs (q.x) - 0.3;\n  q.y -= 3.1;\n  q.xy = Rot2D (q.xy, 0.2 * pi);\n  q.y -= 0.25;\n  d = min (d, PrRoundCylDf (q.xzy, 0.06, 0.04, 0.3));\n  q = p;\n  q.x = abs (q.x) - 0.4;\n  q.y -= 0.3;\n  d = min (d, PrRoundCylDf (q.xzy, 0.25, 0.15, 0.65));\n  q = p;\n  q.x = abs (q.x) - 0.4;\n  q.yz -= vec2 (2.7, 0.7);\n  d = min (d, PrSphDf (q, 0.15));\n  return szFac * d;\n}\n\nfloat ObjDfTh (vec3 p)\n{\n  vec3 q;\n  float d, dMin, bf;\n  dMin = dstFar;\n  d = p.y;\n  DMIN (10);\n  d = 2. * rmSize.y - p.y;\n  DMIN (11);\n  d = rmSize.x - abs (p.x);\n  DMIN (12);\n  d = p.z + rmSize.z;\n  DMIN (13);\n  d = - p.z + rmSize.z;\n  DMIN (14);\n  bf = PrBox2Df (p.xz - vec2 (0., -1.), vec2 (7.5, 6.));\n  q = p;\n  q.xz = mod (q.xz + 1.5, 3.) - 1.5;\n  q.y -= 0.25 * rmSize.y;\n  d = max (bf, RobDf (q));\n  DMIN (15);\n  return dMin;\n}\n\nfloat ObjRayTh (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDfTh (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNfTh (vec3 p)\n{\n  const vec2 e = vec2 (0.0005, -0.0005);\n  vec4 v = vec4 (ObjDfTh (p + e.xxx), ObjDfTh (p + e.xyy),\n     ObjDfTh (p + e.yxy), ObjDfTh (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 BrickCol (vec2 p)\n{\n  vec2 q, iq;\n  q = p * vec2 (1./62., 1./31.);\n  iq = floor (q);\n  if (2. * floor (iq.y / 2.) != iq.y) q.x += 0.5;\n  q = smoothstep (0.02, 0.05, abs (fract (q + 0.5) - 0.5));\n  return (0.7 + 0.3 * q.x * q.y) * vec3 (0.6, 0.55, 0.5);\n}\n\nvec3 ObjColTh (vec3 p)\n{\n  vec3 col;\n  if (idObj == 10) col = vec3 (0.2, 0.15, 0.1);\n  else if (idObj == 11) col = vec3 (0.8, 0.8, 0.9);\n  else if (idObj == 12) col = BrickCol (40. * p.zy);\n  else if (idObj == 13) col = BrickCol (40. * p.xy);\n  else if (idObj == 15) col = vec3 (0.8, 1., 0.8);\n  return col;\n}\n\nvec3 ScrnCol (vec2 w)\n{\n  vec3 ro, rd;\n  float spd;\n  trkA = 5. * vec3 (1.9, 2.9, 4.3);\n  trkF = 0.18 * vec3 (0.23, 0.17, 0.13);\n  spd = 10.;\n  for (int j = 0; j < N_PENG; j ++) {\n    PengPM (spd * tCur + 15. * float (j + 1), 1.);\n    pPos.y = GrndHt (pPos.xz) + 1.35;\n    pPos.y += max (0., 0.5 * cos (0.13 * pPos.z) * cos (0.2 * pPos.z));\n    pngPos[j] = pPos;\n    pngMat[j] = pMat;\n  }\n  if (mod (0.1 * tCur, 2.) > 1.2) PengPM (spd * tCur, 1.);\n  else PengPM (spd * tCur + 15. * float (N_PENG + 1), -1.);\n  ro = pPos;\n  ro.y += 3.;\n  rd = normalize (vec3 (w / scrnSize.y, 2.2)) * pMat;\n  fAng = -0.2 * pi + 0.1 * pi * SmoothBump (0.25, 0.75, 0.1, mod (0.125 * tCur, 1.)) *\n     sin (16. * pi * tCur);\n  sunDir = normalize (vec3 (0., 1.5, 1.));\n  sunDir.xz = Rot2D (sunDir.xz, 0.3 * pi * sin (0.1 * tCur));\n  dstFar = 250.;\n  return ShowScene (ro, rd);\n}\n\nvec3 ShowSceneTh (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, vd, ltDir, scrCol, refFac;\n  vec2 w;\n  float dHit, tCyc;\n  int idObjT;\n  bool isScrn;\n  tCyc = mod (0.25 * tCur, 2.);\n  rAngA = (abs (tCyc - 1.) < 0.5) ? 0.: 2. * pi * (0.5 - abs (mod (2. * (tCyc - 0.5), 1.) - 0.5)); \n  dHit = ObjRayTh (ro, rd);\n  ro += dHit * rd;\n  vn = ObjNfTh (ro);\n  col = vec3 (0.);\n  refFac = vec3 (1.);\n  if (idObj == 15) {\n    refFac = 0.8 * vec3 (0.8, 0.9, 0.8);\n    for (int j = 0; j < 2; j ++) {\n      rd = reflect (rd, vn);\n      ro += 0.01 * rd;\n      dHit = ObjRayTh (ro, rd);\n      ro += dHit * rd;\n      if (idObj != 15) break;\n      refFac *= 0.8 * vec3 (0.8, 0.9, 0.8);\n    }\n  }\n  vn = ObjNfTh (ro);\n  isScrn = false;\n  col = vec3 (0.);\n  scrCol = vec3 (0.);\n  idObjT = idObj;\n  if (idObjT == 14) {\n    w = ro.xy;\n    w.y -= rmSize.y + scrnUp;\n  } else {\n    col = ObjColTh (ro);\n    if (idObjT != 10) {\n      vd = normalize (vec3 (0., 1., 3.5) * rmSize - ro);\n      if (vd.z != 0.) ro += vd * (rmSize.z - ro.z) / vd.z;\n      ro.y -= rmSize.y + scrnUp;\n      w = ro.xy;\n    }\n  }\n  if (idObjT != 10) isScrn = (abs (w.x) < scrnSize.x && abs (w.y) < scrnSize.y);\n  if (isScrn) scrCol = ScrnCol (w);\n  col = (idObjT == 14) ? scrCol: 0.2 * col * (1. + 0.4 * scrCol * (1. + max (dot (vn,\n     normalize (vec3 (0., scrnUp, rmSize.z))), 0.)));\n  return clamp (refFac * col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 2. * pi * max (0.9 - abs (mod (0.011 * tCur, 2.) - 1.), 0.) / 0.9;\n  el = 0.1 * (cos (2. * az) - 1.);\n  if (mPtr.z > 0.) {\n    el -= 0.3 * pi * mPtr.y;\n    az -= 2. * pi * mPtr.x;\n  }\n  el = clamp (el, -0.07 * pi, 0.07 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  tCur = mod (tCur, 600.) - 300.;\n  rmSize = vec3 (12., 5., 12.);\n  scrnUp = 0.15 * rmSize.y;\n  scrnSize = vec2 (0.95, 0.8) * rmSize.xy;\n  ro = vuMat * vec3 (0., rmSize.y, -0.99 * rmSize.z);\n  ro.xz = clamp (ro.xz, - 0.98 * rmSize.xz, 0.98 * rmSize.xz);\n  ro.y = clamp (ro.y - 0.2 * rmSize.y, 0.02 * rmSize.y, 1.98 * rmSize.y);\n  rd = vuMat * normalize (vec3 (uv, 3.));\n  dstFar = 150.;\n  fragColor = vec4 (ShowSceneTh (ro, rd), 1.);\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  return min (min (max (dxy + rt, dz), max (dxy, dz + rt)), length (vec2 (dxy, dz) + rt) - rt);\n}\n\nfloat PrEllipsDf (vec3 p, vec3 r)\n{\n  return (length (p / r) - 1.) * min (r.x, min (r.y, r.z));\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + vec4 (0., 1., 57., 58.)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nvec3 Noisev3v2 (vec2 p)\n{\n  vec4 h;\n  vec3 g;\n  vec2 ip, fp, ffp;\n  ip = floor (p);\n  fp = fract (p);\n  ffp = fp * fp * (3. - 2. * fp);\n  h = Hashv4f (dot (ip, vec2 (1., 57.)));\n  g = vec3 (h.y - h.x, h.z - h.x, h.x - h.y - h.z + h.w);\n  return vec3 (h.x + dot (g.xy, ffp) + g.z * ffp.x * ffp.y,\n     30. * fp * fp * (fp * fp - 2. * fp + 1.) * (g.xy + g.z * ffp.yx));\n}\n\nfloat Fbm2s (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.75);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}