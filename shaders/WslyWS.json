{
    "Shader": {
        "info": {
            "date": "1585476827",
            "description": "potato",
            "flags": 32,
            "hasliked": 0,
            "id": "WslyWS",
            "likes": 19,
            "name": "Day 101",
            "published": 3,
            "tags": [
                "mograph",
                "motiongraphics"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 437
        },
        "renderpass": [
            {
                "code": "// radiual chromab in this buffer\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n\tfragColor = vec4(0);\n    // Radial blur\n    float steps = 16.;\n    float scale = 0.00 + pow(dot(uvn,uvn),1.1)*0.0;\n    float chromAb = pow(length(uv - 0.5),1.5)*2.2;\n    vec2 offs = vec2(0);\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n        scale *= 0.97;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.r += texture(iChannel0, target + chromAb*1.4/iResolution.xy).x;\n    \tradial.g += texture(iChannel0, target).y;\n    \tradial.b += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    radial /= steps;\n    \n    fragColor += radial;\n    \n    fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.);\n    \n    fragColor = max(fragColor, 0.);\n    fragColor *= 1. - dot(uvn,uvn)*1.   ;\n    fragColor = pow(fragColor, vec4(0.4545 ));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define pi acos(-1.)\n#define tau (2.*pi)\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n\n// from https://necessarydisorder.wordpress.com/\nfloat ease(float p, float g) {\n    if(p < 0.){\n        return 0.;\n    } else if(p > 1.){\n    \treturn 1.;\n    } else {\n        if (p < 0.5) \n            return 0.5 * pow(2.*p, g);\n        else\n            return 1. - 0.5 * pow(2.*(1. - p), g);\n    }\n}\n\n// inigo quilez\nfloat sdTri(  vec2 p, float s )\n{\n    //p.y -= s*0.75;\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - s;\n    p.y = p.y + s/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nconst float speed = 0.8;\nfloat[] scenes = float[2](1.*speed,1.2*speed); \n\nfloat S = 0.3;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord  )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;    \n    uv *= 2.;\n    vec3 col = vec3(0);\n    \n    float d = 10e6;\n    \n    float triA;\n    float triB;\n    float triC;\n    float triD;\n    \n    float t = iTime;\n    \n    t = mod(t, scenes[0] + scenes[1]  );\n    \n    if(t < scenes[0]){\n        float env = ease(t/scenes[0], 2.);\n        \n\t    triA = sdTri(uv*rot(pi*1.), S);\n\n        \n        triB = sdTri(uv, 0. + env*S*2.);\n        d = min(d, triA) ;\n\n\n        d = max(d, -triB);\n        d = min(d, max(triB, -triA)) ;\n        \n    \n    } else if(t < scenes[1] + scenes[0]){\n        t -= scenes[0];\n        float env = ease(t/scenes[1], 2.)*4.;\n        float envb = ease(t/scenes[1], 4.)*1.;\n        \n        float offs = 1.155;\n            \n        triC = sdTri(uv - vec2(S*1. + env,0. - S*offs/2. - env*0.5), S);\n        triD = sdTri(uv - vec2(-S*1. - env,0. - S*offs/2. - env*0.5), S);\n        \n        uv -= vec2(0.,S*offs - S*offs*envb);\n        uv *= rot(pi*envb);\n        \n        triB = sdTri(uv, S);\n        \n        d = min(d, triB);\n        d = min(d, triC);\n        d = min(d, triD);\n    } \n    \n    \n    \n    col += smoothstep(0.00,3./iResolution.y,-d);\n    \n    col = 1. - col;\n    \n    fragColor = vec4(col,1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}