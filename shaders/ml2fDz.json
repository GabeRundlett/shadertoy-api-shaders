{
    "Shader": {
        "info": {
            "date": "1693970671",
            "description": "thingy",
            "flags": 32,
            "hasliked": 0,
            "id": "ml2fDz",
            "likes": 2,
            "name": "sort͏",
            "published": 3,
            "tags": [
                "thing"
            ],
            "usePreview": 0,
            "username": "01000001",
            "viewed": 52
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 U ){\n    \n    vec2 r = iResolution.xy;\n    vec2 uv = U/r;\n    \n\n    O = vec4(smoothstep(1./r.y, 0., abs(texture(iChannel0, vec2(uv.x, 0)).x-uv.y)));\n    \n    // Smoothstep is an intentional design choice to give randomized brightness to particles\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const uint k = 1103515245U;\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\nvoid mainImage( out vec4 O, vec2 U ){\n    if (U.y == .5){\n         if (iFrame < 20){\n             O = vec4(0);\n             O.x = hash(uvec3(U.x, iDate.w, iDate.z)).x;\n         } else {\n             O = texture(iChannel0, U/iResolution.xy);\n         \n             // Assuming we have a GPU, this is a naïve method but it works\n             // Sort here\n             \n             bool d = (int(U.x) + iFrame)%2 == 1;\n             \n             float v = texelFetch(iChannel0, ivec2(U.x + (d?1.:-1.) - .5, 0), 0).x;\n             \n             if (v == 0.) return;\n             \n             O.x = (v < O.x && d) || (v > O.x && !d)?v:O.x;\n         \n         \n         }\n    } else {\n        O = vec4(0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}