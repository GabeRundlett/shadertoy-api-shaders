{
    "Shader": {
        "info": {
            "date": "1708360083",
            "description": "Simple Dithering based on Vlachos 2016 \"Advanced VR Rendering\"",
            "flags": 0,
            "hasliked": 0,
            "id": "MXB3Dz",
            "likes": 0,
            "name": "Vlachos 2016 Dithering ",
            "published": 3,
            "tags": [
                "dithering"
            ],
            "usePreview": 0,
            "username": "CrushedPixel",
            "viewed": 132
        },
        "renderpass": [
            {
                "code": "vec3 downsample(vec3 color, float amount){ \n    vec3 c = color; \n    c *= amount;\n    c = ceil(c);\n    c /= amount;\n    return c;\n}\n\nvec3 dither(vec3 color, float subtlety) {\n    // evaluate dithering noise based on\n    // Vlachos 2016, \"Advanced VR Rendering\"\n    vec3 noise = vec3(dot(vec2(171.0, 231.0), gl_FragCoord.xy));\n    noise = fract(noise / vec3(103.0, 71.0, 97.0));\n    \n    noise = noise - 0.5;\n    return color.rgb + (noise / (subtlety - 1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // base pixel color\n    vec3 col = vec3(uv.x, uv.y, 0); \n    \n    // downsample to introduce banding\n    col = downsample(col, 100.0);\n\n    // apply dithering to remove banding :P\n    col = dither(col, 12.0);\n\n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}