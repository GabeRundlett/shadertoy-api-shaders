{
    "Shader": {
        "info": {
            "date": "1636757648",
            "description": "Solving for the roots of a quintic equation using Durand-Kerner method to find all roots simultaneously.",
            "flags": 0,
            "hasliked": 0,
            "id": "st33Wj",
            "likes": 18,
            "name": "Quintic Solving Study II - DK",
            "published": 3,
            "tags": [
                "study",
                "quintic",
                "solving",
                "weierstrass",
                "durandkerner"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 221
        },
        "renderpass": [
            {
                "code": "#define CONSTRUCT_FROM_ROOTS\n\nvoid quinticFromRoots(in float x1, in float x2, in float x3, in float x4, in float x5,\n    out float a, out float b, out float c, out float d, out float e, out float f) {\n    a = 1.0;\n    b = -x1 - x2 - x3 - x4 - x5;\n    c = x1 * x2 + x3 * x4 + (x1 + x2) * (x3 + x4) + (x1 + x2 + x3 + x4) * x5;\n    d = -(x1 + x2) * x3 * x4 - x1 * x2 * (x3 + x4) - (x1 * x2 + x3 * x4 + (x1 + x2) * (x3 + x4)) * x5;\n    e = x1 * x2 * x3 * x4 + ((x1 + x2) * x3 * x4 + x1 * x2 * (x3 + x4)) * x5;\n    f = -x1 * x2 * x3 * x4 * x5;\n}\n\n// Hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nfloat Hash11(in float x) {\n    x = fract(x * 0.1031);\n    x *= x + 33.33;\n    x *= x + x;\n    return fract(x);\n}\n\nvec2 cmul(in vec2 z, in vec2 w) { return mat2(z, -z.y, z.x) * w; }\nvec2 cdiv(in vec2 z, in vec2 w) { return cmul(z, vec2(w.x, -w.y)) / dot(w, w); }\nint solveQuintic(in float a, in float b, in float c,\n    in float d, in float e, in float f, out float[5] realRoots) {\n    // TODO: refactor\n    // Reduction to x^5 + px^3 + qx^2 + rx + s\n    float p = (5.0 * a * c - 2.0 * b * b) / (5.0 * a * a);\n    float q = (25.0 * a * a * d - 15.0 * a * b * c + 4.0 * b * b * b) / (25.0 * a * a * a);\n    float r = (125.0 * a * a * a * e - 50.0 * a * a * b * d + 15.0 * a * b * b * c - 3.0 * b * b * b * b) / (125.0 * a * a * a * a);\n    float s = (3125.0 * a * a * a * a * f - 625.0 * a * a * a * b * e + 125.0 * a * a * b * b * d - 25.0 * a * b * b * b * c + 4.0 * b * b * b * b * b) / (3125.0 * a * a * a * a * a);\n\n    float bound = 1.0 + max(1.0, max(abs(p), max(abs(q), max(abs(r), abs(s)))));\n    //bound *= 0.414213562373; // Correction if perturbing with random([-1...1])\n    bound *= 0.5; // Keep safely within bounds\n\n    vec2[5] roots;\n    roots[0] = vec2(bound, 0.0); // QuinticRootOfUnity^0\n    roots[1] = vec2(0.309016994375, 0.951056516295) * bound; // QuinticRootOfUnity^1\n    roots[2] = vec2(-0.809016994375, 0.587785252292) * bound; // QuinticRootOfUnity^2\n    roots[3] = vec2(-0.809016994375, -0.587785252292) * bound; // QuinticRootOfUnity^3\n    roots[4] = vec2(0.309016994375, -0.951056516295) * bound; // QuinticRootOfUnity^4\n\n    for (int iter=0; iter < 25; iter++) {\n        float maxEval = -1e20;\n        for (int root=0; root < 5; root++) {\n            vec2 z = roots[root];\n            vec2 quinticVal = cmul(cmul(cmul(cmul(z, z) + vec2(p, 0.0), z) + vec2(q, 0.0), z) + vec2(r, 0.0), z) + vec2(s, 0.0);\n            maxEval = max(maxEval, max(abs(quinticVal.x), abs(quinticVal.y)));\n\n            vec2 denom = z - roots[(root + 1) % 5];\n            denom = cmul(denom, z - roots[(root + 2) % 5]);\n            denom = cmul(denom, z - roots[(root + 3) % 5]);\n            denom = cmul(denom, z - roots[(root + 4) % 5]);\n\n            roots[root] -= cdiv(quinticVal, denom);\n        }\n\n        if (maxEval < 1e-7) break;\n    }\n\n    // Undo substitution y = x + b/5a\n    // and weed out complex roots\n    int numRealRoots = 0;\n    float offs = b / (5.0 * a);\n    for (int root=0; root < 5; root++) {\n        vec2 z = roots[root];\n        if (abs(z.y) < 1e-7) {\n            realRoots[numRealRoots] = z.x - offs;\n            numRealRoots++;\n        }\n    }\n\n    return numRealRoots;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Boilerplate\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y * 4.0;\n    vec4 mouse = (vec4(iMouse.xy, abs(iMouse.zw)) - center.xyxy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n    float time = iTime;\n\n    // Coefficients\n    float a, b, c, d, e, f;\n\n    #ifdef CONSTRUCT_FROM_ROOTS\n    time *= 0.25;\n    float sec = floor(time);\n    float lerp = smoothstep(0.0, 1.0, fract(time));\n\n    // Generate random animated roots\n    float x1 = mix(Hash11(sec), Hash11(sec + 1.0), lerp) * 6.0 - 3.0;\n    float x2 = mix(Hash11(sec + 17.13), Hash11(sec + 18.13), lerp) * 6.0 - 3.0;\n    float x3 = mix(Hash11(sec + 34.26), Hash11(sec + 35.26), lerp) * 6.0 - 3.0;\n    float x4 = mix(Hash11(sec + 51.39), Hash11(sec + 52.39), lerp) * 6.0 - 3.0;\n    float x5 = mix(Hash11(sec + 68.52), Hash11(sec + 69.52), lerp) * 6.0 - 3.0;\n\n    quinticFromRoots(x1, x2, x3, x4, x5,\n                     a, b, c, d, e, f);\n\n    #else\n    a = sin(time * 0.25) * 1.25;\n    b = sin(time) * 2.0;\n    c = sin(time) * 2.0;\n    d = cos(time * 0.75);\n    e = sin(time * 0.5);\n    f = cos(time);\n    #endif\n\n    // Draw the x axis and quintic equation\n    float fx = ((((a * uv.x + b) * uv.x + c) * uv.x + d) * uv.x + e) * uv.x + f;\n    float dx = (((5.0 * a * uv.x + 4.0 * b) * uv.x + 3.0 * c) * uv.x + 2.0 * d) * uv.x + e; // Derivative for distance estimation\n    color.b += smoothstep(unit, 0.0, abs(uv.y));\n    color.rg += smoothstep(unit, 0.0, abs(uv.y - fx) / sqrt(1.0 + dx * dx));\n\n    // Solve and draw expected versus found roots\n    float[5] roots;\n    int numRoots = solveQuintic(a, b, c, d, e, f, roots);\n    for (int n=0; n < numRoots; n++) {\n        color = mix(color, vec3(1.0), smoothstep(unit, 0.0, length(uv - vec2(roots[n], 0.0)) - 0.05));\n\n        #ifdef CONSTRUCT_FROM_ROOTS\n        color = mix(color, vec3(0.0, 1.0, 0.0), smoothstep(unit, 0.0, abs(length(uv - vec2(roots[n], 0.0)) - 0.1)));\n        #endif\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}