{
    "Shader": {
        "info": {
            "date": "1565254449",
            "description": "increasingly dark rect",
            "flags": 0,
            "hasliked": 0,
            "id": "Wl2SRD",
            "likes": 1,
            "name": "increasingly dark rect",
            "published": 3,
            "tags": [
                "rect"
            ],
            "usePreview": 0,
            "username": "owlwisp",
            "viewed": 302
        },
        "renderpass": [
            {
                "code": "// 渐变宽度\nfloat kLen = 0.06;\nconst float kSqrt2 = 1.0;\n#define TAU 3.\n\nfloat getKLen(){\n\n    return kLen + 0.06 * abs(mod(iTime , TAU ) - TAU / 2.);\n   \n}\n\nfloat getLen(vec2 uv, float a, float b)\n{\n    return abs((a * uv.x - uv.y  + b) / ( sqrt(1. + a * a)));\n}\n\nvec4 calIncreasinglyColor(vec2 uv, vec4 col, float a, float b)\n{\n    float len = getLen(uv,a, b);\n    if(len < getKLen())\n    {\n        float rate = len / getKLen();\n        float increasingly = 0.;\n        if (rate < 0.04){\n\n            increasingly = smoothstep(0., 0.04,rate) ;\n            return mix(col,vec4(0. ,255.,1.,1. ), increasingly);\n\n        }else{\n           \tincreasingly = smoothstep(0., 0.96,rate ) ;\n            return vec4(0. ,255.,1.,1. ) * increasingly; \n        }\n\n        \n    }\n    return vec4(0. ,255. ,120.,1.) *0.1;\n}\nvec4 calIncreasinglyCornerColor(vec2 uv, vec4 col, float a1, float b1, float a2, float b2)\n{\n    float len1 = getLen(uv,a1, b1);\n    float len2 = getLen(uv,a2, b2);\n    float pLen = len1 *len1 + len2 *len2;\n    if ( pLen <   1. *getKLen() * getKLen() ){\n    \n        \n         float rate = sqrt(pLen) / getKLen() * kSqrt2;\n        float increasingly = 0.;\n        if (rate < 0.04){\n\n            increasingly = smoothstep(0., 0.05,rate ) ;\n            return mix(col,vec4(0. ,255.,1.,1. ), 1.);\n\n        }else{\n           \tincreasingly = smoothstep(0., 0.96,rate ) ;\n            return vec4(0. ,255.,1.,1. ) * increasingly; \n        }\n    }\n    return vec4(0. ,255. ,120.,1.) * 0.1;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = vec4(255. , 0. ,0., 1.);\n\t\n    vec2 offset = vec2(-0.08 ,0.1);\n\n    uv += offset;\n\n    float a1 = 0.8;\n    float b1 = 0.7;\n    float b2 = -0.0;\n\n    float a2 = -0.7;\n    float b3 = 0.7;\n    float b4 = 1.3;\n\n    //上边\n    float y1 = a1 * uv.x - uv.y;\n    float y2 = a2 * uv.x - uv.y;\n\n    //上边满足1 下边满足 -1 不满足0\n    int TAB = 0;\n    //右边满足1 左边满足-1  不满足0\n    int LAR = 0;\n\n    //直线\n    // a1*uv.x -uv.y  + b1 = 0\n    // a2*uv.x -uv.y  + b2 = 0\n    //上边\n     //上边\n    if(y1 < -b1){\n        TAB  = 1;\n    }\n    // 下边\n    if(y1 > -b2){\n        TAB  = -1;\n    }\n    //右边\n    if(y2  < -b4){\n        LAR  = 1;\n    }\n    // 下边\n    if(y2 > -b3){\n        LAR  = -1;\n    }\n\n    // 在四个角的处理\n    if(TAB != 0 && LAR != 0){\n        \n    \tfragColor = calIncreasinglyCornerColor(uv,col,a1, TAB == 1 ? b1: b2 , a2 ,LAR == 1 ? b4: b3);\n        return ;\n    }\n    else if (TAB != 0){\n        fragColor = calIncreasinglyColor(uv,col,a1, TAB == 1 ? b1: b2);\n        return ;\n    }\n    else if (LAR != 0){\n        fragColor = calIncreasinglyColor(uv,col,a2, LAR == 1 ? b4: b3);\n        return ;\n    }\n\n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}