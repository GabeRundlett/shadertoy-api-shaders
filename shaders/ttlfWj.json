{
    "Shader": {
        "info": {
            "date": "1597786603",
            "description": "Projection of 4d objects with distance functions. \nCamera is moving in the U axis with sine motion. Use the mouse to rotate around XU and YU axes.\nObjects; Left: 4d Bounding box, Center: 4d cube, Right: 4d sphere.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttlfWj",
            "likes": 3,
            "name": "4d SDF with rotation",
            "published": 3,
            "tags": [
                "sdf",
                "distance",
                "4d",
                "rotation"
            ],
            "usePreview": 0,
            "username": "palash",
            "viewed": 459
        },
        "renderpass": [
            {
                "code": "// Fork of \"Cylinder - distance\" by iq. https://shadertoy.com/view/wdXGDr\n// 2020-08-18 19:51:15\n\nfloat sdSphere( vec4 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdBox( vec4 p, vec4 b )\n{\n  vec4 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,max(q.z, q.w))),0.0);\n}\n\nfloat sdBoundingBox( vec4 p, vec4 b, float e )\n{\n       p = abs(p  )-b;\n  vec4 q = abs(p+e)-e;\n  return min(min(min(\n      length(max(vec4(p.x,q.y,q.z,q.w),0.0))+min(max(p.x,max(q.y,max(q.z, q.w))),0.0),\n      length(max(vec4(q.x,p.y,q.z,q.w),0.0))+min(max(q.x,max(p.y,max(q.z, q.w))),0.0)),\n      length(max(vec4(q.x,q.y,p.z,q.w),0.0))+min(max(q.x,max(q.y,max(p.z, q.w))),0.0)),\n      length(max(vec4(q.x,q.y,q.z,p.w),0.0))+min(max(q.x,max(q.y,max(q.z, p.w))),0.0));\n}\n\n\nfloat map( in vec4 pos )\n{\n    vec3 m = 3.14 * iMouse.xyz/iResolution.xyx;\n    pos = inverse(rotYU(pos, m.x)) * pos;\n    pos = inverse(rotZU(pos, m.y)) * pos;\n    //pos = rotXZ(pos, sin(iTime));\n    //pos = rotZU(pos, sin(iTime));\n    float d = 9999.;\n    d = min(d, sdBoundingBox(pos+vec4(0.8, 0,0,0), vec4(0.2, 0.2, 0.2, 0.2), 0.02 ));\n    d = min(d, sdBox(pos, vec4(0.2, 0.2, 0.2, 0.2) ));\n    d = min(d, sdSphere(pos-vec4(.8, 0,0,0), 0.2 ));\n    return d;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec4 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( vec4(pos.xyz + e.xyy*eps, pos.w) ) + \n\t\t\t\t\t  e.yyx*map( vec4(pos.xyz + e.yyx*eps, pos.w) ) + \n\t\t\t\t\t  e.yxy*map( vec4(pos.xyz + e.yxy*eps, pos.w) ) + \n\t\t\t\t\t  e.xxx*map( vec4(pos.xyz + e.xxx*eps, pos.w) ) );\n}\n    \n#define AA 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // camera movement\t\n\tfloat an = 0.5*(iTime-10.0);\n    //an = 0.;\n\tvec3 ro = vec3( 1.0*sin(an)-0.4, 0.4, 1.0*cos(an)+0.2 );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    \n    \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // raymarch\n        const float tmax = 3.0;\n        float t = 0.0;\n        float z = sin(iTime/2.)/5.;\n        vec4 pos = vec4(ro + t*rd, z);\n        for( int i=0; i<256; i++ )\n        {\n            float h = map(pos);\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n            pos.xyz += h*rd;\n        }\n        \n    \n        // shading/lighting\t\n        vec3 col = vec3(0.0);\n        if( t<tmax )\n        {\n            vec3 nor = calcNormal(pos);\n            float dif = clamp( dot(nor,vec3(0.57703)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.7,0.5)*dif;\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat4 rotXY(in vec4 pos, in float a){\n    return mat4(\n    \tcos(a), sin(a), 0, 0,\n    \t-sin(a), cos(a), 0, 0,\n    \t0, 0, 1, 0,\n    \t0, 0, 0, 1\n    );\n}\n\nmat4 rotYZ(in vec4 pos, in float a){\n    return mat4(\n    \t1, 0, 0, 0,\n    \t0, cos(a), sin(a), 0,\n    \t0, -sin(a), cos(a), 0,\n    \t0, 0, 0, 1\n    );\n}\n\nmat4 rotXZ(in vec4 pos, in float a){\n    return mat4(\n    \tcos(a), 0, -sin(a), 0,\n    \t0, 1, 0, 0,\n    \tsin(a), 0, cos(a), 0,\n    \t0, 0, 0, 1\n    );\n}\n\n\nmat4 rotXU(in vec4 pos, in float a){\n    return mat4(\n    \tcos(a), 0, 0, sin(a),\n    \t0, 1, 0, 0,\n    \t0, 0, 1, 0,\n    \t-sin(a), 0, 0, cos(a)\n    );\n}\n\nmat4 rotYU(in vec4 pos, in float a){\n    return mat4(\n    \t1, 0, 0, 0,\n    \t0, cos(a), 0, -sin(a),\n    \t0, 0, 1, 0,\n    \t0, sin(a), 0, cos(a)\n    );\n}\n\nmat4 rotZU(in vec4 pos, in float a){\n    return mat4(\n    \t1, 0, 0, 0,\n    \t0, 1, 0, 0,\n    \t0, 0, cos(a), -sin(a),\n    \t0, 0, sin(a), cos(a)\n    );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}