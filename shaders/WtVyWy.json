{
    "Shader": {
        "info": {
            "date": "1611691365",
            "description": "Livecoded during \"Shader Royale\" @ HogmanayParty demoparty (that happened at new years eve 2021).\n30 more minutes of polish are added.\n\nTribute to the \"hplus / Halcyon\" 64kb intro.\nhttps://www.pouet.net/prod.php?which=115\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WtVyWy",
            "likes": 8,
            "name": " hplus 2021",
            "published": 3,
            "tags": [
                "raymarching",
                "distancefield",
                "demoscene",
                "liveshading"
            ],
            "usePreview": 0,
            "username": "Alkama",
            "viewed": 546
        },
        "renderpass": [
            {
                "code": "const float pi = acos(-1.0);\n\nfloat t=0.0, g=0.0;\nint mat=0;\n\n#define sat(a) clamp(a,0.,1.)\n#define rep(p,r) (mod(p,(r))-(r)*.5)\nmat2 rot(float a) { float c=cos(a),s=sin(a); return mat2(c,s,-s,c); }\n\nfloat box(vec3 p, vec3 s) {\n    vec3 b=abs(p)-s*.5;\n    return length(max(b,0.0)) + min(0.0, max(max(b.x, b.y), b.z));\n}\n\nvec2 moda(vec2 p, float r) {\n    r = 2.0*pi/r;\n    float a= mod(atan(p.y, p.x), r) - r*0.5;\n    return vec2(cos(a), sin(a)) * length(p);\n}\n\nfloat hash(float a) { return fract(sin(a*2958.9281)*5493.913); }\n\nvec3 tex(vec3 p) {\n    const float s = 0.2;\n    const float s2 = 0.005;\n    const float it = 10.;\n    float c = 0.0;\n    for(float i=1.0; i<it+1.0; i++) {\n        float h = 5.0*hash(i);\n        vec3 v = vec3(fract(     h*i+h*p.x),\n                      fract(0.50*h*i+h*p.y),\n                      fract(0.75*h*i+h*p.z));\n        float l=s-s2*h;\n        float r=s+s2*h;\n    \n        float a = 1.0;\n        a *= smoothstep(l,r,v.x)*smoothstep(l,r,1.0-v.x);\n        a *= smoothstep(l,r,v.y)*smoothstep(l,r,1.0-v.y);\n        a *= smoothstep(l,r,v.z)*smoothstep(l,r,1.0-v.z);\n        c += a/it;\n    }\n    return vec3(sat(c));\n}\n\nfloat city(vec3 p) {\n    p.y+=25.0;\n    float d=10000.0;\n    float s=1.5;\n    float ss=s-0.15;\n    vec2 id=floor(p.xz/s);\n    float den = texture(iChannel0, id*0.001).r;\n    den=pow(den, 2.0)*0.4+.1;\n    float h=pow(10.0*den, 3.0)+sin(t*2.0+id.x*id.y*0.01);\n    p.xz=rep(p.xz,s);\n    d = min(d,box(p, vec3(ss,h,ss)));\n    return d;\n}\n\nfloat hplus(vec3 p) {\n    vec3 pp=p;\n    const float s = .3;\n    p.xz *= rot(.25*pi);\n    p.xz = moda(p.xz, 4.);\n    p -= .1*(tex(pp*.4)-.5);\n    float o = box(p, vec3(2.,.8,2.));\n    o = min(o, box(p-vec3(1.5,0,0), vec3(3,s,s)));\n    o = min(o, box(p-vec3(2.8,0,0), vec3(1.4,.8,1.)));\n    return o;\n}\n\nfloat pawtickles(vec3 p) {\n    vec3 pp = p;\n    pp.xz *= rot(.25*pi);\n    pp.xz = moda(pp.xz, 4.);\n    float o = length(vec3(mod(pp.x+3.0*fract(t*2.0),3.0)-1.5, pp.y, pp.z))-0.05;\n    float a = sin(2.0*sin(t*2.0))*sin(t+pp.x*pp.z*(10.0*fract(t*2.0)));\n    g+=1.0/(0.01+pow(abs(o),2.0)*(10.0+9.7*a));\n    return o;\n}\n\nfloat scene(vec3 p) {\n    float d = 10000.;\n    p.xz *= rot(t*.25);\n    vec3 pp=p;\n    float a = pow(sin(2.0*sin(t*2.0)), 2.0);\n    pp.xz *= rot(a*0.05*sin(3.0*(p.y+t*10.0)));\n    pp.yz *= rot(a*0.05*sin(2.0*(p.x+t*6.0)));\n\n    float o = hplus(pp);\n    if(o<d) { d=o;mat=1; }\n\n    float ptk=pawtickles(p);\n    d = min(d,max(ptk, .1));\n\n    float c = city(p);\n    if(c<d) { d=c;mat=2; }\n\n    return d;\n}\n\nvec3 march(vec3 o, vec3 rd, float tr, float md) {\n    float d=0.0;\n    float ii=0.0;\n    for(float i=0.0; i<100.0; i++) {\n        float h=scene(o+rd*d)*0.8;\n        if(abs(h)<tr) return vec3(d,i,1.0);\n        if(d>md) return vec3(d,i,0.0);\n        d+=h;\n        ii=i;\n    }\n    return vec3(d,ii,0.0);\n}\n\nvec3 normal(vec3 p) {\n    vec2 e=vec2(0.01,0.0);\n    return normalize(scene(p)-vec3(scene(p-e.xyy), scene(p-e.yxy), scene(p-e.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1.0);\n  \n    t=mod(iTime, 20.0*pi);\n    uv *= 1. - length(uv)*.25;\n    vec3 eye = 4.5*vec3(1.,.6+.4*sin(t),-1.);\n    eye.xz+= 2.*vec2(sin(t), cos(t));\n    vec3 tg = vec3(0);\n    vec3 f=normalize(tg-eye);\n    vec3 s=normalize(cross(vec3(-.25+.5*sin(t),1,0), f));\n    vec3 u=normalize(cross(f, s));\n    vec3 dir=normalize(f*.6+uv.x*s+uv.y*u);\n  \n    vec3 lp = vec3(3);\n    lp.xyz-= 3.*vec3(sin(t), cos(t), cos(t));\n\n    vec3 col = vec3(0);\n    float ddd = 0.0;\n\n    vec3 m = march(eye, dir, .001, 500.);\n    ddd = m.x;\n    if(m.z == 1.0) {\n        vec3 p = eye+dir*m.x;\n        vec3 n=normal(p);\n        vec3 ld=normalize(lp-p);\n        float diff = (abs(dot(n, ld)));\n        float spec = (pow(abs(dot(dir, reflect(ld, n))), 30.0));\n        float fres = sat(pow(max(0.0, 1.0-dot(n, -dir)), 1.0));\n        if(mat == 1) {\n            col += sat(vec3(diff+spec)*fres);\n        }\n        if(mat == 2) {\n          col += 0.005*vec3(spec)*acos(-dir);\n        }\n        col *= pow(m.y/50., 2.);\n    } else {\n        col += smoothstep(0.,.3,dir.y+.07)*acos(-dir);\n    }\n    col += acos(-dir)*g*.01;\n    fragColor.rgb = pow(col, vec3(1./2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}