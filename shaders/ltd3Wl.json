{
    "Shader": {
        "info": {
            "date": "1472517018",
            "description": "HDR-style local contrast enhancement, demonstrated using IQ's \"Elevated\" shader. The contrast level is faded up and down, from the original contrast level to extreme contrast enhancement.",
            "flags": 32,
            "hasliked": 0,
            "id": "ltd3Wl",
            "likes": 20,
            "name": "Local Contrast Enhancement HDR",
            "published": 3,
            "tags": [
                "contrast",
                "hdr",
                "local",
                "enhancement"
            ],
            "usePreview": 1,
            "username": "cornusammonis",
            "viewed": 2376
        },
        "renderpass": [
            {
                "code": "/*\n\tThe final pass computes the contrast-enhanced image using:\n\t\n\t- the Gaussian blurred source image in Buffer A\n\t- the Gaussian blurred variance of the source image in Buffer B\n\t- the source image converted to HSP colorspace in Buffer D\n\n\t...and then converts the result back to RGB colorspace.\n\t\n*/\n\n/* \n\tuncomment to enhance contrast in the Saturation channel\n\tas well as the Perceived Brightness channel\n*/\n#define USE_SATURATION\n\n/* \n\tuncomment to prevent blowout using soft clamping.\n    This will also lower the contrast of the image \n    when contrast enhancement is set to a low value.\n*/\n#define SOFT_CLAMP\n\n#define  Pr  .299\n#define  Pg  .587\n#define  Pb  .114\n\n//  public domain function by Darel Rex Finley, 2006\n//\n//  This function expects the passed-in values to be on a scale\n//  of 0 to 1, and uses that same scale for the return values.\n//\n//  Note that some combinations of HSP, even if in the scale\n//  0-1, may return RGB values that exceed a value of 1.  For\n//  example, if you pass in the HSP color 0,1,1, the result\n//  will be the RGB color 2.037,0,0.\n//\n//  See description/examples at alienryderflex.com/hsp.html\n\nvec3 HSPtoRGB(in vec3 HSP) {\n    \n  \tfloat H = HSP.x;\n    float S = HSP.y;\n    float P = HSP.z;\n    float R, G, B;\n\n  \tfloat part, minOverMax=1.-S;\n\n    if (minOverMax>0.) {\n        if      ( H<1./6.) {   //  R>G>B\n            H= 6.*( H-0./6.); part=1.+H*(1./minOverMax-1.);\n            B=P/sqrt(Pr/minOverMax/minOverMax+Pg*part*part+Pb);\n            R=B/minOverMax; G=B+H*(R-B); }\n        else if ( H<2./6.) {   //  G>R>B\n            H= 6.*(-H+2./6.); part=1.+H*(1./minOverMax-1.);\n            B=P/sqrt(Pg/minOverMax/minOverMax+Pr*part*part+Pb);\n            G=B/minOverMax; R=B+H*(G-B); }\n        else if ( H<3./6.) {   //  G>B>R\n            H= 6.*( H-2./6.); part=1.+H*(1./minOverMax-1.);\n            R=P/sqrt(Pg/minOverMax/minOverMax+Pb*part*part+Pr);\n            G=R/minOverMax; B=R+H*(G-R); }\n        else if ( H<4./6.) {   //  B>G>R\n            H= 6.*(-H+4./6.); part=1.+H*(1./minOverMax-1.);\n            R=P/sqrt(Pb/minOverMax/minOverMax+Pg*part*part+Pr);\n            B=R/minOverMax; G=R+H*(B-R); }\n        else if ( H<5./6.) {   //  B>R>G\n            H= 6.*( H-4./6.); part=1.+H*(1./minOverMax-1.);\n            G=P/sqrt(Pb/minOverMax/minOverMax+Pr*part*part+Pg);\n            B=G/minOverMax; R=G+H*(B-G); }\n        else               {   //  R>B>G\n            H= 6.*(-H+6./6.); part=1.+H*(1./minOverMax-1.);\n            G=P/sqrt(Pr/minOverMax/minOverMax+Pb*part*part+Pg);\n            R=G/minOverMax; B=G+H*(R-G); }}\n    else {\n        if      ( H<1./6.) {   //  R>G>B\n            H= 6.*( H-0./6.); R=sqrt(P*P/(Pr+Pg*H*H)); G=R*H; B=0.; }\n        else if ( H<2./6.) {   //  G>R>B\n            H= 6.*(-H+2./6.); G=sqrt(P*P/(Pg+Pr*H*H)); R=G*H; B=0.; }\n        else if ( H<3./6.) {   //  G>B>R\n            H= 6.*( H-2./6.); G=sqrt(P*P/(Pg+Pb*H*H)); B=G*H; R=0.; }\n        else if ( H<4./6.) {   //  B>G>R\n            H= 6.*(-H+4./6.); B=sqrt(P*P/(Pb+Pg*H*H)); G=B*H; R=0.; }\n        else if ( H<5./6.) {   //  B>R>G\n            H= 6.*( H-4./6.); B=sqrt(P*P/(Pb+Pr*H*H)); R=B*H; G=0.; }\n        else               {   //  R>B>G\n            H= 6.*(-H+6./6.); R=sqrt(P*P/(Pr+Pb*H*H)); B=R*H; G=0.; }\n    }\n    \n  \treturn vec3(R,G,B);\n}\n\nvec4 sigmoid(vec4 x) {\n    return 1.0 / (1.0 + exp(-4.0*(x-0.5)));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    bool ypass = mod(float(iFrame), 2.0) >= 1.0;\n    if (ypass) {\n        \n        #ifdef USE_SATURATION\n            vec2 stdev = sqrt(texture(iChannel1, uv).yz);\n            vec2 mean = texture(iChannel0, uv).yz;\n            vec3 src = texture(iChannel2, uv).xyz;\n\n            float mixF = 0.5 * sin(iTime) + 0.5;\n\n            src.yz = src.yz + 0.25 * mixF * (src.yz - mean) / stdev;\n        #else\n        \tfloat stdev = sqrt(texture(iChannel1, uv).z);\n            float mean = texture(iChannel0, uv).z;\n            vec3 src = texture(iChannel2, uv).xyz;\n\n            float mixF = 0.5 * sin(iTime) + 0.5;\n\n            src.z = src.z + 0.25 * mixF * (src.z - mean) / stdev;\n        #endif\n        \n        #ifdef SOFT_CLAMP\n        \tfragColor = sigmoid(vec4(HSPtoRGB(src), 1.0));\n        #else\n        \tfragColor = vec4(HSPtoRGB(src), 1.0);\n        #endif\n            \n\t\t\n    } else {\n        discard;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n\tStandard 2-pass gaussian blur\n*/\n\n#define GX texture(iChannel1, uv + i * step)\n#define GY texture(iChannel0, uv + i * step)\n\n#define STDEV 12.0\n#define RADIUS 24.0\n\nfloat gaussian(float x) {\n    return exp(-x*x/(STDEV*STDEV));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 ix = vec2(1.0 / iResolution.x, 0.0);\n    vec2 iy = vec2(0.0, 1.0 / iResolution.y);\n    \n    bool xpass = mod(float(iFrame), 2.0) < 1.0;\n    vec2 step = xpass ? ix : iy;\n    \n    vec4 sum = vec4(0.0);\n    vec4 denom = vec4(0.0);\n    \n    #define ZERO vec4(0.0)\n    \n    for (float i = -RADIUS; i <= RADIUS; i += 1.0) {\n        float g = gaussian(i);\n        sum += g * (xpass ? GX : GY);\n        denom += g;\n    }\n    \n    fragColor = sum / denom;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\n\t2-pass Gaussian blur of the source image variance.\n*/\n\n#define GX texture(iChannel1, uv + i * step)\n#define GY texture(iChannel0, uv + i * step)\n#define I0 texture(iChannel2, uv + i * step)\n\n#define STDEV 12.0\n#define RADIUS 24.0\n\nfloat gaussian(float x) {\n    return exp(-x*x/(STDEV*STDEV));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 ix = vec2(1.0 / iResolution.x, 0.0);\n    vec2 iy = vec2(0.0, 1.0 / iResolution.y);\n    \n    bool xpass = mod(float(iFrame), 2.0) < 1.0;\n    vec2 step = xpass ? ix : iy;\n    \n    vec4 sum = vec4(0.0);\n    vec4 denom = vec4(0.0);\n    \n    for (float i = -RADIUS; i <= RADIUS; i += 1.0) {\n        float g = gaussian(i);\n        if (xpass) {\n            vec4 diff = I0 - GX;\n        \tsum += g * diff * diff;\n        \tdenom += g;\n        } else {\n        \tsum += g * GY;\n            denom += g;\n        }\n    }\n\n    sum /= denom;\n    \n    fragColor = sum;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\n\tSince we do both blur passes in the same buffer, we\n\tcapture the final blur pass output here every other\n\tframe, so we don't compute variance against the blur\n\tbuffer when only the x-pass is complete\n*/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    bool ypass = mod(float(iFrame), 2.0) >= 1.0;\n    if (ypass) {\n\t\tfragColor = texture(iChannel0, uv);\n    } else {\n        discard;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This is IQ's \"Elevated\" shader converted to HSP colorspace.\n// see: https://www.shadertoy.com/view/MdX3Rr\n\n\n#define  Pr  .299\n#define  Pg  .587\n#define  Pb  .114\n\n//  public domain function by Darel Rex Finley, 2006\n//\n//  This function expects the passed-in values to be on a scale\n//  of 0 to 1, and uses that same scale for the return values.\n//\n//  See description/examples at alienryderflex.com/hsp.html\n\nvec3 RGBtoHSP(in vec3 RGB) {\n\n\tfloat R = RGB.r;\n    float G = RGB.g;\n    float B = RGB.b;\n    float H, S, P;\n    //  Calculate the Perceived brightness.\n    P=sqrt(R*R*Pr+G*G*Pg+B*B*Pb);\n\n    //  Calculate the Hue and Saturation.  (This part works\n    //  the same way as in the HSV/B and HSL systems???.)\n    if (R==G && R==B) {\n        H=0.; S=0.; \n    } else if (R>=G && R>=B) {   \t//  R is largest\n    \tif (B>=G) {\n        \tH=1. - 1./6. * (B-G) / (R-G); S=1.-G/R; \n        } else {\n        \tH=0. + 1./6. * (G-B) / (R-B); S=1.-B/R; \n        }\n    } else if (G>=R && G>=B) {   \t//  G is largest\n        if (R>=B) {\n            H=1./3. - 1./6. * (R-B) / (G-B); S=1.-B/G; \n        } else {\n            H=1./3. + 1./6. * (B-R) / (G-R); S=1.-R/G; \n        }\n    } else {   \t\t\t\t\t\t//  B is largest\n        if (G>=R) {\n            H=2./3. - 1./6. * (G-R) / (B-R); S=1.-R/B; \n        } else {\n            H=2./3. + 1./6. * (R-G) / (B-G); S=1.-G/B; \n        }\n    }\n    \n    return vec3(H,S,P);\n}\n\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define SC (250.0)\n\n// value noise, and its analytical derivatives\nvec3 noised( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    vec2 u = f*f*(3.0-2.0*f);\n\tfloat a = textureLod(iChannel0,(p+vec2(0.5,0.5))/256.0,-100.0).x;\n\tfloat b = textureLod(iChannel0,(p+vec2(1.5,0.5))/256.0,-100.0).x;\n\tfloat c = textureLod(iChannel0,(p+vec2(0.5,1.5))/256.0,-100.0).x;\n\tfloat d = textureLod(iChannel0,(p+vec2(1.5,1.5))/256.0,-100.0).x;\n\treturn vec3(a+(b-a)*u.x+(c-a)*u.y+(a-b-c+d)*u.x*u.y,\n\t\t\t\t6.0*f*(1.0-f)*(vec2(b-a,c-a)+(a-b-c+d)*u.yx));\n}\n\nconst mat2 m2 = mat2(0.8,-0.6,0.6,0.8);\n\nfloat detailH( in vec2 x )\n{\n    float d = 0.0;//50.0*texture( iChannel2, x*0.03/SC, 0.0 ).x;\n    return d + 0.5*textureLod( iChannel2, x*2.0/SC, 0.0 ).x;\n}\n\nfloat detailM( in vec2 x )\n{\n    float d = 0.0;//50.0*texture( iChannel2, x*0.03/SC, 0.0 ).x;\n    return d;\n}\n\nfloat terrainH( in vec2 x )\n{\n\tvec2  p = x*0.003/SC;\n    float a = 0.0;\n    float b = 1.0;\n\tvec2  d = vec2(0.0);\n    for( int i=0; i<15; i++ )\n    {\n        vec3 n = noised(p);\n        d += n.yz;\n        a += b*n.x/(1.0+dot(d,d));\n\t\tb *= 0.5;\n        p = m2*p*2.0;\n    }\n\n    float de = detailH(x);\n\treturn SC*100.0*a - de;\n}\n\nfloat terrainM( in vec2 x )\n{\n\tvec2  p = x*0.003/SC;\n    float a = 0.0;\n    float b = 1.0;\n\tvec2  d = vec2(0.0);\n    for( int i=0; i<9; i++ )\n    {\n        vec3 n = noised(p);\n        d += n.yz;\n        a += b*n.x/(1.0+dot(d,d));\n\t\tb *= 0.5;\n        p = m2*p*2.0;\n    }\n\treturn SC*100.0*a - detailH(x);\n}\n\nfloat terrainL( in vec2 x )\n{\n\tvec2  p = x*0.003/SC;\n    float a = 0.0;\n    float b = 1.0;\n\tvec2  d = vec2(0.0);\n    for( int i=0; i<7; i++ )\n    {\n        vec3 n = noised(p);\n        d += n.yz;\n        a += b*n.x/(1.0+dot(d,d));\n\t\tb *= 0.5;\n        p = m2*p*2.0;\n    }\n\n\treturn SC*100.0*a;\n}\n\nfloat interesct( in vec3 ro, in vec3 rd, in float tmin, in float tmax )\n{\n    float t = tmin;\n\tfor( int i=0; i<256; i++ )\n\t{\n        vec3 pos = ro + t*rd;\n\t\tfloat h = pos.y - terrainM( pos.xz );\n\t\tif( h<(0.002*t) || t>tmax ) break;\n\t\tt += 0.5*h;\n\t}\n\n\treturn t;\n}\n\nfloat softShadow(in vec3 ro, in vec3 rd )\n{\n    // real shadows\t\n    float res = 1.0;\n    float t = 0.001;\n\tfor( int i=0; i<80; i++ )\n\t{\n\t    vec3  p = ro + t*rd;\n        float h = p.y - terrainM( p.xz );\n\t\tres = min( res, 16.0*h/t );\n\t\tt += h;\n\t\tif( res<0.001 ||p.y>(SC*200.0) ) break;\n\t}\n\treturn clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos, float t )\n{\n    vec2  eps = vec2( 0.002*t, 0.0 );\n    return normalize( vec3( terrainH(pos.xz-eps.xy) - terrainH(pos.xz+eps.xy),\n                            2.0*eps.x,\n                            terrainH(pos.xz-eps.yx) - terrainH(pos.xz+eps.yx) ) );\n}\n\nvec3 camPath( float time )\n{\n\treturn SC*1100.0*vec3( cos(0.0+0.23*time), 0.0, cos(1.5+0.21*time) );\n}\n\t\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n    f += 0.5000*texture( iChannel0, p/256.0 ).x; p = m2*p*2.02;\n    f += 0.2500*texture( iChannel0, p/256.0 ).x; p = m2*p*2.03;\n    f += 0.1250*texture( iChannel0, p/256.0 ).x; p = m2*p*2.01;\n    f += 0.0625*texture( iChannel0, p/256.0 ).x;\n    return f/0.9375;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, in float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{\n    vec3 light1 = normalize( vec3(-0.8,0.4,-0.3) );\n    // bounding plane\n    float tmin = 1.0;\n    float tmax = 1000.0*SC;\n#if 1\n    float maxh = 300.0*SC;\n    float tp = (maxh-ro.y)/rd.y;\n    if( tp>0.0 )\n    {\n        if( ro.y>maxh ) tmin = max( tmin, tp );\n        else            tmax = min( tmax, tp );\n    }\n#endif\n\tfloat sundot = clamp(dot(rd,light1),0.0,1.0);\n\tvec3 col;\n    float t = interesct( ro, rd, tmin, tmax );\n    if( t>tmax)\n    {\n        // sky\t\t\n\t\tcol = vec3(0.3,.55,0.8)*(1.0-0.8*rd.y)*0.9;\n        // sun\n\t\tcol += 0.25*vec3(1.0,0.7,0.4)*pow( sundot,5.0 );\n\t\tcol += 0.25*vec3(1.0,0.8,0.6)*pow( sundot,64.0 );\n\t\tcol += 0.2*vec3(1.0,0.8,0.6)*pow( sundot,512.0 );\n        // clouds\n\t\tvec2 sc = ro.xz + rd.xz*(SC*1000.0-ro.y)/rd.y;\n\t\tcol = mix( col, vec3(1.0,0.95,1.0), 0.5*smoothstep(0.5,0.8,fbm(0.0005*sc/SC)) );\n        // horizon\n        col = mix( col, vec3(0.7,0.75,0.8), pow( 1.0-max(rd.y,0.0), 8.0 ) );\n\t}\n\telse\n\t{\n        // mountains\t\t\n\t\tvec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos, t );\n        //nor = normalize( nor + 0.5*( vec3(-1.0,0.0,-1.0) + vec3(2.0,1.0,2.0)*texture(iChannel1,0.01*pos.xz).xyz) );\n        vec3 ref = reflect( rd, nor );\n        float fre = clamp( 1.0+dot(rd,nor), 0.0, 1.0 );\n        \n        // rock\n\t\tfloat r = texture( iChannel0, (7.0/SC)*pos.xz/256.0 ).x;\n        col = (r*0.25+0.75)*0.9*mix( vec3(0.08,0.05,0.03), vec3(0.10,0.09,0.08), \n                                     texture(iChannel0,0.00007*vec2(pos.x,pos.y*48.0)/SC).x );\n\t\tcol = mix( col, 0.20*vec3(0.45,.30,0.15)*(0.50+0.50*r),smoothstep(0.70,0.9,nor.y) );\n        col = mix( col, 0.15*vec3(0.30,.30,0.10)*(0.25+0.75*r),smoothstep(0.95,1.0,nor.y) );\n\n\t\t// snow\n\t\tfloat h = smoothstep(55.0,80.0,pos.y/SC + 25.0*fbm(0.01*pos.xz/SC) );\n        float e = smoothstep(1.0-0.5*h,1.0-0.1*h,nor.y);\n        float o = 0.3 + 0.7*smoothstep(0.0,0.1,nor.x+h*h);\n        float s = h*e*o;\n        col = mix( col, 0.29*vec3(0.62,0.65,0.7), smoothstep( 0.1, 0.9, s ) );\n\t\t\n         // lighting\t\t\n        float amb = clamp(0.5+0.5*nor.y,0.0,1.0);\n\t\tfloat dif = clamp( dot( light1, nor ), 0.0, 1.0 );\n\t\tfloat bac = clamp( 0.2 + 0.8*dot( normalize( vec3(-light1.x, 0.0, light1.z ) ), nor ), 0.0, 1.0 );\n\t\tfloat sh = 1.0; if( dif>=0.0001 ) sh = softShadow(pos+light1*20.0,light1);\n\t\t\n\t\tvec3 lin  = vec3(0.0);\n\t\tlin += dif*vec3(7.00,5.00,3.00)*vec3( sh, sh*sh*0.5+0.5*sh, sh*sh*0.8+0.2*sh );\n\t\tlin += amb*vec3(0.40,0.60,0.80)*1.2;\n        lin += bac*vec3(0.40,0.50,0.60);\n\t\tcol *= lin;\n        \n        col += s*0.1*pow(fre,4.0)*vec3(7.0,5.0,3.0)*sh * pow( clamp(dot(light1,ref), 0.0, 1.0),16.0);\n        col += s*0.1*pow(fre,4.0)*vec3(0.4,0.5,0.6)*smoothstep(0.0,0.6,ref.y);\n\n\t\t// fog\n        //float fo = 1.0-exp(-0.000004*t*t/(SC*SC) );\n        float fo = 1.0-exp(-0.001*t/SC );\n        vec3 fco = 0.7*vec3(0.5,0.7,0.9) + 0.1*vec3(1.0,0.8,0.5)*pow( sundot, 4.0 );\n\t\tcol = mix( col, fco, fo );\n\n        // sun scatter\n\t\tcol += 0.3*vec3(1.0,0.8,0.4)*pow( sundot, 8.0 )*(1.0-exp(-0.002*t/SC));\n\t}\n\n    // gamma\n\tcol = pow(col,vec3(0.4545));\n\t\n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = -1.0 + 2.0*fragCoord.xy/iResolution.xy;\n\tvec2 s = xy*vec2(iResolution.x/iResolution.y,1.0);\n\n    float time = iTime*0.05 + 522.8 + 4.0*iMouse.x/iResolution.x;\n\n    // camera position\n\tvec3 ro = camPath( time );\n\tvec3 ta = camPath( time + 1.0 );\n\tro.y = terrainL( ro.xz ) + 11.0*SC;\n\tta.y = ro.y - 20.0*SC;\n\tfloat cr = 0.2*cos(0.1*time);\n    \n//ro = vec3(0.0,0.0,0.0); ro += camPath(20.0 ); ro.y += terrainM( ro.xz ) + 4.0; cr = 0.0; ta = ro + vec3(0.0,0.0,-1.0);    \n    \n    // camera2world transform    \n    mat3 cam = setCamera( ro, ta, cr );\n\n    // camera ray    \n\tvec3 rd = cam * normalize(vec3(s.xy,2.0));\n\n    vec3 col = render( ro, rd );\n    \n    // vignetting\t\n\tcol *= 0.5 + 0.5*pow( (xy.x+1.0)*(xy.y+1.0)*(xy.x-1.0)*(xy.y-1.0), 0.1 );\n\t\n    bool ypass = mod(float(iFrame), 2.0) >= 1.0;\n    \n    if (ypass) {\n    \tfragColor = vec4( RGBtoHSP(col), 1.0 );\n    } else {\n        discard;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}