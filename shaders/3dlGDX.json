{
    "Shader": {
        "info": {
            "date": "1547737370",
            "description": "A simple ray marcher",
            "flags": 0,
            "hasliked": 0,
            "id": "3dlGDX",
            "likes": 1,
            "name": "Bela's Ray Marcher",
            "published": 3,
            "tags": [
                "raymarching",
                "ray",
                "marching",
                "raymarcher",
                "raymarcher",
                "marcher",
                "raymarcing"
            ],
            "usePreview": 0,
            "username": "bela333",
            "viewed": 329
        },
        "renderpass": [
            {
                "code": "//TODO: Refine\n#define PI 3.14159265359\n#define MAX_STEPS 255.0\n#define MAX_DISTANCE 100.0\n#define EPSYLON 0.0002\n#define SKY_COLOR vec4(135., 206., 235., 255.)/255.\n\nfloat sphereSDF(vec3 p, vec3 center, float radius){ \n\treturn length(p-center)-radius;\n}\n\nfloat planeSDF(vec3 p, float yPos){\n\treturn abs(p.y-yPos)-EPSYLON;\n}\n\nfloat cube2SDF(vec3 p, float size){\n\treturn length(max(min(p, size),-size)-p);\n}\n\nfloat cubeSDF(vec3 p, vec3 center, float size){\n\treturn cube2SDF(p-center, size);\n}\n\nfloat coneSDF(vec3 p, vec3 top, float height, float radius){ \n\tvec3 bottom = top - vec3(0., height, 0.);\n    vec3 talp = p-bottom;\n    talp.y = 0.;\n    talp = normalize(talp)*radius;\n    talp.y -= height;\n    vec3 pInObjectSpace = p-top;\n    float cosine = dot(normalize(pInObjectSpace), normalize(talp));\n    float sine = sqrt(1.-cosine*cosine);\n    cosine *= length(pInObjectSpace);\n    sine *= length(pInObjectSpace);\n    if(cosine < 0.) return length(top-p);\n    if(cosine > length(talp)) return length(talp-pInObjectSpace);\n    return sine-0.01;\n}\n\nfloat coneSDF2(vec3 p, vec3 top, float multiplyer){ \n\tfloat dist = p.y-top.y;\n    dist += length(p-top)*multiplyer;\n    return dist;\n}\n\nconst float coner = cos(atan(0.5, 1.0));\n\nfloat spiralApproximation(vec3 p){\n    float p1 = sin(p.z)-p.x;\n    float p2 = cos(p.z)-p.y;\n    float v = p1*p1+p2*p2;\n    vec3 grad = vec3(-p1, -p2, p.y * sin(p.z)-p.x*cos(p.z))*2.;\n    return abs(v)/length(grad);\n}\n\nfloat getSDF(vec3 p){\n    float sphDist = sqrt(0.5)+.5;\n    float sphere = sphereSDF(p, vec3(sin(iTime*2.*PI/3.)*sphDist, 0., cos(iTime*2.*PI/3.)*sphDist+2.), .5);\n    float plane = planeSDF(p, -.5);\n    //float cube = cubeSDF(p, vec3(0.0, 0, 2.0), 0.5)-.1;\n    float spiral = spiralApproximation((p-vec3(0, 0, 2)).xzy*10.)/10.-0.01;\n\treturn min(min(sphere, plane), spiral);\n    \n    \n}\n\nvec3 approximateNormal(vec3 p){\n\tfloat defaultDist = getSDF(p);\n    vec2 sub = vec2(0, EPSYLON);\n\tvec3 normal = defaultDist-vec3(\n    \tgetSDF(p-sub.yxx),\n        getSDF(p-sub.xyx),\n        getSDF(p-sub.xxy)\n    );\n    return normalize(normal);\n}\n\nstruct RayData{\n   float dist;\n   float angle;\n   float recursion;\n};\n\nRayData castRay(vec3 from, vec3 dir){ \n\tfloat allDistance = 0.;\n    float angle = 2.*PI;\n    float i = 0.;\n    for(i = 0.; i < MAX_STEPS; i++){ \n        vec3 p = from + dir*allDistance;\n    \tfloat dist = getSDF(p);\n        float localAngle = atan(dist, allDistance);\n        //float localAngle = atan(allDistance, dist);\n        if(localAngle < angle) angle = localAngle;\n        allDistance += dist;\n        if(allDistance > MAX_DISTANCE || dist < EPSYLON) break;\n    }\n    return RayData(allDistance, angle, i);\n    //return allDistance;\n}\n\nmat3 calcLookAtMatrix(vec3 origin, vec3 target, float roll) {\n  vec3 rr = vec3(sin(roll), cos(roll), 0.0);\n  vec3 ww = normalize(target - origin);\n  vec3 uu = normalize(cross(ww, rr));\n  vec3 vv = normalize(cross(uu, ww));\n\n  return mat3(uu, vv, ww);\n}\n\n\n\nstruct ColorData{\n    vec4 color;\n    vec3 normal;\n    vec3 pos;\n};\n\n    \n    float clampAngle(float angle){\n        angle *= 2.5;\n        return clamp(angle+PI*.5/PI, 0., 1.);\n    }\nconst float blending = .25;\n\n//http://www.martinpalko.com/triplanar-mapping/\nvec4 getVectorColor(vec3 p, vec3 normal){\n    //return vec4(1.0, .5, 0.0, 1.0);\n    vec4 xAxis = texture(iChannel1, p.yz);\n    vec4 yAxis = texture(iChannel1, p.xz);\n    vec4 zAxis = texture(iChannel1, p.xy);\n\tvec3 blend = pow(abs(normal), vec3(blending));\n    blend = blend/(blend.x+blend.y+blend.z);\n    return xAxis*blend.x+yAxis*blend.y+zAxis*blend.z;\n}\n\nColorData getColor(vec3 camera, vec3 dir){ \n    \n    float gamma = .4;\n    vec3 lamp = vec3(2.5, 5., 0.0);\n    \n    float dist = castRay(camera, dir).dist;\n    vec3 p = camera + dir * dist;\n    \n    vec3 normal = approximateNormal(p);\n    \n    \n    //vec4 color = vec4(1.0, .5, 0.0, 1.0);\n    vec4 color = getVectorColor(p, normal);\n    //color.w = 1.0;\n    \n    \n    \n    color *= dot(normal, normalize(lamp-p))*0.5+0.2;\n    //Cast ray from object to Lamp\n    vec3 aboveSurface = p+normal*EPSYLON*2.;\n    /*float lampDist = castRay(aboveSurface, normalize(lamp-aboveSurface)).dist;\n    if (lampDist+EPSYLON < length(lamp-camera)) color *= 0.1;*/\n    RayData lampRay = castRay(aboveSurface, normalize(lamp-aboveSurface));\n    color = color*clampAngle(lampRay.angle);\n    if(dist > MAX_DISTANCE) color = SKY_COLOR*gamma;\n    //if(dist > MAX_DISTANCE) color = vec4(0.);\n    return ColorData(color/gamma, normal, p);\n}\n\n\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec3 cameraPos = vec3(0.0, 0.0, 2.0);\n    vec3 target = vec3(0.0, 0.0, 2.0);\n    //iMouse.zw\n    vec2 mouse = (iMouse.xy/iResolution.xy*2.)-.1;\n    float updown = mouse.y*PI*.25;\n    vec2 plane = vec2(cos(mouse.x*PI), sin(mouse.x*PI))*cos(updown);\n    vec3 movement = vec3(plane.x, sin(updown), plane.y)*2.;\n    cameraPos += movement;\n    //cameraPos *= 2.5;\n    \n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 screenPos = uv*2.0-1.0;\n    \n    \n    vec2 convScreenPos = screenPos;\n    convScreenPos.x *= iResolution.x/iResolution.y;\n    \n    vec3 gridPoint = vec3(convScreenPos, 1.);\n    gridPoint = normalize(gridPoint);\n    gridPoint = calcLookAtMatrix(cameraPos, target, 0.0)*gridPoint;\n    //gridPoint += cameraPos;\n    \n\n    ColorData ray1 = getColor(cameraPos, gridPoint);\n    vec3 rayStart = ray1.pos + ray1.normal*EPSYLON*2.0;\n    vec3 rayDir = reflect(normalize(-cameraPos+rayStart), ray1.normal);\n    ColorData ray2 = getColor(rayStart, rayDir);\n    float fresnelAmount = dot(ray1.pos-cameraPos, ray1.normal)/length(ray1.pos-cameraPos);\n    fragColor = mix(ray1.color, ray2.color, (1.+fresnelAmount)*.5);\n    //fragColor = ray1.color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}