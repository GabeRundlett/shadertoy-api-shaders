{
    "Shader": {
        "info": {
            "date": "1559051636",
            "description": "Threre are 2 SDF techniques:\n1. single channel SDF (ENABLE_PER_AXIS_SDF = 0)\n2. dual channel SDF calculated for separate axises (ENABLE_PER_AXIS_SDF = 1), may work faster for rays that parallel to the walls.",
            "flags": 32,
            "hasliked": 0,
            "id": "tlB3WR",
            "likes": 9,
            "name": "Optimized 2D SDF",
            "published": 3,
            "tags": [
                "2d",
                "sdf"
            ],
            "usePreview": 0,
            "username": "_A_",
            "viewed": 890
        },
        "renderpass": [
            {
                "code": "// draw scene with SDF shadows\n\nvoid mainImage (out float4 fragColor, in float2 fragCoord)\n{\n\tfragColor = float4(0.0);\n\tfragColor.b = texture( iChannel0, fragCoord/iResolution.xy ).r;\n\n\tfloat2\t\tlight_pos\t= SinCos( iTime * 0.25 ) * 0.35 + 0.5;\n\tfloat2\t\timg_scale\t= 1.0 / float2(textureSize( iChannel1, 0 ).xy);\n    float\t\tscale\t\t= Min( img_scale.x, img_scale.y );\n\tconst int\tmax_iter\t= MAX_ITERATIONS;\n\tconst float\tmin_dist\t= 0.00625;\n\tconst float\tmax_dist\t= float(RADIUS);\n\tfloat2\t\torigin\t\t= fragCoord / iResolution.xy;\n\tfloat\t\tt\t\t\t= 0.0;\n\tfloat2\t\tpos\t\t\t= origin;\n\tfloat2\t\tdir\t\t\t= Normalize( light_pos - pos );\n\tfloat2\t\tabs_dir\t\t= Abs( dir );\n\tfloat\t\ttmax\t\t= Max( Length( light_pos - pos ) - 0.0001, 0.001 );\n\tbool2\t\tbdir\t\t= Greater( abs_dir, vec2(0.0001) );\n\n\tint i = 0;\n\tfor (; i < max_iter; ++i)\n\t{\n#\tif ENABLE_PER_AXIS_SDF\n\t\tfloat2\tdd = texture( iChannel1, pos ).rg;\n\t\tdd.x = (bdir.x ? dd.x / abs_dir.x : max_dist);\n\t\tdd.y = (bdir.y ? dd.y / abs_dir.y : max_dist);\n\t\tfloat\td = Min( dd.x, dd.y ) * 0.75;\n#\telse\n\n\t\tfloat\td = texture( iChannel1, pos ).r;\n#\tendif\n\t\t\n\t\tif ( d < min_dist )\n\t\t\tbreak;\n\n\t\tpos += dir * d * scale;\n\t\tt = Length( pos - origin );\n\n\t\tif ( t > tmax )\n\t\t\tbreak;\n\t}\n\n#if VIEW_HEATMAP\n\tfragColor = float4(float(i) / float(max_iter));\n#else\n\tif ( t > tmax )\n\t\tfragColor.r = 0.2 / tmax;\n#endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define ENABLE_PER_AXIS_SDF 1\n#define RADIUS\t\t\t\t32\n#define VIEW_HEATMAP\t\t0\n#define MAX_ITERATIONS \t\t64\n\n#define float2\t\tvec2\n#define float3\t\tvec3\n#define float4\t\tvec4\n#define int2\t\tivec2\n#define bool2\t\tbvec2\n\n#define Abs\t\t\tabs\n#define Dot\t\t\tdot\n#define Distance\tdistance\n#define Greater\t\tgreaterThan\n#define Floor\t\tfloor\n#define Fract\t\tfract\n#define Lerp\t\tmix\n#define Length\t\tlength\n#define Min\t\t\tmin\n#define Max\t\t\tmax\n#define Normalize\tnormalize\n\nfloat2  SinCos (float a)\n{\n    return float2(sin(a), cos(a));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// generate 2D scene\n\n// DHash from https://www.shadertoy.com/view/4djSRW \n// range [0..1]\n\nfloat4 DHashScale_float ()  { return float4( 0.1031, 0.1030, 0.0973, 0.1099 ); }\n\nfloat4 DHash42 (const float2 p)\n{\n\tfloat4 p4 = Fract( float4(p.xyxy) * DHashScale_float() );\n\tp4 += Dot( p4, p4.wzxy + 19.19 );\n\treturn Fract( (p4.xxyz + p4.yzzw) * p4.zywx );\n}\n\n\nfloat SDF_Box (const float3 position, const float3 halfSize)\n{\n\tfloat3  d = Abs( position ) - halfSize;\n\treturn Min( Max( d.x, Max( d.y, d.z ) ), 0.0 ) + Length( Max( d, 0.0 ) );\n}\n\nfloat SDF (const float2 coord)\n{\n\tfloat2\tipart\t= Floor( coord );\n\tfloat2\tfpart\t= Fract( coord );\n\tfloat\tmd\t\t= 2147483647.0;\n\tfloat\tseed\t= 2.76543;\n\n\tfor (int y = -2; y <= 2; ++y)\n\tfor (int x = -2; x <= 2; ++x)\n\t{\n\t\tfloat2\tcur\t\t= float2(x,y);\n\t\tfloat4\th\t\t= DHash42( ipart + cur + seed );\n\t\tfloat2\thsize\t= Lerp( float2(0.2), float2(1.0), h.xy );\n\t\tfloat2\tpos\t\t= h.zw + cur - fpart;\n\t\tfloat\td\t\t= SDF_Box( float3(pos, 0.0), float3(hsize, 1.0) );\n\n\t\tmd = Min( md, d );\n\t}\n\treturn md;\n}\n\nvoid mainImage (out float4 fragColor, in float2 fragCoord)\n{\n\tif ( iFrame > 1 )\n\t\tdiscard;\n\n\tfloat\tscale\t= 8.0 / min(iResolution.x, iResolution.y);\n\tfloat2\tuv\t\t= fragCoord * scale;\n\tfloat\td\t\t= SDF( uv );\n\n\tfragColor = float4( d < 0.0 ? 0.0 : 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// calculate SDF for scene\n\nvoid mainImage (out float4 fragColor, in float2 fragCoord)\n{\n\tif ( iFrame > 1 )\n\t\tdiscard;\n\n\tint2\tcoord\t\t= int2(fragCoord);\n\tfloat2\tdist\t\t= float2(float(RADIUS));\n\tbool\tis_outer\t= texelFetch( iChannel0, coord, 0 ).r < 0.25;\n\n\tfor (int y = -RADIUS; y <= RADIUS; ++y)\n\tfor (int x = -RADIUS; x <= RADIUS; ++x)\n\t{\n\t\tint2\tpos\t\t\t= coord + int2(x,y);\n\t\tbool\tis_outer2\t= texelFetch( iChannel0, pos, 0 ).r < 0.25;\n\t\tfloat\td\t\t\t= Distance( float2(coord), float2(pos) );\n\t\t\n\t\tif ( is_outer != is_outer2 )\n\t\t{\n#\t\tif ENABLE_PER_AXIS_SDF\n\t\t\tfloat2\tnorm\t= Abs(Normalize( float2(pos) - float2(coord) ));\n\t\t\tbool2\tbnorm\t= Greater( norm, float2(0.0001) );\n\n\t\t\tif ( bnorm.x )\tdist.x = Min( dist.x, d / norm.x );\n\t\t\tif ( bnorm.y )\tdist.y = Min( dist.y, d / norm.y );\n#\t\telse\n\t\t\tdist = float2(Min( dist.x, d ));\n#\t\tendif\n\t\t}\n\t}\n\n\tdist -= 0.5;\n\n\tif ( !is_outer )\n\t\tdist = -dist;\n\n\tfragColor = float4(dist.rgrg);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}