{
    "Shader": {
        "info": {
            "date": "1621702201",
            "description": "Remake of another \"Second Reality\" effect from \"Future Crew\".\nInitially I remade this effect for my latest demo (So why not releasing it on ShaderToy too)\nhttps://youtu.be/p8BjSBb0mj4\nUse the mouse the move around.\n",
            "flags": 96,
            "hasliked": 0,
            "id": "ftl3R4",
            "likes": 5,
            "name": "Rising Sword (2nd Reality)",
            "published": 3,
            "tags": [
                "demoscene",
                "demo",
                "demoeffect",
                "sword",
                "first",
                "second",
                "reality",
                "secondreality",
                "future",
                "reproduction",
                "rising",
                "crew"
            ],
            "usePreview": 0,
            "username": "xjorma",
            "viewed": 631
        },
        "renderpass": [
            {
                "code": "// Rising Sword by David \"Xjorma\" Gallardo 2021\n\n#if HW_PERFORMANCE==0\n#else\n#define AA\n#endif\n\n#define GAMMA 0\n\n#define MAXDIST 100.0\n\nfloat sphIntersect(in vec3 ro, in vec3 rd, in vec3 ce, float ra)\n{\n    vec3 oc = ro - ce;\n    float b = dot(oc, rd);\n    float c = dot(oc, oc) - ra * ra;\n    float h = b * b - c;\n    if (h < 0.0) return MAXDIST; // no intersection\n    h = sqrt(h);\n    float t = -b - h;\n    if(t > 0.0)\n        return -b - h;\n    else\n        return MAXDIST;\n}\n\nfloat floorIntersect(in vec3 ro, in vec3 rd)\n{\n    if (rd.y < -0.01)\n    {\n        return ro.y / -rd.y;\n    }\n    return MAXDIST;\n}\n\nvec2 pR(in vec2 p, float a)\n{\n    return cos(a) * p + sin(a) * vec2(p.y, -p.x);\n}\n\nvec3 GetPixel(in vec2 uv, out float alpha)\n{\n    vec4 col = texelFetch(iChannel0, ivec2(uv), 0);\n    alpha = col.a;\n    return col.rgb;\n}\n\nfloat SwordIntersect(in vec3 ro, in vec3 rd, float iTime, out vec3 color)\n{\n    float t = ro.z / -rd.z;\n    vec3 pos = ro + t * rd;\n    vec2 uv = pos.xy;\n    uv = pR(uv, radians(- 70.0)) * 0.25;\n    uv.y *= 8.0;\n    uv += vec2(0.5, 0.5);\n    uv.x += mod(iTime, 40.f) / 25.0 - 0.47;\n    float alpha;\n    color = GetPixel(uv*vec2(400,35), alpha);\n    if (t > 0.0 && alpha > 0.5)\n        return t;\n    else \n        return MAXDIST;\n}\n\n\nvec2 minVec(vec2 v0, vec2 v1)\n{\n    if (v0.x < v1.x)\n    {\n        return v0;\n    }\n    else\n    {\n        return v1;\n    }\n}\n\n// Contributed by @Cubeleo\nvec4 getSkyColor(vec3 ro, vec3 rd)\n{\n    vec3 blue = smoothstep(.2, 1., rd.y) * vec3(0, 0, .5);\n    float nDotL = clamp(dot(rd, normalize(vec3(-1, 1, 0))), 0., 1.);\n    vec3 highlight = vec3(pow(nDotL, 100.) * 2.0);\n    return vec4(blue + highlight, 1);\n}\n\n\n#define GEN_RENDER(NAME,RECUR) \t\\\nvec4 NAME(in vec3 ro, in vec3 rd) \\\n{ \\\n    const vec3 sphCenter0 = vec3(0.5, 0.20, 0.5); \\\n    const vec3 sphCenter1 = vec3(0.5, 0.20, -0.5); \\\n    vec2 sph0 = vec2(sphIntersect(ro, rd, sphCenter0, 0.45), 0); \\\n    vec2 sph1 = vec2(sphIntersect(ro, rd, sphCenter1, 0.45), 1); \\\n    vec2 plane = vec2(floorIntersect(ro, rd), 2); \\\n    vec3 swordCol; \\\n    vec2 swordInter = vec2(SwordIntersect(ro, rd, iTime, swordCol), 3); \\\n    vec2 t = minVec(minVec(minVec(sph0, sph1), plane), swordInter); \\\n    vec3 position = ro + t.x * rd; \\\n    if (t.x < MAXDIST && position.y > -0.01 && max(abs(position.x), abs(position.z)) < 2.7) \\\n    { \\\n        vec3 normal; \\\n        if (t.y > 2.5) \\\n        { \\\n            return vec4(swordCol, 1); \\\n        } \\\n        if (t.y < 0.5) \\\n        { \\\n            normal = normalize(position - sphCenter0); \\\n        } \\\n        else if (t.y < 1.5) \\\n        { \\\n            normal = normalize(position - sphCenter1); \\\n        } \\\n        else \\\n        { \\\n            float d = length(position.xz); \\\n            vec2 dir = position.xz / d; \\\n            float s = sin(d * 15.0 - iTime * 2.0); \\\n            normal = normalize(vec3(s * dir.x, 15.0, s * dir.y)); \\\n        } \\\n        vec3 nrd = reflect(rd, normal); \\\n        vec4 color = RECUR(position, nrd); \\\n        return vec4(color.xyz, 1); \\\n    } \\\n    else \\\n    { \\\n        return getSkyColor(ro, rd); \\\n    } \\\n} \n\nGEN_RENDER(render3, getSkyColor)\nGEN_RENDER(render2, render3)\nGEN_RENDER(render1, render2)\nGEN_RENDER(render , render1)\n\nmat3 setCamera( in vec3 ro, in vec3 ta )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 up = vec3(0, 1, 0);\n\tvec3 cu = normalize( cross(cw,up) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n\nvec3 vignette(vec3 color, vec2 q, float v)\n{\n    color *= 0.3 + 0.8 * pow(16.0 * q.x * q.y * (1.0 - q.x) * (1.0 - q.y), v);\n    return color;\n}\n\nvec3 desaturate(in vec3 c, in float a)\n{\n    float l = dot(c, vec3(1. / 3.));\n    return mix(c, vec3(l), a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 tot = vec3(0.0);   \n#ifdef AA\n\tvec2 rook[4];\n    rook[0] = vec2( 1./8., 3./8.);\n    rook[1] = vec2( 3./8.,-1./8.);\n    rook[2] = vec2(-1./8.,-3./8.);\n    rook[3] = vec2(-3./8., 1./8.);\n    for( int n=0; n<4; ++n )\n    {\n        // pixel coordinates\n        vec2 o = rook[n];\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else //AA\n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif //AA\n \n        // camera\n        \n        float theta\t= radians(-45.0) + radians(360.0) * (iMouse.x/iResolution.x-0.5);\n        float phi\t= radians(45.0) + radians(45.0) * (iMouse.y/iResolution.y-0.5);\n        vec3 ro = 1.5 * vec3( sin(phi)*cos(theta),cos(phi),sin(phi)*sin(theta));\n        vec3 ta = vec3( 0 );\n        // camera-to-world transformation\n        mat3 ca = setCamera( ro, ta );\n        //vec3 cd = ca[2];    \n        \n        vec3 rd =  ca*normalize(vec3(p,1.5));        \n        \n        vec3 col = render(ro, rd).xyz;\n      \ttot += col;\n            \n#ifdef AA\n    }\n    tot /= 4.;\n#endif\n    \n    tot = desaturate(tot, -0.4);\n    tot = vignette(tot, fragCoord / iResolution.xy, 1.2);\n    #if GAMMA\n    \ttot = pow(tot, vec3(1. / 2.2));\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 27194,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/hexen-1/second-reality-future-crew"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const vec2 size = vec2(400, 35);\n\nconst uint palette[256] = uint[](\n        0U, 6513599U, 4934559U, 7566287U, 2302859U, 2829195U, 10461135U, 3355543U,\n        2302843U, 3881867U, 12040175U, 9934791U, 7566279U, 1250179U, 4408215U, 11513831U,\n        12040167U, 9145279U, 8092583U, 7566239U, 11513823U, 1776515U, 3355523U, 6513591U,\n        3355531U, 6513615U, 7039895U, 4934515U, 5460927U, 6513559U, 10987487U, 6513547U,\n        8092599U, 4934551U, 10987479U, 2302851U, 1250171U, 13092855U, 4408171U, 14145535U,\n        11513847U, 2302871U, 5987203U, 9934815U, 151U, 1776507U, 8092615U, 2302835U,\n        9145303U, 4408203U, 5460867U, 5460859U, 5460903U, 10461159U, 3881827U, 723835U,\n        3355551U, 10987503U, 8618959U, 9934799U, 7039927U, 6513583U, 1250163U, 12566519U,\n        7566271U, 1776499U, 12040183U, 11513839U, 10461151U, 7566255U, 3355483U, 9145295U,\n        3355515U, 5460895U, 2829179U, 5460887U, 9934807U, 723811U, 13619199U, 723827U,\n        3881859U, 4408179U, 1776491U, 6513567U, 2302771U, 1250155U, 2302795U, 5460875U,\n        10987495U, 4934531U, 8618951U, 4408195U, 9145287U, 7566263U, 8092607U, 2302827U,\n        3355507U, 9934823U, 8618943U, 6513575U, 13092863U, 7039919U, 2829171U, 4934523U,\n        5987231U, 2302803U, 3355491U, 2302819U, 3881851U, 1776483U, 10987511U, 723819U,\n        1250147U, 12566527U, 4408187U, 10461143U, 3355499U, 5987223U, 2302811U, 4934539U,\n        8092631U, 2829163U, 1776475U, 4934575U, 7039911U, 12040191U, 139U, 3881843U,\n        9145319U, 1776435U, 8618935U, 1776467U, 1251119U, 2829155U, 11513855U, 5987211U,\n        1250139U, 3881835U, 1776451U, 7039951U, 723803U, 2829147U, 4408231U, 10461167U,\n        131U, 1776523U, 1776443U, 1250131U, 1776459U, 3881887U, 2829139U, 99U,\n        123U, 8618975U, 83U, 723795U, 51U, 115U, 75U, 2829131U,\n        5987255U, 723787U, 67U, 43U, 107U, 1250123U, 1250075U, 723723U,\n        19U, 35U, 2829207U, 723779U, 723739U, 1250091U, 723755U, 91U,\n        11U, 723771U, 1250115U, 723731U, 1250083U, 0U, 59U, 1250107U,\n        723763U, 27U, 1250099U, 723747U, 1250199U, 723843U, 159U, 14671871U,\n        16777131U, 16513939U, 16511867U, 16509799U, 16245587U, 16242491U, 15713071U, 15184675U,\n        14656279U, 14127887U, 13598471U, 12807943U, 11755271U, 10964736U, 10175232U, 9385728U,\n        8596224U, 7807744U, 7018240U, 6229760U, 5442304U, 4654848U, 3866624U, 3080192U,\n        4132623U, 4662051U, 5190451U, 5456707U, 5984079U, 6774627U, 7301999U, 8091519U,\n        8617871U, 9146271U, 9674671U, 10464183U, 11253699U, 12044239U, 12571611U, 13361127U,\n        12582847U, 10742691U, 9427855U, 7850871U, 6535011U, 5482323U, 4429635U, 3376947U,\n        2585383U, 1794843U, 1266451U, 5709568U, 7025431U, 7551775U, 8341287U, 8868655U,\n        9396027U, 10185539U, 10711887U, 11240283U, 12029799U, 12557171U, 13084547U, 13875091U\n);\n\nconst uint image[3500] = uint[](\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 240U, 4025548800U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 61163U, 3958370560U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 15723241U, 3975016177U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 14352384U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 4025215209U, 3958172653U, 4043309056U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 14352384U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 14145280U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 4060086272U, 4076863488U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 239U, 3957909737U, 3975015661U, 4025548800U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 14079959U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 15921907U, 4076863488U, 0U,\n        0U, 0U, 0U, 0U, 62208U, 0U, 0U, 0U, 0U, 61418U, 3907578090U, 3958304751U, 4008702208U, 0U, 0U, 0U,\n        0U, 0U, 0U, 219U, 223U, 0U, 0U, 0U, 219U, 0U, 55552U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 55040U, 0U, 0U, 0U, 215U, 3621246720U, 14090455U, 3590379008U, 3607101440U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 62195U, 4092788736U, 0U, 0U, 0U, 0U, 0U, 15987456U, 0U, 0U, 0U, 0U, 61420U, 3941264364U, 3991924977U,\n        4059165184U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 3688562688U, 0U, 14352384U, 3674210304U, 14352384U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 55255U, 3607101440U, 0U, 0U, 3607156480U, 55040U,\n        3621191680U, 3590324438U, 14090240U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 16053235U, 15987456U, 0U, 0U, 0U, 0U, 0U, 4092788736U, 0U, 0U, 0U,\n        0U, 239U, 3958107373U, 3975016433U, 4059168768U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 14671616U, 0U, 0U,\n        14352384U, 0U, 14352384U, 217U, 0U, 3640655872U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 14145280U, 0U, 0U, 0U, 14079959U, 3590379479U, 3621246934U, 3621246934U,\n        0U, 0U, 14145238U, 3604349143U, 3621246679U, 214U, 3587626967U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 4109697024U, 4110417920U, 0U, 0U, 0U, 0U, 62451U,\n        4109693939U, 4076863488U, 243U, 15925248U, 0U, 0U, 4025282030U, 3991727599U, 4060086515U, 4126405619U, 242U, 0U, 0U, 0U, 56064U, 56064U,\n        0U, 3638231040U, 0U, 0U, 15064320U, 0U, 0U, 0U, 0U, 0U, 55769U, 0U, 55552U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 14145495U, 0U, 0U, 0U,\n        14145495U, 3604348928U, 55255U, 3604403927U, 3590324224U, 14079959U, 3604403925U, 3587560917U, 3587560917U, 3587561173U, 55255U, 3621191680U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 15987699U, 62451U, 0U, 0U, 0U, 0U, 0U, 4109697024U, 243U, 0U,\n        0U, 0U, 0U, 4092982515U, 243U, 4076863488U, 243U, 4092788736U, 0U, 0U, 15000803U, 3856851425U, 62453U, 4076863731U, 4076925682U, 0U,\n        0U, 3640656089U, 3671710940U, 0U, 14155776U, 56064U, 15007744U, 56797U, 0U, 0U, 0U, 221U, 0U, 55769U, 55552U, 0U,\n        55552U, 0U, 0U, 3623878656U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        14145280U, 14145495U, 0U, 215U, 3621246679U, 14145494U, 3607156695U, 3621246934U, 3621246678U, 3590379222U, 3587560403U, 3520188880U, 3553743825U, 3553874901U, 3604337920U, 3621181399U,\n        3607101440U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 243U, 4092851444U, 4076863488U, 0U, 0U, 0U,\n        4092917239U, 4110417920U, 4076925939U, 4109693952U, 0U, 0U, 243U, 4126470912U, 0U, 4092851188U, 4109628160U, 15925248U, 0U, 0U, 15000546U, 3856851424U,\n        15987955U, 4075945984U, 4092850944U, 0U, 0U, 0U, 3657433305U, 220U, 3755794140U, 3690987520U, 229U, 15007744U, 3741319168U, 56576U, 219U, 0U,\n        3688693979U, 220U, 55552U, 0U, 0U, 3654877401U, 0U, 14155776U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 14090240U, 3621246935U, 3638024151U, 3621246935U, 3604338389U, 3587560917U, 3587626454U, 3604207318U, 14145494U, 3604338387U, 3536965838U, 3436236494U,\n        3452882896U, 3503345872U, 3553875413U, 3587692246U, 3587637248U, 3607101440U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 15987699U, 4076863731U,\n        4109565952U, 0U, 0U, 15988215U, 4160157685U, 4159897600U, 16054007U, 4193909236U, 1409286144U, 0U, 62453U, 4109628403U, 4076863731U, 4126668791U, 4160223221U, 4092919808U,\n        0U, 0U, 14869219U, 3856851424U, 4092982016U, 15859712U, 0U, 0U, 0U, 218U, 3657433088U, 3674210304U, 0U, 58339U, 3724600064U, 229U,\n        3755859935U, 58624U, 0U, 3707764736U, 14408960U, 56064U, 56320U, 14276864U, 3674265344U, 217U, 0U, 0U, 0U, 55296U, 0U, 216U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 55255U, 3607101440U, 55255U, 3621246935U, 3621246933U, 3587494867U, 3553874899U, 3553875157U, 3520266454U,\n        3554072017U, 3587297997U, 3519794379U, 3435908043U, 3436039883U, 3452685516U, 3469791955U, 3587561431U, 3621246935U, 3607101440U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 15987456U, 0U, 4092916480U, 0U, 243U, 4126668790U, 4093048307U, 4159897600U, 4092917750U, 4109694969U, 4093640704U, 0U, 4092983028U, 4092788736U,\n        62453U, 4160091124U, 4109628919U, 4126474240U, 0U, 0U, 14935013U, 3890537185U, 4126536448U, 0U, 0U, 0U, 0U, 0U, 55808U, 0U,\n        3623935744U, 3638484480U, 14607843U, 3856786176U, 59136U, 223U, 0U, 56576U, 0U, 221U, 14221532U, 55552U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 55040U, 14145495U, 3604403669U, 3587560917U, 3587560660U, 3553875411U,\n        3536966095U, 3486503120U, 3503411666U, 3553744081U, 3570717138U, 3503345104U, 3452816845U, 3385444809U, 3402222536U, 3385445578U, 3419131344U, 3537098197U, 3587571927U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 243U, 4092788736U, 0U, 15987959U, 0U, 62454U, 4160156416U, 4093113088U, 4159897600U, 4109891060U, 62711U,\n        4176999424U, 62453U, 4160090880U, 0U, 15988215U, 4126343168U, 0U, 4126668032U, 0U, 0U, 14935526U, 3890602977U, 4143248128U, 4092983028U, 4076925941U, 4143248128U,\n        4092983028U, 4076925941U, 4143248128U, 4092983028U, 4091150336U, 57061U, 3789881569U, 3823165923U, 3856522717U, 14673664U, 15198175U, 3741319168U, 57088U, 0U, 0U, 14408448U,\n        0U, 0U, 3654877184U, 3640655872U, 14155776U, 216U, 3623878656U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 14145280U, 3621181184U,\n        3587560403U, 3553612496U, 3503477458U, 3520319952U, 3503280080U, 3469594319U, 3469725647U, 3503345873U, 3520122321U, 3452881868U, 3402221769U, 3368469955U, 3284386758U, 3334719174U, 3334916297U, 3368667850U,\n        3402353869U, 3435907787U, 3402353869U, 3469660371U, 3573602003U, 3520057553U, 3536966355U, 3570783959U, 3607101655U, 3604338134U, 3621312471U, 3604404698U, 3688619229U, 3739082461U, 3722370781U, 3756056541U,\n        4158447328U, 4158579427U, 3823033562U, 56545U, 3757504228U, 3839817717U, 4125156577U, 3738828800U, 56801U, 3857048805U, 3839876063U, 3790992866U, 3789479132U, 3722239454U, 3789940709U, 3890603236U,\n        4092917239U, 4193974775U, 4109629433U, 4176934387U, 4160354806U, 4109629433U, 4176934387U, 4177262811U, 3705659870U, 3657490917U, 3789750493U, 3722698981U, 3856787200U, 3890735069U, 15139039U, 3741377764U,\n        3806265344U, 14409472U, 3806461952U, 220U, 56064U, 3755728349U, 219U, 3674210304U, 0U, 55512U, 0U, 0U, 3623878656U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        55255U, 3607101440U, 3621246934U, 3604338133U, 3570586578U, 3520254417U, 3520057551U, 3503345360U, 3469659597U, 3452883150U, 3452816846U, 3452882382U, 3452882381U, 3435973578U, 3368601542U, 3301032899U,\n        3284386497U, 3267675590U, 3351889864U, 3385510859U, 3436039887U, 3503279820U, 3452948174U, 3452817103U, 3520319951U, 3486503378U, 3520122832U, 3520189140U, 3604469718U, 3554072535U, 3621246678U, 3654933210U,\n        3688685022U, 3739148255U, 3772900065U, 3806197495U, 4175356129U, 4176994017U, 3806453983U, 3671842787U, 3789551352U, 4143445472U, 3857049317U, 3873628123U, 3688751332U, 3873826276U, 3856981987U, 3824547296U,\n        3806453725U, 3722436577U, 3857114854U, 3890537699U, 3757437942U, 4210817268U, 4093049595U, 4176802806U, 4210817268U, 4093049595U, 4176802808U, 4244298716U, 3773096932U, 3823492826U, 3856720101U, 3823362273U,\n        3856915939U, 3890208743U, 14942208U, 15000576U, 3755991775U, 3791651042U, 57311U, 56576U, 57088U, 14811136U, 0U, 3640711641U, 3654877184U, 14614528U, 0U, 3623878656U,\n        0U, 3623934208U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 215U, 3621246677U, 3587494867U, 3536900559U, 3486502863U, 3486502862U, 3469725648U, 3503149264U, 3452882129U, 3436104654U, 3435974348U,\n        3419196363U, 3402287303U, 3351693763U, 3284189634U, 3250700739U, 3318204362U, 3385510603U, 3402419662U, 3486503121U, 3537032146U, 3536965839U, 3486436813U, 3452817102U, 3486568914U, 3537097939U, 3553808849U,\n        3553875155U, 3604469463U, 3621181142U, 3654998747U, 3705527773U, 3739082975U, 3789742562U, 3789676278U, 3739345631U, 3774412766U, 3789743074U, 3756122596U, 3840270328U, 4192264934U, 3873892070U, 3840337122U,\n        3806651366U, 3823429093U, 3840140259U, 3806328821U, 3789611231U, 3755991527U, 3857114855U, 3890537442U, 3789551097U, 4261148403U, 4126801403U, 4143183353U, 4261148403U, 4126801403U, 4143183610U, 4227324638U,\n        3806651619U, 3840140261U, 3789612515U, 3856915941U, 3772901345U, 3789415907U, 3890732509U, 3755991778U, 3741319387U, 3774930944U, 3789283810U, 14811136U, 14278619U, 14408671U, 3657490176U, 3755727616U,\n        14211840U, 3688487387U, 3674210304U, 0U, 3688366080U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 3621246720U, 0U, 3621191680U, 3587560916U, 3537032145U, 3520057296U, 3503280079U, 3486634449U, 3469660369U,\n        3469726157U, 3436170445U, 3435973835U, 3419130571U, 3402287818U, 3385444550U, 3385181123U, 3250700484U, 3317941703U, 3385182666U, 3334981833U, 3385445068U, 3469726162U, 3554006741U, 3553808849U, 3503345614U,\n        3469660112U, 3520254931U, 3570783701U, 3587494610U, 3537031890U, 3554006742U, 3621246678U, 3638090202U, 3688685021U, 3722371039U, 3772899810U, 3806585079U, 3757043680U, 3823433975U, 3773031909U, 3857048805U,\n        3857049337U, 4210548966U, 4024887270U, 3890603235U, 3789874662U, 3890735078U, 4025477094U, 3873895925U, 3823560166U, 3857114855U, 3890735079U, 3907117022U, 3739154171U, 4294571507U, 4143710201U, 4126406395U,\n        4294571507U, 4143710201U, 4126406908U, 4193639389U, 3806651364U, 3823428580U, 3773031392U, 3672368605U, 3739608039U, 3823362532U, 3875594203U, 3688750043U, 3688618971U, 14811360U, 3758096384U, 14868992U,\n        226U, 14408667U, 14539520U, 3674210527U, 14352603U, 14352601U, 3688693979U, 14408448U, 216U, 3638034432U, 55552U, 14277376U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 55255U, 0U, 54784U, 14145494U, 3604338133U, 3553874899U, 3553742799U,\n        3503411411U, 3520189138U, 3536966610U, 3536965840U, 3503345358U, 3469660368U, 3519925964U, 3419131594U, 3385444811U, 3368602055U, 3335112132U, 3301229511U, 3368405703U, 3351760333U, 3419065291U, 3436039630U,\n        3486568657U, 3537163734U, 3621246677U, 3570651858U, 3553940950U, 3621246935U, 3604403925U, 3553809365U, 3604337875U, 3536965841U, 3554006485U, 3654866905U, 3671841756U, 3705462237U, 3739148255U, 3755997174U,\n        4025474527U, 3772834040U, 4158578912U, 3773820919U, 3756056569U, 4177130975U, 4024426463U, 3739214306U, 3789677281U, 3806454498U, 3823300591U, 4193908215U, 3773096932U, 3840140002U, 3840271845U, 3789545182U,\n        3722245883U, 4277859827U, 4143709946U, 4126406395U, 4277859827U, 4143709946U, 4126406908U, 4193704670U, 3772899809U, 3856720353U, 3823363039U, 3722699741U, 3823494628U, 3840139751U, 3823101925U, 3873892066U,\n        14671839U, 3890405345U, 14737634U, 3806003200U, 14614528U, 3806519259U, 3739081690U, 3674210521U, 3741319168U, 3688880603U, 3688618457U, 3638089728U, 55296U, 14352600U, 3674210304U, 3674210304U,\n        55552U, 14276864U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 3621191680U, 3621246935U, 3621246422U,\n        3604338389U, 3587495636U, 3570586065U, 3520385234U, 3520254674U, 3570718165U, 3587559889U, 3553743313U, 3520123344U, 3503279823U, 3469659597U, 3452751051U, 3419065034U, 3402156233U, 3351889605U, 3385181894U,\n        3318073029U, 3351955402U, 3435842253U, 3436039887U, 3503411923U, 3553875157U, 3587626452U, 3553808851U, 3570783701U, 3587561174U, 3587494866U, 3570783958U, 3587560917U, 3553809107U, 3587627224U, 3654811863U,\n        3654998746U, 3671841755U, 3688618972U, 3705534454U, 4141801439U, 3772837855U, 4160217314U, 3789414127U, 3756122104U, 3774281717U, 4024360412U, 3705462238U, 3739213791U, 3756057057U, 3789741793U, 3824810487U,\n        4125352930U, 3806453985U, 3823494372U, 3755859676U, 3707172345U, 4244371188U, 4126801147U, 4143183353U, 4244371187U, 4126801147U, 4143183610U, 4227324893U, 3739148255U, 3722831326U, 3739081946U, 15064803U,\n        3822839267U, 3722699747U, 3722634978U, 3890077151U, 3791651035U, 3688882139U, 3674268386U, 14737375U, 14867200U, 3806519263U, 14811355U, 3755727837U, 3688618971U, 14278400U, 3655064537U, 3674210525U,\n        3638091227U, 3674266368U, 14221529U, 217U, 55552U, 55769U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        3621191680U, 55255U, 14145280U, 3607101440U, 54741U, 3587691988U, 3604272340U, 3553874899U, 3587560917U, 3621181142U, 3604403669U, 3587560915U, 3553808849U, 3503346127U, 3486437070U, 3503148492U,\n        3419130313U, 3418999497U, 3368536263U, 3318007236U, 3335179210U, 3402222283U, 3435973579U, 3452816846U, 3486568913U, 3537163733U, 3570717650U, 3520320725U, 3604403925U, 3587494867U, 3537097941U, 3587626967U,\n        3604403926U, 3587495381U, 3604601305U, 3654746112U, 3621378779U, 3688619228U, 3705461981U, 3722246110U, 3722238684U, 3739348975U, 3740786401U, 3722042590U, 4160223479U, 3772839671U, 4125023965U, 3705264604U,\n        3739147999U, 3772834017U, 3755923934U, 3789808373U, 4158710498U, 3772833759U, 3806586340U, 3772701916U, 4109759478U, 4210817269U, 4093049595U, 4176868342U, 4210817269U, 4093049595U, 4176868344U, 4244240091U,\n        3722436574U, 3739081947U, 3672441059U, 3823494629U, 3856522725U, 3823364069U, 3806191069U, 3806324480U, 3806322432U, 3755989979U, 3688618752U, 14410459U, 3674267615U, 3741375451U, 3674266587U, 56064U,\n        3707764955U, 3654932953U, 3655064025U, 55296U, 0U, 14211840U, 219U, 14276864U, 217U, 14277083U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 14090455U, 3621191680U, 215U, 3621191895U, 3621191680U, 3573601749U, 3587561174U, 3604338390U, 3604348928U, 14079703U, 14145495U, 0U,\n        3587560404U, 3553940435U, 3537097169U, 3486502606U, 3469528267U, 3419130569U, 3418933448U, 3368535492U, 3301493194U, 3419196621U, 3436039884U, 3436039885U, 3520057553U, 3553874900U, 3587429073U, 3537031890U,\n        3553940947U, 3553874642U, 3570783959U, 3607101440U, 14145237U, 3570651858U, 3587626712U, 3607101440U, 55257U, 3705462237U, 3722305246U, 3723950043U, 3654735832U, 3688685537U, 3791124445U, 3640711644U,\n        3740792799U, 3705659638U, 4160085726U, 3640656089U, 3705593566U, 3739213789U, 3705209049U, 3722568181U, 4160217570U, 3789676768U, 3789677796U, 3755859420U, 4092917239U, 4177132279U, 4143183865U, 4210554611U,\n        4160355063U, 4143183865U, 4210554611U, 4160485878U, 3688750556U, 3688552448U, 227U, 15066079U, 3823363043U, 3688882141U, 3722306271U, 3755727836U, 3791708672U, 223U, 3756186368U, 3688562688U,\n        14868224U, 3756188383U, 3654934489U, 14352603U, 3654932696U, 14483456U, 14352384U, 14155776U, 3674210304U, 3674210304U, 3640655872U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 215U, 14145494U, 3604403712U, 3607156695U,\n        3621246720U, 3604414678U, 3590324224U, 3604403968U, 14079702U, 3587560448U, 3587428561U, 3536900303U, 3436105165U, 3435842251U, 3385510345U, 3385444552U, 3368798408U, 3402353869U, 3452882895U, 3486568659U,\n        3503608787U, 3537557760U, 14155992U, 3638034432U, 3621191895U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 15988211U, 243U, 4126536448U,\n        62194U, 4093048820U, 4092983284U, 0U, 4109890816U, 243U, 4143445491U, 0U, 4092917748U, 0U, 0U, 244U, 4160090880U, 15988211U, 14737892U, 3772701402U,\n        4143248128U, 4092983028U, 4076925941U, 4143248128U, 4092983028U, 4076925941U, 4143248128U, 4092983028U, 4091150556U, 0U, 3724599013U, 3856524259U, 3755993059U, 3755991005U, 3741375744U, 3755802624U,\n        3674210527U, 14352384U, 14680064U, 57311U, 3741319168U, 3805927936U, 56064U, 219U, 3674210304U, 0U, 14211072U, 0U, 0U, 14155776U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 14090240U,\n        3607101655U, 3621246935U, 55255U, 215U, 0U, 0U, 0U, 54999U, 3604414464U, 3621246933U, 3554006227U, 3553677777U, 3503279310U, 3402418890U, 3368602315U, 3368668107U,\n        3385576138U, 3419196877U, 3469660112U, 3520188882U, 3537032665U, 3654867160U, 3638024151U, 3621246935U, 14145495U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 62453U, 4092851188U, 4126343168U, 15921907U, 4143248128U, 15988471U, 4093640948U, 4160156416U, 0U, 4093048564U, 4076863731U, 4109890803U, 0U, 0U, 243U,\n        4126667763U, 4109759232U, 14672095U, 3805993690U, 0U, 0U, 0U, 0U, 218U, 3671775744U, 0U, 0U, 220U, 3724598272U, 3724542179U, 0U,\n        14671845U, 3755737309U, 55552U, 56797U, 56284U, 3674210304U, 0U, 0U, 3671719936U, 3657433088U, 0U, 55296U, 55296U, 14155776U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 3607101440U, 0U, 0U, 0U, 0U, 14145280U, 14090455U, 3621181139U, 3587429331U,\n        3553742799U, 3469659596U, 3435908042U, 3402287562U, 3385445326U, 3469594318U, 3486568657U, 3553940692U, 3587823872U, 3638089687U, 3621246935U, 3607101440U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 243U, 4109694196U, 4076863488U, 62452U, 4109565952U, 62454U, 4160223223U, 4126343168U, 0U, 15987957U, 4109628662U,\n        4143248371U, 4076863488U, 0U, 0U, 4092917237U, 4126405376U, 14606049U, 3822902491U, 0U, 0U, 0U, 0U, 0U, 14286848U, 14342656U, 3691044572U,\n        220U, 219U, 3724599014U, 230U, 3755933696U, 3741375744U, 56064U, 219U, 3674210304U, 0U, 3738884608U, 14221530U, 0U, 0U, 14286848U, 216U,\n        0U, 0U, 0U, 55296U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 55255U, 0U, 0U, 0U, 0U, 0U,\n        14145280U, 14145280U, 3621246720U, 3604337620U, 3553743313U, 3436105421U, 3452816588U, 3419196620U, 3436105165U, 3469726161U, 3520254931U, 3570718421U, 3637958616U, 3638024151U, 55040U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 243U, 4092850931U, 4076863488U, 0U, 4092916979U,\n        0U, 15987699U, 15987699U, 4109759989U, 4092788979U, 4076007936U, 0U, 0U, 4092851187U, 4092788736U, 14671583U, 3805993946U, 0U, 0U, 0U, 0U,\n        0U, 0U, 55808U, 0U, 0U, 3640655872U, 3690987520U, 14548992U, 56537U, 56832U, 219U, 0U, 55808U, 3739090944U, 14211288U, 3640656090U,\n        0U, 0U, 0U, 3623878656U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 55255U, 3621246720U, 14090240U, 3607156692U, 3587429329U, 3520123086U, 3503345868U, 3503279310U, 3469725904U, 3503477972U, 3587495126U, 3604404440U,\n        3623933911U, 3621191680U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 15987456U,\n        61952U, 0U, 0U, 0U, 0U, 243U, 4076863488U, 15987699U, 0U, 0U, 0U, 242U, 4060086272U, 0U, 4008241643U, 3975081195U,\n        3976200192U, 0U, 0U, 0U, 0U, 0U, 0U, 3674266588U, 56832U, 0U, 14473689U, 14417920U, 217U, 3691043072U, 14474240U, 0U,\n        3707764736U, 218U, 0U, 55808U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 14145280U, 0U, 3621246421U, 3553874899U, 3570652115U, 3553874897U,\n        3553875411U, 3587560917U, 3604403712U, 14145752U, 55040U, 3621191680U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 15859712U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 61952U,\n        0U, 238U, 3957975273U, 3958172653U, 4025483264U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 14417920U, 0U, 3705461760U,\n        3640655872U, 0U, 14278108U, 0U, 0U, 3638155776U, 0U, 14286848U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 55255U, 3607101655U,\n        55255U, 3587560917U, 3587560917U, 3587560917U, 3587560917U, 3604403927U, 3607156695U, 3607101440U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 61163U, 3941198312U, 3941330415U, 4025479424U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 14474240U, 56320U, 0U, 0U, 217U, 0U, 216U, 14286848U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 215U, 3607101655U, 3621246933U, 3621115863U, 3621246935U, 3621246935U, 0U, 215U, 3607101440U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 60650U, 3941263849U, 3907907567U, 4025544448U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 216U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 3621246935U, 3621191680U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 238U, 3958106858U, 3924816370U,\n        4075945984U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 4008439018U, 3941724145U, 4060086272U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 15657964U, 3941659122U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 61420U, 3958501888U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 239U, 3992059904U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,\n        0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U\n);\n\nvec3 GetPixel(vec2 uv)\n{\n    uint id;\n    if(uv.x < 0.0 || uv.x >= size.x || uv.y < 0.0 || uv.y >= size.y )\n    {\n        id = 0U;\n    }\n    else\n    {\n        int off = int(uv.y) * (int(size.x) / 4) + int(uv.x) / 4;\n        id = (image[off] >> ( 3U - uint(uv.x) & 3U) * 8U) & 255U;\n    }\n    return vec3(float(palette[id] >> 16) / 255.0, float((palette[id] >> 8) & 255U) / 255.0, float(palette[id] & 255U ) / 255.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        vec3 col = GetPixel(fragCoord);\n        float alpha = dot(col, col) > 0.05 ? 1.0 : 0.0;\n        fragColor = vec4(GetPixel(fragCoord), alpha);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}