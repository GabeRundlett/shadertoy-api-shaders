{
    "Shader": {
        "info": {
            "date": "1716647703",
            "description": "Illustraton of δ-Eddington approximation for multiple scattering.\nSliders set parameters.\nPlots:\nred   - downward flux\ngreen - upward flux\nshaded - difffuse part",
            "flags": 32,
            "hasliked": 0,
            "id": "XXc3DN",
            "likes": 8,
            "name": "delta-Eddington approximation",
            "published": 3,
            "tags": [
                "scattering"
            ],
            "usePreview": 1,
            "username": "FordPerfect",
            "viewed": 182
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Illustraton of δ-Eddington approximation (or my understanding therof)\n// for multiple scattering.\n\n// Similar in spirit to two-stream model (https://www.shadertoy.com/view/l3t3z8),\n// the δ-Eddington approximation for radiative transfer is slightly more involved,\n// and appears to be in much wider practical use.\n// The primary description is\n//     [1] Joseph, J. & Wiscombe, Warren & Weinman, J.. (1977). The Delta-Eddington Approximation for Radiative Flux Transfer. Journal of the Atmospheric Sciences. 33. 10.1175/1520-0469(1976)033<2452:TDEAFR>2.0.CO;2.\n//         https://journals.ametsoc.org/view/journals/atsc/33/12/1520-0469_1976_033_2452_tdeafr_2_0_co_2.xml\n// which builds upon basic Eddington approximation\n//     [2] Shettle, E. P., and J. A. Weinman, 1970: The Transfer of Solar Irradiance Through Inhomogeneous Turbid Atmospheres Evaluated by Eddington's Approximation. J. Atmos. Sci., 27, 1048–1055, https://doi.org/10.1175/1520-0469(1970)027<1048:TTOSIT>2.0.CO;2.\n//         https://journals.ametsoc.org/view/journals/atsc/27/7/1520-0469_1970_027_1048_ttosit_2_0_co_2.xml\n// In this shader we use notation from\n//     [3] Wiscombe, W. J. (1977). The Delta-Eddington Approximation for a Vertically Inhomogeneous Atmosphere (No. NCAR/TN-121+STR). University Corporation for Atmospheric Research. doi:10.5065/D65H7D6Z\n//         https://opensky.ucar.edu/islandora/object/technotes:215\n// which seems a bit more concise.\n// See also\n//     [4] Wiscombe, W. J., 1977: The Delta–M Method: Rapid Yet Accurate Radiative Flux Calculations for Strongly Asymmetric Phase Functions. J. Atmos. Sci., 34, 1408–1422, https://doi.org/10.1175/1520-0469(1977)034<1408:TDMRYA>2.0.CO;2.\n//         https://web.gps.caltech.edu/~vijay/Papers/Aerosol/Wiscombe-77.pdf\n// for extended version of the idea.\n\n// Fundamentally, the Eddington approximation replaces\n// the phase function with a two-term expansion\n//     p(μ) = p0 + p1*μ\n// where μ=cosθ is the cosine of the scattering angle.\n// Similarly, the radiance is replaced with\n//     I(μ) = I0 + I1*μ\n// where μ is the cosine of the zenith angle (i.e. angle to\n// the \"vertical\" direction; more generally - normal to the layer).\n// The azimuthal dependency is ignored.\n// These expressions are then used to derive equations for fluxes\n// (irradiances in modern terms; measured in W/m^2) in downward\n// and upward directions, distinguishing between direct\n// (unscattered) and diffuse (scattered) components.\n// The δ-Eddington approximation adds a Dirac δ-function\n// term to phase function:\n//     p(μ)*4*π=2*f*δ(1-μ)+(1-f)*(1+3*g'*μ)\n// to better approximate the sharp forward scattering peak\n// (common to e.g. Mie-type phase functions).\n// For the sake of consistency, the value of f is equated\n// to the second moment of the Legendre expansion\n// of the original phase function:\n//     f=(3*<μ^2>-1)/2\n// where <μ^2>=2*π * ∫ p(μ)*μ^2 dμ on [-1;+1].\n// This is often approximated by f=g^2, which is the\n// exact result for the Henyey-Greenstein phase function.\n// It turns out that the δ-Eddington approximation basically\n// reduces to simple Eddington approximation with scaled parameters:\n//     g' = (g-f)/(1-f)      - asymmetry parameter\n//     τ' = (1-ω*f)*τ        - optical depth\n//     ω' = (1-f)*ω/(1-ω*f)  - single-scattering albedo\n// This makes sense, since we are essentially pretending that\n// fraction f of the light never scattered in the first place.\n// It follows that the \"direct\" part of the fluxes\n// now actually also contains some scattered light.\n// This observation is immediately useful on its own. E.g.\n// we can choose to ignore the diffuse part altogether and\n// simply use the scaled optical depth for computations\n// involving the direct part.\n// The actual differential equations for the fluxes,\n// following [3] (eq. (1a) and (1b)), are:\n//     G'+3/2*(1-ω*g)*H=3/4*ω*S*g*y*exp(-τ/y)\n//     H'+2*(1-ω)*G=1/2*ω*S*exp(-τ/y)\n// where g, τ, ω are already scaled. Here y denotes the\n// cosine of zenith angle of monodirectional beam incident\n// upon top of layer (μ0 in [3]), and S is its flux.\n// Both G(τ) and H(τ) are functions of the optical depth\n// (τ=0 is the top of the layer), not geometric depth,\n// and are related to the downward and upward diffuse\n// fluxes as follows:\n//     F↓=G+H\n//     F↑=G-H\n// The direct downward flux is\n//     Fdir=y*S*exp(-τ/y)\n// And the net flux is\n//     F=Fdir+F↓-F↑=y*S*exp(-τ/y)+2*H\n// Note that there is no direct upward flux - the ground\n// diffuses direct flux completely on (lambertian) reflection.\n// The solution to the system of differential equations\n// (for ω<1 case) is (eq. (3a) and (3b) in [3]):\n//     G=   C2*exp(-λ*τ)+C1*exp(+λ*τ) -α*exp(-τ/y);\n//     H=P*(C2*exp(-λ*τ)-C1*exp(+λ*τ))-β*exp(-τ/y);\n// where\n//     λ=sqrt(3*(1-ω)*(1-ω*g))\n//     P=2/3*λ/(1-ω*g)=2*sqrt((1-ω)/(3*(1-ω*g)))\n//     α=3/4*ω*S*(1+g*(1-ω))/(1/y^2-λ^2)\n//     β=1/2*ω*S*(3*g*(1-ω)*y+1/y)/(1/y^2-λ^2)\n// and C1, C2 are arbitrary constants, which we\n// set to satisfy the boundary conditions (eq. (7)\n// and (8) in [3]):\n//     G(0)+H(0)=Fd\n//     G(T)-H(T)=Fu+A*(G(T)+H(T)+y*S*exp(-T/y))\n// where\n//     T  - total optical depth of the layer (Δτ in [3])\n//     Fd - external downward diffuse flux at top (F0↓ in [3])\n//     Fu - external upward diffuse flux at bottom (F0↑ in [3])\n//     A  - ground albedo (actually depends on y, see [3])\n// For the multi-layer case these are the boundary conditions for\n// the top-most and bottom-most boundaries. The interior\n// boundary conditions are simply\n//     G[i-1](τ[i])-G[i](τ[i])=0\n//     H[i-1](τ[i])-H[i](τ[i])=0\n// The values of C1, C2 are computed by simply solving a system of\n// linear equations.\n\n// WARNING: the code is illustrative, and, quite possibly,\n// terrible from numerical stability standpoint.\n\n//==============================================================================\n\n// Compute the Eddington approximation. Input:\n//     w  - single-scattering albedo (ω in [3])\n//     g  - asymmetry parameter\n//     A  - ground albedo\n//     y  - cos of zenith angle of direct light (μ0 in [3])\n//     T  - total optical depth of the layer (Δτ in [3])\n//     S  - incident-beam flux\n//     Fd - external downward diffuse flux at top (F0↓ in [3])\n//     Fu - external upward diffuse flux at bottom (F0↑ in [3])\n//     t  - optical depth of current position (τ in [3])\n// Returns (diffuse-down,diffuse-up,unscattered) fluxes.\nvec3 F_Eddington(float w,float g,float A,float y,float T,float S,float Fd,float Fu,float t)\n{\n    float l=sqrt(3.0*(1.0-w)*(1.0-w*g));                           // λ in [3].\n    float P=(2.0/3.0)*l/(1.0-w*g);\n    float a=(3.0/4.0)*w*S*(1.0+g*(1.0-w))/(1.0/(y*y)-l*l);         // α in [3].\n    float b=(1.0/2.0)*w*S*(3.0*g*(1.0-w)*y+1.0/y)/(1.0/(y*y)-l*l); // β in [3].\n    // Compute the constants C1, C2 to\n    // satisfy the boundary conditions:\n    //     G(0)+H(0)=Fd\n    //     G(T)-H(T)=Fu+a*(G(T)+H(T)+y*S*exp(-T/y))\n    float L=exp(-l*T),Y=exp(-T/y);\n#if 1\n    // WARNING: GLSL uses column-major notation.\n    // Mathematically, this is a 2x3 matrix.\n    mat3x2 M=mat3x2( \n        1.0-P , ((1.0+P)-A*(1.0-P))/L,\n        1.0+P , ((1.0-P)-A*(1.0+P))*L,\n        Fd+a+b, Fu+Y*(a-b+A*(y*S-a-b)));\n    float C1=determinant(mat2(M[2],M[1]))/determinant(mat2(M[0],M[1]));\n    float C2=determinant(mat2(M[0],M[2]))/determinant(mat2(M[0],M[1]));\n#else\n    // Same as above, but written fully in scalar form.\n    float D=((1.0+A)*P*P+(1.0-A))*(L*L-1.0)-2.0*P*(L*L+1.0);\n    float C1=-L/D*(\n        (P+1.0)*(A*(S*y-a-b)+(a-b))*Y+\n        L*(A*P+P+A-1.0)*(a+b)+\n        L*(A*(P+1.0)+P-1.0)*Fd+\n        (P+1.0)*Fu);\n    float C2=-1.0/D*(\n        (P-1.0)*(A*(S*y-a-b)+(a-b))*L*Y+\n        (P*(1.0+A)+(1.0-A))*(a+b)+\n        (P*(1.0+A)+(1.0-A))*Fd+\n        (P-1.0)*L*Fu);\n#endif\n    float G=   C2*exp(-l*t)+C1*exp(+l*t) -a*exp(-t/y);\n    float H=P*(C2*exp(-l*t)-C1*exp(+l*t))-b*exp(-t/y);\n    return vec3(G+H,G-H,y*S*exp(-t/y));\n}\n\n// The meaning is same as above, with added parameter\n//     f  - fractional scattering into forward peak\nvec3 F_delta_Eddington(float w,float g,float f,float A,float y,float T,float S,float Fd,float Fu,float t)\n{\n    // Under the δ-Eddington approximation, the parameters are\n    // transformed as follows:\n    //     g' = (g-f)/(1-f)\n    //     t' = (1-w*f)*t\n    //     w' = (1-f)*w/(1-w*f)\n    // This can be further simplified under the common\n    // assumption that f=g^2, which we don't make here.\n    return F_Eddington(\n        (1.0-f)*w/(1.0-w*f),\n        (g-f)/(1.0-f),\n        A,\n        y,\n        (1.0-w*f)*T,\n        S,\n        Fd,\n        Fu,\n        (1.0-w*f)*t);\n}\n\n//==============================================================================\n\nvec3 plot(vec3 bg,vec3 fg,float x,bool border)\n{\n    float a=smoothstep(2.5*fwidth(x),0.0,abs(x));\n    if(border) fg*=a;\n    return mix(bg,fg,a);\n}\n\nfloat letter(int k,vec2 p)\n{\n    k^=240;\n    p=clamp(p,0.0,1.0);\n    float w=texture(iChannel1,(vec2(k&15,k>>4)+p)/16.0).w-0.5;\n    return smoothstep(+fwidth(w),-0.5*fwidth(w),w);\n}\n\nvec3 letter(int k,vec2 p,vec3 bg,vec3 fg,bool border)\n{\n    float a=letter(k,p);\n    if(border) fg*=a;\n    return mix(bg,fg,a);\n}\n\nvec3 print_int(int n,int d,vec2 p,vec2 k,vec3 bg,vec3 fg,bool border)\n{\n    int b=1;\n    for(int i=0;i<d;++i)\n    {\n        bg=letter(48+n/b%10,p-k*vec2(d-i-1,0),bg,fg,border);\n        b*=10;\n    }\n    return bg;\n}\n\n//==============================================================================\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 uv=fragCoord/iResolution.xy;\n    vec3 col=vec3(0.5);\n    vec4 C0=texture(iChannel0,vec2(0.5)/iResolution.xy);\n    vec4 C1=texture(iChannel0,vec2(1.5,0.5)/iResolution.xy);\n    float h=1.0/14.0,D=4.0*h,W=1.0-D;\n    col=mix(col,vec3(0.375),step(W,uv.x));\n    float w=C0.x*(2.0-C0.x);\n    float g=2.0*C0.y-1.0;\n    float a=C0.z;\n    float T=99.999*C0.w*exp(C0.w-1.0);\n    float y=C1.z;\n    float f=C1.w;\n    float S=1.0;\n    float Fd=0.0;\n    float Fu=0.0;\n    if(uv.x<W)\n    {\n        float t=(1.0-uv.y)*T;\n        vec3 xyz=F_delta_Eddington(w,g,f,a,y,T,S,Fd,Fu,t);\n        vec2 xy=xyz.xy+vec2(xyz.z,0.0);\n        vec2 d=xyz.xy;\n        float x=2.0*uv.x/W;\n        col+=vec3(0.7,0.5,0.2)/16.0*(1.0+cos(dot(fragCoord,vec2(-y,sqrt(1.0-y*y)))));\n        col=mix(col,vec3(0.7),smoothstep(1.5*fwidth(x-1.0),0.0,abs(x-1.0)));\n        col=mix(col,vec3(0.7,0.2,0.2),0.25*smoothstep(1.5*fwidth(x-d.x),0.0,x-d.x));\n        col=mix(col,vec3(0.2,0.7,0.2),0.25*smoothstep(1.5*fwidth(x-d.y),0.0,x-d.y));\n        col=plot(col,vec3(0.7,0.2,0.2),x-xy.x,true);\n        col=plot(col,vec3(0.2,0.7,0.2),x-xy.y,true);\n    }\n    else\n    {\n        vec2 s=vec2(0.75,1)*h,k=vec2(0.5,1);\n        vec2 p=(uv-vec2(W,0))/s;\n        vec3 fg=vec3(0.4,0.8,0.4);\n        vec3 c=vec3(0.8);\n        float L=2.5*k.x,H=D/s.x;\n        if(p.x>L&&mod(p.y,2.0)>1.0&&p.y<8.0)\n        {\n            col-=0.125;\n            col+=vec3(0.1,0.25,0.1)*step((p.x-L)/(H-L),C0[3-int(p.y/2.0)]);\n        }\n        if(p.x>L&&mod(p.y,2.0)>1.0&&p.y>8.0&&p.y<12.0)\n        {\n            col-=0.125;\n            col+=vec3(0.1,0.25,0.1)*step((p.x-L)/(H-L),C1[3-int((p.y-8.0)/2.0)]);\n        }\n        col=letter(135,p-k*vec2(0,11),col,fg,true);\n        col=letter(61 ,p-k*vec2(1,11),col,fg,true);\n        col=print_int(min(int(round(1e5*y)),99999),6,p-k*vec2(3,11),k,col,c,true);\n        col=letter(46 ,p-k*vec2(3.5,11),col,c,true);\n        col=letter(102,p-k*vec2(0, 9),col,fg,true);\n        col=letter(61 ,p-k*vec2(1, 9),col,fg,true);\n        col=print_int(min(int(round(1e5*f)),99999),6,p-k*vec2(3, 9),k,col,c,true);\n        col=letter(46 ,p-k*vec2(3.5, 9),col,c,true);\n        col=letter(119,p-k*vec2(0,7),col,fg,true);\n        col=letter(61 ,p-k*vec2(1,7),col,fg,true);\n        col=print_int(min(int(round(1e5*w)),99999),6,p-k*vec2(3, 7),k,col,c,true);\n        col=letter(46 ,p-k*vec2(3.5, 7),col,c,true);\n        col=letter(103,p-k*vec2(0, 5),col,fg,true);\n        col=letter(61 ,p-k*vec2(1, 5),col,fg,true);\n        col=letter(g<0.0?45:43,p-k*vec2(2,5),col,c,true);\n        col=print_int(min(int(round(1e5*abs(g))),99999),6,p-k*vec2(3, 5),k,col,c,true);\n        col=letter(46 ,p-k*vec2(3.5, 5),col,c,true);\n        col=letter(65 ,p-k*vec2(0, 3),col,fg,true);\n        col=letter(61 ,p-k*vec2(1, 3),col,fg,true);\n        col=print_int(min(int(round(1e5*a)),99999),6,p-k*vec2(3, 3),k,col,c,true);\n        col=letter(46 ,p-k*vec2(3.5, 3),col,c,true);\n        col=letter(84 ,p-k*vec2(0, 1),col,fg,true);\n        col=letter(61 ,p-k*vec2(1, 1),col,fg,true);\n        col=print_int(min(int(round(1e5*T)),9999999),7,p-k*vec2(2, 1),k,col,c,true);\n        col=letter(46 ,p-k*vec2(3.5, 1),col,c,true);\n    }\n    \n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 uv=abs(iMouse.xy)/iResolution.xy;\n    if(iFrame==0)\n    {\n        if(floor(fragCoord)==vec2(0)) fragColor=vec4(0.8,0.875,0.5,0.375);\n        else                          fragColor=vec4(0.0,0.0,0.875,0.5625);\n    }\n    else fragColor=texture(iChannel0,fragCoord/iResolution.xy);\n    // Copy-pasted.\n    float h=1.0/14.0,D=4.0*h,W=1.0-D;\n    if(uv.x>W)\n    {\n        vec2 s=vec2(0.75,1)*h,k=vec2(0.5,1);\n        vec2 p=(uv-vec2(W,0))/s;\n        float L=2.5*k.x,H=D/s.x;\n        if(floor(fragCoord)==vec2(0)&&p.x>L&&mod(p.y,2.0)>1.0&&p.y<8.0)\n        {\n            fragColor[3-int(p.y/2.0)]=(p.x-L)/(H-L);\n        }\n        if(floor(fragCoord)==vec2(1,0)&&p.x>L&&mod(p.y,2.0)>1.0&&p.y>8.0&&p.y<12.0)\n        {\n            fragColor[3-int((p.y-8.0)/2.0)]=(p.x-L)/(H-L);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}