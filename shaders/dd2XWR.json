{
    "Shader": {
        "info": {
            "date": "1670182778",
            "description": "a creepy lil dude, inspired by this shader:\nhttps://www.shadertoy.com/view/DdjSDR",
            "flags": 0,
            "hasliked": 0,
            "id": "dd2XWR",
            "likes": 35,
            "name": "Ocean Wanderer",
            "published": 3,
            "tags": [
                "f"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 407
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n// RayMarching from TheArtOfCode\n\n// From BlackleMori\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nvec3 face(vec3 p) {\n     vec3 a = abs(p);\n     return step(a.yzx, a.xyz)*step(a.zxy, a.xyz)*sign(p);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdBox(in vec2 p, in vec2 b){\n    vec2 d = abs(p)-b;\n    return length(max(d,0.))+min(max(d.x,d.y),0.);\n}\n\nvec3 rayOri() {\n    vec2 m = iMouse.xy/iResolution.xy;\n    vec3 ro = vec3(0, 1.18, -2);\n    //ro.yz *= rot(-m.y*3.14+1.);\n    //ro.xz *= rot(-m.x*6.2831);\n    return ro;\n}\n\nfloat dist(vec3 p) {\n   // p.x += iTime;\n   vec3 op = p;\n    float pd = p.y;\n    float m = 1.;\n    float xp = exp(-length(p.xz));\n    float h = 0.;\n    float n = 5.;\n    for (float i = 0.; i <n; i++) {\n        p.xz *= rot(pi/n);\n        h += (n-i) * texture(iChannel0, 0.04 * i * i * (p.xz + 0.2 * iTime)).r;\n       // h = smoothstep(0.3,0.7, h);\n        //pd -= m * h;\n    }\n    pd -= h/ 15.;   \n    op -= vec3(.75*cos(1. * p.y+iTime), \n               .8,\n               2.+2.*cos(0.2 * iTime) + .5*sin(iTime));\n   \n    float sd = length(op) - 0.1;\n    return smin(sd, 0.4 * pd, 0.35);\n}\n\nvec2 march(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n    float s = sign(z);\n    float steps = 0.;\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = dist(p);\n        if (s != sign(dS)) { z *= 0.5; s = sign(dS); }\n        steps++;\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return vec2(min(dO, MAX_DIST), steps);\n}\n\nvec3 normal(vec3 p) {\n\tfloat d = dist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        dist(p-e.xyy),\n        dist(p-e.yxy),\n        dist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 rayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = rayOri();\n    \n    vec3 rd = rayDir(uv, ro, vec3(0,0.8,0), 3.);\n    vec3 col = vec3(0);\n   \n    vec2 m = march(ro, rd, 1.);\n    float d = m.x;\n    \n    vec3 p = ro + rd * d;\n    float IOR = 1.2;\n    if(d<MAX_DIST) {        \n        vec3 n = normal(p);\n        vec3 r = reflect(rd, n);\n\n        vec3 lightDir = normalize(vec3(1,2,3));\n        float dif  = dot(n,  lightDir)*.5+.5;\n          \n       \n        float fres  = pow(1. + dot(rd, n),  5.);\n    \n       // col = vec3(0);\n        //col += exp(-0.03 * m.y);\n        float xp = exp(-0.0025 * m.y);\n        col = mix(vec3(dif), vec3(1,0,0), xp);\n        col = pow(4.*col*(1.-col),vec3(2));\n        col = mix(col, vec3(0.5,0.7,1), 1.-xp);\n        float mx = .5+.5*thc(4., log(length(p.yz)) + pi);\n        //mx *= .75+.25*cos(4. * p.z+iTime);\n        //col = mix(col, vec3(0.7,0.8,0.1), fres * (1.-mx)); // <- interesting\n        col = mix(col, vec3(1), mx);\n        \n     }\n    \n    col = pow(col, vec3(1./2.2));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 d) {\n    return 0.5 + 0.5 * cos(2. * pi * (0.5 * t + d));\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b * cos(2. * pi * (c * t + d));\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat sfloor(float a, float b) {\n    return floor(b) + 0.5 + 0.5 * tanh(a * (fract(b) - 0.5)) / tanh(0.5 * a);\n}\n\n// From iq, k = 0.12 is good\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat smax(float a, float b, float k) {\n    float h = clamp(0.5 - 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) + k * h * (1. - h); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}