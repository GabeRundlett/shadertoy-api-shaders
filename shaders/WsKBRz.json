{
    "Shader": {
        "info": {
            "date": "1606856219",
            "description": "Solving the 8-queens problem (as well as 16-queens or other problems, see Common tab).",
            "flags": 32,
            "hasliked": 0,
            "id": "WsKBRz",
            "likes": 8,
            "name": "Eight Queens",
            "published": 3,
            "tags": [
                "eight",
                "queens"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 311
        },
        "renderpass": [
            {
                "code": "// N-queens problem, Matthew Arcus, mla, 2020\n// Each time step, Buffer A computes successive solutions\n// to the N-queens problem (or other subset of permutations,\n// see the check() function in Common).\n//\n// Board state is stored as a permutation (map of column to rows)\n// represented as 4-bit ints in a uvec4.\n//\n// N, defined in Common, is size of board.\n// speed is timesteps per second, or 0.0 for flat out.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    float maxres = max(iResolution.x,iResolution.y);\n    float minres = min(iResolution.x,iResolution.y);\n    vec2 uv = (fragCoord - 0.5*max(vec2(0),iResolution.xy-minres))/minres;\n\tfragColor = vec4(0.5);\n    if (abs(uv.x-0.5) > 0.5 || abs(uv.y-0.5) > 0.5) return;\n    bitstring board = vec2bitstring(texelFetch(iChannel0, ivec2(0,0),0));\n    uv *= float(N);\n\tint i = int(uv.x);\n    int j = int(uv.y);\n    vec3 col = vec3(i%2 != j%2);\n    if (j == get(board,i)) {\n        col = mix(vec3(1,0,0),col,\n                  smoothstep(0.0,2.0*fwidth(uv.x),\n                             length(uv-vec2(i,j)-0.5)-0.4));   \n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Given a permutation known to be valid at j < i,\n// and assumed to be ascending order for j >= i,\n// find the first non-valid value j >= i, and reverse\n// the order of the elements after j (with the effect\n// that permutations with that prefix are skipped).\nint checkvalid(inout bitstring s, int i) {\n    for ( ; i < N; i++) {\n        if (!check(s,i)) {\n            s = reverse(s,i+1,N);\n            break;\n        }\n    }\n    return i;\n}\n\nbitstring nextperm(bitstring s) {\n    for (int count = 0; count < MAXITERATIONS; count++) {\n        int i = N-1;\n        // Find longest descending suffix\n        while (i > 0 && get(s,i-1) >= get(s,i)) i--;\n        if (i == 0) { \n            // whole sequence is descending\n            // so change to all ascending\n            s = reverse(s,0,N);\n            // and find first invalid element\n            // if all valid, return\n            if (checkvalid(s,0) == N) return s;\n        } else {\n            // find element to increment\n        \tint j = N-1;\n        \twhile (get(s,j) <= get(s,i-1)) j--;\n        \ts = swap(s,i-1,j);\n            if (check(s,i-1)) {\n\t            // i-1 can't be last element\n    \t        // first permutation with those suffix elements\n        \t\ts = reverse(s,i,N);\n            \t// find invalid element & reorder\n        \t\tif (checkvalid(s,i) == N) return s;\n        \t}\n        }\n   }\n   return bitstring(0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tif (ivec2(fragCoord) == ivec2(1,0)) {\n        float lastInterval = 0.0;\n        if (iFrame != 0) {\n            float lastTime = texelFetch(iChannel0, ivec2(1,0), 0).x;\n            lastInterval = iTime-lastTime;\n        }\n        fragColor = vec4(iTime,lastInterval,0,0);\n        return;\n    }\n\n    if (ivec2(fragCoord) == ivec2(0,0)) {\n        bitstring board = vec2bitstring(texelFetch(iChannel0, ivec2(0,0),0));\n        float lastTime = -1.0;\n        if (iFrame == 0 || board == bitstring(0)) {\n            for (int i = 0; i < 16; i++) {\n            \tboard = set(board,i,i);\n            }\n            if (checkvalid(board,0) == N) lastTime = 0.0;\n        } else {\n            lastTime = texelFetch(iChannel0, ivec2(1,0), 0).x;\n        }\n        if (speed == 0.0 || floor(speed*lastTime) != floor(speed*iTime)) {\n            board = nextperm(board);\n        }\n    \tfragColor = bitstring2vec(board);\n    }   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const int N = 8; // The size of the board, 16 is the largest supported.\nconst int M = 4; // Number of bits for each position, 32%M = 0 or NM <= 32\nconst uint MASK = (1U<<M)-1U;\nfloat speed = 2.0; // Timesteps per second, 0.0 for flat out.\nint MAXITERATIONS = 100000;\n\n#define bitstring uvec4\nint get(bitstring s, int i);\n\n// s represents a permutation of N items.\n\n// A permutation is valid if check(s,i) is\n// true for all 0 <= i < N.\n// eg. for derangements, check((1,3,0,2,4),i) \n// is true for i < 4 but false for i = 4.\n// or for N-queens, get(s,i) is the row occupied by the\n// queen in column i and check(s,i) is true if queen\n// in column i is not under diagonal attack by any\n// queen in column j < i.\nbool check(bitstring s, int j) {\n    // Uncomment one of these lines for a different permutation problem.\n    //return true; // Factorial: https://oeis.org/A000142\n    //return get(s,j) != j; // Derangement //https://oeis.org/A000166\n    //return get(s,j) > j || get(s,get(s,j)) == j; // Involution: https://oeis.org/A000085\n    //return get(s,j) != j && get(s,j) != (j+1)%N; // MÃ©nage: https://oeis.org/A000179\n    //return abs(j-get(s,j)) > 1; // Restricted range\n    for (int i = 0; i < j; i++) {\n        // https://oeis.org/A000170\n        // n-queens - no bishop attack\n        // permutation guarantees no rook attack\n        if (abs(get(s,j)-get(s,i)) == abs(j-i)) {\n            return false;\n\t\t}\n    }\n    return true;\n}\n\nbitstring vec2bitstring(vec4 s) {\n    return floatBitsToUint(s);\n}\n\nvec4 bitstring2vec(bitstring s) {\n    return uintBitsToFloat(s);\n}\n\nint get(bitstring s, int i) {\n    int word = M*i/32, offset = M*i%32;\n    uint t = s[word];\n    return int((t >> offset) & MASK);\n}\n\nbitstring set(bitstring s, int i, int x) {\n    int word = M*i/32, offset = M*i%32;\n    uint t = s[word];\n    t &= ~(MASK << offset);\n    t |= uint(x) << offset;\n    s[word] = t;\n    return s;\n}\n\nbitstring swap(bitstring s, int i, int j) {\n    int t = get(s,i); \n    s = set(s,i,get(s,j)); \n\ts = set(s,j,t);\n\treturn s;\n}\n\nbitstring reverse(bitstring s,int i,int j) {\n    j -= 1;\n    while (i < j){\n        s = swap(s,i,j);\n        i += 1; j -= 1;\n    }\n    return s;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}