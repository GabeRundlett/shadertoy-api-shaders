{
    "Shader": {
        "info": {
            "date": "1611498626",
            "description": "Licence CC0: Metal Kaleidoscope 2\nExperimenting with truchet, FBM, smooth kaleidoscope and metal like lighting take 2",
            "flags": 0,
            "hasliked": 0,
            "id": "ttVyRc",
            "likes": 14,
            "name": "Metal Kaleidoscope 2",
            "published": 3,
            "tags": [
                "2d",
                "fbm"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 481
        },
        "renderpass": [
            {
                "code": "// Licence CC0: Metal Kaleidoscope 2\n// Experimenting with truchet, FBM, smooth kaleidoscope and metal like lighting take 2\n\n// SABS        from: ollj (shadertoy) (SABS is a really great tool)\n// hsv2rgb     from: https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\n// modMirror1  from: http://mercury.sexy/hg_sdf/\n// pmin        from: iq (shadertoy)\n// raySphere   from: iq (shadertoy)\n// tanh_approx from: some math site, don't remember\n// pmin        from: iq (shadertoy)\n\n// fbm described by iq here: https://iquilezles.org/articles/fbm\n\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define TIME            iTime\n#define RESOLUTION      iResolution\n#define PSIN(x)         (0.5+0.5*sin(x))\n#define LESS(a,b,c)     mix(a,b,step(0.,c))\n#define SABS(x,k)       LESS((.5/(k))*(x)*(x)+(k)*.5,abs(x),abs(x)-(k))\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n#define L2(x)           dot(x, x)\n\n#define PERIOD          30.0\n#define NPERIOD         floor(TIME/PERIOD)\n#define TIMEINPERIOD    mod(TIME, PERIOD)\n#define FADE            1.0\n#define HPERIOD         hash(NPERIOD)\n\nconst float  truchet_lw = 0.05;\nconst mat2[] truchet_rots = mat2[](ROT(0.0*PI/2.0), ROT(1.00*PI/2.0), ROT(2.0*PI/2.0), ROT(3.0*PI/2.0));\n\nvec3 hsv2rgb(vec3 c) {\n  const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\nfloat hex(vec2 p, float r) {\n  const vec3 k = vec3(-sqrt(3.0)/2.0,1.0/2.0,sqrt(3.0)/3.0);\n  p = p.yx;\n  p = abs(p);\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  return length(p)*sign(p.y);\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nfloat hash(float co) {\n  co += 100.0;\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\nfloat hash(vec3 co) {\n  co += 100.0;\n  return fract(sin(dot(co, vec3(12.9898,58.233, 12.9898+58.233))) * 13758.5453);\n}\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nvec2 toRect(vec2 p) {\n  return vec2(p.x*cos(p.y), p.x*sin(p.y));\n}\n\nvec2 mod2_1(inout vec2 p) {\n  vec2 c = floor(p + 0.5);\n  p = fract(p + 0.5) - 0.5;\n  return c;\n}\n\nfloat modMirror1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize,size) - halfsize;\n  p *= mod(c, 2.0)*2.0 - 1.0;\n  return c;\n}\n\nfloat smoothKaleidoscope(inout vec2 p, float sm, float rep) {\n  vec2 hp = p;\n\n  vec2 hpp = toPolar(hp);\n  const float ts = 2.5;\n  hpp.x = tanh_approx(hpp.x/ts)*ts;\n  float rn = modMirror1(hpp.y, TAU/rep);\n\n  float sa = PI/rep - SABS(PI/rep - abs(hpp.y), sm);\n  hpp.y = sign(hpp.y)*(sa);\n\n  hp = toRect(hpp);\n\n  p = hp;\n\n  return rn;\n}\n\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\nfloat truchet_cell0(vec2 p) {\n  float d0  = circle(p-vec2(0.5), 0.5);\n  float d1  = circle(p+vec2(0.5), 0.5);\n\n  float d = 1E6;\n  d = min(d, d0);\n  d = min(d, d1);\n  return d;\n}\n\nfloat truchet_cell1(vec2 p) {\n  float d0  = abs(p.x);\n  float d1  = abs(p.y);\n  float d2 = circle(p, 0.25);\n\n  float d = 1E6;\n  d = min(d, d0);\n  d = min(d, d1);\n  d = min(d, d2);\n  return d;\n}\n\nvec2 truchet(vec2 p, float h, out vec3 n) {\n  float hd = circle(p, 0.4);\n\n  vec2 hp = p;\n  float rep = 2.0*floor(mix(5.0, 25.0, fract(h*13.0)));\n  float sm = mix(0.05, 0.125, fract(h*17.0))*24.0/rep;\n  float kn = 0.0;\n  kn = smoothKaleidoscope(hp, sm, rep);\n  hp *= ROT(0.02*TIME);\n  hp += TIME*0.05;\n  vec2 hn = mod2_1(hp);\n  float r = hash(vec3(hn, h));\n  hp *= truchet_rots[int(r*4.0)];\n\n  float cd0 = truchet_cell0(hp);\n  float cd1 = truchet_cell1(hp);\n  float d0 = mix(cd0, cd1, (fract(r*13.0) > 0.5));\n\n  float d = 1E6;\n  d = min(d, d0);\n  d = abs(d) - truchet_lw;\n\n  n = vec3(hn, kn);\n\n  return vec2(hd, d);\n}\n\nfloat df(vec2 p, float h, out vec3 n) {\n  vec2 d = truchet(p, h, n); \n  return d.y;\n}\n\nfloat hf(vec2 p, float h) {\n  vec3 n;\n  float decay = 0.75/(1.0+0.125*L2(p));\n  float d = df(p, h, n);\n  const float ww = 0.085;\n  float height = (smoothstep(0.0, ww, d));\n  return pmax(2.0*height*decay, 0.5, 0.25);\n}\n\nfloat fbm(vec2 p, float h) {\n  const float aa = -0.45;\n  const mat2  pp = (2.03-0.0)*ROT(1.0);\n\n  float a = 1.0;\n  float d = 0.0;\n  float height = 0.0;\n  \n  for (int i = 0; i < 3; ++i) {\n    height += a*hf(p, h);\n    d += a;\n    a *= aa;\n    p *= pp;\n  }\n  \n  return height/d;\n}\n\nvec2 distortCoords(vec2 p, float h) {\n  p.x = SABS(p.x, 0.1*abs(p.y)+0.001);\n  float tp = TIMEINPERIOD/PERIOD;\n  p*=ROT(TIMEINPERIOD*0.075);\n  p*=ROT(-PI*tanh_approx(0.125*(L2(p)-0.25)));\n  \n  p*=mix(1.5, 2.5, mix(tp, 1.0-tp, h));\n  return p;\n}\nconst float exclusionRadius = 0.25;\n\nfloat distanceField(vec2 p, float h, out vec3 n) {\n  float c = circle(p, exclusionRadius);\n  p = distortCoords(p, h);\n//  return df(p, h, n);\n  return pmin(c, df(p, h, n), 0.25);\n}\n\nfloat height(vec2 p, float h) {\n  p = distortCoords(p, h);\n  return tanh_approx(fbm(p, h));\n}\n\nvec3 normal(vec2 p, float h) {\n  vec2 eps = vec2(4.0/RESOLUTION.y, 0.0);\n  \n  vec3 n;\n  \n  n.x = height(p - eps.xy, h) - height(p + eps.xy, h);\n  n.y = 2.0*eps.x;\n  n.z = height(p - eps.yx, h) - height(p + eps.yx, h);\n  \n  return normalize(n);\n}\n\nvec3 postProcess(vec3 col, vec2 q)  {\n  col=pow(clamp(col,0.0,1.0),vec3(1.0/2.2)); \n  col=col*0.6+0.4*col*col*(3.0-2.0*col);  // contrast\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);  // saturation\n  col*=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);  // vigneting\n  return col;\n}\n\nvec2 raySphere(vec3 ro, vec3 rd, vec4 sphere) {\n  vec3 ce = sphere.xyz;\n  float ra = sphere.w;\n  vec3 oc = ro - ce;\n  float b = dot(oc, rd);\n  float c = dot(oc, oc) - ra*ra;\n  float h = b*b - c;\n  if (h<0.0) return vec2(-1.0); // no intersection\n  h = sqrt(h);\n  return vec2(-b-h, -b+h);\n}\n\nconst vec3 up  = vec3(0.0, 1.0, 0.0);\nconst vec3 lp1 = 1.0*vec3(1.0, 1.25, 1.0);\nconst vec3 lp2 = 1.0*vec3(-1.0, 2.5, 1.0);\n\nvec4 sphereCol(vec3 ro, vec3 rd, float h) {\n  vec4 sphere = vec4(0.0, 0.0, 0.0, exclusionRadius*0.95);\n  vec2 sphereIntersect = raySphere(ro, rd, sphere);\n  if (sphereIntersect.x == -1.0) {\n    return vec4(0.0);\n  }\n\n  vec3 p = ro + rd*sphereIntersect.x;\n  vec3 n = normalize(p - sphere.xyz);\n  vec3 r = reflect(rd, n);\n\n  vec3 ld1 = normalize(lp1 - p);\n  vec3 ld2 = normalize(lp2 - p);\n  \n  float diff1 = max(dot(n, ld1), 0.0);\n  float diff2 = max(dot(n, ld2), 0.0);\n  float ref1  = max(dot(r, ld1), 0.0);\n  float ref2  = max(dot(r, ld2), 0.0);\n  \n  vec3 hsv = vec3(h+mix(0.6, 0.9, PSIN(TIME*0.1)), 0.5, 1.0);\n  \n  vec3 baseCol1 = hsv2rgb(hsv);\n  vec3 baseCol2 = sqrt(baseCol1.zyx);\n  vec3 matCol   = 1.0-baseCol1*baseCol2;\n\n  float fres = dot(-n, rd);\n  \n  vec3 col = vec3(0.0);\n  col += baseCol1*pow(diff1, 5.0);\n  col += baseCol2*pow(diff2, 2.5);\n  col *= 0.125;\n  \n  col += 0.5*baseCol1*pow(ref1, 10.0);\n  col += 0.5*baseCol2*pow(ref2, 5.0);\n  \n//  col += vec3(pow(1.0-fres, 6));\n  float t = smoothstep(0.0, 0.25, fres);\n  \n  return vec4(col, t);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  float aa = 2.0/RESOLUTION.y;\n\n  float hh = HPERIOD;\n  float l  = length(p);\n  \n  float fakeNorthernLightPhase = L2(p.x)*10.0;\n  float fakeNorthernLightAmp = mix(2.0, 10.0, tanh_approx(0.25*abs(p.x)));\n  float eyeHeight = mix(10.0, mix(10.0, fakeNorthernLightAmp, sqrt(q.y)), PSIN(fakeNorthernLightPhase));\n\n  \n  vec3  dn;\n  float d  = distanceField(p, hh, dn);\n  float h  = height(p, hh);\n  vec3  n  = normal(p, hh);\n\n  vec3 ro = vec3(0.0, eyeHeight, 0.0);\n  vec3 pp = vec3(p.x, 0.0, p.y);\n\n  vec3 po = vec3(p.x, h, p.y);\n  vec3 rd = normalize(po - ro);\n  vec3 prd = normalize(pp - ro);\n  \n\n  vec3 ld1 = normalize(lp1 - po);\n  vec3 ld2 = normalize(lp2 - po);\n\n  vec3 hsv = vec3(hh+mix(0.6, 0.9, PSIN(TIME*0.1-10.0*l+(p.x+p.y))), tanh_approx(h*h*1.0), tanh_approx(1.0*h+.1));\n  hsv.yz = clamp(hsv.yz, 0.0, 1.0);\n  vec3 baseCol1 = hsv2rgb(hsv);\n  vec3 baseCol2 = sqrt(baseCol1.zyx);\n  vec3 matCol   = 1.0-baseCol1*baseCol2;\n \n  float diff1 = max(dot(n, ld1), 0.0);\n  float diff2 = max(dot(n, ld2), 0.0);\n\n  vec3  ref   = reflect(rd, n);\n  float ref1  = max(dot(ref, ld1), 0.0);\n  float ref2  = max(dot(ref, ld2), 0.0);\n\n  baseCol1 *= mix(0.0, 4.0, 1.0/L2(lp1 - po));\n  baseCol2 *= mix(0.0, 3.0, 1.0/L2(lp2 - po));\n\n  vec3 col = vec3(0.0);\n  const float basePow = 1.25;\n  col += 1.00*matCol*baseCol1*mix(0.1, 1.0, pow(diff1, 4.0))*0.5;\n  col += 0.50*matCol*baseCol2*mix(0.1, 1.0, pow(diff2, 2.0))*0.5;\n  col = pow(col, vec3(1.25));\n  col += 4.0*baseCol1*pow(ref1, 20.0);\n  col += 2.0*baseCol2*pow(ref2, 10.0);\n\n  float gd = d;\n  const float glow_lw = 0.025;\n  gd = abs(gd)-glow_lw*2.0;\n  gd = abs(gd)-glow_lw;\n  vec3 glowCol = vec3(1.0);\n  glowCol = mix(baseCol1, glowCol, max(dot(ld1, up), 0.0));\n  glowCol = mix(baseCol2, glowCol, max(dot(ld2, up), 0.0));\n  vec3 finalGlowCol = glowCol*exp(-20.0*max(gd, 0.0));\n  finalGlowCol = mix(finalGlowCol, glowCol, smoothstep(-aa, aa, -d+glow_lw));\n  \n  float tuneOut = sqrt(1.0-q.x);\n  \n  col = clamp(col, 0.0, 1.0);\n  col = mix(col, vec3(0.0), smoothstep(-aa, aa, -d));\n\n  vec4 scol = sphereCol(ro, prd, hh);\n  col = mix(col, scol.xyz, scol.w);  \n  col -= 0.5*0.125*tuneOut*finalGlowCol;\n  \n  col = postProcess(col, q);\n  \n  float fadeIn  = smoothstep(0.0, FADE, TIMEINPERIOD);\n  float fadeOut = 1.0-smoothstep(PERIOD-FADE, PERIOD, TIMEINPERIOD);\n  col = mix(vec3(0.0), col, fadeIn*fadeIn*fadeOut*fadeOut);\n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}