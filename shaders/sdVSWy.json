{
    "Shader": {
        "info": {
            "date": "1635266058",
            "description": "mid: analytical scene average\ncf \"Fake fur rendering\" [url]https://www.researchgate.net/publication/220721859_Fake_fur_rendering[/url]\n& \"Real-time Realistic Rendering and Lighting of Forests\" [url]https://hal.inria.fr/hal-00650120[/url]\nmouse: camera",
            "flags": 0,
            "hasliked": 0,
            "id": "sdVSWy",
            "likes": 7,
            "name": "sea of balls: shader LOD",
            "published": 3,
            "tags": [
                "raymarching",
                "voronoi",
                "worley",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 356
        },
        "renderpass": [
            {
                "code": "#define rot(a) mat2(cos(a+vec4(0,11,33,0))) // --- utils from https://www.shadertoy.com/view/llySRh\n#define H(p)   fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123)\n\nvec4   lum = vec4(0,1,0,0),           // balls color on lit side\n      shad = vec4(0,0,1,0),           // balls color on shadow side\n        bg = vec4(1,0,0,0);           // background color\nfloat r = .3;                         // spheres radius\n      \nfloat map(vec3 q) {                   // --- scene  SDF ----------------\n    q *= 2.;\n    vec2 I = floor(q.yx), F = fract(q.yx), D;\n    float d, l=9.;\n    for( int k=0; k < 9; k++ )        // find closest seed within neihbors\n        D = vec2(k%3,k/3) -1.,\n        d = length( D + H(I+D) - F ), // offset to seed\n        l = min(l,d);                 // keep closest dist\n    return length(vec2(l,q.z)) - r;   // sphere SDF\n}\n\nvoid mainImage(out vec4 O, vec2 U)    // --- renderer ----------------\n{\n    vec3 R = iResolution;\n    U = (U+U-R.xy)/R.y;\n    float t=9., i; \n    vec3  N, e = vec3(1,-1,0)/1e2, \n          D = normalize(vec3(U, -2.)),                 // ray direction\n          p = vec3(0,-2,22),                           // marching point along ray \n          M = iMouse.z > 0. ? iMouse.xyz/R -.5: vec3(20,12,0)/1e2*cos(.3*iTime+vec3(0,11,0))+vec3(0,.2,0);\n    p.yz *= rot(.5-6.3*M.y),                           // rotations\n    p.xz *= rot(-6.3*M.x);\n    D.yz *= rot(.5-6.3*M.y),\n    D.xz *= rot(-6.3*M.x);\n    if (D.z*p.z>0.) { O=vec4(1); return; }             // sky\n\n    if ( abs(U.x) < .5 ) {                        // --- analytical average\n         t = -p.z/D.z;\n         if ( t < 0. ) { O = bg; return; }\n         p += t*D;                                     // ray-trace to plane\n         N = vec3(0,0,1);                              // plane normale\n         float d = 3.14*r*r,                           // sphere density\n               a = 1.- pow( 1.-d, 1./ abs(dot(N,D)) ), // apparent density\n               s = ( 1.+ D.x ) / 2. ; // D.x: dot(D,L) // sphere apparent shadowing proportion\n         O = mix( bg, mix( lum, shad, s ), a );        // compose contributions\n      }\n    else {     \n        for ( i=0.; i<200. && t>.01; i++ )        // --- explicit rendering\n            t = min(9., map(p)),                       // SDF\n            p += .25*t*D;                              // step forward = dist to obj\n\n        if (i<200.)                                    // hit\n             N = normalize(   map(p+e.xyy)/e.xyy +  map(p+e.yxy)/e.yxy // https://iquilezles.org/articles/normalsSDF\n                            + map(p+e.yyx)/e.yyx +  map(p+e.xxx)/e.xxx ),\n             O = N.x > 0. ? lum : shad;                // toon shading\n          // O = vec4( .3 + .7*max(0.,N.x) );          // ambient + diffuse\n        else O = bg;\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}