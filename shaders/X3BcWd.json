{
    "Shader": {
        "info": {
            "date": "1727852669",
            "description": "Fields of Clouds. I'm really tying to nail the clouds. I used some code from a Godot computer shader. Im trying to create more puffy clouds that move from left to right. The clouds here have too much noise. Would love some pointers for the clouds.",
            "flags": 0,
            "hasliked": 0,
            "id": "X3BcWd",
            "likes": 0,
            "name": "10-1-24",
            "published": 3,
            "tags": [
                "clouds"
            ],
            "usePreview": 0,
            "username": "8coolguy",
            "viewed": 43
        },
        "renderpass": [
            {
                "code": "//I want this shader to look like grass moving in the wind in a 2d with clouds passing \n#define GREEN vec3(0,.45,0)\n#define SHADE1 vec3(.56,.93,.56)\n#define SHADE2 vec3(.94,1,.94)\n#define SHADE3 vec3(.66,.72,.61)\n#define SKY vec3(.80,.87,.88)\n#define CLOUDED vec3(.51,.82,.6)\n#define STEPS 1001\n//often repeats look into better ways\nint randomNumber(int seed, int index){\n    return abs((seed >> (2 * (index % 16))) % 4);\n}\n\n/*\n* The following functions were taken from a open source Godot Cloud Shader. I would like to improve it and make my own soon.\n* https://godotshaders.com/shader/pixelated-animated-water/\n*/\nvec2 random(vec2 uv){\n    uv = vec2( dot(uv, vec2(127.1,311.7) ),\n               dot(uv, vec2(269.5,183.3) ) );\n    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);\n}\n\nfloat noise(vec2 uv) {\n    vec2 uv_index = floor(uv);\n    vec2 uv_fract = fract(uv);\n\n    vec2 blur = smoothstep(0.0, 1.0, uv_fract);\n\n    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),\n                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),\n                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),\n                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) + 0.5;\n}\nfloat fbm(vec2 inputColor){\n\tfloat value = 0.0;\n\tfloat scale = 0.2;\n    float dithering = 2.5;\n\n\tinputColor *= iTime/3000.0 + 1.0;\n\t\n\tfor(int i = 0; i < 6; i++){\n\t\tvalue += noise(inputColor)*scale;\n\t\tinputColor *= dithering;\n\t}\n\t\n\treturn clamp(value, 0.0, 1.0);\n}\n\nfloat get_pixelated_moving_colors(vec2 uv, vec2 direction, float speed) {\n    int pixel_size = 256;\n\tspeed = speed / 1000.0;\n\tdirection*=-1.0;\n\tvec2 moving_uv = uv + (direction * iTime * speed) + vec2(0.5/float(pixel_size));\n\tvec2 pixel_uv = round((moving_uv) * float(pixel_size)) / float(pixel_size);\n\tfloat pixelated_color = fbm(pixel_uv);\n\treturn pixelated_color;\n}\n\n/*\n*Did some curesed casting to create the \"grassy\" look.\n*\n*/\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    int psudoRandom = 37623;\n    vec3 col;\n    float n, alpha;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv0 = (2.0 * fragCoord - iResolution.xy)/iResolution.y;\n    float blur = 4./ iResolution.y;\n\n    uv = float(STEPS) * uv;\n    int colorIndex = int(uv.y) * STEPS + int(uv.x) + 10 * int(iTime) % 7;\n    colorIndex = randomNumber(psudoRandom,colorIndex);\n\n    col = GREEN;\n    \n    n = step(float(colorIndex),1.0) * step(0.0, float(colorIndex));\n    col = mix(col,GREEN,n);\n    \n    n = step(float(colorIndex),2.0) * step(1.0, float(colorIndex));\n    col = mix(col,SHADE1,n);\n\n    n = step(float(colorIndex),3.0) * step(2.0, float(colorIndex));\n    col = mix(col,SHADE2,n);\n\n    n = step(float(colorIndex),4.0) * step(3., float(colorIndex));\n    col = mix(col,SHADE3,n);\n\n    float colorS = get_pixelated_moving_colors(uv0, vec2(-11,0), 5.5);\n    if (.59 >= colorS)\n        col *= CLOUDED;\n    else if(.64 >= colorS)\n        col *= SKY;\n\n\n    fragColor = vec4(col, 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}