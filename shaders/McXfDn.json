{
    "Shader": {
        "info": {
            "date": "1723609283",
            "description": "attract / repel animal motion",
            "flags": 48,
            "hasliked": 0,
            "id": "McXfDn",
            "likes": 4,
            "name": "SpaceWorms_UI",
            "published": 3,
            "tags": [
                "motion",
                "animal"
            ],
            "usePreview": 0,
            "username": "kosalos",
            "viewed": 84
        },
        "renderpass": [
            {
                "code": "/*\n\nSpace Worms\nPress <Spc> to reset worm positions.\n\nDrag mouse to set positions of the 6 suns.\nThe blue suns attract.\nThe purple suns repel.\n\n*/\n\n// soft glow\nvoid drawCircle(vec2 pt, float radius, vec3 color, float glowStrength,inout vec4 fragColor,vec2 fragCoord) {\n    const float glowDistance = 200.;\n    float d = length(fragCoord-pt);\n    if(d > glowDistance) return;\n    \n    if(radius > 2.) fragColor.xyz += color * glowStrength * (1. -  d /glowDistance) * 0.03;\n    \n    if(d < radius) {\n        float d2 = length(fragCoord - vec2(-radius * 0.3,radius * 0.3) - pt);\n        fragColor.xyz = color - vec3(d2 / (radius * 3.5));\n    }\n}\n\n/*  harsh glow\nvoid drawCircle(vec2 pt, float radius, vec3 color, float glowStrength,inout vec4 fragColor,vec2 fragCoord) {\n\n    float d = length(fragCoord-pt);\n    \n    if(radius > 2. && d < 300.) fragColor.xyz += color * glowStrength/(d * 0.8); // glow\n    \n    if(d < radius) {\n        float d2 = length(fragCoord - vec2(-radius * 0.3,radius * 0.3) - pt);\n        fragColor.xyz = color - vec3(d2 / (radius * 3.5));\n    }\n   \n       // black colored edging\n //   if(radius > 5. && abs(d - radius)< 1.) fragColor.xyz = vec3(0.);\n}\n*/\n\n// ------------------------------------------------------------\n\nvoid mainImage(out vec4 O, in vec2 I) {\n    O = vec4(0.); //1.,1.,0.,1.);\n\n    // stars ------------------\n    const float starGlow = 1.;\n    vec2 center = iResolution.xy * 0.5;\n    \n    loadStarField(iChannel0);\n    for(int i=0;i<STARCOUNT;++i) {\n        float radius = 0.1 + length(star[i].xy - center) * 0.01;\n        drawCircle(star[i].xy,radius,vec3(1.),starGlow,O,I);\n    }\n\n    // worms ------------------\n    const float wormGlow = 0.6;\n    float sz = 2.;\n    for(int m=MEMORYDEPTH-1;m> 0; m -= 1) {\n        loadWormData(iChannel0,m);\n        for(int i=0;i<WORMCOUNT;++i)\n            drawCircle(worm[i].xy,sz,vec3(1.,0.3,0.),wormGlow,O,I);\n            \n        sz += 0.5;\n    }\n    loadWormData(iChannel0,0);\n    for(int i=0;i<WORMCOUNT;++i)\n        drawCircle(worm[i].xy,sz,vec3(1.,1.,0.),wormGlow * 12.,O,I);\n    \n    // suns --------------------    \n    const float sunGlow = 20.;\n    loadSunData(iChannel0);\n    for(int i=0;i<SUNCOUNT;++i) {\n        vec3 color = i < 3 ? vec3(0.8,0.,1.) : vec3(0.,1.,1.);\n        drawCircle(sun[i].xy,25.,color,sunGlow,O,I);\n    }        \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int WORMCOUNT = 5; \nconst int STARCOUNT = 150;\nconst int TOTALCOUNT = WORMCOUNT + STARCOUNT;\nconst int SUNCOUNT = 6;\nconst int MEMORYDEPTH = 30;\n\nvec4 worm[WORMCOUNT];\nvec2 star[STARCOUNT];\nvec4 sun[SUNCOUNT];\n\n// ------------------------------------------------------------\n\nvoid loadWormData(sampler2D channel,int yCoord) {\n    for(int i=0;i<WORMCOUNT;++i)\n        worm[i] = texelFetch(channel, ivec2(i,yCoord), 0);\n}\n\nvoid loadStarField(sampler2D channel) {\n    for(int i=0;i<STARCOUNT;++i)\n        star[i] = texelFetch(channel, ivec2(i + WORMCOUNT,0), 0).xy;\n}\n\nvoid loadSunData(sampler2D channel) {\n    for(int i=0;i<SUNCOUNT;++i)\n        sun[i] = texelFetch(channel, ivec2(i + TOTALCOUNT,0), 0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "bool keyClick(int ascii) {\n\treturn (texture(iChannel1,vec2((.5+float(ascii))/256.,0.25)).x > 0.);\n}\n\n// ----------------------------------------------------------\n\nvec2 rseed = vec2(12.9898, 78.233);\n\nfloat frandom(vec2 seed2) { // 0...1\n    rseed += seed2;\n    float v = sin(dot(rseed, vec2(12.9898, 78.233))) * 43758.5453;\n    rseed.x = rseed.y + iTime;\n    rseed.y = v - float(iFrame);\n\treturn fract(v);\n}\n\nvec4 initializeStar(vec2 seed2,int spacing) {  // 0 = near center of screen, 1 = anywhere\n  vec4 coord = vec4(iResolution.xy * 0.5, 0.,0.);\n  float space = (spacing == 0) ? 25. : 210.;\n  coord.x += -space + frandom(seed2) * space * 2.;\n  coord.y += -space + frandom(seed2) * space * 2.;\n  return coord;\n}\n\nbool initializeWorm(inout vec4 O, in vec2 U) {\n    ivec2 I = ivec2(U);\n    if(I.y > 0) return false;\n\n    if(I.x < WORMCOUNT) {    \n        O.x = 10. + U.x * iResolution.x / float(WORMCOUNT+1);\n        O.y = iResolution.y * 0.5;\n        O.z = 2. + cos(U.x * 10.2) * 10.;\n        O.w = 2.2 + U.x * 1.;\n        return true;\n    }\n    \n    return false;\n}\n\n// ----------------------------------------------------------\n\nvoid initializeStorage(inout vec4 O, in vec2 U) {\n    ivec2 I = ivec2(U);\n    if(I.y > 0) return;\n    \n    if(I.x < WORMCOUNT) {    \n        initializeWorm(O,U);\n        return;\n    }\n    \n    if(I.x < TOTALCOUNT) {\n        O = initializeStar(U,1);\n        return;\n    }\n    \n    if(I.x < TOTALCOUNT + SUNCOUNT) {\n        int index = I.x - (TOTALCOUNT + SUNCOUNT);\n        float angle = float(index) * 3.141592654 * 2. / float(SUNCOUNT);\n        O.x = iResolution.x * 0.5 + cos(angle) * iResolution.x * 0.3;\n        O.y = iResolution.y * 0.5 + sin(angle) * iResolution.y * 0.3;\n        float speed = 1.4 + float(index) * 0.2;\n        O.z = cos(angle) * speed;\n        O.w = sin(angle) * speed;\n        return;\n    }\n}\n\n// ---------------------------------------------------------\n\nfloat SUNMASS = 7000.;\n\nvoid mainImage(out vec4 O, in vec2 U) {\n    if(iFrame < 1) {  // reset all settings on coldstart\n        initializeStorage(O,U);\n        return; \n    }\n\n    if(keyClick(32)) {  // reset worms via <Spc> keypress\n        if(initializeWorm(O,U))\n        return;\n    }\n\n    ivec2 I = ivec2(U);\n    \n    // update worms ------------------------------------\n    if(I.x < WORMCOUNT) {\n        if(I.y == 0) {\n            O = texelFetch(iChannel0, ivec2(I.x,0), 0); // current position and velocity\n    \n            // velocity affected by suns --------\n            loadSunData(iChannel0);\n            for(int s=0;s<SUNCOUNT;++s) {\n                vec2 dd = O.xy - sun[s].xy; \n                float rs = dd.x * dd.x + dd.y * dd.y;\n\n                if(rs > 0.) {\n                    float v = (SUNMASS / rs) / sqrt(rs);\n                    vec2 delta = v * dd;\n                    if(s > 2) delta = -delta; // 2nd half of Suns are repellant\n                    \n                    if(length(delta) < 100.)\n                        O.zw += delta;\n\n                    if(length(O.zw) > 20.) O.zw *= 0.95;\n                }\n            }\n            \n            // bounce off screen edges -------------\n            const float EDGE = 20.;\n            O.x += O.z;\n            if(O.x < EDGE) { O.x = EDGE; O.z = -O.z; } else\n            if(O.x > iResolution.x-EDGE) { O.x = iResolution.x-EDGE; O.z = -O.z; }\n\n            O.y += O.w;\n            if(O.y < EDGE) { O.y = EDGE; O.w = -O.w; } else \n            if(O.y > iResolution.y-EDGE) { O.y = iResolution.y-EDGE; O.w = -O.w; }\n            return;\n        }\n\n        // update worm 'memory' by copying the position and velocity of memory cell one cycle more current than you are\n        if(I.y < MEMORYDEPTH) \n            O = texelFetch(iChannel0, ivec2(I.x,I.y-1), 0);\n        \n        return;\n     }\n     \n    // update starfield ------------------------------------\n    vec2 center = iResolution.xy * 0.5;\n    const float speedFactor = 1.02;\n    \n    if(I.x < TOTALCOUNT) {\n        O = texelFetch(iChannel0, ivec2(I.x,0), 0);\n        \n        O.x = center.x + (O.x - center.x) * speedFactor; \n        if(O.x < 0. || O.x > iResolution.x) {\n            O = initializeStar(U,0);\n            return;\n        }\n        \n        O.y = center.y + (O.y - center.y) * speedFactor; \n        if(O.y < 0. || O.y > iResolution.y) {\n            O = initializeStar(U,0);\n            return;\n        }\n        \n        return;\n    }\n    \n    // update suns --------------------------------    \n    int bestIndex = -1;\n    O = texelFetch(iChannel0, ivec2(I.x,0), 0);\n\n    if(iMouse.z > 0.) {     // mouse down or dragged\n        float dist,bestDist = 999.;\n        loadSunData(iChannel0);\n\n        for(int i=0;i<SUNCOUNT;++i) {\n            dist = length(sun[i].xy - iMouse.xy);\n            if(dist < 100. && dist < bestDist) {\n                bestDist = dist;\n                bestIndex = i;\n            }\n        }\n        \n        if(bestIndex >= 0 && I.x == TOTALCOUNT+bestIndex)\n                O.xy = iMouse.xy;\n    }\n    \n    // bounce off screen edges -------------\n    const float EDGE2 = 50.;\n    O.x += O.z;\n    if(O.x < EDGE2) { O.x = EDGE2; O.z = -O.z; } else\n    if(O.x > iResolution.x-EDGE2) { O.x = iResolution.x-EDGE2; O.z = -O.z; }\n\n    O.y += O.w;\n    if(O.y < EDGE2) { O.y = EDGE2; O.w = -O.w; } else \n    if(O.y > iResolution.y-EDGE2) { O.y = iResolution.y-EDGE2; O.w = -O.w; }\n    return;\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}