{
    "Shader": {
        "info": {
            "date": "1614532494",
            "description": "My first raymarching\nReference: http://wgld.org/d/glsl/g012.html",
            "flags": 0,
            "hasliked": 0,
            "id": "WtGfzG",
            "likes": 1,
            "name": "Sphere repetitions for clubber",
            "published": 3,
            "tags": [
                "3d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "xenn",
            "viewed": 308
        },
        "renderpass": [
            {
                "code": "// Fork of \"Sphere repetitions\" by xenn. https://shadertoy.com/view/WsGfzy\n// 2021-02-28 17:13:06\n\n// Fork of \"Sphere repetition\" by FMS_Cat. https://shadertoy.com/view/4sXSWX\n// 2020-12-07 18:20:04\n// The following block is needed for Clubber integration\n#ifndef CLUBBER\nvec4 iMusic[4];\nconst float iTransition = 1.0;\n#define CLUBBER_R 0.0\n#define CLUBBER_G 0.0\n#define CLUBBER_B  0.10\n#define CLUBBER_A 0.0\n#endif\n// Clubber end\nvec4 Clubber = vec4(0.);\nfloat distFunc(vec3 p){\n    return length(mod(p+vec3(0,0,mod(-iTime*10.,4.)),4.)-2.)-.4;\n}\n\nvec3 getNormal(vec3 p){\n\tfloat d=01.1;\n\treturn normalize(vec3(\n\t\tdistFunc(p+vec3(  d, 0.0, 0.0))-distFunc(p+vec3( -d, 0.0, 0.0)),\n\t\tdistFunc(p+vec3(0.0,   d, 0.0))-distFunc(p+vec3(0.0,  -d, 0.0)),\n\t\tdistFunc(p+vec3(0.0, 0.0,   d))-distFunc(p+vec3(0.0, 0.0,  -d))\n\t));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 p=(fragCoord.xy*2.-iResolution.xy)/iResolution.x;\n\tvec3 camP=vec3(0.,0.,1.);\n\tvec3 camC=vec3(sin(iTime*.7)*.3,0.,0.);\n\tvec3 camU=normalize(vec3(sin(iTime)*.1,1.,0.));\n\tvec3 camS=cross(normalize(camC-camP),camU);\n\tvec3 ray=normalize(camS*p.x+camU*p.y+(camC-camP));\n\t\n\tfloat dist=01.;\n\tfloat rayL=02.5;\n\tvec3  rayP=camP;\n\tfor(int i=0;i<64;i++){\n\t\tdist=distFunc(rayP);\n\t\trayL+=dist;\n\t\trayP=camP+ray*rayL;\n\t}\n\t\n\tif(abs(dist)<0.01){\n\t\tfloat fragR=dot(-ray,getNormal(rayP));\n\t\tfloat fragG=.0+(02.251*CLUBBER_G);\n\t\tfloat fragB=dot(vec3(0,1,1),getNormal(rayP));\n\t\tfragColor=vec4(vec3(fragR,fragG,fragB)*10./rayL,1.);\n\t}else{\n\t\tfragColor=vec4(vec3(0.0), 1.0);\n\t}\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}