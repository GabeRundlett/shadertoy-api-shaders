{
    "Shader": {
        "info": {
            "date": "1720702995",
            "description": "regular polygons",
            "flags": 0,
            "hasliked": 0,
            "id": "XXVSzG",
            "likes": 5,
            "name": "another regular polygon",
            "published": 3,
            "tags": [
                "polygon"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 127
        },
        "renderpass": [
            {
                "code": "// signed distance to a n-star polygon with external angle en\nfloat f_n_sdist_rpolyg(in vec2 p, in float r, in int n )\n{\n    // these 4 lines can be precomputed for a given shape\n    float an = 3.141593/float(n);\n    vec2  acs = vec2(cos(an),sin(an));\n\n    // reduce to first sector\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n\n    // line sdf\n    p -= r*acs;\n    p.y += clamp( -p.y, 0.0, r*acs.y);\n    return length(p)*sign(p.x);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 o_trn = (fragCoord.xy-iResolution.xy*.5)/iResolution.yy;\n    o_trn*=2.;\n    float n_its = 33.;\n    \n    float n_tau = 6.2831;\n    vec4 o_col_min = vec4(0.);\n    vec4 o_col = vec4(0.);\n    float n_min = 1.;\n    float n_ang_nor = fract((atan(o_trn.y, o_trn.x)/n_tau));\n    for(float n_it_nor = .0; n_it_nor<1.;n_it_nor+=(1./n_its)){\n        \n        float n_radius = n_it_nor+(sin((iTime+n_it_nor*3.)*n_tau)*.5+.5)*(1./n_its/2.);\n        \n        \n        int n_lines = 5;\n        float n_rad = sin((iTime*.2+n_it_nor)*n_tau)*(1.-n_radius);\n        mat2 o_rot = mat2(-sin(n_rad), cos(n_rad), cos(n_rad), sin(n_rad));\n        vec2 o = o_trn * o_rot;\n        float n = f_n_sdist_rpolyg(\n            o, \n            n_radius,\n            n_lines\n        );\n        \n        n = abs(n);\n        n_min = min(n, n_min);\n        n = n/n_radius;\n        \n        n = pow(n, 1./n_its)*0.95;//*2.01;//*(1.+1./9.);\n        n = clamp(n, 0., 1.);\n        n = 1.-n;\n        //n = 1.-pow(abs(1.-n), 2.);\n        float n3 = (sin((iTime*.02+n_it_nor)*n_tau)*.5+.5);\n        o_col += vec4(n)*vec4(n3, 1.-n3, fract(.5+n3), 1.);\n        \n    }\n    \n    float n2 = pow(n_min, 1./4.);\n    fragColor = o_col*(1.-n2);\n    //fragColor = sqrt(fragColor);\n    //fragColor = vec4(n2);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}