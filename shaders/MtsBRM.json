{
    "Shader": {
        "info": {
            "date": "1511454395",
            "description": "ref: [url]https://www.shadertoy.com/view/4llfz7[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "MtsBRM",
            "likes": 2,
            "name": "Response/phi: Ray Marching",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "phi16",
            "viewed": 528
        },
        "renderpass": [
            {
                "code": "// There may be more good style... but at least this solves clone-function problem.\n\n// !\nstruct Distance {\n\tfloat d; // distance\n    int mat; // material\n};\n\n// choose the nearest material\nDistance dmin(Distance a, Distance b)\n{\n\tif(a.d < b.d) return a;\n    else return b;\n}\n\n\n// surface - distance function\nfloat plane(vec3 r)\n{\n\treturn r.y;\n}\n// sphere - distance function\nfloat sphere(vec3 r, float R)\n{ \n    return length(r) - R; \n}\n\n//  distance and material from the scene\nDistance dist(vec3 r)\n{\n\tDistance d1 = Distance(plane(r), 1);\n    vec3 sphereCenter = vec3(0.8,0.0,-4.2) + vec3(iMouse.xy/iResolution.xy,0); // !\n    Distance d2 = Distance(sphere(r - sphereCenter, 0.5), 2);\t\n    Distance d = dmin(d1,d2); // !\n    return d;\n}\n\n// shadow is just sum of distances from the scene while marching towards light (l)\nfloat shadow(vec3 p, vec3 l, float d)\n{\n\tfloat o=0.0;\n\tfor (int i=12; i > 0; i--) \n\t{\n\t\to += dist( p+l*float(i)*d ).d;\n\t}\n\treturn clamp(o, 0.0, 1.0);\n}\n\n// normal vector\n// http://www.pouet.net/topic.php?which=7920&page=10 by rear\nvec3 normal(vec3 p)\n{\n\t#define dr 1e-4\n\tvec3 drx = vec3(dr,0,0);\n\tvec3 dry = vec3(0,dr,0);\n\tvec3 drz = vec3(0,0,dr);\n\treturn ( vec3( dist(p+drx).d, dist(p+dry).d, dist(p+drz).d ) - dist(p).d) / dr;\n}\n\n#define ITER 290\t\n#define EPS 0.00001\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n\tvec2 r = (fragCoord.xy / iResolution.xy);\n\tr.x*=(iResolution.x/iResolution.y);\t\n\t\t\n    // get ray\n\tvec3 camera = vec3(1.0,2.2,1.0);\n\tvec3 p = vec3(r.x, r.y+1.0, -1.0);\n\tvec3 dir = normalize(p-camera);\n\t\n    // ray marching\n    Distance d;\n\tfor(int i=0; i<ITER; i++)\n\t{\n\t\td = dist( p );\n\t\tif(d.d < EPS)\n\t\t    break;\n\t\tp = p + dir * d.d;\n\t}\n\n    int m = d.mat;\n    vec3 materialcolor=vec3(0);\n    if(m==1) materialcolor = vec3(.6,.6,.6);\n    if(m==2) materialcolor = vec3(.8,.2,.0);\n        \n    // normal vector\n\tvec3 n = normal(p);\n\t\n    // light\n\tvec3 lightpos = vec3(1.2, 4.2, -0.5);\n\tfloat light = 1.0 + 0.01*(dot(n,lightpos));\n\tvec3 lightdir = normalize(lightpos-p);\n\t\t\n    // use soft shadows\n\tlight *= shadow(p, lightdir, 0.01);\n\t\t\n\tvec3 color = vec3(light);\n\tfragColor = vec4(materialcolor*color,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}