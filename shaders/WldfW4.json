{
    "Shader": {
        "info": {
            "date": "1612751630",
            "description": "You sort of get used to it O_O",
            "flags": 48,
            "hasliked": 0,
            "id": "WldfW4",
            "likes": 4,
            "name": "360 Flythrough",
            "published": 3,
            "tags": [
                "raymarching",
                "cubemap",
                "unwrap",
                "spherical",
                "flythrough",
                "360"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 287
        },
        "renderpass": [
            {
                "code": "// CUBIC or SPHERICAL\n#define CUBIC\n\n#define inBounds(p, b) all(greaterThan(p, b.xy)) && all(lessThan(p, b.zw))\n#define mapCoords(p, b) (p - b.xy) / (b.zw - b.xy)\n\nfloat mapScene(in vec3 p) {\n    p = mod(p, 2.0) - 1.0;\n    return length(p) - 0.25;\n}\n\nvec3 getNormal(in vec3 p) {\n    return normalize(vec3(mapScene(p + GRADIENT_STEP.xyy) - mapScene(p - GRADIENT_STEP.xyy),\n                          mapScene(p + GRADIENT_STEP.yxy) - mapScene(p - GRADIENT_STEP.yxy),\n                          mapScene(p + GRADIENT_STEP.yyx) - mapScene(p - GRADIENT_STEP.yyx)));\n}\n\nvec4 unwrapCubemap(in vec2 p, int method) {\n    if (method == 0) {\n        vec2 uv = p / iResolution.xy;\n\n        vec4  front = vec4(0.00, 0.333, 0.25, 0.666);\n        vec4   left = vec4(0.25, 0.333, 0.50, 0.666);\n        vec4   back = vec4(0.50, 0.333, 0.75, 0.666);\n        vec4  right = vec4(0.75, 0.333, 1.00, 0.666);\n        vec4    top = vec4(0.50, 0.666, 0.75, 1.000);\n        vec4 bottom = vec4(0.50, 0.000, 0.75, 0.333);\n\n        vec3 rd;\n        int face = 7;\n        if (inBounds(uv,  front)) rd = vec3(mapCoords(uv,  front) * 2.0 - 1.0,  1.0).xyz * vec3(-1.0, 1.0,  1.0); face = 1;\n        if (inBounds(uv,   left)) rd = vec3(mapCoords(uv,   left) * 2.0 - 1.0, -1.0).zyx * vec3( 1.0, 1.0, -1.0); face = 2;\n        if (inBounds(uv,   back)) rd = vec3(mapCoords(uv,   back) * 2.0 - 1.0, -1.0).xyz * vec3( 1.0, 1.0,  1.0); face = 3;\n        if (inBounds(uv,  right)) rd = vec3(mapCoords(uv,  right) * 2.0 - 1.0,  1.0).zyx * vec3( 1.0, 1.0,  1.0); face = 4;\n        if (inBounds(uv,    top)) rd = vec3(mapCoords(uv,    top) * 2.0 - 1.0,  1.0).xzy * vec3( 1.0, 1.0,  1.0); face = 5;\n        if (inBounds(uv, bottom)) rd = vec3(mapCoords(uv, bottom) * 2.0 - 1.0, -1.0).xzy * vec3( 1.0, 1.0, -1.0); face = 6;\n\n        return vec4(normalize(rd), face < 7);\n    }\n\n    vec2 angle = (p / iResolution.xy * 2.0 - 1.0) * vec2(3.14, 1.57);\n\n    float cy = cos(angle.x), sy = sin(angle.x);\n    float cp = cos(angle.y), sp = sin(angle.y);\n    return vec4(cy * cp, sp, sy * cp, true);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.5, 0.5, 0.5, 1.0);\n\n    #ifdef CUBIC\n    vec4 unwrapped = unwrapCubemap(fragCoord, 0);\n    #endif\n\n    #ifdef SPHERICAL\n    vec4 unwrapped = unwrapCubemap(fragCoord, 1);\n    #endif\n\n    if (bool(unwrapped.w)) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n        vec2 screenCenter = 0.5 * iResolution.xy;\n        vec2 uv = (fragCoord - screenCenter) / iResolution.y;\n        vec3 ro = getCameraPosition();\n        vec3 rd = unwrapped.xyz;\n\n        vec2 viewDir = (iMouse.xy - screenCenter) / iResolution.y * TWO_PI * ROTATION_SPEED;\n        float cy = cos(viewDir.x), sy = sin(viewDir.x);\n        float cp = cos(viewDir.y), sp = sin(viewDir.y);\n\n        rd.yz *= mat2(cp, -sp, sp, cp);\n        rd.xz *= mat2(cy, -sy, sy, cy);\n\n        float t = 0.0;\n        for (int i=0; i < MAX_ITERATIONS; i++) {\n            vec3 p = ro + rd * t;\n            float d = mapScene(p);\n            if (d < MIN_HIT_DISTANCE) {\n                vec3 n = getNormal(p);\n                vec3 l = vec3(-0.58, 0.58, 0.58);\n                fragColor.rgb += max(0.0, dot(n, l));\n                break;\n            }\n\n            if (t > MAX_TRACE_DISTANCE) {\n                break;\n            }\n\n            t += d;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Raymarching constants:\nconst vec3 GRADIENT_STEP = vec3(0.001, 0.0, 0.0);\nconst float MAX_TRACE_DISTANCE = 100.0;\nconst float MIN_HIT_DISTANCE = 0.001;\nconst int MAX_ITERATIONS = 50;\n\n// Math constants:\nconst float TWO_PI = 6.2832;\n\n// Amount by which the camera moves and rotates:\nconst float STEP_SIZE = 0.1;\nconst float ROTATION_SPEED = 0.5;\n\n// Addresses to viewing data:\nconst ivec2 CAM_POS_ADDR = ivec2(0, 0);\n\n// Key codes from iq's keyboard input demo (https://www.shadertoy.com/view/lsXGzf):\nconst int    KEY_UP = 38;\nconst int  KEY_DOWN = 40;\nconst int KEY_RIGHT = 39;\nconst int  KEY_LEFT = 37;\n\n#define getCameraPosition() texelFetch(iChannel0, CAM_POS_ADDR, 0).xyz\n\n#define     keyUpPressed() bool(texelFetch(iChannel1, ivec2(38, 0), 0).x)\n#define   keyDownPressed() bool(texelFetch(iChannel1, ivec2(40, 0), 0).x)\n#define  keyRightPressed() bool(texelFetch(iChannel1, ivec2(39, 0), 0).x)\n#define   keyLeftPressed() bool(texelFetch(iChannel1, ivec2(37, 0), 0).x)\n\n// Calculates camera axes:\nmat3 getCamera(in vec2 viewDir) {\n    vec2 c = cos(viewDir); vec2 s = sin(viewDir);\n    return mat3(vec3(       c.x, 0.0,         s.x),  // Camera right axis   (x)\n                vec3(s.x * -s.y, c.y, -c.x * -s.y),  // Camera up axis      (y)\n                vec3(s.x *  c.y, s.y, -c.x *  c.y)); // Camera forward axis (z)\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    if (iFrame > 0) {\n        ivec2 addr = ivec2(fragCoord);\n        if (addr == CAM_POS_ADDR) {\n            fragColor = vec4(getCameraPosition(), 1.0);\n\n            vec2 viewDir = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y * TWO_PI * ROTATION_SPEED;\n            mat3 cam = getCamera(viewDir);\n\n            if (keyUpPressed()) {\n                fragColor.xyz += cam[2] * STEP_SIZE;\n            }\n\n            if (keyDownPressed()) {\n                fragColor.xyz -= cam[2] * STEP_SIZE;\n            }\n\n            if (keyRightPressed()) {\n                fragColor.xyz += cam[0] * STEP_SIZE;\n            }\n\n            if (keyLeftPressed()) {\n                fragColor.xyz -= cam[0] * STEP_SIZE;\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}