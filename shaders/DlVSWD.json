{
    "Shader": {
        "info": {
            "date": "1686100271",
            "description": "based on the tutorial here, of course: https://www.youtube.com/watch?v=f4s1h2YETNY\nit showed off some nice tricks that got me inspired",
            "flags": 0,
            "hasliked": 0,
            "id": "DlVSWD",
            "likes": 9,
            "name": "neon-psychedelic-1",
            "published": 3,
            "tags": [
                "psychedelic",
                "geometric"
            ],
            "usePreview": 0,
            "username": "LydianLights",
            "viewed": 358
        },
        "renderpass": [
            {
                "code": "vec3 mainPass(in vec2 fragCoord)\n{\n    vec2 uv = 2.0 * (fragCoord / iResolution.xy) - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 uv0 = uv;\n    \n    float d0 = length(uv0);\n    float y0 = 0.5 * sin(0.25 * iTime) + 0.5;\n    \n    vec3 finalColor;\n    \n    for (float i = 0.0; i < 5.0; i++)\n    {\n        \n        uv = fract(uv * mix(1.0, 1.3, y0)) - 0.5;\n        \n        float p = pow(2.0, -d0 * 3.5);\n        float d = length(uv) * p;\n        \n        vec3 color = palette(d0 + i * 0.1 + iTime * 0.5);\n        \n        float t = 0.05 * (5.0 - i) * iTime;\n        t = t + 0.05 * sin(3.0 * iTime) * sin(2.0 * iTime);\n        float y = 0.5 * cos(t) + 0.5;\n\n        d = sin(mix(5.0, 19.0, y) * d + 3.0 * t) * sin(mix(31.0, 7.0, y) * d + 5.0 * t) + 0.3 * sin(mix(70.0, 100.0, y) * d + t);\n        d = abs(d);\n        float q = 0.006 * mix(1.0, 8.0, p);\n        d = pow(q / d, 1.6);\n\n        color *= d;\n        \n        finalColor += color;\n    }\n    \n     return finalColor;\n}\n\nvec3 antialias(in vec2 fragCoord)\n{\n    const float AA_STAGES = 3.0;\n    const float AA_TOTAL_PASSES = AA_STAGES * AA_STAGES + 1.0;\n    const float AA_JITTER = 0.5;\n    \n    vec3 color = mainPass(fragCoord);\n    for (float x = 0.0; x < AA_STAGES; x++)\n    {\n        for (float y = 0.0; y < AA_STAGES; y++)\n        {\n            vec2 offset = AA_JITTER * (2.0 * hash22(vec2(x, y)) - 1.0);\n            color += mainPass(fragCoord + offset);\n        }\n    }\n    return color / AA_TOTAL_PASSES;\n}\n\nvec3 gamma(in vec3 color)\n{\n    return pow(color, vec3(1.0 / 2.2));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 color = antialias(fragCoord);\n    color = gamma(color);\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://iquilezles.org/articles/palettes/\nvec3 palette(in float t)\n{\n    vec3 a = vec3(0.708, 0.651, 0.715);\n    vec3 b = vec3(0.684, 0.423, 0.166);\n    vec3 c = vec3(0.706, 1.319, 0.117);\n    vec3 d = vec3(5.639, 2.829, 3.690);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\n// https://www.shadertoy.com/view/4djSRW\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}