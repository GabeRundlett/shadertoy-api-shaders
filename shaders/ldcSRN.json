{
    "Shader": {
        "info": {
            "date": "1457934703",
            "description": "Testing the ACES operator (fitted by Stephen Hill). First: clamped, linear. Second: Reinhard tonemapping. Third: Filmic tonemapping. Fourth: ACES Fitted.",
            "flags": 0,
            "hasliked": 0,
            "id": "ldcSRN",
            "likes": 37,
            "name": "ACES Operator",
            "published": 3,
            "tags": [
                "tonemapping",
                "reinhard",
                "filmic",
                "aces"
            ],
            "usePreview": 1,
            "username": "paniq",
            "viewed": 4108
        },
        "renderpass": [
            {
                "code": "// linear white point\nconst float W = 11.2;\n\n// uncomment to render solid pastel colors instead\n#define SHOW_TEXTURE\n\n// Filmic Reinhard, a simpler tonemapping\n// operator with a single coefficient\n// regulating the toe size.\n\n// The operator ensures that f(0.5) = 0.5\n\n// T = 0: no toe, classic Reinhard\nconst float T = 0.01;\n\nfloat filmic_reinhard_curve (float x) {\n    float q = (T + 1.0)*x*x;    \n\treturn q / (q + x + T);\n}\n\nfloat inverse_filmic_reinhard_curve (float x) {\n    float q = -2.0 * (T + 1.0) * (x - 1.0);\n    return (x + sqrt(x*(x + 2.0*T*q))) / q;\n}\n\nvec3 filmic_reinhard(vec3 x) {\n    float w = filmic_reinhard_curve(W);\n    return vec3(\n        filmic_reinhard_curve(x.r),\n        filmic_reinhard_curve(x.g),\n        filmic_reinhard_curve(x.b)) / w;\n}\n\nvec3 inverse_filmic_reinhard(vec3 x) {\n    x *= filmic_reinhard_curve(W);\n    return vec3(\n        inverse_filmic_reinhard_curve(x.r),\n        inverse_filmic_reinhard_curve(x.g),\n        inverse_filmic_reinhard_curve(x.b));\n}\n\n// Reinhard\n\nfloat reinhard_curve (float x) {\n\treturn x / (1.0 + x);\n}\n\nfloat inverse_reinhard_curve (float x) {\n    return x / (1.0 - x);\n}\n\nvec3 reinhard(vec3 x) {\n    float w = reinhard_curve(W);\n    return vec3(\n        reinhard_curve(x.r),\n        reinhard_curve(x.g),\n        reinhard_curve(x.b)) / w;\n}\n\nvec3 inverse_reinhard(vec3 x) {\n    x *= reinhard_curve(W);\n    return vec3(\n        inverse_reinhard_curve(x.r),\n        inverse_reinhard_curve(x.g),\n        inverse_reinhard_curve(x.b));\n}\n\n// filmic (John Hable)\n\n// exposure bias for tonemapping\nconst float exp_bias = 1.6;\n\n\n// shoulder strength\nconst float A = 0.22;\n// linear strength\nconst float B = 0.3;\n// linear angle\nconst float C = 0.1;\n// toe strength\nconst float D = 0.20;\n// toe numerator\nconst float E = 0.01;\n// toe denominator\nconst float F = 0.30;\nfloat filmic_curve(float x) {\n\treturn ((x*(0.22*x+0.1*0.3)+0.2*0.01)/(x*(0.22*x+0.3)+0.2*0.3))-0.01/0.3;\n}\n// ((1.6*x*(0.22*1.6*x+0.1*0.3)+0.2*0.01)/(1.6*x*(0.22*1.6*x+0.3)+0.2*0.3))-0.01/0.3\n\nfloat inverse_filmic_curve(float x) {\n    float q = B*(F*(C-x) - E);\n    float d = A*(F*(x - 1.0) + E);\n    return (q -sqrt(q*q - 4.0*D*F*F*x*d)) / (2.0*d);\n}\nvec3 filmic(vec3 x) {\n    float w = filmic_curve(W);\n    return vec3(\n        filmic_curve(x.r),\n        filmic_curve(x.g),\n        filmic_curve(x.b)) / w;\n}\nvec3 inverse_filmic(vec3 x) {\n    x *= filmic_curve(W);\n    return vec3(\n        inverse_filmic_curve(x.r),\n        inverse_filmic_curve(x.g),\n        inverse_filmic_curve(x.b));\n}\n\nfloat filmic_reinhard2(float x) {\n    x *= 1.32;\n    float k = 23.0;\n\treturn (exp(-x*k) - 1.0)/k - 1.0/(x + 1.0) + 1.0;\n}\n\nvec3 filmic_reinhard2(vec3 x) {\n    float w = filmic_reinhard2(W);\n    return vec3(\n        filmic_reinhard2(x.r),\n        filmic_reinhard2(x.g),\n        filmic_reinhard2(x.b)) / w;\n}\n\n///////////////////////////////////////////////\n\n// ACES fitted\n// from https://github.com/TheRealMJP/BakingLab/blob/master/BakingLab/ACES.hlsl\n\nconst mat3 ACESInputMat = mat3(\n    0.59719, 0.35458, 0.04823,\n    0.07600, 0.90834, 0.01566,\n    0.02840, 0.13383, 0.83777\n);\n\n// ODT_SAT => XYZ => D60_2_D65 => sRGB\nconst mat3 ACESOutputMat = mat3(\n     1.60475, -0.53108, -0.07367,\n    -0.10208,  1.10813, -0.00605,\n    -0.00327, -0.07276,  1.07602\n);\n\nvec3 RRTAndODTFit(vec3 v)\n{\n    vec3 a = v * (v + 0.0245786) - 0.000090537;\n    vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n    return a / b;\n}\n\nvec3 ACESFitted(vec3 color)\n{\n    color = color * ACESInputMat;\n\n    // Apply RRT and ODT\n    color = RRTAndODTFit(color);\n\n    color = color * ACESOutputMat;\n\n    // Clamp to [0, 1]\n    color = clamp(color, 0.0, 1.0);\n\n    return color;\n}\n\n//---------------------------------------------------------------------------------\n\nfloat linear_srgb(float x) {\n    return mix(1.055*pow(x, 1./2.4) - 0.055, 12.92*x, step(x,0.0031308));\n}\nvec3 linear_srgb(vec3 x) {\n    return mix(1.055*pow(x, vec3(1./2.4)) - 0.055, 12.92*x, step(x,vec3(0.0031308)));\n}\n\nfloat srgb_linear(float x) {\n    return mix(pow((x + 0.055)/1.055,2.4), x / 12.92, step(x,0.04045));\n}\nvec3 srgb_linear(vec3 x) {\n    return mix(pow((x + 0.055)/1.055,vec3(2.4)), x / 12.92, step(x,vec3(0.04045)));\n}\n\n//---------------------------------------------------------------------------------\n\nvec3 pastelizer(float h) {\n    h = fract(h + 0.92620819117478) * 6.2831853071796;\n    vec2 cocg = 0.25 * vec2(cos(h), sin(h));\n    vec2 br = vec2(-cocg.x,cocg.x) - cocg.y;\n    vec3 c = 0.729 + vec3(br.y, cocg.y, br.x);\n    return c * c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    // exposure goes from -2^S to +2^S\n    float S = 6.0;\n    // exposure gradient over picture\n    float exposure = exp2((uv.y - 0.5)*2.0*S);\n    \n    vec3 color;\n#ifdef SHOW_TEXTURE\n    color = texture(iChannel0, vec2(mod(uv.x,0.25),uv.y) - iTime * 0.1).rgb;\n    color = srgb_linear(color);\n#else    \n    color = pastelizer(fract(uv.x * 4.0) * 0.2 - iTime * 0.1); \n#endif    \n    // add small bias to erase fringes\n    //color += 0.001;\n    color *= exposure;\n    if (uv.x > 0.75) {\n        // attempting to match contrast levels\n        color = pow(color, vec3(0.833));\n        color *= 1.07;\n        //color = inverse_filmic_reinhard(filmic_reinhard(color));\n        //color = filmic_reinhard(color);\n        color = ACESFitted(color);\n        //color = filmic_reinhard2(color);\n    } else if (uv.x > 0.5) {\n        color *= exp_bias;\n        color = filmic(color);\n    } else if (uv.x > 0.25) {\n        color = reinhard(color);\n    } else {\n    }\n    // sRGB mixdown    \n    color = clamp(linear_srgb(color), 0.0, 1.0);\n    color *= min(1.0, abs(uv.x - 0.5)*400.0);\n    color *= min(1.0, abs((uv.x+0.5*0.5)- 0.5)*400.0);\n    color *= min(1.0, abs((uv.x-0.5*0.5)- 0.5)*400.0);\n    \n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}