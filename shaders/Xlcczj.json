{
    "Shader": {
        "info": {
            "date": "1533129180",
            "description": "more info: [url]https://shadertoyunofficial.wordpress.com/2016/07/20/special-shadertoy-features/[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "Xlcczj",
            "likes": 6,
            "name": "Example2 - mainCubemap",
            "published": 3,
            "tags": [
                "3d",
                "maincubemap",
                "gpcubemaps"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1280
        },
        "renderpass": [
            {
                "code": "#define rot(a) mat2( sin(a+vec4(0,33,11,0)) )  // https://www.shadertoy.com/view/XlsyWX\n\n#define F0 vec3( 1 , 1.- 2.*(U/R).yx )                 // to index each face map\n#define F1 vec3( 2.*(U/R).x -1. , 1 , 2.*(U/R).y -1. )\n#define F2 vec3( 2.*(U/R).x -1. , 1.- 2.*(U/R).y , 1 )\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 R = iResolution.xy;\n    float FOV = .5;\n    vec3 D = normalize( vec3( 1./FOV, (U+U-R)/R.y ) ); // ray direction\n//  Note that D see faceID 0, -D see faceID 3\n//            D.zxy    \"   1, -D.zxy   \"    4 \n//            D.yzx    \"   2, -D.yzx   \"    5\n//  see F0,F1,F2 for accurate indexing of face maps.\n    \n    D.xz *= rot(iTime/2.);\n    D.yz *= rot(iTime/2.);               \n   \n    O = texture( iChannel0, D );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) ) // https://www.shadertoy.com/view/ll2cDc\n\nvoid mainCubemap( out vec4 O, vec2 U, vec3 C, vec3 D ) // note that C==vec3(0)\n    //           out Color, MapCoord, Center(=0), rayDir\n{\n    // --- part specific to each of the 6 faces\n    \n    vec3 A = abs(D); // seek for max direction: i = invmax(abs(D[i]))\n    int i=0; \n    float      M = A.x; \n    if (A.y>M) M = A.y, i=1;\n    if (A.z>M) M = A.z, i=2;\n    int  faceID = i + 3* int(D[i]<0.);\n    \n    O = hue(float(faceID)/6.);\n    \n    \n    // --- part indentical on the 6 faces\n    \n    vec2 R = iResolution.xy; // always 1024\n    U = ( U+U - R ) / R.y;\n    O *= vec4( .8+.2*sin(34.*length(U)) );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "cubemap"
            }
        ],
        "ver": "0.1"
    }
}