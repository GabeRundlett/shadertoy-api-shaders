{
    "Shader": {
        "info": {
            "date": "1468193590",
            "description": "drawing britney in just one stroke, so fast that the ink cannot even dry... ;-)",
            "flags": 32,
            "hasliked": 0,
            "id": "4l33zN",
            "likes": 94,
            "name": "wet ink britney",
            "published": 3,
            "tags": [
                "spiral",
                "effect",
                "halftone",
                "ink",
                "wet"
            ],
            "usePreview": 1,
            "username": "flockaroo",
            "viewed": 3419
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec3 getCol(vec2 fc)\n{\n    return texture(iChannel0,fc/iResolution.xy).xyz;\n}\n\nfloat getVal(vec2 fc)\n{\n    return dot(getCol(fc),vec3(1./3.));\n}\n               \nvec2 getGrad(vec2 fc, float eps)\n{\n    vec2 e=vec2(eps,0);\n    return vec2(getVal(fc+e.xy)-getVal(fc-e.xy),\n        \t\tgetVal(fc+e.yx)-getVal(fc-e.yx))/eps;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 t1=texture(iChannel1,fragCoord.xy/100.0).xyz;\n\tvec3 t2=texture(iChannel2,fragCoord.xy/iResolution.xy).xyz;\n    vec3 col=texture(iChannel0,uv).xyz;\n    vec3 light = normalize(vec3(.5,.5,2));\n    vec3 n=normalize(vec3(getGrad(fragCoord,1.4),1.));\n    float spec = dot(reflect(vec3(0,0,-1),n),light);\n    float diff = clamp(dot(light,n),0.,1.);\n    float h = smoothstep(.5,1.,col.x);\n    float shin = mix(1.,200.,1.-h);\n    spec = pow(clamp(spec,0.,1.),shin)*shin/100.;\n    col = mix(vec3(0.0,.0,.4),vec3(1,.97,.9)*.7+0.3*t1,h);\n    float vignette=cos(1.7*length((fragCoord.xy-.5*iResolution.xy)/iResolution.x));\n\tfragColor.xyz = (col*diff + 0.8*spec)*vignette;\n\t//fragColor.xyz = vec3(1,.97,.9)*.7*(t2.y+.6)+0.3*t1;\n \t//fragColor.xyz = vec3(diff*diff);\n \t//fragColor.xyz = vec3(getVal(fragCoord));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// created by florian berger (flockaroo) - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define Res iResolution\n#define Res0 iChannelResolution[0]\nfloat twopi=6.28318531;\nfloat slope=15.;\n\nfloat posTri(float x)\n{\n    // thanks Shane for the anti-branching-fix\n    return abs(fract(x - .5) - .5)*2.;\n    //x=fract(x);\n   \t//return 2.*(x<.5?x:1.-x);\n}\n\nvec3 getRand(vec2 uv) {return texture(iChannel1,uv).xyz;}\n\nfloat spiral(vec2 pos, float slope, out vec2 coord)\n{\n    float l=length(pos);\n    float ang=atan(pos.y,pos.x)+5.0*iTime;\n    float r=posTri(ang/twopi+l/slope);\n    //coord = normalize(pos)*(floor(ang/twopi+l/slope)+0.5)*slope;\n    //floor(fract(ang/twopi)+l/slope)\n    coord = normalize(pos)*(floor(l/slope+fract(ang/twopi))-fract(ang/twopi)+.5)*slope;\n    //coord =pos;\n    coord = (coord+0.5*iResolution.xy)/ iResolution.xy;\n    //float lmax=iResolution.y*.49;\n    //if(l>lmax) r+=l-lmax;\n    return r;\n}\n\nvec3 getCol(vec2 uv)\n{\n    vec3 c=texture(iChannel0,uv,0.5*log2(slope/(Res.x/Res0.x))).xyz;\n    float d=clamp(dot(c.xyz,vec3(-0.5,1.0,-0.5)),0.0,1.0);\n    c=mix(c,vec3(1.5),1.8*d);\n    c=clamp(vec3(dot(c,vec3(1./3.))),0.,1.);\n    return c;\n    //return mix(c,vec3(1),dot(c,vec3(0,1,0)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfloat t1=texture(iChannel1,fragCoord.xy/100.0).x;\n    vec3 pattern = vec3(spiral(fragCoord-0.5*iResolution.xy,slope,uv)+0.15*(t1-.5));\n    vec3 col = getCol(uv);\n    //col=pow(col,vec3(1.));\n    //col=floor(col*8.)/8.;\n\t//fragColor = vec4(1.-smoothstep(0.85,1.15,pattern.x+0.8*(1.-col.x)+0.1));\n    float b=0.7*(1.-col.x)+0.35;\n    float c=clamp(pattern.x-1.+b,0.,1.);\n    c=b-(b-c)*(b-c)/b/b;\n    //c=sqrt(b*b-(b-c)*(b-c));\n\tfragColor = vec4(1.-c);\n    //fragColor.xyz = 0.5*fragColor.xyz + 0.5*col;\n    //fragColor.xyz = col;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}