{
    "Shader": {
        "info": {
            "date": "1540874174",
            "description": "Click - Sand\nClick + D - Delete\nClick + S - Stone\nClick + W - Water\nClick + L - Lava\n\nIf dragging powder breaks, hold down the mouse, drag off the screen and let go outside of the viewport.",
            "flags": 48,
            "hasliked": 0,
            "id": "XtdBWB",
            "likes": 11,
            "name": "Powder v0.3",
            "published": 3,
            "tags": [
                "powder"
            ],
            "usePreview": 0,
            "username": "josplode",
            "viewed": 1061
        },
        "renderpass": [
            {
                "code": "// POST-PROCESSING //\n\nconst vec4 sandColor = vec4(.9, .9, .5, 0.5);\nconst vec4 stoneColor = vec4(.5, .5, .5, 0.5);\nconst vec4 waterColor = vec4(0.1, 0.1, .9, 0.25);\nconst vec4 lavaColor = vec4(1.0, .3, .1, 1.0);\nconst vec4 steamColor = vec4(.9, .9, .9, 1.0);\n\nvoid GetAdjacent(vec2 fragCoord, out vec4 above, out vec4 below, out vec4 left, out vec4 right)\n{\n    vec2 belowUv = (fragCoord + vec2(0.0, -1.0)) / iResolution.xy;\n    below = texture(iChannel0, belowUv);\n    vec2 aboveUv = (fragCoord + vec2(0.0, 1.0)) / iResolution.xy;\n    above = texture(iChannel0, aboveUv);\n    \n    vec2 leftUv = (fragCoord + vec2(-1.0, 0.0)) / iResolution.xy;\n    left = texture(iChannel0, leftUv);\n    vec2 rightUv = (fragCoord + vec2(1.0, 0.0)) / iResolution.xy;\n    right = texture(iChannel0, rightUv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    \n    vec4 above, below, left, right;\n    GetAdjacent(fragCoord, above, below, left, right);\n    vec4[4] adj = vec4[4]( above, below, left, right);\n    \n    vec3 bloom = vec3(0.);\n    for (int i = 0; i < 4; ++i)\n    {\n        if (adj[i].rgb == lavaColor.rgb)\n        {\n            bloom += adj[i].rgb * 0.2;\n        }\n    }\n    \n    if (fragColor.rgb == stoneColor.rgb)\n    {\n        fragColor.rgb += max(lavaColor.rgb * (fragColor.a - 0.5), 0.);\n    }\n    else if (fragColor.rgb == lavaColor.rgb)\n    {\n        fragColor.rgb = mix(fragColor.rgb, stoneColor.rgb, 1. - fragColor.a);\n    }\n    \n    fragColor = vec4(fragColor.rgb + bloom, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Vertical Motion and Spawning //\n\nconst vec4 sandColor = vec4(.9, .9, .5, 0.5);\nconst vec4 stoneColor = vec4(.5, .5, .5, 0.5);\nconst vec4 waterColor = vec4(0.1, 0.1, .9, 0.25);\nconst vec4 lavaColor = vec4(1.0, .3, .1, 1.0);\nconst vec4 steamColor = vec4(.9, .9, .9, 1.0);\nconst vec4 heaterColor = vec4(1., 0., 0., 1.0);\nconst vec4 coolerColor = vec4(0., 0., 1., 0.0);\n\nconst float KEY_C     = 67.5;\nconst float KEY_D     = 68.5;\nconst float KEY_H     = 72.5;\nconst float KEY_L     = 76.5;\nconst float KEY_S     = 83.5;\nconst float KEY_W     = 87.5;\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\nfloat noise(float p){\n\tfloat fl = floor(p);\n  float fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\t\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n  vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat GetFallPercentage(vec2 coord)\n{\n    // Layout to maintain continuity\n    // and predictability. For randomness, offset grid.\n    // >>>vv>>v>v>v>v>\n    // <vvv<v<<vv<<<v<\n    \n    return noise(noise(coord.x + iTime * 3. + noise(coord.y) * 100.) - noise(coord.y + iTime * 7.));\n}\n\nvoid GetAdjacentAndReact(vec2 fragCoord, out vec4 fragColor, out vec4 above, out vec4 below, out vec4 left, out vec4 right)\n{\n    vec2 belowUv = (fragCoord + vec2(0.0, -1.0)) / iResolution.xy;\n    below = texture(iChannel1, belowUv);\n    vec2 aboveUv = (fragCoord + vec2(0.0, 1.0)) / iResolution.xy;\n    above = texture(iChannel1, aboveUv);\n    \n    vec2 leftUv = (fragCoord + vec2(-1.0, 0.0)) / iResolution.xy;\n    left = texture(iChannel1, leftUv);\n    vec2 rightUv = (fragCoord + vec2(1.0, 0.0)) / iResolution.xy;\n    right = texture(iChannel1, rightUv);\n    \n    vec4[4] adj = vec4[4]( above, below, left, right);\n    \n    // Chemical reaction\n    for (int i = 0; i < 4; ++i)\n    {\n        // Reaction table\n        if (fragColor.rgb != lavaColor.rgb && adj[i].rgb == lavaColor.rgb)\n        {\n            fragColor.a = clamp(fragColor.a + iTimeDelta * 0.5, 0., 1.);\n        }\n    }\n    \n    // Thermo reaction\n    if (fragColor.rgb == heaterColor.rgb)\n        fragColor.a = 1.0;\n    else if (fragColor.rgb == coolerColor.rgb)\n        fragColor.a = 0.0;\n    \n    float avg_a = (fragColor.a + above.a + below.a + left.a + right.a) / 5.;\n    \n    fragColor.a = avg_a;\n    \n    // State change\n    if (avg_a > 0.75)\n    {\n        if (fragColor.rgb == stoneColor.rgb)\n        {\n            fragColor.rgb = lavaColor.rgb;\n        }\n    }\n    if (avg_a > 0.7)\n    {\n        if (fragColor.rgb == waterColor.rgb)\n        {\n            fragColor.rgb = steamColor.rgb;\n        }\n    }\n    if (avg_a < 0.25)\n    {\n        if (fragColor.rgb == lavaColor.rgb)\n        {\n            fragColor.rgb = stoneColor.rgb;\n        }\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    if (iTime < 0.1)\n    {\n        // Initialize\n        fragColor = texture(iChannel2, uv);\n        return;\n    }\n    \n    vec4 lastColor = texture(iChannel1, uv);\n    fragColor = lastColor;\n    \n    float aspect = iResolution.x / iResolution.y;\n\n    vec2 pressedUv = vec2(1.5, 3.5) / iResolution.xy;\n    float pressed = texture(iChannel3, pressedUv).x;\n    \n    if (pressed > 0.)\n    {\n        vec2 mouseUv = iMouse.xy / iResolution.xy;\n\n        if (pow((uv.x - mouseUv.x) * aspect, 2.0) + pow(uv.y - mouseUv.y, 2.0) < 0.0002)\n        {\n            vec2 cUv = vec2(KEY_C, 0.5) / iResolution.xy;\n        \tfloat c = texture(iChannel3, cUv).x;\n            \n            vec2 dUv = vec2(KEY_D, 0.5) / iResolution.xy;\n        \tfloat d = texture(iChannel3, dUv).x;\n            \n            vec2 hUv = vec2(KEY_H, 0.5) / iResolution.xy;\n        \tfloat h = texture(iChannel3, hUv).x;\n            \n            vec2 lUv = vec2(KEY_L, 0.5) / iResolution.xy;\n        \tfloat l = texture(iChannel3, lUv).x;\n            \n            vec2 wUv = vec2(KEY_W, 0.5) / iResolution.xy;\n        \tfloat w = texture(iChannel3, wUv).x;\n        \n        \tvec2 sUv = vec2(KEY_S, 0.5) / iResolution.xy;\n        \tfloat s = texture(iChannel3, sUv).x;\n            \n            if (c > 0.)\n                fragColor = coolerColor;\n            else if (d > 0.)\n                fragColor.rgb = vec3(0.);\n            else if (h > 0.)\n                fragColor = heaterColor;\n            else if (l > 0.)\n                fragColor = lavaColor;\n            else if (w > 0.)\n                fragColor = waterColor;\n            else if (s > 0.)\n                fragColor = stoneColor;\n            else\n                fragColor = sandColor;\n            return;\n        }\n    }\n    \n    vec4 above, below, left, right;\n    GetAdjacentAndReact(fragCoord, fragColor, above, below, left, right);\n \n    float aboveFall = GetFallPercentage(fragCoord + vec2(0., 1.));\n    float belowFall = GetFallPercentage(fragCoord + vec2(0., -1.));\n    float thisFall = GetFallPercentage(fragCoord);\n    \n    vec2 blUv = (fragCoord + vec2(-1., -1.)) / iResolution.xy;\n    vec4 bl = texture(iChannel1, blUv);\n    vec4 blMotion = texture(iChannel1, blUv);\n    vec2 brUv = (fragCoord + vec2(1., -1.)) / iResolution.xy;\n    vec4 br = texture(iChannel1, brUv);\n    vec4 brMotion = texture(iChannel1, brUv);\n    \n    float fallThreshold = 0.0;\n    if (fragColor.rgb == sandColor.rgb)\n    {\n        fallThreshold = 0.01;\n    }\n    \n    float aboveFallThreshold = 0.0;\n    if (above.rgb == sandColor.rgb)\n    {\n        aboveFallThreshold = 0.01;\n    }\n    \n    float belowFallThreshold = 0.0;\n    if (below.rgb == sandColor.rgb)\n    {\n        belowFallThreshold = 0.01;\n    }\n    \n    \n    bool isLiquid = fragColor.rgb == waterColor.rgb || fragColor.rgb == lavaColor.rgb || fragColor.rgb == steamColor.rgb;\n    bool below_isLiquid = below.rgb == waterColor.rgb || below.rgb == lavaColor.rgb || below.rgb == steamColor.rgb;\n    bool above_isLiquid = above.rgb == waterColor.rgb || above.rgb == lavaColor.rgb || above.rgb == steamColor.rgb;\n    \n    bool isGas = fragColor.rgb == steamColor.rgb;\n    bool below_isGas = below.rgb == steamColor.rgb;\n    bool above_isGas = above.rgb == steamColor.rgb;\n    \n    // Falling\n\tif (fragColor.rgb != vec3(0.))\n    {\n        if (thisFall > fallThreshold)\n        {\n            if (below.rgb == vec3(0.0))\n            {\n               \tfragColor = vec4(0.0);\n            }\n            else\n            {\n                if (aboveFall > aboveFallThreshold && above.rgb != vec3(0.) && above.rgb == sandColor.rgb && isLiquid)\n                {\n                    fragColor = above;\n                }\n                else if (belowFall > belowFallThreshold && fragColor.rgb == sandColor.rgb && below_isLiquid)\n                {\n                    fragColor = below;\n                }\n                \n            }\n        }\n    }\n    else if (aboveFall > aboveFallThreshold)\n    {\n        fragColor = above;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Horizontal Motion //\n\nconst vec4 sandColor = vec4(.9, .9, .5, 0.5);\nconst vec4 stoneColor = vec4(.5, .5, .5, 0.5);\nconst vec4 waterColor = vec4(0.1, 0.1, .9, 0.25);\nconst vec4 lavaColor = vec4(1.0, .3, .1, 1.0);\nconst vec4 steamColor = vec4(.9, .9, .9, 1.0);\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\nfloat noise(float p){\n\tfloat fl = floor(p);\n  float fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\t\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n  vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat GetMotion(vec2 coord)\n{\n    // Layout to maintain continuity\n    // and predictability. For randomness, offset grid.\n    // >>>vv>>v>v>v>v>\n    // <vvv<v<<vv<<<v<\n    \n    float offsetX = rand(iTime * 3.) + iTime + rand(coord.y) * 7.;\n    float offsetY = rand(-iTime * 11.) - iTime;\n    \n    if (mod(noise(coord.y + offsetY), 2.) > 0.5)\n    {\n        return noise(coord.x + offsetX + noise(coord.y) * 100.) / 2. + 0.5;\n    }\n    else\n    {\n        return noise(coord.x + offsetX + noise(coord.y) * 100.) / 2.;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    \n    vec2 rightUv = (fragCoord + vec2(1., 0.)) / iResolution.xy;\n    vec4 right = texture(iChannel0, rightUv);\n    vec2 leftUv = (fragCoord + vec2(-1., 0.)) / iResolution.xy;\n    vec4 left = texture(iChannel0, leftUv);\n    \n    bool isLiquid = fragColor.rgb == waterColor.rgb || fragColor.rgb == lavaColor.rgb;\n    bool right_isLiquid = right.rgb == waterColor.rgb || right.rgb == lavaColor.rgb;\n    bool left_isLiquid = left.rgb == waterColor.rgb || left.rgb == lavaColor.rgb;\n    \n    // Liquid spreading\n    float leftMotion = GetMotion(fragCoord + vec2(-1., 0.));\n    float rightMotion = GetMotion(fragCoord + vec2(1., 0.));\n    float thisMotion = GetMotion(fragCoord);\n    \n    if (fragColor.rgb == vec3(0.0))\n    {\t\n    \tif (leftMotion > 0.55)\n        {\n            if (left_isLiquid)\n            {\n                fragColor = left;\n            }\n        }\n        else if (rightMotion < 0.45)\n        {\n            if (right_isLiquid)\n            {\n                fragColor = right;\n            }\n        }\n    }\n    else if (isLiquid)\n    {\n        if (thisMotion > 0.55)\n        {\n            if (right.rgb == vec3(0.))\n            {\n            \tfragColor.rgb = vec3(0.0);\n            }\n        }\n        else if (thisMotion < 0.45)\n        {\n            if (left.rgb == vec3(0.0))\n            {\n            \tfragColor.rgb = vec3(0.0);\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// INIT STATE //\n\n/* Could be moved into Buffer A if we need this one */\n\nconst vec4 sandColor = vec4(.9, .9, .5, 0.5);\nconst vec4 stoneColor = vec4(.5, .5, .5, 0.5);\nconst vec4 waterColor = vec4(0.1, 0.1, .9, 0.25);\nconst vec4 lavaColor = vec4(1.0, .3, .1, 1.0);\nconst vec4 steamColor = vec4(.9, .9, .9, 1.0);\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\nfloat noise(float p){\n\tfloat fl = floor(p);\n  float fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n   \n    float groundHeight = 0.2 * noise(uv.x * 5.);\n    groundHeight += 0.01 * noise(uv.x * 500.);\n    groundHeight += 0.05 * noise(uv.x * 50.);\n    groundHeight += (1.0 - uv.x) * 0.5;\n    \n    fragColor = vec4(vec3(0.0), 0.5);\n    \n    if (uv.y < groundHeight - 0.2)\n    {\n        fragColor = stoneColor;\n    }\n    else if (uv.y > 0.5 && uv.y < 0.6)\n    {\n        fragColor = sandColor;\n    }\n\telse if (length(uv - vec2(0.75, 0.75)) < 0.1)\n    {\n        fragColor = waterColor;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// USER STATE //\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.x < 256.5 && fragCoord.y < 3.5)\n    {\n        // Copy keyboard state\n        vec2 keyboardUv = fragCoord / vec2(256., 3.);\n        fragColor = texture(iChannel1, keyboardUv);\n    }\n    else if (distance(fragCoord, vec2(0.5, 3.5)) < 1.)\n    {\n        // Store current mouse state\n        fragColor = iMouse / iResolution.xyxy;\n    }\n    else if (distance(fragCoord, vec2(1.5, 3.5)) < 1.)\n    {\n        if (iTime < 0.1)\n        {\n            fragColor = vec4(0.);\n            return;\n        }\n        \n        // Check if mouse click changed from last stored state, toggle state\n        vec2 stateUv = vec2(0.5, 3.5) / iResolution.xy;\n        vec4 lastMouse = texture(iChannel0, stateUv) * iResolution.xyxy;\n        vec2 pressedUv = vec2(1.5, 3.5) / iResolution.xy;\n        vec4 lastPressed = texture(iChannel0, pressedUv);\n        if (distance(lastMouse.zw, iMouse.zw) > 1.)\n        {\n            fragColor = vec4(1.) - lastPressed;\n        }\n        else\n        {\n            fragColor = lastPressed;\n        }\n    }\n    else\n    {\n    \tfragColor = vec4(0.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}