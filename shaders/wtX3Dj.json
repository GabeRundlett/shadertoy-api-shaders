{
    "Shader": {
        "info": {
            "date": "1559413858",
            "description": "Is this still raytracing, or is it called circletracing? ðŸ¤”. \n2d version: [url]https://www.shadertoy.com/view/tdB3Wt[/url]\narrow keys, shift and ctrl, and mouse does things. tried to make the controls feel natural.",
            "flags": 48,
            "hasliked": 0,
            "id": "wtX3Dj",
            "likes": 5,
            "name": "(ray?)marching, spherical space",
            "published": 3,
            "tags": [
                "raymarching",
                "space",
                "spherical",
                "inverse",
                "inverted",
                "circlemarching"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 576
        },
        "renderpass": [
            {
                "code": "\n\nvec4 getdata(int index) {\n    ivec2 p;\n    p.x = index%int(iResolution.x);\n    p.y = index/int(iResolution.x);\n    return texelFetch(iChannel0,p,0);\n}\n\nvec2 min2(vec2 a, vec2 b) {\n    if (b.x<a.x) a = b;\n    return a;\n}\n\n/**\n//cubic truchets\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)\n//hash function by Dave_Hoskins https://www.shadertoy.com/view/4djSRW\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nfloat torus(vec3 p, vec3 r) {//creates 4 toruses\n    return length(vec2(abs(abs(length(p.xy)-r.x)-r.y),abs(p.z)-r.y))-r.z;\n}\n\nvec2 map(vec3 p) {\n    \n    vec3 p1 = p+iTime*0.1;\n    vec3 p2 = mod(p1,2.0)-1.0;\n    vec3 floorpos = floor(p1*0.5);\n    float len = 1e10;\n    \n    //the truchet flipping\n    vec3 flipping = floor(hash33(floorpos)+0.5)*2.0-1.0;\n    \n    //actually flipping the truchet\n    vec3 p3 = p2*flipping;\n    \n    //positions relative to truchet centers\n    mat3 truchet = mat3(\n        vec3(+p3.yz+vec2(-1.0, 1.0),p3.x),\n        vec3(+p3.zx+vec2(-1.0, 1.0),p3.y),\n        vec3(+p3.yx+vec2( 1.0,-1.0),p3.z)\n    );\n    \n    //finding distance to truchet\n    len = min(min(\n        torus(truchet[0],vec3(1.0,0.15,0.1)),\n        torus(truchet[1],vec3(1.0,0.15,0.1))),\n        torus(truchet[2],vec3(1.0,0.15,0.1)));\n    \n    vec2 l = vec2(len,1);\n    \n    \n    // a sphere that hides the mirror dimension\n    l = min2(l,vec2(length(p),0));\n    \n    \n    return l;\n}\n/**/\n\n/**/\n\nvec2 map(vec3 p) {\n    vec3 q = abs(fract(p+iTime*0.1)-0.5);\n    \n    vec3 r = vec3(min(min(q.x,q.y),q.z),0.0,max(max(q.x,q.y),q.z));\n    r.y = dot(q-r,vec3(1));\n    \n    vec2 l = vec2(length(r.xy)-0.1,1);\n    \n    l.x = mix(length(q)-0.2,l.x,clamp(sin(iTime)*1.5+1.0,0.0,1.0));\n    \n    \n    // a sphere that hides the mirror dimension\n    l = min2(l,vec2(length(p),0));\n    \n    return l;\n}\n/**/\n/*int getsurface(vec3 p) {\n    int id = 0;\n    float l = p.y;\n    \n    return id;\n}*/\n\nvec3 getnormal(vec3 p) {\n    vec2 e = vec2(0,0.0001);\n    \n    return normalize(vec3(\n        map(p+e.yxx).x-map(p-e.yxx).x,\n        map(p+e.xyx).x-map(p-e.xyx).x,\n        map(p+e.xxy).x-map(p-e.xxy).x));\n}\n\nvoid march(inout vec3 ro, vec3 rd) {\n    \n    \n    ro /= dot(ro,ro);\n    vec3 rd2 = rd;\n    \n    vec3 rd1 = normalize(ro);\n    \n    rd2 = normalize(reflect(rd2,rd1));\n    \n    vec3 rd0 = normalize(cross(rd2,rd1));\n         rd1 = cross(rd0,rd2);\n    \n    vec3 a = ro*0.5;\n    \n    a = normalize(a);\n    vec3 b = cross(a,rd0);\n    \n    //circle radius\n    float d0 = dot(a,ro*0.5)/dot(a,rd1);\n    \n    //center relative to ro\n    vec3 cent = rd1*d0;\n    \n    d0 = 1.0/d0;\n    //d0 = 1.0/(d0*d0);\n    \n    vec3 t = cent;\n    \n    //circle center\n    vec3 abcen = ro-cent;\n    \n    for (int i = 0; i < 1000; i++) {\n        float l = map(abcen+t).x;\n        \n        if (l < 0.001) {\n            break;\n        }\n        \n        /*\n        // inaccurate with big ray radius,\n        // when looking at the center\n\t\t// also remember d0 = 1.0/(d0*d0)\n        \n        vec2 xy = vec2(1.0-l*l*d0,0);\n        xy.y = sqrt(1.0-xy.x*xy.x);\n        \n        t = t*xy.x+cross(t,rd0)*xy.y;\n        */\n        \n        vec2 xy = vec2(l*l*0.5*d0,0);\n        xy.y = sqrt(l*l-xy.x*xy.x);\n        xy *= d0;\n        xy.x = 1.0-xy.x;\n\n        t = t*xy.x+cross(t,rd0)*xy.y;\n    }\n    \n    ro = abcen+t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = getdata(campos).xyz;\n    vec3 rd = normalize(vec3(uv,1));\n    \n    mat3 rotcam;\n    rotcam[0] = getdata(camrot+0).xyz;\n    rotcam[1] = getdata(camrot+1).xyz;\n    rotcam[2] = getdata(camrot+2).xyz;\n    \n    rd *= transpose(rotcam);\n    \n    vec3 p = ro;\n    march(p,rd);\n    \n    vec3 col;\n    \n    \n    int id = int(map(p).y);\n    vec3 n = getnormal(p);\n    vec3 sphn = n;\n    vec3 sphp = p;\n\n    float a = inversesqrt(dot(p,p));\n    p *= a;\n    n = reflect(n,p);\n    p *= a;\n\n\n    if (id == 1) {\n        col = n*0.5+0.5;\n\n        float direct = max(0.05,dot(n,normalize(vec3(1))));\n\n        col *= direct;\n    } else if (id == 0) {\n\n    }\n\t\n    fragColor.rgb = pow(col,vec3(1.0/2.2));    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float getkey(int x, int y)\n{\n    return texelFetch(iChannel1,ivec2(x,y),0).x;\n}\n\nvec4 getdata(int index) {\n    ivec2 p;\n    p.x = index%int(iResolution.x);\n    p.y = index/int(iResolution.x);\n    return texelFetch(iChannel0,p,0);\n}\nvec4 updatedata(int index) {\n    vec4 data = getdata(index);\n    \n    vec4 iMouse2 = getdata(lastmouse);\n    \n    \n    bool refresh = iFrame == 0;\n    \n    if (index == lastmouse) {\n        return iMouse;\n    } else if (index == campos) {\n        \n        if (refresh) {\n            return vec4(vec3(0,0,-4),1);\n        }\n        \n        vec3 move = vec3(getkey(MOVE_RIGHT,0)-getkey(MOVE_LEFT,0),\n                         getkey(MOVE_UP   ,0)-getkey(MOVE_DOWN,0),\n                         getkey(MOVE_FORW ,0)-getkey(MOVE_BACK,0));\n        \n        mat3 rotcam;\n        rotcam[0] = getdata(camrot+0).xyz;\n        rotcam[1] = getdata(camrot+1).xyz;\n        rotcam[2] = getdata(camrot+2).xyz;\n        \n        move *= transpose(rotcam);\n        \n        move *= clamp(dot(data.xyz,data.xyz),speedrange);\n        \n        vec3 newpos = data.xyz+movespeed*move*iTimeDelta;\n        \n        data.xyz = newpos;\n        \n        data.xyz = normalize(data.xyz)*min(length(data.xyz),10.0);\n        \n        return data;\n    } else if (index < camrot+3) {\n        \n        if (refresh) {\n            mat3 dirs;\n            dirs[0] = vec3(1,0,0);\n            dirs[1] = vec3(0,1,0);\n            dirs[2] = vec3(0,0,1);\n            \n            return vec4(dirs[index-camrot],0);\n        } else {\n            \n            if (min(iMouse2.z,iMouse.z) > 0.5) {\n                vec2 rot = (iMouse.xy-iMouse2.xy)/iResolution.y*sensitivity;\n                \n                mat3 rotation = mat3(\n                getdata(camrot+0).xyz,\n                getdata(camrot+1).xyz,\n                getdata(camrot+2).xyz);\n                \n                mat3 newrotation = rotation;\n\n                newrotation[0] = (rotation[0]*cos(-rot.x)+rotation[2]*sin(-rot.x));\n                newrotation[2] = (rotation[2]*cos(-rot.x)-rotation[0]*sin(-rot.x));\n\n                rotation = newrotation;\n\n                newrotation[1] = (rotation[1]*cos(-rot.y)+rotation[2]*sin(-rot.y));\n                newrotation[2] = (rotation[2]*cos(-rot.y)-rotation[1]*sin(-rot.y));\n                \n                rotation = newrotation;\n                \n                \n                return vec4(rotation[index-camrot],0);\n            }\n        }\n        \n        return data;\n    }\n    \n    \n    return data;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coord = ivec2(fragCoord);\n    fragColor = updatedata(coord.x+coord.y*int(iResolution.x));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define lastmouse 0\n#define campos 1\n#define camrot 2\n\n#define pi acos(-1.0)\n#define rot(A) mat2(cos(A),-sin(A),sin(A),cos(A))\n#define sqr(a) (a*a)\n\n#define FAR 100.0\n\n#define sensitivity 3.0\n#define movespeed 0.5\n\n// clamps the speed. set both to 1.0 if you don't want it\n// slows the speed near the center,\n// but stops slowing down at 0.1x speed and at 10.0x speed\n#define speedrange 0.0,10.0\n\n//keyboard keys\n#define KEY_UP    38\n#define KEY_DOWN  40\n#define KEY_RIGHT 39\n#define KEY_LEFT  37\n#define KEY_SHIFT 16\n#define KEY_CTRL  17\n\n//movement keys\n#define MOVE_FORW   KEY_UP\n#define MOVE_LEFT   KEY_LEFT\n#define MOVE_RIGHT  KEY_RIGHT\n#define MOVE_BACK   KEY_DOWN\n#define MOVE_UP     KEY_SHIFT\n#define MOVE_DOWN   KEY_CTRL\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}