{
    "Shader": {
        "info": {
            "date": "1614848821",
            "description": "Knob controls speed and steering; mouseable",
            "flags": 32,
            "hasliked": 0,
            "id": "3lGfzd",
            "likes": 28,
            "name": "Drive The Rover",
            "published": 3,
            "tags": [
                "interactive",
                "moon",
                "mars",
                "vehicle",
                "lander"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 516
        },
        "renderpass": [
            {
                "code": "// \"Drive The Rover\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define VAR_ZERO min (iFrame, 0)\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat PrTorusBxDf (vec3 p, vec3 b, float ri);\nfloat Minv2 (vec2 p);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (int idVar);\n\nvec3 sunDir, qHit, carPos, wlBase;\nvec2 wlRot[2], csArm, csArmA;\nfloat tCur, dstFar, carRot, strRot;\nint idObj;\nconst int idBase = 1, idFuel = 2, idWhl = 3, idLnk = 4, idArm = 5, idPiv = 6, idAxl = 7, idTur = 8,\n   idGrbl = 9, idCam = 10, idCamP = 11, idAnt = 12, idSol = 13;\nconst float pi = 3.1415927;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq, bSize;\n  vec2 kRot;\n  float dMin, d, r, a, s, rt, wlRad, armLen;\n  p -= carPos;\n  p.xz = Rot2D (p.xz, carRot);\n  bSize = vec3 (0.8, 0.3, 1.6);\n  rt = 0.07;\n  wlRad = wlBase.y;\n  armLen = 1.;\n  dMin = dstFar;\n  p.y -= wlRad;\n  for (float k = float (VAR_ZERO); k < 2.; k ++) {\n    q = p;\n    q.x = abs (q.x) - wlBase.x;\n    if (k == 1.) q.xz = Rot2D (vec2 (q.x, abs (q.z) - wlBase.z), - strRot * sign (p.x));\n    q.y -= 0.85;\n    d = PrCapsDf (q.xzy, rt, 0.15);\n    q.y -= -0.5;\n    d = min (d, max (PrTorusBxDf (q, vec3 (0.25, 0.2, 0.15), rt), q.x));\n    DMINQ (idLnk);\n  }\n  for (float k = float (VAR_ZERO); k < 6.; k ++) {\n    kRot = vec2 (2. * mod (k, 2.), floor (k / 2.)) - 1.;\n    q = p;\n    q.xz -= kRot.xy * wlBase.xz;\n    if (kRot.y != 0.) q.xz = Rot2D (q.xz, - strRot * kRot.y);\n    r = length (q.yz);\n    d = length (max (vec2 (r - wlRad, abs (q.x) - 0.15) - 0.1, 0.));\n    if (d < 0.1) {\n      d = max (length (max (vec2 (r - wlRad, abs (q.x) - 0.15), 0.)) - 0.05, wlRad - 0.02 - r);\n      q.yz = (kRot.y != 1.) ? Rot2D (q.yz, - ((kRot.x < 0.) ? wlRot[0].x : wlRot[0].y)) :\n         Rot2D (q.yz, - ((kRot.x < 0.) ? wlRot[1].x : wlRot[1].y));\n      a = (r > 0.) ? atan (q.z, - q.y) / (2. * pi) : 0.;\n      d = max (d, 0.03 - length (Rot2D (q.yz, 2. * pi * floor (28. * a + 0.5) / 28.) + vec2 (wlRad + 0.05, 0.)));\n      d = min (d, max (abs (r - wlRad + 0.04) - 0.02, abs (q.x) - 0.04));\n      q.yz = Rot2D (q.yz, 2. * pi * floor (7. * a + 0.5) / 7.);\n      d = min (d, max (PrTorusBxDf (q - vec3 (0., -0.31, 0.), vec3 (0.08, 0.05, 0.1), 0.02), - q.x * kRot.x));\n      d = min (d, max (r - 0.18, abs (q.x) - 0.2));\n      DMINQ (idWhl);\n    } else dMin = min (dMin, d);\n  }\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (wlBase.x, 1., -1.);\n  d = PrRoundCylDf (q.yzx, 0.1, 0.02, 0.1);\n  DMINQ (idAxl);\n  d = PrCapsDf (q, rt, 1.);\n  q.z -= 1.5;\n  d = min (d, max (PrTorusBxDf (q.yzx, vec3 (0.05, 1.1, 0.4), rt), - q.y));\n  DMINQ (idLnk);\n  q = p;\n  q.xz = abs (q.xz);\n  q -= vec3 (wlBase.xz, 0.85).xzy;\n  d = PrRoundCylDf (q.xzy, 0.1, 0.02, 0.04);\n  DMINQ (idGrbl);\n  q = p;\n  q.y -= 1.45;\n  d = PrCylDf (q.yzx, 0.1, wlBase.x);\n  q.x = abs (abs (q.x) - wlBase.x + 0.3) - 0.3;\n  d = min (d, PrRoundCylDf (q.yzx, 0.1, 0.02, 0.1));\n  DMINQ (idAxl);\n  q = p;\n  q.y -= 1.5;\n  d = PrRoundBoxDf (q, bSize, 0.02);\n  DMINQ (idBase);\n  qq = abs (q) - vec3 (0.35, 0.22, 0.8);\n  d = min (min (PrTorusBxDf (vec3 (q.yz, qq.x), vec3 (bSize.yz, 0.03), 0.03),\n     PrTorusBxDf (vec3 (q.xz, qq.y), vec3 (bSize.xz, 0.03), 0.03)),\n     PrTorusBxDf (vec3 (q.xy, qq.z), vec3 (bSize.xy, 0.03), 0.03));\n  DMIN (idGrbl);\n  q = p;\n  q.yz -= vec2 (1.85, -1.6);\n  d = PrRoundCylDf (q.yzx, 0.3, 0.1, 0.6);\n  DMINQ (idFuel);\n  d = PrTorusBxDf (q.xzy, vec3 (0.6, 0.3, 0.1), 0.03);\n  DMIN (idGrbl);\n  q = p;\n  q.x = abs (abs (q.x) - 0.18);\n  d = PrCapsDf (q - vec3 (0.05, 1.16, bSize.z), 0.04, 0.1);\n  DMIN (idGrbl);\n  q = p;\n  q.yz -= vec2 (1.75, 1.8);\n  d = PrRoundBoxDf (q, vec3 (0.15, 0.05, 0.2), 0.02);\n  DMIN (idGrbl);\n  q = p;\n  q.xz = abs (vec2 (q.x, q.z - 0.85));\n  q -= vec3 (0.55, 1.8, 0.25);\n  d = PrRoundCylDf (q.xzy, 0.1, 0.02, 0.1);\n  q.y -= 0.1;\n  d = min (d, PrSphDf (q, 0.05));\n  DMIN (idGrbl);\n  q = p;\n  q.yz -= vec2 (1.8, 1.1);\n  d = PrRoundBoxDf (q, vec3 (0.2, 0.1, 0.2), 0.02);\n  q.xz = abs (q.xz);\n  d = min (d, PrSphDf (q - vec3 (0.1, 0.12, 0.1), 0.05));\n  DMIN (idGrbl);\n  q = p;\n  q.xz = abs (vec2 (q.x, q.z + 0.1)) - vec2 (0.65, 0.3);\n  q.y -= 1.85;\n  d = PrRoundCylDf (q.xzy, 0.1, 0.02, 0.02);\n  DMIN (idGrbl);\n  q = p;\n  q.y -= 2.02;\n  d = PrRoundCylDf (q.xzy, 0.3, 0.02, 0.2);\n  DMINQ (idTur);\n  q.y -= 0.4;\n  d = PrRoundCylDf (q.xzy, 0.22, 0.02, 0.2);\n  DMINQ (idTur);\n  q = p;\n  q.y -= 2.6;\n  d = PrCapsDf (q.yzx, 0.03, 0.6);\n  DMIN (idGrbl);\n  q.x = abs (q.x) - 0.46;\n  q.yz = Rot2D (q.yz, -0.2 * pi);\n  d = PrRoundBoxDf (q, vec3 (0.15, 0.01, 0.25), 0.01);\n  DMINQ (idSol);\n  q = p;\n  q.xz = abs (vec2 (q.x, q.z - 0.3));\n  q -= vec3 (0.75, 1.8, 1.2);\n  d = PrCapsDf (q.xzy, 0.05, 0.2);\n  DMIN (idGrbl);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.78, 2.25, -0.9);\n  q.xy = Rot2D (q.xy, 0.1 * pi);\n  d = max (abs (PrSphDf (q, 0.25)) - 0.01, q.y + 0.05);\n  DMINQ (idAnt);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.75, 2., 1.55);\n  q.yz = Rot2D (q.yz, -0.05 * pi);\n  d = PrCapsDf (q, 0.1, 0.1);\n  DMINQ (idCam);\n  q = p;\n  q.xz = abs (q.xz);\n  q -= vec3 (bSize.xz, 1.2).xzy;\n  q.yz = Rot2D (q.yz, -0.25 * pi);\n  d = PrSphDf (q, 0.1);\n  DMINQ (idCam);\n  q = p;\n  q.y -= 1.1;\n  q.yz = Rot2D (q.yz, -0.5 * pi);\n  d = PrSphDf (q, 0.1);\n  DMINQ (idCam);\n  q = p;\n  q.y -= 3.;\n  d = PrCylDf (q.xzy, 0.05, 0.8);\n  DMIN (idGrbl);\n  q.y -= 0.8;\n  d = PrRoundCylDf (q.xzy, 0.2, 0.02, 0.08);\n  DMINQ (idCamP);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.5, 1.2, 1.7);\n  d = PrCapsDf (q, 0.03, 0.2);\n  q.z -= 0.2;\n  d = min (d, PrCapsDf (q.xzy, 0.02, 0.3));\n  DMIN (idGrbl);\n  q = p;\n  q.yz -= vec2 (1.85, 1.9);\n  d = PrRoundCylDf (q.xzy, 0.05, 0.02, 0.05);\n  q.y -= 0.15;\n  q.yz = Rot2Cs (q.yz, csArmA) - 2. * armLen * csArm.yx;\n  q.z = abs (q.z);\n  q.yz -= 2. * armLen * (csArm * vec2 (1., -1.)).yx;\n  q.yz = Rot2Cs (q.yz, csArm * vec2 (1., -1.));\n  q.z -= - armLen;\n  d = min (d, PrRoundBoxDf (q, vec3 (0.03, 0.04, armLen), 0.02));\n  DMINQ (idArm);\n  q.z = abs (q.z) - armLen;\n  d = PrRoundCylDf (q.yzx, 0.1, 0.02, 0.08);\n  DMINQ (idPiv);\n  q = p;\n  q.yz -= vec2 (1.85, 2.) + Rot2Cs (vec2 (0., 4. * armLen * csArm.x), csArmA * vec2 (1., -1.));\n  d = PrRoundCylDf (q.xzy, 0.2, 0.02, 0.05);\n  q.z = abs (q.z);\n  q.yz -= vec2 (-0.1, 0.1);\n  d = min (d, PrCapsDf (q.xzy, 0.02, 0.05));\n  DMIN (idGrbl);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05 || d > dstFar) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec4 ObjCol ()\n{\n  vec3 col;\n  float a, r;\n  if (idObj == idCamP || idObj == idTur || idObj == idAnt) a = atan (qHit.x, qHit.z) / (2. * pi);\n  if (idObj == idWhl || idObj == idAxl || idObj == idPiv || idObj == idFuel) r = length (qHit.yz);\n  else if (idObj == idCamP || idObj == idTur) r = length (qHit.xz);\n  if (idObj <= idPiv) {\n    if (idObj == idBase) col = vec3 (1., 1., 0.9) * (0.8 + 0.2 * smoothstep (0., 0.02,\n       abs (PrRoundBox2Df (vec2 (qHit.y, abs (abs (qHit.z) - 0.8) - 0.4), vec2 (0.05, 0.15), 0.05))));\n    else if (idObj == idFuel) col = vec3 (0.8, 0.85, 0.9) * (0.8 + 0.2 * smoothstep (0., 0.02,\n       abs (PrRoundBox2Df (qHit.xz, vec2 (0.3, 0.1), 0.02) - 0.1))) *\n       (0.8 + 0.2 * smoothstep (0., 0.02, abs (abs (r - 0.23) - 0.03)));\n    else if (idObj == idWhl) col = (r > 0.13) ? vec3 (0.95, 0.95, 1.) * (1. - 0.3 * step (0.47, r)) :\n       vec3 (1., 0.5, 0.) * (0.3 + 0.7 * smoothstep (0., 0.02, r - 0.05));\n    else if (idObj == idLnk) col = vec3 (0.9, 0.9, 1.);\n    else if (idObj == idArm) col = vec3 (0.9, 1., 0.9) * (0.8 + 0.2 * smoothstep (0., 0.02,\n       abs (mod (qHit.z + 0.1, 0.2) - 0.1)));\n    else if (idObj == idPiv) col = vec3 (0.8, 0.9, 0.9) * (0.5 + 0.5 * smoothstep (0., 0.01,\n       min (abs (abs (qHit.x) - 0.04), r - 0.02) - 0.01));\n  } else {\n    if (idObj == idAxl) col = vec3 (0.9, 0.95, 0.9) * (0.5 + 0.5 * smoothstep (0., 0.02,\n       abs (r - 0.07) - 0.01)) * (0.5 + 0.5 * smoothstep (0., 0.01, abs (abs (qHit.x) - 0.06) - 0.01));\n    else if (idObj == idTur) col = vec3 (0.9, 0.95, 0.9) * (1. - 0.3 * smoothstep (0., 0.02,\n       0.05 - abs (abs (qHit.y) - 0.1)) *  smoothstep (0., 0.02, abs (mod (8. * a + 0.5, 1.) - 0.5) - 0.35)) *\n       (0.8 + 0.2 * smoothstep (0., 0.02, abs (r - 0.15) - 0.01));\n    else if (idObj == idGrbl) col = vec3 (0.9, 0.9, 0.8);\n    else if (idObj == idCam) col = mix (vec3 (0.2), vec3 (0.9, 0.3, 0.3), (1. - step (0., qHit.z) *\n       smoothstep (0., 0.01, 0.1 - length (qHit.xy))));\n    else if (idObj == idCamP) col = mix (vec3 (0.2), vec3 (0.9, 0.3, 0.3), smoothstep (0., 0.02,\n       length (vec2 (Rot2D (qHit.xz, 2. * pi * (floor (8. * a + 0.5) / 8.)).x, qHit.y)) - 0.05)) *\n       (0.7 + 0.3 * smoothstep (0., 0.02, abs (r - 0.15) - 0.01));\n    else if (idObj == idAnt) col = vec3 (0.5, 0.9, 0.5) * (1. - 0.3 * smoothstep (0., 0.02,\n       abs (mod (16. * a + 0.5, 1.) - 0.5) - 0.35));\n    else if (idObj == idSol) col = (qHit.y > 0.) ? vec3 (0.9, 0.9, 0.3) : vec3 (0.8, 0.8, 0.7);\n  }\n  return vec4 (col, 0.1);\n}\n\nfloat RippleHt (vec2 p)\n{\n  vec2 q;\n  float s1, s2;\n  q = Rot2D (p, -0.02 * pi) * vec2 (0.5, 1.);\n  s1 = abs (sin (4. * pi * abs (q.y + 1.5 * Fbm2 (0.7 * q))));\n  s1 = (1. - s1) * (s1 + sqrt (1. - s1 * s1));\n  q = Rot2D (p, 0.01 * pi) * vec2 (0.5, 1.);\n  s2 = abs (sin (3.1 * pi * abs (q.y + 1.9 * Fbm2 (0.5 * q))));\n  s2 = (1. - s2) * (s2 + sqrt (1. - s2 * s2));\n  return 1.2 * mix (s1, s2, 0.1 + 0.8 * smoothstep (0.3, 0.7, Fbm2 (2. * p)));\n}\n\nvec3 RippleNorm (vec2 p, vec3 vn, float f)\n{\n  vec2 e;\n  float h;\n  e = vec2 (0.002, 0.);\n  h = RippleHt (p);\n  vn.xy = Rot2D (vn.xy, f * (RippleHt (p + e) - h));\n  vn.zy = Rot2D (vn.zy, f * (RippleHt (p + e.yx) - h));\n  return vn;\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol;\n  vec2 q;\n  float f, fd, ff;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (8. * atan (rd.z, - rd.x))) {\n    col = vec3 (0.4, 0.3, 0.3);\n  } else {\n    q = 0.005 * (ro.xz + 2. * tCur + ((200. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.2, 0.3, 0.3) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    col = vec3 (1., 0.8, 0.8) * mix (vec3 (0.6, 0.4, 0.4), clCol,\n       0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  float dstObj, dstGrnd, armAng, sh, f;\n  bool isBg;\n  armAng = pi * (0.2 + 0.15 * sin (0.2 * pi * tCur));\n  csArm = sin (armAng + vec2 (0.5 * pi, 0.));\n  csArmA = sin (-0.2 * pi + 0.5 * armAng + vec2 (0.5 * pi, 0.));\n  isBg = false;\n  dstObj = ObjRay (ro, rd);\n  dstGrnd = dstFar;\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col4 = ObjCol ();\n  } else if (rd.y < 0.) {\n    dstGrnd = - ro.y / rd.y;\n    ro += dstGrnd * rd;\n    col4 = vec4 (0.4 * mix (vec3 (1., 0.8, 0.5), vec3 (0.9, 0.7, 0.5),\n       smoothstep (0.3, 0.7, Fbm2 (4. * ro.xz))), 0.);\n    vn = vec3 (0., 1., 0.);\n    f = 1. - smoothstep (0.2, 0.5, dstGrnd / dstFar);\n    if (f > 0.) vn = VaryNf (4. * ro, RippleNorm (ro.xz, vn, 4. * f), f);\n  } else {\n    isBg = true;\n    col = SkyBgCol (ro, rd);\n  }\n  if (! isBg) {\n    sh = (min (dstObj, dstGrnd) < dstFar) ? ObjSShadow (ro + 0.01 * vn, sunDir) : 1.;\n    col = col4.rgb * (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.)) +\n       col4.a * step(0.95, sh) * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n    if (dstObj >= dstFar && rd.y < 0.) col = mix (col, vec3 (0.4, 0.3, 0.3), pow (1. + rd.y, 16.));\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define AA  0   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat;\n  vec3 ro, rd, col, wgBox;\n  vec2 canvas, uv, ud, cnPos;\n  float el, az, asp, zmFac, s, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  asp = canvas.x / canvas.y;\n  stDat = Loadv4 (0);\n  carPos = stDat.xyz;\n  carRot = stDat.w;\n  stDat = Loadv4 (1);\n  wlBase = stDat.xyz;\n  stDat = Loadv4 (2);\n  strRot = stDat.y;\n  stDat = Loadv4 (3);\n  wlRot[0] = stDat.xy;\n  wlRot[1] = stDat.zw;\n  stDat = Loadv4 (4);\n  az = stDat.x;\n  el = stDat.y;\n  cnPos = stDat.zw;\n  el = clamp (el, -0.45 * pi, 0.);\n  vuMat = StdVuMat (el, az);\n  ro = carPos + vuMat * vec3 (0., 1.8, -12.);\n  zmFac = 4. + 2. * el;\n  dstFar = 100.;\n  sunDir = vuMat * normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  wgBox = vec3 (0.39, -0.3, 0.135);\n  ud = 0.5 * uv - wgBox.xy * vec2 (asp, 1.);\n  s = (length (ud) - wgBox.z) * canvas.y;\n  col = mix (vec3 (0.5), col, smoothstep (0., 1., abs (s) - 1.));\n  if (s < 0.) {\n    col = mix (vec3 (0.5), col, step (1., Minv2 (abs (ud)) * canvas.y));\n    col = mix (vec3 (0., 1., 0.), col, smoothstep (2., 2.3, abs (length (ud - cnPos) * canvas.y - 10.)));\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nfloat PrTorusBxDf (vec3 p, vec3 b, float ri)\n{\n  return length (vec2 (length (max (abs (p.xy) - b.xy, 0.)) - b.z, p.z)) - ri;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Drive The Rover\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec3 carPos, wlBase;\nfloat carRot;\nconst float pi = 3.1415927;\nconst float txRow = 128.;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat;\n  vec3 wgBox;\n  vec2 iFrag, canvas, cnPos, wlRot[2], ud, w, wr[2];\n  float tCur, autoMd, cRotN, strRot, wlRad, rTurn[2], spd, tc, nStep, az, el, asp, s;\n  int pxId, wgSel;\n  bool init;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (pxId >= 6) discard;\n  init = (iFrame <= 5);\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  if (init) {\n    carPos = vec3 (0.);\n    carRot = 0.;\n    strRot = 0.;\n    wlBase = vec3 (1.4, 0.5, 2.);\n    wlRot[0] = vec2 (0.);\n    wlRot[1] = vec2 (0.);\n    az = 0.8 * pi;\n    el = -0.05 * pi;\n    nStep = 0.;\n    cnPos = vec2 (0.);\n    mPtrP = mPtr;\n    wgSel = 0;\n    autoMd = 1.;\n  } else {\n    stDat = Loadv4 (0);\n    carPos = stDat.xyz;\n    carRot = stDat.w;\n    stDat = Loadv4 (1);\n    wlBase = stDat.xyz;\n    stDat = Loadv4 (2);\n    nStep = stDat.x;\n    strRot = stDat.y;\n    autoMd = stDat.z;\n    stDat = Loadv4 (3);\n    wlRot[0] = stDat.xy;\n    wlRot[1] = stDat.zw;\n    stDat = Loadv4 (4);\n    az = stDat.x;\n    el = stDat.y;\n    cnPos = stDat.zw;\n    stDat = Loadv4 (5);\n    mPtrP.xyz = stDat.xyz;\n    wgSel = int (stDat.w);\n  }\n  wgBox = vec3 (0.39, -0.3, 0.135);\n  if (mPtr.z > 0.) {\n    if (wgSel == 0 && mPtrP.z > 0.) {\n      az = -2. * pi * mPtr.x;\n      el = - pi * mPtr.y;\n    } else {\n      ud = mPtr.xy * vec2 (asp, 1.) - wgBox.xy * vec2 (asp, 1.);\n      if (wgSel == 1) {\n        autoMd = - tCur;\n        cnPos = ud;\n        s = length (cnPos);\n        if (s > 0.) cnPos = min (s, wgBox.z) * cnPos / s;\n      } else if (mPtrP.z <= 0. && length (ud) < wgBox.z) wgSel = 1;\n    }\n  } else {\n    wgSel = 0;\n    cnPos *= 1. - 5e-3;\n  }\n  wlRad = wlBase.y;\n  ++ nStep;\n  if (autoMd > 0.) {\n    tc = mod (0.003 * nStep, 4.);\n    strRot = 0.15 * pi * SmoothBump (0.3, 0.7, 0.15, mod (tc, 1.)) * sign (mod (tc, 2.) - 1.) *\n       sign (tc - 2.);\n    spd = 0.2 * (0.1 - 0.06 * abs (strRot / (0.12 * pi)));\n    w = vec2 (- strRot / (0.15 * pi), spd / 0.5);\n    w = pow (abs (w), 1. / vec2 (1.5)) * sign (w);\n    cnPos = w * wgBox.z;\n  } else {\n    w = cnPos / wgBox.z;\n    w = pow (abs (w), vec2 (1.5)) * sign (w);\n    strRot = -0.15 * pi * w.x;\n    spd = 0.1 * w.y;\n    if (tCur + autoMd > 10.) autoMd = 1.;\n  }\n  wr[0] = vec2 (1.);\n  wr[1] = wr[0];\n  if (abs (strRot) > 1e-4) {\n    cRotN = carRot - strRot * spd / pi;\n    rTurn[0] = wlBase.z / asin (strRot);\n    rTurn[1] = rTurn[0] * sqrt (1. - (wlBase.z / rTurn[0]) * (wlBase.z / rTurn[0]));\n    carPos.xz += 2. *rTurn[0] * (sin (carRot - vec2 (0.5 * pi, 0.)) -\n       sin (cRotN - vec2 (0.5 * pi, 0.)));\n    carRot = cRotN;\n    wr[0] += vec2 (-1., 1.) * wlBase.x / rTurn[0];\n    wr[1] += vec2 (-1., 1.) * wlBase.x / rTurn[1];\n  } else {\n    carPos.xz += spd * sin (carRot + vec2 (0., 0.5 * pi));\n  }\n  wlRot[0] += wr[0] * spd / wlRad;\n  wlRot[1] += wr[1] * spd / wlRad;\n  if      (pxId == 0) stDat = vec4 (carPos, carRot);\n  else if (pxId == 1) stDat = vec4 (wlBase, 0.);\n  else if (pxId == 2) stDat = vec4 (nStep, strRot, autoMd, 0.);\n  else if (pxId == 3) stDat = vec4 (wlRot[0], wlRot[1]);\n  else if (pxId == 4) stDat = vec4 (az, el, cnPos);\n  else if (pxId == 5) stDat = vec4 (mPtr.xyz, float (wgSel));\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}