{
    "Shader": {
        "info": {
            "date": "1613272663",
            "description": "Raymarching, kifs, non-linear time",
            "flags": 0,
            "hasliked": 0,
            "id": "3tcBz7",
            "likes": 11,
            "name": "[phreax]  butterfly effect",
            "published": 3,
            "tags": [
                "raymarching",
                "kifs"
            ],
            "usePreview": 0,
            "username": "phreax",
            "viewed": 492
        },
        "renderpass": [
            {
                "code": "/* Creative Commons Licence Attribution-NonCommercial-ShareAlike \n   phreax 2021\n*/\n\n#define PI 3.141592\n#define SIN(x) (sin(x)*.5+.5)\n#define hue(v) ( .6 + .6 * cos( 6.3*(v) + vec3(0,23,21) ) )\n#define RAINBOW 1\n#define SYMMETRICAL 0\n\nfloat tt;\n\nmat2 rot2(float a) { return mat2(cos(a), sin(a), -sin(a), cos(a)); }\n\n// from \"Palettes\" by iq. https://shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 getPal(int id, float t) {\n\n    id = id % 7;\n\n    vec3          col = pal( t, vec3(.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,-0.33,0.33) );\n    if( id == 1 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) );\n    if( id == 2 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.3,0.20,0.20) );\n    if( id == 3 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30) );\n    if( id == 4 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,0.7,0.4),vec3(0.0,0.15,0.20) );\n    if( id == 5 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n    if( id == 6 ) col = pal( t, vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n    \n    return col;\n}\n\n\n// by Nusan\nfloat curve(float t, float d) {\n  t/=d;\n  return mix(floor(t), floor(t)+1., pow(smoothstep(0.,1.,fract(t)), 10.));\n}\n\n\nvec3 transform(vec3 p) {\n    float a = PI*.5*curve(iTime, 4.);\n    \n    // rotate object\n    p.xz *= rot2(a);\n    p.xy *= rot2(a);\n    return p;\n}\n\nfloat map(vec3 p) {\n\n    vec3 bp = p;\n\n    p = transform(p);\n\n    #if SYMMETRICAL\n    p.y = -(abs(p.y) -.3);  \n    #endif\n    \n    p.x *= 1.+SIN(curve(iTime, 4.))*(smoothstep(-0.9, 0.9, -p.y));\n    p.z *= 1.+.5*(smoothstep(-0.9, 1.5, -p.y));\n\n\n    p.x = abs(p.x) -.5*SIN(tt*.5);\n    p.y = abs(p.y) -.9*SIN(tt*.8);\n    p.y -= 0.1;\n    p.y = abs(p.y) -.1;\n    p.x -= 0.2;\n    p.x = abs(p.x) -.9; \n    p.z = abs(p.z) -.5;\n\n    p.zy -= 0.5;\n    p.xy *= rot2(0.1*tt);\n    p.zy *= rot2(-.04*tt);\n                           \n\n    // torus\n    float r1 = 1.0;\n    float r2 = 0.03;\n    \n    vec2 cp = vec2(length(p.xz) - r1, p.y);\n    vec2 cp2 = cp;\n    \n    // torus knots by BigWings\n    float a = atan(p.z, p.x);\n    cp *= rot2(3.*a+tt);\n    cp.x = abs(cp.x) - .3;\n\n    cp *= rot2(3.*a);\n    \n    // kifs\n    float n = 10.;\n    for(float i = 0.; i< n; i++) {\n    \n        cp.y = abs(cp.y) -.05*(.5*sin(tt)+.9);\n        \n        cp *= rot2(0.1*a*sin(0.1*iTime));\n        cp -= i*0.01/n;\n    }\n\n    \n    float d = length(cp) - r2;\n  \n    return .4*d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    float cz = -5.+1.5*sin(curve(iTime, 4.));\n    \n    vec3 ro = vec3(0, .0, cz),\n         rd = normalize(vec3(uv, .7));\n         \n    vec3 p = ro;\n    vec3 col;\n    \n    float t, d = 0.1;\n    \n    tt = iTime;  \n    tt = tt+2.*curve(tt, 2.);\n    \n    float acc = 0.0;\n    for(float i=.0; i<200.; i++) {\n    \n        d = map(p);\n        \n        if(d < 0.0001 || t > 100.) break;\n        \n        // Phantom mode https://www.shadertoy.com/view/MtScWW\n        d = max(abs(d), 0.009);\n        acc += 0.07;\n        \n        t += d;\n        p += rd*d;\n    }\n       \n    if(d < 0.001) {\n        col += acc*clamp(1., 0., 1.2*abs(cz)/(t*t));\n          \n        float sl = dot(p,p);\n        #if RAINBOW\n            col *= 0.5*getPal(4, 1.-0.1*sqrt(sl)+0.05*p.z+.25*iTime+curve(iTime, 8.));\n        #else\n            col *= mix(vec3(0, .85, .75), vec3(1.000,0.541,0.141), 1.-0.1*sl+0.1*p.z);\n        #endif\n    }\n    \n    \n    col = pow(col, vec3(1.2))*1.4;\n   \n    // Output to screen\n    fragColor = vec4(col, 1.0 - t * 0.3);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}