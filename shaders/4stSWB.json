{
    "Shader": {
        "info": {
            "date": "1461259341",
            "description": "Somewhere in an alternate universe... (various view modes, mousing and zooming)",
            "flags": 32,
            "hasliked": 0,
            "id": "4stSWB",
            "likes": 10,
            "name": "Aquatic Hippodrome",
            "published": 3,
            "tags": [
                "raymarching",
                "interactive",
                "architecture"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 815
        },
        "renderpass": [
            {
                "code": "// \"Aquatic Hippodrome\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + cHashA4.xy) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  const vec3 cHashVA3 = vec3 (37.1, 61.7, 12.4);\n  const vec3 e = vec3 (1., 0., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Noisefv3a (vec3 p)\n{\n  vec4 t1, t2;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t1 = Hashv4v3 (ip);\n  t2 = Hashv4v3 (ip + vec3 (0., 0., 1.));\n  return mix (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n              mix (mix (t2.x, t2.y, fp.x), mix (t2.z, t2.w, fp.x), fp.y), fp.z);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbm3 (vec3 p)\n{\n  const mat3 mr = mat3 (0., 0.8, 0.6, -0.8, 0.36, -0.48, -0.6, -0.48, 0.64);\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3a (p);\n    a *= 0.5;\n    p *= 4. * mr;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nfloat PrFlatCylDf (vec3 p, float b, float r, float h)\n{\n  p.x -= b * clamp (p.x / b, -1., 1.);\n  return max (length (p.xy ) - r, abs (p.z) - h);\n}\n\nfloat PrFlatCylAnDf (vec3 p, float b, float r, float w, float h)\n{\n  p.x -= b * clamp (p.x / b, -1., 1.);\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrFlatCyl2Df (vec2 p, float b, float r)\n{\n  p.x -= b * clamp (p.x / b, -1., 1.);\n  return length (p) - r;\n}\n\nfloat PrRCylDf (vec3 p, float r, float rt, float h)\n{\n  vec2 dc;\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  dc = vec2 (dxy, dz) + rt;\n  return min (min (max (dc.x, dz), max (dc.y, dxy)), length (dc) - rt);\n}\n\nvec2 SSBump (float w, float s, float x)\n{\n  return vec2 (step (x + s, w) * step (- w, x + s),\n     step (x - s, w) * step (- w, x - s));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst float txRow = 32.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nmat3 boatMat[3];\nvec3 boatPos[3], sunDir, qHit;\nfloat boatAng[3], dstFar, tCur, owLen, owRad, owThk, iwLen, iwRad, flHt;\nint idObj, idObjGrp;\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, p;\n  if (rd.y > 0.) {\n    col = vec3 (0.1, 0.2, 0.4) + 0.2 * pow (1. - max (rd.y, 0.), 8.) +\n       0.35 * pow (max (dot (rd, sunDir), 0.), 6.);\n    col = mix (col, vec3 (1.), clamp (0.1 +\n       0.8 * Fbm2 (0.01 * tCur + 3. * rd.xz / rd.y) * rd.y, 0., 1.));\n  } else {\n    p = ro - (ro.y / rd.y) * rd;\n    col = 0.6 * mix (vec3 (0.4, 0.4, 0.1), vec3 (0.5, 0.5, 0.2),\n       Fbm2 (9. * p.xz)) * (1. - 0.1 * Noisefv2 (150. * p.xz));\n    col = mix (col, vec3 (0.35, 0.45, 0.65), pow (1. + rd.y, 32.));\n  }\n  return col;\n}\n\nfloat BldgDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 rh, drh;\n  float d;\n  q = p;  q.y -= 0.59;\n  d = PrFlatCylAnDf (q.xzy, owLen, owRad, owThk, 0.59);\n  q = p;  q.y = mod (q.y + 0.5, flHt) - 0.15;\n  if (d < owLen - 0.13 - abs (p.x)) {\n    q.x = mod (q.x + 0.14, 0.28) - 0.14;\n  } else {\n    q.x = abs (q.x) - owLen;\n    q.xz = Rot2D (q.xz, 2. * pi / 64.);\n    q.xz = Rot2D (q.xz, 2. * pi * (floor (32. * atan (q.z, - q.x) /\n       (2. * pi)) + 0.5) / 32.);\n    q.x = q.z;\n  }\n  d = max (d, - max (PrFlatCyl2Df (q.yx, 0.15, 0.1), -0.03 - q.y));\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  q = p;  q.y -= 0.35;\n  rh = vec2 (iwRad, 0.35);\n  drh = vec2 (0.05, 0.035);\n  d = PrFlatCylAnDf (q.xzy, iwLen, rh.x, 0.5 * drh.x, rh.y);\n  for (int k = 0; k < 9; k ++) {\n    q.y -= - drh.y;  rh -= drh;\n    d = min (d, PrFlatCylAnDf (q.xzy, iwLen, rh.x, 0.5 * drh.x, rh.y));\n  }\n  q = p;  q.y -= 0.07;\n  if (d < owLen - abs (p.x)) q.x = abs (q.x) - owLen + 0.27;\n  else q.x = q.z;\n  d = max (d, - max (PrFlatCyl2Df (q.yx, 0.15, 0.08), -0.05 - q.y));\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  q = p;  q.y -= 0.02;\n  d = PrFlatCylDf (q.xzy, owLen - 0.2, 0.15, 0.02);\n  if (d < dMin) { dMin = d;  idObj = 3; }\n  q = p;  q.y -= -0.003;\n  d = PrFlatCylDf (q.xzy, owLen, 1.6, 0.003);\n  if (d < dMin) { dMin = d;  idObj = 4; }\n  return dMin;\n}\n\nfloat BoatDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  p.y -= 0.7;\n  q = p;\n  d = max (max (PrRCylDf (q, 1.2, 2., 3.5),\n     - max (PrRCylDf (q - vec3 (0., 0.1, 0.), 1.15, 2., 3.5),\n     max (q.y - 0.1, - q.y - 0.1))), max (q.y - 0., - q.y - 0.2));\n  q.y -= -0.2;\n  d = max (SmoothMin (d, max (PrRCylDf (q, 1., 2., 3.3), q.y), 0.1), q.z - 2.);\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + 1;  qHit = q; }\n  q = p;\n  q.yz -= vec2 (-0.5, -0.2);\n  d = max (PrRCylDf (q, 1., 1.1, 2.3), max (0.4 - q.y, q.z - 1.2));\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + 2;  qHit = q; }\n  q = p;\n  q.yz -= vec2 (0.7, -1.);\n  d = PrCylDf (q.xzy, 0.03, 0.2);\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + 3; }\n  return dMin;\n}\n\nfloat RobDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 s;\n  float d, szFac, bf, spx;\n  bf = max (abs (p.x) - 0.8, 0.);\n  spx = sign (floor ((p.x + 0.32) / 0.64));\n  p.x = mod (p.x + 0.32, 0.64) - 0.32;\n  if (spx != 0.) p.xz = vec2 (- p.z, p.x * spx);\n  p.y -= 0.04;\n  szFac = 15.;\n  p *= szFac;\n  dMin *= szFac;\n  q = p;  q.y -= 2.2;\n  d = max (PrSphDf (q, 0.85), - q.y);\n  q = p;  q.y -= 1.55;\n  d = min (d, PrRCylDf (q.xzy, 0.9, 0.28, 0.7));\n  q = p;  q.x = abs (q.x) - 0.3;  q.y -= 3.2;\n  d = min (d, PrRCylDf (q.xzy, 0.06, 0.04, 0.3));\n  q = p;  q.x = abs (q.x) - 1.05;  q.y -= 1.5;\n  d = min (d, PrRCylDf (q.xzy, 0.2, 0.15, 0.6));\n  q = p;  q.x = abs (q.x) - 0.4;  q.y -= 0.475;\n  d = max (bf, min (d, PrRCylDf (q.xzy, 0.25, 0.15, 0.55)));\n  if (d < dMin) { dMin = d;  idObj = 11; }\n  q = p;\n  if (spx == 0.) q.z = abs (q.z);\n  q.x = abs (q.x) - 0.4;  q.yz -= vec2 (2.6, 0.7);\n  d = max (bf, PrSphDf (q, 0.15));\n  if (d < dMin) { dMin = d;  idObj = 12; }\n  dMin /= szFac;\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float d, dMin, dLim;\n  const float bSzFac = 25.;\n  dMin = dstFar;\n  dMin = BldgDf (p, dMin);\n  dMin = RobDf (p, dMin);\n  dLim = 0.5 * bSzFac;\n  dMin *= bSzFac;\n  for (int k = 0; k < 3; k ++) {\n    q = p - boatPos[k];\n    idObjGrp = (k + 1) * 256;\n    d = PrCylDf (q.xzy, 2., 2.);\n    dMin = (d < dLim) ? BoatDf (bSzFac * boatMat[k] * q, dMin) : min (dMin, d);\n  }\n  dMin /= bSzFac;\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy),\n     ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nfloat BrickSurfShd (vec2 p)\n{\n  vec2 q, iq;\n  q = p;\n  iq = floor (q);\n  if (2. * floor (iq.y / 2.) != iq.y) {\n    q.x += 0.5;  iq = floor (q);\n  }\n  q = smoothstep (0.02, 0.04, abs (fract (q + 0.5) - 0.5));\n  return 0.7 + 0.3 * q.x * q.y;\n}\n\n#define SHADOWS 0\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n#if SHADOWS\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.07 * d, h));\n    d += max (0.04, 0.08 * d);\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n#else\n  return 1.;\n#endif\n}\n\nvec4 BoatCol (vec3 n)\n{\n  vec4 objCol;\n  vec3 nn, cc;\n  int ig, id;\n  ig = idObj / 256;\n  id = idObj - 256 * ig;\n  if (ig == 1) nn = boatMat[0] * n;\n  else if (ig == 2) nn = boatMat[1] * n;\n  else nn = boatMat[2] * n;\n  if (id == 1) {\n    if (qHit.y < 0.1 && nn.y > 0.99) {\n      objCol.rgb = vec3 (0.8, 0.5, 0.3) *\n         (1. - 0.4 * SmoothBump (0.42, 0.58, 0.05, mod (7. * qHit.x, 1.)));\n      objCol.a = 0.5;\n    } else {\n      cc = vec3 (0.9, 0.3, 0.3);\n      if (qHit.y > -0.2) objCol.rgb = (ig == 1) ? cc :\n         ((ig == 2) ? cc.yzx : cc.zxy);\n      else objCol.rgb = vec3 (0.7, 0.7, 0.8);\n      objCol.a = 0.7;\n    }\n  } else if (id == 2) {\n    if (abs (abs (qHit.x) - 0.4) < 0.36 && qHit.y > 0.45 && \n       length (vec2 (abs (qHit.x) - 0.1, qHit.y - 0.2)) < 0.7 ||\n       abs (abs (qHit.z + 0.2) - 0.6) < 0.5 && abs (qHit.y - 0.65) < 0.2)\n       objCol = vec4 (0., 0., 0.1, -1.);\n    else objCol = vec4 (1.);\n  } else if (id == 3) objCol = vec4 (1., 1., 1., 0.3);\n  return objCol;\n}\n\nmat3 BoatPM (float bAng)\n{\n  mat3 bMat;\n  float bAz, c, s;\n  bAz = 0.5 * pi - bAng;\n  bMat[2] = vec3 (1., 0., 0.);\n  bMat[0] = normalize (vec3 (0., 0.1, 1.));\n  bMat[1] = cross (bMat[0], bMat[2]);\n  c = cos (bAz);\n  s = sin (bAz);\n  bMat *= mat3 (c, 0., s, 0., 1., 0., - s, 0., c);\n  return bMat;\n}\n\nfloat WakeFac (vec3 p)\n{\n  vec3 twa;\n  vec2 tw[3];\n  float twLen[3], wkFac;\n  for (int k = 0; k < 3; k ++) {\n    tw[k] = p.xz - (boatPos[k].xz - Rot2D (vec2 (0., 0.12), boatAng[k]));\n    twLen[k] = length (tw[k]);\n  }\n  if (twLen[0] < min (twLen[1], twLen[2])) twa = vec3 (tw[0], boatAng[0]);\n  else if (twLen[1] < twLen[2]) twa = vec3 (tw[1], boatAng[1]);\n  else twa = vec3 (tw[2], boatAng[2]);\n  twa.xy = Rot2D (twa.xy, - twa.z);\n  wkFac = 1. - smoothstep (0.01, 0.04, length (twa.xy * vec2 (1., 0.7)));\n  twa.x = abs (twa.x);\n  twa.xy = Rot2D (twa.xy, -0.08 * pi);\n  twa.x = abs (twa.x) - 0.045;\n  wkFac += (1. - smoothstep (0.002, 0.006, abs (twa.x))) *\n           (1. - smoothstep (0.01, 0.04, abs (twa.y)));\n  return wkFac;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 vn, col, q, row;\n  vec2 ss;\n  float dstObj, g, fw, sh, reflFac, wkFac;\n  int idObjT;\n  bool isRuf;\n  dstObj = ObjRay (ro, rd);\n  reflFac = 1.;\n  wkFac = 0.;\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    if (idObj == 4 && (abs (ro.x) < iwLen && abs (ro.z) < iwRad - 0.45 ||\n       abs (ro.x) >= iwLen && length (vec2 (abs (ro.x) - iwLen, ro.z)) <\n       iwRad - 0.45)) {\n      row = ro;\n      wkFac = WakeFac (row);\n      if (wkFac > 0.) vn = VaryNf (200. * ro, vec3 (0., 1., 0.), 0.3 * wkFac);\n      else vn = VaryNf (5. * ro + 0.1 * sin (tCur), vec3 (0., 1., 0.), 0.05);\n      rd = reflect (rd, vn);\n      ro += 0.001 * rd;\n      dstObj = ObjRay (ro, rd);\n      if (dstObj < dstFar) ro += rd * dstObj;\n      reflFac = 0.8;\n    }\n  }\n  isRuf = false;\n  if (dstObj < dstFar) {\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == 1) {\n      fw = 0.;\n      if (abs (ro.x) < owLen) {\n        g = abs (ro.z);\n      } else {\n        q = ro;  q.x = abs (q.x) - owLen;  g = length (q.xz);\n      }\n      g -= owRad;\n      if (abs (g) > owThk - 0.001) fw = sign (g);\n      if (fw == 1.) {\n        objCol = vec4 (1., 0.9, 0.9, 0.7);\n        objCol.rgb *= BrickSurfShd (vec2 (((abs (ro.x) < owLen) ? ro.x :\n           1.39 * atan (q.x, q.z)), ro.y) * vec2 (20., 30.));\n      } else if (fw == -1.) {\n        objCol = vec4 (0.8, 0.6, 0.3, 0.2);\n        isRuf = true;\n      } else objCol = vec4 (0.8, 0.8, 0.2, 1.) *\n         (0.5 + 0.5 * smoothstep (0., 0.004, abs (g)));\n      g = mod (ro.y, flHt) - 0.35;\n      if (abs (g) < 0.021) {\n        ss = SSBump (0.008, 0.01, g);\n        if (ss.x + ss.y != 0.) {\n          vn.y += 0.3 * (ss.y - ss.x);\n          vn = normalize (vn);\n          objCol.rgb *= 0.8 * ss.x + 1.1 * ss.y;\n        }\n      }\n    } else if (idObj == 2) {\n      g = 0.;\n      if (abs (ro.x) < iwLen) {\n        if (abs (ro.z) > iwRad + 0.02) g = ro.x;\n      } else {\n        q = ro;  q.x = abs (q.x) - iwLen;\n        if (length (q.xz) > iwRad + 0.02) g = owRad * atan (q.x, q.z);\n      }\n      objCol = (g != 0.) ? mix (vec4 (0.6, 0.8, 0.6, 0.5),\n         vec4 (0.6, 0.6, 0.8, 0.5),\n         SmoothBump (0.7, 1.1, 0.1, Fbm2 (20. * vec2 (g, ro.y)))) :\n         vec4 (0.6, 0.7, 0.6, 0.2) * mix (1., 0.9, Noisefv3a (200. * ro));\n    } else if (idObj == 3) {\n      objCol = (length (vec2 (mod (ro.x + 0.16, 0.32) - 0.16, ro.z)) < 0.1) ?\n         vec4 (0.1, 0.4, 0.1, 0.1) : vec4 (0.5, 0.3, 0.1, 0.1);\n      isRuf = true;\n    } else if (idObj == 4) {\n      if (abs (ro.x) < owLen) {\n        g = abs (ro.z);\n      } else {\n        q = ro;  q.x = abs (q.x) - owLen;  g = length (q.xz);\n      }\n      g -= owRad + owThk;\n      objCol = (g > 0.) ? vec4 (0.4, 0.4, 0.3, 0.1) * (1. -\n         0.1 * SmoothBump (0.1, 0.3, 0.05, mod (30. * g, 1.))) :\n         vec4 (0.5, 0.5, 0.45, 0.1);\n      isRuf = true;\n    } else if (idObj == 11) {\n      objCol = vec4 (0.75, 0.7, 0.7, 0.1);\n      isRuf = true;\n    } else if (idObj == 12) {\n      objCol = vec4 (vec3 (1., 0., 0.) * (1. - 0.2 * abs (vn.y)) *\n         (0.8 + 0.2 * sin (3. * tCur)), -1.);\n    } else if (idObj >= 256) {\n      objCol = BoatCol (vn);\n      if (objCol.a == -1.) {\n        reflFac = 0.3;\n        objCol.rgb = BgCol (ro, reflect (rd, vn));\n      }\n    }\n    sh = ObjSShadow (ro, sunDir);\n    if (isRuf) vn = VaryNf (200. * ro, vn, 1.);\n    col = objCol.rgb;\n    if (objCol.a >= 0.) col *= 0.3 +\n       sh * (0.1 * max (vn.y, 0.) + 0.7 * max (dot (vn, sunDir), 0.)) +\n       sh * objCol.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.);\n  } else {\n    sh = (rd.y < 0.) ? ObjSShadow (ro - (ro.y / rd.y) * rd, sunDir) : 1.;\n    col = sh * BgCol (ro, rd);\n  }\n  if (wkFac > 0.) col = mix (col, vec3 (0.7),\n     wkFac * clamp (0.1 + 0.6 * Fbm3 (100. * row), 0., 1.));\n  col *= reflFac;\n  return pow (clamp (col, 0., 1.), vec3 (0.7));\n}\n\nvec3 ShowWg (vec2 uv, vec2 canvas, vec3 col, float vuMode, float zmVar)\n{\n  vec4 wgBx[2];\n  vec2 ust;\n  float asp;\n  asp = canvas.x / canvas.y;\n  wgBx[0] = vec4 (0.47 * asp, -0.4, 0.03, 0.);\n  wgBx[1] = vec4 (0.47 * asp, -0.1, 0.012 * asp, 0.18);\n  ust = abs (0.5 * uv - wgBx[0].xy) - wgBx[0].zw;\n  if (max (ust.x, ust.y) < 0.) {\n    if (abs (max (ust.x, ust.y)) * canvas.y < 1.5) col = vec3 (0.8, 0.8, 0.);\n    else col = vec3 (0.8, 0.8, 0.) * mix (1., 0., abs (ust.x) / wgBx[0].z);\n  }\n  if (length (0.5 * uv - wgBx[0].xy) < wgBx[0].z) {\n    if (length (0.5 * uv - wgBx[0].xy) < 0.8 * wgBx[0].z) col =\n       (vuMode == 0.) ? vec3 (0.7, 0.7, 0.2) : ((vuMode == 1.) ?\n       vec3 (0.2, 0.2, 1.) :  vec3 (0.2, 1., 0.2));\n    else col = vec3 (1., 0.2, 0.2);\n  }\n  ust = abs (0.5 * uv - wgBx[1].xy) - wgBx[1].zw;\n  if (abs (max (ust.x, ust.y)) * canvas.y < 1.) col = vec3 (0.8, 0.8, 0.);\n  ust = 0.5 * uv - wgBx[1].xy;\n  ust.y -= (zmVar - 0.5) * 2. * wgBx[1].w;\n  ust = abs (ust) - 0.6 * wgBx[1].zz;\n  if (abs (max (ust.x, ust.y)) * canvas.y < 1.5) col = vec3 (1., 1., 0.);\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat;\n  vec3 ro, rd, vd, col, vuPos;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmVar, zmFac, vuMode;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= iResolution.x / iResolution.y;\n  tCur = iTime;\n  dstFar = 12.;\n  owRad = 1.4;  owLen = 0.83;  iwRad = 1.3;\n  iwLen = 0.7;  owThk = 0.03;  flHt = 0.4;\n  stDat = Loadv4 (0);\n  vuPos = stDat.xyz;\n  vuMode = stDat.w;\n  stDat = Loadv4 (1);\n  el = stDat.x;\n  az = stDat.y;\n  zmVar = stDat.z;\n  for (int k = 0; k < 3; k ++) {\n    stDat = Loadv4 (3 + k);\n    boatPos[k].xz = stDat.xy;\n    boatPos[k].y = 0.003 * Fbm1 (0.033 * float (k) + 5. * tCur);;\n    boatAng[k] = stDat.z;\n    boatMat[k] = BoatPM (boatAng[k]);\n  }\n  sunDir = normalize (vec3 (1., 1., -1.));\n  ro = vuPos;\n  if (vuMode == 0.) {\n    el = min (el, 0.);\n    zmFac = 2. + 10. * zmVar;\n  } else if (vuMode == 1.) {\n    vd = normalize (vec3 (clamp (ro.x, - (owLen - 0.27), owLen - 0.27),\n       0.1, 0.) - ro);\n    az = clamp (az, -0.7 * pi, 0.7 * pi);\n    el = clamp (el, -0.2 * pi, 0.2 * pi);\n    az += 0.5 * pi + atan (- vd.z, vd.x);\n    el += asin (vd.y);\n    zmFac = (1. + 0.4 * ((abs (ro.x) < owLen - 0.27) ? abs (ro.z) :\n       length (abs (ro.xz) - vec2 (owLen - 0.27, 0.)))) * (0.4 + 3. * zmVar);\n  } else if (vuMode == 2. || vuMode == 3.) {\n    vd.xz = ((vuMode == 2.) ? boatPos[0] : boatPos[2]).xz - ro.xz;\n    vd.y = - ro.y;\n    vd = normalize (vd);\n    az = clamp (az, - pi, pi);\n    el = clamp (el, -0.2 * pi, 0.2 * pi);\n    az += 0.5 * pi + atan (- vd.z, vd.x);\n    el += asin (vd.y);\n    zmFac = 1. * (1. + 3. * zmVar);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  if (vuMode == 0.) {\n    ro = vuMat * ro;\n  }\n  col = ShowScene (ro, rd);\n  col = ShowWg (uv, canvas, col, vuMode, zmVar);\n  fragColor = vec4 (col, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Aquatic Hippodrome\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float pi = 3.14159;\n\nconst float txRow = 32.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nfloat owLen, owRad, iwRad;\n\nvec3 VuPath (float t)\n{\n  vec3 p;\n  float ti[9], rI, rO, rC, hI, hO, hC, cI, s, a, d1, d2;\n  rC = iwRad - 0.4;  rI = iwRad - 0.05;  rO = owRad + 2.;  cI = owLen - 0.27;\n  hI = 1.2;  hO = 0.5;  hC = 0.1;\n  d1 = length (vec2 (rO - rC, hO - hC));\n  d2 = length (vec2 (rI - rC, hI - hC));\n  ti[0] = 0.;  ti[1] = ti[0] + d1;  ti[2] = ti[1] + d2;  ti[3] = ti[2] + pi * rI;\n  ti[4] = ti[3] + 2. * cI;  ti[5] = ti[4] + pi * rI;  ti[6] = ti[5] + d2;\n  ti[7] = ti[6] + d1;  ti[8] = ti[7] + 2. * cI;\n  t = mod (t, ti[8]);\n  if (t < ti[1]) {\n    s = (t - ti[0]) / (ti[1] - ti[0]);\n    p = vec3 (- cI, hO + s * (hC - hO), - rO + s * (rO - rC));\n  } else if (t < ti[2]) {\n    s = (t - ti[1]) / (ti[2] - ti[1]);\n    p = vec3 (- cI, hC + s * (hI - hC), - rC - s * (rI - rC));\n  } else if (t < ti[3]) {\n    s = (t - ti[2]) / (ti[3] - ti[2]);\n    a = - (0.5 + s) * pi ;\n    p = vec3 (- cI + rI * cos (a), hI, rI * sin (a));\n  } else if (t < ti[4]) {\n    s = (t - ti[3]) / (ti[4] - ti[3]);\n    p = vec3 ((2. * s - 1.) * cI, hI, rI);\n  } else if (t < ti[5]) {\n    s = (t - ti[4]) / (ti[5] - ti[4]);\n    a = (0.5 - s) * pi;\n    p = vec3 (cI + rI * cos (a), hI, rI * sin (a));\n  } else if (t < ti[6]) {\n    s = (t - ti[5]) / (ti[6] - ti[5]);\n    p = vec3 (cI, hC + (1. - s) * (hI - hC), - rC - (1. - s) * (rI - rC));\n  } else if (t < ti[7]) {\n    s = (t - ti[6]) / (ti[7] - ti[6]);\n    p = vec3 (cI, hO + (1. - s) * (hC - hO), - rO + (1. - s) * (rO - rC));\n  } else if (t < ti[8]) {\n    s = (t - ti[7]) / (ti[8] - ti[7]);\n    p = vec3 ((1. - 2. * s) * cI, hO, - rO);\n  }\n  return p;\n}\n\nvec2 BoatPath (float t)\n{\n  vec2 p;\n  float ti[5], s, r, w, a;\n  r = 0.45;\n  w = owLen - 0.2;\n  ti[0] = 0.;  ti[1] = ti[0] + 2. * w;  ti[2] = ti[1] + pi * r;\n  ti[3] = ti[2] + 2. * w;  ti[4] = ti[3] + pi * r;\n  t = mod (t, ti[4]);\n  if (t < ti[1]) {\n    s = (t - ti[0]) / (ti[1] - ti[0]);\n    p = vec2 (w * (2. * s - 1.), - r);\n  } else if (t < ti[2]) {\n    s = (t - ti[1]) / (ti[2] - ti[1]);\n    a = - 0.5 * pi + s * pi;\n    p = vec2 (w + r * cos (a), r * sin (a));\n  } else if (t < ti[3]) {\n    s = (t - ti[2]) / (ti[3] - ti[2]);\n    p = vec2 (w * (1. - 2. * s), r);\n  } else if (t < ti[4]) {\n    s = (t - ti[3]) / (ti[4] - ti[3]);\n    a = 0.5 * pi + s * pi;\n    p = vec2 (- w + r * cos (a), r * sin (a));\n  }\n  return p;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[2], mPtr, mPtrP, stDat;\n  vec3 boatPos, vuPos;\n  vec2 iFrag, canvas, ust, pp, pm;\n  float tCur, boatAng, boatSpd, vuMode, zmVar, bGap, asp, el, az, t, obsSpd;\n  int pxId, wgSel, wgReg;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 6) discard;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  wgSel = -1;\n  wgReg = -2;\n  asp = canvas.x / canvas.y;\n  owRad = 1.4;  owLen = 0.83;  iwRad = 1.3;\n  obsSpd = 0.2;\n  boatSpd = 0.15;\n  bGap = 1.;\n  if (iFrame <= 5) {\n    vuMode = 1.;\n    zmVar = 0.25;\n  } else {\n    stDat = Loadv4 (0);\n    vuMode = stDat.w;\n    stDat = Loadv4 (1);\n    zmVar = stDat.z;\n    stDat = Loadv4 (2);\n    mPtrP = vec4 (stDat.xyz, 0.);\n    wgSel = int (stDat.w);\n    az = (vuMode == 0. && mPtr.z <= 0.) ? mod (0.1 * tCur, 2. * pi) : 0.;\n    el = (vuMode == 0.) ? -0.3 : ((vuMode == 1.) ? 0.15 : 0.);\n    if (mPtr.z > 0.) {\n      wgBx[0] = vec4 (0.47 * asp, -0.4, 0.03, 0.);\n      wgBx[1] = vec4 (0.47 * asp, -0.1, 0.012 * asp, 0.18);\n      if (length (mPtr.xy * vec2 (asp, 1.) - wgBx[0].xy) < wgBx[0].z) wgReg = 0;\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[1].xy) - wgBx[1].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = 1;\n      if (mPtrP.z <= 0.) wgSel = wgReg;\n    } else {\n      wgSel = -1;\n      wgReg = -2;\n    }\n    if (wgSel < 0) {\n      if (mPtr.z > 0.) {\n        az += 3. * pi * mPtr.x;\n        el += pi * mPtr.y;\n      }\n    } else if (wgSel == 0) {\n      if (mPtrP.z <= 0.) {\n        vuMode = mod (++ vuMode, 4.);\n        zmVar = 0.25;\n      }\n    } else if (wgSel == 1) {\n       zmVar = clamp (0.5 + 0.5 * (mPtr.y - wgBx[1].y) / wgBx[1].w, 0., 1.);\n    }\n  }\n  t = boatSpd * tCur + bGap * float (pxId - 3);\n  boatPos.xz = BoatPath (t);\n  pp = BoatPath (t + 0.2);\n  pm = BoatPath (t - 0.2);\n  boatAng = 0.5 * pi - atan ((pp - pm).y, - (pp - pm).x);\n  if (vuMode == 0.) vuPos = vec3 (0., 0.3, -6.);\n  else if (vuMode == 1.) vuPos = VuPath (obsSpd * tCur);\n  else if (vuMode == 2. || vuMode == 3.) {\n    t = boatSpd * tCur + ((vuMode == 2.) ? -0.4 : 2.4) * bGap;\n    vuPos.xz = BoatPath (t);\n    vuPos.y = 0.12;\n  }\n  if (pxId == 0) stDat = vec4 (vuPos, vuMode);\n  else if (pxId == 1) stDat = vec4 (el, az, zmVar, tCur);\n  else if (pxId == 2) stDat = vec4 (mPtr.xyz, float (wgSel));\n  else if (pxId >= 3) stDat = vec4 (boatPos.xz, boatAng, 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}