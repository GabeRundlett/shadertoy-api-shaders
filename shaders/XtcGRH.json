{
    "Shader": {
        "info": {
            "date": "1467855629",
            "description": "more experimentation with feedback. was considering discretizing the advection to make visible cell boundaries, but this ended up looking pretty cool as-is.\n\ndoesn't work on mobile, sorry&mdash;it seems the multipass stuff isn&rsquo;t ready there yet.",
            "flags": 32,
            "hasliked": 0,
            "id": "XtcGRH",
            "likes": 9,
            "name": "unexpected blobs",
            "published": 3,
            "tags": [
                "noise",
                "fluid",
                "blob",
                "purple",
                "multipass"
            ],
            "usePreview": 0,
            "username": "mahalis",
            "viewed": 1012
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(1.0 - smoothstep(0.5, 1.0, texture(iChannel0, uv).rgb), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float noiseish(vec2 coord, vec2 coordMultiplier1, vec2 coordMultiplier2, vec2 coordMultiplier3, vec3 timeMultipliers, vec3 timeOffsets) {\n    return 0.333 * (sin(dot(coordMultiplier1, coord) + timeMultipliers.x * (iTime + timeOffsets.x)) + sin(dot(coordMultiplier2, coord) + timeMultipliers.y * (iTime + timeOffsets.y)) + sin(dot(coordMultiplier3, coord) + timeMultipliers.z * (iTime + timeOffsets.z)));\n}\n\nvec2 rotate(vec2 v, float angle) {\n\tfloat ca = cos(angle);\n    float sa = sin(angle);\n    return vec2(dot(v, vec2(ca, -sa)), dot(v, vec2(sa, ca)));\n}\n\nvec2 advectionDirection(vec2 uv) {\n \tfloat dx = noiseish(uv, vec2(-3.13, 2.85), vec2(1.57, -3.06), vec2(6.21, 4.13), vec3(1.03, 1.77, 2.16) * 0.4, vec3(0.29, 0.57, 0.42));   \n    float dy = noiseish(uv, vec2(3.01, -2.66), vec2(1.49, 2.88), vec2(-5.01, 3.68), vec3(0.95, 2.01, 1.83) * 0.4, vec3(0.01, 0.41, 0.68));\n    return normalize(vec2(dx, dy)) * pow(abs(dx), 2.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    float v = 0.5 + .5 * noiseish(uv * 1.5, vec2(5.12, -3.95), vec2(3.19, 5.73), vec2(-11.47, 8.71), vec3(2.91, 0.52, 3.97), vec3(0.72, 1.09, 1.83));\n    float v2 = 0.5 + .5 * noiseish(rotate(uv * 2.0, 0.4), vec2(3.81, 4.17), vec2(4.28, -3.99), vec2(6.31, 7.88), vec3(3.08, 2.61, -2.22), vec3(2.13, 0.62, 0.91));\n    v = smoothstep(0.6, 0.62, v * v2);\n    vec2 realUV = fragCoord.xy / iResolution.xy;\n    \n    vec3 lastColor = texture(iChannel0, realUV + 0.03 * advectionDirection(uv * 0.8)).rgb;\n    //vec2 edgeDim = max(vec2(0.0), 1.0 - 2.2 * abs(realUV - 0.5));\n    float edgeMultiplier = 1.0; //pow(min(edgeDim.x, edgeDim.y), 0.3);\n    vec3 finalColor = vec3(0.7, 1.0, 0.4) * v + 0.95 * lastColor;\n\t\n    fragColor = vec4(finalColor,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}