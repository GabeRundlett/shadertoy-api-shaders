{
    "Shader": {
        "info": {
            "date": "1634049221",
            "description": "This is an assignment for a class on implicit modelling presented by Eric Galin.\n\nMore information in the code.\n\nI look forward for any feedback.",
            "flags": 0,
            "hasliked": 0,
            "id": "sd3XWX",
            "likes": 12,
            "name": "Master Roshi",
            "published": 3,
            "tags": [
                "sdf",
                "color",
                "modelisation",
                "roshi"
            ],
            "usePreview": 0,
            "username": "the_last_willy",
            "viewed": 269
        },
        "renderpass": [
            {
                "code": "// MIT License Copyright (c) 2021 Willy Jacquet. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*\nModeling by writing lines of code is not my forte.\nSo I made a buch of tools for providing an interactive editing interface.\nWorks quite well but it was way overkill for this assignement.\n\nThe tree code was automatically generated with these tools.\nIt's somewhere in there: https://github.com/the-last-willy/id3d\nDisclaimer: It's a big mess.\n\nI thought it would be smart to generate a tree that only computes the distance without the material.\nTurns out drivers actually optimize shaders, and no wonder they do.\nI'm going to leave both trees just as a reminder for the harsh lesson :)\n\nAnyway, the end result doesn't have any animation, texture or visual effect.\nThat's partly because the assignement was focused on modeling.\nAnd also because I spent too much time on utility stuff.\nI started making a background scene with the Kame House.\nUnfortunately, I couldn't finish it.\n\nBut still, I'm sort of happy about it.\n\nWhat I know I could improve:\n\n- Transforms are all over the place.\nThat's actually the reason I didn't bother with animation.\nI would have to clean them up first.\n\n- Non uniform scaling introduces a factor on the distance. Thats kills performance.\nI know I could get rid of most of them by integrating it to primitives,\nbut that's makes editing more difficult and some more work is required to do that.\n\n- I have everything required to make bounding volumes.\nThat could be a way to bound the bias introduced by non uniform scaling.\nI will definitely look into that.\n\n- Some operators could be flattened to get a logarithmic number of calls.\nThat's particularly the case of the union operator.\n\n- Magic constants everywhere.\nThe code is a bit ugly and could be made more readable.\nI apologize for that.\n\nConclusion:\nI had fun.\nI'm going to continue working on the tools I used to make this.\nAnd hopefully make some more cool stuff.\n*/\n\n// Common\n\n// Hashing function\n// Returns a random number in [-1,1]\nfloat Hash(float seed)\n{\n  return fract(sin(seed)*43758.5453);\n}\n\n// Cosine direction\nvec3 Cosine(in float seed,in vec3 nor)\n{\n  float u=Hash(78.233+seed);\n  float v=Hash(10.873+seed);\n  \n  // method 3 by fizzer: http://www.amietia.com/lambertnotangent.html\n  float a=6.2831853*v;\n  u=2.*u-1.;\n  return normalize(nor+vec3(sqrt(1.-u*u)*vec2(cos(a),sin(a)),u));\n}\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 rotate_z(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n// m : Mouse position\n// p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m,in vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.8;\n  \n  ro=vec3(9.,0.,3.);\n  ro*=rotate_z(3.*3.14*m.x);\n  \n  vec3 ta=vec3(0.,0.,1.);\n  vec3 ww=normalize(ta-ro);\n  vec3 uu=normalize(cross(ww,vec3(0.,0.,1.)));\n  vec3 vv=normalize(cross(uu,ww));\n  rd=normalize(p.x*uu+p.y*vv+le*ww);\n}\n\n// Main\n\nconst int Steps=130;\nconst float Epsilon=.001;// Marching epsilon\n\nconst float rA=6.;// Maximum and minimum ray marching or sphere tracing distance from origin\nconst float rB=12.;\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float rB,out bool h,out int s)\n{\n  h=false;\n  \n  // Don't start at the origin, instead move a little bit forward\n  float t=rA;\n  \n  // Overstepping [Keinert2014].\n  float os_d = 1000.; // Overstepping distance.\n  float os_k = 0.2; // Overstepping coef.\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    \n    vec3 p=o+t*u;\n    float v=scene_sdf(p);\n    \n    \n    if(v < os_d) {\n        // Overstepped, go back and redo this iteration.\n        t -= os_d;\n        p=o+t*u;\n        v=scene_sdf(p);\n    }\n    \n\n    // Hit object\n    if(v<0.)\n    {\n      s=i;\n      h=true;\n      break;\n    }\n    \n    \n    // Move along ray and overstep.\n    t+=max(Epsilon, (1. + os_k) * abs(v));\n    // Compute overstepped distance.\n    os_d = os_k * abs(v);\n   \n    // Escape marched far away\n    if(t>(1. + os_k) * rB)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Ambient occlusion\n// p : Point\n// n : Normal\n// a : Number of samples\nfloat AmbientOcclusion(vec3 p,vec3 n,int a)\n{\n  if(a==0){return 1.;}\n  \n  float ao=0.;\n  \n  for(int i=0;i<a;i++)\n  {\n    vec3 d=Cosine(581.123*float(i),n);\n    \n    int s = 0;\n    bool h = false;\n    float t=SphereTrace(p,d,10.,h,s);\n    if(!h){ao+=1.;}\n    else if(t>5.)\n    {\n      ao+=1.;\n    }\n  }\n  \n  ao/=float(a);\n  return ao;\n}\n\n// Background color\nvec3 background(vec3 rd)\n{\n  return mix(vec3(.652,.451,.995),vec3(.552,.897,.995),rd.z*.5+.5);\n}\n\nfloat Light(vec3 p,vec3 n)\n{\n  // point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  vec3 l=normalize(lp-p);\n  \n  // Not even Phong shading, use weighted cosine instead for smooth transitions\n  float diff=pow(.5*(1.+dot(n,l)),2.);\n  \n  bool h = false;\n  int s = 0;\n  float t=SphereTrace(p+.1*n,l,100.,h,s);\n  if(!h)\n  {\n    return diff;\n  }\n  return 0.;\n}\n\nfloat SmoothLight(vec3 p,vec3 n,int a)\n{\n  if(a==0)\n  return 1.;\n  \n  // point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  vec3 l=normalize(lp-p);\n  \n  float lo=0.;\n  \n  for(int i=0;i<a;i++)\n  {\n    vec3 d=Cosine(581.123*float(i),n);\n    d=normalize(l+d*.15);\n    int s;\n    bool h;\n    float t=SphereTrace(p,d,10.,h,s);\n    if(!h){lo+=1.;}\n    else if(t>100.)\n    {\n      lo+=1.;\n    }\n  }\n  \n  lo/=float(a);\n  return lo;\n  \n}\n\n// Shading and lighting\n// p : point,\n// n : normal at point\nvec3 Shade(vec3 p,vec3 n)\n{\n  vec3 c=.25+.25*background(n);\n  c+=.15*AmbientOcclusion(p+.1*n,n,0)*vec3(1.,1.,1.);\n  c+=.35*Light(p,n);\n  return c;\n}\n\n// Shading with number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return .5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./3.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro = vec3(0.), rd = vec3(0.);\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit = false;\n  int s = 0;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Position\n  vec3 pt=ro+t*rd;\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Compute normal\n    vec3 n=scene_normal(pt);\n\n    float lambertian = max(dot(-rd, n), 0.);\n    float brightness = .5 + lambertian * .5;\n    \n    // Shade object with light\n    rgb= brightness * scene_material(pt).color;\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n    In this file:\n    - Primitives and operators\n    - Sdf tree\n    - Material tree\n*/\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n// Primitives and operators.\n// Credits to Inigo Quilez for most of it.\n\nstruct SdfAndMaterial {\n    vec3 color;\n    float distance;\n};\n\nfloat circle(float r, vec3 p) {\n    vec2 q = vec2(length(p.xz)-r,p.y);\n    return length(q);\n}\n\nfloat cone(in vec2 q, in vec3 p) {\n    vec2 w = vec2( length(p.xz), p.y );\n    vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n    float k = sign( q.y );\n    float d = min(dot( a, a ),dot(b, b));\n    float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n    return sqrt(d)*sign(s);\n}\n\nfloat corrected(float c, float d) {\n    return d * c;\n}\n\nSdfAndMaterial corrected(float c, SdfAndMaterial sam) {\n    return SdfAndMaterial(\n        sam.color,\n        corrected(c, sam.distance));\n}\n\nfloat cube(vec3 p) {\n    p = abs(p);\n    float exterior = length(max(p - vec3(.5), 0.));\n    float interior = min(max(p.x, max(p.y, p.z)) - .5, 0.);\n    return exterior + interior;\n}\n\nfloat difference(float d0, float d1) {\n    return max(d0, -d1);\n}\n\nSdfAndMaterial difference(in SdfAndMaterial sam0, in SdfAndMaterial sam1) {\n    return SdfAndMaterial(\n        sam0.color,\n        difference(sam0.distance, sam1.distance));\n}\n\nfloat dilated(float radius, float d) {\n    return d - radius;\n}\n\nSdfAndMaterial dilated(float radius, SdfAndMaterial sam) {\n    sam.distance = dilated(radius, sam.distance);\n    return sam;\n}\n\nfloat inverted(float d) {\n    return -d;\n}\n\nSdfAndMaterial inverted(in SdfAndMaterial sam) {\n    return SdfAndMaterial(\n        sam.color,\n        inverted(sam.distance));\n}\n\nfloat onion(in float f) {\n    return abs(f);\n}\n\nSdfAndMaterial onion(in SdfAndMaterial sam) {\n    return SdfAndMaterial(\n        sam.color,\n        onion(sam.distance));\n}\n\nfloat point(in vec3 position) {\n    return length(position);\n}\n\nvec3 reflected_x(vec3 p) {\n    return vec3(abs(p.x), p.yz);\n}\n\nvec3 reflected_y(in vec3 p) {\n    p.y = abs(p.y);\n    return p;\n}\n\nvec3 reflected_z(vec3 p) {\n    p.z = abs(p.z);\n    return p;\n}\n\nvec3 rotated_x(float a, vec3 p) {\n    float sa=sin(a);\n    float ca=cos(a);\n    return vec3(\n        p.x,\n        ca * p.y - sa * p.z,\n        sa * p.y + ca * p.z);\n}\n\nvec3 rotated_y(float a, vec3 p) {\n    float sa=sin(a);\n    float ca=cos(a);\n    return vec3(ca*p.x+sa*p.z,p.y,-sa*p.x+ca*p.z);\n}\n\nvec3 rotated_z(float a, vec3 p) {\n    float sa=sin(a);\n    float ca=cos(a);\n    return vec3(ca*p.x+sa*p.y,-sa*p.x+ca*p.y,p.z);\n}\n\nvec3 scaled(float s, vec3 position) {\n    return position / s;\n}\n\nvec3 scaled(vec3 s, vec3 position) {\n    return position / s;\n}\n\nfloat ellipsoid(in vec3 r, in vec3 p) {\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\nfloat intersection(in float d0, in float d1) {\n    return max(d0, d1);\n}\n\nSdfAndMaterial intersection(in SdfAndMaterial sam0, in SdfAndMaterial sam1) {\n    if(sam0.distance < sam1.distance) {\n        return sam1;\n    } else {\n        return sam0;\n    }\n}\n\nfloat line_segment(vec3 a, vec3 b, vec3 p) {\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat plane(vec3 position) {\n    return abs(position.x);\n}\n\nfloat unionn(in float d0, in float d1) {\n    return min(d0, d1);\n}\n\nSdfAndMaterial unionn(in SdfAndMaterial sam0, in SdfAndMaterial sam1) {\n    if(sam0.distance < sam1.distance) {\n        return sam0;\n    } else {\n        return sam1;\n    }\n}\n\nfloat smooth_union(float k, float d1, float d2) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nSdfAndMaterial smooth_union(float k, in SdfAndMaterial sam0, in SdfAndMaterial sam1) {\n    float d1 = sam0.distance;\n    float d2 = sam1.distance;\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return SdfAndMaterial(\n        mix(sam1.color, sam0.color, h),\n        mix(d2, d1, h) - k*h*(1.0-h));\n}\n\nvec3 translated(vec3 translation, vec3 position) {\n    return position - translation;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n//  SDF tree.\n\nfloat roshi_rod_sdf(vec3 position) {\n  return smooth_union(0.2,\n    dilated(0.05,\n      corrected(0.23,\n        corrected(0.1,\n          cube(\n            scaled(vec3(0.1, 0.1, 0.1),\n              scaled(vec3(0.23, 0.24, 0.58),\n                rotated_z(-0.73,\n                  rotated_y(-0.21,\n                    rotated_x(-1.01,\n                      translated(vec3(0.33, 1.01, -0.5),\n                        position)))))))))),\n    smooth_union(0.2,\n      dilated(0.05,\n        corrected(1.59,\n          corrected(0.1,\n            cube(\n              scaled(vec3(0.1, 0.1, 0.1),\n                scaled(vec3(1.76, 1.59, 1.66),\n                  rotated_y(-0.46,\n                    rotated_x(-0.92,\n                      translated(vec3(0.33, 1.19, -0.5),\n                        position))))))))),\n      smooth_union(0.2,\n        dilated(0.05,\n          corrected(1.,\n            corrected(0.1,\n              cube(\n                scaled(vec3(0.1, 0.1, 0.1),\n                  scaled(vec3(1.11, 1, 1.55),\n                    rotated_z(-0.73,\n                      rotated_y(-0.21,\n                        rotated_x(-1.01,\n                          translated(vec3(0.33, 1.43, -0.5),\n                            position)))))))))),\n        corrected(1.,\n          dilated(0.05,\n            line_segment(vec3(0, -1, 0), vec3(0, 1, 0), scaled(vec3(1, 1.08, 1),\n              translated(vec3(0.36, -0.02, -0.46),\n                position))))))));\n}\n\nfloat roshi_shirt_sdf(vec3 position) {\n  return unionn(\n    intersection(\n      inverted(\n        translated(vec3(0.1, 0, 0),\n          position).x),\n      corrected(0.46,\n        intersection(\n          inverted(\n            scaled(vec3(1.14, 1.16, 0.46),\n              translated(vec3(-0.06, 0, 0),\n                position)).y),\n          ellipsoid(vec3(0.65, 2, 1),\n            scaled(vec3(1.14, 1.16, 0.46),\n              translated(vec3(-0.06, 0, 0),\n                position)))))),\n    unionn(\n      corrected(0.1,\n        unionn(\n          corrected(0.34,\n            dilated(1.,\n              point(scaled(vec3(0.86, 0.34, 0.94),\n                translated(vec3(6.2, 1.88, 0),\n                  scaled(vec3(0.1, 0.1, 0.1),\n                    position)))))),\n          unionn(\n            corrected(0.39,\n              dilated(1.,\n                point(scaled(vec3(0.62, 0.39, 1),\n                  translated(vec3(6.15, 4.54, 0),\n                    scaled(vec3(0.1, 0.1, 0.1),\n                      position)))))),\n            unionn(\n              corrected(0.39,\n                dilated(1.,\n                  point(scaled(vec3(0.62, 0.39, 1),\n                    translated(vec3(5.95, 7.06, 0),\n                      scaled(vec3(0.1, 0.1, 0.1),\n                        position)))))),\n              corrected(0.39,\n                dilated(1.,\n                  point(scaled(vec3(0.62, 0.39, 1),\n                    translated(vec3(5.73, 9.51, 0),\n                      scaled(vec3(0.1, 0.1, 0.1),\n                        position)))))))))),\n      smooth_union(0.1,\n        corrected(0.4,\n          dilated(1.,\n            point(scaled(vec3(0.4, 0.4, 0.4),\n              translated(vec3(0, 1.16, 0.58),\n                reflected_z(\n                  position)))))),\n        intersection(\n          inverted(\n            position.y),\n          ellipsoid(vec3(0.65, 2, 1),\n            position)))));\n}\n\nfloat roshi_left_arm_sdf(vec3 position) {\n  return unionn(\n    dilated(0.1,\n      corrected(0.125,\n        cube(\n          scaled(vec3(0.125, 0.13, 0.15),\n            translated(vec3(0, 0.2, 0.92),\n              position))))),\n    unionn(\n      corrected(0.36,\n        dilated(0.2,\n          circle(1.,\n            scaled(vec3(0.38, 0.96, 0.36),\n              translated(vec3(0, 0.33, 0.86),\n                position))))),\n      unionn(\n        dilated(0.1,\n          corrected(0.125,\n            cube(\n              scaled(vec3(0.125, 0.13, 0.15),\n                translated(vec3(0, 0.2, 0.92),\n                  position))))),\n        intersection(\n          inverted(\n            translated(vec3(0, 0.2, 0),\n              position).y),\n          dilated(0.4,\n            line_segment(vec3(0, 1.16, 0.58), vec3(0, 0.27, 0.87), position))))));\n}\n\nfloat roshi_right_arm_sdf(vec3 position) {\n  return unionn(\n    corrected(0.36,\n      dilated(0.2,\n        circle(1.,\n          scaled(vec3(0.36, 1.26, 0.36),\n            rotated_z(-1.68,\n              translated(vec3(0.36, 0.62, -0.94),\n                position)))))),\n    unionn(\n      smooth_union(0.2,\n        dilated(0.1,\n          corrected(0.125,\n            cube(\n              scaled(vec3(0.125, 0.13, 0.15),\n                translated(vec3(0.73, 0.61, -0.9),\n                  position))))),\n        dilated(0.1,\n          line_segment(vec3(0, 0.65, -0.98), vec3(0.67, 0.63, -0.94), position))),\n      intersection(\n        corrected(1.,\n          scaled(vec3(1, 1, 1),\n            translated(vec3(0.47, 0, 0),\n              position)).x),\n        dilated(0.01,\n          onion(\n            unionn(\n              dilated(0.39,\n                line_segment(vec3(0, 0.65, -0.98), vec3(0.37, 0.63, -0.94), position)),\n              dilated(0.39,\n                line_segment(vec3(0, 1.16, -0.58), vec3(0, 0.65, -0.98), position))))))));\n}\n\nfloat roshi_head_sdf(vec3 position) {\n  return unionn(\n    corrected(0.4,\n      smooth_union(0.2,\n        corrected(0.1,\n          corrected(1.,\n            dilated(1.,\n              point(scaled(vec3(1, 1, 1),\n                translated(vec3(9.34, -4.26, 0.25),\n                  reflected_z(\n                    scaled(vec3(0.1, 0.1, 0.1),\n                      scaled(vec3(0.4, 0.4, 0.4),\n                        translated(vec3(0.29, 1.92, 0),\n                          position)))))))))),\n        smooth_union(0.2,\n          corrected(0.1,\n            dilated(1.,\n              line_segment(vec3(10.07, 0.08, 0), vec3(10.59, -4.16, 0), scaled(vec3(0.1, 0.1, 0.1),\n                scaled(vec3(0.4, 0.4, 0.4),\n                  translated(vec3(0.29, 1.92, 0),\n                    position)))))),\n          smooth_union(0.2,\n            corrected(0.7,\n              dilated(0.2,\n                cube(\n                  scaled(vec3(1, 1.05, 0.7),\n                    translated(vec3(0.05, -0.49, 0),\n                      scaled(vec3(0.4, 0.4, 0.4),\n                        translated(vec3(0.29, 1.92, 0),\n                          position))))))),\n            smooth_union(0.2,\n              corrected(0.56,\n                dilated(0.2,\n                  cube(\n                    scaled(vec3(0.9, 0.56, 0.91),\n                      translated(vec3(0.06, -0.13, 0),\n                        scaled(vec3(0.4, 0.4, 0.4),\n                          translated(vec3(0.29, 1.92, 0),\n                            position))))))),\n              smooth_union(0.2,\n                corrected(0.3,\n                  ellipsoid(vec3(1, 1, 0.5),\n                    scaled(vec3(0.3, 0.3, 0.3),\n                      rotated_y(-0.93,\n                        translated(vec3(0, -0.21, 1.07),\n                          reflected_z(\n                            scaled(vec3(0.4, 0.4, 0.4),\n                              translated(vec3(0.29, 1.92, 0),\n                                position)))))))),\n                dilated(1.,\n                  point(scaled(vec3(0.4, 0.4, 0.4),\n                    translated(vec3(0.29, 1.92, 0),\n                      position)))))))))),\n    corrected(0.1,\n      dilated(0.1,\n        unionn(\n          difference(corrected(1.19,\n            dilated(1.,\n              point(scaled(vec3(1.19, 1.24, 1.21),\n                translated(vec3(5.52, 22.04, 1.29),\n                  reflected_z(\n                    scaled(vec3(0.1, 0.1, 0.1),\n                      translated(vec3(0, -0.1, 0),\n                        position)))))))), corrected(1.78,\n            dilated(1.,\n              point(scaled(vec3(2.38, 4.93, 1.78),\n                translated(vec3(7.46, 20.27, 1.28),\n                  reflected_z(\n                    scaled(vec3(0.1, 0.1, 0.1),\n                      translated(vec3(0, -0.1, 0),\n                        position))))))))),\n          unionn(\n            smooth_union(0.3,\n              corrected(0.71,\n                dilated(1.,\n                  point(scaled(vec3(0.71, 1.04, 1.55),\n                    translated(vec3(6.77, 17.21, 0),\n                      scaled(vec3(0.1, 0.1, 0.1),\n                        translated(vec3(0, -0.1, 0),\n                          position))))))),\n              corrected(0.75,\n                cone(vec2(1., 1.),\n                  scaled(vec3(0.75, 3.51, 1.35),\n                    rotated_x(0.64,\n                      translated(vec3(6.81, 13.67, 2.86),\n                        reflected_z(\n                          scaled(vec3(0.1, 0.1, 0.1),\n                            translated(vec3(0, -0.1, 0),\n                              position))))))))),\n            corrected(0.83,\n              cone(vec2(1., 1.),\n                scaled(vec3(0.83, 5.2, 2),\n                  translated(vec3(6.46, 10.32, -0.14),\n                    scaled(vec3(0.1, 0.1, 0.1),\n                      translated(vec3(0, -0.1, 0),\n                        position)))))))))));\n}\n\nfloat roshi_glasses_sdf(vec3 position) {\n  return unionn(\n    corrected(0.1,\n      corrected(0.24,\n        dilated(1.,\n          point(scaled(vec3(0.24, 0.97, 1.24),\n            translated(vec3(7.3, 19.17, 1.83),\n              reflected_z(\n                scaled(vec3(0.1, 0.1, 0.1),\n                  position)))))))),\n    corrected(0.1,\n      smooth_union(0.1,\n        dilated(0.2,\n          line_segment(vec3(2.34, 19.72, 4.31), vec3(7.08, 19.52, 3.26), reflected_z(\n            scaled(vec3(0.1, 0.1, 0.1),\n              position)))),\n        smooth_union(0.1,\n          corrected(0.58,\n            dilated(0.1,\n              line_segment(vec3(0, 0, -1), vec3(0, 0, 1), scaled(vec3(0.58, 2.3, 1.57),\n                translated(vec3(7.3, 19.75, 0),\n                  scaled(vec3(0.1, 0.1, 0.1),\n                    position)))))),\n          corrected(0.23,\n            dilated(1.,\n              point(scaled(vec3(0.23, 1.23, 1.57),\n                translated(vec3(7.18, 19.21, 1.87),\n                  reflected_z(\n                    scaled(vec3(0.1, 0.1, 0.1),\n                      position)))))))))));\n}\n\n// Alright, I got lazy for that one.\nfloat roshi_lower_half_sdf(vec3 position) {\n  return smooth_union(0.2,\n    corrected(0.32,\n      dilated(1.,\n        point(scaled(vec3(0.331, 0.32, 0.36),\n          translated(vec3(-0.03, -0.26, -0.31),\n            position))))),\n    smooth_union(0.2,\n      corrected(0.31,\n        dilated(1.,\n          point(scaled(vec3(0.31, 0.32, 0.36),\n            translated(vec3(0.1, -0.11, 0.36),\n              position))))),\n      unionn(\n        corrected(0.24,\n          intersection(\n            inverted(\n              scaled(vec3(0.51, 0.26, 0.24),\n                rotated_y(0.37,\n                  translated(vec3(0.17, -1.25, 0.3),\n                    reflected_z(\n                      position)))).y),\n            unionn(\n              corrected(0.74,\n                dilated(1.,\n                  point(scaled(vec3(1.29, 0.74, 1.21),\n                    translated(vec3(-0.08, 0.12, 0),\n                      scaled(vec3(0.51, 0.26, 0.24),\n                        rotated_y(0.37,\n                          translated(vec3(0.17, -1.25, 0.3),\n                            reflected_z(\n                              position))))))))),\n              dilated(1.,\n                point(scaled(vec3(0.51, 0.26, 0.24),\n                  rotated_y(0.37,\n                    translated(vec3(0.17, -1.25, 0.3),\n                      reflected_z(\n                        position))))))))),\n        corrected(0.49,\n          dilated(0.2,\n            cone(vec2(1., 1.),\n              scaled(vec3(0.49, 0.94, 0.53),\n                translated(vec3(0.01, -0.88, 0.24),\n                  reflected_z(\n                    position)))))))));\n}\n\nfloat roshi_sdf(vec3 position) {\n  return unionn(\n    roshi_lower_half_sdf(\n      position),\n    unionn(\n      roshi_glasses_sdf(\n        position),\n      unionn(\n        roshi_head_sdf(\n          position),\n        unionn(\n          roshi_right_arm_sdf(\n            position),\n          unionn(\n            roshi_left_arm_sdf(\n              position),\n            unionn(\n              roshi_shirt_sdf(\n                position),\n              corrected(1.,\n                roshi_rod_sdf(\n                  scaled(vec3(1, 1.08, 1),\n                    translated(vec3(0.36, -0.02, -0.46),\n                      position))))))))));\n}\n\nfloat scene_sdf(vec3 position) {\n  return roshi_sdf(\n    vec3(position.y, position.z, -position.x));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n// Material tree.\n\nSdfAndMaterial roshi_rod_material(vec3 position) {\n  return SdfAndMaterial(vec3(0.356863, 0.160784, 0.152941),\n    smooth_union(0.2,\n      dilated(0.05,\n        corrected(0.23,\n          corrected(0.1,\n            cube(\n              scaled(vec3(0.1, 0.1, 0.1),\n                scaled(vec3(0.23, 0.24, 0.58),\n                  rotated_z(-0.73,\n                    rotated_y(-0.21,\n                      rotated_x(-1.01,\n                        translated(vec3(0.33, 1.01, -0.5),\n                          position)))))))))),\n      smooth_union(0.2,\n        dilated(0.05,\n          corrected(1.59,\n            corrected(0.1,\n              cube(\n                scaled(vec3(0.1, 0.1, 0.1),\n                  scaled(vec3(1.76, 1.59, 1.66),\n                    rotated_y(-0.46,\n                      rotated_x(-0.92,\n                        translated(vec3(0.33, 1.19, -0.5),\n                          position))))))))),\n        smooth_union(0.2,\n          dilated(0.05,\n            corrected(1.,\n              corrected(0.1,\n                cube(\n                  scaled(vec3(0.1, 0.1, 0.1),\n                    scaled(vec3(1.11, 1, 1.55),\n                      rotated_z(-0.73,\n                        rotated_y(-0.21,\n                          rotated_x(-1.01,\n                            translated(vec3(0.33, 1.43, -0.5),\n                              position)))))))))),\n          corrected(1.,\n            dilated(0.05,\n              line_segment(vec3(0, -1, 0), vec3(0, 1, 0), scaled(vec3(1, 1.08, 1),\n                translated(vec3(0.36, -0.02, -0.46),\n                  position)))))))));\n}\n\nSdfAndMaterial roshi_shirt_material(vec3 position) {\n  return unionn(\n    SdfAndMaterial(vec3(0.870588, 0.780392, 0.780392),\n      intersection(\n        inverted(\n          translated(vec3(0.1, 0, 0),\n            position).x),\n        corrected(0.46,\n          intersection(\n            inverted(\n              scaled(vec3(1.14, 1.16, 0.46),\n                translated(vec3(-0.06, 0, 0),\n                  position)).y),\n            ellipsoid(vec3(0.65, 2, 1),\n              scaled(vec3(1.14, 1.16, 0.46),\n                translated(vec3(-0.06, 0, 0),\n                  position))))))),\n    unionn(\n      SdfAndMaterial(vec3(0.227451, 0.145098, 0.262745),\n        corrected(0.1,\n          unionn(\n            corrected(0.34,\n              dilated(1.,\n                point(scaled(vec3(0.86, 0.34, 0.94),\n                  translated(vec3(6.2, 1.88, 0),\n                    scaled(vec3(0.1, 0.1, 0.1),\n                      position)))))),\n            unionn(\n              corrected(0.39,\n                dilated(1.,\n                  point(scaled(vec3(0.62, 0.39, 1),\n                    translated(vec3(6.15, 4.54, 0),\n                      scaled(vec3(0.1, 0.1, 0.1),\n                        position)))))),\n              unionn(\n                corrected(0.39,\n                  dilated(1.,\n                    point(scaled(vec3(0.62, 0.39, 1),\n                      translated(vec3(5.95, 7.06, 0),\n                        scaled(vec3(0.1, 0.1, 0.1),\n                          position)))))),\n                corrected(0.39,\n                  dilated(1.,\n                    point(scaled(vec3(0.62, 0.39, 1),\n                      translated(vec3(5.73, 9.51, 0),\n                        scaled(vec3(0.1, 0.1, 0.1),\n                          position))))))))))),\n      SdfAndMaterial(vec3(0.8, 0.443137, 0.239216),\n        smooth_union(0.1,\n          corrected(0.4,\n            dilated(1.,\n              point(scaled(vec3(0.4, 0.4, 0.4),\n                translated(vec3(0, 1.16, 0.58),\n                  reflected_z(\n                    position)))))),\n          intersection(\n            inverted(\n              position.y),\n            ellipsoid(vec3(0.65, 2, 1),\n              position))))));\n}\n\nSdfAndMaterial roshi_left_arm_material(vec3 position) {\n  return unionn(\n    SdfAndMaterial(vec3(0.819608, 0.560784, 0.498039),\n      dilated(0.1,\n        corrected(0.125,\n          cube(\n            scaled(vec3(0.125, 0.13, 0.15),\n              translated(vec3(0, 0.2, 0.92),\n                position)))))),\n    unionn(\n      SdfAndMaterial(vec3(0.870588, 0.780392, 0.780392),\n        corrected(0.36,\n          dilated(0.2,\n            circle(1.,\n              scaled(vec3(0.38, 0.96, 0.36),\n                translated(vec3(0, 0.33, 0.86),\n                  position)))))),\n      unionn(\n        SdfAndMaterial(vec3(0.819608, 0.560784, 0.498039),\n          dilated(0.1,\n            corrected(0.125,\n              cube(\n                scaled(vec3(0.125, 0.13, 0.15),\n                  translated(vec3(0, 0.2, 0.92),\n                    position)))))),\n        SdfAndMaterial(vec3(0.8, 0.443137, 0.239216),\n          intersection(\n            inverted(\n              translated(vec3(0, 0.2, 0),\n                position).y),\n            dilated(0.4,\n              line_segment(vec3(0, 1.16, 0.58), vec3(0, 0.27, 0.87), position)))))));\n}\n\nSdfAndMaterial roshi_right_arm_material(vec3 position) {\n  return unionn(\n    SdfAndMaterial(vec3(0.870588, 0.780392, 0.780392),\n      corrected(0.36,\n        dilated(0.2,\n          circle(1.,\n            scaled(vec3(0.36, 1.26, 0.36),\n              rotated_z(-1.68,\n                translated(vec3(0.36, 0.62, -0.94),\n                  position))))))),\n    unionn(\n      SdfAndMaterial(vec3(0.819608, 0.560784, 0.498039),\n        smooth_union(0.2,\n          dilated(0.1,\n            corrected(0.125,\n              cube(\n                scaled(vec3(0.125, 0.13, 0.15),\n                  translated(vec3(0.73, 0.61, -0.9),\n                    position))))),\n          dilated(0.1,\n            line_segment(vec3(0, 0.65, -0.98), vec3(0.67, 0.63, -0.94), position)))),\n      SdfAndMaterial(vec3(0.8, 0.443137, 0.239216),\n        intersection(\n          corrected(1.,\n            scaled(vec3(1, 1, 1),\n              translated(vec3(0.47, 0, 0),\n                position)).x),\n          dilated(0.01,\n            onion(\n              unionn(\n                dilated(0.39,\n                  line_segment(vec3(0, 0.65, -0.98), vec3(0.37, 0.63, -0.94), position)),\n                dilated(0.39,\n                  line_segment(vec3(0, 1.16, -0.58), vec3(0, 0.65, -0.98), position)))))))));\n}\n\nSdfAndMaterial roshi_head_material(vec3 position) {\n  return unionn(\n    SdfAndMaterial(vec3(0.819608, 0.560784, 0.498039),\n      corrected(0.4,\n        smooth_union(0.2,\n          corrected(0.1,\n            corrected(1.,\n              dilated(1.,\n                point(scaled(vec3(1, 1, 1),\n                  translated(vec3(9.34, -4.26, 0.25),\n                    reflected_z(\n                      scaled(vec3(0.1, 0.1, 0.1),\n                        scaled(vec3(0.4, 0.4, 0.4),\n                          translated(vec3(0.29, 1.92, 0),\n                            position)))))))))),\n          smooth_union(0.2,\n            corrected(0.1,\n              dilated(1.,\n                line_segment(vec3(10.07, 0.08, 0), vec3(10.59, -4.16, 0), scaled(vec3(0.1, 0.1, 0.1),\n                  scaled(vec3(0.4, 0.4, 0.4),\n                    translated(vec3(0.29, 1.92, 0),\n                      position)))))),\n            smooth_union(0.2,\n              corrected(0.7,\n                dilated(0.2,\n                  cube(\n                    scaled(vec3(1, 1.05, 0.7),\n                      translated(vec3(0.05, -0.49, 0),\n                        scaled(vec3(0.4, 0.4, 0.4),\n                          translated(vec3(0.29, 1.92, 0),\n                            position))))))),\n              smooth_union(0.2,\n                corrected(0.56,\n                  dilated(0.2,\n                    cube(\n                      scaled(vec3(0.9, 0.56, 0.91),\n                        translated(vec3(0.06, -0.13, 0),\n                          scaled(vec3(0.4, 0.4, 0.4),\n                            translated(vec3(0.29, 1.92, 0),\n                              position))))))),\n                smooth_union(0.2,\n                  corrected(0.3,\n                    ellipsoid(vec3(1, 1, 0.5),\n                      scaled(vec3(0.3, 0.3, 0.3),\n                        rotated_y(-0.93,\n                          translated(vec3(0, -0.21, 1.07),\n                            reflected_z(\n                              scaled(vec3(0.4, 0.4, 0.4),\n                                translated(vec3(0.29, 1.92, 0),\n                                  position)))))))),\n                  dilated(1.,\n                    point(scaled(vec3(0.4, 0.4, 0.4),\n                      translated(vec3(0.29, 1.92, 0),\n                        position))))))))))),\n    SdfAndMaterial(vec3(0.870588, 0.780392, 0.780392),\n      corrected(0.1,\n        dilated(0.1,\n          unionn(\n            difference(corrected(1.19,\n              dilated(1.,\n                point(scaled(vec3(1.19, 1.24, 1.21),\n                  translated(vec3(5.52, 22.04, 1.29),\n                    reflected_z(\n                      scaled(vec3(0.1, 0.1, 0.1),\n                        translated(vec3(0, -0.1, 0),\n                          position)))))))), corrected(1.78,\n              dilated(1.,\n                point(scaled(vec3(2.38, 4.93, 1.78),\n                  translated(vec3(7.46, 20.27, 1.28),\n                    reflected_z(\n                      scaled(vec3(0.1, 0.1, 0.1),\n                        translated(vec3(0, -0.1, 0),\n                          position))))))))),\n            unionn(\n              smooth_union(0.3,\n                corrected(0.71,\n                  dilated(1.,\n                    point(scaled(vec3(0.71, 1.04, 1.55),\n                      translated(vec3(6.77, 17.21, 0),\n                        scaled(vec3(0.1, 0.1, 0.1),\n                          translated(vec3(0, -0.1, 0),\n                            position))))))),\n                corrected(0.75,\n                  cone(vec2(1., 1.),\n                    scaled(vec3(0.75, 3.51, 1.35),\n                      rotated_x(0.64,\n                        translated(vec3(6.81, 13.67, 2.86),\n                          reflected_z(\n                            scaled(vec3(0.1, 0.1, 0.1),\n                              translated(vec3(0, -0.1, 0),\n                                position))))))))),\n              corrected(0.83,\n                cone(vec2(1., 1.),\n                  scaled(vec3(0.83, 5.2, 2),\n                    translated(vec3(6.46, 10.32, -0.14),\n                      scaled(vec3(0.1, 0.1, 0.1),\n                        translated(vec3(0, -0.1, 0),\n                          position))))))))))));\n}\n\nSdfAndMaterial roshi_glasses_material(vec3 position) {\n  return unionn(\n    SdfAndMaterial(vec3(0.0470588, 0.2, 0.0666667),\n      corrected(0.1,\n        corrected(0.24,\n          dilated(1.,\n            point(scaled(vec3(0.24, 0.97, 1.24),\n              translated(vec3(7.3, 19.17, 1.83),\n                reflected_z(\n                  scaled(vec3(0.1, 0.1, 0.1),\n                    position))))))))),\n    SdfAndMaterial(vec3(0.490196, 0.12549, 0.0745098),\n      corrected(0.1,\n        smooth_union(0.1,\n          dilated(0.2,\n            line_segment(vec3(2.34, 19.72, 4.31), vec3(7.08, 19.52, 3.26), reflected_z(\n              scaled(vec3(0.1, 0.1, 0.1),\n                position)))),\n          smooth_union(0.1,\n            corrected(0.58,\n              dilated(0.1,\n                line_segment(vec3(0, 0, -1), vec3(0, 0, 1), scaled(vec3(0.58, 2.3, 1.57),\n                  translated(vec3(7.3, 19.75, 0),\n                    scaled(vec3(0.1, 0.1, 0.1),\n                      position)))))),\n            corrected(0.23,\n              dilated(1.,\n                point(scaled(vec3(0.23, 1.23, 1.57),\n                  translated(vec3(7.18, 19.21, 1.87),\n                    reflected_z(\n                      scaled(vec3(0.1, 0.1, 0.1),\n                        position))))))))))));\n}\n\nSdfAndMaterial roshi_lower_half_material(vec3 position) {\n  return smooth_union(0.2,\n    SdfAndMaterial(vec3(0.219608, 0.203922, 0.494118),\n      corrected(0.32,\n        dilated(1.,\n          point(scaled(vec3(0.331, 0.32, 0.36),\n            translated(vec3(-0.03, -0.26, -0.31),\n              position)))))),\n    smooth_union(0.2,\n      SdfAndMaterial(vec3(0.219608, 0.203922, 0.494118),\n        corrected(0.31,\n          dilated(1.,\n            point(scaled(vec3(0.31, 0.32, 0.36),\n              translated(vec3(0.1, -0.11, 0.36),\n                position)))))),\n      unionn(\n        corrected(0.24,\n          intersection(\n            SdfAndMaterial(vec3(0.819608, 0.560784, 0.498039),\n              inverted(\n                scaled(vec3(0.51, 0.26, 0.24),\n                  rotated_y(0.37,\n                    translated(vec3(0.17, -1.25, 0.3),\n                      reflected_z(\n                        position)))).y)),\n            unionn(\n              SdfAndMaterial(vec3(0.227451, 0.145098, 0.262745),\n                corrected(0.74,\n                  dilated(1.,\n                    point(scaled(vec3(1.29, 0.74, 1.21),\n                      translated(vec3(-0.08, 0.12, 0),\n                        scaled(vec3(0.51, 0.26, 0.24),\n                          rotated_y(0.37,\n                            translated(vec3(0.17, -1.25, 0.3),\n                              reflected_z(\n                                position)))))))))),\n              SdfAndMaterial(vec3(0.819608, 0.560784, 0.498039),\n                dilated(1.,\n                  point(scaled(vec3(0.51, 0.26, 0.24),\n                    rotated_y(0.37,\n                      translated(vec3(0.17, -1.25, 0.3),\n                        reflected_z(\n                          position)))))))))),\n        SdfAndMaterial(vec3(0.219608, 0.203922, 0.494118),\n          corrected(0.49,\n            dilated(0.2,\n              cone(vec2(1., 1.),\n                scaled(vec3(0.49, 0.94, 0.53),\n                  translated(vec3(0.01, -0.88, 0.24),\n                    reflected_z(\n                      position))))))))));\n}\n\nSdfAndMaterial roshi_material(vec3 position) {\n  return unionn(\n    roshi_lower_half_material(\n      position),\n    unionn(\n      roshi_glasses_material(\n        position),\n      unionn(\n        roshi_head_material(\n          position),\n        unionn(\n          roshi_right_arm_material(\n            position),\n          unionn(\n            roshi_left_arm_material(\n              position),\n            unionn(\n              roshi_shirt_material(\n                position),\n              corrected(1.,\n                roshi_rod_material(\n                  scaled(vec3(1, 1.08, 1),\n                    translated(vec3(0.36, -0.02, -0.46),\n                      position))))))))));\n}\n\nSdfAndMaterial scene_material(vec3 position) {\n  return roshi_material(\n    vec3(position.y, position.z, -position.x));\n}\n\nvec3 scene_normal( in vec3 p) {\n  float e = .01;\n  float v = scene_sdf(p);\n  return normalize(vec3(\n    scene_sdf(vec3(p.x + e, p.y, p.z)) - v,\n    scene_sdf(vec3(p.x, p.y + e, p.z)) - v,\n    scene_sdf(vec3(p.x, p.y, p.z + e)) - v));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}