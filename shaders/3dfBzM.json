{
    "Shader": {
        "info": {
            "date": "1587850811",
            "description": "Small stylized shoreline shader.",
            "flags": 0,
            "hasliked": 0,
            "id": "3dfBzM",
            "likes": 26,
            "name": "Stylized Shoreline",
            "published": 3,
            "tags": [
                "water",
                "stylized",
                "shore"
            ],
            "usePreview": 0,
            "username": "haralis",
            "viewed": 1132
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265369\n\nfloat rand(vec2 c){\n\treturn fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 fade(vec2 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\n\nfloat cnoise(vec2 P){\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n  vec4 i = permute(permute(ix) + iy);\n  vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\n  vec4 gy = abs(gx) - 0.5;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n  vec4 norm = 1.79284291400159 - 0.85373472095314 * \n    vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\nvec4 rgb(float r, float g, float b) {\n\n\treturn vec4(r / 255.0, g / 255.0, b / 255.0, 1.0);\n\n}\n\nfloat vignette (vec2 st, float r, float rs) {\n\tst -= 0.5;\n\n\treturn smoothstep (r, r - rs, length(st));\n}\n\nvec3 acesFilm(const vec3 x) { const float a = 2.51;\n const float b = 0.03;\n const float c = 2.43;\n const float d = 0.59;\n const float e = 0.14;\n return clamp((x * (a * x + b)) / (x * (c * x + d ) + e), 0.0, 1.0);\n}\n\nvec4 frag(vec2 uv) {\n\t//uv = rotate(uv, 5. *PI / 6.);\n\tvec4 snd = rgb(255., 150., 80.);\n\tvec4 wtr = rgb(90., 180., 110.);\n\tvec4 wtr2 = rgb(20., 70., 130.);\n\n\tfloat sltm = iTime * 0.2;\n\n\tfloat uvy = uv.y - (sin(iTime) * 0.5 + 0.5) * 0.1 - 0.6;\n\tfloat wuvy = uv.y - (sin(.75) * 0.5 + 0.5) * 0.1 - 0.59;\n\n\tfloat shore = sin(uv.x * PI * 4. + sltm);\n\tshore += sin(uv.x * PI * 3.);\n\tshore = shore * 0.5 + 0.5;\n\tshore *= 0.05;\n\tfloat smshore = smoothstep( uvy * 5., uvy * 5. + 2.5, shore);\n\n\n\tfloat wshore = smoothstep( wuvy * 5., wuvy * 5., shore);\n\n\tshore = smoothstep( uvy * 5., uvy * 5. + 2., shore);\n\n\tfloat shmsk = step(0.01, shore);\n\tfloat shmsko = step(0.012, shore);\n    \n    float suvx = uv.x + (uv.y * 5.);\n\tfloat sand = step(fract(uv.y * 10.) * 2. - 0.5, (sin(suvx * PI * 1.5)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ sin(suvx * PI * 2.)) * 0.5 + 0.5);\n\tsand -= step(fract(uv.y * 10.) * 2., sin(suvx * PI * 2.) * 0.5 + 0.5);\n\n\n\twtr = mix(wtr2, wtr, smoothstep (0.0, 0.5, uv.y));\n\tsnd *= clamp(sand, 0.95, 1.);\n\tvec4 res = mix(snd, wtr, smshore);\n    \n    //cnoise(vec2(uv.x, uvy * 4. + sltm * 0.5) * 10.0) * 0.5 + 0.5\n    float foam = cnoise(vec2(uv.x * 3.0, uvy * 4. + sltm * 0.5) * 10.0) * 0.5 + 0.5;\n\tfloat ofoam = step(shore + 0.05, foam) * shmsk;\n\tfoam = step(shore, foam) * shmsk;\n\n    //vec2(uv.x, uvy * 4. + soff + sltm * 0.5)\n\tfloat soff = mix(0.01, 0.2, smoothstep (0.7, 0., uv.y));\n\tfloat foams = cnoise(vec2(uv.x * 3.0, uvy * 4. + soff + sltm * 0.5) * 10.0) * 0.5 + 0.5;\n\tfoams = 1. - step(shore, foams) * shmsk * 0.2;\n\n\tres *= foams;\n\tres *= (1. - wshore * (1. - shmsk) * (sin(iTime - PI / 2.) * 0.5 + 0.5) * 0.2);\n\n\tres = mix(res, vec4(1.), foam);\n    \n    res = mix(res, res * vignette(uv, 0.99, 0.8), 0.5);\n\t\n    res.a = mix(0.3, 0.35, shmsk);\n    return res;\n}\n\n\nvec4 chab(vec2 uv, float amt) {\n\n\treturn vec4(\n\t\tfrag(uv + vec2(1.0, 1.0) * amt).r,\n\t\tfrag(uv).g,\n\t\tfrag(uv - vec2(1.0, 1.0) * amt).b,\n\t\tfrag(uv).a\n\t);\n\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float chmt = 1.3 - vignette(uv, 0.9, 0.8);\n\tvec4 res = chab(uv, 0.004 * chmt);\n    fragColor = vec4(acesFilm(res.rgb), res.a);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}