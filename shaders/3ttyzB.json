{
    "Shader": {
        "info": {
            "date": "1609376437",
            "description": "An edit of [url=https://www.shadertoy.com/view/WlcczS]\"Fractal radio base.\"[/url] I edited the [code]farctal[/code] function in the \"Common\" buffer to make this structure.",
            "flags": 40,
            "hasliked": 0,
            "id": "3ttyzB",
            "likes": 16,
            "name": "Alien skull fractal",
            "published": 3,
            "tags": [
                "fractal",
                "skull"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 646
        },
        "renderpass": [
            {
                "code": "float map(vec3 p){\n\tp.xy *= rot(sin(iTime*.3)/.3);\n    p.yz *= rot(sin(iTime*.4)/.4);\n    return farctal(p,iTime);\n}\n\nvec3 calcNormal(vec3 pos){\n  vec2 e = vec2(1,-1)*.002;\n  return normalize(\n    e.xyy*map(pos+e.xyy)+e.yyx*map(pos+e.yyx)+ \n    e.yxy*map(pos+e.yxy)+e.xxx*map(pos+e.xxx)\n  );\n}\n\nfloat march(vec3 ro, vec3 rd, float near, float far)\n{\n    float t=near,d;\n    for(int i=0;i<150;i++)\n    {\n        t+=d=map(ro+rd*t);\n        if (d<.001) return t;\n        if (t>=far) return far;\n    }\n    return far;\n}\n\nfloat calcShadow( vec3 light, vec3 ld, float len ) {\n\tfloat depth=march(light,ld,.01,len);\t\n\treturn step(len-depth,.01);\n}\n\nvec4 depth_map(vec2 coord)\n{\n    return texelFetch(iChannel0,ivec2(coord/image_scale),0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    vec3 ro = camera;\n    vec3 rd = normalize(vec3(uv,-2.));\n    vec3 col = vec3(0);\n    // get depth from depth map.\n    // place the ray start position just before the primitive\n    float t = march(ro,rd,max(0.,depth_map(fragCoord).x-3.),maxd);\n    if(t<maxd)\n    {\n        vec3 p=ro+rd*t;\n        col=vec3(.9,.5,.2)*1.5;\n        vec3 n=calcNormal(p);      \n\t\tvec3 lightPos=vec3(20);\n    \tvec3 li=lightPos-p;\n\t\tfloat len=length(li);\n\t\tli/=len;\n\t\tfloat dif=clamp(dot(n,li),.5,1.);\n        // get shadow from depth map\n        //float sha=depth_map(fragCoord).y;\n        float sha=calcShadow(lightPos,-li,len);\n        col*=max(sha*dif,.4);\n        float rimd=pow(clamp(1.-dot(reflect(-li,n),-rd),0.,1.),2.5);\n\t\tfloat frn=rimd+2.2*(1.-rimd);\n    \tcol*=frn*.9;\n        col*=max(.5+.5*n.y,0.);\n        col*=exp2(-2.*pow(max(0.,1.-map(p+n*.3)/.3),2.));\n        col+=vec3(.5,.9,.9)*pow(clamp(dot(reflect(rd,n),li),0.,1.),8.);\n    }\n    fragColor=vec4(col,1);\n    \n    //fragColor=texelFetch(iChannel0,ivec2(fragCoord),0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define image_scale 4.0\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define camera vec3(0,0,6)\n#define maxd 30.0\n\nfloat farctal(vec3 p,float iTime){\n\tfloat s=4.;\n\tp=abs(p);\n\tvec3 off=p*4.6;\n\tfor (float i=0.; i<8.; i++){\n        p=1.-abs(abs(p-2.+sin(p))-1.); \n    \tfloat r=-(12.)*clamp(.38*max(1.3/dot(p,p),.7),0.,3.3);\n        s*=r;\n\t\tp*=r;\n        p+=off;\n    }\n    //s=abs(s);\n\treturn length(cross(p,normalize(vec3(1,3,3))))/s-.006;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float map(vec3 p){\n\tp.xy *= rot(sin(iTime*.3)/.3);\n    p.yz *= rot(sin(iTime*.4)/.4);\n    return farctal(p,iTime);\n}\n\nfloat march(vec3 ro, vec3 rd, float near, float far)\n{\n    float t=near,d;\n    for(int i=0;i<200;i++)\n    {\n        t+=d=map(ro+rd*t);\n        if (d<.001) return t;\n        if (t>=far) return far;\n    }\n    return far;\n}\n\nfloat calcShadow( vec3 light, vec3 ld, float len ) {\n\tfloat depth=march(light,ld,.01,len);\t\n\treturn step(len-depth,.01);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Reduce the size of the depth buffer texture\n    //fragCoord*=image_scale;\n    //if (any(greaterThan(fragCoord,iResolution.xy)))discard;\n\n    fragCoord*=image_scale;\n    if (all(lessThanEqual(fragCoord,iResolution.xy)))\n    {\n    \n        vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n        vec3 ro = camera;\n        vec3 rd = normalize(vec3(uv,-2.));\n        vec3 col = vec3(0);\n        float t = march(ro,rd,.0,maxd);\n        \n        fragColor.x=t;\n        /*\n        if(t<maxd)\n        {\n            vec3 p=ro+rd*t;\n            vec3 lightPos=vec3(20);\n            vec3 li=lightPos-p;\n            float len=length(li);\n            li/=len;\n            float sha=calcShadow(lightPos,-li,len);\n            fragColor.x=t;\n            fragColor.y=sha;\n        }\n        */\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 sound1(int t)\n{\n    //t = t|t>>2/4096|t>>3/4096;\n    t = (t>>(t/(2+(t/4096)%3+(t/4096)%2)))|t/2/4096|t/3/4096;\n    return vec2(float(t & 0xff - 128) / 128.);\n}\n\nvec2 mainSound( in int samp,float time){\n    time *= 16000.0;\n    float factor = .5;\n    vec2 result = vec2(0.0);\n    for(int i = 0; i < 4; i++){\n    \tresult += sound1(int(time*factor))*factor;\n        factor *= 1.5;\n    }\n    return result/100.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}