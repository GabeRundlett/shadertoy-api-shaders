{
    "Shader": {
        "info": {
            "date": "1560550686",
            "description": "Continuation of my work on flat water effects here: https://www.shadertoy.com/view/ttSGRc\nWanted analytical normals for improved precision\n",
            "flags": 0,
            "hasliked": 0,
            "id": "Wl2Gzc",
            "likes": 29,
            "name": "Flat water effects 2",
            "published": 3,
            "tags": [
                "raytracing",
                "fbm"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 2078
        },
        "renderpass": [
            {
                "code": "/*\n * License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n */\n\n// Color computation inspired by: https://www.shadertoy.com/view/Ms2SD1\n\n// Computes normal analytical for improved precision\n\n#define PI  3.141592654\n#define TAU (2.0*PI)\n\nconst float gravity = 1.0;\nconst float waterTension = 0.01;\n\nconst vec3 skyCol1 = vec3(0.6, 0.35, 0.3);\nconst vec3 skyCol2 = vec3(1.0, 0.3, 0.3);\nconst vec3 sunCol1 =  vec3(1.0,0.5,0.4);\nconst vec3 sunCol2 =  vec3(1.0,0.8,0.7);\nconst vec3 seaCol1 = vec3(0.1,0.2,0.2);\nconst vec3 seaCol2 = vec3(0.8,0.9,0.6);\n\nvec2 wave(in float t, in float a, in float w, in float p) {\n  float x = t;\n  float y = a*sin(t*w + p);\n  return vec2(x, y);\n}\n\nvec2 dwave(in float t, in float a, in float w, in float p) {\n  float dx = 1.0;\n  float dy = a*w*cos(t*w + p);\n  return vec2(dx, dy);\n}\n\nvec2 gravityWave(in float t, in float a, in float k, in float h) {\n  float w = sqrt(gravity*k*tanh(k*h));\n  return wave(t, a ,k, w*iTime);\n}\n\nvec2 capillaryWave(in float t, in float a, in float k, in float h) {\n  float w = sqrt((gravity*k + waterTension*k*k*k)*tanh(k*h));\n  return wave(t, a, k, w*iTime);\n}\n\nvec2 gravityWaveD(in float t, in float a, in float k, in float h) {\n  float w = sqrt(gravity*k*tanh(k*h));\n  return dwave(t, a, k, w*iTime);\n}\n\nvec2 capillaryWaveD(in float t, in float a, in float k, in float h) {\n  float w = sqrt((gravity*k + waterTension*k*k*k)*tanh(k*h));\n  return dwave(t, a, k, w*iTime);\n}\n\nmat2 mrot(in float a) {\n  float c = cos(a);\n  float s = sin(a);\n  return mat2(c, s, -s, c);\n}\n\nmat2 mtrans(in mat2 m) {\n  return mat2(m[0][0], m[1][0], m[0][1], m[1][1]);\n}\n\nvec4 sea(in vec2 p, in float ia) {\n  float y = 0.0;\n  vec3 d = vec3(0.0);\n\n  float k = 1.0;\n  float kk = 1.3;\n  float a = ia*0.19;\n  float aa = 1.0/(kk*kk);\n\n  float h = 10.0;\n  p *= 0.5;\n  \n  float angle = 0.0;\n\n  for (int i = 0; i < 3; ++i) {\n    mat2 fr = mrot(angle);\n    mat2 rr = mtrans(fr);\n    vec2 pp = fr*p;\n    y += gravityWave(pp.y + float(i), a, k, h).y;\n    vec2 dw = gravityWaveD(pp.y + float(i), a, k, h);\n    \n    vec2 d2 = vec2(0.0, dw.x);\n    vec2 rd2 = rr*d2;\n    \n    d += vec3(rd2.x, dw.y, rd2.y);\n\n    angle += float(i);\n    k *= kk;\n    a *= aa;\n  }\n\n  for (int i = 3; i < 7; ++i) {\n    mat2 fr = mrot(angle);\n    mat2 rr = mtrans(fr);\n    vec2 pp = fr*p;\n    y += capillaryWave(pp.y + float(i), a, k, h).y;\n    vec2 dw = capillaryWaveD(pp.y + float(i), a, k, h);\n    \n    vec2 d2 = vec2(0.0, dw.x);\n    vec2 rd2 = rr*d2;\n    \n    d += vec3(rd2.x, dw.y, rd2.y);\n\n    angle += float(i);\n    k *= kk;\n    a *= aa;\n  }\n  \n  vec3 t = normalize(d);\n  vec3 nxz = normalize(vec3(t.z, 0.0, -t.x));\n  vec3 nor = cross(t, nxz);\n\n  return vec4(y, nor);\n}\n\nvec3 sunDirection() {\n  vec3 dir = normalize(vec3(0, 0.13, 1));\n  return dir;\n}\n\nvec3 skyColor(vec3 rd) {\n  vec3 sunDir = sunDirection();\n\n  float sunDot = max(dot(rd, sunDir), 0.0);\n  \n  vec3 final = vec3(0.0);\n\n  final += mix(skyCol1, skyCol2, rd.y);\n\n  final += 0.5*sunCol1*pow(sunDot, 30.0);\n\n  final += 4.0*sunCol2*pow(sunDot, 300.0);\n    \n  return final;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q=fragCoord.xy/iResolution.xy; \n  vec2 p = -1.0 + 2.0*q;\n  p.x *= iResolution.x/iResolution.y;\n\n  vec3 ro = vec3(0.0, 10.0, 0.0);\n  vec3 ww = normalize(vec3(0.0, -0.1, 1.0));\n  vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww));\n  vec3 vv = normalize(cross(ww,uu));\n  vec3 rd = normalize(p.x*uu + p.y*vv + 2.5*ww);\n\n  vec3 col = vec3(0.0);\n\n  float dsea = (0.0 - ro.y)/rd.y;\n  \n  vec3 sunDir = sunDirection();\n  \n  vec3 sky = skyColor(rd);\n  \n  if (dsea > 0.0) {\n    vec3 p = ro + dsea*rd;\n    vec4 s = sea(p.xz, 1.0);\n    float h = s.x;    \n    vec3 nor = s.yzw;\n    nor = mix(nor, vec3(0.0, 1.0, 0.0), smoothstep(0.0, 200.0, dsea));\n\n    float fre = clamp(1.0 - dot(-nor,rd), 0.0, 1.0);\n    fre = pow(fre, 3.0);\n    float dif = mix(0.25, 1.0, max(dot(nor,sunDir), 0.0));\n    \n    vec3 refl = skyColor(reflect(rd, nor));\n    vec3 refr = seaCol1 + dif*sunCol1*seaCol2*0.1; \n    \n    col = mix(refr, 0.9*refl, fre);\n    \n    float atten = max(1.0 - dot(dsea,dsea) * 0.001, 0.0);\n    col += seaCol2*(p.y - h) * 2.0 * atten;\n    \n    col = mix(col, sky, 1.0 - exp(-0.01*dsea));\n    \n  } else {\n    col = sky;\n  }\n\n  fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}