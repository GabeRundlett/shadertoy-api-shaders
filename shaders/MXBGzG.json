{
    "Shader": {
        "info": {
            "date": "1710284184",
            "description": "bleurb\n2024-03-12",
            "flags": 0,
            "hasliked": 0,
            "id": "MXBGzG",
            "likes": 20,
            "name": "metawhirl",
            "published": 3,
            "tags": [
                "raymarching",
                "metaballs"
            ],
            "usePreview": 0,
            "username": "rubix",
            "viewed": 281
        },
        "renderpass": [
            {
                "code": "vec2 smin( float a, float b, float k ) // https://iquilezles.org/articles/smin/\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    float m = h*h*0.5;\n    float s = m*k*0.5;\n    return a<b ? vec2(a-s, m) : vec2(b-s, 1.0-m);\n}\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\n#define TAU (2.*PI)\n#define PI acos(-1.)\n#define t iTime\nvec3 gay(float t) { return .5+.5*cos(TAU*(t+vec3(.33,.66,1.))); }\n\nstruct S { float d; vec3 col; };\n\nS smin(S s1, S s2) {\n    vec2 v = smin(s1.d, s2.d, .05);\n    S s12 = S(v.x, mix(s1.col, s2.col, v.y));\n    return s12;\n}\n\nfloat vmax(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\nfloat box(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax(min(d, vec3(0)));\n}\n\nfloat sphere(vec3 p, float r) { return length(p)-r; }\nS mapO(vec3 p) {\n    p/=1.5;\n    vec3 pp = p;\n    pp.xy *= r2d(length(p.xy));\n    pp += vec3(0.,.95,0.);\n    S s = S(1e9, vec3(1.));\n    float n = 100.;\n    for (float i = 0.; i < n; i++) {\n        float r = 1. - .9 * i / n;\n        float ti = t+i*1.2*(i)*i*t*0.000002;\n        vec3 p2 = p-vec3(r*cos(ti), r*sin(ti), sin(ti)*cos(ti)*0.);\n\n        p2.xy *= r2d(ti*1.);\n        p2.yz *= r2d(ti*1.);\n        \n        float sdf = int(i) % 5 == 0 ? box(p2, vec3(.05+r*0.1*r)) : sphere(p2, .05+r*0.1*r);\n        S s2 = S(sdf, gay(7.*i/n) );\n        s = smin(s, s2);\n    }\n    return s;\n}\nfloat map(vec3 p) { return mapO(p).d; }\nvec3 norm(vec3 p) { vec3 e = vec3(0.001, 0., 0.);\n    return normalize(\n        vec3(map(p-e.xyy),map(p-e.yxy),map(p-e.yyx)) -\n        vec3(map(p+e.xyy),map(p+e.yxy),map(p+e.yyx)) );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ((fragCoord-0.5*iResolution.xy))/iResolution.x;\n    vec3 bgcol = vec3(0., 0., abs(uv));\n    bgcol = vec3(0.,0.6,1.) * length(uv);\n    vec3 col = bgcol;\n    vec3 ro=vec3(0., 0., -5), p=ro, rd=vec3(uv, 1.), ldir=normalize(vec3(cos(t), sin(t), 3.));\n    S s;\n    for (int i = 0; i < 15; i++) {\n        s = mapO(p);\n        if (s.d < 0.01) break;\n        p += rd * s.d;\n    }\n    if (s.d < 0.01) {\n        vec3 n = norm(p);\n        vec3 refl = normalize(reflect(-ldir, n));\n        col = s.col*dot(ldir, n) + pow(clamp(dot(refl, rd), 0., 1.), 100.) * vec3(1.);\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}