{
    "Shader": {
        "info": {
            "date": "1520202290",
            "description": "Distribute samples to match the sample density curve described by pow(dot(pointonsphere,AXIS),POW) for a given AXIS and POW.\nBuilding upon Edd Biddulph's lambertian distribution: http://www.amietia.com/lambertnotangent.html\n",
            "flags": 32,
            "hasliked": 0,
            "id": "4sdcD8",
            "likes": 9,
            "name": "Pow Sample Distribution",
            "published": 3,
            "tags": [
                "sampledistribution"
            ],
            "usePreview": 0,
            "username": "TekF",
            "viewed": 778
        },
        "renderpass": [
            {
                "code": "// Pow Sample Distribution\n// by Hazel Quantock\n// This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. http://creativecommons.org/licenses/by-nc-sa/4.0/\n\n// See Buf A for all the clever stuff\n\nvec4 Text( uint[7] text, vec2 uv )\n{\n    uv /= iResolution.y/25.; // font height\n    \n    const float charWidth = .5; // proportional to height\n    \n    int charIndex = int(floor(uv.x/charWidth));\n    if ( uv.y < 0. || uv.y >= 1. || charIndex < 0 || charIndex >= text.length()*4 )\n        return vec4(0);\n    \n    uint char = text[charIndex/4];\n    char = (char>>(8*(charIndex&3)))&0xffU;\n    vec2 charuv = vec2( char&0xFU, 0xFU-(char>>4) );\n\n    uv.x = fract(uv.x/charWidth)*charWidth;\n\n    vec4 t = textureLod(iChannel1,(uv+charuv)/16.+vec2(1./64.,0), 0.);\n    \n    float s = 10./iResolution.y;\n\n    return vec4(1,1,1,1) * smoothstep(.5+s,.5-s,t.w);\n}\n\n\nvoid mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n    if ( fragCoord.x > iResolution.x*.5 )\n    {\n        ivec2 uv = ivec2(fragCoord - iResolution.xy*vec2(.25,0));\n    \n        vec4 tex = texelFetch(iChannel0,uv,0);\n        \n        fragColour = vec4(0);\n        fragColour.g = tex.g*min(1.,750./tex.a);\n\n//    fragColour.b = abs(fragColour.g-fragColour.r)*5.; // damn, looks like they don't match!\n//    fragColour.rgb = fragColour.bbb;\n    \n    //fragColour += .03*smoothstep(1.,0.,tex.g);\n        \n        uint count = uint(tex.a);\n        uint digit[9];\n        for ( int i=0; i < digit.length(); i++ )\n        {\n            digit[i] = (count%10U) + 0x30U; // convert to a character code\n            count /= 10U;\n        }\n        \n        for ( int i=digit.length()-1; i > 0; i-- )\n        {\n            if ( digit[i] != 0x30U ) break;\n            digit[i] = 0x20U; // replace leading 0's with spaces\n        }\n        \n\t\t// \"Number Of Samples: %d\"\n        fragColour += Text(\n            uint[]( 0x626d754eU, 0x4f207265U, 0x61532066U, 0x656c706dU, 0x203a73U //), // length 19 = 0x13\n                   \t+ (digit[8]<<24),\n                   \tdigit[7]+(digit[6]<<8)+(digit[5]<<16)+(digit[4]<<24),\n\t\t\t\t\tdigit[3]+(digit[2]<<8)+(digit[1]<<16)+(digit[0]<<24) ),\n\n            vec2(uv) - vec2(iResolution.x*.3,50.)\n            );\n    }\n    else\n    {\n        ivec2 uv = ivec2(fragCoord - iResolution.xy*vec2(-.25,0));\n    \n        vec4 tex = texelFetch(iChannel0,uv,0);\n        \n        fragColour = vec4(0);\n\t\tfragColour.g = 1.2 * tex.r; // this multiplier is arbitrary - brightness of the above depends on size of dots at that angle\n\n        // \"Ideal Sample Density\"\n        fragColour += Text(\n            uint[]( 0x61656449U, 0x6153206cU, 0x656c706dU, 0x6e654420U, 0x79746973U, // length 20 = 0x14\n                   0x20202020U, 0x20202020U ),\n            vec2(uv) - vec2(iResolution.x*.38,50.)\n            );\n    }\n        \n    fragColour = pow(fragColour,vec4(1./2.2));\n}\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Pow Sample Distribution\n// by Hazel Quantock\n// This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. http://creativecommons.org/licenses/by-nc-sa/4.0/\n\n// Sample directions with an pow(dot(pos,AXIS),POW) probability distribution.\n// For biased Monte Carlo, which needs a probability function matching its sample pattern.\n\nconst float POW = 40.; // 1.0 = ndotv (lambertian) distribution\nconst vec3 AXIS = normalize(vec3(.5,2,1));\n\n//#define SHOW_SPIKE 1\n\n// non-random sample pattern, gives less noisy results but has patterned artefacts\n//#define ORDERED_SAMPLES 1\n\n\n/*\nTo position samples with pow distribution about a particular direction V\n1/ Choose sample positions on a sphere with a uniform distribution\n2/ Map them onto a cylinder about V so that their density is still uniform\n3/ Project them radially (perpendicular to V) onto a curve\n4/ Project them along V onto a hemisphere\n\nThe trick is picking a curve so that we end up with a sample density\npropotional to pow(dot(position,v),POW)\n\nI think, if my maths is right, that the answer is a curve of y=pow(1-x^2,P), where x is\nradius and y is distance along V.\nSo, to project points from a cylinder, we invert that and move them to a radius of:\n\tx = sqrt(1.-pow(y,P))\n\nWhen we project onto that curve, the sample density depends upon the differential.\nSo the power will reduce to POW-1. But when we project it onto the hemisphere we\nmultiply the sample distribution by an extra dot(position,v), which brings us back\nto POW.\n\nI should probably write a blog post to explain this, once I've got it working in a\nmonte carlo renderer...\n*/\n\n\n#if !defined(ORDERED_SAMPLES)\n\nuvec4 Hash( uint seed ) \n{\n    // integer hash from Hugo Elias\n\tseed = (seed << 13U) ^ seed;\n    seed = seed * (seed * seed * 15731U + 789221U) + 1376312589U;\n    return seed * uvec4(seed,seed*16807U,seed*48271U,seed*31713U);\n}\n\nvec4 Rand( uint seed )\n{\n    return vec4(Hash(seed)&0x7fffffffU)/float(0x7fffffffU);\n}\n\n// unpatterened sphere rand\nvec3 SphereRand( uint seed )\n{\n    vec4 rand = Rand(seed);\n    float sina = rand.y*2. - 1.;\n    float b = 6.283*rand.z;\n    float cosa = sqrt(1.-sina*sina);\n    return vec3(cosa*cos(b),sina,cosa*sin(b));\n}\n\n#else // ORDERED_SAMPLES\n\n// Patterened sphere rand, from my other shader: https://www.shadertoy.com/view/ltXBz8\n// Gets a much less noisy result much faster, but with some patterned artefacts\nvec3 SphereRand( uint seed )\n{\n    // use interference of 2 very large numbers, calibrated (by hand) to cover\n    // lots of different directions very early on, and to fill in the gaps eventually\n    float sina = (float((seed*0x734941U)&0xffffffU)/float(0x1000000))*2. - 1.;\n    float b = 6.283*(float((seed*0xAF71F2U)&0xffffffU)/float(0x1000000));\n    float cosa = sqrt(1.-sina*sina);\n    return vec3(cosa*cos(b),sina,cosa*sin(b));\n}\n\n#endif // ORDERED_SAMPLES\n\n\nvec3 PowRand( uint seed, vec3 axis, float fpow )\n{\n    vec3 r = SphereRand(seed);\n\n    // redistribute samples\n\n    float d = dot(r,axis);\n\n    // map sphere to cylinder\n    r -= d*axis;\n    r = normalize(r); // hahaha! I'd forgotten this, very clever\n\n    // project onto a spike\n    // h = pow(1.-radius,m)*2-1\n    // radius = 1.-pow(h*.5+.5,1/m)\n    // ^ WRONG! That's radius squared, otherwise POW=1 gives a spike\n    float h = d*.5+.5;\n    //        r *= sqrt(1.-pow(h,1./POW));\n    // ^ wrong again! Need to solve the integral with that sqrt in,\n    // and needed a factor of /radius for sample density\n    r *= sqrt( 1. - pow( h, 2./(fpow+1.) ) ); // YES!!!!\n\n#if defined(SHOW_SPIKE)\n    r += axis*d;\n#else        \n    // and down onto the hemisphere\n    r += axis*sqrt(1.-dot(r,r));\n#endif\n\n    return r;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if ( iFrame == 0 ) fragColor = vec4(0);\n    else fragColor = texelFetch(iChannel0,ivec2(fragCoord.xy),0);\n\n\tuint count = uint(fragColor.w);\n    \n    vec2 uv = (fragCoord.xy*2.-iResolution.xy)/iResolution.y;\n    \n    const float zoom = .9;\n    //const float zoom = 8.; uv.x -= 7.;\n    \n    const uint maxn = 1024U;\n    \n    // animate the number of dots in a pleasing way\n    uint n = uint(1<<((iFrame/60))); // number to add per frame\n    n = (n+uint(((iFrame&1)<<3)+((iFrame&2)<<1)+((iFrame&4)>>1)+((iFrame&8)>>3)))/16U; // ugly maths, please ignore\n    n = min(n,maxn);\n    \n    for ( uint i=0U; i < maxn; i++ )\n    {\n        if ( i >= n ) break;\n        \n        vec3 r = PowRand( count+i, AXIS, POW );\n        \n#if !defined(SHOW_SPIKE)\n        // hide back face - actually don't do this, because when I fire rays in a hemisphere I mirror them in a plane\n        if ( r.z < .0 ) continue; //why's this overshooting!?\n        \n        // for aesthetics - position the hemisphere in the centre of the screen\n        r -= AXIS*.5;\n#endif\n        \n        \n        // zoom\n        r *= zoom;\n        float s = pow(smoothstep(0.,5.,iResolution.x*length(r.xy-uv)),2.);\n        \n        fragColor.g += 1.-s;\n    }\n\n    // reference, output the distribution on a sphere\n//    float s = pow(smoothstep(0.,5.,iResolution.x*length(vec2(r.x,dot(r.yz,projection.yx*vec2(1,-1)))-uv)),2.);\n    uv /= zoom;\n    uv += AXIS.xy*.5;\n    fragColor.r = 0.;\n    if ( length(uv) <= 1. )\n    {\n        vec3 p = vec3(uv,sqrt(1.-dot(uv,uv)));\n\n        fragColor.r = pow(max(0.,dot(p,AXIS)),POW);\n    }\n    \n    fragColor.a += float(n);\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}