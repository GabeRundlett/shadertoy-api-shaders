{
    "Shader": {
        "info": {
            "date": "1549356364",
            "description": "Full bottle wrapped in a protective mesh",
            "flags": 0,
            "hasliked": 0,
            "id": "wdS3zV",
            "likes": 12,
            "name": "Wrapped Bottle",
            "published": 3,
            "tags": [
                "reflect",
                "refract",
                "weave"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 503
        },
        "renderpass": [
            {
                "code": "// \"Wrapped Bottle\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  1\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrCaps4Df (vec3 p, float r, float h);\nfloat PrCapsAn4Df (vec3 p, float r, float w, float h);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Length4c (vec3 p);\nfloat Fbm2 (vec2 p);\n\nvec3 sunDir;\nfloat tCur, dstFar, rMesh, rBot;\nint idObj;\nbool inBot, chkBot;\n\nconst float pi = 3.14159;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, r, wt, w, h, s;\n  dMin = dstFar;\n  w = rMesh - rBot;\n  wt = 0.1;\n  r = rBot - 2. * w;\n  if (chkBot) {\n    dMin = SmoothMin ((inBot ? PrCapsAn4Df (p.xzy, r + w, w, r + w) : PrCaps4Df (p.xzy, r, r)),\n       (inBot ? PrCylAnDf (vec3 (p.xz, p.y - 2.2 * r), 0.2 * r + w, w, 0.3 * r + w) :\n       PrCylDf (vec3 (p.xz, p.y - 2.2 * r), 0.2 * r, 0.3 * r)), 3. * w);\n  } else if (inBot) {\n    d = PrCylDf (vec3 (p.xz, p.y - 2.4 * r), 0.2 * r - 4. * w, 0.2 * r);\n    DMIN (1);\n    d = PrSphDf (vec3 (p.xz, abs (p.y) - 1.5).xzy, 1.);\n    DMIN (2);\n  } else {\n    d = PrCylDf (vec3 (p.xz, p.y - 2.6 * r), 0.2 * r + 4. * w, 0.1 * r);\n    DMIN (3);\n    d = PrCylDf (vec3 (p.xz, p.y + 2.01 * r), 3. * r, 0.03 * r);\n    DMIN (4);\n    h = 1.4 * r;\n    q = p;\n    q.xz = vec2 (rMesh * atan (q.z, - q.x), length (q.xz) - rMesh);\n    d = PrRoundBox2Df (vec2 (abs (q.y) - h, q.z), vec2 (w, 0.7 * w), 0.5 * w);\n    DMIN (5);\n    q.xy = mod (q.xy + 0.5, 1.) - 0.5;\n    s = 0.6 * wt * cos (2. * pi * q.x);\n    d = 0.5 * max (min (PrRoundBox2Df (vec2 ((mod ((q.x - q.y) + 0.5, 1.) - 0.5) / sqrt (2.),\n       q.z + s), vec2 (wt, 0.2 * wt), 0.2 * wt),\n       PrRoundBox2Df (vec2 ((mod ((q.x + q.y) + 0.5, 1.) - 0.5) / sqrt (2.), q.z - s),\n       vec2 (wt, 0.2 * wt), 0.1 * wt)), abs (p.y) - h);\n    DMIN (5);\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0002, -0.0002);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec4 ObjCol (vec3 p)\n{\n  vec4 c;\n  if (idObj == 1) c = vec4 (0.4, 0.3, 0.1, 0.);\n  else if (idObj == 2) c = vec4 (0.7, 0.7, 0.8, 0.2);\n  else if (idObj == 3) c = (abs (p.x) > 0.4) ? vec4 (0.2, 0.6, 0.2, 0.2) * (1. - \n     0.3 * sin (32. * atan (p.z, - p.x) / 2. * pi) * step (1.3, length (p.xz))) :\n     vec4 (0.8, 0.8, 0.8, 0.);\n  else if (idObj == 4) c = mix (vec4 (0.4, 0.5, 0.7, 0.1), vec4 (0.85, 0.95, 0.9, 0.2), \n     smoothstep (0.02, 0.03, abs (Fbm2 (vec2 (0.5, 0.2) * p.xz) - 0.4))) * \n     (0.9 + 0.1 * Fbm2 (4. * p.xz)) *\n     (1. - 0.3 * smoothstep (0., 1.5, rBot - length (p.xz)) * step (-2. * rBot, p.y));\n  else if (idObj == 5) c = vec4 (0.9, 0.9, 0., 0.1);\n  return c;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 c, u, uu;\n  vec2 f;\n  float t;\n  col4 = vec4 (0.);\n  uu = normalize (ro + 200. * rd);\n  for (int ky = -1; ky <= 1; ky ++) {\n    for (int kx = -1; kx <= 1; kx ++) {\n      u = uu;\n      f = vec2 (kx, ky);\n      u.yz = Rot2D (u.yz, 0.0025 * f.y);\n      u.xz = Rot2D (u.xz, 0.0025 * f.x);\n      t = max (SmoothBump (0.45, 0.55, 0.02, mod (64. * atan (u.z, - u.x) / pi, 1.)),\n         SmoothBump (0.45, 0.55, 0.02, mod (64. * asin (u.y) / pi, 1.)));\n      c = mix (vec3 (0.2, 0.3, 0.6), vec3 (0.8, 0.8, 0.5), t) * (0.7 + 0.3 * u.y);\n      t = (u.y > 2. * max (abs (u.x), abs (u.z * 0.25))) ? 0.5 * min (2. * u.y, 1.) :\n         0.05 * (1. + dot (u, sunDir));\n      if (u.y > 0.) t += pow (clamp (1.05 - 0.5 *\n         length (max (abs (u.xz / u.y) - 0.4 * vec2 (1., 4.), 0.)), 0., 1.), 8.);\n      c += vec3 (0.5, 0.5, 1.) * t + vec3 (1., 0.9, 0.6) *\n         dot (pow (abs (u.xz), vec2 (512.)), vec2 (1.));\n      col4 += vec4 (min (c, 1.), 1.) * (1. - 0.15 * dot (f, f));\n    }\n  }\n  return col4.rgb / col4.w;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 roo, rdo, rdd, vn, vnW, colD, colR, col, flCol;\n  float dstObj, dstBot, dstBotW, rdDotN, eta;\n  bool bWallHit;\n  rMesh = 20. / pi;\n  rBot = rMesh - 0.05;\n  eta = 1.33;\n  inBot = false;\n  chkBot = true;\n  dstBot = ObjRay (ro, rd);\n  chkBot = false;\n  dstObj = ObjRay (ro, rd);\n  roo = ro;\n  rdo = rd;\n  dstBotW = dstBot;\n  flCol = vec3 (1.);\n  rdDotN = 0.;\n  bWallHit = (dstBot < min (dstObj, dstFar));\n  if (bWallHit) {\n    ro += dstBot * rd;\n    chkBot = true;\n    vn = ObjNf (ro);\n    vnW = vn;\n    rdDotN = - dot (rd, vn);\n    rd = refract (rd, vn, 1. / eta);\n    ro += 0.1 * rd;\n    inBot = true;\n    dstBot = ObjRay (ro, rd);\n    chkBot = false;\n    dstObj = ObjRay (ro, rd);\n    if (dstBot < min (dstObj, dstFar)) {\n      ro += dstBot * rd;\n      chkBot = true;\n      vn = ObjNf (ro);\n      rdd = refract (rd, vn, eta);\n      if (length (rdd) > 0.) {\n        rd = rdd;\n        inBot = false;\n      } else {\n        rd = reflect (rd, vn);\n      }\n      ro += 0.01 * rd;\n      chkBot = false;\n      dstObj = ObjRay (ro, rd);\n    }\n    flCol *= 1.8 * vec3 (0.5, 0.2, 0.25);\n  }\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    chkBot = false;\n    vn = ObjNf (ro);\n    col4 = ObjCol (ro);\n    colD = col4.rgb * (0.2 + 0.8 * max (dot (sunDir, vn), 0.) +\n       col4.a * pow (max (dot (rd, reflect (sunDir, vn)), 0.), 32.));\n  } else colD = BgCol (ro, rd);\n  colR = vec3 (0.);\n  if (bWallHit) {\n    ro = roo + dstBotW * rdo;\n    rd = reflect (rdo, vnW);\n    ro += 0.01 * rd;\n    inBot = false;\n    chkBot = false;\n    dstObj = ObjRay (ro, rd);\n    if (dstObj < dstFar) {\n      ro += rd * dstObj;\n      vn = ObjNf (ro);\n      col4 = ObjCol (ro);\n      colR = col4.rgb * (0.2 + 0.8 * max (dot (sunDir, vn), 0.) +\n         col4.a * pow (max (dot (rd, reflect (sunDir, vn)), 0.), 32.));\n    } else colR = BgCol (ro, rd);\n  }\n  col = flCol * colD;\n  if (eta != 1. && bWallHit) col = mix (colR, col, 0.1 + 0.9 * smoothstep (0.4, 0.8, rdDotN));\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 2. * pi * mPtr.y;\n  } else {\n    az += 0.03 * pi * tCur;\n    el -= 0.05 * pi * sin (0.02 * pi * tCur);\n  }\n  el = clamp (el, -0.4 * pi, 0.04 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 2., -60.);\n  zmFac = 3.3;\n  dstFar = 100.;\n  sunDir = vuMat * normalize (vec3 (1., 1., -1.));\n  #if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (1.)), 1.);\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrCaps4Df (vec3 p, float r, float h)\n{\n  return Length4c (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrCapsAn4Df (vec3 p, float r, float w, float h)\n{\n  p.z = abs (p.z);\n  return max (Length4c (p - vec3 (0., 0., min (p.z, h + w))) - r,\n     - Length4c (p - vec3 (0., 0., min (p.z, h - w))) + r) - w;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat Length4c (vec3 p)\n{\n  return sqrt (length (vec2 (dot (p.xy, p.xy), p.z * p.z)));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}