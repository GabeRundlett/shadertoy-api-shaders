{
    "Shader": {
        "info": {
            "date": "1608117626",
            "description": "Rewind",
            "flags": 0,
            "hasliked": 0,
            "id": "WdKfD3",
            "likes": 1,
            "name": "Rewind_Sakari",
            "published": 3,
            "tags": [
                "rewind"
            ],
            "usePreview": 0,
            "username": "JulesFouchy",
            "viewed": 332
        },
        "renderpass": [
            {
                "code": "const float TAU = 6.2831853071;\nconst float N = 10.;\n\nfloat cnoise(vec2 P);\n\nfloat distBand(float R1, float R2, float r) {\n    return (R2-R1)*0.5 - abs(r - (R1+R2)*0.5);\n}\n\nfloat crest(float a, float r) {\n    return 5. * distBand(a*0.5, a, r);\n}\n\nvec2 rotate(float a, vec2 uv) {\n    float c = cos(a);\n    float s = sin(a);\n    return vec2(\n        c * uv.x - s * uv.y,\n        s * uv.x + c * uv.y\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv *= 0.5;\n    uv = rotate(iTime*0.7, uv);\n    uv += 0.005*cnoise(uv*200.);\n    //uv = rotate(iTime*0.25, uv);\n    float mask = 0.;\n    // Main spirals\n    float a = fract(0.5 - atan(uv.y, uv.x) / TAU);\n    float r = 1.5*length(uv)-0.23;\n    for (float i = 0.; i < N; ++i) {\n        mask += max(crest(fract(a + i/N), r), 0.);\n    }\n\n    // Output to screen\n    vec3 col = mix(vec3(1, 45, 64)*0.3, vec3(166, 228, 255)*3., mask) / 255.;\n    fragColor = vec4(col,1.0);\n}\n\n//\tClassic Perlin 2D Noise \n//\tby Stefan Gustavson\n// Thanks to https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nvec2 fade(vec2 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\n\nfloat cnoise(vec2 P){\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n  vec4 i = permute(permute(ix) + iy);\n  vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\n  vec4 gy = abs(gx) - 0.5;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n  vec4 norm = 1.79284291400159 - 0.85373472095314 * \n    vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}