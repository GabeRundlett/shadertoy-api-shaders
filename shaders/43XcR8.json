{
    "Shader": {
        "info": {
            "date": "1725812948",
            "description": "i dont know if that what i want is possible...",
            "flags": 0,
            "hasliked": 0,
            "id": "43XcR8",
            "likes": 1,
            "name": "trying to tile 3",
            "published": 3,
            "tags": [
                "tile"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 68
        },
        "renderpass": [
            {
                "code": "\nvec2 f_o_rnd22(vec2 p)\n{\n    // Hash without Sine\n    // MIT License...\n    /* Copyright (c)2014 David Hoskins.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.*/\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float n_min = min(iResolution.x, iResolution.y);\n    vec2 o = (fragCoord.xy-iResolution.xy*.5)/n_min;\n    vec2 oo = o;\n    //o += vec2(sin(iTime*.2), cos(iTime*.2));\n    float n_tau = radians(360.);\n    float n = length(o);\n    float n_t = 0.2*iTime;\n    float n_ang_nor = fract(atan(o.x, o.y)/n_tau);\n    float n_gb = 4.;\n    float n_ga = 4.;\n    float n_gg = n_gb+n_ga;\n    vec2 o2 = o*n_gg;\n    vec2 o2l = floor(o2);\n    vec2 o2f = fract(o2)-.5;\n    float n_s = sign(mod(o2l.x, 2.) -.5);\n    \n    vec2[] a_o = vec2[](\n        vec2(-.5, -.5),\n        vec2(.5, .5),\n        \n        vec2(-.5, .5),\n        vec2(.5, -.5)\n    );\n    vec2 o_rnd = f_o_rnd22(o2l.xy);\n    float n_idx_f = float(o_rnd.x>.5);\n    float nsi = sign(o_rnd.x-.5);\n    int n_idx1 = int(n_idx_f*2.);\n    int n_idx2 = int(n_idx_f*2.+1.);\n    vec2 op1 = o2f-a_o[n_idx1];\n    vec2 op2 = o2f-a_o[n_idx2];\n    float n1 = length(op1);\n    float n2 = length(op2);\n    float n_reps = 12.;\n\n    float n_ang_nor1 = fract((atan(op1.x, op1.y)/n_tau)-(1./(n_reps*4.)));\n    float n_ang_nor2 = fract((atan(op2.x, op2.y)/n_tau)-(1./(n_reps*4.)));\n    n_ang_nor1 = fract(n_ang_nor1+nsi*iTime*.2);\n    n_ang_nor2 = fract(n_ang_nor2+(-1.*nsi)*iTime*.2);\n    float n_radius = 0.5;\n    float n_amp = 0.2;\n    float n_base = 0.1;\n    float n_aa = (1./n_min)*4.*n_gg;\n    n1 = abs(n1-n_radius)/n_radius;\n    float ns1 = (sin(n_ang_nor1*n_reps*n_tau)*.5+.5)*n_amp+n_base;\n    n1 = smoothstep(ns1, ns1+n_aa, n1);\n    \n    n2 = abs(n2-n_radius)/n_radius;\n    float ns2 = (sin(n_ang_nor2*n_reps*n_tau)*.5+.5)*n_amp+n_base;\n    n2 = smoothstep(ns2, ns2+n_aa, n2);\n    \n    float nc = min(n1, n2);\n    \n    \n    //nc = length(oo);\n    //nc = abs(nc-n_radius)/n_radius;\n    //float n_ang_noro = fract((atan(oo.y, oo.x)/n_tau)-(1./(n_reps*4.)));\n    //float n_thick = 0.1;\n    //n_thick = (sin(n_ang_noro*n_tau*n_reps)*.5+.5)*.5+.5;\n    //nc = smoothstep(0.0, n_thick, nc);\n    \n    fragColor = vec4(nc);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}