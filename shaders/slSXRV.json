{
    "Shader": {
        "info": {
            "date": "1628058339",
            "description": "I wanted to make glowing strands of stuff, kinda did, learned how to get the effect I had in mind, also created an effect which I have no idea of its working(some of the color patterning that occurs)",
            "flags": 0,
            "hasliked": 0,
            "id": "slSXRV",
            "likes": 5,
            "name": "Fire Gateway",
            "published": 3,
            "tags": [
                "3d",
                "fractal",
                "raymarch",
                "kifs"
            ],
            "usePreview": 0,
            "username": "scry",
            "viewed": 357
        },
        "renderpass": [
            {
                "code": "#define MAXD 100.\n#define SURF 0.01\n\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\n// All components are in the range [0…1], including hue.\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n \n\n// All components are in the range [0…1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n//Taken from http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl.\n\n//https://iquilezles.org/articles/distfunctions\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\nfloat sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb)\n{\n  p.x = abs(p.x);\n  float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n  return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\nvec4 map(vec3 p) {\n    \n    //float d = \n    float pd = 0.1;\n    float psz = floor(p.z);\n    p.xy *= r2d(psz+psz*09.5);\n    vec3 o = p;\n    p -= 5.;\n    p = (fract(p*pd)-0.5)/pd;\n    p = abs(p)-1.0;\n    //*/\n    for (int i=0;i<4;i++) {\n        //\n        p.xy = vec2(length(p.xy),atan(p.x,p.y));\n        p.xy = abs(p.xy)+0.3;\n        p.xy *= r2d(0.3);\n        p.xy = vec2(p.x*sin(p.y),p.x*cos(p.y));\n        p = abs(p)-sin(o.z*0.06+iTime*0.01)*2.;\n        p.xy *= r2d(o.z*0.02);\n    }\n    //float d = length(p)+0.1;\n    \n    float an = 3.14*0.75;\n    float d = sdCappedTorus(p,vec2(sin(an),cos(an)),1.,0.)+0.0;\n    d = max(d,-(length(o.xy)-0.4));\n    return vec4(p.xy,o.z,d);\n}\n\nvec2 RM(vec3 ro, vec3 rd,float c) {\n    float dO = 0.;\n    float ii = 0.;\n    int steps = 60-int(c*20.);\n    for (int i=0;i<steps;i++) {\n        vec3 p = ro+rd*dO;\n        float dS = map(p).w;\n        dO += dS*0.2;\n        ii += 0.1;\n        if (dO > MAXD || dS < SURF) {break;}\n    }\n    return vec2(dO,ii);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 1.- 2.*uv;\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n    //vec2 uv = -1. + 2. * inData.v_texcoord;\n    vec2 R = iResolution.xy;\n    float ar = R.x/R.y;\n    uv.x *= ar;\n    vec3 col = vec3(0.);\n    //uv *= 0.1;\n    float c = length(uv);\n    //uv *= r2d(sin(c*8.+time)*0.01);\n    vec3 ro = vec3(0.,0.,-5.);\n    ro.z += iTime*0.6;\n    vec3 rd = normalize(vec3(uv,1.));\n    vec2 d = RM(ro,rd,c);\n    //col = d.xxx*0.006;\n    vec3 p=map(ro+rd*d.x).rgb;\n    //col = sin(d.xxx*0.8+time)*0.5+0.5;\n    //col = d.xxx*0.001;\n    //col += 1.-d.xxx*0.007;\n    //col.r -= d.y;\n    //col = sin(d.yyy);\n    //col = sin(p.zzz*0.02)*0.5+0.5;\n    float pzn = p.z-ro.z;\n    //d.x = clamp(d.x*0.05,0.,1.);\n    col = hsv2rgb(vec3(p.y*0.04+p.z*0.004+d.x*0.01-0.05,1.-d.y*0.03,sin(p.z*0.2-ro.z*0.12)*0.6+0.4));\n    //col = hsv2rgb(vec3(p.z*0.05,sin(p.x*0.002-c*4)*0.5+0.5,sin(d.x*0.1-ro.z*0+c)*0.5+0.5));\n    //vec3 bak = texture(prevFrame,inData.v_texcoord).rgb;\n    if (d.x > MAXD+(c+0.5)) {\n        col *= 0.;\n    }\n    //col = fract(col*1.5+time*0.04);\n    //col = sin(col*6.);\n    //bak = fract(bak+col*0.01);\n    //col = mix(col,bak,0.93);\n    //col = hsv2rgb(vec3(d.x*0.009,d.x*0.005,d.x*0.1));\n    //col = hsv2rgb(vec3(d.x*0.0025,0.6,d.y*4.-19.5));\n    fragColor = vec4(col,1.);\n}\n\n    \n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}