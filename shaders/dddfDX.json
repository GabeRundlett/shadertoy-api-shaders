{
    "Shader": {
        "info": {
            "date": "1697725122",
            "description": "Mouse X = Hue\nMouse Y = Saturation  (and size of spinner)\n@catking562 's Jwibullori  with\nadded customizable color from @WhiteTophat  in https://www.shadertoy.com/view/dlBczW",
            "flags": 0,
            "hasliked": 0,
            "id": "dddfDX",
            "likes": 12,
            "name": "Jwibullori w/MouseColorAdjust",
            "published": 3,
            "tags": [
                "shader"
            ],
            "usePreview": 0,
            "username": "timmaffett",
            "viewed": 456
        },
        "renderpass": [
            {
                "code": "// Fork of \"Jwibullori\" by catking562. https://shadertoy.com/view/cs3fzl\n// 2023-10-19 13:50:10\n\n#define PI  3.14159265359\n\n\nvec4 lerp(vec4 a, vec4 b, float t) {\n    return (a * vec4(t)) + (b * vec4(1.0-t));\n}\nvec4 lerp(vec4 a, vec4 b, vec4 t) {\n    return (a * t) + (b * (vec4(1.0) * t));\n}\n\nvec4 hue2rgb(float hue) {\n    hue = fract(hue); //only use fractional part of hue, making it loop\n    float r = abs(hue * 6.0 - 3.0) - 1.0; //red\n    float g = 2.0 - abs(hue * 6.0 - 2.0); //green\n    float b = 2.0 - abs(hue * 6.0 - 4.0); //blue\n    vec4 rgb = vec4(r,g,b, 1.0); //combine components\n    rgb = clamp(rgb, 0.0, 1.0); //clamp between 0 and 1\n    return rgb;\n}\nvec4 hsv2rgb(vec3 hsv) {\n    vec4 rgb = hue2rgb(hsv.x); //apply hue\n    rgb = lerp(vec4(1.0), rgb, 1.0 - hsv.y); //apply saturation\n    rgb = rgb * hsv.z; //apply value\n    return rgb;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 mouseUV = iMouse.xy / iResolution.xy;\n    \n    //float size = 0.02;\n    float sx = iResolution.x;\n    float sy = iResolution.y;\n    float s = sqrt(sx*sx+sy*sy);\n    vec2 uv = fragCoord/iResolution.xy - vec2(0.5, 0.5);\n \n //change size of spinner from mouse Y\n vec2 mouse = (iMouse.xy == vec2(0.)) ? vec2(0.5) : iMouse.xy/iResolution.xy;   \n    uv *= 1.0+(0.5-mouse.y);\n    \n    float j = 0.0;\n    //while(size>=0.001) {\n    for(float size=0.02;size>=0.001;size-=0.0001) {\n        float x = (cos(iTime*5.0+size*150.0)*s/10.0)/sx;\n        float y = (sin(iTime*5.0+size*150.0)*s/10.0)/sy;\n        float dx = uv.x-x;\n        float dy = uv.y-y;\n        float k = sqrt(dx*dx+dy*dy);\n        j += (size/k)/100.0;\n        //size-=0.0001;\n    }\n    \n    float red = cos(PI*(j-1.0/3.0)*3.0/2.0);\n\n    if(iMouse.xy == vec2(0.)) {\n        float green = cos(PI*(j-2.0/3.0)*3.0/2.0);\n        float blue = cos(PI*(j-1.0)*3.0/2.0);\n        fragColor = vec4(red, green, blue, 1);\n    } else {\n        \n        vec4 mouseColor = hsv2rgb(vec3(mouseUV.x, mouseUV.y, 1.0));\n        \n //#define SINGLECOLOR\n #ifdef SINGLECOLOR\n         float green=red, blue=red;\n #else\n        float green = cos(PI*(j-(2.0*mouseUV.y)/3.0)*3.0/2.0);\n        float blue = cos(PI*(j-(1.0*mouseUV.x))*3.0/2.0);\n #endif\n        fragColor = vec4(red, green, blue, 1.) * mouseColor;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}