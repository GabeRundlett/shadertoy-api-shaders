{
    "Shader": {
        "info": {
            "date": "1597004260",
            "description": "Inspiration from chapters 9 and 10 of The Book of Shaders \nhttps://thebookofshaders.com/09\nhttps://thebookofshaders.com/10",
            "flags": 0,
            "hasliked": 0,
            "id": "ttXfzS",
            "likes": 1,
            "name": "Chaos Abuser",
            "published": 3,
            "tags": [
                "colors",
                "patterns",
                "truchet"
            ],
            "usePreview": 0,
            "username": "t420babe",
            "viewed": 286
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265358979323846\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\n// From https://thebookofshaders.com/edit.php#10/ikeda-00.frag\nfloat random(vec2 pos) {\n  return fract(sin(dot(pos.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\n// https://thebookofshaders.com/09/\nvec2 truchet_pattern(in vec2 _pos, in float _index) {\n  _index = fract(((_index - 0.5) * 2.0));\n  if (_index > 0.75) {\n    _pos = vec2(4.0) - _pos;\n  } else if (_index > 0.5) {\n    _pos = vec2(4.0 - _pos.x, _pos.x);\n  } else if (_index > 0.25) {\n    _pos = 4.0 - vec2(1.0 - _pos.y, _pos.y);\n  }\n  return _pos;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec3 color = vec3(0.0);\n  float keep_time = sin(2.0 * PI * iTime);\n\n  float A = 10.0;\n  float w = 0.5;\n  float phi = 0.0;\n  float wrap_time = abs(A * sin(w * iTime + phi));\n    \n  // [-1, 1]\n  vec2 pos = (2.0 * fragCoord - iResolution.xy) /iResolution.y;\n\n  pos *= 2.0;\n  vec2 ipos = floor(pos);             // get the integer coords\n  vec2 fpos = fract(pos);             // get the fractional coords\n\n  vec2 tile = truchet_pattern(fpos, random(ipos)) * vec2(wrap_time);\n  tile.x = cos(tile.y) * sin(tile.x);\n  tile.y = log(tile.y) * log(tile.x);\n\n  float maze_color = 0.0;\n  maze_color =\n    smoothstep(tile.x - 0.3, tile.x, tile.y) -\n    smoothstep(tile.x, tile.x + 0.3, tile.y);\n\n\n\n  if (wrap_time < 0.25 * A) {\n    color = vec3(maze_color - 0.5, maze_color / 0.2, maze_color * 0.7);\n  } else if (wrap_time < 0.5 * A) {\n    color = vec3(maze_color + 0.5, maze_color / 0.2, maze_color * 0.7);\n  } else if (wrap_time < 1.0 * A) {\n    color = vec3(maze_color / 0.5, maze_color - 0.2, maze_color / 0.7);\n  }\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}