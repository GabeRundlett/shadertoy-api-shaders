{
    "Shader": {
        "info": {
            "date": "1650461522",
            "description": "Still learning with small steps at a time.  Trying out polarized UV.",
            "flags": 0,
            "hasliked": 0,
            "id": "7tXBzr",
            "likes": 14,
            "name": "Polarized Polaroids",
            "published": 3,
            "tags": [
                "colors",
                "flower",
                "hue",
                "trippy",
                "polar",
                "shimmer",
                "psy",
                "polaroid",
                "polarized",
                "himom"
            ],
            "usePreview": 0,
            "username": "fyisic123",
            "viewed": 654
        },
        "renderpass": [
            {
                "code": "#define TAU 6.28318530718\n#define PI 3.14159265359\n#define hue(v) ( .6 + .6 * cos( 2.*PI*(v) + vec3(0,-2.*PI/3.,2.*PI/3.) ) )\n\n\n#define MORPH_SPEED 0.4\n#define SHIMMER_TWIST 4.\n#define SHIMMER_ARMS 6.\n#define SHIMMER_SCALE 0.1\n#define SHIMMER_INTENSITY 2.5\n#define SHIMMER_SPEED 0.8\n#define SHIMMER_SHARPNESS -0.5\n#define SHIMMER_HUE_SHIFT 0.05\n#define LAYER_COUNT 6.\n#define SPIRAL_ARMS 12.\n#define SPIRAL_SPEED 0.5\n#define TWIST 6.\n#define HUE_SHIFT_SPEED -0.2\n \n\nfloat XOR(float a, float b)\n{\n   return a*(1.-b) + b*(1. -a);\n}\n\n mat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = (fragCoord.xy -.5 * iResolution.xy) / iResolution.y;\n    uv *= Rot(iTime *-.1);\n    \n    float angle = atan(uv.x, uv.y) / TAU +.5;\n    float dist = length(uv) ;\n    float p1 , p2 = 0.;\n    float spiralSpeed = iTime * SPIRAL_SPEED;\n    float morphPhase = abs(sin(iTime * MORPH_SPEED));\n    float armedAngle = angle * SPIRAL_ARMS;\n    float twistedDist = dist * TWIST; \n            \n    for (float i = 0.; i <1.; i += 1. / LAYER_COUNT)   // Get polaroids\n    {\n        \n        float a = fract(armedAngle + (twistedDist * i));\n        float b = min(a, 1. -a);\n        float c = fract((dist * 5.) - spiralSpeed + i);\n        float d = min(c, 1. - c);        \n        float e = b  * .5  -d * mix(1., dist, morphPhase);\n        float alpha = 0.2 + (0.8 * i);\n        p1 = max(p1 , smoothstep(0.15 , 0.16 , e) * alpha);\n        p2 = max(p2, smoothstep(0.12 , 0.14 , e) * alpha);                \n        \n    }                    \n    float p = XOR(p1, p2); // darken inner part\n                \n    // poor mans shimmer        \n    float a = fract(angle * SHIMMER_ARMS + (dist * SHIMMER_TWIST) - (iTime * SHIMMER_SPEED));\n    float b = min(a, 1. -a);\n    float shimmer = SHIMMER_INTENSITY * smoothstep(SHIMMER_SCALE, SHIMMER_SCALE * SHIMMER_SHARPNESS , b * dist ) * smoothstep(0.0, 0.2, dist);\n    p *= (1. +(shimmer * p1));\n    \n    \n    \n    \n\n    vec3 col = hue((shimmer * SHIMMER_HUE_SHIFT ) + -angle + dist +  (iTime * HUE_SHIFT_SPEED)) * p;\n    \n    \n    // Debugs\n    //col = vec3(max(max(col.r, col.g), col.b)) + angle;  // Angle\n    //col = vec3(max(max(col.r, col.g), col.b)) + dist;  // Dist\n    //col += shimmer;  // shimmer\n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}