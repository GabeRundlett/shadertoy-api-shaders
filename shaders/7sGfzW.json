{
    "Shader": {
        "info": {
            "date": "1657730165",
            "description": "pseudo-bluenoise variant of https://shadertoy.com/view/NsGfzz\n\nNB: spacetime sampling less blue than just time.",
            "flags": 0,
            "hasliked": 0,
            "id": "7sGfzW",
            "likes": 15,
            "name": "motionblur existing shaders 2blu",
            "published": 3,
            "tags": [
                "motionblur",
                "antialiasing",
                "sampling",
                "bluenoise",
                "tuto"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 525
        },
        "renderpass": [
            {
                "code": "// pseudo-bluenoise variant of https://shadertoy.com/view/NsGfzz\n\n// combines simple dither-motionblur existing shaders https://www.shadertoy.com/view/7dGfzW\n// with antialias existing shader https://www.shadertoy.com/view/NdyfRz\n\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )  // https://www.shadertoy.com/view/ll2cDc\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy, P,\n          U = ( 2.*u - R ) / R.y;\n    \n    float t = iTime;\n    O-=O;\n    for(float i=0.; i<1.; i+=.1) {                                // --- drawing balls\n       t *= 1.2;\n       P = vec2( 1.2*cos(2.*t), .8*sin(3.1*t) );     \n       O += smoothstep(3./R.y, 0., length(P-U) - .15 ) * hue(i);\n   }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// pseudo-bluenoise from https://www.shadertoy.com/view/7sGBzW\n\n\n#define iTime ( iTime + blue(gl_FragCoord.xy+float(_k)*1.7)* iTimeDelta )\n\n#define H(p)  fract(sin(mod(dot(p, vec2(12.9898, 78.233)),6.283)) * 43758.5453)\n\n#define blue(p) (  \\\n          (  H(p+vec2(-1,-1)) + H(p+vec2(0,-1)) + H(p+vec2(1,-1))  \\\n           + H(p+vec2(-1, 0)) - 8.* H( p )      + H(p+vec2(1, 0))  \\\n           + H(p+vec2(-1, 1)) + H(p+vec2(0, 1)) + H(p+vec2(1, 1))  \\\n          ) *.5/9. *2.1 +.5 )\n\n\nint _N = 5, _k;\n#define mainImage mainImage0(out vec4 O, vec2 U);        \\\nvoid mainImage(out vec4 O, vec2 U) {                     \\\n    vec4 o; O = vec4(0);                                 \\\n    for (_k=0; _k < _N*_N; _k++ )                        \\\n   /* { mainImage0(o,U); O += o; }   /* basic. Below: combined with AA */ \\\n      { mainImage0(o,U+vec2(_k%_N-_N/2,_k/_N-_N/2)/float(_N)); O += o; }  \\\n    O /= float(_N*_N);                                   \\\n    O = pow( O, vec4(1./2.2) );        /* to sRGB */     \\\n} \\\nvoid mainImage0",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}