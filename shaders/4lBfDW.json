{
    "Shader": {
        "info": {
            "date": "1516649919",
            "description": "Game of Life,  a cellular automaton devised by the British mathematician John Horton Conway in 1970.\nhttps://en.wikipedia.org/wiki/Conway's_Game_of_Life\n\nClick and hold for a magnified view of a region.",
            "flags": 32,
            "hasliked": 0,
            "id": "4lBfDW",
            "likes": 8,
            "name": "Game of Life Cellular Automaton",
            "published": 3,
            "tags": [
                "game",
                "life",
                "cellular",
                "conway",
                "automaton"
            ],
            "usePreview": 0,
            "username": "4rknova",
            "viewed": 834
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2018 Nikos Papadopoulos\n\nconst float zoom     = .1;\nconst float map_sz   = .215;\nconst vec2  map      = vec2(0.23);\nconst vec3  color_bg = vec3(0.0745, 0.0862, 0.1058);\nconst vec3  color_mm = vec3(0.3);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 ac = vec2(iResolution.x / iResolution.y, 1);\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 sv = uv;\n    \n    float md = length(uv * ac - map);\n\n    if (md < map_sz && iMouse.z > 0.) {\n    \tif (md < map_sz && md > map_sz - 0.015) {\n        \tfragColor = vec4(color_mm, 1);\n     \t\treturn;\n    \t}\n        sv = iMouse.xy / iResolution.xy + (uv - map_sz) * zoom;\n    }  \n    \n    float hp = texture(iChannel0, sv).r;\n    \n    vec3 col = hp > 0.0\n             ? mix(vec3(1,0.2,0.5),vec3(0.4,1,0.1), hp)\n        \t : color_bg;\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// The MIT License\n// Copyright © 2018 Nikos Papadopoulos\n\n/* Conway's Game of Life\n** \n** Rules\n** 1. Any live cell with fewer than two live neighbours dies, as if caused by underpopulation.\n** 2. Any live cell with more than three live neighbours dies, as if by overcrowding.\n** 3. Any live cell with two or three live neighbours lives on to the next generation.\n** 4. Any dead cell with exactly three live neighbours becomes a live cell.\n*/\n\n#define GRID_SZ (iResolution.xy)\n\n// Hash and random functions taken from: https://amindforeverprogramming.blogspot.com/2013/07/random-floats-in-glsl-330.html\nuint hash( uint x )\n{\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\n\nuint hash( uvec2 v )\n{\n    return hash( v.x ^ hash(v.y) );\n}\n\nfloat random( vec2 f )\n{\n    const uint mantissaMask = 0x007FFFFFu;\n    const uint one          = 0x3F800000u;\n   \n    uint h = hash( floatBitsToUint( f ) );\n    h &= mantissaMask;\n    h |= one;\n    \n    float  r2 = uintBitsToFloat( h );\n    return r2 - 1.0;\n}\n\nfloat get_cell(vec2 p, vec2 d)\n{\n    return texture(iChannel0, (p + d) / GRID_SZ).r > 0. ? 1. : 0.;\n}\n    \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy; // UV coordinates\n    vec2 gc = floor(GRID_SZ * uv) + 0.5; // Grid Coordinates\n\n    if (iFrame == 0) {\n        fragColor = vec4(step(random(gc), 0.5));\n        return;\n    }\n        \n    bool is_alive = get_cell(gc, vec2(0)) > 0.;\n    \n    const vec3 o = vec3(0,1,-1); // Offsets\n    \n    float count = get_cell(gc, o.yx)\n        \t\t+ get_cell(gc, o.zx)\n        \t\t+ get_cell(gc, o.xy)\n        \t\t+ get_cell(gc, o.xz)\n        \t\t+ get_cell(gc, o.yy)\n        \t\t+ get_cell(gc, o.zz)\n        \t\t+ get_cell(gc, o.zy)\n        \t\t+ get_cell(gc, o.yz);\n    \n    float res = 0.;\n    \n    if (is_alive) {\n    // 1. Any live cell with fewer than two live neighbours dies, as if caused by underpopulation.\n    // 2. Any live cell with more than three live neighbours dies, as if by overcrowding.\n        \t if (count <  2. || count >  3.) res = 0.;\n    // 3. Any live cell with two or three live neighbours lives on to the next generation.\n\t//    Health points are stored in the map based on the number of neighbours.\n    \telse if (count == 2. || count == 3.) res = 1./count;\n    }\n    // 4. Any dead cell with exactly three live neighbours becomes a live cell.\n    else if (count == 3.) res = 1.;\n    \n\tfragColor = vec4(res);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}