{
    "Shader": {
        "info": {
            "date": "1685894028",
            "description": "combining waves of increasing frequency with a warp effect",
            "flags": 32,
            "hasliked": 0,
            "id": "dtySRR",
            "likes": 11,
            "name": "rainbow water",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "metal",
                "liquid"
            ],
            "usePreview": 0,
            "username": "flylo",
            "viewed": 435
        },
        "renderpass": [
            {
                "code": "const int[18] ns = int[](-1, -1, 0, -1, 1, -1, -1, 0, 1, 0, 0, 0, -1, 1, 0, 1, 1, 1);\n\nvec4 texel(in ivec2 x) {\n    return texelFetch( iChannel0, x, 0 );\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    ivec2 iv = ivec2(fragCoord);\n    //fragColor = avg(iv);\n    fragColor = texel(iv);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 pools(in vec2 uv)\n{\n    float dt  = .5+.5*sin(.18*iTime);\n    float dt2 = .5+.5*sin(.038*iTime);\n    float mdt = .2+.8*dt;\n    float mdt2 = .7+.3*dt2;\n    \n    float dt3 = .5+.5*sin(.14*iTime);\n    float dt4 = .5+.5*sin(.033*iTime);\n    float mdt3 = .2+.8*dt3;\n    float mdt4 = .7+.3*dt4;\n\n    float dt5  = .5+.5*sin(.11*iTime);\n    float dt6 = .5+.5*sin(1.5+.036*iTime);\n    float mdt5 = .2+.8*dt5;\n    float mdt6 = .7+.3*dt6;\n\n    float dt7  = .5+.5*sin(.3*iTime);\n    float mdt7 = .1+.9*dt7;\n\n    float dt8  = .5+.5*sin(1.5+.2*iTime);\n    float mdt8 = .9+.1*dt8;\n\n\n    //uv = vec2(sin(25.*uv));\n\n\n    vec3 c = vec3(0.);\n    float a = 1.;\n    float f = 1.;\n    float as = 0.;\n    for (int i = 0; i < 1; i++) {\n        for (int j = 0; j < 25; j++) {\n            //float p[] = float[](.2, .5, .3, 0.1, .4, .8, .8, .5);\n            //float wc[] = float[](.0, 1., .0, 1., .1, .2, .0, .1, 1.);\n            f = 2.*(1.+.3*float(j));//*(.5+.5*sin(157.*float(j)));\n            a = 1./(pow(1.23,float(j)));\n            //a = 1./(1.+float(j));\n            \n            float r2 = length(uv-vec2(sin(142.31*float(j)), sin(29.321*float(j))));\n\n            c.r += mdt*1.4*a*(.5+.5*sin(7.*iTime+f*mdt2*7.1*r2));\n            c.g += mdt3*1.4*a*(.5+.5*sin(7.*iTime+f*mdt4*7.1*r2));\n            //c.b += .1*a*(.5+.5*sin(11.*iTime+f*7.1*r2));\n            //c.g += .5*a*(.5+.5*sin(11.*iTime+f*5.1*r2));\n            c.b += mdt5*1.4*a*(.5+.5*sin(7.*iTime+f*mdt6*7.1*r2));\n            //c += vec3(r2);\n            //c.b += a*.7*sin(22.*mdt6+f*5.4*r2);\n            as += a;\n            //f *= 1.3+length(c);\n            //f *= 1.1;\n   \n            //a = 0.;\n        }\n    }\n    c /= as;\n   \n \n    return c;\n    \n}\n\n\nvec3 warp(in vec2 uv) {\n    vec3 c = pools(uv);\n    \n    int iter = 5;\n    float amp = .55;\n    float f = .9;\n\n    float a = 1.; \n    for (int i = 0; i < iter; i++) {\n       a *= amp;\n    }\n       \n    for (int i = 0; i < iter; i++) {\n        a /= amp;\n        f *= 1.2;\n        c = a*pools(uv + f*vec2(c.r-c.g, c.g - c.b)) ;\n    }\n    return c;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    ivec2 px = ivec2( fragCoord );\n\n    vec2 uv = fragCoord/iResolution.xy;\n // vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    //rstate = dot(uv, vec2(711.9898,1123.233));\n \n    //cur = texelFetch(iChannel0, px, 0 );\n\n    fragColor = vec4(warp(uv), 1.);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}