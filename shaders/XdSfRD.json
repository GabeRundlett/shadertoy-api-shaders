{
    "Shader": {
        "info": {
            "date": "1499742498",
            "description": "Just messing around, mouse enabled",
            "flags": 32,
            "hasliked": 0,
            "id": "XdSfRD",
            "likes": 3,
            "name": "Procedural Thingy",
            "published": 3,
            "tags": [
                "procedural",
                "2d"
            ],
            "usePreview": 0,
            "username": "Ebanflo",
            "viewed": 497
        },
        "renderpass": [
            {
                "code": "#define numVertices int(iMouse.y) + 16\n//#define otherVersion\n\nfloat sqDist(vec2 p1, vec2 p2){return dot(p1 - p2, p1 - p2);}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 begin;\n    vec2 end;\n    fragColor = vec4(0);\n    for(int n = 0; n < numVertices; n++){\n        vec2 p1a = texture(iChannel0, vec2(float(n) / iResolution.x, 0)).xy;\n        vec2 p1b = texture(iChannel1, vec2(float(n) / iResolution.x, 0)).xy;\n        vec2 p1 = mix(p1a, p1b, fract(iTime));\n\t\t\n        vec2 p2a = texture(iChannel0, vec2(float(n + 1) / iResolution.x, 0)).xy;\n        vec2 p2b = texture(iChannel1, vec2(float(n + 1) / iResolution.x, 0)).xy;\n        vec2 p2 = mix(p2a, p2b, fract(iTime));\n        #ifdef otherVersion\n    \tfloat d = sqDist(p1, uv) + sqDist(p2, uv) - sqDist(p1, p2);\n        #else \n        float d = distance(p1, uv) + distance(p2, uv) - distance(p1, p2);\n        #endif\n    \tif(d < .0001) fragColor = vec4(p1, p2);\n        \n        if(n == 0) begin = p1;\n        if(n == numVertices - 1) end = p2;\n    }\n    #ifdef otherVersion\n    float d = sqDist(begin, uv) + sqDist(end, uv) - sqDist(begin, end);\n    #else\n    float d = distance(begin, uv) + distance(end, uv) - distance(begin, end);\n    #endif\n   \tif(d < .0001) fragColor = vec4(begin, end);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 hash22(vec2 p)//Dave Hoskins - https://www.shadertoy.com/view/4djSRW\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    if(fragCoord.y < 2.0) fragColor.xy = hash22(fragCoord + floor(iTime));\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 hash22(vec2 p)//Dave Hoskins - https://www.shadertoy.com/view/4djSRW\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    if(fragCoord.y < 2.0) fragColor.xy = hash22(fragCoord + ceil(iTime));\n}",
                "description": "",
                "inputs": [],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}