{
    "Shader": {
        "info": {
            "date": "1631578385",
            "description": "I used all the domain repetition tricks I know for this one. ",
            "flags": 0,
            "hasliked": 0,
            "id": "fsV3WD",
            "likes": 30,
            "name": "Sea of Pearls",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "underwater"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 571
        },
        "renderpass": [
            {
                "code": "#define pi 3.1415926535\n#define STEPS 500.0\n#define MDIST 200.0\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define pmod(p,x) (mod(p,x)-0.5*(x))\nfloat h21(vec2 a){\n    return fract(sin(dot(a,vec2(453.2734,255.4363)))*994.3434);\n}\nvec3 rdg;\nfloat box(vec3 p, vec3 b){\n    vec3 d= abs(p)-b;\n    return max(d.x,max(d.y,d.z));\n}\nvec3 map(vec3 p){\n    vec3 po = p;\n    vec2 a = vec2(1);\n    //vec2 b = vec2(2);\n    float t =iTime;\n    p.x+=t;\n    \n    float m = 2.; //Adjust the sphere size here :)\n    \n    vec2 id3 = floor(p.xz/m)+0.5;\n    p.x+=id3.y;\n    vec2 id2 = floor(p.xz/m)+0.5;\n    float hash =h21(mod(id2,100.0));\n    p.y+=(hash-0.5);\n    id2*=rot(-pi/6.0);\n    p.y+=sin(id2.x+t)*0.7;\n    p.y+=sin(id2.x*0.6+t)*0.4;\n    p.y+=sin(id2.x*0.3+t)*0.2;\n    id2*=rot(pi/6.0)*0.3;\n    p.y+=sin(id2.y+t)*0.7;\n    po = p;\n    float dc = 0.;\n    {\n        vec3 p2=p/vec3(m);\n        vec3 id = floor(p2);\n        vec3 dir = sign(rdg)*.5;\n        vec3 q = fract(p2)-.5;\n        vec3 rc = (dir-q)/rdg;\n        rc*=m;\n        dc = min(rc.x,min(rc.y,rc.z))+0.01;\n    }\n    p.xz = pmod(p.xz,m);\n    t+=hash*200.;\n    //t*=-1.;\n    //////////////////////////////////\n    //////////////////////////////////\n    float spd = .025;\n    t*=spd;\n    float lscl = m;\n    float le = -mod(t * lscl,lscl); \n    float tscl = 650.; \n    float te = tscl - mod(t * tscl,tscl); \n    float scl = 0.; \n    float id = 0.;\n    float npy = 0.;\n    bool mid = false;\n        if(p.y > le && p.y < te){ \n            npy = mod(p.y-le,tscl);\n            scl = mix(tscl,lscl,min(fract(t)*2.0,1.0));\n            mid = true;\n            id = floor(t);\n        }\n        if(p.y<le){ \n            npy = mod(p.y-le,lscl);\n            id = floor((p.y-le)/lscl)+floor(t);\n            scl = lscl;\n        }\n        if(p.y>te){ \n            npy = mod(p.y-te,tscl);           \n            id = floor((p.y-te)/tscl)+floor(t)+1.0; \n            scl = tscl;\n            //mid = true;\n        }\n        npy-=scl*0.5;\n        p.y = npy;\n    //////////////////////////////////\n    //////////////////////////////////\n    \n    a.x = length(p)-m*0.98*0.5;\n    \n    a.x = max(-po.z-16.,a.x);\n    float c = a.x;\n    a.x = min(a.x,dc);\n    \n    if(mid)a.x = min(a.x,max(-(-po.y+le),0.1));\n    a.y = id;\n    return vec3(a,c);\n}\nvec3 norm(vec3 p){\n    vec2 e = vec2(0.01,0.);\n    return normalize(map(p).x-vec3(\n    map(p-e.xyy).x,\n    map(p-e.yxy).x,\n    map(p-e.yyx).x));\n}\nvec3 light(vec3 p, vec3 rd){\n    vec3 col = vec3(0);\n    vec3 ld = normalize(vec3(1,1,-1));\n    vec3 n = norm(p);\n    float fres = 1.-abs(dot(rd,n))*.6;\n    col = vec3(clamp(fres,0.,1.));\n    \n    float sss = 0.6;\n        for(float i=1.; i<40.; ++i){\n        float dist = i*0.1;\n        sss += 0.04*smoothstep(0.,1.,map(p+ld*dist).z/dist);\n    }\n    col*=sss;\n    \n    vec3 p2 = p;\n    p2.xz*=rot(0.1+cos(iTime*0.2)*0.3);\n    col*=mix(vec3(0.310,0.471,0.953),vec3(0.106,0.137,0.553),sin(p2.z+p2.x)*0.5+0.5);\n    return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(1,10,-25);\n    vec3 lk = vec3(1.01,2,0);\n    vec3 f = normalize(lk-ro);\n    vec3 r = normalize(cross(vec3(0,1,0),f));\n    vec3 rd = normalize(f*0.95+uv.x*r+uv.y*cross(f,r));\n    rdg=rd;\n    vec3 p = vec3(0);\n    vec3 d = vec3(0);\n    float dO = 0.;\n    bool hit = false;\n    for(float i =0.; i<STEPS; i++){\n        p = ro+rd*dO;\n        d = map(p);\n        dO += d.x*1.25;\n        if(abs(d.x)<0.005){\n            hit =true;\n            break;\n        }\n        if(dO>MDIST){\n            dO=MDIST;\n            p = ro+rd*dO;\n            break;\n        }   \n    }\n    if(hit){\n        col = light(p,rd);\n    }\n\n    //Fog\n    col*=clamp(p.y*0.15+1.0,-1.,1.);\n    col = pow(col,vec3(0.6));;\n    vec3 bg = mix(vec3(0.000,0.12,0.400),vec3(0.439,0.784,1.000),max(rd.y+0.6,0.));\n    col = mix(col,bg,clamp(length(p-ro*0.5)/60.,0.,1.));\n\n    fragColor = vec4(col,0.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}