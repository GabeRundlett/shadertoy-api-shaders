{
    "Shader": {
        "info": {
            "date": "1701119116",
            "description": "imitates the halftone effect used in older magazine printing.\nsubdivides and rotates the space differently for each channel, then threshold with image.\nsee also:[url=https://www.shadertoy.com/view/Dsy3Dz]cubemap version[/url]",
            "flags": 2,
            "hasliked": 0,
            "id": "cl3fDr",
            "likes": 4,
            "name": "Halftone (Tabyltop)",
            "published": 3,
            "tags": [
                "halftone",
                "npr"
            ],
            "usePreview": 0,
            "username": "DrieStone",
            "viewed": 238
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415927\n\n//#define HT_SIZE 5.\n\n#define ANIM_SPEED 0.7\n\n#define BLUR .15\n\n#define LOW .12\n#define HIGH .85\n\n#define SPREAD .085\n\n//https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p){\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvec2 rotVec(vec2 v, float f){\n    float c=cos(f), s=sin(f);\n    return v*mat2(c, -s, s, c);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    //randomly offsetted to avoid moire.\n    float baseSize = 5.0; // Base value for HT_SIZE\n    float HT_SIZE = baseSize * iResolution.y / 400.0; // Scale based on screen height\n\n    float randSeed=1.;\n    float angleR=PI*hash11(randSeed);\n    float angleG=angleR+PI*mix(.25, .33, hash11(randSeed+10.));\n    float angleB=angleG+PI*mix(.25, .33, hash11(randSeed+20.));\n    \n    //rotate, shrink, repeat, normal. radial gradients\n    vec2 coord=iResolution.xy*.5-fragCoord;\n    vec3 dist=vec3(\n        length(.5-fract(rotVec(coord, angleR)/HT_SIZE)),\n        length(.5-fract(rotVec(coord, angleG)/HT_SIZE)),\n        length(.5-fract(rotVec(coord, angleB)/HT_SIZE))\n    );\n    \n    vec2 uv=fragCoord/iResolution.xy;\n    vec3 col=texture(iChannel0, uv).rgb*.7;\n    \n    fragColor.rgb=smoothstep(BLUR, -BLUR, dist-col);\n    fragColor=mix(vec4(LOW), vec4(HIGH), fragColor);\n    fragColor.rgb+=(hash32(fragCoord)-.5)*SPREAD;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}