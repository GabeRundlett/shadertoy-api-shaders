{
    "Shader": {
        "info": {
            "date": "1723557837",
            "description": "i asked chat gpt to list some variations of how i could shade the linear distance to a circle",
            "flags": 0,
            "hasliked": 0,
            "id": "McsfR7",
            "likes": 2,
            "name": "'glow' functions",
            "published": 3,
            "tags": [
                "glow"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 101
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ny = 0.7;\n    vec2 o_scl = vec2(1.0, ny);\n    vec2 o_res = iResolution.xy*o_scl.xy;\n    float n_scl_min = min(o_res.x, o_res.y);\n\n    vec2 o_trn = (fragCoord.xy-o_res*.5)/n_scl_min;\n    vec2 o_trn_mouse = iMouse.xy/iResolution.x;\n    float n_len = 19.;\n    float nx = o_trn_mouse.x;\n    if(sign(iMouse.z) != 1.){\n        nx = fract(iTime*(1./n_len));\n    }\n    \n    int n_idx1 = int(nx*n_len);\n    int n_idx = n_idx1;\n    if(o_trn.y > ny){\n        vec2 o2 = (((fragCoord.xy)/iResolution.xy*o_scl)*n_len);\n        o_trn = fract(o2)-.5;\n        n_idx = int(floor(o2.x));\n    }\n    float n = length(o_trn);\n    float n_radius = 1.-ny;\n    n = n-n_radius;\n    n = n/n_radius;//normalize\n    float nb = sign(n); // store the information if we are inside or outside the circle\n    n = abs(n);//make absolute\n    \n    float b = 0.3;\n    float[] a_n = float[] (\n        //linear\n        n,\n        \n        // Exponential looks a bit like a 'neon tube'    \n        pow(n, 1./2.),\n\n        // hyperbel function\n        -b*(1./(n+b))+1.,\n        \n        // Smoothstep for soft edges\n        smoothstep(0.4, 0.5, n),\n        \n        // Sinusoidal variation\n        sin(10.0 * n) * 0.5 + 0.5,\n        \n        // Exponential decay\n        exp(-n * 8.0),\n        \n        // Distance-based gradient (quadratic falloff)\n        1.0 - n * n,\n        \n        // Logarithmic falloff\n        log(1.0 + n * 9.0),\n        \n        // Pulse effect \n        pow(n + sin(mod(iTime, 2.0) * 3.14159) * 0.1, 1.0 / 3.0),\n        \n        // Noise-based variation \n        mix(n, fract(sin(dot(o_trn.xy, vec2(12.9898, 78.233))) * 43758.5453), 0.2),\n        // Inverse Exponential Decay\n        1.0 - exp(-n * 8.0),\n\n        // Radial Blur\n        exp(-n * n * 25.0),\n\n        // Step Function for Hard Edge\n        step(0.5, n),\n\n        // Sawtooth Wave\n        fract(n * 10.0),\n\n        // Circular Ripple\n        abs(sin(n * 20.0)),\n\n        // Cosine Falloff\n        cos(n * 3.14159) * 0.5 + 0.5,\n\n        // Linear Interpolation with Time\n        mix(pow(n, 1./3.), smoothstep(0.4, 0.5, n), abs(sin(iTime))),\n\n        // Bump Effect\n        1.0 - smoothstep(0.4, 0.5, n) * smoothstep(0.5, 0.6, n),\n\n        // Soft Pulse\n        pow(n, 1./3.) * abs(sin(iTime * 2.0))\n    );\n    //float n_len = float(a_n.length());\n    n = a_n[n_idx];\n    \n    n = 1.-n;//invert\n    fragColor = vec4(n);\n    if(n_idx != n_idx1){\n        fragColor = clamp(fragColor, 0., 0.1);\n    }\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}