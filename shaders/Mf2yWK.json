{
    "Shader": {
        "info": {
            "date": "1723031135",
            "description": "Image space Laplacian generalized barycentric coordinate solver for curved domains.",
            "flags": 32,
            "hasliked": 0,
            "id": "Mf2yWK",
            "likes": 3,
            "name": "Curved domain GBC solver",
            "published": 3,
            "tags": [
                "barycentric",
                "harmonic",
                "coordinate",
                "gbc",
                "generalizedbarycentriccoordinates"
            ],
            "usePreview": 0,
            "username": "Reynolds",
            "viewed": 104
        },
        "renderpass": [
            {
                "code": "float sdBezier3(vec2 p, vec2 a, vec2 b, vec2 c)\n{\n\tb = mix( b+vec2(1e-4), b, abs(sign(b*2.-a-c)) );\n\tvec2 A = b-a,\n\t     B = c-b-A,\n\t     C = p-a,\n\t     D = A*2.,\n\tP = solveCubic2( vec3(-3.*dot(A,B), dot(C,B)-2.*dd(A), dot(C,A))/-dd(B) );\n    P = clamp( P,0.,1.); // curve parameterization\n\n\treturn sqrt( min( dd( (D+B*P.x)*P.x -C ),\n                      dd( (D+B*P.y)*P.y -C )));\n}\n\nfloat sdScene(vec2 p) \n{\n    float d = sdBezier3(p, cps[0], midcps[0], cps[1]);\n    for(int i = 1; i < 8; ++i) {\n        int p1 = (i + 1) % 8;\n        d = min(d, sdBezier3(p, cps[i], midcps[i], cps[p1]));\n    }\n    \n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 col = texture(iChannel0, uv);\n\n    float u = floor(col.x*20.0)/20.0;\n    vec3 A = mix(vec3(0.0, 0.0, 1.0), 1.5*vec3(0.0, 1.0, 0.0), u);\n    vec3 B = mix(1.5*vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 0.0), u);\n    vec3 C = mix(A, B, u);\n    \n    \n    \n    if(sdScene(uv) < 0.002) {\n        fragColor = vec4(1.0);\n    } else {\n        fragColor = vec4( C, 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//https://www.shadertoy.com/view/XtdyDn\nvec2 sdBezier3(vec2 p, vec2 a, vec2 b, vec2 c, int i)\n{\n\tb = mix( b+vec2(1e-4), b, abs(sign(b*2.-a-c)) );\n\tvec2 A = b-a,\n\t     B = c-b-A,\n\t     C = p-a,\n\t     D = A*2.,\n\tP = solveCubic2( vec3(-3.*dot(A,B), dot(C,B)-2.*dd(A), dot(C,A))/-dd(B) );\n    P = clamp( P,0.,1.); // curve parameterization\n\n    float t =0.0;\n    if(dd( (D+B*P.x)*P.x -C ) < dd( (D+B*P.y)*P.y -C )) {\n        t = P.x;\n    } else {\n        t = P.y;\n    }\n\n    float cc = 0.0;\n    if(i == coord) {\n        cc = t;\n    } else if( (i - 1 + 8) % 8 == coord) {\n        cc = 1.0 - t;\n    }\n\n\treturn vec2(sqrt( min( dd( (D+B*P.x)*P.x -C ),\n                      dd( (D+B*P.y)*P.y -C ))), cc);\n}\n\nvec2 minA(vec2 d, vec2 e) {\n    float a = float(d.x < e.x);\n    return vec2(min(d.x, e.x), mix(d.y, e.y, 1.0-a));\n}\n\nvec2 sdScene(vec2 p) {\n    vec2 d = sdBezier3(p, cps[0], midcps[0], cps[1], 0);\n    for(int i = 1; i < 8; ++i) {\n        int p1 = (i + 1) % 8;\n        d = minA(d, sdBezier3(p, cps[i], midcps[i], cps[p1], i));\n    }\n    \n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 d = sdScene(uv);\n    if(d.x < 0.0025) {\n        fragColor = vec4(vec3(d.y), 0.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 colA = texture(iChannel0, uv);\n    \n    int s = 1;\n    vec4 col2 = texelFetch(iChannel1, ivec2(fragCoord) + ivec2(s, 0), 0);\n    vec4 col3 = texelFetch(iChannel1, ivec2(fragCoord) + ivec2(0, s), 0);\n    vec4 col4 = texelFetch(iChannel1, ivec2(fragCoord) + ivec2(-s, 0), 0);\n    vec4 col5 = texelFetch(iChannel1, ivec2(fragCoord) + ivec2(0, -s), 0);\n    \n    fragColor = mix(colA, 0.25*(col2 + col3 + col4 + col5), colA.w);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    \n    int s = 1;\n    vec4 col2 = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(s, 0), 0);\n    vec4 col3 = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(0, s), 0);\n    vec4 col4 = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(-s, 0), 0);\n    vec4 col5 = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(0, -s), 0);\n    \n    fragColor = 0.25*(col2 + col3 + col4 + col5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    \n    int s = 1;\n    vec4 col2 = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(s, 0), 0);\n    vec4 col3 = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(0, s), 0);\n    vec4 col4 = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(-s, 0), 0);\n    vec4 col5 = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(0, -s), 0);\n    \n    fragColor = 0.25*(col2 + col3 + col4 + col5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//change this to change the function to show\n#define coord 3\n\n//Taken from Fabrice: https://www.shadertoy.com/view/XtdyDn\n//Find roots using Cardano's method. http://en.wikipedia.org/wiki/Cubic_function#Cardano.27s_method\nvec2 solveCubic2(vec3 a)\n{\n\tfloat p  = a.y - a.x*a.x/3.,\n\t      p3 = p*p*p,\n\t      q  = a.x* ( 2.*a.x*a.x - 9.*a.y ) /27. + a.z,\n\t      d  = q*q + 4.*p3/27.;\n    \n\tif(d>0.) {\n\t\tvec2 x = ( vec2(1,-1)*sqrt(d) -q ) *.5;\n        x = sign(x) * pow( abs(x) , vec2(1./3.) );\n  \t\treturn vec2( x.x+x.y -a.x/3. );\n  \t}\n    \n \tfloat v = acos( -sqrt(-27./p3)*q*.5 ) / 3.,\n \t      m = cos(v),\n \t      n = sin(v)*sqrt(3.);\n\n\treturn vec2(m+m,-n-m) * sqrt(-p/3.) - a.x/3.;\n}\n\n// How to solve the equation below can be seen on this image.\n// http://www.perbloksgaard.dk/research/DistanceToQuadraticBezier.jpg\n#define dd(a) dot(a,a)\n\n// quadratic bezier control points.\nvec2[8] cps = vec2[8](vec2(0.25, 0.25), \n                      vec2(0.75, 0.25), \n                      vec2(0.75, 0.75), \n                      vec2(0.55, 0.75), \n                      vec2(0.55, 0.45), \n                      vec2(0.35, 0.45), \n                      vec2(0.35, 0.75), \n                      vec2(0.25, 0.75));\n\nvec2[8] midcps = vec2[8](vec2(0.5, 0.3), \n                         vec2(0.8, 0.5), \n                         vec2(0.65, 0.65), \n                         vec2(0.6, 0.6), \n                         vec2(0.4, 0.5), \n                         vec2(0.2, 0.6),\n                         vec2(0.3, 0.7),\n                         vec2(0.0, 0.5));",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}