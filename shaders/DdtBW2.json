{
    "Shader": {
        "info": {
            "date": "1697652308",
            "description": "Rainbow Bullseye Ripples v1",
            "flags": 0,
            "hasliked": 0,
            "id": "DdtBW2",
            "likes": 2,
            "name": "Rainbow Bullseye Ripples v1",
            "published": 3,
            "tags": [
                "circlecirclesbullseyerainbow"
            ],
            "usePreview": 0,
            "username": "de_rock",
            "viewed": 152
        },
        "renderpass": [
            {
                "code": "vec3 palette(float t) {\n    float sinTime = sin(t);\n    float cosTime = cos(t);\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.269, 0.417, 0.557);\n\n    // Earthy gradient colors\n    vec3 earthyColor1 = vec3(0.584, 0.376, 0.184); // Brown\n    vec3 earthyColor2 = vec3(0.678, 0.631, 0.318); // Khaki\n    vec3 earthyColor3 = vec3(0.251, 0.349, 0.156); // Olive Green\n\n    float gradientFactor = 0.5 + 0.5 * sinTime;\n\n    vec3 colorShift = vec3(sinTime, cosTime, sinTime * cosTime);\n    return mix(\n        a - b * cos(6.28318 * (c * t + d)) + colorShift,\n        mix(earthyColor1, mix(earthyColor2, earthyColor3, gradientFactor), gradientFactor),\n        0.5\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / max((iResolution.x * sin(2.0) - iTime) + cos(iTime / 9.0), iResolution.y + cos(iTime / 9.0));\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n\n    float rotationSpeed = 0.0; // Adjust the rotation speed\n    float rotationAngle = -sin(iTime * rotationSpeed); // Smooth rotation angle\n\n    float aspect = iResolution.x / iResolution.y;\n    float timeFactor = iTime / 5.0; // Adjust the time factor for the evolution\n\n    float xBlend = fragCoord.x / iResolution.x; // Blending factor based on x-coordinate\n    float yBlend = 1.0 - xBlend; // Blending factor for the opposite direction\n\n    for (float i = 0.0; i < 4.0; i++) {  // Iterate four times for quad-mirroring\n        // Apply rotation\n        uv = mat2(cos(rotationAngle), -sin(rotationAngle), -sin(rotationAngle), tan(rotationAngle)) * uv;\n\n        // Deform the UV coordinates over time from a circle to a rectangle\n        uv.x = mix(uv.x, sign(uv.x) * (2.0 - abs(sin(timeFactor + uv.x))), abs(cos(timeFactor + uv.y) * 0.5));\n        uv.y = mix(uv.y, sign(uv.y) * (2.0 - abs(cos(timeFactor + uv.y))), abs(sin(timeFactor + uv.x) * 0.5));\n\n        uv = fract(uv * 2.5) - 0.5;\n\n        float d = length(uv) * exp(+length(uv0));\n\n        vec3 col = pow(palette(length(uv0) + iTime / 2.1), vec3(1.5)); // Adjust the power factor for contrast\n\n        d = sin(d * 16.0 - cos(iTime)) / 8.0;\n        d = abs(d);\n\n        d = 0.05 / d;\n\n        float threshold = 2.0; // Adjust the threshold for contrast\n        vec3 blendedColor = mix(vec3(0.0), col, step(threshold, d));\n\n        // Apply blending along the x-axis\n        finalColor += blendedColor * xBlend;\n\n        // Apply blending in the opposite direction along the x-axis\n        finalColor += blendedColor * yBlend;\n\n        // Reflect across the x-axis and y-axis\n        if (mod(i, 2.0) == 0.0) {\n            uv = vec2(uv.x, -uv.y);\n        }\n        if (i >= 2.0) {\n            uv = vec2(-uv.x, uv.y);\n        }\n    }\n\n    fragColor = vec4(finalColor, 2.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}