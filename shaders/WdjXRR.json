{
    "Shader": {
        "info": {
            "date": "1552684949",
            "description": "Generative dune landscape. Exploring procedural painting",
            "flags": 32,
            "hasliked": 0,
            "id": "WdjXRR",
            "likes": 46,
            "name": "Sand Desert",
            "published": 3,
            "tags": [
                "landscape",
                "sand",
                "desert"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 2486
        },
        "renderpass": [
            {
                "code": "// Sand Desert\n// Generative dune landscape\n// Exploring procedural painting\n// Licensed under hippie love conspiracy\n// Leon Denise (ponk) 2019.03.15\n// Using code from:\n// Inigo Quilez (shadertoy.com/view/Xds3zN)\n// Morgan McGuire (shadertoy.com/view/4dS3Wd)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Sand Desert\n// Generative dune landscape\n// Exploring procedural painting\n// Licensed under hippie love conspiracy\n// Leon Denise (ponk) 2019.03.15\n// Using code from:\n// Inigo Quilez (shadertoy.com/view/Xds3zN)\n// Morgan McGuire (shadertoy.com/view/4dS3Wd)\n\nconst float PI = 3.1415;\nconst vec3 yellow = vec3(0.976, 0.870, 0.482);\nconst float seedScale = 6.0;\nconst float timeSpeed = 0.1;\n\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\nfloat random (in vec2 st) { return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123); }\nfloat hash(float n) { return fract(sin(n) * 1e4); }\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) +\n        (c - a)* u.y * (1.0 - u.x) +\n        (d - b) * u.x * u.y;\n}\nfloat noise(vec3 x) {\n    const vec3 step = vec3(110, 241, 171);\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n    float n = dot(i, step);\n    vec3 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\n               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\nfloat fbm (vec3 p) {\n    float amplitude = .5;\n    float result = 0.0;\n    for (float index = 0.0; index <= 3.0; ++index) {\n        result += noise(p / amplitude) * amplitude;\n        p.y -= .01;\n        amplitude /= 2.;\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 color, in vec2 pixel ) {\n    vec2 uv = pixel.xy/iResolution.xy;\n    vec2 p = (pixel.xy-.5*iResolution.xy)/iResolution.y;\n    vec2 seed = p*max(.1, uv.y + .2)*seedScale;\n    float timeline = mod(iTime*timeSpeed, 1000.);\n    float salty = fbm(vec3(seed+noise(seed*2.), timeline*.2));\n    float a = salty*PI*5.+noise(seed*4.)*.5;\n    vec2 unit = 1./iResolution.xy;\n    color.rgb = yellow * abs(sin(a))*1.5;\n    color *= .1+.9*random(uv+fract(timeline));\n    uv += vec2(cos(a),sin(a)) * unit;\n    uv -= normalize(p) * unit;\n    vec3 frame = texture(iChannel0, uv).rgb;\n    frame.r += 0.002;\n    float blend = .99;\n    color.rgb = frame*blend + (1.-blend)*color.rgb;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}