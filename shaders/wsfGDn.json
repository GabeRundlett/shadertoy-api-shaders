{
    "Shader": {
        "info": {
            "date": "1545668962",
            "description": "bricks",
            "flags": 0,
            "hasliked": 0,
            "id": "wsfGDn",
            "likes": 1,
            "name": "Bricks FBM",
            "published": 3,
            "tags": [
                "procedural",
                "textures",
                "bricks"
            ],
            "usePreview": 0,
            "username": "dalerank",
            "viewed": 551
        },
        "renderpass": [
            {
                "code": "mat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );\n\nfloat hash( float n )\n{\n\treturn fract(n*1.5153);\n}\n\nfloat noise( in vec2 x )\n{\n\tvec2 p = floor(x);\n\tvec2 f = fract(x);\n    \tf = f*f*(3.0-2.0*f);\n    \tfloat n = p.x + p.y*57.0;\n    \tfloat res = mix(mix( hash(n+  0.0), hash(n+  1.0),f.x), mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n    \treturn res;\n}\n\nfloat fbm( vec2 p )\n{\n    \tfloat f = 0.0;\n    \tf += 0.50000*noise( p ); p = m*p*2.02;\n    \t//f += 0.25000*noise( p ); p = m*p*2.03;\n    \t//f += 0.12500*noise( p ); p = m*p*2.01;\n    \t//f += 0.06250*noise( p ); p = m*p*2.04;\n    \t//f += 0.03125*noise( p );\n    \treturn f/0.984375;\n}\n\nvec3 thing(vec2 pos) \n{\n\tfloat offset = 0.;\n\tfloat row = floor((pos.y)/1.0);\n\tif (mod(row, 2.0) < 1.0)\n\t\toffset = 0.5;\n\t\n\tvec2 p = pos;\n\tp.x += offset;\n\tfloat n1 = 0.5;\n\tpos.x=fract(pos.x/2. + offset +.5)-0.5;\n\tpos.y=fract(pos.y+.5)-0.5;\n\tpos = abs(pos);\n\tfloat r = length(pos );\n   \tfloat a = atan(pos.y, pos.x);\n\tfloat b = atan(pos.x, pos.y);\n\tfloat n2 = 0.5 * (a * b);\n\tfloat n3 = n1 * 0.15 / n2 * 0.75;\n\tfloat s = (min(pos.x,pos.y)-0.25) / length(pos) / pos.x * 0.0125 - n3;\n\tvec3 color = vec3(mix(s, 1.-n1, 0.5));\n\tcolor = mix(color, vec3(0.5487,.3,.24781), 0.35);\n\tcolor -= vec3(0.687,.743,.645781) * fbm(p * 25.) * 0.3;\n\t\n\tcolor = mix(color, vec3(1.0, 0.6,0.0), n2);\n\tfloat bc = b*pow(n3,0.25);\n\tcolor = mix(color, vec3(0.0, 0.5,0.25), 0.1*bc);\n\treturn color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n\tvec2 position = fragCoord.xy / iResolution.xy;\n\tvec2 world = position * 5.0;\n\tworld.x *= iResolution.x / iResolution.y;\n\tvec3 dist = thing(world)+0.25;\n\tfragColor = vec4( dist, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}