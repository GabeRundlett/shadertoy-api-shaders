{
    "Shader": {
        "info": {
            "date": "1440383322",
            "description": "Creating metaballs with a polynomial smoothmin function",
            "flags": 0,
            "hasliked": 0,
            "id": "4tXSDl",
            "likes": 10,
            "name": "Metaeaux - Metaballs",
            "published": 3,
            "tags": [
                "raymarching",
                "distancefields",
                "smoothmin"
            ],
            "usePreview": 0,
            "username": "metaeaux",
            "viewed": 1834
        },
        "renderpass": [
            {
                "code": "const vec4 ambientColor = vec4(127./255.,199./255.,175./255., 1.0);\nconst vec4 skyColor = 0.8 * vec4(63./255.,184./255.,175./255., 1.0);\nconst float PI = 3.14159;\n\nfloat sphere(vec3 p, float radius) {\n    return length(p) - radius;\n}\n\nfloat cylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\n\nvec3 repeat( vec3 p, vec3 c )\n{\n    vec3 q = mod(p,c)-0.5*c;\n    return q;\n}\n\nvec3 rotate(vec3 p, float theta)\n{\n    theta *= 2. * 3.14159;\n    mat3 ry = mat3(cos(theta), 0., sin(theta),\n                0., 1., 0.,\n                -sin(theta), 0., cos(theta));\n    return ry * p;\n}\n\nfloat smoothMin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sploosh(vec3 p, float sizeFac, float distFac) {\n    float d = sphere(p, .4);\n    const int n = 4;\n\n    float size = 0.2 + 0.1 * abs(cos(iTime));\n    vec3 q1 = p;\n    vec3 q2 = p;\n    vec3 q3 = p;\n    vec3 q4 = p;\n    \n    for (int i = 1; i < n; i++){\n        float distX = 0.3 + 0.3 * sin(iTime * 0.7429);\n    \tfloat distY = 0.2 - 0.2 * cos(iTime * 1.242);\n\n        q1 += vec3(distX, distY, 0.);\n        q2 += vec3(-distX, distY, 0.);\n        q3 += vec3(sin(iTime * 0.342) * distX, sin(iTime)-distY, 0.);\n        q4 += vec3(cos(iTime) * distX, -distY, 0.);\n        size = 0.2 + 0.3 * abs(cos(float(n) * size));\n    \tfloat d1 = sphere(q1, size);\n        size = 0.2 + 0.3 * abs(cos(float(n) * 0.14159 * size));\n    \tfloat d2 = sphere(q2, size);\n        size = 0.2 + 0.3 * abs(sin(float(n) * 0.014159 * size));\n    \tfloat d3 = sphere(q3, size);\n    \tfloat d4 = sphere(q4, size);\n    \tfloat blendDistance = 0.4;\n    \n    \td = smoothMin(d, smoothMin(d1, d2, blendDistance), blendDistance);\n        d = smoothMin(d, smoothMin(d3, d4, blendDistance), blendDistance);\n    }\n    \n    return d;\n}\n\nfloat distanceField(vec3 p) {\n    return sploosh(p, 0.01, .02);\n}\n\nvec3 getNormal(vec3 p)\n{\n\tfloat h = 0.0001;\n\n\treturn normalize(vec3(\n\t\tdistanceField(p + vec3(h, 0, 0)) - distanceField(p - vec3(h, 0, 0)),\n\t\tdistanceField(p + vec3(0, h, 0)) - distanceField(p - vec3(0, h, 0)),\n\t\tdistanceField(p + vec3(0, 0, h)) - distanceField(p - vec3(0, 0, h))));\n}\n\n// phong shading\nvec4 phong(vec3 p, vec3 normal, vec3 lightPos, vec4 lightColor)\n{\n\tfloat lightIntensity = 0.0;\n\tvec3 lightDirection = normalize(lightPos - p);\n    \n    // lambert shading\n\tlightIntensity = max(0., dot(normal, lightDirection));\n    \n    // lambert shading\n    vec4 colour = lightColor * lightIntensity;\n    \n    // specular highlights\n    colour += pow(lightIntensity, 16.0) * (1.0 - lightIntensity*0.5);\n        \n    // ambient colour\n    colour += ambientColor * (1.0 - lightIntensity);\n    \n    \n\treturn colour;\n}\n\nvec2 squareFrame(vec2 screenSize) {\n  vec2 position = 2.0 * (gl_FragCoord.xy / screenSize.xy) - 1.0;\n  position.x *= screenSize.x / screenSize.y;\n  return position;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = squareFrame(iResolution.xy); \n    vec3 camUp = normalize(vec3(0., 1., 0.));\n    vec3 camForward = normalize(vec3(0., 0., 1.));\n    vec3 camRight = cross(camForward, camUp);\n    float focalLength = 2.;\n    vec3 ro = -vec3(0., 0., 4.);\n\tvec3 rd = normalize(camForward * focalLength + camRight * uv.x + camUp * uv.y);\n    vec4 color = skyColor;\n\n    float t = 0.0;\n    const int maxSteps = 32;\n    for(int i = 0; i < maxSteps; ++i)\n    {\n        vec3 p = ro + rd * t;\n        float d = distanceField(p);\n        if(d < 1e-2)\n        {\n            vec3 normal = getNormal(p);\n            color = phong(p, normal, normalize(vec3(1.0, 1.0, -2.0)), vec4(218./255.,216./255.,167./255., 1.0));            \n            break;\n        }\n\n        t += d;\n    }\n\n    fragColor = color;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}