{
    "Shader": {
        "info": {
            "date": "1619782284",
            "description": "See sound tab: ( rise gain )\nsound made of 1000 random frequencies around 440Hz.\nBut all fall in sync at 2\", then every 5\".  Listen, and try switch the random phase variant.  \nCause: accumulated intensity of N random sin is sqrt(N), but N if correlated.",
            "flags": 8,
            "hasliked": 0,
            "id": "fsjSzW",
            "likes": 3,
            "name": "test audio: correlation in waves",
            "published": 3,
            "tags": [
                "audio",
                "correlation"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 389
        },
        "renderpass": [
            {
                "code": "// rise sound gain if necessary.\n// NB: sound quality degenerate over time because of float precision of time.\n\n// reuse base of https://shadertoy.com/view/7sSXzD\n\n// the interesting part is in the Sound tab\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// === icon message: \"sound in\". link: https://www.shadertoy.com/view/MtyXRW\n\n#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad(iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n#define initMsg vec4 T = vec4(0)\n#define endMsg  return length(T.yz)==0. ? 0. : T.x\n\nfloat message(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0);   // or: initMsg;\n    C(83);C(111);C(117);C(110);C(100);C(32);C(105);C(110); // message \"Sound in\"\n    return length(T.yz)==0. ? -1. : T.x; // or: endMsg;\n}\n\nvoid mainImage( out vec4 O, in vec2 u ) {\n    if (iResolution.y<2000.) {float c=message((u/iResolution.y-vec2(.1,.2))*8.);if(c>=0.){O=vec4(c);return;}}\n\n    \n    vec2 uv = u / iResolution.xy;\n\tO = vec4(uv,0.5+0.5*sin(iTime),1.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// rise sound gain if necessary.\n// NB: sound quality degenerate over time because of float precision of time. fix: https://www.shadertoy.com/view/4ltfRN\n\n#define hash(p)  fract(sin( (p) * 12.9898 ) * 43758.5453) // random\n\n\nvec2 mainSound( int it, float t )\n{\n    float v  = 0., w, A=0., tau = 6.2831853, f, phi;\n    \n    for (float i = 1.; i < 1000.; i++ ) {\n        f = 440.*(1.+.1*hash(i));                      // freq fi in Hz\n        phi = 0.;                                      // sync phases\n     // phi = tau*hash(i+.5);                          // random phases\n        w = 1.;                                        // weight for freq fi\n        v +=  cos( tau * f *  (t-2.)  + phi  ) *w;     // weighted wave\n        A += w;                                        // cumul weight for normalization\n    }\n     \n    return vec2(  v / A ); // normalization: std dev = sqrt(A) if decorrelated,\n                           //                max can be A if correlated\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}