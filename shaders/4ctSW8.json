{
    "Shader": {
        "info": {
            "date": "1714059095",
            "description": "a collection of 2d kernels, \nclick and hold down in a section on the bottom half of the image to see that kernel applied to the top part of the image",
            "flags": 0,
            "hasliked": 0,
            "id": "4ctSW8",
            "likes": 2,
            "name": "2d kernels",
            "published": 3,
            "tags": [
                "kernel"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 139
        },
        "renderpass": [
            {
                "code": "\n\nvec4 f_o_convolved_static_3x3(\n    vec2 o_trn, \n    float[3*3] a_n_factor_weight_krnl, \n    int[3*3] a_n_exponent_weight_krnl\n){\n\n    vec2 o_scl_krnl = vec2(3.);\n    vec2 o_scl_krnl_half = floor(o_scl_krnl/2.);\n    \n    \n    vec4 o_col_sum = vec4(0.);\n    float n_factor_sum = 0.;\n    for(float n_x = 0.; n_x < o_scl_krnl.x; n_x+=1.){\n        for(float n_y = 0.; n_y < o_scl_krnl.y; n_y+=1.){\n            vec2 o_trn_krnl = vec2(n_x, n_y);\n            vec2 o_trn_krnl2 = o_trn_krnl-o_scl_krnl_half;\n            float n_idx_a_n_krnl = n_y*o_scl_krnl.x + n_x;\n            float n_factor = a_n_factor_weight_krnl[int(n_idx_a_n_krnl)];\n            n_factor_sum+=n_factor;\n            int n_exponent = a_n_exponent_weight_krnl[int(n_idx_a_n_krnl)];\n\n            vec4 o_col_tmp =\n                texture(\n                    iChannel0,\n                    (o_trn+o_trn_krnl2.xy)/iResolution.xy\n                )*n_factor;\n            //o_col_tmp = pow(abs(o_col_tmp), vec4(abs(n_exponent)));\n            o_col_sum+= o_col_tmp;\n        }\n    }\n    vec4 o_col_res = o_col_sum;\n    if(n_factor_sum>0.){\n        o_col_res/n_factor_sum;\n    }\n    return o_col_res;\n\n\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_trn = fragCoord.xy;\n    float n_pixelation = 1.;\n    o_trn=floor(o_trn*(1./n_pixelation))*n_pixelation;\n    vec2 o_trn_nor = fragCoord.xy/iResolution.xy;\n    vec4 o_mouse_nor = iMouse/vec4(iResolution.xy, 1.,1.);\n    \n    vec4 o_col_img = texture(iChannel0,(o_trn)/iResolution.xy);\n    float n = 1./(3.*3.);\n\n        vec4 o_col_sobel_x = f_o_convolved_static_3x3(\n            o_trn,\n            float[](\n            //sobel edge detection x\n            -1., 0., 1.,\n            -2., 0., 2.,\n            -1., 0., 1.\n            ),\n            int[](\n            1, 1, 1,\n            1, 1, 1,\n            1, 1, 1\n            )\n        );\n        vec4 o_col_sobel_y = f_o_convolved_static_3x3(\n            o_trn,\n            float[](\n            //sobel edge detection y\n            1., 2., 1.,\n            0., 0., 0.,\n            -1., -2., -1.\n            ),\n            int[](\n            1, 1, 1,\n            1, 1, 1,\n            1, 1, 1\n            )\n        );\n        vec4 o_col_sobel_x_pow = pow(abs(o_col_sobel_x),vec4(2.));\n        vec4 o_col_sobel_y_pow = pow(abs(o_col_sobel_y),vec4(2.));\n    vec4[] a_o_col = vec4[](\n        o_col_img,\n        f_o_convolved_static_3x3(\n            o_trn,\n            float[](\n            //slight blur\n            1./16., 1./8., 1./16.,\n            1./8., 1./4., 1./8., \n            1./16., 1./8., 1./16. \n            ),\n            int[](\n            1, 1, 1,\n            1, 1, 1,\n            1, 1, 1\n            )\n        ), \n        f_o_convolved_static_3x3(\n            o_trn,\n            float[](\n            //sharpening\n            -1., -1., -1.,\n            -1., 9., -1., \n            -1., -1., -1.\n            ),\n            int[](\n            1, 1, 1,\n            1, 1, 1,\n            1, 1, 1\n            )\n        ), \n        f_o_convolved_static_3x3(\n            o_trn,\n            float[](\n            //slight 'de'blur / deconvolve\n            -1./16., -1./8., -1./16.,\n            -1./8., 1., -1./8., \n            -1./16., -1./8., -1./16. \n            ),\n            int[](\n            1, 1, 1,\n            1, 1, 1,\n            1, 1, 1\n            )\n        ), \n                f_o_convolved_static_3x3(\n            o_trn,\n            float[](\n            //laplacian sharpening\n            0.0, -1.0, 0.0,\n           -1.0,  5.0, -1.0,\n            0.0, -1.0, 0.0\n            ),\n            int[](\n            1, 1, 1,\n            1, 1, 1,\n            1, 1, 1\n            )\n        ), \n\n        (vec4(o_col_sobel_x_pow)),\n        (vec4(o_col_sobel_y_pow)),\n            //sobel edge x+y\n        (\n            vec4(\n                sqrt(o_col_sobel_x_pow.x+o_col_sobel_y_pow.x),\n                sqrt(o_col_sobel_x_pow.y+o_col_sobel_y_pow.y),\n                sqrt(o_col_sobel_x_pow.z+o_col_sobel_y_pow.z),\n                sqrt(o_col_sobel_x_pow.w+o_col_sobel_y_pow.w)\n            )\n        ),\n        // emboss\n        f_o_convolved_static_3x3(\n            o_trn,\n            float[](\n               -2.0, -1.0,  0.0,\n               -1.0,  1.0,  1.0,\n                0.0,  1.0,  2.0\n            ),\n            int[](\n            1, 1, 1,\n            1, 1, 1,\n            1, 1, 1\n            )\n        ),\n        // experiment\n        fract(f_o_convolved_static_3x3(\n            o_trn,\n            float[](\n                1./9., 1./9., 1./9.,\n                1./9., 1./3., 1./9.,\n                1./9., 1./9., 1./9.\n            ),\n            int[](\n            1, 1, 1,\n            1, 1, 1,\n            1, 1, 2\n            )\n        ))\n        \n    );\n   \n    float n_len_a_o_col = float(a_o_col.length());\n    float n_idx = (o_trn_nor.x*float(n_len_a_o_col));\n    float b_mouse_down = float(iMouse.z > 0.0);\n    if(b_mouse_down == 1. && o_trn_nor.y > 0.5){\n        n_idx = (o_mouse_nor.x*float(n_len_a_o_col));\n    }\n    float n_idx_floor = floor(n_idx);\n    if(o_trn_nor.y > 0.5 && b_mouse_down != 1.){\n        n_idx_floor = mod(floor(n_idx_floor+iTime), n_len_a_o_col);\n    }\n\n    float n_line = smoothstep(0.02, 0.0, fract(n_idx));\n    fragColor = (a_o_col[int(n_idx_floor)])+vec4(n_line);\n    //fragColor = vec4(n_line);\n\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}