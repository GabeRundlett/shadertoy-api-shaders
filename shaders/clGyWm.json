{
    "Shader": {
        "info": {
            "date": "1700267251",
            "description": "Analytic derivatives for a simple field of random Gabor kernels",
            "flags": 0,
            "hasliked": 0,
            "id": "clGyWm",
            "likes": 45,
            "name": "Noise - Gabor - 2D - Deriv",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "gradient",
                "derivatives",
                "gabor"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1459
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2023 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org\n\n// Analytic derivatives for a simple field of random Gabor kernels\n\n// please never use this hash or any other fract based\n// hash in production. they are really bad.\nvec2 hash( in vec2 x )   \n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return fract( 16.0*k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nvec3 gabor_wave(in vec2 p)\n{    \n    vec2  ip = floor(p);\n    vec2  fp = fract(p);\n    \n    const float fr = 2.0*6.283185;\n    const float fa = 4.0;\n    \n    vec3 av = vec3(0.0,0.0,0.0);\n    vec3 at = vec3(0.0,0.0,0.0);\n\tfor( int j=-2; j<=2; j++ ) // can reduce this search to just [-1,1] \n    for( int i=-2; i<=2; i++ ) // if you are okey with some small errors\n\t{\t\t\n        vec2  o = vec2( i, j );\n        vec2  h = hash(ip+o);\n        vec2  r = fp - (o+h);\n\n        vec2  k = normalize(-1.0+2.0*hash(ip+o+vec2(11,31)) );\n\n        float d = dot(r, r);\n        float l = dot(r, k);\n        float w = exp(-fa*d);\n        vec2 cs = vec2( cos(fr*l), sin(fr*l) );\n        \n        av += w*vec3(cs.x, -2.0*fa*r*cs.x - cs.y*fr*k );\n        at += w*vec3(1.0,  -2.0*fa*r);\n\t}\n  //return av;\n    return vec3( av.x, av.yz-av.x*at.yz/at.x  ) /at.x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.y;\n\n    vec3 f = gabor_wave(8.0*p);\n\n    vec3 col = vec3(0.5 + 0.5*f.x);\n    if( p.y<0.5 )\n    {\n        // show analytical derivatives\n        col = 0.5 + 0.01*vec3(f.yz*8.0,0.0);\n        \n        // show low quality numerical derivatives (check correctness)\n        //col = 0.5 + 0.01*vec3(dFdx(f.x)*iResolution.y, dFdy(f.x)*iResolution.y, 0.0 );\n    }\n\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}