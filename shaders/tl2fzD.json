{
    "Shader": {
        "info": {
            "date": "1598471006",
            "description": "License CC0: Lucky buggy galaxy\nWhen trying to create a galaxy for the: once upon a time... space I mistakenly put in s when I meant sqrt(0.5) and it turned out quite cool IMHO.\n So I thought I share my mistake\n",
            "flags": 0,
            "hasliked": 0,
            "id": "tl2fzD",
            "likes": 8,
            "name": "Lucky buggy galaxy",
            "published": 3,
            "tags": [
                "2d",
                "fbm"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 552
        },
        "renderpass": [
            {
                "code": "// License CC0: Lucky buggy galaxy\n//  When trying to create a galaxy for the: once upon a time... space\n//\tI mistakenly put in s when I meant sqrt(0.5) and it turned out quite cool IMHO.\n//  So I thought I share my mistake\n\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nvec2 toRect(vec2 p) {\n  return p.x*vec2(cos(p.y), sin(p.y));\n}\n\nvoid rot(inout vec2 p, float a) {\n  float c = cos(a);\n  float s = sin(a);\n  p = vec2(c*p.x + s*p.y, -s*p.x + c*p.y);\n}\n\nfloat noise1(vec2 p) {\n  // Randomly coded \"noise\" function\n  float a = cos(p.x);\n  float b = cos(p.y);\n\n  float c = cos(p.x*sqrt(3.5));\n  float d = cos(p.y*sqrt(1.5));\n\n  return a*b*c*d;\n}\n\nfloat galaxy(vec2 p, float a, float z) {\n  // Apply angular distort, there are probably better ways to do this\n  vec2 pp = toPolar(p);\n  pp.y += pp.x*3.0 + a;\n  p = toRect(pp);\n  p *= z;\n  return noise1(p);\n}\n\nfloat height(vec2 p) {\n  // FBM with a twist (ie bug)\n  float s = 0.0;\n  float a = 1.0;\n  float f = 15.0;\n  float d = 0.0;\n  rot(p, 0.075*TIME);\n  for (int i = 0; i < 4; ++i) {\n    float g = a*galaxy(p, 0.15*float(i) + -TIME*( + 0.1*float(i)), f);\n    s += g;\n    a *= 0.5;\n    f *= s; // This is a bug that happens to look cool, intended to be sqrt(0.5) (boring), s much more fun\n    d += a;\n  }\n  \n  return 0.5 + 0.5*(s/d)*exp(-5.5*dot(p, p));\n}\n\nvec3 normal(vec2 p) {\n  vec2 eps = vec2(4.0/RESOLUTION.y, 0.0);\n  \n  vec3 n;\n  \n  n.x = height(p - eps.xy) - height(p + eps.xy);\n  n.y = 2.0*eps.x;\n  n.z = height(p - eps.yx) - height(p + eps.yx);\n  \n  return normalize(n);\n}\n\nvec3 postProcess(vec3 col, vec2 q)  {\n  col=pow(clamp(col,0.0,1.0),vec3(0.75)); \n  col=col*0.6+0.4*col*col*(3.0-2.0*col);\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);\n  col*=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n \n  vec3 lp1 = vec3(-2.0, 0.5, 2.0);\n  vec3 ld1 = normalize(lp1 - vec3(p.x, 0.0, p.y));\n  vec3 lp2 = vec3(2.0, 0.5, 2.0);\n  vec3 ld2 = normalize(lp2 - vec3(p.x, 0.0, p.y));\n\n  float h = height(p);\n  float th = tanh(h);\n  vec3 n = normal(p);\n  \n  float diff1 = max(dot(ld1, n), 0.0);\n  float diff2 = max(dot(ld2, n), 0.0);\n\n  vec3 col = vec3(0.0);\n  col += vec3(0.5, 0.5, 0.75)*h;\n  col += 0.5*pow(diff1, 10.0);\n  col += 0.25*pow(diff2, 5.0);\n  col += vec3(1.0)*pow(sin(PI/2.0*th), 5.0);\n\n  col = postProcess(col, q);\n\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}