{
    "Shader": {
        "info": {
            "date": "1710330878",
            "description": "Attempting to replicate old school analog video feedback. Will add more realistic effects in a later fork.",
            "flags": 32,
            "hasliked": 0,
            "id": "432SRD",
            "likes": 3,
            "name": "Analog Video Feedback Attempt #1",
            "published": 3,
            "tags": [
                "feedback",
                "analog"
            ],
            "usePreview": 0,
            "username": "jcarrano",
            "viewed": 158
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nmat3 proj(float g, float h)\n{\n    return mat3\n    (\n        vec3(1.01,0.01,g),\n        vec3(-0.01,0.99,h),\n        vec3(.5,.5,1.005)\n    );\n}\n\n// https://www.pcg-random.org/\nvoid pcg4d(inout uvec4 v)\n{\n\tv = v * 1664525u + 1013904223u;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v = v ^ (v>>16u);\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float g = 0.1 * cos(iTime/1.2);\n    float h = 0.1 * sin(iTime/1.0);\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    vec3 pqr = proj(g,h)*vec3(uv, 1.0);\n\n    vec4 avgValue = textureLod(iChannel0, vec2(0.5), 10.0);\n    \n    // Automatic Gain Control\n    float avg_lumi = (avgValue.r + avgValue.g + avgValue.b)/3.0;\n    float agc0 = avg_lumi-0.5;\n    float agc= 1.0 - agc0*agc0*agc0*10.0;\n    \n    // Automatic White Balance\n    vec3 wb0 = (avgValue.rgb + 0.1) / (max(avgValue.r, max(avgValue.g, avgValue.b)) + 0.1);\n    vec3 wb1 = (2.0 - sqrt(wb0)) * agc;\n    \n    \n    vec3 screen = textureProj(iChannel0, pqr).rgb;\n    \n    uvec4 seed0 = uvec4(fragCoord, uint(iFrame), (agc0+0.5)*512.0);\n    pcg4d(seed0);\n    vec3 noise = vec3(seed0.rgb%256u)/5000.0;\n    \n    \n    fragColor.rgb = pow(clamp(wb1*screen*0.98 + noise, 0.0, 1.0), vec3(1.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}