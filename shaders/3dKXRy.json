{
    "Shader": {
        "info": {
            "date": "1574314768",
            "description": "the platonic ice cream reactor",
            "flags": 0,
            "hasliked": 0,
            "id": "3dKXRy",
            "likes": 2,
            "name": "Mister Softəə",
            "published": 3,
            "tags": [
                "raymarching",
                "experiment",
                "noob"
            ],
            "usePreview": 0,
            "username": "desertsky",
            "viewed": 350
        },
        "renderpass": [
            {
                "code": "#define AA 1\nvec2 r(vec2 ax, float a){return mat2(cos(a),-sin(a),sin(a),cos(a))*ax;}\n\nfloat sdOctahedron( vec3 p, float s)\n{\n  p.xz =  r(p.xz,(-p.y*9.*sin(iTime)));\n  p.xz =  r(p.xz,sin(iTime)*6.);\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat checkers(vec2 p)\n{\n    vec2 w = fwidth(p) + .001;\n    vec2 i = 2.0*(abs(fract((p-0.5*w)*0.5/sin(iTime*0.1))-0.5)-abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    return 0.5 - 0.5*i.x*i.y;\n}\n\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n\t//p.yz = r(p.yz, .45+iTime);\n  \tvec2 q = vec2(length(p.xz)-t.x,p.y);  \n    return length(q)-t.y;\n}\n\nfloat gimbal(vec3 pos)\n{\n    vec3 t1p = pos, t2p = pos, t3p = pos; \n    t1p.xy = r(t1p.xy,.45+sin(iTime*3.)*t1p.x*1.3+iTime);\n    t2p.yz = r(t2p.yz,.45-cos(iTime*3.)*t2p.y*1.5-iTime);\n    t3p.xy = r(t3p.xy,.45+cos(iTime*3.)*t3p.z*1.7-iTime);\n    t3p.xy = r(t3p.xy,.45+sin(iTime*3.)*t3p.x*1.7+iTime);\n    float torus1 = sdTorus(t1p,vec2(.27,.0125));\n    float torus2 = sdTorus(t2p,vec2(.25,.0125));\n    float torus3 = sdTorus(t3p,vec2(.2,.0125));    \n    float gimbal = min(torus1, min(torus2, torus3));\n    return gimbal;\n}\n\n\nvec2 map(vec3 pos) \n{\n    vec3 inf = mod(pos+1.5,3.)-1.5;\n    float plane = 1.4+pos.y+sin((pos.x)/2.333+iTime+cos((pos.z)/2.333+iTime));\n\t//float plane = 3.+pos.y;\n    float oct = sdOctahedron(pos,.12);\n    \n    float g = gimbal(pos);\n    float scene = oct;\n    float MAT = 0.;\n    scene = min(scene,plane);\n\tscene = min(scene,g);\n //   \tscene = min(scene,k);\n    if(scene == oct) MAT = 1.; \n    else if(scene == plane) MAT = 0.;\n    else if(scene == g) MAT = 2.;\n    return vec2(scene, MAT);\n}\n\n\nvec2 RM(vec3 ro, vec3 rd) \n{\tfloat MAT = 0.;\n    float dO = 0.0;\n    for(int i = 0; i < 128; i++) \n    {\n    \tvec2 t = map(ro + rd* dO);\n        if (abs(t.x) < .001) break;        \n        dO+=t.x;\n        MAT = t.y;\n        if(dO > 20.) break;\n    }    \n    return vec2(dO,MAT);\n}\n\nvec3 n(vec3 pos)\n{\n    vec2 d = map(pos);\n    vec2 e = vec2(.001,.0);\n    vec3 pn = d.x - vec3(\n        map(pos-e.xyy).x,\n        map(pos-e.yxy).x,\n        map(pos-e.yyx).x\n        );\n    return normalize(pn);\n}\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) * (0.5+0.5*nor.y);\n}\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n    // bounding volume\n    float tp = (.8-ro.y)/rd.y; if( tp>0.0 ) tmax = min( tmax, tp );\n\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        float s = clamp(8.0*h/t,0.0,1.0);\n        res = min( res, s*s*(3.0-2.0*s) );\n        t += clamp( h, 0.02, 0.10 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 l(vec3 pos)\n{\n    vec3 nor = n(pos);\n\tvec3 total = vec3(0.);\n    vec3 sundir = normalize(vec3(3.,15.,0.));\n    float AO = calcAO(pos,nor);\n    total+= clamp(pow(dot(nor,sundir),.2),.0,1.)*vec3(.9,.7,.5) *AO; //sun\n\ttotal+= clamp(dot(nor,vec3(.0,1.,0.)),.0,1.)*vec3(.3,.5,.7)*.15*AO; //sky\n\ttotal+= clamp(dot(nor,-sundir),.0,1.)*vec3(.9,.7,.5)*.01*AO;//bounce\n    total*= calcSoftshadow( pos, sundir, 0.02, 2.5 );\n    return(total);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\n    vec3 ro = vec3(sin(iTime/2.),.3+sin(iTime/2.)*cos(iTime/2.)*.75,cos(iTime/2.));\n    vec3 ta = vec3(0.,0.,0.);\n    vec3 ww=normalize(ta-ro),uu=normalize(cross(ww,vec3(0.,1.,0.))), vv=normalize(cross(uu,ww));       \n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 rd = normalize(uv.x*uu + uv.y*vv + 1.5*ww);\n        \n    vec2 r = RM(ro,rd);\n    vec3 p = ro + rd * r.x;\n\n    vec3 col = vec3(0);\n\t//objects\n    if(r.x<20.)\n    {\n        \n        // octa\n        if(r.y == 1.) \n        {\n\t        //lighting\n        \tcol+=vec3(l(p));\n            \n            //reflection\n            ro = p+n(p)*.06;\n            rd = normalize(reflect(rd, n(p)));\n\t\t\tvec2 rf = RM(ro,rd);\n            vec3 prf = ro+rd*rf.x;\n            col+=l(prf)*5.*vec3(p.y,p.x,cos(iTime)*p.x*p.y);\n            \n        }\n        //gimbal\n        else if(r.y == 2.) \n        {\n\t        //lighting\n        \tcol+=vec3(l(p));\n\n            //coloring\n            col+=vec3(p.y,p.x,cos(iTime)*p.x*p.y);        \n          //plane\n        } else if (r.y == 0.) {\n            float le = smoothstep(.0,5.,p.x-.5);\n            col+=(checkers(p.xz*3.));            \n            }\n    }\n    //bg\n    else \n    {\n        float l = smoothstep(.0,5.,p.y+3.5);\n        col = mix(vec3(.5,.5,1.),vec3(.3,.5,.9),l);\n       \t//fog\ncol = mix( col, vec3(0.9), 1.0-exp( -0.001*p*p ) );\n    }\n    \n    col = pow(col,vec3(.4545));\n        //tot += col;\n      //  tot /= float(AA*AA);\n    //}\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}