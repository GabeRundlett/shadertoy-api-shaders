{
    "Shader": {
        "info": {
            "date": "1635178138",
            "description": "TheTunnel",
            "flags": 32,
            "hasliked": 0,
            "id": "7sVSRd",
            "likes": 19,
            "name": "TheTunnel",
            "published": 3,
            "tags": [
                "tunnel"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 401
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = vec4(texture(iChannel0, uv).xyz,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\nfloat seed;\nfloat rand()\n{\n    seed++;\n    return hash11(seed);\n}\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+r*uv.x+u*uv.y);\n}\n\nfloat _rsqr(vec2 uv, vec2 s, float r)\n{\n    vec2 l = abs(uv)-s;\n    return min(length(max(l, 0.)+min(max(l.x, l.y), 0.))-r, max(l.x, l.y));\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    l = abs(l)-s*.3;\n    return max(l.x, max(l.y, l.z));\n}\n\nfloat _sqr(vec2 uv, vec2 s)\n{\n    vec2 l = abs(uv)-s;\n    return max(l.x, l.y);\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(1000.,-1.);\n    \n    float tunnel = -_rsqr(p.xy, vec2(3., 1.), .4);\n    tunnel = max(tunnel, abs(p.z)-10.);\n    acc = _min(acc, vec2(tunnel, 0.));\n    \n    vec3 pc1 = p-vec3(sin(iTime*.5),.4*sin(iTime),8.+2.*sin(iTime*1.5));\n    pc1.xy *= r2d(iTime+sin(iTime*.2));\n    pc1.xz *= r2d(-iTime*.5);\n    float cubes = _cube(pc1, vec3(.4));\n    \n    acc = _min(acc, vec2(cubes, 1.));\n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.01, 0.);\n    return normalize(vec3(d)-vec3(map(p+e.xyy).x, map(p+e.yxy).x, map(p+e.yyx).x));\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i< steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n            return vec3(res.x, distance(p, ro), res.y);\n        p+= rd*res.x;\n    }\n    return vec3(-1.);\n}\n\nvec3 getEnv(vec3 rd)\n{\n    return 2.*texture(iChannel0, rd*vec3(1.,-1.,1.)*vec3(15.,15.,1.)+vec3(0.,.5,0.)).xyz*vec3(0.357,0.745,0.565);\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    \n    vec3 off = (vec3(rand(),rand(),rand())-.5)*2.;\n    vec3 ro = vec3(sin(iTime*.2),1.3,-5.)+off*.005;\n    vec3 ta = vec3(0.,1.1,6.);\n    vec3 rd = normalize(ta-ro);\n    rd = getCam(rd, uv);\n    rd = normalize(rd-off*.001);\n    vec3 res = trace(ro,rd, 256);\n    if (res.y > 0.)\n    {\n        vec3 p = ro +rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        if (res.z  == 0.)\n        {\n            vec2 uvt = vec2(atan(p.y, p.x)*7., p.z);\n        \n            vec2 rep = vec2(.5);\n            uvt = mod(uvt+rep*.5,rep)-rep*.5;\n            float carrelage = _sqr(uvt, vec2(.2));\n            vec3 tng = normalize(cross(rd, n));\n            n = normalize(n+tng*sat(carrelage*10.)*.5+texture(iChannel1, 3.*p.xy*vec2(1.,10.)).xxx*.05);\n            n = normalize(n+(vec3(rand(),rand(), rand())-.5)*.05);\n            vec3 rdrefl = normalize(reflect(rd, n));\n            vec3 resrefl = trace(p-n*0.01, rdrefl, 128);\n            if (resrefl.y > 0.)\n            {\n                col = vec3(0.075,0.427,0.427)*(1.-sat(carrelage))*.5\n                *(1.-sat(length(uv*1.)));\n            }\n            else\n                col = getEnv(rdrefl);\n        } \n    }\n    else\n        col = getEnv(rd);\n    \n    col = mix(col, vec3(0.894,0.969,0.631), pow(sat(length(col)), 25.));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    seed=texture(iChannel1,uv).x;\n    seed+=fract(iTime);\n    vec3 col = rdr(uv);\n    col = mix(col, texture(iChannel2, fragCoord/iResolution.xy).xyz, .75);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}