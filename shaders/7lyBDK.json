{
    "Shader": {
        "info": {
            "date": "1665236239",
            "description": "It has been a while since I've come here. yesterday I remembered that shader and though I wanted to tweak it a bit.\n\nThis is heavily inspired by Ether from Nimitz [https://www.shadertoy.com/view/MsjSW3]\n\noriginal : [https://www.shadertoy.com/view/tss3Rl]",
            "flags": 0,
            "hasliked": 0,
            "id": "7lyBDK",
            "likes": 5,
            "name": "ShaderDojo 011 Remix",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "antonOTI",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "// Shader Dojo by AntonMakesGames\n// Original https://www.shadertoy.com/view/tss3Rl\n\n\n#define PI 3.14159\n\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nmat2 rot(float a)\n{\n  float ca = cos(a);\n  float sa = sin(a);\n  return mat2(ca,-sa,sa,ca);\n}\n\nfloat map(vec3 p)\n{\n  vec3 cp = p;\n  float dist = 1000.;\n\n  float time = iTime * .5;\n\n  p.zx *= rot(-time * .25);\n\n  for(float it = 0.; it < 5.; it += 1.)\n{\n  p.xz *= rot(sin(p.y + time + (fract(sin(it * 2369.)))) * PI / (it + 1.) * 1.5);\n\n  p.y += p.x * .125;\n  p.zy *= rot(time);\n\n  dist  =smin(dist, length(p) - 1., .25);\n}\n\n  return dist;\n}\n\nfloat ray(inout vec3 cp, vec3 rd, out float cd)\n{\n  float st = 0.;\n  for(;st < 1.; st += 1. /64.)\n  {\n    cd = map(cp);\n    if(cd < .01)\n    {\n      break;\n    }\n    cp += rd * cd * .75;\n  }\n\n  return st;\n}\n\nvec3 normal(vec3 p)\n{\n  vec2 e = vec2(.01,.0);\n\n  return normalize(vec3(\n  map(p - e.xyy) - map(p + e.xyy),\n  map(p - e.yxy) - map(p + e.yxy),\n  map(p - e.yyx) - map(p + e.yyx)\n));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n  uv *= .35;\n\n  vec3 eye = vec3(.2,0.,-7.);\n  vec3 rd = normalize(vec3(uv, 1.));\n  vec3 cp = eye;\n\n  float cd;\n  float st = ray(cp, rd, cd);\n\n  fragColor = vec4(0.);\n  if(cd < .01)\n  {\n    vec3 norm = normal(cp);\n    vec3 li = normalize(vec3(.7,.35, 2.));\n    li.xz *= rot(sin(iTime * .125) * .5);\n    float f = pow(dot(norm, li), 4.25) * 1.1;\n    vec4 col = vec4(.76,.75,.95, 1.) * f;\n\n    col = pow(col, vec4(2.2));\n    fragColor = mix(vec4(0.), col * 1.5, f);\n  }\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}