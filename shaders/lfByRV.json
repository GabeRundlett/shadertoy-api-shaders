{
    "Shader": {
        "info": {
            "date": "1722595372",
            "description": "234ewq",
            "flags": 0,
            "hasliked": 0,
            "id": "lfByRV",
            "likes": 3,
            "name": "123rf",
            "published": 3,
            "tags": [
                "12ew"
            ],
            "usePreview": 0,
            "username": "technolodzi1",
            "viewed": 92
        },
        "renderpass": [
            {
                "code": "#define SNAKE\n#define PRESET 0 // 0-1\n\nvec2 rot(in vec2 uv, float a)\n{\n    a = radians(a);\n    float c, s;\n    c = cos(a);\n    s = sin(a);\n    return vec2(uv.x * c + uv.y * s, uv.x * -s + uv.y * c);\n}\n\nfloat period;\nvec4 f(in vec2 uv, in float radius, float radius2, float rev)\n{\n    period = 6.28 * clamp(rev, 1., 4.);\n    for (float a = 0.15; a < 100.; a += .015)\n    {\n        if (a >= period)\n            break;\n        float c = cos(a);\n        float s = sin(a);\n        float c4 = cos(4. * mix(a, sin(a - iTime), abs(sin(iTime / 10.))));\n    \tfloat p;\n        if (PRESET == 0)\n        \tp = radius * (exp(c) - 2. * c4 - pow(sin(a / 12.), 5.));\n        else\n        \tp = dot(vec2(.2,.9), vec2(c, s)) + dot(vec2(c4,.1), vec2(cos(a * radius), sin(a * radius)));\n        vec2 um = vec2(c + sin(iTime)* .15, sin(a) * cos(iTime) * 1.5);\n        #ifdef SNAKE\n        if (a - .15 > 5.6 && a - .15 < 6.)\n            um += (.1*(.4 - (6. - (a - .15))) / .4) * sin(a + iTime * 100.);\n        #endif\n        vec2 pos = uv - p * um;\n        pos *= clamp(abs(sin(iTime / 25. - 15.)) * 2., .3, 1.5);\n        float len = length(pos);\n        #ifdef SNAKE\n        if (a - .15 > 5.6 && a - .15  < 6.)\n            len -= c * 0.01;\n\n        \t/* sin(a / 4.) is the worm effect */\n        \tif (a - .15 < .2 && a - .15 > .02)\n                len = length((pos - sin(len) * vec2(.3, .0)) / vec2(-exp(a * .2) / 2., (.6 - (a - .15)) * 5.));\n        \tif (a - .15 >= .2)\n            {\n        \t\tif (len < radius2 * sin(a / 2. + .2))\n                    return vec4(vec3(pos, len), a);\n            }\n        \telse if (len < radius2 * sin((a - .15) * 10. + .8))\n        #else\n        //len = length(pos * p); /* like whip */\n        if (len < radius * sin(a / 2.))\n        #endif\n        \treturn vec4(vec3(pos, len), a);\n    }\n    return vec4(0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = 2. * fragCoord.xy / iResolution.xy - 1.;\n\tuv.x *= iResolution.x / iResolution.y;\n    uv.y += 0.2;\n    uv = rot(uv, 90.);\n    vec3 c = vec3(0);\n    vec4 b;\n    if (PRESET == 0)\n    \tb = f(uv, .2, 0.1, 1.);\n    else\n    \tb = f(uv, 2., abs(sin(iTime / 10.) * 0.4 + 0.2) * .8, 1.8);\n    if (b.z > 0.)\n    {\n        b.w -= .15;\n        #ifdef SNAKE\n    \t\tif (b.w < 5.6 && b.w > .2)\n            {\n                c = texture(iChannel0, b.xz, 0.).xyz - vec3(0, 0, .2);\n                c = mix(c, (texture(iChannel0, b.xy, 0.).x + .5) * vec3(.8), .75 * smoothstep(.5, 1., sin(texture(iChannel0, b.xy, 0.).x + b.w  * 40. + 13. * b.z)));\n            }\n    \t\telse if (b.w > .02 && b.w < 5.6)\n    \t\t\tc = texture(iChannel0, (b.xw) * 2., 0.).xyz * vec3(1.2, 1.1, .1);\n            else\n                c = texture(iChannel1, b.xz * 2., 0.).xyz + vec3(0, 0, -.2);\n    \t\tc = pow(clamp(c, 0.0, 1.0),vec3(0.65));\n            c = c * .6 + .4 * c * c * (3. - 2. * c);\n    \t\tc = mix(c, vec3(dot(c, vec3(.33))), -.5) * (1. - (b.w - 1.15) / period);\n    \t#else\n    \t\tc = normalize(b.xyz);\n    \t#endif\n    }\n    fragColor =  vec4(c, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}