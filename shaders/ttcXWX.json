{
    "Shader": {
        "info": {
            "date": "1581855631",
            "description": "Space parametrization of a rounded box, so you can map things to its exterior (say, other SDFs that you want to stamp). Note how the circles are slightly distorted. See [url=https://www.shadertoy.com/playlist/XclfRs]more shape parametrizations[/url].",
            "flags": 0,
            "hasliked": 0,
            "id": "ttcXWX",
            "likes": 26,
            "name": "Box - parametrization",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "parametrization",
                "coordinats"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1285
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Space parametrization of a rounded box. Or could also be called\n// \"rounded box\" coordinates.\n\n// List of all shape parametrizations: https://www.shadertoy.com/playlist/XclfRs\n\n\nfloat msign( in float x ) { return (x<0.0)?-1.0:1.0; }\n\n// x = local dist\n// y = local perimeter dist\n// z = total local perimeter\n// w = global distance (sdf)\nvec4 paBox( in vec2 p, \n            in vec2 b, in float r, \n            in float s )\n{\n    vec2 q = abs(p)-b;\n        \n    float l = b.x+b.y + 1.570796*r;\n    \n    float k1 = min(max(q.x,q.y),0.0) + length(max(q,0.0))-r;\n    float k2 = ((q.x>0.0)?atan(q.y,q.x):1.570796);\n    float k3 = 3.0 + 2.0*msign(min(p.x,-p.y)) - msign(p.x);\n    float k4 = msign(p.x*p.y);\n    float k5 = r*k2+max(-q.x,0.0);\n    \n    float ra = s*round(k1/s);\n    \n    float l2 = l + 1.570796*ra;\n\n    return vec4(k1-ra,\n                k3*l2+k4*(b.y+((q.y>0.0)?k5+k2*ra:q.y)),\n                4.0*l2,\n                k1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // pixel coordinates    \n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.x;\n\n    // animate segment\n    float id = floor((iTime+0.1)/3.0);\n    vec2  si = vec2(0.35,0.15) + 0.1*cos( vec2(1,2) + id*vec2(3,1) );\n    float ra = 0.15 + 0.05*sin(id*0.2);\n    \n    // distance and parametrization    \n    const float band = 0.1;\n    vec4 b = paBox( p, si, ra, band );\n\n    // base color\n    float d = b.w;\n    vec3 col = vec3(1.0,0.68,0.35) + vec3(-0.35,0.15,0.6)*step(d,0.0);\n    col *= 1.0 - 0.6*exp(-64.0*abs(d));\n    col *= 1.0-smoothstep(0.47,0.50,abs(fract(d/band)-0.5));\n\tcol *= 0.9 + 0.2*smoothstep(0.26,0.24,abs(fract(0.5*d/band+0.25)-0.5));\n    col += smoothstep(0.004, 0.002, abs(d));\n\n    // circles\n    if( d>-band*0.5 )\n    {\n\tvec2 q = b.xy;\n    q.y *= floor(b.z/band)*(band/b.z);  // optional - ensure periodicity, but break physicallity\n    q.y -= iTime*0.1;                   // animate circles\n    \n    vec2 uv = fract(q/band+0.5)-0.5;    // draw circles\n    float l = length(uv);\n    col *= 0.1 + 0.9*smoothstep(0.01,0.04,abs(l-0.35));\n    col *= 0.1 + 0.9*smoothstep(0.10,0.11,l);\n    }\n        \n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}