{
    "Shader": {
        "info": {
            "date": "1567905273",
            "description": "Foveated rendering implemented with rectangular subdivision.\nClick to enable foveation and to set the focus center.\nPress \"C\" to see the compressed intermediate image.\nTODO: filtering",
            "flags": 48,
            "hasliked": 0,
            "id": "WddGz8",
            "likes": 2,
            "name": "Simple foveated rendering",
            "published": 3,
            "tags": [
                "rendering",
                "vr",
                "foveated"
            ],
            "usePreview": 0,
            "username": "zarik5",
            "viewed": 1038
        },
        "renderpass": [
            {
                "code": "// Composition and interaction\n\n#define key_c 67\n#define key_u 85\n#define key_down(key) (texelFetch(iChannel3, ivec2(key, 0), 0).x > 0.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 sourceUV = fragCoord / iChannelResolution[0].xy;\n    \n    if (key_down(key_c)) {\n        fragColor = texture(iChannel1, fragCoord / iChannelResolution[1].xy);\n    } else if (key_down(key_u)) {\n        // todo filtering\n    } else if (iMouse.z > 0.) {\n        fragColor = texture(iChannel2, fragCoord / iChannelResolution[2].xy);\n   \t} else if (sourceUV.x < 1. && sourceUV.y < 1.) {\n        fragColor = texture(iChannel0, sourceUV);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Compressed image\n\n#define sourceSampler iChannel0\n#define uv clamp(fragCoord / iChannelResolution[0].xy / COMPRESSED_TO_SOURCE, 0., 1.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    /////show black borders/////\n    if (uv.x < 1. && uv.y < 1.001) {\n    ////////////////////////////\n    \n    \n    vec2 alignedUV = uv * COMPRESSED_TO_SOURCE;\n    vec2 edge = FOVEATION_SIZE + 4. * PADDING;\n    \n    vec2 overEdge = vec2(alignedUV.x > edge.x, alignedUV.y > edge.y);\n    vec2 overHalfEdge = vec2(alignedUV.x > edge.x / 2., alignedUV.y > edge.y / 2.);\n    \n    float sourceScale = (overEdge.x + 1.) * (overEdge.y + 1.); // [1 or 2] * [1 or 2]\n    \n    vec2 compressedOffset = 1. / 2. * vec2(overEdge.x * (1. - overHalfEdge.y),\n                                           overEdge.y * (1. - overHalfEdge.x)); // left + top\n    \n    vec2 foveationRescale = \n        1. / 2. +                                                       // |||} center\n        3. * compressedOffset +                                         // ||\\ left + top\n        overEdge.x * overHalfEdge.y + overEdge.y * overHalfEdge.x +     // |\\ right + bottom\n        overEdge.x * overEdge.y;                                        // \\ corners\n    \n    vec2 paddingCount = \n        2. +                                                            // ||} center\n        overEdge.x  * vec2(3, -1. + 2. * overHalfEdge.y - overEdge.y) + // |\\ left + right + corners\n        overEdge.y  * vec2(-1. + 2. * overHalfEdge.x - overEdge.x, 3);  // \\ top + bottom + corners\n    \n    vec2 compressedUV = (alignedUV - paddingCount * PADDING) * sourceScale +\n        FOVEATION_CENTER - foveationRescale * FOVEATION_SIZE - compressedOffset;\n\n    fragColor = texture(sourceSampler, compressedUV);\n    \n\n    /////////////////////////////\n    }\n    /////////////////////////////\n}\n\n// Although this implementation is more understandable,\n// it is bad for performance because of chained branching:\n\n//// center \n//if (alignedUV.x < edge.x && alignedUV.y < edge.y) {\n//    compressedUV = alignedUV - 2. * PADDING + FOVEATION_CENTER - FOVEATION_SIZE / 2.;\n//}\n//// left side\n//else if (alignedUV.y < edge.y / 2.) {\n//    compressedUV = (alignedUV - vec2(5., 1.) * PADDING) * 2. + FOVEATION_CENTER - FOVEATION_SIZE * vec2(2., 1. / 2.) - vec2(1. / 2., 0.);\n//}\n//// bottom side\n//else if (alignedUV.x < edge.x / 2.) {\n//    compressedUV = (alignedUV - vec2(1., 5.) * PADDING) * 2. + FOVEATION_CENTER - FOVEATION_SIZE * vec2(1. / 2., 2.) - vec2(0., 1. / 2.);\n//}\n//// right side\n//else if (alignedUV.y < edge.y) {\n//    compressedUV = (alignedUV - vec2(5., 3.) * PADDING) * 2. + FOVEATION_CENTER - FOVEATION_SIZE * 3. / 2.;\n//}\n//// top side\n//else if (alignedUV.x < edge.x) {\n//    compressedUV = (alignedUV - vec2(3., 5.) * PADDING) * 2. + FOVEATION_CENTER - FOVEATION_SIZE * 3. / 2.;\n//}\n//// corners\n//else {\n//    compressedUV = (alignedUV - 5. * PADDING) * 4. + FOVEATION_CENTER - FOVEATION_SIZE * 7. / 2.;\n//}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nconst vec2 FOVEATION_SIZE_INPUT = vec2(0.6, 0.4);\n\n\n#define SOURCE_RESOLUTION iChannelResolution[0].xy\n\n// align FOVEATION_CENTER and FOVEATION_SIZE to pixels multiple of 4 to avoid blur and artifacts\n#define FOVEATION_CENTER (vec2(ivec2(iMouse.xy / 4.) * 4) / SOURCE_RESOLUTION)\n#define FOVEATION_SIZE (vec2(ivec2(FOVEATION_SIZE_INPUT * SOURCE_RESOLUTION / 4.) * 4) / SOURCE_RESOLUTION)\n\n// padding is needed to hide stitching artifacts\n// try defining PADDING = 0 to see the stitching lines\n//#define PADDING (0.)\n#define PADDING (1. / SOURCE_RESOLUTION)\n\n// ALIGN_PIXELS is needed for GPU encoding\n// if you set this to 1 you can see that the compressed image shrinks but the foveated area do not, and the image reconstruction is not affected.\n#define ALIGN_PIXELS (16.)\n#define COMPRESSED_RESOLUTION (ceil(((1. + 3. * FOVEATION_SIZE) / 4. + 6. * PADDING) * SOURCE_RESOLUTION / ALIGN_PIXELS) * ALIGN_PIXELS)\n// 6 padding = 2+2 for 1:1 region, 1+1 for 1:2 regions\n\n// This is used to transform the uv space to allow pixel-perfect rendering\n#define COMPRESSED_TO_SOURCE (COMPRESSED_RESOLUTION / SOURCE_RESOLUTION)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Uncompressed image\n\n// iChannel0 is only needed to correctly set FOVEATION_CENTER.\n#define compressedSampler iChannel1\n#define uv clamp(fragCoord / iChannelResolution[0].xy, 0., 1.)\n\n#define demo_convert_uv(uv) ((uv) * COMPRESSED_TO_SOURCE * iChannelResolution[0].xy / iResolution.xy)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    /////show black borders/////\n    if (uv.x < 1. && uv.y < 1.) {\n    ////////////////////////////\n    \n    vec2 centeredUV = uv - FOVEATION_CENTER;\n\n    float underLeftEdge = float(centeredUV.x < -FOVEATION_SIZE.x / 2.);\n    float underBottomEdge = float(centeredUV.y < -FOVEATION_SIZE.y / 2.);\n    float overRightEdge = float(centeredUV.x > FOVEATION_SIZE.x / 2.);\n    float overTopEdge = float(centeredUV.y > FOVEATION_SIZE.y / 2.);\n    \n        \n    vec2 shiftedAbsCornerUV = abs(mod(centeredUV, 1.) - 0.5) - 0.5 + FOVEATION_SIZE / 2.;\n    float isCorner = float(shiftedAbsCornerUV.x < 0. && shiftedAbsCornerUV.y < 0.);\n    float isCenterLeftOrRightmost =  (1. - overTopEdge) * (1. - underBottomEdge) *\n        (float(centeredUV.x > -0.5) * underLeftEdge + float(centeredUV.x > +0.5));\n    float isCenterBottomOrTopmost = (1. - overRightEdge) * (1. - underLeftEdge) *\n        (float(centeredUV.y > -0.5) * underBottomEdge + float(centeredUV.y > +0.5));\n    \n    vec2 compressedOffset =\n        vec2(underLeftEdge, underBottomEdge) +\n        -1. / 2. * vec2(isCenterLeftOrRightmost, isCenterBottomOrTopmost);\n\n    vec2 foveationRescale =\n        1. / 2. +\n        underLeftEdge + underBottomEdge + overRightEdge + overTopEdge +\n        vec2(1. / 2., -1) * isCenterLeftOrRightmost + vec2(-1, 1. / 2.) * isCenterBottomOrTopmost +\n        isCorner;\n\n    float uncompressedScale =\n        (1. + underLeftEdge) * (1. + underBottomEdge) * (1. + overRightEdge) * (1. + overTopEdge);\n\n    vec2 paddingCount = \n        2. +\n        vec2(3, 1) * (underLeftEdge + overRightEdge) + vec2(1, 3) * (underBottomEdge + overTopEdge) +\n        -2. * vec2(isCenterBottomOrTopmost, isCenterLeftOrRightmost) +\n        -isCorner;\n\n    vec2 uncompressedUV = (centeredUV + FOVEATION_SIZE * foveationRescale + \n                           compressedOffset) / uncompressedScale + paddingCount * PADDING;\n    \n    fragColor = texture(compressedSampler, demo_convert_uv(uncompressedUV / COMPRESSED_TO_SOURCE));\n    \n    \n    /////////////////////////////\n    }\n    /////////////////////////////\n}\n\n// Although this implementation is more understandable,\n// it is bad for performance because of chained branching:\n\n////bottom-left corner\n//if (uv.x < leftEdge && uv.y < bottomEdge) {\n//    uncompressedUV = (centeredUV + 1. + FOVEATION_SIZE * 7. / 2.) / 4. + 5. * PADDING;\n//}\n//// left side\n//else if (uv.x < leftEdge && uv.y < topEdge) {\n//    // left-most\n//    if (centeredUV.x < - 0.5) {\n//        uncompressedUV = (centeredUV + FOVEATION_SIZE * 3. / 2. + vec2(1., 0.)) / 2. + vec2(5., 3.) * PADDING;\n//    }\n//    // center-left\n//    else {\n//        uncompressedUV = (centeredUV + FOVEATION_SIZE * vec2(2., 1. / 2.) + vec2(1. / 2., 0.)) / 2.+ vec2(5., 1.) * PADDING;\n//    }\n//}\n//// bottom side\n//else if (uv.x < rightEdge && uv.y < bottomEdge) {\n//    // bottom-most\n//    if (centeredUV.y < - 0.5) {\n//        uncompressedUV = (centeredUV + FOVEATION_SIZE * 3. / 2. + vec2(0, 1.)) / 2. + vec2(3., 5.) * PADDING;\n//    }\n//    // center-bottom\n//    else {\n//        uncompressedUV = (centeredUV + FOVEATION_SIZE * vec2(1. / 2., 2.) + vec2(0., 1. / 2.)) / 2. + vec2(1., 5.) * PADDING;\n//    }\n//}\n//// center\n//else if (uv.x < rightEdge && uv.y < topEdge) {\n//    uncompressedUV = centeredUV + FOVEATION_SIZE / 2. + 2. * PADDING;\n//}\n//// top-left corner\n//else if (uv.x < leftEdge) {\n//    uncompressedUV = (centeredUV + vec2(1., 0.) + FOVEATION_SIZE * 7. / 2.) / 4. + 5. * PADDING;\n//}\n//// bottom-right corner\n//else if (uv.y < bottomEdge) {\n//    uncompressedUV = (centeredUV + vec2(0., 1.) + FOVEATION_SIZE * 7. / 2.) / 4. + 5. * PADDING;\n//}\n//// right side\n//else if (uv.y < topEdge) {\n//    // right-most\n//    if (centeredUV.x > + 0.5) {\n//        uncompressedUV = (centeredUV + FOVEATION_SIZE * vec2(2., 1. / 2.) - vec2(1. / 2., 0.)) / 2. + vec2(5., 1.) * PADDING;\n//    }\n//    // center-right\n//    else {\n//        uncompressedUV = (centeredUV + FOVEATION_SIZE * 3. / 2.) / 2. + vec2(5., 3.) * PADDING;\n//    }\n//}\n//// top side\n//else if (uv.x < rightEdge) {\n//    // top-most\n//    if (centeredUV.y > + 0.5) {\n//        uncompressedUV = (centeredUV + FOVEATION_SIZE * vec2(1. / 2., 2.) - vec2(0., 1. / 2.)) / 2. + vec2(1., 5.) * PADDING;\n//    }\n//    // center-top\n//    else {\n//        uncompressedUV = (centeredUV + FOVEATION_SIZE * 3. / 2.) / 2. + vec2(3., 5.) * PADDING;\n//    }\n//}\n//// top-right corner\n//else {\n//    uncompressedUV = (centeredUV + FOVEATION_SIZE * 7. / 2.) / 4. + 5. * PADDING;\n//}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}