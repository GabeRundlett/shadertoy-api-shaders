{
    "Shader": {
        "info": {
            "date": "1624005318",
            "description": "Yet another shader based on the fractal generated by iterating log(-z)/log(z), but this time zooming out to infinity, forever.",
            "flags": 0,
            "hasliked": 0,
            "id": "slB3Dw",
            "likes": 7,
            "name": "natural log fractal 2",
            "published": 3,
            "tags": [
                "fractal",
                "zoom"
            ],
            "usePreview": 0,
            "username": "peabrainiac",
            "viewed": 308
        },
        "renderpass": [
            {
                "code": "/*\n * This is free and unencumbered software released into the public domain.\n * \n * Anyone is free to copy, modify, publish, use, compile, sell, or\n * distribute this software, either in source code form or as a compiled\n * binary, for any purpose, commercial or non-commercial, and by any\n * means.\n * \n * In jurisdictions that recognize copyright laws, the author or authors\n * of this software dedicate any and all copyright interest in the\n * software to the public domain. We make this dedication for the benefit\n * of the public at large and to the detriment of our heirs and\n * successors. We intend this dedication to be an overt act of\n * relinquishment in perpetuity of all present and future rights to this\n * software under copyright law.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n * \n * For more information, please refer to <http://unlicense.org/>\n */\n#define PI 3.14159265358979323846264\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    float zoom = 0.3*iTime*iTime/(iTime+2.0);\n    vec2 c = (fragCoord-0.5*iResolution.xy)/length(iResolution.xy)+vec2(0.0000001);\n    vec2 dc = vec2(1.0/length(iResolution.xy),0.0);\n    vec2 z = c;\n    vec2 dz = dc;\n    float s = 1.0/exp2(16.0);\n    int i2 = 0;\n    float total = 0.0;\n    \n    vec2 z2 = vec2(0.5*log(dot(z,z))+zoom,atan(z.y,z.x));\n    vec2 z3 = vec2(z2.x,z2.y-PI*sign(z2.y));\n    vec2 z4 = z2-z3;\n    vec2 z5 = vec2(z2.x*z2.x-z2.y*z2.y,2.0*z2.x*z2.y);\n    z5 = vec2(z.x*z5.x-z.y*z5.y,dot(z,z5.yx));\n    z4 = vec2(dot(z4,z5),z4.y*z5.x-z4.x*z5.y)/dot(z5,z5);\n    z = vec2(dot(z2,z3),z3.y*z3.x-z3.x*z2.y)/dot(z2,z2);\n    dz = vec2(dz.x*z4.x-dz.y*z4.y,dot(dz,z4.yx));\n    for (int i=0;i<999;i++){\n        vec2 z2 = vec2(0.5*log(dot(z,z)),atan(z.y,z.x));\n        vec2 z3 = vec2(z2.x,z2.y-PI*sign(z2.y));\n        vec2 z4 = z2-z3;\n        vec2 z5 = vec2(z2.x*z2.x-z2.y*z2.y,2.0*z2.x*z2.y);\n        z5 = vec2(z.x*z5.x-z.y*z5.y,dot(z,z5.yx));\n        z4 = vec2(dot(z4,z5),z4.y*z5.x-z4.x*z5.y)/dot(z5,z5);\n        z = vec2(dot(z2,z3),z3.y*z3.x-z3.x*z2.y)/dot(z2,z2);\n        dz = vec2(dz.x*z4.x-dz.y*z4.y,dot(dz,z4.yx));\n        while(dot(dz,dz)>s*dot(z,z)){\n            total += clamp(2.0*(0.7-length(z))*(0.7-length(z)),0.0,1.0);\n            s *= 2.0;\n            i2++;\n            if (i2>=20){\n                fragColor = vec4(vec3(total/float(i2)),1.0);\n                return;\n            }\n\t\t}\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}