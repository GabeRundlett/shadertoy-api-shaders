{
    "Shader": {
        "info": {
            "date": "1515440361",
            "description": "Small Sobel Test and music test",
            "flags": 98,
            "hasliked": 0,
            "id": "Ml2BDz",
            "likes": 8,
            "name": "Small Sobel Test",
            "published": 3,
            "tags": [
                "test",
                "sobel"
            ],
            "usePreview": 0,
            "username": "maniatic0",
            "viewed": 1075
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float music = texture(iChannel2, vec2(uv.y, 1.0)).r;\n    \n    float normalized_music = 1. - (0.5 * (sin(music) + 1.0));\n    \n    float test = step(.5, uv.x);\n    \n    uv.x +=  (.5 * smoothstep(.5, 1.5, uv.x) * test + (1. - test) * -.5 * (1. - smoothstep(-.5, .5, uv.x))) * normalized_music ;\n    //uv = mod(uv, 1.0);\n    \n\tfragColor = texture(iChannel1, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 13055,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/carlosinfante10/the-peddler-and-the-little-red-cap"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec2 res;\nvec2 inv_res;\n\n\nfloat luminance(vec4 color_in) {\n\treturn 0.25 * color_in.r + 0.5 * color_in.g + 0.25 * color_in.b;\n}\n\nfloat luminance(sampler2D texture_in, vec2 uv, float bias) {\n\tvec4 sample_color = texture(texture_in, uv, bias);\n\treturn luminance(sample_color);\n}\n\nfloat luminance(sampler2D texture_in, vec2 uv) {\n\treturn luminance(texture_in, uv, 0.0);\n}\n\n\nconst mat3 YCoCr_mat = mat3(\n\t1./4., 1./2., 1./4.,\n    -1./4., 1./2., -1./4.,\n    1./2., 0.0, -1./2.\n);\n\nvec3 YCoCr(vec3 color_in) {\n\treturn YCoCr_mat * color_in;\n}\n\nvec3 YCoCr(sampler2D texture_in, vec2 uv) {\n\treturn YCoCr(texture(texture_in, uv).xyz);\n}\n    \n\nconst mat3 sx = mat3( \n    1.0, 2.0, 1.0, \n    0.0, 0.0, 0.0, \n   -1.0, -2.0, -1.0 \n);\nconst mat3 sy = mat3( \n    1.0, 0.0, -1.0, \n    2.0, 0.0, -2.0, \n    1.0, 0.0, -1.0 \n);\n\n\nfloat calc_sobel_res(mat3 I) {\n\tfloat gx = dot(sx[0], I[0]) + dot(sx[1], I[1]) + dot(sx[2], I[2]); \n\tfloat gy = dot(sy[0], I[0]) + dot(sy[1], I[1]) + dot(sy[2], I[2]);\n\n\treturn sqrt(pow(gx, 2.0)+pow(gy, 2.0));\n}\n\n\n// Sobel\n// Based on https://computergraphics.stackexchange.com/questions/3646/opengl-glsl-sobel-edge-detection-filter\nvec3 sobel(vec2 uv) {\n    mat3 Y;\n    mat3 Co;\n    mat3 Cr;\n    \n    vec3 temp; \n    for (int i=0; i<3; i++) {\n        for (int j=0; j<3; j++) {\n        \tvec2 pos = uv + vec2(float(i-1) * inv_res.x, float(j-1) * inv_res.y);\n            temp = YCoCr(iChannel0, pos);\n            Y[i][j] = temp.x;\n            Co[i][j] = temp.y;\n            Cr[i][j] = temp.z;\n\t    }\n\t}\n    \n\treturn vec3(calc_sobel_res(Y), calc_sobel_res(Co), calc_sobel_res(Cr));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uv_mirror_x = vec2(1. - uv.x, uv.y);\n    \n    res = vec2(textureSize(iChannel0, 0));\n    inv_res = vec2(1.) / res;\n    \n\t//fragColor = vec4(vec3(YCoCr(iChannel0, uv_mirror_x).xyz), 1.0);\n    //fragColor = vec4((texture(iChannel0, uv_mirror_x).xyz + sobel(uv_mirror_x))/2., 1.0);\n    vec3 sobe_edge = sobel(uv_mirror_x);\n    fragColor = vec4(sobe_edge, 1.0);\n    \n    //fragColor = vec4(vec3(clamp((sobe_edge.x + sobe_edge.y + sobe_edge.z)/3., 0.0, 1.0)), 1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}