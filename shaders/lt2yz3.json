{
    "Shader": {
        "info": {
            "date": "1509593680",
            "description": "fun with channel sorting and nearest neighbor feedback",
            "flags": 32,
            "hasliked": 0,
            "id": "lt2yz3",
            "likes": 13,
            "name": "wacky pixels",
            "published": 3,
            "tags": [
                "generative",
                "feedback"
            ],
            "usePreview": 0,
            "username": "victor_shepardson",
            "viewed": 1308
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// LICENSE:\n// Creative Commons Attribution 4.0 International License.\n// https://creativecommons.org/licenses/by/4.0/\n\nconst float pi = 3.14159;\nvec3 samp(vec2 p){\n    //return texture(iChannel0, fract(p/iResolution.xy)).rgb;\n    p = fract(p/iResolution.xy)*iResolution.xy;\n    return texelFetch(iChannel0, ivec2(p), 0).rgb;\n}\nvec3 fivept(vec2 uv, float d){\n    const vec3 p = vec3(1.,-1.,0.);\n    vec3 c = samp(uv);\n    vec3 e = samp(uv+d*p.zx);\n    vec3 w = samp(uv+d*p.zy);\n    vec3 n = samp(uv+d*p.xz);\n    vec3 s = samp(uv+d*p.yz);\n    vec3 mu = (c+e+s+n+w)/5.;\n    vec3 d_c = (c-mu)*(c-mu);\n    vec3 d_e = (e-mu)*(e-mu);\n    vec3 d_w = (w-mu)*(w-mu);\n    vec3 d_n = (n-mu)*(n-mu);\n    vec3 d_s = (s-mu)*(s-mu);\n    vec3 sigma = sqrt((d_c+d_e+d_w+d_n+d_s)/4.);\n    return (2.*(c-mu)*(.5-sigma)+mu);\n}\nvec3 color_mid2max(vec3 x){\n    // (for nonnegative x) adds mid to max channel and zeros mid channel\n    vec3 t = x;\n    for(int i=0;i<3;i++){\n        if(t.r > t.g && t.r > t.b){\n            if(t.g < t.b){\n                x.r+=x.b;\n                x.b=0.;\n            } else {\n                x.r+=x.g;\n                x.g=0.;\n            }\n        }\n        x = x.grb;\n        t = t.grb;\n    }\n    return x;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float ff = 1.75; //\n    float fb = -1.; //\n    float fsv = 0.01; //\n    float m2 = sin(pi*iTime/30.)*.4+.6;//0.05;\n    float m1 = 0.003;\n    float m0 = 0.995;\n    float octaves = 1.;//(1.-cos(pi*iTime/100.))*1.;//\n    vec2 uv = fragCoord.xy;\n    vec3 sv = sin(vec3(1.,2.,1.)*pi*uv.yyx/iResolution.yyx)-1.;\n    vec3 c = vec3(0.);//(sv*.5+1.)*1.;\n    if (iTime<2.){\n        fragColor = vec4(c, 1.);\n        return;\n    }\n    vec3 c0 = samp(uv);\n    vec3 c1 = samp(uv+=cos(2.*pi*vec2(c0.g, c0.g+0.25)));\n    vec3 c2 = samp(uv+=cos(2.*pi*vec2(c0.r+0.75, c0.r+0.5)));\n    c = fivept(uv, pow(2., c0.b*octaves));\n    c = c.gbr;\n    c = mix(c2, c, m2);\n    c = fract(ff*c + fb*c1 + fsv*sv);\n    c = color_mid2max(c);\n    c = mix(c1, c, m1);\n    c = mix(c0, c, m0);\n    fragColor = vec4(c, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}