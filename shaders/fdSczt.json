{
    "Shader": {
        "info": {
            "date": "1643911015",
            "description": "procgen pixel art test - given up on it for now, might reuse some techniques later\n\nCleaner buffer A:\nhttps://www.shadertoy.com/view/flsfWr",
            "flags": 32,
            "hasliked": 0,
            "id": "fdSczt",
            "likes": 3,
            "name": "Pixel Art Test",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 242
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 dim = dim(iTime);\n    vec3 col = vec3(0.);\n    \n    float sf = dim.y / (iResolution.y - 64.);\n    \n    vec2 offset = 0. * vec2(0, sf * (24. * cos(0.8 * iTime) - 4.));\n    vec2 coord = floor( sf * fragCoord + offset);\n    //coord -= ceil(sf * 0.5 * iResolution.xy - 0.5 * dim); // idk if this is optimal\n    \n    vec3 A = texelFetch( iChannel0,  ivec2(coord) , 0 ).rgb;\n    float B = texelFetch( iChannel1,  ivec2(coord) , 0 ).x;\n    \n    float d = length(coord + 0.5 - ceil(0.5 * dim)); //??   \n   // if (coord.x >= dim.x || coord.y >= dim.y)\n    //    B = 0.;\n    \n    float sd = step(d, 0.5 * dim.x);\n    float sb = step(length(A), 0.);\n    \n    //B *= sd * sb;\n    B = smoothstep(0., 1., B);\n    B = smoothstep(0., 1., B);\n    B *= 1. - coord.y / dim.y;\n    \n    B = ceil(5. * B) / 5.;\n    vec3 e = vec3(0.8);//0.5 + 0.5 * thc(3., iTime));\n    \n    float diag = 0. * -0.2 * ceil(-2. * (coord.x + coord.y)/dim.x) / 2.;\n    vec3 bcol = sd * sb * pal(diag + 0.38 * B, e, e, e, .5 * vec3(0.,0.33,0.66));\n    \n    //B = step(0.5, B);\n    col += bcol;\n    \n  //  col \n    //e *= 0.15;\n    col += step(0.001, A.y) * pal(diag + 0.5 * B, e, e, e, .5 * vec3(0., 0.33, 0.66));\n    col += A.x;\n    //col += (1.-A.x) * 0.1;\n    col += B * (1.-sd);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// dimensions of sprite - has to be less than screen dimensions, evens only\n//#define dim { return vec(16); }\n\n#define reset 60.\n\n#define pi 3.14159\n\nvec2 dim(float t) {\n    return vec2(2. * ceil(10. + 6. * cos(t)));\n}\n\nfloat thc(float a, float b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nfloat ths(float a, float b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec2 thc(float a, vec2 b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nvec2 ths(float a, vec2 b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\n// (SdSmoothMin) stolen from here: https://www.shadertoy.com/view/MsfBzB\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float circle(vec2 fragCoord, vec2 dimm) {\n    float k = ceil(0.5 * dimm.x);\n\n    float d = length(fragCoord - 0.5 * dimm);\n    float v = step(d, k);\n    \n    float v1 = v - step(length(fragCoord - vec2(1,0)  - 0.5 * dimm), k);\n    float v2 = v - step(length(fragCoord - vec2(-1,0) - 0.5 * dimm), k);\n    float v3 = v - step(length(fragCoord - vec2(0,1)  - 0.5 * dimm), k);\n    float v4 = v - step(length(fragCoord - vec2(0,-1) - 0.5 * dimm), k);\n         \n    return max(max(v1, v2), max(v3, v4));\n}\n\nvec2 edge(vec2 p) {\n    vec2 p2 = abs(p);\n    if (p2.x < p2.y) return vec2((p.x < 0.) ? -1. : 1., 0);\n    else             return vec2(0., (p.y < 0.) ? -1. : 1.);\n}\n\nfloat getInnerOutline(vec2 fragCoord, vec2 dimm) {\n    float d = length(fragCoord - 0.5 * dimm);\n    float v = step(d, ceil(0.5 * dimm.x));\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 coord )\n{\n    vec2 dim = dim(iTime);\n    vec3 col = vec3(0.);\n    if (coord.x < dim.x && coord.y < dim.y) {\n        \n       // outer circle\n       float v = circle(coord, dim);\n      \n       // inner circle (based off outer circle, so they align)\n       // inspired from here: https://www.youtube.com/watch?v=I8fmkLK1OKg\n       vec2 c = abs(coord - 0.5 * dim); \n       vec2 dir;\n       if (c.x <= c.y) dir = vec2(0, (coord.y <= 0.5 * dim.y) ? 1. : -1.);\n       else            dir = vec2((coord.x <= 0.5 * dim.x) ? 1. : -1., 0);          \n       float v2 = circle(coord - dir, dim);\n       \n       //v *= pow(coord.y / dim.y, 1.);\n       v2 *= coord.y / dim.y;\n        \n       float st = 5.;\n       v = ceil(st * v) / st;\n       v2 = ceil(st * v2) / st;\n\n\n       col = vec3(v, v2, 0);\n    }\n\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// ( Most of this code was stolen from iq somewhere )\n\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\n// generate mirrored noise\nvoid mainImage( out vec4 fragColor, in vec2 coord )\n{\n    vec2 dim = dim(iTime);\n    // uncomment iTime for a cool look\n    vec2 uv = vec2(abs(coord.x - 0.5 * dim.x), coord.y)\n            + 20. * floor(float(iFrame) / float(reset));// + iTime;\n \n\tfloat f = 0.0;\n\t\n\tuv *= 0.01;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\tf =  0.5000 * noise( uv ); uv = m*uv;\n    f += 0.2500 * noise( uv ); uv = m*uv;\n\tf += 0.1250 * noise( uv ); uv = m*uv;\n\tf += 0.0625 * noise( uv ); uv = m*uv;\n\t\n\tf = 0.5 + 0.5 * f;\n\n    fragColor = vec4(f);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}