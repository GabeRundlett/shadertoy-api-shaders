{
    "Shader": {
        "info": {
            "date": "1716143969",
            "description": "Initial experimentation with GLSL",
            "flags": 0,
            "hasliked": 0,
            "id": "XXc3z4",
            "likes": 2,
            "name": "Strip Central",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "grahf",
            "viewed": 110
        },
        "renderpass": [
            {
                "code": "vec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d)\n{\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvec3 fadePalette(float t, float time, float fadeSpeed)\n{\n    // First palette\n    vec3 a1 = vec3(0.5, 0.5, 0.5);\n    vec3 b1 = vec3(0.5, 0.5, 0.5);\n    vec3 c1 = vec3(1.0, 1.0, 0.5);\n    vec3 d1 = vec3(0.80, 0.90, 0.30);\n\n    // Second palette\n    vec3 a2 = vec3(0.8, 0.5, 0.4);\n    vec3 b2 = vec3(0.2, 0.4, 0.2);\n    vec3 c2 = vec3(2.0, 1.0, 1.0);\n    vec3 d2 = vec3(0.00, 0.25, 0.25);\n\n    // Compute the interpolation factor using a sine wave\n    float factor = 0.5 * (1.0 + sin(time * fadeSpeed)); // Adjust fadeSpeed to control fade duration\n\n    // Interpolate between the two palettes\n    vec3 a = mix(a1, a2, factor);\n    vec3 b = mix(b1, b2, factor);\n    vec3 c = mix(c1, c2, factor);\n    vec3 d = mix(d1, d2, factor);\n\n    return palette(t, a, b, c, d);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize the coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Determine the number of strips\n    float numStrips = (75.0 + (sin(iTime * 0.2) * 50.0));\n\n    // Calculate the width/height of each strip\n    float stripSize = 1.0 / numStrips;\n\n    // Calculate the rotation angle\n    float angle = iTime * 0.03;\n\n    // Rotate the coordinates\n    vec2 rotatedUV = vec2(\n        uv.x * cos(angle) - uv.y * sin(angle),\n        uv.x * sin(angle) + uv.y * cos(angle)\n    );\n\n    // Determine the strip index based on the rotated coordinates\n    float stripIndex = floor(rotatedUV.x / stripSize);\n\n    // Calculate a unique time offset for each strip\n    float timeOffset = stripIndex * 0.5;\n\n    // Evolving zoom effect using a combination of sine waves\n    float zoom = 1.0 + 0.2 * sin(iTime * 0.2 + stripIndex) +\n                       0.1 * sin(iTime * 0.5 + stripIndex * 0.5) +\n                       0.05 * sin(iTime * 1.2 + stripIndex * 0.2);\n    vec2 zoomedUV = uv * zoom;\n\n    // Create a gradient color based on the uv coordinates, time, and time offset\n    vec3 color = 0.5 + 0.5 * cos(iTime + timeOffset + zoomedUV.xyx + vec3(0, 2, 4));\n\n    // Add fractal element using fract() function\n    vec2 fractalCoords = fract(zoomedUV * 10.0);\n    vec3 fractalColor = vec3(fractalCoords, 0.5 + 0.5 * sin(iTime * 0.3));\n\n    // Combine gradient color and fractal element\n    vec3 finalColor = mix(color, fractalColor, 0.5);\n\n    // Output the final color\n    float fadeSpeed = 0.17; // Adjust this value to control the speed of the fade\n    vec3 col = fadePalette(length(zoomedUV) * sin(iTime * 0.1), iTime, fadeSpeed);\n    fragColor = vec4(mix(col, finalColor, 0.1), 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}