{
    "Shader": {
        "info": {
            "date": "1650463892",
            "description": "Done during revision 2020 Mack's DJ set",
            "flags": 96,
            "hasliked": 0,
            "id": "7tByDy",
            "likes": 4,
            "name": "mackjam_af",
            "published": 3,
            "tags": [
                "fractal",
                "revision",
                "techno",
                "jam"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 328
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n\tfragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n#define FFTI(a) iTime\n//texture(texFFTIntegrated, a).x\n#define FFTS(a) (texture(iChannel1, vec2(a, 0.)).x)\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n\nvec2 _min(vec2 a, vec2 b)\n{\n  if (a.x < b.x)\n    return a;\n  return b;\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n  vec3 l = abs(p)-s;\n  return max(l.x, max(l.y, l.z));\n}\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c);}\n\nfloat _cucube(vec3 p, vec3 s, vec3 th)\n{\n    vec3 l = abs(p)-s;\n    float cube = max(max(l.x, l.y), l.z);\n    l = abs(l)-th;\n    float x = max(l.y, l.z);\n    float y = max(l.x, l.z);\n    float z = max(l.x, l.y);\n    \n    return max(min(min(x, y), z), cube);\n}\n\nvec2 map(vec3 p)\n{\n  vec3 op = p;\n  vec2 acc = vec2(10000.,-1.);\n  \n  acc = _min(acc, vec2(length(p+vec3(0.,0.,-15.))-1., 0.));\n \n  p.xz *= r2d(.5*sin(.1*p.y));\n  p.xz += vec2(sin(iTime), cos(iTime*75.1+p.y*.1))*1.;\n  float rad = 20.;\n  vec3 pdart = p+vec3(0.,FFTI(.05)*20.+iTime*85.,0.);\n  float adart = atan(pdart.z, pdart.x);\n  float stpdart = PI*2./20.;\n  float sector = mod(adart+stpdart*.5,stpdart)-stpdart*.5;\n  pdart.xz = vec2(sin(sector), cos(sector))*length(pdart.xz);\n  float repyd = 15.;\n  float idda = floor((pdart.y+repyd*.5)/repyd);\n//  pdart.xz *= r2d(idda);\n  float rada = mix(10.,20.,sin(idda)*.5+.5);\n  pdart -= vec3(0.,45.,rada);\n  pdart.y = mod(pdart.y+repyd*.5,repyd)-repyd*.5;\n  float dart = _cube(pdart, vec2(.1,5.).xxy);\n  acc = _min(acc, vec2(length(pdart-vec3(0.,0.,-5.))-0.25,-1.));\n  \n  acc = _min(acc, vec2(dart, 0.));\n  \n  vec3 pcube = p;\n  float stpcube = PI*2./40.;\n  float sectorcube = mod(adart+stpcube*.5,stpcube)-stpcube*.5;\n  pcube.xz = vec2(sin(sectorcube), cos(sectorcube))*length(pcube.xz);\n  float repyc = .5;\n  float radb = mix(10.,20.,sin(repyc)*.5+.5);\n  pcube -= vec3(0.,0.,radb);\n\n  pcube.y = mod(pcube.y+repyc*.5,repyc)-repyc*.5;\n  acc = _min(acc, vec2(_cube(pcube, vec3(.5,.2,2.)), 1.));\n  \n  float tunnel = -(length(p.xz)-rad);\n  acc = _min(acc, vec2(tunnel, 0.));\n  \n  vec3 pcc = op-vec3(0.,55.,0.);\n  pcc.xz *= r2d(iTime);\n  pcc.yz *= r2d(.5*iTime);\n  acc = _min(acc, vec2(_cucube(pcc-vec3(0.,15.,0.), vec3(1.), vec3(.01)), -5.));\n  \n  return acc;\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n  float fov = 1.;\n  vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n  vec3 u = normalize(cross(rd, r));\n  return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n  vec2 e = vec2(0.01,0.);\n  return normalize(vec3(d)-vec3(map(p-e.xyy).x,map(p-e.yxy).x,map(p-e.yyx).x)); \n}\nvec3 accLight;\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n  accLight = vec3(0.);\n  vec3 p  = ro;\n  for (int i = 0; i < steps; ++i)\n  {\n    vec2 res = map(p);\n    if (res.x < 0.01)\n      return vec3(res.x, distance(p, ro), res.y);\n    if (res.y < 0.)\n      accLight += (vec3(172, 38, 235)/255.)*0.1+vec3(sin(distance(p, ro)*1.+iTime)*.5+.5, .5, .1)*(1.-sat(res.x/5.5))*.2;\n\n    p+=rd*res.x*.5;\n  }\n  return vec3(-1.);\n}\n\nvec3 rdr(vec2 uv)\n{\n  vec3 background = vec3(212, 140, 32)/255.;\n  vec3 col = background;\n  \n  vec3 ro = vec3(0.,-5.,-5.);\n  vec3 ta = vec3(0.,25.,0.);\n  vec3 rd = normalize(ta-ro);\n  \n  rd = getCam(rd, uv);\n\n  float depth = 150.;\n  vec3 res = trace(ro, rd, 128);\n  if (res.y > 0.)\n  {\n    depth = res.y;\n    vec3 p = ro+rd*res.y;\n    vec3 n = getNorm(p, res.x);\n    col = n*.5+.5;\n    \n    col = (vec3(23, 24, 51)/255.)*sat(dot(normalize(vec3(n.x, -1., n.z)), n));\n  }\n  col += accLight;\n  col = mix(col, vec3(0.), 1.-sat(exp(-depth*depth*0.0001)));\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy-.5*iResolution.xy)/iResolution.xx;\n  \n  uv *= r2d(-iTime*.5);\n  uv = abs(uv);\n  uv -= vec2(.2+uv.y, 0.);\n  uv *= r2d(.1*iTime);\n  //uv = abs(uv);\n float stp = .1*length(uv);\n  uv = floor(uv/stp)*stp;\n  \n  uv -= vec2(.25);\n  //uv *= r2d(FFTI(.1)*10.);\n // uv = abs(uv);\n  \n  vec3 col = rdr(uv);\n  \n  col *= 1.-sat(length(uv));\n  //col = mix(col, vec3(199, 242, 58)/255., 1.-pow(sat(length(col)),8.));\n  col = pow(col, vec3(1.45));\n  //col *= vec3(199, 242, 58)/255.;\n  float beat = 1./8.;\n  col += (mod(iTime, beat)/beat)*sat(FFTS(.1)*col)*45.;\n  col = mix(col, texture(iChannel0, fragCoord.xy/iResolution.xy).xyz, .5);\n  col.xy *= r2d(iTime);\n  col = abs(col);\n\tfragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 28782,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/instinktlab/juri-heidemann-snura-original?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}