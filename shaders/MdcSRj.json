{
    "Shader": {
        "info": {
            "date": "1460207160",
            "description": "Glowing microscopic worms? Maybe?",
            "flags": 0,
            "hasliked": 0,
            "id": "MdcSRj",
            "likes": 14,
            "name": "Wormhood",
            "published": 3,
            "tags": [
                "distancefields"
            ],
            "usePreview": 0,
            "username": "finalman",
            "viewed": 866
        },
        "renderpass": [
            {
                "code": "const int MAX_STEPS = 200;\nconst int NUM_SPHERES = 12;\n\nfloat sphere(vec3 pos, float radius, vec3 smpl)\n{\n    return length(pos - smpl) - radius;\n}\n\nfloat plane(vec3 dir, float offset, vec3 smpl)\n{\n    return dot(dir, smpl) + offset;\n}\n\nfloat dfDist(vec3 smpl)\n{\n    float T1 = 10.0;\n    float T2 = 2.0 * T1;\n    \n    float result = 10000.0;\n    \n    smpl.y += sin(smpl.z * 0.2 + iTime) * sin(iTime * 1.33)\n              + sin(smpl.x * 0.3 + iTime) * sin(iTime * 3.22)\n              + sin(smpl.x * 0.5 + smpl.z * 0.22 + iTime) * sin(iTime * 2.22 + smpl.z * 0.1);\n    float o = floor((smpl.z + T1) / T2);\n    smpl.x += o * 7.0;\n    smpl.xz = mod(smpl.xz + T1, T2) - T1;\n    \n    for (int i = 0; i < NUM_SPHERES; i++)\n    {\n        float t = float(i) / float(NUM_SPHERES);\n        float n = t + iTime * 0.25 + o * 0.5;\n        vec3 pos = vec3(sin(n * 5.0) * 5.0, cos(n * 3.0) * 9.0, cos(n * 2.0) * 3.0 + 5.0);\n        float radius = texture(iChannel0, vec2(t*t)).x * 2.0 + 1.4;\n        result = min(result, sphere(pos, radius, smpl));\n    }\n    \n    result = min(result, plane(vec3(0, -1, 0), 10.0, smpl));    \n    result = min(result, plane(vec3(0, 1, 0), 10.0, smpl));    \n    \n    return result;\n}\n\nvec3 dfNormal(vec3 smpl)\n{\n    const float E = 0.04;\n    \n    float d0 = dfDist(smpl);\n    float dX = dfDist(smpl + vec3(E, 0, 0));\n    float dY = dfDist(smpl + vec3(0, E, 0));\n    float dZ = dfDist(smpl + vec3(0, 0, E));\n    \n    return normalize(vec3(dX - d0, dY - d0, dZ - d0));\n}\n\nfloat dfOcclusion(vec3 smpl, vec3 normal)\n{\n    float N = 1.0;\n    return clamp(dfDist(smpl + normal * N) / N, 0.0, 1.0);\n}\n\nfloat trace(inout vec3 pos, vec3 dir, out vec3 normal)\n{\n    int steps = 0;\n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        steps++;\n        float d = dfDist(pos);\n        pos += d * dir * 1.0;\n        \n        if (d < 0.001)\n        {\n            break;\n        }\n    }\n    \n    normal = dfNormal(pos);\n    return float(steps) / float(MAX_STEPS);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 opos = vec3(4.5,sin(iTime * 0.4) * 3.0 + 2.0,-7.0 + iTime * 3.0);\n    vec3 pos = opos;\n    vec3 dir = normalize(vec3((fragCoord.x - iResolution.x * 0.5) / iResolution.y, fragCoord.y / iResolution.y - 0.5, 1.0));\n    vec3 normal;\n    \n    float steps = trace(pos, dir, normal);\n    float occ = dfOcclusion(pos, normal);\n    float fogAmt = 1.0 - exp(-distance(opos, pos) * 0.01);\n    vec3 fogCol = vec3(0.2, 0.14, 0.18);\n    \n    vec3 diffuse = vec3(0.4, 0.5, 0.6) * dot(normal, normalize(vec3(1.0, 0.3, -1.0)));\n    vec3 ambient = vec3(0.4, 0.2, 0.1);\n    vec3 color = (ambient + diffuse) * vec3(1.0 - steps) + pow(1.0 - occ, 1.5) * vec3(1.0, 0.9, 0.8) * 0.8;\n    \n    \n    color = mix(color, fogCol, fogAmt);\n    color = (1.0 - exp(-color * 1.5)) * 1.3;\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}