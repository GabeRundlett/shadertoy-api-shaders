{
    "Shader": {
        "info": {
            "date": "1726962281",
            "description": "https://www.nts.live/infinite-mixtapes/labyrinth",
            "flags": 32,
            "hasliked": 0,
            "id": "432cz1",
            "likes": 1,
            "name": "Save the planet",
            "published": 3,
            "tags": [
                "kopimi"
            ],
            "usePreview": 0,
            "username": "klchhh",
            "viewed": 56
        },
        "renderpass": [
            {
                "code": "void mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    \n    \n    //fragColor = vec4(1.0);\n    fragColor *= 0.75 + 0.25 * (0.5 + 0.5 * step(0.5, fract(fragCoord.y / 4.0)));\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float beam (vec2 p, vec2 c, float a) {\n    p-= c;\n    p = vec2(cos(a) * p.x - sin(a) * p.y, sin(a) * p.x + cos(a) * p.y);\n    \n\n    return p.y;\n}\n\nfloat demo (vec2 p) {\n    float d = 999.0;\n    \n    float r = beat * 3.141592 / 16.0;\n    \n    p = abs(p);\n    p = vec2(cos(r) * p.x - sin(r) * p.y, cos(r) * p.y + sin(r) * p.x);\n    \n    \n    \n    p = fract(p * 4.0);\n    \n    \n    d = min(d, beam(p, 0.1 * vec2(cos(3.14 * beat / 2.0), sin(3.1415 * beat / 3.0)), beat * 3.141592));\n    return d;\n}\n\n\nvec3 scene(vec2 p) {\n    vec3 col = vec3 (1.0);\n    \n    col *= step(0.0, demo(p));\n    col = max(col, 1.0 - step(0.0, length(p) - 0.5));\n    \n    col = min(col, 1.0 - step(0.0, length(p) - 1.0));\n    \n    \n    return col;\n}\n\n\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.0);\n    \n    vec2 p = uv * 2.0 - 1.0;\n    p = p * iResolution.xy / iResolution.yy;\n    \n    col = scene(p);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = (uv - 0.5) * 2.0 + 0.5;\n    \n    vec3 col = texture(iChannel0, uv).rgb;\n    col = fract(col - 1.0 / vec3(2.0, 4.0, 6.0) * beat) * (1.0 - step(col.r, col.g + col.b));\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv_fdb = uv - 16.0 * (uv - 0.5) / iResolution.xy;\n    \n    \n    float msk = texture(iChannel0, uv).r;\n    vec3 tex = texture(iChannel3, uv).rgb;\n    vec3 fdb = texture(iChannel1, uv_fdb).rgb;\n    \n    fdb = fract(fdb + vec3(1.0, 4.0, 7.0) / 256.0);\n    \n    vec3 col = mix(fdb, tex, msk);\n    //col = tex;\n    \n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define BPM 128.0\n#define beat (iTime / 60.0 * BPM)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float sdBox (vec3 p, vec3 b) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat scene(vec3 p) {\n    float d = 1000.0;\n    \n    float r_y = beat * 3.141592; \n    float r_x = beat / 6.0 * 3.141592; \n    \n    p.xz = vec2(cos(r_y) * p.x - sin(r_y) * p.z, sin(r_y) * p.x + cos(r_y) * p.z);\n    p.yz = vec2(cos(r_x) * p.y - sin(r_x) * p.z, sin(r_x) * p.y + cos(r_x) * p.z);\n    \n    d = sdBox(p, vec3(0.1, 0.1, 0.1));\n    \n    return d;\n}\n\nvec3 normal(vec3 p) {\n    vec2 e = vec2(0.01, 0.0);\n    return normalize(vec3(\n        scene(p + e.xyy) - scene(p - e.xyy),\n        scene(p + e.yxy) - scene(p - e.yxy),\n        scene(p + e.yyx) - scene(p - e.yyx)\n    ));\n}\n\nvec3 trace(vec3 o, vec3 d) {    \n    for (int n = 0; n < 64; n++) {\n        o += d * scene(o);\n    }\n    \n    return o;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 p = vec3(0.0, 0.0, -1.0);\n    vec3 d = normalize(vec3((uv - 0.5) * 2.0 * iResolution.xy / iResolution.yy, 1.0));\n    \n    p = trace(p, d);\n    \n    vec3 col = abs(normal(p)) *  step(-0.01, -scene(p));\n\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}