{
    "Shader": {
        "info": {
            "date": "1610194053",
            "description": "simple grid punk",
            "flags": 0,
            "hasliked": 0,
            "id": "wtcyDs",
            "likes": 3,
            "name": "grid punk",
            "published": 3,
            "tags": [
                "cooltablegridsimple"
            ],
            "usePreview": 0,
            "username": "fofod",
            "viewed": 329
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xx -.5);\n\t//vec2 uv = (fragCoord.xy / iResolution.xx - 0.5)ï¼›\n\t float c = 0.02;\n         uv.y+=.22;\n\tuv*= abs(cos(iTime) + 1.);\n\n\tuv*= mat2(sin(iTime),cos(iTime),-cos(iTime),sin(iTime));\n\tvec3 p = vec3(uv,1.0);\n\tc = .3/length(uv);\n\tvec3 mask = fract(p*10.);\n\tvec3 mask1 = fract(p*100.);\n\t// mask*= vec3(1.,0.,0.);\n\tif(mask.x > .05 && mask.y > .05) {\n\t\tmask = vec3(0.);\n\t} else {\n\t\tmask = vec3(1.)*c;\n\t}\n\tif(mask1.x > .05 && mask1.y > .05) {\n\t\tmask1 = vec3(0.);\n\t} else {\n\t\tmask1 = vec3(1.)*c;\n\t}\n\tmask += mask1;\n\tvec3 col = mask * abs(sin(iTime)) * vec3(p +.3);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}