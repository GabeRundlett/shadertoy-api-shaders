{
    "Shader": {
        "info": {
            "date": "1634252962",
            "description": "Top is HemiMaxN 2x8bit\nBottom is HemiOct  2x8bit\n\nThese are for encoding only the top hemisphere, for example they both could be used for encoding a 2 channel normal map or a skydome\n\nSee : https://gist.github.com/Niadb/794ea32f856820bc7e4f5a67c4246791\n",
            "flags": 0,
            "hasliked": 0,
            "id": "sddSWs",
            "likes": 3,
            "name": "Hemi Maxn vs Hemi Oct Normals",
            "published": 3,
            "tags": [
                "normals",
                "compression",
                "hemioct",
                "hemimaxn"
            ],
            "usePreview": 0,
            "username": "Dain",
            "viewed": 541
        },
        "renderpass": [
            {
                "code": "//Hemi Oct is from: https://jcgt.org/published/0003/02/01/paper.pdf\n//HemiMaxn is alternative encoding I found\n\n//See this gist for code and compares them: https://gist.github.com/Niadb/794ea32f856820bc7e4f5a67c4246791\n//they have very similar average and maximum error\n\n//HemiOct is more accurate around z == 1\n//While HemiMaxn is more accurate along the diagnals and near z == 0\n\n/*\nError results for 2x8bit encodings\n\nUsing 4 million Fib points:\n\t\t Mean Error:  \n\t\t MaxN 0.23557  \n\t\t Oct  0.239541 \n\t\t Winner MaxN by Ratio 0.98342\n\t\n\t\t Max Error: \n\t\t MaxN 0.547869  \n\t\t Oct  0.548226 \n\t\t Winner MaxN by Ratio 0.999349\n         \n Using 4 million lat/long points:\n\t\t Mean Error:\n\t\t MaxN 0.235312\n\t\t Oct  0.23831\n\t\t Winner MaxN by Ratio 0.987419\n         \n\t\t Max Error:\n\t\t MaxN 0.545722\n\t\t Oct  0.548226\n\t\t Winner MaxN by Ratio 0.995432\n         \n\t My hemi oct results are very close to this papers https://jcgt.org/published/0003/02/01/paper.pdf\n\t HemiOct16  Mean error 0.24000   Max Error 0.55112\n     \n     As far as encode/decode time, HemiMaxn is less instructions in both cases, and should be slightly faster.\n\t HemiOct decode: 4 arith + 2 abs + normalize\n\t HemiMaxn decode: 2 abs + 1 max + 1 arith + normalize\n*/\n\n\n//The comparision & rendering code is taken from IQs Normal Comparison: https://www.shadertoy.com/view/llfcRl\n\n\n\n//-------------------------------------------------------------------------------------------\nuint   packSnorm2x12(vec2 v) { uvec2 d = uvec2(round(2047.5 + v*2047.5)); return d.x|(d.y<<12u); }\nuint   packSnorm2x8( vec2 v) { uvec2 d = uvec2(round( 127.5 + v* 127.5)); return d.x|(d.y<< 8u); }\nvec2 unpackSnorm2x8( uint d) { return vec2(uvec2(d,d>> 8)& 255u)/ 127.5 - 1.0; }\nvec2 unpackSnorm2x12(uint d) { return vec2(uvec2(d,d>>12)&4095u)/2047.5 - 1.0; }\n\n\n\nuint euclidean_to_hemi_maxn(in vec3 e) {\n\tfloat d = max(abs(e.x), abs(e.y));\n\tfloat sz = 1.0/(abs(e.z) + (d));   //could drop the abs(z)\n\tvec2 o = e.xy * sz;\n    return packSnorm2x8(o);\n}\nvec3 hemi_maxn_to_euclidean(uint c) {\n    vec2 e= unpackSnorm2x8(c);\n    float z = 1.0 - max(abs(e.x), abs(e.y));\n\treturn normalize(vec3(e,z));\n}\n\nuint hemi_octahedral_16( in vec3 nor )\n{\n    nor.xy *=  1.0/( abs( nor.x ) + abs( nor.y ) + abs( nor.z ) );//could drop the abs(z)\n \n    return packSnorm2x8(vec2(nor.x + nor.y, nor.x-nor.y));\n}\n\nvec3 i_hemi_octahedral_16( uint data )\n{\n    vec2 e = unpackSnorm2x8(data);\n    \n    vec2 temp = vec2(e.x + e.y, e.x - e.y) ;\n\tvec3 v = vec3(temp, 2.0 - abs(temp.x) - abs(temp.y));\n\treturn normalize(v);;\n}\n\n// The MIT License\n// Copyright Â© 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Encoding surface normals, which are 96 bits normally (pun!), into 16, 24 and 32 bits\n// (6x, 4x and 3x compression respectively). Similar by Aras' blog post\n//\n// http://aras-p.info/texts/CompactNormalStorage.html\n//\n// but more complete hopefully.\n//\n// Left to Right: Direct, ZIgnore, Cube Spherical, Spheremap and Octahedral encoding. \n// Top is 16 bits, middle is 24 bits, bottom is 32 bits. See at full screen for best comparison.\n//\n// Error Color Encoding:   blue = 0.0, red = 0.5 degrees\n// \n//\n// Octaheral compression with different bitrates: https://www.shadertoy.com/view/Mtfyzl\n//\n// You can compare ithese to Fibonacci projection here: https://www.shadertoy.com/view/4t2XWK\n\n\n\n// undef this to try a different shape\n//#define SPHERES\n//-------------------------------------------------------------------------------------------\n\n//----\n\n//=============================================================\n\nfloat map( vec3 p )\n{\n    p.x *= 0.8;\n    p *= 2.6;\n    p.xyz += 1.000*sin(  2.0*p.yzx );\n    //p.xyz -= 0.500*sin(  4.0*p.yzx );\n    float d = length( p.xyz ) - 1.5;\n\treturn d * 0.15;\n}\n\n\nfloat intersect( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 4.0;\n\n\tfloat precis = 0.001;\n    float h = 1.0;\n    float t = 1.0;\n    for( int i=0; i<256; i++ )\n    {\n        if( (h<precis) || (t>maxd) ) break;\n\t    h = map( ro+rd*t );\n        t += h;\n    }\n\n    if( t>maxd ) t=-1.0;\n\treturn t;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    // from Paul Malin (4 samples only in a tetrahedron\t\n    vec2 e = vec2(1.0,-1.0)*0.002;\n    return normalize( e.xyy*map( pos + e.xyy ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ) );\n}\n\n//============================================================\n#define AA 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    \n    for( int j=0; j<AA; j++ )\n    for( int i=0; i<AA; i++ )\n    {\n        vec2 off = vec2(i,j)/float(AA) - 0.5;\n        \n        vec2  uv = vec2(1.0,2.0)*(fragCoord+off)/iResolution.xy;\n        ivec2 cx = ivec2(uv);\n        int   id = cx.y + cx.x;\n        vec2  px = uv - vec2(cx);\n\n        float anim = cos( 0.15*iTime + 2.2 );\n        float zoom = smoothstep( 0.2, 0.5, anim ); \n        float serr = smoothstep( 0.85, 0.9, abs(anim) ); \n\n\n        //-----------------------------------------------------\n        // camera\n        //-----------------------------------------------------\n        vec2  p = (-1.0+2.0*px) * 4.6 / (vec2(6.0*iResolution.y,3.0*iResolution.x)/iResolution.y);\n        vec3 ro = vec3(0.0,0.3*zoom,2.9);\n\n        vec3 ta = vec3(0.0,0.0,0.0);\n\n        vec3 rd = normalize( vec3(p.xy,-2.0-6.0*zoom) );\n\n        vec3 col = vec3(0.0);\n\n        //-----------------------------------------------------\n        // intersect geometry\n        //-----------------------------------------------------\n        #ifdef SPHERES\n        float b = dot( ro, rd );\n        float c = dot( ro, ro ) - 1.0;\n        float h = b*b - c;\n        #else\n        float h = intersect( ro, rd );\n        #endif\n        if( h>0.0 )\n        {\n            #ifdef SPHERES\n            // compute intersection\n            float t = -b - sqrt( h );\n            // compute normal\n            vec3 nor = normalize( ro + t*rd );\n            #else\n            vec3 pos = ro + h*rd;\n            vec3 nor = calcNormal( pos );\n            #endif\n\n            //-----------------------------------------------------\n            // compress/encode and decompress/decode normal\n            //-----------------------------------------------------\n            uint data = 0u;\n            vec3 mor = vec3(0.0);\n\n           if( id== 1 ) { data = euclidean_to_hemi_maxn( nor );     mor = hemi_maxn_to_euclidean( data );} //Top \n            else { data = hemi_octahedral_16( nor );       mor = i_hemi_octahedral_16( data );} //Bottom\n\n            //-----------------------------------------------------\n            // render reflection\n            //-----------------------------------------------------\n\n            vec3 ref = reflect( rd, mor );\n            col = texture(iChannel2,ref).xyz;\n\n            if( p.x>0.0 )\n            {\n                col = 0.4 + 0.4*ref + 32.0*pow( clamp(dot(ref,vec3(0.5773)),0.0,1.0), 128.0 );\n            }\n\n            // error\n            float err = acos(dot(mor,nor));\n            err = clamp( err/radians(0.5), 0.0, 1.0 );\n            col = mix( col, 0.5 - 0.5*cos( sqrt(err)*3.1416 + vec3(0.0,2.0,4.0) ), serr );\n\n            // a bit of shading...\n            col *= abs(mor.z);\n        }\n        tot += col;\n    }   \n    tot /= float(AA*AA);\n    \n    fragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}