{
    "Shader": {
        "info": {
            "date": "1706389568",
            "description": "De-golfed and added some cool parameters to play with, including a color palette. I guess I ought to make it audio-reactive now...",
            "flags": 0,
            "hasliked": 0,
            "id": "XfBSDm",
            "likes": 15,
            "name": "Disco Godrays - Redux",
            "published": 3,
            "tags": [
                "raymarching",
                "ray",
                "rays",
                "fog",
                "rotation",
                "god",
                "neon",
                "short",
                "density"
            ],
            "usePreview": 1,
            "username": "OmarZRG",
            "viewed": 339
        },
        "renderpass": [
            {
                "code": "// Fork by OmarZRG of \"Disco Godrays\" by @kishimisu (2023) - https://www.shadertoy.com/view/Dt33RS\n//-Parameters-------------------------------------------------------------------------------------------\n    // Ray marching\n#define MAX_STEPS 55.\n#define MAX_DIST 3.\n#define BEAM_LENGTH 2.\n#define PRECISION 0.001\nfloat roX = 0.,             // Camera position (ray origin) sorta working but it skews the geometry\n      roY = 0.,\n      roZ = 0.;\n    // Fun values - roughly normalized 0 to 1 (could be cool to vary these by time or sound/mouse input)\nfloat timeScale = 0.33,     // Scales 'Ts'\n      softenAmt = 0.22,     // Godray 'un-focus' effect\n      rayTaper = -0.13,     // Positive values taper inward, negative values spread out\n      colorShift = 0.13,    // Effect of ray distance 't' on palette index offset\n      colorSpeed = 0.42,    // Speed of cycle through palette (fraction of 'Ts')\n      holeSpacing = 0.5;\n#define holeSize (holeSpacing / 6.)\n#define RAY_WIDTH 0.17\n#define BALL_SIZE 1.\n    // Tuning\n#define ZOOM 1.\n#define CONTRAST 1.0     // 0-1\n#define INTENSITY 1.0      // 0-1\n#define NOISE_AMT 0.4         // 0-1\n#define BACKGROUND .00001    // Background brightness\n\n    // Color palette - generate values here: http://erkaman.github.io/glsl-cos-palette/\n#define PALETTE(t) cosPalette(t,vec3(0.52,0.17,0.41),vec3(0.57,0.72,0.75),vec3(0.96,0.32,0.84),vec3(0.55,0.11,0.26))\n\n//-Functions--------------------------------------------------------------------------------------------\n\n    // Palette function\nvec3 cosPalette(float t, vec3 a, vec3 b, vec3 c, vec3 d) { return a + b * cos(6.28318 * (c * t + d) ); }\n    // Macros\n#define pi 3.14159265358979323846\n#define Ts iTime * timeScale\n#define sinT(freq) float (sin(Ts * pi * freq) * 0.5) + 0.5 //Normalized sin of 'Ts'\n#define M(p) p *= mat2(cos(round((atan( p.x, p.y ) + Ts) / holeSpacing) * holeSpacing - Ts + vec4(0, 33, 11, 0) ) );\n#define S(a, b, t) smoothstep(a, b, t)\n\n//-Image------------------------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, vec2 fragCoord ) {\n    // Initialization\n    vec4 col;\n    vec2 R = iResolution.xy,\n         uv = (fragCoord - R / 2. ) / R.y,      // Normalized uv (0 to 1)\n         m = (iMouse.xy - R / 2. ) / R.y;       // Normalized mouse coordinates\n    vec3 ro = vec3(roX, roY, roZ),      // ray origin ('camera' position)\n         rd = normalize(vec3(uv, (.5 * ZOOM) ) ); // ray direction, one per uv coord\n    float d = PRECISION,  // starting value of 'd' must be >= 'PRECISION', seems not to matter otherwise... May be able to simplify...\n          t, l, i;\n\n    for( fragColor *= i; i++ < MAX_STEPS;\n        t -= d  = min( max(l, -d ),\n                    0.025 / INTENSITY + texture(iChannel0, fragCoord / 1024. ).r * NOISE_AMT / 10. ) )\n    {\n        vec3 p = ro + rd * t;\n        p = t / length(p ) * p - (2. / iResolution);\n\n        // Matrix rotation (macro)\n        M( p.zx )\n        M( p.yx )\n        \n        if (d < PRECISION || length(p) > MAX_DIST) break;   // Break loop if too close or too far\n\n        // Set Color\n        //col.rgb = fragColor.rgb;      // Neat bug with this uncommented - trypophobia warning ;)\n        vec3 palette = PALETTE( sinT(colorSpeed) - t * colorShift );\n        col.rgb +=  palette * S( 1., 0., (d = length(p.yz ) - holeSize )\n                                / (softenAmt / 8.) + (0.15 / RAY_WIDTH) + (5. * rayTaper * l) )\n                  * palette * S( BEAM_LENGTH, 0., l = length(p) - (1. * BALL_SIZE) ) + BACKGROUND;\n    }\n\n    col.rgb *= exp(t * (CONTRAST * 0.5));\n    col.a = 1.;     // Belt and suspenders, but could set alpha for Cineshader\n    fragColor = vec4(pow(col.rgb,vec3(1. / 2.2)), col.a);   // Gamma\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}