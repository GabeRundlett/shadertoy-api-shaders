{
    "Shader": {
        "info": {
            "date": "1698715683",
            "description": "ring light: https://www.shadertoy.com/view/mtyGWy\nboxes: https://www.shadertoy.com/view/cdKBDy\nxy = p.x / p.y :: secret sauce",
            "flags": 0,
            "hasliked": 0,
            "id": "cdKfW3",
            "likes": 4,
            "name": "Boxes and Rings",
            "published": 3,
            "tags": [
                "rings"
            ],
            "usePreview": 0,
            "username": "ElSolem",
            "viewed": 122
        },
        "renderpass": [
            {
                "code": "// https://iquilezles.org/articles/palettes/\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvec4 applyAlakazan(vec2 uv0) {\n    vec3 finalColor = vec3(0.0);\n\n    for (float i = 0.0; i < 4.0; i++) {\n        uv0 = fract(uv0 * 1.5) - 0.5;\n\n        float d = length(uv0) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i * 0.4 + iTime * 0.4);\n\n        d = sin(d * 8.0 + iTime) / 8.0;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n\n        finalColor += col * d;\n    }\n\n    return vec4(finalColor, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Convert pixel coordinates to a normalized range (-1 to 1)\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / min(iResolution.y, iResolution.x);\n\n    // Calculate the value of xy using your equation\n    float xy = p.x / p.y;\n\n    // Define a threshold for plotting the point\n    float threshold = 2.0;\n\n    if (abs(xy) < abs(threshold)) {\n        vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n        fragColor = applyAlakazan(uv);\n    } else {\n        int i;\n        for (vec2 c = iResolution.xy, u = (roundEven(fragCoord) - c * 0.5) / c.y, p, z = p + 2e1;\n             z.x < 1e2 && (i = int(p) ^ int(p.y) ^ int(z)) % 93 % 43 < 32;\n             p = u * z + iTime * vec2(2, 9)) {\n            c = fract(-p * sign(u)) / abs(u);\n            z += min(min(c, c.yx), fract(-z)) + 2e-5;\n            fragColor.rgb = (1e2 - z.x) * (2.0 - cos(vec3(i /= 3, i + 5, i + 4)));\n        }\n\n        fragColor /= 2e2 + fwidth(fragColor.g) * 5e2;\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}