{
    "Shader": {
        "info": {
            "date": "1513700444",
            "description": "Another \"egg\" (no.3)",
            "flags": 0,
            "hasliked": 0,
            "id": "MtsBWX",
            "likes": 9,
            "name": "Golden Dolphin",
            "published": 3,
            "tags": [
                "reflect",
                "egg",
                "shell",
                "gliier"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 656
        },
        "renderpass": [
            {
                "code": "// \"Golden Dolphin\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrEllipsDf (vec3 p, vec3 r);\nfloat PrEllips2Df (vec3 p, vec2 r);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltDir, qHit;\nvec2 opCs;\nfloat tCur, dstFar, opPhs, fishAngI;\nint idObj;\nconst float pi = 3.14159;\n\nfloat FishDf (vec3 p)\n{\n  vec3 q;\n  float dMin, dBodyF, dBodyB, dMouth, dFinT, dFinP, dFinD, dEye, d, szFac;\n  szFac = 0.6;\n  p /= szFac;\n  p.x = abs (p.x);\n  p.z -= 2.;\n  p.yz = Rot2D (p.yz, 0.2 * fishAngI);\n  q = p;\n  q.z -= -0.6;\n  dBodyF = PrEllipsDf (q, vec3 (0.7, 0.8, 2.4));\n  q = p;\n  q.z -= -1.2;\n  q.yz = Rot2D (q.yz, fishAngI);\n  q.z -= -1.6;\n  dBodyB = PrEllipsDf (q, vec3 (0.35, 0.5, 2.5));\n  q.z -= -2.2;\n  q.yz = Rot2D (q.yz, 2. * fishAngI);\n  q.xz -= vec2 (0.5, -0.5);\n  q.xz = Rot2D (q.xz, 0.4);\n  dFinT = PrEllipsDf (q, vec3 (0.8, 0.07, 0.4));\n  q = p;\n  q.yz -= vec2 (-0.3, 1.7);\n  q.yz = Rot2D (q.yz, 0.1);\n  q.y = abs (q.y) - 0.04;\n  dMouth = PrEllipsDf (q, vec3 (0.25, 0.12, 0.6));\n  q = p;\n  q.yz -= vec2 (0.7, -1.);\n  q.yz = Rot2D (q.yz, 0.6);\n  dFinD = PrEllipsDf (q, vec3 (0.05, 1., 0.35));\n  q = p;\n  q.xy = Rot2D (q.xy, 0.8);\n  q.xz -= vec2 (0.7, -0.1);\n  q.xz = Rot2D (q.xz, 0.6);\n  dFinP = PrEllipsDf (q, vec3 (0.9, 0.04, 0.3));\n  q = p;\n  q -= vec3 (0.4, -0.1, 1.1);\n  dEye = PrEllipsDf (q, vec3 (0.11, 0.15, 0.15));\n  idObj = 1;\n  qHit = q;\n  dMin = SmoothMin (dBodyF, dBodyB, 0.3);\n  dMin = SmoothMin (dMin, dFinT, 0.1);\n  dMin = SmoothMin (dMin, dMouth, 0.15);\n  dMin = SmoothMin (dMin, dFinD, 0.02);\n  dMin = SmoothMin (dMin, dFinP, 0.02);\n  if (dEye < dMin) { idObj = 2;  qHit = q; }\n  dMin = SmoothMin (dMin, dEye, 0.01);\n  return dMin * szFac;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qHitA;\n  float dMin, d, r, radH, radV, w;\n  int idObjA;\n  dMin = dstFar;\n  radH = 4.;\n  radV = 3.;\n  w = 0.1;\n  q = p;  q.z += radH;\n  d = PrCapsDf (q.yzx, 0.25, 0.95);\n  if (d < dMin) { dMin = d;  idObj = 4;  qHit = q; };\n  q.yz = Rot2Cs (q.yz, opCs);\n  q.y = abs (q.y);\n  q.yz = Rot2Cs (q.yz, opCs);\n  q.z -= radH;\n  r = radH + 0.1 * (1. - q.y / length (q)) * cos (32. * atan (q.x, q.z));\n  d = max (PrEllips2Df (q.xzy, vec2 (r, radV) + w), - PrEllips2Df (q.xzy, vec2 (r, radV) - w));\n  d = max (d, - q.y);\n  if (d < dMin) { dMin = d;  idObj = 3;  qHit = q; };\n  idObjA = idObj;\n  qHitA = qHit;\n  q = p;  q.y -= -0.5 + 2. * opPhs;\n  q.xz = Rot2D (q.xz, 0.1 * pi * tCur);\n  d = FishDf (q);\n  if (d < dMin) { dMin = d;  idObjA = idObj;  qHitA = qHit; }\n  idObj = idObjA;\n  qHit = qHitA;\n  q = p;  q.y -= -radV + 1.5 + 2. * opPhs;\n  d = PrCylDf (q.xzy, 2.3, 0.1);\n  if (d < dMin) { dMin = d;  idObj = 5;  qHit = q; };\n  q = p;  q.y -= -0.5 * (radV - 2. * opPhs);\n  d = PrCylDf (q.xzy, 0.05, 0.5 * (radV - 0.5 + 2. * opPhs));\n  q = p;  q.y -= - radV + 0.1;\n  d = min (d, PrCylDf (q.xzy, 0.5, 0.05));\n  if (d < dMin) { dMin = d;  idObj = 6; };\n  return 0.9 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 160; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0005, -0.0005);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstObj, s;\n  bool isLit, isRefl;\n  opPhs = 0.9 * SmoothBump (0.2, 0.8, 0.15, mod (0.2 * tCur, 1.));\n  opCs = vec2 (cos (0.25 * pi * opPhs), sin (0.25 * pi * opPhs));\n  fishAngI = 0.15 * sin (pi * tCur);\n  isRefl = false;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar && idObj == 5 && qHit.y > 0. && length (qHit.xz) < 2.25) {\n    ro += dstObj * rd;\n    rd = reflect (rd, vec3 (0., 1., 0.));\n    ro += 0.01 * rd;\n    dstObj = ObjRay (ro, rd);\n    isRefl = true;\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    isLit = false;\n    if (idObj == 1) {\n      col = 1.2 * vec3 (0.8, 0.75, 0.2) * (1. - 0.2 * smoothstep (-0.5, -0.4, vn.y));\n    } else if (idObj == 2) {\n      if (length (qHit.yz - vec2 (-0.02, 0.05)) < 0.05) {\n        col = vec3 (1., 0.1, 0.1);\n        isLit = true;\n      } else col = vec3 (0.4, 0.7, 0.2);\n    } else if (idObj == 3) {\n      s = length (qHit / vec3 (4., 3., 4.));\n      col = (s > 1. || qHit.y < 0.05) ? vec3 (0.8, 0.75, 0.2) :\n         mix (vec3 (0.7, 0.7, 0.9), vec3 (0.2, 0.2, 0.8), smoothstep (0.5, 1.5, 3. - qHit.y) *\n         smoothstep (0.96, 0.98, s));\n      if (s > 1.) vn = VaryNf (64. * qHit, vn, 0.5);\n    } else if (idObj == 4) {\n      col = vec3 (0.8, 0.75, 0.2) * (1. - 0.5 * SmoothBump (0.05, 0.1, 0.02, mod (4. * qHit.x, 1.)));\n    } else if (idObj == 5 || idObj == 6) {\n      col = vec3 (0.8, 0.75, 0.2);\n    }\n    if (! isLit) col = col * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n       0.1 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 128.);\n    else col *= (0.5 - 0.5 * dot (rd, vn));\n    if (! isRefl && (idObj == 1 || idObj == 3 && s > 1.)) col += 256. * pow (clamp (0.5 +\n       0.5 * dot (ltDir, reflect (rd, vn)), 0., 1.), 16.) *\n       pow (1. - 0.6 * abs (dot (normalize (ltDir - rd), VaryNf (1024. * qHit, vn, 2.))), 8.);\n  } else {\n    col = vec3 (0.6, 0.6, 1.) * (0.05 + 0.245 * (rd.y + 1.) * (rd.y + 1.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = pi;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 3. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.6 * pi * (2. * mod (floor (0.04 * tCur), 2.) - 1.) *\n       SmoothBump (0.25, 0.65, 0.1, mod (0.04 * tCur, 1.));\n    el -= 0.05 * pi * sin (0.05 * pi * tCur);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 2.8, -30.);\n  rd = vuMat * normalize (vec3 (uv, 4.5));\n  dstFar = 100.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nfloat PrEllipsDf (vec3 p, vec3 r)\n{\n  return (length (p / r) - 1.) * min (r.x, min (r.y, r.z));\n}\n\nfloat PrEllips2Df (vec3 p, vec2 r)\n{\n  return (length (p / r.xxy) - 1.) * min (r.x, r.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}