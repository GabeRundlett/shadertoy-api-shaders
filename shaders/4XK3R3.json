{
    "Shader": {
        "info": {
            "date": "1718000035",
            "description": "/*originals \ncombination from many sources I’m just learning myself\n\nMIT LICENSE\n*/\n",
            "flags": 0,
            "hasliked": 0,
            "id": "4XK3R3",
            "likes": 1,
            "name": "spiral plus color",
            "published": 3,
            "tags": [
                "fractal",
                "spiral",
                "color",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 299
        },
        "renderpass": [
            {
                "code": "/*originals \ncombination from many sources I’m just learning myself\n\nMIT LICENSE\n*/\n\n\n\n#define resolution iResolution.xy\n#define time iTime\n#define TAU 6.2831853071\n\nfloat circle(vec2 uv, vec2 pos, float radius){\n    float px = length(1./iResolution.xy);\n    return smoothstep(px, 0., distance(uv, pos)-radius);\n}\n#define NUM_OCTAVES 7\n#define PI 3.1415926535897932384626433832795\n// Permute function for vec4\nvec4 permute(vec4 x) { \n    return mod(((x*34.0)+1.0)*x, 289.0); \n}\n\n// Fade function for vec3\nvec3 fade(vec3 t) {\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n\nconst float PI2 = acos(-1.0);\nconst float TAU2 = PI2 * 2.0;\nconst float phi = sqrt(5.0) * 0.5 + 0.5;\n\nconst float goldenAngle = TAU / phi / phi;\n\n\n\nvec2 rotateAroundPoint(float x){\n\treturn vec2(sin(x), cos(x));\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\t\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 calculateGoldenShape(vec2 p){\n\tconst int steps =256;\n\tconst float rSteps = 1.0 / float(steps);\n\t\n\tvec3 result = vec3(0.0);\n\t\n\tfor (int i = 0; i < steps; ++i)\n\t{\n\t\tfloat n = float(i);\n\t\t\n\t\tfloat inc = n * rSteps;\n\t\tvec2 offset = rotateAroundPoint(fract(-time*0.055)*6.28+n * goldenAngle*sin(time*0.005)) * inc * 0.45;\n\t\t\n\t\tvec3 dist = vec3(distance(p, offset));\n\t\t     dist = exp2(-dist * 64.0) * hsv2rgb(vec3(fract(time*0.2)+inc*0.75, 1.0, 1.0));\n\t\t\n\t\tresult = max(result, dist);\n\t}\n\t\n\treturn result;\n}\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * gl_FragCoord.xy - resolution) / resolution.y;\n\t\n\tvec3 col = vec3(0.);\n\t uv = ( fragCoord - 0.5* iResolution.xy ) / iResolution.y;\n     vec4 O = fragColor;\n     vec2 C = fragCoord ;\n   O=vec4(0);\n   \n   vec2 position = (gl_FragCoord.xy / resolution.xy - 0.5) * vec2(resolution.x/ resolution.y, 1.0);\n\n\tvec3 color = vec3(0.0);\n\t     color += calculateGoldenShape(position) * 3.0;\n\t     color = pow(color, vec3(2.2));\n\t     color /= color + 1.0;\n\t     color = pow(color, vec3(1.0 / 2.2));\n    vec3 n1,q,r2=iResolution,\n    d=normalize(vec3((C*2.-r2.xy)/r2.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        n1=g*d;\n       n1.xy*=mat2(cos(iTime*0.55),sin(iTime*0.55),-sin(iTime*0.5),cos(iTime*0.55));\n        n1.xz*=mat2(cos(iTime*0.55),sin(iTime*0.55),-sin(iTime*0.55),cos(iTime*0.55));\n        n1.yz*=mat2(cos(iTime*0.55),sin(iTime*0.55),-sin(iTime*0.55),cos(iTime*0.55));\n        a=10.;\n        n1=mod(n1-a,a*2.)-a;\n        s=6.;\n        for(int i=0;i++<8;){\n            n1=.3-abs(n1);\n            \n            n1.x<n1.z?n1=n1.zyx:n1;\n            n1.z<n1.y?n1=n1.xzy:n1;\n            n1.y<n1.x?n1=n1.zyx:n1;\n            \n            s*=e=1.4+sin(iTime*.234)*.1;\n            n1=abs(n1)*e-\n                vec3(\n                    5.+cos(iTime*.3+.5*cos(iTime*.3))*3.,\n                    120,\n                    8.+cos(iTime*.5)*5.\n                 );\n         }\n       //  g+=e=length(p.yz)/s;\n         g+=e=length(n1.yx)/s;\n    }  \n    float t = iTime*0.7; // \n    float amt = min(sin(TAU/4.0)*1.5, 1.0) + floor(t) + 1.0;\n    \n    float sum = 0.0;\n    \n    float spacing = 0.2;\n    \n    float turn = TAU/amt;\n    for(float i=0.; i<amt; i++){\n        sum = mix(sum,1.-sum,circle(uv, vec2(cos(i*turn), sin(i*turn))*spacing, 0.3));\n    }\n\n  \n\tfloat r = .1;\n\tfor (float i = 0.; i < 8.; i++) {\n\t\t\n\t\t\n\t\tfloat a = atan(uv.x, uv.y) + time * i / 10.;\n\t\tfloat n = 6.28 / 8.;\n\t\ta = mod(a, n) - n / 2.;\n\t\tfloat l = length(uv);\n\t\t\n\t\tvec2 p = l * vec2(cos(a), sin(a));\n\t\t\t\n\t\tp.x -= .1 + i * .05;\n\t\tfloat d = length(p);\n\t\t\n\t\tr *= (.5 + .5 * cos(time + l * 10.))*sum;\n\t\tcol += smoothstep(r + .01, r, d)*color;\n\t\t\n\t}\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}