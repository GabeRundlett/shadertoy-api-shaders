{
    "Shader": {
        "info": {
            "date": "1445463142",
            "description": "Updated https://www.shadertoy.com/view/XdBSDh# to blend over the original texture image.",
            "flags": 0,
            "hasliked": 0,
            "id": "XljXz3",
            "likes": 29,
            "name": "Shining Supernova",
            "published": 3,
            "tags": [
                "rays",
                "texture",
                "light",
                "shine"
            ],
            "usePreview": 1,
            "username": "hassoncs",
            "viewed": 2270
        },
        "renderpass": [
            {
                "code": "// Updated from https://www.shadertoy.com/view/XdBSDh#\n\n#define SPEED       (1.0 / 80.0)\n#define SMOOTH_DIST 0.6\n\n#define PI 3.14159265359\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // set up our coordinate system\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 uv = ((fragCoord.xy / iResolution.xy) - vec2(0.5,0.5));\n    uv.x *= aspectRatio;\n    \n\t// get our distance and angle\n    float dist = length(uv);\n    float angle = (atan(uv.y, uv.x) + PI) / (2.0 * PI);\n    \n   \t// texture lookup\n    vec3 textureDist;\n    textureDist  = texture(iChannel0, vec2(iTime * SPEED, angle)).xyz;\n    \n    vec3 normal = texture(iChannel0, uv).xyz;\n    \n    // manipulate distance\n    textureDist *= 0.4;\n    textureDist += 0.5;\n    \n    // set RGB\n\tvec3 color = vec3(0.0,0.0,0.0);\n    \n    if (dist < textureDist.x)\n        color.x += smoothstep(0.0,SMOOTH_DIST, textureDist.x - dist);\n\n    if (dist < textureDist.y)\n        color.y += smoothstep(0.0,SMOOTH_DIST, textureDist.y - dist);\n    \n    if (dist < textureDist.z)\n        color.z += smoothstep(0.0,SMOOTH_DIST, textureDist.z - dist);\n    \n    // add a background grid\n    //if (fract(mod(uv.x,0.1)) < 0.005 || fract(mod(uv.y,0.1)) < 0.005)\n    //    color.y += 0.5;\n    //else\n    //    color.y += 0.1;\n    \n    // set final color\n\tfragColor = vec4(color + normal,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}