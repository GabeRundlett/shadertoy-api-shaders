{
    "Shader": {
        "info": {
            "date": "1705569331",
            "description": "Animated reproduction of this image : https://www.themoviedb.org/t/p/original/7zCuB0JE5M5VOOW7k8CEyJP0Zw.jpg\nI could not find who made this (several sources point to \"Marcus from Kuala Lumpur\" but meh that's not very precise)",
            "flags": 0,
            "hasliked": 0,
            "id": "DtcBWs",
            "likes": 9,
            "name": "Là haut",
            "published": 3,
            "tags": [
                "animated",
                "colored",
                "balloon",
                "movie",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "Saimon",
            "viewed": 165
        },
        "renderpass": [
            {
                "code": "/* \"Là haut\"\n * I wanted to practice GLSL and the primitives describe in https://thebookofshaders.com/07/\n * so I started looking for art images to try to reproduce.\n * This one is part of my practice serie, it is based on this image: \n * https://image.tmdb.org/t/p/original/7zCuB0JE5M5VOOW7k8CEyJP0Zw.jpg\n * I could not find who made this (several sources point to \"Marcus from Kuala Lumpur\" but meh that's not very precise)\n * (November 2023)(started with 3018 char - Updated 16/01/24)\n */\n\n#define R       iResolution.xy\n// Clamp the color to make sure it's between [0;1]\n#define cc(C) clamp(C,0.,1.)\nfloat TH = 0.0056; //thickness segment\n// Clamp Color Segment\n#define ccs(s) cc(s + vec3(0.305,0.305,0.305))\n#define seg(st, pA, pB) segment(st, pA, pA + pB,TH)\n\nfloat sdCircle(vec2 p, float r){\n  float w = .8/R.y;\n  return smoothstep(-w,w, length(p) - r);\n}\n\n// Code modify from: https://www.shadertoy.com/view/3tdSDj by Inigo Quilez\nfloat segment( in vec2 p, in vec2 a, in vec2 b, in float th){\n  vec2 ba = b-a;\n  vec2 pa = p-a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 ); // proj coord on line\n  return clamp(sign(length(pa-h*ba) - th),0.,1.); // dist to segment\n}\n\n// Code modify from: https://forum.unity.com/threads/re-map-a-number-from-one-range-to-another.119437/\nfloat remap (float from, float fromMin, float fromMax, float toMin,  float toMax){\n  float normal = (from - fromMin) / (fromMax - fromMin);\n  return (toMax - toMin) * normal + toMin;\n}\n\n// Source of code: https://easings.net/\nfloat easeInOutQuad(in float t) {\n    float t1 = 2.*t;\n    return t < 0.5 ? t * t1 : 1. - (-t1 + 2.) * (-t1 + 2.) / 2.;\n}\n\n#define tweenEIOQ(t) easeInOutQuad(min(t, 1. -t)/0.5)\n// extension of circle radius\n#define EXT(r) abs(sin(iTime+r))/200.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float t = remap (tweenEIOQ(iTime/8.5), 0., 1., -0.268, 0.136),\n          x1 = sin(iTime)/30.,\n          x2 = sin(-iTime)/40.;\n\n    vec2 up = vec2(0.,t),\n         st = (fragCoord*2. -R.xy) / R.y - up;\n\n    vec3 BEIGE = vec3(0.867,0.847,0.698),\n         GREEN = vec3(0.42,0.494,0.173),\n         YELLOW = vec3(0.851,0.545,0.067),\n         ORANGE = vec3(0.82,0.286,0.098),\n         RED = vec3(0.714,0.118,0.114),\n         BLUE = vec3(0.02,0.455,0.298);\n\n    float c1 = sdCircle(vec2(-0.092 + x1,0.1) -st, 0.3 + EXT(0.)),\n          c2 = sdCircle(vec2(0.214 + x2,0.4) - st, 0.24 + EXT(0.3)),\n          c3 = sdCircle(vec2(0.284 + x2,0.09) - st, 0.228 + EXT(0.6)),\n          c4 = sdCircle(vec2(0.178 + x2,(-0.15)) - st, 0.2 + EXT(0.8)),\n          c5 = sdCircle(vec2(-0.428 + x1,0.15) - st, 0.18 + EXT(0.8));\n\n    // Segment stuff\n    vec2 A = vec2(-0.036,-1.2) + vec2(0.,0.03);\n    vec2 B = A + vec2(0.,(0.600));\n\n    float s1 = seg(st, A, vec2(0.,(0.600))),\n          s2 = seg(st, B, vec2(-0.360 + x1,(0.54))),\n          s3 = seg(st, B, vec2(-0.148 + x1,(0.38))),\n          s4 = seg(st, B, vec2(-0.048 + x1,(0.366))),\n          s5 = seg(st, B, vec2(0.064 + x2,(0.290))),\n          s6 = seg(st, B, vec2(0.108 + x2,(0.246))),\n          s7 = seg(st, B, vec2(0.192 + x2,(0.22)));\n\n    fragColor.rgb = cc(c1 + RED/BEIGE) *\n                    cc(c2 + YELLOW/BEIGE) *\n                    cc(c3 + ORANGE/BEIGE) *\n                    cc(c4 + GREEN/BEIGE) *\n                    cc(c5 + BLUE/BEIGE) *\n                    ccs(s1) *\n                    ccs(s2) *\n                    ccs(s3) *\n                    ccs(s4) *\n                    ccs(s5) *\n                    ccs(s6) *\n                    ccs(s7)\n                    * BEIGE;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}