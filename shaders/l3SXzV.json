{
    "Shader": {
        "info": {
            "date": "1710799683",
            "description": "WIP (still some scaling issues), adapting forked shader to use textures for noise sampling, enabling a double cloud layer at better performance.\n\nFirst author usually gives permission to use, but let them know. Consider my part CC0.",
            "flags": 32,
            "hasliked": 0,
            "id": "l3SXzV",
            "likes": 7,
            "name": "2D clouds from noise texture",
            "published": 3,
            "tags": [
                "fractal",
                "noise",
                "clouds",
                "fbm"
            ],
            "usePreview": 0,
            "username": "sabvdf",
            "viewed": 248
        },
        "renderpass": [
            {
                "code": "// In real applications, make a seamless texture with the\n// noise shape you want, e.g. from a snapshot of buffer A.\n// If it doesn't seem to work, you probably need to set\n// iChannel0 to wrap: repeat.\n\nfloat noise( vec2 fragCoord )\n{\n    return (texture( iChannel0, fragCoord/iResolution.xy ).x\n        // Tweak these values for a different cloud appearance\n        // e.g. my seamless texture has 0.15 and 1.8\n        - 0.05) * 1.3;\n        //- 0.18) * 1.8;\n}\n\nconst float cloudscale1 = 20.0;\nconst float speed1 = -0.3;\nconst float clouddark1 = 0.3;\nconst float cloudlight1 = 0.15;\nconst float cloudcover1 = 0.0;\nconst float cloudstrength1 = 1.0;\nconst float cloudalpha1 = 0.5;\n\nconst float cloudscale2 = 8.0;\nconst float speed2 = 0.15;\nconst float clouddark2 = 0.5;\nconst float cloudlight2 = 0.3;\nconst float cloudcover2 = 0.2;\nconst float cloudstrength2 = 10.0;\nconst float cloudalpha2 = 1.0;\n\nconst float skytint = 0.5;\nconst vec3 skycolour1 = vec3(0.2, 0.4, 0.6);\nconst vec3 skycolour2 = vec3(0.4, 0.7, 1.0);\n\nconst mat2 rot = mat2( 1.2,  1.2, -1.2,  1.2 );\n\nfloat fbm(vec2 n) {\n\tfloat total = 0.0, amplitude = 0.1;\n\tfor (int i = 0; i < 7; i++) {\n\t\ttotal += noise(n) * amplitude;\n\t\tn = rot * n;\n\t\tamplitude *= 0.4;\n\t}\n\treturn total;\n}\n\n// -----------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = fragCoord.xy / iResolution.xy;\n\tvec2 uvbase = p*vec2(iResolution.x/iResolution.y,1.0);    \n    \n    // layer 1\n    \n    float time = iTime * speed1;\n    float q = fbm(uvbase * cloudscale1 * 0.5);\n    \n    //ridged noise shape\n\tfloat r = 0.0;\n\tvec2 uv = uvbase * cloudscale1 - q + time * 1.2;\n    float weight = 0.8;\n    for (int i=0; i<8; i++){\n\t\tr += abs(weight*noise( uv ));\n        uv = rot*uv + time * 2.0;\n\t\tweight *= 0.7;\n    }\n    \n    //noise shape\n\tfloat f = 0.0;\n\tuv = uvbase * cloudscale1 - q + time;\n    weight = 0.7;\n    for (int i=0; i<8; i++){\n\t\tf += weight*noise( uv );\n        uv = rot*uv + time;\n\t\tweight *= 0.6;\n    }\n    \n    f *= r + f;\n    \n    //noise colour\n    float c = 0.0;\n\tuv = uvbase * cloudscale1 * 2.0 - q + time * 2.0;\n    weight = 0.5;\n    for (int i=0; i<7; i++){\n\t\tc += weight*noise( uv );\n        uv = rot*uv + time;\n\t\tweight *= 0.5;\n    }\n    \n    //noise ridge colour\n    float c1 = 0.0;\n\tuv = uvbase * cloudscale1 * 2.0 - q + time * 2.0;\n    weight = 0.4;\n    for (int i=0; i<7; i++){\n\t\tc1 += abs(weight*noise( uv ));\n        uv = rot*uv + time;\n\t\tweight *= 0.6;\n    }\n\t\n    c += c1;\n    \n    vec3 cloudcolour = vec3(1.1, 1.1, 0.9) * clamp((clouddark1 + cloudlight1*c), 0.0, 1.0);\n   \n    f = cloudcover1 + cloudstrength1*f*r;\n    \n    vec3 skycolour = mix(skycolour2, skycolour1, p.y);\n    vec3 result = mix(skycolour, clamp(skytint * skycolour + cloudcolour, 0.0, 1.0), clamp(f + c*cloudalpha1, 0.0, 1.0));\n    \n    // layer 2\n    \n    time = iTime * speed2;\n    q = fbm(uvbase * cloudscale2 * 0.5);\n    \n    //ridged noise shape\n\tr = 0.0;\n\tuv = uvbase * cloudscale2 - q + time * 1.2;\n    weight = 0.8;\n    for (int i=0; i<8; i++){\n\t\tr += abs(weight*noise( uv ));\n        uv = rot*uv + time * 2.0;\n\t\tweight *= 0.7;\n    }\n    \n    //noise shape\n\tf = 0.0;\n\tuv = uvbase * cloudscale2 - q + time;\n    weight = 0.7;\n    for (int i=0; i<8; i++){\n\t\tf += weight*noise( uv );\n        uv = rot*uv + time;\n\t\tweight *= 0.6;\n    }\n    \n    f *= r + f;\n    \n    //noise colour\n    c = 0.0;\n\tuv = uvbase * cloudscale2 * 2.0 - q + time * 2.0;\n    weight = 0.5;\n    for (int i=0; i<7; i++){\n\t\tc += weight*noise( uv );\n        uv = rot*uv + time;\n\t\tweight *= 0.5;\n    }\n    \n    //noise ridge colour\n    c1 = 0.0;\n\tuv = uvbase * cloudscale2 * 2.0 - q + time * 2.0;\n    weight = 0.4;\n    for (int i=0; i<7; i++){\n\t\tc1 += abs(weight*noise( uv ));\n        uv = rot*uv + time;\n\t\tweight *= 0.6;\n    }\n\t\n    c += c1;\n    \n    cloudcolour = vec3(1.1, 1.1, 0.9) * clamp((clouddark2 + cloudlight2*c), 0.0, 1.0);\n   \n    f = cloudcover2 + cloudstrength2*f*r;\n    \n    result = mix(result, clamp(skytint * skycolour + cloudcolour, 0.0, 1.0), clamp(f + c*cloudalpha2, 0.0, 1.0));\n    \n\tfragColor = vec4( result, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 hash( vec2 p ) {\n\tp = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p ) {\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\tvec2 i = floor(p + (p.x+p.y)*K1);\t\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0); //vec2 of = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));\n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot(n, vec3(70.0));\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n\tvec2 uv = p*vec2(iResolution.y/iResolution.x,1.0);    \n    fragColor = vec4(vec3(noise(uv * 80.0)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}