{
    "Shader": {
        "info": {
            "date": "1614466400",
            "description": "Look at transform.",
            "flags": 0,
            "hasliked": 0,
            "id": "WlKBDw",
            "likes": 8,
            "name": "Look At Transform",
            "published": 3,
            "tags": [
                "tracking",
                "target",
                "transform",
                "lookat"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 225
        },
        "renderpass": [
            {
                "code": "mat3 lookAt(in vec3 pos, in vec3 target) {\n    vec3 f = normalize(target - pos);         // Forward\n    vec3 r = normalize(vec3(-f.z, 0.0, f.x)); // Right\n    vec3 u = cross(r, f);                     // Up\n    return mat3(r, u, f);\n}\n\n// Default position should be facing along the Z axis\nfloat trackerObj(in vec3 p) {\n    return max(abs(p.z) - 2.0, max(abs(p.x), abs(p.y)) - 0.25 + p.z * 0.25) * 0.4; // Woefully inexact\n}\n\nvec2 mapScene(in vec3 p) {\n    float c = cos(iTime), s = sin(iTime);\n    vec3 target = vec3(c * 5.0, 3.0 * s, c * s * 5.0) * 2.0;\n\n    float targetShape = length(p - target) - 0.5;\n\n    // Hexagonal tiling\n    vec2 rep = vec2(6.0, 10.39);\n    vec2 hrep = vec2(3.0, 5.195);\n    vec2 a = mod(p.xz, rep) - hrep;\n    vec2 b = mod(p.xz - hrep, rep) - hrep;\n    vec2 local = dot(a, a) < dot(b, b) ? a : b;\n    vec2 cell = p.xz - local;\n\n    // Transform to local coordinates and apply look at transform\n    p.xz = local;\n    p *= lookAt(vec3(cell.x, 0.0, cell.y), target);\n    float trackerShape = trackerObj(p);\n\n    return vec2(min(targetShape, trackerShape), targetShape < trackerShape); // vec2(distance, id)\n}\n\nvec3 getNormal(in vec3 p) {\n    vec3 e = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(mapScene(p + e.xyy).x - mapScene(p - e.xyy).x,\n                          mapScene(p + e.yxy).x - mapScene(p - e.yxy).x,\n                          mapScene(p + e.yyx).x - mapScene(p - e.yyx).x));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 3.14;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    fragColor = vec4(1.0);\n\n    vec3 ro = vec3(0.0, 3.0, 10.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    float t = 0.0;\n    for (int i=0; i < 250; i++) {\n        vec3 p = ro + rd * t;\n        vec2 d = mapScene(p);\n        if (d.x < 0.001) {\n            vec3 n = getNormal(p);\n            vec3 l = normalize(vec3(-1.0, 1.0, 1.0));\n\n            float diff = max(0.0, dot(n, l));\n            fragColor.rgb = d.y < 0.5 ? vec3(diff, 0.0, 0.0) : vec3(0.0, 0.0, diff);\n\n            break;\n        }\n\n        if (t > 100.0) {\n            break;\n        }\n\n        t += d.x;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}