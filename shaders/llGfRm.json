{
    "Shader": {
        "info": {
            "date": "1542123214",
            "description": "there are many differents shapes you can ,make with a vec3 with components sorted by value, here are some of them. the distance isn't exact.\nyou can move around with the mouse, arrow keys, shift and ctrl",
            "flags": 48,
            "hasliked": 0,
            "id": "llGfRm",
            "likes": 1,
            "name": "sorted vec3 distance fields",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "sort"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 442
        },
        "renderpass": [
            {
                "code": "#define steps 100\n#define maxdistance 20.0\n#define epsilon 0.005\n#define time (iTime+2.0)\n\n/*\nfloat square(vec3 p, float rad) {\n    vec3 q = abs(p);\n    vec3 q2 = vec3(min(min(q.x,q.y),q.z),0,max(max(q.x,q.y),q.z));\n    q2.y = dot(q-q2,vec3(1));\n    \n    float len = (dot(q2,vec3(1))-rad);\n    \n    if (q2.x*3.0 > len) return len*inversesqrt(3.0);\n    \n    float k = clamp(0.5*(q2.z-q2.y+rad),0.0,rad); \n    return length(q2-vec3(0,rad-k,k));\n}\n\nfloat map(vec3 p) {\n    return square(p,1.0)-0.2;\n}\n*/\n\n\nfloat map(vec3 p) {\n    \n    //optional repetition\n    //p = mod(p,8.0)-4.0;\n    //optional mirror\n    vec3 q = abs(p);\n    \n    vec3 q2 = vec3(min(min(q.x,q.y),q.z),0,max(max(q.x,q.y),q.z));\n    q2.y = dot(q-q2,vec3(1));\n    \n    float len;\n    \n    //offset should aslo be sorted\n    vec3 offset = vec3(0);\n    offset.x = sin(time*0.5)*0.5+0.5;\n    offset.y = sin(time*0.5*0.768)*0.5+0.5+offset.x;\n    offset.z = sin(time*0.5*0.353)*0.5+0.5+offset.y;\n    \n    vec3 flips = sign(fract(time*vec3(1,0.5,0.25)*0.3*0.125)-0.5);\n    vec3 maxs = -step(0.5,fract(time*vec3(1,0.5,0.25)*0.3))*1000.0;\n    \n    vec3 p2 = min((q2-offset)*flips,-maxs);\n    \n    len = length(p2)-0.2;\n    \n    vec3 a = sign(sin(time*vec3(0.52,0.83,0.44)*0.3*0.125));\n    \n    len = dot(p2,a)/length(a);\n    \n    return len;\n    \n}\n\nvec3 findnormal(vec3 p, float eps) {\n    vec2 e = vec2(0,eps);\n    \n    return normalize(vec3(\n        map(p+e.yxx),\n        map(p+e.xyx),\n        map(p+e.xxy))\n       -map(p));\n}\n\nvec4 getdata(int index) {\n    ivec2 p;\n    p.x = index%int(iResolution.x);\n    p.y = index/int(iResolution.x);\n    return texelFetch(iChannel0,p,0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord.xy*2.0-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = getdata(campos).xyz;\n    vec3 rd = normalize(vec3(uv,1));\n\n    vec4 rotcam = getdata(camrot);\n\n    rd.zy *= rot(rotcam.y);\n    rd.zx *= rot(rotcam.x);\n    \n    float a = sign(map(ro));\n    float d = 0.0;\n    int i;\n    float c = 0.0;\n    for (i = 0; i < steps; i++) {\n        float l = map(ro+rd*d)*a;\n        \n        if (l < epsilon*max(d,epsilon)||d>maxdistance) {\n            break;\n        }\n        d += l;\n    }\n\t\n    vec3 background = vec3(0.6,0.5,0.8)*(rd.y*0.5+0.5)\n                     +vec3(0.8,0.7,0.4)*(dot(rd,vec3(-1.0/sqrt(3.0)))*0.5+0.5);\n    \n    if ( i < steps&&d<maxdistance) {\n        vec3 p = ro+rd*d;\n        vec3 n = findnormal(p,epsilon*max(d,epsilon))*a;\n    \tvec3 sc = vec3(n*0.1+0.5+0.4*a);\n        float light = max(0.3,dot(n,normalize(vec3(1))));\n        vec3 col = sc*light;\n        col = mix(col, background,pow(d/maxdistance,4.0));\n        col *= 1.0-float(i)/100.0;\n        fragColor.rgb = col;\n    } else {\n        fragColor = vec4(background,1);\n    }\n    fragColor = sqrt(fragColor);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define lastmouse 0\n#define campos 1\n#define camrot 2\n\n#define rot(A) mat2(cos(A),-sin(A),sin(A),cos(A))\n\n#define sensitivity 3.0\n#define movespeed 1.0\n\n//keyboard keys\n#define KEY_UP    38\n#define KEY_DOWN  40\n#define KEY_RIGHT 39\n#define KEY_LEFT  37\n#define KEY_SHIFT 16\n#define KEY_CTRL  17\n\n//movement keys\n#define MOVE_FORW   KEY_UP\n#define MOVE_LEFT   KEY_LEFT\n#define MOVE_RIGHT  KEY_RIGHT\n#define MOVE_BACK   KEY_DOWN\n#define MOVE_UP     KEY_SHIFT\n#define MOVE_DOWN   KEY_CTRL\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float getkey(int x, int y)\n{\n    return texelFetch(iChannel1,ivec2(x,y),0).x;\n}\n\nvec4 getdata(int index) {\n    ivec2 p;\n    p.x = index%int(iResolution.x);\n    p.y = index/int(iResolution.x);\n    return texelFetch(iChannel0,p,0);\n}\nvec4 updatedata(int index) {\n    vec4 data = getdata(index);\n    \n    vec4 iMouse2 = getdata(lastmouse);\n    \n    \n    bool refresh = iFrame == 0;\n    \n    if (index == lastmouse) {\n        return iMouse;\n    } else if (index == campos) {\n        \n        if (refresh) {\n            return vec4(0,0,0,1);\n        }\n        \n        vec4 rotcam = getdata(camrot);\n        \n        vec3 move = vec3(getkey(MOVE_RIGHT,0)-getkey(MOVE_LEFT,0),\n                         getkey(MOVE_UP   ,0)-getkey(MOVE_DOWN,0),\n                         getkey(MOVE_FORW ,0)-getkey(MOVE_BACK,0));\n        \n        move.zy *= rot(rotcam.y);\n        move.zx *= rot(rotcam.x);\n        \n        \n        vec3 newpos = data.xyz+movespeed*move*iTimeDelta;\n        \n        data.xyz = newpos;\n        \n        return data;\n    } else if (index == camrot) {\n        \n        if (refresh) {\n            return vec4(0);\n        }\n        \n        if (min(iMouse2.z,iMouse.z) > 0.5) {\n            data.xy += (iMouse.xy-iMouse2.xy)/iResolution.y*sensitivity;\n        }\n        return data;\n    }\n    \n    \n    return data;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coord = ivec2(fragCoord);\n    fragColor = updatedata(coord.x+coord.y*int(iResolution.x));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}