{
    "Shader": {
        "info": {
            "date": "1622819677",
            "description": "Portrait of the Fitzhugh-Nagumo neuron model. Mouse x represents input current. Once the reset parameter nullcline is between the critical points of the voltage nullcline a Hopf bifurcation occurs, which represents the neuron firing.",
            "flags": 0,
            "hasliked": 0,
            "id": "NlXGDj",
            "likes": 2,
            "name": "Limit Cycle (Fitzhugh-Nagumo)",
            "published": 3,
            "tags": [
                "2d",
                "math",
                "neuron"
            ],
            "usePreview": 0,
            "username": "Ebanflo",
            "viewed": 301
        },
        "renderpass": [
            {
                "code": "#define I 4.0*iMouse.x/iResolution.x - 2.0\n\n#define a 0.7\n#define b 0.8\n#define tau 12.5\n\n#define num_steps 200\n#define init vec2(-1)\n#define AA 1\n\nconst vec4 pi = vec4(1, 2, 4, 8)*atan(1.0);\n\nconst float eps = 0.3;\n\nconst bool displayNullclines = true;\n\n// probably would be a better idea to store this in a buffer or something\nvec2 curve[num_steps];\n\nfloat sigmoid(float x){return 0.5*tanh(x) + 0.5;}\n\nvec3 color(vec2 p){\n    float red = sigmoid(p.y);\n    float green = sigmoid(dot(vec2(0.707, -0.707), p));\n    float blue = sigmoid(dot(vec2(-0.707, -0.707), p));\n    float brightness = pow(length(p), 0.25);\n    return vec3(red, green, blue)*brightness;\n}\n\nvec2 forwardComp(vec2 state, mat2 weights, int t, bool n){\n    //return tanh(weights*state - bias) - state;\n    float v = state.x;\n    float w = state.y;\n    return vec2(v - 0.333*v*v*v - w + I, (v + a - b*w)/tau);\n}\n\nvec2 dCurve(vec2 p){\n    \n    float dist = 9e9;\n    float num = 0.0;\n    \n    for(int i = 0; i < num_steps - 1; i++){\n        \n        vec2 pos = p - curve[i];\n        vec2 segment = curve[i + 1] - curve[i];\n        float len = length(segment);\n        vec2 normed = segment/len;\n        vec2 ortho = vec2(normed.y, -normed.x);\n        \n        float proj1 = dot(normed, pos);\n        float d = (proj1 < len && proj1 > 0.0)\n                ? abs(dot(pos, ortho))\n                : min(length(pos), distance(pos, segment));\n        \n        if (d < dist) {\n            dist = d;\n            num = float(i);\n        }\n    }\n    return vec2(dist, num);\n}\n\nvoid eulerStep(vec2 p, mat2 weights){\n    curve[0] = p;\n    for(int i = 1; i < num_steps; i++){\n        curve[i] = curve[i - 1] + eps*forwardComp(curve[i - 1], weights, i, true);\n    }\n}\n\nvec3 render(vec2 frag, mat2 weights){\n    \n    vec2 xy = 3.0*(2.0*frag - iResolution.xy)/iResolution.y;\n    //xy *= 8.0;\n    \n    vec2 flow = forwardComp(xy, weights, 0, false);\n     \n    if(displayNullclines){\n        if(abs(flow.x) < 0.02) return vec3(0);\n        if(abs(flow.y) < 0.001) return vec3(0);\n    }\n    \n    //vec3 col = color(xy);\n    vec3 col = color(flow);\n    \n    vec2 curve = dCurve(xy);\n    float d = curve.x;\n    float n = curve.y;\n    if(d < 0.02) return col + vec3(0.6);\n    else return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 m = iMouse.xy == vec2(0) ? 10.0*sin(iTime + vec2(0, pi.y))\n           : 2.0*(2.0*iMouse.xy - iResolution.xy)/iResolution.y;\n    //m = vec2(cos(angle*pi.w), sin(angle*pi.w));\n    #ifdef mouse\n    //m = normalize(m);\n    #endif\n    \n    float t = atan(m.y, m.x);\n    float scale = length(m);\n    vec2 trig = sin(vec2(t, t + pi.y));\n    mat2 weights = scale*mat2(trig.y, -trig.x, trig.x, trig.y);\n    \n    eulerStep(init, weights);\n    \n    fragColor = vec4(0, 0, 0, 1);\n    for(int i = 0; i < AA; i++){\n        for(int j = 0; j < AA; j++){\n            fragColor.rgb += render(fragCoord + vec2(i, j), weights);\n        }\n    }\n    fragColor.rgb /= float(AA*AA);\n    //fragColor.rgb += texture(iChannel0, fragCoord/iResolution.xy).r;\n    //fragColor.rgb = color((2.0*fragCoord - iResolution.xy)/iResolution.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}