{
    "Shader": {
        "info": {
            "date": "1457787444",
            "description": "This is a pastel hue function, extracted from the YCoCg colorspace at Y'=0.5, S=0.5, designed to provide a pleasing albedo basis for materials blended in linear colorspace, particularly when using tonemapping.",
            "flags": 0,
            "hasliked": 0,
            "id": "4d3SR4",
            "likes": 53,
            "name": "Pastelizer",
            "published": 3,
            "tags": [
                "hue",
                "tonemapping",
                "filmic",
                "pastel",
                "albedo",
                "hsy",
                "hsyp"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 2778
        },
        "renderpass": [
            {
                "code": "//---------------------------------------------------------------------------------\n\nvec3 pastelizer(float h) {\n    h = fract(h + 0.92620819117478) * 6.2831853071796;\n    vec2 cocg = 0.25 * vec2(cos(h), sin(h));\n    vec2 br = vec2(-cocg.x,cocg.x) - cocg.y;\n    vec3 c = 0.729 + vec3(br.y, cocg.y, br.x);\n    return c * c;\n}\n\n//---------------------------------------------------------------------------------\n\n///////////////////////////////////////////////\n\n// ACES fitted\n// from https://github.com/TheRealMJP/BakingLab/blob/master/BakingLab/ACES.hlsl\n\nconst mat3 ACESInputMat = mat3(\n    0.59719, 0.35458, 0.04823,\n    0.07600, 0.90834, 0.01566,\n    0.02840, 0.13383, 0.83777\n);\n\n// ODT_SAT => XYZ => D60_2_D65 => sRGB\nconst mat3 ACESOutputMat = mat3(\n     1.60475, -0.53108, -0.07367,\n    -0.10208,  1.10813, -0.00605,\n    -0.00327, -0.07276,  1.07602\n);\n\nvec3 RRTAndODTFit(vec3 v)\n{\n    vec3 a = v * (v + 0.0245786) - 0.000090537;\n    vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n    return a / b;\n}\n\nvec3 ACESFitted(vec3 color)\n{\n    color = color * ACESInputMat;\n\n    // Apply RRT and ODT\n    color = RRTAndODTFit(color);\n\n    color = color * ACESOutputMat;\n\n    // Clamp to [0, 1]\n    color = clamp(color, 0.0, 1.0);\n\n    return color;\n}\n\n//---------------------------------------------------------------------------------\n\nfloat linear_srgb(float x) {\n    return mix(1.055*pow(x, 1./2.4) - 0.055, 12.92*x, step(x,0.0031308));\n}\nvec3 linear_srgb(vec3 x) {\n    return mix(1.055*pow(x, vec3(1./2.4)) - 0.055, 12.92*x, step(x,vec3(0.0031308)));\n}\n\nfloat srgb_linear(float x) {\n    return mix(pow((x + 0.055)/1.055,2.4), x / 12.92, step(x,0.04045));\n}\nvec3 srgb_linear(vec3 x) {\n    return mix(pow((x + 0.055)/1.055,vec3(2.4)), x / 12.92, step(x,vec3(0.04045)));\n}\n\n//---------------------------------------------------------------------------------\n\nvec2 uvcoords(vec2 p) {\n\tvec2 uv = p / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    return uv;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = uvcoords(fragCoord);\n    \n    float h = (fragCoord.x / iResolution.x) + iTime * 0.5; \n    vec3 color1 = pastelizer(h);    \n    color1 *= exp2(((fragCoord.y / iResolution.y)*2.0-1.0)*4.0);\n    \n    vec2 n = normalize(uv);\n    vec3 color2 = pastelizer(atan(n.y,n.x) / 6.2831853071796);\n    color2 *= 1.0 / (0.01 + dot(uv,uv) * 10.0);\n    \n    float s = clamp(-atan(sin(iTime*0.49)*100.0)*0.5/1.5 + 0.5,0.0,1.0);\n    vec3 color = pow(color1, vec3(1.0-s)) * pow(color2, vec3(s));\n\n    color = ACESFitted(color);\n\tfragColor = vec4(linear_srgb(color),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}