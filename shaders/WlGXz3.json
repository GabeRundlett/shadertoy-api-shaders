{
    "Shader": {
        "info": {
            "date": "1583206548",
            "description": "Signed distance and gradient to a (rounded) hexagon. Correct distance field everywhere, which allows for example making an outline shape with ease.",
            "flags": 0,
            "hasliked": 0,
            "id": "WlGXz3",
            "likes": 5,
            "name": "Hexagon - gradient 2D",
            "published": 3,
            "tags": [
                "2d",
                "distancefield",
                "sdf",
                "gradient",
                "hexagon",
                "distance"
            ],
            "usePreview": 0,
            "username": "TimoKinnunen",
            "viewed": 580
        },
        "renderpass": [
            {
                "code": "// Fork of \"Cross - gradient 2D\" by iq. https://shadertoy.com/view/WtdXWj\n// 2020-03-03 03:08:40\n\n// The MIT License\n// Copyright Â© 2020 Timo Kinnunen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Signed distance and gradient to a hexagon. Optimized to the best of my ability but not profiled.\n\n// List of iq's other 2D distances+gradients:\n//\n// Circle:   https://www.shadertoy.com/view/WltSDj\n// Box:      https://www.shadertoy.com/view/wlcXD2\n// Cross:    https://www.shadertoy.com/view/WtdXWj\n// Segment:  https://www.shadertoy.com/view/WtdSDj\n\n// return distance (.x) and gradient (.yz)\nvec3 sdgHexagon(vec2 p, float r) {\n    const vec4 K = vec4(sqrt(3.0), 0.5 * sqrt(3.0), 1.0 / sqrt(3.0), 2.0 / sqrt(3.0));\n    vec3 a = vec3(abs(p),0);\n\n    if(K.x * a.x <= min(a.y, r)) {\n        // gradient is vertical\n        a.z = a.y - r;\n        a.xy = vec2(0.0, -1.0);\n    } else if(abs(a.z = dot(a.xy, vec2(K.y, -1.5))) <= r) {\n        // gradient is 30 degrees from horizontal\n        a.z = a.z + a.y + a.y - r;\n        a.xy = vec2(-K.y, -0.5);\n    } else {\n        // gradient is towards a sharp corner\n        a.z = length(a.xy = a.z < r ? vec2(K.z * r - a.x, r - a.y) : vec2(K.w * r - a.x, -a.y));\n        a.xy = vec2(a.x / a.z, a.y / a.z);\n    }\n    return vec3(a.z, p.x < 0. ? -a.x : a.x, p.y < 0. ? -a.y : a.y);\n}\n\nvoid mainImage(out vec4 O, vec2 U) {\n\n    float mult = iResolution.y;\n    float mult3 = 3.0/mult;\n    vec2 pos = U-0.5*iResolution.xy;\n\n    // size\n\tfloat b = floor(0.125*iResolution.y);\n    \n    // corner radius\n    float ra1 = (0.5+0.5*sin(iTime*1.2))*0.25*mult;\n    float ra2 = (0.5+0.5*sin(iTime*1.3))*0.25*mult;\n\n    float center = 0.5*(ra1+ra1+ra2);\n    float radius = 0.5*ra2;\n\n    // sdf(p) and gradient(sdf(p))\n\tvec3 dg = sdgHexagon(pos,b);\n    float d = abs(dg.x-center)-radius;\n    vec2 g = dg.yz*sgn(dg.x-center);\n    \n    // central differenes based gradient, for comparison\n    // g = vec2(dFdx(d),dFdy(d))/(2.0/iResolution.y);\n    \n\t// coloring\n    vec3 col = vec3(0.5+0.5*g,0.5+0.5*sign(d));\n\tcol *= 1.0 - 0.5*exp2(-16.0*abs(d*mult3));\n\tcol *= 0.75 + 0.25*cospi(64.0*d*mult3);\n\tcol = mix(vec3(1.0), col, smoothstep(0.0,0.01,abs(d*mult3)));\n\n    O = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float sinpi(float v) {return sin(radians(180.0)*v);}\nvec2  sinpi(vec2  v) {return sin(radians(180.0)*v);}\nvec3  sinpi(vec3  v) {return sin(radians(180.0)*v);}\nvec4  sinpi(vec4  v) {return sin(radians(180.0)*v);}\nfloat cospi(float v) {return cos(radians(180.0)*v);}\nvec2  cospi(vec2  v) {return cos(radians(180.0)*v);}\nvec3  cospi(vec3  v) {return cos(radians(180.0)*v);}\nvec4  cospi(vec4  v) {return cos(radians(180.0)*v);}\nfloat tanpi(float v) {return tan(radians(180.0)*v);}\nvec2  tanpi(vec2  v) {return tan(radians(180.0)*v);}\nvec3  tanpi(vec3  v) {return tan(radians(180.0)*v);}\nvec4  tanpi(vec4  v) {return tan(radians(180.0)*v);}\nfloat atanpi(vec2 v) {return atan(v.y,v.x)/radians(180.0);}\nfloat sgn(float x) {return (x<0.)?-1.:1.;}\nvec2 sgn(vec2 v) {return vec2(v.x<0.?-1:1, v.y<0.?-1:1);}\nvec3 sgn(vec3 v) {return vec3(v.x<0.?-1:1, v.y<0.?-1:1, v.z<0.?-1:1);}\nvec4 sgn(vec4 v) {return vec4(v.x<0.?-1:1, v.y<0.?-1:1, v.z<0.?-1:1, v.w<0.?-1:1);}\nfloat sqr(float x) {return x*x;}\nvec2 sqr(vec2 x) {return x*x;}\nvec3 sqr(vec3 x) {return x*x;}\nvec4 sqr(vec4 x) {return x*x;}\nfloat lengthSqr(vec2 x) {return dot(x, x);}\nfloat lengthSqr(vec3 x) {return dot(x, x);}\nfloat lengthSqr(vec4 x) {return dot(x, x);}\nfloat vmax(vec2 v) {return max(v.x, v.y);}\nfloat vmax(vec3 v) {return max(max(v.x, v.y), v.z);}\nfloat vmax(vec4 v) {return max(max(v.x, v.y), max(v.z, v.w));}\nfloat vmin(vec2 v) {return min(v.x, v.y);}\nfloat vmin(vec3 v) {return min(min(v.x, v.y), v.z);}\nfloat vmin(vec4 v) {return min(min(v.x, v.y), min(v.z, v.w));}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}