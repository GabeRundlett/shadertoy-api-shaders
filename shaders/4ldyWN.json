{
    "Shader": {
        "info": {
            "date": "1532691169",
            "description": "spiral coordinates with parametric chiraity\nimouse.x sets thickness of red (for upper half of screen) (lower half blends to UV.rg)\nimouse.y sets chirality\n10 months year later fixed local uv transforms of iMouse",
            "flags": 0,
            "hasliked": 0,
            "id": "4ldyWN",
            "likes": 2,
            "name": "eulerSpiral chirality",
            "published": 3,
            "tags": [
                "polar",
                "eulerspiral"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 460
        },
        "renderpass": [
            {
                "code": "//only integer numbers for SEAMLESS==continuous chirality\n#define FloorIt\n\n#define ViewZoom 5.\n#define spinSpeed .1\n\n//get spital coords of poolar coords\n\n//carthesian to polar\nvec2 c2p(vec2 u){return vec2(atan(u.x,u.y),length(u));}\n\n//polar to spiralEuclidean\nvec2 p2se(vec2 u,float turns\n){u.x=u.x*turns/pi\n ;u-=mod(turns+1.,2.)*2.//optionally fix oddChiraliyOffset (blue lines become asymptotic to blue lines towards the center)\n ;u.x+=iTime            //optionally GrowSpin over time\n ;float s=u.y-u.x\n ;return (vec2(floor(s)-u.x,s));}\n\n//carthesian to spiralEuclidean\nvec2 c2se(vec2 u,float turns){return p2se(c2p(u),turns);}\n\nvoid mainImage(out vec4 O,vec2 I){//;int a=34%3\n ;vec2 u=fra(I.xy);\n ;vec2 m=fra(iMouse.xy);//(iMouse.xy-.5)*ViewZoom;\n //;vec2 n=(iMouse.zw-.5)*ViewZoom;\n ;vec2 v=u*ViewZoom\n ;      m*=ViewZoom*2.\n ;if(m.y<0.){u.x=-u.x;}\n #ifdef FloorIt\n ;m.y=floor(m.y*2.+.5)*.5\n #endif  \n ;v=c2se(v,m.y)\n ;v=fract(v)    \n ;float bokeh=6.*ViewZoom/min(iResolution.x,iResolution.y)\n ;vec3 c=v.xyy\n //m.x sets thickness of red\n ;m.x=iMouse.x/iResolution.x\n ;//m.x=1.-m.x\n ;m.x=clamp(m.x,bokeh,1.-bokeh)\n ;m.x=abs(v.y-.5)-.5*m.x\n ;c.y=mix(v.y,smoothstep(bokeh,-bokeh,m.x)\n         ,(u.y/ViewZoom*2.+1.))\n ;c=c.yzx\n ;c.y*=.1\n ;O=vec4(c,1)\n ;}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi acos(-1.)\n#define fra(u)(u-.5*iResolution.xy)*ViewZoom/iResolution.y\n#define v0 float\n#define v1 vec2\n#define v2 vec3\n#define v3 vec4\n#define u2(a)(a*2.-1.)\n#define u5(a)(a*.5+.5)\n#define dd(a)dot(a,a)\n//perpendicular dot()used for line intersections.\n#define dotp(a,b)dot(vec2(-a.y,a.x),b)\nv0 suv(vec2 a){return a.x+a.y;}\nv0 miv(v1 a){return min(a.y,a.x);}//return max domain of vector.\nv0 miv(v2 a){return min(a.z,miv(a.xy));}\nv0 miv(v3 a){return min(miv(a.zw),miv(a.xy));}\n#define mav(a)-miv(-a)\n#define sat(a)clamp(a,0.,1.)\nvec4 minx(vec4 a,vec4 b){return mix(b,a,step(a.x,b.x));}//return the vec4 with the smaller .x\n\n\n/*\n\n#define min2dd(a)min(dd(a.xy),dd(a.zw))\n#define equals(a,b,c)   mix(b,a,step(c,0.)+step(0.,c)-1.)\n#define equals2(a,b,c)   mix(b,a,step(c.x,0.)+step(0.,c.x)+step(c.y,0.)+step(0.,c.y)-3.)\nvec2 perp(vec2 a){return vec2(-a.y,a.x);}\nbool rea(float s,float b,float e){b-=s;return(abs(s-.5*b)*e<abs(b));}//return(abs(b-a*.5)<a*e);//return(s<b-e||s>b+e);\nv0 segment2(v1 p,v1 a,v1 b){p-=a;b-=a;return dd(p-b*sat(dot(p,b)/dd(b)));}\nv0 segment(v1 p,v1 a,v1 b){return sqrt(segment2(p,a,b));}\nv0 lie(v1 u,v1 a,v1 b\n){float c=dd(a-u);float d=segment2(u,a,b);a.x=equals2(c,d,(a-b));return sqrt(a.x);}\n//return distacne from [u] to intersection of ray [ut] and plane [n] trough origin. //[n]PlaneNormal,[u]RayOrigin,[t]RayDirection\n//float gPRxZ(vec3 n,vec3 u,vec3 t){return -(dot(n,u)/dot(n,t));}\nfloat gPRxZ(vec2 n,vec2 u,vec2 t){return -(dot(n,u)/dot(n,t));}//second life wiki geometric,is a generalization of segment():\n//lazy fast div0 avoidance.\n// Solve cubic equation for roots\nvec3 solveCubic(vec3 a){float p=a.y-a.x*a.x/3.,p3=p*p*p,q=a.x*(2.*a.x*a.x-9.*a.y)/27.+a.z,d=q*q+4.*p3/27.,o=-a.x/3.\n;if(d>=.0){vec2 v=(vec2(1,-1)*sqrt(d)-q)/2.;return vec3(o+suv(sign(v)*pow(abs(v),vec2(1./3.))));}\n;float v=acos(-sqrt(-27./p3)*q*.5)/3.,m=cos(v),n=sin(v)*sqrt(3.);return vec3(m+m,-n-m,n-m)*sqrt(-p/3.)+o;}\nvec2 solveCubic2(vec3 a)\n{float p=a.y-a.x*a.x/3.\n;float b=p*p*p,q=a.x*(2.*a.x*a.x-9.*a.y)/27.+a.z\n;float d=q*q+4.*b/27.\n;float o=-a.x/3.\n;if(d>=.0){vec2 v=(vec2(1,-1)*sqrt(d)-q)/2.;return vec2(o+suv(sign(v)*pow(abs(v),vec2(1./3.))));}\n;float v=acos(-sqrt(-27./b)*q*.5)/3.,m=cos(v),n=sin(v)*sqrt(3.);return vec2(m+m,-n-m)*sqrt(-p/3.)+o;}\nfloat sdBezier(vec2 A,vec2 B,vec2 C,vec2 u){\n;if(!(rea(A.y,C.y,.001)))return lie(u,A,C);\n;vec4 b=A.xyxy-vec4(u,B*2.-C);vec2 a=B-A,t=sat(solveCubic2(vec3(3.*dot(a,b.zw),2.*dd(a)+dot(b.xy,b.zw),dot(b.xy,a))/dd(b.zw)))\n;vec4 c=a.xyxy*2.;A-=u;b=A.xyxy+vec4(a.xy*2.+b.zw*t.x,a.xy*2.+b.zw*t.y)*t.xxyy;return sqrt(min2dd(b));}\n\nconst float tiny=1e-7;//smallest denormalNumber>0_16bit_float is pow(2,-24)\n#define if0(a)if(a==0.)a=tiny\n\n*/\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}