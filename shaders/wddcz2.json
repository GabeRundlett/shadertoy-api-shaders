{
    "Shader": {
        "info": {
            "date": "1601332523",
            "description": "Effect to test the result of separating luma and chroma using the YIQ color space while reducing the sample quality of chroma, by squishing side-by-side with luma.",
            "flags": 32,
            "hasliked": 0,
            "id": "wddcz2",
            "likes": 2,
            "name": "Chroma subsampling test",
            "published": 3,
            "tags": [
                "2d",
                "chroma",
                "filter",
                "subsampling",
                "artifact",
                "luma",
                "ntsce"
            ],
            "usePreview": 0,
            "username": "luluco250",
            "viewed": 667
        },
        "renderpass": [
            {
                "code": "/*\n\nParameters can be found in the common tab.\n\n(Un)license:\n\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n\n*/\n\nvec4 Main(vec2 uv)\n{\n    return texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const vec3 ChromaKey = vec3(0.051, 0.639, 0.145);\n\nvec4 Main(vec2 uv)\n{\n    vec3 fg = texture(iChannel0, uv).rgb;\n    float key = distance(fg, ChromaKey);\n    \n    vec3 bg = texture(iChannel1, uv).rgb;\n    vec3 color = mix(bg, fg, smoothstep(0.1, 0.5, key));\n    \n    return vec4(color, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const vec3 LumaCoeffs = vec3(0.299, 0.587, 0.114);\nconst float LumaRatio = 0.95;\nconst float ChromaRatio = 1.0 - LumaRatio;\n\nconst mat3x3 RgbToYiq = mat3x3(\n    0.299, 0.587, 0.114,\n    0.5959, -0.2746, -0.3213,\n    0.2115, -0.5227, 0.3112);\n\nconst mat3x3 YiqToRgb = mat3x3(\n    1.0, 0.956, 0.619,\n    1.0, -0.272, -0.647,\n    1.0, -1.106, 1.703);\n\n#define iPixelSize vec2(1.0 / iResolution.xy)\n\nvec4 Main(vec2 uv);\n\n#define mainImage(color, coord) (color = Main(coord * iPixelSize))\n\n#define Saturate(x) clamp(x, 0.0, 1.0)\n\n#define ScaleCoord(uv, scale, center) (((uv) - (center)) * (scale) + (center))\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec4 Main(vec2 uv)\n{\n    vec2 imgUv;\n    imgUv.x = (uv.x < LumaRatio)\n        ? uv.x / LumaRatio\n        : (uv.x - LumaRatio) / ChromaRatio;\n    imgUv.y = uv.y;\n    \n    vec3 rgb = texture(iChannel0, imgUv).rgb;\n    vec3 yiq = RgbToYiq * rgb;\n    \n    vec3 color = (uv.x < LumaRatio)\n        ? vec3(yiq.x)\n        : vec3(yiq.yz, 0);\n    \n    return vec4(color, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 Main(vec2 uv)\n{\n    vec2 yUv = vec2(uv.x * LumaRatio, uv.y);    \n    float y = texture(iChannel0, yUv).x;\n    \n    vec2 iqUv = vec2(uv.x * ChromaRatio + LumaRatio, uv.y);\n    vec2 iq = texture(iChannel0, iqUv).xy;\n    \n    vec3 rgb = YiqToRgb * vec3(y, iq);\n    \n    return vec4(rgb, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}