{
    "Shader": {
        "info": {
            "date": "1575889898",
            "description": "Balls",
            "flags": 0,
            "hasliked": 0,
            "id": "3dK3Dw",
            "likes": 0,
            "name": "balls demo",
            "published": 3,
            "tags": [
                "balls",
                "noraymarching"
            ],
            "usePreview": 0,
            "username": "patu",
            "viewed": 214
        },
        "renderpass": [
            {
                "code": "const int BALLS = 12;  // go for \n\nconst vec2 G = vec2(32., 32.);\nfloat S = .5;\n\nvec2 sphereMap(vec3 p) {\n\treturn vec2(\n    \t.5 + atan(p.z, p.x) / (2.*3.14159),\n\t\t.5 - asin(p.y) / 3.14159\n    );\n}\n\nmat2 Rot(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat cs(vec3 p, vec2 rot) {\n    p.xy *= Rot(rot.x);\n    //p.yz *= Rot(rot.y);\n\t\n    vec2 cc1 = sphereMap(p);\n\n    float \n        c = 0.;\n    \tc += smoothstep(S, 1., abs(fract(cc1.x * G.x) * 2. - 1.));\n    \tc *= smoothstep(S, 1., abs(fract(cc1.y * G.y) * 2. - 1.));\n    \n    return c * c * (3. - 2. * c);\n}\n\nvec4 drawBalls(vec3 ro, vec3 rd) {\n    vec3 p;\n    vec3 col = vec3(0.);\n\tfloat r = .75;\n\n    ro.xz *= Rot(iTime);\n\trd.xz *= Rot(iTime);    \n    \n    float t1 = 1e3;\n    for (int i = 0; i < BALLS; i++) {        \n        float fi = float(i);\n        \n        // ball pos\n        vec3 s = vec3(\n            sin(fi * 3.34 + iTime * .1) * 4., \n            -abs(sin(iTime * 1. + fi)) * (3. + fi * .2) + r, \n            cos(fi * 4.56 + iTime * .1) * 4.\n        );\n        \n        float t = dot(s - ro, rd);\n\n        p = ro + rd * t;\n\n        float y = length(s - p);\n        \n        float angle = atan(s.z, s.x) ;\n        \n        if (y < r) {\n            float x = sqrt(r * r - y * y);\n            vec2 rot = vec2(-angle, cos(angle));\n            \n            col += cs(ro + rd * (t - x) - s, rot) * .55 * (1. - s / 13.0); \n            col += cs(ro + rd * (t + x) - s, rot) * .75 * (1. - s / 13.0);\n            \n            if (col.x > .0) break;\n        }\n    }\n    \n    return vec4(col, t1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 U = (2. * fragCoord - iResolution.xy ) / iResolution.y;\n\n    vec3 col = vec3(.06, 0.05, 1.1) * smoothstep(1., .0, abs(U.y)) * .14 ;\n\t\n    vec3 ro = vec3(0., .5, 15.);\n    vec3 rd = normalize(vec3(U.x * .3, U.y * .3 - 0.0, 1.)); \n\t\n    float rot = iMouse.x / iResolution.x * 3.14 * 2.;\n    \n    ro.xz *= Rot(rot);\n\trd.xz *= Rot(rot);    \n    \n    col += drawBalls(ro, rd).rgb;\n    \n    // floor\n    float h = -ro.y / rd.y;\n    if (h > 0.) {\n        col -= .02;        \n        rd.y *= -1.;\n        S = 0.;\n        \n        col += drawBalls(vec3(ro.x, -ro.y + 3., ro.z), rd).rgb * .1;        \n    }\n    \n    fragColor = vec4(col / max(.405, smoothstep(.0, .02, length(rd.xy - vec2(.5, 0.)) / 112.)), 1.0);\n    fragColor.a = fragColor.g;\n    //fragColor = fragColor.aaaa;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}