{
    "Shader": {
        "info": {
            "date": "1668498427",
            "description": "Four Dragon Curves link up nicely to form a continuous path. Curve drawn progressively. No buffer is used, the entire curve so far is drawn every frame.\n\n<mouse>: show recursion for mouse point\n'a': show shortcut lines\n'x': show entire curve\n",
            "flags": 16,
            "hasliked": 0,
            "id": "DdXGDX",
            "likes": 16,
            "name": "Progressive Dragon Curve",
            "published": 3,
            "tags": [
                "lsystem",
                "stack",
                "dragon",
                "curve"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 269
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Progressive Dragon Curve. mla, 2022.\n//\n// Uses an explicit stack to keep track of the recursion.\n// This one keeps track of intermediate segments and avoids recursing far from\n// the point being plotted.\n//\n// <mouse>: show recursion for mouse point\n// 'a': show shortcut lines\n// 'x': show entire curve\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst int maxdepth = 10; // How deeply to recurse\n\n// Dragon Curve L-system\n#define C(turns,offset) (((turns) << 16) | ((offset) & 0xffff)) // Encoding\nconst int A = 0, B = 3, END = -1, L = -1, R = 1;\nconst int program[6] = int[] (C(0,A),C(R,B),C(0,END),C(0,A),C(L,B),C(0,END));\nconst float factor = 2.0; // (Area) scale factor\n\n// Global state\nvec2 point = vec2(0);         // The drawing point\nvec2 movingpoint = vec2(0); // The moving point\nbool foundmovingpoint = false;\nfloat pathlen = 0.0;          // Cumulative path length\n\n// Calculate and draw segment in final level\nfloat drawsegment(vec2 pos, float seglen, float theta, float t) {\n  assert(t > pathlen);\n  vec2 seg = vec2(cos(theta),sin(theta));\n  if (t >= pathlen && t < pathlen+seglen) {\n    foundmovingpoint = true;\n    movingpoint = point + (t-pathlen)*seg;\n    seglen = t-pathlen;\n  }\n  vec2 newpoint = point + seglen*seg;\n  float d = 1e8;\n  d = segment(pos,point,newpoint);\n  //polywind(pos,point,newpoint);\n  pathlen += seglen;\n  point = newpoint;\n  return d;\n}\n\nvec2 map(vec2 pos) {\n  pos = (2.0*pos - iResolution.xy)/iResolution.y;\n  pos *= 1.666;\n  pos = -pos;\n  pos -= vec2(-0.8,0.71);\n  return pos;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 pos = map(fragCoord);\n  vec2 pos2 = pos;\n  if (iMouse.z > 0.0) pos2 = map(iMouse.xy);\n  int stack[maxdepth];\n  float totalpath = 4.0*pow(factor,0.5*float(maxdepth+1));\n  float t = mod(2.0*iTime,totalpath+10.0); // Moving point position\n  t = min(t,totalpath);\n  if (key(CHAR_X)) t = totalpath;\n  float angledelta = 0.0;\n  if (!key(CHAR_Z)) angledelta = 0.015;\n  float angle = PI/2.0+angledelta;\n  float magic = 0.5*angle; // Segment rotation at each recursion level\n  float d = 1e8, d1 = 1e8; // Line distances\n  float theta = -4.0*angledelta;//0.0;       // Cumulative angle\n  float tt = 0.0;\n  // Draw four curves, which just happen to join up continuously.\n  for (int i = 0; i < 4; i++,theta+=angledelta){\n    int depth = 0;\n    stack[depth++] = B;\n    float seglen = 1.0;\n    while (depth > 0 && pathlen < t) {\n      int instr = program[stack[depth-1]++];\n      // Decode instruction\n      int turns = instr>>16;\n      int code = instr<<16>>16;\n      theta += float(turns)*angle; // Apply turn\n      if (code == END) {\n        depth--;    // Terminate level & unwind\n        seglen *= sqrt(factor);\n      } else if (depth == maxdepth) {\n        float d1 = drawsegment(pos,seglen,theta,t); // Segment\n        if (d1 < d) { d = d1; tt = pathlen; }\n      } else {\n        // Compute the end point of the segment at the current level\n        float depthdelta = float(maxdepth-depth);\n        float theta1 = theta + magic*(depthdelta-1.0);\n        // Adjust for segment type\n        if (code == A) theta1 += magic;\n        else theta1 -= magic;\n        float seglenfactor = pow(sqrt(1.0+cos(angle)),depthdelta);\n        vec2 newpoint = point+seglenfactor*seglen*vec2(cos(theta1),sin(theta1));\n        d1 = min(d1,segment(pos,point,newpoint));\n        if (distance(pos2,0.5*(point+newpoint)) > seglen) {\n          // Modify state as if we had done the full recursion\n          //polywind(pos,point,newpoint);\n          point = newpoint;\n          pathlen += seglen*pow(factor,0.5*depthdelta);\n          // Each non-final segment changes theta by angle.\n          if (code == A) theta += angle;\n          else theta -= angle;\n        } else {\n          // Actually recurse\n          stack[depth++] = code;\n          seglen /= sqrt(factor);\n        }\n      }\n    }\n  }\n  //polywind(pos,point,vec2(0)); // Just in case rounding error prevents exact closure...\n  float px = fwidth(pos.x);\n  vec3 col = texture(iChannel0,0.2*pos).xyz; //vec3(0);//vec3(1,1,0.8);\n  col = 0.1*pow(col,vec3(2.2));\n  vec3 pcol = h2rgb(tt/totalpath);\n  //if (!key(CHAR_F) && (windnum&1) != 0) col = vec3(0,0,0.05);\n  if (key(CHAR_A) || iMouse.z > 0.0) col = mix(vec3(0.5), col,smoothstep(0.0,px,d1));\n  col = mix(pcol, col,smoothstep(0.0,px,d));\n  if (foundmovingpoint) {\n    col = mix(vec3(1), col,smoothstep(0.0,px,distance(pos,movingpoint)-0.01));\n  }\n  col = pow(col,vec3(0.4545));\n  if (alert) col.r = 1.0;\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n\nbool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nconst float PI = 3.1415927;\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}\n\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}\n\n// const int KEY_ALT = 18;\n// const int KEY_PAGE_UP = 33;\n// const int KEY_PAGE_DOWN = 34;\n// const int KEY_LEFT = 37;\n// const int KEY_RIGHT = 39;\n// const int KEY_UP = 38;\n// const int KEY_DOWN = 40;\n\n// const int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\n// const int CHAR_B = 66;\n// const int CHAR_C = 67;\n// const int CHAR_D = 68;\n// const int CHAR_E = 69;\nconst int CHAR_F = 70;\n// const int CHAR_G = 71;\n// const int CHAR_H = 72;\n// const int CHAR_I = 73;\n// const int CHAR_J = 74;\n// const int CHAR_K = 75;\n// const int CHAR_L = 76;\n// const int CHAR_M = 77;\n// const int CHAR_N = 78;\n// const int CHAR_O = 79;\n// const int CHAR_P = 80;\n// const int CHAR_Q = 81;\n// const int CHAR_R = 82;\n// const int CHAR_S = 83;\n// const int CHAR_T = 84;\n// const int CHAR_U = 85;\n// const int CHAR_V = 86;\n// const int CHAR_W = 87;\nconst int CHAR_X = 88;\n// const int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}