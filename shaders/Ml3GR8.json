{
    "Shader": {
        "info": {
            "date": "1467880702",
            "description": "Analytically integrating quadratically decaying participating media within a box. No raymarching involved.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ml3GR8",
            "likes": 21,
            "name": "Box - fog density",
            "published": 3,
            "tags": [
                "3d",
                "fog",
                "box",
                "media",
                "analytical"
            ],
            "usePreview": 1,
            "username": "iq",
            "viewed": 3235
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2016 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// Analytically integrating quadratically decaying participating media within a box. \n//\n// Similar to https://www.shadertoy.com/view/XljGDy\n//\n// Density is of the form\n//\n// d(x,y,z) = [1-(x/rx)^2] * [1-(y/ry)^2] * [1-(z/rz)^2];\n//\n// this can be analytically integrable (it's a degree 6 polynomial)\n\n\n// Other Box functions (https://iquilezles.org/articles/boxfunctions)\n//\n// Intersection:     https://www.shadertoy.com/view/ld23DV\n// Occlusion:        https://www.shadertoy.com/view/4sSXDV\n// Occlusion:        https://www.shadertoy.com/view/4djXDy\n// Density:          https://www.shadertoy.com/view/Ml3GR8\n// Fake soft shadow: https://www.shadertoy.com/view/WslGz4\n// Gradient:         https://www.shadertoy.com/view/wlcXD2\n\n\n\n//-------------------------------------------------------------------------------------------\n\nvec2 iBox( in vec3 ro, in vec3 rd, in mat4 txx, in mat4 txi, in vec3 rad, out vec3 resNor ) \n{\n    // convert from ray to box space\n\tvec3 rdd = (txx*vec4(rd,0.0)).xyz;\n\tvec3 roo = (txx*vec4(ro,1.0)).xyz;\n\n\t// ray-box intersection in box space\n    vec3 m = 1.0/rdd;\n    vec3 n = m*roo;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\t\n\tif( tN > tF || tF < 0.0) return vec2(-1.0);\n\n\tvec3 nor = -sign(rdd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\n    // convert to ray space\n\t\n\tresNor = (txi * vec4(nor,0.0)).xyz;\n\n\treturn vec2( tN, tF );\n}\n\nmat4 rotationAxisAngle( vec3 v, float angle )\n{\n    float s = sin( angle );\n    float c = cos( angle );\n    float ic = 1.0 - c;\n\n    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,\n                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,\n                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,\n\t\t\t     0.0,                0.0,                0.0,                1.0 );\n}\n\nmat4 translate( float x, float y, float z )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t x,   y,   z,   1.0 );\n}\n\n//======================================================================================\n\nfloat boxDensity( vec3 wro, vec3 wrd,   // ray origin, ray direction\n                  mat4 txx, vec3 r,     // box center and orientation, box radius\n                  float dbuffer )       // depth buffer\n{\n    vec3 d = (txx*vec4(wrd,0.0)).xyz;\n\tvec3 o = (txx*vec4(wro,1.0)).xyz;\n\n\t// ray-box intersection in box space\n    vec3 m = 1.0/d;\n    vec3 n = m*o;\n    vec3 k = abs(m)*r;\n    vec3 ta = -n - k;\n    vec3 tb = -n + k;\n\tfloat tN = max( max( ta.x, ta.y ), ta.z );\n\tfloat tF = min( min( tb.x, tb.y ), tb.z );\n\tif( tN > tF || tF < 0.0) return 0.0;\n\n    // not visible (behind camera or behind dbuffer)\n    if( tF<0.0 || tN>dbuffer ) return 0.0;\n\n    // clip integration segment from camera to dbuffer\n    tN = max( tN, 0.0 );\n    tF = min( tF, dbuffer );\n    \n    // move ray to the intersection point\n    o += tN*d; tF=tF-tN; tN=0.0;\n\n    // density calculation. density is of the form\n    //\n    // d(x,y,z) = [1-(x/rx)^2] * [1-(y/ry)^2] * [1-(z/rz)^2];\n    //\n    // this can be analytically integrable (it's a degree 6 polynomial):\n    \n    vec3 a = 1.0 -     (o*o)/(r*r);\n    vec3 b =     - 2.0*(o*d)/(r*r);\n    vec3 c =     -     (d*d)/(r*r);\n    \n    float t1 = tF;\n    float t2 = t1*t1;\n    float t3 = t2*t1;\n    float t4 = t2*t2;\n    float t5 = t2*t3;\n    float t6 = t3*t3;\n    float t7 = t3*t4;\n\n    float f = (t1/1.0) *(a.x*a.y*a.z) + \n              (t2/2.0) *(a.x*a.y*b.z + a.x*b.y*a.z + b.x*a.y*a.z) + \n              (t3/3.0) *(a.x*a.y*c.z + a.x*b.y*b.z + a.x*c.y*a.z + b.x*a.y*b.z + b.x*b.y*a.z + c.x*a.y*a.z) +\n              (t4/4.0) *(a.x*b.y*c.z + a.x*c.y*b.z + b.x*a.y*c.z + b.x*b.y*b.z + b.x*c.y*a.z + c.x*a.y*b.z + c.x*b.y*a.z) + \n              (t5/5.0) *(a.x*c.y*c.z + b.x*b.y*c.z + b.x*c.y*b.z + c.x*a.y*c.z + c.x*b.y*b.z + c.x*c.y*a.z) + \n              (t6/6.0) *(b.x*c.y*c.z + c.x*b.y*c.z + c.x*c.y*b.z) + \n              (t7/7.0) *(c.x*c.y*c.z);\n      \n    return f;\n    \n}\n\n\nfloat plnIntersect( in vec3 ro, in vec3 rd, vec4 pln )\n{\n    return (pln.w - dot(ro,pln.xyz))/dot(rd,pln.xyz);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord.xy-iResolution.xy) / iResolution.y;\n    \n\tvec3 ro = vec3(0.0, 0.2, 3.0 );\n\tvec3 rd = normalize( vec3(p,-3.0) );\n\t\n    // box\n    vec3 cen = cos( iTime*vec3(1.0,1.1,1.3) + vec3(2.0,1.5,1.5) + 0.0 )*vec3(1.2,0.3,0.7) + vec3(0.0,0.2,0.5);\n    vec3 rad = vec3(0.4,0.6,0.8);\n    // planes\n    vec4 pl1 = vec4(  0.0, 1.0, 0.0, 0.0 );\n    vec4 pl2 = vec4(  1.0, 0.0, 0.0, 1.0 );\n    vec4 pl3 = vec4( -1.0, 0.0, 0.0, 1.0 );\n    vec4 pl4 = vec4(  0.0, 0.0,-1.0, 1.0 );\n    \n    float th = (-1.0+2.0*smoothstep( 0.8, 0.9, sin( iTime*1.0 )));\n    th *= iResolution.x/iResolution.y;\n    //th = (2.0*iMouse.x-iResolution.x) / iResolution.y;\n    \n    vec3 lig = normalize( vec3(0.6,0.3,0.8) );\n\n\n\tmat4 rot = rotationAxisAngle( normalize(vec3(1.0,1.0,0.0)), iTime );\n\tmat4 tra = translate( cen.x, cen.y, cen.z );\n\tmat4 txi = tra * rot; \n\tmat4 txx = inverse( txi );\n        \n    //float t1 = sphIntersect( ro, rd, sph );\n    vec3 bnor;\n    vec2 br = iBox( ro, rd, txx, txi, rad, bnor ) ;\n    float t1 = br.x;\n    \n    float t2 = plnIntersect( ro, rd, pl1 );\n    float t3 = plnIntersect( ro, rd, pl2 );\n    float t4 = plnIntersect( ro, rd, pl3 );\n    float t5 = plnIntersect( ro, rd, pl4 );\n    \n    float tmin = 1000.0;\n    vec4  omin = vec4(0.0);\n    if( t2>0.0 && t2<tmin ) { tmin=t2; omin=pl1; }\n    if( t3>0.0 && t3<tmin ) { tmin=t3; omin=pl2; }\n    if( t4>0.0 && t4<tmin ) { tmin=t4; omin=pl3; }\n    if( t5>0.0 && t5<tmin ) { tmin=t5; omin=pl4; }\n\n    vec3 col = vec3(0.0);\n    \n    if( tmin<999.0 )\n    {    \n        vec3 pos = ro + tmin*rd;\n\n        col = vec3(0.1,0.15,0.2);\n        col *= 0.8 + 0.4*dot(omin.xyz,lig);\n        \n        vec3 w = abs(omin.xyz);\n        col = (texture( iChannel0, 0.5*pos.zx ).xyz*w.y+\n               texture( iChannel0, 0.5*pos.xy ).xyz*w.z+\n               texture( iChannel0, 0.5*pos.yz ).xyz*w.x)/(w.x+w.y+w.z);\n        col *= 0.3;\n        float occ = 1.0;\n        occ *= smoothstep( 0.0, 0.5, length( pos.xy-vec2( 1.0, 0.0)));\n        occ *= smoothstep( 0.0, 0.5, length( pos.xy-vec2(-1.0, 0.0)));\n        occ *= smoothstep( 0.0, 0.5, length( pos.yz-vec2( 0.0,-1.0)));\n        occ *= smoothstep( 0.0, 0.5, length( pos.xz-vec2( 1.0,-1.0)));\n        occ *= smoothstep( 0.0, 0.5, length( pos.xz-vec2(-1.0,-1.0)));\n        col *= vec3(0.4,0.3,0.2) + vec3(0.6,0.7,0.8)*occ;\n        \n        \n    }\n\n    if( p.x<th && t1>0.0 && t1<tmin )\n    {\n        vec3 pos = ro + t1*rd;\n        \n        col = vec3(0.3);\n                \n        float occ = 1.0;\n        occ = 0.5 + 0.5*bnor.y;\n        occ *= clamp( ( pos.x+1.0)*3.0, 0.0, 1.0 );\n        occ *= clamp( (-pos.x+1.0)*3.0, 0.0, 1.0 );\n        occ *= clamp( ( pos.y-0.0)*3.0, 0.0, 1.0 );\n        occ *= clamp( ( pos.z+1.0)*3.0, 0.0, 1.0 );\n        col *= 0.5 + 0.5*occ;\n    }\n\n   //col *= 0.0;\n   if( p.x>th )\n    {\n        float h = boxDensity(ro, rd, txx, rad, tmin );\n        if( h>0.0 )\n        {\n            col += h;\n            //col += smoothstep( 0.1,1.2,h);\n            //col = mix( col, vec3(1.0,1.0,1.0), clamp(h,0.0,1.0) );\n            //if( h>1.0 ) col=vec3(1.0,0.0,0.0);\n        }\n    }\n    \n    col = sqrt( col );\n    \n    col *= smoothstep( 0.010,0.011,abs(p.x-th));\n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}