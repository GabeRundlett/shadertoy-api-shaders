{
    "Shader": {
        "info": {
            "date": "1626958728",
            "description": "a custom way to get uv from 3 point on a triangle.\nit was needed for a custom software render i'm doing at the moment.",
            "flags": 0,
            "hasliked": 0,
            "id": "7tlSDB",
            "likes": 0,
            "name": "triangle rasterization",
            "published": 3,
            "tags": [
                "raytracing",
                "triangle",
                "texture",
                "uv"
            ],
            "usePreview": 0,
            "username": "Cewein",
            "viewed": 460
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //map to 0 and 1 then get x and y distance\n    vec2 p = fragCoord/iResolution.xy;\n    float x = 1.0/3.0;\n    float y = 1.0/4.0;\n    \n    //setup 3 vertices to make a triangle\n    vec2 p1 = vec2(y*2.0,y*3.0);    \n    vec2 p2 = vec2(x*1.0,y*1.0);    \n    vec2 p3 = vec2(x*2.0,y*1.0); \n    \n    //get the first vertex and the two vector leading to p2 and p3 from p1\n    vec2 v0 = p1;\n    vec2 v1 = vec2(p2.x - v0.x, p2.y - v0.y);\n    vec2 v2 = vec2(p3.x - v0.x, p3.y - v0.y);\n    \n    //check for each pixel v if it belong to the triangle\n    //by solving v = v0 + av1 +bv2\n    float bottom = (v1.x*v2.y-v1.y*v2.x);\n    \n    float a = (p.x*v2.y-p.y*v2.x) - (v0.x*v2.y-v0.y*v2.x);\n    a /= bottom;\n   \n    float b = (p.x*v1.y-p.y*v1.x) - (v0.x*v1.y-v0.y*v1.x);\n    b /= bottom; \n    \n    //tell if a pixel uv is in the triangle or not\n    vec3 color = vec3(0.35);\n    if(a > 0.0 && -b > 0.0)\n        if((a-b)<1.0)\n            color = vec3(1.);\n    \n    \n    if(color == vec3(1.))\n    {   \n        //using barycentric coordinates we can get good weight for each vertex\n        float bottom =((p2.y-p3.y)*(p1.x-p3.x)+(p3.x-p2.x)*(p1.y-p3.y));\n        float w1 = ((p2.y-p3.y)*(p.x-p3.x)+(p3.x-p2.x)*(p.y-p3.y))\n                  /bottom;\n        float w2 = ((p3.y-p1.y)*(p.x-p3.x)+(p1.x-p3.x)*(p.y-p3.y))\n                  /bottom;\n        float w3 = 1.0 - w1 - w2;\n        \n        //mix all the color from the computed weigth\n        color = (w1*vec3(1.,0.,0.)+w2*vec3(0.,1.,0.)+w3*vec3(0.,0.,1.))/(w1+w2+w3);\n\n    }   \n    \n    fragColor = vec4(color,0.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}