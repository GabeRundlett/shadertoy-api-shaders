{
    "Shader": {
        "info": {
            "date": "1677790116",
            "description": "C0: Sandstone city\nI enjoyed Xor's city like tweets like this:\nhttps://twitter.com/XorDev/status/1631107543387742210?s=20\nWanted to try to create something like it.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ddtGDB",
            "likes": 45,
            "name": "Sandstone city",
            "published": 3,
            "tags": [
                "xor",
                "city"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 518
        },
        "renderpass": [
            {
                "code": "// CC0: Sandstone city\n// I enjoyed Xor's city like tweets like this:\n//  https://twitter.com/XorDev/status/1631107543387742210?s=20\n//  Wanted to try to create something like it.\n\n#define TIME            iTime\n#define RESOLUTION      iResolution\n\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define TOLERANCE       0.0001\n#define MAX_RAY_LENGTH  24.0\n#define MAX_RAY_MARCHES 70\n#define MAX_SHADOW_MARCHES 30\n#define NORM_OFF        0.001\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\nfloat ubox(vec3 p, vec3 b) {\n  vec3 q = p;\n  q.xz = abs(p.xz);\n  q -= b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\nfloat rep(vec3 p) {\n  p.xz += 0.5*TIME;\n  float d = 1E6;\n  vec2 n = mod2(p.xz, vec2(4.));\n  p.y -= -1.75;\n  float sc = 1.;\n  const float zz = 2.0;\n  const float hh = 1.0;\n  for (int i = 0; i < 7; ++i) {\n    float dd = ubox(p, vec3(1.0, hh, 1.0))-0.025;\n    d = min(d, dd*sc);\n    \n    p.xz = abs(p.xz);\n    p -= vec3(1.0, -hh*0.25, 1.0);\n    p *= zz;\n    sc /= zz;\n  }\n  \n  return d;\n}\n\nfloat df(vec3 p) {\n  float d1 = p.y+2.25;\n  float d2 = rep(p);\n  float d= d1;\n  d = min(d, d2);\n\n  return d;\n}\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, out int iter) {\n  float t = 0.0;\n  const float tol = TOLERANCE;\n  vec2 dti = vec2(1e10,0.0);\n  int i = 0;\n  for (i = 0; i < MAX_RAY_MARCHES; ++i) {\n    float d = df(ro + rd*t);\n    if (d<dti.x) { dti=vec2(d,t); }\n    if (d < TOLERANCE || t > MAX_RAY_LENGTH) {\n      break;\n    }\n    t += d;\n  }\n  if(i==MAX_RAY_MARCHES) { t=dti.y; };\n  iter = i;\n  return t;\n}\n\nfloat softShadow(in vec3 ps, in vec3 ld, in float mint, in float k) {\n  float res = 1.0;\n  float t = mint*2.0;\n  for (int i=0; i<MAX_SHADOW_MARCHES; ++i) {\n    vec3 p = ps + ld*t;\n    float d = df(p);\n    res = min(res, k*d/t);\n    if (res < TOLERANCE) break;\n    \n    t += max(d, mint);\n  }\n  return clamp(res, 0.0, 1.0);\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n  const vec3 lightDir = normalize(vec3(5.0, 6.0, 2.0)*2.0);\n  int iter;\n  float t = rayMarch(ro, rd, iter);\n  vec3 col = vec3(0.0);\n  vec3 p = ro+rd*t;\n  vec3 n = normal(p);\n  float sd = softShadow(p, lightDir, 0.025, 4.0);\n  float dif = max(dot(lightDir, n), 0.0);\n  dif *= dif;\n  const float h = 0.05;\n  const vec3 dcol = HSV2RGB(vec3(h, 0.75, 1.0));\n  float ii = float(iter)/float(MAX_RAY_MARCHES);\n  if (t < MAX_RAY_LENGTH) {\n    col = dcol;\n    col *= mix(0.05, 1.0, dif*sd);\n    col *= 1.0/(0.05+ii);\n  }\n  col = mix(dcol, col, exp(-0.25*max(t-7., 0.)));\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  const vec3 ro = vec3(2.0, 2.5, -2.0);\n  const vec3 la = vec3(0.0, 0.0, 0.0);\n  const vec3 up = normalize(vec3(0.0, 1.0, 0.0));\n\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross(up, ww ));\n  vec3 vv = (cross(ww,uu));\n  const float fov = tan(TAU/6.);\n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww);\n\n  vec3 col = render(ro, rd);\n  col *= smoothstep(1.75, 1.0-0.5, length(pp));\n  col = aces_approx(col); \n  col = sRGB(col);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p,pp);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}