{
    "Shader": {
        "info": {
            "date": "1695410104",
            "description": "dumb method... fast ish but fails to converge and only works for uniform distribution\n",
            "flags": 32,
            "hasliked": 0,
            "id": "cddcWS",
            "likes": 1,
            "name": "dsort",
            "published": 3,
            "tags": [
                "thing"
            ],
            "usePreview": 0,
            "username": "01000001",
            "viewed": 52
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 U ){\n    \n    vec2 r = iResolution.xy;\n    vec2 uv = U/r;\n    \n\n    O = vec4(smoothstep(1./r.y, 0., abs(texture(iChannel0, vec2(uv.x, 0)).x-uv.y)));\n    \n    // Smoothstep is an intentional design choice to give randomized brightness to particles\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const uint k = 1103515245U;\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\nconst int p = 5;\nvec3 nhash( uvec3 x ){\n    vec3 t = vec3(0);\n    for(int i = p; i-->0;){\n        t += hash(x + uvec3(i));\n    }\n    t /= float(p);\n    return t;\n}\n\nvoid mainImage( out vec4 O, vec2 U ){\n    if (U.y < 1.){\n        vec2 r = iResolution.xy;\n        if (iFrame < 5){\n            O = vec4(0);\n            O.x = hash(uvec3(U.x, iDate.w, iDate.z)).x;\n        } else {\n            O = texture(iChannel0, U/iResolution.xy);\n         \n            // Single thread. Do whatever you want, then set c1 and c2\n            // Sort here\n            \n            // Do the square thingy that works fast\n            \n            int x = int(U.x);\n            int w = int(r.x);\n\n\n            vec3 h = hash(uvec3(iFrame, iTime, -iFrame));\n            int c = int(h.x * r.x);\n            \n            float t = texelFetch(iChannel0, ivec2(c, 0), 0).x\n                - float(c)/r.x;\n            int c2 = (c + \n                int(\n                    float(w>>1)*\n                        abs(t)\n                ) + iFrame%4\n            )%w;\n            \n\n            if (c2 < c){ c ^= c2; c2 ^= c; c^= c2; }// C2 always bigger\n            if (x==c){\n                float n = texelFetch(iChannel0, ivec2(c2, 0), 0).x;\n                if ( n < O.x) \n                    O.x = n;\n            }\n            \n            if (x==c2){\n                float n = texelFetch(iChannel0, ivec2(c, 0), 0).x;\n                if (n > O.x) \n                    O.x = n;\n            }\n        }\n    } else {\n        O = vec4(0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}