{
    "Shader": {
        "info": {
            "date": "1717366282",
            "description": "Firts shader With ChatGpt",
            "flags": 0,
            "hasliked": 0,
            "id": "XXVGRW",
            "likes": 1,
            "name": "Chat Gpt Code 1",
            "published": 3,
            "tags": [
                "flowers",
                "chatgpt"
            ],
            "usePreview": 0,
            "username": "archon",
            "viewed": 100
        },
        "renderpass": [
            {
                "code": "#define S(a, b, t) smoothstep(a, b, t)\n#define PI 3.14159265359\nfloat random(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n// Función para crear una forma de caja con bordes suaves\nfloat TaperBox(vec2 p, float wb, float wt, float yb, float yt, float blur) {\n    float m = S(-blur, blur, p.y - yb) * S(blur, -blur, p.y - yt);\n    p.x = abs(p.x);\n    float w = mix(wb, wt, (p.y - yb) / (yt - yb));\n    m *= S(blur, -blur, p.x - w);\n    return m;\n}\n\n// Función para coordenadas polares\nfloat PolarCoordShapes(in vec2 uv) {\n    uv.y += 0.01 - 0.05;\n    float Polar = atan(uv.x, uv.y);\n    float r1 = length(uv) * 5.0;\n    Polar = abs(cos(Polar * 3.0 + iTime));\n    return smoothstep(Polar, Polar - 0.1, r1);\n}\n\n// Función para crear un círculo\nfloat Circle1(in vec2 uv) {\n    uv.y += -0.05;\n    return S(0.05, 0.05 - 0.02, length(uv));\n}\n\n// Función para dibujar una flor\nvec3 Flower(in vec2 uv, in vec2 p, float scale, vec3 FlowerColor) {\n    uv -= p; // Mover el punto uv a la posición de la flor\n    uv /= scale; // Escalar la flor\n    vec3 color = vec3(0.0);\n    \n    float Polar = PolarCoordShapes(uv);\n    float d = TaperBox(uv, 0.03, 0.03, -0.25, 0.00, 0.01);\n    float d2 = Circle1(uv);\n    \n    if (d > 0.0) {\n        color = vec3(0.0, 1.0, 0.0); // Color del tallo\n    }\n    if (Polar > 0.0) {\n        // Agregar detalles de ruido al color de los pétalos\n        float noiseVal = noise(uv);\n        color = FlowerColor + vec3(noiseVal * 0.3);\n    }\n    if (d2 > 0.0) {\n        color = vec3(1.0, 1.0, 0.0); // Color del centro de la flor\n    }\n    \n    return color;\n}\n\n// Función principal\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Coordenadas normalizadas del pixel (de 0 a 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0.0);\n    \n    // Color de fondo (azul claro en este caso)\n    vec3 backgroundColor = vec3(0.000,0.502,1.000);\n    \n    float numFlowers = 10.0;\n    float minScale = 0.1;\n    float maxScale = 0.3;\n    \n    for (float i = 0.0; i < numFlowers; i++) {\n        for (float j = 0.0; j < numFlowers; j++) {\n            vec2 pos = (vec2(i, j) / numFlowers - 0.5) * 2.0;\n            float scale = mix(maxScale, minScale, pos.y + 0.5);\n            vec3 flowerColor = vec3(\n                0.5 + 0.5 * sin(i + iTime),\n                0.5 + 0.5 * sin(j + iTime),\n                0.5 + 0.5 * sin(i + j + iTime)\n            );\n            float heightOffset = 0.3 * sin(i + j + iTime) * scale;\n            pos.y += heightOffset;\n            col += Flower(uv, pos, scale, flowerColor);\n        }\n    }\n    \n    // Mezclar el color de fondo con el color de las flores\n    col = mix(backgroundColor, col, 0.5); // Ajusta el factor de mezcla según lo deseado\n    \n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}