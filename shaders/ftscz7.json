{
    "Shader": {
        "info": {
            "date": "1647698562",
            "description": "TP 1 & 2 \nModeling shapes with signed distance fields",
            "flags": 0,
            "hasliked": 0,
            "id": "ftscz7",
            "likes": 2,
            "name": "Fork L2 - TP1 & Nordine 076",
            "published": 3,
            "tags": [
                "distancefields",
                "scalarfields"
            ],
            "usePreview": 0,
            "username": "Nordine",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "// Modeling - 2022.02.06\n// Eric Galin \n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// Primitives \n\n// Sphere \n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p, vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Sphere \n// p : point\n// n : Normal of plane\n// o : Point on plane\nfloat Plane(vec3 p, vec3 n, vec3 o)\n{\n    return dot((p-o),n);\n}\n\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n    return min(a,b);\n}\n\n\n// Intersection\n// a,b : field function of left and right sub-trees\nfloat Intersection(float a,float b)\n{\n    return max(a,b);\n}\n\n\n/*float Cercle()\n{\n    d\n}\n*/\n\n// Boite \n// p : point\n// c : position centre\n// tx : taille x\n// ty : taille y\n// tz : taille z\n\n\nfloat Boite(vec3 p, vec3 c, float tx,float ty,float tz) // fonction qui crée une boite\n{\n    vec3 o1 = c + vec3(tx,0,0); // j'initialise la position des faces de la boite\n    vec3 o2 = c + vec3(0,ty,0); // (leurs distance depuis le centre)\n    vec3 o3 = c + vec3(0,0,tz);\n    vec3 o4 = c + vec3(-tx,0,0);\n    vec3 o5 = c + vec3(0,-ty,0);\n    vec3 o6 = c + vec3(0,0,-tz);\n    vec3 n1 = vec3(1,0,0); // je crée les 6 normale \n    vec3 n2 = vec3(0,1,0);\n    vec3 n3 = vec3(0,0,1);\n    vec3 n4 = vec3(-1,0,0);\n    vec3 n5 = vec3(0,-1,0);\n    vec3 n6 = vec3(0,0,-1);\n    float p1 = Plane(p,n1,o1); // je crée les 6 plans d'une boite\n    float p2 = Plane(p,n2,o2);\n    float p3 = Plane(p,n3,o3);\n    float p4 = Plane(p,n4,o4);\n    float p5 = Plane(p,n5,o5);\n    float p6 = Plane(p,n6,o6);\n    float f1 = Intersection(p1,p2); //On relie tout les cotés de la boite\n    float f2 = Intersection(p3,p4);\n    float f3 = Intersection(p5,p6);\n    return Intersection(f1,Intersection(f2,f3)); // retourne la distance euclidienne d'une boite\n}\n\n\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n    float p1 = Boite(p,vec3(24.0,0.0,0.0),1.0,1.0,6.0); // je crée les 4 pilliers qui tiennent\n    float p2 = Boite(p,vec3(24.0,12.0,0.0),1.0,1.0,6.0); // la base du lit\n    float p3 = Boite(p,vec3(0.0,12.0,0.0),1.0,1.0,6.0);\n    float p4 = Boite(p,vec3(0.0,0.0,0.0),1.0,1.0,6.0);\n    \n    float u1 = Union(p1,p2); // je les lies\n    float u2 = Union(p3,p4);\n    float Ensemble_pillier_barre = Union(u1,u2); // stock les barres des pilliers\n    \n    float p5 = Boite(p,vec3(0.0,0.0,5.0),0.15,0.15,2.0); // je crée les 4 sous-pilliers\n    float sp1 = Sphere(p,vec3(0.0,0.0,7.2),0.9); // je crée les 4 spheres qui seront soutenues\n    \n    float p6 = Boite(p,vec3(24.0,0.0,5.0),0.15,0.15,2.0);\n    float sp2 = Sphere(p,vec3(24.0,0.0,7.2),0.9);\n    \n    float p7 = Boite(p,vec3(24.0,12.0,5.0),0.15,0.15,2.0);\n    float sp3 = Sphere(p,vec3(24.0,12.0,7.2),0.9);\n    \n    float p8 = Boite(p,vec3(0.0,12.0,5.0),0.15,0.15,2.0);\n    float sp4 = Sphere(p,vec3(0.0,12.0,7.2),0.9);\n    \n    float boule1 = Union(p5,sp1);\n    float boule2 = Union(p6,sp2);\n    float boule3 = Union(p7,sp3);\n    float boule4 = Union(p8,sp4);\n    \n    float Ensemble_pillier_boule = Union(boule1,Union(boule2,Union(boule3,boule4))); //stock les boules\n    \n    float Ensemble_pillier = Union(Ensemble_pillier_boule,Ensemble_pillier_barre); // stock pillier\n    \n    float oreiller = Boite(p,vec3(4.5,6.0,3.5),3.0,5.0,0.7);\n    \n    float base_lit = Boite(p,vec3(12.0,6.0,2.0),12.0,6.0,1.0);\n    \n    float lit = Union(Union(base_lit,Ensemble_pillier),oreiller); // crée le lit\n    \n    float placard_base = Boite(p,vec3(-6,-10,0.0),2.0,6.0,10.5);\n    \n    float placard_separe_porte = Boite(p,vec3(-4.1,-10.0,0.3),0.3,0.3,10.2);\n    \n    float base_placard = Union(placard_base,placard_separe_porte);\n    \n    float poignee_droite = Boite(p,vec3(-3.8,-8.6,3.5),0.3,0.3,1.2);\n        \n    float poignee_gauche = Boite(p,vec3(-3.8,-11.4,3.5),0.3,0.3,1.2);\n    \n    float ensemble_poignees = Union(poignee_gauche,poignee_droite);\n    \n    float placard = Union(base_placard,ensemble_poignees); // crée le placard\n        \n    return Union(Plane(p,vec3(0.0,0.0,1.0),vec3(0.0,0.0,-4.0)),Union(lit,placard));// crée la scene\n\n    \n  \n  \n}\n\n// Analysis of the scalar field \n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps = 0.001;\n  vec3 n;\n  float v = object(p);\n  n.x = object( vec3(p.x+eps, p.y, p.z) ) - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ) - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ) - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n  // Start at the origin\n  float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p);\n    // Hit object\n      if (v < 0.0)\n      {\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Lighting \n\n// Ambient occlusion\n// p : Point\n// n : Normal\n// r : Radius for ambient occlusion\n// a : Number of smaples\nfloat AmbientOcclusion(vec3 p,vec3 n, float r, int a)\n{\n    if (a==0) { return 1.0; }\n    \n\tfloat ao=0.0; \n    \n    for (int i=0;i<a;i++)\n    {\n \t\tvec3 d = Cosine(581.123*float(i) , n);\n\n        int s;\n        bool h;\n        float t=SphereTrace(p,d,r,h,s);\n        if (!h) {ao+=1.0;}\n    }\n    \n    ao/=float(a);\n\treturn ao;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.45,0.55,0.99),vec3(0.65,0.69,0.99), d.z*0.5+0.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p+0.1*n,l,100.0,h,s);\n    if (!h)\n    {\n      return 1.0;\n    }\n    return 0.0; \n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n     // Point light\n    const vec3 lp = vec3(5.0, 10.0, 25.0);\n    \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n\n    // Ambient color\n    vec3 ambient = 0.25+0.25*background(n);\n    \n    // Ambient occlusion\n    ambient += 0.15 * AmbientOcclusion(p+0.1*n,n,5.0,0) * vec3(1.0,1.0,1.0);\n    \n    // Shadow computation\n    float shadow = Shadow(p,n,l);\n    \n    // Phong diffuse\n    vec3 diffuse = 0.35  * clamp(dot(n, l),0.0,1.0) * vec3(1.0,1.0,1.0);\n\n    // Specular\n    vec3 r = reflect(e,n);\n    vec3 specular = 0.15 * pow(clamp(dot(r,l),0.0,1.0),30.0) * vec3(1.0,1.0,1.0);\n    vec3 c = ambient + shadow * (diffuse + specular);\n    return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t = float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p = (-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip = true;\n    }\n       else\n       {\n           pip = false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n, rd);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Modeling\n// Eric Galin\n\n// Hashing function\n// Returns a random number in [-1,1]\nfloat Hash(float seed)\n{\n    return fract(sin(seed)*43758.5453 );\n}\n\n// Cosine direction \n// seed : Random seed\n//    n : Normal\nvec3 Cosine( float seed, vec3 n)\n{\n    float u = Hash( 78.233 + seed);\n    float v = Hash( 10.873 + seed);\n\n    // Method by fizzer: http://www.amietia.com/lambertnotangent.html\n    float a = 6.2831853 * v;\n    u = 2.0 * u - 1.0;\n    return normalize( n + vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u) );\n}\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m, vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.5;\n    \n    // Origin\n    ro=vec3(37.0,0.0,15.0);\n    ro*=Rz(a); \n\n    // Target\n    vec3 ta = vec3(0.0,0.0,1.0);\n    \n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}