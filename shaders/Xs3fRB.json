{
    "Shader": {
        "info": {
            "date": "1527444595",
            "description": "Tiles the plane by choosing an offset and rotation for each voronoi cell. The offset+rotation is then used for a texture-lookup.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xs3fRB",
            "likes": 20,
            "name": "tiled voronoi texture",
            "published": 3,
            "tags": [
                "2d",
                "voronoi",
                "tiling"
            ],
            "usePreview": 0,
            "username": "pyBlob",
            "viewed": 1590
        },
        "renderpass": [
            {
                "code": "#define VIS\nconst float MF     = 0.0; // 0: use rotation, 1: don't\nconst float jitter = 0.6; // voronoi offset\nconst float texId  = 0.0; // iChannel<texId>\n\nvec4 noise(ivec2 v)\n{\n    v.y += 23 * v.x;\n    v.x += 107 * v.y;\n    v %= 256;\n    v += 256;\n    v %= 256;\n    return texelFetch(iChannel2, v, 0);\n}\n\nvec4 voronoi(vec2 uv, out float f)\n{\n    float size = 2.0;\n    ivec2 grid = ivec2(round(uv/size + 0.5));\n    vec2 center, ocenter, rot, orot;\n    float dist = 100.0, odist = 100.0;\n    for (int i=-2 ; i<=2 ; i++)\n        for (int j=-2 ; j<=2 ; j++)\n        {\n            ivec2 ngrid = grid + ivec2(i, j);\n            vec2 ncenter = vec2(ngrid) + (noise(ngrid).xy - 0.5) * jitter;\n            vec2 noffset = noise(-ngrid.yx).xy * 3.0;\n            ncenter *= size;\n            noffset *= size;\n            vec2 nrot = normalize(noise(ngrid+ivec2(4,159)).xy - 0.5);\n            float ndist = length(uv - ncenter);\n            if (ndist >= dist)\n            {\n                if (ndist >= odist)\n                    continue;\n                orot = nrot;\n                ocenter = ncenter - noffset;\n                odist = ndist;\n                continue;\n            }\n            ocenter = center;\n            orot = rot;\n            odist = dist;\n            center = ncenter - noffset;\n            rot = nrot;\n            dist = ndist;\n        }\n    f = odist - dist;\n    rot = normalize(mix(rot, vec2(1,0), MF));\n    orot = normalize(mix(orot, vec2(1,0), MF));\n    mat2 mrot = mat2(rot, vec2(-rot.y,rot.x));\n    mat2 morot = mat2(orot, vec2(-orot.y,orot.x));\n    return vec4(\n        mrot*(uv-center),\n        morot*(uv-ocenter)\n    );\n    //return vec2(dist, 0);\n}\n\nvec4 tsample(vec2 uv)\n{\n    return mix(\n        texture(iChannel0, uv).rrrr,\n    \ttexture(iChannel1, uv),\n        texId\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.0)/iResolution.yy;\n    uv *= 8.0;\n\n    float f;\n    vec4 v;\n\n    \n    fragColor = texture(iChannel1, uv);\n    \n    v = voronoi(uv*2.0, f)*0.5;\n    fragColor = mix(\n        tsample(v.xy),\n        tsample(v.zw),\n        smoothstep(1.0, -1.0, f * 1.5)\n    );\n    \n#ifdef VIS\n    fragColor = mix(fragColor, vec4(0), smoothstep(1.0, 0.0, f*20.0) * smoothstep(1.0, -1.0, uv.y));\n    \n    vec2 offset = vec2(cos(iTime), 0)*0.0;\n    /*f = length(\n        uv + offset\n    ) -2.0;*/\n    f = uv.x;\n    fragColor = mix(\n        fragColor,\n        tsample(uv + -0.1 * offset),\n        smoothstep(1.0, -1.0, f * 20.0)\n    );\n    fragColor = mix(\n        fragColor,\n        vec4(0),\n        smoothstep(1.0, -1.0, abs(f * 20.0)-1.0)\n    );\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}