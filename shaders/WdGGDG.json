{
    "Shader": {
        "info": {
            "date": "1570938787",
            "description": "A snowman in a snowglobe",
            "flags": 0,
            "hasliked": 0,
            "id": "WdGGDG",
            "likes": 4,
            "name": "Shadertober 11 - Snow",
            "published": 3,
            "tags": [
                "snow",
                "inktober",
                "shadertober",
                "backwardscaptain"
            ],
            "usePreview": 0,
            "username": "BackwardsCap",
            "viewed": 450
        },
        "renderpass": [
            {
                "code": "#define MAX_DIST 50.0\nfloat g;\n\nmat2 rot(float t)\n{\n    float s = sin(t);\n    float c = cos(t);\n    return mat2(c, -s, s, c);\n}\n\n//thanks to iq for sharing this knowledge!\nfloat cyl(vec3 p, float ra, float rb, float h)\n{\n    vec2 d=vec2(length(p.xz)-2.0*ra+rb,abs(p.y)-h);\n    return min(max(d.x,d.y),0.0)+length(max(d,0.0))-rb;\n}\n\nfloat smin(float a, float b, float k)\n{\n    float h = max(k-abs(a-b),0.0)/k;\n    return min(a,b)-h*h*k*(1.0/4.0);\n}\n\nfloat h21(vec2 p)\n{\n    return abs(fract(sin(dot(p,vec2(12.84,13.1523)))*21.129));\n}\n\nfloat snow(vec3 p)\n{\n    vec3 cell = vec3(4.);\n    vec3 mp = p+vec3(cos(iTime/2.-p.z/cell.z)*1.5,iTime,iTime/4.+cos(iTime/3.-p.x/cell.x)*1.5);\n    float id = floor(h21(floor(mp.xy/cell.xy))*100.);\n    float t = (100.+iTime)*2.*h21(floor(mp.xz/cell.xz));\n\n    float sn= length(mod(mp+vec3(0.,t,0),cell)-cell/2.)-.001;\n    \n    if(p.z<2.5) //clip snowflakes that are too close\n    g+=0.001/(0.01+sn*sn);\n\treturn sn;\n}\n\nvec2 map(vec3 p)\n{\n    float m = 0.;\n    float r =p.y+4.+(p.x*p.x+p.z*p.z)/200.;\n    float sn = snow(p);\n    vec3 smp = p+vec3(0,2.5,9);\n    vec3 smhp = smp+vec3(0,-4.4,0);\n    float sm = smin(smin(length(smp)-2.,length(smp+vec3(0,-2.5,0.))-1.4,.4),length(smhp)-.9,.4);\n    float smh = min(cyl(smhp+vec3(0,-.6,0),.65,.1,.05),cyl(smhp+vec3(0,-1.4,0),.4,.1,.5));\n    float sme = min(length(smhp-vec3(0.4,.24,.9))-.1,length(smhp-vec3(-0.4,.24,.9))-.1);\n    vec3 rp = smhp-vec3(0.2,0.0,0.2);\n    float hp = 3.1415927/2.;\n    rp.xy*=rot(hp);\n    rp.yz*=rot(hp*.8);\n    float n = cyl(rp,.1,4.,.1);\n    smh=min(smh,sme);\n    r=smin(r,sm,.9);\n    r=min(r,sn);\n    r=min(r,smh);\n    r=min(r,n);\n    if(r==smh)m=1.;\n    if(r==n)m=2.;\n    return vec2(r,m);\n}\n\nvec2 ray(vec3 ro, vec3 rd)\n{\n    float m = 0.0;\n    float t = 0.0;\n    for(int i=0;i<128;i++)\n    {\n        vec3 p=ro+rd*t;\n        vec2 s = map(p);\n        m=s.y;\n        if(s.x<0.00001)break;\n        t+=s.x*.8;\n        if(t>MAX_DIST)\n        {\n            t=-1.;\n            break;\n        }\n    }\n    return vec2(t,m);\n}\n\nvec3 normal(vec3 p )\n{\n    vec2 e = vec2(0.0005,0.);\n    return normalize(vec3(\n        map(p+e.xyy).x-map(p-e.xyy).x,\n        map(p+e.yxy).x-map(p-e.yxy).x,\n        map(p+e.yyx).x-map(p-e.yyx).x\n        ));\n}\n\nvoid mainImage( out vec4 c, in vec2 f )\n{\n    vec2 p = (2.*f-iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(0.,.6,2.5);\n    vec3 ta = vec3(0,0.5,2.2);\n    vec3 cf = normalize(ta-ro);\n    vec3 cu = normalize(cross(cf,vec3(0,1,0)));\n    vec3 cr = normalize(cross(cu,cf));\n    \n    vec3 rd = vec3(p.x*cu+p.y*cr+.4*cf);\n    vec2 r = ray(ro,rd);\n    \n    vec3 pos = ro+rd*r.x;\n    vec3 n = normal(pos);\n    vec3 sun = normalize(vec3(0.2,0.5,0.6));\n    float dif = clamp(dot(sun,n),0.,1.);\n    float sky = clamp(dot(n,vec3(0,1,0)),0.,1.);\n    float bou = clamp(dot(n,vec3(0,-1,0)),0.,1.);\n    float sha = step(ray(pos+n*0.001,sun).x,0.);\n    \n    vec3 col = vec3(0.5,0.5,1.)-(p.y+.3)/5.;\n    vec3 mate = vec3(1.);\n    if(r.y>.5&&r.y<1.5)mate=vec3(0.1);\n    else if(r.y>1.5){mate=vec3(0.89,0.3,0.);}\n    if(r.x>0.)\n    {\n        col=mate*vec3(1.,1.,1.8)*dif+g/2.*(abs(p.y+1.))*sha;\n        col+=mate*vec3(0.2,0.25,0.25)*sky;\n        col+=mate*vec3(0.1,0.1,0.1)*bou;\n    }\n    else col+=(g/2.)*(abs(p.y+1.));\n    float cp = length(p)-.9;\n    if(cp>0.)col=vec3(smoothstep(0.,3./iResolution.y,length(p)-.9)+.6);\n    else{\n        col+=smoothstep(1.,0.,length(p-.75)+.1)/1.1;\n\t\tcol-=smoothstep(-.2,4.,length(p)-.95)*100.;\n    }\n    c.rgb = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}