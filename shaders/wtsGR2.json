{
    "Shader": {
        "info": {
            "date": "1556982894",
            "description": "Following the really good Revision Seminar Shader from @flopine and @evvvvil and tweaking it .\nhttps://www.twitch.tv/videos/414382208\n\nFinally understand the base of Ray Marching, still exploring and unknowledgeable on lightning , shading and color",
            "flags": 0,
            "hasliked": 0,
            "id": "wtsGR2",
            "likes": 16,
            "name": "大龙猫 -:x!",
            "published": 3,
            "tags": [
                "notag"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 668
        },
        "renderpass": [
            {
                "code": "// https://iquilezles.org/articles/distfunctions\n// \n/***********************\nDefinition of the objects we want to use\n***********************/\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n    // Slice shift effect (only applied on instance of capsule)\n    p.x += clamp(sign(cos(iTime*10.+p.y*10.))/5.,0.,0.1)*.7  ;\n    \n    // Capsule formula\n    p.y -= clamp( p.y, 0.0, h );\n    return length( p ) - r;\n}\n\nfloat sphere(vec3 p, float radius)\n{\n    p += vec3(sin(iTime),cos(iTime),cos(iTime))/10.; // Sphere will move\n    return length(p)- radius;\n}\n\nfloat box(vec3 p,vec3 c){\n   \n\tvec3 q = abs(p) - c;\n    return min(0.,max(q.x,max(q.y,q.z))) + length(max(q,0.));\n}\n\n/***********************\nThe Map / Signed distance function.\nWhere you weld all your objects on the scene\n\nBasically, we are only interested to know how far we are from any points in the overall objects in the scene.\nThe function take the current position of the ray and return a float representing the distance of \nthis point compare to the overall structure\n***********************/\nfloat SDF(vec3 p){\n\n///// Pre effects that will affect all the objects\n \n     // Here the camera travelling\n     // Cicle on X and Y, Going Forward on Z (and some visual effect)         \n     p += vec3(p.z*sin(-iTime)/4.,cos(iTime)/4., sin(p.y+iTime)+iTime*4.);\n     //         ^ Yaw\n     //             ^ Translation X\n     //                               ^ Translation Y\n     //                      ^-------------^ \n     //                             |\n     //                            Circular movement on XY\n     //                                              ^ Wave effect on Z\n     //                                                            ^ Going Foward\n \n     // Repetition\n     // If you remove it, only display an element (but remove also the iTime on Z to avoid going forward)\n     p = mod(p,3.) -3.*.5;\n     \n\n///// Object definition\n    \n    // The capsule\n    // Sort of long enough to loop via the repetiton\n    float q = sdVerticalCapsule(p+vec3(.0,4.,.0),8.,.2);\n    \n    // A sphere and a Box Mixed\n    // The 2.5 value makes \"Knucklebones\" \n    // The mix + sphere motion gives some \"organic\" feeling\n    float m = 0.5*mix(sphere(p ,.55),box(p,vec3(0.5)),2.5);\n    \n \n    return min(q,m);\n\n}\n\n// Compute the normal vector at a position p on the surface of our objects\nvec3 get_normal(vec3 p){\n\n  // swizzling technics.\n  // eps.xyy <=> vec3(0.001, 0.   , 0.)\n  // eps.yxy <=> vec3(0.   , 0.001, 0.)\n  // eps.yyx <=> vec3(0.   , 0.   , 0.001)\n  vec2 eps = vec2(0.001,0.);\n    return normalize(\n             vec3(\n                  SDF(p+eps.xyy) - SDF(p-eps.xyy), // Diff in X\n                  SDF(p+eps.yxy) - SDF(p-eps.yxy), // Diff in Y\n                  SDF(p+eps.yyx) - SDF(p-eps.yyx)  // Diff in Z\n             )\n            );  // Math Vector\n}\n\n// Lighting part, still confusing\nfloat diffuse_directional(vec3 n,vec3 l,float d){\n                                      //      ^ Not conventional but I needed it to change the lighing compare to the distance\n    float a =  max(0.,dot(n,normalize(l))); // realistic lighting\n    float b =  dot(n,normalize(l))*.5+.5;   // less realistic lighting\n    return (a+b)/2.+0.1*abs(tan(d+iTime));  ; // Why not both ?\n// Experimental ^ Average \n//                      ^ Wanted a sort of wave of light based on Z , \n//                        but the wavy things on Z changes the effect (still cool)\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    /* Camera Filter Effect */\n    // Slice shift effect again but on X and Y to generate unaligned square\n    uv.y += sign(sin(uv.x*50.))/100.* sin(uv.x*uv.x +uv.y*uv.y) ;//*sin(iTime*2.);\n    uv.x += sign(cos(uv.y*50.))/100. * sin(uv.x*uv.x +uv.y*uv.y);//*cos(iTime*2.);\n   \n  \n    // Ray origin / Ray direction\n    vec3 ro = vec3(0.,0.,-5.); vec3 p = ro;\n    vec3 rd = normalize(vec3(uv,0.6));\n                             // ^ FOV / Zoom ?\n    vec3 color = vec3(0.);\n    \n    bool hit = false;\n    float shading = 0.; // Not used on seminar ?\n\n    for(float i = -0.;i<200.;i++) { // March little ray, even if it's May\n       float d = SDF(p);  // How far from my overall object\n        if(d < 0.0001) {   // did it hit ?\n        \thit = true;\n            shading = i/100.;\n            break;\n       \n        }\n        p += d * rd;    // Ray is one step further\n    }\n    float t = length(ro-p);           \n    if(hit) { // If it hits, need to color & light\n         vec3 n = get_normal(p); \n         vec3 l = vec3(0.001,-1.5,-5.); // light origin \n          \n         color =  vec3(diffuse_directional(n,l,t)); // light diffuse\n         color = mix(vec3(0.1,0.2,0.3), vec3(0.999,0.6,0.45), color)*(1.-shading); \n        \n    } else { // If not, it's darkness\n        color = vec3(0.0);\n    }\n    \n    // Creating some Fog\n    color = mix(color,vec3(0.1,0.1,0.2),1.-exp(-0.0051*t*t)); \n    //                                             ^ Distance of fog \n\n    // \"Vignetting\" of the camera\n    if(true){ // Original idea to create a Vignetting\n    \tcolor *= 1.-pow(length(uv)+0.05,2.);\n    } else { // another intersting effect\n    \tcolor *= 1.-pow(length(uv),0.1);\n   \t\tcolor = smoothstep(0.001,0.07,color);\n    }\n    // Output to screen\n    fragColor = vec4(color*1.4,1.0);\n}\n                    \n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}