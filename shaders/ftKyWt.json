{
    "Shader": {
        "info": {
            "date": "1662446897",
            "description": "Downwardtrend in the stock market",
            "flags": 0,
            "hasliked": 0,
            "id": "ftKyWt",
            "likes": 4,
            "name": "Downwardtrend by Ernesto C. R.",
            "published": 3,
            "tags": [
                "stocks",
                "algotrading"
            ],
            "usePreview": 0,
            "username": "mbaernestocr",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "// Derivative work by Ernesto C. R.\n// Change the direction of the trend by just changing the sign of the trend in the stockFunction\n// Based on Crypto bull run: https://www.shadertoy.com/view/XlsBz2\nfloat curve(in vec2 p, in float fy, in float minLimit, in float maxLimit) {\n    \n    if(p.x < minLimit)\n        return 0.;\n    \n    if(p.x > maxLimit)\n        return 0.;\n    \n    float d = 1. - 150.*abs(p.y - fy);\n    \n    d = clamp(d, 0., 1.);\n    \n    return d;\n}\nfloat gR = 1.61;\n\nfloat nSin(in float t) {\n    \n\treturn 0.5 + 0.5 * sin(t);   \n}\n\nfloat glowingPoint(in vec2 uv, in vec2 pos, in float size) {\n    \n    float dist = distance(uv, pos);\n    \n    float d = (1. - (1./(1.*size)) *dist);\n    \n    \n    \n    d = clamp(d, 0., 1.);\n    \n    d = sqrt(sqrt(d));\n    \n    //d = (d + d*d) / 2.;\n    \n    return d;\n}\n\nfloat speed = 0.15;\nfloat trend = +1.5;\nfloat stockFunction(in float x) {\n    \n    float t = x + iTime  * speed;\n    \n    float f0 = 6.28;\n    float f1 = 3.68;\n    float f2 = 13.28;\n    float f3 = 32.43;\n    float f4 = 123.;\n    float f5 = 331.;   \n    float f6 = 730.;    \n    float f7 = 1232.;\n    \n    \n    float s0 = sin(f0 * t) * 0.4;\n    float s1 = sin(f1 * t) * 0.2;\n    float s2 = sin(f2 * t) * 0.1;\n    float s3 = cos(f3 * t) * 0.15;\n    float s4 = sin(f4 * t) * 0.1;\n    float s5 = sin(f5 * t) * 0.05;\n    float s6 = sin(f6 * t) * 0.035;\n    float s7 = sin(f7 * t) * 0.02;\n    \n    float wave = - s0 - s1 - s2 - s3 - s4 - s5 + s6 - s7;\n    \n    float mod = mod(s1 * s2, 0.1 ) * (5.*sqrt(nSin(f0*t)));\n    \n    float final = wave + -mod;\n    \n    float fy = -trend / 1.5 + (-trend)*x  - 0.5*final;\n    \n    return fy / 5.;\n}\n\n//derivative\nfloat d_stockFunction(in float x, in float delta) {\n    \n    float x0 = x;\n    float x1 = x - delta;\n    \n    float y0 = stockFunction(x0);\n    float y1 = stockFunction(x1);\n    \n    return (y1 - y0) / delta;\n}\n\nfloat longTrend(in float x) {\n    \n    float trend0 = d_stockFunction(x, 0.025);\n    float trend1 = d_stockFunction(x, 0.05);\n    float trend2 = d_stockFunction(x, 0.1);\n    \n    float finalTrend = trend0 + trend1 + trend2;\n    \n    return finalTrend / 3.;\n}\n\nfloat shortTrend(in float x) {\n    \n    float trend0 = d_stockFunction(x, 0.0040);\n    float trend1 = d_stockFunction(x, 0.0050);\n    float trend2 = d_stockFunction(x, 0.0060);\n    \n    float finalTrend = trend0 + trend1 + trend2;\n    \n    return finalTrend / 3.;\n}\n\n\nvec3 trendColor(in float trend) {\n    \n    vec3 red   = vec3(1., 0., 0.);   \n    vec3 green = vec3(0., 1., 0.);\n    \n    trend *= 100.;\n    \n    trend = atan(trend) / (1.57079632679);\n    trend += 1.;   \n    trend /= 2.;\n        \n    return mix(green, red, trend);\n}\n\nfloat grid(in vec2 uv, float tileSize, float borderSize) {\n\n    float xMod = mod(uv.x, tileSize);\n    float yMod = mod(uv.y, tileSize); \n    \n    float treshold = borderSize;\n    \n\tif(xMod < treshold || yMod < treshold)\n        return 1.;\n    \n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.x;   \n    \n    uv.y = uv.y - .73;\n    \n    vec3 points;\n    \n    float size = 0.025;\n    \n    float start = 0.9;\n    float end = 0.85;\n\n    float delta = end - start;\n    \n    //x20\n    for(float offset = 0.; offset < 1. ; offset += 0.05) {\n    \n        float pos = start + delta * offset; \n        \n        vec3 pColor = glowingPoint(uv, vec2(pos, stockFunction(pos)),  size) * trendColor(longTrend(pos));\n        \n        points = max(points, pColor);       \n        size *= 0.01;\n    }\n    \n    \n    vec3 line = trendColor(shortTrend(uv.x)) * curve(uv, stockFunction(uv.x), 0., start);\n    \n    vec2 gridOffset = vec2(iTime * speed, + iTime * speed * trend/5.);\n    vec3 background = vec3(1.,1.,1.) * grid(uv + gridOffset, 0.2, 0.002);\n    \n    vec3 color = max(line, points) + background * 0.05;\n    \n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}