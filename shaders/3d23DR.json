{
    "Shader": {
        "info": {
            "date": "1548616184",
            "description": "Trying to figure out how to create polygons with curved edges.\nPlotting from https://www.shadertoy.com/view/4tB3WV",
            "flags": 0,
            "hasliked": 0,
            "id": "3d23DR",
            "likes": 4,
            "name": "Curved Edge Polygons",
            "published": 3,
            "tags": [
                "polygon"
            ],
            "usePreview": 0,
            "username": "CelestialAmber",
            "viewed": 553
        },
        "renderpass": [
            {
                "code": "\n\n#define pi 3.14159265\n#define atan2(x,y) atan(y/x) + (x==0.0 ? sign(y) * pi/2.0 : x < 0.0 ? sign(y) * pi : 0.0)\n#define sides 5.0\n#define thickness 3.0\n\nvec2 uv;\n\n\nfloat polygoneq(vec2 pos){\n    \nfloat x = pos.x;\nfloat y = pos.y;\nfloat result = cos(pi/sides)/cos(mod(atan2(x,y),2.0*pi/sides)-pi/sides) - sqrt(x*x + y*y);\nreturn result;\n}\n\nfloat polygon(vec2 p, float color){\n    \nvec2 d = vec2(0.001,0);\nvec2 a = (vec2(polygoneq(p) - polygoneq(p + d), polygoneq(p) - polygoneq(p + d.yx)) / d.xx);\nfloat c = smoothstep(0.0, thickness / iResolution.y, abs(polygoneq(p) / length(a)));\nif(c < 1.0) return 1.0;\nelse return 0.0;\n}\nfloat circleeq(vec2 pos, float radius){\nfloat x = uv.x - pos.x;\nfloat y = uv.y - pos.y;\nreturn sqrt(x*x + y*y) - radius;\n    \n}\n\nfloat circle(vec2 p, float r){\nvec2 d = vec2(0.001,0);\nvec2 a = (vec2(circleeq(p,r) - circleeq(p + d,r), circleeq(p,r) - circleeq(p + d.yx,r)) / d.xx);\nfloat c = smoothstep(0.0, thickness / iResolution.y, abs(circleeq(p,r) / length(a)));\nif(c < 1.0) return 1.0;\nelse return 0.0;\n\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tuv = (fragCoord.xy / iResolution.y ) - vec2(0.5,0.25)*iResolution.x/iResolution.y;\n\tuv *= 3.0;\n\tfloat color = 0.5;\n    color = polygon(uv,color);\n\tfloat angle = ((sides - 2.0) * pi)/sides;\n\tfloat size = 0.32;\n\tfor(int i = 0; i < int(sides); i++){\n\tfloat b = 2.0*pi*float(i)/sides;\n\tfloat dist = size / sin(angle/2.0);\n\tcolor += circle(vec2(cos(b)-dist*cos(b),sin(b)-dist*sin(b)),size);\n\t}\n\tfragColor = vec4( vec3( color), 1.0 );\n\n}\n\n   ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}