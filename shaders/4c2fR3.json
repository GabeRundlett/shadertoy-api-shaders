{
    "Shader": {
        "info": {
            "date": "1725276663",
            "description": "Comparison of multisample anti-aliasing on equally-spaced equally-weighted grid (left) vs. [url=https://en.wikipedia.org/wiki/Gauss%E2%80%93Legendre_quadrature]Gauss-Legendre[/url] nodes/weights (right; or both if mouse held).\nClick to set pattern size.",
            "flags": 0,
            "hasliked": 0,
            "id": "4c2fR3",
            "likes": 1,
            "name": "Gauss-Legendre MSAA",
            "published": 3,
            "tags": [
                "msaa"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 76
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Comparison of supersampling anti-aliasing (SSAA, of which multisample\n// anti-aliasing, MSAA, is a special case) on equally-spaced\n// equally-weighted grid (left) vs. Gauss-Legendre quadrature\n// (https://en.wikipedia.org/wiki/Gauss%E2%80%93Legendre_quadrature)\n// nodes/weights (right).\n// Click to set pattern size.\n// Hold left mouse button to use Gauss-Legendre for both sides.\n\n#define TEXT 0\n\nconst float pi=3.14159265358979;\n\nvec3 f(vec2 uv)\n{\n    uv/=iResolution.xy;\n    vec3 ro=2.0*vec3(cos(iTime),0.5,sin(iTime));\n    vec3 ez=normalize(ro-vec3(0)),ex=normalize(cross(vec3(0,1,0),ez)),ey=cross(ez,ex);\n    vec3 rd=normalize((uv.x-0.5)*iResolution.x/iResolution.y*ex+(uv.y-0.5)*ey-1.0*ez);\n    vec3 col=vec3(0.25,0.5,1);\n    float t=-ro.y/rd.y;\n    vec3 r=ro+t*rd;\n    for(int i=0;i<4;++i)\n        r.xz+=0.25*sin(2.0*r.zx);\n    col=textureLod(iChannel1,0.25*r.xz,0.0).xyz;\n#if TEXT\n    float a=textureLod(iChannel0,0.25*r.xz,0.0).x;\n    col=mix(col,vec3(0.25,1.0,0.25)*a,a);\n#endif\n    return col;\n}\n\nvec3 AA(vec2 uv,int n)\n{\n    vec3 col=vec3(0);\n    for(int x=0;x<n;++x)\n        for(int y=0;y<n;++y)\n            col+=f(uv+(vec2(x,y)+0.5-vec2(n)/2.0)/float(n));\n    return col/float(n*n);\n}\n\nvec3 GL(vec2 uv,int n)\n{\n    switch(n)\n    {\n        case 1: return f(uv);\n        case 2:\n        {\n            vec2 c=0.5*vec2(-1.0/sqrt(3.0),+1.0/sqrt(3.0));\n            vec2 w=0.5*vec2(1.0,1.0);\n            return w.x*w.x*f(uv+c.xx)+\n                   w.x*w.y*f(uv+c.xy)+\n                   w.y*w.x*f(uv+c.yx)+\n                   w.y*w.y*f(uv+c.yy);\n        }\n        case 3:\n        {\n            vec3 c=0.5*vec3(-sqrt(3.0/5.0),0.0,+sqrt(3.0/5.0));\n            vec3 w=0.5*vec3(5.0/9.0,8.0/9.0,5.0/9.0);\n            return w.x*w.x*f(uv+c.xx)+\n                   w.x*w.y*f(uv+c.xy)+\n                   w.x*w.z*f(uv+c.xz)+\n                   w.y*w.x*f(uv+c.yx)+\n                   w.y*w.y*f(uv+c.yy)+\n                   w.y*w.z*f(uv+c.yz)+\n                   w.z*w.x*f(uv+c.zx)+\n                   w.z*w.y*f(uv+c.zy)+\n                   w.z*w.z*f(uv+c.zz);\n        }\n        case 4:\n        {\n            vec4 c=0.5*vec4(-sqrt(3.0/7.0+2.0/7.0*sqrt(5.0/6.0)),\n                            -sqrt(3.0/7.0-2.0/7.0*sqrt(5.0/6.0)),\n                            +sqrt(3.0/7.0-2.0/7.0*sqrt(5.0/6.0)),\n                            +sqrt(3.0/7.0+2.0/7.0*sqrt(5.0/6.0)));\n            vec4 w=0.5*vec4((18.0-sqrt(30.0))/36.0,\n                            (18.0+sqrt(30.0))/36.0,\n                            (18.0+sqrt(30.0))/36.0,\n                            (18.0-sqrt(30.0))/36.0);\n            return w.x*w.x*f(uv+c.xx)+\n                   w.x*w.y*f(uv+c.xy)+\n                   w.x*w.z*f(uv+c.xz)+\n                   w.x*w.w*f(uv+c.xw)+\n                   w.y*w.x*f(uv+c.yx)+\n                   w.y*w.y*f(uv+c.yy)+\n                   w.y*w.z*f(uv+c.yz)+\n                   w.y*w.w*f(uv+c.yw)+\n                   w.z*w.x*f(uv+c.zx)+\n                   w.z*w.y*f(uv+c.zy)+\n                   w.z*w.z*f(uv+c.zz)+\n                   w.z*w.w*f(uv+c.zw)+\n                   w.w*w.x*f(uv+c.wx)+\n                   w.w*w.y*f(uv+c.wy)+\n                   w.w*w.z*f(uv+c.wz)+\n                   w.w*w.w*f(uv+c.ww);\n        }\n    }\n    return vec3(0);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec3 col=vec3(0);\n    int n=int(4.0*iMouse.x/iResolution.x)+1;\n    if(fragCoord.x<0.5*iResolution.x&&iMouse.z<=0.0) col=AA(fragCoord,n);\n    else                                             col=GL(fragCoord,n);\n    col+=0.25*sign(sin(4.0*pi*fragCoord.x/iResolution.x))*step(fragCoord.y,iResolution.y/8.0);\n    col.y+=0.25*float(int(4.0*fragCoord.x/iResolution.x)==n-1)*step(fragCoord.y,iResolution.y/8.0);\n    col=mix(12.92*col,1.055*pow(col,vec3(1.0/2.4))-0.055,step(0.0031308,col)); // sRGB\n    fragColor=vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}