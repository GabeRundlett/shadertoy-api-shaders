{
    "Shader": {
        "info": {
            "date": "1568998573",
            "description": "Just an example of futuristic animated ui",
            "flags": 0,
            "hasliked": 0,
            "id": "WdtGzf",
            "likes": 1,
            "name": "Arc UI",
            "published": 3,
            "tags": [
                "ui",
                "arc",
                "futuristic"
            ],
            "usePreview": 0,
            "username": "mystery",
            "viewed": 496
        },
        "renderpass": [
            {
                "code": "float PI = 3.14159;\nfloat smoothness = 0.01;\n    \nvec2 NormalizeSpace(vec2 uv)\n{\n    return (uv - 0.5 * iResolution.xy) / iResolution.y;\n}\n\nvec2 Rotate(vec2 uv, float angle)\n{\n\treturn vec2(uv.x * cos(angle) - uv.y * sin(angle), uv.x * sin(angle) + uv.y * cos(angle));\n}\n\nfloat GetAngle(vec2 uv)\n{    \n\treturn 0.5 + ((atan(uv.x, uv.y)) / (PI)) * 0.5;   \n}\n\nfloat GetDonut(vec2 uv, float inRadius, float outRadius)\n{\n    float d = length(uv);\n    return (1.0-smoothstep(outRadius, outRadius + smoothness, d)) * (smoothstep(inRadius, inRadius + smoothness, d));;    \n}\n\nfloat DrawArc(vec2 uv, float inRadius, float outRadius, float arcAngle, float rotation)\n{\n    float color = GetDonut(uv, inRadius, outRadius);\n    vec2 rotatedUV = Rotate(uv, rotation * PI * 2.0);\n    float angle = GetAngle(rotatedUV);\t\n    float angleSmoothness = smoothness;\n    color *= smoothstep(angle, angle + angleSmoothness, arcAngle) * smoothstep(0.0, angleSmoothness, angle);\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uvTex = fragCoord/iResolution.xy;\n    vec2 uv = NormalizeSpace(fragCoord);\n\tfloat c = 0.0;\n    c += DrawArc(uv, 0.25, 0.6, 0.25, iTime);\n    c += DrawArc(uv, 0.15, 0.2, 0.1, -iTime + 0.5);\n    c += DrawArc(uv, 0.05, 0.1, 0.05, iTime + 0.25);\n    \n    fragColor = texture(iChannel0, uvTex);\n    fragColor.rgb += vec3(c, c, c);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}