{
    "Shader": {
        "info": {
            "date": "1727622171",
            "description": "Generates 1 octave, 2-D cubic noise that changes over time.",
            "flags": 0,
            "hasliked": 0,
            "id": "lXjcRd",
            "likes": 0,
            "name": "Cubic Noise Thing",
            "published": 3,
            "tags": [
                "noise",
                "testing",
                "sample"
            ],
            "usePreview": 0,
            "username": "aarav_prakash",
            "viewed": 30
        },
        "renderpass": [
            {
                "code": "vec2 tileOf(in vec2 coord){\n\tvec2 GRID_SIZE = vec2(20.); //CHANGERES\n\treturn (floor(coord * GRID_SIZE)-1.)/GRID_SIZE +vec2(1.)/vec2(20.); //CHANGERES\n}\n\nfloat frac(in float num){\n\treturn num - floor(num);\n}\n\nfloat rand(in vec2 coord){\n\n\t// generates replicable pseudo-random numbers\n\t\n\tfloat E = 2.7182818282845904523536028747135;\n\tfloat PI = 3.1415926535897932384626433832795;\n\tfloat a1 = frac(E/PI*pow(frac(E/(coord.x+1.38)/(coord.y+2.17)),1.3));\n\tfloat a2 = frac(E/PI*pow(frac(E*(coord.x+4.63)/(coord.y+3.26)),1.3));\n\tfloat sec = floor(iTime) + E*PI;\n\t//return frac(PI*frac(E/PI*pow(frac(E/a1*a2*627.641),1.3)));\n\treturn frac(PI*frac(E/PI*pow(frac(E/a1*a2*sec),1.3)));\n}\n\nvec3 curp(in vec3 start, in vec3 end, in float extent){\n\n\t//cubic interpolation from start to end by extent\n\t\n\tvec3 width = end - start;\n\tfloat twdEnd = 3.*pow(extent,2.) - 2.*pow(extent,3.); \n\t//curp formula: F(x) = 3x^2 - 2x^3\n\treturn start + width * twdEnd;\n}\n\nvec3 smoothsq(in vec3 rSelf, in vec3 rTop, \n        in vec3 rRight, in vec3 rTR, in vec2 pos){\n\n\t// cubic interpolation b/w 4 corners\n\t// first 4 args are corner colors\n\t// pos is 0.-1. position b/w these colors\n\t// col(0.,0.) = rSelf, col(1.,1.) = rTR.\n\t\n\tvec3 horzb = curp(rSelf, rRight, pos.x);\n\tvec3 horzt = curp(rTop, rTR, pos.x);\n\treturn curp(horzb, horzt, pos.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n\t// uvs and stuff\n\tvec2 uv = fragCoord / iResolution.xy;\n\t\n\t// color math\n\tvec3 col = vec3(0.);\n\t\n\tfloat rSelf = rand(tileOf(uv));\n\tfloat rTop = rand(tileOf(uv)+vec2(0.,1.)/vec2(20.)); //CHANGERES\n\tfloat rRight = rand(tileOf(uv)+vec2(1.,0.)/vec2(20.)); //CHANGERES\n\tfloat rTR = rand(tileOf(uv)+vec2(1.)/vec2(20.)); //CHANGERES\n\t\n\tcol = vec3(rand(tileOf(uv)));\n\t\n\tvec2 tilePos = (uv - tileOf(uv)) * vec2(20.); //CHANGERES\n\tcol = smoothsq(vec3(rSelf), vec3(rTop), vec3(rRight), vec3(rTR), tilePos);\n\t\n\t// output\n\tfragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}