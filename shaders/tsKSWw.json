{
    "Shader": {
        "info": {
            "date": "1574192722",
            "description": "My participation at codevember 06 \"Music\"",
            "flags": 0,
            "hasliked": 0,
            "id": "tsKSWw",
            "likes": 8,
            "name": "Codevember06 - Music",
            "published": 3,
            "tags": [
                "light",
                "codevember",
                "dnb",
                "drumnbass"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 444
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nconst float PI = 3.14159265;\n\n\nfloat lenny(vec2 v)\n{\n  return abs(v.x)+abs(v.y);\n}\nfloat sat(float a)\n{\n  return clamp(a,0.,1.);\n}\n\nfloat _sub(float a, float b)\n{\n  return max(a,-b);\n}\n\nfloat _union(float a, float b)\n{\n  return max(a,b);\n}\n\nfloat sdf_cir(vec2 uv, float r)\n{\n  return length(uv)-r;\n}\n\nfloat sdf_rect(vec2 uv, vec2 sz)\n{\n  vec2 r = abs(uv)-sz;\n  return max(r.x,r.y);\n}\n\nfloat rdrCir(vec2 uv, float r, float th)\n{\n  float col= sat(1.-_sub(sdf_cir(uv, r),sdf_cir(uv,r-th))/0.005);\n col += abs(uv.y)-(sin(25.*uv.x+iTime)*0.2+0.2)*0.1;\nreturn col;\n}\n\nvec3 rdrChroma(vec2 uv)\n{\n  float r = length(uv)*0.15;\n//  uv = uv+vec2(sin(iTime),cos(iTime))*0.2;\n  vec3 col;\n\n  col.r = rdrCir(uv+uv*r,0.1,0.01);\n  col.g = rdrCir(uv,0.1,0.01);\n  col.b = rdrCir(uv-uv*r,0.1,0.01);\n  return col;\n}\n\nbool inTriangle(vec2 A, vec2 B, vec2 C, vec2 P, float thick)\n{\n  vec2 v0 = C - A ;\n  vec2 v1 = B - A ;\n  vec2 v2 = P - A; // Compute dot products\n  float dot00 = dot(v0, v0) ;\n  float dot01 = dot(v0, v1) ;\n  float  dot02 = dot(v0, v2) ;\n  float dot11 = dot(v1, v1) ;\n  float dot12 = dot(v1, v2) ;\n  // Compute barycentric coordinates\n  float invDenom = 1. / (dot00 * dot11 - dot01 * dot01) ;\n  float u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n   float v = (dot00 * dot12 - dot01 * dot02) * invDenom ;\n   // Check if point is in triangle return\n   ;\n   return (u >= 0.) && (v >= 0.) && (u + v < 1.) &&\n   (u<thick||v<thick||(u+v)>1.-thick);\n}\n\nfloat curve(float a)\n{\n  return max(mod(iTime,10.)/10.,0.5)*(sin(iTime+a*102.4)*0.5+0.5)*((sin(a*5.-iTime*15.)*0.3+0.3)+(sin((iTime+a)*13.5)*0.5+0.5));\n}\n\nvec3 rdr(vec2 uv)\n{\n  vec3 acc;\n\n  for (int i= 0;i<16;++i)\n  {\n    float fi = float(i);\n    acc += rdrChroma(uv*float(i+1)*0.02*(sin(iTime)*0.2+0.5)*sin(fi+iTime))*(fi/32.)*length(uv);\n  }\n\n  vec2 posT= vec2(0.,0.);\n  float rT = 1.7+float(mod(iTime,0.25*sin(iTime)));\n  float aT = (PI*2.)/3.;\n  float offA = iTime;\n\n  vec2 A = vec2(rT*sin(aT*1.+offA),rT *cos(aT*1.+offA))-posT;//+vec2(0.,0.1*sin(iTime));\nvec2 B = vec2(rT*sin(aT*2.+offA),rT *cos(aT*2.+offA))-posT;\nvec2 C = vec2(rT*sin(aT*3.+offA),rT *cos(aT*3.+offA))-posT;\nif(inTriangle(A,B,C,uv,0.1))\n  acc=1.-acc;\n\nacc*= mix(vec3(1.),vec3(1.,0.,0.),1.-sat(sdf_rect(uv-vec2(0.,0.),vec2(0.5,2.5))*25.));\nacc += (mod(uv.x,0.1)*20.)*vec3(0.4,0.4,0.89)* sat(1.-length(uv))*sat((abs(curve(uv.x)*.5)-abs(uv.y))*5.);\n  acc+=(sin(iTime)*0.2+1.3)*2.*pow(sat((1.-lenny(uv*.5))*1.),3.)*vec3(.4,.4,.89);\n  return acc;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord.xy / iResolution.xx;\n  uv = uv-(iResolution.xy/iResolution.xx)*0.5;\nuv*=6.;\n vec3 col;// = vec3(length(uv));\n col += rdr(uv);\n\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}