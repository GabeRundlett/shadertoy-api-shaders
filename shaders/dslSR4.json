{
    "Shader": {
        "info": {
            "date": "1668592502",
            "description": "My implementation of gabor and phasor noise.\nGabor : https://hal.archives-ouvertes.fr/hal-00695670/document\nPhasor : https://hal.archives-ouvertes.fr/hal-02118508/document\n\nL: Gabor, UR: Amplitude, DR: Phase",
            "flags": 0,
            "hasliked": 0,
            "id": "dslSR4",
            "likes": 16,
            "name": "Gabor and Phasor Noise",
            "published": 3,
            "tags": [
                "noise",
                "gabor"
            ],
            "usePreview": 0,
            "username": "rubioh",
            "viewed": 655
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159\n\nfloat GaborNoise(vec2 uv, vec2 omega, float freq, vec2 orig, float bandwidth){\n    float f = 2.*PI*freq; // frequency\n    float a = exp(-length(orig-uv)*bandwidth*PI);\n    return a*cos(f* dot(uv, omega));\n}\n\nvec2 GaborAmplitude(vec2 uv, vec2 omega, float freq, vec2 orig, float bandwidth){\n    float f = 2.*PI*freq; // frequency\n    float a = exp(-length(orig-uv)*bandwidth*PI);\n    return a*vec2(cos(f* dot(uv, omega)),\n                sin(f* dot(uv, omega))); // redundancy with GaborNoise for clarity\n \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv.x /= 1.;\n    // Time varying pixel color\n    float gn;\n    int N = 100;\n    vec2 L = vec2(0.);\n    \n    float my = iMouse.y/iResolution.y;\n    if (my == 0.){\n        my = .5;\n    }\n    \n    float mx = iMouse.x/iResolution.x;\n    if (mx == 0.){\n        mx = .5;\n    }\n    \n    float phase_velocity = 2.*mx;\n    float freq = 5.;\n    float bandwidth = .01;\n    for (int i=0; i<N; i++){\n        vec2 pos = vec2(noise(vec2(float(i), 0.)), noise(vec2(float(i), 1.)));\n        float omega_ = atan(noise(vec2(float(i), 1.)), noise(vec2(float(i), 2.)))*phase_velocity + iTime/20.;\n        vec2 omega = vec2(cos(omega_), sin(omega_));\n        \n        \n        freq = 40.*my; // *hash11(float(i)); //   one can take varying frequencies and bandwidth; \n        bandwidth = .01; //  * hash11(float(i)+.3);    //\n        \n        L += GaborAmplitude((uv-pos), omega, freq, uv, bandwidth);\n        gn += GaborNoise((uv-pos), omega, freq, uv, bandwidth);\n    }\n    float amplitude = length(L);\n    float pn = gn/amplitude;\n    gn /= sqrt(float(N)); // for high bandwidth i need to tune the normalizing factor\n    // Output to screen \n    float an = amplitude/sqrt(float(N));\n    pn = mix(pn, an*.5, step(0., uv.y));\n    vec3 col = vec3(\n                mix(gn, pn, step(0., uv.x))) + 100.*vec3(1.,0.,0.)*smoothstep(0., .005, .005-abs(uv.x))\n                + 100.*vec3(1.,0.,0.)*smoothstep(0., .005, .005-abs(uv.y))*step(0., uv.x);\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float hash11( float x){\n    return fract( sin( float(x)*11.45067)*41.234);\n}\n\n\nvec2 hash22(vec2 p){\n    vec2 a = vec2(110.487,9.4567);\n    vec2 b = vec2(4506.775, 50.2467);\n    return fract( sin(vec2(dot(a,p), dot(b,p)))*41.234);\n}\n\nfloat hash21(vec2 p){\n    vec2 a = vec2(110.487,9.4567);\n    return fract( sin(dot(a,p))*41.234);\n}\n\nvec2 hash12(float x){\n    vec3 p = vec3(x,x,x);\n    vec3 a = vec3(10.487,9.4567, 41.28753);\n    vec3 b = vec3(456.775, 150.2467, 234.4565);\n    return fract( sin(vec2(dot(a,p), dot(b,p)))*41.234);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = hash21(i);\n    float b = hash21(i + vec2(1.0, 0.0));\n    float c = hash21(i + vec2(0.0, 1.0));\n    float d = hash21(i + vec2(1.0, 1.0));\n    vec2 u = f*f*(3.0-2.0*f);\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}