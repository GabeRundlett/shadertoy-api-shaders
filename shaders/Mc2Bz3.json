{
    "Shader": {
        "info": {
            "date": "1725296161",
            "description": "originals  https://www.shadertoy.com/view/MdXSzS https://www.shadertoy.com/view/McjBzK",
            "flags": 0,
            "hasliked": 0,
            "id": "Mc2Bz3",
            "likes": 2,
            "name": " colorful Kaleidoscope 487",
            "published": 3,
            "tags": [
                "fractal",
                "spiral",
                "color"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 70
        },
        "renderpass": [
            {
                "code": "#define MODE 0  // 0: Left-to-right, 1: Top-to-bottom, 2: Radial\n#define LAYERS 5.0\n#define SPEED 1.0\n#define DELAY 0.0\n#define WIDTH 0.05\n\n#define W WIDTH\n#define MAX_LAYERS 32.0 // Define a maximum number of layers\n\nvec4 readTex(vec2 uv) {\n    if (uv.y < 0.0 || uv.y > 1.0 || uv.y < 0.0 || uv.y > 1.0) {\n        return vec4(0.0);\n    }\n    return texture(iChannel0, uv);\n}\n\nfloat hash(vec2 p) {\n    return fract(sin(dot(p, vec2(4859.0, 3985.0))) * 3984.0);\n}\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat sdBox(vec2 p, float r) {\n    vec2 q = abs(p) - r;\n    return min(length(q), max(q.y, q.x));\n}\n\nfloat dir = 1.0;\n\nfloat toRangeT(vec2 p, float scale) {\n    float d;\n          p.x+=0.1*cos(iTime);\n        p.y+=0.1*sin(iTime);\n   \n        d = p.y / (scale * 10.0) + 0.5;\n  \n   \n   \n    \n    d = dir ;\n    \n    return d;\n}\n\nvec4 cell(vec2 p, vec2 pi, float scale, float t, float edge) {\n    vec2 pc = pi + 0.5;\n \n   float t2 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(p.xy) + 1.157)) * 1.2;\n\tfloat si = sin(t2);\n\tfloat co = cos(t2);\n\tmat2 ma = mat2(co, si, -si, co);\n  \n    vec2 uvc = pc*ma / scale;\n    uvc.y /= iResolution.y / iResolution.x;\n    uvc = uvc * 0.5 + 0.5;\n    if (uvc.y < 0.0 || uvc.x> 1.0 || uvc.y < 0.0 || uvc.y > 1.0) {\n        return vec4(0.0);\n    }\n    float alpha = smoothstep(0.0, 0.1, texture(iChannel0, uvc).a);\n    \n    vec4 color = vec4(hsv2rgb(vec3((pc.x * 13.0 / pc.y * 17.0) * 0.3, 1.0, 1.0)), 1.0);\n    \n    float x = toRangeT(pi, scale);\n    float n = hash(pi);\n \n    \n    color *= mix(\n        1.0, \n        clamp(0.3 / abs(sdBox(p - pc, 0.5)), 0.0, 10.0),\n        edge \n    ); \n    \n    return color * alpha;\n}\n\nvec4 cellsColor(vec2 p, float scale, float t) {\n    vec2 pi = floor(p);\n          float t2 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(p.xy) + .07)) * 2.2;\n\tfloat si = sin(t2);\n\tfloat co = cos(t2);\n\tmat2 ma = mat2(co, si, -si, co);\n  \n    vec2 d = vec2(0.0, 1.0);\n    vec4 cc = vec4(0.0);\n  \n    cc += cell(p*cos(iTime), pi, scale, t, 0.2) * 4.0;\n    cc += cell(p*sin(iTime), pi + d.xy, scale, t, 0.9);\n    cc += cell(p*cos(iTime), pi - d.xy, scale, t, 0.9);\n    cc += cell(p*sin(iTime), pi + d.yx, scale, t, 0.9);\n    cc += cell(p, pi - d.yx, scale, t, 0.1);\n    \n    return cc / 8.0;\n}\n\nvec4 draw(vec2 uv, vec2 p, float t, float scale) {\n float t2 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(p.xy) + .07)) * 2.2;\n\tfloat si = sin(t2);\n\tfloat co = cos(t2);\n\tmat2 ma = mat2(co, si, -si, co);\n    vec4 c = readTex(uv*ma);\n   \n  uv.xy*=ma;\n    vec2 pi = floor(p * scale);\n    pi.x+=0.2*cos(iTime);\n    pi.y+=0.2*sin(iTime);\n    float n = hash(pi);\n    t = t * (1.0 + W * 4.0) - W * 2.0;\n    \n    float x = toRangeT(pi*ma, scale);\n    float a1 = smoothstep(t, t - W, x + n * W);    \n    c *= a1;\n    c += cellsColor(p * scale, scale, t) * 1.5;\n    \n    return c;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n   \n    vec2 p = uv * 2.0 - 1.0;\n   p*=2.;\n    p.y *= iResolution.y / iResolution.x;\n   \n    // Calculate transition time based on iTime\n    float transitionDuration = 2.0; // Adjust this value to change transition duration\n    float t = mod(iTime / transitionDuration, 2.0);\n   \n        dir = 1.0;\n    \n\n    \n    vec4 finalColor = vec4(0.0);\n    float layerCount = 0.0;\n    for (float i = 0.0; i < MAX_LAYERS; i++) {\n        if (i >= LAYERS) break;\n        float s = cos(i) * 17.3 + 10.0;\n                 \n        finalColor += draw(uv, p, 10., (s));\n        layerCount += 1.0;\n    }\n    fragColor = finalColor / layerCount;  \n    \n  \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}