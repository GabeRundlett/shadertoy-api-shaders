{
    "Shader": {
        "info": {
            "date": "1475489520",
            "description": "http://mathworld.wolfram.com/Circle-CircleIntersection.html",
            "flags": 0,
            "hasliked": 0,
            "id": "ltG3zK",
            "likes": 8,
            "name": "Circle-Circle Intersection",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "JLee",
            "viewed": 837
        },
        "renderpass": [
            {
                "code": "// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\nvoid solve(in vec2 p1,in float r1,in vec2 p2,in float r2,\n           out vec2[2] intersection){\n    vec2 e1=p2-p1; \n    float d=length(e1);\n    e1=e1/d; //p1에서 p2로 향하는 길이 1인 벡터\n    vec2 e2=vec2(-e1.y,e1.x); //e2는 e1과 수직하고 길이가 1\n    \n    float x=(r1*r1-r2*r2+d*d)/(2.*d);\n    float y=r1*r1-x*x; // x,y,r1이 직각삼각형을 이루므로 피타고라스 정리\n    \n    if(y<0.)//해가 존재하지 않음\n        intersection[0]=intersection[1]=vec2(100.);\n    else{\n        y=sqrt(y);\n        intersection[0]=p1+x*e1+y*e2; //p1에서 e1방향으로 x만큼 가고 e2방향으로 y만큼 가면 교점\n        intersection[1]=p1+x*e1-y*e2; //다른 해\n    }\n}\nfloat draw_circle(in vec2 uv,in vec2 p,in float r){\n    float d=distance(uv,p)-r;\n    return smoothstep(-0.015,-0.01,d)-smoothstep(0.01,0.015,d);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv   = 2.*fragCoord.xy / iResolution.y - vec2(1.,1.);\n    vec2 uvMouse = 2.*iMouse.xy / iResolution.y - vec2(1.,1.);\n    \n    vec2 p1=vec2(0.,0.),p2=uvMouse,intersection[2];\n    float r1=0.5,r2=0.2;\n    \n    fragColor=vec4(vec3(max(draw_circle(uv,p1,r1),\n                            draw_circle(uv,p2,r2))),1.);\n    solve(p1,r1,p2,r2,intersection);\n    fragColor.r=max(fragColor.r,draw_circle(uv,intersection[0],0.04));\n    fragColor.g=max(fragColor.b,draw_circle(uv,intersection[1],0.04));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}