{
    "Shader": {
        "info": {
            "date": "1567266404",
            "description": "texture",
            "flags": 0,
            "hasliked": 0,
            "id": "tt2XDV",
            "likes": 24,
            "name": "organic texture",
            "published": 3,
            "tags": [
                "fbm",
                "gradientnoise"
            ],
            "usePreview": 0,
            "username": "Eseris",
            "viewed": 1063
        },
        "renderpass": [
            {
                "code": "#define pow(x,n) pow(abs(x),n)\n\nvec2 hash( in vec2 x )  // replace this by something better\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\n// by iq - https://www.shadertoy.com/view/XdXGW8\nfloat noise(in vec2 p) {\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\n\nfloat heightmap(vec2 p) {\n    float h = 0.;\n    vec2 q = 4. * p + noise(-4. * p + iTime * vec2(-.07, .03));\n    vec2 r = 7. * p + vec2(37., 59.) + noise(5. * p + iTime * vec2(.08, .03));\n    vec2 s = 3. * p + noise(5. * p + iTime * vec2(.1, .05) + vec2(13., 37.));\n    float smoothAbs = .2;\n    h += 1. * noise(s);\n    h += .9 * pow(noise(q), 1. + smoothAbs);\n    h += .7 * pow(noise(r), 1. + smoothAbs);\n    \n    h = .65 * h + .33;\n    return h;\n}\n\nvec3 calcNormal(vec2 p) {\n    vec2 e = vec2(1e-3, 0);\n    return normalize(vec3(\n        heightmap(p - e.xy) - heightmap(p + e.xy),\n        heightmap(p - e.yx) - heightmap(p + e.yx),\n        -2. * e.x));\n}\n\nvec3 getColor(float x) {\n    vec3 a = vec3(.1, .0, .03);\n    vec3 b = vec3(1., .05, .07);\n    vec3 c = vec3(.9, .2, .3);\n    return mix(a, mix(b, c, smoothstep(.4, .9, x)), smoothstep(.0, .9, x));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.y;\n    float h = heightmap(uv);\n    vec3 v = vec3(h);\n    v.yz *= 3.;\n    vec3 nor = calcNormal(uv);\n    nor.xy *= .4;\n    nor = normalize(nor);\n\n    vec3 mat = getColor(h);\n    mat = clamp(mat, 0., 1.);\n    vec3 ld = normalize(vec3(1,-1.,1));\n    vec3 ha = normalize(ld - vec3(0.,0,-1));\n    \n    vec3 col = vec3(0);\n    col += mat * .8;\n    col += .2 * mat * pow(max(dot(normalize(nor + vec3(.0,0,0)), -ld), 0.), 3.);\n    col += .3 * h * pow(dot(normalize(nor + vec3(.0,0,0)), ha), 20.);\n    \n    //if(h > 1.) col = vec3(0,1,0);\n    //if(h < 0.) col = vec3(0,0,1);\n    \n\t//col = mix(col, getColor(fragCoord.x/iResolution.x), step(abs(uv.y), .1));\n\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}