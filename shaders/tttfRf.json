{
    "Shader": {
        "info": {
            "date": "1613188820",
            "description": "chico baile v2",
            "flags": 0,
            "hasliked": 0,
            "id": "tttfRf",
            "likes": 3,
            "name": "chico baile v2",
            "published": 3,
            "tags": [
                "chicobailev2"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 267
        },
        "renderpass": [
            {
                "code": "/// por jorge flore p......jorge2017a1\n//referencia \n//https://www.shadertoy.com/view/WlKSRt\n\n//Constants\nconst float tau = atan(1.0)*8.0;\nconst float pi = atan(1.0)*4.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    vec2 uv = ( fragCoord.xy - 0.5 * iResolution.xy ) / min(iResolution.x,iResolution.y);\n    uv*=2.5;\n     //Time varying pixel color\n    \n    vec3 col = vec3(1.0);\n    /*\n    if (uv.y<-0.2)\n        col = 0.5 + 0.5125*cos(iTime+uv.xyx+vec3(0,2,4));\n    else\n        col = vec3(1.0);\n    */\n    \n    \n    float es=2.0;\n    float radio1=0.5*es;\n    float radio2=0.45*es;\n    \n    vec2 pa0=vec2(0.0,0.0 );\n    \n    vec2 pa1=pa0+ radio1*0.5*cossin(1.0*sin(iTime)-tau/4.0);\n    \n    vec2 pa2=pa1+ radio2*0.5*cossin(0.05);\n    \n    \n    vec2 pb0=vec2(0.0,0.0 );\n    vec2 pb1=pb0+ radio1*0.5*cossin(6.0+2.0*sin(iTime));\n    vec2 pb2=pb1+ radio2*0.5*cossin(8.0+0.5*cos(iTime));\n    \n    \n    float dcabeza=sdCircle(uv-vec2(0.0,0.1), 0.1 );\n    float dac1=dfCircle(radio1,uv);\n    float dac2=dfCircle(radio2,uv);\n    \n    float dbmano1=dfCircle(0.065,uv-pa2);\n    float dbmano2=dfCircle(0.065,uv-pb2);\n    \n    \n    \n   \n    float la1=dfLine(pa0, pa1, 0.009,  uv);\n    float la2=dfLine(pa1, pa2, 0.009,  uv);\n    \n    float lb1=dfLine(pb0, pb1, 0.009,  uv);\n    float lb2=dfLine(pb1, pb2, 0.009,  uv);\n    \n    \n   \n    \n    \n    vec2  pCuerpoA=vec2(0.0,0.0);\n    vec2  pCuerpoB=vec2(0.0,-0.5);\n    float lCuerpo=dfLine(pCuerpoA, pCuerpoB, 0.02,  uv);\n    \n    \n    vec2 pPiernaA1=pCuerpoB;\n    vec2 pPiernaB1=pCuerpoB;\n    float radiopi1=0.8;\n    \n    vec2 pPiernaA2=pPiernaA1+ radiopi1*0.5*cossin(-1.0+0.8*sin(iTime));;\n    vec2 pPiernaB2=pPiernaB1+ radiopi1*0.5*cossin(-0.5+0.4*cos(iTime));;;\n    \n    \n    vec2 pPiernaA3=pPiernaA2+ radiopi1*0.5*cossin(-1.0+0.8*sin(iTime+0.5));;\n    vec2 pPiernaB3=pPiernaB2+ radiopi1*0.5*cossin(-0.5+0.4*cos(iTime-0.5));;;\n    \n    \n    float lPierna1=dfLine(pPiernaA1, pPiernaA2, 0.01,  uv);\n    float lPierna2=dfLine(pPiernaB1, pPiernaB2, 0.01,  uv);\n    \n    float lPierna1A=dfLine(pPiernaA2, pPiernaA3, 0.01,  uv);\n    float lPierna2A=dfLine(pPiernaB2, pPiernaB3, 0.01,  uv);\n    \n    \n    \n    \n    dac1=dac1/fwidth(dac1);\n    dac2=dac2/fwidth(dac2);\n    dcabeza=dcabeza/fwidth(dcabeza);\n    \n    dbmano1=dbmano1/fwidth(dbmano1);\n    dbmano2=dbmano2/fwidth(dbmano2);\n    \n    lPierna1=lPierna1/fwidth(lPierna1);\n    lPierna2=lPierna2/fwidth(lPierna2);\n    \n    lPierna1A=lPierna1A/fwidth(lPierna1A);\n    lPierna2A=lPierna2A/fwidth(lPierna2A);\n    \n    \n    la1=la1/fwidth(la1);\n    la2=la2/fwidth(la2);\n    \n    lb1=lb1/fwidth(lb1);\n    lb2=lb2/fwidth(lb2);\n    \n    lCuerpo=lCuerpo/fwidth(lCuerpo);\n    \n    \n    \n    float dcOut=opS( dac2, dac1 );\n    \n    col=mix(vec3(1.0,0.0,0.0) ,col, la1-0.5);\n    col=mix(vec3(1.0,0.0,0.0) ,col, la2-0.5);\n    col=mix(vec3(1.0,0.0,0.0) ,col, lb1-0.5);\n    col=mix(vec3(1.0,0.0,0.0) ,col, lb2-0.5);\n    col=mix(vec3(0.0,0.0,1.0) ,col, dbmano1);\n    col=mix(vec3(0.0,0.0,1.0) ,col, dbmano2);\n    col=mix(vec3(1.0,0.0,1.0) ,col, lCuerpo);\n    col=mix(vec3(1.0,0.5,1.0) ,col, dcabeza);\n    col=mix(vec3(0.0,0.0,1.0) ,col, lPierna1);\n    col=mix(vec3(0.0,0.0,1.0) ,col, lPierna2);\n    col=mix(vec3(0.4,0.0,1.0) ,col, lPierna1A);\n    col=mix(vec3(0.4,0.0,1.0) ,col, lPierna2A);\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// por jorge2017a1 ...jorge flores p.!!!\n\n#define PI 3.14159265359\n#define PI2 PI*2.0\n\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n//https://www.shadertoy.com/view/WlKSRt\n//-----------------------\nvec2 cossin(float x)\n{\n\treturn vec2(cos(x),sin(x));   \n}\n\nfloat dfCircle(float d, vec2 uv)\n{\n    return length(uv)-d/2.0;\n}\n\nfloat dfRing(float d, float w, vec2 uv)\n{\n    return abs(length(uv)-d/2.0)-w/2.0;\n}\n\nfloat dfLine(vec2 start, vec2 end, float w, vec2 uv)\n{\n\tvec2 line = end - start;\n\tfloat frac = dot(uv - start,line) / dot(line,line);\n\treturn distance(start + line * clamp(frac, 0.0, 1.0), uv)-w/2.0;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}