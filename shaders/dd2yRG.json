{
    "Shader": {
        "info": {
            "date": "1687858625",
            "description": "Update includes using path based on hexagonal Truchet tiles (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "dd2yRG",
            "likes": 20,
            "name": "Atlantis 3",
            "published": 3,
            "tags": [
                "hexagon",
                "underwater",
                "truchet",
                "cave",
                "dolphin"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 355
        },
        "renderpass": [
            {
                "code": "// \"Atlantis 3\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n#define AA  0   // (= 0/1) optional antialiasing\n\n#define VAR_ZERO min (nFrame, 0)\n\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrEllipsDf (vec3 p, vec3 r);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat HexEdgeDist (vec2 p);\nfloat HexEdgeDist (vec2 p, float h);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Ssign (float x);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Hashfv2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define PLEN 17\n\n#define N_FISH 5\n\nstruct Fish {\n  vec3 pos;\n  vec2 angCsH, angCsV;\n  float angI;\n};\nFish fish[N_FISH];\n\nvec4 cPath[PLEN];\nvec3 qHit, sunDir, cHit, qnHit;\nvec2 cIdB, cMidB;\nfloat tCur, dstFar, tEnd[PLEN + 1], hgSizeB, vgSize, tLen, cDir, cType;\nint nFrame, idObj;\nbool isSh;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\n#define CosSin(x) (sin ((x) + vec2 (0.5 * pi, 0.)))\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat Ddot (vec2 p)\n{\n  return dot (p, p);\n}\n\nvec3 TruchSDist (vec2 p)\n{\n  vec2 pc, pc1, pc2, dp;\n  float d, d1, d2, cxy, rc, ac, s, ss;\n  bool ct;\n  ct = (cType == 2. || cType == 4.);\n  if (ct) {\n    pc1 = - vec2 (0., cDir);\n    pc2 = vec2 (sqrt3/2. * Ssign (p.x), 0.5 * cDir);\n    d1 = Ddot (p - pc1);\n    d2 = Ddot (p - pc2);\n    d = min (d1, d2);\n    pc = (d == d1) ? pc1 : pc2;\n    rc = 0.5;\n    d = abs (sqrt (d) - rc);\n  } else {\n    if (cDir != 0.) p = 0.5 * vec2 (p.x - cDir * sqrt3 * p.y, cDir * sqrt3 * p.x + p.y);\n    pc1 = vec2 (sqrt3/2. * Ssign (p.x), 0.);\n    pc2 = vec2 (sqrt3 * Ssign (p.x), 0.);\n    d1 = sqrt (Ddot (p - pc1));\n    d2 = abs (sqrt (Ddot (p - pc2)) - 1.5);\n    d = min (d1, d2);\n    pc = (d == d1) ? pc1 : pc2;\n    rc = (d == d1) ? 0.: 1.5;\n  }\n  dp = p - pc;\n  cxy = cIdB.x - cIdB.y;\n  s = (ct && cxy < 0. || ! ct && abs (cxy - 2.) == 1.) ? -1. : 1.;\n  ac = (0.5 - atan (dp.y, - dp.x) / (2. * pi)) * s;\n  if (! ct && abs (cxy - 2.) <= 1.) ac += 1./6.;\n  ss = Ssign (length (dp) - rc);\n  return vec3 (d * ss, rc * ss * s, ac);\n}\n\nbool OnTrk (vec2 w)\n{\n  vec2 wp, wm;\n  float cxy;\n  bool cyo, offTrk;\n  cxy = cIdB.x - cIdB.y;\n  cyo = (mod (cIdB.y, 2.) == 1.);\n  wm = Rot2Cs (w, CosSin (- pi / 3.)) - vec2 (0., 0.3);\n  wp = Rot2Cs (w, CosSin (pi / 3.));\n  offTrk = (cxy == -2. && wm.y > 0. ||\n     ! cyo && (cxy == -3. && w.y > -0.3 || cxy == -2. || cxy == -1. && wm.y > 0. ||\n     cxy == 1. && wm.y < 0. || (cxy == 2. || cxy == 3.) && w.x < 0. || cxy == 4. || cxy == 5.) ||\n     cyo && (cxy == -3. || cxy == 0. && wp.x > 0. || (cxy == 1. || cxy == 2.) && w.x > 0. ||\n     cxy == 3. || cxy == 4. && wm.x < 0. || cxy == 5. && wm.y < 0.));\n     return ! offTrk;\n}\n\nvoid SetPath ()\n{\n  float ts, tl;\n  ts = 1.;\n  tl = 1.5;\n  cPath[ 0] = vec4 (0., 0., -1./6., tl);\n  cPath[ 1] = vec4 (1., 0., 1./3., - ts);\n  cPath[ 2] = vec4 (0., 1., 5./6., tl);\n  cPath[ 3] = vec4 (-1., 1., -1./3., ts);\n  cPath[ 4] = vec4 (-1., 2., 1., ts);\n  cPath[ 5] = vec4 (0., 1., - 1./6., tl);\n  cPath[ 6] = vec4 (1., 1., 1./6., tl);\n  cPath[ 7] = vec4 (1., 2., 1., ts);\n  cPath[ 8] = vec4 (2., 1., 1./2., - tl);\n  cPath[ 9] = vec4 (2., 0., -1./2., tl);\n  cPath[10] = vec4 (3., -1., -1./6., tl);\n  cPath[11] = vec4 (4., -1., 1./3., - ts);\n  cPath[12] = vec4 (3., 0., -1./2., - tl);\n  cPath[13] = vec4 (3., 1., 1./2., tl);\n  cPath[14] = vec4 (2., 2., 5./6., tl);\n  cPath[15] = vec4 (1., 2., -1./3., ts);\n  cPath[16] = vec4 (1., 3., 1., ts);\n  tEnd[0] = 0.;\n  for (int k = 0; k < PLEN; k ++) tEnd[k + 1] = tEnd[k] + abs (cPath[k].w);\n  tLen = tEnd[PLEN];\n}\n\nvec2 EvalPPos (float t)\n{\n  vec4 cp;\n  vec2 tp, vd;\n  float tt, r, a, dc;\n  t /= 3.;\n  tp = floor (t / tLen) * vec2 (2.);\n  t = mod (t, tLen);\n  for (int k = 0; k < PLEN; k ++) {\n    if (t >= tEnd[k] && t < tEnd[k + 1]) {\n      cp = cPath[k];\n      tt = 2. * (t - tEnd[k]) / (tEnd[k + 1] - tEnd[k]) - 1.;\n      break;\n    }\n  }\n  tp += cp.xy;\n  if (abs (cp.w) == 1.5) {\n    r = 1.5;\n    dc = sqrt3;\n    a = pi / 6.;\n    tt *= Ssign (cp.w);\n  } else {\n    r = 0.5;\n    dc = 1.;\n    a = - Ssign (cp.w) * pi / 3.;\n  }\n  vd = vec2 (-1., 1.) * sin (pi * cp.z + vec2 (0., 0.5 * pi));\n  return (HexToPix (tp) + dc * vd - r * Rot2Cs (vd, CosSin (tt * a))) * hgSizeB;\n}\n\nfloat PathHt (vec2 p)\n{\n  return 2.5 * dot (sin (2. * pi * p * vec2 (0.015, 0.016)), vec2 (1.));\n}\n\nvoid BConf ()\n{\n  float h, cxy;\n  cMidB = HexToPix (cIdB * hgSizeB);\n  h = Hashfv2 (cIdB);\n  if (Hashfv2 (17.11 * cIdB) > 0.4) {\n    cDir = floor (3. * h) - 1.;\n    cType = 3.;\n  } else {\n    cDir = 2. * floor (2. * h) - 1.;\n    cType = 4.;\n  }\n  cxy = cIdB.x - cIdB.y;\n  if (cxy == 0.) cType = 1.;\n  else if (abs (cxy) == 1.) cType = mod (cIdB.x, 2.) + 1.;\n  else if (cxy == -2. || cxy == -3. || cxy == 5.) cType = 2.;\n  else if (cxy == 2. || cxy == 3. || cxy == 4.) cType = 1.;\n  if (cType <= 2.) {\n    if (cType == 1. && (cxy == 1. || cxy == 2. || cxy == 3.)) cDir = 0.;\n    else if (cType == 1. && cxy == 4.) cDir = -1.;\n    else if (cType == 2. && cxy == 5.) cDir = 1.;\n    else cDir = 2. * mod (cIdB.x, 2.) - 1.;\n  }\n}\n\nbool HexCellOcc ()\n{\n  vec3 cm3;\n  vec2 w;\n  float dt, rc, ac, d, dc, hy;\n  cIdB = PixToHex (cHit.xz / hgSizeB);\n  BConf ();\n  hy = cHit.y - PathHt (cHit.xz);\n  w = (cHit.xz - cMidB) / hgSizeB;\n  cm3 = TruchSDist (w);\n  dt = hgSizeB * abs (cm3.x);\n  rc = abs (cm3.y);\n  ac = 18. * abs (cm3.z);\n  d = length (vec2 (dt + 0.5 * dot (sin (2. * pi * vec3 (dt, 2. * rc * ac, 0.1 * cHit.y)),\n     vec3 (1.)), 0.7 * hy)) - 10.1;\n  d = min (d, length (vec2 (hgSizeB * HexEdgeDist (w), hy)) - 8.1);\n  dc = min (4.1 - dt, 1.5 - abs (hy + 12.));\n  idObj = (d > dc) ? 1 : 2;\n  d = max (d, dc);\n  d = SmoothMin (d, 13. + 8.5 * dot (sin (0.03 * pi * cHit), vec3 (1.)) - cHit.y, 2.);\n  return (d > 0.);\n}\n\nvec2 PixToHexS (vec2 p)\n{\n  vec2 c, r, dr;\n  p.y *= 2./sqrt3;\n  c = p.yx;\n  r = floor (c);\n  r += 2. * fract (0.5 * vec2 (r.x, r.y + step (0.5, fract (0.25 * r.x + 0.25))));\n  dr = c - r;\n  r += step (2., dot (abs (dr), vec2 (sqrt3, 1.))) * sign (dr) * vec2 (2., 1.);\n  r.x *= sqrt3/2.;\n  return r;\n}\n\nfloat HexVolRay (vec3 ro, vec3 rd)\n{  // (based on \"\"Canal Ruins 2\")\n  vec3 ht, htt, w;\n  vec2 hv[3], ve;\n  float dHit, ty, sy;\n  if (rd.y == 0.) rd.y = 0.0001;\n  cHit = vec3 (PixToHexS (ro.xz).yx, vgSize * floor (ro.y / vgSize + 0.5)).xzy;\n  hv[0] = vec2 (1., 0.);\n  hv[1] = vec2 (0.5, 0.5 * sqrt3);\n  hv[2] = vec2 (-0.5, 0.5 * sqrt3);\n  for (int k = 0; k < 3; k ++) hv[k] *= sign (dot (hv[k], rd.xz));\n  sy = sign (rd.y);\n  qnHit = vec3 (0.);\n  dHit = dstFar;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    w = ro - cHit;\n    ht.z = dstFar;\n    for (int k = 0; k < 3; k ++) {\n      htt = vec3 (hv[k].xy, (1. - dot (hv[k], w.xz)) / dot (hv[k], rd.xz));\n      if (htt.z < ht.z) ht = htt;\n    }\n    ty = (0.5 * sy * vgSize - w.y) / rd.y;\n    if (ht.z < ty) cHit.xz += 2. * ht.xy;\n    else cHit.y += sy * vgSize;\n    if (HexCellOcc ()) {\n      if (ht.z < ty) {\n        dHit = ht.z;\n        qnHit.xy = ht.xy;\n      } else {\n        dHit = ty;\n        qnHit.z = sy;\n      }\n      qnHit = - qnHit.xzy;\n      break;\n    }\n  }\n  return dHit;\n}\n\nfloat HexCellEdge (vec3 p)\n{\n  vec2 dh;\n  float d;\n  dh = p.xz - cHit.xz;\n  if (qnHit.y == 0.) {\n    d = min (abs (length (dh - dot (dh, qnHit.xz) * qnHit.xz) - 1./sqrt3),\n       abs (fract (p.y / vgSize) - 0.5) * vgSize);\n  } else {\n    dh = abs (dh);\n    d = max (dot (vec2 (0.5, sqrt3/2.), dh), dh.x) - 1.;\n  }\n  return d;\n}\n\nvec3 HexPrisCol (vec3 p, float dEdge)\n{\n  vec3 col;\n  vec2 cIdS, c;\n  float b;\n  col = (idObj == 1) ? vec3 (0.8, 0.9, 0.9) : vec3 (0.6, 0.7, 0.7);\n  col *= 1. - 0.15 * smoothstep (0.01, 0.03, abs (dEdge));\n  if (abs (qnHit.y) < 0.9 && mod (floor (p.y / vgSize + 0.5), 2.) == 0.) col *= 0.9;\n  cIdS = PixToHex (cHit.xz);\n  c = vec2 (1., 0.95);\n  b = mod (dot (mod (2. * cIdS + cIdS.yx, 3.), vec2 (1., 2.)), 3.);\n  if (idObj == 1) col *= (b == 0.) ? c.xyy : ((b == 1.) ? c.yxy : c.yyx);\n  if (qnHit.y == 1.) col *= 0.7;\n  return col;\n}\n\nfloat FishDf (vec3 p, int k)\n{\n  vec3 q;\n  float dMin, dBodyF, dBodyB, dMouth, dFinT, dFinP, dFinD, dEye, d;\n  p.xz = Rot2Cs (p.xz, fish[k].angCsH);\n  p.yz = Rot2Cs (p.yz, fish[k].angCsV);\n  if (! isSh) d = PrCapsDf (p, 1.6, 3.);\n  if (isSh || d < 0.1) {\n    p.x = abs (p.x);\n    p.z -= 2.;\n    p.yz = Rot2Cs (p.yz, CosSin (0.2 * fish[k].angI));\n    q = p;\n    q.z -= -0.6;\n    dBodyF = PrEllipsDf (q, vec3 (0.7, 0.8, 2.4));\n    q = p;\n    q.z -= -1.2;\n    q.yz = Rot2Cs (q.yz, CosSin (fish[k].angI));\n    q.z -= -1.6;\n    dBodyB = PrEllipsDf (q, vec3 (0.35, 0.5, 2.5));\n    q.z -= -2.2;\n    q.yz = Rot2Cs (q.yz, CosSin (2. * fish[k].angI));\n    q.xz -= vec2 (0.5, -0.5);\n    q.xz = Rot2D (q.xz, 0.4);\n    dFinT = PrEllipsDf (q, vec3 (0.8, 0.07, 0.4));\n    q = p;\n    q.yz -= vec2 (-0.3, 1.7);\n    q.yz = Rot2D (q.yz, 0.1);\n    q.y = abs (q.y) - 0.04;\n    dMouth = PrEllipsDf (q, vec3 (0.25, 0.12, 0.6));\n    q = p;\n    q.yz -= vec2 (0.7, -1.);\n    q.yz = Rot2D (q.yz, 0.6);\n    dFinD = PrEllipsDf (q, vec3 (0.05, 1., 0.35));\n    q = p;\n    q.xy = Rot2D (q.xy, 0.8);\n    q.xz -= vec2 (0.7, -0.1);\n    q.xz = Rot2D (q.xz, 0.6);\n    dFinP = PrEllipsDf (q, vec3 (0.9, 0.04, 0.3));\n    q = p;\n    q -= vec3 (0.4, -0.1, 1.1);\n    dEye = PrEllipsDf (q, vec3 (0.11, 0.15, 0.15));\n    idObj = 11;\n    dMin = SmoothMin (dBodyF, dBodyB, 0.3);\n    dMin = SmoothMin (SmoothMin (dMin, dFinT, 0.1), dMouth, 0.15);\n    dMin = SmoothMin (SmoothMin (dMin, dFinD, 0.02), dFinP, 0.02);\n    if (dEye < dMin) idObj = 12;\n    dMin = SmoothMin (dMin, dEye, 0.01);\n    qHit = q;\n  } else dMin = d;\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qHitA;\n  float dMin, d, fishSz;\n  int idObjA;\n  fishSz = 1.2;\n  dMin = dstFar / fishSz;\n  for (int k = VAR_ZERO; k < N_FISH; k ++) {\n    q = (p - fish[k].pos) / fishSz;\n    d = FishDf (q, k);\n    if (d < dMin) {\n      idObjA = idObj;\n      qHitA = qHit;\n      dMin = d;\n    }\n  }\n  idObj = idObjA;\n  qHit = qHitA;\n  return dMin * fishSz;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  isSh = true;\n  sh = 1.;\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 40; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  isSh = false;\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 BgCol (vec3 rd)\n{\n  float t, gd, b;\n  t = 4. * tCur;\n  b = dot (vec2 (atan (rd.x, rd.z), 0.5 * pi - acos (rd.y)), vec2 (2., sin (rd.x)));\n  gd = (clamp (sin (5. * b + t), 0., 1.) * clamp (sin (3.5 * b - t), 0., 1.) +\n     clamp (sin (21. * b - t), 0., 1.) * clamp (sin (17. * b + t), 0., 1.)) *\n     (1. - smoothstep (0.4, 0.6, rd.y));\n  return 0.7 * vec3 (0.2, 0.7, 1.) * (0.24 + 0.44 * (rd.y + 1.) * (rd.y + 1.)) *\n     (1. + 0.1 * gd);\n}\n\nfloat TurbLt (vec3 p, vec3 n, float t)\n{\n  vec2 q, qq, a1, a2;\n  float c, tt;\n  q = vec2 (dot (p.yzx, n), dot (p.zxy, n));\n  q = 2. * pi * mod (q, 1.) - 256.;\n  t += 11.;\n  c = 0.;\n  qq = q;\n  for (float k = 1.; k <= 7.; k ++) {\n    tt = t * (1. + 1. / k);\n    a1 = tt - qq;\n    a2 = tt + qq;\n    qq = q + tt + vec2 (cos (a1.x) + sin (a2.y), sin (a1.y) + cos (a2.x));\n    c += 1. / length (q / vec2 (sin (qq.x), cos (qq.y)));\n  }\n  return clamp (pow (abs (1.25 - abs (0.167 + 40. * c)), 8.), 0., 1.);\n}\n\nfloat WatShd (vec3 rd)\n{\n  vec2 p;\n  float t, h;\n  p = 10. * rd.xz / rd.y;\n  t = tCur * 2.;\n  h = sin (p.x * 2. + t * 0.77 + sin (p.y * 0.73 - t)) +\n     sin (p.y * 0.81 - t * 0.89 + sin (p.x * 0.33 + t * 0.34)) +\n     (sin (p.x * 1.43 - t) + sin (p.y * 0.63 + t)) * 0.5;\n  h *= smoothstep (0.5, 1., rd.y) * 0.04;\n  return h;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, vnn, bgCol;\n  float dstObj, dstBlk, dEdge, sh;\n  int idObjH;\n  isSh = false;\n  dstBlk = HexVolRay (ro, rd);\n  idObjH = idObj;\n  dstObj = ObjRay (ro, rd);\n  bgCol = BgCol (rd);\n  if (min (dstObj, dstBlk) < dstFar) {\n    if (dstObj < dstBlk) {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      vnn = vn;\n      col4 = vec4 (0.5, 0.8, 0.4, 0.2);\n      if (idObj == 11) col4 = vec4 (0.8, 0.8, 1., 0.1) *\n         (1. - 0.3 * smoothstep (-0.4, -0.2, vn.y));\n      else if (idObj == 12) col4 = vec4 (0.6, 1., 0.6, -1.) *\n         step (0.05, length (qHit.yz - vec2 (-0.02, 0.05)));\n    } else {\n      ro += dstBlk * rd;\n      idObj = idObjH;\n      dEdge = HexCellEdge (ro);\n      col4 = vec4 (HexPrisCol (ro, dEdge), 0.);\n      vn = qnHit;\n      if (vn.y > 0.99) col4 *= 0.8;\n      vnn = vn;\n      vn = VaryNf (8. * ro, vn, 0.5 * (1. - 0.95 * smoothstep (40., 60., dstBlk)) *\n         smoothstep (0.01, 0.03, abs (dEdge)));\n    }\n    if (col4.a >= 0.) {\n      sh = 0.6 + 0.4 * smoothstep (12., 16., HexVolRay (ro + 0.01 * vn, sunDir));\n      sh = min (sh, ObjSShadow (ro + 0.01 * vn, sunDir));\n      col = col4.rgb * (0.2 + 0.1 * max (dot (sunDir * vec3 (-1., 1., -1.), vn), 0.) +\n         0.8 * sh * max (dot (sunDir, vn), 0.)) +\n         col4.a * step (0.95, sh) * pow (max (dot (reflect (sunDir, vn), rd), 0.), 32.);\n      col += 0.2 * TurbLt (0.2 * ro, abs (vnn), 0.3 * tCur) * smoothstep (-0.3, -0.1, vnn.y);\n      col = mix (col, bgCol, smoothstep (0., 0.95, min (dstObj, dstBlk) / dstFar));\n    } else col = col4.rgb * (0.4 + 0.6 * max (- dot (rd, vn), 0.));\n  } else col = bgCol + WatShd (rd);\n  return clamp (col, 0., 1.);\n}\n\nvoid FishPM (float t, out vec3 pos, out float az, out float el)\n{\n  vec3 p, pf, pb, vd;\n  pf.xz = EvalPPos (t + 0.1);\n  pf.y = PathHt (pf.xz);\n  pb.xz = EvalPPos (t - 0.1);\n  pb.y = PathHt (pb.xz);\n  pos = 0.5 * (pf + pb);\n  vd = normalize (pf - pb);\n  az = atan (vd.z, - vd.x) - 0.5 * pi;\n  el = sin (vd.y);\n}\n\n#define N_WIN  1\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv, uvv, mMid[N_WIN], ut[N_WIN], mSize, msw;\n  float el, az, zmFac, asp, sr, vObs, tGap, t, angH, angV;\n  int vuId, vuIdO, regId;\n  bool sWin, opFish;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCur = mod (tCur, 18000.) + 30. * floor (dateCur.w / 3600.) + 20.;\n  asp = canvas.x / canvas.y;\n  sWin = true;\n  if (sWin) {\n    mSize = (1./5.) * vec2 (asp, 1.);\n    mMid[0] = (1. - mSize.y) * vec2 (asp, 1.);\n    for (int k = 0; k < N_WIN; k ++) ut[k] = abs (uv - mMid[k]) - mSize;\n  }\n  regId = -1;\n  if (mPtr.z > 0.) {\n    regId = 0;\n    if (sWin) {\n      for (int k = 0; k < N_WIN; k ++) {\n        msw = 2. * mPtr.xy - mMid[k] / vec2 (asp, 1.);\n        if (Maxv2 (abs (msw)) < mSize.y) {\n          regId = k + 1;\n          msw /= 2. * mSize.y;\n          break;\n        }\n      }\n    }\n    if (regId == 0) msw = mPtr.xy;\n  }\n  vuId = 0;\n  if (sWin) {\n    for (int k = 0; k < N_WIN; k ++) {\n      if (Maxv2 (ut[k]) < 0.) {\n        uv = (uv - mMid[k]) / mSize.y;\n        vuId = k + 1;\n        break;\n      }\n    }\n    if (regId > 0 && (vuId == 0 || vuId == regId)) vuId = regId - vuId;\n  }\n  vuIdO = vuId;\n  if (uv.x / asp > 1. - 2. * SmoothBump (0.25, 0.75, 0.01, fract (tCur / 60.))) vuId = 1 - vuId;\n  hgSizeB = 48.;\n  vgSize = 1.;\n  SetPath ();\n  dstFar = 150.;\n  vObs = 0.4;\n  opFish = (vuId == 0);\n  tGap = (opFish) ? 0.6 * hgSizeB / float (N_FISH) : 2.;\n  for (int k = VAR_ZERO; k < N_FISH; k ++) {\n    t = opFish ? tGap * (floor (vObs * tCur / tGap + 0.5) - fract (tCur / tGap) -\n       0.5 * float (N_FISH)) : vObs * tCur;\n    FishPM (t + tGap * float (k), fish[k].pos, angH, angV);\n    if (opFish) {\n      angH += pi;\n      angV *= -1.;\n      fish[k].pos.y -= 4.;\n    } else {\n      fish[k].pos.y -= 2.;\n    }\n    fish[k].angCsH = CosSin (angH);\n    fish[k].angCsV = CosSin (angV);\n    fish[k].angI = 0.1 * sin (pi * tCur + ((opFish) ? 0. :\n       2. * pi * float (k) / float (N_FISH)));\n  }\n  FishPM (vObs * tCur + ((opFish) ? 0. : -0.8), ro, az, el);\n  if (mPtr.z > 0. && vuIdO == regId) {\n    az += 2. * pi * msw.x;\n    el += pi * msw.y;\n  }\n  el = clamp (el, -0.45 * pi, 0.45 * pi);\n  zmFac = 1.8;\n  vuMat = StdVuMat (el, az);\n  sunDir = normalize (vec3 (0., 1.5, 1.));\n  sunDir.xz = Rot2D (sunDir.xz, 0.002 * pi * tCur);\n  uv += 2. * sin (2. * pi * (5. * uv + 0.5 * sin (0.4 * pi * tCur))) / canvas.y;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif\n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) *\n       pi)) / zmFac;\n    rd = vuMat * normalize (vec3 (2. * tan (0.5 * atan (uvv.x / asp)) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  if (sWin) {\n    for (int k = 0; k < N_WIN; k ++) {\n      if (Maxv2 (ut[k]) < 0. && Minv2 (abs (ut[k])) * canvas.y < 3.) col = vec3 (0.3, 0.5, 0.3);\n    }\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (vec3 (p.xy, sign (p.z) * (max (0., abs (p.z) - h)))) - r;\n}\n\nfloat PrEllipsDf (vec3 p, vec3 r)\n{\n  return (length (p / r) - 1.) * min (r.x, min (r.y, r.z));\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), 1.5 * h.y);\n}\n\nfloat HexEdgeDist (vec2 p)\n{\n  p = abs (p);\n  return (sqrt3/2.) - p.x + 0.5 * min (p.x - sqrt3 * p.y, 0.);\n}\n\nfloat HexEdgeDist (vec2 p, float h)\n{\n  p = abs (p);\n  p -= vec2 (0.5, - sqrt3/2.) * min (p.x - sqrt3 * p.y, 0.);\n  p.x -= h * sqrt3/2.;\n  return Ssign (p.x) * max (abs (p.x), abs (p.y) - 0.5 * h);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nfloat Ssign (float x)\n{\n  return (x != 0.) ? sign (x) : 1.;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}