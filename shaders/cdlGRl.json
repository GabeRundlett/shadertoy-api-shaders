{
    "Shader": {
        "info": {
            "date": "1666651584",
            "description": "Literally just a 2nd order mandelbulb\nNo edit whatsoever",
            "flags": 32,
            "hasliked": 0,
            "id": "cdlGRl",
            "likes": 69,
            "name": "Fractal portrait",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbulb",
                "pathtracing"
            ],
            "usePreview": 0,
            "username": "loicvdb",
            "viewed": 1317
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 o, vec2 u)\n{\n    o = texelFetch(iChannel0, ivec2(u), 0);\n    vec2 cuv = (u - iResolution.xy * 0.5) / iResolution.y;\n    o *= 1.0 - 0.5 * dot(cuv, cuv);\n    o = (o * (2.51 * o + 0.03)) / (o * (2.43 * o + 0.59) + 0.14);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define eps 0.0002\n#define fp 8.0\n#define twopi 6.28318530718\n#define lo normalize(vec3(0.9, -0.1, -0.2))\n\nuint seed;\nfloat ot;\n\nfloat de(vec3 c)\n{\n    vec3 z = c;\n    float dr = 1.0;\n    float r = length(z);\n    ot = 1.0;\n    \n    for (int j = 0; j < 11 && r < 4.0; j++)\n    {\n        dr = dr * r * 2.0 + 1.0;\n        float t = acos(z.z / r) * 2.0;\n        float p = atan(z.y, z.x) * 2.0;\n        z = r * r * vec3(sin(t) * vec2(cos(p), sin(p)), cos(t)) + c;\n        r = length(z);\n        ot = min(abs(z.z) * 9.0, ot);\n    }\n    \n    return 0.5 * log(r) * r / dr;\n}\n\nvec4 trace(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    float d = de(ro);\n    \n    for (int i = 0; i < 128 && d > eps && t < fp + eps; i++)\n    {\n        t += d;\n        d = de(ro + rd * t);\n    }\n    \n    t -= eps;\n    \n    vec3 p = ro + rd * t;\n    vec2 k = vec2(0, eps);\n    vec3 n = normalize(vec3(de(p + k.yxx), de(p + k.xyx), de(p + k.xxy)) - de(p));\n    \n    return vec4(n, t);\n}\n\nfloat hash(int s)\n{\n    uint i = uint(s) + seed;\n    i *= 0xB5297A4Du;\n    i ^= i >> 8;\n    i += 0x68E31DA4u;\n    i ^= i << 8;\n    i *= 0x1B56C4E9u;\n    i ^= i >> 8;\n    return float(i) / float(~0u);\n}\n\nvec3 ortho(vec3 n)\n{\n    return normalize(abs(n.x) > abs(n.z) ? vec3(-n.y, n.x, 0)  : vec3(0, -n.z, n.y));\n}\n\nmat3 base(vec3 n)\n{\n    vec3 o1 = n;\n    vec3 o0 = ortho(o1);\n    return mat3(o0, cross(o0, o1), o1);\n}\n\n\nvec3 li(vec3 ro, vec3 rd)\n{\n    vec3 rad = vec3(0);\n    vec3 att = vec3(1);\n    \n    for (int b = 0; b < 4; b++)\n    {\n        vec4 t = trace(ro, rd);\n        if (t.w > fp)\n        {\n            rad += att * vec3(0.9, 0.8, 0.5) * step(rd.x + rd.z, -0.8);\n            rad += att * 0.2;\n            break;\n        }\n        \n        ro += t.w * rd;\n        \n        float la = hash(4 + b * 4) * twopi;\n        float lr = 1.0 - 0.04 * hash(5 + b * 4);\n        vec3 ld = base(lo) * vec3(sqrt(1.0 - lr * lr) * vec2(cos(la), sin(la)), lr);\n        \n        float dr = sqrt(hash(6 + b * 4));\n        float da = hash(7 + b * 4) * twopi;\n        rd = base(t.xyz) * vec3(dr * cos(da), dr * sin(da), sqrt(1.0 - dr * dr));\n        \n        att *= mix(vec3(1.0, 1.0, 0.9), vec3(0.7, 0.2, 0.3), ot);\n        rad += att * vec3(5, 6, 8) * max(0.0, dot(ld, t.xyz)) * float(trace(ro, ld).w > fp);\n    }\n    \n    return rad;\n}\n\n\nvoid mainImage(out vec4 o, vec2 u)\n{\n    seed ^= 0x300A6F5Eu * uint(iFrame);\n    seed ^= 0x884C78B7u * uint(u.x);\n    seed ^= 0x1F704572u * uint(u.y);\n    \n    vec2 cuv = (u - 0.5 + vec2(hash(0), hash(1)) - iResolution.xy * 0.5) / iResolution.y;\n    \n    vec3 rot = vec3(0.95, -0.1, 4.2);\n    vec3 c = cos(rot);\n    vec3 s = sin(rot);\n    mat3 rx = mat3(1, 0, 0, 0, c.x, s.x, 0, -s.x, c.x);\n    mat3 ry = mat3(c.y, 0, -s.y, 0, 1, 0, s.y, 0, c.y);\n    mat3 rz = mat3(c.z, s.z, 0, -s.z, c.z, 0, 0, 0, 1);\n    mat3 cam = rx * ry * rz;\n    \n    float a = hash(2) * twopi;\n    vec3 ap = 0.1 * sqrt(hash(3)) * vec3(cos(a), sin(a), 0);\n    \n    vec3 rd = cam * normalize(vec3(cuv * 3.0, 4.6) - ap);\n    vec3 ro = cam * (vec3(0, -0.2, -5) + ap);\n    \n    vec4 tex = texelFetch(iChannel0, ivec2(u), 0);\n    uint m = floatBitsToUint(tex.w) + 1u;\n    o = vec4(mix(tex.xyz, li(ro + 4.0 * rd, rd), 1.0 / float(m)), uintBitsToFloat(m));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}