{
    "Shader": {
        "info": {
            "date": "1609885889",
            "description": "Cool modification fo my shader \"[url=https://www.shadertoy.com/view/tsKfRc]Fractured Webcam[/url].\"",
            "flags": 32,
            "hasliked": 0,
            "id": "WlcyW2",
            "likes": 5,
            "name": "Cool Pseudotile Pattern",
            "published": 3,
            "tags": [
                "colorful",
                "pattern",
                "cool",
                "pseudotile"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 165
        },
        "renderpass": [
            {
                "code": "// Cool modification fo my shader \"Fractured Webcam\" (https://www.shadertoy.com/view/tsKfRc)\n\n// Hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec3 Hash23(in vec2 p) {\n    vec3 p3 = fract(vec3(p.xyx) * vec3(0.1031, 0.103, 0.0973));\n    p3 += dot(p3, p3.yxz + 33.33);\n    return fract((p3.xxy + p3.yzz) * p3.zyx);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = texture(iChannel0, uv).xy;\n    fragColor = vec4(Hash23(uv * 95.0), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 VectorField(in vec2 p) {\n    p *= 20.0;\n    return 0.001 * vec2(cos(p.x + p.y), sin(p.y - p.x));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = vec4(uv, 1.0, 1.0);\n    if (iFrame > 0) {\n        fragColor = texture(iChannel0, uv);\n        fragColor.xy += VectorField(fragColor.xy);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}