{
    "Shader": {
        "info": {
            "date": "1630204740",
            "description": "Shader version of Matt Henderson's lightning algorithm from numberphile https://www.youtube.com/watch?v=akZ8JJ4gGLs",
            "flags": 32,
            "hasliked": 0,
            "id": "fdt3Rj",
            "likes": 18,
            "name": "Lightning algorithm",
            "published": 3,
            "tags": [
                "2d",
                "lightning",
                "numberphile"
            ],
            "usePreview": 0,
            "username": "hippiman",
            "viewed": 504
        },
        "renderpass": [
            {
                "code": "// Shader version of Matt Henderson's Lightning Algorithm from numberphile https://www.youtube.com/watch?v=akZ8JJ4gGLs\n// resize and try different seeds with constants after comment \"play with these\" in Common\n// random functions taken from other shadertoys (author next to functions in Common)\n\n// (doesn't work very well with fullscreen)\n\nivec2 getCoords(ivec2 q) {\n   return ivec2(((vec2(q) + vec2(.5,.5)) / SCALE * iResolution.y + iResolution.xy) / 2.);\n}\n\nvec4 old(ivec2 q) {\n  return texelFetch(iChannel0, getCoords(q), 0);\n}\n\nfloat squish(float s) {\n  return pow(s, iResolution.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n  vec2 s = uv * SCALE;\n  ivec2 q = ivec2(floor(s));\n  \n  int edges = getAllEdges(SEED, q);\n  bool isBottomEdge = mod(s.y, 1.) < EDGE_WIDTH && HAS_EDGE(BOTTOM_EDGE, edges);\n  bool isRightEdge = mod(s.x, 1.) > (1. - EDGE_WIDTH) && HAS_EDGE(RIGHT_EDGE, edges);\n  \n  vec3 col = vec3(1., 1., 0.) * squish(smoothstep((0.), (1.), (old(q).r / float(iFrame) * float(FPA))));\n  col = isBottomEdge || isRightEdge ? vec3(1.,0.,0.) : col;\n  \n\n  col = s.y < -(SCALE-EDGE_WIDTH) ? vec3(0., 1., 0.) : col;\n  col = old(q).g > 0. ? vec3(1., 1., 0.) : col;\n\n  fragColor = vec4(col, 1.);\n  \n  // show underlying Buffer A\n  // fragColor = old(q);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// rand/hash from iq:\n//------------------------------------------------------------------\n// oldschool rand() from Visual Studio\n//------------------------------------------------------------------\nint  seed = 1;\nvoid srand(int s ) { seed = s; }\nint  rand(void) { seed = seed*0x343fd+0x269ec3; return (seed>>16)&32767; }\nfloat frand(void) { return float(rand())/32767.0; }\n//------------------------------------------------------------------\n// hash to initialize the random sequence (copied from Hugo Elias)\n//------------------------------------------------------------------\nint hash( int n )\n{\n\tn = (n << 13) ^ n;\n  return n * (n * n * 15731 + 789221) + 1376312589;\n}\nfloat fhash(int n, int w, ivec2 q) {\n   srand(hash(q.x + hash(q.y + hash(w + hash(n))))); return frand();\n}\n\n//------------------------------------------------------------------\n// play with these\n//------------------------------------------------------------------\n#define SCALE (iResolution.y/2.)\n#define EDGE_WIDTH 0.\n#define FPA 1\n#define SEED 1\n#define LR_P .5\n#define TB_P .4\n//------------------------------------------------------------------\n//------------------------------------------------------------------\n\n// other constants\n#define TOP_EDGE 1\n#define RIGHT_EDGE 2\n#define BOTTOM_EDGE 4\n#define LEFT_EDGE 8\n\n#define HAS_EDGE(W, E) ((E & W) > 0)\n\nint getAllEdges(int seed, ivec2 q) {\n  return (fhash(seed, BOTTOM_EDGE, q) < TB_P ? BOTTOM_EDGE : 0)\n   | (fhash(seed, RIGHT_EDGE, q) < LR_P ? RIGHT_EDGE : 0)\n   | (fhash(seed, BOTTOM_EDGE, q + ivec2(0, 1)) < TB_P ? TOP_EDGE : 0)\n   | (fhash(seed, RIGHT_EDGE, q + ivec2(-1, 0)) < LR_P ? LEFT_EDGE : 0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "ivec2 getCoords(ivec2 q) {\n   return ivec2(((vec2(q) + vec2(.5,.5)) / SCALE * iResolution.y + iResolution.xy) / 2.);\n}\n\nvec4 old(ivec2 q) {\n  return texelFetch(iChannel0, getCoords(q), 0);\n}\n\nvec3 neighbor(vec4 self, bool cond, ivec2 q, float m, vec3 f) {\n  vec4 old = old(q);\n  return cond && old.g > 0. && ((q.y < (-(int(SCALE)-1))) || self.r == old.r - 1.)\n    ? vec3(self.r, old.g + 1., 0.)\n    : cond && old.r > 0. \n      ? vec3(old.r+1., f.g, 0.) : f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // Normalized pixel coordinates (from 0 to 1)\n  vec2 uv = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n  vec2 s = uv * SCALE;\n  ivec2 q = ivec2(floor(s));\n  \n  int edges = getAllEdges(SEED, q);\n  bool isBottomEdge = mod(s.y, 1.) < .1 && HAS_EDGE(BOTTOM_EDGE, edges);\n  bool isRightEdge = mod(s.x, 1.) > .9 && HAS_EDGE(RIGHT_EDGE, edges);;\n  vec3 yellow = vec3(1., 0., 0.);\n  vec3 col = s.y > SCALE-1. && s.x > 0. && s.x < 1. ? yellow : vec3(0.);\n  \n  vec4 o = old(q);\n  bool hasOld = o.r > 0.;\n  if(iFrame % FPA == 0) {\n    col = neighbor(o, !HAS_EDGE(TOP_EDGE, edges), q+ivec2(0,1), 1., col);\n    col = neighbor(o, !HAS_EDGE(BOTTOM_EDGE, edges), q+ivec2(0,-1), 1., col);\n    col = neighbor(o, !HAS_EDGE(RIGHT_EDGE, edges), q+ivec2(1,0), 1., col);\n    col = neighbor(o, !HAS_EDGE(LEFT_EDGE, edges), q+ivec2(-1,0), 1., col);\n    col = hasOld ? vec3(o.r, col.gb) : col;\n    col = col.r > 0. && q.y < -int(SCALE)+1 ? vec3(0., 1., 0.) : col;\n  } else {\n    col = o.rgb;\n  }\n  \n  fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}