{
    "Shader": {
        "info": {
            "date": "1528184083",
            "description": "Welcome to uncanny valley!",
            "flags": 0,
            "hasliked": 0,
            "id": "lsVBRm",
            "likes": 0,
            "name": "TerrainGeneration",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "reflection",
                "terrain",
                "sdf",
                "fbm",
                "reflect",
                "terraingeneration"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 642
        },
        "renderpass": [
            {
                "code": "#define STEPS          64\n#define FAR           20.\n#define EPS          1e-3\n#define TERRAIN_OCTAVES 2\n#define HASHSCALE1  .1031\n#define PI   acos( -1.0 )\n#define TPI      PI * 2.0\n\n/*\nfloat hash( float n )\n{\n\n    return fract( sin( n ) * 45843.349 );\n    \n}\n*/\n\n// https://www.shadertoy.com/view/4djSRW\n\nfloat hash(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// iq's\n\n/*\nfloat noise( in vec3 x )\n{\n\n    vec3 p = floor( x );\n    vec3 k = fract( x );\n    \n    k *= k * k * ( 3.0 - 2.0 * k );\n    \n    float n = p.x + p.y * 57.0 + p.z * 113.0; \n    \n    float a = hash( n );\n    float b = hash( n + 1.0 );\n    float c = hash( n + 57.0 );\n    float d = hash( n + 58.0 );\n    \n    float e = hash( n + 113.0 );\n    float f = hash( n + 114.0 );\n    float g = hash( n + 170.0 );\n    float h = hash( n + 171.0 );\n    \n    float res = mix( mix( mix ( a, b, k.x ), mix( c, d, k.x ), k.y ),\n                     mix( mix ( e, f, k.x ), mix( g, h, k.x ), k.y ),\n                     k.z\n    \t\t\t\t );\n    \n    return res;\n    \n}\n\n*/\n\n// iq's\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel1, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\n// iq's\n\nfloat fbm( in vec3 p )\n{\n\n    float f = 0.0;\n    f += 0.5000 * noise( p ); p *= 2.02;\n    f += 0.2500 * noise( p ); p *= 2.03;\n    f += 0.1250 * noise( p ); p *= 2.01;\n    f += 0.0625 * noise( p );\n    f += 0.0125 * noise( p );\n    return f / 0.9375;\n    \n}\n\n// Shane's\n\n// Tri-Planar blending function. Based on an old Nvidia tutorial.\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){\n    \n    //return cellTileColor(p);\n  \n    n = max((abs(n) - 0.2)*7., 0.001); // n = max(abs(n), 0.001), etc.\n    n /= (n.x + n.y + n.z ); \n\treturn (texture(tex, p.yz)*n.x + texture(tex, p.zx)*n.y + texture(tex, p.xy)*n.z).xyz;\n}\n\n// Texture bump mapping. Four tri-planar lookups, or 12 texture lookups in total. I tried to \n// make it as concise as possible. Whether that translates to speed, or not, I couldn't say.\nvec3 texBump( sampler2D tx, in vec3 p, in vec3 n, float bf){\n   \n    const vec2 e = vec2(0.002, 0);\n    \n    //p.z += iTime * 0.2;\n    // Three gradient vectors rolled into a matrix, constructed with offset greyscale texture values.    \n    mat3 m = mat3( tex3D(tx, p - e.xyy, n), tex3D(tx, p - e.yxy, n), tex3D(tx, p - e.yyx, n));\n    \n    vec3 g = vec3(0.299, 0.587, 0.114)*m; // Converting to greyscale.\n    g = (g - dot(tex3D(tx,  p , n), vec3(0.299, 0.587, 0.114)) )/e.x; g -= n*dot(n, g);\n                      \n    return normalize( n + g*bf ); // Bumped normal. \"bf\" - bump factor.\n\t\n}\n\n// Terrain\n\nfloat ter( vec3 p )\n{\n\t\n    float amp = 0.0, fre = 0.0, f = p.y + 0.2; \n    \n\tfor( int i = 0; i < TERRAIN_OCTAVES; ++i )\n    {\n        \n        f += amp * fbm( p * fre );\n    \tamp += 0.5;\n        fre += 3.9;\n        \n        if( i > TERRAIN_OCTAVES ) break;\n        \n        amp *= 0.9;\n        fre *= 2.5;\n        \n    }\n    \n    return f;\n    \n}\n\nvec2 map( vec3 p )\n{\n\n    p.z += iTime * 0.2;\n    \n    vec2 ter = vec2( ter( p ), 0.0 );\n    vec2 wat = vec2( p.y + 0.39 + fbm( p * 2.0 + iTime * 0.1 ) * 0.1, 1.0 );\n    \n    if( wat.x < ter.x ) ter = wat;\n    \n    return ter;\n\n}\n\nvec3 norm( vec3 p )\n{\n\n    vec2 e = vec2( EPS, 0.0 );\n    return normalize( vec3( map( p + e.xyy ).x - map( p - e.xyy ).x,\n                            map( p + e.yxy ).x - map( p - e.yxy ).x,\n                            map( p + e.yyx ).x - map( p - e.yyx ).x\n                          )\n                    );\n\n}\n\nfloat ray( vec3 ro, vec3 rd, out float d )\n{\n\n    float t = 0.0; d = EPS;\n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n        d = 0.3 * map( ro + rd * t ).x;\n        if( d < EPS || t > FAR ) break;\n        \n        t += d;\n    \n    }\n    \n    return t;\n\n}\n\nfloat softShadows( in vec3 ro, in vec3 rd )\n{\n\n    float res = 1.0;\n    \n    for( float t = 0.1; t < 8.0; ++t )\n    {\n    \n        float h = map( ro + rd * t ).x;\n        if( h < EPS ) return 0.0;\n        \n        res = min( res, 8.0 * h / t );\n        \n        t += h;\n    \n    }\n    \n    return res;\n\n}\n\nvec3 shad( vec3 ro, vec3 rd )\n{\n\n    float d = 0.0, t = ray( ro, rd, d );\n    \n    vec3 p = ro + rd * t;\n    vec3 n = norm( p );\n    vec3 lig = normalize( vec3( 1.0, 0.0, iTime ) );\n    vec3 ref = reflect( rd, n );\n    vec3 col = vec3( 0 );\n    \n    if( map( p ).y == 0.0 ) \n    {\n    \n        //p.z += iTime * 0.2;\n        col += mix( vec3( 0.0, 0.1, 0.0 ), vec3( 0.2, 0.0, 0.0 ), fbm( p ) );\n    \tn = texBump(iChannel0, vec3( p.x, p.y, p.z + iTime * 0.2 ) * 3.0 , n, 0.19);\n    \n    }\n    \n    float amb = 0.5 + 0.5 * n.y;\n    float dif = max( 0.0, dot( lig, n ) );\n    float spe = pow( clamp( dot( lig, ref ), 0.0, 1.0 ), 16.0 );\n    float sha = softShadows( lig, p );\n    \n    if( map( p ).y == 1.0 ) col += 0.1 * vec3( 0.2, 0.5, 0.8 ) + 1.0 * spe;\n    \n    col += 0.4 * amb + 0.3 * dif * sha ;\n    \n    // Uncomment the following line to play with snow?\n    \n    //if( n.x < 0.1 && map( p ).y == 0.0 && p.z < 1.5 ) col *= vec3( 2.0 );\n    \n    float far = 1.0;\n    \n    //col /= vec3( far / ( far + t * t * 0.05 ) );\n    \n    col *= sqrt( col );\n    \n    return col;\n\n}\n\n// Clouds\n\nfloat mapV( vec3 p )\n{\n\n    //return p.y + 1.0 * fbm( p + iTime * 0.2 );\n\t//return 0.4 - length( p ) * fbm( p + iTime );\n    \n    p.z += iTime * 0.1;\n    \n    float f = fbm( p + iTime * 0.1 );\n    \n    return f;\n    \n}\n\nfloat rayV( vec3 ro, vec3 rd, out float den )\n{\n\n    float t = 0.0, maxD = 0.0; den = 0.0;\n    \n    for( int i = 0; i < STEPS; ++i )\n    {\n        \n        vec3 p = ro + rd * t;\n    \n        den = mapV( p );\n        maxD = maxD < den ? den : maxD;\n        \n        if( maxD > 1.0 || t > FAR ) break;\n        \n        t += 0.05;\n    \n    }\n    \n    den = maxD;\n    \n    return t;\n\n}\n\nvec3 shadV( vec3 ro, vec3 rd, vec2 uv )\n{\n\n    float den = 0.0;\n    float t = rayV( ro, rd, den );\n    \n    vec3 p = ro + rd * t;\n\n    vec3 col = mix( mix( vec3( 0.7 ), vec3( 0.2, 0.5, 0.8 ), uv.y ), mix( vec3( 0 ), vec3( 1 ), den ), den );\n    //vec3 col = mix( vec3( 1 ), colB, den );\n    \n    //col *= sqrt( col );\n    \n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n\n    vec2 mou = iMouse.xy / iResolution.xy;\n    //vec3 ro = vec3( 0.0, 0.0, iTime );\n    vec3 ro = vec3( sin( mou.x * TPI ), -0.25, cos( -mou.x * TPI ) );\n    \n    //vec3 rd = normalize( vec3( uv, -1.0 ) );\n    \n    vec3 ww = normalize( vec3( 0 ) - ro );\n    vec3 uu = normalize( cross( vec3( 0, 1, 0 ), ww ) );\n    vec3 vv = normalize( cross( ww, uu ) );\n    \n    vec3 rd = normalize( uv.x * uu + uv.y * vv - 1.5 * ww ); \n    \n    float d = 0.0, t = ray( ro, rd, d );\n    \n    vec3 p = ro + rd * t;\n    vec3 n = norm( p );\n    \n    // Time varying pixel color\n    vec3 col = d < EPS ? shad( ro, rd ) / vec3( 1.0 / ( 1.0 + t * t * 0.05 ) ) : shadV( ro, rd, uv );\n    \n    if( map( p ).y == 1.0 )\n    {\n    \n        rd = normalize( reflect( rd, n ) );\n        ro = p + rd * 0.02;\n        \n        if( d < EPS ) \n        {\n            \n            col += 0.02 * shad( ro, rd );\n            col += shadV( ro, rd, uv ) * 0.5;\n        \tcol *= sqrt( col );\n                     \n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}