{
    "Shader": {
        "info": {
            "date": "1555429607",
            "description": "trying to create a slime ",
            "flags": 32,
            "hasliked": 0,
            "id": "3lX3Rr",
            "likes": 1,
            "name": "Radioactive Amoeba",
            "published": 3,
            "tags": [
                "cellularmultipass"
            ],
            "usePreview": 0,
            "username": "tomachi",
            "viewed": 287
        },
        "renderpass": [
            {
                "code": "#define tex(g) texture(iChannel0, (g)/iResolution.xy)\n#define herbtex(g) texture(iChannel1, (g)/iResolution.xy)\n#define width int 100\n#define height int 100\n#define cellCol[height] uniform float \n#define toxic 10.0\n#define redness 0.125\n#define blueness 0.25\nfloat sigmoid(float a, float f)\n{\n\treturn 1.0/(1.0+exp(-f*a));\n}\n\n//void mainImage(out vec4 fragColor, vec2 fragCoord)\n//{\n  //  edgeStrength = sigmoid(edgeStrength - 0.2, 32.0); \n//}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{       \n    // x,y => pos\n\t// z => pressure\n\t// w => ink\t\n\n   \tvec4 aa = tex(fragCoord+vec2(1,0));\n\tvec4 bb = tex(fragCoord+vec2(0,1));\n\tvec4 cc = tex(fragCoord+vec2(-1,0));\n\tvec4 dd = tex(fragCoord+vec2(0,-1));\n    float r, g, b, pressure;\n  \tfloat rh, gh, bh;\n    float biomass = abs( aa.w + bb.w +  cc.w + dd.w) + abs(aa.z + bb.z + cc.z + dd.z); // abs converts to positive\n\t//float pollenSpeed = abs(aa.x) + abs(bb.x) + abs(cc.x) + abs(dd.x);   \n\tfloat pollenSpeed = max(max(abs(aa.x) , abs(bb.x)),max(abs(cc.x) , abs(dd.x)));   \n\n    r = herbtex(fragCoord).r + tex(fragCoord).x;\n    r = pollenSpeed;\n    g = tex(fragCoord).z + herbtex(fragCoord).g;\n    b = tex(fragCoord).z;\n    b = herbtex(fragCoord).r + tex(fragCoord).y;\n    b = pollenSpeed*0.001 + herbtex(fragCoord).b + abs(pollenSpeed );\n    \n\n    // fragColor = vec4(0.,0.,0., 1.0);\n   fragColor = vec4(r, g, b, 1.0);\n   // fragColor = 0.51+0.99*sin(tex(fragCoord).w * 0.95 * sin(vec4(0.5,5.0,4.9,1.0)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://github.com/aiekick/NoodlesPlate/blob/master/fluid.glsl\n//NoodlesPlate widgets\n//uniform(hidden) \tint\t\t\t(frame) \t\t\t\t\t\tuFrame;\n//uniform(hidden) \tfloat\t\t(deltatime) \t\t\t\t\tuDeltaTime;\n//uniform(hidden) \tsampler2D\t(buffer:0) \t\t\t\t\t\tbuffer;\n//uniform(hidden) \tsampler2D\t(buffer:1) \t\t\t\t\t\tbuffer1;\n//uniform(hidden) \tvec2\t\t(buffer:0) \t\t\t\t\t\tsize;\n//uniform(color) \tvec3\t\t(0:10:7.7,6.0,7.5) \t\t\t\tcolor;\n//uniform(physic) \tfloat\t\t(0.0:1.0:0.1) \t\t\t\t\tforce;\n//uniform(prism) \tfloat\t\t(0.00001:0.1:0.01) \t\t\t\tconstraint;\n//uniform(prism) \tfloat\t\t(-1.0:1.0:0.0) \t\t\t\t\teffect;\n//uniform(prism) \tfloat\t\t(0.99:1.0:1.0) \t\t\t\t\tviscosity;\n//uniform(emit) \tfloat\t\t(1.0:20.0:5.0) \t\t\t\t\temitSize;\n//uniform(emit) \tint\t\t\t(0:50:1) \t\t\t\t\t\tcount;\n//uniform(emit) \tfloat\t\t(0.0:0.5:0.3) \t\t\t\t\tradius;\n//uniform(emit) \tfloat\t\t(checkbox:true) \t\t\t\temit;\n//uniform(shape) \tint\t\t\t(combobox:circle,triangle,quad) shapeType;\n\n#define count 20\n#define radius 0.943\n#define emitSize 0.950\n#define force 0.099\n#define constraint 0.01\n#define effect 0.99\n#define tex(g) texture(iChannel0, (g)/iResolution.xy)\n#define herbtex(g) texture(iChannel1, (g)/iResolution.xy)\n\n// v => coord x,y / s => dir\n#define emit(v,s) if (length(g-(v)) < emitSize) fragColor.xy = fragColor.xy * (1.0 - force) + force * (s), fragColor.w = 1.0\n\n// v => coord x,y / d => diam\n#define wallCircle(v,d) if (length(g-(v)) < (d)) fragColor.w = fragColor.z / (length(fragColor.xy)+0.0001), fragColor.xy *= 0.\n\nfloat shape(vec2 p, vec2 d)\n{\n\tfloat r = min(d.x, d.y);\n\tfloat tri = max(abs(p.x)-p.y,p.y) - r;\n    return tri;\n}\n\nfloat theTides(float offset) {\n \treturn 0.00051*(sin((iTime+offset)*0.1));   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // x,y => pos\n\t// z => pressure\n\t// w => ink\n\t\n    vec2 s = iResolution.xy;\n\tvec2 g = fragCoord;\n\t\n\tvec4 a = tex(g+vec2(1,0));\n\tvec4 b = tex(g+vec2(0,1));\n\tvec4 c = tex(g+vec2(-1,0));\n\tvec4 d = tex(g+vec2(0,-1));\n\tfloat pressure = abs(0.12 * (a.z + b.z + c.z + d.z) + (0.01201 * (c.x - a.x + d.y - b.y)));\n\n\tfragColor = tex(g-tex(g).xy); // last state\n    vec4 tomachi = vec4(0.95100F,0.95100F,0.95100F,0.1F);\n\t//fragColor = tex(g-tex(g).xy)* tomachi; // last state\n  \n  \n    //ragColor += tex(g-tex(g).xy)*pressure*0.205;\n    //fragColor += tex(g-herbtex(g).xy)*pressure*0.205;\n    fragColor += herbtex(g-tex(g).xy)*pressure*0.25;\n    fragColor += herbtex(g-herbtex(g).xy)*pressure*0.20;\n\n\tvec2 gp = vec2(a.z-c.z+theTides(4.),b.z-d.z+theTides(0.)); // pressure gradient\n    \n\tfragColor.xyz = vec3(\n\t\tfragColor.x + gp.x,\n\t\tfragColor.y + gp.y,\n\t\t0.25 * (a.z + b.z + c.z + d.z) - 0.05 * (c.x - a.x + d.y - b.y));\n    //  return ;\n    //float pressure = (a.z + b.z + c.z + d.z);\n\t\n    fragColor.xyz = vec3(\n\t\tfragColor.x + gp.x,\n\t\tfragColor.y + gp.y,\n\t\tpressure);\n    \n\tif (iFrame < 1) fragColor = vec4(0.25,0.35,0.01,0.01);\n\tif (g.x < 1. || g.y < 1. || g.x > s.x - 1. || g.y > s.y - 1.) fragColor.xy *= 0.9;\n\t\n    if (iFrame < 20)\n    {\n\t\tfor (int i=0;i<count;i++)\n\t\t{\n\t\t\tfloat a = 6.28318 * float(i)/float(count);\n\t\t\tvec2 dir = vec2(cos(a),sin(a));\n\t\t\tvec2 p = s * 0.95 - dir * radius * min(s.x,s.y);\n\t\t\temit(p, dir);\n\t\t}\n\t}\n\t\n\t// wall\n\tvec2 p = g - s * 0.015;\n\tvec2 dim = vec2(s.x * 0.0152);\n\tif (shape(g-s*0.25*iTime, dim) < 0.1) \n\t{\n\t\tfragColor.w = fragColor.z / (shape(fragColor.xy, vec2(constraint)));\n\t\tfragColor.xy *= effect * (shape(fragColor.xy, vec2(constraint)));\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define tex(g) texture(iChannel0, (g)/iResolution.xy)\n#define herbtex(g) texture(iChannel1, (g)/iResolution.xy)\n#define toxic 10.1\nfloat smoothbump(float center, float width, float x) {\n  float w2 = width/2.0;\n  float cp = center+w2;\n  float cm = center-w2;\n  float c = smoothstep(cm, center, x) * (1.0-smoothstep(center, cp, x));\n  return c;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 tomachiAmp = vec4(0.75, 0.5, 0.75, 1.);\n    vec2 g = fragCoord;\n    \n    // GRAB A SAMPLE FROM BUF A\n    vec4 a = tex(g+vec2(1,0))*0.99;\n\tvec4 b = tex(g+vec2(0,1))*0.99;\n\tvec4 c = tex(g+vec2(-1,0)*0.99);\n\tvec4 d = tex(g+vec2(0,-1)*0.99);\n    \n    \n    // GRAB A SAMPLE FROM BUF B\n    //vec4 a = herbtex(g+vec2(1,0));\n\t//vec4 b = herbtex(g+vec2(0,1));\n\t//vec4 c = herbtex(g+vec2(-1,0));\n\t//vec4 d = herbtex(g+vec2(0,-1));\n    \n    // PULL LAST STATE:\n \tfragColor = herbtex(g-herbtex(g).xy) * tomachiAmp; // last state\n\n    \n    // ANALYSE THE SAMPLE\n    float pressure = 0.25 * (a.z + b.z + c.z + d.z) - 0.05 * (c.x - a.x + d.y - b.y);\n\tvec2 gp = vec2(a.z-c.z,b.z-d.z); // pressure gradient\n    float biomass =abs( a.w + b.w +  c.w + d.w + a.z + b.z + c.z + d.z); // abs converts to positive\n    \n    tomachiAmp = herbtex(g);// + vec4(0.01,.5,0.,1.); // should fade out slowly\n    tomachiAmp = tex(g+vec2(5,5));// + vec4(0.01,.5,0.,1.); // should fade out slowly\n\n     if (biomass > toxic)\n     {\n        // tomachi = vec4(0.9,0.9,0.9,0.9999);\n      //  tomachiAmp = herbtex(g) + vec4(1.,.5,0.,1.);\n     } else {\n       // tomachiAmp = herbtex(g) - vec4(1.,.5,0.,1.);\n     }\n     tomachiAmp = tex(g) - vec4(1.,.5,0.,1.);\n\n    \n    \t// support mouse clicks \n    float mouseX = iMouse.x;\n    float mouseY = iMouse.y;\n    float mouseZ = iMouse.z;\n    float mouseW = iMouse.w;\n    \n    \n    \n  vec2  uv = (fragCoord.xy / iResolution.xy);\n  vec4  m  = iMouse / iResolution.xyxy;\n  //float m0 = 0.;//(m.z > 0.0) ? 0.1 : 0.2;\n  float m0 = (m.z > 0.0) ? 0.1 : 0.2;\n  float m1 = smoothbump(m.x,0.05,uv.x) *\n             smoothbump(m.y,0.05,uv.y);\n  float m2 = smoothbump(abs(m.z),0.05,uv.x) *\n             smoothbump(abs(m.w),0.05,uv.y);\n\t\tvec4 mouseClick = vec4(m1,m1,0.,0.5);\n\n    tomachiAmp += vec4(m1+1.0,m0,m2,1.0);\n    \n   fragColor = tomachiAmp;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}