{
    "Shader": {
        "info": {
            "date": "1712384001",
            "description": "C'est pas tr√®s beau mais c'est le mieux que j'ai pu faire",
            "flags": 0,
            "hasliked": 0,
            "id": "lfG3zh",
            "likes": 1,
            "name": "Ticket pointable heat map",
            "published": 3,
            "tags": [
                "math"
            ],
            "usePreview": 0,
            "username": "Arkitu",
            "viewed": 111
        },
        "renderpass": [
            {
                "code": "vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 gradient( in float t)\n{\n    return palette(\n        t,\n        vec3(0.500, 0.198, 0.368),\n        vec3(0.500, 0.500, 0.228),\n        vec3(0.818, 1.488, 0.588),\n        vec3(0.388, 0.333, 1.178)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 size = iResolution.xy - 100.;\n    //vec2 size = vec2(550., 100.);\n    vec2 pointB = iMouse.xy - 50.;\n    //vec2 pointB = vec2(mod(floor(iTime/(size.y/25.))* size.y/25. * 5., size.x), mod(iTime * 25. , size.y));\n    \n    vec2 point = fragCoord - 50.;\n    \n    float maxD = length(size);\n    \n    if (sqrt(pow(point.x-pointB.x, 2.) + pow(point.y-pointB.y, 2.)) < 5.) {\n        fragColor = vec4(1., 1., 1., 1.);\n        return;\n    }\n    \n    if (point.x > size.x || point.x < 0. || point.y > size.y || point.y < 0.) {\n        fragColor = vec4(0., 0., 0., 1.);\n        return;\n    }\n    \n    vec2 left = vec2(-pointB.x, pointB.y);\n    float d1 = sqrt(pow(point.x-left.x, 2.) + pow(point.y-left.y, 2.));\n    \n    vec2 right = vec2((size.x*2.)-pointB.x, pointB.y);\n    float d2 = sqrt(pow(point.x-right.x, 2.) + pow(point.y-right.y, 2.));\n    \n    vec2 up = vec2(pointB.x, (size.y*2.)-pointB.y);\n    float d3 = sqrt(pow(point.x-up.x, 2.) + pow(point.y-up.y, 2.));\n    \n    vec2 down = vec2(pointB.x, -pointB.y);\n    float d4 = sqrt(pow(point.x-down.x, 2.) + pow(point.y-down.y, 2.));\n    \n    float d = smoothstep(0., 1., min(d1, min(d2, min(d3, d4)))/maxD);\n    \n    fragColor = vec4(gradient(d), 1.);\n    return;\n    \n    if (d1 < d2 && d1 < d3 && d1 < d4) {\n        fragColor = vec4(1., 0., .839, 1.);\n    } else if (d2 < d3 && d2 < d4) {\n        fragColor = vec4(0., 1., .341, 1.);\n    } else if (d3 < d4) {\n        fragColor = vec4(0., .341, 1., 1.);\n    } else {\n        fragColor = vec4(1., .478, 0., 1.);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}