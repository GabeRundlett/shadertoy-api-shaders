{
    "Shader": {
        "info": {
            "date": "1475575351",
            "description": "o yea",
            "flags": 0,
            "hasliked": 0,
            "id": "XlV3RV",
            "likes": 7,
            "name": "1342 // V 4 Victory",
            "published": 3,
            "tags": [
                "pulsing",
                "mandala",
                "glory"
            ],
            "usePreview": 0,
            "username": "MrHenryBemis",
            "viewed": 821
        },
        "renderpass": [
            {
                "code": "#define iTime iTime*.01\n\n#define DTM 134.2\n\n#define D 30.0\n#define T 58.2\n#define M 36.0\n\n#define PI 3.14159265359\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy*2.0-1.0;\n    \n    uv.x *= iResolution.x/iResolution.y;\n    \n    float scale = (sin(iTime)*.5+.5);\n    \n    float d;\n    \n    vec3 col = vec3(0.0);\n    \n    for(int i = 0; i < 33; i++)\n    {\n        vec2 p = vec2(cos(float(i)/33.0*PI*2.0+iTime), sin(float(i)/33.0*PI*2.0+iTime));\n    \n        d = length(uv-p)*1.7;\n        \n        \n    \tif(d <= 3.0)\n        {\n            col += (vec3(\n            sin(-iTime*PI*2.0+D+d*PI),\n            sin(-iTime*PI*2.0+8.0*PI/3.0+M+d*PI),\n            sin(-iTime*PI*2.0+8.0*PI/2.0+T+d*PI))*.5+.5)*sin(d*PI*DTM+iTime*DTM);\n        }\n    }\n    \n    d = length(uv)*2.2;\n    \n    col += vec3(\n    \tsin(-iTime*PI*3.0+D+d*PI),\n        sin(-iTime*PI*2.0+4.0*PI/3.0+M+d*PI),\n        sin(-iTime*PI*3.0+3.0*PI/2.0+T+d*PI));\n    \n\t\tfragColor = vec4(col, 1.0);\n}\n\n\n/*\n#define iTime iTime*.2\n\n#define DMT 134.0\n\n#define D 4.0\n#define M 40.0\n#define T 90.0\n\n#define PI 3.14159265359\n\n#define MOD3 vec3(.1031,.11369,.13787)\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * MOD3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n\treturn fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\nfloat hash11(float p)\n{\n\tvec3 p3  = fract(vec3(p) * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy*2.0-1.0;\n    \n    uv.x *= iResolution.x/iResolution.y;\n    \n    float scale = (sin(iTime)*.5+.5);\n    \n    float d = length(uv)*1.2;\n    \n    vec3 col = vec3(0.0);\n    \n    for(int i = 0; i < 2; i++)\n    {\n        vec2 p = hash21(float(i))*2.0-1.0;\n    \n        d = length(uv-p)*1.5;\n        \n        \n    \tif(d <= 1.0)\n        {\n            col += (vec3(\n            sin(-iTime*PI*2.0+D+d*PI),\n            sin(-iTime*PI*2.0+4.0*PI/3.0+M+d*PI),\n            sin(-iTime*PI*2.0+2.0*PI/3.0+T+d*PI))*.5+.5)*(sin(d*PI*DMT)*.5+.5);\n        }\n    }\n    \n    col = vec3(\n            sin(col.x*2.0+D),\n            sin(col.y*2.0+4.0*PI/3.0+M),\n            sin(col.z*2.0+2.0*PI/3.0+T))*.5+.5;\n    \n\t\tfragColor = vec4(col, 1.0);\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}