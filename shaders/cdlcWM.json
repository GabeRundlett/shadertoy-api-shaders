{
    "Shader": {
        "info": {
            "date": "1686871296",
            "description": "Playing now with triangles, translation and rotation",
            "flags": 0,
            "hasliked": 0,
            "id": "cdlcWM",
            "likes": 1,
            "name": "Playing #4",
            "published": 3,
            "tags": [
                "shader"
            ],
            "usePreview": 0,
            "username": "matheusgirola",
            "viewed": 146
        },
        "renderpass": [
            {
                "code": "// signed distance to an equilateral triangle\nfloat sdEquilateralTriangle(  in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n#define PI 3.14159265359\n\n// cosine based palette, 4 vec3 params\nvec3 palette( float t )\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(2.0, 1.0, 0.0);\n    vec3 d = vec3(0.50, 0.20, 0.25);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n    vec2 p0 = p;\n    p *= 2.0;\n    vec3 finalColor = vec3(0.0);\n    \n    vec2 translate = vec2(cos(iTime),sin(iTime));\n    p += translate*0.45;\n    \n    \n    for(float i =0.0; i < 9.0; i++){\n        p = rotate2d(iTime*0.01)*p;\n        \n        float d = sdEquilateralTriangle(p*i, 3.*PI*sin(iTime))*exp(-1.5*length(p));\n        d = sin(d*8. + 2.*iTime)/8.;\n\n        vec3 col = (d>0.0) ? palette( 10.*i) : palette( 10.) ;\n        col *= 1.0 - exp(abs(d)*PI);\n        col *= 0.6+ 1.*cos(80.0*d);\n        col = mix(col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n\n        finalColor += col;\n        }\n\tfragColor = vec4(finalColor,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}