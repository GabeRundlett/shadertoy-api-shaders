{
    "Shader": {
        "info": {
            "date": "1665830486",
            "description": "inspiration: [url]https://twitter.com/canvas_51/status/1580528793520721920[/url]\nanimated vortices variant of [url]https://shadertoy.com/view/cdfGz7[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "cdX3z7",
            "likes": 38,
            "name": "flow streamlines - anim vort",
            "published": 3,
            "tags": [
                "flow",
                "irrotational",
                "vorticity",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 733
        },
        "renderpass": [
            {
                "code": "// animated vortices variant of https://shadertoy.com/view/cdfGz7\n\nvoid mainImage( out vec4 O, vec2 u )  {  \n    O = sqrt (1. - exp( - T(u) *vec4(1,2,4,1) ) ); \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// ---- compute BBoxs of next curves\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    R = iResolution.xy;\n    float i = u.x-.5, l = 9., p = 1./R.y;\n\n    if (u.y==1.5)\n        if (iFrame==0)  // O = H(i).xyxy;\n                           O = mix( .5*R/R.y, H(i).xy, .7 ).xyxy;\n        else _i=i, O=T(u), O = vec4(O.zw,mod(O.zw+field(O.zw,iChannel0),R/R.y));\n        \n    if (u.y==.5) {\n        vec2  P = H(i+.5-iTime), _P=P, m=P, M=P; // random start point\n\n        for( int t=0; t <len; t++, _P = P )      // follow trajectory\n            P += field(P,iChannel0),\n            m = min(m,P), M = max(M,P);        \n\n        O = vec4(m-p,M+p);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "int len = 20; // curve length ( i.e. number of samples )\nvec2 R;\n#define T(U)   texelFetch( iChannel0, ivec2(U), 0 )\n#define W(i)   texelFetch( CH, ivec2(i,1), 0 ).xy\n#define H(p) ( fract(sin(float(p)*vec2(269.5,183.3)) *43758.5453123)*R/R.y )\n\nfloat L(vec2 p, vec2 a,vec2 b) { // --- draw line  ( squared distance )\n    p -= a, b -= a;\n    float h = dot(p, b) / dot(b, b), \n          c = clamp(h, 0., 1.);     \n    return h==c ? dot(p -= b*h ,p) : 1e5; \n}\n\n// WHY the HELL can't we use iChannel in Commons ?!?!?!?\n\nfloat _i = -1.;\nvec2 field(vec2 U,sampler2D CH) {    // --- velocity field induced by vortices ( Biot & Savart )\n    vec2 V = vec2(0), P;\n    for( float i=0.; i < 30.; i++ ){ // N random vortices ( same strength )\n        if (i==_i) continue;         // to avoid singularity for vorticies\n        P = W(i) - U;\n     // if (P==vec2(0)) continue;    // to avoid singularity for vorticies\n        V += vec2(-P.y,P.x)  * min(100.,.1/pow(length(P),3.)) \n                     // * sign(H(i+.3).y-.5)  // random sign\n                     // * (2.*H(i+.3).y-1.)   // random sign & strength\n                     // * H(i+.3).y*2.        // random strength\n                     ;\n                          // * min(100.,.2/dot(P,P) );\n    }\n    return V*1e-3;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// --- draw only curves which BBox covers the pixel\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n     R = iResolution.xy;\n     vec2 U = u / R.y, P, _P, b;\n    O =  .9*T(u);                           // cumulates previous draw\n   \n    for( float i=0.,l; i < 400.; i++ ) {    // draw N streamlines per frame\n        vec4 B = texelFetch(iChannel1,ivec2(i,0),0); // curve bbox\n        b = step(B.xy,U)*step(U,B.zw);\n     // if (b.x*b.y == 0.) continue;        // ← this form crash Firefox !\n        if (b.x*b.y == 1.) {                // pixel not in BBox: skip draw\n          _P = P = H(i+.5-iTime);           // random start point\n        l = 9.;\n        for( int t=0; t <len; t++, _P = P ) // follow trajectory\n            P += field(P,iChannel1),\n            l = min( l, L(U,_P,P) );\n        O += .2*max(0., 1.-R.y*sqrt(l));     // draw the curve\n    }}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}