{
    "Shader": {
        "info": {
            "date": "1583390994",
            "description": "Fast biquadratic (2D, top) and triquadratic (3D, bottom) texture filtering, with 4 samples and 8 samples respectively. Based on Roger Cabo Ashauer and paniq's.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtyXRy",
            "likes": 21,
            "name": "Biquadratic & Triquadratic",
            "published": 3,
            "tags": [
                "2d",
                "3d",
                "biquadratic",
                "triquadratic"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1070
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Fast biquadratic (2D) and triquadratic (3D) texture\n// filtering, with 4 samples and 8 samples respectively.\n// Based on an example by Roger Cabo Ashauer until I\n// realized it's equivalent to Paniq's biquadratic\n// implementation https://www.shadertoy.com/view/wtXXDl\n//\n// Top:     2D biquadratic  filtering\n// Bottom:  3D triquadratic filtering\n\n\n// Other texture interpolation shaders:\n// \n// Samples      Type\n// ----------   ---------\n//  1 linear    2x2 cubic     : https://www.shadertoy.com/view/XsfGDn\n//  4 linear    3x3 quadratic : https://www.shadertoy.com/view/WtyXRy and https://www.shadertoy.com/view/wtXXDl\n//  4 linear    4x4 cubic     : https://www.shadertoy.com/view/4df3Dn and https://www.shadertoy.com/view/tlXSR2\n//  9 linear    4x4 cubic     : https://www.shadertoy.com/view/MtVGWz\n// 16 nearest   4x4 cubic     : https://www.shadertoy.com/view/XsSXDy\n\n// Enable this to see continuity properties\n// #define SHOW_DERIVATIVES\n\n\n\nvec4 texture2( sampler2D sam, vec2 uv );\nvec4 texture3( sampler3D sam, vec3 uv );\n\nvec4 textureQuadratic( in sampler2D sam, in vec2 p )\n{\n    float texSize = float(textureSize(sam,0).x); \n    \n#if 1\n    //Roger/iq style\n\tp = p*texSize;\n\tvec2 i = floor(p);\n\tvec2 f = fract(p);\n\tp = i + f*0.5;\n\tp = p/texSize;\n    //f = f*f*(3.0-2.0*f); // optional for extra sweet\n\tfloat w = 0.5/texSize;\n\treturn mix(mix(texture2(sam,p+vec2(0,0)),\n                   texture2(sam,p+vec2(w,0)),f.x),\n               mix(texture2(sam,p+vec2(0,w)),\n                   texture2(sam,p+vec2(w,w)),f.x), f.y);\n    \n#else\n    // paniq style (https://www.shadertoy.com/view/wtXXDl)\n    vec2 f = fract(p*texSize);\n    vec2 c = (f*(f-1.0)+0.5) / texSize;\n    vec2 w0 = p - c;\n    vec2 w1 = p + c;\n    return (texture(sam, vec2(w0.x, w0.y))+\n    \t    texture(sam, vec2(w0.x, w1.y))+\n    \t    texture(sam, vec2(w1.x, w1.y))+\n    \t    texture(sam, vec2(w1.x, w0.y)))/4.0;\n#endif    \n\n    \n}\n\nvec4 textureQuadratic( in sampler3D sam, in vec3 p )\n{\n    float texSize = float(textureSize(sam,0).x); \n\n\tp = p*texSize;\n\tvec3 i = floor(p);\n\tvec3 f = fract(p);\n\tp = i + f*0.5;\n\tp = p/texSize;\n    \n\tfloat w = 0.5/texSize;\n\n\treturn mix(mix(mix(texture3(sam,p+vec3(0,0,0)),\n                       texture3(sam,p+vec3(w,0,0)),f.x),\n                   mix(texture3(sam,p+vec3(0,w,0)),\n                       texture3(sam,p+vec3(w,w,0)),f.x), f.y),\n               mix(mix(texture3(sam,p+vec3(0,0,w)),\n                       texture3(sam,p+vec3(w,0,w)),f.x),\n                   mix(texture3(sam,p+vec3(0,w,w)),\n                       texture3(sam,p+vec3(w,w,w)),f.x), f.y), f.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.y;\n    vec2 p2 = p*0.1;\n    vec3 p3 = vec3(p*0.2,0.171);\n\t    \n\tvec3 colA = (p.y<0.5)?texture2( iChannel0, p2 ).xyz:\n                          texture3( iChannel1, p3 ).xyz;\n    vec3 colB = (p.y<0.5)?textureQuadratic( iChannel0, p2 ).xyz:\n                          textureQuadratic( iChannel1, p3 ).xyz;\n\n\tfloat g = sin(3.1416*p.x + iTime);\n    \n\tvec3 col = mix( colA, colB, smoothstep( -0.1, 0.1, g ) );\n \n    #ifdef SHOW_DERIVATIVES\n    col = 0.5+0.1*vec3(dFdx(col.x),dFdy(col.x),0.0)*iResolution.y;\n    #endif\n    \n\tcol *= smoothstep( 0.0, 0.01, abs(g-0.0) );\n\tcol *= smoothstep( 0.0, 0.01, abs(p.y-0.5) );\n\n    fragColor = vec4( col, 1.0 );\n}\n\n//----\nvec4 texture2( sampler2D sam, vec2 uv )\n{\n#ifndef SHOW_DERIVATIVES    \n    return texture(sam,uv);\n#else    \n    float res = float(textureSize(sam,0).x);\n    uv = uv*res - 0.5;\n    vec2 iuv = floor(uv);\n    vec2 f = fract(uv);\n\tvec4 rg1 = textureLod( sam, (iuv+ vec2(0.5,0.5))/res, 0.0 );\n\tvec4 rg2 = textureLod( sam, (iuv+ vec2(1.5,0.5))/res, 0.0 );\n\tvec4 rg3 = textureLod( sam, (iuv+ vec2(0.5,1.5))/res, 0.0 );\n\tvec4 rg4 = textureLod( sam, (iuv+ vec2(1.5,1.5))/res, 0.0 );\n\treturn mix( mix(rg1,rg2,f.x), mix(rg3,rg4,f.x), f.y );\n#endif    \n}\n\nvec4 texture3( sampler3D sam, vec3 uv )\n{\n#ifndef SHOW_DERIVATIVES    \n    return texture(sam,uv);\n#else    \n    float res = float(textureSize(sam,0).x);\n    uv = uv*res - 0.5;\n    vec3 iuv = floor(uv);\n    vec3 f = fract(uv);\n\tvec4 rg1 = textureLod( sam, (iuv+ vec3(0.5,0.5,0.5))/res, 0.0 );\n\tvec4 rg2 = textureLod( sam, (iuv+ vec3(1.5,0.5,0.5))/res, 0.0 );\n\tvec4 rg3 = textureLod( sam, (iuv+ vec3(0.5,1.5,0.5))/res, 0.0 );\n\tvec4 rg4 = textureLod( sam, (iuv+ vec3(1.5,1.5,0.5))/res, 0.0 );\n\tvec4 rg5 = textureLod( sam, (iuv+ vec3(0.5,0.5,1.5))/res, 0.0 );\n\tvec4 rg6 = textureLod( sam, (iuv+ vec3(1.5,0.5,1.5))/res, 0.0 );\n\tvec4 rg7 = textureLod( sam, (iuv+ vec3(0.5,1.5,1.5))/res, 0.0 );\n\tvec4 rg8 = textureLod( sam, (iuv+ vec3(1.5,1.5,1.5))/res, 0.0 );\n\treturn mix(mix( mix(rg1,rg2,f.x), mix(rg3,rg4,f.x), f.y ),\n               mix( mix(rg1,rg2,f.x), mix(rg3,rg4,f.x), f.y ), f.z );\n#endif    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}