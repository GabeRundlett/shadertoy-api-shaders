{
    "Shader": {
        "info": {
            "date": "1637779009",
            "description": "Click the screen!\n\nUncomment \"p\" for a moving point, change \"n\" to make the arrows behave more interestingly\n\nNeater version here:\nhttps://www.shadertoy.com/view/mtBSWR",
            "flags": 0,
            "hasliked": 0,
            "id": "Nty3Wm",
            "likes": 33,
            "name": "Interactive Arrows",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 713
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n\nfloat thc(float a, float b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\n// square length\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nvec2 rot(vec2 uv, float a) {\n    mat2 mat = mat2(cos(a), -sin(a), \n                    sin(a), cos(a));\n    return mat * uv;\n}\n\nfloat sdEquilateralTriangle( in vec2 p )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// draws an arrow (d is used to make it go up + down)\nfloat arrow(vec2 uv, float d) {\n    float h = 0.1 + 0.4 * thc(4.,2. * d);\n    float d1 = sdEquilateralTriangle(uv-vec2(0.,0.25 - h));\n    float s1 = step(d1, -0.5);\n\n    float d2 = sdBox(uv - vec2(0.,-h), vec2(0.05,0.2));\n    float s2 = step(d2, 0.);\n    \n    return max(s1, s2);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    // scale (number of arrows)\n    float sc = 10.; \n    vec2 ipos = floor(sc * uv) + 0.5;\n    ipos /= sc;\n    vec2 fpos = fract(sc * uv) - 0.5;\n    \n    vec2 p = (iMouse.xy-0.5*iResolution.xy)/iResolution.y;\n    \n    // moving point\n    // p = 0.4 * vec2(iResolution.x/iResolution.y * thc(2., 0.5 * iTime), sin(iTime));\n     \n    // cursor\n    float d2 = length(uv-p);\n    float s2 = step(d2,0.02) - step(d2,0.016);\n    s2 *= 0.5;\n    \n    // grid\n    float d3 = mlength(fpos);\n    float s3 = step(d3,0.5) - step(d3,0.48);\n    s3 *= 0.2;\n    \n    // change me!\n    float n = 1.;  \n    // n = -3.;\n    \n    // rotate arrows towards cursor\n    float th = -0.5 * pi + n * atan(p.y-ipos.y, p.x-ipos.x);\n    fpos = rot(fpos, th);\n    \n    // shrink arrows that are far away\n    fpos *= 1. + d2 * d2;  \n   \n    // arrow\n    float s1 = 0.5 * arrow(fpos, d2) ;\n    \n    float s = max(max(s1,s2), s3);\n    \n    // fade \n    // s *= pow(1.-length(ipos-p),3.);\n    \n    vec3 e = vec3(1.);\n    vec3 col = s * pal(s3 * th + d2 - 0.4 * iTime, e, e, e, vec3(0.,1., 2.)/3.);\n    // col = vec3(s);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}