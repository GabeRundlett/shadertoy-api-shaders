{
    "Shader": {
        "info": {
            "date": "1542842330",
            "description": "I stream shader creation every Wednesday at 9pm UK time, over at [url]https://twitch.tv/lunasorcery[/url]\nCome and watch a show!\n\nOr watch the VOD for this shader here: [url]https://www.twitch.tv/videos/339397877[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "XtGfRG",
            "likes": 72,
            "name": "[twitch] Geometric Descent",
            "published": 3,
            "tags": [
                "raymarching",
                "shapes",
                "twitch"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 2468
        },
        "renderpass": [
            {
                "code": "/*\n\tThis shader was created live on stream!\n\tYou can watch the VOD here: https://www.twitch.tv/videos/339397877\n\t\n\tI use the Bonzomatic tool by Gargaj/Conspiracy:\n\thttps://github.com/Gargaj/Bonzomatic\n\n\tWednesdays around 9pm UK time I stream at https://twitch.tv/lunasorcery\n\tCome and watch a show!\n\n\t~yx\n*/\n\nconst float phi = (1.+sqrt(5.))*.5;\n\nfloat noise(vec3 p)\n{\n    return fract(\n        sin(\n            dot(p, vec3(12.4536728,432.45673828,32.473682))\n        )*43762.342);\n}\n\nvec2 rotate(vec2 a, float b)\n{\n    float c = cos(b);\n    float s = sin(b);\n    return vec2(\n        a.x * c - a.y * s,\n        a.x * s + a.y * c\n    );\n}\n\nfloat sdIcosahedron(vec3 p, float r)\n{\n    const float q = (sqrt(5.)+3.)/2.;\n\n    const vec3 n1 = normalize(vec3(q,1,0));\n    const vec3 n2 = vec3(sqrt(3.)/3.);\n\n    p = abs(p/r);\n    float a = dot(p, n1.xyz);\n    float b = dot(p, n1.zxy);\n    float c = dot(p, n1.yzx);\n    float d = dot(p, n2.xyz)-n1.x;\n    return max(max(max(a,b),c)-n1.x,d)*r; // turn into (...)/r  for weird refractive effects when you subtract this shape\n}\n\nfloat sdDodecahedron(vec3 p, float r)\n{\n    const vec3 n = normalize(vec3(phi,1,0));\n\n    p = abs(p/r);\n    float a = dot(p,n.xyz);\n    float b = dot(p,n.zxy);\n    float c = dot(p,n.yzx);\n    return (max(max(a,b),c)-n.x)*r;\n}\n\nfloat scene(vec3 p)\n{\n    p.xy = rotate(p.xy, p.z*.05);\n\n    float n = noise(floor((p)/4.));\n    float shape = fract((floor(p.x/4.)+floor(p.y/4.)*2.)/4.);\n    float spinOffset1 = floor(p.z/4.);\n    float spinOffset2 = floor(p.z/4.+2.);\n    float spinOffset3 = floor(p.z/4.+4.);\n\n\n    p = mod(p,4.)-2.;\n    p.xy = rotate(p.xy, iTime+spinOffset1);\n    p.yz = rotate(p.yz, iTime+spinOffset2);\n    p.zx = rotate(p.zx, iTime+spinOffset3);\n\n    if (shape < .25) {\n        return min(\n            sdDodecahedron(p,1.),\n            sdIcosahedron(p.zyx,1.)\n        );\n    } else if (shape < .5) {\n        return max(\n            sdDodecahedron(p,1.),\n            -sdIcosahedron(p.zyx,.9)\n        );\n    } else if (shape < .75) {\n        return max(\n            -sdDodecahedron(p,.95),\n            sdIcosahedron(p.zyx,1.)\n        );\n    } else {\n        return max(\n            sdDodecahedron(p,.95),\n            sdIcosahedron(p.zyx,1.)\n        );\n    }\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy - .5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    uv *= 1.+length(uv)*.5;\n\n    vec3 cam = vec3(0,0,0);\n    vec3 dir = normalize(vec3(uv,1));\n\n    //cam.yz = rotate(cam.yz, .3);\n    //dir.yz = rotate(dir.yz, .3);\n\n    cam.z = iTime * 4.;\n    dir.xy = rotate(dir.xy, iTime*.1);\n    //dir.yz = rotate(dir.yz, iTime*.3);\n    //dir.zx = rotate(dir.zx, iTime*.3);\n\n    float t = 0.;\n    float k = 0.;\n    int i;\n    for(i=0;i<100;++i)\n    {\n        k = scene(cam+dir*t)*.55;\n        t += k;\n        if (k < .001) break;\n    }\n\n    vec3 h = cam+dir*t;\n    vec2 o = vec2(.001, 0);\n    vec3 n = normalize(vec3(\n        scene(h+o.xyy)-scene(h-o.xyy),\n        scene(h+o.yxy)-scene(h-o.yxy),\n        scene(h+o.yyx)-scene(h-o.yyx)\n    ));\n\n    float iterFog = pow(1.-(float(i)/100.), 2.);\n    float light = pow(max(0.,n.x*.5+.5),2.);\n    float vignette = smoothstep(2.,0.,length(uv));\n    vec3 a = mix(vec3(.01,.01,.1),vec3(0,1,1),iterFog);\n    vec3 b = mix(vec3(0,0,0),vec3(1,sin(iTime*.4)*.5+.5,cos(iTime*.4)*.5+.5),light*iterFog*4.);\n    out_color.rgb = a + b;\n    out_color *= vignette;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}