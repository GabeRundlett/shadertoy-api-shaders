{
    "Shader": {
        "info": {
            "date": "1572943570",
            "description": "Monte Carlo simulation of the two-dimensional Ising Model (updated) - details in source",
            "flags": 32,
            "hasliked": 0,
            "id": "tddXW2",
            "likes": 12,
            "name": "Ising Model 2",
            "published": 3,
            "tags": [
                "montecarlo",
                "spin",
                "physics",
                "magnetism"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 596
        },
        "renderpass": [
            {
                "code": "// \"Ising Model 2\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n Monte Carlo simulation of the two-dimensional Ising Model - updated (see \n Wikipedia for further information). The system consists of a grid of spins, and \n the colors correspond to spin direction (up or down). The slider controls \n temperature T; at low T the spins should align in a ferromagnetic state, while \n at high T they are in a random paramagnetic state; somewhere in between there is \n a phase transition (reduce T gradually to avoid artifacts). (A very crude random \n number generator is used here for convenience; for quantitative work this must \n be replaced by something better.) The numerical value is the absolute \n magnetization (long-range order), scaled x1000 (computation uses parallel reduction).\n*/\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val);\nvec4 Loadv4 (vec2 vId);\n\nfloat gSize;\nconst float pi = 3.14159;\n\nvec3 ShowScene (vec2 uv)\n{\n  vec3 col;\n  vec2 gPos;\n  gPos = floor (gSize * (0.5 * uv + 0.5));\n  col = (Loadv4 (gPos).x > 0.) ? vec3 (1., 0.8, 0.) : vec3 (0., 0.5, 1.);\n  return col;\n}\n\nvec4 ShowWg (vec2 uv, vec2 canvas, float tVal)\n{\n  vec4 wgBx;\n  vec3 col;\n  vec2 ust, c;\n  float asp;\n  c = vec2 (1., 0.3);\n  asp = canvas.x / canvas.y;\n  wgBx = vec4 (0.41 * asp, 0.05, 0.01 * asp, 0.15);\n  col = vec3 (0.);\n  ust = abs (0.5 * uv - wgBx.xy) - wgBx.zw;\n  if (abs (max (ust.x, ust.y)) * canvas.y < 1.5) col = vec3 (0.2);\n  ust = 0.5 * uv - wgBx.xy;\n  ust.y -= (tVal - 0.5) * 2. * wgBx.w;\n  ust = abs (ust);\n  if (abs (max (ust.x, ust.y) - 0.7 * wgBx.z) * canvas.y < 2.5)  col = (tVal < 0.5) ?\n     mix (c.yyx, c.yxy, smoothstep (0.3, 0.36, tVal)) :\n     mix (c.yxy, c.xyy, smoothstep (0.63, 0.69, tVal));\n  return vec4 (col, step (0.001, length (col)));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 c4;\n  vec3 col;\n  vec2 canvas, uv, ut;\n  float asp, tVal, mSum;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  asp = canvas.x / canvas.y;\n  gSize = Loadv4 (vec2 (0., 0.)).w;\n  tVal = Loadv4 (vec2 (1., 0.)).w;\n  ut = abs (uv) - vec2 (1.);\n  if (max (ut.x, ut.y) < 0.) {\n    col = ShowScene (uv);\n  } else {\n    col = vec3 (0.82);\n    c4 = ShowWg (uv, canvas, tVal);\n    col = mix (col, c4.rgb, c4.a);\n    mSum = Loadv4 (vec2 (0., 0.)).z;\n    col = mix (col, vec3 (0.6, 0.3, 0.1), ShowInt (0.5 * uv - vec2 (0.43 * asp, -0.3),\n       vec2 (0.06 * asp, 0.03), 4., floor (1000. * abs (mSum) + 0.5)));\n  }\n  fragColor = vec4 (clamp (col, 0., 1.), 1.);\n}\n\nfloat DigSeg (vec2 q)\n{\n  return (1. - smoothstep (0.13, 0.17, abs (q.x))) *\n     (1. - smoothstep (0.5, 0.57, abs (q.y)));\n}\n\n#define DSG(q) k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q)\n\nfloat ShowDig (vec2 q, int iv)\n{\n  float d;\n  int k, kk;\n  const vec2 vp = vec2 (0.5, 0.5), vm = vec2 (-0.5, 0.5), vo = vec2 (1., 0.);\n  if (iv == -1) k = 8;\n  else if (iv < 2) k = (iv == 0) ? 119 : 36;\n  else if (iv < 4) k = (iv == 2) ? 93 : 109;\n  else if (iv < 6) k = (iv == 4) ? 46 : 107;\n  else if (iv < 8) k = (iv == 6) ? 122 : 37;\n  else             k = (iv == 8) ? 127 : 47;\n  q = (q - 0.5) * vec2 (1.8, 2.3);\n  d = 0.;\n  kk = k;\n  DSG (q.yx - vo);  DSG (q.xy - vp);  DSG (q.xy - vm);  DSG (q.yx);\n  DSG (q.xy + vm);  DSG (q.xy + vp);  DSG (q.yx + vo);\n  return d;\n}\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, sgn, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (min (q.x, q.y) >= 0. && max (q.x, q.y) < 1.) {\n    q.x *= mxChar;\n    sgn = sign (val);\n    val = abs (val);\n    if (val < 0.5) sgn = 1.;\n    nDig = (val > 0.) ? floor (max (log (val + 0.01) / log (10.), 0.)) + 1. : 1.;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (idChar == mxChar - nDig - 1. && sgn < 0.) s = ShowDig (q, -1);\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Ising Model 2\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 Loadv4 (vec2 vId);\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord);\nfloat Hashff (float p);\n\nfloat nStep, tVal;\nfloat gSize;\nconst float szMax = 1024.;\nconst float pi = 3.14159;\n\nvoid Step (vec2 sv, out vec2 p)\n{\n  vec4 dv;\n  vec2 tt;\n  float f, u, r;\n  const vec3 cRand = vec3 (8121., 28411., 134456.);\n  tt = Loadv4 (sv).xy;\n  f = tt.x;\n  r = tt.y;\n  if (mod (nStep, 2.) == ((mod (sv.x, 2.) == mod (sv.y, 2.)) ? 0. : 1.)) {\n    dv = mod (vec4 (sv.xx, sv.yy) + vec4 (1., -1., 1., -1.), gSize);\n    u = 2. * f * (\n        Loadv4 (vec2 (dv.x, sv.y)).x +\n        Loadv4 (vec2 (dv.y, sv.y)).x +\n        Loadv4 (vec2 (sv.x, dv.z)).x +\n        Loadv4 (vec2 (sv.x, dv.w)).x);\n    r = mod (cRand.x * r + cRand.y, cRand.z);\n    if (u < 0. || r < cRand.z * exp (- u / (6. * tVal))) f = - f;\n  }\n  p = vec2 (f, r);\n}\n\nvoid Init (vec2 sv, out vec2 p)\n{\n  float f, r;\n  r = Hashff (mod (17777.7 * (sv.y * gSize + sv.x + 10.), 2. * pi));\n  f = (r > 0.5) ? 1. : -1.;\n  p = vec2 (f, r);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx, mPtr, mPtrP, stDat, fVal;\n  vec2 canvas, iFrag, ust, p;\n  float asp, rSum, mSum;\n  int wgSel, wgReg;\n  bool init;\n  canvas = iResolution.xy;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas.xy - 0.5;\n  gSize = min (floor (exp2 (floor (log2 (canvas.y + 0.01))) + 0.01), szMax);\n  if (max (fragCoord.x, fragCoord.y) >= gSize) discard;\n  asp = canvas.x / canvas.y;\n  wgBx = vec4 (0.41 * asp, 0.05, 0.01 * asp, 0.15);\n  iFrag = floor (fragCoord);\n  init = (iFrame <= 5);\n  if (! init && gSize != Loadv4 (vec2 (0., 0.)).w) init = true;\n  if (init) {\n    mPtrP = mPtr;\n    wgSel = -1;\n    nStep = 0.;\n    tVal = 0.35;\n    mSum = 0.;\n  } else {\n    stDat = Loadv4 (vec2 (1., 0.));\n    nStep = stDat.z;\n    tVal = stDat.w;\n    stDat = Loadv4 (vec2 (2., 0.));\n    mPtrP.z = stDat.z;\n    wgSel = int (stDat.w);\n    ++ nStep;\n    if (mPtr.z > 0.) {\n      wgReg = 0;\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx.xy) - wgBx.zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = 1;\n      if (mPtrP.z <= 0.) wgSel = wgReg;\n    } else {\n      wgSel = -1;\n      wgReg = -1;\n    }\n    if (wgSel == 1) tVal = clamp (0.5 + 0.5 * (mPtr.y - wgBx.y) / wgBx.w, 0.004, 1.);\n  }\n  if (max (iFrag.x, iFrag.y) < gSize) {\n    if (init) {\n      Init (iFrag, p);\n    } else {\n      if (mod (nStep, 4.) <= 1.) Step (iFrag, p);\n      else p = Loadv4 (iFrag).xy;\n    }\n  }\n  fVal = vec4 (p, 0., 0.);\n  if (iFrag.x == gSize - 1. && mod (nStep, 4.) == 2.) {\n    rSum = 0.;\n    for (float kx = 0.; kx < szMax; kx ++ ) {\n      if (kx == gSize) break;\n      rSum += Loadv4 (vec2 (kx, iFrag.y)).x;\n    }\n    fVal.z = rSum;\n  }\n  if (iFrag.x == 0. && iFrag.y == 0. && mod (nStep, 4.) == 3.) {\n    mSum = 0.;\n    for (float ky = 0.; ky < szMax; ky ++ ) {\n      if (ky == gSize) break;\n      mSum += Loadv4 (vec2 (gSize - 1., ky)).z;\n    }\n    mSum /= gSize * gSize;\n  } else mSum = Loadv4 (vec2 (0., 0.)).z;\n  if (iFrag.y == 0.) {\n    if      (iFrag.x == 0.) fVal.zw = vec2 (mSum, gSize);\n    else if (iFrag.x == 1.) fVal.zw = vec2 (nStep, tVal);\n    else if (iFrag.x == 2.) fVal.zw = vec2 (mPtr.z, float (wgSel));\n  }\n  Savev4 (iFrag, fVal, fragColor, fragCoord);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  d = abs (fCoord - vId - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}