{
    "Shader": {
        "info": {
            "date": "1521851350",
            "description": "Trying to replicate the shimmer from annihilation.",
            "flags": 0,
            "hasliked": 0,
            "id": "4dVyW1",
            "likes": 24,
            "name": "Strange Reflections",
            "published": 3,
            "tags": [
                "procedural",
                "2d"
            ],
            "usePreview": 0,
            "username": "Klems",
            "viewed": 1044
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define rot(a) mat2(cos(a+PI*vec4(0,1.5,0.5,0)))\n\n// dave hoskins hash function\nvec4 hash( in vec2 p ) {\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n// value noise\nvec4 noise( in vec2 p ) {\n    p*=200.0;\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\tvec2 u = f*f*(3.0-2.0*f);\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// domain warped noise\nfloat liquid( in vec2 p ) {\n    p += noise(vec2(0, iTime*0.0005)-(p*=rot(0.1)*vec2(2.5, 0.5))).rg*0.01;\n    p += noise(vec2(0, iTime*0.0002)+(p*=rot(0.2)*2.5)).ba*0.01;\n    p += noise(p*=6.5).rg*0.005;\n    return noise(p*0.1).a;\n}\n\n// used for normal calculation\nfloat height( in vec3 p ) {\n    return p.z-liquid(p.xy)*0.001;\n}\n\n// normal from central differences\nvec3 normal( in vec2 uv ) {\n    const vec2 e = vec2(0.0, 0.0001);\n    vec3 p = vec3(uv, 0);\n    return normalize(vec3(height(p-e.yxx)-height(p+e.yxx),\n                          height(p-e.xyx)-height(p+e.xyx),\n                          height(p-e.xxy)-height(p+e.xxy)));\n}\n\n// custom cubemap\nvec3 cubemap( in vec3 dir ) {\n    vec3 color = cos(dir*vec3(1, 9, 2)+vec3(2, 3, 1))*0.5+0.5;\n    color = (color * vec3(0.8, 0.3, 0.7)) + vec3(0.2);\n    color *= dir.y*0.5+0.5;\n    color += exp(6.0*dir.y-2.0)*0.05;\n    color = pow(color, vec3(1.0/2.2));\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.x;\n    vec3 dir = normalize(vec3(uv, 0.2));\n    \n    vec3 norm = normal(uv*0.02);\n    dir = reflect(dir, norm);\n    \n\tdir.xz *= rot(iTime*0.5);\n    dir.yz *= rot(sin(iTime*0.2)*0.3);\n    \n    fragColor.rgb = cubemap(dir);\n    \n    fragColor.rgb = clamp(fragColor.rgb, vec3(0), vec3(1));\n    fragColor.rgb = mix(fragColor.rgb, vec3(0), dot(uv, uv)*1.0);\n    \n    fragColor.a = 1.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}