{
    "Shader": {
        "info": {
            "date": "1487130168",
            "description": "A quadratic equation simulator\n\nClick inside the 3 boxes on the left to adjust 6 coefficients for the quadratic. Each box can vary between [-1,1]",
            "flags": 32,
            "hasliked": 0,
            "id": "ldsczH",
            "likes": 5,
            "name": "Quadratic Equations",
            "published": 3,
            "tags": [
                "2d",
                "ui"
            ],
            "usePreview": 0,
            "username": "culdevu",
            "viewed": 829
        },
        "renderpass": [
            {
                "code": "\nvec2 screenToWorld(vec2 coord)\n{\n    return 2.5 * (2.0 * coord / iResolution.y - vec2(iResolution.x / iResolution.y, 1.0));\n}\n\nfloat smootherstep(float edge0, float edge1, float x)\n{\n    // Scale, and clamp x to 0..1 range\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0, 1.0);\n    // Evaluate polynomial\n    return x*x*x*(x*(x*6.0 - 15.0) + 10.0);\n}\n\n// shoutouts to the amazing tool at\n//   http://dev.thi.ng/gradients/\n// for generating these color palettes\nvec3 color(float t)\n{\n    vec3 a = vec3(0.660, 0.560, 0.680);\n    vec3 b = vec3(0.718, 0.438, 0.720);\n    vec3 c = vec3(0.520, 0.800, 0.520);\n    vec3 d = vec3(-0.430, -0.397, -0.083);\n    \n    vec3 ret = a + b * cos(2.0 * 3.14159 * (c * t + d));\n    return clamp(ret, 0.0, 1.0);\n}\n\nfloat absCircular(float t)\n{\n    float a = floor(t + 0.5);\n    return mod(abs(a - t), 1.0);\n}\n\nfloat func(float x, float y)\n{\n    float a = 2.0 * texture(iChannel0, vec2(0.05,0)).x - 1.0;\n    float b = 2.0 * texture(iChannel0, vec2(0.15,0)).x - 1.0;\n    float c = 2.0 * texture(iChannel0, vec2(0.25,0)).x - 1.0;\n    float d = 2.0 * texture(iChannel0, vec2(0.35,0)).x - 1.0;\n    float e = 2.0 * texture(iChannel0, vec2(0.45,0)).x - 1.0;\n    float f = 2.0 * texture(iChannel0, vec2(0.55,0)).x - 1.0;\n    \n    // return (a*x*x + b*x*y + c*y*y + d*x + e*y + f)\n    \n    // as per iq's suggestion, makes the line nearly uniform\n    return 2.0* (a*x*x + b*x*y + c*y*y + d*x + e*y + f) /  \n            length( vec2( 2.0*a*x + b*y + d, 2.0*c*y + b*x + e ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = screenToWorld(fragCoord);\n    \n    vec3 final = vec3(0,0,0);\n    \n    // colorful grid\n    if ((mod(p.x, 2.0) < 1.0) ^^ (mod(p.y, 2.0) < 1.0))\n        final = color(0.4);\n    else\n        final = color(0.3);\n    \n    // dark blue lines between to denote the units\n    final = mix(color(0.1), final, smootherstep(0.0, 0.03, absCircular(p.x)));\n    final = mix(color(0.1), final, smootherstep(0.0, 0.03, absCircular(p.y)));\n    \n    // main axes\n    final = mix(color(0.0), final, pow(smoothstep(0.0, 0.05, abs(p.x)), 3.0));\n    final = mix(color(0.0), final, pow(smoothstep(0.0, 0.05, abs(p.y)), 3.0));\n    \n    // draw the equation\n    float z = func(p.x, p.y);\n    final = mix(color(0.99), final, pow(smoothstep(0.0, 0.12, abs(z)), 1.0));\n    \n    // draw the sidebar\n    bool isInSidebar = fragCoord.x < iResolution.y/3.0;\n    float sidebarWidth = iResolution.y / 3.0;\n    final = mix(color(0.5), final, isInSidebar ? 0.2 : 1.0);\n    if (abs(fragCoord.x - sidebarWidth) < 2.0)\n        final = color(0.7);\n    if (isInSidebar && abs(fragCoord.y - sidebarWidth) < 2.0)\n        final = color(0.7);\n    if (isInSidebar && abs(fragCoord.y - 2.0 * sidebarWidth) < 2.0)\n        final = color(0.7);\n    \n    float a = texture(iChannel0, vec2(0.05,0)).x;\n    float b = texture(iChannel0, vec2(0.15,0)).x;\n    float c = texture(iChannel0, vec2(0.25,0)).x;\n    float d = texture(iChannel0, vec2(0.35,0)).x;\n    float e = texture(iChannel0, vec2(0.45,0)).x;\n    float f = texture(iChannel0, vec2(0.55,0)).x;\n    if (isInSidebar && fragCoord.y < sidebarWidth && abs(sidebarWidth * a - fragCoord.x) < 1.0)\n        final = color(0.8);\n    if (isInSidebar && abs(sidebarWidth * b - fragCoord.y) < 1.0)\n        final = color(0.8);\n    if (isInSidebar && sidebarWidth < fragCoord.y && fragCoord.y < 2.0 * sidebarWidth && abs(sidebarWidth * c - fragCoord.x) < 1.0)\n        final = color(0.8);\n    if (isInSidebar && abs(sidebarWidth * d - fragCoord.y + sidebarWidth) < 1.0)\n        final = color(0.8);\n    if (isInSidebar && 2.0*sidebarWidth < fragCoord.y && abs(sidebarWidth * e - fragCoord.x) < 1.0)\n        final = color(0.8);\n    if (isInSidebar && abs(sidebarWidth * f - fragCoord.y + 2.0 * sidebarWidth) < 1.0)\n        final = color(0.8);\n    \n    // Buffer A debug\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    //final = texture(iChannel0, uv).xyz;\n    \n    fragColor = vec4(final,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 screenToWorld(vec2 coord)\n{\n    return 2.5 * (2.0 * coord / iResolution.y - vec2(iResolution.x / iResolution.y, 1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 curState = texture(iChannel0, uv);\n    float boxWidth = iResolution.y / 3.0;\n    \n    float square = -1.0;\n    if (iMouse.x < boxWidth)\n    {\n        if (iMouse.y < boxWidth)\n            square = 0.0;\n        else if (iMouse.y < 2.0 * boxWidth)\n            square = 1.0;\n        else\n            square = 2.0;\n    }\n    \n    float x, y;\n    x = iMouse.x / boxWidth;\n    y = (iMouse.y - square * boxWidth) / boxWidth;\n    \n    fragColor = vec4(0,0,0,-1);\n    if (square == 0.0)\n    {\n        if (0.0 <= uv.x && uv.x < 0.1)\n            fragColor = vec4(x,0,0,1);\n        if (0.1 <= uv.x && uv.x < 0.2)\n            fragColor = vec4(y,0,0,1);\n    }\n    else if (square == 1.0)\n    {\n        if (0.2 <= uv.x && uv.x < 0.3)\n            fragColor = vec4(x,0,0,1);\n        if (0.3 <= uv.x && uv.x < 0.4)\n            fragColor = vec4(y,0,0,1);\n    }\n    else if (square == 2.0)\n    {\n        if (0.4 <= uv.x && uv.x < 0.5)\n            fragColor = vec4(x,0,0,1);\n        if (0.5 <= uv.x && uv.x < 0.6)\n            fragColor = vec4(y,0,0,1);\n    }\n    \n    if (square == -1.0)\n    {\n        float a = texture(iChannel0, vec2(0.05,0)).x;\n        float b = texture(iChannel0, vec2(0.15,0)).x;\n        float c = texture(iChannel0, vec2(0.25,0)).x;\n        float d = texture(iChannel0, vec2(0.35,0)).x;\n        float e = texture(iChannel0, vec2(0.45,0)).x;\n        float f = texture(iChannel0, vec2(0.55,0)).x;\n        if (a == b && b == c && c == d && d == e && e == f && f == 0.0)\n        {\n            if (mod(uv.x/0.1,1.0) < 1.0)\n            \tfragColor = vec4(0.25,0,0,1);\n            else\n                fragColor = vec4(0.75,0,0,1);\n        }\n    }\n    \n    if (fragColor.w < 0.0)\n    \tfragColor = curState;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}