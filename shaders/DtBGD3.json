{
    "Shader": {
        "info": {
            "date": "1673983244",
            "description": "Same thing as my last one, a simple shader that shows the correlation between the julia and mandelbrot set. Use mouse to view the different fractals.",
            "flags": 0,
            "hasliked": 0,
            "id": "DtBGD3",
            "likes": 2,
            "name": "Mandelbrot Julia Correlation",
            "published": 3,
            "tags": [
                "fractal",
                "julia",
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "megamaz",
            "viewed": 169
        },
        "renderpass": [
            {
                "code": "float lerp(float factor, float a, float b) {\n    return a + (b - a) * factor;\n}\n\n// https://gist.github.com/983/e170a24ae8eba2cd174f\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 calcMandelbrot(in vec2 fragCoord, in float iter)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float real = uv[0];\n    float imag = uv[1];\n    \n    float col = 0.0f;\n    \n    // rescale\n    real = lerp(uv[0], -2.2f, 1.0f);\n    imag = lerp(uv[1], -1.0f, 1.0f);\n    \n    float creal = real;\n    float cimag = imag;\n    \n    for(float i = 0.0f; i < iter; i++){\n        float realtemp = real;\n        real = (real*real)-(imag*imag)+creal;\n        imag = 2.0f*(realtemp*imag)+cimag;\n        if(sqrt((real*real) + (imag*imag)) > 4.0f){\n            col = i/iter;\n        }\n    }\n    // Output to screen\n    vec3 color = vec3(0.0f, 0.0f, 0.0f);\n    if(col != 0.0f) {\n        color = hsv2rgb(vec3(col*2.0f, 1.0f, 1.0f));\n    }\n    return color;\n}\n\nvec3 calcJulia(in vec2 fragCoord, in vec2 p, in float iter)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float real = uv[0];\n    float imag = uv[1];\n    \n    float col = 0.0f;\n    \n    // rescale\n    real = lerp(uv[0], -2.2f, 1.0f);\n    imag = lerp(uv[1], -1.0f, 1.0f);\n    \n    float creal = p[0];\n    float cimag = p[1];\n    \n    for(float i = 0.0f; i < iter; i++){\n        float realtemp = real;\n        real = (real*real)-(imag*imag)+creal;\n        imag = 2.0f*(realtemp*imag)+cimag;\n        if(sqrt((real*real) + (imag*imag)) > 4.0f){\n            col = i/iter;\n        }\n    }\n    // Output to screen\n    vec3 color = vec3(0.0f, 0.0f, 0.0f);\n    if(col != 0.0f) {\n        color = hsv2rgb(vec3(col*2.0f, 1.0f, 1.0f));\n    }\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // VALUES YOU CAN PLAY AROUND WITH\n    float iter = 100.0f;\n    \n    // code\n    vec2 mousepos = vec2(lerp(iMouse[0]/iResolution[0], -2.2f, 1.0f), \n                         lerp(iMouse[1]/iResolution[1], -1.0f, 1.0f));\n                         \n    // this could be improved\n    // the mandelbrot set is recalculated every frame even though\n    // it really only needs to be calculated once\n    // I'm rather new to glsl, so I'm not sure how that can be done\n    vec3 mcolor = calcMandelbrot(fragCoord, iter);\n    vec3 jcolor = calcJulia(fragCoord, mousepos, iter);\n    \n    vec3 color = (mcolor + jcolor) / vec3(2.0f, 2.0f, 2.0f);\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}