{
    "Shader": {
        "info": {
            "date": "1685721827",
            "description": "Just a test",
            "flags": 0,
            "hasliked": 0,
            "id": "Dt3SWS",
            "likes": 3,
            "name": "Ray Trace Training",
            "published": 3,
            "tags": [
                "sin",
                "raytrace"
            ],
            "usePreview": 0,
            "username": "henrmota",
            "viewed": 153
        },
        "renderpass": [
            {
                "code": "mat2 Rot(float a) {\n    float c = cos(a), s = sin(a);\n    \n    return mat2(c, -s, s, c);\n}\n\nfloat hash21(vec2 st) {\n    return fract(sin(dot(st, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat snoise(vec2 st) {\n    vec2 id = floor(st);\n    vec2 gridUv = fract(st);\n\n    vec2 dx = vec2(1., 0);\n    \n    float tl = hash21(id);\n    float tr = hash21(id + dx);\n    float bl = hash21(id + dx.yx);\n    float br = hash21(id + dx.xx);\n    \n    gridUv = gridUv * gridUv * 3. - 2. *gridUv * gridUv * gridUv;\n    float t = mix(tl, tr, gridUv.x);\n    float b = mix(bl, br, gridUv.x);\n\n    return mix(t, b, gridUv.y);\n}\n\nfloat fbm(vec2 st) {\n    float amp = 1.;\n    float freq = 0.5;\n    float col = 0.;\n    for(float i = 0.; i < 10.; i++) {\n        col += amp * snoise(st * freq + iTime);\n        \n        amp *= 0.5;\n        freq *= 2.;\n    }\n    \n    return col / 2.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    \n    // Time varying pixel color\n    vec3 col = vec3(0.);\n\n    vec3 ro = vec3(0.,0.,-3.);\n    vec3 rd = vec3(uv, 1.);\n    \n    \n    rd = normalize(rd);\n   \n  \n   \n    \n    \n    vec3 s = vec3(0.);\n    float t = dot(s-ro, rd);\n    vec3 p = ro + rd*t;\n    float r = 1.;\n    \n    \n    float y = length(p - s);\n    \n    float n = snoise(uv * 5. + fbm(uv * 5. + iTime));\n    r += 0.1 * n;\n    \n    if (y < r) {\n        float x = sqrt(r*r - y*y);\n        vec3 pf = (ro + rd * (t-x));\n        pf.yz *= Rot(0.1 * iTime + n * 0.001);\n       \n        vec3 pb = ro + rd * (t+x);\n        pb.xz *= Rot(-0.1 * iTime);\n        //col = pb - pf;\n        //col +=pb;\n        \n        float n = fbm(uv * 10. + 1. * iTime);\n      \n        vec2 polar = vec2(atan(pf.x, pf.z), pf.y);\n        n = fbm(pf.xy * 100. + n);\n        \n        float dp = 1./max(iResolution.x, iResolution.y);\n        col += smoothstep(dp, -dp, sin(length(pf.xy) * 100. - 2. * iTime) - 0.1);\n       \n        col *= x + x + pf + pb;\n    }\n    \n    //col = vec3(fbm(uv * 10.));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}