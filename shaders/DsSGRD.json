{
    "Shader": {
        "info": {
            "date": "1667265401",
            "description": "stars",
            "flags": 0,
            "hasliked": 0,
            "id": "DsSGRD",
            "likes": 12,
            "name": "Falling Stars Special",
            "published": 3,
            "tags": [
                "stars"
            ],
            "usePreview": 0,
            "username": "ArubikU",
            "viewed": 341
        },
        "renderpass": [
            {
                "code": "#define S(a,b,t) smoothstep(a,b,t)\n#define ROT -0.785398\n#define ZOOM .25\n#define STAR_SPEED 4.\n\nfloat N21(vec2 p) {\n    p = fract(p*vec2(233.34, 851.73));\n    p += dot(p, p+23.45);\n    return fract(p.x * p.y);\n}\n\nfloat DistLine(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float t = clamp(dot(pa, ba)/ dot(ba, ba), 0., 1.);\n    return length(pa - ba*t);\n}\n\n\nfloat DrawLine(vec2 p, vec2 a, vec2 b) {\n    float d = DistLine(p, a, b);\n    float m = S(.0025, .00001, d);\n    float d2 = length(a-b);\n    m *= S(1., .5, d2) + S(.04, .03, abs(d2-.75));\n    return m;\n}\n\nfloat ShootingStar(vec2 uv) {    \n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n    float h = N21(id);\n    \n    float line = DrawLine(gv, vec2(0., h), vec2(.125, h));\n    float trail = S(.14, .0, gv.x);\n\t\n    return line * trail;\n}\n\nfloat rand(in vec2 st) {\n  vec2 r = fract(sin(st) * 2.7644437);\n  return fract(r.y * 276.44437 + r.x);\n}\n\nfloat particles(in vec2 st) {\n  float r = rand(floor(st));\n  return 0.01 + smoothstep(0.995, 1.0, r) * max(0.0, sin(r * 34433.0 + iTime));\n}\n\nconst vec3 BLUE = vec3(0.0, 0.1, 0.2);\n\n#define p(st) particles(st)\nvec3 avg(in vec2 st, in float a) {\n  vec2 A = vec2(0.0, a);\n  return BLUE * (p(st) + p(st + A) + p(st + A.yx) + p(st - A) + p(st - A.yx));\n}\n\nvec3 stars(in vec2 st) {\n  vec3 color = vec3(0.0);\n  for (float i = 8.0; i > 0.0; --i) color += mix(color, avg(st, i), 1.5);\n  return color + p(st);\n}\n\n#define scale 150.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    \n    float t = iTime * STAR_SPEED;\n    vec2 rv1 = vec2(uv.x - t, uv.y + t);\n    rv1.x *= 1.1;\n    \n    float r = 3. * ROT;\n    float s = sin(r);\n    float c = cos(r);\n    mat2 rot = mat2(c, -s, s, c);\n    rv1 *= rot;\n    rv1 *= ZOOM * .9;\n    \n    vec2 rv2 = uv + t * 1.2;\n    rv2.x *= 1.1;\n    \n    r = ROT;\n    s = sin(r);\n    c = cos(r);\n    rot = mat2(c, -s, s, c);\n    rv2 *= rot;\n    rv2 *= ZOOM * 1.1;\n    \n    float star1 = ShootingStar(rv1);\n    float star2 = ShootingStar(rv2);\n\n    \n    vec3 col = vec3(clamp(star1+star2, 0., 1.));\n    fragColor = vec4(col,1.0);\n    \n    \n      vec2 st = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n      st *= scale;\n\n    fragColor.rgb = fragColor.rgb + stars(st).rgb;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}