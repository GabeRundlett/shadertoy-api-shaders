{
    "Shader": {
        "info": {
            "date": "1670180279",
            "description": "CC0: F# in space\nTried porting another shader to DirectX but failed due to subtle \ndifference between WebGL and DirectX.\nGot bored and tinkered with an older shader + F# logos\n//  This is the result\n",
            "flags": 0,
            "hasliked": 0,
            "id": "md2XWz",
            "likes": 14,
            "name": "F# in space",
            "published": 3,
            "tags": [
                "2d",
                "f"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 313
        },
        "renderpass": [
            {
                "code": "// CC0: F# in space\n//  Tried porting another shader to DirectX but failed due to subtle \n//  difference between WebGL and DirectX.\n//  Got bored and tinkered with an older shader + F# logos\n//  This is the result\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\n#define TTIME       (TAU*TIME)\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define SCA(a)      vec2(sin(a), cos(a))\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n#define COLORTUNE   0.\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pabs(float a, float k) {\n  return -pmin(-a, a, k);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nvec2 pmin(vec2 a, vec2 b, float k) {\n  vec2 h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nvec2 pabs(vec2 a, float k) {\n  return -pmin(-a, a, k);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat hexagon(vec2 p, float r) {\n  const vec3 k = 0.5*vec3(-sqrt(3.0), 1.0, sqrt(4.0/3.0));\n  p = abs(p);\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  return length(p)*sign(p.y);\n}\n\nfloat ref(inout vec2 p, vec2 r) {\n  float d = dot(p, r);\n  p -= r*min(0.0, d)*2.0;\n  return d < 0.0 ? 0.0 : 1.0;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat roundedX(vec2 p, float w, float r) {\n  p = abs(p);\n  return length(p-min(p.x+p.y,w)*0.5) - r;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  vec2 pa = p-a, ba = b-a;\n  float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h );\n}\n\nvec2 toSmith(vec2 p)  {\n  // z = (p + 1)/(-p + 1)\n  // (x,y) = ((1+x)*(1-x)-y*y,2y)/((1-x)*(1-x) + y*y)\n  float d = (1.0 - p.x)*(1.0 - p.x) + p.y*p.y;\n  float x = (1.0 + p.x)*(1.0 - p.x) - p.y*p.y;\n  float y = 2.0*p.y;\n  return vec2(x,y)/d;\n}\n\nvec2 fromSmith(vec2 p)  {\n  // z = (p - 1)/(p + 1)\n  // (x,y) = ((x+1)*(x-1)+y*y,2y)/((x+1)*(x+1) + y*y)\n  float d = (p.x + 1.0)*(p.x + 1.0) + p.y*p.y;\n  float x = (p.x + 1.0)*(p.x - 1.0) + p.y*p.y;\n  float y = 2.0*p.y;\n  return vec2(x,y)/d;\n}\n\nvec2 dfsharpWeekly(vec2 p, vec2 off) {\n  const vec2 refN = SCA(-PI/4.0);\n  const float r = 0.125;\n  const float rr = 2.0*r*sqrt(2.0);\n  vec2 p0 = p;\n  vec2 p1 = p-off;\n  p0 = abs(p0);\n  ref(p0, refN);\n  p0.y -= rr;\n  float d0 = roundedX(p0, rr, r);\n  float d1 = segment(p1, rr*vec2(-1.0, 0.0), rr*vec2(0.0, 1.0))-r;\n  float d2 = segment(p1, rr*vec2(0.5, -0.5), rr*vec2(0.0, -1.0))-r;\n  float d3 = segment(p1, rr*vec2(-1.0, 0.0), rr*vec2(0.5, -1.5))-r;\n  float d = d0;\n  float dd = d1;\n  dd = min(dd, d2);\n  dd = min(dd, d3);\n  \n  return vec2(d, dd);\n}\n\nvec2 dfsharp(vec2 p) {\n  vec2 p0 = p;\n  vec2 p1 = p;\n  vec2 p3 = p;\n  const float sm = 0.03;\n  p0 = pabs(p0, sm);\n  const vec2 n = normalize(vec2(1.0));\n  float d0 = abs(dot(n, p0)-0.38)-0.12;\n  float d1 = abs(p1.x)-0.025;\n  float d2 = dot(n, p0)-0.19;\n  float d3 = -p3.x-0.025;\n  d2 = pmax(d2, -d3, sm);\n  float d = d0;\n\n  d = pmax(d, -d1, sm);\n  d = min(d,  d2);\n  return vec2(d, p.x > 0.0 ? 1.0 : 0.0);\n}\n\nvec3 df(vec2 p) {\n  vec2 op = p;\n\n  vec2 ph = op;\n  ph.y -= -0.025;\n  ph = ph.yx;\n  float dh = -hexagon(ph, 1.99);\n\n  const float fz = 2.0;\n  vec2 df = dfsharp(p/fz)*vec2(fz, 1.0);\n  float d0 = df.y > 0.0 ? abs(df.x)-0.0125 : df.x;;\n  \n  float d = d0;\n  \n  return vec3(d, length(p), dh);\n}\n\n// License: Unknown, author: Martijn Steinrucken, found: https://www.youtube.com/watch?v=VmrIDyYiJBA\nvec2 hextile(inout vec2 p) {\n  // See Art of Code: Hexagonal Tiling Explained!\n  // https://www.youtube.com/watch?v=VmrIDyYiJBA\n  const vec2 sz       = vec2(1.0, sqrt(3.0));\n  const vec2 hsz      = 0.5*sz;\n\n  vec2 p1 = mod(p, sz)-hsz;\n  vec2 p2 = mod(p - hsz, sz)-hsz;\n  vec2 p3 = dot(p1, p1) < dot(p2, p2) ? p1 : p2;\n  vec2 n = ((p3 - p + hsz)/sz);\n  p = p3;\n\n  n -= vec2(0.5);\n  // Rounding to make hextile 0,0 well behaved\n  return round(n*2.0)*0.5;\n}\n\nvec2 transform(vec2 p) {\n  float a = TTIME/400.0;\n  p *= 1.25;\n  p *= ROT(a);\n  vec2 p0 = toSmith(p);\n  p0 += 1.0*vec2(0.5, -1.0);\n  p = fromSmith(p0);\n  p.y += 0.05*TIME;\n  return p;\n}\n\nvec3 effect(vec2 p, vec2 pp, float r) {\n  const float iz = 4.0;\n  const float zf = 0.5;\n  const float hoff = COLORTUNE;\n  const vec3 bcol  = HSV2RGB(vec3(hoff+0.61, 0.9, 1.5));\n  const vec3 gcol  = HSV2RGB(vec3(hoff+0.55, 0.9, 1.0));\n  const vec3 bbcol = HSV2RGB(vec3(hoff+0.55, 0.75, 0.66));\n  const vec3 scol  = HSV2RGB(vec3(hoff+0.50, 0.95, 2.0));\n\n  vec2 pf = p;\n  pf -= vec2(r, -1.0)-0.4*vec2(1.0,-1.0);\n  pf /= zf;\n  pf *= ROT(-PI/4.0);\n\n  vec2 dfw = dfsharpWeekly(pf, vec2(-0.8, -0.35))*zf;\n  float dfs = min(dfw.x, dfw.y);\n  float aaa = 2.0/RESOLUTION.y;\n  p = transform(p);\n  float aa = iz*length(fwidth(p))*sqrt(0.5);\n  vec2 n = hextile(p);\n  p *= iz;\n  vec3 d3 = df(p);\n  float d = d3.x;\n  float g = d3.y;\n  float dd = d3.z;\n \n  float amb = mix(0.025, 0.1, tanh_approx(0.1+0.25*g+0.33*p.y));\n\n  vec3 col = vec3(0.0);\n  \n  col = mix(col, 5.0*sqrt(amb)*bcol, smoothstep(aa, -aa, d));\n  col = mix(col, 4.0*sqrt(amb)*bbcol, smoothstep(aa, -aa, dd));\n  col += 0.125*bcol*exp(-12.0*max(min(d, dd), 0.0));\n  col += gcol*amb;\n  col += scol*aa;\n  col *= mix(vec3(0.5), vec3(1.0),smoothstep(-0.9, 0.9, sin(0.33*TAU*p.y/aa+TAU*vec3(0.0, 1., 2.0)/3.0)));\n  col = mix(col, 1.2*sqrt(bcol), smoothstep(aaa, -aaa, dfs));\n  col *= smoothstep(1.5, 0.5, length(pp));\n\n  col = aces_approx(col);\n  col = sRGB(col);\n\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  float r = RESOLUTION.x/RESOLUTION.y; \n  p.x *= r;\n  vec3 col = effect(p, pp, r);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}