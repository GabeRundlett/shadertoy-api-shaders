{
    "Shader": {
        "info": {
            "date": "1608347351",
            "description": "(っ˘ڡ˘ς)",
            "flags": 32,
            "hasliked": 0,
            "id": "wlcczr",
            "likes": 20,
            "name": "Marshmallow tunnel",
            "published": 3,
            "tags": [
                "tunnel",
                "marshmallow"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 921
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 color, in vec2 coordinate )\n{\n    color = texture(iChannel0, coordinate/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//\n// Marshmallow tunnel\n//\n// Leon Denise 2020.12.19\n// Licensed under hippie love conspiracy\n//\n\n// repeat coordinate\n#define repeat(p,r) (mod(p,r)-r/2.)\n\n// rotation matrix\nmat2 rotation(float a)\n{\n    float c = cos(a), s = sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat material;\n\n// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// signed distance field\nfloat map(vec3 pos)\n{\n    vec3 p = pos;\n    float dist = 100.;\n    float shape = 100.;\n    float falloff = 1.0;\n    float range = 2.4;\n    const int count = 5;\n    \n    // rotation based on z axis\n    float t = p.z*0.2+213.+iTime*0.1;\n    \n    for (int index = 0; index < count; ++index)\n    {\n        // fold space (.xz = .xy is an error, but interesting enough to be saved in a shadertoy for later)\n        pos.xz = abs(pos.xy)-range*falloff;\n        \n        // rotations\n        pos.yz *= rotation(t/falloff);\n        pos.xy *= rotation(t/falloff);\n        \n        // shape\n        shape = length(pos)-2.6*falloff;\n        \n        // material system inspired by evvvvil\n        material = shape < dist ? float(index) : material;\n        \n        // add to volume\n        dist = min(dist, shape);\n        \n        falloff /= 1.2;\n    }\n\n    // shell\n    dist = abs(dist);\n\n    // surface matter\n    vec3 seed = pos * 12.;\n    float matter = sin(seed.x + abs(cos(seed.y)));\n    matter = pow(abs(matter), 0.3);\n    matter += pow(abs(sin(length(pos)*10.)), 0.3) * 2.;\n    dist -= matter * 0.1;\n\n    return dist;\n}\n\nvoid mainImage( out vec4 color, in vec2 coordinate )\n{\n    color = vec4(0,0,0,1);\n    \n    // coordinates\n    vec2 uv = 2.*(coordinate-0.5*iResolution.xy)/iResolution.y;\n    vec3 camera = vec3(2,1,-4);\n    vec3 ray = normalize(vec3(uv,1.));\n    float rng = hash12(coordinate+iTime);\n    \n    // camera animation\n    camera.y += sin(iTime*0.3)*0.05;\n    \n    // mouse control\n    vec2 mouse = (iMouse.xy / iResolution.xy * 2. - 1.) * step(0.5, iMouse.z);\n    ray.yz *= rotation(-mouse.y);\n    ray.xz *= rotation(.2-mouse.x);\n    \n    // raymarch iteration\n    const int count = 40;\n    for (int index = 0; index < count; ++index)\n    {\n        // distance field\n        float dist = map(camera);\n        \n        // collide with volume\n        if (dist < 0.1)\n        {\n            // coloring\n            float shade = float(count-index)/float(count);\n            \n            // palette from Inigo Quilez\n            // https://iquilezles.org/articles/palettes\n            vec3 tint = vec3(0.75) + vec3(0.25) * cos(3.14*(vec3(1,2,3)*(shade*1.1+material+uv.x*.1)));\n            color = vec4(tint*shade, 1);\n            break;\n        }\n        \n        // march\n        dist *= 0.6 + 0.1 * rng;\n        camera += ray * dist;\n    }\n    \n    // fade in\n    color *= smoothstep(0.0, 1.0, iTime);\n    \n    // temporal dithering\n    color = mix(color, texture(iChannel0, coordinate/iResolution.xy), 0.7);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}