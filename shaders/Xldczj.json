{
    "Shader": {
        "info": {
            "date": "1534400353",
            "description": "the Pedal curve of a circle and the mouse position.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xldczj",
            "likes": 11,
            "name": "pedal - circle",
            "published": 3,
            "tags": [
                "math",
                "curves",
                "pedal"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 967
        },
        "renderpass": [
            {
                "code": "// the Pedal of a curve C and a point Q\n// is the locus of all points P such that there is a tangent to C\n// which passes through P and which is perpendicular to PQ.\n\n\n\n// return the tangent points of the circle of radius r which pass through p.\n// if any.\n// thanks to Mike Plotz for suggesting the geometric approach here.\nbool circleTangents(vec2 c, float r, vec2 p, out vec2 t1, out vec2 t2) {\n    p -= c;\n    \n\tfloat P = length(p);\n    if (P < r) {\n        return false;\n    }\n    \n    float a   = r * r                       / P;\n    float q   = r * sqrt((P * P) - (r * r)) / P;\n    vec2  pN  = p / P;\n    vec2  pNP = vec2(-pN.y, pN.x);\n    vec2  va  = pN * a;\n    \n    t1 = va + pNP * q;\n    t2 = va - pNP * q;\n    \n    return true;\n}\n\n#define FWIDTH2(f) (length(vec2(dFdx(f), dFdy(f))))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = length(iMouse.xy) < 0.01 ? vec2(cos(iTime) * 40.0 + iResolution.x / 4.0, sin(iTime) * 20.0 + iResolution.y / 2.0) : iMouse.xy;\n    \n    vec2 uv = ((fragCoord - iResolution.xy * 0.5)/iResolution.y);\n\tvec2 ms = ((mouse - iResolution.xy * 0.5)/iResolution.y);\n\n    vec3 col = vec3(0.0);\n    \n    float radius = sin(iTime * 0.3) * 0.15 + 0.15;;\n    float width  = 0.008;\n    float d = abs(radius - length(uv));\n    float g = smoothstep(1., 0., d/width) * 0.3;\n    col += vec3(0.0, g, g * 2.0);\n    \n    vec2 t1;\n    vec2 t2;\n    \n    bool hasTangents = circleTangents(vec2(0.0), radius, uv, t1, t2);\n    if (hasTangents) {\n        col += vec3(0.2);\n        \n\t    vec2 pm = ms - uv;\n\t    vec2 pmn = normalize(pm);\n   \t    vec2 t1n = normalize(t1 - uv);\n   \t    vec2 t2n = normalize(t2 - uv);\n        \n        float t1d = dot(pmn, t1n);\n        float t2d = dot(pmn, t2n);\n        \n        const float thresh = 0.07;\n        \n        float c1 = smoothstep(thresh, 0.0, abs(t1d) / (FWIDTH2(t1d) * 40.0));\n        float c2 = smoothstep(thresh, 0.0, abs(t2d) / (FWIDTH2(t2d) * 40.0));\n        col += vec3(c1 * 0.6);\n        col += vec3(c2 * 0.6);\n        col += vec3(0., 0., 0.3 * smoothstep(thresh, 0.0, t1d));\n        col += vec3(0.3 * smoothstep(thresh, 0.0, t2d), 0., 0.);\n    }\n    \n    fragColor = vec4(col,1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}