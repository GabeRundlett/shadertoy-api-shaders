{
    "Shader": {
        "info": {
            "date": "1526545453",
            "description": "Classical design for a CERN particle detector using repeated hollowed-out mandelboxes (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "Ms3fWB",
            "likes": 13,
            "name": "Palladio's Detector",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbox"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 1046
        },
        "renderpass": [
            {
                "code": "// \"Palladio's Detector\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0   // optional antialiasing\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nvec3 HsvToRgb (vec3 c);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nfloat Noisefv3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltPos[2], ltAx;\nfloat tCur, dstFar;\nconst float pi = 3.14159;\nconst float itMax = 12.;\n\nfloat ObjDf (vec3 p)\n{\n  vec4 p4;\n  float d;\n  p = mod (p + 3., 6.) - 3.;\n  p4 = vec4 (p, 1.);\n  for (float j = 0.; j < itMax; j ++) {\n    p4.xyz = 2. * clamp (p4.xyz, -1., 1.) - p4.xyz;\n    p4 = 2.8 * p4 / clamp (dot (p4.xyz, p4.xyz), 0.25, 1.) + vec4 (p, 1.);\n  }\n  d = max (max (length (p4.xyz) / p4.w, - PrBoxDf (p, vec3 (0.33))),\n     - Minv3 (vec3 (PrRoundBox2Df (p.xy, vec2 (0.05), 0.03),\n     PrRoundBox2Df (p.yz, vec2 (0.05), 0.03), PrRoundBox2Df (p.zx, vec2 (0.05), 0.03))));\n  return d;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, h, s, sLo, sHi, eps;\n  eps = 0.0005;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 120; j ++) {\n    h = ObjDf (ro + s * rd);\n    if (h < eps || s > dstFar) {\n      sHi = s;\n      break;\n    }\n    sLo = s;\n    s += h;\n  }\n  if (h < eps) {\n    for (int j = 0; j < 6; j ++) {\n      s = 0.5 * (sLo + sHi);\n      if (ObjDf (ro + s * rd) > eps) sLo = s;\n      else sHi = s;\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float dMax)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = 0; j < 50; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (3. * h, 0.02, 0.1);\n    if (sh < 0.05 || d > dMax) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nfloat ObjAO (vec3 ro, vec3 rd)\n{\n  float ao, d;\n  ao = 0.;\n  for (float j = 1.; j < 4.; j ++) {\n    d = 0.02 * j;\n    ao += max (0., d - ObjDf (ro + d * rd));\n  }\n  return 0.5 + 0.5 * clamp (1. - 5. * ao, 0., 1.);\n}\n\nvec4 ObjCol (vec3 p)\n{\n  vec3 p3, col;\n  float pp, ppMin, cn, s;\n  p = mod (p + 3., 6.) - 3.;\n  p3 = p;\n  cn = 0.;\n  ppMin = 1.;\n  for (float j = 0.; j < itMax; j ++) {\n    p3 = 2. * clamp (p3, -1., 1.) - p3;\n    pp = dot (p3, p3);\n    if (pp < ppMin) {\n      cn = j;\n      ppMin = pp;\n    }\n    p3 = 2.8 * p3 / clamp (pp, 0.25, 1.) + p;\n  }\n  s = mod (cn, 2.);\n  col = HsvToRgb (vec3 (mod (0.6 + 1.5 * cn / itMax, 1.), mix (0.6, 0., s), 1.));\n  return vec4 (col, 0.05 + 0.4 * s);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, vnn, ltDir, rds;\n  float dstObj, atten, dfSum, spSum, sh;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    vnn = VaryNf (256. * ro, vn, 0.2);\n    dfSum = 0.;\n    spSum = 0.;\n    for (int k = 0; k < 2; k ++) {\n      ltDir = ltPos[k] - ro;\n      atten = 1. / (1. + 0.1 * dot (ltDir, ltDir));\n      ltDir = normalize (ltDir);\n      atten *= smoothstep (0.3, 0.5, dot (ltAx, - ltDir));\n      dfSum += atten * max (dot (vnn, ltDir), 0.);\n      spSum += atten * pow (max (0., dot (ltDir, reflect (rd, vn))), 16.);\n    }\n    ltDir = normalize (0.5 * (ltPos[0] + ltPos[1]) - ro);\n    sh = ObjSShadow (ro, ltDir, max (dstObj - 0.2, 0.));\n    col4 = ObjCol (ro);\n    col = (0.1 + 0.4 * sh * dfSum) * col4.rgb + col4.a * sh * spSum * vec3 (1., 1., 0.9);\n    col *= ObjAO (ro, vn);\n    col += vec3 (0., 0.2, 0.) * max (dot (- rd, vn), 0.) *\n       (1. - smoothstep (0., 0.05, abs (dstObj - mod (0.5 * tCur, 3.))));\n    col *= mix (1., smoothstep (0., 1., Maxv3 (col)), 0.3);\n  } else {\n    if (rd.y < 0.) {\n      rd.y = - rd.y;\n      rd.xz = vec2 (- rd.z, rd.x);\n    }\n    rds = floor (2000. * rd);\n    rds = 0.00015 * rds + 0.1 * Noisefv3 (0.0005 * rds.yzx);\n    for (int j = 0; j < 19; j ++) rds = abs (rds) / dot (rds, rds) - 0.9;\n    col = vec3 (0.02, 0.02, 0.05) + 0.5 * vec3 (1., 1., 0.7) * min (1., 0.5e-3 *\n       pow (min (6., length (rds)), 5.));\n  }\n  return col;\n}\n\nvec3 TrackPath (float t)\n{\n  vec3 p;\n  p = vec3 (6. * floor (t / 18.));\n  t = mod (t, 18.);\n  if (t < 6.) p += vec3 (0., 0., t);\n  else if (t < 12.) p += vec3 (t - 6., 0., 6.);\n  else p += vec3 (6., t - 12., 6.);\n  return p;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv, cs;\n  float el, az, spd, t, tm, ts;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  spd = 0.2;\n  ro = TrackPath (spd * tCur);\n  vd = normalize (TrackPath (spd * tCur + 0.7) - TrackPath (spd * tCur - 0.7));\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az -= 2. * pi * mPtr.x;\n    el -= pi * mPtr.y;\n  }\n  t = spd * tCur / 18.;\n  tm = mod (3. * t, 1.);\n  ts = 2. * step (1., mod (t, 2.)) - 1.;\n  if (max (abs (vd.x), abs (vd.z)) > 0.5) {\n    az += 0.5 * pi * SmoothBump (0.3, 0.7, 0.15, tm) * ts;\n    if (abs (vd.z) > 0.5) vd.yz = Rot2D (vd.yz, el);\n    else if (abs (vd.x) > 0.5) vd.yx = Rot2D (vd.yx, el);\n  }\n  if (abs (vd.y) < 1. - 1e-5) {\n    vd.xz = Rot2D (vd.xz, az);\n    vuMat = mat3 (vec3 (vd.z, 0., - vd.x) / sqrt (1. - vd.y * vd.y),\n       vec3 (- vd.y * vd.x, 1. - vd.y * vd.y, - vd.y * vd.z) / sqrt (1. - vd.y * vd.y), vd);\n  } else {\n    az += 2. * pi * smoothstep (0.3, 0.7, tm) * ts;\n    cs = sin (az + vec2 (0.5 * pi, 0.));\n    vuMat = mat3 (vec3 (cs.x, 0., - cs.y), vec3 (cs.y, 0., cs.x), vec3 (0., vd.y, 0.));\n  }\n  ltPos[0] = ro + vuMat * vec3 (-0.3, 0.2, -0.05);\n  ltPos[1] = ro + vuMat * vec3 (0.3, 0.2, -0.05);\n  ltAx = vuMat * vec3 (0., 0., 1.);\n  dstFar = 80.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 4.;\n#endif  \n  col = vec3 (0.);\n  for (float a = 0.; a < naa; a ++) {\n    rd = normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.),\n       0.5 * pi * (a + 0.5)), 2.));\n    rd = vuMat * rd;\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  col = pow (clamp (col, 0., 1.), vec3 (0.9));\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}