{
    "Shader": {
        "info": {
            "date": "1458365222",
            "description": "how to decode  the permutation map into unique indices from 0 to 63 ?\nAbove, the binary decomposition help understanding its organisation.\n *63/256: missing: 1, 63  twice: 11, 21\nNOW WORKING ! (after regeneration of the permutation texture).",
            "flags": 0,
            "hasliked": 0,
            "id": "XsdXRM",
            "likes": 11,
            "name": "permutation map",
            "published": 3,
            "tags": [
                "permutations"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1134
        },
        "renderpass": [
            {
                "code": "// cf https://en.wikipedia.org/wiki/Ordered_dithering\n\nbool D(vec2 p, float n) {                         // display digit\n    int i=int(p.y), b=int(exp2(floor(30.-p.x-n*3.)));\n    i = ( p.x<0.||p.x>3.? 0:\n    i==5? 972980223: i==4? 690407533: i==3? 704642687: i==2? 696556137:i==1? 972881535: 0 )/b;\n \treturn i-i/2*2==1;\n}\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    vec2 R = iResolution.xy;  U /= R;\n\tO = texture(iChannel0, U);\n#if 0 // testing 3 bits\n    vec4 O2 = texture(iChannel0, U+.5);  \n    O =  floor(O*63.+.5); O  = floor(O/8.)/8.; \n  //O = .5+.5*cos(6.28*O.x+vec4(0,-2.1,2.1,0));  return;\n    O2 = floor(O2*63.+.5);O2 = floor(O2/8.)/8.;\n    O = vec4(length(O-O2) < 1e-3); return;\n#endif\n    \n  //float C = O.x*63.  +1e-5;                   // conversion permutation texture -> index\n    float C = floor(O.x*63.+.5)+1.;                   \n  //float C = floor(O.x*63.*2.)/2.; C = (C==11.5)? 1.: (C==21.5)? 63.: floor(C); O = vec4(C/63.);\n\n\tU = fract(U*8.);\n   \n    if ( D(U*16.-vec2(4,9), floor(C/10.) )    )      {O++; return; }   // digits\n    if ( D(U*16.-vec2(8,9), mod(floor(C),10.)))      {O++; return; }\n  //if ( D(U*16.-vec2(12,9), mod(floor(C*10.),10.))) {O++; return; }\n    \n    if (fract(U.x+.01)<.02 || fract(U.y+.02)<.04) { O++; return; }  // lines & frames \n    if (fract(8.*U.x)<.1) { O=vec4(.5); return; }\n    if (U.y<.25) return;\n    \n    O = .5+.5*cos(6.28*O.x+vec4(0,-2.1,2.1,0));   // rainbow mapping\n    \n    C /= 256.;\n    if (abs(U.y-.5)<.25) {                        // binary decomposition\n        for (int i=0; i<8; i++) {\n            C = 2.*fract(C);\n            if (i==int(8.*U.x))  O *= vec4(floor(C)==0.);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}