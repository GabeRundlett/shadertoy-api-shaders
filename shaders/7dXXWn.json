{
    "Shader": {
        "info": {
            "date": "1618457816",
            "description": "翘曲域噪声用来模拟卷曲、螺旋状的纹理，比如烟雾、大理石等\nBlog: https://huailiang.github.io/blog/2021/noise/",
            "flags": 0,
            "hasliked": 0,
            "id": "7dXXWn",
            "likes": 7,
            "name": "domain_wraping_noise_texture",
            "published": 3,
            "tags": [
                "noise",
                "fbm",
                "domian"
            ],
            "usePreview": 0,
            "username": "penghuailiang",
            "viewed": 386
        },
        "renderpass": [
            {
                "code": "#define OCTAVE_NUM 4\n\nvec3 random_perlin( vec3 p ) {\n    p = vec3(\n            dot(p,vec3(127.1,311.7,69.5)),\n            dot(p,vec3(269.5,183.3,132.7)), \n            dot(p,vec3(247.3,108.5,96.5)) \n            );\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\nfloat noise_perlin (vec3 p) {\n    vec3 i = floor(p);\n    vec3 s = fract(p);\n\n    float a = dot(random_perlin(i),s);\n    float b = dot(random_perlin(i + vec3(1, 0, 0)),s - vec3(1, 0, 0));\n    float c = dot(random_perlin(i + vec3(0, 1, 0)),s - vec3(0, 1, 0));\n    float d = dot(random_perlin(i + vec3(0, 0, 1)),s - vec3(0, 0, 1));\n    float e = dot(random_perlin(i + vec3(1, 1, 0)),s - vec3(1, 1, 0));\n    float f = dot(random_perlin(i + vec3(1, 0, 1)),s - vec3(1, 0, 1));\n    float g = dot(random_perlin(i + vec3(0, 1, 1)),s - vec3(0, 1, 1));\n    float h = dot(random_perlin(i + vec3(1, 1, 1)),s - vec3(1, 1, 1));\n\n    vec3 u = smoothstep(0.,1.,s);\n\n    return mix(mix(mix( a, b, u.x),\n                mix( c, e, u.x), u.y),\n            mix(mix( d, f, u.x),\n                mix( g, h, u.x), u.y), u.z);\n}\n\n\n// 叠加5次的分形噪声\nfloat fbm(vec3 p)\n{\n    float f = 0.0;\n    float a = 1.;\n    p = 2.0 * p;\n    for (int i = 0; i < OCTAVE_NUM; i++) {\n        f += a * noise_perlin(p);\n        p = 2.0 * p;\n        a /= 2.;\n    }\n    return f;\n}\n\nfloat domain_wraping( vec3 p )\n{\n    float v1 = fbm(p);\n    vec3 q = vec3(v1, v1, v1);\n    float v2 = fbm(p+q);\n    vec3 r = vec3(v2, v2, v2);\n    return fbm(p + r);\n}\n\nvec3 clamp01(vec3 c)\n{\n    return clamp(c,vec3(0.,0.,0.),vec3(1.,1.,1));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    float c1 = domain_wraping(vec3(1.*uv, iTime/10.0));\n    vec3 c = vec3(c1*c1 + 1.1*c1, 1.4*c1, 0.4*c1*c1);\n    vec3 color = 4. * c*c;\n    fragColor = vec4(clamp01(color), 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}