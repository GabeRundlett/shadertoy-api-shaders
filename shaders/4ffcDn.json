{
    "Shader": {
        "info": {
            "date": "1720978949",
            "description": "it sort of works, but the code is awful",
            "flags": 0,
            "hasliked": 0,
            "id": "4ffcDn",
            "likes": 2,
            "name": "perlin noise culegamer",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "CuleGamer",
            "viewed": 85
        },
        "renderpass": [
            {
                "code": "float hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat cerp(float a, float b, float t)\n{\n    return a*(2.*t*t*t-3.*t*t+1.)+b*(-2.*t*t*t+3.*t*t);\n}\n\nvec2 randVec(vec2 pos)\n{\n    float theta = 3.14159 * hash12(pos) + iTime;\n    return vec2(cos(theta), sin(theta));\n}\nvoid mainImage(out vec4 O, in vec2 I)\n{\n    vec2 uv = 4. * (2. * I - iResolution.xy)/iResolution.y;\n    vec3 col;\n    float val;\n    vec2 gridPos = fract(uv);\n    vec2 gridCorner;\n    vec2 cornerVec;\n    vec2 offset;\n    float cornerVal[4];\n    for(uint i; i < 4u; i++)\n    {\n        offset = vec2(i & 1u, i >> 1u);\n        //order of offset\n        //[3][4]\n        //[1][2]\n        gridCorner = floor(uv) + offset;\n        cornerVec = gridPos - offset;\n        cornerVal[i] = dot(cornerVec, randVec(gridCorner));\n    }\n    val = cerp(cerp(cornerVal[0], cornerVal[1], gridPos.x), cerp(cornerVal[2], cornerVal[3], gridPos.x), gridPos.y);\n    val = 0.5 * val + 0.5;\n    col = vec3(val);\n    O = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}