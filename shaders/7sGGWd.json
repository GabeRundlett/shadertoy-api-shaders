{
    "Shader": {
        "info": {
            "date": "1634908900",
            "description": "The image is inspired by this beautiful cover accompanying such a wonderful song https://www.youtube.com/watch?v=oxoqm05c7yA",
            "flags": 96,
            "hasliked": 0,
            "id": "7sGGWd",
            "likes": 26,
            "name": "Glowering Sun",
            "published": 3,
            "tags": [
                "zefzef"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 555
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(0.,f*factor);\n        if (nuv.y > 0. && nuv.y < 1.)\n            col += texture(iChannel0, uv+vec2(0.,f*factor)).xyz/float(steps);\n    }\n    \n    vec3 rgb = texture(iChannel1, uv).xyz+1.*pow(col, vec3(GLOW_POW));\n    //rgb += 2.*vec3(0.,.25,.3)*sat(sin(uv.y*355.-iTime*200.)-.5);\n    fragColor = vec4(rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvec2 map(vec3 p)\n{\n    p.z += iTime;\n    vec2 acc = vec2(1000., -1.);\n    //acc = _min(acc, vec2(length(p)-1., 0.));\n    \n    float floor_ = -p.y;\n    float path = sin(p.z)*.5+sin(p.z*.5);\n    floor_ = floor_-acos(cos(clamp(p.x*2.+path, -1.57,1.57)))*.5;\n    acc = _min(acc,vec2(floor_, 1.));\n    \n    float floor2 = -p.y-.3;\n    acc = _min(acc, vec2(floor2, 2.));\n    \n    acc = _min(acc, vec2(-p.z+iTime+15., 3.));\n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.001,0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x,map(p-e.yxy).x,map(p-e.yyx).x));\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < 200; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.001)\n            return vec3(res.x, distance(p, ro), res.y);\n        p+=rd*res.x;\n    }\n    return vec3(-1.);\n}\n\nfloat _sqr(vec2 p, vec2 s)\n{\n    vec2 l = abs(p)-s;\n    return max(l.x, l.y);\n}\n\nvec3 rdr(vec2 uv)\n{\n    float stp = .001;\n    uv = round(uv/stp)*stp;\n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(0.,-1.5,-10.);\n    vec3 ta = vec3(0.,-1.,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    vec3 res = trace(ro, rd, 512);\n    if (res.y>0.)\n    {\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = n*.5+.5;\n        if (res.z == 1.)\n        {\n            vec2 gridth = vec2(0.005);\n            vec2 gridrep = vec2(0.5);\n            vec2 uvgrid = p.xz+vec2(0.,iTime);\n            uvgrid = mod(uvgrid+gridrep*.5, gridrep)-gridrep*.5;\n            float gridshp = min(_sqr(uvgrid, vec2(gridth.x, 1.)), _sqr(uvgrid, vec2(1.,gridth.y)));\n            col = mix(vec3(0.), (res.y/10.)*vec3(.5,.2,.3)*7./pow(res.y,.7), 1.-sat(gridshp*5./pow(res.y/10.,5.)));\n        }\n        if (res.z == 2.)\n            col = vec3(0.420,0.459,1.000)*2.;\n        if (res.z == 3.)\n        {\n            vec2 uvs = p.xy-vec2(0.,-1.);\n            col = vec3(0.396,0.251,0.196)+pow(texture(iChannel1, uvs*.1).x, 5.)*.5;\n            vec3 rgbsun = mix(vec3(1.000,0.388,0.369), \n            vec3(1.000,0.376,0.141), texture(iChannel1, uvs*8.).x);\n            col = mix(col, rgbsun, 1.-sat((length(uvs)-5.5)*400.));\n            float mount = -uvs.y-1.5-sin(uvs.x*.5)*.5-asin(sin(uvs.x))*.2-sin(uvs.x*.1)*.7;\n            col = mix(col, vec3(0.), 1.-sat(mount*400.));\n        }\n        float stpt = .05;\n        float tnoise = float(int(iTime/stpt))*stpt;\n        float rawnoise = texture(iChannel1, uv*2.+vec2(tnoise, sin(tnoise*1000.))).x;\n        col += .1*vec3(rawnoise);\n        col = col*.7+.5*pow(col*rawnoise, vec3(1.2));\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n\n    vec3 col =  rdr(uv);\n    vec2 off = (vec2(1., -1.)/(iResolution.x*.8));\n    if (true) // Not so cheap antialiasing\n    {\n        //col = vec3(1.,0.,0.);\n        vec3 acc = col;\n        acc += rdr(uv+off.xx);\n        acc += rdr(uv+off.xy);\n        acc += rdr(uv+off.yy);\n        acc += rdr(uv+off.yx);\n        col = acc/5.;\n        \n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 34120,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/mayfruit/yu-utsu-sun"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define GLOW_SAMPLES 20\n#define GLOW_DISTANCE 0.1\n#define GLOW_POW 1.3\n\n#define sat(a) clamp(a, 0.,1.)\n#define PI 3.14159265\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 1.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(f*factor, 0.);\n        if (nuv.x > 0. && nuv.x < 1.)\n          col += texture(iChannel0, uv+vec2(f*factor,0.)).xyz/float(steps);\n    }\n    \n    vec3 rgb = texture(iChannel1, uv).xyz+2.*pow(col, vec3(GLOW_POW));\n    rgb += 4.*vec3(0.,.25,.3)*sat(sin(uv.y*355.-iTime*200.)-.5);\n    fragColor = vec4(rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}