{
    "Shader": {
        "info": {
            "date": "1724945490",
            "description": "Distort the lens of a raymarcher top get cool effects??",
            "flags": 0,
            "hasliked": 0,
            "id": "Xf2BWD",
            "likes": 0,
            "name": "Power Lensing Effect",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "lens",
                "lensing"
            ],
            "usePreview": 0,
            "username": "aidanwyber",
            "viewed": 77
        },
        "renderpass": [
            {
                "code": "\n#define AA 1\n#define time iTime*0.15\n\n#define MAX_DIST 40.\n#define MAX_ITERS 500\n\n#define ENV_COL vec3(0.510,0.788,0.788)\n#define SPEC_COL vec3(0.596,0.925,0.196)\n\n#define nmc(x) (-cos(x)*0.5+0.5)\n\nvec2 smin(float a, float b, float k) {\n    k *= 6.0;\n    float h = max( k-abs(a-b), 0.0 )/k;\n    float m = h*h*h*0.5;\n    float s = m*k*(1.0/3.0); \n    return (a<b) ? vec2(a-s,m) : vec2(b-s,1.0-m);\n}\n\nfloat sdSphere(vec3 pos, vec4 s) {\n    return length(pos - s.xyz) - s.w;\n}\n\nfloat sdCube(in vec3 pos, vec4 s) {\n    vec3 v = (pos - s.xyz);\n    vec3 vp = pow(abs(v), vec3(10.));\n    float norm = pow(vp.x + vp.y + vp.z, 1./10.);\n    return norm - s.w;\n}\n\nfloat sdScene(in vec3 pos) {\n    vec3 period = vec3(1.,1.,1.) * 5.;\n    pos = mod(pos + period/2., period) - period/2.;\n    \n    float timeTh = time * -4.;\n    vec2 timeCirc = vec2(sin(timeTh), cos(timeTh));\n    float sd = 1e4;\n    sd = min(sd, sdSphere(pos, vec4(vec3(0.), 0.5)));\n    sd = min(sd, sdCube(pos, vec4(vec3(timeCirc.x, 0., timeCirc.y), 0.25)));\n    return sd;\n}\n\nvec3 calcNormal(in vec3 pos) {\n    // tetrahedron method\n    const vec2 e = vec2(1.0,-1.0)*0.5773*0.005;\n    return normalize(\n        e.xyy * sdScene(pos + e.xyy) + \n        e.yyx * sdScene(pos + e.yyx) + \n        e.yxy * sdScene(pos + e.yxy) + \n        e.xxx * sdScene(pos + e.xxx)\n    );\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float d = 0.0;\n    for (int i = 0; i < MAX_ITERS; i++) {\n\t    float sd = sdScene(ro + rd * d);\n        \n        if ((sd < 0.0) || (d > MAX_DIST))\n            break;\n        \n        d += sd;\n    }\n    if (d > MAX_DIST) return -1.;\n\treturn d;\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float timeTh = time * 1.;\n    vec2 timeCirc = vec2(sin(timeTh), cos(timeTh));\n    vec2 mouse = (iMouse.xy / iResolution.xy * 2. - 1.) * -vec2(1., -1.);\n    timeCirc = mouse;\n    \n    vec3 aaCol = vec3(0.);\n    for (int AAx = 0; AAx < AA; AAx++) {\n        for (int AAy = 0; AAy < AA; AAy++) {\n            vec2 aa = vec2(AAx, AAy) / float(AA);\n            \n            vec2 uv = (fragCoord + aa) / iResolution.xy;\n            vec2 pos = (fragCoord + aa - iResolution.xy * 0.5) / iResolution.y * 2.;\n\n\n    vec3 ta = vec3(0.);\n    vec3 cam = vec3(0., 1., -8.);\n    cam.xz = timeCirc * cam.z;\n    vec3 lookAt = ta - cam;\n    \n    vec3 ww = normalize(lookAt);\n    vec3 uu = cross(ww, vec3(0.,1.,0.));\n    vec3 vv = cross(uu, ww);\n    \n    float planeScale = 0.7 / length(cam.xz);\n    //vec3 fragDelta = pos.x * planeScale * uu + pos.y * planeScale * vv;\n    pos = sign(pos) * pow(abs(pos), vec2(3. * nmc(time)));\n    vec3 fragDelta = pos.x * planeScale * uu + pos.y * planeScale * vv;\n    vec3 fragPos = cam + ww + fragDelta;\n    \n    // 360 cam view from origin\n    //cam = vec3(0., 0., -1.);\n    //fragPos = spherical(pos.x * PI / 2., pos.y * PI / 2. + PI/2., 1.) + cam;\n    \n    vec3 rd = normalize(fragPos - cam);\n    //rd = normalize(ta - fragPos);\n    //rd.xz = normalize(ta - fragPos).xz;\n    //rd = mix(rd, reflect(rd, ww), 0.3);//nmc(time*10.));\n    //rd = normalize(rd);\n    //rd -= fragDelta * 0.2;\n    //rd = normalize(rd);\n    vec3 ro = cam;\n    \n    \n    float d = rayMarch(ro, rd);\n    vec3 hit = d * rd + ro;\n    vec3 normal = calcNormal(hit);\n        \n    vec3 col = pow(ENV_COL * mix(1., 0.3, uv.y), vec3(1., 0.8, 0.67));\n    \n    vec3 ld = normalize(-vec3(1., 1., 1.));\n            \n    if (d > 0.) {\n        // Blinn-Phong-esque\n        float spec = max(dot(-ld, normal), 0.);\n        bool isInShadow = false;\n        float dShadow = 0., dD = 0.01;\n        for (int i = 0; i < 80; i++) {\n            dShadow += dD;\n            float sd = sdScene(hit - ld * dShadow);\n            if (sd < 0.) {\n                isInShadow = true;\n                break;\n            }\n            if (dShadow > MAX_DIST) break;\n        }\n        if (isInShadow) spec = 0.;\n        col = SPEC_COL * mix(0.1, 1., spec);\n        if (!isInShadow) {\n            vec3 refl = reflect(-ld, normal);\n            float reflection = max(dot(refl, rd), 0.);\n            reflection = pow(reflection, 500.);\n            col += vec3(1.) * reflection * 1.;\n        }\n    }\n   \n    col = pow(col, vec3(0.4545)); // gamma\n    col *= 0.9;\n    col = clamp(col, 0.0, 1.0);\n    col = col * col * (3.0 - 2.0 * col);\n    \n        \n            aaCol += col;\n        }\n    }\n    aaCol /= float(AA * AA);\n    \n    fragColor = vec4(aaCol, 1.0);\n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}