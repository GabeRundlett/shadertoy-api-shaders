{
    "Shader": {
        "info": {
            "date": "1526387882",
            "description": "Visualization of orbits for the Mandelbrot fractal.",
            "flags": 0,
            "hasliked": 0,
            "id": "4dfcz4",
            "likes": 10,
            "name": "Fractals: Mandelbrot, Orbits",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "orbit"
            ],
            "usePreview": 0,
            "username": "4rknova",
            "viewed": 703
        },
        "renderpass": [
            {
                "code": "// by Nikos Papadopoulos, 4rknova / 2013\n// Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define ZOOM      1.5\n#define AA\t      2.\n#define ITER      128 // Max number of iterations\n#define COL_IN    vec3(0)\n#define THICKNESS (3./min(iResolution.x,iResolution.y))\n\nfloat df_circ(in vec2 p, in vec2 c, in float r)\n{\n    return abs(r - length(p - c));\n}\n\nfloat df_line(in vec2 p, in vec2 a, in vec2 b)\n{\n    vec2 pa = p - a, ba = b - a;\n\tfloat h = clamp(dot(pa,ba) / dot(ba,ba), 0., 1.);\t\n\treturn length(pa - ba * h);\n}\n\nfloat sharpen(in float d, in float w)\n{\n    float e = 1. / min(iResolution.y , iResolution.x);\n    return 1. - smoothstep(-e, e, d - w);\n}\n\nfloat orbit(vec2 p, vec2 m)\n{\n    vec2 z_new = vec2(0); \n    vec2 z_old = vec2(0);\n    float line = 0.0;\n    \n\tfor (int i = 0; i < ITER; ++i) {  \n\t\tz_old = z_new;\n        z_new = vec2(z_new.x * z_new.x - z_new.y * z_new.y, 2. * z_new.x * z_new.y) + m;\n        \n        line += sharpen(df_line(p, z_old, z_new), THICKNESS);\n        \n\t\tif (dot(z_new,z_new) > 4.) break;\n\t}\n    \n\treturn line;    \n}\n\nvec3 fractal(vec2 p)\n{        \n    vec2 z = vec2(0);\n    \n\tfor (int i = 0; i < ITER; ++i) {  \n\t\tz = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + p;\n                \n\t\tif (dot(z,z) > 4.) {\n\t\t\tfloat s = .125662 * float(i);\n\t\t\treturn vec3(cos(s + .9), cos(s + .3), cos(s + .2)) * .4 + .6;\n\t\t}  \n\t}\n\n    return COL_IN;\n\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 mc = iMouse.xy / iResolution.xy;\n\n    \n\tvec2 c = (uv * 2. - 1.)\n\t\t   * vec2(iResolution.x / iResolution.y, 1)\n\t\t   * ZOOM - vec2(.5,0.);\n    \n    vec2 m = (mc * 2. - 1.)\n\t\t   * vec2(iResolution.x / iResolution.y, 1)\n\t\t   * ZOOM - vec2(.5,0.);\n    \n    \n    vec3 col = vec3(0);\n    \n#ifdef AA\n    // Antialiasing via supersampling\n    float e = 1. / min(iResolution.y , iResolution.x);    \n    for (float i = -AA; i < AA; ++i) {\n        for (float j = -AA; j < AA; ++j) {\n    \t\tcol += fractal(c + ZOOM * vec2(i, j) * (e/AA)) / (4.*AA*AA);\n        }\n    }\n#else\n    col = fractal(c);\n#endif /* AA */\n    \n\tcol += vec3(orbit(c,m));\n    \n    vec3 res = col.rgb;\n\tfloat pointer = sharpen(df_circ(c, m, .01 + .03 * abs(cos(10.*iTime)) *.4), THICKNESS);\n    \n    if (pointer > 0.9) res = vec3(pointer);    \n    fragColor = vec4(res, 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}