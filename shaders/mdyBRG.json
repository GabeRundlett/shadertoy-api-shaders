{
    "Shader": {
        "info": {
            "date": "1698321023",
            "description": "Hello this the result of the Swetugg live coding session called\n'Literally beautiful code' 2023-10-26 in Gothenburg, Sweden.\n\nThanks to the organizers for a great event and thanks to all that\nwatched me hack some shader code live.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "mdyBRG",
            "likes": 20,
            "name": "Swetugg presentation shader",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 459
        },
        "renderpass": [
            {
                "code": "// CC0: Swetugg presentation shader\n\n// Hello this the result of the Swetugg live coding session called\n//  'Literally beautiful code' 2023-10-26 in Gothenburg, Sweden.\n\n// Thanks to the organizers for a great event and thanks to all that\n//  watched me hack some shader code live.\n\n// Here are some useful links to help you get started.\n\n// ShaderToy - A great place to code and learn together with a great\n//  community - You are here!\n\n// IQ Articles - A great resource by the great IQ, I visit this very often\n//  - https://iquilezles.org/articles\n\n// The Art of Code - A great YT channel by the great BigWings that \n//  helps you get started with very basics of shader programming\n//  - https://www.youtube.com/@TheArtofCodeIsCool\n\n// An Introduction Shader Art Coding - By the great kishimisu\n//  - https://www.youtube.com/@kishimisu\n\n// Windows Terminal Shader Gallery - You know you want shaders \n//  in windows terminal by me\n//   - https://github.com/mrange/windows-terminal-shader-gallery\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r ;\n}\n\nvec3 palette(float a) {\n  return 0.5+0.5*sin(vec3(0,1,2) + a);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat star5(in vec2 p, in float r, in float rf) {\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/iResolution.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= iResolution.x/iResolution.y;\n  vec3 col = vec3(0.0, 0. ,0.0);\n  \n  for (int i=0; i<5;++i) { \n    vec2 p0 = p;\n    float itime = iTime+1.2*float(i);\n    p0.x += sin(itime);\n    float b = itime;\n    b = fract(b);\n    b -= 0.5;\n    b *= b;\n    b *= 2.0;\n    p0.y += b;\n  \n    p0 *= ROT(8.0*cos(itime));  \n    float d = star5(p0, 0.5, 0.5);\n    float od = abs(d)-0.015;\n    \n    if (d < 0.0) {\n      col = palette(itime-8.0*d);\n    }\n    \n    if (od < 0.0) {\n      col = vec3(q.y);\n    }\n  }\n  //col.x += sin(40.0*d);\n  col = sqrt(col);\n  \n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}