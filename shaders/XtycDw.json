{
    "Shader": {
        "info": {
            "date": "1536422694",
            "description": "This shader shows a grid of four-dimensional spheres using raymarching. Time corresponds the W value, sort of.",
            "flags": 0,
            "hasliked": 0,
            "id": "XtycDw",
            "likes": 6,
            "name": "4DRaymarching",
            "published": 3,
            "tags": [
                "raymarching",
                "4d"
            ],
            "usePreview": 0,
            "username": "Spyion",
            "viewed": 589
        },
        "renderpass": [
            {
                "code": "\nfloat udBox( vec4 p, vec4 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\n#define gridSize 200\nvec4 c = vec4(gridSize,gridSize,gridSize,gridSize /2);\nfloat sdSphere( vec4 p, float s )\n{\n    \n  return abs(length(mod(p, c) - 0.5f*c)-s);\n}\nfloat getDistance(vec4 point){\n    \treturn sdSphere(point, 25.);\n}\n\nstruct HitData{\n\tfloat distance;\n    float normal;\n};\nHitData rayMarch(vec4 point, vec4 dir){\n    HitData hd;\n\tfloat marched = 0.;\n    float epsilon = 0.1;\n    float lastDistance = 0.;\n    while(marched < 10000.){\n    \tfloat distance = getDistance(point);\n        marched += distance;\n        point += dir*distance;\n        if(distance < epsilon){\n            return HitData(marched, 1.-distance/lastDistance);\n        }\n        lastDistance = distance;\n        \n    }return HitData(1000.,1.);\n}\nvec4 eye = vec4(0,0,0,-1);\nfloat layers = 24.;\nvec4 getPosition(vec2 coord, float layer){\n    return vec4(coord.x / iResolution.x * 2. - 1., (coord.y/iResolution.y * 2. - 1.) * iResolution.y / iResolution.x, layer/layers * 2. - 1.,0.);\n}\n\nfloat color(float d){\n    return d / 1000.;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    eye = vec4(0, 0 ,0, - 1) * 2.;\n    //spheres[0] = vec3(sin(iTime)*20.,0,20.);\n    //radii[0] = abs(sin(iTime * 1.3f + 20.)) * 10.;\n    float l = (fract(iTime/50.)*2.-1.)*layers;\n    vec4 pos = getPosition(fragCoord, l);\n    vec4 dir = normalize(pos - eye);\n    HitData hd = rayMarch(pos, dir);\n\tfloat amount = color(hd.distance) * hd.normal;\n    amount = hd.normal;\n    fragColor = vec4(amount,amount,amount,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}