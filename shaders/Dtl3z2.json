{
    "Shader": {
        "info": {
            "date": "1672068282",
            "description": "Basic but cool looking SDF :)",
            "flags": 0,
            "hasliked": 0,
            "id": "Dtl3z2",
            "likes": 6,
            "name": "Wave Propagation - Distance 2D",
            "published": 3,
            "tags": [
                "2d",
                "distancefield",
                "wave",
                "sdf",
                "circle",
                "distance"
            ],
            "usePreview": 0,
            "username": "MysteryPancake",
            "viewed": 222
        },
        "renderpass": [
            {
                "code": "const float TAU = 6.28318530;\n\n// Ping-pong triangle waveform\nvec2 triangle(vec2 p, vec2 period) {\n    return abs(mod(p, period) - period * 0.5);\n}\n\n// For sharper transitions than regular cos\nfloat sharpCos(float x, float smoothness) {\n    float s = cos(x);\n    return s / sqrt(smoothness + s * s);\n}\n\n// Inefficient but simple SDF, uses 10 grids\nfloat waveSDF(vec2 p) {\n\n    float d = 9999.9;\n    for (float i = 0.0; i < 1.0; i += 0.1) {\n        // Base distortion\n        float distort = cos(4.0 * iTime + i * TAU) * 0.1;\n        \n        // Transition between different Y offsets\n        float a = sharpCos(iTime, 0.02) * 0.5 + 0.5;\n        float b = sharpCos(iTime * 0.5, 0.01) * 0.5 + 0.5;\n        vec2 offset = vec2(i + distort, a * i - b * distort);\n        \n        // Repeat domain using a grid\n        vec2 tri = triangle(p + offset, vec2(1.0, 0.5));\n        \n        // Use a sphere SDF\n        d = min(d, length(tri));\n    }\n    return d - 0.05;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n\t// Normalized coordinates, ripped from Inigo Quilez\n\tvec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\tvec2 m = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n\t\n\tfloat d = waveSDF(p);\n\n\t// Coloring, ripped from Inigo Quilez\n\tvec3 col = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcol *= 1.0 - exp(-6.0 * abs(d));\n\tcol *= 0.8 + 0.2 * cos(120.0 * d);\n\tcol = mix(col, vec3(1.0), 1.0 - smoothstep(0.0, 0.015, abs(d)));\n\n\tif (iMouse.z > 0.001) {\n\t\td = waveSDF(m);\n\t\tcol = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, abs(length(p - m) - abs(d)) - 0.0025));\n\t\tcol = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, length(p - m) - 0.015));\n\t}\n    \n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}