{
    "Shader": {
        "info": {
            "date": "1567031789",
            "description": "PolyBLEP is a technique to band-limit waves (saw and squares in this example) so that they alias less, with a polynomial. The shader plays the raw waves (red) which have lots of aliasing, and band-limited/filtered waves (yellow).",
            "flags": 8,
            "hasliked": 0,
            "id": "wljXWy",
            "likes": 18,
            "name": "PolyBLEP",
            "published": 3,
            "tags": [
                "sound",
                "filter",
                "saw"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 2185
        },
        "renderpass": [
            {
                "code": "// Inigo Quilez 2019\n    \n// PolyBLEP is a technique to band-limit waves (saw and squares\n// in this example) so that they alias less, with a polynomial.\n// I first heard it from mmalex.\n//\n// The shader plays the raw waves (red) and band-limited waves\n// (yellow) alternatively.\n// \n// Code adapted from \n// http://www.martin-finke.de/blog/articles/audio-plugins-018-polyblep-oscillator/\n\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  p = fragCoord/iResolution.y;\n    float px = 1.0/iResolution.y;\n    float mx = iResolution.x/iResolution.y;\n \n    float o    = 2.0*tau*p.x/mx;\n    float dodx = 2.0*tau* px/mx;\n    float a = 0.1;\n\n    vec3 col = vec3(0.15);\n\n    vec2 v = smoothstep(-0.2,0.2,sin((iTime+1.0)*vec2(1.0,0.5)) );\n    \n    // axis\n    {\n    float d = min( abs(p.y-0.25), abs(p.y-0.75) );\n    col = mix( col, vec3(0.5), 1.0-smoothstep(0.5*px,1.5*px,d) );\n    }\n\n\t// bandlimited saw: yellow\n    {\n    float d = 1e20;\n    for( int i=-8; i<=8; i++ )\n    {\n    float o0 = o+dodx*(float(i+0));\n    float o1 = o+dodx*(float(i+1));\n\tfloat y0 = 0.75 + a*wave( o0, dodx, vec2(0.0,v.y) );\n    float y1 = 0.75 + a*wave( o1, dodx, vec2(0.0,v.y) );\n    d = min(d,sdLine(p,vec2(p.x+px*float(i+0),y0),\n                       vec2(p.x+px*float(i+1),y1) ));\n    }\n    col = mix( col, 0.5*vec3(1.0,0.9,0.2), 1.0-smoothstep(1.0*px,2.0*px,d) );\n    col += (1.0-v.x)*vec3(1.0,0.6,0.0)*(1.0-smoothstep(0.0,12.0*px,d) );\n    }\n\n    // saw: red\n    {\n    float d = 1e20;\n    for( int i=-8; i<=8; i++ )\n    {\n    float o0 = o+dodx*(float(i+0));\n    float o1 = o+dodx*(float(i+1));\n\tfloat y0 = 0.25 + a*wave( o0, dodx, vec2(1.0,v.y) );\n    float y1 = 0.25 + a*wave( o1, dodx, vec2(1.0,v.y) );\n    d = min(d,sdLine(p,vec2(p.x+px*float(i+0),y0),\n                       vec2(p.x+px*float(i+1),y1) ));\n    }\n    col = mix( col, 0.5*vec3(1.0,0.2,0.1), 1.0-smoothstep(1.0*px,2.0*px,d) );\n    col += v.x*vec3(1.0,0.1,0.0)*(1.0-smoothstep(0.0,8.0*px,d) );\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Inigo Quilez 2019\n\n#define DD(a,b) n=(s>=a)?ivec2(a,b):n;\n\nvec2 mainSound( in int samp, float time )\n{\n  time = mod( time+1.0, 32.0 );\n\n  // tune\n  const float tempo = 4.2;\n  int s = int(floor(time*tempo));\n  ivec2 n = ivec2(0);\n  DD( 8,70) DD( 9,62) DD(10,67) DD(11,70) DD(12,72) DD(13,65) DD(14,69) DD(15,70)\n  DD(17,67) DD(18,70) DD(19,74) DD(20,75) DD(21,67) DD(22,74) DD(23,72) DD(24,70)\n  DD(25,62) DD(26,67) DD(27,70) DD(28,72) DD(29,65) DD(30,69) DD(31,70) DD(33,67)\n  DD(34,70) DD(35,74) DD(36,75) DD(37,67) DD(38,74) DD(39,72) DD(40,70) DD(41,62)\n  DD(42,67) DD(43,70) DD(44,72) DD(45,65) DD(46,69) DD(47,70) DD(49,67) DD(50,70)\n  DD(51,74) DD(52,75) DD(53,67) DD(54,74) DD(55,72) DD(56,70) DD(57,62) DD(58,67)\n  DD(59,70) DD(60,69) DD(61,60) DD(62,65) DD(63,67) DD(65,58) DD(66,65) DD(67,67)\n  DD(69,65) DD(70,67) DD(71,69) DD(72,70) DD(73,62) DD(74,67) DD(75,70) DD(76,72)\n  DD(77,65) DD(78,69) DD(79,70) DD(81,67) DD(82,70) DD(83,74) DD(84,75) DD(85,67)\n  DD(86,74) DD(87,72) DD(88,70) DD(89,62) DD(90,67) DD(91,70) DD(92,72) DD(93,65)\n  DD(94,69) DD(95,70) DD(97,67) DD(98,70) DD(99,74) DD(100,75) DD(101,67) DD(102,74)\n  DD(103,72) DD(104,70) DD(105,62) DD(106,67) DD(107,70) DD(108,72) DD(109,65) DD(110,69)\n  DD(111,70) DD(113,67) DD(114,70) DD(115,74) DD(116,75) DD(117,67) DD(118,74) DD(119,72)\n  DD(120,70) DD(121,62) DD(122,67) DD(123,70) DD(124,69) DD(125,60) DD(126,65) DD(127,67)\n  DD(208,70) DD(209,62) DD(210,67) DD(211,70) DD(212,72) DD(213,65) DD(214,69) DD(215,70)\n  DD(217,67) DD(218,70) DD(219,74) DD(220,75) DD(221,67) DD(222,74) DD(223,72) DD(224,70)\n  DD(225,62) DD(226,67) DD(227,70) DD(228,72) DD(229,65) DD(230,69) DD(231,70) DD(233,67)\n  DD(234,70) DD(235,74) DD(236,75) DD(237,67) DD(238,74) DD(239,72) DD(240,70) DD(241,62)\n  DD(242,67) DD(243,70) DD(244,72) DD(245,65) DD(246,69) DD(247,70) DD(249,67) DD(250,70)\n  DD(251,74) DD(252,75) DD(253,67) DD(254,74) DD(255,72) DD(256,70) DD(257,62) DD(258,67)\n  DD(259,70) DD(260,69) DD(261,60) DD(262,65) DD(263,67) DD(416,62) DD(416,65) DD(416,69)\n  DD(430,62) DD(430,70) DD(430,67) DD(432,62) DD(432,69) DD(432,65) DD(446,62) DD(446,70)\n  DD(446,67) DD(448,62) DD(448,69) DD(448,65) DD(462,62) DD(462,70) DD(462,67) DD(464,62)\n  DD(464,69) DD(464,65) DD(480,70) DD(481,62) DD(482,67) DD(483,70) DD(484,72) DD(485,65)\n  DD(486,69) DD(487,70) DD(489,67) DD(490,70) DD(491,74) DD(492,75) DD(493,67) DD(494,74)\n  DD(495,72) DD(496,70) DD(497,62) DD(498,67) DD(499,70) DD(500,72) DD(501,65) DD(502,69)\n  DD(503,70) DD(505,67) DD(506,70) DD(507,74) DD(508,75) DD(509,67) DD(510,74) DD(511,72)\n  DD(512,70) DD(513,62) DD(514,67) DD(515,70) DD(516,72) DD(517,65) DD(518,69) DD(519,70)\n  DD(521,67) DD(522,70) DD(523,74) DD(524,75) DD(525,67) DD(526,74) DD(527,72) DD(528,70)\n  DD(529,62) DD(530,67) DD(531,70) DD(532,69) DD(533,60) DD(534,65) DD(535,67) DD(544,70)\n  DD(545,62) DD(546,67) DD(547,70) DD(548,72) DD(549,65) DD(550,69) DD(551,70) DD(553,67)\n  DD(554,70) DD(555,74) DD(556,75) DD(557,67) DD(558,74) DD(559,72) DD(560,70) DD(561,62)\n  DD(562,67) DD(563,70) DD(564,72) DD(565,65) DD(566,69) DD(567,70) DD(569,67) DD(570,70)\n  DD(571,74) DD(572,75) DD(573,67) DD(574,74) DD(575,72) DD(576,70) DD(577,62) DD(578,67)\n  DD(579,70) DD(580,72) DD(581,65) DD(582,69) DD(583,70) DD(585,67) DD(586,70) DD(587,74)\n  DD(588,75) DD(589,67) DD(590,74) DD(591,72) DD(592,70) DD(593,62) DD(594,67) DD(595,70)\n  DD(596,69) DD(597,60) DD(598,65) DD(599,67) DD(744,62) DD(744,65) DD(744,69) DD(758,62)\n  DD(758,70) DD(758,67) DD(760,62) DD(760,69) DD(760,65) DD(774,62) DD(774,70) DD(774,67)\n  DD(776,62) DD(776,69) DD(776,65) DD(790,62) DD(790,70) DD(790,67) DD(792,62) DD(792,69)\n  DD(792,65) DD(808,70) DD(809,62) DD(810,67) DD(811,70) DD(812,72) DD(813,65) DD(814,69)\n  DD(815,70) DD(817,67) DD(818,70) DD(819,74) DD(820,75) DD(821,67) DD(822,74) DD(823,72)\n  DD(824,70) DD(825,62) DD(826,67) DD(827,70) DD(828,72) DD(829,65) DD(830,69) DD(831,70)\n  DD(833,67) DD(834,70) DD(835,74) DD(836,75) DD(837,67) DD(838,74) DD(839,72) DD(840,70)\n  DD(841,62) DD(842,67) DD(843,70) DD(844,72) DD(845,65) DD(846,69) DD(847,70) DD(849,67)\n  DD(850,70) DD(851,74) DD(852,75) DD(853,67) DD(854,74) DD(855,72) DD(856,70) DD(857,62)\n  DD(858,67) DD(859,70) DD(860,69) DD(861,60) DD(862,65) DD(863,67) DD(872,70) DD(873,62)\n  DD(874,67) DD(875,70) DD(876,72) DD(877,65) DD(878,69) DD(879,70) DD(881,67) DD(882,70)\n  DD(883,74) DD(884,75) DD(885,67) DD(886,74) DD(887,72) DD(888,70) DD(889,62) DD(890,67)\n  DD(891,70) DD(892,72) DD(893,65) DD(894,69) DD(895,70) DD(897,67) DD(898,70) DD(899,74)\n  DD(900,75) DD(901,67) DD(902,74) DD(903,72) DD(904,70) DD(905,62) DD(906,67) DD(907,70)\n  DD(908,72) DD(909,65) DD(910,69) DD(911,70) DD(913,67) DD(914,70) DD(915,74) DD(916,75)\n  DD(917,67) DD(918,74) DD(919,72) DD(920,70) DD(921,62) DD(922,67) DD(923,70) DD(924,69)\n  DD(925,60) DD(926,65) DD(927,67) DD(931,67) DD(935,67) DD(939,67) \n\n  // lower one octave\n  n.y -= 12;\n      \n  // compute note frequency and time  \n  float f = 440.0*pow( 2.0, float(n.y-69)/12.0 );\n  float t = time - float(n.x)/tempo;\n  if( n.x==0 ) return vec2(0.0);\n\n  // prepare wave parameters\n  float w = tau*f;\n  float dwdt = w/iSampleRate; // derivative\n    \n  // mix between bandlimited and raw saw waves  \n  vec2 v = smoothstep(-0.2,0.2,sin(time*vec2(1.0,0.5)) );\n    \n  // build instrument    \n  float y  = 0.4*wave(1.00*w*t,1.00*dwdt,v)*exp(-5.0*t);\n        y += 0.3*wave(2.01*w*t,2.01*dwdt,v)*exp(-7.0*t);\n        y += 0.2*wave(4.01*w*t,4.01*dwdt,v)*exp(-9.0*t);\n        y += 0.1*wave(8.01*w*t,8.01*dwdt,v)*exp(-11.0*t);\n\n  // adjust volume    \n  y *= 1.5-0.5*v.x; // bandlimited signal has a bit less energy\n  y *= 1.0+0.4*v.y; // squares have more energy than saw waves\n    \n  return 0.65*vec2( y );\n}   \n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "// Inigo Quilez 2019\n\nfloat pblep(in float t, in float dt)\n{\n    if( t<dt)           { t=t/dt;       return t+t-t*t-1.0; }\n    else if( t>1.0-dt ) { t=(t-1.0)/dt; return t*t+t+t+1.0; }\n    return 0.0;\n}\n\n/*\n// branchless version\nfloat pblep(in float t, in float dt)\n{\n    float s = sign(t-0.5);\n    t = min((0.5-s*(t-0.5))/dt,1.0);    \n    return s*(t*t - 2.0*t + 1.0);\n}\n*/\n\nconst float pi = 3.1415927;\nconst float tau = 6.283185;\n\n// saw wave\nfloat sawRaw( in float p, in float dpdt )\n{\n    float x = mod(p,tau)/tau;\n    return 2.0*x-1.0;\n}\n\n// band limited saw wave\nfloat sawLim( in float p, in float dpdt )\n{\n    float x = mod(p,tau)/tau;\n    return 2.0*x-1.0 - pblep(x,dpdt);\n}\n\n// square wave\nfloat squareRaw( in float p, in float dpdt )\n{\n    float t = fract(p/tau);\n    return sign(0.5-t);\n}\n\n// band limited square wave\nfloat squareLim( in float p, in float dpdt )\n{\n    float t = fract(p/tau);\n    return sign(0.5-t) + pblep(t,dpdt) - pblep(fract(t+0.5),dpdt);\n}\n\n//----------------------------\n\nfloat wave( float x, float dxdt, in vec2 v )\n{\n    vec2 a = vec2( squareLim( x, dxdt ),\n                   squareRaw( x, dxdt ) );\n    vec2 b = vec2( sawLim( x, dxdt ),\n                   sawRaw( x, dxdt ) );\n    \n    return mix( mix( a.x, a.y, v.x ),\n                mix( b.x, b.y, v.x ), v.y );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}