{
    "Shader": {
        "info": {
            "date": "1400764720",
            "description": "Demonstrating how a pseudo-polar mapping can be derived without atan or other trigonometric functions. Approximation on the left, atan(y,x) on the right.",
            "flags": 0,
            "hasliked": 0,
            "id": "XdXSWN",
            "likes": 22,
            "name": "Pseudo-Polar Mapping",
            "published": 3,
            "tags": [
                "2d",
                "normal",
                "mapping",
                "polar",
                "packing",
                "pseudopolar"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 1637
        },
        "renderpass": [
            {
                "code": "// pseudopolar mapping\n// developed by Leonard Ritter\n\n// public domain\n\n//#define ALTMETHOD\n\n#ifndef ALTMETHOD\n\nfloat pack_normal(vec2 n) {\n    vec2 s = sign(n);\n    return (n.y*s.x - s.y*(n.x + s.x - 2.0)) * 0.25;\n}\n\nvec2 unpack_normal(float x) {\n    float a = x * 2.0;\n    vec2 s;\n    s.x = sign(a);\n    s.y = sign(1.0 - a*s.x);\n    vec2 q;\n    q.y = fract(a) - 0.5;\n    q.x = sqrt(0.5 - q.y*q.y);\n    return q*mat2(s.y,-s.x,s.xy);\n}\n\n#else\n\n// using a better approximation for cos(x) with normalized x\n// cos(x) = 20 / (x*x + 4) - 4\n// based on\n// https://en.wikipedia.org/wiki/Bhaskara_I%27s_sine_approximation_formula\n\nfloat pack_normal(vec2 n) {\n    vec2 s = sign(n);\n    return s.y*(s.x * (sqrt(5.0/(n.x*s.x + 4.0) - 1.0) - 0.5) + 0.5);\n}\n\nvec2 unpack_normal(float x) {\n    float si = fract(x + 0.5)*2.0 - 1.0;\n    float cx = 20.0 / (si*si + 4.0) - 4.0;\n    float cy = sqrt(1.0 - cx*cx);\n    return vec2(cx,cy) * sign(0.5-fract(vec2(0.25,0.0) + x*0.5));\n}\n\n#endif\n\n// returns factors of PI (-1..1) and radius\nvec2 pseudopolar(vec2 p) {\n\tfloat r = length(p);\n    return vec2(pack_normal(p / r), r);\n}\n\nvec2 invpseudopolar(vec2 pl) {\n    return pl.y*unpack_normal(pl.x);\n}\n\nvec3 hue2rgb(float hue) {\n    return clamp( \n        abs(mod(hue * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, \n        0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (fragCoord.xy / iResolution.xy)*2.0-1.0;\t\n\tp.x *= iResolution.x/iResolution.y;\n\t\n    vec2 pl = pseudopolar(p);\n    \n    // compute equivalent normalized (accurate) angle for comparison\n    float ra = atan(p.y, p.x) / 3.1415926535898;\n    \n    float va = (p.x < 0.0)?pl.x:ra;\n    \n    // logarithmic scaling of radius for zoom effect\n    float rs = log(pl.y);\n    vec2 uv = vec2(\n       abs(mod(va * 3.0 + rs * 1.0,2.0) - 1.0), \n\t\tabs(mod(rs - iTime * 0.5, 2.0) - 1.0));\n    \n    vec3 color = texture(iChannel0, uv).rgb * min(abs(p.x)*64.0, 1.0);\n    // uncomment to see error margin\n    //color = vec3(abs(pl.x - ra) * 1000.0, 0.0, 0.0);\n    // uncomment for hue spiral\n    //color = hue2rgb(pl.x + pl.y*2.0);\n    //vec2 unq = invpseudopolar(pl);\n    //color = vec3(abs(p - unq)*10000.0, 0.0);\n    //color = vec3(unq*0.5+0.5, 0.0);\n    //color = hue2rgb(pl.x * 4.0) * (pl.x * 0.5 + 0.5);\n    \n\tfragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}