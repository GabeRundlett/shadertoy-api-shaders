{
    "Shader": {
        "info": {
            "date": "1577998162",
            "description": "Making trees and parallax",
            "flags": 0,
            "hasliked": 0,
            "id": "wtdGWl",
            "likes": 10,
            "name": "Tree Tutorial",
            "published": 3,
            "tags": [
                "tutorial",
                "parallax",
                "trees",
                "snow",
                "winter",
                "boxcutting"
            ],
            "usePreview": 0,
            "username": "specialsaucewc",
            "viewed": 883
        },
        "renderpass": [
            {
                "code": "#define S(a, b, t) smoothstep(a,b,t)\n#define LAYER_COUNT 10.\n#define MOON_SIZE .15\n#define TREE_COL vec3(.8, .8, 1.)\n#define ORBIT_SPEED .025\n#define SCROLL_SPEED .3\n#define ROT -0.785398\n#define ZOOM .4\n#define STAR_SPEED .25\n\nfloat N11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat N21(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat DistLine(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float t = clamp(dot(pa, ba)/ dot(ba, ba), 0., 1.);\n    return length(pa - ba*t);\n}\n\n\nfloat DrawLine(vec2 p, vec2 a, vec2 b) {\n    float d = DistLine(p, a, b);\n    float m = S(.00125, .000001, d);\n    float d2 = length(a-b);\n    m *= S(1., .5, d2) + S(.04, .03, abs(d2-.75));\n    return m;\n}\n\nfloat ShootingStar(vec2 uv) {    \n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n    float h = N21(id);\n    \n    float line = DrawLine(gv, vec2(0., h), vec2(.1, h));\n    float trail = S(.12, .0, gv.x);\n\t\n    return line * trail;\n}\n\nfloat LayerShootingStars(vec2 uv) {\n    float t = iTime * STAR_SPEED;\n    vec2 rv1 = vec2(uv.x - t, uv.y + t);\n    rv1.x *= 1.05;\n    \n    float r = 3. * ROT;\n    float s = sin(r);\n    float c = cos(r);\n    mat2 rot = mat2(c, -s, s, c);\n    rv1 *= rot;\n    rv1 *= ZOOM * .9;\n    \n    vec2 rv2 = uv + t * 1.2;\n    rv2.x *= 1.05;\n    \n    r = ROT;\n    s = sin(r);\n    c = cos(r);\n    rot = mat2(c, -s, s, c);\n    rv2 *= rot;\n    rv2 *= ZOOM * 1.1;\n    \n    float star1 = ShootingStar(rv1);\n    float star2 = ShootingStar(rv2);\n    return clamp(0., 1., star1 + star2);\n}\n\nfloat GetHeight(float x) {\n    return sin(x*.412213)+sin(x)*.512347;\n}\n\nfloat TaperBox(vec2 p, float wb, float wt, float yb, float yt, float blur) {\n    //bottom edge\n    float m = S(-blur, blur, p.y - yb);\n    //top edge\n    m *= S(blur, -blur, p.y - yt);\n    //mirror x to get both edges\n    p.x = abs(p.x);\n    //side edges\n    // 0 p.y = yb 1 p.y = yt\n    float w = mix(wb, wt, (p.y - yb) / (yt - yb));\n    m *= S(blur, -blur, p.x - w);\n    return m;\n}\n\nvec4 Tree(vec2 uv, vec3 col, float blur) {\n    float m = TaperBox(uv, .03, .03, -.05, .25, blur); //trunk\n    m += TaperBox(uv, .2, .1, .25, .5, blur); //canopy 1\n    m += TaperBox(uv, .15, .05, .5, .75, blur); //canopy 2\n    m += TaperBox(uv, .1, .0, .75, 1., blur); //top\n    \n    blur *= 3.;\n    float shadow = TaperBox(uv-vec2(.2,0.), .1, .5, .15, .253, blur);\n    shadow += TaperBox(uv+vec2(.25,0.), .1, .5, .45, .503, blur);\n    shadow += TaperBox(uv-vec2(.25,0.), .1, .5, .7, .753, blur);\n    col -= shadow*.8;\n    \n    return vec4(col, m);\n}\n\nvec4 Layer(vec2 uv, float blur) {\n    vec4 col = vec4(0);\n    float id = floor(uv.x);\n    \n    //random [-1, 1]\n    float n = N11(id)*2.-1.;\n    float x = n*.3;\n    float y = GetHeight(uv.x);\n    \n    //ground\n    float ground = S(blur, -blur, uv.y-y);\n    col += ground;\n    \n    y = GetHeight(id + .5 - x);\n    \n    //vertical grid\n    uv.x = fract(uv.x)-.5;\n    //\t\t\t\t\t offset\t\tscale tree size\t\tcolor\n    vec4 tree = Tree((uv+vec2(x,-y))*vec2(1, 1.+n*.2), vec3(1), blur);\n    \n    col = mix(col, tree, tree.a);\n    col.a = max(ground, tree.a);\n    return col;\n}\n\nvec2 MoonPos() {\n    float t = iTime * ORBIT_SPEED;\n    return vec2(sin(t), cos(t))/2.;\n}\n\nvec4 MoonGlow(vec2 uv) {\n    vec2 moonPos = MoonPos();\n    float md = length(uv-(moonPos - vec2(.07, 0.01)));\n    float moon = S(.1, -.01, md-MOON_SIZE*8.);\n    moon = mix(0., moon, clamp((moonPos.y + .2)*3., 0., 1.));\n    \n    vec4 col = vec4(moon);\n    md = clamp(1.-md, 0., 1.);\n    md *= md;\n    col.rgb *= md;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    vec2 M = (iMouse.xy/iResolution.xy)*2.-1.;\n    float t = iTime * SCROLL_SPEED;\n    float blur = .005;\n    \n    float twinkle = dot(length(sin(uv+t)), length(cos(uv*vec2(22., 6.7)-t*3.)));\n    twinkle = sin(twinkle*5.)*.5+.5;\n    float stars = pow(N21(uv*1000.), 1024.)*twinkle;\n    vec4 col = vec4(stars);\n    \n    vec2 moonPos = MoonPos();\n    float moon = S(.01, -.01, length(uv-moonPos)-MOON_SIZE);\n    col *= 1.-moon;\n    moon *= S(-.01, .05, length(uv-(moonPos+vec2(.1,.05)))-MOON_SIZE);\n    col += moon;\n    \n    col += LayerShootingStars(uv);\n    \n    vec4 layer;\n    for (float i=0.; i <1.; i+=1./LAYER_COUNT) {\n        float scale = mix(30., 1., i);\n        blur = mix(.05, .005, i);\n        layer = Layer(uv*scale+vec2(t+i*100.,i)-M, blur);\n        layer.rgb *= (1.-i) * TREE_COL;\n        col = mix(col, layer, layer.a);\n    }\n    col += MoonGlow(uv);\n    \n    layer = Layer(uv+vec2(t,1.)-M, .07);\n    col = mix(col, layer*.05, layer.a);\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}