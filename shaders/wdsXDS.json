{
    "Shader": {
        "info": {
            "date": "1552080237",
            "description": "Flight over an endless 'plane' of tiles breaking up and aligning again. If you want to 'look behind the scene' with regards to the bloom-effect, set SHOW_BUFFERS to true.",
            "flags": 32,
            "hasliked": 0,
            "id": "wdsXDS",
            "likes": 15,
            "name": "Wavy Flippidy-Flop Tiles",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "spheretracing",
                "bloom",
                "pbr",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "MacSlow",
            "viewed": 1623
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Wavy flippidy-flop tiles... a flight over an endless 'plane' of tiles\n// breaking up and aligning again.\n//\n// Copyright 2019 Mirco M端ller\n//\n// Author(s):\n//   Mirco \"MacSlow\" M端ller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// Here all buffers are put together\n\nconst bool SHOW_BUFFERS = false;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2. - 1.;\n\n    vec3 base = texture (iChannel0, fragCoord / iChannelResolution[0].xy).rgb;\n    vec3 intensity = texture (iChannel1, fragCoord / iChannelResolution[1].xy).rgb;\n    vec3 bloomFirst = texture (iChannel2, fragCoord / iChannelResolution[2].xy).rgb;\n    vec3 bloomSecond = texture (iChannel3, fragCoord / iChannelResolution[3].xy).rgb;\n\n    vec3 col = base + 3.*bloomSecond;\n    col = sqrt (col);\n\n    if (SHOW_BUFFERS) {\n        if (uv.y < -.5) {\n            fragColor = vec4 (base, 1.);\n        } else if (uv.y < .0) {\n            fragColor = vec4 (intensity, 1.);\n        } else if (uv.y < .5){\n            fragColor = vec4 (bloomSecond, 1.);\n    \t} else {\n    \t\tfragColor = vec4 (col, 1.);\n    \t}\n    } else {\n\t\tfragColor = vec4 (col, 1.);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Wavy flippidy-flop tiles... a flight over an endless 'plane' of tiles\n// breaking up and aligning again.\n//\n// Copyright 2019 Mirco M端ller\n//\n// Author(s):\n//   Mirco \"MacSlow\" M端ller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// here the base image is generated\n\nconst int MAX_ITER    = 128;\nconst float STEP_SIZE = .4;\nconst float EPSILON   = .0001;\nconst float PI = 3.14159265359;\n\nfloat saturate (in float v)\n{\n\treturn clamp (v, .0, 1.);\n}\n\nmat2 r2d (in float degree)\n{\n\tfloat rad = radians (degree);\n\tfloat c = cos (rad);\n\tfloat s = sin (rad);\n\treturn mat2 (vec2 (c, s), vec2 (-s, c));\n}\n\nstruct Result {\n\tfloat d;\n\tint id;\n};\n\n// noise-related function\nfloat noise2D (in vec2 uv) \n{\n    return fract (sin (uv.x*173. + uv.y*6547.)*5647.);\n}\n\nfloat singleSmoothNoise2D (in vec2 uv, in float scale)\n{\n    vec2 lv = fract (uv*scale);\n    lv = lv*lv*(3. - 2.*lv);\n    vec2 id = floor (uv*scale);\n    vec3 col = vec3 (noise2D(uv));\n\n    float bl = noise2D (id);\n    float br = noise2D (id + vec2 (1., .0));\n    float b = mix (bl, br, lv.x);\n    float tl = noise2D (id + vec2 (.0, 1.));\n    float tr = noise2D (id + vec2 (1., 1.));\n    float t = mix (tl, tr, lv.x);\n\n    return mix (b, t, lv.y);\n}\n\nfloat smoothNoise2D (in vec2 uv) \n{\n    float color = singleSmoothNoise2D (uv, 4.);\n    color += singleSmoothNoise2D (uv, 8.)*.5;\n    color += singleSmoothNoise2D (uv, 16.)*.25;\n    color += singleSmoothNoise2D (uv, 32.)*.125;\n    color += singleSmoothNoise2D (uv, 62.)*.0625;\n\n    return color / (1. + .5 + .25 + .125 + .0625);\n}\n\n// basic sdf toolbox\nvec3 opRepeat (in vec3 p, in vec3 size)\n{\n\treturn mod (p, 2. * size) - size;\n}\n\nfloat udRoundBox (in vec3 p, in vec3 size, in float r)\n{\n    return length (max (abs (p) - (size - r), .0)) - r;\n}\n\nfloat sdSphere (in vec3 p, float r)\n{\n\treturn length (p) - r;\n}\n\nvec2 opRepeat2 (inout vec2 p, in vec2 s)\n{\n\tvec2 h = .5*s;\n\tvec2 c = floor ((p + h)/s);\n\tp = mod (p + h, s) - h;\n\treturn c;\n}\n\n// PBR toolbox\nfloat DistributionGGX (in vec3 N, in vec3 H, in float roughness)\n{\n    float a2     = roughness * roughness;\n    float NdotH  = max (dot (N, H), .0);\n    float NdotH2 = NdotH * NdotH;\n\n    float nom    = a2;\n    float denom  = (NdotH2 * (a2 - 1.) + 1.);\n    denom        = PI * denom * denom;\n\n    return nom / denom;\n}\n\nfloat GeometrySchlickGGX (in float NdotV, in float roughness)\n{\n    float nom   = NdotV;\n    float denom = NdotV * (1. - roughness) + roughness;\n\n    return nom / denom;\n}\n\nfloat GeometrySmith (in vec3 N, in vec3 V, in vec3 L, in float roughness)\n{\n    float NdotV = max (dot (N, V), .0);\n    float NdotL = max (dot (N, L), .0);\n    float ggx1 = GeometrySchlickGGX (NdotV, roughness);\n    float ggx2 = GeometrySchlickGGX (NdotL, roughness);\n\n    return ggx1 * ggx2;\n}\n\nvec3 fresnelSchlick (in float cosTheta, in vec3 F0, float roughness)\n{\n\treturn F0 + (max (F0, vec3(1. - roughness)) - F0) * pow (1. - cosTheta, 5.);\n}\n\nfloat opCombine (in float d1, in float d2, in float r)\n{\n    float h = clamp (.5 + .5 * (d2 - d1) / r, .0, 1.);\n    return mix (d2, d1, h) - r * h * (1. - h);\n}\n\nvec2 mapToScreen (in vec2 p)\n{\n    vec2 res = p;\n    res = res * 2. - 1.;\n    res.x *= iResolution.x / iResolution.y;\n    \n    return res;\n}\n\n// ray-marching stuff\nResult scene (in vec3 p)\n{\n    // floor\n\tfloat offset = -.25;\n    float ground = p.y + offset;\n\n    // repeat space and cause wave (phase)\n\tp.z += iTime;\n\tvec3 boxCenter = p;\n\tboxCenter.y -= .4;\n\tvec2 index = opRepeat2 (boxCenter.xz, vec2 (.205));\n    float phase = iTime + sin(.5*index.x) + cos(.5*index.y);\n    phase = mix (.0, phase, .5 + .5*sin (.5*iTime));\n\n    // tile geometry\n    boxCenter.y += .05*sin(2.*phase);\n\tboxCenter.yz *= r2d (20.*sin (phase));\n\tfloat box = udRoundBox (boxCenter, vec3 (.1, .01, .1), .005);\n    float d = box;\n\n    // assign material ids\n    Result res = Result (.0, 0);\n\tres.d = min (d, ground);\n    res.id = (res.d == ground) ? 1 : 2;\n    return res;\n}\n\nResult raymarch (in vec3 ro, in vec3 rd)\n{\n    Result res = Result (.0, 0);\n\n    for (int i = 0; i < MAX_ITER; i++)\n    {\n        vec3 p = ro + res.d * rd;\n        Result tmp = scene (p);\n        if (abs (tmp.d) < EPSILON*(1. + .125*tmp.d)) return res;\n        res.d += tmp.d * STEP_SIZE;\n        res.id = tmp.id;\n    }\n\n    return res;\n}\n\nvec3 normal (in vec3 p)\n{\n    vec2 e = vec2(.0001, .0);\n    float d = scene (p).d;\n    vec3 n = vec3 (scene (p + e.xyy).d - d,\n                   scene (p + e.yxy).d - d,\n                   scene (p + e.yyx).d - d);\n    return normalize(n);\n}\n\nfloat shadow2 (in vec3 ro, in vec3 rd)\n{\n    float result = 1.;\n    float t = .1;\n    for (int i = 0; i < MAX_ITER; i++) {\n        float h = scene (ro + t * rd).d;\n        if (h < 0.00001) return .0;\n        result = min (result, 8. * h/t);\n        t += h;\n    }\n\n    return result;\n}\n\n// iq's implementation of Sebastian Aaltonen's soft shadow tweak (see: shadertoy.com/view/lsKcDD)\nfloat shadow (in vec3 ro, in vec3 rd) \n{\n    float mint = .0001;\n    float tmax = 3.; \n    float res = 1.; \n    float t = mint;\n    float ph = 1e10;\n        \n    for (int i = 0; i < MAX_ITER; i++)\n    {   \n        float h = scene (ro + rd*t).d;\n        float y = (i == 0) ? .0 : h*h/(2.*ph);\n        float d = sqrt (h*h - y*y);\n        res = min (res, 10.*d/max (.0, t -y));\n        ph = h;\n     \n        t += h;\n            \n        if (res < .0001 || t>tmax) break;\n    }   \n\n    return clamp (res, .0, 1.);\n}\n\nvec3 shadePBR (in vec3 ro, in vec3 rd, in float d, in int id)\n{\n    vec3 p = ro + d * rd;\n    vec3 nor = normal (p);\n\n    // \"material\" hard-coded for the moment\n    vec3 albedo1 = vec3 (.975);\n    vec3 albedo2 = vec3 (.75, .4, .25);\n    vec3 albedo = (id == 1) ? albedo1 : albedo2;\n    float metallic  = (id == 1) ? .1 : .9;\n    float roughness = (id == 1) ? .9 : .1;\n    float ao = 1.;\n\n    // lights hard-coded as well atm\n    vec3 lightColors[2];\n    lightColors[0] = vec3 (.8, .8, .9) * 20.;\n    lightColors[1] = vec3 (.9, .8, .8) * 20.;\n\n    vec3 lightPositions[2];\n    lightPositions[0] = p + vec3 (.5, .75, -1.5);\n    lightPositions[1] = p + vec3 (-.3, .25, -.5);\n\n\tvec3 N = normalize (nor);\n    vec3 V = normalize (ro - p);\n\n    vec3 F0 = vec3 (0.04); \n    F0 = mix (F0, albedo, metallic);\n    vec3 kD = vec3(.0);\n\t\t           \n    // reflectance equation\n    vec3 Lo = vec3 (.0);\n    for(int i = 0; i < 2; ++i) \n    {\n        // calculate per-light radiance\n        vec3 L = normalize(lightPositions[i] - p);\n        vec3 H = normalize(V + L);\n        float distance    = length(lightPositions[i] - p);\n        float attenuation = 1. / (distance * distance);\n        vec3 radiance     = lightColors[i] * attenuation;\n\t        \n        // cook-torrance brdf\n        float aDirect = .125 * pow (roughness + 1., 2.);\n        float aIBL = .5 * roughness * roughness;\n        float NDF = DistributionGGX(N, H, roughness);        \n        float G   = GeometrySmith(N, V, L, roughness);      \n        vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0, roughness);\n\t        \n        vec3 kS = F;\n        kD = vec3(1.) - kS;\n        kD *= 1. - metallic;\t  \n\t        \n        vec3 nominator    = NDF * G * F;\n        float denominator = 4. * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);\n        vec3 specular     = nominator / max(denominator, .001);  \n\n        // add to outgoing radiance Lo\n        float NdotL = max(dot(N, L), 0.0);                \n        Lo += (kD * albedo / PI + specular) * radiance * NdotL; \n\t    Lo *= shadow (p, L);\n    }\n\n    vec3 ambient = (kD * albedo) * ao;\n\n    return ambient + Lo;\n}\n\nvec3 camera (in vec2 uv, in vec3 ro, in vec3 aim, in float zoom)\n{\n    vec3 camForward = normalize (vec3 (aim - ro));\n    vec3 worldUp = vec3 (.0, 1., .0);\n    vec3 camRight = normalize (cross (camForward, worldUp));\n    vec3 camUp = normalize (cross (camRight, camForward));\n    vec3 camCenter = normalize (ro + camForward * zoom);\n\n    return normalize ((camCenter + uv.x*camRight + uv.y*camUp) - ro);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalizing and aspect-correction\n\tvec2 uvRaw = fragCoord.xy/iResolution.xy;\n\tvec2 uv = uvRaw;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // set up \"camera\", view origin (ro) and view direction (rd)\n    vec3 ro = vec3 (3.*cos(.5*iTime), 3., 3.*sin(.5*iTime));\n    vec3 aim = vec3 (.0, 2., .0);\n    float zoom = 1.;\n    vec3 rd = camera (uv, ro, aim, zoom);\n\n    // do the ray-march...\n    Result res = raymarch (ro, rd);\n    float fog = 1. / (1. + res.d * res.d * .1);\n    vec3 c = shadePBR (ro, rd, res.d, res.id);\n\n    // tonemapping, \"gamma-correction\", tint, vignette\n\tc *= fog;\n\tc = c / (1. + c);\n    c = .2 * c + .8 * sqrt (c);\n    c *= vec3 (.9, .8, .7);\n    c *= .2 + .8*pow(16.*uvRaw.x*uvRaw.y*(1. - uvRaw.x)*(1. - uvRaw.y), .3);\n\n\tfragColor = vec4(c, 1.);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Wavy flippidy-flop tiles... a flight over an endless 'plane' of tiles\n// breaking up and aligning again.\n//\n// Copyright 2019 Mirco M端ller\n//\n// Author(s):\n//   Mirco \"MacSlow\" M端ller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// here the intensity/greyscale threshold image is generated\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 col = texture (iChannel0, fragCoord / iChannelResolution[0].xy).rgb;\n    float greyscale = dot (col, vec3 (.29, .59, .12));\n    col = (greyscale > .75) ? vec3 (1.) : vec3 (.0);\n\n    fragColor = vec4 (col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Wavy flippidy-flop tiles... a flight over an endless 'plane' of tiles\n// breaking up and aligning again.\n//\n// Copyright 2019 Mirco M端ller\n//\n// Author(s):\n//   Mirco \"MacSlow\" M端ller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// first blur-pass (of the intensity-image in buffer B) for the bloom\n// blur-method by anastadunbar, https://www.shadertoy.com/view/4lXXWn\n\nconst float MAX_ITER = 40.;\n\nvec3 draw(vec2 uv) {\n    return texture(iChannel0,vec2(uv.x,1.-uv.y)).rgb;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord.xy / iResolution.xy);\n    float bluramount = .01;\n    vec3 firstPass = vec3(0.);\n    for (float i = 0.; i < MAX_ITER; i++) {\n        vec2 q = vec2(cos(degrees((i/MAX_ITER)*360.)),\n                      sin(degrees((i/MAX_ITER)*360.))) *  (rand(vec2(i,uv.x+uv.y))+bluramount); \n        vec2 uv2 = uv+(q*bluramount);\n        firstPass += draw(uv2)/2.;\n\n        q = vec2(cos(degrees((i/MAX_ITER)*360.)),\n                 sin(degrees((i/MAX_ITER)*360.))) *  (rand(vec2(i+2.,uv.x+uv.y+24.))+bluramount); \n        uv2 = uv+(q*bluramount);\n        firstPass += draw(uv2)/2.;\n    }\n    firstPass /= MAX_ITER;\n\n    fragColor = vec4 (firstPass, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Wavy flippidy-flop tiles... a flight over an endless 'plane' of tiles\n// breaking up and aligning again.\n//\n// Copyright 2019 Mirco M端ller\n//\n// Author(s):\n//   Mirco \"MacSlow\" M端ller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// second blur-pass (of the first bloom pass from buffer C) for the bloom\n// blur-method by anastadunbar, https://www.shadertoy.com/view/4lXXWn\n\nconst float MAX_ITER = 40.;\n\nvec3 draw(vec2 uv) {\n    return texture(iChannel0,vec2(uv.x,1.-uv.y)).rgb;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord.xy / iResolution.xy);    \n    float bluramount = .01;\n    vec3 secondPass = vec3(0.);\n    for (float i = 0.; i < MAX_ITER; i++) {\n        vec2 q = vec2(cos(degrees((i/MAX_ITER)*360.)),\n                      sin(degrees((i/MAX_ITER)*360.))) *  (rand(vec2(i,uv.x+uv.y))+bluramount); \n        vec2 uv2 = uv+(q*bluramount);\n        secondPass += draw(uv2)/2.;\n\n        q = vec2(cos(degrees((i/MAX_ITER)*360.)),\n                 sin(degrees((i/MAX_ITER)*360.))) *  (rand(vec2(i+2.,uv.x+uv.y+24.))+bluramount); \n        uv2 = uv+(q*bluramount);\n        secondPass += draw(uv2)/2.;\n    }\n    secondPass /= MAX_ITER;\n\n    fragColor = vec4 (secondPass, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}