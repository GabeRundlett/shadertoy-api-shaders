{
    "Shader": {
        "info": {
            "date": "1571760423",
            "description": "Displace the forking nodes with mouse.\n( click bottom-left to go back to demo-mode )\nSpace to rotate semi-forks instead of moving nodes.  A show modulation (i.e. phasor).",
            "flags": 48,
            "hasliked": 0,
            "id": "wd3SDn",
            "likes": 12,
            "name": "oriented forks on stripes",
            "published": 3,
            "tags": [
                "complex",
                "stripes",
                "gabor",
                "short",
                "phasor",
                "fingerprint"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 524
        },
        "renderpass": [
            {
                "code": "// variant of forks:          https://shadertoy.com/view/wsKGWD\n// variant of modifiers zoo:  https://shadertoy.com/view/3dK3WW\n// see also interactive mixer: https://www.shadertoy.com/view/tsG3zG\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, \n         U = u / R.y, \n         Z = CS( 1e2*U.x ), \n       //Z = CS( 1e2*length(U) ), \n        Z0,V; \n    \n    float a = 0.;\n    for(int i=0; i<100; i++) {\n        V  = U - T(i).xy;   \n        //a += logZ(V).y * T(i).z;   // adding fork\n        a += smoothstep(0., TAU, 2.*mod( logZ(V).y+3.14-T(i).w, TAU) )*TAU  * T(i).z; // adding oriented fork \n    }\n  //O = vec4( fract(a/TAU) ); \n    Z  = mulZ( Z, CS(a));\n    if keyToggle(65) {               // without strip modulation\n       Z = CS(a);  \n       O = vec4( .5+.5 * Z, 0, 1);           // complex to colors\n     //O = sqrt(O.xxxx);  \n    } \n    else {                           // with strip modulation\n       O = vec4( .5+.5 * Z, 0, 1);           // complex to colors\n       O = sqrt(O.xxxx);                     // BW images in sRGB\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// manage nodes location: init, anim, mouse interaction\n\n#define hash4(x)        fract( 1e4* sin( 1e4* (x) * vec4(1,.111,.234,.731) ))\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U -= .5;\n    if (U.y > 0.) return;\n    \n    vec2 R = iResolution.xy,\n         M = iMouse.xy/R.y;\n    \n    if (iFrame==0) {\n        O     = hash4(U.x);                                     // random node pos + rot sign + angle\n        O.xy *= R/R.y; O.z = sign(O.z-.5); O.w *= TAU; \n        return;\n    }\n    \n    O = T(U.x);\n    \n    // for better mouse control, cf https://www.shadertoy.com/view/tsG3zG\n    if (iMouse.z > 0. && length(M-O.xy) < .03 ) O.xy = M;       // mouse moves node\n    \n                      \n    if  keyToggle(32)                                           // autodemo animation\n            O.w += iTimeDelta /3.;\n        else if (length(M)<20./R.y)  \n            O.xy += CS( iTime + hash4(U.x+.1).z*6.28 ) / R.y; \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(i)        texelFetch(iChannel0, ivec2(i,0), 0 )\n\n#define CS(a)       vec2( cos(a), sin(a) )\n#define expZ(z)   ( length(z) * CS(z) )\n#define logZ(z)     vec2( length(z), atan((z).y,(z).x) )\n#define mulZ(a,b) ( mat2(a, -(a).y,(a).x) * (b) )\n\n\n#define PI          3.14159\n#define TAU         (2.*PI)\n\n#define keyToggle(a)  ( texelFetch(iChannel3,ivec2(a,2),0).x > 0.)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}