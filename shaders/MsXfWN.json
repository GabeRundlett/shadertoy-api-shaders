{
    "Shader": {
        "info": {
            "date": "1496194852",
            "description": "          mouse.x = note length in tiles.\nabs(mouse.y) = wavelength (max wavelength==1.)\n\nALWAYS do FULL periods,for wavelengths that are significantly shorter than tile width (of 1).\nlike roughly 440Hz being played for a quarter second of note length.",
            "flags": 0,
            "hasliked": 0,
            "id": "MsXfWN",
            "likes": 0,
            "name": "full periodic floor()ulation",
            "published": 3,
            "tags": [
                "music",
                "filter",
                "audio",
                "tiling",
                "tile",
                "tesselation",
                "modulation",
                "pass",
                "filer"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 602
        },
        "renderpass": [
            {
                "code": "#define zoom 3.\n\n//smallest possible wavelength, >0, to avoid division by 0 errors.\n#define minWaveLength .001\n\n#define tau acos(-1.)*2.\n\n//#define frame(u) zoom*(u-.5*iResolution.xy)/iResolution.y\nvec2 frame(vec2 u){u/=iResolution.xy;u.y-=.5;\n u.x*=iResolution.x/iResolution.y;return u*zoom;}\n\n//patent:       https://www.shadertoy.com/view/XsXfD4\n//solution for: https://www.shadertoy.com/view/MdXfW4 (tiled pony meloty)\n\n//this one foes across multiple tiles, with a clear end.\n//made faster, by including the cosntraint that the longestWavelength==tileWidth.\n\n/*\nIf you put a period inside another period, for tiling tesselation.\nEg: If you want to play a sine wave of a set wavelength \n... for a limited (or tiled) amount of time (==note duration).\nYou have the problem of a tiling suddenly breaking mix-tile,\n...that fourier-transforms into one high pitch cracking-noise at the end\n...that is usually filtered lazily with a band-filter (overkill)\n...or dealt with by fading it into silence (lazy (physical piano solution)).\n\nEnsuring that a periodic wave only stops if(mod(time,periodlength)=0.0 && f(x)==0.),\n... and defining a period.y's start=end=f(x)=0, (like sin(x))\n... avoids this high pitch cracking-noise at the end.\n\nTo make the above if()  condition true,\nyou calculate how many times a smaller period (tile) fits into a larger period (tile).\nvia howManyAfitInB() and use that within the packsin() filter.\nThan the return value of packsin() is a factor to multiply by, or step() with.\n\nI thought I would use at least 1* mod() but floor() is all I needed.\nTherefore it is a floor()ulation and not a mod()ulation.\n*/\n\n//avoid division by 0, set minimum wavelength.\nfloat not0(float a){return sign(a)*max(minWaveLength,abs(a));}\n\n//return how many times period [a] fits into period [b].\nfloat howManyAfitInB(float a, float b){return floor(b/not0(a));}\n//float howManyFitIn(float a){if(a==0.)return 0.;return floor(1./a);}\n//if (x < largest_possible_stack_of_interval_p ) return 1; return 0; //[p]PeriodLength (wavelength)\nfloat packsin(float x,float p){return step(x,p*howManyAfitInB(p,x));}\n//is oblivious about negative input ranges.\n\n/*\"tile value\" is a float that defines tile properties.\n0== the tile is void, no note is played.\na negative sign means this note ends with thius tile\nits abs() value sets the tile position within a single longer note.\n\"tile value\" makes audio rendering much faster, trough tesselation.\n*/\n//return \"tile value\" of note on a tile at [x] with note length [l]\nfloat note(float x,float l){\n x=floor(x);l=floor(l);x+=1.;\n if(x>l+1.||x<1.)return 0.;//out of bounds\n return mix(-x,x,step(x,l));}\n\n//[u]=xOrTime, [v]TileValue is set by note(), [w]Wavelength\n//return y of sinusoid that stops after a full period.\nfloat noteSin(float u,float v,float w){//if(v==0)return 0.;//possible shortcut\n w=min(abs(w),1.);//constrain, it is simpler if wavelengths are not larger than tiles.\n float s=sin(u*tau/w)*mix(1.,step(u,w*howManyAfitInB(w,abs(v))),step(v,0.));\n return mix(s,0.,step(v,0.)*step(0.,v));}\n//noteSin() is oblivious about u<0., you could resolve this in a wrapper?\n\nvoid mainImage(out vec4 O,in vec2 U){vec2 u=frame(U),m=frame(iMouse.xy);\n if(iMouse.z<0.){//if (no mouse inpout) wavlength is golden ratio\n  m.x=sin(iTime)*2.3+2.3;\n  m.y=sqrt(5.)*.5-.5;//0.61... golden ratio\n  //m.y*=.5;//scaling for fun.\n }\n\n float d=note(u.x,m.x);//m.x sets note length (in full tiles)\n d=noteSin(u.x,d,m.y); //m.y sets wavelength for this simple demo.\n //d*=.1;//istead of notesin, this visualizes what note() returns as d.\n //d=sin(u.x);//overwrite with sin() for a quick debug\n d-=u.y;//y offset\n d=smoothstep(.1,-.1,abs(d)-.1);\n                                     \n u=fract(u);\n u.x*=.5;//less green > more dichromatic contrast.\n O=vec4(d,u,1.);}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}