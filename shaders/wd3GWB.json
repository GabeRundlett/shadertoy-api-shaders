{
    "Shader": {
        "info": {
            "date": "1569194858",
            "description": "Bouncing Lines",
            "flags": 0,
            "hasliked": 0,
            "id": "wd3GWB",
            "likes": 3,
            "name": "Colorful Bouncing Lines",
            "published": 3,
            "tags": [
                "animatedlines"
            ],
            "usePreview": 0,
            "username": "woz",
            "viewed": 284
        },
        "renderpass": [
            {
                "code": "#define time iTime\n#define resolution iResolution\n\nfloat DistToLine(vec2 p, vec2 l0, vec2 l1) {\n    float lineLength = length(l1 - l0);\n    lineLength *= lineLength;\n\n    vec2 v = l1 - l0;\n    vec2 x = p - l0;\n    \n    float vx = dot(x, v);\n    vec2 lp = v * clamp(vx / lineLength, 0., 1.) + l0;\n    return length(p - lp);\n}\n\nfloat rand(float seed) {\n    return fract(sin(sin(seed * 9123.35) * 1276.73) * 5422.92);\n}\n\nfloat rand(vec2 seed) {\n    float n = rand(seed.x);\n    return fract(sin(sin(seed.y * 725.35 + n * 1234.92) * 8538.74) * 422.43);\n}\n\nvec2 randomPoint(float seed) {\n    float aspect = resolution.x / resolution.y;\n    float x = rand(seed / 1000.);\n    float y = rand(seed / 1000. * 124.41);\n    \n    vec2 xy = vec2(x, y);\n    \n    xy -= .5;\n    xy.x *= aspect;\n    xy *= 2.;\n    return xy;\n}\n\nvec3 randomColor(vec2 seed) {\n    float aspect = resolution.x / resolution.y;\n    float x = rand(seed.x / 1000.);\n    float y = rand(seed.y + x / 1000. * 2235.71);\n    float z = rand((seed.x + seed.y) * y / 1000. * 634.71);\n    return vec3(x, y, z);\n}\n\nfloat drawLine(vec2 uv, vec2 l0, vec2 l1, float multiplier) {\n    l1 = l0 + (l1 - l0) * clamp(multiplier * multiplier, 0., 1.);\n    \n    float d = DistToLine(uv, l0, l1);\n    return smoothstep(.03, .02, d);\n}\n\nvec4 animateLine(vec2 uv, float t0, float t1) {\n    float mask = 0.;\n    float t = time;\n    \n    if (int(t0) % 2 != 0) {\n        t += .5;\n    }\n    \n    float tt = fract(t);\n    \n    vec2 p0 = randomPoint(t0);\n    vec2 p1 = randomPoint(t1);\n    \n    vec3 rCol = randomColor(p0 + t0);\n    \n    if (tt < 0.5) {\n        mask += drawLine(uv, p0, p1, tt * 2.);\n    } else {\n        mask += drawLine(uv, p1, p0, 1. - ((tt - .5) * 2.));\n    }\n    \n    return vec4(rCol * mix(0., 1., mask), mask);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2. * fragCoord - resolution.xy) / resolution.y;\n    \n    float mask = 0.;\n    \n    vec4 col = vec4(0.);\n    \n    float t0 = floor(time);\n    float t1 = t0 + 1.;\n    float t2 = t0 + 2.;\n    \n    for (float i = 0.; i < 10.; i += 1.) {\n        float ti0 = t0 + i * 1.;\n        float ti1 = ti0 + 1.;\n        col = mix(animateLine(uv, ti0, ti1), col, col.a);    \n    }\n    \n    fragColor = vec4(pow(col,vec4(1./2.2)));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}