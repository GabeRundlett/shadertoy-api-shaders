{
    "Shader": {
        "info": {
            "date": "1550571352",
            "description": "Rainbow by sine curve x3.",
            "flags": 0,
            "hasliked": 0,
            "id": "3dfSz8",
            "likes": 2,
            "name": "Sine_Rainbow_Tile",
            "published": 3,
            "tags": [
                "rainbow"
            ],
            "usePreview": 0,
            "username": "noriben",
            "viewed": 537
        },
        "renderpass": [
            {
                "code": "// remap\nfloat remap(float In, vec2 InMinMax, vec2 OutMinMax)\n{\nreturn OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (center)\n    vec2 uv = (fragCoord.xy *2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    //Divide Screen\n\tuv = mix(uv, fract(uv * 2.0 * sin(iTime * 0.2)), cos(iTime)); \n    \n    // period and move\n    float level = mix(uv.x, uv.y, 0.5 * sin(iTime)) * 2.0 * 3.1415 * tan(iTime * 0.1);  \n\n    float offset = 1.0;\n    \n    // remap function Test\n    float r = remap(sin(level + offset), vec2(-1.0, 1.0), vec2(0.0, 1.0));\n    // -1 to 1 remap 0 to 1 with simple\n    float g = (sin(level - 2. + offset) + 1.0) / 2.0;\n    float b = (sin(level - 4. + offset) + 1.0) / 2.0;\n    \n    vec3 rainbow = vec3(r, g, b) * 0.5 * (sin(iTime * 1.0) + 2.5) / 2.0;\n    \n    // Output to screen\n    fragColor = vec4(rainbow, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}