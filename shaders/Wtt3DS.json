{
    "Shader": {
        "info": {
            "date": "1577445258",
            "description": "Dual Number: https://en.wikipedia.org/wiki/Dual_number\n- Uses minimum absolute value of orbit. The orbit is d[n+1] = d[n]^2 + c\n- The mouse position is the initial value of d, d[0]\n- The pixel coordinate is the variable c",
            "flags": 0,
            "hasliked": 0,
            "id": "Wtt3DS",
            "likes": 0,
            "name": "dual number fractal thing",
            "published": 3,
            "tags": [
                "fractal",
                "interactive",
                "dualnumber"
            ],
            "usePreview": 0,
            "username": "zzggbb",
            "viewed": 328
        },
        "renderpass": [
            {
                "code": "#define MAXIMUM_DISTANCE 5000.0\n#define MAXIMUM_ITERS 50.0\n#define PI 3.14159265\n#define E 2.718281828459045\n\nvec3 color(float t) {\n    t *= 0.75;\n\tvec3 a = vec3(0.5);\n    vec3 b = vec3(0.5);\n    vec3 c = vec3(1.0);\n    vec3 d = vec3(0.0, 0.33, 0.67);\n    return a + b * cos(2.0*PI*(c*t + d));\n}\n\nvec2 screen_coord(vec2 xy, vec2 dim) {\n    return (xy - 0.5*dim) / min(dim.x, dim.y);\n}\n\nvec2 dual_pow(vec2 d, float p) {\n    // implement d^p = (a+bÎµ)^p\n    float r = pow(d.x, p); \n\treturn vec2(r, d.y * p * r / d.x);    \n}\n\nfloat linscale(float x, float x0, float x1, float y0, float y1) {\n\treturn (y1-y0)/(x1-x0) * (x-x0) + y0;\n}\n\nfloat logyscale(float x, float x0, float x1, float y0, float y1) {\n\treturn pow(10.0, linscale(x, x0, x1, log(y0), log(y1)));\n}\n\nfloat logxscale(float x, float x0, float x1, float y0, float y1) {\n\treturn linscale(log(x), log(x0), log(x1), y0, y1);\n}\n\nfloat linosc(float m, float M) {\n\treturn linscale(sin(iTime), -1.0, 1.0, m, M);\n}\n\nfloat logosc(float m, float M) {\n\treturn logyscale(sin(iTime), -1.0, 1.0, m, M);\n}\n\nfloat shade(vec2 c, vec2 d0) {\n    vec2 d = d0;\n    \n    // maximum distance from origin to orbit point d\n    float maxL = 0.0;\n    \n    // minimum distance from origin to orbit point d\n    float minL = 1.0e19;\n    \n    float L;\n    vec2 new_d;\n    for (float i=0.0; i<MAXIMUM_ITERS; i++) {\n        new_d = dual_pow(d, 2.0) + c;\n        vec2 d_dot = new_d - d;\n        d = new_d;        \n        L = length(d);\n        if (L > MAXIMUM_DISTANCE) return 0.0;\n        if (L > maxL) maxL = L;\n        if (L < minL) minL = L;\n\t\t\n\t\t\n    }\n    //return 0.0;\n    return logxscale(minL, 0.0001, 100.0, 1.0, 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 sc = 2.0*screen_coord(fragCoord.xy, iResolution.xy);\n    vec2 msc = 2.0*screen_coord(iMouse.xy, iResolution.xy);\n\n    if (iMouse.x < 0.01) msc = vec2(-1.1, -0.3);\n\n    vec2 uv = logosc(1.0, 1.0)*sc + vec2(0.0, 0.0);\n    float value = shade(vec2(uv.x, uv.y) , msc);\n    fragColor = vec4(color(value),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}