{
    "Shader": {
        "info": {
            "date": "1650893585",
            "description": "four functions for drawing simple 2D graphics.\nbut how can i blur the triangle?\nI will be very grateful to him who can tell me the solution.",
            "flags": 0,
            "hasliked": 0,
            "id": "7tfBDN",
            "likes": 0,
            "name": "01 Simple 2D graphics",
            "published": 3,
            "tags": [
                "2d",
                "triangle",
                "line",
                "circle",
                "rectangle"
            ],
            "usePreview": 0,
            "username": "ccc9527",
            "viewed": 293
        },
        "renderpass": [
            {
                "code": "//画线函数,p为uv,即屏幕上任意一点,ab为线段两端点,size.x是线段宽,\n//size.y是线段边缘模糊百分比,color是线段颜色\nvec3 DrawLine(vec2 uv,vec2 a,vec2 b,vec2 size,vec3 color)\n{\n    vec2 ap = uv-a;\n    vec2 ab = b-a;\n    \n    float t = dot(ap,ab)/dot(ab,ab);//点p在线段上投影占ab的百分比\n    t = clamp(t,0.0,1.0);\n    \n    //ap-ab*t表示点p-点p到线段ab的垂点,即d是点p到线段的距离\n    float d = length(ap-ab*t);\n    float s = smoothstep(size.x,size.x-size.y*size.x,d);\n    \n    return s*color;\n}\n//画圆函数,p表示圆心,uv表示屏幕上任意一点,size.x是圆半径\n//size.y表示圆边缘模糊百分比,color是圆的颜色\nvec3 DrawCircle(vec2 p,vec2 uv,vec2 size,vec3 color)\n{\n    uv -= p;\n    float d = length(uv);//uv点到中心点的距离\n    d = smoothstep(size.x,size.x-size.x*size.y,d);\n    \n    return d*color;\n}\n//点p到直线ab的距离\nfloat DistanceToLine(vec2 p,vec2 a,vec2 b)\n{\n    vec2 ap = p-a;\n    vec2 ab = b-a;\n    float t = dot(ap,ab)/dot(ab,ab);\n    vec2 n = a+ab*t;\n    return length(p-n);\n}\n//画三角形函数,uv同上,a,b,c是三角形三个顶点,color是三角形颜色\nvec3 DrawTriangle(vec2 uv,vec2 a,vec2 b,vec2 c,vec3 color_a,\n    vec3 color_b,vec3 color_c)\n{\n    vec2 ap = uv-a;\n    vec2 bp = uv-b;\n    vec2 cp = uv-c;\n    vec2 ab = b-a;//逆时针方向的三角形三条边\n    vec2 bc = c-b;\n    vec2 ca = a-c;\n    \n    //ap与ab,bp与bc,cp与ca的三个叉乘符号若是同号,代表点p在三角形内\n    //这是一种判断点是否在三角形内的方法,还可以根据三个小三角形面积是否等于\n    //大三角形面积判断\n    float c1 = ap.x*ab.y-ap.y*ab.x;\n    float c2 = bp.x*bc.y-bp.y*bc.x;\n    float c3 = cp.x*ca.y-cp.y*ca.x;\n    \n    float s = DistanceToLine(a,b,c);//大三角形的面积\n    if(c1*c2>0.0 && c2*c3>0.0)\n    {\n        float d1 = DistanceToLine(uv,a,b);//uv到ab的距离\n        float d2 = DistanceToLine(uv,b,c);//uv到bc的距离\n        float d3 = DistanceToLine(uv,c,a);//uv到ca的距离\n        \n        //三个小三角形的面积,用于除以总面积表示重心坐标\n        float s1 = d1*length(ab);\n        float s2 = d2*length(bc);\n        float s3 = d3*length(ca);\n        \n        //s2/s是对应a点颜色比例,s3/s是对应b点颜色比例\n        //s1/s是对应c点颜色比例,画图之后更清晰易懂\n        return s2/s*color_a+s3/s*color_b+s1/s*color_c;\n    }\n    \n    return vec3(0.0);\n}\n//画矩形函数,uv同上,ab分别是矩形的左上点和右下点,blur的xy分别是\n//xy方向的模糊百分比,color是矩形颜色\nvec3 DrawRectangle(vec2 uv,vec2 a,vec2 b,vec2 blur,vec3 color)\n{\n    float x = b.x-a.x;\n    float y = a.y-b.y;\n    \n    //矩形的四个边界,左右下上\n    float x1 = smoothstep(0.0,x*blur.x,uv.x-a.x);\n    float x2 = smoothstep(x,x-x*blur.x,uv.x-a.x);\n    float y1 = smoothstep(0.0,y*blur.y,uv.y-b.y);\n    float y2 = smoothstep(y,y-y*blur.y,uv.y-b.y);\n    \n    return x1*x2*y1*y2*color;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //将(0,0)点移动到屏幕中心,并使得xy方向单位长度相同\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    //线段的两个端点\n    vec2 a = vec2(-0.5,0.1);\n    vec2 b = vec2(-0.2,0.4);\n    //圆心\n    vec2 p = vec2(0.4,0.2);\n    //三角形三个顶点坐标和颜色\n    vec2 t1 = vec2(-0.4,-0.1);\n    vec2 t2 = vec2(-0.6,-0.4);\n    vec2 t3 = vec2(-0.2,-0.4);\n    vec3 c1 = vec3(1,0,0);\n    vec3 c2 = vec3(0,1,0);\n    vec3 c3 = vec3(0,0,1);\n    //矩形左上点后右下点\n    vec2 r1 = vec2(0.2,-0.05);\n    vec2 r2 = vec2(0.6,-0.45);\n    \n    col += DrawLine(uv,a,b,vec2(0.01,0.1),vec3(1.0,0.0,0.0));\n    col += DrawCircle(p,uv,vec2(0.2,0.1),vec3(0.0,1.0,0.0));\n    col += DrawTriangle(uv,t1,t2,t3,c1,c2,c3);\n    col += DrawRectangle(uv,r1,r2,vec2(0.1,0.1),vec3(1.0,0.0,1.0));\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}