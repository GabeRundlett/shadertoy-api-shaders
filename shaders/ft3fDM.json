{
    "Shader": {
        "info": {
            "date": "1663143110",
            "description": "\"correcting\" the clamping of bright peaks in source images  while digital Bokeh by using L_infinity norm.\n( variant of \"Bokeh [194 Chars]\" by Xor. https://shadertoy.com/view/fldfWH )",
            "flags": 0,
            "hasliked": 0,
            "id": "ft3fDM",
            "likes": 39,
            "name": "unsaturating post-image Bokeh",
            "published": 3,
            "tags": [
                "dof",
                "bokeh",
                "2tweets",
                "short",
                "golf"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 867
        },
        "renderpass": [
            {
                "code": "/* Ultra-bright thin dots, as glints, speculars on misty grass, stars in telscope images, \n   saturate the sensors so that the result image is clamped ( small white dots not justicing the intensity ).\n   Worse: filtering post-treatment like digital Bokeh would totally underestimate the light.\n   Using L_infinity norm during filtering allows to keep the intensity along its spreading.\n   Or a good approximation, and allowing smoother transition, is to use something like L_50 norm instead.\n   ( adapted from \"Bokeh [194 Chars]\" by Xor. https://shadertoy.com/view/fldfWH )\n*/\n\n/**/                                                  // --- using real L_infinity ( Envy24 version )\n\nvoid mainImage( out vec4 O, vec2 I)\n{\n    vec2 r = iResolution.xy, dP, i = vec2(0,11);      // cos( t + i ) ~ vec2(cos,sin)\n    vec4 C;\n    for( O-=O ; i.x<2e2; ) {\n        float dof = (I+I-r-r*sin(iTime)).y;           // depth of field: current radius\n              dP  = sin(i+i.x*1.4)/6e2 *sqrt(i++).x;  // disc sampling\n        C = texture(iChannel0,(I+dof * dP) / r );     // Bokeh sampling of the image\n        O = max(O, C);                                // L_infinity norm\n    }\n    O = pow(O, vec4(1.2));\n}\n\n\n\n/**\n\nfloat p = 50.;                                        // --- using norm L_p\n\nvoid mainImage( out vec4 O, vec2 I)\n{\n    vec2 r = iResolution.xy, dP, i = vec2(0,11);      // cos( t + i ) ~ vec2(cos,sin)\n    vec4 C;\n    for( O-=O ; i.x<2e2; ) {\n        float dof = (I+I-r-r*sin(iTime)).y;           // depth of field: current radius\n              dP  = sin(i)/6e2 *sqrt(i++).x;          // disc sampling\n        C = texture(iChannel0,(I+dof * dP) / r ),     // Bokeh sampling of the image\n        O += pow(C, vec4(p)); // L_50 as an approx of L_infinity norm\n    }\n    O = pow( O/2e2, vec4(1./p) );  // finishing the L_50 norm.\n}\n\n/**/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}