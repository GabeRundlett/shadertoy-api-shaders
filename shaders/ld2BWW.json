{
    "Shader": {
        "info": {
            "date": "1500918820",
            "description": "I tried to implement existing gamebook, but always get the \"cannot locate suitable resource\" error. :-(\nSo I just wrote a little interactive horror story based on old horrors.\nIt is better to use Chrome+Mint\n\nUse mouse (for first page mousemove).\n",
            "flags": 112,
            "hasliked": 0,
            "id": "ld2BWW",
            "likes": 8,
            "name": "[SH17B] Little horror story",
            "published": 3,
            "tags": [
                "font",
                "book",
                "sh17b",
                "gamebook",
                "horrorstory"
            ],
            "usePreview": 0,
            "username": "Zabidon",
            "viewed": 1379
        },
        "renderpass": [
            {
                "code": "// License: Do What The F**k You Want To But It's Not My Fault Public License v1 (WTFNMFPL-1.0)\n// Created by Osipov Kirill --- zabidon, KirillD503\n\n// According to \"you can make something passive (like a scene of a movie or A BOOK)\"\n// I tried to implement a gamebook adventure.\n// But I allways got the next error:\n// Unknown error: 0(221) : error C5041: cannot locate suitable resource to \n// bind variable \"[variable]\". Possibly large array.\n// OR Unknown error: error X4505: Sum of temp registers and indexable\n// temp registers exceeds limit of 4096\n//\n// SORRY FOR MY ENGLISH. It is not my native language.\n// This is not a good code, I just tired and don't have time to rewrite all in right way.\n\n\n#define PI 3.1415927\n#define RADIUS 0.1\n#define CURL_LINE vec2(0.995, 0.0998)\n\n//============================================================\n// BEGIN UTIL\n//============================================================\n\n#define texel_size iChannelResolution[0].xy\n\nvec4 load_vec4(int var_id) {\n  float id = float(var_id);\n  vec2 var_coord = (vec2(\n          mod(id, iChannelResolution[3].y),\n          floor(id / iChannelResolution[3].y)\n  \t\t) + 0.5) / texel_size;\n  return texture(iChannel2, var_coord);\n}\n\nfloat hash1(uint n) {\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return 1.0 - float( n & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n//============================================================\n// END UTIL\n//============================================================\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xx;\n    vec2 ur = vec2(1.0, iResolution.y/iResolution.x);\n    vec2 mouse = iMouse.xy/iResolution.xx;\n\t\n    vec4 val = load_vec4(0);\n    float time = val.x,\n        mouse_z = val.y,\n        anim_state = val.z,\n        anim_pos = val.w;\n\n    float cosan = dot(uv, CURL_LINE);\n    vec2 end = abs((ur - uv) / CURL_LINE);\n    float maxt = cosan + min(end.x, end.y);\n    float normal, curl_cosan;\n    \n    if (cosan < anim_pos - RADIUS) {\n        normal = 1.0;\n        curl_cosan = cosan;\n    } else if (cosan > anim_pos + RADIUS) {\n        curl_cosan = -1.;\n    } else {\n        float a = asin((cosan - anim_pos) / RADIUS);\n        float ca = -a + PI;\n\n        if (!false && anim_pos + ca * RADIUS < maxt) {\n            normal = cos(ca);\n            curl_cosan = anim_pos + ca * RADIUS;\n        } else  if (cosan < anim_pos) {\n            normal = 1.0;\n            curl_cosan = cosan;\n        } else if (anim_pos + a * RADIUS < maxt) {\n            normal = cos(a);\n            curl_cosan = anim_pos + a * RADIUS;\n        } else {\n        \tcurl_cosan = -1.;\n        }\n    }\n\n    if (abs(maxt - curl_cosan) < 0.005) {\n        fragColor *= 0.;\n        return;\n    } else if (curl_cosan > 0.) {\n        vec2 tuv = uv + CURL_LINE * (curl_cosan - cosan);\n    \n        float shadow = 1.0 - smoothstep (0.0, RADIUS * 2.0, -(cosan - anim_pos));\n   \t    shadow *= (smoothstep(-RADIUS, RADIUS, (maxt - (curl_cosan + 1.5 * PI * RADIUS + RADIUS))));\n        fragColor = texture(iChannel0, tuv / ur);\n        uvec2 uuv = uvec2(tuv / ur * iResolution.xy);\n        float noise = hash1(uuv.x + 1920U * uuv.y + (1920U*1080U)) / 15.;\n        fragColor = normal > 0.0 ?\n            \t(fragColor - noise) * normal * (1. - shadow): \n        \t\t-normal * (fragColor * 0.05 + 0.95 - noise);\n    } else {\n        float shadow = smoothstep(0.0, RADIUS * 2.0, (cosan - anim_pos));\n        uvec2 uuv = uvec2(uv / ur * iResolution.xy);\n        float noise = hash1(uuv.x + 1920U * uuv.y + (1920U*1080U)) / 15.;\n        fragColor = (texture(iChannel1, uv / ur) -  noise) * shadow;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "musicstream",
                        "id": 11543,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/user439429243/creepy-ambient-horror-suspense-music-instrumental-scary-music"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// I know it is better to use uint, I will do it later\n\nconst uint CHAR_A = 65U;\nconst uint CHAR_B = 66U;\nconst uint CHAR_C = 67U;\nconst uint CHAR_D = 68U;\nconst uint CHAR_E = 69U;\nconst uint CHAR_F = 70U;\nconst uint CHAR_G = 71U;\nconst uint CHAR_H = 72U;\nconst uint CHAR_I = 73U;\nconst uint CHAR_J = 74U;\nconst uint CHAR_K = 75U;\nconst uint CHAR_L = 76U;\nconst uint CHAR_M = 77U;\nconst uint CHAR_N = 78U;\nconst uint CHAR_O = 79U;\nconst uint CHAR_P = 80U;\nconst uint CHAR_Q = 81U;\nconst uint CHAR_R = 82U;\nconst uint CHAR_S = 83U;\nconst uint CHAR_T = 84U;\nconst uint CHAR_U = 85U;\nconst uint CHAR_V = 86U;\nconst uint CHAR_W = 87U;\nconst uint CHAR_X = 88U;\nconst uint CHAR_Y = 89U;\nconst uint CHAR_Z = 90U;\n\nconst uint CHAR_a = 97U;\nconst uint CHAR_b = 98U;\nconst uint CHAR_c = 99U;\nconst uint CHAR_d = 100U;\nconst uint CHAR_e = 101U;\nconst uint CHAR_f = 102U;\nconst uint CHAR_g = 103U;\nconst uint CHAR_h = 104U;\nconst uint CHAR_i = 105U;\nconst uint CHAR_j = 106U;\nconst uint CHAR_k = 107U;\nconst uint CHAR_l = 108U;\nconst uint CHAR_m = 109U;\nconst uint CHAR_n = 110U;\nconst uint CHAR_o = 111U;\nconst uint CHAR_p = 112U;\nconst uint CHAR_q = 113U;\nconst uint CHAR_r = 114U;\nconst uint CHAR_s = 115U;\nconst uint CHAR_t = 116U;\nconst uint CHAR_u = 117U;\nconst uint CHAR_v = 118U;\nconst uint CHAR_w = 119U;\nconst uint CHAR_x = 120U;\nconst uint CHAR_y = 121U;\nconst uint CHAR_z = 122U;\nconst uint CHAR_COMMA = 44U;\nconst uint CHAR_DASH = 45U;\nconst uint CHAR_DOT = 46U;\nconst uint CHAR_AM = 39U;\nconst uint CHAR_CLM = 58U;\nconst uint CHAR_QU = 63U;\n\nconst uint CHAR_SP = 32U;\nconst uint CHAR_EX = 33U;\nconst uint CHAR_SEMI = 59U;\nconst uint CHAR_GL = 34U;\nconst uint CHAR_0 = 48U;\nconst uint CHAR_1 = 49U;\nconst uint CHAR_2 = 50U;\nconst uint CHAR_3 = 51U;\nconst uint CHAR_4 = 52U;\nconst uint CHAR_5 = 53U;\nconst uint CHAR_6 = 54U;\nconst uint CHAR_7 = 55U;\nconst uint CHAR_8 = 56U;\nconst uint CHAR_9 = 57U;\nconst uint CHAR_RB = 40U;\nconst uint CHAR_LB = 41U;\n\n\nfloat hash1(uint n) {\n    // uinteger hash copied from Hugo Elias\n    n = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return 1.0 - float( n & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\n//#define CELL_SCALE\n#define CELLS vec2(31, 16)\n#define CELLS2 vec2(16, 16)\n\nvec2 uv_to_cell_uv(vec2 uv) {\n    vec2 nuv = floor(uv * CELLS);\n    nuv.y = 15. - nuv.y;\n    return nuv;\n}\n\nvec4 g(vec2 uv, ivec2 cell_uv, uint char_id) {\n    vec2 cuv = vec2(cell_uv);\n    vec2 char_offset = vec2(char_id % 16U, 16U - char_id / 16U) / 16.;\n    return texture(iChannel1, (fract(uv * CELLS) - vec2(-0.5, 1)) / CELLS + char_offset).xxxx;\n}\n//============================================================\n// BEGIN UTIL\n//============================================================\n\n#define texel_size iChannelResolution[0].xy\n\nvec4 load_vec4(int var_id) {\n  float id = float(var_id);\n  vec2 var_coord = (vec2(\n          mod(id, iChannelResolution[0].y),\n          floor(id / iChannelResolution[0].y)\n          ) + 0.5) / texel_size;\n  return texture(iChannel0, var_coord);\n}\n\n//============================================================\n// END UTIL\n//============================================================\n\nuint text_0[] = uint[](CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_a, CHAR_n, CHAR_d, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_g, CHAR_i, CHAR_r, CHAR_l, CHAR_SP, CHAR_w, CHAR_e, CHAR_n, CHAR_t, CHAR_SP, CHAR_o, CHAR_n, CHAR_SP, CHAR_a, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_f, CHAR_i, CHAR_s, CHAR_h, CHAR_i, CHAR_n, CHAR_g, CHAR_SP, CHAR_t, CHAR_r, CHAR_i, CHAR_p, CHAR_SP, CHAR_w, CHAR_i, CHAR_t, CHAR_h, CHAR_SP, CHAR_a, CHAR_n, CHAR_SP, CHAR_o, CHAR_v, CHAR_e, CHAR_r, CHAR_n, CHAR_i, CHAR_g, CHAR_h, CHAR_t, CHAR_SP, CHAR_SP, CHAR_s, CHAR_t, CHAR_a, CHAR_y, CHAR_DOT, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_f, CHAR_i, CHAR_s, CHAR_h, CHAR_e, CHAR_d, CHAR_COMMA, CHAR_SP, CHAR_d, CHAR_i, CHAR_d, CHAR_SP, CHAR_s, CHAR_h, CHAR_i, CHAR_s, CHAR_h, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_k, CHAR_e, CHAR_b, CHAR_a, CHAR_b, CHAR_COMMA, CHAR_SP, CHAR_s, CHAR_a, CHAR_t, CHAR_SP, CHAR_b, CHAR_y, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_f, CHAR_i, CHAR_r, CHAR_e, CHAR_SP, CHAR_a, CHAR_n, CHAR_d, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_d, CHAR_r, CHAR_a, CHAR_n, CHAR_k, CHAR_SP, CHAR_a, CHAR_l, CHAR_c, CHAR_o, CHAR_h, CHAR_o, CHAR_l, CHAR_DOT, CHAR_SP);\nuint text_1[] = uint[](CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_w, CHAR_o, CHAR_k, CHAR_e, CHAR_SP, CHAR_u, CHAR_p, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_m, CHAR_i, CHAR_d, CHAR_d, CHAR_l, CHAR_e, CHAR_SP, CHAR_o, CHAR_f, CHAR_SP, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_n, CHAR_i, CHAR_g, CHAR_h, CHAR_t, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_a, CHAR_SP, CHAR_s, CHAR_l, CHAR_e, CHAR_e, CHAR_p, CHAR_i, CHAR_n, CHAR_g, CHAR_SP, CHAR_b, CHAR_a, CHAR_g, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_s, CHAR_DOT, CHAR_SP, CHAR_I, CHAR_t, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_q, CHAR_u, CHAR_i, CHAR_e, CHAR_t, CHAR_SP, CHAR_a, CHAR_n, CHAR_d, CHAR_SP, CHAR_v, CHAR_e, CHAR_r, CHAR_y, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_c, CHAR_o, CHAR_l, CHAR_d, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_g, CHAR_i, CHAR_r, CHAR_l, CHAR_SP, CHAR_s, CHAR_a, CHAR_i, CHAR_d, CHAR_COMMA, CHAR_SP, CHAR_GL, CHAR_C, CHAR_h, CHAR_e, CHAR_c, CHAR_k, CHAR_SP, CHAR_i, CHAR_f, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_f, CHAR_i, CHAR_r, CHAR_e, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_c, CHAR_h, CHAR_o, CHAR_c, CHAR_k, CHAR_e, CHAR_d, CHAR_GL, CHAR_DOT, CHAR_SP, CHAR_T, CHAR_h, CHAR_e, CHAR_SP, CHAR_f, CHAR_i, CHAR_r, CHAR_e, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_n, CHAR_o, CHAR_t, CHAR_SP, CHAR_v, CHAR_i, CHAR_s, CHAR_i, CHAR_b, CHAR_l, CHAR_e, CHAR_SP, CHAR_t, CHAR_h, CHAR_r, CHAR_o, CHAR_u, CHAR_g, CHAR_h, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_f, CHAR_a, CHAR_b, CHAR_r, CHAR_i, CHAR_c, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_w, CHAR_e, CHAR_n, CHAR_t, CHAR_SP, CHAR_o, CHAR_u, CHAR_t, CHAR_SP, CHAR_o, CHAR_f, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_COMMA, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_f, CHAR_i, CHAR_r, CHAR_e, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_c, CHAR_h, CHAR_o, CHAR_c, CHAR_k, CHAR_e, CHAR_d, CHAR_COMMA, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_c, CHAR_a, CHAR_r, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_s, CHAR_t, CHAR_o, CHAR_o, CHAR_d, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_i, CHAR_t, CHAR_s, CHAR_SP, CHAR_p, CHAR_l, CHAR_a, CHAR_c, CHAR_e, CHAR_DOT, CHAR_SP, CHAR_I, CHAR_t, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_v, CHAR_e, CHAR_r, CHAR_y, CHAR_SP, CHAR_c, CHAR_o, CHAR_l, CHAR_d, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_1, CHAR_DOT, CHAR_SP, CHAR_W, CHAR_a, CHAR_r, CHAR_m, CHAR_e, CHAR_d, CHAR_SP, CHAR_u, CHAR_p, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_c, CHAR_a, CHAR_r, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_2, CHAR_DOT, CHAR_SP, CHAR_C, CHAR_o, CHAR_m, CHAR_e, CHAR_SP, CHAR_b, CHAR_a, CHAR_c, CHAR_k, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP);\nuint text_2[] = uint[](CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_w, CHAR_e, CHAR_n, CHAR_t, CHAR_SP, CHAR_t, CHAR_o, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_c, CHAR_a, CHAR_r, CHAR_COMMA, CHAR_SP, CHAR_s, CHAR_t, CHAR_a, CHAR_r, CHAR_t, CHAR_e, CHAR_d, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_e, CHAR_n, CHAR_g, CHAR_i, CHAR_n, CHAR_e, CHAR_DOT, CHAR_SP, CHAR_I, CHAR_t, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_m, CHAR_u, CHAR_c, CHAR_h, CHAR_SP, CHAR_w, CHAR_a, CHAR_r, CHAR_m, CHAR_e, CHAR_r, CHAR_DOT, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_q, CHAR_u, CHAR_i, CHAR_c, CHAR_k, CHAR_l, CHAR_y, CHAR_SP, CHAR_f, CHAR_e, CHAR_l, CHAR_l, CHAR_SP, CHAR_a, CHAR_s, CHAR_l, CHAR_e, CHAR_e, CHAR_p, CHAR_DOT, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_h, CHAR_a, CHAR_d, CHAR_SP, CHAR_a, CHAR_SP, CHAR_n, CHAR_i, CHAR_g, CHAR_h, CHAR_t, CHAR_m, CHAR_a, CHAR_r, CHAR_e, CHAR_COMMA, CHAR_SP, CHAR_w, CHAR_h, CHAR_e, CHAR_r, CHAR_e, CHAR_SP, CHAR_a, CHAR_t, CHAR_SP, CHAR_4, CHAR_CLM, CHAR_2, CHAR_0, CHAR_SP, CHAR_SP, CHAR_a, CHAR_m, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_g, CHAR_i, CHAR_r, CHAR_l, CHAR_SP, CHAR_b, CHAR_i, CHAR_t, CHAR_e, CHAR_s, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_n, CHAR_e, CHAR_c, CHAR_k, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_w, CHAR_o, CHAR_k, CHAR_e, CHAR_SP, CHAR_u, CHAR_p, CHAR_COMMA, CHAR_SP, CHAR_l, CHAR_o, CHAR_o, CHAR_k, CHAR_e, CHAR_d, CHAR_SP, CHAR_a, CHAR_t, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_c, CHAR_l, CHAR_o, CHAR_c, CHAR_k, CHAR_DOT, CHAR_SP, CHAR_I, CHAR_t, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_4, CHAR_CLM, CHAR_1, CHAR_9, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_1, CHAR_DOT, CHAR_SP, CHAR_S, CHAR_t, CHAR_a, CHAR_r, CHAR_t, CHAR_SP, CHAR_a, CHAR_g, CHAR_a, CHAR_i, CHAR_n, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP);\nuint text_3[] = uint[](CHAR_SP, CHAR_SP, CHAR_I, CHAR_t, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_t, CHAR_o, CHAR_o, CHAR_SP, CHAR_h, CHAR_a, CHAR_r, CHAR_d, CHAR_SP, CHAR_t, CHAR_o, CHAR_SP, CHAR_s, CHAR_l, CHAR_e, CHAR_e, CHAR_p, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_c, CHAR_o, CHAR_l, CHAR_d, CHAR_SP, CHAR_s, CHAR_l, CHAR_e, CHAR_e, CHAR_p, CHAR_i, CHAR_n, CHAR_g, CHAR_SP, CHAR_b, CHAR_a, CHAR_g, CHAR_DOT, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_t, CHAR_r, CHAR_i, CHAR_e, CHAR_d, CHAR_SP, CHAR_t, CHAR_o, CHAR_SP, CHAR_c, CHAR_u, CHAR_d, CHAR_d, CHAR_l, CHAR_e, CHAR_d, CHAR_SP, CHAR_u, CHAR_p, CHAR_SP, CHAR_t, CHAR_o, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_g, CHAR_i, CHAR_r, CHAR_l, CHAR_f, CHAR_r, CHAR_i, CHAR_e, CHAR_n, CHAR_d, CHAR_COMMA, CHAR_SP, CHAR_b, CHAR_u, CHAR_t, CHAR_SP, CHAR_i, CHAR_t, CHAR_SP, CHAR_d, CHAR_i, CHAR_d, CHAR_SP, CHAR_n, CHAR_o, CHAR_t, CHAR_SP, CHAR_g, CHAR_e, CHAR_t, CHAR_SP, CHAR_SP, CHAR_w, CHAR_a, CHAR_r, CHAR_m, CHAR_e, CHAR_r, CHAR_DOT, CHAR_SP, CHAR_A, CHAR_f, CHAR_t, CHAR_e, CHAR_r, CHAR_SP, CHAR_s, CHAR_o, CHAR_m, CHAR_e, CHAR_SP, CHAR_t, CHAR_i, CHAR_m, CHAR_e, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_h, CHAR_e, CHAR_a, CHAR_r, CHAR_d, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_b, CHAR_a, CHAR_r, CHAR_k, CHAR_i, CHAR_n, CHAR_g, CHAR_SP, CHAR_o, CHAR_f, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_d, CHAR_o, CHAR_ge, CHAR_t, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_d, CHAR_o, CHAR_g, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_2, CHAR_DOT, CHAR_SP, CHAR_C, CHAR_o, CHAR_n, CHAR_t, CHAR_i, CHAR_n, CHAR_u, CHAR_e, CHAR_d, CHAR_SP, CHAR_t, CHAR_o, CHAR_SP, CHAR_s, CHAR_l, CHAR_e, CHAR_e, CHAR_p, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP);\nuint text_4[] = uint[](CHAR_SP, CHAR_SP, CHAR_T, CHAR_h, CHAR_e, CHAR_SP, CHAR_d, CHAR_o, CHAR_g, CHAR_SP, CHAR_e, CHAR_n, CHAR_t, CHAR_e, CHAR_r, CHAR_e, CHAR_d, CHAR_SP, CHAR_i, CHAR_n, CHAR_t, CHAR_o, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_SP, CHAR_a, CHAR_n, CHAR_d, CHAR_SP, CHAR_l, CHAR_a, CHAR_y, CHAR_SP, CHAR_d, CHAR_o, CHAR_w, CHAR_n, CHAR_SP, CHAR_a, CHAR_t, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_f, CHAR_e, CHAR_e, CHAR_t, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_S, CHAR_u, CHAR_d, CHAR_d, CHAR_e, CHAR_n, CHAR_l, CHAR_y, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_SP, CHAR_o, CHAR_p, CHAR_e, CHAR_n, CHAR_e, CHAR_d, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_e, CHAR_y, CHAR_e, CHAR_s, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_w, CHAR_e, CHAR_r, CHAR_e, CHAR_SP, CHAR_h, CHAR_o, CHAR_r, CHAR_r, CHAR_i, CHAR_f, CHAR_i, CHAR_e, CHAR_d, CHAR_DOT, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_e, CHAR_u, CHAR_t, CHAR_h, CHAR_a, CHAR_n, CHAR_i, CHAR_z, CHAR_e, CHAR_d, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_d, CHAR_o, CHAR_g, CHAR_SP, CHAR_a, CHAR_SP, CHAR_w, CHAR_e, CHAR_e, CHAR_k, CHAR_SP, CHAR_a, CHAR_g, CHAR_o, CHAR_DOT, CHAR_SP, CHAR_W, CHAR_h, CHAR_o, CHAR_SP, CHAR_l, CHAR_a, CHAR_y, CHAR_SP, CHAR_a, CHAR_t, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_f, CHAR_e, CHAR_e, CHAR_tt, CHAR_a, CHAR_r, CHAR_t, CHAR_SP, CHAR_a, CHAR_g, CHAR_a, CHAR_i, CHAR_n, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP);\nuint text_5[] = uint[](CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_c, CHAR_o, CHAR_n, CHAR_t, CHAR_i, CHAR_n, CHAR_u, CHAR_e, CHAR_d, CHAR_SP, CHAR_t, CHAR_o, CHAR_SP, CHAR_s, CHAR_l, CHAR_e, CHAR_e, CHAR_p, CHAR_DOT, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_SP, CHAR_g, CHAR_i, CHAR_r, CHAR_l, CHAR_SP, CHAR_w, CHAR_o, CHAR_k, CHAR_e, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_SP, CHAR_u, CHAR_p, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_g, CHAR_i, CHAR_r, CHAR_l, CHAR_f, CHAR_r, CHAR_i, CHAR_e, CHAR_n, CHAR_d, CHAR_SP, CHAR_t, CHAR_o, CHAR_l, CHAR_d, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_COMMA, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_GL, CHAR_H, CHAR_o, CHAR_n, CHAR_e, CHAR_y, CHAR_COMMA, CHAR_SP, CHAR_I, CHAR_SP, CHAR_t, CHAR_h, CHAR_i, CHAR_n, CHAR_k, CHAR_SP, CHAR_s, CHAR_o, CHAR_m, CHAR_e, CHAR_o, CHAR_n, CHAR_e, CHAR_SP, CHAR_i, CHAR_s, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_o, CHAR_u, CHAR_t, CHAR_s, CHAR_i, CHAR_d, CHAR_eo, CHAR_u, CHAR_SP, CHAR_s, CHAR_a, CHAR_i, CHAR_d, CHAR_COMMA, CHAR_SP, CHAR_GL, CHAR_W, CHAR_e, CHAR_SP, CHAR_a, CHAR_r, CHAR_e, CHAR_SP, CHAR_a, CHAR_l, CHAR_o, CHAR_n, CHAR_e, CHAR_GL, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_2, CHAR_DOT, CHAR_SP, CHAR_G, CHAR_o, CHAR_t, CHAR_SP, CHAR_o, CHAR_u, CHAR_t, CHAR_SP, CHAR_o, CHAR_f, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP);\nuint text_6[] = uint[](CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_g, CHAR_o, CHAR_t, CHAR_SP, CHAR_o, CHAR_u, CHAR_t, CHAR_SP, CHAR_o, CHAR_f, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_SP, CHAR_a, CHAR_n, CHAR_d, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_s, CHAR_a, CHAR_w, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_g, CHAR_i, CHAR_r, CHAR_l, CHAR_f, CHAR_r, CHAR_i, CHAR_e, CHAR_n, CHAR_d, CHAR_SP, CHAR_b, CHAR_e, CHAR_h, CHAR_i, CHAR_n, CHAR_d, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_SP, CHAR_c, CHAR_l, CHAR_o, CHAR_s, CHAR_e, CHAR_s, CHAR_t, CHAR_SP, CHAR_t, CHAR_r, CHAR_e, CHAR_e, CHAR_DOT, CHAR_SP, CHAR_S, CHAR_h, CHAR_e, CHAR_SP, CHAR_s, CHAR_h, CHAR_i, CHAR_v, CHAR_e, CHAR_r, CHAR_e, CHAR_d, CHAR_SP, CHAR_f, CHAR_o, CHAR_r, CHAR_SP, CHAR_SP, CHAR_f, CHAR_e, CHAR_a, CHAR_r, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_DASH, CHAR_SP, CHAR_H, CHAR_o, CHAR_n, CHAR_e, CHAR_y, CHAR_COMMA, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_r, CHAR_e, CHAR_AM, CHAR_s, CHAR_SP, CHAR_s, CHAR_o, CHAR_m, CHAR_e, CHAR_o, CHAR_n, CHAR_e, CHAR_SP, CHAR_e, CHAR_l, CHAR_s, CHAR_e, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_tt, CHAR_a, CHAR_r, CHAR_t, CHAR_SP, CHAR_a, CHAR_g, CHAR_a, CHAR_i, CHAR_n, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP);\nuint text_7[] = uint[](CHAR_SP, CHAR_SP, CHAR_I, CHAR_n, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_m, CHAR_o, CHAR_r, CHAR_n, CHAR_i, CHAR_n, CHAR_g, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_SP, CHAR_w, CHAR_o, CHAR_k, CHAR_e, CHAR_SP, CHAR_u, CHAR_p, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_a, CHAR_n, CHAR_d, CHAR_SP, CHAR_g, CHAR_o, CHAR_t, CHAR_SP, CHAR_o, CHAR_u, CHAR_t, CHAR_SP, CHAR_o, CHAR_f, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_COMMA, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_g, CHAR_i, CHAR_r, CHAR_l, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_s, CHAR_i, CHAR_t, CHAR_t, CHAR_i, CHAR_n, CHAR_g, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_c, CHAR_a, CHAR_r, CHAR_SP, CHAR_a, CHAR_n, CHAR_d, CHAR_SP, CHAR_d, CHAR_r, CHAR_i, CHAR_n, CHAR_k, CHAR_i, CHAR_n, CHAR_g, CHAR_SP, CHAR_c, CHAR_o, CHAR_f, CHAR_f, CHAR_e, CHAR_e, CHAR_SP, CHAR_f, CHAR_r, CHAR_o, CHAR_m, CHAR_SP, CHAR_a, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_r, CHAR_m, CHAR_o, CHAR_s, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_t, CHAR_o, CHAR_l, CHAR_d, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_SP, CHAR_g, CHAR_i, CHAR_r, CHAR_l, CHAR_f, CHAR_r, CHAR_i, CHAR_e, CHAR_n, CHAR_d, CHAR_CLM, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_DASH, CHAR_SP, CHAR_I, CHAR_t, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_c, CHAR_o, CHAR_l, CHAR_d, CHAR_SP, CHAR_l, CHAR_a, CHAR_s, CHAR_t, CHAR_SP, CHAR_n, CHAR_i, CHAR_g, CHAR_h, CHAR_t, CHAR_DOT, CHAR_SP, CHAR_I, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_c, CHAR_u, CHAR_d, CHAR_d, CHAR_l, CHAR_e, CHAR_d, CHAR_SP, CHAR_u, CHAR_p, CHAR_SP, CHAR_t, CHAR_o, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_SP, CHAR_b, CHAR_u, CHAR_t, CHAR_SP, CHAR_i, CHAR_t, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_c, CHAR_o, CHAR_l, CHAR_d, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_S, CHAR_h, CHAR_e, CHAR_SP, CHAR_l, CHAR_o, CHAR_o, CHAR_k, CHAR_e, CHAR_d, CHAR_SP, CHAR_a, CHAR_t, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_SP, CHAR_a, CHAR_n, CHAR_d, CHAR_SP, CHAR_a, CHAR_f, CHAR_t, CHAR_e, CHAR_r, CHAR_SP, CHAR_a, CHAR_SP, CHAR_p, CHAR_a, CHAR_u, CHAR_s, CHAR_e, CHAR_SP, CHAR_s, CHAR_a, CHAR_i, CHAR_d, CHAR_CLM, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_DASH, CHAR_SP, CHAR_I, CHAR_SP, CHAR_s, CHAR_l, CHAR_e, CHAR_p, CHAR_t, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_c, CHAR_a, CHAR_r, CHAR_SP, CHAR_a, CHAR_l, CHAR_l, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_n, CHAR_i, CHAR_g, CHAR_h, CHAR_t, CHAR_SP, CHAR_a, CHAR_n, CHAR_d, CHAR_SP, CHAR_d, CHAR_i, CHAR_d, CHAR_n, CHAR_AM, CHAR_t, CHAR_SP, CHAR_e, CHAR_v, CHAR_e, CHAR_n, CHAR_SP, CHAR_p, CHAR_e, CHAR_e, CHAR_k, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_1, CHAR_DOT, CHAR_SP, CHAR_S, CHAR_t, CHAR_a, CHAR_r, CHAR_t, CHAR_SP, CHAR_a, CHAR_g, CHAR_a, CHAR_i, CHAR_n, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    vec2 uv = fragCoord.xy / iResolution.y - vec2(0.25, 0.);\n    uvec2 uuv = uvec2(fragCoord);\n    \n    fragColor *= 0.;\n    \n    ivec2 cell_uv = ivec2(uv_to_cell_uv(uv));\n    \n    vec4 text_state_data = load_vec4(1);\n    if (cell_uv == clamp(cell_uv, ivec2(0), ivec2(CELLS))) {\n        vec4 anim_data = load_vec4(0);\n        \n    uint page = uint(text_state_data.x * 5.);\n    if (page == 0U)\n            fragColor += g(uv, cell_uv, text_0[cell_uv.x + cell_uv.y * 32]);\n        if (page == 1U)\n            fragColor += g(uv, cell_uv, text_1[cell_uv.x + cell_uv.y * 32]);\n        if (page == 2U)\n            fragColor += g(uv, cell_uv, text_2[cell_uv.x + cell_uv.y * 32]);\n        if (page == 3U)\n            fragColor += g(uv, cell_uv, text_3[cell_uv.x + cell_uv.y * 32]);\n        if (page == 4U)\n            fragColor += g(uv, cell_uv, text_4[cell_uv.x + cell_uv.y * 32]);\n        if (page == 5U)\n            fragColor += g(uv, cell_uv, text_5[cell_uv.x + cell_uv.y * 32]);\n        if (page == 6U)\n            fragColor += g(uv, cell_uv, text_6[cell_uv.x + cell_uv.y * 32]);\n        if (page == 7U)\n            fragColor += g(uv, cell_uv, text_7[cell_uv.x + cell_uv.y * 32]);\n    }\n    \n    fragColor = clamp(1. - fragColor, .2, .9);\n\n    uint curr_page = uint(text_state_data.x * 5.);\n    \n    if (curr_page > 0U) {\n        uint ans_line = uint(text_state_data.z * 5.);\n        if (uint(uv.y * 16.) == ans_line) {\n            fragColor.z = 0.;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const uint CHAR_A = 65U;\nconst uint CHAR_B = 66U;\nconst uint CHAR_C = 67U;\nconst uint CHAR_D = 68U;\nconst uint CHAR_E = 69U;\nconst uint CHAR_F = 70U;\nconst uint CHAR_G = 71U;\nconst uint CHAR_H = 72U;\nconst uint CHAR_I = 73U;\nconst uint CHAR_J = 74U;\nconst uint CHAR_K = 75U;\nconst uint CHAR_L = 76U;\nconst uint CHAR_M = 77U;\nconst uint CHAR_N = 78U;\nconst uint CHAR_O = 79U;\nconst uint CHAR_P = 80U;\nconst uint CHAR_Q = 81U;\nconst uint CHAR_R = 82U;\nconst uint CHAR_S = 83U;\nconst uint CHAR_T = 84U;\nconst uint CHAR_U = 85U;\nconst uint CHAR_V = 86U;\nconst uint CHAR_W = 87U;\nconst uint CHAR_X = 88U;\nconst uint CHAR_Y = 89U;\nconst uint CHAR_Z = 90U;\n\nconst uint CHAR_a = 97U;\nconst uint CHAR_b = 98U;\nconst uint CHAR_c = 99U;\nconst uint CHAR_d = 100U;\nconst uint CHAR_e = 101U;\nconst uint CHAR_f = 102U;\nconst uint CHAR_g = 103U;\nconst uint CHAR_h = 104U;\nconst uint CHAR_i = 105U;\nconst uint CHAR_j = 106U;\nconst uint CHAR_k = 107U;\nconst uint CHAR_l = 108U;\nconst uint CHAR_m = 109U;\nconst uint CHAR_n = 110U;\nconst uint CHAR_o = 111U;\nconst uint CHAR_p = 112U;\nconst uint CHAR_q = 113U;\nconst uint CHAR_r = 114U;\nconst uint CHAR_s = 115U;\nconst uint CHAR_t = 116U;\nconst uint CHAR_u = 117U;\nconst uint CHAR_v = 118U;\nconst uint CHAR_w = 119U;\nconst uint CHAR_x = 120U;\nconst uint CHAR_y = 121U;\nconst uint CHAR_z = 122U;\nconst uint CHAR_COMMA = 44U;\nconst uint CHAR_DASH = 45U;\nconst uint CHAR_DOT = 46U;\nconst uint CHAR_AM = 39U;\nconst uint CHAR_CLM = 58U;\nconst uint CHAR_QU = 63U;\n\nconst uint CHAR_SP = 32U;\nconst uint CHAR_EX = 33U;\nconst uint CHAR_SEMI = 59U;\nconst uint CHAR_GL = 34U;\nconst uint CHAR_0 = 48U;\nconst uint CHAR_1 = 49U;\nconst uint CHAR_2 = 50U;\nconst uint CHAR_3 = 51U;\nconst uint CHAR_4 = 52U;\nconst uint CHAR_5 = 53U;\nconst uint CHAR_6 = 54U;\nconst uint CHAR_7 = 55U;\nconst uint CHAR_8 = 56U;\nconst uint CHAR_9 = 57U;\nconst uint CHAR_RB = 40U;\nconst uint CHAR_LB = 41U;\n\n\nfloat hash1(uint n) {\n    // uinteger hash copied from Hugo Elias\n    n = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return 1.0 - float( n & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\n//#define CELL_SCALE\n#define CELLS vec2(31, 16)\n#define CELLS2 vec2(16, 16)\n\nvec2 uv_to_cell_uv(vec2 uv) {\n    vec2 nuv = floor(uv * CELLS);\n    nuv.y = 15. - nuv.y;\n    return nuv;\n}\n\nvec4 g(vec2 uv, ivec2 cell_uv, uint char_id) {\n    vec2 cuv = vec2(cell_uv);\n    vec2 char_offset = vec2(char_id % 16U, 16U - char_id / 16U) / 16.;\n    return texture(iChannel1, (fract(uv * CELLS) - vec2(-0.5, 1)) / CELLS + char_offset).xxxx;\n}\n//============================================================\n// BEGIN UTIL\n//============================================================\n\n#define texel_size iChannelResolution[0].xy\n\nvec4 load_vec4(int var_id) {\n  float id = float(var_id);\n  vec2 var_coord = (vec2(\n          mod(id, iChannelResolution[0].y),\n          floor(id / iChannelResolution[0].y)\n          ) + 0.5) / texel_size;\n  return texture(iChannel0, var_coord);\n}\n\n//============================================================\n// END UTIL\n//============================================================\n\nuint text_0[] = uint[](CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_a, CHAR_n, CHAR_d, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_g, CHAR_i, CHAR_r, CHAR_l, CHAR_SP, CHAR_w, CHAR_e, CHAR_n, CHAR_t, CHAR_SP, CHAR_o, CHAR_n, CHAR_SP, CHAR_a, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_f, CHAR_i, CHAR_s, CHAR_h, CHAR_i, CHAR_n, CHAR_g, CHAR_SP, CHAR_t, CHAR_r, CHAR_i, CHAR_p, CHAR_SP, CHAR_w, CHAR_i, CHAR_t, CHAR_h, CHAR_SP, CHAR_a, CHAR_n, CHAR_SP, CHAR_o, CHAR_v, CHAR_e, CHAR_r, CHAR_n, CHAR_i, CHAR_g, CHAR_h, CHAR_t, CHAR_SP, CHAR_SP, CHAR_s, CHAR_t, CHAR_a, CHAR_y, CHAR_DOT, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_f, CHAR_i, CHAR_s, CHAR_h, CHAR_e, CHAR_d, CHAR_COMMA, CHAR_SP, CHAR_d, CHAR_i, CHAR_d, CHAR_SP, CHAR_s, CHAR_h, CHAR_i, CHAR_s, CHAR_h, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_k, CHAR_e, CHAR_b, CHAR_a, CHAR_b, CHAR_COMMA, CHAR_SP, CHAR_s, CHAR_a, CHAR_t, CHAR_SP, CHAR_b, CHAR_y, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_f, CHAR_i, CHAR_r, CHAR_e, CHAR_SP, CHAR_a, CHAR_n, CHAR_d, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_d, CHAR_r, CHAR_a, CHAR_n, CHAR_k, CHAR_SP, CHAR_a, CHAR_l, CHAR_c, CHAR_o, CHAR_h, CHAR_o, CHAR_l, CHAR_DOT, CHAR_SP);\nuint text_1[] = uint[](CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_w, CHAR_o, CHAR_k, CHAR_e, CHAR_SP, CHAR_u, CHAR_p, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_m, CHAR_i, CHAR_d, CHAR_d, CHAR_l, CHAR_e, CHAR_SP, CHAR_o, CHAR_f, CHAR_SP, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_n, CHAR_i, CHAR_g, CHAR_h, CHAR_t, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_a, CHAR_SP, CHAR_s, CHAR_l, CHAR_e, CHAR_e, CHAR_p, CHAR_i, CHAR_n, CHAR_g, CHAR_SP, CHAR_b, CHAR_a, CHAR_g, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_s, CHAR_DOT, CHAR_SP, CHAR_I, CHAR_t, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_q, CHAR_u, CHAR_i, CHAR_e, CHAR_t, CHAR_SP, CHAR_a, CHAR_n, CHAR_d, CHAR_SP, CHAR_v, CHAR_e, CHAR_r, CHAR_y, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_c, CHAR_o, CHAR_l, CHAR_d, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_g, CHAR_i, CHAR_r, CHAR_l, CHAR_SP, CHAR_s, CHAR_a, CHAR_i, CHAR_d, CHAR_COMMA, CHAR_SP, CHAR_GL, CHAR_C, CHAR_h, CHAR_e, CHAR_c, CHAR_k, CHAR_SP, CHAR_i, CHAR_f, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_f, CHAR_i, CHAR_r, CHAR_e, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_c, CHAR_h, CHAR_o, CHAR_c, CHAR_k, CHAR_e, CHAR_d, CHAR_GL, CHAR_DOT, CHAR_SP, CHAR_T, CHAR_h, CHAR_e, CHAR_SP, CHAR_f, CHAR_i, CHAR_r, CHAR_e, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_n, CHAR_o, CHAR_t, CHAR_SP, CHAR_v, CHAR_i, CHAR_s, CHAR_i, CHAR_b, CHAR_l, CHAR_e, CHAR_SP, CHAR_t, CHAR_h, CHAR_r, CHAR_o, CHAR_u, CHAR_g, CHAR_h, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_f, CHAR_a, CHAR_b, CHAR_r, CHAR_i, CHAR_c, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_w, CHAR_e, CHAR_n, CHAR_t, CHAR_SP, CHAR_o, CHAR_u, CHAR_t, CHAR_SP, CHAR_o, CHAR_f, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_COMMA, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_f, CHAR_i, CHAR_r, CHAR_e, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_c, CHAR_h, CHAR_o, CHAR_c, CHAR_k, CHAR_e, CHAR_d, CHAR_COMMA, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_c, CHAR_a, CHAR_r, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_s, CHAR_t, CHAR_o, CHAR_o, CHAR_d, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_i, CHAR_t, CHAR_s, CHAR_SP, CHAR_p, CHAR_l, CHAR_a, CHAR_c, CHAR_e, CHAR_DOT, CHAR_SP, CHAR_I, CHAR_t, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_v, CHAR_e, CHAR_r, CHAR_y, CHAR_SP, CHAR_c, CHAR_o, CHAR_l, CHAR_da, CHAR_r, CHAR_m, CHAR_e, CHAR_d, CHAR_SP, CHAR_u, CHAR_p, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_c, CHAR_a, CHAR_r, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_2, CHAR_DOT, CHAR_SP, CHAR_C, CHAR_o, CHAR_m, CHAR_e, CHAR_SP, CHAR_b, CHAR_a, CHAR_c, CHAR_k, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP);\nuint text_2[] = uint[](CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_w, CHAR_e, CHAR_n, CHAR_t, CHAR_SP, CHAR_t, CHAR_o, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_c, CHAR_a, CHAR_r, CHAR_COMMA, CHAR_SP, CHAR_s, CHAR_t, CHAR_a, CHAR_r, CHAR_t, CHAR_e, CHAR_d, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_e, CHAR_n, CHAR_g, CHAR_i, CHAR_n, CHAR_e, CHAR_DOT, CHAR_SP, CHAR_I, CHAR_t, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_m, CHAR_u, CHAR_c, CHAR_h, CHAR_SP, CHAR_w, CHAR_a, CHAR_r, CHAR_m, CHAR_e, CHAR_r, CHAR_DOT, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_q, CHAR_u, CHAR_i, CHAR_c, CHAR_k, CHAR_l, CHAR_y, CHAR_SP, CHAR_f, CHAR_e, CHAR_l, CHAR_l, CHAR_SP, CHAR_a, CHAR_s, CHAR_l, CHAR_e, CHAR_e, CHAR_p, CHAR_DOT, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_h, CHAR_a, CHAR_d, CHAR_SP, CHAR_a, CHAR_SP, CHAR_n, CHAR_i, CHAR_g, CHAR_h, CHAR_t, CHAR_m, CHAR_a, CHAR_r, CHAR_e, CHAR_COMMA, CHAR_SP, CHAR_w, CHAR_h, CHAR_e, CHAR_r, CHAR_e, CHAR_SP, CHAR_a, CHAR_t, CHAR_SP, CHAR_4, CHAR_CLM, CHAR_2, CHAR_0, CHAR_SP, CHAR_SP, CHAR_a, CHAR_m, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_g, CHAR_i, CHAR_r, CHAR_l, CHAR_SP, CHAR_b, CHAR_i, CHAR_t, CHAR_e, CHAR_s, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_n, CHAR_e, CHAR_c, CHAR_k, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_w, CHAR_o, CHAR_k, CHAR_e, CHAR_SP, CHAR_u, CHAR_p, CHAR_COMMA, CHAR_SP, CHAR_l, CHAR_o, CHAR_o, CHAR_k, CHAR_e, CHAR_d, CHAR_SP, CHAR_a, CHAR_t, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_c, CHAR_l, CHAR_o, CHAR_c, CHAR_k, CHAR_DOT, CHAR_SP, CHAR_I, CHAR_t, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_4, CHAR_CLM, CHAR_1, CHAR_9, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_1, CHAR_DOT, CHAR_SP, CHAR_S, CHAR_t, CHAR_a, CHAR_r, CHAR_t, CHAR_SP, CHAR_a, CHAR_g, CHAR_a, CHAR_i, CHAR_n, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP);\nuint text_3[] = uint[](CHAR_SP, CHAR_SP, CHAR_I, CHAR_t, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_t, CHAR_o, CHAR_o, CHAR_SP, CHAR_h, CHAR_a, CHAR_r, CHAR_d, CHAR_SP, CHAR_t, CHAR_o, CHAR_SP, CHAR_s, CHAR_l, CHAR_e, CHAR_e, CHAR_p, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_c, CHAR_o, CHAR_l, CHAR_d, CHAR_SP, CHAR_s, CHAR_l, CHAR_e, CHAR_e, CHAR_p, CHAR_i, CHAR_n, CHAR_g, CHAR_SP, CHAR_b, CHAR_a, CHAR_g, CHAR_DOT, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_t, CHAR_r, CHAR_i, CHAR_e, CHAR_d, CHAR_SP, CHAR_t, CHAR_o, CHAR_SP, CHAR_c, CHAR_u, CHAR_d, CHAR_d, CHAR_l, CHAR_e, CHAR_d, CHAR_SP, CHAR_u, CHAR_p, CHAR_SP, CHAR_t, CHAR_o, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_g, CHAR_i, CHAR_r, CHAR_l, CHAR_f, CHAR_r, CHAR_i, CHAR_e, CHAR_n, CHAR_d, CHAR_COMMA, CHAR_SP, CHAR_b, CHAR_u, CHAR_t, CHAR_SP, CHAR_i, CHAR_t, CHAR_SP, CHAR_d, CHAR_i, CHAR_d, CHAR_SP, CHAR_n, CHAR_o, CHAR_t, CHAR_SP, CHAR_g, CHAR_e, CHAR_t, CHAR_SP, CHAR_SP, CHAR_w, CHAR_a, CHAR_r, CHAR_m, CHAR_e, CHAR_r, CHAR_DOT, CHAR_SP, CHAR_A, CHAR_f, CHAR_t, CHAR_e, CHAR_r, CHAR_SP, CHAR_s, CHAR_o, CHAR_m, CHAR_e, CHAR_SP, CHAR_t, CHAR_i, CHAR_m, CHAR_e, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_h, CHAR_e, CHAR_a, CHAR_r, CHAR_d, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_b, CHAR_a, CHAR_r, CHAR_k, CHAR_i, CHAR_n, CHAR_g, CHAR_SP, CHAR_o, CHAR_f, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_d, CHAR_o, CHAR_ge, CHAR_t, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_d, CHAR_o, CHAR_g, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_2, CHAR_DOT, CHAR_SP, CHAR_C, CHAR_o, CHAR_n, CHAR_t, CHAR_i, CHAR_n, CHAR_u, CHAR_e, CHAR_d, CHAR_SP, CHAR_t, CHAR_o, CHAR_SP, CHAR_s, CHAR_l, CHAR_e, CHAR_e, CHAR_p, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP);\nuint text_4[] = uint[](CHAR_SP, CHAR_SP, CHAR_T, CHAR_h, CHAR_e, CHAR_SP, CHAR_d, CHAR_o, CHAR_g, CHAR_SP, CHAR_e, CHAR_n, CHAR_t, CHAR_e, CHAR_r, CHAR_e, CHAR_d, CHAR_SP, CHAR_i, CHAR_n, CHAR_t, CHAR_o, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_SP, CHAR_a, CHAR_n, CHAR_d, CHAR_SP, CHAR_l, CHAR_a, CHAR_y, CHAR_SP, CHAR_d, CHAR_o, CHAR_w, CHAR_n, CHAR_SP, CHAR_a, CHAR_t, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_f, CHAR_e, CHAR_e, CHAR_t, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_S, CHAR_u, CHAR_d, CHAR_d, CHAR_e, CHAR_n, CHAR_l, CHAR_y, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_SP, CHAR_o, CHAR_p, CHAR_e, CHAR_n, CHAR_e, CHAR_d, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_e, CHAR_y, CHAR_e, CHAR_s, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_w, CHAR_e, CHAR_r, CHAR_e, CHAR_SP, CHAR_h, CHAR_o, CHAR_r, CHAR_r, CHAR_i, CHAR_f, CHAR_i, CHAR_e, CHAR_d, CHAR_DOT, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_e, CHAR_u, CHAR_t, CHAR_h, CHAR_a, CHAR_n, CHAR_i, CHAR_z, CHAR_e, CHAR_d, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_d, CHAR_o, CHAR_g, CHAR_SP, CHAR_a, CHAR_SP, CHAR_w, CHAR_e, CHAR_e, CHAR_k, CHAR_SP, CHAR_a, CHAR_g, CHAR_o, CHAR_DOT, CHAR_SP, CHAR_W, CHAR_h, CHAR_o, CHAR_SP, CHAR_l, CHAR_a, CHAR_y, CHAR_SP, CHAR_a, CHAR_t, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_f, CHAR_e, CHAR_e, CHAR_tt, CHAR_a, CHAR_r, CHAR_t, CHAR_SP, CHAR_a, CHAR_g, CHAR_a, CHAR_i, CHAR_n, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP);\nuint text_5[] = uint[](CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_c, CHAR_o, CHAR_n, CHAR_t, CHAR_i, CHAR_n, CHAR_u, CHAR_e, CHAR_d, CHAR_SP, CHAR_t, CHAR_o, CHAR_SP, CHAR_s, CHAR_l, CHAR_e, CHAR_e, CHAR_p, CHAR_DOT, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_SP, CHAR_g, CHAR_i, CHAR_r, CHAR_l, CHAR_SP, CHAR_w, CHAR_o, CHAR_k, CHAR_e, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_SP, CHAR_u, CHAR_p, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_g, CHAR_i, CHAR_r, CHAR_l, CHAR_f, CHAR_r, CHAR_i, CHAR_e, CHAR_n, CHAR_d, CHAR_SP, CHAR_t, CHAR_o, CHAR_l, CHAR_d, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_COMMA, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_GL, CHAR_H, CHAR_o, CHAR_n, CHAR_e, CHAR_y, CHAR_COMMA, CHAR_SP, CHAR_I, CHAR_SP, CHAR_t, CHAR_h, CHAR_i, CHAR_n, CHAR_k, CHAR_SP, CHAR_s, CHAR_o, CHAR_m, CHAR_e, CHAR_o, CHAR_n, CHAR_e, CHAR_SP, CHAR_i, CHAR_s, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_o, CHAR_u, CHAR_t, CHAR_s, CHAR_i, CHAR_d, CHAR_eo, CHAR_u, CHAR_SP, CHAR_s, CHAR_a, CHAR_i, CHAR_d, CHAR_COMMA, CHAR_SP, CHAR_GL, CHAR_W, CHAR_e, CHAR_SP, CHAR_a, CHAR_r, CHAR_e, CHAR_SP, CHAR_a, CHAR_l, CHAR_o, CHAR_n, CHAR_e, CHAR_GL, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_2, CHAR_DOT, CHAR_SP, CHAR_G, CHAR_o, CHAR_t, CHAR_SP, CHAR_o, CHAR_u, CHAR_t, CHAR_SP, CHAR_o, CHAR_f, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP);\nuint text_6[] = uint[](CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_g, CHAR_o, CHAR_t, CHAR_SP, CHAR_o, CHAR_u, CHAR_t, CHAR_SP, CHAR_o, CHAR_f, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_SP, CHAR_a, CHAR_n, CHAR_d, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_s, CHAR_a, CHAR_w, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_g, CHAR_i, CHAR_r, CHAR_l, CHAR_f, CHAR_r, CHAR_i, CHAR_e, CHAR_n, CHAR_d, CHAR_SP, CHAR_b, CHAR_e, CHAR_h, CHAR_i, CHAR_n, CHAR_d, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_SP, CHAR_c, CHAR_l, CHAR_o, CHAR_s, CHAR_e, CHAR_s, CHAR_t, CHAR_SP, CHAR_t, CHAR_r, CHAR_e, CHAR_e, CHAR_DOT, CHAR_SP, CHAR_S, CHAR_h, CHAR_e, CHAR_SP, CHAR_s, CHAR_h, CHAR_i, CHAR_v, CHAR_e, CHAR_r, CHAR_e, CHAR_d, CHAR_SP, CHAR_f, CHAR_o, CHAR_r, CHAR_SP, CHAR_SP, CHAR_f, CHAR_e, CHAR_a, CHAR_r, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_DASH, CHAR_SP, CHAR_H, CHAR_o, CHAR_n, CHAR_e, CHAR_y, CHAR_COMMA, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_r, CHAR_e, CHAR_AM, CHAR_s, CHAR_SP, CHAR_s, CHAR_o, CHAR_m, CHAR_e, CHAR_o, CHAR_n, CHAR_e, CHAR_SP, CHAR_e, CHAR_l, CHAR_s, CHAR_e, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_tt, CHAR_a, CHAR_r, CHAR_t, CHAR_SP, CHAR_a, CHAR_g, CHAR_a, CHAR_i, CHAR_n, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP);\nuint text_7[] = uint[](CHAR_SP, CHAR_SP, CHAR_I, CHAR_n, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_m, CHAR_o, CHAR_r, CHAR_n, CHAR_i, CHAR_n, CHAR_g, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_SP, CHAR_w, CHAR_o, CHAR_k, CHAR_e, CHAR_SP, CHAR_u, CHAR_p, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_a, CHAR_n, CHAR_d, CHAR_SP, CHAR_g, CHAR_o, CHAR_t, CHAR_SP, CHAR_o, CHAR_u, CHAR_t, CHAR_SP, CHAR_o, CHAR_f, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_COMMA, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_r, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_g, CHAR_i, CHAR_r, CHAR_l, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_s, CHAR_i, CHAR_t, CHAR_t, CHAR_i, CHAR_n, CHAR_g, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_c, CHAR_a, CHAR_r, CHAR_SP, CHAR_a, CHAR_n, CHAR_d, CHAR_SP, CHAR_d, CHAR_r, CHAR_i, CHAR_n, CHAR_k, CHAR_i, CHAR_n, CHAR_g, CHAR_SP, CHAR_c, CHAR_o, CHAR_f, CHAR_f, CHAR_e, CHAR_e, CHAR_SP, CHAR_f, CHAR_r, CHAR_o, CHAR_m, CHAR_SP, CHAR_a, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_r, CHAR_m, CHAR_o, CHAR_s, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_Y, CHAR_o, CHAR_u, CHAR_SP, CHAR_t, CHAR_o, CHAR_l, CHAR_d, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_SP, CHAR_g, CHAR_i, CHAR_r, CHAR_l, CHAR_f, CHAR_r, CHAR_i, CHAR_e, CHAR_n, CHAR_d, CHAR_CLM, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_DASH, CHAR_SP, CHAR_I, CHAR_t, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_c, CHAR_o, CHAR_l, CHAR_d, CHAR_SP, CHAR_l, CHAR_a, CHAR_s, CHAR_t, CHAR_SP, CHAR_n, CHAR_i, CHAR_g, CHAR_h, CHAR_t, CHAR_DOT, CHAR_SP, CHAR_I, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_c, CHAR_u, CHAR_d, CHAR_d, CHAR_l, CHAR_e, CHAR_d, CHAR_SP, CHAR_u, CHAR_p, CHAR_SP, CHAR_t, CHAR_o, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_SP, CHAR_b, CHAR_u, CHAR_t, CHAR_SP, CHAR_i, CHAR_t, CHAR_SP, CHAR_w, CHAR_a, CHAR_s, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_c, CHAR_o, CHAR_l, CHAR_d, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_S, CHAR_h, CHAR_e, CHAR_SP, CHAR_l, CHAR_o, CHAR_o, CHAR_k, CHAR_e, CHAR_d, CHAR_SP, CHAR_a, CHAR_t, CHAR_SP, CHAR_y, CHAR_o, CHAR_u, CHAR_SP, CHAR_a, CHAR_n, CHAR_d, CHAR_SP, CHAR_a, CHAR_f, CHAR_t, CHAR_e, CHAR_r, CHAR_SP, CHAR_a, CHAR_SP, CHAR_p, CHAR_a, CHAR_u, CHAR_s, CHAR_e, CHAR_SP, CHAR_s, CHAR_a, CHAR_i, CHAR_d, CHAR_CLM, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_DASH, CHAR_SP, CHAR_I, CHAR_SP, CHAR_s, CHAR_l, CHAR_e, CHAR_p, CHAR_t, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_c, CHAR_a, CHAR_r, CHAR_SP, CHAR_a, CHAR_l, CHAR_l, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_n, CHAR_i, CHAR_g, CHAR_h, CHAR_t, CHAR_SP, CHAR_a, CHAR_n, CHAR_d, CHAR_SP, CHAR_d, CHAR_i, CHAR_d, CHAR_n, CHAR_AM, CHAR_t, CHAR_SP, CHAR_e, CHAR_v, CHAR_e, CHAR_n, CHAR_SP, CHAR_p, CHAR_e, CHAR_e, CHAR_k, CHAR_SP, CHAR_i, CHAR_n, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_t, CHAR_h, CHAR_e, CHAR_SP, CHAR_t, CHAR_e, CHAR_n, CHAR_t, CHAR_DOT, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_1, CHAR_DOT, CHAR_SP, CHAR_S, CHAR_t, CHAR_a, CHAR_r, CHAR_t, CHAR_SP, CHAR_a, CHAR_g, CHAR_a, CHAR_i, CHAR_n, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP, CHAR_SP);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    vec2 uv = fragCoord.xy / iResolution.y - vec2(0.25, 0.);\n    uvec2 uuv = uvec2(fragCoord);\n    \n    fragColor *= 0.;\n    \n    ivec2 cell_uv = ivec2(uv_to_cell_uv(uv));\n    \n    vec4 text_state_data = load_vec4(1);\n    if (cell_uv == clamp(cell_uv, ivec2(0), ivec2(CELLS))) {\n        vec4 anim_data = load_vec4(0);\n        \n    uint page = uint(text_state_data.y * 5.);\n    if (page == 0U)\n            fragColor += g(uv, cell_uv, text_0[cell_uv.x + cell_uv.y * 32]);\n        if (page == 1U)\n            fragColor += g(uv, cell_uv, text_1[cell_uv.x + cell_uv.y * 32]);\n        if (page == 2U)\n            fragColor += g(uv, cell_uv, text_2[cell_uv.x + cell_uv.y * 32]);\n        if (page == 3U)\n            fragColor += g(uv, cell_uv, text_3[cell_uv.x + cell_uv.y * 32]);\n        if (page == 4U)\n            fragColor += g(uv, cell_uv, text_4[cell_uv.x + cell_uv.y * 32]);\n        if (page == 5U)\n            fragColor += g(uv, cell_uv, text_5[cell_uv.x + cell_uv.y * 32]);\n        if (page == 6U)\n            fragColor += g(uv, cell_uv, text_6[cell_uv.x + cell_uv.y * 32]);\n        if (page == 7U)\n            fragColor += g(uv, cell_uv, text_7[cell_uv.x + cell_uv.y * 32]);\n    }\n    \n    fragColor = clamp(1. - fragColor, .2, .9);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float KEY_UP    = 38.5/256.0;\nconst float KEY_W     = 87.5/256.0;\n\nconst float KEY_DOWN  = 40.5/256.0;\nconst float KEY_S     = 83.5/256.0;\n\n//============================================================\n// BEGIN UTIL\n//============================================================\n\nvec4 load_vec4(int var_id) {\n  float id = float(var_id);\n  vec2 var_coord = (vec2(\n          mod(id, iResolution.y),\n          floor(id / iResolution.y)\n  \t\t) + 0.5) / iResolution.xy;\n  return texture(iChannel0, var_coord);\n}\n\nvoid save_vec4(int var_id, vec4 val, inout vec4 fragColor, vec2 fragCoord) {\n  float id = float(var_id);\n  vec2 d = abs(fragCoord - vec2(\n          mod(id, iResolution.y),\n          floor(id / iResolution.y)\n  \t\t) - 0.5);\n  if (max(d.x, d.y) < 0.5)\n      fragColor = val;\n}\n\n//============================================================\n// END UTIL\n//============================================================\n\nvec4 pages_data[] = vec4[](vec4(0));\n\n#define SPEED 0.3\n\nuvec4 story_line[] = uvec4[](uvec4(1, 1, 0, 0),\n                          uvec4(2, 2, 3, 0),\n                          uvec4(1, 0, 0, 0),\n                          uvec4(2, 4, 5, 0),\n                          uvec4(1, 0, 6, 0),\n                          uvec4(2, 7, 6, 0),\n                          uvec4(1, 0, 0, 0),\n                          uvec4(1, 0, 0, 0));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    vec4 anim_data;\n    vec4 text_state_data;\n    if (iFrame < 10) {\n        anim_data = vec4(iTime, iMouse.z, 0., 1.);\n        text_state_data = vec4(0., 0., 17. / 5., 0.);\n    } else {\n        anim_data = load_vec4(0);\n        text_state_data = load_vec4(1);\n\n        float time = anim_data.x,\n            mouse_z = anim_data.y,\n            anim_state = anim_data.z,\n            anim_pos = anim_data.w;\n        uint next_page = uint(text_state_data.y * 5.),\n            ans_line = uint(text_state_data.z * 5.),\n            curr_page = uint(text_state_data.x * 5.);\n        uvec4 chapter_data = story_line[curr_page];\n\n        // hack\n        if (anim_pos < -0.2 && abs(anim_state - 0.) < 0.01) {\n            anim_pos = 1.;\n        }\n        \n        if (iMouse.z > 0.) {\n            if (curr_page == 0U) {\n                mouse_z = iMouse.z;\n                if (abs(anim_pos - mouse.x) < iTimeDelta * SPEED * 2.) {\n                    anim_pos = mouse.x;\n                } else {\n                    anim_pos -= sign(anim_pos - mouse.x) * iTimeDelta * SPEED * 2.;\n                }\n                next_page = chapter_data[1];\n            } else {\n                int id = int(floor(mouse.y * 16.));\n                \n                if (chapter_data[0] == 1u && id == 1) {\n                    next_page = chapter_data[1];\n                    ans_line = uint(id);\n                    anim_state = 2.;\n                } else if(int(chapter_data[0]) - id > 0) {\n                    anim_state = 2.;\n                    ans_line = uint(id);\n                    next_page = chapter_data[int(chapter_data[0]) - id];\n                }\n            }\n        } else if (iMouse.z <= 0. && mouse_z > 0.) {\n            mouse_z = iMouse.z;\n            if (mouse.x > 0.5) {\n            \tanim_state = 1.;\n            } else {\n                anim_state = 2.;\n            }\n        } else if (iMouse.z <= 0. && mouse_z <= 0. && anim_state > 0.) {\n            if (anim_pos < -0.2) {\n                if (abs(anim_state - 2.) < 0.01) {\n                    curr_page = next_page;\n                    ans_line = uint(17.);\n                }\n                anim_state = 0.;\n                time = iTime;\n            } else {\n                if (abs(anim_state - 1.) < 0.01) {\n                    anim_pos += iTimeDelta * SPEED;\n                } else {\n                    anim_pos -= iTimeDelta * SPEED * 2.;\n                }\n            }\n        }\n        anim_data = vec4(time, mouse_z, anim_state, anim_pos);\n        text_state_data = vec4(float(curr_page) / 5., float(next_page) / 5., float(ans_line) / 5., 0);\n    }\n    \n    save_vec4(0, anim_data, fragColor, fragCoord);\n    save_vec4(1, text_state_data, fragColor, fragCoord);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}