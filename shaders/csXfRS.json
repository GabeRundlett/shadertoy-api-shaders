{
    "Shader": {
        "info": {
            "date": "1688849047",
            "description": "Inspired by this video by Nils Berglund:\n\nhttps://www.youtube.com/watch?v=pN-gi_omIVE\n",
            "flags": 32,
            "hasliked": 0,
            "id": "csXfRS",
            "likes": 17,
            "name": "Wave Equation (263 chars)",
            "published": 3,
            "tags": [
                "2d",
                "wave",
                "simulation",
                "codegolf"
            ],
            "usePreview": 0,
            "username": "fenix",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "// ---------------------------------------------------------------------------------------\n//\tCreated by fenix in 2023\n//\tLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n//  Inspired by this video by Nils Berglund:\n//\n//      https://www.youtube.com/watch?v=pN-gi_omIVE\n//\n//  Buffer A stores the displacement at each pixel in the x coordinate, and the previous\n//  displacement in the y coordinate. The simulation runs according to the formula @28:30:\n//\n//      u(n+1,i,j) = 2u(n,i,j) - u(n-1,i,j) +\n//                   C[u(n,i+1,j) + u(n,i-1,j) + u(n,i,j+1) + u(n,i,j-1) - 4u(n,i,j)]\n//\n//  This simulation looks like it will be fun to experiment with, but for my first very\n//  simple wave equation shader it seemed like a golfing style would be appropriate. If\n//  I do more of these I'll use a clearer style.\n//\n// ---------------------------------------------------------------------------------------\n\nM;\n    O = sin(O.x + vec4(0, 11, 16, 0)); // colorize\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// From SnoopethDuckDuck, -34 chars\n//*\nM.xxyy; // copies the current value from x to y coordinate to record new previous, put current previous into z for us to use\n    vec2 o = vec2(1, 0), R = iResolution.xy;\n    O.x = .5 * (U(u + o) + U(u - o) + U(u + o.yx) + U(u - o.yx)).x - O.z; // apply wave equation\n    O = iFrame == 0 ? step(length(u+u-R), R.y * .2) * o.xyyy : O; // initial condition\n}\n/**/\n\n// Original:\n/*\nM.xxyx; // copies the current value from x to y coordinate to record new previous, put current previous into z for us to use\n    vec2 o = vec2(1, 0), R = iResolution.xy;\n    O.x = 2. * O.x - O.z + .5 * (U(u + o.xy).x + U(u - o.xy).x + U(u + o.yx).x + U(u - o.yx).x - 4. * O.x); // apply wave equation\n    O = iFrame == 0 ? (length(u - .5 * R.xy) < R.y * .1) ? o.xyyy : vec4(0) : O; // initial condition\n}\n/**/\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define U(u) texelFetch(iChannel0, ivec2(u), 0) //\n#define M void mainImage( out vec4 O, vec2 u ) { O = U(u) //",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}