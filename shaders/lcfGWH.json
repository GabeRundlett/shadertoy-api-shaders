{
    "Shader": {
        "info": {
            "date": "1703000921",
            "description": "glass christmas tree toy\nfork of @Efim https://www.shadertoy.com/view/lcfGW8\n-tmm made it a little more colorful, like the one my grandma had",
            "flags": 0,
            "hasliked": 0,
            "id": "lcfGWH",
            "likes": 5,
            "name": "grandmas christmas tree",
            "published": 3,
            "tags": [
                "raymarching",
                "christmas",
                "sdf",
                "repetition",
                "toy"
            ],
            "usePreview": 0,
            "username": "timmaffett",
            "viewed": 194
        },
        "renderpass": [
            {
                "code": "//Fork of @Efim's Christmas Tree https://www.shadertoy.com/view/lcfGW8\n\n// SNOW background from @g1mishr's \"Snow Simple \" https://www.shadertoy.com/view/DlGczD\n#define TILES 10.0\n\n//2D random from https://www.shadertoy.com/view/WstGDj\nfloat random (vec2 uv) {\n    return fract(sin(dot(uv, vec2(135., 263.))) * 103.214532);\n}\n\nvec4 drawSnow(vec2 curid, vec2 uv, vec4 fragColor, float r, float c)\n{\n    float maxoff = 2.0 / TILES; //calculate the max offset a particle can have (two tiles)\n\n    //loop through neighboring tiles\n    for(int x=-2; x<=1; x++)\n    {\n        for(int y=-2; y<=0; y++)\n        {\n            float rad = (1.0 / (TILES * 5.0)) * r; //set default radius\n            vec2 id = curid + vec2(x, y); //get the id of the tile we're visiting\n            vec2 pos = id / TILES; //calculate position\n            float xmod = mod(random(pos), maxoff);\n            pos.x += xmod; //add a random x-offset\n            pos.y += mod(random(pos+vec2(4,3)), maxoff); //add a random y-offset\n            rad *= mod(random(pos), 1.0); //vary the radius by multiplying by a random val\n            pos.x += 0.5*(maxoff-xmod)*sin(iTime*r + random(pos)*100.0); //dynamic sin wave x-offset\n            \n            float len = length(uv - pos); //calculate distance from tile's particle\n\n            //if we're inside the particle, draw it\n            float v = smoothstep(0.0, 1.0, (rad - len) / rad*0.75);\n            fragColor = mix(fragColor, vec4(c), v);      \n        }\n    }\n    \n    return fragColor;\n}\n\n\nvec4 snowBackground( vec2 fragCoord )\n{\n    vec4 fragColor = vec4(0.0);\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.x;\n    uv.y -= 0.3;\n    \n    //uv.x -= 0.6;\n\n    \n    vec3 col = mix(vec3(0.0, 0.45, 0.85), vec3(1), -0.3-uv.y);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    vec4 bg = vec4(.529, .808, .922, 1) * 0.25;\n    vec2 uvNorm = fragCoord.xy / iResolution.xy; //normalized UV coordinate [0, 1]\n    vec2 uvog = fragCoord.xy / iResolution.y; //UV coordinate (will remain static)\n    uv = fragCoord.xy / iResolution.y; //UV coordinate (we'll modify this one)\n    \n    //draw the closest snow layer\n    uv += 0.2*vec2(-iTime, iTime); //move the UV coords based on time\n    vec2 curid = floor(uv * TILES); //calculate the ID associated with the current UV\n    curid += vec2(0.5); //center the ID\n    \n    //if(curid.y > 10.0)\n    {\n    fragColor = drawSnow(curid, uv, fragColor, 1.0, 0.9); //draw closest snow layer\n    \n    //draw the middle snow layer, calculate new UV and ID\n    uv = uvog + 0.1*vec2(-iTime - 100.0, iTime + 100.0);\n    curid = floor(uv * TILES);\n    curid += vec2(0.5);\n    fragColor += drawSnow(curid, uv, vec4(0), 0.75, 0.45); \n    \n    //draw the far snow layer, calculate new UV and ID\n    uv = uvog + 0.05*vec2(-iTime - 150.0, iTime + 150.0);\n    curid = floor(uv * TILES);\n    curid += vec2(0.5);\n    fragColor += drawSnow(curid, uv, vec4(0), 0.5, 0.225);\n    \n    //fragColor = smoothstep(0.0, 3.0, iTime)*fragColor;\n    }\n    return fragColor;\n}\n\n// END Snow Simple https://www.shadertoy.com/view/DlGczD\n\n\n\n#define PI  3.14159265359\n#define TAU 6.28318530718\n#define rot(f) mat2(cos(f), -sin(f), sin(f), cos(f))\n\n#define COLOR_RANGE 128.   //360.\n\n\n\nvec3 hsb2rgb( in vec3 c )\n{\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return (c.z * mix( vec3(1.0), rgb, c.y));\n}\n\n\n\nconst float dist_infin = 10.0;\n#define nn 128\nconst float eps = 0.001;\n\nvec3 sdfColor;\nvec3 resColor;\n\nvec3 col1 = vec3(0.024,0.357,0.153);  // base green\nvec3 col2 = vec3(0.412,0.827,0.439);  //snow highlight\nvec3 col3 = vec3(1., 0.8431, 0.);\nfloat sdfReflect = 0.5;\nfloat resReflect = 0.5;\n\nvec3 csky(vec3 p) {\n    float n = 5., m = 5., dlat = PI / n, dlon = TAU / m;\n    float lon = mod(atan(p.y, p.x), TAU), lat = atan(length(p.xy), p.z);\n    float fo = fract(lon / dlon), fa = fract(lat / dlat);\n\n    float pst = fo * fa * (1. - fo) * (1. - fa);\n    pst = smoothstep(0.0, 0.0625, pst);\n    pst = clamp(pst, 0.1, 1.0);\n    return vec3(pst);\n}\n\nfloat sdSolidAngle(vec3 p, vec2 c, float ra) {\n  // c is the sin/cos of the angle\n    vec2 q = vec2(length(p.xz), p.y);\n    float l = length(q) - ra;\n    float m = length(q - c * clamp(dot(q, c), 0.0, ra));\n    return max(l, m * sign(c.y * q.x - c.x * q.y));\n}\n\nfloat heigthBranch(vec2 p) {\n    float n = 2.5;\n    float df = PI / n / 2.5;\n    float fi = atan(p.y, p.x);\n    float L = length(p.xy);\n    float r = cos(n * fi);\n    if(abs(fi) > df)\n        r = 0.;\n    float d = r - L;\n    float h = smoothstep(0., 0.3, d * L * L);\n    if (h > 0.)\n    {\n        \n        sdfColor = col1;\n        float pst = smoothstep(0.2, 0., abs(L-0.6));\n        sdfColor = mix(col1, col2, pst);\n        sdfReflect = mix(0.2, 0., pst);\n    }\n    return h;\n}\n\nfloat getlon(float lon, float n, float shift) {\n    lon = lon - shift;\n    float dlon = TAU / n, lon1 = floor(lon / dlon) * dlon;\n    if((lon - lon1) >= dlon / 2.)\n        lon1 +=  dlon;\n    return lon1 + shift; ////mod(lon1 + shift, TAU);\n}\n\nfloat sdTree(vec3 p, float l, float r) {\n    float mfi = PI / 8.;\n    float d = sdSolidAngle(p, vec2(sin(mfi), cos(mfi)), l) - r;\n    if(p.y < 0. || p.y > l * cos(mfi)) {\n        sdfColor = col2;\n        sdfReflect = 0.;\n        return d;\n    }\n    sdfColor = col1;\n    sdfReflect = 0.1;\n\n    float n = 8., m = 5., nc = 6., dnc = l/nc;\n    float lss = l/2./m,  ls = 2.*lss;\n    float z = clamp(p.y, 0., l);\n    float lon = mod(atan(p.z, p.x), TAU), dlon = TAU / n;\n\n    \n    float j = floor(z / lss);\n    float h1 = j * lss, shift1 = mod(j, 2.) * dlon / 2.;//,h2 = h1 + lss, shift2 = mod((j + 1.), 2.) * dlon / 2.;\n    float h3 = h1 - lss, shift3 = mod(j - 1., 2.) * dlon / 2.;//h4 = h1 - 2.*lss, shift4 = mod((j - 2.), 2.) * dlon / 2.;\n\n    float lon1 = getlon(lon, n, shift1);//, lon2 = getlon(lon, n, shift2);\n    float lon3 = getlon(lon, n, shift3);//, lon4 = getlon(lon, n, shift4);\n    \n    float h = 0.;\n    if (j < n && h1 > 0.)\n        h = max(heigthBranch(vec2((p.y - h1)/ls, (lon-lon1)/dlon*0.5))*l, h);\n    if (h3 > 0. && h3 + ls < l)\n        h = max(heigthBranch(vec2((p.y - h3)/ls, (lon-lon3)/dlon*0.5))*l, h);\n    \n\n    float blink=1.0-cos(5.0*2.0*iTime);\n    float glowFact = 0.;//blink*0.01;\n    \n\tvec3 glowColor = col1;\n\t\n\t//@Efim's correct logic to avoid loop\n\tfloat level=j;\n\tif(h1+lss-z<z-h1) \n\t\tlevel = j+1.;\n\tif(level>2.0) {\n    \n    ///@Efim's logic computes if there are any iterations of the loop that do anything - and avoids the loop otherwise\n    ///  very nice!\n    ///for(float level=2.0;level<10.0;level+=1.) {\n        //shpere\n        float hp = /*6.*/level*lss;\n        float offset = mod(level,2.0) * mfi;\n        float lonsp = getlon(lon, n, offset);\n        float dx = hp*tan(mfi)*(lon - lonsp);\n        float dy = (z - hp)/cos(mfi), dr = l/15.;\n        float ra = length(vec2(dx, dy)/dr);\n        lonsp=abs(lonsp);\n        if(lonsp<mfi) lonsp+=mfi;\n        float colorfact=lonsp;\n        if (ra < 0.4-(0.2/level))\n        {\n            h = max(sqrt(0.16-ra*ra), h);\n            //sdfColor = vec3(0.698*lonsp,0.098,0.176);\n            sdfColor = hsb2rgb(vec3(offset+COLOR_RANGE/(level*colorfact),1.,blink+0.9));\n            sdfReflect = 0.4;\n//        } else if (ra < 0.4+glowFact) {\n//           glowColor = hsb2rgb(vec3(330./(level*colorfact*1.5),1.,blink+0.9));\n//           sdfReflect = 0.4;\n        }\n    }\n\n    float pst = smoothstep(0.1, 0., fract(z/dnc));\n    sdfColor = mix(sdfColor, col3, pst);\n    sdfReflect = mix(sdfReflect, 0.8, pst);\n    \n    return d * 0.3 - h*0.06*sqrt(z/l);\n\n}\n\nfloat map(vec3 p) {\n    float l = 2.3;\n    p.xy *= rot(PI);\n    p += vec3(0., l / 2., 0.);\n    p.xz *= rot(iTime/2.);\n    float d = sdTree(p, l, 0.05);\n    resColor = sdfColor;\n    resReflect = sdfReflect;\n    return d;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 pos) {\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * map(pos + k.xyy * h) +\n        k.yyx * map(pos + k.yyx * h) +\n        k.yxy * map(pos + k.yxy * h) +\n        k.xxx * map(pos + k.xxx * h));\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l - p), r = normalize(vec3(f.z, 0, -f.x)), u = cross(f, r), c = f * z, i = c + uv.x * r + uv.y * u;\n    return normalize(i);\n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n\n//#define AA 1\n\nvec3 calccolor(vec3 col_in, vec3 backcol, vec3 rd, vec3 light1, vec3 light2, vec3 nor) {\n    vec3 col = col_in;\n    float d = dot(rd, nor);\n    if(d < 0.0)\n        col = backcol;\n\n    nor *= -sign(d);\n    float difu1 = dot(nor, light1);\n    float difu2 = dot(nor, light2);\n    float difu = max(difu1, difu2);\n    col *= clamp(difu, 0.3, 1.0);\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec3 snowBgcol = snowBackground( fragCoord ).rgb;\n    \n    vec3 light = normalize(vec3(1.0, .0, -2.5)); //light\n    vec3 light2 = normalize(vec3(-1.0, -.0, 2.5)); //light\n    vec2 mo = vec2(0.0, 0.0);\n    if  (iMouse.z > 0.0)\n    {\n        mo = (-iResolution.xy + 2.0 * (iMouse.xy)) / iResolution.y;\n    }\n    vec3 ro = vec3(0.0, 0.0, 2.5); // camera\n    //camera rotation\n    ro.yz *= rot(mo.y * PI);\n    ro.xz *= rot(-mo.x * TAU);\n\n    const float fl = 1.5; // focal length\n    float dist = dist_infin;\n\n    //vec3 b1 = vec3(0.23529411764705882, 0.4235294117647059, 0.7725490196078432), b2 = vec3(0.3686274509803922, 0.5725490196078431, 0.8941176470588236);\n    //vec3 bg = mix(b1, b2, vec3((1.0 - abs(fragCoord.x - iResolution.x / 2.) / iResolution.y * 2.) * fragCoord.y / iResolution.x));   \n    vec3 bg = snowBgcol; //mix(b2, b1, fragCoord.y / iResolution.y);   \n    //antialiasing\n    vec3 tot = vec3(0.0);\n    for(int m = 0; m < AA; m++) for(int n = 0; n < AA; n++) {\n            vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n            vec2 p = (-iResolution.xy + 2.0 * (fragCoord + o)) / iResolution.y;\n            vec3 rd = GetRayDir(p, ro, vec3(0, 0., 0), fl); //ray direction\n            vec3 col = bg * bg; // background  \n            //==========================raymatch=============================\n            float td = 0.;\n            vec3 pos = vec3(0.);\n            for(int i = 0; i < nn; i++) {\n                pos = ro + rd * td;\n                float h = map(pos);\n                if(h < eps || td >= dist_infin)\n                    break;\n                td += h;\n            }\n            if(td < dist_infin) {\n                col = resColor;\n                vec3 nor = calcNormal(pos);\n\n                //reflection\n\n                vec3 psk = reflect(rd, nor);\n                vec3 c2 = csky(psk);\n\n                col = calccolor(col, col, -rd, light, light2, nor);\n                col = mix(col, c2, resReflect);\n\n                //col += c2*0.1;\n\n            }\n            //==========================raymatch=============================\n            tot += col;\n        }\n    tot = sqrt(tot) / float(AA);\n    //tot = pow(tot, vec3(0.7)) / float(AA);\n    //antialiasing\n    fragColor = vec4(tot, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}