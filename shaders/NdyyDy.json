{
    "Shader": {
        "info": {
            "date": "1655458295",
            "description": "mandelbrot set zoom in with space shift and arrows",
            "flags": 48,
            "hasliked": 0,
            "id": "NdyyDy",
            "likes": 1,
            "name": "better mandelbrot zoom",
            "published": 3,
            "tags": [
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "Itay_milles",
            "viewed": 209
        },
        "renderpass": [
            {
                "code": "#define MAX_ITR 1300\n#define THRESH 2.\n#define LIGHT_BLUE vec3(218.,112.,214.)/255.\n#define PURPLE vec3(75.,0.,130.)/255.\n#define BLACK vec3(0.)\n\n#define fetchData(buf, addr) texelFetch(buf, addr, 0)\nconst ivec2 SCREEN_COLOR_ADDR = ivec2(0, 0);\n\nvec2 DoubleMul( vec2 a, vec2 b )\n{\n\tvec2 c;\n\t// c = a*b\n\t// (c.y+c.x) = (a.x+a.y)*(b.x+b.y);\n\tc.y = a.y*b.y; // smallest part\n\tfloat l = a.x*b.x; // largest part\n\tfloat r = a.x*b.y + a.y*b.x; // part in-between.\n    c.x = l;\n    c.y += r;\n\treturn c;\n}\n\nvec2 complex_square(vec2 z)\n{\n    return vec2(z.x*z.x - z.y*z.y, 2.*z.x*z.y);\n}\n\nvec2 complex_cubic(vec2 z)\n{\n    float a = z.x;\n    float b = z.y;\n    return vec2(a*a*a-3.*a*b*b+b*a*a, 2.*a*a*b-b*b*b);\n}\n\nvec2 complex_sin(vec2 z)\n{\n    float a = z.x;\n    float b = z.y;\n    return vec2(sin(a)*cosh(b), cos(a)*sinh(b));\n}\n\nfloat mandal(vec2 c)\n{\n    vec2 z = vec2(0.);\n    int i = 0;\n    while (i < MAX_ITR && length(z) < THRESH)\n    {\n        z = complex_square(z) + c;\n        i++;\n    }\n    return float(i)/float(MAX_ITR);\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 1.5*fragCoord/iResolution.xy - .5;\n    uv.x *= 1.7777777777777777777777777777778;\n    uv.x -= 1.;\n    uv.y -= 0.25;\n    \n    vec3 data = fetchData(iChannel0, SCREEN_COLOR_ADDR).xyz;\n    vec2 center = data.xy;\n    \n    float zoom = exp(-0.1*(data.z));\n    uv = center + (uv-center)*zoom;\n\n    float i = mandal(uv);\n    vec3 col = i > 0.95 ? vec3(0.): hsv2rgb(vec3(i, .8, exp(1./(60.*i + 1.8)*3.)));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const ivec2 SCREEN_COLOR_ADDR = ivec2(0, 0);\n#define fetchData(buf, addr) texelFetch(buf, addr, 0)\n#define storeData(buf_pos, addr) ivec2(buf_pos) == addr\n\n// Numbers are based on JavaScript key codes: https://keycode.info/\nconst int LEFT  = 37;\nconst int UP    = 38;\nconst int RIGHT = 39;\nconst int DOWN  = 40;\nconst int SPACE = 32;\nconst int SHIFT = 16;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n        if (storeData(fragCoord, SCREEN_COLOR_ADDR)) {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0); // Initial value\n    }\n\n    if (iFrame > 0) { // After initialization\n        if (storeData(fragCoord, SCREEN_COLOR_ADDR)) {\n            fragColor = fetchData(iChannel0, SCREEN_COLOR_ADDR); // Load value from previous frame\n\n            // Update:\n            float stepsize = .1*exp(-0.1*fragColor.z);\n            fragColor.x += texelFetch(iChannel1, ivec2(LEFT, 0), 0).x*-stepsize;\n            fragColor.x += texelFetch(iChannel1, ivec2(RIGHT, 0), 0).x*stepsize;\n            fragColor.y += texelFetch(iChannel1, ivec2(UP, 0), 0).x*stepsize;\n            fragColor.y += texelFetch(iChannel1, ivec2(DOWN, 0), 0).x*-stepsize;\n            fragColor.z += 3.*exp(-0.02*fragColor.z)*texelFetch(iChannel1, ivec2(SPACE, 0), 0).x;\n            fragColor.z -= 3.*exp(-0.01*fragColor.z)*texelFetch(iChannel1, ivec2(SHIFT, 0), 0).x;\n            fragColor.z = max(fragColor.z, 0.);\n            }\n        }\n    }",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const ivec2 SCREEN_COLOR_ADDR = ivec2(0, 0);\n#define fetchData(buf, addr) texelFetch(buf, addr, 0)\n#define storeData(buf_pos, addr) ivec2(buf_pos) == addr\n\n// Numbers are based on JavaScript key codes: https://keycode.info/\nconst int LEFT  = 37;\nconst int UP    = 38;\nconst int RIGHT = 39;\nconst int DOWN  = 40;\nconst int SPACE = 32;\nconst int SHIFT = 16;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n        if (storeData(fragCoord, SCREEN_COLOR_ADDR)) {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0); // Initial value\n    }\n\n    if (iFrame > 0) { // After initialization\n        if (storeData(fragCoord, SCREEN_COLOR_ADDR)) {\n            fragColor = fetchData(iChannel0, SCREEN_COLOR_ADDR); // Load value from previous frame\n\n            // Update:\n            float stepsize = .1*exp(-0.1*fragColor.z);\n            fragColor.xy += texelFetch(iChannel1, ivec2(LEFT, 0), 0).x*-stepsize;\n            fragColor.xy += texelFetch(iChannel1, ivec2(RIGHT, 0), 0).x*stepsize;\n            fragColor.w += texelFetch(iChannel1, ivec2(UP, 0), 0).x*stepsize;\n            fragColor.w += texelFetch(iChannel1, ivec2(DOWN, 0), 0).x*-stepsize;\n            }\n        }\n    }",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}