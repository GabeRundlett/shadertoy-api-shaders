{
    "Shader": {
        "info": {
            "date": "1440083980",
            "description": "a try to do some flat radial regions\nmy need is to use a uniform array of lights, because the lights may be piloted by another process like this.\nmay be easier i think but it work",
            "flags": 0,
            "hasliked": 0,
            "id": "XtsXD2",
            "likes": 2,
            "name": "Flats Radial Regions",
            "published": 3,
            "tags": [
                "flat",
                "radial",
                "regions"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 1708
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n/*\nA try to do some flat radial regions\nMy needs is to use an uniform array of lights, because the lights may be piloted by another process like this.\nMay be easier i think but it work\n\nChange N for have more regions\n\nfor shadertoy, you can use mouse axis y for control the count angles used at a time\n*/\n\n#define MAX_N 200\n#define DEFAULT_N 50\n\n// must be an uniform out of sahdertoy\nfloat lights[MAX_N];\n\n#define mPi 3.14159\n#define mPi2 6.28318\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 s = iResolution.xy;\n\tvec2 uv = (2.*fragCoord-s)/s.y;\n    \n    float COUNT = float(DEFAULT_N);\n    // for shadertoy => mouse control x of count flat regions\n    if (iMouse.z>0.) COUNT *= iMouse.x/iResolution.x;\n    \n    // for shadertoy => mouse control y of angles\n    float A = COUNT;\n    if (iMouse.z>0.) A *= iMouse.y/iResolution.y;\n    else A *= (sin(iTime)*.5+.5);\n    \n    // for shadertoy the lights array is intialized\n    for (int i=0;i<MAX_N;i++) lights[i] = float(i)/float(COUNT);\n    \n    /*\n    // sound try but move to quickly to be pretty\n\tfloat st = 1./float(N);\n    for (int i=0;i<N;i++)\n    {\n    \tlights[i] = texture( iChannel0, vec2( st*float(i), st*float(i)+1. ) ).x;\n    }\n\t*/\n    \n\tfloat mb = 0.;\n\t\n\tfloat a = 0.;\n\tif (uv.x >= 0.) a = atan(uv.x, uv.y);\n    if (uv.x < 0.) a = mPi - atan(uv.x, -uv.y);\n    \n    \n   float astep = mPi2 / COUNT;\n\tfor (int i=0;i<MAX_N;i++) \n    {\n    \t// for shadertoy => mouse control of angles\n        if (float(i) > A) break;\n        \n        float a0 = astep * float(i);\n        float a1 = astep + a0;\n        \n        if ( a > a0 && a < a1)\n        {\n            mb = lights[i];\n            break;\n        }\n    }\n\n    \n\tfragColor = vec4(1.-mb);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}