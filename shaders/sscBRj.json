{
    "Shader": {
        "info": {
            "date": "1656765996",
            "description": "License CC0: First attempt multiscale tiling\nEveryone loves truchet tiles. Shane did an amazing one: https://www.shadertoy.com/view/4t3BW4\nI was trying to understand what was going and my brain hurt.",
            "flags": 0,
            "hasliked": 0,
            "id": "sscBRj",
            "likes": 16,
            "name": "1st attempt multiscale truchet",
            "published": 3,
            "tags": [
                "2d",
                "truchet"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 297
        },
        "renderpass": [
            {
                "code": "// License CC0: 1st attempt multiscale truchet\n// Everyone loves truchet tiles. Shane did an amazing one: https://www.shadertoy.com/view/4t3BW4\n// I was trying to understand what was going and my brain hurt.\n// Anyway after some tinkering I think I got the gist of it. The idea is brilliant!\n// Compared to Shane's this looks awful but I have a low barrier to what I chose to share :)\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\n// Classic truchet pattern\nfloat df0(vec2 p) {\n  p -= 0.5;\n  vec2 n = round(p);\n  p -= n;\n  float h0 = hash(n+100.0);\n\n  if (h0 > 0.5) {\n    p = vec2(p.y, -p.x);;\n  }\n\n  float d0 = circle(p-0.5, 0.5);\n  float d1 = circle(p+0.5, 0.5);\n  float d = d0;\n  d = min(d, d1);\n  d = abs(d) - 0.125;\n  return d;\n}\n\n// Multiscale truchet\nfloat df1(vec2 p) {\n  vec2 op = p;\n  p -= 0.5;\n  vec2 n = round(p);\n  p -= n;\n  float h0 = hash(n+100.0);\n  float h1 = fract(8667.0*h0);\n\n  // Recurse to df0 for 50% of the tiles\n  if (h1 < 0.5) {\n    // Invert the distance to make inside into outside\n    return -(df0(2.0*op))*0.5;\n  }\n\n  if (h0 > 0.5) {\n    p = vec2(p.y, -p.x);;\n  }\n\n  // Classic truchet with an added circle\n  // so that the outside areas matches up with the nested truchet \n  float d0 = circle(p-0.5, 0.5);\n  float d1 = circle(p+0.5, 0.5);\n  p = abs(p);\n  float d2 = circle(p-0.5, 0.125*1.5);\n  float d = d0;\n  d = min(d, d1);\n  d = abs(d)-0.125*1.5;\n  d = min(d, d2);\n  return d;\n}\n\nfloat df(vec2 p) {\n  return df1(p);\n}\n\nvec3 effect(vec2 p) {\n  float aa = 2.0/RESOLUTION.y;\n  const float amp = 10.0;\n  p += amp*sin(vec2(1.0, sqrt(0.5))*TIME*TAU/(10.0*amp));\n  const float sz = 0.25;\n  float d = df(p/sz)*sz;\n  vec3 col = vec3(0.01);\n  col = mix(col, vec3(0.5), smoothstep(aa, -aa, d));\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  vec2 q = fragCoord/iResolution.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p);  \n  col = sqrt(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}