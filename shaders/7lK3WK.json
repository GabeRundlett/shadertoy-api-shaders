{
    "Shader": {
        "info": {
            "date": "1638380970",
            "description": "Take the planes corresponding to the sides of the octahedron. How many parts do these planes partition the space?\nI counted 59.",
            "flags": 0,
            "hasliked": 0,
            "id": "7lK3WK",
            "likes": 5,
            "name": "Octahedron, and flipped faces",
            "published": 3,
            "tags": [
                "3d",
                "octahedron",
                "pimitives"
            ],
            "usePreview": 0,
            "username": "stlsnk",
            "viewed": 299
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n#define MOUSECTRL 0\n    \nbool is0mod3(int i) {return i % 3 == 0;}\n//#define STPSTOP   true) && !is0mod3(\n//#define STPSTOP 2 !=\n#define STPSTOP false && -1 < \n\n#define AA 1\n\n// Half space\nfloat sdHspace(vec3 p, vec3 nrm, float d) {\n    return dot(p, normalize(nrm)) - d;\n}\n\n// Step: whics sides should be turned, base-3 encoded\nint stp;\n\n// Octahedron\nfloat sdOctahedron(vec3 p, float s) {\n    // Take the sides, pointing towards the centre.\n    float f0 = sdHspace(p, vec3(+1., +1., +1.), s);\n    float f1 = sdHspace(p, vec3(-1., +1., +1.), s);\n    float f2 = sdHspace(p, vec3(+1., -1., +1.), s);\n    float f3 = sdHspace(p, vec3(-1., -1., +1.), s);\n    float f4 = sdHspace(p, vec3(+1., +1., -1.), s);\n    float f5 = sdHspace(p, vec3(-1., +1., -1.), s);\n    float f6 = sdHspace(p, vec3(+1., -1., -1.), s);\n    float f7 = sdHspace(p, vec3(-1., -1., -1.), s);\n    // Flip some sides. i and ~i can't be flipped the same time.\n    if(stp % 3 == 1) f0 = -f0;\n    if(stp % 3 == 2) f7 = -f7;\n    if(stp/3 %3 == 1) f1 = -f1;\n    if(stp/3 %3 == 2) f6 = -f6;\n    if(stp/9 %3 == 1) f2 = -f2;\n    if(stp/9 %3 == 2) f5 = -f5;\n    if(stp/27 %3 == 1) f3 = -f3;\n    if(stp/27 %3 == 2) f4 = -f4;\n    // Intersect the halfspaces\n    return max(f1, max(f2, max(f3, max(f4, max(f5, max(f6, max(f7, f0)))))));    \n}\n\nfloat drHspace(vec3 p, vec3 pd, vec3 nrm, float d) {\n    nrm = normalize(nrm); /*\n    dot((p + po * t), nrm) - d = 0 ; find t\n    dot(p, nrm) + dot(po * t, nrm) - d = 0;\n    dot(p, nrm) - d + t * dot(po, nrm) = 0;\n    t = (dot(p, nrm) - d) / abs(dot(pd, nrm)); */\n    return (dot(p, nrm) - d) / abs(dot(pd, nrm));\n}\n\nfloat drOctahedron(vec3 p, vec3 pd, float s) {\n     \n    // Take the sides, pointing towards the centre.\n    float f0 = drHspace(p, pd, vec3(+1., +1., +1.), s);\n    float f1 = drHspace(p, pd, vec3(-1., +1., +1.), s);\n    float f2 = drHspace(p, pd, vec3(+1., -1., +1.), s);\n    float f3 = drHspace(p, pd, vec3(-1., -1., +1.), s);\n    float f4 = drHspace(p, pd, vec3(+1., +1., -1.), s);\n    float f5 = drHspace(p, pd, vec3(-1., +1., -1.), s);\n    float f6 = drHspace(p, pd, vec3(+1., -1., -1.), s);\n    float f7 = drHspace(p, pd, vec3(-1., -1., -1.), s);\n    // Flip some sides. i and ~i can't be flipped the same time.\n    if(stp % 3 == 1) f0 = -f0;\n    if(stp % 3 == 2) f7 = -f7;\n    if(stp/3 %3 == 1) f1 = -f1;\n    if(stp/3 %3 == 2) f6 = -f6;\n    if(stp/9 %3 == 1) f2 = -f2;\n    if(stp/9 %3 == 2) f5 = -f5;\n    if(stp/27 %3 == 1) f3 = -f3;\n    if(stp/27 %3 == 2) f4 = -f4;\n    // Intersect the halfspaces\n    return max(f1, max(f2, max(f3, max(f4, max(f5, max(f6, max(f7, f0)))))));    \n}\n\nfloat drmap(vec3 p, vec3 pd) {\n    return drOctahedron(p, pd, 0.1);\n}\n\nfloat map( in vec3 pos )\n{\n    return sdOctahedron(pos,0.1);\n}\n\n// Render code largely copied from iq\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // 81 position\n    fragCoord = (fragCoord) * 9.0;\n    //fragCoord -= iResolution.xy * 4.0;\n    stp = int(floor(fragCoord.x / iResolution.x) + floor(fragCoord.y / iResolution.y) * 9.0);\n    stp += 81;\n    fragCoord = vec2(mod(fragCoord.x, iResolution.x), mod(fragCoord.y, iResolution.y));\n    if(any(lessThan(min(fragCoord, iResolution.xy - fragCoord), vec2(1. * 9.0)))) {\n        fragColor = vec4(1., 1., 1., 1.);\n        return;\n    }\n    \n    if( (STPSTOP\n        +int(stp / 1 % 3 != 0)\n        +int(stp / 3 % 3 != 0)\n        +int(stp / 9 % 3 != 0)\n        +int(stp /27 % 3 != 0)\n        )) {\n        fragColor = vec4(.5, .5, .5, 1.);\n        return;\n    }\n\n     // camera movement\t\n    #if MOUSECTRL\n    float an = iMouse.x / iResolution.x * 2. - 1.;\n    float an2 = -(iMouse.y / iResolution.y * 2. - 1.);\n    #else\n\tfloat an = 0.37*(iTime-10.0);\n    float an2 = 0.98*sin(iTime);\n    #endif\n    vec3 ro = normalize(vec3( cos(3.14*an) , an2 / (1. - an2*an2), sin(3.14*an) )) * 1.0;\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n        \n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww ) * 1.0;\n\n        // raymarch\n        const float tmax = 3.0;\n        float t = 0.0;\n        for( int i=0; i<256; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = drmap(pos, rd);\n            if( h<0.0001 || t>tmax ) {\n                break;\n            }\n            t += h;\n        }\n        \n    \n        // shading/lighting\t\n        vec3 col = vec3(0.0);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            float dif = clamp( dot(nor,2.0*vec3(0.5,0.4,0.3)), 0.0, 1.0 );\n            float dif2 = clamp( dot(nor,2.0*vec3(0.4,-0.3,-0.5)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,0.8,0.6));\n            col = vec3(0.0,0.0,1.0)*amb + vec3(0.0,1.0,0.0)*dif + vec3(1.0, 0.0, 0.0)*dif2;\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}