{
    "Shader": {
        "info": {
            "date": "1686545223",
            "description": "playing around with shaders. Killing time. Having fun",
            "flags": 64,
            "hasliked": 0,
            "id": "DsfyR8",
            "likes": 1,
            "name": "Fork Soap Bubbl notdaniel 213",
            "published": 3,
            "tags": [
                "raymarching",
                "simple",
                "music"
            ],
            "usePreview": 0,
            "username": "notdaniel",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "mat3 rotateYmat(float ang)\n{\n    return mat3(cos(ang), 0.0, sin(ang),\n                0.0, 1.0, 0.0,\n                -sin(ang), 0.0, cos(ang));\n}\nmat3 rotateXmat(float ang)\n{\n    return mat3(1.0, -0.0, 0.0,\n                0.0, cos(ang), -sin(ang),\n                0.0, sin(ang), cos(ang));\n}\n\nmat3 rotateZmat(float ang)\n{\n    return mat3(cos(ang), -sin(ang), 0.0,\n                sin(ang), cos(ang), 0.0,\n                0.0, 0.0, 1.0);\n}\n\nfloat map( vec3 p, vec3 origin, float s )\n{    \n    vec3 offset = vec3(sin(p.x*2. + iTime*2.),cos(p.z*10. + iTime*2.),1.0)*0.1;\n\tfloat d = length(p + offset - origin)- s;\n\toffset = vec3(sin(p.x*3. + iTime*2.),cos(p.z*2. + iTime*2.),1.0)*0.2;\n    for(int i = 0; i < 3; i++)\n    {\n        \n        float prism2 = length(p + offset*float(i) - origin)- s;\n        d = max(d, -prism2);\n    }\n  \treturn d;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv = uv*2.0-1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    mat3 rotation = //mat3(1.0);\n      rotateXmat(iTime*0.4)*rotateYmat(iTime*0.5);\n    vec3 direction = normalize(vec3(uv.x,uv.y, 1.0)*rotation);\n\n\n   \n    \n    float t = 0.0;\n\tvec3 p;\n    vec3 finalColor; \n\t\n    vec3 origin = vec3(0.,0.,-4.)*rotation;\n    vec3 offset;\n    vec3 sphereOrigin = vec3(0., 0., 0.0);\t\t\t\t\n\n    vec4 sound = texture (iChannel0,vec2(fragCoord.x/iResolution.x, 0.75));      \n    float soundColor = texture (iChannel0,vec2(0.5, 0.75)).x;   \n \n    vec3 color = vec3(.5 + sin(uv.x+iTime +soundColor*50.)*.4,.5 +cos(uv.y+iTime + soundColor*5.)*.5,.5);\n    for (int k = 0; k <15; k++)\n    {\n        p = origin + t*direction;\n        float d = map(p,sphereOrigin, 2.0);\n\n        {\n            vec3 directionalOffset = -normalize(p)*sound.x*normalize(vec3(uv, 1.0));\n            vec3 position = p + directionalOffset;\n            float radius = 0.1+float(k)*.5;        \n            float lineThickness = 0.02 + float(k)*0.01;\n            //position.y += position.y*abs(uv.x);\n            float distanceFromCenter = length(position);\n            float condition = step( distanceFromCenter, radius)\n                - step(distanceFromCenter, radius - lineThickness);\n            finalColor += color*condition;\n        }\n\n        t += d;\n    }\n    float fog = 1.0/(1.0+t*t*0.1);\n    fragColor = vec4(finalColor+color*vec3(fog), fog);    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 33588,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/bt/mercury-solace-helsloot-remix"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}