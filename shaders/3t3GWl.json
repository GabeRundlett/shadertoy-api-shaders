{
    "Shader": {
        "info": {
            "date": "1577851679",
            "description": "Happy New Year!",
            "flags": 0,
            "hasliked": 0,
            "id": "3t3GWl",
            "likes": 2,
            "name": "Puma Stripe Logo",
            "published": 3,
            "tags": [
                "puma"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 320
        },
        "renderpass": [
            {
                "code": "// All the distance functions from:https://iquilezles.org/articles/distfunctions\n// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 200\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n#define PI 3.14159265\n\n\nvec4 combine(vec4 val1, vec4 val2 ){\n    return (val1.w < val2.w)?val1:val2;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// https://www.shadertoy.com/view/wdGXzK\n// http://mercury.sexy/hg_sdf/\nvec2 pModPolar(inout vec2 p, float repetitions, float fix) {\n    float angle = 2.0*PI/repetitions;\n    float a = atan(p.y, p.x) + angle/2.;\n    float r = length(p);\n    float c = floor(a/angle);\n    a = mod(a,angle) - angle/2.*fix;\n    p = vec2(cos(a), sin(a))*r;\n\n    return p;\n}\n\n// puma logo\nfloat dPumaLogo(vec3 p, float artifact) {\n    float y = 0.25;\n    // stripe\n    mat3 rot = matRotateX(radians(90.0));\n    float dstripe0 = sdCappedCylinder((p-vec3(0.0,1.0+y,0.0))*rot,1.0,0.1);\n    float dstripe1 = sdCappedCylinder((p-vec3(-1.15,1.0+y,0.0))*rot,1.0,0.2);\n    \n    mat3 rotZ = matRotateZ(radians(6.0));\n    vec3 bp = (p-vec3(-0.63,1.88+y,0.0));\n    \n    const float k = -1.0;\n    float c = cos(k*bp.x);\n    float s = sin(k*bp.x);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m*bp.xy,bp.z);\n    \n    mat3 rotZ2 = matRotateZ(radians(3.5));\n    vec3 bp2 = (p-vec3(-0.85,1.87+y,0.0));\n    float sc = mix(1.5,0.77,smoothstep(-1.0,1.0,bp2.x));\n    bp2.y *= sc;    \n    \n    float dstripe2 = sdBox(q*rotZ,vec3(1.0,0.15,0.1))*0.6;\n    float dstripe3 = sdBox(bp2*rotZ2,vec3(1.0,0.15,0.1))*0.6;\n    \n    float dstripe = min(max(-p.y+1.3,max(-dstripe1,dstripe0 )),min(max(-p.x-0.5, dstripe2),dstripe3));\n    \n    // logo outline\n    p.x *= 0.55;\n    float doutline0 = sdCappedCylinder((p-vec3(-0.2,1.55+y,0.0))*rot,1.1,0.1)*artifact;\n    float doutline1 = sdCappedCylinder((p-vec3(-0.2,1.55+y,0.0))*rot,1.0,0.2)*artifact;\n    float doutline = max(-doutline1,doutline0);\n    return min(dstripe,doutline);\n}\n\nvec4 pumaLogo(vec3 p){\n    p.y -= iTime*5.0;\n    p.y = mod(p.y,10.0)-5.0;\n    p *=  matRotateY(radians(-90.0));\n    p*=0.8;\n    \n    \n    float dlogo = dPumaLogo(p,0.3);\n    \n    return vec4(vec3(1.0),dlogo*0.9);\n}\n\nfloat dTwoZeroX2(vec3 p) {\n    vec3 prevP = p;\n    p.x = mod(p.x,2.8)-1.4;\n    \n    vec3 twoPos = vec3(-0.7,0.0,0.0);\n    float dtwo = sdBox(p+twoPos,vec3(0.6,1.0,0.1));\n    float dtwo1 = sdBox(p+twoPos+vec3(-0.6,-0.4,0.0),vec3(0.8,0.25,0.2));\n    float dtwo2 = sdBox(p+twoPos+vec3(0.6,0.45,0.0),vec3(0.8,0.25,0.2));\n    float dresTwo = max(-dtwo2,max(-dtwo1,dtwo))*0.9;\n    \n    vec3 zeroPos = vec3(0.7,0.0,0.0);\n    float dzero = sdBox(p+zeroPos,vec3(0.6,1.0,0.1));\n    float dzero1 = sdBox(p+zeroPos,vec3(0.3,0.7,0.2));\n    float dresZero = max(-dzero1,dzero)*0.9;\n    \n    p = prevP;\n    \n    float dres = max(sdBox(p,vec3(2.8,2.0,0.3)),min(dresTwo,dresZero));\n    return dres*0.9;\n}\n\nfloat cubicInOut(float t) {\n    return t < 0.5\n    ? 4.0 * t * t * t\n    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\n}\n\n// A smart way to control the animation. function is from \"http://qiita.com/gaziya5/items/29a51b066cb7d24983d6\"\nfloat animscene(in float t, float w, float s) {\n    return clamp(t - w, 0.0, s) / s;  \n}\n\nvec4 GetDist(vec3 p) {\n    vec3 prevP = p;\n    \n    p.xz = pModPolar(p.xz,10.0,1.0);\n    p.x -= 20.0;\n    \n    vec4 logo = pumaLogo(p);\n    \n    p = prevP;\n    float d2020 = dTwoZeroX2(p);\n    float dlogo = dPumaLogo(p+vec3(0.0,1.7,0.0),0.6);\n    \n    float animTime = mod(iTime,6.0);\n    float morphVal = 0.0;\n    morphVal += cubicInOut(animscene(animTime, 1.0, 1.0))*1.0;\n    morphVal -= cubicInOut(animscene(animTime, 3.0, 1.0))*1.0;\n    \n    vec4 logo2 = vec4(vec3(1.0),mix(dlogo,d2020,morphVal));\n    \n    vec4 model = combine(logo,logo2);\n    return model;\n}\n\nvec4 RayMarch(vec3 ro, vec3 rd) {\n    vec4 dO= vec4(0.0);\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO.w;\n        vec4 dS = GetDist(p);\n        dO.w += dS.w;\n        dO.xyz = dS.xyz;\n        if(dO.w>MAX_DIST || dS.w<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).w;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).w,\n        GetDist(p-e.yxy).w,\n        GetDist(p-e.yyx).w);\n    \n    return normalize(n);\n}\n\nfloat shadowMap(vec3 ro, vec3 rd){\n    float h = 0.0;\n    float c = 0.001;\n    float r = 1.0;\n    float shadow = 0.5;\n    for(float t = 0.0; t < 30.0; t++){\n        h = GetDist(ro + rd * c).w;\n        if(h < 0.001){\n            return shadow;\n        }\n        r = min(r, h * 16.0 / c);\n        c += h;\n    }\n    return 1.0 - shadow + r * shadow;\n}\n\nfloat GetAmbientOcclusion(vec3 p, vec3 n)\n{\n    const int steps = 4;\n    const float delta = 0.15;\n\n    float a = 0.0;\n    float weight = 4.;\n    for(int i=1; i<=steps; i++) {\n        float d = (float(i) / float(steps)) * delta; \n        a += weight*(d - RayMarch(p + n*d,n).w);\n        weight *= 0.5;\n    }\n    return clamp(1.0 - a, 0.0, 1.0);\n}\n\nvec2 GetLight(vec3 p) {\n    vec3 lightPos = vec3(2,8,3);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l).w;\n\n    float ao = GetAmbientOcclusion(p,n);\n    \n    float lambert = max(.0, dot( n, l))*0.1;\n    \n    float shadow = shadowMap(p + n * 0.001, l);\n    \n    return vec2((lambert+dif*ao),max(0.9, shadow)) ;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 bg(vec2 p){\n    vec3 col = .94*max(mix(vec3(0.0,0.5,0.0)+(.1-length(p)/3.),vec3(1),.1),0.);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 4, -5);\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    ro.xz *= Rot(radians(iTime*-30.0));\n    ro.yz *= Rot(radians(30.0));\n    #endif\n    \n    vec3 rd = R(uv, ro, vec3(0,1,0), 1.);\n\n    vec4 d = RayMarch(ro, rd);\n    \n    if(d.w<MAX_DIST) {\n        vec3 p = ro + rd * d.w;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd,n);\n        float spec = pow(max(0.0,r.y),20.);\n        float dif = dot(n,normalize(vec3(1,2,3)))*0.5+0.5;\n        col = mix(bg(r.xy),vec3(dif),0.5)+spec;\n    } else {\n        // background\n        col = bg(uv);\n    }\n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}