{
    "Shader": {
        "info": {
            "date": "1726122149",
            "description": "Three spheres.",
            "flags": 0,
            "hasliked": 0,
            "id": "X3XyDn",
            "likes": 0,
            "name": "9-11-2024",
            "published": 3,
            "tags": [
                "circle"
            ],
            "usePreview": 0,
            "username": "8coolguy",
            "viewed": 63
        },
        "renderpass": [
            {
                "code": "#define pi 3.14\n\nstruct Surface {\n    float signedDistance;\n    vec3 color;\n};\nSurface sdSphere(vec3 p, float r, vec3 offset, vec3 col){\n    return Surface(length(p - offset) - r,col);\n}\nSurface sdBox(vec3 p, vec3 b, vec3 offset, vec3 col){\n    p = p - offset;\n    vec3 q = abs(p) - b;\n    return Surface(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0),col);\n}\nSurface sdFloor(vec3 p, vec3 col){\n    return Surface(p.y + 1., col);\n}\nSurface minWithColor(Surface obj1, Surface obj2) {\n    if (obj2.signedDistance < obj1.signedDistance) return obj2; // The sd component of the struct holds the \"signed distance\" value\n    return obj1;\n}\nSurface sdScene(vec3 p){\n    vec3 path = vec3(cos(1.0*iTime),sin(1.0*iTime),0)/2.2;\n    Surface s1 = sdBox(p,vec3(1,1,1), path, vec3(1, 0, 0));\n    path = vec3(cos(1.0*iTime+(pi/2.)),sin(1.0*iTime+(pi/2.)),0)/2.2;\n    Surface s2 = sdBox(p,vec3(1,1,1), path, vec3(0, 1, 0));\n    path = vec3(cos(1.0*iTime+(pi*3.)),sin(1.0*iTime+(pi*3.)),0)/2.2;\n    Surface s3 = sdBox(p,vec3(1,1,1), path, vec3(0, 0, 1));\n    \n    \n    vec3 floorColor = vec3(1. + 0.7*mod(floor(p.x) + floor(p.z), 2.0));\n    Surface flr = sdFloor(p, floorColor);\n    \n    return minWithColor(minWithColor(s3,minWithColor(s1,s2)),flr);\n}\n\nSurface rayMarch(vec3 ro, vec3 rd, float start, float end){\n    float depth = start;\n    Surface d;\n    for (int i = 0; i < 255; i++) {\n        vec3 p = ro + depth * rd;\n        d = sdScene(p);\n        depth += d.signedDistance;\n        if (d.signedDistance < 0.001 || depth > end) break;\n    }\n    d.signedDistance = depth;\n    return d;\n}\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005; // epsilon\n    float r = 1.; // radius of sphere\n    return normalize(\n        e.xyy * sdScene(p + e.xyy).signedDistance +\n        e.yyx * sdScene(p + e.yyx).signedDistance +\n        e.yxy * sdScene(p + e.yxy).signedDistance +\n        e.xxx * sdScene(p + e.xxx).signedDistance);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   vec3 backgroundColor = vec3(0.835, 1, 1);\n   \n   vec3 lightPosition = vec3(2, 3, 3);\n   vec3 col = vec3(0);\n   vec3 orgRo = vec3(0, 1, 4);\n   vec3 ro = vec3(.01*iMouse.x, .01*iMouse.y, 4);\n   \n   vec3 rd = normalize(vec3(uv, -1));\n   \n   Surface d = rayMarch(ro, rd, 0., 100.);\n   \n   \n   if (d.signedDistance > 100.0){\n       col = backgroundColor; // ray didn't hit anything\n   } else {\n       vec3 p = ro + rd * d.signedDistance;\n       vec3 normal = calcNormal(p);\n       \n       vec3 lightDirection = normalize(lightPosition - p);\n       \n       float dif = clamp(dot(normal, lightDirection), 0.3, 1.);\n       col = vec3(dif); // ray hit something\n       col = dif * d.color + backgroundColor * .2;\n   }\n   \n   fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}