{
    "Shader": {
        "info": {
            "date": "1727804922",
            "description": "pulse shield effect",
            "flags": 0,
            "hasliked": 0,
            "id": "XXsyWM",
            "likes": 2,
            "name": "pulse shield",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "cartoon",
                "loop"
            ],
            "usePreview": 0,
            "username": "Krapas",
            "viewed": 62
        },
        "renderpass": [
            {
                "code": "const float PI = 3.141589653689;\nconst float ps = .015;\n\nvec3 pal[] = vec3[6](\n    vec3(6./255., 23./255., 92./255.),\n    vec3(29./255., 68./255., 152./255.),\n    vec3(48./255., 137./255., 218./255.),\n    vec3(31./255., 209./255., 229./255.),\n    vec3(121./255., 243./255., 249./255.),\n    vec3(226./255., 255./255., 255./255.)\n);\n\nvec3 n_rand3(vec3 p) {\n\n    vec3 r = \n        fract(\n            sin(\n                vec3(\n                    dot(p, vec3(127.1,311.7,371.8)),\n                    dot(p,vec3(269.5,183.3,456.1)),\n                    dot(p,vec3(352.5,207.3,198.67))\n                )\n            ) * 43758.5453\n        ) * 2.0 - 1.0;\n    return normalize(vec3(r.x/cos(r.x), r.y/cos(r.y), r.z/cos(r.z)));\n}\n\nfloat noise(vec3 p) {\n\n    vec3 fv = fract(p);\n    vec3 nv = vec3(floor(p));\n    \n    vec3 u = fv*fv*fv*(fv*(fv*6.0-15.0)+10.0);\n    \n    return (\n        mix(\n            mix(\n                mix(\n                    dot( n_rand3( nv+vec3(0.0,0.0,0.0) ), fv-vec3(0.0,0.0,0.0)), \n                    dot( n_rand3( nv+vec3(1.0,0.0,0.0) ), fv-vec3(1.0,0.0,0.0)), \n                    u.x\n                ), \n                mix(\n                    dot( n_rand3( nv+vec3(0.0,1.0,0.0) ), fv-vec3(0.0,1.0,0.0)), \n                    dot( n_rand3( nv+vec3(1.0,1.0,0.0) ), fv-vec3(1.0,1.0,0.0)), \n                    u.x\n                ), \n                u.y\n            ),\n            mix(\n                mix(\n                    dot( n_rand3( nv+vec3(0.0,0.0,1.0) ), fv-vec3(0.0,0.0,1.0)), \n                    dot( n_rand3( nv+vec3(1.0,0.0,1.0) ), fv-vec3(1.0,0.0,1.0)), \n                    u.x\n                ), \n                mix(\n                    dot( n_rand3( nv+vec3(0.0,1.0,1.0) ), fv-vec3(0.0,1.0,1.0)), \n                    dot( n_rand3( nv+vec3(1.0,1.0,1.0) ), fv-vec3(1.0,1.0,1.0)), \n                    u.x\n                ), \n                u.y\n            ),\n            u.z\n       )\n  );\n}\n\nvec3 distortion(vec3 pos)\n{\n\n    float h_top = noise(pos + vec3(0.0, 1.0, 0.0));\n    float h_bottom = noise(pos + vec3(0.0, -1.0, 0.0));\n    float h_right = noise(pos + vec3(1.0, 0.0, 0.0));\n    float h_left = noise(pos + vec3(-1.0, 0.0, 0.0));;\n    \n    vec2 diff = vec2(h_right - h_left, h_top - h_bottom);\n    vec3 normal = normalize(vec3(diff, iResolution.x/iResolution.y));\n    \n    return normal;\n}\n\nfloat pulse(vec2 pos)\n{\n    float frequency = 1.75;\n    float ringWidth = .25;\n    float timeScale = 3.;\n\n    float w = cos(pow(length(pos)*frequency,2.)-iTime*timeScale);\n    float c = pow((-cos(length(pos)*PI)*.5+.5) * (step(-2.,length(pos))-step(2.,length(pos))),1./ringWidth);\n    \n    return w * c;\n}\n\nfloat spiral(vec2 pos)\n{\n    float p = atan(pos.y, pos.x) * 12.;\n    float t = length(pos) * 12.;\n    float r = iTime * 8.;\n    \n    return sin(p+t+r);\n}\n\nfloat value(vec2 pos)\n{\n    //getting pulse value\n    vec2 pPos = pos * 3.;\n    vec3 pDisPos = vec3(pos, iTime) * vec3(vec2(2.),1.);\n    vec2 pDis = distortion(pDisPos).xy * .5;\n    pPos += pDis;\n    float p = pulse(pPos);\n    p = abs(p)*2.-1.1;\n    \n    //getting spiral value\n    vec2 sPos = pos * 6.;\n    float s = spiral(sPos+pDis);\n    s *= .15;\n    \n    //getting noise value\n    vec3 nPos = vec3(pos, iTime) * vec3(vec2(4.),1.);\n    vec3 nDisPos = vec3(pos, iTime) * vec3(vec2(2.),1.);\n    vec3 nDis = distortion(pDisPos) * 3.;\n    nPos += nDis;\n    float n = noise(nPos);\n    n *= 1.35;\n    \n    return p+s+n;\n}\n\nfloat posterize(float v, int n)\n{\n    float fn = float(n);\n    return floor(v*fn)/(fn-1.);\n}\n\nvec2 grad( vec2 x )\n{\n    vec2 h = vec2( 0.01, 0.0 );\n    return vec2( value(x+h.xy) - value(x-h.xy),\n                 value(x+h.yx) - value(x-h.yx) )/(2.0*h.x);\n}\n\nfloat border (vec2 uv)\n{\n\n    float v = value( uv );\n    vec2  g = grad( uv );\n    float de = abs(v)/length(g);\n    float eps = .07;\n    \n    return smoothstep( 1.0*eps, 2.0*eps, pow(de,1./2.) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pos = uv - vec2(.5, .5);\n    pos.x *= iResolution.x/iResolution.y;\n    pos *= 1.25;\n    \n    vec2 ppos = round(pos/ps)*ps;\n    \n    int pl = pal.length();\n    \n    float v = value(ppos);\n    float b = border(ppos); /*(\n        value(ppos+vec2(0.,ps)) > 0. ||\n        value(ppos+vec2(ps,0.)) > 0. ||\n        value(ppos+vec2(0.,-ps)) > 0. ||\n        value(ppos+vec2(-ps,0.)) > 0.\n    ) ? 0. : 1.;*/\n    \n    float d = (texture(iChannel0,fragCoord/iChannelResolution[0].x).x-.5)*(1./float(pl));\n    float a = step(0., v);\n    vec3 col = a > 0. ? \n        pal[int(posterize(v+d, pl)*float(pl))] - vec3(1.-a) : \n        vec3(b-.5);\n    \n\n    fragColor = vec4(col, v);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}