{
    "Shader": {
        "info": {
            "date": "1504269165",
            "description": "Great thanks to Inigo Quilez, Ollj and FabriceNeyret2! IÂ´ve finally learned some raymarching. :-)\n\nNOTE: Set treeDetail to 0.0 if FPS is too low.\n\nHOLD DOWN left mouse button and move the mouse to interact. Hope you like it! Enjoy!",
            "flags": 96,
            "hasliked": 0,
            "id": "ltlyz4",
            "likes": 31,
            "name": "Winterlands ",
            "published": 3,
            "tags": [
                "3d",
                "waves",
                "raymarch",
                "raycast",
                "clouds",
                "water",
                "sky",
                "volumetric",
                "heightmap",
                "mountains",
                "trees"
            ],
            "usePreview": 0,
            "username": "ingagard",
            "viewed": 2612
        },
        "renderpass": [
            {
                "code": "#define rotate(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nvec3 light = vec3(2.0, 3.0, 2.0);\nfloat camRot=1.4;\nvec2 cam_Adress = vec2(0.0, 0.0);\nvec2 cam_RotAdress = vec2(0.0, 1.0);\nvec3 camPos = vec3(0, 0, 0);\nvec2 scroll;\n\nconst vec3 eps = vec3(0.02, 0.0, 0.0);\nconst int maxRaySteps=360;\nconst float waterLevel = 9.7;\nconst float treeDetail = 0.2; //0.0; Change if FPS is too low\nconst float texWaterLevel = 0.097;\nconst float treeSpacing = 1.8;\nconst float treeSpacingFactor = 1.0/1.2;\nconst float treeSpacingScaler = 0.018*1.2;\nconst vec2 half_treeSpacing = vec2(0.6);\n\n\nstruct RayHit\n{\n  bool treeHit;\n  bool hit;  \n  vec3 hitPos;\n  vec3 normal;\n  float dist;\n  float depth;\n  float steps;\n  float unclampedHeight;\n  float terrainHeight;\n  float treeHeight;\n};\n\nbool treeHit;\nfloat terrainHeight;\nfloat treeHeight;\nfloat unclampedHeight;\nvec2 testPoint;\nvec2 test; \nvec2 pointWithoutMod;\nfloat heightMod;\n\nfloat GetTerrainHeight(in vec2 p)\n{\n  treeHit=false;\n  float col = textureLod(iChannel0, p*0.125, 0.0).r*0.20;\n  col -= textureLod(iChannel0, p*0.15, 0.0).r*0.191;\n  col += textureLod(iChannel0, p*0.15, 0.0).r*0.1;\n\n\n  // create trees at the right height level\n  if (col<texWaterLevel-0.003 && col>texWaterLevel-0.120)\n  {\n    testPoint = (p*300.0)+col*12.0;\n    test = mod(testPoint, treeSpacing+(col*treeDetail));           \n    pointWithoutMod =  testPoint - test; \n    heightMod = textureLod(iChannel0, pointWithoutMod*2.325, 0.0).r;\n\n\n    treeHeight = (heightMod-pow(treeSpacingFactor*distance(test, half_treeSpacing), 1.0+heightMod))*treeSpacingScaler;      \n    treeHeight -= (0.45*distance(col, texWaterLevel-0.0075));\n\n    if (treeHeight>0.002 )\n    {\n      col -= treeHeight;\n      treeHit=true;\n    }\n  }\n  // add stones at beach\n  if (col>texWaterLevel-0.01)\n  {\n\n    heightMod = textureLod(iChannel0, p*3.0, 0.0).r;\n\n\n    float stoneHeight = ((heightMod*0.03)-0.015);\n\n    if (stoneHeight>0.001)\n    {\n      col -= stoneHeight;\n    }\n  }\n\n  unclampedHeight = col;\n  terrainHeight = clamp(col, -1.0, texWaterLevel);\n  return terrainHeight;\n}\n\n\n\nfloat TerrainDistance( in vec3 p)\n{\n  return p.y + GetTerrainHeight(vec2(p.xz)+scroll);\n}\n\n\nvec3 CalcNormal( in vec3 pos )\n{    \n  return normalize( vec3(TerrainDistance(pos+eps.xyy) - TerrainDistance(pos-eps.xyy), 0.5*2.0*eps.x, TerrainDistance(pos+eps.yyx) - TerrainDistance(pos-eps.yyx) ) );\n}\n\n\nfloat TerrainSoftShadow( in vec3 origin, in vec3 direction )\n{\n  float res = 2.0;\n  float t = 0.0;\n  float hardness = 6.0;\n  for ( int i=0; i<8; i++ )\n  {\n    float h = TerrainDistance(origin+direction*t);\n    res = min( res, hardness*h/t );\n    t += clamp( h, 0.02, 0.10 );\n    if ( h<0.002 ) break;\n  }\n  return clamp( res, 0.0, 1.0 );\n}\n\n\n\nRayHit TerrainMarch(in vec3 origin, in vec3 direction)\n{\n  RayHit result;\n  result.treeHit = false;\n  float maxDist = 1.0, precis = 0.007;\n  float t = 0.0, dist = 0.0, distStep = 0.1;\n  vec3 rayPos =vec3(0);\n\n  for ( int i=0; i<maxRaySteps; i++ )\n  {\n    rayPos =origin+direction*t;\n    dist = TerrainDistance( rayPos);\n\n    if (abs(dist)<precis || t>maxDist )\n    {        \n      result.hit = !(t>maxDist);\n      result.depth = t; \n      result.dist = dist;                              \n      result.hitPos = origin+((direction*t)*0.99);   \n      result.steps = float(i);\n      result.unclampedHeight=unclampedHeight;\n      result.treeHit = treeHit;\n      result.terrainHeight = terrainHeight;\n      result.treeHeight = treeHeight;\n      break;\n    }\n    t += dist*distStep;\n  }\n\n  return result;\n}\n\n\n\nvec4 read(in sampler2D buffer, in vec2 memPos, vec2 resolution)\n{\n  return texture(buffer, (memPos+0.5)/resolution, -100.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n\n  if (iFrame>0)\n  {\n    camPos = read(iChannel3, cam_Adress, iChannelResolution[3].xy).rgb;\n    camRot = read(iChannel3, cam_RotAdress, iChannelResolution[3].xy).r;\n  }\n\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  if (iMouse.z>0.0) camRot= (iMouse.x - iResolution.x * 0.5)*0.01;   \n  //float camPitch= (iMouse.y - iResolution.y * 0.25)*0.01;   \n\n  vec3 camOrigin = vec3(0, 0, -2);\n  vec2 screenSpace = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n  screenSpace-=0.2;\n    \n  scroll = camPos.xy;\n  vec3 directionRay = normalize(vec3(screenSpace, 1.0));\n    \n  directionRay.xz *= rotate(camRot);\n  directionRay = normalize(directionRay);\n    \n  vec3 sunPos = normalize(vec3(0.3, 0.7, 1.0));\n  vec4 sunColor = vec4(0.80, 0.7, 0.55, 1.0);\n\n  vec4 haze =  mix(vec4(0.9), vec4(0.6, 0.7, 0.8, 1.0), smoothstep(0., 0.6, abs(directionRay.y*2.0))); \n  haze =  mix(haze, vec4(0.6, 0.7, 0.8, 1.0), smoothstep(0., 1.1, abs(directionRay.y*1.1))); \n\n  vec2 cloudUV = vec2(uv.x, distance(0.0, uv.y) * 1.0); \n\n  vec4 color = haze;\n  vec4 clouds = vec4(texture(iChannel3, cloudUV).a);\n\n  float cloudOpacity = clouds.a;\n  vec4 cloudNormal = vec4(vec4(normalize(vec3(texture(iChannel3, cloudUV + vec2(-0.001, 0)).a-texture(iChannel3, cloudUV + vec2(+0.001, 0)).a, texture(iChannel3, cloudUV + vec2(0, -0.001)).a-texture(iChannel3, cloudUV + vec2(0, +0.001)).a, .02)), 1.0).xyz * 0.5 + 0.5, 1.);\n\n  float cloudInt = (cloudNormal.r+cloudNormal.g+cloudNormal.b)*0.333;\n\n  color = max(color, (color+cloudInt)*0.5);\n\n\n  float diff2= clamp(dot(cloudNormal.xyz, sunPos-directionRay), 0.0, .80);\n\n  clouds*=diff2*sunColor;\n  color += color*clouds;\n\n\n  RayHit marchResult = TerrainMarch(camOrigin, directionRay);\n\n\n  if (marchResult.hit)\n  {\n    // get raymarch normal\n    marchResult.normal = CalcNormal(marchResult.hitPos);  \n\n    float height =  marchResult.terrainHeight*100.0;\n    float realHeight =  marchResult.unclampedHeight*100.0;\n    vec4 waterColor = color;\n    vec2 waterMotion = vec2(float(iTime)*.005, float(iTime)*.0012);\n\n    // check if area is below water level\n    if (height+0.2>waterLevel && !marchResult.treeHit)\n    {\n      vec4 bottomColor = texture(iChannel2, (marchResult.hitPos.xz+scroll)*22.30);\n      float scale1 = 14.0;\n      float scale2 = 16.0;\n      float scale3 = 22.0;\n      vec2 uvCoord = (marchResult.hitPos.xz+scroll+waterMotion)*scale1;\n\n      vec4 wavenormal = vec4(vec4(normalize(vec3(texture(iChannel0, uvCoord\n        + vec2(-0.001, 0)).r-texture(iChannel0, uvCoord\n        + vec2(+0.001, 0)).r, texture(iChannel0, uvCoord\n        + vec2(0, -0.001)).r-texture(iChannel0, uvCoord\n        + vec2(0, +0.001)).r, .02)), 1.0).xyz * 0.5 + 0.5, 1.)*0.33333;\n\n      uvCoord = (marchResult.hitPos.xz+scroll+waterMotion)*scale2;\n\n      wavenormal += vec4(vec4(normalize(vec3(texture(iChannel1, uvCoord\n        + vec2(-0.001, 0)).r-texture(iChannel0, uvCoord\n        + vec2(+0.001, 0)).r, texture(iChannel0, uvCoord\n        + vec2(0, -0.001)).r-texture(iChannel0, uvCoord\n        + vec2(0, +0.001)).r, .02)), 0.0).xyz * 0.5 + 0.5, 1.)*0.33333;\n\n      uvCoord = (marchResult.hitPos.xz+scroll+waterMotion)*scale3;\n\n      wavenormal += vec4(vec4(normalize(vec3(texture(iChannel2, uvCoord\n        + vec2(-0.001, 0)).r-texture(iChannel2, uvCoord\n        + vec2(+0.001, 0)).r, texture(iChannel2, uvCoord\n        + vec2(0, -0.001)).r-texture(iChannel2, uvCoord\n        + vec2(0, +0.001)).r, .02)), 1.0).xyz * 0.5 + 0.5, 1.)*0.33333;\n\n\n      // set normal to rgb 0,1,0  to do mirror reflections on water surface\n      vec3 ref = normalize(reflect(directionRay, vec3(0.0, 1.0, 0.0)));\n      RayHit reflectResult = TerrainMarch(marchResult.hitPos + (ref*0.001), ref); \n\n      float waveDepth = pow((wavenormal.r+wavenormal.g+wavenormal.b)*0.75, 2.0);\n\n\n      // draw reflected objects and mix with water color\n      if (reflectResult.hit==true)\n      {\n        waterColor *= mix(waterColor, textureLod(iChannel1, (reflectResult.hitPos.xz+scroll)*18.0, 0.0), waveDepth);\n      }\n\n\n\n      float atten = max(1.0 - dot(wavenormal.r, reflectResult.dist) * 0.001, 0.0)*1.5;\n\n\n      waterColor*= atten;\n\n      waterColor = mix(waterColor, waterColor*0.12, wavenormal.g);\n      waterColor = mix(waterColor, waterColor*1.20, wavenormal.r);\n    }\n\n    // terrain color \n    if (marchResult.treeHit==false)\n    {\n\n      // texturing\n      vec4 texcolor = textureLod(iChannel0, (marchResult.hitPos.xz+scroll)*8.0, 0.0);\n      vec4 texcolor2 = mix(mix(texcolor, textureLod(iChannel1, (marchResult.hitPos.xz+scroll)*7.30, 0.0), 0.8), texcolor, pow(texcolor.r, 2.0));\n      vec4 texcolor3 = mix(texcolor, textureLod(iChannel2, (marchResult.hitPos.xz+scroll)*22.30, 0.0), 1.4);\n      vec4 moss = textureLod(iChannel0, (marchResult.hitPos.xz+scroll)*27.30, 0.0)*1.5*vec4(0.7, 0.8, 0.3, 1.0);\n\n\n      vec4 finalColor = mix(texcolor, textureLod(iChannel1, (marchResult.hitPos.xz+scroll)*5.90, 0.0), 1.4);\n      finalColor= mix(finalColor, textureLod(iChannel1, (marchResult.hitPos.xz+scroll)*4.0, 0.0), 0.5);\n      finalColor = mix(finalColor, texcolor2, smoothstep(0.0, 0.3, marchResult.normal.z));\n\n      // apply snow\n      finalColor = mix(vec4((texcolor2.r+texcolor2.g+texcolor2.b)+finalColor)*0.85, finalColor, smoothstep(0.04, 0.4, marchResult.normal.x));\n      // apply moss\n      finalColor = mix(finalColor, moss, smoothstep(0.0, 0.40, pow(texcolor3.r, 3.0))*smoothstep(waterLevel-2.30, waterLevel-0.6, realHeight));\n\n\n      float diff= clamp(dot(marchResult.normal, normalize(sunPos)), 0.0, 1.0);\n      float shadow = TerrainSoftShadow(marchResult.hitPos, normalize(sunPos));\n      float amb = clamp( 0.5+0.5*marchResult.normal.r, 0.0, 1.0 )*1.0;\n\n      vec3 lin = vec3(0.0);  \n      lin+=diff*shadow;\n      lin+=amb*vec3(0.5, 0.5, 0.8)*2.0;\n\n\n      // apply lightning\n      color = finalColor*vec4(lin, 1.0)*sunColor;\n      // apply shoreline \n      color = mix(color, texcolor3*1.5*sunColor, smoothstep(waterLevel-0.20, waterLevel-0.2, realHeight));\n      // apply water transition\n      waterColor = mix((color*waterColor), waterColor, smoothstep(waterLevel, waterLevel+0.4, realHeight));\n\n      // apply water\n      color = mix(waterColor+0.24, color, smoothstep(waterLevel, waterLevel-.3, realHeight));\n\n      color=mix(color, color*shadow, 0.34);\n    }\n    // tree color  \n    else\n    {\n      vec4 snowMask = vec4(textureLod(iChannel1, (marchResult.hitPos.xz+scroll)*12.30, 0.0).r*5.0);\n      vec4 pine = textureLod(iChannel0, (marchResult.hitPos.xz+scroll)*127.30, 0.0)*0.6*vec4(0.4, 0.8, 0.1, 1.0);\n\n      color = pine*vec4(1.0/max(1.20, (0.015*marchResult.steps)));\n\n      // apply snow\n      color = mix(vec4(snowMask+color)*0.45, color, smoothstep(0.10, 1.0, 1.0/(300.0*marchResult.treeHeight)));\n      color = mix(vec4(snowMask+color)*0.45, color, smoothstep(0.04, 0.4, marchResult.normal.x));\n\n\n      float diff= clamp(dot(marchResult.normal, normalize(sunPos)), 0.0, 1.0);\n      float shadow = TerrainSoftShadow(marchResult.hitPos, normalize(sunPos));\n      float amb = clamp( 0.5+0.5*marchResult.normal.r, 0.0, 1.0 )*1.0;\n\n      vec3 lin = vec3(0.0);  \n      lin+=diff*shadow;\n      lin+=amb*vec3(0.5, 0.5, 0.8)*2.0;\n\n      color = color*vec4(lin, 1.0)*sunColor;\n    }\n\n\n\n    // apply fog\n    color =mix(color*(1.5-(0.12*height)), haze, pow(0.95*marchResult.depth, 1.2));\n   \n      // apply snowy winds\n    vec2 winduv= marchResult.hitPos.xz+scroll+vec2(float(iTime)*0.005, float(iTime)*0.02);\n    color =mix(color, (color+vec4(textureLod(iChannel0, winduv*0.24, 0.0).r))*0.75, pow(4.0*clamp(marchResult.terrainHeight, 0.0, 1.0), 2.0));\n    color =mix(color, (color+vec4(textureLod(iChannel0, winduv*1.24, 0.0).r))*0.75, pow(4.0*clamp(marchResult.terrainHeight, 0.0, 1.0), 2.0));\n    color =mix(color, (color+vec4(textureLod(iChannel0, winduv*2.24, 0.0).r))*0.75, pow(4.0*clamp(marchResult.terrainHeight, 0.0, 1.0), 2.0));\n  }\n\n  // sun\n  float sun = clamp( dot(sunPos, directionRay), 0.0, 1.0 );\n  color += vec4(vec3(.9, 0.4, 0.2)*sun*sun*clamp((directionRay.y+0.4)/0.4, 0.0, 0.40), 1.0);\n\n  color*=mix(0.0,1.0, smoothstep(0.0,0.75,float(iTime)));\n  fragColor = vec4(pow(color.rgb, vec3(1.0/0.9)), 1.0 ) * (0.5 + 0.5*pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.2 ));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define rotate(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n  struct RayHit\n{\n  bool treeHit;\n  bool hit;  \n  vec3 hitPos;\n  vec3 normal;\n  float dist;\n  float depth;\n  float steps;\n  float id;\n};\n\nfloat camRot=1.5;\n\nvec2 cam_Adress = vec2(0.0, 0.0);\nvec2 cam_RotAdress = vec2(0.0, 1.0);\nfloat moveSpeed= 0.001; \nvec3 camPos = vec3(0, 0, 1.5);\n\nvec4 read(in sampler2D buffer, in vec2 memPos, vec2 resolution)\n{\n  return texture(buffer, (memPos+0.5)/resolution, -100.);\n}\n\nvec4 GetCloudColor(in vec2 p)\n{\n  float col = textureLod(iChannel0, p*.19, 0.0).r;\n  col -= textureLod(iChannel0, p*.15, 0.0).r;\n  col += textureLod(iChannel0, p*.01, 0.0).r;\n  col *= textureLod(iChannel0, p*.15, 0.0).r*1.5;\n  return vec4(col);\n}\n\n\n\nfloat ellipsoid( in vec3 p, in vec3 r )\n{\n  return (length( p/r ) - 1.0) * min(min(r.x, r.y), r.z);\n}\n\n\nRayHit SkyMarch(in vec3 origin, in vec3 direction)\n{\n  RayHit result;\n  result.treeHit = false;\n  float maxDist = 10.10, precis = 0.004;\n  float t = 0.0, dist = 0.0, distStep = 0.75;\n  vec3 rayPos =vec3(0);\n\n  for ( int i=0; i<64; i++ )\n  {\n    rayPos =origin+direction*t;\n\n    dist = max(ellipsoid(  rayPos-vec3(0.0, 0., -2.0), vec3( 10.0, 0.5, 10.0)), \n      -ellipsoid( rayPos-vec3(0.0, 0., -2.0), vec3(9.0, 0.49, 9.0)));\n\n    if (abs(dist)<precis || t>maxDist )\n    {        \n      result.hit=true;\n      result.depth = t; \n      result.dist = dist;                              \n      result.hitPos = origin+((direction*t)*0.99);   \n      result.steps = float(i);\n      result.id=1.0;\n      break;\n    }\n    t += dist*distStep;\n  }\n  if (t>maxDist) {\n    result.hit=false;\n  }\n\n  return result;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n  if (iFrame>0)\n  {\n    camPos = read(iChannel3, cam_Adress, iChannelResolution[3].xy).rgb;\n    camRot = read(iChannel3, cam_RotAdress, iChannelResolution[3].xy).r;    \n   \n    if (iMouse.z>0.0) camRot= (iMouse.x - iResolution.x * 0.5)*0.01;    \n    camPos.xy-=vec2(cos(camRot-1.5707963268), sin(camRot-1.5707963268))*moveSpeed;\n  }\n\n\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  float vig = 0.5 + 0.5*pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.1 );     \n  //  vec4 haze =  mix(vec4(0.6,0.7,0.8,1.0),vec4(0.9),  (1.0-uv.y) * 2.0);  \n  vec4 color =vec4(0);//haze;\n\n\n\n  float camPitch= clamp((iMouse.y - iResolution.y * 0.5)*0.01, 0.0, 1.1);   \n\n  vec2 cloudPos = vec2(float(iTime)*0.01, float(iTime)*0.04)*0.8;\n  vec2 scroll = camPos.xy*1.;\n\n  vec3 camOrigin = vec3(0, 0, -2);\n  vec2 screenSpace = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n\n  vec3 directionRay = normalize(vec3(screenSpace, 1.0));\n\n\n  // directionRay.yz *= rotate(camPitch);\n  directionRay.xz *= rotate(camRot);\n\n\n\n\n  if (distance(fragCoord, cam_Adress)<=1.0)\n  {\n    fragColor.rgb = camPos;\n  }\n  else if (distance(fragCoord, cam_RotAdress)<=1.0)\n  {\n    fragColor.r = camRot;\n  }\n    \n  if (uv.y>=0.5)\n  {\n    RayHit marchResult =SkyMarch(camOrigin, directionRay);\n\n    if (marchResult.hit)\n    {\n\n      vec4 cloudColor = GetCloudColor(marchResult.hitPos.xz+cloudPos+scroll);\n      color = mix(color, mix(color, cloudColor, cloudColor.a), smoothstep(0.0, .12, 1.0/marchResult.dist));\n    }\n\n    color.r = mix(color.r, 0.0, 0.80-(distance(screenSpace.y, 0.0)));\n  } else\n  {\n    color.r = texture(iChannel3, vec2(uv.x, 1.0-(uv.y))).a;\n  }\n  fragColor.a =  clamp(color.r, 0.0, 1.0);\n  // fragColor = color;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 11873,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/relaxdaily/instrumental-background-music-france-vid"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}