{
    "Shader": {
        "info": {
            "date": "1662472234",
            "description": "This is Turing Complete!",
            "flags": 32,
            "hasliked": 0,
            "id": "slKcDt",
            "likes": 5,
            "name": "Rule 110 CA",
            "published": 3,
            "tags": [
                "gameoflife",
                "cellularautomaton",
                "gol",
                "emergent",
                "rule110"
            ],
            "usePreview": 0,
            "username": "lukeathedev",
            "viewed": 211
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool brand(float x) {\n    return fract(abs(sin(x * 301.238)) * x * 138.83) > 0.5;\n}\n\nbool alive(ivec2 c) {\n    vec3 t = texelFetch(iChannel0, c, 0).rgb;\n    return t.r > 0.0 ||\n           t.g > 0.0 ||\n           t.b > 0.0;\n}\n\nvoid mainImage( out vec4 C, in vec2 P )\n{\n    // Rule 110\n    // 7 6 5 4 3 2 1 0\n    // 0 1 1 0 1 1 1 0\n    int c = 0;\n    for (int x = -1; x < 2; ++x) {\n        // Look below current line\n        if (alive(ivec2(int(P.x) - x, int(P.y) - 1))) c += 1 << (1-x);\n    }\n    \n    bool state = alive(ivec2(P));\n    bool alive = false;\n    \n    // Not very elegant\n    if (c==6||c==5||c==3||c==2||c==1) alive = true;\n    //if (c == 0) alive = true;\n    \n    vec2 uv = P/iResolution.xy;\n    vec3 rainbow = 0.5 + 0.5*cos(iTime*80./iResolution.y+uv.xyx+vec3(0,2,4));\n    vec4 col = texelFetch(iChannel0, ivec2(P), 0);\n    \n    C = alive ? (!state ? vec4(rainbow, 1.0) : col) : vec4(0.0);\n    if (int(P.y) == 0) {\n        C = brand(P.x * P.y) ? vec4(1.0) : vec4(0.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}