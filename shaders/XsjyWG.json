{
    "Shader": {
        "info": {
            "date": "1493584709",
            "description": "A port of a game shader I made for the Mini Game Jam - A MAZE. Edition 2017 in Berlin\n\nYou are the Red Evil Orbital Base. Your goal is to take down the rebels on the other side of the earth. \nTo do so, click on the screen to shoot a plasma ball",
            "flags": 32,
            "hasliked": 0,
            "id": "XsjyWG",
            "likes": 6,
            "name": "[Amaze2017]Evil Asteroid",
            "published": 3,
            "tags": [
                "2d",
                "game",
                "jgamejam",
                "amaze"
            ],
            "usePreview": 0,
            "username": "antonOTI",
            "viewed": 946
        },
        "renderpass": [
            {
                "code": "// I did not brought a computer with  me at berlin for Amaze\n// I decided to attend the Amaze Mini Jam anyway\n// I coded the original version entierly on my phone using the app Shader Editor https://play.google.com/store/apps/details?id=de.markusfisch.android.shadereditor\n// Coded under 6 hours with the android keyboard (hence the weird indentation and the unoptimized code ;) ) \n\n// fbm function by iq\n\n/*\n\n**Original Shader**\n\n\n\n\nuniform float time;\nuniform int pointerCount;\nuniform vec3 pointers[10];\nuniform sampler2D backbuffer;\n\nuniform vec2 resolution;\n\n#define PI 3.14\n\nfloat getTime()\n{\nreturn time / 600.;\n}\n\nfloat circle(vec2 uv2,vec2 center,float radius)\n{\nreturn step(distance(uv2, center ), radius);\n}\nconst mat2 m = mat2(.8,.6,-.6,.8);\nfloat noise( in vec2 x )\n{\nreturn sin(1.5*x.x)*sin(1.5*x.y);\n}\n\nfloat fbm4( vec2 p )\n{\n    float f =.0;\n\n    f +=.5 *noise(p) ;p=m*p*2.02;\n    f +=.25 *noise(p) ;p=m*p*2.03;\n    f +=.125 *noise(p) ;p=m*p*2.01;\n    f +=.0625 *noise(p) ;p=m*p*2.02;\n\n    return f /.9375;\n\n}\n\n\n\nvoid main( void )\n{\nfloat mx = max( resolution.x, resolution.y );\nvec2 uv = gl_FragCoord.xy/mx;\n\nvec2 mid = vec2(.3,.65);\n  float ti = time *.75;\nvec4 color = vec4(0.);\n\n\n\nfloat stars = fbm4(uv * 100. + time *.02);\n\n\nif(stars >.8)\n{\ncolor = vec4(1.);\n}\n\n\nfloat bm = fbm4(uv*20. + vec2(time,.0) ) ;\n\nbm +=.2;\n\n\nvec3 col = vec3(0.,0.,1.);\n\nif(bm>.5)\n{\ncol = vec3(.8,.9,.01);\n}\n\n\nif(bm>.65)\n{\ncol = vec3(.9,.7,.01);\n}\n\nif(bm>.8)\n{\ncol = vec3(.9,.4,0.);\n}\n\n\nif(bm>.96)\n{\ncol = vec3(.8,.8,1.);\n}\n\nfloat planet = circle(uv, mid,.079);\nif(planet>.5){\n   color = vec4(col * planet, 1.) ;\n  color.a=1.;\n  }\n\nfloat shootTime = texture2D(backbuffer, vec2(0.,3.)/resolution ).r;\n\n  vec2 apos = vec2(sin(ti), cos(ti)) ;\n  float antagonist = circle(uv, mid+apos*.16,.019);\n\nvec2 ppos = vec2(sin(ti + PI ),cos(ti + PI ));\nfloat pr = sin(ti * 4.) * .02;\n  ppos = mid + ppos*.16+ pr;\n\nfloat player = circle(uv, ppos ,.01);\n\n  color.r = max(color.r,antagonist );\ncolor.g = max(color.g, player);\n\n\n\nfloat isShooting=(pointerCount>0) ? 1.:0.;\n\n\nfloat tir = distance(   getTime()  , shootTime) * 600.;\n\n\nvec2 sp = vec2(sin(ti + tir ),cos(ti + tir ));\nsp = mid+sp*.16;\nfloat projectile = circle(uv, sp,.005);\nif(tir<PI*2.)\n{\ncolor.r = max(color.r,projectile);\n\nif(distance(ppos, sp) <.009)\n{\n   color.g= 1.;\n   shootTime =-1000. ;\n  }\n}\n\nif(isShooting >.5)\n{\ncolor.r =.5;\n}\n\n\n\nif(gl_FragCoord.y<25. )\n{\n\nif(isShooting>.5)\nshootTime = getTime() ;\n\ncolor = vec4(     shootTime ) ;\n}\n\ngl_FragColor = vec4( color );\n}\n*/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0,uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nuniform vec2 resolution;\n\n#define PI 3.14\n\nfloat getTime()\n{\n\treturn iTime / 600.;\n}\n\nfloat circle(vec2 uv2,vec2 center,float radius)\n{\n\treturn step(distance(uv2, center ), radius);\n}\n\nconst mat2 m = mat2(.8,.6,-.6,.8);\n\nfloat noise( in vec2 x )\n{\n\treturn sin(1.5*x.x)*sin(1.5*x.y);\n}\n\nfloat fbm4( vec2 p )\n{\n    float f =.0;\n\n    f +=.5 *noise(p) ;p=m*p*2.02;\n    f +=.25 *noise(p) ;p=m*p*2.03;\n    f +=.125 *noise(p) ;p=m*p*2.01;\n    f +=.0625 *noise(p) ;p=m*p*2.02;\n\n    return f /.9375;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float mx = max( resolution.x, resolution.y );\n    vec2 uv = fragCoord.xy/iResolution.y;\n\n    uv = floor(uv * 150.) / 150.;\n    vec2 mid = vec2(.5,.65);\n    float ti = iTime *.75;\n    vec4 color = vec4(0.);\n\n\n\n    float stars = fbm4(uv * 100. + iTime *.02);\n\n\n    if(stars >.8)\n    {\n    \tcolor = vec4(1.);\n    }\n\n\n    float bm = fbm4(uv*20. + vec2(iTime,.0) ) ;\n\n    bm +=.2;\n\n\n    vec3 col = vec3(0.,0.,1.);\n\n    if(bm>.5)\n    {\n    \tcol = vec3(.8,.9,.01);\n    }\n\n\n    if(bm>.65)\n    {\n    \tcol = vec3(.9,.7,.01);\n    }\n\n    if(bm>.8)\n    {\n    \tcol = vec3(.9,.4,0.);\n    }\n\n\n    if(bm>.96)\n    {\n    \tcol = vec3(.8,.8,1.);\n    }\n\n\tfloat planet = circle(uv, mid,.079);\n    if(planet>.5){\n    \tcolor = vec4(col * planet, 1.) ;\n      \tcolor.a=1.;\n    }\n\n    float shootTime = texture(iChannel0, vec2(0.,3.)/iResolution.xy ).r;\n\n    vec2 apos = vec2(sin(ti), cos(ti)) ;\n    float antagonist = circle(uv, mid+apos*.16,.019);\n\n\tvec2 ppos = vec2(sin(ti + PI ),cos(ti + PI ));\n\tfloat pr = sin(ti * 4.) * .02;\n  \tppos = mid + ppos*.16+ pr;\n\n\tfloat player = circle(uv, ppos ,.01);\n\n  \tcolor.r = max(color.r,antagonist );\n\tcolor.g = max(color.g, player);\n\n\n\n    float isShooting=(iMouse.z>0.) ? 1.:0.;\n\n\n    float tir = distance(   getTime()  , shootTime) * 600.;\n\n\n    vec2 sp = vec2(sin(ti + tir ),cos(ti + tir ));\n    sp = mid+sp*.16;\n    float projectile = circle(uv, sp,.005);\n    \n    if(tir<PI*2.)\n    {\n        color.r = max(color.r,projectile);\n\n        if(distance(ppos, sp) <.009)\n        {\n           color.g= 1.;\n           shootTime =-1000. ;\n        }\n    }\n\n    if(isShooting >.5)\n    {\n    \tcolor.r =.5;\n    }\n\n\n\n    if(gl_FragCoord.y<25. )\n    {\n\n        if(isShooting>.5)\n            shootTime = getTime();\n\n\t\tcolor = vec4(shootTime);\n\t}\n\n\tfragColor = vec4(color);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}