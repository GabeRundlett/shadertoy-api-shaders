{
    "Shader": {
        "info": {
            "date": "1632352045",
            "description": "prototyping a shape I'm considering getting 3d printed as a necklace pendant. Experimenting with super-ellipse toroids.  Dirt simple lighting.",
            "flags": 0,
            "hasliked": 0,
            "id": "7dVGWc",
            "likes": 4,
            "name": "pendant shape",
            "published": 3,
            "tags": [
                "raycast",
                "sdf",
                "squircle"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 254
        },
        "renderpass": [
            {
                "code": "#define MAX_DIST 20.0\n\nconst float rad1 = 1.0;\nconst float rad2 = 0.075;\n\nfloat squircle_toroid(in vec3 pt, in float radius1, in float radius2, in float squish) {\n  vec3 pows = pt * pt;\n  pows = pows * pows;\n  float radial = sqrt(sqrt(pows.x + pows.z)) - radius1;\n  radial = radial * radial;\n  radial = radial * radial;\n  return sqrt(sqrt(squish * radial + pows.y)) - radius2;\n}\n\nfloat conventional_smin(in highp float a, in highp float b, in highp float k) {\n  float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n  return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat super_smooth_max(in highp float a, in highp float b, in highp float k) {\n  // return 0.25 * k * log(exp(4.0 * a / k) + exp(4.0 * b / k));\n  return 0.1732802*k*log2(exp2(5.771*a/k) + exp2(5.771*b/k));\n}\n\nfloat super_smooth_min(in float a, in float b, in float k) {\n  return -super_smooth_max(-a, -b, k);\n}\n\nfloat checked_smooth_min(in highp float a, in highp float b, in highp float k) {\n  float val = conventional_smin(a, b, k);\n  if (abs(val) < 4.0 * k) {\n    return super_smooth_min(a, b, k);\n  }\n  return val;\n}\n\n\nfloat sdf(in vec3 pt) {\n  float v1 = squircle_toroid(pt, rad1, rad2, 0.5);\n  float v2 = squircle_toroid((-pt - 0.84 * vec3(1.25 * rad1, 0.0, 1.25 * rad1)).yzx +\n                             vec3(0.25 * rad1, 0.25 * rad1, 0.0),\n                             0.125 * rad1,\n                             rad2,\n                             4.0);\n  return checked_smooth_min(v1, v2, 0.2 * rad1);\n}\n\nfloat rayCast(in vec3 orig, in vec3 dir) {\n  float along = 0.0;\n  \n  for(int i = 0; i < 256; ++i) {\n    vec3 p = orig + along * dir;\n    float dist = sdf(p);\n    if (along > MAX_DIST || dist < 1.0e-5) {\n      return along;\n    }\n    along += 0.75 * dist;\n  }\n  return along;\n}\n\nvec3 sdfGrad(in vec3 pt) {\n  const float h = 0.001;\n  const float inv_h = 1000.0;\n  float v = sdf(pt);\n  return inv_h * vec3(sdf(pt + vec3(h, 0.0, 0.0)) - v,\n                      sdf(pt + vec3(0.0, h, 0.0)) - v,\n                      sdf(pt + vec3(0.0, 0.0, h)) - v);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 1.0 / min(iResolution.x, iResolution.y);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) * scale;\n    \n    vec3 dir = normalize(vec3(uv, -3.0));\n    vec3 orig = vec3(0.0, 0.0, 4.0);\n    \n    const mat3 pitch = mat3(1.0, 0.0, 0.0,\n                            0.0, 0.8, -0.6,\n                            0.0, 0.6, 0.8);\n\n    float ct = cos(iTime);\n    float st = sin(iTime);\n    mat3 yaw = mat3(ct, 0.0, st,\n                    0.0, 1.0, 0.0,\n                    -st, 0.0, ct);\n    \n    dir = pitch * yaw * dir;\n    orig = pitch * yaw * orig;\n    vec3 bounce = dir;\n\n    float blend = 0.25;\n    float d = rayCast(orig, dir);\n    \n    if (d < MAX_DIST) {\n      vec3 pt = orig + d * dir;\n      vec3 norm = normalize(sdfGrad(pt));\n      blend = 1.0;\n      bounce = reflect(dir, norm);\n    }\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5 * bounce;\n    \n    col = mix(vec3(0.5), col, blend);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}