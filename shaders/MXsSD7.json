{
    "Shader": {
        "info": {
            "date": "1709628350",
            "description": "Another liquid blob",
            "flags": 32,
            "hasliked": 0,
            "id": "MXsSD7",
            "likes": 0,
            "name": "Fork Liquid Toy jacobchiq 785",
            "published": 3,
            "tags": [
                "noise",
                "mouse",
                "fluid",
                "abstract",
                "oil",
                "smoke",
                "paint"
            ],
            "usePreview": 0,
            "username": "JacobChiq",
            "viewed": 166
        },
        "renderpass": [
            {
                "code": "\n// Liquid toy by Leon Denise 2022-05-18\n// Playing with shading with a fake fluid heightmap\n\n// 2023-01-20 update:\n// fix scalars to be resolution independant\n// (samed speed and look at different frame size)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 dither = texture(iChannel1, fragCoord.xy / 1024.).rgb;\n    \n    // value from buffer A\n    vec4 data =  texture(iChannel0, uv);\n    float gray = data.x;\n    \n    // gradient normal from gray value\n    float range = 3.;\n    vec2 aspect = vec2(iResolution.x/iResolution.y, 1);\n    vec3 unit = vec3(range/472./aspect,0);\n    vec3 normal = normalize(vec3(\n        TEX(uv + unit.xz)-TEX(uv - unit.xz),\n        TEX(uv - unit.zy)-TEX(uv + unit.zy),\n        gray*gray*gray));\n        \n    // backlight\n    vec3 color = vec3(.3)*(1.-abs(dot(normal, vec3(0,0,1))));\n    \n    // specular light\n    vec3 dir = normalize(vec3(0,1,2));\n    float specular = pow(dot(normal, dir)*.5+.5,20.);\n    color += vec3(.5)*ss(.2,1.,specular);\n    \n    // rainbow\n    vec3 tint = .5+.5*cos(vec3(1,2,3)*1.+dot(normal, dir)*4.-uv.y*3.-3.);\n    color += tint * smoothstep(.15,.0,gray);\n\n    // dither\n    color -= dither.x*.1;\n    \n    // background blend\n    vec3 background = vec3(1);\n    background *= smoothstep(1.5,-.5,length(uv-.5));\n    color = mix(background, clamp(color, 0., 1.), ss(.01,.1,gray));\n    \n    // display layers when clic\n    //if (iMouse.z > 0.5 && iMouse.x/iResolution.x < .1)\n    //{\n    //    if (uv.x < .33) color = vec3(gray);\n    //    else if (uv.x < .66) color = normal*.5+.5;\n    //    else color = vec3(tint);\n    //}\n    color = vec3(gray);\n    \n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// Liquid toy by Leon Denise 2022-05-18\n// Playing with shading with a fake fluid heightmap\n\nconst float speed = .01;\nconst float scale = .1;\nconst float falloff = 3.;\nconst float fade = .4;\nconst float strength = 1.;\nconst float range = 5.;\n\n// fractal brownian motion (layers of multi scale noise)\nvec3 fbm(vec3 p)\n{\n    vec3 result = vec3(0);\n    float amplitude = 0.5;\n    for (float index = 0.; index < 3.; ++index)\n    {\n        result += texture(iChannel0, p/amplitude).xyz * amplitude;\n        amplitude /= falloff;\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // coordinates\n    vec2 uv = (fragCoord.xy - iResolution.xy / 2.)/iResolution.y;\n    vec2 aspect = vec2(iResolution.x/iResolution.y, 1);\n    \n    // noise\n    vec3 spice = fbm(vec3(uv*scale,iTime*speed));\n    \n    // draw circle at mouse or in motion\n    float t = iTime*2.;\n    vec2 mouse = (iMouse.xy - iResolution.xy / 2.)/iResolution.y;\n    if (iMouse.z > .5) uv -= mouse;\n    //else uv -= vec2(cos(t),sin(t))*.3;\n    else uv -= (5.5);\n    float paint = trace(length(uv),.1);\n    \n    // expansion\n    vec2 offset = vec2(0);\n    uv = fragCoord.xy / iResolution.xy;\n    vec4 data = texture(iChannel1, uv);\n    vec3 unit = vec3(range/472./aspect,0);\n    vec3 normal = normalize(vec3(\n        TEX1(uv - unit.xz)-TEX1(uv + unit.xz),\n        TEX1(uv - unit.zy)-TEX1(uv + unit.zy),\n        data.x*data.x)+.001);\n    offset -= normal.xy;\n    \n    // turbulence\n    spice.x *= 6.28*2.;\n    spice.x += iTime;\n    offset += vec2(cos(spice.x),sin(spice.x));\n    \n    uv += strength * offset / aspect / 472.;\n    \n    // sample buffer\n    vec4 frame = texture(iChannel1, uv);\n    \n    // temporal fading buffer\n    paint = max(paint, frame.x - iTimeDelta * fade);\n    \n    // print result\n    fragColor = vec4(clamp(paint, 0., 1.));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// shortcut to sample texture\n#define TEX(uv) texture(iChannel0, uv).r\n#define TEX1(uv) texture(iChannel1, uv).r\n#define TEX2(uv) texture(iChannel2, uv).r\n#define TEX3(uv) texture(iChannel3, uv).r\n\n// shorcut for smoothstep uses\n#define trace(edge, thin) smoothstep(thin,.0,edge)\n#define ss(a,b,t) smoothstep(a,b,t)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}