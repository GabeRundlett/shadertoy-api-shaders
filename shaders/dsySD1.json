{
    "Shader": {
        "info": {
            "date": "1681268067",
            "description": "for minecraft some day, need to fix some stuff",
            "flags": 48,
            "hasliked": 0,
            "id": "dsySD1",
            "likes": 1,
            "name": "stylized clouds",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 330
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord),0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.14159265;\nconst float epsilon = 0.0001;\nconst int maxsteps = 512;\nconst int maxlightsteps = 8;\nconst float sensitivity = 4.0;\nconst float moveSpeed = 0.1;\nconst float moveDamping = 0.7;\nconst int far = 1000;\nconst float cameraFrustum = 0.7;\n\nstruct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n\nstruct Camera {\n    vec3 position;\n    Ray ray;\n    vec2 uv;\n    mat3 transmat;\n};\n\nstruct Hit {\n    bool hit;\n    float dist;\n    vec3 point;\n    vec3 normal;\n    float shadow;\n};\n\n//fakes x^n for specular effects\nfloat fpow(float x, float k){\n    return x > k ? pow((x-k)/(1.0-k),2.0) : 0.0;\n}\n\nmat3 rotationMatrix(vec3 a){\n    //calculate consts\n    float cx = cos(a.x);\n    float sx = sin(a.x);\n    float cy = cos(a.y);\n    float sy = sin(a.y);\n    float cz = cos(a.z);\n    float sz = sin(a.z);\n    //return matrix\n    return mat3(\n        cy*cz, sx*sy*cz - cx*sz, cx*sy*cz + sx*sz,\n        cy*sz, sx*sy*sz + cx*cz, cx*sy*sz - sx*cz,\n        -sy, sx*cy, cx*cy\n    );\n}\n\n//returns a point rotated in 3d (radians)\nvec3 rotate3d(vec3 point, vec3 angle, vec3 origin){ \n    point -= origin; //subtract pivot\n    point *= rotationMatrix(angle); //rotate point\n    point += origin; //add pivot\n    return point;\n}\n\n//https://iquilezles.org/articles/noacos/\nmat3 rotationAlign(vec3 d, vec3 z){\n    vec3  v = cross( z, d );\n    float c = dot( z, d );\n    float k = 1.0f/(1.0f+c);\n\n    return mat3( v.x*v.x*k + c,     v.y*v.x*k - v.z,    v.z*v.x*k + v.y,\n                 v.x*v.y*k + v.z,   v.y*v.y*k + c,      v.z*v.y*k - v.x,\n                 v.x*v.z*k - v.y,   v.y*v.z*k + v.x,    v.z*v.z*k + c    );\n}\n\n//camera constructor\nCamera createCamera(vec2 fragCoord, vec2 resolution, vec3 cameraPos, vec3 camRot, float frustumLength){\n    vec3 uv = vec3((fragCoord - resolution*0.5)/resolution.y, frustumLength);\n    vec3 uvd = normalize(uv);\n    mat3 rotmat = rotationMatrix(camRot);\n    vec3 ro = uv*rotmat + cameraPos;\n    vec3 rd = uvd*rotmat;\n    mat3 rottomat = rotationAlign(uvd,vec3(0,0,1));\n    mat3 TransitionMatrix = mat3(\n        vec3(1,0,0)*rottomat*rotmat, \n        vec3(0,1,0)*rottomat*rotmat, \n        vec3(0,0,1)*rottomat*rotmat\n    );\n    return Camera(cameraPos, Ray(ro, rd), uv.xy, TransitionMatrix);\n}\n\nfloat smin( float a, float b, float k){\n     float h = max(k-abs(a-b), 0.0)/k;\n     return min(a, b) - h*h*k*0.25;\n}\n\n// 4 out, 4 in...\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n//  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\nfloat voronoi3d(vec3 uv){\n    float n = 999.0;\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            for (int z = -1; z < 2; z++){\n                vec3 d = floor(uv) + vec3(x,y,z) + hash33(floor(uv) + vec3(x,y,z)) - uv;\n                n = smin(n,dot(d,d),0.1);\n            }\n        }\n    }\n    return sqrt(n);\n}\n\nfloat voronoi4d(vec4 uv){\n    float n = 999.0;\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            for (int z = -1; z < 2; z++){\n                for (int w = -1; w < 2; w++){\n                    n = min(n,distance(floor(uv) + vec4(x,y,z,w) + hash44(floor(uv) + vec4(x,y,z,w)),uv));\n                }\n            }\n        }\n    }\n    return n;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "const int _w = 87;\nconst int _a = 65;\nconst int _s = 83;\nconst int _d = 68;\nconst int _space = 32;\nconst int _shift = 16;\nconst int _c = 67;\nconst int _v = 86;\n\nfloat keyPressed(int key){\n    return float(texelFetch(iChannel1, ivec2(key,0),0).x >= 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0);\n    //rotation\n    if (floor(fragCoord) == vec2(1,0)) {\n        vec2 prevpos = texelFetch(iChannel0, ivec2(1,0), 0).zw; //previous dragged mouse pos\n        vec4 mp = texelFetch(iChannel0, ivec2(2,0), 0); //prev mouse pos\n        vec4 m = vec4(iMouse.xy/iResolution.xy,iMouse.zw/iResolution.xy); //current mouse pos\n        \n        if (iFrame <= 1){\n            col = vec2(0).xyxy;\n        } else {\n            //if mouse button up\n            if (m.z < 0.0 && mp.z >= 0.0){\n                col = texelFetch(iChannel0, ivec2(1,0), 0).xyxy;\n            } else if (m.z >= 0.0){\n                col = vec4(m.xy - abs(m.zw) + prevpos, prevpos);\n            } else {\n                col = texelFetch(iChannel0, ivec2(1,0), 0);\n            }\n        }\n        \n        if (col.y*sensitivity > PI/2.0){\n            col.y = PI/2.0/sensitivity;\n        }\n        if (col.y*sensitivity < -PI/2.0){\n            col.y = -PI/2.0/sensitivity;\n        }\n    }\n    //the last mouse position\n    if (floor(fragCoord) == vec2(2,0)) {\n        col = vec4(iMouse.xy/iResolution.xy,iMouse.zw/iResolution.xy);\n    }\n    \n    //velocity\n    if (floor(fragCoord) == vec2(3,0)){\n        vec3 velocity = texelFetch(iChannel0, ivec2(3,0), 0).xyz;\n        vec3 position = texelFetch(iChannel0, ivec2(4,0), 0).xyz;\n        vec2 forward = rotate3d(vec3(1,0,0),vec3(0,texelFetch(iChannel0, ivec2(1,0),0).x*sensitivity,0), vec3(0)).xz;\n        vec2 right = vec2(-forward.y,forward.x);\n        vec3 relative = vec3(keyPressed(_d)-keyPressed(_a), 0, keyPressed(_w)-keyPressed(_s));\n        float up = keyPressed(_space) - keyPressed(_shift);\n        vec3 move = vec3(relative.x*forward.x + relative.z*right.x, up, relative.x*forward.y + relative.z*right.y);\n        velocity = move != vec3(0) ? velocity*moveDamping + normalize(move)*moveSpeed : velocity*moveDamping;\n        \n        if (position.y < -1000.0){\n            velocity = vec3(0);\n        }\n        col.xyz = velocity;\n    }\n    \n    //position\n    if (floor(fragCoord) == vec2(4,0)){\n        vec3 velocity = texelFetch(iChannel0, ivec2(3,0), 0).xyz;\n        vec3 position = texelFetch(iChannel0, ivec2(4,0), 0).xyz;\n        position += velocity;\n        \n        if (position.y < -100.0){\n            position = vec3(0,24,0);\n        }\n        \n        if (iFrame == 0){\n            position = vec3(0,6,0);\n        }\n        col.xyz = position;\n    }\n    \n    //resolution\n    if (floor(fragCoord) == vec2(5,0)){\n        col.xy = iResolution.xy;\n    }\n    //light direction\n    if (floor(fragCoord) == vec2(6,0)){\n        float t = texelFetch(iChannel0,ivec2(6,0),0).w;\n        if (iFrame == 0){\n            t = 0.5;\n        }\n        col.xyz = vec3(sin(t*PI*2.0),cos(t*PI*2.0),0);\n        col.w = t + (keyPressed(_c) - keyPressed(_v))*0.01;\n    }\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//todo:\n//stabilize voxel positions\n//touch ups\n\nconst vec4 cloudLit[] = vec4[](\n    vec4(0.7,0.7,0.8,0.2),\n    vec4(0.8,0.3,0.4,0.25),\n    vec4(1,0.95,0.9,0.3),\n    vec4(1,0.95,0.9,0.7),\n    vec4(0.8,0.3,0.4,0.75),\n    vec4(0.7,0.7,0.8,0.8),\n    vec4(0.7,0.7,0.8,1)\n);\n\nconst vec4 cloudShadowed[] = vec4[](\n    vec4(0.4,0.4,0.5,0.2),\n    vec4(0.5,0.3,0.4,0.25),\n    vec4(0.7,0.7,0.8,0.3),\n    vec4(0.7,0.7,0.8,0.7),\n    vec4(0.5,0.3,0.4,0.75),\n    vec4(0.4,0.4,0.5,0.8),\n    vec4(0.4,0.4,0.5,1)\n);\n\nvec3 lerpGrad(vec4[7] grad, float x){\n    x = fract(x);\n    for (int i = 0; i < grad.length(); i++){\n        if (grad[i].a > x){\n            vec4 gradStart = grad[i - 1];\n            vec4 gradEnd = grad[i];\n            return mix(gradStart.rgb,gradEnd.rgb,smoothstep(gradStart.a,gradEnd.a,x));\n        }\n    }\n}\n\nfloat noise(vec3 x){\n    return textureLod(iChannel1, x/30.0, 0.0).x;\n}\n\nfloat sceneSdf(vec3 p){\n    float v0 = noise(p/64.0);\n    float v1 = noise(p/16.0 + noise(p/vec3(30,5,30)));\n    float v2 = noise(p/8.0 + noise(p/vec3(20,10,20)));\n    float v3 = 1.0 - noise(p/1.5);\n    float yshape = min(abs(p.y*0.07),abs(p.y*0.6-30.0)+0.2);\n    float n = v0*4.0 + v1*2.0 + v2*v1 + v3*v2*0.5 - 3.0 + yshape;\n    return n/2.0;\n}\n\n//https://www.shadertoy.com/view/fstSRH\nHit marchRay2(Ray ray, mat3 transitionMatrix, vec3 lightDir){\n    mat3 inverseTransitionMatrix = inverse(transitionMatrix);\n    vec3 pos = transitionMatrix*ray.origin;\n    vec3 dir = transitionMatrix*ray.direction;\n    float t = 0.0;\n    bool hit = false;\n    \n    for(int i = 0; i < far; i++){\n        vec3 dist = (fract(-pos*sign(dir)) + 1e-4)/abs(dir);\n        float dmin = min(dist.x, min(dist.y, dist.z));\n        \n        pos += dir*dmin;\n        t += dmin;\n        float sdf = sceneSdf(inverseTransitionMatrix*(ceil(pos) - 0.5));\n        if (sdf < 0.0) {\n            hit = true;\n            break;\n        } else if (sdf > 1.0){ //massive fps improvement\n            float stepsize = sdf*sdf*t/(abs(ray.direction.y*1000.0) + 1.0);\n            t += stepsize;\n            pos += dir*stepsize;\n            i += int(sdf*stepsize);\n        }\n    }\n    \n    vec3 lightpos = ceil(pos)-0.5;\n    lightDir = transitionMatrix*lightDir;\n    float shadow = 0.0;\n    \n    for(int i = 0; i < 20; i++){\n        vec3 dist = (fract(-lightpos*sign(-lightDir)) + 1e-4)/abs(-lightDir);\n        float dmin = min(dist.x, min(dist.y, dist.z));\n        \n        lightpos += -lightDir*dmin;\n        if (sceneSdf(inverseTransitionMatrix*(ceil(lightpos) - 0.5)) < 0.0) shadow += 0.08;\n    }\n    \n    //get normal from position\n    vec3 dist = abs(fract(pos) - 0.5);\n    vec3 normal = vec3(0,0,1);\n    if (dist.x >= dist.y && dist.x >= dist.z) normal = vec3(1,0,0);\n    else if (dist.y >= dist.x && dist.y >= dist.z) normal = vec3(0,1,0);\n    \n    pos = inverseTransitionMatrix*pos;\n    normal = inverseTransitionMatrix*normal;\n    normal = faceforward(normal,ray.direction,normal);\n    return Hit(hit, t, pos, normal, shadow*shadow);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 position = texelFetch(iChannel0, ivec2(4,0),0).xyz;\n    vec3 rotation = vec3(texelFetch(iChannel0, ivec2(1,0),0).yx*vec2(-1,1),0)*sensitivity;\n    Camera cam = createCamera(fragCoord, iResolution.xy, position, rotation, cameraFrustum);\n    Ray ray = cam.ray;\n    vec3 lightDirection = texelFetch(iChannel0, ivec2(6,0),0).xyz;\n    float t = texelFetch(iChannel0, ivec2(6,0),0).w;\n    vec4 col = vec4(0);\n\n    Hit hit = marchRay2(ray, cam.transmat, lightDirection);\n    float interpolant = hit.shadow*0.4;\n    col = vec4(mix(lerpGrad(cloudLit,t), lerpGrad(cloudShadowed,t), clamp(floor(interpolant*6.0)/6.0,0.0,1.0)),1);\n    col = mix(col,vec4(0.4,0.4,0.5,1),clamp(hit.dist/500.0,0.0,1.0));\n    if (!hit.hit){\n        col = vec4(0);\n    }\n\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}