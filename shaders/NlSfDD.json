{
    "Shader": {
        "info": {
            "date": "1652189506",
            "description": "teacup attraction",
            "flags": 0,
            "hasliked": 0,
            "id": "NlSfDD",
            "likes": 6,
            "name": "teacup attraction",
            "published": 3,
            "tags": [
                "teacup"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 199
        },
        "renderpass": [
            {
                "code": "// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 256\n#define MAX_DIST 128.\n#define SURF_DIST .001\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define MATERIAL 0\n#define MATERIAL1 1\n\n#define ZERO (min(iFrame,0))\n\nvec2 combine(vec2 val1, vec2 val2 ){\n    return (val1.x < val2.x)?val1:val2;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdCutHollowSphere( vec3 p, float r, float h, float t )\n{\n  // sampling independent computations (only depend on shape)\n  float w = sqrt(r*r-h*h);\n  \n  // sampling dependant computations\n  vec2 q = vec2( length(p.xz), p.y );\n  return ((h*q.x<w*q.y) ? length(q-vec2(w,h)) : \n                          abs(length(q)-r) ) - t;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat hash(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat randomTeaCups(vec3 p, float m){\n    vec3 prevP = p;\n    vec2 id = floor(p.xz/m);\n  \n    p.xz = mod(p.xz,m)-m*0.5;\n    \n    float time = iTime*0.0;\n    \n    float h = 1.0+clamp(hash(id), .1, .7)*3.1415*2.3;\n    p.y-=h-1.5;\n    \n    float size = 3.0;\n    float d = sdBox(p,vec3(h*0.03, h ,h*0.03));\n    \n    float dir = 1.0;\n    float n = hash(id);\n    if(n<0.5)dir = -1.0;\n    \n    p.xz *= Rot(radians(45.0+n*20.0+iTime*100.0*dir));\n    float d2 = sdCutHollowSphere(p-vec3(h*0.25+3.0,-h+size*1.7,0.0),size*1.7,0.1,0.01);\n    \n    p-=vec3(h*0.25+3.0,-h+size*0.8,0.0);\n    float d3 = sdCutHollowSphere(p,size*0.8,0.5,0.05);\n    float maskD3 = sdCutHollowSphere(p,size*0.6,0.5,0.6);\n    p.y*=0.8;\n    p.xy*=Rot(radians(90.0));\n    float d4 = sdTorus(p-vec3(0.0,0.6,size-0.3),vec2(0.5,0.15));\n    d4 = max(-maskD3,d4);\n    p = prevP;\n    d2 = max(p.y+0.5,d2);\n    d = min(d,d2);\n    d = min(d,d3);\n    d = min(d,d4);\n    return d*0.4;\n}\n\nvec2 GetDist(vec3 p) {\n\n    vec3 prevP = p;\n    \n    p = prevP;\n\n    p.z+=iTime*5.0;\n    p.y+=5.0;\n\n    float d = randomTeaCups(p,16.0);\n\n    p = prevP;\n    \n    vec2 model = vec2(d*0.6,MATERIAL);\n    vec2 model2 = vec2(p.y+6.5,MATERIAL1);\n    \n    //return model;\n    return combine(model,model2);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<4; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(10,10,-10));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float shadow = step(RayMarch(p+n*0.3,lightDir,1.0, 15).x,0.9);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*shadow*occ;\n    diffCol += col*vec3(0.9)*skyDiff*occ;\n    diffCol += col*vec3(0.3,0.3,0.3)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.)*occ; // spec\n        \n    return diffCol;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    vec3 prevP = p;\n    if(mat == MATERIAL){\n        vec3 c = vec3(0.9);\n        p.x+=iTime*2.0;\n        c+=hash(p.xz*50.0)*0.3;\n        p = prevP;\n        col = diffuseMaterial(n,rd,p,c);\n    } else if(mat == MATERIAL1){\n        p.z+=iTime*5.0;\n        p.xz*=0.1;\n        vec2 c = vec2(mod(floor(p.x)+floor(p.z),2.0));\n        vec3 c2 = vec3(c.x,c.x,c.y);\n        p.x+=iTime*2.0;\n        c2+=hash(p.xz*50.0)*0.3;\n        p = prevP;\n        col = diffuseMaterial(n,rd,p,c2);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 5.0, -5.);\n    if(iMouse.z>0.){\n        ro.yz *= Rot(m.y*3.14+1.);\n        ro.y = max(-0.9,ro.y);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        ro.yz *= Rot(radians(20.0));\n    }\n    \n    vec3 rd = R(uv, ro, vec3(0,3,0), 0.8);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(0.3);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n\n        col *= exp( -0.00001*d.x*d.x );//fog\n    } else {\n        uv.x+=iTime*2.0;\n        col+=hash(uv*100.0)*0.1;\n    }\n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n    \n\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}