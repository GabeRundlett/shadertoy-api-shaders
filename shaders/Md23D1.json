{
    "Shader": {
        "info": {
            "date": "1387654079",
            "description": "Just a quick little tool to glance at the way a squiggly wave function will play out in the long run; edit waveFunc to whatever you want, and click+drag left/right to zoom in/out. (Made it for my own purposes, but figured other people might make use...)",
            "flags": 0,
            "hasliked": 0,
            "id": "Md23D1",
            "likes": 8,
            "name": "Wave tester",
            "published": 3,
            "tags": [
                "test",
                "example",
                "wave",
                "sine",
                "function",
                "tool"
            ],
            "usePreview": 0,
            "username": "RavenWorks",
            "viewed": 1612
        },
        "renderpass": [
            {
                "code": "float noiseFunc(float x){\n    return sin( x + sin(x*0.6) + sin(x*0.2)*sin(x*2.1) );\n}\nfloat waveFunc(float x){\n\treturn (noiseFunc(x) + noiseFunc(x*1.1))/2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tconst float minMargin = 0.02;\n\tfloat zoomAmt = (1.0 +minMargin)/( iMouse.x/iResolution.x +minMargin );\n\t\n\tfloat xAmt = zoomAmt * 2.0 * (fragCoord.x / iResolution.x) + iTime * 8.0;\n\tfloat yAmt = zoomAmt * 2.0 * (fragCoord.y / iResolution.y - 0.5);\n\t\n\tif (abs(yAmt) > 1.0) {\n\t\tfragColor = vec4(0.6,0.6,0.6,1);\n\t} else {\n\t\tfragColor = yAmt < waveFunc(xAmt) ? vec4(1,0,0,1) : vec4(1,1,1,1);\n\t}\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}