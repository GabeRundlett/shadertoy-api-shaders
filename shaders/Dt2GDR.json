{
    "Shader": {
        "info": {
            "date": "1673136295",
            "description": "Just a simple example (combination of two different shaders) of how to render into cubemap for environment mapping. It is music activated too!",
            "flags": 0,
            "hasliked": 0,
            "id": "Dt2GDR",
            "likes": 7,
            "name": "Envirocube",
            "published": 3,
            "tags": [
                "sound",
                "audio",
                "cubemap",
                "starfield",
                "environmentmapping"
            ],
            "usePreview": 0,
            "username": "orblivius",
            "viewed": 293
        },
        "renderpass": [
            {
                "code": "// Main shader\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\n\n/////////////////\n\n\n#define PI 3.14159\n#define TYPE_CUBE 1\n#define TYPE_SPHERE 2\n#define OBJECT_COUNT 1\n\nmat3 rotx(float a) { mat3 rot; rot[0] = vec3(1.0, 0.0, 0.0); rot[1] = vec3(0.0, cos(a), -sin(a)); rot[2] = vec3(0.0, sin(a), cos(a)); return rot; }\nmat3 roty(float a) { mat3 rot; rot[0] = vec3(cos(a), 0.0, sin(a)); rot[1] = vec3(0.0, 1.0, 0.0); rot[2] = vec3(-sin(a), 0.0, cos(a)); return rot; }\n\n\n\nstruct Object\n{\n\tmat3 rot;\n    vec3 pos;\n    vec3 size;\n    int type;\n};\n\nObject objects[OBJECT_COUNT];\n\n\nfloat dist(vec3 position)\n{\n    float m = 9999.0;\n    vec4 audio = texture(iChannel0, vec2(0.0, 0.0));\n    vec2 uv = vec2(position.x, position.y) * 1.0;\n    vec4 col = texture(iChannel0, uv).rgba;\n    \n    Object o = objects[0];\n    vec3 p = position + o.pos;\n\n    p = p * o.rot;\n    float f = 0.0;\n\n\n    float a = sdBox(p, o.size);\n    float b = sdSphere(p, o.size.x);\n    float au = audio.x;\n\n    f = au * a + (1.0 - au) * b;\n    f -= sdSphere(p, o.size.x) * (0.3 + au * 0.4);\n\n    m = min(f, m);\n    return m;\n}\n\n    \n\nfloat toClipSpace(float f)\n{\n    return f * 2.0 - 1.0;\n}\n\n\nvec3 lookAt(vec3 from, vec3 to, vec3 dir)\n{\n    mat3 m;\n    \n    vec3 fwd = normalize(to - from);\n    vec3 _up = vec3(0.0, 1.0, 0.0);\n    vec3 r = cross(fwd, _up);\n    vec3 u = cross(r, fwd);\n    \n    m[0] = r;\n    m[1] = u;\n    m[2] = fwd;\n    vec3 d = m * dir;    \n    d.z *= -1.0;\n    return d;\n}\n\n\n\nbool trace(vec3 from, vec3 dir, out vec3 hitPosition, out float m)\n{\n    \n    const int steps = 95;\n    float step = 0.01;    \n    vec3 rp = from;\n    m = 99999.0;\n    \n    for (int i = 0; i < steps; ++i)\n    {\n    \trp += dir * max(step, 0.002);\n        float sp = dist(rp);\n        step  = sp;\n        m = min(m, abs(sp));\n        if (abs(sp) <= 0.001)\n        {\n            hitPosition = rp;\n            return true;\n        }\n        \n        if(rp.z > 1.0)\n        {\n            return false;\n        }\n        \n    }\n    return false;\n}\n\n\n\n\nObject getObject(vec3 position, int type)\n{\n    Object c;\n    c.pos = position;\n    c.rot = mat3(1.0);\n    c.type = type;\n    c.size = vec3(0.1, 0.1, 0.1);\n    return c;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.x);\n    uv.y += (iResolution.y / iResolution.x) * 0.4;\n    \n    vec2 mouse = iMouse.xy;\n    vec4 audio = texture(iChannel0, vec2(1.0, 0.0));\n    \n    objects[0] = getObject(vec3(0.0), TYPE_CUBE);\n    objects[0].rot = rotx( ((mouse.y  / iResolution.y) - 0.5) * 12.0);\n    objects[0].rot *= roty( ((mouse.x  / iResolution.x) - 0.5) * 12.0);\n    objects[0].size = vec3(0.1, 0.1, 0.1);\n    \n    objects[0].rot *= rotx(iTime * 1.5);\n    objects[0].rot *= roty(sin(iTime * 1.5));\n    \n    vec3 camPos = vec3(0.0, 0.0, 1.0);    \n    vec3 lk = vec3(-toClipSpace(uv.x), -toClipSpace(uv.y), -2.0);\n    vec3 mclip = vec3(0.0);\n    vec3 dir = lookAt(camPos, mclip, normalize(lk));\n    vec3 hit = vec3(0.0);\n    vec4 color = vec4(0.0);\n    \n    float m;\n    bool h = trace(camPos, dir, hit, m);\n    vec4 aColor = vec4(1.0);\n\n\tfloat p =  pow(length(uv - vec2(0.5, 0.5)), 3.0);\n\tif(h)\n    {\n\t    vec2 offset = vec2(0.001, 0.0);\n        vec3 grad = normalize(vec3(dist(hit + offset.xyy) - dist(hit - offset.xyy), \n                                   dist(hit + offset.yxy) - dist(hit - offset.yxy),\n                                   dist(hit + offset.yyx) - dist(hit - offset.yyx)));\n        \n       float d = clamp(dot(grad, vec3(0.0, 0.0, 1.0)), 0.0, 1.0);\n       float rim = (1.0 - d) * 1.4;        \n       color += texture(iChannel1, -grad);\n    \n    } else\n    {\n        vec2 uv2 = 1.5 * (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.xx;\n        vec3 dir = vec3(1.0, uv2.y, uv2.x);\n\n        color = texture(iChannel1, dir);\n    }\n    \n    \n    float d = (1.0 - m * 75.0) * 15.0 * p;\n    color += aColor * pow(clamp(d, 0.0, 1.0), 1.3);\n    \n    fragColor = color;\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Shader A (cubemap) \n\n#define PI 3.14159265358979323846\n#define TIMER(sec, min, max) (((mod(iTime, (sec)) * ((max) - (min))) / (sec)) + (min))\n\nmat2 mm2(in float a) { float c = cos(a), s = sin(a); return mat2(c, s, -s, c); }\n\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n     vec2 uv = fragCoord.xy / iResolution.xy - vec2(.5);\n    uv.x *= iResolution.x/iResolution.y;\n    \n        \n    vec3 color = vec3(0.);\n    \n    vec3 ray = vec3(uv, .75);\n    ray.xy *= mm2(TIMER(15. ,0., -PI*2.));\n    vec3 s = ray/max(abs(ray.x), abs(ray.y))*.4;\n\n    vec3 p = s;\n    for(int i=0; i<5; i++) {\n        vec2 nos1 = vec2(floor(p.xy*30.334) );\n        const vec2 nos2 = vec2(12.9898, 78.233);\n        const float nos3 = 43758.5453;\n\n        vec3 nc = vec3( fract(sin(dot(nos1, nos2))*nos3), fract(sin(dot(nos1, nos2*.5))*nos3), fract(sin(dot(nos1, nos2*.25))*nos3) );\n        float n = fract(sin(dot(nos1, nos2*2.) )*nos3);       \n        float z = fract(cos(n)-sin(n)-iTime*.2);\n     \n        float d = (1.-abs(30.*z-p.z) );\n\n        float sz = 1./s.z;\n        vec3 c = vec3(sin( max(0., d*(sz*nc.r)) ), sin( max(0., d*(sz*nc.g)) ), sin( max(0., d*(sz*nc.b)) ) );\n\n        color += (1.-z)*c;\n        p += s;\n    }    \n    vec3 c = max(vec3(0.), min(vec3(1.), color));\n    \n    fragColor = vec4(c ,1.0);\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            }
        ],
        "ver": "0.1"
    }
}