{
    "Shader": {
        "info": {
            "date": "1684184733",
            "description": "angry cat",
            "flags": 0,
            "hasliked": 0,
            "id": "dlGGRy",
            "likes": 6,
            "name": "angry cat",
            "published": 3,
            "tags": [
                "angrycat"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 138
        },
        "renderpass": [
            {
                "code": "///por jorgeF.P.---jorge2017a1\n//angry cat\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(8.0*antialiasing(1.0),b,d)\n#define POLY(N) (in vec2 p, in vec2[N] v) {const int n=v.length();float d=dot(p-v[0],p-v[0]);float s=1.;for(int i=0,j=n-1;i<n;j=i,i++){vec2 e=v[j]-v[i];vec2 w=p-v[i];vec2 b=w-e*clamp(dot(w,e)/dot(e,e),0.,1.);d=min(d,dot(b,b));bvec3 cond=bvec3(p.y>=v[i].y,p.y<v[j].y,e.x*w.y>e.y*w.x);if(all(cond)||all(not(cond))) s=-s;}return s*sqrt(d);}\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\ncolOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.001,0.0));\nreturn colOut;\n}\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\nvec3 DrawFigDelgado(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj-0.001,0.0)); return colOut; }\n\nfloat intersectSDF(float distA, float distB) { return max(distA, distB);}\nfloat unionSDF(float distA, float distB) { return min(distA, distB);}\nfloat differenceSDF(float distA, float distB) {return max(distA, -distB);}\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r); return (p - o) * mat2(c, -s, s, c) + o;}\n\nfloat sdCircle( vec2 p, float r ) {return length(p) - r; }\n\nfloat sdBox( in vec2 p, in vec2 b )\n { vec2 d = abs(p)-b; return length(max(d,0.0)) + min(max(d.x,d.y),0.0); }\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\nvec2 pa = p-a, ba = b-a;\nfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\nreturn length( pa - ba*h );\n}\n\n///------oreja izquierda\nfloat sdPoly4a POLY(4)\nvec2  pt4a[4]=vec2[](\nvec2(0.61,3.35),vec2(0.63,4.69),vec2(1.23,3.65),vec2(0.61,3.35)  );\n\n///oreja derecha\nfloat sdPoly4b POLY(4)\nvec2  pt4b[4]=vec2[](\nvec2(1.39,3.67),vec2(1.67,4.56),vec2(1.95,3.4),vec2(1.39,3.67)  );\n\n//----boca interior\nfloat sdPoly14 POLY(14)\nvec2  pt14[14]=vec2[](\nvec2(1.37,1.93),vec2(1.58,2.19),vec2(1.57,1.68),vec2(1.91,2.1),vec2(1.95,1.7),\nvec2(2.33,2.48),vec2(2.02,2.19),vec2(2.02,2.61),vec2(1.91,2.39),vec2(1.72,2.19),\nvec2(1.68,2.57),vec2(1.46,2.18),vec2(1.2,2.69),vec2(1.37,1.93)  );\n\nvec3 corneaOjoDer(vec2 p, vec3 col)\n{\n    vec2 p1=vec2(2.58,2.7) ; float r1=0.93;\n    float d1=sdCircle(p-p1,r1);\n     vec2 p2=vec2(1.35,2.98) ; float r2=0.77;\n     float d2=sdCircle(p-p2,r2);\n     float df=intersectSDF(d2,d1);\n    ///cornea 2 derecha\n    vec2 p6=vec2(1.985,2.895);  float a6=0.085; float b6=0.145;\n    float d6a=sdEllipse(p-p6, vec2(a6,b6) );\n    //cornea 3 derecha\n    p6=vec2(1.975,2.86); a6=0.035; b6=0.07;\n    float d6b=sdEllipse(p-p6, vec2(a6,b6) );\n    col= DrawFigBorde(vec3(1.0),col, df);\n    col= DrawFigBorde(vec3(0.0),col, d6a);\n    col= DrawFigBorde(vec3(1.0),col, d6b);\n    return col;\n}\n\nvec3 corneaOjoIzq(vec2 p, vec3 col)\n{\n    vec2 p4=vec2(0.675,2.785) ; float r4=0.975;\n    float d4=sdCircle(p-p4,r4);\n        vec2 p1=vec2(-0.025,2.275) ; float r1=1.755;\n    float d1=sdCircle(p-p1,r1);\n        vec2 p2=vec2(1.795,2.985) ; float r2=0.745;\n    float d2=sdCircle(p-p2,r2);\n        float df;\n    df=intersectSDF(d2,d1);\n    df=intersectSDF(d4,df);\n        vec2 p6=vec2(1.535,2.865);  float a6=0.085; float b6=0.145;\n    float d6a=sdEllipse(p-p6, vec2(a6,b6));\n    //cornea 3 interna izq\n     p6=vec2(1.545,2.87);   a6=0.035;  b6=0.07;\n    float d6b=sdEllipse(p-p6, vec2(a6,b6));\n    col= DrawFigBorde(vec3(1.0),col, df);\n    col= DrawFigBorde(vec3(0.0,0.0,0.0),col, d6a);\n    col= DrawFigBorde(vec3(1.0,1.0,1.0),col, d6b);\n    return col;\n}\n\nvec3 boca2(vec2 p  ,vec3 col) \n{ vec2 p6,p7,p1,p2,p3,p4; \nfloat a6,b6,d6;\nfloat a7,b7, d7;\nfloat r1,d1;\nfloat r2,d2;\nfloat df;\nfloat r3,d3;\nfloat r4,d4; \n  \n    float sd14 = sdPoly14(p, pt14);\n    p1 = vec2(1.41, 2.2);\n    r1 = 0.25;\n    d1 = sdCircle(p- p1, r1);\n    \n    p2 = vec2(1.58, 2.6);\n    r2 = 0.3;\n    d2 = sdCircle(p- p2, r2);\n\n    p3 = vec2(1.21, 2.5);\n    r3 = 0.25;\n    d3 = sdCircle(p- p3, r3);\n    \n    p4 = vec2(0.835, 1.97);\n    r4 = 0.475;\n    d4 = sdCircle(p- p4, r4);\n\n    p6 = vec2(1.74, 2.07);\n    a6 = 0.41;\n    b6 = 0.44;\n    d6 = sdEllipse(p- p6, vec2(a6, b6));\n    \n    p7 = vec2(1.895, 2.15);\n    a7 = 0.285;\n    b7 = 0.445;\n    d7 = sdEllipse(p-p7, vec2(a7, b7));\n    \n    df = unionSDF(d6, d7);\n    df = unionSDF(df, d1);\n    df = differenceSDF(df, d3);\n    df = differenceSDF(df, d4);\n    sd14 = intersectSDF(sd14,df);\n    col = DrawFigBorde(vec3(1., 1., 1.), col, df);\n    col= DrawFigDelgado(vec3(0.0,0.0,0.0),col, sd14);\n    return  col;\n}\n\n\nvec3 boca(vec2 p ,vec3 col) \n{\n float sd14;\n vec2 p6,p7,p6a,p7b,p6c;\n float a6, b6,d6;\n float a7, b7, d7a;\n float d6a,d7b,d6c;\n\n    p6 = vec2(1.58, 2.315);\n    a6 = 0.76;\n    b6 = 0.445;\n    d6 = sdEllipse(p- p6, vec2(a6, b6));\n    \n    p7 = vec2(1.72, 2.115);\n    a7 = 0.51;\n    b7 = 0.545;\n    d7a = sdEllipse(p- p7, vec2(a7, b7));\n    \n    p6a = vec2(2.335, 2.51);\n    a6 = 0.285;\n    b6 = 0.17;\n    d6a = sdEllipse(p-p6, vec2(a6, b6));\n    \n    p7b = vec2(2.06, 2.455);\n    a7 = 0.51;\n    b7 = 0.295;\n    d7b = sdEllipse(p- p7b, vec2(a7, b7));\n\n float df;\n    df = min(d6, d7a);\n    df = min(df, d6a);\n    df = min(df, d7b);\n    col=DrawFigBorde(vec3(1., 1., 1.), col, df);\n    p6c = vec2(2.625, 2.74);\n    a6 = 0.185;\n    b6 = 0.22;\n    p = Rotate(p, p6c, 45.0);\n    d6c = sdEllipse(p- p6c, vec2(a6, b6));\n    col = DrawFigBorde(vec3(0., 0., 0.0), col, d6c);\n    return  col;\n}\n\nvec3 pelo1(vec2 p, vec3 col)\n{//pelo diferencia\n    float yd=0.5;\n    vec2 p1=vec2(0.5,3.63-yd); float r1=0.34;\n    float d1=sdCircle(p-p1,r1);\n    \n    vec2 p2=vec2(0.44,3.77-yd) ; float r2=0.32;\n    float d2=sdCircle(p-p2,r2);\n    float df = differenceSDF(d1, d2);\n    col = DrawFigBorde(vec3(0., 0.,0.),col,df);\n    return col;\n}\n\nvec3 pelo2(vec2 p, vec3 col)\n{   ///pelo 2 diferencia d1, d2 con d3...despues unino con pelo\n    float yd=0.4;\n    vec2 p1=vec2(0.205,2.665-yd) ; float r1=0.345;\n    float d1=sdCircle(p-p1,r1);\n    \n    vec2 p2=vec2(0.24,3.33-yd) ; float r2=0.32;\n    float d2=sdCircle(p-p2,r2);\n    \n    vec2 p3=vec2(0.435,2.985-yd) ; float r3=0.225;\n    float d3=sdCircle(p-p3,r3);\n    \n    float df = differenceSDF(d3, d1);\n    df = differenceSDF(df, d2);    \n    col = DrawFigBorde(vec3(0., 0.,0.),col,df);\n    return col;\n}\n\nvec3 rostrogato(vec2 p, vec3 col)\n{ ///cabeza 1\n    vec2 p1=vec2(1.365,2.955) ; float r1=0.755;\n    float d1=sdCircle(p-p1,r1);\n    \n    vec2 p2=vec2(1.08,2.84) ; float r2=0.72;\n    float d2=sdCircle(p-p2,r2);\n    \n    vec2 p6=vec2(1.58,2.315);  float a6=0.76; float b6=0.445;\n    float d6=sdEllipse(p-p6, vec2(a6,b6));\n    \n    vec2 p7=vec2(1.72,2.115); float a7=0.51; float b7=0.545;\n    float d7a=sdEllipse(p-p7, vec2(a7,b7) );\n    \n    vec2 p6a=vec2(2.335,2.51);   a6=0.285; b6=0.17;\n    float d6a=sdEllipse(p-p6,vec2(a6,b6) );\n    \n    vec2 p7b=vec2(2.06,2.455); a7=0.51;  b7=0.295;\n    float d7b=sdEllipse(p-p7b,vec2(a7,b7) );\n\n    //oreja izquierda\n    float sd4a = sdPoly4a(p, pt4a);\n    float sd4b = sdPoly4b(p, pt4b);\n  \n    float df=min(d1,d2);\n    df=min(df,d6);\n    df=min(df,d7a);\n    df=min(df,d6a);\n    df=min(df,d7b);\n    df=min(df,sd4a);\n    df=min(df,sd4b);\n\n    col=DrawFigBorde(vec3(0.0),col,df);\n    col= corneaOjoIzq(p,col);\n    col= corneaOjoDer(p,col);\n    col= boca( p ,col);\n    col= boca2( p ,col);\n    col= pelo1(p,col);\n    col= pelo2(p,col);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-1.5); uv*=5.5;\n    float t=iTime;\n    uv.x=abs(uv.x)+(1.6+0.5*sin(t*2.0))-(1.0+0.5*sin(t));\n     uv.y=abs(uv.y-8.0)+1.5;\n    vec2 uv2=uv*0.25;\n    vec3 colb = 0.5 + 0.5*cos(iTime+uv2.xyx+vec3(0,2,4));\n    vec3 col;\n    if (uv.x<4.0)\n        col=colb;\n    else\n        col=vec3(0.66,0.83,0.92);\n    col= rostrogato(uv*(0.5+0.5*abs(sin(t))) ,col);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}