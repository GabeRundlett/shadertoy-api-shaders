{
    "Shader": {
        "info": {
            "date": "1720945924",
            "description": "t",
            "flags": 0,
            "hasliked": 0,
            "id": "MfXyz7",
            "likes": 16,
            "name": "frame t 2 ",
            "published": 3,
            "tags": [
                "test",
                "bubbles",
                "coordinate",
                "invers"
            ],
            "usePreview": 0,
            "username": "shadertoyjiang",
            "viewed": 153
        },
        "renderpass": [
            {
                "code": "\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nint obj;\n\n// \nfloat sdinvFrame(vec3 p)\n{\n        float riv = 1.;\n        vec3 q = p,   y = iTime*vec3(1,3,7)*.1;\n        q = q * riv / dot(q,q);\n        q -= y;\n        vec3 i = round(q) ;\n        q = q - i;\n        vec3 a = abs(q), s = sign(q);//step(0., q);\n        vec3 m = step(a,a.yzx )*step(a,a.zxy);\n        q = q * m + s * (1. - m)*.5 + i+y;\n        q = q * riv / dot(q,q);\n        float d = length(p-q);\n        return d - .06;\n}\n\nfloat sdInvFace(vec3 p)\n{\n        float riv = 1.;\n        vec3 q = p,   y = iTime*vec3(1,3,7)*.1;\n        q = q * riv / dot(q,q);\n        q -= y;\n        vec3 i = round(q) ;\n        q = q - i;\n        vec3 a = abs(q), s = sign(q);\n        vec3 m = step(a.yzx,a )*step(a.zxy,a );\n        q = q * (1.-m) + s * m*.5 + i+y;\n        q = q * riv / dot(q,q);\n        float d = length(p-q);\n        return d - .0;\n}\n\nvec2 sdaaa(vec3 p)\n{\n        float d1 = sdinvFrame(p);\n        float d2 = sdInvFace(p);\n        obj=1;\n        if(d2<d1)obj=2;\n        return vec2(min(d1,d2),d2);\n}\n\nvec2 map(vec3 p)\n{\n        float t = iTime+5.;\n        vec2 ms = iMouse.xy/iResolution.xy*6.28+t;\n        p.xy = p.xy * rot(t +1.);\n        p.xz = p.xz * rot(ms.x);\n        p.yz = p.yz * rot(ms.y);\n        return sdaaa(p);\n}\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n        O = vec4(.75,.6,.1,1)*.2;\n        vec2 R = iResolution.xy,cd,\n             u = (U+U - R) / R.y;\n        vec3 eye = vec3(0, 0, -5),\n             dir = normalize(vec3(u, 2)),\n             sun = 5. * ( .2*cos(iTime+vec3(7,11,13)) + vec3(-1,2,-3)/3.74 ),\n             eps = vec3(0, .0001, 0),\n             nor, p;\n        float d , t=0., ki=1.;\n        for(int i=0; i<128 ;i++)\n        {\n                if(t>30.)break;\n                p = eye + dir * t;\n                cd = map(p);\n                d = cd.x;\n                if( d<.01 )\n                {       //  \n                        nor = normalize(vec3(map(p+eps.yxx).x, map(p+eps).x, map(p+eps.xxy).x)-d); \n                        vec3  sp = normalize(sun-p), ep=normalize(eye-p);\n                        float ln = max(0., dot(nor,sp)),               // light norm\n                              er = max(0., dot(ep, reflect(-sp,nor))); // eye ray\n                        float ambt=.3, difu=.6, spec=80.;\n                        vec4  lightClr = vec4(1,.5,0,1);\n                        \n\n                        if(obj==1){\n                          O = O     + lightClr * (ambt + difu*ln + pow(er, spec)) * ki     ;\n                            \n                          return;\n                        }\n                        ki*=.8 ;\n                }\n                O = O +    exp( -120.* cd.y )*vec4(.1,.1,.2,1)*.1;\n                t += max(.003, d * .4 ) ;\n        }\n        //O = log(1.+O);\n        //O = vec4(.5,0,0,1);\n}\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}