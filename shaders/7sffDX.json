{
    "Shader": {
        "info": {
            "date": "1696750555",
            "description": "Dual polyhedra with an exact SDF - each fundamental region gives rise to a single triangular face. Use mouse to adjust face position. For other controls, see code.",
            "flags": 48,
            "hasliked": 0,
            "id": "7sffDX",
            "likes": 25,
            "name": "Exact Dual Polyhedron SDF",
            "published": 3,
            "tags": [
                "dual",
                "polyhedron",
                "wythoff"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 232
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Wythoff construction for dual polyhedra, with an exact SDF.\n// Matthew Arcus, mla, 2023\n//\n// https://en.wikipedia.org/wiki/Wythoff_construction\n//\n// Controls:\n// Mouse control is modal: rotation mode applies a rotation,\n// configuration mode sets face position. Key 'x' toggles\n// between modes. 'a' sets animation mode when the face\n// configuration is automatic, so mouse mode is always\n// rotation.\n// <up>/<down>: zoom\n// a: animation mode (ignore mouse setting)\n// e: show edges\n// f: color edges\n// m: mirror faces\n// r: rotation\n// s: exploded view\n// x: toggle mouse mode between rotation & configuration\n//\n// Uses exact distance to triangular faces (or subdivisions of faces) \n// rather than distance to face planes, enabling, eg. SDF rounding\n// to work.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nfloat maxdist = 10.0;\nfloat lradius = 0.05;\nbool coloredges = true;\nbool doedges = false;\n\n// Any P,Q,R with 1/P + 1/Q + 1/R > 1, which means:\n// 2:2:2, 3:2:2, 4:2:2, ...\n// 3:3:2, 4:3:2, 5:3:2\nint P = 2, Q = 3, R = 5;\n\n// Number of iterations of folding loop\n// 5 iterations is enough to get up to (5 3 2) or (10 2 2)\nint NFOLDS = 5;\n\n// Types of feature\nint FACE0 = 0;\nint FACE1 = 1;\nint EDGE = 2;\n\n// 3 mirror planes (passing through origin) define a fundamental\n// region, which intersects the unit sphere in a spherical\n// triangle with angles PI/P, PI/Q, PI/R.\nmat3 ABC;    // normal vectors for mirror planes\nmat3 abc;    // dual vertices\nvec3 vertex; // centre point of region\nvoid initgeometry() {\n  // Setup folding planes\n  float p = PI/float(P);\n  float q = PI/float(Q);\n  float r = PI/float(R);\n  // |A| = |B| = |C| = 1\n  // A.B = -cos(p)\n  // A.C = -cos(r)\n  // B.C = -cos(q) = cos(p)cos(r) + y sin(p)\n  vec3 A = vec3(1,0,0);\n  vec3 B = vec3(-cos(p),sin(p),0);\n  float x = -cos(r);\n  float y = -(cos(p)*cos(r)+cos(q))/sin(p);\n  float z = sqrt(1.0-x*x-y*y);\n  vec3 C = vec3(x,y,z);\n  ABC = mat3(A,B,C);\n  // Convert trilinear to cartesian coordinates\n  vec3 trilinear = vec3(1,1,1);\n  vertex = normalize(mat3(cross(B,C),cross(C,A),cross(A,B))*trilinear);\n\n  // abc is basically inverse(ABC), but with normalized columns\n  vec3 a = normalize(cross(B,C));\n  vec3 b = normalize(cross(C,A));\n  vec3 c = normalize(cross(A,B));\n  vec2 params = 1.0+sin(0.1*iTime*PI*vec2(1,0.618));\n  if (!key(CHAR_A)) {\n    vec2 mouse = store(CHAR_X,2).zw; // Default setting\n    if (mouse.x > 0.0) params = 4.0*mouse.xy/iResolution.xy;\n  }\n  b *= params.x; c *= params.y;\n  abc = mat3(a,b,c);\n}\n\n// Adapted from function by iq: https://www.shadertoy.com/view/ttfGWl\n// Return square of the distance to the triangle.\nfloat triangleDistance2(vec3 p, mat3 abc, out bool isedge) {\n  vec3 v0 = abc[0], v1 = abc[1], v2 = abc[2];\n  vec3 v10 = v1-v0; vec3 p0 = p-v0;\n  vec3 v21 = v2-v1; vec3 p1 = p-v1;\n  vec3 v02 = v0-v2; vec3 p2 = p-v2;\n  vec3 n = cross(v10,v02);\n  // If we are outside the triangle (one of the triple products is negative)\n  // then the closest point might be on any of the edges.\n  isedge = doedges || triple(p0,v10,n) < 0.0 || triple(p1,v21,n) < 0.0 || triple(p2,v02,n) < 0.0;\n  if (isedge) return min(segment2(p0,v10),min(segment2(p1,v21),segment2(p2,v02)));\n  return length2(n*dot(n,p0)/dot(n,n));\n}\n\nfloat scene(vec3 pos, int parity, out int type, out vec2 uv) {\n  uv = pos.xy + pos.yz;\n  if (key(CHAR_S)) pos -= (1.0+sin(iTime))*vertex;\n  bool isedge;\n  float d = sqrt(triangleDistance2(pos,abc,isedge))-lradius;\n  type = parity%2 == 0 ? FACE0 : FACE1;\n  if (coloredges && isedge) type = EDGE;\n  return d;\n}\n\nvec3 fold(vec3 pos,out int parity) {\n  vec3 A = ABC[0], B = ABC[1], C = ABC[2];\n  parity = 0;\n  for (int i = 0; i < NFOLDS; i++) {\n    float k;\n    k = dot(pos,A);\n    int parity0 = 0;\n    parity0 += int(k < 0.0);\n    pos -= 2.0*min(0.0,k)*A;\n    k = dot(pos,B);\n    parity0 += int(k < 0.0);\n    pos -= 2.0*min(0.0,k)*B;\n    k = dot(pos,C);\n    parity0 += int(k < 0.0);\n    pos -= 2.0*min(0.0,k)*C;\n    if (parity0 == 0) break;\n    parity += parity0;\n  }\n  return pos;\n}\n\nfloat map(vec3 pos, out int type, out int parity, out vec2 uv) {\n  pos = fold(pos,parity);\n  return scene(pos,parity,type,uv);\n}\n\nfloat map(vec3 pos) {\n  int type, parity; vec2 uv;\n  return map(pos,type,parity,uv);\n}\n\n// Tetrahedron technique, from:\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(vec3 p) {\n  float h = 0.001;\n  vec2 k = vec2(1,-1);\n  return normalize( k.xyy*map( p + k.xyy*h ) + \n                    k.yyx*map( p + k.yyx*h ) + \n                    k.yxy*map( p + k.yxy*h ) + \n                    k.xxx*map( p + k.xxx*h ) );\n}\n\nfloat march(in vec3 ro, in vec3 rd) {\n  const float precis = 0.001;\n  float t = 0.0;\n  float res = -1.0;\n  for (int i = 0; i < 200; i++) {\n    //assert(i < 30);\n    if (t > maxdist) break;\n    float h = map(ro+rd*t);\n    if (key(CHAR_Z) && h < precis) break;\n    t += h;\n    if (h < precis) break;\n  }\n  return t;\n}\n\nvec3 transform(in vec3 p) {\n  vec2 mouse = iMouse.xy;\n  if (!key(CHAR_A)) mouse = store(CHAR_X,2).xy;\n  if (mouse.x > 0.0) {\n    float theta = (2.0*mouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = (2.0*mouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  if (!key(CHAR_R)) {\n    //p.yz = rotate(p.yz,iTime * 0.125);\n    p.zx = rotate(p.zx,iTime * 0.2);\n  }\n  return p;\n}\n\nvec3 basecolor(int type) {\n  if (type == FACE0) return vec3(1,1,0.5);\n  if (type == FACE1) return vec3(1,0.25,0.25);\n  if (type == EDGE) return vec3(0.2);\n  return vec3(1,0,1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = (2.0*fragCoord.xy - iResolution.xy) / iResolution.y;\n  float camera = 4.0;\n  camera *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP)));\n  doedges = key(CHAR_E);\n  coloredges = key(CHAR_F);\n  vec3 ro = vec3(0,0,camera);\n  vec3 rd = vec3(uv, -2);\n  vec3 light = vec3(0.5, 0.8, 3.0);\n  ro = transform(ro);\n  rd = transform(rd);\n  light = transform(light);\n  light = normalize(light);\n  rd = normalize(rd);\n  initgeometry();\n  vec3 col = vec3(0);\n  //col = texture(iChannel1,uv).xyz; col = pow(col,vec3(2.2));\n  float t = march(ro, rd);\n  if (t < maxdist) {\n    vec3 pos = ro + t * rd;\n    vec3 n = calcNormal(pos);\n    int type, parity;\n    vec2 uv;\n    map(pos,type,parity,uv);\n    if (key(CHAR_M)) {\n      col = texture(iChannel0,reflect(rd,n)).xyz;\n    } else {\n      col = basecolor(type);\n      col *= texture(iChannel1,uv).xyz;\n      float diffuse = clamp(dot(n, light), 0.0, 1.0);\n      col *= 0.2 + 0.8*diffuse;\n      float specular = pow(max(0.0,dot(reflect(light,n),rd)),10.0);\n      col += 0.3*specular*vec3(1);\n    }\n  }\n  col = pow(col,vec3(0.4545));\n  if (alert) col.x = 1.0;\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 map(vec2 screenpos) {\n  return (2.0*screenpos-iResolution.xy)/iResolution.y;\n}\n\nvec2 initselection(int i) {\n  return vec2(0);\n}\n \nvoid mainImage(out vec4 t, vec2 uv) {\n  int i = int(uv.x); // Column number\n  int j = int(uv.y); // Row\n  if ( iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (j == 0) {\n    // First row - key count\n    // Do key repeat here as well?\n    float w1 = keystate(i,0).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      // Don't count key changes when ALT pressed\n      if (keystate(KEY_ALT,0).x == 0.0 && w1 != 0.0) {\n        t.x++; t.y = iTime;\n      }\n    }\n    // Key repeat - only when shader is running!\n    // Should have longer pause after first key press.\n    if (t.w != 0.0 && keystate(KEY_ALT,0).x == 0.0 && iTime-t.y > 0.25) {\n      t.x++; t.y = iTime;\n    }\n  } else if (j == 1) {\n    if (i == 0 && iMouse.z != 0.0) t.xy = iMouse.xy;\n    if (i == 1 && iMouse.z == 0.0) t.xy = iMouse.xy;\n  } else if (j == 2) {\n    if (key(i)) t.xy = iMouse.xy;\n    else t.zw = iMouse.xy;\n  } else if (j == 3) {\n      // Cell 0 holds currently selected item, 0 = no selection\n    if (i == 0) {\n      if (t.x == 0.0 && iMouse.z > 0.0) {\n        vec2 mouse = map(iMouse.xy);\n        // No selection, but mouse down\n        for (int i = 1; i <= 4; i++) {\n          vec2 p = texelFetch(iChannel2,ivec2(i,3),0).xy; // Get current state\n          if (distance(mouse,p) < 0.05) {\n            t.x = float(i);\n            break;\n          }\n        }\n      } else if (t.x != 0.0 && iMouse.z <= 0.0) {\n        t.x = 0.0;\n      }\n    } else if (iFrame == 0) {\n      t.xy = initselection(i); // Current coordinates\n    } else {\n      vec4 t0 = texelFetch(iChannel2,ivec2(0,3),0); // Get current state\n      if (int(t0.x) == i) {\n        // If currently selected, copy mouse position\n        t.xy = map(iMouse.xy);\n      }\n    }\n  }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float PI\t= 3.14159265359;\n\nbool alert = false;\nvoid assert(bool test) {\n  if (!test) alert = true;\n}\n\nvec2 rotate(in vec2 p, in float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nfloat length2(vec3 p) {\n  return dot(p,p);\n}\n\n// Perpendicular distance from p to segment from origin to b\nfloat segment2(vec3 p, vec3 b) {\n  float t = dot(p,b)/dot(b,b);\n  t = clamp(t,0.0,1.0);\n  return length2(p-t*b);\n}\n\n// Perpendicular distance from p to segment ab\nfloat segment2(vec3 p, vec3 a, vec3 b) {\n  return segment2(p-a,b-a);\n}\n\n// Triple product\nfloat triple(vec3 p,vec3 q, vec3 r) { return dot(cross(p,q),r); }\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n#define keystate(code,n) ( texelFetch(iChannel3,ivec2(code,n),0) )\n\nconst int KEY_SHIFT = 16;\nconst int KEY_ALT = 18;\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nconst int CHAR_0 = 48;\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_X = 88;\nconst int CHAR_Z = 90;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}