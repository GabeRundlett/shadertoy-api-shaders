{
    "Shader": {
        "info": {
            "date": "1618708956",
            "description": "Exact distance to a 2D shadow volume.",
            "flags": 0,
            "hasliked": 0,
            "id": "fslXD7",
            "likes": 15,
            "name": "Distance to 2D Shadow Volume",
            "published": 3,
            "tags": [
                "2d",
                "volume",
                "sdf",
                "shadow",
                "distance",
                "exact"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 261
        },
        "renderpass": [
            {
                "code": "struct ShadowVol2D {\n    vec2 ap;\n    vec2 ad;\n    vec2 bp;\n    vec2 bd;\n};\n\nShadowVol2D shadowVolBox2D(in vec2 l, in vec2 b) {\n    vec2 s = vec2(l.x < 0.0 ? -1.0 : 1.0, l.y < 0.0 ? -1.0 : 1.0);\n    vec2 c1 = vec2(b.x * sign(b.y - abs(l.y)), b.y) * s;\n    vec2 c2 = vec2(b.x, b.y * sign(b.x - abs(l.x))) * s;\n    return ShadowVol2D(c1, normalize(c1 - l), c2, normalize(c2 - l));\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    vec2 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(0.0, max(q.x, q.y));\n}\n\n// ap, bp: corners of the shadow volume\n// ad, bd: direction of the shadow corresponding to a corner of it\nfloat sdShadowVolume2D(in vec2 p, in vec2 ap, in vec2 ad, in vec2 bp, in vec2 bd) {\n    vec2 pa = p - ap, pb = p - bp, ba = bp - ap;\n\n    vec2 b = pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    vec2 e1 = pa - ad * max(0.0, dot(pa, ad) / dot(ad, ad));\n    vec2 e2 = pb - bd * max(0.0, dot(pb, bd) / dot(bd, bd));\n\n    vec2 bap = vec2(-ba.y, ba.x), h = 0.5 * (ad + bd);\n    float s = sign(max(dot(pa, vec2(-ad.y, ad.x)) * dot(pb, vec2(-bd.y, bd.x)), dot(pa, bap) * sign(dot(bap, -h))));\n    return sqrt(min(dot(b, b), min(dot(e1, e1), dot(e2, e2)))) * s;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y * 4.0;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n\n    // Default before interaction\n    if (ivec2(iMouse.xy) == ivec2(0)) mouse = vec2(2.0, 1.0);\n\n    vec2 box = vec2(1.0, 0.5);\n    ShadowVol2D boxShadow = shadowVolBox2D(mouse, box);\n\n    float d = sdShadowVolume2D(uv, boxShadow.ap, boxShadow.ad, boxShadow.bp, boxShadow.bd);\n    d *= 0.5; // Expand isolines\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcolor *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(140.0 * d);\n\tcolor = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 0.015, abs(d)));\n\n    // Shadow caster\n    float boxDist = sdBox(uv, box);\n    color = mix(color, vec3(1.0, 0.0, 0.0), smoothstep(unit, 0.0, boxDist));\n    color = mix(color, vec3(0.0), smoothstep(unit, 0.0, abs(boxDist)));\n\n    // Edges of shadow volume\n    color = mix(color, vec3(1.0), smoothstep(unit, 0.0, abs(dot(uv - boxShadow.ap, vec2(-boxShadow.ad.y, boxShadow.ad.x)))));\n    color = mix(color, vec3(1.0), smoothstep(unit, 0.0, abs(dot(uv - boxShadow.bp, vec2(-boxShadow.bd.y, boxShadow.bd.x)))));\n\n    // Light\n    color = mix(color, vec3(1.0), smoothstep(unit, 0.0, length(uv - mouse) - 0.05));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}