{
    "Shader": {
        "info": {
            "date": "1606700633",
            "description": "Cloud generated by pseudo normal distribution by Box-Muller's method.",
            "flags": 0,
            "hasliked": 0,
            "id": "3dKfRD",
            "likes": 3,
            "name": "Box-Muller's Sphere Cloud",
            "published": 3,
            "tags": [
                "raymarching",
                "cloud",
                "random"
            ],
            "usePreview": 0,
            "username": "IWBTShyGuy",
            "viewed": 388
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2020 IWBTShyGuy\n\nfloat prerandom(in vec2 c) {\n    vec2 gen = vec2(114.514, 191.9810);\n    return fract(gen.x * sin(gen.y * c.x + c.y));\n}\n\nfloat random(in vec2 c) {\n    return prerandom(vec2(\n        prerandom(c),\n        prerandom(c.yx)\n    ));\n}\n\nconst int I = 10;\nconst int J = 10;\nconst int K = 10;\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 origin = vec3(0.0, 0.0, -4.0);\n    Camera camera = new_camera(\n        origin,\n        vec3(0.0, 0.0, 1.0),\n        vec3(0.0, 1.0, 0.0),\n        PI / 4.0,\n        iResolution.x / iResolution.y\n    );\n    vec3 ray = camera_ray(camera, uv);\n\n    int count = 0;\n    for (int i = 1; i <= I; i++) {\n        for (int j = 1; j <= J; j++) {\n            for (int k = 1; k <= K; k++) {\n                vec3 c = vec3(float(i), float(j * 2), float(k * 3));\n                vec2 ai = vec2(random(c.yz), random(c.zy));\n                vec2 aj = vec2(random(c.zx), random(c.xz));\n                vec2 ak = vec2(random(c.xy), random(c.yx));\n                // Box-Muller's method!\n                vec3 pt = vec3(\n                    sqrt(-2.0 * log(ai.x)) * cos(2.0 * PI * ai.y),\n                    sqrt(-2.0 * log(aj.y)) * cos(2.0 * PI * aj.x),\n                    sqrt(-2.0 * log(ak.x)) * sin(2.0 * PI * ak.y)\n                ) * (1.0 + 0.95 * sin(iTime / 2.0));\n                float dist2 = distance2_point_line(pt, origin, ray);\n                if (dist2 < 1.0) count += 1;\n            }\n        }\n    }\n    float irr = float(count) / float(I * J * K);\n    fragColor = vec4(irr, irr, irr, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.141592653;\n\n// ----------------------- Light ----------------------- //\nstruct SpotLight {\n    vec3 position;\n    vec3 direction;\n    float angle;\n};\n\nSpotLight new_light(vec3 position, vec3 direction, float angle) {\n    SpotLight light;\n    light.position = position;\n    light.direction = direction;\n    light.angle = angle;\n    return light;\n}\n\n// ----------------------- Camera ----------------------- //\nstruct Camera {\n    vec3 position;\n    vec3 direction;\n    vec3 up_direction;\n    float fov;\n    float aspect; // x / y\n};\n\nCamera new_camera(vec3 position, vec3 direction, vec3 up_direction, float fov, float aspect) {\n    Camera camera;\n    camera.position = position;\n    camera.direction = direction;\n    camera.up_direction = up_direction;\n    camera.fov = fov;\n    camera.aspect = aspect;\n    return camera;\n}\n\n// perspective camera ray\n// cf: https://qiita.com/aa_debdeb/items/301dfc54788f1219b554\nvec3 camera_ray(in Camera camera, in vec2 uv) {\n    uv = uv * 2.0 - 1.0;\n    float radian = camera.fov;\n    float h = tan(radian * 0.5);\n    float w = h * camera.aspect;\n    vec3 right = normalize(cross(camera.direction, camera.up_direction));\n    vec3 up = normalize(cross(right, camera.direction));\n    return normalize(right * w * uv.x + up * h * uv.y + camera.direction);  \n}\n\n// ----------------------- Basic Math ----------------------- //\n// Rodrigues' rotation formula\nmat3 rot(vec3 axis, float angle) {\n    return mat3(\n        axis[0] * axis[0] * (1.0 - cos(angle)) + cos(angle),\n        axis[0] * axis[1] * (1.0 - cos(angle)) + axis[2] * sin(angle),\n        axis[0] * axis[2] * (1.0 - cos(angle)) - axis[1] * sin(angle),\n        axis[0] * axis[1] * (1.0 - cos(angle)) - axis[2] * sin(angle),\n        axis[1] * axis[1] * (1.0 - cos(angle)) + cos(angle),\n        axis[1] * axis[2] * (1.0 - cos(angle)) + axis[0] * sin(angle),\n        axis[0] * axis[2] * (1.0 - cos(angle)) + axis[1] * sin(angle),\n        axis[1] * axis[2] * (1.0 - cos(angle)) - axis[0] * sin(angle),\n        axis[2] * axis[2] * (1.0 - cos(angle)) + cos(angle)\n    );\n}\n\n// determinant of a 3x3 matrix\nfloat det(in mat3 a) {\n    return a[0][0] * a[1][1] * a[2][2]\n        + a[0][1] * a[1][2] * a[2][0]\n        + a[0][2] * a[1][0] * a[2][1]\n        - a[0][1] * a[1][0] * a[2][2]\n        - a[0][2] * a[1][1] * a[2][0]\n        - a[0][0] * a[1][2] * a[2][1];\n}\n\n// Solves the equation Ax = b.\nvec3 solve(in mat3 a, in vec3 b) {\n    return vec3(\n        det(mat3(b, a[1], a[2])),\n        det(mat3(a[0], b, a[2])),\n        det(mat3(a[0], a[1], b))\n    ) / det(a);\n}\n\n// the square of the distance between a point pt and a line stipulated by its origin and its direction\n// The direction vector have to be normalized.\nfloat distance2_point_line(in vec3 point, in vec3 origin, in vec3 direction) {\n    vec3 a = point - origin;\n    vec3 h = a - dot(a, direction) * direction;\n    return dot(h, h);\n}\n\n// the distance between a point pt and a line stipulated by its origin and its direction\n// The direction vector have to be normalized.\nfloat distance_point_line(in vec3 point, in vec3 origin, in vec3 direction) {\n    return sqrt(distance2_point_line(point, origin, direction));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}