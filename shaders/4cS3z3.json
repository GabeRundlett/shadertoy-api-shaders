{
    "Shader": {
        "info": {
            "date": "1704446498",
            "description": "Generalization of [url=https://www.shadertoy.com/view/4c23Dw]4c23Dw[/url] to allow for different mass arrangements.",
            "flags": 32,
            "hasliked": 0,
            "id": "4cS3z3",
            "likes": 10,
            "name": "3 Body Spring System",
            "published": 3,
            "tags": [
                "springs",
                "3body",
                "differentialeqn"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 265
        },
        "renderpass": [
            {
                "code": "#define paint(sdf, color) fragColor.rgb = mix(fragColor.rgb, color, smoothstep(unit, 0.0, sdf))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * scale;\n    float unit = 2.0 * scale / iResolution.y;\n\n    SpringSystem sys;\n    initializeSystem(sys);\n    solveSpringSystem(sys);\n\n    // Calculate the current state of the system\n    vec2 a, b, c;\n    springState(sys, iTime, a, b, c);\n\n    // Center the system\n    vec2 center = sys.c1 + sys.c2 * iTime;\n    a -= center, b -= center, c -= center;\n\n    // Draw springs\n    vec2 uv1 = axisAlign(uv - a, normalize(b - a));\n    if (uv1.x > 0.0 && uv1.x < length(b - a)) paint(udTriangleWave(uv1, 8.0 / length(b - a), 0.5), vec3(1.0));\n\n    vec2 uv2 = axisAlign(uv - b, normalize(c - b));\n    if (uv2.x > 0.0 && uv2.x < length(c - b)) paint(udTriangleWave(uv2, 8.0 / length(c - b), 0.5), vec3(1.0));\n\n    vec2 uv3 = axisAlign(uv - c, normalize(a - c));\n    if (uv3.x > 0.0 && uv3.x < length(a - c)) paint(udTriangleWave(uv3, 8.0 / length(a - c), 0.5), vec3(1.0));\n\n    // Draw masses\n    paint(length(uv - a) - 0.2 * sqrt(sys.mass1), vec3(1.0, 0.0, 0.0));\n    paint(length(uv - b) - 0.2 * sqrt(sys.mass2), vec3(0.0, 1.0, 0.0));\n    paint(length(uv - c) - 0.2 * sqrt(sys.mass3), vec3(0.0, 0.0, 1.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define scale 10.0\n\nstruct SpringSystem {\n    vec2 aPos0, bPos0, cPos0;     // Initial positions\n    vec2 aVel0, bVel0, cVel0;     // Initial velocities\n    float mass1, mass2, mass3;    // Body masses\n    float stiff1, stiff2, stiff3; // Spring stiffnesses\n    bool hasEigenPlane;           // Is this a degenerate case?\n    float freq0, freq1;           // Eigenvalues of the system\n    vec3 eig0, eig1;              // Eigenvectors of the system\n    vec2 c1, c2, c3, c4, c5, c6;  // Constants to solve IVP\n};\n\n// Initializes the spring system in this animation\n// Feel free to experiment with it\nvoid initializeSystem(inout SpringSystem sys) {\n    sys.aPos0 = vec2(-2.0, -2.0);\n    sys.aVel0 = vec2(1.0, -0.5);\n    sys.mass1 = 10.0;\n    sys.stiff1 = 3.0;\n\n    sys.bPos0 = vec2(2.0, -2.0);\n    sys.bVel0 = vec2(2.0, 3.0);\n    sys.mass2 = 2.0;\n    sys.stiff2 = 10.0;\n\n    sys.cPos0 = vec2(0.0, 2.0);\n    sys.cVel0 = vec2(-1.5, 1.0);\n    sys.mass3 = 3.0;\n    sys.stiff3 = 2.0;\n}\n\n// solveSpringSystem() solves the following system of differential equations\n// given the bodies masses, spring stiffnesses, and initial conditions in sys\n// m1 * a'' = k1 * (b - a) + k3 * (c - a)\n// m2 * b'' = k1 * (a - b) + k2 * (c - b)\n// m3 * c'' = k3 * (a - c) + k2 * (b - c)\n#define fequals(a, b) (abs((a) - (b)) < 1e-6)\nvoid solveSpringSystem(inout SpringSystem sys) {\n    float totalMass = sys.mass1 + sys.mass2 + sys.mass3;\n    float k2m1 = sys.stiff2 * sys.mass1;\n    float k3m2 = sys.stiff3 * sys.mass2;\n    float k1m3 = sys.stiff1 * sys.mass3;\n    if (fequals(k2m1, k3m2) && fequals(k3m2, k1m3)) {\n        sys.hasEigenPlane = true;\n        sys.freq0 = sqrt(totalMass * sys.stiff1 / (sys.mass1 * sys.mass2));\n        float m1w0 = sys.mass1 * sys.freq0;\n        sys.c1 = (sys.mass1 * sys.aPos0 + sys.mass2 * sys.bPos0 + sys.mass3 * sys.cPos0) / totalMass;\n        sys.c2 = (sys.mass1 * sys.aVel0 + sys.mass2 * sys.bVel0 + sys.mass3 * sys.cVel0) / totalMass;\n        sys.c3 = (sys.c1 - sys.bPos0) / sys.mass1;\n        sys.c4 = (sys.c2 - sys.bVel0) / m1w0;\n        sys.c5 = (sys.c1 - sys.cPos0) / sys.mass1;\n        sys.c6 = (sys.c2 - sys.cVel0) / m1w0;\n    } else {\n        sys.hasEigenPlane = false;\n        float K = sys.stiff1 * sys.stiff2 + (sys.stiff1 + sys.stiff2) * sys.stiff3;\n        float alpha = (sys.stiff1 + sys.stiff3) / sys.mass1 + (sys.stiff1 + sys.stiff2) / sys.mass2 + (sys.stiff2 + sys.stiff3) / sys.mass3;\n        float beta = totalMass * K / (sys.mass1 * sys.mass2 * sys.mass3);\n        float d = sqrt(alpha * alpha - 4.0 * beta);\n        float w0w0 = (alpha + d) * 0.5, w1w1 = (alpha - d) * 0.5;\n        sys.freq0 = sqrt(w0w0), sys.freq1 = sqrt(w1w1);\n\n        float p1 = K - k1m3 * w0w0;\n        float p2 = K - k2m1 * w0w0;\n        float p3 = K - k3m2 * w0w0;\n        sys.eig0 = vec3(p1 * p3, p1 * p2, p2 * p3);\n\n        float q1 = K - k1m3 * w1w1;\n        float q2 = K - k2m1 * w1w1;\n        float q3 = K - k3m2 * w1w1;\n        sys.eig1 = vec3(q1 * q3, q1 * q2, q2 * q3);\n\n        vec2 pba = sys.bPos0 - sys.aPos0, pca = sys.cPos0 - sys.aPos0;\n        vec2 vba = sys.bVel0 - sys.aVel0, vca = sys.cVel0 - sys.aVel0;\n        p1 = sys.eig0.y - sys.eig0.x, p2 = sys.eig0.z - sys.eig0.x;\n        q1 = sys.eig1.y - sys.eig1.x, q2 = sys.eig1.z - sys.eig1.x;\n        float det = p1 * q2 - p2 * q1;\n\n        sys.c3 = (q2 * pba - q1 * pca) / det;\n        sys.c4 = (q2 * vba - q1 * vca) / det;\n        sys.c5 = (p1 * pca - p2 * pba) / det;\n        sys.c6 = (p1 * vca - p2 * vba) / det;\n        sys.c1 = sys.aPos0 - sys.eig0.x * sys.c3 - sys.eig1.x * sys.c5;\n        sys.c2 = sys.aVel0 - sys.eig0.x * sys.c4 - sys.eig1.x * sys.c6;\n        sys.c4 /= sys.freq0;\n        sys.c6 /= sys.freq1;\n    }\n}\n\n// Calculates the state of a spring system sys at time t\n// a, b, and c are set to the calculated positions of the masses\nvoid springState(in SpringSystem sys, in float t, out vec2 a, out vec2 b, out vec2 c) {\n    if (sys.hasEigenPlane) {\n        float x = sys.freq0 * t;\n        float co = cos(x), si = sin(x);\n        vec2 l = sys.c1 + sys.c2 * t;\n        vec2 r0 = sys.c3 * co + sys.c4 * si;\n        vec2 r1 = sys.c5 * co + sys.c6 * si;\n        a = l + sys.mass2 * r0 + sys.mass3 * r1;\n        b = l - sys.mass1 * r0;\n        c = l - sys.mass1 * r1;\n    } else {\n        vec2 l = sys.c1 + sys.c2 * t;\n        float x0 = sys.freq0 * t, x1 = sys.freq1 * t;\n        vec2 r0 = sys.c3 * cos(x0) + sys.c4 * sin(x0);\n        vec2 r1 = sys.c5 * cos(x1) + sys.c6 * sin(x1);\n        a = l + sys.eig0.x * r0 + sys.eig1.x * r1;\n        b = l + sys.eig0.y * r0 + sys.eig1.y * r1;\n        c = l + sys.eig0.z * r0 + sys.eig1.z * r1;\n    }\n}\n\n// Signed distance function utilities\nvec2 axisAlign(in vec2 p, in vec2 up) {\n    return mat2(up.x, -up.y, up.yx) * p;\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    p -= a, b -= a;\n    return length(p - b * clamp(dot(p, b) / dot(b, b), 0.0, 1.0));\n}\n\nfloat udTriangleWave(in vec2 p, in float freq, in float amp) {\n    float pw = 1.0 / freq, qw = 0.25 * pw;\n    vec2 sc = vec2(2.0 * amp, pw);\n    float l = length(sc);\n    p.x = abs(mod(p.x + qw, pw) - 0.5 * pw) - qw;\n    p *= mat2(sc, -sc.y, sc.x) / l;\n    return length(vec2(p.x, max(0.0, abs(p.y) - 0.25 * l)));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define paint(sdf, color) fragColor.rgb = max(fragColor.rgb, color * smoothstep(unit, 0.0, sdf))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * scale;\n    float unit = 2.0 * scale / iResolution.y;\n\n    SpringSystem sys;\n    initializeSystem(sys);\n    solveSpringSystem(sys);\n\n    // Offset the current tracing to show the overall motion of the system\n    vec2 st = fragCoord / iResolution.xy;\n    vec2 movement = sys.c2 * iTimeDelta / scale;\n    movement.x *= iResolution.y / iResolution.x;\n    fragColor = texture(iChannel0, st + movement);\n\n    // Calculate the state of the system on the previous frame\n    vec2 ap, bp, cp;\n    springState(sys, iTime - iTimeDelta, ap, bp, cp);\n\n    // Calculate the current state of the system\n    vec2 ac, bc, cc;\n    springState(sys, iTime, ac, bc, cc);\n\n    // Center the system\n    vec2 center = sys.c1 + sys.c2 * iTime;\n    ap -= center, bp -= center, cp -= center;\n    ac -= center, bc -= center, cc -= center;\n\n    // Draw the current segment of the motion of the system\n    paint(sdLine(uv, ap, ac), vec3(1.0));\n    paint(sdLine(uv, bp, bc), vec3(1.0));\n    paint(sdLine(uv, cp, cc), vec3(1.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}