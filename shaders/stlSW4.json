{
    "Shader": {
        "info": {
            "date": "1625757234",
            "description": "A very basic packed object pattern using a less than sophisticated dart throwing algorithm.",
            "flags": 32,
            "hasliked": 0,
            "id": "stlSW4",
            "likes": 54,
            "name": "Packed Object Pattern",
            "published": 3,
            "tags": [
                "circle",
                "circle",
                "bubble",
                "vector",
                "polygon",
                "pack",
                "pack",
                "packing",
                "dart",
                "throwing"
            ],
            "usePreview": 1,
            "username": "Shane",
            "viewed": 906
        },
        "renderpass": [
            {
                "code": "/*\n\n    Packed Object Pattern\n    ---------------------    \n    \n    This is yet another packed object pattern using a simple but highly\n    inefficient dart throwing algorithm -- To be fair, it will get the\n    job done, but will take at least 20 seconds to form, which in GPU \n    time is an eternity.\n    \n    There was no particular reason for putting this together other than \n    boredom and fun. I started with Oneshade's \"Coral Growth\" demonstration \n    as a base, then added bits here and there until not much of the \n    original code was left, but it's basically the same thing.\n    \n    My main motivation was prettying up some random vector objects, so I\n    didn't bother much with the algorithm itself. Having said that, I at\n    least attempted to hurry things along by modifying things to \n    effectively shoot more darts. However, there are way more efficient \n    partitioning based strategies for producing these patterns.\n    \n    I much prefer to use the cube map faces for pre-rendered textures,\n    but I didn't here, plus I'm using all four channels, so changing \n    resolutions requires either hitting the back button or clicking the \n    mouse. By the way, there's a \"SHAPE\" define in the other tab that'll\n    allow for the rendering of different objects for anyone interested.\n    \n    \n    \n    Other Examples:\n    \n    // I loosely based this example on the following:\n    Expanding Coral Growth - Oneshade\n    https://www.shadertoy.com/view/sl2GDd\n    \n    // One of Fabrice's early attempts.\n    dart throwing / space filling 2b - Created by FabriceNeyret2 \n    https://www.shadertoy.com/view/ltVBRt\n    \n    // This is a much more sophisticated approach. Fizzer uses his brain,\n    // whereas I tend to hit things with a hammer and hope for the best. :D\n    Dart-Throwing with Gap-Search - Fizzer\n    https://www.shadertoy.com/view/3sSXW1 \n\n*/\n\n\n// I prefer the cleaner look, but some mild texturing is possible.\n//#define TEXTURE\n\n// Fake highlight shading. Things look cleaner without it.\n#define HIGHLIGHTS\n\n\n// Standard 2D rotation formula.\nmat2 rot2(in float a){ float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\n\n// IQ's vec2 to float hash.\nfloat hash21(vec2 p){\n    return fract(sin(dot(p, vec2(27.619, 57.583)))*43758.5453); \n}\n\n/*\n// IQ's line distace formula. \nfloat sdLine( in vec2 p, in vec2 a, in vec2 b ){\n\n\tp -= a, b -= a;\n\treturn length(p - b*clamp(dot(p, b)/dot(b, b), 0., 1.));\n}\n*/\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n   \n    // UV coordinates.\n    vec2 svUV = (fragCoord - iResolution.xy*.5)/iResolution.y;\n    vec2 uv = rot2(-3.14159/3.5)*svUV - iTime/32.;\n    float sf = 1./iResolution.y;\n\n    // Some texture or buffer samples.\n    vec4 buf = texture(iChannel0, fract(uv));\n    vec4 bufSh = texture(iChannel0, fract(uv - vec2(-.005, -.015)));\n    vec4 bufLt = texture(iChannel0, fract(uv + 2.25*vec2(-.005, -.015)));\n    \n    \n    // Scene color -- Initiated to white.\n    vec3 col = vec3(1);\n    \n    \n    #ifdef TEXTURE\n    vec3 tx2 = texture(iChannel1, uv).xyz; tx2 *= tx2;\n    col = col*.6 + (col*1. + .1)*tx2;    \n    #endif\n    \n    \n    // Mild distance field based concentric background pattern.\n    float pat = (abs(fract(-buf.x*65.) - .5)*2. - .2)/130.;\n    col = mix(col, vec3(0), (1. - smoothstep(0., sf, pat))*.25);\n    // Line pattern.\n    //float pat2 = (abs(fract((uv.x - uv.y)*65.) - .5)*2. - .35)/65.;\n    //col = mix(col, vec3(0), (1. - smoothstep(0., sf, pat2))*.35);\n    \n    \n    // Object coloring.\n    vec3 cCol = vec3(1,  hash21(buf.yz)*.1, hash21(buf.yz + .09)*.1);\n     \n     \n    // Texturing the objects.\n    #ifdef TEXTURE\n    vec2 qq = (fract(uv - buf.yz) - .5);\n    vec3 tx = texture(iChannel1, (qq/2./buf.w)*(1. + dot(qq, qq)/buf.w) - .5).xyz; tx *= tx;\n    tx = smoothstep(.1, .5, tx).xyz;\n    cCol = cCol*.6 + (cCol*1.2 + .1)*tx;\n    #endif\n    \n    // Outer and inner edge widths.\n    float ew = .005;\n    float ew2 = .008;\n    \n    // Bump. Not used.\n    //float b = max(-bufLt.x/(buf.w - ew2), 0.);\n \n \n    #ifdef HIGHLIGHTS\n    // Fake mild diffuse and fake specular highlights.\n    vec2 ep = buf.yz + normalize(vec2(.005, .015))*(buf.w*.35);\n    float pl = length(fract(uv - ep) - .5) - (buf.w*.7*.85);\n    //float pl = sHexS(fract(uv - ep) - .5, (buf.w*.4*.85), (buf.w*.4*.85)*.4);\n    cCol = mix(cCol, mix(cCol, vec3(1), .75), (1. - smoothstep(0., sf*12., pl))*.1);\n    ep = buf.yz + normalize(vec2(.005, .015))*(buf.w*.3);\n    pl = length(fract(uv - ep) - .5) - (buf.w*.15*.85);\n    //vec2 gg = abs(fract(uv - ep) - .5) - (buf.w*.15*.85);\n    //pl = -pl + max(gg.x, gg.y)*16.;\n    cCol = mix(cCol, mix(cCol, vec3(1), .75), (1. - smoothstep(0., sf*5., pl))*.35);\n    #endif\n \n    // Light edge color.\n    vec3 cCol2 = mix(cCol, vec3(1), .9);\n\n\n    /*\n    ////\n    // Polar lines on the outer rims. Interesting, but not this time. :)\n    vec2 pp = fract(uv - buf.yz) - .5;\n    float aa = atan(pp.x, pp.y)/6.2831;\n    float lnNum = floor(48.*6.2831*buf.w);\n    aa = (floor(aa*lnNum) + .5)/lnNum;\n    vec2 aPnt3 = rot2(aa*6.2831)*vec2(0, 1);\n    float pat3 = sdLine(pp, vec2(0), aPnt3) - .0025;\n    if(lnNum>3.)cCol2 = mix(cCol2, vec3(0), (1. - smoothstep(0., sf, pat3))*.3);\n    ////\n    */\n    \n\n    // Rendering the various shadow, edge, color layers, etc.\n    //\n    // Shadow.\n    col = mix(col, vec3(0),  (1. - smoothstep(0., sf*2., bufSh.x))*.4);\n    // Edges.\n    col = mix(col, vec3(0),  1. - smoothstep(sf, 0., -buf.x));\n    col = mix(col, cCol2,  1. - smoothstep(sf, 0., -buf.x - ew));\n    col = mix(col, vec3(0),  1. - smoothstep(sf, 0., -buf.x - ew2 - ew));\n    #ifdef HIGHLIGHTS\n    cCol += max(0.-(bufLt.x)/.25, 0.);\n    //cCol += b*b;\n    //cCol = mix(cCol, vec3(0), (1. - smoothstep(0., sf, pat2))*.35);\n    #endif\n    // The inner color layer.\n    col = mix(col, cCol,  1. - smoothstep(sf, 0., -buf.x - ew2 - ew*2.));\n    \n    \n    // Extra gradient based coloring.\n    uv = fragCoord/iResolution.xy;\n    col = mix(col, col.zyx, uv.y*.7 - .35);\n    \n    \n    // Rough gamma correction.\n    fragColor = vec4(sqrt(max(col, 0.)), 1);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// The dart throwing algorithm.\n\n\n// Pattern shape: Circle: 0, Triangle: 1,  Square: 2, Polygon: 3\n// Changing this will require a reset with the mouse or back button.\n#define SHAPE 3\n\n// Put holes in the shapes.\n//#define ANULUS\n\n \n// Standard 2D rotation formula.\nmat2 rot2(in float a){ float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\n\n// IQ's vec2 to float hash.\nfloat hash21(vec2 p){  \n    //p = mod(p, 8.);\n    return fract(sin(mod(dot(p, vec2(127.619, 157.583)), 6.2831589))*43758.5453); \n}\n\n \n// I searched Shadertoy for a robust regular polygon routine and came across\n// the following example:\n//\n// Regular Polygon SDF - BasmanovDaniil\n// https://www.shadertoy.com/view/MtScRG\n//\n// To use the functions in more intensive scenes, some optimization would be\n// necessary, but I've left them in their original form to show the working.\n\nfloat Polygon(vec2 p, float vertices, float radius){\n\n    float segmentAngle = 6.2831853/vertices;\n    \n    float angleRadians = atan(p.x, p.y);\n    float repeat = mod(angleRadians, segmentAngle) - segmentAngle/2.;\n    float inradius = radius*cos(segmentAngle/2.);\n    float circle = length(p);\n    float x = sin(repeat)*circle;\n    float y = cos(repeat)*circle - inradius;\n\n    float inside = min(y, 0.);\n    float corner = radius*sin(segmentAngle/2.);\n    float outside = length(vec2(max(abs(x) - corner, 0.0), y))*step(0.0, y);\n    return inside + outside;\n}\n\n \n// Object distance field and central position based ID.\nvec4 object(in vec2 p, in float r, in vec2 id){\n\n    #if SHAPE == 0\n    float d = length(p) - r;\n    #ifdef ANULUS\n    // Effectively boring out holes in the shape.\n    d = abs(d + sqrt(r)*.1) - sqrt(r)*.1;\n    #endif\n    return vec4(d, id, r);\n    // Donuts... Doesn't look great, but it works.\n    //return vec4(abs(length(p) - r*.66) - r*.34, id, r);\n    #else\n    \n    #if SHAPE == 1\n    float vNum = 3.;\n    #elif SHAPE == 2\n    float vNum = 4.;\n    #else\n    float vNum = 3. + floor(hash21(id)*6.);\n    #endif\n    \n    p = rot2(hash21(id)*6.2831*4.)*p; \n    float d = Polygon(p, vNum, r - r*.2) - r*.2;\n    #ifdef ANULUS\n    // Effectively boring out holes in the shape.\n    d = abs(d + sqrt(r)*.1) - sqrt(r)*.1;\n    #endif\n    return vec4(d, id, r);\n    \n    #endif\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n \n \n    // Screen coordinates. Range: [0, 1].\n    vec2 uv = (fragCoord)/iResolution.xy;\n    \n    vec2 seed = vec2(1.618, 1)*mod(float(iFrame)*0.0127 + iDate.w, 256.);//iDate.w;\n    \n    // Set all data slots to one.\n    vec4 col = vec4(1);\n     \n    // After loading or hitting the mouse button, reset.\n    if(textureSize(iChannel0, 0).x<2 || iMouse.z>1.){\n          \n          fragColor = col;\n          return;\n    }\n    \n    // After the first frame, start filling the buffer.\n    if (iFrame>0) { \n    \n        // Closest object distance, ID and width at this pixel postion.\n        col = texture(iChannel0, uv);\n    \n        for(int i = min(0, iFrame); i<60; i++){\n\n            // Random object size.\n            float rad = hash21(seed + .021)*.12 + .05;\n\n            // Random canvas position.\n            vec2 rndPos = vec2(hash21(seed + .141), hash21(seed + .083));\n            // Object distance at the random start position.\n            vec4 dataRndPos = texture(iChannel0, fract(rndPos + .5));\n\n            for(int j=0; j<10; j++){            \n            \n                // If there's enough room to place the new object, do so. \n                if(dataRndPos.x>rad){ \n\n                        // Create the object at the new position.\n                        vec4 tmp = object(fract(uv - rndPos) - .5, rad, rndPos);\n                        // Compare it to the old closest object, then update if necessary.\n                        col = tmp.x<col.x? tmp : col;\n                        i = 1000;\n                        break;\n                }\n                // If there's not enough room, reduce the object size and try again.\n                rad *= .84;\n                \n                // Alternative: If there's not enough room, reduce size roughly half the time then\n                // try again. In theory, more large objects should result.\n                //if(hash21(seed + .071)<.5) rad *= .82;\n            }\n            \n            // If we've made it this far, we didn't get a hit, so update the\n            // seed and try at the next position.\n            seed = mod(seed + vec2(i*57, i)*.0123, 256.);\n\n        }\n    }\n    \n    fragColor = col;\n \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}