{
    "Shader": {
        "info": {
            "date": "1721069518",
            "description": "From my tutorial on the voronoi and voronoi edges algorithms:\nPart 1: https://youtu.be/g2bILAVIIvM?si=mfm4dA_U59PA6B_8\nPart 2: https://youtu.be/oIbj64Cq8HA?si=2W3m0xPmPKnByCws",
            "flags": 0,
            "hasliked": 0,
            "id": "lXVXWt",
            "likes": 19,
            "name": "Voronoi Edges Artwork #1 Y28",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "Yusef28",
            "viewed": 262
        },
        "renderpass": [
            {
                "code": "/* \nThis Voronoi Shader is based on:\n\n1. An article by IQ: \n    https://iquilezles.org/articles/voronoilines\n2. tomkh's drawing helped it click: \n    https://www.shadertoy.com/view/llG3zy\n3.Shane's Rounded border shader inspired the lighting/art style:\n    https://www.shadertoy.com/view/ll3GRM\n*/\n\n\n#define pi 3.141592\n#define eps 20./iResolution.y\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//smoothMin funciton\nfloat smin2(float a, float b, float r)\n{\n   float f = max(0., 1. - abs(b - a)/r);\n   return min(a, b) - r*.25*f*f;\n}\n\n//voronoi edges function\nvec4 voronoiEdges(vec2 uv){\n    \n    vec2 currentCell = floor(uv);\n    float minDist = 8.0;\n    vec2 A;\n\n    for(float i = -1.; i <= 1.; i++){\n        for(float j = -1.; j <= 1.; j++){\n            vec2 neighbor = vec2(i,j);\n            vec2 offset = hash22(currentCell + neighbor);\n            offset = 0.3+0.3*sin(3.141592*2.*offset+iTime);\n            vec2 position = (currentCell + neighbor + offset);\n            float dist = length(uv - position);\n\n            if(dist < minDist){\n                minDist = dist;\n                A = position;\n            }\n        }\n    }\n\n    \n    float secondMinDist = 8.;\n    for(float i = -1.; i <= 1.; i++){\n        for(float j = -1.; j <= 1.; j++){\n            vec2 neighbor = vec2(i,j);\n            vec2 offset = hash22(currentCell + neighbor);\n            offset = 0.3+0.3*sin(3.141592*2.*offset+iTime);\n            vec2 position = (currentCell + neighbor + offset);\n            vec2 B = position;\n\n            if( dot(A-B,A-B)<0.001 )continue;\n            vec2 halfWay = uv-0.5*(A+B);\n            vec2 dir = normalize(A-B);\n            float distToEdge = dot(halfWay, dir);\n            secondMinDist = smin2(secondMinDist,  distToEdge, 0.2); \n        }\n    }\n    \n    float border = sin(3.14159*1.9+abs(secondMinDist-0.04));\n    return vec4(border,secondMinDist, uv-A);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    \n    vec3 rd = normalize(vec3(uv,-1.));\n\n    uv*=2.;\n    \n    vec4 data = voronoiEdges(uv);\n    \n    //light 1 position \n    vec3 light = vec3(1.,1.,4.);\n    //light 1 direction vector using uv and voronoi height for surface point\n    vec3 ldir = normalize(light-vec3(uv.x,data.x,uv.y));\n    \n    //light2\n    vec3 light2 = vec3(1.,2.,4.);\n    vec3 ldir2 = normalize(light2-vec3(uv.x,data.x,uv.y));\n\n    vec3 col = 0.5+0.5*sin(vec3(0., 2.,2.99)/1.5+ data.x*pi*5.-0.2);\n    \n    //grabbing the texture based on the uv-cell point vectors \n    col = mix(col,texture(iChannel1,data.zw).rgb,data.y);\n    col *= 0.8;\n\n    \n    vec2 e = vec2(20./iResolution.y,0.);\n    vec3 n = vec3(\n                  voronoiEdges(uv+e).x-voronoiEdges(uv-e).x,\n                  0.2,\n                  voronoiEdges(uv+e.yx).x-voronoiEdges(uv-e.yx).x\n                  \n                  );\n    n = normalize(n);\n\n    //phong lighting diffuse and specular for light 1\n    float diff = max(dot(ldir,n),0.);\n    float spec = pow(max(dot(reflect(-ldir,n),rd),0.),10.);\n    col += diff*0.3+vec3(0.8,0.5,0.3)*spec*0.8;\n    \n    //and for light 2\n    float diff2 = max(dot(ldir,n),0.);\n    float spec2 = pow(max(dot( reflect(-ldir2,n),rd),0.),10.);\n    col += diff2*0.3+vec3(0.1,0.5,0.9)*spec2*0.8;\n    \n\n    col = mix(col,pow(col.r*1.4,3.2)*vec3(0.14,0.09,0.05),smoothstep(0.085,0.05,data.y));\n    //col = mix(col,pow((diff+diff2+spec+spec2)*2.,1.5)*vec3(0.14,0.09,0.05),smoothstep(0.085,0.05,data.y));\n    \n    \n    float borderMask = smoothstep(0.07,0.06,data.y);\n    vec3 env = texture(iChannel0, reflect(n,rd)).rgb;\n    col += mix(env*0.3,env,borderMask)*0.6;\n    \n    col /= 1.5;\n    col= pow(col, vec3(1.6));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}