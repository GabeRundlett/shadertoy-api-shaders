{
    "Shader": {
        "info": {
            "date": "1549344813",
            "description": "The goal of this was to come up with a really simple way to do edge detection / glow. Iv'e tried this before, but this method is 999% improved.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtdyzB",
            "likes": 16,
            "name": "The Traveling Trusses",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "glow"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 590
        },
        "renderpass": [
            {
                "code": "// Plento\n\nconst float smod = 0.4; // speed multiplier\n\nfloat opS( float d1, float d2 ) {return max(-d1,d2);}\n\nfloat sdBox( vec3 p, vec3 b ){\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nmat2 rot(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\nvec2 rot2(vec2 k,float t){\n\treturn vec2(cos(t) * k.x - sin(t) * k.y, sin(t) * k.x + cos(t) * k.y);\n}\n\n\nfloat map(vec3 rp)\n{\n   \n   float p = sin(rp.z * 0.1) * 2.3;\n   rp = vec3(rot2(rp.xy, p), rp.z);\n    \n   vec3 pos = rp - vec3(-iTime*1.6, 0.0, 4.0); \n    pos.z += iTime*2.0*smod;\n   float td = 0.07;\n    \n   vec3 b = vec3(1.0 - td*2.0, 4.0, 3.0);\n   pos = mod(pos, b) - 0.5 * b; \n  \n   pos.yz *= rot(iTime*0.3);\n    \n   float res = sdBox( pos, vec3(0.5 - td));\n    \n   res = opS(sdBox(pos, vec3(0.4, 0.4, 1.1)), res);\n   res = opS(sdBox(pos, vec3(1.1, 0.4, 0.4)), res);\n   res = opS(sdBox(pos, vec3(0.4, 1.1, 0.4)), res);\n    \n   return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.2 * vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y; \n   \n    vec3 ro = vec3(0.0, 0.0, 10.0); \n    vec3 rd = normalize(vec3(uv,2.0));\n    \n    ro.z += iTime * 8.0 * smod; \n    \n    float t = 0.0;\n    float d = 0.0;\n    \n    // glow stuff\n    float minDist = 999.0; \n    vec3 glowCol = vec3(0);\n    \n    // glow size and softness.\n    float gSize = 0.14;\n    float softness = 0.55;\n    \n    float fog = 0.0; // glow fog\n    float g = 0.0;\n    \n    for (int i = 0; i < 75; i++)\n    {\n    \td = map(ro + rd * t);\n        \n        minDist = min(minDist, d); \n        \n        if(abs(d)<0.001 || t > 25.0) \n        {\n            minDist = abs(d);\n            break;    \n        }\n        \n        t += d * 0.75;\n        \n        // Acquire some edge color if the distance to the closest object is \n        // greater than the minimum distance to an object that the ray encountered.\n        // Basically, if the ray barely misses an object, add some glow color. \n        if(d >= minDist && abs(d) > 0.15)\n        {\n            fog = smoothstep(0.13, 0.12, t / 160.0);\n            \n             glowCol += vec3(1.0, 0.0, 0.0) \n                 * smoothstep(gSize,gSize - softness, minDist) * fog ;\n            \n            g++;\n        }\n        \n    }\n    \n    glowCol /= g;\n    \n    vec3 col = vec3(0);\n    \n    col += glowCol*12.0;\n    \n    col *= smoothstep(0.99, 0.05, length(uv*0.41));\n    col *= smoothstep( 0.0, 0.6, length(uv));\n   \n    fragColor = vec4(sqrt(clamp(col, 0.0, 1.0)), 1.0);\n \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}