{
    "Shader": {
        "info": {
            "date": "1668192466",
            "description": "Newton Fractal (z^5+z^2-z+1)",
            "flags": 0,
            "hasliked": 0,
            "id": "DsB3Wc",
            "likes": 0,
            "name": "Newton Fractal (z^5+z^2-z+1)",
            "published": 3,
            "tags": [
                "2d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "kanayuki",
            "viewed": 178
        },
        "renderpass": [
            {
                "code": "#define P(z) power(z,5.0)+power(z,2.0)-z+1.0\n#define P1(z) 5.0*power(z,4.0)+2.0*z-1.0\n#define x1 vec2(-1.32472,0.0)\n#define x2 vec2(0.0,-1.0)\n#define x3 vec2(0.0,1.0)\n//#define x4 vec2(0.662359, -0.56228)\n#define x5 vec2(0.662359, +0.56228)\n \n\nvec2 times(vec2 a, vec2 b)\n{\n    float re = a.x*b.x-a.y*b.y;\n    float im = a.x*b.y+a.y*b.x;\n    return vec2(re, im);\n}\n\nvec2 division(vec2 a,vec2 b)\n{\n    float len2 = pow(b.x,2.0)+pow(b.y,2.0);\n    return times(a, vec2(b.x,-b.y))/len2;\n}\n\nvec2 power(vec2 a, float n)\n{\n    float p = length(a);\n    float theta = acos(a.x/p)*sign(a.y);\n    return pow(p,n)*vec2(cos(n*theta),sin(n*theta));    \n}\n\nmat2 rm(float t)\n{\n    return mat2(cos(t),-sin(t),sin(t),cos(t));\n}\n\nvec3 color(vec2 z)\n{    \n    vec2 x4=iMouse.xy;\n    float d1 = distance(z,x1);\n    float d2 = distance(z,x2);\n    float d3 = distance(z,x3);\n    float d4 = distance(z,x4);\n    float d5 = distance(z,x5);\n    float m = min(min(d1,d2),d3);\n    m = min(min(m,d4),d5);\n    if (d1==m) return vec3(1,0,0);\n    if (d2==m) return vec3(0,1,0);\n    if (d3==m) return vec3(0,0,1);\n    if (d4==m) return vec3(1,0,1);\n    if (d5==m) return vec3(1,1,0);\n    return vec3(1,0.8,1);\n    \n}\n\nfloat sdCircle(vec2 p)\n{\n    return length(p)-1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    //vec2 pos = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    // uv *=rm(iTime);\n    uv *= 1.50;\n    vec2 z = uv;\n    \n    // vec2 C = length(pos)<2.0 ? pos:vec2(0.6,0.5);\n    // vec2 C = vec2(0.6,0.5);\n     \n    //float theta = iTime/3.0;\n    //float A = cos(theta*5.0)*0.75;\n    //vec2 C = vec2(cos(theta),sin(theta))*A;\n    //float n = (sin(iTime/5.0)*0.5+1.0)*10.0;\n    \n    for(int i=0; i<50; i++) z = z-division(P(z),P1(z));\n    \n    vec3 col = color(z);\n    \n    if (abs(sdCircle(uv))<0.0015) col =vec3(1);\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // float a = mod(log(length(z)),0.5);\n    // col *= a+ 0.25*z.x/length(z)+0.75;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}