{
    "Shader": {
        "info": {
            "date": "1698897957",
            "description": "The confetti illusion, an extension of the Munker illusion, described in Novick and Kitaoka's 2021 paper with the same name. All the balls are the same color.\n\nhttps://journalofillusion.net/index.php/joi/article/view/6152/13750#content/figure_reference_58",
            "flags": 0,
            "hasliked": 0,
            "id": "mtcyRn",
            "likes": 18,
            "name": "Confetti Illusion (374 chars)",
            "published": 3,
            "tags": [
                "color",
                "optical",
                "illusion",
                "perception",
                "codegolf"
            ],
            "usePreview": 0,
            "username": "fenix",
            "viewed": 326
        },
        "renderpass": [
            {
                "code": "// ---------------------------------------------------------------------------------------\n//\tCreated by fenix in 2023\n//\tLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n//  The confetti illusion, an extension of the Munker illusion, described in Novick and\n//  Kitaoka's 2021 paper with the same name. All the balls are the same color.\n//\n//      https://journalofillusion.net/index.php/joi/article/view/6152/13750#content/figure_reference_58\n//\n//  The effect, if you're having any trouble seeing it, is supposed to be that the\n//  colors of the stripes \"bleed\" into the spheres, making them appear to be different\n//  colors. For me, if I look directly at the spheres, I can see the brown, but the\n//  spheres in my peripheral vision look properly tinted.\n// \n//  In experimenting, I found that the width of the stripes plays an important role in\n//  the illusion, and this is also discussed in the paper. For the effect to work well\n//  in full screen, you are advised to raise the number from 1e2 to 2e2 or even 3e2\n//  depending on how big your monitor is, and how close you sit to it.\n//\n//  One thing I noticed is that the effect does not work as well when the spheres are\n//  white as they do as this brown color. I guess that's because there's less distance\n//  between this color and any of the stripes?\n//\n//  Golfing is encouraged! One place I think might be an opportunity is the calculation\n//  of the stripe colors, which are meant to be equal-luminance. The equation I came up\n//  with is based on solving a quadratic through the three values I computed from the \n//  \"standard\" luminance formula. Maybe there's a trick for computing these colors more\n//  compactly?\n// ---------------------------------------------------------------------------------------\n\n// Hoping this version works for everybody and is still pretty short: 374 chars\n//*\nvoid mainImage(out vec4 O, vec2 u)\n{\n    vec2 n, R = iResolution.xy;\n    u /= R.y;\n    int i, c = int(u.y * 1e2) % 3; // Increase the 1e2 here to make more stripes\n    \n    O = vec4(.2);\n    O[c] = float(c*c*4 - c*6 + 5) * .1; // Aiming for similar luminance\n\n    while (i < 7)\n    {\n        float t = mod(iTime / 4., 5.), x = t - u.x;\n        if ((i++ % 3 != c || x > 0. && x < 2.5) &&\n            (i % 3 == c || x < 1. || x > 2.5))\n\n            n = u\n                - sin((1.256 * t + float(i) * .9) * vec2(1, 2)) * vec2(.5, .3)\n                - .5 * R / R.y,\n            \n            x = sqrt(t = .01 - dot(n, n)),\n            \n            O = t > 0. ? (max(0., t = n.y - n.x + x) + .03) * vec4(4, 3, 2, 0) // Sphere color, set to vec4(4) for white\n                         + pow((t + x) * 4., 40.) // Specular\n                         : O;\n    }\n}\n/**/\n\n// Attempting to start to apply FabriceNeyret2's ideas: 371 chars (discarded because of some platform specific problem)\n/*\nvoid mainImage(out vec4 O, vec2 u)\n{\n    vec2 n, R = iResolution.xy;\n    u /= R.y;\n    int i, c = int(u.y * 1e2) % 3; // Increase the 1e2 here to make more stripes\n    \n    O = vec4(.2);\n\n    for (O[c] = float(c*c*4 - c*6 + 5) * .1; i++ < 7; )\n    {\n        float t = mod(iTime / 5., 4.), z = t - u.x;\n        O = (i % 3 != c || z > 0. && z < 2.5) &&\n            (i % 3 == c || z < 1. || z > 2.5) ?\n                n = u - .5 * R / R.y\n                    - sin((1.57 * t + float(i) * .9) * vec2(1, 2)) * vec2(.5, .3),\n            \n                z = sqrt(t = .01 - dot(n, n)),\n            \n                t > 0. ? (max(0., t = n.y - n.x + z) + .03) * vec4(4, 3, 2, 0) // Sphere color, set to vec4(4) for white\n                         + pow((t + z) * 4., 40.) // Specular\n                         : O : O;\n    }\n}\n/**/\n\n// From FabriceNeyret2: also 371 chars\n/*\nvoid mainImage(out vec4 O, vec2 u)\n{\n    vec2 n, R = iResolution.xy;\n    u /= R.y;\n    int i, c = int(u.y * 1e2) % 3; // Increase the 1e2 here to make more stripes\n    \n    for (O = vec4(.2), O[c] = float(c*c*4 - c*6 + 5) * .1; i < 7 ; )\n    {\n        float t = mod(iTime/5., 4.), z = t - u.x;\n            ( i++ % 3 != c || z > 0. && z < 2.5 )\n         && ( i   % 3 == c || z < 1. || z > 2.5 )\n          ? n = u - .5* R/R.y\n                  - vec2(.5,.3)* sin( ( 1.57*t + float(i)*.9 ) *vec2(1,2) ),\n            z = sqrt( t = .01 - dot(n,n) ),\n            O = t > 0. ? (max(0., t = n.y - n.x + z) + .03) * vec4(4,3,2,0) // Sphere color, set to vec4(4) for white\n                         + pow( (t + z) *4., 40.) // Specular\n                         : O : O;\n    }\n}\n/**/\n\n// My original: 412 chars\n/*\nvoid mainImage(out vec4 O, vec2 u)\n{\n    vec3 n, R = iResolution;\n    u /= R.y;\n    int i = 0, c = int(u.y * 1e2) % 3; // Increase the 1e2 here to make more stripes\n    \n    O = vec4(.2);\n    O[c] = float(c*c*4 - c*6 + 5) * .1; // Aiming for similar luminance\n\n    while (i < 7)\n    {\n        float t = mod(iTime, 20.) / 5.;\n        if ((i++ % 3 != c || u.x < t && u.x > t - 2.5) &&\n           (i % 3 == c || u.x > t - 1. || u.x < t - 2.5))\n        {\n            n = vec3(u, 1)\n                    - sin((1.57 * t + float(i) * .9) * vec3(1, 2, 0)) * vec3(.5, .3, 0)\n                    - .5 * R / R.y;\n            \n            n.z = sqrt(t = n.z*n.z - dot(n, n) + .01);\n            \n            O = t > 0. ? (max(0., t = n.y - n.x + n.z) + .03) * vec4(4, 3, 2, 0) // Sphere color, set to vec4(4) for white\n                         + pow(max(0., t + n.z) * 4., 40.) // Specular\n                         : O;\n        }\n    }\n}\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}