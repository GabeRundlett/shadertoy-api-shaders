{
    "Shader": {
        "info": {
            "date": "1633991972",
            "description": "Result of experimentation with organic patterns",
            "flags": 0,
            "hasliked": 0,
            "id": "NdtSD2",
            "likes": 13,
            "name": "Taste of Noise",
            "published": 3,
            "tags": [
                "weird"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 487
        },
        "renderpass": [
            {
                "code": "\n// taste of noise by leon denise 2021/10/12\n// result of experimentation with organic patterns\n// using code from Inigo Quilez\n// Licensed under hippie love conspiracy\n\n// rotation matrix\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\n\n// global variable\nfloat material;\n\n// sdf\nfloat map (vec3 p)\n{\n    // time\n    float t = iTime * 0.1;\n    \n    // rotation parameter\n    vec3 angle = vec3(78.,68.,78.) + t + p;\n    \n    // kif\n    const int count = 5;\n    float a = 1.0;\n    float scene = 1000.;\n    float shape = 1000.;\n    for (int index = 0; index < count; ++index)\n    {\n        // fold\n        p = abs(p)-.5*a;\n        \n        // rotate\n        p.xz *= rot(angle.y/a);\n        p.yz *= rot(angle.x/a);\n        p.yx *= rot(angle.z/a);\n        \n        // sphere\n        shape = length(p)-.6*a;\n        \n        // materialing\n        material = shape < scene ? float(index) : material;\n        \n        // add\n        scene = min(scene, shape);\n        \n        // falloff\n        a /= 1.89;\n    }\n    \n    // shell\n    scene = abs(scene);\n    \n    // surface details\n    float d = length(p);\n    float details = abs(sin(d*20.))*0.05;\n    scene -= details;\n    \n    return scene;\n}\n\n// return color from pixel coordinate\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // reset color\n    fragColor = vec4(0);\n    material = 0.0;\n    \n    // camera coordinates\n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y;\n    vec3 eye = vec3(0,0,-1);\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    eye.xz *= rot(0.4+mouse.x);\n    eye.xy *= rot(0.6-mouse.y);\n    vec3 z = normalize(-eye);\n    vec3 x = normalize(cross(z, vec3(0,1,0)));\n    vec3 y = normalize(cross(x, z));\n    vec3 ray = normalize(vec3(z * 0.5 + uv.x * x + uv.y * y));\n    vec3 pos = eye + ray * .5;\n    \n    // raymarch\n    const int steps = 20;\n    for (int index = steps; index > 0; --index)\n    {\n        // volume estimation\n        float dist = map(pos);\n        if (dist < 0.01)\n        {\n            // Inigo Quilez color palette (https://iquilezles.org/articles/palettes)\n            vec3 tint = vec3(0.2)+vec3(0.8)*cos(vec3(1,2,3)*material*0.2-length(pos)*2.);\n            \n            // pixel color\n            float shade = float(index)/float(steps);\n            fragColor.rgb = tint * shade;\n            \n            break;\n        }\n        \n        // raymarch\n        pos += ray * dist;\n    }\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}