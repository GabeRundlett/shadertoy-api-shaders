{
    "Shader": {
        "info": {
            "date": "1599875390",
            "description": "montecarlo raytracing using ray marching. dont forget to restart time after editing :)",
            "flags": 32,
            "hasliked": 0,
            "id": "3l2BDK",
            "likes": 21,
            "name": "montecarlo raytracing",
            "published": 3,
            "tags": [
                "montecarloraytracingpathtracingnoiserandomraymarching"
            ],
            "usePreview": 0,
            "username": "ich",
            "viewed": 806
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 c = texture(iChannel0, uv).rgb;\n  \tc /= float(iFrame);\n    c = pow(c, vec3(.5)) * 5.;\n    fragColor = vec4(c, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//#define noisy\n\n#define max_dist 100.\n#define min_dist .001\n#define bounces 3\n\nfloat seed;\n\nfloat n1() {\n\tseed += .123;\n    return fract(9221.432 * sin(seed * 43.124));\n}\n\nmat3 look(vec3 d) {\n\tvec3 r = normalize(cross(vec3(0.0001, 1, 0.0001), d));\n    vec3 u = normalize(cross(d, r));\n    return mat3(r, u, d);\n}\n\nfloat plane(vec3 p, vec3 n, float r) {\n\treturn dot(p, n) - r;\n}\n\nfloat cube(vec3 p, vec3 r) {\n    p = abs(p) - r;\n    return max(p.x, max(p.y, p.z));\n}\n\nfloat cube(vec3 p, float r, float s) {\n    s += min_dist;\n\treturn length(max(vec3(0), abs(p) - (r - s))) - s;\n}\n\nfloat cube(vec3 p, vec3 r, float s) {\n    s += min_dist;\n\treturn length(max(vec3(0), abs(p) - (r - s))) - s;\n}\n\nfloat sphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\n\nfloat scene(vec3 p) {\n\tfloat l = max_dist;\n    \n    // objects\n    l = min(l, max(-cube(p, 2., 1.), plane(p, vec3(0, 0, 1), 1.)));\n    l = min(l, sphere(p - vec3(-.5, -.5, 0), .5));\n    l = min(l, sphere(p - vec3( .5, -.5, 0), .5));\n    l = min(l, cube(p - vec3(0, -1.2, -.5), vec3(1.7, .2, 1.5), .2));\n    \n    // light source\n    l = min(l, cube(p - vec3(1, 2, -.6), vec3(1.5, .5, 2)));\n    \n    return l;\n}\n\nfloat emit(vec3 p) {\n    float l = max_dist;\n\tl = min(l, cube(p - vec3(1, 2, -.6), vec3(1.5, .5, 2)));\n    return smoothstep(min_dist * 2., .0, l);\n}\n\nfloat march(vec3 ro, vec3 rd) {\n\tfloat lo = 0.;\n    vec3 p = ro;\n    \n    for (int i = 0; i < 100; ++i) {\n    \tfloat l = scene(p);\n        lo += l;\n        \n        if (l < min_dist || lo > max_dist)\n            return lo;\n        \n        p += rd * l;\n    }\n}\n\nvec3 normal(vec3 p) {\n\tvec2 e = vec2(0, min_dist);\n    float l = scene(p);\n    \n    return normalize(\n    \tl - vec3(\n        \tscene(p - e.yxx),\n            scene(p - e.xyx),\n            scene(p - e.xxy)\n        )\n    );\n}\n\nvec3 montecarlo(vec3 n, float r) {\n    vec2 xy = r * vec2(n1() - .5, n1() - .5);\n    float z = n1() * .5;\n\treturn look(n) * normalize(vec3(xy, z));\n}\n\nfloat trace(inout vec3 ro, inout vec3 rd, out vec3 p, out vec3 n) {\n\tfloat l = march(ro, rd);\n    p = ro + rd * l;\n    n = normal(p);\n    ro = p + n * min_dist * 2.;\n    rd = mix(montecarlo(n, 1.), reflect(rd, n), step(n1(), .2));\n    return l;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n#ifdef noisy\n    seed = cos(iTime) * uv.x + sin(iTime) * uv.y;\n#else\n    seed = iTime;\n#endif\n\n    vec3 ro = vec3(0, 0, 5.);\n    vec3 rd = montecarlo(normalize(vec3(uv, -1)), .001);\n    \n    vec3 c = vec3(0);\n    float l = 1.;\n    float e = 0.;\n    vec3 p, n;\n    \n    for (int i = 0; i < bounces; ++i) {\n        l += trace(ro, rd, p, n);\n        e += emit(p) / (l * l);\n    }\n    c += vec3(e);\n    \n    vec2 tx = fragCoord / iResolution.xy;\n    vec2 m = (iMouse.xy / iResolution.xy);\n    c += texture(iChannel0, tx).rgb;// * m.x;\n    \n    fragColor = vec4(c, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}