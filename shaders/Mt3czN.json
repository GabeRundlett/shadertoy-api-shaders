{
    "Shader": {
        "info": {
            "date": "1531774173",
            "description": "gimps' overlay operator (+ some custom variants)",
            "flags": 0,
            "hasliked": 0,
            "id": "Mt3czN",
            "likes": 2,
            "name": "Overlay Operator",
            "published": 3,
            "tags": [
                "shader"
            ],
            "usePreview": 0,
            "username": "TinyTexel",
            "viewed": 298
        },
        "renderpass": [
            {
                "code": "// Lincense: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n\nfloat overlay(float a, float b)\n{\n    return mix(a*a, 1.0-(1.0-a)*(1.0-a), b);\n}\n\nfloat Arc(float x) { return sqrt(1.0 - x*x); }\n\nfloat overlay2(float a, float b)\n{\n    return mix(1.0 - Arc(a), Arc(1.0 - a), b);\n}\n\nfloat Pow2(float x) { return x*x; }\nfloat Pow3(float x) { return x*x*x; }\n\nfloat overlay3(float a, float b)\n{\n    return mix(Pow3(a), 1.0-Pow3(1.0-a), mix(b, b*b*(3.0-2.0*b), 0.25));\n}\n\n//float overlay4(float a, float b)\n//{\n//    return mix(Pow3(a), 1.0-Pow3(1.0-a), b);\n//}\n\n\nvoid mainImage( out vec4 col, in vec2 uv0 )\n{\n    uv0.x -= (iResolution.x - iResolution.y) * 0.5;\n    vec2 uv = uv0/iResolution.yy;\n\n    float v = overlay(uv.x, uv.y);\n    \n    //v = round(v * 20.0) / 20.0;\n    \n    if(uv.x < 0.0 || uv.x > 1.0) v = 0.0;\n        \n    col = vec4(v,v,v, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}