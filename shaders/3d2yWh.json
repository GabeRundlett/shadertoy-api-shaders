{
    "Shader": {
        "info": {
            "date": "1586544438",
            "description": "Ellipse generation with perpendicular bisectors.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "3d2yWh",
            "likes": 4,
            "name": "The eye of ellipse",
            "published": 3,
            "tags": [
                "lines",
                "ellipse"
            ],
            "usePreview": 0,
            "username": "andretugan",
            "viewed": 345
        },
        "renderpass": [
            {
                "code": "// Author: https://www.shadertoy.com/user/andretugan\n// Creative Commons Attribution-NonCommercial 3.0 Unported License\n// https://creativecommons.org/licenses/by-nc/3.0\n\n#define NUM_CHORDS 32\n\n#define M_PI 3.14159265358\n#define M_2_PI (2. * 3.14159265358)\n\n#define FADE_INNER_RADIUS 0.8\n#define FADE_OUTER_RADIUS 1.1\n#define LINE_WIDTH 4.\n\n// Function from Inigo Quilez\n// https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nfloat DrawLine(vec2 uv, vec2 origin, vec2 dir_not_normed) {\n    float proj = dot(uv - origin, dir_not_normed) / dot(dir_not_normed, dir_not_normed);\n    vec2 perp = origin + proj * dir_not_normed - uv;\n    float dist2 = dot(perp, perp);\n    \n    float line_width = LINE_WIDTH / iResolution.y;        \n                                \n    float val = smoothstep(line_width * line_width, line_width * line_width * 0.5, dist2);        \n    val *= smoothstep(FADE_OUTER_RADIUS * FADE_OUTER_RADIUS, FADE_INNER_RADIUS * FADE_INNER_RADIUS, dot(uv, uv));        \n    return val;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{           \n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    float uv2 = dot(uv, uv);\n    if (dot(uv, uv) > FADE_OUTER_RADIUS * FADE_OUTER_RADIUS) { \n    \tfragColor = vec4(0.0,0.0,0.0,1.0);\n        return;\n    }\n               \n    float focus_radius = 0.4 + 0.4 * sin(iTime * 0.23) * cos(iTime * 0.17);\n    float focus_angle = M_PI + M_PI * sin(iTime * 0.29) * cos(iTime * 0.19);\n    vec2 focus = vec2(focus_radius * cos(focus_angle), focus_radius * sin(focus_angle));\n    \n          \n    float val = 0.;\n\n    for (int i = 0; i < NUM_CHORDS; ++i) {\n        float angle = M_2_PI / float(NUM_CHORDS) * float(i);\n        \n        vec2 point = vec2(cos(angle), sin(angle));\t                               \n        vec2 diff = point - focus;\n        vec2 perp = vec2(diff.y, -diff.x);\n        \n        vec2 mid = 0.5 * (point + focus);\n       \n        val += DrawLine(uv, point, diff);\n        val += DrawLine(uv, mid, perp);        \n    }\n    \n    val *= 10. / float(NUM_CHORDS);\n    val = pow(val, 0.5);\n    \n    float hue = sin(iTime * 0.02 + uv2 * 0.3);     \t    \n    fragColor = vec4(hsv2rgb(vec3(hue, 1. - 0.8 * uv2, val)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}