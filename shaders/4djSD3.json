{
    "Shader": {
        "info": {
            "date": "1416610184",
            "description": "Integrating uv coordinates across noise isolines (giving rise to curl-like features). Comment line 4 to get gradient flow.",
            "flags": 0,
            "hasliked": 0,
            "id": "4djSD3",
            "likes": 47,
            "name": "Texture flow II",
            "published": 3,
            "tags": [
                "2d",
                "texture"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 5641
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Gathering pixels along the direction perpendicular to the gradient\n// of an image. See also: https://www.shadertoy.com/view/Md23zz\n\n#define ISOLINES\n\nvec4 texture0( in vec2 x )\n{\n    //return texture( iChannel0, x );\n    vec2 res = iChannelResolution[0].xy;\n    vec2 u = x*res - 0.5;\n    vec2 p = floor(u);\n    vec2 f = fract(u);\n    f = f*f*(3.0-2.0*f);    \n    vec4 a = texture( iChannel0, (p+vec2(0.5,0.5))/res, -64.0 );\n\tvec4 b = texture( iChannel0, (p+vec2(1.5,0.5))/res, -64.0 );\n\tvec4 c = texture( iChannel0, (p+vec2(0.5,1.5))/res, -64.0 );\n\tvec4 d = texture( iChannel0, (p+vec2(1.5,1.5))/res, -64.0 );\n    return mix(mix(a,b,f.x), mix(c,d,f.x),f.y);\n}\n   \n\nvec2 flow( vec2 uv )\n{\n\tvec2 e = 1.0/iChannelResolution[0].xy;\n    \n    float time = 5.0 * mod( iTime, 12.0 );\n    \n\tfor( int i=0; i<50; i++ )\n\t{\n\t\tfloat h0 = texture0( uv              ).x;\n\t\tfloat h1 = texture0( uv+vec2(e.x,0.0)).x;\n\t\tfloat h2 = texture0( uv+vec2(0.0,e.y)).x;\n        \n        #ifdef ISOLINES\n        // tangent\n\t\tvec2 f = vec2( h2-h0, h0-h1 )/(255.0*e);\n        #else\n        // gradient\n        vec2 f = vec2( h1-h0, h2-h0 )/(255.0*e);\n        #endif\n        \n        // move        \n        uv += 0.0015*f   *clamp( (time-float(i)), 0.0, 1.0 );\n\t}\n    \n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n\n    // orbit, distance and distance gradient\n    vec2 uva = 0.05*(p + vec2(1.0,0.0)/iResolution.xy);\n\tvec2 uvb = 0.05*(p + vec2(0.0,1.0)/iResolution.xy);\n\tvec2 uvc = 0.05*p;\n\tvec2 nuva = flow( uva  );\n\tvec2 nuvb = flow( uvb );\n\tvec2 nuvc = flow( uvc );\n    float fa = length(nuva-uva)*64.0;\n    float fb = length(nuvb-uvb)*64.0;\n    float fc = length(nuvc-uvc)*64.0;\n    vec3 nor = normalize( vec3((fa-fc)*iResolution.x,1.0,(fb-fc)*iResolution.y ) );\n\n    // color\n  \tvec3 col = texture(iChannel1, 4.0*nuvc).xyz;\n    // ilumination\n    vec3 lig = normalize( vec3( 1.0,1.0,-0.4 ) );\n    col *= vec3(0.5,0.6,0.7) + vec3(1.0,0.9,0.8) * clamp( dot(nor,lig), 0.0, 1.0 );\n    col *= sqrt(fc);\n    // postprocess    \n    col = 1.2*pow( col, vec3(0.8,0.8,0.7) );\n    col *= 0.75 + 0.25*sqrt( 16.0*p.x*p.y*(1.0-p.x)*(1.0-p.y) );\n    \n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}