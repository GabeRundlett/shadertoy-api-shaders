{
    "Shader": {
        "info": {
            "date": "1651870811",
            "description": "Maybe a bit sloppy\n\nYou can get lots of cool effects by fiddling with the exponent in mx.\n\n(any sharp lines you see are from how the shape is constructed, not the glossy effect)\n",
            "flags": 0,
            "hasliked": 0,
            "id": "stjBzW",
            "likes": 3,
            "name": "Glossy Effect Test 4615",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define pi 3.14159\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec3 getRo() {\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    float r = 4.;\n    float t = 0.2 * iTime;\n\n    vec3 ro = vec3(r * cos(t), 1.5 * cos(0.8 * t), r * sin(t));\n    //ro.yz *= Rot(-m.y*3.14+1.);\n    //ro.xz *= Rot(-m.x*6.2831);\n    return ro;\n}\n\nfloat GetDist(vec3 p) {\n    float d = sdBox(p, vec3(0.9)) - 0.1;\n\n    vec3 fr = 0.5 * p - floor(0.5 * p) - 0.5;  \n    float val = exp(-20. * length(fr)) * smoothstep(-0.5, 0.5, -mlength(p) + 1.15);\n    \n    fr = p - floor(p) - 0.5;  \n    val += exp(-10. * length(fr)) * smoothstep(-0.5, 0.5, -mlength(p) + 1.15);\n    \n    val = clamp(val, 0., 1.);\n    \n    d -= 10. * val;\n    \n    return 0.25 * d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\t\n    float dO=0.;\n    float s = sign(z);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if (s != sign(dS)) { z *= 0.5; s = sign(dS); }\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = getRo();\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        \n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        \n        // Change me\n        float c = 2.5; // [0.6,6] is an okay range (<1 is like fresnel)\n        float I = 4.; // anything above 0. lower numbers more intense\n        \n        // Removing anything here looks interesting too\n        // (or switching the order of r,n)\n        r = c * (abs(r)-abs(n));\n        n = c * (abs(r)-abs(n));\n        \n        float mx = exp(-I * length(abs(r)-abs(n)));\n        \n        float cl = 0.5 + 0.5 * dif + mx;\n\n        vec3 e = vec3(0.5);\n        vec3 col2 = pal(mlength(p) + 0.35, e, e, e, vec3(0,1,2)/3.);\n        \n        col = cl * col2;\n    }\n    \n   \n    // col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}