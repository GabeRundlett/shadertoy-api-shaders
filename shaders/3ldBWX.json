{
    "Shader": {
        "info": {
            "date": "1613589953",
            "description": "Lots of magic with macros to try abstracting state managing (storing and updating variables across frames).",
            "flags": 48,
            "hasliked": 0,
            "id": "3ldBWX",
            "likes": 8,
            "name": "State Managing Utilities",
            "published": 3,
            "tags": [
                "state",
                "buffer",
                "utilities",
                "variables"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 159
        },
        "renderpass": [
            {
                "code": "/*\nUp arrow key: move forward\nDown arrow key: move backward\nRight arrow key: turn right\nLeft arrow key: turn left\n*/\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float su = 2.0 / iResolution.y; // Smoothing unit (2 pixels)\n    vec3 color = vec3(0.0);\n\n    // Player state\n    vec2 pos = Load(Ch0, 0, 0).xy;\n    vec2 dir = Load(Ch0, 1, 0).xy;\n\n    // Draw map\n    float m = map(barrelDistort(uv, vec2(1.0)) + pos);\n    vec3 waterColor = vec3(0.0, 0.0, 1.0 - m);\n    vec3 landColor = mix(vec3(0.0, 1.0, 0.0), vec3(0.8, 0.4, 0.0), m * m);\n    color += mix(waterColor, landColor, smoothstep(0.5 - su, 0.5 + su, m));\n\n    // Draw player\n    DrawSDF(sdBox(axisAlign(uv, dir), vec2(0.03, 0.05)), vec3(1.0, 0.0, 0.0));\n\n    color *= vignette(uv, 2.0);\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// State managing utilities\n// Shortened channel names\n#define Ch0 iChannel0\n#define Ch1 iChannel1\n#define Ch2 iChannel2\n#define Ch3 iChannel3\n\n// Arrow key codes (key codes are ASCII I think)\n#define KEY_LEFT  37\n#define KEY_UP    38\n#define KEY_RIGHT 39\n#define KEY_DOWN  40\n\n// Store/load block at position (i, j)\n#define Store(i, j) if (addr == ivec2(i, j))\n#define Load(buf, i, j) texelFetch(buf, ivec2(i, j), 0)\n\n// Check for keypress (buf is the channel to read from)\n#define Keypress(buf, key) if (bool(texelFetch(buf, ivec2(key, 0), 0).x))\n\n// Core state managing utilities\n#define Main void mainImage(out vec4 fragColor, in vec2 fragCoord)\n\n#define InitStates if (iFrame == 0)\n#define UpdateStates if (iFrame > 0)\n\n// Call this at the very beginning of your state manager\n#define ClearBlock() block = vec4(0.0, 0.0, 0.0, 0.0)\n\n// Current block and block address\n#define block fragColor\n#define addr ivec2(fragCoord)\n\n// Misc. utilities (specific to this demo but you can use them if you want to)\n#define DrawSDF(sdf, col) color = mix(color, col, smoothstep(su, 0.0, sdf))\n\n// http://marcodiiga.github.io/radial-lens-undistortion-filtering\nvec2 barrelDistort(in vec2 p, in vec2 alpha) {\n    return p / (1.0 - alpha * dot(p, p));\n}\n\nfloat vignette(in vec2 p, in float v) {\n    return 1.0 - pow(length(p), v);\n}\n\nmat2 Rotate(in float r) {\n    float c = cos(r), s = sin(r);\n    return mat2(c, s, -s, c);\n}\n\nvec2 axisAlign(in vec2 p, in vec2 up) {\n    return p * mat2(up.y, -up.x, up);\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    vec2 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(0.0, max(q.x, q.y));\n}\n\n// Hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nfloat Hash21(in vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// Smooth noise\nfloat snoise(in vec2 p) {\n    vec2 cell = floor(p);\n    vec2 local = fract(p);\n    local *= local * (3.0 - 2.0 * local);\n\n    float bl = Hash21(cell);\n    float br = Hash21(cell + vec2(1.0, 0.0));\n    float tl = Hash21(cell + vec2(0.0, 1.0));\n    float tr = Hash21(cell + 1.0);\n\n    return mix(mix(bl, br, local.x), mix(tl, tr, local.x), local.y);\n}\n\n// Fractal noise\nfloat fnoise(in vec2 p, in float scale, in float octaves) {\n    p *= scale;\n\n    float value = 0.0;\n    float nscale = 1.0;\n    float tscale = 0.0;\n\n    for (float octave=0.0; octave < octaves; octave++) {\n        value += snoise(p) * nscale;\n        tscale += nscale;\n        nscale *= 0.5;\n        p *= 2.0;\n    }\n\n    return value / tscale;\n}\n\nfloat map(in vec2 p) {\n    return fnoise(p, 3.0, 5.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "/*\nState manager skeleton:\nMain {\n    ClearBlock();\n    InitStates {\n        // Initialize states\n    }\n\n    UpdateStates {\n        // Update states\n    }\n}\n*/\n\nMain {\n    ClearBlock();\n    InitStates {\n        Store(0, 0) block.xy = vec2(0.0, 0.2); // Player position is stored at (0, 0)\n        Store(1, 0) block.xy = vec2(0.0, 1.0); // Player direction is stored at (1, 0)\n    }\n\n    UpdateStates {\n        Store(0, 0) {\n            vec2 pos = Load(Ch0, 0, 0).xy;\n            vec2 dir = Load(Ch0, 1, 0).xy;\n\n            // Move player on keypress\n            vec2 newPos = pos;\n            Keypress(Ch1,   KEY_UP) newPos += dir * 0.01;\n            Keypress(Ch1, KEY_DOWN) newPos -= dir * 0.01;\n\n            // Only change position if not colliding\n            block.xy = pos;\n            if (map(newPos) > 0.5) block.xy = newPos;\n        }\n\n        Store(1, 0) {\n            vec2 dir = Load(Ch0, 1, 0).xy;\n\n            // Rotate the player direction on keypress\n            Keypress(Ch1, KEY_RIGHT) dir *= Rotate( 0.025);\n            Keypress(Ch1,  KEY_LEFT) dir *= Rotate(-0.025);\n\n            block.xy = dir;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}