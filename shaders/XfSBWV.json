{
    "Shader": {
        "info": {
            "date": "1725489816",
            "description": "Subdivide a square into rectangles with quantized dimensions (width and height are multiples of 1/q). Then draw parallel lines in each rect and circle patterns in the corners on top.\n\ngrid version: \nhttps://www.shadertoy.com/view/4c2fDV",
            "flags": 0,
            "hasliked": 0,
            "id": "XfSBWV",
            "likes": 23,
            "name": "RectSubdivide Multiscale Truchet",
            "published": 3,
            "tags": [
                "fractal",
                "truchet",
                "rectangle",
                "subdivision",
                "weave"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 157
        },
        "renderpass": [
            {
                "code": "#define R iResolution.xy\n#define ss(x) smoothstep(2./R.y, -2./R.y, x)\n\n// from Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat h12(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 h22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 h32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvoid drawCorner(inout vec4 o, vec2 u, vec2 p, float r, float w, float e) \n{\n    float l = length(u-p); // Centre at p\n    o = mix(o, \n            vec4(ss(abs(mod(l, w) - w/2.) - e)), // Repeat pattern\n            ss(l - r + e/2.)); // Restrict to radius r-e/2 circle\n}\n\nvoid mainImage( out vec4 o, vec2 u )\n{\n    u = (u+u-R)/R.y;      \n       \n    // Cell id\n    vec2 id = vec2(floor(iTime/2.));\n    \n    // Quantize value (split square into q*q cells)\n    float q = round(mix(11., 19., h12(id)));  \n    \n    float w = 1./q; // Unit width (width of smallest square)\n    float e = w/4.; // Edge width (of pattern)  \n    \n    // Cell bounds\n    vec2 bl = vec2(-1); // Bottom left \n    vec2 tr = vec2(1);  // Top right\n\n    for (float i = 0.; i < 3.; i++) \n    {\n        // Break if either axis can't subdivide anymore  \n        if (min(tr.x - bl.x, tr.y - bl.y) < w + 1e-4) break;\n        \n        // Break at random, don't subdivide this cell\n        // float h0 = h12(id);\n        // if (i > 2. && h0 < .5) break;\n        \n        // Find quantized dividing lines between bl, tr in both axes \n        vec2 h = h22(id);\n        vec2 div = mix(bl + w, tr - w, h);\n        div = round(q * div) / q;\n        \n        // Set new bl, tr\n        u.x > div.x ? bl.x = div.x : tr.x = div.x;\n        u.y > div.y ? bl.y = div.y : tr.y = div.y;\n    \n        // Update id\n        id += (bl+tr)/(i+1.);\n    }\n    \n    vec2 dim = tr - bl;         // Rect dimensions\n    vec2 tl = vec2(bl.x, tr.y); // Top left\n    vec2 br = vec2(tr.x, bl.y); // Bottom right\n\n    // Corner circle radii (smallest width or height of rect)\n    float r = min(dim.x, dim.y);\n    \n    // Draw parallel lines as background\n    if (dim.x == r) o = vec4(ss(abs(mod(u.y, w) - w/2.) - e));\n    else            o = vec4(ss(abs(mod(u.x, w) - w/2.) - e));    \n    \n    // Shuffle corner points randomly\n    vec2[] arr = vec2[4](bl, br, tl, tr);\n    int i0 = 0, i1 = 1, i2 = 2, i3 = 3;\n    vec3 h = h32(id);\n    if (h.x < .5) { int t = i0; i0 = i1; i1 = t; }\n    if (h.y < .5) { int t = i2; i2 = i3; i3 = t; }\n    if (h.z < .5) { int t = i0; i0 = i2; i2 = t;\n                        t = i1; i1 = i3; i3 = t; }\n    \n    // Draw corner points\n    drawCorner(o, u, arr[i0], r, w, e);\n    drawCorner(o, u, arr[i1], r, w, e);\n    drawCorner(o, u, arr[i2], r, w, e);\n    drawCorner(o, u, arr[i3], r, w, e);\n    \n    if (iMouse.z > 0.) {\n        vec4 col = .5 + .5 * cos(6.28*(vec4(0,1,2,0)/3. + h12(id)));\n        float d =  min(u.x-bl.x, tr.x-u.x);\n        d = min(d, min(u.y-bl.y, tr.y-u.y));    \n        o *= sqrt(col);\n        o = mix(o, vec4(1), .9 * ss(d-.125/q));\n    }\n    \n    // Only draw centre square (I'm lazy :D)\n    o *= ss(max(abs(u.x), abs(u.y)) - 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}