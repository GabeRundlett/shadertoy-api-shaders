{
    "Shader": {
        "info": {
            "date": "1523365296",
            "description": "Lightning in 3D (from the Tesla demos)",
            "flags": 0,
            "hasliked": 0,
            "id": "lsGcWV",
            "likes": 3,
            "name": "Lightning Attractor",
            "published": 3,
            "tags": [
                "raymarch",
                "lightning"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 719
        },
        "renderpass": [
            {
                "code": "// \"Lightning Attractor\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Lightning in 3D (from the Tesla demos)\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nvec2 Rot2D (vec2 q, float a);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\n\nvec4 pth[8];\nvec3 sunDir, qHit;\nfloat tCur, dstFar;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat SparkDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  dMin *= 2.;\n  for (int k = 0; k < 8; k ++) {\n    q = p;\n    if (k < 4) {\n      q.xz = Rot2D (q.xz, (0.5 + float (k)) * 0.5 * pi + 0.15 * tCur);\n      q.yz = Rot2D (q.yz, 0.25 * pi);\n    } else {\n      q.xz = Rot2D (q.xz, (0.5 + float (k)) * 0.5 * pi - 0.15 * tCur);\n      q.yz = Rot2D (q.yz, -0.25 * pi);\n    }\n    q.z += 20.2;\n    d = PrCylDf (q, 0.9, 20.);\n    if (d < dMin) {\n      q.xy -= (1. - smoothstep (19.5, 20., q.z)) * (2. * vec2 (Fbm2 (vec2 (0.4 * q.z, 0.) +\n         pth[k].xy), Fbm2 (vec2 (0.3 * q.z, 0.) + pth[k].zw)) - 1.);\n      d = PrCylDf (q, 0.02, 20.);\n      DMINQ (1);\n    }\n  }\n  return 0.5 * dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  q = p;\n  d = PrSphDf (q, 0.3);\n  DMINQ (2);\n  dMin = SparkDf (p, dMin);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstObj, f, t;\n  for (int k = 0; k < 8; k ++) {\n    f = 0.1 * float (k);\n    t = 0.1 * tCur;\n    pth[k] = vec4 (4. + f - (10. + 3. * f) * t + (0.8 - f) * sin ((0.1 + 0.1 * f) * t),\n       sin ((0.11 + 0.1 * f) * t) + (0.3 + 0.2 * f) * sin ((0.17 + 0.5 * f) * t),\n       5. + 2. * f - (12. - 2. * f) * t + (0.5 + 0.3 * f) * sin ((0.15 - 0.2 * f) * t),\n       sin ((0.12 - 0.1 * f) * t) + (0.4 - 0.2 * f) * sin ((0.12 + 0.2 * f) * t));\n  }\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1) {\n      col = vec3 (1., 1., 0.6) * clamp (1.3 - 0.3 * Fbm1 (5. * qHit.z), 0., 1.) *\n         (0.1 + 1.3 * max (0.3 - dot (rd, vn), 0.)) * (1. - dstObj / dstFar);\n    } else if (idObj == 2) {\n      col = vec3 (0.5, 0.5, 0.6) * (0.2 + 0.8 * max (dot (vn, sunDir), 0.)) +\n         0.1 * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n    }\n  } else {\n    col = vec3 (0.6, 0.6, 1.) * (0.05 + 0.245 * (rd.y + 1.) * (rd.y + 1.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCur += 10.;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az = 2. * pi * mPtr.x;\n    el = 0.2 * pi * mPtr.y;\n  } else {\n    az = 0.1 * pi * tCur;\n    el = 0.15 * pi * sin (0.13 * pi * tCur);\n  }\n  el = clamp (el, -0.1 * pi, 0.1 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -30.);\n  zmFac = 6. + 2. * sin (0.13 * pi * tCur);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  dstFar = 100.;\n  sunDir = vuMat * normalize (vec3 (1., 1., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}