{
    "Shader": {
        "info": {
            "date": "1384727293",
            "description": "Thanks to [url]https://www.shadertoy.com/view/MsX3WN[/url] and [url]https://iquilezles.org/articles/distfunctions/distfunctions.htm[/url] !",
            "flags": 0,
            "hasliked": 0,
            "id": "lsj3zW",
            "likes": 17,
            "name": "Devour",
            "published": 3,
            "tags": [
                "raymarch",
                "firstperson",
                "infinite"
            ],
            "usePreview": 0,
            "username": "RavenWorks",
            "viewed": 3856
        },
        "renderpass": [
            {
                "code": "const float PI=3.14159265;\nconst float tunnelRadius = 5.0;\nconst float clenchTime = 2.0;\nconst float ringGap = 10.0;\n\nfloat sub_cylinder(in vec3 p){\n\treturn tunnelRadius-length(p.xy);\n}\nfloat sub_torus( vec3 p ){\n\t\n\tfloat ringNum = floor( (p.z / ringGap) + 0.5 );\n\tfloat withinRingZ = mod(p.z+ringGap/2.0,ringGap)-ringGap/2.0;\n\t\n\tfloat ang = atan(p.y,p.x);\n\t\n\tfloat clenchRadius = 1.8;\n\tfloat torusRadius = tunnelRadius+clenchRadius + sin(iTime*clenchTime - ringNum*0.7)*clenchRadius;\n\tfloat ringRadius = clenchRadius*2.0 + sin(ang*5.0)*0.15;\n\t\n\tvec2 q = vec2(length(p.xy)-torusRadius,withinRingZ);\n\treturn length(q)-ringRadius;\n\t\n}\n\nfloat smin( float a, float b ){\n\tfloat k = 1.5;\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\nvec2 obj_tunnel(vec3 p){\n\treturn vec2(smin(sub_cylinder(p),sub_torus(p)),0);\n}\n\n\nvec2 obj_union(in vec2 obj0, in vec2 obj1){\n\tif (obj0.x < obj1.x)\n\t\treturn obj0;\n\telse\n\t\treturn obj1;\n}\n\nvec2 distance_to_obj(in vec3 p){\n\treturn obj_tunnel(p);\n}\n\nvoid shade_tunnel(in vec3 p, out vec3 color, out float specAmt, out float specPower){\n\tvec2 uv = vec2(p.z/9.0,atan(p.y,p.x)/PI);\n\tcolor = texture(iChannel0, uv).rgb * vec3(1.0,0.4,0.3);\n\tspecAmt = length(texture(iChannel1, uv*2.0).rgb)*0.6;\n\tspecPower = 8.0;//29.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 vPos = fragCoord.xy/iResolution.xy - 0.5;\n\t\n\t// Camera up vector.\n\tvec3 vuv=vec3(0,1,0); \n\t// Camera pos\n\tconst float baseSpeed = 7.0;\n\tfloat baseDist = iTime*baseSpeed;\n\tvec3 prp = vec3(0,0,baseDist + sin(iTime*clenchTime)*baseSpeed/2.0);\n\tprp.x = cos(prp.z*0.2)*0.4;\n\tprp.y = sin(prp.z*0.3)*0.3;\n\t// Camera rot\n\tvec3 vpn = normalize(vec3(cos(iTime*0.4)*0.2,sin(iTime*0.3)*0.15,1));\n\t\n  // Camera setup.\n  vec3 u=normalize(cross(vuv,vpn));\n  vec3 v=cross(vpn,u);\n  vec3 vcv=(prp+vpn);\n  vec3 scrCoord=vcv+vPos.x*u*iResolution.x/iResolution.y+vPos.y*v;\n  vec3 scp=normalize(scrCoord-prp);\n\n  // Raymarching.\n  const vec3 e=vec3(0.02,0,0);\n  const float maxd=70.0; //Max depth\n  vec2 d=vec2(0.1,0.0);\n  vec3 c,p,N;\n\tfloat sA,sP;\n\n  float f=1.0;\n  for(int i=0;i<256;i++)\n  {\n    if ((abs(d.x) < .001) || (f > maxd)) \n      break;\n    \n    f+=d.x;\n    p=prp+scp*f;\n    d = distance_to_obj(p);\n  }\n  \n  if (f < maxd)\n  {\n    // y is used to manage materials.\n\tif (d.y==0.0) {\n      shade_tunnel(p,c,sA,sP);\n\t} else {\n      \n\t}\n    \n    vec3 n = vec3(d.x-distance_to_obj(p-e.xyy).x,\n                  d.x-distance_to_obj(p-e.yxy).x,\n                  d.x-distance_to_obj(p-e.yyx).x);\n    N = normalize(n);\n\t  \n\tvec3 L = vec3(sin(iTime*0.8)*7.0,cos(iTime*0.9)*7.0,0.0);\n\t  \n    float b=max(dot(N,normalize(prp-p+L)),0.0);\n    //simple phong lighting\n    fragColor=vec4(((b*0.8+0.2)*c+pow(b,sP)*sA)*(1.0-f/maxd),1.0);\n  }\n  else \n    fragColor=vec4(0,0,0,1); //background color\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}