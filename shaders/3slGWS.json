{
    "Shader": {
        "info": {
            "date": "1547379276",
            "description": "bug (at least on OpenGL nVidia):\n- test changing switch line 17:      60 explicit call of T is as costly as a loop of 800 call of T ( 30 fps on my laptop )\n- test commenting out line 25:      dead code recognize wit loop but not with the 60 explicit calls",
            "flags": 0,
            "hasliked": 0,
            "id": "3slGWS",
            "likes": 1,
            "name": "GLSL bug: loop vs unrolling",
            "published": 3,
            "tags": [
                "glsl",
                "bug",
                "perf"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1903
        },
        "renderpass": [
            {
                "code": "// - perfs are 25 times worse on the unrolled version\n// - dead code is not detected on the unrolled version\n// NB: On good GPUs, duplicated unrolled lines and multiply loop accordingly.\n\n// Fork of  https://shadertoy.com/view/tdfGWS\n\nfloat d = 1e6; // ( NB: not better if moving away all globals )\nvec2 uv;\n\nvoid ddigit(int n);\n#define T ddigit(0x4406);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv = 20.*fragCoord/iResolution.y - 10.;\n\n#if 1                   // switch to compare loop vs explicit calls\n    for (int i=0; i < 800; i++ ) T\n#else\n    T T T T T T T T T T    T T T T T T T T T T   T T T T T T T T T T\n    T T T T T T T T T T    T T T T T T T T T T   T T T T T T T T T T        \n#endif\n\n                       // comment this out to test dead code optimization\n   fragColor = vec4(smoothstep(0.,50./iResolution.y, d) );\n}\n\n\n// ------ code displaying character segments from hexadecimal bitmap ------\n\nconst vec2 ch_size  = vec2(1., 2.);              \nconst vec2 ch_space = ch_size + 1.;    \n      vec2 ch_pos   = vec2 (-8, 0);             \n\n\nfloat dseg(vec2 p0, vec2 p1)\n{   vec2 dir = normalize(p1 - p0);\n\tvec2 cp = (uv - ch_pos - p0) * mat2(dir.x, dir.y,-dir.y, dir.x);\n\treturn distance(cp, clamp(cp, vec2(0), vec2(distance(p0, p1), 0)));   \n}\n\nbool bit(int n, int b)\n{\n\treturn mod(floor(float(n) / exp2(floor(float(b)))), 2.0) != 0.0;\n}\n\nvoid ddigit(int n)\n{\n\tfloat v = 1e6;\t\n\t//vec2 cp = uv - ch_pos;\n\tif (n == 0)     v = min(v, dseg(vec2(-0.405, -1.000), vec2(-0.500, -1.000)));\n\tif (bit(n,  0)) v = min(v, dseg(vec2( 0.500,  0.063), vec2( 0.500,  0.937)));\n\tif (bit(n,  1)) v = min(v, dseg(vec2( 0.438,  1.000), vec2( 0.063,  1.000)));\n\tif (bit(n,  2)) v = min(v, dseg(vec2(-0.063,  1.000), vec2(-0.438,  1.000)));\n\tif (bit(n,  3)) v = min(v, dseg(vec2(-0.500,  0.937), vec2(-0.500,  0.062)));\n\tif (bit(n,  4)) v = min(v, dseg(vec2(-0.500, -0.063), vec2(-0.500, -0.938)));\n\tif (bit(n,  5)) v = min(v, dseg(vec2(-0.438, -1.000), vec2(-0.063, -1.000)));\n\tif (bit(n,  6)) v = min(v, dseg(vec2( 0.063, -1.000), vec2( 0.438, -1.000)));\n\tif (bit(n,  7)) v = min(v, dseg(vec2( 0.500, -0.938), vec2( 0.500, -0.063)));\n\tif (bit(n,  8)) v = min(v, dseg(vec2( 0.063,  0.000), vec2( 0.438, -0.000)));\n\tif (bit(n,  9)) v = min(v, dseg(vec2( 0.063,  0.063), vec2( 0.438,  0.938)));\n\tif (bit(n, 10)) v = min(v, dseg(vec2( 0.000,  0.063), vec2( 0.000,  0.937)));\n\tif (bit(n, 11)) v = min(v, dseg(vec2(-0.063,  0.063), vec2(-0.438,  0.938)));\n\tif (bit(n, 12)) v = min(v, dseg(vec2(-0.438,  0.000), vec2(-0.063, -0.000)));\n\tif (bit(n, 13)) v = min(v, dseg(vec2(-0.063, -0.063), vec2(-0.438, -0.938)));\n\tif (bit(n, 14)) v = min(v, dseg(vec2( 0.000, -0.938), vec2( 0.000, -0.063)));\n\tif (bit(n, 15)) v = min(v, dseg(vec2( 0.063, -0.063), vec2( 0.438, -0.938)));\n\tch_pos.x += ch_space.x;\n\td = min(d, v);\n}\n\n/**   // note that the bug doesn't occur with this simple function\n      // ( costing 30fps on my machine with loop + no dead code ).\n\nvoid ddigit(int n)\n{\t\n\tvec2 cp = uv - ch_pos++;\n    for(float i=0.; i<5.; i++) d+=length(cp+i);\n\n}\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}