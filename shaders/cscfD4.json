{
    "Shader": {
        "info": {
            "date": "1697142374",
            "description": "rotating circle pattern",
            "flags": 0,
            "hasliked": 0,
            "id": "cscfD4",
            "likes": 2,
            "name": "rotating circle pattern",
            "published": 3,
            "tags": [
                "rotatingcirclepattern"
            ],
            "usePreview": 0,
            "username": "punpun",
            "viewed": 121
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265358979323846\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nvec2 rotate2D (vec2 _st, float _angle) {\n    _st -= 0.5;\n    _st =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _st;\n    _st += 0.5;\n    return _st;\n}\n\nvec2 tile (vec2 _st, float _zoom) {\n    _st *= _zoom;\n    return fract(_st);\n}\n\nfloat circle(in vec2 _st, in float _radius) {\n    vec2 dist = _st - vec2(0.5);\n    return 1. - smoothstep(_radius - (_radius * 0.08), _radius + (_radius * 0.01), dot(dist, dist) * 4.0);\n}\n\nvec2 rotateTilePattern(vec2 _st){\n\n    //  Scale the coordinate system by 2x2\n    _st *= 2.0;\n\n    //  Give each cell an index number\n    //  according to its position\n    float index = 0.0;\n    index += step(1., mod(_st.x,2.0));\n    index += step(1., mod(_st.y,2.0))*2.0;\n\n    //      |\n    //  2   |   3\n    //      |\n    //--------------\n    //      |\n    //  0   |   1\n    //      |\n\n    // Make each cell between 0.0 - 1.0\n    _st = fract(_st);\n\n    // Rotate each cell according to the index\n    if(index == 1.0){\n        //  Rotate cell 1 by 90 degrees\n        _st = rotate2D(_st,PI*0.5);\n    } else if(index == 2.0){\n        //  Rotate cell 2 by -90 degrees\n        _st = rotate2D(_st,PI*-0.5);\n    } else if(index == 3.0){\n        //  Rotate cell 3 by 180 degrees\n        _st = rotate2D(_st,PI);\n    }\n\n    return _st;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 st = fragCoord/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    st = tile(st, 2.0);\n    st = rotateTilePattern(st);\n    st = (st.x > .5 && st.y > .5 ?rotate2D(st,-PI*iTime*0.25) : st = rotate2D(st,PI*iTime*0.25));\n    st = vec2(st.x <= .5 ? circle(st, .3): 0.);\n    st = rotate2D(st,-PI*iTime*0.25);\n    \n    fragColor = vec4(vec3(st, 1.),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}