{
    "Shader": {
        "info": {
            "date": "1560545162",
            "description": "hold mouse to make mountains\n\n\n[url]javascript:  (function(){if(Effect.prototype.Paint.toString().length>1000){_Paint=Effect.prototype.Paint;} Effect.prototype.Paint = function(...args){for(var i=0; i<4;i++){_Paint.apply(this,args);}}})()[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "Wlj3Rc",
            "likes": 30,
            "name": "Land of Water",
            "published": 3,
            "tags": [
                "fluid",
                "automata",
                "physics",
                "erosion"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 1566
        },
        "renderpass": [
            {
                "code": "// Controls in Common\n\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    vec4 \n        n = (C(U+vec2(0,1))),\n        e = (C(U+vec2(1,0))),\n        s = (C(U-vec2(0,1))),\n        w = (C(U-vec2(1,0)));\n    vec4 c = C(U);\n    vec3 no = normalize(vec3(e.x-w.x+e.y-w.y,n.x-s.x+n.y-s.y,.5));\n    Q = abs(sin(1.+3.*c.z+sqrt(c.y)*(1.+.5*vec4(1,2,3,4))));\n    float a = .5;\n    no.zy *= mat2(cos(a),-sin(a),sin(a),cos(a));\n    no.zx *= mat2(cos(a),-sin(a),sin(a),cos(a));\n    Q*=max(0.,.2+.8*no.z);\n\t\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Calculate forces and pressure\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    Q = A(U);\n    vec4 \n        n = A(U+vec2(0,1)),\n        e = A(U+vec2(1,0)),\n        s = A(U-vec2(0,1)),\n        w = A(U-vec2(1,0)),\n        c = C(U),\n        nc = C(U+vec2(0,1)),\n        ec = C(U+vec2(1,0)),\n        sc = C(U-vec2(0,1)),\n        wc = C(U-vec2(1,0));\n    Q.xy -= 1./(1.+2.*sqrt(c.y))*(\n        // slope force\n        0.25*(vec2(ec.x-wc.x,nc.x-sc.x)*.5+vec2(ec.y-wc.y,nc.y-sc.y))+\n        // pressure force\n        0.25*vec2(e.z-w.z,n.z-s.z)+\n        // magnus force\n        0.25*Q.w*vec2(n.w-s.w,e.w-w.w));\n    Q.xy *= min(1.,c.y);\n    // divergence\n    Q.z  = 0.25*(s.y-n.y+w.x-e.x+n.z+e.z+s.z+w.z);\n    // curl\n    Q.w = 0.25*(s.x-n.x+w.y-e.y);\n    if (length(Q.xy) > .8) Q.xy = .8*normalize(Q.xy);\n    \n    //Boundary conditions\n    if (iFrame<1) Q = vec4(0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R iResolution.xy\n#define A(U) texture(iChannel0, (U)/R)\n#define B(U) texture(iChannel1, (U)/R)\n#define C(U) texture(iChannel2, (U)/R)\n#define D(U) texture(iChannel3, (U)/R)\n\n#define N 3.\n\n#define PRECIPITATION 1.\n#define EVAPORATION .0001",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Advect along velocity and curl feild\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    for (float i = 0.; i< N;i++) {\n        Q = A(U);\n        float co = cos(Q.w/N), si = sin(Q.w/N);\n        U -= Q.xy*mat2(co,-si,si,co)/N;\n    }\n    Q = A(U);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Advect along velocity and curl feild\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    for (float i = 0.; i< N;i++) {\n        Q = A(U);\n        float co = cos(Q.w/N), si = sin(Q.w/N);\n        U -= Q.xy*mat2(co,-si,si,co)/N;\n    }\n    Q = C(U);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 Q, in vec2 U )\n{\n    Q = C(U);\n    // neighborhood\n    vec4 \n        a = A(U),\n        n = A(U+vec2(0,1)),\n        e = A(U+vec2(1,0)),\n        s = A(U-vec2(0,1)),\n        w = A(U-vec2(1,0)),\n    \tnc = C(U+vec2(0,1)),\n        ec = C(U+vec2(1,0)),\n        sc = C(U-vec2(0,1)),\n        wc = C(U-vec2(1,0));\n    Q = mix(Q,0.25*(nc+ec+sc+wc),vec4(0.,.1,0,0));\n    // divergence \n    Q += 0.25*(s.y*sc-n.y*nc+w.x*wc-e.x*ec);\n    \n    // x : height y : water, z : sediment \n    float m = 0.25*(D(U+vec2(0,1)).x+D(U+vec2(1,0)).x+D(U-vec2(1,0)).x+D(U-vec2(0,1)).x);\n    float me = D(U).x;\n    float l = m-me;\n   \tQ.x = me + 0.03*l*l*l;\n    if (iMouse.z>0.) Q.x += .25/(1.+.0005*dot(U-iMouse.xy,U-iMouse.xy));\n    float x = .01*(Q.y*length(a.xy)*(1.-Q.z)+.01*Q.z);\n    Q.z += x;\n    Q.x -= x;\n    Q.y = Q.y*(1.-EVAPORATION) + PRECIPITATION/R.x;\n    Q = max(Q,0.);\n    // boundary conditions\n    if (iFrame<5)Q = vec4(10.+1.-U.y/R.y+.5*B(U).x+10.*exp(-length(U-0.5*R)/R.y),.3,0,0);\n    if (U.x<2.||U.y<2.||R.y-U.y<2.||R.x-U.x<2.) Q*=0.;\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}