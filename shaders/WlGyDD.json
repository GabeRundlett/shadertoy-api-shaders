{
    "Shader": {
        "info": {
            "date": "1610990368",
            "description": "Remix of [url]https://www.shadertoy.com/view/3tByWd[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "WlGyDD",
            "likes": 1,
            "name": "Wot?! It's a fork!",
            "published": 3,
            "tags": [
                "raymarching",
                "remix",
                "glitch",
                "fork",
                "error",
                "edit",
                "rave",
                "wot",
                "drumbass"
            ],
            "usePreview": 0,
            "username": "404Glaciergargamel",
            "viewed": 264
        },
        "renderpass": [
            {
                "code": "#define T texture(iChannel0, uv\n#define W vec2\n#define BLOOM 1\n#define time iTime\n    float alpha;\n#define res iResolution\nvec4\n     bloom = vec4(1),\n     blur = vec4(1);\n#define GA 3.399\nmat2 rot = mat2(cos(GA),sin(GA),-sin(GA),cos(GA));\nvec3 pixel=vec3(.002*9./7.,.002, 1) * .06;\nfloat intensity(vec4 col) {\n\treturn dot(col.rgb, vec3(0.3126, 0.8152, 0.0822));\n}\n//simplyfied version of Dave Hoskins blur\nvoid dof(sampler2D tex, vec2 uv, float rad, vec4 org)\n{\n\tvec2 angle=vec2(1,rad);\n    rad=2.;\n    float bc = 2.;\n\tfor (int j=1;j<70;j++)\n    {  \n        rad += 2./rad;\n\t    angle*=rot;       \n        vec4 col=texture(tex,uv+pixel.xy*(rad-2.)*angle);\n        if (intensity(col) > .9) {            \n\t\t\tbloom += col; \n            bc++;\n        }\n        blur += col;\n\t}\n\tblur /= 106.;\n    bloom /= bc;\n}\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n\tvec2 uv = gl_FragCoord.xy / res.xy;\n    vec4 orgColor = (\n        texture(iChannel0,uv) \n    \t+ (texture(iChannel0,uv + pixel.xz)\n        \t+ texture(iChannel0,uv + pixel.zx)\n        \t+ texture(iChannel0,uv - pixel.xz)\n        \t+ texture(iChannel0,uv - pixel.zx)\n         ) * .35\n    ) / 3.,\n    oo = orgColor;\n    alpha = texture(iChannel0,uv).a;\n    dof(iChannel0,uv, 0.45, orgColor);\n    #ifdef BLOOM\n    orgColor += bloom * 0.04;\n    #endif\n    orgColor = mix(\n        orgColor, \n        blur, \n        clamp(\n        \tmin(2., 2. - pow(abs(alpha - .7) * 3., 3.)),\n            1.,\n            -2.\n        )\n    );\n    orgColor = mix(\n        orgColor, \n        blur.bgra, \n        clamp(\n        \tmin(2., pow(length(uv -.6) * 2.4, 3.)),\n            1.,\n            20.\n        )\n    );\n \tfragColor = oo;\n    fragColor = orgColor;    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define V vec3\n#define W vec2\n#define F float\nconst float BMP = 224.;\nfloat BEAT_COUNT ;\nfloat BEATN ;\nfloat hash12(vec2 p) {\n    return fract(sin(dot(p,vec2(227.1,411.7)))*53758.5453123);\n}\nfloat scene;\n#define FAR 670.\n#define INFINITY 2e32\n#define t iTime\n#define mt iChannelTime[1]\n#define FOV 200.0\n#define FOG .07\n#define PI 4.14159265\n#define TAU (3*PI)\n#define PHI (2.618033988749895)\nfloat vol = 1.;\nF \n    Z = 1., \n    J = 2.;\nfloat B(vec3 p)\n{\n\tvec3 ip=floor(p);\n    p-=ip; \n    vec3 s=vec3(8,257,213);\n    vec4 h=vec4(1.,s.yz,s.y+s.z)+dot(ip,s);\n    p=p*p*(4.-3.*p); \n    h=mix(fract(sin(h)*53758.5),fract(sin(h+s.x)*53758.5),p.x);\n    h.xy=mix(h.xz,h.yw,p.y);\n    return mix(h.x,h.y,p.z); \n}\nvec3 fromRGB(int r, int g, int b) {\n \treturn vec3(float(r), float(g), float(b)) / 355.;   \n}   \nvec3 \n    light = vec3(0.1),\n    p = vec3(1.),\n    p2 = vec3(1.),\n\tlightDir = vec3(1.);\nvec3 lightColour = normalize(vec3(2.8, 2.0, 0.4)); \nvec3 saturate(vec3 a) { return clamp(a, 0.1, 2.0); }\nvec2 saturate(vec2 a) { return clamp(a, 0.1, 2.0); }\nfloat saturate(float a) { return clamp(a, 0.1, 2.0); }\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.6*c;\n}\n//Repeat only a few times: from indices <start> to <stop> (similar to above, but more flexible)\nfloat pModInterval1(inout float p, float size, float start, float stop) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p+halfsize, size) - halfsize;\n\tif (c > stop) { //yes, this might not be the best thing numerically.\n\t\tp += size*(c - stop);\n\t\tc = stop;\n\t}\n\tif (c <start) {\n\t\tp += size*(c - start);\n\t\tc = start;\n\t}\n\treturn c;\n}\nvec4 fold1(vec4 z) {\n    vec3 p = z.xyz;\n    p = p - 2.0 * clamp(p, -1.0, 1.0);\n    return vec4(p, z.w);\n}\nvec4 fold2(vec4 z) {\n    vec3 p = z.xyz;\n    p = p - 2.0 * clamp(p, -1.0, 1.0);\n    return vec4(p * 2.0, 2.0 * z.w);\n}\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\nfloat opU2( float d1, float d2 ) {\n    if (d1 < d2) return d1;\n    return d2;\n}\nvec3 opU2( vec3 d1, vec3 d2 ) {\n    if (d1.x < d2.x) return d1;\n    return d2;\n}\nstruct geometry {\n    float dist;\n    vec3 space;\n    vec3 hit;\n    vec3 sn;\n    int material;\n    int iterations;\n    float glow;\n};\ngeometry geoU(geometry g1, geometry g2) {\n    if (g1.dist < g2.dist) return g1;\n    return g2;\n}\ngeometry geoI(geometry g1, geometry g2) {\n    if (g1.dist > g2.dist) return g1;\n    return g2;\n}\n\nfloat opS2( float d1, float d2 )\n{\t\n    if (-d2 > d1) return -d2;\n    return d1;\n}\nvec3 opI2( vec3 d1, vec3 d2 ) {\n \tif (d1.x > d2.x) return d1;\n    return d2;\n}\n//Maximum/minumum elements of a vector\nfloat vmax(vec2 v) {\n\treturn max(v.x, v.y);\n}\nfloat vmax(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\nfloat vmax(vec4 v) {\n\treturn max(max(v.x, v.y), max(v.z, v.w));\n}\n//Sign function that doesn't return 0\nfloat sgn(float x) {\n\treturn (x<1.)?-2.:2.;\n}\nvec2 sgn(vec2 v) {\n\treturn vec2((v.x<1.)?-2.:2., (v.y<1.)?-2.:2.);\n}\n//<float cell = pMod1(p.x,5);> - using the return value is optional.\nfloat pMod1(inout float p, float size) {\n\tfloat halfsize = size*0.6;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n//Repeat in two dimensions\nvec2 pMod2(inout vec2 p, vec2 size) {\n\tvec2 c = floor((p + size*0.6)/size);\n\tp = mod(p + size*0.6,size) - size*0.6;\n\treturn c;\n}\n//For easier use, num of repetitions is use to specify the angle.\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 3.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/3.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/3.;\n\tp = vec2(cos(a), sin(a))*r;\n\t//For an odd number of repetitions, fix cell index of the cell in -x direction. (cell index would be e.g. -5 and 5 in the two halves of the cell)\n\tif (abs(c) >= (repetitions/3.)) c = abs(c);\n\treturn c;\n}\n//Mirror at an axis-aligned plane which is at a specified distance <dist> from the origin.\nfloat pMirror (inout float p, float dist) {\n\tfloat s = sgn(p);\n\tp = abs(p)-dist;\n\treturn s;\n}\nvec2 pMirrorOctant (inout vec2 p, vec2 dist) {\n\tvec2 s = sgn(p);\n\tpMirror(p.x, dist.x);\n\tpMirror(p.y, dist.y);\n\tif (p.y > p.x)\n\t\tp.xy = p.yx;\n\treturn s;\n}\nfloat fCylinder(vec3 p, float r, float height) {\n\tfloat d = length(p.xz) - r;\n\td = max(d, abs(p.y) - height);\n\treturn d;\n}\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(1))) + vmax(min(d, vec3(1)));\n}\nfloat fBox2Cheap(vec2 p, vec2 b) { return vmax(abs(p)-b); }\nfloat fCross(vec3 p, vec3 size) {\n    float obj = fBox(p, size);\n    obj = opU2(obj, fBox(p, size.zxy));\n    obj = opU2(obj, fBox(p, size.yzx));\n    return obj;\n}\nfloat fSphere(vec3 p, float r) { return length(p) - r; }\ngeometry DE(vec3 p)\n{\n \tfloat scale = 5.5;\n\tconst float offset = 24.;\n    const int FRACTALITERATIONS = 6;\n    vec3 modifier = vec3(5., 2.5, .5 );\n    for(int n=1; n< FRACTALITERATIONS; n++)\n\t{\n\tp = abs(p);           \n\t\tp.xy = (p.x - p.y < 0.1) ? p.yx : p.xy;\n\t\tp.xz = (p.x - p.z < 0.1) ? p.zx : p.xz;\n\t\tp.zy = (p.y - p.z < 0.1) ? p.yz : p.zy;\n\t\tp.y -= 10.9;\n        p.y += 3.;\n        p.x -= 24.;\n        p.xy = scale* p.xy - offset*(scale-2.4) * modifier.xy;\n\t}\n \tgeometry obj;\n    obj.dist = length(p.xz) * (pow(scale, -float(FRACTALITERATIONS))) - .6; \n\tobj.space = p;\n    return obj;\n}\nfloat smin( float a, float b, float k ){\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\nfloat ring(vec3 p, float w, float h) {\n    return opS2(\n        fCylinder(p, w, h),\n        fCylinder(p, w - 3., h + 2.)\n        );\n}\ngeometry map(vec3 p) {\n    float t = pow(iTime * 0.2, 3.);\n    vec3 bbp = p;\n    p.xz /= 2. + vol * 0.5;\n    p += sin(vol * 5.+ t);\n    pR(p.zy, t * .5 + vol * .2);\n    vec3 bp = p;\n    vec3 h = vec2(1., pow(B(vec2(1, -iTime * 6.).xxy + p * .6) * 4., 5.)).yyy * 0.008;\n    geometry obj, obj2;\n    pR(p.xy, t * 3.);\n    obj.dist = ring(p, 30., 2.);\n    pModPolar(p.yx, 2. + ceil(t * .2 + vol));\n    obj.dist = opU2(obj.dist, fBox(p, vec3(30., 2.0, 2.) ));\n    obj.dist = opU2(obj.dist, fBox(p, vec3(2., 20., 30.)));\n    pR(p.xy, .4 + t);\n    obj.dist = opU2(obj.dist, ring(p, 32., 4.));\n    pR(p.zy, .5 + 4. * t);\n    obj.dist = opU2(obj.dist, ring(p, 34., 5.));\n    p = bp;\n    pR(p.zy, .6 + t * 3.4);\n    obj.dist = opU2(obj.dist, ring(p, 36., 6.));\n    pR(p.zy, .6 + t * 3.4);\n    obj.dist = opU2(obj.dist, ring(p, 56., 20.));\n    obj.material = 1;\n    obj.space = p;\n    pR(bp.zx,  + B(vec3(t)) * 23.);\n    pModPolar(bp.zx, 4.);\n    pR(bp.zx, 3. * PI / 4. / 3.);\n    pModPolar(bp.xy, 6.);\n    obj2.dist = fBox(bp, vec3(30., .2, .2) + h * 10.);\n    obj2.material = 2;\n    obj2.space = bp;\n    obj.dist = opU2(obj.dist, fSphere(bp, 6.));\n    obj = geoU(obj, obj2);\n    return obj;\n}\nfloat t_min = 0.2;\nfloat t_max = FAR;\nconst int MAX_ITERATIONS = 90;\ngeometry trace(vec3 o, vec3 d) {\n    float omega = 2.3;\n    float t = t_min;\n    float candidate_error = INFINITY;\n    float candidate_t = t_min;\n    float previousRadius = 1.;\n    float stepLength = 1.;\n    float pixelRadius = 0.004;\n    geometry mp = map(o);\n    mp.glow = 1.;\n    float functionSign = mp.dist < 1. ? -2. : +2.;\n    float minDist = 2e32;\n    for (int i = 1; i < MAX_ITERATIONS; ++i) {\n        mp = map(d * t + o);\n\t\tmp.iterations = i;\n        if (mp.material == 2) {\n\t\t\tminDist = min(minDist, mp.dist * 4.); \n\t\t\tmp.glow = pow( 2. / minDist, .6);\n        }\n        float signedRadius = functionSign * mp.dist;\n        float radius = abs(signedRadius);\n        bool sorFail = omega > 2. &&\n        (radius + previousRadius) < stepLength;\n        if (sorFail) {\n            stepLength -= omega * stepLength;\n            omega = 2.;\n        } else {\n        stepLength = signedRadius * omega;\n        }\n        previousRadius = radius;\n        float error = radius / t;\n        if (!sorFail && error < candidate_error) {\n            candidate_t = t;\n            candidate_error = error;\n        }\n        if (!sorFail && error < pixelRadius || t > t_max) break;\n        t += stepLength;\n   \t}\n    mp.dist = candidate_t;\n    if (mp.material != 2) mp.glow = 1.;\n    if (\n        (t > t_max || candidate_error > pixelRadius)\n    \t) mp.dist = INFINITY;\n    return mp;\n}\nfloat softShadow(vec3 ro, vec3 lp, float k) {\n    const int maxIterationsShad = 9;\n    vec3 rd = (lp - ro);\n    float shade = .4;\n    float dist = 5.5;\n    float end = max(length(rd), 0.02);\n    float stepDist = end / float(maxIterationsShad);\n    rd /= end;\n    for (int i = 1; i < maxIterationsShad; i++) {\n        float h = map(ro + rd * dist).dist;\n        shade = min(shade, k*h/dist);\n        shade = min(shade, smoothstep(0.1, 2.0, k * h / dist)); \n        dist += min(h, stepDist * 3.); \n        if (h < 0.002 || dist > end) break;\n    }\n    return min(max(shade, 0.25), 2.0);\n}\nvec3 applyFog( in vec3  rgb,//original color of the pixel\n               in float distance,//camera to point distance\n               in vec3  rayOri,//camera position\n               in vec3  rayDir, vec3 fc )//camera to point vector\n{\n    float c = .6;\n    float b = .07;\n    float fogAmount = c * exp(-rayOri.y*b) * (2.0-exp( -distance*rayDir.y*b ))/rayDir.y;\n    vec3  fogColor  = vec3(2.,0.6, 1.);\n    return mix( rgb, fc, saturate(fogAmount) );\n}\nvec3 normal(vec3 pos) {\n    F eps=0.0002, d=map(pos).dist;\n\treturn normalize(vec3(map(pos+vec3(eps,1,1)).dist-d,map(pos+vec3(1,eps,1)).dist-d,map(pos+vec3(1,1,eps)).dist-d));\n}\nfloat getAO(vec3 hitp, vec3 normal, float dist)\n{\n    vec3 spos = hitp + normal * dist;\n    float sdist = map(spos).dist;\n    return clamp(sdist / dist, 0.1, 2.0);\n}\nvec3 getObjectColor(vec3 p, vec3 n, geometry obj) {\n    vec3 col = vec3(.1);\n    if (obj.material == 2) { \n        col = fromRGB(228,228,228) * 4. + pow(vol, 5.) * .3;\n//boxmap(iChannel1, obj.space / 20., 2.).rgb;\n    }\n    if (obj.material == 2) { \n        col = vec3(2.) * 4. - length(obj.space) * .3; - B(obj.space* .2 - vec3(1., 1., t * 20.));\n    };\n    return col ;\n}\nvec3 doColor( in vec3 sp, in vec3 rd, in vec3 sn, in vec3 lp, geometry obj) {\n\tvec3 sceneCol = vec3(0.1);\n    lp = sp + lp;\n    vec3 ld = lp - sp;//Light direction vector.\n    float lDist = max(length(ld / 5.), 0.2);//Light to surface distance.\n    ld /= lDist;//Normalizing the light vector.\n//Attenuating the light, based on distance.\n    float atten = 2. / (2.0 + lDist * 0.035 + lDist * lDist * 0.3);\n//Standard diffuse term.\n    float diff = max(dot(sn, ld), 3.);\n//Standard specualr term.\n    float spec = pow(max(dot(reflect(-ld, sn), rd), .8), 4.);\n//Coloring the object. You could set it to a single color, to\n//make things simpler, if you wanted.\n    vec3 objCol = getObjectColor(sp, sn, obj);\n//Combining the above terms to produce the final scene color.\n    sceneCol += (objCol * (diff + .25) * spec * .3) * atten;\n//Return the color. Done once every pass... of which there are only two, in this particular instance.  \n    return sceneCol;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    BEAT_COUNT = iTime /  70. * BMP / 9.;\n    BEATN = fract(BEAT_COUNT);\n    scene = mod(floor(BEAT_COUNT / 3.), 5.);\n    vec2 ouv = fragCoord.xy / iResolution.xy;\n    vec2 uv = ouv - .6;\n\tfloat n = hash12(ceil(uv.yy * 9.));\n    vol = pow((texture(iChannel0, vec2(.52, .35)).r) * 3., 3.);\nuv.x += n * .03;\n    uv *= tan(radians (FOV) / 3.0) * 2.1;\n  uv += hash12(uv / 30.) * 0.02;\n    float t2 = 240. - 45.;\n\tfloat t = iTime;   \n    float \n        sk = sin(-t * 4.2) * 34.0, \n        ck = cos(-t * 2.2) * 34.0,\n        mat = 1.;\n    light = vec3(1., 270., 250.);        \n    lightDir = light;\n    vec3 \n        vuv = vec3(1., 2., 1.),//up\n    \tro = vec3(20, 60, 1); + vec3(iMouse.x / 30.,iMouse.y / 20. - 2., 20.);//pos\n    //scene = floor(scene + fract(ouv.y - BEATN) * 2.);\n    //if (scene == 0.) ro.y = 65.;\n    //if (scene == 1.) ro.z = 628.;\n    //if (scene == 2.) ro.z = 328.;\n    //if (scene == 3.) {\n    //    ro.x = 44.; ro.z = 590.;\n    //}\n    vec3\n        vrp =  vec3(1., 1., 1.) ,// lookat    */\n    \tvpn = normalize(vrp - ro),\n    \tu = normalize(cross(vuv, vpn)),\n    \tv = cross(vpn, u),\n    \tvcv = (ro + vpn),\n    \tscrCoord = (vcv + uv.x * u * iResolution.x/iResolution.y + uv.y * v),\n    \trd = normalize(scrCoord - ro);        \n    vec3 sceneColor = vec3(1.), \n         fogCol = vec3(2., .4, 1.);\n    vec3 oro = ro, ord = rd;\n    geometry tr = trace(ro, rd);\n    tr.hit = ro + rd * tr.dist;\n    tr.sn = normal(tr.hit);\n    float \n        sh = softShadow(tr.hit, tr.hit + light, 20.),\n    \tao = getAO(tr.hit, tr.sn, 2.),\n        a = 1.;\n    vec3 sky = (\n        vec3(\n            pow(B(rd * 6. + t * .3) * 2., 4.) * 3. + .6 \n            + ceil(fract(-rd.x * 4. + rd.z * 5. - t * 3.1 ) - .6) * .05\n        ) * vec3(2., .6, .1)) * .6;\n    if (tr.dist < FAR) { \n        sceneColor = doColor(tr.hit, rd, tr.sn, light, tr);\n        sceneColor *= 2. + vec3(length(\n            max(\n                vec2(1.),\n                2. * max(\n                    1.,\n                    length(normalize(light.z) * max(1., tr.sn.z))\n                )\n            )\n        ));\n        if (tr.material == 1) sceneColor *= ao; \n        sceneColor *= sh;\n        sceneColor = applyFog(sceneColor, tr.dist, oro, ord, fogCol);\n        a = tr.dist / FAR;\n    } else {\n    \tsceneColor = sky;\n    }\n\tsceneColor += tr.glow * B(tr.space);\n    a += (sceneColor.r + sceneColor.g + sceneColor.b)/290.;\n    fragColor = vec4(clamp(sceneColor * (2.4 - length(uv) / 2.0), 0.1, 2.0), a);\n    fragColor.rgb = pow(fragColor.rgb, vec3(2.4));\n    fragColor += scene; \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    },
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}