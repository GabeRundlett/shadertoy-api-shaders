{
    "Shader": {
        "info": {
            "date": "1619507064",
            "description": "raymarching_3d_sdf_demo",
            "flags": 0,
            "hasliked": 0,
            "id": "7dXSDl",
            "likes": 0,
            "name": "raymarching_3d_sdf_demo",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf"
            ],
            "usePreview": 0,
            "username": "luckywjr",
            "viewed": 332
        },
        "renderpass": [
            {
                "code": "float sdSphere(vec3 p, float s)\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec2 opUnion(vec2 d1, vec2 d2)\n{ \n    return d1.x < d2.x ? d1 : d2; \n}\n\nvec2 map(in vec3 pos)\n{\n    vec2 res = vec2(1e10, 0);\n    res = opUnion(res, vec2(sdSphere(pos+vec3(-0.3,-0.9,-2.), 0.4), 2));\n    res = opUnion(res, vec2(sdBox(pos+vec3(0.9,-0.8,-2.), vec3(0.3)), 3));\n    return res;\n}\n\n// 输入射线的起点和方向\nvec2 raycast(in vec3 orign, in vec3 direction)\n{\n    vec2 res = vec2(-1, -1);\n    float lenMin = 0.0;\n    float lenMax = 20.0;\n        \n    //绘制平面\n    float len2plane = (0.0-orign.y)/direction.y;\n    if(len2plane > 0.0)\n    {\n        lenMax = min(lenMax, len2plane);\n        res = vec2(len2plane, 1);\n    }\n    \n    float len = lenMin;\n    for(int i = 0; i < 70 && len < lenMax; i++)\n    {\n        // 带入距离函数\n        vec2 d = map(orign + direction * len);\n        // 射线越长，精度越低\n        if(abs(d.x) < (0.001*len))\n            return vec2(len, d.y);\n            \n        // 步长\n        len += d.x;\n    }\n    return res;\n}\n\n//计算硬阴影\nbool calHardShadow(in vec3 orign, in vec3 direction, float lenMax)\n{\n    float len = 0.;\n    for(int i = 0; i < 70; i++)\n    {\n        vec2 d = map(orign + direction * len);\n        if(abs(d.x) < (0.001*len))\n        {\n            if(lenMax > len + 0.015) return true;\n            break;\n        }\n            \n        len += d.x;\n    }\n    return false;\n}\n\n//梯度计算法线\nvec3 CalNormal(vec3 p)\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize(e.xyy*map(p + e.xyy).x + \n                    e.yyx*map(p + e.yyx).x + \n                    e.yxy*map(p + e.yxy).x + \n                    e.xxx*map(p + e.xxx).x );\n}\n\n//着色\nvec3 render(in vec3 orign, in vec3 direction)\n{\n    vec3 col = vec3(0.7, 0.7, 0.9);\n    vec2 res = raycast(orign, direction);\n    if(res.x >= 0.)\n    {\n        vec3 p = orign + direction * res.x;//着色点坐标\n        vec3 normal = CalNormal(p);//法线\n        vec3 sum = vec3(-2.0, 2.0, -2.0);\n        \n        if(res.y == 1.)\n        {\n            //平面的法线可以直接写出来\n            normal = vec3(0,1,0);\n        }\n        \n        {\n            vec3 p2sum = normalize(sum-p);\n            //漫反射\n            col = vec3(1);\n            vec3 kd = vec3(0.9);\n            col = kd * max(0.0, dot(p2sum, normal));\n            //高光\n            vec3 p2camera = normalize(orign-p);\n            vec3 cs = p2camera + p2sum;\n            vec3 h = cs/dot(cs,cs);\n            vec3 ks = vec3(1.0);\n            col += ks * pow(max(0.0, dot(h, normal)), 3.0);\n            \n            //环境光\n            if(res.y == 1.)\n                col += vec3(0.2,0.5,0.2);\n            if(res.y == 2.)\n                col += vec3(0.5,0,0);\n            if(res.y == 3.)\n                col += vec3(0,0.5,0.5);\n        }\n        \n        {\n            //硬阴影\n            bool s = calHardShadow(sum, normalize(p-sum), length(p-sum));\n            if(s)\n                col -= vec3(0.6);\n        }\n    }\n    \n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 camera = vec3(0.0, 1.0, -3);\n    const float fl = 3.0;// focal length 焦距\n    vec3 direction = normalize(vec3(p, fl));\n    vec3 orign = vec3(camera.x + p.x, camera.y + p.y, camera.z + fl);\n    \n    \n    vec3 col = render(orign, direction);\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}