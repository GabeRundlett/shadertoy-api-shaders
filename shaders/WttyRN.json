{
    "Shader": {
        "info": {
            "date": "1608588313",
            "description": "It's a rainy day...",
            "flags": 0,
            "hasliked": 0,
            "id": "WttyRN",
            "likes": 5,
            "name": "Rainy Window in London",
            "published": 3,
            "tags": [
                "2d",
                "rain",
                "window"
            ],
            "usePreview": 0,
            "username": "space928",
            "viewed": 705
        },
        "renderpass": [
            {
                "code": "const int drops = 500;\nconst float dropSizeMin = 0.0025;\nconst float dropSizeMax = 0.004;\nconst float dropDistortionScale = 0.3;\nconst float dropDistortion = 0.003;\nconst float dropSpeedMin = 0.0;\nconst float dropSpeedMax = 0.6;\nconst float dropJiggleAmount = 0.015;\nconst float dropJiggleScale = 0.4;\n\nconst float bgBlurRadius = 5.;\n\nconst float pi = 3.14159265;\n\n//Taken from: https://gist.github.com/keijiro/24f9d505fac238c9a2982c0d6911d8e3\nuint hash(uint s)\n{\n    s ^= 2747636419u;\n    s *= 2654435769u;\n    s ^= s >> 16;\n    s *= 2654435769u;\n    s ^= s >> 16;\n    s *= 2654435769u;\n    return s;\n}\n\nfloat random(uint seed)\n{\n    return float(hash(seed)) / 4294967295.0; // 2^32-1\n}\n\nfloat sat(float x)\n{\n    return max(min(x,1.),0.);\n}\n\nfloat remap(float x, float mi, float ma)\n{\n    return (x-mi)/(ma-mi);\n}\n\nfloat remapTo(float x, float mi, float ma)\n{\n    return x*(ma-mi)+mi;\n}\n\nvec3 blur(sampler2D tex, vec2 uv)\n{\n    vec3 col = vec3(0.);\n    float sum = 0.;\n    \n    for(float x = -bgBlurRadius; x < bgBlurRadius; x++)\n    {\n        for(float y = -bgBlurRadius; y < bgBlurRadius; y++)\n        {\n            /*if(sqrt(x*x+y*y)>r)\n                continue;*/\n            vec2 off = vec2(x,y)/bgBlurRadius;\n            vec2 offFrost = tan(off*pi/2.)*(2./pi);\n            \n            float l = 1.-sqrt(x*x+y*y)/bgBlurRadius;\n            off = off;\n            float weight = tan(l);\n            \n            off *= 20.;\n            sum += weight;\n            col += textureLod(tex, uv + off/iResolution.xy,3.).rgb*weight;\n        }\n    }\n    return col / sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvn = fragCoord/iResolution.xx;\n    \n    vec2 dist = (texture(iChannel1, uv/dropDistortionScale).rg*2.-1.) * dropDistortion;\n    uv += dist;\n    uvn += dist;\n    \n    vec3 uvOff = vec3(0.);\n    for(int d = 0; d < drops; d++)\n    {\n        //Position and size\n        vec2 dp = vec2(random(uint(d)), random(uint(d+drops)));\n        float dropSize = mix(dropSizeMin, dropSizeMax, random(uint(d+drops*2)));\n        \n        //Animate\n        float t = iTime+sat(pow(sin(iTime * sat(random(uint(d+drops*8))*.5+.5)), 2.));\n        float vel = pow(remapTo(random(uint(d+drops*5)), dropSpeedMin, dropSpeedMax), 2.2);\n        dp.y -= t * vel;\n        dp.y = fract(dp.y);\n        dp.x += (dropJiggleAmount*(.4-vel))*(texture(iChannel1, dp/dropJiggleScale).r*2.-1.);\n        float stretch = pow(vel,1.5)*8.;\n        \n        float dropShape = 1.-sat(remap(sat(1.-length((dp-uvn)/vec2(1.-stretch*.2,1.+stretch))), 1.-dropSize, 1.));\n        dropShape = sqrt(1.-dropShape*dropShape);\n        \n        vec2 vecAng = (normalize(uvn-dp));\n        dropShape = (1.-dropShape)*smoothstep(0.1, 0.8,dropShape);\n        uvOff.r += dropShape*vecAng.x;\n        uvOff.g += dropShape*vecAng.y;\n        uvOff.b += dropShape;\n    }\n    \n    // BG Tex\n    vec3 col = textureLod(iChannel0, uv+uvOff.rg*0.1, 3.).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    //fragColor = vec4(vec3(smoothstep(0.5,0.95,sat(1.-uvOff.b+uvOff.g*.5))*0.25+.75),1.0);\n    float mixVal = smoothstep(0.5,0.95,sat(1.-uvOff.b+uvOff.g*.5))*0.5+.5;\n    //fragColor = vec4(mix(vec3(1.), col, 1.-mixVal),1.0);\n    //fragColor = vec4(mix(blur(iChannel0, fragCoord/iResolution.xy), col, 1.-mixVal),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}