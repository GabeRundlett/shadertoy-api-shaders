{
    "Shader": {
        "info": {
            "date": "1463500637",
            "description": "music: [url=https://www.youtube.com/watch?v=zl4BIxg5GTg]bhkata - mental astronaut (danaga remix)[/url]\n\nfirst silly attempt at raymarching",
            "flags": 0,
            "hasliked": 0,
            "id": "XsyXzw",
            "likes": 41,
            "name": "Dancing Dots",
            "published": 3,
            "tags": [
                "raymarching",
                "helloworld"
            ],
            "usePreview": 0,
            "username": "s23b",
            "viewed": 3610
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\nvec3 hsv2rgb (in vec3 hsv) {\n    return hsv.z * (1.0 + 0.5 * hsv.y * (cos (2.0 * PI * (hsv.x + vec3 (0.0, 0.6667, 0.3333))) - 1.0));\n}\n\nfloat hash(vec3 uv) {\n    return fract(sin(dot(uv, vec3(7.13, 157.09, 113.57))) * 48543.5453);\n}\n\n// better distance function thanks to Shane\nfloat map(vec3 p) {\n    float radius = texture(iChannel0, vec2(hash(floor(p)), .25)).x * .99 + .01;\n    return length(fract(p) - .5) - .25 * radius;\n}\n\n// raymarching function\nfloat trace(vec3 o, vec3 r) {\n\n    float t = 0.;\n    \n    for (int i = 0; i < 32; ++i) { // Low iterations for blur.\n        float d = map(o + r * t);\n        t += d * .9; // Ray shortening to blur a bit more. \n    }\n    \n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // ray\n    vec3 r = normalize(vec3(uv, 2.));\n    // origin\n    vec3 o = vec3(-3, iTime, -1);\n     \n    // rotate origin and ray\n    float a = -iTime * .5;\n    mat2 rot = mat2(cos(a), -sin(a), sin(a), cos(a));\n    o.xz *= rot;\n    r.xy *= rot;\n    r.xz *= rot;\n    \n    // march\n    float f = trace(o, r);\n    \n    // calculate color from angle on xz plane\n    vec3 p = o + f * r;\n    float angel = atan(p.x, p.z) / PI / 2.;\n    vec3 c = hsv2rgb(vec3(angel, 1., 1.));\n    \n    // add with fog\n\tfragColor = vec4(c / (1. + f * f * .1),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}