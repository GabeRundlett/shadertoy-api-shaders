{
    "Shader": {
        "info": {
            "date": "1428743806",
            "description": "orange: 440Hz=A   red: octaves   green: harmonics      blue: notes",
            "flags": 4,
            "hasliked": 0,
            "id": "lt23W1",
            "likes": 46,
            "name": "mic analysis",
            "published": 3,
            "tags": [
                "sound",
                "spectrum",
                "music",
                "mic"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 4994
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfloat dx = 1./iResolution.x;\n    float fmax = iSampleRate/4.;\n   \n    float c=0.;\n    \nfor(int once=0; once<1; once++) { // because early returns cause issues on some compilers\n        \n    if (uv.y>.9) {  // 1st sub-window: notes\n        // bars\n        if ((uv.x<4.*dx)||(1.-uv.x<4.*dx))\n            { fragColor = vec4(1.,.7,0.,0.);break;\t}\n        if ((abs(uv.x-2./12.)<dx)||(abs(uv.x-3./12.)<dx)||(abs(uv.x-5./12.)<dx)||(abs(uv.x-7./12.)<dx)||(abs(uv.x-8./12.)<dx)||(abs(uv.x-10./12.)<dx))\n           { fragColor = vec4(.4,.4,1.,0.); break;\t}\n \t\tif (mod(uv.x,1./12.)<dx) \n            { fragColor = vec4(0.,0.,.7,0.); break;\t}\n\n        // data\n        float f = 440.*pow(2.,uv.x); // still, avoid < 440Hz since not enough resolution\n        for (float i=1.; i<=5.; i++) { \n        \tif (f>=440.) c =  max(c,texture(iChannel0,vec2(f/fmax,.5/2.)).r);\n            f *= 2.;\n        }\n        c = (c-.3)*1.5 ; \n        fragColor=vec4(1.5*c,c,.7*c,1); break;\n    }\n\n    else if (uv.y>.6) {  // 2nd sub-window: narrow spectrum\n        uv.y = (uv.y-.6)/.3;\n        uv.x /= 5.;\n        float f = uv.x*fmax;\n        // bars\n        if (abs(f-440.)< fmax/(5.*iResolution.x))\n            { fragColor = vec4(1.,.7,0.,0.); break;\t}\n \t  \tif (mod(log(f/440.)/log(2.),1.)< .5/(iResolution.x*uv.x))\n            { fragColor = vec4(.7,0.,0.,0.); break;\t}\n \t  \tif (mod(f,440.)< fmax/(5.*iResolution.x))\n            { fragColor = vec4(0.,.7,0.,0.); break;\t}\n\n        // data\n        c =  texture(iChannel0,vec2(uv.x,.5/2.)).r;\n        c = (uv.y<c) ? 1. : 0.;\n    }\n\n    else if (uv.y>.3) {  // 3rd sub-window: large spectrum\n        uv.y = (uv.y-.3)/.3; \n        float f = uv.x*fmax;\n        // bars\n        if (abs(f-440.)< fmax/iResolution.x)\n            { fragColor = vec4(1.,.7,0.,0.); break;\t}\n  \t  \tif (mod(log(f/440.)/log(2.),1.)< 2./(iResolution.x*uv.x))\n            { fragColor = vec4(.7,0.,0.,0.); break;\t}\n\t  \tif (mod(f,440.)< fmax/iResolution.x)\n            { fragColor = vec4(0.,.7,0.,0.); break; }\n\n\t\t//data\n        c =  texture(iChannel0,vec2(uv.x,.5/2.)).r;\n        c = (uv.y<c) ? 1. : 0.;\n      }\n\n    else { // 4th sub-window: signal\n        uv.y = (uv.y-0.)/.3;\n#if 1 // synchro: start signal on a min value\n        float m=999., xm;\n        for (float x=0.5; x< 100.; x+=1.) {\n            c =  texture(iChannel0,vec2(x/512.,1.5/2.)).r;\n            if (c<m) { m=c; xm=x; }\n        }\n         uv.x += xm/512.;\n#endif\n        c =  texture(iChannel0,vec2(uv.x,1.5/2.)).r;\n        c = (uv.y<c) ? 1. : 0.;\n    }\n\n     fragColor = vec4(c);\n}}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}