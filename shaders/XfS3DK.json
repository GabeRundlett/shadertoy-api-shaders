{
    "Shader": {
        "info": {
            "date": "1704620326",
            "description": "reference: https://twitter.com/Yugemaku/status/1743284242413658138\nMouse controls camera\nNo ray-tracing: projected vector drawing ",
            "flags": 0,
            "hasliked": 0,
            "id": "XfS3DK",
            "likes": 44,
            "name": "wire dodecahedron to icosahedron",
            "published": 3,
            "tags": [
                "wireframe",
                "icosahedron",
                "dodecahedron",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 517
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/McBGWW\n\n// simplified from \"Compound of Five Tetrahedra\" by mla. https://shadertoy.com/view/tsXyWs\nvec3 V[] = vec3[](\n         vec3( 0  , 0  , 1   ), \n         vec3( .58, .33, .75 ), \n         vec3( 0  ,-.67, .75 ), \n         vec3(-.58, .33, .75 ),\n         vec3( .36, .87, .33 ),\n         vec3( .93,-.13, .33 ), \n         vec3( .58,-.75, .33 ), \n         vec3(-.58,-.75, .33 ), \n         vec3(-.93,-.13, .33 ), \n         vec3(-.36, .87, .33 ), \n         vec3( .58, .75,-.33 ),\n         vec3( .93, .13,-.33 ), \n         vec3( .36,-.87,-.33 ), \n         vec3(-.36,-.87,-.33 ), \n         vec3(-.93, .13,-.33 ),  \n         vec3(-.58, .75,-.33 ),  \n         vec3( 0  , .67,-.75 ),  \n         vec3( .58,-.33,-.75 ), \n         vec3(-.58,-.33,-.75 ), \n         vec3( 0  , 0  ,-1   ) \n      );\n              // full faces, so each edge might be drawn twice\nint S[] = int[] (    0, 2, 6, 5, 1  // 3 bottom\n                   , 0, 3, 8, 7, 2\n                   , 0, 1, 4, 9, 3\n                   , 2, 7,13,12, 6  // 6 crown\n                   , 8,14,18,13, 7\n                   , 6,12,17,11, 5\n                   , 3, 9,15,14, 8\n                   , 1, 5,11,10, 4 \n                   , 4,10,16,15, 9\n                   ,19,18,14,15,16  // 3 top\n                   ,19,17,12,13,18\n                   ,19,16,10,11,17\n  );\n#define S(i) S[clamp(i,0,59)]\n\nfloat segment(vec2 p, vec3 A, vec3 B) {\n    vec2  a = A.xy, \n          b = B.xy - a;\n         p -= a;\n    float h =  clamp(dot(p, b) / dot(b, b), 0., 1.);\n    return    length(p - b * h ) \n           + .01* mix(A.z, B.z, h);  // thickness immitating apparent width (NB: shouldn't be linear)\n}\n\n#define R      iResolution.xy\n#define rot(a) mat2(cos(a+vec4(0,33,11,0)))\n\nvec3 T(vec3 p) {\n    vec2 M = iMouse.xy;          // camera rotation\n    M = length(M) > 10.\n      ? ( 2.*M/R - 1. ) * 3.14\n      : iTime/vec2(8,-5);\n    p.yz *= rot( M.y),  // theta\n    p.zx *= rot(-M.x);  // phi\n  \n    return p / ( p.z - 1.7 ); // perspective projection ( + z )\n}\n\n#define rot3(P,A,a) ( mix( A*dot(P,A), P, cos(a) ) + sin(a)*cross(P,A) )\n#define sf(t)       ( floor(t) + smoothstep(1.,0., (1.-fract(t))/.8)) // smoothfloor https://www.shadertoy.com/view/4t3SD7 \n\nvoid mainImage( out vec4 O, vec2 U ) {\n    U = ( 2.*U - R.xy ) / R.y;\n    O = vec4(1);\n    \n    for( int i,i0,i1; i <= S.length(); i++ ) {\n        vec3 A = V[ i0 = S(i-1) ],\n             B = V[ i1 = S(i%5 > 0 ? i : i-5) ],\n             M = normalize(A+B);\n       float t =  sf(iTime/2.);      \n       A = rot3(A,M,1.571*t); // tilting\n       B = rot3(B,M,1.571*t);\n       t = mod(t,2.);\n       M = min(t,2.-t)* .6*(B-A)/2.; A -= M; B += M; // adjust segment length\n       if ( i1 > i0 ) // draw segments only once \n           O -= smoothstep(2./R.y, -2./R.y, segment( U, T(A), T(B) ) -.007 );\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}