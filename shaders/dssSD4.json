{
    "Shader": {
        "info": {
            "date": "1668960775",
            "description": "Reaction-Diffusion Grey Scott Model.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "dssSD4",
            "likes": 8,
            "name": "Reaction Diffusion Bloody",
            "published": 3,
            "tags": [
                "diffusion",
                "reaction",
                "greyscott"
            ],
            "usePreview": 0,
            "username": "rubioh",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "vec3 getH(vec2 uv, float d){\n    vec2 newc = texture(iChannel0, uv).xy;\n    float h =  pow(dot2(1.-newc), d);\n    return vec3(uv, h/2.);\n}\n\n//vec3 palette(float t, float t2){\n//   return mix(vec3(.3, .53, .37), vec3(.57,.17,.09)/1., t2)*(t+.1);\n//}\nvec3 palette( in float t, float t2 )\n{\n    vec3 a = vec3(0.4, 0.2, 1.);\n    vec3 b = vec3(0.75, 0.7, 0.7);\n    vec3 c = vec3(1., 1., 1.);\n    vec3 d = vec3(0.6, 0.35, 0.05);\n\n    return a*.2 + .2*b*cos( 6.28318*(c*t*2.+d*t2*.1) );\n}\n\nvec3 calcnormal(vec2 p, float d){\n\n    vec2 e = vec2(1.0, -1.0) * 0.001;    \n    return normalize(\n      e.xyx*getH(p + e.xy, d) +\n      e.yxx*getH(p + e.yx, d) +\n      e.xxx*getH(p + e.xx, d));\n}\n\nvec3 phong(vec3 lightDir, vec3 normal, vec3 rd, vec3 col) {\n  // ambient\n  vec3 ambient = col*(.5);\n\n  // diffuse\n  float dotLN = clamp(dot(lightDir, normal), 0., 1.);\n  vec3 diffuse = col * dotLN;\n\n  // specular\n  float dotRV = clamp(dot(reflect(lightDir, normal), -rd), 0., 1.);\n  vec3 specular = col* pow(dotRV, 16.);\n\n  return ambient + diffuse + 2.*specular;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy/iResolution.xy);\n    \n    \n    float t2 = pow(clamp(getH(uv, 24.).z, 0., 1.), .4);\n    \n    \n    vec3 normal = calcnormal(uv, 16.);\n    \n    vec3 ld = vec3(.5, .5, 4.5);\n    \n    vec3 rd = vec3(uv, getH(uv, 4.).z);\n    \n    vec3 col = palette(1.-rd.z, t2);\n    \n    col = phong(ld, normal, rd, col);\n    \n    fragColor = vec4(col, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define dt 1.\n#define Da .21\n#define Db .105\n#define PI 3.14159\n#define f .039\n#define k .06\n\nfloat dot2(vec2 p){\n    return dot(p,p);\n}\nvec2 hash22(vec2 p){\n    vec2 a = vec2(94.86, 43.46);\n    vec2 b = vec2(72.67, 13.48);\n    p = vec2(dot(p, a), dot(p, b));\n    return fract(sin(p*10.29)*48.47);\n}\nfloat getf(){\n    return .016; // .01 0.014 .018 .02\n}\n\nfloat getk(){\n    return .047;\n}\n\nmat2 rot(float t){\n return mat2(cos(t), sin(t), -sin(t), cos(t));\n}\n\nvec4 Laplacian(ivec2 uv, sampler2D Chan){\n\n    ivec2 dx = ivec2(1, 0);\n    ivec2 dy = ivec2(0, 1);\n    \n    vec4 L = vec4(0.);\n    \n    L += texelFetch(Chan, uv+dx, 0);\n    L += texelFetch(Chan, uv+dy, 0);\n    L += texelFetch(Chan, uv-dx, 0);\n    L += texelFetch(Chan, uv-dy, 0);\n    \n    L += .5*texelFetch(Chan, uv+dx+dy, 0);\n    L += .5*texelFetch(Chan, uv+dy-dx, 0);\n    L += .5*texelFetch(Chan, uv-dx-dy, 0);\n    L += .5*texelFetch(Chan, uv-dy+dx, 0);\n        \n    L -= texelFetch(Chan, uv, 0)*6.;\n \n    return L;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec4 init(vec2 uv){\n    float init_A = 1.;\n    float init_B = 0.;\n        \n    return vec4(init_A, init_B, .21, .105);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 m = vec2(.5, 0.);\n    if (iMouse.z > 0.){\n        m = iMouse.xy/iResolution.xy;\n    }\n\n    ivec2 uv = ivec2(fragCoord.xy);\n    vec2 uvf = fragCoord.xy/iResolution.xy;\n    vec4 state;    \n    // Init lattice\n    if (iFrame <= 0){\n        state = init(uvf);\n        }    \n       \n    else{\n\n        state = texelFetch(iChannel0, uv, 0).xyzw;\n        \n        float a = state.x;\n        float b = state.y;\n            \n        vec4 L = Laplacian(uv, iChannel0);\n        \n        \n        float na = a + (L.x*Da - a*b*b + f*(1.-a))*dt;\n        float nb = b + (L.y*Db + a*b*b - (k+f)*b)*dt;\n        \n        nb += .4*(1.-smoothstep(0., .01, length(uvf-m)));\n        na = clamp(na, 0., .9);\n        nb = clamp(nb, 0., .9);\n        \n        state.xy = vec2(na, nb);\n        state.zw = vec2(na,nb);\n        \n    }\n    \n    \n    fragColor = vec4(state);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 m = iMouse.xy/iResolution.xy;\n    if (iMouse.z == 0.){\n        m = vec2(-10.);\n    }\n\n    ivec2 uv = ivec2(fragCoord.xy);\n    vec2 uvf = fragCoord.xy/iResolution.xy;\n\n    vec4 state = texelFetch(iChannel0, uv, 0).xyzw;\n\n    float a = state.x;\n    float b = state.y;\n\n        vec4 L = Laplacian(uv, iChannel0);\n\n    float na = a + (L.x*Da - a*b*b + f*(1.-a))*dt;\n    float nb = b + (L.y*Db + a*b*b - (k+f)*b)*dt;\n        na = clamp(na, 0., .9);\n        nb = clamp(nb, 0., .9);\n\n    //nb += 1.-smoothstep(0., .05, length(uvf-m));\n    //nb = clamp(nb, 0., 1.);\n    state.xy = vec2(na, nb);\n    state.zw = vec2(a,b);\n\n    fragColor = vec4(state);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 m = iMouse.xy/iResolution.xy;\n    if (iMouse.z == 0.){\n        m = vec2(-10.);\n    }\n\n    ivec2 uv = ivec2(fragCoord.xy);\n    vec2 uvf = fragCoord.xy/iResolution.xy;\n\n    vec4 state = texelFetch(iChannel0, uv, 0).xyzw;\n\n    float a = state.x;\n    float b = state.y;\n\n        vec4 L = Laplacian(uv, iChannel0);\n\n    float na = a + (L.x*Da - a*b*b + f*(1.-a))*dt;\n    float nb = b + (L.y*Db + a*b*b - (k+f)*b)*dt;\n        na = clamp(na, 0., .9);\n        nb = clamp(nb, 0., .9);\n\n    //nb += 1.-smoothstep(0., .05, length(uvf-m));\n    //nb = clamp(nb, 0., 1.);\n    state.xy = vec2(na, nb);\n    state.zw = vec2(a,b);\n\n    fragColor = vec4(state);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}