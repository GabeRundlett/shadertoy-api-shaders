{
    "Shader": {
        "info": {
            "date": "1685389422",
            "description": "so... shiny...",
            "flags": 0,
            "hasliked": 0,
            "id": "clcXR7",
            "likes": 7,
            "name": "shiny rings",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 171
        },
        "renderpass": [
            {
                "code": "#define FOCAL_LEN 1.\n#define iTime (iTime*5.)\n\nmat2 rotMat(float r){ return  mat2(cos(r), -sin(r), sin(r), cos(r)); }\n\nvec3 rotX(vec3 p, float r)\n{\n    p.yz *= rotMat(r); return p;\n}\n\nvec3 rotY(vec3 p, float r)\n{\n    p.xz *= rotMat(r); return p;\n}\n\nvec3 rotZ(vec3 p, float r)\n{\n    p.xy *= rotMat(r); return p;\n}\n\nstruct marchMat\n{\n    vec3 color;\n    int id;\n};\n\nstruct marchRes\n{\n    bool hit;\n    float depth;\n    vec3 pos;\n    marchMat mat;\n};\n\nvoid join(inout float a, inout marchMat amat, float b, marchMat bmat)\n{\n    if(b < a)\n    {\n        a = b;\n        amat = bmat;\n    }\n}\n\n#define join(a, b) join(d, m, a, b)\n\nvoid sub(inout float a, float b) { a = max(a, -b); }\nvoid intersect(inout float a, float b) { a = max(a, b); }\n\nvoid sjoin(inout float a, float b, float k ) // by iq\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    a = min( a, b ) - h*h*k*(1.0/4.0);\n}\n\nvoid ssub(inout float d2, float d1, float k ) // by iq\n{\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    d2 = mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nvec2 opRepLim2( in vec2 p, in float c, in vec2 l) // by iq\n{\n    return p-c*clamp(round(p/c),-l,l);\n}\n\nvec3 opRepLim3( in vec3 p, in float c, in vec3 l) // by iq\n{\n    return p-c*clamp(round(p/c),-l+1.,l);\n}\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\nfloat sdBox( vec3 p, vec3 b ) // by iq\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdBox( vec2 p, vec2 b ) // by iq\n{\n  vec2 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,q.y),0.0);\n}\n\nfloat sdBox(vec3 p, vec3 b, float r)\n{\n    return sdBox(p, b-r)-r;\n}\n\nfloat sdBox( vec2 p, vec2 b , float r) // by iq\n{\n    return sdBox(p, b-r)-r;\n}\n\nfloat sdCylinder(vec3 p, vec2 r)\n{\n    return sdBox(vec2(length(p.xz), p.y),r);\n}\n\nfloat sdCylinder(vec3 p, vec2 r, float b)\n{\n    return sdBox(vec2(length(p.xz), p.y),r-b)-b;\n}\n\nfloat sdSquareDonut(vec3 p, float r, vec2 b)\n{\n    return sdBox(vec2(length(p.xz)-r, p.y), b);\n}\n\nfloat sdSquareDonut(vec3 p, float r, vec2 b, float e)\n{\n    return sdBox(vec2(length(p.xz)-r, p.y), b, e);\n}\n\nvec3 planeIntersect(in vec3 ro, vec3 rd, float y, out bool hit)\n{\n    hit = sign(-rd.y) == sign(ro.y-y);\n    ro.xz = ro.xz+rd.xz*(y-ro.y)/rd.y;\n    return vec3(ro.x, y, ro.z);\n}\n\nfloat sceneDist(vec3 p, out marchMat m)\n{\n    float scale = 0.02;\n    p /= scale;\n    \n    float d = 1e20;\n    p = rotX(p, iTime*.1);\n    join(sdSquareDonut(p, 50., vec2(3, 5), 0.1), marchMat(vec3(0.9), 0));\n    join(sdSquareDonut(p, 49., vec2(3, 3)), marchMat(vec3(1.), 0));\n    \n    p = rotZ(p, iTime*0.2);\n    join(sdSquareDonut(p, 40., vec2(3, 5), 0.1), marchMat(vec3(0.9), 0));\n    join(sdSquareDonut(p, 39., vec2(3, 3)), marchMat(vec3(1.), 0));\n    \n    p = rotX(p, iTime*0.3);\n    join(sdSquareDonut(p, 30., vec2(3, 5), 0.1), marchMat(vec3(0.9), 0));\n    join(sdSquareDonut(p, 29., vec2(3, 3)), marchMat(vec3(1.), 0));\n    \n    p = rotZ(p, iTime*0.4);\n    join(sdSquareDonut(p, 20., vec2(3, 5), 0.1), marchMat(vec3(0.9), 0));\n    join(sdSquareDonut(p, 19., vec2(3, 3)), marchMat(vec3(1.), 0));\n    \n    p = rotX(p, iTime*0.5);\n    join(sdSquareDonut(p, 10., vec2(3, 5), 0.1), marchMat(vec3(0.9), 0));\n    join(sdSquareDonut(p, 09., vec2(3, 3)), marchMat(vec3(1.), 0));\n    \n    d *= scale;\n    \n    return d;\n}\n\nfloat sceneDist(vec3 p)\n{\n    marchMat m;\n    return sceneDist(p, m);\n}\n\nmarchRes march(vec3 ro, vec3 rd, float margin, float maxDist, int maxIt)\n{\n    float depth = 0.0;\n    vec3 cp;\n    marchRes mres;\n    for(int i = 0; i < maxIt && depth < maxDist; i++)\n    {\n        cp = ro + depth*rd;\n        float cd = sceneDist(cp, mres.mat);\n        if(cd < margin)\n        {\n            return marchRes(true, depth, cp, mres.mat);\n        }\n        depth += cd;\n    }\n    \n    return marchRes(false, depth, ro + depth*rd, mres.mat);\n}\n\nvec3 calcNormal( in vec3 p ) // by iq\n{\n    float h = 0.001;\n    #define ZERO (min(iFrame,0))\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*sceneDist(p+e*h);\n    }\n    return normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n    vec2 mouse = (iMouse.xy-iResolution.xy*0.5)/iResolution.y*step(0.01, iMouse.z)*3.0;\n\n    vec2 cr = vec2(0.*0.6154729, 0.*0.7853982+iTime*0.) - mouse.yx;\n    vec3 ro = rotY(rotX(vec3(0.1, 0.05, -2.*FOCAL_LEN-1.), cr.x), cr.y);\n    vec3 rd = rotY(rotX(normalize(vec3(uv, FOCAL_LEN)), cr.x), cr.y);\n    \n    marchRes res = march(ro, rd, 0.001, 100.0, 512);\n    vec3 n = calcNormal(res.pos);\n    float lighting = texture(iChannel0, reflect(rd, n), 2.).r;\n\n    fragColor = sqrt(vec4((mix(vec3(texture(iChannel1, rd).rgb), res.mat.color*lighting, vec3(res.hit))), 1));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}