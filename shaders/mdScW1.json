{
    "Shader": {
        "info": {
            "date": "1687653267",
            "description": "*Drag your mouse, make a spiral or something.\n\nThis is a port of my Python wave simulation project:\nhttps://github.com/bean-mhm/wave-simulation-py\n",
            "flags": 32,
            "hasliked": 0,
            "id": "mdScW1",
            "likes": 6,
            "name": "Interactive 2D Wave Simulation",
            "published": 3,
            "tags": [
                "wave",
                "simulation",
                "physics",
                "waveequation",
                "wavesim"
            ],
            "usePreview": 0,
            "username": "beans_please",
            "viewed": 315
        },
        "renderpass": [
            {
                "code": "// iChannel0 = Buffer A\n\nvec3 get_col(vec2 uv)\n{\n    // UV\n    bool inside_buf;\n    vec2 buf_uv;\n    get_buf_uv(uv, iResolution.xy, buf_uv, inside_buf);\n    if (!inside_buf)\n    {\n        return colormap(0.0) * 0.5;\n    }\n\n    // Bilinear interpolation\n    vec2 buf_coord = buf_uv * vec2(wave_grid_res);\n    float v = sample_bilinear(buf_coord, iChannel0, wave_grid_res).x;\n\n    // Color map\n    v *= 1.5;\n    vec3 col = colormap(v);\n\n    return col;\n}\n\nvoid mainImage(out vec4 frag_col, in vec2 coord)\n{\n    vec2 uv = coord / iResolution.xy;\n\n    vec3 col = get_col(uv);\n    col = pow(col, vec3(1.0 / 2.2));\n\n    frag_col = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// iChannel0 = Buffer A (self-feeding)\n\nfloat wave_initial_val(ivec2 icoord)\n{\n    return 0.0;\n}\n\nfloat wave_update_val(ivec2 icoord, float curr, float sim_time)\n{\n    // Initial pulse at the center\n    if (icoord == wave_grid_res / 2)\n    {\n        float amp = map_range_clamp(sim_time, 0.0, 0.02, 0.5, 0.0);\n        float freq = 0.5 * wave_max_frequency;\n        if (amp > 0.001)\n        {\n            return amp * sin(TWO_PI * sim_time * freq);\n        }\n    }\n\n    bool inside_buf;\n    vec2 mouse_uv;\n    get_buf_uv(iMouse.xy / iResolution.xy, iResolution.xy, mouse_uv, inside_buf);\n    vec2 mouse_coord = mouse_uv * vec2(wave_grid_res);\n\n    float mouse_prox = distance(vec2(icoord) + 0.5, mouse_coord);\n    mouse_prox /= max(float(wave_grid_res.x), float(wave_grid_res.y));\n\n    // Create disturbance with mouse\n    if (iMouse.z > 0.0)\n    {\n        curr = mix(curr, curr + iTimeDelta * wave_dt * 1000.0, map_range_clamp(mouse_prox, 0.03, 0.0, 0.0, 1.0));\n    }\n\n    return curr;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    ivec2 icoord = ivec2(fragCoord);\n\n    // Skip pixels outside the grid\n    if (icoord.x >= wave_grid_res.x || icoord.y >= wave_grid_res.y)\n        return;\n\n    // X = current value\n    // Y = previous value\n    // Z = iteration\n    vec4 data = texelFetch(iChannel0, icoord, 0);\n    float curr = data.x;\n    float prev = data.y;\n    int iter = int(data.z);\n\n    // First frame (initial values)\n    if (iter == 0 || iFrame < 1 || iTime == 0.0)\n    {\n        float v = wave_initial_val(icoord);\n        fragColor = vec4(v, v, 1.0, 0.0);\n        return;\n    }\n\n    float next_in_x = 0.0;\n    float prev_in_x = 0.0;\n    float next_in_y = 0.0;\n    float prev_in_y = 0.0;\n    if ((icoord.x + 1) < wave_grid_res.x)\n    {\n        next_in_x = texelFetch(iChannel0, icoord + ivec2(1, 0), 0).x;\n    }\n    if ((icoord.x - 1) >= 0)\n    {\n        prev_in_x = texelFetch(iChannel0, icoord + ivec2(-1, 0), 0).x;\n    }\n    if ((icoord.y + 1) < wave_grid_res.y)\n    {\n        next_in_y = texelFetch(iChannel0, icoord + ivec2(0, 1), 0).x;\n    }\n    if ((icoord.y - 1) >= 0)\n    {\n        prev_in_y = texelFetch(iChannel0, icoord + ivec2(0, -1), 0).x;\n    }\n\n    float grad_x = next_in_x - curr - curr + prev_in_x;\n    float grad_y = next_in_y - curr - curr + prev_in_y;\n\n    float acc = (grad_x + grad_y) * wave_speed2 / wave_step2;\n    float vel = (curr - prev) / wave_dt;\n    vel += (acc * wave_dt);\n    vel *= pow(wave_stiffness, -wave_dt);\n\n    prev = curr;\n    curr += (vel * wave_dt);\n\n    float sim_time = wave_dt * float(iter);\n    curr = wave_update_val(icoord, curr, sim_time);\n\n    fragColor = vec4(curr, prev, float(iter + 1), 0.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.14159265358979\n#define TWO_PI 6.28318530717959\n\n// Grid Resolution\nconst ivec2 wave_grid_res = ivec2(256, 256);\n\n// Minimum distance in the grid\nconst float wave_step = 0.01;\nconst float wave_step2 = wave_step * wave_step;\n\n// Grid dimensions\nconst vec2 wave_dims = wave_step * vec2(wave_grid_res - 1);\n\n// Propagation speed in 2D\nconst float wave_speed = 10.0;\nconst float wave_speed2 = wave_speed * wave_speed;\n\n// Minimum wavelength\n// At least 8 steps needed for a perfectly smooth spherical wave.\nconst float wave_min_wavelength = wave_step * sqrt(2.0) * 8.0;\n\n// Maximum frequency\nconst float wave_max_frequency = wave_speed / wave_min_wavelength;\n\n// Maximum timestep\nconst float wave_max_dt = wave_step / (wave_speed * sqrt(2.0));\n\n// Timestep\nconst float wave_dt = 0.95 * wave_max_dt;\n\n// Stiffness\n// Must be greater than or equal to 1 to function properly.\nconst float wave_stiffness = 15.0;\n\nfloat map_range(float inp, float inp_start, float inp_end, float out_start, float out_end)\n{\n    return out_start + ((out_end - out_start) / (inp_end - inp_start)) * (inp - inp_start);\n}\n\nfloat map_range_clamp(float inp, float inp_start, float inp_end, float out_start, float out_end)\n{\n    float t = clamp((inp - inp_start) / (inp_end - inp_start), 0.0, 1.0);\n    float v = out_start + t * (out_end - out_start);\n    return v;\n}\n\nfloat fit_to_screen(vec2 image_res, vec2 screen_res)\n{\n    return min(screen_res.x / image_res.x, screen_res.y / image_res.y);\n}\n\nvoid get_buf_uv(vec2 uv, vec2 res, out vec2 buf_uv, out bool inside_buf)\n{\n    buf_uv = uv * 2.0 - 1.0;\n    buf_uv.x *= res.x / res.y;\n    buf_uv.x *= float(wave_grid_res.y) / float(wave_grid_res.x);\n    buf_uv /= fit_to_screen(vec2(wave_grid_res) / float(wave_grid_res.y), res.xy / res.y);\n    buf_uv = (buf_uv + 1.0) / 2.0;\n    inside_buf = max(abs(buf_uv.x - 0.5), abs(buf_uv.y - 0.5)) <= 0.5;\n}\n\nbool icoord_in_bounds(ivec2 icoord, ivec2 res)\n{\n    return (icoord.x >= 0) && (icoord.x < res.x) && (icoord.y >= 0) && (icoord.y < res.y);\n}\n\nvec4 sample_bilinear(vec2 coord, sampler2D src, ivec2 src_res)\n{\n    ivec2 bottomLeftPos = ivec2(int(floor(coord.x - 0.5)), int(floor(coord.y - 0.5)));\n\n    ivec2 topRightPos = ivec2(bottomLeftPos.x + 1, bottomLeftPos.y + 1);\n\n    ivec2 bottomRightPos = ivec2(topRightPos.x, bottomLeftPos.y);\n\n    ivec2 topLeftPos = ivec2(bottomLeftPos.x, topRightPos.y);\n\n    float alongX = coord.x - (float(bottomLeftPos.x) + 0.5);\n    float alongY = coord.y - (float(bottomLeftPos.y) + 0.5);\n\n    float bottomLeftWeight = (1.0 - alongX) * (1.0 - alongY);\n    float bottomRightWeight = (alongX) * (1.0 - alongY);\n    float topLeftWeight = (1.0 - alongX) * (alongY);\n    float topRightWeight = (alongX) * (alongY);\n\n    vec4 result = vec4(0.0);\n\n    if (icoord_in_bounds(bottomLeftPos, src_res))\n        result += bottomLeftWeight * texelFetch(src, bottomLeftPos, 0);\n\n    if (icoord_in_bounds(topRightPos, src_res))\n        result += topRightWeight * texelFetch(src, topRightPos, 0);\n\n    if (icoord_in_bounds(bottomRightPos, src_res))\n        result += bottomRightWeight * texelFetch(src, bottomRightPos, 0);\n\n    if (icoord_in_bounds(topLeftPos, src_res))\n        result += topLeftWeight * texelFetch(src, topLeftPos, 0);\n\n    return result;\n}\n\n// https://www.desmos.com/calculator/n4mfhffj1n\nfloat colormap_expf(float x, float v)\n{\n    if (abs(v) < .0001) v = .0001;\n    float p = pow(2., v);\n    return (1. - pow(p, -x)) / (1. - 1. / p);\n}\n\nvec3 colormap(float x)\n{\n    float t = .18 * abs(x);\n    if (x < 0.)\n    {\n        x = -x;\n        t = -.37 - .14 * x;\n    }\n    \n    // https://www.desmos.com/calculator/sdqk904uu9\n    vec3 tone = 8. * vec3(\n        cos(6.283 * t),\n        cos(6.283 * (t - .3333)),\n        cos(6.283 * (t - .6667))\n    );\n    \n    x = smoothstep(0., 1., x);\n    vec3 c = vec3(\n        colormap_expf(x, tone.r),\n        colormap_expf(x, tone.g),\n        colormap_expf(x, tone.b)\n    );\n    \n    c = mix(c, c + vec3(.03, 0, .03), smoothstep(.1, 0., x));\n    \n    return c;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}