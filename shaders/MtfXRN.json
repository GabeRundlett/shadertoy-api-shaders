{
    "Shader": {
        "info": {
            "date": "1435472211",
            "description": "This is my first shader. It's simple, but I had fun making it.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtfXRN",
            "likes": 53,
            "name": "Tile Mosaic",
            "published": 3,
            "tags": [
                "newbie",
                "pixelate",
                "pixelize"
            ],
            "usePreview": 1,
            "username": "codywatts",
            "viewed": 5204
        },
        "renderpass": [
            {
                "code": "// \"USE_TILE_BORDER\" creates a border around each tile.\n// \"USE_ROUNDED_CORNERS\" gives each tile a rounded effect.\n// If neither are defined, it is a basic pixelization filter.\n#define USE_TILE_BORDER\n//#define USE_ROUNDED_CORNERS\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tconst float minTileSize = 1.0;\n\tconst float maxTileSize = 32.0;\n\tconst float textureSamplesCount = 3.0;\n\tconst float textureEdgeOffset = 0.005;\n\tconst float borderSize = 1.0;\n\tconst float speed = 1.0;\n\n\tfloat time = pow(sin(iTime * speed), 2.0);\n\tfloat tileSize = minTileSize + floor(time * (maxTileSize - minTileSize));\n\ttileSize += mod(tileSize, 2.0);\n\tvec2 tileNumber = floor(fragCoord / tileSize);\n\n\tvec4 accumulator = vec4(0.0);\n\tfor (float y = 0.0; y < textureSamplesCount; ++y)\n\t{\n\t\tfor (float x = 0.0; x < textureSamplesCount; ++x)\n\t\t{\n\t\t\tvec2 textureCoordinates = (tileNumber + vec2((x + 0.5)/textureSamplesCount, (y + 0.5)/textureSamplesCount)) * tileSize / iResolution.xy;\n\t\t\ttextureCoordinates.y = 1.0 - textureCoordinates.y;\n\t\t\ttextureCoordinates = clamp(textureCoordinates, 0.0 + textureEdgeOffset, 1.0 - textureEdgeOffset);\n\t\t\taccumulator += texture(iChannel0, textureCoordinates);\n\t   }\n\t}\n\t\n\tfragColor = accumulator / vec4(textureSamplesCount * textureSamplesCount);\n\n#if defined(USE_TILE_BORDER) || defined(USE_ROUNDED_CORNERS)\n\tvec2 pixelNumber = floor(fragCoord - (tileNumber * tileSize));\n\tpixelNumber = mod(pixelNumber + borderSize, tileSize);\n\t\n#if defined(USE_TILE_BORDER)\n\tfloat pixelBorder = step(min(pixelNumber.x, pixelNumber.y), borderSize) * step(borderSize * 2.0 + 1.0, tileSize);\n#else\n\tfloat pixelBorder = step(pixelNumber.x, borderSize) * step(pixelNumber.y, borderSize) * step(borderSize * 2.0 + 1.0, tileSize);\n#endif\n\tfragColor *= pow(fragColor, vec4(pixelBorder));\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}