{
    "Shader": {
        "info": {
            "date": "1656434439",
            "description": "simple test to get bounds for cut spheres (for use in a voxel engine) - mousebutton = sidecam\ncutting now uses a signed cut value so it can cut top->bottom or bottom->top",
            "flags": 0,
            "hasliked": 0,
            "id": "ssdBW8",
            "likes": 8,
            "name": "boundtesting",
            "published": 3,
            "tags": [
                "sphere",
                "box",
                "cut",
                "bounds"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 294
        },
        "renderpass": [
            {
                "code": "// doing some simple bounds testing (for voxel engine)\n// cut sphere distance funcs by IQ:\n// https://www.shadertoy.com/view/7tVXRt\n// https://www.shadertoy.com/view/stKSzc\n\nfloat sdCutHollowSphere( vec3 p, float r, float h, float t )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    float w = sqrt(r*r-h*h);\n    return ((h*q.x<w*q.y) ? length(q-vec2(w,h)) : \n                            abs(length(q)-r) ) - t;\n}\n\nfloat sdCutSphere( in vec3 p, in float r, in float h )\n{\n    float w = sqrt(r*r-h*h); // constant for a given shape\n    vec2 q = vec2( length(p.xz), p.y );\n    float s = max( (h-r)*q.x*q.x+w*w*(h+r-2.0*q.y), h*q.x-w*q.y );\n    return (s<0.0) ? length(q)-r :\n           (q.x<w) ? h - q.y     :\n                     length(q-vec2(w,h));\n}\n\nfloat sdBoundingBox( vec3 p, vec3 b, float e)\n{\n  p = abs(p)-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\n// pos, rad, signed cutvalue (-1.0 to 1.0), hollow flag\nfloat cutspheretest(vec3 pos, float rad, float scut, bool hollow)\n{\n    //scut = sin(iTime*0.5); // test cut\n    float s = scut<0.0 ? -1.0 : 1.0;\n    scut = abs(scut);\n\n    float plane = -((scut-0.5)*(rad*2.0));\n    float d = 0.0;\n    float thick = 0.0;\n    if (hollow)\n    {\n        thick = .1;\n        d = sdCutHollowSphere(pos*s,rad,plane,thick);\n    }\n    else\n    {\n        d = sdCutSphere(pos*-s,rad,-plane);\n    }\n\n    // bounding box distance\n    float h = (plane+rad)*0.5;\n    float yoff = rad-h;\n    yoff*=s;\n\n    vec3 bbmid = vec3(0.0,yoff,0.0);\n    vec3 bbsize = vec3(rad,h,rad)+thick;\n    float d2 = sdBoundingBox(pos+bbmid,bbsize,0.025);\n    return min(d,d2);\n}\n\n\nfloat map( in vec3 pos )\n{\n    float rad = 2.0;\n    float scut = sin(iTime*0.9); // signed normalized cut value\n    float d1 = cutspheretest(pos+vec3(2.5,0.0,0.0),rad,scut,false);\n    scut = sin(iTime*0.6); // signed normalized cut value\n    float d2 = cutspheretest(pos+vec3(-2.5,0.0,0.0),rad,scut,true);\n    return min(d1,d2);\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.001;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n    \n#define AA 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = 0.5*iTime;\n    \n    float yy = 4.0;\n    if (iMouse.z>0.5)\n        yy=0.0;\n    \n\tvec3 ro = vec3( 9.*cos(an), yy, 9.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.8*ww );\n\n        // raymarch\n        const float tmax = 30.0;\n        float t = 0.0;\n        for( int i=0; i<128; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos);\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n    \n        // shading/lighting\n        float v = 1.0-abs(p.y);\n        vec3 col = vec3(v*0.1);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            float dif = clamp( dot(nor,vec3(0.7,0.6,0.4)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,0.8,0.6));\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.7,0.5)*dif;\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}