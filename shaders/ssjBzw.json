{
    "Shader": {
        "info": {
            "date": "1645909199",
            "description": "CC0: Twitch stream hacking\nI have begun twitch streaming a bit of shader hacking with an old friend \nthat wants to learn some shader tricks. \n",
            "flags": 0,
            "hasliked": 0,
            "id": "ssjBzw",
            "likes": 13,
            "name": "Twitch shader bars",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 279
        },
        "renderpass": [
            {
                "code": "// CC0: Twitch shader bars\n// I have begun twitch streaming a bit of shader hacking with an old friend \n// that wants to learn some shader tricks. \n// We have been looking to recreate classic rasterbars in shaders as a learning experience\n// Ofc with shaders we are not as limited as we were in the 90s\n// This was my result from the stream\n\n// Nothing complicated but I thought it turned out appealing so sharing.\n\n#define RESOLUTION iResolution\n#define TIME       iTime\n\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst int bars = 14;\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nfloat sRGB(float t) { return mix(1.055*pow(t, 1./2.4) - 0.055, 12.92*t, step(t, 0.0031308)); }\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(in vec3 c) { return vec3 (sRGB(c.x), sRGB(c.y), sRGB(c.z)); }\n\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n\nvec4 rasterbar(vec2 p, float bf, float aa, float z) {\n  p = p.yx;\n  \n  const float hw = 0.2;\n  float d = abs(p.y) - hw;\n  float x = p.y/hw;\n  \n  float df = sqrt(max(1.0-x*x, 0.0));\n  vec3 col = hsv2rgb(vec3(bf, df, smoothstep(0.2, 0.9, z*abs(p.x))*(1.0-0.5*df)));\n  col = mix(vec3(1.0), col, mix(0.0, 1.0, exp(-1.*max((1.0-bf-0.1), 0.0))));\n  \n  float t = smoothstep(aa, -aa, d);\n  return vec4(col, t);\n}\n\nvec3 alphaBlend(vec3 bg, vec4 fg) {\n  return mix(bg, fg.xyz, fg.w);\n}\n\nfloat offset(float tm) {\n  return 1.5*sin(tm)*mix(0.25, 1.0, 0.5+0.5*sin(sqrt(0.5)*tm*0.2));\n}\n\nfloat doffset(float tm) {\n  const float eps = 0.01; \n  return (offset(tm+eps)-offset(tm-eps))/(2.0*eps);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float aa = 2.0/RESOLUTION.y;\n\n  vec3 col = vec3(1.0);\n  \n  for (int i = 0; i < bars; ++i) {\n    vec2 pp = p;\n    float ii = float(i);\n    float bf = ii/float(bars);\n    float itime = TIME + 0.2*ii;\n//    pp *= ROT(0.5*itime);\n    float off = offset(itime); \n    float doff = doffset(itime); \n    float zo = mix(0.5, 1.0, (bf));\n    pp /= zo;\n    pp.x += off; \n    pp *= ROT(0.2*doff);\n    float zi = max(length(pp)-0.2, 0.0); \n    pp /= zi;\n\n    vec4 rcol = rasterbar(pp, bf, aa*zi*zo, zi);\n    col = alphaBlend(col, rcol);\n  }\n  \n  col = mix(vec3(1.0), col, smoothstep(0.5, 3.0, TIME));\n  col = sRGB(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}