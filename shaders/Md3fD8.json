{
    "Shader": {
        "info": {
            "date": "1524856965",
            "description": "Reference: \n[url]http://mathworld.wolfram.com/Hammer-AitoffEqual-AreaProjection.html[/url]\n[url]http://paulbourke.net/geometry/transformationprojection/[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "Md3fD8",
            "likes": 2,
            "name": "Hammer-Aitoff Projection",
            "published": 3,
            "tags": [
                "transformation",
                "hammeraitoff"
            ],
            "usePreview": 0,
            "username": "xiaoxumeng",
            "viewed": 596
        },
        "renderpass": [
            {
                "code": "/** \n * Cubemap / Equirectangular to Hammer-Aitoff map projection by Xiaoxu Meng (mengxiaoxu.com)\n * Link to demo: https://www.shadertoy.com/view/Md3fD8\n * xiaoxumeng @ ShaderToy, CC0, free code\n * \n * The converts a cubemap / panorama to Hammer-Aitoff map projection as in \n * http://paulbourke.net/geometry/transformationprojection/\n *\n * Related ShaderToy project:\n * [1] starea. Unified Gnomonic & Stereographic https://www.shadertoy.com/view/ldBczm\n * [2] starea. Cubemap to Gnomonic Projection. https://www.shadertoy.com/view/4sjcz1\n *\n *\n * Last updated: 4/27/2018\n *\n **/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 newuv = uv * 2.0 - 1.0;\n    float z2 = 1.0 - newuv.x * newuv.x * 0.5 - newuv.y * newuv.y * 0.5;\n    \n    float longitude = 2.0 * atan(newuv.x * sqrt(z2) / sqrt(2.0 * z2 - 1.0));\n    longitude = longitude / PI2 + 0.5;\n    \n    float latitude = asin(newuv.y * sqrt(z2));\n    latitude = (latitude + PI_2) / PI;\n    \n    vec2 xy = vec2(longitude, latitude);\n    \n    vec2 newCoord = (iMouse.z > 0.0) ? uv:xy;\n    fragColor = texture(iChannel0, newCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float theta = uv.y * PI;\n\tfloat phi   = uv.x * PI * 2.0;\n    vec3 dir = vec3(sin(theta) * sin(phi), cos(theta), sin(theta) * cos(phi));\n\tfragColor = texture(iChannel0, dir);\n    \n#if DEBUG\n    if (uv.x > 0.5) {\n        if (uv.y > 0.5) {\n            fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        } else {\n            fragColor = vec4(0.0, 1.0, 0.0, 1.0);\n        }\n    } else {\n        if (uv.y > 0.5) {\n            fragColor = vec4(1.0, 0.0, 1.0, 1.0);\n        } else {\n            fragColor = vec4(0.0, 0.0, 1.0, 1.0);\n        }\n    }\n#endif\n            \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define DEBUG 0\n\nconst float PI = 3.14159265358979323846;\nconst float PI2 = PI * 2.0;\nconst float PI_2 = PI * 0.5;\n\nfloat sinc(float x) {\n    return (abs(x) < 1e-4) ? 1.0 : (sin(x)/x);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}