{
    "Shader": {
        "info": {
            "date": "1498992538",
            "description": "Partly synchronized close formation flying over Voronoi islands (mouse enabled)",
            "flags": 0,
            "hasliked": 0,
            "id": "XdBBRR",
            "likes": 8,
            "name": "Island Flight",
            "published": 3,
            "tags": [
                "voronoi",
                "hexagon",
                "bird"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 660
        },
        "renderpass": [
            {
                "code": "// \"Island Flight\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nvec2 Rot2D (vec2 q, float a);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nvec3 Noisev3v2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 flPos, sunDir, qHit;\nvec2 gVec[7], hVec[7], gId;\nfloat tCur, dstFar, szFac, vbOff, wngAng, gRand;\nint idObj;\nconst int idWing = 21, idBdy = 22, idEye = 23, idBk = 24;\nconst float pi = 3.14159;\n\n#define SQRT3 1.73205\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./SQRT3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (SQRT3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvoid HexVorInit ()\n{\n  vec3 e = vec3 (1., 0., -1.);\n  gVec[0] = e.yy;\n  gVec[1] = e.xy;\n  gVec[2] = e.yx;\n  gVec[3] = e.xz;\n  gVec[4] = e.zy;\n  gVec[5] = e.yz;\n  gVec[6] = e.zx;\n  for (int k = 0; k < 7; k ++) hVec[k] = HexToPix (gVec[k]);\n}\n\nvec4 HexVor (vec2 p)\n{\n  vec4 sd, udm;\n  vec2 ip, fp, d, u;\n  float amp, a;\n  amp = 0.7;\n  ip = PixToHex (p);\n  fp = p - HexToPix (ip);\n  sd = vec4 (4.);\n  udm = vec4 (4.);\n  for (int k = 0; k < 7; k ++) {\n    u = Hashv2v2 (ip + gVec[k]);\n    a = 2. * pi * (u.y - 0.5);\n    d = hVec[k] + amp * (0.4 + 0.6 * u.x) * vec2 (cos (a), sin (a)) - fp;\n    sd.w = dot (d, d);\n    if (sd.w < sd.x) {\n      sd = sd.wxyw;\n      udm = vec4 (d, u);\n    } else sd = (sd.w < sd.y) ? sd.xwyw : ((sd.w < sd.z) ? sd.xyww : sd);\n  }\n  sd.xyz = sqrt (sd.xyz);\n  return vec4 (SmoothMin (sd.y, sd.z, 0.1) - sd.x, udm.xy, Hashfv2 (udm.zw));\n}\n\nfloat GrndHt (vec2 p)\n{\n  vec4 sv;\n  float h1, h2, r, s;\n  r = 0.2 * length (Noisev3v2 (0.3 * p));\n  sv = HexVor (0.05 * p + r);\n  s = (0.8 + 0.5 * sv.w);\n  h1 = s * smoothstep (0.1, 0.4 + 0.1 * sv.w, sv.x);\n  h2 = 2. * s * smoothstep (0.2, 0.4 + 0.1 * sv.w, max (0.,\n     (0.45 - dot (sv.yz, sv.yz))));\n  return 3. * SmoothMax (h1, h2, 0.4) - 0.5;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  dHit = dstFar;\n  if (rd.y < 0.) {\n    s = - (ro.y - 6.) / rd.y;\n    sLo = s;\n    for (int j = 0; j < 150; j ++) {\n      p = ro + s * rd;\n      h = p.y - GrndHt (p.xz);\n      if (h < 0.) break;\n      sLo = s;\n      s += max (0.2, 0.4 * h);\n      if (s > dstFar) break;\n    }\n    if (h < 0.) {\n      sHi = s;\n      for (int j = 0; j < 5; j ++) {\n        s = 0.5 * (sLo + sHi);\n        p = ro + s * rd;\n        if (p.y > GrndHt (p.xz)) sLo = s;\n        else sHi = s;\n      }\n      dHit = 0.5 * (sLo + sHi);\n    }\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  vec2 e = vec2 (0.01, 0.);\n  float h;\n  h = GrndHt (p.xz);\n  return normalize (vec3 (h - GrndHt (p.xz + e.xy), e.x, h - GrndHt (p.xz + e.yx)));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qh;\n  float wSegLen, wChord, wSpar, fTap, tFac, bkLen, dMin, d, dd, a, wr, wf, tr, u;\n  p /= szFac;\n  wSegLen = 0.15;\n  wChord = 0.3;\n  wSpar = 0.03;\n  fTap = 8.;\n  bkLen = 0.2;\n  tFac = (1. - 1. / fTap);\n  dMin = dstFar / szFac;\n  q = p;\n  q.z -= 0.3;\n  q.x = abs (q.x) - 0.1;\n  wf = 1.;\n  a = wngAng;\n  d = dMin;\n  qh = q;\n  for (int k = 0; k < 5; k ++) {\n    q.xy = Rot2D (q.xy, a);\n    q.x -= wSegLen;\n    wr = wf * (1. - 0.5 * q.x / (fTap * wSegLen));\n    dd = PrFlatCylDf (q.zyx, wr * wChord, wr * wSpar, wSegLen);\n    if (k < 4) {\n      q.x -= wSegLen;\n      dd = min (dd, PrCapsDf (q, wr * wSpar, wr * wChord));\n    } else {\n      q.x += wSegLen;\n      dd = max (dd, PrCylDf (q.xzy, wr * wChord, wSpar));\n      dd = min (dd, max (PrTorusDf (q.xzy, 0.98 * wr * wSpar,\n         wr * wChord), - q.x));\n    }\n    if (dd < d) { d = dd;  qh = q; }\n    a *= 1.03;\n    wf *= tFac;\n  }\n  if (d < dMin) { dMin = min (dMin, d);  idObj = idWing;  qHit = qh; }\n  q = p;\n  wr = q.z;\n  if (wr > 0.5) {\n    u = (wr - 0.5) / 0.5;\n    tr = 0.17 - 0.11 * u * u;\n  } else {\n    u = clamp ((wr - 0.5) / 1.5, -1., 1.);\n    u *= u;\n    tr = 0.17 - u * (0.34 - 0.18 * u); \n  }\n  d = PrCapsDf (q, tr, 1.);\n  if (d < dMin) {\n    dMin = d;  idObj = idBdy;  qHit = q;\n  }\n  q = p;\n  q.x = abs (q.x);\n  wr = (wr + 1.) * (wr + 1.);\n  q -= vec3 (0.3 * wr, 0.1 * wr, -1.2);\n  d = PrCylDf (q, 0.009, 0.2);\n  if (d < dMin) { dMin = min (dMin, d);  idObj = idBdy;  qHit = q; }\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.08, 0.05, 0.9);\n  d = PrSphDf (q, 0.04);\n  if (d < dMin) { dMin = d;  idObj = idEye;  qHit = q; }\n  q = p;\n  q -= vec3 (0., -0.015, 1.15);\n  wr = clamp (0.5 - 0.3 * q.z / bkLen, 0., 1.);\n  d = PrFlatCylDf (q, 0.2 * wr * bkLen, 0.2 * wr * bkLen, bkLen);\n  if (d < dMin) { dMin = d;  idObj = idBk;  qHit = q; }\n  return 0.8 * szFac * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP, rs;\n  float dHit, d, s, f;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., SQRT3);\n  edN[2] = 0.5 * vec2 (1., - SQRT3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = 1. / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  rs = ro.xz - flPos.xz;\n  vf = (SQRT3/2.) - vec3 (dot (rs, edN[0]), dot (rs, edN[1]), dot (rs, edN[2]));\n  pM = HexToPix (PixToHex (rs));\n  gIdP = vec2 (-10.);\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n    s = min (hv.x, min (hv.y, hv.z));\n    p = ro - flPos + dHit * rd;\n    gId = PixToHex (p.xz);\n    if (max (max (abs (gId.x), abs (gId.y)), abs (gId.x + gId.y)) <= 4.) {\n      if (gId.x != gIdP.x || gId.y != gIdP.y) {\n        f = SmoothBump (0.2, 0.7, 0.1, mod (0.03 * tCur, 1.));\n        gRand = Hashfv2 (gId);\n        wngAng = -0.1 + 0.2 * sin (5. * tCur + 0.3 * pi * (length (gId) +\n           f * (gRand - 0.5)) * f);\n        gIdP = gId;\n      }\n      p.y += vbOff * gRand - 0.5;\n      p.xz -= HexToPix (gId);\n      d = ObjDf (p);\n    } else d = dstFar;\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + 0.01;\n      pM += SQRT3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n    }\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  if (d >= 0.001) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  p -= flPos;\n  p.y += vbOff * gRand - 0.5;\n  p.xz -= HexToPix (gId);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 SkyBg (vec3 rd)\n{\n  return vec3 (0.1, 0.2, 0.5) + 0.1 * pow (1. - max (rd.y, 0.), 4.);\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float sd, f;\n  ro.x += 0.5 * tCur;\n  f = Fbm2 (0.05 * (rd.xz * (100. - ro.y) / rd.y + ro.xz));\n  sd = pow (max (dot (rd, sunDir), 0.), 64.);\n  col = SkyBg (rd) + (0.35 * sd + 0.65 * min (pow (sd, 4.), 0.3)) *\n     vec3 (1., 1., 0.3);\n  return mix (col, vec3 (0.85), clamp (f * rd.y + 0.1, 0., 1.));\n}\n\nvec4 BirdCol (vec3 n)\n{\n  vec3 col;\n  float gw, w, spec;\n  spec = 0.2;\n  if (idObj == idWing) {\n    gw = 0.3 * szFac;\n    w = mod (qHit.x, gw);\n    w = SmoothBump (0.15 * gw, 0.65 * gw, 0.1 * gw, w);\n    col = mix (vec3 (1.), vec3 (0.1), w);\n    col *= (gRand > 0.5) ? vec3 (1., 0., 0.) : vec3 (1., 1., 0.);\n  } else if (idObj == idEye) {\n    col = vec3 (0., 0., 0.6);\n    spec = 0.7;\n  } else if (idObj == idBdy) {\n    col = mix (mix (vec3 (1., 0.8, 0.8), vec3 (0.05, 0.2, 0.05),\n       smoothstep (0.5, 1., n.y)), vec3 (0., 0., 0.8),\n       1. - smoothstep (-1., -0.3, n.y));\n  } else if (idObj == idBk) {\n    col = vec3 (1., 0.4, 0.1);\n  }\n  return vec4 (col, spec);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 vn, col;\n  float dstObj, dstGrnd, f;\n  HexVorInit ();\n  dstGrnd = GrndRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  if (dstGrnd < min (dstObj, dstFar)) {\n    ro += dstGrnd * rd;\n    if (ro.y > 0.1) {\n      vn = VaryNf (1.3 * ro, GrndNf (ro), 5.);\n      f = clamp (0.7 * Noisefv2 (ro.xz) - 0.3, 0., 1.);\n      col = mix (mix (vec3 (0.4, 0.3, 0.3), vec3 (0.5, 0.5, 0.6), f),\n         mix (vec3 (0.3, 0.7, 0.3), vec3 (0.5, 0.6, 0.1), f),\n         (0.1 + 0.9 * smoothstep (0.1, 0.2, ro.y)) *\n         clamp (1.2 * vn.y - 0.2, 0.2, 1.)) *\n         (0.2 + 0.2 * max (dot (vn, - vec3 (sunDir.x, 0., sunDir.z)), 0.) +\n         0.8 * max (0., max (dot (vn, sunDir), 0.))) +\n         0.1 * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.);\n    } else {\n      vn = VaryNf (5.1 * ro, vec3 (0., 1., 0.), 0.2);\n      rd = reflect (rd, vn);\n      col = mix (vec3 (0.15, 0.2, 0.15), vec3 (0.1, 0.1, 0.2), Fbm2 (ro.xz));\n      col = mix (col, 0.8 * SkyCol (ro, rd), smoothstep (0.8, 0.95,\n          1. - pow (dot (rd, vn), 3.)));\n    }\n    col = mix (col, SkyBg (rd), max (pow (dstGrnd / dstFar, 4.) - 0.1, 0.));\n  } else if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col4 = BirdCol (vn);\n    col = col4.rgb * (0.2 + 0.8 * max (dot (sunDir, vn), 0.)) +\n       col4.a * pow (max (dot (normalize (sunDir - rd), vn), 0.), 128.);\n  } else col = SkyCol (ro, rd);\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, vd, u;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el, f, flyVel, t;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  rd = normalize (vec3 (uv, 1.5));\n  szFac = 0.5;\n  flyVel = 5.;\n  flPos = vec3 (0., 16., flyVel * tCur);\n  vbOff = 2. * cos (0.1 * tCur);\n  ro = vec3 (0., 2., -8.);\n  if (mPtr.z > 0.) {\n    el = 0.6 * pi * mPtr.y;\n    az = 2.1 * pi * mPtr.x;\n  } else {\n    t = mod (0.03 * tCur, 2.);\n    el = 0.2 * pi * sign (t - 1.) * SmoothBump (0.25, 0.75, 0.2, mod (t, 1.));\n    az = pi * sin (0.005 * 2. * pi * tCur);\n  }\n  ro.yz = Rot2D (ro.yz, el);\n  ro.xz = Rot2D (ro.xz, az);\n  ro += flPos;\n  vd = normalize (flPos + vec3 (0., -8. * sin (el), 0.) - ro);\n  u = - vd.y * vd;\n  f = 1. / sqrt (1. - vd.y * vd.y);\n  vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n  rd = vuMat * rd;\n  sunDir = normalize (vec3 (cos (0.01 * tCur), 1., - sin (0.01 * tCur)));\n  dstFar = 200.;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  return max (length (p.xy - vec2 (rhi *\n     clamp (p.x / rhi, -1., 1.), 0.)) - rlo, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, cHashA3.xy)) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  const vec2 cHashVA2 = vec2 (37.1, 61.7);\n  const vec2 e = vec2 (1., 0.);\n  return fract (sin (vec2 (dot (p + e.yy, cHashVA2),\n     dot (p + e.xy, cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nvec3 Noisev3v2 (vec2 p)\n{\n  vec4 h;\n  vec3 g;\n  vec2 ip, fp, ffp;\n  ip = floor (p);\n  fp = fract (p);\n  ffp = fp * fp * (3. - 2. * fp);\n  h = Hashv4f (dot (ip, cHashA3.xy));\n  g = vec3 (h.y - h.x, h.z - h.x, h.x - h.y - h.z + h.w);\n  return vec3 (h.x + dot (g.xy, ffp) + g.z * ffp.x * ffp.y,\n     30. * fp * fp * (fp * fp - 2. * fp + 1.) * (g.xy + g.z * ffp.yx));\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n)) * (1. / 1.9375);\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}