{
    "Shader": {
        "info": {
            "date": "1697179442",
            "description": "draw some complex mappings in happy colours",
            "flags": 0,
            "hasliked": 0,
            "id": "DdtfWN",
            "likes": 2,
            "name": "Complex Mappings",
            "published": 3,
            "tags": [
                "plane",
                "complex",
                "colours",
                "mappings"
            ],
            "usePreview": 0,
            "username": "danzabarr",
            "viewed": 188
        },
        "renderpass": [
            {
                "code": "\n// Multiply complex numbers a and b\nvec2 complexMultiply(vec2 a, vec2 b) {\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\n// Divide complex number a by b\nvec2 complexDivide(vec2 a, vec2 b) {\n    float denom = b.x * b.x + b.y * b.y;\n    return vec2((a.x * b.x + a.y * b.y) / denom, (a.y * b.x - a.x * b.y) / denom);\n}\n\n// Calculate the complex conjugate of a\nvec2 complexConjugate(vec2 a) {\n    return vec2(a.x, -a.y);\n}\n\n// Raise complex number a to the power of n\nvec2 complexPower(vec2 a, float n) {\n    float r = length(a);\n    float theta = atan(a.y, a.x);\n    float newR = pow(r, n);\n    float newTheta = theta * n;\n    return newR * vec2(cos(newTheta), sin(newTheta));\n}\n\n// Calculate cos(z) for complex number z\nvec2 complexCos(vec2 z) {\n    return vec2(cos(z.x) * cosh(z.y), -sin(z.x) * sinh(z.y));\n}\n\n// Calculate sin(z) for complex number z\nvec2 complexSin(vec2 z) {\n    return vec2(sin(z.x) * cosh(z.y), cos(z.x) * sinh(z.y));\n}\n\n// Calculate exp(z) for complex number z\nvec2 complexExp(vec2 z) {\n    float r = exp(z.x);\n    return float(r) * vec2(cos(z.y), sin(z.y));\n}\n\n// Calculate log(z) for complex number z\n// This returns the principal value\nvec2 complexLog(vec2 z) {\n    float r = float(length(z));\n    float theta = atan(z.y, z.x);  // in range [-pi, pi]\n    return vec2(log(r), theta);\n}\n\n// Convert a vec3 from hsv to rgb colour space\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// Convert 2D vector from cartesian (x,y) to polar (r, theta) coordinates\nvec2 toPolar(vec2 cartesian)\n{\n    float radius = length(cartesian);\n    float theta = atan(cartesian.y, cartesian.x) / 3.1415926535 / 2.0; // normalize to [0,1]\n    \n    // wrap theta\n    theta -= floor(theta);\n    theta += 1.0;\n    theta -= floor(theta);\n    \n    return vec2(radius, theta);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // complex number z as a vec2\n    vec2 z = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;  // Centered and aspect-corrected\n    \n    \n    // ------- ADD YOUR MAPPING HERE ---------\n    // Map z to a complex function\n    \n    //z = complexPower(z, 2.0);\n\n    z = complexMultiply(z, complexCos(complexDivide(vec2(cos(iTime), sin(iTime)), z)));\n    \n    //z = complexMultiply(z, complexExp(complexDivide(vec2(cos(iTime), sin(iTime)), complexPower(z, 2.0) ) ));\n    \n    //z = complexDivide(vec2(1,1), z);\n    \n    //z += vec2(0.5,0.5);\n    // -----------------------------------------\n    \n    \n    \n    // Convert Cartesian to polar coordinates\n    vec2 polar = toPolar(z);\n    \n    // convert hsv to rgb\n    vec3 hsv = vec3(polar.y, 1.0, polar.x);\n    vec3 rgb = hsv2rgb(hsv);\n\n    // Output to screen\n    fragColor = vec4(rgb, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}