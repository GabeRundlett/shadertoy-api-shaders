{
    "Shader": {
        "info": {
            "date": "1563416328",
            "description": "poisson disk point generation, is there an easy way to generate a blue noise texture from this? it seems to have similar properties",
            "flags": 32,
            "hasliked": 0,
            "id": "WtlXRS",
            "likes": 10,
            "name": "poisson disk generation",
            "published": 3,
            "tags": [
                "poisson",
                "disk",
                "generation"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 1957
        },
        "renderpass": [
            {
                "code": "//Ethan Alexander Shulman https://xaloez.com/\n\nvoid mainImage( out vec4 o, in vec2 u)\n{\n    o = vec4(max(0.,texelFetch(iChannel0,ivec2(u),0).x));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Buf A - Point generation\n\n/*Copyright 2019 Ethan Alexander Shulman\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.*/\n\n\nvoid mainImage( out vec4 o, in vec2 u)\n{\n    if (iFrame == 0) {\n    \t//initialize with random jittered points\n        o = vec4(hash(u.xyxy+2.87234).xy,0,0);\n    \treturn;\n    }\n\n    vec2 p = texelFetch(iChannel0,ivec2(u),0).xy;\n    if (iFrame > 502) {\n    \to = vec4(p,0,0);\n        return;    \n    }\n    \n    vec2 a = floor(u)+(dot(p.xy,vec2(1))>=0.?p.xy:vec2(.5));\n    float md = 1e8;\n    vec2 cdir;\n    //find nearest point\n    for (int y = -RI; y < RI+1; y++) {\n        for (int x = -RI; x < RI+1; x++) {\n            if (x == 0 && y == 0) continue;\n            ivec2 ru = ivec2(u)+ivec2(x,y);\n            vec2 c = texelFetch(iChannel0,pmod(ru,ivec2(iResolution.xy)),0).xy;\n            if (dot(c.xy,vec2(1)) >= 0.) {\n                vec2 dir = a-(vec2(ru)+c.xy);\n                float len = length(dir);\n                if (len < md) {\n                    md = len;\n                    cdir = dir;\n                }\n            }\n        }\n    }\n\n    if (iFrame%4 < 3) {\n        if (dot(p.xy,vec2(1)) >= 0.) {\n\t\t\t//remove point if within poisson radius\n            if (md < POISSON_RADIUS && atan(cdir.y,cdir.x)*(float(iFrame%2)*2.-1.) >= 0.) p = vec2(-1);\n        }\n    } else {\n        if (dot(p.xy,vec2(1)) < 0.) {\n        \t//chance to add random point if outside poisson radius\n            if (md > POISSON_RADIUS) {\n                vec4 h = hash(u.yxyx*.263674+float(iFrame)*vec4(.027384,.278219,.728374,.8723));\n                p = h.xy*clamp((h.z-(1.-1./POISSON_RADIUS))*1e6,-1.,1.);\n            }\n        }\n    }\n    o = vec4(p,0,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Buf B - Draw point\n\nvoid mainImage( out vec4 o, in vec2 u)\n{\n    float v = 1e8;\n    for (int y = -1; y < 2; y++) {\n        for (int x = -1; x < 2; x++) {\n            vec2 p = texelFetch(iChannel0,pmod(ivec2(u)+ivec2(x,y),ivec2(iResolution.xy)),0).xy;\n            if (dot(p,vec2(1)) >= 0.) v = min(v,length(.5-(vec2(x,y)+p.xy)));\n        }\n    }\n    o = vec4(1.-v,0,0,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define POISSON_RADIUS 5.\n#define RI (int(POISSON_RADIUS+.99))\n\nvec4 hash(vec4 a) {\n\treturn fract(abs(sin(a.ywxz*766.345)+cos(normalize(a)*4972.92855))*2048.97435+abs(a.wxyz)*.2735);\n}\n\nivec2 pmod(ivec2 v, ivec2 m) {\n \tif (v.x < 0) v.x = m.x-1-(-v.x)%m.x;\n    else v.x %= m.x;\n    if (v.y < 0) v.y = m.y-1-(-v.y)%m.y;\n    else v.y %= m.y;\n    return v;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}