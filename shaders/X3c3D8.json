{
    "Shader": {
        "info": {
            "date": "1716389502",
            "description": "Inspired from Alan Wolfe's SEED presentation: https://www.youtube.com/watch?v=tethAU66xaA",
            "flags": 32,
            "hasliked": 0,
            "id": "X3c3D8",
            "likes": 2,
            "name": "1D golden ratio blue noise",
            "published": 3,
            "tags": [
                "sampling",
                "bluenoise",
                "goldenratio"
            ],
            "usePreview": 0,
            "username": "Razakhel",
            "viewed": 105
        },
        "renderpass": [
            {
                "code": "// Blue noise sampling from https://www.youtube.com/watch?v=tethAU66xaA\n// See buffer B for the actual algorithm\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv   = fragCoord / iResolution.xy;\n    fragColor = vec4(texture(iChannel0, uv).rgb, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This buffer only serves as state storage\n// A single pixel is used to store the current seed\n// State storage example taken from https://www.shadertoy.com/view/MddGzf\n\nconst float GoldenRatio = 1.6180339887498948482;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Ignoring everything outside the very first fragment\n    if (fragCoord.x > 1.0 || fragCoord.y > 1.0)\n        discard;\n        \n    if (iFrame == 0) {\n        fragColor = vec4(vec3(0.0), 1.0);\n        return;\n    }\n        \n    float seed = texelFetch(iChannel0, ivec2(0, 0), 0).r;\n    seed       = fract(seed + GoldenRatio);\n    // In 2D, adding vec2(GoldenRatio * 5.123, GoldenRatio * 10.456) seems to give\n    //  relatively coherent results, although really not that good\n\n    fragColor = vec4(seed, 0.0, 0.0, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float seed       = texelFetch(iChannel0, ivec2(0, 0), 0).r;\n    float scaledSeed = seed * iResolution.x;\n\n    if (floor(scaledSeed) == floor(fragCoord.x))\n        fragColor = vec4(vec3(1.0), 1.0);\n    else\n        fragColor = vec4(texelFetch(iChannel1, ivec2(fragCoord), 0).rgb, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}