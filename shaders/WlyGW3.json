{
    "Shader": {
        "info": {
            "date": "1579979581",
            "description": "I wasn't sure how to obtain distance on 2d section, but it seems okay to just use usual 3d distance.\nThis only leads to under-estimation, so, for example, when torus is tilted, there is more blur to it.",
            "flags": 0,
            "hasliked": 0,
            "id": "WlyGW3",
            "likes": 4,
            "name": "2D section of rotating torus",
            "published": 3,
            "tags": [
                "2d",
                "torus"
            ],
            "usePreview": 0,
            "username": "hiogawa",
            "viewed": 360
        },
        "renderpass": [
            {
                "code": "//\n// 2D Section of Rotating Torus\n//\n\n#define M_PI 3.14159\n\nfloat AA = 2.0;\nfloat SCALE_TIME = 0.6;\nvec2  UV_CENTER = vec2(0.0, 0.0);\nfloat UV_HEIGHT = 3.2;\n\nfloat TORUS_R1 = 1.0;\nfloat TORUS_R2 = 0.35;\nvec3  TORUS_ROT_VELOCITY = vec3(M_PI, 0.0, M_PI * 2.5 / 2.0);\nvec4  TORUS_COLOR = vec4(vec3(0.95, 1.0, 1.0), 0.8);\n\nfloat CHECKER_SCALE = 1.0;\nvec3  CHECKER_COLOR0 = vec3(0.1);\nvec3  CHECKER_COLOR1 = vec3(0.2);\n\n\n// Torus boundary given by\n//   q(u, v) = R_{z, u} (r1 e1 + R_{y, v} (r2 e1))\nfloat signedDistanceToTorus(vec3 p, float r1, float r2) {\n  return length(vec2(length(p.xy) - r1, p.z)) - r2;\n}\n\nfloat signedDistanceToChecker(vec2 uv, float scale) {\n  uv *= scale;\n  vec2 uvi = floor(uv);\n  vec2 uvf = uv - uvi;\n  float dist = min(min(min(uvf.x, uvf.y), 1.0 - uvf.x), 1.0 - uvf.y);\n  dist /= scale;\n  bool is_even_spot = mod(uvi.x + uvi.y, 2.0) == 0.0;\n  return is_even_spot ? -dist : dist;\n}\n\nmat2 rot2(float t) {\n  return mat2(cos(t), sin(t), -sin(t), cos(t));\n}\n\nmat4 rotationTransform(vec3 r) {\n  mat2 x = rot2(r.x);\n  mat2 y = rot2(r.y);\n  mat2 z = rot2(r.z);\n  mat3 X = mat3(\n      1.0,     0.0,     0.0,\n      0.0, x[0][0], x[0][1],\n      0.0, x[1][0], x[1][1]);\n  mat3 Y = mat3(\n    y[1][1],   0.0, y[0][1],\n        0.0,   1.0,     0.0,\n    y[1][0],   0.0, y[0][0]);\n  mat3 Z = mat3(\n    z[0][0], z[0][1],   0.0,\n    z[1][0], z[1][1],   0.0,\n        0.0,     0.0,   1.0);\n  mat4 R = mat4(Z * Y * X);\n  return R;\n}\n\n// [0, W] x [0, H]  <-->  [c.x - A, c.x + A] x [c.y - B, c.y + B]\n// where AR = W / H\n//       A = AR * height / 2\n//       B = height / 2\nmat3 invViewTransform(vec2 center, float height) {\n  vec2 Res = iResolution.xy;\n  vec2 size = vec2(height * Res.x / Res.y, height);\n  vec2 a = center - size / 2.0;\n  float Sy = height / Res.y;\n  mat3 xform = mat3(\n       Sy,   0,   0,\n        0,  Sy,   0,\n      a.x, a.y, 1.0);\n  return xform;\n}\n\n// Anti aliasing\nfloat smoothBoundaryCoverage(float signed_distance, float boundary_width) {\n  return 1.0 - smoothstep(0.0, 1.0, signed_distance / boundary_width + 0.5);\n}\n\n\n//\n// Main\n//\n\nvoid mainImage(out vec4 frag_color, vec2 frag_coord) {\n  mat3 inv_view_xform = invViewTransform(UV_CENTER, UV_HEIGHT);\n  float inv_view_scale = inv_view_xform[0][0];\n  vec2 uv =  vec2(inv_view_xform * vec3(frag_coord, 1.0));\n  float t = SCALE_TIME * iTime;\n\n  vec3 color;\n  {\n    // Checker\n    float sd = signedDistanceToChecker(uv, CHECKER_SCALE);\n    float coverage = smoothBoundaryCoverage(sd / inv_view_scale, AA);\n    color = mix(CHECKER_COLOR0, CHECKER_COLOR1, coverage);\n  }\n  {\n    // Animating Torus\n    mat4 torus_xform = rotationTransform(TORUS_ROT_VELOCITY * t);\n\n    // Approximate 2D section distance as 3D distance\n    //   this approximation under-estimates distance on 2d section\n    //   when 3d closest point's normal is not orthogonal to 2d section.\n    //   For example, there will be too much AA blur when torus is tilted.\n    vec3 p = vec3(uv, 0.0);\n    vec3 p_in_torus = vec3(inverse(torus_xform) * vec4(p, 1.0));\n    float sd = signedDistanceToTorus(p_in_torus, TORUS_R1, TORUS_R2);\n\n    float coverage = smoothBoundaryCoverage(sd / inv_view_scale, AA);\n    color = mix(color, TORUS_COLOR.xyz, TORUS_COLOR.w * coverage);\n  }\n\n  frag_color = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}