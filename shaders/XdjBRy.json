{
    "Shader": {
        "info": {
            "date": "1501009022",
            "description": "inspired from an image (see forum bottom).\n\nNote that this is pure procedural, i.e. loopless (and thus constant&small cost whatever the number of birds).\nThe 2 \"for\" are not real loops: first just visit odd vs even grid, second do bird symmetry.",
            "flags": 0,
            "hasliked": 0,
            "id": "XdjBRy",
            "likes": 35,
            "name": "flying free",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "tiling",
                "birds",
                "copies",
                "reproductions"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1058
        },
        "renderpass": [
            {
                "code": "// ref image: https://www.facebook.com/answeryourart/posts/1513148138708193\n// https://scontent-cdg2-1.xx.fbcdn.net/v/t1.0-9/20246311_500602953665174_7256337702138537172_n.jpg?oh=342c32ba829c8f44ca9139a4f715a536&oe=5A01AC15\n// Feb,14 2013: http://z1.demoty.pl/d9a623985492f27cafcbeb29dc7a3ea0495309fa/7719_a420_480-jpeg\n// Sep,03 2012: http://fitimmm.deviantart.com/art/birds-324322924\n// where is 1st version ? oldest found = feb 2008\n\nfloat line( vec2 p, vec2 a, vec2 b, float r) {                       // draw line a-b width r\n    p -= a; b -= a;\n    float d = length( p - b * clamp(dot(p,b)/dot(b,b), 0., 1. ));\n    return  smoothstep(1.,.0, d/r);\n}\n\nvoid mainImage( out vec4 O, vec2 U ) {\n    O -= O; \n    vec2 R = iResolution.xy, U0 = U/R.y, U1;\n    if (abs(U0.x-.5*R.x/R.y) > .35) return;                          // margins\n    \n    float N = 10./2.,                                                // number of cells/birds vertically\n          Y, k = .1,                                                 // flight acceleration\n        t = iTime/5., ft = fract(t),  tb = 1.5*iTime,                // beat vs scroll cycles\n        pix = N / R.y;                                               // pixel size\n    U *= pix; U.y *= 1.8;\n    pix = N/360.;                                                    // lines thickness\n    U.y -= 3.;                                                       // trigger height \n    if (U.y>0.) U.x -= .02*U.y*U.y;                                  // flight to right (distorted)\n    U1 = U;\n    U.y -= ft;                                                       // scrolled scaled coordinates\n\n    for (int i=0; i<2; i++, U+=.5,U1+=.5)                            // odd / even columns\n    {\n        vec2 P = floor(U), V = fract(U)-.5;\n        if (U1.y>0.) {                                                // flying acceleration \n           Y = log(1.+k*(U1.y-1.))/k - ft;            // inv(Y) = (exp(k*Y)-1.)/k + 1.\n           if (Y>-.5) {\n              P.y = ceil(Y); \n              V.y =  ( exp(k*Y) - exp(k*(P.y-.5)) ) / k // pseudofrac = ( inv(Y) - inv(center) )       \n                    * exp(k*ft);                        //             / jacobian( inv(Y) )\n            }}\n                                                                   \n        float rnd = P.x*111.7 + (P.y-floor(t))*71.3 + float(i)*74.3, // random phase for bird cycle\n                h = mix(1., cos(tb+rnd), clamp(U1.y/5.,0.,1.));      // flying beat\n        \n        for( float s=-1.; s<2.; s+=2. )                              // left / right wing\n        {\n            float a = 1./.1, x = a*V.x, y,                         \n                  b = 1.-clamp(U1.y/7.,0.,1.);                       // body shrinking\n            O += line( V, vec2(.1*b*s,0), vec2(.4*s,-.5*h), 2.*pix)  // wing itself\n                 ; // * sin(P.y-floor(t)+vec4(0,2.1,-2.1,0));            // wing Id, for debug\n            if (abs(x) < b) {                                        // (half) body\n                y = fract(x-.25-b); y = min(y,1.-y)*2.-.5;\n                x = floor(x);\n                O += line( V, vec2(x,y*s*h)/a, vec2(x+1.,y*s*h)/a, 4.*pix);\n            }\n        }\n    }\n    \n  //O = .9*(1.-O) - max(0., texture(iChannel0,U0).x-U0.y*2.);        // background \n    O = .9 \n        - O*vec4(1,1,mix(1.,.5, sqrt(U0.y)),0)                       // wire \n        - max(0., texture(iChannel0,mat2(1,0,-.3*U0.x,1)*U0).x-U0.y*2.)*vec4(1,.9,1,0);   // grass\n}\n\n\n// debug acceleration: https://www.shadertoy.com/view/Ms2BzG",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}