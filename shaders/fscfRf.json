{
    "Shader": {
        "info": {
            "date": "1656879583",
            "description": "extruded, voronoi, smoothrot - left mouse - raw",
            "flags": 0,
            "hasliked": 0,
            "id": "fscfRf",
            "likes": 12,
            "name": "voronoimix",
            "published": 3,
            "tags": [
                "voronimix"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 314
        },
        "renderpass": [
            {
                "code": "// playing voronoi extrude + smoothrot\n\n#define PI 3.14159265\n#define TAU 6.283185\n\n\nfloat opExtrusion( in vec3 p, float dd, in float h )\n{\n    float d = dd;\n    vec2 w = vec2( d, abs(p.y) - h );\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\n\nmat2 rotate(float a)\n{\n    float s=sin(a),c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n// IQ's polynomial-based smooth minimum function.\n//float smin( float a, float b, float k ){\n//\n////    float h = clamp(.5 + .5*(b - a)/k, 0., 1.);\n//    return mix(b, a, h) - k*h*(1. - h);\n//}\n// Commutative smooth minimum function. Provided by Tomkh and taken from \n// Alex Evans's (aka Statix) talk: \n// http://media.lolrus.mediamolecule.com/AlexEvans_SIGGRAPH-2015.pdf\n// Credited to Dave Smith @media molecule.\nfloat smin(float a, float b, float r)\n{\n   float f = max(0., 1. - abs(b - a)/r);\n   return min(a, b) - r*.25*f*f;\n}\n\nvec2 hash2( vec2 p )\n{\n    // procedural white noise\t\n\treturn fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\n// Voronoi (IQ) - slightly modified to return get the ID etc.\nvec4 VoronoiGrid( in vec2 x, out vec2 id, float _smooth )\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    // first pass: regular voronoi\n\tvec2 mg, mr;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n        //o = 0.5 + 0.5*sin( iTime + 6.2831*o );//anim\n\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n    \n    // second pass: distance to borders\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n        //o = 0.5 + 0.5*sin( iTime + 6.2831*o );//anim\n\n        vec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>0.00001 )\n        if (_smooth>0.0)\n            md = smin( md, dot( 0.5*(mr+r), normalize(r-mr) ), _smooth );\n        else\n            md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ));\n        \n    }\n    \n    id = (n+mg)+vec2(0.5); // ID is n+mg\n    md = max(md,0.0);\n    return vec4(md, length(mr), mr);\n}\n\n\n\n\nvec2 smoothRot(vec2 p,float s,float m,float c,float d){\n  s*=0.5;\n  float k=length(p);\n  float x=asin(sin(atan(p.x,p.y)*s)*(1.0-m))*k;\n  float ds=k*s;\n  float y=mix(ds,2.0*ds-sqrt(x*x+ds*ds),c);\n  return vec2(x/s,y/s-d);\n}\n\n\nfloat map( in vec3 pos )\n{\n    //pos.zx *= rotate(iTime*0.5);\n    //pos.xy *= rotate(iTime*0.9);\n    //pos.zy *= rotate(iTime*0.4);\n    vec3 pp = pos;\n    float d = 100000.0;\n    \n    \n    float bd = sdBox(pp,vec3(4.0,0.5,4.0));\n    //if (bd>d) return d;\n    \n    if (iMouse.z<0.5)\n        pp.xz = smoothRot(pp.xz, 10.0, 0.3, 0.5, 0.0);\n    float scale =1.0+(sin(iTime*0.325)*0.7);//32.0\n    vec2 id = vec2(0.0);\n    vec2 uv = pp.xz;\n    //uv += iTime*0.01; // scroll\n    vec4 h = VoronoiGrid(uv*scale,id,0.1);\n    uv = id/scale;\n    float height = 0.2;\n    float dd = h.x/scale;\n    //d = min(d,h.y/scale);\n\n    dd = opExtrusion(pos,dd,height);\n    dd = dd-0.05;\n    dd = smin(dd,pos.y+0.2,0.1);\n\n    dd = max(dd,bd);\n\n    d = min(d,dd);\n    \n    return d-0.05;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.001;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n    \n#define AA 0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = 0.5*iTime;\n\tvec3 ro = vec3( 6.*cos(an), 4.0+sin(iTime*0.9), 6.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.8*ww );\n\n        // raymarch\n        const float tmax = 50.0;\n        float t = 0.0;\n        for( int i=0; i<128; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos);\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n    \n        // shading/lighting\n        float v = 1.0-abs(p.y);\n        vec3 col = vec3(v*0.1);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            float dif = clamp( dot(nor,vec3(0.7,0.6,0.4)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,0.8,0.6));\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.7,0.5)*dif;\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}