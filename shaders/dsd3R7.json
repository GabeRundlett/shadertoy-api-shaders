{
    "Shader": {
        "info": {
            "date": "1677102503",
            "description": "CC0: City of Kali\nWanted to created some kind of abstract city of light\nHad the idea that Kali fractal might be a good start.\n10/10 - would use Kali fractal again :).\n",
            "flags": 0,
            "hasliked": 0,
            "id": "dsd3R7",
            "likes": 4,
            "name": "Fork City of Ka Housecity 572",
            "published": 3,
            "tags": [
                "2d",
                "kali"
            ],
            "usePreview": 0,
            "username": "Housecity",
            "viewed": 198
        },
        "renderpass": [
            {
                "code": "// CC0: City of Kali\n//  Wanted to created some kind of abstract city of light\n//  Had the idea that Kali fractal might be a good start.\n//  10/10 - would use Kali fractal again :).\n\n// Kali fractal source: http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/\n\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  vec2 c = -vec2(0.5, 0.5)*1.05;\n\n  float s = 3.0;\n  vec2 kp = p/s;\n  kp += sin(0.05*(TIME+100.0)*vec2(1.0, sqrt(0.5)));\n \n  const float a = PI/4.0;\n  const vec2 n = vec2(cos(a), sin(a));\n\n  float ot2 = 1E6;\n  float ot3 = 1E6;\n  float n2 = 0.0;\n  float n3 = 0.0;\n\n  const float mx = 15.0;\n  for (float i = 0.0; i < mx; ++i) {\n    float m = (dot(kp, kp));\n    s *= m;\n    kp = abs(kp)/m + c;\n    float d2 = (abs(dot(kp,n)))*s;\n    if (d2 < ot2) {\n      n2 = i;\n      ot2 = d2;\n    }\n    float d3 = (dot(kp, kp));\n    if (d3 < ot3) {\n      n3 = i;\n      ot3 = d3;\n    }\n  }\n  vec3 col = vec3(0.0);\n  n2 /= mx;\n  n3 /= mx;\n  col += hsv2rgb(vec3(0.55+0.2*n2, 0.90, 0.00125))/(ot2+0.001);\n  col += hsv2rgb(vec3(0.05-0.1*n3, 0.85, 0.0025))/(ot3+0.000025+0.005*n3*n3);\n  col -= 0.1*vec3(0.0, 1.0, 2.0).zxy;\n  col *= smoothstep(1.5, 0.5, length(pp));  \n  col = aces_approx(col);\n  col = sRGB(col);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = vec3(0.0);\n  col = effect(p, pp);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    // Ray direction as color\n    vec3 col = 0.5 + 0.5*rayDir;\n\n    // Output to cubemap\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            }
        ],
        "ver": "0.1"
    }
}