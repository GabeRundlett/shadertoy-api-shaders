{
    "Shader": {
        "info": {
            "date": "1633610574",
            "description": "playing",
            "flags": 0,
            "hasliked": 0,
            "id": "WtcfDX",
            "likes": 0,
            "name": "julia sets",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "shanesimmsart",
            "viewed": 205
        },
        "renderpass": [
            {
                "code": "//============================================================\n// adapted from source at:\n// https://keithmaggio.wordpress.com/2011/02/15/math-magician-lerp-slerp-and-nlerp/\nvec3 slerp(vec3 start, vec3 end, float percent)\n{\n     // Dot product - the cosine of the angle between 2 vectors.\n     float dot = dot(start, end);     \n     // Clamp it to be in the range of Acos()\n     // This may be unnecessary, but floating point\n     // precision can be a fickle mistress.\n     dot = clamp(dot, -1.0, 1.0);\n     // Acos(dot) returns the angle between start and end,\n     // And multiplying that by percent returns the angle between\n     // start and the final result.\n     float theta = acos(dot)*percent;\n     vec3 RelativeVec = normalize(end - start*dot); // Orthonormal basis\n     // The final result.\n     return ((start*cos(theta)) + (RelativeVec*sin(theta)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 c = fragCoord/iResolution.xy;\n    c = (c * 2.0) - vec2(1.0);\n    c.y *= iResolution.y / iResolution.x;\n    c *= 2.0;\n    \n    vec2 m = iMouse.xy/iResolution.xy;\n    m = (m * 2.0) - vec2(1.0);\n    m.y *= iResolution.y / iResolution.x;\n    m *= 2.0;\n    \n    vec2 z = c;\n    \n    int maxIterations = 64;\n    int numIterations = 0;\n    \n    while (numIterations < maxIterations && z.x*z.x + z.y*z.y < 4.0) {\n        numIterations += 1;\n\n        z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + m;\n        // z = vec2(z.x*z.x*z.x - 3.0*z.x*z.y*z.y, 3.0*z.x*z.x*z.y - z.y*z.y*z.y) + d;\n        // z = vec2(z.x*z.x*z.x*z.x - 6.0*z.x*z.x*z.y*z.y + z.y*z.y*z.y*z.y, 4.0*z.x*z.x*z.x*z.y - 4.0*z.x*z.y*z.y*z.y) + d;\n    }\n    \n    vec3 colA = vec3(0.18, 0.09, 0.18);\n    vec3 colB = vec3(1.0, 1.0, 0.09);\n \n    // Time varying pixel color\n    vec3 col = slerp(colA, colB, float(numIterations)/float(maxIterations));\n    \n    numIterations = 0;\n    z = vec2(0.);\n    for (int i = 0; i < maxIterations; i ++)\n    {\n        // Must multiply with z as though it's a complex number\n        z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c;\n        numIterations++;\n        if (dot(z,z) > 2.)\n        {\n            // We can make white or have falloff of iterations\n            // col = vec3(1.0);\n            col.z = float(numIterations)/float(maxIterations);\n            break;\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}