{
    "Shader": {
        "info": {
            "date": "1554310414",
            "description": "Some tests with raymarching.",
            "flags": 32,
            "hasliked": 0,
            "id": "wdjXzy",
            "likes": 6,
            "name": "Marching Coin",
            "published": 3,
            "tags": [
                "raymarching",
                "raymarch",
                "coin"
            ],
            "usePreview": 0,
            "username": "crocidb",
            "viewed": 411
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 90.0\n#define SURF_DIST 0.01\n\nconst vec3 color_floor = vec3(0.258, 0.521, 0.337);\nconst vec3 color_coin = vec3(0.560, 0.396, 0.039);\nconst vec3 color_sky = vec3(0.439, 0.737, 0.941);\nconst vec3 color_fog = vec3(0.227, 0.301, 0.349);\n\nconst vec3 camera_pos = vec3(0.0, 1.2, 2.5);\n\nconst vec3 light_pos = vec3(8.0, 8.5, -5.0);\nconst float light_intensity = 1.0;\n\nconst float coin_specular_shineness = 10.0;\n\n\nvec3 applyFog( in vec3  rgb,       // original color of the pixel\n               in float distance ) // camera to point distance\n{\n    const float b = .01;\n    float fogAmount = 1.0 - exp( -pow(distance, 1.45)*b );\n    return mix( rgb, color_fog, fogAmount );\n}\n\n// Marching functions\n\nstruct object\n{\n    float d;\n    int id;\n};\n    \nfloat skull(vec3 p, float size)\n{\n    float cc_c = sdCappedCylinder(p - vec3(0.0, 0.05, -0.07), vec2(size * .35, 0.0005));\n    float eye = opUnion(\n        sdCappedCylinder(p - vec3(0.13, 0.05, -0.08), vec2(size * .16, 0.1)),\n        sdCappedCylinder(p - vec3(-0.13, 0.05, -0.08), vec2(size * .16, 0.1)));\n    \n    float nose = sdCappedCylinder(p - vec3(0.0, 0.05, 0.1), vec2(size * .12, 0.1));\n    \n    float teeth = sdCappedCylinder(p - vec3(0.13, 0.05, -0.07), vec2(size * .15, 0.1));\n    \n    //float jaw = sdBox(p - vec3(0.0, 0.05, 0.31), vec3(0.15, 0.0005, 0.15));\n    float jaw = opUnion(\n        sdCappedCylinder(p - vec3(0.04, 0.05, 0.32), vec2(size * .148, 0.001)),\n        sdCappedCylinder(p - vec3(-0.04, 0.05, 0.32), vec2(size * .148, 0.001)));\n    \n    float content = opSmoothSubtraction(\n        rounding(sdBox(p - vec3(0.0, 0.05, 0.34), vec3(0.08, 0.25, 0.02)), .03),\n        opUnion(opSubtraction(nose, opSubtraction(eye, cc_c)), jaw), .1);\n    return content;\n}\n\nfloat coin_c(vec3 p, float size)\n{\n    vec3 cc_p = p + vec3(0.0, 0.05, 0.0);\n    float cc_c = sdCappedCylinder(cc_p, vec2(size * .4, 0.0005));\n    float cc_cs = sdCappedCylinder(cc_p, vec2(size * .3, 0.2));\n    float cc_off = sdCappedCylinder(cc_p - vec3(0.58, 0.0, 0.0), vec2(size * .5, 0.2));\n    float bar = sdBox(cc_p + vec3(0.05, 0.0, 0.0), vec3(0.05, 0.0005, 0.45));\n    float content = opUnion(opSubtraction(cc_off, opSubtraction(cc_cs, cc_c)), bar);\n    return content;\n}\n\nfloat coin(vec3 p)\n{\n    // Rotating coin\n    float angularspeed = 1.5 * iTime;\n   \tp = rotateX(PI_2) * rotateY(angularspeed) * p;\n\n    // coin body\n    float size = 0.94;\n    float b = .85f;\n    float c = sdCappedCylinder(p, vec2(size, 0.1));\n    float cs = sdCappedCylinder(p, vec2(size * b, 0.2));\n    float ci = sdCappedCylinder(p, vec2(size * b, 0.01));\n    float coin = opSmoothUnion(opSubtraction(cs, c), ci, .03);\n    \n    // coin content\n    float mark = coin_c(p, size);\n    float skull = skull(p, size);\n    \n    // components\n    \n    float imperfections = fbm(p, 4).x * 0.04;\n    \n    float final = opSmoothUnion(opSmoothUnion(coin, mark, 0.05), skull, 0.05) + imperfections;\n    \n    return final;\n}\n\nobject croci( in vec3 p)\n{\n    vec3 c = vec3(3.5, 0.0, 2.7);\n    vec3 q = mod(p,c)-0.5*c;\n    return object(coin(q), 1);\n}\n\nobject floor_plane(vec3 p)\n{\n    float f = p.y - .1 + fbm(p, 2).x * 0.19;\n    //float g = p.y - .1 + fbm(p, 12).y * 0.25;\n    return object(f, 0);\n}\n\nobject getDist(vec3 p) \n{\n    vec4 s = vec4(0.0, 1.05, 6.0, 1.0);\n    object box = object(coin(p - s.xyz), 1);\n    object plane = floor_plane(p);\n    \n    if (box.d < plane.d && p.z > 2.8)\n    {\n        return box;\n    }\n    \n    return plane;\n}\n\nobject rayMarch(vec3 ro, vec3 rd)\n{\n    object obj;\n    obj.d = 0.0;\n    \n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + rd * obj.d;\n        object o = getDist(p);\n        \n        obj.d += o.d;\n        obj.id = o.id;\n        \n        if (obj.d > MAX_DIST || o.d < SURF_DIST) break;\n    }\n    \n    return obj;\n}\n\nvec3 getNormal(vec3 p)\n{\n    object o = getDist(p);\n    vec2 e = vec2(0.01, 0.0);\n    \n    vec3 n = o.d - vec3(\n        getDist(p - e.xyy).d,\n        getDist(p - e.yxy).d,\n        getDist(p - e.yyx).d);\n    \n\treturn normalize(n);\n}\n\nfloat getDiffuse(vec3 p, vec3 n)\n{\n    //lightPos.xz += vec2(sin(iTime * .8), cos(iTime)) * 0.6;\n    \n    vec3 l = normalize(light_pos - p);\n    \n    float diffuse = max(0.0, dot(l, n));\n    \n    object o = rayMarch(p + n * SURF_DIST * 2.0, l);\n    if (o.d < length(light_pos - p)) diffuse *= .4;\n    \n    return diffuse;\n}\n\nfloat getSpecular(vec3 p, vec3 n, float s)\n{\n    vec3 l = normalize(light_pos - p);\n    vec3 v = normalize(camera_pos - p);\n    vec3 r = reflect(-l, n);\n    \n    float spec = pow(max(dot(v, r), 0.0), s);\n    float specular = light_intensity * spec;\n    \n    return specular;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    vec2 uv2 = (fragCoord/iResolution.xy);\n\n    vec3 col = vec3(0);\n    \n    vec2 movement = vec2(\n        ((iMouse.x - iResolution.x / 2.0) * 0.0005),\n        ((iMouse.y - iResolution.y / 2.0) * 0.0005));\n    \n    vec3 ro = camera_pos;\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.0));\n    \n    object o = rayMarch(ro, rd);\n    vec3 p = ro + rd * o.d;\n    \n    vec3 normal = getNormal(p);\n    float diffuse = getDiffuse(p, normal);\n    \n    if (o.id == 0)\n    {\n        col = color_floor * .05 + diffuse * color_floor;\n    }\n    else\n    {\n        float specular = getSpecular(p, normal, coin_specular_shineness);\n        col = color_coin * .5 + diffuse * .5 + specular;\n    }\n    \n    if (o.d > MAX_DIST)\n    {\n        col = texture(iChannel0, uv2).r * color_sky;\n    }\n    else\n    {\n        //col = mix(col, vec3(0.812, 0.275, 0.016), clamp(0.0, 1.0, pow(o.d, 1.2) / pow(40.0, 1.2)));\n        col = applyFog(col, o.d);\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Math\nconst float PI = 3.1415926535897932384626433832795;\nconst float PI_2 = 1.57079632679489661923;\nconst float PI_4 = 0.785398163397448309616;\n\nmat4 scale(float x, float y, float z){\n    return mat4(\n        vec4(x,   0.0, 0.0, 0.0),\n        vec4(0.0, y,   0.0, 0.0),\n        vec4(0.0, 0.0, z,   0.0),\n        vec4(0.0, 0.0, 0.0, 1.0)\n    );\n}\n\nmat4 translate(float x, float y, float z){\n    return mat4(\n        vec4(1.0, 0.0, 0.0, 0.0),\n        vec4(0.0, 1.0, 0.0, 0.0),\n        vec4(0.0, 0.0, 1.0, 0.0),\n        vec4(x,   y,   z,   1.0)\n    );\n}\n\nmat3 rotateX(float phi){\n    float c = cos(phi);\n    float s = sin(phi);\n\n    return mat3(\n        vec3(1.0, 0.0, 0.0),\n        vec3(0.0, c, -s),\n        vec3(0.0, s, c));\n}\n\nmat3 rotateY(float theta){\n\tfloat c = cos(theta);\n    float s = sin(theta);\n\n    return mat3(\n        vec3(c, 0.0, s),\n        vec3(0.0, 1.0, 0.0),\n        vec3(-s, 0.0, c));\n}\n\nmat3 rotateZ(float psi){\n    float c = cos(psi);\n    float s = sin(psi);\n\n    return mat3(\n        vec3(c, -s, 0.0),\n        vec3(s, c, 0.0),\n        vec3(0.0, 0.0, 1.0));\n}\n\n// Noise and FBM (as seen on iq tutorials)\nconst mat3 m3  = mat3( 0.00,  0.80,  0.60,\n                      -0.80,  0.36, -0.48,\n                      -0.60, -0.48,  0.64 );\nconst mat3 m3i = mat3( 0.00, -0.80, -0.60,\n                       0.80,  0.36, -0.48,\n                       0.60, -0.48,  0.64 );\nconst mat2 m2 = mat2(  0.80,  0.60,\n                      -0.60,  0.80 );\nconst mat2 m2i = mat2( 0.80, -0.60,\n                       0.60,  0.80 );\n\nfloat hash1( vec2 p )\n{\n    p  = 50.0*fract( p*0.3183099 );\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat hash1( float n )\n{\n    return fract( n*17.0*fract( n*0.3183099 ) );\n}\n\nvec4 noised( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 w = fract(x);\n    \n    vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);\n    vec3 du = 30.0*w*w*(w*(w-2.0)+1.0);\n\n    float n = p.x + 317.0*p.y + 157.0*p.z;\n    \n    float a = hash1(n+0.0);\n    float b = hash1(n+1.0);\n    float c = hash1(n+317.0);\n    float d = hash1(n+318.0);\n    float e = hash1(n+157.0);\n\tfloat f = hash1(n+158.0);\n    float g = hash1(n+474.0);\n    float h = hash1(n+475.0);\n\n    float k0 =   a;\n    float k1 =   b - a;\n    float k2 =   c - a;\n    float k3 =   e - a;\n    float k4 =   a - b - c + d;\n    float k5 =   a - c - e + g;\n    float k6 =   a - b - e + f;\n    float k7 = - a + b + c - d + e - f - g + h;\n\n    return vec4( -1.0+2.0*(k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z), \n                      2.0* du * vec3( k1 + k4*u.y + k6*u.z + k7*u.y*u.z,\n                                      k2 + k5*u.z + k4*u.x + k7*u.z*u.x,\n                                      k3 + k6*u.x + k5*u.y + k7*u.x*u.y ) );\n}\n\nvec4 fbm( in vec3 x, int octaves ) \n{\n    float f = 1.98;  // could be 2.0\n    float s = 0.49;  // could be 0.5\n    float a = 0.0;\n    float b = 0.5;\n    vec3  d = vec3(0.0);\n    mat3  m = mat3(1.0,0.0,0.0,\n                   0.0,1.0,0.0,\n                   0.0,0.0,1.0);\n    for( int i=0; i < octaves; i++ )\n    {\n        vec4 n = noised(x);\n        a += b*n.x;          // accumulate values\t\t\n        d += b*m*n.yzw;      // accumulate derivatives\n        b *= s;\n        x = f*m3*x;\n        m = f*m3i*m;\n    }\n    return vec4( a, d );\n}\n\n// Primitives\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0));\n}\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat rounding( in float d, in float h )\n{\n    return d - h;\n}\n\n\nfloat opOnion( in float sdf, in float thickness )\n{\n    return abs(sdf)-thickness;\n}\n\nfloat opUnion( float d1, float d2 ) { return min(d1,d2); }\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// SNOISE function from: https://www.shadertoy.com/view/lsf3RH\nfloat snoise(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e3);\n\t\n\tuv *= res;\n\t\n\tvec3 uv0 = floor(mod(uv, res))*s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\t\n\tvec3 f = fract(uv); f = f*f*(3.0-2.0*f);\n\n\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n\t\t      \t  uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\n\tvec4 r = fract(sin(v*1e-1)*1e3);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\tr = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\treturn mix(r0, r1, f.z)*2.-1.;\n}\n\nfloat noise(vec2 uv, float baseres)\n{\n    float n = 0.0;\n    for (int i = 0; i < 7; i++)\n    {\n        float v = pow(2.0, float(i));\n        n += (1.5 / v) * snoise(vec3(uv + vec2(1.,1.) * (float(i) / 17.), 1), v * baseres);\n    }\n    \n    \n    return clamp((1.0 - n) * .5, 0., 1.);\n}\n\nconst vec2 center = vec2(0.5, 0.5);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy);\n    \n    vec2 s1 = uv + vec2(iTime * 0.005, 0.005);\n    vec2 s2 = (uv * .7) + vec2(iTime * -0.006, iTime * - 0.007);  \n    \n    float dist = 1.0 - length(uv - center);\n    \n    float samplings = min(noise(s1, 10.0), noise(s2, 10.0));\n    float n = samplings * pow(dist, 3.2);\n    n += dist * .9f;\n    //n += pow(dist, 7.0) * .7;\n    \n    \n    fragColor = vec4(n);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}