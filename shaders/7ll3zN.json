{
    "Shader": {
        "info": {
            "date": "1621717349",
            "description": "Yet another path tracer inspired from Kevin Beason excellent smallpt. No refractions, but introduced some more advanced sampling strategies.\nNow should be unbiased.",
            "flags": 32,
            "hasliked": 0,
            "id": "7ll3zN",
            "likes": 20,
            "name": "smallerpt",
            "published": 3,
            "tags": [
                "raytracing",
                "pathtracing",
                "bluenoise",
                "smallpt",
                "lowdiscrepancy",
                "r2"
            ],
            "usePreview": 0,
            "username": "ockiller",
            "viewed": 1786
        },
        "renderpass": [
            {
                "code": "// See Buffer A\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    fragColor = sqrt(fragColor / fragColor.w); // cheap sRGB\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define RAYS_PER_PIXEL 6\n#define NEXT_EVENT_ESTIMATION\n\n\n\n///////////////////////\n// Scene description //\n///////////////////////\n\n#define DIFF   0\n#define GLOSSY 1\n#define METAL  2\n\nstruct Sphere {\n    vec3 color, position;\n    float radius;\n    int material;\n};\n\n#define NB_LIGHTS 1\nSphere lights[NB_LIGHTS] = Sphere[](\n    Sphere(vec3(6.0), vec3(0.0, 0.0, 1.5), 0.75, 0)\n);\n\n#define RWALL 1e2    // Radius of wall spheres\n#define RADIUS 0.5   // Radius of spheres\n#define NB_SPHERES 7\nconst Sphere spheres[NB_SPHERES] = Sphere[](\n    Sphere(vec3(0.9, 0.9, 0.9), vec3( 0.0  ,  0.0  ,  RWALL       ), RWALL - 1.0, DIFF  ), // top\n    Sphere(vec3(0.9, 0.9, 0.9), vec3( 0.0  ,  0.0  , -RWALL       ), RWALL - 1.0, DIFF  ), // bottom\n    Sphere(vec3(0.9, 0.9, 0.9), vec3( RWALL,  0.0  ,  0.0         ), RWALL - 1.0, DIFF  ), // front\n    Sphere(vec3(0.9, 0.1, 0.1), vec3( 0.0  ,  RWALL,  0.0         ), RWALL - 1.3, DIFF  ), // left red\n    Sphere(vec3(0.1, 0.1, 0.9), vec3( 0.0  , -RWALL,  0.0         ), RWALL - 1.3, DIFF  ), // right blue\n    Sphere(vec3(0.1, 0.9, 0.1), vec3(-0.4  , -0.5  ,  RADIUS - 1.0), RADIUS     , GLOSSY), // green sphere\n    Sphere(vec3(0.9, 0.9, 0.1), vec3( 0.4  ,  0.5  ,  RADIUS - 1.0), RADIUS     , METAL )  // yellow sphere\n);\n\n\n\n////////////////\n// Raytracing //\n////////////////\n\n// Intersect a sphere with a ray starting at O with direction D\n// If intersection is found before tmax, return true and update tmax with the new intersection distance\n// Back faces are ignored\nbool intersect(Sphere s, vec3 O, vec3 D, inout float tmax) {\n    vec3 L = s.position - O;\n    float tc = dot(D, L);\n    float t = tc - sqrt(s.radius * s.radius + tc * tc - dot(L, L));\n    if (t > 0.0 && t < tmax) {\n        tmax = t;\n        return true;\n    }\n    return false;\n}\n\n// Intersect all the spheres\n// Return the intersected sphere index, or -1 if no sphere found before tmax\n// If intersection is found, tmax is updated with the new intersection distance\nint intersectSpheres(vec3 O, vec3 D, inout float tmax) {\n    int imin = -1;\n    for (int i = 0; i < NB_SPHERES; i++)\n        if (intersect(spheres[i], O, D, tmax))\n            imin = i;\n    return imin;\n}\n\n// Intersect all the lights\n// Return the intersected light index, or -1 if no light found before tmax\n// If intersection is found, tmax is updated with the new intersection distance\nint intersectLights(vec3 O, vec3 D, inout float tmax) {\n    int imin = -1;\n    for (int i = 0; i < NB_LIGHTS; i++)\n        if (intersect(lights[i], O, D, tmax))\n            imin = i;\n    return imin;\n}\n\n// Evaluate diffuse direct lighting from all lights, for next event estimation\n#ifdef NEXT_EVENT_ESTIMATION\nvec3 directLighting(vec3 O, vec3 N, vec2 r) {\n    vec3 color = vec3(0.0);\n    for (int i = 0; i < NB_LIGHTS; i++) {\n        Sphere l = lights[i];\n        vec3 LC = l.position - O;\n        float d2 = dot(LC, LC);\n        float invd = inversesqrt(d2);\n        float cosL = sqrt(d2 - l.radius * l.radius) * invd;\n        vec3 L = coneSample(LC * invd, cosL, r);\n        float t = 1e5;\n        if (intersect(l, O, L, t) && intersectSpheres(O, L, t) < 0)\n            color += 2.0 * (1.0 - cosL) * max(0.0, dot(N, L)) * l.color;\n    }\n\n    return color;\n}\n#endif\n\n// Compute the light radiance along a ray starting at O, with direction D.\n// The computation may need to continue with a new ray to get the final color (accumulation),\n// in which case it returns true and update O and D as the new ray to cast.\n// indirectOnly is set to true when direct light evaluation has been done just before,\n// to avoid taking direct illumination into account twice.\nbool radiance(inout vec3 O, inout vec3 D, inout vec3 accumulation, inout vec3 throughput, inout bool indirectOnly) {\n    float t = 1e5;\n    int iSphere = intersectSpheres(O, D, t);\n    int iLight = indirectOnly ? -1 : intersectLights(O, D, t);\n\n    if (iLight >= 0) {\n        // A light has been hit, terminate the path\n        accumulation += throughput * lights[iLight].color;\n    } else if (iSphere >= 0) {\n        // A sphere has been hit, evaluate material\n        Sphere s = spheres[iSphere];\n        O += t * D;\n        vec3 N = normalize(O - s.position);\n        float cosND = max(0.0, dot(N, -D));\n        \n        // Choose whether to evaluate specular or diffuse for glossy material\n        bool evalSpecular = rand.z < fresnel(cosND, vec3(0.04)).x;\n        indirectOnly = false;\n        \n        if (s.material == METAL) {\n            // Tinted mirror\n            throughput *= fresnel(cosND, s.color);\n            D = reflect(D, N);\n        } else if (s.material == GLOSSY && evalSpecular) {\n            // Mirror white specular\n            D = reflect(D, N);\n        } else {\n            // Diffuse, attenuate color with sphere color\n            throughput *= s.color;\n            \n            // Evaluate direct lighting to help converge faster\n            #ifdef NEXT_EVENT_ESTIMATION\n                accumulation += throughput * directLighting(O, N, rand.xy);\n                indirectOnly = true;\n            #endif\n\n            // Continue bouncing around randomly\n            D = cosineSample(N, rand.xy);\n        }\n        \n        return true;\n    }\n    // Else: the ray hits nothing, it escapes the scene and will not contribute\n\n    return false;\n}\n\n\n\n//////////\n// Main //\n//////////\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    const uint raysPerPixel = uint(RAYS_PER_PIXEL);\n    uint frameSeed = uint(iMouse.z > 0.5 ? 0 : iFrame);\n    vec3 blueNoiseSeed = texelFetch(iChannel0, ivec2(fragCoord) & 0x3FF, 0).xyz;\n    \n    // Camera initialization\n    vec2 uv = iMouse.xy == vec2(0.0) ? vec2(0.4, 0.25) : 2.0 * iMouse.xy / iResolution.xy - 1.0;\n    vec3 camPos = vec3(-2.5, uv.x, -uv.y);\n    const float fovy = 60.0, tanFov = tan(fovy * PI / 360.0);\n    float aspectRatio = iResolution.x / iResolution.y;\n\n    // Raytrace the pixel and accumulate result\n    fragColor.rgb = vec3(0.0);\n    for (uint r = 0u; r < raysPerPixel + uint(ZERO); r++) {\n        // Reset random seed for maximum coherency. Blue noise takes care of the decorrelation.\n        perFrameSeed = frameSeed * raysPerPixel + r;\n        rand = toroidalJitter(sequence3D(perFrameSeed), blueNoiseSeed);\n\n        // Ray setup\n        vec2 uv = 2.0 * (fragCoord + rand.yz) / iResolution.xy - 1.0;\n        uv.x *= -aspectRatio;\n        vec3 O = camPos;\n        vec3 D = normalize(vec3(1.0, tanFov * uv));\n        vec3 accumulation = vec3(0.0);\n        vec3 throughput = vec3(1.0); // Neutral value\n\n        // Trace\n        bool indirectOnly = false;\n        const float russianRoulette = 0.9; // Max albedo of the scene\n        while (radiance(O, D, accumulation, throughput, indirectOnly) && rand.z < russianRoulette) {\n            throughput *= 1.0 / russianRoulette;\n            rand = toroidalJitter(sequence3D(perFrameSeed = lcg(perFrameSeed)), blueNoiseSeed);\n        }\n\n        fragColor.rgb += accumulation;\n    }\n\n    fragColor.rgb *= 1.0 / float(raysPerPixel);\n    fragColor.a = 1.0;\n    \n    if (iMouse.z < 0.5)\n        fragColor += texelFetch(iChannel1, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.1415927\n#define ZERO min(0.0, iTime)\n\n\n\n////////////\n// Random //\n////////////\n\n// Seeds are initialized in main\nuint perFrameSeed;\nvec3 rand;\n\nuint lcg(uint i) {\n    return 1103515245u * i + 12345u;\n}\n\n// Return the i-th term of the golden ratio sequence\nfloat goldenSequence(uint i) {\n    return float(2654435769u * i) / 4294967296.0;\n}\n\n// Return the i-th vector of Martin Roberts' R2 sequence\n// http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/\nvec2 plasticSequence(uint i) {\n    return vec2(3242174889u * i, 2447445414u * i) / 4294967296.0;\n}\n\n// Combine the two previous sequences\nvec3 sequence3D(uint i) {\n    return vec3(plasticSequence(i), goldenSequence(i));\n}\n\nvec3 toroidalJitter(vec3 x, vec3 jitter) {\n    return 2.0 * abs(fract(x + jitter) - 0.5);\n}\n\n\n\n//////////////\n// Sampling //\n//////////////\n\n// Generate an orthonormal vector basis around N\nvoid genTB(vec3 N, out vec3 T, out vec3 B) {\n    float s = N.z < 0.0 ? -1.0 : 1.0;\n    float a = -1.0 / (s + N.z);\n    float b = N.x * N.y * a;\n    T = vec3(1.0 + s * N.x * N.x * a, s * b, -s * N.x);\n    B = vec3(b, s + N.y * N.y * a, -N.y);\n}\n\n// Generate a random direction around N\n// The direction probability is proportional to the cosinus of the angle relative to N\n// Takes two uniformly distributed random values (r)\nvec3 cosineSample(vec3 N, vec2 r) {\n    vec3 T, B;\n    genTB(N, T, B);\n    r.x *= 2.0 * PI;\n    float s = sqrt(1.0 - r.y);\n    return T * (cos(r.x) * s) + B * (sin(r.x) * s) + N * sqrt(r.y);\n}\n\n// Generate a uniformly distributed random direction in a cone around N\n// Takes two uniformly distributed random values (r)\nvec3 coneSample(vec3 N, float cosTmax, vec2 r) {\n    vec3 T, B;\n    genTB(N, T, B);\n    r.x *= 2.0 * PI;\n    r.y = 1.0 - r.y * (1.0 - cosTmax);\n    float s = sqrt(1.0 - r.y * r.y);\n    return T * (cos(r.x) * s) + B * (sin(r.x) * s) + N * r.y;\n}\n\n\n\n/////////////\n// Shading //\n/////////////\n\n// Schlick-Fresnel approximation\nvec3 fresnel(float cosEN, vec3 F0) {\n    float e = 1.0 - cosEN;\n    float e5 = e * e; e5 *= e5 * e;\n    return (1.0 - e5) * F0 + e5;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}