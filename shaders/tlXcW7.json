{
    "Shader": {
        "info": {
            "date": "1592215998",
            "description": "Sorting pixels by their color value, either per channel or overall. It is a stupid idea to do this in a pixel shader, but it's not like I can prevent you from trying this either.",
            "flags": 0,
            "hasliked": 0,
            "id": "tlXcW7",
            "likes": 5,
            "name": "Channel Pixel Sorting",
            "published": 3,
            "tags": [
                "pixelsort"
            ],
            "usePreview": 1,
            "username": "Xaymar",
            "viewed": 747
        },
        "renderpass": [
            {
                "code": "// BUG: Snapping does not align with edges, instead centers on the edge.\n// BUG: Snapping also seems broken when not done using round().\n\n#define PI 3.141\n\n#define _RAD 0.01745329251994329576923690768489\n#define TO_RAD(x) (x * _RAD)\n\n#define PIXELSORT_RANGE 16u\n#define PIXELSORT_HORIZONTAL\n//#define PIXELSORT_SNAP\n#define PIXELSORT_DIR <\n\n// Channel sort is somehow 2x faster.\n#define PIXELSORT_CHANNEL\n\n#define PIXELSORT_ARRAY_SIZE ((PIXELSORT_RANGE * 2u) + 1u)\n#define PIXELSORT_ARRAY_MIN 0u\n#define PIXELSORT_ARRAY_CENTER PIXELSORT_RANGE\n#define PIXELSORT_ARRAY_MAX PIXELSORT_RANGE * 2u - 1u\n\n//#define DEBUG (uint(iTime) % PIXELSORT_ARRAY_SIZE)\n\nvoid sort_channel(inout vec4 a[PIXELSORT_ARRAY_SIZE], int length)\n{    \n    int i, j;\n    float value;\n    for(i = 1; i < length; i++)\n    {\n        value = a[i].r;\n        for (j = i - 1; j >= 0 && a[j].r PIXELSORT_DIR value; j--)\n            a[j + 1].r = a[j].r;\n        a[j + 1].r = value;\n    }\n    for(i = 1; i < length; i++)\n    {\n        value = a[i].g;\n        for (j = i - 1; j >= 0 && a[j].g PIXELSORT_DIR value; j--)\n            a[j + 1].g = a[j].g;\n        a[j + 1].g = value;\n    }\n    for(i = 1; i < length; i++)\n    {\n        value = a[i].b;\n        for (j = i - 1; j >= 0 && a[j].b PIXELSORT_DIR value; j--)\n            a[j + 1].b = a[j].b;\n        a[j + 1].b = value;\n    }\n}\n\nfloat vec4_value(in vec4 v) {\n    return v.r + v.g + v.b;\n}\n\nvoid sort_value(inout vec4 a[PIXELSORT_ARRAY_SIZE], int length)\n{    \n    int i, j;    \n    vec4 value;\n    for(i = 1; i < length; i++)\n    {\n        value = a[i];\n        for (j = i - 1; j >= 0 && a[j].a PIXELSORT_DIR value.a; j--)\n            a[j + 1] = a[j];\n        a[j + 1] = value;\n    }\n}\n\nvec4 getSample(vec2 uv) {\n    vec4 smp = texture(iChannel0, uv);\n    #ifndef PIXELSORT_CHANNEL\n    smp.a = (smp.r * 0.2126) + (smp.g * 0.7152) + (smp.b * 0.0722);\n    #endif\n    return smp;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 pixels[PIXELSORT_ARRAY_SIZE];\n    #ifdef PIXELSORT_HORIZONTAL\n    vec2 xystep = vec2(1., 0.);\n    #else\n    vec2 xystep = vec2(0., 1.);\n    #endif\n    \n    vec2 xy = fragCoord.xy;\n    #ifdef PIXELSORT_SNAP\n    // Snap to a the nearby sort center.\n    #ifdef PIXELSORT_HORIZONTAL\n    float _x1 = xy.x / float(PIXELSORT_ARRAY_SIZE);\n    float _x2 = round(_x1) + .5;\n    float _x3 = _x2 * float(PIXELSORT_ARRAY_SIZE);\n    float d = _x3 - xy.x;\n    xy.x = _x3;\n    #else\n    float _x1 = xy.y / float(PIXELSORT_ARRAY_SIZE);\n    float _x2 = round(_x1) + .5;\n    float _x3 = _x2 * float(PIXELSORT_ARRAY_SIZE);\n    float d = _x3 - xy.y;\n    xy.y = _x3;\n    #endif\n    #endif\n    \n    for (uint idx = 0u; idx < PIXELSORT_ARRAY_SIZE; idx++) {\n    #ifdef PIXELSORT_SNAP\n        vec2 uv = xy + xystep * float(int(idx) - int(PIXELSORT_ARRAY_CENTER));\n    #else        \n        vec2 uv = xy + xystep * float(int(idx) - int(PIXELSORT_ARRAY_CENTER));\n    #endif\n        uv /= iResolution.xy;\n\t    pixels[idx] = getSample(uv);\n    }\n    \n    #ifdef DEBUG\n    fragColor.rgb = pixels[uint(DEBUG)].rgb;\n    #else\n    #ifdef PIXELSORT_CHANNEL\n    sort_channel(pixels, int(PIXELSORT_ARRAY_SIZE));\n    #else\n    sort_value(pixels, int(PIXELSORT_ARRAY_SIZE));\n    #endif\n    \n    #ifdef PIXELSORT_SNAP\n    fragColor.rgb = pixels[int(d)].rgb;\n    #else\n    fragColor.rgb = pixels[PIXELSORT_ARRAY_CENTER].rgb;\n    #endif\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}