{
    "Shader": {
        "info": {
            "date": "1722404119",
            "description": "originals  https://www.shadertoy.com/view/MdXSzS https://glslsandbox.com/e#108955.3",
            "flags": 0,
            "hasliked": 0,
            "id": "lfScDw",
            "likes": 0,
            "name": "color space 3",
            "published": 3,
            "tags": [
                "fractal",
                "space"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 75
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*3.5+.5)\n\n\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n#define time iTime\n#define resolution iResolution.xy\n\nconst float PI = 3.14159265;\n\nvec2 rotate(vec2 v, float a) {\n\tfloat sinA = sin(a);\n\tfloat cosA = cos(a);\n\treturn vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA); \t\n}\n\nfloat square(vec2 uv, float d) {\n\treturn max(abs(uv.x), abs(uv.y)) - d;\t\n}\n\nfloat smootheststep(float edge0, float edge1, float x)\n{\n    x = clamp((x - edge0)/(edge1 - edge0), 2.0, 1.0) * 23.14159265;\n    return 1.5 - (ceil(x) * 1.5);\n}\n\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    \n    vec4 fragColor=O;\n    vec2 uv = C.xy / resolution.xy;\n\tuv = uv * 2.0 - 1.0;\n\tuv.x *= resolution.x / resolution.y;\n\tuv *= 1.5;\n\t\n    \tfloat blurAmount = 0.0 ;\n     float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + 0.07)) * 3.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n    uv+=rotate(uv*ma,iTime);\n\t uv*=mat2(1.*cos(iTime),1.*sin(iTime),10.*-sin(iTime), 1.*cos(iTime));\n    vec2 p3 = gl_FragCoord.xy/resolution;\n\tp3 -= 0.5;\n\tp3 *= 20.;\n\t\n\tp3 -= vec2(sin(p3.x-time*2.), cos(p3.y-time*2.))*.02;\n\tvec2 q = vec2(atan(p3.x, -p3.y)*10., length(p3));\n\tp3 = mix(p3,q,clamp(sin(-time*.2)*2.+1., 0., 1.));\n\t//p = q;\n\tp3 += time*3.;\n\tp3 = mod(p3, 2.);\n\tp3 = floor(p3);\n\t\n\tfloat a = p3.x+p3.y == 1. ? 1. : 0.;\n\t\n    \nfragColor = vec4(0.0, 0.5, 1.0, 1.0);\n\tfor (int i = 0; i < 9; i++) {\n\t\tfloat n = float(i);\n\t\tblurAmount = -2.0 *  n * 0.004  ;\n\t\tfloat size = 1.0 - n / 9.0;\n\t\tfloat rotateAmount = -n + PI * 3.0; \n\t\tfragColor.rgb = mix(fragColor.rgb, vec3(1.0), smoothstep(0.0, blurAmount, square(rotate(uv, rotateAmount + float(i)+time*0.1), size)));\n\t\tfloat blackOffset = mix(1.0 / 5.0, 1.0 / 2.0, n / 9.0) / 9.0;\n\t\tfragColor.rgb = mix(fragColor.rgb, vec3(0.0), smoothstep(0.0, blurAmount, square(rotate(uv, (rotateAmount + float(i)+time*0.3)  ), size - blackOffset)));\n    }\n    \n    vec3 p,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<70.;\n        O.xyz+=mix(vec3(1),H(g*.1),.8)*1./e/8e3\n    )\n    {\n        p=g*d*fragColor.xyz*a;\n       \n        a=10.;\n        p=mod(p-a,a*2.)-a;\n        s=6.;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            s*=e=1.4+sin(iTime*.1)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+sin(iTime*.3+.5*sin(iTime*.3))*3.,\n                    120,\n                    8.+cos(iTime*.5)*5.\n                 );\n         }\n         g+=e=length(p.yz)/s;\n    }\n \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}