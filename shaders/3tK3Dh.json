{
    "Shader": {
        "info": {
            "date": "1579014618",
            "description": "2 scenes with font texture. Switches scene every 20 seconds",
            "flags": 32,
            "hasliked": 0,
            "id": "3tK3Dh",
            "likes": 35,
            "name": "Eye Saw",
            "published": 3,
            "tags": [
                "3d",
                "tunnel",
                "text"
            ],
            "usePreview": 0,
            "username": "shau",
            "viewed": 768
        },
        "renderpass": [
            {
                "code": "// Created by SHAU - 2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//-----------------------------------------------------\n\n/*\n   Inspired by some of the animations on Isaac Arthur's YouTube channel \n*/\n\nconst float GA =2.399; \n\n// simplified version of Dave Hoskins blur from Virgill\nvec3 dof(sampler2D tex, vec2 uv, float rad) {\n\tvec3 acc = vec3(0);\n    vec2 pixel = vec2(.002*R.y/R.x, .002), angle = vec2(0, rad);;\n    rad = 1.;\n\tfor (int j = 0; j < 80; j++) {  \n        rad += 1. / rad;\n\t    angle *= rot(GA);\n        vec4 col=texture(tex,uv+pixel*(rad-1.)*angle);\n\t\tacc+=col.xyz;\n\t}\n\treturn acc/80.;\n}\n\nvoid mainImage( out vec4 C, in vec2 U) \n{     \n    vec4 anim = texture(iChannel1, ANIM/R);\n    vec3 pc = vec4(dof(iChannel0, U/R, texture(iChannel0, U/R).w), 1.).xyz;\n    \n    pc = pow(pc*2.0, vec3(1.0/2.3)); //gamma correction\n    pc *= anim.y; //fade\n\n    C = vec4(pc, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Created by SHAU - 2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//-----------------------------------------------------\n\n//CAMERA\n\nvoid mainImage(out vec4 C, vec2 U)\n{\n    float AT = mod(T, 40.0),\n          scene = 1.0,\n          fade = min(AT*0.5, 1.0) - clamp(AT - 19.0, 0.0, 1.0) +\n                 clamp(AT - 20.0, 0.0, 1.0) - clamp(AT*0.5 - 19.0, 0.0, 1.0);\n    \n    vec3 lookAt = vec3(2.0, 0.0, T*3.0 + sin(T*0.2)*20.0),\n         camPos = vec3(0.0, 0.0, T*3.0 - 5.0);\n    lookAt += path(lookAt.z);\n    camPos += path(camPos.z);\n    \n    if (AT>20.0)\n    {\n        scene = 0.0; \n        lookAt = vec3(0.0, 0.0, 0.0),\n        camPos = vec3(0.0, sin(T*0.23)*1.8, -5.0 - sin(T*0.1));\n        camPos.xz *= rot(T*0.2);\n    }\n    \n    if (U==ANIM)\n    {\n        C = vec4(scene, fade, 0.0, 0.0);\n    }\n    else if (U==CAM_POS)\n    {\n        C = vec4(camPos, 1.0);    \n    }\n    else if (U==LOOK_AT)\n    {\n        C = vec4(lookAt, 1.0);    \n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Created by SHAU - 2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//-----------------------------------------------------\n\n//RENDERING\n\n#define EPS 0.005\n#define FAR 100.0\n#define ZERO (min(iFrame,0))\n\n#define S(a,b,v) smoothstep(a,b,v)\n#define TORUS vec2(5.0, 3.0)\n#define TS vec2(0.0625)\n\n//SHADERTOY - TEXT\nconst vec2[9] text = vec2[](vec2(9.0, 10.0),  //Y\n                            vec2(15.0, 11.0), //O\n                            vec2(4.0, 10.0),  //T\n                            vec2(2.0, 10.0),  //R\n                            vec2(5.0, 11.0),  //E\n                            vec2(4.0, 11.0),  //D\n                            vec2(1.0, 11.0),  //A\n                            vec2(8.0, 11.0),  //H\n                            vec2(3.0, 10.0)); //S\n\n//extract letter from texture\nvec4 letter(vec2 uv, vec2 id, float s)\n{\n    vec4 l = vec4(0.0);\n    uv *= s; //scale\n    uv += TS*id - vec2(0.5*s) + TS*0.5; //center\n    \n    if (uv.x>(id.x*TS.x) && uv.x<((id.x + 1.0)*TS.x) && \n        uv.y>(id.y*TS.y) && uv.y<((id.y + 1.0)*TS.y))\n    {\n        l = texture(iChannel0, uv, -1.0);\n    }\n    return l;\n}\n\n//noise IQ - Shane\nfloat n3D(vec3 p) \n{    \n\tconst vec3 s = vec3(7, 157, 113);\n\tvec3 ip = floor(p); \n    p -= ip; \n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    p = p * p * (3. - 2. * p);\n    h = mix(fract(sin(h) * 43758.5453), fract(sin(h + s.x) * 43758.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z);\n}\n\n//IQ - Usefull little functions\n//https://iquilezles.org/articles/functions\nfloat expImpulse(float x, float k)\n{\n    float h = k*x;\n    return h*exp(1.0-h);\n}\n\n//Shane - Perspex Web Lattice - one of my favourite shaders\n//https://www.shadertoy.com/view/Mld3Rn\n//Standard hue rotation formula... compacted down a bit.\nvec3 rotHue(vec3 p, float a)\n{\n    vec2 cs = sin(vec2(1.570796, 0) + a);\n\n    mat3 hr = mat3(0.299,  0.587,  0.114,  0.299,  0.587,  0.114,  0.299,  0.587,  0.114) +\n        \t  mat3(0.701, -0.587, -0.114, -0.299,  0.413, -0.114, -0.300, -0.588,  0.886) * cs.x +\n        \t  mat3(0.168,  0.330, -0.497, -0.328,  0.035,  0.292,  1.250, -1.050, -0.203) * cs.y;\n\t\t\t\t\t\t\t \n    return clamp(p*hr, 0., 1.);\n}\n\n//IQ - SDF primitives\n//https://iquilezles.org/articles/distfunctions\nfloat sdTorus(vec3 p, vec2 t) \n{\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\n    return length(q) - t.y;\n}\n\nvec3 tunnel(vec3 p)\n{\n    p -= path(p.z); \n\treturn vec3(3.0 - length(p.xy), p.xy);    \n}\n\nvoid ring(inout vec3 pc, vec3 p, vec3 col)\n{\n    float z = fract(p.z*0.04 + -T*0.3),\n          atn1 = (1.0 / (1.0 + z*z*100000.0)) + (1.0 / (1.0 + (1.0 - z)*(1.0 - z)*100000.0)),\n          atn2 = (1.0 / (1.0 + z*z*6000.0)) + (1.0 / (1.0 + (1.0 - z)*(1.0 - z)*6000.0));\n    pc += pc*atn2*16.0;\n    pc += col * length(pc)*atn2*0.2;\n    pc += mix(col, vec3(1), 0.4)*atn1 * n3D(p.zxy*2.3+T*0.2);\n}\n\nvec4 renderTunnel(vec3 ro, vec3 rd, vec3 la, vec3 col)\n{\n    vec3 pc = vec3(0);\n    \n    float t = 0.0, dof = 0.0;\n    vec2 id = vec2(0.0);;\n    for (int i=ZERO; i<100; i++) {\n        vec3 ns = tunnel(ro + rd*t);\n        if (abs(ns.x)<EPS) {\n            id = ns.yz;\n            break;\n        }\n        t += ns.x;\n        \n        if (t>FAR)\n        {\n            t = -1.0;\n            break;\n        }\n    }\n    \n    if (t>0.0)\n    {\n        vec3 p = ro + rd*t;\n        dof = 0.0;\n\t\t//partition surface\n        float a = (atan(id.x, id.y)/6.2831853) + 0.5; //0->1\n\n        vec2 c = vec2(fract(a*60.0), //cell positiom\n                      fract(p.z*10.0)),\n        cid = vec2(floor(a*60.0), //cell id\n                   floor(p.z*10.0));\n        vec3 h3 = hash32(cid+T*0.4);\n\n        //RANDOM CHARACTERS\n        if (h3.z>0.3)\n        {\n            pc = col * letter(vec2(1.0 - c.x, c.y), floor(h3.xy*16.0), 0.1).x;\n            pc *= hash11(cid.y) * n3D(p*0.5) * n3D(p*5.0+T);\n            pc = pc*0.3 + pc*S(0.5, 1.0, n3D(p.zxy*-0.4));\n        }\n        //SHADERTOY\n        vec2 cz = vec2(c.x,\n                       fract(fract(p.z)*9.0));\n        vec2 czid = vec2(cid.x,\n                       floor(fract(p.z)*9.0));\n        if (mod(p.z, 10.0)>9.0 && hash12(czid)>0.3)\n        {\n            pc += col * 2.0 * letter(vec2(1.0 - cz.x, cz.y), text[int(czid.y)], 0.1).x;\n        }\n        \n        //lines\n        float l = length(c.x-0.5); //center line\n        l = 0.3 / (1.0 + l*l*800.);    \n        l *= hash11(cid.x+T*-0.3) * n3D(p*0.5) * n3D(p*5.0+T); //add noise\n        l = l*0.3 + l*S(0.5, 1.0, n3D(p.yxz*0.5)); //more noise   \n        float ls = l*S(1.0, 0.8, fract(p.z))*S(0.0, 0.2, fract(p.z)); //gaps in lines\n        l = mix(ls, l, step(0.8, hash11(cid.x+T*-0.3))); //more noise        \n        pc += col * l * S(0.0, 1.0, n3D((p-32.3)*0.7 + T*0.3)) * 2.0;\n        \n        ring(pc, p, col);\n        p.z += 1.4;\n        ring(pc, p, col);        \n    }\n\n    return vec4(pc, dof);\n}                      \n\nvec4 renderTorus(vec3 ro, vec3 rd, vec3 la, vec3 col)\n{\n    vec3 pc = vec3(0);\n    \n    float t = 0.0, dof = 0.0;\n    for (int i=ZERO; i<100; i++) {\n        float ns = abs(sdTorus(ro + rd*t, TORUS));\n        if (abs(ns)<EPS) break;\n        t += ns;\n        if (t>FAR)\n        {\n            t = -1.0;\n            break;\n        }\n    } \n\n    if (t>0.0)\n    {\n        vec3 p = ro + rd*t;\n        dof = length(la-p) * 0.03;\n        //partition surface\n        float aX = (atan(p.x, p.z)/6.2831853) + 0.5, //0->1\n            aY = (atan(length(p.xz)-TORUS.x, p.y)/6.2831853) + 0.5, //0->1 from BigWings\n            aYR = aY*40.0+T*0.3, //split and rotation\n            aYID = mod(floor(aYR), 40.0), //id\n            h1 = hash11(aYID)*2.0 - 1.2, //biased hash\n            h1r = h1*-1.0, //reversed\n            aXR = aX*60.0 + T*(0.5*sign(h1)+h1) + //split and rotation \n            expImpulse(mod(T*(0.6+abs(h1)), 2.0), 2.0) * sign(h1);\n\n        vec2 c = vec2(fract(aXR), fract(aYR)), //cell co-ordinate\n            cid = vec2(mod(floor(aXR), 60.0), aYID);  //cell id\n        vec3 h3 = hash32(cid); //hash on cell id\n\n        //RANDOM CHARACTERS\n        if (h3.z>0.3)\n        {\n            pc = col * letter(vec2(1.0 - c.x, c.y), floor(h3.xy*16.0), 0.1).x;\n            pc *= hash11(cid.y) * n3D(p*0.5) * n3D(p*5.0+T);\n            //pc = pc*0.3 + pc*S(0.5, 1.0, n3D(p.zxy*-0.4));\n        }\n\n        //SHADERTOY\n        if (cid.y==9.0 && cid.x<9.0)\n        {\n            pc = 2.0 * col * letter(vec2(1.0 - c.x, c.y), text[int(cid.x)], 0.1).x;                \n        }\n        else if (cid.y==15.0 && cid.x>22.0 && cid.x<32.0)\n        {\n            pc = 2.0 * col * letter(vec2(1.0 - c.x, c.y), text[int(cid.x) - 23], 0.1).x;                \n        }\n        else if (cid.y==30.0 && cid.x>39.0 && cid.x<49.0)\n        {\n            pc = 2.0 * col * letter(vec2(1.0 - c.x, c.y), text[int(cid.x) - 40], 0.1).x;                \n        }\n\n        //GLOW LINES\n        //with wrapping\n        vec2 scl = vec2(30.0, 1.0), //scale\n             bp = vec2(fract(T*(0.1 + abs(h1r)*0.1))*scl.x * sign(h1r), 0.5);  //center\n\n        //disk\n        float bd = h1r>0.0 ? -scl.x : 2.0*scl.x;\n        float b = length(bp - vec2(aX, c.y)*scl);\n        b = min(b, length(vec2(bp.x + scl.x, bp.y) - vec2(aX, c.y)*scl));\n        b = min(b, length(vec2(bp.x + bd, bp.y) - vec2(aX, c.y)*scl));\n\n        //line\n        float l = length(c.y - 0.5);\n        float lb1 = length(bp.x/scl.x - aX);\n        float lb2 = length((bp.x + scl.x)/scl.x - aX);\n\n        pc += col / (1.0 + b*b*1000.0);\n        pc += vec3(1) / (1.0 + b*b*6000.0);            \n\n        float clip1 = h1r>0.0 ? step(aX, bp.x/scl.x) : step(bp.x/scl.x, aX);\n        float clip2 = h1r>0.0 ? step(aX, (bp.x + scl.x)/scl.x) : step((bp.x + scl.x)/scl.x, aX);\n        pc += col * S(0.02, 0.0, l) / (1.0 + lb1*lb1*4000.0) * clip1;\n        pc += col * S(0.02, 0.0, l) / (1.0 + lb2*lb2*4000.0) * clip2;\n        pc += vec3(1) * S(0.02, 0.0, l) / (1.0 + lb1*lb1*12000.0) * clip1;\n        pc += vec3(1) * S(0.02, 0.0, l) / (1.0 + lb2*lb2*12000.0) * clip2;\n    }\n\n    return vec4(pc, dof);\n}\n\nvec3 camera(vec2 U, vec3 ro, vec3 la, float fl) \n{\n    vec2 uv = (U - R*.5) / R.y;\n    vec3 fwd = normalize(la-ro),\n         rgt = normalize(vec3(fwd.z, 0., -fwd.x));\n    return normalize(fwd + fl*uv.x*rgt + fl*uv.y*cross(fwd, rgt));\n}\n\nvoid mainImage( out vec4 C, in vec2 U) \n{     \n    vec4 cam = texture(iChannel1, CAM_POS/R),\n         lookAt = texture(iChannel1, LOOK_AT/R),\n         anim = texture(iChannel1, ANIM/R);\n    vec3 col = rotHue(vec3(0,1,0), T*0.2) * 2.0;\n    \n    vec3 rd = camera(U, cam.xyz, lookAt.xyz, 1.8);\n\n    //debug text lookup\n    //vec2 uv = U/R;\n    //vec2 lid = vec2(3.0, 10.0); //S\n    //pc += letter(uv, lid, 0.06);\n    \n    if (anim.x==0.0)\n    {\n        C = renderTorus(cam.xyz, rd, lookAt.xyz, col);\n    }\n    else if (anim.x==1.0)\n    {\n        C = renderTunnel(cam.xyz, rd, lookAt.xyz, col);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Created by SHAU - 2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//-----------------------------------------------------\n\n#define PI 3.141592\n#define R iResolution.xy\n#define T mod(iTime, 640.0)\n#define CAM_POS vec2(0.5, 0.5)\n#define LOOK_AT vec2(1.5, 0.5)\n#define ANIM vec2(2.5, 0.5)\n\n#define UI0 1597334673U\n#define UI1 3812015801U\n#define UI2 uvec2(UI0, UI1)\n#define UI3 uvec3(UI0, UI1, 2798796415U)\n#define UIF (1.0 / float(0xffffffffU))\n\n//Dave Hoskins - Hash without sin\n//https://www.shadertoy.com/view/XdGfRR\nfloat hash11(float p)\n{\n\tuvec2 n = uint(int(p)) * UI2;\n\tuint q = (n.x ^ n.y) * UI0;\n\treturn float(q) * UIF;\n}\n\nfloat hash12(vec2 p) \n{\n\tuvec2 q = uvec2(ivec2(p)) * UI2;\n\tuint n = (q.x ^ q.y) * UI0;\n\treturn float(n) * UIF;\n}\n\nvec3 hash32(vec2 q)\n{\n\tuvec3 n = uvec3(ivec3(q.xyx)) * UI3;\n\tn = (n.x ^ n.y ^ n.z) * UI3;\n\treturn vec3(n) * UIF;\n}\n\n//Fabrice - compact rotation\nmat2 rot(float x) {return mat2(cos(x), sin(x), -sin(x), cos(x));}\n\n\n//standard path deform - check out any tunnel by Shane or Aiekick for some good examples\nvec3 path(float t) \n{\n    float a = sin(t * PI / 24. + 2.7);\n    float b = cos(t * PI / 24.);\n    return vec3(a * 3., b * a, 0.);\n} ",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}