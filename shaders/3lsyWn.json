{
    "Shader": {
        "info": {
            "date": "1591824805",
            "description": "â™¥\ninspired by newsfeed",
            "flags": 0,
            "hasliked": 0,
            "id": "3lsyWn",
            "likes": 9,
            "name": "F***************************",
            "published": 3,
            "tags": [
                "raymarching",
                "fuck"
            ],
            "usePreview": 0,
            "username": "postviolet",
            "viewed": 389
        },
        "renderpass": [
            {
                "code": "const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n\nvec3 opRep( in vec3 p, in vec3 c)\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return q;\n}\n\nmat4 rotateX( in float angle ) {\n  return mat4(1.0,0,0,0,0,cos(angle),-sin(angle),0,0,sin(angle),cos(angle),0,0,0,0,1);\n}\n\nmat4 rotateY( in float angle ) {\n  return mat4(cos(angle),0,sin(angle),0,0,1.0,0,0,-sin(angle),0,cos(angle),0,0,0,0,1);\n}\n\nmat4 rotateZ( in float angle ) {\n  return mat4(cos(angle),-sin(angle),0,0,sin(angle),cos(angle),0,0,0,0,1,0,0,0,0,1);\n}\n\nfloat Capsule( vec3 p, float h, float r ) {\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat Fuck (vec3 p) {\n    \n    float f1 = Capsule(vec3(p.x,p.y+0.25,p.z),0.5, 0.29);\n    float f2 = Capsule(vec3(p.x+0.5,p.y,p.z),0.5,0.29);\n    \n    float f3 = Capsule(vec3(p.x+1.0,p.y,p.z),0.7,0.29);\n    \n    float t3 = sin(iTime*5.)/5.8+0.5;\n    vec3 pf3a = (vec4(vec3(p.x+1.0,p.y-0.75,p.z),1.) * rotateX(5.01+t3)).xyz;\n    float f3a = Capsule(pf3a,0.65,0.29);\n    \n    float f3combo = opSmoothUnion(f3,f3a,0.1);\n    \n    float f4 = Capsule(vec3(p.x+1.5,p.y,p.z),0.55,0.29);\n    \n    vec3 p5 = (vec4(p,1.) * rotateZ(-0.6)).xyz;\n    float f5 = Capsule(vec3(p5.x+1.6,p5.y-0.65,p5.z-0.2),0.5,0.28);\n    \n    float fngrs = opSmoothUnion(\n        opSmoothUnion(\n            opSmoothUnion(\n                opSmoothUnion(f1, f2, 0.1)\n                ,f3combo, 0.1),\n            f4,0.1),\n        f5,0.1);\n    \n    vec3 pk1 = (vec4(p,1.) * rotateZ(-1.6)).xyz;\n    float k1 = Capsule(vec3(pk1.x+0.35,pk1.y-0.04,pk1.z),1.5, 0.34);\n    \n    return opSmoothUnion(fngrs,k1,0.1);\n}\n\nfloat sceneSDF(vec3 samplePoint) {\n    \n  samplePoint = (rotateY(sin(iTime/2.)) * vec4(samplePoint, 1.)).xyz;\n  samplePoint = opRep(samplePoint, vec3(10., 10., 14.));\n    \n    return Fuck(samplePoint+0.2);\n}\n\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n      return depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          2.0 * cos(iTime));\n    vec3 light1Intensity = vec3(0.8,0.1,0.1);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(1.5,5.0,2.0);\n    vec3 light2Intensity = vec3(1.0,0.5,0.5);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity);    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec3 dir = rayDirection(45., iResolution.xy, fragCoord.xy);\n    \n    vec3 eye = vec3(0., 0., 10);\n    \n    float dist = shortestDistanceToSurface(eye, dir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON) {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n    }\n    \n    vec3 p = eye + dist * dir;\n    \n    vec3 K_a = vec3(0.5,0.0,0.4);\n    vec3 K_d = vec3(0.7,1.0,2.0+sin(iTime));\n    vec3 K_s = vec3(1.0,1.0,1.0);\n    float shininess = 20.;\n    \n    vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}