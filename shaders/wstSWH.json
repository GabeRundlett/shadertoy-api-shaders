{
    "Shader": {
        "info": {
            "date": "1572019458",
            "description": "Thats old as heck\n\nMouse drag to rotate",
            "flags": 0,
            "hasliked": 0,
            "id": "wstSWH",
            "likes": 6,
            "name": "Shadertober 23 - Ancient",
            "published": 3,
            "tags": [
                "ancient",
                "inktober",
                "shadertober",
                "backwardscaptain"
            ],
            "usePreview": 0,
            "username": "BackwardsCap",
            "viewed": 464
        },
        "renderpass": [
            {
                "code": "float pillar(vec3 p, float ap)\n{\n    return cyl(p,1.-abs(cos(ap*10.)/50.),3.5);\n}\n\nfloat map(vec3 p)\n{\n    float r;\n\n    float ap;\n    \n    vec3 ccp = abs(p)-vec3(6,0,3.);\n    ap = atan(ccp.z,ccp.x);\n    float c = pillar(ccp,ap);\n    ccp = abs(p)-vec3(6,0,8.);\n    ap = atan(ccp.z,ccp.x);\n    c=min(c,pillar(ccp,ap));\n\n    ccp=abs(p)-vec3(0,0,8);\n    ap=atan(ccp.z,ccp.x);\n    \n    c=min(c,pillar(ccp,ap));\n    \n    vec3 bp = vec3(smoothstep(-1.,-.1,cos(p.z*10.)/5.),0,smoothstep(-1.,-.1,cos(p.x*10.)/5.));\n    \n    float rf = prism((p-vec3(0,5.5,0))/vec3(3.,.75,1),vec2(3.0,10.));\n    \n    float rfi = prism((abs(p)-vec3(0,5.5,10))/vec3(3.,.75,1),vec2(2.5,.25));\n    \n    float rfc = box(p-vec3(0,2,0),vec3(4.,10,6));\n    \n\n    rf=max(rf,-rfi);\n    \n    vec3 op = p;\n    op.xz=abs(op.xz);\n    float oc = oct((op-vec3(0,6,9.5))/vec3(1,1,.5),1.);\n    \n    rf=min(rf,oc);\n    \n    rf = smin(rf,box(p-vec3(0,3.9,0),vec3(6.79+smoothstep(-1.,-.1,cos(3.5+p.z*10.)/5.),.5,9.+smoothstep(-1.,-.1,cos(p.x*10.)/5.))),.05);\n    \n    rf=max(rf, -rfc);\n\n    float f = box(p+vec3(0,5.5,0),vec3(8,2,10));\n    f = stmin(f,box(p+vec3(0,8.5,0),vec3(12,2,14)),3.,10.);\n    \n    r=stmin(f,c,.75,5.);\n    r=stmin(r,rf,1.,2.);\n    \n    return r;\n}\n\nfloat ray(vec3 ro, vec3 rd)\n{\n    float t=0.;\n    for(int i=0;i<128;i++)\n    {\n        vec3 p = ro+rd*t;\n        float s = map(p);\n        if(s<0.000001)break;\n        t+=s;\n        if(t>MAX_DIST){t=-1.;break;}\n        \n    }\n    return t;\n}\n\n//iq's soft shadow\nfloat shadow(vec3 ro, vec3 rd)\n{\n    float res = 1.0;\n    float t = 0.0001;\n    for(int i=0;i<64;i++)\n    {\n        \n        vec3 pos = ro+t*rd;\n        float h = map(pos);\n        \n        res= min(res, 50.0*h/t);\n        if(h<0.0000001)break;\n        t+=h;\n        if(t>MAX_DIST)break;\n        \n    }\n    \n    return clamp(res,0.,1.);\n}\n\n\n\nvec3 normal(vec3 p)\n{\n    vec2 e = vec2(0.00001,0);\n    return normalize(vec3(\n        map(p+e.xyy)-map(p-e.xyy),\n        map(p+e.yxy)-map(p-e.yxy),\n        map(p+e.yyx)-map(p-e.yyx)\n        ));\n}\n\nvoid mainImage( out vec4 c, in vec2 f )\n{\n    vec2 uv = (2.*f-iResolution.xy)/iResolution.y;\n\n    float t = iMouse.x/100.;\n    float y = iMouse.y/100.;\n    \n    if(iMouse.z<0.||length(iMouse.xy)==0.)\n    {\n        t=iTime/5.;\n        y=1.+cos(iTime/10.)*.5;\n    }\n    \n    float d = 30.;\n    vec3 ro = vec3(sin(t)*d,cos(y)*20.,cos(t)*d);\n    vec3 ta = vec3(0);\n    vec3 rd = cam(ro,ta,uv);\n    \n    float r = ray(ro,rd);\n    \n    vec3 col = texture(iChannel0,rd).rgb;\n    if(r>0.)\n    {\n        vec3 p = ro+rd*r;\n        vec3 n = normal(p);\n        \n        vec3 mate = vec3(1.6,1.5,1.2);\n        vec3 sun = normalize(vec3(-0.5,.6,0.3));\n        float dif = clamp(dot(sun,n),0.0,1.0);\n        float sky = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.);\n        float bou = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.);\n        float sha = shadow(p+n*0.1,sun);//step(ray(p+n*.1,sun).x,0.);\n        vec3 ref = reflect(-sun,n);\n    \n        float spe = max(0.0,dot(ref,normalize(ro-p)));\n        spe = pow(spe,8.0);\n        \n        vec3 sun_col = vec3(.5,0.4,0.4);\n        vec3 bou_col = vec3(0.3,0.3,0.3);\n        vec3 sky_col = vec3(0.4,0.4,0.4);\n        \n        col= mate*sun_col*dif*sha+sha*spe*.5;\n        col+=mate*sky_col*sky*.5;\n        col+=mate*bou_col*bou*.25;\n        \n    }\n    \n    c.rgb=col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_DIST 60.0\n\n//thanks to iq for sharing this knowledge on his website\nfloat oct(vec3 p, float s)\n{\n    p=abs(p);\n    return(p.x+p.y+p.z-s)*.57735027;\n}\n\nfloat cyl(vec3 p, float h, float r)\n{\n    vec2 q = abs(vec2(length(p.xz),p.y))-vec2(h,r);\n    return length(max(q,0.0))+min(max(q.x,q.y),0.0);\n}\n\nfloat prism(vec3 p, vec2 h)\n{\n    vec3 d = abs(p);\n    return max(d.z-h.y,max(d.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nfloat box(vec3 p, vec3 d)\n{\n  vec3 q = abs(p) - d;\n  return min(max(q.x,max(q.y,q.z)),0.0)+length(max(q,0.0));\n}\n\nfloat smin(float d1, float d2, float k)\n{\n    float h = clamp(0.5+0.5*(d2-d1)/k,0.0,1.0);\n    return mix(d2,d1,h)-k*h*(1.0-h);\n}\n\n//thanks to flopine for this stmin function\nfloat stmin (float a, float b, float k, float n)\n{\n  float st = k/n;\n  float u = b-k;\n  return min(min(a,b), 0.5*(u+a+abs(mod(u-a+st, 2.*st)-st)));\n}\n\nvec3 cam(vec3 ro, vec3 ta, vec2 uv)\n{\n    vec3 cf = normalize(ta-ro);\n    vec3 cu = normalize(cross(cf,vec3(0,1,0)));\n    vec3 cr = normalize(cross(cu,cf));\n    return normalize(uv.x*cu+uv.y*cr+2.*cf);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}