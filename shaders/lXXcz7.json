{
    "Shader": {
        "info": {
            "date": "1725980145",
            "description": "Simulates a Gray Scott reaction-diffusion model. Click on the canvas to place a single cell and see it multiply. Press space to reset\nWrite-up/tutorial : https://pierre-couy.dev/simulations/2024/09/gray-scott-shader.html",
            "flags": 48,
            "hasliked": 0,
            "id": "lXXcz7",
            "likes": 10,
            "name": "Gray Scott model - Fragile life",
            "published": 3,
            "tags": [
                "simulation"
            ],
            "usePreview": 0,
            "username": "pcouy",
            "viewed": 4655
        },
        "renderpass": [
            {
                "code": "/*\nClick anywhere on the canvas to place a first cell.\nPress spacebar to reset\nChange values in \"Common\" tab to see different results\n*/\n\n\n// NEW \"HSV\" COLOR SCHEME - ADD \"/*\" BELOW TO DISABLE (YOU CAN ENABLE THE ORIGINAL \"RED-GREEN\" AT THE BOTTOM)\n// Hue represents the direction of a non-linearly scaled (food, catalyst) concentrations vector (red = only food ; green = only catalyst)\n// Saturation/Value are mapped from the length of this vector.\n\n#define SATURATION_POW 0.5\n#define VALUE_POW 2.8\nfloat sim2hue(vec2 simContents) {\n    return mod(atan(\n        simContents.r,\n        simContents.g+0.01\n    )*1.35/3.14+0.31,1.0);\n}\nvec2 scaleSim(vec2 sim) {\n    return pow(sim-vec2(0.01,0.0), vec2(2.0,0.3));\n}\n// All components are in the range [0â€¦1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor.a = 1.0;\n    vec2 simContents = scaleSim(texture(iChannel0, uv).rg);\n    float intensity = length(simContents.rg);\n    fragColor.rgb = hsv2rgb(vec3(\n        sim2hue(simContents.rg),\n        pow(length(simContents.rg),SATURATION_POW),\n        pow(length(simContents.rg),VALUE_POW)\n    ));\n    \n    //REMOVE \"/*\" BELOW to show color scheme legend\n    /*\n    if (uv.x<0.05) {\n        if (uv.y<0.1) {\n            vec2 s = scaleSim(vec2(uv.x/0.05, uv.y/0.1));\n            float l = length(s);\n            fragColor.rgb = hsv2rgb(vec3(\n                sim2hue(s),\n                pow(l,SATURATION_POW),\n                pow(l,VALUE_POW)\n            ));\n        }\n    }\n    /**/\n}\n/**/\n\n\n//ORIGINAL \"RED-GREEN\" COLOR SCHEME - REMOVE '/*' BELOW TO ENABLE (AFTER DISABLING NEW COLOR SCHEME AT THE TOP)\n/*\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) * vec4(0.5,2.0,0.,1.);\n}\n/**/",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nShader responsible for applying the update rules for each pixel at each time step\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pixelSize = 1. / iResolution.xy;\n    vec2 uv = fragCoord.xy * pixelSize;\n    \n    vec2 h = vec2(pixelSize.x, 0.);\n    vec2 v = vec2(0., pixelSize.y);\n    \n    \n    bool spacePressed = texture(iChannel1,  vec2(0.126953125, .25)).x > 0.;\n    if (iFrame < 10 || spacePressed) { // Init\n        fragColor = vec4(1., 0.0, 0.0, 1.0);\n        if ( length(uv - vec2(.5,.5)) <= length(1.*pixelSize) ) {\n            fragColor+= vec4(0., 0.5, 0., 1.);\n        }\n        fragColor+= vec4(0.0, channel2Init * texture(iChannel2, uv)); \n    }\n    else {  // Sim\n        vec4 col = texture(iChannel0, uv);\n        \n        vec4 new = vec4(0.0);\n        if ( iMouse.z > 0.5 && length((fragCoord.xy - iMouse.xy)*pixelSize) < length(1.*pixelSize) ) {\n            new = vec4(0., 0.2, 0., 1.);\n        }\n        \n        vec4 inboundFlow = TAU / 8. * (   // Algebric inbound diffusion flow\n            texture(iChannel0, uv + h) +\n            texture(iChannel0, uv - h) +\n            texture(iChannel0, uv + v) +\n            texture(iChannel0, uv - v) +\n            1./1.41*(\n                texture(iChannel0, uv + h + v) +\n                texture(iChannel0, uv + h - v) +\n                texture(iChannel0, uv - h + v) +\n                texture(iChannel0, uv - h - v)\n            ) -\n            4.*(1.+1./1.41)*col\n        );\n        \n                \n        // Reaction : X + 2X -> 3X\n        float reactionSpeed1 = k1*col.x*col.y*col.y;\n        // Concentration variations due to reactions\n        vec4 dCol = vec4(-reactionSpeed1 + k3*(1.-col.x), reactionSpeed1 - (k2+k3)*col.y, 0., 0.);\n        \n        \n        fragColor = clamp(col+dT*(dCol+inboundFlow)+new, 0.0, 1.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// You can pick any 2D buffer as iChannel2 in Buffer A to alter the simulation initialization\n// The parameter below controls how to scale the pixels from iChannel2 (0.1 should be a good value)\nfloat channel2Init = 0.0;\n\n/*\nChanging k2 and k3 is the best way to change the behavior of the sim.\nSee https://itp.uni-frankfurt.de/~gros/StudentProjects/Projects_2020/projekt_schulz_kaefer/\nand http://mrob.com/pub/comp/xmorphia/index.html\nMitosis     : k2 = 0.062 ; k3 = 0.028\nSolitons    : k2 = 0.060 ; k3 = 0.030\nFlowers     : k2 = 0.062 ; k3 = 0.055\nFinger      : k2 = 0.060 ; k3 = 0.037\nU-Skate     : k2 = 0.061 ; k3 = 0.062\nMazes       : k2 = 0.057 ; k3 = 0.029\nSpirals     : k2 = 0.047 ; k3 = 0.014\nYou can change these values and recompile while the simulation is running\nA lot of other combinations produce good results, but some of them just don't work.\nNotes for experimenting :\n\"Fragile\" life : k2 = 0.057 ; k3 = 0.016..0.020   ==>  makes \"unstable\" cells that either split, or die before they get a chance to\n*/\n\n// Leave presets commented to try specific values\nfloat k2 = 0.0570; // Speed constant of the \"KILL\" reaction\nfloat k3 = 0.019; // Speed constant of the \"FEED\" reaction\n// Comment above and uncomment a line below to override with a preset :\n//float k2 = 0.062 ; float k3 = 0.028 ; // Mitosis\n//float k2 = 0.060 ; float k3 = 0.030 ; // Solitons\n//float k2 = 0.062 ; float k3 = 0.055 ; // Flowers\n//float k2 = 0.060 ; float k3 = 0.037 ; // Finger\n//float k2 = 0.061 ; float k3 = 0.062 ; // U-Skate\n//float k2 = 0.057 ; float k3 = 0.029 ; // Mazes\n//float k2 = 0.047 ; float k3 = 0.014 ; // Spirals\n//float k2 = 0.057 ; float k3 = 0.0166; // Fragile Mitosis\n\n// ===================================================\n// ==        Nothing too interesting below          ==\n// ===================================================\n\n// You can play with the parameters below to see their effect on the simulation\n// I found these values to work well and do not think there are behaviours that are only attainable by tuning these values\nvec4 TAU = vec4(.4, .2, 0., 0.);  // Diffusion rate of components\nfloat k1 = 1.;  // Speed constant of the main (autocatalytic) reaction\n    \n    \nfloat dT = 2.0; //The lower this is, the more stable (but the slower) the simulation is. Weird stuff starts to happen from 3.0",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}