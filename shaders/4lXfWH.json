{
    "Shader": {
        "info": {
            "date": "1511701732",
            "description": "Lots of colorful flowers",
            "flags": 0,
            "hasliked": 0,
            "id": "4lXfWH",
            "likes": 9,
            "name": "Active Flowers",
            "published": 3,
            "tags": [
                "raymarch",
                "flower",
                "hexagon"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 739
        },
        "renderpass": [
            {
                "code": "// \"Active Flowers\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec3 HsvToRgb (vec3 c);\nvec2 Rot2D (vec2 q, float a);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Hashfv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir, qHit;\nvec2 gId;\nfloat tCur, dstFar, gSize, szFac, rotAng, rotAngF, dTwist;\nint idObj;\nconst float pi = 3.14159;\n\n#define SQRT3 1.7320508\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./SQRT3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (SQRT3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, a, r, h;\n  dMin = dstFar / szFac;\n  p.xz -= HexToPix (gId);\n  p.xz = Rot2D (p.xz, rotAngF);\n  p.z -= 0.1;\n  p /= szFac;\n  q = p;\n  h = 1.5;\n  d = 0.8 * max (length (Rot2D (q.xz - vec2 (0., 0.07), 4. * pi * dTwist * q.y / h) -\n     vec2 (0., 0.03)) - (0.06 - 0.015 * q.y / h + 0.005 * sin (4. * pi * q.y)), abs (q.y - h) - h);\n  if (d < dMin) { dMin = d;  idObj = 1;  qHit = q; }\n  q = p;\n  r = length (q.xz);\n  h = 0.2 * (0.8 - r);\n  d = 0.8 * max (max (r - 0.8, abs (q.y - h) - h), - q.y);\n  if (d < dMin) { dMin = d;  idObj = 2;  qHit = q; }\n  p.xz = Rot2D (p.xz, rotAng);\n  qq = p;\n  qq.y -= 3.1;\n  qq.yz = Rot2D (qq.yz, 0.3 * pi + 0.1 * rotAng);\n  q = qq;\n  r = length (q.xz);\n  d = max (r - 0.25, abs (q.y) - 0.1 * (1. - 1.5 * r));\n  if (d < dMin) { dMin = d;  idObj = 3;  qHit = q; }\n  d = length (q - vec3 (0., clamp (q.y, -0.2, 0.), 0.)) - 0.15;\n  if (d < dMin) { dMin = d;  idObj = 4;  qHit = q; }\n  for (float k = 0.; k < 2.; k ++) {\n    q = qq;\n    if (k > 0.) q.xz = Rot2D (q.xz, pi / 6.);\n    a = atan (q.z, - q.x);\n    q.xz = Rot2D (q.xz, 2. * pi * (floor (6. * a / (2. * pi) + 0.5) / 6.));\n    q.x += 0.2;\n    q.y -= 0.01 * (1. - 2. * k) + 0.4 * dot (q.xz, q.xz);\n    q.z *= 2.5;\n    d = 0.5 * max (length (q.xz + vec2 (0.4, 0.)) - 0.5, abs (q.y) - 0.03 * (1.2 - length (q.xz)));\n    if (d < dMin) { dMin = d;  idObj = 5;  qHit = q; }\n  }\n  return szFac * dMin;\n}\n\nvoid SetFlwConf ()\n{\n  float s;\n  s = length (vec3 (gId.xy, gId.x + gId.y)) / gSize;\n  szFac = 0.7 * (1. - 0.2 * s * s + 0.2 * (Hashfv2 (17. * gId + 99.) - 0.5));\n  s = Hashfv2 (23. * gId + 99.) - 0.5;\n  dTwist = sign (s);\n  s = max (0.1, abs (s)) * dTwist;\n  rotAngF = 0.2 * pi * s;\n  rotAng = 0.3 * pi * (sin (pi * s * (tCur + 10.)) + s) - rotAngF;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., SQRT3);\n  edN[2] = 0.5 * vec2 (1., - SQRT3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = 1. / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = (SQRT3/2.) - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2]));\n  pM = HexToPix (PixToHex (ro.xz));\n  gIdP = vec2 (-99.);\n  dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n    s = min (hv.x, min (hv.y, hv.z));\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz);\n    if (length (vec3 (gId.xy, gId.x + gId.y)) <= gSize) {\n      if (gId.x != gIdP.x || gId.y != gIdP.y) {\n        gIdP = gId;\n        SetFlwConf ();\n      }\n      d = ObjDf (p);\n    } else d = dstFar;\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + 0.005;\n      pM += SQRT3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n    }\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.002, -0.002, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  gIdP = vec2 (-99.);\n  d = 0.01;\n  for (int j = 0; j < 30; j ++) {\n    p = ro + rd * d;\n    gId = PixToHex (p.xz);\n    if (length (vec3 (gId.xy, gId.x + gId.y)) <= gSize) {\n      if (gId.x != gIdP.x || gId.y != gIdP.y) {\n        gIdP = gId;\n        SetFlwConf ();\n      }\n      h = ObjDf (p);\n      sh = min (sh, smoothstep (0., 0.05 * d, h));\n      d += clamp (h, 0.05, 0.5);\n    } else d += 0.2;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  vec2 vf;\n  float dstObj, a, sh, hue, spec, glit;\n  bool isBg;\n  gSize = 12.;\n  isBg = true;\n  spec = 0.1;\n  glit = 0.;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    isBg = false;\n    ro += dstObj * rd;\n    gId = PixToHex (ro.xz);\n    vn = ObjNf (ro);\n    hue = Hashfv2 (gId * vec2 (17., 27.) + 0.5);\n    if (idObj >= 3) a = atan (qHit.z, - qHit.x) / (2. * pi);\n    if (idObj == 1) {\n      col = vec3 (0.7, 0.4, 0.);\n      vf = vec2 (64., 2.);\n    } else if (idObj == 2) {\n      col = mix (vec3 (0.4, 0.1, 0.), vec3 (0.1, 0.4, 0.), Fbm2 (16. * ro.xz));\n      vf = vec2 (16., 10.);\n    } else if (idObj == 3) {\n      col = HsvToRgb (vec3 (mod (hue + 0.6, 1.), 1., 0.7)) *\n         (0.7 + 0.3 * SmoothBump (0.05, 0.95, 0.01, mod (16. * a, 1.)));\n      vf = vec2 (32., 1.);\n    } else if (idObj == 4) {\n      col = HsvToRgb (vec3 (mod (hue + 0.1, 1.), 0.7, 1.)) *\n         (0.7 + 0.3 * SmoothBump (0.05, 0.95, 0.01, mod (8. * a, 1.)));\n      vf = vec2 (64., 1.);\n    } else if (idObj == 5) {\n      col = HsvToRgb (vec3 (mod (hue, 1.), 0.7 + 0.3 * mod (7. * hue, 1.), 1.));\n      col *= 1. - 0.1 * SmoothBump (0.05, 0.95, 0.01, mod (16. * a, 1.));\n      spec = 0.05;\n      glit = 500. * step (0.01, max (0., dot (vn, sunDir))) *\n         pow (max (0., dot (sunDir, reflect (rd, vn))), 16.) *\n         pow (1. - 0.6 * abs (dot (normalize (sunDir - rd), VaryNf (1000. * ro, vn, 2.))), 8.);\n      vf = vec2 (128., 0.1);\n    }\n    vn = VaryNf (vf.x * qHit, vn, vf.y);\n    sh = ObjSShadow (ro, sunDir);\n  } else if (rd.y < 0.) {\n    isBg = false;\n    dstObj = - ro.y / rd.y;\n    ro += dstObj * rd;\n    vn = VaryNf (16. * ro, vec3 (0., 1., 0.), 5. * (1. - smoothstep (0.5, 1., dstObj / dstFar)));\n    sh = (dstObj < dstFar) ? ObjSShadow (ro, sunDir) : 1.;\n    col = mix (vec3 (0.4, 0.1, 0.), vec3 (0.1, 0.4, 0.), Fbm2 (16. * ro.xz));\n  }\n  if (isBg) col = vec3 (0., 0., 0.2);\n  else {\n    col = col * (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.)) + vec3 (1., 1., 0.5) * sh *\n       (glit + spec * pow (max (dot (normalize (sunDir - rd), vn), 0.), 64.));\n  }\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.1 * pi;\n  el = -0.13 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az +=  pi * (SmoothBump (0.25, 0.75, 0.25, mod (0.01 * tCur, 1.)) - 0.5);\n  }\n  el = clamp (el, - 0.4 * pi, -0.1 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -45.);\n  zmFac = 15. - 10. * SmoothBump (0.25, 0.75, 0.15, mod (az / pi, 1.));\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  dstFar = 100.;\n  sunDir = vuMat * normalize (vec3 (0.5, 1., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.1, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}