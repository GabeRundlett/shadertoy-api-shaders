{
    "Shader": {
        "info": {
            "date": "1391639518",
            "description": "messing around with my previous shader . . .",
            "flags": 0,
            "hasliked": 0,
            "id": "lsS3zc",
            "likes": 105,
            "name": "Particle Fireworks",
            "published": 3,
            "tags": [
                "2d",
                "motionblur",
                "particles",
                "physics"
            ],
            "usePreview": 0,
            "username": "mu6k",
            "viewed": 6812
        },
        "renderpass": [
            {
                "code": "/*by musk License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\tmessing around with my previous shader . . .\n\t\n\n*/\n\n//bounce count drasticaly reduces performance for long simulations\n//setting them to zero disables bouncing but drastically improves framerate\n#define max_floor_bounce 4 \n#define max_wall_bounce 8\n\n//motion blur! reccomended\n#define motion_blur\n\n//nr of particles, \n//try with 100, 200, 10, 1000\n#define samples 20\n\n//brightness conntrols the how much light each particle emits\n//reduce brightness if you put in more particles\n#define brightness 2.6\n\n//how many seconds you want each simulation to run\n//try with 4.0, 2.0, 1.0, 0.5, 0.33, 0.2\n#define time_per_simulation 4.0\n\n//time offset to get a nice screenshot ;)\n#define time_offset -5.75\n\n//solve 2nd order polynomial, return the maximum of two solutions\n//could have optimised for this particular example... meh...\nfloat second(float a,float b,float c)\n{\n\tfloat x1 = (-b+sqrt((b*b-4.0*a*c)))/(2.0*a);\n\tfloat x2= (-b-sqrt((b*b-4.0*a*c)))/(2.0*a); \n\treturn max(x1,x2);\n}\n\n//given initial values compute position after t seconds\nvec3 physics(vec3 pos, vec3 vel, vec3 acc, float t)\n{\n\t//this loop processes upto max_bounces collisions... nice :)\n\tfor (int i=0; i<max_floor_bounce; i++)\n\t{\n\t\tfloat tc = second(acc.y*.5,vel.y,pos.y);\n\t\t//now we know that there will be a collision with the plane \n\t\t//in exactly tc seconds\n\t\t\n\t\tif (t>tc) //if time is greater than time of collision\n\t\t{\n\t\t\tt-=tc; //process the collision\n\t\t\tpos = pos + vel*tc + acc*tc*tc*.5;\n\t\t\tvel = vel + acc*tc;\n\t\t\tvel.y*=-.5; //make it bounce\n\t\t\tvel.x=vel.x*.8+sin(pos.x*4.0)*length(vel)*.5;\n\t\t}\n\t\telse break; //it wont collide, yay!\n\t}\n\n\tpos = pos + vel*t + acc*t*t*.5; // x = v*t + .5*a*t^2\n\n\tfloat ar = iResolution.x/iResolution.y;\n\tfloat hwall = 8.0*ar;\n\t\n\tfor (int i=0; i<max_wall_bounce; i++)\n\t{\n\t\tif (pos.x>+hwall) pos.x = 2.0*hwall-pos.x;\n\t\telse if (pos.x<-hwall) pos.x = -2.0*hwall-pos.x;\n\t\telse break;\n\t}\n\treturn pos;\n}\n\nfloat hash(float x)\n{\n\treturn fract(sin(x*.0127863)*17143.321); //decent hash for noise generation\n}\n\nfloat hash(vec2 x)\n{\n\treturn fract(cos(dot(x.xy,vec2(0.37311,53.21))*121.1126143)*412.0); \n}\n\nvec3 cc(vec3 color, float factor,float factor2) // color modifier\n{\n\tfloat w = color.x+color.y+color.z;\n\treturn mix(color,vec3(w)*factor,w*factor2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy -.5;\n\tuv.x *= iResolution.x/iResolution.y;\n\t\n\tuv*=16.0;\n\t\n\tfloat acc = .0;\n\t\n\tfloat t = iTime + time_offset;\n\t\n\t//new simulation after every time_per_simulation seconds\n\tfloat mt = mod(t,time_per_simulation);\n\tfloat seed = t-mt; //the seed to generate new variables\n\t\n\tfor (int sampleIndex = 0; sampleIndex<samples; sampleIndex++)\n\t{\n\t\t#ifdef motion_blur\n\t\tfloat tnoise = hash(uv.xy+vec2(sampleIndex,sampleIndex)-vec2(acc))*(1.0/24.0);\n\t\t#else\n\t\tfloat tnoise = .0;\n\t\t#endif\n\t\t\n\t\tfloat iseed = seed + float(sampleIndex); //the seed for each particle\n\t\t\n\t\tfloat iangle = 3.14159*2.0*hash(iseed);\n\t\tfloat imagnitude = 64.0*hash(iseed+15.420)*hash(seed+14.2)+4.0;\n\t\tfloat angle = 3.14159*2.0*hash(seed);\n\t\tfloat magnitude = 148.0*hash(seed)*hash(seed+4.0);\n\t\tvec2 pos = vec2(hash(seed+2.0),hash(seed+3.0))*8.0-4.0;\n\t\t\n\t\t\n\t\t\n\t\tvec3 p = (\n\t\t\tphysics(\n\t\t\t\tvec3(pos.x,pos.y+8.0,8.0), //initial position\n\t\t\t\tvec3(cos(iangle),sin(iangle),.0)*imagnitude+\n\t\t\t\tvec3(cos(angle),sin(angle),.0)*magnitude,\n\t\t\t\tvec3(.0,-60.0,.0),  //acceleration\n\t\t\t\tmt+tnoise ));\n\t\t\n\t\tvec2 temp = uv-p.xy+vec2(.0,8.0);\n\t\ttemp/=iResolution.y/300.0; //adjust the size of the particles\n\t\tfloat s = sqrt(dot(temp,temp));\n\t\t//s-=1.0;\n\t\ts*=iResolution.y*.05;\n\t\t//s = min(1.0,max(.0,s));\n\t\t\n\t\tacc+=1.0/(s+1.0);\n\t}\n\t\t\n\tvec3 part_color = vec3(cos(seed*13.1230),cos(seed*15.5310),cos(seed*17.55));\n\tpart_color = normalize(abs(part_color));\n\tvec3 color = vec3(0.1,.1,.3)+part_color*acc*brightness;\n\n\t//color = max(color,1.);\n\t\n\t//color = mix(color*color,color,1.4);\n\tcolor *=.8;\n\tcolor -= length(uv)*.005;\n\tcolor = cc(color,.5,.5);\n\tcolor = vec3(1.2)*color/(vec3(1.0)+color);\n\tcolor += hash(uv.xy+color.xy)*.02;\n\t\n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}