{
    "Shader": {
        "info": {
            "date": "1492787058",
            "description": "An inefficient implementation of Parameterized Gabor Filters. Feel free to change the parameters to play with it. For better and more fancier implementations, visit: [url]https://www.shadertoy.com/results?query=gabor[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "4sBcRV",
            "likes": 3,
            "name": "Parameterized Gabor Filters",
            "published": 3,
            "tags": [
                "2d",
                "filter",
                "gabor"
            ],
            "usePreview": 0,
            "username": "starea",
            "viewed": 744
        },
        "renderpass": [
            {
                "code": "/** \n * Parameterized Gabor Filters by Ruofei Du (DuRuofei.com)\n * Link to demo: https://www.shadertoy.com/view/4sBcRV\n * starea @ ShaderToy, License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. \n *\n * Reference: \n * [1] Gabor Filters: https://en.wikipedia.org/wiki/Gabor_filter\n *\n * Forked:\n * [1] iq's Palettes: https://www.shadertoy.com/view/ll2GD3\n *\n * Related & Better Implementation:\n * [1] osuush's Interactive Gabor Patch: https://www.shadertoy.com/view/MdjGWy\n * [2] Fabrice's Gabor 4: normalized https://www.shadertoy.com/view/XlsGDs\n * [3] Fabrice's Gabor 3: https://www.shadertoy.com/view/MsfXzM\n * [4] Fabrice's Gabor 2: https://www.shadertoy.com/view/XsBGDc\n **/\nconst float PI = 3.1415926536;\nconst float PI2 = PI * 2.0; \n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 palBlueGreen(in float x) {\n    return pal( (x + 1.0) * 0.5, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float filterPeriod = 2.0 * sin(iTime) + 4.0; \t// 7.0; \n    float elongation = sin(iTime) + 2.0; \t\t\t//1.0; \n    float filterSize = (sin(iTime) + 1.0) * 5.0 + 10.0;  // the wavelength of the sinusoidal factor\n    float sigma = 7.0 / 3.0; // the standard deviation of the Gaussian envelope \n    float phase = 0.0; // the phase offset in degree\n    \n    vec2 mouse = iMouse.xy / iResolution.xy * 2.0 - 1.0; \n    \n    // Orientation of filter in degrees, specified as a numeric scalar in the range [0 180], \n    // which represents the orientation of the normal to the parallel stripes of a Gabor function\n    float orientation = atan(mouse.x, mouse.y);\n    \n    float omega = PI2 / filterPeriod; \n    float major_sigq = 2.0 * pow(sigma, 2.0);\n\tfloat minor_sigq = 2.0 * pow(sigma * elongation, 2.0);\n    \n    vec2 uv2 = uv * 2.0 - 1.0;\n    uv2 *= iResolution.xy / iResolution.yy;\n    vec2 uvSize = uv2 * filterSize / 2.0; \n    \n    float major =  uvSize.x * cos(orientation) + uvSize.y * sin(orientation); \n    float minor = -uvSize.x * sin(orientation) + uvSize.y * cos(orientation); \n    float phase0 = exp(-pow(major, 2.0) / major_sigq - pow(minor, 2.0) / minor_sigq); \n    float res = clamp(cos(omega * major + radians(phase)) * phase0, -1.0, 1.0);\n    \n    if (iMouse.z > 0.5)\n\t    fragColor = vec4(palBlueGreen(res), 1.0);\n    else\n\t\tfragColor = (res > 0.0) ? vec4(0.0, 0.0, res, 1.0) : vec4(-res, 0.0, 0.0, 1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}