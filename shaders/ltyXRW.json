{
    "Shader": {
        "info": {
            "date": "1483299930",
            "description": "wait ~20 seconds in.",
            "flags": 96,
            "hasliked": 0,
            "id": "ltyXRW",
            "likes": 2,
            "name": "Moar Particles",
            "published": 3,
            "tags": [
                "particles",
                "shake",
                "at",
                "stick",
                "moar",
                "than",
                "can"
            ],
            "usePreview": 0,
            "username": "voz",
            "viewed": 788
        },
        "renderpass": [
            {
                "code": "\n\n//-----------------CONSTANTS MACROS-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define MAX_DIM (max(iResolution.x,iResolution.y))\n\n//-----------------UTILITY MACROS-----------------\n\n#define time ((sin(float(__LINE__))/PI/GR/E+1.0/GR/PI/E)*iTime+1000.0)\n#define sphereN(uv) (clamp(1.0-length(uv*2.0-1.0), 0.0, 1.0))\n#define clip(x) (smoothstep(0.333, .75, x))\n#define TIMES_DETAILED (1.0)\n#define angle(uv) (atan(uv.y, uv.x))\n#define angle_percent(uv) ((angle(uv)/PI+1.0)/2.0)\n#define hash(p) (fract(sin(vec2( dot(p,vec2(127.5,313.7)),dot(p,vec2(239.5,185.3))))*43458.3453))\n\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n#define rormal(x) (normalize(sin(vec3(time, time/GR, time*GR)+seedling)*.25+.5))\n#define rotatePoint(p,n,theta) (p*cos(theta)+cross(n,p)*sin(theta)+n*dot(p,n) *(1.0-cos(theta)))\n\nfloat saw(float x)\n{\n    x/= PI;\n    float f = mod(floor(abs(x)), 2.0);\n    float m = mod(abs(x), 1.0);\n    return f*(1.0-m)+(1.0-f)*m;\n}\nvec2 saw(vec2 x)\n{\n    return vec2(saw(x.x), saw(x.y));\n}\n\nvec3 saw(vec3 x)\n{\n    return vec3(saw(x.x), saw(x.y), saw(x.z));\n}\nvec4 saw(vec4 x)\n{\n    return vec4(saw(x.x), saw(x.y), saw(x.z), saw(x.w));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec4 s = texture(iChannel0, uv);\n    vec4 s2 = texture(iChannel1, uv);\n    \n    float w = smoothstep(0.0, 1.0, length(s2.zw*2.0-1.0)/sqrt(2.0));\n    \n    fragColor.rgb = (s.rgb*w+\n                     \n                      (1.0-w));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\n//-----------------CONSTANTS MACROS-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define MAX_DIM (max(iResolution.x,iResolution.y))\n\n//-----------------UTILITY MACROS-----------------\n\n#define time ((sin(float(__LINE__))/PI/GR/E+1.0/GR/E/PI)*iTime+1000.0)\n#define sphereN(uv) (clamp(1.0-length(uv*2.0-1.0), 0.0, 1.0))\n#define clip(x) (smoothstep(0.25, .75, x))\n#define TIMES_DETAILED (1.0)\n#define angle(uv) (atan(uv.y, uv.x))\n#define angle_percent(uv) ((angle(uv)/PI+1.0)/2.0)\n#define hash(p) (fract(sin(vec2( dot(p,vec2(127.5,313.7)),dot(p,vec2(239.5,185.3))))*43458.3453))\n\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n#define rormal(x) (normalize(sin(vec3(time, time/GR, time*GR)+seedling)*.25+.5))\n#define rotatePoint(p,n,theta) (p*cos(theta)+cross(n,p)*sin(theta)+n*dot(p,n) *(1.0-cos(theta)))\n\nfloat saw(float x)\n{\n    float f = mod(floor(abs(x)), 2.0);\n    float m = mod(abs(x), 1.0);\n    return f*(1.0-m)+(1.0-f)*m;\n}\nvec2 saw(vec2 x)\n{\n    return vec2(saw(x.x), saw(x.y));\n}\n\nvec3 saw(vec3 x)\n{\n    return vec3(saw(x.x), saw(x.y), saw(x.z));\n}\nvec4 saw(vec4 x)\n{\n    return vec4(saw(x.x), saw(x.y), saw(x.z), saw(x.w));\n}\n\n//-----------------SEEDLINGS-----------------------\nfloat seedling = 0.0;\nfloat stretch = 1.0;\nvec2 offset = vec2(0.0);\nfloat last_height = 0.0;\nfloat scale = 1.0;\nfloat extraTurns = 0.0;\nfloat aspect = 1.0;\nconst int numWeights = 32;\n\nvec3 weights[numWeights];\n\nfloat lowAverage()\n{\n    const int iters = numWeights;\n    float product = 1.0;\n    float sum = 0.0;\n    \n    float smallest = 0.0;\n    \n    for(int i = 0; i < iters; i++)\n    {\n        float sound = texture(iChannel1, vec2(float(i)/float(iters), 0.5)).r;\n        \n        product *= sound;\n        sum += sound;\n        \n        weights[i].r = sound;\n    }\n    for(int i = 0; i < iters; i++)\n        weights[i].gb = vec2(sum/float(iters), pow(product, 1.0/float(iters)));\n    return max(sum/float(iters), pow(product, 1.0/float(iters)));\n}\n//-----------------TREES---------------------------\nfloat distTree = 0.0;\nfloat angleTree = 0.0;\n\n//-----------------BASE IMAGE--------------------------\n\nvec4 stars(vec2 uv)\n{\n    float density = 2.0;\n    uv *= density;\n    float s = floor(uv.x)*1234.1234+floor(uv.y)*123.123;\n    vec2 p = floor(uv)+saw(floor(uv)+iTime+s)*.5+.25;\n    \n    float l = length(p-uv);\n    float f = smoothstep(.1*GR, 1.0, exp(-l*8.0));\n    \n    return vec4(clamp(flux(f+s+seedling)*f+f*f*f, 0.0, 1.0), f);\n}\n\nvec4 galaxy(vec2 uv)\n{\n    uv = rotatePoint(vec3(uv, 0.0), vec3(0.0, 0.0, 1.0), iTime*PI).xy;;\n    vec2 uv0 = uv;\n    float r = length(uv);\n    scale = 2.5*(GR);\n\tuv *= scale;\n    \n    float ratio = length(fwidth(uv));\n    \n    float r1 =  pow(log(length(uv)+1.), 2.0/log(ratio+E));\n    float r2 = pow(log(length(uv)+1.), 1.5/log(ratio+E));\n    \n    float rotation = time*4.0*PI;\n    \n    float theta1 = atan(uv.y, uv.x)-r1*PI+rotation*.5-rotation;\n    float theta2 = atan(uv.y, uv.x)-r2*PI+rotation*.5-rotation;\n    \n    float plant = time+seedling+distTree+angleTree;\n    \n    \n    float h = 0.0;\n    for(int i = 0; i < numWeights; i++)\n    {\n        float w = abs(float(i)-saw(seedling+time)*float(numWeights));\n        if(w < 1.0)\n        {\n            h += weights[i].r*w;\n        }\n    }\n    \n    plant += h;\n    \n    \n    \n    float arms = acos(1.0-(cos(theta1)*cos(theta1)+sqrt(cos(theta1+PI)*cos(theta1+PI)))/2.0)\n              + cos(1.0-(cos(theta2)*cos(theta2)+cos(theta2+PI/2.)*cos(theta2+PI/2.))/2.0);\n    \n    plant = plant*PI+arms;\n    vec4 color = vec4(flux(plant)+\n                      (1.0-smoothstep(0.0, .5/5.0, saw(plant-time))), 1.0)\n        *(1.0-smoothstep(4.5/5.0, 1.0, saw(plant-time)));\n    \n    color += stars(uv)*arms;\n    vec4 final = clamp(color/2.0, 0.0, 1.0);\n         \n    \n    final /= r1;\n    \n\tfinal = (clamp(final, 0.0, 1.0));\n    \n    \n    float weight = smoothstep(1.0/PI/GR/E, 1.0/PI, saw(arms*PI*2.0+time)*length(clamp(final.rgb, 0.0, 1.0)));\n    return weight*clamp(final*smoothstep(0.0, 1.0/GR/PI/E, 1.0-r), 0.0, 1.0);\n}\n\n\n//-----------------IMAGINARY TRANSFORMATIONS-----------------\n\nvec2 cmul(vec2 v1, vec2 v2) {\n\treturn vec2(v1.x * v2.x - v1.y * v2.y, v1.y * v2.x + v1.x * v2.y);\n}\n\nvec2 cdiv(vec2 v1, vec2 v2) {\n\treturn vec2(v1.x * v2.x + v1.y * v2.y, v1.y * v2.x - v1.x * v2.y) / dot(v2, v2);\n}\n\nvec2 mobius(vec2 uv)\n{\n    \n    //numerator /= (abs(denominator)+1.0);\n    \n    vec2 quotient = vec2(0.0);\n    const int bends = 8;\n    for(int i = 0; i < bends; i++)\n    {\n       \tfloat iteration = float(i)/float(bends);\n        vec2 numerator = cmul(uv, sin(vec2(time+seedling-2.0*PI*sin(-iteration+time/GR), time/GR+seedling-2.0*PI*sin(iteration+time)))).xy;\n        vec2 denominator = cmul(uv, sin(vec2(time+seedling-2.0*PI*sin(-iteration+time/GR), time/GR+seedling-2.0*PI*sin(iteration+time)))).xy\n            +vec2(cos(iteration*16.0*PI+sin(time*PI+seedling)), sin(iteration*16.0*PI+sin(time*PI+seedling)))*iteration*12.0;\n        vec2 final = (cdiv(numerator, denominator));\n        quotient += final/float(bends)*log(MAX_DIM/2.0);\n        \n        \n    }\n        \n    float a = atan(quotient.y, quotient.x);\n    \n    angleTree = a;\n    distTree = length(quotient.xy);\n    \n    //quotient = rotatePoint(vec3(quotient, 0.0), vec3(0.0, 0.0, 1.0), a).xy;\n    vec2 next = quotient;\n\n\n    float denom = length(fwidth(uv));//max(fwidth(uv.x),fwidth(uv.y));\n    denom += 1.0-abs(sign(denom));\n\n    float numer = length(fwidth(next));//min(fwidth(next.x),fwidth(next.y));\n    numer += 1.0-abs(sign(numer));\n\n    \n    \n    stretch = denom/numer;\n    \n    return quotient;\n}\n\n//-----------------ITERATED FUNCTION SYSTEM-----------------\n\nvec2 iterate(vec2 uv)\n{\n    uv += offset;\n    \n    \n    vec2 final = mobius(uv);\n    \n    seedling += (floor(final.x)*3.0+floor(final.y))*3.0;\n    \n    return final;\n}\n    \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float height = max(lowAverage(), last_height)-1.0/30.0;\n    float beat = clip(height);\n\n    last_height = height;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float scale = PI*12.0;//+sin(time*PI*PI+beat*PI));\n    uv = uv*scale-scale/2.0;\n    float aspect = iResolution.x/iResolution.y;\n    \n    uv.x *= aspect;\n    \n    vec2 uv0 = uv;\n    \n\tconst int max_iterations = 4;\n    int target = max_iterations;//-int(saw(spounge)*float(max_iterations)/2.0);\n    \n    float antispeckle = 1.0; \n    float magnification = 1.0;\n  \n\tvec4 color = vec4(0.0);\n    float center = 1.0E32;\n    float angle = atan(uv.y, uv.x)/PI;\n    float border = 1.0;\n    \n    seedling = 0.0;\n    \n        \n    offset = sin(vec2(time+seedling,\n                      -time-seedling))*(.5/E);\n    \n    border *= (1.0-color.a);//*antispeckle;\n    \n    for(int i = 0; i < max_iterations; i++)\n    {\n        float iteration = float(i)/float(max_iterations);\n\n        seedling = float(i);\n        extraTurns = float(i*i+1);\n\n        uv = iterate(uv)*antispeckle+saw(uv+time)*(1.0-antispeckle);\n        \n        antispeckle *= clamp(1.0/length(fwidth(uv)), 0.0, 1.0);\n\n        float weight = smoothstep(0.0, 1.0, pow(antispeckle, 1.0/float(i+1)));\n        \n        float draw = border*(1.0-smoothstep(1.0/PI/GR/E, 1.0/PI/GR, color.a));\n\n        float skip = saw(seedling*123.0)*(1.0-color.a);\n\n        vec3 p = vec3(saw(uv), sphereN(saw(uv)));\n        \n        center = min(center, distTree);\n        \n        angle = (angle*angleTree);\n        \n        color = clamp((galaxy((p.xy)*2.0-1.0))*skip+color, 0.0, 1.0);//+stars(p.xy)*draw, 0.0, 1.0);\n\n    }\n    float weight = color.a*pow(antispeckle, 1.0/float(max_iterations));\n    \n    vec4 s = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    \n    beat = clip(beat*GR+.125);\n    \n    fragColor.rgb = beat*clamp(vec3((color.rgb))*weight+s.rgb*(1.0-weight), 0.0, 1.0);\n    fragColor.a = beat*weight;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 7393,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/luke-mackie-2/rob-dougan-clubbed-to-death-kurayamino-variation"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//-----------------USEFUL-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n\n#define time ((saw(float(__LINE__))/GR+.5/GR)*(iTime/PI+12345.12345))\n\nfloat saw(float x)\n{\n    x/= PI;\n    float f = mod(floor(abs(x)), 2.0);\n    float m = mod(abs(x), 1.0);\n    return f*(1.0-m)+(1.0-f)*m;\n}\nvec2 saw(vec2 x)\n{\n    return vec2(saw(x.x), saw(x.y));\n}\n\nvec3 saw(vec3 x)\n{\n    return vec3(saw(x.x), saw(x.y), saw(x.z));\n}\nvec4 saw(vec4 x)\n{\n    return vec4(saw(x.x), saw(x.y), saw(x.z), saw(x.w));\n}\n\n#define R 3.0\n#define RESTITUTION .5\n\nvec4 FindArrivingParticle( vec2 arriveCoord )\n{\n    vec4 p = vec4(0.0);\n    float sum = 0.0;\n    for( float i = -R; i <= R; i++ )\n    {\n        for( float j = -R; j <= R; j++ )\n        {\n            vec2 partCoord = arriveCoord + vec2( i, j )/ iResolution.xy;\n            \n            vec4 part = texture( iChannel1, partCoord );\n            \n            \n            vec2 nextPos = part.xy + .5*(part.zw*2.0-1.0)/ iResolution.xy * R* R;\n            // arrival means within half a pixel of this bucket\n            vec2 off = (nextPos - arriveCoord)*iResolution.xy;\n            if( abs(off.x)<= sqrt(1.0)/2.0*GR && abs(off.y)<=sqrt(1.0)/2.0*GR )\n            {\n                // yes! greedily take this particle.\n                // a better algorithm might be to inspect all particles that arrive here\n                // and pick the one with the highest velocity.\n                p += part;\n                sum += 1.0;\n            }\n        }\n    }\n    // no particle arriving at this bucket.\n    return p/sum;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv0 = uv;\n    vec4 sample0 = texture(iChannel1, uv0);\n    vec4 s = texture(iChannel0, uv0);\n    vec4 arrival = FindArrivingParticle(uv);\n    \n    if(iFrame == 0)\n    {\n        fragColor = vec4(vec2(uv), vec2(0.5, 0.5));\n        return;\n    }\n    \n    float thresh = (128.0+64.0+32.0)/255.0;\n    \n    float w = clamp(s.a, 0.0, 1.0);\n    \n    if(w > thresh )//|| length(sample0.xy-uv) > sqrt(100.0)/length(iResolution.xy))\n    {\n        w = (w - thresh)/(1.0-thresh);\n        fragColor = vec4(uv0, (saw(s.xy/w)));\n        return;\n    }\n    \n    w = (thresh-w)/(thresh);\n    arrival.xy += .5*(arrival.zw*2.0-1.0)/ iResolution.xy * R * R;\n    //arrival.zw = ((arrival.zw*2.0-1.0)*.975)*.5+.5;\n    \n    fragColor.xyzw = (arrival.xyzw);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}