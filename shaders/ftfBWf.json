{
    "Shader": {
        "info": {
            "date": "1651533363",
            "description": "A basic newton fractal renderer",
            "flags": 0,
            "hasliked": 0,
            "id": "ftfBWf",
            "likes": 4,
            "name": "Purple Newtons Fractal",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "zmayhew",
            "viewed": 234
        },
        "renderpass": [
            {
                "code": "const vec2 ROOT_0 = vec2(0.5, 0.0);\nconst vec2 ROOT_1 = vec2(0.0, 0.5);\nconst vec2 ROOT_2 = vec2(1.0, 0.5);\n\nconst int ITERATIONS = 100;\n\nconst float SCALE = 1.5;\n\nconst vec3 COL_0 = vec3(0.39, 0.66, 0.97);\nconst vec3 COL_1 = vec3(0.53, 0.45, 0.97);\nconst vec3 COL_2 = vec3(0.40, 0.40, 0.90);\n\nstruct roots_t {\n    vec2 r0;\n    vec2 r1;\n    vec2 r2;\n};\n\nvec2 product(in vec2 a, in vec2 b) {\n    return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\n\nvec2 divide(in vec2 a, in vec2 b) {\n    return vec2(((a.x*b.x+a.y*b.y)/(b.x*b.x+b.y*b.y)),((a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y)));\n}\n\nvec2 f(in roots_t roots, in vec2 z) {\n    return product(product(z - roots.r0, z - roots.r1), z - roots.r2);\n}\n\nvec2 f_prime(in roots_t roots, in vec2 z) {\n    vec2 z2 = 3.0 * product(z, z);\n    vec2 z1 = -2.0 * product(z, roots.r0 + roots.r1 + roots.r2);\n    vec2 z0 = product(roots.r0, roots.r1 + roots.r2)\n            + product(roots.r1, roots.r2);\n    return z2 + z1 + z0;\n}\n\nvec2 newton_iteration(in roots_t roots, in vec2 z_n) {\n    return z_n - divide(f(roots, z_n), f_prime(roots, z_n));\n}\n\nvec2 newton_loop(in roots_t roots, in vec2 initial_z) {\n    vec2 z = initial_z;\n    for (int i = 0; i < ITERATIONS - 1; ++i) {\n        z = newton_iteration(roots, z);\n    }\n    return z;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (((fragCoord/iResolution.y) * 2.0) - vec2(1.0, 1.0))/SCALE;\n    vec2 mouse = (((iMouse.xy/iResolution.y) * 2.0) - vec2(1.0, 1.0))/SCALE;\n\n    \n    roots_t roots = roots_t(\n        mouse,\n        ROOT_1,\n        ROOT_2\n    );\n\n    \n    if (distance(uv, roots.r0) < 0.05\n     || distance(uv, roots.r1) < 0.05\n     || distance(uv, roots.r2) < 0.05\n       ) {\n        fragColor = vec4(1.0);\n        return;\n    }\n    \n    vec2 z = newton_loop(roots, uv);\n    \n    float d_0 = distance(z, roots.r0);\n    float d_1 = distance(z, roots.r1);\n    float d_2 = distance(z, roots.r2);\n    \n    vec3 col = COL_2;\n    \n    if (d_0 < d_1 && d_0 < d_2) {\n        col = COL_0;\n    } else if (d_1 < d_2 && d_1 < d_0) {\n        col = COL_1;\n    }\n    \n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}