{
    "Shader": {
        "info": {
            "date": "1719704741",
            "description": "I will try adding other vowels and phenomes, for now enjoy \"AAaAAAaAAAAAAaaAAAAaaaAAAAAAAaaAAAAaAAA\nAAaAAAaAAAAAAaaAAAAaaaAAAAAAAaaAAAAaAAAAAaAAAaAAAAAAaaAAAAaaaAAAAAAAaaAAAAaAAAAAaAAAaAAAAAAaaAAAAaaaAAAAAAAaaAAAAaAAAAAaAAAaAAAAAAaaAAAAaaaAAAAAAAaaAAAAaA\"",
            "flags": 8,
            "hasliked": 0,
            "id": "X3dXWf",
            "likes": 11,
            "name": "Voice Synthesis",
            "published": 3,
            "tags": [
                "sound",
                "music",
                "synthesis",
                "synth",
                "speech",
                "voice",
                "phonetic",
                "sing"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 212
        },
        "renderpass": [
            {
                "code": "float spiral(vec2 uv) {\n    vec2 nv = normalize(uv);\n    float a = atan(uv.y, uv.x);\n    float l = sqrt(length(uv));\n    uv = nv * (sin(l * 3.0 + iTime * 2.0) + sin(a * 4.0));\n    float s = sin(a * 4.0);\n    float d = distance(nv * (s * 0.2 + 0.5), uv);\n    d = cos(d * l);\n    \n    return clamp(-exp(-d*1.0) + 0.3 / (d * d), 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y) * 2.0;\n    float t = iTime * 0.2;\n\n    vec3 col = vec3(spiral(uv * cos(t - cos(t * 3.0 + cos(t * 4.0))) + vec2(-uv.y, uv.x) * sin(t - sin(t * 3.0))));\n    col.b *= 0.4;\n    uv -= col.gb;\n    col.r += col.r + spiral(uv * cos(0.5 + t - cos(t * 3.0 + cos(t * 4.0))) + vec2(-uv.y, uv.x) * sin(0.5 + sin(t * 3.0) + t));\n    uv += col.rr;\n    col.g += col.g + spiral(uv * cos(1.0 - t + sin(t  * 3.0 - sin(t * 5.0))) + vec2(-uv.y, uv.x) * sin(1.0 - sin(t * 3.0)));\n    uv -= col.rg;\n    col.b += col.b + spiral(uv * cos(1.5 - cos(t * 3.0)) + vec2(-uv.y, uv.x) * sin(1.5 - sin(t * 3.0)));\n    col = 1.0 - sqrt(col);\n    col = sin(col * 2.0) * 0.5 + 0.5;\n    col = (0.5 + col) * (1.5 - abs(cos(length(col) * 3.0)));\n    col = mix(vec3(dot(col, vec3(0.299, 0.587, 0.114))), col, 4.0);\n\n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float T = 6.28318531;\n\nfloat ts = 0.0;\n\nfloat hash11(float p) {\n    uint u = floatBitsToUint(p * 1231.1031) * 2597334677u;\n    return float(u * u * 2597334677u) / float(~0u);\n}\n\nfloat noise(float p) {\n\tfloat i = floor(p);\n\tfloat f = fract(p);\n    f *= f * (3.0 - 2.0 * f);\n\treturn mix(hash11(i), hash11(i + 1.0), f);\n}\n\nfloat A(float t) {\n    float F = 90.0;\n    float F2 = F / 3.0;\n    float M = 1.0 / (1.0 + ts * ts);\n    \n    float vb = 0.0;\n    float tFT = t * F * T - (M - 1.0) * 15.0;\n    float tF2T = t * F2 * T - (M - 1.0) * 45.0;\n    float tF2 = t * F2 + (M - 1.0) * 45.0;\n    vb += cos(tFT * 1.0) * cos(tF2T * 1.0 + noise(tF2 - 321.85652) * 3.0 * M) * 0.1;\n    vb += cos(tFT * 3.0) * cos(tF2T * 3.0 + noise(tF2 - 311.54742) * 3.0 * M) * 0.5;\n    vb -= cos(tFT * 5.0) * cos(tF2T * 5.0 + noise(tF2 - 222.84654) * 3.0 * M) * 0.5;\n    vb += cos(tFT * 6.0) * cos(tF2T * 6.0 + noise(tF2 - 111.63453) * 3.0 * M);\n    vb -= cos(tFT * 8.0) * cos(tF2T * 8.0 + noise(tF2 - 845.86532) * 3.0 * M);\n    vb -= cos(tFT * 9.0) * cos(tF2T * 9.0 + noise(tF2 - 655.11123) * 3.0 * M) * 0.3;\n    vb += cos(tFT * 12.0) * cos(tF2T * 12.0 + noise(tF2 - 531.63329) * 3.0 * M) * 0.5;\n    \n    return vb;\n}\n\nvec2 mainSound(int samp, float t) {\n    ts = fract(abs(0.5 - fract(t * 2.0)) - abs(0.5 - fract(t * 0.5)) * 3.0);\n    if (t < 4.0) ts = 0.0;\n    float s = A(t - 0.0251262) - A(t + 0.0365754) + A(t - 0.07462323) - A(t + 0.0726861);\n    if (t < 4.0) ts = 0.99;\n    s *= ts * smoothstep(1.0, 0.99, ts);\n    return vec2(s) * 0.1;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}