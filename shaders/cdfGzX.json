{
    "Shader": {
        "info": {
            "date": "1666493786",
            "description": "Yet another fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "cdfGzX",
            "likes": 6,
            "name": "Fractal mosaic 27 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    return\n        abs(fract((a+vec2(1.,0.5))*1.5)-.5)\n    ;\n}\n\n#define triwave_(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1_(p) (abs(fract(p/8.0)-.5)-abs(fract(p/2.0)-.5)/2.)\nfloat t1_(vec2 c, vec2 p){\n    return triwave_((.5 - length( min(p=fract(p*sign(triwave1_(c*c.y))), 1.-p.yx) )));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    vec2 uv = (fragCoord)/iResolution.y/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/8.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/2.;\n    bool t3 = false;\n    for(int k = 0; k < 9; k++){\n        //uv.x += t1_(floor(uv/2.),floor(uv/2.));\n        \n        t3 = uv.x > uv.y && t3;\n        \n        uv = abs(triangle_wave(uv.yx-.5)-.5);\n        //uv += fmod(uv.x*8.,8.)/8.;\n        if(t3 || uv.y < uv.x) {\n            col =\n                max(col,vec3(col.yz,uv.x-uv.y))\n                //abs(1.-col-vec3(col.yz,uv.x-uv.y))\n\n                //max(1.-col,vec3(col.yz,uv.x-uv.y))\n\n                //abs(col-vec3(col.yz,uv.x-uv.y))\n                //vec3(col.yz,uv.x-uv.y)\n            ;\n            //uv *= 2.; //another interesting pattern\n        }\n    }\n    fragColor = vec4(col*2.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound(int samp, float time){\n  \n  float s1 =\n      8.;\n  //time = time*(1. + fmod(time,2.))/2.;\n\n  //time += fpow(time*8.,2.)*8.+fpow(time*4.,2.)*4.+fpow(time*2.,2.)*2.;\n  \n  //time -= fpow(time*2.,2.);\n  \n  //time = (time + floor(floor(time*s1)+floor(time/s1))/s1)/2.;\n  float s2 = 8.,\n  m5 = fmod(time+floor(time/s2),s2),\n  m4 = fmod(floor(time/s1+m5/s1)*floor(time/s1)/s2,2.),\n  t=\n      time/(1.+m4)\n      //time/2.\n      //(time+floor(time*s1)/s1)/(1.+m4)\n      //time/(1.+m4)+floor(time*s1)/s1\n  ,\n  m1 =\n      fmod(t+m5,s2)\n  ,\n  m3 =\n      fmod(t/(m1+.5),s2)\n      //fmod(t*pow(2.,fmod(t/8./2.,3.)),s2)\n  ;\n  //t += floor(t*s1+floor(t/s1))/s1;\n  t *= s1*s1;\n  t /=\n      (1.+fmod((t/s1+floor(t/s1/s1))/2.,2.))\n  ;\n\n\n  float m2 =\n      1. + fmod(t/s1,s1)\n  ;\n  \n  //m3 = mod(floor(t/s1),1.+m3);\n  //m2 = mod(floor(t/s1),1.+m2);\n\n  \n  float a=\n      //64.*(1.-sqrt(fract(t/s1)/1.25))*.2\n      abs(1.-log(fract(t/s1)))\n      //log(1.+fract(-t/s1))\n      //pow(1.75,2.-log(fract(t/s1)))\n  ,\n  \n  nb = time*pow(2.,floor(m3+m2)/5.+6.5);\n\n  return\n      abs(.5-vec2(fract(nb*.998*2.),fract(nb)))*a\n      \n      //sitar\n      //log(abs(a/16.-abs(.5-vec2(fract(nb*.998*2.),fract(nb)))*a))\n      \n      //vec2(fract(nb*.998/m2*s1)*a,fract(nb/m2*s1)*a)\n  ;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "float fmod2(float a, float b){\n    return mod(floor(a),b)*b;\n}\n\nfloat fmod1(float a, float b){\n    //a += fmod2(a,2.);\n    //a += fmod2(a/2.+4.,b+4.);\n    //divide by powers of 2 to get interesting rhythms\n    float a1 = a;\n    //a /= 1. + mod(floor(a1/4.),2.);\n    //a /= 1. + mod(floor(a1/2.),2.);\n    return\n        mod(floor(a),b)\n        //floor(mod(mod(4.+(a),4.+floor(a/2.)),b))\n        //mod(floor(floor(a*b)/8.+floor(a/b)),b)\n        //mod(floor(a/b),b)\n        //mod(floor(a+floor(a/b)),b)\n        //mod(floor(a)+floor(a+floor(a/b)),b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    return\n        fmod1(a,b)\n        //mod(fmod1(a,b*(1.+mod(floor(a/b*4.),8.))/b),b)\n    ;\n}\n\n\n//#define fmod(a,b) mod(mod(floor((a)),floor(1.+(a)/5.)),b)\n#define fpow(x,y) pow(y,mod(floor(x),y))",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}