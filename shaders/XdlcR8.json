{
    "Shader": {
        "info": {
            "date": "1487098004",
            "description": "some voronoi slanting experiment.",
            "flags": 32,
            "hasliked": 0,
            "id": "XdlcR8",
            "likes": 52,
            "name": "voro-smooth-slant",
            "published": 3,
            "tags": [
                "voronoi",
                "smooth",
                "slant"
            ],
            "usePreview": 1,
            "username": "flockaroo",
            "viewed": 1424
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// slanting in voronoi cells\n\n#define Res (iResolution.xy)\n#define N(v) (v.yx*vec2(1,-1))\n\nvec4 getCol(vec2 pos)\n{\n    return vec4(0)+texture(iChannel0,pos/Res).x;\n}\n\nvec2 getGrad(vec2 pos)\n{\n    return texture(iChannel0,pos/Res).yz;\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    const int SampNum=6;\n    float delta=1.*iResolution.x/1080.;\n    vec2 pos0=fragCoord;\n    vec2 pos1=fragCoord;\n    vec2 pos2=fragCoord;\n    vec4 c=getCol(pos0);\n    vec4 c0=getCol(pos0);\n\tfloat sum=1.;\n    for(int i=1;i<SampNum;i++)\n    {\n        vec2 t1=normalize(N(getGrad(pos1)));\n        vec2 t2=normalize(N(getGrad(pos2)));\n       \tpos1+=t1*delta;\n       \tpos2-=t2*delta;\n        float fact=(1.-float(i)/float(SampNum));\n        //fact=.5+.5*fact;\n        //fact=1.;\n        c+=getCol(pos1)*fact;\n        c+=getCol(pos2)*fact;\n        sum+=2.*fact;\n    }\n    c/=sum;\n    //c=vec4(smoothstep(.0,1.,c.x));\n    \n\tfragColor = mix(c,c0,0.);\n\t//fragColor = vec4(getGrad(pos0)*10.+.5,0,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// created by florian berger (flockaroo) - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// slanting in voronoi cells\n\n#define CELL_SIZE 9.*pow(iResolution.x/1920.,.35)\n    \n#define N(v) (v.yx*vec2(1,-1))\n#define Res iResolution.xy\n#define Res0 iChannelResolution[0].xy\n#define Res1 iChannelResolution[1].xy\n#define PI2 6.28318530718\n\nvec4 getCol(vec2 pos)\n{\n    vec2 texc=pos/Res0.xy;\n    vec4 c=texture(iChannel0,texc);\n    //return c;\n    //vec4 bg=vec4(.9,1,.5,1);\n    vec4 bg=vec4(.8,.9,1,1)*1.;\n    c = mix(c,bg,clamp(dot(c.xyz,vec3(-1,2,-1)),0.,1.));\n    if(texc.x>1. || texc.x<0. || texc.y>1. || texc.y<0.) c=bg;\n    return c;\n}\n\nfloat getVal(vec2 pos)\n{\n    return dot(getCol(pos).xyz,vec3(.333));\n}\n\nvec2 getGrad(vec2 pos, float eps)\n{\n    vec2 d=vec2(eps,0);\n    return\n        vec2(getVal(pos+d.xy)-getVal(pos-d.xy),\n        \t getVal(pos+d.yx)-getVal(pos-d.yx))/eps/2.;\n}\n\nvec2 getGrad(vec2 pos)\n{\n    return getGrad(pos,.5);\n}\n\nvec4 getRand(vec2 pos)\n{\n\treturn texture(iChannel1,pos/Res1)*2.-1.;\n}\n\nvec2 getPoint(int x,int y,float cellSize)\n{\n    vec2 rnd=getRand(vec2(x,y)+.5).xy;\n    vec2 offs=vec2(0);\n    \n    offs += -.3*(getGrad(vec2(x,y)*cellSize/Res*Res0,.5));\n    \n    //offs = (getCol(vec2(x,y)).yz)*6.;\n    offs/=max(pow(dot(offs,offs),.25),.00001);\n    \n    // uncomment one of the bwlow lines if you want hexagonal tiling\n    //offs.x+=-.45*.5+.45*mod(float(y),2.);\n    offs.y+=-.45*.5+.45*mod(float(x),2.);\n    //offs.y+=(-.25+.5*mod(float(x),2.));\n    //offs.x-=(-.05+.1*mod(float(y),2.));\n    \n    offs+=.2*rnd;\n    \n\tvec2 v=vec2(x,y);\n    \n    return v*cellSize+cellSize*offs*3.3;\n}\n\nfloat tri01(float x)\n{\n    float m=mod(x+1.,2.);\n    return (1.-m)*2.*step(1.,m)+m;\n}\n\nfloat fillFunc(float x, float f, float smth)\n{\n\treturn clamp((f-tri01(x))/smth+.33,0.,1.);\n}\n\nvec2 TC(vec2 c)\n{\n    //all image visible on screen\n    float sc=min(Res.x/Res0.x,Res.y/Res0.y);\n    \n    //one axis of image fully visible on screen\n    //float sc=max(Res.x/Res0.x,Res.y/Res0.y);\n    \n    //compromise of the 2 above cases\n    //float sc=mix(Res.x/Res0.x,Res.y/Res0.y,.5);\n    \n    return (c-Res*.5)/sc+Res0*.5;\n}\n\n\nvec2 angularQuant(vec2 v, float num)\n{\n    float ang = floor((atan(v.y,v.x)+2.*PI2)/(PI2/num))*(PI2/num);\n    return vec2(cos(ang),sin(ang));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float cellSize=CELL_SIZE;\n\n    const int nnum=2;\n    vec2 c=fragCoord;\n    int x0 = int(c.x/cellSize+.5);\n    int y0 = int(c.y/cellSize+.5);\n\tfloat d=10000.;\n    vec2 p0=c, p1=p0, p2=p0, p3=p0;\n    vec4 col=vec4(0);\n    vec4 col2=vec4(0);\n    float sum=0.;\n    float sum2=0.;\n    // voronoi\n    for(int x=-nnum;x<nnum+1;x++)\n    {\n    \tfor(int y=-nnum;y<nnum+1;y++)\n        {\n            vec2 p=getPoint(x0+x,y0+y,cellSize);\n            float d2=length(c-p);\n            //d2*=2./(br+.3);\n            if(d2<d) { d=d2; p3=p2; p2=p1; p1=p0; p0=p; }\n        }\n    }\n    vec4 c0 = getCol(TC(p0));\n\n    // default pattern\n    float ang = getRand(p0*.2*Res1.x/Res.x+.17*iTime).y*3.;\n    vec2 c3=vec2(cos(ang),sin(ang));\n\tvec2 g=getGrad(TC(p0),cellSize/Res.x*Res0.x*.5)+.005*c3;\n    vec2 gn=normalize(g);\n    \n    // quantize angle of gn\n    //gn=angularQuant(gn,7.);\n    vec2 c2=vec2(dot(c-p0,gn),dot(c-p0,N(gn)));\n    vec4 colbw = vec4(dot(c0.xyz,vec3(.333)));\n    \n    // construct slant pattern\n    float pat = 0.;\n    pat = smoothstep(-.1,.1,c2.x);\n    c2/=cellSize;\n    pat = mix(pat,fillFunc(c2.x*3.,colbw.x,.3),.8);\n    pat = mix(pat,fillFunc(c2.x*5.,colbw.x,.1),.2);\n    pat = mix(pat,fillFunc(c2.x*9.,colbw.x,.1),.2);\n    // simple but looks best (imho):\n    pat = fillFunc(c2.x*3.,colbw.x,.2);\n    \n    fragColor = vec4(1)*pat;\n    fragColor.yz = getGrad(TC(c))+.005*c3;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}