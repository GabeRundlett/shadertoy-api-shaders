{
    "Shader": {
        "info": {
            "date": "1570294622",
            "description": "Inktober Shader #4 and #5\n\nUse mouse to draw, click on the color picker to select drawing color.\n\nLiquid technique from https://www.shadertoy.com/view/4tGfDW",
            "flags": 32,
            "hasliked": 0,
            "id": "wdyGWm",
            "likes": 53,
            "name": "Watercolor Pad",
            "published": 3,
            "tags": [
                "fluid",
                "liquid",
                "watercolor",
                "colorpicker",
                "inktober"
            ],
            "usePreview": 0,
            "username": "ivansafrin",
            "viewed": 2317
        },
        "renderpass": [
            {
                "code": "float getVal(vec2 uv)\n{\n    return noise(uv);\n}\n    \nvec2 getGrad(vec2 uv,float delta)\n{\n    vec2 d=vec2(delta,0);\n    return vec2(\n        getVal(uv+d.xy)-getVal(uv-d.xy),\n        getVal(uv+d.yx)-getVal(uv-d.yx)\n    )/delta;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 n = vec3(getGrad(fragCoord,1.0),1.0);\n\tn=normalize(n);\n    float paperColor = dot(vec3(1.0, 1.0, 0.0), n);\n    \n    fragColor = vec4(vec3((paperColor*0.05)+0.95) * (texture(iChannel0, uv).xyz), 1.0);    \n    fragColor = mix(vec4(hsv2rgb(vec3(uv.x, 0.75, 1.0)), 1.0), fragColor, smoothstep(iResolution.y-19.0, iResolution.y-20.0, fragCoord.y));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \tvec2 uv = fragCoord/iResolution.xy;   \n\n\tvec4 lastFrameData = texture(iChannel0, vec2(0.5, 1.0));\n    float brushStrength = lastFrameData.z;\n    \n    vec4 lastBrushData = texture(iChannel0, vec2(0.5, 0.0));\n    float brushHue = lastBrushData.x;\n    float brushSaturation = lastBrushData.y;\n    \n    vec4 col = texture(iChannel0, uv); \n    \n    vec4 dirCol = texture(iChannel1, uv); \n    if(fragCoord.y < iResolution.y-10.0 && fragCoord.y > 5.0) {\n        vec2 w = 1.0/iResolution.xy;  \n        vec4 tr = texture(iChannel1, uv + vec2(w.x , 0), 0.0);\n        vec4 tl = texture(iChannel1, uv - vec2(w.x , 0), 0.0);\n        vec4 tu = texture(iChannel1, uv + vec2(0 , w.y), 0.0);\n        vec4 td = texture(iChannel1, uv - vec2(0 , w.y), 0.0);\n\n        const float K = 0.2;\n        const float v = 0.55;\n\n        vec2 laplacian = tu.xy + td.xy + tr.xy + tl.xy - 4.0*dirCol.xy;\n        vec2 viscForce = vec2(v)*laplacian;\n\t\tcol = texture(iChannel0, uv - dt*dirCol.xy*w, 0.);   \n    }\n        \n\tvec2 oldBrushPos = lastFrameData.xy;\n    \n\tvec2 dirVec = iMouse.xy -  oldBrushPos;    \n\tvec4 brushColor = vec4(hsv2rgb(vec3(brushHue, (0.1 + brushStrength * brushSaturation), 0.875)), 0.0);\n        \n    float brushStregthRamp = 0.0;\n    if(brushStrength > 0.01) {\n        brushStregthRamp = 1.0;\n    }\n    \n    for(int i=0; i < 20; i++) {\n        vec2 mPos = mix(iMouse.xy, oldBrushPos, float(i)/20.0);\n    \tfloat d = 1.0 - smoothstep(0.0, 1.0, distance(fragCoord, mPos) / BRUSH_SIZE / brushStregthRamp);       \n        d *= smoothstep(0.2, 1.0, (noise(fragCoord-mPos)+0.75)/5.0) * 10.0;               \n        float bd = 1.0 - smoothstep(0.0, 1.0, distance(fragCoord, mPos) / BRUSH_SIZE / brushStregthRamp / 1.5);\n        bd *= smoothstep(0.1, 1.0, (noise(vec2(brushStrength * 20.0, 0.0) + (fragCoord-mPos)/2.0)+0.0)/5.0) * 10.0;\n    \tcol.xyz = mix(col.xyz, col.xyz * brushColor.xyz, (d + bd) * 0.05);\n    }\n\n    brushStrength -= distance(iMouse.xy, oldBrushPos) / STROKE_LENGTH;\n\n\tif(iMouse.z != lastFrameData.w) {\n        if(iMouse.z > 0.0) {\n           \t \tif(iMouse.y > iResolution.y-20.0) {\n                    brushHue = iMouse.x/iResolution.x; \n                } else {\n               \t brushStrength = 1.0;\n                 brushSaturation = 0.3 + rand(vec2(iTime, 0.0)) * 0.5;\n                }\n        } else {\n                brushStrength = 0.0;\n        }\n    }\n    brushStrength = clamp(brushStrength, 0.0, 1.0);\n    \n  \n    vec4 newAppData = vec4(iMouse.x, iMouse.y, brushStrength, iMouse.z);   \n    vec4 brushData = vec4(brushHue, brushSaturation, 0.0, 0.0); \n    col = mix(col, newAppData, smoothstep(iResolution.y-1.01, iResolution.y, fragCoord.y));\n    col = mix(brushData, col, smoothstep(0.99, 1.0, fragCoord.y));\n    \n    fragColor = col;\n    if(iFrame < 2) {\n\t\tfragColor = vec4(1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \tvec2 uv = fragCoord/iResolution.xy;   \n\n\tvec4 lastFrameData = texture(iChannel0, vec2(0.5, 0.0));\n    float brushStrength = lastFrameData.z;\n    vec4 col = texture(iChannel0, uv); \n    \n    if(fragCoord.y < iResolution.y-10.0  && fragCoord.y > 5.0) {\n        vec2 w = 1.0/iResolution.xy;  \n        vec4 tr = texture(iChannel0, uv + vec2(w.x , 0), 0.0);\n        vec4 tl = texture(iChannel0, uv - vec2(w.x , 0), 0.0);\n        vec4 tu = texture(iChannel0, uv + vec2(0 , w.y), 0.0);\n        vec4 td = texture(iChannel0, uv - vec2(0 , w.y), 0.0);\n\n        const float K = 0.2;\n        const float v = 0.55;\n\n        vec2 laplacian = tu.xy + td.xy + tr.xy + tl.xy - 4.0*col.xy;\n        vec2 viscForce = vec2(v)*laplacian;\n        col = texture(iChannel0, uv - dt*col.xy*w, 0.); \n    }\n        \n\tvec2 oldBrushPos = lastFrameData.xy;\n    \n\tvec2 dirVec = iMouse.xy -  oldBrushPos;    \n    \n    float dissolveStrength = noise(fragCoord) * 100.0;\n    float dissolveAngle = noise(fragCoord) * 6.283 * 2.0;\n    \n    dirVec += vec2(cos(dissolveAngle), sin(dissolveAngle)) * dissolveStrength;\n    \n    vec4 brushColor = vec4(dirVec.x, dirVec.y, 0.0, 0.0);\n\tfloat brushStregthRamp = 0.0;\n    if(brushStrength > 0.01) {\n        brushStregthRamp = 1.0;\n    }\n   \n    for(int i=0; i < 20; i++) {\n        vec2 mPos = mix(iMouse.xy, oldBrushPos, float(i)/20.0);\n        float bc = 1.0-clamp(distance(fragCoord, mPos) / BRUSH_SIZE / brushStregthRamp / 2.0, 0.0, 1.0);\n       \tbc *= smoothstep(0.1, 1.0, (noise(vec2(brushStrength * 20.0, 0.0) + (fragCoord-mPos)/2.0)+0.0)/5.0) * 10.0;                       \n      \tcol.xy = mix(col.xy, brushColor.xy, bc);  \n    }\n\n    col.xy *= 0.95;\n    brushStrength -= distance(iMouse.xy, oldBrushPos) / STROKE_LENGTH;\n\n\tif(iMouse.z != lastFrameData.w) {\n        if(iMouse.z > 0.0) {\n\t\t\tbrushStrength = 1.0;\n        } else {\n\t\t\tbrushStrength = 0.0;\n        }\n    }\n    brushStrength = clamp(brushStrength, 0.0, 1.0);\n      \n    vec4 newAppData = vec4(iMouse.x, iMouse.y, brushStrength, iMouse.z);   \n    col = mix(newAppData, col, smoothstep(0.99, 1.0, fragCoord.y));\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define BRUSH_SIZE 30.0\n#define STROKE_LENGTH 2000.0\n\n#define dt 0.25\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res;\n}\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}