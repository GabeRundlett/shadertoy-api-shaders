{
    "Shader": {
        "info": {
            "date": "1640519549",
            "description": "A stochastic gaussian blur effect.\nClick and drag to use different radius.",
            "flags": 32,
            "hasliked": 0,
            "id": "7tG3zW",
            "likes": 6,
            "name": "Stochastic Gaussian Blur",
            "published": 3,
            "tags": [
                "gaussianblur",
                "stochastic"
            ],
            "usePreview": 1,
            "username": "zznewclear13",
            "viewed": 701
        },
        "renderpass": [
            {
                "code": "//Gamma correction\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 color = texture(iChannel0, uv).rgb;\n    color = pow(color, vec3(0.4545));\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//We use a 2D standard normal distribution for gaussian blur, clamp its range to [-2, 2] for image sampling.\n//The MAGIC_NUMBER means its volume in range [-2, 2].\n//We can approximate that offline by random sampling 2D standard normal distribution function million times (or even more).\n\n/////////////////////////////////////////\n//          Gaussian Function          //\n/////////////////////////////////////////\n#define INV_SQRT_2PI 0.3989422804\n#define INV_2PI 0.15915494309\n//Biased, but good enough to create a beautiful gaussian blur.\n#define MAGIC_NUMBER 0.9109782835241816\n\nfloat GaussianFunction(float x, float sigma)\n{\n    float invSigma = 1.0 / sigma;\n    float gaussian = INV_SQRT_2PI * invSigma * exp(-0.5 * x * x * invSigma * invSigma);\n    return gaussian;\n}\n\nfloat Gaussian2DFunction(float x, float sigma)\n{\n    float invSigma = 1.0 / sigma;\n    float invSigmaSqr = invSigma * invSigma;\n    float gaussian = INV_2PI * invSigmaSqr * exp(-0.5 * x * x * invSigmaSqr);\n    return gaussian;\n}\n\nfloat EvaluateWeight(vec2 offset, float sampleRadius)\n{\n    float sigmaLength = sampleRadius * 0.5;\n    float dist = length(offset);\n    float gaussian = Gaussian2DFunction(dist, sigmaLength) * 16.0 * sigmaLength * sigmaLength;\n    return gaussian;\n}\n\n/////////////////////////////////////////\n//           Random Function           //\n/////////////////////////////////////////\n\nfloat seed;\nfloat GetRandom(){return fract(sin(seed++)*43758.5453123);}\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n/////////////////////////////////////////\n//           Sample Function           //\n/////////////////////////////////////////\n\n//Random sample in a (2 * sampleRadius) * (2 * sampleRadius) square.\nvec2 GetOffset(float sampleRadius)\n{\n    float randomA = GetRandom();\n    float randomB = GetRandom();\n    float offsetX = sampleRadius - randomA * sampleRadius * 2.0;\n    float offsetY = sampleRadius - randomB * sampleRadius * 2.0;\n    return vec2(offsetX, offsetY);\n}\n\nvec3 SampleImage(vec2 coord, float sampleRadius)\n{\n    vec2 offset = GetOffset(sampleRadius);\n    //Bilinear sampling, not perfect, but still good enough.\n    vec3 color = texture(iChannel0, coord + offset / iResolution.xy).rgb;\n    //It's important to linearlize color first.\n    color = pow(color, vec3(2.2));\n    float weight = EvaluateWeight(offset, sampleRadius) / MAGIC_NUMBER;   \n    return color * weight;\n}\n\n/////////////////////////////////////////\n//            Store Function           //\n/////////////////////////////////////////\n\nfloat PackIntFloat(float valueA, float valueB)\n{\n    return valueA + valueB / 256.0;\n}\n\nvoid UnpackIntFloat(float value, out float valueA, out float valueB)\n{\n    valueA = floor(value);\n    valueB = (value - valueA) * 256.0;\n}\n\n/////////////////////////////////////////\n//             Main Function           //\n/////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    seed = hash12(fragCoord) + iTime;\n    \n    float sampleRadius = 16.0;\n    float mixValue = 1.0;\n    float packedValue;\n    vec4 bufferA;\n    \n    if(iFrame == 0)\n    {\n        packedValue = PackIntFloat(mixValue, sampleRadius);\n        fragColor = vec4(0.0, 0.0, 0.0, packedValue);\n        return;\n    }\n    else if(iFrame >= 1)\n    {\n        bufferA = texture(iChannel1, uv);\n        UnpackIntFloat(bufferA.a, mixValue, sampleRadius);\n    }\n    \n    if(iMouse.z > 0.0)\n    {\n        sampleRadius = clamp(iMouse.y * 0.25, 1.0, 255.0);\n    }\n    \n    vec3 col = SampleImage(uv, sampleRadius);\n    \n    if(iMouse.z > 0.0)\n    {\n        mixValue = 1.0;\n    }\n    else\n    {\n        mixValue += 1.0;\n        col = mix(bufferA.rgb, col, 1.0 / mixValue);\n    }\n    \n    packedValue = PackIntFloat(mixValue, sampleRadius);  \n    fragColor = vec4(col, packedValue);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}