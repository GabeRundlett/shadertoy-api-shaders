{
    "Shader": {
        "info": {
            "date": "1563424233",
            "description": "Rainbow Road",
            "flags": 32,
            "hasliked": 0,
            "id": "wllXRS",
            "likes": 7,
            "name": "Rainbow Race",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "butadiene",
            "viewed": 1043
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Time varying pixel color\n    vec3 col =\ttexture( iChannel0, uv ).xyz;\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.1415926;\nfloat nm = 150.;\nvec3 hsv(float h, float s, float v){\n    vec4 t = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(vec3(h) + t.xyz) * 6.0 - vec3(t.w));\n    return v * mix(vec3(t.x), clamp(p - vec3(t.x), 0.0, 1.0), s);\n}\n\nfloat  nPrism(vec3 p,vec2 h,float n,float s){\n    float np = PI*2./n;\n    float r = atan(p.x,p.y);\n    r = mod(r,np)-0.5*np;\n    vec2 kp = length(p.xy)*vec2(cos(r),sin(r));\n    vec3 kv = vec3(kp.x-h.x,abs(kp.y)-s*h.x*tan(0.5*np),abs(p.z)-h.y);\n    float d = length(vec2(max(kv.x,0.0),max(kv.y,0.0)));\n    return length(vec2(d,max(kv.z,0.0)))-min(min(max(-kv.x,0.0),max(-kv.y,0.0)),max(-kv.z,0.0));\n}\nvec2 pmod(vec2 p,float n){\n    float np = PI*2./n;\n    float r = atan(p.x,p.y)+0.5*np;\n    r = mod(r,np)-0.5*np;\n     return length(p.xy)*vec2(sin(r),cos(r));\n}\n\nvec2 pmodt(vec2 p,float n,float kt){\n    float np = PI*2./n;\n    float r = atan(p.x,p.y)+0.5*np;\n    r = mod(r,np)-0.5*np;\n     return length(p.xy)*vec2(sin(r),cos(r));\n}\n\nvec2 rot(vec2 p,float r){\n    mat2 m = mat2(cos(r),sin(r),-sin(r),cos(r));\n    return m*p;\n}\nfloat penta(vec3 p){\n     float d = nPrism(p,vec2(0.4,0.06),5.0,1.0);\n    float d1 = nPrism(p,vec2(0.35,0.12),5.0,1.0);\n    return max(d,-d1);\n}\n\nvec4 cnd (vec3 p){\nfloat kt = iTime*30.;\np.xyz +=0.02*vec3(pow(abs(sin(kt)),5.0),pow(abs(cos(kt*0.9)),5.0),pow(abs(cos(kt*0.4)*sin(kt*0.4)),5.0));\n   p.yz = rot(p.yz,iTime*1.1+1.4*sin(iTime)-0.1*cos(iTime*10.));\n    float rc =50.+30.*sin(iTime*2.);\n     p.y += rc+0.;\n     float dto = -(length(vec2(abs(length(p.yx)-rc),p.z))-1.2);\n    \n    float rn = atan(p.y,p.x);\n    float id = floor(rn/(2.*PI)*nm)/nm;\n     vec3 ps = vec3(rot(p.xy,iTime*4.6),p.z);\n    p.xy = rot(p.xy,iTime*0.3);\n   \n    ps.xy = pmod(p.xy,nm);\n    ps = ps-vec3(0.,rc,0.);\n    float ks = 0.1;//vec2(0.5,0.05);\n    ps.y =mod(ps.y,ks)-0.5*ks;\n    float ds = length(ps)-0.02;\n    p.xy = pmod(p.xy,nm);\n    p = p-vec3(0.,rc,0.);\n    p.xz = rot(p.xz,PI/2.);\n    p.xy =rot(p.xy,id*10.+iTime*4.);\n   float d = penta(p);\n   float df = min(ds,min(d,dto));\n    float cn = atan(p.x,p.y);\n    vec3 cnm = hsv(cn/PI,1.,1.);\n  \n    vec3 col = cnm *exp(-2.7*d)+(1.4)*exp(-7.*dto)*hsv(iTime,1.,1.)+1.*exp(-4.*ds)*vec3(1.);\n   return vec4(col,df);\n}\n\nfloat dist (vec3 p){\n    float d = cnd(p).w;\n   return d;\n}\nvec3 gn(vec3 p){\n    vec2 e =vec2(0.001,0.0);\n    return normalize(vec3(\n        dist(p+e.xyy)-dist(p-e.xyy),\n        dist(p+e.yxy)-dist(p-e.yxy),\n        dist(p+e.yyx)-dist(p-e.yyx)\n        ));\n}\nvec3 draw(vec3 p){\n \n    vec3 n =gn(p);\n    vec3 ld =normalize(vec3(1.,1.,1.));\n    float ndl = max(dot(n,ld),0.0);\n    vec3 col =vec3(ndl);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.xy;\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    p.y *= iResolution.y/iResolution.x;\n    vec3 ro = vec3(0.,0.,0.);\n    vec3 ta =vec3(-0.01,0.,0.);\n    vec3 cdir = normalize(ta-ro);\n    float kt =iTime;\n    vec3 up = vec3(0.,1.,0.);//normalize(vec3(cos(kt),sin(kt),1.));\n    vec3 side  = cross(cdir,up);\n    up = cross(side,cdir);\n    float fov =2.6+sin(iTime*3.);\n    vec3 rd = normalize(p.x*side+p.y*up+cdir*fov);\n    float t =0.0001;\n    float d =0.0;\n    float hit = 0.001;\n    vec3 ac =vec3(0.,0.,0.);\n    for(int i= 0;i<99;i++){\n        vec4 crn = cnd(ro+rd*t);\n        d = crn.w;\n        ac += crn.xyz;\n        t += d;\n    }\n    vec3 col =vec3(0.);\n    \n        col = draw(ro+rd*t);\n        col = ac*0.01;\n \tvec3 fcol = texture( iChannel0,uv).xyz;\n    col = 0.2*col + 0.8*fcol;\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}