{
    "Shader": {
        "info": {
            "date": "1532076974",
            "description": "mouse does things:\nmouase.x zooms\nmouse.y dtansforms from linear to polar",
            "flags": 0,
            "hasliked": 0,
            "id": "MltcRM",
            "likes": 5,
            "name": "kleinian sphere2linear Jos Leys)",
            "published": 3,
            "tags": [
                "kleinianfractalfraigapolonean"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 613
        },
        "renderpass": [
            {
                "code": "\n//2d fractal inversion,by Jos Leys\n//parent: https://www.shadertoy.com/view/llKXRh\n//minor refinements by ollj\n//generalization with mouse input for zoom and linearization by ollj\n\n#define iterFractal 999\n\n#define dd(a)dot(a,a)\n\nvec2 c2(vec2 a){return a*vec2(1,-1);}//transpose.y,horizontal mirror on f(.x)=0\nvec2 c3(vec2 a){return c2(a.yx).yx;}//transpose.x,vertical mirror on f(.y)=0\n\nvec2 TransA(inout vec2 z,vec2 b){z*=1./dd(z);return c3(b.yx-z);}\n\nfloat wrap(float a,float b,float c){a-=c;return(a-floor(a/b)*b)+c;}//some modulo magic\nfloat wrap(float a,float b){return wrap(a,2.*b,-b);}\n\n\n\nfloat JosKleinian(vec2 z\n){vec2 lz=z+vec2(1.),llz=z+vec2(-1.)\n ;float rad=1.//radius of largest circle\n ;float box_size_x=1.//+(iMouse.x/iResolution.x)*2.-1.  //kaleidoscopic boundary stuff\n ;vec2 InvCenter=vec2(0,iMouse.y/iResolution.y)\n ;z+=InvCenter\n ;z*=(rad*rad/dd(z))\n ;z-=InvCenter\n ;vec2 m=vec2(1)\n ;m=((iMouse.xy+iResolution.xy*.5)/iResolution.xy*2.-1.)//attempt tp meaningful parameterization\n ;m=1.-m//for shadertoy vis m.y==0 is a bad default state. because it just zooms in way too far, so its flipped.\n ;vec2 c=vec2(1.958591,.011278)\n ;//c.x/=m.x;c.x*=m.y\n ;float f=sign(c.y)*1. \n ;for(int i=0;i<iterFractal;i++\n){z.x=z.x+f*c.y/c.x*z.y\n  ;z.x=wrap(z.x,box_size_x)\n  ;z.x-=f*c.y/c.x*z.y\n  ;//If above the separation line,rotate by 180° about(-b/2,a/2)\n  ;float e=z.x+c.y*.5,thefuck=.5*(c.x+f*(2.*c.x-1.95)*sign(e)*.5*(1.-exp((-7.2+(1.95-c.x)*15.)*e*sign(e))))-z.y//boundary\n  //;if(thefuck<0.)z=vec2(-c.y,c.x)-z\n  ;z-=step(thefuck,0.)*(c2(c.yx)+2.*z)//;z=mix(z,vec2(-c.y,c.x)-z,step(thefuck,0.))\n  //;z=smoothstep(.001,-.001,thefuck)*(k-z)+z\n  ;z=TransA(z,c)//Apply transformation a\n  ;if(dd(z-llz)<1e-5)break//if period of 2 iterations\n  ;if(abs(z.y-.5*c.x)>c.x*.5)return 1.;//if the iterated point gets outside z.y=0 and z.y=a\n  ;llz=lz;lz=z;}//Store prévious iterates\n ;return 0.;}\n\n#define frame(u)(u-.5*iResolution.xy)/iResolution.y\n\nvoid mainImage(out vec4 fragColor,vec2 u\n){u=frame(u)\n ;u*=15.*(1.-iMouse.x/iResolution.x)//(sin(iGlobalTime)*.5+.5)\n ;u.y-=.5*iMouse.y/iResolution.y;\n ;fragColor=vec4(JosKleinian(u),0,0,1);}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}