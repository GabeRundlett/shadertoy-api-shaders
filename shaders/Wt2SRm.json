{
    "Shader": {
        "info": {
            "date": "1565686765",
            "description": "Since everyone is into SDFs, I thought I'd try something different: defining worlds using density fields only. This is very useful if you have fluff/fur/etc. Vanilla sphere marching doesn't lend itself well to such things though this naturally costs more.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wt2SRm",
            "likes": 14,
            "name": "Fluffy Forest",
            "published": 3,
            "tags": [
                "scattering",
                "trace",
                "fields",
                "density",
                "scalar",
                "extinction"
            ],
            "usePreview": 0,
            "username": "toomuchvoltage",
            "viewed": 650
        },
        "renderpass": [
            {
                "code": "/***********************************************************\n\n   A world entirely made out of a density field!\n   The whole thing is one giant fluffy scattering cloud-type thing! :)\n\n   Trees are fractal trees made with splitting stem cells...\n\n   The grass is something I invented called melon grass!\n   It's four ellipsoids each contributing a thin slice to make a grass patch.\n   Three versions of the patch are repeated indefinitely across the plains.\n   Each patch orientates at its origin against the sinusoidal height field.\n\n   Covered under the MIT license:\n\n   Copyright (c) 2019 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Mastodon: https://mastodon.gamedev.place/@toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\n#define M_PI 3.1415926535\n#define CORE_RADIUS 0.1\n#define FLUFF_RADIUS 1.2\n#define FLUFF_POWER 0.1 * min (1.0 - max (sin(iTime), 0.0), 0.9)\n#define DRAW_DISTANCE 15.0\n\n// Blue noise...\nfloat _2dNoise (vec2 forPos)\n{\n\tfloat noiseVal = texture (iChannel0, forPos).r;\n    return 0.9 + noiseVal * 0.1;\n}\n\n/******************* FRACTAL TREES USING SPLITTING STEMS **********************/\nfloat circle(vec2 uv, vec2 center, float rad, float fluffRad)\n{\n    vec2 diffVec = uv - center;\n    float distSq = dot(diffVec, diffVec);\n    float rSq = rad * rad;\n    float rTSq = rad + fluffRad;\n    rTSq *= rTSq;\n    if ( distSq < rSq )\n        return 1.0;\n    else if ( distSq < rTSq )\n        return clamp (1.0 - pow((distSq - rSq)/(fluffRad * fluffRad), FLUFF_POWER), 0.0, 1.0);\n    else\n        return 0.0;\n}\n\nfloat splitCell(vec2 uv, float inpTime, float spread)\n{\n    if ( inpTime < 0.0 || inpTime > M_PI ) return 0.0;\n    float timeProg = clamp(inpTime, 0.0, M_PI * 0.5);\n    float timeProg2 = clamp(inpTime - M_PI * 0.5, 0.0, M_PI * 0.5);\n    float sinTimeProg = sin(timeProg);\n    float sinTimeProg2 = sin(timeProg2);\n    float res1 = max(circle(uv, vec2 (sinTimeProg2, sinTimeProg) * spread, CORE_RADIUS, FLUFF_RADIUS), circle (uv, vec2 (sinTimeProg2, -sinTimeProg) * spread, CORE_RADIUS, FLUFF_RADIUS));\n    float res2 = max(circle(uv, vec2 (-sinTimeProg2, sinTimeProg) * spread, CORE_RADIUS, FLUFF_RADIUS), circle (uv, vec2 (-sinTimeProg2, -sinTimeProg) * spread, CORE_RADIUS, FLUFF_RADIUS));\n    return max (res1, res2);\n}\n\nfloat splitCell2(vec2 uv, float inpTime, float spread)\n{\n    if ( inpTime < M_PI )\n        return splitCell (uv, inpTime, spread);\n    else if ( inpTime < M_PI * 2.0 )\n    {\n        float res1 = splitCell (uv + vec2 ( spread,  spread), inpTime - M_PI, spread * 0.5);\n        float res2 = splitCell (uv + vec2 ( spread, -spread), inpTime - M_PI, spread * 0.5);\n        float res3 = splitCell (uv + vec2 (-spread,  spread), inpTime - M_PI, spread * 0.5);\n        float res4 = splitCell (uv + vec2 (-spread, -spread), inpTime - M_PI, spread * 0.5);\n        return max (max (res1, res2), max (res3, res4));\n    }\n    else if ( inpTime < M_PI * 3.0 )\n    {\n        float curMaxRes = 0.0;\n        for (int i = 0; i != 4; i++)\n        {\n            vec2 subOffset = vec2 (spread);\n            if ( i == 1 ) subOffset *= vec2 (1.0, -1.0);\n            else if ( i == 2 ) subOffset *= vec2 (-1.0, 1.0);\n            else if ( i == 3 ) subOffset *= vec2 (-1.0, -1.0);\n            float res1 = splitCell (uv + vec2 ( spread,  spread) + subOffset * 0.5, inpTime - M_PI * 2.0, spread * 0.25);\n            float res2 = splitCell (uv + vec2 ( spread, -spread) + subOffset * 0.5, inpTime - M_PI * 2.0, spread * 0.25);\n            float res3 = splitCell (uv + vec2 (-spread,  spread) + subOffset * 0.5, inpTime - M_PI * 2.0, spread * 0.25);\n            float res4 = splitCell (uv + vec2 (-spread, -spread) + subOffset * 0.5, inpTime - M_PI * 2.0, spread * 0.25);\n\t        curMaxRes = max (max (max (res1, res2), max (res3, res4)), curMaxRes);\n        }\n        return curMaxRes;\n    }\n    else\n        return 0.0;\n}\n\nfloat fractalTree (vec3 inpCoord)\n{\n    if ( inpCoord.y > M_PI * 3.0 ) return 0.0;\n    else if ( inpCoord.y > 0.0 && inpCoord.y < M_PI * 3.0 ) return splitCell2 (inpCoord.xz, inpCoord.y, 4.0);\n    else if ( inpCoord.y < 0.0) return circle (inpCoord.xz, vec2 (0.0), CORE_RADIUS, FLUFF_RADIUS);\n}\n/******************************************************************************/\n\n// 2D rotate\nmat2 rot2D (float ang)\n{\n    return mat2 (cos(ang), -sin(ang), sin(ang), cos(ang));\n}\n\n/******************* THE FLOOR HEIGHT FIELD **********************/\nfloat floorEq (vec2 inpCoord)\n{\n    return (sin(inpCoord.x) + 1.0) * 0.5 + (sin(inpCoord.y) + 1.0) * 0.5;\n}\n/*****************************************************************/\n\n/********************* MELON GRASS!!! **********************/\n// I call this melon grass... :)\n// It's grass made from 4 stripes on 4 melon-like shapes next to each other\nfloat melonGrass (vec3 inpCoord)\n{\n    inpCoord.y /= 3.0;\n    if ( inpCoord.y < -2.0 || inpCoord.y > -1.0 ) return 0.0;\n\tvec3 coordFract = fract (inpCoord) * 2.4 - 1.2;\n\n    // Orientate the grass patch against the height field...\n    vec3 centerOnFloor = floor (inpCoord) + 0.5;\n    vec3 tanVec = vec3 (0.02, floorEq(centerOnFloor.xz + vec2 (0.01, 0.0)) - floorEq(centerOnFloor.xz - vec2 (0.01, 0.0)), 0.0);\n    vec3 biTanVec = vec3 (0.0, floorEq(centerOnFloor.xz + vec2 (0.0, 0.01)) - floorEq(centerOnFloor.xz - vec2 (0.0, 0.01)), 0.02);\n    vec3 norm = normalize (cross (tanVec, biTanVec));\n    if ( norm.y < 0.0 ) norm = -norm;\n    biTanVec = normalize (cross (norm, tanVec));\n    tanVec = cross (biTanVec, norm);\n    mat3 grassPatchSpace;\n    grassPatchSpace[0] = tanVec;\n    grassPatchSpace[1] = norm;\n    grassPatchSpace[2] = biTanVec;\n    \n    // Bring sample point into local grass patch space...\n    coordFract = inverse (grassPatchSpace) * coordFract;\n\n    if ( coordFract.y < 0.0 ) return 0.0; // Cut below the melon\n    \n    vec3 toMelon1 = coordFract - vec3 ( 1.0, 0.0,  0.0);\n    vec3 toMelon2 = coordFract - vec3 (-1.0, 0.0,  0.0);\n    vec3 toMelon3 = coordFract - vec3 ( 0.0, 0.0,  1.0);\n    vec3 toMelon4 = coordFract - vec3 ( 0.0, 0.0, -1.0);\n\n    float result1 = 0.0, result2 = 0.0, result3 = 0.0, result4 = 0.0;\n    if ( normalize (toMelon1.xz).x < -0.99 ) result1 = 1.0 - pow((min (abs(dot (toMelon1,toMelon1) - 1.0), 3.0) / 3.0), FLUFF_POWER * 0.1);\n    if ( normalize (toMelon2.xz).x >  0.99 ) result2 = 1.0 - pow((min (abs(dot (toMelon2,toMelon2) - 1.0), 3.0) / 3.0), FLUFF_POWER * 0.1);\n    if ( normalize (toMelon3.xz).y < -0.99 ) result3 = 1.0 - pow((min (abs(dot (toMelon3,toMelon3) - 1.0), 3.0) / 3.0), FLUFF_POWER * 0.1);\n    if ( normalize (toMelon4.xz).y >  0.99 ) result4 = 1.0 - pow((min (abs(dot (toMelon4,toMelon4) - 1.0), 3.0) / 3.0), FLUFF_POWER * 0.1);\n    return max (max (result1, result2), max (result3, result4));\n}\n/***********************************************************/\n\n/*************** THE ENTIRE WORLD COMBINED ***************/\nfloat worldDensity (vec3 inpCoord)\n{\n    if ( inpCoord.y < -6.0 + floorEq (inpCoord.xz) ) return 1.0;\n    \n    mat2 rot1 = rot2D (M_PI *  0.2);\n    mat2 rot2 = rot2D (M_PI * -0.1);\n    mat2 rot3 = rot2D (M_PI *  0.35);\n\n    vec3 treeCoord = inpCoord;\n    treeCoord.xz = rot1 * (fract (inpCoord.xz / 5.0) * 20.0 - 10.0);\n    float worldDensity = 0.0;\n    worldDensity = max (fractalTree (treeCoord), worldDensity);\n    \n    vec3 grassCoord1 = inpCoord, grassCoord2 = inpCoord, grassCoord3 = inpCoord;\n    grassCoord1.xz = rot2 * inpCoord.xz + vec2 ( 0.2, 0.3);\n    grassCoord2.xz = rot1 * inpCoord.xz + vec2 (-0.1, 0.45);\n    grassCoord3.xz = rot3 * inpCoord.xz + vec2 (0.35, 0.12);\n    \n    worldDensity = max (melonGrass (grassCoord1), worldDensity);\n    worldDensity = max (melonGrass (grassCoord2), worldDensity);\n    worldDensity = max (melonGrass (grassCoord3), worldDensity);\n    return worldDensity;\n}\n/*********************************************************/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    \n    vec3 curEye = vec3 (0.0, 1.0, -5.0) + vec3 (iTime, 0.0, iTime);\n    vec3 sampleDir = normalize (vec3 (uv, 1.0)) * 0.01 * _2dNoise (uv);\n    vec3 samplePt = curEye + sampleDir;\n    float scat = 1.0;\n    float finalColor = 0.0;\n\n    for (;;)\n    {\n        float fader = max (DRAW_DISTANCE - length (samplePt - curEye), 0.0)/ DRAW_DISTANCE;\n        float densityEval = worldDensity (samplePt);\n        if ( densityEval > 0.001 )\n        {\n\t        finalColor += scat * densityEval * fader;\n            scat *= exp (-densityEval);\n        }\n        if ( scat < 0.1 ) break;\n        if ( fader == 0.0 ) break;\n        samplePt += sampleDir;\n    }\n\n    // Output to screen\n    fragColor = vec4(vec3 (finalColor),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}