{
    "Shader": {
        "info": {
            "date": "1717204307",
            "description": "Awesome thing\nRotate and translate thing\nTodo, feed buffer A into x+y/x-y",
            "flags": 36,
            "hasliked": 0,
            "id": "X3dGDs",
            "likes": 1,
            "name": "Buffer A Thing",
            "published": 3,
            "tags": [
                "feedback"
            ],
            "usePreview": 0,
            "username": "ShadeWhizz",
            "viewed": 169
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float get_mic() {\n    return\n        float(texture(iChannel1, vec2(0.1, 0.0))) +\n        float(texture(iChannel1, vec2(0.1, 1.0))) +\n        float(texture(iChannel1, vec2(0.15, 0.0))) +\n        float(texture(iChannel1, vec2(0.15, 1.0))) +\n        float(texture(iChannel1, vec2(0.25, 0.0))) +\n        float(texture(iChannel1, vec2(0.25, 1.0))) / (6.0 * 255.0);\n}\nfloat clean_mic() {\n    return max(get_mic() - 0.3, 0.0);\n}\nvec4 get_buffer(in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 ndc = 2.0 * (uv - 0.5);\n    ndc = rotmat(0.777) * ndc;\n    //ndc *= (0.99 + 0.05 * get_mic());\n    //float gro = 1.0 + 0.01 * cos(iTime);\n    float gro = 0.98;\n    ndc *= gro;\n    uv = (ndc + 1.0) / 2.0;\n    return texture(iChannel0, uv);\n}\nfloat dist(vec2 p, float t) {\n    vec2 o = 0.5 * vec2(cos(t), sin(t));\n    vec2 p_ndc = (p - 0.5) * 2.0;\n    float d = length(p_ndc-o) - 0.2;\n    return d;\n}\nfloat chan(vec2 p, float t) {\n    float close = 1.0 - 5.0*abs(dist(p, t));\n    float far = 0.5 - 0.5*abs(dist(p,t));\n    return max(close,far);\n}\nvec3 image(vec2 p, float t) {\n    float x = dist(p, t);\n    float y = dist(p, -t);\n    float z1 = (x-y)/(x+y);\n    float z2 = (x+y)/(x-y);\n    float z3 = (z1 - z2)/(z1 + z2);\n    float z4 = z1*z2/(z1+z2); // +- good too\n    return vec3(z1,z3,z4);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 half_stretch_ndc = (fragCoord - .5*iResolution.xy) / iResolution.yy;\n    vec2 uv = half_stretch_ndc + 0.5;\n    //uv.x += 0.2*get_mic();\n    vec3 col = image(uv, iTime);\n    vec3 col_prev = get_buffer(fragCoord).xyz;\n    vec3 final_col = max(col, 0.98*col_prev);\n    fragColor = vec4(final_col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "mat2 rotmat(float angle) {\n    float cosAngle = cos(angle);\n    float sinAngle = sin(angle);\n\n    return mat2(\n        cosAngle, -sinAngle,\n        sinAngle,  cosAngle\n    );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}