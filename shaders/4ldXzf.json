{
    "Shader": {
        "info": {
            "date": "1538011410",
            "description": "playing with cartesian and polar modulo \n - till ya get dizzy",
            "flags": 0,
            "hasliked": 0,
            "id": "4ldXzf",
            "likes": 33,
            "name": "fan/repeat",
            "published": 3,
            "tags": [
                "lines",
                "dots",
                "hypnotic",
                "pattern",
                "symmetry",
                "spacesegmentation"
            ],
            "usePreview": 0,
            "username": "bergi",
            "viewed": 1487
        },
        "renderpass": [
            {
                "code": "/**\n\t\"fan/repeat\" - https://www.shadertoy.com/view/4ldXzf\n\t(c) 2018 bergi\n\t\n\tmodulo in space and time\n\n\tmore precisely, modulo applied to cartesian and polar coordinates\n    distorting \"an image\" consisting of lines and dots.\n\tparameters taken from hand-picked lists of various lengths\n\tusing time modulo pattern length.\n*/\n\n\n/** repeat the position in 'pos' every 'q' degree in polar space */\nvec2 fan(in vec2 pos, in float q) \n{\n    q = q / 180. * 3.14159265;\n    float ang = atan(pos.x, pos.y),\n    len = length(pos.xy);\n    ang = mod(ang + q/2., q) - q/2.;\n    pos.xy = len * vec2(sin(ang), cos(ang));\n    return pos;\n}\n\n/** repeat the position in 'pos' every 'q' units */\nvec2 repeat(in vec2 pos, in vec2 q) \n{\n    pos.xy = mod(pos.xy + q/2., q) - q/2.;\n    return pos;\n}\n\n/** combination of fan and repeat calls, controlled by the 'scene' parameter. \n    scene is range 0 to 3*5*6*7*11-1\n*/\nvec2 fan_repeat(in vec2 uv, in int scene) \n{\n    uv = fan(uv, float[5](120., 90., 60., 45., 30.)[scene % 5]);\n    uv = repeat(uv, vec2(\n        float[3](2., 3., 4.)[scene%3],\n        float[7](1., 3., 5., 2., 4., 5., 2.)[scene%7]));\n    uv = fan(uv, float[11](120., 90., 60., 30., 45., 12.5, 120., 180., 60., 30., 45.)[scene % 11]);\n    uv = repeat(uv, vec2(\n        float[6](1., 3., 1., 4., 3., 5.)[scene%6],\n        float[5](1., 4., 1., 3., 2.)[scene%5]));\n    \n\treturn uv;\n}\n\n\n/** a dull image with some variation through 'scene' */\nvec3 img(in vec2 uv, in int scene)\n{\n    vec3 col = vec3(0.);\n    \n    vec3 c1 = vec3[3](\n        vec3(1., .7, .4), vec3(.4, .9, .3), vec3(.2, .5, 1.)\n    )[scene%3];\n    vec3 c2 = vec3[4](\n        vec3(.3, .5, .6), vec3(.4, .2, .3), vec3(.1, 1., .2), vec3(.2, .5, 1.)\n    )[scene%4];\n    vec3 c3 = vec3[5](\n        vec3(.9, .5, .1), vec3(.4, .9, .1), vec3(.1, .6, 1.), vec3(.9, .3, 1.), vec3(.5, .5, .5)\n    )[scene%5];\n    \n    float step1 = float[3](.01, .02, .1)[scene%3];\n    float step2 = float[4](.01, .02, 0.05, .1)[scene%4];\n    float step3 = float[5](.01, .02, 0.2, 0.03, .1)[scene%5];\n    float step4 = float[6](.01, .02, 0.03, 0.04, 0.05, .1)[scene%6];\n    \n    col += c1 * smoothstep(step2,0., length(uv.xy) - float[3](0., 0.1, .2)[scene%3]);\n    col += c1 * smoothstep(step1,0., abs(uv.y-.6)-0.02);\n    col += c2 * smoothstep(step4,0., abs(uv.x)-0.02);\n    col += c3 * smoothstep(step3,0., abs(uv.y-.3)-0.02);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - .5*iResolution.xy) / iResolution.y * 2.;\n\t    \n    uv *= 5.;\n    \n    uv = fan_repeat(uv, int(iTime*3.));\n    vec3 col = img(uv, int(iTime*6.));\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}