{
    "Shader": {
        "info": {
            "date": "1548695392",
            "description": "Not playable",
            "flags": 0,
            "hasliked": 0,
            "id": "WdBGW1",
            "likes": 5,
            "name": "Star Fox Boss Battle",
            "published": 3,
            "tags": [
                "lowpoly",
                "triintersect",
                "starfox"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 535
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Code is based on: https://www.shadertoy.com/view/MlGcDz\n\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n\n// data from my modeling data.\nconst int numVertices = 60;\nconst int numFaces = 42;\n\nconst float vertices[60] = float[](\n    1.013484,-0.004748,-0.170576,1.363493,-0.372823,-1.554794,0.917013,-0.178702,-0.862685,1.288280,-0.178702,-0.862685,1.350874,-0.372823,1.669797,1.010963,-0.004748,0.212469,0.914492,-0.178702,0.904577,1.285759,-0.178702,0.904577,0.581273,-0.024900,0.352901,1.127463,-0.024900,0.352901,1.146371,0.728927,1.492630,0.581273,-0.023149,-0.350895,1.127463,-0.023149,-0.350895,1.146371,0.730678,-1.392582,1.000000,-0.010163,0.363769,1.000000,-0.002439,-0.369747,-1.000000,0.000000,0.006199,0.830098,0.325427,-0.003099,0.862253,-0.223150,0.009298,1.247514,-0.006511,0.004402\n);\n\nconst int faces[42] = int[](\n    3,4,2,1,4,3,7,8,6,5,8,7,9,10,11,12,13,14,17,15,18,18,20,16,15,17,19,16,17,18,19,17,16,16,20,19,19,20,15,20,18,15\n);\n\nconst int numVertices2 = 60;\nconst int numFaces2 = 69;\n\nconst float vertices2[60] = float[](\n-0.050644,-1.000000,-0.287185,-0.046908,-1.000000,0.282374,-0.022325,1.000000,-0.603118,0.252637,-0.756947,0.001045,0.086070,-0.554094,0.470331,0.080405,-0.581953,-0.393294,-0.310284,-0.550998,-0.745497,-0.299836,-0.538616,0.847426,0.301236,-0.464652,0.021582,-0.203997,0.661104,-0.847783,0.081116,0.650054,-0.284954,0.155316,0.606239,-0.650704,0.163361,0.764587,-0.622910,-0.191163,0.699229,0.950683,0.172071,0.792447,0.705030,0.085968,0.690296,0.454854,0.166343,0.645718,0.705368,-0.012304,0.995923,0.721267,0.357289,0.557239,0.010229,0.082718,1.115938,0.002954\n);\n\nconst int faces2[69] = int[](\n3,11,13,12,11,9,2,5,8,2,4,5,4,1,6,4,2,1,6,1,7,6,7,10,11,3,19,8,5,14,18,14,15,14,5,9,14,9,17,9,10,12,10,9,6,11,19,9,19,16,9,3,20,19,18,16,19,16,17,9,20,18,19,3,13,10,18,15,16\n);\n\n// Triangle intersection. Returns { t, u, v }\n// https://iquilezles.org/articles/intersectors\nvec3 triIntersect( in vec3 ro, in vec3 rd, in vec3 v0, in vec3 v1, in vec3 v2 )\n{\n    vec3 v1v0 = v1 - v0;\n    vec3 v2v0 = v2 - v0;\n    vec3 rov0 = ro - v0;\n\n#if 0\n    // Cramer's rule for solcing p(t) = ro+t·rd = p(u,v) = vo + u·(v1-v0) + v·(v2-v1)\n    float d = 1.0/determinant(mat3(v1v0, v2v0, -rd ));\n    float u =   d*determinant(mat3(rov0, v2v0, -rd ));\n    float v =   d*determinant(mat3(v1v0, rov0, -rd ));\n    float t =   d*determinant(mat3(v1v0, v2v0, rov0));\n#else\n    // The four determinants above have lots of terms in common. Knowing the changing\n    // the order of the columns/rows doesn't change the volume/determinant, and that\n    // the volume is dot(cross(a,b,c)), we can precompute some common terms and reduce\n    // it all to:\n    vec3  n = cross( v1v0, v2v0 );\n    vec3  q = cross( rov0, rd );\n    float d = 1.0/dot( rd, n );\n    float u = d*dot( -q, v2v0 );\n    float v = d*dot(  q, v1v0 );\n    float t = d*dot( -n, rov0 );\n#endif    \n\n    if( u<0.0 || v<0.0 || (u+v)>1.0 ) t = -1.0;\n    \n    return vec3( t, u, v );\n}\n\n// https://iquilezles.org/articles/boxfunctions\nvec4 iBox( in vec3 ro, in vec3 rd, in mat4 txx, in mat4 txi, in vec3 rad ) \n{\n    // convert from ray to box space\n\tvec3 rdd = (txx*vec4(rd,0.0)).xyz;\n\tvec3 roo = (txx*vec4(ro,1.0)).xyz;\n\n\t// ray-box intersection in box space\n    vec3 m = 1.0/rdd;\n    vec3 n = m*roo;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\t\n\tif( tN > tF || tF < 0.0) return vec4(-1.0);\n\n\tvec3 nor = -sign(rdd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\n    // convert to ray space\n\t\n\tnor = (txi * vec4(nor,0.0)).xyz;\n\n\treturn vec4( tN, nor );\n}\n\nmat4 rotationAxisAngle( vec3 v, float angle )\n{\n    float s = sin( angle );\n    float c = cos( angle );\n    float ic = 1.0 - c;\n\n    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,\n                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,\n                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,\n\t\t\t     0.0,                0.0,                0.0,                1.0 );\n}\n\nmat4 translate( float x, float y, float z )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t x,   y,   z,   1.0 );\n}\n\nfloat dBox2d(vec2 p, vec2 b) {\n\treturn max(abs(p.x) - b.x, abs(p.y) - b.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n\tvec2 prevP = p;\n    \n    // camera\n\tvec3 ro = vec3(5.0,1.0,0.0);\n    vec3 ta = vec3( 0.0, 0.8, 0.0 );\n    \n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    \n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n    \n    // raytrace\n\tfloat tmin = 10000.0;\n\tvec3  pos = vec3(0.0);\n\tfloat oid = 0.0;\n\n    // player model\n    int index = 0;\n    float xpos = 3.0;\n    float ypos = 0.3+sin(iTime*0.5)*0.5;\n    float zpos = 0.0;\n    vec3 airCraftColor = vec3(0.7);\n    mat3 rotX = matRotateX(radians(sin(iTime*0.7)*30.0));\n    for(int i = 0; i<numFaces/3; i++){\n        int f1 = faces[index];\n        int f2 = faces[index+1];\n        int f3 = faces[index+2];\n        \n        vec3 v0 = vec3(vertices[(f1*3)-3],vertices[((f1*3)-3)+1],vertices[((f1*3)-3)+2]);\n        vec3 v1 = vec3(vertices[(f2*3)-3],vertices[((f2*3)-3)+1],vertices[((f2*3)-3)+2]);\n        vec3 v2 = vec3(vertices[(f3*3)-3],vertices[((f3*3)-3)+1],vertices[((f3*3)-3)+2]);\n        v0.y+=ypos;\n        v1.y+=ypos;\n        v2.y+=ypos;\n    \t\n        v0.x += 1.0;\n        v1.x += 1.0;\n        v2.x += 1.0;\n        \n        v0 *= rotX;\n        v1 *= rotX;\n        v2 *= rotX;\n        \n        float xspeed = 0.9;\n        v0.z += sin(iTime*xspeed)*1.5;\n        v1.z += sin(iTime*xspeed)*1.5;\n        v2.z += sin(iTime*xspeed)*1.5;\n        \n    \tvec3 res = triIntersect( ro, rd, v0, v1, v2);\n        if( res.x>0.0 && res.x<tmin )\n        {\n            tmin = res.x; \n            oid = 2.0;\n            airCraftColor = vec3(0.6-(float(i)*0.02));\n            if(f1 == 9 && f2 == 10 && f3 == 11 || f1 == 12 && f2 == 13 && f3 == 14){\n            \tairCraftColor = vec3(0.0,0.0,1.0);\n            } else if(f1 == 19 && f2 == 20 && f3 == 15){\n                airCraftColor = mod(iTime,0.2)<0.1?vec3(0.9,0.45,0.2):vec3(0.9,0.45,0.2)*1.5;\n            } else if(f1 == 16 && f2 == 20 && f3 == 19){\n                airCraftColor = mod(iTime,0.2)<0.1?vec3(0.9,0.4,0.2):vec3(0.9,0.4,0.2)*1.5;\n            }\n        }\n        index += 3;\n    }\n\n    // boss model\n    index = 0;\n    ypos = 1.5+sin(iTime*0.3)*-0.1;\n    xpos = 1.0+sin(iTime*0.5)*-1.5;\n    zpos = sin(iTime*1.2)*2.0;\n    vec3 bossColor = vec3(0.7);\n    float manimate = sin(iTime*5.0)*0.05;\n    for(int i = 0; i<numFaces2/3; i++){\n        int f1 = faces2[index];\n        int f2 = faces2[index+1];\n        int f3 = faces2[index+2];\n        \n        vec3 v0 = vec3(vertices2[(f1*3)-3],vertices2[((f1*3)-3)+1],vertices2[((f1*3)-3)+2]);\n        vec3 v1 = vec3(vertices2[(f2*3)-3],vertices2[((f2*3)-3)+1],vertices2[((f2*3)-3)+2]);\n        vec3 v2 = vec3(vertices2[(f3*3)-3],vertices2[((f3*3)-3)+1],vertices2[((f3*3)-3)+2]);\n        v0.y+=ypos;\n        v1.y+=ypos;\n        v2.y+=ypos;\n    \n\t\tv0.x -= xpos;\n        v1.x -= xpos;\n        v2.x -= xpos;\n        \n\t\tv0.z += zpos;\n        v1.z += zpos;\n        v2.z += zpos;\n        \n        // mouth animation\n        if(f1 == 9){\n            v0.y += manimate;\n        }\n        if(f2 == 9){\n            v1.y += manimate;\n        }\n        if(f3 == 9){\n            v2.y += manimate;\n        }\n        \n\t\tif(f1 == 4){\n            v0.y += manimate*-1.0;\n        }\n        if(f2 == 4){\n            v1.y += manimate*-1.0;\n        }\n        if(f3 == 4){\n            v2.y += manimate*-1.0;\n        }\n        \n    \tvec3 res = triIntersect( ro, rd, v0, v1, v2);\n        if( res.x>0.0 && res.x<tmin )\n        {\n            tmin = res.x; \n            oid = 3.0;\n            bossColor = vec3(0.7-(float(i)*0.02));\n        }\n        index += 3;\n    }\n    \n\t// enemy bullet\n\tvec3 box = vec3(0.2,0.03,0.2);\n    vec3 bcolor = vec3(0.8);\n    mat4 brotX = rotationAxisAngle(vec3(1.0,0.0,0.0),radians(iTime*30.0));\n    mat4 tra = translate( -xpos+mod(iTime*2.0,3.0)*3.0, 1.0, zpos );\n    mat4 txi = tra *brotX; \n    mat4 txx = inverse( txi );       \n\t\n    vec4 res = iBox( ro, rd, txx, txi, box);\n    if( res.x>0.0 && res.x<tmin )\n    {\n        tmin = res.x; \n        oid = 1.0;\n        bcolor = vec3(0.8-(tmin*0.1));\n    }\n    \n    // material/bg\n\tvec3 col = vec3(1.0);\n\tif( tmin<100.0 )\n\t{\n        // material\n\t\tvec3  mate = vec3(.0);\n\t\tif( oid<1.5 ) {\n\t\t    mate = bcolor;\n\t\t} else if( oid>=1.5 && oid<=2.0 ) {\n\t\t    mate = airCraftColor;\n\t\t} else if( oid>2.1 && oid<=3.0 ){\n            mate = bossColor;\n        }\n\t\tmate = mate*mate*1.1;\n        \t\n\t\tcol *= mate;\n\n\t\tcol = sqrt( col );\n    } else {\n        // bg\n    \tcol = vec3(0.0);\n        prevP.x+=sin(iTime+p.y)*0.7;\n        float rbg = (length(prevP+vec2(2.5,0.0))-0.5)+sin(iTime+p.y)*0.2;\n        col = mix( col, vec3(0.9,0.5,0.0), 1.0-smoothstep(0.15,2.5,abs(rbg)));\n        \n\t\tfloat lbg = (length(prevP+vec2(-2.5,0.0))-0.5)+sin(iTime+p.y)*0.2;\n        col = mix( col, vec3(1.0,0.2,0.2), 1.0-smoothstep(0.15,2.5,abs(lbg)));\n    }\n\t\n    // UI\n    p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    float ganimate = sin(iTime*1.5)*0.1;\n    \n    float playerBarBg = dBox2d(p+vec2(1.20, 0.85), vec2(0.3,0.055));\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.01,0.011,abs(playerBarBg)));\n    \n    float playerBar = dBox2d(p+vec2(1.3-ganimate, 0.85), vec2(0.15+ganimate,0.006));\n    col = mix( col, vec3(1.0,0.0,0.0), 1.0-smoothstep(0.029,0.03,abs(playerBar)));\n    \n\tfloat bossBarBg = dBox2d(p+vec2(-1.20, 0.85), vec2(0.3,0.055));\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.01,0.011,abs(bossBarBg)));\n    \n    float bossBar = dBox2d(p+vec2(-1.2, 0.85), vec2(0.25,0.006));\n    col = mix( col, vec3(0.6,0.6,1.0), 1.0-smoothstep(0.029,0.03,abs(bossBar)));\n    \n    // result\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}