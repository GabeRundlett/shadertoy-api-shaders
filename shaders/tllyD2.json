{
    "Shader": {
        "info": {
            "date": "1593170911",
            "description": "Inspired by recent shaders",
            "flags": 32,
            "hasliked": 0,
            "id": "tllyD2",
            "likes": 12,
            "name": "crappy days",
            "published": 3,
            "tags": [
                "animation"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 358
        },
        "renderpass": [
            {
                "code": "#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n\n//https://iquilezles.org/articles/distfunctions2d\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    vec2 q = abs(p);\n    float h = clamp((-2.0*ndot(q,b)+ndot(b,b))/dot(b,b),-1.0,1.0);\n    float d = length( q - 0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( q.x*b.y + q.y*b.x - b.x*b.y );\n}\n\nfloat sdOctogon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.9238795325, 0.3826834323, 0.4142135623 );\n    p = abs(p);\n    p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n    p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\nfloat sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\nfloat sdRoundedX( in vec2 p, in float w, in float r )\n{\n    p = abs(p);\n    return length(p-min(p.x+p.y,w)*0.5) - r;\n}\n\nvec2 getUV(float i)\n{\n    return vec2((i)/iResolution.x, 0);\n}\n\nvec2 animationPos(float i)\n{\n    return texture(iChannel0, getUV(i)).xy;\n}\n\nfloat deg(float i)\n{\n    return texture(iChannel0, getUV(i)).z;\n}\n\nfloat morfval(float i)\n{\n    return texture(iChannel0, getUV(i)).w;\n}\n\nfloat octogons(vec2 p, float rot) {\n    p*=Rot(radians(rot));\n    float size = 0.1;\n    float d = sdOctogon(p,size);\n    for (int i = 0; i < 3; i++) {\n        vec2 q = abs(p);\n        q-=0.15;\n        d = min(d,  sdOctogon(q,size));\n    }\n    return abs(d)-0.01;\n}\n\nfloat rx(vec2 p) {\n    float size = 0.12;\n    float r = 0.01;\n    float d = sdRoundedX(p,size,r);\n    for (int i = 0; i < 3; i++) {\n        vec2 q = abs(p);\n        q-=0.15;\n        d = min(d,  sdRoundedX(q,size,r));\n    }\n    return d;\n}\n\nfloat rhombus(vec2 p) {\n    vec2 size = vec2(0.05);\n    float r = 0.01;\n    float d = sdRhombus(p,size);\n    for (int i = 0; i < 3; i++) {\n        vec2 q = abs(p);\n        q-=0.15;\n        d = min(d,  sdRhombus(q,size));\n    }\n    return abs(d)-0.01;\n}\n\nfloat hexogons(vec2 p, float rot) {\n    p*=Rot(radians(rot));\n    float r = 0.1;\n    float d = sdHexagon(p,r);\n    for (int i = 0; i < 3; i++) {\n        vec2 q = abs(p);\n        q-=0.15;\n        d = min(d,  sdHexagon(q,r));\n    }\n    return abs(d)-0.01;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.0);\n\n    vec2 pos = animationPos(fragCoord.x);\n    float r = deg(fragCoord.x);\n    float mf = morfval(fragCoord.x);\n    uv*=Rot(radians(r));\n    \n    uv = abs(uv);\n    uv-=0.005;\n    float d = octogons(uv+(pos),r);\n    float d2 = hexogons(uv+(pos),-r);\n    d = mix(d,d2,mf);\n    col = mix(col,vec3(1.0),S(d,0.0));\n    \n    float d3 = rx(uv+(pos));\n    float d4 = rhombus(uv+(pos));\n    d = mix(d3,d4,mf);\n    col = mix(col,vec3(1.0),S(d,0.0));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// retrieved data code from https://www.shadertoy.com/view/Md2fzz\n\nvec2 getUV(float i)\n{\n    return vec2((i)/iResolution.x, 0);\n}\n\nvec2 animationPos(float i)\n{\n    return texture(iChannel0, getUV(i)).xy;\n}\n\nfloat deg(float i)\n{\n    return texture(iChannel0, getUV(i)).z;\n}\n\nfloat morfval(float i)\n{\n    return texture(iChannel0, getUV(i)).w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec2 cur_pos;\n    float cur_deg;\n    float cur_morph;\n    if(iFrame == 0)\n    {\n        cur_pos = vec2(0.0,0.0);\n        cur_deg = 0.0;\n        cur_morph = 0.0;\n        fragColor = vec4(cur_pos, cur_deg,cur_morph);\n        return;\n    }\n    \n\tvec2 prevPos = animationPos(fragCoord.x);\n\tfloat prevDeg = deg(fragCoord.x);\n    float prevMorph = morfval(fragCoord.x);\n    vec2 target = vec2(-0.1,0.3);\n    float targetDeg = 0.0;\n    float targetMorph = 0.0;\n    \n    float t = mod(iTime,6.0);\n    \n\tfloat speed = 0.2;\n    if(t>0.0 && t<1.0){\n        speed = 0.2;\n    \ttarget = vec2(-0.03,-0.03);\n        targetDeg = 45.0;\n        targetMorph = 1.0;\n    } else if(t>=1.0 && t<2.0) {\n        target = vec2(-0.1,-0.1);\n        targetDeg = 90.0;\n         targetMorph = 0.0;\n    } else if(t>=2.0 && t<3.0) {\n        target = vec2(-0.15,-0.15);\n        targetDeg = 135.0;\n         targetMorph = 1.0;\n    } else if(t>=3.0 && t<4.0) {\n        target = vec2(-0.2,-0.2);\n        targetDeg = 180.0;\n         targetMorph = 0.0;\n    } else if(t>=4.0 && t<5.0) {\n        target = vec2(-0.25,-0.25);\n        targetDeg = 225.0;\n         targetMorph = 1.0;\n    } else if(t>=5.0 && t<6.0) {\n        target = vec2(0.0);\n        targetDeg = 0.0;\n        speed = 0.15;\n         targetMorph = 0.0;\n    }\n    \n    cur_pos = prevPos;\n\tcur_pos.x += (target.x-cur_pos.x)*speed;\n    cur_pos.y += (target.y-cur_pos.y)*speed ;\n\n    cur_deg = prevDeg;\n    cur_deg += (targetDeg-cur_deg)*speed;\n    \n    cur_morph = prevMorph;\n    cur_morph += (targetMorph-cur_morph)*(speed*2.0);\n    \n    fragColor = vec4(cur_pos,cur_deg,cur_morph);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}