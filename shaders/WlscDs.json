{
    "Shader": {
        "info": {
            "date": "1593459543",
            "description": "Attempt to create a specific volumetric shader, it has bugs. Keys 1,2, 3 move camera closer, press together to combine. Mouse LMB click and drag rotate sphere and mouse X coord also changes camera distance.",
            "flags": 16,
            "hasliked": 0,
            "id": "WlscDs",
            "likes": 21,
            "name": "Plasma filaments in sphere",
            "published": 3,
            "tags": [
                "plasma",
                "sphere",
                "volumetric",
                "raymarcher",
                "learning",
                "filements"
            ],
            "usePreview": 0,
            "username": "terraquoia",
            "viewed": 703
        },
        "renderpass": [
            {
                "code": "// Derived from \"Supernova remnant\" by Duke and other sources (github etc)\n// source shader is at https://www.shadertoy.com/view/MdKXzc\n// the code presented here is collected from various sources, i lost count how many sites i traversed while learning\n// this is not a standalone shader. it incomplete and i'm in process of learning so please excuse me for any bad practices\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// CHANGELOG\n// 30.06.2020 - Added simple noise as suggested by Shane and jeyko to reduce visible color banding due to limited raymarch step count\n\n#define pi 3.14159265\n#define R(p, a) p=cos(a)*p+sin(a)*vec2(p.y, -p.x)\n\n\nfloat mod289(float x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec4 perm(vec4 x) { return mod289(((x * 34.0) + 1.0) * x); }\n\nfloat hash31(vec3 p){  return fract(sin(dot(p, vec3(113.587, 27.609, 57.583)))*43758.5453); }\n\nfloat noise(vec3 p)\n{\n\tvec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n\tvec4 k1 = perm(b.xyxy);\n\tvec4 k2 = perm(k1.xyxy + b.zzww);\n\n\tvec4 c = k2 + a.zzzz;\n\tvec4 k3 = perm(c);\n\tvec4 k4 = perm(c + 1.0);\n\n\tvec4 o1 = fract(k3 * (1.0/ 41.0));\n\tvec4 o2 = fract(k4 * (1.0/ 41.0));\n\n\tvec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n\tvec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n\treturn o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat length2(vec2 p)\n{\n\treturn sqrt(p.x * p.x + p.y * p.y);\n}\n\nfloat length8(vec2 p)\n{\n    p = p * p; p = p * p; p = p * p;\n\treturn pow(p.x + p.y, 1.0 / 8.0);\n}\n\nfloat Disk(vec3 p, vec3 t)\n{\n\tvec2 q = vec2(length2(p.xy) - t.x, p.z * 0.5);\n\treturn max(length8(q) - t.y, abs(p.z) - t.z);\n}\n\n// 1 / sqrt(2)\n#define NORMALIZER 0.70710678118654752440084436210485\n#define NOISE_LOOPS 6\n\nfloat SpiralNoiseC(vec3 p)\n{\n\tfloat n = 0.0;\t// noise amount\n\tfloat iter = 2.5;\n\tfor (int i = 0; i < NOISE_LOOPS; i++)\n    {\n\t\tR(p.yz, noise(p + iTime * 0.031));\n\t\t// add sin and cos scaled inverse with the frequency\n\t\tn += -abs(sin(p.y * iter) + sin(p.x * iter)) / iter;\t// abs for a ridged look\n\t\tp.xy *= NORMALIZER;\n\t\t// rotate on other axis\n\t\tR(p.xz, noise(p + iTime * 0.0045));\n\t\tp.xz *= NORMALIZER;\n\t\t// increase the frequency\n\t\titer *= sqrt(sin(iTime * 0.1) + 2.7); //1.733733;\n\t}\n    return n;\n}\n\nfloat NebulaNoise(vec3 p)\n{\n    float final = Disk(p.xzy, vec3(noise(p + 0.31 * iTime) * 2.0, noise(p + 0.11 * iTime) * 1.8, noise(p + 0.21 * iTime) * 1.25));\n    final += SpiralNoiseC(p.zxy * 0.5123+ noise(p + 0.31 * iTime)) * 3.0;\n    return final;\n}\n\n#define _MAIN_RADIUS 0.481\n#define _EXCLUSION_RADIUS 0.3\n#define _RAYMARCH_STEPS 50\n#define _SURFACE_DISTANCE 0.075\n\nfloat map(vec3 p)\n{\n\tR(p.xz, iMouse.x * 0.008 * pi + iTime * 0.01);\n\tR(p.zy, iMouse.y * 0.008 * pi + iTime * 0.02);\n    float NebNoise = abs(NebulaNoise(p * 2.0) * 0.9);\n    return NebNoise + 0.07;\n}\n\n// assign color to the media\nvec3 computeColor(float density, float radius)\n{\n    // color based on density alone, gives impression of occlusion within\n    // the media\n    vec3 result = mix(vec3(1.0, 0.9, 0.8), vec3(0.4, 0.15, 0.1), density );\n\n    // color added to the media\n    vec3 colCenter = 7. * vec3(0.8, 1.0, 1.0);\n    vec3 colEdge = 1.5 * vec3(0.48, 0.53, 0.5);\n    result *= mix(colCenter, colEdge, min((radius + .05) / .9, 1.15 ));    \n    return result;\n}\n\n//https://youtu.be/HFPlKQGChpE?t=657\nbool RaySphereIntersect(vec3 rayOrigin, vec3 rayDirection, vec3 center, float radius, out float nearPointStep, out float farPointStep)\n{\n    float midValue = dot(center - rayOrigin, rayDirection);\n    vec3 midPoint = rayOrigin + midValue * rayDirection;\n    float midPointToCenterLength = length(center - midPoint);\n    if (midPointToCenterLength < radius)\n    {\n        // ray is inside, set lengths for calculating ray entry and exit points on sphere ...\n        float intersectionLength = sqrt(radius * radius - midPointToCenterLength * midPointToCenterLength);\n        nearPointStep = midValue - intersectionLength;\n        farPointStep = midValue + intersectionLength;\n        return true;\n    }\n    //...else the ray missed the sphere, set entry and exit points to meaningless zeros and return false to indicate intersection failure\n    nearPointStep = 0.0;\n    farPointStep = 0.0;\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tconst float KEY_1 = 49.5/256.0;\n\tconst float KEY_2 = 50.5/256.0;\n\tconst float KEY_3 = 51.5/256.0;\n\tfloat key = 0.0;\n\tkey += 0.1*texture(iChannel1, vec2(KEY_1,0.25)).x;\n\tkey += 0.1*texture(iChannel1, vec2(KEY_2,0.25)).x;\n\tkey += 0.1*texture(iChannel1, vec2(KEY_3,0.25)).x;\n\n\tvec3 rayDirection = normalize(vec3((fragCoord.xy-0.5*iResolution.xy)/iResolution.y, 1.0));\n\tvec3 rayOrigin = vec3(0.0, 0.0, -1.3+key*1.6+(iMouse.x*2.0-iResolution.x)/iResolution.x*1.0);\n    const vec3 sphereCenter = vec3(0);\n    float localDensity = 0.0, totalDensity = 0.0, weightFactor = 0.0;\n\n    float dist = 1., rayStep = 0.;\n\n    vec4 sum = vec4(0.0);\n\n    float min_dist = 0.0, max_dist = 0.0;\n    vec3 lightColor = vec3(1.0, 0.5, 0.25);\n\n    if (RaySphereIntersect(rayOrigin, rayDirection, vec3(0, 0, 0), _MAIN_RADIUS, min_dist, max_dist))\n    {\n        rayStep = min_dist * step(rayStep, min_dist);\n\n        // raymarch loop\n        for (int i = 0; i < _RAYMARCH_STEPS; i++)\n        {\n            vec3 pos = rayOrigin + rayStep * rayDirection;\n\n            //if point is inside SDF sphere of given radius, skip all calculations. easier than to make a new RaySphereIntersect() just for this\n            if (length(pos - sphereCenter) - _EXCLUSION_RADIUS <= 0.0) continue;\n            \n            // Loop break conditions.\n            //OLD CODE\n            //if (totalDensity > 0.9 || dist < 0.1 * rayStep || rayStep>10. || sum.a > 0.99 || rayStep > max_dist) break;\n            //NEW CODE \n            if (totalDensity > 0.9 || sum.a > 0.99 || rayStep > max_dist) break;\n\n            // point light calculations\n            vec3 lightVector = sphereCenter - pos;\n            float lightDistance = max(length(lightVector), 0.001);\n\n            // evaluate distance function, point multiplied to allow for visible effects on shrinked down sphere\n            dist = map(pos * 3.);\n\n            // change this string to control density\n            dist = max(dist, 0.0);\n\n            // the color of light\n            sum.rgb += lightColor / exp(lightDistance * lightDistance * lightDistance * .09) / 22. ; // bloom\n\n            if (dist <= _SURFACE_DISTANCE)\n            {\n                // compute local density\n                localDensity = _SURFACE_DISTANCE - dist;\n\n                // compute weighting factor\n                weightFactor = (1. - totalDensity) * localDensity;\n\n                // accumulate density\n                totalDensity += weightFactor + 0.01;\n\n                vec4 col = vec4(computeColor(totalDensity, lightDistance), totalDensity);\n\n                // emission\n                sum += sum.a * vec4(sum.rgb, 0.0) * 0.2;\n\n                // uniform scale density\n                col.a *= 0.2;\n\n                // colour by alpha\n                col.rgb *= col.a;\n\n                // alpha blend in contribution\n                sum = sum + col * (1.0 - sum.a);\n\n            }\n\n            totalDensity += 1. / 70.;\n\n            //Added 30.06.2020 as commented by Shane and jeyko.\n            //Minor change :\n            //Instead affecting distance at start, it is changed here\n            //to only affect rayStep used to raymarch through volume.\n            //Adds sufficient noise with some leftover banding artefacts which should\n            //not be noticable in a more complex visual environment.\n            dist *= 0.51 + hash31(pos + 113.1) * 0.18;\n            \n            // trying to optimize step size near the camera and near the light source\n            rayStep += max(dist * 0.1 * max(min(length(lightVector), length(rayOrigin)), 1.0), 0.01 );\n        }\n\n        // simple scattering\n        sum *= 1. / exp(localDensity * 0.2) * 0.6;\n        sum = clamp(sum, 0.0, 1.0);\n        sum.xyz = sum.xyz * sum.xyz * (3.0 - 2.0 * sum.xyz);\n    }\n    \n    fragColor = vec4(sum.xyz,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}