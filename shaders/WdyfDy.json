{
    "Shader": {
        "info": {
            "date": "1607821328",
            "description": "Raymarched 3D fractal noise looks pretty cool! I tried accelerating it by first testing whether the point is inside the bounding box but I am not sure just how efficient it is (unrolled). Mouse x to set threshold, mouse y to set octaves (layers).",
            "flags": 0,
            "hasliked": 0,
            "id": "WdyfDy",
            "likes": 6,
            "name": "Raymarched 3D Fractal Noise",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "organic",
                "fractalnoise"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 256
        },
        "renderpass": [
            {
                "code": "// Hue to RGB function from Fabrice's shadertoyunofficial blog:\n#define hue2rgb(hue) 0.6 + 0.6 * cos(6.3 * hue + vec3(0.0, 23.0, 21.0))\n\n#define SIN_15 0.2588190451\n#define COS_15 0.96592582628\n\n// Hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW):\nfloat Noise3D(in vec3 p3) {\n\tp3  = fract(p3 * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat SmoothNoise3D(in vec3 p) {\n    vec3 cell = floor(p);\n    vec3 local = fract(p);\n    local *= local * (3.0 - 2.0 * local);\n\n    float ldb = Noise3D(cell);                       // Left, Down, Back\n    float rdb = Noise3D(cell + vec3(1.0, 0.0, 0.0)); // Right, Down, Back\n    float ldf = Noise3D(cell + vec3(0.0, 0.0, 1.0)); // Left, Down, Front\n    float rdf = Noise3D(cell + vec3(1.0, 0.0, 1.0)); // Right, Down, Front\n    float lub = Noise3D(cell + vec3(0.0, 1.0, 0.0)); // Left, Up, Back\n    float rub = Noise3D(cell + vec3(1.0, 1.0, 0.0)); // Right, Up, Back\n    float luf = Noise3D(cell + vec3(0.0, 1.0, 1.0)); // Left, Up, Front\n    float ruf = Noise3D(cell + vec3(1.0, 1.0, 1.0)); // Right, Up, Front\n\n    return mix(mix(mix(ldb, rdb, local.x),\n                   mix(ldf, rdf, local.x),\n                   local.z),\n\n               mix(mix(lub, rub, local.x),\n                   mix(luf, ruf, local.x),\n                   local.z),\n\n               local.y);\n}\n\nfloat FractalNoise3D(in vec3 p, in float scale, in float octaves) {\n    float value = 0.0;\n    float nscale = 1.0;\n    float tscale = 0.0;\n\n    for (float octave=0.0; octave < octaves; octave++) {\n        value += SmoothNoise3D(p * pow(2.0, octave) * scale) * nscale;\n        tscale += nscale;\n        nscale *= 0.5;\n    }\n\n    return value / tscale;\n}\n\nfloat mapScene(in vec3 p) {\n    float octaves = 4.0;\n    float threshold = 0.4;\n\n    if (iMouse.z > 0.0) {\n        octaves = iMouse.y / iResolution.y * 4.0;\n        threshold = iMouse.x / iResolution.x * 0.9;\n    }\n\n    vec3 q = abs(p) -1.5;\n    float bbox = max(q.x, max(q.y, q.z));\n\n    return max(FractalNoise3D(p, 2.0, octaves) - threshold, bbox);\n}\n\nvec3 getNormal(in vec3 p) {\n    return normalize(vec3(mapScene(p + vec3(0.001, 0.0, 0.0)) - mapScene(p - vec3(0.001, 0.0, 0.0)),\n                          mapScene(p + vec3(0.0, 0.001, 0.0)) - mapScene(p - vec3(0.0, 0.001, 0.0)),\n                          mapScene(p + vec3(0.0, 0.0, 0.001)) - mapScene(p - vec3(0.0, 0.0, 0.001))));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 5.0), rd = normalize(vec3(uv, -1.0)), p;\n    float dt = 0.0, d;\n    bool hit = false;\n\n    for (int iter=0; iter < 100; iter++) {\n        p = ro + rd * dt;\n\n        p.y -= 0.3;\n        p.yz *= mat2(COS_15, SIN_15, -SIN_15, COS_15);\n        float c = cos(iTime), s = sin(iTime);\n        p.xz *= mat2(c, s, -s, c);\n\n        vec3 q = abs(p) - 1.5;\n        d = max(q.x, max(q.y, q.z));\n        if (d < 0.001) {\n            d = mapScene(p);\n            if (d < 0.001) {\n                hit = true;\n                break;\n            }\n        }\n\n        if (dt > 10.0) {\n            break;\n        }\n\n        dt += d;\n    }\n\n    if (hit) {\n        vec3 n = getNormal(p);\n        fragColor.rgb += 0.5 + 0.5 * n;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}