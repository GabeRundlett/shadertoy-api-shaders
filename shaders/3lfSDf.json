{
    "Shader": {
        "info": {
            "date": "1564436696",
            "description": "The conclusion to the dithering saga! (possibly)\n\nThey look like at any moment they'll all combine together and explode into fireworks.",
            "flags": 0,
            "hasliked": 0,
            "id": "3lfSDf",
            "likes": 3,
            "name": "Union of Rainbow",
            "published": 3,
            "tags": [
                "raymarching",
                "rainbow",
                "dithering"
            ],
            "usePreview": 0,
            "username": "ShaderPrankster",
            "viewed": 565
        },
        "renderpass": [
            {
                "code": "float dither8x8(vec2 position, float brightness) {  \n  float limit = texture(iChannel0, position / iChannelResolution[0].xy).r;\n\n  return brightness < limit ? 0.0 : 1.0;\n}\n\n// SDFs and Smooth Union from https://iquilezles.org/\nfloat sdSphere( vec3 p, float s ){\n  return length(p)-s;\n}\n\nfloat sminCubic( float a, float b, float k ){\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*h*k*(1.0/6.0);\n}\n\n\nfloat intersect(vec3 point){\n    float fSphere = sdSphere(vec3(cos(iTime), 1.0, 5.0 + sin(iTime)) - point, 1.0);\n    float tSphere = sdSphere(vec3(cos(iTime * 1.2), 2.5, 5.0 + sin(iTime * 1.3)) - point, 0.7);\n    float dSphere = sdSphere(vec3(cos(iTime * 1.7), sin(iTime * 2.3), 5.0 + sin(iTime * 0.5)) - point, 0.3);\n    \n    float sphereRes = sminCubic(sminCubic(fSphere, tSphere, 0.4), dSphere, 0.4);\n\treturn sphereRes;\n}\n\nfloat march(vec3 rayOrigin, vec3 rayDirection){\n\tfloat minimumHit = 0.0;\n    \n    for(int i = 0; i < 100; i++){\n    \tvec3 hit = rayOrigin + rayDirection * minimumHit;\n        float dist = intersect(hit);\n        minimumHit += dist;\n        if(dist > 100.0 || dist < 0.01) break;\n    }\n    return minimumHit;\n}\n\nvec3 getNormal(vec3 point){\n\tfloat distPoint = intersect(point);\n    vec2 e = vec2(0.01, 0);\n    \n    vec3 norm = distPoint - vec3(intersect(point - e.xyy), intersect(point - e.yxy), \n                            \t intersect(point - e.yyx));\n    return normalize(norm);\n}\n\nfloat lightCalculate(vec3 lightPos, vec3 point){\n\tvec3 lightDirection = normalize(lightPos - point);\n    vec3 normal = getNormal(point);\n    float brightness = clamp(dot(normal, lightDirection), 0.0, 1.0);\n    \n    float shadowCatch = march(point + normal * 0.11, lightDirection);\n    if(shadowCatch < length(lightPos - point)) brightness *= 0.1;\n      \n    return brightness;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0);\n    \n    vec3 rayOrigin = vec3(sin(iTime), 1.5, -0.5);\n    vec3 rayDirection = normalize(vec3(uv,1));\n    \n    vec3 lightPos = vec3(1, 5, sin(iTime));\n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.0;\n    \n    float hitDist = march(rayOrigin, rayDirection);\n    vec3 hitPoint = rayOrigin + rayDirection * hitDist;\n    \n    vec3 scrollCol = vec3(cos(iTime + uv.y), sin(iTime + uv.y), 1.0);\n    col = scrollCol * dither8x8(fragCoord, lightCalculate(lightPos,hitPoint));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}