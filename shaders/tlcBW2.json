{
    "Shader": {
        "info": {
            "date": "1613455762",
            "description": "Exact distance to a triangle wave.",
            "flags": 0,
            "hasliked": 0,
            "id": "tlcBW2",
            "likes": 7,
            "name": "Distance to Triangle Wave",
            "published": 3,
            "tags": [
                "2d",
                "distancefield",
                "sdf",
                "distance",
                "periodic",
                "trianglewave",
                "exact"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 230
        },
        "renderpass": [
            {
                "code": "float udTriangleWave(in vec2 p, in float freq, in float amp) {\n    float pw = 1.0 / freq, qw = 0.25 * pw;\n    vec2 sc = vec2(2.0 * amp, pw);\n    float l = length(sc);\n    p.x = abs(mod(p.x + qw, pw) - 0.5 * pw) - qw;\n    p *= mat2(sc, -sc.y, sc.x) / l;\n    return length(vec2(p.x, max(0.0, abs(p.y) - 0.25 * l)));\n}\n\nfloat sdTriangleWave(in vec2 p, in float freq, in float amp) {\n    float pw = 1.0 / freq, qw = 0.25 * pw;\n    vec2 sc = vec2(2.0 * amp, pw);\n    float l = length(sc);\n    p.x = abs(mod(p.x + qw, pw) - 0.5 * pw) - qw;\n    p *= mat2(sc, -sc.y, sc.x) / l;\n    return length(vec2(p.x, max(0.0, abs(p.y) - 0.25 * l))) * sign(p.x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n    float time = iTime * 2.0;\n\n    float freq = 5.125 + 4.875 * sin(iTime);\n    float amp = 0.5 + 0.5 * cos(iTime);\n    if (iMouse.z > 0.0) {\n        freq = 1.0 / abs(mouse.x);\n        amp = mouse.y * 2.0;\n        uv.x *= sign(mouse.x);\n    }\n\n    float d = int(iTime * 0.25) % 2 == 0 ? udTriangleWave(uv, freq, amp) : sdTriangleWave(uv, freq, amp);\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcolor *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(140.0 * d);\n\tcolor = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 0.015, abs(d)));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}