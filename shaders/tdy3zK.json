{
    "Shader": {
        "info": {
            "date": "1570564736",
            "description": "Fractals are frail, right?",
            "flags": 0,
            "hasliked": 0,
            "id": "tdy3zK",
            "likes": 15,
            "name": "Shadertober 08 - Frail",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbulb",
                "inktober",
                "shadertober",
                "frail",
                "backwardscaptain"
            ],
            "usePreview": 0,
            "username": "BackwardsCap",
            "viewed": 752
        },
        "renderpass": [
            {
                "code": "#define MAX_DIST 20.0\nfloat g;\nfloat bulb(vec3 p)\n{\n    \n    vec3 z = p;\n    \n    {\n        const float exBR = 1.5;\n        float r = length(p)-exBR;\n        if(r>1.0){return r;}\n    }\n    \n    float dr =1., r=0., pw = 8., fr=.0, theta, phi, zr;\n    for(int i=0;i<10;i++)\n    {\n        \n        r=length(z);\n        if(r>2.)\n        {\n            fr = min(0.5*log(r)*r/dr, length(p)-.72);\n            break;\n        }\n        theta=acos(z.z/r)+iTime/10.;\n        phi = atan(z.y,z.x);\n        dr = pow(r,7.)*7.*dr+1.;\n        \n        zr = pow(r,pw);\n        theta = theta*pw;\n        phi = phi*pw;\n        \n        z=zr*vec3(sin(theta)*cos(phi),\n                  sin(phi)*sin(theta),\n                  cos(theta))+p;\n    }\n    \n    return fr;\n    \n}\n\nfloat map(vec3 p)\n{\n    float s = bulb(p);\n    \n    g+=0.1/(0.1+s*s);\n    \n    return s;\n}\n\nfloat ray(vec3 ro, vec3 rd)\n{\n    float t = 0.;\n    for(int i=0;i<100;i++)\n    {\n        \n        vec3 p = ro+rd*t;\n        float s = map(p);\n\n        if(s<0.00001)break;\n        t+=s;\n        if(t>MAX_DIST)break;\n        \n    }\n    if(t>MAX_DIST)t=-1.;\n    \n    return t;\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 e= vec2(0.005,0.);\n    return normalize(vec3(\n        map(p+e.xyy)-map(p-e.xyy),\n        map(p+e.yxy)-map(p-e.yxy),\n        map(p+e.yyx)-map(p-e.yyx)\n        ));\n}\n\nvec3 color(vec3 ro, vec3 rd, float r)\n{\n    vec3 c = vec3(0.);\n    vec3 cs = 0.5 + 0.5*cos(iTime+rd.xyx+vec3(0,2,4));\n    \n    if(r>0.)\n    {\n        vec3 p = ro+rd*r;\n        vec3 n = normal(p);\n        vec3 sun = normalize(vec3(0.2,0.5,0.3));\n        float dif = clamp(dot(sun,n),0.0,1.0);\n        float sky = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.,1.);\n        \n        c=vec3(r)*-.1;\n        c+=cs*r*dif;\n        c+=r*sky*vec3(0.9,0.5,0.5);\n        \n    }\n    \n    \n    return c+(g/75.*cs);\n}\n\nvoid mainImage( out vec4 c, in vec2 f )\n{\n    vec2 uv = (2.*f-iResolution.xy)/iResolution.y;\n\n    \n    float d = 1.2, t=3.1415927/2.;\n    vec3 ro = vec3(cos(t)*d,0,sin(t)*d);\n    \n    vec3 ta = vec3(0);\n    \n    vec3 cf = normalize(ta-ro);\n    vec3 cu = normalize(cross(cf,vec3(0,1,0)));\n    vec3 cr = normalize(cross(cf,cu));\n    \n    float dst =( min((1.+cos(iTime/5.))/2.+.1,1.)*.5)/2.+.3;\n    vec3 rd = normalize(uv.x*cu+uv.y*cr+dst*cf);\n    \n    float r = ray(ro,rd);\n\n    c = vec4(color(ro,rd,r),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}