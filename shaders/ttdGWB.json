{
    "Shader": {
        "info": {
            "date": "1577578958",
            "description": "From the book Texturing & Modeling: A Procedural Approach",
            "flags": 0,
            "hasliked": 0,
            "id": "ttdGWB",
            "likes": 3,
            "name": "just another star",
            "published": 3,
            "tags": [
                "star"
            ],
            "usePreview": 0,
            "username": "maksy",
            "viewed": 266
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592\n\nmat2 rotate2d(float angle)\n{\n\treturn mat2(cos(angle), -sin(angle),\n                sin(angle),  cos(angle));\n}\n\nfloat star(vec2 pos, float npoints, float rmin, float rmax)\n{\n    // calculates how wide the angle between two points of the star is\n    float starAngle = 2.0*PI/npoints;\n\t\n    // polar coordinates of the given point\n    float angle = atan(pos.x, pos.y) + PI;\n\tfloat radius = length(pos);\n    \n    // transforms the coordinates into new feature space in which\n    // the range between two points is set to 0 to 1. If the point lies \n    // in the upper half of the \"V\" shape the point is reflected to the\n    // lower half through the center line. This is done to avoid checking \n    // both edges and is possible due to symmetry.\n    angle = mod(angle, starAngle) / starAngle;\n    if (angle >= 0.5) {\n\t\tangle = 1.0 - angle;\n    }\n\t\n    // the tip of a point of the star\n    vec3 p0 = vec3(rmax, 0, 0);\n    // the point lying in the middle of the two points at radius rmin\n    // from the center\n\tvec3 p1 = rmin * vec3(cos(starAngle/2.0), sin(starAngle/2.0), 0.0);\n    \n    // vector from the tip of the star point to the point at rmin radius\n    // from the centre \n    vec3 d0 = p1 - p0; \n    // vector from the the tip to the current position\n    vec3 d1 = radius * vec3(cos(angle), sin(angle), 0) - p0;\n    \n    // cross product will point along the positive z-axis or along the negative\n    // z-axis. The direction is determined by whether the first vector is \n    // to the left or to the right of the second vector. Hence, the direction\n    // of the cross product tells which side of the edge d0 and if it's inside\n    // the star or not.\n    vec3 direction = cross(d0, d1);\n    \n\treturn smoothstep(0.0, 0.002, direction.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - iResolution.xy*0.5)/iResolution.y;\n\n\tuv = rotate2d(sin(iTime*0.4)*PI) * uv;\n\t\n    vec3 starColor = vec3(1.0000,0.5161, 0.0000);\n\tvec3 bgColor = vec3(0.0);\n    \n\tfloat in_out = star(uv, 5.0, 0.1, 0.3);\n\tvec3 col = mix(bgColor, starColor, in_out);\n   \n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}