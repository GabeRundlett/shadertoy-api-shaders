{
    "Shader": {
        "info": {
            "date": "1586015777",
            "description": "Just an exemple of how domain remapping can be applied;",
            "flags": 0,
            "hasliked": 0,
            "id": "tdjyRz",
            "likes": 4,
            "name": "Domain Remapping Example",
            "published": 3,
            "tags": [
                "beginner"
            ],
            "usePreview": 0,
            "username": "GabrielFelix",
            "viewed": 529
        },
        "renderpass": [
            {
                "code": "float domainRemapping(float minInput, float maxInput, float minOutput, float maxOutput, float domain)\n{\n    //normalize domain (put it into the 0-1 range)\n    float normalizedDomain = (domain - minInput) / (maxInput - minInput);\n    \n    //use lerp\n    return minOutput * (1. - normalizedDomain) + maxOutput * normalizedDomain;\n    \n    //I found a new method today thay requires less calculations, very interesting!\n    //return normalizedDomain * (maxOutput - minOutput) + minOutput;  \n}\n\n\nvec3 Rectangle(vec2 uv, vec4 size, vec3 color, vec2 position, float blur)\n{\n\t//size input order: left right up down\n    uv -= position;\n    \n    float left = smoothstep(size.x - blur, size.x + blur, uv.x);\n    float right = smoothstep(size.y + blur, size.y - blur, uv.x);\n    \n    float up = smoothstep(size.z - blur, size.z + blur, uv.y);\n    float down = smoothstep(size.w + blur, size.w - blur, uv.y);\n    \n    \n    return (left * right * up * down) * color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n\n    //building the rectangle\n    vec4 size = vec4(-.3, .3, -.3, .3);\n    vec3 color = vec3(1., 1., 1.);\n    vec2 position = vec2(0., 0.);\n    float blur = domainRemapping(-.3, .3, 0.001, 0.1, uv.y);\n    \n    vec3 rect = Rectangle(uv, size, color, position, blur); \n    \n    // Output to screen\n    fragColor = vec4( rect ,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}