{
    "Shader": {
        "info": {
            "date": "1531923626",
            "description": "Not very good, has issues looping",
            "flags": 0,
            "hasliked": 0,
            "id": "XlcczM",
            "likes": 18,
            "name": "Film Studies",
            "published": 3,
            "tags": [
                "raytracing",
                "recursive",
                "film"
            ],
            "usePreview": 0,
            "username": "culdevu",
            "viewed": 647
        },
        "renderpass": [
            {
                "code": "// WIP, mostly hardcoded gibberish\n\n// Publishing this because it's a neat idea that I'm \n// probably never going to touch again. Someone else\n// can do something with it.\n\n// The syncing isn't right, especially with the clouds,\n// and the alignment and rotation of the wheel too :P\n\n#define PI 3.14159\n#define BASE_FPS 30.\n#define reelRad 30.\n#define reelH 1.6\n#define radsPerFrame (reelH/reelRad)\n#define reelCenter vec3(reelRad - 1., 0, 0)\n\n//-------------------------------------------------------------\n// Utilities\n//-------------------------------------------------------------\n// from Mercury sdf library\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat m(float a, float b, out float i)\n{\n    i = floor(a / b);\n    return (a - floor(a / b)*b) / b;\n}\n\n//-------------------------------------------------------------\n// primitives\n//-------------------------------------------------------------\nfloat sphere(vec3 p, vec3 ray, float r)\n{\n    float midl = length(dot(p, ray) * ray - p);\n    if (midl > r)\n        return -1.;\n    \n    return dot(p, ray) - sqrt(r*r - midl*midl);\n}\n\n// from iq's shader\nvec4 iCylinder( in vec3 ro, in vec3 rd, \n                in vec3 pa, in vec3 pb, in float ra ) // point a, point b, radius\n{\n    // center the cylinder, normalize axis\n    vec3 cc = 0.5*(pa+pb);\n    float ch = length(pb-pa);\n    vec3 ca = (pb-pa)/ch;\n    ch *= 0.5;\n\n    vec3  oc = ro - cc;\n\n    float card = dot(ca,rd);\n    float caoc = dot(ca,oc);\n    \n    float a = 1.0 - card*card;\n    float b = dot( oc, rd) - caoc*card;\n    float c = dot( oc, oc) - caoc*caoc - ra*ra;\n    float h = b*b - a*c;\n    if( h<0.0 ) return vec4(-1.0);\n    h = sqrt(h);\n    float t1 = (-b-h)/a;\n    //float t2 = (-b+h)/a; // exit point\n\n    float y = caoc + t1*card;\n\n    // body\n    if( abs(y)<ch ) return vec4( t1, normalize( oc+t1*rd - ca*y ) );\n    \n    // caps\n    float sy = sign(y);\n    float tp = (sy*ch - caoc)/card;\n    if( abs(b+a*tp)<h )\n    {\n        return vec4( tp, ca*sy );\n    }\n\n    return vec4(-1.0);\n}\n\nvec4 cylWall(in vec3 ro, in vec3 rd, \n                in vec3 pa, in vec3 pb, in float ra)\n{\n    vec4 c = iCylinder(ro, rd, pa, pb, ra);\n    \n    if (abs(c.z) > 0.05)\n    {\n        vec3 _ro = ro + rd * 50.;\n        vec3 _rd = -rd;\n        \n        c = iCylinder(_ro, _rd, pa, pb, ra);\n        \n        if (abs(c.z) > 0.05)\n        \treturn vec4(-1.);\n\t\telse\n            return vec4(50. - c.x, c.yzw);\n    }\n    \n    return c;\n}\n\n//-------------------------------------------------------------\n// storyboarding\n//-------------------------------------------------------------\nvec3 camPos_sb(float frame)\n{   \n    float time = frame / BASE_FPS;\n    \n    float rad = reelRad + 1. + 4. * smoothstep(0., 5., time);\n    \n    vec3 offset = vec3(cos(9.*PI/8.), 0, sin(9.*PI/8.)) * (reelRad + 0.635);\n    vec3 offset2= vec3(cos(9.*PI/8.), 0, sin(9.*PI/8.)) * (reelRad + 5.) + vec3(0,2,0);\n    \n    return reelCenter + mix(offset, offset2, smoothstep(5., 8., time));\n}\nvec3 camFocus_sb(float frame)\n{\n    float time = frame / BASE_FPS;\n    \n    vec3 focus1 = reelCenter;\n    vec3 focus2 = vec3(2, 0, 0);\n    \n    return mix(focus1, focus2, smoothstep(5., 8., time));\n}\nvec3 camForward_sb(float frame)\n{\n    float time = frame / BASE_FPS;\n    \n    vec3 p = camPos_sb(frame);\n    vec3 q = camFocus_sb(frame);\n    vec3 d = q - p;\n    \n    return d;\n}\nfloat camRotZ_sb(float frame)\n{\n    float time = frame / BASE_FPS;\n    return mix(PI/2., PI/5., smoothstep(5., 8., time));\n}\nfloat frameRate_sb(float frame)\n{\n    // need to change this to prevent the film from going backwards\n    return mix(radsPerFrame, 1./(BASE_FPS * 5.), smoothstep(2., 7., frame/BASE_FPS));\n}\n\n//-------------------------------------------------------------\n// rendering\n//-------------------------------------------------------------\nvec3 bg(vec3 ray, float frame)\n{\n    vec3 ray2 = ray;\n    float time = frame / BASE_FPS;\n    time = mod(time, 10.);\n    pR(ray.xz, time * PI / 2.);\n    pR(ray2.xz, time * PI / 2.);\n    \n    float ang = atan(ray.z, ray.x);\n    return (texture(iChannel0, ray).xyz + texture(iChannel0, -ray2).xyz)/4. + \n        vec3(texture(iChannel1, ray2).x, 0, 0)/6.;\n}\nvec3 render(vec3 o, vec3 ray, float frame)\n{\n    vec3 cloudsRay = ray;\n    //pR(cloudsRay.xz, frame / BASE_FPS);\n    \n    float t = 8000.;\n    vec3 col = bg(cloudsRay, frame);//texture(iChannel0, cloudsRay).xyz; //vec3(0.2);\n    //col.b = 1. - col.b;\n    \n    vec4 c; float s;\n    \n    c = iCylinder(o, ray, vec3(0,-1,0), vec3(0,1,0), 1.);\n    s = c.x;\n    if (s < t && s > 0.)\n    {\n        t = s;\n        vec3 r = reflect(-ray, c.yzw);\n        vec3 p = o + ray * t;\n        col = vec3(0.1);\n        col *= (1. - smoothstep(0., 1., p.y) );\n    }\n    \n    // reel caps\n    c = iCylinder(o, ray, vec3(0,0.9,0), vec3(0,1.1,0), 2.);\n    s = c.x;\n    if (s < t && s > 0.)\n    {\n        t = s;\n        vec3 r = reflect(-ray, c.yzw);\n        vec3 p = o + ray * t;\n        float a = atan(p.z, p.x);\n        a += frameRate_sb(frame) * frame * 10.;\n        a = mod(a, PI/4.);\n        col = bg(r, frame) * smoothstep(PI/16., PI/16. + 0.001, a);\n    }\n    \n    c = iCylinder(o, ray, vec3(0,-.9,0), vec3(0,-1.1,0), 2.);\n    s = c.x;\n    if (s < t && s > 0.)\n    {\n        t = s;\n        vec3 r = reflect(-ray, c.yzw);\n        vec3 p = o + ray * t;\n        float a = atan(p.z, p.x);\n        a += frameRate_sb(frame) * frame * 10.;\n        a = mod(a, PI/4.);\n        col = bg(r, frame) * smoothstep(PI/16., PI/16. + 0.001, a) * smoothstep(1.1, 2., length(p));\n    }\n    \n    // film\n    c = cylWall(o, ray, reelCenter + vec3(0,-reelH/2.,0), reelCenter + vec3(0,reelH/2.,0), reelRad);\n    s = c.x;\n    if (s < t && s > 0.)\n    {\n        t = s;\n        vec3 pos = o + ray * t - reelCenter;\n        float angle_raw = atan(pos.z, pos.x);\n        if (angle_raw < 0.)\n            angle_raw += 2. * PI;\n        if (angle_raw < PI)\n            return col;\n        \n        float angle = angle_raw;\n        \n        //angle += frame/(BASE_FPS * 10.);\n        //angle += 0.013;\n        //angle += frame/(BASE_FPS);\n        //float radsPerFrame = reelH / reelRad;\n        angle += 9.*PI/8.;// - radsPerFrame/2.;\n        angle += frameRate_sb(frame) * frame;\n        \n        float frame;\n        float u = (-pos.y + reelH/2.)/reelH;\n        float v = m(angle, reelH / reelRad, frame);\n        v = 1. - v;\n        frame += 10. * BASE_FPS;\n        \n        if (abs(u - 0.5)/0.5 < 0.8 && abs(v - 0.5)/0.5 < 0.9)\n        {\n            u = u * 1.2 - 0.1;\n            v = v * 1.2 - 0.05;\n            col = vec3(-frame, u, v);\n        }\n        else\n        {\n            col = vec3(0.9);\n            \n            float f = abs(u - 0.5)/0.5;\n            if (f > 0.85 && f < 0.95)\n            {\n                float trash;\n                float m2 = m(angle, reelH / (reelRad * 4.), trash);\n                if (m2 < 0.5)\n                    col = vec3(0.1);\n            }\n        }\n        \n        col *= smoothstep(0., 0.5, angle);\n        //col = vec3(1) - c.yzw;\n    }\n    \n    return col;\n}\n\nvec3 renderRecurse(vec2 uv, float frame)\n{\n    uv -= vec2(1, 1)/2.;\n    uv *= 2.;\n    \n    vec3 pxlLoc = vec3(uv, -1);\n    vec3 origin = vec3(0, 0, 10);\n    \n    float time = frame / BASE_FPS;\n    \n    //vec3 cam_angle = camAngle_sb(frame);\n    vec3 cam_forward = camForward_sb(frame);\n    vec3 cam_pos = camPos_sb(frame);\n    \n    float mouseU = iMouse.x / iResolution.x * 2. * PI;\n    float mouseV = (iResolution.y - iMouse.y) / iResolution.y * PI - PI/2.;\n    \n    vec3 x = normalize(cross(cam_forward, vec3(0,1,0)));\n    vec3 z = -normalize(cam_forward);\n    vec3 y = normalize(cross(z, x));\n    mat3 m = mat3(x, y, z);\n    pR(pxlLoc.xy, camRotZ_sb(frame));\n    pxlLoc = m * pxlLoc;\n    \n    origin = cam_pos;\n    \n    vec3 ray = normalize(pxlLoc);\n    \n    return render(origin, ray, frame);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float maxDim = max(iResolution.x, iResolution.y);\n    float otherDim = min(iResolution.x, iResolution.y);\n    \n    vec2 uv = fragCoord/iResolution.x + vec2(0, iResolution.y / iResolution.x)/2.;\n    \n    bool goingAround = true;\n    vec3 ret = vec3(0);\n    float time = mod(iTime, 10.);\n    float frame = floor(time * BASE_FPS);\n    \n    for (int i = 0; i < 4; ++i)\n    {\n        if (!goingAround)\n            break;\n        goingAround = false;\n        \n        ret = renderRecurse(uv, frame);\n        if (ret.x < 0.)\n        {\n            uv = ret.yz;\n            frame = - ret.x;\n            goingAround = true;\n        }\n    }\n    \n    fragColor = vec4(ret, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}