{
    "Shader": {
        "info": {
            "date": "1570978355",
            "description": "wanted to try some smooth snow flake. But it became  an electric raining shit. And it's not so bad in my opinion.",
            "flags": 0,
            "hasliked": 0,
            "id": "WdVGWK",
            "likes": 2,
            "name": "Shadertober 11 Snow",
            "published": 3,
            "tags": [
                "snow",
                "inktober"
            ],
            "usePreview": 0,
            "username": "GreenChicken",
            "viewed": 481
        },
        "renderpass": [
            {
                "code": "\n#define VOLUME 0.001\n#define PI 3.14159\n\n\n////////////////////////////////////////////////////////////////////////////////\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\nfloat sat(float a) {return clamp(a, .0, 1.); }\n\nfloat opU(float s1, float s2) { return min(s1, s2);}\n\nvec2 opU2(vec2 d1, vec2 d2) { return (d1.x < d2.x) ? d1 : d2; }\n\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec3 opRepLim( in vec3 p, in float c, in vec3 l)\n{\n    return p-c*clamp(round(p/c),-l,l);\n}\n\nvec3 opRep( in vec3 p, in vec3 c)\n{\n    return mod(p+0.5*c,c)-0.5*c;\n}\n\n// -------------------------------------------------------------------------\n\nvec2 map(vec3 pos)\n{\n    vec2 t = vec2(0.0, -1.0);\n    \n    // ground\n    t.x = pos.y;\n    \n    // sphere\n    vec3 sp = pos + vec3(0.0, -1.0, 0.0);\n    vec2 sphere = vec2(sdSphere(sp,0.7), 0.0);\n    \n    // snow\n    vec3 np = sp + vec3(0.0, -.15, 0.0);\n    np.x += sin(pos.x*10.)*.01;\n    np.z += sin(pos.z*12.)*.01;\n    np.y += fract(iTime)*.1;\n    float nf = opS(sphere.x, sdSphere(np,0.72));\n    vec2 ne = vec2(nf, 1.0);\n    \n    // cloud\n    vec3 gnp = pos;\n    gnp.x += sin(pos.y*10.+iTime)*.1;\n    gnp.xy -= sin(pos.xy)*.1;\n    vec3 cp = gnp + vec3(0.0, -3.0, 0.0);\n    float cl = sdSphere(cp, .5);\n    cp = gnp + vec3(0.5, -3.0, 0.0);\n    cl = opU(cl, sdSphere(cp, .5));\n    cp = gnp + vec3(-0.6, -3.0, 0.0);\n    cl = opU(cl, sdSphere(cp, .5));\n    cp = gnp + vec3(-0.2, -3.3, 0.0);\n    cl = opU(cl, sdSphere(cp, .5));\n    cp = gnp + vec3(0.3, -2.8, 0.0);\n    cl = opU(cl, sdSphere(cp, .5));\n    \n    vec2 cloud = vec2(cl, 2.0);\n    \n    // rain\n    vec3 pp = pos + vec3(sin(iTime)*.2, -2.0+iTime*.5, sin(iTime)*.1);\n    pp = opRep(pp, vec3(.1+fract(iTime*pos.y), .5+sin(iTime*pos.y), .01));\n    float ps = sdSphere(pp, .025*pos.y);\n    float sbox = sdBox(pos+vec3(0.0, -2.0, 0.0), vec3(1.0, 1.0, .3));;\n    ps = opI(ps, sbox);\n    \n    vec2 rain = vec2(ps, 3.0);\n    \n    \n    t = opU2(t, sphere);\n    t = opU2(t, ne);\n    t = opU2(t, cloud);\n    t = opU2(t, rain);\n    \n    return t;\n}\n\nfloat GetShadow (vec3 pos, vec3 at, float k) {\n    vec3 dir = normalize(at - pos);\n    float maxt = length(at - pos);\n    float f = 01.;\n    float t = VOLUME*50.;\n    for (float i = 0.; i <= 1.; i += 1./15.) {\n        vec2 dist = map(pos + dir * t);\n        if (dist.x < VOLUME) return 0.;\n        f = min(f, k * dist.x / t);\n        t += dist.x;\n        if (t >= maxt) break;\n    }\n    return f;\n}\n\nvec2 CastRay(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    \n    for(int i=0 ; i<64 ; i++)\n    {\n        vec2 ray = map(ro + rd * t);\n        \n        if(ray.x < (0.0001*t))\n        {\n            return vec2(t, ray.y);\n        }\n        \n        t += ray.x;\n    }\n    \n    return vec2(-1.0, 0.0);\n}\n\nvec3 GetNormal (vec3 p) \n{ \n    vec2 e = vec2(0.01, 0.0); \n    return normalize(vec3(\n        map(p+e.xyy).x-map(p-e.xyy).x,\n        map(p+e.yxy).x-map(p-e.yxy).x,\n        map(p+e.yyx).x-map(p-e.yyx).x\n        )); \n}\n\nvec3 Render(vec3 ro, vec3 rd, vec2 uv)\n{\n    vec2 t = CastRay(ro, rd);\n    vec3 pos = ro+rd*t.x;\n    vec3 col = vec3(0.0);\n    float depth = clamp(pos.z, 0.0, 1.0);\n            \n    if(t.x == -1.0)\n    {   \n        // background\n        col = vec3(rd.y)+.2;\n        \n    }\n    else\n    {\n        float glp = clamp(length(pos)*.1, 0.0, 1.0);\n        vec3 N = GetNormal(ro+rd*t.x);\n        vec3 L = vec3(0.0, 1.0, 1.0);\n        float light = dot(N,L);\n        float shade = GetShadow(pos, L, 4.);\n        \n        vec3 bgColor = vec3(.4+pos.z*.1) * shade;\n        \n        if(t.y == -1.0) \n        {\n            // ground\n            col = bgColor;\n        }\n        else if(t.y == 0.0)\n        {\n            // sphere\n            col = vec3(.5);\n            col *= light;\n        }\n        else if(t.y == 1.0)\n        {\n            // some sort of snow\n            col = vec3(.0, .5, 1.0) * abs(pos.y) * (1.0+sin(iTime*50.)*.5);\n            col *= light;\n        }\n        else if(t.y == 2.0)\n        {\n            col = vec3(rd.y);\n            \n            col += depth;\n        }\n        else if(t.y == 3.0)\n        {\n            col = vec3(0.0, 0.5, 1.0);\n            \n            col += depth;\n            \n            col = mix(bgColor, col, vec3(pow(1.0-abs(uv.x), 8.0)));\n            \n        }\n    }\n    \n    return col;\n}\n\nvec3 GetViewDir(vec2 uv, vec3 cp, vec3 ct)\n{\n    vec3 forward = normalize(ct - cp);\n    vec3 right = normalize(cross(vec3(0.0, -1.0, 0.0), forward));\n    vec3 up = normalize(cross(right, forward));\n    \n    return normalize(uv.x * right + uv.y * up + 2.0 * forward);\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float time = iTime*.25;\n    \n    vec3 cp = vec3(0.0, 2.0, 5.0);\n    vec3 ct = vec3(0.0, 2.0, 0.0);\n    \n    vec3 vd = GetViewDir(uv, cp, ct);\n    \n    vec3 col = vec3(length(uv));\n    vec2 screenUV = fragCoord.xy / iResolution.xy;\n    \n    col = Render(cp, vd, uv);\n    col.z += screenUV.y*.2;\n    col -= random(screenUV) * .1;\n    col *= 1.0-length(uv)*.8;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}