{
    "Shader": {
        "info": {
            "date": "1715135286",
            "description": "This one is made to be played with.\n\nThis effect was a happy accident while working on a simple shader using fract. Essentially, every horizontal row of pixels is representing the simple shader at a different point in time. ",
            "flags": 0,
            "hasliked": 0,
            "id": "lcKXD1",
            "likes": 4,
            "name": "Bermuda Timespan",
            "published": 3,
            "tags": [
                "experiment"
            ],
            "usePreview": 0,
            "username": "UnchartedSystems",
            "viewed": 87
        },
        "renderpass": [
            {
                "code": "float trigFn(float base, float div, int fn) {\n    float y;\n    if (fn==1) {\n        y=sin(base/div);\n    } else if (fn==2) {\n        y=sin((base/div)+180.0);\n    } else {\n        y=1.0;\n    }\n    return y;\n}\n\nfloat trigMod(float x, float xMult, float xAdd) {\n       return x*xMult+xAdd;\n}\n\nfloat fractSplit(float x, float y, float e, float m)\n{\n    return fract(pow(x*y*m, e));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{        \n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    float d = length(uv);\n    \n    float tOffset = 1000.0;\n    \n    // !!!   This is where the magic happens   !!!\n    // Set the tMult numerator from 1.0 -> 0.0 to see the original shader\n    // Change uv.y -> uv.x in the tMult divisor to change the orientation.\n    // wtf is an interesting variable to play with.\n    // Alternatively, replace tMult with: (1.0/(d+-26.0))*11.1 for something neat\n    float wtf = 0.0; // Still wrapping my brain around this.\n    float tMult = (1.0/(uv.y+wtf))*11.1;\n    \n    float t = iTime+tOffset*tMult;\n\n    // This multiplier essentially acts as a zoom.\n    float m = 3.12;\n\n    float r;\n    float g;\n    float b;\n    \n    // Time offsets\n    float rdiv = 5.5000;\n    float gdiv = 6.3367;\n    float bdiv = 4.9659;\n    \n\n    \n    // Safe Values to start experimenting:\n    // fractSplit(d, t, 3, 1.0, 1.0, 0.0, 3, 1.0, 1.0, 0.0, 3.0);\n    // Just remember that 3 disables using sine.\n    \n    if (d <= 1.0) {\n        r = fractSplit(d, trigMod(trigFn(t, 1.0, 3), 1.0, 0.0), trigMod(trigFn(t, rdiv,  1), 1.2, 1.28), m);\n        g = fractSplit(d, trigMod(trigFn(t, 1.0, 3), 1.0, 0.0), trigMod(trigFn(t, gdiv,  1), 1.2, 1.28), m);\n        b = fractSplit(d, trigMod(trigFn(t, 1.0, 3), 1.0, 0.0), trigMod(trigFn(t, bdiv,  1), 1.2, 1.28), m);\n    } else {\n        r = fractSplit(d, trigMod(trigFn(t, 1.0, 3), 1.0, 0.0), trigMod(trigFn(t, -rdiv, 1), 1.2, -1.28), 1.0/m);\n        g = fractSplit(d, trigMod(trigFn(t, 1.0, 3), 1.0, 0.0), trigMod(trigFn(t, -gdiv, 1), 1.2, -1.28), 1.0/m);\n        b = fractSplit(d, trigMod(trigFn(t, 1.0, 3), 1.0, 0.0), trigMod(trigFn(t, -bdiv, 1), 1.2, -1.28), 1.0/m);\n    }\n        \n    fragColor = vec4(r, g, b, 1.0); \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}