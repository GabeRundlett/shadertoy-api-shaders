{
    "Shader": {
        "info": {
            "date": "1648122185",
            "description": "Mandelbulb fractal which reacts to music",
            "flags": 0,
            "hasliked": 0,
            "id": "7lfcD7",
            "likes": 6,
            "name": "Mandelbulb Music visualizer",
            "published": 3,
            "tags": [
                "musicvisualizer"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 371
        },
        "renderpass": [
            {
                "code": "#define TAU 6.28318530718\n#define TILING_FACTOR 1.0\n\nfloat waterHighlight(vec2 p, float time, float foaminess) {\n    vec2 i = vec2(p);\n\tfloat c = 0.0;\n    float foaminess_factor = mix(1.0, 6.0, foaminess);\n\tfloat inten = 0.005 * foaminess_factor;\n\tfor (float n = 1.0; n <= 8.0; n++) {\n\t\tfloat t = time * (1.0 - (3.5 / n));\n\t\ti = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n\t\tc += 1.0 / length(vec2(p.x / (sin(i.x + t)), p.y / (cos(i.y+t))));\n\t}\n\tc = 0.2 + c / (inten * 8.0);\n\tc = 1.17 - pow(c, 1.4);\n    c = pow(abs(c), 8.0);\n\treturn c / sqrt(foaminess_factor);\n}\n\n\n#define AA 2\n\nvec2 isphere( in vec4 sph, in vec3 ro, in vec3 rd )\n{\n    vec3 oc = ro - sph.xyz;\n\tfloat b = dot(oc,rd);\n\tfloat c = dot(oc,oc) - sph.w*sph.w;\n    float h = b*b - c;\n    if( h<0.0 ) return vec2(-1.0);\n    h = sqrt( h );\n    return -b + vec2(-h,h);\n}\n\nfloat map( in vec3 p, out vec4 resColor )\n{\n    vec3 w = p;\n    float m = dot(w,w);\n\n    vec4 trap = vec4(abs(w),m);\n\tfloat dz = 1.0;\n    float n =  8.0 + sin(iTime);\n    \n\tfor( int i=0; i<3; i++ )\n    {\n\t\tdz = 8.0*pow(m,3.5)*dz + 1.0;\n      \n        float r = sqrt(m);\n        float b = n*acos(w.y/r);\n        float a = n*atan(w.x / w.z);\n        float sinb = sin(b);\n        w = p + pow(r, n) * vec3(sinb*sin(a), cos(b), sinb*cos(a));       \n        \n        trap = min( trap, vec4(abs(w),m) );\n\n        m = dot(w,w);\n\t\tif( m > 4.0 )\n            break;\n    }\n\n    resColor = vec4(m,trap.yzw);\n\n    return 0.25*log(m)*sqrt(m)/dz;\n}\n\nvec3 calcNormal( in vec3 pos, in float t, in float px )\n{\n    vec4 tmp;\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.25*px;\n    return normalize( e.xyy*map( pos + e.xyy,tmp ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx,tmp ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy,tmp ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx,tmp ) );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float k )\n{\n    float res = 1.0;\n    float t = 0.0;\n    for( int i=0; i<32; i++ )\n    {\n        vec4 kk;\n        float h = map(ro + rd*t, kk);\n        res = min( res, k*h/t );\n        if( res<0.001 ) break;\n        t += clamp( h, 0.01, 0.2 );\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nfloat raycast( in vec3 ro, in vec3 rd, out vec4 rescol, in float px )\n{\n    float res = -1.0;\n\n    vec2 dis = isphere( vec4(0.0,0.0,0.0,1.25), ro, rd );\n    if( dis.y<0.0 ) return -1.0;\n    dis.x = max( dis.x, 0.0 );\n    dis.y = min( dis.y, 10.0 );\n    \n\tvec4 trap;\n\n\tfloat t = dis.x;\n\tfor( int i=0; i<32; i++  )\n    { \n        vec3 pos = ro + rd*t;\n        float th = 0.25*px*t;\n\t\tfloat h = map( pos, trap );\n\t\tif( t>dis.y || h<th ) break;\n        t += h;\n    }\n    \n    if( t<dis.y )\n    {\n        rescol = trap;\n        res = t;\n    }\n\n    return res;\n}\n\nconst vec3[3] lights = vec3[3](\nvec3(  2.577, 2.577, -2.577 ),\nvec3( -2.707, 0.000,  2.707 ),\nvec3( -2.707, -2.707,  0.000 )\n);\n\nvec3 refVector( in vec3 v, in vec3 n )\n{\n    return v;\n    float k = dot(v,n);\n    return (k>0.0) ? v : v-2.0*n*k;\n}\n\n\nvec3 render( in vec2 p, in mat4 cam )\n{\n    const float fle = 1.5;\n\n    vec2  sp = (2.0*p-iResolution.xy) / iResolution.y;\n    float px = 2.0/(iResolution.y*fle);\n\n    vec3  ro = vec3( cam[0].w, cam[1].w, cam[2].w );\n\tvec3  rd = normalize( (cam*vec4(sp,fle,0.0)).xyz );\n\n\tvec4 tra;\n    float t = raycast( ro, rd, tra, px );\n    if(t < 0.0)\n    {\n        float time = iTime * 0.2+23.0;\n        vec2 uv = p / iResolution.xy;\n        vec2 uv_square = vec2(uv.x * iResolution.x / iResolution.y, uv.y);\n        float dist_center = pow(2.0*length(uv - 0.5), 2.0);\n        \n        float foaminess = smoothstep(0.4, 1.8, dist_center);\n        float clearness = 0.1 + 0.9*smoothstep(0.1, 0.5, dist_center);\n        \n        vec2 p = mod(uv_square*TAU*TILING_FACTOR, TAU)-250.0;\n        \n        float c = waterHighlight(p, time, foaminess);\n        \n        vec3 water_color = vec3(0.1);\n        vec3 color = vec3(c);\n        color = clamp(color + water_color, 0.0, 1.0);\n        \n        color = mix(water_color, color, clearness);\n    \n        return pow(color*0.95, vec3(4.0));\n    \n        return vec3(abs(cam[2].w)*length(sp)*.02);\n    }\n    \n    vec3 col = vec3(0.0);\n    \n    vec3  pos = ro + t*rd;\n    vec3  nor = calcNormal( pos, t, px );\n    \n    nor = refVector(nor,-rd);\n    \n    float occ = clamp(0.05*log(tra.x),0.0,1.0);\n    float fac = clamp(1.0+dot(rd,nor),0.0,1.0);\n    \n    for(int i = 0; i < 3; ++i)\n    {\n        vec3  hal = normalize( lights[i]-rd);\n        vec3  ref = reflect( rd, nor );\n    \n        float sha = softshadow( pos+0.001*nor, lights[i], 4.0 );\n        float dif = clamp( dot( lights[i], nor ), 0.0, 1.0 )*sha;\n        float spe = pow( clamp(dot(nor,hal),0.0,1.0), 32.0 )*dif*(0.04+0.96*pow(clamp(1.0-dot(hal,lights[i]),0.0,1.0),5.0));\n        \n        col += spe*15.0;\n    }\n    \n\tcol = pow( col, vec3(0.4545) );\n    \n    col *= 1.0 - 0.05*length(sp);\n\n    return col;\n}\n\nfloat zoomEase(float t)\n{\n    return cos(t * 3.14159 * 6.5) * t * 0.1;\n    return (-(1.0/(1.0+t)) + 0.5)*t;\n}\n\nfloat z(float phase, float period, float strength)\n{\n    if(iTime > phase && iTime <= phase + period)\n    {\n        float t = (iTime - phase) / period;\n        return zoomEase(t) * strength;\n    }\n    return 0.0;\n}\n\nfloat frequency(float x)\n{\n    return texture(iChannel0, vec2(x, 0)).r;\n}\n\n#define FREQ 512.0\nfloat smoothFrequency(float x, int smoothness)\n{\n    float f = 0.0;\n    int accumulated = 0;\n    for(float i = 0.0; i <= float(smoothness) / FREQ; i += 1.0 / FREQ)\n    {\n        f += frequency(x + i);\n        ++accumulated;\n    }\n    return f / float(accumulated);\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime * 0.5;\n    float dist = 2.5;\n    \n    float music = 0.0;\n\n    music += smoothFrequency(0.05, 2);\n\n    dist -= pow(music, 1.0) * 1.15;\n    \n    dist += z(1.0, 0.25, 2.0);\n\n\tfloat di = pow(dist,2.0);\n\tvec3  ro = di*(vec3( cos(.33+time), 0.8*sin(.37+time), sin(.31+time) ));\n\tvec3  ta = vec3(0.0,0.0,0.0);\n\tfloat cr = 0.5*cos(0.1*time);\n\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n    vec3 cw = normalize(ta-ro);\n\tvec3 cu = normalize(cross(cw,cp));\n\tvec3 cv =          (cross(cu,cw));\n    mat4 cam = mat4( cu, ro.x, cv, ro.y, cw, ro.z, 0.0, 0.0, 0.0, 1.0 );\n\n    #if AA<2\n\tvec3 col = render(  fragCoord, cam );\n    #else\n    #define ZERO (min(iFrame,0))\n    vec3 col = vec3(0.0);\n    for( int j=ZERO; j<AA; j++ )\n    for( int i=ZERO; i<AA; i++ )\n    {\n\t    col += render( fragCoord + (vec2(i,j)/float(AA)), cam );\n    }\n\tcol /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}