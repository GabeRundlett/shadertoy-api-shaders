{
    "Shader": {
        "info": {
            "date": "1625417159",
            "description": "Variant of IQ's vesica: https://www.shadertoy.com/view/XtVfRW\nI wanted to be able to specify the dimensions of the vesica object\nso modified the function slightly",
            "flags": 0,
            "hasliked": 0,
            "id": "NtfSDn",
            "likes": 7,
            "name": "Variant of IQ's Vesica",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 353
        },
        "renderpass": [
            {
                "code": "#define TIME       iTime\n#define RESOLUTION iResolution\n\n// IQ's box used as reference\nfloat box(vec2 p, vec2 b) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// Variant of IQ's vesica: https://www.shadertoy.com/view/XtVfRW\n// I wanted to be able to specify the dimensions of the vesica object\n//  so modified the function slightly\nfloat vesica(vec2 p, vec2 sz) {\n  if (sz.x < sz.y) {\n    sz = sz.yx;\n  } else {\n    p  = p.yx; \n  }\n  vec2 sz2 = sz*sz;\n  float d  = (sz2.x-sz2.y)/(2.0*sz.y);\n  float r  = sqrt(sz2.x+d*d);\n  float b  = sz.x;\n  p = abs(p);\n  return ((p.y-b)*d>p.x*b) ? length(p-vec2(0.0,b))\n                           : length(p-vec2(-d,0.0))-r;\n}\n\nfloat df(vec2 p) {\n  vec2 sz = vec2(mix(1.0, 2.0, 0.5+0.5*cos(TIME*sqrt(0.5))), mix(1.0, 2.0, 0.5+0.5*sin(TIME)));\n  float d0 = vesica(p, sz*0.5);\n  float d1 = box(p, sz*0.5);\n  d1 = abs(d1) - 0.01;\n  float d = d0;\n  if (mod(floor(TIME), 2.0) == 0.0) {\n    d = min(d0, d1);\n  }\n  return d;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1.0 + 2.0*q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float aa = 2.0/RESOLUTION.y;\n\n  float d = df(p);\n  \n  vec3 col = vec3(0.1);\n  \n  col = mix(col, vec3(0.9), smoothstep(-aa, aa, -d));\n  col += vec3(1.0, 0.0, 0.0)*sin(100.0*d);\n\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}