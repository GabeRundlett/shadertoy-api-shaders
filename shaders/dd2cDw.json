{
    "Shader": {
        "info": {
            "date": "1687798320",
            "description": "Game of Life algorithm, showcasing 20 rule sets. Fullscreen recommended!\n\nspace=regenerate, 7-9=speed.  Mouse x zooms, arrow keys pan when zoomed.\n\nCode taken from my shader https://www.shadertoy.com/view/ms2cWW",
            "flags": 48,
            "hasliked": 0,
            "id": "dd2cDw",
            "likes": 17,
            "name": "Automata II Showcase 5x4",
            "published": 3,
            "tags": [
                "2d",
                "simulation",
                "automata",
                "life",
                "conway",
                "gameoflife",
                "multipass"
            ],
            "usePreview": 0,
            "username": "misol101",
            "viewed": 359
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ppos = texelFetch(iChannel1, ivec2(10,0), 0 ).xy;\n    \n    float mx= iMouse.x / iResolution.x;\n    vec2 mid = iResolution.xy / 2.;\n    float mmul = 1.-mx;\n    fragCoord = mid - (mid*mmul-fragCoord*mmul) + ppos;\n\n    vec3 val = texelFetch( iChannel0, ivec2(fragCoord), 0 ).xxx;\n    fragColor = vec4( val.x*1.45, val.x*1.45, val.x*1.8, 1.0 );\n    //fragColor = vec4( 0.8-val, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Cellular automata buffer\n\nconst int KEY_SPACE = 32;\nconst int KEY_LEFT  = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP    = 38;\nconst int KEY_DOWN  = 40;\nconst int KEY_1     = 49;\nconst int KEY_2     = 50;\nconst int KEY_3     = 51;\nconst int KEY_4     = 52;\nconst int KEY_5     = 53;\nconst int KEY_Z     = 90;\nconst int KEY_X     = 88;\n\nbool ReadKey( int key )\n{\n\tfloat keyVal = texture( iChannel1, vec2( (float(key)+.5)/256.0, .25 ) ).x;\n\treturn (keyVal>.5)?true:false;\n}\n\nint cell( in ivec2 p )\n{\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    float val = texelFetch(iChannel0, p, 0 ).x;\n    return ( val > 0.) ? 1 : 0;\n}\nfloat cellval( in ivec2 p )\n{\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    float val = texelFetch(iChannel0, p, 0 ).x;\n    return val;\n}\n\nfloat randpix(vec2 fragCoord) {\n    float rn = hash1(iTime+fragCoord.x*13.0+hash1(fragCoord.y*71.1));\n    return clamp(step(1.01-density/100., rn), 0., liveval);\n}\n\nfloat restart(vec2 fragCoord, int method) {\n    if (method == 0)\n        return randpix(fragCoord);\n\n    vec2 mid = iResolution.xy / 2.; \n    float w=100., h=100., radius=30.;\n    float thick=2., wl=w-thick, hl=h-thick;\n\n    if (method == 1) {\n        if (length(fragCoord-mid)< radius && length(fragCoord-mid) > (radius-thick))\n            return liveval;\n        return 0.;\n    }\n    if (method == 2) {\n        if (((fragCoord.x > mid.x - w && fragCoord.x < mid.x - wl) || (fragCoord.x > mid.x + wl && fragCoord.x < mid.x + w))\n            && fragCoord.y > mid.y - h && fragCoord.y < mid.y + h)\n            return liveval;\n        if (((fragCoord.y > mid.y - h && fragCoord.y < mid.y - hl) || (fragCoord.y > mid.y + hl && fragCoord.y < mid.y + h))\n            && fragCoord.x > mid.x - w && fragCoord.x < mid.x + w)\n            return liveval;\n        return 0.;\n    }\n    if (method == 3) {\n        if (length(fragCoord-mid)< radius)\n            return liveval;\n        return 0.;\n    }\n    if (method == 4) {\n        if (fragCoord.x > mid.x - radius && fragCoord.x < mid.x + radius && fragCoord.y > mid.y - radius && fragCoord.y < mid.y + radius)\n            return liveval;\n        return 0.;\n    }\n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ix = texelFetch(iChannel2, ivec2(0,0), 0 ).x;\n    float xres = texelFetch(iChannel2, ivec2(0,1), 0 ).x;\n    int method = int(texelFetch(iChannel2, ivec2(1,0), 0 ).x);\n    int speed = int(texelFetch(iChannel2, ivec2(2,0), 0 ).x);\n\n    float xsq = 5., ysq = 4.;\n    float wsq = iResolution.x / xsq;\n    float hsq = iResolution.y / ysq;\n    float thick = 3.;\n\n    float i;\n    for (i=0.; i<xsq; i++) {\n        if (fragCoord.x > wsq*i-thick && fragCoord.x < wsq*i+thick ) {\n            fragColor = vec4(0.01);\n            return;\n        }\n    }\n    for (i=0.; i<ysq; i++) {\n        if (fragCoord.y > hsq*i-thick && fragCoord.y < hsq*i+thick ) {\n            fragColor = vec4(0.01);\n            return;\n        }\n    }\n\n    int cix = int(fragCoord.x / wsq) + int(fragCoord.y / hsq)*int(xsq) + int(ix*10.);\n    setRules(cix % 30);\n\n    ivec2 px = ivec2( fragCoord );\n    float curr = cellval(px);\n\n    if( iFrame==0 || ReadKey(KEY_SPACE) || ReadKey(KEY_Z) || ReadKey(KEY_X) || int(xres) != int(iResolution.x)\n     || ReadKey(KEY_1) || ReadKey(KEY_2) || ReadKey(KEY_3) || ReadKey(KEY_4) || ReadKey(KEY_5) ) {\n        fragColor = vec4(restart(fragCoord, method),0.,0.,0.);\n        return;\n    }\n\t\n    if (iFrame % (speed+1) > 0) {\n        fragColor = vec4(curr, 0.,0.,0.);\n        return;\n    }\n  \n\tint k =   cell(px+ivec2(-1,-1)) + cell(px+ivec2(0,-1)) + cell(px+ivec2(1,-1))\n            + cell(px+ivec2(-1, 0))                        + cell(px+ivec2(1, 0))\n            + cell(px+ivec2(-1, 1)) + cell(px+ivec2(0, 1)) + cell(px+ivec2(1, 1));\n    int e = cell(px);\n    int ev = int(curr*10.+0.5);\n    int f = 0;\n    if (e==1) {\n        f = 0;\n        if (stayrules[k]==1) f = k;\n    }\n    else {\n        f = bornrules[k]==1? k : 0;\n    }\n\n\tfragColor = vec4( float(f)/10., 0.0, 0.0, 0.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float density=50.;\nint stayrules[9];\nint bornrules[9];\nfloat liveval = 0.1;\n\nvoid setRules(int index) {\n    int v1, v2;\n\n    if (index == 0) {v1 = 122, v2=65; density=60.;}    // Chaos + stable\n    if (index == 1) {v1 = 70, v2=4; density=10.;}      // \"Self-activating\" GOL\n    if (index == 2) {v1 = 248, v2=65; density=10.;}    // Random to stable takeover\n    if (index == 3) {v1 = 120, v2=68; density=98.;}    // Slow growing \"maps\"\n    if (index == 4) {v1 = 248, v2=66; density=10.;}    // Growing jigsaw\n    if (index == 5) {v1 = 222, v2=32; density=100.;}   // Stone\n    if (index == 6) {v1 = 240, v2=40; density=78.;}    // Ink blobs \n    if (index == 7) {v1 = 122, v2=225; density=60.;}   // Worms in static\n    if (index == 8) {v1 = 121, v2=16; density=54.;}    // Squiggly no chaos\n    if (index == 9) {v1 = 175, v2=8; density=20.;}     // Stable bg\n    if (index == 10) {v1 = 227, v2=255; density=18.;}  // Hornet's nest\n    if (index == 11) {v1 = 122, v2=240; density=60.;}  // Stable worms\n    if (index == 12) {v1 = 122, v2=65; density=60.;}   // Chaos + stable\n    if (index == 13) {v1 = 122, v2=65; density=70.;}   // Chaos + stable II\n    if (index == 14) {v1 = 96, v2=57; density=100.;}   // Grow to stable flashing\n    if (index == 15) {v1 = 51, v2=4; density=10.;}     // Non-growing chaos\n    if (index == 16) {v1 = 243, v2=24; density=55.;}   // Stable BW\n    if (index == 17) {v1 = 243, v2=88; density=45.;}   // Stable BW II\n    if (index == 18) {v1 = 113, v2=89; density=50.;}   // Ant war with spots\n    if (index == 19) {v1 = 185, v2=9; density=50.;}    // Ant war\n    if (index == 20) {v1 = 6, v2=4; density=30.;}      // Original Game Of Life\n    if (index == 21) {v1 = 120, v2=4; density=85.;}    // Black vs white landscape \n    if (index == 22) {v1 = 249, v2=216; density=31.;}  // Stable \"stones\"\n    if (index == 23) {v1 = 242, v2=18; density=60.;}   // Slow growing blobs in chaos\n    if (index == 24) {v1 = 5, v2=12; density=78.;}     // Chaotic life III\n    if (index == 25) {v1 = 219, v2=216; density=50.;}  // Black eating ant war\n    if (index == 26) {v1 = 230, v2=196; density=5.;}   // Chaotic life \n    if (index == 27) {v1 = 38, v2=20; density=5.;}     // Chaotic life II\n    if (index == 28) {v1 = 0, v2=61; density=100.;}    // Triangles\n    if (index == 29) {v1 = 222, v2=32; density=100.;}  // Stone\n\n\tint i, stayVal = 128, bornVal = 128;\n\tfor (i = 0; i < 8; i++) {\n\t\tstayrules[8 - i] = ((v1 & stayVal) > 0? 1 : 0);\n\t\tstayVal = stayVal >> 1;\n\t}\n\tfor (i = 0; i < 8; i++) {\n\t\tbornrules[8 - i] = ((v2 & bornVal) > 0? 1 : 0);\n\t\tbornVal = bornVal >> 1;\n\t}\n}\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*138.5453123);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Persistive Keyboard Input buffer & resolution change check\n\nconst int KEY_LEFT  = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP    = 38;\nconst int KEY_DOWN  = 40;\nconst int KEY_1     = 49;\nconst int KEY_2     = 50;\nconst int KEY_3     = 51;\nconst int KEY_4     = 52;\nconst int KEY_5     = 53;\nconst int KEY_7     = 55;\nconst int KEY_8     = 56;\nconst int KEY_9     = 57;\nconst int KEY_Z     = 90;\nconst int KEY_X     = 88;\nconst int KEY_C     = 67;\nconst int KEY_V     = 86;\n\nbool ReadKey( int key ) {\n\tfloat keyVal = texture( iChannel1, vec2( (float(key)+.5)/256.0, .25 ) ).x;\n\treturn (keyVal>.5)?true:false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int ix = int(fragCoord.x), iy = int(fragCoord.y);\n\n    if (ix == 0 && iy == 0) {\n        vec3 keystate = texelFetch(iChannel0, ivec2(ix,iy), 0 ).xyz;\n        float kx=keystate.x;\n        float ky=keystate.y;\n        if( ReadKey(KEY_Z)||ReadKey(KEY_X)||ReadKey(KEY_C)||ReadKey(KEY_V) ) {\n            if (ky == 0.) {\n                if (ReadKey(KEY_X) || ReadKey(KEY_V)) {\n                    kx+=0.1;\n                    if (kx > 2.95) kx=0.05;\n                } else {\n                    kx-=0.1;\n                    if (kx < 0.) kx=2.95;\n                }\n            }\n            ky+=0.01;\n            if (ky >= 1.0) ky=0.;\n        }\n        else {\n            ky = 0.;\n        }\n        fragColor = vec4(kx,ky,0.,0.);\n        return;\n    }\n\n    if (ix == 1 && iy == 0) {\n        float method = texelFetch(iChannel0, ivec2(ix,iy), 0 ).x;\n        if( ReadKey(KEY_1)) method = 0.5;\n        if( ReadKey(KEY_2)) method = 1.5;\n        if( ReadKey(KEY_3)) method = 2.5;\n        if( ReadKey(KEY_4)) method = 3.5;\n        if( ReadKey(KEY_5)) method = 4.5;\n        fragColor = vec4(method,0.,0.,0.);\n        return;\n    }\n\n    if (ix == 2 && iy == 0) {\n        float speed = texelFetch(iChannel0, ivec2(ix,iy), 0 ).x;\n        if( ReadKey(KEY_7)) speed = 0.;\n        if( ReadKey(KEY_8)) speed = 2.;\n        if( ReadKey(KEY_9)) speed = 10.;\n        fragColor = vec4(speed,0.,0.,0.);\n        return;\n    }\n\n    if (ix == 10 && iy == 0) {\n        vec2 ppos = texelFetch(iChannel0, ivec2(ix,iy), 0 ).xy;\n        float mmul = iMouse.x / iResolution.x;\n        vec2 mid = iResolution.xy / 2.;\n\n        float psp=8.;\n        if( ReadKey(KEY_RIGHT)) ppos.x += psp;\n        if( ReadKey(KEY_LEFT)) ppos.x -= psp;\n        if( ReadKey(KEY_DOWN)) ppos.y -= psp;\n        if( ReadKey(KEY_UP)) ppos.y += psp;\n        ppos.x = clamp(ppos.x, -mid.x*mmul, mid.x*mmul);\n        ppos.y = clamp(ppos.y, -mid.y*mmul, mid.y*mmul);\n\n        fragColor = vec4(ppos,0.,1.);\n        return;\n    }\n\n\n    if (ix == 0 && iy == 1) {\n        fragColor = vec4(iResolution.x,0.,0.,0.);\n        return;\n    }\n\n    fragColor = vec4(0.,0.,0.,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}