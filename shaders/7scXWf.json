{
    "Shader": {
        "info": {
            "date": "1634069943",
            "description": "Learning from Inigo Quilez's videos and articles.\n\nFBM detail in SDFs\nhttps://iquilezles.org/articles/fbmsdf/fbmsdf.htm",
            "flags": 0,
            "hasliked": 0,
            "id": "7scXWf",
            "likes": 16,
            "name": "Lawless Fantasy",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "prishainabox",
            "viewed": 654
        },
        "renderpass": [
            {
                "code": "const float EPSILON = 0.001;\n\n//*******************************************************//\n\n// Light struct\nstruct Light {\n    vec3 clr;\n    vec3 dir;\n    float shadowSoftness;\n};\n\n// Material struct\nstruct Material {\n    vec3 clr;\n    float amb;\n    float dif;\n    float spec;\n    float shininess;\n    vec3 ref;\n    float id;\n};\n\n//*******************************************************//\n\n// clamp value from 0 to 1\nfloat uclamp(float val) {\n    return clamp(val, 0.0, 1.0);\n}\n\n//*******************************************************//\n\n// SMOOTH MIN from Inigo Quilez\nfloat smoothmin(in float a, in float b, in float k) {\n    float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n    return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// smoothmax\nfloat smoothmax( float a, float b, float k ) {\n    float h = max(k-abs(a-b),0.0);\n    return max(a, b) + h*h*0.25/k;\n}\n\n// Smooth min for distance and color\nvec4 smoothmin(in float a, in float b, in vec3 clr1, in vec3 clr2, in float k) {\n   float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n   float d = mix(b, a, h) - k*h*(1.0-h);\n   vec3 c = mix(clr2, clr1, h);\n   return vec4(c, d);\n}\n\n// return points for finite and infinite repetition\n\nvec3 infRep(in vec3 pt, in vec3 period) {\n    return mod(pt + 0.5 * period, period) - 0.5 * period;\n}\n\nvec3 finRep(in vec3 pt, in vec3 period, in vec3 minLim, in vec3 maxLim) {\n    return pt - period * clamp(round(pt/period), minLim, maxLim);\n}\n\nvec3 finRep(in vec3 pt, in vec3 period, in vec3 lim) {\n    return pt - period * clamp(round(pt/period), -lim, lim);\n}\n\n\n//*******************************************************//\n\n// random and noise\n\nfloat random(in float v) {\n    return fract(15465.1327854 * sin(v * 231.72));\n}\n\nfloat random(in vec2 v) {\n    return fract(15465.1327854 * sin(dot(v, vec2(173.93422, 102.5165))));\n}\n\nfloat random(in vec3 v) {\n    return fract(15465.1327854 * sin(dot(v, vec3(173.93422, 102.5165, 23.1234))));\n}\n\nfloat noise(in vec3 uvw) {\n    \n    vec3 fid = fract(uvw); // fraction part of uvw -> where in the grid cell\n    fid = fid * fid * (3.0 - 2.0 * fid);\n    vec3 id = floor(uvw); // integer part of uvw -> which grid cell\n    \n    // lerp bottom face\n    float bf = mix(random(id + vec3(0, 0, 0)), random(id + vec3(1, 0, 0)), fid.x);\n    float bb = mix(random(id + vec3(0, 0, 1)), random(id + vec3(1, 0, 1)), fid.x);\n    float b = mix(bf, bb, fid.z);\n \n    // lerp top face\n    float tf = mix(random(id + vec3(0, 1, 0)), random(id + vec3(1, 1, 0)), fid.x);\n    float tb = mix(random(id + vec3(0, 1, 1)), random(id + vec3(1, 1, 1)), fid.x);\n    float t = mix(tf, tb, fid.z);\n    \n    return mix(b, t, fid.y);\n    \n}\n\nfloat fractalNoise(in vec3 uvw) {\n    float c = noise(uvw * 4.0);\n    c += 0.5 * noise(uvw * 8.0);\n    c += 0.25 * noise(uvw * 16.0);\n    c += 0.125 * noise(uvw * 32.0);\n    c += 0.0625 * noise(uvw * 64.0);\n    c /= 2.0;\n    return c;\n}\n\n//*******************************************************//\n\n// SDFs\n\nfloat sdfSphere(in vec3 pt, in float rad) {\n    return length(pt) - rad;\n}\n\nfloat sdfBox(vec3 pt, vec3 b) {\n\tvec3 q = abs(pt) - b;\n\treturn length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat sdfRandSphere(vec3 id, vec3 fid, vec3 t) {\n    // random radius \n    float r = 0.5*random(id+t);\n    // sphere signed distance\n    return length(fid - t) - r;\n}\n\n\n//*******************************************************//\n\n// SDF BASE\n\nfloat sdfBase(in vec3 pt) {\n\n    vec3 id = floor(pt);\n    vec3 fid = fract(pt);\n\n    // 8 corner spheres\n    float base = sdfRandSphere(id, fid, vec3(0, 0, 0));\n    base = min(base, sdfRandSphere(id, fid, vec3(0, 0, 1)));\n    base = min(base, sdfRandSphere(id, fid, vec3(0, 1, 0)));\n    base = min(base, sdfRandSphere(id, fid, vec3(0, 1, 1)));\n    base = min(base, sdfRandSphere(id, fid, vec3(1, 0, 0)));\n    base = min(base, sdfRandSphere(id, fid, vec3(1, 0, 1)));\n    base = min(base, sdfRandSphere(id, fid, vec3(1, 1, 0)));\n    base = min(base, sdfRandSphere(id, fid, vec3(1, 1, 1)));\n    \n    return base;\n\n}\n\n// SDF SCENE\n\nfloat sdfScene(in vec3 pt, out Material mat) {\n\n    // default material\n    mat.amb = 0.01;\n\n    // distance to closest object\n    float res;\n    \n    // water stuff\n    \n    float water = pt.y - 0.06;\n    Material waterMat;\n    {\n        waterMat.clr = vec3(0.05, 0.04, 0.15);\n        waterMat.dif = 0.1;\n        waterMat.spec = 1.0;\n        waterMat.shininess = 10.0;\n        waterMat.ref = vec3(0.3, 0.65, 0.75);\n        waterMat.id = 0.0;\n    }\n    \n    \n    // sphere and plane\n    float sphere = sdfSphere(pt - vec3(0, 0.2, 0), 3.3);\n    float terrain = pt.y+0.05;\n    \n    // fbm\n    {\n        vec3 p = pt;\n        // scale\n        float scl = 1.0;\n        // subtract\n        for (int i = 0; i < 12; i++) {\n            // eval noise base\n            float n = scl*sdfBase(p);\n            // subtract from sphere\n            if (i < 8) sphere = smoothmax(sphere, -n, scl*0.2);\n            // add to plane\n            n = smoothmax(n, terrain-0.1*scl, 0.3*scl);\n            terrain = smoothmin(n, terrain, 0.3*scl);\n            // rotate point (matrix from Inigo's article)\n            p = mat3(\n                 0.00, 1.60, 1.20,\n                -1.60, 0.72,-0.96,\n                -1.20,-0.96, 1.28\n            ) * p;\n            \n            // half amplitude\n            scl *= 0.5;\n        }\n    }\n    \n    // material\n    Material landMat;\n    {\n        landMat.id = 1.0;\n        landMat.ref = vec3(0.0);\n        if (terrain < sphere) {\n            landMat.clr = vec3(0.05, 0.03, 0.04);\n            landMat.dif = 0.4;\n            landMat.spec = 0.2;\n            landMat.shininess = 100.0;\n        } else {\n            landMat.clr = vec3(0.08, 0.08, 0.05) * 1.2;\n            landMat.dif = 1.0;\n            landMat.spec = 1.2;\n            landMat.shininess = 10.0;\n        }\n    }\n    \n    res = min(terrain, sphere);\n    \n    if (res < water) mat = landMat;\n    else mat = waterMat;\n    \n    res = min(res, water);\n    \n    return res;\n    \n}\n\n//*******************************************************//\n\nvec3 calcNormal(in vec3 pt) {\n    vec2 h = vec2(EPSILON, 0);\n    Material m;\n    // central difference sdf(pt + EPSILON) - sdf(pt - EPSILON)    \n    return normalize(vec3(\n       sdfScene(pt + h.xyy, m) - sdfScene(pt - h.xyy, m),\n       sdfScene(pt + h.yxy, m) - sdfScene(pt - h.yxy, m),\n       sdfScene(pt + h.yyx, m) - sdfScene(pt - h.yyx, m)\n    ));\n}\n\n//*******************************************************//\n\nfloat castRay(in vec3 ro, in vec3 rd, out Material mat) {\n    \n    // result\n    float res = -1.0;\n    // total distance traveled\n    float td = 0.0;\n    \n    for (int i = 0; i < 230 && td < 10.0; i++) {\n        Material m;\n        float h = sdfScene(ro + td*rd, m);\n        // if distance is really close, break\n        if (h < EPSILON*td*2.5) {\n           res = td;\n           mat = m;\n           break;\n        }\n        // add to total distance\n        td += h;\n    }\n       \n    return res;\n    \n}\n\nfloat softShadow(in vec3 ro, in vec3 rd, in float k) {\n    float res = 1.0; // result\n    float td = 0.05; // total distance traveled\n    for (int i = 0; i < 256 && td < 60.0; i++) {\n        Material m;\n        float d = sdfScene(ro + td*rd, m);\n        if (d < 0.001) {\n            // intersection, so return shadow\n            return 0.0;\n        }\n        res = min(res, k*d/td);\n        td += d;\n    }\n    // if no intersection, no shadow -> 1.0\n    return res;\n}\n\nfloat calcOcc(in vec3 pt, in vec3 nor) {\n\n    float occ = 0.0;\n    float scl = 1.0;\n    \n    Material m; // placeholder\n    \n    for (int i = 0; i < 4; i++) {\n        float h = 0.01 + 0.07 * float(i);\n        float d = sdfScene(pt + h * nor, m);\n        occ += (h-d)*scl;\n        scl *= 0.97;\n    }\n    \n    return uclamp(1.0 - 2.0 * occ);\n    \n}\n\n//*******************************************************//\n\nvec3 applyFog(in vec3 rd, in float d, in vec3 clr, in vec3 sunClr, in vec3 sunDir, in vec3 skyClr) {\n    vec3 fogClr = mix( skyClr, sunClr, pow(max(dot(rd, sunDir), 0.0), 15.0) );\n    return mix(clr, fogClr, 1.0 - exp(-0.005 * d * d * d)); // fog\n}\n\nvec3 calcLighting(in vec3 pt, in vec3 rd, in vec3 nor, in Light light, in Material mat) {\n    \n    // diffuse\n    float dif = uclamp(dot(nor, light.dir)) * mat.dif;\n    \n    // shadow\n    float shadow = softShadow(pt, light.dir, light.shadowSoftness);\n    \n    // specular\n    vec3 ref = reflect(light.dir, nor);\n    float spec = pow(uclamp(dot(rd, ref)), mat.shininess) * mat.spec;\n\n    // return dif * clr * shadow * spec + dif * clr * shadow; \n    return light.clr * shadow * dif * (spec + 1.0);\n    \n}\n\nvec3 calcClr(in vec3 ro, in vec3 rd, in float d, in vec3 nor, in Material mat) {\n\n    vec3 pt = ro + rd * d;\n\n    // COLORS\n    vec3 skyClr = vec3(0.005, 0.005, 0.015) * 8.0;\n    \n    // SUN LIGHT\n    Light sun;\n    sun.clr = vec3(15, 9, 4) * 0.4;\n    sun.dir = normalize(vec3(0.5, 0.15, 0.5));\n    sun.shadowSoftness = 20.9;\n    \n    // back sun light\n    Light sun2;\n    sun2.clr = sun.clr * 4.0;\n    sun2.dir = normalize(vec3(0.3, 0.05, 1.5));\n    sun2.shadowSoftness = 10.9;\n    \n    // background color\n    vec3 clr = skyClr;\n    \n    // return background if too far\n    if (d < 0.0) {\n        // sun\n        clr = mix(skyClr, sun2.clr * 0.05, pow(max(dot(rd, sun2.dir), 0.0), 2.0));\n        clr = mix(clr, sun2.clr * 0.15, pow(max(dot(rd, sun2.dir), 0.0), 40.0));\n        return clr;\n    }\n    \n    clr = mat.clr;\n    \n    // bump map\n    if (mat.id == 0.0) {\n        nor += 0.2 * sin(20.0 * fractalNoise(pt * 5.0));\n    } else if (mat.id == 1.0) {\n        nor += 0.2 * fractalNoise(pt);\n    }\n    \n    // LIGHTS\n   \n    // CALCULATE COLOR\n    float occ = calcOcc(pt, nor);\n    vec3 light = vec3(mat.amb);\n    light += calcLighting(pt, rd, nor, sun, mat) * occ; // sun\n    light += calcLighting(pt, rd, nor, sun2, mat) * occ; // sun2\n    light += (uclamp(dot(nor, vec3(0, 1, 0))) * 0.5 + 0.5) * skyClr * occ; // sky diffuse\n\n    clr *= light;\n    \n    clr = applyFog(rd, d, clr, sun.clr * 0.1, sun.dir, skyClr);\n    \n    return clr;\n\n}\n\n//*******************************************************//\n\nvec3 render(in vec3 ro, in vec3 rd) {\n    \n    Material mat;\n    \n    vec3 clr = vec3(0);\n    \n    vec3 fil = vec3(1.0);\n    for (int i = 0; i < 4; i++) {\n        // cast ray, return dist to closest object and material\n        float d = castRay(ro, rd, mat);\n        vec3 nor = calcNormal(ro + rd*d);\n        // add to color\n        clr += fil * calcClr(ro, rd, d, nor, mat);\n        fil *= mat.ref;\n        // break if we don't need to reflect\n        if (mat.ref.r == 0.0 && mat.ref.g == 0.0 && mat.ref.g == 0.0) break;\n        // update origin and reflect dir\n        ro += rd*d + nor*EPSILON*3.0;\n        if (i > 1) {\n            rd = reflect(rd, nor);\n        }\n    }\n    \n    clr = pow(clr, vec3(1.0 / 2.2)); // gamma correction\n    return clr;\n    \n}\n\n//*******************************************************//\n\nvec3 setCamera(in vec2 uv, in vec3 ro, in vec3 target) {\n    vec3 forward = normalize(target - ro);\n    vec3 right = normalize(cross(forward, vec3(0, 1, 0)));\n    vec3 up = normalize(cross(right, forward));\n    // ray direction\n    vec3 rd = normalize(uv.x * right + uv.y * up + 1.2 * forward);\n    return rd;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    //float time = iTime;\n    //vec2 mouse = iMouse.xy;\n    vec2 res = iResolution.xy;\n\n    // Normalized pixel coordinates\n    vec2 uv = (2.0*fragCoord - res) / min(res.x, res.y);\n    \n    // target\n    vec3 target = vec3(0, 0.0, 0);\n    // ray origin\n    vec3 ro = vec3(4.1, 0.5, -4.1);\n    \n    vec3 rd = setCamera(uv, ro, target);\n    \n    // calculate color based on distance, etc\n    vec3 clr = render(ro, rd);\n\n    // Output to screen\n    fragColor = vec4(clr, 1.0);\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}