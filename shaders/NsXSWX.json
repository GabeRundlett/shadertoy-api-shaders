{
    "Shader": {
        "info": {
            "date": "1619379669",
            "description": "i hate dodecahedrons",
            "flags": 32,
            "hasliked": 0,
            "id": "NsXSWX",
            "likes": 0,
            "name": "314_De_En_De_v4_v5",
            "published": 3,
            "tags": [
                "raytraycing"
            ],
            "usePreview": 0,
            "username": "DeEnDe",
            "viewed": 247
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(-5, 2, -7);\nconst vec3 LIGHT1_POS = vec3(-1, 1.5, 5);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(4, 0.5, 2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0.1, 1, 0.2);\nvec3 randDir;\n\nconst float or = 1.618;\nconst float rec = or - 1.0;  \n\nvec3 minecraft (in vec2 w) {\n\n    vec3 d = vec3(w, 1) / iResolution - 0.6;\n    vec3 p, c, f;\n    vec3 g = d; \n    vec3 o = vec3(0.2, 0.0, 8.0);\n    o.y = 3.0 * cos(o.x * o.z);\n    vec3 y = vec3(1, 2, 0);\n\n    for (float i = 0.0; i < 9.0; i += 0.001) {\n        o += d * i * 0.01;\n        c = o;\n        f = fract(c);\n        p = floor(c) * 0.3;\n        if (cos(p.z) + sin(p.x) > ++p.y) {\n\t    \tg = (f.y - 0.04 * cos((c.x + c.z) * 40.0) > 0.8 ? y : f.y * y.yxz) / i;\n            break;\n        }\n    }\n    \n    return g.rgb;\n}\n\n\nfloat pow2(float x) {\n    return x * x;\n}\nfloat fogSdf(vec3 pos) {\n    return length(pos) - 0.75;\n}\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled) {\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\nvec3 rgb2hsv(vec3 c) {\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec4 sampleFog(vec3 pos, vec3 dir, in vec2 w) {\n\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(10.0 * (\n            2.5 * texture(iChannel3, curPos * 0.3 + vec3(1, 1, 0)).x\n            + 1.5 * texture(iChannel3, curPos * 0.1 + vec3(1, 1, 0)).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    \n    vec3 color = minecraft(w);\n    vec3 tmp = rgb2hsv(color);\n    tmp.x /= 1.2;\n    tmp.z *= 1.7;\n    color = hsv2rgb(tmp);\n    color *= 0.9;\n    \n    return vec4(color * totalAbs, 1.0 - opacity);\n}\n\nbool isIn(vec3 a1, vec3 a2, vec3 a3, vec3 a4, vec3 a5,  vec3 point)\n{\n    vec3 v1 = a2 - a1;\n    vec3 v2 = a3 - a2;\n    vec3 v3 = a4 - a3;\n    vec3 v4 = a5 - a4;\n    vec3 v5 = a1 - a5;\n    vec3 normal = normalize(cross(v1, v2));\n    \n    return !((normalize(dot(cross(v1, point - a1), normal)) != 1.0 && \n          normalize(dot(cross(v1, point - a1), normal)) != -1.0) ||\n                      dot((cross(v1, point - a1)), normal) < 0.0 ||\n                      dot((cross(v2, point - a2)), normal) < 0.0 ||\n                      dot((cross(v3, point - a3)), normal) < 0.0 ||\n                      dot((cross(v4, point - a4)), normal) < 0.0 ||\n                      dot((cross(v5, point - a5)), normal) < 0.0);    \n}\n\n\nfloat plane5(vec3 v1, vec3 v2, vec3 v3, vec3 v4, vec3 v5, vec3 dir, vec3 pos, vec3 mid)\n{\n    vec3 a1 = v2 - v1;\n    vec3 a2 = v3 - v2;\n    vec3 normal = normalize(cross(a1, a2));\n    vec3 inMid = mid - v1;\n    if (dot(normal, inMid) > 0.0) {\n        normal = -normal;\n    }\n    \n    float dotNorm = dot(dir, normal);\n    float t = dot(v2 - pos, normal) / dotNorm;\n    vec3 worldPos = t * dir + pos;\n    if (t <= 0.) {\n        return INF;\n    }\n    if (isIn(v1, v2, v3, v4, v5, worldPos)) {\n        return t;\n    }\n    return INF; \n}\n\nvoid checkNormal(vec3 v1, vec3 v2, vec3 v3, vec3 mid, out vec3 normal)\n{\n    vec3 vect1 = v2 - v1;\n    vec3 vect2 = v3 - v2;\n    normal = normalize(cross(vect1, vect2));\n    vec3 inMid = mid - v1;\n    if (dot(normal, inMid) > 0.0)\n        normal = -normal;\n}\n\nvec3 trickVec(vec3 a, float size, vec3 trick) {\n    return a * size + trick;\n}\n\n\nfloat traceDod(vec3 pos, vec3 dir, out vec3 normal, float size, vec3 trick) \n{\n    vec3 mid = vec3(0, 0, 0);\n\n    \n    vec3 v[20];\n    v[0] = vec3(1, 1, 1);\n    v[1] = vec3(1, 1, -1);\n    v[2] = vec3(1, -1, 1);\n    v[3] = vec3(1, -1, -1);\n    v[4] = vec3(-1, 1, 1);\n    v[5] = vec3(-1, 1, -1);\n    v[6] = vec3(-1, -1, 1);\n    v[7] = vec3(-1, -1, -1);\n    v[8] = vec3(0, rec, or);\n    v[9] = vec3(0, rec, -or);\n    v[10] = vec3(0, -rec, or);\n    v[11] = vec3(0, -rec, -or);\n    v[12] = vec3(rec, or, 0);\n    v[13] = vec3(rec, -or, 0);\n    v[14] = vec3(-rec, or, 0);\n    v[15] = vec3(-rec, -or, 0);\n    v[16] = vec3(or, 0, rec);\n    v[17] = vec3(or, 0, -rec);\n    v[18] = vec3(-or, 0, rec);\n    v[19] = vec3(-or, 0, -rec);\n    \n    for (int i = 0; i < 20; i++) {\n        v[i] = trickVec(v[i], size, trick);\n    }\n    \n    float t = INF;\n    float cur_t;\n    cur_t = plane5(v[8], v[10], v[2], v[16], v[0], dir, pos, mid);\n    if (cur_t < t) {\n        t = cur_t;\n        checkNormal(v[8], v[10], v[2], mid, normal);\n    }\n \n    cur_t = plane5(v[12], v[14], v[4], v[8], v[0], dir, pos, mid);\n    if (cur_t < t) {\n        t = cur_t;\n        checkNormal(v[12], v[14], v[4], mid, normal);\n    }\n \n    cur_t = plane5(v[16], v[17], v[1], v[12], v[0], dir, pos, mid);\n    if (cur_t < t) {\n        t = cur_t;\n        checkNormal(v[16], v[17], v[1], mid, normal);\n    }\n \n \n    cur_t = plane5(v[17], v[3], v[11], v[9], v[1], dir, pos, mid);\n    if (cur_t < t) {\n        t = cur_t;\n        checkNormal(v[17], v[3], v[11], mid, normal);\n    }\n    \n    cur_t = plane5(v[9], v[5], v[14], v[12], v[1], dir, pos, mid);\n    if (cur_t < t) {\n        t = cur_t;\n        checkNormal(v[9], v[5], v[14], mid, normal);\n    }\n \n    cur_t = plane5(v[10], v[6], v[15], v[13], v[2], dir, pos, mid);\n    if (cur_t < t) {\n        t = cur_t;\n        checkNormal(v[10], v[6], v[15], mid, normal);\n    }\n \n    cur_t = plane5(v[13], v[3], v[17], v[16], v[2], dir, pos, mid);\n    if (cur_t < t) {\n        t = cur_t;\n        checkNormal(v[13], v[3], v[17], mid, normal);\n    }\n \n \n    cur_t = plane5(v[13], v[15], v[7], v[11], v[3], dir, pos, mid);\n    if (cur_t < t) {\n        t = cur_t;\n        checkNormal(v[13], v[15], v[7], mid, normal);\n    }\n    \n    cur_t = plane5(v[18], v[6], v[10], v[8], v[4], dir, pos, mid);\n    if (cur_t < t) {\n        t = cur_t;\n        checkNormal(v[18], v[6], v[10], mid, normal);\n    }\n \n    cur_t = plane5(v[14], v[5], v[19], v[18], v[4], dir, pos, mid);\n    if (cur_t < t) {\n        t = cur_t;\n        checkNormal(v[14], v[5], v[19], mid, normal);\n    }\n \n \n    cur_t = plane5(v[9], v[11], v[7], v[19], v[5], dir, pos, mid);\n    if (cur_t < t) {\n        t = cur_t;\n        checkNormal(v[9], v[11], v[7], mid, normal);\n    }\n \n \n    cur_t = plane5(v[15], v[7], v[19], v[18], v[6], dir, pos, mid);\n    if (cur_t < t) {\n        t = cur_t;\n        checkNormal(v[15], v[7], v[19], mid, normal);\n    }\n    return t;\n}\n\n// (CAMERA_POS + t * viewVec).y == -1\n// t = (-1 - CAMERA_POS.y) / viewVec.y;\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 6.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    vec3 randDir = normalize(randVals * 2.0 - 1.0);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float BUILDING_R = 0.0;\n    float n1 = AIR_N;\n    float curN = 1.0;\n    float nextN = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    vec3 colorMult = vec3(1, 1, 1);\n    float mult = 1.0;\n    for (int i = 0; i < 20; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = GLASS_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        vec3 dodNorm;\n        float sphT = traceDod(curPos, curDir, dodNorm, 0.75, vec3(0.3, 0.3, 0.3));\n        if (sphT < t) {\n            t = sphT;\n            normal = dodNorm;\n            if (randVals.x * 0.5 < GLASS_R * 2.0){\n                materialType = REFLECTION;\n             }\n             else {\n                materialType = REFRACTION;\n\n             }\n\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            if (materialType == EMISSION) {\n                fragColor.rgb = color;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb += mult * computeLight(worldPos, color, normal);\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n                vec4 fog = sampleFog(curPos, curDir, fragCoord);\n                fragColor.rgb += fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}