{
    "Shader": {
        "info": {
            "date": "1500544622",
            "description": "Based on the great works of other talented coders, this is my farewell ticket for my company :)\nI hope you like it,\n\nCheers!",
            "flags": 0,
            "hasliked": 0,
            "id": "XdSBWw",
            "likes": 15,
            "name": "Summertime",
            "published": 3,
            "tags": [
                "sea",
                "sun",
                "ocean",
                "stars",
                "rayleigh",
                "gerstner"
            ],
            "usePreview": 0,
            "username": "lordjone",
            "viewed": 2107
        },
        "renderpass": [
            {
                "code": "/*\n * \"Summertime\" by Diego Rodriguez aka Inferno - 2017\n * Based on \"Seascape\" by Alexander Alekseev aka TDM - 2014\n * https://www.shadertoy.com/view/Ms2SD1\n * \n * Sun and Sky based on \"Two lines atmospheric scattering\" by Bananaft\n * https://www.shadertoy.com/view/MdtXD2\n *\n * Starz based on \"Star Nursery\" by Dave_Hoskins\n * https://www.shadertoy.com/view/XsfGzH\n *\n * License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n * Contact: drodrigu86@gmail.com\n */\n\n#define NUM_STEPS 15\n#define PI\t \t3.141592\n#define EPSILON 1e-3\n#define EPSILON_NRM (0.1 / iResolution.x)\n\n// sea\n#define NUM_WAVES 9\n#define SEA_SPEED 0.26\n#define SEA_FREQ 0.8\n\nfloat SEA_HEIGHT = 0.019;\nfloat SEA_STEEPNESS = 0.1;\n\nconst vec3 SEA_WATER_COLOR = vec3(0,0.22,0.33);\nconst vec3 SEA_WATER_DEPTH_COLOR = vec3(0.0,0.22,0.83);\n\nvec3 SUN_DIR = normalize( vec3(0.0,0.0,1.0) );\n\n#define SEA_CHOPPY 2.0\n#define ITER_FRAGMENT 12\n#define SEA_TIME (iTime * SEA_SPEED)\nconst mat2 octave_m = mat2(1.6,1.2,-1.2,1.6);\n\nstruct Wave \n{ \n    vec2 direction;\n    float steepness;\n    float amplitude;\n    float frequency;\n    float speed;\n};\n\nWave[NUM_WAVES] waves;    \n\n// math\nmat3 fromEuler(vec3 ang) \n{\n\tvec2 a1 = vec2(sin(ang.x),cos(ang.x));\n    vec2 a2 = vec2(sin(ang.y),cos(ang.y));\n    vec2 a3 = vec2(sin(ang.z),cos(ang.z));\n    mat3 m;\n    m[0] = vec3(a1.y*a3.y+a1.x*a2.x*a3.x,a1.y*a2.x*a3.x+a3.y*a1.x,-a2.y*a3.x);\n    m[1] = vec3(-a2.y*a1.x,a1.y*a2.y,a2.x);\n    m[2] = vec3(a3.y*a1.x*a2.x+a1.y*a3.x,a1.x*a3.x-a1.y*a3.y*a2.x,a2.y*a3.y);\n\treturn m;\n}\n\nfloat hash( vec2 p ) \n{\n\tfloat h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\n\nfloat noise( in vec2 p ) \n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\t\n\tvec2 u = f*f*(3.0-2.0*f);\n    return -1.0+2.0*mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat star_hash( float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\nfloat star_noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0;\n\n    float res = mix(mix( star_hash(n+  0.0), star_hash(n+  1.0),f.x),\n                    mix( star_hash(n+ 57.0), star_hash(n+ 58.0),f.x),f.y);\n\n    return res;\n}\n\n\nfloat sea_octave(vec2 uv, float choppy) \n{\n    uv += noise(uv);        \n    vec2 wv = 1.0-abs(sin(uv));\n    vec2 swv = abs(cos(uv));    \n    wv = mix(wv,swv,wv);\n    return pow(1.0-pow(wv.x * wv.y,0.65),choppy);\n}\n\nfloat map_detailed(vec3 p) \n{\n    float freq = SEA_FREQ;\n    float amp = SEA_HEIGHT;\n    float choppy = SEA_CHOPPY;\n    vec2 uv = p.xz;\n    \n    float d, h = 0.0;    \n    for(int i = 0; i < ITER_FRAGMENT; i++) \n    {        \n    \td = sea_octave((uv+SEA_TIME)*freq,choppy);\n    \td += sea_octave((uv-SEA_TIME)*freq,choppy);\n        h += d * amp;        \n    \tuv *= octave_m; freq *= 1.66; amp *= 0.22;\n        choppy = mix(choppy,1.0,0.2);\n    }\n    return p.y - h;\n}\n\n// lighting\nfloat diffuse(vec3 n,vec3 l,float p) \n{\n    return pow(dot(n,l) * 0.4 + 0.6,p);\n}\n\nfloat specular(vec3 n,vec3 l,vec3 e,float s) \n{    \n    float nrm = (s + 8.0) / (PI * 8.0);\n    return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;\n}\n\n// ambient\nvec3 getAmbientColor(vec3 rd) \n{\n    rd.y = max(rd.y,0.0);\n    \n    vec3 col = vec3(0.0);\n    \n    float sun = max(1.0 - (1.0 + 10.0 * SUN_DIR.y + 1.0 * rd.y) * length(rd - SUN_DIR), 0.0);\n    float falloff = mix(0.1, 0.3, sun) * pow(1.0-rd.y,12.0) * (1.6-SUN_DIR.y);\n    float kOrbit = pow(SUN_DIR.y,0.03);   \n    \n    sun += falloff;\n    sun *= kOrbit;\n    \n    float h = mix(0.3, 1.33, kOrbit); \n\n    col += mix(vec3(0.3984,0.5117,0.7305), vec3(0.7031,0.4687,0.1055), sun)\n              * ( (0.5 + pow(SUN_DIR.y,0.4) ) * (h-rd.y) \n                 + pow(sun, 5.2) * SUN_DIR.y * (5.0 + 15.0 * SUN_DIR.y)\n                );\n    \n#define time (iTime+46.0)  \n    // starz\n   \tfloat v = 1.0/( 2. * ( 1. + rd.z ) );\n\tvec2 xy = vec2(rd.y * v, rd.x * v);\n    rd.z += time*.002;\n    float s = noise(rd.xz*134.0);\n\ts += star_noise(rd.xz*370.);\n\ts += star_noise(rd.xz*870.);\n\ts = pow(s,19.0) * 0.00000001 * max(rd.y, 0.0);\n\tif (s > 0.0)\n\t{\n\t\tvec3 backStars = vec3((1.0-sin(xy.x*20.0+time*13.0*rd.x+xy.y*30.0))*.5*s,s, s); \n\t\tcol += (1.0 - kOrbit) * backStars;\n\t}\n    \n    return col;\n}\n\n// sea\nvoid fill_waves(int index, int count, \n                float steepness, float freq, float amp, float speed, \n                float kFreq, float kAmp, float kSpeed,\n                vec2 direction, in mat2 directionTransform)\n{\n    for(int i=index; i < count; ++i)\n    {\n        waves[i] = Wave(normalize(direction), steepness/(amp*freq), amp, freq, speed);\n        \n        // update\n        direction *= directionTransform;\n        freq *=kFreq;\n        amp *= kAmp;\n        speed *= kSpeed;\n    }\n}\n\nvoid initWaves()\n{\n    vec2 direction = vec2(-1.0, 0.0);\n    float fwaves = float(NUM_WAVES);\n    \n    float steepness = SEA_STEEPNESS/fwaves;\n    float freq = SEA_FREQ;\n    float amp = SEA_HEIGHT;\n    float speed = SEA_SPEED;\n    \n    float angle = -2.0*PI/fwaves;\n    float cosa = cos(angle);\n    float sina = sin(angle);\n    mat2 directionTransform = mat2(cosa, sina, -sina, cosa);\n    \n    int lowWaves = int(0.5*fwaves);\n    int highWaves = NUM_WAVES - lowWaves;\n    \n    // Low freq waves\n    fill_waves(0, lowWaves, steepness, freq, amp, speed, 0.66, 1.9, 0.33, direction, directionTransform);\n    \n    // High freq waves\n    fill_waves(lowWaves, NUM_WAVES, steepness, freq, 0.001, speed, 1.33, 1.43, 0.99, direction, directionTransform);\n}\n\nvec3 getSeaColor(vec3 origin, vec3 p, vec3 n, vec3 l, vec3 eye, vec3 dist) \n{  \n    float fresnel = clamp(1.0 - dot(n,-eye), 0.0, 1.0);\n    fresnel = pow(fresnel,3.0) * 0.65;\n        \n    vec3 reflected = getAmbientColor(reflect(eye,n));    \n    vec3 refracted = SEA_WATER_COLOR + diffuse(n,l,80.0) * SEA_WATER_DEPTH_COLOR * 0.12; \n    \n    vec3 color = mix(refracted,reflected,fresnel);\n    \n    float atten = max(1.0 - dot(dist,dist) * 0.001, 0.0);\n    color += SEA_WATER_DEPTH_COLOR * (p.y - SEA_HEIGHT) * 0.18 * atten;\n    \n    color += vec3(specular(n,l,eye,60.0));\n    \n    return color;  \n}\n\n// tracing\nvec3 gerstner(in vec3 p)\n{\n    vec3 g = vec3(p.xz, 0.0);\n    \n    const int len = waves.length();\n    vec3 acc = vec3(0.0);\n    for(int i = 0; i < len; i++) \n    {   \n        Wave wave = waves[i];\n        float period = wave.frequency * dot(wave.direction, g.xy) + iTime * wave.speed;\n        float offset = wave.amplitude * wave.steepness * cos( period );\n        acc.x += offset * wave.direction.x; \n        acc.y += offset * wave.direction.y;\n    \tacc.z += wave.amplitude*sin( period );\n    }\n    \n    g += acc;\n    \n    return g;\n}\n\nvec3 gerstner_normal(in vec3 p)\n{\n    vec2 uv = p.xz; \n    vec3 n = vec3(0.0);\n    \n    const int len = waves.length();\n    for(int i = 0; i < len; i++) \n    { \n        Wave wave = waves[i];\n        float period = wave.frequency*dot(wave.direction, uv) + iTime * wave.speed;\n        float WA = wave.frequency*wave.amplitude;\n        float C = cos(period); \n        float S = sin(period);\n        float WAC = WA*C;\n        \n\t\tn.x += wave.direction.x * WAC;\n        n.y += wave.direction.y * WAC;\n        n.z += wave.steepness * WA * S;\n    }\n    \n    n.x = - n.x;\n    n.y = - n.y;\n    n.z = 1.0 - n.z;\n    \n    return normalize(n.xzy);\n}\n\nvec3 gerstner_noise_normal(vec3 g, float eps)\n{   \n    // noise normal\n    vec3 n;\n    n.y = map_detailed(g);    \n    n.x = map_detailed(vec3(g.x+eps,g.y,g.z)) - n.y;\n    n.z = map_detailed(vec3(g.x,g.y,g.z+eps)) - n.y;\n    n.y = eps;\n    n = normalize(n);\n    \n    // gerstner normal\n    vec3 gn = gerstner_normal(g).xzy;\n    \n    // mix normals\n    n.x += gn.x;\n    n.y += gn.y;\n    n.z *= gn.z;\n    \n    return normalize(n);\n}\n\nvec3 getNormal(vec3 p, float eps) \n{\n    vec3 n;\n    n.y = p.y - gerstner(p).z;    \n    n.x = p.y -gerstner(vec3(p.x+eps,0.0,p.z)).z - n.y;\n    n.z = p.y -gerstner(vec3(p.x,0.0,p.z+eps)).z - n.y;\n    n.y = eps;\n    return normalize(n);\n}\n\nvoid gerstner_tracer(vec3 ori, vec3 dir, out vec3 p)\n{\n    float tm = 0.0;\n    float tx = 1000.0;\n    vec3 pos = ori + dir * tx;\n    vec3 g = gerstner(pos);\n    float hx = pos.y - g.z;\n    if(hx > 0.0)\n    {\n        p = g.xzy;\n        return;\n    }\n    \n    pos = ori + dir * tm;\n    float hm = pos.y - gerstner(pos).z;    \n    float tmid = 0.0;\n    g = vec3(0.0);\n    for(int i = 0; i < NUM_STEPS; i++) \n    {\n        tmid = mix(tm,tx, hm/(hm-hx));                   \n        p = ori + dir * tmid;             \n        g = gerstner(p);\n    \tfloat hmid = p.y -g.z;\n\t\tif(hmid < 0.0) \n        {\n        \ttx = tmid;\n            hx = hmid;\n        } \n        else \n        {\n            tm = tmid;\n            hm = hmid;\n        }\n    }\n    \n    p = g.xzy;\n}\n\n// main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    // uv map\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;    \n\n    // sun\n    const float kSpeed = 0.02;\n    const float period = 2.0*PI;\n    const float gamma = kSpeed*period;\n    float alpha = gamma*iTime;\n    float sine = sin(alpha);\n    float inOrbit = sine > 0.0 ? 1.0 : 0.0;\n    \n    float sunAngle = -alpha;\n    mat3 sunRotation = fromEuler( vec3(0.0, sunAngle, 0.0) );\n    SUN_DIR = inOrbit*normalize(sunRotation * SUN_DIR) + (1.0 -inOrbit)*vec3(0.0);\n    \n    //sea\n    float amount = max(sine, 0.0);\n    SEA_HEIGHT = mix( 0.022, 0.099, amount );\n    SEA_STEEPNESS = mix( 0.1, 1.0, amount );\n    initWaves();\n    \n    // ray  \n    vec3 ang = vec3(0.0, iMouse.y*0.01, iMouse.x*0.01);\n    vec3 ori = vec3(0.0,3.0,5.0);\n    vec3 dir = normalize(vec3(uv.xy,-2.0)); \n    dir = normalize(dir) * fromEuler(ang);\n    \n    // tracing\n    vec3 p;\n    gerstner_tracer(ori, dir, p);\n    vec3 dist = p - ori;\n    //vec3 n = gerstner_normal(p);\n    //vec3 n = getNormal(p, dot(dist,dist) * EPSILON_NRM);\n    vec3 n = gerstner_noise_normal(p, dot(dist,dist) * EPSILON_NRM);\n    \n    // color\n    vec3 color = mix(\n        getAmbientColor(dir),\n        getSeaColor(ori, p,n,SUN_DIR,dir,dist), \n    \tpow(smoothstep(0.0,-0.05,dir.y),0.2));\n    \n    // post\n\tfragColor = vec4(pow(color,vec3(0.75)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}