{
    "Shader": {
        "info": {
            "date": "1580774240",
            "description": "volumetric",
            "flags": 0,
            "hasliked": 0,
            "id": "3dKXzy",
            "likes": 7,
            "name": "Volumetric light",
            "published": 3,
            "tags": [
                "volumetric"
            ],
            "usePreview": 0,
            "username": "Txoka",
            "viewed": 538
        },
        "renderpass": [
            {
                "code": "struct ray{\n    vec3 ro;\n\tvec3 rd;\n};\nfloat gamma=1.8;\nconst float pi=4.*atan(1.);\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nfloat suc(ray r,float l,vec3 center,float radius){\n    vec3 o=r.ro-center;\n    \n    float a=dot(o,o);\n    float b=dot(r.rd,o);\n    float c=dot(r.rd,r.rd);\n    \n    float k=sqrt(a*c-b*b);\n    float w=b+c*l;\n    //integral =radius*atan(w/k)/k\n    float integ=radius*(atan(w,k)-atan(b,k))/k;\n    return integ;\n}\n\nvec3 render(ray r){\n    vec3 res=vec3(0.);\n    \n    float n1=clamp(0.,1.,suc(r,100.,vec3(2,0,0),0.2));\n    float n2=clamp(0.,1.,suc(r,100.,vec3(0,2,0),0.1));\n    float n3=clamp(0.,1.,suc(r,100.,vec3(0,0,2),0.05));\n    float n4=clamp(0.,1.,suc(r,100.,vec3(0,0,-2),0.2));\n    float n5=clamp(0.,1.,suc(r,100.,vec3(0,-2,0),0.3));\n    float n6=clamp(0.,1.,suc(r,100.,vec3(-2,0,0),0.1));\n    float n7=clamp(0.,1.,suc(r,100.,vec3(0,0,0),0.03));\n    \n    //only need hue but does not matter, its 60+fps anyway\n\tres+=pow(n1*hsv2rgb(vec3(iTime,1,1))\t\t,vec3(gamma));\n    res+=pow(n2*hsv2rgb(vec3(iTime+0.1,1,1))\t,vec3(gamma));\n    res+=pow(n3*hsv2rgb(vec3(iTime+0.2,1,1))\t,vec3(gamma));\n    \n    if(iTime>2.){\n    \tres+=pow(n4*hsv2rgb(vec3(iTime+0.3,1,1))\t,vec3(gamma));\n    \tres+=pow(n5*hsv2rgb(vec3(iTime+0.4,1,1))\t,vec3(gamma));\n    \tres+=pow(n6*hsv2rgb(vec3(iTime+0.5,1,1))\t,vec3(gamma));\n    \tres+=pow(n7*hsv2rgb(vec3(iTime+0.6,1,1))\t,vec3(gamma));\n    }\n    return vec3(res);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    //ray origin and dir\n    vec3 uv = vec3((fragCoord*2.-iResolution.xy)/iResolution.y,-3);\n    \n    \n    vec2 m=(iMouse.xy*2.-iResolution.xy)/iResolution.xy;\n    m*=vec2(1,0.5)*pi;\n\n    if(iMouse.z<=0.)m=vec2(-iTime/3.,0.05);\n    #ifdef eyes\n    vec3 ro=vec3(-0.2,0,-4);\n    if(uv.x<0.)ro.x=0.2;\n    uv.xy+=ro.xy*5.;\n    #else\n    vec3 ro=vec3(0,0,-4.);\n    #endif\n    \n    ro.yz*=mat2(cos(m.y),-sin(m.y),sin(m.y),cos(m.y));\n    ro.xz*=mat2(cos(m.x),-sin(m.x),sin(m.x),cos(m.x));\n    uv.yz*=mat2(cos(m.y),-sin(m.y),sin(m.y),cos(m.y));\n    uv.xz*=mat2(cos(m.x),-sin(m.x),sin(m.x),cos(m.x));\n    \n    vec3 rd=normalize(uv-ro);\n   \t\n    ray r=ray(ro,rd);\n    \n    vec3 col=render(r);\n    \n    fragColor=vec4(pow(col,vec3(1./gamma)),1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}