{
    "Shader": {
        "info": {
            "date": "1674130679",
            "description": "lorem ipsum dolor sit amet, so to speak",
            "flags": 0,
            "hasliked": 0,
            "id": "ct2GDt",
            "likes": 5,
            "name": "Torus Heaven",
            "published": 3,
            "tags": [
                "torus"
            ],
            "usePreview": 0,
            "username": "Varyemez",
            "viewed": 321
        },
        "renderpass": [
            {
                "code": "/*void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}*/\n\nconst int MAX_STEP = 80;\nconst float SURFACE_DIST = 0.02;\nconst float PI = radians(180.);\n\nconst vec2 torusr = vec2(0.85, 0.15)*0.5;\n\nmat2 rot2d(float r)\n{\nfloat s = sin(r), c = cos(r);\nreturn mat2(c,-s,s,c);\n}\nfloat random(vec2 s)\n{\nreturn fract(sin(dot(s, vec2(362.485, 123.445))*764.346)*2647.9752);\n}\n\nfloat plane(vec3 p)\n{\nreturn abs(p.y);\n}\nfloat sphere(vec3 p, float r)\n{\nreturn length(p)-r;\n}\nfloat torus(vec3 p, float a, float b)\n{\nreturn length(vec2(length(p.xz)-a, p.y))-b;\n}\nfloat cube(vec3 p, float r)\n{\np = abs(p);\nreturn length(max(p-r, 0.));\n}\n\nfloat map(vec3 p)\n{\nfloat angle = atan(1., 1.);\np.xz *= rot2d(angle);\n//p.y += time*pow(-1., floor(p.z));\np = fract(p);\np -= 0.5;\nfloat t0 = torus(p, torusr.x, torusr.y);\np.xy *= rot2d(PI*0.5);\np.z -= 0.5;\nfloat t1 = torus(p, torusr.x, torusr.y);\np.z += 1.;\nfloat t2 = torus(p, torusr.x, torusr.y);\nreturn min(min(t0, t1), t2);\n}\n\nvec3 get_normal(vec3 p)\n{\nvec2 e = vec2(0.05, 0.);\nfloat d = map(p);\nreturn -normalize(vec3(\nd-map(p+e.xyy),\nd-map(p+e.yxy),\nd-map(p+e.yyx)\n));\n}\n\nfloat raymarch(vec3 vo, vec3 dir)\n{\n    float d = 0.;\n    for (int i = 0; i < MAX_STEP; i++)\n    {\n    float cd = map(vo + dir*d);\n    if (cd < SURFACE_DIST)\n    break;\n    d += cd;\n    }\n    return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy) / iResolution.y;\n\n    vec3 r0 = vec3(0.,1.,0.);\n    vec3 dir = normalize(vec3(uv.xy, 1.));\n    r0.z += iTime;\n    //dir.xz *= rot2d(time);\n    float d = raymarch(r0, dir);\n    vec3 p = r0 + dir*d;\n\n    fragColor = vec4(0.3, 0., 1., 1.) / max(0.5, d);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}