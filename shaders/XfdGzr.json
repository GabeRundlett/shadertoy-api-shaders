{
    "Shader": {
        "info": {
            "date": "1711335144",
            "description": "Coding Train's Julia Set video, but in the context of shaders",
            "flags": 0,
            "hasliked": 0,
            "id": "XfdGzr",
            "likes": 2,
            "name": "Ian's Julia Set",
            "published": 3,
            "tags": [
                "julia"
            ],
            "usePreview": 0,
            "username": "imoses2",
            "viewed": 144
        },
        "renderpass": [
            {
                "code": "vec2 mult(in vec2 a, in vec2 b) {\n    return vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\nvec2 square(in vec2 a) {\n    return vec2(a.x*a.x - a.y*a.y, 2.0*a.x*a.y);\n}\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.198, 0.418, 0.468);\n    vec3 b = vec3(0.108, 0.058, 0.218);\n    vec3 c = vec3(0.638, 3.000, 1.000);\n    vec3 d = vec3(0.000, -1.722, 0.667);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coords and centered to screen\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // pick a constant\n    //vec2 juliaConstant = vec2(-0.70176, -0.3842);\n    //vec2 juliaConstant = vec2(0.0, 0.8);\n    //vec2 juliaConstant = vec2(-0.8, 0.156);\n    \n    // or use a constant that changes with time\n    //vec2 juliaConstant = vec2(sin(iTime), 0);\n    float x = sin((iTime-25.0)/5.0)*2.5 + 2.5;\n    vec2 juliaConstant = vec2(\n        1.864746 - 1.106468*x + 0.14467*x*x,\n        -1.220168 + 0.245795*x - 0.025375*x*x\n    );\n    \n    // initialize the variables\n    float n = 0.0;\n    float z = 0.0;\n    vec2 value = uv;\n    \n    while (n < 100.0) {\n        value = square(value) + juliaConstant;\n    \n        if (value.x*value.x + value.y*value.y > 4.0) {\n            break;\n        }\n    \n        n += 1.0;\n    }\n    \n    if (n == 100.0) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n    else {\n        fragColor = vec4(palette(n/100.0), 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}