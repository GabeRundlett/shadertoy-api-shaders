{
    "Shader": {
        "info": {
            "date": "1571585181",
            "description": "I tried so anaglyph stuf, but ! without glasses. so, maybe it should work (theoritically)",
            "flags": 0,
            "hasliked": 0,
            "id": "WdtXRN",
            "likes": 7,
            "name": "Shadertober 17 Ornement",
            "published": 3,
            "tags": [
                "anaglyph",
                "inktober"
            ],
            "usePreview": 0,
            "username": "GreenChicken",
            "viewed": 383
        },
        "renderpass": [
            {
                "code": "// SHADERTOBER 17 Ornement\n// Poulet Vert 20-10-2019\n// Thanks to iq, leon\n\n#define PI 3.14159\n#define MAXSTEP 64\n\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\n\nfloat uSDF(float s1, float s2) { return min(s1, s2);}\n\nfloat sSDF( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); \n}\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\nvec3 opRep(vec3 p, vec3 c)\n{\n     return mod(p+0.5*c,c)-0.5*c;\n}\n\n// Scene setup\nvec2 map(vec3 pos)\n{\n    vec2 scene = vec2(0.0, 0.0);\n    \n    pos.z += iTime * 5.;\n    \n    vec3 bp = pos + vec3(0.0);\n    bp = opRep(bp, vec3(1.0));\n    float box = sdBox(bp, vec3(1.0));\n    \n    vec3 sp = pos + vec3(0.0);\n    sp = opRep(sp, vec3(2.0));\n    float sphere = sdSphere(sp, 1.2+sin(iTime*10.)*0.1);\n    \n    box = max(box, -sphere);\n    \n    // materials\n    scene = vec2(box, 0.0);\n    \n    return scene;\n}\n\nvec2 CastRay(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    \n    for(int i=0 ; i<128 ; i++)\n    {\n        vec2 ray = map(ro + rd * t);\n        \n        if(ray.x < (0.0001*t))\n        {\n            return vec2(float(i)/128., ray.y);\n        }\n        \n        t += ray.x;\n    }\n    \n    return vec2(-1.0, 0.0);\n}\n\nvec3 Render(vec3 ro, vec3 rd, vec2 uv)\n{\n    vec2 t = CastRay(ro, rd);\n    vec3 pos = vec3(ro + rd * t.x);\n    vec3 col = vec3(0.0);\n\n    if(t.x == -1.0)\n    {\n        \n        col = vec3(.3); \n        \n    }\n    else\n    {\n        float depth = 1.0 - t.x;\n        \n        col = vec3(depth);\n    }\n    \n    return col;\n}\n\nvec3 GetViewDir(vec2 uv, vec3 cp, vec3 ct)\n{\n    vec3 forward = normalize(ct - cp);\n    vec3 right = normalize(cross(vec3(sin(iTime), -1.0, cos(iTime)), forward));\n    vec3 up = normalize(cross(right, forward));\n    \n    return normalize(uv.x * right + uv.y * up + 1.0 * forward);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    vec2 screenUV = fragCoord.xy / iResolution.xy;\n    \n    // left\n    vec3 cp = vec3(0.1, 0.0, -5.0);\n    vec3 ct = vec3(sin(iTime)*PI*3.0, 0.0, 0.0);\n    \n    vec3 vd = GetViewDir(uv, cp, ct);\n    \n    vec3 colL = Render(cp, vd, screenUV);\n    \n    // right\n    cp = vec3(-0.1, 0.0, -5.0);\n    vd = GetViewDir(uv, cp, ct);\n    vec3 colR = Render(cp, vd, screenUV);\n    \n    // render\n    \n    vec3 col = vec3(colL.x, colR.y, colR.z);\n    \n    fragColor = vec4(sqrt(clamp(col, 0.0, 1.0)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}