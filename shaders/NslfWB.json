{
    "Shader": {
        "info": {
            "date": "1645339898",
            "description": "my first ray-marching shader! :D",
            "flags": 0,
            "hasliked": 0,
            "id": "NslfWB",
            "likes": 3,
            "name": "odos|first ray-marching",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "ErinZ",
            "viewed": 304
        },
        "renderpass": [
            {
                "code": "#define TMIN 0.1\n#define TMAX 200.\n#define RAYMARCH_TIME 128\n#define PRECISION .001\n#define AA 3\n\n#define S(v,r) smoothstep( r, r+ 3./iResolution.y, v )\nfloat logo(vec2 uv);\n\nfloat sdSphere(vec3 p, vec3 o, float r){\n    return length(p-o)-r;\n}\nfloat sdCapsule(vec3 p,vec3 a, vec3 b,float r){\n    vec3 ab = b - a;\n    vec3 ap = p - a;\n    float t = dot(ab, ap)/dot(ab,ab);\n    t = clamp(t,0.,1.);\n    vec3 c = a +t*ab;\n    return length(p-c)-r;\n}\nfloat sdTorus(vec3 p,vec3 o, float r1,float r2){\n    p -= o;\n    return length( vec2(length(vec2(p.x,p.z))-r1,p.y) ) - r2;\n}\nfloat sdBox(vec3 p, vec3 o, vec3 s){\n    p-=o;\n    return length(max(abs(p)-s,0.));\n}\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    float t = dot(ab, ap) / dot(ab, ab);\n    vec3 c = a + t*ab;\n\n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n    \n    return e+i;\n}\nfloat f(vec3 p){\n    float ds = sdSphere(p,vec3(0,1,3),1.);//sdf sphere\n    float dc = sdCapsule(p,vec3(1,.5,2),vec3(3.5,.5,3),.5);//sdf capsule\n    float dt = sdTorus(p,vec3(-2,.5,4),1.,.5);//sdf torus\n    float db = sdBox(p,vec3(1,1,5),vec3(1,2,1));//sdf box\n    float dcy = sdCylinder(p,vec3(1.5,1.7,2),vec3(4,.5,5),.5);//sdf cylinder\n    float dp = p.y;//sdf plane y=0\n    float d = min(ds,dc);\n    d = min(d,dt);\n    d = min(d,dp);\n    d = min(d,db);\n    d = min(d,dcy);\n    return d;\n}\nfloat rayMarch(in vec3 ro, in vec3 rd) {\n    float t = TMIN;\n    for(int i = 0; i < RAYMARCH_TIME ; i++) {\n        vec3 p = ro + t * rd;\n        float d = f(p);\n        t += d;\n        if(d < PRECISION || t > TMAX)\n            break;\n    }\n    return t;\n}\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 p) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * f(p + k.xyy * h) +\n        k.yyx * f(p + k.yyx * h) +\n        k.yxy * f(p + k.yxy * h) +\n        k.xxx * f(p + k.xxx * h));\n}\n\nvec3 render(vec2 uv){\n    vec3 lightPos = vec3(5.*cos(iTime), 5., 5.*sin(iTime)+3.);//light\n    vec3 ro = vec3(0,2,-4);//camera\n    vec3 rd = normalize(vec3(uv,2));\n\n    vec3 color = vec3(0);//background\n    vec3 amb = vec3(.1);//ambient color\n    vec3 diffusecol = vec3(1.,1.,1.);//diffuse color\n\n    float t = rayMarch(ro,rd);//raymarching\n    \n    vec3 p = ro+t*rd;\n    vec3 n = calcNormal(p);\n    vec3 l = normalize(lightPos-p);//lightDir\n    vec3 dif = clamp(dot(l,n),0.,1.)*diffusecol;//lambert\n\n    float shadow = rayMarch(p,l);\n    if(shadow<length(lightPos-p)) dif*=.1;\n\n    color = amb + dif;\n    \n    return color;\n}\nvec2 getuv(vec2 coord){\n    return (2.*coord-iResolution.xy)/iResolution.y;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 color = vec3(0.);\n    for(int m = 0; m < AA; m++) {\n        for(int n = 0; n < AA; n++) {\n            vec2 offset = 2. * (vec2(float(m), float(n)) / float(AA) - .5);\n            vec2 uv = getuv(fragCoord + offset);\n            color += render(uv);\n        }\n    }\n    color /= float(AA*AA);\n    color = mix(color,vec3(1),logo(uv));\n    fragColor = vec4(color,1.0);\n}\n\n \nfloat logo(vec2 uv){\nfloat n = 0.;\nn += S(.05,abs(length(uv-vec2(-1.23,0))-.12));\nn *= 1.-S(-1.25,uv.x);\nn += S(.17,abs(uv.y))*S(.05,abs(uv.x+1.29));\nn += S(.05,abs(length(uv-vec2(-1.5,0))-.12));\nn += S(.05,abs(length(uv-vec2(-0.9,0))-.12));\nn += (1.+S(-.6,uv.x)-S(.05,uv.y))*S(.05,abs(length(uv-vec2(-0.6,.03))-.09));\nn += (1.-S(-.6,uv.x)+S(-.05,uv.y))*S(.05,abs(length(uv-vec2(-0.6,-.04))-.09));\nreturn n;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}