{
    "Shader": {
        "info": {
            "date": "1712136604",
            "description": "Samsa unveils a dance of geometry, where distinct bodies seamlessly merge, creating a fluid-like sculpture in permanent flux. This metamorphosis perpetually evolves, as if on a quest to discover its ultimate and absolute form.",
            "flags": 64,
            "hasliked": 0,
            "id": "4XBSRK",
            "likes": 28,
            "name": "SAMSA - Fragment IV",
            "published": 3,
            "tags": [
                "raymarching",
                "reflection",
                "refraction",
                "glass",
                "normal",
                "morph",
                "fresnel",
                "bool",
                "cineshader",
                "samsa"
            ],
            "usePreview": 1,
            "username": "Kris_Katur",
            "viewed": 1428
        },
        "renderpass": [
            {
                "code": "/* \"Samsa - Fragment IV\"\n    2024\n    by KΛTUR\n    License - Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Unported License.\n\n    \n    Fragment I   - https://www.shadertoy.com/view/MflGDM\n    Fragment II  - https://www.shadertoy.com/view/XX2SRR\n    Fragment III - https://www.shadertoy.com/view/XX2SWR\n    Fragment IV  - https://www.shadertoy.com/view/4XBSRK\n    \n    https://lichterloh.tv/portfolio/samsa/\n    \n//========================================================//\n\n               ∧∨∧∨∧∨∧∨∧∨∧∨∧∨∧○∨∧∧∨∧∨∧∨∧∨∧∨∧∨∧\n               █████¬█████¬██¬¬¬██¬█████¬█████\n               █¬¬¬¬¬██¬¬█¬███¬███¬█¬¬¬¬¬██¬¬█\n               █████¬██■■█¬█¬¬█¬¬█¬█████¬██■■█\n               ¬¬¬¬█¬██¬¬█¬█¬¬¬¬¬█¬¬¬¬¬█¬██¬¬█\n               █████¬██¬¬█¬█¬¬¬¬¬█¬█████¬██¬¬█\n               ∨∧∨∧∨∧∨∧∨∧∨∧∨∧∨●∧∨∨∧∨∧∨∧∨∧∨∧∨∧∨\n\n        An exploration of light and form, continuously\n          adapting on a quest to find equilibrium.\n\n             Motivated by the uncluttered yet\n                 intricate beauty of math.\n\n//========================================================//\n\nAnti Aliasing from https://www.shadertoy.com/view/wtjfRV\nAA 0 = no AA\nAA 1 = with AA\n(GPU intense - Any better solution welcome :)  <3  )      */\n\n#define AA 0\n\nvec3 CamTransform(float t){\n    t *= .1;\n    return vec3(sin(t)*sin(t*.9)*7.,\n                sin(t+sin(t*.6)*5.),\n                cos(t)*-7.);\n}\n\nfloat SDF(vec3 p){\n    \nfloat t = iTime*.2;\n      t += sin(iTime*.5)*.3;\n        \n    // TORUS\n    float tor = 1e9;\n    for(float i=min(t,0.);i<3.;i++){\n        vec3 pt = p;\n        float s = sin(t+i)*.5+1.;\n        pt.x += sin(t*.15+i*1.3)*3.;\n        pt.y += sin(t*.32+i*1.2);\n        pt.z += sin(t*.52+i*1.1)*3.;\n        pt.xz *= Rot(t*.59-i);\n        pt.xy *= Rot(t*.62+i);\n        pt.yz *= Rot(t*.47-i);\n    tor = Smin(tor,Torus(pt,vec2(s,s*.1)),1.5);}   \n    tor += (sin(t+p.x*2.)*cos(t+p.y))*.2-.2; // deformation\n    \n    // SPHERE\n    float sph = 1e9;\n    for(float i=min(t,0.);i<2.;i++){\n        vec3 ps = p;\n        ps.x += sin(t*.33-i*1.5)*2.5;\n        ps.y += sin(t*.41+i)*2.+.5;\n        ps.z += sin(t*.27+i*i)*2.5;\n    sph = Smin(sph,Sphere(ps,sin(t+i)*.4+.6),1.);}\n        \n    // GYROID I\n    float sg = 2.;\n    float gyr = abs(dot(sin(p*sg),cos(p.zxy*sg)))/sg-.2;\n    \n    // GYROID II\n    float gyr2 = abs(dot(sin(p),cos(p.zxy)))-1.;\n    \n    // PLANE\n    vec3  pp = p;\n    pp.y += 2.;\n    float pla = pp.y;\n    \n    // COMPOSITION                  // == Boolsche Operation ==\n        float d = 1e9;\n        gyr = Smax(gyr,tor-.3,.03); // Intersection::Gyroid I AND bigger Tori  \n        d = min(d,gyr);             // Union:::::::::Sdf  OR  Gyroid\n        d = Smin(d,pla,1.);         // Union:::::::::Sdf  OR  Plane\n        d = Smin(d,sph,1.);         // Union:::::::::Sdf  OR  Spheres\n        d = Smax(d,-tor,.1);        // Subtraction:::Sdf  NOT Tori\n  float e = Smax(tor-.2,gyr2,.5);   // Intersection2:Tori AND Gyroid II\n        d = max(d,-e);              // Subtraction:::Sdf  NOT Intersection2\n\n    // DEFORMATION\n    float b = 73.;\n    d += clamp(0.,2.,p.y+1.7) * pow( (sin(t+p.x*p.z*p.y*.5)*.5+.5),8.) *( (asin(sin(p.x*b)) + asin(sin(p.y*b)) +asin(sin(p.z*b)))*0.01);\n    \n    // CAMERA BOUNDING SPHERE\n    d = Smax(d,-Sphere(p-CamTransform(iTime),.3),.5)*.9; // Sphere Subtraction\n    \n    return d;\n}\n\nfloat March(vec3 ro, vec3 rd, float side){\n    float o=0.;\n    for(int i=0;i<MAX_STEPS; i++){\n        vec3 p = ro + rd*o;\n        float dS = SDF(p)*side;\n        o += dS;\n        if(o>MAX_DIST||abs(dS)<SURF_DIST) break;\n    }\n    return o;\n}\n\nvec3 CalcNormal (vec3 p){\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=min(iFrame,0); i<4; i++ ){\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*SDF(p+.001*e);\n    }\n    return normalize(n);\n}\n\nvec4 Color ( in vec2 fragCoord )\n{\n    float t = iTime*.1;\n    \n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 ro = CamTransform(iTime),\n         rd = CastRay(uv, ro, vec3(0), 2.),\n         col = vec3(1);       \n    \n    float d = March(ro, rd, 1.);\n    \n    float IOR = 1.45; // index of refraction\n\n    if(d<MAX_DIST){\n    \n        vec3 p = ro + rd * d; \n        vec3 n = CalcNormal(p); \n        vec3 r = reflect(rd, n);\n        \n// :::: Refraction from https://www.shadertoy.com/view/sllGDN :::: //\n\n        vec3 refOutside = texture(iChannel0, r).rgb;\n        vec3 rdIn = refract(rd, n, 1./IOR);\n        \n        vec3 pEnter = p - n*SURF_DIST*4.;\n        float dIn = March(pEnter, rdIn, -1.);\n        \n        vec3 pExit = pEnter + rdIn * dIn;\n        vec3 nExit = -CalcNormal(pExit); \n        \n        vec3 reflTex = vec3(0);\n        vec3 rdOut = vec3(0);\n        float ab = clamp(0.,.02,p.y+1.);\n        \n        // red\n        rdOut = refract(rdIn, nExit, IOR-ab);\n        if(dot(rdOut, rdOut)==0.) rdOut = reflect(rdIn, nExit);\n        reflTex.r = texture(iChannel0, rdOut).r;\n        \n        // green\n        rdOut = refract(rdIn, nExit, IOR);\n        if(dot(rdOut, rdOut)==0.) rdOut = reflect(rdIn, nExit);\n        reflTex.g = texture(iChannel0, rdOut).g;\n        \n        // blue\n        rdOut = refract(rdIn, nExit, IOR+ab);\n        if(dot(rdOut, rdOut)==0.) rdOut = reflect(rdIn, nExit);\n        reflTex.b = texture(iChannel0, rdOut).b;\n        \n        /*\n        // density of the medium\n        \n        float dens = .1;\n        float optDist = exp(-dIn*dens);\n        \n        reflTex = reflTex*optDist;\n        */\n        \n        float fresnel = pow(1.+dot(rd, n), 5.);\n        \n        col = mix(reflTex, refOutside, fresnel);\n    }\n    \n    col = mix( col, vec3(texture(iChannel0,rd).rgb)*.9, 1.-exp(-pow(.08*d,6.)));//fog\n    col = pow(col, vec3(.4545)); //gamma correction\n\treturn vec4(col, 1);\n}\n\n\n// AA from https://www.shadertoy.com/view/wtjfRV\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = Color(fragCoord);\n#if AA == 1\n    fragColor = vec4(0);\n    float A = 2.,  // Change A to define the level of anti-aliasing (1 to 16) ... higher numbers are REALLY slow!\n          s = 1./A, x, y;\n    for (x=-.5; x<.5; x+=s) for (y=-.5; y<.5; y+=s)\n    fragColor += min ( Color(vec2(x,y)+fragCoord), 1.0);     \n\tfragColor /= A*A;\n#endif\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 37073,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/user-66247455/phillip-glass-glassworks?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/* \"Samsa - Fragment IV\"\n    2024\n    by KΛTUR\n    License - Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Unported License.\n\n    \n    Fragment I   - https://www.shadertoy.com/view/MflGDM\n    Fragment II  - https://www.shadertoy.com/view/XX2SRR\n    Fragment III - https://www.shadertoy.com/view/XX2SWR\n    Fragment IV  - https://www.shadertoy.com/view/4XBSRK\n    \n    https://lichterloh.tv/portfolio/samsa/\n    \n//========================================================//\n\n               ∧∨∧∨∧∨∧∨∧∨∧∨∧∨∧○∨∧∧∨∧∨∧∨∧∨∧∨∧∨∧\n               █████¬█████¬██¬¬¬██¬█████¬█████\n               █¬¬¬¬¬██¬¬█¬███¬███¬█¬¬¬¬¬██¬¬█\n               █████¬██■■█¬█¬¬█¬¬█¬█████¬██■■█\n               ¬¬¬¬█¬██¬¬█¬█¬¬¬¬¬█¬¬¬¬¬█¬██¬¬█\n               █████¬██¬¬█¬█¬¬¬¬¬█¬█████¬██¬¬█\n               ∨∧∨∧∨∧∨∧∨∧∨∧∨∧∨●∧∨∨∧∨∧∨∧∨∧∨∧∨∧∨\n\n        An exploration of light and form, continuously\n          adapting on a quest to find equilibrium.\n\n             Motivated by the uncluttered yet\n                 intricate beauty of math.\n\n//========================================================*/\n\n#define MAX_STEPS 100\n#define MAX_DIST 20.\n#define SURF_DIST .001\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);}\n\n//===================================================================//\n// below by https://iquilezles.org/\n\nfloat Smin( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n    \nfloat Smax( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n\nfloat Sphere(vec3 p,float s){\n    return length(p)-s;\n    }\n\nfloat Torus( vec3 p, vec2 t){\n  vec2 q = vec2(length(p.zx)-t.x,p.y);\n  return length(q)-t.y;\n    }\n\n// above by https://iquilezles.org/\n//===================================================================//\n\nvec3 CastRay(vec2 uv, vec3 p, vec3 a, float z) {\n    vec3 \n        f = normalize(a-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}