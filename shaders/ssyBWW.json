{
    "Shader": {
        "info": {
            "date": "1658167055",
            "description": "this is the deepest NOR network for 4 inputs that exist\nbecause it takes a minimun of 15 NORs to compute\nand no other NOR network with 4 inputs takes more than 15 NORs to compute\nup next ... deepest 5 input NOR function...",
            "flags": 32,
            "hasliked": 0,
            "id": "ssyBWW",
            "likes": 4,
            "name": "deepest NOR 4inputs",
            "published": 3,
            "tags": [
                "binaryfunction"
            ],
            "usePreview": 0,
            "username": "lomateron",
            "viewed": 227
        },
        "renderpass": [
            {
                "code": "#define A(u) texture(iChannel0,(u)/iResolution.xy)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = A(fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define A(u) texture(iChannel0,(u)/iResolution.xy)\n#define pi 3.141592653589793238\nfloat nor(float a, float b)\n{\n    return (+cos(pi*(a*0.+b*0.))\n            +cos(pi*(a*0.+b*1.))\n            +cos(pi*(a*1.+b*0.))\n            +cos(pi*(a*1.+b*1.)))*.25;//change .25 to something else\n}\nvoid mainImage( out vec4 fragColor, in vec2 u )\n{\n    float a = A(u+vec2(-1,-1)).x;\n    float b = A(u+vec2( 0,-1)).x;\n    float c = A(u+vec2(+1,-1)).x;\n    float d = A(u+vec2( 0,-2)).x;\n    float o1 = nor(a,b);  float o0 = o1;\n    float o2 = nor(o1,a); \n    float o3 = nor(o1,b);\n          a  = nor(o2,o3);\n          b  = c;\n          o1 = nor(a,b);\n          o2 = nor(o1,a);\n          o3 = nor(o1,b);\n    float o4 = nor(o2,o3);\n    float o5 = nor(o4,o4);\n    float d2 = nor(d,d);\n          o5 = nor(o5,d2);\n          o4 = nor(o4,o0);\n          o4 = nor(o4,o4);\n          o4 = nor(o4,d);\n    float o  = nor(o4,o5);\n    if(iFrame==0)\n    {\n        //o = fract(cos(dot(u,vec2(1234.1234,4321.4321)))*1234.5678);\n        //o *= float(u.x>100.&&u.x<111.);\n        o = float(u.x==111.5);\n        //o = round(o);\n    }\n    if(iFrame!=0&&int(u.y)!=(iFrame%int(iResolution.y))){o=A(u).x;}\n    fragColor = vec4(o);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}