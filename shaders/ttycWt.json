{
    "Shader": {
        "info": {
            "date": "1611955974",
            "description": "trying to train a SIREN based SDF\nThe LPS head model used as base https://casual-effects.com/data/",
            "flags": 32,
            "hasliked": 0,
            "id": "ttycWt",
            "likes": 11,
            "name": "Neural Head",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 532
        },
        "renderpass": [
            {
                "code": "// Fork of \"NeuroShrek Tracer\" by michael0884. https://shadertoy.com/view/WtyyWd\n// 2021-01-29 21:24:45\n\n//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = texture(iChannel0, fragCoord/iResolution.xy); \n    fragColor = tanh(2.5*col/col.w);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_STEPS 128\n#define MIN_DIST 1e-5\n#define MAX_DIST 8.0\n#define CAM_ANGLE 1e-3\n#define TWO_PI 6.28318530718\n#define PI 3.14159265359\n\n//internal RNG state \nuvec4 s0; \n\n// https://www.pcg-random.org/\nvoid pcg4d(inout uvec4 v)\n{\n\tv = v * 1664525u + 1013904223u;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v = v ^ (v>>16u);\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n}\n\nfloat rand()\n{\n    pcg4d(s0); return float(s0.x)/float(0xffffffffu);\n}\n\nvec2 rand2()\n{\n    pcg4d(s0); return vec2(s0.xy)/float(0xffffffffu);\n}\n\nvec4 rand4()\n{\n    pcg4d(s0); return vec4(s0)/float(0xffffffffu);\n}\n\nvec3 nrand3(float sigma, vec3 mean)\n{\n\tvec4 Z = rand4();\n    return mean + sigma * sqrt(-2.0 * log(Z.xxy)) * \n           vec3(cos(TWO_PI * Z.z),sin(TWO_PI * Z.z),cos(TWO_PI * Z.w));\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n    return mix(dot(p,ax)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\n\nfloat head(vec3 p) {\n    //sdf is undefined outside the unit sphere, uncomment to witness the abominations\n    if (length(p) > 0.5) {\n        return length(p)-0.4;\n    }\n    //neural networks can be really compact... when they want to be\nvec4 f0_0=sin(p.y*vec4(1.88,-.81,-.05,-2.36)+p.z*vec4(6.32,-7.54,8.30,2.29)+p.x*vec4(8.00,-3.88,3.96,-2.00)+vec4(5.08,-8.90,8.31,10.01));\nvec4 f0_1=sin(p.y*vec4(-.04,-.37,-6.79,-1.39)+p.z*vec4(.41,8.56,-.99,.76)+p.x*vec4(.32,3.60,7.42,8.09)+vec4(-11.81,-1.23,-4.85,8.52));\nvec4 f0_2=sin(p.y*vec4(3.37,4.65,1.89,-3.96)+p.z*vec4(-.30,-3.34,4.91,.92)+p.x*vec4(-.60,2.87,2.63,-.10)+vec4(6.00,.25,-1.88,-1.05));\nvec4 f0_3=sin(p.y*vec4(5.63,3.39,2.44,-5.25)+p.z*vec4(-2.16,1.23,.91,-5.30)+p.x*vec4(.02,2.07,2.31,6.52)+vec4(-11.97,-10.67,12.86,11.03));\nvec4 f1_0=sin(mat4(.01,.18,.02,-.24,-.02,-.26,.02,-.07,.01,-.56,-.31,.29,-.27,.34,-1.12,-.25)*f0_0+\n    mat4(.06,-.52,.68,-.44,.04,-.04,-.80,.26,-.13,.09,.10,-.05,.10,-.02,-.13,-.18)*f0_1+\n    mat4(-.12,.51,-1.04,-.29,-.10,.08,.03,.54,-.22,-.09,-.10,.48,-.50,-.55,-.07,-.36)*f0_2+\n    mat4(-.26,.05,-.03,.11,.41,.32,.26,-.05,.04,.88,-.36,-.03,.11,-.04,.00,-.07)*f0_3+\n    vec4(-1.44,4.65,-1.85,-7.09))/1.0+f0_0;\nvec4 f1_1=sin(mat4(-.13,-.35,-.08,.39,-.27,.29,-.03,-.33,.04,.78,-.46,-.08,-.46,.31,.65,.36)*f0_0+\n    mat4(-1.20,.72,-1.36,-.43,.24,.18,-.65,.55,-.08,.26,.22,-.38,-.19,.13,-.14,.09)*f0_1+\n    mat4(.51,.90,-1.08,.01,-.07,-.02,-.11,-.09,-.01,.15,.52,.41,-.14,.79,.77,.06)*f0_2+\n    mat4(-.30,.54,.37,-.20,.44,.99,.53,-.00,-.06,.02,1.25,.12,.07,-.30,-.08,.27)*f0_3+\n    vec4(-2.26,7.29,2.56,-6.35))/1.0+f0_1;\nvec4 f1_2=sin(mat4(.27,-.15,.32,.14,.40,.14,-.01,-.12,.10,.07,.05,-.33,1.00,.25,.36,-.62)*f0_0+\n    mat4(-.25,-.68,-.71,.28,-.09,-.23,.27,-.14,.07,-.10,.12,-.08,-.29,-.06,.32,.14)*f0_1+\n    mat4(.25,.52,.02,-.05,-.42,-.14,.50,.37,.27,-.31,.61,.00,.06,-.28,-.21,-.59)*f0_2+\n    mat4(.05,-.05,.01,.12,.44,.23,.35,.14,-.57,.67,-.42,.11,.08,-.13,-.11,-.02)*f0_3+\n    vec4(-5.91,-6.82,4.07,7.43))/1.0+f0_2;\nvec4 f1_3=sin(mat4(-.28,.09,.28,.24,-.12,-.17,.12,-.40,.12,-.08,-.13,-.02,-1.39,-.55,.46,-.13)*f0_0+\n    mat4(.67,.36,-.20,-.04,.11,.07,-.08,-.22,.09,-.07,.08,-.02,.12,-.06,.24,.40)*f0_1+\n    mat4(-1.09,-.85,.29,-.08,.04,-.49,-.28,.09,.14,.12,.13,.19,-.38,-.15,.15,.18)*f0_2+\n    mat4(-.13,-.18,.08,.27,.33,-.07,-.48,.58,-.33,-.65,-.51,-.07,-.02,-.09,-.00,-.65)*f0_3+\n    vec4(4.36,-1.86,-5.92,6.75))/1.0+f0_3;\nvec4 f2_0=sin(mat4(-.09,-.07,-.51,.25,.47,.30,-.30,.05,1.07,.04,-.18,.55,.05,.17,.17,.02)*f1_0+\n    mat4(-.39,-.05,.47,-.84,.61,.03,-.34,-.33,-.03,.15,-.12,-.04,-.02,.18,.27,.68)*f1_1+\n    mat4(-.36,-.08,.97,-.25,.45,.35,.40,.84,-.16,.09,-.07,.19,-.42,-.74,-.16,-.30)*f1_2+\n    mat4(.31,.06,.02,.92,-.76,.73,.26,-.63,-.38,-.01,1.53,-.31,-.11,-.16,-.00,-1.03)*f1_3+\n    vec4(-4.95,-.21,-2.47,-.85))/1.4+f1_0;\nvec4 f2_1=sin(mat4(.53,-.21,.23,.27,.26,-.38,.41,.24,-.06,-1.12,.86,.06,-.32,.38,.32,.18)*f1_0+\n    mat4(-.14,-1.02,-.38,-.28,.07,-.10,.27,-.06,.09,-.53,.23,.05,.02,-.78,.43,.09)*f1_1+\n    mat4(-.43,.31,-.23,-.25,.04,-1.50,.33,-.01,.29,-1.63,-.22,.23,-.29,.61,-.02,-1.00)*f1_2+\n    mat4(-.08,.74,.03,.12,-.03,-.22,.69,.28,-.61,-.62,-.95,-.56,.12,.80,-.50,.06)*f1_3+\n    vec4(-4.10,6.87,-5.48,6.59))/1.4+f1_1;\nvec4 f2_2=sin(mat4(.24,-.26,-.40,.01,.45,.72,-.21,-.39,.01,.24,.94,.12,.11,.32,-.20,.08)*f1_0+\n    mat4(-.09,.29,-.39,.43,-.15,-.02,.47,-.42,-.08,-.25,.09,-.15,.10,-.11,.38,-.28)*f1_1+\n    mat4(-.22,.26,-.87,.44,-.15,-.39,.22,-.33,.29,-.15,-.10,-.45,-.82,.91,-.80,.47)*f1_2+\n    mat4(.23,-.20,.27,-.35,.17,-.57,-.72,-.08,-.83,.54,.23,.73,.02,.38,-.08,-.25)*f1_3+\n    vec4(3.58,-3.04,5.11,5.56))/1.4+f1_2;\nvec4 f2_3=sin(mat4(.30,.13,.16,.20,.42,.39,.37,.55,.32,.21,-.00,.23,.22,-.38,-.21,.35)*f1_0+\n    mat4(.05,.52,-.81,-.07,.43,.06,-.69,.13,.11,-.12,.04,-.14,.32,.47,.46,.05)*f1_1+\n    mat4(-.04,.14,-.22,-.24,1.01,-.23,1.28,.20,1.11,-.09,.67,-.06,-1.17,.19,-.20,.13)*f1_2+\n    mat4(.34,-.27,.57,.39,.50,-.05,-.21,.09,-.06,-.77,-.44,-.66,.19,-.27,-.60,.72)*f1_3+\n    vec4(-4.60,-2.76,-.76,-2.67))/1.4+f1_3;\nreturn dot(f2_0,vec4(-.07,-.05,-.05,-.06))+\n    dot(f2_1,vec4(.11,-.02,-.04,-.05))+\n    dot(f2_2,vec4(.05,-.09,-.02,.05))+\n    dot(f2_3,vec4(-.06,-.06,.05,.05))+\n    0.077;\n}\n\nvec2 opUnion(vec2 a, vec2 b)\n{\n    return (a.x < b.x)?a:b;\n}\n\nvec2 scene(vec3 p)\n{\n    vec2 plane = vec2(p.z + 0.3, 0);\n    vec2 h = vec2(0.85*head(p), 1);\n    return opUnion(h, plane);\n}\n\nvec3 norm(vec3 p) {\n    mat3 k = mat3(p,p,p)-mat3(0.001);\n    return normalize(scene(p).x - vec3(scene(k[0]).x,scene(k[1]).x,scene(k[2]).x));\n}\n\nfloat trace(inout vec4 ro, vec3 rd)\n{\n    vec2 de = vec2(-1);\n    for(int i = 0; i < MAX_STEPS; i++)\n    {\n        de = scene(ro.xyz); \n        float md = max(CAM_ANGLE*ro.w,MIN_DIST);\n        ro += vec4(rd, 1.0)*(de.x - 2.0*step(de.x, md)*md); \n        if(de.x < md) return de.y;\n        if(ro.w > MAX_DIST) return -1.0;\n    }\n    return de.y;\n}\n\nvec3 pathtrace(vec4 ro, vec3 rd)\n{\n    vec3 outcol = vec3(0.); vec3 matcol = vec3(1.);\n    for(int i = 0; i<3; i++)\n    {\n        float hit = trace(ro, rd);\n        if(hit>=0.0)\n        {\n            vec3 n = norm(ro.xyz); //geometric normal\n           \n            float roughness =(rand()>0.5)?0.5:0.05;\n            if(hit == 0.0)\n            {\n                bool tile =mod(ro.x, 1.0) + mod(ro.y, 1.0) > 1.0;\n                matcol *= tile?vec3(0.780,0.678,0.678):vec3(1.000,1.000,1.000); \n            }\n            else\n            {\n                matcol *= vec3(0.804,0.914,0.996);\n            }\n            vec3 m = normalize(nrand3(roughness, n)); //material normal\n            rd = reflect(rd,m);\n        }\n        else\n        {\n            outcol += matcol*pow(texture(iChannel1, rd.xzy).xyz,vec3(2.0));\n            break;\n        }\n    }\n    return outcol;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //RNG\n    s0 = uvec4(fragCoord, uint(iFrame), uint(fragCoord.x) + uint(fragCoord.y));\n\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    \n    fragCoord += rand2();\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.y;\n\n    vec3 cam = normalize(vec3(1.5,uv));\n    vec3 init = vec3(-1.0,0,-0.1);\n    \n    float yrot = 0.5 - 0.5*mouse.y;\n    float zrot = 3. + 4.0*mouse.x;\n    if (iMouse.z > 0.) {\n        fragColor *= 0.0;\n    }\n    cam = erot(cam, vec3(0,1,0), yrot);\n    cam = erot(cam, vec3(0,0,1), zrot);\n    \n    init = erot(init, vec3(0,1,0), yrot);\n    init = erot(init, vec3(0,0,1), zrot);\n    \n    fragColor += vec4(pathtrace(vec4(init, 0.), cam), 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}