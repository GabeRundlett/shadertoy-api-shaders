{
    "Shader": {
        "info": {
            "date": "1472582613",
            "description": "Code from the usuals. Inspired by Andromeda's classic Nexus 7 demo",
            "flags": 32,
            "hasliked": 0,
            "id": "4lyGRR",
            "likes": 2,
            "name": "OOOOOOOOO",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "squid",
            "viewed": 666
        },
        "renderpass": [
            {
                "code": "#define SHOW_FPS\n\nvec4 squid(vec2 p)\n{\n    p = floor(p*1e2 - vec2(4.,4.+sin(iTime*1.5) ));\n        \n    int y=int(18.-p.y);\n    float m=0., b;\n    if(y==0)m=320.;\n\tif(y==1||y==2||y==6)m=2e3;\n\tif(y==3)m=8180.;\n\tif(y==4||y==9||y==11)m=32765.;\n\tif(y==5)m=61e2;\n\tif(y==7||y==8)m=8180.;\n\tif(y==10)m=31725.;\n\tif(y==12)m=5460.;\n\tif(y==13)m=18529.;\n\tif(y==14)m=18537.;\n\tif(y==15)m=17737.;\n\tif(y==16)m=17929.;\n\tif(y==17)m=18057.;\n\tif(y==18)m=17545.;\n          \n       \n    b = (floor(mod(m / pow(4., p.x), 4.)));   \n    \t\n    return\t(b>2.) ? vec4(0.27,0,0.17,0.9) :\n    \t\t(b>1.) ? vec4(0.15,0,0.1, 0.8) :\n    \t\t(b>0.) ? vec4(0.2 ,0,0.1, 0.7) : vec4(0);\n}\n\n\n#ifdef SHOW_FPS\n//-----------------------------------------------------------------\n// Digit drawing function by P_Malin (https://www.shadertoy.com/view/4sf3RN)\n\nfloat SampleDigit(const in float n, const in vec2 vUV)\n{\t\t\n\tif(vUV.x  < 0.0) return 0.0;\n\tif(vUV.y  < 0.0) return 0.0;\n\tif(vUV.x >= 1.0) return 0.0;\n\tif(vUV.y >= 1.0) return 0.0;\n\t\n\tfloat data = 0.0;\n\t\n\t     if(n < 0.5) data = 7.0 + 5.0*16.0 + 5.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n\telse if(n < 1.5) data = 2.0 + 2.0*16.0 + 2.0*256.0 + 2.0*4096.0 + 2.0*65536.0;\n\telse if(n < 2.5) data = 7.0 + 1.0*16.0 + 7.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n\telse if(n < 3.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n\telse if(n < 4.5) data = 4.0 + 7.0*16.0 + 5.0*256.0 + 1.0*4096.0 + 1.0*65536.0;\n\telse if(n < 5.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 1.0*4096.0 + 7.0*65536.0;\n\telse if(n < 6.5) data = 7.0 + 5.0*16.0 + 7.0*256.0 + 1.0*4096.0 + 7.0*65536.0;\n\telse if(n < 7.5) data = 4.0 + 4.0*16.0 + 4.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n\telse if(n < 8.5) data = 7.0 + 5.0*16.0 + 7.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n\telse if(n < 9.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n\t\n\tvec2 vPixel = floor(vUV * vec2(4.0, 5.0));\n\tfloat fIndex = vPixel.x + (vPixel.y * 4.0);\n\t\n\treturn mod(floor(data / pow(2.0, fIndex)), 2.0);\n}\n\nfloat PrintInt(const in vec2 uv, const in float value )\n{\n\tfloat res = 0.0;\n\tfloat maxDigits = 1.0+ceil(log2(value)/log2(10.0));\n\tfloat digitID = floor(uv.x);\n\tif( digitID>0.0 && digitID<maxDigits )\n\t{\n        float digitVa = mod( floor( value/pow(10.0,maxDigits-1.0-digitID) ), 10.0 );\n        res = SampleDigit( digitVa, vec2(fract(uv.x), uv.y) );\n\t}\n\n\treturn res;\t\n}\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n    \n    vec4 sprites = squid(fragCoord.xy / iResolution.xy \n            * vec2(iResolution.x / iResolution.y, 1.));\n    fragColor = mix(col, vec4(sprites.xyz,1.), sprites.w);\n    #ifdef SHOW_FPS\n    float FPS = PrintInt( (uv-vec2(0.05,0.05))*30.0, iFrameRate );\n    fragColor = mix(fragColor, vec4(0.4,0.,.5,0.), FPS);\n    #endif\n\t//fragColor = (texture(iChannel1, fragCoord.xy / iResolution.xy));\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat2 rot2(float a){\n    float c = cos(a); float s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\nvec3 pos() {\n    float t = iTime*0.7;\n    float xPos = abs(mod(t, 2.0) -1.0) * 12. - 6.;\n    return vec3(xPos, cos(t*.2)*2., -6.+6.*abs(sin(t*5.)));\n}\n\nmat2 r;\nfloat map(vec3 p){\n\n    p -= pos();\n    p.xy *= r;\n    p.yz *= r;\n    float S = length(p)-2.;\n    S = max(S, .6-length(p.xz));\n    S = max(S, .6-length(p.xy));\n    S = max(S, .6-length(p.yz));\n    return S;\n    \n}\n\nvec3 N(in vec3 p)\n{  \n    vec2 e = vec2(-1.,1.)*0.001;   \n\treturn normalize(e.yxx*map(p + e.yxx) + e.xxy*map(p + e.xxy) + \n\t\t\t\t\t e.xyx*map(p + e.xyx) + e.yyy*map(p + e.yyy) );   \n}\n\nfloat G(vec3 uv, float width) {\n\tvec3 c = max(step(abs(uv), vec3(width*.5))*.8,step(fract(uv), vec3(width*1.2))*.2);\n\treturn max(c.x,max(c.y,c.z));\n}\nfloat sphIntersect( in vec3 ro, in vec3 rd, in float r2 )\n{\n\tvec3 oc = ro-pos();\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - r2;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return -1.0;\n\treturn -b - sqrt( h );\n}\n\nfloat intersect(vec3 ro, vec3 rd) {\n\tfloat t = sphIntersect(ro,rd,4.), dt, x; \n    if(t<0.) return -1.;\n\t/*for(int i=0; i<1; i++){\n        vec3 p = ro+rd*t;\n\t\tdt = map(p);\n\t\tif(dt<5e-3) break;\n\t\tt += dt;\n\t}*/\n    return map(ro+rd*t)<5e-3?t:-1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n    \n\tvec3 LA = vec3(0., 0., 0.),ro = LA + vec3(0., 1., -12.),c = vec3(0.),sp;\n    \n    r = rot2(iTime*2.);\n    \n    vec3 f = normalize(LA-ro),\n        rr = normalize(vec3(f.z, 0., -f.x)),\n        u = cross(f, rr),\n        rd = normalize(f + uv.x*rr + uv.y*u);\n        \n\tfloat t = 0.; bool hit_obj = false;\n\tfor(int i=0; i<128; i++){\n        sp = ro+rd*t;\n        if(map(sp) < 5e-3) { hit_obj = true; break; }\n\t\tt += 0.15;\n        float v = intersect(sp, normalize(pos()-sp));\n        if(v<0.) c += vec3(1.,.9,.8)*0.02;\n        if(dot(c,c)>3.) break;\n\t}\n    if(hit_obj && t>0.) {\n        c += vec3(0., 0.1, 0.2)*max(0., dot(N(sp), -rd));\n\t}\n\t\n\tfragColor = c.xyzz;\n\t\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}