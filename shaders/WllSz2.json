{
    "Shader": {
        "info": {
            "date": "1563575059",
            "description": "experimenting with mod() on sdf",
            "flags": 0,
            "hasliked": 0,
            "id": "WllSz2",
            "likes": 4,
            "name": "Mod Experiments",
            "published": 3,
            "tags": [
                "sphere",
                "mod",
                "rotation"
            ],
            "usePreview": 0,
            "username": "Veggiebob",
            "viewed": 409
        },
        "renderpass": [
            {
                "code": "#define MAX_RERAY 5\n#define HIT_THRESHOLD 0.01\n\nstruct Light {\n    vec3 position;\n    vec3 color;\n    float intensity;\n};\nstruct Material {\n    vec3 color;\n    float diffuse;\n    float specular;\n    float reflection;\n    int pi;//portal index\n};\nstruct SDF {\n    Material mat;\n    float d;\n};\nstruct Ray {\n    vec3 end;\n    int steps;\n    float d;\n    SDF sdf;\n};\nstruct Portal {\n\tvec3 start;\n\tvec2 rot;\n    int endPortal;//integer index of the ending portal\n    int filled;//1 if filled, 0 if empty\n    vec3 color;//color tint of portal\n};\n//ree kill the spacing\nconst int numLights = 1;\nconst Light lights[numLights] = Light[](\n    Light(vec3(-1., 1., 1.), vec3(1.), 1.0)\n    //Light(vec3(2., -1., 0.), vec3(1.), 1.0)\n);\n//portal definitions\nconst int numPortals = 2;\nconst Portal portals[numPortals] = Portal[](\n    //vec3 start, vec2 rot, int endPortalIndex, int filled, vec3 color\n\t//Portal(vec3(-1.5, -0.7, 1.), vec2(0., 0.), 1, 1, vec3(0.5, 0.3, 0.)),//orange portal\n    //Portal(vec3(1.5, 1., -1.), vec2(0., 0.), 0, 1, vec3(0., 0.3, 0.5))//blue portal\n    Portal(vec3(-1.5, 0., -1.), vec2(0., 0.), 1, 1, vec3(0.0, 0.8, 0.0)),//green portal\n    Portal(vec3(1.5, 0., -1.), vec2(0., 0.), 0, 1, vec3(0.9, 0.5, 0.5))//pink portal\n);\n//color, diffuse, specular, reflection, portal index\nconst Material def = Material(vec3(1.0, 1.0, 1.0), 0.8, 0.5, 0.0, -1);//default material\nconst Material soft = Material(vec3(1.0), 0.8, 0.0, 0.0, -1);\nconst Material showLight = Material(vec3(0.), 1.0, 1.0, 0.0, -1);//for showing lights\nconst Material object = Material(vec3(1.0, 1.0, 0.5), 0.8, 0.4, 0.0, -1);\nconst Material mirror = Material(vec3(1.0), 0.5, 0.0, 0.5, -1);//mirror\nconst Material portal = Material(vec3(1.), 0.0, 1.5, -1., 0);//portal\n//from https://github.com/hughsk/glsl-hsv2rgb/blob/master/index.glsl\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n//yay (I made this myself)\nvec2 rotate2D (vec2 p, float angle){\n    return vec2(p.x*cos(angle)-p.y*sin(angle), p.y*cos(angle)+p.x*sin(angle));\\\n}\nfloat rand (float r) {\n    return 0.5+0.5*sin(1234.+pow(r, 4.));\n}\nvec3 rand3 (vec3 r) {\n    return vec3(rand(r.x), rand(r.y), rand(r.z));\n}\n//from https://www.shadertoy.com/view/Ml3SR8\nmat3 lookat(vec3 from, vec3 to)\n{\n    vec3 f = normalize(to - from);\n    vec3 _tmpr = normalize(cross(f, vec3(0.0, .999, 0.0)));\n    vec3 u = normalize(cross(_tmpr, f));\n    vec3 r = normalize(cross(u, f));\n    return mat3(r, u, f);\n}\nfloat sq (float x) { return x*x; }\nvec2 sq (vec2 v) { return v*v; }\n//vec2 pow (vec2 v, float p) { return vec2(pow(v.x, p), pow(v.y, p)); }\n//pretty proud of this one\n//maps a 2d texture onto 3d surfaces using the normal and the position of the node\n//not exact but works for all surfaces\nvec2 getTexPos (vec3 p, vec3 n) {\n    //return sqrt(sq(p.xz*n.y) + sq(p.xy*n.z) + sq(p.yz*n.x));\n    return ((p.xz*n.y) + (p.xy*n.z) + (p.yz*n.x));\n}\n//thanks IQ https://iquilezles.org/articles/distfunctions\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n    vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\nfloat sdSphere (vec3 p, float r) {\n    return length(p)-r;\n}\nSDF portalSDF (vec3 p, int PI) {///// portal sdf\n    vec2 pa = p.xy;\n    p.x = pa.y;\n    p.y = pa.x;\n    float sd = sdSphere(p, 0.4);//sdRoundedCylinder(p, 0.2, 0.05, 0.0);\n    Material pp = portal;\n    pp.pi = PI;\n    return SDF(pp, sd);\n}\nSDF lightSDF (vec3 p, vec3 pp) {\n    return SDF(showLight, length(pp-p)-0.1);\n}\nSDF ground (vec3 p, float h) {\n    return SDF(soft, p.y-h);\n}\nSDF ground (vec3 p, float h, float thickness) {\n    float freq = 3.;\n    float displace = sin(p.x*freq)*sin(p.x*freq)*cos(p.z*freq)*cos(p.z*freq)*0.8;\n    return SDF(soft, abs(p.y-h)-thickness*displace);\n}\nSDF sphere (vec3 p, float r) {\n    return SDF(object, length(p)-r);\n}\n//thanks to IQ for the box sdf function\nSDF box (vec3 p, vec3 b) {\n    vec3 d = abs(p) - b;\n\treturn SDF(def, length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0));\n}\nSDF room (vec3 p, vec3 b) {\n    return SDF(soft, -box(p, b).d);\n}\nSDF sdfADD (SDF a, SDF b) {\n    if(a.d<b.d) {\n        return a;\n    } else {\n        return b;\n    }\n}\nSDF sdf (vec3 p) {\n    float angle = atan(p.x, p.z);\n    float d = length(p.xz);\n    float sides = 6.;\n    float pi = 3.14159;\n    float slice = 2.*pi/sides;\n    float i = floor(angle/slice);\n    float mangle = mod(angle, slice);\n    float dist = 1.+cos(iTime);\n    float my = mod(p.y+sin(iTime+i*i), 1.0)-0.5;\n    vec3 np = vec3(cos(mangle)*d, my, sin(mangle)*d);\n    \n    SDF s = \n        sphere(np-dist*vec3(cos(slice/2.), 0., sin(slice/2.)), 0.3);\n    s.mat.color = hsv2rgb(vec3(sin(my*2.+angle), 1., 1.));\n    //show the lights (dev)\n    /*\n    for(int i = 0; i<numLights; i++) {\n        s = sdfADD(s, lightSDF(p, lights[i].position));\n    }\n*/\n    return s;\n}\nRay trace (vec3 o, vec3 r, int reray) {\n    vec3 p = vec3(0.0, 0.0, 0.0);\n    SDF s = SDF(def, 10000.);\n    float t = 0.;\n    int steps = 0;\n    for(int i = 0; i<128; i++) {\n        p = o+r*t;\n        s = sdf(p);\n        t+=s.d*0.5;\n        //curve of light around portals\n        if(s.mat.reflection<0.&&s.d>0.&&reray==0) {\n            vec3 ppos = portals[s.mat.pi].start;\n            vec3 bend = normalize(p-ppos);\n            //interpolate\n            float x = length(p-ppos);\n            \n            float bend_amount = sin(pow(0.5, x*10.-1.651)) * (1.-max(0.0,dot(p-o, p-ppos))) * 0.01;\n            r = normalize(mix(r, bend, bend_amount));\n        }\n\t\t\n        if(s.d<HIT_THRESHOLD){\n            steps = i;\n            break;\n        }\n        if(t>10.0) {\n            steps = i;\n            t = 1000.;\n        \tbreak;\n        }\n    }\n    return Ray(p, steps, t, s);\n}\nconst float E = 0.0001;\nvec3 estimateNormal (vec3 p) {\n    return normalize(vec3(\n        sdf(vec3(p.x+E, p.y, p.z)).d-sdf(vec3(p.x-E, p.y, p.z)).d,\n        sdf(vec3(p.x, p.y+E, p.z)).d-sdf(vec3(p.x, p.y-E, p.z)).d,\n        sdf(vec3(p.x, p.y, p.z+E)).d-sdf(vec3(p.x, p.y, p.z-E)).d\n    ));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    mouse-=0.5;\n    uv.x-=iResolution.x/iResolution.y/2.;\n    uv.y-=0.5;\n    uv*=2.0;\n    float perspective = 0.8;\n    float time = iTime*0.5;\n    vec3 cam = vec3(0., 0., -4.);\n    cam.xz*=0.8;\n    vec3 ray = normalize(vec3(uv.x*perspective, uv.y*perspective, 1.0));\n    cam.zy = rotate2D(cam.zy, mouse.y*5.0);\n    ray.zy = rotate2D(ray.zy, mouse.y*5.0);\n    \n    cam.xz = rotate2D(cam.xz, -mouse.x*10.0);\n    ray.xz = rotate2D(ray.xz, -mouse.x*10.0);\n    vec3 col = vec3(0.);\n    \n    float ambient = 0.3;\n    Material m;\n    Material pm;\n    for(int times = 0; times<MAX_RERAY; times++) {//max reflections or teleportations\n        Ray t = trace(cam, ray, times);\n        m = t.sdf.mat;//the material\n        vec3 norm = estimateNormal(t.end);\n        vec3 tcol = m.color*ambient;\n        vec3 refl = reflect(normalize(ray), norm);\n        //calculate light intensity at the point for each light\n        for(int i = 0; i<numLights; i++) {\n            Light l = lights[i];\n            vec3 toLight = normalize(l.position-t.end);\n            float diffuse = max(0.0, dot(toLight, norm)*m.diffuse);\n            float specular = pow(max(0.0, dot(refl, toLight)), 16.0)*m.specular;\n            \n            float lightAmount = diffuse+specular;//intensity of light. Default is (diffuse+specular)\n            tcol += (1.-ambient)*m.color*l.intensity*l.color*lightAmount;// /float(numLights)\n        }\n        tcol -= float(t.steps)*float(t.steps)*0.00004;//ao\n        float fog = 1.0 / (1.0 + t.d*t.d*0.05);\n        tcol*=fog;\n        if(m.reflection>0.0&&times<MAX_RERAY-1) {\n            ray = refl;\n            //ray = normalize(ray + 0.5*ray*texture(iChannel0, t.end).xyz);//add distortion\n            //ray = normalize(ray + 0.5*ray*rand3(t.end*4.));//add distortion\n            cam = t.end + ray*HIT_THRESHOLD;\n            col += tcol*(1.-m.reflection);\n            /*\n            for(int reach = 0; reach<16; reach++) {\n                SDF s = sdf(cam);\n                if(s.d<=HIT_THRESHOLD*20.) {\n                    cam += ray*0.08;//(HIT_THRESHOLD-s.d)*40.;\n                } else {\n                    break;\n                }\n            }\n\t\t\t*/\n        } else if (m.reflection<0.) {//signifies a portal\n            Portal por = portals[m.pi];//in portal\n            Portal OUT = portals[por.endPortal];//out portal\n            col += tcol*0.0 + 0.4*por.color*pow(1.7-dot(normalize(cam-t.end), norm), 8.);//add portal glow\n            vec3 off = t.end-por.start;//offset from the original portal\n            cam = OUT.start+off;//specify the new starting position after portal\n            float sdd = t.sdf.d;\n            ray = normalize(mix(ray, -norm, 0.0));\n            for(int reach = 0; reach<20; reach++) {//leave the portal region sdf\n                SDF s = sdf(cam);\n                if(s.d<=HIT_THRESHOLD) {\n                    cam += ray*0.2;\n                } else {\n                    break;\n                }\n            }\n        } else {\n            //tcol *= texture(iChannel1, getTexPos(t.end, norm)*0.1).r;//texture everything\n            if(pm.reflection>0.0) {\n            \tcol = col*(1.-pm.reflection) + tcol*(pm.reflection);\n            } else {\n                col += tcol;\n            }\n            break;\n        }\n        pm = m;\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}