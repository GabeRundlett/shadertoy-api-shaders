{
    "Shader": {
        "info": {
            "date": "1520937364",
            "description": "Free isolines for Shane - based on an earlier Voronoi demo",
            "flags": 0,
            "hasliked": 0,
            "id": "Xsyczh",
            "likes": 23,
            "name": "One-Pass Voronoi",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 4694
        },
        "renderpass": [
            {
                "code": "// \"One-Pass Voronoi\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvoid HexVorInit ();\nvec4 HexVor (vec2 p);\nvec3 HsvToRgb (vec3 c);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\n\nfloat tCur;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\n\nvec3 ShowScene (vec2 p)\n{\n  vec4 vc, col4;\n  vec3 col, ltDir, vn;\n  ltDir = normalize (vec3 (0., 1., 0.7));\n  ltDir.xz = Rot2D (ltDir.xz, -0.2 * tCur);\n  HexVorInit ();\n  vc = HexVor (p - 0.2 * tCur);\n  vc.yz *= smoothstep (0.1, 0.15, vc.x);\n  vn = normalize (vec3 (vc.y, 0.6, vc.z));\n  col4 = vec4 (HsvToRgb (vec3 (mod (0.1 * tCur + atan (vn.z, - vn.x) / (2. * pi), 1.), 0.9, 1.)), 0.2);\n  col4 = mix (vec4 (0.3, 0.5, 0.3, 0.5), col4, smoothstep (0.1, 0.2, vc.x));\n  col4 *= 0.6 + 0.4 * mix (SmoothBump (0.25, 0.75, 0.05, mod (12. * vc.x, 1.)),\n     SmoothBump (0.25, 0.75, 0.05, mod (2. * vc.x / (1. - 0.8 * vn.y), 1.)), smoothstep (0.1, 0.2, vc.x));\n  col = col4.rgb * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n     col4.a * pow (max (dot (normalize (ltDir + vn), vn), 0.), 32.);\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  vec3 col;\n  vec2 canvas, uv, p;\n  float pSize;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  tCur += 20.;\n  pSize = canvas.x / 200.;\n  p = pSize * uv;\n  fragColor = vec4 (ShowScene (p), 1.);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec2 gVec[7], hVec[7];\n\nvoid HexVorInit ()\n{\n  vec3 e = vec3 (1., 0., -1.);\n  gVec[0] = e.yy;\n  gVec[1] = e.xy;\n  gVec[2] = e.yx;\n  gVec[3] = e.xz;\n  gVec[4] = e.zy;\n  gVec[5] = e.yz;\n  gVec[6] = e.zx;\n  for (int k = 0; k < 7; k ++) hVec[k] = HexToPix (gVec[k]);\n}\n\nvec4 HexVor (vec2 p)\n{\n  vec4 sd, udm;\n  vec2 ip, fp, d, u;\n  float amp, a;\n  amp = 0.65;\n  ip = PixToHex (p);\n  fp = p - HexToPix (ip);\n  sd = vec4 (4.);\n  udm = vec4 (4.);\n  for (int k = 0; k < 7; k ++) {\n    u = Hashv2v2 (ip + gVec[k]);\n    a = 0.5 * pi * (u.y - 0.5) * tCur;\n    d = hVec[k] + amp * (0.4 + 0.6 * u.x) * vec2 (cos (a), sin (a)) - fp;\n    sd.w = dot (d, d);\n    if (sd.w < sd.x) {\n      sd = sd.wxyw;\n      udm = vec4 (d, u);\n    } else sd = (sd.w < sd.y) ? sd.xwyw : ((sd.w < sd.z) ? sd.xyww : sd);\n  }\n  sd.xyz = sqrt (sd.xyz);\n  return vec4 (SmoothMin (sd.y, sd.z, 0.2) - sd.x, udm.xy, Hashfv2 (udm.zw));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}