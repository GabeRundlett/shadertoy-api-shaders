{
    "Shader": {
        "info": {
            "date": "1459228455",
            "description": "Fork of @redbean's chromakeyer. The compositing is done in LAB color space, which separates lightness from hue. Click LMB to see matte.\n\nDefinitely NOT the best way to pull a key from a green bg, but could be useful for arbitrary hues.",
            "flags": 0,
            "hasliked": 0,
            "id": "4s3SD4",
            "likes": 16,
            "name": "Chroma Key Lab",
            "published": 3,
            "tags": [
                "chromakeyer"
            ],
            "usePreview": 1,
            "username": "musurca",
            "viewed": 3005
        },
        "renderpass": [
            {
                "code": "// CHROMA KEY LAB\n// by @musurca (4/03/2016)\n//\n// Fork of @redbean's chroma keyer (https://www.shadertoy.com/view/4dtXWn). \n//\n// I'm doing the compositing in LAB space, which separates lightness from hue \n// and is more stable. Not the best method to pull a key from a green screen,\n// but may be useful if you want to key out an arbitrary color.\n//\n// UPDATE \n// 4/03 -- added click to show matte, fixed inaccuracy in RGB_to_AB(), \n//           & made it more GLSL-friendly\n// 3/29 -- replaced smoothstep() with cubestep()\n//\n// -------------------------------\n//\n\n// Tune threshold to adjust edge\n#define MIN_THRESHOLD 0.04\n#define MAX_THRESHOLD 0.105\n\n// Key color in sRGB\n#define KEY_COLOR vec3(0.21569, 0.636719, 0.0)\n\n// Use these settings for Britney\n//#define KEY_COLOR vec4(0.21569, 0.54902, 0.0, 1.0)\n//#define MIN_THRESHOLD 0\n//#define MAX_THRESHOLD 0.02\n\n// Convert RGB color to LAB space\n// (well, really just AB space -- we don't need lightness info)\nvec2 RGB_to_AB(vec3 c)\n{\n\tfloat labA, labB;\n\n    vec3 D65 = vec3(0.9505, 1.0, 1.089);\n\n    float rLinear = c.r;\n\tfloat gLinear = c.g;\n\tfloat bLinear = c.b;\n    \n\tfloat r = (rLinear > 0.04045)? pow((rLinear + 0.055)/1.055, 2.2) : (rLinear/12.92) ;\n\tfloat g = (gLinear > 0.04045)? pow((gLinear + 0.055)/1.055, 2.2) : (gLinear/12.92) ;\n\tfloat b = (bLinear > 0.04045)? pow((bLinear + 0.055)/1.055, 2.2) : (bLinear/12.92) ;\n\n    vec3 f = vec3(r*0.4124 + g*0.3576 + b*0.1805,\n                  r*0.2126 + g*0.7152 + b*0.0722,\n                  r*0.0193 + g*0.1192 + b*0.9505);\n\t\n    f = clamp(f, vec3(0.), D65) / D65;\n\n\tf.x = ((f.x > 0.008856)? pow(f.x, (1.0/3.0)) : (7.787*f.x + 16.0/116.0));\n\tf.y = ((f.y > 0.008856)? pow(f.y, (1.0/3.0)) : (7.787*f.y + 16.0/116.0));\n\tf.z = ((f.z > 0.008856)? pow(f.z, (1.0/3.0)) : (7.787*f.z + 16.0/116.0));\n\n\t//labL = 116.0f * fy - 16.0f; // L range: [0, 100]\n\tlabA = 500.0 * (f.x - f.y); // A range: [-86.185,  98.254]\n\tlabB = 200.0 * (f.y - f.z); // B range: [-107.863, 94.482]\n    \n    /* Normalize both to max B range since the A term should be\n       weighted less in the Euclidian distance metric */\n\treturn vec2((labA+86.185) / 202.345, (labB+107.863) / 202.345);\n}\n\n// RGB->grayscale\nfloat RGB_to_Intensity(vec3 p){ return p.x*0.299 + p.y*0.587 + p.z*0.114; } \n\n// Squared Euclidian distance between two AB hues\nfloat sqrdDistAB(vec2 a, vec2 b)\n{\n    vec2 d = vec2(b.x-a.x, b.y-a.y);\n    \n    return d.x*d.x+d.y*d.y;\n}\n\nfloat cubestep(float a, float b, float x)\n{\n    float dist = clamp((x-a) / (b-a), 0.0, 1.0);\n    \n    return pow(dist, 3.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 xy = fragCoord.xy / iResolution.xy;\n    \n    vec4 texColor = texture(iChannel0,xy); // NEAREST filter\n    vec4 bgtexColor = texture(iChannel1,xy);\n    \n    // Convert RGB to AB space (hue only)\n    vec2 texAB = RGB_to_AB(texColor.rgb);\n    \n    // Hue to key out -- hard-coded here\n    vec2 keyAB = RGB_to_AB(KEY_COLOR);\n    \n    // You could also sample it directly from the video, e.g.\n    // vec2 keyAB = RGB_to_AB(texture(iChannel0, vec2(0.0, 1.0)).rgb);\n    \n    float keyDist = sqrdDistAB(keyAB, texAB);\n    texColor.a = cubestep(MIN_THRESHOLD, MAX_THRESHOLD, keyDist);\n    \n    if(iMouse.z > 0.)\n    {\n        // Show matte only\n        fragColor = vec4(vec3(texColor.a), 1.0);\n    } else\n    {\n        // WORK IN PROGRESS -- desaturating fringe to hide key color\n        float desat = RGB_to_Intensity(texColor.rgb);\n        texColor.rgb = mix(texColor.rgb, vec3(desat), 1.0-texColor.a);\n\n        // Premultiply alpha\n        texColor.r *= texColor.a;\n        texColor.g *= texColor.a;\n        texColor.b *= texColor.a;\n\n        //Nuke Merge node over operation.\n        //Foreground + (BackGround * (1-Foreground alpha))\n        fragColor = texColor+(bgtexColor*(1.0-texColor.a));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}