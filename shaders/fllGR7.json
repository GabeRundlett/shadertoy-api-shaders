{
    "Shader": {
        "info": {
            "date": "1630397225",
            "description": "Grafix acid generation",
            "flags": 100,
            "hasliked": 0,
            "id": "fllGR7",
            "likes": 7,
            "name": "Acid tubes",
            "published": 3,
            "tags": [
                "tubes"
            ],
            "usePreview": 1,
            "username": "z0rg",
            "viewed": 1366
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvec3 doBloom(vec2 uv, float blur, float threshold)\n{\n    vec3 col;\n    int cnt = 50;\n    float fcnt = float(cnt);\n    for (int i = 0;i <cnt;++i)\n    {\n        float fi = float(i);\n        float coef = (fi/fcnt);\n        float sz = 1.+pow(coef,2.)*blur;\n        float samplePerTurn = 10.;\n        float an = (fi/(fcnt/samplePerTurn))*PI;\n        vec2 p = uv - vec2(sin(an), cos(an))*(fi/fcnt)*blur*.1;\n        vec3 smple = texture(iChannel0, p).xyz;\n        if (length(smple) > threshold)\n            col += smple;\n    \t\n        \n    }\n    \n    return col/float(cnt);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 cuv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n    \n    vec3 col = texture(iChannel0, uv).xyz;\n    \n    float bloomIntensity = 504./640.;  \n    vec3 bloomSample = doBloom(uv, 200./360., 337./ 640.);\n    bloomSample = pow(bloomSample, vec3(0.9));\n    col = pow(col, vec3(1.)*mix(0.45,1.45,(sat(length(cuv*3.)))));\n    col = col + (bloomSample*bloomIntensity);\n    \n    col = pow(col, vec3(1.9));\n    \n    col *= 1.-sat((length(cuv)-.25)*3.);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 28022,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/grafixmusicuk/acid-generation-1"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define FFT(a) texture(iChannel1, vec2(a, 0.)).x\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\nfloat lenny(vec2 v)\n{\n    return abs(v.x)+abs(v.y);\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\n\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(1000.); \n    for (int i = 0; i < 16; ++i)\n    {\n        float fi = float(i)*.5;\n        vec3 pos = p+vec3(0., sin(fi), cos(fi))*3.;\n        pos.y += sin(iTime+p.x*1.)*.1;\n        pos.xz *= r2d(fi+p.x*.1-fi*5.);\n        pos.z += sin(iTime+p.x*1.+fi);\n        float sz = 0.25*(pow(FFT(float(i)/16.),.1));\n        vec2 shape = vec2(length(pos.zy)-sz, fi);\n        acc = _min(acc, shape);\n    }\n    return acc;\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    float fov = mix(0.5,2., sin(iTime*.25)*.5+.5);\n    return normalize(rd+(r*uv.x+u*uv.y)*fov);\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.01, 0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n            return vec3(res.x, distance(p, ro), res.y);\n        p+= rd*res.x*.25;\n    }\n    return vec3(-1.);\n}\n\n\nvec3 rdr(vec2 uv, vec2 ouv)\n{\n    vec3 col = .25*mix(vec3(0.), mix(vec3(0.145,0.831,0.443), vec3(0.898,0.165,0.275), sat(abs(uv.x))), pow(sat(lenny(uv*1.)),1.))*.75;\n    \n    vec3 ro = vec3(sin(iTime*.5)*5., -1.5+sin(iTime*.25), cos(iTime)*5.);\n    vec3 ta = vec3(0., 0., 0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    vec3 res = trace(ro, rd, 256);\n    \n    if (res.y > 0.)\n    {\n        vec3 p = ro + rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = 2.*sat(-.3*sin(res.z*10.+iTime*5.)+sin(10.*p.x+res.z+iTime*(res.z+2.)*20.+15.*pow(FFT(res.z/16.),.5)))*(n*.5+.5);\n        vec3 refl = reflect(rd, n);\n        col += texture(iChannel0, refl).xyz*(1.-sat(-dot(rd, n)))*(n*.5+.5);\n    }\n    else\n        col += .3*mix(vec3(0.), vec3(0.914,0.537,0.184), 1.-pow(sat(lenny(uv)),1.));\n    col += .25*mix(vec3(0.), vec3(0.914,0.537,0.184), 1.-pow(sat(lenny(uv)),1.));\n    \n    col = mix(col, texture(iChannel2, ouv).xyz, 0.5);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n\n    vec3 col = rdr(uv*2.*r2d(sin(iTime*.5+uv.x*2.)*.5), fragCoord/iResolution.xy);\n\n    col *= pow(FFT(uv.x),.25)*.25+.75;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}