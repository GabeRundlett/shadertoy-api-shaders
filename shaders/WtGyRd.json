{
    "Shader": {
        "info": {
            "date": "1611523772",
            "description": "A 3D fractal based on my [url=https://www.shadertoy.com/view/wtKcRc]\"Fractal tile mosaic 2.\"[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "WtGyRd",
            "likes": 5,
            "name": "Crystal tunnel",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "fractal",
                "recursion"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 343
        },
        "renderpass": [
            {
                "code": "//this is based on https://www.shadertoy.com/view/4tcGDr\n\n#define rot(spin) mat2(cos(spin),sin(spin),-sin(spin),cos(spin))\n#define multiplier 9.0\n#define iterations 2\n\nconst int MAX_MARCHING_STEPS = 1000;\nconst float MIN_DIST = 0.0,\nMAX_DIST = 100.0,\nEPSILON = 0.01,\nsize = 1000.0;\n\n//change these parameters to get different tile patterns.\n#define scale 5.5\n#define scale1 2.0\n#define scale2 1.9\n#define scale3 4.0\n#define ITERATIONS 3\n\n\n/**\n * Signed distance function describing the scene.\n * \n * Absolute value of the return value indicates the distance to the surface.\n * Sign indicates whether the point is inside or outside the surface,\n * negative indicating inside.\n */\n\n \n\nfloat fract1(float a){\n    return (abs(fract(a/2.0)-.5))*2.0;\n}\n\nvec2 fract1(vec2 a){\n    return (abs(fract(a/2.0)-.5))*2.0;\n}\n\nvec3 fract1(vec3 a){\n    return (abs(fract(a/2.0)-.5))*2.0;\n}\n\nvec3 fractal(vec3 uv1){\n    vec3 col,uv;\n    for(int c=0;c<3;c++){\n        uv = uv1;\n        //uv += vec2(iTime/3.0,iTime/8.0)/2.0;\n        for(int i=0;i<ITERATIONS;i++)\n        {\n            uv = (fract1(uv/scale2))*scale1;\n            uv= fract1(uv/(2.0-fract1((uv.x-uv.y)/(8.0)))-(uv/(1.7+(fract1(uv.x+uv.y))))/scale)*scale/scale1+scale1*scale;\n            uv /= scale1+col.yzx/scale;\n        \tuv=uv.yzx;\n        }\n     col[c] = fract(fract(uv.y)+fract(uv.x));\n\t}\n    return col;\n}\n\n\nfloat sceneSDF(vec3 p) {\n    return length(fractal(p/10.0));\n}\n\nvec3 surface_color(vec3 p)\n{\n    return vec3(fractal(p/5.0)+fractal(p.yzx/6.0));\n}\n\n/**\n * Return the shortest distance from the eyepoint to the scene surface along\n * the marching direction. If no part of the surface is found between start and end,\n * return end.\n * \n * eye: the eye point, acting as the origin of the ray\n * marchingDirection: the normalized direction to march in\n * start: the starting distance away from the eye\n * end: the max distance away from the ey to march before giving up\n */\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    float eps = EPSILON;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        if (dist < eps*(1.0+depth*.1)) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        eps *= 1.001;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n            \n\n/**\n * Return the normalized direction to march in from the eye point for a single pixel.\n * \n * fieldOfView: vertical field of view in degrees\n * size: resolution of the output image\n * fragCoord: the x,y coordinate of the pixel in the output image\n */\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nvec3 illumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    //vec3 light1Pos = eye;\n    //vec3 light1Intensity = vec3(0.8);\n    \n    //color += phongContribForLight(k_d, k_s, alpha, p, eye,\n    //                              light1Pos,\n    //                              light1Intensity);   \n    return color;\n}\n\n/**\n * Return a transform matrix that will transform a ray from view space\n * to world coordinates, given the eye point, the camera target, and an up vector.\n *\n * This assumes that the center of the camera is aligned with the negative z axis in\n * view space when calculating the ray marching direction. See rayDirection.\n */\nmat3 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord);\n        viewDir.x+=-.5;\n        /*if (length(iMouse.xy) > 40.0) {\n            viewDir.yz *= rot(-iMouse.y/iResolution.y*3.14-3.14*0.5);\n            viewDir.xz *= rot(iMouse.x/iResolution.x*3.14*2.0-3.14);\n        }*/\n    \n    vec3 eye = vec3(-35.0+sin(iTime/2.0)/2.0,1.0+cos(iTime/2.0)/2.0,iTime*2.0+50.0);\n    \n    mat3 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    \n    vec3 worldDir = -viewToWorld * viewDir;\n    \n    float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON) {\n        // Didn't hit anything\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\treturn;\n    }\n    \n    // The closest point on the surface to the eyepoint along the view ray\n    vec3 p = eye + dist * worldDir;\n    \n    vec3 K_a = surface_color(p);\n    vec3 K_d = K_a;\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 7.0;\n    \n    vec3 color = illumination(K_a, K_d, K_s, shininess, p, eye);\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}