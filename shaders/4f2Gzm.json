{
    "Shader": {
        "info": {
            "date": "1703986066",
            "description": "A simple raymarching shader",
            "flags": 0,
            "hasliked": 0,
            "id": "4f2Gzm",
            "likes": 8,
            "name": "Balloon Party",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "random"
            ],
            "usePreview": 0,
            "username": "me_123",
            "viewed": 204
        },
        "renderpass": [
            {
                "code": "float hash(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat sdf(in vec3 z) {\n    vec3 k =vec3(0, (0.5-hash(floor(z.xz)))*iTime*5., 0);\n    vec3 p = fract(z+k)*2.0-1.0;\n    float m = 0.0;\n    return 0.1*(length(p));//(length(vec2(length(p.xz)-m, p.y))-0.25)*0.5;\n}\nvec3 color(in vec3 p) {\n    vec3 z = sin(p*0.1)*10.;\n    return 0.5+0.5*sin(p);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-iResolution.x*0.5)/min(iResolution.x, iResolution.y);\n    vec3 ro = vec3(\n        cos(iTime*0.1)*10.,\n        1.0+sin(iTime*0.1)*10.,\n        iTime*1.\n    );\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.0+sin(iTime)*0.1));\n    \n    float d = 0.0;\n    int k = 100, i;//int(floor(sin(iTime)*10.))+20;\n    for (i = 0; i < k; i += 1) {\n        float s = sdf(ro+rd*d);\n        if (s < 0.01) break;\n        d += s;\n        if (d > 1000.) break;\n    }\n    fragColor = vec4(color((ro+rd*d)+iTime*10.), 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}