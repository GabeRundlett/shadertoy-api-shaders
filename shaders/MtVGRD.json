{
    "Shader": {
        "info": {
            "date": "1473655579",
            "description": "whooooa man",
            "flags": 0,
            "hasliked": 0,
            "id": "MtVGRD",
            "likes": 9,
            "name": "my name is whirl",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "trippy"
            ],
            "usePreview": 0,
            "username": "seani",
            "viewed": 917
        },
        "renderpass": [
            {
                "code": "//By Sean Irby-2015\n//sean.t.irby@gmail.com\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    //normalize x and y to [-1, 1]\n    vec2 r =  2.0*vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;\n\t\n    \n    //rotate the coordinate according to its distance from origin and time\n    float dist = distance(r, vec2(0, 0));\n\tfloat angle = dist*(iTime/3.0)*sin(iTime/3.0)/(3.0 + 3.0*sin(iTime));\n    mat2 rotationMatrix = mat2(cos(angle), -sin(angle),\n                               sin(angle),  cos(angle));\n    r = r*rotationMatrix;\n    \n    //mirror coordinates/scale them up\n    float scale = 11.0 + 10.0*cos(iTime/5.0);\n    vec2 rScaled = vec2(abs(r.x)*scale, abs(r.y)*scale);\n  \t\n    //truncate to grid, mess with coordinates\n    vec2 rGrid = vec2(mod(rScaled.x - iTime/2.0, 1.0), mod(rScaled.y, 1.0));\n    vec3 col1 = vec3(0.216, 0.471*(1.0-dist)*(1.0 + sin(iTime/2.5)), 0.698);\n\tvec3 col2 = vec3(1.00, 0.329, 0.6*(1.0-dist));\n             \n    //draw diagonal lines in each grid at the defined thickness\n    float thickness = 1.1*dist + dist*sin(iTime/3.0);\n    float line = smoothstep(rGrid.x - thickness, rGrid.x, 1.0 - rGrid.y);\n    line = min(line, 1.0-smoothstep(rGrid.x, rGrid.x + thickness, 1.0 - rGrid.y));\n    \n    //erase past a certain distance\n    if(rScaled.y > ((50.0 + 11.0*sin(iTime*3.0)) - rScaled.x)){\n        line = 0.0;\n    }\n    \n    //blend colors\n    vec3 ret = mix(col1, col2, mix(line, 1.0-line, 1.5 + 0.5*cos(iTime/3.0)));\n\n    fragColor = vec4(ret, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}