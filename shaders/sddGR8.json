{
    "Shader": {
        "info": {
            "date": "1629168683",
            "description": "Use more steps to march deeper into the cube fractal\nOriginal parts:\nhttps://www.shadertoy.com/view/7sdGRr\nhttps://www.shadertoy.com/view/Nst3RH",
            "flags": 32,
            "hasliked": 0,
            "id": "sddGR8",
            "likes": 30,
            "name": "Wireframe Wander Cube",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "wireframe"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 1058
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0,fragCoord/iResolution.xy,0.);\n\n    for(float i = 0.; i < 7.; i+=0.24){\n        fragColor += texture(iChannel0, fragCoord/iResolution.xy, i)/18.;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Fork of \"cube wireframe thingy\" by Tater. https://shadertoy.com/view/sddGR8\n// 2021-08-17 03:45:12\n\n// Fork of \"Lost Wander Cube\" by Tater. https://shadertoy.com/view/Nst3RH\n// 2021-08-17 02:45:45\n\n//Add more steps to destroy your PC and make it look cooler\n#define STEPS 60.0\n\n#define MDIST 100.0\n#define pi 3.1415926535\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define pmod(p, x) (mod(p,x)-0.5*(x))\n\nfloat box(vec3 p, vec3 s){\n    vec3 d = abs(p)-s;\n    return max(d.x,max(d.y,d.z));\n}\nfloat frame(vec3 p, vec3 s, float e){\n    vec2 h = vec2(e,0);\n    float a = box(p,s);\n    float b = box(p,s*1.01-h.xxy);\n    a = max(-b,a);\n    b = box(p,s*1.01-h.xyx);\n    a = max(-b,a);\n    b = box(p,s*1.01-h.yxx);\n    a = max(-b,a);\n    return a;\n}\nfloat timeRemap (float t,float s1, float s2, float c){\n    return 0.5*(s2-s1)*(t-asin(cos(t*pi)/sqrt(c*c+1.0))/pi)+s1*t;  \n}\nvoid mo(inout vec2 p){\n  if(p.y>p.x) p = p.yx;\n}\nvec3 kifs;\nvec2 map(vec3 p){\n    vec3 po2 = p;\n    \n    p.xz*=rot(iTime*0.8);\n    p.xy*=rot(iTime*0.4);\n    vec3 po = p;\n    float t = (iTime+50.0)*0.7;\n    t = timeRemap(t*1.3, 0.0, 2.3, 0.1);\n\n    for(float i = 0.0; i< 9.0; i++){\n        p = abs(p)-2.0*i*kifs;\n        p.xz*=rot(pi/2.0);\n        mo(p.xy);\n        mo(p.zy);\n       // p.x-=sign(p.y)*sin(t);\n       \n    }\n    \n    //Inner Cubes\n    p = pmod(p,2.2);\n    vec2 a = vec2(box(p,vec3(0.5)),1.0);\n    a.x = abs(a.x)-0.2;\n    a.x = abs(a.x)-0.1;\n    vec2 b = vec2(box(p,vec3(0.45)),2.0);\n    \n    a = (a.x<b.x)?a:b;\n    \n    p = po;\n    p.xy*=rot(pi/4.0);\n    \n    //Boundry Cut Cube\n    vec3 cube = vec3(4,4,4)*vec3(1.2+0.5*sin(t),1.2+0.5*cos(t),1.2+0.5*sin(t));\n    a.x = max(box(p,cube),a.x);\n    b.x = max(box(p,cube),b.x);\n   \n    //Outer Frame\n    b= vec2(frame(p,cube+0.15,0.45),3.0);\n    a = (a.x<b.x)?a:b;\n    return a;\n}\nvec3 norm(vec3 p, float s) {\n  vec2 off=vec2(s,0);\n  return normalize(\n   vec3(map(p+off.xyy).x, map(p+off.yxy).x, map(p+off.yyx).x)\n  -vec3(map(p-off.xyy).x, map(p-off.yxy).x, map(p-off.yyx).x));\n}\nvoid render( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0,2,-19);\n    vec3 lk = vec3(0,0,0);\n    vec3 f = normalize(lk-ro);\n    vec3 r = normalize(cross(vec3(0,1,0),f));\n    vec3 rd = f*1.0+uv.x*r+uv.y*cross(f,r);\n    float t = (iTime+50.0)*0.7;\n    t = timeRemap(t*1.3, 0.0, 2.3, 0.1);\n    kifs = abs(vec3(asin(sin(t*0.15)),0.2*asin(sin(t*0.22)),0.3*asin(sin(t*0.38))));\n     float s=1.0;\n    \n    float rayDist,shad;\n    vec3 p = ro;\n    vec2 d;\n    bool hit = false;\n    vec3 al;\n    \n    //Raymarch loop\n    for(float i =0.0; i<STEPS; i++){\n        p = ro+rd*rayDist;\n        d = map(p);\n        if(abs(d.x)<0.01){\n            float edge = 0.04*clamp(800.0/iResolution.x,1.0,2.0);\n            float edgeAmount = length(norm(p, 0.015)-norm(p, edge));\n            \n            //Adjusting line transparency based on steps\n            col += smoothstep(0.0,0.1, edgeAmount)*0.045*(128.0/min(STEPS,200.0));\n            s*=-1.0;\n            d.x = 0.01*s;\n            if(!hit){\n            if(d.y == 1.0)al = vec3(1.000,0.302,0.404);\n            if(d.y == 2.0)al = vec3(0.016,1.000,1.000);\n            if(d.y == 3.0)al = vec3(1.000,0.647,0.325);\n                shad = i/STEPS;\n                hit = true;\n            }\n        }\n        if(rayDist>MDIST) break;\n        rayDist+=d.x*s*0.85;\n       \n    }\n    vec3 wire = col;\n    wire = clamp(wire,0.0,1.0)*al;\n    shad = pow(1.0-shad,2.0);\n    if(hit)col = vec3(shad)*sqrt(al);\n    col = wire;\n    fragColor = vec4(col,1.0);\n}\n#define AA 1.0\nvoid mainImage(out vec4 O,vec2 C){\n    float px=1./AA,i,j;vec4 cl2,cl;\n    if(AA==1.){render(cl,C);O=cl;return;}\n    for(i=0.;i<AA +min(iTime,0.0);i++){for(j=0.;j<AA;j++){\n    vec2 C2 = vec2(C.x+px*i,C.y+px*j);\n    render(cl2,C2);cl+=cl2;\n    }}cl/=AA*AA;O=cl;\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}