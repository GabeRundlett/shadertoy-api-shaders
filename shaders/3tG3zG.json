{
    "Shader": {
        "info": {
            "date": "1579154440",
            "description": "try to use 2D distance field to control movement of particles and display text\nthis simple particles system is based on iapafoto's Interactive Shoal of fish https://www.shadertoy.com/view/ldd3DB\nclick to interact with particles",
            "flags": 32,
            "hasliked": 0,
            "id": "3tG3zG",
            "likes": 29,
            "name": "Particles Text",
            "published": 3,
            "tags": [
                "text",
                "particles",
                "multipass"
            ],
            "usePreview": 0,
            "username": "talon",
            "viewed": 1168
        },
        "renderpass": [
            {
                "code": "vec4 Particle(float i) { return texelFetch(iChannel0, ivec2(int(i),0),0);}\n\nfloat sdParticle(vec2 uv,vec2 center){\n\treturn smoothstep(0.00,0.01,length(uv-center)-radius);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    float dist = 1e5;\n    for(float i=0.0;i<ParticleNum;i++){\n        vec4 info = texelFetch(iChannel0,ivec2(i,0),0);\n        dist = min(sdParticle(uv,info.xy),dist);\n    }\n    // Output to screen\n    fragColor = vec4(dist);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define ParticleNum iResolution.x\n#define dt 0.02\n#define RESIST 0.035\n#define radius 0.006\n#define CHAR_WIDTH 0.75\n\n// here to switch on/off INTERACTIVE MODE\n#define INTERACTIVE\n\nstruct Word{\n    int len;\n    int charsIndex[12];\n};\n\nvec2 hash(float n) { return fract(sin(vec2(n,n*7.))*43458.528); }\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b ){\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdSphere( in vec2 p, float r ){\n    return length(p)-r;\n}\n\nmat2 rotate(float a){\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(s,c,-c,s);\n}\n\nfloat sdCharacter(vec2 uv,int charNum){\n    float dist = 1e5;\n    switch(charNum){\n        case 1:\n            // 'A'\n            uv.x = abs(uv.x);\n            dist = min(dist ,sdLine(uv,vec2(0.0,0.4),vec2(0.3,-0.4)));\n            dist = min(dist ,sdLine(uv,vec2(0.0,0.0),vec2(0.15, 0.0)));\n            break;\n        case 2:\n            // 'B'\n            uv.y = abs(uv.y);\n            \n            uv.x += 0.1;\n            uv.x *= 0.6;\n            dist = min(dist ,abs(sdSphere(uv-vec2(0.0,0.2),0.2)));\n            dist = max(dist ,-sdSphere(uv-vec2(-3.00,0.0),2.95));\n            dist = min(dist ,sdLine(uv,vec2(-0.05,0.4),vec2(-0.05,-0.4)));\n            break;\n        case 3:\n            // 'C'\n            uv.x *= 1.2;\n            dist = min(dist ,abs(sdSphere(uv,0.38)));\n            dist = max(dist ,-sdSphere(uv*vec2(1.0,2.0)-vec2(1.05,0.0),0.85));\n            break;\n        case 4:\n            // 'D'\n            uv.x += 0.1;\n            dist = min(dist ,abs(sdSphere(uv,0.40)));\n            dist = min(dist ,sdLine(uv,vec2(-0.1,0.4),vec2(-0.1,-0.4)));\n            dist = max(dist ,-sdSphere(uv-vec2(-1.9,0.0),1.80));\n            break;\n        case 5:\n            // 'E'\n            uv.y = abs(uv.y);\n            dist = min(dist ,sdLine(uv,vec2(-0.2,0.35),vec2(0.2,0.35)));\n            dist = min(dist ,sdLine(uv,vec2(-0.2,0.0),vec2(0.2,0.0)));\n            dist = min(dist ,sdLine(uv,vec2(-0.2,0.0),vec2(-0.2,0.35)));\n            break;\n        case 6:\n            // 'F'\n            dist = min(dist ,sdLine(uv,vec2(-0.2,0.35),vec2(0.2,0.35)));\n            dist = min(dist ,sdLine(uv,vec2(-0.2,0.0),vec2(0.15,0.0)));\n            dist = min(dist ,sdLine(uv,vec2(-0.2,-0.35),vec2(-0.2,0.35)));\n            break;\n        case 7:\n            // 'G'\n            uv.x *= 1.2;\n            dist = min(dist ,abs(sdSphere(uv,0.38)));\n            dist = max(dist ,-sdSphere(uv*vec2(1.0,2.0)-vec2(1.05,0.0),0.85));\n            dist = min(dist ,sdLine(uv,vec2(0.05,-0.1),vec2(0.35,-0.1)));\n            dist = min(dist ,sdLine(uv,vec2(0.32,-0.1),vec2(0.32,-0.35)));\n            break;\n        case 8:\n            // 'H'\n            uv.x = abs(uv.x);\n            dist = min(dist ,sdLine(uv,vec2(0.2,0.35),vec2(0.2,-0.35)));\n            dist = min(dist ,sdLine(uv,vec2(0.0,0.00),vec2(0.2, 0.00)));\n            break;\n        case 9:\n            // 'I'\n            uv.y = abs(uv.y);\n            dist = min(dist ,sdLine(uv,vec2(0.12,0.35),vec2(-0.12,0.35)));\n            dist = min(dist ,sdLine(uv,vec2(0.00,0.00),vec2( 0.00,0.35)));\n            break;\n        case 10:\n            // 'J'\n            uv.x *= 2.05;\n            uv.x += 0.02;\n            dist = min(dist ,abs(sdSphere(uv,0.38)));\n            dist = max(dist ,-sdSphere(uv-vec2(0.00,1.0),1.25));\n            dist = min(dist ,sdLine(uv,vec2(0.32,0.35),vec2(0.32,-0.2)));\n            break;\n        case 11:\n            // 'K'\n            uv.x -= 0.02;\n            uv.y = abs(uv.y);\n            dist = min(dist ,sdLine(uv,vec2(-0.2,-0.35),vec2(-0.2,0.35)));\n            dist = min(dist ,sdLine(uv,vec2(-0.2, 0.00),vec2( 0.18,0.35)));\n            break;\n        case 12:\n            // 'L'\n            dist = min(dist ,sdLine(uv,vec2(-0.2,-0.35),vec2(-0.2,0.35)));\n            dist = min(dist ,sdLine(uv,vec2(-0.2,-0.35),vec2( 0.2,-0.35)));\n            break;\n        case 13:\n            // 'M'\n            uv.x = abs(uv.x);\n            dist = min(dist ,sdLine(uv,vec2(0.00,-0.25),vec2(0.25,0.35)));\n            dist = min(dist ,sdLine(uv,vec2(0.25,-0.35),vec2(0.25,0.35)));\n            break;\n        case 14:\n            // 'N'\n            dist = min(dist ,sdLine(uv,vec2(-0.25,0.35),vec2(0.25,-0.35)));\n            dist = min(dist ,sdLine(uv,vec2(0.25,-0.35),vec2(0.25,0.35)));\n            dist = min(dist ,sdLine(uv,vec2(-0.25,-0.35),vec2(-0.25,0.35)));\n            break;\n        case 15:\n            // 'O'\n            uv.x *= 1.2;\n            dist = min(dist ,abs(sdSphere(uv,0.38)));\n            break;\n        case 16:\n            // 'P'\n            uv.x += 0.1;\n            uv.x *= 0.6;\n            dist = min(dist ,abs(sdSphere(uv-vec2(0.0,0.2),0.2)));\n            dist = max(dist ,-sdSphere(uv-vec2(-3.00,0.0),2.95));\n            dist = min(dist ,sdLine(uv,vec2(-0.05,0.4),vec2(-0.05,-0.4)));   \n            break;\n        case 17:\n            // 'Q'\n            uv.x *= 1.2;\n            dist = min(dist ,abs(sdSphere(uv,0.38)));\n            dist = min(dist ,sdLine(uv,vec2(0.35,-0.35),vec2(0.10,-0.15)));\n            break;\n        case 18:\n            // 'R'\n            uv.x += 0.1;\n            uv.x *= 0.6;\n            dist = min(dist ,abs(sdSphere(uv-vec2(0.0,0.2),0.2)));\n            dist = max(dist ,-sdSphere(uv-vec2(-3.00,0.0),2.95));\n            dist = min(dist ,sdLine(uv,vec2(-0.05,0.4),vec2(-0.05,-0.4))); \n            dist = min(dist ,sdLine(uv,vec2(0.02,0.0),vec2(0.20,-0.38)));\n            break;\n        case 19:\n            // 'S'\n            vec2 t = uv;\n            float m1 = 1e5;\n            float m2 = 1e5;\n            uv -= vec2(0.0,0.2);\n            m1 = min(m1 ,abs(sdSphere(uv-vec2(0.02,0.0),0.2)));\n            uv *= rotate(2.0);\n            m1 = max(m1 ,-sdSphere(uv*vec2(1.0,0.4)-vec2(0.2,0.0),0.17));        \n            m2 = min(m2 ,abs(sdSphere(t-vec2(-0.02,0.0)-vec2(0.0,-0.2),0.2)));\n            t  *= rotate(2.0);\n            m2 = max(m2 ,-sdSphere(t*vec2(1.0,0.4)-vec2(-0.2,0.0),0.17));\n            dist = min(m1,m2);\n            break;\n        case 20:\n            // 'T'\n            dist = min(dist ,sdLine(uv,vec2(0.25,0.35),vec2(-0.25,0.35)));\n            dist = min(dist ,sdLine(uv,vec2(0.00,-0.35),vec2( 0.00,0.35)));\n            break;\n        case 21:\n            // 'U'\n            uv.x = abs(uv.x);\n            uv.x += 0.08;\n            dist = min(dist ,abs(sdSphere(uv,0.38)));\n            dist = max(dist ,-sdSphere(uv-vec2(0.00,1.),1.25));\n            dist = min(dist ,sdLine(uv,vec2(0.32,0.35),vec2(0.32,-0.2)));\n            break;\n        case 22:\n            // 'V'\n            uv.x = abs(uv.x);\n            dist = min(dist ,sdLine(uv,vec2(0.00,-0.35),vec2(0.3,0.35)));\n            break;\n        case 23:\n            // 'W'\n            uv.x = abs(uv.x);\n            dist = min(dist ,sdLine(uv,vec2(0.0,0.25),vec2(0.15,-0.30)));\n            dist = min(dist ,sdLine(uv,vec2(0.30,0.30),vec2(0.15,-0.30)));\n            break;\n        case 24:\n            // 'X'\n            uv = abs(uv);\n            dist = min(dist ,sdLine(uv,vec2(0.0,0.0),vec2(0.25,0.35)));\n            break;\n        case 25:\n            // 'Y'\n            uv.x = abs(uv.x);\n            dist = min(dist ,sdLine(uv,vec2(0.0,0.05),vec2(0.25,0.35)));\n            dist = min(dist ,sdLine(uv,vec2(0.0,0.05),vec2(0.00,-0.35)));\n            break;\n        case 26:\n            // 'Z'\n            dist = min(dist ,sdLine(uv,vec2(-0.25,0.30),vec2(0.25,0.30)));\n            dist = min(dist ,sdLine(uv,vec2(-0.25,-0.30),vec2(0.25,0.30)));\n            dist = min(dist ,sdLine(uv,vec2(-0.25,-0.30),vec2(0.25,-0.30)));\n            break;\n            \n    }\n    return dist;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec4 Particle(float i) { return texelFetch(iChannel0, ivec2(int(i),0),0);}\n\nfloat map(vec2 uv,Word word){\n    float dist = 1e5;\n    uv *= 3.8;\n    uv.x += CHAR_WIDTH*(float(word.len)-1.0)/2.0;\n    for(int i=0;i<word.len;i++){\n    \tdist = min(dist ,sdCharacter(uv,word.charsIndex[i]));\n        uv.x -= CHAR_WIDTH;\n    }\n    return dist;             \n}\n\nvec2 normal(vec2 uv,Word wd){\n    vec2 p = vec2(1e-4,0.0);\n\treturn normalize(vec2(map(uv,wd)-map(uv-p.xy,wd),\n                          map(uv,wd)-map(uv-p.yx,wd)));\n}\n\nvec2 sdfForce(vec2 p,Word wd){\n\treturn 256.0*normal(p.xy,wd)/(map(p.xy,wd)+100.0);\n}\n\nvoid mainImage( out vec4 Output, in vec2 uv )\n{\n    vec4 res;\n    float id = floor(uv.x);\n    if(iFrame < 5){\n    \t// initialize        \n        float k = iResolution.x/iResolution.y;\n        res = vec4(1.0*hash(id*2.723+8.213)-0.5,0.0,0.0);\n        res.x *= k;\n    }\n    else{\n        float d;\n        vec4 p = Particle(id);\n        vec2 sumF;\n        \n        // define the word to display \n        int charsIndex[12];\n        charsIndex[0] = 19;\n        charsIndex[1] = 8;\n        charsIndex[2] = 1;\n        charsIndex[3] = 4;\n        charsIndex[4] = 5;\n        charsIndex[5] = 18;\n        charsIndex[6] = 20;\n        charsIndex[7] = 15;\n        charsIndex[8] = 25;\n        Word wd = Word(9,charsIndex);\n        \n        /*\n        int talon[12];\n        talon[0] = 20;\n        talon[1] = 1 ;\n        talon[2] = 12;\n        talon[3] = 15;\n        talon[4] = 14;\n        Word td = Word(5,talon);\n\t\t*/\n        \n        // test random force\n        sumF -= (6.0*hash(iTime+id*0.1232+0.3532)-3.0);\n        \n      \t#ifdef INTERACTIVE\n        if(iMouse.z>0.5)\n        {\n            vec2 mousePos = iMouse.xy/iResolution.xy-0.5;\n            mousePos.x *= iResolution.x/iResolution.y;\n            vec2 diff = p.xy-mousePos;\n            float l = length(diff)+0.001;\n            sumF += diff/l/l/l*0.05;\n        }\n        #endif\n        \n        // move according to sdf\n        sumF -= sdfForce(p.xy,wd);\n        \n    \t// Friction    \n        sumF -= p.zw*RESIST/dt;\n        \n        // update position and velocity\n        p.zw += (sumF * dt);\n        p.xy += (p.zw * dt + sumF * dt * dt);\n        res = p;\n    }\n    // x,y : position \n    // z,w : velocity\n    Output = res;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}