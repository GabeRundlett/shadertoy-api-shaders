{
    "Shader": {
        "info": {
            "date": "1417370236",
            "description": "A = Start\nB = End \nCP0 = Control Point 0\nCP1 = Control Point 1\n\nRed curve = quadratic bezier curve using [A, B, CP0]\nGreen curve = quadratic bezier curve using [A, B, CP1]\nBlue curve = cubic bezier curve using [A, B, CP0, CP1]",
            "flags": 0,
            "hasliked": 0,
            "id": "MdjSWt",
            "likes": 15,
            "name": "Quadratic vs Cubic Bezier Curves",
            "published": 3,
            "tags": [
                "bezier",
                "curves"
            ],
            "usePreview": 0,
            "username": "Danguafer",
            "viewed": 777
        },
        "renderpass": [
            {
                "code": "#define time (iTime/1.0)\n#define LINES min(int(time)+1, 64)\n#define STEP 1.0/float(LINES)\n\nvec2 p;\n\nfloat line(vec2 a, vec2 b, int offset) {\n\tvec2 v  = b-a;\n    vec2 p0 = p-a;\n    float mt = mod(time * float(LINES),float(LINES));\n    float t = clamp(mt-float(offset),0.0,1.0);\n    float k = min(length(p0)/length(v),t);\n    t = clamp(mt-float(offset-1),0.0,1.0);\n    return smoothstep((t*4.0)/iResolution.y,0.0,length(p0-k*v));\n}\n\nfloat point(vec2 o) { return smoothstep(10.0/iResolution.y,7.5/iResolution.y,length(p-o)); }\n\nvec2 qbezierinterpolation(vec2 a, vec2 b, vec2 c0, float t) { return mix(mix(a,c0,t),mix(c0,b,t),t); }\nfloat qbezier(vec2 a, vec2 b, vec2 c0) {\n    float bez = 0.0;\n    vec2 p0 = a;\n\n    for (int i = 1; i <= LINES; i++) {\n        vec2 p1 = qbezierinterpolation(a,b,c0,STEP*float(i));\n        bez = mix(bez,1.0,line(p0,p1, i-1));\n        p0 = p1;\n    }\n    \n    return bez;\n}\n\nvec2 cbezierinterpolation(vec2 a, vec2 b, vec2 c0, vec2 c1, float t) {\n    return qbezierinterpolation(mix(a, c0, t), mix(c1, b, t), mix(c0, c1, t), t);\n}\nfloat cbezier(vec2 a, vec2 b, vec2 c0, vec2 c1) {\n    float bez = 0.0;\n    vec2 p0 = a;\n\n    for (int i = 1; i <= LINES; i++) {\n        vec2 p1 = cbezierinterpolation(a,b,c0,c1,STEP*float(i));\n        bez = mix(bez,1.0,line(p0,p1, i-1));\n        p0 = p1;\n    }\n    \n    return bez;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n\n    vec3 color = vec3(0.94);\n    \n    vec2 a = vec2(-0.75, 0.75);\n    vec2 b = vec2(0.75, 0.75);\n    vec2 c0 = vec2(-0.75, -0.75);\n    vec2 c1 = vec2(0.75 , -0.75);\n\n    color = mix(color,vec3(1.0,0.0,0.0),qbezier(a,b,c0));\n    color = mix(color,vec3(0.0,1.0,0.0),qbezier(a,b,c1));\n    color = mix(color,vec3(0.0,0.0,1.0),cbezier(a,b,c0,c1));\n    color = mix(color,vec3(0.0),point(a));\n    color = mix(color,vec3(0.0),point(b));\n    color = mix(color,vec3(0.0),point(c0));\n    color = mix(color,vec3(0.0),point(c1));\n    \n\tfragColor = vec4(color ,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}