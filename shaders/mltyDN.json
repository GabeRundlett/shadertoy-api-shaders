{
    "Shader": {
        "info": {
            "date": "1699827867",
            "description": "Analytic projection of a disk to screen pixels. Disks in world space become ellipses in raster space, and can be analytically determined from the camera and disk geometry. it works well except for gracing angles (div by zero).",
            "flags": 0,
            "hasliked": 0,
            "id": "mltyDN",
            "likes": 37,
            "name": "Disk/Surfel/Splat - projection",
            "published": 3,
            "tags": [
                "3d",
                "projection",
                "analytic",
                "disk"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 709
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org/\n// Copyright © 2023 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Analytic projection of a disk to screen pixels. \n\n// Disks in world space become ellipses when projected to the\n// camera view plane. In fact, these ellipses can be analytically\n// determined from the camera parameters and the disk geometry,\n// such that their exact position, orientation and surface area\n// can be computed. This means that, given a disk and a camera\n// and buffer resolution, there is an analytical formula that \n// provides the amount of pixels covered by a disk in the image.\n// This can be very useful for implementing LOD on oriented point\n// clouds based on their size in screen.\n//\n// This shader implements this formula, and provides too the\n// center and axes of the ellipse.\n//\n// More info: xxx\n// \n// Sphere  projection: https://www.shadertoy.com/view/XdBGzd\n// Disk    projection: https://www.shadertoy.com/view/mltyDN\n// Ellipse projection: https://www.shadertoy.com/view/ctGyRR\n//\n// NOTE - not working at grazing angles when area tends to zero\n//\n// ---------------------------------------------------------------------------------------------\n// Derivation:\n//\n// Ray  : r(t) = t*d  and d = (x,y,-l)\n// Disk : <r-c,n> = 0 and |r-c|²-r² = 0\n// So\n//\n//   <t*d-c,n> = 0 --> t*<d,n>-<c,n> = 0 -->\n//   t = <c,n>/<d,n> --> r = d*<c,n>/<d,n>\n//\n// and\n//\n//   |d*<c,n>/<d,n>-c|²-r²=0 -->\n//   |d|²<c,n>²/<d,n>² - 2<c,d><c,n>/<d,n> + |c|²-r² = 0 -->\n//   |d|²<c,n>² + (|c|²-r²)*<d,n>² - 2<c,d><c,n><d,n> = 0\n//\n// If M=|c|²-r² and N=<c,n> then\n//\n//   M<d,n>² - 2N<c,d><d,n> + |d|²N² = 0\n//\n// So\n//\n//   M*(nx*x+ny*y-nz*l)² - 2N(cx*x+cy*y-l*cz)(nx*x+ny*y-nz*l) + (x²+y²+l²)N² = 0\n//\n// We collect the x², xy, y², x, y and 1 terms\n//\n//  f(x,y) = Ax² + Bxy + Cy² + Dx + Ey + F = 0\n//\n// like so\n//\n//  A =    M*nx² - 2N*cx*nx + N²\n//  C =    M*ny² - 2N*cy*ny + N²\n//  F = l²[M*nz² - 2N*nz*cz + N²]\n//  B = 2 [M*nx*ny - N*(cx*ny+cy*nx)]\n//  D = 2l[M*nx*nz - N*(cx*nz+cz*nx)]\n//  E = 2l[M*ny*nz - N*(cy*nz+cz*ny)]\n//\n// This is an ellipse if B²-4AC<0, otherwise it's a hyperbola\n//\n// Find center of the ellipse by making the gradient zero\n//\n//   ∇f(x,y) = 0\n//\n// so\n//\n//   2Ax + By + D = 0 and 2Cy + Bx + E = 0 -->\n//   center = {x,y} = { 2CD-BE, 2AE-BD } / k0\n//\n// with \n//\n//   k0 = B² - 4AC\n//\n// Find rotation anf offest from canonical ellipse\n//\n//   x²/a² + y²/b² - 1 = 0\n//\n// to get\n//   [(x-2CD+BE)*u - (y-2AE+BD)*v]²/(k0²a²) + \n//   [(x-2CD+BE)*v + (y-2AE+BD)*u]²/(k0²b²) - 1 = 0\n// Match terms again, the solve for (u,v,a,b)\n//  axa = ( u,v)*a = { k2-(A-C) , -B } * √((A+C+k2)*k5) / k0;\n//  axb = (-v,u)*b = {  B , k2-(A-C) } * √((A+C-k2)*k5) / k0;\n// with \n//  k1 = B² + (A-C)²\n//  k2 = √k1\n//  k5 = (AE² + CD² - BDE + F*k0) / (k1-k2*(A-C))\n\nstruct ProjectionResult\n{\n    float area;      // probably all we care about is the area\n    vec2  center;    // but i'm outputing all the information \n    vec2  axisA;     // for debugging and illustration purposes\n    vec2  axisB;\n    // implicit ellipse f(x,y) = Ax² + Bxy + Cy² + Dx + Ey + F\n\tfloat a, b, c, d, e, f; \n};\n\nProjectionResult projectDisk( /* disk center   */ in vec3  disk_cen, \n                              /* disk normal   */ in vec3  disk_nor,\n                              /* disk radius   */ in float disk_rad,\n\t\t\t\t              /* camera matrix */ in mat4  cam,\n\t\t\t\t\t\t\t  /* projection    */ in float fle )\n{\n    // transform to camera space\t\n\tvec3  c = (cam*vec4(disk_cen,1.0)).xyz;\n    vec3  n = (cam*vec4(disk_nor,0.0)).xyz;\n\n    // get implicit f(x,y) = Ax² + Bxy + Cy² + Dx + Ey + F = 0 \n    float M = dot(c,c) - disk_rad*disk_rad;\n    float N = dot(c,n);\n\n    float A =          M*n.x*n.x - 2.0*N*c.x*n.x + N*N;\n    float C =          M*n.y*n.y - 2.0*N*c.y*n.y + N*N;\n    float F = fle*fle*(M*n.z*n.z - 2.0*N*c.z*n.z + N*N);\n    float B = 2.0*    (M*n.x*n.y - N*(c.x*n.y+c.y*n.x));\n    float D = 2.0*fle*(M*n.z*n.x - N*(c.z*n.x+c.x*n.z));\n    float E = 2.0*fle*(M*n.y*n.z - N*(c.y*n.z+c.z*n.y));\n    \n    // get ellipse parameters from implicit\n    float k0 = B*B - 4.0*A*C;\n    float k1 = B*B + (A-C)*(A-C);\n    float k2 = sqrt(k1);\n    float k3 = k1 - k2*(A-C);\n    float k4 = A*E*E + C*D*D - B*D*E + F*k0;\n    float k5 = k4 / k3;\n\n    vec2  cen = vec2( 2.0*C*D-B*E, 2.0*A*E-B*D )/k0;\n    float lea = sqrt( (A+C+k2)*k5 )/k0;\n    float leb = sqrt( (A+C-k2)*k5 )/k0;\n    vec2  axa = vec2( k2-(A-C),-B ) * lea;\n    vec2  axb = vec2(  B,k2-(A-C) ) * leb;\n\n  //float area = 3.141593*sqrt(dot(axa,axa)*dot(axb,axb));\n    float area = 6.283185*lea*leb*k3;\n  //float area = 6.283185*sqrt(-k0)*abs(k4)/(k0*k0);\n\n\treturn ProjectionResult( area, cen, axa, axb, A, B, C, D, E, F );\n}\n\n//-----------------------------------------------------------------\n// Digit drawing function by P_Malin (https://www.shadertoy.com/view/4sf3RN)\n\nfloat SampleDigit(const in float n, const in vec2 vUV)\n{\t\t\n\tif(vUV.x  < 0.0) return 0.0;\n\tif(vUV.y  < 0.0) return 0.0;\n\tif(vUV.x >= 1.0) return 0.0;\n\tif(vUV.y >= 1.0) return 0.0;\n\t\n\tfloat data = 0.0;\n\t\n\t     if(n < 0.5) data = 7.0 + 5.0*16.0 + 5.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n\telse if(n < 1.5) data = 2.0 + 2.0*16.0 + 2.0*256.0 + 2.0*4096.0 + 2.0*65536.0;\n\telse if(n < 2.5) data = 7.0 + 1.0*16.0 + 7.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n\telse if(n < 3.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n\telse if(n < 4.5) data = 4.0 + 7.0*16.0 + 5.0*256.0 + 1.0*4096.0 + 1.0*65536.0;\n\telse if(n < 5.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 1.0*4096.0 + 7.0*65536.0;\n\telse if(n < 6.5) data = 7.0 + 5.0*16.0 + 7.0*256.0 + 1.0*4096.0 + 7.0*65536.0;\n\telse if(n < 7.5) data = 4.0 + 4.0*16.0 + 4.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n\telse if(n < 8.5) data = 7.0 + 5.0*16.0 + 7.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n\telse if(n < 9.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n\t\n\tvec2 vPixel = floor(vUV * vec2(4.0, 5.0));\n\tfloat fIndex = vPixel.x + (vPixel.y * 4.0);\n\t\n\treturn mod(floor(data / pow(2.0, fIndex)), 2.0);\n}\n\nfloat PrintInt(const in vec2 uv, const in float value )\n{\n\tfloat res = 0.0;\n\tfloat maxDigits = 1.0+ceil(log2(value)/log2(10.0));\n\tfloat digitID = floor(uv.x);\n\tif( digitID>0.0 && digitID<maxDigits )\n\t{\n        float digitVa = mod( floor( value/pow(10.0,maxDigits-1.0-digitID) ), 10.0 );\n        res = SampleDigit( digitVa, vec2(fract(uv.x), uv.y) );\n\t}\n\n\treturn res;\t\n}\n\nfloat iDisk( in vec3 ro, in vec3 rd, vec3 c, vec3 n, float r )\n{\n\tvec3  o = ro - c;\n    float t = -dot(n,o)/dot(rd,n);\n    vec3  q = o + rd*t;\n    return (dot(q,q)<r*r) ? t : -1.0;\n}\n\nfloat sdSegment( vec2 p, vec2 a, vec2 b )\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nfloat gridTextureGradBox( in vec2 p, in vec2 ddx, in vec2 ddy )\n{\n    const float N = 10.0;\n    vec2 w = max(abs(ddx), abs(ddy)) + 0.01;\n    vec2 a = p + 0.5*w;\n    vec2 b = p - 0.5*w;           \n    vec2 i = (floor(a)+min(fract(a)*N,1.0)-\n              floor(b)-min(fract(b)*N,1.0))/(N*w);\n    return (1.0-i.x)*(1.0-i.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy) / iResolution.y;\n\t\n\tfloat fov = 1.0;\n\t\n\tfloat an = 12.0 + 0.5*iTime + 10.0*iMouse.x/iResolution.x;\n\tvec3 ro = vec3( 3.0*cos(an), 0.0, 3.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n\tvec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\tvec3 rd = normalize( p.x*uu + p.y*vv + fov*ww );\n\tmat4 cam = mat4( uu.x, uu.y, uu.z, 0.0,\n\t\t\t\t\t vv.x, vv.y, vv.z, 0.0,\n\t\t\t\t\t ww.x, ww.y, ww.z, 0.0,\n\t\t\t\t\t -dot(uu,ro), -dot(vv,ro), -dot(ww,ro), 1.0 );\n\n    const vec4 disc[3] = vec4[3]( vec4(-2.0, 1.0,0.0,1.1),\n                                  vec4( 3.0, 1.5,1.0,1.2),\n                                  vec4( 1.0,-1.0,1.0,1.3) );\n    const vec3 disn[3] = vec3[3]( vec3(-1.0, 1.0, 1.0),\n                                  vec3( 2.0, 1.5,-1.0),\n                                  vec3( 2.0,-2.0, 1.0) );\n\n\tfloat tmin = 10000.0;\n\tvec3  nor = vec3(0.0);\n\tvec3  pos = vec3(0.0);\n\t\n\tvec3 sur = vec3(1.0);\n    for( int i=0; i<3; i++ )\n    {\n        float h = iDisk( ro, rd, disc[i].xyz, disn[i], disc[i].w );\n        if( h>0.0 && h<tmin ) \n        { \n            tmin = h; \n            pos = ro + h*rd;\n            nor = normalize(disn[i]); \n            sur = 0.5 + 0.5*cos(float(i)*2.0+vec3(0.0,2.0,4.0));\n  //          sur *= smoothstep(-0.6,-0.2,sin(20.0*length(pos-disc[i].xyz)));\n        }\n    }\n\n    float h = (-2.0-ro.y)/rd.y;\n\tif( h>0.0 && h<tmin ) \n\t{ \n\t\ttmin = h; \n\t\tpos = ro + h*rd;\n\t\tnor = vec3(0.0,1.0,0.0); \n        sur = vec3(1.0)*gridTextureGradBox( pos.xz, dFdx(pos.xz), dFdy(pos.xz) );\n\t}\n\n\tvec3 col = vec3(0.0);\n\n\tif( tmin<100.0 )\n\t{\n\t    pos = ro + tmin*rd;\n        col = vec3(1.0);\n\t\t\n\t\tvec3 lig = normalize( vec3(2.0,1.4,-1.0) );\n        nor = nor * sign( -dot(nor,rd) );\n\n\t\tfloat ndl = clamp( dot(nor,lig), 0.0, 1.0 );\n\n\t\tfloat sha = 1.0;\n        if( ndl>0.0 )\n        {\n            for( int i=0; i<3; i++ )\n            {\n                if( iDisk( pos+nor*0.001, lig, disc[i].xyz, disn[i], disc[i].w ) > 0.0 )\n                {\n                    sha = 0.0;\n                    break;\n                }\n            }\n        }\n\t\tcol = (0.5+0.5*nor.y)*vec3(0.2,0.3,0.4) + sha*vec3(1.0,0.9,0.8)*ndl + sha*vec3(1.5)*ndl*pow( clamp(dot(normalize(-rd+lig),nor),0.0,1.0), 16.0 );\n\t\tcol *= sur;\n        col *= exp( -0.25*(max(0.0,tmin-3.0)) );\n\t}\n\n\tcol = pow( col, vec3(0.45) );\n\t\n\t//-------------------------------------------------------\n    for( int i=0; i<3; i++ )\n\t{\n        ProjectionResult r = projectDisk( disc[i].xyz, disn[i], disc[i].w, cam, fov );\n        r.area *= iResolution.y*iResolution.y*0.25;\n        if( r.area>0.0 )\n        {\n        \tfloat showMaths = smoothstep( -0.5, 0.5, cos(0.5*6.2831*iTime) );\n            float f = r.a*p.x*p.x + r.b*p.x*p.y + r.c*p.y*p.y + r.d*p.x + r.e*p.y + r.f;\n            vec2  g = 2.0*vec2(r.a,r.c)*p.xy + r.b*p.yx + vec2(r.d,r.e);                   \n            float d = abs(f)/length(g);\n            col = mix( col, vec3(1.0,0.0,0.0), showMaths*(1.0-smoothstep(0.00,0.01, d)));\n            col = mix( col, vec3(1.0,1.0,0.0), showMaths*(1.0-smoothstep(0.00,0.01, sdSegment( p, r.center-r.axisA, r.center+r.axisA )) ));\n            col = mix( col, vec3(1.0,1.0,0.0), showMaths*(1.0-smoothstep(0.00,0.01, sdSegment( p, r.center-r.axisB, r.center+r.axisB )) ));\n            col = mix( col, vec3(1.0,0.0,0.0), showMaths*(1.0-smoothstep(0.03,0.04, length(p-r.center))));\n            vec2 pp  = r.center + 0.5*max( max( r.axisA, -r.axisA ), max( r.axisB, -r.axisB ) );\n            col = mix( col, vec3(1.0), PrintInt( ((p-pp)-vec2(0.0,0.0))/0.07, floor(r.area) ) );\n        }\n    }\n    //-------------------------------------------------------\n\t\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}