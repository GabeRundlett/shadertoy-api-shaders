{
    "Shader": {
        "info": {
            "date": "1476454085",
            "description": "Edge Detection using Fwidth, with a bilateral filter to remove the noise.\nClick the mouse for comparison with only fwidth functions.\nSigmoid function is applied for higher contrast.",
            "flags": 32,
            "hasliked": 0,
            "id": "MlG3WG",
            "likes": 23,
            "name": "Edges with Bilateral Filters",
            "published": 3,
            "tags": [
                "2d",
                "edge",
                "sigmoid",
                "fwidth",
                "bilateral"
            ],
            "usePreview": 1,
            "username": "starea",
            "viewed": 10385
        },
        "renderpass": [
            {
                "code": "/**\n * Edge Detection: 834144373's https://www.shadertoy.com/view/MdGGRt\n * Bilateral Filter: https://www.shadertoy.com/view/4dfGDH\n */\n\n#define SIGMA 10.0\n#define BSIGMA 0.1\n#define MSIZE 15\n\nconst mat4 kernel = mat4(\n0.031225216, 0.033322271, 0.035206333, 0.036826804, 0.038138565, \n0.039104044, 0.039695028, 0.039894000, 0.039695028, 0.039104044, \n0.038138565, 0.036826804, 0.035206333, 0.033322271, 0.031225216, 0.0);\n\nfloat sigmoid(float a, float f) {\n\treturn 1.0 / (1.0 + exp(-f * a));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\tfloat edgeStrength = (iMouse.z > 0.5) ? \n        length(fwidth(texture(iChannel1, uv))) : \n    \tlength(fwidth(texture(iChannel0, uv)));\n    edgeStrength = sigmoid(edgeStrength - 0.2, 15.0); \n    fragColor = vec4(vec3(edgeStrength), 1.0); \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define SIGMA 10.0\n#define BSIGMA 0.1\n#define MSIZE 15\n\nfloat kernel[MSIZE];\n\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\nfloat normpdf3(in vec3 v, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*dot(v,v)/(sigma*sigma))/sigma;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame < 10) {\n        vec3 c = texture(iChannel0, (fragCoord.xy / iResolution.xy)).rgb;\n        //declare stuff\n        const int kSize = (MSIZE-1)/2;\n        kernel[0] = 0.031225216;\n        kernel[1] = 0.033322271;\n        kernel[2] = 0.035206333;\n        kernel[3] = 0.036826804;\n        kernel[4] = 0.038138565;\n        kernel[5] = 0.039104044;\n        kernel[6] = 0.039695028;\n        kernel[7] = 0.039894000;\n        kernel[8] = 0.039695028;\n        kernel[9] = 0.039104044;\n        kernel[10] = 0.038138565;\n        kernel[11] = 0.036826804;\n        kernel[12] = 0.035206333;\n        kernel[13] = 0.033322271;\n        kernel[14] = 0.031225216;\n\n        /*\n        //create the 1-D kernel\n        for (int j = 0; j <= kSize; ++j) {\n            kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), SIGMA);\n        }\n        */\n\n        vec3 final_colour = vec3(0.0);\n        float Z = 0.0;\n\n        vec3 cc;\n        float factor;\n        float bZ = 1.0/normpdf(0.0, BSIGMA);\n        //read out the texels\n        for (int i = -kSize; i <= kSize; ++i)\n        {\n            for (int j = -kSize; j <= kSize; ++j)\n            {\n                cc = texture(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) / iResolution.xy).rgb;\n                factor = normpdf3(cc-c, BSIGMA) * bZ * kernel[kSize+j] * kernel[kSize+i];\n                Z += factor;\n                final_colour += factor*cc;\n\n            }\n        }\n        fragColor = vec4(final_colour/Z, 1.0);\n    } else {\n        fragColor = vec4(texture(iChannel1, (fragCoord.xy / iResolution.xy)).rgb, 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}