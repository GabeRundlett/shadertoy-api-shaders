{
    "Shader": {
        "info": {
            "date": "1675509090",
            "description": "No-approximation for data visualisation. I wanted to see how slow it would get with a realistic count of data points.\nThis version adds the alpha channel to the source-data colour so that the data can be blended with the background.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "dllSWs",
            "likes": 1,
            "name": "True Voronoi for data vis+alpha",
            "published": 3,
            "tags": [
                "voronoi",
                "data",
                "real"
            ],
            "usePreview": 0,
            "username": "grey_shades",
            "viewed": 163
        },
        "renderpass": [
            {
                "code": "// the idea is to visualize up to a low count of data points (~100-200) with a true voronoi rasterizer.\n// the algorithm is very simple and probably slow, but I want to know just how slow is it (that is, is it fast enough)\n\n// generate array with 10x8 = 80 points\n#define N_data_row 8\n#define N_data_col 6\n#define N_data N_data_row * N_data_col\nvec2[N_data] data_locations;\nvec4[N_data] data_colors;\n\n#define MARKER_RADIUS 0.008\n#define DRAW_MARKERS\n\n// use \"distance\" or \"fastdistance\"\n#define DISTANCE_FN distance\n// on a good GPU, it makes nearly no difference, as the hypot() is likely a hardware unit function.\n\nfloat fastdistance( in vec2 pt1, in vec2 pt2 ) \n{\n vec2 a= abs(pt1-pt2);\n float b = a.x+a.y;\n return b;\n}\n\n\nvoid init_pt_locations_2()\n{\n int idx_ptr = 0;\n for (int idx_row=0; idx_row<N_data_row; idx_row++)\n {\n  for (int idx_col=0; idx_col<N_data_col; idx_col++)\n   {\n    float f_row = float((1+idx_row))/float((N_data_row+1));\n    float f_col = float(1+idx_col)/float(N_data_col+1);\n    f_col += 1.0/sqrt(3.0)*f_row - 0.3 + 0.3*f_row*f_row; // tilt the grid to create \"non-uniform, nearly hexagons\" effect.\n    data_locations[idx_ptr] = vec2(f_row,f_col); \n    data_colors[idx_ptr] = vec4(\n        f_row,\n        f_col,\n        0.0+1.1*pow(cos(16.0*(f_row+f_col+0.01*iTime)),6.0), // a delicate time-moving effect to demonstrate that these are not static.\n        // min(1.0,max(-0.3,1.0-2.0*pow(cos(12.0*f_row),2.0))) // alpha. Allow some colour inversion (negative alpha)\n        smoothstep(0.4,0.6,f_row)-0.00 // Alpha. Simpler function to make it look less funky.\n        );\n    idx_ptr++;\n   }\n }\n}\n\nvoid find_color_2( out vec4 color, in vec2 uv)\n{\n    float min_distance = 1000.0;\n    int target_index = 0; \n    for (int pt_idx=0; pt_idx<N_data; pt_idx++)\n        {\n        float this_distance = DISTANCE_FN(uv,data_locations[pt_idx]);\n        if (this_distance<min_distance)\n            {\n            target_index=pt_idx;\n            min_distance=this_distance;\n            }\n        }\n   vec4 data_color = data_colors[target_index];\n   vec4 background_color = texture(iChannel0, vec2(uv.x, uv.y*0.70+0.25));\n   // float ddr = dFdx(background_color.r);\n   float ddx = abs(dFdx(background_color.r));\n   float ddy = abs(dFdy(background_color.r));\n   float dwidth = ddx*ddx+ddy*ddy;\n   vec3 sharper = 112.0*vec3(dwidth,dwidth,dwidth);\n   color = vec4(mix(data_color.rgb,background_color.rgb+sharper,data_color.a),1.0);\n   \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    init_pt_locations_2();\n    \n    // move random item in a random direction to demonstrate that the point locations are not fixed\n    const float item_move_timeslot_length = 1.0;\n    int item_to_move = int(iTime * item_move_timeslot_length) % ( N_data ) ;\n    float amount_to_move = fract(iTime * item_move_timeslot_length);\n    \n    data_locations[item_to_move].x +=0.08* sin(6.28*amount_to_move);\n    data_locations[item_to_move].y +=0.04* sin(2.0*6.28*amount_to_move);\n\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n    // move two elements using time. This is to demonstrate the intraction between cells.\n    data_locations[12].x=0.4*cos(0.3*iTime)+0.5;    \n    data_locations[12].y=0.1*cos(3.0*iTime)+0.5;    \n    data_locations[13].x=0.4*cos(0.35*iTime)+0.5;    \n    data_locations[13].y=0.1*cos(3.1*iTime)+0.5;    \n    \n    \n    // write mouse location to demonstrate that thing is interactive and not precomputed\n    data_locations[15].xy = iMouse.xy/iResolution.xy;\n    \n    \n    // for each pixel, find the colour by doing voronoi test. \n    vec4 col;\n    find_color_2(col, uv);\n    \n    // overlay-draw the source points\n#ifdef DRAW_MARKERS\n    for (int pt_idx=0; pt_idx<N_data; pt_idx++)\n    {\n        float this_distance =  DISTANCE_FN(uv,data_locations[pt_idx]);\n        if (this_distance<MARKER_RADIUS)\n            {\n                float mix_ratio = (MARKER_RADIUS-this_distance)/(MARKER_RADIUS);\n                col = mix(col, 1.0-data_colors[pt_idx],mix_ratio);\n                \n            }\n    }\n#endif\n\n    // Output to screen\n    //float ddx = abs(fwidth(max(max(col.r,col.g),col.b)));\n        \n    fragColor = vec4(col.xyz,1.0);\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}