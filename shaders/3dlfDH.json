{
    "Shader": {
        "info": {
            "date": "1588175885",
            "description": "Looking inside the Mandelbox and Mandalay fractals",
            "flags": 0,
            "hasliked": 0,
            "id": "3dlfDH",
            "likes": 4,
            "name": "Fractal Tomography",
            "published": 3,
            "tags": [
                "mandelbox",
                "mandalay"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 432
        },
        "renderpass": [
            {
                "code": "// \"Fractal Tomography\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n Looking inside the Mandelbox and Mandalay fractals.\n Step-through showing slices overlaid on full view.\n Mouse-x rotates, -y zooms\n*/\n\n#define M_TYPE   0  // = 0/1 for Mandelbox / Mandalay fractals\n\n#define VAR_ZERO min (iFrame, 0)\n\nfloat PrBoxDf (vec3 p, vec3 b);\nvec3 HsvToRgb (vec3 c);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\n\nvec3 ltDir, pFold;\nfloat tCur, dstFar, mScale, bxLim, slPos, slWid;\nint mType;\nconst int itMax = 12;\nbool isTrans;\nconst float pi = 3.14159;\n\nfloat PPFoldD (vec3 p)\n{\n  vec3 s;\n  p.y = max (p.y, p.z);\n  s = vec3 (p.x, max (abs (p.x - pFold.x) - pFold.x, p.y - 4. * pFold.x),\n     max (p.x - 2. * pFold.x - pFold.y, p.y - pFold.z));\n  return Minv3 (s);\n}\n\nvec3 PPFold (vec3 p)\n{\n  return vec3 (PPFoldD (p), PPFoldD (p.yzx), PPFoldD (p.zxy));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec4 p4;\n  float d;\n  p4 = vec4 (p, 1.);\n  for (int j = 0; j < itMax; j ++) {\n    p4.xyz = 2. * clamp (p4.xyz, -1., 1.) - p4.xyz;\n    if (mType == 1) p4.xyz = - sign (p4.xyz) * PPFold (abs (p4.xyz));\n    p4 = mScale * p4 / clamp (dot (p4.xyz, p4.xyz), 0.25, 1.) + vec4 (p, 1.);\n  }\n  d = max (length (p4.xyz) / p4.w, PrBoxDf (p, vec3 (bxLim)));\n  if (! isTrans) d = max (d, abs (p.z - slPos) - slWid);\n  return d;\n}\n\nvec3 ObjTDist (vec3 p)\n{\n  vec4 p4;\n  vec3 pMin;\n  pMin = vec3 (1.);\n  p4 = vec4 (p, 1.);\n  for (int j = 0; j < itMax; j ++) {\n    p4.xyz = 2. * clamp (p4.xyz, -1., 1.) - p4.xyz;\n    if (mType == 1) p4.xyz = - sign (p4.xyz) * PPFold (abs (p4.xyz));\n    pMin = min (pMin, abs (p4.xyz));\n    p4 = mScale * p4 / clamp (dot (p4.xyz, p4.xyz), 0.25, 1.) + vec4 (p, 1.);\n  }\n  return pMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, h, s, sLo, sHi, eps;\n  eps = 0.0005;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    h = ObjDf (ro + s * rd);\n    if (h < eps || s > dstFar) {\n      sHi = s;\n      break;\n    }\n    sLo = s;\n    s += h;\n  }\n  if (h < eps) {\n    for (int j = VAR_ZERO; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      if (ObjDf (ro + s * rd) > eps) sLo = s;\n      else sHi = s;\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, colT, vn, roo;\n  float dstObj, dstObjT;\n  bool isBg;\n  mScale = (mType == 1) ? 3. : 2.5;\n  roo = ro;\n  isTrans = false;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    isBg = false;\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col = HsvToRgb (vec3 (mod (0.2 + 0.15 * Maxv3 (abs (ObjTDist (ro))), 1.), 0.5, 1.)) *\n       (0.3 + 0.7 * max (dot (vn, ltDir), 0.)) +\n       0.1 * pow (max (0., dot (ltDir, reflect (rd, vn))), 16.);\n   } else {\n    isBg = true;\n    col = vec3 (0.3, 0.3, 0.3);\n  }\n  isTrans = true;\n  ro = roo;\n  dstObjT = ObjRay (ro, rd);\n  if (dstObjT < min (dstObj, dstFar)) {\n    ro += dstObjT * rd;\n    vn = ObjNf (ro);\n    colT = HsvToRgb (vec3 (mod (0.2 + 0.15 * Maxv3 (abs (ObjTDist (ro))), 1.), 0.5, 1.)) *\n       (0.3 + 0.7 * max (dot (vn, ltDir), 0.));\n    colT = mix (colT, vec3 (0.6, 0.65, 0.6) * smoothstep (0., 1., Maxv3 (colT)), 0.7);\n    col = mix (col, colT, (isBg ? 0.35 : 0.15));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col[2];\n  vec2 canvas, uv;\n  float el, az, zmFac, tCyc;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  mType = M_TYPE;\n  bxLim = (mType == 1) ? 5. : 2.8;\n  if (mType == 1) pFold = HsvToRgb (vec3 (0.5, 0.2, 1.));\n  dstFar = 80.;\n  az = -0.25 * pi;\n  el = 0.;\n  zmFac = (mType == 1) ? 5.6 : 5.2;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    zmFac += (mType == 1) ? 15. * (mPtr.y + 0.5) : 30. * (mPtr.y + 0.5);\n  }\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -6.6 * bxLim);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  ltDir = vuMat * normalize (vec3 (1., 2., -1.));\n  slWid = 0.05;\n  tCyc = 100.;\n  tCur *= 1.5;\n  for (int k = VAR_ZERO; k <= 1; k ++) {\n    slPos = (bxLim - slWid) * (4. * (0.5 - abs (mod ((float (k) +\n       floor (tCur)), tCyc) / tCyc - 0.5)) - 1.);\n    col[k] = ShowScene (ro, rd);\n  }\n  fragColor = vec4 (mix (col[0], col[1], smoothstep (0.1, 0.9, fract (tCur))), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}