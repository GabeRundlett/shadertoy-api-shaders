{
    "Shader": {
        "info": {
            "date": "1497706432",
            "description": "had this sitting as private for a while, has some bugs",
            "flags": 0,
            "hasliked": 0,
            "id": "MtS3Wy",
            "likes": 0,
            "name": "data center old",
            "published": 3,
            "tags": [
                "3d",
                "old",
                "center",
                "data"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 479
        },
        "renderpass": [
            {
                "code": "//Ethan Alexander Shulman 2017\n#define FOV_SCALE 1.\n#define VIEW_DIST 5000.\n#define REFLECTION_BOUNCES 2\n#define AA 2\n\nconst vec2 wallSize = vec2(2.,2.);\n\n//distance multiplier\n#define pm db *= 1.+(min(0.,db)*10000000.)\n//plane clip\n#define cp(p,s) db *= 1.+length(max(abs(p)-s,0.))*10000000.\n//plane clip position\n#define cc(p,d,c) ba = (p+d*db)-c\n//distance compare\n#define dc lt = float(db<d); lt1 = 1.-lt; d = d*lt1+db*lt\n//normal compare\n#define ns(n) nrm = lt1*nrm+lt*n\nfloat trace(in vec3 rp, in vec3 rd, inout vec3 nrm) {\n    vec2 ba;\n    float lt,lt1;\n    float d;\n    float nb = 2.-rp.y;//floor\n    float db = nb/rd.y;\n    pm;\n    d = db;\n    nrm = vec3(0.,sign(nb),0.);\n    \n    nb = 2.-rp.x;//right wall\n    db = nb/rd.x;\n    cc(rp.yz,rd.yz,vec2(0.,0.));\n    cp(ba,wallSize);\n    pm;\n    dc;\n    ns(vec3(sign(nb),0.,0.));\n   \n    nb = -2.-rp.x;//left wall\n    db = nb/rd.x;\n    cc(rp.yz,rd.yz,vec2(0,0.));\n    cp(ba,wallSize);\n    pm;\n    dc;\n    ns(vec3(sign(nb),0.,0.));\n    \n    nb = 2.-rp.z;//front wall\n    db = nb/rd.z;\n    cc(rp.xy,rd.xy,vec2(0.,0.));\n    cp(ba,wallSize);\n    pm;\n    dc;\n    ns(vec3(0.,0.,sign(nb)));\n    \n    nb = -2.-rp.z;//back wall\n    db = nb/rd.z;\n    cc(rp.xy,rd.xy,vec2(0.,0.));\n    cp(ba,wallSize);\n    pm;\n    dc;\n    ns(vec3(0.,0.,sign(nb)));\n    \n    nb = -2.-rp.y;//roof\n    db = nb/rd.y;\n    cc(rp.xz,rd.xz,vec2(0.,0.));\n    cp(ba,wallSize);\n    pm;\n    dc;\n    ns(vec3(0.,sign(nb),0.));\n    \n    return d;\n}\n\nconst vec3 ne = vec3(0.001,0.,0.);\nfloat engraving(in vec3 rp, in vec3 r) {\n    return length(rp)-max(0., 1.-min(abs(r.x),abs(r.z))*12.)*.04;\n    //return (-2.-r.y)\n}\n#define sky(r)  (texture(iChannel1,r.xz/r.y-iTime*.01).z*texture(iChannel0,r.xz/r.y/44.2314+iTime*.02).z)+.4\n\nvec4 scene(inout vec3 rp, inout vec3 rd) {\n    vec4 c;\n    vec3 nrm;\n    \n \tfloat d = trace(rp,rd,nrm);\n    if (d < VIEW_DIST) {\n        rp += (d-.08)*rd;\n        vec3 srp = rp;\n        rp += .04*rd;\n        for (int i = 0; i < 4; i++) {\n            d = engraving((rp-srp)*nrm,rp);\n            if (d < .04) break;\n        \trp += d*rd;\n        }\n        \n        vec3 s2rp = rp;\n        rp = rp-srp;\n\t\trp *= nrm;\n        srp = s2rp;\n        nrm = normalize(vec3(engraving(rp+ne,srp+ne)-engraving(rp-ne,srp-ne),\n                             engraving(rp+ne.yxz,srp+ne.yxz)-engraving(rp-ne.yxz,srp-ne.yxz),\n                             engraving(rp+ne.yzx,srp+ne.yzx)-engraving(rp-ne.yzx,srp-ne.yzx)));\n      \trp = s2rp;\n        \n        rd = reflect(rd,nrm);\n        \n        c.xyz = vec3(.04)+\n            \tvec3(.8,.9,.4)*max(0., 1.-min(abs(rp.x),abs(rp.z))*32.)*max(0.,cos(iTime*10.+abs(rp.x)+abs(rp.z)));\n        c.w = .3;//reflection amount\n    } else {\n        c = vec4(sky(rd));\n        c.w = 0.;\n    }\n    \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 fout = vec4(0.);\n    float cscale = 1.;\n    #ifdef AA\n    cscale = 1./float(AA*AA*2);\n    for (int ai = -AA*AA; ai < AA*AA; ai++) { \n    #endif\n\tvec2 uv = fragCoord.xy / iResolution.xy - vec2(.5);\n        #ifdef AA\n        float fi = float(ai);\n        uv += vec2(mod(fi,float(AA)),floor(fi/float(AA)))*(.5/iResolution.xy);\n        #endif\n    uv.y *= iResolution.y/iResolution.x;\n    \n    float mX = iMouse.x/iResolution.x*6.3;\n    vec3 rp = vec3(sin(mX)*15.,(iMouse.y/iResolution.y-1.)*30.,cos(mX)*15.);\n    vec3 rd = normalize(-rp);\n    vec3 rr = cross(vec3(0.,1.,0.),rd);\n    rr = rd = normalize(rd*FOV_SCALE + uv.x*rr + uv.y*cross(rr,rd));\n    \n    vec4 c = scene(rp,rd);\n    if (c.w < .01) {\n        #ifdef AA\n        fout += cscale*c;\n        continue;\n        #else\n        fragColor = c;\n        return;\n        #endif\n    }\n    \n    float s = 1.,wb;\n    vec4 cs;\n    for (int i = 0; i < REFLECTION_BOUNCES; i++) {\n        cs = scene(rp,rd);\n        wb = cs.w;\n        c = mix(c,cs,c.w*s);\n        if (wb < .02) break;\n        \n        c.w = wb;\n        s *= .5;\n    }\n    \n    fout += cscale*c;\n    #ifdef AA\n    }\n    #endif\n    fragColor = fout;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}