{
    "Shader": {
        "info": {
            "date": "1499593978",
            "description": "Another rounded Voronoi shader - see the source.",
            "flags": 0,
            "hasliked": 0,
            "id": "lsjBz1",
            "likes": 7,
            "name": "Voronoi Of The Week",
            "published": 3,
            "tags": [
                "voronoi",
                "hexagon",
                "rounding",
                "partition"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 852
        },
        "renderpass": [
            {
                "code": "// \"Voronoi Of The Week\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n Smoothed (rounded) Voronoi partitioning based on random points in the cells of a\n hexagonal lattice. Only 7 distances required - compare with 32 in Shane's latest, 34 in\n iq's second neighbor technique, or 9 for nearest neighbors on the square lattice. \n (More discussion in \"Honeycomb Voronoi\".) Chacun à son goût.\n*/\n\nfloat SmoothMin (float a, float b, float r);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec2 gVec[7], hVec[7];\nfloat tCur;\nconst float pi = 3.14159;\n\n#define SQRT3 1.7320508\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./SQRT3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (SQRT3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat HexEdgeDist (vec2 p)\n{\n  p = abs (p);\n  return (SQRT3/2.) - p.x + 0.5 * min (p.x - SQRT3 * p.y, 0.);\n}\n\nvoid HexVorInit ()\n{\n  vec3 e = vec3 (1., 0., -1.);\n  gVec[0] = e.yy;\n  gVec[1] = e.xy;\n  gVec[2] = e.yx;\n  gVec[3] = e.xz;\n  gVec[4] = e.zy;\n  gVec[5] = e.yz;\n  gVec[6] = e.zx;\n  for (int k = 0; k < 7; k ++) hVec[k] = HexToPix (gVec[k]);\n}\n\nvec4 HexVor (vec2 p)\n{\n  vec4 sd, udm;\n  vec2 ip, fp, d, u;\n  float amp, a;\n  amp = 0.7;\n  ip = PixToHex (p);\n  fp = p - HexToPix (ip);\n  sd = vec4 (4.);\n  udm = vec4 (4.);\n  for (int k = 0; k < 7; k ++) {\n    u = Hashv2v2 (ip + gVec[k]);\n    a = 2. * pi * (u.y - 0.5) * tCur;\n    d = hVec[k] + amp * (0.4 + 0.6 * u.x) * vec2 (cos (a), sin (a)) - fp;\n    sd.w = dot (d, d);\n    if (sd.w < sd.x) {\n      sd = sd.wxyw;\n      udm = vec4 (d, u);\n    } else sd = (sd.w < sd.y) ? sd.xwyw : ((sd.w < sd.z) ? sd.xyww : sd);\n  }\n  sd.xyz = sqrt (sd.xyz);\n  return vec4 (SmoothMin (sd.y, sd.z, 0.3) - sd.x, udm.xy, Hashfv2 (udm.zw));\n}\n\nvec3 ShowScene (vec2 p)\n{\n  vec4 vc;\n  vec3 col, vn, ltDir;\n  vec2 g;\n  ltDir = normalize (vec3 (-1., 0.7, -1.));\n  HexVorInit ();\n  vc = HexVor (p);\n  vn = normalize (vec3 (vc.y, 0.4, vc.z));\n  vc.yz *= smoothstep (0.1, 0.15, vc.x);\n  col = vec3 (1.) * (0.1 * vn.y * vn.y + 0.4 * dot (vn, ltDir)) +\n     0.3 * pow (max (dot (normalize (ltDir + vn), vn), 0.), 64.) +\n     mix (vec3 (0., 0.3, 1.), vec3 (1.),\n     min (Fbm2 (4. * tan (0.5 * vc.yz) + 10. * vc.w + 0.3 * tCur) + 0.1, 1.));\n  g = smoothstep (0.05, 0.1, mod (4. * tan (0.5 * vc.yz), 1.));\n  col = mix (col, vec3 (0.5, 0.5, 0.6) * (0.6 + 0.4 * g.x * g.y), 0.5);\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  vec3 col;\n  vec2 canvas, uv;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  fragColor = vec4 (ShowScene ((canvas.x / 150.) * uv + 0.4 * (tCur + 20.)), 1.);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, cHashA3.xy)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  const vec2 cHashVA2 = vec2 (37.1, 61.7);\n  const vec2 e = vec2 (1., 0.);\n  return fract (sin (vec2 (dot (p + e.yy, cHashVA2),\n     dot (p + e.xy, cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}