{
    "Shader": {
        "info": {
            "date": "1471885048",
            "description": "Experimenting with the sound inputs. Quite a few artifacts as the distance field isn't continuous, but I'm happy enough with it for a first attempt. You can change BANDS, SHADES and C_SCHEME for a different look.",
            "flags": 0,
            "hasliked": 0,
            "id": "4t33WX",
            "likes": 7,
            "name": "3D Spectrum Analyzer",
            "published": 3,
            "tags": [
                "audio"
            ],
            "usePreview": 0,
            "username": "geoff",
            "viewed": 1463
        },
        "renderpass": [
            {
                "code": "//Number of frequency bands\n#define BANDS 30.0\n\n//Number of colours - I think it looks best when equal to BANDS\n#define SHADES 30.0\n\n//Colour Scheme - possible values 1.0, 2.0, 3.0\n#define C_SCHEME 3.0\n\nfloat closeObj = 0.0;\n\nvec2 mapMat(vec3 p){\n    float sam = texture(iChannel0, vec2(floor((p.x + 1.0) * BANDS / 2.0) / BANDS, 0.0)).x;\n    vec2 cylinder = vec2(length(p.yz) - sam, C_SCHEME);\n    return cylinder;\n}\n\nfloat map(vec3 p){\n    return mapMat(p).x;\n}\n\nfloat trace(vec3 ro, vec3 rd){\n    float t = 0.0;\n    float d = 0.0;\n    vec2 c;\n    int inter = 0;\n    for(int i = 0; i < 1000; i++){\n        c = mapMat(ro + rd * t);\n        d = c.x;\n        if(d < 0.0001){\n            inter = 1;\n            break;\n        }\n        t += d;\n        if(t > 30.0){\n            break;\n        }\n    }\n    closeObj = c.y;\n    if(inter == 0){\n        t = -1.0;\n    }\n    return t;\n}\n\nvec3 normal(vec3 p){\n    return normalize(vec3(map(vec3(p.x + 0.0001, p.yz)) - map(vec3(p.x - 0.0001, p.yz)),\n                          map(vec3(p.x, p.y + 0.0001, p.z)) - map(vec3(p.x, p.y - 0.0001, p.z)),\n                \t      map(vec3(p.xy, p.z + 0.0001)) - map(vec3(p.xy, p.z - 0.0001))));\n}\n\nvec3 camPos = vec3(0.0, 0.0, 0.0);\nvec3 lightPos = vec3(0.0, 0.0, 0.0);\n\nvec3 amb(vec3 c, float k){\n    return c * k;\n}\n\nvec3 diff(vec3 c, float k, vec3 p){\n    vec3 n = normal(p);\n    vec3 l = normalize(lightPos - p);\n    return c * k * max(0.0, dot(n, l));\n}\n\nvec3 spec(vec3 c, float k, vec3 p, float a){\n    vec3 n = normal(p);\n    vec3 l = normalize(lightPos - p);\n    vec3 v = normalize(p - camPos);\n    float facing = dot(l, n) > 0.0 ? 1.0 : 0.0;\n    vec3 r = reflect(l, n);\n    return c * k * facing * pow(max(0.0, dot(r, v)), a);\n}\n\nvec3 colInterp(vec3 bcol, vec3 ecol, vec3 inCol){\n    float st = 1.0 / SHADES;\n    float avg = inCol.x * SHADES; \n    float band = ceil(avg) / SHADES;\n    return mix(bcol, ecol, band);\n}\n\nvec3 palette(float id, vec3 inCol){\n    if(id == 1.0){\n        vec3 mcol = vec3(0.95);\n        vec3 bcol = mcol / 4.0;\n        return colInterp(bcol, mcol, inCol);\n    }\n    if(id == 2.0){\n        vec3 mcol = vec3(1.0, 1.0, 0.0);\n        vec3 bcol = vec3(0.0, 0.0, 1.0);\n        return colInterp(bcol, mcol, inCol);\n    }\n    if(id == 3.0){\n        vec3 mcol = vec3(1.0, 0.0, 0.0);\n        vec3 bcol = vec3(0.0, 0.0, 1.0);\n        return colInterp(bcol, mcol, inCol);\n    }\n    return vec3(0.0, 1.0, 0.0);\n}\n\nvec3 colour(vec3 p, float id){\n    vec3 c = palette(id, vec3((p.x + 1.0) / 2.0));\n    return diff(c, 0.75, p) + spec(c, 0.8, p, 8.0);\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    camPos = vec3(0.0 , 0.0, -2.0);\n    lightPos = vec3(sin(iTime * 2.0) * 5.0, 0.0, -15.0);\n    vec3 ro = camPos;\n    vec3 rd = normalize(vec3(uv, 2.5));\n    float d = trace(ro, rd);\n    vec3 c = ro + rd * d;\n    vec3 col = vec3(1.0);\n    //If intersected\n    if(d > 0.0){\n    \tcol = colour(c, closeObj);\n    \tcol *= 1.0 / exp(d * 0.1);\n    }else{\n        col = vec3(0.0);\n    }\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}