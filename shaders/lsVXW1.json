{
    "Shader": {
        "info": {
            "date": "1464204342",
            "description": "Includes knots, linked rings, Moebius strips",
            "flags": 32,
            "hasliked": 0,
            "id": "lsVXW1",
            "likes": 12,
            "name": "Twisted Curves",
            "published": 3,
            "tags": [
                "mobius",
                "ring",
                "knot"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 972
        },
        "renderpass": [
            {
                "code": "// \"Twisted Curves\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n Includes knots, linked rings, Moebius strips\n\n The three sliders (left->right) control the order, twist and connectivity;\n play with them to determine what does what.\n \n See: www.fractalforums.com/new-theories-and-research/\n       not-fractal-but-funny-trefoil-knot-routine/\n*/\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val);\nfloat Fbm2 (vec2 p);\nvec2 Rot2D (vec2 q, float a);\nvec4 Loadv4 (int idVar);\n\nconst float pi = 3.14159;\n\nmat3 vuMat;\nvec3 ltDir;\nfloat dstFar, tCur, cvOrd, cvWrapI, cvWrapF;\n\nfloat ObjDf (vec3 p)\n{\n  vec2 q;\n  float twAng, rAng, s;\n  twAng = (cvWrapI + cvWrapF / cvOrd) * atan (p.z, p.x);\n  q = Rot2D (vec2 (length (p.xz) - 3., p.y), twAng);\n  s = 2. * pi / cvOrd;\n  rAng = s * (floor ((0.5 * pi - atan (q.x, q.y)) / s + 0.5));\n  q = Rot2D (q, - rAng);\n  q.x -= 0.8;\n  return 0.4 * (length (max (abs (q) - vec2 (0.2), 0.)) - 0.1);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 vn;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  vn = normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n  return vn;\n}\n\nvec3 BgCol (vec3 rd)\n{\n  vec2 u;\n  float a;\n  rd = rd * vuMat;\n  a = 0.5 * atan (length (rd.xy), rd.z);\n  rd = normalize (vec3 (rd.xy * tan (a), 1.));\n  u = vec2 (0.1 * tCur + rd.xy / rd.z);\n  return mix (mix (vec3 (0., 0., 0.6), vec3 (1.), 0.7 * Fbm2 (2. * u)),\n     vec3 (0.3, 0.3, 0.6), smoothstep (0.35 * pi, 0.4 * pi, a));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col;\n  float dstObj;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    col = vec3 (0.3, 0.3, 0.6);\n    col *= 0.2 + 0.8 * max (dot (vn, ltDir), 0.) +\n       0.5 * pow (max (0., dot (ltDir, reflect (rd, vn))), 64.);\n    col = mix (col, BgCol (reflect (rd, vn)), 0.5);\n  } else col = vec3 (0.6, 0.8, 0.9);\n  return clamp (col, 0., 1.);\n}\n\nvec3 ShowWg (vec2 uv, vec2 canvas, vec3 col, float cvOrd, float cvWrapI,\n   float cvWrapF )\n{\n  vec4 wgBx[3];\n  vec3 cc;\n  vec2 ut, ust;\n  float vW[3], asp;\n  asp = canvas.x / canvas.y;\n  wgBx[0] = vec4 (0.35 * asp, 0., 0.012 * asp, 0.18);\n  wgBx[1] = vec4 (0.4 * asp, 0., 0.012 * asp, 0.18);\n  wgBx[2] = vec4 (0.45 * asp, 0., 0.012 * asp, 0.18);\n  vW[0] = cvOrd / 10.;\n  vW[1] = cvWrapI / 10.;\n  vW[2] = cvWrapF / 10.;\n  for (int k = 0; k < 3; k ++) {\n    cc = vec3 (0.3, 0.3, 1.);\n    ut = 0.5 * uv - wgBx[k].xy;\n    ust = abs (ut) - wgBx[k].zw * vec2 (0.7, 1.);\n    if (max (ust.x, ust.y) < 0.) {\n      if  (min (abs (ust.x), abs (ust.y)) * canvas.y < 2.) col = vec3 (0.3);\n      else col = (mod (0.5 * ((0.5 * uv.y - wgBx[k].y) / wgBx[k].w - 0.99), 0.1) *\n         canvas.y < 6.) ? vec3 (1., 1., 0.) : vec3 (0.6);\n    }\n    ut.y -= (vW[k] - 0.5) * 2. * wgBx[k].w;\n    ut = abs (ut) * vec2 (1., 1.5);\n    if (max (abs (ut.x), abs (ut.y)) < 0.02 && max (ut.x, ut.y) > 0.008) col = cc;\n    col = mix (col, cc, ShowInt (0.5 * uv -\n       (wgBx[k].xy + wgBx[k].zw) * vec2 (1., -1.) -\n       vec2 (0.0045, -0.06), 0.025 * vec2 (asp, 1.), 1.,\n       clamp (floor (10. * vW[k]), 0., 9.)));\n  }\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat;\n  vec3 ro, rd, col, cvParm;\n  vec2 canvas, uv, uvs, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uvs = uv;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  cvParm = Loadv4 (0).xyz;\n  cvOrd = 10. * cvParm.x;\n  cvWrapI = 10. * cvParm.y;\n  cvWrapF = 10. * cvParm.z;\n  stDat = Loadv4 (1);\n  el = stDat.x;\n  az = stDat.y;\n  dstFar = 50.;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 6.));\n  ro = vuMat * vec3 (0., 0., -30.);\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  col = ShowScene (ro, rd);\n  col = ShowWg (uv, canvas, col, cvOrd, cvWrapI, cvWrapF);\n  uvs *= uvs * uvs;\n  uvs *= uvs * uvs;\n  col *= mix (0.8, 1., pow (1. - 0.5 * length (uvs * uvs), 4.));\n  fragColor = vec4 (col, 1.);\n}\n\nfloat DigSeg (vec2 q)\n{\n  return (1. - smoothstep (0.13, 0.17, abs (q.x))) *\n     (1. - smoothstep (0.5, 0.57, abs (q.y)));\n}\n\nfloat ShowDig (vec2 q, int iv)\n{\n  float d;\n  int k, kk;\n  const vec2 vp = vec2 (0.5, 0.5), vm = vec2 (-0.5, 0.5), vo = vec2 (1., 0.);\n  if (iv < 5) {\n    if (iv == -1) k = 8;\n    else if (iv == 0) k = 119;\n    else if (iv == 1) k = 36;\n    else if (iv == 2) k = 93;\n    else if (iv == 3) k = 109;\n    else k = 46;\n  } else {\n    if (iv == 5) k = 107;\n    else if (iv == 6) k = 122;\n    else if (iv == 7) k = 37;\n    else if (iv == 8) k = 127;\n    else k = 47;\n  }\n  q = (q - 0.5) * vec2 (1.7, 2.3);\n  d = 0.;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx - vo);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy - vp);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy - vm);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy + vm);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy + vp);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx + vo);\n  return d;\n}\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, sgn, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (min (q.x, q.y) >= 0. && max (q.x, q.y) < 1.) {\n    q.x *= mxChar;\n    sgn = sign (val);\n    val = abs (val);\n    nDig = (val > 0.) ? floor (max (log (val) / log (10.), 0.) + 0.001) + 1. : 1.;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (sgn < 0.) {\n      if (idChar == mxChar - nDig - 1.) s = ShowDig (q, -1);\n      else ++ v;\n    }\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 32.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Twisted Curves\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst float pi = 3.14159;\nconst float txRow = 32.;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[3], mPtr, mPtrP, stDat;\n  vec3 cvParm;\n  vec2 iFrag, canvas, ust;\n  float tCur, tCurP, vW, cvOrd, cvWrapI, cvWrapF, asp, el, az;\n  int pxId, wgSel, wgReg, kSel;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 3) discard;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  wgSel = -1;\n  wgReg = -2;\n  asp = canvas.x / canvas.y;\n  if (iFrame <= 5) {\n    cvParm = vec3 (0.3, 0.2, 0.1);\n    mPtrP = mPtr;\n    el = 0.5 * pi;\n    az = 0.;\n    tCurP = tCur;\n  } else {\n    cvParm = Loadv4 (0).xyz;\n    stDat = Loadv4 (1);\n    el = stDat.x;\n    az = stDat.y;\n    tCurP = stDat.z;\n    stDat = Loadv4 (2);\n    mPtrP = vec4 (stDat.xyz, 0.);\n    wgSel = int (stDat.w);\n  }\n  if (mPtr.z > 0.) {\n    wgBx[0] = vec4 (0.35 * asp, 0., 0.012 * asp, 0.18);\n    wgBx[1] = vec4 (0.4 * asp, 0., 0.012 * asp, 0.18);\n    wgBx[2] = vec4 (0.45 * asp, 0., 0.012 * asp, 0.18);\n    for (int k = 0; k < 3; k ++) {\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0.) {\n      az += 0.1 * mPtr.x;\n      el += 0.1 * mPtr.y;\n    } else {\n      az += 0.1 * (tCur - tCurP);\n      el += 0.07 * (tCur - tCurP);\n    }\n  } else {\n    if (wgSel < 3) {\n      for (int k = 0; k < 3; k ++) {\n        if (wgSel == k) {\n          kSel = k;\n          vW = 0.1 * floor (10. * clamp (0.5 +\n             0.5 * (mPtr.y - wgBx[k].y) / wgBx[k].w, 0.01, 0.99));\n          break;\n        }\n      }\n      if      (kSel == 0) cvParm.x = vW;\n      else if (kSel == 1) cvParm.y = vW;\n      else if (kSel == 2) cvParm.z = vW;\n    }\n  }\n  cvOrd = floor (clamp (10. * cvParm.x + 0.5, 1., 10.));\n  cvWrapI = floor (clamp (10. * cvParm.y + 0.5, 0., 9.));\n  cvWrapF = min (floor (clamp (10. * cvParm.z + 0.5, 0., 9.)), cvOrd - 1.);\n  cvParm = 0.1 * vec3 (cvOrd, cvWrapI, cvWrapF);\n  if (pxId == 0) stDat = vec4 (cvParm, 0.);\n  if (pxId == 1) stDat = vec4 (el, az, tCur, 0.);\n  else if (pxId == 2) stDat = vec4 (mPtr.xyz, float (wgSel));\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}