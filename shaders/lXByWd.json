{
    "Shader": {
        "info": {
            "date": "1727877811",
            "description": "Wave equation on hexagonal grid.",
            "flags": 32,
            "hasliked": 0,
            "id": "lXByWd",
            "likes": 2,
            "name": "Hex wave equation",
            "published": 3,
            "tags": [
                "wave",
                "hexagon",
                "equation"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 62
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Wave equation on a hexagonal grid.\n\n// We adopt cube coordinate system on a hexagonal grid\n// from https://www.redblobgames.com/grids/hexagons/,\n// namely a plane\n//     x+y+z=0\n// where hex centers are at all-integer (x,y,z).\n// In particular, storage (Buffer A) is indexed by\n// (x,y), with (rectangular) \"repeat\" wrap rules (torus\n// topology). The offsets of the 6 neighbours are\n// permutations of (-1,0,+1).\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 xy=(2.0*fragCoord-iResolution.xy)/iResolution.y;\n    xy*=exp2(5.0+3.0*cos(0.1*iTime));\n    vec3 hex=xy2hex(xy);\n    ivec3 cell=ivec3(hexround(hex));\n    float f=fetch(iChannel0,cell.xy+ivec2(iResolution.xy)/2).y;\n    vec3 col=pow(vec3(0.5+0.5*tanh(f)),vec3(8,4,1));\n    col=mix(12.92*col,1.055*pow(col,vec3(1.0/2.4))-0.055,step(0.0031308,col)); // sRGB\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Convert from Cartesian coordinates to cube coordinates\n// on a hex grid, see https://www.redblobgames.com/grids/hexagons/\n// for details.\nvec3 xy2hex(vec2 xy)\n{\n    return mat2x3(+sqrt(3.0),0,-sqrt(3.0),-1,2,-1)/3.0*xy;\n}\n\n// Find center of a cell containing the point in cube coordinates,\n// see https://www.shadertoy.com/view/dtySDy (NOTE: this\n// fixes sign error).\nvec3 hexround(vec3 uvw)\n{\n    return round((floor(uvw-uvw.yzx)-floor(uvw.zxy-uvw))/3.0);\n}\n\n// Compute an approximation of laplacian, d^2f/dx^2+d^2f/dy^2, on a hex grid\n//      D C  ^ y\n//     E A B |\n//      F G  ------> x\n// where h is distance between grid points.\n// Returns (d^2f/dx^2+d^2f/dy^2) + h^2/16*(d^4f/dx^4+2*d^4f/dx^2dy^2+d^4f/dy^4) + O(h^4)\nfloat hex_laplacian(float A,float B,float C,float D,float E,float F,float G,float h)\n{\n    return (2.0/3.0*(B+C+D+E+F+G)-4.0*A)/(h*h);\n}\n\n/*\n// Returns k mod n (in [0;n-1] range), for -n<=k<2*n.\nint repeat(int k,int n)\n{\n    return k+n*(((n-1-k)>>31)-(k>>31));\n}\n*/\n\n// Returns k mod n using Euclidean division,\n// see https://www.shadertoy.com/view/lcSXRG\nint repeat(int k,int n)\n{\n    int r=abs(k)%abs(n);\n    if(k<0&&r!=0) r=abs(n)-r;\n    return r;\n}\n\n// Fetch with repeat wrapping, regardless of what\n// the sampler is set up to.\nvec4 fetch(sampler2D s,ivec2 v)\n{\n    ivec2 w=textureSize(s,0);\n    return texelFetch(s,ivec2(repeat(v.x,w.x),repeat(v.y,w.y)),0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// A simple leapfrog (CTCS) scheme for numerically solving\n// wave equation.\n// Stores values at previous/current time steps at .x and .y\n// respectively.\n\nfloat force(ivec2 v)\n{\n    v-=ivec2(iResolution.xy)/2;\n    vec3 h=vec3(v,-v.x-v.y)+0.5*xy2hex(min(iResolution.x,iResolution.y)*sin(1e-3*vec2(5,7)*float(iFrame)));\n    return 0.25*exp(-0.125*dot(h,h))*cos(0.03125*float(iFrame));\n}\n\nvec4 init(ivec2 v)\n{\n    return vec4(0,10.0*force(v),0,0);\n}\n\nvec4 update(ivec2 v)\n{\n    ivec3 e=ivec3(-1,0,+1);\n    float c=0.5,h=1.0,dt=0.875;\n    vec4 A=fetch(iChannel0,v);\n    vec4 B=fetch(iChannel0,v+e.zy);\n    vec4 C=fetch(iChannel0,v+e.yz);\n    vec4 D=fetch(iChannel0,v+e.xz);\n    vec4 E=fetch(iChannel0,v+e.xy);\n    vec4 F=fetch(iChannel0,v+e.yx);\n    vec4 G=fetch(iChannel0,v+e.zx);\n    return vec4(A.y,dt*dt*(c*c*hex_laplacian(A.y,B.y,C.y,D.y,E.y,F.y,G.y,h)+force(v))+2.0*A.y-A.x,0,0);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    fragColor=(iFrame==0?init(ivec2(fragCoord)):update(ivec2(fragCoord)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}