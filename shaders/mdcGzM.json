{
    "Shader": {
        "info": {
            "date": "1677074308",
            "description": "horizontal ",
            "flags": 0,
            "hasliked": 0,
            "id": "mdcGzM",
            "likes": 0,
            "name": "horizontal ",
            "published": 3,
            "tags": [
                "horizontal"
            ],
            "usePreview": 0,
            "username": "tianluo97",
            "viewed": 135
        },
        "renderpass": [
            {
                "code": "//The shader code that embeds a 938x84 frame buffer at its largest size without stretching the input\nvec3 getSky(vec2 uv)\n{\n    float atmosphere = sqrt(1.0-uv.x);\n    vec3 skyColor = vec3(0.2,0.4,0.8);\n    \n    float scatter = pow(iMouse.x / iResolution.x,1.0 / 15.0);\n    scatter = 1.0 - clamp(scatter,0.8,1.0);\n    \n    vec3 scatterColor = mix(vec3(1.0),vec3(1.0,0.3,0.0) * 1.5,scatter);\n    return mix(skyColor,vec3(scatterColor),atmosphere/1.3);\n}\n\nvec3 getSun(vec2 uv){\n\tfloat sun = 1.0 - distance(uv,iMouse.xy / iResolution.y);\n    sun = clamp(sun,0.0,1.0);\n    \n    float glow = sun;\n    glow = clamp(glow,0.0,1.0);\n    \n    sun = pow(sun,100.0);\n    sun *= 100.0;\n    sun = clamp(sun,0.0,1.0);\n    \n    glow = pow(glow,6.0) * 1.0;\n    glow = pow(glow,(uv.y));\n    glow = clamp(glow,0.0,1.0);\n    \n    sun *= pow(dot(uv.y, uv.y), 1.0 / 1.65);\n    \n    glow *= pow(dot(uv.y, uv.y), 1.0 / 2.0);\n    \n    sun += glow;\n    \n    vec3 sunColor = vec3(1.0,0.6,0.05) * glow;\n    \n    return vec3(sunColor);\n}\n\n\nfloat smooth_step( float edge0, float edge1, float x )\n{\n    float p = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    float v = p * p * (3.0 - 2.0 * p); // smoothstep formula\n    \n    //v = smoothstep( edge0, edge1, x ); // Compare with built-in\n    \n    return v;\n}\n\nconst vec2 target_resolution = vec2(940, 86);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Same texCoord as in Minecraft\n    vec2 texCoord = fragCoord/iResolution.xy;\n    // Own uv variable\n    vec2 uv = texCoord;\n    \n    // Center origin around screen center (range -0.5, 0.5)\n    uv -= .5;\n    \n    // Squish image in excessive dimension\n    float r = (iResolution.x/iResolution.y) / (target_resolution.x/target_resolution.y);\n    if (r >= 1.) uv.x *= r;\n    else uv.y /= r;\n    \n    // Recenter origin to start at 0 (range 0.0, 1.0)\n\tuv += .5;\n    uv.y -= 0.5/r - 0.5;    \n    \n    vec4 color1 = vec4(0.922,0.443,0.000,1.0); \n    vec4 color2 = vec4(1.000,0.894,0.859,1.0);\n    vec4 color3 = vec4(0.141,0.361,0.800,1.0);\n    \n    /*\n    vec4 color1 = vec4(0.992,0.867,0.757,1.0); \n    vec4 color2 = vec4(0.373,0.753,1.000,1.0);\n    vec4 color3 = vec4(0.976,0.780,0.792,1.0);*/\n    \n    float PI = 3.1415926;\n    float time = iTime * 0.; \n    \n    //scale为可调参数\n    float scale = 1.0;\n    //colorStep1为可调参数\n    float colorStep1 = 0.23333;\n    //colorStep2为可调参数\n    float colorStep2 = 0.5555;\n    \n    float offset = uv.x - time;\n    float y = mod(offset,scale);\n    \n    float step1 = scale * (colorStep1);\n    float step2 = scale * max(colorStep1+0.1, (colorStep2)); \n    \n    //红到绿 step0 - step1\n    if (y < step1) {\n    float dist1 = smoothstep(0.0, step1, y);\n\n    fragColor = mix(color1, color2, dist1);\n    }\n    \n    //绿到蓝 step1 - step2\n    else if (y > step1 && y < step2) {\n    float dist2 = smoothstep(step1, step2, y);\n\n    //fragColor = vec4(dist2,dist2,dist2,1.0);\n    fragColor = mix(color2, color3, dist2);\n    }\n    \n    //蓝到红 step2 - 1.0\n    else{\n    float dist3 = smoothstep(step2, 1.0 * scale, y);\n    fragColor = vec4 (dist3,dist3,dist3,1.0);\n    fragColor = color3;\n    }\n    \n    //fragColor = sqrt(fragColor);\n    \n    //sky\n    vec3 sky = getSky(uv);\n    float atmosphere = sqrt(1.0-uv.x);\n    \n    //vec3 skyColor = vec3(fragColor.rgb);\n    vec3 skyColor = vec3(0.2,0.4,0.8);\n     \n    float scatter = pow(iMouse.x / iResolution.x,1.0 / 15.0);\n    scatter = 1.0 - clamp(scatter,0.8,1.0);\n    \n    vec3 scatterColor = mix(vec3(1.0),vec3(1.0,0.3,0.0) * 1.5,scatter);\n    //vec3 scatterColor = vec3(1.);\n    \n    //vec3 color = vec3(atmosphere/1.3,atmosphere/1.3,atmosphere/1.3);\n    vec3 color = mix(skyColor,vec3(scatterColor),atmosphere/1.3);\n    \n    vec3 sun = getSun(fragCoord.xy / iResolution.y);\n    \n    fragColor = vec4(color,1.0);\n    \n    // Black bars at the sides\n    if (uv.x < 0. || uv.x > 1. || uv.y < 0. || uv.y > 1.) fragColor = vec4(0);    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}