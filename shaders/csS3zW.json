{
    "Shader": {
        "info": {
            "date": "1667326462",
            "description": "Another cloud shader",
            "flags": 0,
            "hasliked": 0,
            "id": "csS3zW",
            "likes": 75,
            "name": "High Voltage Tendencies",
            "published": 3,
            "tags": [
                "noise",
                "cloud",
                "lightning",
                "storm"
            ],
            "usePreview": 1,
            "username": "leon",
            "viewed": 1263
        },
        "renderpass": [
            {
                "code": "\n// High Voltage Tendencies\n// Another cloud shader\n\n// reduces if too slow\nconst float frames = 3.;\n\n// global\nfloat glow;\n\n// snippets\n#define R iResolution.xy\n#define N(a,b,c) normalize(vec3(a,b,c))\n#define ss(a,b,t) smoothstep(a,b,t)\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\nfloat gyroid (vec3 seed) { return dot(sin(seed),cos(seed.yzx)); }\n\n// noise\nfloat fbm (vec3 seed)\n{\n    float result = 0., a = .5;\n    for (int i = 0; i < 8; ++i, a/=2.)\n    {\n        result += abs(gyroid(seed/a))*a;\n    }\n    return result;\n}\n\n// signed distance function\nfloat map(vec3 p)\n{\n    float dist = 100.;\n    \n    // cloud\n    vec3 seed = p*.4;\n    seed.z += iTime*.1;\n    float noise = fbm(seed);\n    dist = length(p) - .5 - noise*1.;\n    \n    // lightning\n    const float count = 4.;\n    float a = 1.;\n    float t = iTime*.2 + noise*.5;\n    float r = .1+.2*sin(iTime+p.x);\n    float shape = 100.;\n    for (float i = 0.; i < count; ++i)\n    {\n        p.xz *= rot(t/a);\n        p.xy *= rot(t/a);\n        p = abs(p)-r*a;\n        shape = min(shape, length(p.xz));\n        a /= 1.8;\n    }\n    glow += .002/shape;\n    dist = min(dist, shape);\n    \n    return dist*.8;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.)/iResolution.y;\n    vec3 color = vec3(0);\n    \n    // layers\n    for (float f = 0.; f < frames; ++f)\n    {\n        // blue noise scroll by iq https://www.shadertoy.com/view/tlySzR\n        ivec2 p = ivec2(fragCoord);\n        p = (p+(iFrame*196+int(f))*ivec2(113,127)) & 1023;\n        vec3 blu = texelFetch(iChannel0,p,0).xyz;\n\n        // coordinates\n        vec3 pos = vec3(0,0,7);\n        vec3 ray = normalize(vec3(uv,-3));\n        ray.xy += blu.xy * ss(.5,8.,length(uv)); // blur edge\n        pos += ray * blu.z * 4.; // pre start\n\n        vec3 tint = vec3(0);\n        glow = 0.;\n\n        // raymarch\n        const float count = 40.;\n        float maxDist = 10.;\n        float steps = 0.;\n        float total = 0.;\n        for (steps = count; steps > 0.; --steps) {\n            float dist = map(pos);\n            if (dist < .001*total || total > maxDist) break;\n            dist *= 0.9+0.1*blu.z; // dithering\n            ray.xy += blu.xy*total*.001; // depth of field\n            pos += ray * dist;\n            total += dist;\n        }\n\n        // shading\n        float shade = steps/count;\n        if (shade > .1 && total < maxDist) {\n\n            // NuSan https://www.shadertoy.com/view/3sBGzV\n            vec2 noff = vec2(.2*pow(length(uv),2.),0);\n            vec3 normal = normalize(map(pos)-vec3(map(pos-noff.xyy), map(pos-noff.yxy), map(pos-noff.yyx)));\n\n            // color palette https://iquilezles.org/www/articles/palettes/palettes.htm\n            tint = .8+.5*cos(vec3(1,2,3)*6.1 + pos.y*1. + normal.z*3.);\n\n            // backlight\n            tint *= dot(normal, ray)*.5+.5;\n        }\n\n        // bloom\n        tint += glow*.5;\n        \n        // average\n        color += tint/frames;\n    }\n    \n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}