{
    "Shader": {
        "info": {
            "date": "1641397129",
            "description": "Attempting to program worley noise myself for a future cloud + gas project.\n\nNot a big project, just a proof of concept.",
            "flags": 0,
            "hasliked": 0,
            "id": "flVSRG",
            "likes": 5,
            "name": "Worley Noise Prototype",
            "published": 3,
            "tags": [
                "procedural",
                "noise",
                "hash",
                "dot"
            ],
            "usePreview": 0,
            "username": "Remming_Senegal",
            "viewed": 298
        },
        "renderpass": [
            {
                "code": "vec3 Rand3D( vec3 pos ) // Less resource demanding to use the blue noise texture\n{\n\treturn textureLod( iChannel0, (pos.xy+pos.z)/256.0, 0.0 ).rgb;\n}\n\n// Look at how I just copied the code from my voronoi shader. How convenient!\n// https://www.shadertoy.com/view/sttGzB\nvoid worley( in vec3 p, out vec3 coord, out float distToBorder, out float color)\n{\n    vec3 n = floor(p);\n    vec3 f = fract(p);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n    distToBorder = 5.0;\n    for( float x=-1.0; x<=1.0; x++ )\n    for( float y=-1.0; y<=1.0; y++ )\n    for( float z=-1.0; z<=1.0; z++ )\n    {\n        vec3 g = vec3(x,y,z);\n\t\tvec3 o = Rand3D( n + g );\n        vec3 r = g + o - f;\n        float d = length(r);\n\n        if(d<distToBorder)\n        {\n            distToBorder = d;\n            coord = r;\n            color = o.x;\n        } \n    }\n\n    // coord is like the local coordinate of the voronoi\n    // Adding p turns it into a universal coordinate\n    // That's a poor way of explaining it, so comment the line to see what I mean\n    coord += p;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = (uv * 2.0 - 1.0)/2.0;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 7.0;\n    \n    //the 3D model\n    vec3 xyz = vec3(uv,iTime);\n    vec3 coord;\n    float distToBorder;\n    float color;\n    worley(xyz,coord,distToBorder,color);\n    \n    // The other outputs the 3D voronoi function returns\n    //vec3 col = coord;\n    //vec3 col = vec3(color);\n    vec3 col = vec3(distToBorder);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}