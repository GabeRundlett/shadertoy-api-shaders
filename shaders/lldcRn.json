{
    "Shader": {
        "info": {
            "date": "1531342803",
            "description": "Took a simple sdf raymarching experiment and bent the rays a little bit to make the shape melt and move",
            "flags": 0,
            "hasliked": 0,
            "id": "lldcRn",
            "likes": 8,
            "name": "flappy spaceship",
            "published": 3,
            "tags": [
                "sdf",
                "warp",
                "twist"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 670
        },
        "renderpass": [
            {
                "code": "#define MAX_DIST 40.0\n\n\nfloat s_min(in float x, in float y, in float s) {\n\n    float bridge =\n        clamp(abs(x-y)/s, 0.0, 1.0);\n    return min(x,y) - 0.25 * s * (bridge - 1.0) * (bridge - 1.0);\n}\n\nfloat s_max(in float x, in float y, in float s) {\n    float bridge =\n        clamp(abs(x-y)/s, 0.0, 1.0);\n    return max(x,y) + 0.25 * s * (bridge - 1.0) * (bridge - 1.0);\n}\n\nfloat cone_sdf(in vec3 loc) {\n    float cone_length = \n        abs(loc.x) + length(loc.yz);\n\tcone_length = 0.7 * (cone_length - 1.5);\n\n\treturn cone_length;\n}\n\nfloat cyl_sdf(in vec3 loc) {\n    float r = length(loc.yz) - 0.5;\n    float cap1 = loc.x - 0.5;\n    float cap2 = -0.75 - loc.x;\n    return s_max(cap1, s_max(cap2, r, 0.2), 0.2);\n}\n\nfloat inv_sphere(in vec3 loc, in vec3 cent, in float rad) {\n  return max(-rad, rad - length(cent - loc));\n}\n\nfloat vehicle_sdf(in vec3 loc) {\n    float c = cone_sdf(loc);\n    float p = -loc.y;\n    float b = -loc.x + 0.2;\n    float shell = s_max(c, b, 0.6);\n    float back = s_max(cyl_sdf(loc), p, 0.1);\n    shell = s_min(shell, back, 0.4);\n    shell = s_max(shell,  p, 0.2);\n    \n    vec3 eye1 = vec3(0.7, 0.3, 0.3);\n    vec3 eye2 = vec3(0.7, 0.3, -0.3);\n    \n    return shell \n        + 0.1 * smoothstep(0.2, 0.0, length(loc.zy - vec2(0.42, 0.0)))\n        + 0.1 * smoothstep(0.2, 0.0, length(loc.zy + vec2(0.42, 0.0)))\n        - 0.25 * smoothstep(0.41, 0.0, length(loc - eye1))\n        - 0.25 * smoothstep(0.41, 0.0, length(loc - eye2))\n        - 0.1 * smoothstep(0.2, -0.0, loc.y) * (1.0 + 0.2 * smoothstep(0.4, 0.6, abs(loc.z)));\n}\n\nvec3 perturb(in vec3 pt) {\n    return pt + 0.1 * sin(4.0 * pt.x + 8.0 * iTime) * vec3(0.0, 1.0, 0.0);\n}\n\n\nvec3 vehicle_sdf_grad(in vec3 loc) {\n    float dist = vehicle_sdf(perturb(loc));\n    const float del = 0.01;\n    return vec3(vehicle_sdf(perturb(loc + vec3(del, 0.0, 0.0))) - dist,\n                vehicle_sdf(perturb(loc + vec3(0.0, del, 0.0))) - dist,\n                vehicle_sdf(perturb(loc + vec3(0.0, 0.0, del))) - dist) / del;\n}\n\n\nfloat cast_to_vehicle(in vec3 orig, in vec3 dir) {\n    vec3 p = orig;\n    float accum = 0.0;\n    for (int i = 0; i < 256; ++i) {\n    \tfloat remaining = 0.7 * vehicle_sdf(p);\n        accum += remaining;\n        p = orig + accum * dir;\n        p = perturb(p);\n        if (remaining < 1.0e-3) {\n            return accum;\n        }\n    }\n\treturn max(accum, MAX_DIST + 1.0);\n}\n\nvec3 get_bounce(in vec3 pt, in vec3 dir) {\n    vec3 norm = normalize(vehicle_sdf_grad(pt));\n    return normalize(reflect(dir, norm));\n}\n\nvec4 castRay(in vec2 fragCoord) {\n\tvec2 uv = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    vec3 ray_orig = vec3(0.0, 0.5, -5.0);\n\tvec3 ray_dir = normalize(vec3(uv, 5.0));\n    \n    float wiggle = abs(mod(0.2 * iTime, 4.0) - 2.0) - 1.0;\n    wiggle = sign(wiggle) * smoothstep(0.0, 1.0, abs(wiggle));\n    float ct = sin(wiggle);\n    float st = cos(wiggle);\n    mat3 twist = mat3(ct, 0.0, st,\n                      0.0, 1.0, 0.0,\n                      -st, 0.0, ct);\n    ray_dir = twist * ray_dir;\n    ray_orig = twist * ray_orig;\n    \n    float d = cast_to_vehicle(ray_orig, ray_dir);\n    \n    if (d < MAX_DIST) {\n        vec3 pt = ray_orig + d * ray_dir;\n        ray_dir = get_bounce(pt, ray_dir);\n    }\n\n    return vec4(abs(0.5 + 0.5 * ray_dir), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tfragColor = castRay(fragCoord);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}