{
    "Shader": {
        "info": {
            "date": "1724072294",
            "description": "A simple mandelbrot set with inside surface warping. \n\nDesigned for this this fxash project : https://www.fxhash.xyz/generative/slug/warped-mandelbrot-fractal",
            "flags": 0,
            "hasliked": 0,
            "id": "MflBzj",
            "likes": 13,
            "name": "Warped Mandelbrot Set",
            "published": 3,
            "tags": [
                "mandelbrot",
                "warping",
                "set"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 148
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2024 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned with Noodlesplate (https://github.com/aiekick/NoodlesPlate)\n    \n#define AA 2\n#define PETALS_COUNT 4.0\n#define WARP_FACTOR 5.0\n#define BUMP_FACTOR 0.03\n#define FRACTAL_POWER 2\n\nvec2 zmul(vec2 a, vec2 b){return mat2(a,-a.y,a.x)*b;} // z * z \nvec2 zinv(vec2 a){return vec2(a.x, -a.y) / dot(a,a);} // 1 / z\nvec2 zpow(vec2 a, int p) {vec2 r=a;for(int i=1;i<p;++i) r=zmul(r, r);return r;} // z ^ p\n\nvec3 sdf(vec2 p, float t) {\n    // position\n    if (FRACTAL_POWER < 3) p.y += 0.15; \n    else if (FRACTAL_POWER < 4) p.y -= 0.35;  \n    else p.y -= 0.5;  \n    \n     // 90Â° rotation\n    const float a = 1.57;\n    p *= mat2(cos(a),-sin(a),sin(a),cos(a));\n    \n    // mandelbrot\n    vec2 z = vec2(0);\n    for (float i=0.;i<15.0;i++){\n        z = zpow(z,FRACTAL_POWER) + p - vec2(0.5,0.);\n        if (dot(z,z) > 4.0) {\n            break;\n        }\n    }\n    \n    // sdf\n    float d = dot(z,z);\n    float sdf = 1.0 - sqrt(d) * log(d);\n    \n    // warped flower\n    z = vec2(atan(z.x,z.y), length(z * 5.0));\n    float warpFactor = 5.0;\n    for (int i=0; i<3; i++) {\n        z.y += cos(z.x * PETALS_COUNT - t) / 3.0;\n        z.x += sin(z.y * WARP_FACTOR - t * 2.0) / 3.0;\n    }\n    z = vec2(cos(z.x), sin(z.x)) * z.y;\n    z = abs(fract(z) - 0.5);\n    return smoothstep(0.0, 1.0, sdf + 1.0) * vec3(length(z), z);\n}\n\nvec4 render(in vec2 v, in vec2 o) {\n    // time\n    float t = iTime * 0.5;\n    \n    // point\n    vec2 uv = (v+v+o - iResolution.xy)/min(iResolution.x, iResolution.y) * 1.2;\n    \n    // ray dir\n    vec3 rd = normalize(vec3(uv, 1.0));\n    \n    // light point\n    vec3 lp = vec3(0.0, 0.0, -2.);\n    \n    // normal\n    vec2 eps = vec2(7.5/iResolution.y, 0.0);\n    vec3 f = sdf(uv, t);\n    float fx = (sdf(uv-eps.xy, t).x-f.x)/eps.x;\n    float fy = (sdf(uv-eps.yx, t).x-f.x)/eps.x;\n    vec3 n = normalize(vec3(vec2(fx, fy) * BUMP_FACTOR, -1.0));\n    \n    // light attenuation\n    vec3 ld = lp - vec3(uv, 0.0);\n    float lDist = max(length(ld), 0.001);\n    ld /= lDist;\n    float atten = (f.x * 0.9 + 0.1)/(1.0 + lDist * lDist * 0.15);\n    \n    // diffuse\n    float diff = max(dot(n, ld), 0.0);\n    diff = pow(diff, 4.0) * 0.7 + pow(diff, 8.0) * 0.3;\n    \n    // specular\n    float spec = pow(max(dot( reflect(-ld, n), -rd), 0.0), 32.0);\n    \n    // final color\n    vec3 col = clamp(sin(vec3(8,12,10) + iTime) * 0.5 + 1.0, 0.0, 1.0);\n    col = (col * (diff * pow(col, vec3(4.0)) * 2.0 + 0.5) + vec3(1.0) * spec * 2.0)*atten;\n    \n    // gamma corection\n    col = clamp(sqrt(col), 0.0, 1.0);\n    return vec4(col, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0);\n    \n    // anti aliasing\n    const float AAf = float(AA);\n    for(int i=0;i<AA;i++) {\n        for(int j=0;j<AA;j++) {\n            fragColor += render(gl_FragCoord.xy, vec2(i,j) / AAf);\n        }\n    }\n    fragColor /= AAf * AAf;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}