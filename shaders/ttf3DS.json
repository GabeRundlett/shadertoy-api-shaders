{
    "Shader": {
        "info": {
            "date": "1557456759",
            "description": "When rolling a parabola on a straight line, the focus will trace out a catenary. That is, the catenary is a [url=https://en.wikipedia.org/wiki/Roulette_(curve)]roulette[/url] of the parabola.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttf3DS",
            "likes": 15,
            "name": "Parabola Rolling",
            "published": 3,
            "tags": [
                "2d",
                "math",
                "geometry"
            ],
            "usePreview": 0,
            "username": "tpfto",
            "viewed": 721
        },
        "renderpass": [
            {
                "code": "// plotter forked from https://www.shadertoy.com/view/4tB3WV\n// demonstration of a catenary being traced by the focus of a parabola rolling on a straight line; https://doi.org/10.4169/074683410x480230\n\n#define BLACK vec3(0.0)\n#define WHITE vec3(1.0)\n\n// dark and light colors from Solarized (https://ethanschoonover.com/solarized/)\n#define DARK vec3(0., 0.169, 0.212)\n#define LIGHT vec3(0.992, 0.965, 0.89)\n#define GRAY vec3(0.396, 0.482, 0.514)\n\n// Solarized \"accent colors\"\n#define RED vec3(0.863, 0.196, 0.184)\n#define BLUE vec3(0.149, 0.545, 0.824)\n\n// comment out to switch to light mode\n#define DARK_MODE\n\n// XY range of the display.\n#define DISP_SCALE 8.0 \n\n// Line thickness (in pixels).\n#define LINE_SIZE 2.0\n\n// Tick thickness (in pixels).\n#define TICK_SIZE 1.0\n\n// Tick length.\n#define TICK_LENGTH 0.025 * DISP_SCALE\n\n// Grid line & axis thickness (in pixels).\n#define GRID_LINE_SIZE 1.0\n#define GRID_AXIS_SIZE 2.0\n\n// Number of grid lines per unit.\n#define GRID_LINES 1.0\n\n// graphics primitives\n\n#define drawPrimitive(p, c, d) d = mix(c, d, p)\n\nfloat POINT(vec2 pt, vec2 p) // pt : position\n{\n    float psize = 2.5;\n    float sc = DISP_SCALE/iResolution.y;\n    return smoothstep(0.0, 1.1 * sc, distance(pt, p) - psize * sc);\n}\n\nfloat SEGMENT(vec2 a, vec2 b, vec2 p) // a, b : endpoints\n{\n    vec2 pa = p - a, ba = b - a;\n    return smoothstep(0.0, (LINE_SIZE / iResolution.y * DISP_SCALE), length(pa - ba * clamp( dot(pa, ba)/dot(ba, ba), 0.0, 1.0 )));\n}\n\n// the rolling parabola\n\nfloat Parabola(float t, vec2 p)\n{\n        float a = 1.0; // focal length\n        vec2 focus = a * vec2(asinh(t), sqrt(1.0 + t * t));\n        vec2 direction = a * normalize(vec2(t, 1));\n        \n        return 2.0 * a + dot(direction, p - focus) - length(p - focus);\n}\n\nconst vec2 GRADH = vec2(0.01, 0);\n\n// central difference\n#define GRAD_PARABOLA(t, p) (0.5 * vec2(Parabola(t, p - GRADH.xy) - Parabola(t, p + GRADH.xy), Parabola(t, p - GRADH.yx) - Parabola(t, p + GRADH.yx)) / GRADH.xx)\n\n// SHOW_PARABOLA(Position, Color, Destination, Screen Position)\n#define SHOW_PARABOLA(t, c, d, p) d = mix(c, d, smoothstep(0.0, (LINE_SIZE / iResolution.y * DISP_SCALE), abs(Parabola(t, p) / length(GRAD_PARABOLA(t, p)))))\n\n// SHOW_CATENARY(Parameter, Color, Destination, Screen Position)\n#define SHOW_CATENARY(a, c, d, p) d = mix(c, d, smoothstep(0.0, (LINE_SIZE / iResolution.y * DISP_SCALE), abs((p.y - a * cosh(p.x/a)) / length(vec2(sinh(p.x/a), 1.0)))))\n\n#define MAKETICK(c) (clamp(1.0 + 0.5 * TICK_LENGTH - abs(c), 0.0, 1.0))\n\nfloat grid(vec2 p, bool showAxes, bool showTicks, bool showGrid)\n{\n        vec2 uv = mod(p, 1.0 / GRID_LINES);\n        float halfScale = 0.5 / GRID_LINES;\n    \n        float grid = 1.0,  tick = 1.0, axis = 1.0;\n        \n    if (showTicks) {\n        float tickRad = (TICK_SIZE / iResolution.y) * DISP_SCALE;\n        tick = halfScale - max( MAKETICK(p.y) * abs(uv.x - halfScale), MAKETICK(p.x) * abs(uv.y - halfScale));\n        tick = smoothstep(0.0, tickRad, tick);\n    }\n    \n    if (showGrid) {\n        float gridRad = (GRID_LINE_SIZE / iResolution.y) * DISP_SCALE;\n        grid = halfScale - max(abs(uv.x - halfScale), abs(uv.y - halfScale));\n        grid = smoothstep(0.0, gridRad, grid);\n    }\n        \n    if (showAxes) {\n        float axisRad = (GRID_AXIS_SIZE / iResolution.y) * DISP_SCALE;\n        axis = min(abs(p.x), abs(p.y));\n        axis = smoothstep(axisRad-0.05, axisRad, axis);\n    }\n        \n        return min(tick, min(grid, axis));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        vec2 aspect = iResolution.xy / iResolution.y;\n        vec2 uv = ( fragCoord.xy / iResolution.y ) - 0.5 * aspect;\n        uv *= DISP_SCALE;\n        uv += vec2(0.0, 3.0);\n        \n        vec3 col = WHITE;\n        // set up axes and ticks\n        #ifdef DARK_MODE\n        col = mix(GRAY, DARK, grid(uv, true, true, false));\n        #else\n        col = mix(GRAY, LIGHT, grid(uv, true, true, false));\n        #endif\n\n        float t = 7.0 * sin(iTime);\n    \n        float ast = asinh(t), lt = sqrt(1.0 + t * t);\n\n        drawPrimitive(SEGMENT(vec2(ast, 0.0) + t * vec2(-1.0, t)/lt, vec2(ast, lt), uv), mix(GRAY, WHITE, 0.4), col);\n        drawPrimitive(SEGMENT(vec2(ast, 0.0) + vec2(2.0, 1.0 + t * t - 2.0 * t)/lt, vec2(ast, 0.0) + vec2(-2.0, 1.0 + t * t + 2.0 * t)/lt, uv), mix(GRAY, WHITE, 0.4), col);\n    \n        SHOW_CATENARY(1.0, RED, col, uv);\n    \n        SHOW_PARABOLA(t, BLUE, col, uv);\n    \n        drawPrimitive(POINT(vec2(ast, lt), uv), RED, col);\n        \n        fragColor = vec4( vec3(col), 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}