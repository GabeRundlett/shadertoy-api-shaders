{
    "Shader": {
        "info": {
            "date": "1724602225",
            "description": "originals  https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/4sVBWd https://www.shadertoy.com/view/XXyGzh",
            "flags": 0,
            "hasliked": 0,
            "id": "Mc2fRz",
            "likes": 6,
            "name": "hexagon and cosmos ",
            "published": 3,
            "tags": [
                "hexagon",
                "cosmos",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 170
        },
        "renderpass": [
            {
                "code": "const float PI = 3.141593;\nconst float TWO_PI = PI * 2.0;\n\nfloat rand(float v) {\n    return fract(sin(v) * 5364.54367);\n}\n\nfloat noise(float v){\n    float i = floor(v);\n    float f = fract(v);   \n    float a = rand(i);\n    float b = rand(i + 1.0);                   \n    return mix(a, b, smoothstep(0.0, 1.0, f));\n}\n\nvec2 rotate2D(float angle, vec2 uv) {\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle)) * uv;\n}\n#define iterations 13\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\nfloat hex(vec2 p, float thickness) {\n    p.x *= 0.57735 * 2.0;\n    \n\tp.y += mod(floor(p.x), 2.0) * 0.5+10.;\n  \n\tp = abs((mod(p, 1.0) - 0.5));\n    float sm = thickness * 0.5;\n\treturn smoothstep(thickness + sm, thickness - sm, abs(max(p.x * 1.5 + p.y, p.y * 2.0) - 1.0));\n}\n\nvec3 pallete() {\n    vec3 ORANGE = vec3(0.7, 0.3, 0.1);\n\tvec3 BROWN = vec3(0.5, 0.35, 0.2);\n    vec3 PURPLE = vec3(0.6, 0.2, 0.5);\n    vec3 RED = vec3(0.7, 0.1, 0.2);\n    vec3 c1 = mix(ORANGE, PURPLE, noise(iTime * 0.55 + 185.43));\n    vec3 c2 = mix(BROWN, RED, noise(iTime * 0.45 + 1485.34));\n    return mix(c1, c2, noise(iTime * 0.5 + 432.63));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    uv = rotate2D((noise(iTime * 0.05 + 534.453) - 0.5) * TWO_PI, uv);\n    \n    float tiles = sin(iTime * 0.0 + 12.5) * 6.0 + 9.0;\n    int LAYERS = 6;\n    \n    vec3 pal = pallete();\n    vec3 col = pal * 0.6;\n  \tvec3 dir=vec3(uv*zoom,1.);\n    vec3 from=vec3(1.,.5,0.5);\n\tvec4 o =fragColor;\nvec2 u =fragCoord;\n\t vec2 v = iResolution.xy;\n       u = .2*(u+u-v)/v.y;    \n         \n    vec4 z = o = vec4(0,2,3,0);\n     \n         \n \n     \n    for (float a = .5, t = iTime, i; \n         ++i < 19.; \n         o += (1. + cos(z+t)) \n            / length((1.+i*dot(v,v)) \n                   * sin(0.5*u/(0.05-dot(u,u)) - 2.*u.yx + t))\n         )  \n        v = cos(++t - 7.*u*pow(a += .03, i)) - 5.*u,                 \n        u += tanh(40. * dot(u *= mat2(cos(i + .02*t - vec4(0,11,33,0)))\n                           ,u)\n                      * cos(1e2*u.yx + t)) / 2e2\n           + .2 * a * u\n           + cos(4./exp(dot(o,o)/1e2) + t) / 3e2;\n              \n     o = 25.6 / (min(o, 13.) + 164. / o) \n       - dot(u, u) / 25.;\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v2=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; \n            p.xy=rotate2D(iTime*0.01, p.xy);// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv2+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv2=mix(vec3(length(v2)),v2,saturation); //color adjust\n\t\n    float scaleAnim = 0.15 * sin( iTime*1.1 + 4324.0) + 0.2;\n    vec2 cameraAnim = (vec2(noise(iTime * 0.0 + 123.25), noise(iTime * 1.0 + 1544.123)) - 0.5) * 10.0;\n\n    float scale = 1.0;\n    for(int i = 1; i <= LAYERS; ++i) {\n        float thicknessAnim = 0.08 * sin(0.9 * iTime + float(i) * 0.6) + 0.1;\n        \n        float h = hex((scale * uv * tiles) + cameraAnim, thicknessAnim);\n        vec3 c = float(i) * pal * h+v2*.01+o.xyz;\n        \n        c *= mix(0.9, -noise(iTime * 0.5 + 1515.11) * 0.6, step(0.5, float(i % 2)));\n        c += mix(0.2, -0.2, hex(5.0 * uv, 0.6)) * h;\n   \n      \tcol += (1.0 - length(uv))*vec3(0.,0.2,0.5)*1.1 * c;\n        scale -= scaleAnim / float(LAYERS);\n    }\n           \n    fragColor = vec4(col+o.xyz*0.2, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}