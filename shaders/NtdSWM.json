{
    "Shader": {
        "info": {
            "date": "1639229365",
            "description": "Computed values might be hard to bound in [0,1] or [-1,1].   ( red where > 1 , blue where < -1. ).\nright: use MIPmap to compute the (approx) max value of a buffer for free ( used for instance for normalizing the values).",
            "flags": 32,
            "hasliked": 0,
            "id": "NtdSWM",
            "likes": 11,
            "name": "auto-normalization for free",
            "published": 3,
            "tags": [
                "gpmipmap"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 295
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, U = u/R;\n    O = texture(iChannel0, U );\n    if (U.x > .5 ) O /= decodeMax( texture(iChannel0, U ,99.).a);\n    \n    if (O.x> 1.) O = vec4(1,0,0,0);               // show overfow in red\n    if (O.x<-1.) O = vec4(0,0,1,0);               // show overfow in red\n    if ( int(u) == int(R)/2 ) O = vec4(0,1,0,0);  // green separator\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 O, vec2 U )\n{\n    U *= 10./iResolution.xy;\n    float x = U.x, y = U.y,\n          v =    sin(x+sin(y+iTime)) + cos(x-iTime)\n               + cos(y+cos(x)-iTime)\n               + sin(5.*x+9.*length(U))\n               + cos(5.*y+9.*length(U));\n               \n    O = vec4( vec3(v), encodeMax(v) );\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// POW must be highest possible not causing overflow: adapt it to your range of values.\n#define POW 55.\n#define encodeMax(v) pow(max(0.,v),POW)\n#define decodeMax(v) pow(v,1./POW)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}