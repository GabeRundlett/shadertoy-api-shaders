{
    "Shader": {
        "info": {
            "date": "1613791534",
            "description": "Circuit board looking truchet pattern.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttVfzR",
            "likes": 13,
            "name": "Circuit Truchet",
            "published": 3,
            "tags": [
                "truchet",
                "pattern",
                "caustic",
                "circuit",
                "pcb"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 475
        },
        "renderpass": [
            {
                "code": "vec2 Rotate(in vec2 p, in float r) {\n    float c = cos(r), s = sin(r);\n    return p * mat2(c, -s, s, c);\n}\n\n// Hashes from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nfloat Hash21(in vec2 p) {\n\tvec3 p3 = fract(p.xyx * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Hash31(in vec3 p) {\n\tvec3 p3 = fract(p * 0.1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// Smooth 3D noise\nfloat snoise(in vec3 p) {\n    vec3 c = floor(p);\n    vec3 l = fract(p);\n    l *= l * (3.0 - 2.0 * l);\n\n    float ldb = Hash31(c);\n    float rdb = Hash31(c + vec3(1.0, 0.0, 0.0));\n    float lub = Hash31(c + vec3(0.0, 1.0, 0.0));\n    float rub = Hash31(c + vec3(1.0, 1.0, 0.0));\n    float ldf = Hash31(c + vec3(0.0, 0.0, 1.0));\n    float rdf = Hash31(c + vec3(1.0, 0.0, 1.0));\n    float luf = Hash31(c + vec3(0.0, 1.0, 1.0));\n    float ruf = Hash31(c + 1.0);\n\n    return mix(mix(mix(ldb, rdb, l.x), mix(lub, rub, l.x), l.y),\n               mix(mix(ldf, rdf, l.x), mix(luf, ruf, l.x), l.y),\n               l.z);\n}\n\n// Hairy looking noise\nfloat hnoise(in vec3 p, in float scale, in float octaves) {\n    p *= scale;\n\n    float value = 0.0;\n    float nscale = 1.0;\n    float tscale = 0.0;\n\n    for (float octave=0.0; octave < octaves; octave++) {\n        // Magic numbers\n        p.xz *= mat2(-0.48406725864, -0.87503079323, 0.87503079323, -0.48406725864);\n        p.yz *= mat2(0.15022546991, -0.98865176285, 0.98865176285, 0.15022546991);\n\n        value += abs(snoise(p) * 2.0 - 1.0) * nscale;\n        tscale += nscale;\n        nscale *= 0.25;\n\n        p *= 2.0;\n    }\n\n    return value / tscale;\n}\n\n// Tile patterns\nfloat tile1(in vec2 cuv) {\n    float e = dot( cuv, vec2(0.71));\n    return min(abs(max( max(cuv.x, cuv.y), e + 0.2)), abs(max(-min(cuv.x, cuv.y), 0.2 - e))) - 0.025;\n}\n\nfloat tile2(in vec2 cuv) {\n    return abs(abs(dot(cuv, vec2(0.71))) - 0.355) - 0.02;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y + iTime * 0.1;\n    float unit = 10.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    uv *= 5.0;\n    vec2 cid = floor(uv);\n    vec2 cuv = fract(uv) - 0.5;\n\n    float h21 = Hash21(cid);\n    cuv = Rotate(cuv, floor(h21 * 4.0) * 1.57);\n\n    float d = h21 < 0.5 ? tile1(cuv) : tile2(cuv);\n    color.gb += vec2(0.25 + 0.25 * sin(uv.x + uv.y - iTime), 1.0) * smoothstep(unit, 0.0, d);\n\n    color.b += 0.5 * sin(d * 100.0);\n    color *= pow(1.0 - hnoise(vec3(uv, iTime), 1.0, 5.0), 3.0) * 2.0;\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}