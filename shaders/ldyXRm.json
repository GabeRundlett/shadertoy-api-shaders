{
    "Shader": {
        "info": {
            "date": "1463481133",
            "description": "Toycamera ",
            "flags": 0,
            "hasliked": 0,
            "id": "ldyXRm",
            "likes": 11,
            "name": "Toycamera (Tilt-Shift Blur)",
            "published": 3,
            "tags": [
                "tiltshift",
                "toycamera"
            ],
            "usePreview": 1,
            "username": "dockusan",
            "viewed": 1971
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\nfloat blendScreen(float base, float blend) {\n\treturn 1.0-((1.0-base)*(1.0-blend));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend) {\n\treturn vec3(blendScreen(base.r,blend.r),blendScreen(base.g,blend.g),blendScreen(base.b,blend.b));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend, float opacity) {\n\treturn (blendScreen(base, blend) * opacity + blend * (1.0 - opacity));\n}\n\tconst float bluramount  = 0.7;\nconst float center      = 1.0;\nconst float stepSize    = 0.004;\nconst float steps       = 15.0;\n\nconst float minOffs     = (float(steps-1.0)) / -2.0;\nconst float maxOffs     = (float(steps-1.0)) / +2.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 c = texture(iChannel0, fragCoord.xy / iResolution.xy).rgb;\n    vec2 tcoord = fragCoord.xy / iResolution.xy;\n\tif (fragCoord.x < iMouse.x)\n\t{\n\t\tfragColor = vec4(c, 1.0);\t\n\t} else {\n\n    float amount;\n    vec4 blurred;\n        \n        //Work out how much to blur based on the mid point \n    amount = pow((tcoord.y * center) * 2.0 - 1.0, 2.0) * bluramount;\n        \n        //This is the accumulation of color from the surrounding pixels in the texture\n    blurred = vec4(0.0, 0.0, 0.0, 1.0);\n        \n        //From minimum offset to maximum offset\n    for (float offsX = minOffs; offsX <= maxOffs; ++offsX) {\n        for (float offsY = minOffs; offsY <= maxOffs; ++offsY) {\n\n                //copy the coord so we can mess with it\n            vec2 temp_tcoord = tcoord.xy;\n\n                //work out which uv we want to sample now\n            temp_tcoord.x += offsX * amount * stepSize;\n            temp_tcoord.y += offsY * amount * stepSize;\n\n                //accumulate the sample \n            blurred += texture(iChannel0, temp_tcoord);\n        \n        } //for y\n    } //for x \n        \n        //because we are doing an average, we divide by the amount (x AND y, hence steps * steps)\n    blurred /= float(steps * steps);\n\n\n\n\t\tfragColor = blurred;\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}