{
    "Shader": {
        "info": {
            "date": "1503306085",
            "description": "Remember this? (using the font texture, mouse enabled)",
            "flags": 0,
            "hasliked": 0,
            "id": "4tXcRH",
            "likes": 13,
            "name": "Historical Text",
            "published": 3,
            "tags": [
                "texture",
                "font",
                "cells",
                "starwars",
                "scrolling"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 933
        },
        "renderpass": [
            {
                "code": "// \"Historical Text\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txFnt iChannel0\n\nint GetTxChar (vec2 p);\nvec2 Rot2D (vec2 q, float a);\n\nvec3 ltDir;\nvec2 qnTex;\nfloat dstFar, txDep;\nconst float pi = 3.14159;\n\nfloat FontTexDf (vec2 p)\n{\n  vec3 tx;\n  float d;\n  int ic;\n  ic = GetTxChar (p);\n  if (ic != 0) {\n    tx = texture (txFnt, mod ((vec2 (mod (float (ic), 16.),\n       15. - floor (float (ic) / 16.)) + fract (p)) * (1. / 16.), 1.)).gba - 0.5;\n    qnTex = vec2 (tx.r, - tx.g);\n    d = tx.b + 1. / 256.;\n  } else d = 1.;\n  return d;\n}\n\nfloat ObjRayT (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 srd, dda, h;\n  float dHit, dLim, d;\n  srd = 1. - 2. * step (0., rd.xz);\n  dda = 1. / (abs (rd.xz) + 0.0001);\n  dHit = max ((abs (ro.y) - txDep - 0.02) / (abs (rd.y) + 0.001), 0.);\n  dLim = min ((abs (ro.y) + txDep) / (abs (rd.y) + 0.001), dstFar);\n  for (int j = 0; j < 160; j ++) {\n    p = ro + dHit * rd;\n    h = fract (dda * fract (srd * p.xz));\n    d = max (FontTexDf (p.xz), abs (p.y) - txDep);\n    dHit += min (d, 0.01 + min (h.x, h.y));\n    if (d < 0.0001 || dHit > dLim) break;\n  }\n  if (d >= 0.0001) dHit = dstFar;\n  return dHit;\n}\n\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, bgCol, vn;\n  float dstTxt;\n  bgCol = vec3 (0.05);\n  dstTxt = ObjRayT (ro, rd);\n  if (dstTxt < dstFar) {\n    ro += rd * dstTxt;\n    col = vec3 (0.7, 0.7, 0.1);\n    if (abs (ro.y) < txDep - 0.001) vn = normalize (vec3 (qnTex.x, 0.00001, qnTex.y));\n    else {\n      vn = vec3 (0., sign (ro.y), 0.);\n      col = vec3 (1., 1., 0.);\n    }\n    col = col * (0.2 + 0.8 * max (dot (ltDir, vn), 0.)) +\n       0.5 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 128.);\n    col = mix (col, bgCol, pow (min (dstTxt / dstFar, 1.), 5.));\n  } else col = bgCol;\n  return pow (clamp (col, 0., 1.), vec3 (0.7));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, tCur;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  if (mPtr.z > 0.) {\n    az = -0.5 * pi - 3. * pi * mPtr.x;\n    el = -1.5 * pi * mPtr.y;\n  } else {\n    az = -0.5 * pi;\n    el = -0.2 * pi;\n  }\n  rd = normalize (vec3 (uv, 2.));\n  ro = vec3 (0.01, 0., -15.);\n  ltDir = normalize (vec3 (1., 1., -1.));\n  rd.xz = Rot2D (rd.xz, 0.5 * pi + az);\n  rd.yz = Rot2D (rd.yz, 0.5 * pi + el);\n  ro.xz = Rot2D (ro.xz, 0.5 * pi + az);\n  ro.yz = Rot2D (ro.yz, 0.5 * pi + el);\n  ltDir.xz = Rot2D (ltDir.xz, 0.5 * pi + az);\n  ltDir.yz = Rot2D (ltDir.yz, 0.5 * pi + el);\n  ro.z -= 1.5 * tCur;\n  ro.x -= 0.5;\n  txDep = 0.15;\n  dstFar = 100.;\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (clamp (col, 0., 1.), 1.);\n}\n\n#define C(c) _ic = (_nc -- == 0) ? (c) : _ic;\n\n#define _SP    C(0x20)\n#define _EXCL  C(0x21)\n#define _QUOT  C(0x22)\n#define _NUM   C(0x23)\n#define _DOLLR C(0x24)\n#define _PCENT C(0x25)\n#define _AMP   C(0x26)\n#define _SQUOT C(0x27)\n#define _LPAR  C(0x28)\n#define _RPAR  C(0x29)\n#define _AST   C(0x2A)\n#define _PLUS  C(0x2B)\n#define _COMMA C(0x2C)\n#define _MINUS C(0x2D)\n#define _PER   C(0x2E)\n#define _SLASH C(0x2F)\n#define _0     C(0x30)\n#define _1     C(0x31)\n#define _2     C(0x32)\n#define _3     C(0x33)\n#define _4     C(0x34)\n#define _5     C(0x35)\n#define _6     C(0x36)\n#define _7     C(0x37)\n#define _8     C(0x38)\n#define _9     C(0x39)\n#define _COLON C(0x3A)\n#define _SEMI  C(0x3B)\n#define _LT    C(0x3C)\n#define _EQUAL C(0x3D)\n#define _GT    C(0x3E)\n#define _QUEST C(0x3F)\n#define _AT    C(0x40)\n#define _A     C(0x41)\n#define _B     C(0x42)\n#define _C     C(0x43)\n#define _D     C(0x44)\n#define _E     C(0x45)\n#define _F     C(0x46)\n#define _G     C(0x47)\n#define _H     C(0x48)\n#define _I     C(0x49)\n#define _J     C(0x4A)\n#define _K     C(0x4B)\n#define _L     C(0x4C)\n#define _M     C(0x4D)\n#define _N     C(0x4E)\n#define _O     C(0x4F)\n#define _P     C(0x50)\n#define _Q     C(0x51)\n#define _R     C(0x52)\n#define _S     C(0x53)\n#define _T     C(0x54)\n#define _U     C(0x55)\n#define _V     C(0x56)\n#define _W     C(0x57)\n#define _X     C(0x58)\n#define _Y     C(0x59)\n#define _Z     C(0x5A)\n#define _LSQB  C(0x5B)\n#define _BSLSH C(0x5C)\n#define _RSQB  C(0x5D)\n#define _CARET C(0x5E)\n#define _USCOR C(0x5F)\n#define _GRAVE C(0x60)\n#define _a     C(0x61)\n#define _b     C(0x62)\n#define _c     C(0x63)\n#define _d     C(0x64)\n#define _e     C(0x65)\n#define _f     C(0x66)\n#define _g     C(0x67)\n#define _h     C(0x68)\n#define _i     C(0x69)\n#define _j     C(0x6A)\n#define _k     C(0x6B)\n#define _l     C(0x6C)\n#define _m     C(0x6D)\n#define _n     C(0x6E)\n#define _o     C(0x6F)\n#define _p     C(0x70)\n#define _q     C(0x71)\n#define _r     C(0x72)\n#define _s     C(0x73)\n#define _t     C(0x74)\n#define _u     C(0x75)\n#define _v     C(0x76)\n#define _w     C(0x77)\n#define _x     C(0x78)\n#define _y     C(0x79)\n#define _z     C(0x7A)\n#define _LBRC  C(0x7B)\n#define _VBAR  C(0x7C)\n#define _RBRC  C(0x7D)\n#define _TILDE C(0x7E)\n\nint GetTxChar (vec2 p)\n{\n  vec2 fp;\n  ivec2 ip;\n  float d;\n  int _ic, _nc;\n  fp = floor (p);\n  fp.y = - fp.y;\n  fp.y = mod (fp.y, 24.);\n  ip = ivec2 (fp);\n  ip.x += 13;\n  _nc = ip.x;\n  _ic = 0;\n  if (ip.x >= 0 && ip.x < 28) {\n    if (ip.y == 0) {\n      _I _t _SP\n      _i _s _SP\n      _a _SP\n      _d _a _r _k _SP\n      _t _i _m _e _SP\n      _f _o _r _SP\n    } else if (ip.y == 1) {\n      _t _h _e _SP\n      _R _e _b _e _l _l _i _o _n _PER\n    } else if (ip.y == 2) {\n      _A _l _t _h _o _u _g _h _SP\n      _t _h _e _SP\n      _D _e _a _t _h _SP\n      _S _t _a _r _SP\n    } else if (ip.y == 3) {\n      _h _a _s _SP\n      _b _e _e _n _SP\n      _d _e _s _t _r _o _y _e _d _COMMA _SP\n    } else if (ip.y == 4) {\n      _I _m _p _e _r _i _a _l _SP\n      _t _r _o _o _p _s _SP\n      _h _a _v _e _SP\n    } else if (ip.y == 5) {\n      _d _r _i _v _e _n _SP\n      _t _h _e _SP\n      _R _e _b _e _l _SP\n      _f _o _r _c _e _s _SP\n    } else if (ip.y == 6) {\n      _f _r _o _m _SP\n      _t _h _e _i _r _SP\n      _h _i _d _d _e _n _SP\n      _b _a _s _e _SP\n    } else if (ip.y == 7) {\n      _a _n _d _SP\n      _p _u _r _s _u _e _d _SP\n      _t _h _e _m _SP\n      _a _c _r _o _s _s _SP\n    } else if (ip.y == 8) {\n      _t _h _e _SP\n      _g _a _l _a _x _y _PER\n    } else if (ip.y == 9) {\n      _E _v _a _d _i _n _g _SP\n      _t _h _e _SP\n      _d _r _e _a _d _e _d _SP\n    } else if (ip.y == 10) {\n      _I _m _p _e _r _i _a _l _SP\n      _S _t _a _r _f _l _e _e _t _COMMA _SP\n      _a _SP\n    } else if (ip.y == 11) {\n      _g _r _o _u _p _SP\n      _o _f _SP\n      _f _r _e _e _d _o _m _SP\n      _f _i _g _h _t _e _r _s _SP\n    } else if (ip.y == 12) {\n      _l _e _d _SP\n      _b _y _SP\n      _L _u _k _e _SP\n      _S _k _y _w _a _l _k _e _r _SP\n    } else if (ip.y == 13) {\n      _h _a _s _SP\n      _e _s _t _a _b _l _i _s _h _e _d _SP\n      _a _SP\n      _n _e _w _SP\n    } else if (ip.y == 14) {\n      _s _e _c _r _e _t _SP\n      _b _a _s _e _SP\n      _o _n _SP\n      _t _h _e _SP\n      _r _e _m _o _t _e _SP\n    } else if (ip.y == 15) {\n      _i _c _e _SP\n      _w _o _r _l _d _SP\n      _o _f _SP\n      _H _o _t _h _PER\n    } else if (ip.y == 16) {\n      _T _h _e _SP\n      _e _v _i _l _SP\n      _l _o _r _d _SP\n      _D _a _r _t _h _SP\n      _V _a _d _e _r _COMMA _SP\n    } else if (ip.y == 17) {\n      _o _b _s _e _s _s _e _d _SP\n      _w _i _t _h _SP\n      _f _i _n _d _i _n _g _SP\n    } else if (ip.y == 18) {\n      _y _o _u _n _g _SP\n      _S _k _y _w _a _l _k _e _r _COMMA _SP\n      _h _a _s _SP\n    } else if (ip.y == 19) {\n      _d _i _s _p _a _t _c _h _e _d _SP\n      _t _h _o _u _s _a _n _d _s _SP\n      _o _f _SP\n    } else if (ip.y == 20) {\n      _r _e _m _o _t _e _SP\n      _p _r _o _b _e _s _SP\n      _i _n _t _o _SP\n      _t _h _e _SP\n    } else if (ip.y == 21) {\n      _f _a _r _SP\n      _r _e _a _c _h _e _s _SP\n      _o _f _SP\n      _s _p _a _c _e _PER _PER _PER\n    }\n  }\n  return _ic;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}