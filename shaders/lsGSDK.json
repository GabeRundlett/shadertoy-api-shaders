{
    "Shader": {
        "info": {
            "date": "1466607551",
            "description": "bla",
            "flags": 0,
            "hasliked": 0,
            "id": "lsGSDK",
            "likes": 12,
            "name": "VCI Logo",
            "published": 3,
            "tags": [
                "stfu"
            ],
            "usePreview": 0,
            "username": "jsb",
            "viewed": 793
        },
        "renderpass": [
            {
                "code": "float det(in vec2 a, in vec2 b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n\nfloat inCircle(in vec2 fragCoord, in vec2 center, in float radius)\n{\n    return smoothstep(-0.5, 0.5, radius - length(fragCoord - center));\n}\n\nfloat inCenteredCircle(in vec2 fragCoord, in float radius)\n{\n    vec2 screenCenter = iResolution.xy / 2.0;\n    return inCircle(fragCoord, screenCenter, radius);\n}\n\nfloat inCenteredRing(in vec2 fragCoord, in float innerRadius, in float outerRadius)\n{\n    return min(inCenteredCircle(fragCoord, outerRadius), 1.0 - inCenteredCircle(fragCoord, innerRadius));\n}\n\nfloat inCenteredSector(in vec2 fragCoord, in vec2 startDir, in vec2 endDir)\n{\n    vec2 screenCenter = iResolution.xy / 2.0;\n    vec2 dir = (fragCoord - screenCenter);\n    float startDist = det(startDir, dir);\n    float endDist = det(dir, endDir);\n    if (det(startDir, endDir) > 0.0) {\n        return smoothstep(-0.5, 0.5, min(startDist, endDist));\n    }\n    else {\n        return smoothstep(-0.5, 0.5, max(startDist, endDist));\n    }\n}\n\nfloat inCenteredRingSector(in vec2 fragCoord, in vec2 startDir, in vec2 endDir, in float innerRadius, in float outerRadius)\n{\n    return min(inCenteredRing(fragCoord, innerRadius, outerRadius), inCenteredSector(fragCoord, startDir, endDir));\n}\n\nfloat inCenteredWorm(in vec2 fragCoord, in vec2 startDir, in vec2 endDir, in float innerRadius, in float outerRadius)\n{\n    float wormRadius = (outerRadius - innerRadius) / 2.0;\n    vec2 screenCenter = iResolution.xy / 2.0;\n    vec2 wormStart = screenCenter + startDir * ((outerRadius + innerRadius) / 2.0);\n    vec2 wormEnd   = screenCenter + endDir   * ((outerRadius + innerRadius) / 2.0);\n    return max(\n        max(inCircle(fragCoord, wormStart, wormRadius), inCircle(fragCoord, wormEnd, wormRadius)),\n        inCenteredRingSector(fragCoord, startDir, endDir, innerRadius, outerRadius)\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    const int numRings = 6;\n    float screenScale = iResolution.y / 1024.0;\n    float scale = screenScale * 4.0 * (1.0 - cos(9.0 * iTime) * exp(-3.0 * iTime));\n    float initialRadius = 19.750  * scale;\n    float ringWidth     = 12.125 * scale;\n    \n\tvec3 color = vec3(1.0);\n    fragColor = vec4(color, 1.0);\n    \n    vec2 center = iResolution.xy / 2.0;\n    if (length(fragCoord - center) > initialRadius + float(numRings + 2) * ringWidth) {\n        return;\n    }\n    \n    vec3 colors[6];\n    colors[0] = vec3(255.0/255.0, 237.0/255.0,   0.0/255.0); // yellow\n    colors[1] = vec3(246.0/255.0, 168.0/255.0,   0.0/255.0); // orange\n    colors[2] = vec3(216.0/255.0,  92.0/255.0,  65.0/255.0); // red\n    colors[3] = vec3(122.0/255.0, 111.0/255.0, 172.0/255.0); // purple\n    colors[4] = vec3(142.0/255.0, 186.0/255.0, 229.0/255.0); // blue\n    colors[5] = vec3( 87.0/255.0, 171.0/255.0,  39.0/255.0); // green\n    \n    float outerRadius = initialRadius;\n    for (int i = 0; i < numRings; ++i) {\n        float innerRadius = outerRadius;\n        outerRadius = innerRadius + ringWidth * (1.0 - cos(float(8 - i) * iTime) * exp(-1.0 * iTime));\n        \n        float seed1 = texture(iChannel0, vec2((float(i) + 0.5) / 64.0, 0.5 / 64.0)).r * 2.0 - 0.5;\n        float seed2 = texture(iChannel0, vec2((float(i) + 0.5) / 64.0, 1.5 / 64.0)).r * 2.0 - 0.5;\n        float seed3 = texture(iChannel0, vec2((float(i) + 0.5) / 64.0, 2.5 / 64.0)).r * 2.0 - 0.5;\n        float seed4 = texture(iChannel0, vec2((float(i) + 0.5) / 64.0, 3.5 / 64.0)).r * 2.0 - 0.5;\n        \n        float startAngle1 = sin(0.1 * iTime * seed1 + seed2 * 3.1415) * 3.1415 * 2.0;\n    \tfloat endAngle1   = startAngle1 + 0.5 * 3.1415 * 2.0;\n        float startAngle2 = startAngle1 + 0.4 * sin(0.1 * iTime * seed3 + seed4 * 3.1415) * 3.1415 * 2.0;\n    \tfloat endAngle2   = startAngle2 + 0.5 * 3.1415 * 2.0;\n        \n        vec2 startDir1 = vec2(cos(startAngle1), sin(startAngle1));\n        vec2 endDir1   = vec2(cos(endAngle1),   sin(endAngle1));\n        vec2 startDir2 = vec2(cos(startAngle2), sin(startAngle2));\n        vec2 endDir2   = vec2(cos(endAngle2),   sin(endAngle2));\n        \n        float intensity = 0.5 * inCenteredWorm(fragCoord, startDir1, endDir1, innerRadius, outerRadius)\n                        + 0.5 * inCenteredWorm(fragCoord, startDir2, endDir2, innerRadius, outerRadius);\n    \tcolor = mix(color, colors[i], intensity);\n    }\n    color = mix(color, vec3(0.0), inCenteredCircle(fragCoord, initialRadius));\n    \n    // eye glint\n    float glintInnerRadius = initialRadius * 0.4;\n    float glintOuterRadius = initialRadius * 0.62;\n    vec2 glintStart1 = normalize(vec2(3,1));\n    vec2 glintEnd1   = normalize(vec2(5,4));\n    vec2 glintStart2 = normalize(vec2(4,5));\n    vec2 glintEnd2   = normalize(vec2(0,1));\n    color = mix(color, vec3(1.0), inCenteredRingSector(fragCoord, glintStart1, glintEnd1, glintInnerRadius, glintOuterRadius));\n    color = mix(color, vec3(1.0), inCenteredRingSector(fragCoord, glintStart2, glintEnd2, glintInnerRadius, glintOuterRadius));\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}