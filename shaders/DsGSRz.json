{
    "Shader": {
        "info": {
            "date": "1680615673",
            "description": "asdf",
            "flags": 0,
            "hasliked": 0,
            "id": "DsGSRz",
            "likes": 11,
            "name": "uni_01",
            "published": 3,
            "tags": [
                "asdf"
            ],
            "usePreview": 0,
            "username": "AHS1222",
            "viewed": 483
        },
        "renderpass": [
            {
                "code": "#define smt(a, b, t) smoothstep(a, b, t)\n\nvec3 hsv2rgb( vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nfloat rand(vec2 v){\n    v = fract(v * vec2(70.26593, 1.6682));\n    v += dot(v, v+23.45);\n    return fract(v.x*v.y);\n}\n\nvec2 rand_2(vec2 v){\n    float n = rand(v);\n    return vec2(n, rand(v + n));\n}\n\nfloat dist_line(vec2 which, vec2 p1, vec2 p2){\n    float r = clamp(dot(which - p1, p2 - p1) / dot(p2 - p1, p2 - p1), .0, 1.);\n    return length((which - p1)-(p2 - p1)*r);\n}\n\nfloat drawline(vec2 which, vec2 p1, vec2 p2, float w){\n    float dis = dist_line(which, p1, p2);\n    return smoothstep(.015*w, .005*w, dis)*smt(.8, .0, distance(p1, p2)-.25);\n}\n\nvec2 Getpos(vec2 v){\n    vec2 p = rand_2(v);\n    return vec2(.5)+.4*vec2(cos(p.x*(iTime+5.)), sin(p.y*(iTime+5.)));\n}\n\nvec3 layer(vec2 uv, float w){\n    float m=.0;\n    \n    \n    vec2 fl_uv = floor(uv);\n    vec2 fr_uv = fract(uv);\n    \n    vec2 id = Getpos(fl_uv);\n    m = smoothstep(.08*w, .01*w, distance(fr_uv, id))*abs(sin((iTime+id.x)*4.));\n    \n    vec2 p[9];\n    int num = 0;\n    for(float i=-1.; i<=1.; i++){\n        for(float j=-1.; j<=1.; j++){\n            p[num++] = vec2(i,j)+Getpos(fl_uv + vec2(i,j));\n        }\n    }\n\n    for(int i=0; i<9; i++){\n    m += drawline(fr_uv, p[4], p[i], w);\n    }\n    m += drawline(fr_uv, p[1], p[3], w);\n    m += drawline(fr_uv, p[1], p[5], w);\n    m += drawline(fr_uv, p[3], p[7], w);\n    m += drawline(fr_uv, p[5], p[7], w);\n    return vec3(m);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float yy = uv.y;\n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= .5;\n    \n    float t = iTime*.1;\n    float rs = sin(2.*t);\n    float rc = cos(2.*t);\n    uv *= mat2(rc, -rs, rs, rc);\n    \n    float m = .0;\n    vec3 v3 = vec3(1.);\n    vec2 fl_uv = floor(uv);\n    vec2 fr_uv = fract(uv);\n    \n    vec2 id = Getpos(fl_uv);\n    vec3 col = vec3(.0);\n    \n    for(float i=.0; i<1.; i+=1./8.){\n        float z = fract(i+t);\n        float size = mix(10., .5, z);\n        float al = smoothstep(.0, .8, z) * smoothstep(1., .8, z);\n        v3 = 0.5 + 0.5*cos(-1.2*z+iTime+uv.xyx+vec3(0,2,4));\n       col += layer(uv*size + i*27.385, 1.)*al*v3;\n       col += layer(uv*size + i*27.385, .4)*pow(al, 2.);\n    }\n    \n    //col *= smoothstep(1., .7, yy)*smoothstep(.0, .3, yy);\n    v3 = 0.5 + 0.5*cos(iTime-1.2+uv.xyx+vec3(0,2,4));\n    col += vec3(.8*yy)*.3*v3;\n    col += vec3(.2*(1.-yy))*.3*v3;\n    \n    fragColor = vec4(col,1.0);\n}\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}