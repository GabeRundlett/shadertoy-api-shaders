{
    "Shader": {
        "info": {
            "date": "1592138332",
            "description": "Trying to recreate a Turner's sunset (https://thebookofshaders.com/06/turner.jpg)",
            "flags": 0,
            "hasliked": 0,
            "id": "WtXcDH",
            "likes": 1,
            "name": "BoS - Turner's Sunset",
            "published": 3,
            "tags": [
                "bookofshaders"
            ],
            "usePreview": 0,
            "username": "zeta",
            "viewed": 280
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159265359;\n    \n    const vec3[] colors = vec3[] (\n    vec3( 90./255.,  92./255., 145./255.),\n    vec3(225./255.,  73./255.,   7./255.),\n    vec3(234./255., 163./255., 118./255.),\n    vec3(234./255., 163./255., 118./255.),\n    vec3( 90./255.,  92./255., 145./255.)\n);\n\n// https://iquilezles.org/articles/functions\nfloat expImpulse(float x, float k)\n{\n    float h = k*x;\n    return h*exp(1.0-h);\n}\n\nfloat pcurve( float x, float a, float b )\n{\n    float k = pow(a+b,a+b) / (pow(a,a)*pow(b,b));\n    return k * pow( x, a ) * pow( 1.0-x, b );\n}\n\n\n\nfloat fn0(float x)\n{\n    return 0.;\n}\n\nfloat fn1(float x)\n{\n    return (1.8+sin(1.9*PI*x))/5.;\n}\n\nfloat fn2(float x)\n{\n\treturn .5 + (1.-pcurve(x, 14., .2))/4.;\n}\n\nfloat fn3(float x)\n{\n    return .9;\n}\n\nfloat fn4(float x)\n{\n    return 1.+pow(x, 2.);\n}\n\n\nvec3 mixfn(vec2 uv)\n{\n    float[] ths = float[](fn0(uv.x), fn1(uv.x), fn2(uv.x), fn3(uv.x), fn4(uv.x));\n    \n    for (int i = 1; i < ths.length(); i++) {\n        if (uv.y >= ths[i-1] && uv.y <= ths[i]) {\n            return mix(colors[i-1], colors[i], smoothstep(ths[i-1], ths[i], uv.y));\n        }\n    }\n    return vec3(0);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //vec3 sky = mix(SKY_COLORS[0], SKY_COLORS[1], -uv.y);\n    //vec3 sun = mix(SUN_COLORS[0], SUN_COLORS[1], expImpulse(uv.y, 7.)) * step(1.-expImpulse(1.-uv.x+.15, 3.), uv.y) - sky;\n\n    vec3 img = mixfn(uv);\n\n    fragColor = vec4(img,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}