{
    "Shader": {
        "info": {
            "date": "1573681251",
            "description": "Sometimes when you render clouds they became boxes that flicker with music. But that's alright since it looks cool! Can look around with mouse.",
            "flags": 0,
            "hasliked": 0,
            "id": "tdGXzh",
            "likes": 36,
            "name": "VolumetricSoundCloud",
            "published": 3,
            "tags": [
                "cloud",
                "volumetric"
            ],
            "usePreview": 0,
            "username": "kuvkar",
            "viewed": 872
        },
        "renderpass": [
            {
                "code": "mat3 rotx(float a) { mat3 rot; rot[0] = vec3(1.0, 0.0, 0.0); rot[1] = vec3(0.0, cos(a), -sin(a)); rot[2] = vec3(0.0, sin(a), cos(a)); return rot; }\nmat3 roty(float a) { mat3 rot; rot[0] = vec3(cos(a), 0.0, sin(a)); rot[1] = vec3(0.0, 1.0, 0.0); rot[2] = vec3(-sin(a), 0.0, cos(a)); return rot; }\nmat3 rotz(float a) { mat3 rot; rot[0] = vec3(cos(a), -sin(a), 0.0); rot[1] = vec3(sin(a), cos(a), 0.0); rot[2] = vec3(0.0, 0.0, 1.0); return rot; }\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat map(in vec3 rp)\n{\n    float T = iTime*.35;\n    \n    if(rp.z > .3) return 100.;\n    vec3 _rp = rp;\n    rp.x += T*.05;\n    rp *= .5;\n    \n    float f = textureLod(iChannel0, rp, 0.0).r * .5;\n    f += textureLod(iChannel0, T*.02 + rp * 2., 0.0).r * .25;\n    f += textureLod(iChannel0, T*.05 + rp * 4., 0.0).r * .125;\n    f += textureLod(iChannel0, T * .01 + rp * 8., 0.0).r * .105;\n    f += textureLod(iChannel0, T * .015 + rp * 24., 0.0).r * .08;\n    float yp = _rp.y+.5;\n    float xp = _rp.x+.5;\n\tf *= smoothstep(0.0, .4, min(yp, xp));\n\tf *= smoothstep(1., .6, max(yp, xp));\n\tf /= smoothstep(-0.2, .2, _rp.z);\n    return (f-.9);\n}\n\n\nvec3 grad(in vec3 rp)\n{\n    vec2 off = vec2(0.02, 0.0);\n    vec3 g = vec3(map(rp + off.xyy) - map(rp - off.xyy),\n                  map(rp + off.yxy) - map(rp - off.yxy),\n                  map(rp + off.yyx) - map(rp - off.yyx));\n    return normalize(g);\n}\n\nfloat getLightPhase()\n{\n    return smoothstep(0., 1., texture(iChannel1, vec2(.0, .0)).r);\n}\n\nvec2 g_uv;\n\nvoid trace(in vec3 rp, in vec3 rd, inout vec4 color)\n{\n \n    vec3 ro = rp;\n    rp += rd * (.8/rd.z);\n    rp += rd * rand(rd.xy+iTime)*.015;\n    vec4 col = vec4(0.0);\n    vec3 cloudCol = vec3(1.);\n    \n    const float stp = 1.0/14.0;\n    float curstep = 1.0;\n    float pulse = getLightPhase();\n    \n    for (int i = 0; i < 140; ++i)\n    {\n        float dens = map(rp);\n        if(dens < 0.0)\n        {\n            vec3 g = grad(rp);\n            float transmit = exp(2. * dens);\n            // base color\n            vec3 cl = cloudCol*transmit*.3;\n            // horizontal light\n            cl += max(0.0, g.x) * vec3(.3, .4, 1.)*transmit*1.5;\n            // vertical light\n            cl += max(0.0, g.y) * vec3(.7, 0.4, 0.2)*transmit*1.5;\n            \n            // some contrast on edges\n            float dns = map(rp + g*.05+normalize(rp)*.05);\n            cl *= clamp((dns-dens)*1., 0.3, .95);\n            // audio pulse\n            cl += max(0.0, pow(-dens, 4.) * (.15 - dot(rp, rp)))*150.*pulse*vec3(.6, .3, 0.4);\n            \n            // sum up results\n            col.rgb += cl * curstep * stp;\n            //curstep -= stp;\n            col.a += stp;\n        }\n        rp += rd * 0.05 * stp;\n        if(col.a >= 1.) break;\n        if(rp.z > 0.2) break;\n    }\n    col.rgb *= 1.7;\n    col = min(col, 1.0);\n    color = mix(color, col, col.a);\n}\n\n\nmat3 lookat(vec3 from, vec3 to)\n{\n    vec3 f = normalize(to - from);\n    vec3 _tmpr = normalize(cross(f, vec3(0.0, 1.0, 0.0)));\n    vec3 u = normalize(cross(_tmpr, f));\n    vec3 r = normalize(cross(u, f));\n    return mat3(r, u, f);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    g_uv = uv;\n    uv -= vec2(0.5);\n    uv.y /= iResolution.x / iResolution.y;\n\n    vec2 im = 4.0 * ((iMouse.xy / iResolution.xy) - vec2(0.5));\n    \n    fragColor = vec4(0.3, 0.25, 0.5 + uv.y, 0.0)*.9;\n    vec3 rd = normalize(vec3(uv, 1.0));\n    vec3 rp = vec3(0.0, 0.0, -1.0);\n    vec3 _rp = rp;\n    \n    if(iMouse.z <= 0.0)\n    {\n        im.x = sin(iTime*.3)*.4;\n        im.y = 1.5 + sin(iTime*.5)*.1;\n    }\n    rp = roty(im.x*.15) * rp;\n    rp.y = (rotx(im.y) *_rp).y;\n    \n    rd = lookat(rp, vec3(0.0)) * rd;\n    trace(rp, rd, fragColor);\n\n    float phase = getLightPhase();\n    fragColor += max(0.0, phase * 0.2 * (0.3 - length(uv)));\n    // vignette\n    fragColor *= 0.15 + smoothstep(-0.1, 0.2, 0.2-dot(uv, uv));\n    \n    // contrast+gamma\n    fragColor = smoothstep(.0, 1.0, fragColor);\n    fragColor = sqrt(fragColor);  \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}