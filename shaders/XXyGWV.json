{
    "Shader": {
        "info": {
            "date": "1718285564",
            "description": "Piechart. Apply subtle noise and subtle gradients. ",
            "flags": 0,
            "hasliked": 0,
            "id": "XXyGWV",
            "likes": 2,
            "name": "ft-piechart",
            "published": 3,
            "tags": [
                "2d",
                "piechart"
            ],
            "usePreview": 0,
            "username": "fingertwister",
            "viewed": 88
        },
        "renderpass": [
            {
                "code": "// Simple and hacky pie chart generator\n\n#define PI 3.1415926535\n\n// DATA - sizes and colors. \n// NOTE: You need to update these two if you add or remove slices and/or change the sizes:\n\n#define NUM_SLICES 6\n#define SUM 128.0\n// #define SELECTED 0\n#define ENABLE_AA\n#define RADIUS 0.85\n\n// You can use this tool to quickly convert hex colors to vec3 colors: https://codepen.io/fingertwister/pen/eYaeENd\n\nSlice slices[NUM_SLICES] = Slice[NUM_SLICES](\n    Slice(39.0/SUM, vec3(0.145, 0.329, 0.631)),\n    Slice(28.0/SUM, vec3(0.169, 0.537, 0.929)),\n    Slice(22.0/SUM, vec3(0.400, 0.851, 0.984)),\n    Slice(21.0/SUM, vec3(0.698, 0.961, 1.000)),\n    Slice(15.0/SUM, vec3(0.502, 0.502, 0.502)),\n    Slice(3.0/SUM, vec3(0.702, 0.702, 0.702))\n);\n\nbool isBorder(vec2 coord) {\n    float asum = -PI;\n    for (int i = 0; i < NUM_SLICES; i++) {\n        vec2 rd = normalize(vec2(sin(asum), -cos(asum)));\n        float d = distancePointToRay(coord, vec2(0.0, 0.0), rd);\n        asum += (2.0 * PI * slices[NUM_SLICES - i - 1].value);\n        if (d < 0.005) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvec4 colorAt(vec2 xy) {\n    vec2 ar = vec2(iResolution.x / iResolution.y, 1.0);\n    vec2 uv = ar * (xy / iResolution.xy - 0.5) * 2.0;\n    float a = (1.0 + atan(uv.x, -uv.y) / PI) * 0.5;\n    float asum = 0.0;\n    vec3 col = vec3(1.0);\n    float r = sqrt(dot(uv, uv));\n    if (r < RADIUS) {\n        for (int i = 0; i < (NUM_SLICES); i++) {\n            int idx = NUM_SLICES - i - 1;\n            float sa = slices[idx].value;\n            asum += sa;\n            if (a < asum) {\n                col = color_fn2(a, asum, sa, r / RADIUS, mix(color_fn1(uv, asum), slices[idx].color, 0.75), vec3(.95));\n                col = mix(col, noiseAt(xy, iResolution.xy), 0.2);\n                #ifdef SELECTED\n                col = idx != SELECTED ? mix(vec3(1.0), col, 0.15) : col * 0.95;\n                #endif\n                break;\n            }\n        }\n        if (isBorder(uv)) {\n            col = vec3(1.0);\n        }\n    }\n    return vec4(col, 1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #ifdef ENABLE_AA\n    // AA code from: https://www.shadertoy.com/view/wtjfRV\n    fragColor = vec4(0.0);\n    float A = 8.,  // Change A to define the level of anti-aliasing (1 to 16) ... higher numbers are REALLY slow!\n          s = 1./A, x, y;\n    \n    for (x=-.5; x<.5; x+=s) {\n        for (y=-.5; y<.5; y+=s) {\n            fragColor += min (colorAt(vec2(x, y) + fragCoord), 1.0);\n        }\n    }\n        \n\tfragColor = fragColor / (A*A);\n    #endif\n\n    #ifndef ENABLE_AA\n    fragColor = colorAt(fragCoord);\n    #endif\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// -----------\n// Tweaked worley perlin noise (https://www.shadertoy.com/view/MdGSzt) to get some subtle texture. \n\nfloat r(float n)\n{\n \treturn fract(cos(n*89.42)*343.42);\n}\nvec2 r(vec2 n)\n{\n \treturn vec2(r(n.x*23.62-300.0+n.y*34.35),r(n.x*45.13+256.0+n.y*38.89)); \n}\nfloat worley(vec2 n,float s)\n{\n    float dis = 2.0;\n    for(int x = -1;x<=1;x++)\n    {\n        for(int y = -1;y<=1;y++)\n        {\n            vec2 p = floor(n/s)+vec2(x,y);\n            float d = length(r(p)+vec2(x,y)-fract(n/s));\n            if (dis>d)\n            {\n             \tdis = d;   \n            }\n        }\n    }\n    return 1.0 - dis;\n\t\n}\n\n// copy from https://www.shadertoy.com/view/4sc3z2\n\n#define MOD3 vec3(.1031,.11369,.13787)\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n                \tmix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                       \tw.x),\n                \tmix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                       \tw.x),\n                \tw.z),\n        \t\tmix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                       \tw.x),\n                   \tmix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                       \tw.x),\n                \tw.z),\n    \t\t\tw.y);\n}\n\nvec3 noiseAt(vec2 xy, vec2 rXy) {\n    float m = 2.0;\n    float dis = (1.0+perlin_noise(vec3(xy/rXy, 1.0)*1024.0)) \n        * (1.0+(worley(xy, m) +\n        0.5*worley(2.0*xy,m) +\n        0.25*worley(4.0*xy,m) ));\n\treturn vec3(dis/4.0);\n}\n\n\n// -----------\n\n\nfloat distancePointToRay(vec2 P, vec2 B, vec2 M) {\n    float t0 = dot(M, (P - B)) / dot(M, M);\n    return t0 <= 0.0 ? \n        length(P - B) : \n        length(P - (B + t0 * M));\n}\n\nvec3 color_fn1(vec2 uv, float asum) {\n    vec3 c = 0.5 + 0.5*cos(uv.xxy+vec3(asum * 2.0, 1.5, 5.0));\n    return 0.5 + vec3(c.x * 0.05, c.y * 0.3, c.z);\n}\n\nvec3 color_fn2(float a, float asum, float sa, float r, vec3 col, vec3 bgcol) {\n    float center = asum - sa * 0.5;\n    float p = a - center;\n    p = 2.0 * (0.5 - abs(p / sa));\n    p = smoothstep(0.0, 1.0, 1.0 - pow(p, 1.0 / 5.));\n    float delta = p;\n    float k = mix(0.2, 0.6, r);\n    return mix(col, bgcol, k * delta);\n}\n\nstruct Slice {\n    float value;\n    vec3 color;\n};\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}