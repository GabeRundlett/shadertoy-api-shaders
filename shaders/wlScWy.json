{
    "Shader": {
        "info": {
            "date": "1595246109",
            "description": "Flight of the humongous dragonfly (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "wlScWy",
            "likes": 14,
            "name": "Bugs in the Shrubs",
            "published": 3,
            "tags": [
                "tree",
                "forest",
                "flight",
                "dragonfly"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 367
        },
        "renderpass": [
            {
                "code": "// \"Bugs in the Shrubs\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrEllCylDf (vec3 p, vec2 r, float h);\nfloat PrEllips2Df (vec3 p, vec2 r);\nfloat Minv3 (vec3 p);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nmat3 bugMat;\nvec3 bugPos, sunDir, qHit, trOff;\nvec2 gId;\nfloat tCur, tCyc, dstFar, hgSize, trSzFac, trTwist, trTrunk, trLeaf, bgSzFac, bgAngW[2], bgFreqW;\nint idObj;\nbool trCore;\nconst float trLay = 4.;\nconst int idWing = 11, idEye = 12, idBod = 13, idTail = 14, idMth = 15, idAnt = 16;\nconst float pi = 3.1415927, sqrt3 = 1.732051, phi = 1.618034;\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nvec3 TrackPos (float t)\n{\n  return vec3 (10. * cos (0.1 * t) + 0.1 * t, 0., t);\n}\n\nvec3 TrackVel (float t)\n{\n  return vec3 (-0.1 * 10. * sin (0.1 * t) + 0.1, 0., 1.);\n}\n\nvec3 TrackAcc (float t)\n{\n  return vec3 (-0.1 * 0.01 * 10. * cos (0.1 * t), 0., 0);\n}\n\nfloat PathDst (vec2 p)\n{\n  float s;\n  s = abs (p.x - TrackPos (p.y).x) - 1.5;\n  return s * step (0., s) * step (0.5, Fbm2 (0.5 * p));\n}\n\nvoid SetTrConf ()\n{\n  vec2 hc;\n  if (PathDst (HexToPix (gId * hgSize)) == 0.) trSzFac = 0.;\n  else {\n    hc = Hashv2v2 (16.1 * gId + 0.3);\n    trSzFac = hgSize * 0.5 * sqrt3 * (0.8 - 0.4 * hc.x);\n    trTwist = phi * (1. + smoothstep (0.3, 0.7, hc.y));\n    hc = Hashv2v2 (17.1 * gId + 0.3);\n    trLeaf = 9. + floor (3. * hc.x);\n    trTrunk = 0.3 + 0.3 * hc.y;\n    hc = Hashv2v2 (18.1 * gId + 0.3);\n    trCore = (hc.x > 0.2);\n    trOff.xz = max (0., hgSize * 0.5 * sqrt3 - 1.1 * trSzFac) *\n       sin (2. * pi * hc.y + vec2 (0.5 * pi, 0.));\n    trOff.y = 0.;\n  }\n}\n\nfloat ObjCDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, r, h, w, s, rMax, rMin;\n  dMin = dstFar;\n  if (trSzFac > 0.) {\n    p.xz -= HexToPix (gId * hgSize);\n    p -= trOff;\n    dMin /= trSzFac;\n    p /= trSzFac;\n    p.y -= 1.3 + 2. * trTrunk;\n    rMax = 1.;\n    rMin = 0.5;\n    if (trCore) {\n      q = p;\n      d = PrEllips2Df (q.xzy, vec2 (rMin, 1.3));\n      DMINQ (1 + int (trLay));\n    }\n    for (float k = float (VAR_ZERO); k < trLay; k ++) {\n      s = k / trLay;\n      r = mix (rMax, rMin, s);\n      h = 0.9 * s + 0.3;\n      q = p;\n      q.xz = Rot2D (q.xz, trTwist * s);\n      q.xz = Rot2D (q.xz, 2. * pi * floor (trLeaf * atan (q.z, - q.x) / (2. * pi) + 0.5) / trLeaf);\n      w = 0.5 * (1. - 0.3 * s) * r;\n      d = SmoothMax (abs (PrEllips2Df (q.xzy, vec2 (r, 1.3))) - 0.05 * (1. - 0.2 * q.y),\n         min (length (vec2 (q.y + w - h, abs (q.z) - w)) - w, q.y + w - h), 0.04 * (1. - 0.5 * s));\n      DMINQ (1 + int (k));\n    }\n    p.y -= - (1.3 + 2. * trTrunk);\n    q = p;\n    q.y -= trTrunk;\n    d = PrCylDf (q.xzy, 0.25 * (1. + 0.05 * sin (2. * pi * q.y / trTrunk)), trTrunk);\n    DMINQ (2 + int (trLay));\n    dMin *= 0.8 * trSzFac;\n  }\n  return dMin;\n}\n\nfloat ObjCRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s, eps;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.y == 0.) rd.y = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  eps = 0.0005;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]), dot (ro.xz, edN[2])) / hgSize;\n  pM = HexToPix (PixToHex (ro.xz / hgSize));\n  hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n  s = Minv3 (hv);\n  gIdP = vec2 (-999.);\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId != gIdP) {\n      gIdP = gId;\n      SetTrConf ();\n    }\n    d = ObjCDf (p);\n    if (dHit + d < s) dHit += d;\n    else {\n      dHit = s + eps;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n      hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n      s = Minv3 (hv);\n    }\n    if (d < eps || dHit > dstFar || p.y < 0.) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjCNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjCDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjCSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  gIdP = vec2 (-999.);\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId != gIdP) {\n      gIdP = gId;\n      SetTrConf ();\n    }\n    if (trSzFac > 0.) {\n      h = ObjCDf (p);\n      sh = min (sh, smoothstep (0., 0.05 * d, h));\n      d += clamp (h, 0.1, 0.3);\n    } else d += 0.2 / max (0.1, length (rd.xz));\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 b;\n  float dMin, d, bLen, wSpan, wr, tr, u;\n  bLen = 1.8;\n  wSpan = 3.;\n  p = bugMat * (p - bugPos);\n  dMin = dstFar / bgSzFac;\n  p /= bgSzFac;\n  p.z -= 0.2 * bLen;\n  b = vec2 (14., 3.) * max (0., abs (p.x) - 0.12 * bLen) / wSpan;\n  q = p;\n  q.yz -= bgAngW[0] * b;\n  d = PrEllCylDf (q.xzy, vec2 (0.96 * wSpan, 0.35), 0.01);\n  DMINQ (idWing);\n  q = p;\n  q.yz -= bgAngW[1] * b;\n  q.z -= 0.42 * bLen;\n  d = PrEllCylDf (q.xzy, vec2 (wSpan, 0.35), 0.01);\n  DMINQ (idWing);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.18, 0.07, bLen);\n  d = PrSphDf (q, 0.15);\n  DMINQ (idEye);\n  q = p;\n  wr = q.z / bLen;\n  if (wr > 0.5) {\n    u = 2. * (wr - 0.5);\n    tr = 0.17 - 0.11 * u * u;\n  } else {\n    u = clamp (0.67 * (wr - 0.5), -1., 1.);\n    u *= u;\n    tr = 0.17 - u * (0.34 - 0.18 * u); \n  }\n  d = PrCapsDf (q, tr * bLen, bLen);\n  DMINQ (idBod);\n  q.yz -= bLen * vec2 (0.1 * (wr + 1.) * (wr + 1.), -1.8);\n  d = PrCylDf (q, 0.018, 0.8 * bLen);\n  DMINQ (idTail);\n  q = p;\n  q.yz -= vec2 (-0.06, 1.03 * bLen);\n  d = PrSphDf (q, 0.06);\n  DMINQ (idMth);\n  q = p;\n  wr = q.y / bLen;\n  q.x = abs (q.x) - 0.1;\n  q.xz -= 1.5 * wr * wr;\n  q.yz -= vec2 (0.34, 0.9 * bLen);\n  d = PrCylDf (q.xzy, 0.025 - 0.25 * wr * wr, 0.2);\n  DMINQ (idAnt);\n  return 0.8 * dMin * bgSzFac;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    h = ObjDf (p);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (h, 0.1, 0.3);\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nfloat WingPat ()\n{\n  vec4 b;\n  vec2 bb;\n  float ds;\n  b = (8. * (vec4 (-1.2, -0.5, -0.18, -0.05) * abs (qHit.x) +\n     max (qHit.z, - qHit.z)) + vec4 (1.65, 0.725, 0.225, 0.1)) /\n     vec4 (0.1, 0.075, 0.075, 0.075);\n  bb = b.xz + step (abs (b.yw), abs (b.xz)) * (b.yw - b.xz);\n  ds = bb.x + step (abs (bb.y), abs (bb.x)) * (bb.y - bb.x);\n  ds = sqrt (max (0., 1. - ds * ds)) * sign (ds);\n  return ds;\n}\n\nvec4 BugCol (float ds)\n{\n  vec4 col4;\n  vec4 wCol = vec4 (0.9, 0.9, 0.7, 0.3);\n  vec4 bCol = vec4 (0., 0.2, 1., 0.2);\n  if (idObj == idWing) {\n    col4 = wCol * (1. + 0.2 * abs (ds));\n  } else if (idObj == idEye) {\n    col4 = (qHit.z < 0.05) ? bCol : vec4 (0.8, 0.8, 0.9, -1.);\n  } else if (idObj == idBod) {\n    col4 = bCol;\n    if (qHit.y > 0.) col4 = mix (col4, vec4 (0.9, 0.3, 0., 0.1), \n       smoothstep (-1., -0.5, qHit.z) * (1. - smoothstep (0., 0.1, abs (qHit.x))));\n    else col4 = mix (col4, wCol, smoothstep (-1., -0.5, qHit.z) *\n       (1. - smoothstep (0., 0.1, abs (qHit.x)))) *\n       (0.5 + 0.5 * smoothstep (0.01, 0.02, abs (qHit.x)));\n  } else if (idObj == idTail) {\n    col4 = bCol;\n    if (qHit.z < -1.3) col4 = vec4 (0.9, 0., 0., -1.);\n  } else if (idObj == idMth) {\n    col4 = vec4 (0.9, 0.6, 0.2, 0.1);\n  } else if (idObj == idAnt) {\n    col4 = vec4 (0.3, 0.8, 0.3, 0.1);\n  }\n  return col4;\n}\n\nvec3 SkyHrzCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol;\n  vec2 q;\n  float f, fd, ff;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n    col = mix (vec3 (0.1, 0.35, 0.1), vec3 (0.3, 0.35, 0.35),\n       smoothstep (-0.02, 0.01, rd.y));\n  } else if (rd.y > 0.) {\n    q = 0.005 * (ro.xz + tCur * vec2 (0.5, 2.) + ((200. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.1, 0.8, ff);\n    fd = smoothstep (0.1, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.8 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    fd = smoothstep (0.01, 0.1, rd.y);\n    col = mix (mix (vec3 (0.8, 0.8, 0.75), vec3 (0.4, 0.5, 0.8), 0.3 + 0.7 * fd), clCol,\n       0.1 + 0.9 * f * fd);\n  }\n  return col;\n}\n\nvec3 GrndCol (vec3 p, float dh, vec3 rd, vec3 roo)\n{     // aliasing reduced by smoothing - see iq's \"Filtering procedurals\"\n  vec4 c;\n  vec3 rdx, rdy, dp;\n  rdx = rd + 0.0005 * vec3 (normalize (vec3 (- roo.z, 0., roo.x)).x, 0., 0.);\n  rdy = rd + 0.0005 * vec3 (0., normalize (cross (vec3 (- roo.z, 0., roo.x), roo)).y, 0.);\n  rdx = dh * (rdx * rd.y / rdx.y - rd);\n  rdy = dh * (rdy * rd.y / rdy.y - rd);\n  c = vec4 (0.);\n  for (float k = float (VAR_ZERO); k < 5.; k ++) {\n    dp = (k == 0.) ? vec3 (0., 0., 1.) : vec3 (2. * mod (k, 2.) - 1., sign (k - 2.5), 0.25);\n    dp.xy = dp.x * rdx.xz + dp.y * rdy.xz;\n    c += dp.z * vec4 (mix (vec3 (0.25, 0.25, 0.), vec3 (0.1, 0.5, 0.2),\n       smoothstep (0.4, 0.6, Fbm2 (2. * (p.xz + dp.xy)))), 1.);\n  }\n  return c.xyz / c.w;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, roo, vn, q;\n  vec2 hc, b, cs, vf;\n  float dstObj, dstObjC, dstObjB, dstGrnd, dFac, sh, ao, ds, f;\n  int idObjC;\n  bool isSky;\n  isSky = false;\n  bgFreqW = 10.;\n  bgAngW[0] = 0.1 * (cos (bgFreqW * tCur) + 0.3);\n  bgAngW[1] = 0.12 * (cos (bgFreqW * tCur + 0.3 * pi) + 0.3);\n  dstObjC = ObjCRay (ro, rd);\n  idObjC = idObj;\n  roo = ro;\n  dstGrnd = dstFar;\n  dstObjB = ObjRay (ro, rd);\n  dstObj = min (dstObjB, dstObjC);\n  vf = vec2 (0.);\n  ao = 1.;\n  sh = 1.;\n  if (dstObj < dstFar) {\n    dFac = 1. - smoothstep (0.15, 0.35, dstObj / dstFar);\n    if (dstObjB < dstObjC) {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      ds = (idObj == idWing) ? WingPat () : 0.;\n      col4 = BugCol (ds);\n      if (idObj == idWing && ds != 0.) {\n        vn = bugMat * vn;\n        vn.yz = clamp (vn.yz - 0.2 * vec2 (sqrt (1. - ds * ds), ds), -1., 1.);\n        vn = normalize (vn) * bugMat;\n      }\n    } else {\n      ro += dstObj * rd;\n      vn = ObjCNf (ro);\n      q = ro;\n      q.xz -= HexToPix (gId * hgSize);\n      hc = Hashv2v2 (27.1 * gId + 0.1);\n      b = q.xz - trOff.xz;\n      idObj = idObjC;\n      if (idObj < 1 + int (trLay)) {\n        f = float (idObj) / trLay;\n        col4 = mix (vec4 (HsvToRgb (vec3 (0.15 * hc.x, 0.8, 0.6)), 0.),\n           vec4 (HsvToRgb (vec3 (0.2 + 0.3 * hc.y, 0.8, 1.)), 0.1), f);\n        if (dot (b, vn.xz) > 0.) {\n          b = Rot2D (b, trTwist * (float (idObj - 1) / trLay));\n          cs = sin (4. * trLeaf * atan (b.y, - b.x) + vec2 (0.5 * pi, 0.)) * dFac;\n          col4 *= 0.95 - 0.05 * cs.x;\n          vn.xz = Rot2D (vn.xz, 0.1 * pi * cs.y);\n        } else col4 *= 0.3;\n        if (dFac > 0.) vf = vec2 (32., 0.8 - 0.6 * smoothstep (0.1, 0.7, f));\n      } else if (idObj == 1 + int (trLay)) {\n        col4 = vec4 (HsvToRgb (vec3 (0.2 + 0.3 * hc.y, 1., 1.)), 0.1);\n      } else  if (idObj == 2 + int (trLay)) {\n        col4 = vec4 (0.3, 0.2, 0.1, 0.) * (0.85 + 0.15 * sin (32. * atan (b.y, - b.x) +\n           0.2 * pi * sin (4. * pi * ro.y)));\n        vf = vec2 (32., 1.);\n      }\n    }\n  } else if (rd.y < 0.) {\n    dstGrnd = - ro.y / rd.y;\n    ro += dstGrnd * rd;\n    vn = vec3 (0., 1., 0.);\n    if (dstGrnd < dstFar) {\n      vf = vec2 (2., 3. * (1. - smoothstep (0.1, 0.15, dstGrnd / dstFar)));\n      col4 = vec4 (GrndCol (ro, dstGrnd, rd, roo), 0.05);\n      gId = PixToHex (ro.xz / hgSize);\n      SetTrConf ();\n      if (trSzFac > 0.) ao = 0.5 + 0.5 * smoothstep (0.3, 1.,\n         length (ro.xz - HexToPix (gId * hgSize) - trOff.xz) / trSzFac);\n      else col4 += 0.7 * pow (Noisefv2 (64. * ro.xz), 32.) * \n         (1. - smoothstep (0.12, 0.15, dstGrnd / dstFar));\n    } else col4 = vec4 (0.1, 0.35, 0.1, 0.);\n  } else isSky = true;\n  if (! isSky) {\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    sh = min (ao, min (ObjCSShadow (ro, sunDir), ObjSShadow (ro, sunDir)));\n    f = dot (vn, sunDir);\n    if (col4.a >= 0.) {\n      col = col4.rgb * (ao * (0.15 + 0.15 * max (- f, 0.)) + 0.8 * sh * max (f, 0.)) +\n         col4.a * step (0.95, sh) * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n    } else {\n      rd = reflect (rd, vn);\n      rd.yz = Rot2D (rd.yz, 0.1);\n      col = mix (col4.rgb * (0.8 - 0.2 * dot (vn, rd)), SkyHrzCol (ro, rd), 0.6);\n    }\n    col = mix (col, SkyHrzCol (roo, rd), smoothstep (0.8, 0.95, min (dstGrnd, dstObj) / dstFar));\n  } else col = SkyHrzCol (ro, rd);\n  return clamp (col, 0., 1.);\n}\n\nvoid BugPM (float t, float s)\n{\n  vec3 vd, cb, sb;\n  float flPit, flYaw, flRol, a;\n  bugPos = TrackPos (t);\n  vd = TrackVel (t);\n  a = SmoothBump (0.35, 0.65, 0.1, mod (tCur / tCyc, 1.));\n  flPit = 0.05 * pi * s;\n  flYaw = 0.5 * pi - atan (vd.z, - vd.x);\n  flRol = 60. * TrackAcc (t).x + 0.7 * (Fbm1 (2. * tCur) - 0.5);\n  if (s > 0.) {\n    flYaw += pi * a * sign (mod (tCur / tCyc, 2.) - 1.);\n    flRol *= (2. * a - 1.);\n  }\n  cb = cos (vec3 (flPit, flYaw, flRol));\n  sb = sin (vec3 (flPit, flYaw, flRol));\n  bugMat = mat3 (1., 0., 0., 0., cb.x, - sb.x, 0., sb.x, cb.x) *\n          mat3 (cb.z, - sb.z, 0., sb.z, cb.z, 0., 0., 0., 1.) *\n          mat3 (cb.y, 0., - sb.y, 0., 1., 0., sb.y , 0., cb.y);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, spd, s;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCur = mod (tCur, 2400.) + 30. * floor (dateCur.w / 7200.);\n  hgSize = 1.;\n  bgSzFac = 0.1;\n  tCyc = 10.;\n  az = 0.;\n  el = -0.02 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  el = clamp (el, -0.2 * pi, 0.1 * pi);\n  spd = 1.;\n  ro = TrackPos (spd * tCur);\n  ro.y = 1.2 + 0.3 * sin (2. * pi * (0.04 * tCur));\n  vd = TrackVel (spd * tCur);\n  az += atan (vd.x, vd.z);\n  s = abs (az) > 0.5 * pi ? -1. : 1.;\n  BugPM (spd * tCur + (3. - 2. * SmoothBump (0.35, 0.65, 0.1, mod (tCur / tCyc, 1.))) * s, s);\n  bugPos.y = 1.2 + 0.35 * sin (2. * pi * (0.04 * tCur + 0.05 * s)) + 0.05 * (Fbm1 (tCur) - 0.5);\n  vuMat = StdVuMat (el, az);\n  zmFac = 3.5;\n  sunDir = normalize (vec3 (0., 1., -0.7));\n  dstFar = 100.;\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (pow (col, vec3 (0.8)), 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrEllips2Df (vec3 p, vec2 r)\n{\n  return (length (p / r.xxy) - 1.) * min (r.x, r.y);\n}\n\nfloat PrEllCylDf (vec3 p, vec2 r, float h)\n{\n  return max ((length (p.xy / r) - 1.) * min (r.x, r.y), abs (p.z) - h);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}