{
    "Shader": {
        "info": {
            "date": "1596798946",
            "description": "oooo..... pseudo bloom.........",
            "flags": 0,
            "hasliked": 0,
            "id": "wtsfD4",
            "likes": 3,
            "name": "theyaremanycolors 7 - blue deep",
            "published": 3,
            "tags": [
                "theyaremanycolors"
            ],
            "usePreview": 0,
            "username": "thefox231",
            "viewed": 227
        },
        "renderpass": [
            {
                "code": "const vec3 layer1Color = vec3(0.0, 0.0, 0.0);\nconst vec3 layer2Color = vec3(1.0, 1.0, 1.0);\nconst vec3 layer3Color = vec3(0.0, 12.0/255.0, 242.0/255.0);\n\n#define scale 40.0\n#define offset 10.0\n\n#define passes 20.0\n#define bloomSize 0.2\n\n#define fisheye_amount -0.4\n\nfloat hash(vec3 p3)\n{\n    p3.xy *= 400.0;\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat smoothHash(vec3 p3) {\n   \treturn mix(round(hash(vec3(p3.xy, floor(p3.z)))), round(hash(vec3(p3.xy, ceil(p3.z)))), fract(p3.z));\n}\n\nvec4 render(vec2 uv) {\n    // fisheye\n\n    uv -= 0.5;\n    uv *= 1.0 - fisheye_amount / 2.0;\n\n    float r = sqrt(dot(uv,uv));\n    uv *= 1.0 + r * fisheye_amount;\n    uv += 0.5;\n\n    vec2 res = iResolution.xy;\n    uv = clamp( uv, 1.0 / res, (res - 1.0) / res );\n\n    // fisheye end\n    \n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 col = layer1Color;\n    \n    vec2 uvPix = round(uv * scale) / scale;\n    float hash1 = (smoothHash(vec3(uvPix, iTime * 3.3 + uv.x * 2.63)));\n    \n    uv += offset / iResolution.xy;\n    uvPix = round(uv * scale) / scale;\n    float hash2 = (smoothHash(vec3(uvPix, iTime * 5.3 + 90.0 + uvPix.y * 25.3 + uvPix.x * 24.53)));\n    \n    col = mix(col, layer2Color, hash1);\n    col = mix(col, layer3Color, hash2);\n    \n    return vec4(col,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 col = vec4(0.0);\n    \n    for (int i = 0; float(i) < passes; i++) {\n        float progress = float(i) / passes;\n        vec2 scaledUv = (uv - 0.5) * (1.0 + progress * bloomSize) + 0.5;\n        vec4 rendered = render(scaledUv);\n        \n        float lumi = (rendered.r + rendered.g + rendered.b) / 3.0;\n        \n        col += rendered * pow(1.0 - progress, 3.0) * pow(lumi, 2.0);\n    }\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}