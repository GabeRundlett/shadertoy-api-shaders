{
    "Shader": {
        "info": {
            "date": "1724100506",
            "description": "I was lucky enough to see the aurora in person while trying to photograph the perseid meteor shower, from my location it was pale and the colours were only visible in long exposure photographs. I created this shader to represent the experience.  ",
            "flags": 0,
            "hasliked": 0,
            "id": "XcsBz7",
            "likes": 0,
            "name": "Aurora in Monochrome",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "night",
                "aurora"
            ],
            "usePreview": 0,
            "username": "Dragonpeak",
            "viewed": 99
        },
        "renderpass": [
            {
                "code": "\nuvec2 pcg2d(uvec2 v)\n{\n    //from https://www.shadertoy.com/view/XlGcRh\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    return v;\n}\n\nvec2 rand2(vec2 v)\n{\n    return vec2(pcg2d(uvec2(v*87198.5193)))/float(0xffffffffu);\n}\nfloat fastVoro(vec2 uv)\n{\n    float dist = 9999.;\n    vec2 currentCell = floor(uv);\n    \n    for(int x = -1; x <= 1; x++)\n    {\n        for(int y = -1; y <= 1; y++)\n        {\n            vec2 v = (currentCell+vec2(x,y)+rand2(currentCell+vec2(x,y)));\n            dist = min(abs(uv.x-v.x)+abs(uv.y-v.y)/rand2(v).x,dist);\n        }\n    }\n    return sqrt(dist)*.6;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y*2.-1.-vec2(iResolution.x/iResolution.y/2.,0);\n    float t = floor(iDate.z+3.);\n    \n    float col = 0.;\n\n    if(length(uv) < 1.)\n    {\n        col = .95-smoothstep(.8,.98,1.-fastVoro(uv*10.12+12555.12+t));\n        col *= 1.-smoothstep(.75,.95,1.-fastVoro(uv*23.12+918.12+t))*.2;\n        \n        col *= length(uv*.4+vec2(0,.6));\n        float uy = uv.y;\n        for(int i = 0; i < 30; i++)\n        {\n            float a = (smoothstep(0.1,.9,fastVoro((vec2(uv.x/(abs(uy+.4)+.2),uy))*2.+2141.25+t)*smoothstep(0.,.7,1.-length(vec2(uv.x,uy)*vec2(.5,1.)))))*.03;\n            a+= (smoothstep(0.1,.9,fastVoro((vec2(uv.x/(abs(uy+.4)+.2),uy))*12.+2141.25+t*1.1)*smoothstep(0.,.7,1.-length(vec2(uv.x,uy)*vec2(.5,1.)))))*.008;\n            col -= a*smoothstep(.4,1.,uv.y+1.1)*.9;\n            uy+=.03;\n        }\n        \n        \n        col *= 1.-smoothstep(0.8,1.,length(uv));\n        \n        for(int i = 0; i < 5; i++)\n        {\n            if(uv.y < sin(3.*t-uv.x*6.1+float(i)*41.251)*.05-pow(float(i)*2.4,.5)*.1-.4+pow(uv.x,1.4)*.2)\n            {\n                col = mix(.1, 0., float(i)/5.);\n                col += smoothstep(0.5,1.,1.-abs(uv.y+.63+float(i)*0.14)*2.5)*smoothstep(0.5,.6,1.-fastVoro(uv*vec2(56.3,97.3)+124.12+t));\n            }\n            \n        }\n    }\n    col += ((rand2(uv+vec2(12.)).x)*2.-1.)*.02;\n    fragColor = vec4(vec3(pow(clamp(col,0.,1.),1.1)),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}