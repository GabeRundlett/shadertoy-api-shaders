{
    "Shader": {
        "info": {
            "date": "1563374784",
            "description": "Basic filter to convert images into ASCII",
            "flags": 34,
            "hasliked": 0,
            "id": "tlfXzB",
            "likes": 13,
            "name": "ASCII filter",
            "published": 3,
            "tags": [
                "filter",
                "ascii"
            ],
            "usePreview": 0,
            "username": "elementbound",
            "viewed": 3078
        },
        "renderpass": [
            {
                "code": "#define INPUT iChannel0\n#define FONT iChannel1\n#define BUFFER_A iChannel2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 fontUvSize = vec2(FONT_SIZE) / iResolution.xy;\n    vec2 fontUv = floor(uv / fontUvSize) * fontUvSize;\n    vec2 charUv = (uv - fontUv) / fontUvSize;\n\n    // Output to screen\n    vec4 data = texture(BUFFER_A, fontUv + vec2(0.5) * (1.0 / iResolution.xy));\n    \n    int charIndex = int(data.x);\n    int foreIndex = int(data.y);\n    int backIndex = int(data.z);\n    \n    float charAlpha = getChar(FONT, CHAR_PALETTE[charIndex], charUv).r;\n    \n    fragColor = vec4(mix(COLOR_PALETTE[foreIndex], COLOR_PALETTE[backIndex], charAlpha), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const ivec2 FONT_SIZE = ivec2(12, 12);\n\n#define EXTENDED_CHAR_PALETTE 0\n#define EXTENDED_COLOR_PALETTE 0\n#define BRIGHTNESS_SAMPLE_RES 4\n\n#if EXTENDED_COLOR_PALETTE\nconst int COLOR_PALETTE_SIZE = 256;\nconst vec3[256] COLOR_PALETTE = vec3[256] (\n    vec3(0.0 / 255.0, 0.0 / 255.0, 0.0 / 255.0), \n    vec3(128.0 / 255.0, 0.0 / 255.0, 0.0 / 255.0),\n    vec3(0.0 / 255.0, 128.0 / 255.0, 0.0 / 255.0),\n    vec3(128.0 / 255.0, 128.0 / 255.0, 0.0 / 255.0),\n    vec3(0.0 / 255.0, 0.0 / 255.0, 128.0 / 255.0),\n    vec3(128.0 / 255.0, 0.0 / 255.0, 128.0 / 255.0),\n    vec3(0.0 / 255.0, 128.0 / 255.0, 128.0 / 255.0),\n    vec3(192.0 / 255.0, 192.0 / 255.0, 192.0 / 255.0),\n    vec3(128.0 / 255.0, 128.0 / 255.0, 128.0 / 255.0),\n    vec3(255.0 / 255.0, 0.0 / 255.0, 0.0 / 255.0),\n    vec3(0.0 / 255.0, 255.0 / 255.0, 0.0 / 255.0),\n    vec3(255.0 / 255.0, 255.0 / 255.0, 0.0 / 255.0),\n    vec3(0.0 / 255.0, 0.0 / 255.0, 255.0 / 255.0),\n    vec3(255.0 / 255.0, 0.0 / 255.0, 255.0 / 255.0),\n    vec3(0.0 / 255.0, 255.0 / 255.0, 255.0 / 255.0),\n    vec3(255.0 / 255.0, 255.0 / 255.0, 255.0 / 255.0),\n    vec3(0.0 / 255.0, 0.0 / 255.0, 0.0 / 255.0),\n    vec3(0.0 / 255.0, 0.0 / 255.0, 95.0 / 255.0),\n    vec3(0.0 / 255.0, 0.0 / 255.0, 135.0 / 255.0),\n    vec3(0.0 / 255.0, 0.0 / 255.0, 175.0 / 255.0),\n    vec3(0.0 / 255.0, 0.0 / 255.0, 215.0 / 255.0),\n    vec3(0.0 / 255.0, 0.0 / 255.0, 255.0 / 255.0),\n    vec3(0.0 / 255.0, 95.0 / 255.0, 0.0 / 255.0),\n    vec3(0.0 / 255.0, 95.0 / 255.0, 95.0 / 255.0),\n    vec3(0.0 / 255.0, 95.0 / 255.0, 135.0 / 255.0),\n    vec3(0.0 / 255.0, 95.0 / 255.0, 175.0 / 255.0),\n    vec3(0.0 / 255.0, 95.0 / 255.0, 215.0 / 255.0),\n    vec3(0.0 / 255.0, 95.0 / 255.0, 255.0 / 255.0),\n    vec3(0.0 / 255.0, 135.0 / 255.0, 0.0 / 255.0),\n    vec3(0.0 / 255.0, 135.0 / 255.0, 95.0 / 255.0),\n    vec3(0.0 / 255.0, 135.0 / 255.0, 135.0 / 255.0),\n    vec3(0.0 / 255.0, 135.0 / 255.0, 175.0 / 255.0),\n    vec3(0.0 / 255.0, 135.0 / 255.0, 215.0 / 255.0),\n    vec3(0.0 / 255.0, 135.0 / 255.0, 255.0 / 255.0),\n    vec3(0.0 / 255.0, 175.0 / 255.0, 0.0 / 255.0),\n    vec3(0.0 / 255.0, 175.0 / 255.0, 95.0 / 255.0),\n    vec3(0.0 / 255.0, 175.0 / 255.0, 135.0 / 255.0),\n    vec3(0.0 / 255.0, 175.0 / 255.0, 175.0 / 255.0),\n    vec3(0.0 / 255.0, 175.0 / 255.0, 215.0 / 255.0),\n    vec3(0.0 / 255.0, 175.0 / 255.0, 255.0 / 255.0),\n    vec3(0.0 / 255.0, 215.0 / 255.0, 0.0 / 255.0),\n    vec3(0.0 / 255.0, 215.0 / 255.0, 95.0 / 255.0),\n    vec3(0.0 / 255.0, 215.0 / 255.0, 135.0 / 255.0),\n    vec3(0.0 / 255.0, 215.0 / 255.0, 175.0 / 255.0),\n    vec3(0.0 / 255.0, 215.0 / 255.0, 215.0 / 255.0),\n    vec3(0.0 / 255.0, 215.0 / 255.0, 255.0 / 255.0),\n    vec3(0.0 / 255.0, 255.0 / 255.0, 0.0 / 255.0),\n    vec3(0.0 / 255.0, 255.0 / 255.0, 95.0 / 255.0),\n    vec3(0.0 / 255.0, 255.0 / 255.0, 135.0 / 255.0),\n    vec3(0.0 / 255.0, 255.0 / 255.0, 175.0 / 255.0),\n    vec3(0.0 / 255.0, 255.0 / 255.0, 215.0 / 255.0),\n    vec3(0.0 / 255.0, 255.0 / 255.0, 255.0 / 255.0),\n    vec3(95.0 / 255.0, 0.0 / 255.0, 0.0 / 255.0),\n    vec3(95.0 / 255.0, 0.0 / 255.0, 95.0 / 255.0),\n    vec3(95.0 / 255.0, 0.0 / 255.0, 135.0 / 255.0),\n    vec3(95.0 / 255.0, 0.0 / 255.0, 175.0 / 255.0),\n    vec3(95.0 / 255.0, 0.0 / 255.0, 215.0 / 255.0),\n    vec3(95.0 / 255.0, 0.0 / 255.0, 255.0 / 255.0),\n    vec3(95.0 / 255.0, 95.0 / 255.0, 0.0 / 255.0),\n    vec3(95.0 / 255.0, 95.0 / 255.0, 95.0 / 255.0),\n    vec3(95.0 / 255.0, 95.0 / 255.0, 135.0 / 255.0),\n    vec3(95.0 / 255.0, 95.0 / 255.0, 175.0 / 255.0),\n    vec3(95.0 / 255.0, 95.0 / 255.0, 215.0 / 255.0),\n    vec3(95.0 / 255.0, 95.0 / 255.0, 255.0 / 255.0),\n    vec3(95.0 / 255.0, 135.0 / 255.0, 0.0 / 255.0),\n    vec3(95.0 / 255.0, 135.0 / 255.0, 95.0 / 255.0),\n    vec3(95.0 / 255.0, 135.0 / 255.0, 135.0 / 255.0),\n    vec3(95.0 / 255.0, 135.0 / 255.0, 175.0 / 255.0),\n    vec3(95.0 / 255.0, 135.0 / 255.0, 215.0 / 255.0),\n    vec3(95.0 / 255.0, 135.0 / 255.0, 255.0 / 255.0),\n    vec3(95.0 / 255.0, 175.0 / 255.0, 0.0 / 255.0),\n    vec3(95.0 / 255.0, 175.0 / 255.0, 95.0 / 255.0),\n    vec3(95.0 / 255.0, 175.0 / 255.0, 135.0 / 255.0),\n    vec3(95.0 / 255.0, 175.0 / 255.0, 175.0 / 255.0),\n    vec3(95.0 / 255.0, 175.0 / 255.0, 215.0 / 255.0),\n    vec3(95.0 / 255.0, 175.0 / 255.0, 255.0 / 255.0),\n    vec3(95.0 / 255.0, 215.0 / 255.0, 0.0 / 255.0),\n    vec3(95.0 / 255.0, 215.0 / 255.0, 95.0 / 255.0),\n    vec3(95.0 / 255.0, 215.0 / 255.0, 135.0 / 255.0),\n    vec3(95.0 / 255.0, 215.0 / 255.0, 175.0 / 255.0),\n    vec3(95.0 / 255.0, 215.0 / 255.0, 215.0 / 255.0),\n    vec3(95.0 / 255.0, 215.0 / 255.0, 255.0 / 255.0),\n    vec3(95.0 / 255.0, 255.0 / 255.0, 0.0 / 255.0),\n    vec3(95.0 / 255.0, 255.0 / 255.0, 95.0 / 255.0),\n    vec3(95.0 / 255.0, 255.0 / 255.0, 135.0 / 255.0),\n    vec3(95.0 / 255.0, 255.0 / 255.0, 175.0 / 255.0),\n    vec3(95.0 / 255.0, 255.0 / 255.0, 215.0 / 255.0),\n    vec3(95.0 / 255.0, 255.0 / 255.0, 255.0 / 255.0),\n    vec3(135.0 / 255.0, 0.0 / 255.0, 0.0 / 255.0),\n    vec3(135.0 / 255.0, 0.0 / 255.0, 95.0 / 255.0),\n    vec3(135.0 / 255.0, 0.0 / 255.0, 135.0 / 255.0),\n    vec3(135.0 / 255.0, 0.0 / 255.0, 175.0 / 255.0),\n    vec3(135.0 / 255.0, 0.0 / 255.0, 215.0 / 255.0),\n    vec3(135.0 / 255.0, 0.0 / 255.0, 255.0 / 255.0),\n    vec3(135.0 / 255.0, 95.0 / 255.0, 0.0 / 255.0),\n    vec3(135.0 / 255.0, 95.0 / 255.0, 95.0 / 255.0),\n    vec3(135.0 / 255.0, 95.0 / 255.0, 135.0 / 255.0),\n    vec3(135.0 / 255.0, 95.0 / 255.0, 175.0 / 255.0),\n    vec3(135.0 / 255.0, 95.0 / 255.0, 215.0 / 255.0),\n    vec3(135.0 / 255.0, 95.0 / 255.0, 255.0 / 255.0),\n    vec3(135.0 / 255.0, 135.0 / 255.0, 0.0 / 255.0),\n    vec3(135.0 / 255.0, 135.0 / 255.0, 95.0 / 255.0),\n    vec3(135.0 / 255.0, 135.0 / 255.0, 135.0 / 255.0),\n    vec3(135.0 / 255.0, 135.0 / 255.0, 175.0 / 255.0),\n    vec3(135.0 / 255.0, 135.0 / 255.0, 215.0 / 255.0),\n    vec3(135.0 / 255.0, 135.0 / 255.0, 255.0 / 255.0),\n    vec3(135.0 / 255.0, 175.0 / 255.0, 0.0 / 255.0),\n    vec3(135.0 / 255.0, 175.0 / 255.0, 95.0 / 255.0),\n    vec3(135.0 / 255.0, 175.0 / 255.0, 135.0 / 255.0),\n    vec3(135.0 / 255.0, 175.0 / 255.0, 175.0 / 255.0),\n    vec3(135.0 / 255.0, 175.0 / 255.0, 215.0 / 255.0),\n    vec3(135.0 / 255.0, 175.0 / 255.0, 255.0 / 255.0),\n    vec3(135.0 / 255.0, 215.0 / 255.0, 0.0 / 255.0),\n    vec3(135.0 / 255.0, 215.0 / 255.0, 95.0 / 255.0),\n    vec3(135.0 / 255.0, 215.0 / 255.0, 135.0 / 255.0),\n    vec3(135.0 / 255.0, 215.0 / 255.0, 175.0 / 255.0),\n    vec3(135.0 / 255.0, 215.0 / 255.0, 215.0 / 255.0),\n    vec3(135.0 / 255.0, 215.0 / 255.0, 255.0 / 255.0),\n    vec3(135.0 / 255.0, 255.0 / 255.0, 0.0 / 255.0),\n    vec3(135.0 / 255.0, 255.0 / 255.0, 95.0 / 255.0),\n    vec3(135.0 / 255.0, 255.0 / 255.0, 135.0 / 255.0),\n    vec3(135.0 / 255.0, 255.0 / 255.0, 175.0 / 255.0),\n    vec3(135.0 / 255.0, 255.0 / 255.0, 215.0 / 255.0),\n    vec3(135.0 / 255.0, 255.0 / 255.0, 255.0 / 255.0),\n    vec3(175.0 / 255.0, 0.0 / 255.0, 0.0 / 255.0),\n    vec3(175.0 / 255.0, 0.0 / 255.0, 95.0 / 255.0),\n    vec3(175.0 / 255.0, 0.0 / 255.0, 135.0 / 255.0),\n    vec3(175.0 / 255.0, 0.0 / 255.0, 175.0 / 255.0),\n    vec3(175.0 / 255.0, 0.0 / 255.0, 215.0 / 255.0),\n    vec3(175.0 / 255.0, 0.0 / 255.0, 255.0 / 255.0),\n    vec3(175.0 / 255.0, 95.0 / 255.0, 0.0 / 255.0),\n    vec3(175.0 / 255.0, 95.0 / 255.0, 95.0 / 255.0),\n    vec3(175.0 / 255.0, 95.0 / 255.0, 135.0 / 255.0),\n    vec3(175.0 / 255.0, 95.0 / 255.0, 175.0 / 255.0),\n    vec3(175.0 / 255.0, 95.0 / 255.0, 215.0 / 255.0),\n    vec3(175.0 / 255.0, 95.0 / 255.0, 255.0 / 255.0),\n    vec3(175.0 / 255.0, 135.0 / 255.0, 0.0 / 255.0),\n    vec3(175.0 / 255.0, 135.0 / 255.0, 95.0 / 255.0),\n    vec3(175.0 / 255.0, 135.0 / 255.0, 135.0 / 255.0),\n    vec3(175.0 / 255.0, 135.0 / 255.0, 175.0 / 255.0),\n    vec3(175.0 / 255.0, 135.0 / 255.0, 215.0 / 255.0),\n    vec3(175.0 / 255.0, 135.0 / 255.0, 255.0 / 255.0),\n    vec3(175.0 / 255.0, 175.0 / 255.0, 0.0 / 255.0),\n    vec3(175.0 / 255.0, 175.0 / 255.0, 95.0 / 255.0),\n    vec3(175.0 / 255.0, 175.0 / 255.0, 135.0 / 255.0),\n    vec3(175.0 / 255.0, 175.0 / 255.0, 175.0 / 255.0),\n    vec3(175.0 / 255.0, 175.0 / 255.0, 215.0 / 255.0),\n    vec3(175.0 / 255.0, 175.0 / 255.0, 255.0 / 255.0),\n    vec3(175.0 / 255.0, 215.0 / 255.0, 0.0 / 255.0),\n    vec3(175.0 / 255.0, 215.0 / 255.0, 95.0 / 255.0),\n    vec3(175.0 / 255.0, 215.0 / 255.0, 135.0 / 255.0),\n    vec3(175.0 / 255.0, 215.0 / 255.0, 175.0 / 255.0),\n    vec3(175.0 / 255.0, 215.0 / 255.0, 215.0 / 255.0),\n    vec3(175.0 / 255.0, 215.0 / 255.0, 255.0 / 255.0),\n    vec3(175.0 / 255.0, 255.0 / 255.0, 0.0 / 255.0),\n    vec3(175.0 / 255.0, 255.0 / 255.0, 95.0 / 255.0),\n    vec3(175.0 / 255.0, 255.0 / 255.0, 135.0 / 255.0),\n    vec3(175.0 / 255.0, 255.0 / 255.0, 175.0 / 255.0),\n    vec3(175.0 / 255.0, 255.0 / 255.0, 215.0 / 255.0),\n    vec3(175.0 / 255.0, 255.0 / 255.0, 255.0 / 255.0),\n    vec3(215.0 / 255.0, 0.0 / 255.0, 0.0 / 255.0),\n    vec3(215.0 / 255.0, 0.0 / 255.0, 95.0 / 255.0),\n    vec3(215.0 / 255.0, 0.0 / 255.0, 135.0 / 255.0),\n    vec3(215.0 / 255.0, 0.0 / 255.0, 175.0 / 255.0),\n    vec3(215.0 / 255.0, 0.0 / 255.0, 215.0 / 255.0),\n    vec3(215.0 / 255.0, 0.0 / 255.0, 255.0 / 255.0),\n    vec3(215.0 / 255.0, 95.0 / 255.0, 0.0 / 255.0),\n    vec3(215.0 / 255.0, 95.0 / 255.0, 95.0 / 255.0),\n    vec3(215.0 / 255.0, 95.0 / 255.0, 135.0 / 255.0),\n    vec3(215.0 / 255.0, 95.0 / 255.0, 175.0 / 255.0),\n    vec3(215.0 / 255.0, 95.0 / 255.0, 215.0 / 255.0),\n    vec3(215.0 / 255.0, 95.0 / 255.0, 255.0 / 255.0),\n    vec3(215.0 / 255.0, 135.0 / 255.0, 0.0 / 255.0),\n    vec3(215.0 / 255.0, 135.0 / 255.0, 95.0 / 255.0),\n    vec3(215.0 / 255.0, 135.0 / 255.0, 135.0 / 255.0),\n    vec3(215.0 / 255.0, 135.0 / 255.0, 175.0 / 255.0),\n    vec3(215.0 / 255.0, 135.0 / 255.0, 215.0 / 255.0),\n    vec3(215.0 / 255.0, 135.0 / 255.0, 255.0 / 255.0),\n    vec3(215.0 / 255.0, 175.0 / 255.0, 0.0 / 255.0),\n    vec3(215.0 / 255.0, 175.0 / 255.0, 95.0 / 255.0),\n    vec3(215.0 / 255.0, 175.0 / 255.0, 135.0 / 255.0),\n    vec3(215.0 / 255.0, 175.0 / 255.0, 175.0 / 255.0),\n    vec3(215.0 / 255.0, 175.0 / 255.0, 215.0 / 255.0),\n    vec3(215.0 / 255.0, 175.0 / 255.0, 255.0 / 255.0),\n    vec3(215.0 / 255.0, 215.0 / 255.0, 0.0 / 255.0),\n    vec3(215.0 / 255.0, 215.0 / 255.0, 95.0 / 255.0),\n    vec3(215.0 / 255.0, 215.0 / 255.0, 135.0 / 255.0),\n    vec3(215.0 / 255.0, 215.0 / 255.0, 175.0 / 255.0),\n    vec3(215.0 / 255.0, 215.0 / 255.0, 215.0 / 255.0),\n    vec3(215.0 / 255.0, 215.0 / 255.0, 255.0 / 255.0),\n    vec3(215.0 / 255.0, 255.0 / 255.0, 0.0 / 255.0),\n    vec3(215.0 / 255.0, 255.0 / 255.0, 95.0 / 255.0),\n    vec3(215.0 / 255.0, 255.0 / 255.0, 135.0 / 255.0),\n    vec3(215.0 / 255.0, 255.0 / 255.0, 175.0 / 255.0),\n    vec3(215.0 / 255.0, 255.0 / 255.0, 215.0 / 255.0),\n    vec3(215.0 / 255.0, 255.0 / 255.0, 255.0 / 255.0),\n    vec3(255.0 / 255.0, 0.0 / 255.0, 0.0 / 255.0),\n    vec3(255.0 / 255.0, 0.0 / 255.0, 95.0 / 255.0),\n    vec3(255.0 / 255.0, 0.0 / 255.0, 135.0 / 255.0),\n    vec3(255.0 / 255.0, 0.0 / 255.0, 175.0 / 255.0),\n    vec3(255.0 / 255.0, 0.0 / 255.0, 215.0 / 255.0),\n    vec3(255.0 / 255.0, 0.0 / 255.0, 255.0 / 255.0),\n    vec3(255.0 / 255.0, 95.0 / 255.0, 0.0 / 255.0),\n    vec3(255.0 / 255.0, 95.0 / 255.0, 95.0 / 255.0),\n    vec3(255.0 / 255.0, 95.0 / 255.0, 135.0 / 255.0),\n    vec3(255.0 / 255.0, 95.0 / 255.0, 175.0 / 255.0),\n    vec3(255.0 / 255.0, 95.0 / 255.0, 215.0 / 255.0),\n    vec3(255.0 / 255.0, 95.0 / 255.0, 255.0 / 255.0),\n    vec3(255.0 / 255.0, 135.0 / 255.0, 0.0 / 255.0),\n    vec3(255.0 / 255.0, 135.0 / 255.0, 95.0 / 255.0),\n    vec3(255.0 / 255.0, 135.0 / 255.0, 135.0 / 255.0),\n    vec3(255.0 / 255.0, 135.0 / 255.0, 175.0 / 255.0),\n    vec3(255.0 / 255.0, 135.0 / 255.0, 215.0 / 255.0),\n    vec3(255.0 / 255.0, 135.0 / 255.0, 255.0 / 255.0),\n    vec3(255.0 / 255.0, 175.0 / 255.0, 0.0 / 255.0),\n    vec3(255.0 / 255.0, 175.0 / 255.0, 95.0 / 255.0),\n    vec3(255.0 / 255.0, 175.0 / 255.0, 135.0 / 255.0),\n    vec3(255.0 / 255.0, 175.0 / 255.0, 175.0 / 255.0),\n    vec3(255.0 / 255.0, 175.0 / 255.0, 215.0 / 255.0),\n    vec3(255.0 / 255.0, 175.0 / 255.0, 255.0 / 255.0),\n    vec3(255.0 / 255.0, 215.0 / 255.0, 0.0 / 255.0),\n    vec3(255.0 / 255.0, 215.0 / 255.0, 95.0 / 255.0),\n    vec3(255.0 / 255.0, 215.0 / 255.0, 135.0 / 255.0),\n    vec3(255.0 / 255.0, 215.0 / 255.0, 175.0 / 255.0),\n    vec3(255.0 / 255.0, 215.0 / 255.0, 215.0 / 255.0),\n    vec3(255.0 / 255.0, 215.0 / 255.0, 255.0 / 255.0),\n    vec3(255.0 / 255.0, 255.0 / 255.0, 0.0 / 255.0),\n    vec3(255.0 / 255.0, 255.0 / 255.0, 95.0 / 255.0),\n    vec3(255.0 / 255.0, 255.0 / 255.0, 135.0 / 255.0),\n    vec3(255.0 / 255.0, 255.0 / 255.0, 175.0 / 255.0),\n    vec3(255.0 / 255.0, 255.0 / 255.0, 215.0 / 255.0),\n    vec3(255.0 / 255.0, 255.0 / 255.0, 255.0 / 255.0),\n    vec3(8.0 / 255.0, 8.0 / 255.0, 8.0 / 255.0),\n    vec3(18.0 / 255.0, 18.0 / 255.0, 18.0 / 255.0),\n    vec3(28.0 / 255.0, 28.0 / 255.0, 28.0 / 255.0),\n    vec3(38.0 / 255.0, 38.0 / 255.0, 38.0 / 255.0),\n    vec3(48.0 / 255.0, 48.0 / 255.0, 48.0 / 255.0),\n    vec3(58.0 / 255.0, 58.0 / 255.0, 58.0 / 255.0),\n    vec3(68.0 / 255.0, 68.0 / 255.0, 68.0 / 255.0),\n    vec3(78.0 / 255.0, 78.0 / 255.0, 78.0 / 255.0),\n    vec3(88.0 / 255.0, 88.0 / 255.0, 88.0 / 255.0),\n    vec3(98.0 / 255.0, 98.0 / 255.0, 98.0 / 255.0),\n    vec3(108.0 / 255.0, 108.0 / 255.0, 108.0 / 255.0),\n    vec3(118.0 / 255.0, 118.0 / 255.0, 118.0 / 255.0),\n    vec3(128.0 / 255.0, 128.0 / 255.0, 128.0 / 255.0),\n    vec3(138.0 / 255.0, 138.0 / 255.0, 138.0 / 255.0),\n    vec3(148.0 / 255.0, 148.0 / 255.0, 148.0 / 255.0),\n    vec3(158.0 / 255.0, 158.0 / 255.0, 158.0 / 255.0),\n    vec3(168.0 / 255.0, 168.0 / 255.0, 168.0 / 255.0),\n    vec3(178.0 / 255.0, 178.0 / 255.0, 178.0 / 255.0),\n    vec3(188.0 / 255.0, 188.0 / 255.0, 188.0 / 255.0),\n    vec3(198.0 / 255.0, 198.0 / 255.0, 198.0 / 255.0),\n    vec3(208.0 / 255.0, 208.0 / 255.0, 208.0 / 255.0),\n    vec3(218.0 / 255.0, 218.0 / 255.0, 218.0 / 255.0),\n    vec3(228.0 / 255.0, 228.0 / 255.0, 228.0 / 255.0),\n    vec3(238.0 / 255.0, 238.0 / 255.0, 238.0 / 255.0)\n);\n#else\nconst int COLOR_PALETTE_SIZE = 16;\nconst vec3[16] COLOR_PALETTE = vec3[16] (\n        vec3(0.0 / 255.0, 0.0 / 255.0, 0.0 / 255.0),\n        vec3(170.0 / 255.0, 0.0 / 255.0, 0.0 / 255.0),\n        vec3(0.0 / 255.0, 170.0 / 255.0, 0.0 / 255.0),\n        vec3(170.0 / 255.0, 85.0 / 255.0, 0.0 / 255.0),\n        vec3(0.0 / 255.0, 0.0 / 255.0, 170.0 / 255.0),\n        vec3(170.0 / 255.0, 0.0 / 255.0, 170.0 / 255.0),\n        vec3(0.0 / 255.0, 170.0 / 255.0, 170.0 / 255.0),\n        vec3(170.0 / 255.0, 170.0 / 255.0, 170.0 / 255.0),\n        vec3(85.0 / 255.0, 85.0 / 255.0, 85.0 / 255.0),\n        vec3(255.0 / 255.0, 85.0 / 255.0, 85.0 / 255.0),\n        vec3(85.0 / 255.0, 255.0 / 255.0, 85.0 / 255.0),\n        vec3(255.0 / 255.0, 255.0 / 255.0, 85.0 / 255.0),\n        vec3(85.0 / 255.0, 85.0 / 255.0, 255.0 / 255.0),\n        vec3(255.0 / 255.0, 85.0 / 255.0, 255.0 / 255.0),\n        vec3(85.0 / 255.0, 255.0 / 255.0, 255.0 / 255.0),\n        vec3(255.0 / 255.0, 255.0 / 255.0, 255.0 / 255.0)\n    );\n#endif\n\n#if EXTENDED_CHAR_PALETTE\nconst int CHAR_PALETTE_SIZE = 69;\nconst int[69] CHAR_PALETTE = int[69]( \n    32, 46, 39, 96, 94, 34, 44, 58, \n    59, 73, 108, 33, 105, 62, 60, 126, \n    43, 95, 45, 63, 93, 91, 125, 123, \n    49, 41, 40, 124, 47, 116, 102, 106, \n    114, 120, 110, 117, 118, 99, 122, 88, \n    89, 85, 74, 67, 76, 81, 48, 79, \n    90, 109, 119, 113, 112, 100, 98, 107, \n    104, 97, 111, 42, 35, 77, 87, 38, \n    56, 37, 66, 64, 36 );\nconst float CROP_FACTOR = 0.6;\n#else\nconst int CHAR_PALETTE_SIZE = 10;\nconst int[10] CHAR_PALETTE = int[10]( 32, 46, 58, 45, 61, 43, 42, 35, 37, 64 );\nconst float CROP_FACTOR = 0.6;\n#endif\n\nvec4 getChar(sampler2D font,int char, vec2 uv) {\n    int x = char % 16;\n    int y = 15 - (char / 16);\n    \n    vec2 baseUv = vec2(float(x) / 16.0, float(y) / 16.0);\n    vec2 subUv = (0.5 + (uv - 0.5) * CROP_FACTOR) / 16.0;\n\tvec4 color = texture(font, baseUv + subUv);\n    \n    //return color.a < 0.51 ? vec4(1.0) : vec4(0.0);\n    return vec4(color.r);\n}\n\nfloat brightness(vec4 color) {\n    return max(color.r, max(color.g, color.b));\n}\n\nvec4 getColor(sampler2D image, vec2 baseUv, vec2 fontSize, int sampleRes) {\n    vec4 color = vec4(0.0);\n    \n    for(int x = 0; x < sampleRes; x++) {\n        for(int y = 0; y < sampleRes; y++) {\n            color += texture(image, baseUv + fontSize * vec2(float(x) / float(sampleRes), float(y) / float(sampleRes)));\n        }\n    }\n    \n    return color / float(sampleRes * sampleRes);\n}\n\nvoid getPaletteColors(vec3 color, out int foreIndex, out int backIndex, out float factor) {\n    float minDistance = 1.0;\n    float dst;\n    \n    for(int i = 0; i < COLOR_PALETTE_SIZE; i++) {\n        dst = distance(color, COLOR_PALETTE[i]);\n        if(dst < minDistance) {\n            minDistance = dst;\n            foreIndex = i;\n        }\n    }\n    \n    vec3 delta = normalize(color - COLOR_PALETTE[foreIndex]);\n    minDistance = 1.0;\n    \n    for(int i = 0; i < COLOR_PALETTE_SIZE; i++) {\n        vec3 axis = normalize(COLOR_PALETTE[i] - COLOR_PALETTE[foreIndex]);\n        dst = 1.0 - dot(axis, delta);\n        \n        if(dst < minDistance) {\n            minDistance = dst;\n            backIndex = i;\n        }\n    }\n    \n    float foredst = distance(color, COLOR_PALETTE[foreIndex]);\n    float backdst = distance(color, COLOR_PALETTE[backIndex]);\n    factor = foredst / backdst;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define INPUT iChannel0\n#define FONT iChannel1\n#define BUFFER_A iChannel2\n\nvec4 getOutput(vec2 fontUv, vec2 fontUvSize) {\n    vec4 inputColor = getColor(INPUT, fontUv, fontUvSize, BRIGHTNESS_SAMPLE_RES);\n    \n    int foreIndex, backIndex;\n    float value;\n    getPaletteColors(inputColor.rgb, foreIndex, backIndex, value);\n    \n    int paletteIndex = int(value * float(CHAR_PALETTE_SIZE));\n    \n    return vec4(paletteIndex, foreIndex, backIndex, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec2 pixelSize = 1.0 / vec2(FONT_SIZE);\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 fontUvSize = vec2(FONT_SIZE) / iResolution.xy;\n    vec2 fontUv = floor(uv / fontUvSize) * fontUvSize;\n    vec2 charUv = (uv - fontUv) / fontUvSize;\n    \n    if(charUv.x < pixelSize.x && charUv.y < pixelSize.y) {\n        vec4 result = getOutput(fontUv, fontUvSize);\n        fragColor = vec4(COLOR_PALETTE[int(result.z)], 1.0);\n        fragColor = result;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}