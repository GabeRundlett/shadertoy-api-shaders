{
    "Shader": {
        "info": {
            "date": "1560459624",
            "description": "I was looking for waves that would look good on a flat 2D plane. I didn't really find something to my liking so I tinkered a bit (with some inspiration from other shaders obviously). I thought the result was decent so I wanted to share.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttSGRc",
            "likes": 49,
            "name": "Flat water effects",
            "published": 3,
            "tags": [
                "waterraytrace"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 2113
        },
        "renderpass": [
            {
                "code": "/*\n * License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n */\n\n// Color computation inspired by: https://www.shadertoy.com/view/Ms2SD1\n\n// I was looking for waves that would look good on a flat 2D plane.\n// I didn't really find something to my liking so I tinkered a bit\n// (with some inspiration from other shaders obviously).\n// I thought the end result was decent so I wanted to share\n\nconst float gravity = 1.0;\nconst float waterTension = 0.01;\nconst vec3 skyCol1 = vec3(0.2, 0.4, 0.6);\nconst vec3 skyCol2 = vec3(0.4, 0.7, 1.0);\nconst vec3 sunCol  =  vec3(8.0,7.0,6.0)/8.0;\nconst vec3 seaCol1 = vec3(0.1,0.2,0.2);\nconst vec3 seaCol2 = vec3(0.8,0.9,0.6);\n\nfloat gravityWave(in vec2 p, float k, float h) {\n  float w = sqrt(gravity*k*tanh(k*h));\n  return sin(p.y*k + w*iTime);\n}\n\nfloat capillaryWave(in vec2 p, float k, float h) {\n  float w = sqrt((gravity*k + waterTension*k*k*k)*tanh(k*h));\n  return sin(p.y*k + w*iTime);\n}\n\nvoid rot(inout vec2 p, float a) {\n  float c = cos(a);\n  float s = sin(a);\n  p = vec2(p.x*c + p.y*s, -p.x*s + p.y*c);\n}\n\nfloat seaHeight(in vec2 p) {\n  float height = 0.0;\n\n  float k = 1.0;\n  float kk = 1.3;\n  float a = 0.25;\n  float aa = 1.0/(kk*kk);\n\n  float h = 10.0;\n  p *= 0.5;\n\n  for (int i = 0; i < 3; ++i) {\n    height += a*gravityWave(p + float(i), k, h);\n    rot(p, float(i));\n    k *= kk;\n    a *= aa;\n  }\n  \n  for (int i = 3; i < 7; ++i) {\n    height += a*capillaryWave(p + float(i), k, h);\n    rot(p, float(i));\n    k *= kk;\n    a *= aa;\n  }\n\n  return height;\n}\n\nvec3 seaNormal(in vec2 p, in float d) {\n  vec2 eps = vec2(0.001*pow(d, 1.5), 0.0);\n  vec3 n = vec3(\n    seaHeight(p + eps) - seaHeight(p - eps),\n    2.0*eps.x,\n    seaHeight(p + eps.yx) - seaHeight(p - eps.yx)\n  );\n  \n  return normalize(n);\n}\n\nvec3 sunDirection() {\n  vec3 dir = normalize(vec3(0, 0.15, 1));\n  return dir;\n}\n\nvec3 skyColor(vec3 rd) {\n  vec3 sunDir = sunDirection();\n\n  float sunDot = max(dot(rd, sunDir), 0.0);\n  \n  vec3 final = vec3(0.0);\n\n  final += mix(skyCol1, skyCol2, rd.y);\n\n  final += 0.5*sunCol*pow(sunDot, 20.0);\n\n  final += 4.0*sunCol*pow(sunDot, 400.0);\n    \n  return final;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q=fragCoord.xy/iResolution.xy; \n  vec2 p = -1.0 + 2.0*q;\n  p.x *= iResolution.x/iResolution.y;\n\n  vec3 ro = vec3(0.0, 10.0, 0.0);\n  vec3 ww = normalize(vec3(0.0, -0.1, 1.0));\n  vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww));\n  vec3 vv = normalize(cross(ww,uu));\n  vec3 rd = normalize(p.x*uu + p.y*vv + 2.5*ww);\n\n  vec3 col = vec3(0.0);\n\n  float dsea = (0.0 - ro.y)/rd.y;\n  \n  vec3 sunDir = sunDirection();\n  \n  vec3 sky = skyColor(rd);\n    \n  if (dsea > 0.0) {\n    vec3 p = ro + dsea*rd;\n    float h = seaHeight(p.xz);\n    vec3 nor = mix(seaNormal(p.xz, dsea), vec3(0.0, 1.0, 0.0), smoothstep(0.0, 200.0, dsea));\n    float fre = clamp(1.0 - dot(-nor,rd), 0.0, 1.0);\n    fre = pow(fre, 3.0);\n    float dif = mix(0.25, 1.0, max(dot(nor,sunDir), 0.0));\n    \n    vec3 refl = skyColor(reflect(rd, nor));\n    vec3 refr = seaCol1 + dif*seaCol2*0.1; \n    \n    col = mix(refr, 0.9*refl, fre);\n      \n    float atten = max(1.0 - dot(dsea,dsea) * 0.001, 0.0);\n    col += seaCol2 * (p.y - h) * 2.0 * atten;\n      \n    col = mix(col, sky, 1.0 - exp(-0.01*dsea));\n  } else {\n    col = sky;\n  }\n\n  fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}