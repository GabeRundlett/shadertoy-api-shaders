{
    "Shader": {
        "info": {
            "date": "1712618050",
            "description": "Shader!",
            "flags": 0,
            "hasliked": 0,
            "id": "4fV3Dz",
            "likes": 1,
            "name": "Shader337",
            "published": 3,
            "tags": [
                "shader"
            ],
            "usePreview": 0,
            "username": "kashircevpetr",
            "viewed": 123
        },
        "renderpass": [
            {
                "code": "const float xs = 2.0, ys = 1.0, zs = 3.0;\n\n\nmat3 rotationMatrix(vec3 axis, float angle) {\n    axis = normalize(axis);\n    float c = cos(angle);\n    float s = sin(angle);\n    float t = 1.0 - c;\n    \n    float x = axis.x;\n    float y = axis.y;\n    float z = axis.z;\n    \n    return mat3(\n        t * x * x + c,          t * y * x - s * z,     t * z * x + s * y,\n        t * x * y + s * z,      t * y * y + c,         t * z * y - s * x,\n        t * x * z - s * y,      t * y * z + s * x,     t * z * z + c\n    );\n}\n\n\n// Rotation around the Y axis.\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Rotation around the Z axis.\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n\nvec3 past(vec3 a, float xs, float ys, float zs){\n    return a * rotateX(-xs * iTime) * rotateY(-ys * iTime) * rotateZ(-zs * iTime);\n}\n\n\nbool inn(int i, float x, float y, float z, vec3 center){\n    if(i < 6){\n        vec3 coord = past(vec3(x, y, z) - center, xs, ys, zs);\n        if (i == 0 && abs(coord.z - 0.1) <= 0.001 && abs(coord.x) <= 0.1 && abs(coord.y) <= 0.1){\n            return true;\n        }\n        if (i == 1 && abs(coord.z + 0.1) <= 0.001 && abs(coord.x) <= 0.1 && abs(coord.y) <= 0.1){\n            return true;\n        }\n        if (i == 2 && abs(coord.x - 0.1) <= 0.001 && abs(coord.z) <= 0.1 && abs(coord.y) <= 0.1){\n            return true;\n        }\n        if (i == 3 && abs(coord.x + 0.1) <= 0.001 && abs(coord.z) <= 0.1 && abs(coord.y) <= 0.1){\n            return true;\n        }\n        if (i == 4 && abs(coord.y - 0.1) <= 0.001 && abs(coord.x) <= 0.1 && abs(coord.z) <= 0.1){\n            return true;\n        }\n        if (i == 5 && abs(coord.y + 0.1) <= 0.001 && abs(coord.x) <= 0.1 && abs(coord.z) <= 0.1){\n            return true;\n        }\n        \n    } if (i == 7 && z <= 0.0 && abs(x) <= 0.3 && y >= -0.4 && y <= 0.0){\n        return true;\n    } return false;\n}\n\n\nvec3 c(int i, float x, float y, float z){\n    if (i < 6){\n        if (i == 0){\n            return vec3(1.0, 0.0, 0.0);\n        }\n        if (i == 1){\n            return vec3(1.0, 1.0, 0.0);\n        }\n        if (i == 2){\n            return vec3(1.0, 0.0, 1.0);\n        }\n        if (i == 3){\n            return vec3(0.0, 1.0, 0.0);\n        }\n        if (i == 4){\n            return vec3(0.0, 1.0, 1.0);\n        }\n        if (i == 5){\n            return vec3(0.0, 0.0, 1.0);\n        }\n         \n    } return vec3(0.3, 0.3, 0.3);\n    \n\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= vec2(0.5, 0.5);\n    uv *= vec2(iResolution.x/iResolution.y, 1.0);\n    vec2 uv1 = uv - vec2(0.1*sin(2.0*iTime), 0.2*cos(3.0*iTime));\n    vec3 col = vec3(0.7, 0.7, 0.7);\n    vec3 center = vec3(0.5*sin(1.6*iTime), 0.4*cos(0.8*iTime), 0.0);\n    \n    \n    \n    bool flag = false;\n    float nz;\n    if (length(uv - center.xy) <= 0.174 || (uv.y <= 0.0 && uv.y >= -0.4 && abs(uv.x) <= 0.3)){\n    for (float z = 174.0; z >= -174.0; z -= 1.0){\n        nz = z / 1000.0;\n        for (int i = 0; i < 8; i++){\n            if (inn(i, uv.x, uv.y, nz, center)){\n                col = c(i, uv.x, uv.y, nz);\n                flag = true;\n                break;\n            }\n        } if (flag) break;\n    }}\n    \n    float q;\n    float x1 = -0.4 * abs(sin(iTime / 2.3)) + 0.8;\n    float y1 = -0.8 * abs(cos(iTime / 2.3)) + 0.4;\n    float r = 0.1;\n\n   \n    if ((uv.x - x1) * (uv.x - x1) + (uv.y - y1) * (uv.y - y1) <= r * r){\n\n        col = vec3((uv.x - x1) * (uv.y - y1) / r / r, (uv.x - x1) * (uv.x - x1) / r / r + 1.1 * (uv.y - y1) / r, (uv.y - y1) * (uv.y - y1) / r / r) + vec3(0.3, 0.0, 0.4);\n\n    }\n    \n    \n    //для пятиугольника:\n    //5x\n    //0.8+0.2x\n    //0.7-0.25x\n    //2-3x\n    //0.1+1.5x\n    \n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}