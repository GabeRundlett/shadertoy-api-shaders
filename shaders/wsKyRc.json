{
    "Shader": {
        "info": {
            "date": "1604523927",
            "description": "test_shader",
            "flags": 0,
            "hasliked": 0,
            "id": "wsKyRc",
            "likes": 10,
            "name": "TeremokTestShader",
            "published": 3,
            "tags": [
                "test"
            ],
            "usePreview": 0,
            "username": "teremok2007",
            "viewed": 335
        },
        "renderpass": [
            {
                "code": "#define ALBEDO_R 0.5\n#define ALBEDO_G 0.5\n#define ALBEDO_B 0.5\n\n#define METALLIC 0.04\n#define ROUGH 0.3\n\n\n#define OCCL_SAMPLES 16\n\n#define AREA_LIGHT_SAMPLES 64\n#define AREA_LIGHT_RADIUS 0.06\n\n\n\nfloat getHeightValue(vec2 coords)\n{\n \n    float n = 0.0;\n    return max(n, texture(iChannel0, coords).x);\n\n}\n\n\n\nfloat amb_occl(vec2 frCoord, vec3 N,vec2 uv)\n{\n    float r=10.0;\n    const int samples=OCCL_SAMPLES;\n    \n\tfloat zr =1.0-texture( iChannel0, frCoord.xy / iResolution.xy ).x;\n\tfloat ao = 0.0;\n\tfor( int i=0; i<samples; i++ )\n\t{        \n        vec2 off = -1.0 + 2.0*texture( iChannel2, (frCoord.xy + 23.71*float(i))/iChannelResolution[2].xy ).xz;\t               \t\t\n        float z = 1.0-texture( iChannel0, (frCoord.xy + floor(off*r))/iResolution.xy ).x;\t\t\n\t\tao += clamp( (zr-z)/0.01, 0.0, 1.0);\n\t}\n\t\n    ao = clamp( 1.0 - ao/float(samples), 0.0, 1.0 );\n\t\n    return ao;\n}\n\n \nvec3 fresnelSchlick(float cosTheta, vec3 F0)\n{\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\n}  \n\nfloat DistributionGGX(vec3 N, vec3 H, float roughness)\n{\n    const float PI = 3.14159265359;\n    float a      = roughness*roughness;\n    float a2     = a*a;\n    float NdotH  = max(dot(N, H), 0.0);\n    float NdotH2 = NdotH*NdotH;\n\t\n    float num   = a2;\n    float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n    denom = PI * denom * denom;\n\t\n    return num / denom;\n}\n\nfloat GeometrySchlickGGX(float NdotV, float roughness)\n{\n    float r = (roughness + 1.0);\n    float k = (r*r) / 8.0;\n\n    float num   = NdotV;\n    float denom = NdotV * (1.0 - k) + k;\n\t\n    return num / denom;\n}\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)\n{\n    float NdotV = max(dot(N, V), 0.0);\n    float NdotL = max(dot(N, L), 0.0);\n    float ggx2  = GeometrySchlickGGX(NdotV, roughness);\n    float ggx1  = GeometrySchlickGGX(NdotL, roughness);\n\t\n    return ggx1 * ggx2;\n} \n\n\n\n\n\nfloat shadow(vec3 wPos, vec3 lVector, float NdL , vec3 lPos , vec2 frCoord)\n{\n   const int area_sample=AREA_LIGHT_SAMPLES; \n    \n   float bias = 0.01;\n   vec3 p;\n   float shadow = 0.0;\n   float res=1.0;\n   for (int a = 1; a <= area_sample; a += 1)\n   {\n       \n     vec3 off = AREA_LIGHT_RADIUS*(-1.0 + 2.0*texture( iChannel2, (frCoord.xy + 23.71*float(a))/iChannelResolution[2].xy ).xyz);\n     vec3 lpose=lPos+vec3(off);\n     vec3 llVector=normalize(lpose-wPos);\n       \n     if (NdL > 0.0)\n   \t {\n        \n   \t\tfor (float i = 0.0; i <= 1.0; i += 0.04) \n    \t\t{\n     \t\t\tp = wPos + llVector * i;\n                \n       \t \t\t\tif (p.z < getHeightValue(vec2(p.x, p.y)) - bias)\n        \t\t\t\t{\n            \t\t\t\tshadow = 1.0 / float(area_sample);\n                            res=res-shadow;\n                            shadow=0.0;\n                    \t\tbreak;\n        \t\t\t\t}\n                \n             }\n          \n   \t }\n     else\n     {res=0.0;}\n      \n       \n   }\n\treturn res;\n}\n\n\nvec3 getNormal(vec2 coords, float intensity)\n{\n    float offset = 0.0025;\n    vec3 a = vec3(coords.x - offset, 0.0, getHeightValue(vec2(coords.x - offset, coords.y)) * intensity);\n    vec3 b = vec3(coords.x + offset, 0.0, getHeightValue(vec2(coords.x + offset, coords.y)) * intensity);\n    vec3 c = vec3(0.0, coords.y + offset, getHeightValue(vec2(coords.x, coords.y + offset)) * intensity);\n    vec3 d = vec3(0.0, coords.y - offset, getHeightValue(vec2(coords.x, coords.y - offset)) * intensity);\n\n    return normalize(cross(b-a, c-d));\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 daMouse = iMouse.xy / iResolution.xy;\n    daMouse = daMouse;\n\n    \n    \n    \n    \n    const float PI = 3.14159265359;\n\tvec3  albedo=vec3(ALBEDO_R, ALBEDO_G, ALBEDO_B);;\n\tfloat metallic=METALLIC;\n\tfloat roughness=ROUGH;\n    \n\tvec3 camPos=vec3(0.0, 0.0, 4.0);\n    vec3 WorldPos = vec3(vec2(uv), getHeightValue(uv));\n    \n    \n\n    vec3 N = getNormal(uv, 0.2);\n    float aocc = amb_occl(fragCoord,N,uv);\n\n    vec3 V = normalize(camPos - WorldPos);\n\n    vec3 lightPosition=vec3(daMouse.x , daMouse.y , 1.2);\n    vec3 lightColor=vec3(5.0 , 5.0 , 5.0);\n    vec3 L = normalize(lightPosition-WorldPos);\n\n\n\n\n    vec3 F0 = vec3(0.04); \n    F0 = mix(F0, albedo, metallic);\n    vec3 Lo = vec3(0.0);\n    \n    \n    \n    vec3 H = normalize(V + L);\n    float distance    = length(lightPosition - WorldPos);\n    float attenuation = 1.0 / (distance * distance);\n    vec3 radiance     = lightColor * attenuation;        \n        \n\n    float NDF = DistributionGGX(N, H, roughness);        \n    float G   = GeometrySmith(N, V, L, roughness);      \n    vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);       \n        \n    vec3 kS = F;\n    vec3 kD = vec3(1.0) - kS;\n    kD *= 1.0 - metallic;\n    vec3 irradiance = 0.3*texture(iChannel1, N).rgb;\n\tvec3 diffuse    = irradiance * albedo;\n\tvec3 ambient    = (kD * diffuse)* aocc;\n        \n    vec3 numerator    = NDF * G * F;\n    float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);\n    vec3 specular     = numerator / max(denominator, 0.001);  \n            \n    \n    float NdotL = max(dot(N, L), 0.0);                \n    Lo += (kD * albedo / PI + specular) * radiance * NdotL;\n    \n    \n\n    float l_shadow= shadow(WorldPos, L, NdotL ,lightPosition ,fragCoord);\n    vec3 color = ambient + Lo*l_shadow;\n\t\n    color = color / (color + vec3(1.0));\n    color = pow(color, vec3(1.0/2.2));  \n   \n    \n    \n    \n    \n    //fragColor = vec4(vec3(aocc), 1.0);\n    //fragColor = vec4(vec3(l_shadow), 1.0);\n    \n    \n    fragColor = vec4(color, 1.0);\n\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}