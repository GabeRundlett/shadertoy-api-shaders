{
    "Shader": {
        "info": {
            "date": "1582213517",
            "description": "Render a stereoscopic image. (https://en.wikipedia.org/wiki/Magic_Eye)\nSwitch to full screen and cross your eyes on it.",
            "flags": 0,
            "hasliked": 0,
            "id": "tldXWX",
            "likes": 1,
            "name": "Stereoscope",
            "published": 3,
            "tags": [
                "stereoscope"
            ],
            "usePreview": 0,
            "username": "luckas",
            "viewed": 391
        },
        "renderpass": [
            {
                "code": "//\n// Base patterns\n//\nconst float patternPeriod = 9.0; // px\nvec3 basePatternPeriodic(vec2 pos) {\n    float brightness = 0.5 + 0.5 * sin((pos.x + pos.y) / patternPeriod * 2.0 * 3.14);\n    return unit3 * brightness;\n}\n\nvec3 basePatternRandom(vec2 pos) {\n    return unit3 * rand(pos.xy);\n}\n\nconst int basePatternChannel = 0;\nvec3 basePatternTexture(vec2 pos) {\n    vec2 texturePos = pos / iChannelResolution[basePatternChannel].xy;\n    return texture(iChannel0, texturePos).rgb;\n}\n\n// Chose a base pattern\nvec3 basePattern(vec2 pos) {\n    return basePatternTexture(pos);\n}\n\n// Chose a distance model\nfloat pixelEyeDistance(vec2 pos) {\n\treturn distanceSphere(pos);\n}\n\nconst float paralaxFactor = eyeDistance * screenDistance * displayDensity;\nfloat paralax(vec2 pos) {\n    vec2 centeredPhysical = (iResolution.xy / 2.0 - pos) / displayDensity;\n\n    return paralaxFactor / pixelEyeDistance(centeredPhysical);\n}\n\nvec3 shadedImage(vec2 pos) {\n\tvec2 centeredPhysical = (iResolution.xy / 2.0 - pos) / displayDensity;\n    vec3 col = (baseDistance + 100.0 - pixelEyeDistance(centeredPhysical)) / 100.0 * unit3;\n\treturn col;\n}\n\nvec3 stereoscopicImage(vec2 pos) {\n    for(int i = 0; i < 1000; ++i) {\n        if (pos.x < 0.0) break;\n        pos.x = pos.x - paralax(pos);\n    }\n    vec3 col = basePattern(pos);\n\treturn col;\n}\n\n// Entry point\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Call shadedImage instead of stereoscopicImage to see which shape is rendered\n    vec3 col = stereoscopicImage(fragCoord);\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Setup model parameters\n\n// MacBook 15\"\n//const float displayDensity = 5.078740157480315;  // Pixel per mm\n\n// MacBok Air\nconst float displayDensity = 4.960629921259843;  // Pixel per mm\n\n    const float eyeDistance = 63.0; // Distance of your eyes in mm\nconst float screenDistance = 500.0; // Distance of eyes to screen in mm\n\n// Usefull constants\nconst vec3 unit3 = vec3(1.0, 1.0, 1.0);\n\nfloat rand(vec2 pos){\n    return fract(sin(dot(pos ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat distanceFromOrigin(vec2 pos) {\n\treturn sqrt(pos.x * pos.x + pos.y * pos.y);\n}\n\n//\n// Distance models\n//\n\n// Define distance of base plane used in many models\nconst float baseDistance = 500.0; // mm\n\n// Pyramide Model\nconst float width = 120.0; // mm\n\nfloat distancePyramide(vec2 pos) {\n    float elevation = width / 2.0 - (abs(pos.x) + abs(pos.y)) ;\n    if (elevation < 0.0) {\n        elevation = 0.0;\n    }\n    \n    return baseDistance + elevation;\n}\n\n// Cone Model\nconst float coneRadius = 60.0; // mm\n\nfloat distanceCone(vec2 pos)\n{\n    float radius = distanceFromOrigin(pos);\n    if (radius < coneRadius) {\n    \treturn baseDistance + (coneRadius - radius);\n    } else {\n        return baseDistance;\n    }\n}      \n \n\n// Sphere Model\nconst float sphereRadius = 60.0; // mm\n\nfloat distanceSphere(vec2 pos)\n{\n    float radius = distanceFromOrigin(pos);\n    if (radius < sphereRadius) {\n    \treturn baseDistance + sqrt(sphereRadius * sphereRadius - radius * radius);\n    } else {\n        return baseDistance;\n    }\n}\n\n\n// Circle Model\nconst float circleRadius = 60.0; // mm\nconst float circleDistance = baseDistance + 100.0; // mm\n\nfloat distanceCircle(vec2 pos)\n{\n    float radius = distanceFromOrigin(pos);\n    if (radius < circleRadius) {\n    \treturn circleDistance;\n    } else {\n        return baseDistance;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}