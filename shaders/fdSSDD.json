{
    "Shader": {
        "info": {
            "date": "1620355933",
            "description": "Roots to a*sin(2x+b) + c*sin(x+d) + e",
            "flags": 0,
            "hasliked": 0,
            "id": "fdSSDD",
            "likes": 9,
            "name": "Roots of Sine Sum",
            "published": 3,
            "tags": [
                "trig",
                "quartic",
                "roots",
                "solving",
                "tformulae"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 160
        },
        "renderpass": [
            {
                "code": "#define draw(d, c) color = mix(color, c, smoothstep(unit, 0.0, d))\n\nfloat evalSineSum(in float x, in float a, in float b, in float c, in float d, in float e) { return a * sin(2.0 * x + b) + c * sin(x + d) + e; }\nfloat evalSineSumPrime(in float x, in float a, in float b, in float c, in float d, in float e) { return 2.0 * a * cos(2.0 * x + b) + c * cos(x + d); }\n\n// Solves a*sin(2x+b)+c*sin(x+d)+e=0\nfloat cbrt(in float x) { return sign(x) * pow(abs(x), 1.0 / 3.0); }\nint solveSineSum(in float a, in float b, in float c, in float d, in float e, inout vec4 roots, inout vec4 periods) {\n    periods = vec4(6.28318530718); // 2Ï€\n    float shift = 0.5 * b, s = d - shift, ea = e / a;\n    vec2 sc = vec2(sin(s), 2.0 * cos(s)) * c / a;\n\n    // Solve a quartic in tan((x+b/2)/2)\n    float qa = ea - sc.x;\n    float qb = sc.y - 4.0;\n    float qc = 2.0 * ea;\n    float qd = sc.y + 4.0;\n    float qe = ea + sc.x;\n\n    qb /= qa; qc /= qa; qd /= qa; qe /= qa; // Divide by leading coefficient to make it 1\n\n    // Depress the quartic to x^4 + px^2 + qx + r by substituting x-b/4a\n    // This can be found by substituting x+u and the solving for the value\n    // of u that makes the t^3 term go away\n    float bb = qb * qb;\n    float p = qc - 3.0 * bb / 8.0;\n    float q = qd -  qb * qc / 2.0 + bb * qb / 8.0;\n    float r = qe -  qb * qd / 4.0 + bb * qc / 16.0 - 3.0 * bb * bb / 256.0;\n    int n = 0; // Root counter\n\n    // Solve for a root to (t^2)^3 + 2p(t^2)^2 + (p^2 - 4r)(t^2) - q^2 which resolves the\n    // system of equations relating the product of two quadratics to the depressed quartic\n    float ra =  2.0 * p;\n    float rb =  p * p - 4.0 * r;\n    float rc = -q * q;\n\n    // Depress using the method above\n    float ru = ra / 3.0;\n    float rp = rb - ra * ru;\n    float rq = rc - (rb - 2.0 * ra * ra / 9.0) * ru;\n\n    float lambda;\n    float rh = 0.25 * rq * rq + rp * rp * rp / 27.0;\n    if (rh > 0.0) { // Use Cardano's formula in the case of one real root\n        rh = sqrt(rh);\n        float ro = -0.5 * rq;\n        lambda = cbrt(ro - rh) + cbrt(ro + rh) - ru;\n    }\n\n    else { // Use complex arithmetic in the case of three real roots\n        float rm = sqrt(-rp / 3.0);\n        lambda = -2.0 * rm * sin(asin(1.5 * rq / (rp * rm)) / 3.0) - ru;\n    }\n\n    // Solve two quadratics factored from the quartic using the cubic root\n    if (lambda < 0.0) return n;\n    float t = sqrt(lambda); // Because we solved for t^2 but want t\n    float alpha = 2.0 * q / t, beta = lambda + ra;\n\n    float u = 0.25 * qb;\n    t *= 0.5;\n\n    float z = -alpha - beta;\n    if (z > 0.0) {\n        z = sqrt(z) * 0.5;\n        float h = +t - u;\n        roots.xy = atan(vec2(h + z, h - z)) * 2.0 - shift;\n        n += 2;\n    }\n\n    float w = +alpha - beta;\n    if (w > 0.0) {\n        w = sqrt(w) * 0.5;\n        float h = -t - u;\n        roots.zw = atan(vec2(h + w, h - w)) * 2.0 - shift;\n        if (n == 0) roots.xy = roots.zw;\n        n += 2;\n    }\n\n    return n;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 8.0;\n    float unit = 16.0 / iResolution.y;\n    float t = 0.25 * unit;\n    vec3 color = vec3(1.0);\n\n    // Grid\n    draw(abs(mod(uv.x + 0.25, 0.5) - 0.25) + t, vec3(0.0, 0.0, 1.0));\n    draw(abs(mod(uv.y + 0.25, 0.5) - 0.25) + t, vec3(0.0, 0.0, 1.0));\n    draw(abs(uv.x), vec3(1.0, 0.0, 0.0));\n    draw(abs(uv.y), vec3(1.0, 0.0, 0.0));\n\n    // Parameters\n    float a = sin(iTime * 0.25) * 1.25;\n    float b = sin(iTime) * 2.0;\n    float c = sin(iTime) * 2.0;\n    float d = cos(iTime * 0.75);\n    float e = sin(iTime * 0.5);\n\n    // Draw the function and its roots\n    float fx = evalSineSum(uv.x, a, b, c, d, e);\n    float dx = evalSineSumPrime(uv.x, a, b, c, d, e);\n    draw(abs(uv.y - fx) / sqrt(1.0 + dx * dx) - t, vec3(0.5, 0.0, 0.5));\n\n    vec4 roots, periods;\n    int nroots = solveSineSum(a, b, c, d, e, roots, periods);\n    for (int n=0; n < nroots; n++) {\n        float h = 0.5 * periods[n];\n        draw(length(vec2(mod(uv.x - roots[n] + h, periods[n]) - h, uv.y)) - 0.1, vec3(0.0));\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}