{
    "Shader": {
        "info": {
            "date": "1565517441",
            "description": "Tribute to Dark Souls\nI've been playing too much recently...",
            "flags": 0,
            "hasliked": 0,
            "id": "WlSSzD",
            "likes": 27,
            "name": "BonfireLit",
            "published": 3,
            "tags": [
                "fire",
                "sword",
                "darksouls",
                "bonfire"
            ],
            "usePreview": 1,
            "username": "EvilRyu",
            "viewed": 1060
        },
        "renderpass": [
            {
                "code": "// Created by evilryu\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tribute to Dark Souls\n\nconst float PI=3.14159265359;\n\nfloat hash11(float p)\n{\n    vec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n    return fract(p2.x * p2.y * 95.4337);\n}\n\nfloat noise(float x)\n{\n    float p=floor(x);\n    float f=fract(x);\n    f=f*f*(3.-2.*f);\n    return mix(hash11(p),hash11(p+1.0),f);\n}\n\nfloat noise(vec2 x)\n{\n    vec2 p=floor(x);\n    vec2 f=fract(x);\n    f=f*f*(3.0-2.0*f);\n    float n=p.x + p.y*57.0;\n    return mix(mix(hash11(n+0.0), hash11(n+1.0),f.x),\n               mix(hash11(n+57.0), hash11(n+58.0),f.x),f.y);\n}\n\n#if 0\n\nfloat hash31(vec3 p)\n{\n    p=fract(p*vec3(5.3983, 5.4472, 9.9371));\n    p+=dot(p.yzx, p.xyz + vec3(21.5351, 14.3137, 15.3219));\n    //return fract(p.x * p.y * p.z * 95.4337);\n    return fract(p.x * p.y * p.z * 9.);\n}\n\nfloat noise(vec3 x)\n{\n    x.y-=iTime*4.0;\n    vec3 p=floor(x);\n    vec3 f=fract(x);\n    f=f*f*(3.-2.*f);\n    #if 0\n    float n=p.x+157.0*p.y+113.0*p.z;\n    return mix(\n            mix(mix(hash11(n+0.0), hash11(n+1.0), f.x), \n                mix(hash11(n+157.0), hash11(n+158.0), f.x),\n                f.y),\n            mix(mix(hash11(n+113.0), hash11(n+114.0), f.x),\n                mix(hash11(n+270.0), hash11(n+271.0), f.x),\n                f.y),\n            f.z);\n    #else\n    vec3 e=vec3(1.,0.,0.);\n    return mix(\n            mix(mix(hash31(p), hash31(p+e), f.x), \n                mix(hash31(p+e.yxz), hash31(p+e.xxy), f.x),\n                f.y),\n            mix(mix(hash31(p+e.yzx), hash31(p+e.xyx), f.x),\n                mix(hash31(p+e.yxx), hash31(p+e.xxx), f.x),\n                f.y),\n            f.z);\n    \n    #endif\n}\n#endif\n\n// better and faster noise.\nfloat noise_inner(vec3 x)\n{\n    vec3 p=floor(x);\n    vec3 f=fract(x);\n    f=f*f*(3.0-2.0*f);\n    \n    vec2 uv=(p.xy + vec2(37.0, 17.0)*p.z)+f.xy;\n    vec2 rg=textureLod(iChannel0, (uv+ 0.5)/256., .0).yx;\n    return mix(rg.x, rg.y, f.z);\n}\n\nfloat noise(vec3 x)\n{\n    x.y-=iTime*3.0; \n    return noise_inner(x);\n}\n\nfloat fbm(vec3 p)\n{\n    float f=0.0;\n    f+=.5*noise_inner(p); p=p*2.;\n    f+=.25*noise_inner(p); p=p*2.;\n    f+=.125*noise_inner(p); p=p*2.;\n    return f;\n}\n\nfloat fbm(vec2 p)\n{\n    float f=0.0;\n    f+=.5*noise(p); p=p*2.01;\n    f+=.25*noise(p); p=p*2.1;\n    f+=.125*noise(p); p=p*2.03;\n    return f;\n}\n\nfloat smin(float a, float b, float k)\n{\n    float h=clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n    return mix(b,a,h)-k*h*(1.0-h);\n}\n\nfloat rbox(vec3 p, vec3 b, float r)\n{\n    vec3 d=abs(p)-b;\n    return length(max(d,0.))-r+min(max(d.x,max(d.y,d.z)),0.);\n}\n\nfloat box(vec3 p, vec3 b)\n{\n    vec3 d=abs(p)-b;\n    return length(max(d,0.0))+min(max(d.x,max(d.y,d.z)),0.0); \n}\n\nfloat torus(vec3 p, vec2 t)\n{\n    vec2 q=vec2(length(p.xz)-t.x,p.y);\n    return length(q)-t.y;\n}\n\nfloat cone(vec3 p, float r1, float r2, float h)\n{\n    vec2 q=vec2(length(p.xz), p.y );\n    \n    float b=(r1-r2)/h;\n    float a=sqrt(1.0-b*b);\n    float k=dot(q,vec2(-b,a));\n    \n    if(k<0.0) return length(q)-r1;\n    if(k>a*h) return length(q-vec2(0.0,h))-r2;\n        \n    return dot(q,vec2(a,b))-r1;\n}\n\nfloat line(vec3 p, float h, float r)\n{\n    p.y-=clamp(p.y, 0.0, h);\n    return length(p)-r;\n}\n\nvoid rot2d(inout vec2 p, float t)\n{\n    float ct=cos(t),st=sin(t);\n    vec2 q=p;\n    p.x=ct*q.x+st*q.y;\n    p.y=-st*q.x+ct*q.y;\n}\n\n#define GROUND 0\n#define ASH 1\n#define BONES 2\n#define SWORD 3\n\nint mate=0;\n\nvec2 polar_rep(vec2 p, float n)\n{\n    n=PI*0.5/n;\n    float a=atan(p.y, p.x);\n    float r=length(p);\n    a=mod(a+n/2.0, n)-n/2.0;\n    p=r*vec2(cos(a), sin(a));\n    return 0.5*(p+p-vec2(1,0));\n}\n\nfloat bone(in vec3 p)\n{\n    p.xz=polar_rep(p.xz,1.);\n    rot2d(p.xy,-0.41);rot2d(p.xz,0.5);\n    p+=vec3(-1.4,-1,1);\n    \n    float d0=rbox(p,vec3(1.3,0.05,0.05),0.02);\n    vec3 q=p+vec3(0,0.05,0.05);\n    q.zx=abs(q.zx)-vec2(0.1,1.5);\n    float d1=length(q)-0.1;\n    d0=smin(d0,d1,0.4);\n    return d0;\n}\n\nfloat bones(in vec3 p)\n{\n    float d0=bone(p);\n  \n    vec3 q=p;\n    q.x=abs(q.x-.6)-1.;\n    rot2d(q.yz,0.8);rot2d(q.xy,1.5);\n    float d1=torus(q+vec3(1.1,-0.7,1.), vec2(0.8,0.04));\n    d0=min(d0,d1);\n    \n    return d0;\n}\n\nfloat sword(vec3 p)\n{\n    rot2d(p.xy,-0.2);\n    p.y-=3.;\n    vec3 q=p;\n    rot2d(q.xz,5.*smoothstep(1.,5.5,q.y));\n    float k=smoothstep(3.,-5.,q.y)*0.1;\n    float d0=box(q,vec3(0.2-k,5.,0.19-k));\n    \n    q=p; rot2d(q.xz,0.55);\n    float d1=box(q+vec3(0.,-5.2,0.),vec3(.9,0.1-0.1*smoothstep(0.4,.9,abs(q.x)),0.1));\n \n    rot2d(q.xz,-1.1);\n    float d11=box(q+vec3(0.,-5.2,0.),vec3(.9,0.1-0.1*smoothstep(0.4,.9,abs(q.x)),0.1));\n    d1=min(d1,d11);\n    d0=smin(d0,d1,0.4);\n    \n    float d2=line(p+vec3(0.,-5.,0.),2.5,0.15);\n    d0=smin(d0,d2,0.2);\n    \n    float d3=torus(p.xzy+vec3(0.,0., -8), vec2(0.25,0.1));\n    d0=smin(d0,d3,0.3);\n    \n    return d0;\n}\n\nfloat map(vec3 p)\n{\n    mate=GROUND;\n    float d0=abs(-5.5-p.y)-5.;\n    float d1=cone(p+vec3(0.,2.,0.),3.,.4,3.);\n    if(d0>d1-0.8-noise(p.xz*3.)-noise(p.xz*50.)*.5) mate=ASH;\n    d0=smin(d0,d1,1.);\n      \n    float d2=bones(p);\n    if(d0>d2){d0=smin(d0,d2,0.3); mate=BONES;}\n\n    float d4=length(p+vec3(1.5,0.5,0.4))-1.2;\n    if(d0>d4){d0=d4; mate=BONES;}\n    \n    float d3=sword(p);\n    if(d0>d3){d0=d3; mate=SWORD;}\n    return d0;\n}\n\n// stuff that is burning \nfloat map2(vec3 p)\n{       \n    float d0=bones(p);\n    float d4=length(p+vec3(1.5,0.5,0.4))-1.2;\n    d0=min(d0,d4);\n    float d1=cone(p+vec3(0.,2.,0.),3.,.4,3.);\n    d0=max(d0,-d1);\n    return d0;\n}\n\nvec3 get_normal(vec3 p)\n{\n    vec3 eps=vec3(0.0001,0,0);\n    return normalize(vec3(map(p+eps.xyz)-map(p-eps.xyz),\n                     map(p+eps.yxz)-map(p-eps.yxz),\n                     map(p+eps.yzx)-map(p-eps.yzx)));\n}\n\n// Campfire from Dave_Hoskins\n// https://www.shadertoy.com/view/Mdj3zD\nfloat fire(vec3 p)\n{\n    vec3 q=p;\n    p.xz+=(p.y+2.)*.1;//*sin(iTime*0.4);\n    vec3 v=p*vec3(1.1,.5,1.1);\n    if(dot(v,v)>20.0)return 0.0;\n    p+=3.*noise(v);\n    // one layer goes downwards\n    p-=1.5*noise(-v*2.01);\n    p+=.75*noise(v*5.03);\n    float f=(length(v)-.5-9.6*noise(p));\n    \n    // lighter bottom of the fire\n    f-=max(3.-p.y, 0.0)*.3;\n    // sparkles\n    f-=pow(abs(noise(v*3.9)), 50.0)*300.0*pow(abs(noise(v)), 5.0);\n\n    return 1.-f;\n}\n\nvec3 firecolor(float f)\n{\n    f=f*f*(3.0-2.0*f);\n    return  min(vec3(f+.8, f*f*1.4+.1, f*f*f*.7)*f, 1.0);\n}\n\n#define FAR 30.0\nfloat intersect(vec3 ro, vec3 rd, vec2 fragCoord)\n{\n    float t=0.1;\n    float d=0.;\n    for(int i=0;i<96;++i)\n    {\n        d=map(ro+t*rd);\n        if(d<0.03&&t>FAR)\n            break;\n        t+=d;\n    }\n        \n    return t;\n}\n\nfloat march_fire(vec3 ro, vec3 rd, vec2 fragCoord)\n{\n    float sum=0.;;\n    float t=.1*texture(iChannel0, fragCoord.xy/iChannelResolution[0].xy).y;\n    float d=100.;\n    int i=0;\n    for(;i<128;++i)\n    {\n        vec3 pos=ro+t*rd;\n        if(t>FAR || pos.y<-1.) break;\n    \n        if(d<0.15) sum+=max(0.,d)*30.;\n    \n        d=map2(pos);\n        \n        sum+=max(0.,fire(ro+t*rd))*0.4;\n        t+=max(0.1172,t*0.005);\n    }\n    sum/=float(i);\n    return clamp(pow(sum, 4.), 0., 1.);\n}\n\nvec4 texcube(sampler2D sam, vec3 p, vec3 n)\n{\n    vec4 p1=texture(sam, p.xy);\n    vec4 p2=texture(sam, p.xz);\n    vec4 p3=texture(sam, p.yz);\n    return p1*abs(n.z)+p2*abs(n.y)+p3*abs(n.x);\n}\n\nfloat bump(vec3 p, vec3 n)\n{\n    return dot(texcube(iChannel0, 0.25*p, n).xyz, vec3(0.299, 0.587, 0.114)); \n}\n\nvec3 bump_mapping(vec3 p, vec3 n, float weight)\n{\n    vec2 e = vec2(2./iResolution.y, 0); \n    vec3 g=vec3(bump(p-e.xyy, n)-bump(p+e.xyy, n),\n                bump(p-e.yxy, n)-bump(p+e.yxy, n),\n                bump(p-e.yyx, n)-bump(p+e.yyx, n))/(e.x*2.);  \n    g=(g-n*dot(g,n));\n    return normalize(n+g*weight);\n}\n\nfloat density(vec3 p, float ms, vec3 n) \n{\n    return sword(p-n*ms)/ms;\n}\n\nvec3 get_material(vec3 pos, inout vec3 n, inout float sca, float t)\n{\n    float d=map(pos);\n    float bump=100./max(iResolution.x,iResolution.y);\n    \n    if(mate==GROUND)\n    {\n        float f=fbm(pos.xz*.2);\n        n=bump_mapping(pos, n, bump*.5);\n        return f*pow(texture(iChannel0,pos.xz*.2).xxx,vec3(3.,3.,2.))*.4;   \n\t}\n    else if(mate==ASH)\n    {\n        n=bump_mapping(pos, n, bump);\n        return mix(vec3(0.05,0.015,0.),vec3(0.3), smoothstep(0.,10.,dot(pos.xz,pos.xz)));\n    }\n    else if(mate==SWORD)\n    {\n        n=bump_mapping(pos, n, bump*.5);\n        float f=fbm(pos*4.);\n        sca=1.-density(pos,.1,n);\n        return vec3(1., 1., 0.62483)*pow(1.-f,8.)*3.5+\n            vec3(f*f*f)*mix(vec3(1.62201, 0.385, 0.043), \n                            vec3(0.1,0.1,0.2), smoothstep(1.,7.,pos.y));\n    }\n    else if(mate==BONES)\n    {\n        return vec3(.1);\n    }\n    \n    return vec3(1.0);\n}\n\nfloat get_ao(vec3 p, vec3 n)\n{\n    float r=0.0, w=1.0, d;\n    for(float i=1.; i<5.0+1.1; i++)\n    {\n        d=i/5.0;\n        r+=w*(d-map(p+n*d));\n        w*=0.5;\n    }\n    return 1.0-clamp(r,0.0,1.0);\n}\n\n\nvec3 lighting(vec3 rd, vec3 pos, vec3 n, float t)\n{\n    vec3 lp0=vec3(0.5,1.5, -1.);\n    vec3 ld0=normalize(lp0-pos);\n    float dist=length(ld0);\n    vec3 lc0=vec3(0.4055, 0.0963, 0.0107465)*20.;\n    vec3 sky=vec3(1.0);\n    \n    float sca=0.;\n    vec3 ma=get_material(pos,n,sca,t);\n    \n    float ao=get_ao(pos, n);\n    float dif=max(0.,dot(n,ld0))*ao*ao*ao;\n    float bac=max(0.,dot(n,-ld0));\n    float amb=clamp(0.3+0.7*n.y,0.0,1.0);\n    float spe=max(0.0, pow(clamp(dot(ld0, reflect(rd,n)), 0.0, 1.0), 16.0));\n\n    vec3 lin=6.*dif*lc0+.6*bac*lc0+01.*amb*sky+2.*spe*vec3(1.);\n    lin=lin*ma*0.2;\n    if(mate==SWORD)\n        lin+=0.06*sca*vec3(0.219, 0.0357, 0.0015);\n    return lin;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q=fragCoord.xy/iResolution.xy;\n    vec2 p=q*2.-1.;\n    p.x*=iResolution.x/iResolution.y;\n    \n    vec3 ro=vec3(0.,3,-11);\n    //rot2d(ro.xz,iTime);\n    vec3 ta=vec3(0.,4.,0.);\n    \n     // debugging camera\n    float x_rot=-iMouse.x/iResolution.x*PI*2.0;\n    float y_rot=iMouse.y/iResolution.y*3.14*0.5 + PI/2.0;\n    if(iMouse.z>0.||iMouse.w>0.)\n        ro=vec3(0.,0,-3)+vec3(cos(y_rot)*cos(x_rot),cos(y_rot)*cos(x_rot),cos(y_rot)*sin(x_rot))*12.;\n     \n    vec3 f=normalize(ta-ro);\n    vec3 r=normalize(cross(vec3(0,1,0),f));\n    vec3 u=normalize(cross(f,r));\n    vec3 rd=normalize(mat3(r,u,f)*vec3(p.x,p.y,1.5));\n    \n    float t=intersect(ro,rd,fragCoord);\n    float fi=march_fire(ro,rd,fragCoord);\n    vec3 col=vec3(0);\n    \n    if(t>0.)\n    {\n        vec3 pos=ro+t*rd;\n        vec3 n=get_normal(pos);\n        col=lighting(rd,pos,n,t);\n    }\n    col=mix(col,vec3(.0), 1.0-exp(-1.e-3*t*t) );\n    \n    col+=firecolor(fi);\n\n    col=pow(clamp(col,0.0,1.0),vec3(0.45));\n    col*=0.5+0.5*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);  // vigneting\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}