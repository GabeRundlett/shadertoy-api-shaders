{
    "Shader": {
        "info": {
            "date": "1697133873",
            "description": "Concentric rings in the complex plane, each mapped to the hyperbolic plane and decorated with a 6,6 tesselation.\n\nTexture offset set automatically or by mouse. Keys 1,2,3,a,d,f,p,q,r,x also do things (see code).",
            "flags": 16,
            "hasliked": 0,
            "id": "Dd3cWn",
            "likes": 17,
            "name": "Hyperbolic Rings",
            "published": 3,
            "tags": [
                "wheel",
                "tesselation",
                "hyperbolic"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 251
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Hyperbolic Rings: mla, 2023\n//\n// The map z -> tan(log(z)) maps concentric rings of the complex plane\n// onto the unit disc, which is the tesselated with a 6,6 hyperbolic\n// tesselation (press 'x' to see untransformed disc). Some extra\n// symmetry operations (p,q,r) produce wallpaper group effects.\n//\n// <mouse>: sets offset into texture (unless 'a' pressed)\n// 1,2,3: show tile edges\n// a: automatic mode (no mouse action)\n// d: display outside disc/halfplane\n// f: display principal region only\n// p,q,r: apply extra symmetry operations\n// x: toggle transform\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// Hexagonal tiling for maximum symmetry\nconst int P = 6;\nconst int Q = 6;\nconst int MAXITER = 100; // Number of folding iterations\n\nvec3 getcolor(vec2 fragCoord) {\n  vec2 mousepos = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n  // Just show one fundamental region\n  bool fundamental = key(CHAR_F);\n  vec2 C = vec2(icos(P),icos(Q));\n  float R2 = 1.0/(dot(C,C)-1.0);\n  float R = sqrt(R2);\n  C *= R;\n\n  vec2 ci = vec2(0,1); // Complex i\n\n  vec2 z = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n  if (!key(CHAR_X)) {\n    // Annulus\n    //z *= 2.0;\n    z = clog(z); // (1,0)-> (0,0)\n    // The constant here depends on the tiling\n    z = ctan(1.8237*z-vec2(0.5*iTime,0));\n  }\n  //z = cdiv(ci-z,ci+z);\n  bool flip = dot(z,z) > 1.0;\n  if (flip) {\n    if (key(CHAR_D)) return vec3(0);\n    else z /= dot(z,z);\n  }\n  //return texture(iChannel1,(z+1.0)/2.0).xyz; // For comparison\n  int maxiter = MAXITER;\n  int xflips = 0;\n  int yflips = 0;\n  int zflips = 0;\n  for ( ; zflips < maxiter; zflips++) {\n    xflips += int(z.x < 0.0);\n    yflips += int(z.y < 0.0);\n    z = abs(z);\n    if (!tryinvert(z,C,R2)) break;\n    if (fundamental) return vec3(0);\n    //assert(zflips < 20);\n  }\n  if (zflips == maxiter) return vec3(0);\n  vec2 z0 = z;\n  vec2 dx = dFdx(z0);\n  vec2 dy = dFdy(z0);\n  \n  float ldist = 1e8;\n  if (!key(CHAR_0+1)) ldist = min(ldist,abs(length(C-z)-R));\n  if (key(CHAR_0+2)) ldist = min(ldist,abs(z.x));\n  if (key(CHAR_0+3)) ldist = min(ldist,abs(z.y));\n  if (key(CHAR_P)) {\n    if (xflips%2 == 1) z.x = -z.x; //p4m again P = 2n\n  }\n  if (key(CHAR_Q)) {\n    if (yflips%2 == 1) z.y = -z.y; //and p4m again Q = 2n\n  }\n  if (key(CHAR_R)) {\n    if (zflips%2 == 1) z = -z; // Rotation by 180\n  }\n  vec2 uv = z;\n  uv = rotate(uv,0.25*PI);\n  float k = 2.0/(1.0+dot(uv,uv)); // Transform to Beltrami-Klein\n  k *= 0.5; // Extra scaling\n  uv *= k; dx *= k; dy *= k; \n  if (iMouse.x > 0.0 && !key(CHAR_A)) {\n    uv += 2.0*(iMouse.xy-0.5*iResolution.xy)/iResolution.y;\n  } else {\n    float t = 0.5*iTime;\n    uv += 0.5*vec2(cos(t),sin(0.618*t));\n  }\n  vec3 col = textureGrad(iChannel0,uv,dx,dy).zyx;\n  if (!flip) col = col.yzx;\n  col = pow(col,vec3(2.2));\n  col *= 1.5;\n  col = smoothstep(vec3(0),vec3(1),col);//pow(col,vec3(0.8));\n  col = mix(vec3(0),col,smoothstep(0.0,0.02,ldist)); // Gridlines\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec3 col = getcolor(fragCoord);\n  col = pow(col,vec3(0.4545));\n  if (alert) col.r = 1.0;\n  fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n// common\n////////////////////////////////////////////////////////////////////////////////\n\nbool alert = false;\nvoid assert(bool t) {\n  if (!t) alert = true;\n}\n\nconst float PI = 3.141592654;\nconst float TWOPI = 2.0*PI;\n\n/// Complex arithmetic ///\n\n// Normal vec2 operations work for\n// addition, subtraction and\n// multiplication by a scalar.\n      \n// Multiplication\nvec2 cmul(vec2 z0, vec2 z1) {\n  float x0 = z0.x; float y0 = z0.y; \n  float x1 = z1.x; float y1 = z1.y;\n  return vec2(x0*x1-y0*y1,x0*y1+x1*y0);\n}\n\n// Reciprocal\nvec2 cinv(vec2 z) {\n  float x = z.x; float y = z.y;\n  float n = 1.0/(x*x + y*y);\n  return vec2(n*x,-n*y);\n}\n\n// Division\nvec2 cdiv(vec2 z0, vec2 z1) {\n  return cmul(z0,cinv(z1));\n}\n\n// Exponentiation - e^ix\nvec2 expi(float x) {\n  return normalize(vec2(cos(x),sin(x)));\n}\n\nvec2 clog(vec2 z) {\n  return vec2(log(length(z)),atan(z.y,z.x));\n}\n\nvec2 clog(float x) {\n  return clog(vec2(x,0));\n}\n\n// e^iz\nvec2 cexp(vec2 z) {\n  return exp(z.x) * expi(z.y);\n}\n\nvec2 cpow(vec2 z, vec2 w) {\n  return cexp(cmul(clog(z),w));\n}\n\nvec2 cpow(vec2 z, float x) {\n  return cexp(x*clog(z));\n}\n\nvec2 cexp(float k, vec2 z) {\n  // return k^z\n  return cexp(cmul(clog(k),z));\n}\n\nvec2 csqrt(vec2 z) {\n  float r = length(z);\n  return vec2(sqrt(0.5*(r+z.x)),sign(z.y)*sqrt(0.5*(r-z.x)));\n}\n\nvec2 csin(vec2 z) {\n  float x = z.x, y = z.y;\n  return cdiv(cexp(vec2(-y,x))-cexp(vec2(y,-x)), vec2(0,2.0));\n}\n\nvec2 ccos(vec2 z) {\n  float x = z.x, y = z.y;\n  return 0.5*(cexp(vec2(-y,x))+cexp(vec2(y,-x)));\n}\n\nvec2 ctan(vec2 z) {\n  return cdiv(csin(z),ccos(z));\n}\n\nvec2 csinh(vec2 z) {\n  return 0.5*(cexp(z)-cexp(-z));\n}\n\nvec2 ccosh(vec2 z) {\n  return 0.5*(cexp(z)+cexp(-z));\n}\n\nvec2 ctanh(vec2 z) {\n  return cdiv(csinh(z),ccosh(z));\n}\n\nvec2 catan(vec2 z) {\n  vec2 iz = vec2(-z.y,z.x);\n  vec2 t = clog(cdiv(vec2(1,0)-iz,vec2(1,0)+iz));\n  return 0.5*vec2(-t.y,t.x);\n}\n\nvec2 catanh(vec2 z) {\n  return 0.5*clog(cdiv(vec2(1,0)+z,vec2(1,0)-z));\n  return 0.5*(clog(vec2(1,0)+z)-clog(vec2(1,0)-z)); // Alternative - invertable?\n}\n\n// Taken from NR, simplified by using a fixed number of\n// iterations and removing negative modulus case.\n// Modulus is passed in as k^2 (_not_ 1-k^2 as in NR).\nvoid sncndn(float u, float k2,\n            out float sn, out float cn, out float dn) {\n  float emc = 1.0-k2;\n  float a,b,c;\n  const int N = 4;\n  float em[N],en[N];\n  a = 1.0;\n  dn = 1.0;\n  for (int i = 0; i < N; i++) {\n    em[i] = a;\n    emc = sqrt(emc);\n    en[i] = emc;\n    c = 0.5*(a+emc);\n    emc = a*emc;\n    a = c;\n  }\n  // Nothing up to here depends on u, so\n  // could be precalculated.\n  u = c*u; sn = sin(u); cn = cos(u);\n  if (sn != 0.0) {\n    a = cn/sn; c = a*c;\n    for(int i = N-1; i >= 0; i--) {\n      b = em[i];\n      a = c*a;\n      c = dn*c;\n      dn = (en[i]+a)/(b+a);\n      a = c/b;\n    }\n    a = 1.0/sqrt(c*c + 1.0);\n    if (sn < 0.0) sn = -a;\n    else sn = a;\n    cn = c*sn;\n  }\n}\n\n// Complex sn. uv are coordinates in a rectangle, map to\n// the upper half plane with a Jacobi elliptic function.\n// Note: uses k^2 as parameter.\nvec2 sn(vec2 z, float k2) {\n  float snu,cnu,dnu,snv,cnv,dnv;\n  sncndn(z.x,k2,snu,cnu,dnu);\n  sncndn(z.y,1.0-k2,snv,cnv,dnv);\n  float a = 1.0/(1.0-dnu*dnu*snv*snv);\n  return a*vec2(snu*dnv, cnu*dnu*snv*cnv);\n}\n\nvec2 cn(vec2 z, float k2) {\n  float snu,cnu,dnu,snv,cnv,dnv;\n  sncndn(z.x,k2,snu,cnu,dnu);\n  sncndn(z.y,1.0-k2,snv,cnv,dnv);\n  float a = 1.0/(1.0-dnu*dnu*snv*snv);\n  return a*vec2(cnu*cnv,-snu*dnu*snv*dnv);\n}\n\nvec2 dn(vec2 z, float k2) {\n  float snu,cnu,dnu,snv,cnv,dnv;\n  sncndn(z.x,k2,snu,cnu,dnu);\n  sncndn(z.y,1.0-k2,snv,cnv,dnv);\n  float a = 1.0/(1.0-dnu*dnu*snv*snv);\n  return a*vec2(dnu*cnv*dnv,-k2*snu*cnu*snv);\n}\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n\nconst int CHAR_0 = 48;\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_M = 77;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n    \nvec2 rotate(float t) {\n  return expi(t);\n}\n\n// Rotate vector p by angle t.\nvec2 rotate(vec2 p, float t) {\n  //return cos(t)*p + sin(t)*vec2(-p.y,p.x);\n  // This produces more accurate results on some platforms\n  return cmul(p,rotate(t));\n}\n\nfloat COS[] =\n  // Don't trust cos on the GPU to be accurate enough: cos(PI/n) for n = 0..31\n  float[](1.0,-1.0,0.0,0.5,0.7071067812,0.8090169944,0.8660254038,\n          0.9009688679,0.9238795325,0.9396926208,0.9510565163,0.9594929736,\n          0.9659258263,0.9709418174,0.9749279122,0.9781476007,0.9807852804,\n          0.9829730997,0.984807753,0.9863613034,0.9876883406,0.9888308262,\n          0.9898214419,0.990685946,0.9914448614,0.9921147013,0.9927088741,\n          0.9932383577,0.9937122099,0.9941379572,0.9945218954,0.9948693234);\n\nfloat icos(int p) {\n  // cos(PI/p)\n  if (p < COS.length()) return COS[p];\n  return cos(PI/float(p));\n}\n\n// Invert z in circle radius r, centre w\nvec2 invert(vec2 z, vec2 w, float r2) {\n  vec2 z1 = z - w;\n  float k = r2/dot(z1,z1);\n  return z1*k+w;\n}\n\n// Invert z in circle p, r2, if it is inside\nbool tryinvert(inout vec2 z, vec2 p, float r2) {\n  vec2 z1 = z - p;\n  float d2 = dot(z1,z1);\n  if (d2 >= r2) return false;\n  z = z1*r2/d2 + p;\n  return true;\n}\n\nbool tryreflect(inout vec2 z, vec2 norm) {\n  float k = dot(z,norm);\n  if (k <= 0.0) {\n    return false;\n  } else {\n    z -= 2.0*k*norm;\n    return true;\n  }\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}