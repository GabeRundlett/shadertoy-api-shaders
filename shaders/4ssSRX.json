{
    "Shader": {
        "info": {
            "date": "1422832170",
            "description": "Another weird sculpture. It's one sphere distorted by sine waves.",
            "flags": 0,
            "hasliked": 0,
            "id": "4ssSRX",
            "likes": 94,
            "name": "Sculpture II",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "noise",
                "distancefield"
            ],
            "usePreview": 1,
            "username": "iq",
            "viewed": 7393
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2015 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n#define AA 1    // make 2 if you have a fast machine\n\n// box mapping, with differentials\nvec4 texCube( sampler2D sam, in vec3 p, in vec3 dpdx, in vec3 dpdy, in vec3 n, in float k )\n{\n\tvec4 x = texture( sam, p.yz );\n\tvec4 y = texture( sam, p.zx );\n\tvec4 z = texture( sam, p.xy );\n    vec3 w = pow( abs(n), vec3(k) );\n\treturn (x*w.x + y*w.y + z*w.z) / (w.x+w.y+w.z);\n}\n\nvec4 mapSculpture( vec3 p )\n{\n    p.x += 0.5*sin( 3.0*p.y + iTime );\n    p.y += 0.5*sin( 3.0*p.z + iTime );\n    p.z += 0.5*sin( 3.0*p.x + iTime );\n    p.x += 0.5*sin( 3.0*p.y + iTime );\n    p.y += 0.5*sin( 3.0*p.z + iTime );\n    p.z += 0.5*sin( 3.0*p.x + iTime );\n    p.x += 0.5*sin( 3.0*p.y + iTime );\n    p.y += 0.5*sin( 3.0*p.z + iTime );\n    p.z += 0.5*sin( 3.0*p.x + iTime );\n    p.x += 0.5*sin( 3.0*p.y + iTime );\n    p.y += 0.5*sin( 3.0*p.z + iTime );\n    p.z += 0.5*sin( 3.0*p.x + iTime );\n\n    float d1 = length(p) - 1.0*smoothstep(0.0,2.0,iTime);;\n    d1 *= 0.02;\n\n    return vec4( d1, p );\n}\n\nvec4 map( vec3 p )\n{\n    vec4 res = mapSculpture(p);\n    \n    float d2 = p.y + 1.0;\n    if( d2<res.x ) res = vec4( d2, 0.0, 0.0, 0.0 );\n\n\treturn res;\n}\n\nvec4 intersect( in vec3 ro, in vec3 rd, in float maxd )\n{\n    vec3 res = vec3(-1.0);\n\tfloat precis = 0.00005;\n    float t = 1.0;\n    for( int i=0; i<1024; i++ )\n    {\n\t    vec4 h = map( ro+rd*t );\n        res = h.yzw;\n        if( h.x<precis||t>maxd ) break;\n        t += h.x;\n    }\n   return vec4( t, res );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float e = 0.0001;\n    const vec2 k = vec2(1.0,-1.0);\n    return normalize( k.xyy*map( pos + k.xyy*e ).x + \n\t\t\t\t\t  k.yyx*map( pos + k.yyx*e ).x + \n\t\t\t\t\t  k.yxy*map( pos + k.yxy*e ).x + \n\t\t\t\t\t  k.xxx*map( pos + k.xxx*e ).x );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float k )\n{\n    float res = 1.0;\n    float t = 0.005;\n    for( int i=0; i<256; i++ )\n    {\n        float h = mapSculpture(ro + rd*t).x;\n        res = min( res, 5.0*k*h/t );\n        if( res<0.0001 || t>5.0 ) break;\n        t += clamp( h, 0.015, 0.04 );\n    }\n    return clamp(res,0.0,1.0);\n}\n\nfloat calcOcc( in vec3 pos, in vec3 nor )\n{\n    const float h = 0.2;\n\tfloat ao = 0.0;\n    for( int i=0; i<8; i++ )\n    {\n        vec3 dir = sin( float(i)*vec3(1.0,7.13,13.71)+vec3(0.0,2.0,4.0) );\n        dir *= sign(dot(dir,nor));\n        float d = mapSculpture( pos + h*dir ).x;\n        ao += max(0.0,h-d*2.0);\n    }\n    return clamp( 4.0 - 2.5*ao, 0.0, 1.0 )*(0.5+0.5*nor.y);\n}\n\nvoid calcRayForPixel( vec2 pix, out vec3 resRo, out vec3 resRd )\n{\n\tvec2 p = (-iResolution.xy + 2.0*pix) / iResolution.y;\n\t\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n\t\n\tfloat an = 0.3*iTime + 7.5;\n\n\tvec3 ro = vec3(4.5*sin(an),0.5,4.5*cos(an));\n    vec3 ta = vec3(0.0,0.5,0.0);\n\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n    \n\tresRo = ro;\n\tresRd = rd;\n}\n\nconst vec3 lig = normalize(vec3(1.0,0.7,0.9));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n            \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    #define ZERO min(iFrame,0)\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n    #else    \n        vec2 o = vec2(0.0,0.0);\n    #endif    \n \t\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    vec3 ro, rd, ddx_ro, ddx_rd, ddy_ro, ddy_rd;\n\tcalcRayForPixel( fragCoord + o + vec2(0.0,0.0), ro, rd );\n\tcalcRayForPixel( fragCoord + o + vec2(1.0,0.0), ddx_ro, ddx_rd );\n\tcalcRayForPixel( fragCoord + o + vec2(0.0,1.0), ddy_ro, ddy_rd );\n    \n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\tvec3 col = vec3(0.0);\n\t// raymarch\n    const float maxd = 9.0;\n    vec4  inn = intersect(ro,rd,maxd);\n    float t = inn.x;\n    if( t<maxd )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\t\tvec3 ref = reflect( rd, nor );\n\n        // -----------------------------------------------------------------------\n        // compute ray differentials by intersecting the tangent plane to the  \n        // surface.\t\t\n\t\t// -----------------------------------------------------------------------\n\n\t\t// computer ray differentials\n\t\tvec3 ddx_pos = ddx_ro - ddx_rd*dot(ddx_ro-pos,nor)/dot(ddx_rd,nor);\n\t\tvec3 ddy_pos = ddy_ro - ddy_rd*dot(ddy_ro-pos,nor)/dot(ddy_rd,nor);\t\t\n        \n        // material\n        col = vec3(0.3,0.3,0.3);\n        if( pos.y>-0.99) col += 0.2*inn.yzw;\n        vec3 pat = texCube( iChannel0, 0.5*pos, 0.5*ddx_pos, 0.5*ddy_pos, nor, 4.0 ).xyz;\n        col *= pat;\n        col *= 0.5;\n        \n\t\t// lighting\n\t\tfloat occ = calcOcc( pos, nor );\n\n        float amb = 0.5 + 0.5*nor.y;\n\t\tfloat dif = max(dot(nor,lig),0.0);\n\t\tfloat bou = max(0.0,-nor.y);\n        float bac = max(0.2 + 0.8*dot(nor,-lig),0.0);\n\t\tfloat sha = 0.0; if( dif>0.01 ) sha=softshadow( pos+0.001*nor, lig, 256.0 );\n        float fre = pow( clamp( 1.0 + dot(nor,rd), 0.0, 1.0 ), 3.0 );\n        float spe = 15.0*pat.x*max( 0.0, pow( clamp( dot(lig,reflect(rd,nor)), 0.0, 1.0), 16.0 ) )*dif*sha*(0.04+0.96*fre);\n\t\t\n\t\t// lights\n\t\tvec3 lin = vec3(0.0);\n\n        lin += 3.5*dif*vec3(6.00,4.00,3.00)*pow(vec3(sha),vec3(1.0,1.2,1.5));\n\t\tlin += 1.0*amb*vec3(0.80,0.30,0.30)*occ;\n\t\tlin += 1.0*bac*vec3(1.00,0.50,0.20)*occ;\n\t\tlin += 1.0*bou*vec3(1.00,0.30,0.20)*occ;\n        lin += 4.0*fre*vec3(1.00,0.80,0.70)*(0.1+0.9*dif*sha)*occ;\n        lin += spe*2.0;\n\n        // surface-light interacion\n\t\tcol = col*lin + spe;\n\n        // fade out\n        col *= min(200.0*exp(-1.5*t),1.0);\n        col *= 1.0-smoothstep( 1.0,6.0,length(pos.xz) );\n\t}\n\n \ttot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n    // gain\n    tot = 1.3*tot/(1.0+tot);\n        \n    // gamma\n\ttot = pow( clamp(tot,0.0,1.0), vec3(0.4545) );\n\n\n    // grading\n    tot = pow( tot, vec3(0.7,1.0,1.0) );\n    \n    // vignetting\n \tvec2 q = fragCoord.xy / iResolution.xy;\n    tot *= pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\t   \n    fragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}