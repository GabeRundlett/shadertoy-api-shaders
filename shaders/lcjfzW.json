{
    "Shader": {
        "info": {
            "date": "1724742294",
            "description": "originals  https://glslsandbox.com/e#52664.0 https://www.shadertoy.com/view/lcjyDR",
            "flags": 1,
            "hasliked": 0,
            "id": "lcjfzW",
            "likes": 5,
            "name": "earth and satellite",
            "published": 3,
            "tags": [
                "earth",
                "cosmos",
                "satellite"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 174
        },
        "renderpass": [
            {
                "code": "\n\n#define iterations 15\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(1., 10.233))) * 40000.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n           \t\t    -0.80,  0.36, -0.48,\n             \t\t-0.60, -0.48,  0.64 );\n\nfloat hash( float n ) {\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec3 x ) { // in [0,1]\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.-2.*f);\n\n    float n = p.x + p.y*57. + 113.*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.), hash(n+  1.),f.x),\n                        mix( hash(n+ 57.), hash(n+ 58.),f.x),f.y),\n                    mix(mix( hash(n+113.), hash(n+114.),f.x),\n                        mix( hash(n+170.), hash(n+171.),f.x),f.y),f.z);\n    return res;\n}\n\nfloat snoise( in vec3 x ) {\n    return noise(x) * 2.0 - 1.0;\n}\n\nfloat sfbm( vec3 p ) { // in [-1,1]\n    float f;\n    f  = 0.5000*snoise( p ); p = m * p * 2.02;\n    f += 0.2500*snoise( p ); p = m * p * 2.03;\n    f += 0.1250*snoise( p ); p = m * p * 2.01;\n    f += 0.0625*snoise( p );\n    return f;\n}\n\n// --------------------------------------------------------\n// SDF\n// https://iquilezles.org/articles/distfunctions\n// --------------------------------------------------------\n\nfloat sdSphere( vec3 p, float s ) {\n  return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b ) {\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n\n// --------------------------------------------------------\n// Spectrum colour palette\n// IQ https://www.shadertoy.com/view/ll2GD3\t\n// --------------------------------------------------------\n\nvec3 pal2( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 4.28318*(c*t+d) );\n}\n\nvec3 spectrum(float n) {\n    return pal2( n, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n}\n\n\n// --------------------------------------------------------\n// Main SDF\n// --------------------------------------------------------\n\nfloat map(vec3 p) {\n      p.xy*=mat2(cos(iTime),sin(iTime), -sin(iTime), cos(iTime));\n\n    float d1, d2;\n\n    vec3 p2 = p;\n    p2.x += 0.1 * sin( iTime + 1.0 * p.y ) ;\n    p2.y += 0.1 * sin( iTime + 1.0 * p.x ) ;\n    p2.z += 0.1 * sin( iTime + 1.0 * p.y ) ;\n    \n    d1 = sdSphere(p, 2.0);\n    d2 = sfbm( p2 * 1.5 + (0.1 * iTime) );\n    \n    float d = opSmoothSubtraction(d2, d1, 0.0);\n    \n    return d;\n}\n\n// --------------------------------------------------------\n// Rendering\n// raytracing colorization by Thomas Hooper.\n// https://www.shadertoy.com/view/WdB3Dw\n// --------------------------------------------------------\n\nmat3 calcLookAtMatrix(vec3 ro, vec3 ta, vec3 up) {\n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww,up));\n    vec3 vv = normalize(cross(uu,ww));\n    return mat3(uu, vv, ww);\n}      \nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\nfloat invs(float y) {\n    return 0.5 - sin(asin(1.0-2.0*y)/3.0);\n}\n\nfloat isBetween(float a, float b, float c) {\n    //float k = 3. / iResolution.y;\n    return smoothstep(-0.5, 0., -mod(c-a, 2. * pi) + mod(b-a - 0.1 * pi, 2. * pi));\n   //return exp( -1. * (abs(-mod(c-a, 2. * pi) + mod(b-a, 2. * pi))) );\n}\n\nfloat ellipse(vec2 uv, vec2 p, vec2 q, float i) {\n    float quadTest = 0.5 * (sign(q.x - p.x) * sign(q.y - p.y) + 1.);\n    i = 1.-quadTest;\n\n    // center point\n    vec2 c = (i == 1.) ? vec2(p.x, q.y)\n                       : vec2(q.x, p.y);\n\n    // axis distances between points\n    float x = abs(q.x - p.x), y = abs(q.y - p.y);\n\n\n    float d = sdEllipse(uv - c, vec2(x, y));\n\n \n    float k = 1. / iResolution.y;\n    float s = smoothstep(-k, k, -abs(d) + 0.006);\n    s = exp(-10. * abs(d));\n   \n    float a1 = atan(p.x-c.x, p.y-c.y);\n    float a2 = atan(q.x-c.x, q.y-c.y); // move b from a-> b to \"draw\" thing\n    float b = atan(uv.x-c.x, uv.y-c.y);\n    \n   \n    float as = isBetween(a1, a2, b);\n    return s;// * mix(as, 1. - as, quadTest);\n}\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.02),sin(iTime*0.02),-sin(iTime*0.02),cos(iTime*0.02));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.01,1.);\t\n}\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n #define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n#define resolution  iResolution.xy\n#define time iTime\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n    uv*=2.4;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\n\n    uv *= 1.1 + 0.15 * cos(uv.y - 0.0 * iTime);\n vec4 Color4 =fragColor  ;\n    \n    // points\n    vec2 p = 0.1 * vec2(cos(1.0 ), sin(iTime));\n    vec2 q = 0.2 * vec2(cos(1.0 * iTime), sin(1.00 * iTime));\n\n    // should look bad if time gets too high\n    float t = 1. * iTime*1. + 8. * h21(uv) + 15. *exp(-0.01 * length(uv)) * (650. + iTime*1.);\n    int f = int(floor(t)); \n      vec3 camPos = vec3(0, -10, -10);\n          camPos.xz*=mat2(cos(iTime),sin(iTime), -sin(iTime), cos(iTime));\n    vec3 camTar = vec3(0,0,0);\n    vec3 camUp = vec3(0,0,-1);\n    mat3 camMat = calcLookAtMatrix(camPos, camTar, camUp);\n    float focalLength = 5.;\n    vec2 p3 = (-iResolution.xy + 2. * fragCoord.xy) / iResolution.y;\np3*=1.5;\n    vec3 rayDirection = normalize(camMat * vec3(p3, focalLength));\n    vec3 rayPosition = camPos;\n    float rayLength = 0.;\n\n    float distance = 0.;\n    vec3 color = vec3(0);\n\n    vec3 c;\n \n    vec2 position  = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n     position*=0.7;\n     float sun      = 0.15 / abs(length(position));\n   \n \n    float skyblue  = 0.015 / abs(length(position) - 0.5);\n   \n  \n    float zahyo_1  =0.5;\n    \n    vec2 planet_position = vec2(position.x - sin(time) * zahyo_1, position.y - cos(time) * zahyo_1);\n    float planet_1 = 0.020175 / abs(length(planet_position));\n  float skyblue_1  = 0.005 / abs(length(planet_position) - 0.2);\n     vec2 planet_position2 = vec2(position.x + sin(time) * zahyo_1, position.y + cos(time) * zahyo_1);\n    float planet_2 = 0.075 / abs(length(planet_position2));\n    \n \n       vec2 planet_position3 = vec2(position.y + sin(time) * zahyo_1, position.x + cos(time) * zahyo_1);\n     float planet_3 = 0.075 / abs(length(planet_position3));\n  \n  \n    \n \n    float skyblue_2  = 0.005 / abs(length(planet_position2) - 0.2);\n  \n    float skyblue_3  = 0.005 / abs(length(planet_position3) - 0.2);\n    \n    \n \n \n    float zahyo_2  = 0.25;\n    vec2 satellite_position = vec2(planet_position.x - sin(time * 2.5) * zahyo_2, planet_position.y - cos(time * 2.5) * zahyo_2);\n    float satellite_1 = 0.025 / abs(length(satellite_position));\n     vec2 satellite_position2 = vec2(planet_position.x + sin(time * 2.5) * zahyo_2, planet_position.y + cos(time * 2.5) * zahyo_2);\n    float satellite_2 = 0.025 / abs(length(satellite_position2));\n\n vec2 satellite_position3 = vec2(planet_position3.x - sin(time * 2.5) * zahyo_2, planet_position3.y - cos(time * 2.5) * zahyo_2);\n \n  float satellite_3 = 0.025 / abs(length(satellite_position3));\n  \n  vec2 satellite_position4 = vec2(planet_position3.x + sin(time * 2.5) * zahyo_2, planet_position3.y + cos(time * 2.5) * zahyo_2);\n \n  float satellite_4 = 0.025 / abs(length(satellite_position4));\n  \n    vec2 satellite_position5 = vec2(planet_position2.x - sin(time * 2.5) * zahyo_2, planet_position2.y - cos(time * 2.5) * zahyo_2);\n    float satellite_5 = 0.025 / abs(length(satellite_position5));\n     vec2 satellite_position6 = vec2(planet_position2.x + sin(time * 2.5) * zahyo_2, planet_position2.y + cos(time * 2.5) * zahyo_2);\n    float satellite_6 = 0.025 / abs(length(satellite_position6));\n\n  \n    const float ITER = 122.;\n    const float FUDGE_FACTORR = 0.5;\n    const float INTERSECTION_PRECISION = .0001;\n    const float MAX_DIST = 20.;\n\n    for (float i = 0.; i < ITER; i++) {\n\n        // Step a little slower so we can accumilate glow\n        rayLength += max(INTERSECTION_PRECISION, abs(distance) * FUDGE_FACTORR);\n        rayPosition = camPos + rayDirection * rayLength;\n        distance = map(rayPosition);\n\n        // Add a lot of light when we're really close to the surface\n        c = vec3(max(0., .01 - abs(distance)) * .5);\n        c *= vec3(1.4,2.1,1.7); // blue green tint\n\n        // Accumilate some purple glow for every step\n        c += vec3(.6,.25,.7) * FUDGE_FACTORR / 160.;\n\n\n        // Fade out further away from the camera\n        float rl = smoothstep(MAX_DIST, .1, rayLength);\n        c *= rl;\n\n        // Vary colour as we move through space\n        c *= spectrum(rl * 6. - .6);\n\n        color += c;\n\n      \n    }\nvec4 O= fragColor;\nvec2 C =fragCoord;\n    \n     O=vec4(0);\n    vec3 n1,q2,r=iResolution,\n    d2=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        n1=g*d2;\n      \n        a=10.;\n       n1=mod(n1-a,a*2.)-a;\n        s=6.;\n        for(int i=0;i++<8;){\n            n1=.3-abs(n1);\n            \n            n1.x<n1.z?n1=n1.zyx:n1;\n          \n               n1.x<n1.z?n1=n1.zyx:n1;\n            n1.z<n1.y?n1=n1.xzy:n1;\n        \n            s*=e=1.4+sin(iTime*.234)*.1;\n            n1=abs(n1)*e+e-\n                vec3(\n                    5.+cos(iTime*.3+.5*cos(iTime*.3))*3.,\n                    120,\n                    8.+cos(iTime*.5)*5.\n                 )*Color4.xyz;\n         }\n         g+=e=length(n1.yz)/s;\n    }\n    \n    color = pow(color, vec3(1. / 1.8)) * 2.;\n    color = pow(color, vec3(2.)) * 3.;\n    float d = 10.;\n    float s = 0.;\n    vec2 pp = vec2(0.);\n    \n    vec3 e = vec3(1);\n    vec3 col = vec3(0);\n    \n    float n = 20.;\n    for (float i = 0.; i <= n; i++) {\n        float f2 = 0.0001 * float(f);\n        float f3 = 0.0001 * float(f + 1);\n\n        vec2 qp = pp;\n             \n        pp = vec2( h21(vec2(f2)), h21(vec2(0.01 + f2)) );\n        pp = pow(4. * pp * (1.-pp), vec2(4));\n\n        vec2 pp2 = vec2( h21(vec2(f3)), h21(vec2(0.01 + f3)) );\n        float fr = fract(t);\n        fr = smoothstep(0., 1., fr); //idk if this changes anything\n        pp = mix(pp, pp2, fr); // looks cool if you remove this too\n        pp = 0.3 * (pp - 0.5);\n        f++;\n        //if(i>0.) d = length(uv-pp);sdSegment(uv, pp, qp);\n        //s += exp(-40. * d);\n        float s2;\n        if (i > 0.) s2 = ellipse(uv, pp, qp, 0.);//mod(i, 2.));\n        s = clamp(s + s2, 0., 1.);\n        vec3 col2 = pal(i/n, e, e, e, (i/n) * vec3(0,1,2)/3.);\n        col = mix(col, col2, s2);\n    }\n    \n    col += 0.03;\n    col += 0.35 * exp(-3. *length(uv));\n\t\n\tvec3 from=vec3(1.,.5,0.5);\n\n\tmainVR(fragColor, fragCoord, from, dir);\n    \n   fragColor*=vec4(color,1.);\n    fragColor  += vec4(vec3(skyblue / 5.0, skyblue / 2.5, skyblue), 1.0);\n\n      fragColor  += vec4(vec3(planet_3 / 2.0, planet_3 / 2.5, planet_3), 1.0);\n    fragColor  += vec4(vec3(skyblue_2 / 5.0, skyblue_2 / 2.5, skyblue_2), 1.0);\n      fragColor  += vec4(vec3(planet_1 / 2.0, planet_1 / 1.5, planet_1), 1.0);\n    fragColor  += vec4(vec3(planet_2 / 2.0, planet_2 / 1.5, planet_2), 1.0);\n    fragColor  += vec4(vec3(skyblue_3 / 5.0, skyblue_3 / 2.5, skyblue_3), 1.0);\n fragColor  += vec4(vec3(skyblue_1 / 5.0, skyblue_1 / 2.5, skyblue_1), 1.0);\n    \n   fragColor  += vec4(vec3(satellite_1+satellite_2+satellite_3+satellite_4 +satellite_6+satellite_6+satellite_5/ 2.5\n   , satellite_1+satellite_2+satellite_3+satellite_4+satellite_6+satellite_5  / 2.5, satellite_1+satellite_3+satellite_4 +satellite_6+satellite_5 / 2.5), 1.0);\n  \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}