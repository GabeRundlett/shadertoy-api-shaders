{
    "Shader": {
        "info": {
            "date": "1650709261",
            "description": "Click around the screen to change things!\n\n(Avoid the top-left corner, it's kind of ugly)",
            "flags": 0,
            "hasliked": 0,
            "id": "7lfBWn",
            "likes": 17,
            "name": "Interactive 2.5D Line Waves",
            "published": 3,
            "tags": [
                "waves",
                "interactive",
                "lines",
                "25d"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 397
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 ms = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Change me!\n    float sc = 1.;   \n    uv *= sc;\n\n    // Line smoothstep\n    float s;   \n    \n    // Mouse parameters\n    float mx = 8. * (ms.x + 0.5);\n    float my = ceil(5. * (ms.y + 0.5));\n    \n    float n = 50.;\n    for (float i = 0.; i < n; i++) {\n        float t = 0.2 * iTime + 2. * pi * i / n; \n        \n        // Modified: y = sin(t) + uv.x * cos(t)\n        float y = sin(mx * uv.x + t) -  uv.x * cos(t) \n                + 0.5 * fract( pi * 0.2 * iTime + my * (uv.x + i / n));\n\n        // Include new line/wave\n        float k = sc / iResolution.y;\n        s = max(s, smoothstep(-k, k, -abs(uv.y - 0.25 * y) + k));\n    }\n    \n    // Background + color\n    s += exp(-4. * length(uv));\n    vec3 e = vec3(0.5);\n    vec3 col = pal(0.5 * s + 0.85, e, e, e, 0.5 * vec3(0,1,2)/3.);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\n#define Rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b) {\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}