{
    "Shader": {
        "info": {
            "date": "1427629586",
            "description": "Using simple color gradients (with values 0, 0.5 and 1), this shows how brightness (1st col.), saturation (2nd col.) and hue (3rd col.) are affected by gamma correction or lack thereof. Left version is corrected; right one varies between corrected or not.",
            "flags": 0,
            "hasliked": 0,
            "id": "llS3zm",
            "likes": 22,
            "name": "Gamma and perceived color",
            "published": 3,
            "tags": [
                "color",
                "saturation",
                "hue",
                "gamma",
                "gammacorrection",
                "linear",
                "intensity"
            ],
            "usePreview": 0,
            "username": "Zavie",
            "viewed": 2182
        },
        "renderpass": [
            {
                "code": "/*\n\nThis shader demonstrates the effect of gamma on\ncolor hue.\n\nEach left gradient is gamma corrected, while its\nright counter part is not.\n\nNote how hue, saturation and intensity are different\nbetween gamma corrected and non gamma corrected\nversions.\n\n--\nZavie\n\n*/\n\nfloat gamma = 2.2;\n\nstruct colorPair\n{\n    vec3 color1;\n    vec3 color2;\n};\n\nvec3 shade(vec2 uv, colorPair pair)\n{\n    return clamp(mix(pair.color1, pair.color2, uv.y), 0., 1.);\n}\n\n#define numberOfColors 3.\n\ncolorPair getColorPair(float x)\n{\n    int i = int(floor(numberOfColors * x));\n\n    // Demonstrate intensity change\n    if (i == 0) return colorPair(vec3(1.0, 0.0, 0.0),\n                                 vec3(0.0, 1.0, 1.0));\n    \n    // Demonstrate saturation change\n    if (i == 1) return colorPair(vec3(1.0, 0.5, 0.5),\n                                 vec3(0.5, 0.5, 1.0));\n\n    // Demonstrate hue change\n    if (i == 2) return colorPair(vec3(1.0, 0.0, 0.0),\n                                 vec3(1.0, 1.0, 0.0));\n\n    return colorPair(vec3(0.), vec3(1.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 color = shade(uv, getColorPair(uv.x));\n\n    float x = clamp(abs(fract(0.2*iTime + 0.5) * 2. - 1.) * 2. - 0.5, 0., 1.);\n    float exponent = mix(1.0, 1.0/gamma, max(x, float(fract(numberOfColors * uv.x) < 0.5)));\n\tcolor = pow(color, vec3(exponent));\n\n\tfragColor = vec4(color, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}