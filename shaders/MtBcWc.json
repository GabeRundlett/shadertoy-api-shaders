{
    "Shader": {
        "info": {
            "date": "1510331369",
            "description": "Two-cylinder steam engine (better than one)",
            "flags": 0,
            "hasliked": 0,
            "id": "MtBcWc",
            "likes": 12,
            "name": "Steam Engine No.2",
            "published": 3,
            "tags": [
                "mechanics",
                "kinematics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 640
        },
        "renderpass": [
            {
                "code": "// \"Steam Engine No.2\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrSphDf (vec3 p, float s);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltDir, qHit;\nvec2 aCs[2], crCs[2], crMid[2];\nfloat tCur, dstFar, crRad, crLen, aRot;\nconst float pi = 3.14159;\nint idObj;\nconst int idWhl = 1, idSpk = 2, idCrnk = 3, idAx = 4, idPis = 5, idCrod = 6, idCyl = 7,\n   idCylEnt = 8, idValv = 9, idPipes = 10, idSup = 11, idBase = 12;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, dz;\n  dMin = dstFar;\n  p.x -= 8.;\n  q = p;\n  q.xy = Rot2Cs (q.xy, aCs[0]);\n  q.z = abs (q.z) - 5.;\n  d = min (PrCylAnDf (q, 4., 0.15, 1.), PrCylDf (q, 0.6, 1.));\n  if (d < dMin) { dMin = d;  idObj = idWhl;  qHit = q; }\n  q.xy = Rot2D (q.xy, 2. * pi * (floor (8. * atan (q.y, - q.x) / (2. * pi) + 0.5)) / 8.);\n  d = PrCylDf (vec3 (q.x + 2.2, q.y, abs (q.z) - 0.5).yzx, 0.2, 1.7);\n  if (d < dMin) { dMin = d;  idObj = idSpk; }\n  d = max (PrCylDf (p, 0.3, 6.1), 0.35 - abs (abs (p.z) - 2.));\n  if (d < dMin) { dMin = d;  idObj = idAx; }\n  for (int k = 0; k < 2; k ++) {\n    dz = (k == 0) ? -2. : 2.;\n    q = p;\n    q.xy = Rot2Cs (q.xy, aCs[k]);\n    q.z += dz;\n    d = min (PrBoxDf (vec3 (q.x + 0.5 * crRad, q.y, abs (q.z) - 0.5), vec3 (0.5 * crRad, 0.2, 0.1)),\n       PrCylDf (vec3 (abs (q.x + 0.5 * crRad) - 0.5 * crRad, q.y, abs (q.z) - 0.5), 0.6, 0.1));\n    if (d < dMin) { dMin = d;  idObj = idCrnk; }\n    d = min (PrCylDf (vec3 (q.x + crRad, q.yz), 0.3, 0.65), d);\n    if (d < dMin) { dMin = d;  idObj = idAx; }\n    q = p;  q.z += dz;\n    q.xy = Rot2Cs (q.xy + crMid[k], crCs[k]);\n    d = min (PrCylDf (vec3 (abs (q.y) - 0.12, q.zx), 0.15, crLen - 0.5),\n       PrCylDf (vec3 (abs (q.x) - crLen, q.yz), 0.6, 0.15));\n    if (d < dMin) { dMin = d;  idObj = idCrod; }\n    q = p;  q.z += dz;  q.x -= - (4.5 + crMid[k].x + crLen * crCs[k].x);\n    d = PrCylDf (q.yzx, 0.25, 3.7);\n    if (d < dMin) { dMin = d;  idObj = idPis; }\n    d = PrCylDf ((q - vec3 (0.7, 1.7, 0.)).yzx, 0.07, 3.);\n    if (d < dMin) { dMin = d;  idObj = idPis; }\n    q.x -= 4.5;\n    d = PrCylDf (q, 0.3, 0.5);\n    if (d < dMin) { dMin = d;  idObj = idAx; }\n    d = min (min (PrCylDf ((q + vec3 (0.8, 0., 0.)).yzx, 0.6, 0.13),\n       PrCylDf ((q + vec3 (0.8, -0.8, 0.)).xzy, 0.08, 0.95)),\n       PrCylDf (vec3 (q.xy, abs (q.z) - 0.35), 0.7, 0.1));\n    if (d < dMin) { dMin = d;  idObj = idCrnk; }\n  }\n  q = p + vec3 (16.9, 0., 0.);  q.z = abs (q.z) - 2.;\n  d = PrCylDf ((q + vec3 (-3.5, 0., 0.)).yzx, 0.7, 0.2);\n  if (d < dMin) { dMin = d;  idObj = idCylEnt;  qHit = q; }\n  d = PrCylDf (q.yzx, 1.5, 3.5);\n  if (d < dMin) { dMin = d;  idObj = idCyl;  qHit = q; }\n  q = p + vec3 (16.9, -1.7, 0.);  q.z = abs (q.z) - 2.;\n  d = PrCylDf (q.yzx, 0.5, 2.5);\n  if (d < dMin) { dMin = d;  idObj = idValv;  qHit = q; }\n  q = vec3 (abs (p.x + 16.9) - 1., p.y - 1.8, p.z);\n  d = min (PrCylDf (q, 0.37, 2.), PrCylAnDf ((q + vec3 (0., -1.2, 0.)).xzy, 0.3, 0.05, 1.));\n  if (d < dMin) { dMin = d;  idObj = idPipes;  qHit = q; }\n  d = min (PrBoxDf (vec3 (p.x, p.y + 1.6, abs (p.z) - 3.3), vec3 (0.5, 1.5, 0.2)),\n     PrBoxDf (vec3 (p.x, p.y + 1.6, p.z), vec3 (0.5, 1.5, 0.2)));\n  d = min (d, min (PrCylDf (vec3 (p.xy, abs (p.z) - 3.3), 0.5, 0.3),\n     PrCylDf (vec3 (p.xy, p.z), 0.5, 0.5)));\n  if (d < dMin) { dMin = d;  idObj = idSup; }\n  q = p + vec3 (0., -1.8, 0.);\n  d = PrCylDf ((q + vec3 (0., 0.6, 0.)).xzy, 0.15, 0.7);\n  q.xz = Rot2D (q.xz, 4. * aRot);\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (4. * atan (q.z, - q.x) / (2. * pi) + 0.5)) / 4.);\n  q.xy = Rot2D (q.xy, -0.25 * pi);\n  d = min (d, PrCylDf ((q + vec3 (0.4, -0.1, 0.)).yzx, 0.05, 0.4));\n  if (d < dMin) { dMin = d;  idObj = idAx; }\n  d = PrSphDf (q + vec3 (0.7, -0.1, 0.), 0.15);\n  if (d < dMin) { dMin = d;  idObj = idPis; }\n  d = min (PrBoxDf (p + vec3 (8., 4., 0.), vec3 (13., 1., 3.5)),\n     PrBoxDf (p + vec3 (16.9, 2.5, 0.), vec3 (3., 1.4, 3.)));\n  if (d < dMin) { dMin = d;  idObj = idBase; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 160; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.0005, -0.0005, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ShGrid (vec2 p)\n{\n  vec2 q, sq, ss;\n  q = p;\n  sq = smoothstep (0.05, 0.1, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.3 * smoothstep (0.3, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.8 + 0.2 * sq.x * sq.y, ss.y);\n}\n\nvec3 ShStagGrid (vec2 p, vec2 g)\n{\n  vec2 q, sq, ss;\n  q = p * g;\n  if (2. * floor (0.5 * floor (q.y)) != floor (q.y)) q.x += 0.5;\n  sq = smoothstep (0.05, 0.1, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.3 * smoothstep (0.3, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.8 + 0.2 * sq.x * sq.y, ss.y);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += max (0.01, h);\n    if (sh < 0.05) break;\n  }\n  return sh;\n}\n\nvec2 BlkHit (vec3 ro, vec3 rd)\n{\n  vec3 v, tm, tp, u, qnBlk;\n  vec2 qBlk;\n  float dn, df, bSize;\n  bSize = dstFar;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  if (df > 0. && dn < df) {\n    qnBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n    u = (v + dn) * rd;\n    qBlk = vec2 (dot (u.zxy, qnBlk), dot (u.yzx, qnBlk)) / bSize;\n  } else qBlk = vec2 (0.);\n  return qBlk;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, bgCol, vn, rg;\n  vec2 qBlk;\n  float dstObj, a, s, sh;\n  bool fxz;\n  aRot = -0.3 * 2. * pi * tCur;\n  aCs[0] = vec2 (cos (aRot), sin (aRot));\n  aCs[1] = vec2 (cos (aRot + pi), sin (aRot + pi));\n  crRad = 2.;\n  crLen = 5.;\n  for (int k = 0; k < 2; k ++) {\n    crMid[k].y = -0.5 * crRad * aCs[k].y;\n    crCs[k] = vec2 (cos (asin (crMid[k].y / crLen)), crMid[k].y / crLen);\n    crMid[k].x = crLen * crCs[k].x + crRad * aCs[k].x;\n  }\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    qBlk = mod (2. * BlkHit (ro, reflect (rd, vn)), 1.);\n    if (idObj == idBase) {\n      col4 = vec4 (0.1, 0.6, 0.1, 0.1);\n      if (abs (vn.y) < 0.01) {\n        rg = ro;\n        rg.y += 0.5;\n        fxz = (abs (vn.x) > 0.99);\n        rg = ShStagGrid ((fxz ? rg.zy : rg.xy), vec2 (1., 2.));\n        col4.r *= rg.y;\n        col4.rgb *= 1. - 0.3 * Fbm2 (2. * (fxz ? ro.zy : ro.xy));\n        rg.xz *= sign (fxz ? vn.x : vn.z);\n        if (fxz) {\n          if (rg.x == 0.) vn.xy = Rot2D (vn.xy, rg.z);\n          else vn.xz = Rot2D (vn.xz, rg.x);\n        } else {\n          if (rg.x == 0.) vn.zy = Rot2D (vn.zy, rg.z);\n          else vn.zx = Rot2D (vn.zx, rg.x);\n        }\n      } else {\n        rg = ShGrid (ro.xz);\n        col4.r *= rg.y;\n        col4.rgb *= 1. - 0.3 * Fbm2 (2. * ro.xz);\n        if (vn.y > 0.99) {\n          if (rg.x == 0.) vn.yz = Rot2D (vn.yz, rg.z);\n          else vn.yx = Rot2D (vn.yx, rg.x);\n        }\n      }\n      vn = VaryNf (32. * ro, vn, 1.);\n    } else if (idObj == idCyl) {\n      col4 = vec4 (0.7, 0.3, 0.1, 0.2);\n      a = atan (qHit.z, - qHit.y) / (2. * pi);\n      if (abs (vn.x) > 0.99) {\n        col4.r *= 1. - 0.3 * Fbm2 (4. * qHit.yz);\n        col4.rgb *= (1. - 0.5 * SmoothBump (0.2, 0.4, 0.01, mod (16. * a + 0.5, 1.)) *\n           SmoothBump (0.05, 0.13, 0.01, 1. - length (qHit.yz) / 1.5));\n      } else {\n        col4.r *= 1. - 0.3 * Fbm2 (4. * vec2 (8. * a, qHit.x));\n        col4.rgb *= (1. - 0.5 * SmoothBump (0.03, 0.06, 0.01, 1. - abs (qHit.x) / 3.5));\n        a = mod (32. * a, 1.);\n        if (abs (qHit.x) < 3.3) vn.yz = Rot2D (vn.yz, 0.4 * SmoothBump (0.25, 0.75, 0.2, a) *\n           sign (a - 0.5) * sign (ro.z));\n      }\n    } else if (idObj == idWhl) {\n      if (abs (vn.z) < 0.01) qHit.xy = vec2 (8. * atan (qHit.x, - qHit.y) / pi, qHit.z);\n      col4 = vec4 (0.5, 0.5, 0.6, 0.1) * (1. + 0.2 * Noisefv2 (128. * qHit.xy));\n    } else if (idObj == idSpk) {\n      col4 = 1.1 * vec4 (0.5, 0.5, 0.6, 0.2);\n    } else if (idObj == idCrnk) {\n      col4 = vec4 (0.4, 0.4, 0.5, 0.2);\n    } else if (idObj == idAx) {\n      col4 = vec4 (0.6, 0.4, 0.1, 0.3);\n    } else if (idObj == idPis) {\n      col4 = vec4 (0.5, 0.5, 0.2, 0.3);\n    } else if (idObj == idCrod) {\n      col4 = vec4 (0.6, 0.5, 0.6, 0.3);\n    } else if (idObj == idCylEnt) {\n      col4 = vec4 (0.7, 0.4, 0.1, 0.2);\n      if (length (qHit.yz) < 0.33) col4.rgb *= 0.5;\n    } else if (idObj == idValv) {\n       col4 = vec4 (0.7, 0.4, 0.1, 0.2);\n       if (vn.x > 0. && length (qHit.yz) < 0.13) col4.rgb *= 0.5;\n    } else if (idObj == idPipes) {\n       col4 = (qHit.y < 0. || length (qHit.xz) > 0.3) ?\n          vec4 (0.7, 0.4, 0.1, 0.2) : vec4 (0.3, 0.2, 0., 0.);\n    } else if (idObj == idSup) {\n      col4 = vec4 (0.5, 0.3, 0.1, 0.05);\n      vn = VaryNf (32. * ro, vn, 1.);\n    }\n    sh = 0.5 + 0.5 * ObjSShadow (ro, ltDir);\n    col = col4.rgb * (0.2 + 0.8 * sh * max (dot (vn, ltDir), 0.)) +\n       col4.a * sh * pow (max (dot (normalize (ltDir - rd), vn), 0.), 64.);\n    col += col4.a * vec3 (0.4) * (0.5 + 0.5 * SmoothBump (0.25, 0.75, 0.05, qBlk.x) *\n       SmoothBump (0.25, 0.75, 0.05, qBlk.y));\n  } else {\n    qBlk = mod (4. * BlkHit (ro, rd), 1.);\n    col = vec3 (1., 0.6, 0.6) * (0.05 + 0.245 * (rd.y + 1.) * (rd.y + 1.)) +\n       vec3 (0.2) * (0.8 + 0.2 * SmoothBump (0.25, 0.75, 0.1, qBlk.x) *\n       SmoothBump (0.25, 0.75, 0.1, qBlk.y));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.1 * pi;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.7 * pi * mPtr.y;\n  } else {\n    az -= 0.03 * pi * tCur;\n    el -= 0.05 * pi * sin (0.02 * pi * tCur);\n  }\n  el = clamp (el, -0.4 * pi, -0.01 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., -1., -40.);\n  zmFac = 3.7;\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  dstFar = 70.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}