{
    "Shader": {
        "info": {
            "date": "1665783062",
            "description": "classic",
            "flags": 0,
            "hasliked": 0,
            "id": "dssGzN",
            "likes": 6,
            "name": "glowing kaleidostepper",
            "published": 3,
            "tags": [
                "fractal",
                "kaleidoscope",
                "mandala"
            ],
            "usePreview": 0,
            "username": "ufffd",
            "viewed": 289
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    vec3 finalcol = vec3(0.);\n    for (int fs=1;fs<3;fs++) {\n        vec3 col = vec3(0.);\n        vec2 fuv = uv/float(fs); // fractal uv\n        if (fs==2) fuv.y *= -1.;\n        for (int i=0; i<8; i++) {\n            // fuv *= Rot(sin(iTime*0.1)*6.28);\n            float f1 = (smoothstep(0.8,1.,fract(iTime))+floor(iTime))*0.5;\n            float steptime = mix(f1,iTime+0.25,0.0);\n            steptime *= PI;\n            steptime /= 4.;\n            fuv *= Rot(steptime);\n            fuv.y += 0.05;\n            fuv = abs(fuv);\n        }\n\n        col.r = smoothstep(0.,.5,length(fuv-0.25-sin(iTime*0.11)*0.1));\n        col.r *= mix(1.,smoothstep(-1.,-0.95,sin(fuv.y*20.-iTime)),sin(iTime+fuv.x));\n        col.r = sin(col.r+5.);\n        col.r *= col.r;\n        for (int i=0; i<8; i++) {\n            fuv *= Rot(sin(iTime+0.25));\n            fuv.y += 0.05;\n            fuv = abs(fuv-0.5);\n        }\n\n        col.g = smoothstep(0.15,0.3,length(fuv-0.25-sin(iTime*0.12)*0.1));\n        for (int i=0; i<8; i++) {\n            fuv *= Rot(-0.1*iTime+0.25);\n            fuv.y += 0.5;\n            fuv = abs(fuv-0.5);\n        }\n\n        col.b = smoothstep(0.,0.3,length(fuv-0.25-sin(iTime*0.13)*0.1));\n        col.b += col.g*smoothstep(.1,0.9,length(fuv));\n        col.b -= length(fuv);\n\n        col = mix(col,0.5*col,smoothstep(1.6,1.1,col.r+col.g+col.b));\n        col += col.r * 0.5;\n        col *= 1.-smoothstep(0.4,1.,length(uv)/float(fs));\n        finalcol += col;\n    }\n    finalcol.g *= finalcol.r;\n    \n    // Output to screen\n    fragColor = vec4(finalcol,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TAU 6.283185307\n#define PI 3.1415926535\n\nfloat nsin(float a){return sin(a)*0.5+0.5;}\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nbool nearly(in float a, in float b) {\n    return abs(a - b) < 0.001;\n}\n\nmat2 Rot(in float a) {\n    return mat2(cos(a),-sin(a),\n                sin(a),cos(a));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}