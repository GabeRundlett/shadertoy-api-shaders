{
    "Shader": {
        "info": {
            "date": "1605470240",
            "description": "cabeza-simple-v3",
            "flags": 8,
            "hasliked": 0,
            "id": "wddBzB",
            "likes": 2,
            "name": "cabeza-simple-v3",
            "published": 3,
            "tags": [
                "cabezasimplev3"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 315
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.01\n#define EPSILON 0.001\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\n\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n//operacion de Union\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\n//float sdSphere( vec3 p, float s )\n//\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\n\n\n\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n\t{ vec3 q = abs(p) - b; return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r; }\n//float sdTorus( vec3 p, vec2 t )\n//\t{ vec2 q = vec2(length(p.xz)-t.x,p.y);  return length(q)-t.y; }\nfloat sdCylinder( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xz),p.y)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderYZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.yz),p.x)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xz),p.y)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXY( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xy),p.z)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\n\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\n\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n//-------------------------------------------\n\n///------------------------------------\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{\n    float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n///------------------------------------\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat sdCapsule(in vec3 p, in vec3 a, in vec3 b, in float r0, in float r1 )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0., 1.);\n    return length( pa - ba*h ) - mix(r0,r1,h);\n}\n\n\nvec3 HacerOjoConCabeza4en1(float sdcabeza,float sdPupila, float sdIris, float sdesclerotica, bool pblnCabeza )\n{\n    \n    vec3 res;\n    res = vec3(9999.0, -1.0,-1.0);\n    //sdescleroticaDer>sdIrisDer>sdPupilaDer  (eje x,y)\n    //sdPupilaDer>sdIrisDer>sdescleroticaDer ( eje z)\n    \n    float uniontdo;\n    /*\n    uniontdo= sdcabeza;\n    uniontdo= unionSDF(uniontdo, sdPupila);\n    uniontdo= unionSDF(uniontdo, sdIris);\n    uniontdo= unionSDF(uniontdo, sdesclerotica);\n    \n    float interstdo;\n    interstdo=sdcabeza;\n    interstdo=intersectSDF(interstdo, sdPupila);\n    interstdo=intersectSDF(interstdo, sdIris); \n    interstdo=intersectSDF(interstdo, sdesclerotica);\n    \n    \n    float diftdo=sdcabeza;\n    diftdo=differenceSDF(diftdo,sdesclerotica);\n    diftdo=differenceSDF(diftdo, sdPupila);\n    diftdo=differenceSDF(diftdo, sdIris);\n    */\n    float interAB=intersectSDF(sdIris, sdcabeza);\n    float interAC=intersectSDF(sdPupila, sdcabeza);\n    float interAD=intersectSDF(sdesclerotica, sdcabeza);\n    \n    if (pblnCabeza)    res =opU3(res, vec3(sdcabeza,16.0,MATERIAL_NO));    \n    res =opU3(res, vec3(interAD,1.0,MATERIAL_NO)); \n    res =opU3(res, vec3(interAB,4.0,MATERIAL_NO));\n    res =opU3(res, vec3(interAC,0.0,MATERIAL_NO)); \n    \n    return res;\n}\n   \n\n\n\nfloat nose(vec3 p)\n{\n\tvec3 n;\n    n=p;\n\tn.xz =rotatev2(p.xz, radians(45.0));\n    float d  = sdRoundBox(n, vec3(0.45,2.0,0.45), .8); \n    return d;\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nvec3 BendCurvaFija(vec3 pos,vec3 center)\n{    \n    vec3 p1=pos-center;\n    float c = cos(-0.15*p1.x);\n    float s = sin(-0.15*p1.x);\n    mat2 m = mat2(c,-s,s,c);\n    vec3 p2 = vec3(m*p1.xy,p1.z);\n    return p2;\n}\n\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\t\n\tvec3 res;\n    vec3 pp=p;\n    res = vec3(9999.0, -1.0,-1.0);\n\n    p= rotate_y(p-vec3(0.0,0.0,0.0), radians(180.0+20.0*sin(iTime)));\n    \n\t\n\tfloat planeDist1 = p.y+0.0;  //piso inf\n    float planeDist2 = 50.0-p.y;  //piso sup\n    float planeDist3 = p.x+35.0; //pared izq\n    float planeDist4 = 35.0-p.x;  //pared der\n    float planeDist5 = -p.z+45.0;  //pared frente\n    float planeDist6 = p.z+45.0;  //pared atras\n    \n    //res =opU3(res, vec3(planeDist1,13.0,MATERIAL_NO)); //inf\n    \n    \n    res =opU3(res, vec3(planeDist1,1.0,-1.0)); //inf\n    res =opU3(res, vec3(planeDist2,1.0,MATERIAL_NO)); \n    res =opU3(res, vec3(planeDist3,1.0,MATERIAL_NO)); \n    res =opU3(res, vec3(planeDist4,1.0,MATERIAL_NO)); \n    res =opU3(res, vec3(planeDist5,1.0,MATERIAL_NO)); \n    res =opU3(res, vec3(planeDist6,1.0,MATERIAL_NO));\n   \n  \n    p.y=p.y-5.0;\n \n    \n     float separacionOjoX=3.0;\n    float sdPupilaDer= sdCylinderXY(p- vec3( separacionOjoX,10.0,-10.0), vec2(0.5,4.0) );\n    float sdPupilaIzq= sdCylinderXY(p- vec3(-separacionOjoX,10.0,-10.0), vec2(0.5,4.0) );\n    \n    float sdIrisDer= sdCylinderXY(p- vec3( separacionOjoX,10.0, -10.0), vec2(1.0,3.0) );\n    float sdIrisIzq= sdCylinderXY(p- vec3(-separacionOjoX,10.0,-10.0), vec2(1.0,3.0) );\n \n    float sdescleroticaDer=sdEllipsoid(p-vec3(separacionOjoX,10.0,-10.0), vec3(2.5,1.8,3.0) );\n    float sdescleroticaIzq=sdEllipsoid(p-vec3(-separacionOjoX,10.0,-10.0), vec3(2.5,1.8,3.0) );\n    \n    \n    \n    float sdCabeza= sdEllipsoid(p-vec3(0.0,11.0,-14.0), vec3(8.0,11.0,6.0) );\n    vec3 resojoDer =HacerOjoConCabeza4en1(sdCabeza,sdPupilaDer, sdIrisDer, sdescleroticaDer, true);\n    vec3 resojoIzq =HacerOjoConCabeza4en1(sdCabeza,sdPupilaIzq, sdIrisIzq, sdescleroticaIzq,false);\n    res =opU3(res, resojoDer); \n    res =opU3(res, resojoIzq);     \n    \n    \n    \n    float sdnariz= nose(p-vec3(0.0,8.0,-9.0));\n    res =opU3(res, vec3(sdnariz,16.0,MATERIAL_NO));     \n    \n    \n    float sdcejaIzq= sdBox(p-vec3( 3.5,12.0,-8.0), vec3(1.5,0.2,3.0) );\n    float sdcejaDer= sdBox(p-vec3(-3.5,12.0,-8.0), vec3(1.5,0.2,3.0) );\n  \tfloat interCejaIzq= intersectSDF(sdCabeza, sdcejaIzq);\n    float interCejaDer= intersectSDF(sdCabeza, sdcejaDer);\n    \n    res =opU3(res, vec3(interCejaIzq,0.0,MATERIAL_NO)); \n    res =opU3(res, vec3(interCejaDer,0.0,MATERIAL_NO)); \n    \n    \n    ///Boca\n    float sdBoca= sdBox(p-vec3( 0.0,4.5,-8.0), vec3(2.5,0.2,3.0) );\n    float interBoca= intersectSDF(sdCabeza, sdBoca);\n    res =opU3(res, vec3(interBoca,2.0,MATERIAL_NO)); \n    \n    \n    vec3 p2= BendCurvaFija(p,vec3(0.0,16.5,-11.0));\n    float caps = sdCapsule(p2, vec3(-4.0, 4.0, 0.0), vec3(4.0, 4.0, 0.0), 0.5);\n    res =opU3(res, vec3(caps,8.0,MATERIAL_NO));     \n    \n    \n    p2= BendCurvaFija(p,vec3(0.0,16.0,-12.0));\n    caps = sdCapsule(p2, vec3(-6.0, 5.0, 0.0), vec3(6.0, 5.0, 0.0), 0.5);\n    res =opU3(res, vec3(caps,9.0,MATERIAL_NO));  \n    \n    \n    p2= BendCurvaFija(p,vec3(0.0,3.0,-10.0));\n    caps = sdCapsule(p2, vec3(-3.0, 3.0, 0.0), vec3(3.0, 3.0, 0.0), 0.5);\n    res =opU3(res, vec3(caps,31.0,MATERIAL_NO));  \n    \n    \n    p2= BendCurvaFija(p,vec3(0.0,13.0,-14.0));\n    caps = sdCapsule(p2, vec3(-8.0, 8.0, 0.0), vec3(8.0, 8.0, 0.0), 0.5);\n    res =opU3(res, vec3(caps,8.0,MATERIAL_NO));  \n    \n\t\n    \n    \n    float slinea1= sdBox(p-vec3(0.0,15.0,-10.0), vec3(10.0,0.25,2.0));\n    float slinea2= sdBox(p-vec3(0.0,12.0,-10.0), vec3(10.0,0.25,2.0));\n    float slinea3= sdBox(p-vec3(0.0,8.0,-10.0), vec3(10.0,0.25,2.0));\n    \n    float interLinea1= intersectSDF(sdCabeza, slinea1);\n    float interLinea2= intersectSDF(sdCabeza, slinea2);\n    float interLinea3= intersectSDF(sdCabeza, slinea3);\n    \n\n    res =opU3(res, vec3(interLinea1,0.0,MATERIAL_NO));  \n    res =opU3(res, vec3(interLinea2,0.0,MATERIAL_NO));  \n    res =opU3(res, vec3(interLinea3,0.0,MATERIAL_NO));  \n      \n    //res =opU3(res, vec3(1.0,0.0,MATERIAL_NO)); \n    //return (dist, id_color, id_material)\n    \n    return res;\n}\n\n\n\n\nvec3 LightShadingV2(vec3 normal,vec3 p, vec3 ro,vec3 rd, vec3 plight_pos,vec3 color)\n{   \n    vec3 final = vec3( 0.0 );\n    float shininess = 64.;\n    vec3 lig = normalize(plight_pos);\n    vec3 l = normalize( p-plight_pos);\n    vec3 v = normalize( p-ro);\n   // vec3 h = normalize(v + l);\n    //vec3 lightDir = normalize(plight_pos);\n    //vec3 viewDir = normalize(-rd);  //normalize(-rayDir);\n    //vec3 halfV = normalize(viewDir + lightDir); //normalize(viewDir + lightDir);\n  \n    float diff =clamp( dot(normal, l), 0.0, 1.0);;\n    vec3 vl = normalize( plight_pos - p );\n    vec3 ref_v = reflect( v, normal );\n    float diffuse  = max( 0.0, dot( vl, normal ) );\n    float specular = max( 0.0, dot( vl, ref_v ) );\n\tspecular = pow( specular, shininess );\n   \t\n    float fre = pow(clamp(1.0 + dot(rd, normal), 0.0, 1.0), 3.0);\n    final += color * ( diffuse + specular+fre*0.5);\n    //final = 0.9 * final + 0.1;\n    \n    return  final;\n    \n    \n}   \n\n\n//------------------------------------------------\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n        \n        if(dO>MAX_DIST || abs(dS.x)<MIN_DIST) break;\n        dO += dS.x;\n        marchCount++;\n            \n    }\n    \n    mObj.dist = dO;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n\n//---------------------------------------------------\nfloat GetShadow(vec3 p, vec3 plig)\n{\n    vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n//----------------------------------------------------\n//-------------------------------\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{\n    float intensity=1.0;\n     vec3 result;\n\t result = LightShadingV2(nor,p, ro, rd, plight_pos, colobj)*intensity;\n    \n    if (mObj.blnShadow==true)\n    {\n    \tfloat fhadow=GetShadow(p,plight_pos);\n    \treturn result*fhadow;\n        \n     }\n    else\n    {  return result; }\n}\n///-------------------------------------\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj; \n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n   \n    return colobj;\n}\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    float t;\n    t=mod(iTime*1.0,360.0);\n    itime=t;\n\t//mObj.blnShadow=false;\n    mObj.blnShadow=true;\n        \n \tlight_pos1= vec3(15.0, 10.0, -15.0 );  light_color1 = vec3( 1.0 );\n \tlight_pos2= vec3( -15.0, 16.0, 15.0 ); light_color2 = vec3( 1.0, 1.0, 1.0 );\n \n \n    \n    vec3 ro=vec3(0.0,15.0,-10.0);\n    \n    //ro= getMouse(ro);       \n    vec3 rd=normalize(vec3(uv,1.0));\n    \n    \n    light_pos1+=ro;\n    light_pos2+=ro;\n    \n    \n    vec3 col = vec3(0);\n    TObj Obj;\n    mObj.rd=rd;\n    mObj.ro=ro;\n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor=mObj.normal;\n\n    vec3 colobj;\n    colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n    \n    \n\tfloat dif1=1.0;\n   \tvec3 result;\n    result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n    result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n    result/=1.25;\n    col= result*dif1;\n    \n    //sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d /(MAX_DIST) , 3.5);    \n    col = pow(col, vec3(1.0/2.2));  \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n    bool blnShadow; \n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n\nfloat saturate(float f)\n{ return clamp(f,0.0,1.0);}\n\n\n///--------------------------------------------FIN\n\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(0.5843,0.33,0.0)    ///cafe\n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{    \n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//---por jorgeflores ----jorge2017a1\n\n//referencia\n//https://www.shadertoy.com/view/wsScWV ......Creado por NonGrate en 2020-04-19\n\n///Referencia  la grande comunidad de usuarios de  Shadertoy... :)\n//Reference the large community of Shadertoy users ... :)\n\n//#define PI 3.14159265358979323846\n#define TAU PI*2.\n\n\n#define C  32.703\n#define CS 34.648\n#define D  36.708\n#define DS 38.891\n#define E  41.203\n#define F  43.654\n#define FS 46.249\n#define G  48.999\n#define GS 51.913\n#define A  55.0\n#define AS 58.270\n#define B  61.735\n\n\n// Durations\nconst float pulg=2.0;\n    \n\nconst float WHOLE_NOTE = 1.0*pulg;\nconst float HALF_NOTE = 1.0/2.0*pulg;\nconst float _2_NOTE = 1.0/2.0*pulg;\nconst float _4_NOTE = 1.0/4.0*pulg;\nconst float _8_NOTE = 1.0/8.0*pulg;\nconst float _16_NOTE = 1.0/16.0*pulg;\nconst float _32_NOTE = 1.0/32.0*pulg;\nconst float DOUBLE_NOTE = 2.0*pulg;\n\nconst float OCT00 = 0.0/8.0*pulg;\nconst float OCT01 = 1.0/8.0*pulg;\nconst float OCT02 = 2.0/8.0*pulg;\nconst float OCT03 = 3.0/8.0*pulg;\nconst float OCT04 = 4.0/8.0*pulg; //1/2\nconst float OCT05 = 5.0/8.0*pulg;\nconst float OCT06 = 6.0/8.0*pulg;\nconst float OCT07 = 7.0/8.0*pulg;\nconst float OCT08 = 8.0/8.0*pulg;\nconst float OCT09 = 9.0/8.0*pulg;\nconst float OCT0908 = 9.0/8.0*pulg;\n\nconst float SEG_1 = 1.0*pulg;\nconst float SEG_2 = 2.0*pulg;\nconst float SEG_1D2 =1.0/ 2.0*pulg;\nconst float SEG_1D8 =1.0/ 8.0*pulg;\nconst float SEG_1D16 =1.0/ 16.0*pulg;\nconst float SEG_3D16 =3.0/ 16.0*pulg;\nconst float SEG_3D4 =3.0/ 4.0*pulg;\nconst float SEG_1D4 =1.0/ 4.0*pulg;\n\n\n\n\nstruct TNote {\n    // in Hz, see \"common\" tab\n    float note;\n    float octave;\n    float offset; // offset - time in seconds when to start playing note\n    float duration;  // duration of a note (1/4, 1/8, ...), see \"common\" tab\n};\n\n\n\n\nfloat n2f(float n)\n{\n    return 440.0*pow(2.0,(n-69.0)/12.0);\n}\n\n\nfloat n2m(float n)\n{\n    return pow(2.0,n/12.0);\n}\n\n\n\nfloat noise( float x ){return fract(sin(1371.1*x)*43758.5453);}\n//Basic waveforms with note and octave input\nfloat sn(float t, float note, float octave)\n{\n\treturn sin(t*note*exp2(octave)*PI);\n}\n\nfloat saw(float t, float note, float octave)\n{\n\treturn fract(t*note*exp2(octave-1.))-0.5;\n}\n\nfloat tri(float t, float note, float octave)\n{\n\treturn (abs(fract(t*note*exp2(octave-1.))-0.5)*2.-0.5)*2.;\n}\n\nfloat sqr(float t, float note, float octave)\n{\n\treturn step(fract(t*note*exp2(octave-1.)), 0.5)-0.5;\n}\n///-----------------------------------\n\nconst float t2 =6.5;\n\nconst TNote[] notes = TNote[] \n    (\n    //9/8*0.0\n    TNote(C, 4.0,OCT0908*0.0+ OCT07, _8_NOTE), \n    ///------------\n    //9/8*1.0\n    TNote(F, 2.0,OCT0908*1.0+ OCT01, SEG_1), \n    TNote(A, 2.0,OCT0908*1.0+ OCT01, SEG_1), \n    TNote(C, 2.0,OCT0908*1.0+ OCT01, SEG_1),\n        \n    TNote(A, 3.0,OCT0908*1.0+ OCT01, _2_NOTE),\n        \n    TNote(A, 3.0,OCT0908*1.0+ SEG_1D2+OCT01, _8_NOTE),\n        \n    TNote(C, 4.0,OCT0908*1.0+ SEG_1D2+OCT01*2.0, SEG_3D16),\n    TNote(D, 4.0,OCT0908*1.0+ SEG_1D2+OCT01*2.0+SEG_3D16, _8_NOTE),\n     //------------\n    //9/8*2.0   \n    TNote(E, 2.0,OCT0908*2.0+ OCT01, SEG_1), \n    TNote(G, 2.0,OCT0908*2.0+ OCT01, SEG_1),\n    TNote(C, 3.0,OCT0908*2.0+ OCT01, SEG_1), \n    \n    TNote(G, 3.0,OCT0908*2.0+ OCT01, SEG_3D4),\n        \n    TNote(G, 3.0,OCT0908*2.0+ OCT01*7.0, SEG_1D8),\n    TNote(A, 3.0,OCT0908*2.0+ OCT01*8.0, SEG_1D8),\n    \n    //------------\n    //9/8*3.0 \n       \n    //TNote(E, 2.0,OCT0908*3.0+ OCT01, SEG_1), \n    //TNote(G, 2.0,OCT0908*3.0+ OCT01, SEG_1),\n    //TNote(C, 3.0,OCT0908*3.0+ OCT01, SEG_1), \n       \n    TNote(AS, 3.0,OCT0908*3.0+ OCT01, SEG_1D4), \n        \n    TNote(F, 4.0,OCT0908*3.0+ OCT01+SEG_1D4, SEG_1D4), \n    \n    TNote(F, 4.0,OCT0908*3.0+ OCT01+SEG_1D4*2.0+SEG_1D8, SEG_3D16), \n    TNote(E, 4.0,OCT0908*3.0+ OCT01+SEG_1D4*2.0+SEG_1D8+SEG_3D16, SEG_1D8), \n    TNote(C, 4.0,OCT0908*3.0+ OCT01+SEG_1D4*2.0+SEG_1D8+SEG_3D16+SEG_1D8, SEG_1D8),\n     ///---------------------   \n    //9/8*4.0 \n    \n    TNote(F, 2.0,OCT0908*4.0+ OCT01, SEG_1), \n    TNote(A, 2.0,OCT0908*4.0+ OCT01, SEG_1), \n    TNote(C, 3.0,OCT0908*4.0+ OCT01, SEG_1),\n        \n    TNote(D, 4.0,OCT0908*4.0+ OCT01, SEG_1D8),\n    TNote(C, 4.0,OCT0908*4.0+ OCT01+SEG_1D8, SEG_1D16),\n    TNote(AS, 3.0,OCT0908*4.0+ OCT01+SEG_1D8+SEG_1D16, SEG_1D16),\n        \n    TNote(A, 3.0,OCT0908*4.0+ OCT01+SEG_1D8+SEG_1D16*2.0, SEG_1D2),\n        \n    TNote(C, 3.0,OCT0908*4.0+ OCT09-SEG_3D16, SEG_3D16),\n      ///---------------------   \n    //9/8*5.0    \n        \n    TNote(F, 2.0,OCT0908*5.0+ OCT01, SEG_1), \n    TNote(AS,2.0,OCT0908*5.0+ OCT01,SEG_1), \n    TNote(D, 3.0,OCT0908*5.0+ OCT01, SEG_1), \n        \n    TNote(D, 4.0,OCT0908*5.0+ OCT01, SEG_1D8), \n    TNote(D, 4.0,OCT0908*5.0+ OCT01+SEG_1D16, SEG_3D16), \n    \n    TNote(D, 4.0,OCT0908*5.0+ OCT01*4.0, SEG_3D16), \n    TNote(G, 4.0,OCT0908*5.0+ OCT01*5.0, SEG_1D8), \n    TNote(F, 4.0,OCT0908*5.0+ OCT01*6.0, SEG_3D16), \n    TNote(E, 4.0,OCT0908*5.0+ OCT01*7.0, SEG_3D16), \n    TNote(F, 4.0,OCT0908*5.0+ OCT01*7.5, SEG_1D16), \n    TNote(D, 4.0,OCT0908*5.0+ OCT01*8.0, SEG_3D16),\n        \n    //9/8*6.0\n    TNote(F, 2.0,OCT0908*6.0+ OCT01, SEG_1), \n    TNote(A, 2.0,OCT0908*6.0+ OCT01, SEG_1), \n    TNote(C, 3.0,OCT0908*6.0+ OCT01, SEG_1),\n    \n    TNote(C, 4.0,OCT0908*6.0+ OCT01*1.0, SEG_1D4),\n    TNote(F, 3.0,OCT0908*6.0+ OCT01*5.0, SEG_3D16),\n    TNote(G, 3.0,OCT0908*6.0+ OCT01*6.0+SEG_1D16, SEG_3D16),\n    TNote(A, 3.0,OCT0908*6.0+ OCT01*7.0+SEG_1D16, SEG_3D16),    \n    TNote(D, 4.0,OCT0908*6.0+ OCT01*8.0+SEG_1D16, SEG_3D16),\n   \n    //9/8*7.0\n    TNote(E, 2.0,OCT0908*7.0+ OCT01, SEG_1), \n    TNote(G, 2.0,OCT0908*7.0+ OCT01, SEG_1), \n    TNote(C, 3.0,OCT0908*7.0+ OCT01, SEG_1),\n        \n    TNote(C, 4.0,OCT0908*7.0+ OCT01, SEG_1D4),\n    \n    TNote(C, 4.0, OCT0908*7.0+ OCT01*4.0, SEG_3D16),\n    TNote(AS, 3.0,OCT0908*7.0+ OCT01*5.0, SEG_3D16),\n    TNote(A, 3.0, OCT0908*7.0+ OCT01*6.0, SEG_1D4),\n        \n    TNote(E, 3.0,OCT0908*7.0+ OCT01*9.0, SEG_3D16),\n        \n    //9/8*8.0\n    TNote(F, 2.0,OCT0908*8.0+ OCT01, SEG_1), \n    TNote(A, 2.0,OCT0908*8.0+ OCT01, SEG_1), \n    TNote(C, 3.0,OCT0908*8.0+ OCT01, SEG_1),\n        \n    TNote(F, 3.0,OCT0908*8.0+ OCT01, SEG_1D2)\n        \n        \n     \n);\n\n\nvec2 noteFreq(TNote note, float time) {\n    \n    // 6.2831 = 2pi\n    // exp() goes exponentially down to fade out the volume\n    //return vec2(sin(6.2831 * note.frequency * time) * exp(-1.0/note.duration * (time - note.offset)));\n    float n1=saw(time,note.note, note.octave)* exp(-1.0/note.duration * (time - note.offset));  ///ORIGINAL\n    float n2=saw(time,note.note, note.octave+1.0)* exp(-1.0/note.duration * (time - note.offset)); \n    float n3=saw(time,note.note, note.octave+2.0)* exp(-1.0/note.duration * (time - note.offset)); \n    return vec2((n1+n2+n3)/2.0);\n    \n}\n\n\nvec2 mainSound( in int samp,float time) \n{\n    vec2 result;\n    \n    // time counts in seconds\n    // (time - x) is required, because we want to \"reset\" exp() function\n    // otherwise the output of exp() function will go down globally\n    // and we'll hear only first note\n\n    float ftime= mod(time, 16.5);\n    for (int i = 0; i < notes.length(); i++) {\n        TNote note = notes[i];\n        float x = float(i) * 1.0;\n        if (ftime > note.offset) \n        {\n            result += noteFreq(note, ftime);\n            \n        }\n    }\n\n\treturn result*0.35;\n    //return result;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}