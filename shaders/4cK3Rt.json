{
    "Shader": {
        "info": {
            "date": "1713283608",
            "description": "Shader modify the color of material.",
            "flags": 0,
            "hasliked": 0,
            "id": "4cK3Rt",
            "likes": 1,
            "name": "ColorShader_0005",
            "published": 3,
            "tags": [
                "color",
                "shader",
                "colorshader"
            ],
            "usePreview": 0,
            "username": "reitermoises",
            "viewed": 91
        },
        "renderpass": [
            {
                "code": "//NOTA: EL ORDEN VERTICAL ES SUPER IMPORTANTE\n\n//paleta de colores: cosine based palette, 4 vec3 params\nvec3 palette( float t ) {\n    vec3 a = vec3(0.369,0.369,0.369);\n    vec3 b = vec3(0.000,0.761,0.051);\n    vec3 c = vec3(0.000,0.298,1.000);\n    vec3 d = vec3(1.000,1.000,1.000);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n//(fragColor: coordenadas ya pintadas, fragCoord: coordenadas a pintar)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //convertimos el valos normalizado de las coordenadas de pantalla -1 a 1\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y; \n    \n    //vector que rastre pixel por pixel\n    vec2 uv0 = uv;\n    \n    //color final\n    vec3 finalColor = vec3(0.0);\n    \n    //agregamos iteraciones\n    for(float i = 0.0; i < 6.0; i++){\n    \n        //agregamos repeticion espacial (division de pantalla) y ajsutamos las coordenadas\n        uv = fract(uv * 3.5) - 0.5;\n\n        //creamos una variable para ver la longitud del uv\n        float d = length(uv) * -exp(-length(uv0));     \n\n        //agregamos una variable de color\n        vec3 col = palette(length(uv0) + i * 0.4 + iTime * .1);    \n\n        //al agregar sin y un tiempo podemos crear una animacion de repetecion\n        d = sin(d*8. + iTime)/8.;\n\n        //obtenemos el valor absoluto de d\n        d = abs(d);\n\n        d = pow(0.012 / d, 1.2) * i;\n\n        //agregamos el color a la longitud\n        finalColor += col * d;   \n    }\n\n    //salida a la pantalla\n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}