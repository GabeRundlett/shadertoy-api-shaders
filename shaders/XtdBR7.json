{
    "Shader": {
        "info": {
            "date": "1539070506",
            "description": "Testing a dumb idea of how to get deeper zooms of mandelbrot set without double precision. Drag the mouse to switch between the \"perturbative\" and normal formula.\n\nSurprisingly, it sort of works, but only if the center of the screen is black.",
            "flags": 0,
            "hasliked": 0,
            "id": "XtdBR7",
            "likes": 8,
            "name": "Perturbative mandelbrot",
            "published": 3,
            "tags": [
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "al13n",
            "viewed": 713
        },
        "renderpass": [
            {
                "code": "const int its = 4000;\n\nvec2 csqr(vec2 a) {\n \treturn vec2(a.x*a.x-a.y*a.y, 2.*a.x*a.y);\n}\n\nvec2 cmul(vec2 a, vec2 b) {\n    return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\n\nfloat mandel_normal(vec2 c) {\n    vec2 z = vec2(0., 0.);\n    for (int i = 0; i < its; ++i) {\n        if (dot(z, z) > 10.) {\n         \treturn float(i)/float(its);\n        }\n        z = csqr(z) + c;\n    }\n    return 0.;\n}\n\n// C = a + c, where c should be much smaller than a (e.g. a is center of screen, and we're zoomed in far).\n// Z = z0 + c*z1  (higher powers of c are not discarded and go into z1).\n// I also tried Z = z0 + c*z1 + c^2*z2, but it made no noticeable difference in all cases I tried.\n// This seems to somewhat work when a is inside the mandelbrot set\n// (i.e. center point of the screen is black).\nfloat mandel_perturbative(vec2 a, vec2 c) {\n    vec2 z0 = vec2(0., 0.);\n    vec2 z1 = vec2(0., 0.);\n    for (int i = 0; i < its; ++i) {\n\t    vec2 t = z0 + cmul(z1, c);\n        if (dot(t, t) > 10.) {\n            return float(i)/float(its);\n        }\n        z1 = cmul(z0, z1)*2. + vec2(1., 0.) + cmul(c, csqr(z1));\n        z0 = csqr(z0) + a;\n    }\n    return 0.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 c0 = (fragCoord/iResolution.xy - .5) * 2. * vec2(iResolution.x/iResolution.y, 1.);\n\n    vec2 a = vec2(-1.1900435, .3043896);\n    vec2 c = c0 * .000002;\n\n    float split;\n    if(iMouse.z <= 0.) {\n        split = (sin(iTime * 2.) + 1.)*.3*iResolution.x;\n    } else {\n        split = iMouse.x;\n    }\n    \n    float r;\n    if (fragCoord.x < split) {\n        r = mandel_perturbative(a, c);\n    } else {\n        r = mandel_normal(a + c);\n    }\n    \n    // Draw a frame and a dot in the center.\n    vec2 ap = abs(fragCoord/iResolution.xy-.5);\n    const float fs = .2;\n    vec2 ft = abs(ap - fs);\n    float frame = 0.;//float(min(ft.x, ft.y) < .002 && max(ap.x,ap.y) < fs);\n    float mid = float(length(c0) < .01);\n    \n    fragColor = vec4(r,r + frame + mid,r,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}