{
    "Shader": {
        "info": {
            "date": "1492899420",
            "description": "mouse moves stuff\nimagine the texture is a planets world map (hammer projection for globes) and clicking it moves your view on it \nbased om\nhttps://www.shadertoy.com/view/ldSXRm\nhttp://en.wikipedia.org/wiki/Hammer_projection",
            "flags": 32,
            "hasliked": 0,
            "id": "ldjyRK",
            "likes": 4,
            "name": "Hammer projection",
            "published": 3,
            "tags": [
                "hammer",
                "mercator",
                "cartesian",
                "isinside"
            ],
            "usePreview": 1,
            "username": "ollj",
            "viewed": 1169
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 c,vec2 p\n){\n ;p/=iR.xy\n ;//p=(p-iResolution.xy/2.)*2.\n ;//p=tHammerI(p)\n \n ;c=texture(iChannel0,p)\n ;}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//https://www.shadertoy.com/view/ldSXRm\n//made simpler\n//minus video\n\n\n//considder iChannel1 is a world map where [positionA.xy]/resolution\n//is on the opposite side on the globe of [fract(positionA.xy+vec2(.5,.5))]/resolution\n//this shader renders that globe in Hammer Projection.\n//https://en.wikipedia.org/wiki/Hammer_projection\n\n//my plan is to make a collection of projections that work nicely with large fov.\n\n//most of the common  projections are sphereTo2d map projections, \n//due to navigating globes. To utilize those projections, \n//for first person perspectives with 360° field of fiew,\n//we map fragmentPos.xy to a latitudeLongitudePair, using scale() [(or the inverse scale1())\n//and feed that pair (with an offset) to the (inverse of) the sphereTo2d projection \n//and then map a chekerboard on it to visualize the used projection.\n//\n//offset can be set by left mouse button.\n\n//todo, make transformation insistinguishable from inverse by enforcing a type\n//for latitudelongitudePair\nstruct geog{vec2 g;}Mgeog;//.x=longitude | .y=latitude (because latitude sets \"north|south\")\n\n\n\n\n\n\n//scale: (-0.5.-0.5) x (0.5..0.5) -> (l[0]..l[1]) x (l[2]..l[3])\nvec2 scale(vec2 p, vec4 l){\n return (p+vec2(.5))*vec2(l[1]-l[0],l[3]-l[2])+vec2(l[0],l[2]);}\n//scale.inverse p=scale1(scale_forward(p));\nvec2 scale1(vec2 p, vec4 l){\n return (p-vec2(l[0],l[2]))/vec2(l[1]-l[0], l[3]-l[2])-vec2(.5);}\n\nfloat CheckerFloor(vec2 p){p=floor(p*2.);\n return mod(p.x+p.y,2.);}\n//float grid=\n\nvec2 r90(vec2 a){return vec2(a.y,-a.x);}\n\nfloat ma(vec2 a){return max(a.x,a.y);}\nfloat ma(vec4 a){return max(ma(a.xy),ma(a.zw));}\n#define mi(a) (-(ma(-(a))))\n\n//l.xy=bottomLeft.xy \n//l.xz=topRight.xy\n//if([u] is inside/outside of rectangle[l])return [1.] ; return [0.]\nfloat isOutside(vec2 u,vec4 l\n){return floor(ma((l-u.xxyy)*vec4(1,-1,1,-1))+1.);}\n\nfloat isInside(vec2 u,vec4 l\n){return floor(mi((l-u.xxyy)*vec4(-1,1,-1,1))+1.);}\n\nvec3 sliced(inout vec2 P2\n){//Test if we are within limits but we do not discard yet because we want\n //to draw border. Discarding would mean half of the exterior not drawn.\n //below code is just deminstrating inverse function usage, by \n //... \"cutting window out of a globe\" within the used projection\n //the window position|size changes over time:\n //dynamic t are more confusing than useful.\n //dynamic t would map parts of a globe in a projection, not too common.\n //for simplicity all [t] is made static here:  \n ;vec2 t=vec2((1.+cos(vec2(1,.5)*iTime)))*.5\n ;//t=vec2(0) //overwrite (no cutout)\n ;//[l] cuts out a region from lat_lon till lat_lon \n ;//that then is just not part of the our projection (to skip fragments)\n ;vec4 l=vec4(-1,1.-t.x,t.x/4.-.5,.5-t.y/4.)*pi*fov \n ;l=vec4(-2,1,-1,1)\n ;//project texture and grid:\n ;vec2 r=scale1(P2,l)//scale P2 by cutut segment\n ;float mask=isInside(P2,l)\n ;//r=r90(r)//optional rotation within the slice\n ;return vec3(r,mask);}\n\nvec3 basic(inout vec2 P2\n){vec4 l=vec4(-2,2,-1,1)*pi2*fov\n ;vec2 r=scale1(P2,l)\n ;//r=r90(r)//optional rotation within the slice\n ;return vec3(r,isInside(P2,l));}\n\nvoid mainImage( out vec4 Out, in vec2 fragCoord\n){Out=vec4(0.)//linux likes this\n ;vec2 u=fragCoord.xy/iResolution.xy-.5\n ;u*=sqrt(2.)\n ;u*=fov\n ;vec2 P2=tHammerI(scale(u,vec4(-2,2,-1,1)))\n ;//a dynamic [t] is residue from https://www.shadertoy.com/view/ldSXRm\n ;vec3 s=sliced(P2) //sliced square on hammer\n ;//vec3 s=basic(P2)    //full hammer\n ;s.xy*=fov\n ;s.x-=iMouse.x/iResolution.x\n ;s.y-=iMouse.y/iResolution.y\n ;if(s.z>0.\n ){Out=texture(iChannel0,s.xy+.5);//prject iChannel0\n  ;Out+=.5*vec4(mix(vec3(1,0,0),vec3(0,0,1)\n               ,CheckerFloor(s.xy*pi))+vec3(0,1,1)*CheckerFloor(s.xy*32.),1.);//project grid\n }else{//latitudeLongitudePair is outside of what we want to map\n  ;Out=vec4(0.);\n }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define iR iResolution\n\n//field of view range [0..1] <-> [0..360]°\n#define fov 1.\n\nconst float tau=acos(-1.)*2.// 1/1 rotation in radians\n,pi=acos(-1.)               // 1/2 rotation in radians\n,pi2=acos(0.)               // 1/4 rotation in radians\n//,pi4=acos(0.)*.5            // 1/8 rotation in radians\n;\n\n\nconst float s2=sqrt(2.);\nvec2 scm(float a){return sin(vec2(a,a+pi2));}//NOT a rotation, but a reflection at a halfRotated axis.\nvec2 sc(float a){return scm(a);//lazy override\n return vec2(sin(a),cos(a));//actual reflection\n ;}\n\n//Hammer.transform:\nvec2 tHammer(vec2 p){\n vec2 s=sc(p.y),o=sc(p.y*.5);\n return s2*vec2(2.*s.y*o.x,s.x)/sqrt(1.+s.y*o.y);}\n//Hammer.transform.Inverse\nvec2 tHammerI(vec2 p){float z=1.-(p.x*p.x/16.)-(p.y*p.y/4.);\n if(z<0.)discard;float s=sqrt(z);\n return vec2(2.*atan((s*p.x),(2.*(2.*z-1.))),asin(s*p.y));}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}