{
    "Shader": {
        "info": {
            "date": "1482304303",
            "description": "A really simple and fake way to draw infinite sprites. Best viewed in full screen.",
            "flags": 0,
            "hasliked": 0,
            "id": "ltdXDs",
            "likes": 2,
            "name": "Endless Cats (cheap)",
            "published": 3,
            "tags": [
                "2d",
                "fake",
                "sprite",
                "discard",
                "hallofmirrors"
            ],
            "usePreview": 0,
            "username": "TimoKinnunen",
            "viewed": 1127
        },
        "renderpass": [
            {
                "code": "// Endless Cats (cheap)\n//\n// Fakes an endless numbers of sprites by not clearing \n// the backbuffer between frames.\n//\n// Based on Fast Solid 2D Outline by Squiggle @\n// https://www.shadertoy.com/view/XdV3Dc\n//\n// Inspired by Unlimited Bobs by Flyguy @\n// https://www.shadertoy.com/view/XtcXDl\n\n\n#define SAMPLES 4\n#define WIDTH 1.25\n#define NUM_FRAMES 6.0\n#define CAT_SCALE 0.25\n\n#define TAU radians(360.)\n\n// by iq\nvec3 palette(float t,vec3 a,vec3 b,vec3 c,vec3 d){return a+b*cos(TAU*(c*t+d));}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    float iTime = float(iFrame)/30.0;\n    if(iTime==0.0){fragColor=vec4(0,0,0,1); return;}\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    p.x += iTime;\n    vec3 color = palette(p.x,vec3(.5),vec3(.5),vec3(1),vec3(0,1./3.,2./3.));\n    vec2 v_texCoord = fragCoord.xy / iResolution.xy;\n    \n    vec2 u_textureRes = iChannelResolution[0].xy - vec2(15.0,0.0);\n    float frame = floor(mod(iTime*10.0, NUM_FRAMES));\n    float frameWidth = u_textureRes.x / NUM_FRAMES;\n    \n    float catUVWidth = u_textureRes.x / iChannelResolution[0].x;\n    vec4 u_textureBoundsUV = vec4(catUVWidth/NUM_FRAMES * frame, 0.0, catUVWidth/6.0 * (frame+1.0), 1.0);\n    \n    vec2 catScale = vec2(CAT_SCALE)*1920.0/iResolution.x;\n    vec2 range = (iResolution.xy*catScale-vec2(frameWidth,u_textureRes.y))*.5;\n    vec2 catPos = vec2(0.0-(frameWidth-2.5)*frame,0.0) + \n        vec2(sin(iTime*1.1)+1.0,sin(iTime*1.2)+1.0)*range;\n    vec2 catUV = clamp((fragCoord*catScale-catPos) / u_textureRes, u_textureBoundsUV.xy, u_textureBoundsUV.zw );\n    \n    //OUTLINE\n    float outlineAlpha = 0.0;\n\tfor( int i=0; i<SAMPLES; i++ ){\n\t\tfloat angle = (float(i)+0.5)*(TAU/float(SAMPLES));\n\n\t\tvec2 testPoint = vec2( (WIDTH/u_textureRes.x)*cos(angle), (WIDTH/u_textureRes.y)*sin(angle) );\n\t\ttestPoint = clamp( catUV + testPoint, u_textureBoundsUV.xy, u_textureBoundsUV.zw );\n\t\tfloat sampledAlpha = texture( iChannel0,  testPoint ).a;\n\t\toutlineAlpha = max( outlineAlpha, sampledAlpha );\n\t}\n    vec4 catColor = vec4(color*outlineAlpha,outlineAlpha);\n\n\t//TEXTURE\n\tvec4 tex0 = texture(iChannel0, catUV);\n\tcatColor = mix(catColor, tex0, tex0.a);\n    if(catColor.a<0.5) { discard; } else { fragColor = catColor; }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}