{
    "Shader": {
        "info": {
            "date": "1727279343",
            "description": "Quadratic bezier curve, circle, line segment, resolution-independent thickness\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "M3SyDW",
            "likes": 0,
            "name": "Lines & curves",
            "published": 3,
            "tags": [
                "circles",
                "lines",
                "curves"
            ],
            "usePreview": 0,
            "username": "Mipmap",
            "viewed": 42
        },
        "renderpass": [
            {
                "code": "//\n// Reference:\n//\n// demofox 2D Quadratic Bezier             https://www.shadertoy.com/view/MtS3Dy\n// demofox 2D Quadratic BezierII           https://www.shadertoy.com/view/4tj3Dy\n// m1el    Exact Bezier SDF                https://www.shadertoy.com/view/Mlj3zD\n// bloxard Bezier DistanceGlow             https://www.shadertoy.com/view/XdB3Ww\n// iq      Quadratic Bezier - distance 2D  https://www.shadertoy.com/view/MlKcDD\n// mla     Normals to Sine Curve           https://www.shadertoy.com/view/css3R8\n// iq      Segment - distance 2D           https://www.shadertoy.com/view/3tdSDj\n// iq      2D SDF Primitives               https://www.shadertoy.com/playlist/MXdSRf\n\nfloat dot2(in vec2 v) { return dot(v,v); }\n\nfloat sdBezier(vec2 pos, vec2 A, vec2 B, vec2 C)\n{\n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n\n    float kk = 1.0 / dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n\n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n\n    if(h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h, -h) - q) / 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp(uv.x+uv.y-kx, 0.0, 1.0);\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3 t = clamp(vec3(m+m, -n-m, n-m) * z - kx, 0.0, 1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n    }\n    \n    return sqrt(res);\n}\n\nfloat sdCircle(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdLineSegment(vec2 p, vec2 a, vec2 b)\n{\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - h * ba);\n}\n\n// Plots a function of x based on three consecutive values.\n// This is basically (y-f(x))/|(f'(x),1)|, using an approximate derivative.\nfloat graphdist(float y,float eps, float f0, float f1, float f2){\n  return abs(y-f1)/length(vec2((f2-f0)/(2.0*eps),1.0));\n}\n\n\n// Alternative to smoothstep or step()\nfloat sharpTransition(float d, float thickness) {\n    float t = clamp(1.0 - d / thickness, 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize coordinates to [-1, 1] range with corrected aspect ratio\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    float pixelSize = 1.0 / min(iResolution.x, iResolution.y);\n    vec3 col = vec3(0.0,0.0,0.0);\n    float thickness = 0.003 / iResolution.y * 576.;\n    \n    // Draw bezier pixel\n    vec2 A = vec2(-1.5, -0.6);\n    vec2 B = vec2(-0.2, 1.8);\n    vec2 C = vec2(1.4, -0.6);\n    float dBezier = sdBezier(uv, A, B, C);\n    //float curve = smoothstep(thicknessBezier, 0.0, dBezier);\n    //float curve = step(dBezier,thicknessBezier);\n    //float curve = sharpTransition(dBezier, thicknessBezier);\n    float curve = step(floor(dBezier / pixelSize) * pixelSize, thickness);\n    col += vec3(0.0, 1.0, 0.0) * vec3(curve);\n\n    // Draw circle pixel\n    vec2 circleCenter = vec2(0.3, 0.3);\n    float circleRadius = 0.2;   \n    float dCircle = sdCircle(uv - circleCenter, circleRadius);\n    //float circle = smoothstep(thicknessCircle, 0.0, abs(dCircle));\n    //float circle = step(dCircle, thicknessCircle);\n    //float circle = sharpTransition(abs(dCircle), thicknessCircle);\n    float circle = step(floor(abs(dCircle) / pixelSize) * pixelSize, thickness);\n    col += vec3(1.0, 0.0, 0.0) * circle ;\n\n    // Draw line segment pixel\n    vec2 lineStart = vec2(0.9, -0.9);\n    vec2 lineEnd = vec2(-0.9, 0.9);\n    float dLine = sdLineSegment(uv, lineStart, lineEnd);\n    float line = step(dLine, thickness);\n    col += vec3(0.0, 0.0, 1.0) * line;\n\n    // Draw sine curve pixel\n    float eps = 1.0/32.0;\n    float px = fwidth(uv.x);\n    vec2 sinpt = vec2(uv.x * 10.0 - 1.0, uv.y * 10.0 + 1.0);\n    float dSine = graphdist(sinpt.y,eps,sin(sinpt.x-eps),sin(sinpt.x),sin(sinpt.x+eps));\n    float curve2 = step(dSine, thickness*10.0);\n    col += vec3(1.0, 1.0, 0.0) * curve2;\n  \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}