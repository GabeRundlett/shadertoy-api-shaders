{
    "Shader": {
        "info": {
            "date": "1718627269",
            "description": "mesh",
            "flags": 0,
            "hasliked": 0,
            "id": "4XtXRH",
            "likes": 1,
            "name": "bits on the mesh",
            "published": 3,
            "tags": [
                "fractal",
                "mesh",
                "bits"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 64
        },
        "renderpass": [
            {
                "code": "\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n#define time iTime\n#define resolution iResolution.xy\nvec2 cmul(vec2 a, vec2 b) {\n\n \nreturn vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\nvec3 hsv(float h, float s, float v) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(vec3(h) + K.xyy) * 6.0 - K.www);\n     vec2 uv = iResolution.xy;\n\nfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(p.xy) + .07)) * 2.2;\nfloat si = sin(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\n    p.xz*=ma;\nreturn v * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), s);\n}\nfloat layer(vec2 uv) {\nvec2 iv = floor(uv);\nvec2 gv = fract(uv) - .5;\nfloat image = .01 / abs(gv.y);\nimage += .01 / abs(gv.x);\nreturn image;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n vec2 uv = fragCoord/iResolution.xy-0.5;\n\nfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\nfloat si = sin(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\n\nvec2 p = 0.0005 * uv.yx - vec2(-0.2991, 0.4903);\nfloat image = 0.;\nimage += layer(uv*ma * 10. + time / 10.) * .1;\nimage += layer(uv * 5. - time) * .2;\nimage += layer(uv*ma * 5. +time) * .2;\n\n\nvec2 z = p;\nvec2 c = vec2(0.45, -0.197);\n   \nvec2 dz = vec2(1.0, 0.0);\nfloat it = 0.0;\nfor(float i = 0.0; i<100.0; i+=1.0) {\n\ndz = 2.0 * cmul(z, dz *mat2(cos(iTime*0.21),sin(iTime*0.21),-sin(iTime*0.21),cos(iTime*0.21)))+ vec2(10.0, 0.2)*mat2(cos(iTime*1.21),sin(iTime*1.21),-sin(iTime*1.21),cos(iTime*1.21));\nz = cmul(z, z) + c;\n\nfloat a = sin(time * 1.5 + i * 20.0) * 0.1 + i * 11.3;\nvec2 t = mat2(cos(a), sin(a), -sin(a), cos(a)) * z;\nif(abs(t.x) > 4.0 || abs(t.x) > 2.0) { it = i*image; break; }\n}\n\nif (it == 10.0) {\nfragColor = vec4(vec3(1.0), 1.0);\n} else {\n    z*=ma;\nfloat z2 = z.x * z.x;\nfloat dist = (z2) * sqrt(z2) / length(dz*mat2(cos(iTime*1.21),sin(iTime*01.21),-sin(iTime*1.21),cos(iTime*1.21)));\nfloat r = sqrt(z2) / 100.;\n\nfloat pixelsize = fwidth(p.y);\nfloat diagonal = length(resolution);\nfloat glowsize = pixelsize * diagonal / 40.0;\nfloat shadowsize = pixelsize * diagonal / 80.0;\n\nfloat fadeout = 0.0, glow = 0.0;\nif(dist < pixelsize) {\nfadeout = dist / pixelsize;\nglow = 1.0;\n  } else {\nfadeout = min(shadowsize / (dist + shadowsize - pixelsize) + 1.0 / (r + 1.0), 1.0);\nglow = min(glowsize / (dist + glowsize - pixelsize), 1.0);\n}\n\nfragColor = vec4(hsv(\nit / 32.0 + 0.4,\n1.0 - glow,\nfadeout\n), 1.0);\n}\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}