{
    "Shader": {
        "info": {
            "date": "1573086612",
            "description": "A slope field generator for differential equations of dY / dt. Use mouse to select sample point. The code is defiantly over complicated. I think I need to discover other methods of basics. ",
            "flags": 0,
            "hasliked": 0,
            "id": "3ddXDX",
            "likes": 18,
            "name": "Slope Field Generator",
            "published": 3,
            "tags": [
                "2d",
                "mouse",
                "graph",
                "function",
                "equation",
                "differential"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 1535
        },
        "renderpass": [
            {
                "code": "// Cole Peterson //\n\n// Use the mouse to select sample point\n\n// Generates a slope field and approximated solution curve.\n\n// Enter your own equation in dYdt() using y and t as you would normally.\n\n\n\n\nvec2 R;\nconst float pi = 3.14159;\n\n\n// The differential equation. Try some of your own!\nfloat dYdt(float y, float t)\n{\n    // Exponential \n    //return y;\n    \n    //return 1.5*y*(1.-(y/2.));\n    \n    // Parabola\n    //return t;\n    \n    \n    //return y+t;\n    \n    \n    return cos(t) + y*.05 + t*.1 +sin(1.5*y)*.4;\n    \n}\n\n\n\n// Grid zoom factor\nfloat gs = 16.;\n\n\n// length of lines that make up curve\nconst float res = .65;\n\n// number of steps while approximating \nconst float stps = 30.;\n\n\nvec4 t(vec2 p){\n    return texture(iChannel0, p / R);   \n}\n\nmat2 rot(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\n// 2D line distance, used for drawing solution.\nfloat ln( in vec2 p, in vec2 a, in vec2 b ){\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\n\n// Simple axis lines\nfloat axis(vec2 uv, vec2 ruv)\n{\n    float a = smoothstep(0.001, 0.0055, abs(uv.x)) * smoothstep(0.001, 0.0055, abs(uv.y));\n   \n    a *= smoothstep(.05, .066,abs(ruv.x+.5)) + step(0.01, abs(uv.y));\n    a *= smoothstep(.05, .066,abs(ruv.y+.5)) + step(0.01, abs(uv.x));\n    \n    return step(0.2, a);\n}\n\n// Overly complicated way to generate the arrows\nfloat feild(vec2 p, float r)\n{\n    float v=0.;\n   \n    p *= rot(r);\n    \n    float arrow = smoothstep(.065, .01, abs(p.x)) * 1.-step(.35, abs(p.y));\n    float head = smoothstep(.011, .01, dot(abs((p-vec2(.0, .35))*.1), vec2(1., 1.)))*step(.35,p.y);\n    \n    v = mix(v, 1., head);\n    v = 1.-mix(v, 1., arrow); \n    v = smoothstep(0.0,0.55,v);\n    \n    return v;\n}\n\n\n\n// I'll defiantly be improving this function because right now its super dirty and lazy lol\nfloat solution(vec2 sp, vec2 uv)\n{\n\tfloat s = 0.;\n    \n    vec2 p = vec2(0);\n    vec2 lp = sp;\n    \n    float nudge = 0.01;\n    \n    float line = 0.;\n    float md = 999.;\n    \n    for(float i = 0.; i < stps; i++)\n    {\n    \ts = dYdt(lp.y + (i*nudge), lp.x + (i*nudge));\n     \tfloat a = atan(s);\n        p = vec2(lp.x + res*cos(a), lp.y + res*sin(a));\n        line = ln(uv, p, lp);\n        md = min(md, line);\n        lp = p;\n    }\n    \n    lp = sp;\n    \n    for(float i = 0.; i < stps; i++)\n    {\n    \ts = dYdt(lp.y + (i*nudge), lp.x + (i*nudge));\n     \tfloat a = atan(s);\n        p = vec2(lp.x - res*cos(a), lp.y - res*sin(a));\n        line = ln(uv, p, lp);\n        md = min(md, line);\n        lp = p;\n    }\n    return smoothstep(0.01, 0.1, md);;\n}\n\n// The green sample slope\nfloat sampleSlope(vec2 sp, vec2 uv)\n{\n\tfloat s = dYdt(sp.y, sp.x);    \n \tfloat theta = atan(s);   \n    \n    float L = 1.6; // Length of slope thing\n    \n    vec2 a = vec2(sp.x - L*cos(theta), sp.y - L*sin(theta));\n    vec2 b = vec2(sp.x + L*cos(theta), sp.y + L*sin(theta));\n    \n    float ds = smoothstep(0.058, 0.0581, ln(uv, a, b));\n    \n    return ds * step(0.15, length(uv-sp));\n}\n\n\nvoid mainImage( out vec4 f, in vec2 u )\n{\n    R = iResolution.xy;\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    vec2 uv2 = u / R;\n    vec2 m = iMouse.xy / R.xy-.5; \n    m.x *= R.x/R.y;\n    \n   \n    vec3 col = vec3(.95);\n   \n    vec2 ruv = fract(uv*gs) - 0.5;\n    vec2 id = floor(uv*gs);\n    \n    id += 0.5;\n    \n    float slope = dYdt(id.y, id.x);\n    float theta = atan(slope);\n    \n    // Slope feild\n    col = mix(vec3(0., 0., 0.), col, feild(ruv, pi/2. - theta));\n    \n    // Axis\n    col *= mix(vec3(.7, 0., 0.), col, axis(uv, ruv));\n    col.xyz += ruv.x*.05+ruv.y*0.05;\n    \n    // Solution at sample point\n    col = mix(vec3(0., 0., 1.),col, solution(m.xy*gs, uv*gs));\n    \n    // Sample Slope\n    col = mix(vec3(0., 0.8, 0.),col, sampleSlope(m.xy*gs, uv*gs));\n    \n  \n   \n    f = vec4(col, 1.0);\n    \n}\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}