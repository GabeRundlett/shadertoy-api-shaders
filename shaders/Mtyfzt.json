{
    "Shader": {
        "info": {
            "date": "1543595184",
            "description": "Swirling colors; mouse overrides sphere motion",
            "flags": 0,
            "hasliked": 0,
            "id": "Mtyfzt",
            "likes": 10,
            "name": "Plasma Sphere",
            "published": 3,
            "tags": [
                "plasma"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 718
        },
        "renderpass": [
            {
                "code": "// \"Plasma Sphere\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Swirling colors; mouse overrides sphere motion.\n// Started from plasma idea in \"Magnetismic\" by nimitz.\n\n#define AA  0\n\nfloat PrSphAnDf (vec3 p, float r, float w);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nvec2 Rot2D (vec2 q, float a);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec3 HueToRgb (float c);\nfloat Fbm3s (vec3 p, float t);\n\nvec3 ltDir, qnHit;\nfloat dstFar, tCur, aRot, redFac;\nint idObj;\nbool doRot;\nconst float pi = 3.14159, phi = 1.618034;\n\nfloat SphFib (vec3 v, float n)\n{   // Keinert et al's inverse spherical Fibonacci mapping\n  vec4 b;\n  vec3 vf;\n  vec2 ff, c;\n  float fk, ddMin, a, z, ni;\n  ni = 1. / n;\n  fk = pow (phi, max (2., floor (log (n * pi * sqrt (5.) * dot (v.xy, v.xy)) /\n     log (phi + 1.)))) / sqrt (5.);\n  ff = vec2 (floor (fk + 0.5), floor (fk * phi + 0.5));\n  b = vec4 (ff * ni, pi * (fract ((ff + 1.) * phi) - (phi - 1.)));\n  c = floor ((0.5 * mat2 (b.y, - b.x, b.w, - b.z) / (b.y * b.z - b.x * b.w)) *\n     vec2 (atan (v.y, v.x), v.z - (1. - ni)));\n  ddMin = 4.1;\n  for (int j = 0; j < 4; j ++) {\n    a = dot (ff, vec2 (j - 2 * (j / 2), j / 2) + c);\n    z = 1. - (2. * a + 1.) * ni;\n    vf = vec3 (sin (2. * pi * fract (phi * a) + vec2 (0.5 * pi, 0.)) * sqrt (1. - z * z), z);\n    ddMin = min (ddMin, dot (vf - v, vf - v));\n  }\n  return sqrt (ddMin);\n}\n\nfloat FibHole (vec3 p)\n{\n  return smoothstep (0.032, 0.036, SphFib (p, 2048.));\n}\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float rad, dMin, d;\n  dMin = dstFar;\n  rad = 1.;\n  for (int j = 0; j < 2; j ++) {\n    q = p.yzx;\n    if (doRot) {\n      if (j == 0) q.xz = Rot2D (q.xz, aRot);\n      else q.yz = Rot2D (q.yz, aRot);\n    }\n    d = 0.7 * PrSphAnDf (q, rad, -0.005 + 0.01 * FibHole (normalize (q)));\n    DMIN (1);\n    rad *= redFac;\n  }\n  rad = 1.;\n  p.xz = Rot2D (p.xz, 0.25 * pi);\n  for (int j = 0; j < 3; j ++) {\n    q = p;\n    if (j == 1) q.xy = Rot2D (q.xy, 0.5 * pi);\n    else if (j == 2) q.yz = Rot2D (q.yz, -0.5 * pi);\n    d = PrTorusDf (q.xzy, 0.01 * rad, 1.02 * rad);\n    DMIN (2);\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float d, h;\n  d = 0.;\n  for (int j = 0; j < 120; j ++) {\n    h = ObjDf (ro + d * rd);\n    d += h;\n    if (h < 0.0005 || d > dstFar) break;\n  }\n  return d;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.00012, -0.0001);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat BallHit (vec3 ro, vec3 rd, float bRad)\n{\n  float h, b, d;\n  b = dot (rd, ro);\n  d = b * b + bRad * bRad - dot (ro, ro);\n  h = dstFar;\n  if (d > 0.) {\n    h = - b - sqrt (d);\n    qnHit = (ro + h * rd) / bRad;\n  }\n  return h;\n}\n\nvec4 PlasCol (vec3 p, vec3 rd, float d, float bRad)\n{\n  vec4 col4, c4;\n  vec3 q;\n  float w, h;\n  h = mod (0.1 * tCur, 1.);\n  d += 0.01;\n  col4 = vec4 (0.);\n  for (int j = 0; j < 64; j ++) {\n    q = p + d * rd;\n    if (length (q) > bRad || col4.a >= 1.) break;\n    q.xz = Rot2D (q.xz, -2. * pi * h);\n    w = dot (q, q);\n    q /= w + 0.05;\n    q.xz = Rot2D (q.xz, q.y);\n    q.xy = Rot2D (q.xy, -1.1 * q.z);\n    q /= dot (q, q) + 100. * (1.05 + sin (0.17 * tCur));\n    c4 = vec4 (HueToRgb (h), 1.) * clamp (4. * Fbm3s (30. * q, 0.5 * tCur) - 2. - w, 0., 1.) +\n       vec4 (HueToRgb (mod (h + 0.4, 1.)), 1.) * clamp (4. * Fbm3s (33. * q.yzx, 0.5 * tCur) -\n       2. - w, 0., 1.);\n    d += (bRad / 64.) * (1. - 0.25 * c4.a);\n    col4 += 0.02 * (1. - col4.a) * c4.a * c4;\n  }\n  return col4;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, bgCol, vn;\n  float dstObj, dstBall, c, bRad;\n  aRot = doRot ? (2. * pi / 5.) * (floor (0.2 * tCur) + smoothstep (0.7, 1.,\n     mod (0.2 * tCur, 1.))) : 0.;\n  redFac = 0.98;\n  bRad = 0.95;\n  dstBall = BallHit (ro, rd, bRad);\n  dstObj = ObjRay (ro, rd);\n  if (dstBall < min (dstObj, dstFar)) col4 = PlasCol (ro, rd, dstBall, bRad);\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    if (idObj == 1) col = vec3 (0.7, 0.7, 0.5);\n    else if (idObj == 2) col = vec3 (0.6, 0.8, 0.85);\n    if (dot (normalize (ro), vn) < 0.) col *= 0.5;\n    col = col * (0.3 + 0.7 * max (dot (vn, ltDir), 0.)) +\n       0.1 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n    rd = reflect (rd, vn);\n  }\n  c = max (SmoothBump (0.4, 0.6, 0.05, mod (64. * atan (rd.z, - rd.x) / pi, 1.)),\n     SmoothBump (0.4, 0.6, 0.05, mod (64. * asin (rd.y) / pi, 1.)));\n  bgCol = mix (vec3 (1., 0.9, 0.8) * (0.4 + 0.2 * rd.y), vec3 (0.1, 0.1, 0.5), c);\n  c = (rd.y > max (abs (rd.x), abs (rd.z * 0.25))) ? min (2. * rd.y, 1.) :\n     0.05 * (1. + dot (rd, ltDir));\n  if (rd.y > 0.) c += 0.5 * pow (clamp (1.05 - 0.5 *\n     length (max (abs (rd.xz / rd.y) - vec2 (1., 4.), 0.)), 0., 1.), 8.);\n  bgCol += vec3 (0.5, 0.5, 1.) * c + 2. * vec3 (1., 0.9, 0.8) *\n     (pow (abs (rd.x), 2048.) + pow (abs (rd.z), 2048.));\n  bgCol *= 0.4;\n  if (dstBall < min (dstObj, dstFar)) col = mix (((dstObj < dstFar) ? col : bgCol),\n     col4.rgb, col4.a);\n  else if (dstObj < dstFar) col += 0.2 * bgCol;\n  else col = bgCol;\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  doRot = true;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 3. * pi * mPtr.x;\n    el += 1.5 * pi * mPtr.y;\n    doRot = false;\n  } else {\n    az = 0.25 * pi - 0.03 * pi * tCur;\n    el = 0.2 * pi * sin (0.3 * az);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  zmFac = 3.3;\n  ro = vuMat * vec3 (0., 0., -4.);\n  ltDir = normalize (vec3 (0., 1., 0.));\n  dstFar = 10.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 4.;\n#endif  \n  col = vec3 (0.);\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.),\n       0.5 * pi * (a + 0.5)), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphAnDf (vec3 p, float r, float w)\n{\n  return abs (length (p) - r) - w;\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec3 HueToRgb (float c)\n{\n  return clamp (abs (fract (c + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.);\n}\n\nconst float cHashM = 43758.54;\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm3s (vec3 p, float t)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 4; j ++) {\n    f += a * abs (sin (2. * pi * Noisefv3 (p - t)));\n    a *= 0.5;\n    p *= 3.;\n  }\n  return f * (1. / 1.875);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}