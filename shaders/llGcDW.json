{
    "Shader": {
        "info": {
            "date": "1536236687",
            "description": "Signed distance to n-gon.",
            "flags": 0,
            "hasliked": 0,
            "id": "llGcDW",
            "likes": 19,
            "name": "N-gon Distance",
            "published": 3,
            "tags": [
                "circle",
                "distance",
                "segmented"
            ],
            "usePreview": 0,
            "username": "TDM",
            "viewed": 862
        },
        "renderpass": [
            {
                "code": "/*\n    Copyright Â© Alexander Alekseev aka TDM - 2018\n\tLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n    Thanks to iq for optimization advice\n*/\n\n//#define FAST\n\nconst float PI = 3.141592;\nconst float PI2 = PI * 2.0;\n\n/*\n * distance to segmented circle\n */\n\nfloat distanceNGon(vec2 uv, const float N, const float R) {\n    uv = -uv.yx; \t\t\t\t\t\t\t\t // if you want the corner to be up\n    float sa = PI2 / N; \t\t\t\t\t\t // segment angle\n    float a = floor(atan(uv.y,uv.x)/sa+0.5)*sa;  // round current angle to closest segment angle\n        \n    vec2 p1 = vec2(cos(a),sin(a)); \t\t\t\t // plane to find distance to\n    float distr = dot(uv,p1) - R; \t\t\t\t // signed distance to edge\n#ifndef FAST\n    float hw = R * tan(sa * 0.5); \t\t\t\t // half-width of the edge\n    float disth = abs(dot(uv,vec2(-p1.y,p1.x))); // horizontal distance to the middle of the edge\n    return length(vec2(min(hw-disth,0.0),distr))*sign(distr); // distance to the edge or corner point\n#endif\n    return distr;\n}\n\n/*\n * main\n */\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // get the distance\n    float d = distanceNGon(uv,\n                             floor(5.0 + sin(iTime)*1.999),\n                             0.5 + sin(iTime)*0.2);\n    \n    // colorize it\n    float level = 100.0 / iResolution.x;\n    float cm = smoothstep(-level,level,sin(d*50.0));\n    vec3 col = (d > 0.0) ? \n        \tmix(vec3(0.4,0.2,0.2),vec3(0.7,0.4,0.4)*0.85, cm) :\n    \t\tmix(vec3(0.3,0.5,0.5),vec3(0.4,0.7,0.6), cm);\n    col *= pow(min(abs(d)*20.0, 1.0), 0.333) * 0.75 + 0.25;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}