{
    "Shader": {
        "info": {
            "date": "1608420055",
            "description": "Exact SDF for Wythoff construction so rounding etc. works. ",
            "flags": 16,
            "hasliked": 0,
            "id": "WlccR8",
            "likes": 17,
            "name": "Wythoff Polyhedra with Exact SDF",
            "published": 3,
            "tags": [
                "rounding",
                "wythoff",
                "polyhdedron"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 516
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Wythoff construction for convex polyhedra, with an exact SDF.\n// Matthew Arcus, mla, 2020\n//\n// https://en.wikipedia.org/wiki/Wythoff_construction\n//\n// Controls:\n// Mouse changes orientation\n// 1-3: only show faces 1-3\n// c: no colouring\n// e: show edges\n// m: mirror faces\n// r: rotation\n// t: texturing\n//\n// Uses exact distance to triangular faces (or subdivisions of faces) \n// rather than distance to face planes, enabling, eg. SDF rounding\n// to work.\n//\n// Snubs can be done in the same way, but omitted here as this\n// considerably complicates the code.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// Any P,Q,R with 1/P + 1/Q + 1/R > 1, which means:\n// 2:2:2, 3:2:2, 4:2:2, ...\n// 3:3:2, 4:3:2, 5:3:2\n\nfloat P = 5.0, Q = 3.0, R = 2.0;\nfloat roundness = 0.25;\n\n// Trilinear coordinates of vertex point (ie. proportional distance\n// from sides of fundamental region).\nvec3 trilinear = vec3(1,1,1);\n\n// Number of iterations of folding loop\n// 5 iterations is enough to get up to (5 3 2) or (10 2 2)\nint NFOLDS = 5;\n\n// Types of feature\nint FACE0 = 1;\nint FACE1 = 2;\nint FACE2 = 3;\nint EDGE = 4;\nint VERTEX = 5;\n\n// 3 mirror planes (passing through origin) define a fundamental\n// region, which intersects the unit sphere in a spherical\n// triangle with angles PI/P, PI/Q, PI/R.\n// The normal polyhedron has a vertex in the fundamental region,\n// edges from the vertex perpendicular to the mirror planes, and\n// faces perpendicular to the lines of intersection of the mirror\n// planes.\n// The dual polyhedron has faces perpendicular to the vector to\n// the region vertex, and vertices on the mirror plane intersections.\n\nvec3 A,B,C;    // normal vectors for mirror planes\nvec3 vertex;   // the vertex point & face centre of dual\n\nvoid initgeometry() {\n  // Setup folding planes\n  float p = PI/P, q = PI/Q, r = PI/R;\n  // |A| = |B| = |C| = 1\n  // A.B = -cos(p)\n  // A.C = -cos(r)\n  // B.C = -cos(q) = cos(p)cos(r) + y sin(p)\n  // It's more convenient to make A,B,C point _out_ of\n  // the fundamental region (away from the region vertex)\n  A = vec3(-1,0,0);\n  B = vec3(cos(r),-sin(r),0);\n  float x = cos(p);\n  float y = (cos(r)*cos(p)+cos(q))/sin(r);\n  float z = -sqrt(1.0-x*x-y*y);\n  C = vec3(x,y,z);\n\n  // Convert trilinear to cartesian coordinates\n  vertex = normalize(mat3(cross(B,C),cross(C,A),cross(A,B))*trilinear);\n}\n\n// Distance of p from ray in direction dir from origin\n// dir assumed normalized\nfloat ray(vec3 p, vec3 dir) {\n  float h = dot(p,dir);\n  h = max(0.0,h);\n  return length(p - h*dir);\n}\n\n// Exact distance from polyhedron faces and edges\nvec2 faces(vec3 pos, out int t, out vec2 uv) {\n  // Planes thrugh vertex, edge and centre\n  vec3 a = cross(vertex,A), b = cross(vertex,B), c = cross(vertex,C);\n  vec3 e,f;\n  // Find which sector we are in & select bounding edges accordingly\n  if (dot(pos,a) > 0.0 && dot(pos,b) <= 0.0) t = FACE0;\n  else if (dot(pos,b) > 0.0 && dot(pos,c) <= 0.0) t = FACE1;\n  else t = FACE2;\n  if (key(CHAR_0+1)) t = FACE0;\n  else if (key(CHAR_0+2)) t = FACE1;\n  else if (key(CHAR_0+3)) t = FACE2;\n  if (t == FACE0) { e = A; f = B; }\n  else if (t == FACE1) { e = B; f = C; }\n  else { e = C; f = A; }\n  vec3 n = cross(e,f);\n  vec3 p = pos - vertex; // Vertex centred coordinates\n  uv = p.xy;//+p.yz;\n  // Get distances from edges\n  float edgedist = min(ray(p,e),ray(p,f));\n  bool onedge = dot(cross(e,n),p) > 0.0 || dot(cross(f,n),p) < 0.0;\n  float facedist = onedge ? edgedist : length(n*dot(n,p)/dot(n,n));\n  if (key(CHAR_E) && onedge) t = EDGE;\n  return vec2(facedist,edgedist);\n}\n\nfloat scene(vec3 pos, out int type, out vec2 uv) {\n  vec2 t = faces(pos,type,uv);\n  float facedist = t.x;\n  float edgedist = t.y;\n  return mix(facedist,edgedist,0.0)-roundness;\n}\nvec3 fold(vec3 pos) {\n  int parity = 0;\n  if (key(CHAR_F)) return pos;\n  for (int i = 0; i < NFOLDS; i++) {\n    float k;\n    k = dot(pos,A);\n    parity += int(k > 0.0);\n    pos -= 2.0*max(0.0,k)*A;\n    k = dot(pos,B);\n    parity += int(k > 0.0);\n    pos -= 2.0*max(0.0,k)*B;\n    k = dot(pos,C);\n    parity += int(k > 0.0);\n    pos -= 2.0*max(0.0,k)*C;\n  }\n  return pos;\n}\n\nvec3 fold0(vec3 pos) {\n  if (key(CHAR_F)) return pos;\n  pos.xy = abs(pos.xy);\n  pos -= 2.0*max(0.0,dot(pos,C))*C;\n  pos.xy = abs(pos.xy);\n  pos -= 2.0*max(0.0,dot(pos,C))*C;\n  pos.xy = abs(pos.xy);\n  pos -= 2.0*max(0.0,dot(pos,C))*C;\n  pos.xy = abs(pos.xy);\n  pos -= 2.0*max(0.0,dot(pos,C))*C;\n  pos.xy = abs(pos.xy);\n  pos -= 2.0*max(0.0,dot(pos,C))*C;\n  pos.xy = abs(pos.xy);\n  return pos;\n}\n\nfloat map(vec3 pos, out int type, out vec2 uv) {\n  pos = fold(pos);\n  return scene(pos,type,uv);\n}\n\nfloat map(vec3 pos) {\n  int type; vec2 uv;\n  return map(pos,type,uv);\n}\n\n// Tetrahedron technique, from:\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(vec3 p) {\n  float h = 0.0001;\n  vec2 k = vec2(1,-1);\n  return normalize( k.xyy*map( p + k.xyy*h ) + \n                    k.yyx*map( p + k.yyx*h ) + \n                    k.yxy*map( p + k.yxy*h ) + \n                    k.xxx*map( p + k.xxx*h ) );\n}\n\nfloat march(in vec3 ro, in vec3 rd) {\n  const float maxd = 5.0;\n  const float precis = 0.01;\n  float t = 0.0;\n  float res = -1.0;\n  for (int i = 0; i < 200; i++) {\n    //assert(i < 30);\n    if (t > maxd) return -1.0;\n    float h = map(ro+rd*t);\n    t += h;\n    if (h < precis) return t;\n  }\n  return t;\n}\n\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  if (!key(CHAR_R)) {\n    //p.yz = rotate(p.yz,iTime * 0.125);\n    p.zx = rotate(p.zx,iTime * 0.2);\n  }\n  return p;\n}\n\nvec3 circuit[] = vec3[]\n  (vec3(1,1,1),vec3(1,1,1),vec3(1,0,0),vec3(1,0,0),\n   vec3(1,1,0),vec3(1,1,0),vec3(0,1,0),vec3(0,1,0),\n   vec3(0,1,1),vec3(0,1,1),vec3(0,0,1),vec3(0,0,1),\n   vec3(1,0,1),vec3(1,0,1),vec3(1,0,0),vec3(1,0,0),\n\n   vec3(1,1,1),vec3(1,1,0),vec3(1,1,1),vec3(0,1,0),\n   vec3(1,1,1),vec3(0,1,1),vec3(1,1,1),vec3(0,0,1),\n   vec3(1,1,1),vec3(1,0,1),\n\n   vec3(1,1,1),vec3(1,0,0),vec3(1,1,0),vec3(0,1,0),\n   vec3(0,1,1),vec3(0,0,1),vec3(1,0,1),vec3(1,0,0));\n\nconst int nsteps = circuit.length();\n\nvec3 gettrilinear(float t) {\n  int i = int(floor(t))%nsteps;\n  return mix(circuit[i],circuit[(i+1)%nsteps],mod(t,1.0));\n}\n\nvec3 basecolor(int type) {\n  if (type == FACE0) return vec3(1,0,0);\n  if (type == FACE1) return vec3(1,1,0);\n  if (type == FACE2) return vec3(0,0,1);\n  if (type == EDGE) return vec3(0.2);\n  if (type == VERTEX) return vec3(0.1);\n  return vec3(1,0,1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 z = (2.0*fragCoord.xy - iResolution.xy) / iResolution.y;\n  vec3 ro = vec3(0,0,3);\n  vec3 rd = vec3(z,-2);\n  vec3 light = vec3(0.5, 0.8, 3.0);\n  ro = transform(ro);\n  rd = transform(rd);\n  light = transform(light);\n  light = normalize(light);\n  rd = normalize(rd);\n  trilinear = gettrilinear(0.5*iTime);\n  initgeometry();\n  vec3 col = texture(iChannel0,rd).xyz;\n  col = pow(col,vec3(2.2));\n  float t = march(ro, rd);\n  if (t > 0.0 && t < 1e8) {\n    vec3 pos = ro + t * rd;\n    vec3 n = calcNormal(pos);\n    int type; vec2 uv;\n    map(pos,type,uv); // Get type and uv\n    col = basecolor(type);\n    if (key(CHAR_C) && type != EDGE) col = vec3(1);\n    if (key(CHAR_M)) {\n      col = texture(iChannel0,reflect(rd,n)).xyz;\n    } else {\n      if (!key(CHAR_T)) col *= texture(iChannel1,uv).xyz;\n      float diffuse = clamp(dot(n, light), 0.0, 1.0);\n      col *= 0.2 + 0.8*diffuse;\n      float specular = pow(max(0.0,dot(reflect(light,n),rd)),10.0);\n      col += 0.3*specular*vec3(1);\n    }\n  }\n  col = pow(col,vec3(0.4545));\n  if (alert) col.x = 1.0;\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(key) (int(store(0,(key)).x))\n\nconst int CHAR_0 = 48;\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_X = 88;\nconst int CHAR_Z = 90; // rotation\n\nconst float PI\t= 3.14159265359;\n\nbool alert = false;\nvoid assert(bool test) {\n  if (!test) alert = true;\n}\n\n// Approximate equality. Used for assertion checks.\nbool eq(float a, float b) {\n  return abs(a-b) < 1e-4;\n}\n\nfloat edgedistance(vec3 pos, vec3 X) {\n  return length(pos-dot(pos,X)*X);\n}\n\n// Perpendicular distance from p to segment ab\nfloat segment(vec3 p, vec3 a, vec3 b) {\n  vec3 pa = p - a;\n  vec3 ba = b - a;\n  float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n  float d = length(pa - ba * h);\n  return d;\n}\n\nfloat min3(float a, float b, float c) {\n  return min(a,min(b,c));\n}\n\n//-------------------------------------------------\n//From https://www.shadertoy.com/view/XtXGRS#\nvec2 rotate(in vec2 p, in float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nfloat dot2( in vec3 v ) { return dot(v,v); }\n\n// Function by iq: https://www.shadertoy.com/view/ttfGWl\nvec3 closestTriangle(vec3 p, vec3 v0, vec3 v1, vec3 v2)\n{\n    vec3 v10 = v1 - v0; vec3 p0 = p - v0;\n    vec3 v21 = v2 - v1; vec3 p1 = p - v1;\n    vec3 v02 = v0 - v2; vec3 p2 = p - v2;\n    vec3 nor = cross(v10,v02);\n\n    // method 1, in 3D space\n    if( dot(cross(v10,nor),p0)<0.0 ) return v0 + v10*clamp( dot(p0,v10)/dot2(v10), 0.0, 1.0 );\n    if( dot(cross(v21,nor),p1)<0.0 ) return v1 + v21*clamp( dot(p1,v21)/dot2(v21), 0.0, 1.0 );\n    if( dot(cross(v02,nor),p2)<0.0 ) return v2 + v02*clamp( dot(p2,v02)/dot2(v02), 0.0, 1.0 );\n    return p - nor*dot(nor,p0)/dot2(nor);\n}\n\nfloat triangleDistance(vec3 p, vec3 v0, vec3 v1, vec3 v2) {\n  return distance(p,closestTriangle(p,v0,v1,v2));\n}\n\n// Function by iq: https://www.shadertoy.com/view/ttfGWl\n// Triangle extends to infinity\nvec3 closestTriangle2(vec3 p, vec3 v0, vec3 v1, vec3 v2)\n{\n    vec3 v10 = v1 - v0; vec3 p0 = p - v0;\n    //vec3 v21 = v2 - v1; vec3 p1 = p - v1;\n    vec3 v02 = v0 - v2; vec3 p2 = p - v2;\n    vec3 nor = cross(v10,v02);\n\n    // method 1, in 3D space\n    if( dot(cross(v10,nor),p0)<0.0 ) return v0 + v10*clamp( dot(p0,v10)/dot2(v10), 0.0, 1.0 );\n    //if( dot(cross(v21,nor),p1)<0.0 ) return v1 + v21*clamp( dot(p1,v21)/dot2(v21), 0.0, 1.0 );\n    if( dot(cross(v02,nor),p2)<0.0 ) return v2 + v02*clamp( dot(p2,v02)/dot2(v02), 0.0, 1.0 );\n    return p - nor*dot(nor,p0)/dot2(nor);\n}\n\nfloat triangleDistance2(vec3 p, vec3 v0, vec3 v1, vec3 v2) {\n  return length(p-closestTriangle2(p,v0,v1,v2));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}