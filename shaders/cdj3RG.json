{
    "Shader": {
        "info": {
            "date": "1667961191",
            "description": "Attempting to recreate the beautiful color of permanganate (MnO4-) in solution using questionable data I got from a quick google search.",
            "flags": 0,
            "hasliked": 0,
            "id": "cdj3RG",
            "likes": 17,
            "name": "Permanganate Absorption",
            "published": 3,
            "tags": [
                "rendering",
                "chemistry",
                "beerlambert",
                "permanganate"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 272
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Screen UVs and mouse\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 3.14;\n\n    // Default before user interaction\n    if (ivec2(iMouse.xy) == ivec2(0)) mouse = vec2(0.6, -0.1);\n\n    // Background\n    float[33] specRx = float[33](0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n\n    // Camera ray\n    Ray ray = Ray(vec3(0.0, 0.0, 14.0), normalize(vec3(uv, -1.0)));\n\n    mat2 vert = Rotate2D(mouse.y);\n    ray.pos.yz *= vert;\n    ray.dir.yz *= vert;\n\n    mat2 hori = Rotate2D(mouse.x);\n    ray.pos.xz *= hori;\n    ray.dir.xz *= hori;\n\n    // Light\n    vec3 lightDir = normalize(vec3(1.0, 1.0, 1.0));\n    float[33] lightColor = float[33](1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0);\n\n    // Render\n    float[33] planeColor = float[33](0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125, 0.3125);\n    float tPlane = (-3.71 - ray.pos.y) / ray.dir.y;\n    if (tPlane > 0.0) {\n        for (int i=0; i < 33; i++) {\n            specRx[i] = planeColor[i] * lightColor[i] * lightDir.y;\n        }\n    }\n\n    vec2 tCube = cubeIsect(ray, vec3(2.65, 3.7, 2.65));\n    if (tCube.x > 0.0 && (tPlane < 0.0 ? true : tPlane > tCube.x)) {\n        float b = tCube.y - tCube.x; // Light path length (cm)\n        float C = 0.005;//0.0003164; // Concentration (M)\n        for (int i=0; i < 33; i++) {\n            float lambda = 380.0 + 10.0 * float(i);\n            // 4835.43 ~ 2.625 * ln(10) / (1.25cm * 0.001M)\n            float A = gaussian(lambda, 4835.43, 0.000255, 525.0) * b * C; // Very rough approximation of the absorbance spectrum\n            specRx[i] *= exp(-A);\n        }\n    }\n\n    fragColor = vec4(pow(spectrum2rgb(specRx), vec3(0.4545)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Discrete spectrum from 380nm to 700nm in 10nm increments\nconst vec3[33] specBasis = vec3[33](\n    vec3(0.0000548384, 0.0000008374, 0.0061998149),\n    vec3(0.0006127200, 0.0000042329, 0.0226023738),\n    vec3(0.0042446966, 0.0000192909, 0.0673963214),\n    vec3(0.0182321761, 0.0000792635, 0.1643709785),\n    vec3(0.0485554067, 0.0002936307, 0.3278845083),\n    vec3(0.0801759147, 0.0009807018, 0.5349626533),\n    vec3(0.0820838093, 0.0029531092, 0.7138925334),\n    vec3(0.0521048970, 0.0080173185, 0.7792001443),\n    vec3(0.0205074548, 0.0196239245, 0.6956199327),\n    vec3(0.0050061561, 0.0433061604, 0.5079276101),\n    vec3(0.0007690801, 0.0861629558, 0.3033461120),\n    vec3(0.0001369679, 0.1545605267, 0.1481773604),\n    vec3(0.0003212008, 0.2499675772, 0.0592014146),\n    vec3(0.0013261318, 0.3644818144, 0.0193459083),\n    vec3(0.0048227433, 0.4791540236, 0.0051707432),\n    vec3(0.0152553543, 0.5679126026, 0.0011303778),\n    vec3(0.0419684800, 0.6068690157, 0.0002021162),\n    vec3(0.1004145564, 0.5846763336, 0.0000295587),\n    vec3(0.2089501070, 0.5078590041, 0.0000035357),\n    vec3(0.3781473071, 0.3977204208, 0.0000003459),\n    vec3(0.5951849164, 0.2808146205, 0.0000000277),\n    vec3(0.8147330072, 0.1787592946, 0.0000000018),\n    vec3(0.9699541294, 0.1025946327, 0.0000000001),\n    vec3(1.0042910022, 0.0530869459, 0.0000000000),\n    vec3(0.9043581098, 0.0247661177, 0.0000000000),\n    vec3(0.7082617587, 0.0104168214, 0.0000000000),\n    vec3(0.4824137079, 0.0039502046, 0.0000000000),\n    vec3(0.2857708829, 0.0013505512, 0.0000000000),\n    vec3(0.1472274546, 0.0004163031, 0.0000000000),\n    vec3(0.0659678183, 0.0001156952, 0.0000000000),\n    vec3(0.0257067947, 0.0000289887, 0.0000000000),\n    vec3(0.0087123683, 0.0000065486, 0.0000000000),\n    vec3(0.0025680118, 0.0000013338, 0.0000000000)\n);\n\n// Structs\nstruct Ray {\n    vec3 pos;\n    vec3 dir;\n};\n\n// Utilities\nfloat gaussian(in float x, in float a, in float b, in float c) {\n    x -= c;\n    return a * exp(-b * x * x);\n}\n\nvec3 wavelength2rgb(in float lambda) {\n    float r = gaussian(lambda, 0.086169, 0.002390, 435.492) + gaussian(lambda, 1.00871, 0.000698, 607.492);\n    float g = gaussian(lambda, 0.607489, 0.000518, 541.404);\n    float b = gaussian(lambda, 0.779526, 0.001005, 449.355);\n    return vec3(r, g, b);\n}\n\nvec3 spectrum2rgb(in float[33] spectrum) {\n    vec3 rgb = vec3(0.0);\n    for (int i=0; i < 33; i++) {\n        rgb += spectrum[i] * specBasis[i];\n    }\n\n    return rgb;\n}\n\nmat2 Rotate2D(in float a) {\n    float co = cos(a), si = sin(a);\n    return mat2(co, -si, si, co);\n}\n\nvec2 cubeIsect(in Ray ray, in vec3 size)  {\n    vec3 n = ray.pos / ray.dir, k = size / abs(ray.dir);\n    vec3 t1 = -k - n, t2 =  k - n;\n\n    float tN = max(max(t1.x, t1.y), t1.z);\n    float tF = min(min(t2.x, t2.y), t2.z);\t\n    if (tN > tF || tF < 0.0) return vec2(-1.0);\n\n    return vec2(tN, tF);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}