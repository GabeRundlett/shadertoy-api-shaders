{
    "Shader": {
        "info": {
            "date": "1606425154",
            "description": "Made for the [url=https://isohedral.ca/swirled-series/]Swirled Series[/url]\n\nUse the mouse to stop the random nonsense and take control!",
            "flags": 32,
            "hasliked": 0,
            "id": "tsGBzR",
            "likes": 8,
            "name": "Swirled Series",
            "published": 3,
            "tags": [
                "checkerboard",
                "short"
            ],
            "usePreview": 0,
            "username": "s23b",
            "viewed": 449
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\nfloat seed;\n\nfloat hash(vec2 uv) {\n  float f = fract(cos(dot(uv ,vec2(.09123898,.0231233))) * 11111.5452313);\n    return f;\n}\n\n// xor for floats between 0. and 1.\nfloat xor(float a, float b) {\n    return mix(a, 1. - a, b);\n}\n\n// split view in 4 quadrants, alternating between black and white,\n// rotated by a mix of a1 and a2 angles (motion blur between the 2 states)\nfloat divider(vec2 uv, float a1, float a2) {\n    // skip calculations if not animating\n    if (a1 != 0. && a1 != 1. || a2 != a1) {\n        // calculate angle\n    \tfloat a = atan(uv.y, uv.x) / PI;\n        \n        // add curvy bit\n        a -= length(uv) * .02 * smoothstep(.5, .0, abs(a1 - .5));\n        \n        // calculate blur width\n        float w = (a2 - a1) / 2.;\n        a += a1 + w * .5;\n        if (a > 1.) --a;\n\n        float d1 = clamp((abs(a) - .5) / w + .5, 0., 1.);\n        float d2 = clamp((abs(1. - abs(a + .5)) - .5 ) / w + .5, 0., 1.);\n        return xor(d1, d2);\n    }\n    \n    return xor(step(0., uv.x), step(0., uv.y));\n}\n\n// calculate rotation angle from grid point and elapsed time\nfloat angle(vec2 p, float t) {\n    // pick random gridpoints to rotate\n    if (hash(p + seed) < .04) {\n        return smoothstep(0., -11., p.x * 1.5 + p.y * 2.5 - t * 37. + hash(p));\n    }\n    \n    return 0.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float scale = min(iResolution.x, iResolution.y);\n    vec2 uv = fragCoord;\n    uv -= (iResolution.xy - scale) / 2.;\n    uv /= scale;\n    vec2 crop = abs(uv - .5);\n    \n    if (max(crop.x, crop.y) > .5) {\n        fragColor = vec4(.5);\n        return;\n    }\n\n    uv *= 8.;\n    uv -= 1.;\n    \n    float d = .0;\n    \n    seed = floor(iTime / 3.) * 10.;     \n    float t = fract(iTime / 3.);\n    \n    for (float x = 0.; x < 7.; ++x) {\n\t    for (float y = 0.; y < 7.; ++y) {\n            vec2 p = vec2(x, y);\n            if (iMouse.x >= 1.) {\n                float a = smoothstep(0., 1., texelFetch(iChannel0, ivec2(p), 0).x);\n     \t    \td = xor(d, divider(uv - p, a, min(1., a + 1. / 20.)));\n            } else {\n     \t    \td = xor(d, divider(uv - p, angle(p, t), angle(p, t + 1. / 60.)));\n            }\n        }\n    }\n    \n\tfragColor = vec4(d);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// store animation progress for manual mode\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float scale = min(iResolution.x, iResolution.y);\n    vec2 uv = iMouse.xy;\n    uv -= (iResolution.xy - scale) / 2.;\n    uv /= scale;\n    uv *= 8.;\n    uv -= 1.;\n    \n    vec2 pixel = fragCoord;\n    \n    float prev = texelFetch(iChannel0, ivec2(fragCoord), 0).x;\n    \n    if (iFrame == 0) prev = 1.;\n    \n    if (iMouse.z > 0. && distance(uv, fragCoord - .5) < .6 && prev == 1.) {\n        fragColor = vec4(0.);\n    } else {\n        fragColor = vec4(min(1., prev + 1. / 60.));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}