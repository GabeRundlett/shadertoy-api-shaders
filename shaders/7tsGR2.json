{
    "Shader": {
        "info": {
            "date": "1622467770",
            "description": "ship searching",
            "flags": 0,
            "hasliked": 0,
            "id": "7tsGR2",
            "likes": 2,
            "name": "ship searching",
            "published": 3,
            "tags": [
                "2d",
                "draw",
                "ship",
                "poly"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 207
        },
        "renderpass": [
            {
                "code": "//por jorgefloresp.  ==jorge2017a1---22/may/2021\n//ship searching\n// Referencia\n//https://www.shadertoy.com/view/XsG3WR\n//Lunar Lander\n//Created by Hamneggs in 2016-01-27\n\n\n\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n#define PI 3.14\n#define roundnes 0.025\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n\n\n#define S2(d,b) smoothstep(antialiasing(0.5),b,d)\n#define POLY(N) (in vec2 p, in vec2[N] v) {const int n=v.length();float d=dot(p-v[0],p-v[0]);float s=1.;for(int i=0,j=n-1;i<n;j=i,i++){vec2 e=v[j]-v[i];vec2 w=p-v[i];vec2 b=w-e*clamp(dot(w,e)/dot(e,e),0.,1.);d=min(d,dot(b,b));bvec3 cond=bvec3(p.y>=v[i].y,p.y<v[j].y,e.x*w.y>e.y*w.x);if(all(cond)||all(not(cond))) s=-s;}return s*sqrt(d);}\n\n\n// Channel definitions.\n#define DATA_BUFFER iChannel0\n#define NOISE_TEX iChannel1\n\nconst vec3 ColWhite=vec3(1.0);\nconst vec3 ColBlack=vec3(0.0);\nconst vec3 ColCafe=vec3(0.76,0.596,0.47);\n\n//----------oPeraciones de Repeticion\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n    \nvec3 ponerBorde2(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S(abs( distObj),0.0));\n  return colOut;\n}\n\n\nvec3 ponerBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj),0.0));\n  return colOut;\n}\n\n\n\n\n\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n//https://www.shadertoy.com/view/XsG3WR\n//Lunar Lander\n//Created by Hamneggs in 2016-01-27\n\n/* \n    The FBM that gives rise to the terrain. (literally)\n */\nfloat fbm( in vec2 uv )\n{\n    float result = texture(NOISE_TEX, uv    ).r*1.000;\n    result += texture(NOISE_TEX, uv*2.0).r*.5000;\n    result += texture(NOISE_TEX, uv*4.01).r*.2500;\n    result += texture(NOISE_TEX, uv*8.0).r*.1250;\n    result += texture(NOISE_TEX, uv*16.).r*.0625;\n    return result * .533333; // * (1.0/1.875);\n}\n\n/* \n    The distance to the lunar surface, or rather \n    to a transformed FBM.\n */\nfloat distLunarSurface( in vec2 uv )\n{\n    uv.x *= .0125;\n    vec2 q = uv; q.y=0.0;\n    float f = fbm(q);\n    return uv.y - f*f*1.;\n}\n\n\nvec3 Lunar(vec2 p, vec3 col, vec3 colTierraA,vec3 colTierraB)\n{\n     float dl1=distLunarSurface(p);\n     float dl2=distLunarSurface(p-vec2(0.001,0.025));\n     \n     col= ponerBorde2(colTierraA, col, dl2 );\n     col= ponerBorde2(colTierraB, col, dl1 );\n     \n     \n     return col;\n}\n\n\nfloat sdPolyc001 POLY(7)\nvec2 ptc001[ 7]=vec2[](  \nvec2(.247,.399),vec2(.725,.392),vec2(.446,.456),vec2(.424,.525),vec2(.282,.532),\nvec2(.231,.661),vec2(.247,.399) );\n\n\nfloat sdPolyc002 POLY(5)\nvec2 ptc002[ 5]=vec2[](  \nvec2(.285,.519),vec2(.285,.472),vec2(.415,.465),vec2(.408,.506),vec2(.285,.519) );\n\nfloat sdPolyc003 POLY(7)\nvec2 ptc003[ 7]=vec2[](  \nvec2(.433,.534),vec2(.359,.447),vec2(.406,.337),vec2(.334,.205),vec2(.563,.170),\nvec2(.605,.412),vec2(.433,.534) );\n\nfloat sdPolyc004 POLY(6)\nvec2 ptc004[ 6]=vec2[](  \nvec2(.621,.617),vec2(.470,.489),vec2(.485,.393),vec2(.642,.337),vec2(.681,.458),\nvec2(.621,.617) );\n\nfloat sdPolyc005 POLY(6)\nvec2 ptc005[ 6]=vec2[](  \nvec2(.479,.673),vec2(.398,.567),vec2(.517,.476),vec2(.567,.507),vec2(.531,.598),\nvec2(.479,.673) );\n\n\nvec3 nave(vec2 p, vec3 col)\n{   float sdc001 = sdPolyc001(p, ptc001);\n    col=ponerBorde(vec3(0.0,0.0,0.8),col,sdc001 );   \n    \n    float sdc002 = sdPolyc002(p, ptc002);\n    col=ponerBorde(vec3(1.0),col,sdc002 );\n   return col;\n}\n\n\nvec3 rocaA(vec2 p, vec3 col)\n{\n    float sdc003 = sdPolyc003(p, ptc003);\n    col=ponerBorde(vec3(0.8,0.5,0.6),col,sdc003);\n    return col;\n}\n\nvec3 rocaB(vec2 p, vec3 col)\n{   float sdc004 = sdPolyc004(p, ptc004);\n    col=ponerBorde(vec3(0.6,0.8,0.5),col,sdc004);\n   return col;\n}\n\nvec3 rocaC(vec2 p, vec3 col)\n{   float sdc005 = sdPolyc005(p, ptc005);\n    col=ponerBorde(vec3(0.23,0.5582,0.988),col,sdc005 );\n return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 p=uv*0.5+vec2(0.0+iTime*0.25,0.5);\n    \n    vec2 p2=p;\n    p2.x= opRep1D(p2.x+(iTime*1.5+abs(sin(iTime*0.25))), 10.0 );\n    p2.y+=0.5*sin(iTime);\n    \n    \n    vec3 col=vec3(0.265,0.250,0.780);\n    \n    if (sin(iTime*0.5)>0.0)\n    {\n        col=Lunar(p-vec2(3.0+iTime*0.12,0.25),col,ColWhite, ColBlack );\n        col=Lunar(p,col,ColWhite,ColCafe);\n        col= nave(p+vec2(0.3-iTime*0.25,0.0),col);\n    }\n    else\n     {\n        col=Lunar(p-vec2(3.0+iTime*0.12,0.25),col,ColWhite, ColBlack ); \n        col= nave(p+vec2(0.3-iTime*0.25,0.0),col);\n        \n        col=Lunar(p,col,ColWhite,ColCafe);\n        \n    }\n    col=rocaA(p2, col);\n    col=rocaB(p2-vec2(2.5,0.0), col);\n    col=rocaC(p2-vec2(3.5,0.0), col);\n    \n    fragColor = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}