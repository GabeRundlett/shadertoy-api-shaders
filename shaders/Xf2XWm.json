{
    "Shader": {
        "info": {
            "date": "1706417862",
            "description": "Fork of my \"Simple Cubes Tunnel 2\" with a twist.\n\n\nI applied the distortion formula from https://www.shadertoy.com/view/lcs3DH and unintentionally arrived at this weird water effect while tweaking it. I think it looks cool, so I saved it.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xf2XWm",
            "likes": 3,
            "name": "Water-like Thing ",
            "published": 3,
            "tags": [
                "raymarching",
                "cubes"
            ],
            "usePreview": 0,
            "username": "rafaelbeckel",
            "viewed": 199
        },
        "renderpass": [
            {
                "code": "// Fork of \"Simple Cubes Tunnel 2\" by rafaelbeckel. https://shadertoy.com/view/DtyGRh\n// 2024-01-28 04:37:53\n\n// I applied the distortion effect from https://www.shadertoy.com/view/lcs3DH\n// into my old cubes tunnel, but while tweaking I unintentially arrived\n// in this water-like effect which looks cool, so I decided to save it\n// as-is while I continue working on it.\n\nvec3 colorForPoint(vec3 p) {\n    vec3 cubePos = vec3(floor(p.x) + 0.5, floor(p.y) + 0.5, floor(p.z) + 0.5);\n    float t = p.z * 0.1;\n    vec3 color = 0.5 + 0.5 * sin(t * vec3(1.0, 2.0, 3.0) + vec3(0.0, 2.0, 4.0));\n\n    // Blinking effect\n    float blinkSeed = sin(dot(cubePos, vec3(37.2187, 51.9898, 98.233))) * 43758.5453;\n    float blinkFactor = 0.5 + 0.5 * sin(iTime * 0.2 + blinkSeed);\n    float blinkThreshold = 0.988;\n    if (blinkFactor > blinkThreshold) {\n        float intensity = smoothstep(blinkThreshold, 1.0, blinkFactor);\n        color = mix(color, vec3(1.0), intensity);\n    }\n\n    return color;\n}\n\nmat2 rot2D(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nvoid mainImage(out vec4 O, vec2 u) {\n    vec3 R = iResolution, C,\n         P = vec3(0, 0, iTime * 2.),\n         D = normalize(vec3(u, R.y) - 0.5 * R);\n\n    D.xy *= mat2(cos( iTime*.1 - vec4(0,11,33,0)));\n\n    float t = 0., d = 1., i = 0.;\n    for (; i++ < 80. && d > .001; P += d * D) {\n        // these two lines are the only changes I did to my old shader\n        P.xy *= rot2D(t*.05);\n        P.y += sin(t*(iTime*.0001)*.5)*.35;\n\n        C = ceil(P) - 0.5,\n        C = abs(P - C) - 0.03 - 0.17 * fract(sin(dot(C, R + 71.)) * 1e4),\n        t += d = min(max(C.x, max(C.y, C.z)), 0.) + 0.8 * length(max(C, 0.));\n    }\n\n    O = t > 0.\n        ? vec4(colorForPoint(P), 1.0)\n        : O * 0.;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}