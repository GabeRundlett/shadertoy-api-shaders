{
    "Shader": {
        "info": {
            "date": "1694200528",
            "description": "This shader has been generated using Material Maker (and cleaned up manually).\nIt shows a modified Voronoi node that accepts inputs for density and randomness (the density is shown as BW background, and randomness is a checkerboard).",
            "flags": 0,
            "hasliked": 0,
            "id": "mt2fRy",
            "likes": 10,
            "name": "Varonoi",
            "published": 3,
            "tags": [
                "materialmaker"
            ],
            "usePreview": 0,
            "username": "RodzLabs",
            "viewed": 198
        },
        "renderpass": [
            {
                "code": "// Generated using Material Maker\n// The MIT License\n// Copyright © 2023 Rodolphe Suescun\n\n#define SEED_VARIATION 0.0\n\n\nvec2 rand2(vec2 x) {\n    return fract(cos(mod(vec2(dot(x, vec2(13.9898, 8.141)),\n\t\t\t\t\t\t      dot(x, vec2(3.4562, 17.398))), vec2(3.14, 3.14))) * 43758.5);\n}\n\nconst float p_o675333283391_amount1 = 1.000000000;\nconst float p_o675350060610_value = 0.020000000;\nconst float p_o675350060610_width = 0.020000000;\nconst float seed_o675249397878 = 0.190681249;\nconst float p_o675249397878_scale_x = 8.000000000;\nconst float p_o675249397878_scale_y = 8.000000000;\nconst float p_o675249397878_stretch_x = 1.000000000;\nconst float p_o675249397878_stretch_y = 1.000000000;\nconst float p_o675249397878_density = 20.000000000;\nconst float p_o675249397878_randomness = 1.000000000;\nconst float p_o675232619757_default_in1 = 1.000000000;\nconst float p_o675232619757_default_in2 = 0.000000000;\nconst float p_o675215842546_sides = 6.000000000;\nconst float p_o675215842546_radius = 0.900000000;\nconst float p_o675215842546_edge = 0.60000000;\nconst float p_o675417169501_x_scale = 2.000000000;\nconst float p_o675417169501_y_scale = 2.000000000;\nconst vec4 p_o675366837491_color = vec4(0.078431375, 0.000000000, 1.000000000, 1.000000000);\n\nvec3 blend_normal(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1 + (1.0-opacity)*c2;\n}\n\nfloat shape_polygon(vec2 uv, float sides, float size, float edge) {\n\tuv = 2.0*uv-1.0;\n\tedge = max(edge, 1.0e-8);\n\tfloat angle = atan(uv.x, uv.y)+3.14159265359;\n\tfloat slice = 6.28318530718/sides;\n\treturn clamp((1.0-(cos(floor(0.5+angle/slice)*slice-angle)*length(uv))/size)/edge, 0.0, 1.0);\n}\n\nfloat wave_square(float x) {\n\treturn (fract(x) < 0.5) ? 0.0 : 1.0;\n}\n\nfloat mix_xor(float x, float y) {\n\treturn min(x+y, 2.0-x-y);\n}\n\nfloat o675249397878_input_in_density(vec2 uv, float _seed_variation_) {\nfloat o675215842546_0_1_f = shape_polygon((uv), p_o675215842546_sides, p_o675215842546_radius*1.0, p_o675215842546_edge*1.0);\nfloat o675232619757_0_clamp_false = p_o675232619757_default_in1-o675215842546_0_1_f;\nfloat o675232619757_0_clamp_true = clamp(o675232619757_0_clamp_false, 0.0, 1.0);float o675232619757_0_1_f = o675232619757_0_clamp_false;\n\nreturn o675232619757_0_1_f;\n}\nfloat o675249397878_input_in_randomness(vec2 uv, float _seed_variation_) {\nfloat o675417169501_0_1_f = mix_xor(wave_square(p_o675417169501_x_scale*uv.x), wave_square(p_o675417169501_y_scale*uv.y));\n\nreturn o675417169501_0_1_f;\n}\n\n// Based on https://www.shadertoy.com/view/ldl3W8, The MIT License, Copyright © 2013 Inigo Quilez\nvec2 voronoi_cell_offset_o675249397878(int i, int np, vec2 seed, vec2 offset, vec2 size, float _seed_variation_) {\n\tfloat rows = round(sqrt(float(np)));\n\tfloat rowsize = float(np)/rows;\n\tfloat row = floor(float(i)/rowsize);\n\tfloat firstcol = ceil(row*float(np)/rows);\n\tfloat cols = ceil((row+1.0)*float(np)/rows) - firstcol;\n\tvec2 c1 = vec2((float(i) - firstcol)/cols, float(row)/float(rows));\n\tvec2 c2 = vec2(((float(i+1) - firstcol))/cols, (row+1.0)/rows);\n\treturn c1+(p_o675249397878_randomness*o675249397878_input_in_randomness((offset+0.5*(c1+c2)*size), 0.0)*(seed-vec2(0.5))+vec2(0.5))*(c2-c1);\n}\nvec4 voronoi_o675249397878(vec2 x, vec2 size, vec2 stretch, vec2 seed, float _seed_variation_) {\n\tx *= size;\n\tvec2 n = floor(x);\n\tvec2 f = fract(x);\n\n\tvec2 mg, mr, mc;\n\tfloat md = 8.0;\n\tfor (int j=-1; j<=1; j++)\n\tfor (int i=-1; i<=1; i++) {\n\t\tvec2 g = vec2(float(i),float(j));\n\t\tvec2 s = seed + mod(n + g + size, size);\n\t\tint np = max(1, int(o675249397878_input_in_density((fract((n + g + vec2(0.5)) / size)), 0.0)*p_o675249397878_density));\n\t\tfor (int p = 0; p < np; ++p) {\n\t\t\ts = rand2(s);\n\t\t\tvec2 o = voronoi_cell_offset_o675249397878(p, np, s, fract((n + g)/size), vec2(1.0)/size, _seed_variation_);\n\t\t\tvec2 c = g + o;\n\t\t\tvec2 r = c - f;\n\t\t\tvec2 rr = r*stretch;\n\t\t\tfloat d = dot(rr,rr);\n\n\t\t\tif (d<md) {\n\t\t\t\tmc = c;\n\t\t\t\tmd = d;\n\t\t\t\tmr = r;\n\t\t\t\tmg = g;\n\t\t\t}\n\t\t}\n\t}\n\n\tmd = 8.0;\n\tfor (int j=-2; j<=2; j++)\n\tfor (int i=-2; i<=2; i++) {\n\t\tvec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 s = seed + mod(n + g + size, size);\n\t\tint np = max(1, int(o675249397878_input_in_density((fract((n + g + vec2(0.5)) / size)), 0.0)*p_o675249397878_density));\n\t\tfor (int p = 0; p < np; ++p) {\n\t\t\ts = rand2(s);\n\t\t\tvec2 o = voronoi_cell_offset_o675249397878(p, np, s, fract((n + g)/size), vec2(1.0)/size, _seed_variation_);\n\t\t\tvec2 r = g + o - f;\n\t\t\tvec2 rr = (mr-r)*stretch;\n\t\t\tif (dot(rr,rr)>0.00001)\n\t\t\t\tmd = min(md, dot(0.5*(mr+r)*stretch, normalize((r-mr)*stretch)));\n\t\t}\n\t}\n\treturn vec4(mc+n, length((x-(mc+n))*stretch), md);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\nfloat minSize = min(iResolution.x, iResolution.y);\nfloat _seed_variation_ = SEED_VARIATION;\nvec2 UV = vec2(0.0, 1.0) + vec2(1.0, -1.0) * (fragCoord-0.5*(iResolution.xy-vec2(minSize)))/minSize;\nvec4 o675249397878_0_xyzw = voronoi_o675249397878(((UV)), vec2(p_o675249397878_scale_x, p_o675249397878_scale_y), vec2(p_o675249397878_stretch_y, p_o675249397878_stretch_x), vec2((seed_o675249397878+_seed_variation_)), _seed_variation_);float o675249397878_1_1_f = o675249397878_0_xyzw.w;\nvec3 o675350060610_0_false = clamp((vec4(vec3(o675249397878_1_1_f), 1.0).rgb-vec3(p_o675350060610_value))/max(0.0001, p_o675350060610_width)+vec3(0.5), vec3(0.0), vec3(1.0));\nvec3 o675350060610_0_true = vec3(1.0)-o675350060610_0_false;\nvec4 o675350060610_0_1_rgba = vec4(o675350060610_0_true, vec4(vec3(o675249397878_1_1_f), 1.0).a);\nvec4 o675366837491_0_1_rgba = p_o675366837491_color;\nfloat o675215842546_0_1_f = 0.9*shape_polygon((fract(UV)), p_o675215842546_sides, p_o675215842546_radius*1.0, p_o675215842546_edge*1.0);\no675215842546_0_1_f += 0.1*o675249397878_input_in_randomness(UV, 0.0);\nfloat o675232619757_0_clamp_false = p_o675232619757_default_in1-o675215842546_0_1_f;\nfloat o675232619757_0_clamp_true = clamp(o675232619757_0_clamp_false, 0.0, 1.0);float o675232619757_0_1_f = o675232619757_0_clamp_false;\nvec4 o675333283391_0_b = vec4(vec3(o675232619757_0_1_f), 1.0);\nvec4 o675333283391_0_l;\nfloat o675333283391_0_a;\n\no675333283391_0_l = o675366837491_0_1_rgba;\no675333283391_0_a = p_o675333283391_amount1*(dot((o675350060610_0_1_rgba).rgb, vec3(1.0))/3.0);\no675333283391_0_b = vec4(blend_normal(UV, o675333283391_0_l.rgb, o675333283391_0_b.rgb, o675333283391_0_a*o675333283391_0_l.a), min(1.0, o675333283391_0_b.a+o675333283391_0_a*o675333283391_0_l.a));vec4 o675333283391_0_1_rgba = o675333283391_0_b;\nfragColor = o675333283391_0_1_rgba;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}