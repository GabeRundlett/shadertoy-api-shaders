{
    "Shader": {
        "info": {
            "date": "1608762856",
            "description": "potpo",
            "flags": 32,
            "hasliked": 0,
            "id": "wldyzM",
            "likes": 7,
            "name": "Day 371",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 403
        },
        "renderpass": [
            {
                "code": "// elastic collisions with voronoi particle tracking\n// thx to wyatt for helping with learning this!\n\nint neighborsCnt = 0;\nvec4 neighborPtrs[] = vec4[8](vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0));\n\nfloat steps = 6.;\nfloat stepSz = 1.;\nvoid findNeighbors( vec4 p, vec2 dir){\n    for(float i = 1.; i < steps; i++){\n        vec4 otherPntr = TF1( p.xy * R + dir * i*stepSz );\n        vec4 otherP    = T( otherPntr.xy );\n        \n        if ( otherP.x != p.x && otherP.y != p.y){\n            for(int i = 0; i < neighborsCnt; i++){\n                if (neighborPtrs[i] == otherPntr)\n                    return;\n            }\n            neighborPtrs[neighborsCnt++] = otherPntr;\n            return;\n        }\n    }\n\n}\n\nfloat sdSq(vec2 p, float s){p = abs(p) - s; return max(p.x,p.y);}\n\n#define pal(a,b,c,d,e) ((a) + (b)*sin((c)*(d) + (e)))\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    if( iMouse.z > 0.){\n        float sqSz = 0.4*R.y;\n        \n        vec2 muv = U - iMouse.xy*1.;\n        float sq = sdSq(muv,sqSz);\n        if(sq <= 0.){\n            U -= iMouse.xy;\n            U *= 0.25;\n            U += iMouse.xy;\n            \n            //U -= iMouse.xy*1.;\n            //U *= 0.25;\n            \n        }\n        \n    }\n    \n    vec2 uv = U/R;\n    // for(float i = 0.; i < particlesCnt; i++){\n    vec4 pPntr = T1(U);\n    vec4 p = T(pPntr.xy);\n    // C = T(U);\n    \n    findNeighbors( p, vec2(1,0));\n    findNeighbors( p, vec2(-1,0));\n    findNeighbors( p, vec2(0,1));\n    findNeighbors( p, vec2(0,-1));\n            \n    findNeighbors( p, vec2(1,1));\n    findNeighbors( p, vec2(1,-1));\n    findNeighbors( p, vec2(-1,1));\n    findNeighbors( p, vec2(-1,-1));\n\n    for(int i = -1; i < neighborsCnt; i++){\n        vec4 otherPtr;\n        vec4 otherP;\n        if (i == -1){\n            otherPtr = pPntr;\n            otherP = p;\n        }  else {\n            otherPtr = neighborPtrs[i];\n            otherP = T(otherPtr.xy);\n        }\n        \n        C = mix(C,pal(0.5,0.5,vec4(3,2,1,1.),1.,otherPtr.z*1.*14. + 0.*otherPtr.w ),smoothstep(dFdx(uv.x),0.,length((otherP.xy - uv)*resFact.xy) - particleSz));\n    }\n    \n        \n    C = pow(C,vec4(0.4545));    \n\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec4 getData(vec2 u){\n    return T( T1(u).xy );\n}\n\nint neighborsCnt = 0;\nvec4 neighborPtrs[] = vec4[8](vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0));\n\n#define steps  floor(particleSz*iResolution.x*8.)\nfloat stepSz = 1.;\nvoid findNeighbors( vec4 p, vec2 dir){\n    for(float i = 1.; i < steps; i++){\n        vec4 otherPntr = TF1( p.xy * R + dir * i*stepSz );\n        vec4 otherP    = T( otherPntr.xy );\n        \n        if ( otherP.x != p.x && otherP.y != p.y){\n            for(int i = 0; i < neighborsCnt; i++){\n                if (neighborPtrs[i] == otherPntr)\n                    return;\n            }\n            neighborPtrs[neighborsCnt++] = otherPntr;\n            return;\n        }\n    }\n\n}\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n\n    if (iFrame < 3){\n        C = r24(U + 0.0 );\n        //C = T2(U*0.14);\n        C.zw *= 2.;\n        C.zw -= 1.;\n        C.zw *= particleSpeed;\n    } else {\n        C = T(U);\n        \n        vec4 pPtr = T1(C.xy*R);\n        \n        if (iFrame > startOffs){\n            \n            //C = T( pPtr.xy );\n            \n            vec4 Cold = C;\n            float velScale = 1.;\n\n            findNeighbors( C, vec2(1,0));\n            findNeighbors( C, vec2(-1,0));\n            findNeighbors( C, vec2(0,1));\n            findNeighbors( C, vec2(0,-1));\n            \n            findNeighbors( C, vec2(1,1));\n            findNeighbors( C, vec2(1,-1));\n            findNeighbors( C, vec2(-1,1));\n            findNeighbors( C, vec2(-1,-1));\n            \n\n            \n            for(int i = 0; i < neighborsCnt; i++){\n                //vec2 idx = getIdx(i);\n                //if(idx.x > U.x+0. && idx.x < U.x -0.  ){\n                \n                \n                vec4 otherPtr = neighborPtrs[i];\n                //vec4 other = TF1(otherP.xy*R);\n                vec4 other = T(otherPtr.xy);\n\n                vec2 meToOther = (other.xy - C.xy)*resFact.xy;\n                \n                \n                float distBetween = length(meToOther);\n\n                if( distBetween < particleSz * 2.0 ){\n                    \n                    vec2 vel = C.zw;\n                    vec2 otherVel = other.zw;\n\n                    vec2 normal = normalize(meToOther);\n                    vec2 tangent = vec2(-normal.y,normal.x);\n\n\n                    float meNorm = dot(vel, normal);\n                    float meTan = dot(vel, tangent);\n                    float otherNorm = dot(otherVel, normal);\n                    float otherTan = dot(otherVel, tangent);\n\n                    float massMe = 1.;\n                    float massOther = 1.;\n                    \n                    massMe = pPtr.z*1.;\n                    massOther = otherPtr.z*1.;\n                    \n                    meNorm = ( meNorm * (massMe - massOther) + 2.*massOther*otherNorm ) / (massMe + massOther);\n\n\n                    \n                    if ( false && pPtr.z == otherPtr.z && pPtr.z == 1.){\n                       C.zw = mix(C.zw, otherVel,0.01);\n                      \n                    } else {\n                        C.zw = tangent * meTan + normal*meNorm;\n                    \n                    }\n                    C.xy -= normalize(meToOther)*(abs(distBetween - particleSz*2.));\n                    \n                    //otherNorm = (otherNorm(massOther - massMe) + 2.*massOther*otherNorm ) / (massMe + massOther);\n\n\n                }\n\n\n            }\n\n            if (abs(C.x - 0.5) > 0.49 - particleSz*0.5){\n                C.z *= -1.;\n                if ( sign(C.z) != sign(-C.x + 0.5) )\n                    C.z *= -1.;\n            }\n            if (abs(C.y - 0.5) > 0.49 - particleSz*0.5){\n                C.w *= -1.;\n                if ( sign(C.w) != sign(-C.y + 0.5) )\n                    C.w *= -1.;            \n            }\n\n            \n            //C.zw = mix(C.zw, ( valueNoise(vec3(C.xy*7.,1. + iTime*0.7),1.).xy*2. - 1. )*particleSpeed, 0.002);\n\n            \n            C.xy += C.zw*1.*resFact.yx;\n            \n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define R (iResolution.xy)\n#define T(u) texture(iChannel0,(u)/R)\n#define T1(u) texture(iChannel1,(u)/R)\n#define T2(u) texture(iChannel2,(u)/R)\n#define T3(u) texture(iChannel3,(u)/R)\n#define TF(u)  texelFetch(iChannel0,ivec2(u), 0)\n#define TF1(u) texelFetch(iChannel1,ivec2(u), 0)\n#define TF2(u) texelFetch(iChannel2,ivec2(u), 0)\n#define TF3(u) texelFetch(iChannel3,ivec2(u), 0)\n\n#define pi acos(-1.)\n\n#define startOffs 30\n\n\n#define particleSz 0.0015\n#define particleSpeed 0.0001\n#define resFact vec2(R.x/R.y,1.)\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define getIdx(a) vec2(mod(a,R.x), floor((a+R.x)/R.x)-1.)\n\n\nvec4 r24(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\n\nfloat hash13(vec3 p3){\n    p3 = fract((p3)*0.1031);\n    p3 += dot(p3, p3.yzx  + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n///  2 out, 3 in...\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec2 valueNoise(vec3 uv,float pw){\n    vec3 id = floor(uv);\n    vec3 fd = fract(uv);\n    fd = smoothstep(0.,1., fd);\n    \n    fd = pow(fd,vec3(pw));\n    \n    vec2 ibl = hash23(id + vec3(0,-1,0));\n    vec2 ibr = hash23(id + vec3(1,-1,0));\n    vec2 itl = hash23(id + vec3(0));\n    vec2 itr = hash23(id + vec3(1,0,0));\n    \n    \n    vec2 jbl = hash23(id + vec3(0,-1,1));\n    vec2 jbr = hash23(id + vec3(1,-1,1));\n    vec2 jtl = hash23(id + vec3(0,0, 1));\n    vec2 jtr = hash23(id + vec3(1,0, 1));\n    \n    \n    vec2 ibot = mix(ibl, ibr, fd.x); \n    vec2 iup = mix(itl, itr, fd.x);\n    vec2 jbot = mix(jbl, jbr, fd.x);\n    vec2 jup = mix(jtl, jtr, fd.x);\n    \n    vec2 i = mix(ibot, iup, fd.y);\n    vec2 j = mix(jbot, jup, fd.y);\n    \n    return mix(i, j, fd.z); \n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nfloat steps = 26.;\nfloat stepSz = 1.;\nvoid findMe( inout vec4 pPntr, inout vec4 p, vec2 U, vec2 dir){\n    for(float i = 1.; i < steps; i++){\n        vec4 otherPntr = T1(U + dir*i);\n        vec4 otherP = T(otherPntr.xy);\n        \n        if (length( (U/R - otherP.xy)/resFact.yx ) < length( (U/R - p.xy)/resFact.yx )){\n            p = otherP;\n            pPntr = otherPntr;\n        }\n        \n    }\n\n}\n        \n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n\n    if (iFrame < 3) {\n        //C = r24(U);\n        C.xy = U;\n        C.zw -= C.zw;\n    } else {        \n        C = T1(U);\n        \n        if (iFrame < startOffs){\n            steps = 100.;\n        }\n        \n        \n        vec4 pPntr = C;\n        vec4 p = T(pPntr.xy);\n        findMe(pPntr,p,U,vec2(0,1));\n        findMe(pPntr,p,U,vec2(0,-1));\n        findMe(pPntr,p,U,vec2(1,0));\n        findMe(pPntr,p,U,vec2(-1,0));\n        findMe(pPntr,p,U,vec2(1,1));\n        findMe(pPntr,p,U,vec2(1,-1));\n        findMe(pPntr,p,U,vec2(-1,1));\n        findMe(pPntr,p,U,vec2(-1,-1));\n        \n        C = pPntr;\n        \n        if (iFrame == startOffs-1){\n            C.zw = 1. + floor(r24(C.xy).xy*2.99);\n        }\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}