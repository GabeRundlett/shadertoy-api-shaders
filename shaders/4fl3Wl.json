{
    "Shader": {
        "info": {
            "date": "1703683218",
            "description": "noise driven shape with an ink pen style",
            "flags": 32,
            "hasliked": 0,
            "id": "4fl3Wl",
            "likes": 66,
            "name": "Inkelly",
            "published": 3,
            "tags": [
                "ink"
            ],
            "usePreview": 1,
            "username": "leon",
            "viewed": 890
        },
        "renderpass": [
            {
                "code": "// Inkelly\n// leon denise 2023-12-27\n\n// other variations\n// https://www.shadertoy.com/view/4cs3Rs\n// https://www.shadertoy.com/view/4cX3WS\n\n// render pass\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float d = length(uv-.5);\n    \n    // blue noise\n    vec4 blu = texture(iChannel1, fragCoord/iChannelResolution[1].xy);\n    \n    // background\n    d += blu.x*.2;\n    vec3 color = vec3(1)*smoothstep(2., 0., d);\n    \n    // edge\n    float feather = .02;\n    vec3 ep = vec3(1./iChannelResolution[0].xy,0);\n    #define T(u) smoothstep(0., feather, texture(iChannel0, uv+u).r)\n    float mr = T(.0);\n    float edge = abs(T(ep.xz)-mr)+abs(T(-ep.xz)-mr)+abs(T(ep.zy)-mr)+abs(T(-ep.zy)-mr);\n    color *= vec3(1.-clamp(edge/2., 0., 1.));\n    \n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Inkelly\n// leon denise 2023-12-27\n\n// other variations\n// https://www.shadertoy.com/view/4cs3Rs\n// https://www.shadertoy.com/view/4cX3WS\n\n// feedback displace pass\n\nfloat delay = 4.;\n\n// crazy noise\nfloat gyroid (vec3 seed) { return dot(sin(seed),cos(seed.yzx)); }\nfloat fbm (vec2 pos)\n{\n    float t = floor(iTime/delay);\n    float t2 = t*1.354;\n    vec3 p = vec3(pos, t);\n    float result = 0., a = .5;\n    for (int i = 0; i < 3; ++i, a /= 2.) {\n        result += abs(gyroid(p/a)*a);\n    }\n    result = sin(result*6.283+t2-pos.x);\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    // curl noise\n    vec2 e = vec2(4./iResolution.y,0);\n    vec2 curl = vec2(fbm(p+e.xy)-fbm(p-e.xy), fbm(p+e.yx)-fbm(p-e.yx)) / (2.*e.x);\n    curl = vec2(curl.y, -curl.x);\n    \n    // spawn shape\n    p += curl*.05;\n    float dist = max(abs(p.x)-2.,abs(p.y));\n    //dist = abs(length(p)-.5);\n    float mask = smoothstep(.01, 0., dist);\n    \n    // displace\n    curl *= 0.005;\n    vec4 frame = texture(iChannel0, uv + curl);\n\n    // feedback\n    mask = max(mask, frame.r - iTimeDelta);\n    \n    fragColor = vec4(mask, curl, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}