{
    "Shader": {
        "info": {
            "date": "1719212823",
            "description": "apply easing animation on moving & shaping circles",
            "flags": 0,
            "hasliked": 0,
            "id": "M33SzB",
            "likes": 4,
            "name": "simple easing animation",
            "published": 3,
            "tags": [
                "bounce",
                "easing",
                "tween"
            ],
            "usePreview": 0,
            "username": "liuming",
            "viewed": 96
        },
        "renderpass": [
            {
                "code": "#define num 10\nconst vec3 color1 = vec3(.0, .52, .96);\nconst vec3 color2 = vec3(.0, .82, .67);\nconst vec3 background = vec3(.0, .0, .0);\nfloat strokeWidth = .01;\n\nfloat sdfCircle(in vec2 p, in float r, in vec2 center )\n{\n    return r - length(p - center);\n}\n\nfloat sdfRect(in vec2 p, in vec2 b, in vec2 center )\n{\n    vec2 d = abs(p - center) - b;\n    return -length(max(d, .0)) - min(max(d.x,d.y), .0);\n}\n\nfloat easeInOutCirc(in float x){\n    return x < .5 ? (1. - sqrt(1. - pow(2. * x, 2.))) / 2.: (sqrt(1. - pow(-2. * x + 2., 2.)) + 1.) / 2.;\n}\n\nfloat easeOutBounce(in float x){\n    float n1 = 7.5625;\n    float d1 = 2.75;\n\n    if (x < 1. / d1) {\n        return n1 * x * x;\n    } else if (x < 2. / d1) {\n        return n1 * (x -= 1.5 / d1) * x + .75;\n    } else if (x < 2.5 / d1) {\n        return n1 * (x -= 2.25 / d1) * x + .9375;\n    } else {\n        return n1 * (x -= 2.625 / d1) * x + .984375;\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \n    vec2 uv = 2. * (fragCoord.xy - .5 * iResolution.xy) / min(iResolution.x, iResolution.y); // uv.x,uv.yâˆˆ[-1,1]\n    vec3 col = background;\n    \n    for(int i = 0; i < num; i++){\n        float r = mix(.06, .1, float(i) / float(num));\n        vec3 colorStroke = mix(color1, color2, float(i) / float(num));\n        vec3 colorFill = colorStroke * .5;\n        vec2 center = vec2(-1., 1.) + vec2(r, -r);\n        float time = (iTime + float(i)) * 2. / float(num);\n        vec2 speed = vec2((1. - center.x), (-1. - center.y)) - vec2(r, -r);\n        center += vec2(fract(time * .5), easeOutBounce(fract(time * .5))) * speed;\n\n        float d1 = sdfCircle(uv, r, center);\n        float d2 = sdfRect(uv, vec2(r, r), center);\n        \n        float d = fract(time * .5) < .5 ? mix(d1, d2, fract(time)) : mix(d2, d1, fract(time));\n        float anti = fwidth(d);\n        col = mix(col, colorStroke, smoothstep(-anti, anti, d + strokeWidth));\n        col = mix(col, colorFill, smoothstep(-anti, anti, d));\n    }\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}