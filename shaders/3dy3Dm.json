{
    "Shader": {
        "info": {
            "date": "1570267466",
            "description": "Had to be done quick",
            "flags": 0,
            "hasliked": 0,
            "id": "3dy3Dm",
            "likes": 2,
            "name": "Shadertober 05 Build",
            "published": 3,
            "tags": [
                "raymarching",
                "repetition",
                "inktober"
            ],
            "usePreview": 0,
            "username": "GreenChicken",
            "viewed": 341
        },
        "renderpass": [
            {
                "code": "// SHADERTOBER 05 Build\n// Poulet vert 05/10/2019\n// thanks to iq, leon\n// based on a photo by Nick Frank : https://www.pinterest.fr/pin/412923859554201228/\n\n#define VOLUME 0.001\n#define PI 3.14159\n#define MAXSTEP 64\n\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\n\nfloat uSDF(float s1, float s2) { return min(s1, s2);}\n\nfloat sSDF( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); \n}\n\nfloat sdGround(vec3 p)\n{\n    float t = 0.0;\n    \n    p.x *= 0.5;\n    \n    t = p.y;\n    t += max(sin(p.x*50.)*.01, sin(p.z*50.)*.01);\n    \n    return t;\n}\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\n\nfloat moda(vec2 pos)\n{\n    return atan(pos.x, pos.y);\n}\n\nvec3 opRep( in vec3 p, in vec3 c)\n{\n    return mod(p+0.5*c,c)-0.5*c;\n\n}\n\n// Scene setup\n\nfloat map(vec3 pos)\n{\n    float t = 0.0;\n    \n    t = sdGround(pos);\n    \n    vec3 wpos = opRep(pos, vec3(1.015, 0.405, 10.));\n    float wall = sdBox(wpos, vec3(.5, 0.2, 0.5));\n    \n    vec3 sp = opRep(pos+vec3(0.0, -.5, 0.0), vec3(10.0));\n    float sub = sdBox(sp, vec3(1.0, .25, 1.0));\n    \n    t = uSDF(t, wall);\n    t = sSDF(sub, t);\n    \n    vec3 mPos = pos;\n    mPos.y = iTime;\n    float middle = sdSphere(mPos, 10.0);\n    \n    t = uSDF(t, middle);\n    \n    return t;\n}\n\nfloat CastRay(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    \n    for(int i=0 ; i<MAXSTEP ; i++)\n    {\n        float ray = map(ro + rd * t);\n        \n        if(ray < (0.0001*t))\n        {\n            return t;\n        }\n        \n        t += ray;\n    }\n    \n    return -1.0;\n}\n\nfloat GetShadow (vec3 pos, vec3 at, float k) {\n    vec3 dir = normalize(at - pos);\n    float maxt = length(at - pos);\n    float f = 01.;\n    float t = VOLUME*50.;\n    for (float i = 0.; i <= 10.0; i += .1) {\n        float dist = map(pos + dir * t);\n        if (dist < VOLUME) return 0.;\n        f = min(f, k * dist / t);\n        t += dist;\n        if (t >= maxt) break;\n    }\n    return f;\n}\n\nvec3 GetNormal (vec3 p) \n{ \n    vec2 e = vec2(0.01, 0.0); \n    return normalize(vec3(\n        map(p+e.xyy)-map(p-e.xyy),\n        map(p+e.yxy)-map(p-e.yxy),\n        map(p+e.yyx)-map(p-e.yyx)\n        )); \n}\n\nvec3 Render(vec3 ro, vec3 rd, vec2 uv)\n{\n    float t = CastRay(ro, rd);\n    vec3 pos = vec3(ro + rd * t);\n    \n    vec3 col = vec3(0.0);\n    \n    if(t == -1.0)\n    {\n        \n        col = vec3(.0); \n        \n    }\n    else\n    {\n        vec3 N = GetNormal(pos);\n        vec3 L = vec3(0.0, 5.0, -1.0);\n        float light = dot(N, L);\n        \n        col = vec3(light)*.2;\n    }\n    \n    return col;\n}\n\nvec3 GetViewDir(vec2 uv, vec3 cp, vec3 ct)\n{\n    vec3 forward = normalize(ct - cp);\n    vec3 right = normalize(cross(vec3(0.0, -1.0, 0.0), forward));\n    vec3 up = normalize(cross(right, forward));\n    \n    return normalize(uv.x * right + uv.y * up + 1.0 * forward);\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float time = iTime * 10.;\n    \n    vec3 cp = vec3(0.0, .5, -2.0+time);\n    vec3 ct = vec3(0.0, 0.5, 0.0+time);\n    \n    vec3 vd = GetViewDir(uv, cp, ct);\n    \n    vec2 screenUV = fragCoord.xy / iResolution.xy;\n    \n    vec3 col = Render(cp, vd, screenUV);\n    \n    // compo\n    col -= mix(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0), screenUV.y)*.1;\n    \n    col -= (length(uv)-0.5);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}