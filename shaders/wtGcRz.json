{
    "Shader": {
        "info": {
            "date": "1610324492",
            "description": "I wanted to try and be more artistic and felt inspired after looking at a photo of a japanese shrine. It still needs some work, but I like the way it is coming along. :)",
            "flags": 0,
            "hasliked": 0,
            "id": "wtGcRz",
            "likes": 5,
            "name": "Tori Gate On The Ocean",
            "published": 3,
            "tags": [
                "art",
                "japan",
                "shrine",
                "gate",
                "japanese",
                "tori",
                "shinto"
            ],
            "usePreview": 0,
            "username": "intrakits",
            "viewed": 274
        },
        "renderpass": [
            {
                "code": "mat2 rotate(float r) {\n    float c = cos(r);\n    float s = sin(r);\n    return mat2(c, -s, s, c);\n}\n\nvec3 circle (vec2 uv, float posX, float posY, float r, float blur, vec3 color){\n    uv.x-=posX;\n    uv.y-=posY;\n    \n    float d = length(uv);\n    return color * vec3(smoothstep(r,r-blur,d));\n}\nvec3 circle (vec2 uv, float r, float blur, vec3 color){\n    float d = length(uv);\n    return color * vec3(smoothstep(r,r-blur,d));\n}\nvec3 square(vec2 uv, float w, float h, float posX, float posY, float rot, float blur, vec3 color){\n    uv*=rotate(rot);\n    float wPos = length(uv.x-posX);\n    float hPos = length(uv.y-posY);\n    \n    float col = smoothstep(w,w-blur, wPos);\n    col *= smoothstep(h,h-blur, hPos);\n    return color*vec3(col);\n}\nvec3 triangle(vec2 uv, float w, float h, float posX, float posY, float rot, float blur, vec3 color){\n    uv.x-=posX;\n    uv.y-=posY;\n    uv*=rotate(rot);\n    vec3 sq = square(uv,w,h,0.,0.,0.,blur,color);\n    uv*=rotate(3.1415/2./2.);\n    uv-= vec2(0.,h);\n    float hyp = sqrt(w*w + h*h);\n    vec3 sqMask = square(uv,hyp,h,0.,0., 0.,blur,color);\n    sq -= sqMask;\n    return sq;\n}\nvec3 ellipse(vec2 uv, float posX, float posY, float rot, float a,float b, float blur, vec3 color){\n    uv -= vec2(posX,posY);\n    uv*=rotate(rot);\n    float x = uv.x;\n    float y = sqrt((1.-a)*(1.-((x*x)/(1.-b))));\n    float d = length(uv);\n    return color * vec3(smoothstep(y,y-blur,d));\n}\nvec3 wave (vec2 uv, float xPos, float yPos, float blur, float vertSpeed, float horSpeed){\n    float movX = sin(iTime*vertSpeed)*.04;\n    float movY = cos(iTime*horSpeed)*.04;\n    uv -= vec2(xPos,yPos);\n    vec3 wave = circle (uv - vec2(movX,movY),.2,blur, vec3(1.));\n    wave = min(wave, wave-circle (uv - vec2(0.12 + movX,.05 + movY), 0.2, blur, vec3(1.)));\n    wave = min(wave, wave-circle (uv - vec2(-0.12+ movX,.05+ movY), 0.2, blur, vec3(1.)));\n    wave = min(wave, wave-circle (uv - vec2(0.+ movX,-.34+ movY), 0.2, blur, vec3(1.)));\n    return wave;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    uv-= 0.5;\n    \n    uv.x *= iResolution.x/iResolution.y;\n\n    \n    //background\n    float blur = 0.01;\n    //sky\n    vec3 col = vec3(uv.y+.3) * vec3(1,.2,.4);\n    \n    //ocean\n    col = max(col, vec3(-uv.y) * vec3(.5,.4,.8));\n    //waves\n    \n    float movX = sin(iTime)*.04;\n    float movY = cos(iTime*2.)*.04;\n    \n    vec3 w = wave(uv,0.4,-0.2,blur, 1., 2.);\n    w = max(w, wave(uv,-.4,-0.2,blur, 1., 4.));\n    w = max(w, wave(uv,-.2,-0.3,blur, 1.3, 2.));\n    w = max(w, wave(uv,.3,-0.3,blur, 1.6, 2.3));\n    col = max(col, w);\n    \n    //water lines\n    vec3 waterLine = square(uv, .7, .005, -.9+movX, -0.4, 0., blur, vec3(1.));\n    waterLine = max(waterLine, square(uv, .9, .005,.9+movX*.5, -0.39, 0., blur, vec3(1.)));\n    waterLine = max(waterLine, square(uv, .8, .005,-.9+movX*.7, -0.38, 0., blur, vec3(1.)));\n    waterLine = max(waterLine, square(uv, .777, .005,.9+movX*.9, -0.37, 0., blur, vec3(1.)));\n    waterLine = max(waterLine, square(uv, .8, .005,-.9+movX*.2, -0.36, 0., blur, vec3(1.)));\n    waterLine = max(waterLine, square(uv, .82, .005,.9+movX*1.2, -0.35, 0., blur, vec3(1.)));\n    waterLine = max(waterLine, square(uv, .76, .005,-.9+movX*.7, -0.34, 0., blur, vec3(1.)));\n    waterLine = max(waterLine, square(uv, .9, .005,.9+movX*.9, -0.33, 0., blur, vec3(1.)));\n    waterLine = max(waterLine, square(uv, .9, .005,-.9+movX*.2, -0.32, 0., blur, vec3(1.)));\n    waterLine = max(waterLine, square(uv, .8, .005,.9+movX*1.2, -0.31, 0., blur, vec3(1.)));\n    col = max(col, waterLine);\n    //ground\n    vec3 groundM = ellipse(uv, 0., -0.26, 3.1415/2., .9,.996, blur, vec3(1.));\n    groundM = max(groundM, square(uv, .1, .2, -0.2, -0.33, -1., blur, vec3(1.)) - square(uv, .2, .3, 0., 0., 0., blur, vec3(1.)) );\n    groundM = max(groundM, square(uv, .45, .136, 0.7,-.5, 0., blur, vec3(1.)));\n    col-= groundM;\n    vec3 ground = ellipse(uv, 0., -0.26, 3.1415/2., .9,.996, blur, vec3(.5));\n    ground = max(ground, square(uv, .1, .2, -0.2, -0.33, -1., blur, vec3(.5))- square(uv, .2, .3, 0., 0., 0., blur, vec3(1.)));\n    ground = max(ground, square(uv, .45, .136, 0.7,-.5, 0., blur, vec3(.5)));\n    col = max(col,ground);\n    //tori gate\n    ///mask----------------------\n    //legs\n    vec3 toriM = square(uv, .03, .25, -0.2, 0., 0.02, blur, vec3(1.));\n    toriM = max(toriM,square(uv, .03, .25, 0.2, 0., -0.02, blur, vec3(1.)));\n    \n    //horizontal beams\n    toriM = max(toriM,square(uv, .37, .03, 0., 0.15, 0., blur, vec3(1.)));\n    toriM = max(toriM,square(uv, .37, .022, 0., 0.25, 0., blur, vec3(1.)));\n    \n    //lower horizontal mask\n    toriM = min(toriM,toriM-square(uv, .05, .02, -0.34, 0.076, 0.13, blur, vec3(1.)));\n    toriM = min(toriM,toriM-square(uv, .05, .02, -0.3, 0.22, -0.13, blur, vec3(1.)));\n    \n    toriM = min(toriM,toriM-square(uv, .05, .02, 0.34, 0.076, -0.13, blur, vec3(1.)));\n    toriM = min(toriM,toriM-square(uv, .05, .02, 0.3, 0.22, 0.13, blur, vec3(1.)));\n    \n    //central beam\n    toriM = max(toriM,square(uv, .03, .04, 0., 0.2, -0.02, blur, vec3(1.,0,0)));\n    \n    \n    //top beam\n    toriM = max(toriM,square(uv, .37, .022, 0., .278, 0., blur, vec3(1,.6,.4)));\n    toriM = max(toriM,circle (uv-vec2(-.36,.305), .05, blur, vec3(1,.6,.4)));\n    toriM = max(toriM,circle (uv-vec2(.36,.305), .05, blur, vec3(1,.6,.4)));\n    \n    toriM = min(toriM,toriM-circle (uv-vec2(-.33,.338), .05, blur, vec3(1,.6,.4)));\n    toriM = min(toriM,toriM-circle (uv-vec2(.33,.338), .05, blur, vec3(1,.6,.4)));\n    \n    // embelleshments\n    toriM = max(toriM,square(uv, .034, .022, -0.198, .11, 0., blur, vec3(1,.6,.4)));\n    toriM = max(toriM,square(uv, .034, .022, -0.198, .22, 0., blur, vec3(1,.6,.4)));\n    toriM = max(toriM,square(uv, .034, .022, 0.198, .11, 0., blur, vec3(1,.6,.4)));\n    toriM = max(toriM,square(uv, .034, .022, 0.198, .22, 0., blur, vec3(1,.6,.4)));\n    col -= toriM;\n    \n    //-------------------------\n    //legs\n    vec3 tori = square(uv, .03, .25, -0.2, 0., 0.02, blur, vec3(1.,0,0));\n    tori = max(tori,square(uv, .03, .25, 0.2, 0., -0.02, blur, vec3(1.,0,0)));\n    \n    //horizontal beams\n    tori = max(tori,square(uv, .37, .03, 0., 0.15, 0., blur, vec3(1.,0,0)));\n    tori = max(tori,square(uv, .37, .022, 0., 0.25, 0., blur, vec3(1.,0,0)));\n    \n    //lower horizontal mask\n    tori = min(tori,tori-square(uv, .05, .02, -0.34, 0.076, 0.13, blur, vec3(1.)));\n    tori = min(tori,tori-square(uv, .05, .02, -0.3, 0.22, -0.13, blur, vec3(1.)));\n    \n    tori = min(tori,tori-square(uv, .05, .02, 0.34, 0.076, -0.13, blur, vec3(1.)));\n    tori = min(tori,tori-square(uv, .05, .02, 0.3, 0.22, 0.13, blur, vec3(1.)));\n    \n    //central beam\n    tori = max(tori,square(uv, .03, .04, 0., 0.2, -0.02, blur, vec3(1.,0,0)));\n    \n    \n    //top beam\n    tori = max(tori,square(uv, .37, .022, 0., .278, 0., blur, vec3(1,.6,.4)));\n    tori = max(tori,circle (uv-vec2(-.36,.305), .05, blur, vec3(1,.6,.4)));\n    tori = max(tori,circle (uv-vec2(.36,.305), .05, blur, vec3(1,.6,.4)));\n    \n    tori = min(tori,tori-circle (uv-vec2(-.33,.338), .05, blur, vec3(1,.6,.4)));\n    tori = min(tori,tori-circle (uv-vec2(.33,.338), .05, blur, vec3(1,.6,.4)));\n    \n    // embelleshments\n    tori = max(tori,square(uv, .034, .022, -0.198, .11, 0., blur, vec3(1,.6,.4)));\n    tori = max(tori,square(uv, .034, .022, -0.198, .22, 0., blur, vec3(1,.6,.4)));\n    tori = max(tori,square(uv, .034, .022, 0.198, .11, 0., blur, vec3(1,.6,.4)));\n    tori = max(tori,square(uv, .034, .022, 0.198, .22, 0., blur, vec3(1,.6,.4)));\n    tori = max(square(uv, .034, .04, -0.205, -.21, 0., blur, vec3(.5)),tori-square(uv, .034, .04, -0.205, -.21, 0., blur, vec3(.5)));\n    tori = max(square(uv, .034, .04, 0.205, -.21, 0., blur, vec3(.5)),tori-square(uv, .034, .04, 0.205, -.21, 0., blur, vec3(.5)));\n    col = max(col,tori);\n    \n    //sun\n    vec3 sun = circle (uv-vec2(.0,.405), .04, blur, vec3(1));\n    sun = max(sun, circle (uv-vec2(.0,.405), .06, blur, vec3(1,.5,.5)));\n    col = max(col, sun);\n    // Output to screen\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}