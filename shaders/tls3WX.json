{
    "Shader": {
        "info": {
            "date": "1557940633",
            "description": "working towards an understanding of heightmaps.\ncurrently just equating Altitude Above Surface with Distance To It, with expected artifacts.",
            "flags": 0,
            "hasliked": 0,
            "id": "tls3WX",
            "likes": 11,
            "name": "in the soup",
            "published": 3,
            "tags": [
                "mandelbrot",
                "heightmap",
                "grimoire"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 526
        },
        "renderpass": [
            {
                "code": "// common stuff\nconst vec3  fv3_1   = vec3(1.0, 1.0, 1.0);\nconst vec3  fv3_0   = vec3(0.0, 0.0, 0.0);\nconst vec3  fv3_x   = vec3(1.0, 0.0, 0.0);\nconst vec3  fv3_y   = vec3(0.0, 1.0, 0.0);\nconst vec3  fv3_z   = vec3(0.0, 0.0, 1.0);\nconst vec2  fv2_1   = vec2(1.0, 1.0);\nconst vec2  fv2_0   = vec2(0.0, 0.0);\nconst vec2  fv2_x   = vec2(1.0, 0.0);\nconst vec2  fv2_y   = vec2(0.0, 1.0);\nconst float PI      = 3.14159265359;\nconst float TAU     = PI * 2.0;\n\n// less common\nconst float rmMaxSteps = 100.0;\nconst float rmMaxDist  = 180.0;\nconst float rmEpsilon  =   0.001;\nconst float grEpsilon  =   0.001;\n#define SMOOTH_MANDEL 1\n\nvec2 complexMul(in vec2 A, in vec2 B) {\n  return vec2((A.x * B.x) - (A.y * B.y), (A.x * B.y) + (A.y * B.x));\n}\n\nstruct POI {\n  vec2  center;\n  float range;\n  float maxIter;\n};\nvec4 poiToVec4(in POI poi) {return vec4(poi.center, poi.range, poi.maxIter);}\nPOI vec4ToPOI(in vec4 v) {return POI(v.xy, v.z, v.w);}\n\n\nfloat mandelEscapeIters(in vec2 C, in float maxIters) {\n  vec2 Z = C;\n  for (float n = 0.0; n < maxIters; n += 1.0) {\n    Z  = complexMul(Z, Z) + C;\n    if (dot(Z, Z) > 4.0) {\n      return n;\n    }\n  }\n  return maxIters;\n}\n\n// adapted from IQ\n// https://iquilezles.org/articles/distancefractals\nfloat mandelDist(in vec2 c, float numIters)\n{\n  vec2  z = vec2(0.0, 0.0);\n  vec2 dz = vec2(0.0, 0.0);\n  \n  float m2;\n  for (float n = 0.0; n < numIters; ++n) {\n    dz = 2.0 * complexMul(z, dz) + fv2_x;\n    z  = complexMul(z, z) + c;\n\n    m2 = dot(z, z);\n    if (m2 > 1.0e10) {\n      break;\n    }\n  }\n  \n  // distance estimation: G/|G'|\n  return sqrt(m2 / dot(dz, dz)) * 0.5 * log(m2);\n}\n\n// based on https://www.shadertoy.com/view/Wtf3Df\nvec3 getRayDirection(in vec3 ro, in vec3 lookAt, in vec2 uv, float zoom) {\n  vec3 ol       = normalize(lookAt - ro);\n  vec3 screenRt = cross(ol      , fv3_y); // world Up\n  vec3 screenUp = cross(screenRt, ol   );\n  vec3 rd       = normalize(uv.x * screenRt + uv.y * screenUp + ol * zoom);\n  return rd;\n}\n\nmat2 rot2(float t) {\n  float s = sin(t);\n  float c = cos(t);\n  return mat2(s, c, -c, s);\n}\n\nfloat sdfCircle2D(in vec2 p, in vec2 c, float r) {\n  return length(p - c) - r;\n}\n\nfloat sdf(in vec3 p, out float bright) {\n  float mi = 20.0;\n  vec2 mp = p.xz;\n  mp.x += 0.35;\n  mp *= rot2(iTime * -0.2);\n  mp *= 0.05;\n  mp.x -= 0.25;  \n  bright = 1.0;\n  #if SMOOTH_MANDEL\n  float iters        = mandelDist(mp, mi);\n  bright = smoothstep(-0.001, 0.001, iters);\n  iters = max(0.0, iters);\n  iters = 1.0 / (iters + 0.1);\n  float mandelHeight = 0.4 * mi;\n  #else\n  float iters        = mandelEscapeIters(mp, mi);\n  float mandelHeight =  2.0;\n  #endif\n\n  // altitude above plane\n  float dist = p.y;\n\n  // some waves\n  dist += sin(p.x * 0.1 + iTime) * 2.0;\n\n  // the mandelbrot set\n  dist -= iters/mi * mandelHeight;\n\n  /*\n  // some pillars\n  const float pillarDist = 60.0;\n  const float pillarRad  = 10.0;\n  dist = min(dist, sdfCircle2D(p.xz, pillarDist * vec2(-1.0, -1.0), pillarRad));\n  dist = min(dist, sdfCircle2D(p.xz, pillarDist * vec2(-1.0,  1.0), pillarRad));\n  dist = min(dist, sdfCircle2D(p.xz, pillarDist * vec2( 1.0,  1.0), pillarRad));\n  dist = min(dist, sdfCircle2D(p.xz, pillarDist * vec2( 1.0, -1.0), pillarRad));\n  */\n\n  return dist;\n}\n\n// from http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions\nvec3 estimateNormal(vec3 p) {\n  const float e = grEpsilon;\n  float unused;\n  return normalize(vec3(\n    sdf(vec3(p.x + e, p.y    , p.z     ), unused) - sdf(vec3(p.x - e, p.y    , p.z    ), unused),\n    sdf(vec3(p.x    , p.y + e, p.z     ), unused) - sdf(vec3(p.x    , p.y - e, p.z    ), unused),\n    sdf(vec3(p.x    , p.y    , p.z  + e), unused) - sdf(vec3(p.x    , p.y    , p.z - e), unused)\n  ));\n}\n\n\nvec3 march(in vec3 p, in vec3 rd, out float numSteps, out float bright) {\n  float distTotal = 0.0;\n  for (numSteps = 0.0; numSteps < rmMaxSteps; ++numSteps) {\n    float d = sdf(p, bright);\n    if ((d < rmEpsilon) || (distTotal > rmMaxDist)) {\n      return p;\n    }\n    p += rd * d * 0.5;\n    distTotal += d;\n  }\n  return p;\n}\n\nvoid mainImage(out vec4 RGBA, in vec2 XY)\n{\n  RGBA.a   = 1.0;\n\n  float smallWay = min(iResolution.x, iResolution.y);\n  vec2  uv = (XY * 2.0 - fv2_1 * iResolution.xy)/smallWay;\n  float t  = iTime * TAU * 0.01;\n  vec3  ro = vec3( vec2(cos(t), sin(t)) * 40.0, 10.0).xzy;\n  vec3  la = vec3( 0.0, 0.0,  0.0);\n  const float zoom = 3.2;\n  vec3  rd = getRayDirection(ro, la, uv, zoom);\n\n  float numSteps;\n  float sdfBright;\n  vec3 surf = march(ro, rd, numSteps, sdfBright);\n  float dist = length(ro - surf);\n\n  const float checkSize = 20.0;\n  // float bright = float((mod(surf.x, checkSize * 2.0) > checkSize) ^^ (mod(surf.z, checkSize * 2.0) > checkSize));\n  float bright = 1.0;\n  bright = bright * 0.05 + 0.95;\n // bright = 0.95;\n\n  // shading\n  bright *= max(0.3, dot(fv3_x, estimateNormal(surf)));\n\n  vec3 rgb = vec3(bright);\n\n  rgb.rg *= sdfBright * 0.7 + 0.3;\n  rgb.b  *= sdfBright * 0.3 + 0.7;\n\n\n  // fog\n  rgb *= 1.0 + surf.y * 0.2 - 0.5;\n  rgb = mix(rgb, vec3(0.5), clamp(dist/rmMaxDist - 0.1, 0.0, 1.0));\n\n  // gamma\n  rgb = pow(rgb, vec3(0.4545));\n  \n  // ray steps\n  // RGBA.r += numSteps / rmMaxSteps;\n\n  RGBA.rgb = rgb;\n\n}\n\n\n// grimoire bindings\n// out vec4 fragColor; void main() { mainImage(fragColor, gl_FragCoord.xy); }\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}