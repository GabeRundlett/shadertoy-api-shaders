{
    "Shader": {
        "info": {
            "date": "1486239473",
            "description": "Some loop practice",
            "flags": 0,
            "hasliked": 0,
            "id": "XlKXDc",
            "likes": 6,
            "name": "Hall for the gifted",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "lherm",
            "viewed": 628
        },
        "renderpass": [
            {
                "code": "#define T iTime\n#define PI 3.1415926\nvoid r(inout vec2 p, in float a) {p = cos(a)*p + sin(a)*vec2(p.y, -p.x);}\nfloat sb(in vec3 p, in vec3 b) {vec3 d = abs(p) - b; return min(max(d.x,max(d.y,d.z)), 0.) + length(max(d, 0.));}\nfloat sp(in vec3 p, in vec4 n) {return dot(p,n.xyz) + n.w;}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat map(in vec3 p)\n{\n    p.y += sin(p.z*.5 + T);\n    p.x += 2.;\n    vec3 c = p*.5;\n    p = mod(p-2., 4.)-2.;\n    p = abs(p);\n    float s = .3;\n    float d = sb(p, vec3(s, p.y, s));\n    d = smin(d, sp(c+vec3(0., .5, 0.), vec4(0., 1., 0., 1.)), .2);\n    d = smin(d, length(cos(p)) - .1, .4);\n    for (int i = 0; i < 3; i++)\n    {\n        p.y -= 1.;\n        r(p.xy, PI / 2. + T * float(i));\n        r(p.yz, PI / 2. - T * float(i));\n        r(p.zx, PI / 4. * c.y + T);\n        d = smin(d, sb(p, vec3(s, p.y, s)), .5);\n        s *= .75;\n    }\n    return d;\n}\n\n// lj's raymarch from Revision\nfloat df(in vec3 ro, in vec3 rd)\n{\n    float d = 0.;\n    float ii;\n    for (int i = 0; i < 100; i++)\n    {\n        ii = float(i);\n        float m = map(ro + rd * d);\n        d += m*.9;\n        if (abs(m) < 0.02) break;\n        if (d > 40.) break;\n    }\n    return 1.-ii/30.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy)*2.-1.;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 ro = vec3(uv, -T), rd = normalize(vec3(uv, -1.)), p, n, col;\n    float m = df(ro, rd);\n    p = ro + rd * m;\n    col = vec3(m);\n    col = abs(sin(col + vec3(.92424, .122, .5245) + T))+clamp(tan(1.+ T*.5)*.5, .1, .2);\n\tfragColor = vec4(col,1.0);\n    fragColor = 1.-fragColor;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}