{
    "Shader": {
        "info": {
            "date": "1670261910",
            "description": "2d noise warping on a plain in the middle of nowhere. ",
            "flags": 40,
            "hasliked": 0,
            "id": "ddjSW1",
            "likes": 10,
            "name": "Warping stuff (sound)",
            "published": 3,
            "tags": [
                "2d",
                "3d",
                "noise",
                "reflection",
                "sound",
                "music",
                "warping",
                "art"
            ],
            "usePreview": 0,
            "username": "me_123",
            "viewed": 391
        },
        "renderpass": [
            {
                "code": "const bool flatt = false;\nconst int msaa = 5;\nfloat plane(in vec3 ro, in vec3 rd, in vec2 s, in int ax) {\n    float d = -ro[ax]/rd[ax];\n    if (d < 0.0) return 1000.;\n    vec3 p = ro+rd*d;\n    if (p[(ax+2)%3] > s.x || p[(ax+2)%3] < -s.x || p[(ax+1)%3] > s.y || p[(ax+1)%3] < -s.y) return 1000.;\n    return d;\n}\nfloat hash(vec3 p)\n{\n\tvec3 p3 = fract(p * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract(p3.xy*p3.z+p3.z*p3.z*10.).x;\n}\nvec2 hash2(vec3 p)\n{\n\tvec3 p3 = fract(p * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract(p3.xy*p3.z+p3.z*p3.z*10.).xy;\n}\nfloat noise(in vec3 p) {\n    vec3 f = fract(p);\n    f = f*f*(3.-2.*f);\n    vec3 ff = floor(p);\n    return mix(mix(mix(hash(ff), hash(ff+vec3(1, 0, 0)), f.x),\n               mix(hash(ff+vec3(0, 1, 0)), hash(ff+vec3(1, 1, 0)), f.x), f.y),\n               mix(mix(hash(ff+vec3(0, 0, 1)), hash(ff+vec3(1, 0, 1)), f.x),\n               mix(hash(ff+vec3(0, 1, 1)), hash(ff+vec3(1, 1, 1)), f.x), f.y), f.z);\n}\nfloat fn(in vec3 p) {\n    return (noise(p*0.5)+noise(p)*0.5+noise(p*2.0)*0.25)*2.0;\n}\nvec3 getColor(in vec3 ro, in vec3 rd) {\n    float r = iResolution.x/iResolution.y;\n    float d = plane(ro, rd, vec2(r, 1.0), 1);\n    float k = -(ro.z+1.0)/rd.z;\n    if (k < 0.0) k = 1000.;\n    d = min(d, k);\n    vec3 p = ro+rd*d;\n    if (d > 100.) return vec3(0.01/(rd.z+0.01)*vec3(1.0, 0.5, 0.3));\n    if (p.z > -0.9999) {\n        vec3 t = texture(iChannel0, (p.xz/vec2(r, 1)+1.0)*0.5).xyz;\n        return vec3(t);\n    }\n    else if (p.z < -0.0) {\n        vec3 roo = p;\n        vec3 pp = vec3(p.xy*20., iTime*2.0);\n        float h = fn(pp);\n        vec3 n = normalize(vec3((h-fn(pp-vec3(0.01, 0, 0)))*100., (h-fn(pp-vec3(0, 0.01, 0)))*100., 10.0));\n        vec3 rdd = reflect(rd,n);\n        d = plane(roo, rdd, vec2(r, 1.0), 1);\n        if (d >100.) return vec3(0.01/((rdd.z)+0.001)*vec3(1.0, 0.5, 0.3));\n        vec3 p = roo+rdd*d;\n        if (p.y > -0.000001) return 0.5*vec3(texture(iChannel0, (p.xz/vec2(r, 1)+1.0)*0.5).xyz);\n        return vec3(roo+rdd*d);\n    }\n    return vec3(sin(ro+rd*d*100.));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    if (flatt) {\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord.xy), 0);\n    }\n    else {\n        for (int i = 0; i < msaa; i += 1) {\n            vec2 uv = ((fragCoord.xy+(hash2(vec3(fragCoord.xy*0.1, i+iFrame*msaa))-0.5))/iResolution.xy)-0.5;\n            uv *= vec2((iResolution.x/iResolution.y)*2.0, 2.0);\n            vec3 ro = mix(vec3(0, -2.0, 0), vec3(sin(iTime*0.5)*0.05, -0.5, -(sin(iTime)*0.5)*0.0625)*5.0, clamp(iTime*0.1-0.5, 0.0, 1.0));\n            vec3 rd = normalize(vec3(uv.x, 2.0, uv.y));\n            fragColor += vec4(clamp(getColor(ro, rd), 0.0, 1.0), 0);\n        }\n        fragColor /= float(msaa);\n    }\n    fragColor.xyz = 1.-exp(-fragColor.xyz*3.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 hash33(vec3 p3)\n{ //by Dave_Hoskins https://www.shadertoy.com/view/4djSRW\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\nvec2 hash(vec2 p)\n{\n\tvec3 p3 = fract(p.xyy * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract(p3.xy*p3.z);//fract((p3.xxy + p3.yxx)*p3.zyx);\n}\nvec2 noise(in vec2 p) {\n    vec2 f = fract(p);\n    vec2 ff = floor(p);\n    return mix(mix(hash(ff), hash(ff+vec2(1, 0)), f.x), mix(hash(ff+vec2(0, 1)), hash(ff+vec2(1, 1)), f.x), f.y);\n}\nconst float PI = 3.14159265359*4.0;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = float(iFrame)*0.02;\n    vec2 uv = (fragCoord.xy/iResolution.xy)-0.5;\n    float r = 0.02;//(length(uv)*10.)*0.02;//0.025*sin(t*2.0);\n    uv *= mat2(cos(r), -sin(r), sin(r), cos(r));\n    uv += 0.01*(noise(uv*20.+t*5.0)-0.5);\n    uv *= 1.0-(0.1-0.1*length(uv))*0.5;\n    fragColor = texture(iChannel0, uv+0.5+(0.5-hash33(vec3(fragCoord.xy, t)).xy)*0.002)+vec4(0, 0, 0, 1);//vec4(0.0,0.0,1.0,1.0);\n    vec3 h = hash33(vec3(fragCoord.xy, t));\n    if (fract((t/PI)+1.0) < 0.1) {\n        fragColor.xyz *= 0.99;//1.-exp(-h*5.);\n        if (length(uv) < (0.05-fract((t/PI)+1.0)) || iFrame == 0) {\n            fragColor.xyz += 0.4*hash33(vec3(t+10.));\n        }\n    }\n    if (h.x < 0.005) {\n        fragColor = vec4(pow(hash33(vec3(fragCoord.xy, t+100.0))*2.0, vec3(6.)), 0)*0.1;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 old = texelFetch(iChannel1, ivec2(fragCoord.xy), 0).xyz;\n    vec2 uv = (fragCoord.xy/iResolution.xy)-0.5;\n    vec4 t = texture(iChannel0, uv+0.5);\n    float f = pow(cos(iTime*0.5)*0.5+0.5, 10.)*0.25+0.5;\n    fragColor.xyz = old*f+(1.-f)*(1.-exp(-(10.*mix(1.-exp(-0.05/pow(t.xyz, vec3(8.0))), vec3(0), 1.-min(iTime*0.5, 1.0)))));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float hash(float p)\n{\n\tvec3 p3 = fract(p * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract(fract(fract(p3.x)*100.*p3.y)*1000.*p3.z+dot(fract(p3), fract(p3.xzy)));//fract((p3.xxy + p3.yxx)*p3.zyx);\n}\nfloat noise(float p) {\n    float f = fract(p);\n    f = f*f*(3.-2.*f);\n    return mix(hash(floor(p)*0.001), hash(0.001*floor(p+1.)), f);\n}\nvec2 h(in float time) {\n    float t = time*iSampleRate;\n    float k = mod(floor(time*0.5), 3.0);\n    float fa = t*0.01*floor(1.0+log2(fract(time-1.0)*(64.0+64.*mod(floor(time*(k+1.0)+0.125*k), 2.0))+1.0));\n    float a = 1.5*cos(t*0.01)*(sin(fa*0.5));\n    float p = sin(t*0.1*(k+1.0))*pow(fract(time*0.25)*0.9+fract(time+0.1)*0.1, 5.0)+a*1.3;\n    float p1 = mix(0.1, 0.0, 0.5*(sin(time*0.5)+1.0))*sin(time*iSampleRate*(0.2-0.02*mod(floor(10.*fract((time)*0.2)), 3.0)));\n    float z = (1./(noise(t)+0.5)*0.4)*exp(-fract(time)*20.)+abs(fract(t*0.002)-0.5)*2.0-0.5+noise(t*(0.02+0.01*mod(floor(time*8.0), 3.0)))*exp(-fract(time))+noise(t*(0.03+0.01*mod(floor(time*4.0), 3.0)))*exp(-fract(time));\n    if (time < 4.0) return vec2(z);\n    return vec2(mix(z, p, mix(0.25, 0.6, sin(time*0.5)*0.5+0.5))+p1*0.25);\n\n}\nvec2 mainSound( int samp, float time ) {\n    return h(time);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}