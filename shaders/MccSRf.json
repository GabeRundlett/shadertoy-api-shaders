{
    "Shader": {
        "info": {
            "date": "1714240979",
            "description": " ",
            "flags": 0,
            "hasliked": 0,
            "id": "MccSRf",
            "likes": 4,
            "name": "isosurface fractal raymarching",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "raymarching",
                "fractal",
                "raycasting",
                "isosurface"
            ],
            "usePreview": 0,
            "username": "the0neboy",
            "viewed": 187
        },
        "renderpass": [
            {
                "code": "#define orthographic 0\n#define iterations 15\n\nvec2 mandelbrot(vec3 z, float n) {\n    vec3 c = z;\n    float t = 1e20;\n    float d = 0.0;\n    \n    for (int i = 0; i<iterations; i++) {\n        d += z.x*z.x+z.y*z.y+z.z*z.z;\n        if (z.x*z.x+z.y*z.y+z.z*z.z > 150.0) {\n            return vec2(sqrt(d/float(i+1)),t);\n        }\n        \n        \n        \n        z = cPow(z,n)+c;\n        \n        t = min(length(z),t);\n    }\n    return vec2(-1.0,t);\n}\nvec2 fractal(vec3 z, float n) {\n    vec3 c = z;\n    float t = 1e20;\n    float d = 0.0;\n    \n    for (int i = 0; i<iterations; i++) {\n        d += z.x*z.x+z.y*z.y+z.z*z.z;\n        if (z.x*z.x+z.y*z.y+z.z*z.z > 150.0) {\n            return vec2(sqrt(d/float(i+1)),t);\n        }\n        \n        \n        \n        z = cPow(z,n)+c;\n        \n        t = min(length(z),t);\n    }\n    return vec2(-1.0,t);\n}\n\nvec4 func(float x, float y, float z) {\n    vec2 info = fractal(vec3(x,y,z),2.0);\n\n    float iso = info.x;\n    float t = info.y;\n    \n    vec3 col = vec3(sin(t*3.7+1.4),cos(t*2.3+0.6),sin(t*2.5+1.3));\n    col *= col;\n    \n    return vec4(col,iso);\n}\n\n// RENDERING --------------------------------------------------------------------------\nvec4 f(vec3 x) {\n    return func(x.x, x.y, x.z);\n}\nvec3 grad( vec3 x )\n{\n    vec2 h = vec2( 0.00001, 0.0 );\n    return vec3( f(x+h.xyy).w - f(x-h.xyy).w,\n                 f(x+h.yxy).w - f(x-h.yxy).w,\n                 f(x+h.yyx).w - f(x-h.yyx).w )/(2.0*h.x);\n}\nfloat de(vec3 x) {\n    return f(x).w/length(grad(x));\n}\n\nmat2 rot2d(float x) {\n    return mat2(\n        cos(x), -sin(x),\n        sin(x), cos(x)\n    );\n}\nvoid rot3d(inout vec3 rd, float x, float y) {\n    rd.yz *= rot2d(x);\n    rd.xz *= rot2d(y);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    vec2 m = (iMouse.xy-iResolution.xy*.5)/iResolution.y;\n    \n    vec3 ro = vec3(0,0,-3);\n    rot3d(ro, -m.y*3.0, m.x*1.777*3.0);\n    \n    vec3 rd = -normalize(ro);\n    \n    vec3 leftDir = normalize(cross(rd, vec3(0,1,0)));\n    vec3 upDir = cross(leftDir,rd);\n    if (orthographic == 0) {\n        const float focalLen = 1.0;\n\n        rd = normalize(rd + leftDir*uv.x + upDir*uv.y);\n    } else {\n        const float orthoZoom = 5.0;\n        ro = ro + leftDir*uv.x*orthoZoom + upDir*uv.y*orthoZoom;\n    }\n    vec3 col = vec3(1);\n    \n    float t = 0.0;\n    for (int i=0; i<1000; i++) {\n        float dist = de(ro+rd*t);\n        if (dist < 0.0001) {\n            col = f(ro+rd*t).rgb;\n            col *= vec3(exp(-t*.2));\n            break;\n        }\n        if (t > 1000.0) {\n            break;\n        }\n        t += dist;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 cPow(vec3 z, float n) {\n    float r = length(z);\n    float phi = atan(z.y,z.x);\n    float theta = atan(length(z.xy),z.z);\n\n    z = pow(r,n) * vec3(sin(n*theta)*cos(n*phi),sin(n*theta)*sin(n*phi),cos(n*theta));\n\n    return z;\n}\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}