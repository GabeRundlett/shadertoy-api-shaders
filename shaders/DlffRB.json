{
    "Shader": {
        "info": {
            "date": "1693076857",
            "description": "Helps me visualize various surfaces",
            "flags": 48,
            "hasliked": 0,
            "id": "DlffRB",
            "likes": 7,
            "name": "3D Graphing (kinda)",
            "published": 3,
            "tags": [
                "math",
                "surface",
                "minimal",
                "schwarzminimalsurface",
                "schwarz",
                "minimalsurface",
                "mathmod",
                "schwarzsurface"
            ],
            "usePreview": 0,
            "username": "DarkReaper231",
            "viewed": 108
        },
        "renderpass": [
            {
                "code": "// Credits: genis sole, Hyeve, glk7\n// License Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n\n// Used code: https://www.shadertoy.com/view/4lVXRm\n\n#define STEPS 512\n#define MAXDIST 128.\n#define SURFDIST 0.001\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define load(P) texelFetch(iChannel1, ivec2(P), 0)\n\nconst float PI = 3.141592;\nconst ivec2 POSITION = ivec2(1, 0);\nconst ivec2 VMOUSE = ivec2(1, 1);\n\nfloat scene(vec3 pos) {\n    // Place your plots here\n    float dist = sin(pos.x) * cos(pos.y) + sin(pos.y) * cos(pos.z) + sin(pos.z) * cos(pos.x);\n    dist = abs(dist) - 0.01;\n    \n    float boundary = length(pos) - 6.0;\n    return max(dist, boundary) * 0.1;\n}\n\nvoid camera(in vec2 fragCoord, out vec3 ro, out vec3 rd)  {\n    ro = load(POSITION).xyz;\n    \n    vec2 m = load(VMOUSE).xy/iResolution.x;\n    float a = 1.0/max(iResolution.x, iResolution.y);\n    \n    rd = normalize(vec3((fragCoord - iResolution.xy*0.5)*a, 0.5));\n    rd = CameraRotation(m) * rd;\n}\n\nvec3 normal(vec3 p) {\n    vec2 e = vec2(0.01, 0);\n    float d = scene(p);\n    \n    return normalize(d - vec3(scene(p - e.xyy),scene(p - e.yxy),scene(p - e.yyx)));\n}\n\nfloat march(vec3 ro, vec3 rd, float z) {\n    float d = 0.;\n    \n    for(int i = 0; i < STEPS; i++) {\n        vec3 p = ro + rd * d;\n        float s = scene(p);\n        \n        d += s * z;\n        \n        if(d > MAXDIST || s < SURFDIST) break;\n    }\n    \n    return d;\n}\n\nvec3 getray(vec3 p, vec3 l, vec2 uv, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0, 1, 0), f)),\n        u = cross(f, r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n        \n    return d;\n}\n\nvec3 pixcol(vec3 p) {\n    vec3 n = normal(p);\n    vec3 ld = normalize(-load(POSITION).xyz);\n\n    float diffs = dot(n, -ld);\n    float diff = max(diffs, 0.0);\n    float fres = pow(1.0 - abs(diffs), 5.0);\n    float spec = pow(max(dot(reflect(-ld, n), ld), 0.0), 40.0);\n\n    return vec3(1.0, 0.5, 0.8) * (diff + fres) + spec;\n}\n\nvec3 grid(vec3 ro, vec3 rd) {\n\tfloat d = -ro.y/rd.y;\n    \n    if (d <= 0.0) return vec3(0.4);\n    \n   \tvec2 p = (ro.xz + rd.xz*d);\n    vec2 e = min(vec2(1.0), fwidth(p));\n    vec2 l = smoothstep(vec2(1.0), 1.0 - e, fract(p)) + smoothstep(vec2(0.0), e, fract(p)) - (1.0 - e);\n    \n    return mix(vec3(0.4), vec3(0.8) * (l.x + l.y) * 0.5, exp(-d*0.01));\n}\n\nvec3 mainColor(vec3 ro, vec3 rd, float dist) {\n    vec3 objColor = pixcol(ro + rd * dist);\n    vec3 grdColor = grid(ro + 10.0, rd);\n    float mixFactor = smoothstep(10.0, 100.0, dist);\n    \n    return mix(objColor, grdColor, mixFactor);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(load(POSITION).xyz);\n    vec3 rd = getray(ro, vec3(0), uv, 1.0);\n    \n    camera(fragCoord, ro, rd);\n    \n    float d = march(ro, rd, 1.0);\n    vec3 finalColor = mainColor(ro, rd, d);\n    \n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Credits: genis sole, Hyeve, glk7\n// License Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n\n// Used code: https://www.shadertoy.com/view/4lVXRm\n\n#define store(P, V) if (all(equal(ivec2(fragCoord), P))) fragColor = V\n#define load(P) texelFetch(iChannel1, ivec2(P), 0)\n#define key(K)  step(0.5, texelFetch(iChannel0, ivec2(K, 0), 0).x)\n\nconst ivec2 MEMORY_BOUNDARY = ivec2(4, 3);\n\nconst ivec2 POSITION = ivec2(1, 0);\n\nconst ivec2 VMOUSE = ivec2(1, 1);\nconst ivec2 PMOUSE = ivec2(2, 1);\n\nconst ivec2 TARGET = ivec2(0, 2);\n\nconst ivec2 RESOLUTION = ivec2(3, 1);\n\nconst int KEY_BSP   = 8;\nconst int KEY_SHIFT = 16;\nconst int KEY_CTRL = 17;\nconst int KEY_SP    = 32;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_A     = 65;\nconst int KEY_B     = 66;\nconst int KEY_C     = 67;\nconst int KEY_D     = 68;\nconst int KEY_E     = 69;\nconst int KEY_F     = 70;\nconst int KEY_G     = 71;\nconst int KEY_H     = 72;\nconst int KEY_I     = 73;\nconst int KEY_J     = 74;\nconst int KEY_K     = 75;\nconst int KEY_L     = 76;\nconst int KEY_M     = 77;\nconst int KEY_N     = 78;\nconst int KEY_O     = 79;\nconst int KEY_P     = 80;\nconst int KEY_Q     = 81;\nconst int KEY_R     = 82;\nconst int KEY_S     = 83;\nconst int KEY_T     = 84;\nconst int KEY_U     = 85;\nconst int KEY_V     = 86;\nconst int KEY_W     = 87;\nconst int KEY_X     = 88;\nconst int KEY_Y     = 89;\nconst int KEY_Z     = 90;\nconst int KEY_COMMA = 188;\nconst int KEY_PER   = 190;\n\n#define KEY_BINDINGS(FORWARD, BACKWARD, RIGHT, LEFT, UP, DOWN) const int KEY_BIND_FORWARD = FORWARD; const int KEY_BIND_BACKWARD = BACKWARD; const int KEY_BIND_RIGHT = RIGHT; const int KEY_BIND_LEFT = LEFT; const int KEY_BIND_UP = UP; const int KEY_BIND_DOWN = DOWN;\n\n#define ARROWS  KEY_BINDINGS(KEY_UP, KEY_DOWN, KEY_RIGHT, KEY_LEFT, KEY_SHIFT, KEY_CTRL)\n#define WASD  KEY_BINDINGS(KEY_W, KEY_S, KEY_D, KEY_A, KEY_SP, KEY_SHIFT)\n#define ESDF  KEY_BINDINGS(KEY_E, KEY_D, KEY_F, KEY_S, KEY_SP, KEY_SHIFT)\n\n#define INPUT_METHOD  WASD\n\nvec3 KeyboardInput() {\n    INPUT_METHOD\n    \n\tvec3 i = vec3(key(KEY_BIND_RIGHT)   - key(KEY_BIND_LEFT), \n                  key(KEY_BIND_FORWARD) - key(KEY_BIND_BACKWARD),\n                  key(KEY_BIND_UP)      - key(KEY_BIND_DOWN));\n    \n    float n = abs(abs(i.x) - abs(i.y) - abs(i.z));\n    return i * (n + (1.0 - n)*inversesqrt(2.0));\n}\n\nvec3 CameraDirInput(vec2 vm) {\n    vec2 m = vm/iResolution.x;\n    \n    return CameraRotation(m) * KeyboardInput().xzy;\n}\n\n\nvoid Collision(vec3 prev, inout vec3 p) {\n    if (p.y < -9.0) p = vec3(prev.xz, min(-9.0, prev.y)).xzy;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {   \n    if (any(greaterThan(ivec2(fragCoord), MEMORY_BOUNDARY))) return;\n    \n    fragColor = load(fragCoord);\n    \n    vec2 resolution = load(RESOLUTION).xy;\n    store(RESOLUTION, vec4(iResolution.xy, 0.0, 0.0));\n    \n    if (iTime == 0.0 || iFrame == 0 || any(notEqual(iResolution.xy, resolution))) {\n        store(POSITION, vec4(0.0, 2.0, -12.0, 0.0));\n        store(TARGET, vec4(0.0, 2.0, -12.0, 0.0));\n        store(VMOUSE, vec4(0.0));\n        store(PMOUSE, vec4(0.0));\n        \n        return;\n    }\n\n    vec3 target      = load(TARGET).xyz;   \n    vec3 position    = load(POSITION).xyz;\n    vec2 pm          = load(PMOUSE).xy;\n    vec3 vm          = load(VMOUSE).xyz;\n    \n    vec3 ptarget = target;\n    target += CameraDirInput(vm.xy) * iTimeDelta * 5.0;\n    \n    Collision(ptarget, target);\n    \n    position += (target - position) * iTimeDelta * 5.0;\n    \n    store(TARGET, vec4(target, 0.0));\n    store(POSITION, vec4(position, 0.0));\n    \n\tif (iMouse.z > 0.0) {\n    \tstore(VMOUSE, vec4(pm + (abs(iMouse.zw) - iMouse.xy), 1.0, 0.0));\n\t}\n    \n    else if (vm.z != 0.0) {\n    \tstore(PMOUSE, vec4(vm.xy, 0.0, 0.0));\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "mat3 CameraRotation( vec2 m ) {\n    m.y = -m.y;\n    \n    vec2 s = sin(m);\n    vec2 c = cos(m);\n    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, c.y, s.y, 0.0, -s.y, c.y);\n    mat3 rotY = mat3(c.x, 0.0, -s.x, 0.0, 1.0, 0.0, s.x, 0.0, c.x);\n    \n    return rotY * rotX;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}