{
    "Shader": {
        "info": {
            "date": "1549308250",
            "description": "Another training session",
            "flags": 0,
            "hasliked": 0,
            "id": "WsS3RV",
            "likes": 2,
            "name": "ShaderDojo 018",
            "published": 3,
            "tags": [
                "raymarching",
                "training"
            ],
            "usePreview": 0,
            "username": "antonOTI",
            "viewed": 407
        },
        "renderpass": [
            {
                "code": "\n#define PI 3.14159\n\nvec2 modA(vec2 p, float c)\n{\n  float a = atan(p.y,p.x);\n  a = mod(a , c);\n\n  return vec2(cos(a),sin(a)) * length(p);\n}\n\nfloat smin(float a, float b, float k)\n{\n  float h = clamp(.5 + .5 * (b -a)/k,0.,1.);\n  return mix(b,a,h) - k * h *(1. - h);\n}\n\nmat2 rot(float a)\n{\n  float sa = sin(a);  float ca  = cos(a);\n  return mat2(ca,-sa,sa,ca);\n}\n\n#define time (iTime * .25)\n\nfloat map(vec3 p, out float id)\n{\n  id = 0.;\n  float dist  = 10000.;\n  vec3 cp = p;\n  \n  p.yz = modA(p.yz, 4.);\n  p.yz *= rot(p.x * .25 + time);\n  p.y += 4.;\n  \n\n  float co = length(p.yz) - (1. + sin(p.x) * .8);\n\n  p = cp;\n\n  p.xz *= rot(time * .6);\n  float ti = time;\n  for(float i  = 1.; i < 5.; ++i)\n  {\n    p.y += (sin(ti + p.x ) + cos(ti + p.z)) * .75;\n    dist = smin(length(p) - .5, dist, 1.25);\n    ti += i * .2;\n    p *= 1.1;\n    p.xz *= rot(.25 + i);\n    p.yz *= rot(i * 2.);\n    p.x += .6;\n  }\n\n  if(co < .001) id = 1.;\n  dist = min(dist , co);\n\n  float sph = length(cp) - 6.;\n\n//  dist = max(dist,sph);\n\n  return dist;\n}\n\nfloat Ray(inout vec3 cp, vec3 rd, out float id)\n{\n  float st = 0.;\n  float cd = 0.;\n  for(; st < 1.; st += 1. / 256.)\n  {\n    cd = map(cp, id);\n    if(cd < .001) break;\n    cp += rd * cd * .25;\n  }\n\n  return st;\n}\n\nvec3 normal(vec3 p)\n{\n  float id;\n  float m = map(p, id);\n  vec2 e = vec2(.01,.0);\n  return normalize(vec3(\n  m - map(p + e.xyy, id),\n  m - map(p + e.yxy, id),\n  m - map(p + e.yyx, id)\n));\n}\n\nvec3 LookAt(vec3 eye, vec3 sub,vec2 uv)\n{\n  vec3 fo = normalize(sub - eye);\n  vec3 ri = cross(fo, vec3(0.,1.,0.));\n  vec3 up = cross(ri,fo);\n  return normalize(fo + ri * uv.x + up * uv.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n  fragColor = vec4(0.);\n\n  float di = mod(length(uv) + time * .15, 1.75);\n  float f = step(di, .15);\n\n  vec3 eye = vec3(0.,0.,-12.);\n  vec3 sub = vec3(0.);\n  vec3 cp = eye;\n\n  float st = 0.;\n  float id = 0.;\n  vec3 rd = LookAt(eye, sub, uv);\n  st = Ray(cp, rd, id);\n\n  if(st >= 1.) return;\n\n  vec3 ld = normalize(sub - eye);\n  vec3 norm = normal(cp);\n  float li = dot(ld, norm);\n\n  if(f < .5)\n  {\n    li = 1. - li;\n    li *= 1.5;\n  }\n  else\n{\n  li = pow(li, 2.);\n}\n  norm.xy *= rot(time + cp.z);\n  norm.xz *= rot(time + cp.y);\n\n  if(id > .5)\n  {\n    norm.yz *= rot(time + cp.x);\n  }\n\n  fragColor = vec4(norm, 0.) * li;\n\n  \n\n  fragColor *= (1. - st) * (1. + f) * 1.5;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}