{
    "Shader": {
        "info": {
            "date": "1556046695",
            "description": "Based on GLSL smallpt. For learning. Fixes backside refraction, adds Blinn-Phong and GGX.\n\nAlso try: [url=https://www.shadertoy.com/view/WtfGWH]The mirror room[/url] / [url=https://www.shadertoy.com/view/3lB3DR]The golden room[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "WllGWn",
            "likes": 15,
            "name": "The light room",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "lambert",
                "pathtracing",
                "brdf",
                "montecarlo",
                "blinnphong",
                "pbr",
                "ggx"
            ],
            "usePreview": 0,
            "username": "sschmidtix",
            "viewed": 1634
        },
        "renderpass": [
            {
                "code": "// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Copyright © 2019 Stefan Schmidt\n//\n// Basic path tracing implementation for learning.\n// BRDFs: Lambert/Blinn-Phong/reflection/refraction/Lommel/GGX\n//\n// Based on https://www.shadertoy.com/view/XdcfRr\n// ---------------------------------------------------------------------\n\n// Things to try (in Buffer A):\n//\n// * Play with scene and materials (also, check the importance sampling demo\n//     at: http://www.shadertoy.com/view/3lB3DR)\n// * Play with NUM_SAMPLES and NUM_DEPTH\n// * Play with SOLO_DEPTH to see the effects of a ray depth on the final image\n// * Play with SHADOW_EPSILON to adjust Shadow Acne and Peter Panning\n// * Disable SSAA to see its effects\n// * Play with FOCAL_LENGTH \n// ---------------------------------------------------------------------\n\n// Shader entry point\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 col = vec3(0.);\n    \n    // Read texture in Buffer A\n    col = texture(iChannel0, uv).rgb;\n    \n    // Inverse gamma function\n    col = pow(col, vec3(1. / 2.2));\n    \n    // Post-processing: color grading\n    col = pow(col, vec3(0.8, 0.85, 0.9));\n    \n    // Post-processing: vignette\n    col *= 0.5 + 0.5 * pow(16.0 * uv.x * uv.y *\n                           (1.0 - uv.x) * (1.0 - uv.y), 0.2);\n    \n    // Return fragment color\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Copyright © 2019 Stefan Schmidt\n//\n// Basic path tracing implementation for learning.\n// BRDFs: Lambert/Blinn-Phong/reflection/refraction/Lommel/GGX\n//\n// Based on https://www.shadertoy.com/view/XdcfRr\n// ---------------------------------------------------------------------\n\n// Parameters\n#define NUM_SAMPLES     10              // Number of samples per pixel\n#define MAX_DEPTH       10              // Max ray depth\n// #define SOLO_DEPTH      0               // Shows only light of depth X\n#define SHADOW_EPSILON  0.015\n#define SSAA                            // Supersampling anti-aliasing\n#define FOCAL_LENGTH    0.019           // Camera focal length\n#define FRAME_WIDTH     0.036           // Camera sensor width\n\n\n// Constants\n#define M_PI            radians(180.)\n#define FAR_PLANE       1e3\n\n\n// Materials\n#define MAT_LAMBERT     0\n#define MAT_BLINNPHONG  1\n#define MAT_SPECULAR    2\n#define MAT_REFRACTION  3\n#define MAT_LOMMEL      4\n#define MAT_GGX         5\n\nstruct Material {\n    int type;\n    \n    vec3 albedo;     // Albedo color\n    vec3 specular;   // Specular color\n    float roughness; // Roughness or Phong exponent\n    \n    float ior;       // Index of refraction\n    \n    vec3 emissive;   // Emissive color\n};\n\n#define MAT_TOPLAMP   0\n#define MAT_BLACKHOLE 1\n#define MAT_GRAY      2\n#define MAT_RED       3\n#define MAT_BLUE      4\n#define MAT_GRAY_BP   5\n#define MAT_METAL     6\n#define MAT_WATER     7\n#define MAT_GLASS     8\n#define MAT_DIAMOND   9\n#define MAT_MOONDUST  10\n#define MAT_WARMLIGHT 11 \n#define MAT_COLDLIGHT 12\n#define MAT_COPPER    13\n#define MAT_SILVER    14\n#define MAT_GOLD      15\n#define MAT_PLASTIC   16\n#define MAT_CERAMIC   17\n#define MAT_NUM       18\n\nMaterial materials[MAT_NUM];\n    \nvoid initMaterials() {\n    materials[MAT_TOPLAMP]   = Material(MAT_LAMBERT, vec3(0.0),\n                                        vec3(0.04), 0.3, 1.0, vec3(24.0));\n    materials[MAT_BLACKHOLE] = Material(MAT_LAMBERT, vec3(0.0),\n                                        vec3(0.04), 0.3, 1.0, vec3(0.0));\n    materials[MAT_GRAY]      = Material(MAT_LAMBERT, vec3(0.75),\n                                        vec3(0.04), 0.3, 1.0, vec3(0.0));\n    materials[MAT_RED]       = Material(MAT_LAMBERT, vec3(0.75, 0.25, 0.25),\n                                        vec3(0.04), 0.3, 1.0, vec3(0.0));\n    materials[MAT_BLUE]      = Material(MAT_LAMBERT, vec3(0.25, 0.25, 0.75),\n                                        vec3(0.04), 0.3, 1.0, vec3(0.0));\n    materials[MAT_GRAY_BP]   = Material(MAT_BLINNPHONG, vec3(0.75),\n                                        vec3(0.75), 20.0, 1.0, vec3(0.0));\n    materials[MAT_METAL]     = Material(MAT_SPECULAR,vec3(0.),\n                                        vec3(0.65, 0.75, 0.72), 0.5, 1.0, vec3(0.0));\n    materials[MAT_WATER]     = Material(MAT_REFRACTION, vec3(0.95, 0.96, 0.98),\n                                        vec3(0.04), 0.3, 1.3, vec3(0.0));\n    materials[MAT_GLASS]     = Material(MAT_REFRACTION, vec3(0.7, 0.98, 0.9),\n                                        vec3(0.04), 0.3, 1.5, vec3(0.0));\n    materials[MAT_DIAMOND]   = Material(MAT_REFRACTION, vec3(0.92, 0.94, 0.75),\n                                        vec3(0.04), 0.3, 2.2, vec3(0.0));\n    materials[MAT_MOONDUST]  = Material(MAT_LOMMEL, vec3(0.75),\n                                        vec3(0.04), 0.3, 1.0, vec3(0.0));\n    materials[MAT_WARMLIGHT] = Material(MAT_LOMMEL, vec3(0.05),\n                                        vec3(0.04), 0.3, 1.0, 2. * vec3(1.0, 0.65, 0.4));\n    materials[MAT_COLDLIGHT] = Material(MAT_LOMMEL, vec3(0.05),\n                                        vec3(0.04), 0.3, 1.0, 2. * vec3(0.59, 0.76, 1.0));\n    materials[MAT_COPPER]    = Material(MAT_GGX, vec3(0.),\n                                        vec3(0.955, 0.637, 0.538), .4, 1.0, vec3(0.));\n    materials[MAT_SILVER]    = Material(MAT_GGX, vec3(0.),\n                                        vec3(0.972, 0.960, 0.915), .35, 1.0, vec3(0.));\n    materials[MAT_GOLD]      = Material(MAT_GGX, vec3(0.),\n                                        vec3(1.000, 0.766, 0.336), .3, 1.0, vec3(0.));\n    materials[MAT_PLASTIC]   = Material(MAT_GGX, vec3(0.8, 0.06, 0.03),\n                                        vec3(0.04), .15, 1.0, vec3(0.));\n    materials[MAT_CERAMIC]   = Material(MAT_GGX, vec3(0.8, 0.7, 0.65),\n                                        vec3(0.04), .3, 1.0, vec3(0.));\n}\n\n\n// Scene\nstruct Sphere {\n    vec3 center;\n    float radius;\n};\n\nstruct Object {\n\tSphere sphere;\n    Material material;\n};\n    \n#define NUM_OBJECTS 10\nObject scene[NUM_OBJECTS];\n\nvoid initScene() {\n    // Feel free to change materials, positions and sizes...\n    \n    // Front and back walls\n    scene[0] = Object(Sphere(vec3(0.0, 1.2, 1e3 + 2.5), 1e3), materials[MAT_GRAY]);\n    scene[1] = Object(Sphere(vec3(0.0, 1.2, -1e3 - 2.5), 1e3), materials[MAT_BLACKHOLE]);\n    // Left and right walls\n    scene[2] = Object(Sphere(vec3(-1e3 - 1.5, 0., 0.), 1e3), materials[MAT_RED]);\n    scene[3] = Object(Sphere(vec3(1e3 + 1.5, 0., 0.), 1e3), materials[MAT_BLUE]);\n    // Ceiling and floor\n    scene[4] = Object(Sphere(vec3(0.0, 1e3 + 2.4, 0.), 1e3), materials[MAT_GRAY]);\n    scene[5] = Object(Sphere(vec3(0.0, -1e3, 0.), 1e3), materials[MAT_GRAY]);\n    // Objects\n    scene[6] = Object(Sphere(vec3(-0.75, 0.51, 1.3), 0.5), materials[MAT_METAL]);\n    scene[7] = Object(Sphere(vec3(0.75, 0.51, 0.3), 0.5), materials[MAT_GLASS]);\n    // Top light and blocking sphere to avoid Peter Panning\n    scene[8] = Object(Sphere(vec3(0.0, 20. + 2.3925, 0.), 20.), materials[MAT_TOPLAMP]);\n    scene[9] = Object(Sphere(vec3(0.0, 40. + 2.4075, 0.), 40.), materials[MAT_BLACKHOLE]);\n}\n\n\n// Ray casting\nstruct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n\nfloat castRayToSphere(Ray ray, Sphere sphere) {\n    vec3 oc = ray.origin - sphere.center;\n    float qb = dot(ray.direction, oc);\n    \n    float det = qb * qb - dot(oc, oc) + sphere.radius * sphere.radius;\n    if (det < 0.)\n        return FAR_PLANE;\n    \n    float sqrt_det = sqrt(det);\n    \n    float t1 = -qb - sqrt_det;\n    float t2 = -qb + sqrt_det;\n    \n    if (t1 < SHADOW_EPSILON)\n        t1 = FAR_PLANE;\n    if (t2 < SHADOW_EPSILON)\n        t2 = FAR_PLANE;\n    \n    return min(t1, t2);\n}\n\nbool castRay(Ray ray, out vec3 p, out vec3 normal, out Material material) {\n    float t = FAR_PLANE;\n    \n    for (int i = 0; i < NUM_OBJECTS; ++i) {\n        float t_ = castRayToSphere(ray, scene[i].sphere);\n        \n        if (t_ < t) {\n            t = t_;\n            \n            p = ray.origin + t * ray.direction;\n            normal = normalize(p - scene[i].sphere.center);\n            material = scene[i].material;\n         }\n    }\n    \n    return (t < FAR_PLANE);\n}\n\n\n// Random number generator\nvec3 seed;\n\nvoid initRandom(vec2 fragCoord) {\n    seed = vec3(fragCoord, iFrame);\n}\n\nfloat getRandom() {\n\tseed = fract(sin(cross(seed, vec3(12.9898, 78.233, 43.1931))) * 43758.5453);\n    \n    return seed.x;\n}\n\n\n// Sampling\nvec3 getHemisphereUniformSample(vec3 n) {\n    float cosTheta = getRandom();\n    float sinTheta = sqrt(1. - cosTheta * cosTheta);\n    \n    float phi = 2. * M_PI * getRandom();\n    \n    // Spherical to cartesian\n    vec3 t = normalize(cross(n.yzx, n));\n    vec3 b = cross(n, t);\n    \n\treturn (t * cos(phi) + b * sin(phi)) * sinTheta + n * cosTheta;\n}\n\n\n// BRDF math\nvec3 ggx(vec3 n, vec3 v, vec3 l, float roughness, vec3 F0) {\n    float alpha = roughness * roughness;\n    float alpha2 = alpha * alpha;\n    \n    float dotNL = clamp(dot(n, l), 0., 1.);\n    float dotNV = clamp(dot(n, v), 0., 1.);\n    \n    vec3 h = normalize(v + l);\n    float dotNH = clamp(dot(n, h), 0., 1.);\n    float dotLH = clamp(dot(l, h), 0., 1.);\n    \n    // GGX microfacet distribution function\n    float den = (alpha2 - 1.) * dotNH * dotNH + 1.;\n    float D = alpha2 / (M_PI * den * den);\n    \n    // Fresnel with Schlick approximation\n    vec3 F = F0 + (1.0 - F0) * pow(1. - dotLH, 5.);\n    \n    // Smith joint masking-shadowing function\n    float k = .5 * alpha;\n    float G = 1. / ((dotNL * (1.0 - k) + k) * (dotNV * (1. - k) + k));\n    \n    return D * F * G;\n}\n\n\n// Rendering\nvec3 render(Ray ray) {\n    vec3 acc = vec3(0.);    // Cumulative radiance\n    vec3 att = vec3(1.);    // Light attenuation\n    \n    for (int depth = 0; depth < MAX_DEPTH; depth++) {\n#ifdef SOLO_DEPTH\n        if (depth == SOLO_DEPTH)\n            acc = vec3(0);\n        else if (depth == (SOLO_DEPTH + 1))\n            break;\n#endif\n        vec3 p;\n        vec3 normal;\n        Material material;\n        \n        if (!castRay(ray, p, normal, material))\n            break;\n        \n        // Orient normal towards ray direction\n        float cosThetaI = dot(ray.direction, normal);\n        \n        vec3 facingNormal = (cosThetaI < 0.) ? normal : -normal;\n        \n        // Emissive radiance\n        acc += att * material.emissive;\n        \n        // Lambert material\n        if (material.type == MAT_LAMBERT) {\n            vec3 reflected = getHemisphereUniformSample(facingNormal);\n            \n            att *= material.albedo * dot(facingNormal, reflected);\n            \n            ray = Ray(p, reflected);\n        }\n        // Blinn-Phong material\n        else if (material.type == MAT_BLINNPHONG) {\n            vec3 reflected = getHemisphereUniformSample(facingNormal);\n            \n            vec3 h = normalize(-ray.direction + reflected);\n            att *= material.albedo * dot(facingNormal, reflected) +\n                material.specular * pow(max(dot(facingNormal, h), 0.), material.roughness);\n            \n            ray = Ray(p, reflected);\n        }\n        // Specular material\n        else if (material.type == MAT_SPECULAR) {\n            vec3 reflected = reflect(ray.direction, facingNormal);\n            \n            att *= material.specular;\n            \n            ray = Ray(p, reflected);\n        }\n        // Refraction material\n        else if (material.type == MAT_REFRACTION) {\n            float eta = (cosThetaI < 0.) ? (1. / material.ior) : material.ior;\n            \n            vec3 refracted = refract(ray.direction, facingNormal, eta);\n            \n            if (all(equal(refracted, vec3(0.)))) {\n                // Total internal reflection\n                vec3 reflected = reflect(ray.direction, facingNormal);\n                \n\t            ray = Ray(p, reflected);\n            } else {\n                // Fresnel F0\n                float F0_ = (material.ior - 1.) / (1. + material.ior);\n                float F0 = F0_ * F0_;\n                \n                // Fresnel with Schlick approximation\n                float cosTheta = (cosThetaI < 0.) ? -cosThetaI : dot(refracted, normal);\n                float F = F0 + (1.0 - F0) * pow(1. - cosTheta, 5.);\n                \n                if (getRandom() < F) {\n                    vec3 reflected = reflect(ray.direction, facingNormal);\n                    \n                    ray = Ray(p, reflected);\n                } else {\n                    att *= material.albedo;\n                    \n                    ray = Ray(p, refracted);\n                }\n            }\n        }\n        // Lommel-Seeliger material\n        else if (material.type == MAT_LOMMEL) {\n            vec3 reflected = getHemisphereUniformSample(facingNormal);\n            \n            att *= material.albedo;\n            \n            ray = Ray(p, reflected);\n        }\n        // GGX material\n        else {\n            vec3 reflected = getHemisphereUniformSample(facingNormal);\n            \n            att *= dot(facingNormal, reflected) * (\n                material.albedo + ggx(facingNormal, -ray.direction, reflected,\n                                      material.roughness, material.specular));\n            \n            ray = Ray(p, reflected);\n        }\n    }\n    \n    return acc;\n}\n\n\n// Shader entry point\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    initRandom(fragCoord);\n    initMaterials();\n    initScene();\n    \n    // Camera\n    vec2 mousePos = all(equal(iMouse.zw, vec2(0.))) ? vec2(0.) : \n        clamp(2. * iMouse.xy / iResolution.xy - vec2(1.), vec2(-1.), vec2(1.));\n    \n    vec3 cameraPos = vec3(0., 1.2, -2.49) + vec3(mousePos, 0.) * vec3(1.49, 1.19, 0.);\n    vec3 cameraLookAt = vec3(0., 1.2, 0.);\n    \n    vec3 cz = normalize(cameraLookAt - cameraPos);\n    vec3 cx = normalize(cross(vec3(0., 1., 0.), cz));\n    vec3 cy = cross(cz, cx);\n    \n    mat3 cameraTransform = mat3(cx, cy, cz);\n    \n    // Render frame\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i < NUM_SAMPLES; ++i) {\n#ifdef SSAA\n        vec2 ssaa = vec2(getRandom(), getRandom());\n#else\n        vec2 ssaa = vec2(.5);\n#endif\n        vec2 screenCoord = vec2(2. / iResolution.x) * (fragCoord + ssaa) - \n            vec2(1., iResolution.y / iResolution.x);\n        \n        vec3 projCoord = vec3(vec2(.5 * FRAME_WIDTH) * screenCoord, FOCAL_LENGTH);\n        \n        vec3 rayDirection = cameraTransform * normalize(projCoord);\n        \n        Ray ray = Ray(cameraPos, rayDirection);\n        col += render(ray);\n    }\n    col /= vec3(NUM_SAMPLES);\n    \n    // Average with last frames\n    if (all(equal(floor(fragCoord), vec2(0.)))) {\n        if (iMouse.z > 0.0)\n            col = vec3(-iFrame);\n        else\n            col = texture(iChannel0, vec2(0.5) / iResolution.xy).rgb;\n    } else {\n        if (iFrame > 0) {\n            int frameStart = -int(texture(iChannel0, 0.5 / iResolution.xy).x);\n            vec3 colAvg = texture(iChannel0, fragCoord / iResolution.xy).rgb;\n            col = mix(colAvg, col, 1. / float(iFrame + 1 - frameStart));\n        }\n    }\n    \n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}