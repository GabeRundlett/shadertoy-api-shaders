{
    "Shader": {
        "info": {
            "date": "1584093149",
            "description": "Infinite Stair",
            "flags": 0,
            "hasliked": 0,
            "id": "3sfcz8",
            "likes": 14,
            "name": "Infinite Stair",
            "published": 3,
            "tags": [
                "stair"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 391
        },
        "renderpass": [
            {
                "code": "// All the distance functions from:https://iquilezles.org/articles/distfunctions\n// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 80\n#define MAX_DIST 50.\n#define SURF_DIST .003\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec4 combine(vec4 val1, vec4 val2 ){\n    return (val1.w < val2.w)?val1:val2;\n}\n\n// A smart way to control the animation. function is from \"http://qiita.com/gaziya5/items/29a51b066cb7d24983d6\"\nfloat animscene(in float t, float w, float s) {\n    return clamp(t - w, 0.0, s) / s;  \n}\n\nfloat stairPart(vec3 p) {\n    vec3 p2 = p;\n    p2 += vec3(0.1,0.1,0.0);\n    p2= abs(p2)-vec3(0.25,0.25,2.0);\n    p = abs(p)-vec3(0.2,0.2,0.7);\n    float b = max(p.x,max(p.y,p.z));\n    float b2 = max(p2.x,max(p2.y,p2.z));\n    b = max(-b2,b);\n    return b;\n}\n\nfloat stair(vec3 p, int drawBall){\n    vec3 pref = p;\n    float b = stairPart(p);\n    float b2 = stairPart(p-vec3(-0.4,0.4,0.0));\n    b = min(b,b2);\n    b2 = stairPart(p-vec3(0.4,-0.4,0.0));\n    b = min(b,b2);\n    b2 = stairPart(p-vec3(-0.8,0.8,0.0));\n    b = min(b,b2);\n    b2 = stairPart(p-vec3(0.8,-0.8,0.0));\n    b = min(b,b2);\n    b2 = stairPart(p-vec3(-1.2,1.2,0.0));\n    b = min(b,b2);\n    b2 = stairPart(p-vec3(-1.6,1.6,0.0));\n    b = min(b,b2);\n    b2 = stairPart(p-vec3(-2.0,2.0,0.0));\n    b = min(b,b2);\n    p = abs(p-vec3(1.7,-1.0,0.0))-vec3(0.7,0.03,0.7);\n    float b3 = max(p.x,max(p.y,p.z));\n    b = min(b,b3);\n    \n    \n    if(drawBall == 1){\n        \n        p = pref;\n        p = abs(p-vec3(2.7,-1.0,0.0))-vec3(0.35,0.03,0.7);\n        float b4 = max(p.x,max(p.y,p.z));\n        b = min(b,b4);\n        p = pref;\n        p = abs(p-vec3(3.,0.2,0.0))-vec3(0.03,1.2,0.7);\n        float b5 = max(p.x,max(p.y,p.z));\n        b = min(b,b5);\n        p = pref;\n        p = abs(p-vec3(3.,0.2,0.0))-vec3(0.06,1.15,0.6);\n        float b6 = max(p.x,max(p.y,p.z));\n        b = max(-b6,b);\n        \n        float speed = 0.6;\n        float animTime = mod(iTime,speed*10.0);\n        float x = 0.0;\n        x += animscene(animTime, 0.0, speed)*0.4;\n        x += animscene(animTime, speed, speed)*0.4;\n        x += animscene(animTime, speed*2.0, speed)*0.4;\n        x += animscene(animTime, speed*3.0, speed)*0.4;\n        x += animscene(animTime, speed*4.0, speed)*0.4;\n        x += animscene(animTime, speed*5.0, speed)*0.4;\n        x += animscene(animTime, speed*6.0, speed)*0.4;\n        x += animscene(animTime, speed*7.0, speed)*0.4;\n        x += animscene(animTime, speed*8.0, speed*2.0)*2.0;\n\n        float y = 0.0;\n        y += animscene(animTime, speed, speed*0.2)*-0.38;\n        y += animscene(animTime,speed+speed, speed*0.1)*-0.38;\n        y += animscene(animTime,speed+(speed*2.0), speed*0.1)*-0.42;\n        y += animscene(animTime,speed+(speed*3.0), speed*0.1)*-0.42;\n        y += animscene(animTime,speed+(speed*4.0), speed*0.1)*-0.38;\n        y += animscene(animTime,speed+(speed*5.0), speed*0.1)*-0.38;\n        y += animscene(animTime,speed+(speed*6.0), speed*0.1)*-0.38;\n        y += animscene(animTime,speed+(speed*7.0), speed*0.1)*-0.38;\n\n        float s = length(pref-vec3(-2.0+x,2.4+y,0.0))-0.2;\n        b = min(b,s);\n    }\n    \n    return b;\n}\n\nvec4 GetDist(vec3 p) {\n    \n    vec3 prevP = p;\n    float _floor = p.y;\n\n    float y = 0.25;\n    \n    p.y+= iTime*1.5;\n    p.y=mod(p.y,12.6)-6.3;\n    p.y-= 4.20;\n    \n    float b = stair(p,0);\n    float b2 = stair((p+vec3(-1.7,3.17,2.5))*matRotateY(radians(90.0)),1);\n    float b3 = stair((p+vec3(0.8,3.17*2.0,4.2))*matRotateY(radians(-180.0)),0);\n    float b4 = stair((p+vec3(2.5,3.17*3.0,1.7))*matRotateY(radians(-90.0)),1);\n    b = min(b,min(b2,min(b3,b4)));\n    \n    vec4 resB = vec4(vec3(0.8),b*0.6);\n\n    return resB;\n}\n\nvec4 RayMarch(vec3 ro, vec3 rd) {\n    vec4 dO= vec4(0.0,0.0,0.0,0.0);\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO.w;\n        vec4 dS = GetDist(p);\n        dO.w += dS.w;\n        dO.xyz = dS.xyz;\n        if(dO.w>MAX_DIST || dS.w<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).w;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).w,\n        GetDist(p-e.yxy).w,\n        GetDist(p-e.yyx).w);\n    \n    return normalize(n);\n}\n\nfloat shadowMap(vec3 ro, vec3 rd){\n    float h = 0.0;\n    float c = 0.001;\n    float r = 1.0;\n    float shadow = 0.5;\n    for(float t = 0.0; t < 30.0; t++){\n        h = GetDist(ro + rd * c).w;\n        if(h < 0.001){\n            return shadow;\n        }\n        r = min(r, h * 16.0 / c);\n        c += h;\n    }\n    return 1.0 - shadow + r * shadow;\n}\n\nvec2 GetLight(vec3 p) {\n    vec3 lightPos = vec3(2,8,3);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l).w;\n    \n    float lambert = max(.0, dot( n, l))*0.1;\n    \n    float shadow = shadowMap(p + n * 0.001, l);\n    \n    return vec2((lambert+dif),max(0.9, shadow)) ;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    float t = mod(iTime,8000.0);\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 5, -6);\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    ro.yz *= Rot(radians(-20.0));\n    ro.xz *= Rot(t*.3+1.0);\n    #endif\n    \n    vec3 rd = R(uv, ro, vec3(0,1,0), 1.);\n\n    vec4 d = RayMarch(ro, rd);\n    \n    if(d.w<MAX_DIST) {\n        vec3 p = ro + rd * d.w;\n    \n        vec2 dif = GetLight(p);\n        col = vec3(dif.x)*d.xyz;\n        col *= dif.y;\n        \n    } else {\n        // background\n        col = vec3(1.0);\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}