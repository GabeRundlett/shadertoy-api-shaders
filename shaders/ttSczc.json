{
    "Shader": {
        "info": {
            "date": "1594943275",
            "description": "quick sketch / not proper volumetric (doesn't check when exited etc). use mouse x to control curl freq",
            "flags": 0,
            "hasliked": 0,
            "id": "ttSczc",
            "likes": 19,
            "name": "volumetric curl noise",
            "published": 3,
            "tags": [
                "refraction",
                "curlnoise"
            ],
            "usePreview": 0,
            "username": "macbooktall",
            "viewed": 978
        },
        "renderpass": [
            {
                "code": "#define minDist 0.001\n#define maxDist 5.\n#define surfaceRefraction 0.9\n#define curlStepRefraction 0.9\n\n#define curlFreq 1.\n\n\nuniform vec4 bgColor;\nin vec2 uv;\n\nvec2 mouse;\n\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat sdBox( vec3 p, vec3 b ) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvoid transformSpace(inout vec3 pos) {\n\tpR(pos.xz, -iTime*0.5);\n\tpR(pos.xy, sin(iTime*0.5)*0.5);    \n}\n\nfloat map(in vec3 pos) {\n\ttransformSpace(pos);\n\n    float dist = sdBox(pos, vec3(0.25));\n    return dist;\n}\n\nvec3 curl(vec3 pos) {\n    vec3 eps = vec3(1., 0., 0.);\n    vec3 res = vec3(0.);\n\n    float yxy1 = snoise(pos + eps.yxy);\n    float yxy2 = snoise(pos - eps.yxy);\n    float a = (yxy1 - yxy2) / (2. * eps.x);\n\n    float yyx1 = snoise(pos + eps.yyx);\n    float yyx2 = snoise(pos - eps.yyx);\n    float b = (yyx1 - yyx2) / (2. * eps.x);\n\n    res.x = a - b;\n\n    a = (yyx1 - yyx2) / (2. * eps.x);\n\n    float xyy1 = snoise(pos + eps.xyy);\n    float xyy2 = snoise(pos - eps.xyy);\n    b = (xyy1 - xyy2) / (2. * eps.x);\n\n    res.y = a - b;\n\n    a = (xyy1 - xyy2) / (2. * eps.x);\n    b = (yxy1 - yxy2) / (2. * eps.x);\n\n    res.z = a - b;\n\n    return res;\n}\n\nfloat march(in vec3 camPos, in vec3 rayDir) {\n\n    float dist = minDist;\n\n    for (int i = 0; i < 25; i++) {\n        vec3 p = camPos + rayDir * dist;\n        float res = map(p);\n        if (res <= minDist) break;\n        dist += res;\n        if (dist >= maxDist) break;\n    }\n\n    return dist;\n}\n\nvec3 volumeMarch(in vec3 pos, in vec3 rayDir) {\n\n\ttransformSpace(pos);\n\n    const int numSteps = 10;\n    float dist = minDist;\n    float stepSize = 0.05;\n    \n\tvec3 col = vec3(0.);\n    float freq = 4. + (mouse.x-0.5) * curlFreq;\n    \n    for (int i = 0; i < numSteps; i++) {\n        vec3 p = pos + rayDir * dist;\n        float res = map(p);\n\t    dist += stepSize;\n        \n        // the curl noise function animated wrt the current color and time\n\t\tvec3 c = curl(p*freq + sin(col+iTime)*0.1);\n        \n        // refract the ray dir with the current noise sample\n\t\trayDir = refract(rayDir, c, curlStepRefraction);\n        \n        // accumulate the color\n\t\tcol += c;\n    }\n    return col;\n}\n\nvec3 calcNormal(in vec3 pos) {\n    vec3 eps = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(map(pos + eps) - map(pos - eps),\n                     map(pos + eps.yxz) - map(pos - eps.yxz),\n                     map(pos + eps.yzx) - map(pos - eps.yzx)));\n}\n\nvec4 render(in vec3 camPos, in vec3 rayDir) {\n\n    float dist = march(camPos, rayDir);\n    vec3 fPos = camPos + rayDir * dist;\n    vec3 nor = calcNormal(fPos);\n\trayDir = refract(rayDir, nor, surfaceRefraction);\n\tvec3 col = volumeMarch(fPos, rayDir) * (-.25-dot(rayDir, nor));\n\n\tcol = pow(col, vec3(1.25));\n\tcol = mix(col, bgColor.rgb, clamp(dist/maxDist, 0.0, 1.0));\n    return vec4(col, dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tmouse = iMouse.xy / iResolution.xy;\n    vec4 color = vec4(0.);\n    vec2 uv_c = uv * 2. - 1. ;\n    uv_c.x *= iResolution.x/iResolution.y;\n    vec3 ray = normalize (vec3(1., 0., 0.) * uv_c.x +\n                          vec3(0., 1., 0.) * uv_c.y +\n                          vec3(0., 0., 1.) * 2.5);\n\n    vec3 camPos = vec3(0., 0., -1.);\n    \n    color += vec4(render(camPos, ray));\n\n    fragColor = color;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 );\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}