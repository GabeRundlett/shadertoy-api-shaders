{
    "Shader": {
        "info": {
            "date": "1606569591",
            "description": "Shader coded for the Cookie Collective live coding stream.\n[url]https://cookie.paris/[/url]\n[url]https://www.twitch.tv/cookiedemoparty[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "tdGfz1",
            "likes": 25,
            "name": "Colorful lens (cookie stream)",
            "published": 3,
            "tags": [
                "colorful",
                "cookie"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 821
        },
        "renderpass": [
            {
                "code": "//\n// Shader coded for the Cookie Collective live coding stream\n// https://cookie.paris/\n// https://www.twitch.tv/cookiedemoparty\n// \n// Leon Denise 2020.11.28\n// Licensed under hippie love conspiracy\n//\n\n// constants\nconst float PI = 3.1415;\nconst float TAU = 6.283;\n\n// rotation matrix\nmat2 rotation(float a)\n{\n    float c = cos(a), s = sin(a);\n    return mat2(c,-s,s,c);\n}\n\n// color palette by Inigo Quilez\n// https://iquilezles.org/articles/palettes\nvec3 palette(float t)\n{\n    return vec3(0.5)+vec3(0.5)*cos(vec3(1,2,3)*t);\n}\n\nvoid mainImage(out vec4 color, in vec2 coordinate)\n{\n    vec2 p = (coordinate-0.5*iResolution.xy)/iResolution.y;\n    \n    // space distortion\n    p = normalize(p) * sin(pow(length(p), 0.5)*PI - iTime * 0.3);\n    \n    vec2 origin = p;\n    vec3 tint = vec3(0);\n\t\n    // background disks\n    const int disks = 10;\n    float falloff = 1.0;\n    for (int i = 0; i < disks; ++i)\n    {\n        float ratio = float(i)/float(disks-1);\n        \n        // rotation\n        p *= rotation(sin(iTime * 0.1) * 0.1 / falloff + 0.1 * iTime / falloff);\n        \n        // fold\n        p.x = abs(p.x)-0.3*falloff;\n        \n        // shape\n        float shape = min(1., 0.001 / max(0., length(p)-0.05));\n        \n        // color\n        tint += palette(ratio * 2. + p.y*8.) * shape;\n        \n        // falloff iteration\n        falloff /= 1.1;\n    }\n    \n    // animated dots\n    const int dots = 100;\n    for (int i = 0; i < dots; ++i)\n    {\n        float ratio = float(i)/float(dots);\n        float timeline = fract(ratio * 135.1654 + iTime * 0.5);\n        float angle = TAU * ratio * 15.547 + iTime * 0.1;\n        float radius = (0.5 + 0.5 * abs(sin(float(i)*1654.))) * timeline * 2.;\n        \n        // reset transform\n        p = origin;\n        \n        // translate\n        p += vec2(cos(angle),sin(angle)) * radius;\n\t\t\n        // shape\n        float shape = min(1., 0.0005 / max(0., length(p)-0.02));\n        \n        // color\n        tint += palette(angle*0.1 + length(origin)*2.) * shape;\n    }\n\n    color = vec4(tint,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}