{
    "Shader": {
        "info": {
            "date": "1555546192",
            "description": "Some different circle parametrizations. Getting constant speed (derivatives) needs reparametrizing to ensure constant derivative. I've done that for circles but not for square circles yet, so I quickly eyeballed some smoothstep based reparametrizations.",
            "flags": 0,
            "hasliked": 0,
            "id": "WlXGR8",
            "likes": 26,
            "name": "Cubic circle parametrizations",
            "published": 3,
            "tags": [
                "2d",
                "circle",
                "parametrization"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1422
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// How to parametrize a square circle (a circle to a root really) \n// such that it's more or less uniform. The maths can be done but\n// for now I quickly eyeballed some smoothstep based reparametrizations.\n//\n// I provide three different  versions:\n\n\n// 0 : quartic root, non trigonometric\n// 1 : cubic   root, non trigonometric\n// 2 : cubic   root,     trigonometric\n#define METHOD 2\n\n// Make 0 to see uncorrected result\n#define REPARAMETRIZE 1\n\n// Make 16 to see more dramatic effets\n#define NUMPOINTS 50\n\n// See also this shader: https://www.shadertoy.com/view/3slGWM\n\n\n\n\n#if METHOD==0\nvec2 circle( in float t )\n{\n    float s = fract(t*4.0);\n    \n    #if REPARAMETRIZE==1\n    s = s*s*(3.0-2.0*s);  // pick something better\n    s = s*s*(3.0-2.0*s);\n    s = s*s*(3.0-2.0*s);\n    #endif\n    \n    vec2 p = pow( vec2(1.0-s,s), vec2(1.0/8.0) );\n  //vec2 p = sqrt(sqrt(sqrt(vec2(1.0-s,s))));\n    \n    return (t<0.25) ? vec2(-p.y, p.x) :\n           (t<0.50) ? vec2(-p.x,-p.y) :\n           (t<0.75) ? vec2( p.y,-p.x) : p;\n}\n#endif\n\n#if METHOD==1\nvec2 circle( in float t )\n{\n    float s = fract(t*4.0);\n\t\n    #if REPARAMETRIZE==1\n    s = s*s*s*(6.0*s*s-15.0*s+10.0); // pick something better\n    s = s*s*(3.0-2.0*s);\n    #endif\n\n    vec2 p = pow( vec2(1.0-s,s), vec2(1.0/6.0) );\n    \n    return (t<0.25) ? vec2(-p.y, p.x) :\n           (t<0.50) ? vec2(-p.x,-p.y) :\n           (t<0.75) ? vec2( p.y,-p.x) : p;\n}\n#endif\n\n#if METHOD==2\nvec2 circle( in float t )\n{\n    #if REPARAMETRIZE==1\n    float i = floor(4.0*t);\n    float s = fract(4.0*t);\n\n    // pick some other smoothstep-like polynomial\n    s = s*s*s*(5.0+s*(6.0+s*(-15.0+s*(-21.0+s*(+54.0+s*(-36.0+s*8.0))))));\n    \n    t = (i+s)/4.0;\n    #endif\n  \n    const float pi = 3.1415926535;\n    vec2 p = vec2( cos(2.0*pi*t), sin(2.0*pi*t));\n    return sign(p)*pow(abs(p),vec2(1.0/3.0)); // cubic root\n}\n#endif\n        \n//------------------------------------------------------\n//------------------------------------------------------\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p - a, ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nfloat animate( float t )\n{\n    return fract(t+iTime*0.05);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float sc = 1.2;\n\n    float px = sc*2.0/iResolution.y;\n\tvec2  p  = sc*(2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    // compute distance to shape, brute force way\n    vec2 o = circle(animate(0.0));\n    vec2 d = vec2(length( p - o ));\n    for( int i=0; i<NUMPOINTS; i++ )\n    {\n        float t = animate(float(i+1)/float(NUMPOINTS));\n        vec2  c = circle(t);\n        float w = sdSegment( p, o, c );\n        d = min( d, vec2(w, length(p-c)-0.02) );\n        o = c;\n\t}\n    \n\t// colorize\n    vec3 col = vec3(0.25)*(1.0-0.1*length(p));\n    col = mix( col, vec3(1.0,1.0,1.0), 1.0 - smoothstep(0.0, 2.0*px, d.x ) );\n    col = mix( col, vec3(1.0,0.7,0.0), 1.0 - smoothstep(0.0, 2.0*px, d.y ) );\n\n    // dither\n    col += (1.0/128.0)*cos(31.1*dot(fragCoord,vec2(57.,13.)));\n    \n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}