{
    "Shader": {
        "info": {
            "date": "1664466308",
            "description": "This was supposed to be a normal raymarching test but it quiclky turned into something wiered...",
            "flags": 0,
            "hasliked": 0,
            "id": "ftGfWW",
            "likes": 1,
            "name": "Tunnel of ocean",
            "published": 3,
            "tags": [
                "raymarching",
                "normal",
                "wiered"
            ],
            "usePreview": 0,
            "username": "OzoneOnYou",
            "viewed": 168
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DISTANCE 100.\n#define PERCISION .01\n\nfloat sdSphere(vec3 p, vec3 q, float r){\n    return length(p-q)-r;\n}\n\nfloat sdWall(vec3 p, float q){\n    return max(q, p.z) - min(q, p.z + p.y);\n}\n\nfloat sdPlane(vec3 p, float q){\n    return max(q, p.y) - min(q, p.y);\n}\n\nfloat sdDirCylinder(vec3 p, vec2 q, vec2 d, float r){\n    float relativeDist = sqrt(pow(p.y * d.x, 2.) + pow(p.y * d.y, 2.)) - r;\n    return relativeDist + sqrt(pow(q.x, 2.) + pow(q.y, 2.));\n}\n\nfloat sdScene(vec3 p){\n    float sphere = sdSphere(p, vec3(1., 1.5, 5.), 1.);\n    float wall  = sdWall(p, 10.);\n    float ground  = sdPlane(p, 0.);\n    \n    return  min(sphere, min(wall, ground));\n}\n\nfloat rayMarch(vec3 ro, vec3 rd){\n    float dO;\n    \n    for(int i=0;i<MAX_STEPS;i++){\n        float cO     = sdScene( ro + rd * dO);\n        dO += cO;\n        if(dO > MAX_DISTANCE || cO < PERCISION)break;\n    }\n    return dO;\n}\n\nvec3 compute(float ray, vec3 ro, vec3 rd){\n    vec3 position = ro + rd * ray;\n    \n    float lastSd = sdScene(position);\n    vec2 error = vec2(.01 * (sin(iTime) + 1.5), 0);\n    vec3 normal = lastSd + vec3(\n        sdScene(position - error.xyy),\n        sdScene(position - error.yxy),\n        sdScene(position - error.yyx)\n    );\n    normal = normalize(normal);\n    \n    return normal;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy *.5) / iResolution.y;\n\n    vec3 ro = vec3(1, 2, 1);\n    vec3 rd = vec3(uv.x, uv.y, 0.8 + sin(iTime)/5.);\n    \n    float ray = rayMarch(ro, rd);\n\n    vec3 col = compute(ray, ro, rd);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}