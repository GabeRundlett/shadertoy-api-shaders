{
    "Shader": {
        "info": {
            "date": "1675108708",
            "description": "Raymarched noise ground, Alien waters. :)",
            "flags": 0,
            "hasliked": 0,
            "id": "clXXzf",
            "likes": 6,
            "name": "Noise SDF #1",
            "published": 3,
            "tags": [
                "noise",
                "raymarch",
                "sdf",
                "fluid"
            ],
            "usePreview": 0,
            "username": "larserik",
            "viewed": 345
        },
        "renderpass": [
            {
                "code": "// Made using https://www.shadertoy.com/view/WtGXDD by Martijn Steinrucken as a starting point\n\n#define MAX_STEPS 50\n#define MAX_DIST 150.\n#define SURF_DIST .05\n\n#define PI 3.1415\n#define TAU 6.2831\n\nfloat speed = .05;\nfloat scale = .01;\nint octaves = 3;\nint repeats = 1;\nfloat height = 4.;\n\nfloat fbm (in vec3 st) {\n    float value = 0.0;\n    float amplitude = 1.;\n    float total = 0.;\n\n    for (int i = 0; i < octaves; i++) {\n        total += amplitude;\n        value += amplitude * snoise(st);\n        st *= 2.;\n        amplitude *= 0.5;\n    }\n\n    return value / total;\n}\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec2 sdFloor(vec3 uv) {\n\n    float time = iTime * speed;\n    vec2 scaled = uv.xz * scale;\n    \n    float n = fbm(vec3(scaled - time, time));\n\n    for (int i = 0; i<repeats; i++) {\n      float ang = n * PI;\n      n = fbm(vec3(scaled + vec2(cos(ang), sin(ang)) * n * .5, time));\n    }\n    \n    n = 1.-abs(n);\n    n = mix(n, smoothstep(1., 0., n), .15);\n        \n    return vec2(uv.y - n * height, n);\n}\n\n\nvec2 GetDist(vec3 p) {\n    vec2 d = sdFloor(p);\n    \n    return d;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\n\tvec2 dO=vec2(0.);\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x;\n        dO.y = dS.y;\n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 20.5, 0);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    ro.y = max(.01, ro.y);\n    \n    vec3 la = vec3(0, 3.5, 0);\n        \n    vec3 rd = GetRayDir(uv, ro, la, 1.);\n    vec3 col = vec3(0);\n   \n    vec2 d = RayMarch(ro, rd);\n\n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n    \n        col = vec3(.06, .48, .73);\n        col *= .5 + pow(d.y, 15.) * 25.;\n        float dif = dot(n, normalize(vec3(1,2,4)))*.5+.5;\n        col *= vec3(dif);\n        \n        float off = pow(1. - (d.x / MAX_DIST), .25);\n        col *= off;\n    }\n    \n    col = pow(col, vec3(.8545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Noise from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n//\tSimplex 3D Noise by Ian McEwan, Ashima Arts\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}