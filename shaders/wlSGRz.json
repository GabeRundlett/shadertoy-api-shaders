{
    "Shader": {
        "info": {
            "date": "1558339631",
            "description": "Demonstrating an experimental implementation of lattice convolution noise, by texturing a sphere and a plane.",
            "flags": 0,
            "hasliked": 0,
            "id": "wlSGRz",
            "likes": 7,
            "name": "Lattice Convolution Noise",
            "published": 3,
            "tags": [
                "procedural",
                "noise",
                "convolution"
            ],
            "usePreview": 0,
            "username": "tpfto",
            "viewed": 592
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019 J. M.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// experimental implementation of lattice convolution noise\n\n// permutation polynomial\n\nint permp (int i1, int i2)\n{\n      int t = (i1 + i2) & 255;\n        \n      return ((112 * t + 153) * t + 151) & 255;\n}\n\n// lattice convolution noise; adapted from Ebert et al., Texturing & Modeling: A Procedural Approach 3rd ed.\n\nfloat lcnoise(vec3 p)\n{\n    float f = 0.0;\n    ivec3 iv = ivec3(floor(p));\n    vec3 fv = fract(p) + 1.0;\n    \n    int m = 0; // initialization for Knuth's \"algorithm H\"\n    ivec3 di = ivec3(1), ki = ivec3(0);\n    ivec4 fi = ivec4(0, 1, 2, 3);\n    \n    // instead of writing a triply nested loop (!!)\n    // generate the indices for the neighbors in Gray order (Knuth's \"algorithm H\")\n    // see section 7.2.1.1 of TAOCP\n    \n\tfor (int k = 0; k < 64; k++) // loop through all neighbors\n    { \n\t\t // seeding\n        int s = permp(permp(permp(0, iv.z + ki.z), iv.y + ki.y), iv.x + ki.x) + 531;\n        \n        // L'Ecuyer simple LCG\n        s = (2469 * s) % 65521;\n        float c = 2.0 * (float(s)/65521.0) - 1.0;\n    \n        // Mitchell-Netravali cubic, https://doi.org/10.1145/54852.378514\n        float r = length(vec3(ki) - fv);\n        f += c * (( r < 1.0 ) ? (16.0 + r * r * (21.0 * r - 36.0)) : (( r < 2.0 ) ? (32.0 + r * ((36.0 - 7.0 * r) * r - 60.0)) : 0.0))/18.0;\n        \n        // updating steps for Knuth's \"algorithm H\"\n        m = fi[0]; fi[0] = 0; ki[2 - m] += di[m];\n        if ((ki[2 - m] % 3) == 0) {\n            di[m] = -di[m];\n            fi[m] = fi[m + 1]; fi[m + 1] = m + 1;\n        }\n\t}\n        \n    return f;\n}\n\n// modified MATLAB bone colormap\n\nvec3 bone( float t )\n{\n\t return 0.875 * t + 0.125 * clamp(vec3(4.0, 3.0, 3.0) * t - vec3(3.0, 1.0, 0.0), 0.0, 1.0);\n}\n\n// adapted from Inigo Quilez's demo, https://www.shadertoy.com/view/Xsl3Dl\n\nconst mat3 m = mat3( 0.00, -0.80,  0.70,\n                     0.80, -0.86, -0.48,\n                    -0.70,  0.48, -0.64 );\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0 * fragCoord.xy) / iResolution.y;\n\n     // camera movement\t\n\tfloat an = 0.5 * iTime;\n\tvec3 ro = vec3( 2.5 * cos(an), 1.0, 2.5 * sin(an) );\n    vec3 ta = vec3( 0.0, 1.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww, vec3(0.0, 1.0, 0.0) ) );\n    vec3 vv = normalize( cross(uu, ww));\n\t// create view ray\n\tvec3 rd = normalize( p.x * uu + p.y * vv + 1.5 * ww );\n\n    // sphere center\t\n\tvec3 sc = vec3(0.0, 1.0, 0.0);\n\n    // raytrace\n\tfloat tmin = 1.0e3;\n\tvec3  nor = vec3(0.0);\n\tfloat occ = 1.0;\n\tvec3  pos = vec3(0.0);\n\t\n\t// raytrace-plane\n\tfloat h = -ro.y/rd.y;\n\tif( h > 0.0 ) \n\t{ \n\t\ttmin = h; \n\t\tnor = vec3(0.0, 1.0, 0.0); \n\t\tpos = ro + h * rd;\n\t\tvec3 di = sc - pos;\n\t\tfloat l = length(di);\n\t\tocc = 1.0 - dot(nor, di/l)/(l * l); \n\t}\n\n\t// raytrace-sphere\n\tvec3  ce = ro - sc;\n\tfloat b = dot( rd, ce );\n\tfloat c = dot( ce, ce ) - 1.0;\n\th = b * b - c;\n\tif( h > 0.0 )\n\t{\n\t\th = -b - sqrt(h);\n\t\tif( h < tmin ) \n\t\t{ \n\t\t\ttmin = h; \n\t\t\tnor = normalize(ro + h * rd - sc); \n\t\t\tocc = 0.5 + 0.5 * nor.y;\n\t\t}\n\t}\n\n    // shading/lighting\t\n\tvec3 col = vec3(0.85);\n\tif( tmin < 100.0 )\n\t{\n\t    pos = ro + tmin * rd;\n\t    float f = 0.0;\n\t\t\n\t\tif( p.x < 0.0 )\n\t\t{\n\t\t\tf = lcnoise( 18.0 * pos );\n\t\t}\n\t\telse\n\t\t{\n            vec3 q = 7.5 * pos;\n            f  = 0.5000 * lcnoise( q ); q = m * q * 2.02;\n            f += 0.2500 * lcnoise( q ); q = m * q * 2.03;\n            f += 0.1250 * lcnoise( q ); q = m * q * 2.01;\n            f += 0.0625 * lcnoise( q );\n\t\t}\n\t\t\n\t\t\n\t\tf = smoothstep( -0.7, 0.7, f ) * occ;\n\t\tcol = bone(sqrt(f));\n\t\tcol = mix( vec3(0.85), col, exp( -0.005 * tmin * tmin ) );\n\t}\n\t\n\tfragColor = vec4(col * smoothstep( 0.006, 0.008, abs(p.x) ), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}