{
    "Shader": {
        "info": {
            "date": "1595894176",
            "description": "The spiraling shape will make you go insane\nBut everyone wants to see that groovy thing",
            "flags": 0,
            "hasliked": 0,
            "id": "3lSSDd",
            "likes": 8,
            "name": "Archimedes Spiral",
            "published": 3,
            "tags": [
                "spiral",
                "archimedes",
                "hypno",
                "hypnotize"
            ],
            "usePreview": 0,
            "username": "timeisbeautifulhere",
            "viewed": 856
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415\n\n#define SPIRAL_A 0.0\n#define SPIRAL_B 0.05\n\n#define SPIRAL_WIDTH 0.1\n#define MAX_RADIUS 2.0\n\n//Enable or disable color\n#define COLOR_ENABLED true\n\n#define SPIN_RATE 4.0\n#define COLOR_RATE 0.1\n#define COLOR_RATE2 0.001\n#define COLOR_CONST 0.1\n\n//https://en.wikipedia.org/wiki/Archimedean_spiral\n//If on spiral, return number of degrees (theta).\n//If not on spiral, return -1.0\nfloat checkOnSpiral(vec2 pc, float a, float b){\n    \n    //Solve for spiral theta, given the distance of the\n    //polar coordinate (r = a+b*theta)\n    float theta = (pc[1]-a)/b;\n    \n    //If polar coordinate angle is aligned with theta,\n    //it is on the spiral\n   \tif(abs(pc[0]-mod(theta,2.0*PI)) < SPIRAL_WIDTH)\n        return theta;\n   \telse\n        return -1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //(-1,1)\n    vec2 uv=(2.0*fragCoord - iResolution.xy) / iResolution.y;\n    \n    //polar coordinates\n    vec2 pc=vec2(\n        atan(uv.y, uv.x),\n        length(uv)\n    );\n    \n    //Time to hypnotize the viewer B)\n    pc[0]+=SPIN_RATE*iTime;\n    pc[0]=mod(pc[0], 2.0*PI);\n\n    vec3 col = vec3(0,0,0);\n    float spiral_degrees = checkOnSpiral(pc, SPIRAL_A, SPIRAL_B);\n    if(spiral_degrees>=0.0){\n        if(COLOR_ENABLED){\n            \n            //Don't ask me to explain what I just did here\n        \tfloat rate = mod(COLOR_RATE+(iTime*COLOR_RATE2), 2.0*PI);\n        \tfloat r = fract(spiral_degrees*rate);\n        \tfloat g = fract(spiral_degrees*(rate+COLOR_CONST));\n        \tfloat b = fract(spiral_degrees*(rate+COLOR_CONST+COLOR_CONST));\n        \tcol = vec3(r,g, b);\n        }else{\n            col = vec3(1.0,1.0,1.0);\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}