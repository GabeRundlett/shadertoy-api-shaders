{
    "Shader": {
        "info": {
            "date": "1686341967",
            "description": "gaze into the eye of god (god is a rhombus btw)\nnot blown away with how this one came out but that is the nature of sketches",
            "flags": 0,
            "hasliked": 0,
            "id": "DtVXDG",
            "likes": 3,
            "name": "neon-psychedelic-4",
            "published": 3,
            "tags": [
                "psychedelic"
            ],
            "usePreview": 0,
            "username": "LydianLights",
            "viewed": 200
        },
        "renderpass": [
            {
                "code": "const float iters = 8.0;\nfloat getTheD(in vec2 uv, in vec2 a, in float i, in float rd0, in float d0)\n{\n    float d = sdRhombus(uv, 1.5 * a);\n    d *= exp(1.3 * -rd0);\n    float k = (a.x > a.y ? 3.0 : 7.0) / 7.0;\n    k *= mod(i, 4.0) == 0.0 ? -1.0 : 1.0;\n    d = sin(3.0 * d + 0.5 * k * -iTime * ((iters - 0.2 * i) / iters) + 0.3 * i);\n    d = 2.0 * abs(d);\n    d = 0.02 / d;\n    \n    return d;\n}\n\nconst vec3 t = vec3(2.2, 1.5, 0.0);\nconst vec2 s = vec2(2.0, 1.0);\nvec3 mainPass(in vec2 fragCoord)\n{\n    vec2 uv0 = 2.0 * (fragCoord / iResolution.xy) - 1.0;\n    uv0.x *= iResolution.x / iResolution.y;\n    uv0 *= 2.0;\n    \n    float d0 = length(uv0);\n    float rd0 = sdRhombus(uv0, s);\n    \n    vec2 uv = uv0;\n    vec3 color = vec3(0.0);\n    \n    for (float i = 0.0; i < iters; i++)\n    {\n        uv = fract(0.7 * uv) - 0.5;\n        float d1 = getTheD(uv + t.xz, s.xy, i, rd0, d0);\n        float d2 = getTheD(uv - t.xz, s.xy, i, rd0, d0);\n        float d3 = getTheD(uv + t.zy, s.yx, i, rd0, d0);\n        float d4 = getTheD(uv - t.zy, s.yx, i, rd0, d0);\n        float d = d1 + d2 + d3 + d4;\n        \n        d = pow(d, 2.5);\n\n        vec3 c = d * palette(0.8 * i + 0.2 * iTime);\n        \n        color += c;\n    }\n    \n    return color;\n}\n\nvec3 antialias(in vec2 fragCoord)\n{\n    const float AA_STAGES = 0.0;\n    const float AA_TOTAL_PASSES = AA_STAGES * AA_STAGES + 1.0;\n    const float AA_JITTER = 0.5;\n    \n    vec3 color = mainPass(fragCoord);\n    for (float x = 0.0; x < AA_STAGES; x++)\n    {\n        for (float y = 0.0; y < AA_STAGES; y++)\n        {\n            vec2 offset = AA_JITTER * (2.0 * hash22(vec2(x, y)) - 1.0);\n            color += mainPass(fragCoord + offset);\n        }\n    }\n    return color / AA_TOTAL_PASSES;\n}\n\nvec3 gamma(in vec3 color)\n{\n    return pow(max(color, 0.0), vec3(1.0 / 2.2));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 color = mainPass(fragCoord);\n    color = gamma(color);\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.1415927;\nconst float ROOT_3 = 1.7320508;\n\n// https://iquilezles.org/articles/palettes/\nvec3 palette(in float t)\n{\n    vec3 a = vec3(0.5, 0.5, 0.9);\n    vec3 b = vec3(0.1, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.0, 0.33, 0.67);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\n// https://www.shadertoy.com/view/4djSRW\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}