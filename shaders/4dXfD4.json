{
    "Shader": {
        "info": {
            "date": "1496141689",
            "description": "Jellyfish (use mouse to observe)",
            "flags": 0,
            "hasliked": 0,
            "id": "4dXfD4",
            "likes": 9,
            "name": "Deep Dive",
            "published": 3,
            "tags": [
                "raymarch",
                "jellyfish"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 733
        },
        "renderpass": [
            {
                "code": "// \"Deep Dive\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Motivation from \"Luminescence\" by BigWings\n\nfloat PrSphAnDf (vec3 p, float r, float w);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsAnDf (vec3 p, float r, float w, float h);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nvec3 Hashv3f (float p);\nfloat Hashfv3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 vpHit, cId, qHit, ltDir;\nconst vec3 jRep = vec3 (6., 30., 6.);\nfloat dstFar, tCur, qRnd;\nint idObj;\nconst float pi = 3.14159;\n\nfloat JFishDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, dc, hr, a, r;\n  p -= (Hashv3f (qRnd) - 0.5) * jRep * vec3 (0.5, 0.7, 0.5);\n  hr = -1.2 + 3. * SmoothBump (0.2, 0.7, 0.2, mod (0.2 * tCur + qRnd, 1.));\n  p.y -= 2. + 0.5 * hr;\n  p.xz *= 1. + 0.2 * hr;\n  dc = SmoothMax (PrSphAnDf (p, 1., 0.03), -0.2 - p.y, 0.1);\n  dMin = dc;\n  idObj = 1;\n  p.xz += Rot2D (vec2 (0.3 * sin (p.y + 2. * tCur + 2. * pi * qRnd) *\n     (1. - smoothstep (-2., 0.5, p.y)), 0.), 2. * pi * qRnd);\n  qHit = p;\n  r = length (p.xz);\n  a = (r > 0.) ? atan (p.z, - p.x) / (2. * pi) : 0.;\n  q = p;\n  q.xz = Rot2D (q.xz, 2. * pi * floor (7. * a + 0.5) / 7.);\n  q.xy += vec2 (0.3, 3.2);\n  d = PrCylDf (q.xzy, (0.045 + 0.01 * q.y) * (1. +\n     0.3 * (sin (24. * q.y) + sin (40. * q.y))), 4.);\n  if (d < dMin) idObj = 2;\n  dMin = min (dMin, SmoothMin (dc, d, 0.1));\n  q = p;\n  q.xz = Rot2D (q.xz, 2. * pi * floor (25. * a + 0.5) / 25.);\n  q.xy += vec2 (0.84, 2.);\n  d = PrCylDf (q.xzy, (0.035 + 0.02 * q.y) * (1. + 0.1 * sin (100. * q.y) *\n     (1. - smoothstep (-1., 0., p.y))), 2.);\n  if (d < dMin) idObj = 3;\n  dMin = min (dMin, SmoothMin (dc, d, 0.07));\n  return 0.7 * dMin;\n}\n\nfloat JFishRay (vec3 ro, vec3 rd)\n{\n  vec3 p, h, rdi;\n  float dHit, d;\n  ro.y -= tCur;\n  dHit = 0.;\n  rdi = 1. / (rd + 0.0001);\n  for (int j = 0; j < 250; j ++) {\n    p = ro + rd * dHit;\n    cId = floor (p / jRep);\n    h = (jRep * (cId + step (0., rd)) - p) * rdi;\n    p -= jRep * (cId + 0.5);\n    qRnd = Hashfv3 (cId);\n    d = (qRnd < 0.7 && length (cId.xz) > 2.) ? JFishDf (p) : dstFar;\n    d = min (d, abs (min (min (h.x, h.y), h.z)) + 0.1);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  vpHit = p;\n  return dHit;\n}\n\nvec3 JFishNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.0001, -0.0001, 0.);\n  v = vec4 (JFishDf (p + e.xxx), JFishDf (p + e.xyy),\n     JFishDf (p + e.yxy), JFishDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjDf (vec3 p)\n{\n  p.xz = Rot2D (p.xz, 2. * pi * (floor (16. *\n     ((length (p.xz) > 0.) ? atan (p.z, - p.x) / (2. * pi) : 0.)) + 0.5) / 16.);\n  p.z = abs (p.z);\n  return max (PrCapsAnDf (p.xzy, 1., 0.005, 0.3),\n     SmoothMin (abs (mod (p.y, 0.2) - 0.1) - 0.003,\n     dot (p.xz, vec2 (sin (0.02 * 2. * pi / 32.), cos (0.02 * 2. * pi / 32.))), 0.003));\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0002 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.00005, -0.00005, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 BgCol (vec3 rd)\n{\n  float t, gd, b;\n  t = 4. * tCur;\n  b = dot (vec2 (atan (rd.x, rd.z), 0.5 * pi - acos (rd.y)), vec2 (2., sin (rd.x)));\n  gd = clamp (sin (5. * b + t), 0., 1.) * clamp (sin (3.5 * b - t), 0., 1.) +\n     clamp (sin (21. * b - t), 0., 1.) * clamp (sin (17. * b + t), 0., 1.);\n  return vec3 (0.25, 0.4, 1.) * (0.24 + 0.44 * (rd.y + 1.) * (rd.y + 1.)) *\n     (1. + gd * 0.05);\n}\n\nfloat TurbLt (vec3 p, vec3 n, float t)\n{\n  vec2 q, qq, a1, a2;\n  float c, tt;\n  q = vec2 (dot (p.yzx, n), dot (p.zxy, n));\n  q = 2. * pi * mod (q, 1.) - 256.;\n  t += 11.;\n  c = 0.;\n  qq = q;\n  for (float k = 1.; k <= 7.; k ++) {\n    tt = t * (1. + 1. / k);\n    a1 = tt - qq;\n    a2 = tt + qq;\n    qq = q + tt + vec2 (cos (a1.x) + sin (a2.y), sin (a1.y) + cos (a2.x));\n    c += 1. / length (q / vec2 (sin (qq.x), cos (qq.y)));\n  }\n  return clamp (pow (abs (1.25 - abs (0.167 + 40. * c)), 8.), 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, bg;\n  float dstObj, dstCage, a;\n  dstObj = JFishRay (ro, rd);\n  dstCage = ObjRay (ro, rd);\n  if (dstCage < min (dstObj, dstFar)) {\n    dstObj = dstCage;\n    idObj = 4;\n  }\n  bg = BgCol (rd);\n  if (dstObj < dstFar) {\n    if (idObj != 4) {\n      vn = JFishNf (vpHit);\n      a = atan (qHit.x, qHit.z);\n      col = HsvToRgb (vec3 (mod (qRnd + sin (0.2 * tCur), 1.), 0.6, 0.8));\n      if (idObj == 1) col = mix ((bg + 0.1) * (2. + vn.y), 1.2 * col,\n         SmoothBump (0.4, 0.6, 0.05, mod (4. * qHit.y +\n         sign (qRnd - 0.5) * a / pi + 0.1 * sin (8. * a) +\n         2. * tCur + qRnd, 1.)) * SmoothBump (-0.1, 0.9, 0.1, qHit.y));\n      else if (idObj == 2) col = mix (0.6 * col + 0.1, vec3 (1.),\n         SmoothBump (0.2, 0.7, 0.1, 0.5 + 0.5 * sin (qRnd +\n         3. * (1. + qRnd) * qHit.y + 4. * (1. + 0.5 * qRnd) * tCur)) *\n         SmoothBump (0.07, 0.93, 0.03, mod (0.3 * tCur + 3. * qRnd, 1.))) *\n         (1. - 0.3 * smoothstep (-2., 0., qHit.y));\n      else if (idObj == 3) col = mix (col, (bg + 0.1) * (2. + vn.y),\n         smoothstep (-0.5, 0., qHit.y));\n      col = mix (mix (bg, col, max (0., - dot (vn, rd))), bg,\n         smoothstep (0.6, 1., min (dstObj / dstFar, 1.)));\n      col += 0.3 * TurbLt (0.05 * vpHit, abs (vn), 0.3 * tCur) *\n         smoothstep (-0.3, -0.1, vn.y);\n    } else {\n      ro += dstObj * rd;\n      vn = VaryNf (500. * ro, ObjNf (ro), 0.5);\n      col = vec3 (0.6, 0.7, 0.6) * (0.2 + 0.6 * max (dot (vn, ltDir), 0.)) +\n         0.2 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 64.);\n    }\n  } else col = bg;\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCur += 20.;\n  if (mPtr.z > 0.) {\n    az = 2. * pi * mPtr.x;\n    el = clamp (1. * pi * mPtr.y, -0.3 * pi, 0.3 * pi);\n  } else {\n    az = pi * (-1. + 2. * SmoothBump (0.25, 0.75, 0.25, mod (0.003 * tCur, 1.)));\n    el = 0.2 * pi * (-1. + 2. * SmoothBump (0.25, 0.75, 0.25, mod (0.019 * tCur, 1.)));\n  }\n  ro = vec3 (0., 0., -0.7);\n  zmFac = 4.2;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  ro = vuMat * ro;\n  ltDir = vuMat * normalize (vec3 (0., 2., -1.));\n  dstFar = 120.;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec3 Hashv3f (float p)\n{\n  return fract (sin (vec3 (p, p + 1., p + 2.)) *\n     vec3 (cHashM, cHashM * 0.43, cHashM * 0.37));\n}\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, cHashA3)) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) -\n     Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat PrSphAnDf (vec3 p, float r, float w)\n{\n  return abs (length (p) - r) - w;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsAnDf (vec3 p, float r, float w, float h)\n{\n  vec3 b;\n  float d;\n  p.z = abs (p.z);\n  b = vec3 (0.);\n  b.z = min (p.z, h + w);\n  d = length (p - b);\n  b.z = min (p.z, h - w);\n  return max (d - r, - length (p - b) + r) - w;\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}