{
    "Shader": {
        "info": {
            "date": "1551224292",
            "description": "3d version of [url]https://www.shadertoy.com/view/Xl2XRG[/url].\nmove with arrow keys and mouse.",
            "flags": 48,
            "hasliked": 0,
            "id": "Ws23Rc",
            "likes": 8,
            "name": "smooth menger sponge transition",
            "published": 3,
            "tags": [
                "3d",
                "transition",
                "mengersponge",
                "octree"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 677
        },
        "renderpass": [
            {
                "code": "#define HASHSCALE3 vec3(.1031, .1030, .0973)\n\n//subdivision size (tree*tree*tree), 2.0 is default octree\n#define tree 3.0\n//subdivide limit\n#define detail 4\n\n#define steps 3000\n#define maxdistance 10.0\n#define PI 3.14159\n\n//hash function by Dave_Hoskins https://www.shadertoy.com/view/4djSRW\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nvec2 boxIntersect( in vec3 ro, in vec3 rd, in vec3 ird, in float rad, out vec3 nor) \n{\n    vec3 n = ird*ro;\n    vec3 k = abs(ird)*rad;\n\n    vec3 t1 = n - k;\n    vec3 t2 = n + k;\n\n    float tN = max(max(max( t1.x, t1.y ),t1.z),0.0);\n    float tF = min(min( t2.x, t2.y ),t2.z);\n\n    nor = step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\n    return vec2( tN, tF );\n}\n\nint seed1;\nint seed2;\n\n#if 1\nfloat getvoxel(vec3 p, float size) {\n    p = round(mod(p/size+0.5,3.0)-0.5);\n    \n    int num = int(p.x)+int(p.y)*3+int(p.z)*9;\n    float a1 = float((seed1>>num)&1);\n    float a2 = float((seed2>>num)&1);\n    \n    float b = max(mod(iTime,4.0)-3.0,0.0);\n    \n    return mix(a1,a2,b);\n}\n\n#else\n\n//random function from https://www.shadertoy.com/view/MlsXDf\nfloat rnd(vec4 v) { return fract(4e4*sin(dot(v,vec4(13.46,41.74,-73.36,14.24))+17.34)); }\n\nfloat getvoxel(vec3 p, float size) {\n    \n    p = round(p/size);\n    \n    float val = rnd(vec4(p,size));\n    \n    \n    \n    return sqrt(val);\n    \n    //return 0.5+0.5*dot(sin(p/size+iTime/size),vec3(1))/3.0;\n}\n#endif\n\n//ray-cube intersection, on the inside of the cube\nvec3 voxel(vec3 ro, vec3 rd, vec3 ird, float size)\n{\n    size *= 0.5;\n    \n    vec3 hit = -(sign(rd)*(ro-size)-size)*ird;\n    \n    return hit;\n}\n\nvec3 getDiffuse(vec3 p) {\n    \n    //vec3 col = normalize(hash33(p));\n    \n    vec3 col = sqrt(sqrt(0.5+0.5*sin(p*p.yzx+p.zxy)));\n    return col;\n    \n}\n\nvec4 getdata(int index) {\n    ivec2 p;\n    p.x = index%int(iResolution.x);\n    p.y = index/int(iResolution.x);\n    return texelFetch(iChannel0,p,0);\n}\n\n//Integer Hash - I by IQ\n//https://www.shadertoy.com/view/llGSzw\nfloat hash1( uint n ) \n{\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return float( n & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\nvoid mainImage( out vec4 fragColor,  vec2 fragCoord )\n{\n    \n    fragColor = vec4(0.0);\n    vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) /iResolution.y;\n    \n    vec3 ro = getdata(campos).xyz;\n    vec3 rd = normalize(vec3(uv,1));\n\n    vec4 rotcam = getdata(camrot);\n\n    rd.zy *= rot(rotcam.y);\n    rd.zx *= rot(rotcam.x);\n    \n    int[8] seeds = int[8](\n        129928175,\n        4289552,\n        131285248,\n        96210799,\n        85205317,\n        262735,\n        85197125,\n        12324399);\n    \n    \n    uint fracid = uint(iTime*0.25);\n    if (fracid > 6u) {\n        seed2 = int(hash1(fracid+1u)*134217728.0);\n    } else {\n    \tseed2 = seeds[(fracid+1u)];\n    }\n    if (fracid > 7u) {\n        seed1 = int(hash1(fracid)*134217728.0);\n    } else {\n    \tseed1 = seeds[fracid];\n    }\n    \n    \n    \n    vec3 cam = ro;\n    \n    float size = 1.0;\n    vec3 lro = mod(ro,size)/size;\n    vec3 fro = ro-lro;\n    \n    float size2 = size;\n    vec3 lro2 = lro;\n    vec3 fro2 = fro;\n    \n    vec3 ird = 1.0/max(abs(rd),0.001);\n    vec3 srd = sign(rd);\n    vec3 mask;\n    bool exitoct = false;\n    int recursions = 0;\n    float dist = 0.0;\n    int i;\n    vec3 normal = vec3(0.0);\n    \n    //the octree traverser loop\n    //each iteration i either:\n    // - check if i need to go up a level\n    // - check if i need to go down a level\n    // - check if i hit a cube\n    // - go one step forward if octree cell is empty\n    // - repeat if i did not hit a cube\n    for (i = 0; i < steps; i++)\n    {\n        if (dist > maxdistance) break;\n        float voxelsize = getvoxel(fro,size);\n        \n        //if (recursions < detail && voxelsize > 0.0) voxelsize = 1.0;\n        \n        vec3 b;\n        vec2 box = boxIntersect(lro*2.0-1.0, rd, -ird*srd, voxelsize, b);\n        \n        bool hit = box.x < box.y;\n        \n        //i go up a level\n        if (exitoct)\n        {\n            \n            vec3 newfro = fro - mask*sign(rd)*size;\n            \n            newfro = floor(newfro/size/tree+0.5/tree)*size*tree;\n            \n        \tfloat voxelsize2 = getvoxel(newfro,size*tree);\n            \n            lro += (fro-newfro)/size;\n            lro /= tree;\n            \n            lro = (lro-0.5)*voxelsize2+0.5;\n            \n            vec3 box2 = voxel(lro, rd, ird, 1.0);\n            \n            if (box2.x < min(box2.y,box2.z)) {\n                mask = vec3(1,0,0);\n            } else if (box2.y < box2.z) {\n                mask = vec3(0,1,0);\n            } else {\n                mask = vec3(0,0,1);\n            }\n            \n            float len = dot(box2,mask);\n            \n            lro += rd*len;\n            \n            lro -= mask*sign(rd);\n            \n            recursions--;\n            size2 *= tree/voxelsize2;\n            size *= tree;\n            \n            dist += len*size;\n            \n            fro = newfro+mask*sign(rd)*size;\n            \n            \n            exitoct = (recursions > 0) && (abs(mod(dot(fro,mask)/size+0.5,tree)-0.5-step(dot(rd,mask),0.0)*(tree-1.0))<0.1);\n            \n            //break;\n        }\n        //subdivide\n        else if(hit&&recursions<detail)\n        {\n            //if(recursions==detail) break;\n            \n            recursions++;\n            size /= tree;\n            \n            lro += rd*box.x*0.5;\n            lro = (lro-0.5)/voxelsize+0.5;\n            lro *= tree;\n            \n            dist += box.x*0.5*size2;\n            size2 /= tree;\n            size2 *= voxelsize;\n            \n            \n            //find which of the 8 voxels i will enter\n            vec3 mask2 = clamp(floor(lro),0.0,tree-1.0);\n            fro += mask2*size;\n            lro -= mask2;\n            \n            //break;\n            \n        }\n        //move forward\n        else if (!hit)\n        {\n            //raycast and find distance to nearest voxel surface in ray direction\n            vec3 hit = voxel(lro, rd, ird, 1.0);\n            \n            if (hit.x < min(hit.y,hit.z)) {\n                mask = vec3(1,0,0);\n            } else if (hit.y < hit.z) {\n                mask = vec3(0,1,0);\n            } else {\n                mask = vec3(0,0,1);\n            }\n            \n            //mask = vec3(lessThan(hit,min(hit.yzx,hit.zxy)));\n            float len = dot(hit,mask);\n            \n            \n            //moving forward in ray direction, and checking if i need to go up a level\n            dist += len*size2;\n            lro += rd*len-mask*sign(rd);\n            fro = fro+mask*sign(rd)*size;\n            \n            exitoct = (recursions > 0) && abs(mod(dot(fro,mask)/size+0.5,tree)-0.5-step(dot(rd,mask),0.0)*(tree-1.0)) < 0.1;\n            \n            normal = mask;\n            \n            if (voxelsize > 0.0&&recursions == 0) {\n                //break;\n            }\n        } else {\n            lro += rd*box.x*0.5;\n            lro = (lro-0.5)/voxelsize+0.5;\n            normal = b;\n            break;\n        }\n    }\n    \n    \n    ro += rd*dist;\n    if(i < steps && dist < maxdistance)\n    {\n        vec3 color = getDiffuse(fro/size);\n        \n        normal *= -sign(rd);\n        \n        vec3 light0n = normalize(vec3(1,1,-1));\n        vec3 light0col = vec3(0.9,0.3,0.1);\n        float light0 = clamp(dot(light0n,normal),0.2,1.0);\n\n        vec3 light1n = normalize(sin(iTime*vec3(0.321,0.841,0.54)));\n        vec3 light1col = vec3(0.2,0.7,0.8);\n        float light1 = clamp(dot(light1n,normal),0.2,1.0);\n\n        color = color*light0*light0col+color*light1*light1col;\n        \n    \tfragColor = vec4(color,1.0);\n        \n        //fragColor = vec4(dist/maxdistance);\n        \n        fragColor *= 1.0-dist/maxdistance;\n    } else {\n        fragColor = vec4(0.0);\n    }\n    //fragColor = vec4(float(i)/float(steps));\n    fragColor = sqrt(fragColor);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float getkey(int x, int y)\n{\n    return texelFetch(iChannel1,ivec2(x,y),0).x;\n}\n\nvec4 getdata(int index) {\n    ivec2 p;\n    p.x = index%int(iResolution.x);\n    p.y = index/int(iResolution.x);\n    return texelFetch(iChannel0,p,0);\n}\nvec4 updatedata(int index) {\n    vec4 data = getdata(index);\n    \n    vec4 iMouse2 = getdata(lastmouse);\n    \n    \n    bool refresh = iFrame == 0;\n    \n    if (index == lastmouse) {\n        return iMouse;\n    } else if (index == campos) {\n        \n        if (refresh) {\n            return vec4(vec3(1.3),1);\n        }\n        \n        vec4 rotcam = getdata(camrot);\n        \n        vec3 move = vec3(getkey(MOVE_RIGHT,0)-getkey(MOVE_LEFT,0),\n                         getkey(MOVE_UP   ,0)-getkey(MOVE_DOWN,0),\n                         getkey(MOVE_FORW ,0)-getkey(MOVE_BACK,0));\n        \n        move.zy *= rot(rotcam.y);\n        move.zx *= rot(rotcam.x);\n        \n        \n        vec3 newpos = data.xyz+movespeed*move*iTimeDelta;\n        \n        data.xyz = newpos;\n        \n        return data;\n    } else if (index == camrot) {\n        \n        if (refresh) {\n            return vec4(0);\n        }\n        \n        if (min(iMouse2.z,iMouse.z) > 0.5) {\n            data.xy += (iMouse.xy-iMouse2.xy)/iResolution.y*sensitivity;\n        }\n        return data;\n    }\n    \n    \n    return data;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coord = ivec2(fragCoord);\n    fragColor = updatedata(coord.x+coord.y*int(iResolution.x));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define lastmouse 0\n#define campos 1\n#define camrot 2\n\n#define rot(A) mat2(cos(A),-sin(A),sin(A),cos(A))\n#define sqr(a) (a*a)\n\n#define sensitivity 3.0\n#define movespeed 0.5\n\n//keyboard keys\n#define KEY_UP    38\n#define KEY_DOWN  40\n#define KEY_RIGHT 39\n#define KEY_LEFT  37\n#define KEY_SHIFT 16\n#define KEY_CTRL  17\n\n//movement keys\n#define MOVE_FORW   KEY_UP\n#define MOVE_LEFT   KEY_LEFT\n#define MOVE_RIGHT  KEY_RIGHT\n#define MOVE_BACK   KEY_DOWN\n#define MOVE_UP     KEY_SHIFT\n#define MOVE_DOWN   KEY_CTRL\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}