{
    "Shader": {
        "info": {
            "date": "1599235857",
            "description": "One-line dithering function that doesn't require a noise texture or Bayer matrices.\n\nFork of Zavie's copy (https://www.shadertoy.com/view/4dcSRX) of Alex Vlachos' modified version of lestyn's RGB dither from Portal 2.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tjfzy",
            "likes": 5,
            "name": "Dither One-Liner (No Sampling)",
            "published": 3,
            "tags": [
                "noise",
                "banding",
                "filter",
                "dither",
                "dithering",
                "oneliner"
            ],
            "usePreview": 0,
            "username": "kowbell",
            "viewed": 443
        },
        "renderpass": [
            {
                "code": "/** \n * Dither effect which requires no texture sampling/matrices.\n * Supposed to be pretty good for VR, too.\n *\n * Adapted from Alex Vlachos' 2015 GDC Talk \n * (p. 45 in http://alex.vlachos.com/graphics/Alex_Vlachos_Advanced_VR_Rendering_GDC2015.pdf)\n *\n * No explicit license mentioned, so use this at your own legal peril.\n * I've seen it used on this site, so it's probably safe. Thanks, Alex!\n * Originally copied from Zavie (https://www.shadertoy.com/view/4dcSRX)\n */\n\n\n// Minimal version macro (by coyote)\n#define dither(c,u,d) floor(fract(dot(vec2(131,312),u+iTime)/vec3(103,71,97))*.375-.1875+c*d)/d\n\n\n// Small One-liner function version with parameter names\n// vec3 dither(vec3 col, vec2 coord, float depth){vec3 vD=vec3(dot(vec2(131.,312.),coord.xy+iTime));vD.rgb=fract(vD.rgb/vec3(103.0,71.0,97.0))-vec3(0.5,0.5,0.5);return floor(((vD.rgb/depth)*0.375+col)*depth)/depth;}\n\n// Non-minified version\n/*\nvec3 vlachosDither(vec3 srcColor, vec2 fragCoord, float colorDepth)\n{\n    vec3 vDither = vec3(dot(vec2(131.0, 312.0), fragCoord.xy + iTime));\n    vDither.rgb = fract(vDither.rgb / vec3(103.0, 71.0, 97.0)) - vec3(0.5, 0.5, 0.5);\n    vec3 dither = (vDither.rgb / colorDepth) * 0.375;\n    return floor((dither + srcColor) * colorDepth) / colorDepth;\n}\n*/\n\n// Basic demo with a video\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb;\n    fragColor = vec4(dither(col, fragCoord, 8.),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}