{
    "Shader": {
        "info": {
            "date": "1468165744",
            "description": "Dynamic fractal - treats iterated point as particle with inertia. Can give some really interesting variations in look. Uncomment DYNAMICS_ON_MOUSE to explore!",
            "flags": 0,
            "hasliked": 0,
            "id": "ll33zN",
            "likes": 22,
            "name": "Starry Space",
            "published": 3,
            "tags": [
                "kaliset",
                "dynamicfractal"
            ],
            "usePreview": 0,
            "username": "huwb",
            "viewed": 1164
        },
        "renderpass": [
            {
                "code": "// Started as Star Nest by Pablo RomÃ¡n Andrioli\n// AA modifications by Beibei Wang and Huw Bowles (https://www.shadertoy.com/view/XllGzN)\n\n// This shader is an idea i have been meaning to try out for a while which I'll\n// call a \"dynamic fractal\".\n\n// The idea is simple - treat the iteration point as a particle with inertia (non-zero mass).\n// In each iteration compute a new target point for the particle using the fractal formula and\n// then apply a force to the particle to push it towards this position.\n\n// This can change the appearance of the result significantly.\n\n// Uncomment this define to set the sprint constants with the mouse\n//#define DYNAMICS_ON_MOUSE\n\n// This content is under the MIT License.\n\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 18\n#define stepsize 0.050\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.10 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.760\n#define saturation 0.800\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=(iTime-3308.)*speed;\n\n\t\n\tvec3 from=vec3(1.,.5,0.5);\n\t\n\t\n\tvec3 forward = vec3(0.,0.,1.);\n\t\n\t//mouse rotation\n\tfloat a1 = 0.3;//3.1415926 * (iMouse.x/iResolution.x-.5);\n\tmat2 rot1 = mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n\tfloat a2 = .6;//3.1415926 * (iMouse.y/iResolution.y-.5);\n\tmat2 rot2 = mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n\tdir.xz*=rot1;\n\tforward.xz *= rot1;\n\tdir.yz*=rot1;\n\tforward.yz *= rot1;\n\n\t// pan (dodgy)\n    float panmul = 1.;\n    #ifdef DYNAMICS_ON_MOUSE\n    panmul = 0.;\n\t#endif\n\tfrom += (panmul * iMouse.x/iResolution.x-.5)*vec3(-forward.z,0.,forward.x);\n    \n\t//zoom\n\tfloat zooom = time;\n\tfrom += forward* zooom;\n\tfloat sampleShift = mod( zooom, stepsize );\n\tfloat zoffset = -sampleShift;\n\tsampleShift /= stepsize; // make from 0 to 1\n\t\n    // dynamics - proportional and differential gains (i.e. spring and damping constants)\n    float kp = 1.36;\n    float kv = .9;\n    #ifdef DYNAMICS_ON_MOUSE\n    kp = 2.*iMouse.x/iResolution.x;\n    kv = 2.*iMouse.y/iResolution.y;\n    #endif\n    \n\t//volumetric rendering\n\tfloat s=0.1;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+(s+zoffset)*dir;// + vec3(0.,0.,zoffset);\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n        vec3 pv = vec3(0.);\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tvec3 newp=abs(p)/dot(p,p)-formuparam; // the magic formula\n            // update particle vel\n            pv += (newp-p)*kp + (-pv)*kv;\n            // update particle pos\n            p += pv;\n            float D = abs(length(p)-pa); // absolute sum of average change\n            a += i > 7 ? min( 12., D) : D;\n\t\t\tpa=length(p);\n\t\t}\n\t\t//float dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\t//if (r>3) fade*=1.-dm; // dark matter, don't render near\n\t\t// brightens stuff up a bit\n\t\tfloat s1 = s+zoffset;\n\t\t// need closed form expression for this, now that we shift samples\n\t\tfloat fade = pow(distfading,max(0.,float(r)-sampleShift));\n\t\tv+=fade;\n        \n\t\t// fade out samples as they approach the camera\n\t\tif( r == 0 )\n\t\t\tfade *= 1. - sampleShift;\n\t\t// fade in samples as they approach from the distance\n\t\tif( r == volsteps-1 )\n\t\t\tfade *= sampleShift;\n\t\tv+=vec3(2.*s1,4.*s1*s1,16.*s1*s1*s1*s1)*a*brightness*fade; // coloring based on distance\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.005,1.);\t\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}