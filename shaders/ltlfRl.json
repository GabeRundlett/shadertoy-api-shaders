{
    "Shader": {
        "info": {
            "date": "1512986161",
            "description": "A very naive dart-throwing  algorithm to make space-filling disks\nreference: [url]http://paulbourke.net/fractals/randomtile/[/url]\n\nultimate MIPmap is used to detect intersections. \n( Note the bug on the right column on some browsers/resolutions. )",
            "flags": 32,
            "hasliked": 0,
            "id": "ltlfRl",
            "likes": 3,
            "name": "dart throwing / space filling",
            "published": 3,
            "tags": [
                "bug",
                "short",
                "filling",
                "gpmipmap"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 796
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 U )\n{\n    O = texelFetch(iChannel0, ivec2(U), 0);\n  //O = O.g > 0. ? vec4(1) : O.b == 0. ? vec4(0) : .6 + .6 * cos( 6.3*O.b + vec4(0,23,21,0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// principle : O.a stores intersection = previous * tested disk.\n//             Ultimate MIPmap = 0 => no intersection => state += tested disk.\n\n#define p -0.2                                // radius time-decrease power law\n#define shape(P,U,r) max( 0., r-length(P-U) ) // put your favorite shape here\n\n#define rand(p)  fract( 43758.5453123 * sin( p* vec2(12.9898, 78.233)) )\n \nvoid mainImage( out vec4 O, vec2 U )\n{\n    int i = iFrame;\n    if (i == 0 ) { O-=O; return; } \n    vec2 R = iResolution.xy, P;\n    \n    O = texelFetch(iChannel0, ivec2(U), 0);   // previous state\n    float v = textureLod(iChannel0, vec2(.5), 100.).a, // result of .g collision test\n         r0 = .2*R.y,\n          r = r0 * pow(float(i), p);          // radius time-decrease law\n    if (v==0.) O.r += O.g,                    // no collision between .r and .g: accept .g\n               O.b += r/r0* min(O.g,1.);      // drawable version (we could antialias there).\n            // O.b += (16./r)*float(0.<O.g);  // variant (to use with rainbow in Image)\n    O.g = 0.;                                 // erase .g, reset test buffer .a\n    O.a = O.r;\n    P = rand(vec2(i))*R;                      // try new disk\n    O.g += shape(P,U,r);                      // temptative shape stored in .g\n    O.a *= float(O.g>0.);                     // intersection in .a. MIPmap cumulates on whole image\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}