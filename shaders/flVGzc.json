{
    "Shader": {
        "info": {
            "date": "1638104962",
            "description": "Steel mesh",
            "flags": 0,
            "hasliked": 0,
            "id": "flVGzc",
            "likes": 16,
            "name": "Steel mesh",
            "published": 3,
            "tags": [
                "material"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 269
        },
        "renderpass": [
            {
                "code": "// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define MAX_STEPS 32\n#define MAX_DIST 6.\n#define SURF_DIST .001\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define MATERIAL_STEAL 0\n#define MATERIAL_WALL 1\n#define ZERO (min(iFrame,0))\n\nvec2 combine(vec2 val1, vec2 val2 ){\n    return (val1.x < val2.x)?val1:val2;\n}\n\n// IQ's 3D noise function. It's faster than the FBM and enough for me to design.\n// The compile is also faster.\nfloat noise3d( vec3 p )\n{\n    p*=0.5;\n    const vec3 s = vec3(27, 111, 57);\n    vec3 ip = floor(p); p -= ip; \n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    p = p*p*(3. - 2.*p); \n    //p *= p*p*(p*(p*6. - 15.) + 10.); // option\n    h = mix(fract(sin(h) * 43758.545), fract(sin(h + s.x) * 43758.545), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); \n}\n\n// thx:iq https://iquilezles.org/articles/distfunctions\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nfloat sdSimpleCylinder(vec3 p, float r, float h){\n    float d = length(p.xz)-r;\n    d = max(abs(p.y)-h,d);\n    return d;\n}\n\n// vertical version\nfloat sdTorus( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length(p.xy)-t.x,p.z);\n    return length(q)-t.y;\n}\n\n// thx:iq https://iquilezles.org/articles/distfunctions2d\nfloat sdEquilateralTriangle( in vec2 p )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\n// thx:iq https://iquilezles.org/articles/distfunctions2d\nfloat sdUnevenCapsule( vec2 p, float r1, float r2, float h )\n{\n    p.x = abs(p.x);\n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(p,vec2(-b,a));\n    if( k < 0.0 ) return length(p) - r1;\n    if( k > a*h ) return length(p-vec2(0.0,h)) - r2;\n    return dot(p, vec2(a,b) ) - r1;\n}\n\nfloat dFakeSpring(vec3 p){\n    for(int i = 0; i<4; i++){\n        p.z = abs(p.z);\n        p.z-=0.025;\n    }\n\n    float d = sdTorus(p,vec2(0.05,0.023));\n    return d;\n}\n\nfloat steelMesh(vec3 p){\n    float d = dFakeSpring(p);\n    \n    p.yz = abs(p.yz);\n    p.z-=0.2;\n    p.y-=0.32;\n    p.y+=0.22;\n    p.yz*=Rot(radians(-35.0));\n    float d2 = sdSimpleCylinder(p,0.02,0.5);\n    d = opSmoothUnion(d,d2,0.05);\n    return d;\n}\n\nvec2 GetDist(vec3 p) {\n    p.y+=iTime*0.1;\n    p += noise3d(p*300.0)*0.002;   \n    vec3 prevP = p;\n    \n    p.x = mod(p.x,1.2)-0.6;\n    p.y = mod(p.y,1.0)-0.5;\n    p.xz*=Rot(radians(90.0));\n    \n    float d = dFakeSpring(p);\n    d = steelMesh(p);\n    p = prevP;\n    \n    p.x+=0.6;\n    p.y+= 0.5;\n    p.x = mod(p.x,1.2)-0.6;\n    p.y = mod(p.y,1.0)-0.5;\n    \n    p.xz*=Rot(radians(90.0));\n    float d2 = steelMesh(p);\n    d = min(d,d2);\n    \n    p = prevP;\n    float wallD = p.z+0.01;\n    return combine(vec2(d,MATERIAL_STEAL),vec2(wallD,MATERIAL_WALL));\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n\n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n                \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<4; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,2,-2));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float shadow = step(RayMarch(p+n*0.3,lightDir,1.0, 15).x,0.9);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*shadow*occ;\n    diffCol += col*vec3(1.0,1.0,0.9)*skyDiff*occ;\n    diffCol += col*vec3(0.3,0.3,0.3)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 20.)*occ; // spec\n        \n    return diffCol;\n}\n\nvec3 iconBg(vec2 p, vec3 col){\n    float d = sdEquilateralTriangle(p)-0.2;\n    col = mix(col,vec3(1.0,1.0,0.0),S(d,0.0));\n    d = abs(sdEquilateralTriangle(p)-0.2)-0.05;\n    col = mix(col,vec3(0.0),S(d,0.0));\n    return col;\n}\n\nvec3 hazrdIcon(vec2 p, vec3 col){\n    p*=5.0;\n    vec2 prevP = p;\n    col = iconBg(p,col);\n    \n    p.y+=0.2;\n    p.x = abs(p.x);\n    p.x-=0.3;\n    p*=Rot(radians(30.0));\n    float d = length(p)-0.4;\n    d = max(-(length(p-vec2(0.1,0.0))-0.31),d);\n    col = mix(col,vec3(0.0),S(d,0.0));\n    \n    p = prevP;\n    p.y-=0.4;\n    d = length(p)-0.4;\n    d = max(-(length(p-vec2(0.0,0.1))-0.31),d);\n    col = mix(col,vec3(0.0),S(d,0.0));\n    \n    p = prevP;\n    p.y-=0.05;\n    d = abs(length(p)-0.35)-0.05;\n    col = mix(col,vec3(0.0),S(d,0.0));\n     \n    return col;\n}\n\nvec3 warningIcon(vec2 p, vec3 col){\n    p*=5.0;\n    vec2 prevP = p;\n    col = iconBg(p,col);\n    \n    float d = sdUnevenCapsule(p,0.1,0.2,0.7);\n    d = min(length(p-vec2(0.0,-0.35))-0.15,d);\n    col = mix(col,vec3(0.0),S(d,0.0));\n    \n    return col;\n}\n\nvec3 drawHazardIcons(vec2 p, vec3 col){\n    vec2 prevP = p;\n    p.y+=0.5;\n    p.x = mod(p.x,1.2)-0.6;\n    p.y = mod(p.y,1.0)-0.5;\n    col = warningIcon(p,col);\n    \n    p = prevP;\n    p.x+=0.6;\n    p.x = mod(p.x,1.2)-0.6;\n    p.y = mod(p.y,1.0)-0.5;\n    col = hazrdIcon(p,col);\n    \n    return col;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    vec3 np = p;\n    np.y+=iTime*0.1;\n    float nn = noise3d(np*80.0)*0.12;\n    if(mat == MATERIAL_STEAL){\n        col = diffuseMaterial(n,rd,p,vec3(0.3)+nn+nn);\n    }\n    if(mat == MATERIAL_WALL){\n        col = diffuseMaterial(n,rd,p,(vec3(0.3,0.2,0.1)+nn+nn)+drawHazardIcons(np.xy,col)*0.2);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n      \n    float handShakeY = noise3d(vec3(iTime*1.0,iTime*1.1,iTime*1.2))*0.05;\n    float handShakeX = noise3d(vec3(iTime*1.1,iTime*1.2,iTime*1.1))*0.2;\n    \n    vec3 ro = vec3(handShakeX, handShakeY, 2.0);\n    ro.xz *= Rot(radians(sin(iTime*0.5)*5.0));\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(1.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    } else {\n        col = vec3(0.3);\n    }\n    \n    // gamma correction\n    col = pow( col, vec3(0.8545) );    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}