{
    "Shader": {
        "info": {
            "date": "1575635949",
            "description": "Experimenting with rects. Using the texture as an improvised depth buffer, the crosshair expands and contracts with the distance to the object it hovers on. Click to change the position.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttt3R8",
            "likes": 4,
            "name": "Crosshair with Rects",
            "published": 3,
            "tags": [
                "2d",
                "utility",
                "rect",
                "util",
                "crosshair"
            ],
            "usePreview": 0,
            "username": "luluco250",
            "viewed": 642
        },
        "renderpass": [
            {
                "code": "  //======//\n // Data //\n//======//\n\n// Represents a rectangle.\nstruct Rect {\n    // Represents the x/y coordinates of the rect's origin point.\n    vec2 point;\n    \n    // Represents the width/height of the rect.\n    vec2 size;\n    \n    // Origin point of the rect.\n    vec2 pivot;\n};\n    \n  //===========//\n // Constants //\n//===========//\n\nconst float Scale = 4.0;\n\nconst vec3 BackgroundColorRGB = vec3(1, 0.7, 0.4);\nconst vec4 CrosshairColor = vec4(0, 1, 0, 1);\nconst vec4 BorderColor = vec4(0, 0, 0, 1);\n\nconst float Separation = 2.0;\nconst float MaxSeparation = 30.0;\n\nconst vec2 Size = vec2(10, 2);\nconst float BorderSize = 2.0;\n\nconst vec4 LeftLine = vec4(Size, vec2(1, 0.5));\nconst vec4 RightLine = vec4(Size, vec2(0, 0.5));\nconst vec4 TopLine = vec4(Size.yx, vec2(0.5, 0));\nconst vec4 BottomLine = vec4(Size.yx, vec2(0.5, 1));\n    \n  //===========//\n // Functions //\n//===========//\n    \nvec2 scale_coord(vec2 coord, vec2 scale, vec2 origin) {\n\treturn (coord - origin) * scale + origin;\n}\n\n// Apply the pivot and retrieve the coordinate.\nvec2 apply_pivot(Rect r) {\n    return r.point - r.size * r.pivot;\n}\n\n// Determine if a point p is inside rect r.\nfloat inside(vec2 p, Rect r, float margin) {\n    vec2 rp = apply_pivot(r);\n    \n    return\n        step(rp.x - margin, p.x) *\n        step(p.x, rp.x + r.size.x + margin) *\n        step(rp.y - margin, p.y) *\n        step(p.y, rp.y + r.size.y + margin);\n}\n\nvoid draw_line(inout float crosshair, inout float border, vec2 coord, float sep, vec2 center, vec4 line) {\n    // Offset.\n    vec2 o = vec2(sep);\n    o -= o * 2.0 * line.zw;\n\n    Rect r = Rect(center + o, line.xy, line.zw);\n\n    crosshair += inside(coord, r, 0.0);\n    border += inside(coord, r, BorderSize);\n}\n\n  //========//\n // Shader //\n//========//\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    vec2 ps = vec2(1) / iResolution.xy;\n    vec2 ar = vec2(iResolution.x * ps.y, 1);\n\n    vec2 uv = coord * ps;\n    vec2 off = vec2(iTime * 0.1, sin(float(iFrame) * 0.01) * 0.5);\n    \n    color.rgb = BackgroundColorRGB * texture(iChannel0, uv * ar + off).r;\n    color.a = 1.0;\n    \n    //coord = scale_coord(coord, vec2(1.0 / Scale), iResolution.xy * 0.5);\n    \n    vec2 center = iResolution.xy * 0.5;\n    if (iMouse.z > 0.0)\n        center = iMouse.xy;\n    \n    float crosshair = 0.0;\n    float border = 0.0;\n    \n    float depth = 1.0 - texture(iChannel0, center * ps * ar + off).r;\n    float sep = mix(Separation, MaxSeparation, depth);\n    \n    draw_line(crosshair, border, coord, sep, center, LeftLine);\n    draw_line(crosshair, border, coord, sep, center, RightLine);\n    //draw_line(crosshair, border, coord, sep, center, TopLine);\n    draw_line(crosshair, border, coord, sep, center, BottomLine);\n    \n    crosshair = min(crosshair, 1.0);\n    border = min(border, 1.0);\n    \n    color.rgb = mix(color.rgb, BorderColor.rgb, border * BorderColor.a);\n    color.rgb = mix(color.rgb, CrosshairColor.rgb, crosshair * CrosshairColor.a);\n    //color.rgb = mix(color.rgb, vec3(1.0) - color.rgb, crosshair);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}