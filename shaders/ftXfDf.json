{
    "Shader": {
        "info": {
            "date": "1651545751",
            "description": "variant on electron beam from awhile ago. idk whats going on but it looks cool.",
            "flags": 0,
            "hasliked": 0,
            "id": "ftXfDf",
            "likes": 7,
            "name": "color bars",
            "published": 3,
            "tags": [
                "oscilloscope",
                "rainbow"
            ],
            "usePreview": 0,
            "username": "artemis",
            "viewed": 314
        },
        "renderpass": [
            {
                "code": "#define FALLOFF_START 1.0\n#define DECAY_START 0.1\n#define DECAY 20.0\n\n#define GRIDW 0.02\n\n#define GRID_R 0.672443156957688\n#define GRID_G 0.0103298230296269\n#define GRID_B 0.246201326707835\n#define FALLOFF_GRID 0.75\n\n//#define GRID_R 0.0544802764424424\n//#define GRID_G 0.0\n//#define GRID_B 0.0761853814813079\n\nfloat sRGB(float x) {\n    if (x <= 0.00031308)\n        return 12.92 * x;\n    else\n        return 1.055*pow(x,(1.0 / 2.4) ) - 0.055;\n}\n\nfloat saw(float t) {\n    t = t / 3.141592 / 2.0;\n \treturn t - floor(t);   \n}\n\nfloat tri(float t) {\n    return 2.0 * abs(t - floor(t + 0.5));\n}\n\nfloat tri2(float t) {\n    t = t / 3.141592 / 2.0;\n    return 2.0 * abs(t - floor(t + 0.5));\n}\n\nfloat grid(vec2 pix, float t) {\n    \n    float d = t + (pix.y / 30.0) + sin(pix.x * 500.0);\n    \n    float distortion = (sin(d * 400.0) + (sin(d * 600.0) / 2.0) + (sin(d * 800.0) / 3.0)) / 4.0;\n    \n    //float w = max(0.0, tri((pix.x + distortion) / 8.0) - (1.0 - GRIDW)) / GRIDW;\n    //float h = max(0.0, tri((pix.y + distortion) / 8.0) - (1.0 - GRIDW)) / GRIDW;\n    \n    float w = tri((pix.x + distortion) / 50.0);\n    float h = tri((pix.y + distortion) / 50.0);\n    \n    \n    float power = 1.0 + 0.25 * tri(pix.y / 50.0 + t / 6.0);\n    \n    float falloff = power * FALLOFF_GRID;\n    \n    float dist = min(w, h) * 25.0;\n    \n    \n    \n    //return min(power, max(w, h)\n    return min(power, power * (falloff * falloff) / (dist * dist));\n\n    \n    //return w;\n}\n\nfloat electron_beam(vec2 pix, float t, float toff) {\n\n    //toff = 0.0;\n    float beam_x = (saw(t * 4.0 + toff) * 400.0 - 200.0 + saw(t / -3.0 * tri2(t / 8.0)) * 200.0 - 100.0) / 2.0;\n    float beam_y = (saw(t * 3.0 - toff) * 400.0 - 200.0 + saw(t / -2.0 * tri2(t / 6.0)) * 200.0 - 100.0) / 2.0;\n\n    float dist = distance(pix, vec2(beam_x, beam_y));\n    \n    float power = 1.0 - (min(iTime - t, DECAY) / DECAY);\n    \n    float falloff = power * FALLOFF_START;\n    \n    return min(power, power * (falloff * falloff) / (dist * dist));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    \n    \n    vec2 center = iResolution.xy / 2.0;\n    \n    float scale = 386.0 / iResolution.x;\n    \n    vec2 uv = (fragCoord - center) * scale;\n    \n    \n        \n    float beam = 0.0;\n    \n    vec3 beamzz = vec3(0.0);\n    \n    float t = 0.0;\n    for (int i = 0; i < 2000; i++) {\n        float bbbb = electron_beam(uv, iTime - t, iTime / 2.0 + sin(t));\n        \n        float r = sin(float(i) / 50.0) + 1.0 / 2.0;\n        float g = cos(float(i) / 75.0) + 1.0 / 2.0;\n        float b = cos(float(i) / 25.0) + 1.0 / 2.0;\n        beamzz += vec3(bbbb * r, bbbb * g, bbbb * b);\n        t += 0.01;\n    }\n    //beamzz.a = 1.0;\n    \n    vec2 uv_r = uv - vec2(sin(iTime / 5.0 + uv.y / 100.0) * 2.0, sin(uv.x / 75.0 + iTime / 8.0));\n    vec2 uv_g = uv;\n    vec2 uv_b = uv + vec2(sin(iTime / 4.0 + uv.y / 100.0) * 2.0, cos(uv.x / 50.0 + iTime / 4.0));\n    \n    float grid_r = grid(uv_r, iTime) * GRID_R;\n    float grid_g = grid(uv_g, iTime - 0.1) * GRID_G;\n    float grid_b = grid(uv_b, iTime + 0.1) * GRID_B;\n    \n    vec3 grid_col = vec3(sRGB(grid_r), sRGB(grid_g), sRGB(grid_b));\n    //vec3 beam_col = vec3(sRGB(beam * 0.25), sRGB(beam), sRGB(beam));\n    vec3 beam_col = vec3(sRGB(beamzz.r), sRGB(beamzz.g), sRGB(beamzz.b));\n    \n    fragColor = vec4(grid_col + beam_col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}