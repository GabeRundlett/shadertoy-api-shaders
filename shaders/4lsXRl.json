{
    "Shader": {
        "info": {
            "date": "1438942959",
            "description": "SW LightSpeed\n\nInstructions: Drag and drop, left speed up, right slow down",
            "flags": 0,
            "hasliked": 0,
            "id": "4lsXRl",
            "likes": 13,
            "name": "SW LightSpeed",
            "published": 3,
            "tags": [
                "sw"
            ],
            "usePreview": 0,
            "username": "dmmn",
            "viewed": 614
        },
        "renderpass": [
            {
                "code": "\n#define PI 3.141592653589\n#define PI2 6.28318530718\n\nvec2 hash( vec2 p ){\n    p = vec2( dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3)));\n    return fract(sin(p)*43758.5453);\n}\n\nfloat rand(float n){\n    return fract(sin(n) * 43758.5453123);\n}\n\nfloat rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nvec4 mapStar(vec2 position, float lightSpeed, float angleOffset) {\n    \n    vec4 color = vec4(vec3(0.), 1.);\n    \n\tfloat angle = atan(position.y, position.x) + angleOffset;\n    \n    float angleNumber = 20.;\n    \n    float random = rand(floor(angle * angleNumber) * 100.);\n    \n    float distance = random;\n    distance += iTime * 2.;\n    distance = fract(distance);\n    \n    float fragDistance = length(position);\n    \n    float size = smoothstep(-.1, 2., lightSpeed);\n    \n    float bounded = step(distance, fragDistance) * step(fragDistance, distance + size);\n    bounded += step(fragDistance, fract(distance + size)) * step(fract(distance + size), distance);\n    \n    color.rgb = mix(vec3(0.), vec3(1.), bounded);\n    \n    color.r *= 1.;\n    color.g *= .7 + random * .3;\n    color.b *= 4.;\n    \n    // hard edges\n    float angleCenter = abs(fract(angle * angleNumber) * 2. - 1.);\n    color.a = step(angleCenter, smoothstep(-.2, 1., lightSpeed));\n    \n    // smooth gradient\n    color.a *= 1. - angleCenter;\n    \n    color.a *= smoothstep(0., 1., fragDistance);\n    color.a *= cos(random * iTime) * .5 + .5;\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float lightSpeed = cos(iTime) * .5 + .5;\n    \n    lightSpeed = 1. - iMouse.x / iResolution.x;\n    \n    //lightSpeed = 1.;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 position = uv * 2. - 1.;\n    position.y *= iResolution.y / iResolution.x;\n    \n    vec4 color = vec4(0.05);\n    color.a = 0.;\n    \n    for(float i = 0.; i < 2.; i++) {\n    \tvec4 starColor = mapStar(position, lightSpeed, i * 20.);\n        color.rgb += starColor.rgb * starColor.a;\n        color.a += starColor.a * .2;\n    }\n    \n    // color.a *= .5;\n    \n    //color += smoothstep(.9, 1., lightSpeed);\n    \n\tfragColor = color;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}