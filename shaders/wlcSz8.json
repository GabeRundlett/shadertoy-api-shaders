{
    "Shader": {
        "info": {
            "date": "1580363067",
            "description": "I'm playing around with generating sound using pure sine waves. This is a vast improvement on\nhttps://www.shadertoy.com/view/3tV3Wc Including a better attack, and overall envelope/ADSR, and some other things.",
            "flags": 8,
            "hasliked": 0,
            "id": "wlcSz8",
            "likes": 6,
            "name": "Better Trumpet tone",
            "published": 3,
            "tags": [
                "wave",
                "audio",
                "tone",
                "trumpet"
            ],
            "usePreview": 0,
            "username": "EFHIII",
            "viewed": 395
        },
        "renderpass": [
            {
                "code": "/*\nSound text copied from\nhttps://www.shadertoy.com/view/MtyXRW\n*/\n\n#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad(iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n#define initMsg vec4 T = vec4(0)\n#define endMsg  return length(T.yz)==0. ? 0. : T.x\n\nfloat message(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0);   // or: initMsg;\n    C(83);C(111);C(117);C(110);C(100);C(32);C(105);C(110); // message \"Sound in\"\n    return length(T.yz)==0. ? -1. : T.x; // or: endMsg;\n}\n\n/*\nADSR- Attack Decay Sustain Release\nNote range- A-440, C0-c6\n\nNote adding\n\n\n*/\n\n/*\nThis is a bare-bones MIDI:\nTime(sec), MIDI(0-88), velocity(0-1), duration(sec)\n*/\n// piano\nconst float midi[4] = float[4](0.3,58.,0.5,2.);\nfloat g1(float x, float a){\n\treturn 0.25/(a-0.5)+0.5+sqrt(\n        x*(-0.5/(a-0.5))+\n        (-0.5+-0.25/(a-0.5))*(-0.5+-0.25/(a-0.5))\n        );\n}\nfloat g2(float x,float a){\n    return 0.25/(a-0.5)+0.5-sqrt(\n        x*(-0.5/(a-0.5))+\n        (-0.5+-0.25/(a-0.5))*(-0.5+-0.25/(a-0.5))\n        );\n}\n\nfloat bez(float x,float a){\n    if(a==0.5){return x;}\n    float b=1.-a;\n    if(a>0.5){\n        float g=g2(x,a);\n    \treturn 2.*g*b-2.*g*g*b+g*g;\n    }\n    float g=g1(x,a);\n    return 2.*g*b-2.*g*g*b+g*g;\n}\n\n// Attack Decay Sustain Release\nfloat ADSR(float time, float[3] A, float[3] D, float[3] S, float[3] R){\n    float b=0.;\n\tif(time<A[0]){\n    \treturn A[1]*bez((time)/A[0],A[2]);\n    }\n\tb+=A[0];\n    if(time<b+D[0]){\n    \treturn (A[1]+(D[1]-A[1])*bez((time-b)/D[0],D[2]));\n    }\n\tb+=D[0];\n    if(time<b+S[0]){\n    \treturn (D[1]+(S[1]-D[1])*bez((time-b)/S[0],S[2]));\n    }\n\tb+=S[0];\n    if(time<b+R[0]){\n    \treturn (S[1]+(R[1]-S[1])*bez((time-b)/R[0],R[2]));\n    }\n    return 0.;\n}\n\nfloat notePitch(float mid){\n    return (440./32.)*(pow(2.,(mid-9.)/12.));\n}\n\nfloat trumpetTone(float t,float hz){\n    float time=t+sin(t*16.)*0.0001;\n    float freq[8];\n    freq[0]=hz;\n    freq[1]=hz*2.;\n    freq[2]=hz*3.;\n    freq[3]=hz*4.;\n    freq[4]=hz*5.;\n    freq[5]=hz*6.;\n    freq[6]=hz*7.;\n    freq[7]=hz*8.;\n    \n    float mag[8];\n    mag[0]=0.1155;\n    mag[1]=0.3417;\n    mag[2]=0.1789;\n    mag[3]=0.1232;\n    mag[4]=0.0678;\n    mag[5]=0.0473;\n    mag[6]=0.0260;\n    mag[7]=0.0045;\n    float val=0.;\n    for(int i=0;i<8;i++){\n    \tval+=sin(freq[i]*time)*mag[i];\n    }\n    return val*(0.98+cos(time*30.)*0.02)*2.;\n}\n\n// Should make a piano tone\nfloat trumpet(float time, float MIDI, float dur){\n    float A[3]=float[3](0.005,0.7,1.);\n    float D[3]=float[3](dur*0.55,1.,0.3);\n    float S[3]=float[3](dur*0.5-0.06,0.5,0.8);\n    float R[3]=float[3](0.05,0.,0.);\n\treturn trumpetTone(time,6.2831853*notePitch(MIDI))*ADSR(time,A,D,S,R);\n}\n\nfloat getWave(in float time){\n    float sum=0.;\n    for(int i=0; i<1; i+=4){\n        if(time>=midi[i]){\n\t\t\tsum+=trumpet(time-midi[i],midi[i+1],midi[i+3])*midi[i+2];\n        }\n        else if(time>midi[i]+midi[i+3]){\n\t\t\ti=10000;\n        }\n\t}\n    return sum;\n}\n\nfloat func(in float x){\n    float val = -getWave(x*0.06+iTime);\n\treturn val/2.1+0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iResolution.y<2000.) {\n        float c=message((fragCoord/iResolution.y-vec2(.1,.2))*8.);\n    \tif(c>=0.){\n            fragColor=vec4(c);return;\n        }\n    }\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    \n    float max=1.;\n    for(float i=-.005;i<=.005;i+=0.0002){\n\t    float val = func(uv.x+i);\n        //float v = (abs(uv.y-val))*mag;\n        float v=50.*sqrt((uv.y-val)*(uv.y-val)+10.*i*i);\n        \n        if(v<max){\n            max=v;\n\t\t\tfragColor = vec4(1.-v,0.,v,1.);\n\t\t}\n    }\n    if(max==1.){\n    \tfragColor=vec4(0.,0.,0.2,1.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nADSR- Attack Decay Sustain Release\nNote range- A-440, C0-c6\n\nNote adding\n\n\n*/\n\n/*\nThis is a bare-bones MIDI:\nTime(sec), MIDI(0-88), velocity(0-1), duration(sec)\n*/\n// piano\nconst float midi[4] = float[4](0.3,58.,0.5,2.);\nfloat g1(float x, float a){\n\treturn 0.25/(a-0.5)+0.5+sqrt(\n        x*(-0.5/(a-0.5))+\n        (-0.5+-0.25/(a-0.5))*(-0.5+-0.25/(a-0.5))\n        );\n}\nfloat g2(float x,float a){\n    return 0.25/(a-0.5)+0.5-sqrt(\n        x*(-0.5/(a-0.5))+\n        (-0.5+-0.25/(a-0.5))*(-0.5+-0.25/(a-0.5))\n        );\n}\n\nfloat bez(float x,float a){\n    if(a==0.5){return x;}\n    float b=1.-a;\n    if(a>0.5){\n        float g=g2(x,a);\n    \treturn 2.*g*b-2.*g*g*b+g*g;\n    }\n    float g=g1(x,a);\n    return 2.*g*b-2.*g*g*b+g*g;\n}\n\n// Attack Decay Sustain Release\nfloat ADSR(float time, float[3] A, float[3] D, float[3] S, float[3] R){\n    float b=0.;\n\tif(time<A[0]){\n    \treturn A[1]*bez((time)/A[0],A[2]);\n    }\n\tb+=A[0];\n    if(time<b+D[0]){\n    \treturn (A[1]+(D[1]-A[1])*bez((time-b)/D[0],D[2]));\n    }\n\tb+=D[0];\n    if(time<b+S[0]){\n    \treturn (D[1]+(S[1]-D[1])*bez((time-b)/S[0],S[2]));\n    }\n\tb+=S[0];\n    if(time<b+R[0]){\n    \treturn (S[1]+(R[1]-S[1])*bez((time-b)/R[0],R[2]));\n    }\n    return 0.;\n}\n\nfloat notePitch(float mid){\n    /*\n    switch(int(mid)){\n        case(21):\n        \treturn 27.5;\n        case(22):\n        \treturn 29.135;\n        case(23):\n        \treturn 30.868;\n        case(60):\n        \treturn 261.63;\n        case(61):\n        \treturn 277.18;\n        case(62):\n        \treturn 293.67;\n        case(63):\n        \treturn 311.13;\n        case(64):\n        \treturn 328.63;\n        case(65):\n        \treturn \n\t\tdefault:\n\t\t\treturn 0.;\n\t}\n\tI got lazy and just put in the formula\n\t*/\n    return (440./32.)*(pow(2.,(mid-9.)/12.));\n}\n\nfloat trumpetTone(float t,float hz){\n    float time=t+sin(t*16.)*0.0001;\n    float freq[8];\n    freq[0]=hz;\n    freq[1]=hz*2.;\n    freq[2]=hz*3.;\n    freq[3]=hz*4.;\n    freq[4]=hz*5.;\n    freq[5]=hz*6.;\n    freq[6]=hz*7.;\n    freq[7]=hz*8.;\n    \n    float mag[8];\n    mag[0]=0.1155;\n    mag[1]=0.3417;\n    mag[2]=0.1789;\n    mag[3]=0.1232;\n    mag[4]=0.0678;\n    mag[5]=0.0473;\n    mag[6]=0.0260;\n    mag[7]=0.0045;\n    float val=0.;\n    for(int i=0;i<8;i++){\n    \tval+=sin(freq[i]*time)*mag[i];\n    }\n    return val*(0.98+cos(time*30.)*0.02)*2.;\n}\n\n// Should make a piano tone\nfloat trumpet(float time, float MIDI, float dur){\n    float A[3]=float[3](0.005,0.7,1.);\n    float D[3]=float[3](dur*0.55,1.,0.3);\n    float S[3]=float[3](dur*0.5-0.06,0.5,0.8);\n    float R[3]=float[3](0.05,0.,0.);\n\treturn trumpetTone(time,6.2831853*notePitch(MIDI))*ADSR(time,A,D,S,R);\n}\n\nvec2 mainSound( in int samp, float time ){\n    //midi[0]=0.;\n\tfloat sum=0.;\n    for(int i=0; i<1; i+=4){\n        if(time>=midi[i]){\n\t\t\tsum+=trumpet(time-midi[i],midi[i+1],midi[i+3])*midi[i+2];\n        }\n        else if(time>midi[i]+midi[i+3]){\n\t\t\ti=10000;\n        }\n\t}\n\n    // A 440 Hz wave that attenuates quickly overt time\n    return vec2( sum/3. );\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}