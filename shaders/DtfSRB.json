{
    "Shader": {
        "info": {
            "date": "1674933456",
            "description": "Shiny pool mod",
            "flags": 0,
            "hasliked": 0,
            "id": "DtfSRB",
            "likes": 8,
            "name": "Shiny Pool mod",
            "published": 3,
            "tags": [
                "shiny"
            ],
            "usePreview": 0,
            "username": "afterlifevj",
            "viewed": 215
        },
        "renderpass": [
            {
                "code": "vec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\nvec3 random3(vec3 st){\n    st = vec3( dot(st,vec3(17.1,61.7,19.73)),\n              dot(st,vec3(69.43,33.3,93.8)),\n             dot(st,vec3(74.31,36.1,83.9)));\n    return -1.0 + 2.0*fract(sin(st)*437581.5453123);\n}\n\n// Value Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/lsf3WH\nfloat noise(vec2 st,float travel) {\n    st += vec2(0.,0.);\n    vec3 i = floor(vec3(st,travel));\n    vec3 f = fract(vec3(st,travel));\n    \n\n    vec3 u = smoothstep(0.,1.,f);\n\n    float base00 = dot( random3(i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) );\n    float base10 = dot( random3(i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) );\n    float base01 = dot( random3(i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) );\n    float base11 = dot( random3(i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) );\n    float top00 = dot( random3(i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) );\n    float top10 = dot( random3(i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) );\n    float top01 = dot( random3(i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) );\n    float top11 = dot( random3(i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) );\n    float base = mix(mix(base00,base10,u.x),mix(base01,base11,u.x),u.y);\n    float top = mix(mix(top00,top10,u.x),mix(top01,top11,u.x),u.y);\n    return mix(base,top,u.z);\n    \n}\n\nfloat bumpFunc(vec2 st){\n    vec2 aspect = vec2(iResolution.x/iResolution.y,1.);\n    float center = smoothstep(1.,0.,length(st));\n    vec2 noisedist = vec2(noise((st+0.3)*2.,10.),noise((st+vec2(13.1238,11.8837))*2.,iTime*0.1));\n    noisedist += vec2(noise((st)*8.,3.),noise((st+vec2(13.1238,11.8837))*8.,iTime*0.1+28.))*0.1;\n    float noisevalue = noise((st+noisedist*0.07+vec2(0.,iTime*0.05)*5.),iTime*2.);\n    noisevalue += noise((st+noisedist*0.35+vec2(0.,iTime*0.05))*25.,iTime*0.5)*0.25;\n    noisevalue += noise(st*5.5,iTime*0.15)*0.15;\n    return center*0.+smoothstep(-1.25,1.25,noisevalue);\n}\n\n//LIGHTING and BUMP section adapted from https://www.shadertoy.com/view/4l2XWK\n\nvec3 bumpMap(vec3 st){\n    vec3 sp = st;\n    vec2 eps = vec2(4./iResolution.y, 0.);\n    float f = bumpFunc(sp.xy); // Sample value multiplied by the amplitude.\n    float fx = bumpFunc(sp.xy-eps.xy); // Same for the nearby sample in the X-direction.\n    float fy = bumpFunc(sp.xy-eps.yx); // Same for the nearby sample in the Y-direction.\n\n\tconst float bumpFactor = 0.1;\n    fx = (fx-f)/eps.x; // Change in X\n    fy = (fy-f)/eps.x; // Change in Y.\n    return vec3(fx,fy,0.)*bumpFactor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n  \n\n    // VECTOR SETUP - surface postion, ray origin, unit direction vector, and light postion.\n    vec3 sp = vec3(uv, 0); // Surface position.\n    vec3 rd = normalize(vec3(uv, 1.)); // Direction vector from the origin to the screen plane.\n    vec3 lp = vec3(iMouse.xy/iResolution.xy*2.-vec2(1.), -0.85); // Light position\n\tvec3 sn = vec3(0., 0., -1); // Plane normal. Z pointing toward the viewer.\n    \n    // Using the gradient vector, \"vec3(fx, fy, 0),\" to perturb the XY plane normal \",vec3(0, 0, -1).\" \n    sn = normalize( sn + bumpMap(sp));           \n   \n    \n    // LIGHTING\n\t// Determine the light direction vector, calculate its distance, then normalize it.\n\tvec3 ld = lp - sp;\n\tfloat lDist = max(length(ld), 0.001);\n\tld /= lDist;  \n    float atten = 1./(1.0 + lDist*lDist*0.05);\n\n\t// Diffuse value.\n\tfloat diff = max(dot(sn, ld), 0.);  \n    // Specular highlighting.\n    float spec = pow(max(dot( reflect(-ld, sn), -rd), 0.), 31.);\n    \n    //reflections\n    vec3 ref = reflect( vec3(sp.xy,bumpFunc(sp.xy)*0.8), sn );\n  \tfloat m = 2. * sqrt(pow( ref.x, 2. ) +\n    \t\t\tpow( ref.y, 2. ) +\n    \t\t\tpow( ref.z + 1., 2. ));\n  \tvec2 tcx = ref.xy / m + .5;\n    vec3 env_color = texture(iChannel0,tcx).rgb;\n    float grain = noise(uv.xy*10.,0.1);\n    vec3 color = diff*0.35*vec3(0.9450980392156862, 1.0, 0.3215686274509804)+vec3(0.8666666666666667, 0.4549019607843137, 0.9705882352941176)*spec*1.75+pow(env_color,vec3(2.9))*0.65+vec3(grain*0.1);\n    fragColor = vec4(color,1.);\n    //fragColor = vec4(vec3(bumpFunc(sp.xy)),1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}