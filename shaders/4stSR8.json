{
    "Shader": {
        "info": {
            "date": "1457639435",
            "description": "The logarithmic frequency scale grid from the GLSL-based spectrum analyzer in my CreamTracker 64k softsynth tracker",
            "flags": 0,
            "hasliked": 0,
            "id": "4stSR8",
            "likes": 4,
            "name": "Logarithmic frequency scale grid",
            "published": 3,
            "tags": [
                "grid",
                "logarithmic"
            ],
            "usePreview": 0,
            "username": "BeRo",
            "viewed": 989
        },
        "renderpass": [
            {
                "code": "\n// The logarithmic frequency scale grid from the GLSL-based spectrum analyzer in my CreamTracker 64k softsynth tracker\n\n// Copyright (C) 2016 by Benjamin 'BeRo' Rosseaux\n// Because the german law knows no public domain in the usual sense,\n// this code is licensed under the CC0 license \n// http://creativecommons.org/publicdomain/zero/1.0/\n\n// But please give credits, if you're using it.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  vec2 onePixel = vec2(1.0) / iResolution.xy;\n  float c = 0.;\n  const float ln10 = 2.3025850929; // log(10.0);\n  const float minFrequency = 10.0;\n  const float maxFrequency = 22050.0;\n  float lowLog = log(minFrequency) / ln10;\n  float highLog = log(maxFrequency) / ln10;\n  float scale = 1.0 / (highLog - lowLog); \n  float frequencyHz = exp(((uv.x / scale) + lowLog) * ln10);\n  float currentMajorDecade = exp(floor(log(frequencyHz) / ln10) * ln10);\t\n  float nearestMajorDecade = exp(floor((log(frequencyHz) / ln10) + 0.5) * ln10);\t\n  float nearestMinorDecade = floor((frequencyHz / currentMajorDecade) + 0.5) * currentMajorDecade;\t\n  float nearestSubMinorDecade = floor((frequencyHz / (currentMajorDecade * 0.1)) + 0.5) * (currentMajorDecade * 0.1);\t\n  float ignoreFirstAndLastXFactor = step(onePixel.x, uv.x) * (1.0 - step(1.0 - onePixel.x, uv.x));  \n  c = mix(c, 0.0625, smoothstep(onePixel.x, 0.0, abs((((log(nearestSubMinorDecade) / ln10) - lowLog) * scale) - uv.x)) * ignoreFirstAndLastXFactor);\n  c = mix(c, 0.25, smoothstep(onePixel.x, 0.0, abs((((log(nearestMinorDecade) / ln10) - lowLog) * scale) - uv.x)) * ignoreFirstAndLastXFactor);\n  c = mix(c, 1.0, smoothstep(onePixel.x, 0.0, abs((((log(nearestMajorDecade) / ln10) - lowLog) * scale) - uv.x)) * ignoreFirstAndLastXFactor);\n  fragColor = vec4(c);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}