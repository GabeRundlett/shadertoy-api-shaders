{
    "Shader": {
        "info": {
            "date": "1567865139",
            "description": "Breath of water",
            "flags": 0,
            "hasliked": 0,
            "id": "Wd3Gz4",
            "likes": 7,
            "name": "Water pillar Giyu Tomioka",
            "published": 3,
            "tags": [
                "kimetsu"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 783
        },
        "renderpass": [
            {
                "code": "// https://iquilezles.org/articles/distfunctions2d\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    vec2 q = abs(p);\n\n    float h = clamp( (-2.0*ndot(q,b) + ndot(b,b) )/dot(b,b), -1.0, 1.0 );\n    float d = length( q - 0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( q.x*b.y + q.y*b.x - b.x*b.y );\n\n}\n\n// modefied version of the sdTriangle\nfloat sdQuads( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p3 )\n{\n    vec2 e0 = p1-p0, e1 = p2-p1, e2 = p3-p2, e3 = p0-p3;\n    vec2 v0 = p -p0, v1 = p -p1, v2 = p -p2, v3 = p -p3;\n\n    vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n    vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n    vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    vec2 pq3 = v3 - e3*clamp( dot(v3,e3)/dot(e3,e3), 0.0, 1.0 );\n    \n    float s = sign( e0.x*e3.y - e0.y*e3.x );\n    vec2 d = min( min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                 \t   vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) )),\n                       vec2( dot( pq3, pq3 ), s*(v3.x*e3.y-v3.y*e3.x) ));\n\n    return -sqrt(d.x)*sign(d.y);\n}\n\nvec3 isometricCube(vec2 p, vec2 pos, vec2 size, float h, vec3 col){\n    \n    vec3 topCol = vec3(0.8,0.6,0.0);\n    vec3 lWallCol = vec3(0.1,0.4,0.0);\n    vec3 rWallCol = vec3(0.1,0.3,0.0);\n    \n    float d = sdRhombus(p+pos-vec2(0.0,h),size);\n    col = mix( col, topCol, smoothstep(0.01,0.0,d));\n    d = sdQuads(p+pos,vec2(-size.x,0.0),vec2(-size.x,h),vec2(0.0,h-size.y),vec2(0.0,-size.y));\n    col = mix( col, lWallCol, smoothstep(0.01,0.0,d));\n    d = sdQuads(p+pos,vec2(0.0,-size.y),vec2(0.0,h-size.y),vec2(size.x,h),vec2(size.x,0.0));\n    col = mix( col, rWallCol, smoothstep(0.01,0.0,d));\n    return col;\n}\n\nvec3 isometricCube2(vec2 p, vec2 pos, vec2 size, float h, vec3 col){\n    \n    vec3 topCol = vec3(0.0,0.2,0.0);\n    vec3 lWallCol = vec3(0.8,0.5,0.0);\n    vec3 lWallCol2 = vec3(0.6,0.3,0.0);\n    vec3 lWallCol3 = vec3(0.8,0.2,0.0);\n    vec3 rWallCol = vec3(0.7,0.4,0.0);\n    \n    float d = sdRhombus(p+pos-vec2(0.0,h),size);\n    col = mix( col, topCol, smoothstep(0.01,0.0,d));\n    d = sdQuads(p+pos,vec2(-size.x,0.0),vec2(-size.x,h),vec2(0.0,h-size.y),vec2(0.0,-size.y));\n    col = mix( col, lWallCol, smoothstep(0.01,0.0,d));\n    \n    d = sdQuads(p+pos,vec2(-size.x,0.0),vec2(-size.x,h*0.7),vec2(-size.x*0.3,(h*0.7)-size.y*0.7),vec2(-size.x*0.3,-size.y*0.7));\n    col = mix( col, lWallCol2, smoothstep(0.01,0.0,d));\n    \n    d = sdQuads(p+pos,vec2(-size.x,0.0),vec2(-size.x,h*0.6),vec2(-size.x*0.4,(h*0.6)-size.y*0.6),vec2(-size.x*0.4,-size.y*0.6));\n    col = mix( col, lWallCol, smoothstep(0.01,0.0,d));\n    \n    d = sdQuads(p+pos,vec2(-size.x,0.0),vec2(-size.x,h*0.4),vec2(-size.x*0.6,(h*0.4)-size.y*0.4),vec2(-size.x*0.6,-size.y*0.4));\n    col = mix( col, lWallCol3, smoothstep(0.01,0.0,d));\n    \n    \n    d = sdQuads(p+pos,vec2(0.0,-size.y),vec2(0.0,h-size.y),vec2(size.x,h),vec2(size.x,0.0));\n    col = mix( col, rWallCol, smoothstep(0.01,0.0,d));\n    \n    \n    d = sdQuads(p+pos,vec2(size.x*0.3,-size.y*0.7),vec2(size.x*0.3,(h*0.7)-size.y*0.7),vec2(size.x,(h*0.7)),vec2(size.x,0.0));\n    col = mix( col, lWallCol2, smoothstep(0.01,0.0,d));\n    \n    d = sdQuads(p+pos,vec2(size.x*0.4,-size.y*0.6),vec2(size.x*0.4,(h*0.6)-size.y*0.6),vec2(size.x,(h*0.6)),vec2(size.x,0.0));\n    col = mix( col, rWallCol, smoothstep(0.01,0.0,d));\n    \n    d = sdQuads(p+pos,vec2(size.x*0.6,-size.y*0.4),vec2(size.x*0.6,(h*0.4)-size.y*0.4),vec2(size.x,(h*0.4)),vec2(size.x,0.0));\n    col = mix( col, lWallCol3, smoothstep(0.01,0.0,d));\n    \n    return col;\n}\n\nvec3 pattern(vec2 p, vec2 pos, vec2 size, vec3 col) {\n\tvec2 uvRef = p;\n    p.x = mod(p.x,0.8)-0.4;\n    col = isometricCube(p,pos,size, 0.2, col); \n    p = uvRef;\n\t\n    p.x -= 0.4;\n    p.x = mod(p.x,0.8)-0.4;\n    col = isometricCube2(p,pos,size, 0.2, col); \n    p = uvRef;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord.xy-iResolution.xy)/min(iResolution.y,iResolution.x);\n    vec2 uvRef = p;\n    \n    vec3 col = vec3(0.3,0.1,0.1); \n    float xstep = 0.2;\n    float ystep = 0.33;\n    \n    float animateX = iTime*0.1;\n    \n    vec2 offsetPos = vec2(0.0,-0.99);\n    vec2 size = vec2(0.2,0.12);\n    \n    p.y +=0.205;\n    p.x-=animateX;\n\tcol = pattern(p,offsetPos,size,col);\n    \n    offsetPos = vec2(0.0,-ystep*2.0);\n    p.x -= xstep;\n    col = pattern(p,offsetPos,size,col);\n    \n    offsetPos = vec2(0.0,-ystep);\n    p.x -= xstep;\n    col = pattern(p,offsetPos,size,col);\n    \n    offsetPos = vec2(0.0,0.0);\n    p.x -= xstep;\n    col = pattern(p,offsetPos,size,col);\n        \n    offsetPos = vec2(0.0,ystep);\n    p.x -= xstep;\n    col = pattern(p,offsetPos,size,col);\n    \n    offsetPos = vec2(0.0,ystep*2.0);\n    p.x -= xstep;\n    col = pattern(p,offsetPos,size,col);\n    \n    offsetPos = vec2(0.0,ystep*3.0);\n    p.x -= xstep;\n    col = pattern(p,offsetPos,size,col);\n    \n    vec3 res = (uvRef.x<0.0)?col: vec3(0.3,0.1,0.1);\n    fragColor = vec4(res,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}