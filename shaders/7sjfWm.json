{
    "Shader": {
        "info": {
            "date": "1646453626",
            "description": "I made this shader so I could get some asteroid sprites for my game because I'm better at writing shaders than doing art lol. Click somewhere on the screen to generate a new asteroid. On firefox you can right click and select \"Take Screenshot\" to screensh",
            "flags": 0,
            "hasliked": 0,
            "id": "7sjfWm",
            "likes": 12,
            "name": "Asteroid generator",
            "published": 3,
            "tags": [
                "procedural",
                "asteroid",
                "generation"
            ],
            "usePreview": 0,
            "username": "pancakespeople",
            "viewed": 514
        },
        "renderpass": [
            {
                "code": "// Noise functions from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + iMouse.x+0.1) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < 5; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nfloat sdf(vec3 point) {\n    float radius = fbm(point*2.0)-fbm((point+300.0)*50.0)/50.0;\n    float asteroid = length(point-vec3(0.0, 1.0, -1.0))-radius;\n    \n    return asteroid;\n}\n\nfloat rayMarch(vec3 rayOrigin, vec3 rayDir) {\n    float distMarched = 0.0;\n    \n    for (int i = 0; i < 100; i++) {\n        float dist = sdf(rayOrigin);\n        \n        rayOrigin += rayDir * dist;\n        distMarched += dist;\n        \n        if (dist < 0.0001 || dist > 100.0) {\n            break;\n        }\n    }\n    \n    return distMarched;\n}\n\nvec3 getNormal(vec3 point) {\n    float dist = sdf(point);\n    vec3 norm = dist - vec3(\n        sdf(point - vec3(0.01, 0.0, 0.0)),\n        sdf(point - vec3(0.0, 0.01, 0.0)),\n        sdf(point - vec3(0.0, 0.0, 0.01))\n    );\n    return normalize(norm);\n}\n\nfloat getShadow(vec3 rayOrigin, vec3 lightDir) {\n    float distMarched = 0.0;\n    float shadow = 1.0;\n    \n    for (float i = 0.0; i < 100.0; i++) {\n        float dist = sdf(rayOrigin);\n        \n        rayOrigin += lightDir * dist;\n        distMarched += dist;\n        shadow = min(shadow, 32.0*dist/i);\n        \n        if (dist < 0.0001 || dist > 100.0) {\n            break;\n        }\n    }\n    \n    return max(shadow, 0.33);\n}\n\nfloat getLight(vec3 point, vec3 cameraPos) {\n    vec3 normal = getNormal(point);\n    vec3 lightDir = normalize(vec3(cos(iMouse.x), sin(iMouse.y), 0.0));\n    float light = getShadow(point+0.02*normal, lightDir);\n    \n    return clamp(dot(normal, lightDir) * light, 0.1, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.x;\n    \n    vec3 cameraPos = vec3(0.0, 1.0, -4.0);\n    vec3 rayDir = vec3(uv.x, uv.y, 1.0);\n\n    float dist = rayMarch(cameraPos, rayDir);\n    vec3 point = rayDir * dist + cameraPos;\n    \n    vec3 col = vec3(0.0);\n    \n    if (dist < 100.0) {\n        col = vec3(getLight(point, cameraPos));\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}