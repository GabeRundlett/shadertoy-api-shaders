{
    "Shader": {
        "info": {
            "date": "1496340755",
            "description": "A stellated dodecahedron :)\nI really love this geometry shape.\nCan I optimise the code and avoid the \"for\" loop ? Can I replace with a fract for example ?",
            "flags": 0,
            "hasliked": 0,
            "id": "XsXfD7",
            "likes": 4,
            "name": "Stellated Dodecahedron",
            "published": 3,
            "tags": [
                "2d",
                "rotate",
                "geometry",
                "help"
            ],
            "usePreview": 0,
            "username": "blbenoit",
            "viewed": 1572
        },
        "renderpass": [
            {
                "code": "#define TWO_PI 6.283185307179586\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n//  Function from IÃ±igo Quiles \n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0, \n                     0.0, \n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n// Reference to http://thndl.com/square-shaped-shaders.html\nfloat triangle (vec2 st, \n                vec2 p0, vec2 p1, vec2 p2, \n                float smoothness){\n  vec3 e0, e1, e2;\n\n  e0.xy = normalize(p1 - p0).yx * vec2(+1.0, -1.0);\n  e1.xy = normalize(p2 - p1).yx * vec2(+1.0, -1.0);\n  e2.xy = normalize(p0 - p2).yx * vec2(+1.0, -1.0);\n\n  e0.z = dot(e0.xy, p0) - smoothness;\n  e1.z = dot(e1.xy, p1) - smoothness;\n  e2.z = dot(e2.xy, p2) - smoothness;\n\n  float a = max(0.0, dot(e0.xy, st) - e0.z);\n  float b = max(0.0, dot(e1.xy, st) - e1.z);\n  float c = max(0.0, dot(e2.xy, st) - e2.z);\n\n  return smoothstep(smoothness * 2.0, \n                    1e-7, \n                    length(vec3(a, b, c)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 st = fragCoord.xy / iResolution.y * 2.0 - iResolution.xy / iResolution.y;\n    vec3 color = vec3(0.0);\n    \n    vec2 v0 = vec2(0.0, 0.0);\n    float pct = length(v0-st);\n    \n    // My points for triangles\n    vec2 v1 = vec2(-0.1763355756877419 , -0.2427050983124842 );    \n    vec2 v2 = vec2( 0.17633557568774194, -0.2427050983124842 );    \n    vec2 v3 = vec2( 0.0                , -0.7854101966249685 );\n    vec2 v4 = vec2( 0.2853169548885461 , -0.39270509831248424);   \n    vec2 v5 = vec2(-0.285316954888546  , -0.39270509831248424); \n    vec2 v6 = vec2( 0.461652530576288  , -0.6354101966249684 );\n    vec2 v7 = vec2( 0.1763355756877419 , -0.5427050983124843 );\n    vec2 v8 = vec2( 0.461652530576288  , -0.33541019662496846);\n    \n    /*vec2 translate = vec2(cos(iTime),sin(iTime));\n    st += translate*0.35;\n    st *= rotate2d( cos(iTime) );*/\n    \n    // [HELP] Can i avoid the \"for\" loop and replace with a fract ?\n    for (float i = 0.0; i < 5.0; i++) {\n        color += vec3( triangle(st, v0, v1, v2, 0.001) ) * hsb2rgb( vec3(cos(st.x-0.57)) );\n        color += vec3( triangle(st, v1, v3, v2, 0.001) ) * hsb2rgb( vec3(cos(st.y-0.10)) );\n        color += vec3( triangle(st, v2, v3, v4, 0.001) ) * hsb2rgb( vec3(cos(st.x-0.60)) );\n        color += vec3( triangle(st, v1, v5, v3, 0.001) ) * hsb2rgb( vec3(cos(st.x-0.50)) );\n        color += vec3( triangle(st, v4, v7, v6, 0.001) ) * hsb2rgb( vec3(cos(st.x-0.80)) );\n        color += vec3( triangle(st, v4, v6, v8, 0.001) ) * hsb2rgb( vec3(cos(st.y-0.00)) );\n        st *= rotate2d( TWO_PI/5.0 );\n\t}\n    \n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}