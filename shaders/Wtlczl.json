{
    "Shader": {
        "info": {
            "date": "1592814410",
            "description": "GLSL implementation of https://github.com/miloyip/light2d/blob/master/csg.c",
            "flags": 0,
            "hasliked": 0,
            "id": "Wtlczl",
            "likes": 3,
            "name": "Light2D",
            "published": 3,
            "tags": [
                "2d",
                "math",
                "light"
            ],
            "usePreview": 0,
            "username": "xach",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "const float MAX_STEP = 30.0;\nconst float MAX_DISTANCE = 1.0;\nconst float EPSILON = 0.0001;\nconst float SAMPLES = 256.0;\n\nconst float TWO_PI = 6.28318530718;\n\nconst float BIAS = 1e-4f;\nconst int MAX_DEPTH = 2;\n\nvec2  m;\n\n\nstruct ssDot{float sd; float emission; float reflectivity;};\n\n\nssDot unionOp(ssDot a, ssDot b){\n    if (a.sd < b.sd){\n        return a;\n    }else{\n        return b;\n    }\n}\n\nfloat box(float x, float y, float cx, float cy, float theta, float sx, float sy) {\n    float costheta = cos(theta), sintheta = sin(theta);\n    float dx = abs(x - cx) - sx;\n    float dy = abs(y - cy) - sy;\n    float ax = max(dx, 0.0f), ay = max(dy, 0.0f);\n    return min(max(dx, dy), 0.0f) + length(vec2(ax, ay)) * ax + ay * ay;\n}\n\nfloat rectangle(vec2 samplePosition, vec2 cntr, vec2 halfSize){\n    vec2 componentWiseEdgeDistance = samplePosition - halfSize - cntr;\n    float outsideDistance = length(max(componentWiseEdgeDistance, 0.0));\n    float insideDistance = min(max(componentWiseEdgeDistance.x, componentWiseEdgeDistance.y), 0.0);\n    return outsideDistance + insideDistance;\n}\n\nfloat circle(in vec2 pos, in vec2 cntr, in float radius){\n    return distance(pos, cntr) - radius;\n}\n\nssDot scene(in vec2 pos){\n    ssDot r1 = ssDot(circle(pos,vec2(0.5,0.5), 0.25), 0.70, 0.2);\n    ssDot r2 = ssDot(circle(pos,m, 0.1), 1.0, 1.7);\n    ssDot r3 = ssDot(circle(pos,vec2(-0.4,0.0), 0.5), 1.0, 1.2);\n    ssDot r4 = ssDot(rectangle(pos,vec2(0.0,-0.1),vec2(0.05,0.35)), 0.70, 0.1);\n    return unionOp(unionOp(unionOp(r1, r2),r3),r4);\n}\n\n\nvoid gradient(float x, float y, out float nx, out float ny) {\n    nx = (scene(vec2(x + EPSILON, y)).sd - scene(vec2(x - EPSILON, y)).sd) * (0.5 / EPSILON);\n    ny = (scene(vec2(x, y + EPSILON)).sd - scene(vec2(x, y - EPSILON)).sd) * (0.5 / EPSILON);\n}\n\nfloat trace3(float ox,float oy, float dx, float dy, int depth){\n    float t = 0.0;\n    for(float i = 0.0; i < MAX_STEP && t < MAX_DISTANCE; i++){\n        float x = ox + dx * t;\n        float y = oy + dy * t;\n        ssDot r = scene(vec2(x,y));\n        if (r.sd < EPSILON){\n            float sum = r.emission;\n        \tif (depth < MAX_DEPTH && r.reflectivity > 0.0f) {\n//               float nx, ny, rx, ry;\n//                gradient(x, y, nx, ny);\n//                reflect(dx, dy, nx, ny, rx, ry);\n                sum += r.reflectivity;// * trace2(x + nx * BIAS, y + ny * BIAS, rx, ry, depth + 1.0);\n            }\n            return sum;\n        }\n        t += r.sd;\n    }\n    return 0.0;\n}\n\nfloat trace2(float ox,float oy, float dx, float dy, int depth){\n    float t = 0.0;\n    for(float i = 0.0; i < MAX_STEP && t < MAX_DISTANCE; i++){\n        float x = ox + dx * t;\n        float y = oy + dy * t;\n        ssDot r = scene(vec2(x,y));\n        if (r.sd < EPSILON){\n            float sum = r.emission;\n        \tif (depth < MAX_DEPTH && r.reflectivity > 0.0f) {\n                float nx, ny, rx, ry;\n                gradient(x, y, nx, ny);\n                vec2 reflected = reflect(vec2(dx, dy), vec2(nx, ny));\n                sum += r.reflectivity * trace3(x + nx * BIAS, y + ny * BIAS, reflected.x, reflected.y, depth + 1);\n            }\n            return sum;\n        }\n        t += r.sd;\n    }\n    return 0.0;\n}\n\nfloat trace(float ox,float oy, float dx, float dy, int depth){\n    float t = 0.0;\n    for(float i = 0.0; i < MAX_STEP && t < MAX_DISTANCE; i++){\n        float x = ox + dx * t;\n        float y = oy + dy * t;\n        ssDot r = scene(vec2(x,y));\n        if (r.sd < EPSILON){\n            float sum = r.emission;\n        \tif (depth < MAX_DEPTH && r.reflectivity > 0.0f) {\n                float nx, ny, rx, ry;\n                gradient(x, y, nx, ny);\n               \tvec2 reflected = reflect(vec2(dx, dy), vec2(nx, ny));\n                sum += r.reflectivity * trace2(x + nx * BIAS, y + ny * BIAS, reflected.x, reflected.y, depth + 1);\n            }\n            return sum;\n        }\n        t += r.sd;\n    }\n    return 0.0;\n}\n\n\nfloat rand(){\n\treturn fract(sin(iTime)*100000.0);\n}\n\nfloat sampleFun(float x, float y){\n    float sum = 0.0;\n    for (float i = 0.0; i < SAMPLES; i++){\n        float a = TWO_PI*i/SAMPLES;\n        sum += trace(x, y, cos(a), sin(a),0);\n        if (sum > 1000.0){return sum/i;}\n    }\n                     \n    return sum / SAMPLES;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 uv = (2.*fragCoord-iResolution.xy ) / iResolution.y;\n    \n    m  = (2.*iMouse.xy-iResolution.xy ) / iResolution.y;\n\n    float v = sampleFun(uv.x, uv.y);\n    \n    // Time varying pixel color\n    vec3 col =vec3(v);\n\n    // Output to screen\n    fragColor = vec4(col,v);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}