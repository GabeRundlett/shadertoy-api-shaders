{
    "Shader": {
        "info": {
            "date": "1621922401",
            "description": "Click anywhere to create a new pattern.",
            "flags": 32,
            "hasliked": 0,
            "id": "fllGDr",
            "likes": 2,
            "name": "Light Blast",
            "published": 3,
            "tags": [
                "2d",
                "wave",
                "interactive",
                "psychedelic",
                "flashing",
                "waveequation"
            ],
            "usePreview": 0,
            "username": "andypea",
            "viewed": 337
        },
        "renderpass": [
            {
                "code": "float hslToRgbHelper(float n, vec3 hsl) {\n    float h = hsl.x;\n    float s = hsl.y;\n    float l = hsl.z;\n    \n    float k = mod((n + h / 30.0), 12.0);\n    float a = s * min(l, 1.0 - l);\n    \n    return l - a * max(-1.0, min(min(k - 3.0, 9.0 - k), 1.0));\n}\n\nvec3 hslToRgb(vec3 hsl) {\n    return vec3(hslToRgbHelper(0.0, hsl),\n                hslToRgbHelper(8.0, hsl),\n                hslToRgbHelper(4.0, hsl));  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float cutoff = 0.01;\n\n    vec2 uv = fragCoord/iResolution.xy;\n    float phi = texture(iChannel0, uv).x;\n    \n    vec3 hsl = vec3(pow(phi, 1.0) * 360.0, \n                    1.0, \n                    abs(phi) > cutoff ? 0.5: 0.0); \n    fragColor = vec4(hslToRgb(hsl), 1.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n   const float c = 1e-4;\n   const float h = 1e-1;\n   const float ht = 1.0;\n   const float blobRadius = 3e-2;\n\n    vec2 uv = fragCoord / iResolution.xy;\n\n    if (iFrame < 2) {\n        // Startup\n        float d = distance(uv, vec2(0.5, 0.5));\n        float phiNew = smoothstep(blobRadius, 0.0, d);\n        fragColor = vec4(phiNew, phiNew, 0, 0);\n    }\n    else {  \n        // Time evolution\n        const vec2 hx = vec2(h, 0.0);\n        const vec2 hy = vec2(0.0, h);\n        const float h2Inv = pow(h, -2.0);\n        \n        vec4 phi = texture(iChannel0, uv);\n        vec4 phiNegX = texture(iChannel0, uv + hx);\n        vec4 phiPosX = texture(iChannel0, uv - hx);\n        vec4 phiNegY = texture(iChannel0, uv + hy);\n        vec4 phiPosY = texture(iChannel0, uv - hy);\n                  \n        float d2Phi = (phiPosX.x + phiPosY.x + phiNegX.x + phiNegY.x - 4.0 * phi.x) * h2Inv;\n        \n        float phiNew = c * ht * ht * d2Phi + 2.0 * phi.x - phi.y;\n        \n        fragColor = vec4(phiNew, phi.x, 0, 0);\n            \n            \n        if (iMouse.z > 0.0) {\n            // Interaction\n            vec2 mouseUv = iMouse.xy / iResolution.xy;\n            float d = distance(uv, mouseUv);\n            float phiNew = smoothstep(blobRadius, 0.0, d);\n            fragColor = vec4(phiNew, phiNew, 0, 0);\n        }\n    }    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}