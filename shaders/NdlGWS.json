{
    "Shader": {
        "info": {
            "date": "1616467691",
            "description": "I wanted to make something with the mouse function and ended up making whatever this is. \nMouse code still works but it's pretty boring.\n4th shader I've made so far.",
            "flags": 0,
            "hasliked": 0,
            "id": "NdlGWS",
            "likes": 1,
            "name": "Rave Rectangles",
            "published": 3,
            "tags": [
                "2d",
                "mouse",
                "flashing"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 311
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\nmat2 rot(float a){\nfloat s = sin(a);\nfloat c = cos(a);\nreturn mat2(c,-s,s,c);\n}\nfloat height(float x,vec2 mXY){\n    if(iMouse.z>0.0){ return -pow(abs(x-mXY.x),2.0)*30.0+3.333*mXY.y+0.3; }\n    else{ return (abs(tan((x-mXY.x)*5.0))-1.0)*4.0+3.333*mXY.y+0.3; }\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //scale -0.5 <> 0.5\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float t=iTime*0.9;\n    vec2 mXY;\n    if(iMouse.z>0.0){\n        mXY=(iMouse.xy-.5*iResolution.xy)/iResolution.y; }\n    else{\n        mXY= vec2(cos(t)*0.7,0.2* sin(t));\n        uv*=rot(tan(sin(t*2.0)*1.46)); \n        uv=0.5*sin(uv*0.9)*2.1;\n        uv=0.5*tan(uv*1.3)*1.9;}       \n    \n    //wavey\n    uv.x+=0.5*sin(cos(uv.y*15.0)*(PI/2.0))*(0.01+0.01*sin(t));\n    //Scaling x and splitting into columns\n    float scale = 12.5*(1.0+0.8*sin(123.0*floor(t/PI*2.0+PI/2.0)));\n    uv.x*=scale;\n    \n    float xID = (0.5+floor(uv.x))/scale; \n    //rectangles\n    float top = clamp(step(uv.y,0.3*height(xID,mXY)),0.0,1.0);\n    float bot = clamp(1.0-step(uv.y,-0.3*height(xID,vec2(mXY.x,-mXY.y))),0.0,1.0);\n    //color\n    float rt = t/PI*2.0+PI/2.0;\n    float r = 0.5+0.2*sin(floor(rt));\n    float g = 0.5+0.2*sin(floor(rt)+10.0);\n    float b = 0.5+0.2*sin(floor(rt)+20.0);\n    vec3 col = vec3(top+bot)*vec3(r,g,b); \n    //tinted BG\n    col.rgb += 0.3*vec3(r,g,b)*(step((col.r*col.g*col.b),0.001));\n    //flashing/pulse\n    col.rgb += 3.0*vec3(r,g,b)*pow(abs(pow(sin(2.0*t),9.0)),2.0);   \n    //col.rgb=vec3(0.5+uv,0.0);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}