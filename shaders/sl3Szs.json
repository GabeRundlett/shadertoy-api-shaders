{
    "Shader": {
        "info": {
            "date": "1639580360",
            "description": "made the simples possible code to make a fluid using only convolutions\nsimpler form https://www.shadertoy.com/view/7t3SDf",
            "flags": 32,
            "hasliked": 0,
            "id": "sl3Szs",
            "likes": 105,
            "name": "simple detailed fluid",
            "published": 3,
            "tags": [
                "convolution"
            ],
            "usePreview": 0,
            "username": "lomateron",
            "viewed": 2056
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 u = fragCoord/iResolution.xy;\n    vec4 a = texture(iChannel0,u);\n    fragColor = a.z*(+sin(a.x*4.+vec4(1,3,5,4))*.2\n                     +sin(a.y*4.+vec4(1,3,2,4))*.2+.6);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define A(u) texture(iChannel0,(u)/iResolution.xy)\nvoid mainImage( out vec4 fragColor, in vec2 u )\n{\n    vec2 v = u/iResolution.xy;\n    vec4 a = A(u);\n    vec2 m = +a.xy                      //fluid velocity\n             -vec2(0,1)*.01             //gravity\n             +float(v.x<.05)*vec2(1,0)  //wall\n             +float(v.y<.05)*vec2(0,1)  //wall\n             -float(v.x>.95)*vec2(1,0)  //wall\n             -float(v.y>.95)*vec2(0,1); //wall\n    float s = 0.;\n    float z = 4.;//kernel convolution size\n    for(float i=-z; i<=z; ++i){\n    for(float j=-z; j<=z; ++j){\n      vec2 c = -m+vec2(i,j);//translate the gaussian 2Dimage using the velocity\n      s += exp(-dot(c,c));  //calculate the gaussian 2Dimage\n    }}\n    if(s==0.){s = 1.;}      //avoid division by zero\n              s = 1./s;\n    fragColor = vec4(m,s,0);//velocity in .xy\n                            //convolution normalization in .z\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define A(u) texture(iChannel0,(u)/iResolution.xy)\n#define B(u) texture(iChannel1,(u)/iResolution.xy)\nvoid mainImage( out vec4 fragColor, in vec2 u )\n{\n    vec4  o = vec4(0);\n    float z = 4.;//kernel convolution size\n    for(float i=-z; i<=z; ++i){\n    for(float j=-z; j<=z; ++j){\n      vec4  a = A(u+vec2(i,j));        //old velocity in a.xy, mass in a.z\n      vec4  b = B(u+vec2(i,j));        //new velocity in b.xy, normalization of convolution in .z\n      vec2  c = -b.xy-vec2(i,j);       //translate the gaussian 2Dimage\n      float s = a.z*exp(-dot(c,c))*b.z;//calculate the normalized gaussian 2Dimage multiplied by mass\n      vec2  e = c*(a.z-.8);            //fluid expands or atracts itself depending on mass\n      o.xy += s*(b.xy+e);              //sum all translated velocities\n      o.z  += s;                       //sum all translated masses\n    }}\n    float tz = 1./o.z;\n    if(o.z==0.){tz = 0.;}              //avoid division by zero\n    o.xy *= tz;                        //calculate the average velocity\n    if(iMouse.z>0.)                    //mouse click adds velocity\n    {\n        vec2 m = 8.*(u-iMouse.xy)/iResolution.y;\n        o += vec4(m,0,0)*.1*exp(-dot(m,m));\n    }\n    if(iFrame==0)\n    {\n        vec2 m = 3.*(u-iResolution.xy*.5)/iResolution.y;\n        o = vec4(0,0,1,1)*exp(-dot(m,m));\n    }\n    fragColor = o;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}