{
    "Shader": {
        "info": {
            "date": "1585549406",
            "description": "made with domain wrapping of noise",
            "flags": 0,
            "hasliked": 0,
            "id": "WdXyDj",
            "likes": 10,
            "name": "water marble",
            "published": 3,
            "tags": [
                "noise",
                "water",
                "marble"
            ],
            "usePreview": 0,
            "username": "brechrt",
            "viewed": 563
        },
        "renderpass": [
            {
                "code": "uint hash( uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\nuint hash( uvec2 v ) { \n    return hash( v.x ^ hash(v.y)); \n}\n\nfloat floatConstruct( uint m ) {\n    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask\n    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32\n\n    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)\n    m |= ieeeOne;                          // Add fractional part to 1.0\n\n    float  f = uintBitsToFloat( m );       // Range [1:2]\n    return f - 1.0;                        // Range [0:1]\n}\nfloat random( vec2  v ) { \n    return floatConstruct(hash(floatBitsToUint(v)));\n}\n\nfloat noise(vec2 uv){\n\tvec2 i = floor(uv);\n    vec2 f = fract(uv);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat noise( vec2 uv, float detail){\n\tfloat n = 0.;\n    float m = 0.;\n\n    for(float i = 0.; i < detail; i++){\n    \tfloat x = pow(2., i);\n        float y = 1./x;\n        \n        n += noise(uv*x+y)*y;\n        m += y;\n    }\n    \n    return n/m;\n    \n}\nmat2 rot(float a){\n\tfloat c = cos(a);\n    float s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    \n    uv *= 15.;\n \t\n    \n    float n = noise(uv,7.);\n    uv *= rot(n+iTime*.01)*n;\n    \n    vec3 col = mix(vec3(0.,0.,.1),vec3(0.,1.,1.),noise(uv+iTime*vec2(0.,.6), 2.));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}