{
    "Shader": {
        "info": {
            "date": "1612075854",
            "description": "Smooth abs() function.",
            "flags": 0,
            "hasliked": 0,
            "id": "tlcfRn",
            "likes": 6,
            "name": "Smooth Abs()",
            "published": 3,
            "tags": [
                "blending",
                "function",
                "smooth",
                "absolute",
                "sabs",
                "smoothabs"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 239
        },
        "renderpass": [
            {
                "code": "//#define sabs(x, k) (2.0 * k * log(exp(-x / k) + 1.0) + x)\n//#define sabs(x, k) (2.0 * k * log(exp(-abs(x) / k) + 1.0) + abs(x))\n#define sabs(x, k) sqrt(x * x + k * k)\n\nfloat mapScene(in vec3 p) {\n    float c = cos(iTime), s = sin(iTime);\n    p.xz *= mat2(c, -s, s, c);\n    p.yz *= mat2(c, -s, s, c);\n    float k = 0.2 + 0.2 * sin(iTime);\n    return length(sabs(p, k) - 0.75) - 0.75;\n}\n\nvec3 getNormal(in vec3 p) {\n    vec3 e = vec3(0.01, 0.0, 0.0);\n    return normalize(vec3(mapScene(p + e.xyy) - mapScene(p - e.xyy),\n                          mapScene(p + e.yxy) - mapScene(p - e.yxy),\n                          mapScene(p + e.yyx) - mapScene(p - e.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 5.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    float t = 0.0;\n    for (int i=0; i < 100; i++) {\n        vec3 p = ro + rd * t;\n        float d = mapScene(p);\n        if (d < 0.001) {\n            vec3 n = getNormal(p);\n            vec3 l = vec3(-0.58, 0.58, 0.58);\n            fragColor.rgb += max(0.2, dot(n, l));\n            break;\n        }\n\n        if (t > 10.0) {\n            break;\n        }\n\n        t += d;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}