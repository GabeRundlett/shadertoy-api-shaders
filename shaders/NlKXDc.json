{
    "Shader": {
        "info": {
            "date": "1641448474",
            "description": "Simple example of a Newton's fractal for a personal website I am building. It's pretty much finished now but I'm having difficulty uploading it for other people to see, I'm not sure when I'll get it fixed.",
            "flags": 0,
            "hasliked": 0,
            "id": "NlKXDc",
            "likes": 9,
            "name": "Basic Newton Fractal",
            "published": 3,
            "tags": [
                "fractal",
                "example",
                "basic",
                "iteration",
                "newton"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 193
        },
        "renderpass": [
            {
                "code": "// Complex arithmetic\nvec2 cconj(in vec2 z) {\n    return vec2(z.x, -z.y);\n}\n\nvec2 cmul(in vec2 z, in vec2 w) {\n    return vec2(z.x * w.x - z.y * w.y, z.x * w.y + z.y * w.x);\n}\n\nvec2 cdiv(in vec2 z, in vec2 w) {\n    return cmul(z, cconj(w)) / dot(w, w);\n}\n\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\nvoid render(inout vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y * 4.0;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    vec2 a = vec2(1.0, 0.0);\n    vec2 b = mouse;\n    vec2 c = vec2(-0.5, 0.866);\n\n    // Default to \"classic\" Newton fractal before user interaction\n    if (ivec2(iMouse.xy) == ivec2(0)) b = vec2(-0.5, -0.866);\n\n    // Newton-Raphson method: z_new = z_old - f(z_old) / f'(z_old)\n    vec2 z = uv;\n    for (int i=0; i < 25; i++) {\n        vec2 za = z - a, zb = z - b, zc = z - c;\n        vec2 f = cmul(za, cmul(zb, zc)); // Cubic polynomial with roots a, b, and c\n        vec2 df = cmul(za + zb, zc) + cmul(za, zb);\n        z -= cdiv(f, df);\n    }\n\n    float distA = length(z - a);\n    float distB = length(z - b);\n    float distC = length(z - c);\n\n    // Color based on closest root\n    if (distA < min(distB, distC)) color.r = 1.0;\n    else if (distB < min(distA, distC)) color.g = 1.0;\n    else color.b = 1.0;\n\n    // Plot a point at each root\n    drawSDF(length(uv - a) - 0.05, vec3(0.5, 0.0, 0.0));\n    drawSDF(length(uv - b) - 0.05, vec3(0.0, 0.5, 0.0));\n    drawSDF(length(uv - c) - 0.05, vec3(0.0, 0.0, 0.5));\n\n    fragColor += vec4(color, 1.0);\n}\n\n// 2x2 supersampled AA\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0);\n    render(fragColor, fragCoord);\n    render(fragColor, fragCoord + vec2(0.5, 0.0));\n    render(fragColor, fragCoord + vec2(0.0, 0.5));\n    render(fragColor, fragCoord + 0.5);\n    fragColor /= 4.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}