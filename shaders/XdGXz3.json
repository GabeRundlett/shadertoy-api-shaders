{
    "Shader": {
        "info": {
            "date": "1465569179",
            "description": "Any point can be moved.\nThe points can be adjusted so that the rendered image looks like a room.",
            "flags": 32,
            "hasliked": 0,
            "id": "XdGXz3",
            "likes": 7,
            "name": "Moveable voronoi (roombuilder?)",
            "published": 3,
            "tags": [
                "voronoi",
                "interactive",
                "movable",
                "roombuilder"
            ],
            "usePreview": 0,
            "username": "metric",
            "viewed": 853
        },
        "renderpass": [
            {
                "code": "// The value of `PTS_NUM` constant in Buffer and Image must be the same.\n#define PTS_NUM 6\n\nvec4 mem(vec2 location) {\n\treturn texture(iChannel0, location/iChannelResolution[0].xy);\n}\n\nvoid mainImage( out vec4 col, in vec2 fc )\n{\n\tvec2 uv = fc.xy / iResolution.y;\n    uv = 2.0*uv - vec2(iResolution.x/iResolution.y, 1.0);\n\n    col.rgb = vec3(1.0);\n    float mindist = 4.0;\n\t\n    for(int i=0; i<PTS_NUM; i++) {\n        float curdist = distance(uv, mem(vec2(float(i), 1)).xy);\n        \n        if(curdist < mindist) {\n            mindist = curdist;\n        \tcol.rgb = exp(-1.1*vec3(curdist*curdist));\n        \tcol.rgb -= vec3(0,.4,.6)*smoothstep(.06, .047, curdist); // circle\n        }\n    }\n\n    col.rgb = pow(col.rgb, vec3(1.5));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PTS_NUM 6\n\n///////////////////////////\n////// MEM ALIGNMENT //////\n///////////////////////////\n\n// [point #n position] | [point #(n+) position]\n\n\nvec4 mem(vec2 location) {\n\treturn texture(iChannel0, location/iChannelResolution[0].xy);\n}\n\nfloat hash21(vec2 co) { return fract(sin(dot(co.xy ,vec2(121.9898,478.233))) * 433818.543); }\nvec2  hash22(vec2 pt) { return vec2(hash21(pt*75.342), hash21(pt*pt)); }\n\nvec2 initArrayAtPoint(vec2 position) {\n\treturn hash22(position);\n}\n\n\nvoid mainImage( out vec4 col, in vec2 fc )\n{\n    if (iFrame == 0) {\n\t\tcol.xy = initArrayAtPoint(fc);\n        col.zw = vec2(0);\n        return;\n    }\n\n    vec4 mouse = iMouse.xyzw / iResolution.y;\n    mouse = 2.0*mouse - vec2(iResolution.x/iResolution.y, 1.0).xyxy;\n\n    float mindist = 4.0;\n    int pointToBeMoved = 0;\n\n    for(int i=0; i<PTS_NUM; i++) {\n        float curdist = distance(mem(vec2(float(i)+.5, 1.5)).xy, mouse.xy);\n        if(curdist < mindist) {\n            mindist = curdist;\n            pointToBeMoved = i;\n        }\n    }\n\n    if (fc.x == (float(pointToBeMoved)+.5))\n        col.xy = mouse.xy;\n    else\n        col = mem(fc);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}