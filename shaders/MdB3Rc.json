{
    "Shader": {
        "info": {
            "date": "1393409984",
            "description": "Bouncing balls. Parabolic kinematics, as learnt at school - x(t) = xo + v·t + ½·a·t² - allows you to do physics without simulation or passing info across frames. I think mu6k did this before in Shadertoy, but this is my own take on it.",
            "flags": 0,
            "hasliked": 0,
            "id": "MdB3Rc",
            "likes": 114,
            "name": "StatelessPhysics (no collisions)",
            "published": 3,
            "tags": [
                "2d",
                "physics",
                "stateless"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 7304
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// draw a disk with motion blur\nvec3 diskWithMotionBlur( vec3 col, in vec2 uv, in vec3 sph, in vec2 cd, in vec3 sphcol, in float alpha )\n{\n\tvec2 xc = uv - sph.xy;\n\tfloat a = dot(cd,cd);\n\tfloat b = dot(cd,xc);\n\tfloat c = dot(xc,xc) - sph.z*sph.z;\n\tfloat h = b*b - a*c;\n\tif( h>0.0 )\n\t{\n\t\th = sqrt( h );\n\t\t\n\t\tfloat ta = max( 0.0, (-b - h)/a );\n\t\tfloat tb = min( 1.0, (-b + h)/a );\n\t\t\n        col = mix( col, sphcol, alpha*clamp(2.0*(tb-ta),0.0,1.0) );\n\t}\n\treturn col;\n}\n\n// intersect a disk moving in a parabolic trajecgory with a line/plane. \n// sphere is |x(t)|-R²=0, with x(t) = p + v·t + ½·a·t²\n// plane is <x,n> + k = 0\nfloat iPlane( in vec2 p, in vec2 v, in vec2 a, float rad, vec3 pla )\n{\n\tfloat k2 = dot(a,pla.xy);\n\tfloat k1 = dot(v,pla.xy);\n\tfloat k0 = dot(p,pla.xy) + pla.z - rad;\n\tfloat h = k1*k1 - 2.0*k2*k0;\n\tif( h>0.0 )\n\t\th = (-k1-sqrt(h))/k2;\n\treturn h;\n}\n\nvec2 GetPos( in vec2 p, in vec2 v, in vec2 a, float t )\n{\n\treturn p + v*t + 0.5*a*t*t;\n}\nvec2 GetVel( in vec2 p, in vec2 v, in vec2 a, float t )\n{\n\treturn v + a*t;\n}\n\nfloat hash1( float p ) { return fract(sin(p)*43758.5453); }\nvec2  hash2( float p ) { vec2 q = vec2( p, p+123.123 ); return fract(sin(q)*43758.5453); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\tfloat w = iResolution.x/iResolution.y;\n\n    vec3 pla0 = vec3( 0.0,1.0,1.0);\n    vec3 pla1 = vec3(-1.0,0.0,  w);\t\n    vec3 pla2 = vec3( 1.0,0.0,  w);\n\t\t\n\tvec3 col = vec3(0.15 + 0.05*p.y);\n\t\n\tfor( int i=0; i<8; i++ )\n    {\n        // start position\t\t\n\t\tfloat id = float(i);\n\n\t    float time = mod( iTime + id*0.5, 4.8 );\n\t    float sequ = floor( (iTime+id*0.5)/4.8 );\n\t\tfloat life = time/4.8;\n\n\t\tfloat rad = 0.05 + 0.1*hash1(id*13.0 + sequ);\n\t\tvec2 pos = vec2(-w,0.8) + vec2(2.0*w,0.2)*hash2( id + sequ );\n\t\tvec2 vel = (-1.0 + 2.0*hash2( id+13.76 + sequ ))*vec2(8.0,1.0);\n        const vec2 acc = vec2(0.01,-9.0);\n\n        // integrate 10 bounces. after the loop, pos and vel contain the\n        // position and velocity of the ball at the current time. h\n        // contains the time since hat collision.\n\t\tfloat h = 0.0;\n\t    for( int j=0; j<10; j++ )\n\t    {\n\t\t\tfloat ih = 100000.0;\n\t\t\tvec2 nor = vec2(0.0,1.0);\n\n\t\t\t// intersect planes\n\t\t\tfloat s;\n\t\t\ts = iPlane( pos, vel, acc, rad, pla0 ); if( s>0.0 && s<ih ) { ih=s; nor=pla0.xy; }\n\t\t\ts = iPlane( pos, vel, acc, rad, pla1 ); if( s>0.0 && s<ih ) { ih=s; nor=pla1.xy; }\n\t\t\ts = iPlane( pos, vel, acc, rad, pla2 ); if( s>0.0 && s<ih ) { ih=s; nor=pla2.xy; }\n\t\t\t\n            if( ih<1000.0 && (h+ih)<time )\t\t\n\t\t\t{\n\t\t\t\tvec2 npos = GetPos( pos, vel, acc, ih );\n\t\t\t\tvec2 nvel = GetVel( pos, vel, acc, ih );\n\t\t\t\tpos = npos;\n\t\t\t\tvel = nvel;\n\t\t\t\tvel = 0.75*reflect( vel, nor );\n\t\t\t\tpos += 0.01*vel;\n                h += ih;\n\t\t\t}\n        }\n\t\t\n        // last parabolic segment\n\t\th = time - h;\n\t\tvec2 npos = GetPos( pos, vel, acc, h );\n\t\tvec2 nvel = GetVel( pos, vel, acc, h );\n\t\tpos = npos;\n\t\tvel = nvel;\n\n        // render\n\t\tvec3  scol = 0.5 + 0.5*sin( hash1(id)*2.0 - 1.0 + vec3(0.0,2.0,4.0) );\n\t\tfloat alpha = smoothstep(0.0,0.1,life)-smoothstep(0.8,1.0,life);\n\t\tcol = diskWithMotionBlur( col, p, vec3(pos,rad), vel/24.0, scol, alpha );\n    }\n\n    col += (1.0/255.0)*hash1(p.x+13.0*p.y);\n\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}