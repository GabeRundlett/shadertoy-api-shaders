{
    "Shader": {
        "info": {
            "date": "1550268485",
            "description": "analytical ray-intersection, allowing free antialiasing and all 2D-shaders goodies.\nTry changing #slice()\n\nMouse controls shape (or auto-demo ).",
            "flags": 0,
            "hasliked": 0,
            "id": "wsBGWd",
            "likes": 13,
            "name": "analytical ray-sink intersec 2",
            "published": 3,
            "tags": [
                "cubic",
                "polynomial",
                "tuto",
                "solve",
                "degree3"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 549
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/tsBGWt\n// analytical ray - sink intersection ( solving cubic polynomial ).\n\n// sink shape: P.z = m / ( h + |P.xy|²)  ; solve with ray P = P0+lD\nfloat m =  1.,       // amplitude factor\n      h = 1./3.,     // inv heap\n    opa = .3;        // layers opacity\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    float t = iTime-9.2;\n    vec2 R = iResolution.xy,\n         U = ( 2.*u - R ) / R.y,\n         M = iMouse.z > 0. ? iMouse.xy / R \n                           : vec2(.4+.3*sin(4.7*t),.5+.5*cos(t));\n\n  O-=O;\n  for (float i=0.; i<2.; i+=.1) {\n        \n    m = 20.*M.x  * (1.-i);\n    h = m/M.y/4. / (1.-i);\n    \n    // --- set camera     \n    vec3 P = .8*vec3(0., 5.5, 6),\n      look = normalize( vec3(0,0,1.7) - P ),\n     right = normalize(cross(look, vec3(0,0,1))),\n        up = cross( right, look ),\n         D = normalize( look*3. + U.x*right + U.y*up );\n   \n    // --- Solving a*x³ +b*x³ +c*x +d = 0. -> l = min(3 solutions)\n    // using \"solving cubic polynomial\"  https://shadertoy.com/view/3d23Dc\n    // here: ( h + P² +2lP.D + l²D²)xy * (P  + lD)z = m\n    float a =   dot(D.xy,D.xy)*D.z,\n          b = ( dot(D.xy,D.xy)*P.z +2.*dot(P.xy,D.xy)*D.z ) /a, \n          c = ( dot(P.xy,P.xy)*D.z +2.*dot(P.xy,D.xy)*P.z +h*D.z ) /a, \n          d = ( dot(P.xy,P.xy)*P.z +h*P.z - m ) /a,\n        p = ( 3.*c - b*b ) / 3.,\n        q = ( 9.*b*c - 27.*d - 2.*b*b*b) / 27., // -\n        Q = p/3., r = q/2., \n        v,z, l, A, k = -1.;\n    \n    if ( Q*Q*Q + r*r < 0.) {                    // --- if 3 sol\n        A = acos(r/sqrt(-Q*Q*Q)), \n        k = round(1.5-A/6.283); // k = 0,1,2 ; we want min l\n#define sol(k) ( 2.*sqrt(-Q)* cos((A+(k)*6.283)/3.) - b/3. )\n        l = sol(k);\n    }\n    else                                        // --- if 1 sol\n        if (p>0.) v = -2.*sqrt(p/3.), \n#define asinh(z) ( sign(z)*asinh(abs(z)) )      // fix asinh() symetry error \n                  l = -v* sinh(asinh(3.*-q/p/v)/3.) -b/3.; \n        else      v = -2.*sqrt(-p/3.), \n                  l = sign(-q)*v* cosh(acosh(3.*abs(q)/p/v)/3.) -b/3.;\n\n    // --- display layer\n\n//#define slice(P)  ( true )\n//#define slice(P)  ( (P).y < 0. )\n//#define slice(P)  ( mod(floor((P).y-t),2.) == 0. )\n//#define slice(P)  ( mod(floor((P).x-t),2.) == 0. )\n//#define slice(P)  ( mod(floor((P).x+(P).y-t),2.) == 0. )\n//#define slice(P)  ( mod(floor(6.*(P).z-t),2.) == 0. )\n//#define slice(P)  ( mod( floor((P).x)+floor((P).y) ,2.) == 0. )\n//#define slice(P)  ( length( mod((P).xy-1. ,2.) -1.) < .8 )\n  #define slice(P)  ( length( mod((P).xy ,2.) -1.) > .8 )\n\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec3(0,23,21)  ) ) // https://www.shadertoy.com/view/ll2cDc\n        \n    for( float j = 0.; j < 3.; j++ ) { // front + \"hidden\" parts\n        vec3 P2 = P + l*D,\n              X = 1. - abs(.5-fract(4.*P2))/fwidth(4.*P2);\n        X = smoothstep(-.75,.75, X/fwidth(X) ); \n        v = max(X.x,X.y);              // grid\n        if slice(P2) O += (1.-O.a) \n                    // * v;\n                       * vec4( max( hue(i), v ) *exp(-.2*l)*2. , 1) * opa;\n        if (k<0.) break;               // there is just one layer\n        l = sol(mod(k++,3.));\n    }\n\n  }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}