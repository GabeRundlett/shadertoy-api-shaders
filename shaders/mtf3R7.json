{
    "Shader": {
        "info": {
            "date": "1671495252",
            "description": "A very hacky experiment of remaking the visual effect found in Catacombs Of Solaris. Someone here can definitely do this way better than me utilizing matrixes ^^'",
            "flags": 32,
            "hasliked": 0,
            "id": "mtf3R7",
            "likes": 12,
            "name": "Catacombs Of Solaris Demake",
            "published": 3,
            "tags": [
                "trippy",
                "weird",
                "liminal"
            ],
            "usePreview": 0,
            "username": "Trixelized",
            "viewed": 297
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame > int(every_x_frames - 1.0)) {\n        if (mod(float(iFrame), every_x_frames) == 0.0) {\n            fragColor = texture(iChannel1, fragCoord.xy / iResolution.xy);\n        } else {\n            fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n        }\n    } else {\n        fragColor = texture(iChannel2, -fragCoord.xy / iResolution.xy);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Thanks to Xor for 'voxels explained'\n// Which helped me set up geometry\n// https://www.shadertoy.com/view/fstSRH\n\nvec3 getcampos(float frame) {\n    vec3 cam = vec3(0.0, 0.0, 0.0);\n    cam.x = 12.0 * (smoothstep(-1., 1., cos(0.004 * frame)) - 0.5);\n    cam.z = 12.0 * (smoothstep(-1., 1., sin(0.004 * frame)) - 0.5);\n    cam.y = sin(frame * 0.01) * 0.5;\n    return cam;\n}\n\nfloat getcamframeoff(float frame) {\n    return sin(frame) * 1234.5678;\n}\n\nfloat map(vec3 pos)\n{\n    return\n        min(1.0 - length(pos.y) + 2.0 * fract(sin(pos.x * 1.2 + pos.z * 3.4) * 51234.5678901234),\n        min(17.0 - length(pos.x),\n        min(17.0 - length(pos.z),\n        2.0 - length((round(pos.xz / 3.0) * 3.0) - pos.xz))));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float fr = floor(float(iFrame) / every_x_frames)*every_x_frames;\n    \n    vec3 cam = getcampos(float(iFrame) + getcamframeoff(fr));\n    vec3 pos = cam;\n    vec3 ray = normalize(vec3(fragCoord*2.0 - iResolution.xy, iResolution.y));\n    vec3 cell = vec3(0,0,0);\n    \n    for(int i = 0; i<50; i++)\n    {\n        vec3 dist = fract(-pos * sign(ray)) + 1e-4,\n        leng = dist / abs(ray),\n        near = min(leng.xxx, min(leng.yyy, leng.zzz));\n        pos += ray * near;\n        cell = ceil(pos) - 0.5;\n        if (map(cell) < 0.0) break;\n    }\n    \n    pos -= getcampos(fr + getcamframeoff(fr));\n    vec2 uv = (pos.xy) / pos.z;\n    uv.x /= iResolution.x / iResolution.y;\n    uv = fract(uv / 2.0 + 0.5);\n    \n    \n    \n    vec3 col = texture(iChannel0, uv).rgb;\n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define every_x_frames 200.0",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}