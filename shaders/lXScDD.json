{
    "Shader": {
        "info": {
            "date": "1727281868",
            "description": "mouse\nControl the number of circles per layer when the mouse is operated horizontally.\nThe mouse moves up and down to control the way it moves, and I did 4 ways.\n\nPolar coordinates equal scale \nCircles distributed in equal proportions in polar coordinates",
            "flags": 0,
            "hasliked": 0,
            "id": "lXScDD",
            "likes": 12,
            "name": "Mouse (ctrl) pan, rotate, number",
            "published": 3,
            "tags": [
                "mouse",
                "zoom",
                "exp",
                "infinite",
                "log"
            ],
            "usePreview": 0,
            "username": "shadertoyjiang",
            "viewed": 114
        },
        "renderpass": [
            {
                "code": "// 20240925\n// 你所看到的无限移动只是小圆盘的接力，而不是真的在无限移动。\n// 每个小圆盘仅在它自己那一格动重复移动。\n// 这主要是为了避免超出浮点数能表达的距离等数字，过程复杂了点，但它可以“永远移动”。\n// \n// The infinite movement you see is just a relay of small discs, not really infinite movement.\n// Each small disc moves repeatedly only in its own square.\n// This is mainly to avoid going beyond the distance that floating-point numbers can express, the process is complicated by a point, but it can \"move forever\".\n//\n// https://www.shadertoy.com/view/X3SyD1\n//\n// https://www.shadertoy.com/view/M3jcD1\n//\n// https://www.shadertoy.com/view/XXjyzm\n//\n// Control the number of circles per layer when the mouse is operated horizontally.\n// The mouse moves up and down to control the way it moves, and I did 4 ways.\n\n\n#define TAU 6.2831853\n\nfloat hash11(float p)\n{// https://www.shadertoy.com/view/4djSRW  -  Dave_Hoskins.\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec4 hash41(float p)\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nvec4 drawMDL(vec2 u, vec2 n){\n        n =normalize(n);\n        vec4 z=vec4(0),w;\n        \n        \n        u *= mat2(n.x,n.y,-n.y,n.x);\n        u.x +=.25;\n        u = (u-0.)*.65+.5;\n        \n        \n        for(int i;i++<24;z=z.x*z+z.y*vec4(-z.y,z)-3.*(u.xyyy-.5))w=abs(z);\n        w=clamp(w,0.,1.);\n        return w;\n}\n\n\nvoid mainImage( out vec4 color, in vec2 cdnt )\n{\n        float kxi=1.;\n        //cdnt=floor(cdnt/8.)*8.+.5;kxi=8.;\n\n\n        vec2 p = 5.*(cdnt * 2. - iResolution.xy) / iResolution.y;\n        float N = 3. + floor(iMouse.x/iResolution.x*20.);\n        int xyn=int(iMouse.y/iResolution.y*4.);\n        if(length(iMouse.xy)<3.)N=9.;\n        \n        float r = 1.*sin(TAU / N / 2.), up = 1.+r, dw = 1.-r;\n        float degree = up / dw;\n        \n        float t = iTime;\n        if(xyn==1){\n                 float app = atan(p.y, p.x);\n                 float ixx=round((app / TAU + .5) * N);\n                 ixx = float(int(ixx+N+N)%int(N));\n                 \n                 t = 2.*(hash11(ixx)-.5)*t;\n        }\n        \n        \n        float zoom = pow(degree,  1.-fract(t));\n        \n        p *= zoom;\n        \n        \n        float ap = atan(p.y, p.x), lp = length(p);\n        \n        \n        \n        //lp= length(p);\n        \n        float iy = floor( log(lp) / log(degree) );\n        \n        \n        \n        \n        \n        float rtx=0.;\n        if(xyn==0) rtx=floor(4.*hash11(iy-floor(t))-2.)*t; // color 难以计算\n        if(xyn==2) rtx=t;\n        \n        \n        \n        float ix = round((ap / TAU + .5) * N+rtx) ; \n        //ix = mod(ix, N);\n        float ca = ((ix-rtx) / N - .5) * TAU;\n        float dwy = pow(degree, iy), upy = dwy * degree;\n\n        vec2 cent = (upy + dwy)*.5 * vec2(cos(ca), sin(ca));\n        float R = (upy - dwy) * .5;\n        float d = length(p - cent)-R;\n        \n        float ind = (iy - floor(t))*N + float(int(ix+1e-2+N*N*8.)%int(N));\n        \n        d /= zoom;\n        //color=vec4(.5);\n        color = vec4( exp(-60.* abs(d) ) ); \n        vec4 e=(.2+.8*hash41(ind))*(.5+.5*drawMDL((p-cent)/R, normalize(cent)  ));\n        //if(cdnt.x<iResolution.x*.5){\n        //      if(d<0.)color+=e;\n        //}else{\n              color += smoothstep( 3.* kxi *5./iResolution.y, 0.,  d)*e;\n        //}\n}\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}