{
    "Shader": {
        "info": {
            "date": "1518114507",
            "description": "Correct hard brush stroke with low flow",
            "flags": 0,
            "hasliked": 0,
            "id": "lstyzN",
            "likes": 7,
            "name": "Continuous brush stroke",
            "published": 3,
            "tags": [
                "brush"
            ],
            "usePreview": 0,
            "username": "ApoorvaJ",
            "viewed": 4839
        },
        "renderpass": [
            {
                "code": "#define RADIUS 0.12\n#define FLOW 4.0\n\nbool in_pseudo_quad(vec2 p1, vec2 p2, vec2 uv)\n{\n\treturn (uv.x > p1.x - RADIUS &&\n            uv.x < p2.x + RADIUS &&\n            uv.y > p1.y - RADIUS &&\n            uv.y < p2.y + RADIUS);\n}\n\nfloat evaluate(vec2 p1, vec2 p2, vec2 uv)\n{\n    float BE = abs(uv.y - p1.y);\n    float dx = sqrt(RADIUS*RADIUS - BE*BE);\n    float X1 = max(p1.x, uv.x - dx);\n    float X2 = min(p2.x, uv.x + dx);\n    return max(0.0, FLOW * (X2 - X1));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.y / iResolution.x;\n    uv.x /= aspect;\n \tvec2 p1 = vec2(0.1/aspect, 0.5);\n \tvec2 p2 = vec2(0.5/aspect, 0.5);\n \tvec2 p3 = vec2(0.9/aspect, 0.5);\n    \n    float i1 = 0.0;\n    if (in_pseudo_quad(p1, p2, uv)) {\n        i1 += evaluate(p1, p2, uv);\n    }\n    float i2 = 0.0;\n    if (in_pseudo_quad(p2, p3, uv)) {\n        i2 += evaluate(p2, p3, uv);\n    }\n    \n    float s = sin(iTime) * 0.5 + 0.5;    \n \tfragColor = vec4(i1+i2*(1.0-s), s*i2, 0, 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}