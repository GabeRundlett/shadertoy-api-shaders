{
    "Shader": {
        "info": {
            "date": "1497033232",
            "description": "I wanted to do a chalkboard shader, but that was hard. So I did a pencil-paper one instead. Kinda simple, not too much crazy stuff.",
            "flags": 0,
            "hasliked": 0,
            "id": "ldXfRj",
            "likes": 79,
            "name": "Sketch Drawing",
            "published": 3,
            "tags": [
                "2d",
                "sketch",
                "image",
                "drawing"
            ],
            "usePreview": 1,
            "username": "culdevu",
            "viewed": 12161
        },
        "renderpass": [
            {
                "code": "/* \n    Author: Daniel Taylor\n\tLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\tTried my hand at a sketch-looking shader.\n\n\tI'm sure that someone has used this exact method before, but oh well. I like to \n\tthink that this one is very readable (aka I'm not very clever with optimizations).\n\tThere's little noise in the background, which is a good sign, however it's easy to\n\tcreate a scenerio that tricks it (the 1961 Commerical video is a good example).\n\tAlso, text (or anything thin) looks really bad on it, don't really know how to fix\n\tthat.\n\n\tAlso, if the Shadertoy devs are reading this, the number one feature request that\n\tI have is a time slider. Instead of waiting for the entire video to loop back to\n\tthe end, be able to fast forward to a specific part. It'd really help, I swear.\n\n\tPrevious work:\n\thttps://www.shadertoy.com/view/XtVGD1 - the grandaddy of all sketch shaders, by flockaroo\n*/\n\n#define PI2 6.28318530717959\n\n#define RANGE 16.\n#define STEP 2.\n#define ANGLENUM 4.\n\n// Grayscale mode! This is for if you didn't like drawing with colored pencils as a kid\n//#define GRAYSCALE\n\n// Here's some magic numbers, and two groups of settings that I think looks really nice. \n// Feel free to play around with them!\n\n#define MAGIC_GRAD_THRESH 0.01\n\n// Setting group 1:\n/*#define MAGIC_SENSITIVITY     4.\n#define MAGIC_COLOR           1.*/\n\n// Setting group 2:\n#define MAGIC_SENSITIVITY     10.\n#define MAGIC_COLOR           0.5\n\n//---------------------------------------------------------\n// Your usual image functions and utility stuff\n//---------------------------------------------------------\nvec4 getCol(vec2 pos)\n{\n    vec2 uv = pos / iResolution.xy;\n    return texture(iChannel0, uv);\n}\n\nfloat getVal(vec2 pos)\n{\n    vec4 c=getCol(pos);\n    return dot(c.xyz, vec3(0.2126, 0.7152, 0.0722));\n}\n\nvec2 getGrad(vec2 pos, float eps)\n{\n   \tvec2 d=vec2(eps,0);\n    return vec2(\n        getVal(pos+d.xy)-getVal(pos-d.xy),\n        getVal(pos+d.yx)-getVal(pos-d.yx)\n    )/eps/2.;\n}\n\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\nfloat absCircular(float t)\n{\n    float a = floor(t + 0.5);\n    return mod(abs(a - t), 1.0);\n}\n\n//---------------------------------------------------------\n// Let's do this!\n//---------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 pos = fragCoord;\n    float weight = 1.0;\n    \n    for (float j = 0.; j < ANGLENUM; j += 1.)\n    {\n        vec2 dir = vec2(1, 0);\n        pR(dir, j * PI2 / (2. * ANGLENUM));\n        \n        vec2 grad = vec2(-dir.y, dir.x);\n        \n        for (float i = -RANGE; i <= RANGE; i += STEP)\n        {\n            vec2 pos2 = pos + normalize(dir)*i;\n            \n            // video texture wrap can't be set to anything other than clamp  (-_-)\n            if (pos2.y < 0. || pos2.x < 0. || pos2.x > iResolution.x || pos2.y > iResolution.y)\n                continue;\n            \n            vec2 g = getGrad(pos2, 1.);\n            if (length(g) < MAGIC_GRAD_THRESH)\n                continue;\n            \n            weight -= pow(abs(dot(normalize(grad), normalize(g))), MAGIC_SENSITIVITY) / floor((2. * RANGE + 1.) / STEP) / ANGLENUM;\n        }\n    }\n    \n#ifndef GRAYSCALE\n    vec4 col = getCol(pos);\n#else\n    vec4 col = vec4(getVal(pos));\n#endif\n    \n    vec4 background = mix(col, vec4(1), MAGIC_COLOR);\n    \n    // I couldn't get this to look good, but I guess it's almost obligatory at this point...\n    /*float distToLine = absCircular(fragCoord.y / (iResolution.y/8.));\n    background = mix(vec4(0.6,0.6,1,1), background, smoothstep(0., 0.03, distToLine));*/\n    \n    \n    // because apparently all shaders need one of these. It's like a law or something.\n    float r = length(pos - iResolution.xy*.5) / iResolution.x;\n    float vign = 1. - r*r*r;\n    \n    vec4 a = texture(iChannel1, pos/iResolution.xy);\n    \n    fragColor = vign * mix(vec4(0), background, weight) + a.xxxx/25.;\n    //fragColor = getCol(pos);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}