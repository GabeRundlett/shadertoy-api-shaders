{
    "Shader": {
        "info": {
            "date": "1638598014",
            "description": "raycasting a sphere :D\n\nI stole the code from this video and turned it into a shader: https://www.youtube.com/watch?v=ARn_yhgk7aE",
            "flags": 0,
            "hasliked": 0,
            "id": "ftdXRn",
            "likes": 1,
            "name": "raycasting a sphere :D",
            "published": 3,
            "tags": [
                "raytracing",
                "raycasting",
                "pathtracing"
            ],
            "usePreview": 0,
            "username": "lordadamson",
            "viewed": 263
        },
        "renderpass": [
            {
                "code": "struct Ray\n{\n    vec3 o;\n    vec3 d;\n};\n\nstruct Sphere\n{\n    vec3 c;\n    float r;\n};\n\nvoid\nsphere_intersect(in Sphere sphere, in Ray ray,\n                 out float t, out bool intersected)\n{\n    vec3 o = ray.o;\n    vec3 d = ray.d;\n    vec3 oc = o - sphere.c;\n    float b = 2.0f * dot(oc, d);\n    float c = dot(oc, oc) - sphere.r*sphere.r;\n    float disc = b*b - 4.0f * c;\n    \n    if (disc < 1e-4)\n    {\n        intersected = false;\n        return;\n    }\n    \n    disc = sqrt(disc);\n    float t0 = -b - disc;\n    float t1 = -b + disc;\n    t = (t0 < t1) ? t0 : t1;\n    intersected = true;\n}\n\nvoid sphere_normal(in Sphere sphere, in vec3 pi,\n                   out vec3 normal)\n{\n    normal = (pi - sphere.c) / sphere.r;\n}\n\nvoid\nmainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float H = iResolution.y;\n    float W = iResolution.x;\n    \n    Sphere sphere = Sphere(vec3(W*0.5, H*0.5, 50), 50.0f);\n    vec3 light= vec3(iMouse.x, iMouse.y, -10);\n    \n    vec3 light_color = vec3(1.0, 1.0, 1.0);\n    vec3 bg_color = vec3(0.0, 0.0, 0.0);\n    vec3 sphere_color = vec3(0.0, 0.4, 0.2);\n    \n    vec3 col = vec3(0,0,0);\n    float x = fragCoord.x;\n    float y = fragCoord.y;\n\n    Ray ray = Ray(vec3(x, y, 0),vec3(0, 0, 1));\n    \n    bool intersected = false;\n    \n    float t;\n    sphere_intersect(sphere, ray, t, intersected);\n    \n    if(intersected)\n    {\n        vec3 pi = ray.o + ray.d*t;\n        vec3 L = light - pi;\n        vec3 N;\n        sphere_normal(sphere, pi, N);\n        float dt = dot(normalize(L), normalize(N));\n\n        col = (sphere_color + light_color*dt);\n        clamp(col, vec3(0.0,0.0,0.0), vec3(1.0,1.0,1.0));\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}