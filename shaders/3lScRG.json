{
    "Shader": {
        "info": {
            "date": "1594603027",
            "description": "https://www.youtube.com/watch?v=PGtv-dBi2wE&t=362s",
            "flags": 0,
            "hasliked": 0,
            "id": "3lScRG",
            "likes": 1,
            "name": "Raymarching Sphere and Plane",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "Mega_Salamence",
            "viewed": 332
        },
        "renderpass": [
            {
                "code": "#define SURFACE_DIST .01\n#define MAX_DIST 100.\n#define MAX_STEPS 100\n\n\nfloat GetDist(vec3 p)\n{\n\tvec4 s = vec4(0, 1, 6, 1);\n    float sphereDist = length(p - s.xyz) - s.w;\n    float planeDist = p.y;\n    float d = min(sphereDist, planeDist);\n    return d;\n}\n\nfloat RayMarching(vec3 ro, vec3 rd) {\n\tfloat depth = 0.0f;\n    for(int i = 0 ;i < MAX_STEPS; i ++) {\n\t\tvec3 p = ro + depth * rd;\n        float dist = GetDist(p);\n        depth += dist;\n        if(dist < SURFACE_DIST || depth > MAX_DIST)\n            break;\n    }\n    return depth;\n}\n\n\nvec3 GetNormal(vec3 p)\n{\n \tvec2 e = vec2(0.01f, 0.0f);   \n    float d = GetDist(p);\n    vec3 n = vec3(\n    \td - GetDist(p - e.xyy),\n    \td - GetDist(p - e.yxy),\n    \td - GetDist(p - e.yyx));\n    return normalize(n);\n}\n\nfloat GetLight(vec3 p)\n{\n    vec3 lightPos = vec3(0, 5, 6);\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    float diff = clamp(dot(n ,l), 0., 1.);\n    float d = RayMarching(p + n * SURFACE_DIST, l);\n    if(d < length(lightPos - p))\n        diff *= .1;\n    return diff;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    \n    vec3 ro = vec3(0.0f, 1.0f, 0.0f);\n   \tvec3 rd = normalize(vec3(uv.x, uv.y, 1.0));\n    \n    float d = RayMarching(ro, rd);\n    vec3 p = ro + rd * d;\n   \tfloat diff = GetLight(p);\n    \n    \n   \tvec3 col = vec3(diff);\n    fragColor = vec4(col, 1.0f);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}