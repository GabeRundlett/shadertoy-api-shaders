{
    "Shader": {
        "info": {
            "date": "1494016185",
            "description": "mouse.x=distortion\nmouse.y =view\n\n3d raymarch version of \nhttps://www.shadertoy.com/view/4lV3zc\nmakes a maze of valleys on a distorted square tiling.",
            "flags": 0,
            "hasliked": 0,
            "id": "XsBcDc",
            "likes": 5,
            "name": "vornoy mountain maze",
            "published": 3,
            "tags": [
                "3d",
                "voronoi",
                "mountainmaze"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 873
        },
        "renderpass": [
            {
                "code": "//parent= https://www.shadertoy.com/view/4lV3zc\n\n#define mode3d\n\n//epsilon\n#define eps .01\n//max render distance\n#define zFar 50.\n#define rmIterations 64.\n\n//scales height of hills\n#define scaleHeight .7\n//flat lower plane height\n#define erroded .01\n\n//set distance to view plane, laziest camera.\n#define fowd 3.5\n\n// hash without sine\n// https://www.shadertoy.com/view/4djSRW\n#define MOD3 vec3(.1031, .11369, .13787) // int range\nvec2 hash22(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract(vec2((p3.x+p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\n\n// basic line function (ends are clipped not rounded)\nfloat line(in vec2 p, vec2 p0, vec2 p1) {\n    vec2 n = normalize(p1-p0);\n    p -= p0;\n    float l = .5 * length(p1-p0);\n    return abs(dot(p, vec2(n.y, -n.x))) + step(l, abs(dot(p, n)-l));\n}\n\n// get hash offset (jitter and p are assigned in main)\n#define getH(d) j*hash22(floor(p-d))-d;\n//[j]=jitter\nfloat vorLines(vec2 p,float j){\n // random offsets of neighbors (clockwise starting north)\n vec3 v = vec3(-1., 0., 1.);\n vec2 o[10];\n o[0]=getH(v.yz);\n o[1]=getH(v.zz);\n o[2]=getH(v.zy);\n o[3]=getH(v.zx);\n o[4]=getH(v.yx);\n o[5]=getH(v.xx);\n o[6]=getH(v.xy);\n o[7]=getH(v.xz);\n o[8]=o[0];\t // trying to prevent excess code\n o[9]=o[1];\t// <--'\n // center offset\n vec2 c=getH(0.);\n // center cell dot (we won't know which lines connect, so all line caps contribute)\n float f=length(fract(p)-c);\n // check neighbors and combine into f:\n for(int n=0;n<8;n++){\n  f=min(f,length(fract(p)-o[n])); // dots from neighbors\n  //lines between center and neighbors\n  if(distance(c, o[n])<1.)\n   f=min(f, line(fract(p), c, o[n]));\n  //lines between adjacent neighbors\n  if(distance(o[n], o[n+1]) < 1.)\n   f=min(f,line(fract(p),o[n],o[n+1]));\n  //lines between every other neighbor\n  if(distance(o[n], o[n+2]) < 1.)\n   f=min(f,line(fract(p),o[n],o[n+2]));\n }\n return f;}\n\n//making a linear gradient smoothe and more erroded.\nfloat vormod(float f){\n //f+=.05*sin(p.x*5.);\n //f+=.05*cos(p.y*5.);\n f=smoothstep(erroded,1.,f);\n //f=sqrt(f);\n f=1./exp(f);\n return f;}\n\nfloat df(vec3 p){\n float jitter=iMouse.z>0. ? min(1.,iMouse.x /iResolution.x):1.;\n //p.xy+=.05*vec2(sin(p.x*2.),cos(p.y*3.));\n p.z-=.3*(sin(p.x)+cos(p.y/3.));\n float f=vorLines(p.xy,jitter);\n return vormod(f)-p.z*scaleHeight;}\n\nfloat rm(vec3 o,vec3 d){\n float r=0.;\n for(float i=0.;i<rmIterations;i++){\n  float e=df(o+d*r);\n  if(e<eps||r>zFar)break;\n  r+=e*.8;\n }return r;}\n\n/*\n//below raymarching loop is poorly set up for this scene\n#define dynamicEps\nfloat rm0(vec3 o,vec3 r){float t=0.;\n for(float i=0.;i<rmIterations;++i){\n  float d=df(o+r*t);\n  t+=d;\n  #ifdef dynamicEps\n  d=pow(d,pow(t,.5));\n  #endif\n  if(d<eps*.005)break;\n }return t;}\n*/\n\n//vec3 Gradient(vec3 p,float d){vec2 e=vec2(.001,0);p*=99.;\n// return (vec3(df(p+e.xyy),df(p+e.yxy),df(p+e.yyx))*99.-d)/e.x;}\nvec3 Normal(vec3 p){vec2 e=vec2(.01,0);return normalize(vec3(\n df(p+e.xyy)-df(p-e.xyy),df(p+e.yxy)-df(p-e.yxy),df(p+e.yyx)-df(p-e.yyx)));}\nvec3 Normal2(vec3 p){if(df(p)<.03)return Normal(p);return vec3(-.7);}\n\n//transform.2d:\n//2d rotation r=3.14 -> half rotation roundrclockwise\n#define r2d(r) mat2(cos(r),-sin(r),sin(r),cos(r))\n\nvoid mainImage( out vec4 fragColor, in vec2 In ) {\n vec2 res = iResolution.xy;\n //vec2 u = (In.xy-res/2.) / res.y + 1.e-4; // a small value is added to avoid errors where floor meets fract\n vec2 u=In/iResolution.xy;\n u-=.5;\n // init p, with zoom\n u*=6.;\n u.x*=iResolution.x/iResolution.y;\n #ifdef mode3d\n u.y=-u.y;\n //float f=vorLines(p,jitter);\n vec3 o=vec3(-3);\n vec3 d=vec3(fowd,u);\n d=normalize(d);  \n d.xz*=r2d(iMouse.y*3./iResolution.y);\n d.xy*=r2d(iTime*.2);\n float e=rm(o,d);\n e=min(e,zFar); \n vec3 c=Normal2(o+d*e)*.5+.5;\n//super cheesy ambient at lead destroys optical illusions:\n c=c*.2+pow(c,vec3(e*.5-1.3));\n #else\n  u*=2.;\n  float jitter=iMouse.z>0. ? min(1.,iMouse.x /iResolution.x):1.;\n  float f=vorLines(u,jitter);\n  vec3 c=vec3(1.-vormod(f));\n  //c=vec3(f);\n #endif   \n //e=fract(e*3.);\n fragColor = vec4(c, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}