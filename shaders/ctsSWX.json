{
    "Shader": {
        "info": {
            "date": "1675425969",
            "description": "un shader ",
            "flags": 0,
            "hasliked": 0,
            "id": "ctsSWX",
            "likes": 1,
            "name": "Truc_rotation",
            "published": 3,
            "tags": [
                "rotation"
            ],
            "usePreview": 0,
            "username": "S_h",
            "viewed": 139
        },
        "renderpass": [
            {
                "code": "// SOULEYMA \n// PARTIEL 1\n\nvec2 rot(vec2 st, float a)\n{\n    return st * mat2(cos(a), -sin(a),\n                    sin(a), cos(a));\n}\n\nvec3 opRep( in vec3 p, in vec3 c)\n{\n    return mod(p+0.3*c,c)-0.3*c;\n}\n\nfloat SDF(vec3 p)\n{\n    p = opRep(p, vec3(3.));\n    return length(p)-0.5;\n}\n\n\n\n\nfloat map(vec3 pos){\n\n    float v= 0.0;\n    pos = opRep(pos,vec3(4.0));\n    \n    return v;\n}\n\nfloat CastRay(vec3 ro, vec3 rd){\n    float contact = 0.0;\n    for(int i=0; i<64; i++)\n    {\n        float ray= map(ro+rd*contact);\n        if(ray < (0.0001*contact))\n        {\n            return float(i)/32.;\n        }\n        contact +=ray;\n    }\n    return -1.0;\n}\n\nvec3  render(vec3 ro, vec3 rd){\n    float contact = CastRay(ro, rd);\n    vec3 col = vec3(0.0);\n    \n    \n    if(contact == -1.0){\n        col = vec3(0.0);}\n    else {\n        col = vec3(1.0-contact);}\n    return col;\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.*(fragCoord/iResolution.xy)-1.0;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    vec2 uv1 = uv + vec2(-0.25,0.0);\n    \n    uv = rot(uv+uv1*.2, iTime*0.5);   \n    \n    vec3 p = vec3 (0.0,0.,iTime);\n    vec3 dir = normalize(vec3(uv,2.));\n    \n    float shad = 1.;\n    \n    for (int i=0;i<60;i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            shad = float(i)/64.;\n            break;\n        }\n        p += d*dir*3.;\n    }\n    \n    \n    vec3 cameraPos = vec3(-0.5, 0.0, 2.0*iTime-5.0);\n    vec3 cameraTar = vec3(-0.5, 0.0, 2.0*iTime);\n    \n    vec3 forward = normalize(cameraTar - cameraPos);\n    vec3 right = normalize(cross(vec3(0.0, -1.0, 0.0), forward));\n    vec3 up = normalize(cross(right, forward));\n    vec3 viewDir = normalize(uv.x * right + uv.y * up +2.0 * forward);\n\n    vec3 col1 = render(cameraPos, viewDir) ;\n    \n    \n    \n    vec3 col = vec3(1.2 - shad)* cos(iTime*vec3(0.9,0.2,0.3)-.2) + col1 ;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}