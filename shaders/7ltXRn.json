{
    "Shader": {
        "info": {
            "date": "1638638631",
            "description": "Fork of [url=https://www.shadertoy.com/view/fltXRr]https://www.shadertoy.com/view/fltXRr[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "7ltXRn",
            "likes": 6,
            "name": "Triangle expression fork",
            "published": 3,
            "tags": [
                "triangle",
                "equation"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 187
        },
        "renderpass": [
            {
                "code": "float tri(in vec2 p, in vec2 a, in vec2 b, in vec2 c)  {\n    p = inverse(mat2(b - a, c - a)) * (p - a);\n    return max(1.0 - min(p.x, p.y), p.x + p.y) - 1.0;\n\n    // For those picky people who prefer abs() instead\n    //p.x = 2.0 * p.x + p.y - 1.0;\n    //return abs(p.x) + abs(2.0 * p.y + abs(p.x) - 1.0) - 1.0;\n}\n\n/*float tri(in vec2 p, in vec2 a, in vec2 b, in vec2 c) {\n    vec2 ba = b - a;\n    vec2 ca = c - a;\n\n    p -= a;\n    p = mat2(ba.x, -ba.y, ba.y, ba.x) * p / length(ba);\n    p.x /= length(ba);\n\n    float proj = dot(ca, ba) / dot(ba, ba);\n    p.y /= length(ca - ba * proj) * sign(dot(ca, vec2(-ba.y, ba.x)));\n    p.x -= (proj - 0.5) * p.y;\n\n    p *= 2.0;\n    p -= 1.0;\n\n    return abs(p.x) + abs(p.y + abs(p.x)) - 1.0;\n}*/\n\n#define draw(dist, col) color = mix(color, col, smoothstep(pix, 0.0, dist))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y * 4.0;\n    float pix = 8.0 / iResolution.y; // 2x pixel width\n\n    vec2 a = 3.0 * vec2(sin(iTime * 0.75), cos(iTime));\n    vec2 b = 3.0 * vec2(cos(iTime), sin(iTime * 1.25));\n    vec2 c = 3.0 * vec2(cos(iTime * 1.25), cos(iTime * 0.5));\n\n    float triangle = tri(uv, a, b, c);\n    vec3 color = vec3(0.0, smoothstep(fwidth(triangle), 0.0, triangle), 0.0);\n\n    draw(length(uv - a) - 0.1, vec3(1.0, 0.0, 0.0));\n    draw(length(uv - b) - 0.1, vec3(1.0, 0.0, 0.0));\n    draw(length(uv - c) - 0.1, vec3(1.0, 0.0, 0.0));\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}