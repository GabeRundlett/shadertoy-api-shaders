{
    "Shader": {
        "info": {
            "date": "1481478620",
            "description": "Demonstrates text encoding scheme and decoder as used in \"[url=https://www.shadertoy.com/view/Ml3SWj]Quine in One Frame[/url]\"",
            "flags": 0,
            "hasliked": 0,
            "id": "XldSWB",
            "likes": 22,
            "name": "Quine Explanation",
            "published": 3,
            "tags": [
                "text"
            ],
            "usePreview": 1,
            "username": "ttg",
            "viewed": 1538
        },
        "renderpass": [
            {
                "code": "/*\nDemonstrates text encoding scheme and decoder as used in \"Quine in One Frame\"\n\nExplanation of the Quine follows:\n\nArrays are built at compile-time using the x-macro preprocessor technique.  By\ndefining, undefining, and redefining the repeated 'a' macro called within, the\narray is used in two different ways.  To draw the definitions themselves, each\nelement is treated as a base-10 number and thus each digit is extracted using\ninteger division and modulo by 10.  Each element encodes four characters of\nsource code using base-97; the appropriate source code character for a given\non-screen position is thus extracted from the aray using integer division and\nmodulo by 97.  The constant 97 is chosen to allow 95 different characters (32\nto 126) and a value of 96 to be used to indicate a newline.  Newline handling\nis convoluted but consists of offsetting which element of the array is used\naccording to how many elements containing newlines have already been processed\nand to their relative positions.  Each decimal-represented base-97 value has\nconstant 10000000 added to it to prevent leading zeros, which would cause octal\ninterpretation, whereas leading spaces would increase the complexity of the\ndecimal-drawing code.  The constant chosen is 97 rather than 100 so that the\nhighest four-digit value that can be encoded, plus 10000000, which is 97^4-1 +\n10000000 = 98529280, is less than 99999999 and thus fits within eight digits in\nsource form.  Only four digits of base-97 are encoded per element so as not to\noverflow the 32-bit signed integers they are compiled into.\n\n\nCopyright (c) 2016, Theron Tarigo.\nAll rights reserved.\nEncoder and decoder may be used under the terms of the 2-Clause BSD License;\nsee end of file.\n*/\n\n#define AA    a(43512997)a(81977671)a(70120877)a(10797137)a(86671303)a(71899071)a(81856616)a(71833309)a(72980820)a(72068429)\n#define AB AA a(71899067)a(84845574)a(10807885)a(72068923)a(10023656)a(77365724)a(77359078)a(81837753)a(85458309)a(11825442)\n#define AC AB a(10000096)a(44604729)a(70064036)a(77376006)a(82759881)a(76361726)a(88271697)a(10666369)a(80114981)a(33729594)\n#define AD AC a(10000096)a(40897766)a(92008909)a(85488473)a(88271518)a(10619733)a(71899951)a(77346919)a(87358927)a(10807889)\n#define AE AD a(81856617)a(76361765)a(22595614)a(85582577)a(85496249)a(82738346)a(86503124)a(87320324)a(81883293)a(73106163)\n#define AF AE a(41868379)a(72717848)a(81882988)a(20960399)a(72717848)a(81882988)a(20958459)a(72069787)a(72717848)a(81882988)\n#define AG AF a(10797409)a(10778311)a(73594239)a(72062508)a(16396245)a(71928292)a(71768124)a(73614336)a(77422542)a(81301486)\n#define AH AG a(76361773)a(70103302)a(91235061)a(10807885)a(72068923)a(10798874)a(10646963)a(74544354)a(81978937)a(70169211)\n#define AI AH a(10005123)a(10647831)a(89410771)a(72981102)a(74581606)a(87359130)a(85760079)a(73707050)a(80179098)a(20958834)\n#define AJ AI a(71826635)a(73696291)a(73716487)a(77406160)a(85494796)a(73614314)a(85758164)a(70856123)a(22026254)a(81995794)\n#define AK AJ a(73746040)a(81828390)a(76520272)a(73592593)a(10646964)a(77415558)a(85758640)a(87442442)a(87320349)a(88365311)\n#define AL AK a(74799879)a(77367248)a(75456958)a(72757036)a(86446457)a(10619219)a(10732224)a(88299952)a(71073836)a(24734494)\n#define AM AL a(44387057)a(10656662)a(80932692)a(10656854)a(82747755)a(10666378)a(84845757)a(70101655)a(87321790)a(10750197)\n#define AN AM a(86503497)a(71798379)a(82747672)a(88365311)a(74806250)a(86402366)a(31245606)a(76361742)a(83774593)a(83792524)\n#define AO AN a(87313836)a(82908953)a(72981015)a(72711052)a(76332060)a(71946222)a(10666375)a(10611656)a(77441074)a(10000096)\n#define AP AO a(82836413)a(71927391)a(81196333)a(86446937)a(82835142)a(85760079)a(88358221)a(91113599)a(71946208)a(10666663)\n#define AQ AP a(80284041)a(72980824)a(70161231)a(86446353)a(10694507)a(73649251)a(10646979)a(77413236)a(81194877)a(72061860)\n#define AR AQ a(81025813)a(80106525)a(91230345)a(22777474)a(76361744)a(82843204)a(70065795)a(33033305)a(85758430)a(82888885)\n#define AS AR a(10798019)a(70046280)a(89404997)a(10646963)a(74544354)a(81978917)a(76332060)a(71946222)a(85752654)a(26428210)\n#define AT AS a(87407860)a(26635985)a(70064243)a(69332152)a(80169606)a(82759822)a(30087033)a(10627687)a(88364913)a(10798019)\n#define AU AT a(77365700)a(71768893)a(10611663)a(73800465)a(81839073)a(10439594)a(80057640)a(10683831)a(72784007)a(74799879)\n#define AV AU a(77406143)a(82843490)a(80171130)a(72068251)a(86671110)a(81976605)a(87445558)a(73894843)a(74674834)a(87359026)\n#define AW AV a(10825640)a(71826608)a(80019907)a(81978929)a(73895330)a(72980824)a(85459404)a(77406161)a(86407772)a(69960726)\n#define AX AW a(85486157)a(74808010)a(10685198)a(10730876)a(91234666)a(73705701)a(87445546)a(82843282)a(77366190)a(74807418)\n#define AY AX a(90124794)a(73755456)a(70139612)a(70046852)a(69972190)a(70892410)a(10760753)a(71806446)a(73614345)a(70064243)\n#define AZ AY a(87407927)a(76368840)a(10778307)a(70121268)a(72982276)a(86446937)a(82843134)a(10003654)a(71826607)a(73611998)\n#define BA AZ a(70040172)a(73735180)a(86408730)a(73614315)a(70111398)a(33033318)a(70047143)a(10683836)a(10000096)a(71900051)\n#define BB BA a(87283767)a(10161521)a(24754880)a(24609141)a(72717581)a(87407916)a(86672759)a(10760743)a(89146749)a(10721842)\n#define BC BB a(72756258)a(10853585)a(82883278)a(90087147)a(75720974)a(88298885)a(71769004)a(72982167)a(87283585)a(77367248)\n#define BD BC a(85599929)a(87284338)a(82836233)a(90086774)a(73594073)a(80018742)a(77365918)a(86510951)a(73755471)a(82908372)\n#define BE BD a(10694490)a(85494795)a(72982657)a(72981015)a(81035982)a(91010318)a(10750101)a(87348769)a(72717557)a(80894791)\n#define BF BE a(72839694)a(77365918)a(71899067)a(22777474)a(76361744)a(82843204)a(70065795)a(71834285)a(73708412)a(85754307)\n#define BG BF a(10777927)a(76369631)a(87348363)a(10161521)a(10788610)a(87348369)a(10797409)a(10000096)a(76406272)a(73763532)\n#define BH BG a(74638748)a(22511713)a(77415571)a(70047143)a(10797405)a(86671096)a(81194965)a(10656854)a(82747740)a(20959912)\n#define BI BH a(88358169)a(24754880)a(24754876)a(10825640)a(71826612)a(85754307)a(66775184)a(10103595)a(25667553)a(24754880)\n#define BJ BI a(10272886)a(32103512)a(26655494)a(10694908)a(80020503)a(10797405)a(81190944)a(33054500)a(33052115)a(81828390)\n#define BK BJ a(76520272)a(74582198)a(10825748)a(76406879)a(73668253)a(86671201)a(75494871)a(10694519)a(86503497)a(71798382)\n#define BL BK a(82880188)a(10004637)a(80200619)a(82908886)a(72755581)a(87445558)a(73893577)a(86402366)a(30997866)a(72981208)\n#define BM BL a(71899067)a(72069593)a(84845955)a(73705701)a(86672662)a(10619636)a(81939953)a(87407939)a(82917116)a(74609944)\n#define BN BM a(10797409)a(10180530)a(70931423)a(86445681)a(73614322)a(81985614)a(73754026)a(87348762)a(10619608)a(10638143)\n#define BO BN a(83708138)a(72068923)a(87409297)a(10000096)a(42694715)a(85533002)a(86666294)a(25722491)a(76369710)a(81193603)\n#define BP BO a(85533009)a(10000096)a(10000000)a(10000000)a(10000000)a(10000000)a(10000000)a(10000000)a(10000000)a(10000000)\n#define STRING BP\n\nvec2 decode(vec2 uv, ivec2 pagesize) {\n    vec2 v=fract(uv*vec2(pagesize));\n    int x=int(floor(uv.x*float(pagesize.x)));\n    int y=int(floor((1.-uv.y)*float(pagesize.y)));\n    int o=-1;\n    int i=0;\n    int q=0;\n    int r=0;\n    int pos=x+128*y;\n    int n=(pos/4);\n    int m=(pos-4*n);\n    int l=-1;\n    int e=((m<3)?97:1)*((m<2)?97:1)*((m<1)?97:1);\n\t#define a(b){q=(b-10000000);r=q/e-97*(q/e/97);o=n==i?r:o;if(n>i&&q-97*(q/97)==96){o=-1;n-=32-i+l;l=i;}}i++;\n\tSTRING\n\t#undef a\n    if (o==-1||o==96||x<0||y<0||x>pagesize.x||y>pagesize.y) o=0;\n    return vec2(.25+.5*v.x+mod(float(o+32),16.),0.85*v.y+15.02-float(o/16+2))/16.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 u=((fragCoord.xy)/iResolution.xy-vec2(0.5))/0.9+vec2(0.5);\n    ivec2 pagesize = ivec2(80,24);\n    fragColor.rgb=vec3(1.-texture(iChannel0,decode(u,pagesize)).r);\n}\n\n// Text is encoded using the following Python 2/3 program:\n/*\n\nf = open(\"text.txt\",\"r\")\ntext = f.read()\nf.close()\n\nlines = [line.ljust((len(line)//4+1)*4-1,\" \") for line in text.split('\\n')]\ntext = \"\\n\".join(lines)+\"    \"*10\n\n# mode=1 when 26 lines or fewer are needed as in case of quine\n# mode=2 for extended range (max. 676 lines) such as used by explanation\nmode=2\n\ndef encode4(ch):\n    a = 0\n    for i in range(4):\n        a*=97\n        b = ord(ch[i])-32\n        if ch[i]=='\\n':\n            b=96\n        if 0<=b and b<97:\n            a+=b\n    return str(a+10000000).rjust(8,\" \")\n\nfor ln in range(len(text)//40):\n    if ln==0:\n        if mode==1:\n            prefix = \"#define A   \"\n        if mode==2:\n            prefix = \"#define AA    \"\n    else:\n        if mode==1:\n            prefix = \"#define %s %s \"%(chr(65+ln%26),chr(65+(ln-1)%26))\n        if mode==2:\n            prefix = \"#define %s%s %s%s \"%(chr(65+ln//26),chr(65+ln%26),chr(65+(ln-1)//26),chr(65+(ln-1)%26))\n    textline = text[ln*40:ln*40+40]\n    defline = \"\"\n    for i in range(10):\n        defline += \"a(\"+encode4(textline[4*i:4*(i+1)])+\")\"\n    print(prefix+defline)\n\n*/\n\n/*\nCopyright (c) 2016, Theron Tarigo.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}