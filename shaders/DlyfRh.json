{
    "Shader": {
        "info": {
            "date": "1701813074",
            "description": "3D volumetric plot of 4D split quaternion (2D matrix) function.\nClick & Drag!\n[url=https://www.shadertoy.com/playlist/fXjyRd]GEOMETRY PLAYLIST[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "DlyfRh",
            "likes": 11,
            "name": "Matrix Plot 3D",
            "published": 3,
            "tags": [
                "math",
                "volumetric",
                "4d",
                "orbit",
                "quaternion",
                "matrix",
                "hyperbolic",
                "split",
                "density"
            ],
            "usePreview": 0,
            "username": "domrally",
            "viewed": 222
        },
        "renderpass": [
            {
                "code": "/*\nby Dom Mandy in 2023\n*/\nvoid mainImage(out vec4 p, vec2 v) {\n    // coordinates\n    vec2 i = iResolution.xy;\n    v += v - i;\n    vec3 E = 2. * vec3(v / i.y, -1),\n         R = normalize(vec3(0, -1, 3));\n\n    // camera\n    float m = 9., d, k,\n          t = mix(iTime / 9., -iMouse.x / 2e2, max(0., sign(iMouse.z))),\n          e = t + atan(E.z, E.x),\n          r = t + atan(R.z, R.x);\n    E.xz = length(E.xz) * vec2(cos(e), sin(e));\n    R.xz = length(R.xz) * vec2(cos(r), sin(r));\n\n    mat2 M, F,\n         // real\n         c = mat2(1),\n         // imaginary\n         b = mat2(0, 1,-1, 0),\n         // hyperbolic\n         a = mat2(0, 1, 1, 0);\n\n    // volumetric\n    vec3 X = E;\n    for (; k++ < 50.; X += R * .08) {\n        mat2 D = a + b + c,\n             C = F = X.x * a + X.y * b + X.z * c;\n        D = D * F + F * D;\n        F = F * F + C;\n        vec2 G = log(abs(F[0])),\n             H = log(abs(F[1]));\n\n        // density\n        d += 1. / (1. + k * smoothstep(.0, .2, abs(determinant(mat2(G, H) * F * inverse(D)))));\n\n        // orbit trap\n        if ((m = min(d, m)) == d) M = F;\n    }\n\n    // coloring\n    d = smoothstep(0., 25., d);\n    p.rgb = sqrt(d + .12 * d * vec3(8, 3, 9) * cos(atan(M[0].y - M[1].x, M[1].y + M[0].x) - vec3(0, 2, 4)));\n}\n\n\n/*\nSEE ALSO\n\nhttps://en.wikipedia.org/wiki/Split-quaternion\nhttps://en.wikipedia.org/wiki/Volume_rendering\n*/\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}