{
    "Shader": {
        "info": {
            "date": "1659830956",
            "description": "city 2d-b",
            "flags": 0,
            "hasliked": 0,
            "id": "fttyWN",
            "likes": 5,
            "name": "city 2d-b",
            "published": 3,
            "tags": [
                "city2db"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 199
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(8.0*antialiasing(1.0),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.05,0.0));\n  return colOut;\n}\n\n\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nvec3 Luna(vec2 p, vec3 colOut)\n{   float d1= sdCircle( p,2.0);\n    colOut= DrawFigBorde(vec3(0.7), colOut, d1);\n    return colOut;    \n}\n\nvec3 nubeA(vec2 p, vec3 colOut)\n{  p=vec2(p.y-2.0,p.x);\n   float d1=3.0*sin(p.x*0.25)+1.0*sin(p.x*0.5);\n   float d2=6.0*cos(p.x*4.0);\n   float d3= sdCircle( p-vec2(d1,d2),1.0 );\n    d1+=p.y+d3;\n    d2+=p.y+2.0+1.5*sin(p.y+p.x+iTime);\n    float duni= differenceSDF(d1, d2);\n    //16/9 or 1.77778\n    float aspect = iResolution.x / iResolution.y;\n     //Amount of smoothness for anti-aliasing\n    float px = 2.0*aspect/iResolution.x;\n    float sh3=smoothstep(px,-px,duni);\n    colOut= mix(colOut,vec3(0.0),sh3);\n    return colOut;\n}\n\n\nvec3 drawGradient(in vec2 v_p)\n{ return mix( vec3(0.0,0.3,0.7), vec3(1.0,0.8,0.7), 1.0-v_p.y + 0.7); }\n\nvec3 GraficarEdificioCol(vec2 p, vec3 colIn, vec3 colOut)\n{  float t=0.0;\n    float x=p.x;\n    float fx1=2.+2.*sin(floor(x+t)*4321.);\n    float y=p.y+fx1;\n    vec3 col= DrawFigBorde(colIn, colOut, y);\n    return col;\n}\n\nvec3 getColor(float c){\n   float r = cos((c-0.75)*PI);\n   float g = cos((c-0.55)*PI);\n   float b = cos((c-0.25)*PI);\n   return vec3(r,g,b);\n}\n\nvec3 estrella(vec2 p, vec3 colOut)\n{\n   float r = 5.5; \n   vec2 uv=p;\n   float d1= sdCircle( p,0.015);\n   float v = r/(d1);\n   \n   vec3 luna= getColor(0.916)*v; \n   colOut= DrawFigBorde(luna, colOut, d1);\n   return luna;\n   \n}  \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.5);\n    float esc=8.0;\n    uv*=esc;\n    vec2 uv0=uv;\n    \n    vec2 st = fragCoord.xy / min(iResolution.x, iResolution.y) ;\n    float t=iTime;\n    vec2 st0=st;\n    st+=vec2( t*0.5,0.0+0.15*sin(t));\n    \n    vec2 p=st;\n\t\n    \n    vec3 col=vec3(1.0);\n    col= nubeB(st, col);\n    col*= drawGradient(p+ vec2(0.0,0.75));\n    col= Luna(uv-vec2(0.0,8.0), col);\n    \n    col= nubeA(uv-vec2(0.0,8.0), col);\n    uv.y+=2.0*sin(t+cos(t));\n    uv.x= opRep1D(uv.x+t*2.0, 20.0 );\n    col= nubeA(uv-vec2(0.0,8.0), col);\n    \n    uv=uv0;\n    float ts=3.0*sin(t);\n    if( ts>0.0)\n    col=(col+estrella(uv-vec2(0.0,8.0), col))/2.0;\n    col= GraficarEdificioCol(uv-vec2(0.0-iTime,2.5), vec3(0.25,0.2,1.0)*0.5, col);\n    col= GraficarEdificioCol(uv-vec2(0.0,2.0), vec3(0.5,0.2,0.5), col);\n    col= GraficarEdificioCol(uv-vec2(0.0,1.0), vec3(0.25,0.2,1.0), col);\n    \n    col=pow(col,  vec3(0.554545));\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n////------------\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n////------------\n//nube\n//https://www.glslsandbox.com/e#82722.0\nfloat random( vec2 v ) \n{\treturn fract(sin(dot(v, vec2(114.0, 514.0))) * 1919810.0) * 2.0 - 1.0; }\n\nfloat random1d( float  v ) \n{\treturn fract(sin(dot( vec2(v,v), vec2(114.0, 514.0))) * 1919810.0) * 2.0 - 1.0; }\n\nfloat noise( vec2 v, float octave ) {\n\tvec2 maj = floor(v * pow(2.0, octave));\n\tvec2 sub = fract(v * pow(2.0, octave));\n\tfloat v00 = random(maj);\n\tfloat v10 = random(maj + vec2(1.0, 0.0));\n\tfloat v01 = random(maj + vec2(0.0, 1.0));\n\tfloat v11 = random(maj + vec2(1.0, 1.0));\n\tvec2 u = smoothstep(0.,1.,sub);\n\t\n\treturn mix(v00, v10, u.x) +\n\t\t(v01 - v00)* u.y * (1.0 - u.x) +\n\t\t(v11 - v10) * u.x * u.y;\n}\n\nvec3 nubeB(in vec2 fragCoord, vec3 colOut )\n{\n    vec2 st = fragCoord;\n \tfloat v = 0.0;\n\tfor (int i = 0; i < 10; i ++) {\n\t\tv += noise(st, float(i)) / pow(2.0, float(i));\n\t}\n   return   vec3(v) * 0.5 + 0.5;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}