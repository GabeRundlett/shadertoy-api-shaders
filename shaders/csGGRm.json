{
    "Shader": {
        "info": {
            "date": "1678294995",
            "description": "mergence\n\n\nI swear i have no idea how shadertoy works",
            "flags": 0,
            "hasliked": 0,
            "id": "csGGRm",
            "likes": 1,
            "name": "mergence",
            "published": 3,
            "tags": [
                "d"
            ],
            "usePreview": 0,
            "username": "UsamagorQ",
            "viewed": 94
        },
        "renderpass": [
            {
                "code": "vec2 meth(vec2 uv, vec2 iResolution, float x, float y)\n{\n    float z,w,s = iResolution.x/uv.x,p;\n    w = uv.y*iResolution.y-iResolution.x/abs(y*x/iTime);\n    z = s*x-w;\n    p = z*w*s/iResolution.x+iResolution.y-(x*y);\n    vec2 r = vec2(iTime/uv.x*y/x*iResolution.x-z+iTime*(iTime-(w+p)), w*s+p*x/iResolution.x-uv.y);\n    return r;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 h = meth(uv,iResolution.xy,fragCoord.x*cos(iTime/2.-uv.x),fragCoord.y*sin(iTime*2.+uv.y));\n    // Time varying pixel color\n    vec3 col = vec3(h, iResolution.x-iResolution.y*iTime/fragCoord.x/fragCoord.y);\n\n    // Output to screen\n    fragColor = vec4(col/uv.y-h.y*cos(sin(h.x/uv.x)),0.15234);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}