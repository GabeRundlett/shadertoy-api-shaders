{
    "Shader": {
        "info": {
            "date": "1706755225",
            "description": "it's a houndstooth pattern, you dolt!",
            "flags": 0,
            "hasliked": 0,
            "id": "McBSWy",
            "likes": 1,
            "name": "eindacor_houndstooth",
            "published": 3,
            "tags": [
                "houndstooth"
            ],
            "usePreview": 0,
            "username": "Eindacor_DS",
            "viewed": 137
        },
        "renderpass": [
            {
                "code": "#define AA .002f\n#define PI 3.141592653f\n#define TWOPI 6.28318530718f\n\nvec2 rotatePointAroundOtherPoint(vec2 center, vec2 p, float angleInRadians) {\n    mat2x2 rotationMatrix = mat2x2(\n    \tcos(angleInRadians), -sin(angleInRadians),\n        sin(angleInRadians), cos(angleInRadians)\n    );\n    \n    return (rotationMatrix * (p - center)) + center;\n}\n\nfloat getHoundsTooth(vec2 uv, float gridSize) {\n    \n    float gridDiagonal = sqrt(2. * gridSize * gridSize);\n    int gridRow = int(floor(uv.y/gridSize));\n    int gridCol = int(floor(uv.x/gridSize));\n    \n    vec2 cellCenter = vec2(float(gridCol) * gridSize + gridSize * .5,\n                           float(gridRow) * gridSize + gridSize * .5);\n                           \n    float modVal = 2.;\n                           \n    if (int(mod(float(gridRow), modVal)) == 1 && \n        int(mod(float(gridCol), modVal)) == 1 ) {\n        return 0.;\n    }\n    \n    vec2 localUv = rotatePointAroundOtherPoint(cellCenter, uv, TWOPI / 8.) - cellCenter;\n    bool isStripe = int(mod(floor(localUv.x / gridDiagonal * 4.), 2.)) == 0;\n    \n    if (int(mod(float(gridCol), modVal)) == 1) {\n        if (isStripe) {\n            return 0.;\n        }\n    } else if (int(mod(float(gridRow), modVal)) == 1) {\n        if (!isStripe) {\n            return 0.;\n        }\n    }\n    \n    return 1.;\n}\n\nfloat getHoldTransitionValue(float lower, float upper, float holdTime, float transitionTime, float time) {\n    float period = 2. * holdTime + 2. * transitionTime;\n    float halfPeriod = period / 2.;\n    float relativeTime = fract(time / halfPeriod);\n    float halfHoldTime = holdTime / 2.;\n    \n    float val = smoothstep(halfHoldTime, halfHoldTime + transitionTime, relativeTime * halfPeriod);\n    \n    if (int(time / halfPeriod) % 2 == 0) {\n        val = 1. - val;\n    }\n\n    return mix(lower, upper, val);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspectRatio = iResolution.x / iResolution.y;\n    uv.x *= aspectRatio;\n    \n    uv += vec2(iTime * .05);\n    float gridSize = .2;\n    \n    float adjustment = getHoldTransitionValue(1., 0., 2., 8., iTime);\n    \n    fragColor = vec4(getHoundsTooth(uv, gridSize), \n        getHoundsTooth(vec2(uv.x + adjustment * gridSize, uv.y), gridSize), \n        getHoundsTooth(vec2(uv.x - adjustment * gridSize, uv.y), gridSize), 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}