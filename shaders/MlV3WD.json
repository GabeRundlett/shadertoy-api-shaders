{
    "Shader": {
        "info": {
            "date": "1474775931",
            "description": "Two Scenes In One, By Using Scene Bar.\nBasic Bar Tutorial:\nhttps://www.shadertoy.com/view/XtdGRX",
            "flags": 32,
            "hasliked": 0,
            "id": "MlV3WD",
            "likes": 3,
            "name": "Scene Bar",
            "published": 3,
            "tags": [
                "raytracing",
                "raymarching",
                "bar",
                "switch"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 610
        },
        "renderpass": [
            {
                "code": "//Tutorial\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Get X Of Mouse Position.\n    float X = iMouse.x / iResolution.x;\n    //Get Canvas\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //Make Bar \n    //Start\n    if(uv.x <= X - 0.01 && uv.x >= X + 0.01)\n    {\n        fragColor = vec4(0.9,0.0,0.0,1.0);\n    }\n    //End\n    //Now Make Scene 1: Note: You Can Make Anything In Here, Just Make Sure U Texture2D A Buffer.\n    else if(uv.x <= X - 0.01){fragColor = texture(iChannel1, uv);}\n    //Then Make Scene 2: Note: You Can Make Anything In Here, Just Make Sure U Texture2D A Buffer.\n    else if(uv.x >= X + 0.01){fragColor = texture(iChannel0, uv);}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 s(vec3 p)\n{\n    return vec3(p.x + p.y * p.z+p.x,p.y - p.x * p.x-p.z,p.z*p.z*p.y+p.x);\n}\nfloat circle(vec3 p)\n{\n    return length(s(cos(p))) - 0.5;\n}\nfloat trace(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    for(int i = 0; i < 48; i++)\n    {\n        vec3 p = ro+t*rd;\n        float d = circle(p.xyz+p.zxy/3.);\n        t += d * 0.5;\n    }\n    return t;\n}\nmat2 rotF(float a)\n{\n    return mat2(cos(a),-sin(a),sin(a),cos(a));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 rd = normalize(vec3(uv, 0.5));\n    rd.xz *= rotF(iTime);\n    vec3 ro = vec3(0.0, 0.0, -3.0);\n    float t = trace(ro, rd);\n    float fog = 1.0/(1.0+t*t*0.1);\n    fragColor = vec4(fog);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3 s(vec3 p)\n{\n    return vec3(p.x + p.y * p.z+p.x,p.y - p.x * p.x-p.z,p.z*p.z*p.y+p.x);\n}\nfloat star(vec3 p)\n{\n    return length(s(sin(p))) - 0.5;\n}\nfloat trace(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    for(int i = 0; i < 24; i++)\n    {\n        vec3 p = ro+t*rd;\n        float d = star(p);\n        t += d * 0.5;\n    }\n    return t;\n}\nmat2 rotF(float a)\n{\n    return mat2(cos(a),-sin(a),sin(a),cos(a));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 rd = normalize(vec3(uv, 1.0));\n    rd.xz *= rotF(iTime);\n    vec3 ro = vec3(iTime-2.0, iTime, -3.0);\n    float t = trace(ro, rd);\n    float fog = 1.0/(1.0+t*t*0.1);\n    fragColor = vec4(fog);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}