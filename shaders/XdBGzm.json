{
    "Shader": {
        "info": {
            "date": "1385082286",
            "description": "Yet another audio visualization.",
            "flags": 0,
            "hasliked": 0,
            "id": "XdBGzm",
            "likes": 18,
            "name": "Funky Fog",
            "published": 3,
            "tags": [
                "noise",
                "visualization",
                "audio"
            ],
            "usePreview": 0,
            "username": "4rknova",
            "viewed": 3130
        },
        "renderpass": [
            {
                "code": "// by Nikos Papadopoulos, 4rknova / 2013\n// Creative Commons Attribution 4.0 International (CC BY 4.0)\n\n#define PI\t3.14159265359\n\n#define S(t) (texture(iChannel0, t).x)\n\nfloat hash(in vec3 p)\n{\n\treturn fract(sin(dot(p,vec3(283.6,127.1,311.7))) * 43758.5453);\n}\n\nfloat noise(vec3 p, vec3 fft, vec3 wav){\n\tp.y -= iTime * 2. + 2. * fft.x * fft.y;\n\tp.z += iTime * .4 - fft.z;\n\tp.x += 2. * cos(wav.y);\n\t\n    vec3 i = floor(p);\n\tvec3 f = fract(p); \n\tf *= f * (3.-2.*f);\n    \n    vec2 c = vec2(0,1);\n\n    return mix(\n\t\tmix(mix(hash(i + c.xxx), hash(i + c.yxx),f.x),\n\t\t\tmix(hash(i + c.xyx), hash(i + c.yyx),f.x),\n\t\t\tf.y),\n\t\tmix(mix(hash(i + c.xxy), hash(i + c.yxy),f.x),\n\t\t\tmix(hash(i + c.xyy), hash(i + c.yyy),f.x),\n\t\t\tf.y),\n\t\tf.z);\n}\n\nfloat fbm(vec3 p, vec3 fft, vec3 wav)\n{\n\treturn .5000 * noise(1. * p, fft, wav) \n\t\t + .2500 * noise(2. * p, fft, wav)\n\t     + .1250 * noise(4. * p, fft, wav)\n\t     + .0625 * noise(8. * p, fft, wav);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 fft = vec3(S(vec2(.0,.25)),S(vec2(.5,.25)),S(vec2(1.,.25)));\n\tvec3 wav = vec3(S(vec2(.0,.75)),S(vec2(.5,.75)),S(vec2(1.,.75)));\n\tfloat t  = cos(fft.x * 2. / PI);\n\tfloat ct = cos(t);\n\tfloat st = sin(t);\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 vc = (2. * uv - 1.) * vec2(iResolution.x / iResolution.y, 1.);\n\t\n\tvc = vec2(vc.x * ct - vc.y * st\n\t\t\t ,vc.y * ct + vc.x * st);\n\n\tvec3 rd = normalize(vec3(.5, vc.x, vc.y));\n\tvec3 c = 2. * vec3(fbm(rd, fft, wav)) * fft.xyz;\n\tc += hash(hash(uv.xyy) * uv.xyx * iTime) * .2;;\n\tc *= .9 * smoothstep(length(uv * .5 - .25), .7, .4);\n\t\n\tfragColor = vec4(c, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 34,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}