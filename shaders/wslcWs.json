{
    "Shader": {
        "info": {
            "date": "1585888969",
            "description": "Bats are evil",
            "flags": 0,
            "hasliked": 0,
            "id": "wslcWs",
            "likes": 4,
            "name": "Attack of the Bats",
            "published": 3,
            "tags": [
                "raymarching",
                "pillars",
                "bats"
            ],
            "usePreview": 0,
            "username": "Roninkoi",
            "viewed": 327
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n#define MAXIT 128\n#define EPSILON 0.001\n\n#define minx(a, b) ((a.w) < (b.w) ? (a) : (b))\n#define maxx(a, b) ((a.w) > (b.w) ? (a) : (b))\n\nfloat t;\n\nfloat sphere(vec3 r, float a)\n{\n\treturn length(r) - a;\n}\n\nfloat bat(vec3 r, float a)\n{\n\tr *= mat3(\n\t\tcos((r.x * sin(t * 20.) * 0.5) * 1.), -sin((r.x * sin(t * 20.) * 0.5) * 1.), 0., \n\t\tsin((r.x * sin(t * 20.) * 0.5) * 1.), cos((r.x * sin(t * 20.) * 0.5) * 1.), 0.,\n\t\t0., 0., 1.\n\t);\n\tfloat d = (abs(r.x*r.y)*3. + 1./a) * (abs(sqrt(r.y+0.1) * r.y) + sin(r.y) + 1./a) * (abs(r.z) + 1./a);\n\treturn length(r) - 1./ d;\n}\n\nfloat plane(vec3 r, vec3 o, vec3 n) {\n\treturn dot(r - o, n);\n}\n\nfloat box(vec3 r, vec3 a)\n{\n\tr.x += sin(r.y * PI) * 0.1;\n\tvec3 p = abs(r) - a * (sin(length(abs(abs(r)*4. - 2.) * 8.)) + 2.);\n\treturn length(max(p, 0.)) + min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat shade(vec3 n, vec3 rd)\n{\n\treturn clamp(max(dot(n, -rd), 0.) + 1., 0., 1.);\n}\n\nvec3 fog(float z, vec3 col, vec3 fogCol)\n{\n\treturn mix(fogCol, col, exp(-z));\n}\n\nmat3 obj;\n\nvec4 map(vec3 r)\n{\n\tobj = mat3(\n\t\tcos(sin(-t + r.z * 0.2) * 0.31), -sin(sin(-t+r.z * 0.2) * 0.51), 0., \n\t\tsin(sin(-t + r.z * 0.2) * 0.41), cos(sin(-t+r.z * 0.2) * 0.51), 0.,\n\t\t0., 0., 1.\n\t);\n\t\n\tfloat z = r.z;\n\t\n\tvec4 s0 = vec4(\n\t\tvec3(0.0, 0.8, 0.) * 0.8,\n\t\tbat(mat3(3.) * (obj * mod(r + 1. - vec3(cos(t*2. * 0.785 + z) * 0.5+ 0.5, sin(t*2. * 0.785 + z) * 0.25, t) + 0.45, 4.) - 1.), 1.3)\n\t);\n\tvec4 b1 = vec4(\n\t\tvec3(0.3, 0.1, 2.3) * 0.12,\n\t\tbox((mod(r + 3.0, 4.) - 1.0), vec3(0.1, 4., 0.1))\n\t);\n\t\n\treturn minx(s0, b1);\n}\n\nfloat hash(vec2 r) {\n\treturn fract(sin(dot(r, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tt = iTime;\n\t\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv -= 0.5;\n\tuv.x *= iResolution.x / iResolution.y;\n\t\n\tmat3 cam = mat3(\n\t\tcos(sin(t) * 0.1), -sin(sin(t) * 0.1), 0., \n\t\tsin(sin(t) * 0.1), cos(sin(t) * 0.1), 0.,\n\t\t0., 0., 1.\n\t) * mat3(\n\t\t1., 0., 0.,\n\t\t0., cos(0.15), -sin(0.15), \n\t\t0., sin(0.15), cos(0.15)\n\t);\n\t\t\n\tvec3 ro = vec3(0., - 0.5, - 1.0 + t);\n\tvec3 rd = cam * normalize(vec3(uv, -1.));\n\tvec3 r = ro;\n\t\n\tvec4 col = vec4(1.);\n\tvec3 bcol = vec3(1., 0.0, 0.2) + 0.0;\n\t\n\tvec4 c = vec4(bcol, 1.);\n\t\n\tfloat sh = 1.;\n\t\n\tfloat rs = 0.;\n\t\n\tfor (int i = 0; i < MAXIT; ++i) {\n\t\tvec4 d = map(r);\n\t\tfloat z = length(r - ro);\n\t\t\n\t\tvec4 nc = minx(c, d);\n\t\tc.rgb = mix(nc.rgb, c.rgb, nc.w / c.w);\n\t\tc.w = nc.w;\n\t\t\n\t\tif (d.w < EPSILON) {\n\t\t\tcol.rgb = d.rgb * shade(normalize(r), rd);\n\t\t\tcol.rgb = d.rgb;\n\t\t\tcol.rgb = fog(z * 0.1, col.rgb, bcol);\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\td.w *= 0.7 - 0.1 * hash(uv);\n\t\tr += rd * clamp(d.w, -0.5, 0.5) * 0.7;\n\t\t\n\t\tsh += (float(i) / float(MAXIT));\n\t}\n\t\n\tcol.rgb *= exp(-sh * sh * 0.02);\n\t\n\tif (c.w > EPSILON) {\n\t\tcol.rgb = fog(c.w, c.rgb, bcol * 0.1) * 0.2;\n\t}\n\t\n\tfragColor = vec4(col.rgb, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}