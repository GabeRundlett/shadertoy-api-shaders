{
    "Shader": {
        "info": {
            "date": "1576116501",
            "description": "Just doodling around and experimenting with some overlapping uv grid patterns and alpha blending.\n\nupdate v 1.1 - improved the color contrast a bit and improved blending with the background color.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wtc3D8",
            "likes": 28,
            "name": "Abstract Squircles",
            "published": 3,
            "tags": [
                "2d",
                "circle",
                "abstract",
                "square",
                "pattern"
            ],
            "usePreview": 0,
            "username": "piyushslayer",
            "viewed": 995
        },
        "renderpass": [
            {
                "code": "#define UI0 1597334673U\n#define UI1 3812015801U\n#define UI2 uvec2(UI0, UI1)\n#define UI3 uvec3(UI0, UI1, 2798796415U)\n#define UIF (1.0 / float(0xffffffffU))\n\n#define SCALE 12.\n#define PURPLE (vec3(92., 25., 226.)/255.)\n\nconst vec3[3] colors = vec3[](\n\t\t\t\t\t\tvec3(92., 197., 187.)/255., // cyan\n    \t\t\t\t\tvec3(240., 221., 55.)/255., // yellow\n    \t\t\t\t\tvec3(253., 87., 59.)/255.); // red\n    \n// Hash by Dave_Hoskins\nfloat hash12(vec2 p)\n{\n\tuvec2 q = uvec2(ivec2(p)) * UI2;\n\tuint n = (q.x ^ q.y) * UI0;\n\treturn float(n) * UIF;\n}\n\n// Distance function by iq\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.y;\n    // first set of grid uv\n    vec2 auv = uv * SCALE;\n    vec2 _auv = fract(auv);\n    // second set of grid uv offset by first grid uv center\n    vec2 buv = uv * SCALE - .5;\n    vec2 _buv = fract(buv);\n    // time factor\n    float t = iTime;\n\n    vec3 col = vec3(0.);\n    \n    // random color index for each cell in the grid\n    float ah = hash12(floor(auv + 647.));\n    // rounded box for first grid uv\n    float abox = smoothstep(.1, .05, sdBox(_auv - .5, vec2(.305)) - .12)\n\t\t* (.75 + .25 * sin(t + 588. * ah)) * 1.1 + .1;\n    // box color oscillating between light and dark\n    vec3 aboxCol = colors[int(3. * hash12(floor(auv) + 378. + t * .4))];\n    // random number for each second grid cell\n    float bh = hash12(floor(buv + 879.));\n    // rounded box for the second offset grid\n    float bbox = smoothstep(.1, .05, sdBox(_buv - .5, vec2(.305)) - .12)\n        * (.75 + .25 * sin(t + 261. * bh)) * 1.1 + .1;\n    // oscillate the color, but give it a darker shade than the first grid,\n    // which in turn offsets the color in the first grid\n    vec3 bboxCol = colors[int(3. * hash12(floor(buv) + 117. - t * .8))];\n    \n    // mix grid box colors based on their respective alpha\n    col = mix(col, vec3(abox) * aboxCol, abox);\n    col = mix(col, vec3(bbox) * bboxCol, .5 * bbox);\n    col = mix(col * 1.25, PURPLE, 1. - (abox + bbox) * .5); // purple bg\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}