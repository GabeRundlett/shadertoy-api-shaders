{
    "Shader": {
        "info": {
            "date": "1597245863",
            "description": "Source Link : https://www.youtube.com/watch?v=eKtsY7hYTPg\n\nMy Onet Game : https://play.google.com/store/apps/details?id=com.BigBUFF.OnetIconConnect",
            "flags": 0,
            "hasliked": 0,
            "id": "tllfR2",
            "likes": 0,
            "name": "10. Driving Home - Basic Setup",
            "published": 3,
            "tags": [
                "drivinghome"
            ],
            "usePreview": 0,
            "username": "altera0",
            "viewed": 288
        },
        "renderpass": [
            {
                "code": "#define S( a , b , t ) smoothstep( a , b , t )\n\nstruct Ray {\n\tvec3 ro;\t\t// Ray Origin\n    vec3 rd;\t\t// Ray Directionhttps://www.shadertoy.com/new\n};\n    \n// RAY\nRay GetRay( vec2 uv , vec3 camPos , float camZoom , vec3 lookAt ) {\n \n    Ray ray;\n    \n    ray.ro = camPos;\n    \n    vec3 F = normalize( lookAt - camPos );\n    vec3 R = normalize( cross( vec3( 0 , 1 , 0 ) , F ) );\n    vec3 U = cross( F , R );\n    \n    vec3 center  = camPos + F * camZoom;\n    vec3 intersectionPoint = center + uv.x * R  + uv.y * U;\n    \n    // rd have to do normalized.\n    // because where GetClosestPoint() , dot ( target - ro , rd ) * rd.\n    ray.rd = normalize( intersectionPoint - camPos );\n    \n    return ray;\n}\n\n\n\n\n// \nvec3 GetClosestPoint( Ray ray , vec3 targetPos ) {\n   return ray.ro + max( 0.0f , dot( targetPos - ray.ro , ray.rd ) ) * ray.rd;\n}\n\n\n\n// \nfloat GetDistance( Ray ray , vec3 targetPos ) {\n\tfloat d = length( targetPos - GetClosestPoint( ray , targetPos ) );\n    return d;\n}\n\n\n// BOKE\nfloat Boke( float d , float lightDiameter , float blur ) {\n\tfloat c = S( lightDiameter , lightDiameter * ( 1.0f - blur ) , d );\n\tc *= mix( 0.5f , 1.0f , S( lightDiameter * 0.8f , lightDiameter , d ) );\n    return c;\n}\n\n// MAIN\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord - 0.5f * iResolution.xy) / max( iResolution.x, iResolution.y);\n    \n\n\tvec3 camPos = vec3( 0 , 0.1f , 0 );\n    vec3 lookAt = vec3( 0 , 0.1f , 1.0f );\n    float camZoom = 1.0f;\n    vec3 targetPos = vec3( 0 , 0 , 5.0f );\n    \n    float lightDiameter = 0.2f;\n        \n    float bokeBlur = 0.1f;\n    float bokeRate = 0.1f;\n    \n    \n    Ray ray = GetRay( uv , camPos , camZoom , lookAt );\n    float d = GetDistance( ray , targetPos );\n\n    \n    float c = Boke( d , lightDiameter , bokeBlur );\n    \n    vec3 col = vec3( 0.7f , 1.3f, 0.3f ) * c;\n\n    // Output to screen\n    fragColor = vec4( col ,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}