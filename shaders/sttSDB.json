{
    "Shader": {
        "info": {
            "date": "1639735468",
            "description": "Shader that applies bloom effect. Colors are encoded using tanh() function and decoded with atanh() function. Values that's larger than 1 will gives bloom effect",
            "flags": 32,
            "hasliked": 0,
            "id": "sttSDB",
            "likes": 7,
            "name": "nahkd's Bloom Effect",
            "published": 3,
            "tags": [
                "postprocessing",
                "bloom"
            ],
            "usePreview": 0,
            "username": "nahkd123",
            "viewed": 366
        },
        "renderpass": [
            {
                "code": "// Post processing\n// Set the speed to something lower to increase quality\n#define SPEED 6\n\nvec4 emitAt(vec2 uv) {\n    vec4 channelColor = clamp(atanh(texture(iChannel0, uv)), 0.0, 3.0);\n    vec4 baseColor = clamp(channelColor, 0.0, 1.0);\n    return channelColor - baseColor * 0.87;\n}\n\nvec4 blurH(vec2 fragCoord, int radiusPx) {\n    float mul = 1. / float(radiusPx);\n    vec4 result = emitAt(fragCoord/iResolution.xy) * mul;\n    for (int i = 1; i < radiusPx; i += SPEED) {\n        result += emitAt((fragCoord + vec2(i, 0))/iResolution.xy) * mul * float(SPEED) * 0.5;\n        result += emitAt((fragCoord + vec2(-i, 0))/iResolution.xy) * mul * float(SPEED) * 0.5;\n    }\n    return result;\n}\nvec4 blurAll(vec2 fragCoord, int radiusPx) {\n    float mul = 1. / float(radiusPx);\n    vec4 result = blurH(fragCoord, radiusPx) * mul;\n    for (int i = 1; i < radiusPx; i += SPEED) {\n        result += blurH(fragCoord + vec2(0, i), radiusPx) * mul * float(SPEED) * 0.5;\n        result += blurH(fragCoord + vec2(0, -i), radiusPx) * mul * float(SPEED) * 0.5;\n    }\n    return result;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 channelColor = clamp(atanh(texture(iChannel0, uv)), 0.0, 2.0);\n    vec4 baseColor = clamp(channelColor, 0.0, 1.0);\n    \n    fragColor = baseColor + blurAll(fragCoord, 50);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 pixelAt(vec2 uv) {\n    vec4 color = texture(iChannel0, uv);\n    \n    // Sliding window\n    float p = (cos(iTime) + 1.0) / 2.0;\n    if (p >= uv.x - 0.02 && p <= uv.x + 0.02) return vec4(0);\n    else if (p <= uv.x) return color;\n\n    if (uv.y > 0.97) return vec4(1, 0, 0, 1);\n    if (color.r > 0.8 || color.g > 0.8 || color.b > 0.8) return color * 20.0;\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = tanh(pixelAt(uv));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}