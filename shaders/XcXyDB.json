{
    "Shader": {
        "info": {
            "date": "1721485796",
            "description": "using lomateron's gaussian fluid - but doing two things differently - gaussian integrals and always compute force and translation in two separate passes. ",
            "flags": 32,
            "hasliked": 0,
            "id": "XcXyDB",
            "likes": 26,
            "name": "Ithaca Falls",
            "published": 3,
            "tags": [
                "fluid"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 255
        },
        "renderpass": [
            {
                "code": "Main {\n    U.x -= .5*R.x;\n    U.x *= .8+.2*U.y/R.y;\n    U.x += .5*R.x;\n    \n    U -= .5*R;\n    U *= 1.-.15*exp(-6.*dot(U,U)/R.x/R.x);\n    U += .5*R;\n\n    Q = .7*vec4(.7,.8,1,1)*A(U).wwww;\n    \n    \n    vec4 n = B(U+vec2(0,1));\n    vec4 e = B(U+vec2(1,0));\n    vec4 s = B(U-vec2(0,1));\n    vec4 w = B(U-vec2(1,0));\n    vec3 no = normalize(vec3(e.y-w.y,n.y-s.y,.3));\n    Q = (.2+.5*no.x)*B(U)+ Q;\n    Q += .4*pow(C(U),vec4(.1));\n    for (float i = 0.; i < 12.; i+=1.) {\n        {\n        vec4 c = C(U+i*vec2(1,2));\n        Q += vec4(1.3,.8,.5,1)*c*exp(-.1*i);\n        }{\n        vec4 c = C(U+i*vec2(2,0));\n        Q += vec4(1.3,.8,.5,1)*c*exp(-.1*i);\n        }{\n        vec4 c = C(U-i*vec2(2,1));\n        Q += vec4(1,.8,.5,1)*c*exp(-.1*i);\n        }{\n        vec4 c = C(U-i*vec2(1,-2));\n        Q += vec4(1.3,.8,.5,1)*c*exp(-.1*i);\n        }\n    \n    }\n    \n    Q *= 1.-exp(-.01*U.x)-exp(-.01*(R.x-U.x))-exp(-.03*(R.y-U.y));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define A(U) texture(iChannel0,(U)/R)\n#define B(U) texture(iChannel1,(U)/R)\n#define C(U) texture(iChannel2,(U)/R)\n#define Main void mainImage(out vec4 Q, in vec2 U)\n\n\n// oneshade:\n//https://www.shadertoy.com/view/7sKSRh\nfloat erf(in float x) {\n    x *= 1.;\n    //return sign(x) * sqrt(1.0 - exp(-1.239192 * x * x));\n    return sign(x) * sqrt(1.0 - exp2(-1.787776 * x * x)); // likely faster version by @spalmer\n}\nfloat erfstep (float a, float b, float x) {\n    return .5*(erf(b-x)-erf(a-x));\n}\n// Dave_Hoskins https://www.shadertoy.com/view/4djSRW\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "Main\n{\n    vec4 dQ = Q = vec4(0);\n    for (float x = -4.; x<=4.;x++)\n    for (float y = -4.; y<=4.;y++)\n    {\n        vec2 u = vec2(x,y);\n        vec4 a = A(U+u);\n        vec2 v = u+a.xy;\n        float w = erfstep(-.5,.5,v.x)*\n                  erfstep(-.5,.5,v.y);\n        dQ.xyz += w*a.w*a.xyz;\n        dQ.w   += w*a.w;\n    }\n    if (dQ.w>0.)\n    {\n        dQ.xyz/=dQ.w;\n        Q = dQ;\n    }\n    \n    if (iFrame < 1) {Q = vec4(0,0,0,0);}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "Main {\n        \n    Q = A(U);\n    vec4 dQ = vec4(0);\n    for (float x = -1.; x<=1.;x++)\n    for (float y = -1.; y<=1.;y++)\n    if(x!=0.||y!=0.)\n    {\n        vec2 u = vec2(x,y);\n        vec4 a = A(U+u);\n        vec4 b = B(U+u);\n        float f = a.w*(a.w-.6+b.y*b.y);\n        dQ.xy -= f*u/dot(u,u);\n    }\n    Q += dQ;\n    Q.y -= 7./R.y;\n    Q.xy *= 1.-.015*B(U).z;\n    if(R.y - U.y < 10.) Q += .01*vec4(0,0,0,1);\n    \n    if (U.x<1.||U.y<1.||R.y-U.y<1.||R.x-U.x<1.) Q.w*=0.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "Main {\n\n    vec4 n = A(U+vec2(0,1));\n    vec4 e = A(U+vec2(1,0));\n    vec4 s = A(U-vec2(0,1));\n    vec4 w = A(U-vec2(1,0));\n    vec3 no = normalize(vec3(e.w-w.w,n.w-s.w,1));\n    Q = texture(iChannel1,vec3(1,-1,1)*reflect(vec3(0,0,-1),no));\n    Q *= .2*Q*Q*Q*Q*Q*Q*Q;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}