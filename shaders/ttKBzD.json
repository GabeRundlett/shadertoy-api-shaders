{
    "Shader": {
        "info": {
            "date": "1614019063",
            "description": "FLASHING potate",
            "flags": 96,
            "hasliked": 0,
            "id": "ttKBzD",
            "likes": 18,
            "name": "Day 431",
            "published": 3,
            "tags": [
                "blur",
                "reactiondiffusion",
                "dnb",
                "mdtmjvm",
                "sharpenfeedback"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 557
        },
        "renderpass": [
            {
                "code": "// blur and sharpen from https://www.shadertoy.com/view/MtdXW4\n\n// LOOKS BETTER ON 144 HZ\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    C = C*0.;\n    \n    vec2 uv = (U - 0.5*R)/R.y;   \n    \n    //C += T1(U);\n    C = T1(U);\n    \n    \n    float md = kTimeCoeff;\n    float fac = fract(iTime*md*0.25);\n    \n    fac = pow(fac,10.5)*smoothstep(1.,0.96,fac);\n    C = mix(C.xxxx, C.yyyy,fac);\n    \n    //C = mix(C,T1(U).zxzy,dot(uv,uv)*0.1);\n\n    \n    float n1d = texelFetch(iChannel2,ivec2(mod(U + vec2(float(iFrame),0.),256.)),0).x;\n    vec3 n  = texelFetch(iChannel2,ivec2(mod(U  + n1d*200. ,256.)),0).xyz;\n    \n    C.xyz = pow(max(C.xyz,0.), vec3(1.,1.,1.) + dot(uv,uv)*0.6);\n    \n    \n    \n    \n    C.xyz += smoothstep(1.,0.,length(C))*n*0.1;\n    \n    C.xyz -= smoothstep(0.,1.,length(C))*n*0.05;\n    \n    if(mod(iTime*kTimeCoeff,10.) < 1.){\n        C = 1. - C;\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    \n    U -= 0.5*R;\n    U *= 1. - fract(iTime*kTimeCoeff)*0.002;\n    U *= rot(0.1*pow(fract(iTime*kTimeCoeff*0.125/2.),17.1)*0.1);\n    \n    U += 0.5*R;\n    vec2 grad = getGradient( iChannel0, U, 3., 0, R);\n    vec2 grady = getGradient( iChannel0, U, 3., 1, R);\n    vec2 gradz = getGradient( iChannel0, U, 3., 2, R);\n    //vec2 gradw = getGradient( iChannel0, U, 3., 3, R);\n    \n    //grad *= rot(.2);\n    \n    U -= grad*.2*sin(iTime);\n    \n    float id = floor(iTime*kTimeCoeff/10.); \n    float md = mod(iTime*kTimeCoeff, 10.);\n    if(md < 1.){\n        if (id == 0.){\n            U -= grady*14.5;\n        \n        } else {\n            U -= gradz*14.5;\n    \n        }\n    }\n    \n    C = blur(iChannel0, U, R);\n\n    \n    if(iFrame%2100 == 0){\n    \n        C = 1. - C;\n    }\n    \n    \n    if(iFrame == 0){\n        C = T3(U*0.2);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    C = sharpen(iChannel0, U, R);\n    \n    vec2 uv = (U - 0.5*R)/R.y;   \n    \n    vec2 muv = (iMouse.xy - 0.5*R)/R.y;   \n    if(iMouse.z > 0.)\n        C = mix(C,pow(T2(U)*1.,vec4(5.)),smoothstep(0.01,0.,length(uv - muv) - .1));\n    \n    \n    vec4 r = texture(iChannel2,(vec2(iFrame%256,floor(float(iFrame)/256.)) + 0.5 )/256.).xyzw;\n    \n    if(iFrame % 40 < 2){\n        C = mix(C,vec4(0),\n                smoothstep(0.01,0.,sdSegment( uv, vec2(r.x,r.y)*2. - 1., vec2(r.z,r.w)*2. - 1. ) - 0.0\n            ));\n\n    }\n   \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "musicstream",
                        "id": 25473,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/sofasoundbristol/ssdigi010-dlr-ill-truth-cyclotron"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R (iResolution.xy)\n#define T(u) texture(iChannel0,(u)/R)\n#define T1(u) texture(iChannel1,(u)/R)\n#define T2(u) texture(iChannel2,(u)/R)\n#define T3(u) texture(iChannel3,(u)/R)\n\n#define TT(u,T) texture(T,(u)/res)\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n\n#define kTimeCoeff 60./167.85*4.\n\nvec2 getGradient(sampler2D tex, vec2 u, float offset, int channel, vec2 res){\n    return vec2(\n         TT(u + vec2(1,0)*offset,tex)[channel] - TT(u - vec2(1,0)*offset,tex)[channel],\n         TT(u + vec2(0,1)*offset,tex)[channel] - TT(u - vec2(0,1)*offset,tex)[channel]  \n    );\n}\n//#define Neighbordhood() vec4 me = T() \n\n\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec4 sharpen(sampler2D channel,vec2 fragCoord, vec2 resolution){\n    float kernel [9];vec2 offset [9];\n    \n    vec2 step = vec2(1);\n    \n    offset[0] = vec2(-step.x, -step.y);\n    offset[1] = vec2(0.0, -step.y);\n    offset[2] = vec2(step.x, -step.y);\n    \n    offset[3] = vec2(-step.x, 0.0);\n    offset[4] = vec2(0.0, 0.0);\n    offset[5] = vec2(step.x, 0.0);\n    \n    offset[6] = vec2(-step.x, step.y);\n    offset[7] = vec2(0.0, step.y);\n    offset[8] = vec2(step.x, step.y);\n    \n    \n    kernel[0] = 0.0; kernel[1] = -0.25; kernel[2] = 0.0;\n    kernel[3] = -0.25; kernel[4] = 1.0; kernel[5] = -0.25;\n    kernel[6] = 0.0; kernel[7] = -0.25; kernel[8] = 0.0;\n    \n    vec4 sum = texture(channel, (fragCoord)/resolution);\n    \n    for (int i = 0; i < 9; i++) {\n        vec4 color = texture(channel, (fragCoord + offset[i])/resolution);\n        sum += color * kernel[i];\n    }\n    \n    sum = clamp(sum,0.,1.);\n    \n    return sum;\n}\n\nvec4 blur(sampler2D channel,vec2 fragCoord, vec2 resolution){\n    \n    float kernel [9];vec2 offset [9];\n\n     vec2 step = vec2(0.5);\n    \n    offset[0] = vec2(-step.x, -step.y);\n    offset[1] = vec2(0.0, -step.y);\n    offset[2] = vec2(step.x, -step.y);\n    \n    offset[3] = vec2(-step.x, 0.0);\n    offset[4] = vec2(0.0, 0.0);\n    offset[5] = vec2(step.x, 0.0);\n    \n    offset[6] = vec2(-step.x, step.y);\n    offset[7] = vec2(0.0, step.y);\n    offset[8] = vec2(step.x, step.y);\n    \n    kernel[0] = 1.0; kernel[1] = 1.0; kernel[2] = 1.0;\n    kernel[3] = 1.0; kernel[4] = 1.0; kernel[5] = 1.0;\n    kernel[6] = 1.0; kernel[7] = 1.0; kernel[8] = 1.0;\n    \n    vec4 sum = vec4(0);\n    \n    for (int i = 0; i < 9; i++) {\n        vec4 color = texture(channel, (fragCoord + offset[i])/resolution);\n        sum += color * kernel[i];\n    }\n    \n    sum /= 9.;\n    sum = clamp(sum,0.,1.);\n    \n    return sum;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}