{
    "Shader": {
        "info": {
            "date": "1520630442",
            "description": "kim3",
            "flags": 0,
            "hasliked": 0,
            "id": "MstyWl",
            "likes": 0,
            "name": "Kimm3",
            "published": 3,
            "tags": [
                "kim3"
            ],
            "usePreview": 0,
            "username": "Shaderay",
            "viewed": 288
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision highp float;\n#endif\n\n        uniform vec2 u_resolution;\n        uniform vec2 u_mouse;\n        uniform float u_time;\n\n        // Some useful functions\n        vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n        vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n        vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n\n        vec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n        {\n            return a + b*cos( 6.28318*(c*t+d) );\n        }\n\n        vec3 hsb2rgb( in vec3 c ){\n          vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                                   6.0)-3.0)-1.0,\n                           0.0,\n                           1.0 );\n          rgb = rgb*rgb*(3.0-2.0*rgb);\n          return c.z * mix(vec3(1.0), rgb, c.y);\n        }\n        vec2 hash( vec2 x )  // replace this by something better\n        {\n            const vec2 k = vec2( 0.3183099, 0.3678794 );\n            x = x*k + k.yx;\n            return -1.0 + 2.0*fract( 16.00 * k*fract( x.x*x.y*(x.x+x.y)) );\n        }\n\n\n        float noise( in vec2 p )\n        {\n            vec2 i = floor( p );\n            vec2 f = fract( p );\n\n        \tvec2 u = f*f*(3.0-2.0*f);\n\n            return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                             dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                        mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                             dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n        }\n\n\n\n        #define OCTAVES 6 //adds detail\n        float turbulence (in vec2 st) {\n            // Initial values\n            float value = +0.15;\n            float amplitude = .47;\n            float frequency = 0.5;\n            //\n            // Loop of octaves\n            for (int i = 0; i < OCTAVES; i++) {\n                value += amplitude * noise(st*frequency*3.); // st* something adds detail\n                st *= 1.8; //changes shape\n                amplitude *= .46; //adds detail\n            }\n            return value;\n        }\n\n        float pattern( in vec2 st, out vec2 q, out vec2 r, out vec2 s)\n          {\n              q.x = turbulence( st + vec2(2.0,1.0) );\n              q.y = turbulence( st + vec2(2.4,1.3) );\n\n              r.x = turbulence( st + 4.0*q + vec2(1.7,9.2) );\n              r.y = turbulence( st + 4.0*q + vec2(8.3,2.8) );\n\t\t\t\t\n              s.x = turbulence( st + 4.0*q + 4.0*r + vec2(1.3,7.2) );\n              s.y = turbulence( st + 4.0*q + 4.0*r + vec2(5.3,1.8) );  \n              \n              return turbulence( st + 4.0*s);}\n\n\t\t\t\n\n        void mainImage(out vec4 fragColor, in vec2 fragCoord) {     \n            \n \n            vec2 st = fragCoord.xy/iResolution.xy;\n            st.x *= iResolution.x/iResolution.y;\n            vec3 color = vec3(0.0);\n        \tvec2 q = vec2(0.);\n          \tvec2 r = vec2(0.);\n            vec2 s = vec2(0.);\n            color += pattern(st,q,r,s);\n\n           \t\n            //float f = 0.5 + 0.5*turbulence(vec2(0.1,0.2));\n            //f = mix( f, f*f*f*3.5, f*abs(length(q)) );\n            //float g = 0.5 + 0.5*sin(4.0*length(r))*sin(4.0*length(r));\n            //f *= 1.0-0.5*pow( g, 8.0 );\n\n            //vec3 col = pal(sin(st.y), vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n          \t//color = mix(color, col, length(r));\n            //color = mix(color, vec3(0.2,0.5,0.2), length(r));\n            //color *= 2.1; //makes lighter and darker\n            \n            \n            \n            //color *= hsb2rgb(vec3(0.0, 0.419, length(q)));\n            //color = mix(color, (vec3(0.741, 0.717, 0.419)), sin(3.1));\n            //color = mix(color, (vec3(0.219, 0.278, 0.121)), length(r));\n            //color = mix(color, (vec3(0.4, 0.2, 0.)), length(q));\n            color *= 3.7; //makes lighter and darker\n\n\n            fragColor = vec4(color,1.0); }",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}