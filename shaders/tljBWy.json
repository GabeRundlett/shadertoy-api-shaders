{
    "Shader": {
        "info": {
            "date": "1600634950",
            "description": "Ray-hexgonal-prism intersector. It computes the entry point and the normal at the intersection point. Returning the exit point is trivial (return tF). Can be easily optimized for many aligned instances.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "tljBWy",
            "likes": 8,
            "name": "Hexprism - intersection",
            "published": 3,
            "tags": [
                "3d",
                "raycasting",
                "raycast",
                "intersection",
                "prism",
                "hexagonal",
                "intersector"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1098
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Ray-hexgonal-prism intersector. It computes the entry point and\n// the normal at the intersection point. Returning the exit point\n// is trivial (return tF).\n//\n// If many hexagonal parallel prisms were to be computed, many of the\n// computations could be taken our as common factors. See here:\n//\n// https://www.shadertoy.com/view/WtSfWK\n//\n// Discarding the normal computation and specializing this\n// function to be a shadow-only test also simplifies the code\n// a big deal (see same shader above).\n//\n//\n// List of ray-surface intersectors at\n//   https://www.shadertoy.com/playlist/l3dXRf\n// and\n//    https://iquilezles.org/articles/intersectors\n\n\n\nvec4 iHexPrism( in vec3  ro, in vec3  rd, \n                in float ra, in float he )\n{\n    const float ks3 = 0.866025;\n\n    // normals\n    const vec3 n1 = vec3( 1.0,0.0,0.0);\n    const vec3 n2 = vec3( 0.5,0.0,ks3);\n    const vec3 n3 = vec3(-0.5,0.0,ks3);\n    const vec3 n4 = vec3( 0.0,1.0,0.0);\n\n    // slabs intersections\n    vec3 t1 = vec3((vec2(ra,-ra)-dot(ro,n1))/dot(rd,n1), 1.0);\n    vec3 t2 = vec3((vec2(ra,-ra)-dot(ro,n2))/dot(rd,n2), 1.0);\n    vec3 t3 = vec3((vec2(ra,-ra)-dot(ro,n3))/dot(rd,n3), 1.0);\n    vec3 t4 = vec3((vec2(he,-he)-dot(ro,n4))/dot(rd,n4), 1.0);\n    \n    // intersection selection\n    if( t1.y<t1.x ) t1=vec3(t1.yx,-1.0);\n    if( t2.y<t2.x ) t2=vec3(t2.yx,-1.0);\n    if( t3.y<t3.x ) t3=vec3(t3.yx,-1.0);\n    if( t4.y<t4.x ) t4=vec3(t4.yx,-1.0);\n   \n    vec4            tN=vec4(t1.x,t1.z*n1);\n    if( t2.x>tN.x ) tN=vec4(t2.x,t2.z*n2);\n    if( t3.x>tN.x ) tN=vec4(t3.x,t3.z*n3);\n    if( t4.x>tN.x ) tN=vec4(t4.x,t4.z*n4);\n    \n    float tF = min(min(t1.y,t2.y),min(t3.y,t4.y));\n    \n    // no intersection\n    if( tN.x > tF || tF < 0.0) return vec4(-1.0);\n\n    return tN;  // return tF too for exit point\n}\n\n#define AA 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = 0.5*iTime;\n\tvec3 ro = vec3( 1.7*cos(an), 1.0, 1.7*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    // render\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // raytrace\n        vec4 tnor = iHexPrism( ro, rd, 0.6, 0.7 );\n        float t = tnor.x;\n    \n        // shading/lighting\t\n        vec3 col = vec3(0.08)*(1.0-0.3*length(p)) + 0.02*rd.y;\n        if( t>0.0 )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = tnor.yzw;\n            float dif = clamp( dot(nor,vec3(0.8,0.6,0.4)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n            col = vec3(0.2,0.3,0.4)*amb + \n                  vec3(0.8,0.7,0.5)*dif + \n                  0.1*nor.z;\n        }\n\n        // gamma\n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n    // dither to remove banding in the background\n    tot += fract(sin(fragCoord.x*vec3(13,1,11)+fragCoord.y*vec3(1,7,5))*158.391832)/255.0;\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}