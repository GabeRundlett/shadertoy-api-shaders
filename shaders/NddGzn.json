{
    "Shader": {
        "info": {
            "date": "1629026481",
            "description": "WIP\nmouse control\n",
            "flags": 0,
            "hasliked": 0,
            "id": "NddGzn",
            "likes": 26,
            "name": "3D close-loop spiral",
            "published": 3,
            "tags": [
                "spiral",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 377
        },
        "renderpass": [
            {
                "code": "\n#define rot(a)    mat2( cos(a+vec4(0,11,33,0)) )             // rotation                  \nvec3 M;\n\n#define TAU 6.283185\n\nvoid mainImage(out vec4 O, vec2 U) {    \n    float t=9.,l,a,A,s,z=0.,S,H,h,l2,r=25.,r2=20.33; //, Z=0.;\n    vec2  P,d;\n    vec3  R = iResolution,\n          D = normalize(vec3( U+U, -3.5*R.y ) - R ),         // ray direction\n          p = 90./R, q;                                      // marching point along ray \n       // M =  iMouse.xyz/R -.5;\n          M = iMouse.z > 0. ? iMouse.xyz/R -.5: vec3(8,4,0)/1e2*cos(iTime+vec3(0,11,0));\n     \n    for ( O=vec4(0) ; O.x < 1.5 && t > .01 ; O+=.01 )\n        t=9., q = p,\n        q.yz *= rot( .5+6.*M.y),                             // rotations\n        q.xz *= rot( 2.-6.*M.x),\n        q.zy *= H = sign(h=q.y),           q.y -= r/2.,      // top-down symmetry\n        q.xz *= S = sign(q.x +sign(q.z)) , q.x -= TAU*3.5,   // left-right symmetry\n        l = length(q.xz), a = atan(q.z,q.x),\n        s = min( TAU*3.5, l - a),                            // spiral coord ( truncated )\n        l = round(s/TAU)*TAU + a,                            // l reset at tube center\n        l = max(0.,r-l),\n        q.y += r2 - sqrt(max(0.,r2*r2-l*l)),                 // spiral sinking\n        t = min(t, length(vec2( mod(s+TAU/2.,TAU)-TAU/2.,q.y)) - 1.), // SDF\n        p += .25*t*D; // , Z+=t;                             // step forward = dist to obj          \n\n // O = vec4(1.6-Z/200.); return;                    // for Depth buffer\n    a = max (0., round(s/TAU)*TAU + a );\n    a = S*H*a*a/2.-20.*iTime -H;                             // curvilinear coordinate\n  //O = max(1.5-3.*O,0.);\n    O = O.x > 1.5 ? vec4(0.) : 4.*exp(-3.*O/2.);             // luminance (depth + pseudo-shading )\n                           // vec4(exp(-(Z-300.)/200.));\n    O *= (.6+.4*sin(a)) *vec4(.5+.5*h/r2,.5-.5*h/r2,0,0);    // color\n      // (.6+.4*clamp(sin(a)/fwidth(a),-1.,1.))\n // O *= .5+.5* vec4(cos(a),sin(a),min(2.,4.*h/r),1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}