{
    "Shader": {
        "info": {
            "date": "1692380714",
            "description": "..",
            "flags": 0,
            "hasliked": 0,
            "id": "ml2yWc",
            "likes": 0,
            "name": "HSV Blend",
            "published": 3,
            "tags": [
                "hsv"
            ],
            "usePreview": 0,
            "username": "VEShaderStuff",
            "viewed": 112
        },
        "renderpass": [
            {
                "code": "// RGB Variables\n\nconst float r = 255.5;\nconst float g = 127.0;\nconst float b = 0.0;\n\n// Required RGB stuff\n\nfloat hueToRgb(float p, float q, float t)\n{\n    if (t < 0.0) t += 1.0;\n    if (t > 1.0) t -= 1.0;\n    if (t < 1.0 / 6.0) return p + (q - p) * 6.0 * t;\n    if (t < 1.0 / 2.0) return q;\n    if (t < 2.0 / 3.0) return p + (q - p) * (2.0 / 3.0 - t) * 6.0;\n    return p;\n}\nvec3 hslToRgb(vec3 hsl)\n{\n    vec3 rgb;\n    \n    if (hsl.y == 0.0)\n    {\n        rgb = vec3(hsl.z); // Grayscale\n    }\n    else\n    {\n        float q = (hsl.z < 0.5) ? (hsl.z * (1.0 + hsl.y)) : (hsl.z + hsl.y - hsl.y * hsl.z);\n        float p = 2.0 * hsl.z - q;\n        \n        rgb.r = hueToRgb(p, q, hsl.x + 1.0 / 3.0);\n        rgb.g = hueToRgb(p, q, hsl.x);\n        rgb.b = hueToRgb(p, q, hsl.x - 1.0 / 3.0);\n    }\n    \n    return rgb;\n}\nvec3 rgbToHsl(vec3 color)\n{\n    vec3 hsl;\n    float maxVal = max(max(color.r, color.g), color.b);\n    float minVal = min(min(color.r, color.g), color.b);\n    \n    hsl.z = (maxVal + minVal) / 2.0;\n    \n    if (maxVal == minVal)\n    {\n        hsl.x = 0.0;\n        hsl.y = 0.0;\n    }\n    else\n    {\n        float d = maxVal - minVal;\n        \n        hsl.y = (hsl.z < 0.5) ? (d / (maxVal + minVal)) : (d / (2.0 - maxVal - minVal));\n        \n        if (maxVal == color.r)\n            hsl.x = (color.g - color.b) / d + (color.g < color.b ? 6.0 : 0.0);\n        else if (maxVal == color.g)\n            hsl.x = (color.b - color.r) / d + 2.0;\n        else\n            hsl.x = (color.r - color.g) / d + 4.0;\n        \n        hsl.x /= 6.0;\n    }\n    \n    return hsl;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Define the resolution of the screen\n    vec2 resolution = iResolution.xy;\n    \n    // Normalize the coordinates\n    vec2 uv = fragCoord.xy / resolution;\n    \n    // Sample the texture\n    vec4 texColor = texture(iChannel0, uv);\n    \n    // Define hue shifts for red, green, and blue channels\n    float redHueShift = r / 255.0;   // Hue shift for red channel\n    float greenHueShift = g / 255.0; // Hue shift for green channel\n    float blueHueShift = b / 255.0;  // Hue shift for blue channel\n    \n    // Convert the RGB color to HSL\n    vec3 hsl = rgbToHsl(texColor.rgb);\n    \n    // Apply hue shifts to the red, green, and blue channels\n    hsl.x = fract(hsl.x + redHueShift);   // Apply hue shift to red channel\n    hsl.y = fract(hsl.y + greenHueShift); // Apply hue shift to green channel\n    hsl.z = fract(hsl.z + blueHueShift);  // Apply hue shift to blue channel\n    \n    // Convert the modified HSL color back to RGB\n    vec3 modifiedColor = hslToRgb(hsl);\n    \n    // Output the modified color\n    fragColor = vec4(modifiedColor, texColor.a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}