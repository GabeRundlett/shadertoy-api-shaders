{
    "Shader": {
        "info": {
            "date": "1658000930",
            "description": "metaball",
            "flags": 0,
            "hasliked": 0,
            "id": "fsVBWz",
            "likes": 4,
            "name": "strange metaball",
            "published": 3,
            "tags": [
                "metaball"
            ],
            "usePreview": 0,
            "username": "jorgemoag",
            "viewed": 110
        },
        "renderpass": [
            {
                "code": "const float EPS = 1e-3;\n\nfloat hash(float h) {\n\treturn fract(sin(h) * 43758.5453123);\n}\n\nfloat noise(vec3 pos) {\n\tvec3 id = floor(pos);\n\tvec3 f = fract(pos);\n\tf = f*f*(3.-2.*f);\n\n\tfloat n = id.x + id.y * 157.0 + 113.0 * id.z;\n\treturn mix(\n\t\t\tmix(mix(hash(n + 0.0), hash(n + 1.0), f.x),\n\t\t\t\t\tmix(hash(n + 157.0), hash(n + 158.0), f.x), f.y),\n\t\t\tmix(mix(hash(n + 113.0), hash(n + 114.0), f.x),\n\t\t\t\t\tmix(hash(n + 270.0), hash(n + 271.0), f.x), f.y), f.z);\n}\n\nfloat fbm(vec3 p) {\n\tfloat f = 0.0;\n\tf = 0.5000 * noise(p);\n\tp *= 2.01;\n\tf += 0.2500 * noise(p);\n\tp *= 2.02;\n\tf += 0.1250 * noise(p);\n\n\treturn f;\n}\n\nfloat map(vec3 p) {\n    float offs = fbm(7.*p + vec3(0.,iTime,0.));    \n    return length(p) - .6 - .125*offs;\n}\n\nvec3 calcNormal(vec3 pos) {\n    float h = map(pos);\n    vec2 eps = vec2(EPS, 0.0);\n    return normalize(vec3(\n        map(pos + eps.xyy) - h,\n        map(pos + eps.yxy) - h,\n        map(pos + eps.yyx) - h\n    ));\n}\n\nfloat castRay(vec3 ro, vec3 rd) {\n    float td = 0.;\n    for (float t = 0.; t < 1e3; ++t) {\n        vec3 pos = ro + td * rd;\n        float h = .4*map(pos);\n        if (h < EPS) {\n            return td;\n        }\n        td += h;\n    }\n    return -1.;\n}\n\nmat3 cam(vec3 co, vec3 ct) {\n    vec3 ww = normalize(ct - co);\n    vec3 uu = normalize(cross(ww, vec3(0.,1.,0.)));\n    vec3 vv = normalize(cross(uu, ww));\n    return mat3(uu, vv, ww);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n\n    vec3 col = vec3(0.);\n    \n    vec3 co = vec3(sin(.2*iTime), .5, cos(.2*iTime));\n    vec3 ct = vec3(0., 0., 0.);\n    \n    vec3 rd = normalize(cam(co, ct) * vec3(uv, 1.));\n    float t = castRay(co, rd);\n    if (t > -EPS) {\n        vec3 pos = co + t * rd;\n        \n        vec3 N = calcNormal(pos);\n        \n        \n        float a1 = fbm(7.*pos + vec3(0.,iTime,0.));\n        float a2 = fbm(10.*pos + vec3(iTime,0.,0.));\n        \n        col = mix(vec3(1.,0.,0.), vec3(0.), clamp(1.5*a1,0.,1.));\n        col += vec3(1.,1.,0.)*(1.-smoothstep(0.1, 0.4, a1));\n        col += vec3(0.,0.,1.)*mix(0.1, .5, 0.3*a2);\n        \n        vec3 bg = texture(iChannel0, reflect(rd, N)).rgb;\n        \n        col += bg * mix(0.2, 1.0, pow(1.-clamp(dot(-rd, N),0.,1.),2.0));\n        \n        vec3 L = normalize(vec3(0., -1., -1));\n        col = col * clamp((0.75 + max(0.,dot(-L, N))),0.,1.);\n        \n    } else {\n    \n        float yd = pow(max(0., dot(rd, vec3(0.,-1.,0.))), 10.0);\n        col = texture(iChannel0, rd).rgb;        \n        col = mix(col, mix(vec3(1.,0.2,0.), vec3(1., 0.8, 0.), sin(3.*iTime+.5)*sin(1.*iTime)), yd);\n        \n    }\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}