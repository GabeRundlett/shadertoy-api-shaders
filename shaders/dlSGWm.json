{
    "Shader": {
        "info": {
            "date": "1673381999",
            "description": "CC0: Warping boxes\nI tinkered with the multi-level metaballs of yesterday\nand used boxes instead of circles. This + random tinkering\nturned out quite nice in the end IMHO.\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "dlSGWm",
            "likes": 36,
            "name": "Warping boxes",
            "published": 3,
            "tags": [
                "2d",
                "warping"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 568
        },
        "renderpass": [
            {
                "code": "// CC0: Warping boxes\n//  I tinkered with the multi-level metaballs of yesterday\n//  and used boxes instead of circles. This + random tinkering\n//  turned out quite nice in the end IMHO.\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\n// License: Unknown, author: Hexler, found: Kodelife example Grid\nfloat hash(vec2 uv) {\n  return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\nfloat dot2(vec2 p) {\n  return dot(p, p);\n}\n\nvec2 df(vec2 p, float aa, out float h, out float sc) {\n  vec2 pp = p;\n  \n  float sz = 2.0;\n  \n  float r = 0.0;\n  \n  for (int i = 0; i < 5; ++i) {\n    vec2 nn = mod2(pp, vec2(sz));\n    sz /= 3.0;\n    float rr = hash(nn+123.4);\n    r += rr;\n    if (rr < 0.5) break;\n  }\n  \n  float d0 = box(pp, vec2(1.45*sz-0.75*aa))-0.05*sz;\n  float d1 = sqrt(sqrt(dot2(pp*pp)));\n  h = fract(r);\n  sc = sz;\n  return vec2(d0, d1);\n}\n\nvec2 toSmith(vec2 p)  {\n  // z = (p + 1)/(-p + 1)\n  // (x,y) = ((1+x)*(1-x)-y*y,2y)/((1-x)*(1-x) + y*y)\n  float d = (1.0 - p.x)*(1.0 - p.x) + p.y*p.y;\n  float x = (1.0 + p.x)*(1.0 - p.x) - p.y*p.y;\n  float y = 2.0*p.y;\n  return vec2(x,y)/d;\n}\n\nvec2 fromSmith(vec2 p)  {\n  // z = (p - 1)/(p + 1)\n  // (x,y) = ((x+1)*(x-1)+y*y,2y)/((x+1)*(x+1) + y*y)\n  float d = (p.x + 1.0)*(p.x + 1.0) + p.y*p.y;\n  float x = (p.x + 1.0)*(p.x - 1.0) + p.y*p.y;\n  float y = 2.0*p.y;\n  return vec2(x,y)/d;\n}\n\nvec2 transform(vec2 p) {\n  p *= 2.0;\n  const mat2 rot0 = ROT(1.0);\n  const mat2 rot1 = ROT(-2.0);\n  vec2 off0 = 4.0*cos(vec2(1.0, sqrt(0.5))*0.23*TIME);\n  vec2 off1 = 3.0*cos(vec2(1.0, sqrt(0.5))*0.13*TIME);\n  vec2 sp0 = toSmith(p);\n  vec2 sp1 = toSmith((p+off0)*rot0);\n  vec2 sp2 = toSmith((p-off1)*rot1);\n  vec2 pp = fromSmith(sp0+sp1-sp2);\n  p = pp;\n  p += 0.25*TIME;\n  \n  return p;\n}\n\nvec3 effect(vec2 p, vec2 np, vec2 pp) {\n  p = transform(p);\n  np = transform(np);\n  float aa = distance(p, np)*sqrt(2.0); \n\n  float h = 0.0;\n  float sc = 0.0;\n  vec2 d2 = df(p, aa, h, sc);\n\n  vec3 col = vec3(0.0);\n\n  vec3 rgb = ((2.0/3.0)*(cos(TAU*h+vec3(0.0, 1.0, 2.0))+vec3(1.0))-d2.y/(3.0*sc));\n  col = mix(col, rgb, smoothstep(aa, -aa, d2.x));\n  \n  const vec3 gcol1 = vec3(.5, 2.0, 3.0);\n  col += gcol1*tanh_approx(0.025*aa);\n\n  col = clamp(col, 0.0, 1.0);\n  col = sqrt(col);\n  \n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec2 np = p+1.0/RESOLUTION.y;\n  vec3 col = effect(p, np, pp);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}