{
    "Shader": {
        "info": {
            "date": "1710623726",
            "description": "Mouse to look around, different modes for development, evvvvil fractals with shane lighting and patterns",
            "flags": 32,
            "hasliked": 0,
            "id": "MXjSDW",
            "likes": 38,
            "name": "Heirloom",
            "published": 3,
            "tags": [
                "fractal",
                "truchet",
                "kifs",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "Yusef28",
            "viewed": 940
        },
        "renderpass": [
            {
                "code": "// Fork of \"GCLH Fractal Spark Mandril #2f\" by Yusef28. https://shadertoy.com/view/X3BXWD\n// 2024-03-16 21:15:07\n\n/*\n\nINTRODUNCTION:\n*****************************************************************************************************\n\nThis shader style is based on the coding styles of Shane and Evvvvil plus some ohter stuff\nas over time I add my unique twist.\n\nI came up with a template to help me iterate faster so here is a little guide on how that works.\nWhat isn't covered in this guide is how to do texture mapping because there are a lot of different\nways based on the situation. WHen I used a ring shape I did a cyclincrical UV function for example.\nAnother easy one is triplanar blending you can find in a lot of shanes shaders.\n\nThe common function has some important functions as well as all the uv functions I've played with.\nBuffer B is a multiscale truchet texture I've been using lately, bbut not used in this example.\nBuffer A is the text generator for showing coordinates. More on that soon.\n\n\n\n\n\nTEMPLATE GUIDE:\n******************************************************************************************************\nThis shader can be used as a template to create aother KIFS fractals.\n\nIt has a built in work flow baed on \"Development modes\" which should be \nset in different stages of development.\n\nTo set a development mode, just change the #define DEV_MODE to 1, 2 or 3\n\nDevelopment Modes:\n\n1. Object before fractal Mode\nThis is the mode where you create an interesting shape using the code in the \"tile\" function.\nYou create distance functions but also pair them in a vec2 with an id. The id is linked to \na color-roughness pair in the \"Object[] Materials \" object which you can also adjust to your liking.\n\n\n2. DEV_MODE 2 is the fractal fly through. So maybe these are out of order but it's nice to see what\nyou made right after the object creation stage.\n\n3. Mode 3 is the mouse adjust mode. You get to see coordinates in the top right hand corner based on\nwhere you click the mouse on the screen. This let's you set up transitions between different fractals\nin the Camera Position Object\n\n\n\nThe last imporatnt thing for getting something unique up is the\n:fractal_position: function whcih does the work of folding and rotating the space to make \nthe kaleidescopic effect. \n\nThe \"Camera Position\" object pairs feed in here and the transitions happen here,\nTo get a new base folding-rotation sequence you can go to this part of the function\n\"\n\nif(DEV_MODE > 1.){\n        \n        p.xz = mod(p.xz,40.)-20.;\n        for(int i=0;i<6;i++){\n            p.xz*=rot(mm.x*float(i));\n            p.xy*=rot(mm.y*float(i));\n            p=abs(p)-vec3(2.6,5.2,5.1);\n            //p.x -= 0.2+sin(op.z)*0.4;\n            p=abs(p)-vec3(4.8,5.,5.5);\n\n        }\n    }\n    \n\"\n\nand play with the   p=abs(p)-vec3(4.8,5.,5.5); lines (there are two of them) \n\n\n\n\n\n\n\nEND OF GUIDE\n\n\n\n\n*/\n\n\n\n\n\n\n\n\n\n\n\n/*\nDevelopment Modes\n--------------------------\n1. Object Before Fractal\n2. Fractal Fly Through     \n3. Mouse Adjust Fractal_P\n*/\n\n#define FAR 40.\n#define DEV_MODE 2.\n\n//the position of the camera for DEV_MODE = 1.\n#define DEV_POSITION vec3(0.,1.,-5.);\n\n\n/*\nThe way these work is you set DEV_MODE to 3 and the click around until you find a \nfractal you like. The coordinates are displayed in the top right hand corner so you\ncan enter them into the camera position array here for the shader to loop through.\n\nJust make sure to set NUM_POSITIONS to the actual number you have in the array.\n*/\n\n\n\n\nvec2[] Camera_Positions = vec2[](\n    vec2(0.55, 0.80),\n    vec2(0.48, 0.80),\n    vec2(0.00, 0.48),\n    vec2(0.00, 0.48),\n    vec2(0.55, 0.80),//vec2(0.36, 0.7),\n    //vec2(0.52, 0.77),\n    vec2(0.56, 0.81),\n    vec2(0.44, 0.80)\n\n);\n\n//#define NUM_POSITIONS 7.\n//more general (better) way to write this from Spalmer\n#define NUM_POSITIONS float(Camera_Positions.length())\n\n/*\nHere you can set basic material properties that will be used for coloring\nbased on the Materials object which as properties \"roughness\"and \"color\"\"\n*/\n\nstruct Object \n{ \n    float rough; \n    vec3 color; \n}; \nvec3 gold = vec3(0.9,0.55,0.);\nvec3 blue = vec3(0.,0.5,0.9);\n\nObject[] Materials = Object[](\n\n    //red\n    Object(0.1, vec3(0.9)),\n    \n    //red which gets tthe bump map\n    Object(0.1, vec3(0.9,0.,0.)),//vec3(0.,0.5,0.9)),   \n    \n    //gold \n    Object(0.99, vec3(0.99,0.55,0.)),\n    \n    //blue which gets an interesting color and texture\n    Object(0.1, vec3(0.,0.9,0.9))\n    \n);\n\n\n\nfloat glow = 0.;\n\n//Path through the fractal but if in DEV_MODE 1 just stay at DEV_POSITION\nvec3 path(float z){ \n\n    return DEV_MODE > 1. ? vec3(0., 1., iTime*6.) : DEV_POSITION; \n\n}\n\n\n\n/*\n\n\n    THE BASIC FRACTAL SHAPE\n*********************************************************************\n*/\nvec2 tile(vec3 p){\n\n    \n    if(DEV_MODE == 1.){\n        if(iMouse.z == 0.5){\n            p.zx *= rot(iTime);\n        }\n     }\n     \n     \n     \n     /*\n     This set up is based on evvvvils shaders. \n     THat means each sdf shape is paired with an ID in a vec2 which let's you \n     chose a separate color for each. I added to it by setting up a Materials Objection above\n     which aids the coloring process later.\n     \n     the second part of the puzzle here is what happends when you add  two sdfs together.\n     We have a defined function callled addH which basically prints the following line\n     into the function\n     \n     t = t.x < h.x ? t : h;\n     \n     every time addH is called we compare the current value of h.x with the current value of t.x\n     h.x is the distance field component of the evvvvil vec2 pair and t.x is the distance field componnet \n     of the accumulated distance field. if h.x is smaller than t.x we swap id's so we color based on the \n     closest (the correct) object.\n     \n     \n     The thing we have to keep constant for the addH function to be valid is we have to\n     use \"vec2 t\" as the name of our first sdf-pair for the scene and we havekeep using the name \"h\"\n     for any other sdf-ID pair we want to add into the scene.\n     */\n  \n     vec3 op = p;\n\n     \n     vec3 pp = p;;//I keep reframing pp as p to have a fresh coordinate system to work from\n      \n     //vector two for a basic rounded box wiht an id set to 2\n\n     float s = 1.;\n     vec2  t = vec2(100.,2.), h = vec2(100.,1.);\n     \n     \n     //make a red box with a gold outline\n     pp = abs(p)-1.15*s;\n     h = vec2(rb(pp,vec3(1.0)*s, 0.04*s), 2.);\n     pp = p ;\n     h.x = smax(h.x, -rb(pp,vec3(1.8,4., 1.8)*s, 0.04*s),0.04*s);\n     h.x = smax(h.x, -rb(pp,vec3(1.8,4., 1.8).yzx*s, 0.04*s),0.04*s);\n     h.x = smax(h.x, -rb(pp,vec3(1.8,4., 1.8).xzy*s, 0.04*s),0.04*s);\n     addH;\n     pp = p;\n     h = vec2(rb(pp,vec3(2.)*s, 0.04)*s, 1.);\n     addH;\n     p = abs(p)-1.5;\n\n\n     //mirror the space and make smaller blue boxes with a gold outline\n     s /= 2.4;\n     pp = abs(p)-1.15*s;\n     h = vec2(rb(pp,vec3(1.3)*s, 0.04*s),2.);\n     pp = p ;\n     h.x = smax(h.x, -rb(pp,vec3(1.8,4., 1.8)*s, 0.04*s),0.04*s);\n     h.x = smax(h.x, -rb(pp,vec3(1.8,4., 1.8).yzx*s, 0.04*s),0.04*s);\n     h.x = smax(h.x, -rb(pp,vec3(1.8,4., 1.8).xzy*s, 0.04*s),0.04*s);\n     addH;\n     pp = p;\n     h = vec2(rb(pp,vec3(2.)*s, 0.04)*s, 3.);\n     addH;\n  \n     \n     p=op;\n     pp = p;\n     float w =  .1;\n     pp.z = abs(pp.z)-2.4 ;\n     h =  vec2(sdTorus(pp.xzy,vec2(2., w)), 2.);\n     addH;\n\n     \n     return t;\n}\n\n\n/*\nMirroring and rotating the space all happends here\nas well as the animation between fractals from \"camera_position\"\n*/\n\nvec3 fractal_position(vec3 p){\n    vec3 op = p;\n    //Animate the fractal positions\n    vec2 t = vec2(iTime*0.3,iTime*0.3+1.);\n    vec2 tt = (mod(floor(t), NUM_POSITIONS));\n    vec2 mm = mix(Camera_Positions[int(tt.x)],\n                   Camera_Positions[int(tt.y)],\n                   smoothstep(0.8,1.,fract(t.x)));\n  // mm = Camera_Positions[1]; //to look at just one fractal position\n    \n    //if DEV_MODE 3 then you use the mouse to find positions\n    if(DEV_MODE == 3.){\n        mm = iMouse.xy/iResolution.xy;\n    }\n    \n    \n    //if DEV_MODE is not the object mode 1 then make the fractal\n    if(DEV_MODE > 1.){\n        \n       //p.xyz = mod(p.xyz,40.)-20.;\n       p.xz = mod(p.xz,60.)-30.;\n        for(int i=0;i<6;i++){\n            p.xz*=rot(mm.x*float(i));\n            p.xy*=rot(mm.y*float(i));\n            p=abs(p)-vec3(2.6,5.2,5.1);\n            p.x += 0.5;\n            p=abs(p)-vec3(4.8,5.,5.5);\n            \n                //with angles *2 0.73, 0.37, is good, and 0.00, 0.67, and 0.00, 0.68, and 0.24, 0.41, 0.70,0.76, 0.23, 0.90\n                //0.2, 0.42\n        }\n    }\n    return p;\n}\n\n\nvec2 map(vec3 p){\n    vec3 op = p;\n    p = fractal_position(p);\n    vec2 t = vec2(tile(p));\n    glow*= float(length(op.xy)-2. > 2.5);\n    if(DEV_MODE > 1.){\n       // op -= vec3(60., -10., 0);\n        t.x = smax(t.x, -(length(op.xy)-3.), 0.1);\n        \n    }\n    return t;\n}\n\nvec2 trace(vec3 ro, vec3 rd){\n   \tvec2 t = vec2(0.),dist;\n    for(int i=0; i<96; i++)\n    {\n         dist = map(ro + rd*t.x);\n         \n         if(dist.x<0.01 || t.x > FAR){break;}\n         //turn the step down if we use smoothstep in our map functions\n         t.x += dist.x*0.95;\n         t.y = dist.y;\n    }\n return t;   \n}\nvec3 normal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = map(p).x - \n        vec3(\n            map(p-e.xyy).x, \n            map(p-e.yxy).x,\n            map(p-e.yyx).x\n            );\n    \n    return normalize(n);\n}\nfloat calculateAO(in vec3 pos, in vec3 nor){\n    //function from shane\n\tfloat sca = 2.0, occ = 0.0;\n    for( int i=0; i<5; i++ ){\n    \n        float hr = 0.01 + float(i)*0.5/4.0;        \n        float dd = map(nor * hr + pos).x;\n        occ += (hr - dd)*sca;\n        sca *= 0.7;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\n\nvec2 mapUV(vec3 p, vec3 n){\n    if(DEV_MODE == 1.){\n        if(iMouse.z < 0.5){\n            p.zx *= rot(iTime);\n            n.zx *= rot(iTime);\n        }\n    }\n    \n    p = fractal_position(p);\n    p = fract(p*0.3);\n    n = fractal_position(n);\n    n = abs(n);\n    //n = n*0.5+0.5;\n    return (p.xy*n.z + p.xz*n.y + p.yz*n.x)/(n.x+n.y+n.z);  \n}\nfloat bumpSurf3D( in vec3 p, in vec3 n, float id){\n    vec2 uv = mapUV(p,n);//id == 4. ? mapCylUV(p,n) : mapUVF(p,n);\n    return texture(iChannel1,uv).r;\n    \n}\nvec3 doBumpMap(in vec3 p, in vec3 nor, float bumpfactor, float id){\n    //this function is from shane\n    const vec2 e = vec2(0.01, 0);\n    float ref = bumpSurf3D(p, nor,id);                 \n    vec3 grad = (vec3(bumpSurf3D(p - e.xyy, nor,id),\n                      bumpSurf3D(p - e.yxy, nor,id),\n                      bumpSurf3D(p - e.yyx, nor,id) )-ref)/(2.*e.x);                     \n          \n    grad -= nor*dot(nor, grad);          \n                      \n    return normalize( nor + grad*bumpfactor );\n\t\n}\nvec3 lighting(vec3 sp, vec3 sn, vec3 lp, vec3 rd, float id){\n    vec3 color;\n    //vector from hit position to light position (shane)\n    vec3 lv = lp - sp;\n    //length of that vector (shane)\n    float ldist = max(length(lv), 0.00);\n    //direction of that vector (shane)\n    vec3 ldir = lv/ldist;\n    //attenuation (shane)\n    float atte = 1.0/(1. + 0.02*ldist*ldist );\n    //diffuse color\n    if(id == 1.){\n       sn = doBumpMap(sp*0.75,sn,0.05,id);\n    }\n    float diff = max(dot(ldir, sn),0.);\n    //specular reflection (shane)\n    float spec = pow(max(dot(reflect(-ldir, sn), -rd), 0.0), 10.);\n\t//ambient occlusion\n    float ao = calculateAO(sp, sn);\n    //reflecton\n    vec3 refl = reflect(rd, sn);\n    //getting reflected and refracted color froma cubemap, only refl is used\n    vec4 reflColor = texture(iChannel0, refl);\n    //orage specular\n    vec3 hotSpec = vec3(0.9,0.5, 0.2);\n    \n    //vec2 uv = mapUVF(sp,sn);//id == 4. ? mapCylUV(sp,sn) : mapUV(sp,sn);\n    float tex = texture(iChannel1,mapUV(sp,sn)).r;//truchet\n     float tex2 = texture(iChannel3,mapUV(sp,sn)).r;//metal\n    Materials[3].color  *= (0.8-0.5*cos(vec3(1.,2.,4.)/4. +sp.x+sp.y+sp.z));//+ texture(iChannel3, sp*0.05+vec3(0.,0.,iTime*0.1)).rgb*5.));//texture(iChannel3,(uv+3.)*0.2).rgb*4.;\n    Materials[2].color += pow(tex2,9.)*4.;\n    Materials[1].color += (0.8-0.5*cos(vec3(1.,2.,4.)/4. +sp.x*0.7+sp.y*0.8+sp.z))*0.4;\n    Materials[3].color += pow(tex,2.);\n    vec3 obj_color = Materials[int(id)].color;\n    float rough = Materials[int(id)].rough;\n\n    color = obj_color*0.1+(diff*obj_color +  spec*hotSpec +reflColor.xyz*rough +glow*vec3(1))*atte;\n    return color*ao;   \n    \n}\nfloat vig(vec2 fragCoord){\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv *=  1.0 - uv.yx;\n    float vig = uv.x*uv.y * 50.0;\n    return clamp(pow(vig, 0.3),0.,1.); \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n\tvec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n\t//uv = normalize(uv) * tan(asin(length(uv) *1.));//fisheye\n    \n\t//Camera Setup.\n\tvec3 lk = path(0.);\n\tvec3 ro = lk + vec3(0, .0, -.5);\n \tvec3 lp = ro + vec3(0, 3.75, 10);\n    vec2 m = (iMouse.xy - iResolution.xy*.5)/iResolution.y;\n    \n    float FOV = 1.57;\n    vec3 fwd = normalize(lk-ro);\n    vec3 rgt = normalize(vec3(fwd.z, 0., -fwd.x )); \n    vec3 up = cross(fwd, rgt); \n    vec3 rd = normalize(fwd + FOV*uv.x*rgt + FOV*uv.y*up);    \n    if(iMouse.z > 0.5){\n        //rd.yz *= rot(-m.y*2.);\n        if(DEV_MODE == 1.){\n            ro.xz *= rot(-m.x*4.);\n            rd.xz *= rot(-m.x*4.);\n            \n            ro.xy *= rot(-m.y*4.);\n            rd.xy *= rot(-m.y*4.);\n        }\n        else if(DEV_MODE == 2.){\n            rd.yz *= rot(-m.y*2.);\n            rd.xz *= rot(-m.x*4.);\n        }\n    }\n    else{\n        if(DEV_MODE == 2.){\n            rd.xy *= rot(sin(iTime*0.5)*0.1);\n        }\n    }\n    vec3 sky =vec3(0.9,0.5,0.)*0.03*vig(fragCoord);// mix(vec3(0.,0.5,0.8)*0.2,vec3(0.3), rd.y);//2.*mix(vec3(0.9, 0.5, 0.2)*4., vec3(0.0)-0.4, pow(abs(rd.y), 1./3.))/8.;\n    vec3 color = sky;//*(1./pow(abs(length(rd.xy)-0.4), 1./3.))/8.;\n    //= sky;\n    vec2 t = trace(ro, rd);\n    vec3 sp = ro + rd*t.x;\n    vec3 sn = normal(sp);\n    if(t.x < FAR){\n    color = lighting(sp, sn, lp, rd, t.y);\n        \n        float far = smoothstep(0.0, 1.0, t.x/120.);\n        \n        color = mix(color, sky, far);\n    }\n    \n    color = pow(color,vec3(0.65));    \n    if(DEV_MODE == 3.){\n        color += texture(iChannel2,uv).rgb;\n    }\n\tfragColor = vec4(color,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.1415926\n#define addH t = t.x < h.x ? t : h;\n#define S smoothstep\nfloat smin( float a, float b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\nfloat smax(float a, float b, float k)\n{\n    return smin(a, b, -k);\n}\nfloat rnd(vec2 p){\n    vec2 seed = vec2(13.234, 72.1849);\n    return fract(sin(dot(p,seed))*43251.1234);    \n}\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\nfloat rb(vec3 p, vec3 s, float r) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.) - r;\n}\nfloat rbEdge(vec3 p, vec3 s, float r, float start, float end) {\n    vec2 xzEdge = abs(p.xz)/s.xz;\n    s.y -= S(start,end,xzEdge.x)*S(start,end,xzEdge.y)*s.y;\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.) - r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nfloat cc( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - 0.03;\n}\n\nfloat ccEdge( vec3 p, float h, float r )\n{\n  float rEdge = r-smoothstep(0.9,0.8,abs(p.y)/h)*0.1;\n  \n \n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(rEdge,h);\n  float f = min(max(d.x,d.y),0.0) + length(max(d,0.0));\n  \n  return f-0.01;\n  \n}\n\nmat2 rot(float a){\n     float c = cos(a),s = sin(a);\n     return mat2(c, -s, s, c);\n}\n       \n       /*\nvec2 mapUV(vec3 p, vec3 n){\n    if(DEV_MODE == 1.){\n        if(iMouse.z < 0.5){\n            p.zx *= rot(iTime);\n            n.zx *= rot(iTime);\n        }\n    }\n    \n    p = fractal_position(p);\n    p = fract(p*0.4);\n    n = fractal_position(n);\n    n = abs(n);\n    return (p.xy*n.z + p.xz*n.y + p.yz*n.x)/(n.x+n.y+n.z);  \n}\n\nvec2 mapUVF(vec3 p, vec3 n){\n    if(DEV_MODE == 1.){\n        if(iMouse.z < 0.5){\n            p.zx *= rot(iTime);\n            n.zx *= rot(iTime);\n        }\n    }\n    \n    p = fractal_position(p);\n    p = fract(p*0.3);\n    n = fractal_position(n);\n    n = abs(n);\n    //n = n*0.5+0.5;\n    return (p.xy*n.z + p.xz*n.y + p.yz*n.x)/(n.x+n.y+n.z);  \n}\nvec2 mapCylUV(vec3 p, vec3 n){\n    if(DEV_MODE == 1.){\n        if(iMouse.z < 0.5){\n            p.zx *= rot(iTime);\n            n.zx *= rot(iTime);\n        }\n    }\n    \n    p = fractal_position(p);\n    float y = fract(abs(p.y+0.5))*0.5;\n    float a = fract(((atan(p.z/p.x)+PI)/(2.*PI))*4.);\n    return vec2(a,y);\n}\n       \n       \n       float bumpSurf3D( in vec3 p, in vec3 n, float id){\n    vec2 uv = mapUV(p,n);//id == 4. ? mapCylUV(p,n) : mapUVF(p,n);\n    return texture(iChannel1,uv).r;\n    \n}\nvec3 doBumpMap(in vec3 p, in vec3 nor, float bumpfactor, float id){\n    //this function is from shane\n    const vec2 e = vec2(0.01, 0);\n    float ref = bumpSurf3D(p, nor,id);                 \n    vec3 grad = (vec3(bumpSurf3D(p - e.xyy, nor,id),\n                      bumpSurf3D(p - e.yxy, nor,id),\n                      bumpSurf3D(p - e.yyx, nor,id) )-ref)/(2.*e.x);                     \n          \n    grad -= nor*dot(nor, grad);          \n                      \n    return normalize( nor + grad*bumpfactor );\n\t\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n#define LEVELS 3.\n#define EPS 2./iResolution.y\n#define EPS_N 10./iResolution.y\n\n#define SCALE 3.\n\n/*\n\nThe checkerboard shifting: Deciding which of the two\ncircles in a cell will be on top and below. You start\nwith always the upper right circle ontop and \nthe lower left below. Then view the cells as a checker\nboard and flip the order of all the white squares on \nthe board.\n\nThe part that almost had me was shading because you\nhave to rotate the coordinate systems back the other\nway but only after you do the checkerboard shifting and\ncreation of the circles. \n\nAnd THEN it still matters how you use atan since odd \nmultiples of the result will show a discontinuity at \nthe cell borders when passed through sin.\n\n*/\n\n\n\n\nvec2 concentricCircles(vec2 st, float r, float num, float type, vec2 checker,float scale){\n    float d1 = \n            smax(dot(st,vec2(0.7,-0.7)),\n            smax(dot(st,vec2(-0.7,0.7)),\n            smax(dot(st,-vec2(0.7,0.7)),\n            smax(dot(st,vec2(0.7,0.7)),\n            smax(abs(st.x),\n            abs(st.y),0.1),0.1),0.1),0.1),0.1);\n    float d2 = length(st);\n    \n    float d = type < 0.90 \n              ? mix(d1,d2,sin(iTime*1.9)*0.5+0.5)\n              : mix(d2,d1,cos(iTime*1.99 + type)*0.5+0.5);\n    float cutoff = smoothstep(r+EPS,r-EPS,d*(1.0+0.02*(scale-0.5)));\n    float circles = sin(d*num*PI);\n    return vec2(smoothstep(0.,1.,abs(circles*cutoff))+0.2*cutoff,d);\n}\n\nfloat overlappingConcentricCircles(vec2 st, float r, float num, vec2 checker, float a, float scale){\n    float type = a;\n    vec2 sp1 = st-vec2(1.,1.)+vec2(2.,2.)*checker;\n    vec2 group_1 = concentricCircles(sp1, r, num,type,checker,scale);\n    vec2 sp2 = st+vec2(1.,1.)-vec2(2.,2.)*checker;\n    vec2 group_2 = concentricCircles(sp2, r, num, type,checker,scale);\n    \n    float total = mix(group_1.x, group_2.x, smoothstep(0.1,0.2,group_2.x));\n    \n    \n    return total;\n}\nfloat quadTree(vec2 st){\n\n    float s = 1.;\n    float seed;\n    vec2 fr, fl;\n    float circle_num =  4.;\n    for(float i = 0.; i <= LEVELS; i ++){\n        fr = fract(st)-0.5;\n        fl = floor(st);\n        seed = rnd(fl); \n        seed = seed + 0.2*mod(fl.x,2.) + 0.2*mod(fl.y,2.);\n        if( seed > 0.7 || LEVELS - i == 1.){\n            float a =  (floor(rnd(fl*325.2435)*4.)/4.)*PI*2.;\n            fr *= rot(a);\n            return overlappingConcentricCircles(fr*2.,\n                                                2., \n                                                circle_num,\n                                                mod(fl,2.),\n                                                a,\n                                                s);\n        }\n        \n        s *= 2.;\n        st *= 2.;\n        circle_num /= 2.;\n    }\n    return 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy-iResolution.xy*0.5)/iResolution.y;\n    vec3 col;\n\n    float d = quadTree(uv*SCALE);\n\n    col = mix(vec3(0.,0.,0.), vec3(0.7,0.1,0.1)*1.3,  smoothstep(0.59,.6,d)); \n    //col = mix(col, vec3(0.45,0.3,0.1)*0.8, smoothstep(0.3,0.299,d));\n    //col = mix(col, vec3(0.), smoothstep(0.,3.9,d));\n    col = mix(col, vec3(0.1), smoothstep(.8,.3,abs(d-0.6)));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define LETTER_SIZE 1./16.\n#define STEP_SIZE 1./15.\n#define FIRST_LETTER 64.\n#define FIRST_NUMBER 48.\n\n#define _a 1.\n#define _b 2.\n#define _c 3.\n#define _d 4.\n#define _e 5.\n#define _f 6.\n#define _g 7.\n#define _h 8.\n#define _i 9.\n#define _j 10.\n#define _k 11.\n#define _l 12.\n\n#define _m 13.\n#define _n 14.\n#define _o 15.\n#define _p 16.\n#define _q 17.\n#define _r 18.\n#define _s 19.\n#define _t 20.\n#define _u 21.\n#define _v 22.\n#define _w 23.\n#define _x 24.\n#define _y 25.\n#define _z 26.\n\nvec2 numToCoord(float a){\n    return vec2( mod(a,16.), 15.-floor(a/16.) );\n}\n\nvec3 C(vec2 uv, vec2 start, inout float moveX,float num){\n    moveX -= STEP_SIZE/2.;\n    if(uv.x < start.x           || \n       uv.x > start.x+STEP_SIZE || \n       uv.y < start.y           || \n       uv.y > start.y+STEP_SIZE){\n       \n       return vec3(0.);\n    }\n    \n    uv -= start; uv /= STEP_SIZE; uv *= LETTER_SIZE;\n    uv += vec2(LETTER_SIZE*numToCoord(num));\n    return textureGrad(iChannel1,uv,dFdx(uv),dFdy(uv)).rrr;\n}\n\n//takes a float and prints the first 4 digits\nvoid generateDigits(vec2 uv, vec2 start, float moveX, \n                     float theNumber, float theSign, inout vec3 col){\n    \n    float s = 1.;\n    float count = 0.;\n    \n    float FN = fract(theNumber)*100.;\n    float ones = floor(mod(FN,10.));\n    //after decimal\n    col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER + ones);\n    float tens = floor(FN/10.);\n    col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER + tens);\n    //decimal point\n    col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER -2.);\n    FN = floor(theNumber);\n    //before decimal\n    while(FN >= 1.){\n        float n = floor(mod(FN,10.));\n        col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER + n);\n        FN /= 10.;\n    }\n    \n    //col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER -3. -2.*step(0.,theSign));\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 m = iMouse.xy/iResolution.xy;\n    vec3 col = vec3(0.);\n    generateDigits(uv, vec2(0.,0.4), 0.7, m.x, float(1.), col);\n    generateDigits(uv, vec2(0.,0.4), 0.8, m.y, float(1.), col);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}