{
    "Shader": {
        "info": {
            "date": "1721378135",
            "description": "origianals  https://www.shadertoy.com/view/dtVcDz https://www.shadertoy.com/view/XcfyR2",
            "flags": 0,
            "hasliked": 0,
            "id": "4cXyzf",
            "likes": 1,
            "name": "fractal room",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 102
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(2,23,21))*0.5+.5)\nfloat pi=3.1415926;\n\nvec2 LRCooridnate(in vec2 p,in float Num,in float dis)\n{\n\n    \n    vec2 SaUV=(-iResolution.xy+2.0*p)/min(iResolution.x,iResolution.y);\n    vec2 SaUVC=vec2(-SaUV.x,-SaUV.y);\n    \n    float VTRV=1.-fract(atan(SaUVC.x,SaUVC.y)/pi/2.+0.25);\n    float V2=(ceil(VTRV*ceil(Num))-0.5)/Num*pi*2.;\n    float V3s=sin(V2)*dis;\n    float V3c=cos(V2)*dis;\n    vec2 V4=vec2(V3c,V3s)+SaUVC;\n    \n    float V11=ceil(VTRV*ceil(Num))*2.-1.;\n    float V105=360./(ceil(Num)*2.)*(-1.);\n    \n    float cor=-V11*V105;\n    float th=(2.*pi)/360.*cor;\n    float rx=V4.x;\n    float ry=V4.y;\n    vec2 V5r=vec2(rx*cos(th)+ry*sin(th),ry*cos(th)-rx*sin(th));\n        V5r*=mat2(cos(1.*iTime),sin(1.*iTime),-sin(1.*iTime), cos(1.*iTime));\n    return vec2(V5r);\n}\n\nfloat StarSDF(in vec2 LRCooridnate,in float SCD,in float Scale)\n{\n    float SCD1=-(90.-SCD/-2.)*((2.*pi)/360.);\n     \n    float thl=SCD1;\n    float rx=LRCooridnate.x;\n    float ry=LRCooridnate.y;\n    vec2 V5L=vec2(rx*cos(thl)+ry*sin(thl),ry*cos(thl)-rx*sin(thl));\n    \n    float SCDL=V5L.x*(0.5/Scale)*(1./(cos(SCD1)*0.5))*step(LRCooridnate.y,0.);\n    \n    float ly=-LRCooridnate.y;\n    vec2 V5R=vec2(rx*cos(thl)+ly*sin(thl),ly*cos(thl)-rx*sin(thl));\n    float SCDR=V5R.x*(0.5/Scale)*(1./(cos(SCD1)*0.5))*step(-LRCooridnate.y,0.);\n    \n    return -(SCDL+SCDR);\n} \nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n     vec2 FUV=LRCooridnate(C.xy,5.,1.);\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p=g*d;\n         \n        p.z+=10.*iTime;\n        vec2 uv = (C.xy / iResolution.xy) - .5;\n        FUV*=cos(iTime);\n\n        uv*=mat2(cos(10.*iTime),sin(10.*iTime),-sin(10.*iTime), cos(10.*iTime));\n     float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .57)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n        float RFUV=StarSDF(FUV.xy*ma,50.,1.);\n\n        a=30.;\n        p=mod(p-a,a*2.)-a;\n        s=3.;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            p.y<p.x?p=p.zyx:p;\n            \n            s*=e=1.4+sin(iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+cos(iTime*.3+.5*cos(iTime*.3))*3.,\n                    120,\n                    8.+cos(iTime*.5)*5.\n                 )*RFUV;\n         }\n         g+=e=length(p.yz)/s;\n        g+=e=length(p.yx)/s;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}