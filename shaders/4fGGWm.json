{
    "Shader": {
        "info": {
            "date": "1712829904",
            "description": "da",
            "flags": 48,
            "hasliked": 0,
            "id": "4fGGWm",
            "likes": 5,
            "name": "dwsd",
            "published": 3,
            "tags": [
                "dasd"
            ],
            "usePreview": 0,
            "username": "marcellix",
            "viewed": 114
        },
        "renderpass": [
            {
                "code": "// Result\n\nfloat result(vec2 uv)\n{\n    vec4 color = texture(iChannel0, uv);\n    return clamp(1.0 - clamp(color.r - color.g, 0.0, 1.0), 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    float value = result(uv);\n\n    // compute normal\n    const float PI = 3.14159265;\n    vec3 onePixelSize = vec3(1.0 / iResolution.xy, 0.0);\n    vec3 normal = vec3(\n        result(uv + onePixelSize.xz) - result(uv - onePixelSize.xz),\n        result(uv - onePixelSize.zy) - result(uv + onePixelSize.zy),\n        0.0\n    );\n    normal.z = abs(cos(value * PI)) * 0.5;\n    normal = normalize(normal);\n    \n    // color\n    float diffuse = dot(normal, normalize(vec3(0.9, 0.8, 1.0)));\n    float specular = clamp(pow(diffuse, 50.0) * sign(diffuse) * value, 0.0, 1.0);\n    \n    vec3 black, white;\n    black = mix(vec3(0.005 * uv.y), vec3(0.023, 0.025, 0.02), value);\n    black *= diffuse;\n    black += vec3(0.5 * specular);\n    white = mix(vec3(0.9), vec3(0.95, 0.97, 1.0), value);\n    white *= diffuse * 0.3 + 0.7;\n    white += vec3(0.5 * specular);\n\n    float fade = smoothstep(0.49, 0.5, uv.x * 3.0 + uv.y - 1.5);\n    //fragColor.rgb = mix(black, white, fade);\n    fragColor.rgb = white;\n    //fragColor.rgb = black;\n\n    // degamma\n    fragColor.rgb = pow(fragColor.rgb, vec3(1.0 / 2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Reaction Diffusion (common)\n\n//---------------------------\n\nfloat hash(vec2 uv)\n{\n    return fract(sin(dot(uv, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise(vec2 x) {\n    vec2 i = floor(x);\n    vec2 f = fract(x);\n\n\tfloat a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nconst int NUM_NOISE_OCTAVES = 5;\nfloat fbm(vec2 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = rot * x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n//---------------------------\n\n#define PARAM1\n#ifdef PARAM1\nconst float Feed = 0.037;\nconst float Kill = 0.06;\nconst vec2 Fluctuation = vec2(0.001, 0.001);\nconst vec2 InitParam = vec2(0.999, 1.0);\n#elif defined PARAM2\nconst float Feed = 0.026;\nconst float Kill = 0.051;\nconst vec2 Fluctuation = vec2(0.001, 0.001);\nconst vec2 InitParam = vec2(0.999, 1.0);\n#elif defined PARAM3\nconst float Feed = 0.014;\nconst float Kill = 0.0477;\nconst vec2 Fluctuation = vec2(0.001, 0.001);\nconst vec2 InitParam = vec2(0.999, 1.0);\n#else\nconst float Feed = 0.055;\nconst float Kill = 0.062;\nconst vec2 Fluctuation = vec2(0.001, 0.001);\nconst vec2 InitParam = vec2(0.993, 1.0);\n#endif\n\n#define CONVOLUSION1\n#ifdef CONVOLUSION1\nconst mat3x3 Convolusion = mat3x3(\n    0.05, 0.20, 0.05,\n    0.20, -1.0, 0.20,\n    0.05, 0.20, 0.05\n);\nconst float Du = 1.0;\nconst float Dv = 0.5;\n#else\nconst mat3x3 Convolusion = mat3x3(\n    0.0, 1.0, 0.0,\n    1.0, -4.0, 1.0,\n    0.0, 1.0, 0.0\n);\nconst float Du = 0.2;\nconst float Dv = 0.1;\n#endif\n\n//---------------------------\n\nvec2 distribute(in vec2 fragCoord, in vec3 iResolution, float iTime)\n{\n    float feed = Feed;\n    float kill = Kill;\n    \n    vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    float ptn1 = step(distance(uv, vec2(0.75, 0.5)), 0.4);\n    feed = mix(feed, 0.03, ptn1);\n    kill = mix(kill, 0.062, ptn1);\n    \n    float ptn2 = step(distance(uv, vec2(-0.75, -0.5)), 0.4);\n    feed = mix(feed, 0.039, ptn2);\n    kill = mix(kill, 0.0578, ptn2);\n    \n    float fn = fbm(fragCoord * 0.01 - 100.0);\n    float kn = fbm(fragCoord * 0.01 + 100.0);\n    feed += Fluctuation.x * fn;\n    kill += Fluctuation.y * kn;\n    \n    return vec2(feed, kill);\n}\n\nvec2 laplacian(vec2 fragCoord, vec2 resolution, sampler2D buffer, mat3x3 convolusion)\n{\n    vec2 onePixelSize = 1.0 / resolution.xy;\n    vec2 selfID = floor(fragCoord);\n    vec2 value = vec2(0.0, 0.0);\n    \n    for(int x = 0; x <= 2; ++x)\n    {\n        for(int y = 0; y <= 2; ++y)\n        {\n            vec2 id = selfID + vec2(x-1, y-1);\n            vec2 uv = (id + 0.5) * onePixelSize;\n            value += texture(buffer, uv).rg * Convolusion[x][y];\n            \n            // no wrap...\n            //value += texelFetch(buffer, ivec2(id), 0).rg * Convolusion[x][y];\n        }\n    }\n    \n    return value;\n}\n\nvec2 simulate(vec2 current, vec2 laplacian, float feed, float kill)\n{\n    float u = current.r;\n    float v = current.g;\n    float uvv = u * v * v;\n    float lu = laplacian.r;\n    float lv = laplacian.g;\n    \n    u += Du * lu - uvv + feed * (1.0 - u);\n    v += Dv * lv + uvv - (feed + kill) * v;\n    \n    return vec2(u, v);\n}\n\n//---------------------------\n\nvoid general(out vec4 fragColor, in vec2 fragCoord, float iTime, vec3 iResolution, sampler2D iChannel0)\n{\n    // Simulation\n    vec2 current = texture(iChannel0, fragCoord / iResolution.xy).rg;\n    vec2 value = laplacian(fragCoord, iResolution.xy, iChannel0, Convolusion);\n    \n    vec2 distribution = distribute(fragCoord, iResolution, iTime);\n    float feed = distribution.x;\n    float kill = distribution.y;\n    fragColor.rg = simulate(current, value, feed, kill);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Reaction Diffusion (1st pass, Init and D -> A)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Input Keyboard\n    float RKey = texelFetch(iChannel1, ivec2(82, 0), 0).x; // R key\n\n    // Initialize\n    if(iFrame <= 5 || 0.0 < RKey)\n    {\n        vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n        fragColor.g = smoothstep(InitParam.x, InitParam.y, hash(iDate.zw * uv * 0.01));\n        fragColor.r = 1.0;\n    }\n    // Simulation\n    else\n    {\n        general(fragColor, fragCoord, iTime, iResolution, iChannel0);\n        \n        // Input Mouse\n        if(0.0 < iMouse.z)\n        {\n            fragColor.g = max(fragColor.g, smoothstep(100.0, 50.0, distance(iMouse.xy, fragCoord)) * 0.4);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Reaction Diffusion (2nd pass, A -> B)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    general(fragColor, fragCoord, iTime, iResolution, iChannel0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Reaction Diffusion (3rd pass, B -> C)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    general(fragColor, fragCoord, iTime, iResolution, iChannel0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Reaction Diffusion (last pass, C -> D)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    general(fragColor, fragCoord, iTime, iResolution, iChannel0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}