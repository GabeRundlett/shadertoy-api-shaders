{
    "Shader": {
        "info": {
            "date": "1534256237",
            "description": "Moving metaballs",
            "flags": 0,
            "hasliked": 0,
            "id": "4tcyDX",
            "likes": 14,
            "name": "Drops",
            "published": 3,
            "tags": [
                "bookofshaders"
            ],
            "usePreview": 0,
            "username": "momoro",
            "viewed": 869
        },
        "renderpass": [
            {
                "code": "// based on Metaballs by @patriciogv\n// Thanks @shane for suggesting smin\n\nfloat smin(float a, float b, float k){\n\n   float f = max(0., 1. - abs(b - a)/k);\n   return min(a, b) - k*.25*f*f;\n}\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv.x *= iResolution.x / iResolution.y;\n    \n    vec2 st = uv;\n    vec3 color = vec3(.0);\n\n    // Scale\n    st *= 15.;\n\n    // Tile the space\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n\n    float m_dist = 1.;  // minimun distance\n    for (int j= -2; j <= 2; j++ ) {\n        for (int i= -2; i <= 2; i++ ) {\n            // Neighbor place in the grid\n            vec2 neighbor = vec2(float(i),float(j));\n\n            // Random position from current + neighbor place in the grid\n            vec2 offset = random2(i_st + neighbor);\n\n            // Animate the offset\n            offset = 0.5 + 0.5*sin(iTime + 6.2831*offset);\n\n            // Position of the cell\n            vec2 pos = neighbor + offset - f_st;\n\n            // Cell distance\n            float dist = length(pos);\n\n            //m_dist = min(m_dist, dist);\n\n            // Metaball it!\n           // m_dist = min(m_dist, m_dist*dist);\n            m_dist = smin(m_dist, dist, .9);\n\n        }\n    }\n\n    // Draw cells (thanks @shane)\n    color = 1.0 - vec3(smoothstep(0.0, fwidth(m_dist) * 1.5, m_dist));\n    //color = vec3(m_dist);\n\n    fragColor = vec4(color,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}