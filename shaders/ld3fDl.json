{
    "Shader": {
        "info": {
            "date": "1527182142",
            "description": "Explore the amazingly beautiful mandelbox (use the source)...",
            "flags": 32,
            "hasliked": 0,
            "id": "ld3fDl",
            "likes": 11,
            "name": "Compleat Mandelbox",
            "published": 3,
            "tags": [
                "fractal",
                "interactive",
                "kifs"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 868
        },
        "renderpass": [
            {
                "code": "// \"Compleat Mandelbox\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Detailed mandelbox exploration (narrow tunnel drilled through solid regions)\n\n/*\n  Control panel appears when ring (or a hidden control) clicked; panel fades\n  automatically; use mouse to look around.\n\n  Sliders:\n   red: forward speed (stop anywhere)\n   green: zoom\n   blue: vertical position\n   yellow: fractal scale factor (2.5--3.5)\n\n   Pink button: color scheme (several fixed and varying)\n*/\n\n#define AA  0   // optional antialiasing\n\nvec3 HsvToRgb (vec3 c);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nvec4 Loadv4 (ivec2 idVar);\n\nvec3 ltPos[2], ltAx;\nfloat tCur, dstFar, mScale, vuHt, chCol;\nconst float pi = 3.14159;\nconst float itMax = 12.;\n\nfloat ObjDf (vec3 p)\n{\n  vec4 p4;\n  vec3 q;\n  float d;\n  q = p;\n  p = mod (p + 3., 6.) - 3.;\n  p4 = vec4 (p, 1.);\n  for (float j = 0.; j < itMax; j ++) {\n    p4.xyz = 2. * clamp (p4.xyz, -1., 1.) - p4.xyz;\n    p4 = mScale * p4 / clamp (dot (p4.xyz, p4.xyz), 0.25, 1.) + vec4 (p, 1.);\n  }\n  d = length (p4.xyz) / p4.w;\n  q.y -= vuHt;\n  d = max (d, 0.02 - length (q.xy));\n  return d;\n}\n\nvec4 ObjCol (vec3 p)\n{\n  vec4 col4;\n  vec3 p3, col;\n  float pp, ppMin, cn, cr;\n  p = mod (p + 3., 6.) - 3.;\n  p3 = p;\n  cn = 0.;\n  cr = 0.;\n  ppMin = 1.;\n  for (float j = 0.; j < itMax; j ++) {\n    if (any (greaterThan (p3, vec3 (1.)))) ++ cr;\n    p3 = 2. * clamp (p3, -1., 1.) - p3;\n    pp = dot (p3, p3);\n    if (pp < ppMin) {\n      cn = j;\n      ppMin = pp;\n    }\n    if (abs (pp - 0.625) > 0.375) ++ cr;\n    p3 = mScale * p3 / clamp (pp, 0.25, 1.) + p;\n  }\n  if      (chCol == 0.) col4 = vec4 (0.04 * tCur + 0.06 * cn, 0.8, 1., 0.4);\n  else if (chCol == 1.) col4 = vec4 (0.03 * cr, mix (0.15, 0.05, mod (cn, 2.)), 1., 0.3);\n  else if (chCol == 2.) col4 = vec4 (0.1 * cn, 0.8, 1., 0.2);\n  else if (chCol == 3.) col4 = vec4 (0.3 + 0.2 * cn, 0.7, 1., 0.3);\n  else                  col4 = vec4 (0.13 + 0.004 * cn, 0.8, 1., 0.4);\n  col4.r = mod (col4.r, 1.);\n  col4.rgb = HsvToRgb (col4.rgb);\n  return col4;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, h, s, sLo, sHi, eps;\n  eps = 0.0005;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 220; j ++) {\n    h = ObjDf (ro + s * rd);\n    if (h < eps || s > dstFar) {\n      sHi = s;\n      break;\n    }\n    sLo = s;\n    s += h;\n  }\n  if (h < eps) {\n    for (int j = 0; j < 6; j ++) {\n      s = 0.5 * (sLo + sHi);\n      if (ObjDf (ro + s * rd) > eps) sLo = s;\n      else sHi = s;\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float dMax)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (3. * h, 0.04, 0.3);\n    if (sh < 0.05 || d > dMax) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nfloat ObjAO (vec3 ro, vec3 rd)\n{\n  float ao, d;\n  ao = 0.;\n  for (float j = 1.; j < 4.; j ++) {\n    d = 0.02 * j;\n    ao += max (0., d - ObjDf (ro + d * rd));\n  }\n  return 0.5 + 0.5 * clamp (1. - 5. * ao, 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, ltDir;\n  vec2 q;\n  float dstObj, atten, dfSum, spSum, sh;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    dfSum = 0.;\n    spSum = 0.;\n    for (int k = 0; k < 2; k ++) {\n      ltDir = ltPos[k] - ro;\n      atten = 1. / (1. + 0.02 * dot (ltDir, ltDir));\n      ltDir = normalize (ltDir);\n      atten *= smoothstep (0.3, 0.5, dot (ltAx, - ltDir));\n      dfSum += atten * max (dot (vn, ltDir), 0.);\n      spSum += atten * pow (max (0., dot (ltDir, reflect (rd, vn))), 16.);\n    }\n    ltDir = normalize (0.5 * (ltPos[0] + ltPos[1]) - ro);\n    sh = ObjSShadow (ro, ltDir, max (dstObj - 0.2, 0.));\n    col4 = ObjCol (ro);\n    col = (0.2 + 0.4 * sh * dfSum) * col4.rgb + 0.5 * col4.a * sh * spSum * vec3 (1., 1., 0.5);\n    col *= ObjAO (ro, vn);\n    col += vec3 (0.2, 0.2, 0.) * max (dot (- rd, vn), 0.) *\n       (1. - smoothstep (0., 0.03, abs (dstObj - 0.5 * mod (tCur, 6.))));\n    rd = reflect (rd, vn);\n    q = smoothstep (0.15, 0.25, mod (512. * vec2 (atan (rd.x, rd.y), asin (rd.z)) / pi, 1.));\n    col *= 0.95 + 0.05 * q.x * q.y;\n    col *= mix (1., smoothstep (0., 1., Maxv3 (col)), 0.3);\n  } else col = vec3 (0.15, 0.14, 0.14);\n  return col;\n}\n\nvec4 ShowWg (vec2 uv, vec2 canvas, vec4 parmV)\n{\n  vec4 wgBx[5];\n  vec3 cc[5], col;\n  vec2 ut, ust;\n  float vW[4], asp;\n  cc[0] = vec3 (1., 0.4, 0.4);\n  cc[1] = cc[0].grb;\n  cc[2] = cc[0].bgr;\n  cc[3] = cc[0].rrg;\n  cc[4] = cc[0].rgr;\n  asp = canvas.x / canvas.y;\n  for (int k = 0; k <= 3; k ++)\n     wgBx[k] = vec4 ((0.34 + 0.042 * float (k)) * asp, -0.21, 0.014 * asp, 0.18);\n  wgBx[4] = vec4 (0.402 * asp, -0.44, 0.018, 0.018);\n  vW[0] = parmV.x;  vW[1] = parmV.y;  vW[2] = parmV.z;  vW[3] = parmV.w;\n  col = vec3 (0.);\n  for (int k = 0; k <= 3; k ++) {\n    ut = 0.5 * uv - wgBx[k].xy;\n    ust = abs (ut) - wgBx[k].zw * vec2 (0.7, 1.);\n    if (max (ust.x, ust.y) < 0.) {\n      if  (min (abs (ust.x), abs (ust.y)) * canvas.y < 2.) col = 0.3 * cc[k];\n      else col = (mod (0.5 * ((0.5 * uv.y - wgBx[k].y) / wgBx[k].w - 0.99), 0.1) *\n         canvas.y < 6.) ? 0.3 * cc[k] : 0.6 * cc[k];\n    }\n    ut.y -= (vW[k] - 0.5) * 2. * wgBx[k].w;\n    ut = abs (ut) * vec2 (1., 1.4);\n    if (max (abs (ut.x), abs (ut.y)) < 0.02 && max (ut.x, ut.y) > 0.013) col = cc[k];\n  }\n  for (int k = 4; k <= 4; k ++) {\n    ut = 0.5 * uv - wgBx[k].xy;\n    ust = abs (ut) - wgBx[k].zw;\n    if (max (ust.x, ust.y) < 0.) {\n      if  (min (abs (ust.x), abs (ust.y)) * canvas.y < 2.) col = cc[k];\n      else col = 0.6 * cc[k];\n    }\n  }\n  return vec4 (col, step (0.001, length (col)));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat, mPtr, wgBxC, parmV, c4;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac, asp, tCurM, vuTr, cm;\n  int wgSel;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  parmV = Loadv4 (ivec2 (0, 0));\n  zmFac = 1.2 + (13.2 - 1.2) * parmV.y;\n  vuHt = 6. * parmV.z;\n  mScale = 2.5 + (3.5 - 2.5) * parmV.w;\n  stDat = Loadv4 (ivec2 (1, 0));\n  mPtr = vec4 (stDat.xyz, 0.);\n  wgSel = int (stDat.w);\n  stDat = Loadv4 (ivec2 (2, 0));\n  el = stDat.x;\n  az = stDat.y;\n  tCur = stDat.z;\n  tCurM = stDat.w;\n  stDat = Loadv4 (ivec2 (3, 0));\n  vuTr = stDat.x;\n  chCol = stDat.y;\n  asp = canvas.x / canvas.y;\n  wgBxC = vec4 (0.48 * asp, -0.46, 0.022, 0.);\n  ro = vec3 (0., vuHt, vuTr);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ltPos[0] = ro + vuMat * vec3 (-0.3, 0.2, -0.05);\n  ltPos[1] = ro + vuMat * vec3 (0.3, 0.2, -0.05);\n  ltAx = vuMat * vec3 (0., 0., 1.);\n  dstFar = 80.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 4.;\n#endif  \n  col = vec3 (0.);\n  for (float a = 0.; a < naa; a ++) {\n    rd = normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.),\n       0.5 * pi * (a + 0.5)), zmFac));\n    rd = vuMat * rd;\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  if (tCur - tCurM < 8. || canvas.y < 256.) c4 = ShowWg (uv, canvas, parmV);\n  if (canvas.y >= 256.) {\n    if (tCur - tCurM < 8.) col = mix (mix (col, c4.rgb, c4.a), col, 0.2 + 0.8 * smoothstep (7., 8., tCur - tCurM));\n    if (tCur - tCurM > 7.5) col = mix (vec3 (0., 0.7, 0.7), col,\n       0.3 + 0.7 * step (2., abs (length (0.5 * uv - wgBxC.xy) - wgBxC.z) * canvas.y));\n  } else col = mix (mix (col, c4.rgb, c4.a), col, 0.3);\n  if (mPtr.z > 0. && wgSel < 0) {\n    if (max (abs (uv.x), abs (uv.y)) < 0.05 &&\n       min (abs (uv.x), abs (uv.y)) < 0.005) col = mix (col, vec3 (0.1, 1., 0.1), 0.3);\n  }\n  fragColor = vec4 (pow (clamp (col, 0., 1.), vec3 (0.9)), 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (ivec2 idVar)\n{\n  return texture (txBuf, (vec2 (idVar) + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Compleat Mandelbox\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 Loadv4 (ivec2 idVar);\nvoid Savev4 (ivec2 idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst float pi = 3.14159;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[6], mPtr, mPtrP, stDat, parmV;\n  vec2 canvas, ust;\n  ivec2 iFrag;\n  float tCur, tCurM, tCurP, vW, asp, el, az, spd, vuTr, chCol;\n  int wgSel, wgReg, kSel;\n  iFrag = ivec2 (fragCoord);\n  if (iFrag.x >= 4 || iFrag.y > 0) discard;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  wgSel = -1;\n  wgReg = -2;\n  asp = canvas.x / canvas.y;\n  if (iFrame <= 5) {\n    parmV = vec4 (0.2, 0.3, 0.5, 0.3);\n    mPtrP = mPtr;\n    el = 0.;\n    az = 0.;\n    tCurM = tCur;\n    tCurP = tCur;\n    vuTr = 0.;\n    chCol = 0.;\n  } else {\n    parmV = Loadv4 (ivec2 (0, 0));\n    stDat = Loadv4 (ivec2 (1, 0));\n    mPtrP = vec4 (stDat.xyz, 0.);\n    wgSel = int (stDat.w);\n    stDat = Loadv4 (ivec2 (2, 0));\n    el = stDat.x;\n    az = stDat.y;\n    tCurP = stDat.z;\n    tCurM = stDat.w;\n    stDat = Loadv4 (ivec2 (3, 0));\n    vuTr = stDat.x;\n    chCol = stDat.y;\n  }\n  if (mPtr.z > 0.) {\n    for (int k = 0; k <= 3; k ++)\n        wgBx[k] = vec4 ((0.34 + 0.042 * float (k)) * asp, -0.21, 0.014 * asp, 0.18);\n    wgBx[4] = vec4 (0.402 * asp, -0.44, 0.018, 0.018);\n    wgBx[5] = vec4 (0.48 * asp, -0.46, 0.022, 0.);\n    for (int k = 0; k <= 5; k ++) {\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    ust = mPtr.xy * vec2 (asp, 1.) - wgBx[5].xy;\n    if (length (ust) < wgBx[5].z) wgReg = 5;\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n    if (wgSel >= 0) tCurM = tCur;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0.) {\n      az = 2. * pi * clamp (1.1 * mPtr.x, -0.5, 0.5);\n      el = pi * clamp (1.1 * mPtr.y, -0.5, 0.5);\n    }\n  } else {\n    if (wgSel < 4) {\n      for (int k = 0; k <= 3; k ++) {\n        if (wgSel == k) {\n          kSel = k;\n          vW = clamp (0.5 + 0.5 * (mPtr.y - wgBx[k].y) / wgBx[k].w, 0., 0.999);\n          break;\n        }\n      }\n      if      (kSel == 0) parmV.x = vW;\n      else if (kSel == 1) parmV.y = vW;\n      else if (kSel == 2) parmV.z = vW;\n      else if (kSel == 3) parmV.w = vW;\n    } else if (mPtrP.z <= 0.) {\n      if (wgSel == 4) chCol = mod (++ chCol, 5.);\n    }\n  }\n  spd = 0.2 * parmV.x;\n  vuTr += spd * (tCur - tCurP);\n  if      (iFrag.x == 0) stDat = parmV;\n  else if (iFrag.x == 1) stDat = vec4 (mPtr.xyz, float (wgSel));\n  else if (iFrag.x == 2) stDat = vec4 (el, az, tCur, tCurM);\n  else if (iFrag.x == 3) stDat = vec4 (vuTr, chCol, 0., 0.);\n  Savev4 (iFrag, stDat, fragColor, fragCoord);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (ivec2 idVar)\n{\n  return texture (txBuf, (vec2 (idVar) + 0.5) / txSize);\n}\n\nvoid Savev4 (ivec2 idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  d = abs (fCoord - vec2 (idVar) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}