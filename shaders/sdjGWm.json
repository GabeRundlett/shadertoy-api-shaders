{
    "Shader": {
        "info": {
            "date": "1617530578",
            "description": "coded live in 25 minutes during the revision 2021 shader showdown quarter finals",
            "flags": 0,
            "hasliked": 0,
            "id": "sdjGWm",
            "likes": 14,
            "name": "Revision 2021 Shader Showdown QF",
            "published": 3,
            "tags": [
                "raymarching",
                "reflection",
                "volumetric",
                "shader",
                "glow",
                "revision",
                "finals",
                "showdown",
                "quarter",
                "anticore"
            ],
            "usePreview": 0,
            "username": "anticore",
            "viewed": 932
        },
        "renderpass": [
            {
                "code": "vec3 cam(vec3 ro, vec3 rd, vec2 uv) {\n    vec3 f = normalize(rd - ro);\n    vec3 l = normalize(cross(vec3(0.,1.,0.), f));\n    vec3 u = normalize(cross(f,l));\n    return normalize(f + l * uv.x + u * uv.y);\n}\n\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\n\nvec4 bg(vec3 rd) {\n  return rd.y * texture(iChannel0, rd.xz * 0.1 + iTime * 0.1).rrra * vec4(.2, .4, .8, 1.) * 0.5;\n}\n\nfloat sdBox(vec3 p, vec3 c) {\n    vec3 q = abs(p) - c;\n    return length(max(q, 0.));\n}\nfloat ni(float a) { \n//return texture(texFFTIntegrated, a).x; \n    return 0.;\n}\nmat2 rot(float a) { return mat2(cos(a), sin(a), -sin(a), cos(a)); }\n\nvoid mo(inout vec2 p, vec2 d){ p = abs(p) - d; if (p.y > p.x) p = p.yx; }\n\nfloat sdThing(vec3 p) {\n    mo(p.yz, vec2(.4));\n    mo(p.xy, vec2(.4));\n    p.xz *= rot(iTime + ni(0.2) * 2.);\n    p.zy *= rot(iTime  + ni(0.) * 2.);\n    mo(p.zx, vec2(.4));\n    mo(p.yx, vec2(.4));\n    return sdBox(p, vec3(.2, 1., .2));\n}\n\nvec3 rep(vec3 p, vec3 c) {\n    return mod(p + .5 * c, c) - .5 * c;\n}\n\nvec2 map(vec3 p) {\n    vec3 pp = p;\n    p += vec3(0., 3. - sin(p.x * .2 + p.z * .3 + iTime + ni(0.) * 10.) * .2 - cos(-p.x * 2. + p.z * .3 + iTime) * .3 - length(p) * .1, 0.);\n    p = rep(p, vec3(.4, 0., .4));\n    float s = sdSphere(p, .1);\n    float b = sdThing(pp + vec3(sin(ni(0.) * 3.), 0., cos(ni(.15) * 3.)));\n  \n    return vec2(min(s,b),s < b ? 1. : 2.);\n}\n\nvec3 norm(vec3 p) {\n    float E = 0.001; vec2 k = vec2(1, -1);\n    return normalize(\n      k.xyy * map(p + k.xyy * E).x + \n  \n      k.yyx * map(p + k.yyx * E).x + \n  \n      k.yxy * map(p + k.yxy * E).x + \n  \n      k.xxx * map(p + k.xxx * E).x\n    );\n}\n\nvec3 pal(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b * cos(6.283 * (c * t + d));\n}\n\nvec4 tr(vec3 ro, vec3 rd, vec2 uv) {\n    float td = 1.;\n    vec2 h;\n  \n    vec4 c = vec4(0.);\n  \n    for (int i = 0; i < 400; i++) {\n        vec3 ip = ro + rd * td;\n        h = map(ip);\n        td += h.x < 0.1 ? 0.01 : h.x;\n        int bnc = 0;\n        \n        if (h.y == 2.) {\n            c += vec4(pal(iTime , vec3(.5),vec3(.5),vec3(1., 1., .2),vec3(.8, .6, .3) ), 1.) * exp(-h.x * 5.) * 0.01;\n         }\n      \n        if (h.x < 0.01) {\n            vec3 inorm = norm(ip);\n          \n            if (h.y == 1.) {\n              c += vec4(pal(ip.x * .1 + ip.z * .2 + iTime - ip.x * .2 + ip.z * .1 + iTime, vec3(.5),vec3(.5),vec3(1., 1., .2),vec3(.8, .6, .3) ), 1.) * exp(-h.x * 20.) * (exp(-td * .1) * .1);\n            }\n            if (h.y == 2.) {\n                ro = ip;\n                rd = reflect(rd, inorm);\n                td = 0.2;\n                bnc += 1;\n            }\n        }\n    }\n    \n    return bg(rd)  + c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tuv -= 0.5;\n\tuv /= vec2(iResolution.y / iResolution.x, 1);\n\n    vec3 ro = vec3(-10. * sin(iTime), 1. + sin(iTime + ni(0.) * .2), -5. * cos(iTime));\n    vec3 rd = cam(ro, vec3(0.,0.,0.), uv);\n\n    // Output to screen\n    fragColor = pow(tr(ro, rd, uv), vec4(1./1.5));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}