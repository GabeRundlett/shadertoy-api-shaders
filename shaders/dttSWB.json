{
    "Shader": {
        "info": {
            "date": "1685754254",
            "description": "Trying to do a cool brain animation.",
            "flags": 0,
            "hasliked": 0,
            "id": "dttSWB",
            "likes": 3,
            "name": "Brain ray march",
            "published": 3,
            "tags": [
                "raymarch",
                "brain"
            ],
            "usePreview": 0,
            "username": "henrmota",
            "viewed": 264
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DISTANCE 100.\n#define SURF_DIST 0.0001\n\n\n\nmat2 Rot(float a) {\n    float c = cos(a), s = sin(a);\n    \n    return mat2(c, -s, s, c);\n}\n\nfloat hash21(vec2 st) {\n    return fract(sin(dot(st, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat snoise(vec2 st) {\n    vec2 id = floor(st);\n    vec2 gridUv = fract(st);\n\n    vec2 dx = vec2(1., 0);\n    \n    float tl = hash21(id);\n    float tr = hash21(id + dx);\n    float bl = hash21(id + dx.yx);\n    float br = hash21(id + dx.xx);\n    \n    gridUv = gridUv * gridUv * 3. - 2. *gridUv * gridUv * gridUv;\n    float t = mix(tl, tr, gridUv.x);\n    float b = mix(bl, br, gridUv.x);\n\n    return mix(t, b, gridUv.y);\n}\n\nfloat fbm(vec2 st) {\n    float amp = 1.;\n    float freq = 0.5;\n    float col = 0.;\n    for(float i = 0.; i < 10.; i++) {\n        col += amp * snoise(st * freq);\n        \n        amp *= 0.5;\n        freq *= 2.;\n    }\n    \n    return col / 2.;\n}\n\nfloat brain(vec2 uv) {\n    float n = snoise(uv);\n    n += snoise(uv * 3. + n);\n    n *= 0.5;\n    n += snoise(uv * 4. + n);\n    n *= 0.5;\n\n    return n;\n}\n\nfloat getDist(vec3 p) {\n    vec4 sphere = vec4(0., 0., 3.,.8);\n    p.x = abs(p.x);\n    float n = brain(abs(p.xx) * 2. + 0.1 * iTime);\n   \n    \n    vec3 cp = vec3(sphere.x, clamp(p.y, -0.2, 0.2), sphere.z);\n    \n    vec3 noise = 0.1 * vec3(\n        snoise(abs(p.yz) * 6. + iTime + n),\n        snoise(abs(p.xx + 0.1) * 6. + iTime),\n        0.2 * snoise(abs(p.zz) * 10. + iTime)\n    );\n    \n    cp -= mix(vec3(0., 0., -p.y * 0.25), noise, p.x * 1.2);\n    return length(p - cp) - sphere.w;\n}\n\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(0.001, 0.);\n    float d = getDist(p);\n    \n    \n    return normalize(\n    vec3(\n            getDist(p + e.xyy),\n            getDist(p + e.yxy),\n            getDist(p + e.yyx)\n     )\n        - vec3(\n            getDist(p - e.xyy),\n            getDist(p - e.yxy),\n            getDist(p - e.yyx)\n     ));\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    \n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO; \n        float dS = getDist(p);\n        dO += dS;\n        if(dO > MAX_DISTANCE || dS < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec2 getLight(vec3 p, vec3 ro) {\n    vec3 lightPos = vec3 (1., 0., -3.);\n    lightPos.x += 3. * sin(iTime);\n    vec3 l = normalize(lightPos - p);\n    vec3 n = getNormal(p);\n    \n    float fresnel = 1. - abs(dot(normalize(p - ro), normalize(n)));\n  \n    fresnel = pow(fresnel, 2.);\n    return vec2(clamp(dot(n, l), 0., 1.), fresnel);\n}\n\nvec3 cosPalette(  float t,  vec3 a,  vec3 b,  vec3 c, vec3 d ){\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = cosPalette(\n            fract(uv.x * .1 + 0.1 * iTime),\n            vec3(0.7, 0.33, 0.67),\n            vec3(0.50, 0.2, 0.87),\n            vec3(1.0, 1.00, 0.67),\n            vec3(0.30, 0.33, 0.67)\n        );\n    vec3 ro = vec3(0., 0., 0.);\n    vec3 rd = normalize(vec3(uv, 1.));\n    \n    float d = rayMarch(ro, rd);\n    vec3 p = ro + d * rd;\n    \n    if (d < MAX_DISTANCE) {\n    \n        vec2 light = getLight(p, ro);\n        \n        col += max((cosPalette(\n            snoise(p.yy * .1 + light.y + iTime * 0.4),\n            vec3(0.7, 0.33, 0.67),\n            vec3(0.50, 0.2, 0.87),\n            vec3(1.0, 1.00, 0.67),\n            vec3(0.30, 0.33, 0.67)\n        ) + light.x) * .3, light.y * 1.2);\n        \n    }\n \n\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}