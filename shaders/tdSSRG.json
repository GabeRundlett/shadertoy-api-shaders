{
    "Shader": {
        "info": {
            "date": "1554224158",
            "description": "a reversible cellular automaton, it's interactive so try dragging the mouse around!",
            "flags": 32,
            "hasliked": 0,
            "id": "tdSSRG",
            "likes": 6,
            "name": "RevCell-v0",
            "published": 3,
            "tags": [
                "cellularautomata"
            ],
            "usePreview": 0,
            "username": "natpbs",
            "viewed": 423
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = vec4(texture(iChannel0,fragCoord / iResolution.xy).rgb, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// ==== RevCell-v0 ====\n// A Reversible Cellular Automaton\n\n// This is an implementation of the Rotate1\n// reversible cellular automaton, also known\n// as Single Rotation.\n// It is the block automaton with Margolus\n// neighborhood in which each block containing\n// exactly one live cell is rotated by 90.\n\n// -- Margolus Neighborhood --\n// What this means is that at each timestep t\n// the table is partitioned into 2x2 squares,\n// of the form\n//     { (x+delta_x, y+delta_y) :\n//          delta_x, delta_y in {0,1} },\n// where x,y == t mod 2.\n\n// This implies that when t is even, we\n// consider those squares whose upper left\n// vertex has even coordinates and similarly we\n// consider only \"odd\" squares when t is odd.\n\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\n// Get returns the state of the cell having\n// coordinates p\nfloat get(vec2 p) {\n  // since the rules are invarianto only to\n  // translations by even vector I have to make\n  // sure that the screen dimensions are even\n  vec2 screen_parity = mod(iResolution.xy, 2.0);\n  p = mod(p, iResolution.xy - screen_parity);\n  p /= iResolution.xy;\n  float state = texture(iChannel0, p).a;\n  if (state==1.0) {\n    return 1.0;\n  }\n  return 0.0;\n}\n\n// Get_block returns the state of the block\n// whose upper left vertex has coordinates v.\n// The state is given in the following\n// format:\n//     x\\y 0 1\n//       0 x y\n//       1 z w\nvec4 get_block(vec2 v) {\n  vec2 b = vec2(0.0, 1.0);\n  return vec4(\n    get(v),\n    get(v + b.xy),\n    get(v + b.yx),\n    get(v + b.yy)\n  );\n}\n\n// Cell takes the state of the block amd the\n// relative coordinates of a cell inside of\n// the block and returns the state of that\n// cell\nfloat cell(vec4 block, vec2 p) {\n  if (p.x == 0.0) {\n    if (p.y == 0.0) {\n      return block.x;\n    } else {\n      return block.y;\n    }\n  } else {\n    if (p.y == 0.0) {\n      return block.z;\n    } else {\n      return block.w;\n    }\n  }\n}\n\n// Evaluate takes the state of the block\n// containing the current cell, as well as\n// the position of the current cell relative\n// to the upper left vertex of the block.\n// It returns the new state of the current cell\nfloat evaluate(vec4 block, vec2 p) {\n  /* Rotate1 */\n  if (dot(block, vec4(1)) == 1.0) {\n    // if the block contains exactly one live\n    // cell then rotate it clockwise\n    return cell(block, vec2(1.0-p.y, p.x));\n  }//*/\n  /* Rotate2 */\n  if (dot(block, vec4(1)) == 3.0) {\n    // if the block contains exactly one dead\n    // cell then rotate it counter-clockwise\n    return cell(block, vec2(p.y, 1.0-p.x));\n    // this rule is very similar to the other\n    // but it does not allow for constant walls\n  }//*/\n  return cell(block, p);\n}\n\n// Color takes the new state of the cell and\n// returns the cell's new color\nvec4 color(float state, vec4 col) {\n  if (state == 1.0) {\n    if (col.a == 0.0) {\n      // constantly live cell\n      return vec4(0.9, 0.8, 0.8, 1.0);\n    } else {\n      // blinking cell\n      return vec4(col.a, 0.5, 1.0-col.a, 1.0);\n    }\n  }\n  // if the cell is inactive\n  // blend the color with black for a trail\n  col.rgb *= 0.95;\n  // the a channel encodes the number of cicles\n  // since the last time the cell was active\n  col.a = max(0.0, col.a - 0.125);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    if(iFrame==0){\n      const float prob = 0.01;\n      fragColor=vec4((fract(dot(sin(fragCoord*vec2(157.1,113.7)),\n        vec2(353.17+iTime,383.093-iTime)))>prob)?0.0:1.0);\n      return;\n    } else if (length(iMouse.xy-fragCoord)<5.0) {\n      const float prob = 0.5;\n      fragColor=vec4((fract(dot(sin(fragCoord*vec2(157.1,113.7)),\n        vec2(353.17+iTime,383.093-iTime)))>prob)?0.0:1.0);\n      return;\n    }\n\n  // parity is 0 on even frames and 1 on odd ones\n  float parity = texture(iChannel0, vec2(0)).b;\n\n  // compute the local coordinates of the\n  // current cell relative to the upper left\n  // vertex of its block\n  vec2 p = mod(fragCoord - vec2(parity) - vec2(0.5), 2.0);\n\n  // compute the global coordinates of the\n  // upper left vertex of the block\n  vec2 origin = fragCoord - p;\n\n  // the old color of the cell\n  vec4 col = texture(iChannel0, fragCoord.xy / iResolution.xy);\n\n  // get the state of the current block\n  vec4 block = get_block(origin);\n\n  // compute the new state of the cell\n  float state = evaluate(block, p);\n\n  // tapping radius\n  float tap = min(iResolution.x, iResolution.y) / 200.0;\n    if (distance(iMouse.xy, fragCoord) < tap) {\n      // if the cell is currently being tapped\n      // then reverse the state of the cell\n      state = 1.0-state;\n    }\n\n  fragColor = color(state, col);\n\n  // reverse the parity\n  if (fragCoord.x < 1.0 && fragCoord.y < 1.0) {\n    fragColor.b = 1.0 - parity;\n  }\n}\n\n\t\n\t\n\t\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}