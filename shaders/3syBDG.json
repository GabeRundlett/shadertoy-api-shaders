{
    "Shader": {
        "info": {
            "date": "1607806194",
            "description": "Quick experiment with the Sierpiński fractal.",
            "flags": 0,
            "hasliked": 0,
            "id": "3syBDG",
            "likes": 4,
            "name": "Infinite Sierpiński",
            "published": 3,
            "tags": [
                "sierpinski",
                "infinite"
            ],
            "usePreview": 0,
            "username": "laube",
            "viewed": 392
        },
        "renderpass": [
            {
                "code": "#define SQRT3_2 0.86602540378443864676\n#define PI2_3 2.09439510239319549\n#define LN2 0.6931471805599453\n#define HFLIP(uv) vec2(uv.x, -uv.y)\n\n// Source: https://stackoverflow.com/a/17897228\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat triangle(vec2 uv, float w) {\n    //    x\n    // 3 / \\ 2\n    //  x---x\n    //    1\n    // sin(120°) = sqrt(3) / 2 = 0.8660254037844386467\n    // cos(120°) = -0.5\n    // sin(30°) = 0.5\n    float side1 = smoothstep(-0.25 - w, -0.25 + w, uv.y);\n    float side2 = smoothstep(-0.25 - w, -0.25 + w, -uv.x * SQRT3_2 - uv.y * 0.5);\n    float side3 = smoothstep(-0.25 - w, -0.25 + w,  uv.x * SQRT3_2 - uv.y * 0.5);\n    return side1 * side2 * side3;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    uv += vec2(SQRT3_2, .5) * .5;\n\n    vec3 col = vec3(0);\n    //col.y = float(abs(uv.y) < 0.002);\n    \n    float zoomTime = fract(iTime * .8);\n    float scale = 3. * exp(zoomTime * LN2);\n    \n    uv /= scale;\n    uv.y -= .25;\n\n    // Time varying pixel color\n    float w = 1. / iResolution.y / scale;\n    \n    float i = triangle(uv, w);\n    uv = HFLIP(uv);\n    w *= 2.;\n    uv *= 2.;\n    i *= (1. - triangle(uv, w));\n    \n    for (int step = 6; step >= 0; step -= 1) {\n        w *= 2.;\n        uv *= 2.;\n        vec2 uvNext = uv;\n        float minL = 100.;\n        for (float j = 0.; j < 6.; j += PI2_3) {\n            vec2 uvC = uv + vec2(sin(j), cos(j));\n            float l = length(uvC);\n            if (l < minL) {\n                minL = l;\n                uvNext = uvC;\n            }\n        }\n        uv = uvNext;\n        float fade = 1.;\n        if (step == 0) {\n            fade = smoothstep(0., 1.0, zoomTime);\n        }\n        i *= (1. - fade * triangle(uv, w));\n    }\n    \n    col.xyz = i * hsv2rgb(vec3(iTime * .1, .2, 1.));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}