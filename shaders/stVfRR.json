{
    "Shader": {
        "info": {
            "date": "1663945144",
            "description": "show different julia sets along hilbert curve",
            "flags": 0,
            "hasliked": 0,
            "id": "stVfRR",
            "likes": 15,
            "name": "Julia Hilbert 3D",
            "published": 3,
            "tags": [
                "fractal",
                "curve"
            ],
            "usePreview": 0,
            "username": "xacer",
            "viewed": 372
        },
        "renderpass": [
            {
                "code": "// \"Hilbert 3D\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// 3D Hilbert curves (algorithm derived from al13n's \"Space Filling Curve\")\n\n#define AA 0\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat JuliaDf (vec3 p, vec3 p_orig);\nfloat PrCylDf (vec3 p, float r, float h);\nvec3 HsvToRgb (vec3 c);\nvec3 RotToDir (vec3 v1, vec3 v2, vec3 p);\nvec2 Rot2D (vec2 q, float a);\nfloat Fbm2 (vec2 p);\n\nvec3 ltPos, qHilb;\nfloat dstFar, tCur, szFac, cFac, vShift, zDisp;\nint idObj, nIter;\nbool doSh;\nconst int maxIter = 5;\nconst float pi = 3.14159, sqrt3 = 1.73205;\n\nvec3 HilbCrv (vec3 p)\n{\n  vec3 s;\n  vec2 cv;\n  float lLen, cLen, dp, xRev, zRev, zAdd;\n  cLen = 1. / (2. * cFac - 1.);\n  lLen = cFac * cFac * (1. - ((1. - 0.25 * pi) * cFac - 1.) * cLen);\n  dp = 1. + cLen;\n  xRev = 1.;\n  zRev = 1.;\n  zAdd = 0.;\n  for (int j = 0; j < maxIter; j ++) {\n    lLen *= 0.125;\n    dp *= 0.5;\n    s = sign (p);\n    zAdd += lLen * zRev * s.z * (4. - s.y * (2. - s.x));\n    if (s.x > 0.) p = p.zxy * vec3 (- s.z, 1., - s.y);\n    else if (s.y > 0.) p = p.yxz * vec3 (-1., -1., - s.z);\n    else if (s.z > 0.) p = p.yzx * vec3 (1., -1., 1.);\n    else p = p.zyx;\n    p += dp * vec3 (1., ((s.x + s.y < 0.) ? 1. : -1.), 1.);\n    if (s.x + s.z < 0.) xRev = - xRev;\n    else if (s.x > 0.) {\n      if (s.y != s.z) zRev = - zRev;\n    } else zRev = - zRev;\n    if (j == nIter - 1) break;\n  }\n  cv = vec2 (p.y, - p.z) + cLen;\n  if (min (cv.x, cv.y) > 0.) p.yz = vec2 (length (cv) - cLen, (atan (cv.x, cv.y) - 0.25 * pi) * cLen);\n  else if (p.y + p.z < 0.) p.yz = p.zy * vec2 ( -1., 1.) + vec2 (0., (1. - 0.25 * pi) * cLen);\n  else p.z -= (1. - 0.25 * pi) * cLen;\n  p.xz *= vec2 (xRev, zRev);\n  p.z += zAdd;\n  return p;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, w;\n  q = p / szFac;\n  q.y -= vShift;\n  q.xz = Rot2D (q.xz, pi + 0.25 * pi * sin (0.03 * 2. * pi * tCur));\n  q = RotToDir (vec3 (-1., 1., 1.) / sqrt3, vec3 (0., 1., 0.), q);\n  w = 0.5 / cFac;\n  d = PrRoundBoxDf (q, vec3 (1. - 0.26 * w), 0.01);\n  if (doSh || d < 0.1) {\n    qHilb = HilbCrv (q);\n    q = qHilb;\n    q.z = mod (q.z + zDisp, w) - 0.5 * w;\n    // if (true) { return length(q.xy) - 0.01; }\n    float jdf = JuliaDf(q.xyz, p.xyz);\n    d = max (d, min (PrRoundBox2Df (q.xy, vec2 (0.1 * w), 0.05 * w), jdf));\n    idObj = 1;\n  }\n  dMin = 0.7 * szFac * d;\n  q = p;\n  q.y -= 0.02;\n  d = PrCylDf (q.xzy, 0.8, 0.02);\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 160; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  doSh = true;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.4 + 0.6 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, ltDir;\n  float dstObj, dstGrnd, vdl, sh, att, h;\n  cFac = pow (2., float (nIter));\n  zDisp = 1. * tCur / cFac;\n  szFac = 1. + 0.8 / cFac;\n  vShift = (sqrt3 - 1.3 / cFac) + 0.04;\n  doSh = false;\n  dstObj = ObjRay (ro, rd);\n  dstGrnd = (rd.y < 0.) ? - ro.y / rd.y : dstFar;\n  if (min (dstObj, dstGrnd) < dstFar) {\n    ltDir = normalize (ltPos);\n    if (dstObj < dstGrnd) {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      vdl = max (dot (vn, ltDir), 0.);\n      h = 0.05 * zDisp * cFac;\n      if (idObj == 1) h += 0.5 + 0.5 * qHilb.z / (cFac * cFac);\n      if (idObj == 1 || length (ro.xz) < 0.6) {\n        col = HsvToRgb (vec3 (mod (h, 1.), 1., 1.));\n        vdl *= vdl * vdl;\n      } else col = vec3 (0.5);\n    } else {\n      ro += dstGrnd * rd;\n      vn = vec3 (0., 1., 0.);\n      col = vec3 (0.4) * (0.7 + 0.3 * Fbm2 (4. * ro.xz));\n      vdl = max (dot (vn, ltDir), 0.);\n    }\n    att = smoothstep (0.9, 0.95, dot (normalize (ltPos - ro), ltDir));\n    sh = ObjSShadow (ro, ltDir);\n    col = att * (col * (0.2 + 0.8 * sh * vdl) +\n       0.2 * sh * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.));\n  } else col = vec3 (0.);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac, ltEl, ltAz, ns;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 3. * pi * mPtr.x;\n    el += 0.7 * pi * mPtr.y;\n  }\n  el = clamp (el, -0.25 * pi, 0.05 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., sqrt3, -10.);\n  zmFac = 5. + 10. * abs (az) / pi;\n  ltEl = -0.2 * pi * (1. + 0.2 * sin (0.2 * 2. * pi * tCur));\n  ltAz = pi + 0.2 * pi * cos (0.25 * 2. * pi * tCur);\n  ltPos = vec3 (0., 0., 20.);\n  ltPos.yz = Rot2D (ltPos.yz, ltEl);\n  ltPos.xz = Rot2D (ltPos.xz, ltAz);\n  dstFar = 100.;\n  ns = mod (0.25 * tCur, float (2 * (maxIter - 1) - 1));\n  nIter = 2;// + int (min (ns, 2. * float (maxIter - 1) - ns));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 4.;\n#endif  \n  col = vec3 (0.);\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.),\n       0.5 * pi * (a + 0.5)), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\n\n//--------------------------------------------------------------------------------\n// quaternion manipulation\n//--------------------------------------------------------------------------------\n\nvec4 qSquare( vec4 a )\n{\n    return vec4( a.x*a.x - dot(a.yzw,a.yzw), 2.0*a.x*(a.yzw) );\n}\n\nvec4 qCube( vec4 a )\n{\n\treturn a * ( 4.0*a.x*a.x - dot(a,a)*vec4(3.0,1.0,1.0,1.0) );\n}\n\n//--------------------------------------------------------------------------------\n\nfloat lengthSquared( vec4 z ) { return dot(z,z); }\n\n// animation\nfloat JuliaDf (vec3 p, vec3 p_orig) {\n    float r = 12.0;\n    p *= r;\n    p_orig.y -= 2.0;\n    vec4 z = vec4( p, 0.2 );\n    vec4 c = vec4(p_orig, 0.0) / 2.0;\n\n    float m2 = 0.0;\n    vec2  t = vec2( 1e10 );\n\n    float dz2 = 1.0;\n    for( int i=0; i<10; i++ ) \n    {\n        // |dz|² = |3z²|²\n        dz2 *= 9.0*lengthSquared(qSquare(z));\n\n        // z = z^3 + c\t\t\n        z = qCube( z ) + c;\n\n        // stop under divergence\t\t\n        m2 = dot(z, z);\t\t\n        if( m2>10000.0 ) break;\n    }\n\n    // distance estimator: d(z) = 0.5·log|z|·|z|/|dz|   (see https://iquilezles.org/articles/distancefractals)\n    float d = 0.25 * log(m2) * sqrt(m2/dz2 );\n    // replace with julia set\n \n    return d / r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1.,\n     0., 1.), c.y);\n}\n\nvec3 RotToDir (vec3 v1, vec3 v2, vec3 p)\n{\n  vec3 n;\n  float c;\n  n = normalize (cross (v1, v2));\n  c = dot (v1, v2);\n  return c * p + sqrt (1. - c * c) * cross (n, p) + (1. - c) * dot (n, p) * n;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}