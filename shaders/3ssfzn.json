{
    "Shader": {
        "info": {
            "date": "1590634554",
            "description": "Offset colors",
            "flags": 2,
            "hasliked": 0,
            "id": "3ssfzn",
            "likes": 6,
            "name": "webcam_noise",
            "published": 3,
            "tags": [
                "asd"
            ],
            "usePreview": 1,
            "username": "ianwall",
            "viewed": 797
        },
        "renderpass": [
            {
                "code": "float rounding = 0.0;\nfloat sharpness = 0.02;\nfloat INNER = (1./3.);\n\nfloat rand(float x)\n{\n\treturn fract(sin(x)*100000.0);    \n}\n\nfloat noise1D(float x)\n{\n    float i = floor(x);  // integer\n\tfloat f = fract(x);  // fraction\n\tfloat u = f*f*f*(f*(f*6.-15.)+10.); // custom cubic curve\n\treturn mix(rand(i), rand(i + 1.0), u); // using it in the interpolation\n}\n\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\n// Gradient Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/XdXGW8\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n#define PI 3.1415926\n    // distance\n    \n\tfloat t = (1.0/5.0)*iTime*(2.0*3.1415936);\n    float WIGGLE = 0.2;\n    float COLOR_OFFSET = 0.7;\n    float N = WIGGLE*smoothstep(-1.3,1.3,(sin(t/5.0)));\n    vec2 uvR = uv + N*vec2(noise(uv+t), noise(312.0+uv+t));\n    vec2 uvG = uv + N*vec2(noise(uv+COLOR_OFFSET+t), noise(312.0+uv+COLOR_OFFSET+t));\n    vec2 uvB = uv + N*vec2(noise(uv-COLOR_OFFSET+t), noise(312.0+uv-COLOR_OFFSET+t));\n    \n\tfloat R = texture(iChannel0, uvR).r;\n\tfloat G = texture(iChannel0, uvG).g;\n\tfloat B = texture(iChannel0, uvB).b;\n    \n\tfragColor = vec4(R,G,B, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}