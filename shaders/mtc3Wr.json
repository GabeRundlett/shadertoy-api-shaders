{
    "Shader": {
        "info": {
            "date": "1682215304",
            "description": "A type of noise based on sinusoidal interpolation. Also ensures an \"up-and-down\" curve motion.",
            "flags": 0,
            "hasliked": 0,
            "id": "mtc3Wr",
            "likes": 0,
            "name": "Sinusoidal Wave Noise",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "Tech_",
            "viewed": 152
        },
        "renderpass": [
            {
                "code": "#define rcp(x) (1.0 / (x))\n#define mod2(x) mod(x, 2.0)\n\nconst float PI     = 3.14159265359;\nconst float INV_PI = rcp(PI);\n\nfloat Hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat RandCos(float x)\n{\n    float gridID = floor(x / PI);\n\n    return mix(\n        Hash11( gridID        * 4e1) - mod2(gridID      ),\n        Hash11((gridID + 1.0) * 4e1) - mod2(gridID + 1.0),\n        0.5 - 0.5 * cos(PI * fract(x * INV_PI))\n    );\n}\n\nfloat RandSin(float x)\n{\n    return RandCos(x - PI * 0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  uv = fragCoord / iResolution.xy;\n    float x  = uv.x * 1.0e2;\n    \n    vec3 color;\n\n    if (uv.y < 0.5) color += RandCos(x);\n    else            color += cos(x);\n    \n    fragColor = vec4(color * 0.5 + 0.5, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}