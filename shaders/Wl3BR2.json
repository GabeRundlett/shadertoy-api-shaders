{
    "Shader": {
        "info": {
            "date": "1613036448",
            "description": "WIP: Trying to apply [url]https://shadertoy.com/view/Wt3BR2[/url] \nto autoadapt computation to target 55 fps, whatever the GPU or screen resolution.\nDisplay loop length: strongly oscillates.\nWhat am I doing wrong ?   ( several strategies in buffA #9..15 )",
            "flags": 32,
            "hasliked": 0,
            "id": "Wl3BR2",
            "likes": 5,
            "name": "auto-adaptive target to 60fps",
            "published": 3,
            "tags": [
                "fps",
                "relaxation",
                "adaptive"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 347
        },
        "renderpass": [
            {
                "code": "// application of https://shadertoy.com/view/Wt3BR2\n\n// draw fonts & numbers from https://www.shadertoy.com/view/llySRh\nvec4 char(vec2 p, int c) {\n    vec2 dFdx = dFdx(p/16.), dFdy = dFdy(p/16.);\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx, dFdy );\n}\nvec4 pInt(vec2 p, float n) {\n    vec4 v = vec4(0);\n    if (n < 0.) \n        v += char(p - vec2(-.5,0), 45 ),\n        n = -n;\n\n    for (float i = 3.; i>=0.; i--) \n        n /=  9.999999, // 10., // for windows :-(\n        v += char(p - .5*vec2(i,0), 48+ int(fract(n)*10.) );\n    return v;\n}\n\n\nvoid mainImage( out vec4 O, vec2 U ) { \n    O = T(U); \n    U = ( U/R.y - vec2(.05,.0) ) * 16.; \n    int n = int(T(0).w);\n    O -= pInt(U,float(n/10000) ).x; U.x -= 2.2;\n    O -= pInt(U,float(n%10000) ).x;\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 O, vec2 U )\n{\n    float target = 55.,                                // target fps\n          T = 1./5.,\n          n = T(0).w;                                  // amount of computation to adapt\n    \n    if (U==vec2(.5)) {\n        O.x =   mix( T(0).x,    iTimeDelta,  T );      // relaxation on time\n        O.y = iFrame<1 ? n : mix( T(0).y, n, T );      // suggestion Fredrik Hubinette\n        O.w = iFrame<1 ? 1e3                           // relaxation on computing loop.\n                 //    : max(1., n /(target*iTimeDelta) );\n                       : max(1., n /(target*T(0).x) );\n                 //    : max(1., n *mix( 1., 1./(target*iTimeDelta), T) );\n                 //    : max(1., n *mix( 1., 1./(target*T(0).x)    , T) );\n                 //    : max(1., T(0).y /(target*T(0).x) ); // suggestion Fredrik Hubinette\n     // O-=O;\n     // O = vec4(1e3);                                 // stress tests\n        O.w = min(1e5, O.w);                           // safeguard\n        return;\n    }\n    \n    float y =  U.y/R.y;\n    O = U.x > 1.\n          ? T(U-vec2(1,0))                             // scroll\n          : vec4( y <  1./iTimeDelta/70.  );           // instant fps\n          \n   // if (mod(iTime,10.) < 5. ) \n    { \n        if (U.x<1.) O.rg *= .9;\n        for( float i=0.; i < n ; i++) O.a = cos(O.a);  // the costly adaptive computation\n    }\n        \n    if (U.x<1.) { if( abs(y-target/70.)<1./R.y) O = vec4(0,1,0,0) ;\n                  O = mix(O, vec4(1,0,0,0), max(0.,1.-abs( y - 1./T(0).x/70. )/2.*R.y) );\n                 }\n    O.b += min(0.,abs(O.a));       // to prevent optimizer to cancel the loop            \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R     iResolution.xy\n#define T(U)  texelFetch( iChannel0 , ivec2(U) , 0 )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}