{
    "Shader": {
        "info": {
            "date": "1616486094",
            "description": "Output of a neural network I trained to perform XOR operations. The corners of the square are the data points, blue = 0, red = 1. Drag with the mouse to move the view.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ndl3DB",
            "likes": 7,
            "name": "Fuzzy Neural XOR",
            "published": 3,
            "tags": [
                "test",
                "xor",
                "fuzzy",
                "neural",
                "deeplearning",
                "neuralnetworks",
                "datascience"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 201
        },
        "renderpass": [
            {
                "code": "/*\nI read through this online book about how neural networks work:\nhttp://neuralnetworksanddeeplearning.com/\n\nIt was pretty good but a little bit technical. When I first read it,\nI had no idea what a derivative was or what the notation meant so I\nkind of gave up on it at first (partly my reason for being excited\nwhen I learned out how to compute derivatives) :/\n\nAnyway, I picked it back up later on and made it through and made a small neural\nnetwork library in python:\nhttps://replit.com/@hathnoname/Deep-Learning-II\n\nThen ported it to JavaScript (multidimensional arrays = I need recursion) :D\nPlain version: https://codehs.com/editor/html/3926213/2209646/index.html\np5.js version (why?): https://editor.p5js.org/pythontales/full/Ef7HJ26zk\n\nI partially auto-generated the GLSL data with this little program I made:\nhttps://replit.com/@hathnoname/Neural-Network-to-GLSL#main.py\n*/\n\n#define draw(d, c) fragColor.rgb = mix(fragColor.rgb, c, smoothstep(unit, 0.0, d))\n\n// SDFs\nfloat sdDisc(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b, in float t) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0)) - t;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n\n    vec2 uv = (fragCoord - center) / iResolution.y * 2.0;\n    uv -= (iMouse.xy - center) / iResolution.y * 2.0;\n    float unit = 2.0 / iResolution.y;\n\n    // Query the neural network and colorize the result\n    mat1x1 result = ProcessNN(mat2x1(uv.x, uv.y));\n    fragColor = vec4(result._00, 0.0, 1.0 - result._00, 1.0);\n\n    vec2 cornerA = vec2(0.0, 0.0);\n    vec2 cornerB = vec2(1.0, 0.0);\n    vec2 cornerC = vec2(1.0, 1.0);\n    vec2 cornerD = vec2(0.0, 1.0);\n\n    draw(sdLine(uv, cornerA, cornerB, 0.01), vec3(0.0));\n    draw(sdLine(uv, cornerB, cornerC, 0.01), vec3(0.0));\n    draw(sdLine(uv, cornerC, cornerD, 0.01), vec3(0.0));\n    draw(sdLine(uv, cornerD, cornerA, 0.01), vec3(0.0));\n\n    draw(sdDisc(uv, cornerA, 0.05), vec3(0.0));\n    draw(sdDisc(uv, cornerB, 0.05), vec3(0.0));\n    draw(sdDisc(uv, cornerC, 0.05), vec3(0.0));\n    draw(sdDisc(uv, cornerD, 0.05), vec3(0.0));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// 1 row, 1 column\nstruct mat1x1 {\n    float _00;\n};\n\n// 2 rows, 1 column\nstruct mat2x1 {\n    float _00;\n    float _10;\n};\n\n// 10 rows, 1 column\nstruct mat10x1 {\n    float _00;\n    float _10;\n    float _20;\n    float _30;\n    float _40;\n    float _50;\n    float _60;\n    float _70;\n    float _80;\n    float _90;\n};\n\n// 10 rows, 2 columns\nstruct mat10x2 {\n    float _00; float _01;\n    float _10; float _11;\n    float _20; float _21;\n    float _30; float _31;\n    float _40; float _41;\n    float _50; float _51;\n    float _60; float _61;\n    float _70; float _71;\n    float _80; float _81;\n    float _90; float _91;\n};\n\n// 1 row, 10 columns\nstruct mat1x10 {\n    float _00; float _01; float _02; float _03; float _04; float _05; float _06; float _07; float _08; float _09;\n};\n\n// 10 rows, 10 columns\nstruct mat10x10 {\n    float _00; float _01; float _02; float _03; float _04; float _05; float _06; float _07; float _08; float _09;\n    float _10; float _11; float _12; float _13; float _14; float _15; float _16; float _17; float _18; float _19;\n    float _20; float _21; float _22; float _23; float _24; float _25; float _26; float _27; float _28; float _29;\n    float _30; float _31; float _32; float _33; float _34; float _35; float _36; float _37; float _38; float _39;\n    float _40; float _41; float _42; float _43; float _44; float _45; float _46; float _47; float _48; float _49;\n    float _50; float _51; float _52; float _53; float _54; float _55; float _56; float _57; float _58; float _59;\n    float _60; float _61; float _62; float _63; float _64; float _65; float _66; float _67; float _68; float _69;\n    float _70; float _71; float _72; float _73; float _74; float _75; float _76; float _77; float _78; float _79;\n    float _80; float _81; float _82; float _83; float _84; float _85; float _86; float _87; float _88; float _89;\n    float _90; float _91; float _92; float _93; float _94; float _95; float _96; float _97; float _98; float _99;\n};\n\nmat1x1 mul_mat1x10_mat10x1(in mat1x10 a, in mat10x1 b) {\n    return mat1x1(a._00 * b._00 + a._01 * b._10 + a._02 * b._20 + a._03 * b._30 + a._04 * b._40 + a._05 * b._50 + a._06 * b._60 + a._07 * b._70 + a._08 * b._80 + a._09 * b._90);\n}\n\nmat10x1 mul_mat10x2_mat2x1(in mat10x2 a, in mat2x1 b) {\n    return mat10x1(a._00 * b._00 + a._01 * b._10,\n                   a._10 * b._00 + a._11 * b._10,\n                   a._20 * b._00 + a._21 * b._10,\n                   a._30 * b._00 + a._31 * b._10,\n                   a._40 * b._00 + a._41 * b._10,\n                   a._50 * b._00 + a._51 * b._10,\n                   a._60 * b._00 + a._61 * b._10,\n                   a._70 * b._00 + a._71 * b._10,\n                   a._80 * b._00 + a._81 * b._10,\n                   a._90 * b._00 + a._91 * b._10);\n}\n\nmat10x1 mul_mat10x10_mat10x1(in mat10x10 a, in mat10x1 b) {\n    return mat10x1(a._00 * b._00 + a._01 * b._10 + a._02 * b._20 + a._03 * b._30 + a._04 * b._40 + a._05 * b._50 + a._06 * b._60 + a._07 * b._70 + a._08 * b._80 + a._09 * b._90,\n                   a._10 * b._00 + a._11 * b._10 + a._12 * b._20 + a._13 * b._30 + a._14 * b._40 + a._15 * b._50 + a._16 * b._60 + a._17 * b._70 + a._18 * b._80 + a._19 * b._90,\n                   a._20 * b._00 + a._21 * b._10 + a._22 * b._20 + a._23 * b._30 + a._24 * b._40 + a._25 * b._50 + a._26 * b._60 + a._27 * b._70 + a._28 * b._80 + a._29 * b._90,\n                   a._30 * b._00 + a._31 * b._10 + a._32 * b._20 + a._33 * b._30 + a._34 * b._40 + a._35 * b._50 + a._36 * b._60 + a._37 * b._70 + a._38 * b._80 + a._39 * b._90,\n                   a._40 * b._00 + a._41 * b._10 + a._42 * b._20 + a._43 * b._30 + a._44 * b._40 + a._45 * b._50 + a._46 * b._60 + a._47 * b._70 + a._48 * b._80 + a._49 * b._90,\n                   a._50 * b._00 + a._51 * b._10 + a._52 * b._20 + a._53 * b._30 + a._54 * b._40 + a._55 * b._50 + a._56 * b._60 + a._57 * b._70 + a._58 * b._80 + a._59 * b._90,\n                   a._60 * b._00 + a._61 * b._10 + a._62 * b._20 + a._63 * b._30 + a._64 * b._40 + a._65 * b._50 + a._66 * b._60 + a._67 * b._70 + a._68 * b._80 + a._69 * b._90,\n                   a._70 * b._00 + a._71 * b._10 + a._72 * b._20 + a._73 * b._30 + a._74 * b._40 + a._75 * b._50 + a._76 * b._60 + a._77 * b._70 + a._78 * b._80 + a._79 * b._90,\n                   a._80 * b._00 + a._81 * b._10 + a._82 * b._20 + a._83 * b._30 + a._84 * b._40 + a._85 * b._50 + a._86 * b._60 + a._87 * b._70 + a._88 * b._80 + a._89 * b._90,\n                   a._90 * b._00 + a._91 * b._10 + a._92 * b._20 + a._93 * b._30 + a._94 * b._40 + a._95 * b._50 + a._96 * b._60 + a._97 * b._70 + a._98 * b._80 + a._99 * b._90);\n}\n\nmat10x1 add_mat10x1_mat10x1(in mat10x1 a, in mat10x1 b) {\n    return mat10x1(a._00 + b._00,\n                   a._10 + b._10,\n                   a._20 + b._20,\n                   a._30 + b._30,\n                   a._40 + b._40,\n                   a._50 + b._50,\n                   a._60 + b._60,\n                   a._70 + b._70,\n                   a._80 + b._80,\n                   a._90 + b._90);\n}\n\nmat1x1 add_mat1x1_mat1x1(in mat1x1 a, in mat1x1 b) {\n    return mat1x1(a._00 + b._00);\n}\n\nfloat sigmoid(in float x) {\n    return 1.0 / (1.0 + exp(-x));\n}\n\nmat10x1 sigmoid_mat10x1(in mat10x1 m) {\n    return mat10x1(sigmoid(m._00),\n                   sigmoid(m._10),\n                   sigmoid(m._20),\n                   sigmoid(m._30),\n                   sigmoid(m._40),\n                   sigmoid(m._50),\n                   sigmoid(m._60),\n                   sigmoid(m._70),\n                   sigmoid(m._80),\n                   sigmoid(m._90));\n}\n\nmat1x1 sigmoid_mat1x1(in mat1x1 m) {\n    return mat1x1(sigmoid(m._00));\n}\n\nmat1x1 ProcessNN(in mat2x1 x) {\n    // Weight matrices\n    mat10x2 w1 = mat10x2(0.03319712196019374, 1.1443213500808143,\n                         4.1025171907472755, -3.3939830868252456,\n                         0.5371019223094989, -1.0676141608532879,\n                         3.3130540787612626, 2.932565477397576,\n                         -0.18699484207423323, -1.6230113875442005,\n                         -0.9989000059106591, 2.3518615871738273,\n                         0.9973805334227819, -1.5477152792319964,\n                         0.006535311163502047, 0.2938333563134656,\n                         1.3704374425038752, 0.7553207017474318,\n                         -1.1964403302092619, 0.7424747719924473);\n\n    mat10x10 w2 = mat10x10(-0.6768025286377598, -0.27581221417023444, 0.4912528203596843, 0.9400120935639843, -0.6056903527179655, -0.3987402660056572, 0.2227405626577809, -0.3866184867506283, -0.5249349658586657, -0.0782531756658623,\n                           -0.2689811316425999, -0.26272811172488064, -0.3603328264920885, 0.48308675140359403, 0.01649225880976562, -1.0760315121339439, 0.468769941977845, 0.48960739773039386, -0.7075747936482282, 0.3334055377343561,\n                           1.0455836327358385, -0.5841272876958203, 0.5001124083214444, -0.6891890477526228, -0.20527535433452967, 1.6040962956119083, -0.1209685485559765, 0.24440864866408915, -0.6646529414477744, 0.9779954122797109,\n                           -0.8257989974373184, 0.21893672848783285, 0.310546033541851, -0.9853165294611814, -0.6732428414763356, -0.07346480711305561, 0.6958688756482168, 0.3684194621634489, -0.9488344745706886, 0.8332880339640742,\n                           0.18518573920422657, 3.597226723892344, -1.111243255068065, -2.3905799711217446, -1.2970939487925481, 1.430276408072052, -1.3416738427094392, 0.8570069417219405, -0.9302251061559289, -0.1732136937175002,\n                           -0.7110678021682101, -0.8435272874637136, -0.9512417807972643, 1.066524728010091, 0.7046744837394627, -0.3323768974190991, -0.5922532450688203, -0.8682643859803765, -0.7183519665869231, -0.6603321383713966,\n                           -0.16667093163389887, -0.34218062546004946, 0.3214280643916874, 1.0198515234868897, -0.8715985990858606, -0.5571298449739921, 0.7118293934286183, -0.5149412594733537, -0.9056519843568237, 0.6056953138022804,\n                           -1.2685220417407892, -2.6651720161535364, 0.8685569116187667, 2.254966981649588, 1.0833914890790128, -0.35276231402347985, 0.904578081137413, 0.47066413977476307, 0.164994101903616, -0.4570107810635503,\n                           -0.5789810823682393, 0.4411527520906639, 0.5681751388564962, -0.2324651139132623, -0.46592371778418723, -0.22604159073381783, -0.8111695364866206, 0.768031104608796, 0.26761060404559484, 0.06422461569208453,\n                           -0.9340985316366729, -1.4074246833902868, 0.9603559293842688, 0.15132786604190876, 1.2768492830701852, -0.8938873936122481, 0.28590358364788077, 0.8578593497833432, -0.18826085911177398, 0.9214212993695868);\n\n    mat10x10 w3 = mat10x10(0.46676272343418007, 0.332592443659391, 1.2642565683754867, -0.6563336988445874, 1.5585217136059126, -0.6681070284038748, -0.4720370136060689, -1.359070695152831, -0.6398201641378277, -0.5984324035869767,\n                           -0.5409997617549247, 0.15998104086179915, 0.37009515712568614, 0.843495148906926, 1.586885007491395, -0.10403367938261608, -0.02003774360180638, -0.33832089975395124, 0.853333521210561, -1.6470289960947953,\n                           0.2616388575131632, -0.692159671456188, -0.20050862659183194, -0.5662148669116635, 0.010957521727648425, -0.469341152143319, -0.7135682319650349, 0.9669317198210222, -0.6363769457362074, 0.2852003374455695,\n                           -0.7464089186550206, 0.6022134970115437, -0.6348132285566299, 0.6771778379197521, -1.0998067743086384, -0.16814538576534666, 0.43465163556782127, 0.47508582974139096, -0.04473195316603569, -0.9068276037731076,\n                           0.9208645404123257, 0.6722254171061278, -0.6410526546541312, 0.020169883959730198, -0.13268329377433333, -0.4666561275957545, 0.25073083605609797, 1.2326732126956859, -0.08879019699915498, -0.7009860102270311,\n                           0.9989182090855052, 0.013830717781969534, -1.0641868493328248, -0.46890940361060274, -3.4038334011001306, 0.738791270350262, 0.4732314579236462, 2.4556939329714016, 0.14571145959764267, 1.0908061928749264,\n                           0.15466848584103293, 0.4273155873746734, 0.3664746983853679, 0.8093853931719543, 0.8940348020332515, 0.6839691856917931, -0.7637730825849424, -1.5675189252253519, 0.31108632939484704, -0.8240728717427835,\n                           0.8541101945173094, -0.7185054916128308, -0.17658314941057984, -0.623325377649105, 1.7679899930133705, -0.06761914944684302, -0.3545928901565393, -1.0559698485659559, 0.9065391336337847, -0.5319309256508692,\n                           -0.06742418620918407, 1.1607155138985432, -0.030913005873041244, -0.5631361967045277, -2.203697583987918, 0.1438673857884247, -0.02602940921115312, 1.2167637774088538, -0.5751881474463547, 0.4755783155709031,\n                           -0.27167342262469774, 0.05482346051981047, 0.9731748128009687, 0.6762066921735885, 1.598110631400287, -0.04747474183436243, -0.08179003670829647, -0.2921869130403052, 0.1464790340291019, -1.1987187506821098);\n\n    mat1x10 w4 = mat1x10(-2.177233718263722, -1.9010100206388543, 0.5494688788820955, 0.8168450813201754, 0.9361644411916604, 4.629773010702745, -1.6864751424887752, -1.8815771905221081, 2.5885685628056523, -1.612274192626207);\n\n    // Bias matrices (really column vectors)\n    mat10x1 b1 = mat10x1(-0.5321156028370169,\n                         1.9280505695263235,\n                         -0.7809458091944289,\n                         -0.6405181110978984,\n                         0.9661568738528844,\n                         0.21171734903751635,\n                         -0.7700648811812087,\n                         0.5282999314591963,\n                         0.2145147184590241,\n                         -0.27443820308791467);\n\n    mat10x1 b2 = mat10x1(0.47902447005940907,\n                         -0.03758760533029638,\n                         0.6608977808710413,\n                         -0.6832595918867784,\n                         -0.1913160428473142,\n                         0.063409386651786,\n                         0.7631860226239787,\n                         -0.306802137235167,\n                         -0.7467216920805032,\n                         0.4599784182699998);\n\n    mat10x1 b3 = mat10x1(-0.5355010564587633,\n                         -0.20151652712700624,\n                         0.20916348246743377,\n                         0.688588730890243,\n                         -0.45095366133021497,\n                         0.035847439577213536,\n                         0.2933532099557393,\n                         -0.30893823176433294,\n                         0.2479200535333875,\n                         -0.8689063226666305);\n\n    mat1x1 b4 = mat1x1(-0.22213313858704573);\n\n    // Repeatedly calculate new value of x: Xn+1 = σ(dot(Wn, Xn) + Bn)\n    // Propagating the results through the layers\n    mat10x1 l1 = sigmoid_mat10x1(add_mat10x1_mat10x1(mul_mat10x2_mat2x1(w1, x), b1));\n    mat10x1 l2 = sigmoid_mat10x1(add_mat10x1_mat10x1(mul_mat10x10_mat10x1(w2, l1), b2));\n    mat10x1 l3 = sigmoid_mat10x1(add_mat10x1_mat10x1(mul_mat10x10_mat10x1(w3, l2), b3));\n    mat1x1 l4 = sigmoid_mat1x1(add_mat1x1_mat1x1(mul_mat1x10_mat10x1(w4, l3), b4));\n\n    return l4;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}