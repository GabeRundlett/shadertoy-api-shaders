{
    "Shader": {
        "info": {
            "date": "1638555304",
            "description": "RayMarching-Sphere",
            "flags": 0,
            "hasliked": 0,
            "id": "ftV3Dd",
            "likes": 11,
            "name": "RayMarching-Sphere",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "celns",
            "viewed": 289
        },
        "renderpass": [
            {
                "code": "vec3 worldCenter = vec3(0.0);\n\nfloat SDFSphere(vec3 point)\n{\n    float radius = 3.0;\n    return length(point-worldCenter) - radius;\n}\n\nfloat SDFPlane(vec3 point)\n{\n    float PlaneHeight = -3.0;\n    return point.y - PlaneHeight;\n}\n\n\nfloat SDFScene(vec3 point)\n{\n    float distSphere = SDFSphere(point);\n    float distPlane = SDFPlane(point);\n    return min(distSphere, distPlane);\n}\n\n\nfloat RayMarching(vec3 eye, vec3 raydirection)\n{\n    float depth = 0.;\n    int epoch = 100;\n    \n    float MaxDist = 100.;\n    float epsilon = 0.00001;\n    \n    for (int i=0; i < epoch; i++)\n    {\n        vec3 point = eye + raydirection * depth;\n        float dist = SDFScene(point);\n \n        depth = depth + dist;\n        if(depth > MaxDist || depth < epsilon)\n            break;  \n    }\n    return depth;\n}\n\n\nvec3 GetNormal(vec3 point)\n{\n    float delta = 0.00001;\n    return normalize(vec3(\n                        SDFScene(vec3(point.x + delta, point.y, point.z))\n                        -SDFScene(vec3(point.x - delta, point.y, point.z)),\n                        SDFScene(vec3(point.x, point.y + delta, point.z))\n                        -SDFScene(vec3(point.x, point.y - delta, point.z)),\n                        SDFScene(vec3(point.x, point.y, point.z + delta))\n                        -SDFScene(vec3(point.x, point.y, point.z - delta))\n                    ));\n\n}\n\n\n\nfloat FakeSoftShadow(float result, vec3 LightPos,vec3 point,vec3 normal)\n{\n    vec3 shadowOffset = normal * 0.2 ;\n    //float result = 0.2;\n    int epoch = 10;\n    \n    float delta = result/float(epoch);\n    float lightOffset = 0.2;\n    \n    for(int i = 0; i<epoch; i++)\n    {\n        vec3 tmp = LightPos +vec3(0,0,i)*lightOffset;\n        if(RayMarching(point + shadowOffset,normalize(tmp-point)) < length(tmp-point))\n        {\n            result -= delta;\n        }\n    }\n    return result;\n}\n\n\nfloat Shading(vec3 LightPos, vec3 point, vec3 eye)\n{\n\n    vec3 L = normalize(LightPos - point);\n    vec3 V = normalize(eye - point);\n    vec3 N = GetNormal(point);\n    vec3 H = normalize(L+V);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float Ambient = 0.1;\n       \n    float result = max(dot(L,N),0.0)*0.5 + pow(max(dot(H,N),0.0),20.)*0.9;\n    result = FakeSoftShadow(result, LightPos, point,N);\n    return result+Ambient;\n        \n}\n\n\nvec3 Rendering(vec2 uv)\n{\n    vec3 eye = vec3(2.0,0.0,10.0);\n    vec3 raydirection = normalize(vec3(uv.x,uv.y,-1.0));\n    \n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col = vec3(0.0);\n    \n    float depth = RayMarching(eye, raydirection);\n    //depth /= 10.;\n    vec3 point =  eye + raydirection * depth;\n    \n    vec3 LightPos = vec3(7.*cos(iTime),6.,sin(iTime)+6.);\n    float value = Shading(LightPos, point, eye);\n    vec3 LightColor = vec3(0.6,0.3,0.1);\n    col = value*LightColor;\n    \n    \n    vec3 LightPos2 = vec3(2.*sin(iTime),5.,2.*cos(iTime)+6.);\n    float value2 = Shading(LightPos2, point, eye);\n    vec3 LightColor2 = vec3(0.3,0.6,0.6);\n    col += value2*LightColor2;\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy) /iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Output to screen\n    fragColor = vec4(Rendering(uv),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}