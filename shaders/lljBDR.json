{
    "Shader": {
        "info": {
            "date": "1515412254",
            "description": "Balls in a sphere with a varying refractive index",
            "flags": 32,
            "hasliked": 0,
            "id": "lljBDR",
            "likes": 9,
            "name": "Refracted Colliding Balls",
            "published": 3,
            "tags": [
                "collision",
                "refraction",
                "dynamics",
                "optics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 713
        },
        "renderpass": [
            {
                "code": "// \"Refracted Colliding Balls\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec3 HsvToRgb (vec3 c);\nvec4 Loadv4 (int idVar);\n\nconst int nBall = 343;\nvec3 vnBall, vnSph, ltDir;\nvec2 qBlk;\nfloat dstFar, tCur, spRad;\nint idBall;\nconst float pi = 3.14159;\n\nfloat BallHit (vec3 ro, vec3 rd)\n{\n  vec3 v;\n  float b, d, w, dMin, sz;\n  dMin = dstFar;\n  sz = 0.55;\n  idBall = -1;\n  for (int n = 0; n < nBall; n ++) {\n    v = ro - Loadv4 (2 * n).xyz;\n    b = dot (rd, v);\n    w = b * b + sz * sz - dot (v, v);\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) {\n        dMin = d;\n        idBall = n;\n      }\n    }\n  }\n  if (idBall >= 0) vnBall = (ro - Loadv4 (2 * idBall).xyz + dMin * rd) / sz;\n  return dMin;\n}\n\nfloat SphHit (vec3 ro, vec3 rd)\n{\n  float b, d, w;\n  b = dot (rd, ro);\n  w = b * b + spRad * spRad - dot (ro, ro);\n  d = dstFar;\n  if (w >= 0.) {\n    d = - b - sqrt (w);\n    vnSph = (ro + d * rd) / spRad;\n  }\n  return d;\n}\n\nvoid BlkHit (vec3 ro, vec3 rd)\n{\n  vec3 v, tm, tp, u, qnBlk;\n  float dn, df, bSize;\n  bSize = 10. * dstFar;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  if (df > 0. && dn < df) {\n    qnBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n    u = (v + dn) * rd;\n    qBlk = vec2 (dot (u.zxy, qnBlk), dot (u.yzx, qnBlk)) / bSize;\n  }\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  return vec3 (0.5, 0.5, 0.7) * (0.3 + 0.1 * rd.y);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float dstBall, dstExtSph, c, rIndx;\n  dstExtSph = SphHit (ro, rd);\n  col = BgCol (ro, rd);\n  if (dstExtSph < dstFar) {\n    ro += dstExtSph * rd;\n    rIndx = 1. - 0.9 * SmoothBump (0.25, 0.75, 0.15, mod (0.05 * tCur, 1.));\n    rd = refract (rd, vnSph, rIndx);\n    dstBall = BallHit (ro, rd);\n    if (dstBall < dstFar) {\n      c = float (idBall) / float (nBall);\n      col = HsvToRgb (vec3 (mod (c, 1.), 1. - 0.4 * mod (c, 2.), 0.8)) *\n         (0.3 + 0.7 * max (dot (vnBall, ltDir), 0.)) +\n         0.2 * pow (max (dot (normalize (ltDir - rd), vnBall), 0.), 64.);\n    }\n    col += 0.05 + 0.05 * max (dot (vnSph, ltDir), 0.) +\n       0.2 * pow (max (dot (normalize (ltDir - rd), vnSph), 0.), 64.);\n    rd = reflect (rd, vnSph);\n    BlkHit (ro, rd);\n    qBlk = step (0.1, mod (8. * qBlk + 0.1/2., 1.));\n    col = mix (col, BgCol (ro, rd) * (0.6 + 0.4 * qBlk.x * qBlk.y), pow (1. - abs (dot (rd, vnSph)), 3.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 rd, ro;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  dstFar = 200.;\n  spRad = Loadv4 (2 * nBall).y;\n  az = 0.25 * pi;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 4.5));\n  ro = vuMat * vec3 (0., 0., -5. * spRad);\n  ltDir = vuMat * normalize (vec3 (1., 2., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Refracted Colliding Balls\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nBall = 343;\nfloat spRad;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvoid Step (int mId, out vec3 rm, out vec3 vm)\n{\n  vec3 rmN, dr, am;\n  float fOvlap, rSep, dt;\n  fOvlap = 50.;\n  rm = Loadv4 (2 * mId).xyz;\n  vm = Loadv4 (2 * mId + 1).xyz;\n  am = vec3 (0.);\n  for (int n = 0; n < nBall; n ++) {\n    if (n != mId) {\n      rmN = Loadv4 (2 * n).xyz;\n      dr = rm - rmN;\n      rSep = length (dr);\n      if (rSep < 1.) am += fOvlap * (1. - rSep) * normalize (dr);\n    }\n  }\n  dr = rm - spRad * normalize (rm);\n  rSep = length (dr);\n  if (rSep < 1.) am += fOvlap * (1. - rSep) * normalize (dr);\n  dt = 0.02;\n  vm += dt * am;\n  rm += dt * vm;\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm)\n{\n  vec3 e;\n  float mIdf, nbEdge;\n  nbEdge = floor (pow (float (nBall), 1./3.) + 0.001);\n  mIdf = float (mId);\n  rm = 1.2 * (floor (vec3 (mod (mIdf, nbEdge), mod (mIdf, nbEdge * nbEdge) / nbEdge,\n      mIdf / (nbEdge * nbEdge))) - 0.5 * (nbEdge - 1.));\n  vm = 2. * normalize (vec3 (Hashff (mIdf), Hashff (mIdf), Hashff (mIdf)) - 0.5);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat;\n  vec3 rm, vm;\n  vec2 iFrag;\n  float nbEdge, nStep;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 2 * nBall + 1) discard;\n  mId = (pxId < 2 * nBall) ? mId = pxId / 2 : -1;\n  nbEdge = floor (pow (float (nBall), 1./3.) + 0.001);\n  if (iFrame <= 5) {\n    doInit = true;\n    nStep = 0.;\n    spRad = 1.2 * nbEdge + 1.;\n  } else {\n    doInit = false;\n    stDat = Loadv4 (2 * nBall);\n    nStep = stDat.x;\n    spRad = stDat.y;\n    ++ nStep;\n  }\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm);\n    else Step (mId, rm, vm);\n    if      (pxId == 2 * mId) stDat = vec4 (rm, 0.);\n    else if (pxId == 2 * mId + 1) stDat = vec4 (vm, 0.);\n  } else stDat = vec4 (nStep, spRad, 0., 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}