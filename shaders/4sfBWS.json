{
    "Shader": {
        "info": {
            "date": "1497675415",
            "description": "Another extension from this: https://www.shadertoy.com/view/llt3D2, allow you to draw on texture surface",
            "flags": 34,
            "hasliked": 0,
            "id": "4sfBWS",
            "likes": 3,
            "name": "Pixel Draw",
            "published": 3,
            "tags": [
                "2d",
                "pixel",
                "draw",
                "pixelart",
                "pixelization"
            ],
            "usePreview": 0,
            "username": "nguyenhuy3588",
            "viewed": 1090
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 color = texture(iChannel0, uv);\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n \n    if(iFrame < 5){\n    \tfragColor = texture(iChannel2, uv);\n        return;\n    }\n    \n    vec2 uvM = iMouse.xy / iResolution.xy;\n    \n    vec4 color = texture(iChannel2, uv);\n    vec4 colorA = texture(iChannel1, uv);\n    \n    if(colorA.a == 0.0){\n        vec2 pixelSize = vec2(1.0, 1.0) / vec2(50, 30); //pixelAmount by x and y\n        vec2 pixelId = floor(uv / pixelSize);\n\n        vec2 leftBot = pixelId * pixelSize;\n        vec2 rightBot = vec2((pixelId.x + 1.0) * pixelSize.x, pixelId.y * pixelSize.y);\n        vec2 leftTop = vec2(pixelId.x * pixelSize.x, (pixelId.y + 1.0) * pixelSize.y);\n        vec2 rightTop = (pixelId + 1.0) * pixelSize;\n        vec2 center = (pixelId + 0.5) * pixelSize;\n\n        fragColor = texture(iChannel2, leftBot) * 0.2 + texture(iChannel2, rightBot) * 0.2 \n            + texture(iChannel2, leftTop) * 0.2 + texture(iChannel2, rightTop) * 0.2 \n            + texture(iChannel2, center) * 0.2;\n    }\n    else{\n    \tfragColor = color;\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "bool inside(vec2 root, vec2 checkVal){\n    vec2 offset1 = vec2(10./iResolution.x, 10./iResolution.y);\n    vec2 tl = root + offset1;\n    float diagonalRange = length(tl - root);\n    float distanceP = length(root - checkVal);\n    if(distanceP < diagonalRange){\n    \treturn true;\n    }\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    if(iFrame < 5){\n    \tfragColor = vec4(1.0);\n        return;\n    }\n    \n    if(iMouse.w > 0. || iMouse.z > 0.){\n        vec2 uvM = iMouse.xy / iResolution.xy;\n        if(inside(uv, uvM)){\n            fragColor = vec4(0.5,0.0,0.0,0.0);\n            return;\n        }\n    }\n    \n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}