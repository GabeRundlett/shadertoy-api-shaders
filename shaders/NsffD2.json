{
    "Shader": {
        "info": {
            "date": "1645386265",
            "description": "License CC0: Spiral mapping in 3D\nThis weekend has been messing with spiral mapping.\nThis is more of tech shader as I wanted to see if spiral mapping works in raymarcher\n",
            "flags": 0,
            "hasliked": 0,
            "id": "NsffD2",
            "likes": 14,
            "name": "Spiral mapping in 3D",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "spiral"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 342
        },
        "renderpass": [
            {
                "code": "// License CC0: Spiral mapping in 3D\n// This weekend has been messing with spiral mapping.\n// This is more of tech shader as I wanted to see if \n// the spiral mapping would work ok a raymarcher or \n// if the discontinuity between the spiral arms would \n// cause too much artifacts\n// By applying a bit of backtracking it looks usable for my\n// purposes\n\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define TIME            iTime\n#define RESOLUTION      iResolution\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PCOS(x)         (0.5+0.5*cos(x))\n\n#define TOLERANCE       0.0001\n#define MAX_RAY_LENGTH  10.0\n#define MAX_RAY_MARCHES 60\n#define NORM_OFF        0.0001\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nfloat sRGB(float t) { return mix(1.055*pow(t, 1./2.4) - 0.055, 12.92*t, step(t, 0.0031308)); }\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(in vec3 c) { return vec3 (sRGB(c.x), sRGB(c.y), sRGB(c.z)); }\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// From: https://stackoverflow.com/a/17897228/418488\nvec3 hsv2rgb(vec3 c) {\n  const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/smin\nfloat pmin(float a, float b, float k) {\n  float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n  return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/spherefunctions\nfloat sphered(vec3 ro, vec3 rd, vec4 sph, float dbuffer) {\n    float ndbuffer = dbuffer/sph.w;\n    vec3  rc = (ro - sph.xyz)/sph.w;\n  \n    float b = dot(rd,rc);\n    float c = dot(rc,rc) - 1.0;\n    float h = b*b - c;\n    if( h<0.0 ) return 0.0;\n    h = sqrt( h );\n    float t1 = -b - h;\n    float t2 = -b + h;\n\n    if( t2<0.0 || t1>ndbuffer ) return 0.0;\n    t1 = max( t1, 0.0 );\n    t2 = min( t2, ndbuffer );\n\n    float i1 = -(c*t1 + b*t1*t1 + t1*t1*t1/3.0);\n    float i2 = -(c*t2 + b*t2*t2 + t2*t2*t2/3.0);\n    return (i2-i1)*(3.0/4.0);\n}\n\nfloat sphere(vec3 p, float r) {\n  return length(p) - r;\n}\n\nfloat sphere4(vec3 p, float r) {\n  p *= p;\n  return pow(dot(p, p), 0.25) - r;\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\nfloat spiralLength(float b, float a) {\n  // https://en.wikipedia.org/wiki/Archimedean_spiral\n  return 0.5*b*(a*sqrt(1.0+a*a)+log(a+sqrt(1.0+a*a)));\n}\n\nvoid spiralMod(inout vec2 p, float a) {\n  vec2 op     = p;\n  float b     = a/TAU;\n  float  rr   = length(op);\n  float  aa   = atan(op.y, op.x);\n  rr         -= aa*b;\n  float nn    = mod1(rr, a);\n  float sa    = aa + TAU*nn;\n  float sl    = spiralLength(b, sa);\n  p           = vec2(sl, rr);\n}\n\nfloat df(vec3 p) {\n  vec3 p0 = p;\n  float d0 = sphere4(p0, 0.6);\n  d0 = abs(d0) - 0.025;  \n\n  vec3 p1 = p;\n  float d1 = p1.y;\n  \n  vec3 p2 = p;\n  const float a = 0.5;\n  spiralMod(p2.xz, a);\n  p2.x += 0.1*TIME;\n  float nsp_ = mod1(p2.x, a);\n  vec3 p3 = p2;\n  float h2 = hash(nsp_);\n  float t2 = TIME+h2;\n  float dt = mix(0.25, 0.66, h2);\n  mod1(t2, 2.0*dt);\n  float sr = mix(0.125, 0.25, fract(1336.0*h2));\n  p2.y -= sr*a+0.2*(dt*dt-t2*t2);\n  float d2 = sphere(p2, sr*a);\n  \n  float bd = a*sr*1.5;\n  p3.y -= bd;\n  float d3 = sphere4(p3, bd);\n  \n  float d = d1;\n  d0 = pmax(d0, -(d3 ), 0.1*a);\n  d = pmin(d, d0, 0.1);\n  d = min(d, d2);\n//  d = min(d, d3);\n\n  return d;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, out int iter) {\n  float t = 0.0;\n  int i = 0;\n  float sf = 1.0;\n  float pd = 0.0;\n  float pt = t;\n  for (i = 0; i < MAX_RAY_MARCHES; i++) {\n    if (t > MAX_RAY_LENGTH) {\n      t = MAX_RAY_LENGTH;    \n      break;\n    }\n    float d = df(ro + rd*t);\n    if (d < TOLERANCE) {\n      // Because of distance field is discontinous when crossing the spiral arms\n      // Let's back track when we hit the surface and step a bit shorter\n      if (sf >= 0.25) {\n        t = pt;\n        d = pd;\n        sf *= 0.5;\n      } else {\n        break;\n      }\n    }\n    pt =  t;\n    pd =  d;\n    t  += sf*d;\n  }\n  iter = i;\n  return t;\n}\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nfloat softShadow(vec3 pos, vec3 ld, float ll, float mint, float k) {\n  const float minShadow = 0.25;\n  float res = 1.0;\n  float t = mint;\n  for (int i=0; i<24; i++) {\n    float d = df(pos + ld*t);\n    res = min(res, k*d/t);\n    if (ll <= t) break;\n    if(res <= minShadow) break;\n    t += max(mint*0.2, d);\n  }\n  return clamp(res,minShadow,1.0);\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n  vec3 lightPos = vec3(1.0,1.2,1.0);\n  float alpha   = 0.05*TIME;\n  \n  const vec3 skyCol = vec3(0.0);\n\n  int iter    = 0;\n  float t     = rayMarch(ro, rd, iter);\n\n  float sr    = 0.6;\n  float sd    = sphered(ro, rd, vec4(vec3(0.0), sr), t);\n\n  vec3 gcol   = sd*sd*1.5*vec3(2.0, 1.0, 0.75)*1.0;\n\n  if (t >= MAX_RAY_LENGTH) {\n    return vec3(0.0);\n  }\n\n  vec3 pos    = ro + t*rd;\n  vec3 nor    = normal(pos);\n  vec3 refl   = reflect(rd, nor);\n  float ifade = exp(-0.5*max(t-2.0, 0.0));\n  float h     = fract(-1.0*length(pos)+0.1);\n  float s     = 0.25;\n  float v     = tanh_approx(0.4/(1.0+40.0*sd));\n  vec3 color  = hsv2rgb(vec3(h, s, v));\n\n  vec3 lv   = lightPos - pos;\n  float ll2 = dot(lv, lv);\n  float ll  = sqrt(ll2);\n  vec3 ld   = lv / ll;\n  float sha = softShadow(pos, ld, ll*0.95, 0.05, 10.0);\n\n  float dm  = 8.0/ll2;\n  float dif = pow(max(dot(nor,ld),0.0),2.0)*dm;  \n  float spe = pow(max(dot(refl, ld), 0.), 30.);\n  float l   = mix(0.2, 1.0, dif*sha);\n  \n  vec3 col = l*color*ifade + 2.0*spe*sha*sqrt(ifade);\n  return gcol+col;\n}\n\nvec3 effect3d(vec2 p, vec2 q) {\n  float a   = TIME*TAU/20.0-PI*0.5;\n  float h   = smoothstep(0.5, 1.0, 0.5-0.5*cos(a));\n  vec3 cam  = vec3(1.5, .66+2.0*h, 0.0);\n  cam.xz    *= ROT(a);\n  vec3 la   = vec3(0.0);\n  vec3 dcam = normalize(la - cam);\n  vec3 ddcam= vec3(0.0);\n\n  vec3 ro = cam;\n  vec3 ww = normalize(dcam);\n  vec3 uu = normalize(cross(vec3(0.0,1.0,0.0), ww));\n  vec3 vv = cross(ww,uu);\n  vec3 rd = normalize(p.x*uu + p.y*vv + 2.25*ww );\n\n  return render(ro, rd);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/iResolution.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect3d(p, q);\n  col = sRGB(col);\n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}