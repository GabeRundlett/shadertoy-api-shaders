{
    "Shader": {
        "info": {
            "date": "1659476281",
            "description": "Experiment while away with family - cleaned up and presented to you.",
            "flags": 0,
            "hasliked": 0,
            "id": "7dGfDD",
            "likes": 33,
            "name": "Fract City v1",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 805
        },
        "renderpass": [
            {
                "code": "/** \n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n   \n    Frac City\n    08/02/22 | byt3_m3chanic\n\n    An experiment while away with family. Trying to stay lean and simple,\n    mostly doing some folding around a vector and making a simple box.\n    Everything else based off a grid and each spaces hash value. \n    Using @Shane's multi-tap system to allow for the packed fractal forms. \n    --> https://www.shadertoy.com/view/WtffDS\n\n    mouseable\n*/\n\n#define R iResolution\n#define M iMouse\n#define T iTime\n\n#define PI 3.141592653\n#define PI2 6.28318530\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define H21(a) fract(sin(dot(a,vec2(21.23,41.32)))*43758.5453)\n#define N(p,e) vec3(map(p-e.xyy),map(p-e.yxy),map(p-e.yyx))\n\nfloat lsp(float begin, float end, float t) { return clamp((t - begin) / (end - begin), 0.0, 1.0); }\n\nfloat box( vec3 p, vec3 b ) {\n    vec3 q = abs(p)-b;\n    return length(max(q,0.))+min(max(q.x,max(q.y,q.z)),0.);\n}\n\nfloat box( vec2 p, vec2 b ) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.)) + min(max(d.x,d.y),0.);\n}\n\nfloat thrs=.15,xln,tm,tmod,ga1,ga2,ga3,ga4;\nfloat mat,hash,smat,shash;\nvec2 gid,sid;\nvec3 hp,hitPoint;\n\nconst float scale = 2./.95;\nconst float scale_h = scale*.5;\nconst vec2 s = vec2(scale)*2.;\nconst vec2 pos = vec2(.5,-.5);\nconst vec2[4] ps4 = vec2[4](pos.yx,pos.xx,pos.xy,pos.yy);\n\nfloat map(vec3 p3) {\n    float r = 1e5;\n\n    p3.x-= T*3.5;\n    p3.y+= .6*sin(p3.x*.25+T*1.65);\n\n    vec2 p,ip,id=vec2(0),ct=vec2(0);\n  \n    for(int i =0; i<4; i++){\n        ct = ps4[i]/2. - ps4[0]/2.;\n        p  = p3.xz - ct*s;\n        ip = floor(p/s)+.5;\n        p -= (ip)*s;\n        vec2 idi = (ip+ct)*s;\n\n        float hs = H21(idi),\n             shs = hs;\n        \n        hs=floor(hs*9.)*.25;\n\n        vec3 q = vec3(p.x,p3.y+2.-hs,p.y);\n\n        if(shs>.75) q.x=-q.x;\n        if(shs>.5) q.y=-q.y;\n        \n        if (q.x + q.y<0.) q.xy = -q.yx;\n        if (q.x + q.z<0.) q.xz = -q.zx;\n        if (q.y + q.z<0.) q.zy = -q.yz;\n    \n        q = abs(q);\n        float k = (1.5 - .5)*2.;\n        if (q.x < q.y) q.xy = q.yx; q.x = -q.x;\n        if (q.x > q.y) q.xy = q.yx; q.x = -q.x;\n        if (q.x < q.z) q.xz = q.zx; q.x = -q.x;\n        if (q.x > q.z) q.xz = q.zx; q.x = -q.x;\n        q.xyz = q.xyz*1.15 - k + 1.25;\n        \n        q.yz=abs(q.yz)-.95;\n   \n        vec2 bz = vec2(.52,.1+hs),\n             bx = vec2(2.*bz.x+.01,.5+hs);\n        \n        float d = box(q,bz.xyx);\n        if(d<r && fract(shs*33.72)>thrs) {\n            r = d;\n            sid=idi;\n            shash=hs;\n            hitPoint=q;\n            smat = 2.;\n        }\n\n        \n    }\n\n    float f = p3.y+3.;\n    if(f<r) {\n        r = f;\n        sid=vec2(15);\n        shash=.0;\n        hitPoint=p3;\n        smat = 1.;\n    }\n\n    return r;\n}\n\nvoid mainImage( out vec4 O, in vec2 F )\n{\n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n             \n    vec3 C = vec3(0);\n    vec3 p  = vec3(0),\n         ro = vec3(0,0,7.25+3.25*sin(T*.09)),\n         rd = normalize(vec3(uv,-1));\n\n    float ttt = T*.5;\n    \n    tmod = mod(ttt, 10.);\n    tm   = mod(ttt, 20.);\n    \n    float t1 = lsp(3.,  5., tmod);\n    float t2 = lsp(8., 10., tmod);\n    \n    ga1 = ((t1-t2)*2.2)-1.1;\n\n    float px = tm<10.? .78 : 1.57;\n    float py = tm<10.? .78 : .0;\n\n    vec3 c1 = tm<10.? vec3(.59,.92,.82) : vec3(.92,.78,.59);\n    vec3 c2 = tm<10.? vec3(.23,.44,.38) : vec3(.52,.38,.17);\n    \n    xln = ga1-(.025*sin(uv.y*25.+T*5.));\n    \n    if(uv.x>xln) { \n    \n        px = tm>5.&&tm<15.?.42:1.15;\n        py = tm>5.&&tm<15.?-.68:2.45;\n        \n        c1 = tm>5.&&tm<15.? vec3(.58,.68,.92) : vec3(.88,.59,.87);\n        c2 = tm>5.&&tm<15.? vec3(.33,.52,.97) : vec3(.44,.23,.40) ;\n    }\n\n    float x = M.xy==vec2(0)||M.z<0. ? px : px-(M.y/R.y*.25-.125)*PI;\n    float y = M.xy==vec2(0)||M.z<0. ? py : py-(M.x/R.x* 2.-1.)*PI;\n\n    mat2 rx = rot(x), ry = rot(y);\n\n    ro.yz*=rx; ro.xz*=ry; \n    rd.yz*=rx; rd.xz*=ry;\n\n    float d=0.;\n    for(int i=0;i<110;i++){\n        p = ro+rd*d;\n        float t = map(p);\n        d += i<42?t*.25:t;\n        if(d<t*1e-3||d>25.) break;\n    }\n    \n    mat=smat;\n    hash=shash;\n    gid=sid;\n    hp=hitPoint;\n    \n    if(d<25.){\n        float t = map(p),\n             sd = 1.,\n              z = .01;\n\n        vec2 e = vec2(d*1e-3,0);\n        vec3 l = normalize(vec3(-5,9,-5)-p),\n             n = t - N(p,e);\n             n = normalize(n);\n\n        for(float z=.01;z<18.;) {\n            float h = map(p+l*z);\n            if(h<1e-3) {sd=0.;break;}\n            sd = min(sd, 18.*h/z);\n            z+=h;\n            if(sd<1e-3) break;\n        }\n\n        float diff = clamp(dot(n,l),.1,.8);\n        diff=mix(diff,diff*sd,.75);\n\n        vec3 h = vec3(.5);\n        float px = 4./R.x;\n\n        if(mat == 1.) {\n            h = vec3(.1);\n\n            vec2 uv = fract(hp.xz/scale);\n\n            float d = min(\n                length(abs(uv.x-.5))-.1,\n                length(abs(uv.y-.5))-.1\n                );\n\n            float b=smoothstep(px,-px,abs(d)-.015);\n            d=smoothstep(px,-px,d);\n\n            h=mix(h,c2*.25,d);  \n            h=mix(h,c1,b);  \n        }\n\n        if(mat == 2.) {\n            float ss = floor(6./1.745);\n\n            vec3 ff = floor(hp*ss)+gid.xyx,\n                 vv = fract(hp*ss)-.5;\n\n            float b = box(vv,vec3(.4))-.001;\n            b=smoothstep(px,-px,b);\n\n            h = vec3(.5);\n\n            float hx = H21(ff.xy),\n                  hy = H21(ff.yz),\n                  hz = H21(ff.xz),\n                  hs = (hx+hy+hz)/3.;\n                  \n            h = (hs>.8||hs<.2)? mix(h,c1,b):mix(h,vec3(hs),b);\n            h = h*h*h;\n\n        }\n\n        C = h*diff;\n    }\n    \n    float ux = (uv.y+.5)*.7;\n    \n    vec3 fog = mix(vec3(.01),c2,ux);\n    C = mix(C,fog,1.-exp(-.0005*d*d*d));\n    if(uv.x+.01>xln && uv.x-.01<xln)C=c1;\n    C = pow(C,vec3(.4545));  \n    O = vec4(C,1.);\n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}