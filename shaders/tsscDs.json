{
    "Shader": {
        "info": {
            "date": "1585908235",
            "description": "potato",
            "flags": 0,
            "hasliked": 0,
            "id": "tsscDs",
            "likes": 5,
            "name": "Day 106",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 349
        },
        "renderpass": [
            {
                "code": "#define pi acos(-1.)\n#define tau (2.*pi)\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n\n#define timeStep (1./30.)\n#define motionBlurSteps 100\n\n// USING YX/LUNA'S AWESOME DITHERED MOTION BLUR - https://www.shadertoy.com/view/wsfcWX\n// I modified it to not be framerate dependent like the original.\n\n\nfloat bayer8(ivec2 uv)\n{   \n    uv %= 8;\n\treturn texelFetch(iChannel1,uv,0).r;\n}\n\n// from https://necessarydisorder.wordpress.com/\nfloat ease(float p, float g) {\n    if(p < 0.){\n        return 0.;\n    } else if(p > 1.){\n    \treturn 1.;\n    } else {\n        if (p < 0.5) \n            return 0.5 * pow(2.*p, g);\n        else\n            return 1. - 0.5 * pow(2.*(1. - p), g);\n    }\n}\n\nfloat ease(float p, float power, float jump, float offs, float end) {\n    float j = p;\n    p *= offs;\n    float r = (1.-cos(pi*p))/2.*jump;\n    r = pow(r, power);\n    r = mix(r, 1., pow(smoothstep(0.,1.,j),end));\n\treturn r;\n}\n\nvec3 get(  vec2 uv, float t, inout float edge )\n{\n    \n    float modD = 3.;\n    \n    t *= 1.;\n    t = mod(t, 1.);\n    vec3 col = vec3(0);\n\n    vec2 uvv = uv * 1.9;\n    //uv *= 1. - dot(uvv,uvv)*0.1;\n    \n    uv *= 1.;\n    \n    edge = dFdx(uv.x)*(1. + exp(-length(uv)*30.)*2500.);    \n    float dpp = dot(uv,uv);\n    \n    uv /= dpp;\n    \n    uv.y +=  (floor(t) + ease(fract(t), 3.))*modD*modD + modD*2.;\n    //uv.x += t;\n    \n    vec2 id = floor(mod(uv/modD, modD));\n    uv = mod(uv,modD) - modD*0.5;\n    //uv = sin(uv*22./8./2.);\n\n    \n    float d = length(uv) - modD*0.2;\n    if(id.y < 1. || mod(abs(id.x), 2.) == 1.)\n    \tcol = vec3(d);\n    else \n        col = vec3(10);    \n    //col = vec3\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;  \n    vec3 col = vec3(0.);\n    \n    \n    float e = 0.;\n    for (int i = 0; i < motionBlurSteps  ; ++i) {\n        float subsample = bayer8(ivec2(fragCoord));\n        float time = iTime + ((float(i)+subsample)/float(motionBlurSteps)-.5) * timeStep;\n        float edge;\n        vec3 d = get(uv,time, edge);\n        col += smoothstep(-edge,edge,-d);\n        e += exp(-abs(d.x)*40.);\n    }\n    col/=float(motionBlurSteps);\n    e/=float(motionBlurSteps);\n    \n    col *= 0.999;\n    \n    \n    \n    col *= 1. - exp(-length(uv)*100.)*2.;\n    col *= vec3(2.,0.4,0.1);\n    \n    col.gb -= e;\n    col = clamp(col, 0., 1.);\n    col = mix(col, vec3(0.06,0.1,0.4)*0.02, smoothstep(1.,0.,length(col)*1.));\n    \n    //col *= max((1. + 1.*cos(sin(0.25*tau*iTime)*tau+length(uv)*2.+vec3(4,2.5,1.5)))*1., 0.);\n    //col *= max((1.5 + 1.4*cos(iTime+length(uv)*2.+vec3(1,1.5,1.5)))*1., 0.);\n    \n    \n    \n    \n    col *= 1. - pow(smoothstep(0.,1.,length(uv)*1.),1.)*1.;\n    \n    col = pow(col, vec3(0.454545));\n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}