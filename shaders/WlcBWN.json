{
    "Shader": {
        "info": {
            "date": "1612715294",
            "description": "Neon Sines and trumpet",
            "flags": 8,
            "hasliked": 0,
            "id": "WlcBWN",
            "likes": 5,
            "name": "Neon Sines and trumpet",
            "published": 3,
            "tags": [
                "neonsinesandtrumpet"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 435
        },
        "renderpass": [
            {
                "code": "//modificado por jorgefloresp.\n//referencia\n///https://www.shadertoy.com/view/ls3Xzn\n//Neon sines\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float s3 = 0.5+0.5*sin(iTime+uv.x*3.1415*(sin(iTime)+4.0));\n    float s4 = 0.5+0.25*sin(iTime+uv.x*3.1415*(sin(iTime)*2.0+2.0));\n    \n    \n    float s1 = 0.5+0.5*sin(iTime+uv.x*3.1415+20.*(sin(iTime)+4.0));\n    float s2 = 0.5+0.25*sin(iTime+uv.x*3.1415+0.5*(sin(iTime)*2.0+2.0));\n    \n    float r = pow(1.0-sqrt( abs(uv.y-s1)),1.5 );\n    float g = pow(1.0-sqrt( abs(uv.y-s2)),1.5 );\n    float b1 = pow(1.0-sqrt( abs(uv.y-s3+s4)),1.5 );\n    \n    float b = 1.0*(r+g)*b1;\n    \n    \n    const float pi = 3.14159265;\n    vec2 ar = vec2(iResolution.x/iResolution.y, 1);\n    float t=iTime;\n    float c = smoothstep(.0, .2, cos( 4.*t + 8.*pi*length(ar*uv-ar*.5) ) );\n    \n    \n\tfragColor = vec4( r*c,g*c,b*(1.0-c),1 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//por jorge flores p.\n//referencia \n//https://www.shadertoy.com/view/MtBcDR\n//Created by jt in 2017-10-16\n\nconst float trt = 1.0594630943592952645;\nconst float bpm = 140.0;\n\nconst float pi = 3.141592653589793;\nconst float C = 261.63;\n\n\nfloat note2freq(float note)\n{\n    return 440.0 * pow(trt,note);\n}\n\n\n///---------------\nfloat sigmoid(float x)\n{\n    return 1.0 / (1.0 + exp(-x));\n}\n\nfloat smoothed_sawtooth(float d, float x)\n{\n    return (1.0 - 2.0 * acos(d * -cos(x / 2.0)) / pi) * (2.0 *  atan(sin(x / 2.0) / (1.0 - d)) / pi);\n}\n\nfloat trumpet(float t, float f)\n{\n    // Sound starts with sine which turns into (smoothed) sawtooth.\n    return smoothed_sawtooth(0.95 * sigmoid(t * 10.0), f *t);\n}\n\nfloat scale(float n)\n{\n    //return mod(floor(n) * 7.0, 12.0);\n    return mod(floor(n) * 7.0, 40.0);\n}\n\n///---------------\n\n\nvec2 mainSound( int samp, float time )\n{\n    const int tamN=10;\n    float n[tamN];\n    n[0] = 3.0;\n    n[1] = 6.0;\n    n[2] = 2.0;\n    n[3] = 10.;\n    n[4] = 12.;\n    n[5] = 5.0;\n    n[6] = 8.0;\n    n[7] = 2.;\n    n[8] = 1.;\n    n[9] = 2.;\n    \n    \n    float t = time;\n    float tempo = t * (bpm/60.0);\n    float s;\n    float t1 = mod( time * 3., float( tamN) );\n    vec2 lead;\n    float nt;\n    float mi;\n    \n    for( int i = 0; i < tamN; i++ ) \n    {\n        if( float( i ) == floor( t1 ) )\n        {\n    \t\t//s = .125 * sin(6.2831*n[i]*time)*exp(-2.*fract(t1));\n            nt=n[i];\n        }\n     \n    }\n    \n    \n    lead=vec2(  trumpet(t,  note2freq(nt+0.1) )  );\n    lead+=vec2(  trumpet(t,  note2freq(nt-0.1) )  );\n     \n    vec2 hanning = (0.5 - 0.5 * (1.0 - cos(2.0 * pi * lead))) * 2.0;\n    lead*=hanning;\n     \n    vec2 synths =  lead*2.0; \n    synths *= min(mod(tempo,1.0)+0.4,1.0);\n    \n   \n    return  (synths );\n    \n    \n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}