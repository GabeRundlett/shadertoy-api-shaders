{
    "Shader": {
        "info": {
            "date": "1635561215",
            "description": "Hex 2",
            "flags": 0,
            "hasliked": 0,
            "id": "Nlc3Rr",
            "likes": 0,
            "name": "Hex Beat",
            "published": 3,
            "tags": [
                "hex"
            ],
            "usePreview": 0,
            "username": "Parcle",
            "viewed": 55
        },
        "renderpass": [
            {
                "code": "// Special thanks to The Art of Code\n//     - https://www.youtube.com/c/TheArtofCodeIsCool/videos\n//     - https://www.shadertoy.com/user/BigWIngs\n\nfloat sqrt3 = 1.732;\nfloat scale = 10.0;\n\nvec3 colors[4] = vec3[4](\n                vec3(255.0, 218.0, 169.0) * (1.0 / 255.0), // yellow\n                vec3(111.0, 163.0, 169.0) * (1.0 / 255.0), // turqoise (greenish)\n                vec3(95.0, 114.0, 178.0) * (1.0 / 255.0), // blue\n                vec3(96.0, 54.0, 111.0) * (1.0 / 255.0) // purple\n                );\n\nfloat HexDist(vec2 p){\n    p = abs(p);\n    \n    float rightEdge = p.x;\n    float upperRightEdge = dot(p, normalize(vec2(1.0, sqrt3)));\n    return max(rightEdge, upperRightEdge);\n}\n\nvec2 complexMul(vec2 v, vec2 c) {\n    float real = (v.x * c.x) - (v.y * c.y);\n    float imaginary = (v.x * c.y) + (v.y * c.x);\n    return vec2(real, imaginary);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float resXYRatio = iResolution.x / iResolution.y;\n    vec2 uv = ((fragCoord/iResolution.y) - 0.5*vec2(resXYRatio, 1)) * 2.0;\n    vec2 cRotateZoom = vec2(cos(iTime * 0.2), sin(iTime));\n    uv = complexMul(uv, cRotateZoom);\n    uv.x += iTime + 5.0;\n    \n    vec2 uvScaled = uv * scale;\n    vec2 gridScale = vec2(1.0, sqrt3);\n    vec2 a = (mod(uvScaled, gridScale) - 0.5 * gridScale);\n    vec2 b = (mod(uvScaled + 0.5*gridScale, gridScale) - 0.5 * gridScale);\n    \n    vec2 hexUV = dot(a,a) < dot(b,b) ? a : b;\n    vec2 hexIndex = round(uvScaled - hexUV);\n    float breath = (-cos(iTime * 3.0 + ((hexIndex.x + 17.0) * (hexIndex.y - 19.0))) + 1.0) * 0.5;\n    \n    vec3 col;\n    float hexOn = step(0.45 * breath, HexDist(hexUV));\n    uint hexColorIndex = uint((hexIndex.x * 17.0) * (hexIndex.y * 43.0)) % 3u;\n    \n    col.rgb = (1.0 - hexOn) * colors[hexColorIndex];\n    col.rgb += hexOn * colors[3];\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}