{
    "Shader": {
        "info": {
            "date": "1688122614",
            "description": "Another Truchet trip through the hexaprisms",
            "flags": 0,
            "hasliked": 0,
            "id": "cs2cDy",
            "likes": 20,
            "name": "Crystal Canyon",
            "published": 3,
            "tags": [
                "hexagon",
                "truchet",
                "flight"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 323
        },
        "renderpass": [
            {
                "code": "// \"Crystal Canyon\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n// (Bits from \"Canal Ruins 2\", \"Suborbital Flight\", etc)\n\n#define AA  0   // (= 0/1) optional antialiasing\n\n#define VAR_ZERO min (nFrame, 0)\n\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrConCylDf (vec3 p, vec2 cs, float r, float h);\nfloat PrAnConCylDf (vec3 p, vec2 cs, float r, float w, float h);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat HexEdgeDist (vec2 p);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Ssign (float x);\nvec2 Ssign (vec2 p);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat BumpFbm3 (vec3 p);\nfloat Hashfv2 (vec2 p);\nfloat Hashfv3 (vec3 p);\nfloat Fbm2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define PLEN 17\n\nmat3 flyerMat;\nvec4 cPath[PLEN];\nvec3 qHit, sunDir, cHit, qnHit, flyerPos;\nvec2 cIdB, cMidB;\nfloat tCur, dstFar, tEnd[PLEN + 1], hgSizeB, vgSize, tLen, cDir, cType, szFac;\nfloat flRad, flLen;\nint nFrame, idObj;\nconst int idFus = 1, idWng = 2, idEng = 3;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat Ddot (vec2 p)\n{\n  return dot (p, p);\n}\n\nvec3 TruchSDist (vec2 p)\n{\n  vec2 pc, pc1, pc2, dp;\n  float d, d1, d2, cxy, rc, ac, s, ss;\n  bool ct;\n  ct = (cType == 2. || cType == 4.);\n  if (ct) {\n    pc1 = - vec2 (0., cDir);\n    pc2 = vec2 (sqrt3/2. * Ssign (p.x), 0.5 * cDir);\n    d1 = Ddot (p - pc1);\n    d2 = Ddot (p - pc2);\n    d = min (d1, d2);\n    pc = (d == d1) ? pc1 : pc2;\n    rc = 0.5;\n    d = abs (sqrt (d) - rc);\n  } else {\n    if (cDir != 0.) p = 0.5 * vec2 (p.x - cDir * sqrt3 * p.y, cDir * sqrt3 * p.x + p.y);\n    pc1 = vec2 (sqrt3/2. * Ssign (p.x), 0.);\n    pc2 = vec2 (sqrt3 * Ssign (p.x), 0.);\n    d1 = sqrt (Ddot (p - pc1));\n    d2 = abs (sqrt (Ddot (p - pc2)) - 1.5);\n    d = min (d1, d2);\n    pc = (d == d1) ? pc1 : pc2;\n    rc = (d == d1) ? 0.: 1.5;\n  }\n  dp = p - pc;\n  cxy = cIdB.x - cIdB.y;\n  s = (ct && cxy < 0. || ! ct && abs (cxy - 2.) == 1.) ? -1. : 1.;\n  ac = (0.5 - atan (dp.y, - dp.x) / (2. * pi)) * s;\n  if (! ct && abs (cxy - 2.) <= 1.) ac += 1./6.;\n  ss = Ssign (length (dp) - rc);\n  return vec3 (d * ss, rc * ss * s, ac);\n}\n\nvoid SetPath ()\n{\n  float ts, tl;\n  ts = 1.;\n  tl = 1.5;\n  cPath[ 0] = vec4 (0., 0., -1./6., tl);\n  cPath[ 1] = vec4 (1., 0., 1./3., - ts);\n  cPath[ 2] = vec4 (0., 1., 5./6., tl);\n  cPath[ 3] = vec4 (-1., 1., -1./3., ts);\n  cPath[ 4] = vec4 (-1., 2., 1., ts);\n  cPath[ 5] = vec4 (0., 1., - 1./6., tl);\n  cPath[ 6] = vec4 (1., 1., 1./6., tl);\n  cPath[ 7] = vec4 (1., 2., 1., ts);\n  cPath[ 8] = vec4 (2., 1., 1./2., - tl);\n  cPath[ 9] = vec4 (2., 0., -1./2., tl);\n  cPath[10] = vec4 (3., -1., -1./6., tl);\n  cPath[11] = vec4 (4., -1., 1./3., - ts);\n  cPath[12] = vec4 (3., 0., -1./2., - tl);\n  cPath[13] = vec4 (3., 1., 1./2., tl);\n  cPath[14] = vec4 (2., 2., 5./6., tl);\n  cPath[15] = vec4 (1., 2., -1./3., ts);\n  cPath[16] = vec4 (1., 3., 1., ts);\n  tEnd[0] = 0.;\n  for (int k = 0; k < PLEN; k ++) tEnd[k + 1] = tEnd[k] + abs (cPath[k].w);\n  tLen = tEnd[PLEN];\n}\n\nvec2 EvalPPos (float t)\n{\n  vec4 cp;\n  vec2 tp, vd;\n  float tt, r, a, dc;\n  t /= 3.;\n  tp = floor (t / tLen) * vec2 (2.);\n  t = mod (t, tLen);\n  for (int k = 0; k < PLEN; k ++) {\n    if (t >= tEnd[k] && t < tEnd[k + 1]) {\n      cp = cPath[k];\n      tt = 2. * (t - tEnd[k]) / (tEnd[k + 1] - tEnd[k]) - 1.;\n      break;\n    }\n  }\n  tp += cp.xy;\n  if (abs (cp.w) == 1.5) {\n    r = 1.5;\n    dc = sqrt3;\n    a = pi / 6.;\n    tt *= Ssign (cp.w);\n  } else {\n    r = 0.5;\n    dc = 1.;\n    a = - Ssign (cp.w) * pi / 3.;\n  }\n  vd = vec2 (-1., 1.) * sin (pi * cp.z + vec2 (0., 0.5 * pi));\n  return (HexToPix (tp) + dc * vd - r * Rot2Cs (vd, sin (tt * a + vec2 (0.5 * pi, 0.)))) * hgSizeB;\n}\n\nvoid BConf ()\n{\n  float h, cxy;\n  cMidB = HexToPix (cIdB * hgSizeB);\n  h = Hashfv2 (cIdB);\n  if (Hashfv2 (17.11 * cIdB) > 0.4) {\n    cDir = floor (3. * h) - 1.;\n    cType = 3.;\n  } else {\n    cDir = 2. * floor (2. * h) - 1.;\n    cType = 4.;\n  }\n  cxy = cIdB.x - cIdB.y;\n  if (cxy == 0.) cType = 1.;\n  else if (abs (cxy) == 1.) cType = mod (cIdB.x, 2.) + 1.;\n  else if (cxy == -2. || cxy == -3. || cxy == 5.) cType = 2.;\n  else if (cxy == 2. || cxy == 3. || cxy == 4.) cType = 1.;\n  if (cType <= 2.) {\n    if (cType == 1. && (cxy == 1. || cxy == 2. || cxy == 3.)) cDir = 0.;\n    else if (cType == 1. && cxy == 4.) cDir = -1.;\n    else if (cType == 2. && cxy == 5.) cDir = 1.;\n    else cDir = 2. * mod (cIdB.x, 2.) - 1.;\n  }\n}\n\nbool HexCellOcc ()\n{\n  vec2 q;\n  float h;\n  cIdB = PixToHex (cHit.xz / hgSizeB);\n  BConf ();\n  q = (cHit.xz - cMidB) / hgSizeB;\n  h = length (vec2 (hgSizeB * abs (TruchSDist (q).x), cHit.y) *\n      vec2 (0.8 - 0.5 * sin (0.05 * pi * cHit.z), 0.15)) - 7.1;\n  h = min (h, length (vec2 (hgSizeB * HexEdgeDist (q), cHit.y) *\n      vec2 (0.8 - 0.5 * sin (0.05 * pi * cHit.z), 0.15)) - 4.1);\n  h = min (h, 8. + 2. * dot (sin (0.06 * pi * cHit - sin (0.01 * pi * cHit)),\n       vec3 (1.)) - cHit.y);\n  return (h > 0.);\n}\n\nvec2 PixToHexS (vec2 p)\n{\n  vec2 c, r, dr;\n  p.y *= 2./sqrt3;\n  c = p.yx;\n  r = floor (c);\n  r += 2. * fract (0.5 * vec2 (r.x, r.y + step (0.5, fract (0.25 * r.x + 0.25))));\n  dr = c - r;\n  r += step (2., dot (abs (dr), vec2 (sqrt3, 1.))) * Ssign (dr) * vec2 (2., 1.);\n  r.x *= sqrt3/2.;\n  return r;\n}\n\nfloat HexVolRay (vec3 ro, vec3 rd)\n{  // (based on \"\"Canal Ruins 2\")\n  vec3 hv[3], ht, htt, w;\n  vec2 ve;\n  float dHit, ty, sy;\n  if (rd.y == 0.) rd.y = 0.0001;\n  cHit = vec3 (PixToHexS (ro.xz).yx, vgSize * floor (ro.y / vgSize + 0.5)).xzy;\n  hv[0].xy = vec2 (1., 0.);\n  hv[1].xy = vec2 (0.5, sqrt3/2.);\n  hv[2].xy = vec2 (-0.5, sqrt3/2.);\n  for (int k = 0; k < 3; k ++) {\n    hv[k].xy *= Ssign (dot (hv[k].xy, rd.xz));\n    hv[k].z = 1. / dot (hv[k].xy, rd.xz);\n  }\n  sy = Ssign (rd.y);\n  qnHit = vec3 (0.);\n  dHit = dstFar;\n  for (int j = VAR_ZERO; j < 320; j ++) {\n    w = ro - cHit;\n    ht.z = dstFar;\n    for (int k = 0; k < 3; k ++) {\n      htt = vec3 (hv[k].xy, hv[k].z * (1. - dot (hv[k].xy, w.xz)));\n      if (htt.z < ht.z) ht = htt;\n    }\n    ty = (0.5 * sy * vgSize - w.y) / rd.y;\n    if (ht.z < ty) cHit.xz += 2. * ht.xy;\n    else cHit.y += sy * vgSize;\n    if (HexCellOcc ()) {\n      if (ht.z < ty) {\n        dHit = ht.z;\n        qnHit.xy = ht.xy;\n      } else {\n        dHit = ty;\n        qnHit.z = sy;\n      }\n      qnHit = - qnHit.xzy;\n      break;\n    }\n  }\n  return dHit;\n}\n\nfloat HexCellEdge (vec3 p)\n{\n  vec2 dh;\n  float d;\n  dh = p.xz - cHit.xz;\n  if (qnHit.y == 0.) {\n    d = min (abs (length (dh - dot (dh, qnHit.xz) * qnHit.xz) - 1./sqrt3),\n       abs (fract (p.y / vgSize) - 0.5) * vgSize);\n  } else {\n    dh = abs (dh);\n    d = max (dot (vec2 (0.5, sqrt3/2.), dh), dh.x) - 1.;\n  }\n  return d;\n}\n\nvec3 HexPrisCol (vec3 p, float dEdge)\n{\n  vec3 col;\n  vec2 cIdS, c;\n  float b;\n  col = vec3 (1.);\n  col *= 1. - 0.1 * smoothstep (0.01, 0.03, abs (dEdge));\n  if (abs (qnHit.y) < 0.9 && mod (floor (p.y / vgSize + 0.5), 2.) == 0.) col *= 0.9;\n  cIdS = PixToHex (cHit.xz);\n  c = vec2 (1., 0.96);\n  b = mod (dot (mod (2. * cIdS + cIdS.yx, 3.), vec2 (1., 2.)), 3.);\n  col *= (b == 0.) ? c.xyy : ((b == 1.) ? c.yxy : c.xxy);\n  if (qnHit.y > 0.9) col *= 0.7;\n  return col;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, w, s, dy;\n  dMin = dstFar / szFac;\n  p = flyerMat * (p - flyerPos) / szFac;\n  q = p;\n  w = 1.2;\n  dy = 0.;\n  if (q.z < -1.5) {\n    s = (q.z + 1.5) * (q.z + 1.5);\n    w *= 1. - 0.025 * s;\n  } else if (q.z > 2.) {\n    s = (q.z - 2.) * (q.z - 2.);\n    w *= 1. - 0.025 * s;\n    dy = -0.01 * s;\n  }\n  d = max (PrCapsDf (q - vec3 (0., dy, 0.), w, 7.5), - q.z - 6.);\n  DMINQ (idFus);\n  q = p;\n  q.x = abs (q.x);\n  q.yz -= vec2 (1.7, -4.2);\n  d = max (max (- q.z - 1.6, dot (vec2 (q.y, dot (q.xz, sin (0.15 * pi + vec2 (0., 0.5 * pi)))),\n     sin (0.1 * pi + vec2 (0., 0.5 * pi))) - 1.6), q.y - 0.6);\n  d = max (d, - min (abs (PrBox2Df (q.xz - vec2 (2.6, -1.5), vec2 (1., 0.2))),\n     abs (PrBox2Df (q.yz - vec2 (-0.2, -1.5), vec2 (0.5, 0.2)))));\n  d = SmoothMax (d, abs (PrRoundBox2Df (q.xy, vec2 (4., 1.), 0.7)) - 0.04, 0.05);\n  DMINQ (idWng);\n  q = p;\n  q.z += 6.05;\n  d = PrCylDf (q, 0.4, 0.15);\n  q.z += 0.5;\n  d = min (d, PrAnConCylDf (q, sin (0.07 * pi + vec2 (0.5 * pi, 0.)), 0.45, 0.03, 0.35));\n  DMINQ (idEng);\n  return 0.5 * szFac * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += max (h, 0.01);\n    if (sh < 0.05 || d > dstFar) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec3 SkyCol (vec3 rd)\n{\n  rd.y = abs (rd.y);\n  return mix (vec3 (0.3, 0.35, 0.7), vec3 (0.8, 0.8, 0.8),\n     clamp (2. * (Fbm2 (4. * rd.xz / rd.y + 0.1 * tCur) - 0.1) * rd.y, 0., 1.));\n}\n\nvec4 ObjCol ()\n{\n  vec4 col4;\n  vec3 q;\n  float s;\n  col4 = vec4 (0., 1., 0.3, 0.3);\n  if (idObj == idFus) {\n    q = qHit;\n    q.z -= 1.;\n    s = 0.;\n    if (abs (q.z) < 3.6) {\n      q *= 0.6;\n      q.z = fract (q.z) - 0.5;\n      s = max (step (length (q.yz + vec2 (-0.2, 0.)), 0.22), step (0., q.y) *\n         step (length (q.xz), 0.22));\n    }\n    s = max (s, step (SmoothMax (PrRoundBox2Df (vec2 (abs (qHit.x) - 0.55, qHit.z) - vec2 (0., 5.6),\n       vec2 (0.3, 0.6), 0.1), - qHit.y + 0.2, 0.1), 0.));\n    if (s > 0.) col4 = vec4 (0., 0., 0., -2.);\n    if (qHit.z < -5.9) col4 *= 0.5 + 0.5 * smoothstep (0.4, 0.45,\n       mod (16. * (atan (qHit.y, qHit.x) / (2. * pi) + 0.5), 1.));\n    if (qHit.y < 0.) {\n      col4 *= 0.7 + 0.3 * smoothstep (0., 0.02,\n         min (abs (PrBox2Df (vec2 (abs (qHit.x), qHit.z) - vec2 (0.35, -0.5), vec2 (0.35, 1.5))),\n         abs (PrBox2Df (vec2 (abs (qHit.x), qHit.z) - vec2 (0.15, 4.5), vec2 (0.15, 0.4)))) - 0.01);\n    }\n    col4.rgb = mix (col4.rgb, vec3 (0.3, 0.8, 0.8), smoothstep (0., 0.02, qHit.z - 7.5));\n  } else if (idObj == idWng) {\n    col4.rgb = mix (vec3 (0.3, 0.8, 0.8), col4.rgb, smoothstep (0., 0.02,\n       abs (length (qHit.xz - vec2 (2.5, -0.2)) - 0.5) - 0.1));\n  } else if (idObj == idEng) {\n    col4 = (PrConCylDf (qHit, sin (0.07 * pi + vec2 (0.5 * pi, 0.)), 0.45, 0.35) > 0.) ?\n       vec4 (0.7, 0.3, 0.3, 0.) * (0.8 + 0.2 * sin (16. * pi * qHit.z)) : vec4 (1., 0., 0., -1.);\n  }\n  return col4;\n}\n\nvec2 CapsHit (vec3 ro, vec3 rd, float cRad, float cLen)\n{\n  float dIn, dOut, d, a, b, bs, w, s, ws, roz;\n  dIn = dstFar;\n  dOut = dstFar;\n  a = dot (rd.xy, rd.xy);\n  b = dot (rd.xy, ro.xy);\n  w = b * b - a * (dot (ro.xy, ro.xy) - cRad * cRad);\n  if (w > 0. && a > 0.) {\n    ws = sqrt (w);\n    d = - (b + ws) / a;\n    s = ro.z + d * rd.z;\n    if (d > 0. && abs (s) < cLen) dIn = d;\n    else {\n      roz = ro.z;\n      ro.z -= cLen * sign (s);\n      bs = dot (rd, ro);\n      w = bs * bs - (dot (ro, ro) - cRad * cRad);\n      if (w > 0.) {\n        d = - bs - sqrt (w);\n        if (d > 0.) dIn = d;\n      }\n      ro.z = roz;\n    }\n  }\n  if (dIn < dstFar) {\n    d = (- b + ws) / a;\n    s = ro.z + d * rd.z;\n    if (abs (s) < cLen) dOut = d;\n    else {\n      ro.z -= cLen * sign (s);\n      bs = dot (rd, ro);\n      w = bs * bs - (dot (ro, ro) - cRad * cRad);\n      if (w > 0.) dOut = - bs + sqrt (w);\n    }\n  }\n  return vec2 (dIn, dOut);\n}\n\nfloat FlmDens (vec3 p)\n{ // (from \"Flaming Asteroids\")\n  float c;\n  c = max (0., 1.3 * BumpFbm3 (0.2 * vec3 (p.xy / flRad, 0.5 * p.z + 16. * tCur)) - 0.2 +\n     0.4 * smoothstep (-0.5 * flRad, 0.1 * flRad, p.z));\n  return c * (1. - smoothstep (-0.3 * flRad, 0., length (vec3 (p.xy,\n     p.z - clamp (p.z, - 2. * flLen, 0.))) - flRad * (1. + 0.8 * p.z / (2. * flLen)))) *\n     smoothstep (0., flRad, p.z + 2. * flLen);\n}\n\nvec4 FlmCol (vec3 ro, vec3 rd, vec2 dCyl2, float dstObj)\n{\n  vec4 col4;\n  vec3 q, c;\n  float s, ds, f, fn, r;\n  const float sMax = 50.;\n  ds = min (2. * flRad, dCyl2.y - dCyl2.x) / sMax;\n  s = dCyl2.x;\n  ro.z -= flLen;\n  q = ro + s * rd;\n  r = length (q.xy) / flRad;\n  q.xy = Rot2D (q.xy, 0.8 * r * (2. * smoothstep (0.4, 0.8, r) - 1.) * q.z);\n  fn = FlmDens (q);\n  col4 = vec4 (0.);\n  for (float j = float (VAR_ZERO); j < sMax; j ++) {\n    f = fn;\n    s += ds;\n    q = ro + (s + ds * Hashfv3 (16. * rd)) * rd;\n    r = length (q.xy) / flRad;\n    q.xy = Rot2D (q.xy, 0.8 * r * (2. * smoothstep (0.4, 0.8, r) - 1.) * q.z);\n    fn = FlmDens (q);\n    c = mix (mix (vec3 (1., 0.3, 0.1), vec3 (1., 1., 0.2), clamp ((0.3 / ds) * (f - fn), 0., 1.)),\n       vec3 (0.9, 0.8, 0.3), smoothstep (-0.5 * flRad, 0.2 * flRad, q.z)) *\n       (1. - smoothstep (-0.1, 0.1, s - dstObj));\n    col4 = col4 + (1. - col4.a) * vec4 (c, 1.) * f / sMax;\n    if (s > dstObj || col4.a > 1.) break;\n  }\n  return clamp (col4, 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, c;\n  vec3 col, bgCol, vn, roo, rdo;\n  vec2 dCyl2;\n  float dstObj, dstBlk, dEdge, sh;\n  if (rd.y == 0.) rd.y = 0.001;\n  bgCol = SkyCol (rd);\n  roo = ro;\n  rdo = rd;\n  dstBlk = HexVolRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  if (min (dstBlk, dstObj) < dstFar) {\n    if (dstBlk < dstObj) {\n      ro += dstBlk * rd;\n      dEdge = HexCellEdge (ro);\n      col4 = vec4 (HexPrisCol (ro, dEdge), 0.);\n      vn = qnHit;\n      vn = VaryNf (2. * ro, vn, ((abs (vn.y) < 0.95) ? 2. * (1. -\n         0.95 * smoothstep (60., 80., dstBlk)) : 0.5) * smoothstep (0.01, 0.03, abs (dEdge)));\n    } else {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      col4 = ObjCol ();\n    }\n    sh = min (0.6 + 0.4 * smoothstep (12., 16., HexVolRay (ro + 0.01 * vn, sunDir)),\n       ObjSShadow (ro + 0.01 * vn, sunDir));\n    if (col4.a >= 0.) {\n      col = col4.rgb * (0.2 + 0.2 * max (dot (sunDir * vec3 (-1., 1., -1.), vn), 0.) +\n         0.8 * sh * max (dot (sunDir, vn), 0.)) + col4.a * step (0.95, sh) *\n         pow (max (dot (reflect (sunDir, vn), rd), 0.), 32.);\n    } else if (col4.a == -1.) {\n      col = col4.rgb * (0.5 - 0.5 * dot (rd, vn));\n    } else if (col4.a == -2.) {\n      rd = reflect (rd, vn);\n      col = (rd.y > 0.) ? SkyCol (rd) : vec3 (0.2);\n    }\n    col *= min (1., exp (0.6 + 0.03 * ro.y));\n  } else col = SkyCol (rd);\n  flRad = 0.35;\n  flLen = 5.;\n  ro = flyerMat * (roo - flyerPos);\n  rd = flyerMat * rdo;\n  ro.z += flLen + 7.4 * szFac;\n  dCyl2 = CapsHit (ro, rd, flRad, flLen);\n  if (dCyl2.x < min (min (dstBlk, dstObj), dstFar)) {\n    c = FlmCol (ro, rd, dCyl2, min (dstBlk, dstObj));\n    col = mix (col, 3. * c.rgb, clamp (8. * c.a * c.a, 0., 1.));\n  }\n  col = mix (col, bgCol, smoothstep (0.8, 0.95, min (dstBlk, dstObj) / dstFar));\n  return clamp (col, 0., 1.);\n}\n\nfloat FlyerHt (float t)\n{\n  return 4. * sin (0.15 * pi * t) + 2. * sin (0.35 * pi * t) - 10.;\n}\n\nvoid FlyerPM (float s, out vec3 flPos, out mat3 flMat)\n{\n  vec3 p, pf, pb, vel, acc, va, ori, ca, sa;\n  float ds, vm;\n  ds = 0.5;\n  p.xz = EvalPPos (s);\n  p.y = 0.;\n  flPos = p;\n  flPos.y = FlyerHt (s);\n  pf.xz = EvalPPos (s + ds);\n  pf.y = 0.;\n  pb.xz = EvalPPos (s - ds);\n  pb.y = 0.;\n  vel = (pf - pb) / (2. * ds);\n  acc = (pf + pb - 2. * p) / (ds * ds);\n  vm = length (vel);\n  va = cross (acc, vel) / vm;\n  ori = vec3 (- sin (vel.y) / vm, atan (vel.z, vel.x) - 0.5 * pi, 0.08 * length (va) * sign (va.y));\n  ca = cos (ori);\n  sa = sin (ori);\n  flMat = mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n          mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n}\n\nvoid VuPM (float s, out vec3 pos, out float az, out float el)\n{\n  vec3 pf, pb, vd;\n  float ds;\n  ds = 0.5;\n  pos.xz = EvalPPos (s);\n  pos.y = FlyerHt (s) + 8.;\n  pf.xz = EvalPPos (s + ds);\n  pf.y = 0.;\n  pb.xz = EvalPPos (s - ds);\n  pb.y = 0.;\n  vd = normalize (pf - pb);\n  az = atan (vd.z, - vd.x) - 0.5 * pi;\n  el = sin (vd.y);\n}\n\n#define N_WIN  1\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv, uvv, mMid[N_WIN], ut[N_WIN], mSize, msw;\n  float el, az, zmFac, asp, sr, trVel, t, azT, elT;\n  int vuId, vuIdO, regId;\n  bool sWin;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCur = mod (tCur, 3600.) + 30. * floor (dateCur.w / 3600.) + 10.;\n  asp = canvas.x / canvas.y;\n  sWin = true;\n  if (sWin) {\n    mSize = (1./5.) * vec2 (asp, 1.);\n    mMid[0] = (1. - mSize.y) * vec2 (asp, 1.);\n    for (int k = 0; k < N_WIN; k ++) ut[k] = abs (uv - mMid[k]) - mSize;\n  }\n  regId = -1;\n  if (mPtr.z > 0.) {\n    regId = 0;\n    if (sWin) {\n      for (int k = 0; k < N_WIN; k ++) {\n        msw = 2. * mPtr.xy - mMid[k] / vec2 (asp, 1.);\n        if (Maxv2 (abs (msw)) < mSize.y) {\n          regId = k + 1;\n          msw /= 2. * mSize.y;\n          break;\n        }\n      }\n    }\n    if (regId == 0) msw = mPtr.xy;\n  }\n  vuId = 0;\n  if (sWin) {\n    for (int k = 0; k < N_WIN; k ++) {\n      if (Maxv2 (ut[k]) < 0.) {\n        uv = (uv - mMid[k]) / mSize.y;\n        vuId = k + 1;\n        break;\n      }\n    }\n    if (regId > 0 && (vuId == 0 || vuId == regId)) vuId = regId - vuId;\n  }\n  vuIdO = vuId;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0. && vuIdO == regId) {\n    az += 2. * pi * msw.x;\n    el += pi * msw.y;\n  }\n  hgSizeB = 48.;\n  vgSize = 1.;\n  SetPath ();\n  szFac = 0.5;\n  trVel = 0.8;\n  t = tCur * trVel;\n  FlyerPM (t, flyerPos, flyerMat);\n  if (length (uv * vec2 (1. / asp, 1.)) < 1.5 * SmoothBump (0.25, 0.75, 0.01, fract (tCur / 60.)))\n     vuId = 1 - vuId;\n  VuPM (t + 1.5 * (((vuId == 0) ? -1. : 1.)), ro, azT, elT);\n  if (vuId == 0) {\n    az += azT;\n    el += elT;\n  } else if (vuId == 1) {\n    az += pi + azT;\n    el = el - elT;\n  }\n  el -= 0.07 * pi;\n  el = clamp (el, -0.4 * pi, 0.4 * pi);\n  dstFar = 200.;\n  zmFac = 1.8;\n  vuMat = StdVuMat (el, az);\n  sunDir = normalize (vec3 (0., 1., -1.));\n  sunDir.xz = Rot2D (sunDir.xz, 2. * pi * sin (0.001 * pi * tCur));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif\n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) *\n       pi)) / zmFac;\n    rd = vuMat * normalize (vec3 (2. * tan (0.5 * atan (uvv.x / asp)) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  if (sWin) {\n    for (int k = 0; k < N_WIN; k ++) {\n      if (Maxv2 (ut[k]) < 0. && Minv2 (abs (ut[k])) * canvas.y < 3.) col = vec3 (0.7);\n    }\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrConCylDf (vec3 p, vec2 cs, float r, float h)\n{\n  return max (dot (vec2 (length (p.xy) - r, p.z), cs), abs (p.z) - h);\n}\n\nfloat PrAnConCylDf (vec3 p, vec2 cs, float r, float w, float h)\n{\n  return max (abs (dot (vec2 (length (p.xy) - r, p.z), cs)) - w, abs (p.z) - h);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), 1.5 * h.y);\n}\n\nfloat HexEdgeDist (vec2 p)\n{\n  p = abs (p);\n  return (sqrt3/2.) - p.x + 0.5 * min (p.x - sqrt3 * p.y, 0.);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nfloat Ssign (float x)\n{\n  return (x != 0.) ? sign (x) : 1.;\n}\n\nvec2 Ssign (vec2 p)\n{\n  return vec2 (Ssign (p.x), Ssign (p.y));\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat PerBumpf (float p)\n{\n  return 0.5 * smoothstep (0., 0.5, abs (fract (p) - 0.5));\n}\n\nvec3 PerBumpv3 (vec3 p)\n{\n  return 0.5 * smoothstep (0., 0.5, abs (fract (p) - 0.5));\n}\n\nfloat BumpFbm3 (vec3 p)\n{\n  vec3 q;\n  float a, f;\n  a = 1.;\n  f = 0.;\n  q = p;\n  for (int j = 0; j < 4; j ++) {\n    p += PerBumpv3 (q + PerBumpv3 (q).yzx);\n    p *= 1.5;\n    f += a * (PerBumpf (p.z + PerBumpf (p.x + PerBumpf (p.y))));\n    q = 2. * q + 1.;\n    a *= 0.75;\n  }\n  return f;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, vec3 (37., 39., 41.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (dot (p, cHashVA3) + vec4 (0., cHashVA3.xy, cHashVA3.x + cHashVA3.y)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}