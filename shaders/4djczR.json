{
    "Shader": {
        "info": {
            "date": "1490638442",
            "description": "various menger sponges. with grid by aiekick, works great.\nrenders a big voxel field",
            "flags": 0,
            "hasliked": 0,
            "id": "4djczR",
            "likes": 15,
            "name": "3x3x3 fractals",
            "published": 3,
            "tags": [
                "voxel",
                "mengersponge"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 1080
        },
        "renderpass": [
            {
                "code": "#define rot(spin) mat2(cos(spin),-sin(spin),sin(spin),cos(spin))\n\nfloat time;\nint seed;\nvec3 cell;\n\nconst vec2 gridSize = vec2(4,2);//grid size (columns, rows)\n\n//#define dizzy\n//#define transition2d3d\n#define steps 1000\n#define detail 6\n/*\nwhat to fix:\n\"sign(dir)*0.001\"\n*/\n\n//functions from aiekick below//\nfloat EncID(vec2 s, vec2 h, vec2 sz) // encode id from coord // s:screenSize / h:pixelCoord / sz=gridSize\n{\n    vec2 c = floor(h/s*sz);\n    return c.y*sz.x+c.x;\n}\n\nvec3 getCell(vec2 s, vec2 g, vec2 sz) // return id / uv // s:screenSize / h:pixelCoord / sz=gridSize\n{\n\tvec2 si = s/sz;\n\tvec2 c = floor(g/si);\n    float id = c.y*sz.x+c.x;\n    vec2 uv = (2.*(g-c*si)-si)/si.y;\n    return vec3(id, uv);\n}\n//functions from aiekick above//\n\n\nfloat map(vec3 p) {\n    p = mod(p,3.0);\n    int num = int(p.x)+int(p.y)*3+int(p.z)*9;\n    return float(seed&1<<num)-0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    \n    time = iTime;\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \n    cell = getCell(iResolution.xy,fragCoord.xy,gridSize);\n    \n    seed = 129928175;\n    \n    if(iMouse.z>0.) {\n        cell = vec3(EncID(iResolution.xy,abs(iMouse.zw),gridSize), uv); // cell.x => cell id, cell.yz => central uv of the cell\n\t\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    }\n    \n    vec3 cam=vec3(1.5,1.5,time);\n    \n    if (cell.x == 0.0) {\n        seed = 129928175;\n    \tcam = vec3(1.5,2.5,time*0.2);\n    }\n    if (cell.x == 1.0) {\n        seed = 4289552;\n    \tcam = vec3(1.7,1.7,time*0.2);\n    }\n    if (cell.x == 2.0) {\n        seed = 131285248;\n    \tcam = vec3(1.52,1.5,time*0.2);\n    }\n    if (cell.x == 3.0) {\n        seed = 96210799;\n    \tcam = vec3(1.5,1.5,time*0.2);\n    }\n    if (cell.x == 4.0) {\n        seed = 85205317;\n    \tcam = vec3(1.5,1.7,time*0.2);\n    }\n    if (cell.x == 5.0) {\n        seed = 262735;\n    \tcam = vec3(1.5,1.5,time*0.2);\n    }\n    if (cell.x == 6.0) {\n        seed = 85197125;\n    \tcam = vec3(0.5,0.5,time*0.2);\n    }\n    if (cell.x == 7.0) {\n        seed = 12324399;\n    \tcam = vec3(1.5,0.5,time*0.2);\n    }\n    /*if (cell.x == 8.0) {\n        seed = 134217727;\n    \tcam = vec3(1.5,1.5,time*0.2);\n    }\n    if (cell.x == 9.0) {\n        seed = 129928175;\n    \tcam = vec3(1.5,1.5,time*0.2);\n    }\n    if (cell.x == 10.0) {\n        seed = 129928175;\n    \tcam = vec3(1.5,1.5,time*0.2);\n    }\n    if (cell.x == 11.0) {\n        seed = 129928175;\n    \tcam = vec3(1.5,1.5,time*0.2);\n    }\n    if (cell.x == 12.0) {\n        seed = 129928175;\n    \tcam = vec3(1.5,1.5,time*0.2);\n    }\n    if (cell.x == 13.0) {\n        seed = 129928175;\n    \tcam = vec3(1.5,1.5,time*0.2);\n    }\n    if (cell.x == 14.0) {\n        seed = 129928175;\n    \tcam = vec3(1.5,1.5,time*0.2);\n    }\n    if (cell.x == 15.0) {\n        seed = 129928175;\n    \tcam = vec3(1.5,1.5,time*0.2);\n    }*/\n    \n    \n    uv = cell.yz;\n    #ifdef dizzy\n    uv *= rot(length(uv)*sin(time)+time*0.2);\n    #endif\n    \n    //cam.y = clamp(0.5+abs(fract(cam.z/6.0)-0.5)*6.0,1.5,2.5);\n    vec3 dir = normalize(vec3(uv,1.0));\n    #ifdef transition2d3d\n    cam = mix(cam,vec3(clamp(uv*1.5+1.5,0.0,3.0),time*0.2),clamp(sin(time)+0.5,0.0,1.0));\n    dir = mix(normalize(vec3(uv,1.0)),vec3(0.0,0.0,1.0),clamp(sin(time)+0.5,0.0,1.0));\n    #endif\n    \n    if (length(iMouse.xy) > 40.0) {\n    \tdir.yz *= rot(-iMouse.y/iResolution.y*3.14+3.14*0.5);\n    \tdir.xz *= rot(-iMouse.x/iResolution.x*3.14*2.0+3.14);\n    }\n    \n    vec3 pos = cam;\n    float stepsize = 1.0;\n    float count = 0.0;\n    vec3 signdir = sign(dir);\n    vec3 invdir = abs(1.0/dir);\n    /*while (map(floor(pos/stepsize))>0.0) {\n        count++;\n        stepsize /= 3.0;\n        \n    }*/\n    \n    vec3 floorpos = floor(pos/stepsize)*stepsize;\n    vec3 mask = vec3(0.0);\n    \n    \n    float dist = 0.0;\n    vec3 localpos = pos;\n    vec3 localfloor = floorpos;\n    \n    for (int i = 0; i < steps; i++) {\n        if (count > float(detail)||dist > 8.0) break;\n        bool len = map(localfloor)<0.0;\n        \n        if((max(max(localfloor.x,localfloor.y),localfloor.z) > 2.5||min(min(localfloor.x,localfloor.y),localfloor.z) < -0.5) && count > 0.5) {\n            stepsize *= 3.0;\n            count--;\n            floorpos -= localfloor*stepsize/3.0-mask*signdir*stepsize;\n            pos += sign(dir)*0.00001*mask;\n            \n            localpos = mod(pos/stepsize-signdir*mask,3.0)+signdir*mask;\n\n            localfloor = floor(localpos);\n\t\t} else if (!len) {\n            stepsize /= 3.0;\n            count++;\n            localpos = localpos*3.0-localfloor*3.0;\n            vec3 pos = clamp(floor(localpos),0.0,2.0);\n            localfloor = pos;\n            floorpos += localfloor*stepsize;\n        } else {\n        \t\n            \n            vec3 dists = abs((signdir*0.5+0.5)-(localpos-localfloor))*invdir;\n\t\t\t\n            float m = min(min(dists.x,dists.y),dists.z);\n\t\t\t\n            mask = step(dists,vec3(m));\n\t\t\t\n            dist += m*stepsize;\n            pos += m*dir*stepsize;\n            localpos += m*dir;\n            localfloor += mask*signdir;\n            floorpos += mask*signdir*stepsize;\n        }\n    }\n    if (dist < 7.9) {\n    \tfragColor = vec4((0.5+0.5*mask)*0.5/(dist+0.3), 1);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}