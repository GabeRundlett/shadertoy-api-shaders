{
    "Shader": {
        "info": {
            "date": "1501955117",
            "description": "golfed version of [url]https://www.shadertoy.com/view/MsBfDy[/url] \nwhich was 2D version of danb [url]https://www.shadertoy.com/view/ldjfzd[/url]\noriginal animgif: [url]https://giphy.com/gifs/boxes-26n6QQ5MVq4eHk8HC[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "XsjfWG",
            "likes": 18,
            "name": "Stereo boxes ( golfed false-3D )",
            "published": 3,
            "tags": [
                "2d",
                "projection",
                "box",
                "stereographic",
                "symmetry",
                "gif",
                "gif",
                "short",
                "boxes",
                "gifs",
                "copies",
                "reproductions"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 769
        },
        "renderpass": [
            {
                "code": "// golfed version of https://www.shadertoy.com/view/MsBfDy\n// which was false-3D version of danb https://www.shadertoy.com/view/ldjfzd\n// original animgif: https://giphy.com/gifs/boxes-26n6QQ5MVq4eHk8HC\n\n/**/  // 355 chars  ( See at bottom for more readable version. Or ungolfed version above. )\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n#define V vec3\n    O += .15 -O;\n  \n    for (int i=0; i<27; i++) \n    {\n        V v = mod( iTime*4. + V(3,6,0) , 24.),         // place cube\n          R = iResolution;\n\n        R.yx = vec2(7,12)*( U+U - R.xy)  / R.y         // normalized screen coord *7 *vec2(1,sqrt3)\n                + V( i/ivec3(1,3,9) % 3 - 1)           // i -> 3x3x3 grid\n                * ( smoothstep( 0., 2., min( v, 15.-v ) ) *1.25 + 1. )  // anim\n                * mat2x3( 1,0,-1, 1,-2,1 );            // perspective\n            \n\t    v = R.y + V(0,R.x,-R);  R = v*v;               // render cube\n        R.x < 1. && R.y < 4.  && R.z < 4.\n          ? O.xyz = .1*( v.z>0. || v.y<0. ?  v.x>0. \n                          ? V( 9, 6  , .5)             // 3 faces colors\n                          : V( 8, 2  , 2 ) \n                          : V( 1, 5.5, 6 ) )  :R;\n    }\n}\n/**/\n\n\n\n\n/**  // 357 chars \n\nvoid mainImage(out vec4 O, vec2 U) // -16: mostly iapafoto zipping  -8: coyote\n{\n#define V vec3\n    O += .15 -O;\n  \n    for (int i=0; i<27; i++) \n    {\n        V v = mod( iTime*4. + V(3,6,0) , 24.),         // place cube\n          R = iResolution;\n\n        R.yx = vec2(7,12)*( U+U - R.xy)  / R.y         // normalized screen coord *7 *vec2(1,sqrt3)\n                - V( 1-i%3, i/3%3-1, i/9%3-1 )         // i -> 3x3x3 grid\n                * ( smoothstep( 0., 2., min( v, 15.-v ) ) *1.25 + 1. )  // anim\n                * mat2x3( 1,0,1, 1,2,-1 );             // perspective\n            \n\t    v = R.y + V(0,R.x,-R);  R = v*v;               // render cube\n        R.x < 1. && R.y < 4.  && R.z < 4.\n          ? O.xyz = .1*( v.z>0. || v.y<0. ?  v.x>0. \n                          ? V( 9, 6  , .5)             // 3 faces colors\n                          : V( 8, 2  , 2 ) \n                          : V( 1, 5.5, 6 ) )  :R;\n    }\n}\n/**/\n\n\n\n\n/**  // 381 chars  \n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    O += .15 -O;\n  \n    for (int i=0; i<27; i++) \n    {\n        vec3 v = mod(  iTime*2. + vec3(1.5,3,0) , 12.),         // place cube\n             R = iResolution;\n\n        vec2 V = vec2(7,12)*( U+U - R.xy)  / R.y                // normalized screen coord *7 *vec2(1,sqrt3)\n                - (     vec3( 1-i%3, i/3%3-1, i/9%3-1 )         // i -> 3x3x3 grid\n                    * ( smoothstep( 0., 1., min( v, 7.5-v ) ) *1.25 + 1. ) // anim\n                  ) * mat2x3( 1,0,1, 1,2,-1 ); //*vec2(1,.58)   // perspective\n            \n\t    v = V.x + V.y*vec3(0,1,-1);  R = v*v;                   // render cube\n        R.x < 1. && R.y < 4.  && R.z < 4.\n          ? O = .1*(  v.x>0. && v.z>0. ?  vec4( 9, 6  , .5, 1)  // 3 faces colors\n                    : v.x<0. && v.y<0. ?  vec4( 8, 2  , 2 , 1) \n                    :                     vec4( 1, 5.5, 6 , 1) )  :O;\n    }\n}\n\n/**/\n\n\n\n\n/**  // 391 chars\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    O += .15 -O;\n  \n    for (int i=0; i<27; i++) \n    {\n        vec3 v = mod(  iTime*2. + vec3(1.5,3,0) , 12.),        // place cube\n             a = vec3( 1-i%3, i/3%3-1, i/9%3-1 )       \n                * ( smoothstep( 0., 1., min( v, 7.5-v ) ) *1.25 + 1. );                        \n\n        vec2 R = iResolution.xy, \n             V = 7.*( U+U - R)  / R.y\n                - vec2( a.x+a.z, (a.x+a.y*2.-a.z)/1.7 );       // perspective\n            \n\t    v = V.x + V.y*vec3(0,1,-1)*1.7;  a = v*v;              // render cube\n        a.x < 1. && a.y < 4.  && a.z < 4.\n          ? O = .1*(  v.x>0. && v.z>0. ?  vec4( 9, 6  , .5, 1) // 3 faces colors\n                    : v.x<0. && v.y<0. ?  vec4( 8, 2  , 2,  1) \n                    :                     vec4( 1, 5.5, 6,  1) )  :O;\n    }\n}\n\n/**/\n\n\n\n\n/**   //   430 chars\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    vec2 V = iResolution.xy;\n    U =  7.*( U+U - V)  / V.y;\n\tfloat S = 1.732; // sqrt(3) \n    O += .15 -O;\n  \n    for (int i=0; i<27; i++) {\n        vec3 v = mod(  iTime*2. + vec3(1.5,3,0) , 10.),    // place cube\n             a = vec3( 1-i%3, i/3%3-1, i/9%3-1 )       \n                * ( smoothstep( min( min(v ,1.5), max(7.5-v,0.) ), v-v, v/v) * .8 + .2 );                        \n        V = U - vec2( a.x+a.z, (a.x+a.y*2.-a.z)/S ) * 5.;  // perspective\n            \n\t    v = V.x + V.y*vec3(0,S,-S); a = abs(v);            // render cube\n        if ( a.x < 1. && a.y < 2.  && a.z < 2. )\n            O =   v.x>0. && v.z>0. ?  vec4(.9, .6, .05, 1) // 3 faces colors\n                : v.x<0. && v.y<0. ?  vec4(.8, .2, .2,  1) \n                :                     vec4(.1, .55,.6,  1);\n        }\n}\n\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}