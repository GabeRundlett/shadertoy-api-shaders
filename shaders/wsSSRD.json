{
    "Shader": {
        "info": {
            "date": "1553053885",
            "description": "a tube",
            "flags": 0,
            "hasliked": 0,
            "id": "wsSSRD",
            "likes": 10,
            "name": "hyperpastel tunnel",
            "published": 3,
            "tags": [
                "noise",
                "palette",
                "tube",
                "blah"
            ],
            "usePreview": 0,
            "username": "samlo",
            "viewed": 658
        },
        "renderpass": [
            {
                "code": "\nuniform vec2 mouse;\n\n\n\nvec3 hash3( vec2 p ) {\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)), \n\t\t\t\t   dot(p,vec2(269.5,183.3)), \n\t\t\t\t   dot(p,vec2(419.2,371.9)) );\n\treturn fract(sin(q)*43758.5453);\n}\n\n\n//iq voronoise\nfloat iqnoise( in vec2 x, float u, float v ) {\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\t\t\n\tfloat k = 1.0+63.0*pow(1.0-v,4.0);\n\t\n\tfloat va = 0.0;\n\tfloat wt = 0.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2( float(i),float(j) );\n\t\tvec3 o = hash3( p + g )*vec3(u,u,1.0);\n\t\tvec2 r = g - f + o.xy;\n\t\tfloat d = dot(r,r);\n\t\tfloat ww = pow( 1.0-smoothstep(0.0,1.414,sqrt(d)), k );\n\t\tva += o.z*ww;\n\t\twt += ww;\n    }\n\t\n    return va/wt;\n}\n\n//iq palette\nvec3 palette(in float t) {\n\t//colors\n\tvec3 a = vec3(0.5, 0.5, 0.5);  \n\tvec3 b = vec3(0.5, 0.5, 0.5);\n\tvec3 c = vec3(1.0, 1.0, 1.0);\n\tvec3 d = vec3(0.3, 0.15, 0.87);\n\t\n\treturn a + b * cos(6.28318 * (c * t + d));\n}\n\nfloat sin01(in float t){\n\treturn (sin(t) + 1.) * 0.5;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 point = gl_FragCoord.xy / iResolution.xy;\n\t//vec2 mouse = (mouse.xy - 0.5) * 0.1; mouse is kind of ugly?\n\tvec2 center = vec2(0.5 - (sin(iTime * 0.5) * 0.05), 0.5 - (sin(iTime * 0.25) * 0.1));\n\n\t//aspect ratio\n\tfloat aspect = iResolution.x / iResolution.y;\n\tpoint.x *= aspect;\n\tcenter.x *= aspect;\n\t\n\t//center circle\n\tfloat circle = pow(smoothstep(0.3, 0., length(point - center)), 1.2) * 0.55;\n\t\n\t//circle glow\n\tfloat glow = pow(smoothstep(1.4, 0.2, length(point - center)), 1.2) * 0.45;\n\t\n\t\n\t//planar distortion\n\tfloat rInv = 1. / length(point - center);\n\tpoint = point * rInv - vec2(rInv, 0.0);\n\t\n\t//sample noise\n\tvec2 uv = vec2(point.x, point.y + iTime * 0.5) * 1.7;\n\tfloat noise = iqnoise(uv, 0.5, 1.2);\n\tfloat stepNoise = floor(noise * 10.3) / 11.; //stepping irregularly gives nice shapes \n\t\n\t//draw outline around stepped noise\n\tfloat outline = 1.0 - step(smoothstep(stepNoise - 0.03, stepNoise, noise) - (smoothstep(stepNoise, stepNoise + 0.03, noise)), 0.03);\n\tvec3 outlineCol = outline * palette(sin01(iTime * 0.2));\n\t\n\t//get tunnel color from palette. I tried directly attenuating this by length of the fragment but it kept blowing out to white\n\tvec3 palette = palette((stepNoise * 0.5) + sin01(iTime * 0.4) * 0.2);\n\t\n\t//combine\n\tvec3 finalColor = palette + outlineCol + circle + glow;\n\t//finalColor = vec3(glow + circle);\n\tfragColor = vec4(finalColor, 1.0);\t\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}