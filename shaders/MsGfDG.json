{
    "Shader": {
        "info": {
            "date": "1530203464",
            "description": "weird.",
            "flags": 8,
            "hasliked": 0,
            "id": "MsGfDG",
            "likes": 4,
            "name": "This is weird music",
            "published": 3,
            "tags": [
                "abstractmusic"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 623
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.1415926535897932384626\n#define TWO_PI PI*2.\n\nfloat sineWave(float time, float freq, float amp) {\n    return sin(TWO_PI*time*freq)*amp;\n}\nfloat squareWave(float time, float freq, float amp) {\n    float sine = sin(TWO_PI*time*freq);\n    if(sine > 0.) {\n        return amp;\n    } else {\n        return -amp;\n    }\n}\n\nfloat octaveWave(float time, float freq, float amp, float lac, float pers, int octaves) {\n    float result = 0.;\n    float frequencyInc = 1.;\n    float amplitudeInc = 1.;\n    for(int i = 0; i < octaves; i++) {\n        result += sin(time*freq*frequencyInc)*amp*amplitudeInc;\n        frequencyInc *= lac;\n        amplitudeInc *= pers;\n    }\n    return result;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    // A 440 Hz wave that attenuates quickly overt time\n    //return vec2( sin(6.2831*440.0*time)*exp(-3.0*time) );\n    return vec2(octaveWave(time, 440., 0.01, 2., 0.9, 16));\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}