{
    "Shader": {
        "info": {
            "date": "1470606044",
            "description": "because everybody needs one",
            "flags": 0,
            "hasliked": 0,
            "id": "XltGRf",
            "likes": 12,
            "name": "noise glitches",
            "published": 3,
            "tags": [
                "noise",
                "glitches"
            ],
            "usePreview": 0,
            "username": "Daedelus",
            "viewed": 1659
        },
        "renderpass": [
            {
                "code": "// IQ's noise value 2D\nfloat hash( vec2 p )\n{\n\tfloat h = dot(p + iTime * 0.0001,vec2(127.1,311.7));\n    return fract(sin(h)*43758.5453123);\n}\nfloat hash2( vec2 p )\n{\n\tfloat h = dot(p ,vec2(127.1,311.7));\n    return fract(sin(h)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n    \t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float glitch = hash2(floor(iTime * 4.0 - uv * 20.0) / 20.0);\n    uv += pow(fract(glitch + iTime * 0.1), 30.0);\n    \n    float n = pow((noise(uv * 150.0) + noise(uv * 350.0)) * 0.5, 3.0);\n    n *= abs(sin(uv.y * 250.0 + iTime * 2.0));\n    float offset = sign(sin(uv.x * 6.0 + iTime * 3.0)) * 0.1;\n    offset += sign(sin(uv.y * 10.0 + uv.x * 14.5 + iTime * 20.0)) * 0.1;\n    offset += sign(sin(sin(iTime) * uv.y * 12.0 - uv.x * 22.0 - iTime * 40.0)) * 0.2;\n    offset = pow(offset - 0.5, 4.0);\n        \n    n *= min(1.0, floor((1.5 - uv.y + offset) * 3.0) / 3.0);\n    \n    float waver = abs(noise(vec2(iTime * 3.7)) * 2.0);\n    n *= pow(fract(floor(uv.y * 15.0) / 15.0 + iTime * 0.3) * waver * 0.4 + 0.4, 0.65);\n    n *= 0.75 + waver * 0.125;\n    n = clamp(n, 0.0, 1.0);\n    \n\tfragColor = vec4(n);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}