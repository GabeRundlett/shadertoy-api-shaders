{
    "Shader": {
        "info": {
            "date": "1622778127",
            "description": "The binomial theorem works for square roots too! It expands out into an infinite series (only 15 terms are computed here though). Demoing sqrt(1 - x^2). Series is in red, \"exact\" is in blue. I think I made a bug when I optimized the factorials...",
            "flags": 0,
            "hasliked": 0,
            "id": "7ll3WB",
            "likes": 3,
            "name": "Binomial Square Root",
            "published": 3,
            "tags": [
                "square",
                "root",
                "binomial",
                "infiniteseries"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 165
        },
        "renderpass": [
            {
                "code": "#define draw(d, c) color = mix(color, c, smoothstep(unit, 0.0, d))\n\n// Infinite series (binomial expansion) of (a+b)^0.5\n// Lots of optimizations and now it looks very obfuscated\n// It seems bugged too, for a=1 and b=(+/-)x^2 it gives the same result\nfloat SqrtSum(in float a, in float b) {\n    float res = 0.0, f = 1.0, m = 1.0;\n    for (float k=0.0; k < 15.0; k++) {\n        float h = 0.5 - k, ff = f;\n        for (float x=1.0; x <= k; x++) { ff *= k + x; }\n        float coeff = ff / (2.0 * m * h * f * f);\n        res += coeff * pow(a, h) * pow(b, k);\n        f *= k + 1.0;\n        m *= 4.0;\n    }\n\n    return res;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 8.0;\n    float unit = 16.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n\n    // Grid\n    draw(abs(fract(uv.x + 0.5) - 0.5) + 0.25 * unit, vec3(0.0, 0.0, 1.0));\n    draw(abs(fract(uv.y + 0.5) - 0.5) + 0.25 * unit, vec3(0.0, 0.0, 1.0));\n    draw(abs(uv.x), vec3(1.0, 0.0, 0.0));\n    draw(abs(uv.y), vec3(1.0, 0.0, 0.0));\n\n    if (mod(iTime, 2.0) < 1.0) {\n        // Series\n        vec2 y = vec2(SqrtSum(1.0, -uv.x * uv.x), 0.0);\n        y.y = (SqrtSum(1.0, -((uv.x + 0.002) * uv.x + 0.000001)) - y.x) / 0.001; // Numerical derivative\n        if (abs(uv.x) < 1.0) draw(abs(uv.y - y.x) / sqrt(1.0 + y.y * y.y) - 0.02, vec3(0.8, 0.0, 0.0));\n    }\n\n    else {\n        // \"Exact\"\n        vec2 y = vec2(sqrt(1.0 - uv.x * uv.x), 0.0);\n        y.y = -uv.x / y.x; // Exact derivative\n        if (abs(uv.x) < 1.0) draw(abs(uv.y - y.x) / sqrt(1.0 + y.y * y.y) - 0.02, vec3(0.0, 0.0, 0.8));\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}