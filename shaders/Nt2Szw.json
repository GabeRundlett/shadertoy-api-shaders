{
    "Shader": {
        "info": {
            "date": "1627331171",
            "description": "_More options in the defines!_\nA \"Snowflake\" that evolves with time on an hexagonally tilled domain.\nthe cubes are fake shaded, and the wave is achieved by wave manipulation (l:109)",
            "flags": 0,
            "hasliked": 0,
            "id": "Nt2Szw",
            "likes": 16,
            "name": "Evolving Snowflake Cube Field",
            "published": 3,
            "tags": [
                "waves",
                "interactive",
                "cube",
                "hexagon",
                "snowflake",
                "hexagonal",
                "tilling"
            ],
            "usePreview": 0,
            "username": "Pelegefen",
            "viewed": 418
        },
        "renderpass": [
            {
                "code": "\n\n//Made with love by Peleg Gefen <3\n\n\n//#define Time_And_Zoom //Allows you to use the horizontal mouse axis to \"peek into the future\" to see the full evolution of the wave.\n\n\n\n//#define Grass_Like //Animates the cubes in a cool low poly growing grass thing.\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\n\nvec2 rot (vec2 p,float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return p*mat2(c,s,-s,c);\n}\n\n\n\nfloat hexDist(vec2 p) {\n    p = abs(p);\n    //distance to the diagonal line\n    float c = dot(p, normalize(vec2(1., 1.73)));\n\n    // distance to the vertical line\n    c = max(c, p.x);\n    c += sin(iTime + 4000.) *5. +5.;\n    return c;\n  }\n\nvec4 hexCoords(vec2 uv) {\n    vec2 r = vec2(1., 1.73);\n    vec2 h = r * 0.5;\n    vec2 a = mod(uv, r) - h;\n    vec2 b = mod(uv - h, r) - h;\n\n    vec2 gv;\n    if(length(a) < length(b))\n      gv = a;\n    else\n      gv = b;\n\n    float y = .5 - hexDist(gv);\n    float x = atan(gv.x, gv.y);\n    vec2 id = uv - gv;\n    return vec4(x, y, id.x, id.y);\n\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat iTime = iTime * .25;\n\tiTime += 800.;\n\tvec2 uv = (fragCoord.xy-.5*iResolution.xy)\n\t/iResolution.y;\n    \n    \n     vec4 col = vec4(0.);\n     vec2 uv1 = uv;\n     //uv *= 3.;\n     uv -= 2.;\n     uv *= (sin(iTime * .75)*1.5+1.5) + 3.;\n     uv += vec2(iTime *\t .01);\n\n     #ifdef Time_And_Zoom\n     iTime += iMouse.x * 10.;\n     uv *= iMouse.y * .007;\n     #else\n     uv -= (iMouse.xy / iResolution.xy) * 2. ;\n     #endif\n\n     uv += rot(uv , (cos(iTime)*.5+.5));\n\n \n \n     vec4 uvid = hexCoords(uv * 2.);\n     \n     float t = smoothstep(.5,.5\n \t \t,uvid.y \n \t \t* sin(( length(uvid.zw))\n \t \t * iTime *0.1)*.5+.5);\n   \n    \n\tcol = vec4(\n    t * tan(iTime * .5)*.5+.5 * sin(iTime * 2.5)*.5+.5\n    , t*cos(iTime * .25)*.5+.5* sin(iTime * 5.)*.5+.5\n    , t * sin(iTime * .1275)*.5+.5 * sin(iTime * 10.)*.5+.5\n    ,1.);\n    \n    \n         \n         \n\t//lit face\n\tcol += vec4(smoothstep(.99,.991,uvid.x));\n    \n    \n\t//shading\n\tcol += vec4(smoothstep(-1.,-1.,uvid.x)) * .4;\n\n \t \n \t //hexagons shrinking and expanding, wave form\n \t col *= vec4(smoothstep(.000001,.00001\n \t \t,uvid.y \n        \n        #ifdef Grass_Like\n \t \t* uvid.x\n        #endif\n        * sin(( length(uvid.zw))\n \t \t * iTime *.01)*.5+.5));\n         \n \t \n\tfragColor = vec4( col);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}