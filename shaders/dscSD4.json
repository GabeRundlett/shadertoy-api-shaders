{
    "Shader": {
        "info": {
            "date": "1679795545",
            "description": "Havent posted in a while, wanted to make something quick, chaotic and colorful.",
            "flags": 32,
            "hasliked": 0,
            "id": "dscSD4",
            "likes": 15,
            "name": "Trippy noisy paint",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "noise",
                "fbm"
            ],
            "usePreview": 1,
            "username": "Plento",
            "viewed": 361
        },
        "renderpass": [
            {
                "code": "// By Cole Peterson (Plento)\n\n// bump / lighting\n\n#define R iResolution.xy\n\nfloat height(vec2 p){return texture(iChannel0, p).x;}\n\nvec3 BumpedNormal(vec2 uv, float strength){\n    float h = 0.002;\n    \n    vec3 p = texture(iChannel0, uv).xyz; \n    float dx = height(uv) - height(uv + vec2(h, .0));\n    float dy = height(uv) - height(uv + vec2(0., h));\n    \n    return normalize( vec3(0., 0., -1.) + vec3(dx, dy, 0.)*strength);\n}\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv2 = vec2(u - .5*R) / R.y;\n    vec2 uv = u / R;\n    vec3 col = vec3(0);\n\n    vec2 cuv =  vec2(u.xy - 0.5*R.xy)/R.y; \n    \n    vec3 lp = vec3(-0.33, 0.3, -1.0); \n    vec3 sp = vec3(cuv, 0.0); \n    vec3 ro = vec3(0, 0, -1.0);\n    vec3 rd = normalize(sp - ro);\n    vec3 ld = lp - sp;\n    \n    float dist = max(length(ld), 0.001);\n    ld /= dist;\n    vec3 objCol = texture(iChannel0, uv).xyz;\n    \n    vec3 norm = BumpedNormal(uv, 6.0);\n  \t\n    float dif = max(dot(norm, ld), 0.);  \n    float spec = pow(max(dot( reflect(-ld, norm), -rd), 0.), 16.); \n    \n    float falloff = 2.25/(1. + dist*1.15);\n    \n    col = (objCol*(dif) + vec3(0.1, 0.6, 0.7)*spec*1.6)*falloff;\n    \n    col = pow(col*1.3, vec3(2.));\n    \n    //col = texture(iChannel0, u / R).xyz;\n    \n    //col = 1.-exp(-col);\n    f = vec4(sqrt(clamp(col, 0.0, 1.0)), 0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Main color\n\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat rand(vec2 n){ \n\treturn fract(sin(dot(n, vec2(17.12037, 5.71713))) * 12345.6789);\n}\nfloat noise(vec2 n){\n\tvec2 d = vec2(0.0, 1.0);\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b + d.xx), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat fbm(vec2 n, float t, int k){\n\tfloat sum = 0.0, amp = 1.0;\n   \n\tfor (int i = 0; i < k; i++){\n        n.y += t;\n\t\tsum += noise(n) * amp;\n\t\tn += n;\n\t\tamp *= 0.5;\n\t}\n\treturn sum;\n}\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = .1*vec2(u - .5*R) / R.y;\n    vec2 uv2 = u / R;\n    vec3 col = vec3(0);\n    \n    uv *= (1. - 4.4*length(uv));\n    \n    uv *= rot(iTime*.07);\n    uv -= iTime*.008;\n    \n    float t = iTime*.1, scl = 1., n = 18.;\n   \n    for(float i = 0.; i < n; i++){\n        uv -= .5;\n        \n        uv = fract(uv*1.0)-0.5;\n        uv = -abs(uv);\n        \n        float val = ss(.1, .07, abs(dot(uv, vec2(cos(i*5. - t), sin(i + t*2.)))));\n        \n        float k = uv.x*2.-uv.y*11.;\n        col = mix(col, (0.1+0.6*cos(vec3(1., 2.2, 3.2)*i*3.+vec3(3.,5.,6.2) + i*15.+1.3+t*6.+ 2.*cos(k*2.))), val);\n        \n        uv *= scl;\n        scl += .03;\n        \n        uv += .05;\n        uv.yx *= rot(iMouse.x*.001+t*0.04 - 15.*((i/n)*2.*3.1415));\n        uv -= .05;\n        uv -= .009 * fbm(uv*24., i*16. + .7*t, 5);\n    }\n    \n    f = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}