{
    "Shader": {
        "info": {
            "date": "1563496735",
            "description": "testing noise distribution with a histogram",
            "flags": 32,
            "hasliked": 0,
            "id": "3tXSz2",
            "likes": 2,
            "name": "noise distrib test(histogram)",
            "published": 3,
            "tags": [
                "test",
                "noise",
                "distribution",
                "histogram"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 440
        },
        "renderpass": [
            {
                "code": "//Testing noise using this histogram and noise convergence test here https://www.shadertoy.com/view/ll3SD7\n\n//Image - Display histogram\n\nvoid mainImage( out vec4 o, in vec2 u)\n{\n    vec2 uv = u/iResolution.xy;\n    float x = uv.x*HISTOGRAM_SCALE,\n        v = float(floatBitsToUint(texelFetch(iChannel0,ivec2(x,0),0).x)*uint(100*HISTOGRAM_SIZE)/uint(iFrame*SAMPLES_PER_FRAME))/200.;\n    if (abs(fract(x)-.5)/HISTOGRAM_SCALE*iResolution.x > iResolution.x*.5/HISTOGRAM_SCALE-.5) o = vec4(.2);\n\telse o = vec4(step(uv.y,v));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Buf A - Calculate histogram of noise function\n\n\nvec4 hash(vec4 a) {\n\treturn fract(abs(sin(a.ywxz*766.345)+cos(normalize(a)*4972.92855))*2048.97435+abs(a.wxyz)*.2735);\n}\n\n//try out different noise/sampling functions here\n\n#define noise(u) hash(u.xyxy*.97234+float(iFrame)*PI*.01).x\n\n//#define noise(u) fract((fract(u.x*.87654321)+fract(u.y*.987654321)+iTime)*PI)\n\n//#define noise(u) texelFetch(iChannel1,ivec2(mod(u+float(iFrame)*vec2(299.89723,33.87234),1024.)),0).x\n\nvoid mainImage( out vec4 o, in vec2 u)\n{\n    if (iFrame == 0 || u.x > FHISTOGRAM_SIZE) {\n     \to = vec4(uintBitsToFloat(0u));\n        return;\n    }\n    \n    uint count = floatBitsToUint(texelFetch(iChannel0,ivec2(u),0).x), x = uint(u.x);\n    for (int i = 0; i < SAMPLES_PER_FRAME; i++) {\n        if (uint(noise(vec2(u.x,i))*HISTOGRAM_SCALE) == x) count++;\n    }\n    o = vec4(uintBitsToFloat(count),0,0,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define HISTOGRAM_SIZE 10\n#define SAMPLES_PER_FRAME 10\n\n\n#define FHISTOGRAM_SIZE float(HISTOGRAM_SIZE)\n#define HISTOGRAM_SCALE (FHISTOGRAM_SIZE-.001)\n#define PI 3.14159265358979",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}