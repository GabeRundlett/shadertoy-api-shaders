{
    "Shader": {
        "info": {
            "date": "1524698431",
            "description": "Note intensity used as variables in a nonlinear equation under domain coloring\n",
            "flags": 96,
            "hasliked": 0,
            "id": "XdtBDn",
            "likes": 4,
            "name": "Bifurcations can be Beautiful",
            "published": 3,
            "tags": [
                "visualization",
                "music",
                "nonlinear"
            ],
            "usePreview": 0,
            "username": "fabricatedmath",
            "viewed": 757
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2018 Charles Durham, 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Stolen hsl2rgb function from https://www.shadertoy.com/view/lsS3Wc\n\n//========================================================================\n\n#define PI 3.141593\n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float freq[12];\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    for(int i = 0; i < 12; i++) {\n        ivec2 vec = ivec2 (int(uv.y*iResolution.x),i);\n        freq[i] = 20.*texelFetch(iChannel0,vec,0).r;\n    }\n    float c = freq[int(uv.x*12.)];   \n    fragColor = vec4(c,c,c,1.);\n    \n    vec2 uv1 = uv;\n    \n    float height = 4.0 + 1.*abs(cos(0.05*iTime));\n    uv1 = vec2(height*2.)*uv - vec2(height);\n    float time = iTime * 5.0;\n    \n    vec2 emaCoords = vec2(uv.x,(uv.y*0.6+0.4)/iResolution.y*12.);\n    \n    float x = uv1.x;\n    float y = uv1.y;\n    float toffset = texture(iChannel0,emaCoords).x;\n    float t = time + 20.*toffset;\n    float f = 1.5 * sin(2.0*sin(0.02*(t + freq[0]))*y - 3.0*cos(0.03*(t + freq[2]))*x)*exp(-abs (sin(0.11*(t + freq[4]))*sin (sin(0.043*(t+freq[10]))*(3.0*x+1.0-2.0*y)) - sin(0.19*(t + freq[6]))*cos(5.*cos(0.0023*(t + freq[8]))*(x-3.0*y+1.0))));\n    float g = 1.5 * cos(2.0*sin(0.07*(t + freq[1]))*y - 3.0*cos(0.05*(t + freq[3]))*x)*exp(-abs (cos(0.13*(t + freq[5]))*cos (sin(0.047*(t+freq[11]))*(3.0*x+1.0-2.0*y)) - cos(0.17*(t + freq[7]))*cos(5.*sin(0.0029*(t + freq[9]))*(x-3.0*y+1.0))));\n    \n    vec2 p = vec2(f,g);\n    float theta = atan(p.y,p.x);\n    float cs = texture(iChannel0,emaCoords).x;\n    float h = theta/(2.*PI) + 1.*cs;\n    float s = 0.5; // adjust this for offensivity of colors\n    float v = 0.6*length(p);\n    vec3 hsv = vec3 (h,s,v);\n    fragColor = vec4(hsl2rgb(hsv),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Notes, used note pulling math from https://www.shadertoy.com/view/lt23W1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float fmax = iSampleRate/4.;\n    float minor = fragCoord.y - 0.5;\n    vec2 uv = fragCoord/iResolution.xy;\n    if (minor < 12.) {\n        float freq = 440.*exp2(minor/12.);\n        float v = 0.0;\n        for (float i = 1.; i<=5.; i++){\n            if (freq>=440.) v = max(v,texture(iChannel0,vec2(freq/fmax,.5/2.)).r);\n            freq *= 2.;\n        }\n        \n        float prev = texture(iChannel1,uv).x;\n        v = mix(v,prev,uv.x); //uv.x*prev + (1.-uv.x)*v; //EMA\n        fragColor = vec4(v,0.0,0.0,1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 16949,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/feelmybicep/bicep-opal-four-tet-remix"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}