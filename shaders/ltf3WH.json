{
    "Shader": {
        "info": {
            "date": "1421530209",
            "description": "Doomsday trip to 1995 (or: what happens if you let an engine programmer do effects).",
            "flags": 0,
            "hasliked": 0,
            "id": "ltf3WH",
            "likes": 4,
            "name": "mega-lo-march",
            "published": 3,
            "tags": [
                "2d",
                "3d",
                "1995"
            ],
            "usePreview": 0,
            "username": "superplek",
            "viewed": 1513
        },
        "renderpass": [
            {
                "code": "\n/*\n\tmega-lo-march\n\n\tpretty basic 90s-looking demo effect with some audio sync.\n\tderived from an old marching test I often use as website placeholder :-)\n\n\tby Superplek/Bypass\n\tlicense: Creative Commons 4.0\n*/\n\nconst float kEps = 0.001;\nconst float kMaxDistance = 10000.0;\n\n//\n// matrix operations\n//\n\nmat3 matRotation(vec3 axis, float theta)\n{ // this one isn't too fast, don't use it in (inner) loops\n\ttheta *= 0.5;\n\taxis = normalize(axis)*sin(theta);\n\tvec4 q = vec4(axis.x, axis.y, axis.z, cos(theta));\n\n\tfloat xx = q.x*q.x;\n\tfloat yy = q.y*q.y;\n\tfloat zz = q.z*q.z;\n\tfloat xy = q.x*q.y;\n\tfloat xz = q.x*q.z;\n\tfloat yz = q.y*q.z;\n\tfloat xw = q.x*q.w;\n\tfloat yw = q.y*q.w;\n\tfloat zw = q.z*q.w;\n\n\tmat3 res;\n\tres[0] = vec3(1.0 - 2.0*(yy + zz),       2.0*(xy + zw),       2.0*(xz - yw));\n\tres[1] = vec3(      2.0*(xy - zw), 1.0 - 2.0*(xx + zz),       2.0*(yz + xw));\n\tres[2] = vec3(      2.0*(xz + yw),       2.0*(yz - xw), 1.0 - 2.0*(xx + yy));\n\treturn res;\n}\n\nmat3 matTranspose(mat3 m)\n{\n\tmat3 res;\n\tres[0] = vec3(m[0].x, m[1].x, m[2].x);\n\tres[1] = vec3(m[0].y, m[1].y, m[2].y);\n\tres[2] = vec3(m[0].z, m[1].z, m[2].z);\n\treturn res;\n}\n\n//\n// distance function\n//\n\nvec4 bumpFetch(vec3 p) // tweaked for sphere()\n{\n\tvec3 n = normalize(-p);\n\treturn\n\t\ttexture(iChannel2, p.yz)*abs(n.x) +\n\t\ttexture(iChannel2, p.xz)*abs(n.y) +\n\t\ttexture(iChannel2, p.xy)*abs(n.z);\n}\n\nfloat sphere(vec3 p, float r, float bumpiness)\n{\n\tbumpiness *= r;\n\tfloat bump = 0.0;\n\tif (length(p) < r+bumpiness) {\n\t\tbump = bumpiness*bumpFetch(p).z;\n\t}\n\t\t\n\treturn length(p)-r+bump;\n}\n\n// \n// scene, normal & march\n//\n\nfloat scene(vec3 p)\n{\n//\tmat3 m = matRotation(vec3(0.0, 0.0, 1.0), 3.14*cos(0.25*iTime));\n//\tm = matTranspose(m);\n//\tp = m*p;\n//  p.y += sin(iTime);\n\tp.z += iTime*0.65;\n\n\tp = mod(p, vec3(0.5)) - 0.25;\n\treturn sphere(p, 0.15, 0.1);\n}\n\nvec3 normal(vec3 p)\n{\n\tfloat dist = scene(p);\n\tvec3 delta = vec3(\n\t\tscene(p - vec3(kEps, 0.0, 0.0)), \n\t\tscene(p - vec3(0.0, kEps, 0.0)), \n\t\tscene(p - vec3(0.0, 0.0, kEps)));\n\treturn normalize(dist-delta);\n}\n\nfloat march(vec3 eye, vec3 dir)\n{\n\tfloat dist = 0.0;\n\tfor (int i = 0; i < 128; ++i)\n\t{\n\t\tfloat step = scene(eye + dir*dist);\n\t\tif (step < kEps)\n\t\t{\n\t\t\treturn dist;\n\t\t}\n\n\t\tdist += step;\n\t\tif (dist > kMaxDistance) break;\n\t}\n\n\treturn kMaxDistance;\n}\n\n//\n// the playground\n//\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = -1.0 + 2.0*fragCoord.xy/iResolution.xy;\n\tp.x *= iResolution.z;\n\t\n\tvec3 eye = vec3(0.0, 0.0, -1.0);\n\tvec3 dir = normalize(vec3(p.x, p.y, 1.0));\n\n\t// cheesy camera rotation\n\tmat3 m = matRotation(vec3(1.0, 0.3+1.2*sin(0.5*iTime), 0.4), iTime*0.1);\n\tdir = normalize(m*dir);\n\t\n\tfloat dist = march(eye, dir);\n\n\t// grab sound analysis\n\tfloat soundU = fragCoord.x/iResolution.x;\n\tfloat fft0 = texture(iChannel0, vec2(0.0, 0.25)).x;\n\tfloat fft = texture(iChannel0, vec2(soundU, 0.25)).x;\n\tfloat wave = texture(iChannel0, vec2(soundU, 0.75)).x;\n\n\t// hacky low-pass so fft0 can be used to sync. beat/bass\n\tfft0 = exp(max(0.0, fft0-0.5));\n\t\t\n\t// old-timey radial color cycling as \"fog\"\n\tfloat spinDir = mod(iTime, 60.0); // 2x fog fade cycle (see below)\n\tspinDir = (spinDir > 24.0 && spinDir < 54.0) ? -1.0 : 1.0;\n\tfloat rad = 1.0-sqrt(dot(p, p));\n\tfloat ang = atan(dir.y, dir.x); // rotate along w/camera\n\tfloat spin1 = sin(ang*9.0 + spinDir*(4.0*iTime + fft0*2.7 + cos(iTime + rad*3.0)));\n\tfloat spin2 = sin(ang*3.0 + spinDir*(3.0*iTime - fft0*2.7 + sin(iTime + rad*3.5)));\n\tvec3 fogColor = vec3(0.2 + spin1, spin1, spin1 + 0.25*spin2);\n\tfogColor.xyz += 0.4 + fft;\n\tfogColor *= exp(1.0-rad);\n\t\n\t// static fog\n\tvec3 fogColor2 = vec3(0.24, 0.24, 0.375);\n\n\t// cut to static fog and back every now and then\n\tfloat fogT = mod(iTime, 30.0);\n\tif (fogT > 22.0)\n\t{\n\t\tif (fogT < 24.0)\n\t\t\tfogColor = mix(fogColor, fogColor2, smoothstep(0.0, 1.0, (fogT-22.0)*0.5));\n\t\telse\n\t\t\tfogColor = mix(fogColor, fogColor2, smoothstep(1.0, 0.0, (fogT-24.0)*(1.0/6.0)));\n\t}\n\t\n\tif (dist < kMaxDistance)\n\t{\n\t\t// basic textbook lighting (diffuse & specular)\n\t\tvec3 p = eye + dist*dir;\n\t\tvec3 n = normal(p);\n\t\tvec3 l = vec3(0.0, 0.0, -1.0);\n\t\tvec3 ld = normalize(l-p);\n\t\tfloat diffuse = max(dot(n, ld), 0.0);\n\n\t\tvec3 v = normalize(l-p);\n\t\tvec3 h = normalize(ld+v);\n\t\tfloat specular = 1.0*pow(max(dot(n, h), 0.0), 14.0);\n\n\t\tvec3 chroma = texture(iChannel1, n.xy).xyz;\n//\t\tvec3 sceneColor = chroma*diffuse + chroma*specular;\n\t\tvec3 sceneColor = chroma*diffuse + specular; // monochromatic specular\n            \n\t\t// wonky rim (based on diffuse term)\n\t\tfloat rim = diffuse*diffuse;\n\t\trim = clamp((rim-0.33)*4.0, 0.0, 1.0);\n\t\tsceneColor.xyz *= rim;\n\t\t\n\t\t// composite with linear fog\n\t\tfloat fog = clamp(dist*0.2, 0.0, 1.0);\n\t\tfragColor.rgb = mix(sceneColor, fogColor, fog);\n//\t\tfragColor = mix(sceneColor, fogColor, smoothstep(0.0, 1.0, dist*0.5));\n\t}\n\telse\n\t{\n\t\tfragColor.rgb = fogColor;\n\t}\n\t\n\t// fade in (because it's nice and to mask load pops)\n\tif (iTime <  1.0)\n\t\tfragColor *= 0.0;\n\tif (iTime < 12.0)\n\t\tfragColor *= (iTime-1.0)/11.0;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 13,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}