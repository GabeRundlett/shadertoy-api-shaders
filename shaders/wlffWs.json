{
    "Shader": {
        "info": {
            "date": "1598044744",
            "description": "Computing cos(x) as a series of angle doublings. Yellow, GLSL cos(x). Red, our cos(x). This is how I remember CPUs compute cos(x). More info, perhaps, here: [url]http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.302.9075&rep=rep1&type=pdf[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wlffWs",
            "likes": 19,
            "name": "Cos(x) as doubling formula",
            "published": 3,
            "tags": [
                "cos",
                "cosine",
                "gpu"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 905
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Computing cos(x) like the CPUs do (iirc), using\n// the fact that cos(x) ≈ 1-x²/2 as initial guess\n// and cos(2x) = 2cos²(x)-1 to refine. Brought up\n// to me again partially by Walter Hacket IV.\n\n// Yellow, GLSL cos(x)\n// Red, doubling-formula cos(x)\n\n// 0: basic form,        6 iterations\n// 1: partial symmetrys, 3 iterations\n// 2: full symmetry,     2 iterations\n// 3: full symmetry,     2 iterations optimized\n// 4: full symmetry,     4 iterations optimized\n#define VERSION 0\n\nconst float kTau  = 6.2831853071;\nconst float kTau2 = 6.2831853071*0.5;\nconst float kTau4 = 6.2831853071*0.25;\nconst float kTau8 = 6.2831853071*0.125;\n\n#if VERSION==0\nfloat mcos( float x )\n{\n    x = mod(x,kTau);\n    \n    x /= 64.0;       // x = 𝛼/64\n    x = 0.5*x*x-1.0; // cos( x) ≈ 1-x²/2\n\n    x = 2.0*x*x-1.0; // cos(2x) = 2cos²(x)-1\n    x = 2.0*x*x-1.0; // cos(2x) = 2cos²(x)-1\n    x = 2.0*x*x-1.0; // cos(2x) = 2cos²(x)-1\n    x = 2.0*x*x-1.0; // cos(2x) = 2cos²(x)-1\n    x = 2.0*x*x-1.0; // cos(2x) = 2cos²(x)-1\n    x = 2.0*x*x-1.0; // cos(2x) = 2cos²(x)-1\n    \n    return x;\n}\n#endif\n\n#if VERSION==1\nfloat mcos( float x )\n{\n    x = mod(x,kTau);\n    \n    bool negx = x>kTau2; if( negx ) x = x-kTau2;\n    bool negy = x>kTau4; if( negy ) x = kTau2-x;\n    \n    x /= 8.0;        // x = 𝛼/8\n    x = 0.5*x*x-1.0; // cos( x) ≈ 1-x²/2\n    x = 2.0*x*x-1.0; // cos(2x) = 2cos²(x)-1\n    x = 2.0*x*x-1.0; // cos(2x) = 2cos²(x)-1\n    x = 2.0*x*x-1.0; // cos(2x) = 2cos²(x)-1\n\n    return (negx^^negy) ? -x : x;\n}\n#endif\n\n#if VERSION==2\nfloat mcos( float x )\n{\n    x = mod(x,kTau);\n    \n    bool negx = x>kTau2; if( negx ) x = x-kTau2;\n    bool negy = x>kTau4; if( negy ) x = kTau2-x;\n    bool negz = x>kTau8; if( negz ) x = kTau4-x;\n    \n    x /= 4.0;        // x = 𝛼/4\n    x = 0.5*x*x-1.0; // cos( x) ≈ 1-x²/2\n    x = 2.0*x*x-1.0; // cos(2x) = 2cos²(x)-1\n    x = 2.0*x*x-1.0; // cos(2x) = 2cos²(x)-1\n\n    if( negz )        x = sqrt(1.0-x*x);\n    if( negx ^^ negy) x = -x;\n    \n    return x;\n}\n#endif\n\n#if VERSION==3\nfloat mcos( float x )\n{\n    x = mod(x,kTau);\n    \n    bool negx = x>kTau2; if( negx ) x = x-kTau2;\n    bool negy = x>kTau4; if( negy ) x = kTau2-x;\n    bool negz = x>kTau8; if( negz ) x = kTau4-x;\n    \n    x = x*x;              // MUL\n    x = x*(1.0/32.0)-1.0; // MAD\n    x = x*x;              // MUL\n    x = x*x-x;            // MAD\n    x = 8.0*x+1.0;        // MAD\n\n    if( negz )        x = sqrt(1.0-x*x);\n    if( negx ^^ negy) x = -x;\n    \n    return x;\n}\n#endif\n\n#if VERSION==4\nfloat mcos( float x )\n{\n    x = mod(x,kTau);\n    \n    bool negx = x>kTau2; if( negx ) x = x-kTau2;\n    bool negy = x>kTau4; if( negy ) x = kTau2-x;\n    bool negz = x>kTau8; if( negz ) x = kTau4-x;\n    \n    x = x*x;               // MUL\n    x = x*(1.0/512.0)-1.0; // MAD\n    x = x*x;               // MUL\n    x = x*x-x;             // MAD\n    x = 8.0*x+1.0;         // MAD\n    x = x*x;               // MUL\n    x = x*x-x;             // MAD\n    x = 8.0*x+1.0;         // MAD\n\n    if( negz )        x = sqrt(1.0-x*x);\n    if( negx ^^ negy) x = -x;\n    \n    return x;\n}\n#endif\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    vec2  p = fragCoord/iResolution.y;\n    float px = 1.0/iResolution.y;\n\n    vec3 col = vec3( 0.2 );\n    \n    // cos, yellow\n    float y = 0.5+0.4*cos( 7.0*p.x );\n    float dy = dFdx(y)/px;\n    col = mix( col, vec3(1.0,1.0,0.0), 1.0 - smoothstep( 0.0, 2.0*px, abs(p.y-y)/sqrt(1.0+dy*dy)) );\n        \n    // mcos, red\n    if( cos(iTime*kTau)>0.0 )\n    {\n    y = 0.5+0.4*mcos( 7.0*p.x );\n    dy = dFdx(y)/px;\n    col = mix( col, vec3(1.0,0.0,0.0), 1.0 - smoothstep( 0.0, 2.0*px, abs(p.y-y)/sqrt(1.0+dy*dy) ) );\n    }\n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}