{
    "Shader": {
        "info": {
            "date": "1701552670",
            "description": "‚ú™ Go to \"Image\" tab and quickly pause/play iChannel0 to increase the delay and see the effect.\n\n‚ú™ Press the left arrow thing below the shader to reset everything.\n\nBased on [url]https://www.youtube.com/watch?v=NSS6yAMZF78p[/url]\n",
            "flags": 32,
            "hasliked": 0,
            "id": "DldfWB",
            "likes": 5,
            "name": "Motion Extraction (cmarangu)",
            "published": 3,
            "tags": [
                "video",
                "motion",
                "computervision",
                "motionextraction"
            ],
            "usePreview": 0,
            "username": "cmarangu",
            "viewed": 256
        },
        "renderpass": [
            {
                "code": "// Chase Marangu\n// 2023 12 02\n// Started 3:34pm ET\n// Finished 4:35pm ET\n// Updated 6:01pm ET - 6:22pm ET\n// Upadated 2023 12 03 7:18pm ET based on a friend's feedback to make it more like the Posy's solution\n// Thank you so much @Posy !\n// Posy - Motion Extraction - https://www.youtube.com/watch?v=NSS6yAMZF78\n//\n// 1) Duplicate Video (maybe time shift it 1 frame or 1 second or maybe keep the first frame)\n// 2) invert the the duplicate\n// 3) show the duplicate 50% transparent over the original\n//\n// 7:15pm ET my friend said it's something about \"sobel operator\"\n// 2023 12 03 12:23am ET I had this idea\n// motion extraction is basically a function f:ùïç‚Üíùïç\n// ùïç = ([0, 1)^3)^(w x h x duration) = the set of all videos\n// - [0, 1)^3 = the set of all vectors with 0‚â§r<1 0‚â§g<1 0‚â§b<1\n// - ([0, 1)^3)^(w x h x duration) = the set of all tensors(?) where each entry is a color\n// - - and where width=w, height=h, duration=duration\n// - - I'm kind of making up this notation based on Cartesian power. However I hope you get the gist\n// - - A video assigns a color (3-dimensional point) to every point in a 3-dimensional space\n// - - Motion extraction assigns an output video to each input video\n//\n// f could be implemented with several platforms/technologies/apis including but not limited to\n// - OpenGL/WebGL/GLSL/fragment shader/shadertoy (this)\n// - AfterEffects\n// - HTML/CSS + JavaScript Web APIs using stuff like HTMLVideoElement.currentTime and CSS filter:url(...) and SVG filters\n\n// 0 = just the motion (change in brightness across frames)\n// 1 = motion + color video below it\n#define mode 0\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 screen = fragCoord / iResolution.xy;\n    vec3 c; c = vec3(0.); // accumulator, not used for accumulation really\n    vec3 currentFrame = texture(iChannel0, screen).rgb; // original video, current time\n    vec3 prevFrame = texture(iChannel3, screen).rgb; // last frame, assuming time shifted\n    # if mode == 1\n    c += currentFrame*.5;\n    #endif\n    currentFrame = vec3(0.0) - currentFrame; // invert colors; it is negative to act more like phases in audio\n    // sum the two\n    c += (currentFrame + prevFrame);\n    fragColor = vec4(c.r, c.g, c.b, 1.);\n}\n\n/*\n// 0 = just the motion (change in brightness across frames)\n// 1 = motion + color video below it\n#define mode 0\n\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 screen = fragCoord / iResolution.xy;\n    vec3 c; c = vec3(0.);\n    vec3 currentFrame = texture(iChannel0, screen).rgb; // original video\n    vec3 prevFrame = texture(iChannel3, screen).rgb;\n    //\n    //c += currentFrame*1.0 +(currentFrame - prevFrame)*0.5;\n    // update 6:01pm ET - add mode for black/white\n    # if mode == 1\n    c += currentFrame*.5;\n    #endif\n    c += vec3(.5);\n    // c += vec3(length(currentFrame - prevFrame))*1.5;\n    //c += vec3(\n    //    currentFrame.r - prevFrame.r +\n    //    currentFrame.g - prevFrame.g +\n    //    currentFrame.b - prevFrame.b)*1.5;\n    //c += vec3( length(currentFrame) - length(prevFrame) )*3.; // just test brightness\n    c += vec3( length(currentFrame) - length(prevFrame) )*.1;\n    fragColor = vec4(c.r, c.g, c.b, 1.);\n}\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 screen = fragCoord / iResolution.xy;\n    fragColor.rgb = texture(iChannel0, screen).rgb;\n    fragColor.a = 1.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 screen = fragCoord / iResolution.xy;\n    fragColor.rgb = texture(iChannel1, screen).rgb;\n    fragColor.a = 1.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 screen = fragCoord / iResolution.xy;\n    fragColor.rgb = texture(iChannel2, screen).rgb;\n    fragColor.a = 1.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}