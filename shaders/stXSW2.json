{
    "Shader": {
        "info": {
            "date": "1626546470",
            "description": "A basic implementation of simple automata.\nClick to draw and see Buffer A too change the ruleset.",
            "flags": 32,
            "hasliked": 0,
            "id": "stXSW2",
            "likes": 2,
            "name": "Atomata",
            "published": 3,
            "tags": [
                "conway",
                "gameoflife",
                "cellularautomata",
                "gridworld"
            ],
            "usePreview": 0,
            "username": "Pixdigit",
            "viewed": 258
        },
        "renderpass": [
            {
                "code": "// See Buffer A for implementation and tweaking\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = vec4(texture(iChannel0, uv).rgb, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int CONWAY = 1;\nconst int ELEMENTARY = 2;\n\n\n//Adjust here\n//--------------------------\nconst float timeStep = 0.01;\nconst int ruleset = ELEMENTARY;\nconst float rule = 30.;\n//--------------------------\n\n\n\nbool fetch(vec2 coord) {\n    vec4 val = texelFetch(iChannel0, ivec2(coord), 0);\n    return val.r > .5;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Place pixel below mouse\n    if (length(floor(iMouse.zw) - floor(fragCoord.xy)) < 1.) {\n        fragColor = vec4(1.);\n    } else {\n        // Run ruleset if timestep has been reached\n        if (mod(iTime - iTimeDelta, timeStep) > mod(iTime, timeStep)) { \n\n            // Get neighbour states\n            bool tl = fetch(fragCoord + vec2(-1.,  1.));\n            bool tm = fetch(fragCoord + vec2( 0.,  1.));\n            bool tr = fetch(fragCoord + vec2( 1.,  1.));\n            bool ml = fetch(fragCoord + vec2(-1.,  0.));\n            bool mm = fetch(fragCoord + vec2( 0.,  0.));\n            bool mr = fetch(fragCoord + vec2( 1.,  0.));\n            bool bl = fetch(fragCoord + vec2(-1., -1.));\n            bool bm = fetch(fragCoord + vec2( 0., -1.));\n            bool br = fetch(fragCoord + vec2( 1., -1.));\n\n            int sum = int(tl) + int(tm) + int(tr)\n                    + int(ml) +           int(mr)\n                    + int(bl) + int(bm) + int(br);\n\n            // Apply rule(s)\n            bool alive;\n\n            if (ruleset == CONWAY) {\n                alive = sum == 3 || (alive && sum == 2);\n            } else if (ruleset == ELEMENTARY) {\n                alive = (( tl &&  tm &&  tr) && (mod(rule, 256.) >= 128.))\n                          || (( tl &&  tm && !tr) && (mod(rule, 128.) >=  64.))\n                          || (( tl && !tm &&  tr) && (mod(rule,  64.) >=  32.))\n                          || (( tl && !tm && !tr) && (mod(rule,  32.) >=  16.))\n                          || ((!tl &&  tm &&  tr) && (mod(rule,  16.) >=   8.))\n                          || ((!tl &&  tm && !tr) && (mod(rule,   8.) >=   4.))\n                          || ((!tl && !tm &&  tr) && (mod(rule,   4.) >=   2.))\n                          || ((!tl && !tm && !tr) && (mod(rule,   2.) >=   1.))\n                          //Keep \"seed\" ie. singe pixel at the top\n                          ||(!(tl || tm || tr) && mm);\n            }\n\n            // Store and display result\n            if (alive) {\n                fragColor = vec4(1.);\n            } else {\n                fragColor = vec4(0.);\n            }\n        } else {\n            // Keep previous state\n            fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n        }\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}