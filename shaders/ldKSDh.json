{
    "Shader": {
        "info": {
            "date": "1464176988",
            "description": "Original by [url=https://www.shadertoy.com/view/lsKSzm]vochsel[/url]",
            "flags": 96,
            "hasliked": 0,
            "id": "ldKSDh",
            "likes": 13,
            "name": "Circular Audio Spectrum Mk2",
            "published": 3,
            "tags": [
                "2d",
                "music",
                "audio",
                "visualizer",
                "multipass"
            ],
            "usePreview": 0,
            "username": "skyrising",
            "viewed": 1725
        },
        "renderpass": [
            {
                "code": "//Created by Ben Skinner - @vochsel\n//Modified by @skyrising\n//Song: XENOX - Arcade\n\n#define PI 3.141592\n\n#define rgb(r, g, b) vec3(float(r)/255., float(g)/255., float(b)/255.)\n\n#define COL_A rgb(251,184,132)\n#define COL_B rgb(213,50,98) \n#define COL_C rgb(79,202,241)\n\n\n//HSV convertors http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n    vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 spec(float time, float y)\n{\n    return texture(iChannel0, vec2(time, y)).rgb;\n}\n\nvec3 freq(float time, float y) {\n    return spec(time, y)\n        - spec(time, y*2.0)\n        - spec(time, y*4.0)\n        - spec(time, y*8.0)\n        //- spec(time, y*16.0)\n        ;\n}\n\nvec2 beat(float q)\n{\n    return (\n        spec(q, 0.0).xy\n        +spec(q, 0.05).xy/1.5\n        +spec(q, 0.1).xy/4.0\n        +spec(q, 0.2).xy/8.0\n        //+spec(q, 0.4).xy/16.0\n        )/1.8;\n}\n\nfloat circle(vec2 q, vec2 p, float rad)\n{\n    float l = length(q - p);\n    \n    return smoothstep(rad, rad - 0.005, l);\n}\n\nvec3 rand(float x)\n{\n    return texture(iChannel1, vec2(x, 0.0)).xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 sc = fragCoord.xy / iResolution.xy;\n    vec2 uv = sc * 2.0 - 1.0;\n    float aspect = iResolution.x/iResolution.y;\n    uv.x *= aspect;\n    \n    float t = iTime;\n    \n    vec3 col = vec3(0.12);\n   \n    float cRad = 0.75;\n    const float res = 80.0;\n    \n    for(float i = PI*1.99; i > 0.0; i-=PI/res*2.0)\n    {\n        float x = sin(i) * cRad;\n        float y = cos(i) * cRad;\n        \n        float t = float(i)/res * 2.;\n        \n        vec2 s = beat(t);\n        \n        float r = pow(s.x, 3.0)*0.025 + 0.005;\n        r *= (PI*2.75-i)*0.3;\n        \n        float c = circle(uv, vec2(x,y), r);\n    \t       \n        //vec3 cCol = mix(COL_C, COL_B, smoothstep(0.0, 0.072, r));\n        //cCol = mix(cCol, COL_A, smoothstep(0.072, 0.172, r));\n        vec3 cCol = hsv2rgb(vec3(s.y*750.0, 0.3, .85)) - rand(s.y).x*0.2;    \n        \n    \tcol = mix(col, cCol, c);\n    }\n    vec2 f = (fragCoord/iResolution.xy).yx;\n    float y = f.y;\n    float time = f.x < .1 ? 0.0 : (f.x-.1)*.1;\n    float bg = pow(.6+mix(spec(time, y).b, spec(time, y).r*.5, .3), 100.0);\n    vec3 c = texture(iChannel0, fragCoord/iResolution.xy).rgb;\n    vec3 bgColor = bg*hsv2rgb(vec3(time-iTime*.1, .7, .1*pow(.8-time*0.8, 4.0)));\n    vec3 col1 = col + texture(iChannel1, uv*2.).x*.04;\n    vec3 mixed = col != vec3(0.12) ? col1 : mix(bgColor, col1, .9);\n\tfragColor = vec4(mixed,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float spec(float x)\n{\n    vec2 stereo = texture(iChannel1, vec2(x, 0.0)).xy;\n    return (stereo.x + stereo.y)*.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 px = 1.0/iResolution.xy;\n   \tvec2 sc = fragCoord.xy / iResolution.xy; \n    \n    vec3 storage = vec3(0.0); \n    \n    if(sc.x < px.x) {\n        storage.x = storage.z = spec(sc.y * .1);\n        storage.y = iTime/1000.;\n        storage.z = (storage.z - min(.9, .6*pow(texture(iChannel0, sc).r, 2.0)));\n    } else\n\t    storage = texture(iChannel0, sc - vec2(px.x, 0.0)).rgb;\n    \n    fragColor = vec4(storage, 0.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 3364,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/z_3n/zenox-arcade"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}