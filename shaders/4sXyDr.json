{
    "Shader": {
        "info": {
            "date": "1487626410",
            "description": "Unsigned sistance to a cubic bezier curve segment using Newton-Raphson. \n\nWorks alright for \"nice\" control points. Fails to find the global minima if the segment curvature is too large or if the curve intersects.",
            "flags": 0,
            "hasliked": 0,
            "id": "4sXyDr",
            "likes": 25,
            "name": "Distance to Cubic Bezier Curve",
            "published": 3,
            "tags": [
                "distance",
                "cubicbezier"
            ],
            "usePreview": 0,
            "username": "mv",
            "viewed": 1650
        },
        "renderpass": [
            {
                "code": "#define CLAMP\n\nfloat distanceBezier(vec2 p, vec2 P0, vec2 P1, vec2 P2, vec2 P3)\n{\n    // Cubic Bezier curve: \n    //\n    //     B(t) = (1-t)^3 P0 + (1-t)^2 t P1 + (1-t) t^2 P2 + t^3 P3\n    //\n    // or\n    //\n    //     B(t) = A t^3 + B t^2 + C t + D\n    //\n    // where\n    //\n    //     A = -P0 + 3 P1 - 3 P2 + P3\n    // \t   B = 3 (P0 - 2 P1 + P2)\n    //     C = 3 (P1 - P0)\n    //     D = P0\n    \n    vec2 A = -P0 + 3.0*P1 - 3.0*P2 + P3;\n    vec2 B = 3.0*(P0 - 2.0*P1 + P2);\n    vec2 C = 3.0*(P1 - P0);\n    vec2 D = P0;\n    \n    // Goal:\n    //\n    //     \"find t such that d^2 = ||B(t) - p||^2 is minimized\"\n    //\n    // i.e. the find t such that\n    //\n    //     f(t) = d/dt dot(B(t) - p, B(t) - p) = 0\n    // \n    // and hope that is a global minima\n    \n    // Expanding the above gives a 5th degree polynomial:\n    //\n    //     f(t) = a5 t^5 + a4 t^4 + a3 t^3 + a2 t^2 + a1 t + a0\n    //\n    // where \n    //\n    //     a5 = 6 A A\n    //     a4 = 10 A B\n    //     a3 = 8 A C + 4 B B\n    //     a2 = 6 A D' + 6 B C\n    //     a1 = 4 B D' + 2 C C\n    //     a0 = 2 C D'\n    //\n    // where\n    // \n    //     D' = D - p\n    \n    float a5 = 6.0*dot(A,A);\n    float a4 = 10.0*dot(A,B);\n    float a3 = 8.0*dot(A,C) + 4.0*dot(B,B);\n    float a2 = 6.0*dot(A,D-p) + 6.0*dot(B,C);\n    float a1 = 4.0*dot(B,D-p) + 2.0*dot(C,C);\n    float a0 = 2.0*dot(C,D-p);\n    \n    // calculate distances to the control points\n    float d0 = length(p-P0);\n    float d1 = length(p-P1);\n    float d2 = length(p-P2);\n    float d3 = length(p-P3);\n    float d = min(d0, min(d1, min(d2,d3)));\n    \n    \n    // Use the Newton-Raphson method to find a local minima, i.e. iterate:\n    //\n    //     t_{n+1} = t_n - f(t_n)/f'(t_n)\n    //\n    // until convergence is reached\n    \n    // Choose initial value of t\n    float t;\n    if (abs(d3 - d) < 1.0e-5)\n        t = 1.0;\n    else if (abs(d0 - d) < 1.0e-5)\n        t = 0.0;\n    else\n        t = 0.5;\n        \n\t// iterate\n    for (int i = 0; i < 10; i++) {\n        float t2 = t*t;\n        float t3 = t2*t;\n        float t4 = t3*t;\n        float t5 = t4*t;\n        \n        float f = a5*t5 + a4*t4 + a3*t3 + a2*t2 + a1*t + a0;\n        float df = 5.0*a5*t4 + 4.0*a4*t3 + 3.0*a3*t2 + 2.0*a2*t + a1;\n        \n        t = t - f/df;\n    }\n    \n    // clamp to edge of bezier segment\n#ifdef CLAMP\n    t = clamp(t, 0.0, 1.0);\n#endif\n    \n    // get the point on the curve\n    vec2 P = A*t*t*t + B*t*t + C*t + D;\n        \n    // return distance to the point on the curve\n    if (d < 0.1) { \n        // to see the control points\n        return -1000.0;\n    } else {\n        // Newton iteration converge to local minima that is not the global for some values\n        // return length(p-P); \n        \n        // Taking the union with the end point distances\n        // seem to fix the issue for most \"nice\" control points\n        // (since NR can only find interior points?)\n    \treturn min(length(p-P), min(d0, d3)); \n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = 5.0;\n    // calculate coordinates of fragment\n\tvec2 p = zoom*(2.0*fragCoord.xy - iResolution.xy)/iResolution.y;\n\n    // define control points\n    float a = 2.0*sin(0.5*0.5*0.5*2.0*3.1415925*iTime);\n    vec2 P0 = vec2(-1.00 - 1.00*cos(1.0*a), 1.0*sin(a));\n    vec2 P1 = vec2(-0.75 + 0.25*cos(0.5*a), 0.0*sin(a));\n    vec2 P2 = vec2( 0.75 - 0.25*cos(0.5*a), 0.0*sin(a));\n    vec2 P3 = vec2( 1.00 + 1.00*cos(1.0*a), 1.0*sin(a));\n    \n    // get the distance to the bezier curve\n    float r = distanceBezier(p, P0, P1, P2, P3);\n    \n    if (r < 0.0) {\n        // control point\n        fragColor = vec4(1.0, 0.0, 1.0, 1.0);\n    } else {\n        // make the distance field periodic, for viewing contour lines\n        \n        // 2 stripes per unit length\n        float f = 2.0*3.1416*2.0; \n        \n        // smoothen\n        float w = 1.5*fwidth(f*r);\n        float s = smoothstep(-w, w, 0.0+sin(f*r+3.1415/2.0));\n        \n        //\n        fragColor = vec4(vec3(s), 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}