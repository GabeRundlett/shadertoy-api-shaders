{
    "Shader": {
        "info": {
            "date": "1622506875",
            "description": "This noise algorithm is based on Perlin noise to output a random yeat smooth looking map, such as terrain for games.",
            "flags": 0,
            "hasliked": 0,
            "id": "NtsGD7",
            "likes": 2,
            "name": "noise_MrNissenDK",
            "published": 3,
            "tags": [
                "noise",
                "game",
                "terrain",
                "perlin",
                "smooth"
            ],
            "usePreview": 0,
            "username": "MrNissenDK",
            "viewed": 287
        },
        "renderpass": [
            {
                "code": "float res = 10.; // how many sqrs along the x axes\nint seed = -5;\nint detail = 8;\nbool debug = false;\n\n\nfloat pixelSize = 0.;\n\nfloat[] digitsPi = float[](14.159265,35.897932,38.462643,38.327950,28.841971,69.399375,10.582097,49.445923,78.16406,28.620899,86.280348);\n\nfloat getDigit(float index){\n    return digitsPi[int(abs(mod(index, float(digitsPi.length()))))];\n}\nfloat getDigit(int index){\n    return getDigit(float(index));\n}\nfloat getRandom(vec2 index){\n    index = mod(index, 65535.);\n    float id = length(index) * float(seed) + length(index) + float(seed);\n    return fract(sin(dot(index, vec2(getDigit(id+265.), getDigit(id+159.))))* getDigit(id + 314.));\n}\nfloat getRandom(vec3 index){\n    index = mod(index, 65535.);\n    float id = length(index) * float(seed) + length(index) + float(seed);\n    return fract(sin(dot(index, vec3(getDigit(id+265.), getDigit(id+159.), getDigit(id+582.))))* getDigit(id + 314.));\n}\nfloat smoothMix(vec2 from, vec2 to, vec2 t){\n    t = smoothstep(0.,1.,t);\n    return mix(\n        mix(getRandom(from), getRandom(vec2(to.x, from.y)), t.x),\n        mix(getRandom(vec2(from.x, to.y)), getRandom(to), t.x),\n    t.y);\n}\nfloat smoothMix(vec3 from, vec3 to, vec3 t){\n    t = smoothstep(0.,1.,t);\n    return mix(\n        mix(\n            mix(getRandom(from), getRandom(vec3(to.x, from.yz)), t.x),\n            mix(getRandom(vec3(from.x, to.y, from.z)), getRandom(vec3(to.xy, from.z)), t.x),\n        t.y),\n\n        mix(\n            mix(getRandom(vec3(from.xy, to.z)), getRandom(vec3(to.x, from.y, to.z)), t.x),\n            mix(getRandom(vec3(from.x, to.yz)), getRandom(to), t.x),\n        t.y),\n\n    t.z);\n}\nfloat getNoise(vec2 index){\n    vec2 low = floor(index);\n    float _output = 0.;\n    float h = 0.;\n    \n    for(float i = 1.; i <= float(detail); i ++){\n        vec2 low = floor(index);\n        _output += smoothMix(low, low + vec2(1,1), fract(index)) * (float(detail)/i);\n        h += (float(detail)/i);\n        index += float(seed) + i;\n        index *= 2.;\n    }\n    return _output / h;\n}\nfloat getNoise(vec3 index){\n    float _output = 0.;\n    float h = 0.;\n    \n    for(float i = 1.; i <= float(detail); i ++){\n        vec3 low = floor(index);\n        _output += smoothMix(low, low + vec3(1,1,1), fract(index)) * (float(detail)/i);\n        h += (float(detail)/i);\n        index += float(seed) + i;\n        index *= 2.;\n    }\n    return _output / h;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ((fragCoord - .5 * iResolution.xy) / (iResolution.x/res));\n    pixelSize = res / iResolution.y;\n    \n    vec3 col = vec3(getNoise(vec3(uv, iTime/5.)));\n    \n    if( debug && (\n        fract(uv.x) <= pixelSize || fract(uv.x) >= 1.-pixelSize || \n        fract(uv.y) <= pixelSize || fract(uv.y) >= 1.-pixelSize)\n    ) col.r = 1.;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}