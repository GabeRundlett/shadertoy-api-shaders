{
    "Shader": {
        "info": {
            "date": "1542148099",
            "description": "Yet another shader tribute to Piet Hein and his infatuation with super-ellipse shapes.\n\nhttps://en.wikipedia.org/wiki/Piet_Hein_(scientist)",
            "flags": 0,
            "hasliked": 0,
            "id": "llVfRm",
            "likes": 10,
            "name": "Another tribute to Piet Hein",
            "published": 3,
            "tags": [
                "squircle",
                "superellipse",
                "hein",
                "grook"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 659
        },
        "renderpass": [
            {
                "code": "#define MAX_DIST 14.0\n\n\nfloat circle_sdf(in vec3 pt) {\n    return length(pt) - 0.4;\n}\n\nfloat sdf(in vec3 pt) {\n    vec3 scales = vec3(0.8, 0.565, 0.4);\n    vec3 tmp = pt * scales;\n    tmp = tmp * tmp;\n    tmp = tmp * tmp; // to the fourth power\n    float pow_sum = dot(vec3(1.0), tmp);\n    float quartic_norm = sqrt(sqrt(pow_sum));\n    return quartic_norm - 0.15;\n}\n\nvec3 sdf_grad(in vec3 pt) {\n    float f = sdf(pt);\n    const float h = 0.001;\n    const float h_inv = 1000.0;\n    \n    return h_inv *\n        vec3(sdf(pt + vec3(h, 0.0, 0.0)) - f,\n             sdf(pt + vec3(0.0, h, 0.0)) - f,\n             sdf(pt + vec3(0.0, 0.0, h)) - f);\n}\n\nfloat raymarch(in vec3 orig, in vec3 dir) {\n    float accum = 0.0;\n    float d = sdf(orig);\n    vec3 pt = orig;\n    for (int i = 0; i < 256; ++i) {\n        accum = accum + 0.7 * d;\n        pt = orig + dir * accum;\n        d = sdf(pt);\n        if (accum > MAX_DIST || abs(d) < 1.0e-6) {\n            return accum;\n        }\n    }\n    return MAX_DIST + 0.1;\n}\n\nfloat ramp(in float a, in float b, in float x) {\n    return clamp((x-a)/(b-a), 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy)/iResolution.y;\n    \n    float render_mode = clamp(0.5 * (iMouse.x - fragCoord.x), 0.0, 1.0);\n    \n    vec3 dir = normalize(vec3(uv, -2.0));\n    vec3 orig = vec3(0.0, 0.0, 0.75);\n    \n    const float rotspeed = 0.6;\n    float theta = rotspeed * iTime;\n\tfloat ct = cos(theta);\n    float st = sin(theta);\n    \n    mat3 rot = \n        mat3(ct, 0.0, st,\n             0.0, 1.0, 0.0,\n             -st, 0.0, ct);\n    float phi = 0.3 + 1.0 * iMouse.y / iResolution.y;\n    float cp = cos(phi);\n    float sp = sin(phi);\n    mat3 tilt =\n        mat3(1.0, 0.0, 0.0,\n             0.0, cp, -sp,\n             0.0, sp, cp);\n    \n    mat3 tilt_inv = \n        mat3(1.0, 0.0, 0.0,\n             0.0, cp, sp,\n             0.0, -sp, cp);\n    mat3 rot_inv =\n        mat3(ct, 0.0, -st,\n             0.0, 1.0, 0.0,\n             st, 0.0, ct);\n    orig = rot * tilt * orig;\n    dir = rot * tilt * dir;\n\n    // Time varying pixel color\n\n    vec3 col2 = 0.2 + 0.8 * texture(iChannel0, rot_inv * dir).rgb;\n    vec3 col1 = 0.5 + 0.2 * rot_inv * dir;\n    \n    float d = raymarch(orig, dir);\n    \n    if (d < MAX_DIST) {\n        vec3 pt = orig + dir * d;\n        vec3 norm = normalize(sdf_grad(pt));\n        vec3 bounce = normalize(reflect(dir, norm));\n        float weight = ramp(0.00, 0.35, abs(dot(dir, norm)));\n        col2 = \n            mix(col2, \n            0.5 * texture(iChannel0, rot_inv * bounce).rgb +\n            0.5 * texture(iChannel1, rot_inv * bounce).rgb,\n                weight);\n        col1 = 0.5 + 0.5 * rot_inv * bounce;\n    }\n\n    // Output to screen\n    fragColor = vec4(mix(col1, col2, render_mode),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}