{
    "Shader": {
        "info": {
            "date": "1612623360",
            "description": "Licence CC0: Tunneling through apollian fractals\nThe result of a few hours of saturday coding",
            "flags": 0,
            "hasliked": 0,
            "id": "tlcBWH",
            "likes": 28,
            "name": "Tunneling through apollian frac",
            "published": 3,
            "tags": [
                "2d",
                "apollian"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 782
        },
        "renderpass": [
            {
                "code": "// Licence CC0: Tunneling through apollian fractals\n//  The result of a few hours of saturday coding\n\n// -----------------------------------------------------------------------------\n// COMMON\n// -----------------------------------------------------------------------------\n\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define TIME            iTime\n#define RESOLUTION      iResolution\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PSIN(x)         (0.5+0.5*sin(x))\n#define LESS(a,b,c)     mix(a,b,step(0.,c))\n#define SABS(x,k)       LESS((.5/(k))*(x)*(x)+(k)*.5,abs(x),abs(x)-(k))\n#define L2(x)           dot(x, x)\n\nconst vec3 std_gamma        = vec3(2.2, 2.2, 2.2);\n\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nvec2 toRect(vec2 p) {\n  return vec2(p.x*cos(p.y), p.x*sin(p.y));\n}\n\nfloat modMirror1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize,size) - halfsize;\n  p *= mod(c, 2.0)*2.0 - 1.0;\n  return c;\n}\n\nfloat smoothKaleidoscope(inout vec2 p, float sm, float rep) {\n  vec2 hp = p;\n\n  vec2 hpp = toPolar(hp);\n  float rn = modMirror1(hpp.y, TAU/rep);\n\n  float sa = PI/rep - SABS(PI/rep - abs(hpp.y), sm);\n  hpp.y = sign(hpp.y)*(sa);\n\n  hp = toRect(hpp);\n\n  p = hp;\n\n  return rn;\n}\n\nvec4 alphaBlend(vec4 back, vec4 front) {\n  float w = front.w + back.w*(1.0-front.w);\n  vec3 xyz = (front.xyz*front.w + back.xyz*back.w*(1.0-front.w))/w;\n  return w > 0.0 ? vec4(xyz, w) : vec4(0.0);\n}\n\nvec3 alphaBlend(vec3 back, vec4 front) {\n  return mix(back, front.xyz, front.w);\n}\n\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\nfloat pmin(float a, float b, float k) {\n  float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0);\n  \n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nvec3 hsv2rgb(vec3 c) {\n  const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat apollian(vec4 p, float s) {\n  float scale = 1.0;\n\n  for(int i=0; i<7; ++i) {\n    p = -1.0 + 2.0*fract(0.5*p+0.5);\n\n    float r2 = dot(p,p);\n    \n    float k  = s/r2;\n    p       *= k;\n    scale   *= k;\n  }\n  \n  return abs(p.y)/scale;\n}\n\nvec2 mod2_1(inout vec2 p) {\n  vec2 c = floor(p + 0.5);\n  p = fract(p + 0.5) - 0.5;\n  return c;\n}\n\nfloat hex(vec2 p, float r) {\n  const vec3 k = vec3(-sqrt(3.0)/2.0,1.0/2.0,sqrt(3.0)/3.0);\n  p = p.yx;\n  p = abs(p);\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  return length(p)*sign(p.y);\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\n// -----------------------------------------------------------------------------\n// PATH\n// -----------------------------------------------------------------------------\n\n// The path function\nvec3 offset(float z) {\n  float a = z;\n  vec2 p = -0.10*(vec2(cos(a), sin(a*sqrt(2.0))) + vec2(cos(a*sqrt(0.75)), sin(a*sqrt(0.5))));\n  return vec3(p, z);\n}\n\n// The derivate of the path function\n//  Used to generate where we are looking\nvec3 doffset(float z) {\n  float eps = 0.1;\n  return 0.5*(offset(z + eps) - offset(z - eps))/eps;\n}\n\n// The second derivate of the path function\n//  Used to generate tilt\nvec3 ddoffset(float z) {\n  float eps = 0.1;\n  return 0.125*(doffset(z + eps) - doffset(z - eps))/eps;\n}\n\n// -----------------------------------------------------------------------------\n// PLANE MARCHER\n// -----------------------------------------------------------------------------\n\nfloat weird(vec2 p, float h) {\n  float z = 4.0;\n  float tm = 0.1*TIME+h*10.0;\n  p *= ROT(tm*0.5);\n  float r = 0.5;\n  vec4 off = vec4(r*PSIN(tm*sqrt(3.0)), r*PSIN(tm*sqrt(1.5)), r*PSIN(tm*sqrt(2.0)), 0.0);\n  vec4 pp = vec4(p.x, p.y, 0.0, 0.0)+off;\n  pp.w = 0.125*(1.0-tanh_approx(length(pp.xyz)));\n  pp.yz *= ROT(tm);\n  pp.xz *= ROT(tm*sqrt(0.5));\n  pp /= z;\n  float d = apollian(pp, 0.8+h);\n  return d*z;\n}\n\nfloat circles(vec2 p) {\n  vec2 pp = toPolar(p);\n  const float ss = 0.25;\n  pp.x = fract(pp.x*ss)/ss;\n  p = toRect(pp);\n  float d = circle(p, 1.0);\n  return d;\n}\n\nfloat onionize(float d) {\n  d = abs(d) - 0.02;\n  d = abs(d) - 0.005;\n  d = abs(d) - 0.0025;\n  return d;\n}\n\nvec2 df(vec2 p, float h) {\n  vec2 wp = p;\n  float rep = 10.0;\n  float ss = 0.05*6.0/rep;\n  float n = smoothKaleidoscope(wp, ss, rep);\n  \n  float d0 = weird(wp, h);\n  d0 = onionize(d0);\n  float d1 = hex(p, 0.25)-0.1;\n  float d2 = circles(p);\n  const float lw = 0.0125;\n  d2 = abs(d2)-lw;\n  float d  = pmin(pmin(d0, d2, 0.1), abs(d1)-lw, 0.05);\n  return vec2(d, d1+lw);\n}\n\n// Plane generating function returns rgba\n//  pp is point on plane\n//  off is path at plane z\n//  aa is estimated pixel size at the plane\n//  n is plane number\nvec4 plane(vec3 ro, vec3 rd, vec3 pp, vec3 off, float aa, float n) {\n  float h = hash(n);\n  float s = 0.25*mix(0.5, 0.25, h);\n  float dd= length(pp-ro);\n\n  const vec3 nor  = vec3(0.0, 0.0, 1.0);\n  const vec3 loff = vec3(0.25*0.5, 0.125*0.5, -0.125);\n  vec3 lp1  = ro + loff;\n  vec3 lp2  = ro + loff*vec3(-1.0, 1.0, 1.0);\n  vec3 ld1  = normalize(pp - lp1);\n  vec3 ld2  = normalize(pp - lp2);\n  float lpw1= 0.2/L2(pp - lp1);\n  float lpw2= 0.2/L2(pp - lp2);\n  vec3 ref  = reflect(rd, nor);\n  float ref1= pow(max(dot(nor, ld1), 0.0), 20.0);\n  float ref2= pow(max(dot(nor, ld2), 0.0), 20.0);\n  vec3  col1= vec3(0.75, 0.5, 1.0);\n  vec3  col2= vec3(1.0, 0.5, 0.75);\n  \n  vec3 hn;\n  vec2 p = (pp-off*vec3(1.0, 1.0, 0.0)).xy;\n  p *= ROT(TAU*h);\n  vec2 d2 = df(p/s, h)*s;   \n\n  float ha = smoothstep(-aa, aa, d2.y);\n  float d = d2.x;\n  vec4 col = vec4(0.0);\n\n  float l   = length(10.0*p);\n  float ddf = 1.0/((1.0+2.0*dd));\n  float hue = fract(0.75*l-0.1*TIME)+0.3+0.15;\n  float sat = 0.75*tanh_approx(2.0*l)*ddf;\n  float vue = sqrt(ddf);\n  vec3 hsv  = vec3(hue, sat, vue);\n  vec3 bcol = hsv2rgb(hsv);\n  col.xyz   = mix(col.xyz, bcol, smoothstep(-aa, aa, -d));  \n  float glow = (exp(-(10.0+100.0*tanh_approx(l))*10.0*max(d, 0.0)*ddf));\n  col.xyz   += 0.5*sqrt(bcol.zxy)*glow;\n  col.w     = ha*mix(0.75, 1.0, ha*glow);\n  col.xyz   += 0.125*col.w*(col1*ref1+col2*ref2);\n\n  return col;\n}\n\nvec3 skyColor(vec3 ro, vec3 rd) {\n  float ld = max(dot(rd, vec3(0.0, 0.0, 1.0)), 0.0);\n  return 1.25*vec3(1.0, 0.75, 0.85)*vec3(tanh_approx(3.0*pow(ld, 100.0)));\n}\n\nvec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {\n  float lp = length(p);\n  vec2 np = p + 1.0/RESOLUTION.xy;\n  float rdd = (2.0+0.5*tanh_approx(lp));  // Playing around with rdd can give interesting distortions\n  vec3 rd = normalize(p.x*uu + p.y*vv + rdd*ww);\n  vec3 nrd = normalize(np.x*uu + np.y*vv + rdd*ww);\n\n  const float planeDist = 1.0-0.75;\n  const int furthest = 8;\n  const int fadeFrom = max(furthest-3, 0);\n  const float fadeDist = planeDist*float(furthest - fadeFrom);\n  float nz = floor(ro.z / planeDist);\n\n  vec3 skyCol = skyColor(ro, rd);\n\n  // Steps from nearest to furthest plane and accumulates the color\n\n  vec4 acol = vec4(0.0);\n  const float cutOff = 0.95;\n  bool cutOut = false;\n  \n  for (int i = 1; i <= furthest; ++i) {\n    float pz = planeDist*nz + planeDist*float(i);\n\n    float pd = (pz - ro.z)/rd.z;\n\n    if (pd > 0.0 && acol.w < cutOff) {\n      vec3 pp = ro + rd*pd;\n      vec3 npp = ro + nrd*pd;\n\n      float aa = 3.0*length(pp - npp);\n\n      vec3 off = offset(pp.z);\n\n      vec4 pcol = plane(ro, rd, pp, off, aa, nz+float(i));\n\n      float nz = pp.z-ro.z;\n      float fadeIn = exp(-2.5*max((nz - planeDist*float(fadeFrom))/fadeDist, 0.0));\n      float fadeOut = smoothstep(0.0, planeDist*0.1, nz);\n      pcol.xyz = mix(skyCol, pcol.xyz, (fadeIn));\n      pcol.w *= fadeOut;\n\n      pcol = clamp(pcol, 0.0, 1.0);\n\n      acol = alphaBlend(pcol, acol);\n    } else {\n      cutOut = true;\n      break;\n    }\n\n  }\n\n  vec3 col = alphaBlend(skyCol, acol);\n// To debug cutouts due to transparency  \n//  col += cutOut ? vec3(1.0, -1.0, 0.0) : vec3(0.0);\n  return col;\n}\n\n// Classic post processing\nvec3 postProcess(vec3 col, vec2 q) {\n  col = clamp(col, 0.0, 1.0);\n  col = pow(col, 1.0/std_gamma);\n  col = col*0.6+0.4*col*col*(3.0-2.0*col);\n  col = mix(col, vec3(dot(col, vec3(0.33))), -0.4);\n  col *=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 q) {\n  float tm  = TIME*0.2;\n  vec3 ro   = offset(tm);\n  vec3 dro  = doffset(tm);\n  vec3 ddro = ddoffset(tm);\n\n  vec3 ww = normalize(dro);\n  vec3 uu = normalize(cross(normalize(vec3(0.0,1.0,0.0)+ddro), ww));\n  vec3 vv = normalize(cross(ww, uu));\n\n  vec3 col = color(ww, uu, vv, ro, p);\n  col = postProcess(col, q);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect(p, q);\n\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}