{
    "Shader": {
        "info": {
            "date": "1527849273",
            "description": "\"Ben-Hur Balls\" with reflection",
            "flags": 32,
            "hasliked": 0,
            "id": "MsVfRW",
            "likes": 26,
            "name": "Reflecting Ben-Hur Balls",
            "published": 3,
            "tags": [
                "reflection",
                "collision",
                "dynamics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 762
        },
        "renderpass": [
            {
                "code": "// \"Reflecting Ben-Hur Balls\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// \"Ben-Hur Balls\" with reflection (mouse: selects alternative view, vertical zooms)\n// Consider a spherical chariot...\n\n#define AA  0   // optional antialiasing\n\nmat3 QtToRMat (vec4 q);\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nvec2 Rot2D (vec2 q, float a);\nfloat Maxv3 (vec3 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (int idVar);\nvec3 HsvToRgb (vec3 c);\n\nconst int nBall = 100;\nvec3 vnBall, sunDir, bSize;\nfloat tCur, dstFar;\nint idBall, idObj;\nconst float pi = 3.14159;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  const float nLev = 6.;\n  dMin = dstFar;\n  d = PrBoxDf (p - vec3 (0., 0.48, 0.), vec3 (bSize.x, 0.01, bSize.z));\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  d = PrBoxDf (p - vec3 (0., bSize.y, 0.), 0.5 + vec3 (12., 0., 2.));\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  d = dMin;\n  for (float nh = 0.; nh < nLev; nh ++) d = min (d,\n     PrBoxDf (p - vec3 (0., bSize.y * (nh + 1.) + 0.24, 0.),\n     vec3 (bSize.x - 0.5 + bSize.y * nh, 1.001, bSize.z - 0.5 + bSize.y * nh)));\n  d = max (PrBoxDf (p - vec3 (0., 0.5 * nLev * bSize.y + 0.25, 0.),\n     vec3 (bSize.x + 7., 0.5 * nLev * bSize.y + 0.25, bSize.z + 7.)), - d);\n  if (d < dMin) { dMin = d;  idObj = 3; }\n  d = max (PrBoxDf (p - vec3 (0., 6.5, 0.), vec3 (bSize.x + 7.5, 6.5, bSize.z + 7.5)),\n     - PrBox2Df (p.xz, bSize.xz + 7.));\n  q = p;\n  q.xz = mod (q.xz + 2., 4.) - 2.;\n  q.y = p.y - 10.5;\n  p.xz = abs (p.xz) - bSize.xz - 6.5;\n  d = max (d, - max (PrBox2Df (q.xy, vec2 (1., 1.5)), p.x));\n  d = max (d, - max (PrBox2Df (q.zy, vec2 (1., 1.5)), p.z));\n  if (d < dMin) { dMin = d;  idObj = 4; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec2 e = vec2 (0.0005, -0.0005);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat BallHit (vec3 ro, vec3 rd)\n{\n  vec4 p;\n  vec3 u;\n  float b, d, w, dMin, rad;\n  dMin = dstFar;\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 * n);\n    u = ro - p.xyz;\n    rad = 0.45 * p.w;\n    b = dot (rd, u);\n    w = b * b - dot (u, u) + rad * rad;\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) {\n        dMin = d;\n        vnBall = (u + d * rd) / rad;\n        idBall = n;\n      }\n    }\n  }\n  return dMin;\n}\n\nfloat BallHitSh (vec3 ro, vec3 rd, float rng)\n{\n  vec4 p;\n  vec3 rs, u;\n  float b, d, w, dMin, rad;\n  dMin = dstFar;\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 * n);\n    u = ro - p.xyz;\n    rad = 0.45 * p.w;\n    b = dot (rd, u);\n    w = b * b - dot (u, u) + rad * rad;\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) dMin = d;\n    }\n  }\n  return smoothstep (0., rng, dMin);\n}\n\nfloat BallChqr (int idBall, vec3 vnBall)\n{\n  vec3 u;\n  vec2 a;\n  u = vnBall * QtToRMat (Loadv4 (4 * idBall + 2));\n  a = mod (floor (8. * vec2 (atan (u.x, u.y), asin (u.z)) / pi), 2.) - 0.5;\n  return 0.6 + 0.4 * step (0., sign (a.x) * sign (a.y));\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  if (rd.y >= 0.) {\n    ro.xz += 2. * tCur;\n    col = vec3 (0.1, 0.2, 0.4) + 0.2 * (1. - max (rd.y, 0.)) +\n       0.1 * pow (max (dot (rd, sunDir), 0.), 16.);\n    col = mix (col, vec3 (0.9, 0.9, 1.), clamp (0.2 + Fbm2 (0.05 *\n       (ro.xz + rd.xz * (100. - ro.y) / max (rd.y, 0.001))) * rd.y, 0., 1.));\n  } else {\n    ro -= (ro.y / rd.y) * rd;\n    col = 0.7 * mix (vec3 (0.4, 0.3, 0.2), vec3 (0.5, 0.5, 0.2), Noisefv2 (256. * ro.xz)) *\n         (1. - 0.1 * Fbm2 (4. * ro.xz));\n  }\n  return col;\n}\n\nvec3 ShGrid (vec2 p)\n{\n  vec2 q, sq, ss;\n  q = p;\n  sq = smoothstep (0.05, 0.1, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.2 * smoothstep (0.3, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.9 + 0.1 * sq.x * sq.y, ss.y);\n}\n\nvec3 ShStagGrid (vec2 p, vec2 g)\n{\n  vec2 q, sq, ss;\n  q = p * g;\n  if (2. * floor (0.5 * floor (q.y)) != floor (q.y)) q.x += 0.5;\n  sq = smoothstep (0.05, 0.1, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.2 * smoothstep (0.3, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.9 + 0.1 * sq.x * sq.y, ss.y);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, colB, vn, vnn, rg;\n  vec2 cg;\n  bool isRefl;\n  float dstObj, dstBall, sh, c, glit;\n  dstObj = ObjRay (ro, rd);\n  dstBall = BallHit (ro, rd);\n  isRefl = false;\n  if (dstBall < min (dstObj, dstFar)) {\n    isRefl = true;\n    c = 33. * float (idBall) / float (nBall);\n    colB = HsvToRgb (vec3 (mod (c, 1.), 1. - 0.1 * mod (c, 8.),\n       1. - 0.05 * mod (c, 13.))) * BallChqr (idBall, vnBall);\n    ro += dstBall * rd;\n    rd =reflect (rd, vnBall);\n    ro += 0.01 * rd;\n    dstObj = ObjRay (ro, rd);\n    dstBall = BallHit (ro, rd);\n  }\n  if (min (dstBall, dstObj) < dstFar) {\n    if (dstObj < dstBall) {\n      ro += rd * dstObj;\n      if (idObj == 1) {\n        col4 = vec4 (vec3 (0.45, 0.35, 0.2) - 0.1 * Fbm2 (16. * ro.xz), 0.);\n        vn = VaryNf (2. * ro, vec3 (0., 1., 0.), 1.);\n      } else {\n        vn = ObjNf (ro);\n        vnn = vn;\n        cg = (abs (vn.y) < 0.01) ? ((abs (vn.x) > 0.99) ? ro.zy : ro.xy) : ro.xz;\n        if (idObj == 2) {\n          col4 = vec4 (0.8, 0.6, 0.1, 0.2);\n          rg = (abs (vn.y) < 0.01) ? ShGrid ((cg - vec2 (0., 0.5)) / 1.25) : ShGrid (cg / 1.25);\n          vn = VaryNf (8. * ro, vn, 0.5);\n        } else if (idObj == 3) {\n          col4 = (floor (mod (ro.y / 1.25 + 0.55, 2.)) == 0.) ? vec4 (0.75, 0.7, 0.7, 0.1) :\n             vec4 (0.7, 0.8, 0.7, 0.1);\n          rg = (abs (vn.y) < 0.01) ? ShGrid ((cg - vec2 (0., 0.5)) / 1.25) : ShGrid (cg / 1.25);\n        } else if (idObj == 4)  {\n          col4 = vec4 (0.7, 0.25, 0., 0.05);\n          rg = (abs (vn.y) < 0.01) ? ShStagGrid (cg, vec2 (1., 2.)) : ShGrid (cg);\n        }\n        col4.rgb *= rg.y * (1. - 0.3 * Fbm2 (2. * cg));\n        if (abs (vn.y) < 0.01) {\n          rg.xz *= sign ((abs (vn.x) > 0.99) ? vn.x : vn.z);\n          if (abs (vn.x) > 0.99) {\n            if (rg.x == 0.) vn.xy = Rot2D (vn.xy, rg.z);\n            else vn.xz = Rot2D (vn.xz, rg.x);\n          } else {\n            if (rg.x == 0.) vn.zy = Rot2D (vn.zy, rg.z);\n            else vn.zx = Rot2D (vn.zx, rg.x);\n          }\n        } else {\n          if (vn.y > 0.99) {\n            if (rg.x == 0.) vn.yz = Rot2D (vn.yz, rg.z);\n            else vn.yx = Rot2D (vn.yx, rg.x);\n          }\n        }\n      }\n      sh = 0.7 + 0.3 * BallHitSh (ro + 0.01 * sunDir, sunDir, 10.);\n      c = (idObj == 3) ? 1. - 0.6 * smoothstep (-0.25, -0.22, dot (rd, vnn)) : 1.;\n      col = col4.rgb * (0.4 + 0.6 * sh * c * max (dot (vn, sunDir), 0.)) +\n         col4.a * sh * c * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.);\n    } else {\n      vn = vnBall;\n      c = 33. * float (idBall) / float (nBall);\n      col = HsvToRgb (vec3 (mod (c, 1.), 1. - 0.03 * mod (c, 8.),\n         1. - 0.02 * mod (c, 13.))) * BallChqr (idBall, vnBall);\n      glit = 500. * step (0.01, max (0., dot (vn, sunDir))) *\n         pow (max (0., dot (sunDir, reflect (rd, vn))), 16.) *\n         pow (1. - 0.6 * abs (dot (normalize (sunDir - rd), VaryNf (1000. * ro, vn, 2.))), 8.);\n      col = col * (0.3 + 0.7 * max (dot (vn, sunDir), 0.)) + vec3 (1., 1., 0.5) * glit;\n    }\n  } else col = BgCol (ro, rd);\n  if (isRefl) col = mix (col, colB, 0.5);\n  return col * clamp (mix (1., smoothstep (0., 1., Maxv3 (col)), 0.2), 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 rd, ro, vd, rLead, rMid, vuPos[2], col;\n  vec2 mMid[4], ut[4], mSize, canvas, uv, uvv, um, ori, ca, sa;\n  float az, el, zmFac, asp, zmMul, f, vuCorn, vuMode;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  rMid = Loadv4 (4 * nBall).xyz;\n  rLead = Loadv4 (4 * nBall + 1).xyz;\n  bSize = Loadv4 (4 * nBall + 2).xyz;\n  vuPos[0] = Loadv4 (4 * nBall + 3).xyz;\n  vuPos[1] = Loadv4 (4 * nBall + 4).xyz;\n  dstFar = 150.;\n  asp = canvas.x / canvas.y;\n  mSize = 0.2 * vec2 (asp, 1.);\n  mMid[2] = (1. / mSize.y - 1.) * mSize;\n  mMid[0] = mMid[2] * vec2 (-1., -1.);\n  mMid[1] = mMid[2] * vec2 (-1., 1.);\n  mMid[3] = mMid[2] * vec2 (1., -1.);\n  for (int k = 0; k < 4; k ++) ut[k] = abs (uv - mMid[k]) - mSize;\n  vuCorn = -1.;\n  for (int k = 0; k < 4; k ++) {\n    if (max (ut[k].x, ut[k].y) < 0.) {\n      uv = (uv - mMid[k]) / mSize.y;\n      vuCorn = float (k);\n      break;\n    }\n  }\n  vuMode = (vuCorn >= 0.) ? vuCorn + 1. : 0.;\n  zmMul = 0.5;\n  if (mPtr.z > 0.) {\n    f = -1.;\n    for (int k = 0; k < 4; k ++) {\n      um = abs (2. * mPtr.xy * vec2 (asp, 1.) - mMid[k]) / mSize;\n      if (max (um.x, um.y) < 1.) {\n        f = float (k);\n        break;\n      }\n    }\n    if (vuCorn < 0.) {\n      if (f >= 0.) vuMode = f + 1.;\n      else zmMul = 2. * (mPtr.y + 0.5);\n    } else if (f == vuCorn) vuMode = 0.;\n  }\n  if (vuMode == 0.) {\n    ro = vuPos[0];\n    ro.y += 0.2 * Noisefv2 (0.5 * ro.xz);\n    vd = normalize (rMid - ro);\n    zmFac = 1.2 + 1.8 * zmMul;\n  } else if (vuMode == 1.) {\n    ro = vuPos[1];\n    ro.y += 0.2 * Noisefv2 (0.5 * ro.xz);\n    vd = normalize (rMid - ro);\n    zmFac = 1.2 + 1.8 * zmMul;\n  } else if (vuMode == 2.) {\n    az = 0.1 * tCur;\n    el = 0.25 * pi + 0.1 * pi * sin (0.04 * tCur);\n    vd = - vec3 (cos (az) * cos (el), sin (el), sin (az) * cos (el));\n    ro = -80. * vd;\n    zmFac = 1.2 + 2.2 * zmMul;\n  } else if (vuMode == 3.) {\n    ro = vec3 (0., 40., 0.);\n    vd = normalize (- ro);\n    zmFac = 1. + 0.8 * zmMul;\n  } else if (vuMode == 4.) {\n    ro = vec3 (40., 40., 0.);\n    vd = rMid - ro;\n    zmFac = 2.5 + 0.04 * length (vd.xz) + 5. * zmMul;\n    vd = normalize (vd);\n  }\n  vuMat = (abs (vd.y) < 1.) ? mat3 (vec3 (vd.z, 0., - vd.x) / sqrt (1. - vd.y * vd.y),\n     vec3 (- vd.y * vd.x, 1. - vd.y * vd.y, - vd.y * vd.z) / sqrt (1. - vd.y * vd.y), vd) :\n     mat3 (vec3 (1., 0., 0.), vec3 (0., 0., 1.), vec3 (0., sign (vd.y), 0.));\n  sunDir = normalize (vec3 (1., 4., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 4.;\n#endif  \n  col = vec3 (0.);\n  for (float a = 0.; a < naa; a ++) {\n    uvv = uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.), 0.5 * pi * (a + 0.5));\n    rd = vuMat * normalize (vec3 (uvv, zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  col =  pow (clamp (col, 0., 1.), vec3 (0.8));\n  for (int k = 0; k < 4; k ++) {\n    if (max (ut[k].x, ut[k].y) < 0. && min (abs (ut[k].x), abs (ut[k].y)) * canvas.y < 2.)\n       col = vec3 (0.2, 0.2, 0.8);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Reflecting Ben-Hur Balls\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nfloat Hashff (float p);\nfloat Noisefv2 (vec2 p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst float pi = 3.14159;\nconst float txRow = 128.;\nconst int nBall = 100;\nvec3 bSize, rLead;\nfloat todCur, stSize;\n\n#define WALL_INT if (rSep < szAv) { fc = fOvlap * (szAv / rSep - 1.);  dv = vm;  drv = dot (dr, dv) / (rSep * rSep);  fc = max (fc - fricN * drv, 0.);  am += fc * dr;  dv -= drv * dr + cross (wm, dr);  ft = min (fricT, fricSW * abs (fc) * rSep / max (0.001, length (dv)));  am -= ft * dv;  wam += (ft / rSep) * cross (dr, dv); }\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float sz)\n{\n  vec4 p;\n  vec3 rmN, vmN, wmN, dr, dv, drw, am, wam;\n  float fOvlap, fricN, fricT, fricS, fricSW, fDamp, fAttr, grav, rSep, szN, szAv,\n     fc, ft, ms, drv, dt, fnh;\n  const float nLev = 6.;\n  fOvlap = 1000.;\n  fricN = 8.;\n  fricS = 0.05;\n  fricSW = 1.;\n  fricT = 0.5;\n  fAttr = 0.2;\n  fDamp = 0.005;\n  grav = 15.;\n  p = Loadv4 (4 * mId);\n  rm = p.xyz;\n  sz = p.w;\n  vm = Loadv4 (4 * mId + 1).xyz;\n  qm = Loadv4 (4 * mId + 2);\n  wm = Loadv4 (4 * mId + 3).xyz;\n  ms = sz * sz * sz;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 * n);\n    rmN = p.xyz;\n    szN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    szAv = 0.5 * (sz + szN);\n    if (n != mId && rSep < szAv) {\n      fc = fOvlap * (szAv / rSep - 1.);\n      vmN = Loadv4 (4 * n + 1).xyz;\n      wmN = Loadv4 (4 * n + 3).xyz;\n      dv = vm - vmN;\n      drv = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * drv, 0.);\n      am += fc * dr;\n      dv -= drv * dr + cross ((sz * wm + szN * wmN) / (sz + szN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n  szAv = 0.5 * (sz + 1.);\n  dr = vec3 (0., rm.y + 0.2 * Noisefv2 (0.5 * rm.xz), 0.);\n  rSep = abs (dr.y);\n  WALL_INT;\n  szAv = 0.5 * (sz + 1.);\n  for (float nh = 0.; nh < nLev; nh ++) {\n    for (int k = 0; k < 2; k ++) {\n      dr.xz = min ((abs (rm.xz) - bSize.xz - bSize.y * nh), 0.) * sign (rm.xz);\n      if (k == 0) dr.z = 0.;\n      else dr.x = 0.;\n      dr.y = max (abs (rm.y) - bSize.y * (nh + 1.), 0.);\n      rSep = length (dr);\n      WALL_INT;\n    }\n  }\n  dr = max (abs (rm) - vec3 (12., bSize.y, 2.), 0.) * sign (rm);\n  rSep = length (dr);\n  WALL_INT;\n  am += fAttr * (rLead - rm);\n  am.y -= grav * ms;\n  am -= fDamp * vm;\n  dt = 0.01;\n  vm += dt * am / ms;\n  rm += dt * vm;\n  wm += dt * wam / (0.1 * ms * sz);\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n  if (abs (rm.x) > bSize.x + 6.) {\n    rm.x = (bSize.x + 6.) * sign (rm.x);\n    vm.x = - vm.x;\n  }\n  if (abs (rm.z) > bSize.z + 6.) {\n    rm.z = (bSize.z + 6.) * sign (rm.z);\n    vm.z = - vm.z;\n  }\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm, out float sz)\n{\n  vec3 e;\n  vec2 nbEdge;\n  float mIdf;\n  nbEdge.y = 5.;\n  nbEdge.x = (float (nBall) + nbEdge.y - 1.) / nbEdge.y;\n  mIdf = float (mId);\n  rm.xz = 1.3 * vec2 (floor (mIdf / nbEdge.y) - 0.5 * (nbEdge.x - 1.), mod (mIdf, nbEdge.y) + 6.);\n  rm.y = 1.;\n  vm = 2. * normalize (vec3 (Hashff (mIdf + todCur), 0., Hashff (mIdf + todCur)) - 0.5);\n  e = normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3), Hashff (mIdf + 0.6)));\n  qm = EulToQt (e);\n  wm = vec3 (0.);\n  sz = 1. - 0.1 * Hashff (mIdf + 0.1);\n}\n\nvec3 TrkPos (float t)\n{\n  return vec3 (26. * sin (0.004 * t), 4., 16. * cos (0.004 * t));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p, qm;\n  vec3 rm, vm, wm, rMid, vuPos[2];\n  vec2 iFrag;\n  float sz, tCur, nStep;\n  int mId, pxId, kp;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBall + 5) discard;\n  tCur = iTime;\n  todCur = iDate.w;\n  if (pxId < 4 * nBall) mId = pxId / 4;\n  else mId = -1;\n  doInit = false;\n  if (iFrame <= 5) {\n    bSize = vec3 (30.5, 1.25, 20.5);\n    nStep = 0.;\n    if (mId >= 0) Init (mId, rm, vm, qm, wm, sz);\n    doInit = true;\n  } else {\n    stDat = Loadv4 (4 * nBall);\n    rMid = stDat.xyz;\n    nStep = stDat.w;\n    ++ nStep;\n    stDat = Loadv4 (4 * nBall + 1);\n    rLead = stDat.xyz;\n    stDat = Loadv4 (4 * nBall + 2);\n    bSize = stDat.xyz;\n    if (mId >= 0) Step (mId, rm, vm, qm, wm, sz);\n  }\n  rLead = TrkPos (nStep);\n  vuPos[0] = TrkPos (nStep - 200.);\n  vuPos[0].y = 3.5 + 0.5 * sin (0.03 * 2. * pi * tCur);\n  vuPos[1] = TrkPos (nStep + 100.);\n  vuPos[1].y = 3.5 + 0.5 * sin (0.03 * 2. * pi * tCur);\n  if (pxId == 4 * nBall) {\n    rMid = vec3 (0.);\n    for (int n = 0; n < nBall; n ++) rMid += Loadv4 (4 * n).xyz;\n    rMid /= float (nBall);\n  }\n  if (pxId < 4 * nBall) {\n    kp = 4 * mId;\n    if      (pxId == kp + 0) p = vec4 (rm, sz);\n    else if (pxId == kp + 1) p = vec4 (vm, 0.);\n    else if (pxId == kp + 2) p = qm;\n    else if (pxId == kp + 3) p = vec4 (wm, 0.);\n    stDat = p;\n  } else {\n    kp = 4 * nBall;\n    if      (pxId == kp + 0) stDat = vec4 (rMid, nStep);\n    else if (pxId == kp + 1) stDat = vec4 (rLead, 0.);\n    else if (pxId == kp + 2) stDat = vec4 (bSize, 0.);\n    else if (pxId == kp + 3) stDat = vec4 (vuPos[0], 0.);\n    else if (pxId == kp + 4) stDat = vec4 (vuPos[1], 0.);\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}