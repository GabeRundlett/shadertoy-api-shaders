{
    "Shader": {
        "info": {
            "date": "1634061318",
            "description": "Simplified remap",
            "flags": 0,
            "hasliked": 0,
            "id": "7s3SDf",
            "likes": 3,
            "name": "quadmapSimple",
            "published": 3,
            "tags": [
                "map",
                "projection",
                "quad",
                "mat3",
                "projective",
                "quadrilateral",
                "quadmap",
                "quad2quad",
                "quadtoquad",
                "mat3x3",
                "3x3matrix"
            ],
            "usePreview": 0,
            "username": "Sergeindamix",
            "viewed": 272
        },
        "renderpass": [
            {
                "code": "\nmat3 basisToPoints(vec2 p0, vec2 p1, vec2 p2, vec2 p3)\n{\n  mat3 m =\n    mat3\n    (\n      vec3(p0, 1.0),\n      vec3(p1, 1.0),\n      vec3(p2, 1.0)\n    );\n\n  vec3 v = inverse(m) * vec3(p3,1.0);\n\n  mat3 d =\n    mat3\n    (\n      vec3(v.x, 0.0, 0.0),\n      vec3(0.0, v.y, 0.0),\n      vec3(0.0, 0.0, v.z)\n    );\n\n  return m * d;\n}\n\nmat3 general2DProjection(\n  vec2 s0, vec2 d0,\n  vec2 s1, vec2 d1,\n  vec2 s2, vec2 d2,\n  vec2 s3, vec2 d3\n)\n{\n  mat3 s = basisToPoints(s0, s1, s2, s3);\n  mat3 d = basisToPoints(d0, d1, d2, d3);\n  return d * inverse(s);\n}\n\nvec2 project(mat3 m, float x, float y)\n{\n  vec3 v = m * vec3(x,y, 1.0);\n  return v.xy / v.z; // dehomogenize\n}\n\n// Just some code to visualize the quad\n\n#define PI 3.1415926\n#define TAU (2.0 * PI)\n\nfloat checker(vec2 p)\n{\n  return smoothstep(-0.05,+0.05, sin(p.x*TAU)*sin(p.y*TAU));\n}\n\nvec4 tunn(vec2 fragCoord)\n{\n    vec2 uv = (2. * fragCoord.xy - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    \n    float t = iTime * .8;\n    float rng = .3;\n    vec2 offset = vec2(cos(t), sin(t)) * rng;//wave movement\n    uv += offset;\n    \n    \n    float a = atan(uv.y, uv.x) / 3.14 * 4.;\n    float l = length(uv);\n    \n    \n    // a = floor(a * 5.) / 5.;\n    vec2 texUv = vec2(a, 1. / l - iTime * .5);//backward movement\n\n    \n    float hole = min(1., pow(l, 2.));\n    vec3 col = textureGrad(iChannel0, texUv, dFdx(uv), dFdy(uv)).rgb * hole;\n\n    return vec4(col, 1.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float t = iTime / 5.0;\n    vec2 p0 = vec2(0.2, 0.2) + 0.1 * vec2(+cos(t),+sin(t));\n    vec2 p1 = vec2(0.8, 0.2) + 0.15 * vec2(-sin(t),+cos(t));\n    vec2 p2 = vec2(0.2, 0.8) + 0.2 * vec2(-cos(t),-sin(t));\n    vec2 p3 = vec2(0.8, 0.8) + 0.25 * vec2(+sin(t),-cos(t));\n\n    // NOTE: quads must be convex\n    mat3 m = general2DProjection\n    (\n      p0, vec2(0.0, 0.0),\n      p1, vec2(1.0, 0.0),\n      p3, vec2(1.0, 1.0),\n      p2, vec2(0.0, 1.0)\n    );\n\n    vec2 q = project(m, uv.x, uv.y);\n    fragColor = tunn(fragCoord);//texture(iChannel0, q);\n    //fragColor = vec4(checker(5.0 * q));\n\n    if(any(lessThan(q, vec2(0.0))) || any(greaterThan(q, vec2(1.0))))\n        fragColor = vec4(0.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}