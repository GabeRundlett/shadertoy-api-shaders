{
    "Shader": {
        "info": {
            "date": "1697189646",
            "description": "canny edge",
            "flags": 2,
            "hasliked": 0,
            "id": "msdBD4",
            "likes": 1,
            "name": "Canny Edge",
            "published": 3,
            "tags": [
                "cannyedge"
            ],
            "usePreview": 0,
            "username": "nickooms",
            "viewed": 349
        },
        "renderpass": [
            {
                "code": "// ref: (in japanese)\n// https://imagingsolution.net/imaging/canny-edge-detector/\n#define tickness 3.\n\nfloat getAve(vec2 uv){\n    vec3 rgb = texture(iChannel0, uv).rgb;\n    vec3 lum = vec3(0.299, 0.587, 0.114);\n    return dot(lum, rgb);\n}\n\n// Detect edge.\nvec4 sobel(vec2 fragCoord, vec2 dir){\n    vec4 mous = iMouse/iResolution.xyxy*.1;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 texel = 1./iResolution.xy;\n    float np = getAve(uv + (vec2(-1,+1) + dir ) * texel * tickness);\n    float zp = getAve(uv + (vec2( 0,+1) + dir ) * texel * tickness);\n    float pp = getAve(uv + (vec2(+1,+1) + dir ) * texel * tickness);\n    \n    float nz = getAve(uv + (vec2(-1, 0) + dir ) * texel * tickness);\n    // zz = 0\n    float pz = getAve(uv + (vec2(+1, 0) + dir ) * texel * tickness);\n    \n    float nn = getAve(uv + (vec2(-1,-1) + dir ) * texel * tickness);\n    float zn = getAve(uv + (vec2( 0,-1) + dir ) * texel * tickness);\n    float pn = getAve(uv + (vec2(+1,-1) + dir ) * texel * tickness);\n    \n    // np zp pp\n    // nz zz pz\n    // nn zn pn\n    \n    #if 0\n    float gx = (np*-1. + nz*-2. + nn*-1. + pp*1. + pz*2. + pn*1.);\n    float gy = (np*-1. + zp*-2. + pp*-1. + nn*1. + zn*2. + pn*1.);\n    #else\n    // https://www.shadertoy.com/view/Wds3Rl\n    float gx = (np*-3. + nz*-10. + nn*-3. + pp*3. + pz*10. + pn*3.);\n    float gy = (np*-3. + zp*-10. + pp*-3. + nn*3. + zn*10. + pn*3.);\n    #endif\n    \n    vec2 G = vec2(gx,gy);\n    \n    float grad = length(G);\n    \n    float angle = atan(G.y, G.x);\n    \n    return vec4(G, grad, angle);\n}\n\n// Make edge thinner.\nvec2 hysteresisThr(vec2 fragCoord, float mn, float mx){\n\n    vec4 edge = sobel(fragCoord, vec2(0));\n\n    vec2 dir = vec2(cos(edge.w), sin(edge.w));\n    dir *= vec2(-1,1); // rotate 90 degrees.\n    \n    vec4 edgep = sobel(fragCoord, dir);\n    vec4 edgen = sobel(fragCoord, -dir);\n\n    if(edge.z < edgep.z || edge.z < edgen.z ) edge.z = 0.;\n    \n    return vec2(\n        (edge.z > mn) ? edge.z : 0.,\n        (edge.z > mx) ? edge.z : 0.\n    );\n}\n\nfloat cannyEdge(vec2 fragCoord, float mn, float mx){\n\n    vec2 np = hysteresisThr(fragCoord + vec2(-1,+1), mn, mx);\n    vec2 zp = hysteresisThr(fragCoord + vec2( 0,+1), mn, mx);\n    vec2 pp = hysteresisThr(fragCoord + vec2(+1,+1), mn, mx);\n    \n    vec2 nz = hysteresisThr(fragCoord + vec2(-1, 0), mn, mx);\n    vec2 zz = hysteresisThr(fragCoord + vec2( 0, 0), mn, mx);\n    vec2 pz = hysteresisThr(fragCoord + vec2(+1, 0), mn, mx);\n    \n    vec2 nn = hysteresisThr(fragCoord + vec2(-1,-1), mn, mx);\n    vec2 zn = hysteresisThr(fragCoord + vec2( 0,-1), mn, mx);\n    vec2 pn = hysteresisThr(fragCoord + vec2(+1,-1), mn, mx);\n    \n    // np zp pp\n    // nz zz pz\n    // nn zn pn\n    //return min(1., step(1e-3, zz.x) * (zp.y + nz.y + pz.y + zn.y)*8.);\n    //return min(1., step(1e-3, zz.x) * (np.y + pp.y + nn.y + pn.y)*8.);\n    return min(1., step(1e-2, zz.x*8.) * smoothstep(.0, .3, np.y + zp.y + pp.y + nz.y + pz.y + nn.y + zn.y + pn.y)*8.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec4 mous = iMouse/iResolution.xyxy*.1;\n    float edge = cannyEdge(fragCoord, mous.x*5., mous.y*30.);\n    fragColor = mix(vec4(0,0,0,1), vec4(1,1,1,0), 1.-edge);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}