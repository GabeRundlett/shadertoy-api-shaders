{
    "Shader": {
        "info": {
            "date": "1723384828",
            "description": "source https://www.shadertoy.com/view/4clfzH https://www.shadertoy.com/view/Xd23Dh",
            "flags": 0,
            "hasliked": 0,
            "id": "McsBz8",
            "likes": 5,
            "name": "voronoi white noise ",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 74
        },
        "renderpass": [
            {
                "code": "// random stars drifting slowly\n//#define cox 10.0\n//#define coy 10.0\n//#define baseRotation 0.01\n//#define nextLevelRotation 0.1\n//#define zoom 0.8\n\n\n// sprial patterns\n#define cox 0.0\n#define coy 0.0\n#define baseRotation 0.0\n#define nextLevelRotation 1.\n#define zoom 2.\n\n\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvec3 hash3( vec2 p )\n{\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)), \n\t\t\t\t   dot(p,vec2(269.5,183.3)), \n\t\t\t\t   dot(p,vec2(419.2,371.9)) );\n\treturn fract(sin(q)*43758.5453);\n}\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat voronoise( in vec2 p, float u, float v )\n{\n\tfloat k = 1.0+63.0*pow(1.0-v,6.0);\n\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    \n\tvec2 a = vec2(0.0,0.0);\n    for( int y=-2; y<=2; y++ )\n    for( int x=-2; x<=2; x++ )\n    {\n        vec2  g = vec2( x, y );\n\t\tvec3  o = hash3( i + g )*vec3(u,u,1.0);\n\t\tvec2  d = g - f + o.xy;\n\t\tfloat w = pow( 1.0-smoothstep(0.0,1.414,length(d)), k );\n\t\ta += vec2(o.z*w,w);\n    }\n\t\n    return a.x/a.y;\n}\nvec4 r( vec2 uv, int iter )\n{\n    \n  vec2 uu=((uv-vec2(1.75,1))*zoom);\n   uu*=0.75;\n uu.y+=1.;\n   \n  mat2 rot= rotate2d(baseRotation + iTime*0.1*baseRotation*nextLevelRotation);\n  \n  float dim= 0.01;\n  \n  uu= rotate2d(iTime*baseRotation)*uu;\n   vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    vec3 col;\n    for (float i = 0.0; i < 10.0; i++) {\n       \n\n        float d = length(uv) * exp(-length(uv0));\n\n        col = palette(length(uv0) + i*1.1 + iTime*.4);\n\n      \n      \n\n   \n\n    }\n  \t\n\tfloat f = voronoise( 30.0*uu, col.x, uu.y );\n  float d= 0.;\n  uu*=f;\n  for( int i= 0; i< iter; i++ )\n  {\n      float ix= floor(uu.x);\n      float iy= floor(uu.y);\n\n      float dx= uu.x-float(ix);\n      float dy= uu.y-float(iy);\n\n      if( dx > 0.5 )\n          dx= 1.0-dx;\n\n      if( dy > 0.5 )\n          dy= 1.0-dy;\n\n      float dist= sqrt( dx*dx + dy*dy );\n    //  float d= max( dx, dy );\n      d+= (1./dist)*dim*10.;\n      uu.x+=iTime*0.1;\n      uu= rot*uu;\n      \n      uu*= 1.2;\n      \n      dim*= 0.6;\n    uu+= vec2(0.2,0.2)*col.xy;\n  }\n  \n  return vec4(d,d,d,d);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.y*2.;\n\n    // Output to screen\n    fragColor =r(uv, 10);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}