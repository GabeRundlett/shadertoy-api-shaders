{
    "Shader": {
        "info": {
            "date": "1603249242",
            "description": "Please don't watch it on a phone.\nSimple particles physics using Position Based Dynamics.\nIt's my first \"physics\" inside a shader.",
            "flags": 32,
            "hasliked": 0,
            "id": "WsKcRK",
            "likes": 18,
            "name": "AutoWasher",
            "published": 3,
            "tags": [
                "2d",
                "particles",
                "physics",
                "pbd"
            ],
            "usePreview": 0,
            "username": "xjorma",
            "viewed": 712
        },
        "renderpass": [
            {
                "code": "// Created by David Gallardo - xjorma/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n\nvec4 Load(in int id, in int comp)\n{\n    int off = id * CompNum + comp;\n\treturn texelFetch(iChannel0, ivec2(off % MaxCompPerRow, off / MaxCompPerRow), 0);\n}\n\nfloat smoothFilter(float d)\n{\n    float v = 2. / iResolution.y;\n    return smoothstep(v, -v, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2\tuv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    uv *= 1.2;\n    vec3 col = vec3(0);\n    \n    col = mix(col, vec3(1,0,0), smoothFilter(map(uv, iTime)));\n    \n    for(int i = 0; i < PartNum; i++)\n    {\n        vec2 p = Load(i, CompPosition).xy;\n        col = mix(col, vec3(fract(Phi * float(i * 3)), fract(Phi * float(i * 3 + 1)), fract(Phi * float(i * 3 + 2))), smoothFilter(sdCircle(uv - p, BallRadius)));\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Created by David Gallardo - xjorma/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n\nconst int PartNum\t\t= 32;\nconst int MaxCompPerRow\t= 256;\nconst float BallRadius\t= 0.1;\nconst float BallDiameter= BallRadius * 2.;\nconst float DeltaTime   = 1. / (60.);\nconst float Damping\t\t= 0.95;\nconst float Stiffness\t= 0.95;\n\nconst int CompPosition\t= 0;\nconst int CompPPosition\t= 1;\nconst int CompVelocity\t= 2;\nconst int CompNum\t\t= 3;\n\n\nconst float Phi \t\t=  (sqrt(5.)*0.5 + 0.5);\n\n\n// https://iquilezles.org/articles/distfunctions2d\n\nfloat sdStar5(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\n\nvec2 rotate(in vec2 v, in float a)\n{\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2  m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\n\nfloat map(in vec2 p, in float t)\n{\n    p = rotate(p, sin(t * 0.5) * 3.);\n    return sdStar5(p, 1.2, 0.6) - 0.1;\n}\n\nvec2 normal( in vec2 p, in float t) // for function f(p)\n{\n    const float eps = 0.001; // or some other value\n    const vec2 h = vec2(eps,0);\n    return normalize( vec2(map(p + h.xy, t) - map(p - h.xy, t),\n                           map(p + h.yx, t) - map(p - h.yx, t)));\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Created by David Gallardo - xjorma/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n\n// PBD 1st Iteration (Integration + 1st interation solving constraints)\n\n\nvec4 Load(in int id, in int comp)\n{\n    int off = id * CompNum + comp;\n\treturn texelFetch(iChannel0, ivec2(off % MaxCompPerRow, off / MaxCompPerRow), 0);\n}\n\nvoid Store(in vec4 v, in int comp, in int curComp, inout vec4 o)\n{\n    if(comp == curComp)\n    {\n        o = v;\n    }\n}\n\nvoid positionBasedDynamics(inout vec2 pos, in vec2 vel, in int id)\n{\n    // basic integration\n    vel.y -= 9.8 * DeltaTime;\n    vel *= Damping;\n    pos = pos + vel * DeltaTime;\n    // enforce constraints\n    float d = max(0., map(pos, iTime) + BallRadius);\n    vec2 off = -d * normal(pos, iTime);\n    for(int i = 0; i < PartNum; i++)\n    {\n        if(i != id)\n        {\n\t        vec2 pp = Load(i, CompPosition).xy;\n            vec2 v = pos - pp;\n            float d = length(v);\n            v = normalize(v);\n            if( d < BallDiameter)\n            {\n                off += 0.5 * v * (BallDiameter - d);\n            }\n        }\n    }\n    pos += off * Stiffness;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord = floor(fragCoord);\n    int\tpixId = int(fragCoord.x + float(MaxCompPerRow) * fragCoord.y);\n    int curComp = pixId % CompNum;\n    pixId /= CompNum;\n    if( fragCoord.x >= float(MaxCompPerRow) || pixId >= PartNum * CompNum)\n    {\n        discard;\n    }\n    vec2\tpos;\n    vec2\tnewpos;\n    vec2\tvel;\n    if(iFrame == 0)\n    {\n        pos = ((vec2(pixId & 7, pixId >> 3)) - 4.) / 8.;\n        newpos = ((vec2(pixId & 7, pixId >> 3)) - 4.) / 8.;\n        vel = vec2(0);\n    }\n    else\n    {\n        pos = Load(pixId, CompPosition).xy;\n        vel = Load(pixId, CompVelocity).xy;\n        newpos = pos;\n        positionBasedDynamics(newpos, vel, pixId);\n    }\n    \n    Store(vec4(pos, 0, 0), CompPosition, curComp, fragColor);\n    Store(vec4(newpos, 0, 0), CompPPosition, curComp, fragColor);\n    Store(vec4(0), CompVelocity, curComp, fragColor);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Created by David Gallardo - xjorma/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n// PBD middle Iteration (interation solving constraints only)\n\nvec4 Load(in int id, in int comp)\n{\n    int off = id * CompNum + comp;\n\treturn texelFetch(iChannel0, ivec2(off % MaxCompPerRow, off / MaxCompPerRow), 0);\n}\n\nvoid Store(in vec4 v, in int comp, in int curComp, inout vec4 o)\n{\n    if(comp == curComp)\n    {\n        o = v;\n    }\n}\n\nvoid positionBasedDynamics(inout vec2 pos,in int id)\n{\n    // enforce constraints\n    float d = max(0., map(pos, iTime) + BallRadius);\n    vec2 off = -d * normal(pos, iTime);\n    for(int i = 0; i < PartNum; i++)\n    {\n        if(i != id)\n        {\n\t        vec2 pp = Load(i, CompPosition).xy;\n            vec2 v = pos - pp;\n            float d = length(v);\n            v = normalize(v);\n            if( d < BallDiameter)\n            {\n                off += 0.5 * v * (BallDiameter - d);\n            }\n        }\n    }\n    pos += off * Stiffness;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord = floor(fragCoord);\n    int\tpixId = int(fragCoord.x + float(MaxCompPerRow) * fragCoord.y);\n    int curComp = pixId % CompNum;\n    pixId /= CompNum;\n    if( fragCoord.x >= float(MaxCompPerRow) || pixId >= PartNum * CompNum)\n    {\n        discard;\n    }\n    vec2\toldpos;\n    vec2\tnewpos;\n    oldpos = Load(pixId, CompPosition).xy;\n    newpos = Load(pixId, CompPPosition).xy;\n    positionBasedDynamics(newpos, pixId);\n    \n    Store(vec4(oldpos, 0, 0), CompPosition, curComp, fragColor);\n    Store(vec4(newpos, 0, 0), CompPPosition, curComp, fragColor);\n    Store(vec4(0), CompVelocity, curComp, fragColor);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Created by David Gallardo - xjorma/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n// PBD middle Iteration (interation solving constraints only)\n\nvec4 Load(in int id, in int comp)\n{\n    int off = id * CompNum + comp;\n\treturn texelFetch(iChannel0, ivec2(off % MaxCompPerRow, off / MaxCompPerRow), 0);\n}\n\nvoid Store(in vec4 v, in int comp, in int curComp, inout vec4 o)\n{\n    if(comp == curComp)\n    {\n        o = v;\n    }\n}\n\nvoid positionBasedDynamics(inout vec2 pos,in int id)\n{\n    // enforce constraints\n    float d = max(0., map(pos, iTime) + BallRadius);\n    vec2 off = -d * normal(pos, iTime);\n    for(int i = 0; i < PartNum; i++)\n    {\n        if(i != id)\n        {\n\t        vec2 pp = Load(i, CompPosition).xy;\n            vec2 v = pos - pp;\n            float d = length(v);\n            v = normalize(v);\n            if( d < BallDiameter)\n            {\n                off += 0.5 * v * (BallDiameter - d);\n            }\n        }\n    }\n    pos += off * Stiffness;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord = floor(fragCoord);\n    int\tpixId = int(fragCoord.x + float(MaxCompPerRow) * fragCoord.y);\n    int curComp = pixId % CompNum;\n    pixId /= CompNum;\n    if( fragCoord.x >= float(MaxCompPerRow) || pixId >= PartNum * CompNum)\n    {\n        discard;\n    }\n    vec2\toldpos;\n    vec2\tnewpos;\n    oldpos = Load(pixId, CompPosition).xy;\n    newpos = Load(pixId, CompPPosition).xy;\n    positionBasedDynamics(newpos, pixId);\n    \n    Store(vec4(oldpos, 0, 0), CompPosition, curComp, fragColor);\n    Store(vec4(newpos, 0, 0), CompPPosition, curComp, fragColor);\n    Store(vec4(0), CompVelocity, curComp, fragColor);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Created by David Gallardo - xjorma/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n// PBD final Iteration (interation solving constraints + compute speed for next frame)\n\n\nvec4 Load(in int id, in int comp)\n{\n    int off = id * CompNum + comp;\n\treturn texelFetch(iChannel0, ivec2(off % MaxCompPerRow, off / MaxCompPerRow), 0);\n}\n\nvoid Store(in vec4 v, in int comp, in int curComp, inout vec4 o)\n{\n    if(comp == curComp)\n    {\n        o = v;\n    }\n}\n\nvoid positionBasedDynamics(inout vec2 pos, in vec2 oldpos, out vec2 vel,in int id)\n{\n    // enforce constraints\n    float d = max(0., map(pos, iTime) + BallRadius);\n    vec2 off = -d * normal(pos, iTime);\n    for(int i = 0; i < PartNum; i++)\n    {\n        if(i != id)\n        {\n\t        vec2 pp = Load(i, CompPosition).xy;\n            vec2 v = pos - pp;\n            float d = length(v);\n            v = normalize(v);\n            if( d < BallDiameter)\n            {\n                off += 0.5 * v * (BallDiameter - d);\n            }\n        }\n    }\n    pos += off * Stiffness;\n    // store final result\n    vel = (pos - oldpos) / DeltaTime;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord = floor(fragCoord);\n    int\tpixId = int(fragCoord.x + float(MaxCompPerRow) * fragCoord.y);\n    int curComp = pixId % CompNum;\n    pixId /= CompNum;\n    if( fragCoord.x >= float(MaxCompPerRow) || pixId >= PartNum * CompNum)\n    {\n        discard;\n    }\n    vec2\toldpos\t= Load(pixId, CompPosition).xy;\n    vec2\tnewpos\t= Load(pixId, CompPPosition).xy;;\n    vec2\tvel;\n    positionBasedDynamics(newpos, oldpos, vel, pixId);\n    \n    Store(vec4(newpos, 0, 0), CompPosition, curComp, fragColor);\n    Store(vec4(0), CompPPosition, curComp, fragColor);\n    Store(vec4(vel, 0, 0), CompVelocity, curComp, fragColor);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}