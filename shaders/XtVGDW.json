{
    "Shader": {
        "info": {
            "date": "1474666050",
            "description": "some colors I like, moving around a bit",
            "flags": 0,
            "hasliked": 0,
            "id": "XtVGDW",
            "likes": 17,
            "name": "shards",
            "published": 3,
            "tags": [
                "noise",
                "purple"
            ],
            "usePreview": 0,
            "username": "mahalis",
            "viewed": 1292
        },
        "renderpass": [
            {
                "code": "const float M_PI_F = 3.14159;\n\nvec2 noiseOffset(float time, vec2 uv, vec3 angleParamsX, vec3 angleParamsY, vec2 angleParamsTime, float baseDistance, vec3 distanceParamsX, vec3 distanceParamsY) {\n\tfloat angle = M_PI_F * (sin(angleParamsX.x * uv.x + angleParamsX.y * time + angleParamsX.z) + sin(angleParamsY.x * uv.y + angleParamsY.y * time + angleParamsY.z) + sin(angleParamsTime.x * time + angleParamsTime.y));\n\tfloat distance = baseDistance + baseDistance * (sin(distanceParamsX.x * uv.x + distanceParamsX.y * time + distanceParamsX.z) + sin(distanceParamsY.x * uv.y + distanceParamsY.y * time + distanceParamsY.z));\n\treturn vec2(cos(angle), sin(angle)) * distance;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 centeredCoords = ((fragCoord.xy / iResolution.xy) - 0.5) * 1.2;\n    centeredCoords.y *= iResolution.y / iResolution.x;\n\tfloat centerDistance = length(centeredCoords);\n\tvec2 noiseUV1 = centeredCoords;\n\tnoiseUV1 += noiseOffset(iTime, noiseUV1, vec3(2.3, 0.51, 0.0), vec3(-1.9, 0.47, 1.0), vec2(0.4, 0.4), 0.02, vec3(3.1, 0.44, 1.3), vec3(3.4, 0.53, 0.0));\n\tnoiseUV1 *= (1.0 - 0.3 * pow(centerDistance * 2.0, 1.2));\n\tnoiseUV1.y -= iTime * 0.05;\n\tnoiseUV1.x += 0.3 * sin(iTime * 0.13);\n\tnoiseUV1 *= 0.7; // scale it so we get larger specks\n\t\n\tvec2 noiseUV2 = centeredCoords;\n\tnoiseUV2 += noiseOffset(iTime, noiseUV2, vec3(-1.62, 0.3, 2.1), vec3(-1.83, 0.42, 0.3), vec2(-0.2, 0.19), 0.01, vec3(4.28, 0.23, 0.5), vec3(3.93, 0.19, 1.1));\n\tnoiseUV2 *= (1.0 - 0.4 * pow(centerDistance * 2.0, 1.3));\n\tnoiseUV2.x += 0.2 * sin(iTime * 0.22 + 0.5);\n\tnoiseUV2.y -= iTime * 0.02;\n\tnoiseUV2 *= 0.83;\n\n\tfloat edgeAttenuation = pow(centerDistance, 2.0);\n\n\tfloat visibilitySample1 = texture(iChannel0, noiseUV1).r;\n\tfloat colorSample1 = texture(iChannel0, vec2(noiseUV1.x + iTime * 0.005, noiseUV1.y)).g;\n\tfloat visibility1 = smoothstep(0.8, 0.9, visibilitySample1 - edgeAttenuation * 0.5);\n\n\tfloat visibilitySample2 = texture(iChannel0, noiseUV2).b;\n\tfloat colorSample2 = texture(iChannel0, vec2(noiseUV2.x - iTime * 0.009, noiseUV2.y)).r;\n\tfloat visibility2 = smoothstep(0.85, 0.9, visibilitySample2 - edgeAttenuation * 0.4);\n    \n\tfragColor = vec4(mix(vec3(1.0,0.2,0.9), vec3(0.1,0.4,1.0), float(smoothstep(0.0, 1.0, colorSample2))) * visibility2 + mix(vec3(1.0, 0.1, 0.6), vec3(0.2, 0.8, 1.0), float(smoothstep(0.0, 1.0, colorSample1))) * visibility1, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}