{
    "Shader": {
        "info": {
            "date": "1691534947",
            "description": "Test",
            "flags": 0,
            "hasliked": 0,
            "id": "DtjczD",
            "likes": 3,
            "name": "Foggy Spiral",
            "published": 3,
            "tags": [
                "test"
            ],
            "usePreview": 0,
            "username": "Max_H",
            "viewed": 116
        },
        "renderpass": [
            {
                "code": "//https://iquilezles.org/articles/spherefunctions/\nfloat sphIntersect( vec3 ro, vec3 rd, vec4 sph )\n{\n    vec3 oc = ro - sph.xyz;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - sph.w*sph.w;\n    float h = b*b - c;\n    if( h<0.0 ) return -1.0;\n    h = sqrt( h );\n    return -b - h;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float FOV = 60.0;\n\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float halfFOV = FOV * 0.5;\n    \n    float minPosition = tan(radians(-halfFOV));\n    float maxPosition = tan(radians(halfFOV));\n    \n    float percentage = iResolution.y / iResolution.x;\n    float difference = 1.0 - percentage;\n    \n    float x = mix(minPosition, maxPosition, uv.x);\n    float y = mix(minPosition, maxPosition, (uv.y * percentage) + (difference * 0.5));\n    \n    vec3 rayOrigin = vec3(0, 0, -1);\n    vec3 rayDirection = normalize(vec3(x, y, 1));\n    \n    int sphereCount = 32;\n    float space = 1.61803398875;\n    float minDistance = -1.0;\n    vec3 color = vec3(0);\n    for(int i = 0; i < sphereCount; i++)\n    {\n        float time = iTime + float(i) * space;\n        vec4 sphere = vec4(sin(time * 1.75), cos(time * 1.75), 5.0 + tan(time), 0.075);\n        float sphereDistance = sphIntersect(rayOrigin, rayDirection, sphere);\n        \n        if(sphereDistance >= 0.0 && (minDistance < 0.0 || sphereDistance < minDistance))\n        {\n           color = sphere.xyz * exp(-sphereDistance * 0.4);\n           minDistance = sphereDistance;\n        }\n    }\n    \n    if(minDistance < 0.0) color.rgb = vec3(0);\n    \n    fragColor.rgb = color;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}