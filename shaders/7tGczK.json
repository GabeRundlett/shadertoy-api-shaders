{
    "Shader": {
        "info": {
            "date": "1661804917",
            "description": "ad",
            "flags": 0,
            "hasliked": 0,
            "id": "7tGczK",
            "likes": 7,
            "name": "ad",
            "published": 3,
            "tags": [
                "ad"
            ],
            "usePreview": 0,
            "username": "dannn",
            "viewed": 265
        },
        "renderpass": [
            {
                "code": "// Simplified lighting of clouds\n\n// Iterating on the ideas I used for \"Fishermen at sea\" and \"Distress Flare\"\n// https://www.shadertoy.com/view/tdKcWD\n// https://www.shadertoy.com/view/3dGyRc\n\n// They were in turn inspired by \"Clouds\" by iq,\n// who uses a non-physical lighting where light intensity\n// is a function of the density difference between the current\n// point and a point further toward the source.\n// https://www.shadertoy.com/view/XslGRr\n\n#define R(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n//#define T(p) smoothstep(0.,1.,textureLod(iChannel0,(p)/256.,0.).r)\n#define T(p) textureLod(iChannel0,(p)/256.,0.).r\n\nfloat fbm(vec2 p)\n{\n    p += T(p.yx*5. + iTime*0.1)*0.1;\n    return T(p)/2. + T(p*2.)/4. + T(p*4.)/8. + T(p*8.)/16. + T(p*16.)/32. + T(p*32.)/64.;\n}\n\n\nfloat density(vec2 p) \n{\n    return smoothstep(0.2,0.8,fbm(p-0.1*iTime))*3.;\n}\n\n\nfloat light(vec2 p, vec3 source)\n{\n    float dist = length(source - vec3(p,0));\n    float dist2D = length(source.xy-p);\n    //float lerpFactor = 1.0/dist;\n    float T = 1.; // Integrate transmittance along the trajectory\n    float d1 = density(p);\n    float STEPS = 3.;\n    float MAXL = 0.25;\n    for(float lerpFactor = 0.; lerpFactor<MAXL; lerpFactor+=MAXL/STEPS)\n    {\n        vec2 q = mix(p, source.xy, lerpFactor);\n        float d2 = density(q);\n        //T *= exp(-d2 * 0.1 * dist2D*exp(-lerpFactor*10.)*10.);\n        // Approximate version. Cheaper?\n        T /= 1.0 + d2/STEPS*dist2D*exp(-lerpFactor*10.)*10.;\n    }\n    return d1*T/(dist*dist);\n}\n\n\nvoid mainImage( out vec4 o, in vec2 u )\n{\n    vec2 p = (u*2.-iResolution.xy)/iResolution.y;\n\n    #if 1\n    // Camera motion inspired from Shane's shaders\n    // \"Precalculated Voronoi Heightmap\" by Shane\n    // https://www.shadertoy.com/view/ldtGWj\n    p *= 2.;\n    p.xy *= R(cos(0.32*iTime)+sin(0.1*iTime));\n    p.x -= iTime*2.;\n    p.y -= cos(iTime);\n    vec3 source = vec3(-iTime*2.+sin(iTime*0.62)*1.62,cos(iTime*2.0)*0.5,2.5 + cos(iTime*0.4));\n    vec3 source2 = vec3(-iTime*2.+cos(iTime),sin(iTime*1.62)*0.62,2.5 + sin(iTime));\n    #else\n    p *= 2.;\n    vec3 source = vec3(cos(iTime),sin(iTime*0.62),2.5);\n    #endif\n    \n    //vec3 col = vec3(fbm(p * 2.));\n    \n    vec3 col = light(p, source) * vec3(5.,6.,8.);\n    col += light(p, source2) * vec3(5.,6.,8.);\n    \n    #if 1\n    col = 1.-exp(-col);\n    #else\n    // ACES tone mapping\n    // https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\n    // Used in https://www.shadertoy.com/view/ts3Bz7\n    col = (col*(2.51*col+0.03))/(col*(2.43*col+0.59)+0.14);\n    #endif\n\n    // Output to screen\n    o = vec4(pow(col,vec3(0.45)),1.0);\n    o.rgb += (texture(iChannel0, u / iChannelResolution[0].xy + iTime).r * 2. - 1.) * .01;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}