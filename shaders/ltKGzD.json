{
    "Shader": {
        "info": {
            "date": "1473671064",
            "description": "How many black dots ?\nNote that contrary to the classical white dot illusion, these black dots are real.\n\nNB: you might have to find the best distance to screen for the most effective effect.",
            "flags": 0,
            "hasliked": 0,
            "id": "ltKGzD",
            "likes": 0,
            "name": "black dots illusion",
            "published": 3,
            "tags": [
                "illusion",
                "2tweets",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1007
        },
        "renderpass": [
            {
                "code": "// reproducing http://twistedsifter.com/2016/09/12-dots-illusion-by-jacques-ninio/\n\n/**/\n#define S(v,k) smoothstep(.03,.02, length(v)/k) \n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U = U/125. + .5;\n    O += 1.- 1.6*S(fract(U*.5-vec2(.25,0))-.5, .8)\n            + .8*S(fract(U*.5-vec2(.25,0))-.5, 1.)\n        -O;       // black dots\n\n    U = fract( U*mat2(1,-1,1,1) ) -.5;\n    O -= .52*S( min( min(abs(U.x),abs(U.y)) ,            // lines\n                     min(abs(U.x+U.y),abs(U.x-U.y))*.7 ),\n                 1.7 ) ;\n}\n/**/\n\n\n\n/** // I was imitating a too blurry version of the true drawing !\n\n#define S(v) smoothstep(.1,0., abs(v)) \n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U *= 3.5/iResolution.y;\n    float r = length( fract(U*.5-vec2(.25,0))-.5);\n    \n    O += S(r/.3) - .2*min(1.,2.*S(r)) -O;  // black dots ( ~ differential of Gaussians )\n  //O += S(r/.3) - .4*min(1.,2.*S(r/.5)) -O; \n    \n    U = fract( U*mat2(1,-1,1,1) ) -.5;\n\n    O += min(   S(U.x)                     // lines\n              + S(U.y)\n              + S((U.x+U.y)*.7)\n              + S((U.x-U.y)*.7)\n            , 1.);\n    \n    O = 1. - .5*O;\n}\n/**/\n\n\n\n/** // using min indeed adds a diag illusion, see https://www.shadertoy.com/view/MtKGzD \n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U *= 3.5/iResolution.y;\n    O += 1.- smoothstep(.03,0.,length(fract(U*.5-vec2(.25,0))-.5)) -O;       // black dots\n\n    U = fract( U*mat2(1,-1,1,1) ) -.5;\n    O -= .5*smoothstep(.1,0., min( min(abs(U.x),abs(U.y)) ,      // lines\n                                   min(abs(U.x+U.y),abs(U.x-U.y))*.7 )) ;\n}\n/**/\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}