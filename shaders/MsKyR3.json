{
    "Shader": {
        "info": {
            "date": "1522815050",
            "description": "Just testing out isolating multiple circles in a single pass. Julia mode... ;^)",
            "flags": 0,
            "hasliked": 0,
            "id": "MsKyR3",
            "likes": 10,
            "name": "nSpiral Circle Test 0.0.1",
            "published": 3,
            "tags": [
                "fractal",
                "circle",
                "vector"
            ],
            "usePreview": 0,
            "username": "Chris_M_Thomasson",
            "viewed": 836
        },
        "renderpass": [
            {
                "code": "// Fractal Spin by Chris M. Thomasson\n\n\n\n// Viewport Axes\nstruct ct_axes\n{\n    float xmin;\n    float xmax;\n    float ymin;\n    float ymax;\n};\n    \n    \nct_axes ct_axes_from_radius(\n    in vec3 vpcircle\n){\n    return ct_axes(\n        vpcircle.x - vpcircle.z,\n        vpcircle.x + vpcircle.z,\n        vpcircle.y - vpcircle.z,\n        vpcircle.y + vpcircle.z\n    );\n}\n\n\n// Simple 2d Plane\nstruct ct_plane2d\n{\n    ct_axes axes;\n    float xstep;\n    float ystep;\n};\n    \n    \nct_plane2d ct_plane2d_create(\n    in ct_axes axes\n){\n    float awidth = axes.xmax - axes.xmin;\n    float aheight = axes.ymax - axes.ymin;\n    \n    float daspect = abs(iResolution.y / iResolution.x);\n    float waspect = abs(aheight / awidth);\n    \n    if (daspect > waspect)\n    {\n        float excess = aheight * (daspect / waspect - 1.0);\n        axes.ymax += excess / 2.0;\n        axes.ymin -= excess / 2.0;\n    }\n    \n    else if (daspect < waspect)\n    {\n        float excess = awidth * (waspect / daspect - 1.0);\n        axes.xmax += excess / 2.0;\n        axes.xmin -= excess / 2.0;\n    }\n    \n    return ct_plane2d(\n        axes,\n        (axes.xmax - axes.xmin) / iResolution.x,\n        (axes.ymax - axes.ymin) / iResolution.y\n    );\n}\n\n\nvec2 ct_plane2d_project(\n\tin ct_plane2d self,\n    in vec2 z\n){\n\treturn vec2(\n        self.axes.xmin + z.x * self.xstep,\n        self.axes.ymin + z.y * self.ystep\n    );\n}\n\n\nvec4 ct_circle(\n    in vec2 c,\n    in vec2 z,\n    in float radius\n){\n    float d = length(c - z);\n    \n    if (d < radius) \n    {\n        d = d / radius;\n        float b = -(.25 + abs(sin(iTime)));\n        return exp(b*dot(d,d) ) * vec4(1,.7,.4,0)*2.;\n    }\n    \n    return vec4(0.0, 0.0, 0.0, 0.0);\n}\n\nvec2 ct_cmul(in vec2 p0, in vec2 p1)\n{\n    return vec2(p0.x * p1.x - p0.y * p1.y, p0.x * p1.y + p0.y * p1.x);\n}\n\n\nvec4 ct_spiral_arm(\n    in vec2 c,\n    in float astart,\n    in int n\n){\n\tvec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n    \n    float rbase = 1.0 / float(n);\n    float abase = 6.28 / float(n);\n    \n    vec2 prev = vec2(0.0, 0.0);\n    \n    c = ct_cmul(c, c) + cos(iTime * .5) * .35;\n    c = ct_cmul(c, c) + sin(iTime * .25) * .45;\n    c = ct_cmul(c, c) + sin(iTime * .25) * .25;\n    \n    for (int i = 1; i < n + 1; ++i)\n    {\n        float angle = abase * float(i) + astart;\n        float radius = rbase * float(i);\n        \n        vec2 cur = vec2(cos(angle) * radius, sin(angle) * radius);\n        \n        vec2 dif = cur - prev;\n        \n        float br = length(dif) / 2.0;\n        \n        vec2 mid = vec2(prev.x + dif.x * .5, prev.y + dif.y * .5);\n        \n        color += ct_circle(c, mid, br * (.2 + abs(sin(iTime * 1.5)) * .8));\n        \n        prev = cur;\n    }\n    \n    \n    return color;\n}\n\n\n// High-Level Entry\nvec4 ct_main(\n    in ct_plane2d plane,\n    in vec2 c\n){\n    vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n    \n    vec2 center = vec2(0.0, 0.0);\n    float radius = 1.8;\n    //int n = 6;//2 + (int(floor(iTime * 3.)) % 16);\n    \n    int sn = 23;\n    float aspin = -iTime * 1.0;\n    \n    int n = 6;\n    float abase = 6.28 / float(n);\n    \n    for (int i = 0; i < n; ++i)\n    {\n     \tfloat angle = abase * float(i) + aspin;\n        \n        color += ct_spiral_arm(c, angle, sn);\n    }\n    \n    return color;\n}\n\n\n\n// Raw Entry.\nvoid mainImage(\n  \tout vec4 fragColor, \n\tin vec2 fragCoord\n){\n    vec3 vpcircle = vec3(\n        0., \n        0., \n        abs(cos(iTime * .25)) + .5\n    );\n    \n    ct_plane2d plane = ct_plane2d_create(\n        ct_axes_from_radius(vpcircle)\n    );\n    \n    vec2 c = ct_plane2d_project(plane, fragCoord);\n    \n    // Exec...\n    vec4 color = ct_main(plane, c);\n    \n    fragColor = color;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}