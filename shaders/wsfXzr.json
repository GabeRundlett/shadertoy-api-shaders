{
    "Shader": {
        "info": {
            "date": "1550481398",
            "description": "Based on \"Heart Function\", with analytical normals and reflection (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "wsfXzr",
            "likes": 4,
            "name": "Reflecting Heart",
            "published": 3,
            "tags": [
                "reflection",
                "function",
                "surface"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 424
        },
        "renderpass": [
            {
                "code": "// \"Reflecting Heart\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\n\nvec3 ltDir;\nfloat tCur, dstFar, a, b;\nconst float pi = 3.14159;\n\nfloat SurfDf (vec3 p)\n{\n// f(x,y,z) = (x^2 + ((1 + b) * y)^2 + z^2 - 1)^3 - x^2 * z^3 - a * y^2 * z^3\n  float v1, v2;\n  v1 = (1. + b) * p.y;\n  v2 = p.x * p.x + v1 * v1 + p.z * p.z - 1.;\n  return v2 * v2 * v2 - (p.x * p.x + a * p.y * p.y) * p.z * p.z * p.z;\n}\n\nvec3 SurfNf (vec3 p)\n{\n  float v1, v2;\n  v1 = (1. + b) * p.y;\n  v2 = p.x * p.x + v1 * v1 + p.z * p.z - 1.;\n  return normalize (vec3 (6. * p.x * v2 * v2 - 2. * p.x * p.z * p.z * p.z,\n     6. * (1. + b) * v1 * v2 * v2 - 2. * a * p.y * p.z * p.z * p.z,\n     6. * p.z * v2 * v2 - 3. * (p.x * p.x + a * p.y * p.y) * p.z * p.z));\n}\n\nvec2 BallHit (vec3 ro, vec3 rd, float s)\n{\n  float dbIn, dbOut, b, d;\n  b = dot (rd, ro);\n  d = b * b + s * s - dot (ro, ro);\n  dbIn = dstFar;\n  dbOut = dstFar;\n  if (d > 0.) {\n    d = sqrt (d);\n    dbIn = - b - d;\n    dbOut = - b + d;\n  }\n  return vec2 (dbIn, dbOut);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec2 bnd;\n  float dHit, h, s, ds, sLo, sHi;\n  const float nDiv = 200.;\n  dHit = dstFar;\n  bnd = BallHit (ro, rd, 2.);\n  if (bnd.x < dstFar) {\n    s = bnd.x;\n    sLo = bnd.x;\n    ds = (bnd.y - bnd.x) / nDiv;\n    for (float j = 0.; j < nDiv; j ++) {\n      h = SurfDf (ro + s * rd);\n      if (h < 0. || s > bnd.y) break;\n      sLo = s;\n      s += ds;\n    }\n    if (h < 0.) {\n      sHi = s;\n      for (float j = 0.; j < 16.; j ++) {\n        s = 0.5 * (sLo + sHi);\n        if (SurfDf (ro + s * rd) > 0.) sLo = s;\n        else sHi = s;\n      }\n      dHit = 0.5 * (sLo + sHi);\n    }\n  }\n  return dHit;\n}\n\nfloat BgPat (vec3 rd)\n{\n  vec3 tm, qn, u;\n  vec2 q;\n  tm = -1. / max (abs (rd), 0.0001);\n  qn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  u = max (max (tm.x, tm.y), tm.z) * rd;\n  q = mod (12. * vec2 (dot (u.zxy, qn), dot (u.yzx, qn)), vec2 (1.));\n  return min (SmoothBump (0.08, 0.92, 0.03, q.x), SmoothBump (0.08, 0.92, 0.03, q.y));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstObj, vDotL, spec;\n  a = 0.5 + 0.45 * sin (1.5 * tCur);\n  b = 0.5 + 0.45 * sin (1.4 * tCur);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = SurfNf (ro);\n    vDotL =  max (dot (vn, ltDir), 0.);\n    col = vec3 (1., 0.8, 0.8) * (0.2 + 0.7 * vDotL * vDotL);\n    spec = 0.2 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 64.);\n    rd = reflect (rd, vn);\n  } else {\n    col = vec3 (0.9, 0.9, 1.) * (0.4 + 0.1 * (rd.z + 1.) * (rd.z + 1.));\n    spec = 0.;\n  }\n  col = mix (col, vec3 (1.) * (0.4 + 0.6 * BgPat (rd)), 0.5) + spec * vec3 (1., 1., 0.5);\n  return clamp (col, 0., 1.);\n}\n\n#define AA  1\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.6 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el -= pi * mPtr.y;\n  } else {\n    az += 0.01 * pi * tCur;\n    el -= 0.1 * pi * sin (0.021 * pi * tCur);\n  }\n  ro = vec3 (0., 0.13, -7.);\n  ro.yz = Rot2D (ro.yz, el);\n  ro.xy = Rot2D (ro.xy, az);\n  dstFar = 20.;\n  ltDir = normalize (vec3 (1., 1., -1.));\n  ltDir.yz = Rot2D (ltDir.yz, el);\n  ltDir.xy = Rot2D (ltDir.xy, az);\n  #if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), 5.));\n    rd.yz = Rot2D (rd.yz, el);\n    rd.xy = Rot2D (rd.xy, az);\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}