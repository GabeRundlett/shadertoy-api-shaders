{
    "Shader": {
        "info": {
            "date": "1633944958",
            "description": "Playing around with blending and painting primitives smoothly - mouse to look around",
            "flags": 0,
            "hasliked": 0,
            "id": "fd3XD2",
            "likes": 5,
            "name": "SDFPainting",
            "published": 3,
            "tags": [
                "sdf",
                "color",
                "blend",
                "paint",
                "smin",
                "smax"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 316
        },
        "renderpass": [
            {
                "code": "// a simple (smooth) union / subtraction / paint CSG test with some color blend tightness control for some voxel stuff - 10/10/2021\n\n#define AA 1\t// make this 2 if you are feeling cold...\n\nvec3 _basecol = vec3(0.0);\t// pure filth\n\n// prims\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p)-r;\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// min/max polynomial\nfloat smin( float a, float b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\nfloat smax(float a, float b, float k)\n{\n    return smin(a, b, -k);\n}\n\nfloat sminCol( float a, float b, float k, vec3 col1,float coltightness)\n{\n    if (k<=0.0)\n    {\n        // no smooth...\n        if (a>b)\n        {\n            _basecol = col1;\n            return b;\n        }\n        return a;\n    }\n    // smoothed...\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n    float colblend = clamp( 0.5 + 0.5*(b-a)/(k*(coltightness)), 0.0, 1.0 );\n    _basecol = mix(col1,_basecol,colblend);\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat smaxCol( float a, float b, float k, vec3 col1, float coltightness)\n{\n    if (k<=0.0)\n    {\n        if (a<=-b)\n        {\n            _basecol = col1;\n            return -b;\n        }\n        return a;\n    }\n    //return smin(a, -b, -k);// subtract\n    //return smin(a, b, -k); // intersection\n    b=-b;\n    k=-k;\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n    float colblend = clamp( 0.5 + 0.5*(b-a)/(k*(coltightness)), 0.0, 1.0 );\n    _basecol = mix(col1,_basecol,colblend);\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\n// same as smaxCol but without the distance blend (so, just paint a shape)\nvoid PaintSmooth(float a,float b, float k, vec3 col1,  float coltightness)\n{\n    if (k<=0.0)\n    {\n        // no smooth...\n        if (a<=-b)\n            _basecol = col1;\n        return;\n    }\n    // smoothed...\n    b=-b;\n    k=-k;\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n    float colblend = clamp( 0.5 + 0.5*(b-a)/(k*(coltightness)), 0.0, 1.0 );\n    _basecol = mix(col1,_basecol,colblend);\n}\n\n\n\n\nfloat map( in vec3 pos )\n{\n    float dist_cylinder = sdCylinder(pos+vec3(2.0,1.0,0.0),vec2(1.2,2.5));\n    float dist_sphere1 = sdSphere(pos+vec3(0.0,0.0,0.0),1.8);\n    float dist_sphere2 = sdSphere(pos+vec3(2.0,-1.0,0.0),1.8);\n    float dist_box = sdBox(pos+vec3(-.5,0.0,0.0),vec3(2.1,0.4,0.4));\n\n    // paint shapes\n    float dist_box2 = sdBox(pos+vec3(2.0,0.5,0.0),vec3(0.2,0.5,0.2));\n    float dist_cylinder2 = sdCylinder(pos+vec3(2.0,1.8,0.0),vec2(2.0,0.3));\n\n\n   float _basedist = 1000.0f;\n    _basecol = vec3(0.0);\n    vec3 redcol = vec3(1.0,0.1,0.1);\n    vec3 greencol = vec3(0.1,1.0,0.1);\n    vec3 bluecol = vec3(0.1,0.1,1.0);\n    vec3 yellowcol = vec3(1.0,1.0,0.1);\n    vec3 whitecol = vec3(1.0,1.0,1.0);\n     \n    float _coltightness = 0.5+sin(iTime)*0.5;//0=tight, 1=loose\n     \n    _basedist = sminCol(_basedist, dist_cylinder, 0.0, redcol, _coltightness);  // +red cylinder\n    PaintSmooth(_basedist, dist_cylinder2, 0.5, whitecol, _coltightness);// PAINT white cylinder (band)\n    _basedist = sminCol(_basedist, dist_sphere1, 0.5, greencol, _coltightness); // +green sphere\n    _basedist = smaxCol(_basedist, dist_box, 0.5, bluecol, _coltightness);      // -blue box\n    _basedist = smaxCol(_basedist, dist_sphere2, 0.5, yellowcol, _coltightness);// -yellow sphere\n    PaintSmooth(_basedist, dist_box2, 0.5,whitecol, _coltightness); // PAINT white cube (square)\n    return _basedist;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.01;\t//0.0005\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n        float an = radians(-120.0);\n        float yoff = 3.0f;\n        if (iMouse.z>0.5)\n        {\n         an = an+(iMouse.x/iResolution.x)*6.28;\n         yoff = yoff+(5.0-((iMouse.y/iResolution.y)*15.0));\n        }\n\n    vec3 ro = vec3( 7.0*cos(an), yoff, 7.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // raymarch\n        const float tmax = 20.0;\n        float t = 0.0;\n        for( int i=0; i<200; i++ )// overkill\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos);\n            if( h<0.001 || t>tmax ) break;\n            t += h;\n        }\n    \n        // shading/lighting\t\n        float v = 1.0-abs(p.y);\n        vec3 col = vec3(v*0.1);\n\n        if( t<tmax )\n        {\n            vec3 mycol = _basecol;\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            \n            vec3 dir = normalize(vec3(1.0,0.7,0.0));\n\t        vec3 ref = reflect(rd, nor);\n\t        float spe = max(dot(ref, dir), 0.0);\n\t        vec3 spec = vec3(1.0) * pow(spe, 64.);\n            float dif = clamp( dot(nor,dir), 0.05, 1.0 );\n            col =  mycol*dif;\n            col+=spec;\n        }\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}