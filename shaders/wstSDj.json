{
    "Shader": {
        "info": {
            "date": "1572925885",
            "description": "another Nodevember project, for the theme “snow”. original plan was something elaborately procedural, placing cutouts along branches etc., and then some bad SDF math in the first part I put together ended up making cool patterns all on its own. go figure.",
            "flags": 0,
            "hasliked": 0,
            "id": "wstSDj",
            "likes": 11,
            "name": "snowflake",
            "published": 3,
            "tags": [
                "ice",
                "snowflake",
                "nodevember"
            ],
            "usePreview": 0,
            "username": "mahalis",
            "viewed": 1107
        },
        "renderpass": [
            {
                "code": "// license: CC BY-NC https://creativecommons.org/licenses/by-nc/4.0/\n\nvec2 r(vec2 p, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return vec2(c * p.x - s * p.y, s * p.x + c * p.y);\n}\n\nvec2 opReflect(vec2 v, vec2 normal) {\n\tv -= 2. * min(0., dot(v, normal)) * normal;\n\treturn v;\n}\n\nconst vec2 axisH = vec2(0,1);\nconst vec2 axisV = normalize(vec2(-sqrt(3.), 1));\nconst vec2 axisH2 = vec2(-axisV.x, axisV.y);\n\n// this does not work as intended, but the result looks interesting enough and I don’t have time to debug it\nfloat sdHexBox(vec2 position, vec2 halfSize) {\n\tvec2 absPosition = abs(position);\nreturn max(dot(absPosition, axisH) - halfSize.y, dot(absPosition, axisV) - halfSize.x);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tfloat t = iTime * 2.;\n\n\tvec2 uv = (fragCoord - iResolution.xy / 2.) / iResolution.y;\n\tuv = r(uv, t * 0.05);\n\tconst int segmentCount = 12;\n\tfor (int i = 0; i < segmentCount; i++) {\n\t\tfloat angle = 6.2832 * float(i) / float(segmentCount);\n\t\tuv = opReflect(uv, -vec2(cos(angle), sin(angle)));\n\t}\n    \n\tfloat dist = dot(uv, axisH) - 0.08; // core\n\t\n\tfloat hexRadius1 = cos(t * 0.13) * 0.06 + 0.25;\n\tfloat hexDistance1 = sdHexBox(uv - vec2(sin(t * 0.43) * 0.05 + 0.05,hexRadius1), vec2(0.002,0.03 + cos(t * 0.31) * 0.005));\n\n\tfloat hexRadius2 = cos(t * 0.18 + 0.1) * 0.1 + 0.15;\n\tfloat hexDistance2 = sdHexBox(uv - vec2(sin(t * 0.51 + 0.2) * 0.04 + 0.04, hexRadius2), vec2(0.002,0.03 + cos(t * 0.35 + 1.) * 0.01));\n\n\tfloat hexRadius3 = cos(t * 0.21 + 0.2) * 0.05 + 0.2;\n\tfloat hexDistance3 = sdHexBox(uv - vec2(sin(t * 0.61 + 0.4) * 0.04 + 0.06, hexRadius3), vec2(0.002,0.03));\n\n\tdist = min(dist, min(hexDistance1, min(hexDistance2, hexDistance3)));\n\n\tdist = min(dist, max(dot(uv, axisV) - 0.02, dot(uv, axisH) - max(hexRadius1,max(hexRadius2, hexRadius3)))); // arms\n\n\tfloat mask = smoothstep(fwidth(dist), 0., dist);\n\tfloat value = mask * pow(min(1.0,abs(dist + 0.2) * 5.), 60.);\n\n\tvec3 background = mix(vec3(0.1,0.6,0.7), vec3(0.1,0.2,0.5), length(uv) * 2.);\n\n\tvec3 refractedBackground = mix(vec3(0.,0.6,0.7), vec3(0.,0.2,0.5), min(1., length(uv) * 3.));\n\n\tfragColor = vec4(mix(background, value + refractedBackground, mask),1.);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}