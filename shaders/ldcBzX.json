{
    "Shader": {
        "info": {
            "date": "1526109527",
            "description": "These are approximations to the high dynamic range environment maps we wish these were. USE THEM IN YOUR SHADERS and your reflections will look much more realistic. Give me feedback if they can be made better. :)",
            "flags": 0,
            "hasliked": 0,
            "id": "ldcBzX",
            "likes": 24,
            "name": "HDR Env maps",
            "published": 3,
            "tags": [
                "hdr",
                "environmentmap"
            ],
            "usePreview": 0,
            "username": "otaviogood",
            "viewed": 2198
        },
        "renderpass": [
            {
                "code": "/*--------------------------------------------------------------------------------------\nLicense CC0 - http://creativecommons.org/publicdomain/zero/1.0/\nTo the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.\n----------------------------------------------------------------------------------------\n^This means do anything you want with this code. Because we are programmers, not lawyers.\n\nOnce a texture map is on Shadertoy, it can't be modified without breaking everyone's shaders.\nBut the environment maps should really be high dynamic range for things to look good.\nSo I did my best to make a simple function for each environment map that would make them\nlook like the original HDR textures.\n\nI tested using them as light sources with my stochastic ray tracer, and they look good.\nIt was all just approximated. I didn't feel like exactly duplicating the originals because\nthat would be hard.\n\nThe originals (in HDR form) can be found here: http://www.pauldebevec.com/Probes/\nAnd there's a simple viewer I founder for .hdr files here: https://viewer.openhdr.org/\n\n-Otavio Good\n*/\n\n// Uffizi Gallery environment map texture with extra sky brightness for HDR look.\n// rayDir must be a normalized direction vector.\nvec3 GetEnvMapG(vec3 rayDir) {\n    // Make sure this texture is set to the \"Uffizi gallery\" cubemap.\n    vec3 tex = texture(iChannel0, rayDir).xyz;\n    tex = tex * tex;  // gamma correct - gamma 2.0\n    vec3 light = vec3(0.0);\n    // overhead softbox, stretched to a rectangle\n    if ((rayDir.y > abs(rayDir.x+0.6)*0.29) && (rayDir.y > abs(rayDir.z*2.5))) light = vec3(2.0)*rayDir.y;\n    vec3 texp = pow(tex, vec3(14.0));\n    light *= texp;  // Masked into the existing texture's sky\n    return (tex + light*3.0);\n}\n\n// Forest environment map texture with extra sky brightness for HDR look.\n// rayDir must be a normalized direction vector.\nvec3 GetEnvMapF(vec3 rayDir) {\n    // Make sure this texture is set to the \"Forest\" cubemap.\n    vec3 tex = texture(iChannel1, rayDir).xyz;\n    tex = tex * tex;  // gamma correct - gamma 2.0\n\t// Make light come from the +z, -x corner. That's what it looks like is happening in the pic.\n    // Yellowish sunset color.\n    vec3 light = vec3(1.0, 0.7, 0.5)*((rayDir.z-rayDir.x)*0.3536+0.5);\n    vec3 texp = pow(tex, vec3(14.0));\n    light *= texp;  // Masked into the existing texture's sky\n    return (tex + light*3.0);\n}\n\n// St. Peter's Basilica environment map texture with extra sky brightness for HDR look.\n// rayDir must be a normalized direction vector.\nvec3 GetEnvMapB(vec3 rayDir) {\n    // Make sure this texture is set to the \"St. Peter's Basilica\" cubemap.\n    vec3 tex = texture(iChannel2, rayDir).xyz;\n    tex = tex * tex;  // gamma correct - gamma 2.0\n    // redish sky color.\n    vec3 light = vec3(1.0, 0.9, 0.9)*max(0.0, rayDir.y);\n    vec3 texp = pow(tex, vec3(14.0));\n    light *= texp;  // Masked into the existing texture's sky\n    return (tex + light*56.0);\n}\n\nvec3 RotateY(vec3 v, float rad)\n{\n  float cos = cos(rad);\n  float sin = sin(rad);\n  return vec3(cos * v.x - sin * v.z, v.y, sin * v.x + cos * v.z);\n}\n\n// dirVec MUST BE NORMALIZED FIRST!!!!\nfloat SphereIntersect(vec3 pos, vec3 dirVecPLZNormalizeMeFirst, vec3 spherePos, float rad)\n{\n    vec3 radialVec = pos - spherePos;\n    float b = dot(radialVec, dirVecPLZNormalizeMeFirst);\n    float c = dot(radialVec, radialVec) - rad * rad;\n    float h = b * b - c;\n    if (h < 0.0) return -1.0;\n    return -b - sqrt(h);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// ---------------- First, set up the camera rays for ray marching ----------------\n\tvec2 uv_orig = fragCoord.xy/iResolution.xy;\n    vec2 picSegment = floor(uv_orig * 3.0);\n    uv_orig = fract(uv_orig*3.0);\n    uv_orig = uv_orig * 2.0 - 1.0;\n    float zoom = 15.0;\n    vec2 uv = uv_orig / zoom;\n\n\tvec3 camUp=vec3(0,1,0);\n\tvec3 camLookat=vec3(0,0,0);\n\tvec3 camPos = vec3(0, 0, -16.0);\n\n\t// Camera setup.\n\tvec3 camVec=normalize(camLookat - camPos);\n\tvec3 sideNorm=normalize(cross(camUp, camVec));\n\tvec3 upNorm=cross(camVec, sideNorm);\n\tvec3 worldFacing=(camPos + camVec);\n\tvec3 worldPix = worldFacing + uv.x * sideNorm * (iResolution.x/iResolution.y) + uv.y * upNorm;\n\tvec3 rayVec = normalize(worldPix - camPos);\n\n    // Ray trace a sphere to reflect off of. (Could have been simplified)\n    float t = SphereIntersect(camPos, rayVec, vec3(0.0), 1.0);\n    vec3 col = vec3(0.25);\n    // If we hit the sphere...\n    if (t > 0.0) {\n        vec3 hitPos = camPos + rayVec * t;\n        vec3 normal = normalize(hitPos - vec3(0.0));\n        vec3 ref = reflect(rayVec, normal);\n        ref = RotateY(ref, iTime);\n        // Look up 3 different environment maps based on where on the screen we are.\n        if (picSegment.x == 0.0) col = GetEnvMapG(ref);\n        else if (picSegment.x == 1.0) col = GetEnvMapF(ref);\n        else col = GetEnvMapB(ref);\n    }\n    // Dim the lower parts of the screen to showcase the HDR look. :)\n    if (picSegment.y == 0.0) col *= 0.0625;\n    if (picSegment.y == 1.0) col *= 0.25;\n\n    // Output to screen (with gamma correct for gamma 2.0)\n    fragColor = vec4(sqrt(col),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}