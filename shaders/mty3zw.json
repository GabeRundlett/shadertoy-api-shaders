{
    "Shader": {
        "info": {
            "date": "1683719784",
            "description": "raesterizer\na little glitchy\nfor Cesium_137",
            "flags": 0,
            "hasliked": 0,
            "id": "mty3zw",
            "likes": 4,
            "name": "cleaner house thing",
            "published": 3,
            "tags": [
                "rasterizer"
            ],
            "usePreview": 0,
            "username": "ThePlaneGuy45",
            "viewed": 195
        },
        "renderpass": [
            {
                "code": "#define FOV 1.0\n#define LIGHT vec3(-0.4, -0.2, -1.0)\n\n\n\n\nfloat[] xcoords = float[](-1.25,0.0,-1.0,1.0,0.0,1.25,-0.5,0.5,0.5,-0.5,-1.0,0.0,-1.25,0.0,1.0,1.25,-1.0,-1.0,1.0,0.0,0.0,1.0,1.0,-1.0,-1.0,1.0,-0.75,0.75,-0.75,-0.5,-0.5,-0.75,0.75,0.5,0.5,0.75,1.0,0.75,1.0,0.75,1.0,1.0,0.75,-0.75,0.75,0.78);\nfloat[] ycoords = float[](1.25,1.25,1.25,1.25,1.25,1.25,1.0,1.0,1.0,1.0,-1.25,-1.25,-1.25,-1.25,-1.25,-1.25,1.0,1.0,1.0,1.0,-1.0,-1.0,1.0,-1.0,-1.0,-1.0,0.75,0.75,0.75,0.75,0.75,-0.75,-0.75,0.75,0.75,0.75,0.0,0.0,0.0,-0.5,-0.5,-0.5,-0.75,-0.75,0.0,-0.5);\nfloat[] zcoords = float[](0.5,1.5,0.5,0.5,1.75,0.5,-1.0,-1.0,0.0,0.0,0.5,1.5,0.5,1.75,0.5,0.5,-1.5,0.5,-1.5,1.5,1.5,0.5,0.5,0.5,-1.5,-1.5,-1.5,-1.5,0.5,-1.0,0.0,-1.5,-1.5,0.0,-1.0,0.5,-1.5,-1.5,-0.5,-1.5,-1.5,-0.5,0.5,0.5,-0.5,-0.5);\nint[] triData1 = int[](2,1,5,4,7,18,17,19,10,14,11,23,15,14,13,12,19,16,20,20,8,5,14,12,20,20,3,12,22,19,23,27,29,29,32,25,17,17,28,27,34,21,37,37,35,35,37,23,26,40,26,9,9,22,41,10,10,35,34,34,42,23,34,29,43,43,17,17,27,27,36,38,33,46,33,36,39,39,46,46,45,45,16,3,43,29,5,5);\nint[] triData2 = int[](3,5,6,2,8,9,18,17,7,13,12,9,16,12,1,2,8,15,21,22,9,1,5,11,18,24,2,4,24,27,18,19,27,30,33,26,27,32,36,28,35,24,38,28,8,7,19,39,25,41,33,34,31,26,42,31,30,30,9,8,39,22,36,31,33,32,25,24,29,44,28,45,46,43,43,45,45,38,42,41,39,42,4,11,44,36,14,16);\nint[] triData3 = int[](1,2,2,6,19,10,7,7,18,12,13,18,12,16,11,4,23,4,22,23,23,13,13,2,24,21,11,15,26,17,20,28,30,31,25,24,32,25,35,35,36,22,28,19,7,30,39,19,33,33,41,31,10,42,26,30,7,27,8,35,22,39,31,36,32,44,24,18,44,32,45,28,40,45,46,43,38,37,41,40,42,46,6,1,36,44,16,6);\n\n\n\n\n\nfloat sign3(vec2 p1, vec2 p2, vec2 p3){\n    return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);\n}\n\nmat2 rot2( float a ){ vec2 v = sin(vec2(1.570796, 0) + a);\treturn mat2(v, -v.y, v.x); }\n\nfloat inTriangle(vec2 pt, vec2 p1, vec2 p2, vec2 p3){\n    float d1 = sign3(pt,p1,p2);\n    float d2 = sign3(pt,p2,p3);\n    float d3 = sign3(pt,p3,p1);\n    if(d1 < 0.0 && d2 < 0.0 && d3 < 0.0){\n        return 1.0;\n    }\n    else{\n        return 0.0;\n    }\n}\n\nvec3 midPoint(vec3 a, vec3 b, vec3 c) {\n    return mix(c, mix(a, b, 0.5), 2.0 / 3.0);\n}\n\nvec2 rot;\n\nvoid rotate(inout vec3 p) {\n\n    vec3 rp = p; // Rotated Point\n    rp.yz *= rot2(rot.y);\n    rp.xz *= rot2(rot.x);\n    rp.z += 5.0; // Camera Distance\n    p = rp;\n\n}\n\nvec2 project(vec3 p) { // Projection script\n    \n    return p.xy / (FOV * p.z);\n\n}\n\nvec3[3] coords(int offset) { // Get tri data\n\n    vec3 a = vec3(\n        xcoords[triData1[offset] - 1],\n        ycoords[triData1[offset] - 1],\n        zcoords[triData1[offset] - 1]\n    );\n    vec3 b = vec3(\n        xcoords[triData2[offset] - 1],\n        ycoords[triData2[offset] - 1],\n        zcoords[triData2[offset] - 1]\n    );\n    vec3 c = vec3(\n        xcoords[triData3[offset] - 1],\n        ycoords[triData3[offset] - 1],\n        zcoords[triData3[offset] - 1]\n    );\n    \n    return vec3[3](a, b, c);\n\n}\n\nvec3 normal(vec3 p1, vec3 p2, vec3 p3){\n    vec3 n;\n    vec3 v = p2 - p1;\n    vec3 w = p3 - p1;\n    n.x = (v.y*w.z)-(v.z*w.y);\n    n.y = (v.z*w.x)-(v.x*w.z);\n    n.z = (v.x*w.y)-(v.y*w.x);\n    return normalize(n);\n}\n\nfloat calculateIntensity(vec3 p1, vec3 p2, vec3 p3){\n    return clamp(dot(normalize(LIGHT),normal(p1,p2,p3)),0.05,0.8);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    uv.x -= 0.25 * iResolution.x / iResolution.y;\n    \n    vec4 tri;\n    tri.w = 10000.0;\n    \n    rot = (iMouse.xy / iResolution.xy) * 8.0 - 4.0;\n    \n    for(int i = 0; i < 88; i++) {\n    \n        vec3 p[3] = coords(i);\n        rotate(p[0]);\n        rotate(p[1]);\n        rotate(p[2]);\n        float dist = midPoint(p[0], p[1], p[2]).z; // Midpoint depth\n        vec2 pr1 = project(p[0]);\n        vec2 pr2 = project(p[1]);\n        vec2 pr3 = project(p[2]);\n        \n        vec3 norm = normal(p[0], p[1], p[2]);\n        \n        if(dot(norm, norm) > 0.0) { // backface culling\n        \n            if(inTriangle(uv - 0.5, pr1, pr2, pr3) == 1.0 && dist < tri.w) { // In triangle and depth sorting\n        \n                tri.rgb = mix(vec3(0.2), vec3(1.0), calculateIntensity(p[0], p[1], p[2]));\n                tri.w = dist;\n        \n            }\n            \n        }\n    \n    }\n    \n    if(tri.w >= 10000.0) {\n    \n        fragColor = vec4(0.2, 0.2, 0.2, 1.0);\n    \n    } else {\n    \n        fragColor = vec4(tri.rgb, 1.0);\n        \n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}