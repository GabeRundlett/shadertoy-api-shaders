{
    "Shader": {
        "info": {
            "date": "1724826018",
            "description": "Conversions between 3D direction and its projection (face index + barycentric coordinates) on an icosahedron.\nAlso explicit normal/tangent/bitangent basis per face.",
            "flags": 0,
            "hasliked": 0,
            "id": "MfBfzh",
            "likes": 20,
            "name": "Icosahedral mapping",
            "published": 3,
            "tags": [
                "icosahedron"
            ],
            "usePreview": 1,
            "username": "FordPerfect",
            "viewed": 156
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Conversions between 3D direction and its projection (face\n// index + barycentric coordinates) on an icosahedron. Also\n// explicit normal/tangent/bitangent basis per face.\n\n// Implementations of several icosahedron-mapping related\n// functions.\n// The implied icosahedron is oriented so that normals to its\n// faces are (where φ=(sqrt(5)+1)/2 is the golden ratio)\n//      index |  sqrt(3)*normal\n//     -------|-------------------\n//          0 | +1     +1     +1 \n//          1 | +φ    +1/φ     0 \n//          2 |  0     +φ    +1/φ\n//          3 |+1/φ     0     +φ \n//          4 | +φ    -1/φ     0 \n//          5 | +1     +1     -1 \n//          6 |  0     +φ    -1/φ\n//          7 | -1     +1     +1 \n//          8 |-1/φ     0     +φ \n//          9 | +1     -1     +1 \n//         10 | -1     +1     -1 \n//         11 |+1/φ     0     -φ \n//         12 | +1     -1     -1 \n//         13 |  0     -φ    +1/φ\n//         14 | -1     -1     +1 \n//         15 | -φ    +1/φ     0 \n//         16 |-1/φ     0     -φ \n//         17 |  0     -φ    -1/φ\n//         18 | -φ    -1/φ     0 \n//         19 | -1     -1     -1 \n// The faces are arranged in two half-spirals, with\n// opposing faces summing to 19 (full spiral would\n// break that property, as e.g. 9 and 10 would be next\n// to each other). Aside: there doesn't seem to be\n// universally adopted way of numbering d20.\n// The orientation (indicated in the image by coloring of\n// the corners) of per-face basis is rather arbitrary:\n// while the tangent is always ortogonal one of the edges,\n// there's not much pattern as to which. The truly consistent\n// orientation seems unlikely, due to hedgehog-combing reasons.\n// Note that barycentric coordinates here are almost the\n// same as cube coordinates used in hexagonal grids (see\n// https://www.redblobgames.com/grids/hexagons/ and\n// https://www.shadertoy.com/view/dtySDy).\n\n// Compute normal from index.\n// Assumes 0<=i<20.\n// We can, of course, just hardcode the table instead.\nvec3 ico_normal(int i)\n{\n    int j=min(i,19-i);\n    vec4 c=vec4(sqrt(5.0)+1.0,sqrt(5.0)-1.0,0,2)/sqrt(12.0);\n    vec3 v=c.www;\n    if((( 18>>j)&1)>0) v=c.xyz;\n    if((( 68>>j)&1)>0) v=c.zxy;\n    if(((264>>j)&1)>0) v=c.yzx;\n    return v*(i<10?+1.0:-1.0)*vec3(1-((ivec3(12,66,48)>>(9-j))&2));\n}\n\n// Compute index from normal (must be one of 20 normals above,\n// with some tolerance; in particular, must be normalized).\nint ico_index(vec3 v)\n{\n    int z=int(round(dot(v,vec3(1.7)))),s=sign(z);\n    return (20-3*s)/2-4*z+s*((695256216>>(3*(int(float(4*s)*(v.x-v.y))+5+abs(z)/2)))&7); // Naruhodo.\n}\n\n// Compute normal/tangent/bitangent basis (in columns of\n// the returned matrix) for face containing (unnormalized)\n// direction v.\nmat3 ico_basis(vec3 v)\n{\n    vec3 a=abs(v),s=2.0*step(0.0,v)-1.0;                    // Magnitude and zero-less sign.\n    vec3 d=vec3(sqrt(1.25)+0.5,sqrt(1.25)-0.5,0)/sqrt(3.0); // Off-diagonal normal coordinates.\n    vec3 n=vec3(1)/sqrt(3.0);                               // Find normal to containing face.\n    if(dot(a,d    -n)>0.0) n=d;                             // Heavily inspired by\n    if(dot(a,d.yzx-n)>0.0) n=d.yzx;                         // \"Dodecahedron & Icosahedron\" by gaz\n    if(dot(a,d.zxy-n)>0.0) n=d.zxy;                         // https://www.shadertoy.com/view/wdcczs\n    n*=s;                                                   // Incorporate signs.\n    vec3 t=normalize(n-s*(abs(n.x)==abs(n.y)?d:n*n));       // Tangent.\n    t=normalize(t-dot(t,n)*n);                              // Make orthogonal to normal.\n    return mat3(n,t,cross(n,t));                            // Output basis.\n}\n\n// Compute texture coordinates corresponding to (unnormalized)\n// direction v in basis B.\n// The face forms an equilateral triangle with vertices\n//     (3-sqrt(5))*[  1 ,     0     ]\n//     (3-sqrt(5))*[-1/2, +sqrt(3)/2]\n//     (3-sqrt(5))*[-1/2, -sqrt(3)/2]\n// and center [0,0] (1:1 scale at face centers for an icosahedron\n// with in-radius 1).\nvec2 ico_uv(mat3 B,vec3 v)\n{\n    return (v/dot(v,B[0])*B).yz;\n}\n\n// Compute normalized barycentric coordinates corresponding\n// to (unnormalized) direction v in basis B.\nvec3 ico_weights(mat3 B,vec3 v)\n{\n    v/=dot(v,B[0]);                                                      // Project onto icosahedron with in-radius 1.\n    vec3 w=((v-B[0])*B).yz*mat3x2(1,0,-0.5,sqrt(0.75),-0.5,-sqrt(0.75)); // Barycentric coordinates.\n    return w=(2.0+(3.0+sqrt(5.0))*w)/6.0;                                // Normalize to [0;1]^3, x+y+z=1.\n}\n\n// Compute normalized direction from basis and texture coordinates.\n// Inverse of ico_uv.\nvec3 ico_dir(mat3 B,vec2 v)\n{\n    return normalize(B*vec3(1,v));\n}\n\n// Compute normalized direction from basis and barycentric coordinates.\n// Inverse of ico_weights.\nvec3 ico_dir(mat3 B,vec3 v)\n{\n    return normalize(B*vec3(1,mat3x2(1,0,0,sqrt(1.0/3.0),0,-sqrt(1.0/3.0))*(6.0*v-2.0)/(3.0+sqrt(5.0))));\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 uv=(2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 col=vec3(0.125);\n    vec3 ro=vec3(0,0,2);\n    vec3 rd=normalize(vec3(uv,-1.5));\n    vec3 l=normalize(vec3(1));\n    float R=1.0,p=dot(ro,rd),q=dot(ro,ro)-R*R,d=p*p-q;\n    if(d>0.0)\n    {\n        float t=-p-sqrt(d);\n        vec3 r=ro+t*rd;\n        vec3 n=normalize(r);\n        vec4 q=normalize(cos(1e-2*vec4(23,37,29,17)*iTime));        // Lissajous quaternion, so to speak.\n        vec3 v=n+2.0*cross(q.xyz,cross(q.xyz,n)+q.w*n);             // Rotate.\n        mat3 B=ico_basis(v);\n        vec3 c=ico_weights(B,v);\n        ivec3 i=ivec3(12.0*c)%3;                                    // Hexagon pattern. See also https://www.shadertoy.com/view/XXt3zB\n        col=vec3(0.25)*float(1+((i.x^i.y^i.z)+(i.x+i.y+i.z))%3);    // Alternatively you can use https://www.shadertoy.com/view/dtySDy\n        col=mix(col,c,smoothstep(0.02,0.01,abs(max(max(c.x,c.y),c.z)-0.875)));\n        col=mix(col,vec3(0.03125),smoothstep(0.01,0.005,abs(min(min(c.x,c.y),c.z))));\n        vec2 uv=ico_uv(B,v).yx;\n        if(length(uv)<0.1)                                          // Print text.\n        {\n            int id=1+ico_index(B[0]);                               // 1-based, to match d20.\n            int i=(uv.x<0.0||id<10?id%10:id/10);\n            uv=vec2(-5,5)*uv+vec2(id<10?0.5:-0.3*sign(uv.x),-0.5);\n            vec4 tex=textureLod(iChannel0,(fract(uv)+vec2(i,12))/16.0,0.0);\n            col=mix(col,vec3(0.7,0.5,0.2),tex.x);\n            v+=2.0*tex.x*(B*tex.xyz-0.5);                           // Perturb the normal.\n            n=normalize(v+2.0*cross(-q.xyz,cross(-q.xyz,v)+q.w*v)); // Rotate back.\n        }\n        col*=0.5+max(dot(n,l),0.0);\n    }\n    col=mix(12.92*col,1.055*pow(col,vec3(1.0/2.4))-0.055,step(0.0031308,col)); // sRGB\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}