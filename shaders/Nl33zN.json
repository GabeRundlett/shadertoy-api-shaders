{
    "Shader": {
        "info": {
            "date": "1635772221",
            "description": "https://xferrecords.com/products/serum",
            "flags": 0,
            "hasliked": 0,
            "id": "Nl33zN",
            "likes": 13,
            "name": "Xfer Records Serum Knob",
            "published": 3,
            "tags": [
                "knob"
            ],
            "usePreview": 0,
            "username": "Lastminute",
            "viewed": 604
        },
        "renderpass": [
            {
                "code": "precision lowp float;\n\n#define PI 3.1415926\n\nfloat box(vec2 p, vec2 a, vec2 b, float th)\n{\n\tfloat l = length(b - a);\n\tvec2  d = (b - a) / l;\n\tvec2  q = (p - (a + b) * 0.5);\n\tq = mat2(d.x, -d.y, d.y, d.x) * q;\n\tq = abs(q) - vec2(l,th) * 0.5;\n\treturn length(max(q, 0.0)) + min(max(q.x, q.y), 0.0);    \n}\n\nvec4 overlay(vec4 a, vec4 b)\n{\n\tfloat f = a.a + b.a * (1.0 - a.a);\n\treturn vec4((a.rgb * a.a + b.rgb * b.a * (1.0 - a.a)) / f, f);\n}\n\nmat2 rotate2d(float angle)\n{\n\treturn mat2(-cos(angle), sin(angle), -sin(angle), -cos(angle));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float aa = 1.0 / ((iResolution.x + iResolution.y) / 2.0);\n\tfloat range = 0.75;\n\n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y * 1.25;\n\n\tfloat av = (1.0 - range) * PI + (iMouse.x / iResolution.x) * 2.0 * PI * range;\n\tfloat a = atan(uv.x, uv.y) - av;\n\tfloat a2 = fract((atan(uv.x, uv.y) + PI * 0.75) / (2.0 * PI));\n\tfloat a3 = fract((-atan(uv.x, uv.y) + PI * 0.75) / (2.0 * PI));\n\tfloat l = length(uv);\n\n\tfloat arc = smoothstep(a2 - aa, a2 + aa, 0.75) * smoothstep(l - aa, l + aa, 0.45);\n\tfloat arcb = (max(smoothstep(a3 - 0.005, a3 + 0.005, 0.75), 0.0) + max(smoothstep(a2 - 0.005, a2 + 0.005, 0.75), 0.0)) * smoothstep(l - 0.025, l + 0.025, 0.44) *0.5;\n\n\tvec4 colour = vec4(0.0);\n\n\tvec4 bg = vec4(mix(vec3(0.412,0.447,0.475), vec3(0.255,0.278,0.302), length(0.5 - uv.y / 2.0)), 1.0);\n\tvec4 outers = vec4(vec3(0.0), arcb);\n\tvec4 outer = vec4(vec3(0.49, 0.541, 0.576), arc);\n\tvec4 btm = vec4(vec3(0.137, 0.153, 0.165), smoothstep(l - aa, l + aa, 0.375));\n\tvec4 cs = vec4(vec3(0.0), smoothstep(l - 0.01, l + 0.01, 0.335) * 0.4);\n\tvec4 s = vec4(vec3(0.0), smoothstep(length(uv + vec2(0.0, 0.1)) - 0.2, length(uv + vec2(0.0, 0.1)) + 0.2, 0.3) * 0.9);\n\tvec3 capbg = mix(vec3(0.224, 0.243, 0.263), vec3(0.129,0.145,0.161), length(0.5 - uv.y));\n\tvec4 cbtm = vec4(capbg, smoothstep(l - aa, l + aa, 0.3));\n\tvec4 cout = vec4(vec3(0.341, 0.376, 0.412), smoothstep(l - aa, l + aa, 0.275));\n\tvec3 captg = mix(vec3(0.271, 0.294, 0.314), vec3(0.188,0.208,0.227), length(0.5 - uv.y));\n\tvec4 capt = vec4(captg, smoothstep(l - aa, l + aa, 0.265));\n\tfloat ln = box(uv * rotate2d(av), vec2(0.0, 0.15), vec2(0.0, 0.2725), 0.05);\n\tfloat ln2 = box(uv * rotate2d(av), vec2(0.0, 0.3), vec2(0.0, 0.34), 0.05);\n\tfloat point1 = box(uv * rotate2d(PI), vec2(0.0, 0.46), vec2(0.0, 0.51), 0.05);\n\tfloat point2 = box(uv * rotate2d(PI + 0.73 * PI), vec2(0.0, 0.46), vec2(0.0, 0.51), 0.05);\n\tfloat point3 = box(uv * rotate2d(PI - 0.73 * PI), vec2(0.0, 0.46), vec2(0.0, 0.51), 0.05);\n\tvec3 pc = vec3(0.651, 0.694, 0.718);\n\tvec4 p1 = vec4(pc, smoothstep(point1 - aa, point1 + aa, 0.0));\n\tvec4 p2 = vec4(pc, smoothstep(point2 - aa, point2 + aa, 0.0));\n\tvec4 p3 = vec4(pc, smoothstep(point3 - aa, point3 + aa, 0.0));\n\tvec4 p1s = vec4(vec3(0.0), smoothstep(point1 - 0.015, point1 + 0.015, 0.0) * 0.5);\n\tvec4 p2s = vec4(vec3(0.0), smoothstep(point2 - 0.015, point2 + 0.015, 0.0) * 0.5);\n\tvec4 p3s = vec4(vec3(0.0), smoothstep(point3 - 0.015, point3 + 0.015, 0.0) * 0.5);\n\tvec4 lines = vec4(vec3(0.0), smoothstep(ln - 0.02, ln + 0.02, 0.0) * 0.5);\n\tvec4 line = vec4(vec3(1.0), smoothstep(ln - aa, ln + aa, 0.0));\n\tvec4 lineb = vec4(vec3(0.024, 0.514, 0.765), smoothstep(ln2 - aa, ln2 + aa, 0.0));\n\n\tcolour = overlay(bg, colour);\n\tcolour = overlay(p1s, colour);\n\tcolour = overlay(p2s, colour);\n\tcolour = overlay(p3s, colour);\n\tcolour = overlay(p1, colour);\n\tcolour = overlay(p2, colour);\n\tcolour = overlay(p3, colour);\n\tcolour = overlay(outers, colour);\n\tcolour = overlay(outer, colour);\n\tcolour = overlay(btm, colour);\n\tcolour = overlay(cs, colour);\n\tcolour = overlay(s, colour);\n\tcolour = overlay(cbtm, colour);\n\tcolour = overlay(cout, colour);\n\tcolour = overlay(capt, colour);\n\tcolour = overlay(lines, colour);\n\tcolour = overlay(line, colour);\n\tcolour = overlay(lineb, colour);\n\n\tfragColor =  colour;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}