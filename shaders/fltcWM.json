{
    "Shader": {
        "info": {
            "date": "1660420336",
            "description": "My Pendulum Wave",
            "flags": 0,
            "hasliked": 0,
            "id": "fltcWM",
            "likes": 3,
            "name": "My Pendulum Wave",
            "published": 3,
            "tags": [
                "pendulum"
            ],
            "usePreview": 0,
            "username": "kilianovski",
            "viewed": 300
        },
        "renderpass": [
            {
                "code": "// \"RayMarching starting point\" \n// by Martijn Steinrucken aka The Art of Code/BigWings - 2020\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n// Facebook: https://www.facebook.com/groups/theartofcode/\n//\n// You can use this shader as a template for ray marching shaders\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define g 9.81\n#define S smoothstep\n#define T iTime\n#define NUM_REF 2\n\nconst int MAT_BALL = 0;\nconst int MAT_THREAD = 1;\nconst int MAT_UP_BASE = 2;\nconst int MAT_DOWN_BASE = 3;\n\n\nconst int N_PENDULUMS = 15;\nconst float FIRST_L = 15.;\nconst float Tmax = 60.;\n\nconst float ball_r = .5;\nconst float base_y = 3.;\n\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat pendulumPeriod(float L){\n    return 2.*PI*sqrt(L/g);\n}\n\nfloat pendulumTheta(float t, float A, float T) {\n    return A*cos( (2.*PI/T) * t );\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) { \n    vec3 ab = b - a, ap = p - a;\n    \n    float t = dot(ap, ab)/dot(ab,ab);\n    t = clamp(t, 0.,1.);\n    vec3 c = a + t*ab;\n    float d = length(p-c) - r;\n    return d;\n}\n\n\nvec2 sdPend(vec3 p, float l, float t) { \n    //p.y -= base_y;\n    p.y -= (base_y - (l+ball_r));\n\n    vec3 base = vec3(0,(l+ball_r),0);\n    \n    float A = PI/4.;\n    float T = pendulumPeriod(l);\n    float a = pendulumTheta(t, A, T);\n    \n    p -= base;\n    p.xy *= Rot(a);\n    p += base;\n    \n    float line = sdCapsule(p, base, vec3(0.), .03);\n    float ball = length(p) - ball_r;\n    \n    float d = min(line, ball);\n    \n    int mat = d == line ? MAT_THREAD: MAT_BALL;\n    \n    return vec2(d, mat);\n}\n\n\n\nfloat get_k(){\n    float d = sqrt(FIRST_L/g)*2.*PI;\n    float k = Tmax/d - 2.;\n    return k;\n}\n\n\nfloat getL(float Tmax, float k, float n){\n    float x = pow(Tmax / (2.*PI*(k+n+1.)), 2.);\n    return g*x;\n}\n\nvec2 Min(vec2 a, vec2 b){\n    return a.x > b.x ? b : a;\n}\n\nvec2 GetDist(vec3 p) {\n    float ball_horizontal_offset = 3.*ball_r;\n    float base_length = ball_horizontal_offset * float(N_PENDULUMS-1);\n    \n    float base = sdCapsule(p-vec3(0., base_y+.5, 0.), vec3(0.), vec3(0,0,base_length), .5);\n    vec2 d = vec2(base, MAT_UP_BASE);\n    \n    float t = iTime*1.5;\n    t -= 3.;\n    t = max(t, 0.);\n    //t = 0.;\n    \n    float k = get_k();\n    \n    for (int i = 0; i < N_PENDULUMS; i++){\n        float L = getL(Tmax, k, float(i+1));\n       \n        vec3 pendulum_offset = vec3(0.,0., ball_horizontal_offset*float(i));\n        vec2 p_dist = sdPend(p-pendulum_offset, L, t);\n        d = Min(d, p_dist);\n    }\n    \n    float downbase = sdBox(p+vec3(0.,FIRST_L*1.,-base_length), vec3(10., .1, base_length*1.5));\n    \n    d = Min(d, vec2(downbase, MAT_DOWN_BASE));\n    \n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p).x;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p).x - \n        vec3(GetDist(p-e.xyy).x, GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvec3 Render(inout vec3 ro, inout vec3 rd) {\n    vec3 col = vec3(0);\n    float d = RayMarch(ro, rd);\n    \n    vec3 background = texture(iChannel0, rd).rgb;\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        int mat = int( GetDist(p).y );\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        \n        vec3 r = reflect(rd, n);\n        vec3 ref = texture(iChannel0, r).rgb;\n        \n        \n        if (mat == MAT_UP_BASE) col = ref*.05;\n        else if (mat == MAT_BALL) col = ref*.95;\n        else if (mat == MAT_THREAD) col = vec3(.4);\n        else if (mat == MAT_DOWN_BASE) { \n            col = vec3(.8, .6, .3);\n            col = vec3(0.);\n            rd = r;\n            ro = p+SURF_DIST*2.;\n        }\n        else col = vec3(p);\n       \n        \n    }\n    \n    else col = background*.3;\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 0, -15);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n    \n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i < NUM_REF; i++) {\n\n        col += Render(ro, rd);\n    \n    }\n    \n    col /= float(NUM_REF);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}