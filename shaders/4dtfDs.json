{
    "Shader": {
        "info": {
            "date": "1527327023",
            "description": "Contains flashing images.\n\nThis is https://www.shadertoy.com/view/4sGfRR before I fixed a bug with some sound added.",
            "flags": 40,
            "hasliked": 0,
            "id": "4dtfDs",
            "likes": 5,
            "name": "Escalating Brain Reset",
            "published": 3,
            "tags": [
                "fluid"
            ],
            "usePreview": 0,
            "username": "Julius",
            "viewed": 642
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#ifdef GL_ES\nprecision highp float;\n#endif\n#define PI 3.1415926535897932384626433832795\n\nfloat grow = .1;\nfloat kill = .12;\nfloat eat  = .1;\n\nfloat rand(vec3 xyt){\n    return fract(sin(dot(xyt ,vec3(12.9898,78.233,.0235))) * 43758.5453);\n}\n\nvec4 oppose(vec4 x) {\n\treturn vec4(x.g, x.b, x.r, x.a);\n}\nvec4 suppose(vec4 x) {\n\treturn vec4(x.b, x.r, x.g, x.a);\n}\t\n\nvec4 trefoil(vec2 pointer) {\n\tfloat angle = fract(-.03*length(pointer)+iTime+atan(pointer.y,pointer.x)/2./PI);\n\tfloat g = 1.-step(1./3., angle);\n\tfloat r = clamp(step(2./3., angle)-g, 0., 1.);\n\tfloat b = 1.-r-g;\n\treturn vec4(r,g,b,0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\t\n\tvec4 outColor = vec4(0.);\n\t\n\tfloat random1 = rand(vec3(fragCoord.xy/iResolution.xy, iTime));\n\tfloat random2 = rand(vec3(fragCoord.yx/iResolution.xy, iTime));\n\t\n\tvec2 direction = vec2(step(.5,random1)-.5, step(.5,random2)-.5);\n\tdirection*=mat2(1,1,-1,1);\n\t\n\tvec2 self  = fragCoord.xy;\n\tvec2 other  = self + direction;\n\t\n\teat *= self.x/iResolution.x;\n\tgrow *= self.y/iResolution.y;\n\t\n\tvec4 oldSelf  = texture(iChannel0, self/iResolution.xy);\n\tvec4 oldOther  = texture(iChannel0, other/iResolution.xy);\n\t\n    vec2 mouse = iMouse.xy;\n    if(iMouse.xy == vec2(0,0))\n    \tmouse = iResolution.xy / 2.;\n            \n    vec2 pointer = mouse - self;    \n    if (length(pointer) < 20.0) {\n\t \toutColor = trefoil(pointer);\n    }\n    else {\n\t\toutColor = (.5+grow)*(oldSelf+oldOther)+eat*suppose(oldSelf+oldOther)-kill*oppose(oldSelf+oldOther);\n\t}\n\t\n\tfragColor = max(outColor, vec4(0,0,0,0)); //min(..., vec4(1,1,1,1) );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float TAU = 6.2831;\n\nfloat beat(float frequency, float time, float tone_frequency) {\n    float volume = cos(.5 * TAU * frequency * time);\n    \n    volume = \n        volume*volume*volume*volume*volume*volume*volume*volume*\n        volume*volume*volume*volume*volume*volume*volume*volume*\n        volume*volume*volume*volume*volume*volume*volume*volume;\n    \n    return volume * cos(TAU*tone_frequency*time);\n}\n\nfloat sawtooth(float time, float frequency) {\n    return mod(time, 1./frequency) * frequency;\n}\n\nfloat warble(float time) {    \n    float volume = cos(.5 * TAU * 20. * time);\n    \n    float tone_frequency = \n        volume*volume*volume*volume*volume*volume*volume*volume;\n    \n    return sawtooth(time, tone_frequency);\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    return vec2(.1 * warble(time) + .4 * beat(2., time, 100.) + .2 * beat(1., time, 200.));\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}