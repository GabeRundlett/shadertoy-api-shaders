{
    "Shader": {
        "info": {
            "date": "1463678099",
            "description": "Splatting particles is ultra-costly since you don't know which reach the pixel (so: test all).\nHere, I maintain the list of local particles in tiles NxN, which drastically help.\nNote that for now I don't treat ID collisions, so some disappear. (help !)",
            "flags": 48,
            "hasliked": 0,
            "id": "4dGSDR",
            "likes": 44,
            "name": "efficient splat ",
            "published": 3,
            "tags": [
                "particles",
                "splat",
                "lagrangian"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 3638
        },
        "renderpass": [
            {
                "code": "// display: splatting the particles.\n//\n//   we only have to test the coordinates in the current NxN tile,\n//   + neighbor tiles if the sprites are larger than 1 pixel.\n\n#define N 8. // tile size = NxN   ( change also in BufA ).\n#define r 3. // sprite radius     ( must be <= N )\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    vec2 R = iResolution.xy,\n        iU = floor(U/N)*N;    // tile coordinate\n    O -= O; \n#if 1   \n    for (int j = -1; j <= 1; j++)\n        for (int i = -1; i <= 1; i++) { // check neighbor tiles (because sprites > 1 pix)\n            vec2 d = vec2(i,j);\n            for (float y=0.; y<N; y++)  \n                for (float x=0.; x<N; x++) { // splat all the particles found in the tile\n                    vec4 T = texture( iChannel0,( iU + N*d + vec2(x,y)+.5 )/R );\n                    if (T.xy==vec2(0)) continue;      // void cell\n                    O += (1.-O.a) * step( length(T.xy*R-U) , r)    // splat a disk\n                                  * max(vec4(.2+T.zw,.2-T.z,1.),0.);    // color\n                }\n        }\n // O += (1.-O.a)*.2;\n#else                                   // --- test\n    for (float y=0.; y<N; y++)  \n        for (float x=0.; x<N; x++)\n             O += vec4( texture( iChannel0,( iU + vec2(x,y)+.5 )/R ).xy != vec2(0) )*.1;\n    \n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define N 8. // tile size = NxN    ( change also in Image ).\n#define k .3  // nbr particles = k*resolution\n\n#define rnd(x)  fract(3e4*sin((x)*mat2(1,13.51,73.37,-57.17)))\n#define srnd(x) (2.*rnd(x)-1.)\n\n#define T(d)   texture( iChannel0, fract ( (iU +N*d +fU) / R ) ) // coords in neighbor tile\n#define out(d) floor( ( T(d).xy*R - (iU+N*d) ) / N )               // where is particle leaving\n\n#define keyClick(ascii) (texture(iChannel2,vec2((.5+float(ascii))/256.,0.25)).x > 0.)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy, Z=R-R,\n        iU = floor(U/N)*N, fU = U-iU;\n    \n    if (iFrame==0 || keyClick(32)) { // --- initialization\n        if (rnd(U*1.1).x < k) {             // keep k % of particles        \n            O.xy = ( iU + rnd(U)*N )/R;     // random position\n            O.zw = srnd(U+1.);              // random speed\n        } else O -= O;                      // otherwise void cell\n        return;\n    }\n    \n    O = T(0.);                       // --- check tile change in neighborhoods NxN\n              \n#if 0\n    if (out(0.) != Z) O -= O;               // the particle leaves the tile : del\n#else // rought collision management: tile transfer only if slot is free \n    vec2 d = out(0.); if (d != Z && T(d).xy==Z ) O -= O;\n\n    if (O.xy!=Z) return;                    // receiver not free\n#endif    \n    for (int j = -1; j <= 1; j++)\n        for (int i = -1; i <= 1; i++) {     // check neighbor tiles\n            vec2 d = vec2(i,j);\n            if (d==Z) continue;\n            if (T(d).xy==Z) continue;       // void cell\n            if (out(d) == -d) O = T(d);     // the particle enters the tile\n            // problem : more than 1 transfer from neighbors can occurs\n           }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// advect particles  \n//\n// .xy = pos, .zw = velocity\n\n#define dV iTimeDelta*.2  // must be < N/R.y\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    O = texture(iChannel0,U/R);\n    O.xy = fract( O.xy + O.zw*dV);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}