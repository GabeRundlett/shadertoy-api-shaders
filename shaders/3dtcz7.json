{
    "Shader": {
        "info": {
            "date": "1600677978",
            "description": "Dynamical extruded version of Shane's \"Asymmetric Blocks\"",
            "flags": 0,
            "hasliked": 0,
            "id": "3dtcz7",
            "likes": 23,
            "name": "Random Rectangular Tiling",
            "published": 3,
            "tags": [
                "rectangle",
                "tile",
                "pack",
                "extrude"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 784
        },
        "renderpass": [
            {
                "code": "// \"Random Rectangular Tiling\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Just came across Shane's \"Asymmetric Blocks\"; here is a dynamical extruded version.\n  Original: https://www.shadertoy.com/view/Ws3GRs\n  Note that block edges cannot exceed twice the grid edge, and there are \n  restrictions on the combined length of multiple adjacent block edges (in a given \n  direction), so this is not a completely general tiling method (but it looks ok).\n*/\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\n\n#if 1  // = 1/0 - select extruded/flat version\n\nvec3 ltDir;\nvec2 pDisp;\nfloat tCur, dstFar, szFac;\nconst float pi = 3.1415927;\n\n#define H(z) (0.5 + 0.5 * cos (2. * tCur * (0.1 + 0.9 * Hashfv2 (ip + z))))\n\nfloat RandRect (vec2 p)\n{\n  vec4 hm, hc;\n  vec3 e;\n  vec2 pMid[4], pEdge[4], ip;\n  float dMin, hp, eFac;\n  ip = floor (p) + 0.5;\n  e = vec3 (-1., 0., 1.);\n  hp = H(0.);\n  hm = vec4 (H(e.zy), H(e.xy), H(e.yz), H(e.yx));\n  hc = vec4 (H(e.zz), H(e.xx), H(e.xz), H(e.zx));\n  if (mod (ip.x + ip.y, 2.) < 0.5) {\n    pEdge[0] = vec2 (hm.z - hm.y, hc.z - hp);\n    pEdge[1] = vec2 (hm.x - hm.z, hc.x - hp);\n    pEdge[2] = vec2 (hm.x - hm.w, hp - hc.w);\n    pEdge[3] = vec2 (hm.w - hm.y, hp - hc.y);\n    pMid[0] = vec2 (hm.z, hp);\n    pMid[1] = pMid[0];\n    pMid[2] = vec2 (hm.w, hp);\n    pMid[3] = pMid[2];\n  } else {\n    pEdge[0] = vec2 (hp - hc.z, hm.z - hm.y);\n    pEdge[1] = vec2 (hc.x - hp, hm.z - hm.x);\n    pEdge[2] = vec2 (hc.w - hp, hm.x - hm.w);\n    pEdge[3] = vec2 (hp - hc.y, hm.y - hm.w);\n    pMid[0] = vec2 (hp, hm.y);\n    pMid[1] = vec2 (hp, hm.x);\n    pMid[2] = pMid[1];\n    pMid[3] = pMid[0];\n  }\n  eFac = 0.3;\n  for (int k = 0; k < 4; k ++) {\n    pEdge[k] = eFac * pEdge[k] + 0.5;\n    pMid[k] = 2. * eFac * (pMid[k] - 0.5);\n  }\n  pMid[0] += pEdge[0] * e.xz;\n  pMid[1] += pEdge[1] * e.zz;\n  pMid[2] += pEdge[2] * e.zx;\n  pMid[3] += pEdge[3] * e.xx;\n  dMin = dstFar;\n  for (int k = 0; k < 4; k ++)\n     dMin = min (dMin, PrRoundBox2Df (p - ip - pMid[k], pEdge[k] - eFac + 0.05, 0.1));\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float d, h;\n  q = p;\n  d = PrBoxDf (q, vec3 (1., 0.02, 1.));\n  if (d < 0.1) {\n    h = 0.01 * smoothstep (0., 0.03 * szFac, RandRect (q.xz * szFac + pDisp));\n    q.y += h;\n    d = 0.9 * PrBoxDf (q, vec3 (1., 0.02 - h, 1.));\n  }\n  return d;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = 0; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstObj, nDotL;\n  szFac = 8.;\n  pDisp = Rot2D (vec2 (0., 2. * szFac), 2. * pi * mod (0.01 * tCur, 1.));\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    nDotL = max (dot (vn, ltDir), 0.);\n    col = vec3 (0.3, 0.7, 1.);\n    if (vn.y > 0.1) {\n      if (ro.y < 0.01) col *= 0.5;\n      else nDotL *= nDotL;\n    }\n    col = col * (0.2 + 0.8 * nDotL) +\n       0.2 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n  } else {\n    col = vec3 (0.1);\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define AA  1   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.25 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += pi * sin (0.01 * pi * tCur);\n  }\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -5.);\n  zmFac = 5.;\n  dstFar = 20.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\n#else\n\n// Flat version: \"Asymmetric Blocks\" by Shane - after some tweaking, and without the fancy visuals\n\nfloat tCur, dstFar;\nconst float pi = 3.14159;\n\n#define H(z) (0.5 + 0.5 * cos (2. * tCur * (0.1 + 0.9 * Hashfv2 (ip + z))))\n\nfloat RandRect (vec2 p)\n{\n  vec4 hm, hc;\n  vec3 e;\n  vec2 pMid[4], pEdge[4], ip;\n  float dMin, d, hp, eFac;\n  ip = floor (p) + 0.5;\n  e = vec3 (-1., 0., 1.);\n  hp = H(0.);\n  hm = vec4 (H(e.zy), H(e.xy), H(e.yz), H(e.yx));\n  hc = vec4 (H(e.zz), H(e.xx), H(e.xz), H(e.zx));\n  if (mod (ip.x + ip.y, 2.) < 0.5) {\n    pEdge[0] = vec2 (hm.z - hm.y, hc.z - hp);\n    pEdge[1] = vec2 (hm.x - hm.z, hc.x - hp);\n    pEdge[2] = vec2 (hm.x - hm.w, hp - hc.w);\n    pEdge[3] = vec2 (hm.w - hm.y, hp - hc.y);\n    pMid[0] = vec2 (hm.z, hp);\n    pMid[1] = pMid[0];\n    pMid[2] = vec2 (hm.w, hp);\n    pMid[3] = pMid[2];\n  } else {\n    pEdge[0] = vec2 (hp - hc.z, hm.z - hm.y);\n    pEdge[1] = vec2 (hc.x - hp, hm.z - hm.x);\n    pEdge[2] = vec2 (hc.w - hp, hm.x - hm.w);\n    pEdge[3] = vec2 (hp - hc.y, hm.y - hm.w);\n    pMid[0] = vec2 (hp, hm.y);\n    pMid[1] = vec2 (hp, hm.x);\n    pMid[2] = pMid[1];\n    pMid[3] = pMid[0];\n  }\n  eFac = 0.375;\n  for (int k = 0; k < 4; k ++) {\n    pEdge[k] = eFac * pEdge[k] + 0.5;\n    pMid[k] = 2. * eFac * (pMid[k] - 0.5);\n  }\n  pMid[0] += pEdge[0] * e.xz;\n  pMid[1] += pEdge[1] * e.zz;\n  pMid[2] += pEdge[2] * e.zx;\n  pMid[3] += pEdge[3] * e.xx;\n  dMin = dstFar;\n  for (int k = 0; k < 4; k ++)\n     dMin = min (dMin, PrRoundBox2Df (p - ip - pMid[k], pEdge[k] - eFac + 0.225, 0.05));\n  return dMin;\n}\n\nvec3 ShowScene (vec2 uv)\n{\n  vec3 col;\n  vec2 p, q;\n  float szFac;\n  szFac = 8.;\n  col = vec3 (0.7);\n  p = szFac * (uv + 0.04 * tCur);\n#if 0  // show grid\n  q = abs (fract (p) - 0.5) - 0.5;\n  col = mix (col, vec3 (0., 1., 0.), (1. - smoothstep (0., 0.01 * szFac, abs (max (q.x, q.y)))));\n#endif\n  col = mix (col, vec3 (0., 0., 1.), smoothstep (0.004 * szFac, 0.008 * szFac, RandRect (p)));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec3 col;\n  vec2 canvas, uv;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dstFar = 1e5;\n  col = ShowScene (uv);\n  fragColor = vec4 (col, 1.);\n}\n\n#endif\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}