{
    "Shader": {
        "info": {
            "date": "1598045103",
            "description": "Edited from rory618's https://www.shadertoy.com/view/4tdXR8. The idea is to use a limiting shape to create different cymatics.\n\nMouse X change view, Mouse Y change frequency. R resets, W turns off the generation of new waves, E removes restriction.\n",
            "flags": 48,
            "hasliked": 0,
            "id": "3tsfDf",
            "likes": 4,
            "name": "WaveTable",
            "published": 3,
            "tags": [
                "wave"
            ],
            "usePreview": 0,
            "username": "PsyPhi",
            "viewed": 419
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 w = texture(iChannel0, fragCoord.xy / iResolution.xy).xy;\n\tfragColor = vec4(w.x,-w.x,w.y*w.y*2.,1.);\n    fragColor = mix(fragColor,texture(iChannel1, fragCoord.xy / iResolution.xy),1.-iMouse.x/iResolution.x);\n    //fragColor = texture(iChannel2, fragCoord.xy / iResolution.xy); //views wavetable limits\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel1,fragCoord/iResolution.xy);\n    fragColor += .05;\n    fragColor /= (1.01+5.*abs(texture(iChannel0,fragCoord/iResolution.xy).y));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float KEY_R  = 82.5/256.0;\nconst float KEY_W  = 87.5/256.0;\nconst float KEY_E  = 69.5/256.0;\n\nbool keyIsDown( float key ) {\n    return texture( iChannel1, vec2(key,0.25) ).x > .5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        \n    vec2 l = texture(iChannel0, (fragCoord-vec2(2.5,0))/iResolution.xy).xy;\n    vec2 r = texture(iChannel0, (fragCoord+vec2(2.5,0))/iResolution.xy).xy;\n    vec2 u = texture(iChannel0, (fragCoord-vec2(0,2.5))/iResolution.xy).xy;\n    vec2 d = texture(iChannel0, (fragCoord+vec2(0,2.5))/iResolution.xy).xy;\n    vec2 ur = texture(iChannel0, (fragCoord-vec2(2.5, 2.5))/iResolution.xy).xy;\n    vec2 ul = texture(iChannel0, (fragCoord-vec2(-2.5, 2.5))/iResolution.xy).xy;\n    vec2 dr = texture(iChannel0, (fragCoord-vec2(2.5, -2.5))/iResolution.xy).xy;\n    vec2 dl = texture(iChannel0, (fragCoord-vec2(-2.5, -2.5))/iResolution.xy).xy;\n    \n    vec2 t = texture(iChannel0, fragCoord/iResolution.xy).xy; //Contains last frame\n        \n    t = mix(t,(l+r+u+d)/4.,.01); // mixes lastframe with the 4 px around it.\n    t = mix(t,(ur+ul+dr+dl)/4.,.0075); // mixes lastframe with the 4 px around it.\n        \n\tfloat DL = l.x-t.x;  //diffrences left with the last frame?\n\tfloat DR = r.x-t.x;\n\tfloat DU = u.x-t.x;\n\tfloat DD = d.x-t.x;\n    float DUR = ur.x-t.x;\n    float DUL = ul.x-t.x;\n    float DDR = dr.x-t.x;\n    float DDL = dl.x-t.x;\n    \n    t.y += (DL+DR+DU+DD+DUR+DUL+DDR+DDL)/8.; //adds the diffrenced frames?\n    t.x += t.y;\n    //t.y *= .999;\t\t\t//reduces frame for FB loop\n    \n    float f = iMouse.y/40.;\t\t//Gets mouse y for frequency\n    if(iResolution.y < 285.){\n        f = 10.;\n    }\n    \n    if (keyIsDown(KEY_W) == false) { //Adds in new wave      \n    \tt = mix(t, vec2(sin(iTime*f), cos(iTime*f)), .5*exp(-.2*length(fragCoord-iResolution.xy/2.)));\n    }\n    \n    vec2 border = texture(iChannel2, fragCoord/iResolution.xy).xy; //adds in the custom border shape\n    \n    if(fragCoord.x<1. || fragCoord.y<1. || fragCoord.x>iResolution.x-1. || fragCoord.y>iResolution.y-1. || (border.x == 1.0 && keyIsDown(KEY_E)==false)){\n        t*=0.;\n    }\n    \n    if ( keyIsDown(KEY_R)) {\n        t *= 0.;\n    }\n    \n    \n    fragColor = vec4(t.x,t.y,0,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tfloat circle = step(0.25,distance(vec2(0.5),fragCoord/iResolution.xy));\n    fragColor = vec4(circle,circle,circle,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}