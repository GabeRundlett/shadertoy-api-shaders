{
    "Shader": {
        "info": {
            "date": "1503616545",
            "description": "I took IQ's amazing analytical derivatives shader and used it to assemble a noise similar to what I have been doing for VFX purposes for a few years.\nI use the prior noise iteration derivatives to distort the next, for convincing cloud or water animation.",
            "flags": 0,
            "hasliked": 0,
            "id": "llXyz4",
            "likes": 9,
            "name": "iq-derivatives distortion",
            "published": 3,
            "tags": [
                "derivativenoisetest"
            ],
            "usePreview": 0,
            "username": "Serg",
            "viewed": 763
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Computes the analytic derivatives of a 2D Gradient Noise\n\n\n// Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n// Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n// Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n// Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n// Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n// Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n// Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n// Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n// Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n\n/*\nvec2 hash( in vec2 x )  // replace this by something better\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n*/\n\n\nvec2 hash( in vec2 x, in float flow )\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );             // replace all of\n    x = x*k + k.yx;                                          // this by something \n    float h = fract( 16.0 * k.x*fract( x.x*x.y*(x.x+x.y)) ); // better\n    \n    float a = 6.2831*h + flow;\n    return vec2( cos(a), sin(a) );\n}\n\n\n// return gradient noise (in x) and its derivatives (in yz)\nvec3 noise2d( in vec2 p, in float flow )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\n#if 0\n    // quintic interpolation\n    vec2 u = f*f*f*(f*(f*6.0-15.0)+10.0);\n    vec2 du = 30.0*f*f*(f*(f-2.0)+1.0);\n#else\n    // cubic interpolation\n    vec2 u = f*f*(3.0-2.0*f);\n    vec2 du = 6.0*f*(1.0-f);\n#endif    \n    \n    vec2 ga = hash( i + vec2(0.0,0.0), flow );\n    vec2 gb = hash( i + vec2(1.0,0.0), flow );\n    vec2 gc = hash( i + vec2(0.0,1.0), flow );\n    vec2 gd = hash( i + vec2(1.0,1.0), flow );\n    \n    float va = dot( ga, f - vec2(0.0,0.0) );\n    float vb = dot( gb, f - vec2(1.0,0.0) );\n    float vc = dot( gc, f - vec2(0.0,1.0) );\n    float vd = dot( gd, f - vec2(1.0,1.0) );\n\n    return vec3( 0.5 + 0.5 \n                * (va + u.x*(vb-va) \n                + u.y*(vc-va) \n                + u.x*u.y*(va-vb-vc+vd)),   // value\n                \n                ga + u.x*(gb-ga) \n                + u.y*(gc-ga) \n                + u.x*u.y*(ga-gb-gc+gd) \n                + du * (u.yx*(va-vb-vc+vd) \n                + vec2(vb,vc) - va));\n}\n\n/////////////////////////////////////////////////////////////////////////////////\n\nconst float height = 1.0;\n\nvec4 noise2d(in vec2 x, \n             in vec2 stretch,\n             in vec2 dir,\n             in vec2 offset,\n             in float freq,\n             in int octaves, \n             in float rough, \n             in float distort,\n             in float droop,\n             in float spread,\n             in float flow)\n{\n    float a = 0.0;\n    float b = 1.0;\n    vec2  d = vec2(0.0); \n    vec3 n = vec3(0.0);\n    vec2 warp = vec2(0.0);\n    float rot = 0.0;\n    \n    for( int i=0; i<octaves; i++ )\n    {\n        n = noise2d(x * freq * stretch // scaling\n                    + dir + (offset * (n.x * droop)) + (warp * distort), flow); // Distortions\n        \n        //lerp between stretch and non-stretch with octaves\n        stretch = mix(stretch, vec2(1.0, 1.0), float(i)/float(octaves));\n        x += 1.0;                                 // fix the pinch in the middle\n        a += n.x * b;                             // accumulate values\t\t        \n        b *= rough;                               // amplitude decrease\n        d += n.yz * sqrt(b) * stretch;            // accumulate derivatives (note that in this case b*f=1.0)\n        droop *= rough;                           // droop decrease\n        freq *= 2.0;                              // frequency increase\n    \twarp = d;// * ((0.5-n.x) * -10.0);\n        flow *= sqrt(b);\n        \n        rot += radians(spread);\n        mat2 m = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n        dir *= m;\n       \n    }\n\n\ta *= height * 0.8;\n\td *= height;\n\t\t\n\treturn vec4( a, normalize( vec3(d.x,1.0,d.y)) ); // compute normal based on derivatives\n}\n\n//////////////////////////////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime*1.5;\n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y ;\n    \n    \n    //float y = p.y + (-iMouse.y / 50.0) * 5.0;//(iMouse.y - 0.0); \n    \n    float ramp =  distance(fragCoord.xy, iMouse.xy)*0.0025;\n    float fitramp = smoothstep(0.618, 1.0, ramp);\n    float distort = clamp(mix(-1.0, 1.0, fitramp), -1.0, 1.0);\n   \n    p *= 2.0;\n    \n    vec4 n2d = noise2d(p, \n                       vec2(1.0, 1.0),                \t\t\t\t\t// Stretch\n                       vec2(0.0, 1.0) * -iTime * 0.5, \t\t\t\t\t// direction anim\n                       vec2(0.0, 1.0),                \t\t\t\t\t// offset\n                       1.0,                           \t\t\t\t\t// Frequency/Scale\n                       6,                             \t\t\t\t\t// octaves\n                       0.56,                          \t\t\t\t\t// Rough\n                       0.5 * -distort,\t\t\t\t\t\t\t\t    // Distort - positive for clouds, negative for water/plasma\n                       0.0,                           \t\t\t\t\t// Droop offset\n                       20.0,                          \t\t\t\t\t// rotate dir by this angle on every octave\n    \t\t\t\t   ((-iTime * 5.0) + (ramp * 10.0)) * 0.0);         // Animate the flow\n    \n    vec3 nx = n2d.yzw;\n    \n    float nf = n2d.x;\n    nf = pow(nf, 2.0);\n   \n    vec3 col = ((p.x>10.5) ? 0.5 + 0.5 * -nx.yzx : \n                vec3(nf*nf*0.5, nf*nf*0.7, nf*1.0));\n    \n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}