{
    "Shader": {
        "info": {
            "date": "1613197623",
            "description": "Harmonic motion is awesome!",
            "flags": 0,
            "hasliked": 0,
            "id": "wtdBzf",
            "likes": 11,
            "name": "Running Stick Figure",
            "published": 3,
            "tags": [
                "2d",
                "animation",
                "humanoid",
                "harmonic",
                "running",
                "stickfigure"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 220
        },
        "renderpass": [
            {
                "code": "// Inspired by: https://www.shadertoy.com/view/tttfRf\n\nvec2 Rotate(in vec2 p, in vec2 o, in float r) {\n    float c = cos(r), s = sin(r);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\nfloat sdSegment(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\nfloat sdDisc(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdStickFigure(in vec2 p) {\n    // Sizes\n    float t = 0.1; // Thickness\n    float hs = 0.4; // Head size\n\n    // Limb rotations\n    float lsr = cos(iTime * 2.5) + 0.5; // Left shoulder rotation\n    float rsr = -0.25 - lsr; // Right shoulder rotation\n\n    float lar = cos(iTime * 2.5) + 2.0; // Left forearm rotation (a for forearm)\n    float rar = 4.0 - cos(iTime * 2.5 + 0.5); // Right forearm rotation\n\n    float ltr = 0.0; // Left thigh rotation\n    float rtr = 0.0; // Right thigh rotation\n\n    float lcr = 0.0; // Left shin (calf) rotation\n    float rcr = 0.0; // Right shin (calf) rotation\n\n    // Joint positions\n    vec2 np = vec2(0.0, 0.75) + sin(iTime * 3.0 + vec2(1.57, 0.0)) * vec2(0.1, 0.05); // Neck\n    vec2 bp = vec2(-0.15, -0.65) + sin(-iTime * 3.0 + vec2(1.57, 0.0)) * vec2(0.25, 0.1); // Hip\n    vec2 hp = bp + normalize(np - bp) * (length(np - bp) + hs); // Head\n\n    vec2 lep = vec2(-0.4, 0.0); // Left elbow\n    vec2 rep = vec2(0.4, 0.0); // Right elbow\n\n    vec2 lhp = vec2(-0.75, 0.7); // Left hand\n    vec2 rhp = vec2(0.75, 0.7); // Right hand\n\n    vec2 lfp = vec2(-0.25, -2.0) + sin(-iTime * 3.0 + vec2(1.57, 0.0)) * vec2(1.25, 0.4); // Left foot\n    vec2 rfp = vec2(0.5, -1.75) + sin(-iTime * 3.0 + 2.0 + vec2(1.57, 0.0)) * vec2(1.0, 0.4); // Right foot\n\n    vec2 lkp = (bp + lfp) * 0.5; lkp += normalize(lkp - bp).yx * vec2(-0.25, 0.25); // Left knee\n    vec2 rkp = (bp + rfp) * 0.5; rkp += normalize(rkp - bp).yx * vec2(-0.25, 0.25); // Right knee\n\n    // Arm rotations\n    lep = Rotate(lep, np, lsr); // Left shoulder rotation\n    rep = Rotate(rep, np, rsr); // Right shoulder rotation\n\n    lhp = Rotate(lhp, np, lsr); // Left forearm rotation (with elbow)\n    rhp = Rotate(rhp, np, rsr); // Right forearm rotation (with elbow)\n\n    lhp = Rotate(lhp, lep, lar); // Left forearm rotation (independent)\n    rhp = Rotate(rhp, rep, rar); // Right forearm rotation (independent)\n\n    // Leg rotations\n    lkp = Rotate(lkp, bp, ltr); // Left thigh rotation\n    rkp = Rotate(rkp, bp, rtr); // Right thigh rotation\n\n    lfp = Rotate(lfp, bp, ltr); // Left shin rotation (with thigh)\n    rfp = Rotate(rfp, bp, rtr); // Right shin rotation (with thigh)\n\n    lfp = Rotate(lfp, lkp, lcr); // Left shin rotation (independent)\n    rfp = Rotate(rfp, rkp, rcr); // Right shin rotation (independent)\n\n    return min(min(sdSegment(p,  np, lep),\n               min(sdSegment(p, lep, lhp),\n               min(sdSegment(p,  np, rep),\n               min(sdSegment(p, rep, rhp),\n               min(sdSegment(p,  np,  bp),\n               min(sdSegment(p,  bp, lkp),\n               min(sdSegment(p, lkp, lfp),\n               min(sdSegment(p,  bp, rkp),\n                   sdSegment(p, rkp, rfp))))))))) - t,\n\n               sdDisc(p, hp, hs));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    float stickFigure = sdStickFigure(uv - vec2(0.0, 0.1));\n    fragColor = vec4(smoothstep(0.0, unit, stickFigure));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n// Crazy dance animation :)\n\nvec2 Rotate(in vec2 p, in vec2 o, in float r) {\n    float c = cos(r), s = sin(r);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\nfloat sdSegment(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\nfloat sdDisc(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdStickFigure(in vec2 p) {\n    // Sizes\n    float t = 0.1; // Thickness\n    float hs = 0.4; // Head size\n\n    // Limb rotations\n    float lsr = cos(iTime * 4.0) + 0.5; // Left shoulder rotation\n    float rsr = -0.25 - lsr; // Right shoulder rotation\n\n    float lar = iTime * 2.0; // Left forearm rotation (a for forearm)\n    float rar = iTime * 3.0; // Right forearm rotation\n\n    float ltr = 0.0; // Left thigh rotation\n    float rtr = 0.0; // Right thigh rotation\n\n    float lcr = 0.0; // Left shin (calf) rotation\n    float rcr = 0.0; // Right shin (calf) rotation\n\n    // Joint positions\n    vec2 np = vec2(0.0, 0.75) + sin(iTime * 3.0 + vec2(1.57, 0.0)) * vec2(0.1, 0.05); // Neck\n    vec2 bp = vec2(0.0, -0.65) + sin(-iTime * 6.0 + vec2(1.57, 0.0)) * vec2(0.25, 0.1); // Hip\n    vec2 hp = bp + normalize(np - bp) * (length(np - bp) + hs); // Head\n\n    vec2 lep = vec2(-0.4, 0.0); // Left elbow\n    vec2 rep = vec2(0.4, 0.0); // Right elbow\n\n    vec2 lhp = vec2(-0.75, 0.7); // Left hand\n    vec2 rhp = vec2(0.75, 0.7); // Right hand\n\n    vec2 lfp = vec2(-0.25, -2.0) + sin(-iTime * 10.0 + vec2(1.57, 0.0)) * vec2(0.75, 0.4); // Left foot\n    vec2 rfp = vec2(0.5, -1.75) + sin(-iTime * 10.0 + 4.0 + vec2(1.57, 0.0)) * vec2(0.75, 0.4); // Right foot\n\n    float wobble = sin(iTime * 15.0);\n    vec2 lkp = (bp + lfp) * 0.5; lkp += normalize(lkp - bp).yx * vec2(-0.5, 0.5) * wobble; // Left knee\n    vec2 rkp = (bp + rfp) * 0.5; rkp -= normalize(rkp - bp).yx * vec2(-0.5, 0.5) * wobble; // Right knee\n\n    // Arm rotations\n    lep = Rotate(lep, np, lsr); // Left shoulder rotation\n    rep = Rotate(rep, np, rsr); // Right shoulder rotation\n\n    lhp = Rotate(lhp, np, lsr); // Left forearm rotation (with elbow)\n    rhp = Rotate(rhp, np, rsr); // Right forearm rotation (with elbow)\n\n    lhp = Rotate(lhp, lep, lar); // Left forearm rotation (independent)\n    rhp = Rotate(rhp, rep, rar); // Right forearm rotation (independent)\n\n    // Leg rotations\n    lkp = Rotate(lkp, bp, ltr); // Left thigh rotation\n    rkp = Rotate(rkp, bp, rtr); // Right thigh rotation\n\n    lfp = Rotate(lfp, bp, ltr); // Left shin rotation (with thigh)\n    rfp = Rotate(rfp, bp, rtr); // Right shin rotation (with thigh)\n\n    lfp = Rotate(lfp, lkp, lcr); // Left shin rotation (independent)\n    rfp = Rotate(rfp, rkp, rcr); // Right shin rotation (independent)\n\n    return min(min(sdSegment(p,  np, lep),\n               min(sdSegment(p, lep, lhp),\n               min(sdSegment(p,  np, rep),\n               min(sdSegment(p, rep, rhp),\n               min(sdSegment(p,  np,  bp),\n               min(sdSegment(p,  bp, lkp),\n               min(sdSegment(p, lkp, lfp),\n               min(sdSegment(p,  bp, rkp),\n                   sdSegment(p, rkp, rfp))))))))) - t,\n\n               sdDisc(p, hp, hs));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    float stickFigure = sdStickFigure(uv - vec2(0.0, 0.1));\n    fragColor = vec4(smoothstep(0.0, unit, stickFigure));\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}