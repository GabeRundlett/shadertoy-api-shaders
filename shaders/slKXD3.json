{
    "Shader": {
        "info": {
            "date": "1641458788",
            "description": "Lots of stuff...",
            "flags": 0,
            "hasliked": 0,
            "id": "slKXD3",
            "likes": 27,
            "name": "Melange",
            "published": 3,
            "tags": [
                "voronoi",
                "reflection",
                "architecture",
                "polyhedron",
                "pentakis",
                "flextube"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 394
        },
        "renderpass": [
            {
                "code": "// \"Melange\" by dr2 - 2022\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define REFL  1  // (= 0/1) with reflections (perhaps slower compile)\n\n#if 1\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nvoid HexVorInit ();\nvec4 HexVor (vec2 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nmat3 StdVuMat (float el, float az);\nvec3 HsvToRgb (vec3 c);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\n\nvec3 sunDir, qHit;\nvec2 qTube, aRotCs[2];\nfloat dstFar, tCur, tubeRad, radBs, radUp, hUp;\nint idObj;\nbool isRefl;\nconst int idStr = 1, idRail = 2, idFlr = 3, idPil = 4, idEdge = 5, idFace = 6,\n   idTube = 7, idSph = 8, idRing = 9;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\nconst int nSeg = 3;\nconst int nTube = 5;\n\nstruct TbCon {\n  vec3 pLo, pHi;\n  vec2 sRotCs[2], tRotCs[2];\n  float chLen, segRad;\n};\nTbCon tbCon[nTube];\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\n#define F(x) (sin (x) / x - b)\n\nfloat SecSolve (float b)\n{  // (from \"Bucking Bronco\")\n  vec3 t;\n  vec2 f;\n  float x;\n  if (b < 0.95) {\n    t.yz = vec2 (0.7, 1.2);\n    f = vec2 (F(t.y), F(t.z));\n    for (int nIt = 0; nIt < 4; nIt ++) {\n      t.x = (t.z * f.x - t.y * f.y) / (f.x - f.y);\n      t.zy = t.yx;\n      f = vec2 (F(t.x), f.x);\n    }\n    x = t.x;\n  } else if (b < 1.) {\n    x = sqrt (10. * (1. - sqrt (1. - 1.2 * (1. - b))));\n  } else {\n    x = 0.;\n  }\n  return x;\n}\n\nvoid SetConf ()\n{\n  vec3 vp, s;\n  float segLen, segAng, a, aRot[2];\n  segLen = 2.;\n  hUp = 6.8 + 2.8 * sin (0.25 * pi * tCur);\n  tubeRad = 0.15;\n  radBs = 7.;\n  radUp = 4.;\n  aRot[0] = 0.05 * pi * sin (pi * 0.8 * tCur);\n  aRot[1] = 0.05 * pi * sin (pi * (0.8 * tCur + 0.5));\n  aRotCs[0] = sin (aRot[0] + vec2 (0.5 * pi, 0.));\n  aRotCs[1] = sin (aRot[1] + vec2 (0.5 * pi, 0.));\n  for (int k = 0; k < nTube; k ++) {\n    a = 2. * pi * float (k) / float (nTube);\n    tbCon[k].pLo.y = 0.;\n    tbCon[k].pLo.xz = Rot2D (vec2 (radBs, 0.), a);\n    tbCon[k].pHi.y = hUp;\n    s.xz = Rot2D (vec2 (radUp, 0.), a);\n    s.xy = Rot2D (vec2 (s.x, 0.), - aRot[0]);\n    s.zy = Rot2D (s.zy, - aRot[1]);\n    tbCon[k].pHi = vec3 (0., hUp, 0.) + s;\n    vp = tbCon[k].pHi - tbCon[k].pLo;\n    tbCon[k].chLen = 0.5 * length (vp) / float (nSeg);\n    segAng = max (1e-4, SecSolve (tbCon[k].chLen / segLen));\n    tbCon[k].segRad = segLen / segAng;\n    tbCon[k].sRotCs[0] = sin (segAng + vec2 (0.5 * pi, 0.));\n    tbCon[k].sRotCs[1] = sin (- segAng + vec2 (0.5 * pi, 0.));\n    tbCon[k].tRotCs[0] = sin (atan (vp.z, - vp.x) + pi + vec2 (0.5 * pi, 0.));\n    tbCon[k].tRotCs[1] = sin (asin (length (vp.xz) / length (vp)) + vec2 (0.5 * pi, 0.));\n  }\n}\n\nvec3 DodecSym (vec3 p)\n{   // (from \"Chinese Puzzle Balls 2\")\n  vec2 csD;\n  csD = sin (0.5 * atan (2.) + vec2 (0.5 * pi, 0.));\n  p.xz = Rot2Cs (vec2 (p.x, abs (p.z)), csD);\n  p.xy = Rot2D (p.xy, -0.1 * pi);\n  p.x = - abs (p.x);\n  for (int k = 0; k <= 3; k ++) {\n    p.zy = Rot2Cs (p.zy, vec2 (csD.x, - csD.y));\n    p.y = - abs (p.y);\n    p.zy = Rot2Cs (p.zy, csD);\n    if (k < 3) p.xy = Rot2Cs (p.xy, sin (-2. * pi / 5. + vec2 (0.5 * pi, 0.)));\n  }\n  p.xy = sin (mod (atan (p.x, p.y) + pi / 5., 2. * pi / 5.) - pi / 5. +\n     vec2 (0., 0.5 * pi)) * length (p.xy);\n  p.xz = - vec2 (abs (p.x), p.z);\n  return p;\n}\n\nfloat PentakDf (vec3 p, float rad, float dMin)\n{  // (pentakisdodecahedron from \"This Is Not A Reflected Pipe 2\")\n  vec3 q;\n  float d, a1, a2, s;\n  q = DodecSym (p);\n  a1 = 0.5 * acos (-1. / sqrt (5.));\n  a2 = 0.5 * acos (- (80. + 9. * sqrt (5.)) / 109.);\n  s = abs (dot (q.yz, sin (a1 - a2 + vec2 (0., 0.5 * pi))) + rad);\n  d = SmoothMax (s - 0.1, min (dot (q.yz, sin (a1 - pi + vec2 (0., 0.5 * pi))),\n     dot (q.xy, sin (pi / 5. + vec2 (0.5 * pi, 0.)))) - 0.1, 0.05);\n  DMIN (idEdge);\n  d = s - 0.05;\n  DMIN (idFace);\n  return dMin;\n}\n\nfloat TubesDf (vec3 p, float dMin)\n{  // (from \"Rock the Balls\")\n  vec3 q, pp;\n  vec2 b;\n  float d, s, pentRad;\n  pentRad = 3.5;\n  p.y -= 0.2;\n  q = p;\n  d = PrTorusDf (q.xzy, 0.5 * tubeRad, radBs);\n  q.y -= hUp;\n  q.xy = Rot2Cs (q.xy, aRotCs[0]);\n  q.zy = Rot2Cs (q.zy, aRotCs[1]);\n  d = min (d, PrTorusDf (q.xzy, 0.3 * tubeRad, radUp));\n  DMIN (idRing);\n  if (! isRefl) dMin = PentakDf (q, pentRad, dMin);\n  pp = p;\n  for (int k = VAR_ZERO; k < nTube; k ++) {\n    p = pp - tbCon[k].pLo;\n    p.xz = Rot2Cs (p.xz, tbCon[k].tRotCs[0]);\n    p.xy = Rot2Cs (p.xy, tbCon[k].tRotCs[1]);\n    p.xy = Rot2Cs (p.xy, tbCon[k].sRotCs[1]);\n    q = p;\n    d = PrSphDf (q, 1.1 * tubeRad);\n    DMIN (idSph);\n    s = 1.;\n    for (int j = 0; j < nSeg; j ++) {\n      q = p;\n      q.xy = Rot2Cs (vec2 (- q.y, q.x - tbCon[k].segRad), tbCon[k].sRotCs[0]);\n      b = vec2 (length (q.xy) - tbCon[k].segRad, q.z);\n      d = max (length (b) - tubeRad, dot (vec2 (abs (q.x), q.y), tbCon[k].sRotCs[0]));\n      p.xy = Rot2Cs (vec2 (q.y, - q.x), tbCon[k].sRotCs[0]);\n      p.x = - (p.x + tbCon[k].segRad);\n      s = - s;\n      if (d < dMin) qTube = atan (vec2 (- q.x, b.x), vec2 (- q.y, b.y)) * vec2 (tbCon[k].segRad, s);\n      DMIN (idTube);\n    }\n    q = p;\n    d = PrSphDf (q, 1.1 * tubeRad);\n    DMIN (idSph);\n  }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{  // (folly from \"Magic Tree 2\")\n  vec3 q, qs;\n  vec2 flShift, bcRad;\n  float dMin, d, s, aq, a, db, flGap, flRad, flWid, bcLen;\n  flGap = 4.;\n  flShift = vec2 (11.3, 3.9);\n  flRad = 9.85;\n  flWid = 1.7;\n  bcRad = vec2 (0.08, 0.05);\n  bcLen = 1.1;\n  dMin = dstFar;\n  q = p;\n  aq = (length (q.xz) > 0.) ? atan (q.z, - q.x) : 0.;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (4. * aq / (2. * pi) + 0.5) / 4.));\n  qs.y = q.y;\n  qs.xz = Rot2D (q.xz + vec2 (flShift.x, 6.), -0.25 * pi);\n  db = PrBox2Df (qs.yz + vec2 (-8.9, 0.), vec2 (1.4, 0.5));\n  qs.xz = Rot2D (q.xz + vec2 (flShift.x, -6.), 0.25 * pi);\n  db = min (db, PrBox2Df (qs.yz + vec2 (-1.1, 0.), vec2 (1.2, 0.5)));\n  qs.y = q.y - flGap;\n  qs.xz = Rot2D (vec2 (q.x + flShift.x, abs (q.z) - 6.), -0.25 * pi);\n  q.xz = vec2 (- q.z, q.x + 6.);\n  a = (length (q.xz) > 0.) ? atan (q.z, - q.x) : 0.;\n  q.xz = vec2 (28. * a / (2. * pi), length (q.xz) - 8.);\n  q.y += 3.;\n  q.xy = Rot2D (q.xy, 0.25 * pi);\n  s = mod (q.x, 0.5 * sqrt (2.));\n  d = 0.3 * max (max (max (q.y - min (s, 0.5 * sqrt (2.) - s), abs (q.z) - 1.5), -0.07 - q.y),\n     qs.x - 0.1);\n  DMINQ (idStr);\n  q.z = abs (q.z);\n  q -= vec3 (- flShift.x, 1.4, 1.43);\n  d = max (min (PrCylDf (q.yzx, bcRad.x, 5.8), PrCylDf (vec3 (0.5 * mod (17.8 * a + 0.5, 1.) -\n     0.25, q.y + 0.7, q.z).xzy, bcRad.y, 0.7)), qs.x - 0.1);\n  DMIN (idRail);\n  q = p;\n  q.y = abs (qs.y + 0.05) - flShift.y;\n  d = PrCylAnDf (q.xzy, flRad, flWid, 0.15);\n  q.xz = qs.xz + vec2 (-2., 0.2);\n  d = min (d, PrBoxDf (q, vec3 (2.1, 0.15, 1.7)));\n  DMINQ (idFlr);\n  q = vec3 (p.x, abs (qs.y - 2.1) - flShift.y, p.z);\n  s = length (q.xz) - flRad;\n  d = min (length (vec2 (s + flWid - 0.15, q.y)) - bcRad.x,\n     max (length (vec2 (s - flWid + 0.15, q.y)) - bcRad.x, 2. - abs (qs.x - 2.)));\n  DMIN (idRail);\n  q.y = abs (qs.y - 1.) - flShift.y;\n  q.xz = Rot2D (p.xz, 2. * pi * (floor (128. * aq / (2. * pi) + 0.5) / 128.));\n  d = min (PrCylDf (vec3 (q.x + flRad - flWid + 0.15, q.yz).xzy, bcRad.y, bcLen),\n     max (PrCylDf (vec3 (q.x + flRad + flWid - 0.15, q.yz).xzy, bcRad.y, bcLen),\n     2. - abs (qs.x - 2.)));\n  DMIN (idRail);\n  d = max (min (PrCylDf (vec3 (qs.x - 2., abs (qs.y - 2.1) - flShift.y, qs.z - 1.45).yzx,\n     bcRad.x, 2.), PrCylDf (vec3 (mod (qs.x + 0.25, 0.5) - 0.25, abs (qs.y - 1.) - flShift.y,\n     qs.z - 1.45).xzy, bcRad.y, bcLen)), abs (qs.x - 2.) - 2.);\n  DMIN (idRail);\n  d = max (min (PrCylDf (vec3 (qs.x, abs (qs.y - 2.1) - flShift.y, qs.z), bcRad.x, 1.45),\n     max (PrCylDf (vec3 (qs.x, abs (qs.y - 1.) - flShift.y,\n     mod (qs.z + 0.25, 0.5) - 0.25).xzy, bcRad.y, bcLen), abs (qs.z) - 1.45)), - db);\n  DMIN (idRail);\n  d = min (PrCapsDf (vec3 (qs.x, abs (qs.y - bcLen) - flShift.y, qs.z - 1.43).xzy, 0.15, 1.2),\n     PrCapsDf (vec3 (qs.x, qs.y - bcLen, qs.z + 1.43).xzy, 0.15, flShift.y + 1.2));\n  DMINQ (idPil);\n  dMin = TubesDf (p, dMin);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar || p.y < 0.) break;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += max (0.01, h);\n    if (sh < 0.05) break;\n  }\n  return sh;\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, skCol;\n  vec2 q;\n  float f, fd, ff, sd;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n    col = vec3 (0.3, 0.4, 0.6);\n  } else {\n    q = 0.01 * (ro.xz + 2. * tCur + ((100. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    sd = max (dot (rd, sunDir), 0.);\n    skCol = vec3 (0.3, 0.4, 0.8) + step (0.1, sd) * vec3 (1., 1., 0.9) *\n       min (0.3 * pow (sd, 64.) + 0.5 * pow (sd, 2048.), 1.);\n    col = mix (skCol, clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return col;\n}\n\nvec3 GrndNf (vec2 p, float d)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  return vec3 (normalize (vec3 (Fbm2 (p) - vec2 (Fbm2 (p + e.xy),\n     Fbm2 (p + e.yx)), (2. + 3. * d) * e.x)).xzy);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 vc, col4;\n  vec3 vn, col;\n  float dstObj, dstGrnd, r, s, sh, nDotL;\n  bool isBg;\n  SetConf ();\n  HexVorInit ();\n  isBg = false;\n  sh = 1.;\n  dstGrnd = dstFar;\n#if REFL\n  for (int k = VAR_ZERO; k < 2; k ++) {\n    isRefl = (k == 1);\n    dstObj = ObjRay (ro, rd);\n    if (! isRefl && dstObj < dstFar && idObj == idFace) {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      rd = reflect (rd, vn);\n      ro += 0.01 * rd;\n    } else break;\n  }\n#else\n  isRefl = false;\n  dstObj = ObjRay (ro, rd);\n#endif\n  isRefl = false;\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    r = length (ro.xz);\n    if (idObj == idFlr) {\n      col4 = vec4 (0.9, 0.9, 1., 0.1);\n      if (abs (vn.y) > 0.99) {\n        if (r < 11.6) {\n          s = mod (2.42 * r, 2.);\n          col4 *= (0.8 + 0.2 * SmoothBump (0.08, 0.92, 0.02, fract (s))) *\n             (0.8 + 0.2 * SmoothBump (0.04, 0.96, 0.01,\n             fract (64. * atan (ro.z, - ro.x) / (2. * pi) + 0.5 * step (s, 1.))));\n        } else {\n          col4 *= 0.8 + 0.2 * SmoothBump (0.08, 0.92, 0.02, fract (2. * qHit.x));\n        }\n      } else if (abs (vn.y) < 0.01) col4 *= 0.8 +\n         0.2 * SmoothBump (0.2, 0.8, 0.03, fract (12. * ro.y));\n    } else if (idObj == idStr) {\n      col4 = vec4 (0.8, 0.8, 0.9, 0.1);\n    } else if (idObj == idRail) {\n      col4 = vec4 (0.9, 0.8, 0.2, 0.3);\n    } else if (idObj == idPil) {\n      col4 = vec4 (0.8, 0.7, 0.2, 0.3);\n    } else if (idObj == idTube) {\n      col4 = mix (vec4 (1., 0., 0., 0.2), vec4 (0.6, 0.6, 1., 0.3),\n         step (0., sin (8. * pi * qTube.x + 3. * qTube.y)));\n    } else if (idObj == idSph) {\n      col4 = vec4 (0.7, 0.9, 0.7, 0.2);\n    } else if (idObj == idRing) {\n      col4 = vec4 (0.7, 0.9, 0.7, 0.2);\n    } else if (idObj == idEdge) {\n      col4 = vec4 (0.3, 0.3, 0.8, 0.3);\n    } else if (idObj == idFace) {\n      col4 = vec4 (0.7, 0.7, 0.8, 0.2);\n    }\n  } else if (rd.y < 0.) {\n    dstGrnd = - ro.y / rd.y;\n    ro += dstGrnd * rd;\n    r = length (ro.xz);\n    if (r < 8.1) {\n      vc = HexVor (4. * ro.xz);\n      vn = normalize (vec3 (- 0.9 * vc.yz, 1.)).xzy;\n      s = fract (16. * vc.w);\n      col4 = vec4 (HsvToRgb (vec3 (0.1 + 0.4 * step (2. * s, 1.) + 0.1 * fract (5. * s),\n         0.4 + 0.2 * fract (17. * s), 0.6 + 0.3 * fract (8. * s))) *\n         (0.6 + 0.4 * smoothstep (0., 0.2, vc.x)) * (0.7 + 0.3 * smoothstep (1.5, 2.5, r)), 0.2);\n    } else {\n      col4 = vec4 (mix (vec3 (0.4, 0.5, 0.3), vec3 (0.3, 0.4, 0.3),\n         0.2 + 0.6 * smoothstep (0.3, 0.7, Fbm2 (0.5 * ro.xz))), 0.05);\n      vn = GrndNf (ro.xz, smoothstep (0.5, 0.8, dstGrnd / dstFar));\n    }\n  } else isBg = true;\n  if (! isBg) {\n    nDotL = max (dot (sunDir, vn), 0.);\n    if (dstObj < dstFar && idObj != idFlr && idObj != idStr) nDotL *= nDotL;\n    sh = 0.6 + 0.4 * ObjSShadow (ro + 0.01 * vn, sunDir);\n    col = col4.rgb * (0.2 + 0.2 * max (dot (vn, - normalize (vec3 (sunDir.xz, 0.).xzy)), 0.) +\n       0.8 * sh * nDotL) +\n       col4.a * step (0.95, sh) * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n    if (dstObj >= dstFar && dstGrnd > 0.5 * dstFar) col = mix (col, vec3 (0.3, 0.4, 0.6),\n       pow (1. + rd.y, 16.));\n  } else col = SkyBgCol (ro, rd);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  dstFar = 150.;\n  az = 0.;\n  el = -0.17 * pi;\n  if (mPtr.z > 0.) {\n    az -= 2.5 * pi * mPtr.x;\n    el -= 0.5 * pi * mPtr.y;\n  } else {\n    az -= 2.5 * pi * sin (0.003 * pi * tCur);\n    el += 0.15 * pi * cos (0.03 * pi * tCur);\n  }\n  el = clamp (el, -0.4 * pi, -0.01 * pi);\n  vuMat = StdVuMat (el, az);\n  zmFac = 7. - 2. * cos (az);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  ro = vuMat * vec3 (0., 5., -60.);\n  sunDir = vuMat * normalize (vec3 (1., 2., -1.));\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nvec2 gVec[7], hVec[7];\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvoid HexVorInit ()\n{\n  vec3 e = vec3 (1., 0., -1.);\n  gVec[0] = e.yy;\n  gVec[1] = e.xy;\n  gVec[2] = e.yx;\n  gVec[3] = e.xz;\n  gVec[4] = e.zy;\n  gVec[5] = e.yz;\n  gVec[6] = e.zx;\n  for (int k = 0; k < 7; k ++) hVec[k] = HexToPix (gVec[k]);\n}\n\nvec4 HexVor (vec2 p)\n{\n  vec4 sd, udm;\n  vec2 ip, fp, d, u;\n  float amp, a;\n  amp = 0.7;\n  ip = PixToHex (p);\n  fp = p - HexToPix (ip);\n  sd = vec4 (4.);\n  udm = vec4 (4.);\n  for (int k = 0; k < 7; k ++) {\n    u = Hashv2v2 (ip + gVec[k]);\n    a = 2. * pi * (u.y - 0.5);\n    d = hVec[k] + amp * (0.4 + 0.6 * u.x) * vec2 (cos (a), sin (a)) - fp;\n    sd.w = dot (d, d);\n    if (sd.w < sd.x) {\n      sd = sd.wxyw;\n      udm = vec4 (d, u);\n    } else sd = (sd.w < sd.y) ? sd.xwyw : ((sd.w < sd.z) ? sd.xyww : sd);\n  }\n  sd.xyz = sqrt (sd.xyz);\n  return vec4 (SmoothMin (sd.y, sd.z, 0.3) - sd.x, udm.xy, Hashfv2 (udm.zw));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}