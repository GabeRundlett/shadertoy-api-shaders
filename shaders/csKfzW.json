{
    "Shader": {
        "info": {
            "date": "1697989208",
            "description": "first raymarch implementation, set a stepsize bigger than 0.9 and got this funny result",
            "flags": 0,
            "hasliked": 0,
            "id": "csKfzW",
            "likes": 2,
            "name": "weird Raymarch",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal",
                "sdf",
                "cube",
                "sphere"
            ],
            "usePreview": 0,
            "username": "AndreCorrea",
            "viewed": 199
        },
        "renderpass": [
            {
                "code": "\n\nprecision mediump float;\n\nconst int MAX_MARCHING_STEPS = 100;\nconst float THRESHOLD = 0.00000001;\n\nfloat sdSphere(vec3 p,vec3 c,float r) {\n  c.x = sin(iTime) * 0.1;\n  c.y = cos(iTime) * 0.1;\n  c.z = sin(iTime) * 0.1; \n  return length(p - c) - r;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n\n\nfloat stepSize =4.0;\n\nvec3 repeat(vec3 p){\n  float s = 3.0;\n  p.x = p.x - s*round(p.x/s);\n  p.y = p.y - s*round(p.y/s);\n  p.z = p.z - s*round(p.z/s);\n  return p;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat scene(vec3 p) {\n\n  p = repeat(p);\n  float box = sdRoundBox(p, vec3(0.1, 0.1, 0.1), 0.1);\n  float sphere = sdSphere(p, vec3(0, 0, 0), 0.25);\n  float d = opSmoothUnion(box, sphere, 0.1);\n  return d;\n}\n\nvec3 calcNormal(vec3 p) {\n    float eps = 0.00001; // Adjust as needed\n    \n    float dx = (scene(p + vec3(eps, 0, 0)) - scene(p - vec3(eps, 0, 0))) / (2.0 * eps);\n    float dy = (scene(p + vec3(0, eps, 0)) - scene(p - vec3(0, eps, 0))) / (2.0 * eps);\n    float dz = (scene(p + vec3(0, 0, eps)) - scene(p - vec3(0, 0, eps))) / (2.0 * eps);\n    \n    return normalize(vec3(dx, dy, dz));\n}\n\nvec3 march(vec3 cam, vec3 dir) {\n  float totalDistance = 0.0;\n  vec3 currentPos = cam;\n  vec3 fogColor = vec3(0.8, 0.8, 0.8); // Adjust as needed\n  float fogDensity = 0.05; // Adjust as needed\n  vec3 col = vec3(0.0);\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n\n    float dist = scene(currentPos);\n    if ((dist < THRESHOLD)&&(length(currentPos)>0.1)) {\n      vec3 normal = calcNormal(currentPos);\n      vec3 lightDir = normalize(vec3(-1.0, -1.0, -1.0)); \n\n      float lightIntensity = max(dot(normal, -lightDir), 0.0);\n      vec3 ambientLight = vec3(0.2, 0.2, 0.2);\n      vec3 col = vec3(1.0, 1.0, 1.0) * lightIntensity + ambientLight; \n      return col;\n    }\n    totalDistance += dist;\n    currentPos += dir * stepSize;\n  }\n\n\n  return col;\n}\n\nfloat zoomFactor = 1.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 backgroundColor = vec3(0.835, 1, 1);\n    vec3 col = vec3(1);\n\n    // Define camera position and direction\n\n    vec3 dir = normalize(vec3(uv, 1));\n\n    // Get mouse rotation\n\n\n    float rotX = iMouse.y / iResolution.y * 8.; // Adjust the sensitivity as needed\n    float rotY = iMouse.x / iResolution.x * 8.;\n    rotY += iTime * 0.1;\n\n    vec3 cam = vec3(0, 0, 0.0);\n    mat3 rotationMatrix = mat3(\n        cos(rotY), 0, sin(rotY),\n        0, 1, 0,\n        -sin(rotY), 0, cos(rotY)\n    ) * mat3(\n        1, 0, 0,\n        0, cos(rotX), -sin(rotX),\n        0, sin(rotX), cos(rotX)\n    );\n\n    cam = rotationMatrix * cam;\n    dir = normalize(rotationMatrix * dir);\n\n    col = march(cam, dir);\n\n    fragColor = vec4(col, 1.0); // Output to screen\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}