{
    "Shader": {
        "info": {
            "date": "1621211065",
            "description": "Fascinating.",
            "flags": 32,
            "hasliked": 0,
            "id": "7s2XDc",
            "likes": 16,
            "name": "Fascinating Dynamics",
            "published": 3,
            "tags": [
                "dynamics",
                "complex",
                "newton"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 208
        },
        "renderpass": [
            {
                "code": "#define RHO 1.57079632679\n#define PI 3.14159265359\n#define TAU 6.28318530718\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y * 2.0;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 2.0;\n    float unit = 4.0 / iResolution.y;\n\n    // Quintic coefficients\n    float[6] coeffs;\n    genCoeffs(iTime, coeffs);\n\n    vec2 p = cpoly5(uv, coeffs);\n    fragColor = vec4(smoothstep(unit, 0.0, abs(mod(p.x + 0.125, 0.25) - 0.125)));\n    fragColor.rgb += smoothstep(unit, 0.0, abs(mod(p.y + 0.125, 0.25) - 0.125));\n    fragColor.rgb /= max(2.0, length(p) * 5.0);\n\n    // Iterate on UVs\n    vec2 z = uv;\n    vec2 path = vec2(0.0);\n    for (int n=0; n < 5; n++) {\n        vec2 dz = cdiv(cpoly5(z, coeffs), cpolyPrime5(z, coeffs));\n        path += 0.2 * dz;\n        z -= dz;\n    }\n\n    fragColor += vec4(mix(z, cpoly5(z, coeffs), 0.5 + 0.5 * sin(iTime * 0.5)), length(path), 1.0);\n\n    vec2 sUv = sin(mod(atan(uv.y, uv.x) + PI / 5.0, TAU / 5.0) - PI / 5.0 + vec2(RHO, 0.0)) * length(uv);\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.0, 1.0, 0.0), smoothstep(unit, 0.0, abs(sUv.y)) * max(0.0, 2.0 - abs(mod(iTime, TAU * 8.0) - TAU * 4.0)));\n\n    // Draw quintic\n    float fx = poly5(uv.x, coeffs);\n    float dx = polyPrime5(uv.x, coeffs);\n    fragColor.rgb = mix(fragColor.rgb, vec3(1.0, 0.8, 0.0), smoothstep(unit, 0.0, abs(uv.y - fx) / sqrt(1.0 + dx * dx) - 0.005));\n\n    // Draw trail from mouse for complex Newton-Raphson\n    z = mouse;\n    for (int n=0; n < 50; n++) {\n        vec2 zn = z - 0.1 * cdiv(cpoly5(z, coeffs), cpolyPrime5(z, coeffs));\n        vec2 pa = uv - z, ba = zn - z;\n        fragColor.rgb = mix(fragColor.rgb, hue2rgb(length(ba)), smoothstep(unit, 0.0, length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0)) - 0.01));\n        z = zn;\n    }\n\n    // Draw trail from mouse for real Newton-Raphson\n    float x = mouse.x;\n    for (int n=0; n < 50; n++) {\n        float xn = x - 0.1 * poly5(x, coeffs) / polyPrime5(x, coeffs);\n        vec2 pa = uv - vec2(x, 0.0), ba = vec2(xn - x, 0.0);\n        fragColor.rgb = mix(fragColor.rgb, hue2rgb(abs(ba.x)), smoothstep(unit, 0.0, length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0)) - 0.01));\n        x = xn;\n    }\n\n    // Iterate on sample points in a grid\n    for (int id=0; id < 100; id++) {\n        z = texelFetch(iChannel0, ivec2(id, 0), 0).xy;\n        fragColor.rgb = mix(fragColor.rgb, vec3(1.0), smoothstep(unit, 0.0, length(uv - z) - 0.02));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Hue to RGB function from Fabrice's shadertoyunofficial blog:\n#define hue2rgb(hue) 0.6 + 0.6 * cos(6.3 * hue + vec3(0.0, 23.0, 21.0))\n#define iTime iTime * 0.5\n\n// Complex math\nvec2 cmul(in vec2 z, in vec2 w) { return z * mat2(w.x, -w.y, w.yx); }\nvec2 cdiv(in vec2 z, in vec2 w) { return z * mat2(w, -w.y, w.x) / dot(w, w); }\n\nvec2 cpoly5(in vec2 x, in float[6] a) {\n    return a[0] * cmul(x, cmul(x, cmul(x, cmul(x, x)))) + a[1] * cmul(x, cmul(x, cmul(x, x))) + a[2] * cmul(x, cmul(x, x)) + a[3] * cmul(x, x) + a[4] * x + vec2(a[5], 0.0);\n}\n\nfloat poly5(in float x, in float[6] a) {\n    return ((((a[0] * x + a[1]) * x + a[2]) * x + a[3]) * x + a[4]) * x + a[5];\n}\n\nvec2 cpolyPrime5(in vec2 x, in float[6] a) {\n    return 5.0 * a[0] * cmul(x, cmul(x, cmul(x, x))) + 4.0 * a[1] * cmul(x, cmul(x, x)) + 3.0 * a[2] * cmul(x, x) + 2.0 * a[3] * x + vec2(a[4], 0.0);\n}\n\nfloat polyPrime5(in float x, in float[6] a) {\n    return (((5.0 * a[0] * x + 4.0 * a[1]) * x + 3.0 * a[2]) * x + 2.0 * a[3]) * x + a[4];\n}\n\n// Coefficient animation\nvoid genCoeffs(in float time, inout float[6] coeffs) {\n    time *= 0.25;\n    coeffs[0] = sin(time * 0.25);\n    coeffs[1] = sin(time) * 3.0;\n    coeffs[2] = sin(time) * 2.0;\n    coeffs[3] = cos(time * 0.75);\n    coeffs[4] = sin(time * 0.5);\n    coeffs[5] = sin(time);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Precompute sample starting points\nvoid mainImage(out vec4 z, in vec2 addr) {\n    ivec2 idx = ivec2(addr);\n    if (idx.x < 100 && idx.y == 0) {\n        float[6] coeffs;\n        genCoeffs(iTime, coeffs);\n\n        z.x = mod(addr.x, 10.0);\n        z.y = (addr.x - z.x) * 0.1;\n        z.xy = 0.1 * z.xy - 0.5;\n\n        for (int n=0; n < 10; n++) {\n            z.xy -= cdiv(cpoly5(z.xy, coeffs), cpolyPrime5(z.xy, coeffs));\n        }\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}