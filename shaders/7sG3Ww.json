{
    "Shader": {
        "info": {
            "date": "1631641155",
            "description": "practice for 2d chart",
            "flags": 0,
            "hasliked": 0,
            "id": "7sG3Ww",
            "likes": 4,
            "name": "Gamma Curve",
            "published": 3,
            "tags": [
                "2d",
                "chart"
            ],
            "usePreview": 0,
            "username": "mosan_hoshi",
            "viewed": 319
        },
        "renderpass": [
            {
                "code": "// written by mossan-hoshi( https://twitter.com/mossan_hoshi )\n\n#define MAX_GAMMA  2.2\n#define MARGIN  0.1\n#define IN_OUT_COLOR cyan\n\nvoid drawLine(vec2 p1, vec2 p2){\n\n}\n\nfloat gamma_function(float x, float gamma){\n  return  pow(x,1.0/gamma);\n}\n \nvoid gamma_curve(vec2 uv, float gamma, inout vec4 fragColor){\n  if(abs(uv.y - gamma_function(uv.x,gamma)) < 0.002 ){\n      vec3 color = vec3(0.8,0.5,0.8);\n      fragColor=vec4(color,1.0);\n  }\n}\n\nvoid in_out_line(float x, vec2 uv, float gamma, inout vec4 fragColor){\n  if((uv.y < gamma_function(x,gamma)&&(abs(uv.x - x) < 0.002))){\n      vec3 color = vec3(0.5,0.8,0.8);\n      fragColor=vec4(color,1.0);\n  }else if((abs(uv.y - gamma_function(x,gamma)) < 0.002)&&(uv.x < x)){\n      vec3 color = vec3(0.5,0.8,0.8);\n      fragColor=vec4(color,1.0);\n  }\n}\n \nvoid in_out_wave(float x, float input_range, vec2 uv, float gamma, float iTime, inout vec4 fragColor){\n  float x_max = x+input_range;\n  float x_min = x-input_range;\n  float y_max = gamma_function(x_max,gamma);\n  float y_min = gamma_function(x_min,gamma);\n  float y = (y_min + y_max) / 2.;\n  if((uv.y < gamma_function(uv.x,gamma)&&(abs(uv.x - (x + input_range * cos(100. * uv.y - 10. *iTime))) < 0.004))){\n      vec3 color = vec3(0.2,0.6,0.6);\n      fragColor=vec4(color,1.0);\n  }else if((uv.y > gamma_function(uv.x,gamma))&&\n           (abs(uv.y - ( y + ((y_max - y_min)/2.0) * cos(100. * uv.x + 10. *iTime))) < 0.004)){\n      vec3 color = vec3(0.2,0.6,0.6);\n      fragColor=vec4(color,1.0);\n  }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  // const \n  // normalize position(x,y:.0~1.0)\n  vec2 uv= fragCoord.xy/ min(iResolution.x,iResolution.y);\n  uv = uv * (1.0 + (2. * MARGIN));\n  vec2 offset = ((iResolution.xy / min(iResolution.x,iResolution.y)) - 1.0)/2.0;\n  \n  // draw color tiles\n  if((uv.x >= offset.x+MARGIN)&&(uv.x <= (1.007 + offset.x+MARGIN))&&\n     (uv.y >= offset.y+MARGIN)&&(uv.y <= (1.007 + offset.y+MARGIN))){\n\n    // background\n    if((uv.x>offset.x+MARGIN)&&(uv.x<1.0 + offset.x+MARGIN)){\n      float value = 0.9;\n      fragColor=vec4(value,value,value,1.0);\n    }\n\n    // thin lines\n    if(((mod(uv.x-offset.x, MARGIN) < 0.002)&&(mod(uv.y-offset.y,0.005) < 0.002))||\n       ((mod(uv.y-offset.y, MARGIN) < 0.002)&&(mod(uv.x-offset.x,0.005) < 0.002))){\n      float value = 0.2;\n      fragColor=vec4(value,value,value,1.0);\n    }\n\n    // thick lines\n    if((mod(uv.x-offset.x-MARGIN,0.5) < 0.007)||(mod(uv.y-offset.y-MARGIN,0.5) < 0.007)){\n      float value = 0.2;\n      fragColor=vec4(value,value,value,1.0);\n    }\n\n    // gamma curve\n    float range = MAX_GAMMA - 1.0 / MAX_GAMMA;\n    float gamma = MAX_GAMMA + (range / 2.)*(cos(iTime) - 1.0);\n    gamma_curve(uv - offset - MARGIN, gamma, fragColor);\n\n    // lines\n    float line_x = 0.3;\n    float input_range = 0.1;\n    in_out_line(line_x - input_range, uv - offset - MARGIN, gamma,fragColor);\n    in_out_line(line_x + input_range, uv - offset - MARGIN, gamma,fragColor);\n\n    // wave \n   in_out_wave(line_x, input_range, uv - offset - MARGIN, gamma, iTime,fragColor);\n    \n  }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}