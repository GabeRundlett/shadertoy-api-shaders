{
    "Shader": {
        "info": {
            "date": "1608165039",
            "description": "Fun experimentation. The inner glow effect was especially interesting.",
            "flags": 0,
            "hasliked": 0,
            "id": "WsyBWc",
            "likes": 8,
            "name": "Glowing Morphing Shape",
            "published": 3,
            "tags": [
                "glow",
                "morph",
                "innerglow"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 171
        },
        "renderpass": [
            {
                "code": "#define SIN_15 0.2588190451\n#define COS_15 0.96592582628\n\nfloat shape(in vec3 p) {\n    return max(mod(length(p) - 2.0, 1.0) - 0.5, length(p) - (0.6 + 0.4 * sin(iTime)) * 5.0) - 0.01;\n}\n\nfloat scene(in vec3 p) {\n    vec3 res = vec3(1.0, 1.0, 1.0);\n\n    vec3 cell = floor(p / res) * res;\n    vec3 local = fract(p / res);\n\n    float ldb = shape(cell);                           // Left, Down, Back\n    float rdb = shape(cell + vec3(res.x, 0.0, 0.0));   // Right, Down, Back\n    float ldf = shape(cell + vec3(0.0, 0.0, res.z));   // Left, Down, Front\n    float rdf = shape(cell + vec3(res.x, 0.0, res.z)); // Right, Down, Front\n    float lub = shape(cell + vec3(0.0, res.y, 0.0));   // Left, Up, Back\n    float rub = shape(cell + vec3(res.xy, 0.0));       // Right, Up, Back\n    float luf = shape(cell + vec3(0.0, res.yz));       // Left, Up, Front\n    float ruf = shape(cell + res);                     // Right, Up, Front\n\n    return mix(mix(mix(ldb, rdb, local.x),\n                   mix(ldf, rdf, local.x),\n                   local.z),\n\n               mix(mix(lub, rub, local.x),\n                   mix(luf, ruf, local.x),\n                   local.z),\n\n               local.y);\n}\n\nvec3 getNormal(in vec3 p) {\n    return normalize(vec3(scene(p + vec3(0.001, 0.0, 0.0)) - scene(p - vec3(0.001, 0.0, 0.0)),\n                          scene(p + vec3(0.0, 0.001, 0.0)) - scene(p - vec3(0.0, 0.001, 0.0)),\n                          scene(p + vec3(0.0, 0.0, 0.001)) - scene(p - vec3(0.0, 0.0, 0.001))));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 8.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n    float dt = 0.0;\n\n    for (int iter=0; iter < 250; iter++) {\n        vec3 p = ro + rd * dt;\n        vec3 u = p;\n\n        p.yz *= mat2(COS_15, SIN_15, -SIN_15, COS_15);\n        float c = cos(iTime), s = sin(iTime);\n        p.xz *= mat2(c, s, -s, c);\n\n        float d = scene(p);\n        if (d < 0.001) {\n            vec3 n = getNormal(p);\n\n            n.yz *= mat2(COS_15, -SIN_15, SIN_15, COS_15);\n            n.xz *= mat2(c, -s, s, c);\n\n            fragColor.rgb += 0.65 - 0.5 * dot(n, normalize(u));\n            //fragColor.rgb += max(0.0, pow(dot(n, normalize(u)), 1.0)); // Hacky ambient occlusion (only works for certain shapes)\n            break;\n        }\n\n        if (d > 100.0) {\n            break;\n        }\n\n        dt += d;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}