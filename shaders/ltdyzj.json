{
    "Shader": {
        "info": {
            "date": "1533287898",
            "description": "mouse sets parameters meaningfully/intuitively, because thats just so much better\n\nthis is more about the canvas than about its functions.\nit aids in calculating differentiasls for line thickness and unique colors per graph",
            "flags": 0,
            "hasliked": 0,
            "id": "ltdyzj",
            "likes": 20,
            "name": "WindowFunction plot canvas",
            "published": 3,
            "tags": [
                "function",
                "window",
                "fmsynth",
                "ease",
                "almostidentity",
                "hull",
                "impulse",
                "windowfunction"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 1097
        },
        "renderpass": [
            {
                "code": "//todo: i have a better almostidentity()generalization context:\n//todo,some of thesse oculd use sesaw framing\n\n//https://www.shadertoy.com/view/lslBzS\n//AD 2d hull curves(almost)Useful Little Functions\n\n// https://iquilezles.org/articles/functions\n// Reimplemented by starea @ shadertoy using Flyguy's Implicit Plotter https://www.shadertoy.com/view/4tB3WV\n#define PI acos(-1.)\n\n\n\n//Implicit/f(x)plotter thing.\n\n//XY range of the display.\n#define DISP_SCALE 2.0 \n\n//Line thickness(in pixels).\n#define LINE_SIZE 2.0\n\n//Grid line & axis thickness(in pixels).\n#define GRID_LINE_SIZE 1.0\n#define GRID_AXIS_SIZE 2.0\n\n//Number of grid lines per unit.\n#define GRID_LINES 1.0\n\n//Clip areas outside DISP_SCALE\n//#define CLIP_EDGES\n\nconst vec2 GRAD_OFFS=vec2(0.001,0);\n\n//4x multi sampling by defines is a special kind of lazy and inefficient\n#define GRAD(f,p,m)(vec2(f(p,m)-f(p+GRAD_OFFS.xy,m),f(p,m)-f(p+GRAD_OFFS.yx,m))/GRAD_OFFS.xx)\n\n//PLOT(Function,Color,Destination,Screen Position)\n//remove the \"abs\" to fill negative space\n#define PLOT(c,d,p,m,f)smoothstep((LINE_SIZE/iResolution.y*DISP_SCALE),0.,abs(f(p,m)/length(GRAD(f,p,m))))*(c-d)\n\n#define sscc(a)(a)*(a)*(3.-2.*(a))\n\n//if(x>m)linear;else()quadraticParabola.;input of(x*sign(x))is fun;also fun to multiply the result by almostIdentity(x*sign(x),m,n)*sign(x)\n//acoid small values by jumping over them f'x()near 0 is nearly 0.\nfloat almostIdentity(float x,float m,float n){if(x>m)return x\n ;float w=x/m//;return((2.*w-3.)*w*w+1.)*n+(1.-.5*w)*2.*x*w;//overly explicit,not worth it fwith ieeefloat,low precision\n ;return(2.*m-n*3.+(2.*n-m)*w)*w*w+n;}//by iq\n\n\nfloat almostIdentityOld(float x,float m,float n){if(x>m)return x;float a=2.*n-m;float b=2.*m-3.*n;return(a*x/m+b)*x/m*x/m+n;}\nfloat almostIdentity(float x,float m){if(x>m)return x;return(x*x/m+m)*.5;}//special case where n=.5\nfloat almostIdentity(vec2 p){return p.y-almostIdentity(p.x,.5,.1);}//basic demo\nfloat almostIdentity(vec2 p,vec2 m){return p.y-almostIdentity(p.x,m.x*.5,m.y*.1);}//basic demo\n\n//grow fast and slowly decay,for triggering behaviours or making envelopes for music or animation,\nfloat impulse(float k,float x){k=k*x;return k*exp(1.-k);}//by iq\nfloat impulse(vec2 p){return p.y-impulse(p.x,5.);}//basic demo of a general parametric\nfloat impulse(vec2 p,vec2 m){return .5*p.y/m.y-impulse(p.x,.5/m.x);}//basic demo of a general parametric\n\n//instead of filtering features via smoothstep(c-w,c,x)-smoothstep(c,c+w,x)\n//,this cubicPulse()is your friend. Also,why not,you can use it as a cheap replacement for a gaussian.\nfloat cubicPulse(float x,float c,float w){x=abs(x-c);if(x>=w)return 0.;return 1.-sscc(x/w);}//by iq\nfloat cubicPulse(vec2 p){return p.y-cubicPulse(p.x,.5,.2);}//basic demo of a general parametric\nfloat cubicPulse(vec2 p,vec2 m){return p.y-cubicPulse(p.x,m.x*2.,abs(m.y));}//basic demo of a general parametric\n\n// A nice choice to remap the 0..1 interval into 0..1,such that the corners are remapped to 0. \n// Very useful to skew the shape one side or the other in order to make leaves,eyes,and many other interesting shapes\nfloat pcurve(float x,float a,float b){float k=pow(a+b,a+b)/(pow(a,a)*pow(b,b));return k*pow(x,a)*pow(1.-x,b);}//by iq\nfloat pcurve(vec2 p){ return p.y-pcurve(p.x,1.,2.);}\nfloat pcurve(vec2 p,vec2 m){ return p.y-pcurve(p.x,m.y,m.x*2.);}\n\n//natural attenuation is an exponential of a linearly decaying quantity\nfloat expStep(float n,float x,float k){return exp(-k*pow(x,n));}//by iq\nfloat expStep(vec2 p){return p.y-expStep(p.x,.00005,.005);}//basic demo of a general parametric\nfloat expStep(vec2 p,vec2 m){return p.y-expStep(p.x,abs(m.y)*.00005,abs(m.x)*.005);}//basic demo of a general parametric\n\n//f(0)=f(1)=0;f(.5)=1;f'(0)=f'(.5)=f'(1)=0 ;cheap estimate for a normal distribution\nfloat parabola(float x,float k){return pow(4.*x*(1.-x),k);}//by iq\nfloat parabola(vec2 p){ return p.y-parabola(p.x,5.);}//basic demo of a general parametric\nfloat parabola(vec2 p,vec2 m){return p.y-parabola(p.x,m.x*.5);}//basic demo of a general parametric\n\n#define sat(a)clamp(a,0.,1.)\n#define u2(a)((a)*2.-1.)\n#define u5(a)((a)*.5+.5)\n#define kHer(a)(a)*(a)*(3.-2.*(a))\n//iq.HSV.Smooth: https://www.shadertoy.com/view/MsS3Wc\nvec3 khsv(float a){return sat(u2(abs(mod(a*3.+vec3(0,2,1),3.)-1.5)));}\nvec3 hsv2rgb(vec3 a){return a.z*mix(vec3(1),kHer(khsv(a.x)),a.y);}\nvec3 hsv2rgb(vec2 a){return mix(vec3(1),kHer(khsv(a.x)),a.y);}\nvec3 hsv2rgb(float a){return vec3(kHer(khsv(a)));}\n\nvec3 RGB(float a){return hsv2rgb(vec2(fract(a*(u5(sqrt(5.)))),.5));}//golden angle rainbow-hash(for natural numbers inputs)\n \n\nfloat mav(vec2 a){return max(a.x,a.y);}\n#define miv(a)-mav(-a)\n\nfloat grid(vec2 p){vec2 uv=mod(p,1./GRID_LINES);float h=1./GRID_LINES/2.,ds=DISP_SCALE/iResolution.y\n ;return min(smoothstep(0.,GRID_LINE_SIZE*ds,h-mav(abs(uv-h))),smoothstep(GRID_AXIS_SIZE*ds-.05,GRID_AXIS_SIZE*ds,miv(abs(p))));}\n\nvoid mainImage(out vec4 fragColor,vec2 fragCoord\n){vec2 aspect=iResolution.xy/iResolution.y\n ;vec2 u=(fragCoord.xy/iResolution.y)-aspect/2.\n ;u*=DISP_SCALE\n ;vec2 m=(iMouse.xy/iResolution.y)-aspect/2.\n ;vec3 c=vec3(grid(u)*0.25)\n ;c+=PLOT(RGB(0.),c,u,m,almostIdentity)\n ;c+=PLOT(RGB(1.),c,u,m,impulse)\n ;c+=PLOT(RGB(2.),c,u,m,cubicPulse)\n ;c+=PLOT(RGB(3.),c,u,m,expStep)\n ;c+=PLOT(RGB(4.),c,u,m,parabola)\n ;c+=PLOT(RGB(5.),c,u,m,pcurve)\n #ifdef CLIP_EDGES \n ;c*=1.-step(DISP_SCALE/2.0,abs(u.x))\n #endif\n ;fragColor=vec4(c,1);}\n ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}