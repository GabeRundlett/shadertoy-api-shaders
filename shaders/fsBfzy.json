{
    "Shader": {
        "info": {
            "date": "1646506466",
            "description": "simple drawing example with fading",
            "flags": 48,
            "hasliked": 0,
            "id": "fsBfzy",
            "likes": 2,
            "name": "draw and fade",
            "published": 3,
            "tags": [
                "simpledrawing"
            ],
            "usePreview": 0,
            "username": "wonko_rt",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 t = texture(iChannel0, uv).xyz;\n    fragColor = vec4(t,1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nhold the left mouse button to draw\nhold a,s,d for drawing red, green or blue\nhold y to draw horizontal lines\n*/\n#define KEY_A 65\n#define KEY_S 83\n#define KEY_D 68\n#define KEY_Y 89\nfloat keyState(int key)\n{\n    return texelFetch(iChannel1, ivec2(key,0), 0 ).x;\n}\n\nconst vec2 circle[] = vec2[](\n                                                           vec2(0., 4.), \n                             vec2(-2., 3.), vec2(-1., 3.), vec2(0., 3.), vec2(1., 3.), vec2(2., 3.), \n              vec2(-3., 2.), vec2(-2., 2.), vec2(-1., 2.), vec2(0., 2.), vec2(1., 2.), vec2(2., 2.), vec2(3., 2.), \n              vec2(-3., 1.), vec2(-2., 1.), vec2(-1., 1.), vec2(0., 1.), vec2(1., 1.), vec2(2., 1.), vec2(3., 1.), \nvec2(-4.,0.), vec2(-3., 0.), vec2(-2., 0.), vec2(-1., 0.),               vec2(1., 0.), vec2(2., 0.), vec2(3., 0.), vec2(4., 0.), \n              vec2(-3.,-1.), vec2(-2.,-1.), vec2(-1.,-1.), vec2(0.,-1.), vec2(1.,-1.), vec2(2.,-1.), vec2(3.,-1.), \n              vec2(-3.,-2.), vec2(-2.,-2.), vec2(-1.,-2.), vec2(0.,-2.), vec2(1.,-2.), vec2(2.,-2.), vec2(3.,-2.), \n                             vec2(-2.,-3.), vec2(-1.,-3.), vec2(0.,-3.), vec2(1.,-3.), vec2(2.,-3.), \n                                                           vec2(0.,-4.) \n);\n\nvec4 mixcol2(vec4 a, vec4 b)\n{\n    return vec4(mix(b.xyz, a.xyz, a.a), 1.);\n}\n\nvec4 anim2(vec2 fragCoord, float fadeFactor)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 cur = texture(iChannel0, uv);\n    \n    vec3 m = vec3(0.);\n    for (int s=0; s<circle.length(); ++s)\n    {\n        vec2 uv = (fragCoord.xy + circle[s]) / iResolution.xy;\n        vec4 col = texture(iChannel0, uv);\n        for (int i=0; i<3; ++i)\n            m[i] = max(m[i], col[i]);\n    }\n        \n    m *= fadeFactor;\n\n    return vec4(mix(cur.xyz, m, .05), cur.a);\n}\n\n\nconst float drawStrength = .2;\nconst float drawSizePoint = .05;\nconst float drawSizeLine = .01;\nconst float fadeFactor = .95;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float rm = min(iResolution.x, iResolution.y);\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 uvMouse = iMouse.xy / iResolution.xy;\n\n\n    float dist = length((fragCoord.xy - iMouse.xy) / rm) * 1.;\n    dist = smoothstep(0.,1.,dist/drawSizePoint);\n\n    vec4 cur = texture(iChannel0, uv);\n    if( iFrame==0 )\n        cur = vec4(vec3(0.),0.);\n    else\n        cur = anim2(fragCoord, fadeFactor);\n\n    vec3 drawColor = vec3(1.,1.,1.);\n    if (keyState(KEY_A) > 0.)\n        drawColor = vec3(1.,0.,0.);\n    else if (keyState(KEY_S) > 0.)\n        drawColor = vec3(0.,1.,0.);\n    else if (keyState(KEY_D) > 0.)\n        drawColor = vec3(0.,0.,1.);\n        \n    if (iMouse.z > 0.)\n    {\n        if (keyState(KEY_Y) > 0.)\n        {\n            dist = abs(fragCoord.y - iMouse.y) / iResolution.y;\n            dist = smoothstep(0.,1.,dist/drawSizeLine);\n        }\n        vec4 col = vec4(drawColor,drawStrength*(1.-dist));\n        fragColor = mixcol2(col, cur);\n    }\n    else\n        fragColor = cur;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}