{
    "Shader": {
        "info": {
            "date": "1480369739",
            "description": "Controls:\n  space - reset\n  mouse  (select a rectangle) - zoom\n  U - undo\n  P - change pattern",
            "flags": 48,
            "hasliked": 0,
            "id": "lldXRS",
            "likes": 1,
            "name": "Lyapunov 2D",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "map",
                "chaos",
                "logistic",
                "lyapunov",
                "markus"
            ],
            "usePreview": 0,
            "username": "piotrekli",
            "viewed": 634
        },
        "renderpass": [
            {
                "code": "#define LYAPUNOV_WARMUP 180\n#define LYAPUNOV_ITER 120\n#define SUPERSAMPLING\n\n#define VAL_BOUNDS 0\n#define VAL_MOUSE_PRESS 1\n#define VAL_PATTERN_EDIT 2\n#define VAL_PATTERN 3\n\nvec4 getValue(int a, int b)\n{\n    return texture(iChannel0, (vec2(a, b)+0.5)/iResolution.xy);\n}\n\nint getPattern(int patternIndex)\n{\n    return int(getValue(VAL_PATTERN, patternIndex).x*2.0);\n}\n\nfloat lyapunov(vec2 pos)\n{\n    float x = 0.5;\n    float acc = 0.0;\n    int patternIndex = 0;\n    for (int i=0; i<LYAPUNOV_ITER+LYAPUNOV_WARMUP; ++i)\n    {\n        float r;\n        int pattern = getPattern(patternIndex);\n        if (pattern == 0)\n        {\n            patternIndex = 0;\n            pattern = getPattern(patternIndex);\n        }\n        r = pattern == 1 ? pos.x : pos.y;\n        if (i >= LYAPUNOV_WARMUP)\n            acc += log(abs(r*(1.0-2.0*x)));\n        x = r * x * (1.0-x);\n        ++patternIndex;\n    }\n    return acc/float(LYAPUNOV_ITER);\n}\n\nbool line(ivec2 fragCoord, int y, int x0, int x1)\n{\n    if (x0 > x1)\n    {\n        int tmp = x1;\n        x1 = x0;\n        x0 = tmp;\n    }\n    return fragCoord.y == y && fragCoord.x >= x0 && fragCoord.x <= x1;\n}\n\nbool rect(ivec2 fragCoord, ivec2 v0, ivec2 v1)\n{\n    return line(fragCoord.xy, v0.y, v0.x, v1.x) ||\n           line(fragCoord.xy, v1.y, v0.x, v1.x) ||\n           line(fragCoord.yx, v0.x, v0.y, v1.y) ||\n           line(fragCoord.yx, v1.x, v0.y, v1.y);\n}\n\nvec4 calcFragColor(vec2 fragCoord, vec4 bounds)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float val = lyapunov(vec2(mix(bounds.x, bounds.z, uv.x), mix(bounds.y, bounds.w, uv.y)));\n    if (val < 0.0)\n    {\n        val = -val;\n        return vec4(cos(val*0.3)*0.5+0.4, exp(-val-0.2), 0.0, 1.0);\n    }\n    else\n    {\n        return vec4(val*val*0.3, cos(val*3.0)*0.5+0.5, 1.0/val, 1.0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bool patternEdit = getValue(VAL_PATTERN_EDIT, 0).x > 0.5;\n    vec4 bounds = getValue(VAL_BOUNDS, 0);\n#   ifdef SUPERSAMPLING\n\tfragColor = (calcFragColor(fragCoord+vec2(-0.25, -0.25), bounds) +\n        \t     calcFragColor(fragCoord+vec2(+0.25, -0.25), bounds) +\n       \t\t     calcFragColor(fragCoord+vec2(-0.25, +0.25), bounds) +\n        \t\t calcFragColor(fragCoord+vec2(+0.25, +0.25), bounds))/4.0;\n#   else\n    fragColor = calcFragColor(fragCoord, bounds);\n#   endif\n    fragColor = clamp(fragColor, 0.0, 1.0);\n    if (patternEdit)\n    {\n        fragColor *= 0.25;\n        ivec2 pixel = ivec2(fragCoord)/8-2;\n        if (pixel.x >= 0 && pixel.y >= 0 && pixel.y < 5)\n        {\n            int offset = pixel.x/6;\n            pixel.x -= offset*6;\n            if (pixel.x < 5)\n            {\n                int px = pixel.y*5+pixel.x;\n                int pat = int(getValue(VAL_PATTERN, offset)*2.0);\n                // â†“ some bad code; I will probably change this to use pow() and mod()\n                if (pat == 1 && (px ==  0 || px ==  4 || px ==  5 || px ==  9 ||\n                                 px == 10 || px == 11 || px == 12 || px == 13 ||\n                                 px == 14 || px == 15 || px == 19 || px == 21 ||\n                                 px == 22 || px == 23) ||\n                    pat == 2 && (px ==  0 || px ==  1 || px ==  2 || px ==  3 ||\n                                 px ==  5 || px ==  9 || px == 10 || px == 11 ||\n                                 px == 12 || px == 13 || px == 15 || px == 19 ||\n                                 px == 20 || px == 21 || px == 22 || px == 23) ||\n                    pat == 0 && (getValue(VAL_PATTERN, offset-1).x != 0.0 || offset == 0) &&\n                      px < 5 && mod(iTime, 0.5) < 0.3)\n                    fragColor = vec4(1.0);\n            }\n        }\n    }\n    else if (iMouse.z > 0.0)\n    {\n        fragColor *= 0.5;\n        if (rect(ivec2(fragCoord), ivec2(iMouse.xy), ivec2(iMouse.zw)))\n            fragColor = vec4(1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define VAL_BOUNDS 0\n#define VAL_MOUSE_PRESS 1\n#define VAL_PATTERN_EDIT 2\n#define VAL_PATTERN 3\n\nvec4 getValue(int a, int b)\n{\n    return texture(iChannel0, (vec2(a, b)+0.5)/iResolution.xy);\n}\n\nbool getKey(int key)\n{\n\treturn texture(iChannel3, vec2((float(key)+0.5)/256.0, 0.5)).x > 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int y = int(fragCoord.y);\n    int op = int(fragCoord.x);\n    bool patternEdit = getValue(VAL_PATTERN_EDIT, 0).x > 0.5;\n    bool reset = iFrame <= 1;\n    if (op == VAL_BOUNDS)\n    {\n        if (reset || patternEdit || getKey(32 /* space */))\n            fragColor = vec4(0.0, 0.0, 4.0, 4.0);\n        else\n        {\n            vec4 currentBounds = getValue(VAL_BOUNDS, y);\n            if (getKey(85 /* U */))\n                fragColor = getValue(VAL_BOUNDS, y+1);\n            else if (getValue(VAL_MOUSE_PRESS, 0).x > 0.5 && iMouse.z <= 0.0)\n            {\n                if (y >= 1)\n                    fragColor = getValue(VAL_BOUNDS, y-1);\n                else\n                {\n                    vec2 currentSize = currentBounds.zw-currentBounds.xy;\n                    vec4 v = iMouse.zwxy/iResolution.xyxy;\n                    v.xy = -v.xy;\n                    if (v.x > v.z) v.xz = v.zx;\n                    if (v.y > v.w) v.yw = v.wy;\n                    v.zw = v.zw-1.;\n                    fragColor = currentBounds+v*currentSize.xyxy;\n                }\n            }\n            else fragColor = currentBounds;\n        }\n    }\n    else if (op == VAL_MOUSE_PRESS)\n    {\n        fragColor = vec4(iMouse.z > 0.0);\n    }\n    else if (op == VAL_PATTERN_EDIT)\n    {\n        if (y == 0) patternEdit = patternEdit != getKey(80 /* P */);\n        fragColor = vec4(patternEdit);\n    }\n    else if (op == VAL_PATTERN)\n    {\n        int p;\n        if (reset)\n        {\n            if (y == 0) p = 1;\n            else if (y == 1) p = 2;\n            else p = 0;\n            fragColor = vec4(0.5*float(p));\n        }\n        else\n        {\n            float value = getValue(VAL_PATTERN, y).x;\n            if (patternEdit)\n            {\n                if (value == 0.0 && (y == 0 || getValue(VAL_PATTERN, y-1).x != 0.0))\n                {\n                    if (getKey(65 /* A */)) value = 0.5;\n                    else if (getKey(66 /* B */)) value = 1.0;\n                }\n                else if (value != 0.0 && getValue(VAL_PATTERN, y+1).x == 0.0)\n                {\n                    if (getKey(8 /* backspace */)) value = 0.0;\n                }\n            }\n            fragColor = vec4(value);\n        }\n    }\n    else fragColor = vec4(0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}