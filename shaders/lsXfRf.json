{
    "Shader": {
        "info": {
            "date": "1497215073",
            "description": "Been having artists block lately, so I made this as something pretty different from my usual style.",
            "flags": 4,
            "hasliked": 0,
            "id": "lsXfRf",
            "likes": 11,
            "name": "Boxy",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "lherm",
            "viewed": 1271
        },
        "renderpass": [
            {
                "code": "#define far 40.\n#define eps .001\n#define time iTime\n#define PI 3.1415926\n\n// Audio reactive threshold for color switch and reverse movement\n#define THRESHOLD .4\n\nfloat fftsmooth(float a, sampler2D s)\n{\n    //from nick shelton\n    //FFT_smooth_n = FFTRaw_n * alpha + FFT_smooth_n-1 * (1 - alpha)\n    float audio = texture(s, vec2(.5)).r;\n    return audio * a + audio-1. * (1.-a);\n    \n}\n#define A fftsmooth(.7, iChannel0)\n\n#define r2(p, a) {p = p * cos(a) + sin(a) * vec2(p.y, -p.x);}\n\nvec2 amod(vec2 p, float n)\n{\n    float g = 2. * PI / n,\n          a = atan(p.y, p.x) + g*.5;\n    a = mod(a, g)-g*.5;\n    return vec2(cos(a), sin(a))*length(p);\n}\n\nfloat map(vec3 p)\n{\n    p *= .5;\n    float s = A + .1;\n    r2(p.xy, p.z*.2);\n    p.xy += sin(p.z)*.2;\n    p.xy = amod(p.xy, 8.);\n    p.xz = (A > THRESHOLD) ? amod(p.zx, 8.) : amod(p.xz, 8.);\n    p.xz -= time*2. + A;\n    p.x = mod(p.x, 8.) - 4.;  \n    p.z = mod(p.z, 4.) - 2.;\n    p = abs(p);\n    \n    float d = length(max(p - s, 0.));\n    float d2 = min(max(p.x, p.y), min(max(p.x, p.z), max(p.y, p.z)))- s*.9;\n    return max(d, -d2);\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    float t = 0.,\n          h;\n    for (int i = 0; i < 128; i++)\n    {\n        vec3 p = ro + rd * t;\n        h = map(p);\n        t += h;\n        if (h < eps || t > far) break;\n    }\n    return t;\n}\n\nvec3 calcNormal(vec3 p)\n{\n    vec2 e = vec2(eps, 0);\n    return normalize(vec3(\n        map(p+e.xyy)-map(p-e.xyy),\n        map(p+e.yxy)-map(p-e.yxy),\n        map(p+e.yyx)-map(p-e.yyx)\n        ));\n}\n\nvec3 doColor(vec3 ro, vec3 rd, vec3 n, vec3 lp, float res)\n{\n    vec3 col = n-n,\n         p = ro + rd * res,\n         ld = lp - p,\n         objCol = vec3(1.);\n    if (res < far)\n    {\n        float len = length(ld),\n              spec,\n              amb = .25,\n              atten = max(1./len*len, .001),\n              diff;\n        ld /= len;\n        diff = max(dot(ld, n), 0.);\n        spec = pow(max(0., dot(reflect(-ld, n), -rd)), 8.);\n        col = objCol * (((diff + amb*.2)+spec*.1)+atten*.1);\n        \n    }\n    return col;\n}\n\nvoid mainImage( out vec4 f, in vec2 g )\n{\n\tvec2 R = iResolution.xy, u = (g+g-R)/R.y;\n    vec3 ro = vec3(0, 0, 1),\n         rd = normalize(vec3(u, -1)),\n         lp = vec3(1, 3, 5),\n         p = rd-rd,\n         n=p,\n         col=n;\n    float t = trace(ro, rd);\n    p = ro + rd * t;\n    n = calcNormal(p);\n    col = doColor(ro, rd, n, lp, t);\n    f = (A > THRESHOLD) ? vec4(col, 1.) : vec4(1.-col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}