{
    "Shader": {
        "info": {
            "date": "1460474869",
            "description": "Explore the sublime Mandelbulb; use the mouse to travel and the slider to zoom.",
            "flags": 32,
            "hasliked": 0,
            "id": "4dcSRf",
            "likes": 14,
            "name": "Interactive Mandelbulb",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 1604
        },
        "renderpass": [
            {
                "code": "// \"Interactive Mandelbulb\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Adapted from something I wrote a long time ago while learning CUDA; further\n  details can be found at the skytopia, subblue and iquilezles sites.\n*/\n\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float txRow = 32.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nconst float pi = 3.14159;\n\nvec3 ltDir;\nfloat dstFar, tCur;\nint nIt, nStep;\n\nfloat ObjDf (vec3 p)\n{\n  vec4 aa, sa, ca;\n  vec3 c, q, qd;\n  float qLen, qdLen, q2, q4, phi, theta, thetad, phid;\n  q = p.xzy;\n  c = q;\n  qLen = length (q);\n  phi = atan (q.y, q.x);\n  theta = (qLen > 0.) ? acos (q.z / qLen) : 0.;\n  thetad = 0.;\n  phid = 0.;\n  qdLen = 1.;\n  nIt = 0;\n  for (int n = 0; n < 5; n ++) {\n    q2 = qLen * qLen;\n    q4 = q2 * q2;\n    aa.xy = 8. * vec2 (theta, phi);\n    aa.zw = 7. * vec2 (theta, phi) + vec2 (thetad, phid);\n    sa = sin (aa);\n    ca = cos (aa);\n    q = q4 * q4 * vec3 (sa.x * ca.y, sa.x * sa.y, ca.x) + c;\n    qd = 8. * q4 * q2 * qLen * qdLen *\n       vec3 (sa.z * ca.w, sa.z * sa.w, ca.z) + vec3 (1.);\n    qLen = length (q);\n    phi = atan (q.y, q.x);\n    theta = (qLen > 0.) ? acos (q.z / qLen) : 0.;\n    qdLen = length (qd);\n    phid = atan (qd.y, qd.x);\n    thetad = (qdLen > 0.) ? asin (qd.z / qdLen) : 0.;\n    ++ nIt;\n    if (qLen > 3.1623) break;\n  }\n  return (qLen > 0.) ? 0.5 * qLen * log (qLen) / qdLen : 0.;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  nStep = 0;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    ++ nStep;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  if (d >= 0.001) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = 1e-5 * vec3 (1., -1., 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ShowWg (vec2 uv, vec2 canvas, vec3 col, float zmVar)\n{\n  vec4 wgBx[1];\n  vec2 ust;\n  float asp;\n  asp = canvas.x / canvas.y;\n  wgBx[0] = vec4 (0.47 * asp, -0.25, 0.012 * asp, 0.18);\n  ust = abs (0.5 * uv - wgBx[0].xy) - wgBx[0].zw;\n  if (abs (max (ust.x, ust.y)) * canvas.y < 1.) col = vec3 (0.5, 0.5, 0.);\n  ust = 0.5 * uv - wgBx[0].xy;\n  ust.y -= (zmVar - 0.5) * 2. * wgBx[0].w;\n  ust = abs (ust) - 0.6 * wgBx[0].zz;\n  if (abs (max (ust.x, ust.y)) * canvas.y < 1.5) col = vec3 (1., 1., 0.);\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col;\n  float dstHit, b;\n  int nItT;\n  b = - dot (ro, rd);\n  dstHit = b * b - dot (ro, ro) + 3.;\n  if (dstHit > 0.) {\n    ro += (b - sqrt (dstHit)) * rd;\n    dstHit = ObjRay (ro, rd);\n  } else dstHit = dstFar;\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    nItT = nIt;\n    vn = ObjNf (ro);\n    col = HsvToRgb (vec3 (mod (0.6 * log (float (nItT)), 1.) +\n       mod (0.1 * tCur, 1.), 1., 1. - smoothstep (0.7, 1., float (nStep) / 150.)));\n    col = col * (0.1 + 0.9 * max (dot (vn, ltDir), 0.) +\n       pow (max (0., dot (ltDir, reflect (rd, vn))), 128.));\n  } else col = vec3 (0.3, 0.3, 0.5);\n  col = clamp (col, 0., 1.);\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;;\n  float az, el, zmFac, zmVar;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  stDat = Loadv4 (0);\n  el = stDat.x;\n  az = stDat.y;\n  zmVar = stDat.z;\n  zmFac = 30. * zmVar + 5.;\n  dstFar = 15.;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) * \n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -6.);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  col = ShowScene (ro, rd);\n  col = ShowWg (uv, canvas, col, zmVar);\n  fragColor = vec4 (col, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Interactive Mandelbulb\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 32.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nconst float pi = 3.14159;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[1], stDat, mPtr, mPtrP;\n  vec2 iFrag, canvas, ust;\n  float el, az, asp, zmVar, autoRot;\n  int pxId, wgSel, wgReg;\n  canvas = iResolution.xy;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 2) discard;\n  wgSel = -1;\n  wgReg = -2;\n  if (iFrame <= 5) {\n    el = -0.1 * pi;\n    az = 0.;\n    zmVar = 0.5;\n    mPtrP = mPtr;\n    autoRot = 1.;\n  } else {\n    stDat = Loadv4 (0);\n    el = stDat.x;\n    az = stDat.y;\n    zmVar = stDat.z;\n    wgSel = int (stDat.w);\n    stDat = Loadv4 (1);\n    mPtrP = vec4 (stDat.xyz, 0.);\n    autoRot = stDat.w;\n  }\n  asp = canvas.x / canvas.y;\n  if (mPtr.z > 0.) {\n    wgBx[0] = vec4 (0.47 * asp, -0.25, 0.012 * asp, 0.18);\n    ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[0].xy) - wgBx[0].zw;\n    if (max (ust.x, ust.y) < 0.) wgReg = 0;\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n    autoRot = 0.;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0.) {\n      el -= 0.07 * (1. - 0.85 * zmVar) * mPtr.y;\n      el = mod (el, 2. * pi);\n      az += 0.07 * (1. - 0.85 * zmVar) * mPtr.x *\n         (1. - 2. * step (0.5 * pi, abs (abs (el) - pi)));\n      az = mod (az, 2. * pi);\n    }\n  } else {\n    if (wgSel == 0)\n       zmVar = clamp (0.5 + 0.5 * (mPtr.y - wgBx[0].y) / wgBx[0].w, 0., 1.);\n  }\n  if (autoRot > 0.) {\n    az += 0.0005;\n    el -= 0.0003;\n  }\n  if (pxId == 0) stDat = vec4 (el, az, zmVar, float (wgSel));\n  else if (pxId == 1) stDat = vec4 (mPtr.xyz, autoRot);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}