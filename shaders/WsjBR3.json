{
    "Shader": {
        "info": {
            "date": "1590514451",
            "description": "The bell that tolls no more",
            "flags": 0,
            "hasliked": 0,
            "id": "WsjBR3",
            "likes": 13,
            "name": "Cracked Bell",
            "published": 3,
            "tags": [
                "lighting",
                "corona",
                "godray",
                "fracture"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 353
        },
        "renderpass": [
            {
                "code": "// \"Cracked Bell\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat Fbm1 (float p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltPos;\nfloat tCur, dstFar, bHt, bRd, crkOff;\nint idObj;\nconst float pi = 3.14159;\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat CrkFun (vec3 p)\n{\n  vec3 e;\n  vec2 cs, w;\n  float s;\n  s = 1.;\n  e = normalize (p);\n  if (e.y > -0.21 * pi && e.y < 0.2 * pi) {\n    s = 1. - smoothstep (0., 0.22 * pi, e.y);\n    cs = sin (0.07 * pi * e.y + 0.2 * s * (Fbm1 (4. * pi * e.y + crkOff) - 0.5) + vec2 (0.5 * pi, 0.));\n    w = vec2 (abs (dot (p.xz, vec2 (cs.x, - cs.y))), p.z);\n    s = length (max (w, 0.)) - 0.02 * s;\n  }\n  return s;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, r, c;\n  dMin = dstFar;\n  q = p;\n  r = bRd;\n  r *= (1. - 0.7 * smoothstep (-0.6 * bHt, bHt + r, q.y) - 0.3 * smoothstep (- bHt, -0.4 * bHt, q.y));\n  c = 0.1 * (0.1 + 0.9 * smoothstep (- bHt, -0.8 * bHt, q.y));\n  r -= c - 0.1;\n  d = max (abs (PrCapsDf (q.xzy, r, bHt)) - c, - bHt - q.y);\n  d = max (d, - CrkFun (q));\n  DMIN (1);\n  q = p;\n  q.y -= bHt + 0.7;\n  d = PrTorusDf (q, 0.1, 0.3);\n  DMIN (2);\n  q = p;\n  q.y -= - bHt - 0.2;\n  q.xz = abs (q.xz) - 0.7 * bRd;\n  q.xz = Rot2D (q.xz, 0.25 * pi);\n  d = PrBoxDf (q, vec3 (0.3, 0.2, 0.4));\n  DMIN (3);\n  d = p.y + bHt + 0.4;\n  DMIN (4);\n  return 0.7 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec2 BallHit2 (vec3 ro, vec3 rd, float rad)\n{\n  vec3 u;\n  vec2 d2;\n  float b, d;\n  u = ro;\n  b = dot (rd, u);\n  d = b * b + rad * rad - dot (u, u);\n  d2 = vec2 (dstFar, dstFar);\n  if (d > 0.) {\n    d = sqrt (d);\n    d2 = vec2 (- b - d, - b + d);\n  }\n  return d2;\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float dMax)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.02 * d, h));\n    d += clamp (2. * h, 0.02, 0.3);\n    if (sh < 0.05 || d > dMax) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nfloat CrkGlo (vec3 u)\n{\n  float t;\n  t = asin (u.y / length (u));\n  return clamp (2. * Fbm1 (128. * t - 5. * tCur + 2. * sin (t * pi * tCur)) - 0.5, 0., 1.);\n}\n\nfloat LabSym (vec2 p)\n{\n  vec2 q;\n  float d, r;\n  r = length (p);\n  d = max (min (0.06 - abs (0.1 - abs (r - 0.8)), p.y), min (0.06 - abs (p.y), 1.1 - abs (p.x)));\n  q = Rot2D (p, 2. * pi * floor (16. * ((r > 0.) ? atan (p.y, - p.x) / (2. * pi) : 0.) + 0.5) / 16.);\n  d = max (d, min (min (0.06 - abs (q.y), 0.2 - abs (q.x + 1.1)), p.y + 0.1));\n  q.x += 1.5;\n  d = max (d, min (0.1 - length (q), p.y + 0.1));\n  return d;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 roo, col, vn, u, ltDir;\n  vec2 db2;\n  float dstObj, pDotR, r, rLo, rHi, sh, att, locLit, tLit;\n  bHt = 2.;\n  bRd = 2.4;\n  tLit = SmoothBump (0.25, 0.75, 0.15, mod (0.1 * tCur, 1.)) * (0.9 + 0.3 * Fbm1 (16. * tCur));\n  roo = ro;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    locLit = 0.;\n    if (idObj == 1) {\n      col4 = 1.3 * mix (vec4 (0.4, 0.2, 0.1, 0.2), vec4 (0.37, 0.27, 0.1, 0.3),\n         smoothstep (0.45, 0.55, Fbm3 (4. * ro)));\n      if (dot (vn.xz, ro.xz) > 0.) col4.rgb *= (1. - 0.2 * SmoothBump (-0.3, 0.3, 0.02, ro.y + 0.28)) *\n         (1. + 0.5 * smoothstep (-0.05, 0., LabSym (4. *\n         vec2 (mod (8. * atan (ro.z, - ro.x) / (2. * pi) + 0.5, 1.) - 0.5, 0.8 * (ro.y + 0.5)))));\n    } else if (idObj == 2) {\n      col4 = vec4 (0.5, 0.2, 0., 0.2);\n    } else if (idObj == 3) {\n      col4 = vec4 (0.4, 0.3, 0.2, 0.1);\n    } else if (idObj == 4) {\n      r = length (ro.xz);\n      col4 = vec4 (0.2, 0.2, 0.25, 0.) * (0.95 + 0.05 * sin (2. * pi * r)) *\n         (0.8 + 0.2 * smoothstep (-0.2, 0., r - bRd));\n      locLit = 1. - smoothstep (-0.1, 0.5, r - bRd);\n      if (smoothstep (0., 0.1, CrkFun (ro)) < 1.) \n         locLit = max (2. * CrkGlo (ro) / (1. + dot (ro, ro)), locLit);\n    }\n    vn = VaryNf (32. * ro, vn, 0.5);\n    ltDir = normalize (ltPos);\n    att = 0.1 + 0.9 * smoothstep (0.97, 0.995, dot (normalize (ltPos - ro), ltDir));\n    sh = min (att, ObjSShadow (ro + 0.01 * vn, ltDir, length (ltPos - ro)));\n    col = col4.rgb * (0.2 + 0.2 * max (- dot (vn, ltDir), 0.) + 0.8 * sh * max (dot (vn, ltDir), 0.)) +\n       col4.a * step (0.95, sh) * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n    col += 0.6 * vec3 (1., 1., 0.5) * locLit * tLit;\n  } else {\n    col = vec3 (0.02);\n  }\n  pDotR = - dot (roo, rd);\n  rLo = 1.5;\n  rHi = 5.;\n  locLit = 0.;\n  for (float sd = float (VAR_ZERO); sd < 1.6; sd += 1. / 120.) {\n    att = 2. * min (1., 10. / (1. + 200. * sd * sd));\n    db2 = BallHit2 (roo, rd, rLo + (rHi - rLo) * sd);\n    if (db2.x < min (dstObj, dstFar) && db2.x < pDotR) {\n      u = roo + db2.x * rd;\n      if (smoothstep (0., 0.0012 * (db2.x - rLo), CrkFun (u)) < 1.) locLit = max (locLit, CrkGlo (u) * att);\n    }\n    if (db2.y < min (dstObj, dstFar) && db2.y > pDotR) {\n      u = roo + db2.y * rd;\n      if (smoothstep (0., 0.002 * (db2.x - rLo), CrkFun (u)) < 1.) locLit = max (locLit, CrkGlo (u) * att);\n    }\n  }\n  col = mix (col, vec3 (1., 1., 0.5), locLit * tLit);\n  return clamp (col, 0., 1.);\n}\n\n#define AA  0   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr, ltEl, ltAz, todCur;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.05 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.3 * pi * sin (0.03 * pi * tCur);\n    el -= 0.05 * pi * sin (0.02 * pi * tCur);\n  }\n  el = clamp (el, -0.4 * pi, -0.01 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -20.);\n  zmFac = 5.;\n  dstFar = 100.;\n  ltEl = -0.3 * pi * (1. + 0.15 * sin (0.1 * 2. * pi * tCur));\n  ltAz = pi + 0.2 * pi * cos (0.125 * 2. * pi * tCur);\n  ltPos = vec3 (0., 0., 50.);\n  ltPos.yz = Rot2D (ltPos.yz, ltEl);\n  ltPos.xz = Rot2D (ltPos.xz, ltAz);\n  crkOff = mod (floor (0.01 * todCur), 10.);\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (1.)), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (dot (p, cHashVA3) + vec4 (0., cHashVA3.xyz)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}