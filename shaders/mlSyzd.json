{
    "Shader": {
        "info": {
            "date": "1692171642",
            "description": "Yippiiiiii.........",
            "flags": 0,
            "hasliked": 0,
            "id": "mlSyzd",
            "likes": 0,
            "name": "Got It...",
            "published": 3,
            "tags": [
                "firstraymarch"
            ],
            "usePreview": 0,
            "username": "ordii",
            "viewed": 92
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST 0.01\n\n\n\n\nfloat get_dist(vec3 pt){\n    float d_plane = pt.y;\n    vec4 sphere = vec4(0.,1.,6.,1.);\n    float d_sphere = length(sphere.xyz - pt) - sphere.w;\n    return min(d_sphere, d_plane);\n}\n\n\nfloat ray_march(vec3 ro, vec3 rd){\n    float dO = 0.;\n    for (int i = 0; i < MAX_STEPS; i++){\n        vec3 pt = ro + dO*rd;\n        float dS = get_dist(pt);\n        dO += dS;\n        if (dS <= SURF_DIST || dO >= MAX_DIST) break;\n    }\n    return dO;\n\n}\nvec3 get_normal(vec3 pt){\n    vec2 e = vec2(0.01, 0.);\n    vec3 n = get_dist(pt) - vec3(get_dist(pt - e.xyy), get_dist(pt - e.yxy), get_dist(pt - e.yyx));\n    return normalize(n);\n\n\n}\nfloat get_light(vec3 pt){\n    vec3 lightPos = vec3(1.,6.,6.);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 lt_vec = normalize(lightPos - pt);\n    vec3 pt_nml = get_normal(pt);\n    float diff = clamp(dot(lt_vec, pt_nml), 0., 1.);\n    float sh = ray_march(pt+pt_nml*SURF_DIST*2., lt_vec);\n    if (sh < length(lightPos-(pt+pt_nml*SURF_DIST*2.))) diff *= 0.01;\n    return diff;\n }\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.x;\n    vec3 cam = vec3(0.,1.,0.);\n    vec3 camRay = normalize(vec3(uv, 1.));\n    float d = ray_march(cam, camRay);\n    vec3 pt = cam + d*camRay;\n    float diff = get_light(pt);\n    \n    \n    \n    \n    \n    \n    \n    \n\n    // Output to screen\n    //fragColor = vec4(vec3(diff),1.0);\n    fragColor = vec4(vec3(diff),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}