{
    "Shader": {
        "info": {
            "date": "1662436176",
            "description": "just mix the curves and color\nTry to practice what I have learned recently",
            "flags": 0,
            "hasliked": 0,
            "id": "stGcWd",
            "likes": 1,
            "name": "Curves&rainbow",
            "published": 3,
            "tags": [
                "curves",
                "colormix"
            ],
            "usePreview": 0,
            "username": "TomoyaAT",
            "viewed": 186
        },
        "renderpass": [
            {
                "code": "float random(vec2 pos) {\n\treturn fract(1.0 * sin(pos.y + fract(100.0 * sin(pos.x))));\n}\n\nfloat noise(vec2 pos) {\n\tvec2 i = floor(pos);\n\tvec2 f = fract(pos);\n\tfloat a = random(i + vec2(0.0, 0.0));\n\tfloat b = random(i + vec2(1.0, 0.0));\n\tfloat c = random(i + vec2(0.0, 1.0));\n\tfloat d = random(i + vec2(1.0, 1.0));\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat fbm(vec2 pos) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100.0);\n\tmat2 rot = mat2(cos(0.15), sin(0.15), -sin(0.25), cos(0.5));\n\tfor (int i=0; i < 12; i++) {\n\t\tv += a * noise(pos);\n\t\tpos = rot * pos * 2.0 + shift;\n\t\ta *= 0.55;\n\t}\n\treturn v;\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat smoothSquare (float x) {\n\tfloat delta = 0.04;\n\tfloat k = 0.5;\n\tfloat w = fract(x);\n\treturn\n\t\tsmoothstep(k - delta, k, w) *\n\t\t(1. - smoothstep(k, k + delta, w));\n}\n\nfloat lattice (vec2 p) {\n\treturn smoothSquare(p.x) + smoothSquare(p.y);\n}\n\nvec2 translateAndScale (vec2 p, float s) {\n\treturn p * s - s / 2.;\n}\n\nmat2 rotate2d(float alpha){\n\treturn mat2(\n\t\tcos(alpha), -sin(alpha),\n\t\tsin(alpha), cos(alpha)\n\t);\n}\n\nvec2 warp (vec2 p) {\n\tfloat t = 0.1;\n\tfloat r = sin((5. + 15.*sin(iTime/5.))*length(p));\n\tfloat alpha = t * r;\n\treturn rotate2d(alpha) * p;\n}\n\nvec3 field(vec2 p) {\n  float z = lattice(warp(p));\n  return vec3(z, 0., 1. - z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n\tvec2 pos = ( fragCoord.xy / iResolution.xy );\n\n\tvec3 color = vec3( 0.0 ) ;\n\t\n\tpos = warp(pos);\n\t\n\t//text\n\tfloat den = 0.01;\n\tfloat yy = 0.0;\n\t \n\t  for(float i=0. ; i<20. ; i++) {\n\t\t \n\t\t  yy +=2.0;\n\t    if (pos.x > 0.25+den*yy && pos.x < 0.25+den+den*yy || pos.y > 0.25+den*yy && pos.y < 0.25+den+den*yy) \n\t\t    color = 2.*hsv2rgb(vec3(pos.x/pos.y+sin(pos.y),pos.y+0.5,1.-pos.x));\n\t    \n\t  }\n\t \n\t//effect\n\t\n\t\n\t//out\n\tfragColor = vec4( color, 1.0 );\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}