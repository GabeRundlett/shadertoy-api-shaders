{
    "Shader": {
        "info": {
            "date": "1701510655",
            "description": "4",
            "flags": 0,
            "hasliked": 0,
            "id": "ct3BWB",
            "likes": 4,
            "name": "ShaderToy_4_Try",
            "published": 3,
            "tags": [
                "learning"
            ],
            "usePreview": 0,
            "username": "tbx",
            "viewed": 229
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653\n#define COUNT 20.0\n#define CR\n\nfloat line(vec2 st, float width)\n{\n    return smoothstep(width, 0.0, abs(st.y - st.x));\n}\n\nfloat drawCoord(vec2 uv)\n{\n   float x = distance(vec2(uv.x, 0.0), vec2(0.0, 0.0));\n   float y = distance(vec2(0.0, uv.y), vec2(0.0, 0.0));\n   \n   return 1e-3 / x + 1e-3 / y;\n}\n\nfloat sphere(vec2 coord, vec2 p, float radius)\n{\n    float d = distance(p, coord);\n    d = abs(d - radius);\n    return 1e-3 / d;\n}\n\nfloat sphereShape(vec2 coord, vec2 p, float radius)\n{\n    float d = distance(p, coord);\n    d /= radius;\n    d = 1.0 - d;\n    d = clamp(d * 24.0, 0.0, 1.0);\n    return d;\n}\n\nfloat net(vec2 coord)\n{\n    float xline = cos(coord.x * PI * COUNT);\n    xline = step(1.0 - 1e-1, xline);\n    \n    float yline = cos(coord.y * PI * COUNT);\n    yline = step(1.0 - 1e-1, yline);\n    \n    return xline + yline;\n}\n\nfloat QuadrantIV(vec2 coord, float warp)\n{\n    float f = step(0.0, -coord.x);\n    f *= step(0.0, coord.y);\n    return abs(warp - f);\n}\n\nfloat QuadrantII(vec2 coord, float warp)\n{\n    float f = step(0.0, coord.x);\n    f *= step(0.0, -coord.y);\n    return abs(warp - f);\n}\n\nfloat flare( vec2 U )                            \n{\t\n    vec2 A = sin(vec2(0, 1.57) + 0.0);\n    U = abs(U * mat2(A, -A.y, A.x)) * mat2(2,0,1,1.7); \n    return 0.2/max(U.x,U.y);                      // glowing-spiky approx of step(max,.2)\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float asp = iResolution.x / iResolution.y;\n    \n    vec2 coord = uv * 2.0 - 1.0;\n    \n    vec2 aspCoord = vec2(coord.x * asp, coord.y);\n    \n    vec3 col = vec3(0.0);\n    \n    col += net(aspCoord) * 0.125;\n    \n    col += drawCoord(coord);\n    \n    aspCoord *= 6.0;\n    \n    float result = 0.0;\n    float stepSize = 0.152;\n    int maxPointCount = 24;\n    float maxPointCount_f = float(maxPointCount);\n    for(int i = 0; i < maxPointCount; i++)\n    {\n        float istep = float(i);\n        vec2 p = vec2(sin(iTime - istep * stepSize), \n                        cos(iTime * 0.5 - istep * stepSize)) * 3.0;\n        float d = 1.0 - distance(aspCoord, p);\n        d = max(d, 0.0);\n        d = d * d * d * d;\n        float attenuation = (maxPointCount_f - istep) / maxPointCount_f;\n        d *= attenuation;\n        result += d;\n        \n        vec2 pf = aspCoord - p;\n        \n        float flare = flare(pf) * attenuation;\n        result += flare;\n    }\n    \n    col += result * vec3(0.1, 0.3, 0.6);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}