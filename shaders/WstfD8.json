{
    "Shader": {
        "info": {
            "date": "1604977554",
            "description": "Gaussian Filter use the code from: https://www.shadertoy.com/view/ltScRG\nthe XDoG Filter come from: XDoG: An eXtended difference-of-Gaussians compendium including advanced image stylization",
            "flags": 0,
            "hasliked": 0,
            "id": "WstfD8",
            "likes": 4,
            "name": "XDoG",
            "published": 3,
            "tags": [
                "dog",
                "xdog"
            ],
            "usePreview": 0,
            "username": "between",
            "viewed": 502
        },
        "renderpass": [
            {
                "code": "    const int samples = 35,\n              LOD = 2,    // gaussian done on MIPmap at scale LOD\n        sLOD = 1 << LOD;  // tile size = 2^LOD\n    const float sigma = float(samples) * .25;\n    // used in grayScale\n    const highp vec3 W = vec3(0.2125, 0.7154, 0.0721);\n\n    float gaussian(vec2 i) { return exp(-.5 * dot(i /= sigma, i)) / (6.28 * sigma * sigma); }\n\n    vec4 blur(sampler2D sp, vec2 U, vec2 scale) {\n        vec4 O = vec4(0);\n        int s = samples / sLOD;\n\n        for (int i = 0; i < s * s; i++) {\n            vec2 d = vec2(i % s, i / s) * float(sLOD) - float(samples) / 2.;\n            vec4 temp = textureLod(sp, U + scale * d, float(LOD));\n            O += vec4(gaussian(d) * temp);\n        }\n\n        return O / O.a;\n    }\n\n    // XDoG parameters\n    const float Epsilon = 0.01;\n    const float Phi = 200.0;\n    const float Sigma = 0.2;\n    const float k = 1.5;\n    const float p = 0.97;\n\n    void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n        // Normalized pixel coordinates (from 0 to 1)\n        vec2 uv = fragCoord / iResolution.xy;\n\n        // Two Gaussian blur\n        vec3 blurImage1 = blur(iChannel0, uv, vec2(k * Sigma / iResolution)).rgb;\n        vec3 blurImage2 = blur(iChannel0, uv, vec2(Sigma / iResolution)).rgb;\n        blurImage1 = vec3((blurImage1 * W).g);\n        blurImage2 = vec3((blurImage2 * W).g);\n        float diff = blurImage1.r  - p * blurImage2.r;\n\n        if (diff < Epsilon) {\n            diff = 0.0;\n        } else {\n            diff = 0.5 + tanh(Phi * diff);\n        }\n\n        // XDoG\n        fragColor = vec4(vec3(13.0 * (diff)), 1.0);\n\n        // Just DoG\n        // fragColor = vec4(20.0*(blurImage1-blurImage2),1.0);\n    }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}