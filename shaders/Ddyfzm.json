{
    "Shader": {
        "info": {
            "date": "1698042868",
            "description": "fe",
            "flags": 32,
            "hasliked": 0,
            "id": "Ddyfzm",
            "likes": 7,
            "name": "Yukawa Potential Visualize",
            "published": 3,
            "tags": [
                "brownianmotion",
                "randomwalk"
            ],
            "usePreview": 0,
            "username": "minHieu",
            "viewed": 206
        },
        "renderpass": [
            {
                "code": "float get_t() {\n  return 20.*(float(iFrame)*0.005);\n}\n\nvec4 drawBoundary(vec2 uv, vec2 p, vec4 oldCol) {\n    vec2 uv_ = uv - p;\n    float r = length(uv_);\n    float theta = atan(uv_.x, uv_.y);\n    \n    vec4 col = oldCol;\n    if (r > 0.3 && r < 0.305 && sin(40.*theta) > 0.5)\n        col = vec4(0.); \n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = normalize_uv(fragCoord, iResolution.xy);\n    \n    vec4 white = vec4(1.0);\n    vec4 black = vec4(0.0);\n    vec4 green = vec4(0.0476, 0.680, 0.0898,1.0);\n    \n    fragColor = white;\n    if (length(uv-vec2(0.9,0.5)) < 0.3){\n        float mu = length(uv-vec2(0.9,0.5));\n        float sigma = 0.13;\n\n        float g = exp(-(mu*mu)/(2.*sigma*sigma));\n        fragColor = (1.-g)*white + g*green;\n    }\n    \n    fragColor = drawBoundary(uv, vec2(0.9, 0.5), fragColor);\n    fragColor = drawBoundary(uv, vec2(0.1, 0.5), fragColor);\n\n    if (length(uv-vec2(0.1,0.5)) < 0.3){\n        vec2 trace  = texelFetch(iChannel0, ivec2(0,0), 0).xy;\n        float w = min(texelFetch(iChannel1, ivec2(fragCoord), 0).x, 1.);\n        fragColor = w*green + (1.-w)*white;\n        \n        for (int i=0; i < 10; i++) {\n            vec2 walker = texelFetch(iChannel0, ivec2(0,i), 0).xy;\n            float r = length(uv-walker);\n            if (r < 0.01) \n                fragColor = green;\n            if (r > 0.01 && r < 0.015) \n                fragColor = black;\n        }\n    }\n    \n    // fragColor = vec4(1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.14159;\nconst float PI2 = 6.28319;\n\n// misc function \nfloat get_t(float f) {\n  return 20.*fract(float(f)*0.005);\n}\n\n// from Alex Jacobson's Curve Inflation \n// https://www.shadertoy.com/view/7tyyzW\nint  seed = 1;\nvoid srand(int s) {\n    seed = s;\n}\nint randi(void) {\n    seed = seed * 0x343fd + 0x269ec3;\n    return (seed >> 16) & 32767;\n}\nfloat rand(void) {\n    return float(randi())/32767.0;\n}\nint hash( int n ) {\n\tn = (n << 13) ^ n;\n    return n * (n * n * 15731 + 789221) + 1376312589;\n}\nvec2 rand_circ(void) {\n    float theta = PI2*rand();\n    return vec2(cos(theta),sin(theta));\n}\n\nvec2 normalize_uv(vec2 in_uv, vec2 res) {\n    vec2 uv = in_uv/res.xy;\n    if (res.x > res.y) {\n        uv.x *= res.x / res.y;\n        uv.x += .5 * (1. - res.x / res.y);\n    } else {        \n        uv.y *= res.y / res.x;\n        uv.y += .5 * (1. - res.y / res.x);\n    }\n    return uv;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float get_t() {\n  return 40.*(float(iFrame)*0.005);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 q = ivec2(fragCoord);\n    srand(hash(q.x + hash(q.y + hash(iFrame))));\n    \n    vec2 x = normalize_uv(fragCoord, iResolution.xy);\n    float dt = 0.00005;\n    vec2 W = 2.*vec2(rand(),rand())-vec2(1.);\n    vec2 dx = vec2(0.)*dt + sqrt(2.)*sqrt(dt)*W; \n    \n    if (get_t() < 0.3)\n        fragColor = vec4(vec2(0.1,0.5),0.0,1.0);\n    else {\n        vec2 prev_x = texelFetch(iChannel0, ivec2(fragCoord), 0).xy;\n        fragColor = vec4(prev_x + dx,0.0,1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float get_t() {\n  return 20.*(float(iFrame)*0.005);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = normalize_uv(fragCoord, iResolution.xy);\n    \n    fragColor = vec4(0.0);\n    \n    \n    for (int i=0; i < 10; i++) {\n        vec2 walker = texelFetch(iChannel0, ivec2(0,i), 0).xy;\n\n        if (length(uv-walker) < 0.005) {\n            fragColor = vec4(0.03);\n        }\n    }\n    \n    vec4 prev_col = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    fragColor = fragColor += prev_col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}