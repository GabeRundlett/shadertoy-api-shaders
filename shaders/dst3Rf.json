{
    "Shader": {
        "info": {
            "date": "1677645157",
            "description": "Is this what biology feels like?\nLeave suggestions in the comments!",
            "flags": 32,
            "hasliked": 0,
            "id": "dst3Rf",
            "likes": 10,
            "name": "Physarum Microscope Slide",
            "published": 3,
            "tags": [
                "simulation",
                "generative",
                "life",
                "cell",
                "nature",
                "microscope",
                "automaton",
                "biology",
                "physarum",
                "emergence",
                "maxcooper"
            ],
            "usePreview": 0,
            "username": "lukeathedev",
            "viewed": 289
        },
        "renderpass": [
            {
                "code": "// Check 'common' for simulation parameters / constants\n// This is inspired by this paper:\n// https://uwe-repository.worktribe.com/output/980579/characteristics-of-pattern-formation-and-evolution-in-approximations-of-physarum-transport-networks\n// and this shader:\n// https://www.shadertoy.com/view/mlSSWW\n\n// Figuring out how to store agent coordinates in a texture\n// took some effort, add 'C = A(uv)' at the end to get some\n// insight\n\nvoid mainImage(out vec4 C, in vec2 U)\n{\n    vec2 uv = U / R;\n    float d = distance(uv, B(uv).xy + 0.5) * 10.0;\n    C = 1.0 - mix(B(uv), vec4(exp(-d)), 0.5);\n    C = mix(C, vec4(0.7, 0.9, 0.2, 1.0), 0.5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Simulation Parameters (angles in degrees)\n#define SA 12.5 // Sensor Angle\n#define SO 3.0  // Sensor Offset\n#define SS 6.0  // Step Size\n#define RA 22.5 // Rotation Angle\n#define BR 0.97 // Birth Rate\n\n#define A(uv) texture(iChannel0, uv)\n#define B(uv) texture(iChannel1, uv)\n\n#define R  iResolution.xy\n#define F  iFrame\n#define dt iTimeDelta\n\n#define TAU 6.283185\n\nmat2 rmat2(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nfloat rand(vec3 co){ return rand(co.xy+rand(co.z)); }",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Agent map\n// r -> x\n// g -> y\n// b -> rotation\n\n// You can also modify the random functions in the\n// common tab\n#define SEED 0.6828754\n\nvoid mainImage(out vec4 C, in vec2 U)\n{\n    vec2 uv = U / R;\n    vec4 Particle = A(uv);\n    \n    for (int y = -1; y < 2; ++y) {\n        for (int x = -1; x < 2; ++x) {\n            vec4 New = A((U + vec2(x, y)) / R);\n            if (distance(uv, New.xy) < distance(uv, Particle.xy)) {\n                Particle = New;\n            }\n        }\n    }\n    \n    vec4 food = B(uv);\n   \n    if (distance(uv, Particle.xy) > 1.0 - BR) {\n        Particle.z = rand(Particle.xy);\n    }\n        \n    // Motor stage    \n    Particle.xy += rmat2(Particle.z * TAU) * vec2((SS * dt)/min(R.x, R.y));\n    \n    // Sensory stage\n    \n    // Sample food at sensor locations\n    // Not sure angles are correct\n    float sa = SA / 360.0;\n    float so = SO / min(R.x, R.y);\n    float r  = Particle.z * TAU;\n    float fr = B(Particle.xy + rmat2(mod(Particle.z + sa, 1.0) * TAU) * vec2(so)).x;\n    float f  = B(Particle.xy + rmat2(r                              ) * vec2(so)).x;\n    float fl = B(Particle.xy + rmat2(mod(Particle.z - sa, 1.0) * TAU) * vec2(so)).x;\n    \n    float ra = RA / 360.0;\n    \n    if (f > fl && f > fr) {\n        // Stay on same dir\n    }\n    else if (f < fl && f < fr) {\n        Particle.z = Particle.z + (rand(Particle.xy) - 0.5) * 2.0 * ra;\n    }\n    else if (fl < fr) {\n        Particle.z += ra;\n    }\n    else if (fr < fl) {\n        Particle.z -= ra;\n    }\n    \n    Particle.z = mod(Particle.z, 1.0);\n    C = Particle;\n    \n    if (F == 0) {\n        C = vec4(0.5, 0.5, SEED, 1.0);  \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Trail map (where the food is)\n\nvoid mainImage(out vec4 C, in vec2 U)\n{\n    vec2 uv = U / R;\n    vec4 Particle = A(uv);\n    \n    C = B(uv);\n    \n    float d = distance(uv, Particle.xy) * min(R.x, R.y) * 1.45;\n       \n    float avg = 0.0;\n    for (int y = -1; y < 2; ++y) {\n        for (int x = -1; x < 2; ++x) {\n            vec4 neighbor = B((U + vec2(x, y)) / R);\n            avg += neighbor.x;\n        }\n    }\n    \n    C = vec4(avg / 9.0) * 0.998;\n    C += vec4(2.0 * dt * exp(-d*d));\n    C = clamp(C, 0.0, 2.8);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}