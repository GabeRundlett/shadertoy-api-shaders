{
    "Shader": {
        "info": {
            "date": "1551034487",
            "description": "https://www.desmos.com/calculator/wgftq3lfpy",
            "flags": 0,
            "hasliked": 0,
            "id": "wdfSWr",
            "likes": 4,
            "name": "Aurora flower",
            "published": 3,
            "tags": [
                "math",
                "flower",
                "aurora",
                "mandala"
            ],
            "usePreview": 0,
            "username": "WdFGeorge",
            "viewed": 587
        },
        "renderpass": [
            {
                "code": "float flower(float t, float a, float b, float c, float d, float f)\n{   \n    return (a + (b * cos(c * t)) / (d + abs(sin(f * t))));   \n}\n\n\nfloat sigma_delta(float a, float b)\n{\n    return 1.0 - 1.0 / (1.0 + exp(1.0 * (-abs(a - b) + 4.0)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float flower_scale = 4.72;\n    const float flower_amp = 2.0;\n    const float flower_count = 20.0;\n    const float flower_amp_in = 0.284;\n    const float flower_count_in = 6.84;\n    \n    \n    float k_time = sin(iTime * 0.5) * 0.5 + 0.5;\n\n    vec2 pos = fragCoord/iResolution.xy * 2.0 - 1.0;\n    pos.x *= iResolution.x / iResolution.y;\n    pos *= 32.0;\n    float t = atan(pos.x, pos.y);\n    float r0 = length(pos);\n    float rn = 4.0;\n    float rf = flower(t,\n                      14.0,\n                      -2.0,\n                      rn * k_time,\n                      0.1,\n                      2.0 * rn * (1.0 - k_time));\n    float gn = 6.0;\n    float gf = flower(t,\n                      10.0,\n                      2.0,\n                      gn * k_time,\n                      0.2,\n                      2.0 * gn * (1.0 - k_time));\n    float bn = 8.0;\n    float bf = flower(t,\n                      6.0,\n                      -3.0,\n                      bn * k_time,\n                      0.3,\n                      2.0 * bn * (1.0 - k_time));\n    vec3 clr = (sigma_delta(r0, rf) * vec3(0.75, 0.1, 0.3) +\n                sigma_delta(r0, gf) * vec3(0.15, 0.5, 0.1) +\n                sigma_delta(r0, bf) * vec3(0.1, 0.5, 0.4));\n    fragColor = vec4(clamp(clr, 0.0, 1.0), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}