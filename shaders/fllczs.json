{
    "Shader": {
        "info": {
            "date": "1648563745",
            "description": "a bit laggy; i don't know of a more efficient implementation than what i'm doing unfortunately",
            "flags": 0,
            "hasliked": 0,
            "id": "fllczs",
            "likes": 7,
            "name": "distorted grid",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "grid",
                "simplex"
            ],
            "usePreview": 0,
            "username": "oatmealine",
            "viewed": 466
        },
        "renderpass": [
            {
                "code": "#define GRID_COLOR vec3(0.45, 0.01, 0.7)\n#define BG_COLOR vec3(0.07, 0.05, 0.08)\n#define RES_X 256.0\n#define RES_Y ((RES_X/iResolution.x)*iResolution.y)\n#define GRID_SIZE 20.0\n#define XSPEED 0.1\n#define YSPEED 0.05\n#define NOISESPEED 1.2\n\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat drawLine (vec2 p1, vec2 p2, vec2 uv, float a)\n{\n    float r = 0.;\n    float one_px = 0.8 / RES_X; //not really one px\n    \n    // get dist between points\n    float d = distance(p1, p2);\n    \n    // get dist between current pixel and p1\n    float duv = distance(p1, uv);\n\n    //if point is on line, according to dist, it should match current uv \n    r = 1.-floor(1.-(a*one_px)+distance (mix(p1, p2, clamp(duv/d, 0., 1.)),  uv));\n        \n    return r;\n}\n\nvec2 gridpos(int x, int y, float o) {\n    float fracx = 1.0 / (RES_X/GRID_SIZE);\n    float fracy = 1.0 / (RES_Y/GRID_SIZE);\n\n    vec2 offset = vec2(\n        snoise(vec3(float(x) - floor((iTime * XSPEED) / fracx), float(y) - floor((iTime * YSPEED) / fracy), iTime * NOISESPEED)),\n        snoise(vec3(float(x) - floor((iTime * XSPEED) / fracx), float(y) - floor((iTime * YSPEED) / fracy), -iTime * NOISESPEED))\n    );\n    return vec2(\n        float(x) / (RES_X/GRID_SIZE) + mod(iTime * XSPEED, fracx),\n        float(y) / (RES_Y/GRID_SIZE) + mod(iTime * YSPEED, fracy)\n    ) + offset * o;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = vec2(floor(uv.x * RES_X) / RES_X, floor(uv.y * RES_Y) / RES_Y);\n    \n    float amp = (sin(iTime) * 0.5 + 0.5) * 0.2;\n    float line = 0.0;\n    \n    vec2 lowerBound = uv - vec2(amp * 1.1, amp * 1.1);\n    vec2 higherBound = uv + vec2(amp * 1.1, amp * 1.1);\n    \n    int width = int(RES_X/GRID_SIZE);\n    int height = int(RES_Y/GRID_SIZE);\n    \n    \n    \n    for (int x = int(lowerBound.x * float(width)) - 1; x <= int(higherBound.x * float(width)) + 1; x++) {\n        for (int y = int(lowerBound.y * float(height)) - 1; y <= int(higherBound.y * float(height)) + 1; y++) {\n            line += max(drawLine(gridpos(x, y, amp), gridpos(x + 1, y, amp), uv, 1.), 0.0);\n            line += max(drawLine(gridpos(x, y, amp), gridpos(x, y + 1, amp), uv, 1.), 0.0);\n            if (line >= 1.0) break;\n        }\n    }\n    \n    vec3 col = mix(BG_COLOR, GRID_COLOR, min(line, 1.0));\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}