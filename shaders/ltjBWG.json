{
    "Shader": {
        "info": {
            "date": "1517062492",
            "description": "Matrix-based RGB <=> YCoCg color space conversion (e.g. useful for Chrominance Compression at spherical-harmonics-based Global Illumination solutions, see http://jcgt.org/published/0003/04/06/paper.pdf and http://jcgt.org/published/0005/04/02/paper.pdf )",
            "flags": 0,
            "hasliked": 0,
            "id": "ltjBWG",
            "likes": 3,
            "name": "RGB from/to YCoCg color space",
            "published": 3,
            "tags": [
                "rgb",
                "ycocg"
            ],
            "usePreview": 1,
            "username": "BeRo",
            "viewed": 2195
        },
        "renderpass": [
            {
                "code": "\n// Matrix-based RGB from/to YCoCg color space conversion\n\n// Copyright (C) 2014-2018 by Benjamin 'BeRo' Rosseaux\n\n// Because the german law knows no public domain in the usual sense,\n// this code is licensed under the CC0 license \n\n// http://creativecommons.org/publicdomain/zero/1.0/\n\n// It's e.g. useful for Chrominance Compression at spherical-harmonics-based and spherical-gaussians-based\n// Global Illumination solutions, see http://jcgt.org/published/0003/04/06/paper.pdf and\n// http://jcgt.org/published/0005/04/02/paper.pdf\n\nconst mat3 RGBToYCoCgMatrix = mat3(0.25, 0.5, -0.25, 0.5, 0.0, 0.5, 0.25, -0.5, -0.25);\n\nconst mat3 YCoCgToRGBMatrix = mat3(1.0, 1.0, 1.0, 1.0, 0.0, -1.0, -1.0, 1.0, -1.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 c = texture(iChannel0, uv).xyz;\n    vec3 YCoCg = RGBToYCoCgMatrix * c;\n    vec3 RGB = YCoCgToRGBMatrix * YCoCg;\n\tfragColor = vec4(mix(mix(c, YCoCg, step(0.3333, uv.x) * ((sin(iTime * 6.28318 * 0.25) * 0.5) + 0.5)), RGB, step(0.6666, uv.x)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}