{
    "Shader": {
        "info": {
            "date": "1475770924",
            "description": "How to draw stars as in astronomic photos ?\nStars are only a fraction of pixel, but hugely brighter than the max pixel value, plus the lens PSF causes bloom. So the disk you see (L) is just a clamped bloom r~=1/d^2/3, not a projected sphere r~=1/d (R). ",
            "flags": 0,
            "hasliked": 0,
            "id": "Xty3zc",
            "likes": 6,
            "name": "stars - PSF + saturation",
            "published": 3,
            "tags": [
                "star",
                "psf",
                "sensor"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1722
        },
        "renderpass": [
            {
                "code": "// clamp( I0/dist^2*Bessel(r) ) ; Bessel ~ 1/r^3 \n// ->   pix=1 => r = I0^1/3 / dist^2/3\n// graph: see https://www.desmos.com/calculator/6m7cebockb\n// Full telescope PSF + BB emission spectrum: see https://www.shadertoy.com/view/XdsGWs\n\n#define N 4. // oversampling (use power of 2)\n\n#define rnd(U) ( 2.* fract( 4356.17 * sin( 1e4* dot(U, vec2(1,171.3)) )) -1. )\n\nvoid mainImage( out vec4 O, vec2 U0 )\n{\n    float z = 3.+iTime, r;\n    vec2 R = iResolution.xy, U, Ur, Us;\n    U0 =  (2.*U0-R)/R.y;\n\tU = U0 * z;\n    Ur = U+.2*rnd(floor(U)); // local star location\n    \n    O -= O;\n    \n    //if (floor(U)==floor(Ur))\n        for (float x=-1.; x<=1.; x+=1./N)\n            for (float y=-1.; y<=1.; y+=1./N)\n                \n                Us = Ur + vec2(x,y)*z/R.y,\n                r = length( fract(Us)-.5 + floor(Us)-floor(U) ),\n\t            O += U0.x<0. \n                   ? 6e-4/( pow(r/z,3.) * z*z)     // pix = clamp ( Emit/dist^2 * Bessel )\n                   : smoothstep(1.,.8, r*8.);      // pix = disk ( R/dist )\n                 //? 1./( pow(r,3.) * z*z)         \n                 //: smoothstep(1.,.8, r/1.5*z);   \n\n    O *= vec4(1,.5,.2,1) / pow(N+N+1.,2.);         // color and sum normalization       \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}