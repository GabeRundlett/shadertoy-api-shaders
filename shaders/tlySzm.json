{
    "Shader": {
        "info": {
            "date": "1582412922",
            "description": "A quick experiment with colors and music.\n\nMusic : Lightning Moment - DJ Okawari (feat. fox capture plan)",
            "flags": 64,
            "hasliked": 0,
            "id": "tlySzm",
            "likes": 91,
            "name": "Chromatic Resonance",
            "published": 3,
            "tags": [
                "spectrum",
                "visualization",
                "music",
                "colors",
                "vj",
                "sines"
            ],
            "usePreview": 1,
            "username": "PixelPhil",
            "viewed": 5144
        },
        "renderpass": [
            {
                "code": "//\n// Chromatic Resonance by Philippe Desgranges\n// Email: Philippe.desgranges@gmail.com\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n\n#define MUSIC_REACTION 0.2\n\n#define S(a, b, c) smoothstep(a, b, c)\n#define sat(a) clamp(a, 0.0, 1.0)\n\n#define pi 3.14159265359\n#define pi2 (pi * 2.0)\n#define halfPi (pi * 0.5)\n\n\n// Some hash function 2->1\nfloat N2(vec2 p)\n{\t// Dave Hoskins - https://www.shadertoy.com/view/4djSRW\n    p = mod(p, vec2(1456.2346));\n\tvec3 p3  = fract(vec3(p.xyx) * vec3(443.897, 441.423, 437.195));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nfloat CosineInterpolate(float y1, float y2, float t)\n{\n   float mu = (1.0 -cos(t * pi)) * 0.5;\n   return (y1 * (1.0 - mu) + y2 * mu);\n}\n\n// A 2d Noise (Cosine interpolation is more plasing for this effect)\nfloat Noise2(vec2 uv)\n{\n    vec2 corner = floor(uv);\n\tfloat c00 = N2(corner + vec2(0.0, 0.0));\n\tfloat c01 = N2(corner + vec2(0.0, 1.0));\n\tfloat c11 = N2(corner + vec2(1.0, 1.0));\n\tfloat c10 = N2(corner + vec2(1.0, 0.0));\n    \n    vec2 diff = fract(uv);\n    \n    return CosineInterpolate(CosineInterpolate(c00, c10, diff.x), CosineInterpolate(c01, c11, diff.x), diff.y);\n}\n\nfloat LineNoise(float x, float t)\n{\n    float n = Noise2(vec2(x * 0.6, t * 0.2));\n    //n += Noise2(vec2(x * 0.8, t * 0.2 + 34.8)) * 0.5;\n    //n += Noise2(vec2(x * 1.2, t * 0.3 + 56.8)) * 0.25;\n    \n    return n - (1.0) * 0.5;\n}\n\n\nfloat line(vec2 uv, float t, float scroll)\n{\n    \n    float ax = abs(uv.x);\n    uv.y *= 0.5 + ax * ax * 0.3; \n    \n        \n    uv.x += iTime * scroll;\n    \n    float n1 = LineNoise(uv.x, t);\n    \n    \n    float n2 = LineNoise(uv.x + 0.5, t + 10.0) * 2.0;\n    \n    float ay = abs(uv.y - n1);\n    float lum = S(0.02, 0.00, ay) * 1.5;\n    lum += S(1.5, 0.00, ay) * 0.1;\n    \n   \n    float r = (uv.y - n1) / (n2 - n1);\n    float h = sat(1.0 - r);\n    if (r > 0.0) lum = max(lum, h * h * 0.7);\n    \n    return lum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    \n    float xWave = fragCoord.x / iResolution.x;\n    \n    float wave = texture(iChannel0, vec2(xWave * 0.2, 1.0)).r * sin(iTime * 0.2 ) * MUSIC_REACTION;\n    float wave1 = texture(iChannel0, vec2(xWave * 0.2 + 0.2, 1.0)).r * sin(iTime * 0.2 + 0.5) * MUSIC_REACTION;\n    float wave2 = texture(iChannel0, vec2(xWave * 0.2 + 0.4, 1.0)).r * sin(iTime * 0.2 + 1.0) * MUSIC_REACTION;\n    float wave3 = texture(iChannel0, vec2(xWave * 0.2 + 0.6, 1.0)).r * sin(iTime * 0.2 + 1.5) * MUSIC_REACTION;\n    float wave4 = texture(iChannel0, vec2(xWave * 0.2 + 0.8, 1.0)).r * sin(iTime * 0.2 + 2.0) * MUSIC_REACTION;\n    \n  //  fragColor = vec4(lum, lum, lum, 1.0); return;\n    \n\n    float lum = line(uv * vec2(2.0, 1.0)+  vec2(0.0, wave), iTime * 0.3, 0.1) * 0.6;\n    lum += line(uv * vec2(1.5, 0.9) +  vec2(0.33, wave1), iTime * 0.5 + 45.0, 0.15) * 0.5;\n    lum += line(uv * vec2(1.3, 1.2) +  vec2(0.66, wave2), iTime * 0.4 + 67.3, 0.2) * 0.3;\n    lum += line(uv * vec2(1.5, 1.15) +  vec2(0.8, wave3), iTime * 0.77 + 1235.45, 0.23) * 0.43;\n    lum += line(uv * vec2(1.5, 1.15) +  vec2(0.8, wave4), iTime * 0.77 + 456.45, 0.3) * 0.25;\n  \n    \n    float ax = abs(uv.x);\n    \n    lum += ax * ax * 0.05;\n  \n\n    vec3 col;\n    \n    float x = uv.x * 1.2 + iTime * 0.2;\n    \n    vec3 hue = (sin(vec3(x, x + pi2 * 0.33, x + pi2 * 0.66)) + vec3(1.0)) * 0.7;\n    \n\n    // overlay mix\n    float thres = 0.7;\n    if (lum < thres)\n        col = hue * lum / thres;\n    else\n        col = vec3(1.0) - (vec3(1.0 - (lum - thres)) * (vec3(1.0) - hue));\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 21248,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/brella-n-i/lightning-moment-feat-fox"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}