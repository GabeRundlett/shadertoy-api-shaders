{
    "Shader": {
        "info": {
            "date": "1624718226",
            "description": "3d",
            "flags": 0,
            "hasliked": 0,
            "id": "slS3WV",
            "likes": 10,
            "name": "Polyhedron series ",
            "published": 3,
            "tags": [
                "sdf",
                "polyhedron"
            ],
            "usePreview": 0,
            "username": "gaz",
            "viewed": 360
        },
        "renderpass": [
            {
                "code": "#define PI (atan(1.)*4.)\n\nvoid rot(inout vec3 p,vec3 a,float t)\n{\n\ta=normalize(a);\n\tp=mix(a*dot(p,a),p,cos(t))+sin(t)*cross(p,a);\n}\n\n// https://www.shadertoy.com/view/MsKGzw\nvec3 fold(vec3 p, float t)\n{\n    vec3 n=vec3(-.5,-cos(PI/t),0);\n    n.z=sqrt(1.-dot(n,n));         // normalize\n    for(float i=0.; i<t; i++){\n        p.xy=abs(p.xy);\n        p-=2.*min(0.,dot(p,n))*n;\n    }\n    return p;\n}\n\nfloat map(vec3 p)\n{\n\trot(p,vec3(cos(iTime*.3),sin(iTime*.5),.5*sin(iTime*.2)),iTime*.7);\n    float t = float[](3.,4.,5.)[int(fract(iTime/8.)*3.)];\n    p = fold(p,t);\n    p.z-=1.;\n    vec3 n=vec3(-.5,-cos(PI/t),0);\n    n.z=sqrt(1.-dot(n,n));         // normalize\n    return float[](\n            dot(p, normalize(vec3(n.z,0,-n.x))),\n            dot(p, normalize(vec3(0,n.z,-n.y))),\n            length(p.xz)-.1,\n            length(p.yz)-.1\n        )[int(fract(iTime/2.5)*4.)];\n}\n\nvec3 calcNormal(vec3 p)\n{\n  vec3 n=vec3(0);\n  for(int i=0; i<4; i++){\n    vec3 e=.001*(vec3(9>>i&1, i>>1&1, i&1)*2.-1.);\n    n+=e*map(p+e);\n  }\n  return normalize(n);\n}\n\nfloat march(vec3 ro, vec3 rd, float near, float far)\n{\n    float t=near,d;\n    for(int i=0;i<70;i++)\n    {\n        t+=d=map(ro+rd*t);\n        if (d<.001) return t;\n        if (t>=far) return far;\n    }\n    return far;\n}\n\nvec3 doColor(vec3 p)\n{\n    return vec3(.7,.5,.3)+cos(p*2.)*.5+.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy*2.-iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0,0,-5);\n    vec3 rd = normalize(vec3(uv,3));\n    vec3 col= vec3(0);\n\tconst float maxd=50.;\n    float t=march(ro,rd,0.,maxd);\n    if(t<maxd)\n    {\n        vec3 p=ro+rd*t;\n        col=doColor(p); \n        vec3 n=calcNormal(p);      \n\t\tvec3 lightPos=ro+vec3(2,5,2);\n    \tvec3 li=lightPos-p;\n\t\tfloat len=length(li);\n\t\tli/=len;\n\t\tfloat dif=clamp(dot(n,li),0.1,1.);\n        col*=max(dif,0.);\n        float rimd=pow(clamp(1.-dot(reflect(-li,n),-rd),0.,1.),2.5);\n\t\tfloat frn=rimd+2.2*(1.-rimd);\n    \tcol*=frn*.8;\n        col*=max(.5+.5*n.y,.1);\n        col*=exp2(-2.*pow(max(0.,1.-map(p+n*.8)/.8),2.));\n        col+=vec3(.8,.6,.2)*pow(clamp(dot(reflect(rd,n),li),0.,1.),10.);\n    }\n    col=pow(col,vec3(1./2.2));\n    fragColor.xyz=col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}