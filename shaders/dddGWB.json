{
    "Shader": {
        "info": {
            "date": "1677785410",
            "description": "@lsdlive\nCC-BY-NC-SA\n\nSpiral #6\n\nLog-polar coordinates with a diagonal checker.\nInspired by the figure on the right:\nhttps://en.wikipedia.org/wiki/Log-polar_coordinates#Discrete_geometry",
            "flags": 0,
            "hasliked": 0,
            "id": "dddGWB",
            "likes": 15,
            "name": "Spiral #6",
            "published": 3,
            "tags": [
                "spiral",
                "checker",
                "polar",
                "log"
            ],
            "usePreview": 0,
            "username": "lsdlive",
            "viewed": 500
        },
        "renderpass": [
            {
                "code": "/*\n@lsdlive\nCC-BY-NC-SA\n\nSpiral #6\n\nLog-polar coordinates with a diagonal checker.\nInspired by the figure on the right:\nhttps://en.wikipedia.org/wiki/Log-polar_coordinates#Discrete_geometry\n\n*/\n\n#define bpm 120.\n#define speed .5\n#define tiling 4.\n#define line_sz .03\n\n#define AA 4.\n\n#define pi 3.14159265359\n#define time (speed*(bpm/60.)*iTime)\n//#define time (mod(speed*(bpm/60.)*iTime, 2.)) // 2s loop with default settings\n\n// https://lospec.com/palette-list/1bit-monitor-glow\nvec3 col1 = vec3(.133, .137, .137);\nvec3 col2 = vec3(.941, .965, .941);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n\n    float aa_falloff = 12. * pow(1.3 - length(uv), 2.);\n    \n    float angle = atan(uv.y, uv.x) / (pi * .5);\n    float len = log(length(uv));\n    \n    float t1 = fract(time * .25);\n    uv = vec2(angle, len - t1);\n\n    //vec2 flip = step(.5, fract(uv * tiling * .5)) * 2. - 1.;\n    // FabriceNeyret2 suggestion:\n    uv *= tiling;\n    vec2 flip = sign(mod(uv, 2.) - 1.);\n    uv = fract(uv);\n\n    float t2 = fract(time * .5);\n    /*if (uv.x > uv.y) {\n        uv += flip.x * flip.y * t2;\n    } else {\n        uv -= flip.x * flip.y * t2;\n    }*/\n    // FabriceNeyret2 suggestion:\n    uv += flip.x * flip.y * sign(uv.x - uv.y) * t2;\n\n    uv = fract(uv + .5) - .5;\n    uv = abs(uv);\n    float mask = smoothstep(0., aa_falloff * AA / iResolution.x, uv.y - uv.x - line_sz);\n    vec3 col = mix(col1, col2, mask);\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}