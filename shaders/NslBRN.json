{
    "Shader": {
        "info": {
            "date": "1644568448",
            "description": "updated 9/2/23\ncredit to Inigo Quilez for continuous iteration count",
            "flags": 32,
            "hasliked": 0,
            "id": "NslBRN",
            "likes": 7,
            "name": "Whoa is that a Mandelbrot Set?!!",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "mountain"
            ],
            "usePreview": 0,
            "username": "trigophers",
            "viewed": 352
        },
        "renderpass": [
            {
                "code": "vec3 colorize(float its) {\n    float x = mod(its*6.0, 6.0);\n    return vec3((x<4.50)?smoothstep(4.0, 0.4, x):smoothstep(0.0, 1.4, x-4.6),\n                (x<4.25)?smoothstep(2.2, 0.1, x):smoothstep(0.0, 2.1, x-3.9),\n                (x<2.00)?smoothstep(1.1, 0.0, x):smoothstep(0.0, 4.0, x-2.0));\n}\n\nfloat mandelbrot(vec2 c) {\n    vec2 z = c;\n    float i = 0.;\n    for (i; i<512.; i++) {\n        z = vec2(z.x*z.x-z.y*z.y, 2.*z.x*z.y)+c;\n        if (dot(z,z) > 16.0) break;\n    }\n    if (i == 512.) {\n        return -1.;\n    }\n    \n    //iq wrote continuous iteration count\n    return i - log2(log2(dot(z,z))) + 4.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    // Output to screen\n    vec3 col;\n    float di = distance(fragCoord/iResolution.y, vec2(0.5*(iResolution.x/iResolution.y), 0.5));\n \n    vec3 mcol;\n    vec2 tuv = (fragCoord-iResolution.xy/2.)/iResolution.y;\n    float d = iTime/5.;\n    vec2 n = vec2(tuv.x*cos(d)-tuv.y*sin(d), tuv.y*cos(d)+tuv.x*sin(d));\n    float revt = (sin(d)+1.)*7.+8.;\n    float z = (revt*revt/pow(2., revt));\n    float r = mandelbrot(n*z+vec2(-0.167426747312500013323, 1.04127240284375));\n    if (r<0.) {\n        mcol = vec3(0, 0, 0);\n    } else {\n        mcol = vec3(colorize(r/40.0+iTime/24.0));\n    }\n    \n    vec3 tcol = texture(iChannel0, uv).xyz;\n    \n    float s = smoothstep(0.0, 1.0, di);\n\n    fragColor = vec4((1.0-s)*mcol + s*tcol, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159265358979\n\nfloat f(vec2 p, vec2 t) {\n    return cos(t.x+p.y+cos(t.y+PI*p.x));\n}\n\nfloat g(vec2 p, vec2 t) {\n    return cos(t.x+p.x+cos(t.y+PI*p.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 tuv = fragCoord/iResolution.xy;\n    vec3 dat = texture(iChannel0, tuv).xyz;\n    \n    float d = distance(vec2(f(uv*5.+dat.xy+sin(iTime/10.0), vec2(dat.x+dat.y, iTime+dat.x)), g(uv*5.+dat.xz, vec2(iTime/10.0, dat.z))), vec2(0));\n    vec3 col = vec3(d/(2.+dat/3.));\n\n    // Output to screen\n    fragColor = (vec4(col*vec3(dat.y+0.3, dat.z+0.2, dat.x+0.1),1.0)+vec4(dat, 1.0))/2.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}