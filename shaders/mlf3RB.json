{
    "Shader": {
        "info": {
            "date": "1671923400",
            "description": "Using rounding to force images to conform to a given palette",
            "flags": 32,
            "hasliked": 0,
            "id": "mlf3RB",
            "likes": 4,
            "name": "Hue Rounding (Color Harmony)",
            "published": 3,
            "tags": [
                "color",
                "hue",
                "quantization",
                "rounding",
                "harmony",
                "harmony",
                "quantize",
                "truncation"
            ],
            "usePreview": 0,
            "username": "MysteryPancake",
            "viewed": 183
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    // Hue divisions when rounding\n    float divisions = 1.0 + round(mod(iTime * 0.5, 4.0));\n    // Hue rounding (0 = original, 1 = fully rounded)\n    float rounding = cos(iTime * PI) * 0.5 + 0.5;\n    \n    vec4 tex = texture(iChannel0, fragCoord / iResolution.xy);\n    // Convert from RGB to HSV\n    vec3 hsv = rgb2hsv(tex.rgb);\n    // Round hue to nearest color\n    hsv.x = mix(hsv.x, floor(hsv.x * divisions) / divisions, rounding);\n    // Convert back from HSV to RGB\n    fragColor = vec4(hsv2rgb(hsv), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    // UVs for texture (left)\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 noise = texture(iChannel0, uv);\n    \n    // UVs for hue circle (right)\n    vec2 uv2 = (vec2(1.0 / 0.75, 2.0) * fragCoord - iResolution.xy) / iResolution.y;\n    float hue = atan(uv2.x, uv2.y) / TAU;\n    \n    // Split halfway\n    vec3 col = uv.x > 0.5 ? hsv2rgb(vec3(hue, 1.0, 1.0)) : noise.rgb;\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float PI = 3.1415926;\nconst float TAU = 6.28318530;\n\n// From https://www.shadertoy.com/view/lsS3Wc\nvec3 hsv2rgb(vec3 c) {\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\n// From https://www.shadertoy.com/view/lsS3Wc\nvec3 rgb2hsv(vec3 c) {\n    vec4 k = vec4(0.0, -1.0/3.0, 2.0/3.0, -1.0);\n    vec4 p = mix(vec4(c.zy, k.wz), vec4(c.yz, k.xy), (c.z<c.y) ? 1.0 : 0.0);\n    vec4 q = mix(vec4(p.xyw, c.x), vec4(c.x, p.yzx), (p.x<c.x) ? 1.0 : 0.0);\n    float d = q.x - min(q.w, q.y);\n    return vec3(abs(q.z + (q.w - q.y) / (6.0*d)), d / q.x, q.x);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}