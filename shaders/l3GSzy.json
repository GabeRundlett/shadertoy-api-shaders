{
    "Shader": {
        "info": {
            "date": "1720126458",
            "description": "Angled truchets / playing with some moving patterns. Started as an experiment with checking neighbors and ended up as this.",
            "flags": 0,
            "hasliked": 0,
            "id": "l3GSzy",
            "likes": 16,
            "name": "Byt3-daily-006",
            "published": 3,
            "tags": [
                "2d",
                "truchet",
                "pattern",
                "tile"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 159
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n    Byt3-daily-006\n    Angled truchets / playing with some moving patterns. Started as an experiment with\n    checking neighbors and ended up as this.\n     \n    07/04/2024  @byt3_m3chanic\n    \n*/\n\n#define R           iResolution\n#define T           iTime\n#define M           iMouse\n#define PI          3.14159265359\n#define PI2         6.28318530718\n\nmat2 rot(float a) {return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat hash21(vec2 a){ return fract(sin(dot(a,vec2(22.54,35.45)))*4823.232);}\nfloat box(vec2 p, vec2 a) {vec2 q=abs(p)-a;return length(max(q,0.))+min(max(q.x,q.y),0.);}\n\nmat2 r45;\n// @morgan3d https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 uv) {\n    vec2 i = floor(uv),f = fract(uv);\n    float a = hash21(i);\n    float b = hash21(i + vec2(1,0));\n    float c = hash21(i + vec2(0,1));\n    float d = hash21(i + vec2(1,1));\n    vec2 u = f * f * (3.-2.*f);\n    float nn =  mix(a, b, u.x) + (c-a)* u.y * (1.-u.x) + (d-b)* u.x * u.y;\n    if(uv.y<1. && uv.y>-1.&&a>.5) nn = 0.;\n    return nn;\n}\n\nvec3 truchet(vec2 p) {\n    vec2 uv = p;\n    uv *= 12.; uv -= vec2(T*.75,.85*sin(T*.4));\n    \n    vec2 id = floor(uv), q = fract(uv)-.5, suv = q;\n    float hs = hash21(id);\n\n    const float sx = .35;\n    // cheap check of the hood\n    float ns = noise(id*sx);\n    vec4 hhs = vec4(\n        noise((id.xy+vec2(0,-1))*sx),\n        noise((id.xy+vec2(1,0))*sx),\n        noise((id.xy+vec2(0,1))*sx),\n        noise((id.xy+vec2(-1,0))*sx)\n    );\n    \n    float rnd = fract(hs*4324.79);\n    if(rnd>.5) q.xy*= rot(1.5707);\n    \n    const float pf = .353, wd = .13;\n    vec2 q2 = q; q *= r45;\n    \n    // main pattern\n    float pq = length(q.x+pf)<length(q.x-pf)? q.x+pf : q.x-pf;\n    float d = length(pq);\n    d = abs(d) - wd;\n    \n    // alt pattern\n    if(hs>.65) {\n        d = min(length(q2.x),length(q2.y))-(wd*1.4);\n        float xd = length(abs(q2.x)-(wd*1.5))-(wd*.12);\n        d = max(d,-xd);\n    }\n\n    // edge block check and patterns\n    const float thr = .35;\n    if(ns<thr) {\n        d = 1.;\n        // prob could do better with logic but first stab at it..\n        if(rnd>.5) { q2.xy*= rot(-1.5707); }\n        if(hhs.x>thr) d = min(min(box(q2+vec2(0,.5),vec2(wd*1.4)),length(q2+vec2(0,.32))-(wd*1.4)), d);\n        if(hhs.z>thr) d = min(min(box(q2-vec2(0,.5),vec2(wd*1.4)),length(q2-vec2(0,.32))-(wd*1.4)), d);\n        if(hhs.y>thr) d = min(min(box(q2-vec2(.5,0),vec2(wd*1.4)),length(q2-vec2(.32,0))-(wd*1.4)), d);\n        if(hhs.w>thr) d = min(min(box(q2+vec2(.5,0),vec2(wd*1.4)),length(q2+vec2(.32,0))-(wd*1.4)), d);\n        \n        float ck = mod(id.y+id.x,2.);\n        if(hhs.x<thr&&hhs.y>thr&&hhs.z<thr&&hhs.w<thr&&ck<1.) d = min(box(q2-vec2(.2,0),vec2(wd*3.4,wd*1.4)),length(q2+vec2(.2,0))-(wd*1.4));\n        if(hhs.x<thr&&hhs.y<thr&&hhs.z>thr&&hhs.w<thr&&ck<1.) d = min(box(q2-vec2(0,.2),vec2(wd*1.4,wd*3.5)),length(q2+vec2(0,.2))-(wd*1.4));\n        if(hhs.x<thr&&hhs.y<thr&&hhs.z<thr&&hhs.w>thr&&ck<1.) d = min(box(q2+vec2(.2,0),vec2(wd*3.4,wd*1.4)),length(q2-vec2(.2,0))-(wd*1.4));\n        if(hhs.x>thr&&hhs.y<thr&&hhs.z<thr&&hhs.w<thr&&ck<1.) d = min(box(q2+vec2(0,.2),vec2(wd*1.4,wd*3.4)),length(q2-vec2(0,.2))-(wd*1.4));\n      \n        if(hhs.z>thr&&hhs.x>thr&&hhs.y<thr&&hhs.w<thr) d = length(abs(q2.x))-(wd*1.39);\n        if(hhs.w>thr&&hhs.y>thr&&hhs.x<thr&&hhs.z<thr) d = length(abs(q2.y))-(wd*1.39);\n        \n        if(hhs.x>thr&&hhs.y>thr&&hhs.z<thr&&hhs.w<thr) d = rnd<.5? abs(length(q.y+pf) ) - wd : abs(length(q.x+pf) ) - wd;\n        if(hhs.z>thr&&hhs.w>thr&&hhs.x<thr&&hhs.y<thr) d = rnd<.5? abs(length(q.y-pf) ) - wd : abs(length(q.x-pf) ) - wd;\n        if(hhs.w>thr&&hhs.x>thr&&hhs.z<thr&&hhs.y<thr) d = rnd>.5? abs(length(q.y-pf) ) - wd : abs(length(q.x+pf) ) - wd;\n        if(hhs.z>thr&&hhs.y>thr&&hhs.w<thr&&hhs.x<thr) d = rnd>.5? abs(length(q.y+pf) ) - wd : abs(length(q.x-pf) ) - wd;\n    }\n\n    return vec3(d,uv);\n}\n\nvoid mainImage( out vec4 O, in vec2 F ) {\n    r45 = rot(.7853981634);\n    \n    vec2 uv = (2.*F-R.xy)/max(R.x,R.y); \n    float px = fwidth(uv.x); \n\n\n    vec3 C = mix(vec3(.1),vec3(.5),clamp((uv.y+.5),0.,1.));\n    \n    vec3 dt = truchet(uv);\n    vec3 st = truchet(uv+vec2(uv.x/8.,uv.y/6.));\n    float d = dt.x;\n    float s = st.x;\n\n    // prep background and domain\n    const float sc = 42.;\n    vec2 id = floor(uv*sc);\n    float hs = hash21(id);\n    uv.x += .15*sin(id.y*.133+T*.66);\n    \n    id = floor(uv*sc);\n    uv = fract(uv*sc)-.5;\n    \n    // background dots\n    float d2 = length(uv)-.3;\n    if(mod(id.x+id.y,2.)<1.){\n    C = mix(C,vec3(.3),smoothstep(px,-px,d2));\n    C = mix(C,mix(vec3(.2),vec3(.6),uv.y),smoothstep(px,-px,abs(d2)-.035));\n    }\n\n    // truchet and accent\n    C = mix(C,C*.65,smoothstep(.1+px,-px,s+.01));\n    C = mix(C,C*.45,smoothstep(.05+px,-px,d-.04));\n    C = mix(C,clamp(C+.3,vec3(0),vec3(1)),smoothstep(px,-px,d));\n    C = mix(C,mix(vec3(0),vec3(.65),.5+.5*sin(dt.z*PI2+T*2.)),smoothstep(px,-px,abs(d+.02)-.02));\n\n    // gamma and output\n    C = pow(C,vec3(.4545));\n    O = vec4(C,1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}