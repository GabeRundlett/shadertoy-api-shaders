{
    "Shader": {
        "info": {
            "date": "1713570887",
            "description": "visuals for >. leino site",
            "flags": 0,
            "hasliked": 0,
            "id": "MftXzr",
            "likes": 9,
            "name": ">. leino visuals",
            "published": 3,
            "tags": [
                "simplexnoise",
                "asciiart"
            ],
            "usePreview": 0,
            "username": "juk",
            "viewed": 229
        },
        "renderpass": [
            {
                "code": "precision mediump float;\n\n#define PI 3.14159265359\n#define TAU 6.28318530718\n\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n\nvec4 permute(vec4 x) {\n    return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v){ \n    const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i  = floor(v + dot(v, C.yyy));\n    vec3 x0 =   v - i + dot(i, C.xxx);\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy);\n    vec3 i2 = max( g.xyz, l.zxy);\n\n    //  x0 = x0 - 0. + 0.0 * C \n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n    // Permutations\n    i = mod(i, 289.0); \n    vec4 p = permute(permute(permute( \n        i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n        i.y + vec4(0.0, i1.y, i2.y, 1.0)) +\n        i.x + vec4(0.0, i1.x, i2.x, 1.0)\n    );\n\n    // Gradients\n    // ( N*N points uniformly over a square, mapped onto an octahedron.)\n    float n_ = 1.0/7.0; // N=7\n    vec3  ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z); // mod(p,N*N)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ ); // mod(j,N)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot(m*m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\n// Bitmap to ASCII (not really) fragment shader by movAX13h, September 2013\n// This is the original shader that is now used in PixiJs, FL Studio and various other products.\n\n// Here's a little tool for new characters: thrill-project.com/archiv/coding/bitmap/\n\nfloat character(int n, vec2 p) {\n\tp = floor(p*vec2(-4.0, 4.0) + 2.5);\n    \n    if (clamp(p.x, 0.0, 4.0) == p.x) {\n        if (clamp(p.y, 0.0, 4.0) == p.y) {\n        \tint a = int(round(p.x) + 5.0 * round(p.y));\n            \n\t\t\tif (((n >> a) & 1) == 1) return 1.0;\n\t\t}\t\n    }\n\treturn 0.0;\n}\n\nvec3 image(vec2 coord){\n    vec2 aspect;\n    \n    if(iResolution.x > iResolution.y) {\n        aspect = vec2(iResolution.x / iResolution.y, 1.0);\n    } else { \n        aspect = vec2(iResolution.y / iResolution.x, 1.0);\n    }\n    \n    vec2 uv0 = coord.xy / iResolution.xy * aspect;\n    vec2 muv = iMouse.xy / iResolution.xy * aspect;\n    \n    //\n    \n    float noiseStrength = 0.16;\n    float noiseScale = 0.5;\n    \n    float speed = 0.1;\n    float noiseTime = iTime * speed;\n    \n    float noise = snoise(vec3(uv0 * noiseScale - noiseTime, noiseTime));\n    \n    uv0.x += noiseStrength * sin(noise * TAU);\n    uv0.y += noiseStrength * cos(noise * TAU);\n    \n    muv.x += noiseStrength * sin(noise * TAU);\n    muv.y += noiseStrength * cos(noise * TAU);\n    \n    //\n    \n    float strength =  0.6;\n\n    vec2 diff = uv0 - muv;\n    float distance = length(diff);\n\n    float scale = -smoothstep(\n        0.0,\n        1.0,\n        max(\n            0.,\n            1. - abs(distance)\n        )\n    );\n\n    vec2 fishUv = muv + normalize(diff) * scale;\n    \n    uv0 = uv0 * (1.0 - strength) + fishUv *  strength;\n    \n    //\n    \n    // Fork of \"Creation by Silexars\" by Danguafer. https://shadertoy.com/view/XsXXDn\n    // http://www.pouet.net/prod.php?which=57245\n    // If you intend to reuse this shader, please add credits to 'Danilo Guanabara'\n\n    vec3 c;\n    float l, z = iTime;\n    \n\tfor(int i = 0; i < 3; i++) {\n\t\tvec2 uv, p = uv0;\n\n\t\tp -= aspect/2.0;\n\t\tz += .03;\n        \n\t\tl = length(p);\n\t\tuv += p / l * (sin(z)+1.)*abs(sin(l*9.-z-z));\n\t\tc[i] = .05/length(mod(uv,1.)-.5);\n\t}\n    \n\treturn vec3(c/l);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    vec2 pix = fragCoord.xy;\n\tvec3 col = image(floor(pix/16.0)*16.0);\t\n\t\n\tfloat gray = 0.3 * col.r + 0.59 * col.g + 0.11 * col.b;\n\t    \n    // limited character set 5x5px\n    \n\tint n = 0;                            //   0px    \n\tif (gray > 4.0 / 25.0) n = 4;         // . 1px (bg tuned to 4/25)\n\tif (gray > 5.0 / 25.0) n = 8521864;   // > 5px\n\tif (gray > 8.0 / 25.0) n = 17318430;  // l 8px\n\tif (gray > 9.0 / 25.0) n = 14815374;  // i 9px\n\tif (gray > 12.0 / 25.0) n = 15255086; // o 12px\n    if (gray > 13.0 / 25.0) n = 18667121; // n 13px\n\tif (gray > 15.0 / 25.0) n = 33059359; // e 15px\n\n\tvec2 p = mod(pix/8.0, 2.0) - vec2(1.0);\n    \n    col = gray * vec3(character(n, p));\n\n\tfragColor = vec4(col, 1.0);\n    // fragColor = vec4(image(fragCoord.xy), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}