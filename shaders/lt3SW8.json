{
    "Shader": {
        "info": {
            "date": "1479223881",
            "description": "Went fishing in the \"Kelp Forest\". Look what I caught  (mouse enabled).",
            "flags": 0,
            "hasliked": 0,
            "id": "lt3SW8",
            "likes": 9,
            "name": "Fishbowl 2",
            "published": 3,
            "tags": [
                "fish",
                "opticts"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 745
        },
        "renderpass": [
            {
                "code": "// \"Fishbowl 2\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Fish model based on \"Kelp Forest\" by Martijn Steinrucken aka BigWings\n// (https://www.shadertoy.com/view/llcSz8)\n\nfloat Hashfv2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm2 (vec2 p);\nvec2 Rot2D (vec2 q, float a);\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrEllipsDf (vec3 p, vec3 r);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Length4 (vec2 p);\n\nstruct {\n  vec3 vSc;\n  float dBody, dDors, dTail, dMouth;\n} fh;\n\nconst float pi = 3.14159;\nmat3 fishMat;\nvec3 fishPos, qHit, sunDir, waterDisp;\nfloat tCur, dstFar, bowlRad, bowlHt;\nbool inBowl, chkBowl;\nint idObj;\nconst int idVWall = 1, idHWall = 2, idTbl = 3, idBowl = 4, idFish = 5;\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  vec2 p;\n  if (rd.y >= 0.) {\n    col = vec3 (0.1, 0.2, 0.4) + 0.2 * pow (1. - rd.y, 8.) +\n       0.35 * pow (max (dot (rd, sunDir), 0.), 6.);\n    col = mix (col, vec3 (1.), clamp (0.1 +\n       0.8 * Fbm2 (0.01 * tCur + 3. * rd.xz / max (rd.y, 0.001)) * rd.y, 0., 1.));\n  } else {\n    p = ro.xz - (ro.y + 2. * bowlRad - 1.) * rd.xz / rd.y;\n    col = 0.7 * mix (vec3 (0.4, 0.5, 0.1), vec3 (0.5, 0.6, 0.2),\n       Fbm2 (0.11 * p)) * (1. - 0.05 * Noisefv2 (5. * p));\n    col = mix (col, vec3 (0.35, 0.45, 0.65), pow (1. + rd.y, 5.));\n  }\n  return col;\n}\n\nvec4 HexGrdCol (vec2 p)\n{\n  p *= 0.85;\n  p.y /= sqrt (0.75);\n  p.x += 0.5 * mod (floor (p.y), 2.);\n  p = abs ((fract (p) - 0.5));\n  return mix (vec4 (0.8, 0.8, 0.7, 0.1), vec4 (0.5, 0.5, 0.45, 0.4),\n     smoothstep (0.05, 0.1, abs (p.x + max (p.x, 1.5 * p.y) - 1.)));\n}\n\nvec3 WoodCol (vec3 p, vec3 n)\n{\n  float f;\n  p *= 5.;\n  f = dot (vec3 (Fbm2 (p.yz * vec2 (1., 0.1)),\n     Fbm2 (p.xz * vec2 (1., 0.1)), Fbm2 (p.yx * vec2 (1., 0.1))), abs (n));\n  return mix (vec3 (0.8, 0.5, 0.3), vec3 (0.55, 0.35, 0.1), f);\n}\n\nfloat WaterHt (vec3 p)\n{\n  float ht, w, wb;\n  wb = 1.414;\n  p *= 0.05;\n  ht = 0.;\n  w = wb;\n  for (int j = 0; j < 4; j ++) {\n    w *= 0.5;\n    p = wb * vec3 (p.y + p.z, p.z - p.y, 2. * p.x);\n    p += waterDisp;\n    ht += w * abs (Noisefv3 (p) - 0.5);\n  }\n  return 0.1 * ht;\n}\n\nvec3 WaterNf (vec3 p)\n{\n  vec2 e = vec2 (0.001, 0.);\n  float h;\n  h = WaterHt (p);\n  return normalize (vec3 (h - WaterHt (p + e.xyy), e.x, h - WaterHt (p + e.yyx)));\n}\n\nfloat TableDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, d1, d2, br, bl, sFac;\n  sFac = 2.5;  br = 1.6 * sFac;  bl = 1.1 * sFac;\n  p -= vec3 (0., - 2.2 * sFac - 0.01 * br, 0.);\n  q = p;\n  q.y -= - 0.55 * br;\n  d = PrCylDf (q.xzy, 0.5 * br, 0.03 * br);\n  p.xz += 0.05 * br * vec2 (1., 1.5);\n  q = p;  q.y -= - 1.4 * bl;\n  d1 = PrCylDf (q.xzy, 0.07 * br, 0.6 * bl);\n  q = p;  q.y -= - 2. * bl;\n  d2 = max (PrCylDf (q.xzy, 0.5 * br, 0.15 * br * (1. -\n     0.7 * smoothstep (0.2 * br, 0.35 * br, length (p.xz)))), -0.05 * br - q.y);\n  d = min (d, min (d1, d2));\n  if (d < dMin) { dMin = d;  idObj = idTbl;  qHit = q; }\n  return dMin;\n}\n\nfloat BowlWlDf (vec3 p, float dMin)\n{\n  float d, db;\n  db = Length4 (vec2 (length (p.xz), p.y));\n  d = inBowl ? max (max (db - 1.03 * bowlRad, p.y - bowlHt),\n     - max (db - bowlRad, p.y - bowlHt)) : max (db - bowlRad, p.y - bowlHt);\n  if (d < dMin) { dMin = d;  qHit = p;  idObj = idBowl; }\n  return dMin;\n}\n\nfloat ScalesHt (vec2 uv)\n{\n  vec4 ds, scl, g;\n  float s;\n  uv -= floor (uv);\n  ds = vec4 (length (uv - vec2 (1., 0.5)), length (uv - vec2 (0.5, 1.)),\n     length (uv - vec2 (0.5, 0.)), length (uv - vec2 (0., 0.5)));\n  scl = uv.x + vec4 (-0.5, 0., 0., 0.5) - 2. * ds;\n  g = smoothstep (0.45, 0.5, ds);\n  s = (1. - g.x) * scl.x;\n  s = (s - scl.y) * g.y + scl.y;\n  s = (s - scl.z) * g.z + scl.z;\n  s = (s - scl.w) * g.w + scl.w;\n  return -0.01 * s;\n}\n\nfloat ScalesSh (vec2 uv, float rnd)\n{\n  vec4 ds, scl, g;\n  vec2 uvi;\n  float s;\n  uvi = floor (uv);\n  uv -= uvi;\n  ds = vec4 (length (uv - vec2 (1., 0.5)), length (uv - vec2 (0.5, 1.)),\n     length (uv - vec2 (0.5, 0.)), length (uv - vec2 (0., 0.5)));\n  scl.x = Hashfv2 (uvi + vec2 (0., rnd));\n  scl.y = scl.x;\n  scl.z = Hashfv2 (uvi + vec2 (0., rnd - 1.));\n  scl.w = Hashfv2 (uvi + vec2 (-1., rnd));\n  g = smoothstep (0.45, 0.5, ds);\n  s = (1. - g.x) * scl.x;\n  s = (s - scl.y) * g.y + scl.y;\n  s = (s - scl.z) * g.z + scl.z;\n  s = (s - scl.w) * g.w + scl.w;\n  return s;\n}\n\nfloat WSmoothMin (float a, float b, float r, float f, float m)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  r *= 1. + cos (h * f) * m;\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat FishDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 r;\n  float fScale, dCheek, dEye, dSnout, dGill, dAnal, dPect, dPelv, dScales,\n     dBump, mask, a, d;\n  fScale = 2.;\n  p.xz = vec2 (- p.z, p.x);\n  p *= fScale;\n  p -= vec3 (-1.3, 0., 0.);\n  p.z += sin (p.x - tCur * 3.) * 0.15;\n  p.z = abs (p.z);\n  qHit = p;\n  dBump = 0.;\n  dCheek = SmoothMin (PrEllipsDf (p - vec3 (-1., 0., 0.25), vec3 (0.4, 0.4, 0.2)),\n     PrEllipsDf (p - vec3 (-1., 0., -0.25), vec3 (0.4, 0.4, 0.2)), 0.2);\n  dEye = PrEllipsDf (p - vec3 (-1., 0., 0.4), vec3 (0.25, 0.25, 0.09));\n  dSnout = PrEllipsDf (p - vec3 (-1.2, -0.2, 0.), vec3 (0.6, 0.4, 0.2));\n  q = p - vec3 (-1.2, -0.6, 0.);\n  q.xy = Rot2D (q.xy, 0.35);\n  fh.dMouth = WSmoothMin (\n     PrEllipsDf (q - vec3 (-0.3, 0.15, 0.), vec3 (0.36, 0.12, 0.18)),\n     PrEllipsDf (q, vec3 (0.6, 0.12, 0.24)), 0.03, 15., 0.1);\n  dSnout = SmoothMin (dSnout, fh.dMouth, 0.1);\n  q = p - vec3 (-1., 0., 0.);\n  fh.vSc = vec3 (8. * p.x + 16., 20. * atan (q.y, q.z) / pi + 0.5, 0.3);\n  dScales = ScalesHt (fh.vSc.xy) * smoothstep (0.33, 0.45, dEye) *\n     (1. - smoothstep (1.2, 1.8, dEye)) * smoothstep (-0.3, 0., p.x);\n  q = p - vec3 (-0.7, -0.25, 0.2);\n  q.xz = Rot2D (q.xz, -0.4);\n  dGill = PrEllipsDf (q, vec3 (0.8, 0.72, 0.12));\n  fh.dTail = PrEllipsDf (p - vec3 (4.5, 0.1, 0.), vec3 (0.5, 1., 0.1));\n  r = p.xy - vec2 (3.8, 0.1);\n  a = atan (r.x, r.y);\n  mask = SmoothBump (0.45, 2.9, 0.2, a) * smoothstep (0.04, 1., dot (r, r));\n  dBump += sin (a * 70.) * 0.005 * mask;\n  fh.dTail += mask * (sin (a * 5.) * 0.03 + sin (a * 280.) * 0.001) + dBump;\n  a = atan (p.x, p.y);\n  dBump += SmoothBump (-0.2, 3., 0.2, p.x) * (sin (a * 100.) * 0.003 +\n     (1. - pow (sin (a * 50.) * 0.5 + 0.5, 15.)) * 0.015 + sin (a * 400.) * 0.001);\n  fh.dDors = SmoothMin (PrEllipsDf (p - vec3 (1.5, 1., 0.), vec3 (1.5, 0.5, 0.1)),\n     PrEllipsDf (p - vec3 (0.5, 1.5, 0.), vec3 (0.5, 0.5, 0.05)), 0.1) + dBump;\n  dAnal = PrEllipsDf (p - vec3 (2.6, -0.7, 0.), vec3 (1., 0.35, 0.05)) +\n     sin (a * 300.) * 0.001 + sin (a * 40.) * 0.01;\n  q = p - vec3 (0.7, -0.6, 0.52);\n  r = p.xy - vec2 (0.3, -0.4);\n  a = atan (r.x, r.y);\n  q.yz = Rot2D (q.yz, -0.2);\n  q.xz = Rot2D (q.xz, -0.2);\n  dPect = PrEllipsDf (q, vec3 (0.4, 0.2, 0.04)) +\n     (sin (a * 10.) * 0.01 + sin (a * 100.) * 0.002) *\n     SmoothBump (1.5, 2.9, 0.1, a) * smoothstep (0.01, 0.36, dot (r, r));\n  q = p - vec3 (0.9, -1.1, 0.2);\n  q.xy = Rot2D (q.xy, 0.4);\n  q.yz = Rot2D (q.yz, 0.4);\n  r = p.xy - vec2 (0.5, -0.9);\n  a = atan (r.x, r.y);\n  dPelv = PrEllipsDf (q, vec3 (2., 1., 0.2) * 0.2) +\n     (sin (a * 10.) * 0.01 + sin (a * 60.) * 0.002) *\n     SmoothBump (1.5, 2.9, 0.1, a) * smoothstep (0.01, 0.16, dot (r, r));\n  fh.dBody = SmoothMin (dCheek, dSnout, 0.3);\n  fh.dBody = SmoothMin (SmoothMin (fh.dBody,\n     PrEllipsDf (p - vec3 (0.6, -0., 0.), vec3 (2., 1., 0.5)), 0.15),\n     PrEllipsDf (p - vec3 (2.4, 0.1, 0.), vec3 (1.8, 0.6, 0.24)), 0.3) + dScales;\n  fh.dBody = WSmoothMin (fh.dBody, dGill, 0.1, 15., 0.1);\n  d = SmoothMin (fh.dBody, min (min (min (min (dPect, dPelv), fh.dTail), fh.dDors),\n     dAnal), 0.05);\n  d = 0.8 * WSmoothMin (d, dEye, 0.01, 6., 1.) / fScale;\n  if (d < dMin) { dMin = d;  qHit = p;  idObj = idFish; }\n  return dMin;\n}\n\nfloat BowlExtDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  q = p;  q.y -= -2.72 * bowlRad + 11.2;  q.z -= 1.15 * bowlRad;\n  d = PrBoxDf (q, vec3 (2.4, 1.33, 0.01) * bowlRad);\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idVWall; }\n  q = p;  q -= vec3 (0., -2. * bowlRad + 1., 1.2 * bowlRad);\n  d = max (PrCylDf (q.xzy, 2.4 * bowlRad, 0.01 * bowlRad), q.z + 0.2);\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idHWall; }\n  q = p;  q.y -= - bowlHt + 5.1;\n  dMin = TableDf (q, dMin);\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin;\n  dMin = dstFar;\n  if (chkBowl) dMin = BowlWlDf (p, dMin);\n  else if (inBowl) dMin = FishDf (fishMat * (p - fishPos), dMin);\n  else dMin = BowlExtDf (p, dMin);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  int idObjT;\n  idObjT = idObj;\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  idObj = idObjT;\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 FishCol ()\n{\n  vec3 col, colTop, colBot, colBody, colHead, colMouth, colFin, colEye, pEye;\n  float spec, aEye, sEye;\n  pEye = qHit - vec3 (-1., 0., 0.4);\n  aEye = atan (pEye.x, pEye.y);\n  sEye = length (pEye);\n  if (sEye > 0.26) {\n    colBot = vec3 (1., 0.2, 0.);\n    colTop = 0.8 * colBot;\n    colFin = vec3 (1., 0.5, 0.);\n    colMouth = 1.5 * colBot;\n    colBody = mix (colTop, colBot, 1. - smoothstep (-0.2, 0.4, qHit.y) +\n       ScalesSh (fh.vSc.xy, fh.vSc.z));\n    colHead = mix (colTop, colBot, smoothstep (0., 0.5, sEye) *\n       smoothstep (0.5, 1.1, sEye));\n    colHead += 0.05 * (sin (aEye * 20. + sEye) *\n       sin (aEye * 3. - sEye * 4.) * (sin (sEye * 10.) + 1.));\n    colHead = mix (colMouth, colHead, smoothstep (0., 0.2, fh.dMouth));\n    col = mix (colFin, mix (colBody, colHead, smoothstep (0.8, 1., fh.dTail)),\n       clamp (1. - (fh.dBody - 0.01) * 50., 0., 1.)) *\n       (0.125 * (sin (sEye * 5.) + 1.) * (sin (fh.dDors * 10.) + 1.) + 0.5);\n  } else {\n    colEye = vec3 (0.8, 0.2, 0.6);\n    col = colEye + sin (aEye * 2. * pi + 0.3) * sin (aEye * pi) * 0.1;\n    col *= smoothstep (0.13, 0.15, sEye) *\n       (1.25 - smoothstep (0.19, 0.25, sEye));\n  }\n  return col;\n}\n\nvec4 ObjCol (vec3 n)\n{\n  vec4 col;\n  if (idObj == idVWall) col = HexGrdCol (qHit.xy);\n  else if (idObj == idHWall) col = 0.7 * HexGrdCol (qHit.xz);\n  else if (idObj == idTbl) col = vec4 (WoodCol (qHit, n), 0.2);\n  else if (idObj == idFish) col = vec4 (FishCol (), 1.);\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 roW, rdW, rdd, vn, vnW, colD, colR, qHitBowl, reflCol;\n  float dstObj, dstBowl, dstBowlW, yLim, frnl, eta;\n  int hitBowl;\n  bool bWallHit;\n  eta = 1.33;\n  yLim = 0.999 * bowlHt;\n  inBowl = false;\n  chkBowl = true;\n  dstBowl = ObjRay (ro, rd);\n  hitBowl = -1;\n  if (dstBowl < dstFar) {\n    hitBowl = idObj;\n    qHitBowl = qHit;\n  }\n  chkBowl = false;\n  dstObj = ObjRay (ro, rd);\n  roW = ro;\n  rdW = rd;\n  dstBowlW = dstBowl;\n  reflCol = vec3 (1.);\n  frnl = 0.;\n  bWallHit = (dstBowl < dstObj && hitBowl > 0);\n  if (bWallHit) {\n    ro += dstBowl * rd;\n    chkBowl = true;\n    vn = (qHitBowl.y < yLim) ? ObjNf (ro) : WaterNf (qHitBowl);\n    vnW = vn;\n    frnl = (qHitBowl.y > - yLim) ? abs (dot (rd, vn)) : 0.;\n    rd = refract (rd, vn, 1. / eta);\n    ro += 0.01 * rd;\n    inBowl = true;\n    dstBowl = ObjRay (ro, rd);\n    hitBowl = -1;\n    if (dstBowl < dstFar) {\n      hitBowl = idObj;\n      qHitBowl = qHit;\n    }\n    chkBowl = false;\n    dstObj = ObjRay (ro, rd);\n    if (dstBowl < dstObj && hitBowl > 0) {\n      ro += dstBowl * rd;\n      chkBowl = true;\n      vn = (qHitBowl.y < yLim) ? ObjNf (ro) : - WaterNf (qHitBowl);\n      rdd = refract (rd, vn, eta);\n      if (length (rdd) > 0.) {\n        rd = rdd;\n        reflCol *= vec3 (0.9, 1., 0.9);\n        inBowl = false;\n      } else rd = reflect (rd, vn);\n      ro += 0.01 * rd;\n      chkBowl = false;\n      dstObj = ObjRay (ro, rd);\n    }\n  }\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    chkBowl = false;\n    vn = ObjNf (ro);\n    objCol = ObjCol (vn);\n    colD = reflCol * (objCol.rgb * (0.2 + 0.8 * max (dot (vn, sunDir), 0.) +\n       objCol.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.)));\n  } else colD = reflCol * BgCol (ro, rd);\n  colR = vec3 (0.);\n  reflCol = vec3 (1.);\n  if (bWallHit) {\n    ro = roW + dstBowlW * rdW;\n    rd = (frnl > 0.) ? reflect (rdW, vnW) : rdW;\n    ro += 0.01 * rd;\n    inBowl = false;\n    chkBowl = false;\n    dstObj = ObjRay (ro, rd);\n    if (dstObj < dstFar) {\n      ro += rd * dstObj;\n      vn = ObjNf (ro);\n      objCol = ObjCol (vn);\n      colR = reflCol * (objCol.rgb * (0.2 + 0.8 * max (dot (vn, sunDir), 0.) +\n         objCol.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.)));\n    } else colR = reflCol * BgCol (ro, rd);\n  }\n  frnl = (eta != 1. && frnl > 0.) ? 1. - pow (frnl, 4.) : 0.;\n  return clamp (mix (colD, colR, smoothstep (0.98, 1., frnl)), 0., 1.);\n}\n\nvec3 FishTrack (float t)\n{\n  return 0.6 * bowlRad * vec3 (cos (0.5 * t),\n     0., - sin (0.5 * t)) + bowlHt * vec3 (0., -0.2 + 0.7 * sin (0.077 * t), 0.);\n}\n\nvoid FishPM (float t)\n{\n  vec3 vel;\n  float a, ca, sa, dt;\n  dt = 1.;\n  fishPos = FishTrack (t);\n  vel = (FishTrack (t + dt) - FishTrack (t - dt)) / (2. * dt);\n  a = atan (vel.z, vel.x) - 0.5 * pi;\n  ca = cos (a);\n  sa = sin (a);\n  fishMat = mat3 (ca, 0., - sa, 0., 1., 0., sa, 0., ca);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  bowlRad = 5.;\n  bowlHt = 2.5;\n  dstFar = 60.;\n  FishPM (tCur);\n  waterDisp = 0.1 * tCur * vec3 (1., 0., 1.);\n  el = 0.;\n  az = 0.;\n  zmFac = 8.;\n  if (mPtr.z > 0.) {\n    el = clamp (el + 3. * mPtr.y, -1.4, 1.1);\n    az = clamp (az + 3. * mPtr.x, -1.5, 1.5);\n  } else {\n    zmFac = clamp (zmFac - 2. + 0.4 * tCur, 3., 7.);\n    el += pi * (0.3 - 0.65 * SmoothBump (0.25, 0.75, 0.25,\n       mod (0.071 * tCur + 0.4 * pi, 2. * pi) / (2. * pi)));\n    az += 0.55 * pi * (1. - 0.5 * abs (el)) * sin (0.21 * tCur);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  ro = vuMat * vec3 (0., 0., -40.);\n  sunDir = normalize (vec3 (0., 1., -0.8));\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (pow (clamp (col, 0., 1.), vec3 (0.7)), 1.);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, cHashA3.xy)) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t1, t2;\n  vec3 ip, fp;\n  float q;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  q = dot (ip, cHashA3);\n  t1 = Hashv4f (q);\n  t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n              mix (mix (t2.x, t2.y, fp.x), mix (t2.z, t2.w, fp.x), fp.y), fp.z);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + vec2 (- q.y, q.x) * sin (a);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrEllipsDf (vec3 p, vec3 r)\n{\n  return (length (p / r) - 1.) * min (r.x, min (r.y, r.z));\n}\n\nfloat Length4 (vec2 p)\n{\n  p *= p;\n  p *= p;\n  return pow (p.x + p.y, 1. / 4.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}