{
    "Shader": {
        "info": {
            "date": "1617983896",
            "description": "Big up to evvvvil and flopine, a lot of hour learning on their stream <3\n\nOh yeah, PEGI 18:  zero optimization, dirty code and yolo implementation",
            "flags": 0,
            "hasliked": 0,
            "id": "Ns23WV",
            "likes": 2,
            "name": "大龙猫 - Mineraball",
            "published": 3,
            "tags": [
                "3d",
                "ball",
                "mineral"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 255
        },
        "renderpass": [
            {
                "code": "#define fGlobalTime iTime\nfloat box(vec3 p, vec3 b){\n    vec3 q = abs(p)-b;\n    return length(max(q,vec3(.0)));\n  }\n mat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\nfloat sdf(vec3 p){    \n  \n  p.xz *=rot(cos(fGlobalTime*.3)*3.1415*.5);\n  p.yz *=rot(sin(fGlobalTime)*.2);\n  vec3 op = p;\n\n\n  float q = 10000.;\n  for(float i = 0.;i<=4.;i++){\n    p.xy = abs(p.xy)-vec2(.5*(1.-i/5.),.3*(1.-i/5.));\n  \n    p.xz = p.x < p.z ? p.xz :p.zx;\n    p.yz = p.y < p.z ? p.yz :p.zy;\n    p.xy *= p.x < p.y ? rot(fGlobalTime*.0-1.66) : rot(1.166*i*.1); \n      p.xy *= 1.5+(i*.2);\n    p.xz *= p.x < p.y ? rot(-1.66) : rot(1.166*i*.1); \n  \n    \n    float h = box(p,vec3(.8));\n    float t = length(p)-1.;\n    if(mod(i,2.)==0.){\n    q = min(q,mix(t,h,.5+i*.1)/10.);\n    } else { q = max(q,-mix(t,h,.5)/10.);\n    }\n  }\n  float z = length(op)-.85432508097;\n  float zz = abs(box(abs(op)-.8,vec3(.351)))-.09;\n  float vv = max(z,-zz);\n  \n  float trans = smoothstep(0.1,0.5,sin(fGlobalTime + atan(op.z,op.y) )*.5+.5)*1.01;\n  q = mix(vv,q*2.,max(0.3,.85*trans))/.8;\n  \n  return q;\n  }\n vec2 nv= vec2(.00001,0.);\n  vec3 norm(vec3 p){\n      float d = sdf(p);\n      //return  normalize(vec3(sdf(p+nv.xyy)-sdf(p-nv.xyy),sdf(p+nv.yxy)-sdf(p-nv.yxy),sdf(p+nv.yyx)-sdf(p-nv.yyx)));\n      return normalize(vec3(d-sdf(p-nv.xyy),d-sdf(p-nv.yxy),d-sdf(p-nv.yyx)));\n    }\nvec2 raym(vec3 ro,vec3 rd,int stp, inout  vec3 rp){\n\n      float td = 0.;\n  for(int i=0;i<=stp;i++){\n         float d = sdf(rp);\n         if(d <= 0.00001) return vec2(td,1.);\n         td += d;\n         \n         rp = ro + rd*td;\n         \n    }\n    return vec2(td,0.);\n    \n  }\n  \n  vec3 pal(float t){\n    return .5+.5*cos(2.*3.141592*(1.*t+vec3(.0,.3,.7)));\n    }\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n   vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  vec2 puv = uv;\n\tuv -= 0.5;\n\tuv /= vec2(iResolution.y / iResolution.x, 1);\n  \n\nvec3 ro=vec3(0.,0.,-4.),rd=vec3(uv,1.),rp=ro;\n  \tvec3 col = vec3(.1);\n  \n  vec2 td = raym(ro,rd,69*2,rp);\n  vec3 n = norm(rp);\nvec3 light = vec3(1.,1.,-5.5);\n  if(td.y == 1.){\n        float lamb =max(0.,dot(normalize(light),n));\n       float spec = 0.0;\n        float ld= pow(length(light - rp),2.);\n        if(lamb > 0.){\n         \n            vec3 viewDir = normalize(rp);\n            // BlinPhong\n            vec3 halfDir = normalize(light+viewDir);\n            float specAngle = max(dot(halfDir,n),0.);\n            spec = pow(specAngle,16.);\n        }\n    \n        col = col\n        + vec3(.1,.3,.5)* lamb *vec3(1.,.7,1.)* 20. / (ld)\n        + vec3(1.) * spec  *  pal(td.x+.5+length(rp*.09))* 20. / (ld)\n        ;\n         col*=col;\n        //col = pow(col, vec3(1.0 / 2.2)); \n    }\n    \n     \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}