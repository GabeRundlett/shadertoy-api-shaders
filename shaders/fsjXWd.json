{
    "Shader": {
        "info": {
            "date": "1621308096",
            "description": "Click and drag the mouse to add more chemical B. Play with a few variables in Buffer A.\n\nA reaction-diffusion simulation using the Gray-Scott model.\n\nResources used:\n * https://www.karlsims.com/rd.html\n * https://www.youtube.com/watch?v=BV9ny785UNc",
            "flags": 32,
            "hasliked": 0,
            "id": "fsjXWd",
            "likes": 7,
            "name": "chemistry!",
            "published": 3,
            "tags": [
                "2d",
                "simulation",
                "buffer"
            ],
            "usePreview": 0,
            "username": "pugbyte",
            "viewed": 329
        },
        "renderpass": [
            {
                "code": "// All the interesting bits are in Buffer A.\n//\n// Tips:\n//   \n//   Click and drag to add more of chemical B.\n//   Disable auto draw by setting enable_auto_painter to 0.\n//   The simulation constants are very finicky.\n\n\n// All components are in the range [0â€¦1], including hue.\n// https://stackoverflow.com/a/17897228\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 maphsv(float v) {\n    float hue = v;\n    \n    vec3 hsv = vec3(hue, .93, .92);\n    \n    //if (hue < 0.1) {\n    //    hsv = mix(vec3(0), hsv, hue/.1);\n    //}\n    \n    if (v > 0.8) {\n        hsv = mix(hsv, vec3(.87, .90, .6), (v-.8)/.1);\n    }\n    \n    return hsv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 cell = texelFetch(iChannel0, ivec2(fragCoord), 0).xy;\n    vec3 col = vec3(cell.x - cell.y);\n    \n    vec3 hsv = maphsv(clamp(cell.x - cell.y, 0., 1.));\n    \n    col = hsv2rgb(hsv);\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Tips:\n//   \n//   Click and drag to add more of chemical B.\n//   Disable auto draw by setting enable_auto_painter to 0.\n//   The simulation constants are very finicky.\n\n// Play with brush size\nfloat brush_size = 20.0;\nfloat initial_blob_size = 50.0;\nint enable_auto_painter = 1;\nfloat auto_painter_brush_size = 10.0;\n\n// Small tweaks in these variables have a large, often bad, effect.\nfloat da = 1.0; // Diffusion rate of a\nfloat db = 0.5; // Diffusion rate of b\nfloat f = 0.055; // Feed rate\nfloat k = 0.062; // Kill rate\nfloat delta = 1.0;\n\n#define PI 3.14159\n#define TAU (2.0*PI)\n\nvec2 get_cell(ivec2 pos)\n{\n    return texelFetch(iChannel0, pos, 0).rg;\n}\n\nvec2 laplacian(ivec2 pos)\n{    \n    vec2 sum = vec2(0.);\n    sum += get_cell(pos + ivec2(-1, 1)) * 0.05;\n    sum += get_cell(pos + ivec2(-1, 0)) * 0.2;\n    sum += get_cell(pos + ivec2(-1, -1)) * 0.05;\n    \n    sum += get_cell(pos + ivec2(0, 1)) * 0.2;\n    sum += get_cell(pos + ivec2(0, 0)) * -1.;\n    sum += get_cell(pos + ivec2(0, -1)) * 0.2;\n    \n    sum += get_cell(pos + ivec2(1, 1)) * 0.05;\n    sum += get_cell(pos + ivec2(1, 0)) * 0.2;\n    sum += get_cell(pos + ivec2(1, -1)) * 0.05;\n    \n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 0) {\n        // Initialize buffer with chemical a.\n        fragColor = vec4(1.0,0.0,0.0,1.0);\n        \n        vec2 center = iResolution.xy * 0.5;\n        if (length(fragCoord - center) < initial_blob_size) {\n            fragColor = vec4(0.0,1.0,0.0,1.0);\n        }\n        return;\n    } else if (iMouse.z > 0.) {\n        // Click and drag mouse to add chemical b.\n        float dist = length(iMouse.xy - fragCoord);\n        if (dist < brush_size) {\n            fragColor = vec4(0.0,1.0,0.0,1.0);\n            return;\n        }\n    }\n    \n    if (enable_auto_painter > 0) {\n        \n    \n        vec2 pos;\n        \n        if (iTime < TAU) {\n            pos = vec2(sin(iTime), cos(iTime)) * iResolution.xy*0.3 + iResolution.xy*0.5;\n        } else if (iTime < 2.*TAU) {\n            pos = vec2(-sin(iTime), -cos(iTime)) * iResolution.xy*0.2 + iResolution.xy*0.5;\n        } else if (iTime < 3.*TAU) {\n            pos = vec2(sin(-iTime), cos(-iTime)) * iResolution.xy*0.4 + iResolution.xy*0.5;\n        }\n        \n        float dist = length(pos - fragCoord);\n        if (dist < auto_painter_brush_size) {\n            fragColor = vec4(0.0,1.0,0.0,1.0);\n            return;\n        }\n    }\n    \n    // Reaction-Diffusion simulation using Gray-Scott model\n    // https://www.karlsims.com/rd.html\n    ivec2 pos = ivec2(fragCoord);\n    \n    vec2 cell = get_cell(pos);\n    float a = cell.r;\n    float b = cell.g;\n    \n    vec2 l = laplacian(pos);\n    float la = l.r;\n    float lb = l.g;\n    \n    float a_prime = a + (da * la - a * b * b + f * (1. - a)) * delta;\n    float b_prime = b + (db * lb + a * b * b - (k + f) * b) * delta;\n    \n    a_prime = clamp(a_prime, 0., 1.);\n    b_prime = clamp(b_prime, 0., 1.);\n    \n    fragColor = vec4(a_prime, b_prime, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}