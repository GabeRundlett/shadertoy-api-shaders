{
    "Shader": {
        "info": {
            "date": "1477061542",
            "description": "Stanley Donwood's bear\nmusic: [url=https://www.youtube.com/watch?v=cedNya7e8Uc]Radiohead's cover of Ceremony by Joy Division[/url]",
            "flags": 64,
            "hasliked": 0,
            "id": "XtGGW3",
            "likes": 9,
            "name": "Modified Bear",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "drawing",
                "bear",
                "radiohead",
                "joydivision"
            ],
            "usePreview": 0,
            "username": "s23b",
            "viewed": 747
        },
        "renderpass": [
            {
                "code": "#define GLOW 1\n#define NEGATIVE 0\n#define GAMMA_CORRECT 1\n#define MASK_ONLY 0\n#define ADD_NOISE 1\n\n#define saturate(x) clamp(x, 0., 1.)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n#define PI 3.14159265359\n\nfloat spikes(float x, float t) {\n    x = abs(fract(x) - .5) * 1. - .5 + t;\n    return x < 0. ? 0. : smoothstep(0., t, x);\n}\n\nfloat circle(vec2 p, float r) {\n    return length(p) - r;\n}\n\nfloat rect(vec2 p, vec2 s) {\n    vec2 a = abs(p) - s;\n    return a.x < 0. || a.y < 0. ? max(a.x, a.y) : length(a);\n}\n\nfloat opU(float a, float b) {\n    return min(a, b);\n}\n\nfloat opS(float a, float b) {\n    return max(a, -b);\n}\n\nfloat bear(vec2 p) {\n    float d = circle(p, 1.);\n    \n    // draw ears\n    float earSize = .6;\n    vec2 earPos = vec2(.7);\n    float ear = circle(p - earPos, earSize);\n    float inEar = circle(p - earPos, earSize- .1);\n    inEar = opS(inEar, circle(p - earPos, earSize- .2));\n    ear = opS(ear, inEar);\n    ear = opS(ear, circle(p - earPos, earSize- .3));\n    d = opU(d, ear);\n    \n    // substract face\n    d = opS(d, circle(p, .9));\n    \n    // substract inside of ears on the top\n    d = opS(d, opS(inEar, p.y - earPos.y));\n    \n    // draw eyes\n    float eyeSize = .49;\n    vec2 eyePos = vec2(.45, .2);\n    d = opU(d, circle(p - eyePos, eyeSize));\n    d = opS(d, circle(p - eyePos, eyeSize - .1));\n    \n    // draw pupil\n    float pupilAngle = PI / 2. * (.9 - spikes(iTime / 6.4, .02) * .8);\n    d = opU(d, rect(p - eyePos, vec2(cos(pupilAngle), sin(pupilAngle)) * (eyeSize)));\n    \n    // draw mouth\n    float mouthPos = eyePos.y - eyeSize + .04;\n    vec2 mouthSize = vec2(1.2, .05);\n    d = opU(d, rect(p - mouthPos, mouthSize));\n    \n    // draw teeth\n    d = opU(d, rect(p * rot(.3) - vec2(.28, -.54), vec2(.05, .4))); \n    d = opU(d, rect(p * rot(-.3) - vec2(.13, -.62), vec2(.05, .35))); \n    d = opU(d, rect(p * rot(.3) - vec2(.63, -.38), vec2(.05, .35))); \n    d = opU(d, rect(p * rot(-.5) - vec2(.39, -.68), vec2(.05, .21))); \n    \n    return d;\n}\n\n// interpolates between two closest fft samples with given resolution\nfloat fft(float t, float resolution) {\n    return mix(\n        texture(iChannel0, vec2(floor(t * resolution) / resolution, .25)).x,\n        texture(iChannel0, vec2(floor(t * resolution + 1.) / resolution, .25)).x,\n        fract(t * resolution));\n}\n\nfloat hash(vec2 uv) {\n    float f = fract(cos(sin(dot(uv, vec2(.009123898, .00231233))) * 480.512353) * 11111.5452313);\n    return f;\n}\n\nfloat noise(vec2 uv) {\n    vec2 fuv = floor(uv);\n    vec4 cell = vec4(\n        hash(fuv + vec2(0, 0)),\n        hash(fuv + vec2(0, 1)),\n        hash(fuv + vec2(1, 0)),\n        hash(fuv + vec2(1, 1))\n    );\n    vec2 axis = mix(cell.xz, cell.yw, fract(uv.y));\n    return mix(axis.x, axis.y, fract(uv.x));\n}\n\n// noise that flows arpind the center\nfloat fbm(vec2 uv) {\n    float f = 0.;\n    float r = 1.;\n    for (int i = 0; i < 8; ++i) {\n        uv *= rot(iTime / 10.);\n        f += noise((uv + float(i) / 10.) * r) / (r *= 2.);\n    }\n    return f / (1. - 1. / r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 p = vec2(abs(uv.x), uv.y + .13) * 1.3;\n    \n\tfloat d = bear(p);\n    \n    // add distortion\n    #if ADD_NOISE\n    d += (.5 - fbm(uv * 10.)) * .05;\n    d -= (fft(atan(p.x,p.y) / PI, 10.) - .2) * .05 * smoothstep(0., 1., length(p));\n    #endif\n    \n    // create outline\n    float w = fwidth(d);\n    float mask = smoothstep(-w, w, d); \n    \n    // add glow\n    #if GLOW\n    float glow = pow(100., -d) * (.05 + smoothstep(.0, .5, texture(iChannel0, vec2(.6, .25)).x) * .25);\n\tmask = saturate(mask - glow);\n    #endif\n    \n    #if MASK_ONLY\n    fragColor = vec4(mask);\n    \n    #else\n    // create background flow\n    uv *= 2.;\n    vec4 flow = vec4(fbm(uv), fbm(uv * rot(1.)), fbm(uv * rot(2.)), 1);\n    flow = floor(flow * 16.) / 16.;\n    \n    \n    // apply mask\n    fragColor = mix(flow, vec4(1), mask);\n\n    #if NEGATIVE\n    fragColor = 1. - fragColor;\n    #endif\n\n    #if GAMMA_CORRECT\n    fragColor = pow(fragColor, vec4(.4545));\n    #endif\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 5139,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/kasafero/radiohead-ceremony-joy-division-cover"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}