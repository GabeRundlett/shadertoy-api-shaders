{
    "Shader": {
        "info": {
            "date": "1466412159",
            "description": ".",
            "flags": 0,
            "hasliked": 0,
            "id": "ldKXWG",
            "likes": 30,
            "name": " hexagonal tiling 7",
            "published": 3,
            "tags": [
                "2d",
                "pattern",
                "tiling",
                "hexagonal",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1200
        },
        "renderpass": [
            {
                "code": "// relying on hexagonal tiling tutos            https://www.shadertoy.com/view/4dKXR3\n//    https://www.shadertoy.com/view/XdKXz3 and https://www.shadertoy.com/view/lsKSRt\n\nvoid mainImage( out vec4 O, vec2 uv )\n{ \n    vec2 R = iResolution.xy,\n         U = uv = (uv-R/2.)/R.y * 5. *  1.73/2.;          // centered coords\n    \n    U *= mat2(1,-1./1.73, 0,2./1.73);                     // conversion to\n    vec3 g = vec3(U, 1.-U.x-U.y), g2,                     // hexagonal coordinates\n         id = floor(g);                                   // cell id\n    \n    g = fract(g); g.z = 1.-g.x-g.y;                       // triangle coords     \n    g2 = abs(2.*g-1.);                                    // distance to borders\n\n    U = id.xy * mat2(1,.5, 0,1.73/2.);\n    float l00 = length(U-uv),                    // screenspace distance to nodes\n          l10 = length(U+vec2(1,0)-uv), \n          l01 = length(U+vec2(.5,1.73/2.)-uv),\n          l11 = length(U+vec2(1.5,1.73/2.)-uv),\n            l = min(min(l00, l10), min( l01, l11)); // closest node: l=dist, C=coord\n    vec2 C = U+ ( l==l00 ? vec2(0) : l==l10 ? vec2(1,0) : l==l01 ? vec2(.5,1.73/2.) : vec2(1.5,1.73/2.) );\n    U = uv-C;\n    float  s = 2.*mod(ceil(C.x+C.y),2.)-1.,\n           r = length(U)/(1.73/2.)*3.,\n           a = atan(U.y,U.x) - 3.*iTime;\n            //  spiral                   // fade with radius   // rainbow color scheme\n    O = pow(.5+.5*s*sin(8.*log(r)+a),1.) * exp(-.3*r*r) * sin(r+vec4(1,2.1,-2.1,0));\n    // variant:  .5*(    ...      s*a\n\n    \n/*\n    U = (g.xy-ceil(1.-g.z)/3.) * mat2(1,.5, 0,1.73/2.);   // screenspace local coords (centered)\n          r = length(U)/(1.73/2.)*3., // discs r=1 in contact     // to polar coords\n          a = atan(U.y,U.x) - iTime*sign(g.z); \n\n    O = pow(.5+.5*sign(g.z)*sin(4.*log(r)+a),10.) +O-O;\n*/\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}