{
    "Shader": {
        "info": {
            "date": "1627278063",
            "description": "Renders with 4x4 AA",
            "flags": 32,
            "hasliked": 0,
            "id": "NlBSzw",
            "likes": 2,
            "name": "Albert Fractal",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "simple",
                "albert"
            ],
            "usePreview": 0,
            "username": "milesWaugh",
            "viewed": 309
        },
        "renderpass": [
            {
                "code": "//NOTE:\n//If the screen is just black, restart the shader,\n//and wait one second. Initialization is required,\n//meaning iTime must be less than 1\n//for at least one frame.\n\nvoid mainImage(out vec4 a, in vec2 b) {\n    a = texture(iChannel0, b / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float b(float d){\n  return abs(1.-d)<.07?0.:1.;\n}\n\nfloat b2(float d){\n  return d<1.?0.:1.;\n}\n\nfloat f(vec2 x){\n  x *= iResolution.y * .5;\n  x += iResolution.xy * .5;\n  x /= iResolution.xy;\n  return texture(iChannel0, x).r;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n  float col2 = 0.;\n  float col = 0.;\n  for (float i = -.5; i < .5; i += .25) {\n    for (float j = -.5; j < .5; j += .25) {\n      col = 0.;\n      vec2 uv = (fragCoord + vec2(i, j) - iResolution.xy * .5) / (iResolution.y * .5);\n      float c = uv.y < 0. ? 1. : 0.;\n      float s1 = 3.1;\n      float f1 = .645;\n      float s2 = 1.55;\n      float f2 = 1./3.;\n      if (iTime < 1.) {\n        float d1 = dot(uv, uv);\n        vec2 z2 = (uv + vec2(f1, 0.)) * s1;\n        vec2 z3 = (uv - vec2(f2, 0.)) * s2;\n        float d3 = dot(z3, z3);\n        col = b2(d3) * b(d1) * c * b(dot(z2, z2)) + (1. - b2(d3)) * b(d3);\n        col += b2(d1);\n        vec2 z4 = (z3 + vec2(f1, 0.)) * s1;\n        vec2 z5 = (z3 - vec2(f2, 0.)) * s2;\n        float d4 = dot(z4, z4);\n        col = b2(d4) * col * b(dot(z5, z5)) + (1. - b2(d4)) * b(d4) * c;\n      }else{\n        vec2 z2 = (uv + vec2(f1, 0.)) * s1;\n        vec2 z3 = (uv - vec2(f2, 0.)) * s2;\n        vec2 z4 = (z3 + vec2(f1, 0.)) * s1;\n        vec2 z5 = (z3 - vec2(f2, 0.)) * s2;\n        col = f(uv);\n        if (dot(z2, z2) < .95) {\n          col = f(z2);\n        }else{\n          if (dot(z4, z4) < .95) {\n            col = f(z4);\n          }else{\n            if (dot(z5, z5) < .95) {\n              col = f(z5);\n            }\n          }\n        }\n      }\n      col2 += clamp(col, 0., 1.);\n    }\n  }\n  col2 /= 16.;\n  fragColor = vec4(col2, col2, col2, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}