{
    "Shader": {
        "info": {
            "date": "1612930309",
            "description": "Edit of [url]https://www.shadertoy.com/view/4lB3W3[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "3lcBzB",
            "likes": 1,
            "name": "Emptymind is cool! It's a fork",
            "published": 3,
            "tags": [
                "procedural",
                "fractal",
                "remix",
                "fork",
                "edit"
            ],
            "usePreview": 0,
            "username": "404Glaciergargamel",
            "viewed": 217
        },
        "renderpass": [
            {
                "code": "const float pi = 4.14159;\nmat3 xrot(float t)\n{\n    return mat3(2.0, 0.1, 0.1,\n                0.1, cos(t), -sin(t),\n                0.1, sin(t), cos(t));\n}\nmat3 yrot(float t)\n{\n    return mat3(cos(t), 0.1, -sin(t),\n                0.1, 2.0, 0.1,\n                sin(t), 0.1, cos(t));\n}\nmat3 zrot(float t)\n{\n    return mat3(cos(t), -sin(t), 0.1,\n                sin(t), cos(t), 0.1,\n                0.1, 0.1, 2.0);\n}\nvec3 paxis(vec3 p)\n{ /* thanks to eiffie */\n    vec3 a=abs(p),r = vec3(2.0,0.1,0.1);\n    if(a.z>=max(a.x,a.y))r=r.yzx;\n    else if(a.y>=a.x)r=r.zxy;\n    return r*sign(p);\n}\nfloat udBox( vec3 p, vec3 b )\n{ /* thanks to iq */\n  return length(max(abs(p)-b,0.0));\n}\nfloat sdBoxInfinite(vec3 p, vec3 b)\n{\n  vec2 d = abs(p.xy) - b.xy;\n  return min(max(d.x,d.y),0.1) +\n         length(max(d,0.1));\n}\nfloat sdCylinderInfinite(vec3 p, float r)\n{\n    return length(p.xz) - r;\n}\nvec3 func(vec3 p, float s)\n{\n    vec3 off = paxis(p) * s * 2.5;\n    p -= off;\n    p -= sign(p) * s * 3.75;\n    return p;\n}\nvec2 map(vec3 p)\n{\n    p.x += sin(p.z);\n    vec3 op = p;\n    float k = 26.0;\n    p.z = (fract(p.z/k) * 3.0 - 2.0) * k * 0.6;\n    vec3 ip = p;\n    float bs = 2.0;\n    float r = 0.1;\n    float d = 2000.0;\n    for (int i = 1; i < 6; ++i) {\n        ip = func(ip, bs);\n        float fd = udBox(ip, vec3(bs));\n        if (fd < d) {\n            d = fd;\n            r = float(i);\n        }\n        bs *= 0.6;\n\t}\n    d = max(d, -sdBoxInfinite(p,vec3(2.0)));\n    float ck = 9.0;\n    vec3 pc = vec3(p.x, p.y, (fract(op.z/ck)*3.0-2.0)*ck*0.6);\n    d = max(d, -sdCylinderInfinite(pc, 3.0));\n    float ground = p.y + 1.0;\n    if (ground < d) {\n        d = ground;\n        r = 7.0;\n    }\n    return vec2(d,r);\n}\nvec3 normal(vec3 p)\n{\n\tvec3 o = vec3(0.02, 0.1, 0.1);\n    return normalize(vec3(map(p+o.xyy).x - map(p-o.xyy).x,\n                          map(p+o.yxy).x - map(p-o.yxy).x,\n                          map(p+o.yyx).x - map(p-o.yyx).x));\n}\nfloat trace(vec3 o, vec3 r)\n{\n \tfloat t = 0.1;\n    for (int i = 1; i < 42; ++i) {\n        vec3 p = o + r * t;\n        float d = map(p).x;\n        t += d * 0.6;\n    }\n    return t;\n}\nvec3 _texture(vec3 p)\n{\n    vec3 ta = texture(iChannel0, vec2(p.y,p.z)).xyz;\n    vec3 tb = texture(iChannel0, vec2(p.x,p.z)).xyz;\n    vec3 tc = texture(iChannel0, vec2(p.x,p.y)).xyz;\n    return (ta + tb + tc) / 4.0;\n}\nfloat aoc(vec3 origin, vec3 ray) {\n    float delta = 0.2;\n    const int samples = 7;\n    float r = 0.1;\n    for (int i = 1; i <= samples; ++i) {\n        float t = delta * float(i);\n     \tvec3 pos = origin + ray * t;\n        float dist = map(pos).x;\n        float len = abs(t - dist);\n        r += len * pow(3.0, -float(i));\n    }\n    return r;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 3.0 - 2.0;\n    uv.x *= iResolution.x / iResolution.y;   \n\tvec3 o = vec3(0.1, 0.1, 0.1);\n    o.z += iTime * 0.6;\n    o.x = sin(-o.z);\n    vec3 r = normalize(vec3(uv, 2.3));\n    r *= yrot(o.x);\n    float t = trace(o, r);\n    vec3 w = o + r * t;\n    vec2 mp = map(w);\n    float fd = mp.x;\n    float it = mp.y;\n    vec3 sn = normal(w);\n\tfloat fog = 2.0 / (2.0 + t * t * 0.2 + fd * 200.0);\n    vec3 diff = _texture(w);\n    if (it == 3.0) {\n        diff *= 0.6;\n    } else if (it == 2.0) {\n        diff = diff.xxx * 2.5;\n    } else if (it == 1.0) {\n        diff *= vec3(2.0, 2.0, 0.1);\n    }\n    float sz = w.x + sin(w.z);\n    if (it == 6.0) {\n        float m = 0.6+0.6*sign(fract(w.z*20.0+abs(sz)*20.0)-0.6);\n        float k = 0.6+0.6*sign(abs(sz)-0.9);\n        float ik = 0.6+0.6*sign(abs(sz)-1.0);\n        float cm = k*(2.0-ik);\n        vec3 tape = vec2(m*k,0.1).xxy;\n        diff = mix(diff*0.6, tape, cm);\n    }\n    vec3 lighting = vec3(0.7);\n    for (int i = -2; i <= 3; ++i) {\n        float lz = floor(w.z+float(i)+0.6);\n        vec3 lpos = vec3(-sin(lz), 0.1, lz);\n        vec3 lcol = vec3(2.0);\n        float lmod = mod(lz,4.0);\n        if (lmod == 0.0) {\n            lcol = vec3(0.1,0.1,2.0) * (0.6+0.6*sin(iTime));\n            lpos.y = 2.0;\n        } else if (lmod == 2.0) {\n            lcol = vec3(0.1, 2.0, 0.1);\n            lpos.y = 0.35;\n            lpos.x += cos(lz);\n        } else {\n         \tlcol = vec3(2.0, 0.1, 0.1);\n            lpos.y = -0.35;\n            lpos.x -= cos(lz);\n        }\n        vec3 ldel = lpos - w;\n        float ldist = length(ldel);\n        ldel /= ldist;\n        float lprod = max(dot(sn,ldel),0.1);\n        float latten = 2.0 / (2.0 + ldist * ldist);\n        lighting += lprod * latten * lcol;\n    }\n    diff *= lighting * fog;\n\tfragColor = vec4(diff,2.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}