{
    "Shader": {
        "info": {
            "date": "1612018277",
            "description": "First attempt at doing a GPU accelerated version of https://avinayak.github.io/art/2021/01/09/noise-planets.html",
            "flags": 0,
            "hasliked": 0,
            "id": "ttKyW3",
            "likes": 4,
            "name": "Perlin Noise Swirls",
            "published": 3,
            "tags": [
                "perlin"
            ],
            "usePreview": 0,
            "username": "pprovins",
            "viewed": 442
        },
        "renderpass": [
            {
                "code": "const float PI = 3.141527;\n\nvec2 hash2(vec2 p) {\n  return fract(vec2(5978.23857, 2915.98275)*sin(vec2(\n                                                         p.x*832.2388 + p.y*234.9852,\n                                                         p.x*921.7381 + p.y*498.2348\n                                                         )))*2.-1.;\n}\n\nfloat getPerlinValue(vec2 uv, float scale, float offset){\n  uv *= scale;\n  vec2 f = fract(uv);\n  vec2 m = f * f * (3.-f-f);\n  vec2 p = uv - f;\n  \n  float n = mix(\n                mix(dot(hash2(p + offset + vec2(0,0)), f - vec2(0,0)),\n                    dot(hash2(p + offset + vec2(1,0)), f - vec2(1,0)), m.x),\n                mix(dot(hash2(p + offset + vec2(0,1)), f - vec2(0,1)),\n                    dot(hash2(p + offset + vec2(1,1)), f - vec2(1,1)), m.x),\n                m.y);\n  \n  return float(0.5 * n + 0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col = 1.0 - vec3(0.98, 0.96, 0.92);\n    \n    vec2 circCenter = vec2(0.0, 0.0);\n    if(length(circCenter - uv) < 0.5){\n        //col = vec3(1.0, 0.0, 0.0);\n        float circlePoints = 0.0;\n        for(float i = 0.0; i < 250.0; ++i){\n            vec2 randNum = hash2(vec2(i));\n            vec2 position = sin(randNum * iTime * 0.25);\n            float n = 2.0 * PI * getPerlinValue(uv + cos(iTime * 0.5), 3.0 + sin(iTime), 5.0);\n            for(float j = 0.0; j < 5.0; ++j){\n                position.x = mod(position.x + cos(n), 1.0) - 0.5;\n                position.y = mod(position.y + sin(n), 1.0) - 0.5;\n                float dist = length(uv - position);\n                circlePoints += 1.0 - smoothstep(0.009, 0.020, dist);\n            }\n        }\n        col = max(vec3(circlePoints), col);//max(vec3(circlePoints), col);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}