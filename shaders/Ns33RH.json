{
    "Shader": {
        "info": {
            "date": "1629109716",
            "description": "WIP.  Normalize the render by the brightest pixel.\nMax is computed via Smart MIPmap ( see https://www.shadertoy.com/view/WdyGWd ).\nOf course, ultimate mipmap  would be far more accurate using a power-of-2 buffer ( e.g. a cubemap face ).",
            "flags": 32,
            "hasliked": 0,
            "id": "Ns33RH",
            "likes": 2,
            "name": "tone mapping / brightness adapta",
            "published": 3,
            "tags": [
                "brightness",
                "tonemapping",
                "gpmipmap",
                "adaptation"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 391
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage(out vec4 O, vec2 U) { \n    U /= iResolution.xy;\n    O = texture( iChannel0, U );\n    \n    float m = decodeMax( textureLod( iChannel0, U, 8. ).a ); // brightest pixel value\n  \n     O *= 3./m;  // brightness adaptation: normalize by brightest pixel\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define rot(a)    mat2( cos(a+vec4(0,11,33,0)) )             // rotation                  \nvec3 M;\n\n#define TAU 6.283185\n\nvoid mainImage(out vec4 O, vec2 U) {    \n    float t=9.;\n    vec2  P,d;\n    vec3  R = iResolution,\n          D = normalize(vec3( U+U, -3.5*R.y ) - R ),         // ray direction\n          p = 90./R, q, a;                                   // marching point along ray \n       // M =  iMouse.xyz/R -.5;\n          M = iMouse.z > 0. ? iMouse.xyz/R -.5: vec3(8,4,0)/1e2*cos(iTime+vec3(0,11,0));\n     \n    for ( O-=O ; O.x < 1.5 && t > .01 ; O+=.01 )\n        t=9., q = p,\n        q.yz *= rot( .5+6.*M.y),                             // rotations\n        q.xz *= rot( 2.-6.*M.x),\n        a = abs(q),\n        t = min(t, max(a.x,max(a.y,a.z)) - 5. ),             // cube\n        p += t*D;                          // step forward = dist to obj          \n\n    if (O.x > 1.5) {                                         // background\n        D.yz *= rot( .5+6.*M.y),                             // rotations\n        D.xz *= rot( 2.-6.*M.x),\n        O = texture(iChannel0,D);                            // envmap\n        O.a = encodeMax( ( exp(5.*O.r)-1. ) /20. );          // fake lightmap\n      }\n    else { O = exp(-3.*O/2.);             // luminance (depth + pseudo-shading )\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// see https://www.shadertoy.com/view/WdyGWd\nfloat POW = 5.; // best compromize for max = 10, but here we want some smoothing too\n#define encodeMax(v) pow(v,POW)     // for max of image using MIPmap\n#define decodeMax(v) pow(v,1./POW)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}