{
    "Shader": {
        "info": {
            "date": "1643048552",
            "description": "for radial symmetric large filters, we can use MIPmap integration per rings to get the convolution almost for free, even for not separable kernels ( some blocks keep visible ).\n\nmore precise & costly for separables:  https://www.shadertoy.com/view/WtKfD3",
            "flags": 0,
            "hasliked": 0,
            "id": "fsByzh",
            "likes": 10,
            "name": "fast radial-filter convolution",
            "published": 3,
            "tags": [
                "filter",
                "convolution",
                "integration",
                "gpmipmap"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 551
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/fsjczz\n\n//#define weight(d)   1.\n  #define weight(d)   1./( (d)*(d) )\n//#define weight(d)   exp(-.5*(d)*(d) / 16. )\n\n\nvoid mainImage( out vec4 O, vec2 u ) // =========================================\n{   \n    float t = iTime/4., L;\n    vec2  U = ( 2.*u - R ) / R.y, a,\n          p = length(iMouse.xy) > 10. \n                ? ( 2.*iMouse.xy - R ) / R.y\n                : vec2( .7*cos(t) +.2*sin(7.*t), .5*sin(1.3*t) + .2*cos( 6.1*t) );\n  //L = length(U-p);\n    a = abs(U-p), L = max(a.x,a.y);\n    L = floor(log2(1024.*L));\n    O = texture(iChannel1, vec3(U,1) ).wwww;     // draw image\n    \n    // -----------------------------------------------\n    float w=0.; \n  \n    vec4 P = M(p, 0. ); \n        \n    for( float l=1. ; l<=10.; l++ ) {            // compute convolution per rings\n        P =   M(U, l  ) *exp2(2.*l)\n            - M(U,l-1.) *exp2(2.*(l-1.));\n        P *= weight( exp2(l-.443) );             // filter\n        w += P.w;\n     } \n\n   O.r += .5*w;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// ===== w: density to sample x,y: moments ============\n\nvoid mainCubemap( out vec4 O, vec2 U, vec3 o, vec3 D )\n{\n    if ( D.z < max(abs(D.x),abs(D.y)) ) return;\n    U.y = 1024. - U.y;                 // like buffA, but 1024 x 1024.\n    \n    O = texture( iChannel0, U/1024. ); // source image\n    float d = clamp( 1.4*(O.r - .07*O.g), 0.,1.);\n  //d = step( .25, d );\n  //d = step( R.x/2., U.x);\n  //d *= d;\n    O = vec4( 0,0, 0, d );             // ( image )\n  //O = vec4( (U/512.-1.)*d, 0, d );   // ( x,y moments, 0, density )\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            },
            {
                "code": "#define R  iResolution.xy\n#define M(U,l)   textureLod( iChannel1, vec3(U,1), l  )   // access density map\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}