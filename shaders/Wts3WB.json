{
    "Shader": {
        "info": {
            "date": "1557501963",
            "description": "A small attempt of doing kind of transparency on raymarching",
            "flags": 1,
            "hasliked": 0,
            "id": "Wts3WB",
            "likes": 5,
            "name": "Bubbles raymarching",
            "published": 3,
            "tags": [
                "raymarching",
                "bubbles"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 378
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nconst vec4 hlf = vec4(0.5);\n\nconst int marchStp = 64;\nconst float maxDst = 150.0;\nconst float EPS = 0.000001;\nfloat lengthNY(vec3 v)\n{\n  return abs(v.x)+abs(v.y)+abs(v.z);\n}\nfloat lengthSqr(vec3 a)\n{\n  return a.x*a.x+a.y*a.y+a.z*a.z;\n}\n\nvec3 rdrStar(vec2 angles)\n{\n  return vec3(0.0);\n}\nfloat sat(float a)\n{\n  return clamp(a,0.0,1.0);\n}\nvec3 rdrSky(vec3 v)\n{\n  return pow(sat(1.05-abs(v.y)),5.0)*vec3(0.4,0.5,0.976)*1.5;\n  return vec3(0.0);\n}\n\nfloat sdf_sph(vec3 p, float rad)\n{\n  return length(p)-rad;\n}\n\nvec3 sdf_repeat(vec3 p, vec3 c)\n{\n  return mod(p,c)-0.5*c;//+vec3(sin(iTime+p.y*3.0))*0.1;\n}\n\nvec3 setCam(vec3 origin, vec2 uv)\n{\n  float pitch = cos(0.4*iTime)*0.1+0.39;\n  float yaw = sin(iTime*0.1)*0.55;\n  vec3 fwd = vec3(0.0,0.0,1.0);\n  vec3 right = vec3(-1.0,0.0,0.0);\n  vec3 up = vec3(0.0,1.0,0.0);\n  float fov = 1.0;\n  float cosYaw = cos(yaw);\n  float sinYaw = sin(yaw);\n  float cosPitch = cos(pitch);\n  float sinPitch = sin(pitch);\n\n  mat3 rotY = mat3(cosPitch,  0.0, sinPitch,\n                   0.0, 1.0, 0.0,\n                   -sinPitch,  0.0, cosPitch);\n  mat3 rotZ = mat3(cosYaw, -sinYaw, 0.0,\n                   sinYaw, cosYaw, 0.0,\n                   0.0,  0.0, 1.0);\n  vec3 vec = fwd;\n  vec += (uv.x*right+uv.y*up)*fov;\n  vec = rotY * (rotZ * vec);\n  vec= normalize(vec);\n\n  return vec;\n}\n\nvec3 rdr(vec2 uv)\n{\n  vec3 orig=vec3(0.0,0.1*sin(iTime),-5.0);\n  vec3 p;\n  vec3 dir = setCam(orig, uv);\n  float totDst = 0.0;\n  vec3 outCol = rdrSky(dir);\n\n  p = orig+dir;\n  for (int i = 0; i< marchStp&&totDst < maxDst&&outCol.x<0.62;++i)\n  {\n    float dst = sdf_sph(sdf_repeat(p,vec3(3.0)), 0.58);\n    if (dst <EPS)\n    {\n      outCol += 0.1*hlf.xyz*(-dst*10.0)*(maxDst-totDst)/maxDst;\n      dst = -dst+0.5+EPS;\n\n    //  break;\n    }\n      totDst+= dst;\n      p += dir*dst;\n  }\n  return outCol;\n}\n\nvec3 rdrVR(vec2 uv, vec3 orig, vec3 vdir)\n{\n  orig+=vec3(0.0,0.1*sin(iTime),-5.0);\n  vec3 p;\n  vec3 dir = setCam(orig, uv);\n    dir = vdir;\n  float totDst = 0.0;\n  vec3 outCol = rdrSky(dir);\n\n  p = orig+dir;\n  for (int i = 0; i< marchStp&&totDst < maxDst&&outCol.x<0.62;++i)\n  {\n    float dst = sdf_sph(sdf_repeat(p,vec3(3.0)), 0.58);\n    if (dst <EPS)\n    {\n      outCol += 0.1*hlf.xyz*(-dst*10.0)*(maxDst-totDst)/maxDst;\n      dst = -dst+0.5+EPS;\n\n    //  break;\n    }\n      totDst+= dst;\n      p += dir*dst;\n  }\n  return outCol;\n}\n\nvec3 rdrChroma(vec2 uv)\n{\n  vec2 dir = vec2(0.005);\n  float r = rdr(uv+dir).x;\n  float g = rdr(uv).y;\n  float b = rdr(uv-dir).z;\n  //return rdr(uv);\n  return vec3(r,g,b);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    vec3 ro = fragRayOri + vec3( 1.0, 0.0, 1.0 );\n    vec3 rd = fragRayDir;\n    vec3 col = rdrVR(fragCoord,  ro, rd);\n      vec2 uv = fragCoord.xy / iResolution.xy;\n  float ratio = iResolution.x / iResolution.y;\n  uv -= hlf.xy;\n  uv.x *= ratio;\n\n\tfragColor = vec4( col, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  float ratio = iResolution.x / iResolution.y;\n  uv -= hlf.xy;\n  uv.x *= ratio;\n\n  vec3 outCol = rdrChroma(uv);\n\n  fragColor = vec4(outCol, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}