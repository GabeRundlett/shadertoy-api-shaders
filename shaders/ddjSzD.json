{
    "Shader": {
        "info": {
            "date": "1670004301",
            "description": "Shortest 3D Checkers ... Can you make it shorter?!",
            "flags": 0,
            "hasliked": 0,
            "id": "ddjSzD",
            "likes": 12,
            "name": "Shortest 3D Checkers - 111 chars",
            "published": 3,
            "tags": [
                "2d",
                "fake3d",
                "short"
            ],
            "usePreview": 0,
            "username": "GregRostami",
            "viewed": 331
        },
        "renderpass": [
            {
                "code": "// 111 chars - iq makes a char DISAPPEAR!!\n/**/\nvoid mainImage(out vec4 o, vec2 u)\n{\n    o = sin( iTime - 8.*vec4(1,1,1,u = u/iResolution.x - .6 ) / u.y );\n    o = .5 + (o+o.w)/fwidth(o);\n}\n/**/\n\n// 112 chars - Fabrice uses the magical \"fwidth()\" to add anti-aliasing!!\n/**\nvoid mainImage(out vec4 o, vec2 u)\n{\n    o = sin( iTime - 8.*vec4(1,1,1,u = u/iResolution.x - .6 ) / u.y);\n    o += o.w;\n    o = .5 + o/fwidth(o);\n}\n/**/\n\n\n// 99 chars - Fabrice (once again) makes the small, SMALLER!!\n/**\nvoid mainImage(out vec4 o, vec2 u)\n{\n    o = 3e3 * sin( iTime - 8.*vec4(1,1,1,u = u/iResolution.x - .6 ) / u.y );\n    o += o.w;\n}\n/**/\n\n\n// 108 chars - Shortest 3D Checkers (B&W)\n/**\nvoid mainImage(out vec4 o, vec2 u)\n{\n    u = u/iResolution.x - .6;\n    u = 3e3 * sin(iTime - 7.*vec2(u.x,1)/u.y);\n    o = vec4(u.x+u.y);\n}\n/**/\n\n\n// 97 chars - Shorter 3D Checkers (Color)\n/**\nvoid mainImage(out vec4 o, vec2 u)\n{\n    u = u/iResolution.x-.6;\n    o = 1e3 * sin(iTime - 5.*vec2(u.x,1)/u.y).xyxy;\n}\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}