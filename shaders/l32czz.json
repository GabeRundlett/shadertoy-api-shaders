{
    "Shader": {
        "info": {
            "date": "1726880175",
            "description": "Fun fractal zoomer",
            "flags": 0,
            "hasliked": 0,
            "id": "l32czz",
            "likes": 0,
            "name": "Funky Zoomer",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "doodlestein",
            "viewed": 39
        },
        "renderpass": [
            {
                "code": "#define NUM_LAYERS 7.\n#define ITER 13\n\nvec4 tex(vec3 p)\n{\n    float t = iTime + 78.;\n    vec4 o = vec4(p, 3. * sin(t * 0.1));\n    vec4 dec = vec4(1., 0.9, 0.1, 0.15) + vec4(0.1 * sin(p * 10.0 + t * vec3(0.2, 0.3, 0.4)), 0.0);\n    for (int i = 0; i++ < ITER; )\n        o = abs(o / dot(o, o) - dec);\n    float v = length(o);\n    return vec4(v);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    vec3 col = vec3(0);\n    float t = iTime * 0.3;\n\n    for (float i = 0.; i <= 1.; i += 1. / NUM_LAYERS)\n    {\n        float d = fract(i + t); // depth\n        float s = mix(25., 0.35, d); // scale\n        float f = d * smoothstep(1., 0.9, d); // fade\n        float angle = i * 6.2831 / NUM_LAYERS + t * 0.15;\n        mat2 rot = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n        vec2 uv_rot = uv * rot;\n        col += tex(vec3(uv_rot * s, i * 4.)).xxx * f;\n    }\n\n    col /= NUM_LAYERS;\n    col = 0.5 + 0.5 * sin(col * 3.1415 + vec3(0.0, 2.094, 4.188));\n    col = pow(col, vec3(0.5));\n\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}