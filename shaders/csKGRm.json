{
    "Shader": {
        "info": {
            "date": "1678336142",
            "description": "Forked from Larval, by P_Malin - I just wanted to make it glow way too brightly because I LIKE things that glow too brightly. ",
            "flags": 1,
            "hasliked": 0,
            "id": "csKGRm",
            "likes": 1,
            "name": "Larval forky",
            "published": 3,
            "tags": [
                "glow",
                "kifs"
            ],
            "usePreview": 0,
            "username": "hashtagexo",
            "viewed": 95
        },
        "renderpass": [
            {
                "code": "// Fork of \"Larval\" by P_Malin. https://shadertoy.com/view/ldB3Rz\n// 2023-03-09 04:28:41\n\n// Larval - @P_Malin\n// https://www.shadertoy.com/view/ldB3Rz\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// \n// Some kind of alien fractal thingy.\n// A hacked together KIFS doodle.\n// The fractal parameters aren't that exciting but I like the pretty colours :D\n\n#define kRaymarchIterations 24\n#define kIFSIterations 16\n\nvec3 vGlowColour = vec3(0.08, 0.67, 0.41) * 5.1;\nvec3 vEnvColour = vec3(0.51, 0.0, 0.5) * 0.1;\n\nfloat kExposure = 0.09;\n\n// KIFS parameters\nconst float fScale=1.5;\nvec3 vOffset = vec3(-1.0,-2.0,-0.2);\t\nmat3 m;\n\nconst float kFarClip = 30.0;\n\nvec2 GetSceneDistance( in vec3 vPos )\n{\n\tfloat fTrap = kFarClip;\n\t\n\tfloat fTotalScale = 1.0;\n\tfor(int i=0; i<kIFSIterations; i++)\n\t{\t\n\t\tvPos.xyz = abs(vPos.xyz);\n\t\tvPos *= fScale;\n\t\tfTotalScale *= fScale;\n\t\tvPos += vOffset;\n\t\tvPos.xyz = (vPos.xyz) * m;\n\t\t\n\t\tfloat fCurrDist = length(vPos.xyz) * fTotalScale;\n\t\t//float fCurrDist = max(max(vPos.x, vPos.y), vPos.z) * fTotalScale;\n\t\t//float fCurrDist = dot(vPos.xyz, vPos.xyz);// * fTotalScale;\t\t\n\t\tfTrap = min(fTrap, fCurrDist);\n\t}\n\n\tfloat l = length(vPos.xyz) / fTotalScale;\n\t\n\tfloat fDist = l - 0.1;\n\treturn vec2(fDist, fTrap);\n}\n\nvec4 Raycast( const in vec3 vOrigin, const in vec3 vDir )\n{\n\tfloat fClosest = kFarClip;\n\tvec2 d = vec2(0.0);\n\tfloat t = 0.01;\n\tfor(int i=0; i<kRaymarchIterations; i++)\n\t{\n\t\td = GetSceneDistance(vOrigin + vDir * t);\n\t\tfClosest = min(fClosest, d.x / t);\n\t\tif(abs(d.x) < 0.0001)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tt += d.x;\n\t\tif(t > kFarClip)\n\t\t{\n\t\t\tt = kFarClip;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn vec4(t, d.x, d.y, fClosest);\n}\n\nvec3 GetSceneNormal( const in vec3 vPos )\n{\n    const float fDelta = 0.000001;\n\n    vec3 vOffset1 = vec3( fDelta, -fDelta, -fDelta);\n    vec3 vOffset2 = vec3(-fDelta, -fDelta,  fDelta);\n    vec3 vOffset3 = vec3(-fDelta,  fDelta, -fDelta);\n    vec3 vOffset4 = vec3( fDelta,  fDelta,  fDelta);\n\n    float f1 = GetSceneDistance( vPos + vOffset1 ).x;\n    float f2 = GetSceneDistance( vPos + vOffset2 ).x;\n    float f3 = GetSceneDistance( vPos + vOffset3 ).x;\n    float f4 = GetSceneDistance( vPos + vOffset4 ).x;\n\n    vec3 vNormal = vOffset1 * f1 + vOffset2 * f2 + vOffset3 * f3 + vOffset4 * f4;\n\n    return normalize( vNormal );\n}\n\nvec3 TraceRay( const in vec3 vOrigin, const in vec3 vDir )\n{\t\n\tvec4 vHit = Raycast(vOrigin, vDir);\n\t\n\tvec3 vHitPos = vOrigin + vDir * vHit.x;\n\tvec3 vHitNormal = GetSceneNormal(vHitPos);\n\t\n\tfloat fShade = 1.0;\n\tfloat fGlow = 0.0;\n\tvec3 vEnvDir = vDir;\n\tif(vHit.x < kFarClip)\n\t{\n\t\tvEnvDir = reflect(vDir, vHitNormal);\n\t\tfGlow = clamp(vHit.z * 0.1, 0.0, 1.0);\n\t\tfGlow = pow(fGlow, 3.0);\n\t\tfShade = fGlow;\n\t}\n\t\n\tvec3 vEnv = texture(iChannel0, vEnvDir).rgb;\n\tvEnv = vEnv * vEnv;\t\n\tvEnv = -log2(1.0 - min(vEnv, 0.99));\n\n\tvEnv *= vEnvColour;\n\t\n\tvec3 vColour = vEnv * (0.25 + fShade * 0.75);\n\t\n\t// inner glow\n\tif(vHit.x < kFarClip)\n\t{\t\n\t\tvColour += vGlowColour * 10.0 * fGlow;\n\t}\n\n\t// outer glow\n\t{\t\t\t\t\n\t\tfloat f = 1.0 - clamp(vHit.w * 0.5, 0.0, 1.0);\t\t\n\t\t\n\t\tfloat fGlowAmount = 0.0;\n\t\t\n\t\t// big glow\n\t\tfloat f1 = pow(f, 20.0);\n\t\tfGlowAmount += f1 * 2.0 * (0.5 + fShade * 0.5);\n\t\n\t\t// small glow\n\t\tfloat f2 = pow(f, 200.0);\n\t\tfGlowAmount += f2 * 5.0 * fShade;\n\t\t\n\t\tvColour += vGlowColour * fGlowAmount;\n\t}\n\t\n\treturn vColour;\n}\n\n\n// mat3 from quaternion\nmat3 SetRot( const in vec4 q )\n{\n\tvec4 qSq = q * q;\n\tfloat xy2 = q.x * q.y * 2.0;\n\tfloat xz2 = q.x * q.z * 2.0;\n\tfloat yz2 = q.y * q.z * 2.0;\n\tfloat wx2 = q.w * q.x * 2.0;\n\tfloat wy2 = q.w * q.y * 2.0;\n\tfloat wz2 = q.w * q.z * 2.0;\n \n\treturn mat3 (\t\n     qSq.w + qSq.x - qSq.y - qSq.z, xy2 - wz2, xz2 + wy2,\n     xy2 + wz2, qSq.w - qSq.x + qSq.y - qSq.z, yz2 - wx2,\n     xz2 - wy2, yz2 + wx2, qSq.w - qSq.x - qSq.y + qSq.z );\n}\n\n// mat3 from axis / angle\nmat3 SetRot( vec3 vAxis, float fAngle )\n{\t\n\treturn SetRot( vec4(normalize(vAxis) * sin(fAngle), cos(fAngle)) );\n}\n\nvec3 ApplyPostFx( const in vec3 vIn, const in vec2 fragCoord )\n{\n\tvec2 vUV = fragCoord.xy / iResolution.xy;\n\tvec2 vCentreOffset = (vUV - 0.5) * 2.0;\n\t\n\tvec3 vResult = vIn;\n\tvResult.xyz *= clamp(1.0 - dot(vCentreOffset, vCentreOffset) * 0.4, 0.0, 1.0);\n\n\tvResult.xyz = 1.0 - exp(vResult.xyz * -kExposure);\n\t\n\tvResult.xyz = pow(vResult.xyz, vec3(1.0 / 2.2));\n\t\n\treturn vResult;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 vUV = fragCoord.xy / iResolution.xy;\n\tvec2 vWindow = vUV * 2.0 - 1.0;\n\tvWindow.x *= iResolution.x / iResolution.y;\n\t\n\tvec2 vMouse = iMouse.xy / iResolution.xy;\n\t\n\tfloat fHeading = iTime * 0.21;\n\tfloat fElevation = cos(iTime * 0.1) * 0.5;\n\tfloat fCameraDistance = 15.0 + sin(iTime * 0.05) * 5.0;\n\t\n\tfloat fSinElevation = sin(fElevation);\n\tfloat fCosElevation = cos(fElevation);\n\tfloat fSinHeading = sin(fHeading);\n\tfloat fCosHeading = cos(fHeading);\n\t\n\tvec3 vCameraOffset;\n\tvCameraOffset.x = fSinHeading * fCosElevation;\n\tvCameraOffset.y = fSinElevation;\n\tvCameraOffset.z = fCosHeading * fCosElevation;\n\t\n\tvec3 vCameraPos = vCameraOffset * fCameraDistance;\n\n\tvec3 vCameraTarget = vec3(0.0, 0.0, 0.0);\n\t\n\tvec3 vForward = normalize(vCameraTarget - vCameraPos);\n\tvec3 vRight = normalize(cross(vec3(0.0, 1.0, 0.0), vForward));\n\tvec3 vUp = normalize(cross(vForward, vRight));\n\t\n\tfloat fFov = 2.0;\n\t\n\tvec3 vDir = normalize(vWindow.x * vRight + vWindow.y * vUp + vForward * fFov);\n\t\n\tvec3 vRotationAxis = vec3(1.0, 4.0, 2.0);\n\n\t// Rotate the rotation axis\n\tmat3 m2 = SetRot( vec3(0.1, 1.0, 0.01), iTime * 0.3 );\t\t\n\t\n\tvRotationAxis = vRotationAxis * m2;\n\t\n\tfloat fRotationAngle = sin(iTime * 0.5);\n\t\n\tif( iMouse.z > 0.0 )\n\t{\n\t\tvec2 vMouseOffset = vMouse * 2.0 - 1.0;\n\t\tvRotationAxis = vec3(vMouseOffset.x, 1.0, vMouseOffset.y);\n\t\tfRotationAngle = length(vRotationAxis);\n\t}\n\t\n\tm = SetRot(vRotationAxis, fRotationAngle);\n\t\n\tvec3 vResult = TraceRay(vCameraPos, vDir);\n\t\n\tvResult = ApplyPostFx(vResult,fragCoord);\n\t\n\tfragColor = vec4(vResult,1.0);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n\tvec2 vMouse = iMouse.xy / iResolution.xy;\n    \n\tvec3 vRotationAxis = vec3(1.0, 4.0, 2.0);\n\n\t// Rotate the rotation axis\n\tmat3 m2 = SetRot( vec3(0.1, 1.0, 0.01), iTime * 0.3 );\t\t\n\t\n\tvRotationAxis = vRotationAxis * m2;\n\t\n\tfloat fRotationAngle = sin(iTime * 0.5);\n\t\n\tif( iMouse.z > 0.0 )\n\t{\n\t\tvec2 vMouseOffset = vMouse * 2.0 - 1.0;\n\t\tvRotationAxis = vec3(vMouseOffset.x, 1.0, vMouseOffset.y);\n\t\tfRotationAngle = length(vRotationAxis);\n\t}    \n\tm = SetRot(vRotationAxis, fRotationAngle);\n\n    fragRayOri *= 40.0;\n    \n    fragRayOri.z *= -1.0;\n    fragRayDir.z *= -1.0;\n    \n    fragRayOri.z -= 20.0;\n    fragRayOri.y += 5.0;\n\tvec3 vResult = TraceRay(fragRayOri, fragRayDir);\n\t\n\tvResult = ApplyPostFx(vResult,vec2(0.5));\n\t\n\tfragColor = vec4(vResult,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}