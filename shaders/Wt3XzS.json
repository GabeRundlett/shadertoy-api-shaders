{
    "Shader": {
        "info": {
            "date": "1581158186",
            "description": "variant of [url]https://shadertoy.com/view/3lS3Dm[/url] ( Procedural Phasor Noise [url]https://hal.archives-ouvertes.fr/hal-02118508[/url] )\nSPACE to display the phasor noise ( = oscillator * phasor ) \nMouse.x : sine  direction  Mouse.y : sine  freq\n",
            "flags": 16,
            "hasliked": 0,
            "id": "Wt3XzS",
            "likes": 2,
            "name": "Phasor noise figure 3 (variant)",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 534
        },
        "renderpass": [
            {
                "code": "// Fork of  https://shadertoy.com/view/3lS3Dm\n// ( add noise display on SPACE press , Mouse.y controls )\n\n# define M_PI 3.14159265358979323846\n\n//phasor noise parameters\nfloat _f = 25.0;\nfloat _b = 10.0;\nfloat _o = 1.0;\nfloat _kr;\nint _impPerKernel = 16;\nint _seed = 1;\n\nvec2 uv;\n\nvec2 phasor(vec2 x, float f, float b, float o, float phi)\n{\n    \n    float a = exp(-M_PI * (b * b) * ((x.x * x.x) + (x.y * x.y)));\n    float s = sin (2.0* M_PI * f  * (x.x*cos(o) + x.y*sin(o))+phi);\n    float c = cos (2.0* M_PI * f  * (x.x*cos(o) + x.y*sin(o))+phi);\n    return vec2(a*c,a*s);\n}\n\n///////////////////////////////////////////////\n//prng\n///////////////////////////////////////////////\n\nint N = 15487469;\nint x_;\nvoid seed(int s){x_ = s;}\nint next() { x_ *= 3039177861; x_ = x_ % N;return x_; }\nfloat uni_0_1() {return  float(next()) / float(N);}\nfloat uni(float min, float max){ return min + (uni_0_1() * (max - min));}\n\n\nint morton(int x, int y)\n{\n  int z = 0;\n  for (int i = 0 ; i < 32* 4 ; i++) {\n    z |= ((x & (1 << i)) << i) | ((y & (1 << i)) << (i + 1));\n  }\n  return z;\n}\n\n\nvoid init_noise()\n{\n    _kr = sqrt(-log(0.05) / M_PI) / _b;\n}\n\n\nvec2 cell(ivec2 ij, vec2 uv, float f, float b, float o)\n{\n\tint s= morton(ij.x,ij.y) + 333;\n\ts = s==0? 1: s +_seed;\n\tseed(s);\n\tint impulse  =0;\n\tint nImpulse = _impPerKernel;\n\tfloat  cellsz = 2.0 * _kr;\n\tvec2 noise = vec2(0.0);\n\twhile (impulse <= nImpulse){\n\t\tvec2 impulse_centre = vec2(uni_0_1(),uni_0_1());\n\t\tvec2 d = (uv - impulse_centre) *cellsz;\n\t\tfloat rp = uni(0.0,2.0*M_PI);\n\t\tnoise += phasor(d, f, b ,o,rp );\n\t\timpulse++;\n\t}\n\treturn noise;\n}\n\nvec2 eval_noise(vec2 uv, float f, float b, float o)\n{   \n\tfloat cellsz = 2.0 *_kr;\n\tvec2 _ij = uv / cellsz;\n\tivec2  ij = ivec2(_ij);\n\tvec2  fij = _ij - vec2(ij);\n\tvec2 noise = vec2(0.0);\n\tfor (int j = -2; j <= 2; j++) {\n\t\tfor (int i = -2; i <= 2; i++) {\n\t\t\tivec2 nij = ivec2(i, j);\n\t\t\tnoise += cell(ij + nij , fij - vec2(nij),f,b,o );\n\t\t}\n\t}\n    return noise;\n}\n\nfloat PWM(float x, float r)\n{\n\treturn mod(x,2.0*M_PI)> 2.0*M_PI *r ? 1.0 : 0.0; \n}\n\nfloat square(float x)\n{\n  return PWM(x,0.5);   \n}\n\nfloat sawTooth(float x)\n{\n\treturn mod(x,2.0*M_PI)/(2.0*M_PI);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n#define keyClick(a)   ( texelFetch(iChannel3,ivec2(a,0),0).x > 0.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  uv = fragCoord/iResolution.y;\n  uv.y=-uv.y;\n  init_noise();\n  vec2 M = iMouse.xy/iResolution.xy;\n  float o = M.x * 2.0*M_PI;\n  if (iMouse.z>0.) _f *=  2.*M.y;; // _b *= .4 + 2.*M.y;\n  vec2 phasorNoise = eval_noise(uv,_f,_b,o);\n  vec2 dir = vec2(cos(o),sin(o));\n  float phi = atan(phasorNoise.y,phasorNoise.x);\n  float I = length(phasorNoise);\n  vec3 phasorfield  = keyClick(32) \n         ? vec3(sin(phi)*0.3 +0.5)                              //figure3 a\n         : hsv2rgb(vec3(phi/(2.*M_PI)-_f*dot(uv,dir), .8, .8)); //figure3 b\n  //phasorfield  = vec3(mod(phi/(2.0*M_PI)-_f*dot(uv,dir),1.0));//figure3 c\n  //phasorfield = vec3(I);\n  fragColor = vec4(phasorfield,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}