{
    "Shader": {
        "info": {
            "date": "1477243915",
            "description": "My really old experiments with the Mandelbrot set and orbit traps, ported from [url]http://glslsandbox.com[/url].\nUse the mouse to adjust brightness.",
            "flags": 0,
            "hasliked": 0,
            "id": "4lK3Dc",
            "likes": 9,
            "name": "Mandelbrot - orbit trap",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "mandelbrot",
                "experiment",
                "old",
                "orbit",
                "trap"
            ],
            "usePreview": 0,
            "username": "piotrekli",
            "viewed": 917
        },
        "renderpass": [
            {
                "code": "#define maxiter 50\n\n#define TRAP z.x*z.x + z.y*z.y\n//#define TRAP abs(z.x + z.y)\n//#define TRAP abs(z.x)+abs(z.y)\n//#define TRAP z.x*z.x*(sin(time)+1.0)+z.y*z.y*(cos(time)+1.0)\n//#define TRAP sin(z.x)+z.y*z.y+1.0\n//#define TRAP abs(sin(z.x)-z.y)\n//#define TRAP mandelbrot(z)\n//#define TRAP abs(z.x+z.y)+abs(z.x)+abs(z.y)\n//#define TRAP abs((z.x*z.x+z.y*z.y)*(z.x*z.x+z.y*z.y)-2.0*(z.x*z.x-z.y*z.y))\n//#define TRAP abs(z.x*z.x*z.x+z.y*z.y*z.y-3.0*z.x*z.y)\n//#define TRAP abs((z.x-1.0))\n//#define TRAP abs(z.x*z.x+z.y*z.y-0.75)\n//#define TRAP abs(z.x*z.x+z.y*z.y-z.y)\n//#define TRAP abs(sin(z.y)-z.x)+abs(sin(z.x)-z.y)\n//#define TRAP abs(z.x*z.x+z.y*z.y+2.0*z.x+z.x*z.x*z.y)\n//#define TRAP abs(z.x*z.x+z.y*z.y+z.x+z.x*z.x)\n\n#define COLORING dist/1.1, dist*dist/0.8, dist*dist*dist/0.9\n//#define COLORING dist/1.6, dist*dist/0.7, dist*dist*dist/1.9\n//#define COLORING dist*dist*dist/1.0, dist*dist/0.9, dist*dist/1.3\n//#define COLORING dist*dist*dist/0.4, dist*dist/0.3, dist/0.8\n//#define COLORING dist*dist/0.6, dist*dist*dist/0.2, dist/1.6\n//#define COLORING dist, dist, dist\n//#define COLORING dist*dist/0.7, dist*dist*dist/0.7, dist/0.9\n//#define COLORING dist*dist/0.5, dist*dist*dist/0.1, dist/0.5\n//#define COLORING dist*dist/0.2, dist/0.6, log(dist)/0.2\n//#define COLORING dist/2.5, (sin(dist)+1.0)/2.4, (cos(dist)+1.0)/2.4\n//#define COLORING dist*dist/0.25, dist*dist/0.2, dist/0.4\n//#define COLORING dist*dist/0.25, dist/0.4, dist/0.5\n//#define COLORING dist/0.3, dist*dist*dist/0.03, dist*dist/0.3\n//#define COLORING dist/0.3, dist*dist*dist/0.03, dist/0.4\n//#define COLORING dist/0.3, dist*dist/0.03, dist/0.1\n\n#define time iTime // the original code was written for glslsandbox.com\n                         // http://glslsandbox.com/e#21952.(a number from 0 to 20)\n\nfloat mandelbrot(vec2 p) // used as an orbit trap\n{\n    vec2 z = vec2(0.0, 0.0);\n    for (int i=0; i<maxiter; ++i)\n       z = vec2(z.x*z.x-z.y*z.y, z.x*z.y*2.0) + p;\n    return z.x*z.x+z.y*z.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = ((fragCoord.xy-iResolution.xy*0.5) / min(iResolution.x, iResolution.y)+vec2(-0.25, 0.0))*2.5;\n\tvec2 z = vec2(0.0, 0.0);\n\tfloat p = 0.0;\n\tfloat dist = 1e20;\n\tfor (int i=0; i<maxiter; ++i)\n\t{\n\t\tz = vec2(z.x*z.x-z.y*z.y, z.x*z.y*2.0) + uv;\n\t\tp = (TRAP);\n\t\tif (p < dist)\n\t\t{\n\t\t\tdist = p;\n\t\t}\n\t}\n\tdist = dist*(iMouse.x == 0.0 ? 5.0 : iMouse.x/iResolution.x*14.0);\n\tfragColor = vec4(COLORING, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}