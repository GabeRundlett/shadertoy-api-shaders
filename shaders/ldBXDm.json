{
    "Shader": {
        "info": {
            "date": "1412654050",
            "description": "Tests whether a point is inside a quad. Note than the quadrilateral can intersect itself. Derived from https://www.shadertoy.com/view/lsBSDm",
            "flags": 0,
            "hasliked": 0,
            "id": "ldBXDm",
            "likes": 18,
            "name": "Point in Quad",
            "published": 3,
            "tags": [
                "2d",
                "quad",
                "interior"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 2177
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// Point in Quad test. Note that it works for selfintersecting quads. No square roots\n// required. Derived form this shader: https://www.shadertoy.com/view/lsBSDm\n\nfloat cross2d( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\nfloat pointInQuad( in vec2 p, in vec2 a, in vec2 b, in vec2 c, in vec2 d )\n{\n    vec2 e = b-a;\n    vec2 f = a-d;\n    vec2 g = a-b+c-d;\n    vec2 h = p-a;\n        \n    float k0 = cross2d( f, g );\n    float k1 = cross2d( e, g );\n    float k2 = cross2d( f, e );\n    float k3 = cross2d( g, h );\n    float k4 = cross2d( e, h );\n    float k5 = cross2d( f, h );\n    \n    float l0 = k2 - k3 + k0;\n    float l1 = k2 + k3 + k1;\n    float m0 = l0*l0 + k0*(2.0*k4 - l0);\n    float m1 = l1*l1 + k1*(2.0*k5 - l1);\n    float n0 = m0    + k0*(2.0*k4 + k3 - k2);\n    float n1 = m1    + k1*(2.0*k5 - k3 - k2);\n    \n    float b0 = step( m0*m0, l0*l0*n0 );\n    float b1 = step( m1*m1, l1*l1*n1 );\n\n    float res = (m0>0.0) ? ((m1>0.0) ? b1*b0 : \n                                       b0) : \n                           ((m1>0.0) ? b1 : \n                                       b1 + b0 - b1*b0);\n\n    if( l0*l1 < 0.0 )  res -= b1*b0;\n    \n    return res;\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    \n    vec2 a = cos( 1.11*iTime + vec2(0.1,4.0) );\n    vec2 b = cos( 1.13*iTime + vec2(1.0,3.0) );\n    vec2 c = cos( 1.17*iTime + vec2(2.0,2.0) );\n    vec2 d = cos( 1.15*iTime + vec2(3.0,1.0) );\n    \n    float isQuad = pointInQuad( p, a, b, c, d );\n    \n    vec3 col = vec3( isQuad*0.5 );\n    \n    float h = 2.0/iResolution.y;\n    col = mix( col, vec3(1.0), 1.0-smoothstep(h,2.0*h,sdSegment(p,a,b)));\n    col = mix( col, vec3(1.0), 1.0-smoothstep(h,2.0*h,sdSegment(p,b,c)));\n    col = mix( col, vec3(1.0), 1.0-smoothstep(h,2.0*h,sdSegment(p,c,d)));\n    col = mix( col, vec3(1.0), 1.0-smoothstep(h,2.0*h,sdSegment(p,d,a)));\n    \n\tfragColor = vec4( col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}