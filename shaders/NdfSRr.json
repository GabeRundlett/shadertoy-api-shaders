{
    "Shader": {
        "info": {
            "date": "1620178940",
            "description": "Finally learned how to transform it into a quartic polynomial with t-formulae and solved it: [url=https://www.qc.edu.hk/math/Certificate%20Level/t%20method.htm]https://www.qc.edu.hk/math/Certificate%20Level/t%20method.htm[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "NdfSRr",
            "likes": 14,
            "name": "Inverse Reflection - Disk I",
            "published": 3,
            "tags": [
                "reflection",
                "math",
                "light",
                "physics",
                "quartic",
                "optics",
                "inverse",
                "disk",
                "tformulae"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 187
        },
        "renderpass": [
            {
                "code": "// Formulating and simplifying the problem as an equation: https://www.desmos.com/calculator/tnxdrshgt3\n// Attempting to solve the equation: https://www.desmos.com/calculator/ybqpz6ypwy\n// Not sure how to deal with incorrect side reflections due to bad quadrant information in atan().\n// Works fine for near and far incidence points though aside from precision issues.\n\n// Drawing utilities\n#define drawSDF(dist, transp, col) color = mix(color, col, smoothstep(unit, 0.0, dist) * transp)\n\n// SDFs\nfloat sdDisc(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nfloat sdVerticalLine(in vec2 p, in float h) {\n    return length(vec2(p.x, p.y - h * clamp(p.y / h, 0.0, 1.0)));\n}\n\nfloat sdIsosceles(in vec2 p, in float b, in float h) {\n    p.x = abs(p.x);\n    float q = clamp((b - p.x + p.y) / (b + h), 0.0, 1.0);\n    vec2 re = vec2(p.x - b + b * q, p.y - h * q);\n    vec2 be = vec2(p.x - b * min(p.x / b, 1.0), p.y);\n    return sqrt(min(dot(re, re), dot(be, be))) * sign(p.x + (p.y - h) * b / h * sign(p.y));\n}\n\nfloat sdVectorArrow(in vec2 p, in vec2 v) {\n    float m = length(v); vec2 n = v / m;\n    p = vec2(dot(p, n.yx * vec2(1.0, -1.0)), dot(p, n));\n    return min(sdVerticalLine(p, m) - 0.025, sdIsosceles(p - vec2(0.0, m), 0.1, 0.15));\n}\n\n//////////////////////////////////////////////////////////////////////////////////////\n\n// tx: transmitter\n// rx: receiver\n// pos: disk position\n// rad: disk radius\nint getIncidences(in vec2 tx, in vec2 rx, in vec2 pos, in float rad, out vec2[4] incidences) {\n    rx -= pos, tx -= pos;\n\n    vec2 tr1 = tx + rx;\n    vec2 tr2 = rx * mat2(tx.yx, tx.x, -tx.y);\n\n    float k = rad * sqrt(dot(tr1, tr1) / dot(tr2, tr2));\n    float a1 = atan(tr2.x / tr2.y), a2 = atan(tr1.y / tr1.x);\n\n    float shift = 0.5 * a1;\n    float sa = shift - a2;\n\n    vec2 bd = vec2(4.0, -4.0) / sin(sa) / k - 2.0 / tan(sa); // Coefficients (a=1, c=0, e=-1)\n    vec4 t;\n\n    // Solve a quartic equation in tan(x/2)\n    float bb = bd.x * bd.x;\n    float p = -0.375 * bb;\n    float q = bd.y + 0.125 * bb * bd.x;\n    float r = -1.0 - 0.25 * bd.x * bd.y - 0.01171875 * bb * bb;\n    int n = 0; // Root counter\n\n    // Solve for an arbitary root to x^3 + 2px^2 + (p^2 - 4r)x - q^2\n    float ra = 2.0 * p;\n    float rb = p * p - 4.0 * r;\n    float rc = -q * q;\n\n    float raa = ra * ra;\n    float inflect = ra / 3.0;\n\n    float rp = rb - raa / 3.0;\n    float rq = raa * ra / 13.5 - ra * rb / 3.0 + rc;\n    float rppp = rp * rp * rp, rqq = rq * rq;\n\n    float p2 = abs(rp);\n    float v1 = 1.5 / rp * rq;\n\n    float lambda;\n    if (rqq * 0.25 + rppp / 27.0 > 0.0) {\n        float v2 = v1 * sqrt(3.0 / p2);\n        if (rp < 0.0) lambda = sign(rq) * cosh(acosh(v2 * -sign(rq)) / 3.0);\n        else lambda = sinh(asinh(v2) / 3.0);\n        lambda = -sqrt(p2 / 3.0) * lambda;\n    }\n\n    else lambda = sqrt(-rp / 3.0) * cos(acos(v1 * sqrt(-3.0 / rp)) / 3.0);\n    lambda = 2.0 * lambda - inflect;\n\n    // Solve two quadratic equations (checking for negative sqrts which should be complex)\n    if (lambda < 0.0) return n;\n    float sqrtLambda = sqrt(lambda);\n\n    float pLambda = p + lambda, qLambda = q / sqrtLambda;\n    float offs = 0.25 * bd.x;\n\n    float foo = lambda - 2.0 * (pLambda + qLambda);\n    float bar = lambda - 2.0 * (pLambda - qLambda);\n\n    if (foo >= 0.0) {\n        vec2 qRoots = atan((vec2(1.0, -1.0) * sqrt(foo) + sqrtLambda) * 0.5 - offs) * 2.0 + shift;\n\n        incidences[0] = vec2(cos(qRoots.x), sin(qRoots.x)) * rad + pos;\n        incidences[1] = vec2(cos(qRoots.y), sin(qRoots.y)) * rad + pos;\n\n        n += 2;\n    }\n\n    if (bar >= 0.0) {\n        vec2 qRoots = atan((vec2(1.0, -1.0) * sqrt(bar) - sqrtLambda) * 0.5 - offs) * 2.0 + shift;\n\n        incidences[n    ] = vec2(cos(qRoots.x), sin(qRoots.x)) * rad + pos;\n        incidences[n + 1] = vec2(cos(qRoots.y), sin(qRoots.y)) * rad + pos;\n\n        n += 2;\n    }\n\n    return n;\n}\n\n//////////////////////////////////////////////////////////////////////////////////////\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n\n    vec4 mouse = (vec4(iMouse.xy, abs(iMouse.zw)) - center.xyxy) / iResolution.y * 4.0;\n    vec2 uv = (fragCoord - center) / iResolution.y * 4.0;\n    vec3 color = vec3(0.0, 0.0, 0.0);\n    float unit = 8.0 / iResolution.y;\n\n    // Default if mouse is not set\n    if (ivec2(iMouse.xy) == ivec2(0)) {\n        mouse = vec4(2.541, 0.722, 0.402, 1.638);\n    }\n\n    vec2 light = mouse.zw;\n    vec2 point = mouse.xy;\n\n    vec2 reflectorPos = vec2(0.0, 0.0);\n    float reflectorRadius = 1.0 + 0.25 * sin(iTime);\n\n    // Draw the reflector\n    drawSDF(sdDisc(uv, reflectorPos, reflectorRadius) - 0.01, 1.0, vec3(0.0, 0.0, 1.0));\n\n    // Draw light path\n    vec2[4] i;\n    int n = getIncidences(light, point, reflectorPos, reflectorRadius, i);\n    for (int k=0; k < n; k++) {\n        vec2 fromLight = i[k] - light;\n        vec2 toPoint = point - i[k];\n        drawSDF(sdVectorArrow(uv - light, fromLight - normalize(fromLight) * 0.2) + 0.01, 1.0, vec3(1.0));\n        drawSDF(sdVectorArrow(uv - i[k], toPoint - normalize(toPoint) * 0.2) + 0.01, 1.0, vec3(1.0));\n    }\n\n    // Draw light, point, and incident point\n    drawSDF(sdDisc(uv, light, 0.05), 1.0, vec3(0.0, 1.0, 0.0));\n    drawSDF(sdDisc(uv, point, 0.05), 1.0, vec3(1.0, 0.0, 0.0));\n    for (int k=0; k < n; k++) {\n        drawSDF(sdDisc(uv, i[k], 0.05), 1.0, vec3(1.0, 0.8, 0.0));\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}