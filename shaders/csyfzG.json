{
    "Shader": {
        "info": {
            "date": "1698320449",
            "description": "Orig: My attempt to create contour lines. First implementation was using a laplace filter matrix, now using fwidth. Thanks for your help! \nMy edit: I made it colorful (based on density) and added some different AA. Overall nothing special.",
            "flags": 0,
            "hasliked": 0,
            "id": "csyfzG",
            "likes": 1,
            "name": "Contour lines gradient",
            "published": 3,
            "tags": [
                "filter",
                "gradient",
                "sinus",
                "matrix",
                "fwidth",
                "laplace"
            ],
            "usePreview": 0,
            "username": "OzoneOnYou",
            "viewed": 231
        },
        "renderpass": [
            {
                "code": "float wave(float x, float y, float k) \n{\n    return sin(10.0*x+10.0*y) / 5.0 +\n           sin(20.0*x*k+15.0*y*k) / 3.0 +\n           sin(4.0*x+10.0*y) / -4.0 +\n           sin(y) / 2.0 +\n           sin(x*x*y*20.0*k) + \n           sin(x * 20.0*k + 4.0) / 5.0 +\n           sin(y * 30.0*k) / 5.0 + \n    \t   sin(x) / 4.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec3 col1 = vec3(0.8, 0.1, 0.5);\n    const vec3 col2 = vec3(0.1, 0.1, 0.8);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.xy *= 2.;\n    uv.x += cos(iTime/100.)/4. - 0.5;\n    uv.y += sin(iTime/100.)*2. -0.5;\n    \n    \n    float z = wave(uv.x, uv.y, 1./10.) + 2.0;\n    \n    \n    z *= 2.0 * (sin(iTime/20.)+2.);\n    float d = fract(z);\n    if(mod(z, 2.0) > 1.) d = 1.-d;\n     \n    vec3 col;\n    for(float i=0.; i<3.; i++){\n        col += vec3(step(d/fwidth(z*3.), 0.5+(iResolution.x+iResolution.y)/2000. - (i+1.)/3.)*((i+1.)/2.));\n    }\n    \n    \n    col *= mix(col1, col2, fwidth(z*4.)+0.3);\n    fragColor = vec4(col, 1.);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}