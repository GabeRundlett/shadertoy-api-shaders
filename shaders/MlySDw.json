{
    "Shader": {
        "info": {
            "date": "1484571545",
            "description": "easy 4 point clock",
            "flags": 0,
            "hasliked": 0,
            "id": "MlySDw",
            "likes": 2,
            "name": "EaseClock",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "easing"
            ],
            "usePreview": 0,
            "username": "parameterized",
            "viewed": 605
        },
        "renderpass": [
            {
                "code": "\nconst float PI = 3.1415926535897932384626433832795;\n\nfloat easeInOutCubic(float t)\n{\n    return t<0.5 ? 4.0*t*t*t : (t-1.0)*(2.0*t-2.0)*(2.0*t-2.0)+1.0;\n}\n\nfloat easeInOutQuint(float t)\n{\n    return t<0.5 ? 16.0*t*t*t*t*t : 1.0+16.0*(--t)*t*t*t*t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy-0.5*iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 col = vec3(0.92);\n    col = length(uv)<0.45 ? vec3(0) : col;\n    col = length(uv)<0.42 ? vec3(1) : col;\n    float t1 = floor(iTime)/4.0 + easeInOutQuint(fract(iTime))/4.0;\n    vec2 p1 = vec2(cos(t1*2.0*PI-PI/2.0), -sin(t1*2.0*PI-PI/2.0))*0.4;\n    col = distance(uv, p1)<0.02 ? vec3(0) : col;\n    float t2 = floor(iTime/4.0)/4.0 + easeInOutCubic(fract(iTime/4.0))/4.0;\n    vec2 p2 = vec2(cos(t2*2.0*PI-PI/2.0), -sin(t2*2.0*PI-PI/2.0))*0.36;\n    col = distance(uv, p2)<0.02 ? vec3(0) : col;\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}