{
    "Shader": {
        "info": {
            "date": "1624308112",
            "description": "In the last tutorial, I add a sphere distortion and sphere distortion with movement.\nToday I use iChannel2 to get input from the keyboard and use this input to move with an offset.\nThe source code is not perfect ...",
            "flags": 16,
            "hasliked": 0,
            "id": "sl23RV",
            "likes": 1,
            "name": "iChannel texture - 003",
            "published": 3,
            "tags": [
                "texture",
                "sphere",
                "keyboard",
                "ichannel"
            ],
            "usePreview": 0,
            "username": "catafest",
            "viewed": 490
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nconst float speed = 100.0;\n\n\nvec2 Keyboard(vec2 offset) {\n\n    float velocity = 0.1; // This will cause offset to change by 0.01 each time an arrow key is pressed\n    \n \n    vec2 left = texelFetch(iChannel2, ivec2(KEY_LEFT, 0), 0).x * vec2(-1, 0);\n    vec2 up = texelFetch(iChannel2, ivec2(KEY_UP,0), 0).x * vec2(0, 1);\n    vec2 right = texelFetch(iChannel2, ivec2(KEY_RIGHT, 0), 0).x * vec2(1, 0);\n    vec2 down = texelFetch(iChannel2, ivec2(KEY_DOWN, 0), 0).x * vec2(0, -1);\n    \n    offset += (left + up + right + down) * velocity;\n\n    return offset;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    // get poins \n    vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    // set surface formula\n    vec3 v = vec3(p.x, p.y, sqrt(1.0 - p.x * p.x - p.y * p.y));\n    // create normals \n    vec3 n = normalize(v);\n    \n    // https://en.wikipedia.org/wiki/Distortion_(optics)\n    vec2 sphere_distortion = vec2(atan(n.z, n.x) / PI,0.00000001 * p.y);\n    \n    // color is vec4 dimension\n    vec4 color = vec4(0.0,0.0,0.0,0.0);\n    \n    //color = texture(iChannel3);\n    vec2 offset = texelFetch(iChannel1, ivec2(0, 0), 0).xy;\n    // Pass in the offset of the last frame and return a new offset based on keyboard input\n    offset = Keyboard(offset);\n\n \n    \n    if (uv.x > 0.0 && uv.x < 0.5)\n    {\n   \t\t//color = texture(iChannel0, vec2(1.0 - (uv.x/0.5),uv.y/0.5)+ sphere_distortion);\n        // with movement iTime\n        color = texture(iChannel0, \n        vec2(\n        (iTime * 1.0 - (uv.x/0.5))  +  offset.x,\n        (uv.y/0.5)+offset.y\n        ) + sphere_distortion);\n    } \n    else if (uv.x > 0.5 && uv.x < 1.0) \n    { \n        //color = texture(iChannel1, vec2((uv.x/0.5),uv.y)+ sphere_distortion);\n        // with movement iTime\n        color = texture(iChannel0, \n        vec2(\n        (iTime -(uv.x/0.5))+ offset.x,\n        (uv.y)+offset.y\n        ) + sphere_distortion - 0.076);\n        \n    } \n\n    fragColor = vec4(color);\n    \n \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}