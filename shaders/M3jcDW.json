{
    "Shader": {
        "info": {
            "date": "1727298195",
            "description": "A simple path tracer using wavelengths to simulate light dispersion. It uses a 2d raymarching technique to traverse the rays.",
            "flags": 32,
            "hasliked": 0,
            "id": "M3jcDW",
            "likes": 3,
            "name": "2d path tracing",
            "published": 3,
            "tags": [
                "raytracing",
                "raymarching",
                "lens",
                "pathtracing",
                "dispersion",
                "lightsimulation",
                "wavelengths"
            ],
            "usePreview": 0,
            "username": "the0neboy",
            "viewed": 146
        },
        "renderpass": [
            {
                "code": "#define GAMMA 2.2\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 scol = texture(iChannel0, uv);\n    vec3 col = scol.rgb/scol.a;\n    \n    float l = max(max(col.r, col.g), col.b);\n    if (l > 1.) col /= l;\n    \n    col = pow(col, vec3(1./GAMMA));\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 cie_1964(float lambda) {\n    switch(int(lambda)) {\n        case 360: return vec3(0.000000122200, 0.000000013398, 0.000000535027);\n        case 361: return vec3(0.000000185138, 0.000000020294, 0.000000810720);\n        case 362: return vec3(0.000000278830, 0.000000030560, 0.000001221200);\n        case 363: return vec3(0.000000417470, 0.000000045740, 0.000001828700);\n        case 364: return vec3(0.000000621330, 0.000000068050, 0.000002722200);\n        case 365: return vec3(0.000000919270, 0.000000100650, 0.000004028300);\n        case 366: return vec3(0.000001351980, 0.000000147980, 0.000005925700);\n        case 367: return vec3(0.000001976540, 0.000000216270, 0.000008665100);\n        case 368: return vec3(0.000002872500, 0.000000314200, 0.000012596000);\n        case 369: return vec3(0.000004149500, 0.000000453700, 0.000018201000);\n        case 370: return vec3(0.000005958600, 0.000000651100, 0.000026143700);\n        case 371: return vec3(0.000008505600, 0.000000928800, 0.000037330000);\n        case 372: return vec3(0.000012068600, 0.000001317500, 0.000052987000);\n        case 373: return vec3(0.000017022600, 0.000001857200, 0.000074764000);\n        case 374: return vec3(0.000023868000, 0.000002602000, 0.000104870000);\n        case 375: return vec3(0.000033266000, 0.000003625000, 0.000146220000);\n        case 376: return vec3(0.000046087000, 0.000005019000, 0.000202660000);\n        case 377: return vec3(0.000063472000, 0.000006907000, 0.000279230000);\n        case 378: return vec3(0.000086892000, 0.000009449000, 0.000382450000);\n        case 379: return vec3(0.000118246000, 0.000012848000, 0.000520720000);\n        case 380: return vec3(0.000159952000, 0.000017364000, 0.000704776000);\n        case 381: return vec3(0.000215080000, 0.000023327000, 0.000948230000);\n        case 382: return vec3(0.000287490000, 0.000031150000, 0.001268200000);\n        case 383: return vec3(0.000381990000, 0.000041350000, 0.001686100000);\n        case 384: return vec3(0.000504550000, 0.000054560000, 0.002228500000);\n        case 385: return vec3(0.000662440000, 0.000071560000, 0.002927800000);\n        case 386: return vec3(0.000864500000, 0.000093300000, 0.003823700000);\n        case 387: return vec3(0.001121500000, 0.000120870000, 0.004964200000);\n        case 388: return vec3(0.001446160000, 0.000155640000, 0.006406700000);\n        case 389: return vec3(0.001853590000, 0.000199200000, 0.008219300000);\n        case 390: return vec3(0.002361600000, 0.000253400000, 0.010482200000);\n        case 391: return vec3(0.002990600000, 0.000320200000, 0.013289000000);\n        case 392: return vec3(0.003764500000, 0.000402400000, 0.016747000000);\n        case 393: return vec3(0.004710200000, 0.000502300000, 0.020980000000);\n        case 394: return vec3(0.005858100000, 0.000623200000, 0.026127000000);\n        case 395: return vec3(0.007242300000, 0.000768500000, 0.032344000000);\n        case 396: return vec3(0.008899600000, 0.000941700000, 0.039802000000);\n        case 397: return vec3(0.010870900000, 0.001147800000, 0.048691000000);\n        case 398: return vec3(0.013198900000, 0.001390300000, 0.059210000000);\n        case 399: return vec3(0.015929200000, 0.001674000000, 0.071576000000);\n        case 400: return vec3(0.019109700000, 0.002004400000, 0.086010900000);\n        case 401: return vec3(0.022788000000, 0.002386000000, 0.102740000000);\n        case 402: return vec3(0.027011000000, 0.002822000000, 0.122000000000);\n        case 403: return vec3(0.031829000000, 0.003319000000, 0.144020000000);\n        case 404: return vec3(0.037278000000, 0.003880000000, 0.168990000000);\n        case 405: return vec3(0.043400000000, 0.004509000000, 0.197120000000);\n        case 406: return vec3(0.050223000000, 0.005209000000, 0.228570000000);\n        case 407: return vec3(0.057764000000, 0.005985000000, 0.263470000000);\n        case 408: return vec3(0.066038000000, 0.006833000000, 0.301900000000);\n        case 409: return vec3(0.075033000000, 0.007757000000, 0.343870000000);\n        case 410: return vec3(0.084736000000, 0.008756000000, 0.389366000000);\n        case 411: return vec3(0.095041000000, 0.009816000000, 0.437970000000);\n        case 412: return vec3(0.105836000000, 0.010918000000, 0.489220000000);\n        case 413: return vec3(0.117066000000, 0.012058000000, 0.542900000000);\n        case 414: return vec3(0.128682000000, 0.013237000000, 0.598810000000);\n        case 415: return vec3(0.140638000000, 0.014456000000, 0.656760000000);\n        case 416: return vec3(0.152893000000, 0.015717000000, 0.716580000000);\n        case 417: return vec3(0.165416000000, 0.017025000000, 0.778120000000);\n        case 418: return vec3(0.178191000000, 0.018399000000, 0.841310000000);\n        case 419: return vec3(0.191214000000, 0.019848000000, 0.906110000000);\n        case 420: return vec3(0.204492000000, 0.021391000000, 0.972542000000);\n        case 421: return vec3(0.217650000000, 0.022992000000, 1.038900000000);\n        case 422: return vec3(0.230267000000, 0.024598000000, 1.103100000000);\n        case 423: return vec3(0.242311000000, 0.026213000000, 1.165100000000);\n        case 424: return vec3(0.253793000000, 0.027841000000, 1.224900000000);\n        case 425: return vec3(0.264737000000, 0.029497000000, 1.282500000000);\n        case 426: return vec3(0.275195000000, 0.031195000000, 1.338200000000);\n        case 427: return vec3(0.285301000000, 0.032927000000, 1.392600000000);\n        case 428: return vec3(0.295143000000, 0.034738000000, 1.446100000000);\n        case 429: return vec3(0.304869000000, 0.036654000000, 1.499400000000);\n        case 430: return vec3(0.314679000000, 0.038676000000, 1.553480000000);\n        case 431: return vec3(0.324355000000, 0.040792000000, 1.607200000000);\n        case 432: return vec3(0.333570000000, 0.042946000000, 1.658900000000);\n        case 433: return vec3(0.342243000000, 0.045114000000, 1.708200000000);\n        case 434: return vec3(0.350312000000, 0.047333000000, 1.754800000000);\n        case 435: return vec3(0.357719000000, 0.049602000000, 1.798500000000);\n        case 436: return vec3(0.364482000000, 0.051934000000, 1.839200000000);\n        case 437: return vec3(0.370493000000, 0.054337000000, 1.876600000000);\n        case 438: return vec3(0.375727000000, 0.056822000000, 1.910500000000);\n        case 439: return vec3(0.380158000000, 0.059399000000, 1.940800000000);\n        case 440: return vec3(0.383734000000, 0.062077000000, 1.967280000000);\n        case 441: return vec3(0.386327000000, 0.064737000000, 1.989100000000);\n        case 442: return vec3(0.387858000000, 0.067285000000, 2.005700000000);\n        case 443: return vec3(0.388396000000, 0.069764000000, 2.017400000000);\n        case 444: return vec3(0.387978000000, 0.072218000000, 2.024400000000);\n        case 445: return vec3(0.386726000000, 0.074704000000, 2.027300000000);\n        case 446: return vec3(0.384696000000, 0.077272000000, 2.026400000000);\n        case 447: return vec3(0.382006000000, 0.079979000000, 2.022300000000);\n        case 448: return vec3(0.378709000000, 0.082874000000, 2.015300000000);\n        case 449: return vec3(0.374915000000, 0.086000000000, 2.006000000000);\n        case 450: return vec3(0.370702000000, 0.089456000000, 1.994800000000);\n        case 451: return vec3(0.366089000000, 0.092947000000, 1.981400000000);\n        case 452: return vec3(0.361045000000, 0.096275000000, 1.965300000000);\n        case 453: return vec3(0.355518000000, 0.099535000000, 1.946400000000);\n        case 454: return vec3(0.349486000000, 0.102829000000, 1.924800000000);\n        case 455: return vec3(0.342957000000, 0.106256000000, 1.900700000000);\n        case 456: return vec3(0.335893000000, 0.109901000000, 1.874100000000);\n        case 457: return vec3(0.328284000000, 0.113835000000, 1.845100000000);\n        case 458: return vec3(0.320150000000, 0.118167000000, 1.813900000000);\n        case 459: return vec3(0.311475000000, 0.122932000000, 1.780600000000);\n        case 460: return vec3(0.302273000000, 0.128201000000, 1.745370000000);\n        case 461: return vec3(0.292858000000, 0.133457000000, 1.709100000000);\n        case 462: return vec3(0.283502000000, 0.138323000000, 1.672300000000);\n        case 463: return vec3(0.274044000000, 0.143042000000, 1.634700000000);\n        case 464: return vec3(0.264263000000, 0.147787000000, 1.595600000000);\n        case 465: return vec3(0.254085000000, 0.152761000000, 1.554900000000);\n        case 466: return vec3(0.243392000000, 0.158102000000, 1.512200000000);\n        case 467: return vec3(0.232187000000, 0.163941000000, 1.467300000000);\n        case 468: return vec3(0.220488000000, 0.170362000000, 1.419900000000);\n        case 469: return vec3(0.208198000000, 0.177425000000, 1.370000000000);\n        case 470: return vec3(0.195618000000, 0.185190000000, 1.317560000000);\n        case 471: return vec3(0.183034000000, 0.193025000000, 1.262400000000);\n        case 472: return vec3(0.170222000000, 0.200313000000, 1.205000000000);\n        case 473: return vec3(0.157348000000, 0.207156000000, 1.146600000000);\n        case 474: return vec3(0.144650000000, 0.213644000000, 1.088000000000);\n        case 475: return vec3(0.132349000000, 0.219940000000, 1.030200000000);\n        case 476: return vec3(0.120584000000, 0.226170000000, 0.973830000000);\n        case 477: return vec3(0.109456000000, 0.232467000000, 0.919430000000);\n        case 478: return vec3(0.099042000000, 0.239025000000, 0.867460000000);\n        case 479: return vec3(0.089388000000, 0.245997000000, 0.818280000000);\n        case 480: return vec3(0.080507000000, 0.253589000000, 0.772125000000);\n        case 481: return vec3(0.072034000000, 0.261876000000, 0.728290000000);\n        case 482: return vec3(0.063710000000, 0.270643000000, 0.686040000000);\n        case 483: return vec3(0.055694000000, 0.279645000000, 0.645530000000);\n        case 484: return vec3(0.048117000000, 0.288694000000, 0.606850000000);\n        case 485: return vec3(0.041072000000, 0.297665000000, 0.570060000000);\n        case 486: return vec3(0.034642000000, 0.306469000000, 0.535220000000);\n        case 487: return vec3(0.028896000000, 0.315035000000, 0.502340000000);\n        case 488: return vec3(0.023876000000, 0.323335000000, 0.471400000000);\n        case 489: return vec3(0.019628000000, 0.331366000000, 0.442390000000);\n        case 490: return vec3(0.016172000000, 0.339133000000, 0.415254000000);\n        case 491: return vec3(0.013300000000, 0.347860000000, 0.390024000000);\n        case 492: return vec3(0.010759000000, 0.358326000000, 0.366399000000);\n        case 493: return vec3(0.008542000000, 0.370001000000, 0.344015000000);\n        case 494: return vec3(0.006661000000, 0.382464000000, 0.322689000000);\n        case 495: return vec3(0.005132000000, 0.395379000000, 0.302356000000);\n        case 496: return vec3(0.003982000000, 0.408482000000, 0.283036000000);\n        case 497: return vec3(0.003239000000, 0.421588000000, 0.264816000000);\n        case 498: return vec3(0.002934000000, 0.434619000000, 0.247848000000);\n        case 499: return vec3(0.003114000000, 0.447601000000, 0.232318000000);\n        case 500: return vec3(0.003816000000, 0.460777000000, 0.218502000000);\n        case 501: return vec3(0.005095000000, 0.474340000000, 0.205851000000);\n        case 502: return vec3(0.006936000000, 0.488200000000, 0.193596000000);\n        case 503: return vec3(0.009299000000, 0.502340000000, 0.181736000000);\n        case 504: return vec3(0.012147000000, 0.516740000000, 0.170281000000);\n        case 505: return vec3(0.015444000000, 0.531360000000, 0.159249000000);\n        case 506: return vec3(0.019156000000, 0.546190000000, 0.148673000000);\n        case 507: return vec3(0.023250000000, 0.561180000000, 0.138609000000);\n        case 508: return vec3(0.027690000000, 0.576290000000, 0.129096000000);\n        case 509: return vec3(0.032444000000, 0.591500000000, 0.120215000000);\n        case 510: return vec3(0.037465000000, 0.606741000000, 0.112044000000);\n        case 511: return vec3(0.042956000000, 0.622150000000, 0.104710000000);\n        case 512: return vec3(0.049114000000, 0.637830000000, 0.098196000000);\n        case 513: return vec3(0.055920000000, 0.653710000000, 0.092361000000);\n        case 514: return vec3(0.063349000000, 0.669680000000, 0.087088000000);\n        case 515: return vec3(0.071358000000, 0.685660000000, 0.082248000000);\n        case 516: return vec3(0.079901000000, 0.701550000000, 0.077744000000);\n        case 517: return vec3(0.088909000000, 0.717230000000, 0.073456000000);\n        case 518: return vec3(0.098293000000, 0.732570000000, 0.069268000000);\n        case 519: return vec3(0.107949000000, 0.747460000000, 0.065060000000);\n        case 520: return vec3(0.117749000000, 0.761757000000, 0.060709000000);\n        case 521: return vec3(0.127839000000, 0.775340000000, 0.056457000000);\n        case 522: return vec3(0.138450000000, 0.788220000000, 0.052609000000);\n        case 523: return vec3(0.149516000000, 0.800460000000, 0.049122000000);\n        case 524: return vec3(0.161041000000, 0.812140000000, 0.045954000000);\n        case 525: return vec3(0.172953000000, 0.823330000000, 0.043050000000);\n        case 526: return vec3(0.185209000000, 0.834120000000, 0.040368000000);\n        case 527: return vec3(0.197755000000, 0.844600000000, 0.037839000000);\n        case 528: return vec3(0.210538000000, 0.854870000000, 0.035384000000);\n        case 529: return vec3(0.223460000000, 0.865040000000, 0.032949000000);\n        case 530: return vec3(0.236491000000, 0.875211000000, 0.030451000000);\n        case 531: return vec3(0.249633000000, 0.885370000000, 0.028029000000);\n        case 532: return vec3(0.262972000000, 0.895370000000, 0.025862000000);\n        case 533: return vec3(0.276515000000, 0.905150000000, 0.023920000000);\n        case 534: return vec3(0.290269000000, 0.914650000000, 0.022174000000);\n        case 535: return vec3(0.304213000000, 0.923810000000, 0.020584000000);\n        case 536: return vec3(0.318361000000, 0.932550000000, 0.019127000000);\n        case 537: return vec3(0.332705000000, 0.940810000000, 0.017740000000);\n        case 538: return vec3(0.347232000000, 0.948520000000, 0.016403000000);\n        case 539: return vec3(0.361926000000, 0.955600000000, 0.015064000000);\n        case 540: return vec3(0.376772000000, 0.961988000000, 0.013676000000);\n        case 541: return vec3(0.391683000000, 0.967540000000, 0.012308000000);\n        case 542: return vec3(0.406594000000, 0.972230000000, 0.011056000000);\n        case 543: return vec3(0.421539000000, 0.976170000000, 0.009915000000);\n        case 544: return vec3(0.436517000000, 0.979460000000, 0.008872000000);\n        case 545: return vec3(0.451584000000, 0.982200000000, 0.007918000000);\n        case 546: return vec3(0.466782000000, 0.984520000000, 0.007030000000);\n        case 547: return vec3(0.482147000000, 0.986520000000, 0.006223000000);\n        case 548: return vec3(0.497738000000, 0.988320000000, 0.005453000000);\n        case 549: return vec3(0.513606000000, 0.990020000000, 0.004714000000);\n        case 550: return vec3(0.529826000000, 0.991761000000, 0.003988000000);\n        case 551: return vec3(0.546440000000, 0.993530000000, 0.003289000000);\n        case 552: return vec3(0.563426000000, 0.995230000000, 0.002646000000);\n        case 553: return vec3(0.580726000000, 0.996770000000, 0.002063000000);\n        case 554: return vec3(0.598290000000, 0.998090000000, 0.001533000000);\n        case 555: return vec3(0.616053000000, 0.999110000000, 0.001091000000);\n        case 556: return vec3(0.633948000000, 0.999770000000, 0.000711000000);\n        case 557: return vec3(0.651901000000, 1.000000000000, 0.000407000000);\n        case 558: return vec3(0.669824000000, 0.999710000000, 0.000184000000);\n        case 559: return vec3(0.687632000000, 0.998850000000, 0.000047000000);\n        case 560: return vec3(0.705224000000, 0.997340000000, 0.000000000000);\n        case 561: return vec3(0.722773000000, 0.995260000000, 0.000000000000);\n        case 562: return vec3(0.740483000000, 0.992740000000, 0.000000000000);\n        case 563: return vec3(0.758273000000, 0.989750000000, 0.000000000000);\n        case 564: return vec3(0.776083000000, 0.986300000000, 0.000000000000);\n        case 565: return vec3(0.793832000000, 0.982380000000, 0.000000000000);\n        case 566: return vec3(0.811436000000, 0.977980000000, 0.000000000000);\n        case 567: return vec3(0.828822000000, 0.973110000000, 0.000000000000);\n        case 568: return vec3(0.845879000000, 0.967740000000, 0.000000000000);\n        case 569: return vec3(0.862525000000, 0.961890000000, 0.000000000000);\n        case 570: return vec3(0.878655000000, 0.955552000000, 0.000000000000);\n        case 571: return vec3(0.894208000000, 0.948601000000, 0.000000000000);\n        case 572: return vec3(0.909206000000, 0.940981000000, 0.000000000000);\n        case 573: return vec3(0.923672000000, 0.932798000000, 0.000000000000);\n        case 574: return vec3(0.937638000000, 0.924158000000, 0.000000000000);\n        case 575: return vec3(0.951162000000, 0.915175000000, 0.000000000000);\n        case 576: return vec3(0.964283000000, 0.905954000000, 0.000000000000);\n        case 577: return vec3(0.977068000000, 0.896608000000, 0.000000000000);\n        case 578: return vec3(0.989590000000, 0.887249000000, 0.000000000000);\n        case 579: return vec3(1.001910000000, 0.877986000000, 0.000000000000);\n        case 580: return vec3(1.014160000000, 0.868934000000, 0.000000000000);\n        case 581: return vec3(1.026500000000, 0.860164000000, 0.000000000000);\n        case 582: return vec3(1.038800000000, 0.851519000000, 0.000000000000);\n        case 583: return vec3(1.051000000000, 0.842963000000, 0.000000000000);\n        case 584: return vec3(1.062900000000, 0.834393000000, 0.000000000000);\n        case 585: return vec3(1.074300000000, 0.825623000000, 0.000000000000);\n        case 586: return vec3(1.085200000000, 0.816764000000, 0.000000000000);\n        case 587: return vec3(1.095200000000, 0.807544000000, 0.000000000000);\n        case 588: return vec3(1.104200000000, 0.797947000000, 0.000000000000);\n        case 589: return vec3(1.112000000000, 0.787893000000, 0.000000000000);\n        case 590: return vec3(1.118520000000, 0.777405000000, 0.000000000000);\n        case 591: return vec3(1.123800000000, 0.766490000000, 0.000000000000);\n        case 592: return vec3(1.128000000000, 0.755309000000, 0.000000000000);\n        case 593: return vec3(1.131100000000, 0.743845000000, 0.000000000000);\n        case 594: return vec3(1.133200000000, 0.732190000000, 0.000000000000);\n        case 595: return vec3(1.134300000000, 0.720353000000, 0.000000000000);\n        case 596: return vec3(1.134300000000, 0.708281000000, 0.000000000000);\n        case 597: return vec3(1.133300000000, 0.696055000000, 0.000000000000);\n        case 598: return vec3(1.131200000000, 0.683621000000, 0.000000000000);\n        case 599: return vec3(1.128100000000, 0.671048000000, 0.000000000000);\n        case 600: return vec3(1.123990000000, 0.658341000000, 0.000000000000);\n        case 601: return vec3(1.118900000000, 0.645545000000, 0.000000000000);\n        case 602: return vec3(1.112900000000, 0.632718000000, 0.000000000000);\n        case 603: return vec3(1.105900000000, 0.619815000000, 0.000000000000);\n        case 604: return vec3(1.098000000000, 0.606887000000, 0.000000000000);\n        case 605: return vec3(1.089100000000, 0.593878000000, 0.000000000000);\n        case 606: return vec3(1.079200000000, 0.580781000000, 0.000000000000);\n        case 607: return vec3(1.068400000000, 0.567653000000, 0.000000000000);\n        case 608: return vec3(1.056700000000, 0.554490000000, 0.000000000000);\n        case 609: return vec3(1.044000000000, 0.541228000000, 0.000000000000);\n        case 610: return vec3(1.030480000000, 0.527963000000, 0.000000000000);\n        case 611: return vec3(1.016000000000, 0.514634000000, 0.000000000000);\n        case 612: return vec3(1.000800000000, 0.501363000000, 0.000000000000);\n        case 613: return vec3(0.984790000000, 0.488124000000, 0.000000000000);\n        case 614: return vec3(0.968080000000, 0.474935000000, 0.000000000000);\n        case 615: return vec3(0.950740000000, 0.461834000000, 0.000000000000);\n        case 616: return vec3(0.932800000000, 0.448823000000, 0.000000000000);\n        case 617: return vec3(0.914340000000, 0.435917000000, 0.000000000000);\n        case 618: return vec3(0.895390000000, 0.423153000000, 0.000000000000);\n        case 619: return vec3(0.876030000000, 0.410526000000, 0.000000000000);\n        case 620: return vec3(0.856297000000, 0.398057000000, 0.000000000000);\n        case 621: return vec3(0.836350000000, 0.385835000000, 0.000000000000);\n        case 622: return vec3(0.816290000000, 0.373951000000, 0.000000000000);\n        case 623: return vec3(0.796050000000, 0.362311000000, 0.000000000000);\n        case 624: return vec3(0.775610000000, 0.350863000000, 0.000000000000);\n        case 625: return vec3(0.754930000000, 0.339554000000, 0.000000000000);\n        case 626: return vec3(0.733990000000, 0.328309000000, 0.000000000000);\n        case 627: return vec3(0.712780000000, 0.317118000000, 0.000000000000);\n        case 628: return vec3(0.691290000000, 0.305936000000, 0.000000000000);\n        case 629: return vec3(0.669520000000, 0.294737000000, 0.000000000000);\n        case 630: return vec3(0.647467000000, 0.283493000000, 0.000000000000);\n        case 631: return vec3(0.625110000000, 0.272222000000, 0.000000000000);\n        case 632: return vec3(0.602520000000, 0.260990000000, 0.000000000000);\n        case 633: return vec3(0.579890000000, 0.249877000000, 0.000000000000);\n        case 634: return vec3(0.557370000000, 0.238946000000, 0.000000000000);\n        case 635: return vec3(0.535110000000, 0.228254000000, 0.000000000000);\n        case 636: return vec3(0.513240000000, 0.217853000000, 0.000000000000);\n        case 637: return vec3(0.491860000000, 0.207780000000, 0.000000000000);\n        case 638: return vec3(0.471080000000, 0.198072000000, 0.000000000000);\n        case 639: return vec3(0.450960000000, 0.188748000000, 0.000000000000);\n        case 640: return vec3(0.431567000000, 0.179828000000, 0.000000000000);\n        case 641: return vec3(0.412870000000, 0.171285000000, 0.000000000000);\n        case 642: return vec3(0.394750000000, 0.163059000000, 0.000000000000);\n        case 643: return vec3(0.377210000000, 0.155151000000, 0.000000000000);\n        case 644: return vec3(0.360190000000, 0.147535000000, 0.000000000000);\n        case 645: return vec3(0.343690000000, 0.140211000000, 0.000000000000);\n        case 646: return vec3(0.327690000000, 0.133170000000, 0.000000000000);\n        case 647: return vec3(0.312170000000, 0.126400000000, 0.000000000000);\n        case 648: return vec3(0.297110000000, 0.119892000000, 0.000000000000);\n        case 649: return vec3(0.282500000000, 0.113640000000, 0.000000000000);\n        case 650: return vec3(0.268329000000, 0.107633000000, 0.000000000000);\n        case 651: return vec3(0.254590000000, 0.101870000000, 0.000000000000);\n        case 652: return vec3(0.241300000000, 0.096347000000, 0.000000000000);\n        case 653: return vec3(0.228480000000, 0.091063000000, 0.000000000000);\n        case 654: return vec3(0.216140000000, 0.086010000000, 0.000000000000);\n        case 655: return vec3(0.204300000000, 0.081187000000, 0.000000000000);\n        case 656: return vec3(0.192950000000, 0.076583000000, 0.000000000000);\n        case 657: return vec3(0.182110000000, 0.072198000000, 0.000000000000);\n        case 658: return vec3(0.171770000000, 0.068024000000, 0.000000000000);\n        case 659: return vec3(0.161920000000, 0.064052000000, 0.000000000000);\n        case 660: return vec3(0.152568000000, 0.060281000000, 0.000000000000);\n        case 661: return vec3(0.143670000000, 0.056697000000, 0.000000000000);\n        case 662: return vec3(0.135200000000, 0.053292000000, 0.000000000000);\n        case 663: return vec3(0.127130000000, 0.050059000000, 0.000000000000);\n        case 664: return vec3(0.119480000000, 0.046998000000, 0.000000000000);\n        case 665: return vec3(0.112210000000, 0.044096000000, 0.000000000000);\n        case 666: return vec3(0.105310000000, 0.041345000000, 0.000000000000);\n        case 667: return vec3(0.098786000000, 0.038750700000, 0.000000000000);\n        case 668: return vec3(0.092610000000, 0.036297800000, 0.000000000000);\n        case 669: return vec3(0.086773000000, 0.033983200000, 0.000000000000);\n        case 670: return vec3(0.081260600000, 0.031800400000, 0.000000000000);\n        case 671: return vec3(0.076048000000, 0.029739500000, 0.000000000000);\n        case 672: return vec3(0.071114000000, 0.027791800000, 0.000000000000);\n        case 673: return vec3(0.066454000000, 0.025955100000, 0.000000000000);\n        case 674: return vec3(0.062062000000, 0.024226300000, 0.000000000000);\n        case 675: return vec3(0.057930000000, 0.022601700000, 0.000000000000);\n        case 676: return vec3(0.054050000000, 0.021077900000, 0.000000000000);\n        case 677: return vec3(0.050412000000, 0.019650500000, 0.000000000000);\n        case 678: return vec3(0.047006000000, 0.018315300000, 0.000000000000);\n        case 679: return vec3(0.043823000000, 0.017068600000, 0.000000000000);\n        case 680: return vec3(0.040850800000, 0.015905100000, 0.000000000000);\n        case 681: return vec3(0.038072000000, 0.014818300000, 0.000000000000);\n        case 682: return vec3(0.035468000000, 0.013800800000, 0.000000000000);\n        case 683: return vec3(0.033031000000, 0.012849500000, 0.000000000000);\n        case 684: return vec3(0.030753000000, 0.011960700000, 0.000000000000);\n        case 685: return vec3(0.028623000000, 0.011130300000, 0.000000000000);\n        case 686: return vec3(0.026635000000, 0.010355500000, 0.000000000000);\n        case 687: return vec3(0.024781000000, 0.009633200000, 0.000000000000);\n        case 688: return vec3(0.023052000000, 0.008959900000, 0.000000000000);\n        case 689: return vec3(0.021441000000, 0.008332400000, 0.000000000000);\n        case 690: return vec3(0.019941300000, 0.007748800000, 0.000000000000);\n        case 691: return vec3(0.018544000000, 0.007204600000, 0.000000000000);\n        case 692: return vec3(0.017241000000, 0.006697500000, 0.000000000000);\n        case 693: return vec3(0.016027000000, 0.006225100000, 0.000000000000);\n        case 694: return vec3(0.014896000000, 0.005785000000, 0.000000000000);\n        case 695: return vec3(0.013842000000, 0.005375100000, 0.000000000000);\n        case 696: return vec3(0.012862000000, 0.004994100000, 0.000000000000);\n        case 697: return vec3(0.011949000000, 0.004639200000, 0.000000000000);\n        case 698: return vec3(0.011100000000, 0.004309300000, 0.000000000000);\n        case 699: return vec3(0.010311000000, 0.004002800000, 0.000000000000);\n        case 700: return vec3(0.009576880000, 0.003717740000, 0.000000000000);\n        case 701: return vec3(0.008894000000, 0.003452620000, 0.000000000000);\n        case 702: return vec3(0.008258100000, 0.003205830000, 0.000000000000);\n        case 703: return vec3(0.007666400000, 0.002976230000, 0.000000000000);\n        case 704: return vec3(0.007116300000, 0.002762810000, 0.000000000000);\n        case 705: return vec3(0.006605200000, 0.002564560000, 0.000000000000);\n        case 706: return vec3(0.006130600000, 0.002380480000, 0.000000000000);\n        case 707: return vec3(0.005690300000, 0.002209710000, 0.000000000000);\n        case 708: return vec3(0.005281900000, 0.002051320000, 0.000000000000);\n        case 709: return vec3(0.004903300000, 0.001904490000, 0.000000000000);\n        case 710: return vec3(0.004552630000, 0.001768470000, 0.000000000000);\n        case 711: return vec3(0.004227500000, 0.001642360000, 0.000000000000);\n        case 712: return vec3(0.003925800000, 0.001525350000, 0.000000000000);\n        case 713: return vec3(0.003645700000, 0.001416720000, 0.000000000000);\n        case 714: return vec3(0.003385900000, 0.001315950000, 0.000000000000);\n        case 715: return vec3(0.003144700000, 0.001222390000, 0.000000000000);\n        case 716: return vec3(0.002920800000, 0.001135550000, 0.000000000000);\n        case 717: return vec3(0.002713000000, 0.001054940000, 0.000000000000);\n        case 718: return vec3(0.002520200000, 0.000980140000, 0.000000000000);\n        case 719: return vec3(0.002341100000, 0.000910660000, 0.000000000000);\n        case 720: return vec3(0.002174960000, 0.000846190000, 0.000000000000);\n        case 721: return vec3(0.002020600000, 0.000786290000, 0.000000000000);\n        case 722: return vec3(0.001877300000, 0.000730680000, 0.000000000000);\n        case 723: return vec3(0.001744100000, 0.000678990000, 0.000000000000);\n        case 724: return vec3(0.001620500000, 0.000631010000, 0.000000000000);\n        case 725: return vec3(0.001505700000, 0.000586440000, 0.000000000000);\n        case 726: return vec3(0.001399200000, 0.000545110000, 0.000000000000);\n        case 727: return vec3(0.001300400000, 0.000506720000, 0.000000000000);\n        case 728: return vec3(0.001208700000, 0.000471110000, 0.000000000000);\n        case 729: return vec3(0.001123600000, 0.000438050000, 0.000000000000);\n        case 730: return vec3(0.001044760000, 0.000407410000, 0.000000000000);\n        case 731: return vec3(0.000971560000, 0.000378962000, 0.000000000000);\n        case 732: return vec3(0.000903600000, 0.000352543000, 0.000000000000);\n        case 733: return vec3(0.000840480000, 0.000328001000, 0.000000000000);\n        case 734: return vec3(0.000781870000, 0.000305208000, 0.000000000000);\n        case 735: return vec3(0.000727450000, 0.000284041000, 0.000000000000);\n        case 736: return vec3(0.000676900000, 0.000264375000, 0.000000000000);\n        case 737: return vec3(0.000629960000, 0.000246109000, 0.000000000000);\n        case 738: return vec3(0.000586370000, 0.000229143000, 0.000000000000);\n        case 739: return vec3(0.000545870000, 0.000213376000, 0.000000000000);\n        case 740: return vec3(0.000508258000, 0.000198730000, 0.000000000000);\n        case 741: return vec3(0.000473300000, 0.000185115000, 0.000000000000);\n        case 742: return vec3(0.000440800000, 0.000172454000, 0.000000000000);\n        case 743: return vec3(0.000410580000, 0.000160678000, 0.000000000000);\n        case 744: return vec3(0.000382490000, 0.000149730000, 0.000000000000);\n        case 745: return vec3(0.000356380000, 0.000139550000, 0.000000000000);\n        case 746: return vec3(0.000332110000, 0.000130086000, 0.000000000000);\n        case 747: return vec3(0.000309550000, 0.000121290000, 0.000000000000);\n        case 748: return vec3(0.000288580000, 0.000113106000, 0.000000000000);\n        case 749: return vec3(0.000269090000, 0.000105501000, 0.000000000000);\n        case 750: return vec3(0.000250969000, 0.000098428000, 0.000000000000);\n        case 751: return vec3(0.000234130000, 0.000091853000, 0.000000000000);\n        case 752: return vec3(0.000218470000, 0.000085738000, 0.000000000000);\n        case 753: return vec3(0.000203910000, 0.000080048000, 0.000000000000);\n        case 754: return vec3(0.000190350000, 0.000074751000, 0.000000000000);\n        case 755: return vec3(0.000177730000, 0.000069819000, 0.000000000000);\n        case 756: return vec3(0.000165970000, 0.000065222000, 0.000000000000);\n        case 757: return vec3(0.000155020000, 0.000060939000, 0.000000000000);\n        case 758: return vec3(0.000144800000, 0.000056942000, 0.000000000000);\n        case 759: return vec3(0.000135280000, 0.000053217000, 0.000000000000);\n        case 760: return vec3(0.000126390000, 0.000049737000, 0.000000000000);\n        case 761: return vec3(0.000118100000, 0.000046491000, 0.000000000000);\n        case 762: return vec3(0.000110370000, 0.000043464000, 0.000000000000);\n        case 763: return vec3(0.000103150000, 0.000040635000, 0.000000000000);\n        case 764: return vec3(0.000096427000, 0.000038000000, 0.000000000000);\n        case 765: return vec3(0.000090151000, 0.000035540500, 0.000000000000);\n        case 766: return vec3(0.000084294000, 0.000033244800, 0.000000000000);\n        case 767: return vec3(0.000078830000, 0.000031100600, 0.000000000000);\n        case 768: return vec3(0.000073729000, 0.000029099000, 0.000000000000);\n        case 769: return vec3(0.000068969000, 0.000027230700, 0.000000000000);\n        case 770: return vec3(0.000064525800, 0.000025486000, 0.000000000000);\n        case 771: return vec3(0.000060376000, 0.000023856100, 0.000000000000);\n        case 772: return vec3(0.000056500000, 0.000022333200, 0.000000000000);\n        case 773: return vec3(0.000052880000, 0.000020910400, 0.000000000000);\n        case 774: return vec3(0.000049498000, 0.000019580800, 0.000000000000);\n        case 775: return vec3(0.000046339000, 0.000018338400, 0.000000000000);\n        case 776: return vec3(0.000043389000, 0.000017177700, 0.000000000000);\n        case 777: return vec3(0.000040634000, 0.000016093400, 0.000000000000);\n        case 778: return vec3(0.000038060000, 0.000015080000, 0.000000000000);\n        case 779: return vec3(0.000035657000, 0.000014133600, 0.000000000000);\n        case 780: return vec3(0.000033411700, 0.000013249000, 0.000000000000);\n        case 781: return vec3(0.000031315000, 0.000012422600, 0.000000000000);\n        case 782: return vec3(0.000029355000, 0.000011649900, 0.000000000000);\n        case 783: return vec3(0.000027524000, 0.000010927700, 0.000000000000);\n        case 784: return vec3(0.000025811000, 0.000010251900, 0.000000000000);\n        case 785: return vec3(0.000024209000, 0.000009619600, 0.000000000000);\n        case 786: return vec3(0.000022711000, 0.000009028100, 0.000000000000);\n        case 787: return vec3(0.000021308000, 0.000008474000, 0.000000000000);\n        case 788: return vec3(0.000019994000, 0.000007954800, 0.000000000000);\n        case 789: return vec3(0.000018764000, 0.000007468600, 0.000000000000);\n        case 790: return vec3(0.000017611500, 0.000007012800, 0.000000000000);\n        case 791: return vec3(0.000016532000, 0.000006585800, 0.000000000000);\n        case 792: return vec3(0.000015521000, 0.000006185700, 0.000000000000);\n        case 793: return vec3(0.000014574000, 0.000005810700, 0.000000000000);\n        case 794: return vec3(0.000013686000, 0.000005459000, 0.000000000000);\n        case 795: return vec3(0.000012855000, 0.000005129800, 0.000000000000);\n        case 796: return vec3(0.000012075000, 0.000004820600, 0.000000000000);\n        case 797: return vec3(0.000011345000, 0.000004531200, 0.000000000000);\n        case 798: return vec3(0.000010659000, 0.000004259100, 0.000000000000);\n        case 799: return vec3(0.000010017000, 0.000004004200, 0.000000000000);\n        case 800: return vec3(0.000009413630, 0.000003764730, 0.000000000000);\n        case 801: return vec3(0.000008847900, 0.000003539950, 0.000000000000);\n        case 802: return vec3(0.000008317100, 0.000003329140, 0.000000000000);\n        case 803: return vec3(0.000007819000, 0.000003131150, 0.000000000000);\n        case 804: return vec3(0.000007351600, 0.000002945290, 0.000000000000);\n        case 805: return vec3(0.000006913000, 0.000002770810, 0.000000000000);\n        case 806: return vec3(0.000006501500, 0.000002607050, 0.000000000000);\n        case 807: return vec3(0.000006115300, 0.000002453290, 0.000000000000);\n        case 808: return vec3(0.000005752900, 0.000002308940, 0.000000000000);\n        case 809: return vec3(0.000005412700, 0.000002173380, 0.000000000000);\n        case 810: return vec3(0.000005093470, 0.000002046130, 0.000000000000);\n        case 811: return vec3(0.000004793800, 0.000001926620, 0.000000000000);\n        case 812: return vec3(0.000004512500, 0.000001814400, 0.000000000000);\n        case 813: return vec3(0.000004248300, 0.000001708950, 0.000000000000);\n        case 814: return vec3(0.000004000200, 0.000001609880, 0.000000000000);\n        case 815: return vec3(0.000003767100, 0.000001516770, 0.000000000000);\n        case 816: return vec3(0.000003548000, 0.000001429210, 0.000000000000);\n        case 817: return vec3(0.000003342100, 0.000001346860, 0.000000000000);\n        case 818: return vec3(0.000003148500, 0.000001269450, 0.000000000000);\n        case 819: return vec3(0.000002966500, 0.000001196620, 0.000000000000);\n        case 820: return vec3(0.000002795310, 0.000001128090, 0.000000000000);\n        case 821: return vec3(0.000002634500, 0.000001063680, 0.000000000000);\n        case 822: return vec3(0.000002483400, 0.000001003130, 0.000000000000);\n        case 823: return vec3(0.000002341400, 0.000000946220, 0.000000000000);\n        case 824: return vec3(0.000002207800, 0.000000892630, 0.000000000000);\n        case 825: return vec3(0.000002082000, 0.000000842160, 0.000000000000);\n        case 826: return vec3(0.000001963600, 0.000000794640, 0.000000000000);\n        case 827: return vec3(0.000001851900, 0.000000749780, 0.000000000000);\n        case 828: return vec3(0.000001746500, 0.000000707440, 0.000000000000);\n        case 829: return vec3(0.000001647100, 0.000000667480, 0.000000000000);\n        case 830: return vec3(0.000001553140, 0.000000629700, 0.000000000000);\n        default: return vec3(0.0);\n    }\n}\n#define PI 3.141592653\n\nstruct Material {\n    vec3 color;\n    float emission;\n    float metallic;\n    float transparency;\n    float IOR;\n    float dispersion;\n};\n//---------------------------------------------------------------------------\nvec2 smin(vec2 A, vec2 B) {\n    if (A.x < B.x) return A;\n    return B;\n}\nvec2 smax(vec2 A, vec2 B) {\n    if (A.x > B.x) return A;\n    return B;\n}\nvoid fold(vec2 o, vec2 n, inout vec2 p) {\n    n = normalize(n);\n    float d = dot(p-o, n);\n    p -= 2.*n*max(d,0.);\n}\n//---------------------------------------------------------------------------\nfloat sdfSphere(vec2 p, float r) {\n    return length(p)-r;\n}\nfloat sdfBox(vec2 p, vec2 b) {\n    vec2 q = abs(p) - b;\n    return length(max(q,0.)) + min(max(q.x,q.y),0.);\n}\nfloat sdfLens(vec2 p, float r, float d) {\n    d = 2.*r-d;\n    return max(\n        sdfSphere(p - vec2(0., d*.5), r),\n        sdfSphere(p + vec2(0., d*.5), r)\n    );\n}\nfloat sdfInvLens(vec2 p, float r, float d, float d2) {\n    float s = sqrt(r*d-.25*d*d);\n    float B = sdfBox(p, vec2(s, .5*(d+d2)));\n    B = max(B, -sdfLens(p-vec2(0.,.5*(d+d2)), r, d));\n    B = max(B, -sdfLens(p+vec2(0.,.5*(d+d2)), r, d));\n    return B;\n}\n//---------------------------------------------------------------------------\nfloat sdfMengerSponge(vec2 p, int iterations) {\n    float scale = 1.;\n    \n    for (int i = 0; i < iterations; i++) {\n        p *= 3.;\n        \n        p = abs(p);\n        fold(vec2(.5, .5), vec2(-1., 1.), p);\n        fold(vec2(0., .5), vec2(0., -1.), p);\n        \n        p -= 1.;\n    }\n    \n    return sdfBox(p, vec2(.5))/scale;\n}\n//---------------------------------------------------------------------------\nmat2x2 rotate(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2x2(vec2(c,-s), vec2(s,c));\n}\n//---------------------------------------------------------------------------\nfloat hash11(inout uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return float(x)/4294967295.;\n}\nvec2 randomVector(inout uint state) {\n    float a = hash11(state)*2.*PI;\n    return vec2(cos(a), sin(a));\n    //return normalize(vec2(hash11(state), hash11(state))*2.-1.);\n}\n//---------------------------------------------------------------------------\nvec3 wl_rgb(float lambda) {\n    vec3 xyz = cie_1964(lambda);\n    float x = xyz.x;\n    float y = xyz.y;\n    float z = xyz.z;\n    \n    vec3 rgb;\n    rgb.r =  3.2404542*x - 1.5371385*y - 0.4985314*z;\n\trgb.g = -0.9692660*x + 1.8760108*y + 0.0415560*z;\n\trgb.b =  0.0556434*x - 0.2040259*y + 1.0572252*z;\n    return clamp(rgb, 0., 1.);\n}\nfloat presence_single(vec3 A, vec3 B) {\n    return dot(A,B)/dot(A,vec3(1.));\n}\nfloat presence(vec3 A, vec3 B) {\n    float t = presence_single(A,B);\n    t = pow(t, 3.);\n    return clamp(t, 0., 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define ZERO int(min(0., iTime))\n\n#define MAX_ITERATIONS 1000\n#define MAX_DIST 30.\n#define MIN_DIST .0005\n#define ZOOM 8.\n\n#define MAX_BOUNCES 20\n#define SAMPLES 1\n\n#define USE_WAVELENGTHS 1\n#define STACK_FRAMES 1\n\nvec2 map(vec2 p) {\n    vec2 light = vec2(sdfBox(p-vec2(-6.,0.), vec2(.045)), 0);\n    light = smin(light, vec2(max(\n        sdfBox(p-vec2(-6.,0.), vec2(.3)),\n        -sdfBox(p-vec2(-5.85,0.), vec2(.2,.05))\n    ), 4));\n    \n    vec2 light2 = vec2(sdfSphere(vec2(p.x,abs(p.y))-vec2(-6.5,3.), .2), 1);\n    vec2 obj = vec2(sdfLens((p-vec2(-4., 0.))*rotate(PI*.5), 2., .7), 2);\n    vec2 obj2 = vec2(sdfSphere((p-vec2(-2., 0.)), .6), 2);\n    vec2 obj3 = vec2(sdfLens((p-vec2(.3, 0.))*rotate(PI*.5), 2., .7), 2);\n    vec2 obj4 = vec2(sdfInvLens((p-vec2(2.4, 0.))*rotate(PI*.25), 1.6, .5, .2), 3);\n    \n    vec2 scene = smin(light, light2);\n    scene = smin(scene, obj);\n    scene = smin(scene, obj2);\n    scene = smin(scene, obj3);\n    scene = smin(scene, obj4);\n    return scene;\n}\nvec2 sdfNormal(vec2 p) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xx*map( p + k.xx*h ).x+\n                     k.xy*map( p + k.xy*h ).x+\n                     k.yx*map( p + k.yx*h ).x+\n                     k.yy*map( p + k.yy*h ).x);\n}\n\nMaterial getMaterial(int id) {\n    Material mat;\n    mat.IOR = 1.;\n    \n    if (id == 0) {\n        mat.color = vec3(1.000,1.000,1.000);\n        mat.emission = 10.;\n    } else if (id == 1) {\n        mat.color = vec3(1.000,1.000,1.000);\n        mat.emission = 1.;\n    } else if (id == 2) {\n        mat.color = vec3(1.000,1.000,1.000);\n        mat.transparency = 1.;\n        mat.IOR = 2.5;\n        mat.dispersion = .3;\n    } else if (id == 3) {\n        mat.color = vec3(1.000,1.000,1.000);\n        mat.metallic = 1.;\n    } else if (id == 4) {\n        mat.color = vec3(0.329,0.231,0.231);\n    }\n    \n    return mat;\n}\nMaterial trace(vec2 ro, vec2 rd, inout float t, bool inside) {\n    t = 0.;\n    Material mat;\n    \n    for (int i = ZERO; i < MAX_ITERATIONS; i++) {\n        vec2 dat = map(ro + rd*t);\n        if (inside) dat.x = -dat.x;\n        \n        if (dat.x < MIN_DIST) {\n            mat = getMaterial(int(dat.y));\n            break;\n        } else if (t > MAX_DIST) {\n            t = -1.;\n            break;\n        }\n        t += dat.x;\n    }\n    return mat;\n}\nvec3 render(vec2 ro, inout uint state) {\n    vec2 rd = randomVector(state);\n    \n    #if USE_WAVELENGTHS\n    float wavelength = hash11(state)*360.+370.;\n    vec3 rayColor = 3.*wl_rgb(wavelength);\n    #else\n    vec3 rayColor = vec3(1.);\n    #endif\n    vec3 incomingLight = vec3(0.);\n    \n    bool inside = map(ro).x<0.;\n    float t = 0.;\n    for (int i = ZERO; i < MAX_BOUNCES; i++) {\n        Material mat = trace(ro, rd, t, inside);\n        if (t < 0.) break;\n        \n        vec2 hit = ro + rd*t;\n        vec2 normal = sdfNormal(hit);\n        if (inside) {normal = -normal;}\n        \n        #if USE_WAVELENGTHS\n        float consumeChance = 1. - presence(rayColor, mat.color);\n        if (hash11(state) < consumeChance) break;\n        #else\n        rayColor *= mat.color*.9999;\n        #endif\n        incomingLight += mat.emission*rayColor;\n        \n        ro = hit + normal*MIN_DIST*2.;\n        \n        if (hash11(state) < mat.transparency) {\n            float IOR = mat.IOR;\n            #if USE_WAVELENGTHS\n            IOR += mat.dispersion*1e5/(wavelength*wavelength);\n            #endif\n            if (!inside) {IOR = 1./IOR;}\n            \n            vec2 ref = refract(rd, normal, IOR);\n            if (length(ref) < .5) {\n                rd = reflect(rd, normal);\n            } else {\n                ro = hit - normal*MIN_DIST*3.;\n                rd = ref;\n                inside = !inside;\n            }\n        } else if (hash11(state) < mat.metallic) {\n            rd = reflect(rd, normal);\n        } else {\n            rd = normalize(randomVector(state) + normal);\n        }\n    }\n    \n    return incomingLight;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    uint state = uint(fragCoord.x+fragCoord.y*iResolution.y)+uint(fract(iResolution.x*iTime/100000.)*100000.*1000.);\n    hash11(state);\n    vec2 ro = uv*ZOOM;\n    \n    vec3 col = vec3(0.);\n    for (int i = ZERO; i < SAMPLES; i++) {\n        col += render(ro, state);\n    }\n    col /= float(SAMPLES);\n    \n    //STACKING FRAMES------------------------------------------------\n    #if STACK_FRAMES\n    vec4 prevcol = texelFetch(iChannel3, ivec2(fragCoord), 0);\n    if (iMouse.z > .5) prevcol *= 0.;\n    fragColor = prevcol + vec4(col, 1.);\n    #else\n    fragColor = vec4(col, 1.);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}