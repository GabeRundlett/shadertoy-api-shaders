{
    "Shader": {
        "info": {
            "date": "1671620875",
            "description": "my first time programming reflective raymarching :)",
            "flags": 0,
            "hasliked": 0,
            "id": "mtlGWn",
            "likes": 5,
            "name": "reflections (my first time)",
            "published": 3,
            "tags": [
                "raymarching",
                "reflection",
                "ray",
                "raymarch",
                "round",
                "sphere",
                "reflections",
                "box",
                "plane",
                "reflect",
                "reflects",
                "checkred"
            ],
            "usePreview": 0,
            "username": "SONENEIS",
            "viewed": 238
        },
        "renderpass": [
            {
                "code": "mat2 rot(float a){return mat2(cos(a),-sin(a),sin(a),cos(a));}\n\nfloat sdSphere(vec3 p,float r){\n\treturn length(p) - r;\n}\n\nfloat sdBox(vec3 p,vec3 b){\n\tvec3 q = abs(p) - b;\n\treturn length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdPlane(vec3 p,vec3 n,float d){\n\treturn dot(p,n) + d;\n}\n\nvec2 opUn(vec2 a,vec2 b){\n\treturn a.y < b.y ? a : b;\n}\n\nvec2 scene(vec3 p){\n\tvec2 h = vec2(-1.0,99999999.9);\n\t\n\th = opUn(h,vec2(0.0,sdPlane(p,vec3(0,1,0),0.5)));\n\t//h = opUn(h,vec2(0.0,sdBox(p-vec3(0.0,-0.5,0.0),vec3(1.0,0.0,1.0))));\n\th = opUn(h,vec2(1.0,sdSphere(p,0.5)));\n\th = opUn(h,vec2(2.0,sdBox(p-vec3(1.0,0.0,-1.0),vec3(0.5))));\n\th = opUn(h,vec2(3.0,sdBox(p-vec3(-1.0,0.0,1.0),vec3(0.25))-0.25));\n\t\n\treturn h.yx;\n}\n\nvec3 calcNormal(vec3 p){\n\tvec2 e = vec2(-1,1) * 0.001;\n\treturn normalize(vec3(\n\t\te.xyy * scene(p + e.xyy).x +\n\t\te.yyx * scene(p + e.yyx).x +\n\t\te.yxy * scene(p + e.yxy).x +\n\t\te.xxx * scene(p + e.xxx).x\n\t));\n}\n\nvec2 raymarch(vec3 ro,vec3 rd){\n  float d = 0.0, id = -1.0;\n  \n  for(int i=0;i<128;i++){\n  \tvec3 p = ro + rd*d;\n  \tvec2 h = scene(p);\n  \th.x = abs(h.x);\n  \td += h.x;\n  \tid = h.y;\n  \tif(h.x < 0.001 || d > 20.0) break;\n  }\n  \n  if(d > 20.0) d = -1.0;\n\n  return vec2(d,id);\n}\n\nvec3 render3d(vec2 uv){\n\tvec3 col = vec3(0.0);\n\t\n  vec3 ro = vec3(0.0,0.0,2.5);\n  vec3 rd = normalize(vec3(uv,-1.0));\n  \n  ro.y += 0.5;\n  rd.zy *= rot(0.25);\n  \n  ro.xz *= rot(iTime*0.5);\n  rd.xz *= rot(iTime*0.5);\n  \n  vec3 lin = vec3(0.0);\n  for(int i=0;i<3;i++){\n    vec2 h = raymarch(ro,rd);\n  \tvec3 pos = ro + rd*h.x;\n  \tvec3 nor = calcNormal(pos);\n  \tvec3 ref = reflect(rd,nor);\n  \tvec3 mate = vec3(0.0);\n    \n    if(h.y == 0.0){\n    \tmate += mod(dot(floor(pos.xz*4.0),vec2(1.0)),2.0);\n    }else if(h.y == 1.0){\n  \t  mate += vec3(1.0,0.0,0.0);\n    }else if(h.y == 2.0){\n    \tmate += vec3(0.0,1.0,0.0);\n    }else if(h.y == 3.0){\n    \tmate += vec3(0.0,0.0,1.0);\n    }\n    \n    if(h.x > 0.0 && h.y != -1.0){\n      vec3 lig = normalize(vec3(0.5));\n      float dif = clamp(dot(nor,lig),0.0,1.0);\n      float spe = pow(clamp(dot(ref,lig),0.0,1.0),10.0);\n      float sha = step(raymarch(pos+nor*0.02,lig).x,0.0);\n  \t\n      lin += mate * dif * sha;\n      lin += spe * dif * sha;\n\n      ro = pos + nor*0.02;\n      rd = ref;\n      \n      lin = mix(lin,vec3(0.0),h.x*h.x*h.x*0.001);\n      \n      if(i == 0) col = lin;\n      else col *= lin;\n    }\n  }\n  \n\treturn col;\n}\n\nvoid mainImage(out vec4 fragColor,vec2 fragCoord){\n  vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  vec3 col = vec3(0.0);\n  \n  col += render3d(uv);\n  \n  fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}