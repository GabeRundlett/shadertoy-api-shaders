{
    "Shader": {
        "info": {
            "date": "1690014086",
            "description": "A learning project of ray-tracing.",
            "flags": 0,
            "hasliked": 0,
            "id": "dsBfRd",
            "likes": 6,
            "name": "Order and freedom",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "SlInevitable2003",
            "viewed": 220
        },
        "renderpass": [
            {
                "code": "//============================================================================\n// PROJECT ID:SWS3005_07\n//\n// GROUP NUMBER:07\n//\n// STUDENT NAME:Xu Xinyao\n// NUS User ID.:t0930028\n//\n// STUDENT NAME:Xue jing\n// NUS User ID.:t0930095\n//\n// STUDENT NAME:Lu Biran\n// NUS User ID.:t0930098\n//\n// COMMENTS TO GRADER:\n//\n//============================================================================\n\n\n// FRAGMENT SHADER FOR SHADERTOY\n// Run this at https://www.shadertoy.com/new\n// See documentation at https://www.shadertoy.com/howto\n\n// Your browser must support WebGL 2.0.\n// Check your browser at https://webglreport.com/?v=2\n\n\n//============================================================================\n// Constants.\n//============================================================================\n\nconst float PI = 3.1415926536;\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\n\n// Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * PI / 180.0;\n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n// Constants for the scene objects.\nconst int NUM_LIGHTS = 2;\nconst int NUM_MATERIALS = 14;\nconst int NUM_PLANES = 2;\nconst int NUM_SPHERES = 43;\n\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.\n};\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that shown in\n// Lecture Topic B08 (Basic Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS {\n//                   I_a * k_a +\n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\n\nvec3 create_satellite(int center_id, float circle_radius, float speed, int type, bool inverse)\n{\n    vec3 center = Sphere[center_id].center;\n    vec3 ret;\n    float offset = inverse ? PI : 0.0;\n    switch (type) {\n    case 0:\n        ret = vec3(center.x + circle_radius * cos(iTime * speed + offset),\n                   center.y,\n                   center.z + circle_radius * sin(iTime * speed + offset));\n        break;\n    case 1:\n        ret = vec3(center.x + circle_radius * sin(iTime * speed + offset),\n                   center.y + circle_radius * cos(iTime * speed + offset),\n                   center.z);\n        break;\n    case 2:\n        ret = vec3(center.x,\n                   center.y + circle_radius * sin(iTime * speed + offset),\n                   center.z + circle_radius * cos(iTime * speed + offset));\n        break;\n    }\n    return ret;\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 0;\n\n    // Vertical plane.\n    Plane[1].A = 0.0;\n    Plane[1].B = 0.0;\n    Plane[1].C = 1.0;\n    Plane[1].D = 7.0;\n    Plane[1].materialID = 13;\n\n    // Center bouncing sphere.\n    Sphere[0].center = vec3( 2.5 * sin(0.8 * iTime) + sin(-1.2 * iTime) + sin(2.0 * iTime) + sin(-2.8 * iTime), 5.0, 2.5 * cos(-0.8 * iTime) + cos(1.2 * iTime) + cos(-2.0 * iTime) + cos(2.8 * iTime) );\n    Sphere[0].radius = 0.50;\n    Sphere[0].materialID = 1;\n\n    // Circling sphere.\n    Sphere[1].center = create_satellite(0, 2.0, 2.0, 0, false);\n    Sphere[1].radius = 0.30;\n    Sphere[1].materialID = 2;\n    \n    Sphere[2].center = create_satellite(0, 2.0, 2.0, 1, false);\n    Sphere[2].radius = 0.30;\n    Sphere[2].materialID = 3;\n    \n    Sphere[3].center = create_satellite(0, 2.0, 2.0, 2, false);\n    Sphere[3].radius = 0.30;\n    Sphere[3].materialID = 4;\n    \n    Sphere[4].center = create_satellite(1, 0.5, 3.0, 0, false);\n    Sphere[4].radius = 0.10;\n    Sphere[4].materialID = 5;\n    \n    Sphere[5].center = create_satellite(1, 0.5, 3.0, 1, false);\n    Sphere[5].radius = 0.10;\n    Sphere[5].materialID = 6;\n    \n    Sphere[6].center = create_satellite(1, 0.5, 3.0, 2, false);\n    Sphere[6].radius = 0.10;\n    Sphere[6].materialID = 7;\n    \n    Sphere[7].center = create_satellite(2, 0.5, 3.0, 0, false);\n    Sphere[7].radius = 0.10;\n    Sphere[7].materialID = 7;\n    \n    Sphere[8].center = create_satellite(2, 0.5, 3.0, 1, false);\n    Sphere[8].radius = 0.10;\n    Sphere[8].materialID = 8;\n    \n    Sphere[9].center = create_satellite(2, 0.5, 3.0, 2, false);\n    Sphere[9].radius = 0.10;\n    Sphere[9].materialID = 9;\n   \n    Sphere[10].center = create_satellite(3, 0.5, 3.0, 0, false);\n    Sphere[10].radius = 0.10;\n    Sphere[10].materialID = 10;\n    \n    Sphere[11].center = create_satellite(3, 0.5, 3.0, 1, false);\n    Sphere[11].radius = 0.10;\n    Sphere[11].materialID = 11;\n    \n    Sphere[12].center = create_satellite(3, 0.5, 3.0, 2, false);\n    Sphere[12].radius = 0.10;\n    Sphere[12].materialID = 12;\n    \n    // Circling sphere.\n    Sphere[13].center = create_satellite(0, 2.0, 2.0, 0, true);\n    Sphere[13].radius = 0.30;\n    Sphere[13].materialID = 2;\n    \n    Sphere[14].center = create_satellite(0, 2.0, 2.0, 1, true);\n    Sphere[14].radius = 0.30;\n    Sphere[14].materialID = 3;\n    \n    Sphere[15].center = create_satellite(0, 2.0, 2.0, 2, true);\n    Sphere[15].radius = 0.30;\n    Sphere[15].materialID = 4;\n    \n    Sphere[16].center = create_satellite(13, 0.5, 3.0, 0, true);\n    Sphere[16].radius = 0.10;\n    Sphere[16].materialID = 5;\n    \n    Sphere[17].center = create_satellite(13, 0.5, 3.0, 1, true);\n    Sphere[17].radius = 0.10;\n    Sphere[17].materialID = 6;\n    \n    Sphere[18].center = create_satellite(13, 0.5, 3.0, 2, true);\n    Sphere[18].radius = 0.10;\n    Sphere[18].materialID = 7;\n    \n    Sphere[19].center = create_satellite(14, 0.5, 3.0, 0, true);\n    Sphere[19].radius = 0.10;\n    Sphere[19].materialID = 7;\n    \n    Sphere[20].center = create_satellite(14, 0.5, 3.0, 1, true);\n    Sphere[20].radius = 0.10;\n    Sphere[20].materialID = 8;\n    \n    Sphere[21].center = create_satellite(14, 0.5, 3.0, 2, true);\n    Sphere[21].radius = 0.10;\n    Sphere[21].materialID = 9;\n    \n    Sphere[22].center = create_satellite(15, 0.5, 3.0, 0, true);\n    Sphere[22].radius = 0.10;\n    Sphere[22].materialID = 10;\n    \n    Sphere[23].center = create_satellite(15, 0.5, 3.0, 1, true);\n    Sphere[23].radius = 0.10;\n    Sphere[23].materialID = 11;\n    \n    Sphere[24].center = create_satellite(15, 0.5, 3.0, 2, true);\n    Sphere[24].radius = 0.10;\n    Sphere[24].materialID = 12;\n    \n    Sphere[25].center = create_satellite(1, 0.5, 3.0, 0, true);\n    Sphere[25].radius = 0.10;\n    Sphere[25].materialID = 5;\n    \n    Sphere[26].center = create_satellite(1, 0.5, 3.0, 1, true);\n    Sphere[26].radius = 0.10;\n    Sphere[26].materialID = 6;\n    \n    Sphere[27].center = create_satellite(1, 0.5, 3.0, 2, true);\n    Sphere[27].radius = 0.10;\n    Sphere[27].materialID = 7;\n    \n    Sphere[28].center = create_satellite(2, 0.5, 3.0, 0, true);\n    Sphere[28].radius = 0.10;\n    Sphere[28].materialID = 7;\n    \n    Sphere[29].center = create_satellite(2, 0.5, 3.0, 1, true);\n    Sphere[29].radius = 0.10;\n    Sphere[29].materialID = 8;\n    \n    Sphere[30].center = create_satellite(2, 0.5, 3.0, 2, true);\n    Sphere[30].radius = 0.10;\n    Sphere[30].materialID = 9;\n    \n    Sphere[31].center = create_satellite(3, 0.5, 3.0, 0, true);\n    Sphere[31].radius = 0.10;\n    Sphere[31].materialID = 10;\n    \n    Sphere[32].center = create_satellite(3, 0.5, 3.0, 1, true);\n    Sphere[32].radius = 0.10;\n    Sphere[32].materialID = 11;\n    \n    Sphere[33].center = create_satellite(3, 0.5, 3.0, 2, true);\n    Sphere[33].radius = 0.10;\n    Sphere[33].materialID = 12;\n    \n    Sphere[34].center = create_satellite(13, 0.5, 3.0, 0, false);\n    Sphere[34].radius = 0.10;\n    Sphere[34].materialID = 5;\n    \n    Sphere[35].center = create_satellite(13, 0.5, 3.0, 1, false);\n    Sphere[35].radius = 0.10;\n    Sphere[35].materialID = 6;\n    \n    Sphere[36].center = create_satellite(13, 0.5, 3.0, 2, false);\n    Sphere[36].radius = 0.10;\n    Sphere[36].materialID = 7;\n    \n    Sphere[37].center = create_satellite(14, 0.5, 3.0, 0, false);\n    Sphere[37].radius = 0.10;\n    Sphere[37].materialID = 7;\n    \n    Sphere[38].center = create_satellite(14, 0.5, 3.0, 1, false);\n    Sphere[38].radius = 0.10;\n    Sphere[38].materialID = 8;\n    \n    Sphere[39].center = create_satellite(14, 0.5, 3.0, 2, false);\n    Sphere[39].radius = 0.10;\n    Sphere[39].materialID = 9;\n    \n    Sphere[40].center = create_satellite(15, 0.5, 3.0, 0, false);\n    Sphere[40].radius = 0.10;\n    Sphere[40].materialID = 10;\n    \n    Sphere[41].center = create_satellite(15, 0.5, 3.0, 1, false);\n    Sphere[41].radius = 0.10;\n    Sphere[41].materialID = 11;\n    \n    Sphere[42].center = create_satellite(15, 0.5, 3.0, 2, false);\n    Sphere[42].radius = 0.10;\n    Sphere[42].materialID = 12;\n\n    // Silver material.\n    Material[0].k_d = vec3( 0.5, 0.5, 1.0 );\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    // Gold material.\n    Material[1].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[1].k_a = 0.2 * Material[1].k_d;\n    Material[1].k_r = 2.0 * Material[1].k_d;\n    Material[1].k_rg = 0.5 * Material[1].k_r;\n    Material[1].n = 64.0;\n\n    // Green plastic material.\n    Material[2].k_d = vec3( 0.8, 0.0, 0.8 );\n    Material[2].k_a = 0.2 * Material[2].k_d;\n    Material[2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.5 * Material[2].k_r;\n    Material[2].n = 128.0;\n    \n    // Red plastic material.\n    Material[3].k_d = vec3( 0.8, 0.0, 0.0 );\n    Material[3].k_a = 0.2 * Material[3].k_d;\n    Material[3].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[3].k_rg = 0.5 * Material[3].k_r;\n    Material[3].n = 128.0;\n    \n    // Blue plastic material.\n    Material[4].k_d = vec3( 0.0, 0.0, 0.8 );\n    Material[4].k_a = 0.2 * Material[4].k_d;\n    Material[4].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[4].k_rg = 0.5 * Material[4].k_r;\n    Material[4].n = 128.0;\n    \n    // purple plastic material.\n    Material[5].k_d = vec3( 0.7, 0.1, 0.7 );\n    Material[5].k_a = 0.2 * Material[5].k_d;\n    Material[5].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[5].k_rg = 0.5 * Material[5].k_r;\n    Material[5].n = 128.0;\n\n    // dream plastic material.\n    Material[6].k_d = vec3( 0.9, 0.5, 0.3 );\n    Material[6].k_a = 0.2 * Material[6].k_d;\n    Material[6].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[6].k_rg = 0.5 * Material[6].k_r;\n    Material[6].n = 128.0;\n    \n    // ? plastic material.\n    Material[7].k_d = vec3( 0.5, 0.8, 0.4 );\n    Material[7].k_a = 0.2 * Material[7].k_d;\n    Material[7].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[7].k_rg = 0.5 * Material[7].k_r;\n    Material[7].n = 128.0;\n    \n    // ? plastic material.\n    Material[8].k_d = vec3( 0.2, 0.3, 0.5 );\n    Material[8].k_a = 0.2 * Material[8].k_d;\n    Material[8].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[8].k_rg = 0.5 * Material[8].k_r;\n    Material[8].n = 128.0;\n    \n    // ? plastic material.\n    Material[9].k_d = vec3( 0.7, 0.1, 0.1 );\n    Material[9].k_a = 0.2 * Material[9].k_d;\n    Material[9].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[9].k_rg = 0.5 * Material[9].k_r;\n    Material[9].n = 128.0;\n    \n    // ? plastic material.\n    Material[10].k_d = vec3( 0.1, 0.3, 0.1 );\n    Material[10].k_a = 0.2 * Material[10].k_d;\n    Material[10].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[10].k_rg = 0.5 * Material[10].k_r;\n    Material[10].n = 128.0;\n    \n    // ? plastic material.\n    Material[11].k_d = vec3( 0.7, 0.1, 0.9 );\n    Material[11].k_a = 0.2 * Material[11].k_d;\n    Material[11].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[11].k_rg = 0.5 * Material[11].k_r;\n    Material[11].n = 128.0;\n    \n    // ? plastic material.\n    Material[12].k_d = vec3( 0.2, 0.3, 0.2 );\n    Material[12].k_a = 0.2 * Material[12].k_d;\n    Material[12].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[12].k_rg = 0.5 * Material[12].k_r;\n    Material[12].n = 128.0;\n    \n    // Silver material.\n    Material[13].k_d = vec3( 1.0, 0.5, 0.0 );\n    Material[13].k_a = 0.2 * Material[0].k_d;\n    Material[13].k_r = 2.0 * Material[0].k_d;\n    Material[13].k_rg = 0.5 * Material[0].k_r;\n    Material[13].n = 64.0;\n\n    // Light 0.\n    Light[0].position = vec3( 4.0, 8.0 * abs(sin(iTime)), -3.0 );\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[0].I_source = vec3( 1.0 );\n\n    // Light 1.\n    Light[1].position = vec3( -4.0, 8.0* abs(sin(iTime)), -3.0 );\n    Light[1].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[1].I_source = vec3( 1.0 );\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection\n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    vec3 oc = ray.o - sph.center;\n    float a = dot(ray.d, ray.d);\n    float b = 2.0f * dot(oc, ray.d);\n    float c = dot(oc, oc) - sph.radius * sph.radius;\n    float discriminant = b * b - 4.0f * a * c;\n\n    if (discriminant < 0.0f)\n        return false; // No intersection.\n\n    // Find the nearest positive root of the quadratic equation.\n    float sqrt_discriminant = sqrt(discriminant);\n    float t0 = (-b - sqrt_discriminant) / (2.0f * a);\n    float t1 = (-b + sqrt_discriminant) / (2.0f * a);\n\n    // Choose the smaller positive root as the hit point.\n    float nearest_t = min(t0, t1);\n    if (nearest_t < tmin || nearest_t > tmax)\n        return false; // The hit point is outside the acceptable range.\n\n    // We have a hit - output the results.\n    t = nearest_t;\n    hitPos = ray.o + nearest_t * ray.d;\n    hitNormal = normalize(hitPos - sph.center); // Normal points outward from the sphere center.\n    return true;\n\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    vec3 oc = ray.o - sph.center;\n    float a = dot(ray.d, ray.d);\n    float b = 2.0f * dot(oc, ray.d);\n    float c = dot(oc, oc) - sph.radius * sph.radius;\n    float discriminant = b * b - 4.0f * a * c;\n\n    if (discriminant < 0.0f)\n        return false; // No intersection.\n\n    // Find the nearest positive root of the quadratic equation.\n    float sqrt_discriminant = sqrt(discriminant);\n    float t0 = (-b - sqrt_discriminant) / (2.0f * a);\n    float t1 = (-b + sqrt_discriminant) / (2.0f * a);\n\n    // Choose the smaller positive root as the hit point.\n    float nearest_t = min(t0, t1);\n    if (nearest_t < tmin || nearest_t > tmax)\n        return false; // The hit point is outside the acceptable range.\n\n    // We have a hit.\n    return true;\n\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a +\n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray,\n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg )\n{\n    // Find whether and where the ray hits some object.\n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    \n    // Intersect with planes.\n    for (int i = 0; i < NUM_PLANES; i++)\n    {\n        if (IntersectPlane(Plane[i], ray, DEFAULT_TMIN, nearest_t, temp_t, temp_hitPos, temp_hitNormal))\n        {\n            hasHitSomething = true;\n            if (nearest_t > temp_t) {\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                nearest_hitMatID = Plane[i].materialID;\n            }\n        }\n    }\n\n    // Intersect with spheres.\n    for (int i = 0; i < NUM_SPHERES; i++)\n    {\n        if (IntersectSphere(Sphere[i], ray, DEFAULT_TMIN, nearest_t, temp_t, temp_hitPos, temp_hitNormal))\n        {\n            hasHitSomething = true;\n            if (nearest_t > temp_t) {\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                nearest_hitMatID = Sphere[i].materialID;\n            }\n        }\n    }\n\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Accumulate lighting from each light source on the nearest hit point.\n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the\n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n\n    // Iterate over each light source to compute lighting.\n    for (int i = 0; i < NUM_LIGHTS; i++)\n    {\n        vec3 L = normalize(Light[i].position - nearest_hitPos);\n        vec3 V = ray.o - nearest_hitPos;\n        bool inShadow = false;\n\n        // Check if the point is in shadow by casting a shadow ray to each light source.\n        for (int j = 0; j < NUM_PLANES; j++)\n        {\n            if (IntersectPlane(Plane[j], Ray_t(nearest_hitPos, L), DEFAULT_TMIN, length(V)))\n            {\n                inShadow = true;\n                break;\n            }\n        }\n\n        for (int j = 0; j < NUM_SPHERES; j++)\n        {\n            if (IntersectSphere(Sphere[j], Ray_t(nearest_hitPos, L), DEFAULT_TMIN, length(V)))\n            {\n                inShadow = true;\n                break;\n            }\n        }\n\n        // Compute the Phong lighting model and accumulate the result.\n        I_local += PhongLighting(L, nearest_hitNormal, -ray.d, inShadow, Material[nearest_hitMatID], Light[i]);\n    }\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0f * fragCoord.xy - iResolution.xy) / iResolution.y;\n    vec2 m = iMouse.xy / iResolution.xy;\n\n    // Position the camera.\n    vec3 cam_pos = vec3( 3.0f * sin(iTime / 3.0f + 5.0f * m.x), 6.0f, 1.0f * cos(iTime / 3.0f + 5.0f * m.x) + 5.0f );\n    vec3 cam_lookat = Sphere[0].center;\n    vec3 cam_up_vec = vec3( 0.0f, 1.0f, 0.0f );\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis) );\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ )\n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}