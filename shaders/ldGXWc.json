{
    "Shader": {
        "info": {
            "date": "1467036766",
            "description": "For procedural patterns and sound there is a classical trap: a space (or time) varying parameter can gives ugly fast changes (top) instead of what you expect. Indeed, you need to integrate the \"phase\" to get the right thing  (bottom). \n( mouse.x = time )",
            "flags": 0,
            "hasliked": 0,
            "id": "ldGXWc",
            "likes": 6,
            "name": "tuto: varying pattern param - 2",
            "published": 3,
            "tags": [
                "procedural",
                "noise",
                "sound",
                "pattern",
                "interpolation",
                "trap",
                "tuto",
                "smartblend"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1228
        },
        "renderpass": [
            {
                "code": "// noise extension of https://www.shadertoy.com/view/ldKSRt\n\n\n// For procedural patterns and sound there is a classical trap: \n// a space (or time) varying parameter can gives ugly fast changes (top)\n// instead of what you expect. \n// Indeed, you need to integrate the \"phase\" to get the right thing  (bottom). \n// see also https://www.desmos.com/calculator/7dbitjcfrf\n    \n#define f(x) ( 6.  + 4.*sin(x/5.)    )   // space varying frequency. is also phase derivative\n#define F(x) ( 6.*x -4.*cos(x/5.)*5. )   // its integration (i.e. absolute phase).\n                                         // noise (or sin for sound) is then just a post LUT.\n\nfloat noise( vec3 x ) // iq trick for infinite 3D noise https://www.shadertoy.com/view/XslGRr\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn -1.0+2.0*mix( rg.x, rg.y, f.z );\n}\n\nfloat mynoise(vec2 u) {\n    return noise(vec3(u,0));                // use procedural noise\n // return texture(iChannel0, u/256.).x;  // use image noise\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n\tvec2 R = iResolution.xy;\n    U = (U+U-R)/R.y; \n    float M = length(iMouse.xy/R)<.01 ? 8.*iTime \n                                      : iMouse.x;\n    O -= O; if (abs(U.y)<.01) return;\n    \n    U *= 20.;\n    float x = U.x += M, y = U.y;\n    \n/**/                        // --- draw marble noise\n    O += mynoise(.1*( y>0. ? f(x)*U : vec2(F(x), f(x)*y))) -O; \n    O += .5+.5*sin(4.*x +4.*O.x) -O;  O*=O;\n/**/       \n/**                         // --- draw pattern\n\tO = sin( U.y>0. ? f(x)*x     // wrong intuition: varying frequency * x\n                    : F(x)       // good solution: real phase = int (Dphase). Dphase = freq\n           ) +O-O;\n/**/\n/**    \n    O = .2/abs(             // --- draw function\n        sin( U.y>0. ? f(x)*x     // wrong intuition: varying frequency * x\n                    : F(x)       // good solution: real phase = int (Dphase). Dphase = freq\n           ) - (2.*fract(U.y)-1.)/.6) +O-O;\n/**/\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}