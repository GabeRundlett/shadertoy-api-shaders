{
    "Shader": {
        "info": {
            "date": "1671981677",
            "description": "raytracing in 2d!",
            "flags": 0,
            "hasliked": 0,
            "id": "mllGRB",
            "likes": 5,
            "name": "2d Raytracing",
            "published": 3,
            "tags": [
                "2d",
                "raytracing",
                "ray",
                "text",
                "circle",
                "i",
                "square",
                "rectangle",
                "green",
                "ball",
                "font",
                "normal",
                "box",
                "disk",
                "trace",
                "dark",
                "h"
            ],
            "usePreview": 0,
            "username": "SONENEIS",
            "viewed": 249
        },
        "renderpass": [
            {
                "code": "mat2 rot(float a){return mat2(cos(a),-sin(a),sin(a),cos(a));}\n\n//----------------------------------------------------//\n//--------------------- 2d sdfs ----------------------//\n//----------------------------------------------------//\n\n#define sdf(c,s) mix(col,c,smoothstep(3.0/iResolution.y,0.0,s));\n\nfloat sdCirc(vec2 p,float r){\n\treturn length(p) - r;\n}\n\nfloat sdRect(vec2 p,vec2 b){\n\tvec2 q = abs(p) - b;\n\treturn length(max(q,0.0)) + min(max(q.x,q.y),0.0);\n}\n\nfloat sdLine(vec2 p,float r,vec2 p1,vec2 p2){\n\tvec2 a = p - p1, b = p2 - p1;\n\tfloat h = clamp(dot(b,a)/dot(b,b),0.0,1.0);\n\treturn length(a - b*h) - r;\n}\n\n//----------------------------------------------------//\n//---------------------- scene -----------------------//\n//----------------------------------------------------//\n\n#define circsLen 8\n#define rectsLen 16\n\nstruct Circ{\n\tvec2 pos;\n\tfloat rad;\n} [circsLen] circs;\n\nstruct Rect{\n\tvec2 pos;\n\tvec2 size;\n} [rectsLen] rects;\n\nvoid initScene(){\n  // H\n  rects[0] = Rect(vec2(-0.15,0.0),vec2(0.03,0.15));\n  rects[1] = Rect(vec2(0.0,0.0),vec2(0.03,0.15));\n  rects[2] = Rect(vec2(-0.075,0.0),vec2(0.045,0.015));\n  rects[6] = Rect(vec2(0.0,0.14),vec2(0.045,0.015));\n  rects[7] = Rect(vec2(-0.15,0.14),vec2(0.045,0.015));\n  rects[8] = Rect(vec2(0.0,-0.14),vec2(0.045,0.015));\n  rects[9] = Rect(vec2(-0.15,-0.14),vec2(0.045,0.015));\n  // I\n  rects[3] = Rect(vec2(0.15,-0.05),vec2(0.03,0.1));\n  circs[0] = Circ(vec2(0.15,0.125),0.037);\n  rects[10] = Rect(vec2(0.15,-0.14),vec2(0.045,0.015));\n  rects[11] = Rect(vec2(0.16,0.05),vec2(0.04,0.015));\n  \n  //ranndom shaps\n  circs[1] = Circ(vec2(0.0,0.5),0.07);\n  circs[2] = Circ(vec2(0.3,0.4),0.1);\n  circs[3] = Circ(vec2(-0.2,0.3),0.11);\n  rects[4] = Rect(vec2(0.3,-0.4),vec2(0.1));\n  rects[5] = Rect(vec2(-0.2,-0.3),vec2(0.05));\n  circs[4] = Circ(vec2(-0.5,0.0),0.07);\n  circs[5] = Circ(vec2(-0.7,0.3),0.08);\n  rects[12] = Rect(vec2(-0.6,-0.3),vec2(0.06));\n  rects[13] = Rect(vec2(0.6,-0.3),vec2(0.08));\n  rects[14] = Rect(vec2(0.4,0.1),vec2(0.05));\n  circs[6] = Circ(vec2(0.7,0.3),0.12);\n  circs[7] = Circ(vec2(0.35,-0.2),0.05);\n  rects[15] = Rect(vec2(0.7,0.0),vec2(0.06));\n}\n\n\n//----------------------------------------------------//\n//------------------ 2d raytracer --------------------//\n//----------------------------------------------------//\n\nvec3 iUn(vec3 a,vec3 b){\n  return b.z > 0.0 && b.z < a.z ? b : a;\n}\n\nvec3 iCirc(vec2 ro,vec2 rd,float r){\n  float b = dot(ro,rd);\n  float c = dot(ro,ro) - r*r;\n  float h = b*b - c;\n  if(h < 0.0) return vec3(0,0,-1.0);\n  float tN = -b - sqrt(h);\n  float tF = -b + sqrt(h);\n  float t = tN > 0.0 ? tN : tF;\n  vec2 nor = (ro+rd*tN)/r;\n  return vec3(nor,t);\n}\n\nvec3 iRect(vec2 ro,vec2 rd,vec2 b){\n  vec2 m = 1.0/rd;\n  vec2 n = m*ro;\n  vec2 k = abs(m)*b;\n  vec2 t1 = -n - k;\n  vec2 t2 = -n + k;\n  float tN = max(t1.x,t1.y);\n  float tF = min(t2.x,t2.y);\n  if(tN > tF || tF < 0.0) return vec3(0,0,-1.0);\n  float t = tN > 0.0 ? tN : tF;\n  vec2 nor = tN > 0.0 ? step(vec2(tN),t1) : step(t2,vec2(tF));\n  nor *= sign(-rd);\n  return vec3(nor,t);\n}\n\n//xy: surface normal\n//z: scene sdf\n//w: t (I do not know what it means ;-;)\nvec4 raytrace(vec2 p,vec2 ro,vec2 rd){\n\tvec4 hit = vec4(0,0,vec2(999999999999.9));\n\n\tfor(int i=0;i<circsLen;i++){\n\t  Circ s = circs[i];\n\t  hit.xyw = iUn(hit.xyw,iCirc(ro-s.pos,rd,s.rad));\n\t  hit.z = min(hit.z,sdCirc(p-s.pos,s.rad));\n\t}\n\n\tfor(int i=0;i<rectsLen;i++){\n\t  Rect s = rects[i];\n\t  hit.xyw = iUn(hit.xyw,iRect(ro-s.pos,rd,s.size));\n\t  hit.z = min(hit.z,sdRect(p-s.pos,s.size));\n\t}\n  \n\treturn hit;\n}\n\n//-----------------------------------------------------//\n//--------------------- main loop ---------------------//\n//-----------------------------------------------------//\n\nvoid mainImage(out vec4 fragColor,vec2 fragCoord){\n  vec2 uv = 0.5*(2.0*fragCoord-iResolution.xy)/iResolution.y;\n  vec2 mo = 0.5*(2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n  vec3 col = vec3(0.05);\n  \n  initScene();\n  \n  vec2 ro = mo;\n  vec2 rd = normalize(vec2(1,0)) * rot(iTime);\n  \n  vec4 t = raytrace(uv,ro,rd);\n  vec2 pos = ro + rd*t.w;\n  \n  //draw scene\n  col = sdf(vec3(0),t.z-0.01);\n  col = sdf(vec3(0,1,0.5),t.z);\n  \n  //draw ray\n  col = sdf(vec3(0.5),sdLine(uv,0.002,ro,pos));\n  col = sdf(vec3(0.5),sdCirc(uv-ro,0.01));\n  \n  //draw normal\n  col = sdf(vec3(1,0,1),sdLine(uv,0.005,pos,pos+t.xy*0.07));\n\n  fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}