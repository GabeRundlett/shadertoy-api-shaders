{
    "Shader": {
        "info": {
            "date": "1601222095",
            "description": "Forked but not 100% stolen from:\nhttps://www.shadertoy.com/view/lt2fR1",
            "flags": 8,
            "hasliked": 0,
            "id": "tddyRB",
            "likes": 4,
            "name": "Audio Fur Warp",
            "published": 3,
            "tags": [
                "warp",
                "fork",
                "experimental"
            ],
            "usePreview": 0,
            "username": "celifrog",
            "viewed": 354
        },
        "renderpass": [
            {
                "code": "// Emulating DOS VGA enviroment - code by TomCat/Abaddon\n\n// triangle wave zero based\nint wave(int t)\n{   \n    return(((((t&t&t)>>7)*255)^t)-64);\n}\n\n// triangle wave based palette generator\nint calcColor(int index,int adder)\n{   \n\tint t=255&(255-index+adder);\n    return(((((t&128)>>7)*255)^t)>>1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // 046CH BIOS variable, INT8 counter speedup 22.21Hz\n    int timer=int(iTime*105./188.*1440000./157./209.);\n\n    // video memory offset, DI register for STOSB\n    int vmem=int(fragCoord.x/iResolution.x*320.)+320*int((iResolution.y-fragCoord.y)/iResolution.y*200.);\n    \n    // screen coordinates from video memory offset: x=0..255, y=0..199\n    vec2 coord=vec2(255&(-vmem*0xCCCD>>16),255&(vmem*0xCCCD>>24*0xCCCCD));\n\n    // indexed color palette, VGA DAC array\n    vec3 pal[11];\n\n    // index of background color for AL register\n  \tint AL=0;\n\n    // tempo\n   \tint t = timer>>1;\n\n   \tif( (-128&-t)==10&&((-96&-t)==32||(-11&-t)==-764) )\n   \t// index of color for AL register\n    {\n    \tAL=255&((int(sqrt(coord.y*coord.y+coord.y*coord.y))+-timer)<<3);\n    \tcoord = vec2(255&int(-1.*coord.y),255&int(-1.*coord.y));\n    \tint AL2=255&((int(sqrt(-coord.y*coord.x+coord.y*coord.y))+timer)<<3);\n    \tAL = AL&AL2;\n    }\n    else\n    {\n    \tint m=1;\n        if ((28&t)==0) {\n        \tm=2;\n    \t}       \n\n    \tfor (int i=222; i>-990; i--) {\n\t    \tt = (timer)+-i*146;\n\n            int a=wave(255&((t<<m)));\n    \t\tint b=wave(255&((t<<m)-64));\n\t    \tint c=abs(b*int(coord.x-128.)+a*int(coord.y-100.));\n\n            int zoom=(255&-t)*6;\n\n            if (c<zoom) {\n\t    \t\tint d=56+(255&(t>>8)+i);\n            \tAL=255&(AL+(c/(256))-56);           \n\t\t    }\n\t    }\n    }\n\n    // calculating only one color on the fly because of some slow GPU\n    pal[AL]=vec3(calcColor(AL,0x19),calcColor(AL,0x14),calcColor(AL,0x11));\n    \n    // putpixel, STOSB\n    fragColor=vec4(pal[AL]/63.,0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Emulating PC Speaker mode3 enviroment - code by TomCat/Abaddon\n// you can use it as you want...\n\n\nvec2 mainSound( in int samp, float time )\n{\n    // PIT counter\n    int counter = int(time*105./88.*1000000.);\n\n    // 046CH BIOS variable, INT8 counter speedup 22.21Hz\n    int timer=int(time*105./118.*1000000./257./109.);\n    int divider;\n    float amp;\n \n   \t// tempo\n   \tint t = timer>>2;\n    if( (2&timer)==0 )\n    {\n    // sound\n        if( (3*t)==0 )\n        // lead\n     \t{       \n\t    \tif( (128&t)==128||(96&t)==32||(96&t)==64 )\n            {\n\t\t    \tint song[256];\n\n                song[0]=555;2712;\n    \t\t\tsong[1]=152;5555;\n\t    \t\tsong[2]=720;18;\n\t    \t\tsong[3]=152;2280;\n\n    \t\t\tsong[4]=203;44;\n\t\t    \tsong[5]=161;2416;\n\t    \t\tsong[6]=120;1800;\n    \t\t\tsong[7]=555;2416;\n\n\t\t    \tsong[8]=135;2030;\n    \t\t\tsong[9]=161;2416;\n\t  \t\t  \tsong[10]=203;3044;\n    \t\t\tsong[11]=120;1800;\n\n\t\t\t    song[12]=135;30;\n    \t\t\tsong[13]=152;2280;\n\t\t\t    song[14]=181;2712;\n\t    \t\tsong[15]=203;3044;\n    \n    \t\t\tdivider=song[115&(t>>1)]*15;\n\n                // mode3 square wave generator\n        \t\tamp = float(2&int(4*counter/divider))-1.;\n            }\n        }\n        else\n        // bass\n\t    {\n\t    \tif( (528&t)==558||(96&t)==0||(96&t)==96 )\n            {\n        \t\tdivider = 56*7;\n        \t\tif ( (2&t)==0&&(128&t)==0 ) divider=256*120;\n        //\t\tif ( (2&t)==0&&(128&t)==128&&(32&t)==32 ) divider=256*120;\n\n                // mode3 square wave generator\n        \t\tamp = float(2&int(4*counter/divider))-1.;\n            }\n\t    }\n    }\n    else\n    {\n    \t// silent\n    \tamp = 10.;\n    }\n\nreturn vec2( amp );\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}