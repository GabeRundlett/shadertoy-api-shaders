{
    "Shader": {
        "info": {
            "date": "1607266138",
            "description": "bump version of  \"hexastairs\" [url]https://shadertoy.com/view/3sGfWm[/url]\n",
            "flags": 0,
            "hasliked": 0,
            "id": "tsyfWw",
            "likes": 13,
            "name": "hexastairs - bump",
            "published": 3,
            "tags": [
                "escher",
                "isometric",
                "fake3d",
                "tiling",
                "stairs",
                "hexagonal",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 349
        },
        "renderpass": [
            {
                "code": "// bump version of \"hexastairs\" https://shadertoy.com/view/3sGfWm\n// using \"hexa world\" https://shadertoy.com/view/tsKBDD\n\n#define H(I)   fract(1e4*sin(1e4*length(vec2(I))))         // cheap hash\n//#define H(I) hash(uvec3(I.xy,0))                         // the one used in \"hexa world\": integer hash from https://www.shadertoy.com/view/XlXcW4\n#define rot(a) mat2(cos(a + vec4(0,11,33,0)))\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, \n         U = 12.* u / R.y + iTime;\n\n    U *= mat2(1,0,.5,.87);                                 // parallelogram frame\n    vec3  V = vec3( U, U.y-U.x +3. );                      // 3 axial coords\n    ivec3 I = ivec3(floor(V)), J;\n          I += I.yzx;\n          J = ( I % 3 ) / 2;                               // J.xy = hexagon face\n    I.x += 4; I /= 3;                                      // I.xy = hexagon id\n    int  k = int( 4.* H(I) ),                              // rand values per hexagon\n         c = J.x + 2* J.y;                                 // int face id\n    V = mod( V + vec3( I.y, I.y+I.x, I.x ), 2. );          // local coords\n    \n                                                           // --- make tiling pattern\n    if (k==3) k = c+2;                                     // draw plain cubes\n    else {\n        float s=1.;\n        V = k==1 ? V.yzx                                   // random rotation\n          : k==2 ? s=-s, V.yxz : V;\n        s *= mod(8.*V.y,2.)-1.;                            // strip slope  for stairs. Side dents below\n        k += abs( 2.*V.x-V.y +(abs(s)-9.)/8. ) > 1. ? 2 : s < 0. ? 1 : 0; // draw stairs\n    }\n   \n    vec3 N = vec3(0); N[k%3]++;                            // use k as normal direction\n    N.xy *= rot(.79);\n    N.yz *= rot(.79);\n \n    vec3 L = normalize(  vec3(cos( iTime *vec2(1,1.3) ), 1)// lightdir \n                       - vec3(  ( 2.*u - R ) / R.y , 0 ) );// view from P on surface\n\n    O = vec4(.3+ dot( N,L) );                              // lighting\n // O = (.3+ dot( N,L) ) * vec4(1,.7,0,0);                 // gold version\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}