{
    "Shader": {
        "info": {
            "date": "1446306075",
            "description": "Inspired by real events.",
            "flags": 0,
            "hasliked": 0,
            "id": "MljXWG",
            "likes": 26,
            "name": "Birth of a star",
            "published": 3,
            "tags": [
                "star",
                "space"
            ],
            "usePreview": 0,
            "username": "chrisaverage",
            "viewed": 1352
        },
        "renderpass": [
            {
                "code": "\nvec2 rotate(vec2 uv, float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return uv * mat2(c, s, -s, c);\n}\n\nvec2 pp(vec2 uv)\n{\n    float y = uv.y * 0.5 + 0.5;\n    float ny = 1.5 * y;\n    return vec2(uv.x / 1.4 * (1.0 - ny / 3.0), ny * 2.0 - 1.5);\n}\n\nfloat spiral(vec2 uv)\n{\n    float dist = 1.0 - length(uv);\n    float d = dist * 0.6 * texture(iChannel0, rotate(uv * 2.5, iTime * 0.1  + dist * 3.0)).x\n            + dist * 0.5 * texture(iChannel0, rotate(uv * 2.5, iTime * 0.15 + dist * 3.0)).x;\n    \n    for(int i=0; i < 10; ++i)\n    {\n        vec2 coord = uv * (1.0 - fract(iTime * -0.02 + float(i) * 0.089));\n        coord = rotate(coord, iTime * 0.01 + dist * float(i) * 0.2);\n        vec2 tx = texture(iChannel0, coord).xy;\n        d += tx.x / 30.0;\n        d -= tx.y / 70.0;\n    }\n    return d;\n}\n\nvec3 parts(vec2 uv)\n{\n    vec3 fi = texture(iChannel1, rotate(pp(uv), iTime * 0.06)).rgb;\n    vec2 uv1 = pp((uv + fi.rg * 4.1) * 0.8) * 0.5;\n    vec2 uv2 = pp((uv ) * 1.8) * 0.9;\n\tfloat dist = 1.0 - length(uv * vec2(0.1, 0.2));\n    float d = dist * 0.63 * texture(iChannel2, rotate(uv1.yy, iTime * 0.01  + dist * 1.0)).x\n            + dist * 0.5  * texture(iChannel2, rotate(uv1,    iTime * 0.12  + dist * 1.2)).x\n            + dist * 0.33 * texture(iChannel2, rotate(uv2.xx, iTime * 0.014 + dist * 1.4)).x\n            + dist * 0.7  * texture(iChannel2, rotate(uv2,    iTime * 0.16  + dist * 1.6)).x;    \n    vec3 c = vec3(pow(d, 8.0) *  0.2) * fi;\n    return c;\n}\n\nvec3 gas(vec2 uv, float distort)\n{\n    const vec3 grading1\t= vec3( 0.15, 0.7,  1.8 );\n    const vec3 grading2\t= vec3( 1.0,  0.55, 0.0 );\n    const vec3 grading3\t= vec3( 2.5,  1.0,  0.5 );\n    \n    float dist = (1.0 - length(uv * vec2(0.6, 1.4))) * 0.04;\n    vec2 wobble = texture(iChannel1, rotate(uv, iTime * 0.1)).rg * dist;\n    \n    vec3 c = vec3(spiral(pp(uv * 0.9 + wobble + distort * 0.5)));\n    vec3 cColor = vec3(c + ((c - 0.5) * grading1) + (c * grading2) + ((atan(c) * 0.3 + 1.1) * grading3 *0.1));\n    return cColor;\n}\n\nvec3 star(vec2 uv)\n{\n    const float aspect = 6.5;\n    const float radius = 1.0 / aspect;\n    vec3 c = vec3(0.0);\n    float dist = distance(uv, vec2(0, 0));\n    \n    uv = uv * aspect;\n    float r = dot(uv, uv);\n    float f = (1.0 - sqrt(abs(1.0 - r))) / r;\n    if( dist < radius ){\n  \t   vec2 newUv      = vec2(uv.x * f, (uv.y - 0.8) * f);\t\t\n\t   float wobble    = texture( iChannel1, newUv ).r * 0.3;\n\t   float uOff      = ( wobble - iTime * 0.2);\n\t   vec2 starUV\t   = newUv + vec2( uOff, 0.0 );\n\t   vec3 starSphere = texture( iChannel1, starUV ).rgb;\n       c = starSphere;\n       c = vec3(c.r + 1., c.g + 1., c.b + 1.1);\n       c *= (1.0 - dist * aspect);\n    }\n    \n    c = c * (uv.y * 2.0 + 0.3);\n    return clamp(c, -0.03, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - iResolution.xy / 2.0)  / (iResolution.yy / 2.0);\n    \n    vec3 c1 = parts(uv);\n    vec3 c2 = gas(uv, c1.r);\n    vec3 c3 = star(uv);\n \n    fragColor.rgb = c1 + c2 + c3;\n    fragColor.a   = 1.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}