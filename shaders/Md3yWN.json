{
    "Shader": {
        "info": {
            "date": "1518839573",
            "description": "a spiritual port of an old Winamp AVS plugin. Interactive.",
            "flags": 32,
            "hasliked": 0,
            "id": "Md3yWN",
            "likes": 28,
            "name": "Rotozoom Fractal",
            "published": 3,
            "tags": [
                "fractal",
                "monochrome",
                "white",
                "rotozoom",
                "black"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 2884
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 q = texelFetch(iChannel0, ivec2(fragCoord), 0).rgb; \n    q.xy = q.xy*2.0 - 1.0;\n    \n    float h = (atan(q.y, q.x) / 3.141592653589793)*0.5+0.5;\n    \n    vec3 c = 0.5 + 0.5 * cos((-iTime*0.2 + h + 0.9*vec3(0.0,0.33,0.67)) * 2.0 * 3.141592653589793);\n    \n    fragColor = vec4(mix(vec3(q.z), c, 0.1), 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const vec2 offset = vec2(-1.0,0.0);\n\nvec3 read(vec2 uv) {\n    uv += offset;\n    uv.x *= iResolution.y / iResolution.x;\n    uv = uv * 0.5 + 0.5;\n    if (abs(uv.y) > 1.0 || abs(uv.x) > 1.0)\n        return vec3(1.0, 0.0, 0.0);\n    // mirror mode\n    uv.x = mirror(uv.x);\n    uv.y = mirror(uv.y);\n    vec3 c = texture(iChannel0, uv).rgb;\n    return vec3(c.rg*2.0 - 1.0, c.b);\n}\n\nvec2 rotate(vec2 p, float a) {\n    a *= 2.0 * 3.141592653589793;\n    float c = cos(a);\n    float s = sin(a);\n    return vec2(\n\t\tp.x * c - p.y * s,\n        p.x * s + p.y * c\n\t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    uv -= offset;\n    const float w = -1.0/60.0;\n    if (iMouse.z > 0.5) {\n    vec2 m = iMouse.xy / iResolution.xy;\n    \tuv *= mix(1.0, 1.5, m.y);\n    \tuv = rotate(uv, m.x);\n    } else {\n    \tuv *= 1.15;\n    \tuv = rotate(uv, -sin(iTime*w)*0.45+0.5);\n    }\n    vec3 s = read(uv);\n    \n    s.xy = rotate(s.xy, 1.0/32.0);\n    s.xy = s.xy*0.5+0.5;\n    s.z = 1.0 - s.z;\n    fragColor = vec4((iFrame == 0)?vec3(1.0, 0.0, 0.0):s,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float mirror(float x) {\n    return 1.0-abs(1.0-mod(abs(x),2.0));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}