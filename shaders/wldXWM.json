{
    "Shader": {
        "info": {
            "date": "1581116363",
            "description": "vortex stuff",
            "flags": 32,
            "hasliked": 0,
            "id": "wldXWM",
            "likes": 9,
            "name": "Day 50 ",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 478
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    fragColor.g *= 1. + dot(fragColor.xyz*0.5,fragColor.xyz*0.5);\n\n    fragColor*=0.5;\n    fragColor.r *= 1.7;\n    fragColor.b *= 1. + length(uv)*(1.9+sin(iTime))*1.3;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define iTime (iTime + 17.)\n#define rot(x) mat2(cos(x))\n#define pi acos(-1.)\n#define tau (2.*pi)\n#define mx (iTime*5. + 10.*iMouse.x/iResolution.x)\n\nvec3 path(float z){\n    z*= 0.2;\n\treturn vec3(\n    \tcos(z),\n    \tsin(z),\n    \t0.\n    )*0.4;\n\n}\n\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n\tvec3 i = normalize(lookAt - ro);\n    vec3 r = normalize(cross(vec3(0,1,0), i));\n    vec3 u = normalize(cross(i, r));\n\treturn normalize(\n    \ti + r*uv.x + u*uv.y\n    );\n}\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e6);\n\n    p -= path(p.z);\n    \n    d.x = min(d.x, -(length(p.xy) - 1.));\n    \n\treturn d;\n}\nvec3 glow = vec3(0);\nvec2 march(vec3 ro,vec3 rd,inout vec3 p,inout float t,inout bool hit){\n\tvec2 d = vec2(10e6);\n\thit = false;\n    t = 0.;\n    p = ro;\n    for(int i = 0; i < 250; i++){\n    \td = map(p);\n        glow += exp(-d.x*10.);\n        \n        if (d.x < 0.009){\n        \thit = true;\n            break;\n        }\n        t += d.x;\n        p = ro + rd*t;\n    }\n    \n    return d;\n}\n\nfloat r11(float i){\n    return fract(sin(i*123.4123)*421.412);\n\treturn texture(iChannel0,vec2(i*3.)).y;\n}\n\nfloat valueNoise(float i){\n    float fl = floor(i);\n\tfloat fr = fract(i);\n    float rA = r11(fl);\n    float rB = r11(fl + 1.);\n    return mix(rA,rB, smoothstep(0.,1.,fr));\n}\n\n\n#define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    uv *= 1. - length(uv)*0.4;\n    vec3 col = vec3(0);\n\tcol = pal(0.4,0.5,vec3(1.9,3.5,0.7),9.9,2.9)*0.1;\n\n\tvec3 ro = vec3(0);\n    ro.z += mx;\n    ro += path(ro.z);\n    \n    vec3 lookAt = vec3(0,0,ro.z + 5.);\n    \n    lookAt += path(lookAt.z);\n    \n    vec3 p = ro;\n    float t; bool hit;\n    //vec3 rd = normalize(vec3(uv,1));\n    vec3 rd = getRd(ro, lookAt, uv);\n    \n    ro += valueNoise(iTime*25.)*0.15;\n\n    \n    vec2 d = march(ro, rd, p, t, hit);\n    \n    \n    if(hit){\n    \t//col += 1.;\n        col += glow*0.002;\n    \t\n        vec3 pc = vec3(atan(p.y, p.x), length(p.xy), p.z);\n        \n        for(float j = 0.; j < 70.; j++){\n            vec3 q = pc;\n            float i = j*5.;\n            \n            float nA = valueNoise(q.x*990. + i + iTime*2000.);\n            q.z += nA*0.2;\n            p.x += nA*0.2*4.;\n            \n        \tvec2 coords = vec2(r11(i),r11(i+1.));\n        \tvec2 size = vec2(r11(i+2.),r11(i+3.));\n\t\t\tfloat speed = r11(i+4.);\n            \n            size.x *= 1.;\n            size.y *= 6.;\n            speed = max(0.2, speed*0.5 );\n            \n            float n = valueNoise(i);\n            coords.y += sin(mx*speed + n) + cos(mx*speed*n) - cos(mx*speed + nA)*0.11;\n            coords.x += sin(mx*speed + n*5.)*0.1;\n            \n            coords.y *= 15.;\n            coords.y += mx;\n            coords.x *= 6.14;\n\n            \n            q.x = mod(q.x + pi, tau);\n            \n            q.xz -= coords;\n            \n            \n            q.xz = abs(q.xz) - size;\n            \n            float me = max(q.x, q.z);\n            \n            //col -= col;\n            //col += pc.x/pi + 1.;\n            float sj = sin(j);\n            vec3 p = pal(0.8,vec3(0.7),vec3(4.,3.,2.7), 1. + sin(j)*0.2, 9. + sin(j)*0.1)*0.9;\n            col += smoothstep(0.99,1.,1. - me)*p;\n        }\n\t\t\n        \n        //col += pc.z;\n        \n        \n    } else {\n\t\t    \n    \n    }\n    \n    \n    \n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec4 curr = texture(iChannel1, fragCoord/iResolution.xy);\n    vec4 A = texture(iChannel0, fragCoord/iResolution.xy);\n    vec4 blur = texture(iChannel0, fragCoord/iResolution.xy,7.);\n    //fragColor = mix(curr ,A*0.9+ blur*1.5,0.07);\n    fragColor = mix(curr ,A*0.9+ blur*0.,0.07  + sin(iTime*2.)*0.04);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}