{
    "Shader": {
        "info": {
            "date": "1686910460",
            "description": "My second non-tutorial shader :-P",
            "flags": 0,
            "hasliked": 0,
            "id": "dsfczS",
            "likes": 2,
            "name": "Oily Black Hole",
            "published": 3,
            "tags": [
                "wavy"
            ],
            "usePreview": 0,
            "username": "kanduvisla",
            "viewed": 234
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926538\n\nfloat calculateColor( vec2 uv, float d, float offset )\n{\n    return\n        step(0.5, 0.5 + sin(\n            (sin((uv.x / 10.) + iTime / 10.) + sin(uv.y) * d) +\n                // We add the similar step for the Y-axis, and\n                // multiply it with PI so it matches with the outer sin func\n                (step(0.9 + (0.1 - d / 50.), 0.5 + cos(\n                    cos(offset + (iTime) + (uv.x * 3.)) + (uv.y * d * 2.)\n                ) * 0.5) * PI)\n        ) * 0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n\n    // Checkerboard:\n    float d = length(uv);\n    \n    vec3 col = vec3(\n        calculateColor( uv, d * 1.25, (PI / d) * 0.03),\n        calculateColor( uv, sin(d), (PI / d) * 0.09),\n        calculateColor( uv, sin(d * d), (PI / d) * 0.2)\n    );\n    col /= pow(d, d);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}