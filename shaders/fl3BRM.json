{
    "Shader": {
        "info": {
            "date": "1662766167",
            "description": "perlin noise + color mapping. Different color scheme this time.",
            "flags": 32,
            "hasliked": 0,
            "id": "fl3BRM",
            "likes": 16,
            "name": "Ice flows",
            "published": 3,
            "tags": [
                "noise",
                "fbm",
                "wallpaper"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 361
        },
        "renderpass": [
            {
                "code": "#define gamma 10.0\n\nfloat intensity(vec2 p)\n{\n    return float(distance(p, vec2(0.0)) < 1.0);\n}\n\nvec3 blur(sampler2D tex, float size, int res, vec2 uv, float ratio)\n{\n    float div = 0.0;\n    vec3 accumulate = vec3(0.0);\n    \n    for(int iy = 0; iy < res; iy++)\n    {\n        float y = (float(iy) / float(res))*2.0 - 1.0;\n        for(int ix = 0; ix < res; ix++)\n        {\n            float x = (float(ix) / float(res))*2.0 - 1.0;\n            vec2 p = vec2(x, y);\n            float i = intensity(p);\n            \n            div += i;\n            accumulate += pow(texture(tex, uv+p*size*vec2(1.0, ratio)).xyz, vec3(gamma)) * i;\n        }\n    }\n    \n    return pow(accumulate / vec3(div), vec3(1.0 / gamma));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n\n    fragColor = vec4(blur(iChannel0, (uv.y - 0.5)*0.03, 10, uv, iResolution.x/iResolution.y), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float erp(float x, float k)\n{\n    return x < 0.5 ? pow(2.0*x, k)*0.5  : 1. - pow(2.0*(1.0-x), k) / 2.;\n}\n\n\nvec2 hash(vec2 p)\n{\n    vec3 p3 = fract(p.xyx * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat perlinNoise(vec2 p, float s)\n{\n    vec2 tlVal = hash(vec2(floor(p.x),  ceil(p.y)));\n    vec2 blVal = hash(vec2(floor(p.x), floor(p.y)));\n    vec2 trVal = hash(vec2( ceil(p.x),  ceil(p.y)));\n    vec2 brVal = hash(vec2( ceil(p.x), floor(p.y)));\n    \n    vec2 tlOffset = p - vec2(floor(p.x),  ceil(p.y));\n    vec2 blOffset = p - vec2(floor(p.x), floor(p.y));\n    vec2 trOffset = p - vec2( ceil(p.x),  ceil(p.y));\n    vec2 brOffset = p - vec2( ceil(p.x), floor(p.y));\n    \n    float tl = dot(tlOffset, tlVal);\n    float bl = dot(blOffset, blVal);\n    float tr = dot(trOffset, trVal);\n    float br = dot(brOffset, brVal);\n    \n    float a = mix(bl, tl, erp(fract(p.y), s));\n    float b = mix(br, tr, erp(fract(p.y), s));\n    \n    return mix(a, b, erp(fract(p.x), s)) / 2.0 + 0.5;\n}\n\n\n\nfloat fbm(in vec2 x, float s, in float H)\n{    \n    float G = exp2(-H);\n    float f = 1.0;\n    float a = 1.0;\n    float t = 0.0;\n    for( int i=0; i<8; i++ )\n    {\n        t += a*perlinNoise(f*x, s);\n        f *= 2.0;\n        a *= G;\n    }\n    return t;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "ivec3[] colors = ivec3[] (ivec3(39, 55, 71), ivec3(0, 49, 98), ivec3(0, 97, 195), ivec3(0, 211, 255), ivec3(230, 255, 230));\n\nvec3 colorMap(float value)\n{\n    int colorCount = colors.length();\n    \n    float v = value * float(colorCount);\n    \n    int a = int(floor(v));\n    int b = a + 1;\n    \n    float fac = fract(v);\n    return mix(vec3(colors[a])*0.00392156862745, vec3(colors[b])*0.00392156862745, vec3(fac));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y *= iResolution.y/iResolution.x;\n    uv *= 0.2;\n\n    uv.x += fbm((uv + iTime*0.01) * 1.0,        1.0, 1.0);\n    uv.y += fbm((uv + iTime*0.01) * 1.0 + 10.0, 1.0, 1.0);\n    uv.x += fbm((uv + iTime*0.01) * 1.0,        1.0, 1.0);\n    uv.y += fbm((uv + iTime*0.01) * 1.0 + 10.0, 1.0, 1.0);\n    uv.x += fbm((uv + iTime*0.01) * 1.0,        1.0, 1.0);\n    uv.y += fbm((uv + iTime*0.01) * 1.0 + 1.0,  1.0, 1.0);\n    uv.x += fbm((uv + iTime*0.01) * 1.0,        1.0, 1.0);\n    uv.y += fbm((uv + iTime*0.01) * 1.0 + 1.0,  1.0, 1.0)*5.0;\n\n    float value = erp(fbm(uv * 20.0, 1.0, 1.0)/2.1, 6.0);\n\n    fragColor = vec4(colorMap(value),1.0);\n    //fragColor = colors[1].xyzx;\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}