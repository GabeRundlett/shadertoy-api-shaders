{
    "Shader": {
        "info": {
            "date": "1594497268",
            "description": "my attempt to recreate dope on wax during the final of a shader showdown. took 25 minutes and I'm just happy to have made ferris smile <:",
            "flags": 0,
            "hasliked": 0,
            "id": "tlByDw",
            "likes": 14,
            "name": "Wax on Dope",
            "published": 3,
            "tags": [
                "livecode"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 445
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(p,ax)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\n\nfloat malboge(vec3 p) {\n  return dot(sin(p), cos(p));\n}\n\nfloat box(vec3 p, vec3 d) {\n  p = abs(p)-d;\n  return length(max(p,0.))+min(0.,max(p.x,max(p.y,p.z)));\n}\n\nfloat smin(float a, float b, float k) {\n  float h = max(0.,k-abs(b-a))/k;\n  return min(a,b) - h*h*h*k/6.;\n}\nvec3 smin(vec3 a, vec3 b, float k) {\n  vec3 h = max(vec3(0),vec3(k)-abs(b-a))/k;\n  return min(a,b) - h*h*h*k/6.;\n}\n\nfloat scene(vec3 p) {\n  p = erot(p, vec3(0,0,1), sin(p.z*10.)/5.*sin(iTime)/2.);\n  vec3 p2 = p;\n  p2.z += malboge(vec3(p.xy*10.+iTime/4.,0))*.02;\n  p2.z += malboge(erot(vec3(p.xy*4.+iTime/2.,0),vec3(0,0,1),.4))*.06;\n  p2.z += malboge(erot(vec3(p.xy*20.+iTime/2.,0),vec3(0,0,1),.8))*.01;\n  \n  p += malboge(p*20.)*.005;\n  p += malboge(erot(p,normalize(vec3(1,2,3)),.5)*8.)*.01;\n  p += malboge(erot(p,normalize(vec3(3,2,1)),.5)*30.)*.005;\n  float bx = box(p2,vec3(1,1,.3))-.05;\n  p-=vec3(0,0,abs(sin(iTime))*.7+.5);\n  p = erot(p,normalize(vec3(1,2,3)),iTime);\n  float sph = length(-smin(.2-abs(p),vec3(.15),.1)  )-.18;\n  return smin(bx,sph,.5);\n}\n\n\nvec3 norm(vec3 p) {\n  mat3 k = mat3(p,p,p)-mat3(0.01);\n  return normalize( scene(p) - vec3( scene(k[0]),scene(k[1]),scene(k[2])  ));\n}\n\nvec4 plas( vec2 v, float time )\n{\n  float c = 0.5 + sin( v.x * 10.0 ) + cos( sin( time + v.y ) * 20.0 );\n  return vec4( sin(c * 0.2 + cos(time)), c * 0.15, cos( c * 0.1 + time / .4 ) * .25, 1.0 );\n}\n\nvec3 skycol(vec3 p) {\n  \n  float s1 = length(sin(p*2.)*.5+.5)/sqrt(3.);\n  float s2 = length(sin(p*3.)*.5+.5)/sqrt(3.);\n  return pow(vec3(.2,0.1,0.4)*s1 + vec3(.4,0.1,.2)*s2,vec3(4)) + pow(max(dot(p,normalize(vec3(1))),0.),50.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n\n  vec3 cam = normalize(vec3(1.5/*+fract(iTime/60.*26.*6.)/10.*/,uv));\n  vec3 init = vec3(-5,0,.3);\n  \n  float yrot = .6 + sin(iTime*.3)*.2;\n  float zrot = iTime/3.;\n  cam = erot(cam, vec3(0,1,0), yrot);\n  init = erot(init, vec3(0,1,0), yrot);\n  cam = erot(cam, vec3(0,0,1), zrot);\n  init = erot(init, vec3(0,0,1), zrot);\n  \n  \n  vec3 p =init;\n  bool hit = false;\n  vec3 atten = vec3(1);\n  for (int i = 0; i< 150 && !hit; i++) { \n    float dist = scene(p);\n    hit = dist*dist < 1e-6;\n    \n  float thing = fract(dot(vec3(1),p+iTime/10.));\n    if (hit && thing < .5) {\n      hit = false;\n      dist = .1;\n      vec3 n = norm(p);\n      atten  *= (1.-abs(dot(n,cam))*.97)*vec3(0.9,0.7,0.5);\n      cam = reflect(cam,n);\n    }\n    p += cam *dist;\n  }\n  vec3 n = norm(p);\n  vec3 r = reflect(cam, n);\n  float diff = length(sin(n*2.)*.5+.5)/sqrt(3.);\n  float spec = length(sin(r*2.)*.5+.5)/sqrt(3.);\n  float fres = 1. - abs(dot(n,cam))*.98;\n  vec3 wax = vec3(.9)*diff + pow(spec,10.)*fres;\n  mat3 dsat = mat3(.4)+mat3(vec3(.2),vec3(.2),vec3(.2));\n  vec3 dope = vec3(0.6,0.25,0.1)*spec*spec*spec*2. + pow(spec,20.)*fres*2.;\n  float thing = fract(dot(vec3(1.),p+iTime/10.));\n  vec3 col = mix(dope,wax,step(.5,thing));\n  fragColor.xyz = dsat*dsat*sqrt(hit ? col*atten : skycol(cam)*atten);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}