{
    "Shader": {
        "info": {
            "date": "1553881868",
            "description": "the quadtree truchet is so pretty, it just had to be raymarched.\noriginal in 2d: [url]https://www.shadertoy.com/view/4t3BW4[/url]\n3d version (ugly): [url]https://www.shadertoy.com/view/MlcfRl[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "ws2SWD",
            "likes": 5,
            "name": "shiny quadtree truchet",
            "published": 3,
            "tags": [
                "truchet",
                "quadtree"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 482
        },
        "renderpass": [
            {
                "code": "//some function\n#define rot(spin) mat2(cos(spin),sin(spin),-sin(spin),cos(spin))\n\n//some macros\n#define subs 0.4\n#define limit 4.0\n\n#define STEPS 100\n#define FAR 20.0\n\n//some constant macros\n#define HASHSCALE3 vec3(.6531, .5563, .7498)\n\n//hash function in hash without sine by Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW\n//it seems to make a weird truchet pattern\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z*15.3023+0.434);\n}\n\n#define checktree(i)                        \\\nfor (j = 0.0; j < i; j++) {             \\\n    vec2 h = floor(r*exp2(j))*exp2(-j); \\\n    float rand = hash13(vec3(h,int(j)));\\\n    if (rand >= subs) {                 \\\n        break;                          \\\n    }                                   \\\n}\n\nfloat truchet(vec2 p, int type) {\n    float len;\n    if (type == 0)\n    {\n        p = p+step(p.x+p.y,0.0)-0.5;\n        len = abs(length(p)-0.5)-0.1667;\n    }\n    else if (type == 1)\n    {\n        len = -length(abs(p)-0.5)+0.3333;\n    }\n    else if (type == 2)\n    {\n        vec2 dir;\n        if (abs(p.x) > abs(p.y)) {\n            dir = vec2(sign(p.x),0.0);\n        } else {\n            dir = vec2(0.0,sign(p.y));\n        }\n        len = abs(length(p-dir*0.5))-0.1667;\n    }\n    else if (type == 3)\n    {\n        vec2 dir;\n        if (abs(p.x) > abs(p.y)) {\n            dir = vec2(sign(p.x),0.0);\n        } else {\n            dir = vec2(0.0,sign(p.y));\n        }\n        len = min(abs(length(p-0.5)-0.5),abs(length(p-dir*0.5)))-0.1667;\n    }\n    else if (type == 4)\n    {\n        p = abs(p)-0.1667;\n\n        len = -length(min(p,0.0))+max(min(p.x,p.y),0.0);\n    }\n    else if (type == 5)\n    {\n        p.y = abs(p.y);\n\n        len = min(p.y,length(p-vec2(0,0.5)))-0.1667;\n    }\n    else if (type == 6)\n    {\n        p.x = abs(p.x);\n        len = min(max(-p.y-0.1667,-length(p-0.5)+0.3333),length(p+vec2(0,0.5))-0.1667);      \n    }\n    return len;\n}\n\nfloat quadtruchet(vec2 p) {\n    float len = 0.0;\n    \n    float j;\n    vec2 r = p;\n    checktree(limit);\n    float i = j;\n    \n    //the position in the bottom left corner of the truchet cell\n    vec2 fp = floor(p*exp2(i))*exp2(-i);\n\n    //the local position on the truchet cell (always 0-1)\n    vec2 lp = (p-fp)*exp2(i);\n    \n    float rand = fract(hash13(vec3(fp,-i))*10.0);\n    vec2 q = lp-0.5;\n\n    int celltype = int(rand*7.0);\n    int rots = int(fract(rand*7.0)*4.0);\n\n    for (int i = 0; i < rots; i++) {\n        q = vec2(q.y,-q.x);\n    }\n    \n    float l = truchet(q,celltype);\n    \n    len = l*exp2(-i)*(1.0-mod(i,2.0)*2.0);\n    //len = l*exp2(-i);\n    \n    for (float i = 1.0; i <= limit; i++) {\n        \n        if (i <= j) continue;\n        \n        //the position in the bottom left corner of the truchet cell\n        fp = floor(p*exp2(i))*exp2(-i);\n\t\t\n        //the local position on the truchet cell (always 0-1)\n        lp = (p-fp)*exp2(i);\n\n        //check for the overlapping black dots\n        vec2 p2 = p*exp2(i);\n        vec2 fp2 = floor(p2-0.5);\n        for(int x = -0; x <= 1; x++) {\n            for(int y = -0; y <= 1; y++) {\n                r = (fp2+vec2(x,y))*exp2(-i);\n                //this branch doesn't do anything, but it skips the random() once\n                if (r != fp)\n                {\n                    checktree(i);\n\n                    if (i==j) {\n                        float l = length(abs(p2-fp2-vec2(x,y)-0.5)-0.5)-0.3333;\n                        float s = mod(i,2.0)*2.0-1.0;\n                        len = min(l*exp2(-i),len*s)*s;\n                    }\n                }\n            }\n        }\n\t}\n    return len;\n}\n\nfloat map(vec3 p) {\n    vec2 q = vec2(p.y+0.02,quadtruchet(p.xz)+0.02);\n    q.y = -(length(max(q,vec2(0.0)))+min(max(q.x,q.y),0.0)-0.06);\n    q.x = -p.y-0.05;\n    return -(length(max(q,vec2(0.0)))+min(max(q.x,q.y),0.0)-0.04);\n}\n\nvec3 findnormal(vec3 p, float len, float d) {\n    vec2 eps = vec2(d/iResolution.y*2.0,0.0);\n    \n    return normalize(vec3(\n        len-map(p-eps.xyy),\n        len-map(p-eps.yxy),\n        len-map(p-eps.yyx)));\n}\n\n// Tri-Planar blending function. Based on an old Nvidia writeup:\n// GPU Gems 3 - Ryan Geiss: https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch01.html\nvec3 tex3D(sampler2D t, in vec3 p, in vec3 n ){\n    \n    n = max(abs(n), 0.001);\n    n /= dot(n, vec3(1));\n    mat3 tex = mat3(\n        texture(t, p.yz).xyz,\n        texture(t, p.zx).xyz,\n        texture(t, p.xy).xyz);\n    \n    tex = matrixCompMult(tex,tex);\n    \n    return tex*n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy*2.0-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0.5,0.4,iTime);\n    vec3 rd = normalize(vec3(uv,1));\n    \n    if (length(iMouse.xy) > 40.0) {\n    \trd.yz *= rot(iMouse.y/iResolution.y*3.14-3.14*0.5);\n    \trd.xz *= rot(iMouse.x/iResolution.x*3.14*2.0-3.14);\n    }\n    \n    float d = 0.0;\n    float l;\n    for (int i = 0; i < STEPS; i++) {\n        l = map(ro+rd*d);\n        \n        if (l < d/iResolution.y*2.0 || d > FAR) break;\n        \n        d += l;\n    }\n    \n    vec3 col = vec3(0);\n    \n    vec3 sky = vec3(0.1,0.3,0.4)+(rd*0.07);\n    \n    if (d < FAR) {\n        vec3 p = ro+rd*d;\n        vec3 n = findnormal(p, l, d);\n        \n        vec3 tex = tex3D(iChannel0,p*5.0,n);\n        \n        float light = max(dot(n,normalize(vec3(1))),0.1);\n        \n        col = tex*light;\n        \n        rd = reflect(rd,n);\n        \n        float sun = max(dot(rd,normalize(vec3(1))),0.0);\n        vec3 suncol = vec3(1.4,2.0,0.0);\n        sun = pow(sun,1000.0);\n        \n        col += sun*suncol*0.8;\n        \n        float dist = d/FAR;\n        col = mix(col,sky,dist*dist);\n    } else {\n        float sun = max(dot(rd,normalize(vec3(1))),0.0);\n        sun = pow(sun,1000.0);\n        vec3 suncol = vec3(1.4,2.0,0.0);\n        col = mix(sky,suncol,sun);\n    }\n    \n    fragColor = vec4(sqrt(col),1);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}