{
    "Shader": {
        "info": {
            "date": "1618856134",
            "description": "A cool idea I had watching some Jensen interceptor's covers",
            "flags": 64,
            "hasliked": 0,
            "id": "fdlSDn",
            "likes": 10,
            "name": "Intercept those frequencies",
            "published": 3,
            "tags": [
                "sound",
                "curves",
                "jenseninterceptor"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 447
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\nfloat lenny(vec2 v)\n{\n    return abs(v.x)+abs(v.y);\n}\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c,-s,s,c);}\n\nfloat _sqr(vec2 p, vec2 s)\n{\n    vec2 l = abs(p)-s;\n    return max(l.x, l.y);\n}\n\nfloat border(vec2 uv)\n{\n    uv -= vec2(0.,.02);\n    float body = _sqr(uv, vec2(.3,.2));\n    body = max(body, uv.x-uv.y-.475);\n    return abs(body)-0.0001;\n}\n\nvec3 rdr2(vec2 uv)\n{\n\n    vec3 col;\n    //return texture(iChannel0, (uv-vec2(.5))*vec2(iResolution.x)/iResolution.xy).xyz;\n    float cnt = 40.;\n    for (float i = 0.; i < cnt; ++i)\n    {\n        // camera version\n        //float pic = pow(texture(iChannel0, vec2(uv.x*.8+.5, 19.*i/1600.-iTime*.501+.3)).x, 2.);\n        float pic = pow(texture(iChannel0, vec2(uv.x*.25, 1.*i/1600.-iTime*.01)).y, 1.5);\n        pic *= sat(.5+abs(uv.x*2.));\n        pic += 2.*pow(texture(iChannel1, vec2((uv.x+.5),0.)).x,.5)*(1.-sat(i/cnt));\n        float lvl = abs(uv.y-.01*(i-cnt/2.)-0.05*pic)-0.001;\n        lvl = max(lvl, abs(uv.x)-.25);\n        col = mix(col, mix(vec3(0.071,0.769,0.627), vec3(1.000,0.918,0.502),sat(pic*2.-1.5)), (1.-sat(i/cnt))*(1.-sat(lvl*400.*(1.-sat(max(i/cnt, .1))))));\n    }\n    col = mix(col, col.yxz, sat((uv.x+.5)*2.));\n    \n    float strips = max(sin((uv.x-uv.y)*100.+iTime*2.), -(abs(uv.x)-.45));\n    vec3 stripsCol = mix(vec3(0.071,0.769,0.627), vec3(1.000,0.918,0.502), sat(sin(uv.y*15.)*.5+.5));\n    col = mix(col, stripsCol, 1.-sat(strips*iResolution.x));\n    \n    col += stripsCol * pow(1.-sat(length(uv)),5.)*.5;\n    \n    col = mix(col, stripsCol, 1.-sat(border(uv)*400.));\n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec2 dir = normalize(vec2(1.));\n    float str = 0.01*texture(iChannel1, vec2(0.9,0.)).x;\n    vec3 col;\n    col.r = rdr2(uv+dir*str).r;\n    col.g = rdr2(uv).g;\n    col.b = rdr2(uv-dir*str).b;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n    float stp = 0.02;\n    vec2 uv2 = floor(uv/stp)*stp;\n    vec3 col = rdr(uv);\n    col += rdr(uv2)*(1.-sat(length(uv2)))*.25;\n    col = pow(col, vec3(.85));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 26713,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/jensen-interceptor/dj-deeon-jensen-interceptor#t=1:30"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}