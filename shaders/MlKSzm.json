{
    "Shader": {
        "info": {
            "date": "1483673294",
            "description": "The mandelbulb's power is increased over time, showing how higher powers of the fractal are related to smaller ones. Rotate the fractal with the mouse.",
            "flags": 0,
            "hasliked": 0,
            "id": "MlKSzm",
            "likes": 1,
            "name": "Growing Mandelbulb",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "geoff",
            "viewed": 691
        },
        "renderpass": [
            {
                "code": "/**\n\tThe BRDF used in this shader is based on those used by Disney and Epic Games.\n\t\n\tThe input parameters and individual components are modelled after the ones\n\tdescribed in\n\n\t\thttps://de45xmedrsdbp.cloudfront.net/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\n\n\tThe various components are then combined based on Disney's PBR shader, found here\n\n\t\thttps://github.com/wdas/brdf/blob/master/src/brdfs/disney.brdf\n\t\n\tI'd recommend reading this for a description of what the parameters in this BRDF do\n\n\t\thttp://blog.selfshadow.com/publications/s2012-shading-course/burley/s2012_pbs_disney_brdf_notes_v3.pdf\n\n\t\n*/\n\n#define ITERS 20\n#define POWER ((iTime / 5.0) + 1.0)\n#define BAILOUT 2.0\n\n//Ray march detail - lower numbers increase detail\n#define DETAIL 0.5\n\n#define OCC_STRENGTH 4.0\n#define OCC_ITERS 25\n\n\nfloat closeObj = 0.0;\nconst float PI = 3.14159;\n\nmat3 rotX(float d){\n    float s = sin(d);\n    float c = cos(d);\n    return mat3(1.0, 0.0, 0.0,\n                0.0,   c,  -s,\n                0.0,   s,   c );\n}\n\nmat3 rotY(float d){\n    float s = sin(d);\n    float c = cos(d);\n    return mat3(  c, 0.0,  -s,\n                0.0, 1.0, 0.0,\n                  s, 0.0,   c );\n}\n\nmat3 rotZ(float d){\n    float s = sin(d);\n    float c = cos(d);\n    return mat3(  c,  -s, 0.0,\n                  s,   c, 0.0,\n                0.0, 0.0, 1.0);\n}\n\n//From http://blog.hvidtfeldts.net/index.php/2011/09/distance-estimated-3d-fractals-v-the-mandelbulb-different-de-approximations/\nfloat mandelbulb(vec3 pos) {\n\tvec3 z = pos;\n\tfloat dr = 1.0;\n\tfloat r = 0.0;\n\tfor (int i = 0; i < ITERS ; i++) {\n\t\tr = length(z);\n\t\tif (r>BAILOUT) break;\n\t\t\n\t\t// convert to polar coordinates\n\t\tfloat theta = acos(z.z/r);\n\t\tfloat phi = atan(z.y,z.x);\n\t\tdr =  pow( r, POWER-1.0)*POWER*dr + 1.0;\n\t\t\n\t\t// scale and rotate the point\n\t\tfloat zr = pow( r,POWER);\n\t\ttheta = theta*POWER;\n\t\tphi = phi*POWER;\n\t\t\n\t\t// convert back to cartesian coordinates\n\t\tz = zr*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));\n\t\tz+=pos;\n\t}\n\treturn 0.5*log(r)*r/dr;\n}\n    \nvec2 vecMin(vec2 a, vec2 b){\n    if(a.x <= b.x){\n        return a;\n    }\n    return b;\n}\n\n\nfloat lastx = radians(180.0);\nfloat lasty = 0.0;\n\nvec2 mapMat(vec3 p){\n    \n    //Map\n    mat3 mouserot = rotZ(radians(lastx) / 1.5) * rotX(radians(lasty) / 1.5);\n     \n    vec2 bulb = vec2(mandelbulb(mouserot * p), 3.0);\n    \n    return bulb;\n}\n\n//Returns the min distance\nfloat map(vec3 p){\n    return mapMat(p).x;\n}\n\nfloat trace(vec3 ro, vec3 rd){\n    float t = 0.0;\n    float d = 0.0;\n    float w = 1.3;\n    float ld = 0.0;\n    float ls = 0.0;\n    float s = 0.0;\n    float cerr = 10000.0;\n    float ct = 0.0;\n    float pixradius = DETAIL / iResolution.y;\n    vec2 c;\n    int inter = 0;\n    for(int i = 0; i < 512; i++){\n        ld = d;\n        c = mapMat(ro + rd * t);\n        d = c.x;\n        \n        //Detect intersections missed by over-relaxation\n        if(w > 1.0 && abs(ld) + abs(d) < s){\n            s -= w * s;\n            w = 1.0;\n            t += s;\n            continue;\n        }\n        s = w * d;\n        \n        float err = d / t;\n        \n        if(abs(err) < abs(cerr)){\n            ct = t;\n            cerr = err;\n        }\n        \n        //Intersect when d / t < one pixel\n        if(abs(err) < pixradius){\n            inter = 1;\n            break;\n        }\n        \n        t += s;\n        if(t > 20.0){\n            break;\n        }\n    }\n    closeObj = c.y;\n    if(cerr < 0.2 && inter != 1){\n    \tct = -2.0;\n        closeObj = cerr;\n    }else if(inter == 0){\n        ct = -1.0;\n    }\n    return ct;\n}\n\n//Approximate normal\nvec3 normal(vec3 p){\n    return normalize(vec3(map(vec3(p.x + 0.0001, p.yz)) - map(vec3(p.x - 0.0001, p.yz)),\n                          map(vec3(p.x, p.y + 0.0001, p.z)) - map(vec3(p.x, p.y - 0.0001, p.z)),\n                \t      map(vec3(p.xy, p.z + 0.0001)) - map(vec3(p.xy, p.z - 0.0001))));\n}\n\nvec3 camPos = vec3(0.0);\n\nfloat occlusion(vec3 ro, vec3 rd){\n    float k = 1.0;\n    float d = 0.0;\n    float occ = 0.0;\n    for(int i = 0; i < OCC_ITERS; i++){\n        d = map(ro + 0.1 * k * rd);\n        occ += 1.0 / pow(2.0, k) * (k * 0.1 - d);\n        k += 1.0;\n    }\n    return 1.0 - clamp(occ * OCC_STRENGTH, 0.0, 1.0);\n}\n\nvec3 colour(vec3 p, float id){\n    \n    if(id == 1.0){\n       return vec3(0.0);\n    }\n    \n    vec3 n = normal(p);\n    \n    float o = occlusion(p, n);\n    return vec3(o);\n  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    camPos = vec3(0.0 , 0.0, -2.5);\n    \n    lastx += iMouse.x - 0.5;\n\tlasty += iMouse.y - 0.5;\n    \n    vec3 ro = camPos;\n    vec3 rd = normalize(vec3(uv, 1.5));\n    float d = trace(ro, rd);\n    vec3 c = ro + rd * d;\n    vec3 col = vec3(1.0);\n    //If intersected\n    if(d > 0.0){\n        //Colour the point\n        col = colour(c, closeObj);\n        col *= 1.0 / exp(d * 0.25);\n    }else if(d == -2.0){\n        col = vec3(0.25) * (1.0 / exp(closeObj * 600.0));\n    }else{\n        col = vec3(0.0);\n    }\n    \n    col = pow( col, vec3(0.4545) );\n\tfragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}