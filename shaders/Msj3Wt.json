{
    "Shader": {
        "info": {
            "date": "1395302262",
            "description": "Just a very basic shader, but which I found the result to be \"interesting\".",
            "flags": 0,
            "hasliked": 0,
            "id": "Msj3Wt",
            "likes": 22,
            "name": "Dragoon",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "Nrx",
            "viewed": 868
        },
        "renderpass": [
            {
                "code": "#define DELTA\t\t\t0.01\n#define RAY_LENGTH_MAX\t300.0\n#define RAY_STEP_MAX\t200\n\nfloat fixDistance (in float d, in float correction, in float k) {\n\tcorrection = max (correction, 0.0);\n\tk = clamp (k, 0.0, 1.0);\n\treturn min (d, max ((d - DELTA) * k + DELTA, d - correction));\n}\n\nfloat getDistance (in vec3 p) {\n\tp += vec3 (3.0 * sin (p.z * 0.2 + iTime * 2.0), sin (p.z * 0.3 + iTime), 0.0);\n\treturn fixDistance (length (p.xy) - 4.0 + 0.8 * sin (abs (p.x * p.y) + p.z * 4.0) * sin (p.z), 2.5, 0.2);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n\n\t// Define the ray corresponding to this fragment\n\tvec2 frag = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\tvec3 direction = normalize (vec3 (frag, 2.0));\n\n\t// Set the camera\n\tvec3 origin = vec3 ((17.0 + 5.0 * sin (iTime)) * cos (iTime * 0.2), 12.0 * sin (iTime * 0.2), 0.0);\n\tvec3 forward = vec3 (-origin.x, -origin.y, 22.0 + 6.0 * cos (iTime * 0.2));\n\tvec3 up = vec3 (0.0, 1.0, 0.0);\n\tmat3 rotation;\n\trotation [2] = normalize (forward);\n\trotation [0] = normalize (cross (up, forward));\n\trotation [1] = cross (rotation [2], rotation [0]);\n\tdirection = rotation * direction;\n\n\t// Ray marching\n\tvec3 p = origin;\n\tfloat dist = RAY_LENGTH_MAX;\n\tfloat rayLength = 0.0;\n\tint stepCount = 0;\n\tfor (int rayStep = 0; rayStep < RAY_STEP_MAX; ++rayStep) {\n\t\tdist = getDistance (p);\n\t\trayLength += dist;\n\t\tif (dist < DELTA || rayLength > RAY_LENGTH_MAX) {\n\t\t\tbreak;\n\t\t}\n\t\tp = origin + direction * rayLength;\n\t\t++stepCount;\n\t}\n\n\t// Compute the fragment color\n\tvec4 color = vec4 (float (stepCount * 3) / float (RAY_STEP_MAX), float (stepCount) * 1.5 / float (RAY_STEP_MAX), 0.0, 1.0);\n\tvec3 LIGHT = normalize (vec3 (1.0, -3.0, -1.0));\n\tif (dist < DELTA) {\n\t\tvec2 h = vec2 (DELTA, 0.0);\n\t\tvec3 normal = normalize (vec3 (\n\t\t\tgetDistance (p + h.xyy) - getDistance (p - h.xyy),\n\t\t\tgetDistance (p + h.yxy) - getDistance (p - h.yxy),\n\t\t\tgetDistance (p + h.yyx) - getDistance (p - h.yyx)));\n\t\tcolor.rg += 0.5 * max (0.0, dot (normal, LIGHT));\n\t}\n\telse {\n\t\tcolor.b += 0.1 + 0.5 * max (0.0, dot (-direction, LIGHT));\n\t}\n\tfragColor = color;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}