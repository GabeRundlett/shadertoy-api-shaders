{
    "Shader": {
        "info": {
            "date": "1726106695",
            "description": "trails",
            "flags": 0,
            "hasliked": 0,
            "id": "43syWH",
            "likes": 0,
            "name": "sep112024",
            "published": 3,
            "tags": [
                "popart"
            ],
            "usePreview": 0,
            "username": "brendanluu",
            "viewed": 57
        },
        "renderpass": [
            {
                "code": "#define NUM_RECTANGLES 40 // Number of cards in a deck\n#define NUM_STACKS 7 // Number of stacks\n#define SPAWN_INTERVAL 0.7 // Longer interval between stack spawns\n#define RECT_WIDTH 0.96\n#define RECT_HEIGHT 0.48\n#define GRAVITY 0.15 // Further reduced gravity for even longer fall\n#define BOUNCE_FACTOR 0.6\n#define TRAIL_LENGTH 20 // Number of ghost cards in the trail\n#define TRAIL_OPACITY_DECAY 0.8 // How quickly the trail fades\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 getRectPosition(float id, float time) {\n    float stackId = floor(id / float(NUM_RECTANGLES / NUM_STACKS));\n    float cardInStackId = mod(id, float(NUM_RECTANGLES / NUM_STACKS));\n    float spawnTime = stackId * SPAWN_INTERVAL + cardInStackId * 0.07;\n    \n    if (time < spawnTime) return vec2(-1.0);\n    \n    time -= spawnTime;\n    \n    vec2 spawnPos = vec2(\n        rand(vec2(stackId, 0.0)) * 0.8 + 0.1,\n        1.1 + rand(vec2(stackId, 1.0)) * 0.2\n    );\n    \n    float fallTime = 7.0;\n    float t = mod(time, fallTime * 2.0);\n    float y = t < fallTime \n        ? spawnPos.y - 0.5 * GRAVITY * t * t\n        : max(0.0, RECT_HEIGHT/2.0 + BOUNCE_FACTOR * sin((t - fallTime) * 3.14159 / fallTime) * (1.0 - (t - fallTime) / fallTime));\n    \n    return vec2(spawnPos.x + cardInStackId * 0.005, y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = vec4(0.0, 0.5, 0.0, 1.0);\n    \n    for (int i = NUM_RECTANGLES - 1; i >= 0; i--) {\n        vec2 mainPos = getRectPosition(float(i), iTime);\n        if (mainPos.x < -RECT_WIDTH || mainPos.x > 1.0 + RECT_WIDTH || mainPos.y < -RECT_HEIGHT || mainPos.y > 1.0 + RECT_HEIGHT) {\n            continue; // Skip if main card is off-screen\n        }\n        \n        for (int trail = 0; trail < TRAIL_LENGTH; trail++) {\n            float trailTime = iTime - float(trail) * 0.03;\n            vec2 rectPos = getRectPosition(float(i), trailTime);\n            \n            if (abs(uv.x - rectPos.x) < RECT_WIDTH * 0.5 && abs(uv.y - rectPos.y) < RECT_HEIGHT * 0.5) {\n                float opacity = pow(TRAIL_OPACITY_DECAY, float(trail));\n                vec3 color = (i % 2 == 0) ? vec3(0.8, 0.0, 0.0) : vec3(0.1);\n                vec4 cardColor = vec4(color, opacity);\n                \n                col = cardColor * cardColor.a + col * (1.0 - cardColor.a);\n            }\n        }\n    }\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}