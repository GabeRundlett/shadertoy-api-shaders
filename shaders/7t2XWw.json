{
    "Shader": {
        "info": {
            "date": "1627856368",
            "description": "More 2D physics stuff.",
            "flags": 32,
            "hasliked": 0,
            "id": "7t2XWw",
            "likes": 9,
            "name": "Ellipse - Moment of Inertia",
            "published": 3,
            "tags": [
                "2d",
                "physics",
                "ellipse",
                "inertia",
                "momentofinertia"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 167
        },
        "renderpass": [
            {
                "code": "// See https://www.desmos.com/calculator/7rpupvhbh9\n\n// SDFs\nfloat sdEllipse(in vec2 p, in vec2 ab) {\n    p = abs(p);\n    if (ab.y > ab.x) p = p.yx, ab = ab.yx;\n\n    vec2 pab = p * ab;\n    float s1 = ab.x * ab.x - ab.y * ab.y;\n    float s2 = length(pab);\n    float offs = atan(pab.x / pab.y);\n\n    float t = 1.1;\n    for (int n=0; n < 10; n++) {\n        float to = t + offs, t2 = 2.0 * t;\n        float y = 0.5 * s1 * sin(t2) + s2 * cos(to);\n        t -= y / (s1 * cos(t2) - s2 * sin(to));\n        if (abs(y) < 1e-7 * (s2 + s1)) break;\n    }\n\n    pab = p / ab;\n    return length(p - vec2(cos(t), sin(t)) * ab) * sign(dot(pab, pab) - 1.0);\n}\n\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    float ang = texelFetch(iChannel0, ivec2(0), 0).x;\n    float co = cos(ang), si = sin(ang);\n    mat2 rot = mat2(co, si, -si, co);\n\n    float ellip = sdEllipse(rot * uv + AXIS, AB);\n    drawSDF(ellip, vec3(1.0, 0.0, 0.0));\n    drawSDF(abs(ellip), vec3(1.0, 0.8, 0.0));\n    drawSDF(length(uv) - 0.05, vec3(1.0, 0.8, 0.0));\n\n    float aspect = iResolution.x / iResolution.y;\n    color = digitIn(color, vec3(1.0), uv * 0.25 + vec2(0.45 * aspect, 0.45), 100.0, ellipseInertia(AB, AXIS));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Constants\n#define PI 3.14159265359\n\n// Ellipse settings\n#define AB (iTime > 12.0 ? vec2(1.75, 0.75) + 0.25 * sin(iTime - 12.0) : vec2(1.75, 0.75))\n#define AXIS vec2(-0.75, 0.25)\n#define DENSITY 0.1\n\n// Simulation settings\n#define FRICTION 0.98\n#define GRAVITY 0.2\n\n// cross3D(vec3(a.x, a.y, 0), vec3(b.x, b.y, 0))\n// Since the x and y components of the result are always zero\n// The z component is the only one of interest\nfloat cross2D(in vec2 a, in vec2 b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n// Mass of an ellipse with uniform density\nfloat ellipseMass(in vec2 ab, in float density) {\n    return PI * ab.x * ab.y * density;\n}\n\n// Moment of inertia of an ellipse with dimensions ab about axis p\nfloat ellipseInertia(in vec2 ab, in vec2 p) {\n    return (dot(ab, ab) / 4.0 + dot(p, p)) * PI * ab.x * ab.y;\n}\n\n        /////////////////////////////////////////////////////////////////\n       //                                                            ////\n      //  \"little debugging font\"                                   // //\n     //                                                            //  //\n    //  This utility uses a small bitmapped font (3x5) to render  //   //\n   //  floats, primarily intended for debugging. The code can    //    //\n  //  be copy/pasta'd into the Common tab as needed.            //     //\n //                                                            //     //\n////////////////////////////////////////////////////////////////     //\n//                                                            //    //\n// Creative Commons Attribution-NonCommercial-ShareAlike      //   //                                       //  //\n// 3.0 Unported License                                       //  //\n//                                                            // //\n// by Val \"valalalalala\" GvM ðŸ’ƒ 2021                          ////\n//                                                            ///\n////////////////////////////////////////////////////////////////\n\nconst int CHARACTERS[14] = int[14](31599, 9362, 31183, 31207, 23524, 29671, 29679, 30994, 31727, 31719, 1488, 448, 2, 3640);\n\nfloat digitIsOn(in int digit, in vec2 id) {   \n    if (id.x < 0.0 || id.y < 0.0 || id.x > 2.0 || id.y > 4.0 ) return 0.0;\n    return floor(mod(float(CHARACTERS[int(digit)]) / pow(2.0, id.x + id.y * 3.0), 2.0));\n}\n\nfloat digitSign(in float v, in vec2 id) {\n    return digitIsOn(10 - int((sign(v) - 1.0) * 0.5), id);\n}\n\nint digitCount(in float v) {\n    return int(floor(log(max(v, 1.0) ) / log(10.0)));\n}\n\nfloat digitFirst(in vec2 uv, in float scale, in float v, in int decimalPlaces) {\n    vec2 id = floor(uv * scale);\n\n    if (0.0 < digitSign(v, id)) return 1.0;\n    v = abs(v);\n\n    int digits = digitCount(v);\n    float power = pow(10.0, float(digits));\n    \n    float offset = floor(0.1 * scale);\n    id.x -= offset;\n\n    float n;\n    for (int i = 0; i < 33; i++, id.x -= offset, v -= power * n, power /= 10.0) {\n        n = floor(v / power);\n        if (0.0 < digitIsOn(int(n), id)) return 1.0;   \n        if (i == digits) {\n            id.x -= offset;\n            if (0.0 < digitIsOn(int(12), id)) return 1.0;\n        }\n\n        if (i >= digits + decimalPlaces) return 0.0;\n    }\n\n    return 0.0;\n}\n\nfloat digitFirst(in vec2 uv, in float scale, in float v) {\n    return digitFirst(uv, scale, v, 3);\n}\n\nvec3 digitIn(in vec3 color, in vec3 toMix, in vec2 uv, in float scale, in float v) {\n    float f = digitFirst(uv, scale, v);\n    return mix(color, toMix, f);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 data, in vec2 addr) {\n    data = vec4(-PI / 4.0, 0.0, 0.0, 0.0);\n    addr -= 0.5;\n    ivec2 iAddr = ivec2(addr);\n    if (iFrame > 0 && iAddr == ivec2(0)) {\n        data = texelFetch(iChannel0, ivec2(0), 0);\n\n        float ang = texelFetch(iChannel0, ivec2(0), 0).x;\n        float co = cos(ang), si = sin(ang);\n        mat2 rot = mat2(co, si, -si, co);\n\n        vec2 centerOfMass = -AXIS * rot;\n\n        vec2 force = vec2(0.0, -ellipseMass(AB, DENSITY) * GRAVITY);\n        float torque = cross2D(-centerOfMass, force);\n\n        data.y += torque / ellipseInertia(AB, AXIS);\n        data.y *= FRICTION;\n        data.x += data.y;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}