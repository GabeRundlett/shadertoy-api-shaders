{
    "Shader": {
        "info": {
            "date": "1526846380",
            "description": "Playing with raymarching / metaballs.\nTodo: smooth cubes edges.",
            "flags": 0,
            "hasliked": 0,
            "id": "MsdfDj",
            "likes": 4,
            "name": "SDF Hammer",
            "published": 3,
            "tags": [
                "sdf",
                "metaball",
                "modelling",
                "metacube"
            ],
            "usePreview": 0,
            "username": "mlkn",
            "viewed": 588
        },
        "renderpass": [
            {
                "code": "// References:\n// https://www.shadertoy.com/view/ld2GRz\n// https://www.scratchapixel.com/lessons/advanced-rendering/rendering-distance-fields\n// http://www.geisswerks.com/ryan/BLOBS/blobs.html\n\nconst float EPSILON = 0.00001;\nconst float ANIM_TIME = 6.0;\nfloat progress;\n\nvec3 diffuseColor;\n\nmat3 makeRotationMatrix(vec3 a)\n{\n    return mat3(\n    \tcos(a.x) * cos(a.z) - sin(a.x) * cos(a.y) * sin(a.z),\n        -cos(a.x) * sin(a.z) - sin(a.x) * cos(a.y) * cos(a.z),\n        sin(a.x) * sin(a.y),\n        sin(a.x) * cos(a.z) + cos(a.x) * cos(a.y) * sin(a.z),\n        -sin(a.x) * sin(a.z) + cos(a.x) * cos(a.y) * cos(a.z),\n        -cos(a.x) * sin(a.y),\n        sin(a.y) * sin(a.z),\n        sin(a.y) * cos(a.z),\n        cos(a.y)\n    );\n}\n\n#define numcubes 10\nvec3 cubePositions[numcubes];\nvec4 cubeShapes[numcubes];\nvec3 cubeRotations[numcubes];\nfloat cubeCharge[numcubes];\n\nfloat quinticSmooth(float x) { return x*x*x*(x*(x*6.0-15.0)+10.0); }\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat metaBallsSDF(vec3 pos) {\n    bool inRangeOfBoundingShape = false; \n\tfloat dmin = 1e20;\n    \n    float p = 0.0;\n\tfloat h = 0.1; // track Lipschitz constant\n    \n    for (int i=0; i<numcubes; i++) {\n        vec3 cubePos = cubePositions[i];\n        vec3 cubeSize = cubeShapes[i].rgb;\n        float morph = cubeShapes[i].w;\n        float cubeBoundingR = sqrt(dot(cubeSize, cubeSize));\n        vec3 c = pos - cubePos;\n        mat3 rot = makeRotationMatrix(cubeRotations[i]);\n        c = rot*c;\n        \n        if (length(c) < cubeBoundingR) {\n            inRangeOfBoundingShape = true;\n            \n            vec3 ac = abs(c) / cubeSize;\n            vec3 dp = vec3(1.0) - max(1.0 - ac, 0.0);\n            float cubeX = max(max(dp.x, dp.y), dp.z);\n            float sphereX = length(c) / cubeBoundingR;\n        \tfloat x = mix(cubeX, sphereX, morph);\n\n            p += (1.0 - quinticSmooth(x)) * cubeCharge[i];\n\n            h = max(h, 0.5333*cubeBoundingR / x);\n        } else {\n            dmin = min( dmin, cubeBoundingR );\n        }\n    }\n\t\n\tif (inRangeOfBoundingShape) {\n\t\tfloat surfacePotentialValue = 0.2;\n\t\treturn h*(surfacePotentialValue-p);\n    } else {\n    \treturn dmin + 0.1;\n    }\n}\n\nfloat sceneSDF( vec3 pos )\n{\n    float stick = sdCappedCylinder(pos - vec3(0.0, -0.3, 0.0), vec2(0.03, 0.28));\n    float m = metaBallsSDF(pos);\n    diffuseColor = mix(vec3(0.3), vec3(0.7, 0.4, 0.2), step(0.0, m-stick));\n\treturn min(m, stick);\n}\n\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nvec3 computeSingleLight(vec3 n, vec3 p, vec3 l)\n{\n    float diffTerm = max(dot(normalize(n), normalize(l)), 0.0) * 1.5;\n    vec3 reflectVec = normalize(-reflect(l, n));\n    float specTerm = pow(max(dot(reflectVec, normalize(p)), 0.0), 16.0) * 0.4;\n    \n    return diffuseColor * diffTerm + specTerm ;\n}\n\nvec3 computeLighting(vec3 n, vec3 p)\n{   \n    return computeSingleLight(n, p, vec3(0.2, 0.4, 0.6))\n        + computeSingleLight(n, p, vec3(-0.4, -0.3, -0.4));\n}\n\nfloat pr(float from, float to, float startPr, float endPr, float pr) {\n    float cur = clamp((pr - startPr)/(endPr - startPr), 0.0, 1.0);\n    return mix(from, to, cur);\n}\n\nvoid setupScene() {    \n    float s = sin(iTime * 6.0);\n    float morph = abs(sin(iTime));\n    progress = mod(iTime, ANIM_TIME) / ANIM_TIME;\n    \n    // hammer\n    cubePositions[0] = vec3(pr(-8.0, 0.0, 0.1, 0.15, progress), 0.0, 0.0);\n    cubeShapes[0] = vec4(0.35, 0.1, 0.15, s*0.3);\n    cubeRotations[0] = vec3(pr(0.0, 0.3, 0.18, 0.2, progress), 0.0, 0.0);\n    cubeCharge[0] = 1.0;\n    cubePositions[4] = vec3(pr(8.0, 0.0, 0.16, 0.22, progress), 0.0, 0.0);\n    cubeShapes[4] = vec4(0.35, 0.1, 0.15, -s*0.3);\n    cubeRotations[4] = vec3(pr(0.0, -0.3, 0.27, 0.3, progress), 0.0, 0.0);\n    cubeCharge[4] = 1.0;\n    \n\tcubePositions[1] = vec3(0.0, 0.0, 0.13 + morph * 0.02\n                            + pr(2.0, 0.0, 0.34, 0.38, progress));\n    cubeShapes[1] = vec4(vec3(0.02), morph);\n    cubeRotations[1] = vec3(iTime * 5.0, 0.0, 0.0);\n    cubeCharge[1] = 0.2 + morph * 0.2;\n    cubePositions[3] = vec3(0.0, 0.0, 0.1 + pr(2.0, 0.0, 0.30, 0.34, progress));\n    cubeShapes[3] = vec4(vec3(0.06), morph * 0.5);\n    cubeRotations[3] = vec3(-iTime * 5.0, 0.0, 0.0);\n    cubeCharge[3] = 0.2 + morph * 0.2;\n    \n    // holes\n    float w = smoothstep(0.4, 0.5, progress);\n    cubePositions[2] = vec3(0.18, 0.08, 0.0 );\n    cubeShapes[2] = vec4(vec3(0.02, 0.02, 0.3), 0.0);\n    cubeRotations[2] = vec3(iTime * 5.0, 0.0, 0.0);\n    cubeCharge[2] = (-1.0 + morph) * w;\n    cubePositions[5] = vec3(-0.18, 0.08, 0.0 );\n    cubeShapes[5] = vec4(vec3(0.02, 0.02, 0.3), 0.0);\n    cubeRotations[5] = vec3(-iTime * 5.0, 0.0, 0.0);\n    cubeCharge[5] = (-1.0 + morph)  * w;\n\n    cubePositions[6] = vec3(0.18, -0.08, 0.0 );\n    cubeShapes[6] = vec4(vec3(0.02, 0.02, 0.3), 0.0);\n    cubeRotations[6] = vec3(iTime * 5.0, 0.0, 0.0);\n    cubeCharge[6] = (-1.0 + morph) * w;\n    cubePositions[7] = vec3(-0.18, -0.08, 0.0 );\n    cubeShapes[7] = vec4(vec3(0.02, 0.02, 0.3), 0.0);\n    cubeRotations[7] = vec3(-iTime * 5.0, 0.0, 0.0);\n    cubeCharge[7] = (-1.0 + morph) * w;\n    \n    // stick things\n    cubePositions[9] = vec3(0.0, -0.12 + pr(1.0, 0.0, 0.05, 0.1, progress), 0.0);\n    cubeShapes[9] = vec4(vec3(0.1, 0.05, 0.08), 0.3);\n    cubeRotations[9] = vec3(0.0, 0.0, 0.0);\n    cubeCharge[9] = 1.0;\n    cubePositions[8] = vec3(0.0, -0.6 + + pr(1.5, 0.0, 0.0, 0.05, progress), 0.0 );\n    cubeShapes[8] = vec4(vec3(0.08, 0.08, 0.06), 0.6);\n    cubeRotations[8] = vec3(0.0, 0.0, 0.0);\n    cubeCharge[8] = 1.0;\n    \n    diffuseColor = vec3(1.0);\n}\n\n// https://www.shadertoy.com/view/ld2GRz\nvoid makeCamera(out vec3 ro, out vec3 rd, vec2 fragCoord) {\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy;\n    // move camera\t\t\n    float an = 0.3 + sin(iTime * 0.3) * 0.5 - 6.2831*(m.x-0.5);\n    ro = vec3(sin(an),0.3,cos(an));\n    vec3 ta = vec3(0.0,-0.3,0.0);\n    // image plane\t\t\n    vec2 pp = -1.0 + 2.0 * (fragCoord.xy) / iResolution.xy;\n    pp.x *= iResolution.x/iResolution.y;\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0, 1.0, 0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    // create view ray\n    rd = normalize( pp.x*uu + pp.y*vv + 2.0*ww );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec3 ro, rd, p, repeatedP;\n    \n    setupScene();\n    makeCamera(ro, rd, fragCoord);\n    \n\tp = ro;\n\n\tfloat t = 0.;\n    float hit = 0.;\n    vec3 normal = vec3(0.0);\n    \n\tfor (float i = 0.; i < 2.0; i += .01) {\n\t\tp = ro + rd * t;\n        \n\t\tfloat d = sceneSDF(p);\n        if (d < .001) {\n            hit = 1.0;\n            normal = estimateNormal(p);\n            break;\n        }\n        \n\t\tt += d * 0.4;\n        if (t > 70.) {\n            hit = 0.0;\n            break;\n        }\n\t}\n    vec3 background =texture( iChannel0, rd ).rgb;\n    vec3 l = computeLighting(normal, p);\n    l = mix(background, vec3(l), hit);\n\tvec3 c = abs(normal);\n\tfragColor = vec4(l, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}