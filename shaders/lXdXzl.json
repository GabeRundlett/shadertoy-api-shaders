{
    "Shader": {
        "info": {
            "date": "1719428577",
            "description": "a zoomy grid",
            "flags": 0,
            "hasliked": 0,
            "id": "lXdXzl",
            "likes": 3,
            "name": "infinite zoom grid",
            "published": 3,
            "tags": [
                "grid",
                "loop"
            ],
            "usePreview": 0,
            "username": "jakedowns",
            "viewed": 115
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float durSec = 10.0;\n    // Time variable to animate the grid zoom\n    float time = mod(iTime, durSec) * .2;\n\n    // Base grid size and line thickness\n    float baseGridSize = 50.0;\n    float lineThickness = 1.0;\n\n    // Calculate the dynamic grid size over time\n    float zoomFactor = pow(5.0, fract(time / 2.0));\n    \n    float gridSize = baseGridSize * zoomFactor;\n\n    // Get the normalized coordinates of the pixel\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Scale the coordinates to the grid size\n    vec2 gridUV = (fragCoord.xy - 0.5 * iResolution.xy) / gridSize + 0.5;\n\n    // Calculate the distance to the nearest grid line\n    float distX = min(mod(gridUV.x, 1.0), 1.0 - mod(gridUV.x, 1.0));\n    float distY = min(mod(gridUV.y, 1.0), 1.0 - mod(gridUV.y, 1.0));\n\n    // Determine the color based on the distance to the grid lines\n    vec4 color = vec4(0.0); // Start with black\n\n    // Draw the main grid lines\n    if (distX * gridSize < lineThickness || distY * gridSize < lineThickness)\n    {\n        color = vec4(1.0, 0.5, 1.0, 1.0); // Purple color for grid lines\n    }\n\n    // Calculate the secondary grid within the gaps\n    float subGridSize = baseGridSize * zoomFactor / 5.0;  // Smaller grid within gaps\n    vec2 subGridUV = (fragCoord.xy - 0.5 * iResolution.xy) / subGridSize + 0.5;\n    float subDistX = min(mod(subGridUV.x, 1.0), 1.0 - mod(subGridUV.x, 1.0));\n    float subDistY = min(mod(subGridUV.y, 1.0), 1.0 - mod(subGridUV.y, 1.0));\n\n    // Fade in the secondary grid from black\n    float fade = smoothstep(0.0, 1.0, fract(time * 0.5));\n\n    // Draw the secondary grid lines with fading effect\n    if (subDistX * subGridSize < lineThickness / 2.0 \n    || subDistY * subGridSize < lineThickness / 2.0)\n    {\n        color = mix(color, vec4(1.0, 0.5, 1.0, 1.0), fade); // Fading secondary grid lines\n    }\n\n    // Output the final color\n    fragColor = color;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}