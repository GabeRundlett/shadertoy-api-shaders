{
    "Shader": {
        "info": {
            "date": "1727759739",
            "description": "work in progress.\nDemonstrating bitblt of image data; displaying result in stereo.\n",
            "flags": 48,
            "hasliked": 0,
            "id": "l3ByWG",
            "likes": 2,
            "name": "SDF_SeaScape_Development",
            "published": 3,
            "tags": [
                "2dsdf"
            ],
            "usePreview": 0,
            "username": "kosalos",
            "viewed": 51
        },
        "renderpass": [
            {
                "code": "// Cross-eyed 3D\n// Sit as far back from the screen as possible\n// Slightly cross your eyes so that there is a third image in the middle.\n// Relax your gaze, and concentrate only on that middle image, which is in 3D.\n\n// -----------------------------------------------------------\n// xoffset   = stereo parallax offset\n// region.xy = lower left coord of source region (as 0 ... 1)\n// region.zw = size of source region (as 0 ... 1)\n// destPt    = lower left coord of destination (as 0 ... 1)\n// width     = width of destination region (as 0 ... 1). src region repeated on X axis as necessary\n// scale     = scaling of source region\n\nstruct RegionData {\n    float xoffset; \n    vec4 region;\n    vec2 destPt;\n    float width;\n    float scale;\n};\n\nfloat bright;\n\nvoid drawRegion(RegionData k,inout vec4 O, vec2 U, bool colorBackground) {\n    #define R iResolution.xy\n    k.region *= vec4(R,R);\n    k.destPt *= R;\n    k.width *= R.x;\n    #define srcSize k.region.zw\n    \n    // current point within destination region?\n    vec2 dU = U - k.destPt; // base 0 index into destination region\n    if(dU.y < 0. || dU.y > srcSize.y) return;\n    if(dU.x < 0. || dU.x > k.width) return;\n\n    // scale access to source image\n    vec2 srcPt = k.region.xy * k.scale; \n    dU *= k.scale;\n    \n    // texture mirror only X axis\n    dU.x = mod(abs(dU.x),2. * srcSize.x);  \n    if(dU.x >= srcSize.x) dU.x = 2. * srcSize.x - dU.x - 1.;\n    \n    vec4 srcPixel = texelFetch(iChannel0,ivec2(srcPt + dU),0);\n    if(srcPixel.w > 0.) O = srcPixel * (0.5 + bright * 0.5);  // .w == 0.  -> transparent pixel\n    else if(colorBackground) O = vec4(0.3);\n}\n\n// -----------------------------------------------------------\n\nRegionData[] keyFrames = RegionData[](\n    RegionData(0.1000, vec4(0.0100,0.0190, 0.4600,0.6), vec2(-0.0100,0.7190), 1.0190, 2.3090 ),\n    RegionData(0.1100, vec4(0.0100,0.0190, 0.4600,0.6), vec2(-0.1236,0.6241), 1.1315, 2.1291 ),\n    RegionData(0.1210, vec4(0.0100,0.0190, 0.4600,0.6), vec2(-0.2373,0.5292), 1.2440, 1.9493 ),\n    RegionData(0.1331, vec4(0.0100,0.0190, 0.4600,0.6), vec2(-0.3509,0.4344), 1.3565, 1.7694 ),\n    RegionData(0.1464, vec4(0.0100,0.0190, 0.4600,0.6), vec2(-0.4645,0.3395), 1.4690, 1.5895 ),\n    RegionData(0.1611, vec4(0.0100,0.0190, 0.4600,0.6), vec2(-0.5781,0.2446), 1.5815, 1.4096 ),\n    RegionData(0.1772, vec4(0.0100,0.0190, 0.4600,0.6), vec2(-0.6918,0.12), 1.6940, 1.1 ),\n    RegionData(0.1949, vec4(0.0100,0.0190, 0.4600,0.6), vec2(-0.8054,-0.05), 1.8065,  0.95 ),\n    RegionData(0.2144, vec4(0.0100,0.0190, 0.4600,0.6), vec2(-0.9190,-0.300), 1.9190, 0.800 ));\n\n// -----------------------------------------------------------\n// enable only one of these\n\n//#define DEVELOPMENT 1     // display raw image in BufferA\n//#define DESIGN_REGION     // define region (use arrow keys to alter settings)\n#define DISPLAY_STEREO  // animated composite final image\n    \n#ifdef DEVELOPMENT \n    void mainImage(out vec4 O, vec2 U) {\n    O = texelFetch(iChannel0,ivec2(U),0);\n}\n#endif\n\n//------------------------------------------------------\n#ifdef DESIGN_REGION\nvoid mainImage(out vec4 O, vec2 U) {\n    if(keyClick(32,iChannel3)) // press <Spce> to view raw BufferA mage\n        O = texelFetch(iChannel0,ivec2(U),0);\n    else {    \n        getSettings(iChannel1);\n        RegionData rd = RegionData(0.,kqregion,kqdestPt,kqwidth,kqscale);\n        bright = 1.;\n        drawRegion(rd,O,U,true);\n        displayData(iResolution.xy,iChannel2,O,U);\n    }\n}\n#endif    \n\n//------------------------------------------------------\n#ifdef DISPLAY_STEREO    \nvoid mainImage(out vec4 O, vec2 U) {\n    const float parallax = 0.3; \n    const float imageSeparation = 0.195; \n    \n    O = (U.y > iResolution.y * 0.8) ? vec4(0.,0.,0.5,1.) : vec4(0.4,0.3,0.2,1.);\n        \n    RegionData k;\n    float ss = sin(iTime * 0.6);\n    float cc = cos(iTime * 0.6);\n    float offset,bb = cos(iTime * 0.4);\n\n    for(int i=0;i<9;++i) {\n        k = keyFrames[i];\n        offset = imageSeparation + k.xoffset * parallax;\n        if(U.x < iResolution.x * 0.5) offset = -offset;    \n        k.destPt.x += offset + 0.25 + ss * float(i+1) * parallax * 0.2;          \n        k.destPt.y += cc * float(i+1) * parallax * 0.03;\n        bright = bb * float(i-4);\n        drawRegion(k,O,U,false);\n    }\n\n    if(abs(U.x - iResolution.x * 0.5) < 2.) O.xyz = vec3(0.); // black separation line \n}\n#endif\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "struct Params {\n    int level;\n    float rndSeed;\n    vec2 position;\n    float len,minLength,lengthShrink; // trunk length\n    float angle,angleRange;  // trunk branching angle\n    float thick,thickShrink; // trunk thickness\n    float fruitSize;       // 0. == no fruit\n    vec3 tcolor1,tcolor2;  // truck color\n    vec3 lcolor1,lcolor2;  // leaf color\n    vec3 fcolor1,fcolor2;  // fruit color\n};\n\nint datasetIndex = 0;\n#define MAXDATASET 6\nParams[MAXDATASET] datasets;\n\nvoid paramsPush(Params data) { \n    datasetIndex = clamp(datasetIndex,0,MAXDATASET-1);\n    datasets[datasetIndex++] = data; \n    datasetIndex = min(datasetIndex,MAXDATASET-1); \n}\n\nbool paramsPop(inout Params dest) { \n    if(datasetIndex > 0) {\n        dest = datasets[--datasetIndex]; \n        return true;\n    }\n    \n    datasetIndex = 0;\n    return false; \n}\n\n// ---------------------------------------------------------\n\nbool iMod(int v,int m) { return (v/m)*m == v; }\n\nvoid gridBackground(vec2 R,inout vec4 O, vec2 U) { // R = resolution\n    O = vec4(0.,0.,0.,1.);  // w = 0.  -> transparent pixels\n    ivec2 I = ivec2(U);\n    ivec2 g50 = ivec2(R / 20.);\n    ivec2 g99 = ivec2(R / 10.);    \n    if(iMod(I.x,g99.x) || iMod(I.y,g99.y)) O.xyz = vec3(0.5); else\n    if(iMod(I.x,g50.x) || iMod(I.y,g50.y)) O.xyz = vec3(0.7,0.,0.);\n}\n\n// ---------------------------------------------------------\n\nvec3 levelColor(vec3 c1,vec3 c2,int level) {\n  level = min(level,8);\n  return c1 + (c2-c1)* float(level) * 0.125;\n}\n\nvec3 randomColor(vec3 c1,vec3 c2,float rndSeed) {\n  return c1 + (c2-c1)* randomValue(rndSeed,1.0);\n}\n\n\n// --------------------------------------------------------------\n\nfloat ptLineDistance(vec2 pt,vec2 lineP1,vec2 lineP2) {\n    vec2 ab = lineP2-lineP1;\n    vec2 be = pt-lineP2;     \n    if(dot(ab,be) > 0.) return length(be);\n    vec2 ae = pt-lineP1;    \n    if(dot(ab,ae) < 0.) return length(ae); \n    return abs(ab.x * ae.y - ab.y * ae.x) / length(ab);\n}\n\nvoid drawLine(vec2 p1,vec2 p2, float width, vec3 color,inout vec4 O,vec2 U) {\n    float d = ptLineDistance(U,p1,p2);\n    if(d < width) {\n        float d2 = ptLineDistance(U - vec2(-width * 0.5,width * 0.5),p1,p2);\n        O = vec4(color - vec3(d2 / (width * 10.)),1.);\n    }\n}\n\nvoid drawCircle(vec2 pt, float radius, vec3 color,inout vec4 O,vec2 I) {\n    float d = length(I-pt);\n    if(d < radius) {\n        float d2 = length(I - vec2(-radius * 0.3,radius * 0.3) - pt);\n        O.xyz = color - vec3(d2 / (radius * 3.5));\n    }\n    if(abs(d - radius)< 1.) O.xyz = vec3(0.);\n}\n\nvoid drawCircle2(vec2 pt, float radius, float thickness, vec3 color,inout vec4 O,vec2 I) {\n    float d = length(I-pt);\n    if(abs(d - radius) < thickness) O.xyz = vec3(0.); \n    if(abs(d - radius) < thickness*0.6) O.xyz = color;\n}\n\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\n// ---------------------------------------------------------\n// p,a,b,w:  render point, leaf endpoint1, endpoint2, width\n\nfloat sdOrientedVesica( vec2 p, vec2 a, vec2 b, float w ) {\n    float boundingSphere = length(p - a);\n    if(boundingSphere < w*2.) return 100.;\n    float r = 0.5*length(b-a);\n    float d = 0.5*(r*r-w*w)/w;\n    vec2 v = (b-a)/r;\n    vec2 c = (b+a)*0.5;\n    vec2 q = 0.5*abs(mat2(v.y,v.x,-v.x,v.y)*(p-c));\n    vec3 h = (r*q.x<d*(q.y-r)) ? vec3(0.0,r,0.0) : vec3(-d,0.0,d+w);\n    return length( q-h.xy) - h.z;\n    \n    /* test suite:\n    vec2 R = iResolution.xy;\n    vec2 cc = R * 0.5;\n    vec2 dd = cc + vec2(cos(iTime)* 20.,sin(iTime)* 20.);\n    float d = sdOrientedVesica(U, cc, dd, 3.3);\n    if(d < 5.) O.xyz = vec3(0.8);\n    */\n}\n\n// ---------------------------------------------------------\n\nvoid leaf(vec2 p1, float angle, vec2 R,vec3 color,inout vec4 O, vec2 U) {\n    vec2 p2 = p1 + R * 0.025 * vec2(cos(angle),sin(angle));\n    float d = sdOrientedVesica(U, p1,p2, 0.0025 * R.x);\n    if(d < 5.) {\n        O = vec4(color,1.);\n        if(abs(d - 5.) < 1.) O.xyz = vec3(0.);\n    }\n}\n\n// ---------------------------------------------------------\n\nvoid tree1(vec2 R,float rndSeed,inout vec4 O, vec2 U) { // R = window resolution\n    vec2 p1,p2,p2R;\n    vec3 color;\n    Params q,q2;\n    \n    q.level = 0;\n    q.rndSeed = rndSeed;\n    float ss = sin(rndSeed);\n    \n    while(true) {\n        if(!paramsPop(q)) break;\n        \n        p1 = q.position;\n        p2 = p1 + rotate(vec2(q.len,0.),q.angle);\n        p2R = p2 * R;\n        color = levelColor(q.tcolor1,q.tcolor2,q.level);\n        drawLine(p1 * R,p2R, q.thick * R.x,color,O,U);\n        \n        color = randomColor(q.lcolor1,q.lcolor2,q.rndSeed);        \n        leaf(p2R,q.angle,R,color,O,U);\n        \n        if(q.fruitSize > 0.0 && q.level > 2) {\n            float sz = q.fruitSize * (0.9 + randomValue(q.rndSeed,0.2)) * R.x;\n            color = randomColor(q.fcolor1,q.fcolor2,q.rndSeed);        \n            drawCircle(p2R,sz,color,O,U);\n        }\n        \n        if(q.len >= q.minLength) {\n            q.level += 1;\n            q.rndSeed = randomValue(q.rndSeed,1.);\n            q.len *= q.lengthShrink;\n            q.thick *= q.thickShrink;\n            q2 = q;\n            \n            // left branch\n            q.position = p2;\n            q.angle += 0.4 + ss * 0.1;\n            paramsPush(q);\n\n            // right branch\n            q2.position += (p2 - p1) * 0.6;\n            q2.angle += (-0.5 + ss * 0.14);\n            paramsPush(q2);\n        }\n    }\n}\n\n// ---------------------------------------------------------\n\nvoid bush1(vec2 R,float rndSeed,inout vec4 O, vec2 U) { // R = window resolution\n    vec2 p1,p2,p2R;\n    vec3 color;\n    Params q,q2;\n    \n    while(true) {\n        if(!paramsPop(q)) break;\n        float ss = sin(q.rndSeed);\n        \n        p1 = q.position;\n        p2 = p1 + rotate(vec2(q.len,0.),q.angle);\n        p2R = p2 * R;\n        color = levelColor(q.tcolor1,q.tcolor2,q.level);\n        drawLine(p1 * R,p2R, q.thick * R.x,color,O,U);\n        \n        color = randomColor(q.lcolor1,q.lcolor2,q.rndSeed);        \n        leaf(p2R,q.angle,R,color.zxy,O,U);\n        \n        if(q.fruitSize > 0.0 && q.level > 2 && randomValue(q.rndSeed,1.) < 0.3) {\n            float sz = q.fruitSize * (0.9 + randomValue(q.rndSeed,0.2)) * R.x;\n            color = randomColor(q.fcolor1,q.fcolor2,q.rndSeed);        \n            drawCircle(p2R,sz,color.zyx,O,U);\n        }\n        \n        if(q.len >= q.minLength) {\n            q.level += 1;\n            q.rndSeed = randomValue(q.rndSeed,1.);\n            q.len *= q.lengthShrink * 0.7;\n            q.thick *= q.thickShrink;\n            \n            // left branches\n            q2 = q;\n            q2.position = p2;\n            q2.angle += 0.4 + ss * 0.1;\n            paramsPush(q2);\n            q2 = q;\n            q2.position += (p2 - p1) * 0.6;\n            q2.angle -= (-0.5 + ss * 0.14);\n            paramsPush(q2);\n\n            // right branch\n            q2 = q;\n            q2.position = p2;\n            q2.angle -= (0.4 + ss * 0.1);\n            paramsPush(q2);\n            q2 = q;\n            q2.position += (p2 - p1) * 0.6;\n            q2.angle += (-0.5 + ss * 0.14);\n            paramsPush(q2);\n        }\n    }\n}\n\n// ---------------------------------------------------------\n\nvoid rocks1(vec2 R,float rndSeed,inout vec4 O, vec2 U) { // R = window resolution\n    Params q;    \n    if(!paramsPop(q)) return;\n    vec2 p1,p2;\n    vec3 color;\n    float x,y;\n    float r = random(vec2(q.rndSeed,fract(q.rndSeed)));\n    \n    for(int i=0;i<200;++i) {\n       q.thick = 0.01 + random(vec2(q.rndSeed,r)) * 0.01;\n       r = random(vec2(q.rndSeed,r));\n       x = (-10. + r * 20.) * q.len * 4. + q.thick * 3.;\n       r = random(vec2(q.rndSeed,r));\n       y = (-15. + r * 20.) * q.len * 2. + q.thick * 3.;\n       p1 = q.position + vec2(x,y);\n       p2 = (p1 + vec2(q.len,0.)) * R;\n       color = randomColor(q.tcolor1,q.tcolor2,q.rndSeed);\n       drawLine(p1 * R,p2, q.thick * R.x,color,O,U);\n     }\n     \n    q.tcolor1 = vec3(0.); \n    for(int i=0;i<200;++i) {\n       q.thick = 0.005 + random(vec2(q.rndSeed,r)) * 0.002;\n       r = random(vec2(q.rndSeed,r));\n       x = (-10. + r * 20.) * q.len * 4. + q.thick * 3.;\n       r = random(vec2(q.rndSeed,r));\n       y = (-10. + r * 20.) * q.len * 2. + q.thick * 3.;\n       p1 = q.position + vec2(x,y);\n       p2 = (p1 + vec2(q.len,0.)) * R;\n       color = randomColor(q.tcolor1,q.tcolor2,q.rndSeed);\n       drawLine(p1 * R,p2, q.thick * R.x,color,O,U);\n     }\n}\n\n// ---------------------------------------------------------\n\nvoid ground1(vec2 R,float rndSeed,inout vec4 O, vec2 U) { // R = window resolution\n    Params q;    \n    if(!paramsPop(q)) return;\n    \n    vec2 p1 = q.position;\n    vec2 p2 = (p1 + vec2(q.len,0.)) * R;\n    vec3 color = levelColor(q.tcolor1,q.tcolor2,q.level);\n//    drawLine(p1 * R,p2, q.thick * R.x,color,O,U);\n\n    q.position += vec2(q.len * 0.25); \n    q.len *= 0.002;\n    q.thick *= 0.02;\n    paramsPush(q);\n    rocks1(R,rndSeed,O,U);\n}\n\n// ---------------------------------------------------------\n// ---------------------------------------------------------\n\nParams t1 = Params(\n    0,0., // level, rndSeed\n    vec2(0.5,0.3), // position\n    0.15,0.03 , 0.7, // len,minLength,lengthShrink\n    PI * 0.5, PI * 0.2, // angle,angleRange\n    0.004,0.7, // thick,thickShrink\n    0.006, // fruit size\n    vec3(0.7,0.4,0.1),vec3(0.6,0.8,0.3), // truck color\n    vec3(0.1,0.9,0.),vec3(0.7,0.7,0.2),  // leaf color\n    vec3(1.,0.3,0.),vec3(0.7,0.7,0.)     // fruit color\n);\n\nvoid draw(inout vec4 O, vec2 U) {\n    vec2 R = iResolution.xy;\n  \n#ifdef DEVELOPMENT2  \n    gridBackground(R,O,U);\n    ivec2 I = ivec2(U);\n    if((I.x %2) + (I.y %2) == 2) O = vec4(0.5);\n#endif\n\n    for(float x = 0.;x< 1.;x+= 0.2) {\n        t1.position = vec2(x,0.06);\n        paramsPush(t1);\n        ground1(R,iTime,O,U);\n    }\n\n    t1.position = vec2(0.7,0.2);\n    paramsPush(t1);\n    tree1(R,iTime,O,U);\n    \n    t1.position = vec2(0.45,0.16);\n    paramsPush(t1);\n    bush1(R,iTime,O,U);\n    \n    t1.position = vec2(0.2,0.2);\n    t1.len = 0.1;\n    t1.tcolor1 = vec3(0.3,0.3,0.2);\n    t1.lcolor1 = vec3(0.3,0.3,0.2);\n    paramsPush(t1);\n    tree1(R,iTime -40.,O,U);\n    \n    t1.len *= 0.02;\n    t1.thick *= 0.02;\n    for(float x = 0.;x< 1.;x+= 0.2) {\n        t1.position = vec2(x,0.16);\n        paramsPush(t1);\n        rocks1(R,iTime,O,U);\n    } \n    \n    // mark corner for 'resolution changed' detection\n    if(U.x < 2. && U.y < 2.) O = vec4(iResolution.xy,0.,0.);\n}\n\n// ---------------------------------------------------------\n\nvoid mainImage(out vec4 O, vec2 U) {\n    bool refresh = false;\n    \n    if(iFrame == 0 || keyClick(32,iChannel3)) \n        refresh = true;\n    else {\n        vec4 previousResolution = texelFetch(iChannel0,ivec2(0),0);\n        if(previousResolution.xy != iResolution.xy) refresh = true;\n    }\n\n    if(refresh) draw(O,U); else O = texelFetch(iChannel0,ivec2(U),0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float PI = acos(-1.);\n\nfloat oldRandom = -1.;\n\nfloat random(vec2 c) { // 0...1\n    oldRandom += sin( dot( vec2(1.317 - c.x,19.753 + c.y), c) * 413.7972); \n    return fract(oldRandom);\n} \n\nfloat randomValue(float seed,float vMax) {\n    return random(vec2(seed,vMax)) * vMax;\n}\n\n// ----------------------------------------------------------\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_SHIFT = 16;\nconst int KEY_CTRL  = 17;\nconst int KEY_ALT   = 18;\nconst int KEY_PGUP  = 33;\nconst int KEY_PGDN  = 34;\n\nbool keyClick(int ascii,sampler2D channel) {\n    return (texture(channel,vec2((.5+float(ascii))/256.,0.25)).x > 0.);\n}\n\nbool getKeyState(int keyCode,sampler2D channel) {\n   return bool(texelFetch(channel, ivec2(keyCode,0), 0).x != 0.);\n}\n   \nbool getKeyClick(int keyCode,sampler2D channel) {\n   return bool(texelFetch(channel, ivec2(keyCode,1), 0).x != 0.);\n}\n\n// ----------------------------------------------------------\n\n#define kqregion kq[0]\n#define kqdestPt kq[1].xy\n#define kqwidth  kq[1].z\n#define kqscale  kq[1].w\n#define kqfocus  kq[2].x\n#define KQSIZE      3\n\nvec4[KQSIZE] kq;\n\nvoid getSettings(sampler2D channel) { \n    ivec2 addr = ivec2(0,0);\n    \n    for(int i=0;i<KQSIZE;++i) {\n        kq[i] = texelFetch(channel,addr,0);\n        ++addr.x;\n    }\n}\n\n// ========================================================================\n// visit: https://www.shadertoy.com/view/mdsSD7\n\nconst int maxStringLength = 8;\nconst ivec2 cNl    = ivec2(-1, -1);\nconst ivec2 cSp    = ivec2( 0, 13);\nconst ivec2 cPlus  = ivec2(11, 13);\nconst ivec2 cMinus = ivec2(13, 13);\nconst ivec2 cDot   = ivec2(14, 13);\nconst ivec2 hk  = ivec2(0,13);\n\nconst ivec2[10] Digits = ivec2[10] (\n    ivec2(0, 12), ivec2(1, 12), ivec2(2, 12), ivec2(3, 12), ivec2(4, 12),\n    ivec2(5, 12), ivec2(6, 12), ivec2(7, 12), ivec2(8, 12), ivec2(9, 12)\n);\n#define chd(name, index) const ivec2 name = Digits[index];\nchd(c0,  0) chd(c1,  1) chd(c2,  2) chd(c3,  3) chd(c4,  4)\nchd(c5,  5) chd(c6,  6) chd(c7,  7) chd(c8,  8) chd(c9,  9)\n\nconst ivec2[26] Uppercase = ivec2[26] (\n    ivec2( 1, 11), ivec2( 2, 11), ivec2( 3, 11), ivec2( 4, 11), ivec2( 5, 11),\n    ivec2( 6, 11), ivec2( 7, 11), ivec2( 8, 11), ivec2( 9, 11), ivec2(10, 11),\n    ivec2(11, 11), ivec2(12, 11), ivec2(13, 11), ivec2(14, 11), ivec2(15, 11),\n    ivec2( 0, 10), ivec2( 1, 10), ivec2( 2, 10), ivec2( 3, 10), ivec2( 4, 10),\n    ivec2( 5, 10), ivec2( 6, 10), ivec2( 7, 10), ivec2( 8, 10), ivec2( 9, 10),\n    ivec2(10, 10)\n);\n#define chu(name, index) const ivec2 name = Uppercase[index];\nchu(cA,  0) chu(cB,  1) chu(cC,  2) chu(cD,  3) chu(cE,  4)\nchu(cF,  5) chu(cG,  6) chu(cH,  7) chu(cI,  8) chu(cJ,  9)\nchu(cK, 10) chu(cL, 11) chu(cM, 12) chu(cN, 13) chu(cO, 14)\nchu(cP, 15) chu(cQ, 16) chu(cR, 17) chu(cS, 18) chu(cT, 19)\nchu(cU, 20) chu(cV, 21) chu(cW, 22) chu(cX, 23) chu(cY, 24)\nchu(cZ, 25)\n\nconst ivec2[26] Lowercase = ivec2[26] (\n    ivec2( 1,  9), ivec2( 2,  9), ivec2( 3,  9), ivec2( 4,  9), ivec2( 5,  9),\n    ivec2( 6,  9), ivec2( 7,  9), ivec2( 8,  9), ivec2( 9,  9), ivec2(10,  9),\n    ivec2(11,  9), ivec2(12,  9), ivec2(13,  9), ivec2(14,  9), ivec2(15,  9),\n    ivec2( 0,  8), ivec2( 1,  8), ivec2( 2,  8), ivec2( 3,  8), ivec2( 4,  8),\n    ivec2( 5,  8), ivec2( 6,  8), ivec2( 7,  8), ivec2( 8,  8), ivec2( 9,  8),\n    ivec2(10,  8)\n);\n#define chl(name, index) const ivec2 name = Lowercase[index];\nchl(ca,  0) chl(cb,  1) chl(cc,  2) chl(cd,  3) chl(ce,  4)\nchl(cf,  5) chl(cg,  6) chl(ch,  7) chl(ci,  8) chl(cj,  9)\nchl(ck, 10) chl(cl, 11) chl(cm, 12) chl(cn, 13) chl(co, 14)\nchl(cp, 15) chl(cq, 16) chl(cr, 17) chl(cs, 18) chl(ct, 19)\nchl(cu, 20) chl(cv, 21) chl(cw, 22) chl(cx, 23) chl(cy, 24)\nchl(cz, 25)\n\nstruct String {\n    int count;\n    ivec2[maxStringLength] chars;\n};\n\n#define setString(string, n, contents)\\\n{\\\n    ivec2[n] _s_ = ivec2[n] contents ;\\\n    for(int _i_ = 0; _i_ < min(maxStringLength, n); _i_++)\\\n    {\\\n        string.chars[_i_] = _s_[_i_];\\\n    }\\\n    string.count = n;\\\n}\n#define declString(string, n, contents)\\\nString string;\\\n{\\\n    ivec2[n] _s_ = ivec2[n] contents ;\\\n    for(int _i_ = 0; _i_ < min(maxStringLength, n); _i_++)\\\n    {\\\n        string.chars[_i_] = _s_[_i_];\\\n    }\\\n    string.count = n;\\\n}\n\nstruct Font {\n    vec2 texSize;\n    vec2 charSize;\n    vec2 ct;\n};\n\n#define setFont(ff,c,t) ff.charSize = c; ff.texSize = t; ff.ct = c/t;\n\nstruct TextCursor {\n    vec2 startPos;\n    ivec2 coord;\n    Font font;\n    vec4 color;\n    vec2 charSize;\n    vec2 charSpace;\n    int pageWidth;\n    vec2 fragCoord;\n    vec2 outUV;\n    vec4 outColor;\n};\n\nvec4 getFontCharRect(in Font f, ivec2 char) {\n    return vec4(char, char+ivec2(1)) * f.ct.xyxy;\n}\n\nvec4 getCharScreenRect(in TextCursor t) {\n    vec2 leftTop = t.startPos + t.charSpace * vec2(t.coord.x, -t.coord.y);\n    vec2 rightBottom = leftTop + t.charSize * vec2(1, -1);\n    \n    return vec4(leftTop.x, rightBottom.y, rightBottom.x, leftTop.y);\n}\n\nvoid updateOutUV(ivec2 char, inout TextCursor t) {\n    vec4 fontRect = getFontCharRect(t.font, char);\n    vec4 screenRect = getCharScreenRect(t);\n    vec2 screenRectUV = (t.fragCoord - screenRect.xy) / (screenRect.zw - screenRect.xy);\n    \n    if(clamp(screenRectUV, vec2(0), vec2(1)) != screenRectUV) return;\n    \n    t.outUV = screenRectUV * (fontRect.zw - fontRect.xy) + fontRect.xy;\n    t.outColor = t.color;\n}\n\nvoid incrementCursor(inout TextCursor t) {\n    t.coord.x += 1;\n    if(t.coord.x >= t.pageWidth) {\n        t.coord.x = 0;\n        t.coord.y += 1;\n    }\n}\n\nvoid newlineCursor(inout TextCursor t) {\n    t.coord.x = 0;\n    t.coord.y += 1;\n}\n\nvoid printChar(ivec2 char, inout TextCursor t) {\n    if(char == cNl) {\n        newlineCursor(t);\n        return;\n    }\n    \n    updateOutUV(char, t);\n    incrementCursor(t);\n}\n\nvoid printString(String s, inout TextCursor t){\n    for(int i = 0; i < min(s.count, maxStringLength); i++)\n        printChar(s.chars[i], t);\n}\n\nvoid printInt(int val, inout TextCursor t) {\n    if(val < 0) {\n        printChar(cMinus, t);\n        val = -val;\n    }\n    \n    int[maxStringLength] digits;\n    int count = 0;\n    \n    for(;;)  {\n        digits[count++] = val % 10;\n        \n        if(count >= maxStringLength)\n            break;\n        \n        val /= 10;\n        \n        if(val == 0)\n            break;\n    }\n    \n    for(int i = count-1; i >= 0; i--)\n        printChar(Digits[digits[i]], t);\n}\n\n\nvoid printFloat(float val, inout TextCursor t,int fractCount) {\n    if(val < 0.0) {\n        printChar(cMinus, t);\n        val = -val;\n    }\n    \n    val = 0.00001 + float(int(val*1000.))/1000.;\n    \n    int[maxStringLength] digits;\n    int count = 0;\n    \n    int iVal = int(val);\n    val -= float(iVal);\n    \n    for(;;) {\n        digits[count++] = iVal % 10;\n        \n        if(count >= maxStringLength)\n            break;\n        \n        iVal /= 10;\n        \n        if(iVal == 0)\n            break;\n    }\n    \n    for(int i = count-1; i >= 0; i--)\n        printChar(Digits[digits[i]], t);\n    \n    \n    if(fractCount == 0)  return;\n    printChar(cDot, t);\n        \n    for(int i = 0; i < fractCount; i++) {\n        val *= 10.0;\n        \n        int digit = int(val);\n        val -= float(digit);\n        \n        printChar(Digits[digit], t);\n        \n        if(val <= 0.0)\n            break;\n    }\n}\n\nvoid drawText(TextCursor t, sampler2D fontTexture, inout vec4 fragColor) {\n    if(length(t.outColor) > 0.) {\n        if(texture(fontTexture, t.outUV).r < 0.2)\n            fragColor = vec4(0.);  // background\n        else\n            fragColor = t.outColor;\n    }\n        \n}\n\n// --------------------------------------------------------\n\nconst ivec2[] legends = ivec2[](\n    cS,cr,cc,cP,ct,cX,hk,hk,\n    cS,cr,cc,cP,ct,cY,hk,hk,\n    cS,ci,cz,ce,cX,hk,hk,hk,\n    cS,ci,cz,ce,cY,hk,hk,hk,\n    cD,ce,cs,ct,cP,ct,cX,hk,\n    cD,ce,cs,ct,cP,ct,cY,hk,\n    cD,cs,ct,cW,ci,cd,ct,ch,\n    cS,cc,ca,cl,ce,hk,hk,hk);\n\nvoid displayData(vec2 R,sampler2D fontChannel,inout vec4 O, in vec2 U) {\n    if(U.x > R.x * 0.75) return; // no printing in that region\n    if(U.y < R.y * 0.6) return;\n\n    Font f;\n    setFont(f,R.xy / vec2(16, 16),R.xy);\n\n    TextCursor t;\n    float fSize = 10. + R.x / 80.;  // 16 character string -> ~1/3 width of screen\n    vec2 charScale = vec2(fSize,fSize);\n    t.startPos = vec2(0, R.y);\n    t.coord = ivec2(0.);\n    t.font = f;\n    t.color = vec4(1.);\n    t.charSize = charScale;\n    t.charSpace = vec2(0.8,0.9) * charScale;\n    t.pageWidth = int(R.x / t.charSize.x);\n    t.fragCoord = U;\n\n\n    for(int i = 0;i < 8;++i) {\n        int index = i / 4;\n        int field = i % 4;\n\n        t.color = vec4(0.6);\n        if(i == int(kqfocus)) t.color = vec4(1.,1.,0.,1.);\n\n        int legendIndex = i * 8;\n        for(int i=0;i<8;++i) {\n            ivec2 chr = legends[legendIndex+i];\n            if(chr == c0) break;\n            printChar(chr,t);\n        }\n\n        printChar(cSp,t);\n        printFloat(kq[index][field],t,3);\n        newlineCursor(t);\n    }\n\n    drawText(t, fontChannel, O);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 O, vec2 U) {\n    ivec2 I = ivec2(U);\n    if(I.x >= KQSIZE || I.y > 0) return;\n    \n    getSettings(iChannel1);\n\n    if(iFrame < 2) {\n        kqregion = vec4(.18,.25,0.6,0.6); \n        kqdestPt = vec2(.18,.25);\n        kqwidth = 0.5;\n        kqscale = 1.;\n        kqfocus = 0.;\n    }\n    \n    float changeAmount = 0.;\n    const float numFields = 7.;\n    \n    if(getKeyClick(KEY_UP,iChannel3))   if(--kqfocus < 0.) kqfocus = numFields;\n    if(getKeyClick(KEY_DOWN,iChannel3)) if(++kqfocus > numFields) kqfocus = 0.;\n    if(getKeyState(KEY_LEFT,iChannel3))  changeAmount = -0.01; else\n    if(getKeyState(KEY_RIGHT,iChannel3)) changeAmount = +0.01;\n    \n    if(changeAmount != 0.) {\n        int ffocus = int(kqfocus);\n        int focusIndex = ffocus / 4;  // memory index\n        int focusField = ffocus % 4;  // x,y,z field within \n        kq[focusIndex][focusField] += changeAmount;\n    }\n    \n    O = kq[I.x];\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}