{
    "Shader": {
        "info": {
            "date": "1549912455",
            "description": "testing per pixel particles, i was inspired by dr2 and wyatt's cool particle/molecule shaders",
            "flags": 32,
            "hasliked": 0,
            "id": "wsjGWG",
            "likes": 14,
            "name": "testing per pixel particles",
            "published": 3,
            "tags": [
                "2d",
                "pixel",
                "particles",
                "per"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 728
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 u )\n{\n\tfragColor = vec4(step(1e-4,length(texelFetch(iChannel0,ivec2(u),0).zw)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nBufA - Stores a particle in each pixel and processes movement steps,\nxy = particle position in screen coordinates,\nzw = particle velocity(limited to -0.999-0.999 or it breaks collisions),\nparticle exists if length(velocity) >= 1e-4.\n\nCurrently particles are just reflected off each other and dont exchange any velocity.\n*/\n\nvec4 hash(vec4 a) {\n\treturn fract(abs(sin(a.ywxz*766.345)+cos(normalize(a)*4972.92855))*2048.97435+abs(a.wxyz)*.2735);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 u)\n{\n\tfragColor = vec4(0);\n\tif (iFrame < 30 || iMouse.w > 0.) {\n        if (max(mod(u.x,8.),mod(u.y,8.)) < 1.) fragColor = vec4(u,(hash(u.xxyy+iDate.w*vec4(.11,.21,.31,.41)).xy*2.-1.)*0.99);\n\t\treturn;\n\t}\n\t\n\tvec4 p,it;\n\tvec2 s, q = floor(u);\n\t#define f(b) p = texelFetch(iChannel0,ivec2(u+b),0);\\\n\tif (length(p.zw) >= 1e-4) {\\\n        it = texelFetch(iChannel1,ivec2(u+b),0);\\\n\t\tif (it.x > 0.5) {\\\n\t\t\tif (dot(b,b) < 1e-2) {\\\n\t\t\t\tfragColor = vec4(p.xy,reflect(normalize(p.zw),normalize(it.zw))*length(p.zw));\\\n\t\t\t\treturn;\\\n\t\t\t}\\\n\t\t} else {\\\n\t\t\tp.xy += p.zw;\\\n\t\t\tif (p.x < 0. || p.x >= iResolution.x) {\\\n\t\t\t\tp.x = clamp(p.x,0.,iResolution.x-0.5);\\\n\t\t\t\tp.z = -p.z;\\\n\t\t\t}\\\n\t\t\tif (p.y < 0. || p.y >= iResolution.y) {\\\n\t\t\t\tp.y = clamp(p.y,0.,iResolution.y-0.5);\\\n\t\t\t\tp.w = -p.w;\\\n\t\t\t}\\\n\t\t\ts = floor(p.xy)-q;\\\n\t\t\tif (dot(s,s) < 1e-2) {\\\n\t\t\t\tfragColor = p;\\\n\t\t\t\treturn;\\\n\t\t\t}\\\n\t\t}\\\n\t}\n\t\n\tf(vec2(0));\n\tf(vec2(-1));\n\tf(vec2(0,-1));\n\tf(vec2(1,-1));\n\tf(vec2(-1,0));\n\tf(vec2(1,0));\n\tf(vec2(-1,1));\n\tf(vec2(0,1));\n\tf(vec2(1));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\nBufB - Calculates particle collisions,\nx = 1 if the particle at the pixel has a collision during its movement step otherwise 0\nzw = velocity of particle it collided with\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 u) {\n\tfragColor = vec4(0);\n\tvec4 p = texelFetch(iChannel0,ivec2(u),0),s;\n\tp.xy = floor(clamp(p.xy+p.zw,vec2(0),iResolution.xy-0.5));\n\tif (length(p.zw) < 1e-4) return;\n\n\tvec2 q;\n\t#define f(b) \\\n\tif (length(p.xy+b-floor(u)) > 1e-2) {\\\n\t\ts = texelFetch(iChannel0,ivec2(p.xy+b),0);\\\n\t\tq = floor(s.xy)-p.xy;\\\n\t\ts.xy = floor(clamp(s.xy+s.zw,vec2(0),iResolution.xy-0.5))-p.xy;\\\n\t\tif (dot(s.xy,s.xy) < 1e-2 || dot(q,q) < 1e-2) {\\\n\t\t\tfragColor = vec4(1,0,s.zw);\\\n\t\t\treturn;\\\n\t\t}\\\n\t}\n\t\n\tf(vec2(-1));\n\tf(vec2(0,-1));\n\tf(vec2(1,-1));\n\tf(vec2(-1,0));\n\tf(vec2(0));\n\tf(vec2(1,0));\n\tf(vec2(-1,1));\n\tf(vec2(0,1));\n\tf(vec2(1));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}