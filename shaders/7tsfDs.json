{
    "Shader": {
        "info": {
            "date": "1651686585",
            "description": "WIP   -  left to right: gradient, fractional gradient, fractional Laplacian, Laplacian\nmouse.y controls fractional derivative order\nhttps://en.wikipedia.org/wiki/Fractional_Laplacian\nhttps://en.wikipedia.org/wiki/Fractional_calculus",
            "flags": 0,
            "hasliked": 0,
            "id": "7tsfDs",
            "likes": 13,
            "name": "Fractional Laplacian & Gradient",
            "published": 3,
            "tags": [
                "fractionalcalculus"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 608
        },
        "renderpass": [
            {
                "code": "// Disclaimer: I'm just experimenting something I didn't know 10 minutes ago.\n// don't trust anything ! ( correctness & discretization ). :-)\n// For a start, proper normalization is required, but it needs the gamma() function.\n// Then the integration near the poles should surely be thinner.\n// long term aim: http://www.mountaincartography.org/activities/workshops/banff_canada/papers/brown.pdf\n\n#define ch iChannel0\n#define T(u) texelFetch(ch, ivec2(u)%textureSize(ch,0), 0 )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, D = vec2(1,0),\n         U = ( 2.*u - R ) / R.y;\n         \n    float t = 0., m = 0., w, p = 2.*iMouse.y/R.y;\n    int N,k;\n    O-=O;\n    \n    if (U.x > 1.) {                         // --- Laplacian\n        O = T(u+D)+T(u-D)+T(u+D.yx)+T(u-D.yx) - 4.*T(u);\n        t=1.; m = .2;\n    }\n    else if (U.x > 0.) {                    // --- Fractional Laplacian\n        for ( N=21,k=0; k < N*N; k++ ) {\n            D = vec2(k%N,k/N) -float(N-1)/2.;\n            if (D==vec2(0)) continue;\n            t += w = 1./ pow( length(D), 2. + 2.*p );\n            O += w* ( T(u)-T(u+D) );\n            m = max(m, abs( (T(u)-T(u+D)).x ) );\n          }\n        m = .07;\n    }\n    else if (U.x < -1.) {                    // --- Gradient\n        O = vec4( T(u+D).x - T(u).x, T(u+D.yx).x - T(u).x, 0,0 );\n        t=1.; m = .07;\n    }\n    else {                                  // --- Fractional Gradient\n        for ( N=51,k=1; k < N; k++ ) {   // N should be larger, but lack of normalization \n            D = vec2(-k,0);\n            if (D==vec2(0)) continue;\n            t += w = 1./ pow( length(D), p );\n            O += w* vec4( T(u+D).x, T(u+D.yx).x, 0,0 );\n            m = max(m, abs( (T(u+D)).x ) );\n        }\n        O.x = dFdx(O.x);  O.y = dFdy(O.y);\n        m = .07;\n     // O = vec4( dot(O,vec4(.7,.7,0,0)) );\n    }\n    \n    O = .5 + O/t/m;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}