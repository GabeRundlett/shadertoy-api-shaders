{
    "Shader": {
        "info": {
            "date": "1532745073",
            "description": "Tried to capture the essence of the PSP XMB background. Good times.",
            "flags": 0,
            "hasliked": 0,
            "id": "MlccDN",
            "likes": 19,
            "name": "xmb essence",
            "published": 3,
            "tags": [
                "2d",
                "gradient",
                "xmb"
            ],
            "usePreview": 0,
            "username": "fenwick67",
            "viewed": 1439
        },
        "renderpass": [
            {
                "code": "#define AQUA vec4(8.0/255.0,220.0/255.0,220.0/255.0,1.0)\n#define BLUE vec4(1.0/255.0,129.0/255.0,127.0/255.0,1.0)\n\n//#define AQUA vec4(0.7,0.7,0.7,1.0)\n//#define BLUE vec4(0.0,0.0,0.0,1.0)\n\n\n#define RIBBONCOLOR vec4(1.0,1.0,1.0,0.5)\n#define TRANSP vec4(0.0,0.0,0.0,0.0)\n#define RIBWIDTH 0.03\n\n#define AA 1.0/iResolution.y\n\n#define time (100.0 + iTime / 15.0)\n#define COLORTIME iTime / 22.0 + 0.3\n\n#define HILLS\n\n\n// 0..1 returns 0..1\nfloat sin01(float x){\n    float x2 = fract(x);\n\treturn 0.5 + 0.5 * sin(x2 * 6.28318530718);   \n}\n\n// outer color\nvec4 color1(){\n    float x = COLORTIME;\n    float darken = 0.8;\n\treturn vec4(darken*sin01(x),darken*sin01(x+1.0/3.0),darken*sin01(x+2.0/3.0),1.0);\n}\n\n// inner color\nvec4 color2(){\n    float x = COLORTIME;\n    float offset = 0.05;\n\treturn vec4(sin01(x + offset),sin01(x+1.0/2.0+offset),sin01(x+2.0/3.0+offset),1.0);\n}\n\nvec4 background(vec2 uv){\n    float dist = 1.4142*length(uv - vec2(0.5,0.5));\n    return mix(color1(),color2(),1.0-dist);\n}\n\nvec4 foreground(vec2 uv){\n    return vec4(color2().rgb,0.3 );\n}\n\nvec4 saturateColors(vec4 c1, vec4 c2){\n    // return c1 ++ c2\n    vec3 newColor = c1.rgb * c2.rgb;\n    float newAlpha = 1.0;\n    \n    return mix(c2,vec4(newColor,newAlpha),c1.a);\n}\n\n// source-over alpha composite\nvec4 addColors(vec4 c1, vec4 c2){\n\tvec4 color =  mix(c2,c1,c1.a);   \n    color.a = 1.0;\n    return color;\n}\n\nfloat rand(float n){\n    return fract(sin(n) * 43758.5453123);\n}\nfloat wave(float x){\n    return sin(x) * cos(x*3.0) * sin(0.7*x);\n}\n\nvec4 ribbon(float seed, vec2 uv){\n    \n    float phase = rand(seed+0.2)*10.0;\n    float speedMod = 1.0 + rand(seed+0.123);\n    float width = RIBWIDTH*(seed-1.0+0.1);\n    \n    float warpY = uv.y + wave(uv.x*1.0 + time*speedMod + phase)*0.15;\n    \n    #ifdef HILLS\n    float alpha = seed*0.22 + 0.25;\n    float inRibbon = warpY + RIBWIDTH*3.0 + width;\n    #endif        \n    #ifndef HILLS\n    float alpha = 1.0 - seed*0.22 + 0.25;\n    float inRibbon = max(warpY-width, 1.0 - width - warpY);\n    #endif\n    \n    inRibbon = smoothstep(0.5 - AA,0.5 + AA,1.0-inRibbon);\n    return vec4(RIBBONCOLOR.rgb,mix(alpha,0.0,1.0-inRibbon));\n}\nvec4 ribbon(vec2 uv){\n\treturn ribbon(1.0,uv);\n}\n\nvec4 circle(vec2 uv){\n\tfloat inCircle = length(uv - vec2(0.333,0.666))+0.4; \n    inCircle = smoothstep(0.5 - AA,0.5 + AA,1.0-inCircle);\n    return vec4(RIBBONCOLOR.rgb,inCircle*0.9);\n}\nfloat clamp01(float x){\n    return clamp(x,0.0,1.0);\n}\nvec4 plus(vec2 uv){\n\tfloat r1 = max(clamp01(max(1.1 - uv.x, uv.x-0.15)),clamp01(max(1.15 - uv.y, uv.y-0.35)));\n    float r2 = max(clamp01(max(1.025 - uv.x, uv.x-0.225)),clamp01(max(1.225 - uv.y, uv.y-0.275)));\n    \n    float inPlus = min(r1,r2);\n    inPlus = smoothstep(0.5 - AA,0.5 + AA,1.0-inPlus);\n    return vec4(RIBBONCOLOR.rgb,inPlus*0.9);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvc = fragCoord/min(iResolution.x,iResolution.y);\n\n    vec4 bgColor = background(uv);\n\n    fragColor = bgColor;\n    \n    fragColor = addColors(ribbon(1.0,uv),fragColor);\n    fragColor = addColors(ribbon(2.0,uv),fragColor);\n    fragColor = addColors(ribbon(3.0,uv),fragColor);\n    fragColor = addColors(circle(uvc),fragColor);\n    //fragColor = addColors(plus(uvc),fragColor);\n    \n    \n    fragColor = saturateColors(foreground(uv),fragColor);\n        \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}