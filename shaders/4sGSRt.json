{
    "Shader": {
        "info": {
            "date": "1465879630",
            "description": "Absolutely 100% straight up stolen from SanchYESS\nhttps://www.shadertoy.com/view/4s2GRR\n\nI wanted to see if the fisheye would work on live video, and while that didn't work, I did accidentally discover this neat effect. Reminds me of Interstellar",
            "flags": 2,
            "hasliked": 0,
            "id": "4sGSRt",
            "likes": 3,
            "name": "Falling Sand Accidental Effect",
            "published": 3,
            "tags": [
                "stolencode"
            ],
            "usePreview": 1,
            "username": "gunnarclovis",
            "viewed": 2066
        },
        "renderpass": [
            {
                "code": "// Absolutely 100% straight up stolen from SanchYESS\n// https://www.shadertoy.com/view/4s2GRR\n\n// Makes me think of either multicolored sand falling very quickly\n// Or something like that scene in Interstellar\n\n// I don't know\n// I just wanted to save it\n\n#define PI 3.141592653589793\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) //Drag mouse over rendering area\n{\n\tvec2 p = fragCoord.xy / iResolution.x; //normalized coords with some cheat\n\t                                                         //(assume 1:1 prop)\n\tfloat prop = iResolution.x / iResolution.y;//screen proroption\n\tvec2 m = vec2(0.5, 0.5 / prop);//center coords\n\tvec2 d = p - m;//vector from center to current fragment\n\tfloat r = sqrt(dot(d, d)); // distance of pixel from center\n\n\tfloat power = ( 2.0 * PI / (2.0 * sqrt(dot(m, m))) ) *\n\t\t\t\t(iMouse.x / iResolution.x - 0.5);//amount of effect\n\n\tfloat bind;//radius of 1:1 effect\n\tif (power > 0.0) bind = sqrt(dot(m, m));//stick to corners\n\telse {if (prop < 1.0) bind = m.x; else bind = m.y;}//stick to borders\n\n\t//Weird formulas\n\tvec2 uv;\n\tif (power > 0.0)//fisheye\n\t\tuv = m + normalize(d) * tan(r * power) * bind / tan( bind * power);\n\telse if (power < 0.0)//antifisheye\n\t\tuv = m + normalize(d) * atan(r * -power * 10.0) * bind / atan(-power * bind * 10.0);\n\telse uv = p;//no effect for power = 1.0\n\n\tvec3 col = texture(iChannel0, vec2(uv.x, -uv.y * prop)).xyz;//Second part of cheat\n\t                                                  //for round effect, not elliptical\n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}