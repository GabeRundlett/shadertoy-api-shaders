{
    "Shader": {
        "info": {
            "date": "1720194386",
            "description": "Modified version of cone intersector from Inigo Quilez that returns the start and end intersection.",
            "flags": 0,
            "hasliked": 0,
            "id": "XXVSRV",
            "likes": 2,
            "name": "Capped Cone Two Sided",
            "published": 3,
            "tags": [
                "intersection",
                "remix",
                "cone"
            ],
            "usePreview": 0,
            "username": "BeardThings",
            "viewed": 98
        },
        "renderpass": [
            {
                "code": "// Modified version of capped cone intersection shader by Inigo Quilez that returns near and far intersection.\n\n// Original code license:\n// The MIT License\n// Copyright Â© 2018 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfloat dot2( in vec3 v ) { return dot(v,v); }\n\n// Returns x>y when there's no intersection.\nvec2 iCappedCone( in vec3  ro, in vec3  rd, \n                  in vec3  pa, in vec3  pb, \n                  in float ra, in float rb )\n{\n    const float LargeFloat = 3.40282347e+20f;\n\n    // Modified version of this function by Inigo Quilez.\n    // Modifications are primarily:\n    // - Removal of normal calculation\n    // - Calculating the start and end intersection of our cone\n    // - Allowing backface intersections\n    // https://www.shadertoy.com/view/llcfRf\n\n    vec3  ba = pb - pa;\n    vec3  oa = ro - pa;\n    vec3  ob = ro - pb;\n    \n    float m0 = dot(ba,ba);\n    float m1 = dot(oa,ba);\n    float m2 = dot(ob,ba); \n    float m3 = dot(rd,ba);\n\n    //caps\n    vec2 intersections = vec2(LargeFloat, -LargeFloat);\n    if( dot2(oa*m3-rd*m1)<(ra*ra*m3*m3) )\n    {\n        float t = -m1/m3;\n        intersections.x = min(intersections.x, t);\n        intersections.y = max(intersections.y, t);\n    }\n\n    if( dot2(ob*m3-rd*m2)<(rb*rb*m3*m3) )\n    {\n        float t = -m2/m3;\n        intersections.x = min(intersections.x, t);\n        intersections.y = max(intersections.y, t);\n    }\n    \n    // body\n    float m4 = dot(rd,oa);\n    float m5 = dot(oa,oa);\n    float rr = ra - rb;\n    float hy = m0 + rr*rr;\n    \n    float k2 = m0*m0    - m3*m3*hy;\n    float k1 = m0*m0*m4 - m1*m3*hy + m0*ra*(rr*m3*1.0        );\n    float k0 = m0*m0*m5 - m1*m1*hy + m0*ra*(rr*m1*2.0 - m0*ra);\n    \n    float h = k1*k1 - k2*k0;\n    if( h>=0.0 )\n    {\n        // Near root of quadratic\n        {\n            float t = (-k1-sqrt(h))/k2;\n            float y = m1 + t*m3;\n            if( y>0.0 && y<m0 ) \n            {\n                intersections.x = min(intersections.x, t);\n                intersections.y = max(intersections.y, t);\n            }\n        }\n\n        // Far root of quadratic\n        {\n            float t = (-k1+sqrt(h))/k2;\n            float y = m1 + t*m3;\n            if( y>0.0 && y<m0 ) \n            {\n                intersections.x = min(intersections.x, t);\n                intersections.y = max(intersections.y, t);\n            }\n        }\n    }\n\n    return intersections;\n}\n\n// Slightly modified version of capped cone intersections from Inigo Quilez\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = 0.5*iTime;\n\tvec3 ro = vec3( 1.0*cos(an), 0.4, 1.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\n    // create view ray\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n    vec3  pa = vec3(-0.1,-0.1,0.2);\n    vec3  pb = vec3( 0.4, 0.3,0.3);\n    float ra = 0.4;\n    float rb = 0.1;\n\n    // raytrace\n    vec2 intersection = iCappedCone( ro, rd, pa, pb, ra, rb );\n\n    vec3 col = vec3(0.08)*(1.0-0.3*length(p)) + 0.02*rd.y;\n    if( intersection.y > intersection.x )\n    {\n        float d = intersection.y - intersection.x;\n        col = mix(col,vec3(1.), d*d);\n    }\n\n    // gamma\n    col = sqrt( col );\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}