{
    "Shader": {
        "info": {
            "date": "1620229561",
            "description": "4:3 Letterboxing, Trinitron scanlines, NTSC interlace effects, YIQ clamp and shift, IQ noise, bad tracking. Try the other videos as well.",
            "flags": 32,
            "hasliked": 0,
            "id": "sdBSDW",
            "likes": 42,
            "name": "Bad Video",
            "published": 3,
            "tags": [
                "video",
                "ntsc",
                "degradation"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 1457
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 rez = TVREZ;\n    \n    vec2 uvscale = rez / iResolution.xy;\n    \n    vec2 uv = (fragCoord / iResolution.xy);// * vec2(iResolution.x / iResolution.y,1);\n    \n    \n\n    vec3 col = texture(iChannel0, uv * uvscale).rgb;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    //fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// RGB <-> FCC YIQ conversion as defined in\n// https://en.wikipedia.org/wiki/YIQ\nvec3 rgb_fccyiq(vec3 rgb) {\n    float Y = 0.3 * rgb.r + 0.59 * rgb.g + 0.11 * rgb.b;\n    float Q = 0.41 * (rgb.b - Y) + 0.48 * (rgb.r - Y);\n    float I = -0.27 * (rgb.b - Y) + 0.74 * (rgb.r - Y);\n    return vec3(Y, I, Q);\n}\n\nvec3 fccyiq_rgb(vec3 yiq) {\n    return vec3(\n        yiq[0] + 0.9469 * yiq[1] + 0.6236 * yiq[2],\n        yiq[0] - 0.2748 * yiq[1] - 0.6357 * yiq[2],\n        yiq[0] - 1.1 * yiq[1] + 1.7 * yiq[2]\n    );\n}\n\n// from https://www.shadertoy.com/view/4djSRW\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n// after http://forums.nesdev.com/viewtopic.php?f=21&t=15125\nvec3 video_degraded_3x3(sampler2D src, ivec2 fc, vec2 res) {  \n    vec3 n0 = hash33(vec3(vec2(fc),iFrame*3));\n    vec3 n1 = hash33(vec3(vec2(fc)*vec2(0.00001,1),iFrame*3+1));\n    vec3 n2 = hash33(vec3(vec2(fc)*vec2(0.000001,1),iFrame*3+2));\n    vec3 n = ((n0 + n1 + n2) / 3.0);\n    vec3 q = hash33(vec3(iFrame));\n    n.xy = n.xy*2.0 - 1.0;\n    float y = 1.0 - mod(float(fc.y - iFrame/2) / res.y,1.0);\n    float namp = max(0.1, pow(1.0 - y, 4.0))*0.5;\n    vec2 uv = (vec2(fc) - vec2(pow(1.0 - y, 80.0)*(70.0 - q.x*70.0)*40.0 + pow(y, 20.0)*(10.0 - q.x*10.0), 0)) / res;\n    vec2 uvd = vec2(2.0, 0) / res;\n    float Y = rgb_fccyiq(texture(src, uv).rgb)[0] + pow(n0.z*0.5+0.5,2.0)*0.1;\n    float Yx = (1.0 - clamp(abs(min(pow(y,0.25)*2.0,(0.999 - y)*200.0)), 0.0, 1.0))*step(0.3,n.x)*2.0;\n    const float cr = 0.18;\n    float ca = 0.7 * (1.0 - pow(1.0 - y, 2.0));\n    float I = mix(clamp(rgb_fccyiq(texture(src, uv + uvd).rgb)[1],-cr,cr)*ca,n.x,namp);\n    float Q = mix(clamp(rgb_fccyiq(texture(src, uv - uvd).rgb)[2],-cr,cr)*ca,n.y,namp);\n    vec3 texcolor = fccyiq_rgb(vec3(Y,I,Q));\n    int channel = (fc.x + fc.y) % 3;\n    vec3 col = vec3(0.0);    \n    col[channel] = texcolor[channel];\n    return mix(col, vec3(Yx), pow(1.0 - y, 30.0));\n}\n\nvec3 video_degraded_3x3_conv111(sampler2D src, ivec2 fc, vec2 res) {\n    const int scale = 2;\n    fc /= scale;\n    res = res / float(scale);    \n    vec3 col0 = video_degraded_3x3(src, fc + ivec2(-1,0), res);\n    vec3 col1 = video_degraded_3x3(src, fc, res);\n    vec3 col2 = video_degraded_3x3(src, fc + ivec2(1,0), res);\n    return col0 + col1 + col2;\n}\n\nvec3 bad_video(sampler2D src, ivec2 fc, vec2 res) {\n    vec3 p = vec3(0.0);\n    for (int y = -1; y <= 1; ++y) {\n        for (int x = -2; x <= 2; ++x) {\n            p += video_degraded_3x3_conv111(iChannel0, fc + ivec2(x,y), res);\n        }\n    }\n    return p / 15.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 rez = TVREZ;\n    vec2 uv = (fragCoord / rez) * vec2(rez.x / rez.y,1);\n    vec2 vaspect = iChannelResolution[0].xy / rez;\n    vec3 col;\n    if (abs((fragCoord.x / rez.x)*2.0-1.0) > (3.0/4.0))\n        col = vec3(0.0);\n    else\n        col = bad_video(iChannel0, ivec2(fragCoord), rez) * (((int(fragCoord.y) & 1) == 1)?0.707:1.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define TVREZ vec2(640, 360)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}