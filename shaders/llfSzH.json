{
    "Shader": {
        "info": {
            "date": "1434454925",
            "description": "Spheres in myst.",
            "flags": 0,
            "hasliked": 0,
            "id": "llfSzH",
            "likes": 44,
            "name": "Raymarch 180 chars",
            "published": 3,
            "tags": [
                "raymarching",
                "2tweets",
                "short"
            ],
            "usePreview": 0,
            "username": "coyote",
            "viewed": 2036
        },
        "renderpass": [
            {
                "code": "//180 chars by Fabrice\n//(was 166 chars by Fabrice while #define mainImage trick was still working)\n\nvoid mainImage(out vec4 f, vec2 u){\n    vec3 R = iResolution, r = cos(iTime+R/R.y);\n    for(float i = .6, a;\n        i > .1 && (a = length(fract(r)-.5)-.3) > .001;\n        i -= .002)\n        r += vec3((u+u-R.xy)/R.y,2)*.06*a,\n        f.bgr = i+i*r;} //\n//\n//\n//182 chars, WebGL 2.0\n/*\nvoid mainImage (out vec4 f, vec2 u)\n{\n    vec3 R = iResolution, r = cos(iDate.w+R/R.y);\n    \n    for(float i = .6, a; i > .1 && (a = length(fract(r)-.5)-.3) > .001; i -= .002)\n        \n        f.bgr = i+i*(r += vec3((u+u-R.xy)/R.y,2)*.06*a);\n}\n/**/ //\n//\n//185 chars, 834144373's path\n//191 chars, Fabrice's idea, but I changed the constants a little\n//198 chars, Fabrice: if() -> ?:\n//199 chars, additional size optimizations by Nrx and aiekick\n//\n/*\nvoid mainImage (out vec4 f, vec2 u)\n{\n    //various 3d camera paths\n    //vec3 r = vec3 (cos (f=iDate).w, 1, sin (f.w)), R = iResolution; //198 original\n    //vec3 r = cos(iDate.w+vec3(1,2,3)), R = iResolution; //191 Fabrice and me\n    vec3 R = iResolution,r = cos(iDate.w+R/R.y); //185 834144373\n\n    for (float i = .6 ; i > .1 ; i -= .002)\n        (f.a = length (fract (r) - .5) - .3) > .001\n        ? f.bgr = i + i * (r += vec3 ((u + u - R.xy) / R.y, 2) * .06 * f.a)\n        : r;\n}\n/**/ //\n//\n//210, my original (with a little help by FabriceNeyret2 ;)\n/*\nvoid mainImage( out vec4 f, vec2 u )\n{\n    vec3 r = vec3(cos(iDate.w), 1, sin(iDate.w)) + 1.,\n         R = iResolution ;\n\n    for( float i = .6 ; i > .1 ; i-=.002 ) {\n        r += vec3( (u+u-R.xy)/R.y, 2 ) * .06\n             * ( f.a = length( fract(r) - .5 ) - .3 ) ;\n        f.bgr=i*r;\n        if( f.a < .001 ) break ;\n    }\n\n}\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}