{
    "Shader": {
        "info": {
            "date": "1360963206",
            "description": "Sierpinski carpet, plus a twist.",
            "flags": 0,
            "hasliked": 0,
            "id": "MdfGzr",
            "likes": 1,
            "name": "Sierpinski plus",
            "published": 3,
            "tags": [
                "2d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "huttarl",
            "viewed": 1097
        },
        "renderpass": [
            {
                "code": "/* This was my first shader, I believe. It started out as \nan answer to someone who asked whether the GPU could be used\nto perform the calculations for a Sierpinski carpet:\nhttp://stackoverflow.com/questions/3972902/is-it-possible-to-perform-floating-point-operations-on-gpu-when-using-opengl/3973433#3973433\n\nFrom there I elaborated on it a bit to try and create a more\ninteresting fractal, where instead of removing a solid square\nin the center, we remove a scaled-down copy of the whole fractal.\nMore discussion of this object (which theoretically can't quite exist) at\nhttp://math.stackexchange.com/questions/7412/variant-on-sierpinski-carpet-rescue-the-tablecloth\n*/\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\n// Set color at the current fragment, with given coords\n// and whether it should be \"hole\" or not.\nvec4 setColor(vec2 coord, bool isHole) \n{\n    vec4 color;\n\tif (isHole)\n\t\tcolor = vec4(texture(iChannel0, coord).xyz, 1.0);\n\telse\n\t\tcolor = vec4(coord.x, 0.5, coord.y, 1.0);\n    return color;\n}\n\n// Sierpinski carpet - with anti-holes!\n// Maybe call it \"Sierpinski tablecloth\". If it doesn't already have a name.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tivec2 sectors;\n\tvec2 coordOrig = fragCoord.xy / iResolution.xy;\n\tconst int lim = 5;\n\t// Toggle between \"carpet\" and \"tablecloth\" every 3 seconds.\n\tbool doInverseHoles = (mod(iTime, 6.0) < 3.0);\n\t\n\t// If you want it to spin, just to prove that it is redrawing\n\t// the carpet every frame:\n\tvec2 center = vec2(0.5, 0.5);\n\tmat2 rotation = mat2(\n        vec2( cos(iTime), sin(iTime)),\n        vec2(-sin(iTime), cos(iTime))\n    );\n    vec2 coordRot = rotation * (coordOrig - center) + center;\n\t// rotation can put us out of bounds\n\tif (coordRot.x < 0.0 || coordRot.x > 1.0 ||\n\t\tcoordRot.y < 0.0 || coordRot.y > 1.0) {\n\t\tfragColor = setColor(coordOrig, true);\n\t\treturn;\n\t}\n\n\tvec2 coordIter = coordRot;\n\tbool isHole = false;\n\n\tfor (int i=0; i < lim; i++) {\n\t\tsectors = ivec2(floor(coordIter.xy * 3.0));\n\t\tif (sectors.x == 1 && sectors.y == 1) {\n\t\t\tif (doInverseHoles) {\n\t\t\t\tisHole = !isHole;\n\t\t\t} else {\n\t\t\t\tfragColor = setColor(coordOrig, true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (i + 1 < lim) {\n\t\t\t// map current sector to whole carpet\n\t\t\tcoordIter.xy = coordIter.xy * 3.0 - vec2(sectors.xy);\n\t\t}\n\t}\n\t\n\tfragColor = setColor(isHole ? coordOrig : coordRot, isHole);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}