{
    "Shader": {
        "info": {
            "date": "1570597396",
            "description": "Catching up with the challenge is not going as well as I planned, but I'll take being happy with the results over finishing it all this October.",
            "flags": 0,
            "hasliked": 0,
            "id": "tdV3Ww",
            "likes": 14,
            "name": "Inktober2019 03: bait",
            "published": 3,
            "tags": [
                "cell",
                "bacteria",
                "predator",
                "inktober",
                "shadertober",
                "bait",
                "inktober2019",
                "microorganism"
            ],
            "usePreview": 0,
            "username": "s23b",
            "viewed": 448
        },
        "renderpass": [
            {
                "code": "#define PERIOD 5.\n#define COLOR vec3(.7, .85, .8)\n\n#define PI 3.14159265359\n\nvoid tRotate(inout vec2 p, float angle) {\n    float s = sin(angle), c = cos(angle);\n\tp *= mat2(c, -s, s, c);\n}\n\nfloat opU(float a, float b) {\n    return min(a, b);\n}\n\nfloat opSU(float a, float b, float k) {\n    float h = clamp(.5 + .5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat sdCell(vec2 p, float size, vec2 dir) {\n    return opSU(length(p) - size, distance(p, dir * size) - size * .75, size / 2.);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    float color = 0.;\n    \n    float res = min(iResolution.y, iResolution.x);\n    vec2 uv = (fragCoord - iResolution.xy / 2.) / res;\n    \n    if (abs(uv.x) < .45 && abs(uv.y) < .45) {\n        float t = fract(iTime / PERIOD);\n        vec2 p = ((fragCoord - iResolution.xy / 2.) / res) * 2.5;\n        \n        // add some distortion\n        p+= sin(p.yx * 5. + t * PI * 2.) * .01;\n        p.x-= sin(p.y * 20. - t * PI * 4.) * .005;\n        p.y-= sin(p.y * 50. - t * PI * 6.) * .002;\n        \n        // add camera movement\n        float camera = smoothstep(.7, .9, t);\n        tRotate(p, camera * PI / 2.);\n        p += mix(vec2(.5), vec2(1, 0), camera);\n        p *= mix(1., 2., camera);\n        \n        // entity positions\n        vec2 bait = vec2(1);\n        vec2 fool = vec2(.2);\n        fool = mix(fool, bait, smoothstep(.2, .3, t));\n        vec2 predator = vec2(2.6, -.6);\n        vec2 bystander1 = mix(vec2(.25, 1), vec2(-.4, 1.4), t);\n        vec2 bystander2 = mix(vec2(2, .5), vec2(1, -.5), t);\n        vec2 bystander3 = mix(vec2(1.8, 0), vec2(-.5, -.5), t);\n        \n        // add cells\n        float d = sdCell(p - bait, mix(.2, .0, smoothstep(.4, .8, t)), vec2(0, 1));\n        d = opSU(d, sdCell(p - fool, .4, mix(vec2(0, -1), vec2(-1, 0), smoothstep(.0, .8, t)) * (1. + .5 * smoothstep(.05, .0, abs(t - .25)))), .25);\n        d = opU(d, sdCell(p - predator, .8, vec2(1, 0)));\n        \n        // apply edges\n        float edge = mix(.025, .05, smoothstep(.7, .9, t));\n        d = abs(abs(d) - edge * 1.6) - edge;\n        \n        // add bystanders\n        float crowd = distance(p, bystander1) - .1;\n        crowd = opU(crowd, distance(p, bystander2) - .2);\n        crowd = opU(crowd, distance(p, bystander3) - .1);\n        d = opU(d, abs(crowd) - edge);\n        \n        // render\n        float w = fwidth(d);\n        color = min(1.,1. + d / w);\n    }\n\n\tfragColor = vec4(mix(vec3(0), COLOR, color), 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}