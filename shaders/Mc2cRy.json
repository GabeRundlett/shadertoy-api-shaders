{
    "Shader": {
        "info": {
            "date": "1722544194",
            "description": "particles rotate https://glslsandbox.com/e#60266.0 https://glslsandbox.com/e#60154.0",
            "flags": 0,
            "hasliked": 0,
            "id": "Mc2cRy",
            "likes": 1,
            "name": "particles rotate",
            "published": 3,
            "tags": [
                "particles",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 154
        },
        "renderpass": [
            {
                "code": "#define time iTime\n#define resolution iResolution.xy\n\nfloat rand(int seed, float ray) {\n\treturn mod(sin(float(seed)*1.0+ray*1.0)*1.0, 1.0);\n}\n\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat t = time;\n\tvec2 r = resolution;\n    float scale3 = resolution.y / 50.0;\n\tfloat ring = 20.0;\n\tfloat radius = resolution.x*1.0;\n\tfloat gap = scale3*1.36;\n\tvec2 pos = gl_FragCoord.xy - resolution.xy*.5;\n\t\n\tfloat d = length(pos);\n\t\n\t// Create the wiggle\n\td += 0.5*(sin(pos.y*0.25/scale3+time)*sin(pos.x*0.25/scale3+time*.5))*scale3*5.0;\n\t\n\t// Compute the distance to the closest ring\n\tfloat v = mod(d + radius/(ring*2.0), radius/ring);\n\tv = abs(v - radius/(ring*2.0));\n\t\n\tv = clamp(v-gap+d, 0.0, 1.0);\n\t\n\td /= radius;\n\tvec3 m = fract((d-1.0)*vec3(ring*-.5, -ring, ring*.125)*0.5);\n\t\n\tvec2 p = gl_FragCoord.xy / resolution.xy-.5;\n      float rotZ = 1. - 0.13 * sin(1. * cos(length(p * 1.)));\n    p *= mat2(cos(iTime), sin(iTime), -sin(iTime), cos(iTime));\n     p *= mat2(cos(rotZ), sin(rotZ), -sin(rotZ), cos(rotZ));\n\tp = p * 10.0;\n\tp.x *= resolution.x / resolution.y;\t\n\tvec3 destColor = vec3(0.0);\n\tfor (float i = 1.0; i<40.0;i++){\n\t\tfloat j = i;\n        float angle = time + i / 10. * 6.28;\n\t    p *= mat2(cos(iTime), sin(iTime), -sin(iTime), cos(iTime));\n   \n\t\tvec2 q =  p + vec2(cos(t+v * j), sin(t * j)) * 3.63;\n          q *= mat2(cos(rotZ), sin(rotZ), -sin(rotZ), cos(rotZ));\n\t\tfloat l = 0.22 / abs(length((q)+d*q)*1.5*i*abs(tan(t) ));\n\t\tdestColor +=  vec3(abs(tan(t))*l,abs(sin(t))*l,abs(cos(t))*l);\n\t}\n\tfragColor = vec4(destColor+vec3(0.2,0.,1.5),1.0);\n     vec2 uv = ( fragCoord - .5*iResolution.xy ) / iResolution.y;\n    uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    fragColor+= vec4(happy_star(uv, anim) * vec3(0.35,0.2,0.35)*0.1, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}