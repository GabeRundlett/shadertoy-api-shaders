{
    "Shader": {
        "info": {
            "date": "1615173561",
            "description": "falso goku",
            "flags": 0,
            "hasliked": 0,
            "id": "tlGBDc",
            "likes": 6,
            "name": "falso goku",
            "published": 3,
            "tags": [
                "falsogoku"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 258
        },
        "renderpass": [
            {
                "code": "//Modificado por jorge2017a1 ----jorgeFloresP\n\n//Referencia de IQ https://www.shadertoy.com/view/wdBXRW\n// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// Distance to a regular pentagon, without trigonometric functions. \n// https://iquilezles.org/articles/distfunctions2d\n\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\n//----------oPeraciones de Repeticion\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n//----------\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\n////-------------------\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat cross2d( in vec2 v0, in vec2 v1) { return v0.x*v1.y - v0.y*v1.x; }\n\nconst int N1 =30;\nconst int N2 =29;\nconst int N3 =10;\n\nfloat sdPolygonA( in vec2 p, in vec2[N1] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\n\n\nfloat sdPolygonB( in vec2 p, in vec2[N2] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\nfloat sdPolygonC( in vec2 p, in vec2[N3] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\n//vec2[] polygon = vec2[](v0,v1,v2,v3,v4);\nvec2 pt1[30]=vec2[]( vec2(.42,.79),vec2(.21,.72),vec2(.29,.7),vec2(.12,.55),\nvec2(.25,.55),vec2(.06,.33),vec2(.01,.31),vec2(.16,.25), vec2(.22,.25),vec2(.31,.3),\nvec2(.24,.08),vec2(.19,.01),vec2(.25,.01),vec2(.44,.07),vec2(.54,.24),vec2(.54,.37),\nvec2(.46,.45),vec2(.43,.55),vec2(.41,.48),vec2(.4,.42),vec2(.38,.46),vec2(.39,.56),\nvec2(.36,.55),vec2(.36,.61),vec2(.31,.59),vec2(.3,.61),vec2(.3,.68),vec2(.35,.73),\nvec2(.37,.73),vec2(.42,.79)  );\n\n\nvec2 pt2[29]=vec2[](\nvec2(.55,.37),vec2(.72,.36),vec2(.81,.34),vec2(.86,.34),vec2(.95,.35),vec2(.83,.47),\nvec2(.9,.49),vec2(.95,.52),vec2(.79,.64),vec2(.89,.68),vec2(.75,.72),vec2(.8,.76),\nvec2(.61,.79),vec2(.65,.75),vec2(.66,.73),vec2(.68,.73),vec2(.73,.69),vec2(.74,.64),\nvec2(.74,.58),vec2(.72,.58),vec2(.67,.61),vec2(.68,.56),vec2(.66,.58),vec2(.66,.49),\nvec2(.66,.44),vec2(.64,.48),vec2(.58,.54),vec2(.58,.46),vec2(.54,.37)  );\n\nvec2 pt3[10]=vec2[](vec2(.3,.37),vec2(.37,.73),vec2(.39,.76),vec2(.51,.83),\nvec2(.53,.83),vec2(.64,.76),vec2(.66,.74),vec2(.68,.6),vec2(.71,.37),vec2(.29,.37) );\n\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n\n\n//Pie - exact   (https://www.shadertoy.com/view/3l23RK)\n//actualizacion 8-mar-2021\nfloat sdPie( in vec2 p, in vec2 c, in float r )\n{\n    p.x = abs(p.x);\n    float l = length(p) - r;\n    float m = length(p-c*clamp(dot(p,c),0.0,r)); // c=sin/cos of aperture\n    return max(l,m*sign(c.y*p.x-c.x*p.y));\n}\n\nvec3 CabezaConPelo(vec2 p, vec3 col )\n{\n    vec2 p2= rotatev2( p, radians(180.0));\n    vec2 p3= rotatev2( p-vec2(-0.09,0.09), radians(310.0)); \n    \n    \n    float d1 = sdPolygonA(p2-vec2(-0.4,-0.5), pt1);\n    float d2 = sdPolygonB(p2-vec2(-0.4,-0.5), pt2);\n    float d3 = sdPolygonC(p2-vec2(-0.4,-0.5), pt3);\n    \n    float boca1= sdBox( p-vec2(-0.1,-0.25), vec2(0.05,0.01) );\n    \n    //float pelocirculo=sdCircle( p-vec2(-0.21,0.2), 0.12 );\n    float pelocirculo=sdPie( p3, vec2(0.04,0.05), 0.18 );\n    \n    float ojo1=sdCircle( p-vec2(-0.05,-0.1), 0.01 );\n    float ojo2=sdCircle( p-vec2(-0.15,-0.1), 0.01 );\n    \n    float ojo1A=sdCircle( p-vec2(-0.05,-0.1), 0.05 );\n    float ojo2A=sdCircle( p-vec2(-0.05,-0.1), 0.045 );\n    \n    float ojo1B=sdCircle( p-vec2(-0.15,-0.1), 0.05 );\n    float ojo2B=sdCircle( p-vec2(-0.15,-0.1), 0.045 );\n    \n    ojo1A= opS( ojo2A, ojo1A );\n    ojo1B= opS( ojo2B, ojo1B );\n    d3= opS( d1, d3 );\n    d3= opS( d2, d3 );\n    d3= opS( pelocirculo, d3 );\n    \n    col = mix(col,vec3(0.0, 0.0,0.0)*1.2,S(pelocirculo,0.0));\n    col = mix(col,vec3(0.0, 0.0,0.0)*1.2,S(d1,0.0));\n    col = mix(col,vec3(0.0, 0.0,0.0)*1.2,S(d2,0.0));\n    col = mix(col,vec3(0.925, 0.73,0.7)*1.2,S(d3,0.0));\n    \n    col = mix(col,vec3(1.0, 0.2,0.1)*1.2,S(boca1,0.0));\n    col = mix(col,vec3(0.0, 0.2,0.1)*1.2,S(ojo1,0.0));\n    col = mix(col,vec3(0.0, 0.2,0.1)*1.2,S(ojo2,0.0));\n    col = mix(col,vec3(0.0, 0.2,0.1)*1.2,S(ojo1A,0.0));\n    col = mix(col,vec3(0.0, 0.2,0.1)*1.2,S(ojo1B,0.0));\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    float tt=fract(iTime*0.5)*0.35;\n    uv=uv*2.0*abs(sin(tt));\n    vec2 p=uv;\n    \n    vec3 col=  vec3(1.0,0.5,0.5);\n    col= CabezaConPelo(p, col);\n    fragColor=vec4(col,1.0); \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}