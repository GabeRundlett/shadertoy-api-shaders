{
    "Shader": {
        "info": {
            "date": "1454802535",
            "description": "A 2D discrete attractor plotter with gradient based coloring based off the images here: http://paulbourke.net/fractals/clifford/<br/>The type of attractor and system parameters can be changed in Buf A.",
            "flags": 32,
            "hasliked": 0,
            "id": "Msy3Dm",
            "likes": 35,
            "name": "2D Discrete Attractor Plotter",
            "published": 3,
            "tags": [
                "math",
                "attractor",
                "chaos",
                "discrete"
            ],
            "usePreview": 0,
            "username": "Flyguy",
            "viewed": 1732
        },
        "renderpass": [
            {
                "code": "//Change INTEGRATOR in Buf A and reset to see different attractors.\n\n//Coloring gradient\n#define GRADIENT Grad1\n\n//Preview of gradient\n#define VIEW_GRADIENT\n\n//Background color\n#define BACKGROUND vec3(1.00, 1.00, 1.00);\n\nvec3 Grad1(float x)\n{\n    x = clamp(x, 0.0, 1.0);\n    \n    vec3 col = BACKGROUND;\n    \n    col = mix(col, vec3(1.00, 0.35, 0.00), pow(x, 0.35));\n    col = mix(col, vec3(0.50, 0.00, 0.50), smoothstep(0.05,0.8,x));\n    \n    return col;\n}\n\nvec3 Grad2(float x)\n{\n    x = clamp(x, 0.0, 1.0);\n    \n    vec3 col = BACKGROUND;\n    \n    col = mix(col, vec3(0.20, 0.60, 0.20), pow(x, 0.5)); \n    col = mix(col, vec3(0.40, 0.40, 0.90), smoothstep(0.2,1.5,x));\n    \n    return col;\n}\n\nvec3 Grad3(float x)\n{\n    x = clamp(x, 0.0, 1.0);\n    \n    vec3 col = BACKGROUND;\n    \n    col = mix(col, vec3(0.00, 0.00, 0.00), pow(x, 0.5)); \n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / iResolution.y;\n    vec2 uv = fragCoord / iResolution.y;\n    \n    float inten = texture(iChannel0, fragCoord / iResolution.xy).r;\n    \n    //Scale the gradient intensity with time for a faster fade in.\n    inten = inten / (iTime * 0.01);\n    \n\tfragColor = vec4(GRADIENT(inten), 0);\n    \n    #ifdef VIEW_GRADIENT\n    if(uv.x / res.x < 0.03)\n    {\n        fragColor = vec4(GRADIENT(uv.y), 0);\n    }\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Iterations per frame\n#define ITERATIONS 256\n\n//Integrator function\n#define INTEGRATOR Clifford\n\n//Point size (pixels)\n#define BLUR 1.3\n\n//Point intensity\n#define INTENSITY 0.00001\n\n//Initial conditions\n#define START vec2(atan(1.0), sqrt(2.0))\n\n//Scale of the attractor (set by individual functions)\nfloat scale = 1.0;\n\n//http://paulbourke.net/fractals/clifford/\nvec2 Clifford(vec2 last)\n{\n    scale = 0.2;\n        \n    float a = 1.7;\n    float b = 1.7;\n    float c = 0.6;\n    float d = 1.2;\n    \n\tvec2 next = vec2(0);\n\t\n    next.x = sin(a * last.y) + c * cos(a * last.x);\n    next.y = sin(b * last.x) + d * cos(b * last.y);\n    \n    return next;\n}\n\n//http://paulbourke.net/fractals/peterdejong/\nvec2 PeterdeJong(vec2 last)\n{\n    scale = 0.2;\n    \n    float a =-2.0;\n    float b =-2.0;\n    float c =-1.2;\n    float d = 2.0;\n    \n\tvec2 next = vec2(0);\n\t\n    next.x = sin(a * last.y) - cos(b * last.x);\n    next.y = sin(c * last.x) - cos(d * last.y);\n    \n    return next;\n}\n\n//https://en.wikipedia.org/wiki/Gingerbreadman_map\n//Different starting positions can produce unique patterns.\nvec2 GingerBreadMan(vec2 last)\n{\n    scale = 0.05;\n    \n    vec2 next = vec2(0);\n    \n    next.x = 1.0 - last.y + abs(last.x);\n    next.y = last.x;\n    \n    return next;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / iResolution.y;\n    float ps = 1.0 / iResolution.y;\n    vec2 uv = fragCoord / iResolution.y;\n    \n    vec2 last = texture(iChannel0, vec2(0)).xy;\n    vec2 next = vec2(0);\n    \n    float psum = 0.0;\n    \n    for(int i = 0;i < ITERATIONS; i++)\n    {\n        next = INTEGRATOR(last);\n        \n        psum += smoothstep(BLUR * ps, 0.0, distance(uv - res/2.0, next * scale));\n        \n        last = next;\n    }\n    \n    psum /= BLUR;\n    psum /= ps;\n    psum *= INTENSITY;\n    \n    float lastFrame = texture(iChannel0, uv/res).x;\n    \n    fragColor = vec4(psum + lastFrame, 0, 0, 0);\n    \n    if(floor(fragCoord) == vec2(0,0))\n    {\n        if(iFrame < 4)\n        {\n            fragColor = vec4(START, 0, 0);\n        }\n        else\n        {\n        \tfragColor = vec4(next, 0, 0);\n    \t}\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}