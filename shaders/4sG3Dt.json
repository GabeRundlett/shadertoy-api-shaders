{
    "Shader": {
        "info": {
            "date": "1456938325",
            "description": "Balls descending (by special request)",
            "flags": 32,
            "hasliked": 0,
            "id": "4sG3Dt",
            "likes": 15,
            "name": "Stairway from Heaven",
            "published": 3,
            "tags": [
                "simulation",
                "dynamics",
                "physics",
                "collisions"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 957
        },
        "renderpass": [
            {
                "code": "// \"Stairway from Heaven\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g, e;\n  float s;\n  e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nconst int nBall = 169;\nvec3 vnBall, sunDir;\nfloat tCur, dstFar;\nint idBall, idObj;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, fnh;\n  dMin = dstFar;\n  d = p.y - 0.5;\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  for (int nh = 0; nh < 15; nh ++) {\n    fnh = float (nh);\n    q = p;\n    q.y -= 0.5 + fnh;\n    d = min (d, PrBoxDf (q, 0.48 + vec3 (30. - 2. * fnh, 0.5, 30. - 2. * fnh)));\n  }\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat BallHit (vec3 ro, vec3 rd)\n{\n  vec4 p;\n  vec3 u;\n  float b, d, w, dMin, rad;\n  dMin = dstFar;\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 + 4 * n);\n    u = ro - p.xyz;\n    rad = 0.45 * p.w;\n    b = dot (rd, u);\n    w = b * b - dot (u, u) + rad * rad;\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) {\n        dMin = d;\n        vnBall = (u + d * rd) / rad;\n        idBall = n;\n      }\n    }\n  }\n  return dMin;\n}\n\nfloat BallHitSh (vec3 ro, vec3 rd, float rng)\n{\n  vec4 p;\n  vec3 rs, u;\n  float b, d, w, dMin, rad;\n  dMin = dstFar;\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 + 4 * n);\n    u = ro - p.xyz;\n    rad = 0.45 * p.w;\n    b = dot (rd, u);\n    w = b * b - dot (u, u) + rad * rad;\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) dMin = d;\n    }\n  }\n  return smoothstep (0., rng, dMin);\n}\n\nfloat BallChqr (int idBall, vec3 vnBall)\n{\n  vec3 u;\n  u = vnBall * QtToRMat (Loadv4 (4 + 4 * idBall + 2));\n  return 0.4 + 0.6 * step (0., sign (u.y) * sign (u.z) * atan (u.x, u.y));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, vn, bgCol;\n  float dstGrnd, dstBall, sh, c;\n  bgCol = 0.8 * vec3 (0.45, 0.35, 0.15);\n  dstGrnd = ObjRay (ro, rd);\n  dstBall = BallHit (ro, rd);\n  if (min (dstBall, dstGrnd) < dstFar) {\n    if (dstGrnd < dstBall) {\n      ro += rd * dstGrnd;\n      if (idObj == 1) {\n        vn = VaryNf (0.5 * ro, vec3 (0., 1., 0.), 2.);\n        objCol = vec4 (mix (bgCol - 0.05, bgCol + 0.05, Fbm2 (0.5 * ro.xz)), 0.);\n      } else {\n        vn = VaryNf (5. * ro, ObjNf (ro), 5.);\n        objCol = vec4 (vec3 (0.7, 0.75, 0.7) * (1. -\n           0.4 * Fbm2 (30. * vec2 (dot (ro.yzx, vn), dot (ro.zxy, vn)))), 0.1);\n      }\n    } else {\n      ro += rd * dstBall;\n      vn = vnBall;\n      c = 33. * float (idBall) / float (nBall);\n      objCol = vec4 (HsvToRgb (vec3 (mod (c, 1.), 1. - 0.1 * mod (c, 8.),\n         1. - 0.05 * mod (c, 13.))), 1.);\n      objCol.rgb *= BallChqr (idBall, vnBall);\n    }\n    sh = BallHitSh (ro + 0.01 * sunDir, sunDir, 10.);\n    col = objCol.rgb * (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.) +\n       0.3 * max (dot (vn, vec3 (- sunDir.x, 0., - sunDir.z)), 0.)) +\n       objCol.a * sh * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.);\n    col = mix (col, bgCol, clamp (3. * min (dstBall, dstGrnd) / dstFar - 2.,\n       0., 1.));\n  } else col = bgCol;\n  return pow (clamp (col, 0., 1.), vec3 (0.7));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 col, rd, ro, vd, u;\n  vec2 canvas, uv;\n  float az, el, zmFac, f;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  dstFar = 220.;\n  az = 0.25 * pi;\n  el = 0.15 * pi;\n  zmFac = 5.;\n  if (mPtr.z > 0.) {\n    el = clamp (el - 0.5 * pi * mPtr.y, 0.02 * pi, 0.45 * pi);\n    az -= 2. * pi * mPtr.x;\n  }\n  ro = 120. * vec3 (cos (el) * cos (az), sin (el), cos (el) * sin (az));\n  vd = normalize (vec3 (0., -2., 0.) - ro);\n  u = - vd.y * vd;\n  f = 1. / sqrt (1. - vd.y * vd.y);\n  vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  sunDir = normalize (vec3 (cos (0.007 * tCur), 3., sin (0.007 * tCur)));\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Stairway from Heaven\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nconst float pi = 3.14159;\nconst int nBall = 169;\nfloat tCur, nStep;\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float sz)\n{\n  vec4 p;\n  vec3 rmN, vmN, wmN, dr, dv, drw, am, wam;\n  float fOvlap, fricN, fricT, fricS, fricSW, fDamp, fAttr, grav, rSep, szN, szAv,\n     fc, ft, ms, drv, dt, fnh;\n  fOvlap = 1000.;\n  fricN = 10.;\n  fricS = 0.1;\n  fricSW = 10.;\n  fricT = 0.5;\n  fDamp = 0.02;\n  grav = 10.;\n  p = Loadv4 (4 + 4 * mId);\n  rm = p.xyz;\n  sz = p.w;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  ms = sz * sz * sz;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 + 4 * n);\n    rmN = p.xyz;\n    szN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    szAv = 0.5 * (sz + szN);\n    if (n != mId && rSep < szAv) {\n      fc = fOvlap * (szAv / rSep - 1.);\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      dv = vm - vmN;\n      drv = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * drv, 0.);\n      am += fc * dr;\n      dv -= drv * dr + cross ((sz * wm + szN * wmN) / (sz + szN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n  szAv = 0.5 * (sz + 1.);\n  dr = vec3 (0., rm.y, 0.);\n  rSep = abs (dr.y);\n  if (rSep < szAv) {\n    fc = fOvlap * (szAv / rSep - 1.);\n    dv = vm;\n    drv = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * drv, 0.);\n    am += fc * dr;\n    dv -= drv * dr + cross (wm, dr);\n    ft = min (fricT, fricSW * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  szAv = 0.5 * (sz + 1.);\n  for (int nh = 0; nh < 15; nh ++) {\n    fnh = float (nh);\n    dr = rm;\n    dr.y -= 0.55 + fnh;\n    dr = max (abs (dr) - vec3 (30. - 2. * fnh, 0.5, 30. - 2. * fnh), 0.) *\n       sign (dr);\n    rSep = length (dr);\n    if (rSep < szAv) {\n      fc = fOvlap * (szAv / rSep - 1.);\n      dv = vm;\n      drv = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * drv, 0.);\n      am += fc * dr;\n      dv -= drv * dr + cross (wm, dr);\n      ft = min (fricT, fricSW * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n  am.y -= grav * ms;\n  am -= fDamp * vm;\n  if (rm.y < 2.) am.xz += 5. * normalize (rm.xz);\n  dt = 0.01;\n  vm += dt * am / ms;\n  rm += dt * vm;\n  wm += dt * wam / (0.1 * ms * sz);\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float sz)\n{\n  vec3 e;\n  float mIdf, nbEdge;\n  nbEdge = floor (sqrt (float (nBall)) + 0.1);\n  mIdf = float (mId);\n  rm.xz = floor (vec2 (mod (mIdf, nbEdge), mIdf / nbEdge)) - 0.5 * (nbEdge - 1.);\n  rm.y = 24.;\n  vm = 2. * normalize (vec3 (Hashff (mIdf), Hashff (mIdf + tCur + 0.3),\n     Hashff (mIdf + 0.6)) - 0.5);\n  e = normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3),\n     Hashff (mIdf + 0.6)));\n  qm = EulToQt (e);\n  wm = vec3 (0.);\n  sz = 1. - 0.1 * Hashff (mIdf + 0.1);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag;\n  float sz;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBall + 4) discard;\n  tCur = iTime;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  doInit = false;\n  if (iFrame <= 5) {\n    doInit = true;\n  } else {\n    nStep = Loadv4 (0).x;\n    ++ nStep;\n    if (mId >= 0) Step (mId, rm, vm, qm, wm, sz);\n    if (length (rm.xz) > 100.) Init (mId, rm, vm, qm, wm, sz);\n  }\n  if (doInit) {\n    nStep = 0.;\n    if (mId >= 0) Init (mId, rm, vm, qm, wm, sz);\n  }\n  if (pxId == 0) stDat = vec4 (nStep, 0., 0., 0.);\n  else if (pxId == 4 + 4 * mId) p = vec4 (rm, sz);\n  else if (pxId == 4 + 4 * mId + 1) p = vec4 (vm, 0.);\n  else if (pxId == 4 + 4 * mId + 2) p = qm;\n  else if (pxId == 4 + 4 * mId + 3) p = vec4 (wm, 0.);\n  Savev4 (pxId, ((pxId >= 4) ? p : stDat), fragColor, fragCoord);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Stairway from Heaven\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nconst float pi = 3.14159;\nconst int nBall = 169;\nfloat tCur, nStep;\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float sz)\n{\n  vec4 p;\n  vec3 rmN, vmN, wmN, dr, dv, drw, am, wam;\n  float fOvlap, fricN, fricT, fricS, fricSW, fDamp, fAttr, grav, rSep, szN, szAv,\n     fc, ft, ms, drv, dt, fnh;\n  fOvlap = 1000.;\n  fricN = 10.;\n  fricS = 0.1;\n  fricSW = 10.;\n  fricT = 0.5;\n  fDamp = 0.02;\n  grav = 10.;\n  p = Loadv4 (4 + 4 * mId);\n  rm = p.xyz;\n  sz = p.w;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  ms = sz * sz * sz;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 + 4 * n);\n    rmN = p.xyz;\n    szN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    szAv = 0.5 * (sz + szN);\n    if (n != mId && rSep < szAv) {\n      fc = fOvlap * (szAv / rSep - 1.);\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      dv = vm - vmN;\n      drv = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * drv, 0.);\n      am += fc * dr;\n      dv -= drv * dr + cross ((sz * wm + szN * wmN) / (sz + szN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n  szAv = 0.5 * (sz + 1.);\n  dr = vec3 (0., rm.y, 0.);\n  rSep = abs (dr.y);\n  if (rSep < szAv) {\n    fc = fOvlap * (szAv / rSep - 1.);\n    dv = vm;\n    drv = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * drv, 0.);\n    am += fc * dr;\n    dv -= drv * dr + cross (wm, dr);\n    ft = min (fricT, fricSW * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  szAv = 0.5 * (sz + 1.);\n  for (int nh = 0; nh < 15; nh ++) {\n    fnh = float (nh);\n    dr = rm;\n    dr.y -= 0.55 + fnh;\n    dr = max (abs (dr) - vec3 (30. - 2. * fnh, 0.5, 30. - 2. * fnh), 0.) *\n       sign (dr);\n    rSep = length (dr);\n    if (rSep < szAv) {\n      fc = fOvlap * (szAv / rSep - 1.);\n      dv = vm;\n      drv = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * drv, 0.);\n      am += fc * dr;\n      dv -= drv * dr + cross (wm, dr);\n      ft = min (fricT, fricSW * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n  am.y -= grav * ms;\n  am -= fDamp * vm;\n  if (rm.y < 2.) am.xz += 5. * normalize (rm.xz);\n  dt = 0.01;\n  vm += dt * am / ms;\n  rm += dt * vm;\n  wm += dt * wam / (0.1 * ms * sz);\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float sz)\n{\n  vec3 e;\n  float mIdf, nbEdge;\n  nbEdge = floor (sqrt (float (nBall)) + 0.1);\n  mIdf = float (mId);\n  rm.xz = floor (vec2 (mod (mIdf, nbEdge), mIdf / nbEdge)) - 0.5 * (nbEdge - 1.);\n  rm.y = 24.;\n  vm = 2. * normalize (vec3 (Hashff (mIdf), Hashff (mIdf + tCur + 0.3),\n     Hashff (mIdf + 0.6)) - 0.5);\n  e = normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3),\n     Hashff (mIdf + 0.6)));\n  qm = EulToQt (e);\n  wm = vec3 (0.);\n  sz = 1. - 0.1 * Hashff (mIdf + 0.1);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag;\n  float sz;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBall + 4) discard;\n  tCur = iTime;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  doInit = false;\n  if (iFrame <= 5) {\n    doInit = true;\n  } else {\n    nStep = Loadv4 (0).x;\n    ++ nStep;\n    if (mId >= 0) Step (mId, rm, vm, qm, wm, sz);\n    if (length (rm.xz) > 100.) Init (mId, rm, vm, qm, wm, sz);\n  }\n  if (doInit) {\n    nStep = 0.;\n    if (mId >= 0) Init (mId, rm, vm, qm, wm, sz);\n  }\n  if (pxId == 0) stDat = vec4 (nStep, 0., 0., 0.);\n  else if (pxId == 4 + 4 * mId) p = vec4 (rm, sz);\n  else if (pxId == 4 + 4 * mId + 1) p = vec4 (vm, 0.);\n  else if (pxId == 4 + 4 * mId + 2) p = qm;\n  else if (pxId == 4 + 4 * mId + 3) p = vec4 (wm, 0.);\n  Savev4 (pxId, ((pxId >= 4) ? p : stDat), fragColor, fragCoord);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}