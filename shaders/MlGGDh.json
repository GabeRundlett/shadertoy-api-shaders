{
    "Shader": {
        "info": {
            "date": "1474386356",
            "description": "I'm trying to learn more. Sorry so basic! Suggestions are welcome.",
            "flags": 0,
            "hasliked": 0,
            "id": "MlGGDh",
            "likes": 27,
            "name": "Simple Cube Rotation + Twist",
            "published": 3,
            "tags": [
                "cube",
                "rotation",
                "twist"
            ],
            "usePreview": 0,
            "username": "cacheflowe",
            "viewed": 2355
        },
        "renderpass": [
            {
                "code": "#define ITERATIONS 64\n#define SDF_THRESHOLD 0.0001\n#define CUBE_SIZE 0.6\n#define BG_COLOR vec3(1,1,1)\n#define PI 3.141592653589793238462643383\n\n// --------------------------------------------------------\n// http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\n// updated by @stduhpf to be 3x3 - thank you!\n// also thanks to @FabriceNeyret2 for code optimizations.\n// --------------------------------------------------------\n\nmat3 rotationMatrix(vec3 m,float a) {\n    m = normalize(m);\n    float c = cos(a),s=sin(a);\n    return mat3(c+(1.-c)*m.x*m.x,\n                (1.-c)*m.x*m.y-s*m.z,\n                (1.-c)*m.x*m.z+s*m.y,\n                (1.-c)*m.x*m.y+s*m.z,\n                c+(1.-c)*m.y*m.y,\n                (1.-c)*m.y*m.z-s*m.x,\n                (1.-c)*m.x*m.z-s*m.y,\n                (1.-c)*m.y*m.z+s*m.x,\n                c+(1.-c)*m.z*m.z);\n}\n\n// --------------------------------------------------------\n// https://iquilezles.org/articles/distfunctions\n// --------------------------------------------------------\n\nfloat udBox( vec3 p, vec3 b ) {\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat udBoxTwisted( vec3 p, vec3 b, float twist )\n{\n    float c = cos(twist*p.y);\n    float s = sin(twist*p.y);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m*p.xz,p.y);\n    return udBox(q, b);\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // basic raymarching template from @nicoptere: https://www.shadertoy.com/view/ldtGD4\n    // 1 : get fragment's coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\t\t\t\t\t\t\t\t\t// Move to center\n    uv.x *= iResolution.x / iResolution.y;\t\t// Correct for aspect ratio\n    \n    // 2 : camera position and ray direction\n    float cubeZ = -3.;\n\tvec3 pos = vec3( 0, 0, cubeZ);\n\tvec3 dir = normalize( vec3( uv.x, uv.y, 1.) );\n \n\t// 3 : ray march loop. ip will store where the ray hits the surface\n\tvec3 ip;\n \n\t// variable step size\n\tfloat t = 0.0;\n\tint found = 0;\n    int last_i = 0;\n    float time = iTime/1.;\n    \n\tfor(int i=0; i < ITERATIONS; i++) {\n\t\tlast_i = i;\n\n        //update position along path\n        ip = pos + dir * t;\n \n        // gets the shortest distance to the sdf shape. break the loop if the distance was too small. this means that we are close enough to the surface\n    \tvec3 ipRotated = ip * rotationMatrix(vec3(0.,-3.,0.7), 3.3 * sin(time));\n        // float temp = udBox( ipRotated, vec3(CUBE_SIZE) );\n        float temp = udBoxTwisted( ipRotated, vec3(CUBE_SIZE), -sin(PI*0.5 + time) * 1.2 );\n\t\tif( temp < SDF_THRESHOLD ) {\n\t\t\tip = vec3(\n                0.4 + 0.2 * sin(1. + time + ip.x),\n                0.8 + 0.2 * sin(2. + time + ip.y),\n                0.7 + 0.2 * sin(3. + time + ip.z)\n            );\n\t\t\tfound = 1;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t//increment the step along the ray path\n\t\tt += temp;\n\t}\n\t\n\t// make background black if no shape was hit\n\tif(found == 0) ip = BG_COLOR;\n \n\t// 4 : apply color to this fragment\n\tfragColor = vec4(ip, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}