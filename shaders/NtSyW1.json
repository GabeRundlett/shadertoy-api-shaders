{
    "Shader": {
        "info": {
            "date": "1649571793",
            "description": "simple shadows using stepped racast",
            "flags": 0,
            "hasliked": 0,
            "id": "NtSyW1",
            "likes": 1,
            "name": "Shadow pillars",
            "published": 3,
            "tags": [
                "shadow"
            ],
            "usePreview": 0,
            "username": "vnvthedark",
            "viewed": 227
        },
        "renderpass": [
            {
                "code": "float rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat getClosest( vec3[12] a, int n, vec2 point )\n{\n    float distance = length(a[0].xy - point) - a[0].z;\n    for(int i = 1; i<n; i++){\n        float tmp = length(a[i].xy - point)-a[i].z;\n        if(tmp<distance)\n        {\n            distance = tmp;\n        }\n    }\n    return distance;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float threshhold = 1.0;\n    const int maxSteps = 50;\n    vec2 center = iMouse.xy;\n    \n    vec3 planets[12];\n    for(int i = 0; i<planets.length(); i++)\n    {\n        planets[i] = vec3((i%3+1)*int(iResolution.x)/4,(1+i/3)*int(iResolution.y)/5, 15);\n    }\n    \n    vec2 diff = center - fragCoord;\n    \n    int i = 0;\n    \n    vec2 point = fragCoord;\n    bool collision = true;\n    \n    float progress = 0.0;\n    float lightContribution = 1.0;\n    \n    for(i = 0; i < maxSteps; i++){\n        \n        float dist = length(center - point);\n        \n        float close = getClosest(planets, 12, point)*.5*(1.0-.2*rand(fragCoord));\n        \n        progress += close;\n        lightContribution = min(lightContribution, 10.0*(close)/progress);\n        \n        \n        \n        if(length(progress - diff) < threshhold){\n            collision = false;\n            break;\n        }\n        point = (diff*close/length(diff)) + point;\n        //collision = true;\n        \n    }\n    \n    \n    \n    \n    float bright = lightContribution;\n    \n    if(length(diff) - progress > .1 &&  collision){\n    \n        bright = 0.0;\n    \n    }\n    \n    float d = length(diff);\n    d /= 1000.0;\n    float light = 1.0/(d*d+1.0);\n    bright*=.5*light;\n    fragColor = vec4(bright);\n    \n    \n    \n    \n    vec4 column = vec4(0.0);\n    for(int j = 0; j<planets.length(); j++)\n    {\n         float add = step(length(fragCoord - planets[j].xy), planets[j].z);\n         vec2 normal = ((fragCoord - planets[j].xy)/length(fragCoord - planets[j].xy));\n         vec2 normalDiff = diff.xy/length(diff.xy);\n         float dotp = normal.x*normalDiff.x+normal.y*normalDiff.y;\n         add *= pow(dotp,1.0);\n         column+=add;\n         \n            \n    }\n    \n    fragColor *= 1.0;\n    //fragColor+=column*light*.5;\n\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}