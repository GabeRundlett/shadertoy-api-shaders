{
    "Shader": {
        "info": {
            "date": "1652636696",
            "description": "temporal oversampling using noise texture for jittering.\n( blue/white above/below diagonal, but the way it is used it is all white sampling ;-) ).\n\nNB: for real use, one wants point distribution rather than field.\n  box integration over pixel let some Ali",
            "flags": 32,
            "hasliked": 0,
            "id": "stjfRt",
            "likes": 8,
            "name": "progressive antialiasing",
            "published": 3,
            "tags": [
                "antialiasing",
                "temporal"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 425
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 U )\n{\n    T;\n    O = sqrt(O.xxxx/O.a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 O, vec2 U )\n{\n    T;\n    U += 1.* ( U.y > U.x // subpixel jittering through time\n          ? texelFetch(iChannel1,ivec2(U+float(iFrame)*vec2(17,13))%1024,0).xy -.5\n          : texelFetch(iChannel2,ivec2(U+float(iFrame)*vec2(17,13))%256,0).xy -.5 );\n          \n    U *= 20./iResolution.xy; \n    U *= sin(U.yx);\n    O.x += fract(U.x*U.y);\n    O.a++;         // frame count\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T O = texelFetch(iChannel0, ivec2(U), 0)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}