{
    "Shader": {
        "info": {
            "date": "1697248297",
            "description": "Clustering particles, with at most 2 particles per cell\nFor molecular dynamics clearly 2 is not sufficient for pixel-level densities, the particle distribution degenerates into a lattice.\nSPACE to ZOOM in!\nPerhaps for fluids this might work better..?",
            "flags": 48,
            "hasliked": 0,
            "id": "mscfW7",
            "likes": 28,
            "name": "Particle clustering (MD)",
            "published": 3,
            "tags": [
                "particle"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 603
        },
        "renderpass": [
            {
                "code": "//Clustering particles, with at most 2 particles per cell\n//For molecular dynamics clearly 2 is not sufficient for pixel-level densities, the particle distribution degenerates into a lattice.\n//SPACE to ZOOM in!\n//Perhaps for fluids this might work better..?\n//The density should be about 1.5x higher than in https://www.shadertoy.com/view/3s3cWr\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nconst int KEY_SPACE = 32;\nbool isKeyPressed(int KEY)\n{\n\treturn texelFetch( iChannel3, ivec2(KEY,2), 0 ).x > 0.5;\n}\n\n\n#define radius 1.5\n#define zoom 0.6\n\nvoid mainImage( out vec4 col, in vec2 pos )\n{    \n    float prad = 1.6;\n    //zoom in\n    if(isKeyPressed(KEY_SPACE))\n    {\n    \tpos = iMouse.xy + pos*zoom - R*zoom*0.5;\n        prad = radius;\n    }\n\n\n    //compute the smoothed density\n    float rho = 0.00;\n    range(i, -2, 2) range(j, -2, 2)\n    {\n        //load the particles \n        vec2 p = floor(pos) + vec2(i, j);\n        vec4 packed = LOAD(ch0, p);\n        Particle p0, p1;\n        unpackParticles(packed, p, p0, p1);\n\n        //compute the density\n        rho += float(p0.mass)*smoothstep(prad, 0.0, length(p0.pos - pos))/(prad*prad);\n        rho += float(p1.mass)*smoothstep(prad, 0.0, length(p1.pos - pos))/(prad*prad);\n    }\n\n    col.xyz = cos(2.5*vec3(3,2,1)*clamp(rho,0.0,2.5));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n\n#define LOAD(ch, pos) texelFetch(ch, ivec2(pos), 0)\n\n#define PI 3.1415926535\n#define TWO_PI 6.28318530718\n\n#define dt 0.6\n#define gravity 0.001\n#define force_k 0.4\n#define force_coef_a -3.0\n#define force_coef_b 1.0\n#define force_mouse 0.0025\n#define force_boundary 5.0\n#define boundary_h 5.0\n#define max_velocity 2.0\n#define cooling 1.5\n\n#define R iResolution.xy\n\n#define GS(x) exp(-dot(x,x))\n\n#define loop(i,x) for(int i = 0; i < x; i++)\n#define range(i,a,b) for(int i = a; i <= b; i++)\n\n\nstruct Particle \n{\n    uint mass;\n    vec2 pos;\n    vec2 vel;\n    vec2 force;\n};\n\nvec4 packParticles(Particle p0, Particle p1, vec2 pos)\n{\n    // 1. Mass\n    uint mass0 = p0.mass; \n    uint mass1 = p1.mass;\n    uint packedMass = (mass0 << 16) | mass1;\n    float massFloat = uintBitsToFloat(packedMass);\n\n    // 2. Position\n    p0.pos -= pos;\n    p1.pos -= pos;\n    \n    uint pos0x = uint(round(clamp(p0.pos.x, 0.0, 1.0) * 255.0)); // Assuming pos range [0, 1] in a cell\n    uint pos0y = uint(round(clamp(p0.pos.y, 0.0, 1.0) * 255.0));\n    uint pos1x = uint(round(clamp(p1.pos.x, 0.0, 1.0) * 255.0));\n    uint pos1y = uint(round(clamp(p1.pos.y, 0.0, 1.0) * 255.0));\n    uint packedPos = (pos0x << 24) | (pos0y << 16) | (pos1x << 8) | pos1y;\n    float posFloat = uintBitsToFloat(packedPos);\n\n    // 3. Velocity\n    p0.vel /= 2.0;\n    p1.vel /= 2.0;\n    \n    uint vel0Packed = packSnorm2x16(p0.vel);\n    uint vel1Packed = packSnorm2x16(p1.vel);\n\n    float vel0Float = uintBitsToFloat(vel0Packed);\n    float vel1Float = uintBitsToFloat(vel1Packed);\n\n    return vec4(massFloat, posFloat, vel0Float, vel1Float);\n}\n\nvoid unpackParticles(vec4 packed, vec2 pos, out Particle p0, out Particle p1)\n{\n    // 1. Unpack Mass\n    uint packedMass = floatBitsToUint(packed.x);\n    p0.mass = (packedMass >> 16) & 0xFFFFu;\n    p1.mass = packedMass & 0xFFFFu;\n\n    // 2. Unpack Position\n    uint packedPos = floatBitsToUint(packed.y);\n    p0.pos.x = float((packedPos >> 24) & 0xFFu) / 255.0;\n    p0.pos.y = float((packedPos >> 16) & 0xFFu) / 255.0;\n    p1.pos.x = float((packedPos >> 8) & 0xFFu) / 255.0;\n    p1.pos.y = float(packedPos & 0xFFu) / 255.0;\n\n    p0.pos += pos;\n    p1.pos += pos;\n\n    // 3. Unpack Velocity\n    uint vel0Packed = floatBitsToUint(packed.z);\n    uint vel1Packed = floatBitsToUint(packed.w);\n    p0.vel = unpackSnorm2x16(vel0Packed);\n    p1.vel = unpackSnorm2x16(vel1Packed);\n    \n    p0.vel *= 2.0;\n    p1.vel *= 2.0;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nint ClosestCluster(Particle p0, Particle p1, Particle incoming)\n{\n    //first try to choose the particle with significantly smaller mass\n    if(float(p0.mass) < 0.1*float(p1.mass) || float(p1.mass) < 0.1*float(p0.mass))\n    {\n        return p0.mass < p1.mass ? 0 : 1;\n    }\n\n    //otherwise choose the closest one\n    float d0 = length(p0.pos - incoming.pos);\n    float d1 = length(p1.pos - incoming.pos);\n    return d0 < d1 ? 0 : 1;\n}\n\nvoid BlendParticle(inout Particle p, in Particle incoming)\n{\n    uint newMass = p.mass + incoming.mass;\n    vec2 weight = vec2(p.mass, incoming.mass) / float(newMass);\n    p.pos = p.pos*weight.x + incoming.pos*weight.y;\n    p.vel = p.vel*weight.x + incoming.vel*weight.y;\n    p.mass = newMass;\n}\n\nvoid Clusterize(inout Particle p0, inout Particle p1, in Particle incoming, vec2 pos)\n{\n    //check if the incoming particle is in the cell\n    if(!all(equal(pos, floor(incoming.pos))))\n    {\n        return;\n    }\n\n    int closest = ClosestCluster(p0, p1, incoming);\n    if(closest == 0)\n    {\n        BlendParticle(p0, incoming);\n    }\n    else\n    {\n        BlendParticle(p1, incoming);\n    }\n}\n\nvoid SplitParticle(inout Particle p1, inout Particle p2)\n{\n    uint newMass = p1.mass;\n    p1.mass = newMass/2u;\n    p2.mass = newMass - p1.mass;\n    vec2 pos = p1.pos;\n    vec2 weight = vec2(p1.mass, p2.mass)/float(newMass);\n    p2.pos = p1.pos + vec2(-1,1)*2e-2;\n    p1.pos = p1.pos - vec2(-1,1)*2e-2;\n    p2.vel = p1.vel;\n}\n\n\nfloat border(vec2 p, vec2 iR)\n{\n    float bound = -sdBox(p+0.001 - iR*0.5, iR*vec2(0.49, 0.49)); \n    return bound;\n}\n\n#define h 1.\nvec3 bN(vec2 p, vec2 iR)\n{\n    vec3 dx = vec3(-h,0,h);\n    vec4 idx = vec4(-1./h, 0., 1./h, 0.25);\n    vec3 r = idx.zyw*border(p + dx.zy, iR)\n           + idx.xyw*border(p + dx.xy, iR)\n           + idx.yzw*border(p + dx.yz, iR)\n           + idx.yxw*border(p + dx.yx, iR);\n    return vec3(normalize(r.xy), r.z + 1e-4);\n}\n\n\nvoid ApplyForce(inout Particle p, in Particle incoming)\n{\n    float d = distance(p.pos, incoming.pos);\n    vec2 dir = (incoming.pos - p.pos)/max(d, 1e-5);\n    float f = clamp(force_coef_a*exp(-d*d*0.6)+force_coef_b*exp(-d*d*0.3), -0.5, 0.5);\n    vec2 F = force_k * f * dir * float(incoming.mass);\n    p.force += F;\n    \n}\n\nvoid IntegrateParticle(inout Particle p, vec2 pos, vec2 iR, vec4 iM)\n{\n    p.force = p.force / max(0.0001, float(p.mass));\n    p.force += vec2(0.0, -gravity); //gravity\n    \n    vec3 BORD = bN(p.pos, iR);\n    p.force += force_boundary * smoothstep(0., boundary_h, -BORD.z) * BORD.xy;\n \n    if(iM.z > 0.)\n    {\n        vec2 dx = pos - iM.xy;\n        p.force -= force_mouse*dx*GS(dx/30.);\n    }\n        \n    p.vel += p.force * dt;\n    p.pos += cooling * p.force * dt;\n\n    //velocity limit\n    float v = length(p.vel)/max_velocity;\n    p.vel /= (v > 1.)?v:1.;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 pos )\n{\n    pos = floor(pos);\n    Particle p0, p1;\n\n    p0.mass = 0u;\n    p0.pos = vec2(0.0, 0.0);\n    p0.vel = vec2(0.0, 0.0);\n\n    p1.mass = 0u;\n    p1.pos = vec2(0.0, 0.0);\n    p1.vel = vec2(0.0, 0.0);\n\n    //advect neighbors and accumulate + clusterize density if they fall into this cell\n    range(i, -2, 2) range(j, -2, 2)\n    {\n        //load the particles \n        vec2 pos1 = pos + vec2(i, j);\n        Particle p0_, p1_;\n        unpackParticles(LOAD(ch0, pos1), pos1, p0_, p1_);\n        \n        if(p0_.mass > 0u)\n        {\n            p0_.pos += p0_.vel*dt;\n            Clusterize(p0, p1, p0_, pos);\n        }\n   \n        if(p1_.mass > 0u)\n        {\n            p1_.pos += p1_.vel*dt;\n            Clusterize(p0, p1, p1_, pos);\n        }\n    }\n    \n    if(p1.mass == 0u && p0.mass > 0u)\n    {\n        SplitParticle(p0, p1);\n    }\n\n    if(p0.mass == 0u && p1.mass > 0u)\n    {\n        SplitParticle(p1, p0);\n    }\n    \n    if(iFrame < 10)\n    {\n        if(pos.x < 0.65*R.x && pos.x > 0.35*R.x && pos.y < 0.65*R.y && pos.y > 0.35*R.y)\n        {\n            p0.mass = 1u;\n            p1.mass = 0u;\n        }\n\n        p0.pos = pos+vec2(0.2, 0.2);\n        p0.vel = vec2(0., 0.);\n        p1.pos = pos+vec2(0.75, 0.75);\n        p1.vel = vec2(0.25, 0.25);\n    }\n\n    vec4 packed = packParticles(p0, p1, pos);\n    fragColor = packed;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 pos )\n{\n    pos = floor(pos);\n    Particle p0, p1;\n    \n    //load the particles\n    vec4 packed = LOAD(ch0, pos);\n    unpackParticles(packed, pos, p0, p1);\n    \n    if(p0.mass + p1.mass > 0u) \n    {\n        range(i, -2, 2) range(j, -2, 2)\n        {\n            if(i == 0 && j == 0) continue;\n            //load the particles \n            vec2 pos1 = pos + vec2(i, j);\n            Particle p0_, p1_;\n            unpackParticles(LOAD(ch0, pos1), pos1, p0_, p1_);\n\n            //apply the force\n            ApplyForce(p0, p0_);\n            ApplyForce(p0, p1_);\n            ApplyForce(p1, p0_);\n            ApplyForce(p1, p1_);\n        }\n\n        ApplyForce(p0, p1);\n        ApplyForce(p1, p0);\n\n        IntegrateParticle(p0, pos, iResolution.xy, iMouse);\n        IntegrateParticle(p1, pos, iResolution.xy, iMouse);\n    }\n\n    packed = packParticles(p0, p1, pos);\n    fragColor = packed;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 pos )\n{\n    pos = floor(pos);\n    Particle p0, p1;\n\n    p0.mass = 0u;\n    p0.pos = vec2(0.0, 0.0);\n    p0.vel = vec2(0.0, 0.0);\n\n    p1.mass = 0u;\n    p1.pos = vec2(0.0, 0.0);\n    p1.vel = vec2(0.0, 0.0);\n\n    //advect neighbors and accumulate + clusterize density if they fall into this cell\n    range(i, -2, 2) range(j, -2, 2)\n    {\n        //load the particles \n        vec2 pos1 = pos + vec2(i, j);\n        Particle p0_, p1_;\n        unpackParticles(LOAD(ch0, pos1), pos1, p0_, p1_);\n        \n        if(p0_.mass > 0u)\n        {\n            p0_.pos += p0_.vel*dt;\n            Clusterize(p0, p1, p0_, pos);\n        }\n   \n        if(p1_.mass > 0u)\n        {\n            p1_.pos += p1_.vel*dt;\n            Clusterize(p0, p1, p1_, pos);\n        }\n    }\n    \n    if(p1.mass == 0u && p0.mass > 0u)\n    {\n        SplitParticle(p0, p1);\n    }\n\n    if(p0.mass == 0u && p1.mass > 0u)\n    {\n        SplitParticle(p1, p0);\n    }\n    \n    if(iFrame < 10)\n    {\n        if(pos.x < 0.65*R.x && pos.x > 0.35*R.x && pos.y < 0.65*R.y && pos.y > 0.35*R.y)\n        {\n            p0.mass = 1u;\n            p1.mass = 0u;\n        }\n\n        p0.pos = pos+vec2(0.2, 0.2);\n        p0.vel = vec2(0., 0.);\n        p1.pos = pos+vec2(0.75, 0.75);\n        p1.vel = vec2(0.25, 0.25);\n    }\n\n    vec4 packed = packParticles(p0, p1, pos);\n    fragColor = packed;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 pos )\n{\n    pos = floor(pos);\n    Particle p0, p1;\n    \n    //load the particles\n    vec4 packed = LOAD(ch0, pos);\n    unpackParticles(packed, pos, p0, p1);\n\n    if(p0.mass + p1.mass > 0u) \n    {\n        range(i, -2, 2) range(j, -2, 2)\n        {\n            if(i == 0 && j == 0) continue;\n            //load the particles \n            vec2 pos1 = pos + vec2(i, j);\n            Particle p0_, p1_;\n            unpackParticles(LOAD(ch0, pos1), pos1, p0_, p1_);\n\n            //apply the force\n            ApplyForce(p0, p0_);\n            ApplyForce(p0, p1_);\n            ApplyForce(p1, p0_);\n            ApplyForce(p1, p1_);\n        }\n\n        ApplyForce(p0, p1);\n        ApplyForce(p1, p0);\n\n        IntegrateParticle(p0, pos, iResolution.xy, iMouse);\n        IntegrateParticle(p1, pos, iResolution.xy, iMouse);\n    }\n\n    packed = packParticles(p0, p1, pos);\n    fragColor = packed;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}