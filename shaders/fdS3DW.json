{
    "Shader": {
        "info": {
            "date": "1617448134",
            "description": "Use function to determine next spot to look and if that spot is lit then lit me too.\nUncomment the other fractals in buffer A. \nAlso pretty funny how the fractal deforms at the border of the screen.",
            "flags": 32,
            "hasliked": 0,
            "id": "fdS3DW",
            "likes": 1,
            "name": "Trail 1.5.2 - DualFractal",
            "published": 3,
            "tags": [
                "fractals",
                "buffer"
            ],
            "usePreview": 0,
            "username": "Leasel",
            "viewed": 261
        },
        "renderpass": [
            {
                "code": "\n//Read Descrition\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = SI(fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 T(float x, float y)\n{\n    float Zoom = -sin(iTime*0.1 + 3.5)*3.;\n    //return (vec2(y,x) * vec2(x,y) * Zoom*(sin(4.56)*0.5 + 0.5) + vec2(x, y));\n    //return (vec2(y,x) * vec2(x,y) * Zoom*(sin(4.56)*0.5 + 0.5));\n    //return (vec2(mod(sin(x),y), cos(y)) + vec2(x*x - y*y + 1., 2.*x*y)*(sin(4.56)*0.5 + 0.5));\n    //return (vec2(mod(sin(x),y), cos(y)) + vec2(x,y));\n    //return (vec2((fract(sin(x)*600.)*2. - 1.)*Zoom, cos(y)) + vec2(x,y));\n    //return (vec2(fract(sin(x)*600.)*2. - 1., cos(y)) + vec2(x,y));\n    //return (vec2(tan(y), tan(x)) + vec2(x,y));\n    //return (vec2(tan(x), tan(y)) + vec2(x,y));\n    //return (vec2(cos(x), sin(y)) + vec2(x,y));//What is this\n    //\n    //return (vec2(x*x - y*y + 1., 2.*x*y)*(sin(4.56)*0.5 + 0.5)*Zoom + abs(vec2(x,y)) + vec2(1.,1.));\n    //return (abs(vec2(x,y)) + vec2(1.,1.));\n    //return ((vec2(x*x + y*y, 2.*x*y)*(sin(4.56)*0.5 + 0.5))*Zoom + abs(vec2(x,y)));\n    //return (vec2(x,y)*Zoom + vec2(x,y));\n    //return (vec2(x + 1.0,y*Zoom));\n    //return vec2(length(vec2(x,y))*cos(iTime)*y*0.001, length(vec2(x,y))*sin(iTime)*x);\n    //return (vec2(x*x + y*y + 1., x*y)*(sin(4.56)*0.5 + 0.5) + vec2(x,y))*Zoom;\n    //return (vec2(x*x - y*y + 1., x*y)*(sin(4.56)*0.5 + 0.5) + vec2(x,y))*Zoom;\n    //return (vec2(x*x - y*y, x*y)*(sin(4.56)*0.5 + 0.5))*Zoom;\n    //return (vec2(x*x + y*y, 2.*x*y)*(sin(4.56)*0.5 + 0.5))*Zoom + ;\n    //return (vec2(x*x*x*x + y*y*y*y + 2.*x*x - 2.*y*y - x*x*y*y + 2., x*y*4.*(1. - y*y + x*x))*0.0000001)*Zoom;\n    \n    //I recommend turning this one on\n    //return (vec2(x*x*x*x + y*y*y*y + 2.*x*x - 2.*y*y - x*x*y*y + 2., x*y*4.*(1. - y*y + x*x))*0.0000001 + vec2(x,y))*Zoom;\n    \n    //return (vec2(x*x - y*y + 1., 2.*x*y)*(sin(4.56)*0.5 + 0.5)*Zoom + vec2(x,y));\n    return (vec2(x*x - y*y + 1., 2.*x*y)*(sin(4.56)*0.5 + 0.5) + vec2(x,y))*Zoom;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fgi )\n{\n    vec2 offset = iMouse.xy == vec2(0.) ? iResolution.xy*0.5 : iMouse.xy;\n    float Zoom = 1.;\n\n    fgi -= offset;\n    fgi *= Zoom;\n    vec2 tfgi = T(fgi.x, fgi.y);\n    \n    fgi /= Zoom;\n    tfgi /= Zoom;\n    \n    fgi += offset;\n    tfgi += offset;\n    \n    fragColor = vec4(SI(tfgi).x == 1. ? RCooling : SI(fgi).x);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nfloat Rand(float t)\n{\n    return fract(600.*(sin(mod(t, 50000.))));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = Rand(fragCoord.x * fragCoord.y + iDate.w + iTime)-0.998 > 0.0001 ? vec4(1.) : SI(fragCoord)*Cooling;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SI(uv) texelFetch(iChannel0, ivec2(uv), 0)\n#define OI(uv) texelFetch(iChannel1, ivec2(uv), 0)\n#define S(uv) texelFetch(iChannel0, uv, 0)\n\n#define Cooling 0.95\n#define RCooling 1./Cooling",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}