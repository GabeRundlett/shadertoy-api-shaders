{
    "Shader": {
        "info": {
            "date": "1646073765",
            "description": "Inspired by Martijn Steinrucken video about Alien Orb [url]https://www.youtube.com/watch?v=b0AayhCO7s8[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "NsBfW1",
            "likes": 14,
            "name": "Spiky Gyroid",
            "published": 3,
            "tags": [
                "gyroid"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 383
        },
        "renderpass": [
            {
                "code": "\n// Spiky Gyroid by Leon Denise 2022/02/28\n\n// Inspired by Martijn Steinrucken \"Math Zoo - Alien Orb\"\n// https://www.youtube.com/watch?v=b0AayhCO7s8\n// https://www.shadertoy.com/view/tlcXWX\n\n// Using code from Martijn Steinrucken, Dave Hoskins,\n// Inigo Quilez, Antoine Zanuttini and many more\n\n// Rotation matrix\nmat2 rot (float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\nfloat map(vec3 p);\n\n// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z); }\n\n// Inigo Quilez\n// https://iquilezles.org/articles/distfunctions\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n// Antoine Zanuttini\n// https://www.shadertoy.com/view/3sBGzV\nvec3 getNormal (vec3 pos) {\n    vec2 noff = vec2(0.001,0);\n    return normalize(map(pos)-vec3(map(pos-noff.xyy), map(pos-noff.yxy), map(pos-noff.yyx)));\n}\n\n\n// Shane\nfloat sAbs(float x, float c){ return sqrt(x*x + c); }\n\n// Inigo Quilez\n// https://www.shadertoy.com/view/Xds3zN\nfloat getAO( in vec3 pos, in vec3 nor, in float scale) {\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ) {\n        float h = 0.01 + scale*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );\n}\n\n// geometry\nfloat map(vec3 p) {\n  vec3 pp = p;\n  float dist = p.y;\n  float scale = 10.;\n  float gyroid = 100.;\n  float a = 1.0;\n  // fractalish gyroid accumulation\n  for (float i = 0.; i < 3.; ++i) {\n    vec3 s = p*scale/a;\n    s.y += iTime+pp.z/a;\n    \n    // hard edges version\n    gyroid = smin(gyroid, abs(dot(sin(s),cos(s.yzx))/scale*a)-.1*a, .2*a);\n    \n    // nice smooth version by Shane\n    //gyroid = smin(gyroid, sAbs(dot(sin(s), cos(s.yzx))/scale*a, .00015) - .1*a, .3*a);\n    \n    a /= 2.;\n  }\n  dist = smin(abs(dist)-.2, gyroid, -.4);\n  return dist;\n}\n\n\nvoid mainImage( out vec4 color, in vec2 pixel )\n{\n    // coordinates\n    vec2 p = (pixel.xy - iResolution.xy / 2.)/iResolution.y;\n    vec3 pos = vec3(1);\n    vec3 z = normalize(-pos);\n    vec3 x = normalize(cross(z, vec3(0,1,0)));\n    vec3 y = normalize(cross(x, z));\n    vec3 ray = normalize(z * 2. + x * p.x + y * p.y);\n    float rng = hash12(pixel);\n    // raymarch\n    float shade = 1.;\n    for (shade; shade > 0.; shade -= 1./33.) {\n        float d = map(pos);\n        if (d < .001) break;\n        d *= .9+.1*rng;\n        pos += ray * d;\n    }\n    // color\n    vec3 normal = getNormal(pos);\n    vec3 tint = .6+.2*normal;\n    tint += vec3(1,.5,0)*getAO(pos, -normal, 0.05);\n    color = vec4(tint*shade, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}