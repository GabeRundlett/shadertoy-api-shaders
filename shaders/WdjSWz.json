{
    "Shader": {
        "info": {
            "date": "1553459414",
            "description": "variant from [url]https://www.shadertoy.com/view/3dSSWz[/url]\n\nmouse.y : texture randomness -> order",
            "flags": 48,
            "hasliked": 0,
            "id": "WdjSWz",
            "likes": 18,
            "name": "Advecting random velocity - 3b",
            "published": 3,
            "tags": [
                "texture",
                "fluid",
                "lava",
                "flow",
                "advection"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1071
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/3dSSWz\n// Fork of  https://shadertoy.com/view/WsSXDR\n// velocity field from https://shadertoy.com/view/ll2BDw\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n\tO = texelFetch(iChannel0, ivec2(U), 0) * vec4(1.5,.7,.5,0);\n\n#if 0 // contrast normalization    \n    if (O.r>.05) O *= .6 / textureLod(iChannel0, U/iResolution.xy, 1.);\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --- analytical velocity field  from https://shadertoy.com/view/ll2BDw\n\n#define r iResolution\n\n#define SPEED_EV\t0.\n#define SPEED_AM\t.5\n\n// from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * HASHSCALE3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\nvec3 hash(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0*fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n// from https://www.shadertoy.com/view/Xsl3Dl\nfloat noise( in vec3 p )\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\n\n\n\nvec2 speed(vec2 uv)\n{\n    float ratio = r.y/r.x;\n    uv = uv*10.*vec2(1., ratio);\n#if 1 // random velocity field\n    return SPEED_AM*vec2(noise(vec3(uv, iTime*SPEED_EV)), noise(vec3(uv + vec2(12.10135, 1354.2435), iTime*SPEED_EV)));\n\n#else // test: uniform rotation\n    uv -= 5.*vec2(1., ratio); return .3*SPEED_AM*vec2(-uv.y,uv.x);\n#endif    \n}\n\n\nvoid mainImage( out vec4 O, vec2 C )\n{\n\tO.xy = speed(C/r.xy);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// --- texture coords advection \n\n\nvoid mainImage( out vec4 O, in vec2 C )\n{\n\tvec2 R = iResolution.xy,\n        uv = C / R;\n    \n    O.xy = iFrame==0 || texture(iChannel0,.5/R).zw != R\n        ? 17.73*uv    \n        : texture(iChannel0,uv).xy - texture(iChannel1,uv).xy/R;\n\n    O.zw = R;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// --- reconstruct advected texture \n\n#define r iResolution.xy\n#define T 8. // floor(r.y/64.)  // tiles size\n\nvoid mainImage( out vec4 O, in vec2 C )\n{\n    \n    O -= O;\n    bool demo = iMouse.z>0.;\n    vec2 I = floor(C/T)*T;\n    float v,w,s=0.,\n          a = iMouse.y < 10. \n                 ? r.y/1.5 \n                 : .3*r.y + iMouse.y; \n    \n    for (int k=0; k<4; k++) {\n        vec2 J = I + T*vec2(k%2,k/2),\n             F = C-J, W = fract(F/T),\n\t        uv = texelFetch(iChannel0, ivec2(J), 0).xy\n                + F/r;\n        uv *= r/r.y;\n        w = ( k%2==1 ? W.x: 1.-W.x ) * ( k/2==1 ? W.y: 1.-W.y );\n        s += w*w;\n        v = sin( a* dot( uv, normalize(texelFetch(iChannel3, ivec2(J), 0).xy)));\n        O += w*v;\n    }\n    O = .5 + .5* O/sqrt(s);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}