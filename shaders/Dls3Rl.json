{
    "Shader": {
        "info": {
            "date": "1672241970",
            "description": "Image projected inside a view sphere using spherical coordinates.\nI am sure there is a better way to do it, would love your thoughts on this.",
            "flags": 0,
            "hasliked": 0,
            "id": "Dls3Rl",
            "likes": 1,
            "name": "Polar image on a sphere",
            "published": 3,
            "tags": [
                "sphere",
                "projection",
                "image"
            ],
            "usePreview": 0,
            "username": "ang_rq",
            "viewed": 207
        },
        "renderpass": [
            {
                "code": "\n#define Mouse (iMouse.xy / iResolution.xy)\n#define Resolution (iResolution.xy)\n#define Time (iTime)\n#define PI 3.1415926535897932384626433832795028841971693993751058209749\n\n\n//rotmat and getRay from https://www.shadertoy.com/view/MdXyzX\nmat3 rotmat(vec3 axis, float angle)\n{\n\taxis = (axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 1.0 - c;\n\treturn mat3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, \n\toc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s, \n\toc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\nvec3 getRay(vec2 uv){\n    uv = (uv * 2.0 - 1.0) * vec2(Resolution.x / Resolution.y, 1.0);\n\tvec3 proj = normalize(vec3(uv.x, uv.y, 1.0) + vec3(uv.x, uv.y, -1.0) * pow(length(uv), 2.0) * 0.05);\t\n    if(Resolution.x < 400.0) return proj;\n\tvec3 ray = rotmat(vec3(0.0, -1.0, 0.0), 3.0 * (Mouse.x * 2.0 - 1.0)) * rotmat(vec3(1.0, 0.0, 0.0), 1.5 * (Mouse.y * 2.0 - 1.0)) * proj;\n    return ray;\n}\n\n//polar coordinates from https://gamedev.stackexchange.com/questions/87305/how-do-i-convert-from-cartesian-to-spherical-coordinates\nfloat getPhi(in float y, in float x)\n{\n    if (x == 0.0) {\n        if (y == 0.0) {\n            return 0.0;\n        } else if (y > 0.0) {\n            return PI/2.0;\n        } else {\n            return -1.0 * PI/2.0;\n        }\n    } else if (x > 0.0) {\n        return atan(y/x);\n    } else if (x < 0.0) {\n        if (y >= 0.0) {\n            return atan(y/x) + PI;\n        } else {\n            return atan(y/x) + PI;\n        }\n    }\n}\n\nvec3 toPolar(in vec3 cart)\n{\n    float xySquared = (cart.x * cart.x) + (cart.y * cart.y);\n    float radius = sqrt(xySquared + (cart.z * cart.z));\n    return vec3(radius, atan(sqrt(xySquared), cart.z), getPhi(cart.y, cart.x));\n}\n\nvec3 toCartesian(in vec3 sph) {\n    return vec3(\n        sin(sph.y) * cos(sph.z) * sph.x,\n        sin(sph.y) * sin(sph.z) * sph.x,\n        cos(sph.y) * sph.x\n    );\n}\n\n//check if x is between a and a+d\nbool inside(vec2 x, vec2 a, vec2 d)\n{\n    return ((x.x >= a.x-d.x/2. && x.x <= a.x + d.x/2.) &&\n            (x.y >= a.y-d.y/2. && x.y <= a.y + d.y/2.));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    //View Ray\n    vec3 cartView = normalize(getRay(uv));\n    //Direction to Image\n    vec3 cartImage = normalize(vec3(1., 0., 0.));\n    \n    //Polar form (x, y, z) -> (r, theta, phi)\n    vec3 polarView = toPolar(cartView);\n    vec3 polarImage = toPolar(cartImage);\n    \n    //Cordinates to the image\n    vec2 imageUV = vec2(0.);\n    vec2 delta = vec2(1.);\n    \n    //little image\n    //polarView = toPolar(rotmat(vec3(1., 0., 0.), iTime) * cartView);\n    if(inside(polarView.yz, polarImage.yz, delta))\n        {\n            imageUV = (polarView-polarImage).yz/delta+0.5;\n            fragColor = texture(iChannel0, imageUV);\n        }\n    \n    //background image\n    else\n    {\n        imageUV = polarView.yz/(2.*PI);\n        fragColor = texture(iChannel1, imageUV);\n     }\n\n}\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}