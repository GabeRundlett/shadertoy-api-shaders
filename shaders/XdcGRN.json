{
    "Shader": {
        "info": {
            "date": "1448271457",
            "description": "shuriken made at school",
            "flags": 0,
            "hasliked": 0,
            "id": "XdcGRN",
            "likes": 0,
            "name": "Shuriken",
            "published": 3,
            "tags": [
                "shuriken",
                "gdp1"
            ],
            "usePreview": 0,
            "username": "H3LLbot",
            "viewed": 662
        },
        "renderpass": [
            {
                "code": "float rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat distanceTo(float x, float y, float centerX, float centerY) {\n\tfloat deltaX = x - centerX;\n    float deltaY = y - centerY;\n    return sqrt(deltaX * deltaX + deltaY * deltaY);\n}\n\nvoid mainImage( out vec4 color, in vec2 pixCoords )\n{\n    float zoom = (iResolution.x / 100.0);\n    float cameraX = 5.0 + 4.0;\n    float cameraY = 2.0 + 4.0;\n    \n    float xBeforeRot = pixCoords.x / zoom - cameraX;\n    float yBeforeRot = pixCoords.y / zoom - cameraY;\n    float vitesseRot = -1.0;\n    float angle = 20.0*(3.14/180.0);\n    \n    float x = pixCoords.x - cameraX;\n    float y = pixCoords.y - cameraY;\n    \n    float circle2X = 250.0;\n    float circle2Y = 140.0;\n    float differenceX = x - circle2X;\n    float differenceY = y - circle2Y;\n    \n    float distance2 = sqrt((differenceX * differenceX) + (differenceY * differenceY));\n    \n    float PI = 3.1415;\n    float angle2 = atan(differenceY, differenceX)+ iTime*10.0 + 0.01*distance2;\n    float radius = 0.9 * (1.0 + 0.05*cos(angle2*10.0));\n    \n    color = vec4(0.9,0.9,0.9,0.9);\n    \n    if (distance2 <100.0 && mod(angle2, PI/2.0)>0.8){\n        return;\n    }\n    \n   /* if (distanceTo(x,y,0.0,0.0) > radius) {\n        return;\n\t}*/\n    \n  \n    \n    x = xBeforeRot * cos(angle) + yBeforeRot*sin(angle); \n    y = -xBeforeRot * sin(angle) + yBeforeRot*cos(angle);\n    \n    \n\ty = mod(y, 7.0);\n    \n\n    float hauteurMoyenne = 2.0;\n    float amplitude = 2.0;\n    float phase = iTime * 1.5;\n    float periode = cos(iTime)+20.0;\n\n    float fx =  hauteurMoyenne + cos(x * 2.0 * PI/ periode + phase) * amplitude;\n \tfloat fx2 = hauteurMoyenne+3.0 + cos(x * 2.0 * PI/ periode + phase) * amplitude;\n\n    if (y < fx2 && y > fx) {\n        color = vec4(0.5, 0.0, 0.0, 0.0);\n        return;\n    }\n\n   \tcolor = vec4(0.0,0.0,0.0,0.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}