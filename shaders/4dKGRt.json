{
    "Shader": {
        "info": {
            "date": "1455875990",
            "description": "Herding balls is easier than herding cats\n",
            "flags": 32,
            "hasliked": 0,
            "id": "4dKGRt",
            "likes": 25,
            "name": "Herding Balls",
            "published": 3,
            "tags": [
                "raytracing",
                "raymarching",
                "dynamics",
                "collisions"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 2366
        },
        "renderpass": [
            {
                "code": "// \"Herding Balls\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nmat3 QToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nconst int nBall = 64;\nvec3 vnBall, sunDir;\nfloat dstFar;\nint idBall, idObj;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  d = p.y;\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  q = p;\n  q.xz = mod (q.xz + 3., 6.) - 3.;\n  q.y -= 0.3;\n  d = PrCylDf (q.xzy, 0.48, 0.3);\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat BallRay (vec3 ro, vec3 rd)\n{\n  vec3 u;\n  vec2 p;\n  float b, d, w, dMin, rad, radSq;\n  dMin = dstFar;\n  rad = 0.48;\n  radSq = rad * rad;\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 + 2 * n).xy;\n    u = ro - vec3 (p.x, 0.5, p.y);\n    b = dot (rd, u);\n    w = b * b + radSq - dot (u, u);\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) {\n        dMin = d;\n        vnBall = (u + d * rd) / rad;\n        idBall = n;\n      }\n    }\n  }\n  return dMin;\n}\n\nfloat BallChqr (int idBall, vec3 vnBall)\n{\n  vec3 u;\n  u = QToRMat (Loadv4 (4 + 2 * idBall + 1)) * vnBall;\n  return 0.6 + 0.4 * step (0., sign (u.y) * sign (u.z) * atan (u.x, u.y));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = 0; j < 15; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 1., 10. * h / d));\n    d += min (0.1, 3. * h);\n    if (h < 0.001) break;\n  }\n  return 0.75 + 0.25 * sh;\n}\n\nvec3 WoodCol (vec3 p, vec3 n)\n{\n  float f;\n  p *= 20.;\n  f = dot (vec3 (Fbm2 (p.zy * vec2 (1., 0.1)),\n     Fbm2 (p.xz), Fbm2 (p.xy * vec2 (1., 0.1))), abs (n));\n  return mix (vec3 (0.8, 0.4, 0.2), 1.1 * vec3 (0.45, 0.25, 0.1), f);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstObj, dstBall, c, f, sh, spec;\n  int idObjT;\n  const vec2 e = vec2 (0.01, 0.);\n  dstBall = BallRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  sh = 1.;\n  if (min (dstBall, dstObj) < dstFar) {\n    if (dstObj < dstBall) {\n      ro += rd * dstObj;\n      idObjT = idObj;\n      vn = ObjNf (ro);\n      idObj = idObjT;\n      if (idObj == 1) {\n\t    f = Fbm2 (ro.xz);\n\t    vn = normalize (vec3 (f - Fbm2 (ro.xz + e.xy), 0.05,\n\t       f - Fbm2 (ro.xz + e.yx)));\n\t    col = mix (vec3 (0.4, 0.3, 0.1), vec3 (0.4, 0.5, 0.2), f) *\n           (1. - 0.1 * Noisefv2 (ro.xz));\n        for (int n = 0; n < nBall; n ++) {\n          c = length (ro.xz + 0.3 * sunDir.xz - Loadv4 (4 + 2 * n).xy);\n          if (c < 0.55) {\n            col *= 0.8 + 0.2 * smoothstep (0.4, 0.55, c);\n            break;\n          }\n        }\n\t    sh = ObjSShadow (ro, sunDir);\n\t    spec = 0.05;\n      } else if (idObj == 2) {\n        col = WoodCol (ro, vn);\n\t    spec = 0.1;\n      }\n    } else {\n      vn = vnBall;\n      c = 37. * float (idBall) / float (nBall);\n      col = (HsvToRgb (vec3 (mod (c, 1.), 1. - 0.2 * mod (c, 4.),\n         1. - 0.07 * mod (c, 7.)))) * BallChqr (idBall, vn);\n      spec = 0.4;\n    }\n    col = col * (0.2 + sh * 0.8 * max (dot (vn, sunDir), 0.)) +\n       sh * spec * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n  } else col = vec3 (0.);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 p;\n  vec3 rd, ro, u, vd;\n  vec2 canvas, uv, rLead, rCent;\n  float tCur, az, el, f;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dstFar = 100.;\n  p = Loadv4 (1);\n  rCent = p.xy;\n  rLead = p.zw;\n  az = pi * (1. + 0.5 * sin (0.01 * pi * tCur));\n  el = 0.2 * pi;\n  ro = vec3 (rCent.x, 0., rCent.y)  +\n     40. * vec3 (cos (el) * sin (az), sin (el), cos (el) * cos (az));\n  vd = normalize (vec3 (rLead.x, 0., rLead.y) - ro);\n  u = - vd.y * vd;\n  f = 1. / sqrt (1. - vd.y * vd.y);\n  vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n  rd = vuMat * normalize (vec3 (uv, 5.5));\n  sunDir = normalize (vec3 (0., 1., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Herding Balls\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float pi = 3.14159;\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  float fi = float (idVar);\n  vec2 d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nvec4 QMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nvec4 RotToQ (vec3 v, float a)\n{\n  vec4 q;\n  float c, s;\n  const float tol = 1e-6;\n  c = cos (a);  s = sin (a);\n  q.w = 0.5 * sqrt (max (1. + (1. - c) * dot (v, v) + 3. * c, 0.));\n  if (q.w > tol) q.xyz = s * v.xyz / (2. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + (1. - c) * v.x * v.x + c), 0.));\n    if (q.x > tol) q.yz = ((1. - c) * v.xz * v.yx + s * v.zy) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + (1. - c) * v.y * v.y + c), 0.));\n      q.z = (q.y > tol) ? ((1. - c) * v.y * v.z + s * v.x) / q.y : 1.;\n    }\n  }\n  return q;\n}\n\nvec4 EulToQ (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nconst int nBall = 64;\nvec2 canvas;\nfloat tCur;\n\nvoid Step (int mId, vec2 rLead, vec2 vCent, out vec4 p, out vec4 qt)\n{\n  vec2 r, rn, vn, dr, f, v, u, s;\n  float fOvlap, fLead, vDamp, fricN, rSep, vm, dt;\n  fOvlap = 500.;\n  fricN = 1.;\n  vDamp = 0.05;\n  fLead = 1.;\n  dt = 0.02;\n  p = Loadv4 (4 + 2 * mId);\n  r = p.xy;\n  v = p.zw;\n  qt = Loadv4 (4 + 2 * mId + 1);\n  f = vec2 (0.);\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 + 2 * n);\n    rn = p.xy;\n    vn = p.zw;\n    dr = r - rn;\n    rSep = length (dr);\n    if (n != mId && rSep < 1.) f += (fOvlap * (1. / rSep - 1.) -\n       fricN * (dot ((v - vn), dr)/ (rSep * rSep))) * dr;\n  }\n  dr = r - 6. * floor ((r + 3.) / 6.);\n  rSep = length (dr);\n  if (rSep < 1.) f += (fOvlap * (1. / rSep - 1.) -\n     fricN * (dot (v, dr)/ (rSep * rSep))) * dr;\n  f += fLead * (rLead - r) + vDamp * (vCent - v);\n  v += dt * f;\n  r += dt * v;\n  vm = length (v);\n  if (vm > 1e-6) qt = normalize (QMul (qt,\n     RotToQ (normalize (vec3 (- v.y, 0., v.x)), vm * dt / 0.5)));\n  p = vec4 (r, v);\n}\n\nvoid Init (int mId, out vec4 p, out vec4 qt)\n{\n  vec3 e;\n  vec2 r, v;\n  float a;\n  int nbEdge;\n  nbEdge = int (sqrt (float (nBall)));\n  r.y = float (mId / nbEdge);\n  r.x = float (mId) - float (nbEdge) * r.y + 0.5 * (mod (r.y, 2.) - 0.5);\n  r = 1.1 * (r - 0.5 * float (nbEdge - 1));\n  r += sign (r);\n  v = vec2 (0.);\n  p = vec4 (r, v);\n  a = mod (tCur, 1.) + float (mId) / float (nBall);\n  e = normalize (vec3 (Hashff (mod (a, 1.)),\n     Hashff (mod (a + 0.2, 1.)), Hashff (mod (a + 0.4, 1.))));\n  qt = EulToQ (vec3 (atan (e.x, e.y), acos (e.z),\n     2. * pi * Hashff (mod (a + 0.6, 1.))));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p, qt;\n  vec2 iFrag, rLead, rCent, vCent;\n  float nStep;\n  int mId, pxId;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 2 * nBall + 4) discard;\n  tCur = iTime;\n  if (pxId >= 4) mId = (pxId - 4) / 2;\n  else mId = -1;\n  nStep = 0.;\n  if (iFrame <= 5) {\n    nStep = 0.;\n    rCent = vec2 (0.);\n    rLead = rCent + 4. * vec2 (1., 0.);\n    if (mId >= 0) Init (mId, p, qt);\n  } else {\n    p = Loadv4 (0);\n    nStep = p.x;\n    ++ nStep;\n    vCent = vec2 (0., 1.);\n    rCent = vec2 (0., 0.02 * nStep * vCent.y);\n    rLead = rCent + 4. * vec2 (cos (0.01 * nStep), sin (0.01 * nStep));\n    if (mId >= 0) Step (mId, rLead, vCent, p, qt);\n  }\n  if (pxId == 0) stDat = vec4 (nStep, 0., 0., 0.);\n  else if (pxId == 1) stDat = vec4 (rCent, rLead);\n  if (pxId == 4 + 2 * mId + 1) p = qt;\n  Savev4 (pxId, ((pxId >= 4) ? p : stDat), fragColor, fragCoord);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}