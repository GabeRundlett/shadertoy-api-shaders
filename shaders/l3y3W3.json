{
    "Shader": {
        "info": {
            "date": "1718299912",
            "description": "from old work",
            "flags": 0,
            "hasliked": 0,
            "id": "l3y3W3",
            "likes": 9,
            "name": "life mosaic",
            "published": 3,
            "tags": [
                "fractal",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nnew",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+0.01*exp(fract(iTime*0.0003))+fract(a2+0.01*cos(iTime*0.021));\n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\nvec3 fractal(vec2 uv){\n    float scale = 1.5;\n    vec3 col = vec3(0.);\n    vec3 col1 = col;\n    float c1=0.;\n    for(int k = 0; k < 12; k++){\n   \n        uv =\n            triangle_wave(uv-1.5)-triangle_wave(uv.yx)\n           \n           \n           \n        ;\n       \n        vec2 uv1 =\n            uv\n           \n        ;\n        uv1*=mat2(cos(iTime*0.03),sin(iTime*0.03),-sin(iTime*0.03),cos(iTime*0.03));\n       \n        c1 =\n            max(abs(max(uv1.y+0.2*fract(iTime*0.022),uv1.x+0.1*fract(iTime*0.002))),1.-(c1))\n           \n        ;\n        c1 = abs(2.*c1+0.1*cos(iTime*0.052)-1.+0.1*fract(iTime*0.002))\n        ;\n        col.x =\n            max(c1,col.x)\n\n            //blue and green\n            //max(length(uv-c1)/3.,col.x)\n           \n            //purple\n            //2. - max((abs(uv.y-uv.x))/3.,col.x)\n           \n            //black and white\n            //col.x\n        ;\n        col =\n            //abs(col-1.+c1*col.x)\n           \n            //more colorful\n            //1.-abs(col.yzx+c1*col.x)\n           \n            1.-abs(col+0.1*fract(iTime*0.002)-c1*col.x+0.1*fract(iTime*0.002))\n            //c1*col.x-col\n        ;\n        col1 =\n            abs(col1-col*c1).yzx\n            //abs(col1.yzx-col*c1)\n        ;\n        //uv -= fract(uv)*2.;\n    }\n    return col1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    float t1 = 128.;\n   \n    vec2 uv = (fragCoord)/iResolution.y/t1;\n     float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\nfloat si = sin(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\n \n    uv.xy += iTime/t1*0.0;\n   \n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy;\n    vec3 col1 = fractal(uv*exp(fract(iTime*0.003)));\n    fragColor = vec4(col1*2.,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}