{
    "Shader": {
        "info": {
            "date": "1519583633",
            "description": "this is my first attempt at a solar system. i am gonna redo this project and incorporate 3d and ellipses in a second attempt later tomorrow.\nupdate 1. Improved shadows\nthis is based on a simple sphere shader made by rhos",
            "flags": 0,
            "hasliked": 0,
            "id": "Md3yDM",
            "likes": 1,
            "name": "a simple solar system",
            "published": 3,
            "tags": [
                "solarsystem"
            ],
            "usePreview": 0,
            "username": "indominator",
            "viewed": 731
        },
        "renderpass": [
            {
                "code": "#define SC(a) vec2(sin(a),cos(a))\n#define C(a,b) clamp(a,0.,1.)*b\n#define PI 3.14159265358979323844\n\nconst float t1sun = 40.;\nconst float corona1 = 10.;\n\nconst float t1pla = 10.;\nconst float t2pla = 25.;\nconst float t3pla = 20.;\nconst float t4pla = 16.;\n\nconst vec2 p1sun = vec2(0.5,0.5);\nconst float d1pla = 100.;\nconst float d2pla = 190.;\nconst float d3pla = 300.;\nconst float d4pla = 240.;\n\n vec3 c1sun =  normalize(vec3(1.,1.,1.));\n vec3 c1pla =  normalize(vec3(0.2,0.5,0.2));\n vec3 c2pla =  normalize(vec3(0.9,0.2,0.));\n vec3 c3pla =  normalize(vec3(0.,1.,0.5));\n vec3 c4pla = normalize(vec3(1.,1.,1.));\n\n\nvoid sun_shadows(out float a,out float sd,vec2 sun,vec2 planet,float thick,vec2 uv, out vec3 col){\n   \n\n    vec2 d = uv - sun*iResolution.xy;\n    vec2 f = sun*iResolution.xy - planet;\n   float A = dot(d,d);\nfloat b = dot(2.*f,d) ;\nfloat c = dot(f,f) - thick*thick;\n\nfloat discriminant = b*b-4.*A*c;\n    if(discriminant >0.){\n          discriminant = sqrt( discriminant );\n\n\n  float t1 = (-b - discriminant)/(2.*A);\n  float t2 = (-b + discriminant)/(2.*A);\n      \n        \n    if( t1 >= 0. && t1 <= 1.  )\n  {\n     \n     if( t2 > t1 && t2 >1.){ \n        a = 0.;\n        }\n      if(length(uv - planet) < thick){\n          vec2 uv2 = planet - uv;\n          float z = sqrt( pow(thick,2.) - pow(uv2.x,2.) - pow(uv2.y,2.));\n          vec3 n_normal = normalize(vec3(uv2,z) );\n          vec3 ang =vec3(normalize( planet - sun*iResolution.xy),0.);\n float cosTheta = clamp( dot( n_normal,ang ), 0.3,1.*sd );\n          col *= cosTheta;\n\n              }\n         sd = 0.5;  \n   return;   \n  }\n        \n    }\n\n}\n\nvoid colpl(vec2 fragCoord,sampler2D img,vec2 place,float radius, out vec3 fragColor, bool sun,float sd){\n    \n        vec2 xy;\n    if(sun)\n        xy = (fragCoord - place*iResolution.xy)/(radius);\n    else xy =(fragCoord - place)/radius;\n      vec3 p = vec3( xy, sqrt( 1.0 - dot(xy,xy) ));\n    float angle = iTime * 0.5;\n    vec3 axis = vec3(0.2, 1, 0.6);\n         if(dot(xy,xy) > 1.){if(!sun)fragColor = vec3(0.,0.,0.); return;}\n\n    // rotational matrix\n    float ca = cos(angle);\n    float sa = sin(angle);\n    axis = normalize(axis);\n    \n    mat3 rot = mat3(\n    ca + axis.x*axis.x*(1.-ca), axis.x*axis.y*(1.-ca) - axis.z*sa, axis.x*axis.z*(1.-ca) + axis.y*sa,\n    axis.y*axis.x*(1.-ca) + axis.z*sa, ca + axis.y*axis.y*(1.-ca), axis.y*axis.z*(1.-ca) - axis.x*sa,\n    axis.z*axis.x*(1.-ca) - axis.y*sa, axis.y*axis.z*(1.-ca) + axis.x*sa, ca + axis.z*axis.z*(1.-ca));\n\t\n    vec3 rp = rot * p;\n\n    float u = 0.5 + atan(rp.z,rp.x) / PI;\n    float v = 0.5 - asin(rp.y) / PI;\n    vec4 cor = texture( img, vec2( u, v ));\n\tfragColor.r *= cor.r;\n    fragColor.g *= cor.g;\n    fragColor.b *= cor.b;\n    \n    if(!sun){\n        vec3 light1col = vec3( 1.0, 2.0, 3.0 ); \n        vec2 ldir = normalize( p1sun*iResolution.xy - fragCoord);\n    float dis = 1.0 - length( p - vec3(ldir.x,ldir.y,0.) ) / 2.0;\n    fragColor.rgb += sd*light1col * pow( dis, 8.0);\n    }\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float redsun =1./(length(fragCoord - p1sun*iResolution.xy))*t1sun;\n    vec2 p1pla = p1sun*iResolution.xy + SC(iTime + 3.)*d1pla;\n    vec2 p2pla = p1sun*iResolution.xy + SC(-iTime*0.4+ 12.)*d2pla;\n    vec2 p3pla = p1sun*iResolution.xy + SC(iTime*0.1- 1.7)*d3pla;\n\tvec2 p4pla = p1sun*iResolution.xy + SC(-iTime*0.2+ 0.11)*d4pla;\n    float shadow = 1.;\n    float planet1 =C(t1pla - length(fragCoord - p1pla),0.8);\n    float planet2 =C(t2pla - length(fragCoord - p2pla),0.3);\n    float planet3 =C(t3pla - length(fragCoord - p3pla),0.4);\n    float planet4 =C(t4pla - length(fragCoord - p4pla),0.8);\n\t\n  \n    ////////////////\n  \n    sun_shadows(redsun,shadow,p1sun,p1pla,t1pla,fragCoord,c1pla);\n     sun_shadows(redsun,shadow,p1sun,p2pla,t2pla,fragCoord,c2pla);\n    sun_shadows(redsun,shadow,p1sun,p4pla,t4pla,fragCoord,c4pla);\n    sun_shadows(redsun,shadow,p1sun,p3pla,t3pla,fragCoord,c3pla); \n    \n        colpl(fragCoord,iChannel1, p1pla, t1pla, c1pla,false,shadow);\n        colpl(fragCoord,iChannel1, p2pla, t2pla, c2pla,false,shadow);\n        colpl(fragCoord,iChannel1, p3pla, t3pla, c3pla,false,shadow);\n        colpl(fragCoord,iChannel1, p4pla, t4pla, c4pla,false,shadow);\n    \n     vec3 col_1sun = vec3(redsun,0.,0.);\n    //////////////////\n  \tcolpl(fragCoord,iChannel0, p1sun, t1sun, col_1sun,true,shadow);\n\n    vec3 col = col_1sun + planet1*c1pla + planet2*c2pla + planet3*c3pla + planet4*c4pla ;\n                vec2 uv2 = fragCoord/iResolution.xy;\n         vec4 col2 = texture(iChannel1,uv2);\n\n  if(dot(col,vec3(1.,1.,1.)) < 1.)\n    col2=(redsun )*col2;\n    else col2 *=0.;\n    fragColor = vec4(col,1.0);// + col2;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}