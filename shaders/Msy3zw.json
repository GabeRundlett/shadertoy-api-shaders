{
    "Shader": {
        "info": {
            "date": "1453703788",
            "description": "A design for a function that unifies hard and soft and/or/sub CSG operations",
            "flags": 0,
            "hasliked": 0,
            "id": "Msy3zw",
            "likes": 19,
            "name": "Soft CSG Superlogic",
            "published": 3,
            "tags": [
                "intersection",
                "sub",
                "soft",
                "smooth",
                "difference",
                "union",
                "and",
                "or"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 1101
        },
        "renderpass": [
            {
                "code": "// a, b: input distances\n// s.x,s.y: -1/1 signs to switch comparison polarity\n// s.z,s.w: radius & scaling factor, as returned by soft_coeffs()\nfloat csg_op (float a, float b, vec4 s) {\n    b *= s.y;\n    float d = abs(a - b);\n    float q = max(s.z - d, 0.0);    \n    return 0.5*(a + b + s.x*(d + s.w*q*q));\n}\n\nvec2 soft_coeffs(float r) {\n    return vec2(r, (r > 0.0)?(0.5/r):0.0);\n}\n\nvec4 csg_and (float r) {\n    return vec4(1.0,1.0,soft_coeffs(r));\n}\n\nvec4 csg_sub (float r) {\n    return vec4(1.0,-1.0,soft_coeffs(r));\n}\n\nvec4 csg_or (float r) {\n    return vec4(-1.0,1.0,soft_coeffs(r));\n}\n\nfloat csg_and_inlined (float a, float b, float r) {\n    float d = abs(a - b);\n    float q = max(r - d, 0.0);    \n    return 0.5*(a + b + (d + q*q/r));\n}\n\nfloat csg_sub_inlined (float a, float b, float r) {\n    float d = abs(a + b);\n    float q = max(r - d, 0.0);    \n    return 0.5*(a - b - (d + q*q/r));\n}\n\nfloat csg_or_inlined (float a, float b, float r) {\n    float d = abs(a - b);\n    float q = max(r - d, 0.0);    \n    return 0.5*(a + b - (d + q*q/r));\n}\n\nvec4 getfactor (int i) {\n\t#define OP_COUNT 6.0\n    return csg_or(0.2);\n}\n\n//-------------------------------------------------------\n\nfloat line(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    float h = clamp(dot(pa, ba)/dot(ba,ba), 0.0, 1.0);\n    float s = sign(pa.x*ba.y-pa.y*ba.x);\n    return length(pa - ba*h);\n}\n\n\nfloat circle (vec2 p, float r) {\n    return length(p) - r;\n}\n\nfloat square (vec2 p, float r) {\n    p = abs(p) - r;\n    return length(max(p,0.0)) + min(0.0,max(p.x,p.y));\n}\n\nvec2 circles (vec2 p) {\n    float r = 0.6;\n    return vec2(\n        square(p - vec2(-r*0.7, 0.0), r), \n        circle(p - vec2(r*0.4, 0.0), r*0.7));\n}\n\nfloat smooth_or (float a, float b, float r) {\n#if 0\n    float m = clamp(r - abs(a - b), 0.0, r);\n    return min(a, b) - (m * m * (0.25 / r));\n#else\n    float absAB = abs(a - b);\n    float absAB2 = absAB * absAB;\n\n    return \n        0.5 * a \n        + 0.5 * b \n        - 0.125 * r\n        - 0.5 * absAB\n        + 0.25 * absAB\n        - 0.125 * absAB2 / r\n        - 0.125 * abs(r - absAB)\n        + 0.125 * abs(absAB - absAB2 / r);\n#endif\n}\n\n/*\n    fn sdSmoothOr (self other r)\n        let a b = self.d other.d\n        let e = (srange a b r)\n        let invr = (/ r)\n        let x = (e * invr)\n        let c x =\n            if (a < b)\n                _ a (x * 0.5)\n            else\n                _ b (1.0 - x * 0.5)\n        this-type\n            c - (0.25 * e * e * invr)\n            'mix self.material other.material x\n  */\n  \nfloat map(vec2 p) {\n    float k = iTime*0.5;\n    float u = smoothstep(0.0,1.0,smoothstep(0.0,1.0,fract(k)));\n    int s1 = int(mod(k,OP_COUNT));\n    int s2 = int(mod(k+1.0,OP_COUNT));\n    vec4 op1 = getfactor(s1);\n    vec4 op2 = getfactor(s2);\n    vec4 args = mix(op1,op2,u);\n\n    vec2 c = circles(p);\n    return smooth_or(c.x, c.y, 0.2);\n}\n\nvec2 grad(vec2 p) {\n    const vec2 w = vec2(0.001, 0.0);\n    return normalize(vec2(\n        map(p + w) - map(p - w),\n        map(p + w.yx) - map(p - w.yx)));    \n}\n\n//-------------------------------------------------------\n\nfloat outline (float d) {\n    return 1.0 - smoothstep(0.0, 3.0 / iResolution.y, abs(d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = uv * 2. - 1.;\n    p.x *= iResolution.x / iResolution.y;\n    \n    vec2 m = (iMouse.xy / iResolution.xy)*2.0-1.0;\n    m.x *= iResolution.x / iResolution.y;\n\n    float d = map(p);\n\n    float d2s = map(m);\n    float d2 = abs(d2s);\n    \n    vec2 n = grad(m) * -d2s;\n    vec2 on = vec2(-n.y, n.x);\n    \n    float draw = min(line(p-m, vec2(0.0), n), abs(circle(p-m,d2)));\n    draw = min(draw, line(p-m, -on, on));\n    \n    float s = abs(mod(d, 0.1)/0.1 - 0.5);    \n\tfragColor = vec4(((iMouse.z > 0.5)?outline(draw):0.0)+s+vec3(outline(d) + 0.3 * step(d,0.0)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}