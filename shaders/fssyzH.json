{
    "Shader": {
        "info": {
            "date": "1641725993",
            "description": "My participation to genuary 2022\nCode is messy I know :p",
            "flags": 32,
            "hasliked": 0,
            "id": "fssyzH",
            "likes": 11,
            "name": "Genuary 2022 - Day7",
            "published": 3,
            "tags": [
                "generative",
                "sollewitt",
                "genuary",
                "2022"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 276
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(0.,f*factor);\n        if (nuv.y > 0. && nuv.y < 1.)\n            col += texture(iChannel0, uv+vec2(0.,f*factor)).xyz/float(steps);\n    }\n    \n    vec3 rgb = texture(iChannel1, uv).xyz+GLOW_OPACITY*pow(col, vec3(GLOW_POW));\n    rgb = pow(rgb*1.2, vec3(2.2));\n    vec2 cuv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    //rgb *= 1.-sat(length(cuv*2.)-.5);\n    //rgb += vec3(.5)*(1.-sat((abs(cuv.x)-.115)*400.));\n    fragColor = vec4(rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define GLOW_SAMPLES 80\n#define GLOW_DISTANCE 0.2\n#define GLOW_POW .5\n#define GLOW_OPACITY .76\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n\nmat2 r2d(float a) { float c= cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\n// Stolen from 0b5vr here https://www.shadertoy.com/view/ss3SD8\nfloat hash11(float p)\n{\n    return (fract(sin((p)*114.514)*1919.810));\n}\n\n// Thanks IQ\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n// Thanks IQ\nfloat _rsqr(vec2 uv, vec2 s, float r)\n{\n    vec2 l = abs(uv)-s;\n    return min(length(max(l, 0.)+min(max(l.x, l.y), 0.))-r, max(l.x, l.y));\n}\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n#define GROUND_MAT 0.\n#define WALL_MAT 1.\n#define CEILING_MAT 2.\n#define WALL2_MAT 3.\n\nfloat seed;\nfloat rand()\n{\n    seed++;\n    return hash11(seed);\n}\n\nfloat _sqr(vec2 uv, vec2 s)\n{\n    vec2 l = abs(uv)-s;\n    return max(l.x, l.y);\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(l.x,max(l.y, l.z));\n}\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nvec2 map(vec3 p)\n{\n\n    vec2 acc = vec2(10000., -1.);\n    acc = _min(acc, vec2(-p.y, GROUND_MAT));\n    \n    acc = _min(acc, vec2(-(abs(p.x)-2.), WALL_MAT));\n    \n    acc = _min(acc, vec2(p.y+3., CEILING_MAT));\n    \n    acc = _min(acc, vec2(-p.z, WALL2_MAT));\n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.001,0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 2.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\nreturn normalize(rd+(r*uv.x+u*uv.y)*fov);\n}\n\nvec3 accLight;\nvec3 trace(vec3 ro, vec3 rd, int steps, float maxDist)\n{\n    accLight = vec3(0.);\n    vec3 p = ro;\n    for (int i = 0; i < steps && distance(p, ro) < maxDist;++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.001)\n            return vec3(res.x, distance(p, ro), res.y);\n        /*if (res.y == FLAME_MAT)\n        accLight += vec3(0.941,0.376,0.000)*(1.-sat(res.x/.05))*.05;*/\n        p+= rd*res.x;//*.0125;\n    }\n    return vec3(-1.);\n}\n\nfloat getShadow(vec3 ro, vec3 lpos, int steps)\n{\n    float maxDist = distance(ro, lpos);\n    vec3 rd = -normalize(lpos-ro);\n    vec3 p = ro;\n    for (int i = 0; i < steps && distance(p, ro) < maxDist;++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.001)\n            return 0.;\n        p+= rd*res.x*.125;\n    }\n    return float(distance(p, ro) > maxDist);\n}\nvec3 getEnv(vec3 rd)\n{\n    return texture(iChannel2, rd*vec3(1.,-1.,1.)).xyz*.5*vec3(0.941,1.000,1.000);//*.25;\n    vec2 uv = vec2(atan(rd.z, rd.x)/PI, (acos(rd.y)/PI-.5)*2.);\n    float stars = pow(texture(iChannel0, uv*5.*vec2(2.,1.)).x, 10.)*sat(-rd.y);\n    vec3 back = mix(vec3(0.910,0.671,0.588), vec3(0.176,0.180,0.345)*.75, pow(sat(-rd.y*2.+.2), .3)); \n    back += vec3(0.455,0.871,0.925)*pow(sat(-(rd.x-2.1)*.4+rd.y*2.),1.2)*.5;\n    back += vec3(0.733,0.416,0.208)*pow(sat(-(rd.x-1.9)*.4+rd.y*2.),3.);\n    back *= 1.-sat(length((uv-vec2(.75,0.1))*.5*vec2(2.,2.)));\n    return back+ vec3(1.)*stars+vec3(.2,.4,.7)*stars*1.;\n}\n\nvec3 getMat(vec3 res, vec3 rd, vec3 p, vec3 n)\n{\n    vec3 col = n*.5+.5;\n    vec3 lpos = vec3(0.,15.,-15.)+1.*(vec3(rand(), rand(), rand())-.5);\n    vec3 ldir= p-lpos;\n    vec3 lcol = vec3(1.000,0.796,0.659);\n    vec3 h = normalize(rd+ldir);\n    vec3 ambient = vec3(0.);\n    float ndotl = sat(dot(n, normalize(ldir)));\n    vec3 albedo = vec3(.1,.1,.1);\n    vec3 spec = vec3(1.,0.,0.);\n    float gloss = 1.;\n    if (res.z == GROUND_MAT)\n    {\n        albedo = mix(vec3(.5), vec3(0.000,0.616,0.875), .125)*.5;\n        ambient = vec3(.5);\n        ambient = 1.5*texture(iChannel3, p.xz*r2d(PI*.5)*vec2(.5,1.)).x*vec3(0.604,0.478,0.376);\n        //ambient = mix(ambient, vec3(1.000,0.298,0.220), sat((sin(length(p.xz)*20.)-.95)*400.));\n    }\n    if(res.z == CEILING_MAT)\n    {\n        vec3 lightCeil = mix(vec3(.5), 1.1*vec3(0.957,1.000,0.941), sat((sin(p.x*20.)+1.01)*10.)*sat((sin(p.z*10.)+1.01)*10.));\n        ambient = mix(lightCeil, vec3(.8), sat(_sqr(p.xz-vec2(0.,-5.), vec2(1.5,3.))*400.));\n    }\n    if (res.z == WALL2_MAT)\n    {\n        ambient = vec3(.45);\n    }\n    if (res.z == WALL_MAT)\n    {\n        ambient = vec3(.6);\n        if (p.x < 0.)\n            p.z = -p.z-9.5;\n        ambient = mix(ambient, vec3(0.), 1.-sat(_sqr(p.zy-vec2(-6.6,-1.5), vec2(1.3))*400.));\n        ambient = mix(ambient, vec3(0.), 1.-sat((length(p.zy-vec2(-3.,-1.5))-1.3)*400.));\n    }\n    if (res.z == WALL2_MAT)\n    {\n        ambient = vec3(0.090,0.263,0.447);\n        float cir = length(p.xy-vec2(0.,-1.5))-1.;\n        ambient = mix(ambient, vec3(0.820,0.102,0.129), 1.-sat((cir)*400.));\n        ambient = mix(ambient, vec3(0.953,0.667,0.031), 1.-sat((abs(cir)-.1)*400.));\n    }\n\n    \n    col = ambient;\n    if (getShadow(p+n*0.01,  lpos, 256) > 0.5)\n        col += albedo*pow(ndotl,1.)*2.*lcol;\n/*    if (res.z == FLAME_MAT)\n    {\n        col = 2.*mix(vec3(1.000,0.749,0.322), vec3(1.,1.,1.), sat(-dot(rd, n)));\n    }*/\n    \n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    uv.x *= -1.;\n    vec3 col = vec3(0.);\n    float xpos = sin(iTime*0.+.5)*2.2;\n    float offy = -.85;\n    float zoff = 5.9;\n    //uv *= r2d(.25);\n    vec3 dof = (vec3(rand(), rand(), rand())-.5)*.008;\n    vec3 ro = vec3(0.,-1.25,-10.)+dof;\n    vec3 ta = vec3(0.,-1.25,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv)-dof*0.0025;\n    vec3 res = trace(ro, rd, 4096*4, 30.);\n    float maxdist = 20.;\n    float dist = maxdist;\n    if (res.y > 0.)\n    {\n        dist = res.y;\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = n*.5+.5;\n        col = getMat(res, rd, p, n);\n        col += accLight;\n        if (true)\n        {\n            vec3 lastCol = col;\n            for (int i = 0; i < 2; ++i)\n            {\n                vec3 refl = normalize(reflect(rd, n));\n                float spec = 1.;\n                if (res.z == GROUND_MAT)\n                    spec = .2;\n                refl = mix(refl, normalize(vec3(rand(), rand(), rand())-.5), spec);\n            \n                if (dot(refl, n) < 0.01)\n                    refl = -refl;\n                vec3 resrefl = trace(p+n*0.01, refl, 4096, 15.);\n                if (resrefl.y > 0.)\n                {\n                    vec3 prefl = p+refl*resrefl.y;\n                    vec3 nrefl = getNorm(prefl, resrefl.x);\n                    float mult = 1.;\n                    if (res.z == CEILING_MAT)\n                        mult = 0.1;\n                    vec3 retCol = getMat(resrefl, refl, prefl, nrefl)*mult*lastCol*(1.-sat(resrefl.y/10.));\n                    col += retCol;\n                    lastCol = retCol;\n                    n = nrefl;\n                    p = prefl;\n                }\n                else\n                {\n                    //col += getEnv(refl);\n                    break;\n                }\n                \n                col += accLight;\n                rd = refl;\n            }\n\n\n        }\n    col = mix(col, vec3(0.), sat(exp(-dist*.05-.1)));\n    }\n    else\n    {\n        col = getEnv(rd);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    float scaleF = 1.;\n    uv *= scaleF;\n    seed=texture(iChannel0,uv).x;\n    seed+=fract(iTime);\n    vec2 off = (vec2(rand(), rand())-.5)*3.*vec2(1., -1.)/(iResolution.x*1.75/scaleF);\n    vec3 col = rdr(uv+off);\n\n    col = sat(col);\n    col = pow(col, vec3(.9));\n    \n    if (iFrame > 1)\n        col = mix(texture(iChannel1, fragCoord/iResolution.xy).xyz, col,  1.0 / float(iFrame + 1));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(f*factor, 0.);\n        if (nuv.x > 0. && nuv.x < 1.)\n          col += texture(iChannel0, uv+vec2(f*factor,0.)).xyz/float(steps);\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}