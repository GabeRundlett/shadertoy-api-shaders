{
    "Shader": {
        "info": {
            "date": "1723943307",
            "description": "glitchy vhs\nkind of got carried away with the posterizing as well",
            "flags": 32,
            "hasliked": 0,
            "id": "4cXfzB",
            "likes": 3,
            "name": "Camcorder VHS Glitch",
            "published": 3,
            "tags": [
                "glitch",
                "vhs"
            ],
            "usePreview": 0,
            "username": "ShadeWhizz",
            "viewed": 103
        },
        "renderpass": [
            {
                "code": "vec2 crtWarp(vec2 uv, float distortion) {\n    // Normalize coordinates to the range [-1, 1]\n    vec2 normUV = uv * 2.0 - 1.0;\n    normUV *= 1.0;\n\n    // Apply CRT distortion\n    normUV.x *= 1.0 + distortion * (normUV.y * normUV.y);\n    normUV.y *= 1.0 + distortion * (normUV.x * normUV.x);\n\n    // Adjust back to original UV coordinates\n    vec2 warpedUV = (normUV + 1.0) * 0.5;\n\n    return warpedUV;\n}\nvec2 applyCRTCurvature(vec2 uv, float curvature) {\n  // Normalize coordinates to range from -1 to 1\n    vec2 centered_uv = (uv - 0.5) * 2.0;\n        //centered_uv *= 0.98;\n\n    // Aspect ratio adjustment\n    centered_uv.x *= iResolution.x / iResolution.y;\n    \n    // Apply the CRT curvature distortion\n    centered_uv = centered_uv * curvature + centered_uv * (1.0 - curvature) * (1.0 - dot(centered_uv, centered_uv) * 0.5);\n\n    // Convert back to 0 to 1 range\n    centered_uv.x /= iResolution.x / iResolution.y;\n    return centered_uv * 0.5 + 0.5;\n}\n// yea i kinda like this one thanks chat\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float mouse = iMouse.x/iResolution.x;\n\n    vec2 basis_r = vec2(1.0, 0.0);                       // 0 degrees\n    vec2 basis_g = vec2(-0.5, sqrt(3.0) / 2.0);          // 120 degrees\n    vec2 basis_b = vec2(-0.5, -sqrt(3.0) / 2.0);         // 240 degrees\n    \n    vec2 res = iResolution.xy/4.;\n    vec2 px = 1.0 / res;\n    vec2 uv = fragCoord/iResolution.xy;\n    //uv = crtWarp(uv, 0.03);\n    uv = applyCRTCurvature(uv, 1.05);\n    //uv = applyCRTCurvature(uv, 0.9); // neat holodeck vibes\n    //if (uv.x < 0.5) {\n    //    fragColor = texture(iChannel0, uv);\n    //    return;\n    //}\n    vec2 this_px = uv*res;\n    vec3 acc = vec3(0.0);\n    vec2 c = floor(uv*res) + 0.5;\n    for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n            vec2 o = vec2(float(i), float(j));\n            vec2 co = c + o;\n            float sep = 0.4;\n            vec2 cr = co + sep*basis_r;\n            vec2 cg = co + sep*basis_g;\n            vec2 cb = co + sep*basis_b;\n            float dr = length(this_px - cr);\n            float dg = length(this_px - cg);\n            float db = length(this_px - cb);\n            vec3 d = vec3(dr, dg, db);\n            d *= 0.94;\n            d = min(d, 1.0);\n            vec3 filt = 1.0 - 3.0*d*d + 2.0*d*d*d;\n            filt *= 1.3;\n            vec3 col = texture(iChannel0, co / res).xyz;\n            vec3 cont = col*filt;\n            if (int(co.y) % 2 == 0) { cont *= 0.85; }\n            if (co.x > res.x || co.y > res.y || co.x < 0.0 || co.y < 0.0) { cont = vec3(0.0); }\n            acc += cont;\n        }\n    }\n    fragColor = vec4(acc, 0.0);\n    vec2 d_edge = min(this_px, abs(this_px - res));\n    float d = min(d_edge.x, d_edge.y);\n    float v = clamp((d / 4.0), 0.0, 1.0);\n    v = v*v*(3.0 - 2.0*v);\n    fragColor *= v;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// ngl 4/16 be lookin kinda awesome\n// was doin in rgb 16 i think\n\n#define QY 4.0\n#define QUV 16.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec2 res = vec2(240.0, 180.0);\n    vec2 uv = fragCoord / iResolution.xy;\n    //uv = floor(uv*res)/res;\n    vec4 s = texture(iChannel0, uv);\n    vec3 yuv = rgb2yuv(s.xyz);\n    yuv.x = floor(yuv.x*QY)/QY;\n    yuv.yz = floor(yuv.yz*QUV)/QUV;\n    yuv.yz += 0.5*(2.0*random(6969.4231*uv+vec2(iTime*1234.0, iTime*4312.0+1234.0))-1.0);\n    fragColor.xyz = yuv2rgb(yuv);\n    fragColor.xyz += 0.1 * texture(iChannel1, uv + 131.0*iTime).xyz;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3 rgb2yuv(vec3 rgb) {\n    float Y = dot(rgb, vec3(0.299, 0.587, 0.114));\n    float U = dot(rgb, vec3(-0.14713, -0.28886, 0.436));\n    float V = dot(rgb, vec3(0.615, -0.51499, -0.10001));\n    return vec3(Y, U, V);\n}\nvec3 yuv2rgb(vec3 yuv) {\n    float Y = yuv.x;\n    float U = yuv.y;\n    float V = yuv.z;\n    vec3 rgb = vec3(Y + 1.13983 * V, \n                    Y - 0.39465 * U - 0.58060 * V, \n                    Y + 2.03211 * U);\n    return rgb;\n}\n\nvec2 rot(vec2 X, float a)\n{\n \tfloat s = sin(a); float c = cos(a);\n    return mat2(c, -s, s, c)*X;\n}\n\nfloat hash2D(vec2 uv)\n{\n \tvec2 suv = sin(uv);\n    suv = rot(suv, uv.x);\n    return fract(mix(suv.x*13.13032942, suv.y*12.01293203924, dot(uv, suv)));\n}\nuint hash( uint x )\n{\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\nuint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }\nuint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }\n\nfloat uintToFloat( uint m )\n{\n    return uintBitsToFloat(0x3F800000u|(m&0x007FFFFFu) ) - 1.0;\n}\n// end https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl#answer-17479300\nfloat random( float x ) { return uintToFloat(hash(floatBitsToUint(x))); }\nfloat random( vec2  v ) { return uintToFloat(hash(packSnorm2x16(v))); }\nfloat random( vec3  v ) { return uintToFloat(hash(\n    uvec3(floatBitsToUint(v.x), floatBitsToUint(v.y),floatBitsToUint(v.z))\n)); }\n\n\nfloat smooth_hash2D(vec2 uv)\n{\n \tvec2 lower\t= floor(uv);\n    vec2 frac \t= fract(uv);\n    vec2 f = frac*frac*(3.0-2.0*frac);\n    \n    return mix(\n        \tmix(hash2D(lower+vec2(0.0, 0.0)), hash2D(lower+vec2(1.0, 0.0)), f.x),\n        \tmix(hash2D(lower+vec2(0.0, 1.0)), hash2D(lower+vec2(1.0, 1.0)), f.x),\n        \tf.y);\n}\n\nfloat fbm_hash2D(vec2 uv)\n{\n    float total = 0.0;\n    total += 0.5000*smooth_hash2D(uv); uv*=2.001;\n    total += 0.2500*smooth_hash2D(uv); uv*=2.003;\n    total += 0.1250*smooth_hash2D(uv); uv*=2.002;\n    total += 0.0625*smooth_hash2D(uv); uv*=2.001;\n    return clamp(total, 0.0, 1.0);\n}\n\nfloat fbm2d(vec2 uv) {\n    return fbm_hash2D(uv)*2.0 - 1.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float slowNoise(float x) {\n    float a = floor(x);\n    float b = a+1.0;\n    float ra = random(a);\n    float rb = random(b);\n    float t = fract(x);\n    t = t*t*(3.0-2.0*t);\n    float ra2 = ra*ra;\n    float ra4 = ra2*ra2;\n    float rb2 = rb*rb;\n    float rb4 = rb2*rb2;\n    return mix(ra4*ra4*ra4*ra4, rb4*rb4*rb4*rb4, t);\n}\nfloat uslowNoise(float x) {\n    return 2.0 * slowNoise(x)-1.0;\n}\n\n\n\nfloat x_dist(float t, float x, float y) {\n    float adist = 0.0025*sin(50.0*t + 1313.4769*y);\n    adist += 0.003*uslowNoise(6.0*t+14.0*y);\n    if (y > 0.95) {\n        float k = (y - 0.95)/0.05;\n        return x + (1.0+4.0*k)*adist + 0.05*k*k;\n    }\n    if (y < 0.04) {\n        float k = 1.0 - (y/0.04);\n        float kq = floor(16.0*k)/16.0;\n        float xn = x - adist + 0.2*sin(8.0*kq) + 0.3;\n        return xn;\n    }\n    return x + adist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec2 uv = fragCoord/iResolution.xy;\n    //uv.y += sin(0.1*iTime);\n    uv.x = x_dist(iTime, uv.x, uv.y);\n    \n    if (uv.x > 1.0) return; // seems like it stopped working\n    \n    // uv.y here for sync loss\n    uv.y -= slowNoise(0.5*iTime);\n    \n    vec3 yuv1 = rgb2yuv(texture(iChannel0, uv).xyz);\n    vec3 yuv2 = rgb2yuv(texture(iChannel0, uv + vec2(0.03, 0.0)).xyz);\n    vec3 yuv3 = vec3(yuv1.x, yuv2.y, yuv2.z);\n    vec3 rgb = yuv2rgb(yuv3);\n    \n    fragColor = vec4(rgb, 1.0);\n    fragColor.xyz = pow(fragColor.xyz, vec3(1.8));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}