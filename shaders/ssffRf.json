{
    "Shader": {
        "info": {
            "date": "1645271527",
            "description": "I'm new to raymarching so please tell me in the comments if there is anything that I did wrong or could have done better",
            "flags": 0,
            "hasliked": 0,
            "id": "ssffRf",
            "likes": 5,
            "name": "Colored Infinite Spheres",
            "published": 3,
            "tags": [
                "raymarching",
                "fractals"
            ],
            "usePreview": 0,
            "username": "codebender",
            "viewed": 329
        },
        "renderpass": [
            {
                "code": "vec3 rotateVector(vec3 p, float q, float q2) {\n    p = vec3(p.x*cos(q) - p.y*sin(q), p.x*sin(q) + p.y*cos(q), p.z);\n    p = vec3(p.x*cos(q2)+p.z*sin(q2), p.y, -p.x*sin(q2)+p.z*cos(q2));\n    return p;\n}\n\nfloat sdSphere(vec3 p, float s, vec3 pos)\n{\n    p -= pos;\n    return length(p)-s;\n}\n\nfloat map(vec3 p) {\n    float d = sdSphere(mod(p, 1.), .15, vec3(0.5, 0.5+sin(floor(p.z/1.)+floor(p.x/1.)+iTime*10.)*.05, 0.5));\n    return d;\n}\n\nvec3 calcNormal(vec3 p) {\n\tfloat eps = 0.01;\n\treturn normalize(vec3(\n\t\tmap(p + vec3(eps, 0, 0)) - map(p + vec3(-eps, 0, 0)),\n\t\tmap(p + vec3(0, eps, 0)) - map(p + vec3(0, -eps, 0)),\n\t\tmap(p + vec3(0, 0, eps)) - map(p + vec3(0, 0, -eps))\n\t\t));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    \n    vec3 point_light_pos = vec3(1., 1., 1.);\n\n    vec3 cam_pos = vec3(iTime*2., iTime, iTime*5.);\n    vec3 ray_dir = normalize(vec3(fragCoord.x/iResolution.y-iResolution.x/iResolution.y/2., fragCoord.y/iResolution.y-1./2., 1.));\n    ray_dir = rotateVector(ray_dir, sin(iTime)*.5, sin(iTime*.35)*.5);\n    \n    float closest_distance = 10000.;\n    bool hit = false;\n    vec3 hit_pos = cam_pos;\n    float t = 0.;\n    for (int i = 0; i < 60; i += 1) {\n        t = map(hit_pos);\n        hit_pos += ray_dir*t;\n        if (t < .001) {\n            hit = true;\n            break;\n        }\n        closest_distance = min(t, closest_distance);\n    }\n    \n    float light_power = (dot(calcNormal(hit_pos), normalize(point_light_pos-hit_pos))+1.)/2.;\n    \n    float depth = distance(hit_pos, cam_pos);\n    \n    float vignette = (1.-abs(fragCoord.x-iResolution.x/2.)/iResolution.x)*(1.-abs(fragCoord.y-iResolution.y/2.)/iResolution.y);\n    \n    if (hit) {\n        fragColor = smoothstep(1., vignette/40., depth/10.)*vignette*vec4(random(floor(hit_pos/1.)), random(floor(hit_pos/1.)+vec3(1., 1., 1.)), random(floor(hit_pos/1.)+vec3(5., 5., 5.)), 1.);\n    } else {\n        fragColor = vignette/40.*vec4(1.);\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 13,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// ***********************************************************************************\n// ***********************************************************************************\n// *********************************** RANDOM **********************************\n// ***********************************************************************************\n// ***********************************************************************************\n\n\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat random (vec3 st) {\n    return fract(sin(dot(st.xyz,\n                         vec3(12.9898,78.233, 15.234)))*\n        43758.5453123);\n}\n\n\n// ***********************************************************************************\n// ***********************************************************************************\n// *********************************** PERLIN NOISE **********************************\n// ***********************************************************************************\n// ***********************************************************************************\n\n\n\n\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}