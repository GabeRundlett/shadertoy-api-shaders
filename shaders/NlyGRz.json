{
    "Shader": {
        "info": {
            "date": "1646783798",
            "description": "click and drag the slider to change hue\nclick and drag the picker to change value and saturation\nuncomment line 91 to view hsv colors\n",
            "flags": 32,
            "hasliked": 0,
            "id": "NlyGRz",
            "likes": 14,
            "name": "hsv color picker",
            "published": 3,
            "tags": [
                "interactive",
                "color",
                "buffer",
                "input"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 664
        },
        "renderpass": [
            {
                "code": "//returns a rgb color given a hue, saturation, value color\n//https://en.wikipedia.org/wiki/HSL_and_HSV#/media/File:HSV-RGB-comparison.svg\nvec3 hsvToRgb(vec3 hsv){ //hsv.x = hue, hsv.y = saturation, hsv.z = value\n    vec3 col = vec3(hsv.x, hsv.x + 2.0/3.0, hsv.x + 4.0/3.0); //inputs for r, g, and b\n    col = clamp(abs(mod(col*2.0, 2.0)-1.0)*3.0 - 1.0, 0.0, 1.0)*hsv.z*hsv.y + hsv.z - hsv.z*hsv.y; //hue function (graph it on desmos)\n    return col;\n}\n\n//returns a hue, saturation, value color given a rgb color\n//https://www.rapidtables.com/convert/color/rgb-to-hsv.html\nvec3 rgbToHsv(vec3 rgb){\n    vec3 hsv = vec3(0);\n    float maxC = max(max(rgb.r,rgb.g),rgb.b);\n    float minC = min(min(rgb.r,rgb.g),rgb.b);\n    float delta = maxC - minC;\n    if (maxC == rgb.r) hsv.x = mod((rgb.g - rgb.b)/delta,6.0)/6.0;\n    if (maxC == rgb.g) hsv.x = (rgb.b - rgb.r)/(delta*6.0) + 1.0/3.0;\n    if (maxC == rgb.b) hsv.x = (rgb.r - rgb.g)/(delta*6.0) + 2.0/3.0;\n    hsv.y = delta/maxC;\n    hsv.z = maxC;\n    return hsv;\n}\n\n//returns if a coord is within an aabb area\nbool inArea(float startx, float starty, float endx, float endy, vec2 uv){\n    return uv.x >= startx && uv.y >= starty && uv.x <= endx && uv.y <= endy;\n}\n\n//returns 1 - 0 where start is 0 and end is 1\nfloat normalizeRange(float start, float end, float uv){\n    return (uv - start)/(end-start);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    float slider = texelFetch( iChannel0, ivec2(0, 0),0 ).x;\n    vec2 sampler = texelFetch( iChannel0, ivec2(0, 0),0 ).zw;\n    float pxunit = 1.0/iResolution.y; //one pixel in uv coordinates\n    \n    vec3 col = vec3(0.8);\n    \n    //ui code\n    vec4 colorPickArea = vec4(0.4, 0.1, 1.2, 0.9);\n    vec4 slideArea = vec4(1.225, colorPickArea.y, 1.3, colorPickArea.w);\n    vec4 sliderArea = vec4(slideArea.x, slider-0.01, slideArea.z, slider+0.01);\n    vec4 colorPickerArea = vec4(sampler.x - 0.03, sampler.y - 0.03, sampler.x + 0.03, sampler.y + 0.03);\n    vec4 pickedColorArea = vec4(slideArea.x, colorPickArea.w, slideArea.z, slideArea.z - slideArea.x);\n    \n    float hue = normalizeRange(slideArea.y, slideArea.w, slider);\n    float sat = normalizeRange(0.4, 1.2, sampler.x);\n    float val = normalizeRange(0.1, 0.9, sampler.y);\n    \n    //color pick area\n    if (inArea(colorPickArea.x - pxunit, colorPickArea.y - pxunit, colorPickArea.z + pxunit, colorPickArea.w + pxunit, uv)) {\n        col = vec3(0);\n        if (inArea(colorPickArea.x, colorPickArea.y, colorPickArea.z, colorPickArea.w, uv)) {\n            col = hsvToRgb(vec3(hue, normalizeRange(colorPickArea.x, colorPickArea.z, uv.x), normalizeRange(colorPickArea.y, colorPickArea.w, uv.y)));\n        }\n    }\n    //slide area\n    if (inArea(slideArea.x - pxunit, slideArea.y - pxunit, slideArea.z + pxunit, slideArea.w + pxunit, uv)) {\n        col = vec3(0);\n        if (inArea(slideArea.x, slideArea.y, slideArea.z, slideArea.w, uv)) {\n            col = hsvToRgb(vec3(normalizeRange(slideArea.y, slideArea.w, uv.y),1.0,1.0));\n        }\n    }\n    //slider\n    if (inArea(sliderArea.x - pxunit*2.0, sliderArea.y - pxunit*2.0, sliderArea.z + pxunit*2.0, sliderArea.w + pxunit*2.0, uv)){\n        col = vec3(0);\n        if (inArea(sliderArea.x - pxunit, sliderArea.y - pxunit, sliderArea.z + pxunit, sliderArea.w + pxunit, uv)){\n            col = hsvToRgb(vec3(hue,1.0,1.0));\n        }\n    }\n    //color picker\n    if (inArea(colorPickerArea.x - pxunit, colorPickerArea.y - pxunit, colorPickerArea.z + pxunit, colorPickerArea.w + pxunit, uv)){\n        col = vec3(0);\n        if (inArea(colorPickerArea.x, colorPickerArea.y, colorPickerArea.z, colorPickerArea.w, uv)){\n            col = hsvToRgb(vec3(hue, sat, val));\n        }\n    }\n    //picked color area\n    if (inArea(pickedColorArea.x - pxunit, pickedColorArea.y - pxunit, pickedColorArea.z + pxunit, pickedColorArea.w + pxunit, uv)){\n        col = vec3(0);\n        if (inArea(pickedColorArea.x, pickedColorArea.y, pickedColorArea.z, pickedColorArea.w, uv)){\n            col = hsvToRgb(vec3(hue, sat, val));\n        }\n    }\n    \n    //tests inverse function\n    //col = rgbToHsv(col);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0);\n    if (floor(fragCoord) == vec2(0)) { //pixel (0,0)\n        vec4 m = vec4(iMouse.xy/iResolution.y, abs(iMouse.zw)/iResolution.y); //normalize mouse coords\n        if (m.z >= 1.225 && m.w >= 0.1 && m.z <= 1.3 && m.w <= 0.9 && iMouse.z > 0.0) { //check if last mouse click was in slider area & mouse is clicked\n            col.x = clamp(m.y,0.1,0.9); //move slider, restrained to area\n        } else {\n            col.x = texelFetch( iChannel0, ivec2(0, 0),0 ).x; //leave slider position unchanged\n            col.x = clamp(col.x,0.1,0.9); //fixes starting position\n        }\n        \n        if (m.z > 0.4 && m.z < 1.2 && m.w > 0.1 && m.w < 0.9 && iMouse.z > 0.0){ //check if last mouse click was in picker area & mouse is clicked\n            col.zw = vec2(clamp(m.x, 0.4, 1.2), clamp(m.y, 0.1, 0.9)); //move picker, restrained to area\n        } else {\n            col.zw = texelFetch( iChannel0, ivec2(0, 0),0 ).zw; //leave picker position unchanged\n            col.zw = vec2(clamp(col.z, 0.4, 1.2), clamp(col.w, 0.1, 0.9));//fixes starting position\n        }\n    }\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}