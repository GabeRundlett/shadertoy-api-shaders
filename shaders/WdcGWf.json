{
    "Shader": {
        "info": {
            "date": "1569353149",
            "description": "Distance fields for various objects along two moving cut planes (horizontal mouse overrides autopaging)",
            "flags": 0,
            "hasliked": 0,
            "id": "WdcGWf",
            "likes": 22,
            "name": "Distance Field Guide",
            "published": 3,
            "tags": [
                "raymarch",
                "sdf",
                "contour",
                "book"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 540
        },
        "renderpass": [
            {
                "code": "// \"Distance Field Guide\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  1   // optional antialiasing\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrEllipsDf (vec3 p, vec3 r);\nfloat PrEllCylDf (vec3 p, vec2 r, float h);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat PrConeDf (vec3 p, vec3 b);\nfloat SmoothMin (float a, float b, float r);\nvec3 HsvToRgb (vec3 c);\nvec2 Rot2D (vec2 q, float a);\n\nvec3 ltDirEx, ltDir, qHit, pgSize, pPos;\nfloat tCur, dstFarEx, dstFar, tpBook, phsTurn, idPage, rSep;\nint idObj, objType;\nconst float pi = 3.14159;\n\nconst int nPage = 15;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjTypeDst (vec3 p)\n{\n  float d;\n  p.yz = Rot2D (p.yz, 0.05 * 2. * pi * tCur);\n  p.xz = Rot2D (p.xz, 0.033 * 2. * pi * tCur);\n  if (objType <= 4) {\n    if      (objType == 1)  d = PrSphDf (p, 1.);\n    else if (objType == 2)  d = PrEllipsDf (p, vec3 (1.3, 1., 0.7));\n    else if (objType == 3)  d = PrBoxDf (p, vec3 (1., 0.8, 0.6));\n    else if (objType == 4)  d = PrTorusDf (p, 0.4, 1.);\n  } else if (objType <= 8) {\n    if      (objType == 5)  d = PrCylDf (p, 0.7, 1.);\n    else if (objType == 6)  d = PrEllCylDf (p, vec2 (0.8, 0.5), 1.);\n    else if (objType == 7)  d = PrCylAnDf (p, 0.6, 0.05, 1.);\n    else if (objType == 8)  d = PrCapsDf (p, 0.5, 1.);\n  } else if (objType <= 12) {\n    if      (objType == 9)  d = PrFlatCylDf (p, 0.7, 0.4, 1.);\n    else if (objType == 10) d = PrConeDf (p - vec3 (0., 0., 0.5), vec3 (0.6, 0.8, 1.));\n    else if (objType == 11) d = SmoothMin (PrSphDf (p - vec3 (0.1 + 0.9 * rSep, 0., 0.), 1.),\n       PrSphDf (p + vec3 (0.1 + 0.9 * rSep, 0., 0.), 1.), 0.2);\n    else if (objType == 12) d = SmoothMin (PrCylDf (p - vec3 (rSep, 0., 0.), 0.5, 1.),\n       PrCylDf (p.xzy + vec3 (rSep, 0., 0.), 0.5, 1.), 0.2);\n  } else {\n    if      (objType == 13) d = PrBoxDf (vec3 (abs (p.xz) - 0.7, p.y).xzy, vec3 (0.2, 1., 0.2));\n    else if (objType == 14) d = max (PrCylDf (vec3 (mod (p.x + 0.5, 1.) - 0.5, p.yz), 0.1, 1.),\n       abs (p.x) - 2.5);\n    else if (objType == 15) {\n      d = min (PrCylAnDf (p, 2., 0.2, 0.2), PrCylDf (p, 0.4, 0.2));\n      p.xy = Rot2D (p.xy, 2. * pi * (floor (5. * atan (p.y, - p.x) / (2. * pi) + 0.5)) / 5.);\n      d = min (d, PrCylDf (vec3 (p.x + 1., p.y, p.z).zyx, 0.2, 1.));\n    }\n  }\n  return d;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  q = p;\n  d = ObjTypeDst (q);\n  DMIN (1);\n  q = p;\n  q.y -= pPos.y;\n  d = PrBoxDf (q, vec3 (4., 0.01, 4.));\n  DMIN (2);\n  q = p;\n  q.z -= pPos.z;\n  d = PrBoxDf (q, vec3 (4., 4., 0.01));\n  DMIN (3);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  float dstObj;\n  pPos = 1.2 * vec3 (0., - (0.5 + 0.5 * sin (0.09 * 2. * pi * tCur)),\n     (0.5 + 0.5 * sin (0.11 * 2. * pi * tCur)));\n  rSep = 0.5 + 0.5 * sin (0.3 * 2. * pi * tCur);\n  objType = int (idPage);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1) {\n      col4 = vec4 (1., 1., 0.2, 0.2);\n    } else {\n      if (abs (((idObj == 2) ? vn.y : vn.z)) < 0.99) col4 = vec4 (0.1);\n      else col4 = (((idObj == 2) ? vec4 (1., 0.9, 1., 0.1) : vec4 (0.9, 1., 1., 0.1))) *\n         (0.3 + 0.7 * smoothstep (-0.2, 0.2, sin (8. * pi * ObjTypeDst (ro)))) *\n         (0.8 + 0.2 * smoothstep (0., 0.05, length (ro.yz - pPos.yz)));\n    }\n    col = col4.rgb * (0.2 + 0.7 * max (dot (vn, ltDir), 0.) +\n       col4.a * pow (max (dot (normalize (ltDir - rd), vn), 0.), 64.));\n  } else {\n    col = vec3 (0.9);\n  }\n  return col;\n}\n\nvoid ExMain  (out vec3 fCol, in vec2 fCoord)\n{\n  mat3 vuMat;\n  vec3 ro, rd;\n  vec2 ori, ca, sa;\n  float el, az, zmFac;\n  el = -0.15 * pi;\n  az = 0.2 * pi * sin (0.05 * pi * tCur);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -40.);\n  dstFar = 100.;\n  zmFac = 6.;\n  rd = vuMat * normalize (vec3 (fCoord, zmFac));\n  ltDir = normalize (vec3 (0., 1., -1.));\n  fCol = clamp (ShowScene (ro, rd), 0., 1.);\n}\n\nfloat ExObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, rRad, hRad, hOff, np, zr, thFac;\n  dMin = dstFarEx;\n  rRad = 0.4;\n  hRad = 0.08;\n  hOff = 0.15;\n  thFac = 2.2;\n  np = float (nPage - 1);\n  q = p;\n  zr = mod (q.z, 0.5 * pgSize.z) - 0.25 * pgSize.z;\n  for (int k = 0; k < nPage; k ++) {\n    q = p;\n    q.y -= 0.5 * np * thFac * pgSize.y;\n    if (k == 0) q.xy = Rot2D (vec2 (q.x, q.y + np * thFac * pgSize.y * phsTurn),\n       -2. * pi * phsTurn);\n    else q.y -= thFac * pgSize.y * (phsTurn - float (k));\n    q.x -= pgSize.x + rRad - hOff;\n    d = max (PrRoundBoxDf (q, pgSize - pgSize.y, pgSize.y), hRad -\n       length (vec2 (q.x + pgSize.x - hOff, zr)));\n    DMINQ (k + 1);\n  }\n  q = p;\n  d = abs (q.z) - pgSize.z;\n  q.z = zr;\n  d = max (PrTorusDf (q, 0.5 * hRad, rRad + 0.3 * hRad), d);\n  DMINQ (nPage + 1);\n  return dMin;\n}\n\nfloat ExObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ExObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFarEx) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ExObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  v = vec4 (- ExObjDf (p + e.xxx), ExObjDf (p + e.xyy), ExObjDf (p + e.yxy), ExObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ExObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = 0; j < 30; j ++) {\n    h = ExObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.01 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ExShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, c, vn;\n  vec2 s, w;\n  float dstObj, sh, npCyc, tpCyc, tpWait, nDotL, t;\n  bool isImg;\n  pgSize = vec3 (2.5, 0.011, 2.5);\n  tpCyc = 3.;\n  tpWait = 4.;\n  t = (tpBook < 0.) ? (- tpBook * float (nPage - 1) * (tpCyc + tpWait)) :\n     mod (tpBook - tpWait, float (nPage) * (tpCyc + tpWait));\n  npCyc = mod (floor (t / (tpCyc + tpWait)), float (nPage));\n  phsTurn = min (mod (t / (tpCyc + tpWait), 1.) * (tpCyc + tpWait) / tpCyc, 1.);\n  isImg = false;\n  dstObj = ExObjRay (ro, rd);\n  if (dstObj < dstFarEx) {\n    ro += dstObj * rd;\n    vn = ExObjNf (ro);\n    nDotL = max (dot (vn, ltDirEx), 0.);\n    if (idObj <= nPage) {\n      idPage = mod ((float (idObj - 1) + npCyc), float (nPage)) + 1.;\n      c = HsvToRgb (vec3 ((idPage - 1.) / float (nPage), 0.7, 1.));\n      s = pgSize.xz - abs (qHit.xz - vec2 (0.05, 0.));\n      col4 = vec4 (0.9, 0.9, 0.8, 0.2);\n      if (qHit.y > 0.) {\n        w = (qHit.xz - vec2 (0.05, 0.)) / (pgSize.x - 0.05);\n        if (min (s.x, s.y) > 0.3) {\n          isImg = true;\n          ExMain (col, w);\n        } else if (min (s.x, s.y) > 0.27) {\n          col4 = vec4 (0.6 * c, 0.2);\n        } else {\n          col4 = vec4 (c, 0.2);\n        }\n      } else {\n        col4 = vec4 (c, 0.2);\n      }\n    } else if (idObj == nPage + 1) {\n      col4 = vec4 (0.9, 0.9, 0.95, 0.2);\n      nDotL *= nDotL;\n    }\n    sh = ExObjSShadow (ro + 0.001 * vn, ltDirEx);\n    if (isImg) col *= 0.2 + 0.8 * sh;\n    else col = col4.rgb * (0.2 + 0.8 * sh * nDotL) +\n       col4.a * step (0.95, sh) * pow (max (dot (normalize (ltDirEx - rd), vn), 0.), 32.);\n  } else {\n    col = vec3 (1., 1., 0.9) * (0.5 + 0.2 * rd.y);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tpBook = tCur;\n  az = 0.;\n  el = -0.5 * pi;\n  if (mPtr.z > 0.) {\n    tpBook = - clamp (1.05 * mPtr.x + 0.5, 0., 1.);\n    el += pi * mPtr.y;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vec3 (0.5, 0., -20.);\n  ro = vuMat * ro;\n  zmFac = 7.;\n  dstFarEx = 40.;\n  ltDirEx = normalize (vec3 (1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ExShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (1.)), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrSphAnDf (vec3 p, float r, float w)\n{\n  return abs (length (p) - r) - w;\n}\n\nfloat PrEllipsDf (vec3 p, vec3 r)\n{\n  return (length (p / r) - 1.) * min (r.x, min (r.y, r.z));\n}\n\nfloat PrEllCylDf (vec3 p, vec2 r, float h)\n{\n  return max ((length (p.xy / r) - 1.) * min (r.x, r.y), abs (p.z) - h);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  float d;\n  d = length (p.xy - vec2 (clamp (p.x, - rhi, rhi), 0.)) - rlo;\n  if (h > 0.) d = max (d, abs (p.z) - h);\n  return d;\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat PrConeDf (vec3 p, vec3 b)\n{\n  return max (dot (vec2 (length (p.xy), p.z), b.xy), abs (p.z) - b.z);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}