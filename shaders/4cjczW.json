{
    "Shader": {
        "info": {
            "date": "1721983635",
            "description": "procedural mountains",
            "flags": 32,
            "hasliked": 0,
            "id": "4cjczW",
            "likes": 6,
            "name": "Parallax Mountains",
            "published": 3,
            "tags": [
                "procedural"
            ],
            "usePreview": 0,
            "username": "ShadeWhizz",
            "viewed": 118
        },
        "renderpass": [
            {
                "code": "vec2 crtWarp(vec2 uv, float distortion) {\n    // Normalize coordinates to the range [-1, 1]\n    vec2 normUV = uv * 2.0 - 1.0;\n    normUV *= 1.0;\n\n    // Apply CRT distortion\n    normUV.x *= 1.0 + distortion * (normUV.y * normUV.y);\n    normUV.y *= 1.0 + distortion * (normUV.x * normUV.x);\n\n    // Adjust back to original UV coordinates\n    vec2 warpedUV = (normUV + 1.0) * 0.5;\n\n    return warpedUV;\n}\nvec2 applyCRTCurvature(vec2 uv, float curvature) {\n  // Normalize coordinates to range from -1 to 1\n    vec2 centered_uv = (uv - 0.5) * 2.0;\n        //centered_uv *= 0.98;\n\n    // Aspect ratio adjustment\n    centered_uv.x *= iResolution.x / iResolution.y;\n    \n    // Apply the CRT curvature distortion\n    centered_uv = centered_uv * curvature + centered_uv * (1.0 - curvature) * (1.0 - dot(centered_uv, centered_uv) * 0.5);\n\n    // Convert back to 0 to 1 range\n    centered_uv.x /= iResolution.x / iResolution.y;\n    return centered_uv * 0.5 + 0.5;\n}\n// yea i kinda like this one thanks chat\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float mouse = iMouse.x/iResolution.x;\n\n    vec2 basis_r = vec2(1.0, 0.0);                       // 0 degrees\n    vec2 basis_g = vec2(-0.5, sqrt(3.0) / 2.0);          // 120 degrees\n    vec2 basis_b = vec2(-0.5, -sqrt(3.0) / 2.0);         // 240 degrees\n    \n    vec2 res = iResolution.xy/4.;\n    vec2 px = 1.0 / res;\n    vec2 uv = fragCoord/iResolution.xy;\n    //uv = crtWarp(uv, 0.03);\n    uv = applyCRTCurvature(uv, 1.05);\n    //uv = applyCRTCurvature(uv, 0.9); // neat holodeck vibes\n    //if (uv.x < 0.5) {\n    //    fragColor = texture(iChannel0, uv);\n    //    return;\n    //}\n    vec2 this_px = uv*res;\n    vec3 acc = vec3(0.0);\n    vec2 c = floor(uv*res) + 0.5;\n    for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n            vec2 o = vec2(float(i), float(j));\n            vec2 co = c + o;\n            float sep = 0.4;\n            vec2 cr = co + sep*basis_r;\n            vec2 cg = co + sep*basis_g;\n            vec2 cb = co + sep*basis_b;\n            float dr = length(this_px - cr);\n            float dg = length(this_px - cg);\n            float db = length(this_px - cb);\n            vec3 d = vec3(dr, dg, db);\n            d *= 0.94;\n            d = min(d, 1.0);\n            vec3 filt = 1.0 - 3.0*d*d + 2.0*d*d*d;\n            filt *= 1.3;\n            vec3 col = texture(iChannel0, co / res).xyz;\n            vec3 cont = col*filt;\n            if (int(co.y) % 2 == 0) { cont *= 0.85; }\n            if (co.x > res.x || co.y > res.y || co.x < 0.0 || co.y < 0.0) { cont = vec3(0.0); }\n            acc += cont;\n        }\n    }\n    fragColor = vec4(acc, 0.0);\n    vec2 d_edge = min(this_px, abs(this_px - res));\n    float d = min(d_edge.x, d_edge.y);\n    float v = clamp((d / 4.0), 0.0, 1.0);\n    v = v*v*(3.0 - 2.0*v);\n    fragColor *= v;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 hash( vec2 p ) // replace this by something better\n{\n    p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n    vec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n    vec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n    vec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nfloat expnoise(in vec2 p) {\n    return -log((noise(p) + 1.0)/2.0)/4.0;\n}\n\nfloat fnoise(vec2 p) {\n    return 1.0000 * expnoise(p) +\n           0.5000 * expnoise(vec2(p.x*2.0, p.y + 12349.04123)) +\n           0.2500 * expnoise(vec2(p.x*4.0, p.y + 546345.43623)) +\n           0.1250 * expnoise(vec2(p.x*8.0, p.y + 42351.875)) +\n           0.0625 * expnoise(vec2(p.x*16.0, p.y + 654328.875)) /\n           1.9375;\n}\n\nfloat height(vec2 p) {\n    return (fnoise(p*vec2(1.0, 1.0)));\n}\n\nvec4 cloud(in vec2 p) {\n    vec4 sky = vec4(0.7, 0.7, 1.0 ,1.0);\n    vec4 cloud = vec4(1.0, 1.0, 1.0, 1.0);\n    vec2 stretch = vec2(4.0, 12.0);\n    float d = noise(p*stretch);\n    d *= p.y;\n    d *= p.y;\n    d *= p.y;\n    d *= p.y;\n    return mix(sky, cloud, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float speed = 0.5;\n    vec2 uv = fragCoord/iResolution.xy;\n    //fragColor = vec4(0.7, 0.7, 1.0 ,1.0);\n    fragColor = cloud(vec2(uv.x + iTime * 0.02 * speed, uv.y));\n    if (uv.y < height(vec2(uv.x + iTime*0.07*speed, 0.0)) * 2.0 - 0.0) {\n        fragColor = vec4(0.8, 0.6, 0.5 ,1.0);\n    }\n    if (uv.y < height(vec2(0.5*uv.x + iTime*0.11*speed, 4.342)) * 1.1 + 0.0) {\n        fragColor = vec4(0.7, 0.5, 0.4 ,1.0);\n    }\n    if (uv.y < height(vec2(0.6*uv.x + iTime*0.18*speed, 8.35742)) * 0.9 - 0.1) {\n        fragColor = vec4(0.6, 0.4, 0.3 ,1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}