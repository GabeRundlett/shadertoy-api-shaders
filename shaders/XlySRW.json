{
    "Shader": {
        "info": {
            "date": "1483069553",
            "description": "Playing with more basic concepts: rotation & wavy distortion",
            "flags": 0,
            "hasliked": 0,
            "id": "XlySRW",
            "likes": 8,
            "name": "OP Wavy Rotate",
            "published": 3,
            "tags": [
                "waves",
                "bw",
                "rotation",
                "opart"
            ],
            "usePreview": 0,
            "username": "cacheflowe",
            "viewed": 889
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime * 0.75;\n    // center coordinates\n    vec2 uv = (2. * fragCoord.xy - iResolution.xy) / iResolution.y,\n         uvWave = (2. * fragCoord.xy - iResolution.xy) / iResolution.y,\n         center = vec2(0);\n    // wavy vertical - oscillate x position by sin(y)\n    uvWave += vec2(0.1 * sin(uv.y * 4. * sin(time * 2.)), 0);\n\t// rotation of uv from: http://stackoverflow.com/questions/28074977/rotating-a-texture-on-a-fragment-shader-in-glsl-es\n    uv *= mat2(cos(time), sin(time), -sin(time), cos(time));\n    uvWave *= mat2(cos(time), sin(time), -sin(time), cos(time));\n    // stripes\n    float thickness = 80. + 60. * sin(time);\n    vec3 color = vec3(0.5 + 0.5 * sin(time + uvWave.x * thickness)); \n    // invert center\n    if(distance(uv, center) < 0.7) { \n        color = vec3(1) - color; \n    }\n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}