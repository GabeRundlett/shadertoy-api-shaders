{
    "Shader": {
        "info": {
            "date": "1527765540",
            "description": "Attempt to make a reflective spheres via ray tracing. User mouse to rotate",
            "flags": 0,
            "hasliked": 0,
            "id": "ldyBRD",
            "likes": 4,
            "name": "Reflective 3D spheres",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "raytracing",
                "raymarching",
                "reflection",
                "distancefields",
                "sphere",
                "cubemap",
                "primitives",
                "plane"
            ],
            "usePreview": 0,
            "username": "artyomabramov",
            "viewed": 614
        },
        "renderpass": [
            {
                "code": "#define FLT_MAX 3.402823466e+38\n\nfloat cameraRadius = 7.0;\n\nvec3 ro, lookat, rd;\n\nbool shouldRedrawScene;\nvec3 rro, rrd;\n\nvoid setupCamera(vec2 uv) {\n    vec3 f = normalize(lookat - ro);\n    vec3 r = normalize(cross(vec3(0.0, 1.0, 0.0), f));\n    vec3 u = cross(f, r);\n    \n    float zoom = 1.0;\n    \n    vec3 c = ro + f * zoom;\n    \n    vec3 i = c + uv.x * r + uv.y * u;\n    \n    rd = normalize(i - ro);\n}\n\n\nfloat remap(float a, float b, float t) {\n    return (t - a) / (b - a);\n}\n\n\nfloat drawPlane(vec3 ro1, vec3 rd1) {\n    vec3 n = vec3(0.0, 1.0, 0.0);\n    vec3 floorP = vec3(0.0);\n    \n    float t = -dot(ro1 - floorP, n) / dot(rd1, n);\n    \n    return t;\n}\n\n\nvec4 drawPoint(vec3 ro, vec3 rd, vec3 s, int c) {    \n    float radius = 0.5;\n    float t = dot(s - ro, rd);\n    vec3 p = ro + rd * t;\n    \n    if (t < 0.0) {\n        return vec4(0.0);\n    }\n    \n    float y = length(p - s);\n    float d = -1.0;\n    \n    float col = 0.0;\n    \n    if (y < radius) {\n        float x = sqrt(radius * radius - y * y);\n        float t1 = t - x;\n        \n\t\tp = ro + rd * t1;\n        \n        float dist = length(s - ro);\n        t1 = remap(dist, dist - radius, t1);\n        t1 = t1 / 2.0 + 0.5;\n                \n        col = t1;\n        d = length(p - ro);\n        \n        if (c > 0) {\n            c--;\n            \n            vec3 n = normalize(p - s);\n            vec3 rr = reflect(normalize(p - ro), n);\n            \n            t = drawPlane(p, rr);\n    \n            p = p + rr * t;\n            t1 = length(p - ro);\n\n            vec4 res = vec4(0.15);\n            \n            if (t > 0.0) {\n            \tres.rgb = texture(iChannel0, (p - vec3(0.0)).xz / 5.0 - 0.5).rgb * 1.25;\n            } else {\n                res.rgb = texture(iChannel1, vec3(rr)).rgb * 0.8 + vec3(0.1);\n            }\n            \n            res.a = d;\n    \n            return res;\n        }\n    }\n        \n    return vec4(vec3(1.0, 0.5, 0.25) * col, d);\n}\n\n\nvec4 drawScene(vec3 ro, vec3 rd, int c) {\n    vec4 d = texture(iChannel1, rd) * 0.8;\n    d.a = FLT_MAX;\n    \n    float sN = 4.0;\n    float spacing = 6.0;\n    \n    for (int i = 0; i >= 0; i++) {\n        if (float(i) > sN) {\n            break;\n        }\n        \n        for (int o = 0; o >= 0; o++) {\n            if (float(o) > sN) {\n                break;\n            }\n                \n            vec3 p = vec3((-0.5 + float(o) / sN) * spacing, 0.1 + sin(iTime * 3.0 + float(o + i)) / 2.0 + 0.5, (-0.5 + float(i) / sN) * spacing);\n            \n            vec4 nP = drawPoint(ro, rd, p, 1); \n            \n            if (nP.a < d.a && nP.a > 0.0) {\n                d = nP;\n\n                vec3 s = ro + rd * d.a;\n\n                vec3 n = normalize(s - p);\n                rro = s;\n                rrd = reflect(normalize(s - ro), n);\n\n                shouldRedrawScene = true;\n            }\n        }\n    }\n            \n\tfloat t = drawPlane(ro, rd);\n    \n    if (t >= 0.0) {\n        vec3 p = ro + rd * t;\n        float t1 = length(p - ro);\n\n        if (d.a > t1) {\n            d.rgb = texture(iChannel0, (p - vec3(0.0)).xz / 5.0 - 0.5).rgb;\n            d.a = t1;\n            \n\t\t\tshouldRedrawScene = false;\n        }\n    }\n    \n    return d;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n  \tvec2 cam = iMouse.xy / iResolution.xy;\n\n    cam.x *= 4.0;\n    cam.y = 1.0 - cam.y;\n        \n\tro = vec3(cameraRadius * sin(cam.x), 0.01 + 2.0 * cam.y, cameraRadius * cos(cam.x));\n    \n    lookat = vec3(0.0, 0.5, 0.0);    \n    setupCamera(uv);\n    \n \n    shouldRedrawScene = false;\n\tvec4 d = drawScene(ro, rd, 1);\n    \n    if (shouldRedrawScene) {\n        vec4 refl = drawScene(rro, rrd, 0);\n        d.rgb = refl.rgb * 1.3;\n    }\n    \n    // -1.0 - ZBuffer\n    // 1.0 - image\n  \tfloat m = 1.0;\n    \n    fragColor = vec4(mix(vec3(d.a) * 0.1, d.rgb, smoothstep(0.4, 0.6, uv.x + 0.5 + m)), d.a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}