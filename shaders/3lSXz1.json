{
    "Shader": {
        "info": {
            "date": "1564969029",
            "description": "The newton fractal, drawn smoothly, for the polynomial z^3-1.",
            "flags": 0,
            "hasliked": 0,
            "id": "3lSXz1",
            "likes": 9,
            "name": "Smooth Newton Fractal",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "newton",
                "smooth"
            ],
            "usePreview": 0,
            "username": "cppio",
            "viewed": 860
        },
        "renderpass": [
            {
                "code": "#define THRESHOLD 0.000001\n#define MAX_ITERATIONS 100\n#define ANTI_ALIASING 2\n\nvec2 f(vec2 z) {\n    float magnitude = dot(z, z);\n    return (2.0 * z + vec2(z.x * z.x - z.y * z.y, -2.0 * z.x * z.y) / (magnitude * magnitude)) / 3.0;\n}\n\nvec2 roots[] = vec2[](\n    vec2(1.0, 0.0),\n    vec2(-0.5, 0.5 * sqrt(3.0)),\n    vec2(-0.5, -0.5 * sqrt(3.0))\n);\n\nvec3 palette[] = vec3[](\n    vec3(1.0, 0.0, 0.0),\n    vec3(0.0, 1.0, 0.0),\n    vec3(0.0, 0.0, 1.0)\n);\n\nvec3 drawFractal(vec2 z) {\n    for (int iterations = 0; iterations < MAX_ITERATIONS; ++iterations) {\n    \tz = f(z);\n        \n        for (int root = 0; root < roots.length(); ++root) {\n            vec2 difference = z - roots[root];\n            float distance = dot(difference, difference);\n            if (distance < THRESHOLD) {\n    \t\t\treturn palette[root] * (0.75 + 0.25 * cos(0.25 * (float(iterations) - log2(log(distance) / log(THRESHOLD)))));\n            }\n        }\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float zoom = exp(-5.0 * (0.9 - cos(iTime / 5.0)));\n    vec2 center = vec2(0.14918, 0.09001);\n    \n    vec3 color = vec3(0);\n    \n    for (int x = 0; x < ANTI_ALIASING; ++x) {\n        for (int y = 0; y < ANTI_ALIASING; ++y) {\n            color += drawFractal(center + zoom * ((2.0 * (fragCoord + vec2(x, y) / float(ANTI_ALIASING)) - iResolution.xy) / iResolution.y - center));\n        }\n    }\n    \n    fragColor = vec4(color / float(ANTI_ALIASING * ANTI_ALIASING), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}