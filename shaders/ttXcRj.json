{
    "Shader": {
        "info": {
            "date": "1592466527",
            "description": "playing with iq smooth Mandelbrot technique reusing jorge2017a1 setup.\nin particular:    marquetry pattern    + fade-to-grey antialiasing ( NB: I preferred to trade slight aliasing for pitch).\nAntialiasing tuned with mouse.xy (analytic) + #def N (oversamp",
            "flags": 0,
            "hasliked": 0,
            "id": "ttXcRj",
            "likes": 8,
            "name": "smooth Mandelbrot 2",
            "published": 3,
            "tags": [
                "mandelbrot",
                "smooth",
                "atialiasing"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 349
        },
        "renderpass": [
            {
                "code": "// Fork of jorge2017a1 https://shadertoy.com/view/WlfyR2\n// Fork of IQ https://www.shadertoy.com/view/4df3Rn\n//   See here for more information on smooth iteration count:\n//   https://iquilezles.org/articles/msetsmooth\n// mouse.x controls the threshold to grey,    and mouse.y how the transition span.\n     \n#define N 1   // antialiasing oversampling = NxN\n#define linstep(a,b,x) clamp( (x-(a))/(b-(a)),0.,1.)\n\nfloat mandelbrot( vec2 c , out vec2 z,out vec2 _z )\n{\n#if 1 // --- optimizations : \n    float c2 = 16.* dot(c, c);\n    // skip computation inside M1 - https://iquilezles.org/articles/mset1bulb\n    if( c2*c2 - 6.*c2 + 32.*c.x < 3. ) return 0.;\n    // skip computation inside M2 - https://iquilezles.org/articles/mset2bulb\n    if( c2 + 32.*c.x + 16.  < 1. ) return 0.;\n#endif\n\n    float B = 256., l = 0.;\n    z  = vec2(0);\n    for( int i=0; i<512; i++, l++ ) {\n       _z = z;\n        z = mat2(z,-z.y,z.x) * z  + c;\n        if( dot(z,z) >  B*B ) break;\n    }\n    if( l > 511. ) return 0.;\n    \n    return l -= log2(log2(length(z))/log2(B));  // smooth iteration count  \n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    float t = iTime, l,lc=0.,l0,AA=1.,a,_a,ac=0.,sac=0.,\n       zoom = pow( .62 + .38*cos(.07*t) ,8.);   \n    vec2 R = iResolution.xy, z, _z,\n         M = length(iMouse.xy)<10. ? vec2(-3.75,2.25) : vec2(4,0)+iMouse.xy/R*vec2(-11,8);\n\n    // --- compute Mandelbrot\n    \n    int k = N*N/2;                              // NxN = subsampling. \n    for (int k=0; k<N*N; k++) {                 // oversampling\n        vec2 sp = vec2(k%N,k/N)/float(N)-.5,    // subpixel pos\n              p = ( 2.* (U+sp) - R ) / R.y,\n              c =   vec2(-.745,.186) \n                  + zoom * p * mat2( cos( .15*(1.-zoom)*t + vec4(0,11,33,0) )) ;\n          l = mandelbrot(c, z,_z);\n          a = atan(z.y,z.x);  _a = atan(_z.y,_z.x); \n        ac +=          mix(_a,a,fract(l)); \n       sac += sin( 6.* mix(_a,a,fract(l)) ); \n        lc += l;\n    } l = lc / float(N*N); ac /= float(N*N), sac /= float(N*N);\n    \n    // --- tweak patterns and color from it\n    \n    l0=l; // keep for LOD & AA\n    if (l0==0.) { O = vec4(.5,0,0,1); return; }\n\n#if 1                                       // play with angle(z) rather than l\n    l = 6.*ac;\n  //l = mod( ac+3.14159*mod(floor(l0),2.), 6.283 );\n#endif    \n    \n // O = vec4( .5 + .5* cos( 3. + l*.15 + vec4(0,.6,1,0)) ); // jorge2017a1 colors\n // O = vec4( .5 + .5* sin(l*vec4(1,.33,.1,0)));\n     \n // l = sin(l); O = vec4( l/fwidth(l) );           // draw strips or isolines\n // l = sin(l); O = vec4( sqrt( abs(l)/fwidth(l) ) );  \n // l = sin(l); O = vec4( .5+ l/fwidth(l) ); \n    \n // AA = smoothstep(-3.,-6.,log2(fwidth(l0)));     // play with antialiasing (fade to grey)\n // AA = smoothstep(exp2(-3.),exp2(-6.),fwidth(l0));\n // AA = linstep(-3.,-6.,log2(fwidth(l0)));\n // AA = linstep(-1.5,-6.,log2(fwidth(l0)));\n    AA = linstep(M.x+M.y,M.x-M.y,log2(fwidth(l0)/float(N)));\n // AA = linstep(exp2(-1.),exp2(-6.),(fwidth(l0)));\n  //l = sin(l); O = vec4( sqrt( .5+ l/fwidth(l)*AA  ) ); \n  //l = sin(l); O = vec4( sqrt( .5- l/fwidth(l) * (.2+.8*AA  )) ); \n    l = sin(l); O = vec4( sqrt( .5- clamp(l/fwidth(l),-.5,.5)* AA ) ); \n  //l = sin(l); O = vec4( sqrt( .5- clamp(l/fwidth(l),-.5,.5)* (.2+.8*AA  )) ); \n\n    O = vec4( sqrt( .5- sac* AA ) ); \n  //O = vec4( sqrt( .5 - sac ) ) ;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}