{
    "Shader": {
        "info": {
            "date": "1727951582",
            "description": "originals  https://glslsandbox.com/e#67935.0",
            "flags": 0,
            "hasliked": 0,
            "id": "43lBRr",
            "likes": 0,
            "name": "sphere with dots",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 38
        },
        "renderpass": [
            {
                "code": "uniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nint iterations = 3;\nconst vec3 va = vec3(  0.0,  0.57735,  0.0 );\nconst vec3 vb = vec3(  0.0, -1.0,  1.15470 );\nconst vec3 vc = vec3(  1.0, -1.0, -0.57735 );\nconst vec3 vd = vec3( -1.0, -1.0, -0.57735 );\n\n#define time iTime\n#define resolution iResolution.xy\n#define Q(p) p *= r(round(atan(p.x, p.y) * 4.) / 4.)\n#define r(a) mat2(cos(a + asin(vec4(0,1,-1,0))))\nvec2 map( vec3 p )\n{\np.z+=0.2;\n  float a = 0.0;\n  float s = 1.0;\n  float r = 1.0;\n  float dm;\n  vec3 v;\n  \n  for(int i=0; i<8; i++)\n  {\n    if (i > iterations) break;\n    float d, t;\n  Q(p.yz);\n    Q(p.xz);\n    \n    d = dot(p-va,p-va);              v=va; dm=d; t=0.0;\n    d = dot(p-vb,p-vb); if( d<dm ) { v=vb; dm=d; t=1.0; }\n    d = dot(p-vc,p-vc); if( d<dm ) { v=vc; dm=d; t=2.0; }\n    d = dot(p-vd,p-vd); if( d<dm ) { v=vd; dm=d; t=3.0; }\n    p = v + 2.0*(p - v);   r*= 2.0;\n    a = t + 4.0*a; s*= 4.0;\n  }\n  return vec2((sqrt(dm)-1.0)/r, a/s);\n}\n\nconst float precis = 0.0002;\n\nvec3 intersect( in vec3 ro, in vec3 rd )\n{\n  vec3 res = vec3( 1e20, 0.0, 0.0 );\n\t\n  float maxd = 5.0;\n\n  // sierpinski\n  float h = 1.0;\n  float t = 0.5;\n  float m = 0.0;\n  vec2 r;\n  for( int i=0; i<100; i++ )\n  {\n    r = map(ro+rd*t);\n    if(r.x<precis || t>maxd) break;\n    m = r.y;\n    t += r.x;\n  }\n  if(t<maxd && r.x<precis)\n    res = vec3(t, 2.0, m);\n\n  return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n  vec3 eps = vec3(precis,0.0,0.0);\n  return normalize(vec3(\n    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n    map(pos+eps.yyx).x - map(pos-eps.yyx).x));\n}\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n  float ao = 0.0;\n  float sca = 1.0;\n  for( int i=0; i<8; i++ )\n  {\n    float h = 0.001 + 0.5*pow(float(i)/7.0,1.5);\n    float d = map( pos + h*nor ).x;\n    ao += -(d-h)*sca;\n    sca *= 0.95;\n  }\n  return clamp( 1.0 - 0.8*ao, 0.0, 1.0 );\n}\n\nvec3 lig = normalize(vec3(1.0,0.7,.9));\n\nvec3 render( in vec3 ro, in vec3 rd )\n{\n  vec3 col = vec3(0.0);\n\n  // raymarch\n  vec3 tm = intersect(ro,rd);\n  if( tm.y>0.5 )\n  {\n    // geometry\n    vec3 pos = ro + tm.x*rd;\n    vec3 nor = calcNormal( pos );\n    vec3 maa = vec3( 0.0 );\n    maa = 0.5 + 0.5*cos( 6.2831*tm.z + vec3(0.0,1.0,5.0) );\n\n    float occ = calcOcclusion( pos, nor );\n\n    // lighting\n    float amb = (0.5 + 0.5*nor.y);\n    float dif = max(dot(nor,lig),0.0);\n\n    // lights\n    vec3 lin = 1.5*amb*vec3(1.0) * occ;\n\n    // surface-light interacion\n    col = maa * lin;\n  }\n\n  // gamma\n  col = pow( clamp(col,0.0,1.0), vec3(0.45) );\n\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 q = gl_FragCoord.xy / resolution.xy;\n  vec2 p = -1.0 + 2.0 * q;\n  p.x *= resolution.x / resolution.y;\n  vec2 m = vec2(0.5);\n\n  // camera\n  float an = 0.15*time - 10.*(iTime-1.5);\n  \n  vec3 ro = vec3(3.5*sin(an),0.5,3.5*cos(an));\nro+= vec3(1.5*sin(an),1.5*cos(an),0.);\n  vec3 ta = vec3(0.0,-0.0,0.0);\n  vec3 ww = normalize( ta - ro );\n  vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n  vec3 vv = normalize( cross(uu,ww));\n  vec3 rd = normalize( p.x*uu + p.y*vv + 5.0*ww*m.y );\n\n  vec3 col = render( ro, rd );\n    \n  fragColor = vec4( col, 1.0 );\n}\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}