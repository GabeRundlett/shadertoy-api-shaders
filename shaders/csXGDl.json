{
    "Shader": {
        "info": {
            "date": "1666962113",
            "description": "Whew, talk about garbage lighting.",
            "flags": 0,
            "hasliked": 0,
            "id": "csXGDl",
            "likes": 8,
            "name": "The Jitters",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "abstract"
            ],
            "usePreview": 0,
            "username": "ruojake",
            "viewed": 263
        },
        "renderpass": [
            {
                "code": "// The Jitters by Kristian Sivonen (ruojake)\n// CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0/)\n\nfloat hash12(vec2 p)\n{\n    vec3 q = p.xyy + vec3(.1,.2,.3) + p.yxx * .2;\n    q += dot(q, p.yyx * .761) - q.z;\n    return fract((q.x + q.y) * .1 + (q.z - q.x) * .12 - q.z * .52);\n}\n\nfloat pat(vec2 p, vec2 i)\n{\n    float h = hash12(i);\n    float t = iTime * (.2 + fract(h + .672));\n    t -= pow(1. - fract(t * fract(h + .912)), 3.) * .5 * fract(h + .193); \n    float a = fract(h + .789) * 4.;\n    a += (fract(h + .321) < .5 ? t : -t);\n    vec2 d = vec2(sin(a),cos(a));\n    return sin(dot(((p - i) * 2. - 1.) * max(h, .1) * 2., d));\n}\n\nfloat noise(vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 f2 = f * f;\n    f = (6. * f2 - 15. * f + 10.) * f2 * f; \n    \n    vec2 o = vec2(1,0);\n    \n    return mix(\n        mix(pat(p, i), pat(p, i + o), f.x),\n        mix(pat(p, i + o.yx), pat(p, i + 1.), f.x),\n        f.y\n    );\n}\n\nvec2 der(vec2 p, float v)\n{\n    const vec2 e = vec2(.2, 0);\n    return normalize(\n        v - vec3(\n            noise(p + e),\n            noise(p + e.yx),\n            .2\n        )\n    ).xy * smoothstep(-1., 1., v);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5)/iResolution.y * 5.;\n\n    float n = noise(uv);\n    vec2 d = der(uv, n);\n    uv += d * 3.;\n    n = noise(uv);\n    uv -= d * 6.;\n    float m = 1.;\n    \n    for(int i = 0; i < 5; ++i)\n    {\n        uv += n / m + 3.;\n        n += noise(uv) / m;\n        m *= 2.;\n    }\n    n = n * .25 + .5;\n\n    vec3 col = mix(vec3(.5, .1, .2), vec3(.3, .25, .3), 1. - n * n);\n    float l = dot(d, vec2(.7071)) * .5 + .5;\n    col = clamp(mix(col * n, vec3(.7, .75, .8), l * l * l * l) + pow(l * 1.1, 40.), 0., 1.);\n    col = mix(col.ggg, col, 2.5);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}