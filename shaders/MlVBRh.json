{
    "Shader": {
        "info": {
            "date": "1541855136",
            "description": "yeah",
            "flags": 0,
            "hasliked": 0,
            "id": "MlVBRh",
            "likes": 2,
            "name": "Ugly graphing",
            "published": 3,
            "tags": [
                "graphingfunctions"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 427
        },
        "renderpass": [
            {
                "code": "#define S(l) smoothstep(lineThickness,0.,abs(l)/fwidth(l))\n#define G(l) smoothstep(gThicc,0.,abs(fract(l+.5)-.5)/fwidth(l))\n\nfloat lineThickness = 1.5,\n      gThicc        = 1.5;\n\n#define pixelInFunction(equation,uv) S(equation-uv.y)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= iMouse.xy/iResolution.xy*2.0-1.0;\n    uv=-1.0+2.0*uv;\n    uv.x*=iResolution.x/iResolution.y;\n    uv *= 5.0;\n    \n    \n    vec3 col = vec3(1.);\n    \n    for(float j = 3.; j >=1.; j--) {\n        float i = exp2(j)/4.;\n        bool isAt0 = uv.x == 0. || uv.y == 0.;\n        col = mix(col, vec3(1.-1./i), max(G(uv.x*i),G(uv.y*i)))+0.1;\n    }\n    \n    col = mix(col, vec3(1,0,0), pixelInFunction(uv.x*uv.x,uv));\n    col = mix(col, vec3(1,0.5,0), pixelInFunction(sin(uv.x)+uv.x*sin(iTime),uv));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}