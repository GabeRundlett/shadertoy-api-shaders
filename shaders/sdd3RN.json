{
    "Shader": {
        "info": {
            "date": "1629322160",
            "description": "Calculating a tangent-space normal map out of a height function",
            "flags": 0,
            "hasliked": 0,
            "id": "sdd3RN",
            "likes": 5,
            "name": "Normal map from height",
            "published": 3,
            "tags": [
                "normal"
            ],
            "usePreview": 0,
            "username": "OskarSwierad",
            "viewed": 526
        },
        "renderpass": [
            {
                "code": "const float circleRadius = 0.2;\nconst vec2 circleCenter = vec2(0.5, 0.3);\n\nfloat calcHeight(vec2 uv)\n{\n    float circleShape = distance(uv, circleCenter);\n    circleShape /= circleRadius;\n    float mask = clamp(circleShape, 0.0, 1.0); // cone shape\n    mask = 1.0 - mask; // invert height\n    mask = smoothstep(0.0, 1.0, mask); // bell shape\n    return mask;\n}\n\nvec3 calcNormal(vec2 uv)\n{\n    float aspectRatio = iResolution.y / iResolution.x;\n    vec2 kernelSize = vec2(0.001) * aspectRatio; // in UV space\n    \n    vec2 uvs[] = vec2[](\n        uv,                           // center\n        uv + vec2(kernelSize.x, 0.0), // to the right\n        uv + vec2(0.0, kernelSize.y)  // to the top\n    );\n\n    float samples[] = float[](\n        calcHeight(uvs[0]), // origin\n        calcHeight(uvs[1]), // to the right\n        calcHeight(uvs[2])  // to the top\n    );\n    \n    float dX = samples[1] - samples[0]; // height difference along X\n    float dY = samples[2] - samples[0]; // height difference along Y\n    float heightScale = 200.0; // normal map strength\n    float x = dX * heightScale;\n    float y = dY * heightScale;\n    float z = sqrt(1.0 - (x*x + y*y)); // derive Z out of X,Y\n    \n    vec3 normal = normalize(vec3(x, y, z)); // [-1,1] range\n    vec3 normalPacked = normal * 0.5 + vec3(0.5); // [0,1] range (bitmap)\n    return normalPacked;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspectRatio = iResolution.y / iResolution.x;\n    vec2 uv = fragCoord/iResolution.xy * vec2(1.0, aspectRatio);\n\n    vec3 normal = calcNormal(uv);\n\n    // Output to screen\n    fragColor = vec4(normal, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}