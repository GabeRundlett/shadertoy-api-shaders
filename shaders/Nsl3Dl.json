{
    "Shader": {
        "info": {
            "date": "1616747469",
            "description": "Solving for the y coordinate of a quadratic bezier. The same process can be applied to other parametrics, take the inverse of the x component and plug it into the y component as the parameter.",
            "flags": 0,
            "hasliked": 0,
            "id": "Nsl3Dl",
            "likes": 1,
            "name": "Quadratic Bezier to \"y=\"",
            "published": 3,
            "tags": [
                "bezier",
                "1d",
                "de",
                "quadratic",
                "inverse",
                "parametric"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 147
        },
        "renderpass": [
            {
                "code": "#define draw(d, c) color = mix(color, c, smoothstep(unit, 0.0, d))\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\n// There are two roots, you can only choose one (k = -1 or k = 1)\nvec2 yBezier(in float x, in float k, in vec2 a, in vec2 b, in vec2 c) {\n    float c1 = a.x - 2.0 * b.x + c.x;\n    float c2 = 2.0 * (b.x - a.x);\n    float c3 = a.x - x;\n\n    float discr = c2 * c2 - 4.0 * c1 * c3;\n    if (discr > 0.0) {\n        float t = (sqrt(discr) * k - c2) / c1 * 0.5, tInv = 1.0 - t;\n        if (abs(t - 0.5) < 0.5) return vec2(a.y * tInv * tInv + 2.0 * b.y * tInv * t + c.y * t * t, 1.0);\n        return vec2(0.0);\n    }\n\n    return vec2(0.0);\n}\n\n// Derivative (mainly for distance estimation)\nvec2 dBezier(in float x, in float k, in vec2 a, in vec2 b, in vec2 c) {\n    float c1 = a.x - 2.0 * b.x + c.x;\n    float c2 = 2.0 * (b.x - a.x);\n    float c3 = a.x - x;\n\n    float discr = c2 * c2 - 4.0 * c1 * c3;\n    if (discr > 0.0) {\n        float sq = sqrt(discr);\n\n        float t = (sq * k - c2) / c1 * 0.5;\n        if (abs(t - 0.5) < 0.5) { // In the range [0, 1]\n            float u = 2.0 * (a.y * (t - 1.0) + b.y * (1.0 - 2.0 * t) + c.y * t);\n            float v = u * k / sq;\n            return vec2(v, 1.0);\n        }\n\n        return vec2(0.0);\n    }\n\n    return vec2(0.0);\n}\n\nvec3 xMaxBezier(in vec2 a, in vec2 b, in vec2 c) {\n    float t = (a.x - b.x) / (a.x - 2.0 * b.x + c.x), tInv = 1.0 - t;\n    if (abs(t - 0.5) < 0.5) return vec3(a * tInv * tInv + 2.0 * b * tInv * t + c * t * t, 1.0);\n    return vec3(0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n    vec3 color = vec3(0.25);\n\n    float t1 = iTime * 0.5, t2 = iTime, t3 = iTime * 1.25;\n\n    float c1 = cos(t1), s1 = sin(t1);\n    float c2 = cos(t2), s2 = sin(t2);\n    float c3 = cos(t3), s3 = sin(t3);\n\n    vec2 a = vec2(c2, s3) * 0.5;\n    vec2 b = vec2(s1, s2) * 0.5;\n    vec2 c = vec2(c3, c1) * 0.5;\n\n    // First part (k = 1)\n    vec2 dx = dBezier(uv.x, 1.0, a, b, c);\n    if (dx.y > 0.0) {\n        vec2 de = abs(uv.y - yBezier(uv.x, 1.0, a, b, c)) / sqrt(1.0 + dx * dx);\n        draw(de.x - 0.01, vec3(1.0, 0.5, 0.0));\n    }\n\n    // Second part (k = -1)\n    dx = dBezier(uv.x, -1.0, a, b, c);\n    if (dx.y > 0.0) {\n        vec2 de = abs(uv.y - yBezier(uv.x, -1.0, a, b, c)) / sqrt(1.0 + dx * dx);\n        draw(de.x - 0.01, vec3(0.0, 0.0, 1.0));\n    }\n\n    draw(sdLine(uv, a, b), vec3(1.0));\n    draw(sdLine(uv, b, c), vec3(1.0));\n\n    vec3 xMax = xMaxBezier(a, b, c);\n    if (xMax.z > 0.0) draw((length(uv - xMax.xy) - 0.02) + 0.01 * sin(iTime * 10.0), vec3(1.0, 0.0, 0.0));\n\n    draw(length(uv - a) - 0.01, vec3(1.0, 1.0, 0.0));\n    draw(length(uv - b) - 0.01, vec3(1.0, 1.0, 0.0));\n    draw(length(uv - c) - 0.01, vec3(1.0, 1.0, 0.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}