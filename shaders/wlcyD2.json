{
    "Shader": {
        "info": {
            "date": "1609923164",
            "description": "Modification of https://www.shadertoy.com/view/lttyDN to attempt to emulate the filter described in https://www.tiktok.com/@666zomey/video/6914063925562625286?_d=secCgYIASAHKAESMgowfEyOqupr1soXFMkHHyXJleMxHURJi7L0oUNOQbx9BaIc%2Fg49YycPFJe%2BTjxH6lNfGgA%3D",
            "flags": 2,
            "hasliked": 0,
            "id": "wlcyD2",
            "likes": 12,
            "name": "neon lines attempt",
            "published": 3,
            "tags": [
                "video",
                "filter"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 800
        },
        "renderpass": [
            {
                "code": "const float EDGE_OR_CORNER_DETECT = 0.7; // 0 for corner, 1 for edge\n\nconst float WINDOW_FILTER_WIDTH = 2.0; // max 6.0\n\n#define WINDOW_SIZE 3 // needs to be int\n\n#define HALF_WINDOW_SIZE_MINUS_ONE 1.0 // needs to be float\n\nconst float SHOW_BACKGROUND = 0.25; // 0.0 for no background, 1.0 for all background\n\nconst vec2 webcam_resolution = vec2(320.0, 240.0);\nconst mat3 to_yuvish = mat3(0.299, -0.14713, 0.615,\n                          0.587, -0.28886, -0.51499,\n                          0.114, 0.436, -0.10001);\nconst mat3 from_yuvish = mat3(1.0, 1.0, 1.0,\n                              0.0, -0.39465, 2.03211,\n                              1.13983, -0.58060, 0.0);\nvec3 YUV(in vec2 fragCoord) {\n    \n    return to_yuvish * texture(iChannel0, fragCoord / iResolution.xy).rgb;\n}\n\nfloat Yval(in vec2 fragCoord) {\n    return YUV(fragCoord).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // mirror flip (sorry this is before variable declarations)\n    \n    fragCoord.x = iResolution.x - fragCoord.x;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    mat2 M = mat2(0.0);\n    \n    vec2 scale = iResolution.xy / min(iResolution.xy, webcam_resolution.xy);\n    \n    vec2 off = vec2(-1.0 * HALF_WINDOW_SIZE_MINUS_ONE);\n    for (int i = 0; i < WINDOW_SIZE; ++i) {\n        off.y = -1.0 * HALF_WINDOW_SIZE_MINUS_ONE;\n        off.x += 1.0;\n        for (int j = 0; j < WINDOW_SIZE; ++j) {\n            off.y += 1.0;\n            \n            float weight = smoothstep(WINDOW_FILTER_WIDTH, 0.0, length(off));\n    \n\t    \tfloat Ix = 0.5 * (Yval(fragCoord + scale * (off + vec2(1.0, 0.0))) - \n            \t              Yval(fragCoord + scale * (off - vec2(1.0, 0.0))));\n    \t\tfloat Iy = 0.5 * (Yval(fragCoord + scale * (off + vec2(0.0, 1.0))) - \n            \t              Yval(fragCoord + scale * (off - vec2(0.0, 1.0))));\n        \n         \tM += weight * mat2(Ix * Ix, Ix * Iy, Ix * Iy, Iy * Iy);\n        }\n    }\n\n//    mat2 M = mat2(Ix * Ix, Ix * Iy, Ix * Iy, Iy * Iy);\n    \n    float A = 1.0;\n    float B = -M[0][0] - M[1][1];\n    float C = M[0][0] * M[1][1] - M[0][1] * M[1][0];\n\n    float l1 = (-B + sqrt(B * B - 4.0 * A * C)) / (2.0 * A);\n    float l2 = (-B - sqrt(B * B - 4.0 * A * C)) / (2.0 * A);\n    \n    float min_eig = min(abs(l1), abs(l2));\n    float max_eig = max(abs(l1), abs(l2));\n//\tfloat min_eig = min(l1, l2);\n    \n    float eig_to_use = mix(min_eig, max_eig, EDGE_OR_CORNER_DETECT);\n\n    // Time varying pixel color\n    vec3 col = smoothstep(vec3(0.0), 0.1 * vec3(0.1, 0.2, 0.3), vec3(eig_to_use));\n    vec3 raw_color = texture(iChannel0, uv).rgb;\n    \n    float col_mag = (dot(vec3(1.0), raw_color) / 3.0);\n    col_mag = smoothstep(0.0, 1.0, col_mag);\n    col_mag = smoothstep(0.0, 1.0, col_mag);\n    raw_color = vec3(1.0) * col_mag;\n    \n    // col = vec3(1.0, 0.5, 0.0); uncomment to debug noise\n    \n    \n\n    if (length(col) > 0.01) {\n    float theta = 12.0 * simple_noise(0.5 * uv * iResolution.xy/iResolution.y, 2.0 * sin(0.5 * iTime));\n    float ct = cos(theta);\n    float st = sin(theta);\n    mat3 color_mat = from_yuvish *\n                     mat3(1.0, 0.0, 0.0,\n                          0.0, ct, st,\n                          0.0, -st, ct) *\n                     to_yuvish;\n    col = color_mat * col;\n    }\n    \n    // raw_color += theta;\n    // Output to screen\n    fragColor = vec4(mix(raw_color, col, 1.0 - SHOW_BACKGROUND),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float nonlinearity(in float x) {\n     x = mod(2.0 * x, 1.0);\n     return x + 0.1 * x * x * (1.1 + 0.01 * x);\n}\n\nfloat hash12(vec2 x)\n{\n    return mod(13.3 + 201.1 * nonlinearity(302.2 * x.x + 123.7 * x.y + 11.1), 1.0);\n}\n\n\nfloat noise_term(in vec2 x, in float scale_val) {\n    vec2 s = vec2(scale_val);\n    vec2 x00 = x - mod(x, s);\n    vec2 x01 = x + vec2(0.0, scale_val);\n    x01 = x01 - mod(x01, s);\n    vec2 x10 = x + vec2(scale_val, 0.0);\n    x10 = x10 - mod(x10, s);\n    vec2 x11 = x + s;\n    x11 = x11 - mod(x11, s);\n    \n    float v00 = hash12(x00);\n    float v01 = hash12(x01);\n    float v10 = hash12(x10);\n    float v11 = hash12(x11);\n    \n    vec2 uv = mod(x, s) / s;\n    \n    float yweight = smoothstep(0.0, 1.0, uv.y);\n    float v1 = mix(v10, v11, yweight);\n    float v0 = mix(v00, v01, yweight);\n    \n    float xweight = smoothstep(0.0, 1.0, uv.x);\n    \n    return mix(v0, v1, xweight);\n}\n\nfloat noise(in vec2 x, in float base_scale, in float space_decay, in float height_decay,\n           in float shift_by) {\n\tfloat h = 1.0;\n    float s = base_scale;\n\n    float summation = 0.0;\n    \n    for (int i = 0; i < 3; ++i) {\n    \tsummation = summation + h * noise_term(x + vec2(0.0, s * shift_by), s);\n        s *= space_decay;\n        h *= height_decay;\n    }\n    return summation;\n}\n\nfloat simple_noise(in vec2 uv, in float shift_by) {\n  return noise(uv * 10.0, 5.0, 0.75, 0.75, shift_by);\n}\n\nvec2 noise2(in vec2 uv, in float shift_by) {\n    return vec2(simple_noise(uv, shift_by),\n                simple_noise(uv + vec2(0.0, 101.0), shift_by));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}