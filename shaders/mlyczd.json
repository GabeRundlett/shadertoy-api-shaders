{
    "Shader": {
        "info": {
            "date": "1700553462",
            "description": "ethereal dusk",
            "flags": 0,
            "hasliked": 0,
            "id": "mlyczd",
            "likes": 1,
            "name": "ethereal dusk",
            "published": 3,
            "tags": [
                "noise",
                "hash"
            ],
            "usePreview": 0,
            "username": "jackjackdev",
            "viewed": 94
        },
        "renderpass": [
            {
                "code": "// ethereal dusk\n\n#define PI 3.14159265359\n\nfloat hash(float n) { return fract(sin(n) * 43758.5453); }\n\nfloat noise(vec2 x) {\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0;\n    return mix(mix(hash(n+0.0), hash(n+1.0),f.x),\n               mix(hash(n+57.0), hash(n+58.0),f.x),f.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    uv.x = abs(uv.x);  // Mirror effect\n\n    float time = iTime * 0.2;\n    float angle = time * 0.3;\n    uv =  uv;\n\n    // Kaleidoscopic effect\n    float r = length(uv) * 2.0;\n    float theta = atan(uv.y, uv.x);\n    theta = mod(theta, PI/6.0);\n\n    // Fractal calculations with color gradients\n    vec3 col = vec3(0.0);\n    float fractal = 0.0;\n    for (int i = 0; i < 20; i++) {\n        uv = abs(uv) / dot(uv, uv) - 0.9;\n        fractal -= exp(-abs(dot(uv, uv)));\n    }\n\n    // Color gradient based on fractal\n    col.r = 1.5  * cos(fractal + 0.0 + time);\n    col.g = 1.5  * cos(fractal + 2.0 * PI / 3.0 + time);\n    col.b = 2.9  * cos(fractal + 4.0 * PI / 3.0 + time);\n\n    // Adding sophisticated noise patterns\n    col += 1. * vec3(noise(uv * 10.0 + time));\n\n    // Convert to grayscale\n    float gray = dot(col, vec3(0.299, 0.587, 0.114));\n    vec3 grayscale = vec3(gray);\n\n    fragColor = vec4(grayscale, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}