{
    "Shader": {
        "info": {
            "date": "1710141961",
            "description": "use the mouse to look around",
            "flags": 0,
            "hasliked": 0,
            "id": "MXfXDl",
            "likes": 7,
            "name": "A little island",
            "published": 3,
            "tags": [
                "2d",
                "clouds",
                "island"
            ],
            "usePreview": 0,
            "username": "ianertson",
            "viewed": 125
        },
        "renderpass": [
            {
                "code": "#define R iResolution.xy\n#define T (iTime*0.25)\n#define BLUE vec3(0.29, 0.69, 0.989)\n#define BLUE2 vec3(0.02, 0.39, 0.993)\n#define GREEN vec3(0.05, 0.69, 0.15)\n#define GREEN2 vec3(0.2, 0.59, 0.1)\n#define ZERO min(iFrame, 0)\n\nfloat hash(vec2 ip, float seed) {\n    uvec2 p = floatBitsToUint(ip);\n    uint s = floatBitsToUint(seed);\n    uvec2 k = ~p; uvec2 j = uvec2(~s, s);\n    j ^= j << 2U; k ^= k >> 2U; p ^= p << 17U; p ^= p >> 13U;\n    p ^= p << 5U; p += k << 3U; p += j >> 3U;\n    p *= 5013U; p += j^k;\n    return float(\n      (p.x * p.y) + (p.x ^ p.y) + (p.y ^ p.x)\n    ) / float(0xFFFFFFFFU);\n}\nfloat noise(vec2 p, float s) {\n    vec2 id = floor(p);vec2 lv = fract(p);lv = lv*lv*(3.0-2.0*lv);\n    return mix(\n      mix(hash(id+vec2(0, 0), s), hash(id+vec2(1, 0), s), lv.x),\n      mix(hash(id+vec2(0, 1), s), hash(id+vec2(1, 1), s), lv.x),\n      lv.y\n    );\n}\nfloat noise(vec2 p, float s, float f, const in int oct) {\n    p += 10.12919823;float n = 0.0;float div = 0.0;float amp = 1.0;\n    for (int i = ZERO; i < oct; i++) {\n        n += amp*noise(p*f, s);div += amp;amp *= 0.5;f *= 2.0;\n    }\n    return n / div;\n}\n\nvec3 clouds(vec2 uv) {\n    vec3 col = BLUE;\n    col = col*col;\n    float cloud = 0.0;\n    float m = noise(2.0*(uv+vec2(cos(T), sin(T))), 939.29189, 0.5, 3);\n    float m1 = smoothstep(0.4, 0.7, m);\n    float mm = exp((m1*2.0-1.0)-2.*0.99)*0.25;\n    col += noise(uv*2., 3.21124, 3.0, 5);\n    col += noise((uv*2.)+vec2(sin(mm+T+exp(col.x-3.0)), cos(mm+T-exp(col.x-3.0))), 16.29391, 4.0, 5);\n    col += noise(uv-0.5*vec2(sin(mm-T), cos(mm-T)), 56.442, 1.5, 4);\n    col *= 0.3333333333333;\n    float m2 = noise((uv+vec2(cos(10.0132+T-mm+0.15*col.x), sin(100.4123+T-mm+0.15*col.x)))*0.5, 100.5533, 5.0, 6);\n    float mm2 = smoothstep(0.4, 0.7, m2);\n    col = mix(col, col*col, mm2);\n    return col;\n}\n\nvec3 island(vec2 p, inout float shape) {\n    vec3 col = vec3(0.0);\n    float n1 = noise(p, 1.2412, 2.2, 2);\n    shape = smoothstep(0.3, 0.25, length(p-0.09*(n1*2.0-1.0)));\n\n    float edge = smoothstep(1.0, 0.6, abs(shape*2.0-1.0));\n    col += shape*GREEN;\n    col /= (1.0+edge);\n    col = mix(col, vec3(0.7, 0.5, 0.1), edge);\n    shape += edge;\n    \n    float forest = noise(p*6., 21.2223, 3.5, 3);\n    forest = smoothstep(0.2, 0.7, forest);\n    col = mix(col, GREEN2*GREEN2*GREEN2, clamp((shape*forest)-2.0*edge, 0.0, 1.0));\n    float l = length(p);\n    p*= 16.0;\n    vec2 lv = fract(p);\n    vec2 id = floor(p);\n    float h = hash(id*10., 34.4213);\n    float h2 = hash(id*10., 5.5323);\n    float h3 = hash(id*2.0, 7.7555);\n    float rockShape = smoothstep(0.0, 1.0, noise(p*6., 55.51231));\n    float r = mix(0.1, 0.79, h);\n    float fe = r*0.25;\n    lv += (h3*2.0-1.0)*0.25;\n    vec3 rockCol = mix(vec3(0.24), vec3(0.56), h3);\n    float rock = smoothstep(0.0, 0.4, l)*shape*float(h2 > 0.6)*smoothstep(r+fe, r-fe, length((lv-0.15*(rockShape*2.0-1.0))*2.0-1.0));\n    float rockEdge = smoothstep(1.0, 0.0, abs(rock*2.0-1.0));\n    col = mix(col, rockCol*rockCol, 0.77*clamp(rock, 0.0, 1.0));\n    col = mix(col, col*col, 0.5*rockEdge);\n    return col;\n}\n\n\nvoid mainImage(out vec4 o, in vec2 fc)\n{\n    vec2 uv = (fc - 0.5 * R.xy) / R.y;\n    vec2 bv = uv;\n    vec4 mouse = vec4((iMouse.xy - 0.5 * R.xy) / R.y, iMouse.zw);\n    vec3 col = vec3(0.0);\n    if (mouse.z > 0.01) { uv.xy -= mouse.xy; }\n    \n    uv *= mix(0.9, 1.25, 0.5+0.5*sin(T));\n    uv += 0.15*vec2(sin(T), cos(T))*smoothstep(3.0, 6.0, T);\n    uv = mix(uv, uv*1.25, smoothstep(0.5, 1.0, length(bv)));\n    float cloudArea = smoothstep(0.5 - 0.25*noise(uv, 40.428128, 9.5, 6), 1.0, length(uv));\n    float waterArea = max(0.0, 1.0 - cloudArea);\n    \n    \n    float islandShape = 0.0;\n    vec3 isl = island(uv, islandShape);\n    float islandMask =  max(0.0, 1.0 - islandShape);\n    col += (BLUE2*waterArea) * islandMask;\n    col += isl*waterArea;\n    vec3 cl = clouds(uv)*cloudArea;\n    col += cl;\n    float cloudMask = max(0.0, 1.0 - cloudArea);\n    \n    float cloudEdge = abs(length(cl)*2.0-1.0);\n    float wv = noise(((uv*5.)+0.5*vec2(sin(T), cos(T)))*1.1, 34.023891);\n    float wm = noise((uv*6.)+vec2(cos(T), sin(T)), 2.23123, 1.1, 3);\n    wm = smoothstep(0.2, 0.9, wm);\n    float waves = sin(((uv.y*90.)+3.3*(wv*2.0-1.0)));\n    col += 0.5*wm*(exp(waves-1.0)*waterArea)*islandMask*islandMask*cloudMask*cloudMask;\n    col = mix(col, vec3(0.0), 0.25*smoothstep(1.0, 0.4, cloudEdge));\n    col = max(col, vec3(0.0));\n    col = pow(col, vec3(1.0 / 2.2));\n    o = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}