{
    "Shader": {
        "info": {
            "date": "1612850891",
            "description": "Interactive ray-circle intersection demo. Drag the point or arrow on the ray to move the origin and direction. Drag the point on the circle to change the radius.",
            "flags": 32,
            "hasliked": 0,
            "id": "wlcfW7",
            "likes": 7,
            "name": "Ray-Circle Intersection Demo",
            "published": 3,
            "tags": [
                "ray",
                "math",
                "intersection",
                "circle",
                "quadratic",
                "graphing"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 493
        },
        "renderpass": [
            {
                "code": "/*\nInteractive ray-circle intersection demo.\nDrag the point or arrow on the ray to move the origin and direction.\nDrag the point on the circle to change the radius.\nBE CAREFUL NOT TO GET THE CONTROL POINTS GLUED TOGETHER!!! :D\nLines 38-40 and 64-69 contain the intersection calculations.\n*/\n\n#define draw(d, c) color = mix(color, c, smoothstep(unit, 0.0, d))\n\nfloat sdIsosceles(in vec2 p, in float b, in float h) {\n    p.x = abs(p.x);\n    float q = clamp((b - p.x + p.y) / (b + h), 0.0, 1.0);\n    vec2 re = vec2(p.x - b + b * q, p.y - h * q);\n    vec2 be = vec2(p.x - b * min(p.x / b, 1.0), p.y);\n    return sqrt(min(dot(re, re), dot(be, be))) * sign(p.x + (p.y - h) * b / h * sign(p.y));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    float t = 0.25 * unit;\n    vec3 color = vec3(1.0);\n\n    // Control variables\n    vec2 ro = texelFetch(iChannel0, ivec2(0, 0), 0).xy;\n    vec2 rd = texelFetch(iChannel0, ivec2(1, 0), 0).xy - ro;\n    vec2 radiusPoint = texelFetch(iChannel0, ivec2(2, 0), 0).xy;\n    float r = length(radiusPoint);\n\n    // Grid\n    draw(abs(mod(uv.x + 0.125, 0.25) - 0.125) + t, vec3(0.0, 0.0, 1.0));\n    draw(abs(mod(uv.y + 0.125, 0.25) - 0.125) + t, vec3(0.0, 0.0, 1.0));\n    draw(abs(uv.x), vec3(1.0, 0.0, 0.0));\n    draw(abs(uv.y), vec3(1.0, 0.0, 0.0));\n\n    // Coefficients of intersection function\n    float a = dot(rd, rd);\n    float b = dot(2.0 * ro, rd);\n    float c = dot(ro, ro) - r * r;\n\n    // Intersection function\n    float f = a * uv.x * uv.x + b * uv.x + c;\n    float d = 2.0 * a * uv.x + b;\n    draw(abs(uv.y - f) / sqrt(1.0 + d * d) - t, vec3(0.8, 0.0, 0.0));\n\n    // Circle (and its control point)\n    draw(abs(length(uv) - r) - t, vec3(0.5, 0.0, 0.75));\n    draw(length(uv - radiusPoint) - 0.075, vec3(0.0));\n\n    // Ray origin and path\n    vec2 rdNorm = normalize(rd);\n    vec2 rdPerp = rdNorm.yx * vec2(-1.0, 1.0);\n\n    draw(length(uv - ro) - 0.075, vec3(0.0));\n    draw(abs(dot(uv - ro, rdPerp)) - t, vec3(0.0));\n\n    // Ray direction (arrow)\n    vec2 rp = uv - ro - rd;\n    rp = vec2(dot(rp, rdPerp), dot(rp, rdNorm));\n    draw(sdIsosceles(rp, 0.1, 0.15), vec3(0.0));\n\n    // Solutions to the intersection function\n    float discr = b * b - 4.0 * a * c;\n    if (discr > 0.0) {\n        float root = sqrt(discr);\n        float denom = 2.0 * a;\n        float t1 =  (root - b) / denom; // 1st root (intersection distance)\n        float t2 = -(root + b) / denom; // 2nd root (intersection distance)\n\n        // Draw them on the function\n        draw(length(uv - vec2(t1, 0.0)) - 0.075, vec3(1.0, 0.0, 0.0));\n        draw(length(uv - vec2(t2, 0.0)) - 0.075, vec3(0.0, 0.0, 1.0));\n\n        // Draw them on the ray\n        draw(length(uv - ro - rd * t1) - 0.075, vec3(1.0, 0.0, 0.0));\n        draw(length(uv - ro - rd * t2) - 0.075, vec3(0.0, 0.0, 1.0));\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define SELECTION_RADIUS 0.2\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 iFragCoord = ivec2(fragCoord);\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    if (iFrame == 0) {\n        if (iFragCoord == ivec2(0, 0)) {\n            fragColor.xy = vec2(-2.5, 1.0);\n        }\n\n        if (iFragCoord == ivec2(1, 0)) {\n            fragColor.xy = vec2(-1.25, 0.75);\n        }\n\n        if (iFragCoord == ivec2(2, 0)) {\n            fragColor.xy = vec2(0.0, -1.0);\n        }\n    }\n\n    if (iFrame > 0) {\n        if (iFragCoord.x < 3 && iFragCoord.y == 0) {\n            vec2 mouse = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n            fragColor = texelFetch(iChannel0, iFragCoord, 0);\n            if (length(mouse - fragColor.xy) < SELECTION_RADIUS) {\n                fragColor.xy = mouse;\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}