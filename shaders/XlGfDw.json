{
    "Shader": {
        "info": {
            "date": "1542675787",
            "description": "fake lighting shader mixed with smooth purple wave mapping :)",
            "flags": 0,
            "hasliked": 0,
            "id": "XlGfDw",
            "likes": 9,
            "name": "fake lighting (purple mix)",
            "published": 3,
            "tags": [
                "waves",
                "displacement",
                "fake",
                "light",
                "sphere",
                "march",
                "reflect",
                "parametrization"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 792
        },
        "renderpass": [
            {
                "code": "// simple sphere march (+ fake light / ref)\nmat2 rotate(float a)\n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n#define\tTAU 6.28318\n\n// IQ's patched sphere parametrization to squash texture on to a sphere.\n// Reference: https://iquilezles.org/articles/patchedsphere\n\nvec2 sphereToCube(in vec3 pointOnSphere)\n{\n   return vec2(pointOnSphere.x/pointOnSphere.z,pointOnSphere.y/pointOnSphere.z);\n}\n/* Check if x and y are between 0 and 1. If so, return v,\n * otherwise return zeros. This allows us to use a sum of\n * vectors to test what face of the cube we are on */ \nvec2 insideBounds(vec2 v)\n{\n    vec2 s = step(vec2(-1.,-1.), v) - step(vec2(1.,1.), v);\n    return s.x * s.y * v;\n}\n\nfloat GetWaveDisplacement(vec3 p)\n{\n    float time = iTime;\n\tfloat waveStrength = 0.1;\n\tfloat frequency = 4.0;\n\tfloat waveSpeed = 0.15;\n\tfloat rotSpeed = 0.1;\n\tfloat twist = 0.24;\n\tfloat falloffRange = 2.0;\t// the other values have been tweaked around this...\n\t\n\tfloat d = length(p);\n\tp.xz *= rotate(d*twist+(time*rotSpeed)*TAU);\n\tvec2 dv = p.xz*0.15;\n\td = length(dv);\n\td = clamp(d,0.0,falloffRange);\n\tfloat d2 = d-falloffRange;\n\tfloat t = fract(time*waveSpeed)*TAU;\n\tfloat s = sin(frequency*d*d+t);\n\tfloat k = s * waveStrength * d2*d2;\n\tk *= p.x*p.z*0.5;\n\t//k-= 0.4;\t\t\t\t\t// mix it up a little...\n\tk -= sin(fract(time*0.1)*TAU)*0.4*d2;\t\t\t// really mix it up... :)\n\tk = smoothstep(0.0,0.45,k*k);\n\treturn k;\n}\n\nfloat getSphereMappedTexture(in vec3 pointOnSphere)\n{\n    /* Test to determine which face we are drawing on.\n     * Opposing faces are taken care of by the absolute\n     * value, leaving us only three tests to perform.\n     */\n    vec2 st = (\n        insideBounds(sphereToCube(pointOnSphere)) +\n        insideBounds(sphereToCube(pointOnSphere.zyx)) +\n        insideBounds(sphereToCube(pointOnSphere.xzy)));\n    \n    st *= 12.0;\n    float k = GetWaveDisplacement(vec3(st.x,0.0,st.y))*0.5;\n    k = clamp(k,0.0,1.0);\n\treturn 1.0-k;\n    //return textureFunc(st);\n}\n\n\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdBumpedSphere(vec3 p)\n{\n\tfloat k = getSphereMappedTexture(p) * 0.25;\t\t// \n\tfloat d = sdSphere(p, 4.0);\n    return d+k;\n}\n\n\nfloat map(vec3 p)\n{\n    vec4 tt = vec4(iTime*0.03,iTime*0.07,iTime*0.5,iTime*0.75) * TAU;\n\tp.xz *= rotate(tt.x);\n    p.zy *= rotate(tt.y);\n    return sdBumpedSphere(p);\n}\n\nvec3 normal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ) );\n}\nvec3 render(vec3 ro, vec3 rd)\n{\n\t// march\t\n\tfloat tmin = 0.1;\n\tfloat tmax = 10.;\n\tvec3 p;\n\tfloat t = tmin;\n\tfor (int i = 0; i < 180; i++)\n\t{\n\t\tp = ro + t * rd;\n\t\tfloat d = map(p);\n\t\tt += d*0.5;\n\t\tif (t > tmax)\n\t\t\tbreak;\t\t\n\t}\n\t\n    // light\n\tif (t < tmax)\n\t{\n\t   \tvec3 lightDir = normalize(vec3(0.0, 1.0, -1.0));\n\t\tvec3 nor = normal(p);\n\t\t\n\t\tfloat dif = max(dot(nor, lightDir), 0.0);\n\t\tvec3 c = vec3(0.5) * dif;\n        \n        float tf = 0.02;\n\t\tc += vec3(0.35,0.02,0.58)*0.5 + reflect(vec3(p.x*tf, p.y*tf, 0.05), nor);\n\n\t\tvec3 ref = reflect(rd, nor);\n\t\tfloat spe = max(dot(ref, lightDir), 0.0);\n\t\tc += vec3(2.0) * pow(spe, 32.);\n\t\treturn c;\n\t}\n\t\n\treturn vec3(0.24,0.24,0.35);\n}\n\nmat3 camera(vec3 ro, vec3 ta, vec3 up)\n{\n\tvec3 nz = normalize(ta - ro);\n\tvec3 nx = cross(nz, normalize(up));\n\tvec3 ny = cross(nx, nz);\n\treturn mat3(nx, ny, nz);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 q = (2.0*fragCoord.xy / iResolution.xy)-1.0;\n\tvec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.xy;\n\tp.x *= iResolution.x / iResolution.y;\n\n\tvec3 ro = vec3(0.0, 0.0, 0.0);\n    float ang = radians(-90.0);\n    float d = 6.0;\n    ro.z = sin(ang)*d;\n    ro.x = cos(ang)*d;\n\tvec3 ta = vec3(0.0, 0.0, 0.0);\n\t\n\tvec3 rd = camera(ro, ta, vec3(0.0, 1.0, 0.0)) * normalize(vec3(p.xy, 1.0));\n\n    // render\n\tvec3 c = render(ro, rd);\n\n    // vignette\n    float rf = sqrt(dot(q, q)) * 0.35;\n    float rf2_1 = rf * rf + 1.0;\n    float e = 1.0 / (rf2_1 * rf2_1);    \n    c*=e;    \n\n\tfragColor = vec4(c, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}