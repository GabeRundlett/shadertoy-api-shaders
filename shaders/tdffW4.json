{
    "Shader": {
        "info": {
            "date": "1588242133",
            "description": "A simple example, how to translate scene by mouse coordinates, by using matrix mutliplication. It mainly highlights, that matrix constructor takes vectors column major. Click/drag to change camera/scene position.",
            "flags": 0,
            "hasliked": 0,
            "id": "tdffW4",
            "likes": 1,
            "name": "Translate by mouse & matrix",
            "published": 3,
            "tags": [
                "mouse",
                "order",
                "translate",
                "major",
                "mat4",
                "rowmajor",
                "columnmajor"
            ],
            "usePreview": 0,
            "username": "forestgril",
            "viewed": 379
        },
        "renderpass": [
            {
                "code": "mat4 MakeTranslationMatrix3D(const in vec3 Offset)\n{ \n    return mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0,0.0), vec4(Offset.x, Offset.y, 0.0, 1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord)/iResolution.xy ;\n\n    vec3 translationVector = vec3(-iMouse.x/iResolution.x, -iMouse.y/iResolution.y, 0.0);\n    mat4 translateByMousePos = MakeTranslationMatrix3D(translationVector);\n   \n    vec4 uv4 = vec4(uv.x ,uv.y, 0,1);\n    \n    vec3 col = 0.5 + 0.5*cos(32.0*(translateByMousePos*uv4).xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}