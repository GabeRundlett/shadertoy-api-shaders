{
    "Shader": {
        "info": {
            "date": "1673305481",
            "description": "segment",
            "flags": 0,
            "hasliked": 0,
            "id": "dlSGDD",
            "likes": 5,
            "name": "circular wave 2 ",
            "published": 3,
            "tags": [
                "circle",
                "segment"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 189
        },
        "renderpass": [
            {
                "code": "float f_n_rand(float n){\n    n = n + 2.213*n;\n    n = n * n;\n    n = sin(11235.*n+n*3.13)*1.3425;\n    return fract(n);\n}\nvec2 f_o_rotd(\n    vec2 o, \n    float n_rot_nor\n){\n    float n_radians = 6.283158 * n_rot_nor;\n    float n_cos = cos(n_radians);\n    \n    float n_sin = sin(n_radians);\n\n    return vec2(\n        n_cos*o.x - n_sin*o.y,\n        n_sin*o.x + n_cos*o.y\n    );\n}\nfloat f_n_dist_segment(\n    vec2 o, \n    float n_ang_nor, \n    float n_radius_start, \n    float n_radius_end\n){\n    float n_tau = 6.28318530;\n    //float n_ang_nor_current = (atan(o.x, o.y))/n_tau));\n    float n_ang_nor_current = fract(((atan(o.y, o.x)+(n_tau/2.))/n_tau)+0.5);\n    float n_an = min(n_ang_nor, n_ang_nor_current);\n    n_an = n_ang_nor_current;\n    float n_len = length(o);\n    float n_radius = 0.5;\n    n_radius = max(n_len, n_radius_start);\n    n_radius = min(n_radius, n_radius_end);\n    vec2 o_p = vec2(\n        cos(n_an*n_tau)*n_radius,\n        sin(n_an*n_tau)*n_radius\n    );\n    vec2 o_pstart = vec2(\n        cos(0.*n_tau)*n_radius,\n        sin(0.*n_tau)*n_radius\n    );\n    vec2 o_pend = vec2(\n        cos(n_ang_nor*n_tau)*n_radius,\n        sin(n_ang_nor*n_tau)*n_radius\n    );\n    float n_len_start = length(o_pstart-o);\n    float n_len_end = length(o_pend-o);\n    \n    \n    float n_dist = length(o_p-o);\n    if(n_ang_nor_current > n_ang_nor){\n        return min(n_len_start, n_len_end);\n    }\n    return n_dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float n_ratio_1to_iresx = 1./ iResolution.x;\n    //needed for anti aliasing ?\n    vec2 o_trn_fc_nor = fragCoord.xy / iResolution.xy;\n    vec2 o_trn_mo_nor = iMouse.xy / iResolution.xy;\n    \n    float n_ratio_x_to_y = iResolution.x / iResolution.y; \n    \n    vec2 o_trn_fc_nor_offset = (o_trn_fc_nor - vec2(0.5))*vec2(n_ratio_x_to_y, 1.);\n    vec2 o_trn_mo_nor_offset = (o_trn_mo_nor - vec2(0.5))*vec2(n_ratio_x_to_y, 1.);\n    o_trn_fc_nor_offset*=5.5;\n\n    float n_tau = 6.2831;\n    float n_dist_prod = 1.;\n    float n_dist_prod2 = 1.;\n    float n_dist_min = 1.;\n    float n_it_nor_dmin = 0.;\n\n    \n    float n_its = 20.;\n    float n_dist_center = length(o_trn_fc_nor_offset);\n    \n    float n_one_it_nor = (1./n_its);\n    float n_it = floor(n_dist_center/n_one_it_nor);\n    float n_it_nor = n_it / n_its;\n        \n      \n    float n_radiu_start = n_it_nor+n_one_it_nor*0.5;\n    float n_radiu_end = n_radiu_start;\n    float n_ang_nor = n_it_nor*0.2;//f_n_rand(n_it);\n    \n    float n_dist_segment1 = f_n_dist_segment(\n        //f_o_rotd(o_trn_fc_nor_offset, sin(n_it_nor*n_tau*0.1+iTime*0.2)), \n        f_o_rotd(o_trn_fc_nor_offset, sin(iTime+n_it_nor)), \n        n_ang_nor,//n_ang_nor, //n_ang_nor\n        n_radiu_start,//n_radiu_start,\n        n_radiu_end//n_radiu_end\n    );\n    n_dist_segment1 = pow(n_dist_segment1, 1./3.);\n    float nss = 1./n_its; \n    n_dist_segment1 = smoothstep(nss, nss*7.+n_ratio_1to_iresx*20., n_dist_segment1);\n    fragColor = vec4(vec3(1.-n_dist_segment1), 1.);\n    \n    //fragColor = vec4(f_n_rand(o_trn_fc_nor_offset.x+o_trn_fc_nor_offset.y*o_trn_fc_nor_offset.x));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}