{
    "Shader": {
        "info": {
            "date": "1527807365",
            "description": "Mouse moves the camera\nPhantom mode from aiekick",
            "flags": 0,
            "hasliked": 0,
            "id": "MsyBzW",
            "likes": 8,
            "name": "Medusa",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "kifs",
                "phantom"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 1161
        },
        "renderpass": [
            {
                "code": "#define tim iTime * 0.2\n#define PI acos( -1.0 )\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec3 twiX( vec3 p, float f )\n{\n\n    vec2 mou = iMouse.xy / iResolution.xy;\n    \n    float a = mou.x * p.x * f;\n    \n    p.yz = cos( a ) * p.yz + sin( a ) * vec2( -p.z, p.y );\n    \n    return p;\n\n}\n\nvec3 twiY( vec3 p, float f )\n{\n\n    vec2 mou = iMouse.xy / iResolution.xy;\n    \n    float a = mou.y * p.y * f;\n    \n    p.xz = cos( a ) * p.xz + sin( a ) * vec2( -p.z, p.x );\n    \n    return p;\n\n}\n\nmat2 rot( float a )\n{\n\n    return mat2( cos( a ), -sin( a ),\n                 sin( a ),  cos( a )\n               );\n\n}\n\nfloat map( vec3 p )\n{\n\n    mat3 rota = mat3( 1.0 );\n    //p = twiY( p, 2.0 );\n    //p = twiX( p, 3.0 );\n    float pla = p.y + 1.0;\n    //p.xz = mod( p.xz, 5.0 ) - 5.0 * 0.5;\n    for( int i = 0; i < 16; ++i )\n    {\n    \n        p = abs( p * rota + vec3( 0.1, 0.0, 0.0 ) );\n        p.xy = p.yx;\n        //p.xz = p.zx;\n        //p.zy = p.yz;\n        p.xy *= rot( sin( tim ) );\n        p.xz *= rot( 2.0 );\n        p.zy *= rot( 1.0 );\n        \n    }\n    \n    float sph = length( p ) - 1.0;\n    \n    return smin( sph, pla, 1.0 + sin( iTime ) );\n\n}\n\n\nvec3 norm( vec3 p )\n{\n\n    vec2 e = vec2( 0.001, 0.0 );\n    return normalize( vec3( map( p + e.xyy ) - map( p - e.xyy ),\n                            map( p + e.yxy ) - map( p - e.yxy ),\n                            map( p + e.yyx ) - map( p - e.yyx )\n                          )\n                    );\n\n}\n\nfloat ray( vec3 ro, vec3 rd, out float d, out float accum )\n{\n\n    accum = 0.0;\n\n    float t = 0.;\n    d = 0.001;\n    vec3 p = vec3( 0.0 );\n    for(int i=0;i<2000;++i)\n    {      \n        p = ro + rd * t;\n\t\tif(d<0.0001||t>80.) break;\n        d = map( p );\n        \n        d = max(abs(d), 0.001);  // Phantom Mode\n        \n        t += d * 0.5;\n        \n       \taccum += 0.009; // Phantom Mode\n        \n   \t}    \n    \n    return t;\n\n}\n\nvec3 shad( vec3 ro, vec3 rd )\n{\n\n    float d = 0.0;\n    float accum = 0.0;\n    float t = ray( ro, rd, d, accum );\n    \n    vec3 col = vec3(0) + accum  * (0.2-exp(1.0-pow(t, 3.0))); // Phantom Mode  \n    \n    return col;\n\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n    \n    vec2 mou = iMouse.xy / iResolution.xy;\n    \n    if( mou.x == 0.0 ) mou = vec2( 0.5, 0.0 );\n    \n    vec3 ro = 3.6 * vec3( sin( mou.x * 2.0 * PI ), mou.y, cos( -mou.x * 2.0 * PI ) );\n    \n    //vec3 ro = vec3( 0.0, 0.0, 4.0 );\n    vec3 ww = normalize( vec3( 0.0 ) - ro );\n    vec3 uu = normalize( cross( vec3( 0.0, 1.0, 0.0 ), ww ) );\n    vec3 vv = normalize( cross( ww, uu ) );\n    vec3 rd = normalize( uv.x * uu + uv.y * vv + 1.5 * ww );\n    \n    float accum = 0.0;\n    float d = 0.0;\n    float t = ray( ro, rd, d, accum );\n    \n    vec3 p = ro + rd * t;\n    vec3 n = norm( p );\n\n    vec3 col = shad( ro, rd ); // Phantom Mode  \n\tvec3 tex = texture( iChannel0, refract( rd, n, 1.0 / 1.325 ) ).rgb;\n    //fragColor = vec4( col, 0.0 ) + vec4( tex, 0.0 );\n    fragColor = vec4( col * vec3( 0.0, 1.0, 2.0 ), 0.0 );\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}