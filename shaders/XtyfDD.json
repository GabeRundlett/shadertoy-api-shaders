{
    "Shader": {
        "info": {
            "date": "1542497883",
            "description": "Trying out inverse square law. \nThis time around, using dithering was pretty much required to avoid banding (because maths and such)!\nMore to come!\nLMB scrubs through time.",
            "flags": 0,
            "hasliked": 0,
            "id": "XtyfDD",
            "likes": 2,
            "name": "Additive Dance",
            "published": 3,
            "tags": [
                "motionblur",
                "dither",
                "rgb",
                "lights",
                "invsqrt"
            ],
            "usePreview": 0,
            "username": "Blokatt",
            "viewed": 839
        },
        "renderpass": [
            {
                "code": "/*\nAdditive Dance 1.0\nBy Blokatt (@blokatt | blokatt.net)\n30/11/18\n*/\n\n#define MOTION_BLUR_LENGTH 0.15\n#define MOTION_BLUR_SAMPLES 20.0\nconst float PI = 3.141592653589793238462643;\nconst float HPI = PI * 0.5;\nconst float MOTION_BLUR_FALOFF = 1.0 - (1.0 / (1. + MOTION_BLUR_SAMPLES * 0.3));\nconst float MOTION_BLUR_LENGTH_OFFSET = MOTION_BLUR_LENGTH / MOTION_BLUR_SAMPLES;\n\nvec4 dither(vec4 col, vec2 frag){    \n    float nCol = 64.;\n    float val = texture(iChannel0, mod(frag / 8., 1.)).r / nCol;\n\treturn vec4(((col.rgb + val)), 1.0);\n}\n\nvec4 light(in vec2 pos, in float radius, in vec3 col, in vec3 offsets, in vec2 fragCoord){\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv.xy -= .5;\n    vec2 uvNorm = uv;\n    uv.x *= iResolution.x / iResolution.y;\n    float dist = distance(pos, uv);\n    float inv = inversesqrt(dist);\n\tfloat val = ((inversesqrt(dist / radius) - .5) * 1.25 + .5) ;    \n    return vec4(((inv - offsets.r) + .5) * col.r,\n                        ((inv - offsets.g) + .5) * col.g,\n                        ((inv - offsets.b) + .5) * col.b, 1.) * val;\n}\n\nvec4 image(in vec2 uv, in float t, in vec2 fragCoord){\n    float rad = .005 + (1. + sin(t * .25)) * .02;\n    float off = pow(1.1, 1.1 + rad * 80.) - 1.5;\n\treturn texture(iChannel1, vec2(uv.x + cos(t * .25), uv.y) + .5) * (\n        \t\tlight(vec2(sin(t * 2.) * off, cos(t * 2.5) * off), rad, vec3(1., 0., .5), vec3(.75, 1., .25), fragCoord) +\n    \t\t\tlight(vec2(sin(t * 2. + 2.09) * off, cos(t * 2.25 + 2.09) * off), rad, vec3(.5, 1., 0.), vec3(.75, 1., .25), fragCoord) +\n        \t\tlight(vec2(sin(t * 2. + 4.18) * off, cos(t * 2.75 + 4.18) * off), rad, vec3(0., .5, 1.), vec3(.75, 1., .25), fragCoord)\n        \t\t);\n}\n\n\nvec4 trail(in vec2 uv, in float t, in vec2 fragCoord){\n\tvec4 col = image(uv, t, fragCoord);\n    float factor = .5;\n    for (float i = 1.; i < MOTION_BLUR_SAMPLES; i += 1.){\n    \tcol = mix(col, image(uv, t - i * MOTION_BLUR_LENGTH_OFFSET, fragCoord), 1. * factor);\n        factor *= MOTION_BLUR_FALOFF;\n    }\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime * 3.;\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv.xy -= .5;\n    vec2 uvNorm = uv;\n    uvNorm.x *= iResolution.x / iResolution.y;\n    \n   \tfragColor = dither(trail(vec2(asin(uvNorm.x), uvNorm.y), t + iMouse.x / iResolution.x, fragCoord), fragCoord);\t\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}