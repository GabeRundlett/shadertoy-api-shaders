{
    "Shader": {
        "info": {
            "date": "1542551210",
            "description": "Simple example for beginners of what can be done with cosines and few lines of code.\nMinimalistic 2D infinite world.\nThis is the readable version.\nCheck the small but ugly code version here : https://www.shadertoy.com/view/MlyBWD",
            "flags": 0,
            "hasliked": 0,
            "id": "XlyfDW",
            "likes": 9,
            "name": "Cosine realm",
            "published": 3,
            "tags": [
                "2d",
                "tutorial",
                "teaching",
                "minimalistic"
            ],
            "usePreview": 0,
            "username": "plancien",
            "viewed": 569
        },
        "renderpass": [
            {
                "code": "float rand(vec2 coords){\n    return fract(cos(dot(coords, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n\nvec2 rotate(vec2 v, float angle) {\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\treturn mat2(c, -s, s, c) * v;\n}\n\n\nvec2 applyCamera(vec2 pixCoords) {\n    vec2 cameraCenter = vec2(\n        3. * cos(iTime * 0.1) + 0.05 * iTime,\n        3. * sin(iTime * 0.2)\n    );\n\tfloat zoom  = (iResolution.x / 10.) * (1. + 0.3 * cos(iTime));\n    float angle = 0.1 * iTime;\n    \n    vec2 coords = (pixCoords / zoom) - cameraCenter;\n    return rotate(coords, angle);\n}\n\n\nvec3 backgroundColor (vec2 coords) {\n\tfloat light = 0.7 + 0.3 * cos(2. * coords.y + 5. * iTime);\n    return vec3(\n        1.,\n        0.5 + 0.5 * light,\n        light * (0.6 + 0.4 * cos(25. * coords.x))\n    );    \n}\n\n\nvec3 insideCircleColor (float distanceToCenter, float random) {\n    return vec3(\n        0.5 + 0.5 * random,\n        cos(20. * distanceToCenter),\n        0.5 + 0.5 * cos(random*99.)\n    );\n}\n\n\nfloat radius (float random) {\n    return (0.3 + 0.2 * random) * (0.8 + 0.3 * cos(6. * random * iTime));\n}\n\n\nfloat relativeDistanceToCenter (vec2 coords, float random) {\n    vec2  circleCenter     = vec2(0.5);\n    float distanceToCenter = distance(mod(coords, 1.), circleCenter);\n    return distanceToCenter / radius(random);\n}\n\n\n\nvoid mainImage (out vec4 color, in vec2 pixCoords) {\n\n    vec2 coords = applyCamera(pixCoords);\n    \n    float random = rand(floor(coords));\n  \n    float d = relativeDistanceToCenter(coords, random);\n    \n    \n    if (d < 1.) {\n        color = vec4(insideCircleColor(d, random), 1.);\n    } else {\n        color = vec4(backgroundColor(coords), 1.);\n    }\n    \n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}