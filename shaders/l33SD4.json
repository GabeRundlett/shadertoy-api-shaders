{
    "Shader": {
        "info": {
            "date": "1719017281",
            "description": "I'm creating this template to figure out compositing. It is listed public & API so it can be ported to SHADERed.",
            "flags": 32,
            "hasliked": 0,
            "id": "l33SD4",
            "likes": 1,
            "name": "Compositing Test",
            "published": 3,
            "tags": [
                "test",
                "compositing",
                "buffers"
            ],
            "usePreview": 0,
            "username": "multiphonic",
            "viewed": 59
        },
        "renderpass": [
            {
                "code": "// Image: Compositor\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Sample the checkerboard background from Buffer A\n    vec4 checkerboard = texture(iChannel0, uv);\n\n    // Sample the red triangle from Buffer B\n    vec4 redTriangle = texture(iChannel1, uv);\n\n    // Combine the checkerboard and red triangle\n    // If the red triangle is present, it will overwrite the checkerboard\n    vec3 finalColor = mix(checkerboard.rgb, redTriangle.rgb, redTriangle.a);\n\n    fragColor = vec4(finalColor, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Buffer A: Checkerboard\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float checkSize = 0.1; // Size of each square in the checkerboard\n    vec2 checkPos = fract(uv / checkSize);\n    bool isWhite = mod(floor(fragCoord.x / (iResolution.x * checkSize)) + floor(fragCoord.y / (iResolution.y * checkSize)), 2.0) == 0.0;\n    vec3 color = isWhite ? vec3(1.0) : vec3(0.0);\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Buffer B: Red Triangle\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y = 0.0 + uv.y; // Flip the y-axis\n    vec3 color = vec3(0.0);\n    float alpha = 0.0;\n\n    // Define the triangle vertices\n    vec2 p0 = vec2(0.5, 0.85); // top center\n    vec2 p1 = vec2(0.2, 0.15); // bottom left\n    vec2 p2 = vec2(0.8, 0.15); // bottom right\n\n    // Calculate edge vectors\n    vec2 edge1 = p1 - p0;\n    vec2 edge2 = p2 - p1;\n    vec2 edge3 = p0 - p2;\n\n    // Calculate vectors from vertices to current point\n    vec2 vp0 = uv - p0;\n    vec2 vp1 = uv - p1;\n    vec2 vp2 = uv - p2;\n\n    // Check if point is inside the triangle using cross products\n    float c1 = edge1.x * vp0.y - edge1.y * vp0.x;\n    float c2 = edge2.x * vp1.y - edge2.y * vp1.x;\n    float c3 = edge3.x * vp2.y - edge3.y * vp2.x;\n\n    if ((c1 >= 0.0 && c2 >= 0.0 && c3 >= 0.0) || (c1 <= 0.0 && c2 <= 0.0 && c3 <= 0.0)) {\n        color = vec3(1.0, 0.0, 0.0); // Red color\n        alpha = 1.0; // Opaque within the triangle\n    }\n\n    fragColor = vec4(color, alpha);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}