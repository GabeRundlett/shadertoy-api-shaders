{
    "Shader": {
        "info": {
            "date": "1678899738",
            "description": "analytical integration of 1/((o.x+d.x*x)^2+(o.y+d.y*x)^2+(o.z+d.z*x)^2) where o is ray origin, and d is ray direction.",
            "flags": 0,
            "hasliked": 0,
            "id": "mdVGRc",
            "likes": 29,
            "name": "Star Box",
            "published": 3,
            "tags": [
                "light",
                "space",
                "fog",
                "analytical",
                "integral",
                "dencity"
            ],
            "usePreview": 0,
            "username": "me_123",
            "viewed": 586
        },
        "renderpass": [
            {
                "code": "//#define EXACT\n#define COUNT 100u\n#define BRIGHTNESS 5.0\n\nconst int it = 10;\nconst float eps = 0.001;\nvec2 boxx( in vec3 ro, in vec3 rd, vec3 boxSize, out vec3 outNormal ) \n{\n    vec3 m = 1.0/rd; // can precompute if traversing a set of aligned boxes\n    vec3 n = m*ro;   // can precompute if traversing a set of aligned boxes\n    vec3 k = abs(m)*boxSize;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    if( tN>tF || tF<0.0) return vec2(1000.); // no intersection\n    outNormal = -sign(rd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n    return vec2(tN, tF);\n}\nvec3 getRay(in vec3 cameraDir, in vec2 uv) { //get camear ray direction\n    vec3 cameraPlaneU = vec3(normalize(vec2(cameraDir.y, -cameraDir.x)), 0);\n    vec3 cameraPlaneV = cross(cameraPlaneU, cameraDir) ;\n\treturn normalize(cameraDir + uv.x * cameraPlaneU + uv.y * cameraPlaneV);\n}\nvec3 hash33(uvec3 q)\n{\n\tq *= uvec3(1597334673U, 3812015801U, 2798796415U);\n\tq = (q.x ^ q.y ^ q.z)*uvec3(1597334673U, 3812015801U, 2798796415U);\n\treturn vec3(q) * (1.0 / float(0xffffffffU));\n}\n\nvec3 hash31(uint q)\n{\n\tuvec3 n = q * uvec3(1597334673U, 3812015801U, 2798796415U);\n\tn = (n.x ^ n.y ^ n.z) * uvec3(1597334673U, 3812015801U, 2798796415U);\n\treturn vec3(n) * (1.0 / float(0xffffffffU));\n}\nstruct hit {\n    vec3 p;\n    vec3 n;\n    float d;\n    int i;\n};\nvec2 opt(in vec2 x) {\n    #ifdef EXACT\n    return atan(x);\n    #endif\n    return 1.65*x/(abs(x)+1.);\n}\nvec3 fog(in vec3 o, in vec3 d, in vec2 x, in vec3 color) {\n    // integral of 1/((o.x+d.x*x)^2+(o.y+d.y*x)^2+(o.z+d.z*x)^2)\n    // computed by https://www.integral-calculator.com/\n    //dd can be precomputed\n    float dd = dot(d, d);\n    float d0 = dot(o, d);\n    float q = 1./(sqrt(0.00001+dd*(o.z*o.z-d0*d0/dd+dot(o.xy, o.xy))));\n    vec2 k = opt((dd*x+d0)*q);\n    return 1.-exp(-0.05*color*(k.y-k.x)*q);\n}\nvec3 getColor(in vec3 ro, in vec3 rd) {\n    vec3 t1;\n    float s = ro.z/-rd.z;\n    if (s < 0.0) {s = 1000.;};\n    vec2 b = boxx(ro, rd, vec3(1.5), t1);\n    vec3 c = vec3(0);\n    if (b.x < 1000.) {\n        float dd = dot(rd, rd);\n        float ddi = 1./dd;\n        for (uint i = 0u; i < COUNT; i += 1u) {\n            vec3 p = (hash31(i)-0.5)*3.0;\n            vec3 o = ro-p;\n            vec3 color = 0.1/hash31(i+63400u);\n            float d0 = dot(o, rd);\n            float q = 1./(sqrt(0.000003+dd*(o.z*o.z-d0*d0*ddi+dot(o.xy, o.xy))));\n            vec2 k = opt((dd*b+d0)*q);\n            c += BRIGHTNESS*0.001*color*(k.y-k.x)*q;\n        }\n    }\n    return 1.-exp(-c);//ro+rd*bound;//ro+rd*bound;//*(-dot(t1, rd)+0.5)*0.5;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-iResolution.xy*0.5)/iResolution.y;//((fragCoord+hash33(vec3(fragCoord.xy, iTime)).xy) - 0.5 * iResolution.xy) / iResolution.y;\n    \n    //camera\n    vec2 m = vec2(iTime*0.8, sin(iTime*0.25)*0.6+3.1415*0.5);\n    if (iMouse.z > 0.0) m = ((iMouse.xy)/iResolution.xy) * vec2(6.28, 3.14159263);\n        \n    vec3 ro = vec3(sin(m.y) * cos(-m.x), sin(m.y) * sin(-m.x), cos(m.y))*5.0;//*max(pow(2., 5.-iTime*2.0), 5.0);\n    vec3 rd = getRay(-normalize(ro), uv);\n    vec3 color = getColor(ro, rd)+hash33(uvec3(fragCoord.xy, iTime))/128.;\n\n    //super sample\n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}