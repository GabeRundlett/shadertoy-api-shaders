{
    "Shader": {
        "info": {
            "date": "1690853957",
            "description": "All year long I'm going to just focus on truchet tiles and the likes! \n\nmore a test / playing with textures / green screen / and motion - finally getting time to play again!",
            "flags": 32,
            "hasliked": 0,
            "id": "mdBcWc",
            "likes": 16,
            "name": "Year of Truchets #049",
            "published": 3,
            "tags": [
                "raymarching",
                "animation",
                "truchet",
                "tiles"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 247
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Year of Truchets #049\n    07/31/2023  @byt3_m3chanic\n    Truchet Core \\M/->.<-\\M/ 2023 \n\n*/\n\n#define R           iResolution\n#define M           iMouse\n#define T           iTime\n\n#define HI          1.57079632679\n#define PI          3.14159265358\n#define PI2         6.28318530718\n\n#define MIN_DIST    1e-4\n#define MAX_DIST    55.\n\nmat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nfloat hash21(vec2 p){ return fract(sin(dot(p,vec2(26.34,45.32)))*4324.23); }\n\n//@iq sdfs & extrude\nfloat box(vec3 p, vec3 b){vec3 q=abs(p)-b;return length(max(q,0.))+min(max(q.x,max(q.y,q.z)),0.);}\nfloat box(vec2 p, vec2 a){vec2 q=abs(p)-a;return length(max(q,0.))+min(max(q.x,q.y),0.);}\nfloat cap(vec3 p, float h, float r){p.y-=clamp(p.y,0.,h);return length(p)-r;}\nfloat opx(in float sdf, in float pz, in float h){vec2 w=vec2(sdf,abs(pz)-h);return min(max(w.x,w.y),0.)+length(max(w,0.));}\n\nvec3 hit,hp;\nvec2 sid,gid;\nfloat scale = .5,time = 0.,speed = 0.,gir,sir;\nconst float tc = .15;\nconst float amt = 2.;\n\nmat2 r90;\n\nvec2 map (vec3 pos) {\n    vec2 res=vec2(1e5,0.);\n    pos.xz-=T*.2;\n    \n    vec2 id= floor(pos.xz*scale), q = fract(pos.xz*scale)-.5; \n    float ck = mod(id.x+id.y,2.)*2.-1.;\n\n    float rnd = hash21(id);\n    if(rnd>.5) q.y=-q.y;\n\n    float dir = (ck>.5^^rnd<.5)? 1.:-1.;\n    gir = dir; \n    \n    float hs=fract(rnd*32.83);\n    vec3 qp= vec3(q.x,pos.y*scale,q.y);\n    vec2 p = length(q.xy-.5) < length(q.xy+.5) ? q.xy-.5 : q.yx+.5;\n\n    // main pattern\n    float d = abs(length(p)-.5)-tc;\n    d= opx(d,qp.y-.1,.1);\n    \n    // arcs/angles for path & movements\n    vec2 ar = q-sign(q.x+q.y)*.5;\n    float an = atan(ar.x, ar.y);\n    float da = length(ar);\n\n    // truchet uv coords\n    float mv = amt*ck*an/HI+speed;\n    vec2 q2 = vec2(fract(mv),(da-(.5-tc))/(2.*tc)*2.)-.5;\n\n    // id for objects on truchet\n    vec2 tid = mod(vec2(floor(mv),0),amt);\n    vec3 mq = vec3(q2.x*1.75,pos.y/scale,q2.y-.5);\n    if(d<res.x) {\n        res = vec2(d/scale,1.);\n        hp = mq;\n        gid = tid;\n    }\n\n    float f = pos.y;\n    if(f<res.x) {\n        res = vec2(f,2.);\n        hp = pos;\n    }\n    \n    return res;\n}\n//Tetrahedron technique\n//https://iquilezles.org/articles/normalsSDF\nvec3 normal(vec3 p, float t) {\n    float e = MIN_DIST*t;\n    vec2 h = vec2(1.,-1.)*.5773;\n    return normalize( h.xyy*map( p + h.xyy*e).x + \n\t\t\t\t\t  h.yyx*map( p + h.yyx*e).x + \n\t\t\t\t\t  h.yxy*map( p + h.yxy*e).x + \n\t\t\t\t\t  h.xxx*map( p + h.xxx*e).x );\n}\n\nvec2 marcher(vec3 ro, vec3 rd) {\n    float d = 0., m = 0.;\n    for(int i=0;i<180;i++){\n        vec2 ray = map(ro + rd * d);\n        if(ray.x<MIN_DIST*d||d>MAX_DIST) break;\n        d += i<100?ray.x*.25:ray.x*.75;\n        m  = ray.y;\n    }\n    return vec2(d,m);\n}\n\n//@iq of hsv2rgb\nvec3 hsv2rgb( in vec3 c ) {\n    vec3 rgb = clamp( abs(mod(c.x*6.+vec3(0,4,2),6.)-3.)-1., 0., 1.0 );\n    return c.z * mix( vec3(1), rgb, c.y);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 F){\n    speed = T*.3;\n    \n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    vec3 ro = vec3(0,0,4);\n    vec3 rd = normalize(vec3(uv,-1));\n\n    float x = M.xy==vec2(0) || M.z <0. ? .0 : (M.y/R.y * .5-.25)*PI;\n    float y = M.xy==vec2(0) || M.z <0. ? .0 : (M.x/R.x * 1.-.5)*PI;\n\n    float sw = .3*sin(T*.06);\n    mat2 rx = rot(-.88-x), ry = rot(.78+sw-y);\n    \n    ro.zy *= rx; ro.xz *= ry; \n    rd.zy *= rx; rd.xz *= ry;\n\n    vec3 C = vec3(0);\n    \n    vec2 ray = marcher(ro,rd);\n    float d=ray.x, m=ray.y;\n    hit = hp;\n    sid = gid;\n    sir = gir;\n    \n    vec3 p = ro + rd * d;\n    if(d<MAX_DIST)\n    {\n             p = ro + rd * d;\n        vec3 n = normal(p,d);\n        vec3 lpos =vec3(-6.,12.,12.);\n        vec3 l = normalize(lpos-p);\n        \n        float diff = clamp(dot(n,l),.09,.99);\n        \n        float shdw = 1.;\n        for( float t=.01; t < 20.; ) {\n            float h = map(p + l*t).x;\n            if( h<MIN_DIST ) { shdw = 0.; break; }\n            shdw = min(shdw, 12.*h/t);\n            t += h*.25;\n            if( shdw<MIN_DIST ) break;\n        }\n        diff = mix(diff,diff*shdw,.65);\n        \n        vec3 h = vec3(.5);\n\n        if(m==1.) {\n            float px=4./R.x;\n            vec3 f = hit*vec3(1.7,1.85,1.);\n            vec2 d = vec2(length(f.xy-vec2(0,.735))-.65,length(f.xz)-.65);\n            vec3 t = fract(f)-.5;\n            if(sir>0.) t.x=-t.x;\n            \n            vec3 clr = texture(iChannel0,hit.xy-vec2(.5,.75)).rgb;\n            \n            int face;\n            vec3 aN = abs(n);\n            ivec3 idF = ivec3(n.x<-.25? 0 : 5, n.y<-.25? 1 : 4, n.z<-.25? 2 : 3);\n            face = aN.x>.5? idF.x : aN.y>.5? idF.y : idF.z;\n            vec2 hpp = hit.xz*vec2(1,sir);\n            if(face==3||face==5||face==0) {\n                hpp = hit.xy;\n            }\n           \n            vec3 clx = texture(iChannel1,hpp).rgb;\n            vec3 clb = sid.x < 1.? texture(iChannel2,(hpp*.8)-vec2(.5)).rgb:texture(iChannel3,(hpp*.8)-vec2(.5)).rgb;\n            h = mix(clx*.5,clx,(t.x*t.y*t.z>.0)?0.:1.);\n            h = mix(h,clr,smoothstep(px,-px,d.x));\n            h = mix(h,vec3(.1),smoothstep(px,-px,abs(d.x)-.025));\n            \n            h = mix(h,clb,smoothstep(px,-px,d.y));\n            h = mix(h,vec3(.1),smoothstep(px,-px,abs(d.y)-.025));\n            \n        }\n        \n        if(m==2.) {\n            vec3 clr = texture(iChannel3,hit.xz*vec2(.5,-.5)).rgb;\n            vec3 clx = texture(iChannel1,hit.xz).rgb;\n            vec2 f = fract(hit.xz*(scale*.5))-.5;\n            h=clx;\n            if(f.x*f.y>0.) h=clr;\n        }\n        \n        if(m==4.) h = hsv2rgb(vec3((sid.x*.025),1.,.5));\n        \n        C = (diff*h);\n    } \n    C = mix(C,vec3(.01),1.-exp(-.00175*d*d*d*d));\n    C = pow(max(C,0.),vec3(.4545));\n    fragColor = vec4(C,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    @byt3_m3chanic\n    \n*/\n\n#define R           iResolution\n#define T           iTime\n#define M           iMouse\n#define PI         3.14159265359\n#define PI2        6.28318530718\nconst float scale = 10.;\n\nmat2 rot(float a) {return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat hash21(vec2 a) {return fract(sin(dot(a,vec2(27.609,57.583)))*43758.5453);}\nfloat box(vec2 p, vec2 a) {vec2 q=abs(p)-a;return length(max(q,0.))+min(max(q.x,q.y),0.);}\n\n//@iq of hsv2rgb\nvec3 hsv2rgb( in vec3 c ) {\n    vec3 rgb = clamp( abs(mod(c.x*6.+vec3(0,4,2),6.)-3.)-1., 0., 1.0 );\n    return c.z * mix( vec3(1), rgb, c.y);\n}\n\nvoid mainImage( out vec4 O, in vec2 F ) {\n    mat2 r45 = rot(.7853981634);\n    vec3 C = vec3(.1);\n    vec2 uv = (2.*F-R.xy)/max(R.x,R.y);\n\n    // upscale\n    float scale = 2.545;\n\n    // warp and turn\n    uv *= rot(-T*.075);\n    uv = vec2(log(length(uv)), atan(uv.y, uv.x))*scale;\n    uv.x -= T*.25;\n   \n    float px = fwidth(uv.x); \n    \n    vec2 id = floor(uv), q = fract(uv)-.5;\n    float hs = hash21(id.xy);\n    float ck =mod(id.x+id.y,2.)*2.-1.;\n\n    if(hs>.5)  q.xy *= rot(1.5707);\n    \n    hs = fract(hs*575.913);\n    \n    float pf = .353, wd = .085+.065*sin(uv.x*.26);\n    wd += .085+.065*sin(uv.x*.13);\n    \n    vec2 q2 = q;\n    q*=r45;\n    \n    vec2 p2 = vec2(length(q.x+pf),length(q.x-pf));\n    float pq = p2.x<p2.y? q.x+pf : q.x-pf;\n    vec2 p = q;\n\n    float d = length(pq);\n    d=abs(d)-wd;\n\n    if(hs>.85) d = min(length(q2.x),length(q2.y))-(wd*1.4);\n    float d2 = abs(max(abs(q2.x),abs(q2.y))-.5)-.01;\n\n    C = mix(C,vec3(.25),smoothstep(px,-px,d2));\n    \n    vec3 clr = hsv2rgb(vec3((uv.x*.015),1.,.5));\n\n    C = mix(C,C*.45,smoothstep(.075+px,-px,d-.015));\n    C = mix(C,clr,smoothstep(px,-px,d));\n    \n    //https://www.shadertoy.com/view/XsfGzn\n    vec3 fg = texture(iChannel0, F.xy/R.xy).rgb;\n    vec3 bg = C;\n    float maxrb = max( fg.r, fg.b );\n    float k = clamp( (fg.g-maxrb)*5.0, 0.0, 1.0 );\n    C = mix(fg, bg, k);\n    \n    \n    O = vec4(C,1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    @byt3_m3chanic\n    \n*/\n\n#define R           iResolution\n#define T           iTime\n#define M           iMouse\n#define PI         3.14159265359\n#define PI2        6.28318530718\nfloat scale = 6.;\n\nmat2 rot(float a) {return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat hash21(vec2 a) {return fract(sin(dot(a,vec2(27.609,57.583)))*43758.5453);}\nfloat box(vec2 p, vec2 a) {vec2 q=abs(p)-a;return length(max(q,0.))+min(max(q.x,q.y),0.);}\n\nvoid mainImage( out vec4 O, in vec2 F ) {\n\n    vec2 uv = (2.*F-R.xy)/max(R.x,R.y);\n    vec3 C = vec3(.005);\n    if(R.x>1400.) scale*=2.;\n    uv *=rot(.1*sin(T*.05));\n    uv *= scale;   \n    uv.x+=T;\n    float px = fwidth(uv.x); \n\n    vec4 uv1 = vec4(floor(uv),fract(uv)-.5);\n    vec4 uv2 = vec4(floor(uv-.5),fract(uv-.5)-.5);\n    vec2 id = uv1.xy, q = uv1.zw;\n    vec2 id2 = uv2.xy,q2 = uv2.zw;\n    \n    float ck = mod(id.x+id.y,2.)*2.-1.;\n    float ck2 = mod(id2.x+id2.y,2.)*2.-1.;\n    float hs = hash21(id);\n    \n    float sfm = .5;\n    float wd = .065+.055*sin(uv.x*sfm);\n    wd += .065+.055*cos(uv.y*sfm);\n    \n    if(ck>.5) q *= rot(1.5707);\n    hs = fract(hs*575.913);\n    \n    vec2 sp = vec2(length(q-.5),length(q+.5));\n    vec2 p = sp.x<sp.y? q-.5 : q+.5;\n\n    float d = abs(length(p)-.5)-wd;\n    float g = length(abs(q)-.5)-(.425-wd);\n    float c = min(length(q.x)-wd,length(q.y)-wd);\n\n    if (hs>.85) d = c;\n    hs = fract(hs*415.372);\n\n    float b = length(q2)-.2;\n    float d2 = abs(max(abs(q.x),abs(q.y))-.5)-.01;\n    if(ck2>.5) d2=max(d2,-b);\n    \n    C = mix(C,vec3(.05),smoothstep(px,-px,d2));\n    \n    if(ck2>.5) C = mix(C,vec3(0,.2,.5),smoothstep(px,-px,abs(b)-.05));\n    C = mix(C,vec3(.45,0,0),smoothstep(px,-px,d));\n\n    //https://www.shadertoy.com/view/XsfGzn\n    vec3 fg = texture(iChannel0, F.xy/R.xy).rgb;\n    vec3 bg = C;\n    float maxrb = max( fg.r, fg.b );\n    float k = clamp( (fg.g-maxrb)*5.0, 0.0, 1.0 );\n    C = mix(fg, bg, k);\n\n    O = vec4(C,1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}