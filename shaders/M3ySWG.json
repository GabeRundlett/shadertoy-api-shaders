{
    "Shader": {
        "info": {
            "date": "1720422124",
            "description": "SDF",
            "flags": 0,
            "hasliked": 0,
            "id": "M3ySWG",
            "likes": 1,
            "name": "SDF_curiosity",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "CuriosityWang",
            "viewed": 85
        },
        "renderpass": [
            {
                "code": "float sdCircle( in vec2 p, in float r ) \n{\n    return length(p)-r;\n}\n\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\n\n// signed distance to a n-star polygon, with external angle w\nfloat sdStar(in vec2 p, in float r, in float n, in float w)\n{\n    // these 5 lines can be precomputed for a given shape\n    //float m = n*(1.0-w) + w*2.0;\n    float m = n + w*(2.0-n);\n    \n    float an = 3.1415927/n;\n    float en = 3.1415927/m;\n    vec2  racs = r*vec2(cos(an),sin(an));\n    vec2   ecs =   vec2(cos(en),sin(en)); // ecs=vec2(0,1) and simplify, for regular polygon,\n\n    // symmetry (optional)\n    p.x = abs(p.x);\n    \n    // reduce to first sector\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n\n    // line sdf\n    p -= racs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, racs.y/ecs.y);\n    return length(p)*sign(p.x);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n\tfloat d = sdStar(p, 1.0, 7.0, 0.7);\n\t//float d = sdCircle(p,1.0);\n    \n    float stepD = step(0.0, d);\n    \n    vec3 color1 = vec3(0.7, 0.45, 0.67);\n    vec3 color2 = vec3(1., 1., 1.);\n    \n    vec3 color = mix(color1, color2, stepD);\n    \n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}