{
    "Shader": {
        "info": {
            "date": "1560284815",
            "description": "flooding",
            "flags": 0,
            "hasliked": 0,
            "id": "3lj3zK",
            "likes": 7,
            "name": "Floods",
            "published": 3,
            "tags": [
                "raymarching",
                "terrain"
            ],
            "usePreview": 0,
            "username": "dagbrynildsentholander",
            "viewed": 576
        },
        "renderpass": [
            {
                "code": "float maxDist = 75.;\nvec3 camRot = vec3(0, 0, 0);\nvec3 lightDir = vec3(.8,1.,-.1);\nvec3 lightColor = vec3(.65,.55,.5)*1.5;\n\nfloat noise(vec2 p)\n{\n    return fract(sin(p.x*16.+p.y*6463.)*3732.);\n}\n\nfloat smoothNoise(vec2 p)\n{\n    vec2 id = floor(p*10.);\n    vec2 ld = fract(p*10.);\n    \n    ld = ld*ld*(3.-2.*ld);\n    \n    float bl = noise(id);\n    float br = noise(id+vec2(1., 0.));\n    float b = mix(bl, br, ld.x);\n    \n    float tl = noise(id+vec2(0., 1.));\n    float tr = noise(id+vec2(1., 1.));\n    float t = mix(tl, tr, ld.x);\n    \n    float bt = mix(b, t, ld.y);\n    \n    return bt;\n}\n\nfloat getWaterHeight(vec3 p)\n{\n    return  4.+ iTime/20.+smoothNoise(p.xz/3.+iTime/7.)/200.;\n}\n\nvec2 map(vec3 p)\n{\n    float waterHeight = getWaterHeight(p);\n    float a = p.y*0.3;\n    p+=vec3(sin(a), 0, cos(a))*4.;\n    float mat = 0.;\n    float terrainHeight=25.;\n    float base = smoothNoise(p.xz/640.)*terrainHeight;\n    base += 0.5*pow(smoothNoise(p.xz/320.), 3.)*terrainHeight;\n    base += 0.125*pow(smoothNoise(p.xz/80.), 3.)*terrainHeight;\n    base += 0.02*pow(smoothNoise(p.xz/20.), 2.)*terrainHeight;\n    //p-=vec3(sin(a), 0, cos(a))*7.;\n    base += 0.005*pow(smoothNoise(p.xz/7.), 2.)*terrainHeight;\n    if(p.y <= waterHeight)\n    {\n        mat = 1.;\n        return vec2(waterHeight-p.y, mat);\n    }\n    return vec2(base-p.y, mat);\n}\n\n\nvec2 ray(vec3 ro, vec3 rd, float minD, float maxD, float stepSize) // x channel - distance to hit, y channel - material\n{\n    float t = minD;\n    float lastVal; \n    \n    while(t < maxD)\n    {\n        vec2 mapSample = map(ro+rd*t);\n        if(mapSample.x > 0.)\n            return vec2(t-(abs(mapSample.x)/(abs(mapSample.x)+abs(lastVal)))*stepSize, mapSample.y);\n        t+=stepSize;\n        stepSize*=1.01;\n        lastVal = mapSample.x;\n    }\n    \n    return vec2(maxD, 0);\n}\n\nvec3 normal(vec3 p)\n{\n\tfloat delta = 0.01;\n    vec3 x = vec3 (delta, 0.00, 0.00);\n\tvec3 y = vec3 (0.00, delta, 0.00);\n\tvec3 z = vec3 (0.00, 0.00, delta);\n    \n    float val = map(p).x;\n    vec3 grad = vec3(val - map(p - x).x, val - map(p - y).x, val - map(p - z).x);\n    return -normalize(grad);\n}\n\n\nvec3 lighting(vec3 n, vec3 ambientLight)\n{\n    return  max(pow(dot(normalize(lightDir), n), 5.), 0.0) * lightColor * 1.25 +ambientLight;\n}\n\nvec3 doFog(vec3 rgb, float dist, float maxD, vec3 rd, vec3 p)\n{\n    lightDir = normalize(lightDir);\n    vec3 fogColor = vec3(0.12, 0.11, 0.13);\n    fogColor += 2.*vec3(0.14, 0.12, 0.14)*pow(1.-abs(rd.y), 6.);\n    fogColor += .6*lightColor*pow(clamp(dot(rd, lightDir), 0., 1.), 3.);\n    if(dist == maxD)\n    {\n    \tfogColor += .3*lightColor*smoothNoise(vec2(p.x, p.z)*10./rd.y/7000.)*smoothNoise(vec2(p.x, p.z)*10./rd.y/3000.)*pow(abs(rd.y), .5);\n        fogColor += .3*lightColor*pow(clamp(dot(rd, lightDir), 0., 1.), 50.); \n    }\n    return mix(rgb, fogColor, pow(dist/maxD, 1.));\n}\n\nvec3 terrainColor(vec3 p)\n{\n    vec3 n = normal(p);\n    float xAlpha = pow(abs(n.x), 2.);\n    float yAlpha = pow(abs(n.y), 7.);\n    float zAlpha = pow(abs(n.z), 2.);\n    vec3 terrainColor = vec3(0);\n    terrainColor += texture(iChannel0, vec2(p.z, p.y)/7.).xyz*xAlpha;\n    terrainColor += .5*texture(iChannel1, vec2(p.x, p.z)/10.).xyz*yAlpha*vec3(.5,.63,.5);\n    terrainColor += .5*texture(iChannel1, vec2(p.x, p.z)/3.).xyz*yAlpha*vec3(.5,.63,.5);\n    terrainColor += texture(iChannel0, vec2(p.x, p.y)/7.).xyz*zAlpha;\n    return terrainColor*lighting(n, vec3(0.01));\n}\n    \nvec3 waterColor(vec3 p, vec3 rd)\n{\n    vec3 reflectedRd = reflect(rd, normal(p));\n    vec2 rayResult = ray(p, reflectedRd, 1., maxDist, 0.5);\n    vec3 reflection = doFog(terrainColor(p+reflectedRd*rayResult.x), rayResult.x, maxDist, reflectedRd, p);\n    return mix(vec3(.22, .2, .18), reflection, clamp(0.5-pow(rd.y, 2.), 0., 1.));\n}\n\nfloat screenRain(vec2 p, vec3 rd)\n{\n    p.y/=50.;\n\n    return smoothNoise(p+vec2(1., mod(iTime, iResolution.y)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord -  iResolution.xy*.5)/iResolution.y;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    float lastXInput = 0.;\n    float lastYInput = 0.;\n    float deltaXInput = iMouse.x-lastXInput;\n    float deltaYInput = iMouse.y-lastYInput;\n    camRot+=vec3(deltaYInput/100., deltaXInput/100., 0);\n    vec3 camP = vec3(0, 6.+getWaterHeight(vec3(1)), iTime/4.);\n    vec3 camDir = normalize(vec3(sin(camRot.y), sin(camRot.x), cos(camRot.y)));\n    vec3 camRight = cross(camDir, vec3(0, 1., 0));\n    vec3 rd = normalize(camDir + camRight*1.*uv.x + vec3(0,1.,0)*1.*uv.y);\n    vec2 rayResult = ray(camP, rd, .3, maxDist, 0.1);\n    vec3 p = camP+rd*rayResult.x;\n\tvec3 col = vec3(0);\n    if(rayResult.y == 0.)\n        col = doFog(terrainColor(p), rayResult.x, maxDist, rd, p);\n    if(rayResult.y == 1.)\n        col = doFog(waterColor(p, rd), rayResult.x, maxDist, rd, p);\n    \n    col += .02*lightColor*pow(screenRain(uv*30.-camRot.y*15., rd), 25.);\n    col += .07*lightColor*pow(screenRain(uv*20.-camRot.y*10., rd), 25.);\n    col += .15*lightColor*pow(screenRain(uv*10.-camRot.y*10., rd), 25.);\n    col += .15*lightColor*pow(screenRain(uv*5.-camRot.y*10., rd), 25.);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    lastXInput = iMouse.x;\n    lastYInput = iMouse.y;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}