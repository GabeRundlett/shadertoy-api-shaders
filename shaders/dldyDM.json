{
    "Shader": {
        "info": {
            "date": "1699304637",
            "description": "Toying with math :)",
            "flags": 0,
            "hasliked": 0,
            "id": "dldyDM",
            "likes": 3,
            "name": "Wrap a function around a circle",
            "published": 3,
            "tags": [
                "2d",
                "math"
            ],
            "usePreview": 0,
            "username": "bigmazi",
            "viewed": 203
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159265359\n#define pi2 1.57079632679\n\n#define FUNC sin\n\nfloat lerp(float a, float b, float cf)\n{\n    return a + (b - a) * cf;\n}\n\nfloat remap(float x, float a, float b, float A, float B)\n{\n    float cf = (x - a) / (b - a);\n    return lerp(A, B, cf);\n}\n\nfloat shapecf(float r, float thresh, float tolerance, float from, float to, float x, float y, float direction)\n{    \n    float ang = atan(y, x) + mod(iTime, pi * 2.0) * direction;\n    \n    float linex = remap(ang, -pi2, pi2, from, to);\n    float liney = FUNC(linex);\n    \n    float R = remap(liney, -thresh, thresh, 0.0, 2.0 * r);    \n    float k = y / x;\n    \n    float X = sqrt(R * R / (1.0 + k * k)) * sign(x);\n    float Y = k * X;\n    \n    float len = length(vec2(x, y) - vec2(X, Y));    \n    float cf = 1.0 - len / tolerance;\n    \n    return clamp(cf, 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv *= 2.0;\n    uv -= 1.0;\n    uv *= pi * 2.2;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float a = sin(iTime);\n    float b = abs(a) + 0.1;\n    float c = sign(a);\n\n    float f = shapecf(5.0, b * 40.0, 0.2, -pi * 12.0, pi * 12.0, uv.x, uv.y, 1.0 * c);\n    f = smoothstep(0.3, 0.8, f);\n    \n    float g = shapecf(2.5, b * 40.0, 0.2, -pi * 12.0, pi * 12.0, uv.x, uv.y, -1.0 * c);\n    g = smoothstep(0.3, 0.8, g);\n    \n    vec3 clr = vec3(0.9, 0.8, 0.2) * max(f, g);    \n    fragColor = vec4(clr, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}