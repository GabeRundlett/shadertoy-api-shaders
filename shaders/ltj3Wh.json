{
    "Shader": {
        "info": {
            "date": "1428656483",
            "description": "Fractal Experiment 8",
            "flags": 0,
            "hasliked": 0,
            "id": "ltj3Wh",
            "likes": 3,
            "name": "Fractal Experiment 8 bis",
            "published": 3,
            "tags": [
                "fractal",
                "experiment",
                "8"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 506
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define Iterations 150\n\n// https://www.shadertoy.com/view/XdsXWN\nvec2 dMul( vec2 a, vec2 b )\n{\n\tvec2 c;\n\tc.y = a.y*b.y; // smallest part\n\tfloat l = a.x*b.x; // largest part\n\tfloat r = a.x*b.y + a.y*b.x; // part in-between.\n\tc.x = l;\n\tc.y += r;\n\treturn c;\n}\n\n\n\nfloat getJulia(vec2 coord, int iter, float time, float seuilInf, float seuilSup)\n{ \n    vec2 uvt = coord;\n    float lX = -0.78;//-0.74;\n    float lY = time*0.115;//0.11\n    float julia = 0., x = 0., y = 0., j=0.;\n\tfor(int i=0; i<Iterations; i++) \n    {\n        if ( i == iter ) break;\n        x = (uvt.x * uvt.x - uvt.y * uvt.y) + lX;\n        y = (uvt.y * uvt.x + uvt.x * uvt.y) + lY;\n        uvt.x = x;\n        uvt.y = y;\n       \tj = mix(julia, length(uvt)/dot(x,y), 1.);\n        if ( j >= seuilInf && j <= seuilSup ) julia = j;\n    }\n    return julia;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // vars / time\n    float speed = 0.5;\n    float t0 = iTime*speed;\n    float t1 = sin(t0);\n    float t2 = 0.5*t1+0.5;\n    float t3 = 0.5*sin(iTime*0.1)+0.5;\n    float zoom = iTime*pow(2., iTime);\n    \n    // uv\n    float ratio = iResolution.x/iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.xy*2.-1.;uv.x*=ratio;uv/=zoom;\n    vec2 mo = iMouse.xy / iResolution.xy*2.-1.;mo.x*=ratio;mo/=zoom;\n\n    // map\n    vec2 uvt = uv;\n    \n    // julia\n    float ratioIter = 1.;\n    float ratioTime = t1;\n    if ( iMouse.z > 0. ) \n    {\n        ratioIter = iMouse.y/iResolution.y;\n        ratioTime = iMouse.x/iResolution.x*2.-1.;\n    }\n    \n    int nIter = int(floor(float(Iterations)*ratioIter));\n    float julia = getJulia(uvt+vec2(0.3,0.1), nIter, 1., 0.2, 8.5); // default => 0.2 / 6.5\n    \n    // color\n    float d0 = julia;\n    float d = smoothstep(d0-45.,d0+4.,1.);\n    float r = mix(1./d, d, 1.);\n    float g = mix(1./d, d, 3.);\n    float b = mix(1./d, d, 5.);\n    vec3 c = vec3(r,g,b);\n    \n    fragColor.rgb = c;\n}",
                "description": "",
                "inputs": [],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}