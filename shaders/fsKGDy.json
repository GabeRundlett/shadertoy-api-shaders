{
    "Shader": {
        "info": {
            "date": "1632119758",
            "description": "Waves crashing",
            "flags": 32,
            "hasliked": 0,
            "id": "fsKGDy",
            "likes": 15,
            "name": "Tsunami",
            "published": 3,
            "tags": [
                "waves",
                "water",
                "forces"
            ],
            "usePreview": 0,
            "username": "emh",
            "viewed": 744
        },
        "renderpass": [
            {
                "code": "// Fork of \"Organic Snirklets\" by emh. https://shadertoy.com/view/fdKGWy\n// 2021-09-20 05:37:27\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 color = texture(iChannel0, uv);\n    //color.r = mod(color.r, 1.0);\n    color.r = 0.2 * color.b;\n    \n    vec3 light = vec3(1.0, 1.0, -1.0);\n    light = normalize(light);\n    float c = 0.15 + 0.5 * dot(color.yzw, light);\n    color.rgb = vec3(c) * vec3(0.000,0.616,1.000) * 5.0;\n    \n    //color.g = 0.5 * color.b;\n    \n    // Output to screen\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define M_PI 3.1415926\n\nconst int k = 5;\nconst int mindensity = 4;\nconst int maxdensity = 4;\nconst int startspeed = 1;\nconst float anglespeed = 0.015;\n\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //if (iTime >= 4.0 && mod(iTime, 16.0) < 0.1) {\n    //    fragColor = vec4(0.0);\n    //    return;\n    //}\n\n    int x = int(fragCoord.x);\n    int y = int(fragCoord.y);\n    \n    vec2 center = iResolution.xy * 0.5;\n    vec2 centerRight = center;\n    centerRight.x *= 2.0;\n    centerRight.y *= 1.25;\n    \n    if (distance(fragCoord, centerRight) < 1.0) {\n        //fragColor = vec4(0.01, 0.0, 1.0, 0.0);\n        fragColor = vec4(sin(iTime * 1.0), 0.0, 0.0, 0.0);\n        return;\n    }\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 color = texture(iChannel0, uv);\n    fragColor = color;       \n    \n    color = vec4(0.0);\n    bool done = false;\n    //bool empty = true;\n    int nonEmpty = 0;\n    for (int dx = -k; dx <= k; dx++) {\n        for (int dy = -k; dy <= k; dy++) {\n            vec2 fc = fragCoord + vec2(dx, dy);\n            vec2 uv = fc / iResolution.xy;\n            vec4 previous = texture(iChannel0, uv);\n            float rawAngle = previous.x;\n            float angle = rawAngle * 2.0 * M_PI;\n            //empty = empty && (!done || angle == 0.0);\n            nonEmpty += angle != 0.0 ? 1 : 0;\n            if (!done && angle != 0.0) {\n                for (int speed = startspeed; speed <= k; speed++) {\n                    int x2 = int(floor(float(fc.x) + float(speed) * cos(angle)));\n                    int y2 = int(floor(float(fc.y) + float(speed) * sin(angle)));\n                    if (x == x2 && y == y2) {\n                        float a = rawAngle + anglespeed * (rand(sin(iTime) * fc) - 0.0);\n                        a = a <= 0.01 ? rand(fc) : a;\n                        //color += vec4(a, a * 0.125, a * a * 0.5, 1.0);\n                        \n                        // color += vec4(0.0, 0.35, 0.75, 1.0);\n                        color += vec4(0.0, cos(angle), 1.0, sin(angle));\n                        fragColor.x = a;\n                    }\n                }\n                // done = true;\n            }\n        }\n    }\n    int density = 1000; // int(mod(iTime, float(maxdensity - mindensity))) + mindensity; \n    if (nonEmpty <= density) {\n        float d2 = sqrt(0.5) - distance(fragCoord / iResolution.xy, center / iResolution.xy);\n        float d = 5.0;\n        //d *= float(nonEmpty) / 50.0;\n        fragColor.yzw = d * color.yzw / float(max(1, nonEmpty));\n    }\n    //fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}