{
    "Shader": {
        "info": {
            "date": "1562794584",
            "description": "Mandelbrot set colored by orbital line trap method. Click and drag the mouse anywhere on the canvas to adjust the line.",
            "flags": 0,
            "hasliked": 0,
            "id": "wllXD8",
            "likes": 4,
            "name": "interactive orbital line trap",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "interactive"
            ],
            "usePreview": 0,
            "username": "zzggbb",
            "viewed": 466
        },
        "renderpass": [
            {
                "code": "#define N_ITERS 1000\n#define PI 3.14159265\n\nvec3 color(float t) {\n\tvec3 a = vec3(0.5);\n    vec3 b = vec3(0.5);\n    vec3 c = vec3(1.0);\n    vec3 d = vec3(0.0, 0.1, 0.2);\n    return a + b * cos(2.0*PI*(c*t + d));\n}\n\nvec2 cmul(vec2 c1, vec2 c2) {\n    return vec2(c1.x*c2.x - c1.y*c2.y, c1.x*c2.y + c1.y*c2.x);\n}\n\n// shortest vector from point 'p' to line L(t)=a + t*n\nvec2 line_point_distance(vec2 p, vec2 a, vec2 n) {\n\tvec2 p2a = a - p;\n    return p2a - dot(p2a,n)*n;\n}\n\nfloat shade(vec2 c, vec2 point) {\n\tvec2 z = vec2(0.0, 0.0);\n    float dist = 1.0e20;\n    for (int i=0; i<N_ITERS; i++) {\n    \t// quadratic mandlebrot set: z(n+1) = z(n)^2 + c\n        z = cmul(z,z) + c;\n        if (length(z) > 500.0) break;\n        vec2 r = line_point_distance(z, vec2(0.0), point);\n        dist = min(dist, r.x*r.x + r.y*r.y);\n    }\n\treturn sqrt(dist);\n}\n\nfloat linscale(float x, float x1, float x2, float y1, float y2) {\n\treturn (y2-y1)/(x2-x1) * (x-x1) + y1;\n}\n\nvec2 screen_coord(vec2 xy, vec2 dim) {\n    return (xy - 0.5*dim) / min(dim.x, dim.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = 2.0*screen_coord(fragCoord.xy, iResolution.xy);\n    vec2 mouse = 2.0*screen_coord(iMouse.xy, iResolution.xy);\n\tmouse = normalize(mouse);\n    float line_d = length(line_point_distance(uv, vec2(0.0), mouse));\n    float line = (line_d < 0.01 ? 1.0 : 0.0);\n    vec3 fractal_col = color(shade(uv, mouse));\n    vec3 col = mix(fractal_col, vec3(1.0), line);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}