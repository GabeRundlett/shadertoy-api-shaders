{
    "Shader": {
        "info": {
            "date": "1657530094",
            "description": "easy adaptive sampling:\nJust add this Common to postprocess any shader. Example here: antialiasing ( amount _NÂ² ) + sRGB \nAttention: will do it on all buffers.\n\nMouse.x : ref separator \n",
            "flags": 16,
            "hasliked": 0,
            "id": "NdyfRz",
            "likes": 26,
            "name": "postprocess existing shaders",
            "published": 3,
            "tags": [
                "antialiasing",
                "sampling",
                "tuto",
                "easyadaptivesampling"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 898
        },
        "renderpass": [
            {
                "code": "// base shader: https://www.shadertoy.com/results?query=hexamaz\n\nvoid mainImage(out vec4 O, vec2 U) {\n    vec2  R =  iResolution.xy;\n    float s = iMouse.z>0. ? iMouse.x : R.x/2.;\n    if ( U.x<s) _N=1;    // just for this demo: left = no antialiasing\n\n    vec3 V =  ( ( (U) -9.*iTime ) * mat2(cos(.1 + vec4(0,11,33,0))) )\n             * mat3x2( 12, -7, 0, 14,    12, 7 ) / 1e2; \n    O = vec4( fract(  V[ 1 + int( 2.* sin( 1e5* length( ceil( V.xy )))) ]) < .1 );\n\n    if ( abs(U.x-s) < 1. ) O = vec4(1,0,0,1); // red separator\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "int _N = 3;\n#define mainImage mainImage0(out vec4 O, vec2 U);        \\\nvoid mainImage(out vec4 O, vec2 U) {                     \\\n    vec4 o; O = vec4(0);                                 \\\n    for (int k=0; k < _N*_N; k++ )                       \\\n      { mainImage0(o,U+vec2(k%_N-_N/2,k/_N-_N/2)/float(_N)); O += o; }  \\\n    O /= float(_N*_N);                                   \\\n    O = pow( O, vec4(1./2.2) );        /* to sRGB */     \\\n} \\\nvoid mainImage0",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}