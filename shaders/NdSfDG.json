{
    "Shader": {
        "info": {
            "date": "1646928554",
            "description": "click to draw,\nshift + click to remove !\n\na way to slowly \"correct\" a distance field,\nnot perfect, but might be useful for some situations.",
            "flags": 48,
            "hasliked": 0,
            "id": "NdSfDG",
            "likes": 19,
            "name": "resilient distance field",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "sympou",
            "viewed": 377
        },
        "renderpass": [
            {
                "code": "//a lot of ressources found on iq's blog : https://iquilezles.org/www/index.htm\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    float SDFres = 1./iResolution.y;\n\n\tvec2 p = (2.0*fragCoord-iResolution.xy)*SDFres;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)*SDFres;\n\n\tfloat d = texelFetch( iChannel0, ivec2(fragCoord), 0 ).r;\n    \n\t// coloring, iq style\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n    col *= 1.0 - exp(-3.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    if( iMouse.z>0.5 ) {\n        d =  texelFetch( iChannel0, ivec2(iMouse.xy), 0 ).r;\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col,1.);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define repair true\n\nfloat sdCircle( in vec2 p ) {\n    return length(p) - 0.1;\n}\n\nfloat Cell( in ivec2 p ) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = clamp(p,ivec2(0),r-1);\n    return texelFetch(iChannel0, p, 0).r;\n}\n\nfloat sign2 (in float n) {\n    float s = sign(n);\n    return s - abs(s) + 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    float SDFres = 1./iResolution.y;\n    \n\tvec2 p = (2.0*fragCoord-iResolution.xy)*SDFres;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)*SDFres;\n    \n    ivec2 fc = ivec2(fragCoord);\n    \n    float d = Cell(fc);\n\n    // the resilient part\n        \n    if (repair) {\n\n        float si = sign2(d);\n\n        vec4 n = vec4(Cell(fc+ivec2(1,0)),\n                      Cell(fc-ivec2(1,0)),\n                      Cell(fc+ivec2(0,1)),\n                      Cell(fc-ivec2(0,1)));\n\n        vec2 normal = normalize( n.xz - n.yw ) * si;\n\n        float d2 = texture(iChannel0, (fragCoord - normal)/iResolution.xy).r;\n\n        if ( si == sign2(d2) ) {\n            d = min(d*si + SDFres, d2*si + SDFres*2. )*si;\n        }\n\n    }\n\n\n    // inputs\n    \n    if (iMouse.z > 0.5) {\n        float val = sdCircle(p-m);\n        float shiftKey = texelFetch( iChannel1, ivec2(16,0), 0 ).x;\n        d = (shiftKey<0.5) ? min(d,val):max(-val,d);\n    }\n    \n    // circle at the beginning\n\n    if (iFrame == 0) d = sdCircle(p);\n    \n    ////////\n    \n    fragColor = vec4(d,d,d,1.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}