{
    "Shader": {
        "info": {
            "date": "1650240019",
            "description": "just playing with textures",
            "flags": 32,
            "hasliked": 0,
            "id": "7lByDK",
            "likes": 11,
            "name": "Mountainy Stuff",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 342
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nvec3 face(vec3 p) {\n     vec3 a = abs(p);\n     return step(a.yzx, a.xyz)*step(a.zxy, a.xyz)*sign(p);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec3 getRo() {\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    //was 0.15\n    float t = 0.04 * iTime;\n    float r = 3.4;\n    vec3 ro = vec3(r * cos(t), 1.58, r * sin(t));\n    //ro.yz *= Rot(-m.y*3.14+1.);\n    //ro.xz *= Rot(-m.x*6.2831);\n    return ro;\n}\n\nfloat test(vec2 uv) {\n    float t;\n    float m = 1.;\n    for (int i = 0; i < 6; i++) {\n        t += m * texture(iChannel0, uv)[i % 3];\n        m *= 0.3;\n        uv *= 3.;\n    }\n    return t;\n}\n\nfloat GetDist(vec3 p) {\n    float d = p.y;\n\n    vec2 uv = 0.02 * p.xz;\n    float t = test(uv);\n    d -= t;\n    // falloff from center gives feeling of roundness like a planet\n    // looks worse?\n    d += 0.025 * (length(p.xz) - 1.);\n    return 0.5 * d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n    float s = sign(z);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if (s != sign(dS)) { z *= 0.5; s = sign(dS); }\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = getRo();\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,1.15,0), 4.); //was vec3(0), 1.\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    vec3 e = vec3(0.5);\n    vec3 col2 = pal(-0.15, e, e, e, 0.5 * vec3(0,1,2)/3.);\n    \n    vec3 p = ro + rd * d;\n    if(d<MAX_DIST) {     \n        vec3 n = GetNormal(p);\n        \n        float dif = dot(n, normalize(vec3(0,1.5,3)))*.6+.4;\n        col = vec3(dif);\n        \n        vec3 c = texture(iChannel0, p.xz).rgb;\n      //  col *= c;\n        col *= p.y-0.25;\n        vec2 uv = 0.02 * p.xz;\n        float t = test(uv);\n        col *= t;\n        vec3 e = vec3(0.5);\n        col *= pal(1.15 + t, e, e, e, 0.5 * vec3(0,1,2)/3.);\n        \n        float fres = pow(1. + dot(rd, n), 1.);\n        col = mix(col, col2, 0.04 * fres);\n        \n        float sc = 0.25;\n        \n        vec3 c1 = texture(iChannel1, sc * (0.5 + 0.5 * p.xy)).rgb;\n        vec3 c2 = texture(iChannel1, sc * (0.5 + 0.5 * p.yz)).rgb;\n        vec3 c3 = texture(iChannel1, sc * (0.5 + 0.5 * p.zx)).rgb;\n        \n        n = abs(n);\n        vec3 c4 = n.z * c1 + n.x * c2 + n.y * c3;\n        col *= c4 * 1.3;\n        \n    }\n    \n    // I like \n    col *= 0.82 + 0.18 * thc(1.,30. * p.y) * exp(-0.2 * p.y);\n    \n    col = mix(col, col2, 1.-exp(-0.05 * length(p.xz)));\n    vec3 col3 = pow(col, vec3(.4545));\t// gamma correction\n    col = col3;\n    //col = mix(col, col3, step(fract(10. * uv.x), 0.1));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\n#define Rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b) {\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.xy;\n\n    float sc = 14. + 0.25 * cos(3.5 * uv.x + iTime);\n    vec2 ipos = floor(sc * uv) + 0.;\n    vec2 fpos = fract(sc * uv) - 0.;\n       \n    // m determines what new cell the old cell lies in\n    // 3 -> small\n    // 0 -> tl big, 2 -> tr big, 4 -> bl big, 1 -> br big\n    float m = mod(2. * ipos.x - ipos.y, 5.);\n    \n    // id = 2 if small cell, id = 1 if big cell (used to make outlines same size)\n    float id = 2.;\n    vec2 o = vec2(0);\n    \n    if (m != 3.) { fpos *= 0.5;  id = 1.; }    \n    if (m == 2.)      o = vec2(1,0); // top right\n    else if (m == 4.) o = vec2(0,1); // bottom left\n    else if (m == 1.) o = vec2(1);   // bottom right\n    \n    // if in big cell, halve fpos + translate\n    fpos += 0.5 * o - 0.5;\n    ipos -= o;\n    \n    float h = 2. * pi * h21(ipos);\n    \n    float c = cos(h + pi * id + iTime);    \n    float d = mix(mlength(fpos), length(fpos), 0.5 + 0.5 * c);\n    \n    float k = 20. / iResolution.y;\n    float s = 1. - smoothstep(-k, k, -d + 0.5 - (0.1 + 0.05 * c) * id);// - length(fpos);\n\n    vec3 e = vec3(0.5);\n    vec3 col = s * pal(h + 0.05 * iTime, e, e, e, 0.5 * vec3(0., 0.33, 0.66));\n    col += 0.14;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}