{
    "Shader": {
        "info": {
            "date": "1716489802",
            "description": "Was playing around with basic path planning things, and while making a visualization I accidentally stumbled on this beautiful result!",
            "flags": 32,
            "hasliked": 0,
            "id": "X3c3WN",
            "likes": 9,
            "name": "Pathfinding Particles",
            "published": 3,
            "tags": [
                "particles",
                "rainbow",
                "hsv",
                "pathfinding"
            ],
            "usePreview": 0,
            "username": "Oman395",
            "viewed": 187
        },
        "renderpass": [
            {
                "code": "/*\nMessing with pathfinding\na basic shader by Oman395\n\nThis is a pretty simple shader I threw together while bored at school. I was messing with pathfinding (in particular, generating a field\nof distances to a \"center\" point), but needed to visualize the gradient. One thing led to another, and I ended up with this farily nice\nlooking result!\n\nOptions are in the common folder, but there isn't a whole lot to see there\n\nThis is under an MIT license, which I'm not going to copy paste, but if you want to read it visit https://opensource.org/license/mit\n*/\n\n// https://gist.github.com/983/e170a24ae8eba2cd174f\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {   \n    vec4 val = texture(iChannel0, fragCoord / iResolution.xy);\n    // If there is a wall, we should be fully white\n    if(val.r > 0.0) {\n        fragColor = vec4(1);\n        return;\n    }\n    \n    // HSV looks nice :3 angle is scaled 0-1\n    vec3 hsvVal = hsv2rgb(vec3(\n        (atan(val.a, val.b) + PI) / PI / 2.0,\n        1,\n        1\n    ));\n    // The val.g check prevents \"flickering\" particles which spawn in invalid locations (we already checked for wall, so we don't need\n    // to worry about that)-- I don't know why I can't do val.g > 0.0, but for whatever reason flickering is still visible without that\n    // small constant\n    // 0.3 is an arbitrary constant I found made sure the particles were visible enough\n    if(val.g > 1e-5) fragColor = vec4(hsvVal * 0.3,1);\n    else fragColor = vec4(0);\n        \n    vec4 particleVal = texture(iChannel1, fragCoord / iResolution.xy);\n    if(particleVal.r > 0.0 && val.g > 1e-5) {\n        fragColor.rgb = hsvVal;\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float MAX_DIST = 1e20; // This doesn't really need to be changed, it's mostly just me extracting constants\nconst float DEFAULT_SIZE = 1000.0; // Same here, this just establishes consistent noise scaling over resolutions\n\n// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nfloat rand(vec2 c){\n\treturn fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat noise(vec2 p, float freq ){\n\tfloat unit = 1000.0/freq;\n\tvec2 ij = floor(p/unit);\n\tvec2 xy = mod(p,unit)/unit;\n\t//xy = 3.*xy*xy-2.*xy*xy*xy;\n\txy = .5*(1.-cos(PI*xy));\n\tfloat a = rand((ij+vec2(0.,0.)));\n\tfloat b = rand((ij+vec2(1.,0.)));\n\tfloat c = rand((ij+vec2(0.,1.)));\n\tfloat d = rand((ij+vec2(1.,1.)));\n\tfloat x1 = mix(a, b, xy.x);\n\tfloat x2 = mix(c, d, xy.x);\n\treturn mix(x1, x2, xy.y);\n}\n\nfloat pNoise(vec2 p, int res){\n\tfloat persistance = .5;\n\tfloat n = 0.;\n\tfloat normK = 0.;\n\tfloat f = 4.;\n\tfloat amp = 1.;\n\tint iCount = 0;\n\tfor (int i = 0; i<50; i++){\n\t\tn+=amp*noise(p, f);\n\t\tf*=2.;\n\t\tnormK+=amp;\n\t\tamp*=persistance;\n\t\tif (iCount == res) break;\n\t\tiCount++;\n\t}\n\tfloat nf = n/normK;\n\treturn nf*nf*nf*nf;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Red = walls, Green = distance, Blue = target X offset, Alpha = target Y offset\n\n    vec2 uv = fragCoord / iResolution.xy;\n\n    float mapVal = pNoise((fragCoord - iResolution.xy / 2.0) * NOISE_SCALE * DEFAULT_SIZE / min(iResolution.x, iResolution.y) + NOISE_SEED * DEFAULT_SIZE, NOISE_DETAIL);\n    mapVal += NOISE_BIAS / 2.0;\n    if(mapVal > 0.5) {\n        fragColor = vec4(1,0,0,0);\n        return;\n    }\n    \n    float dStart = distance(fragCoord, iResolution.xy * START_POS);\n    if(dStart <= 1.0) {\n        fragColor = vec4(0,1,0,0);\n        return;\n    }\n    \n    // Just used for reducing imprecision in the stored distance values (basically just preventing every stored value from being\n    // comedically small)\n    float distanceScale = (iResolution.x + iResolution.y) / 4.0;\n    \n    // We want to keep our current best distance, but if our current value is 0 then Infinity appears, and I'm paranoid of NaN\n    float nearestAndBest = min(distanceScale / texture(iChannel0, uv).g - distanceScale, MAX_DIST);\n    \n    // If the previous cell was already checked, it will have a direction which we want to keep if nothing else is found; otherwise,\n    // we can just default to (0,0)\n    float prevVal = texture(iChannel0, uv).g;\n    vec2 bestDir;\n    if(prevVal > 0.0) bestDir = texture(iChannel0, uv).ba;\n    else bestDir = vec2(0);\n    \n    // Look around us to find the best cell to target; in this case, the \"best\" cell would be the one with the shortest path from it to\n    // the origin. Because each (filled) cell stores its own distance to the origin, we can calculate the length of this path as simply\n    // the distance from the target cell to our cell, plus the distance from the target cell to the origin.\n    vec4 val;\n    float dist, x, y;\n    for(x = -1.0; x < 2.0; x++) {\n        for(y = -1.0; y < 2.0; y++) {\n            // Make sure we don't check our own cell\n            if(x == 0.0 && y == 0.0) continue;\n            val = texture(iChannel0, (fragCoord + vec2(x,y)) / iResolution.xy);\n            // Make sure we don't check any cells that can't move to use (walls, empty cells)\n            if(val.g == 0.0 || val.r > 0.0) continue;\n            dist = distanceScale / val.y - distanceScale + length(vec2(x,y));\n            if(dist >= MAX_DIST) continue;\n            if(dist < nearestAndBest) {\n                nearestAndBest = dist;\n                // It's a lot easier to calculate cell targets here, rather than trying to get this from the gradient\n                bestDir = vec2(x,y);\n            }\n        }\n    }\n    \n    fragColor = vec4(0, distanceScale / (nearestAndBest + distanceScale), bestDir);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// https://www.shadertoy.com/view/4djSRW\nfloat rand(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Make sure we don't try to calculate the position of a particle in an empty/wall cell\n    vec4 mapTexVal = texture(iChannel1, fragCoord / iResolution.xy);\n    if(mapTexVal.r > 0.0 || mapTexVal.g == 0.0) {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    // Multiplying by NOISE_BIAS isn't perfect, but in my testing I've found that it approximately corresponds to percent coverage\n    // of \n    float prob = PARTICLES_PER_SECOND / (iResolution.x * iResolution.y / iTimeDelta * NOISE_BIAS);\n    if(rand(fragCoord + iTime) > 1.0 - prob) {\n        fragColor = vec4(1);\n        return;\n    }\n    \n    // Cells which previously had a particle should lose the particle\n    // This prevents weird strings from forming because of \"stuck\" particles\n    vec4 prevVal = texture(iChannel0, fragCoord / iResolution.xy);\n    if(prevVal.r >= 1.0) {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    float count = 0.0;\n    vec2 dir, targetDir, targetPos;\n    vec4 sampledParticle, sampledCell;\n    \n    for(float x = -1.0; x < 2.0; x++) {\n        for(float y = -1.0; y < 2.0; y++) {\n            // Don't check our own cell\n            if(x == 0.0 && y == 0.0) continue;\n            vec2 dir = vec2(x,y);\n            // dir is from us to the cell, so we need to multiply it by -1 to get the direction we need for angles\n            vec2 targetDir = -dir;\n            targetPos = fragCoord + dir;\n            sampledParticle = texture(iChannel0, targetPos / iResolution.xy);\n            // Don't try to check a cell which doesn't have a particle\n            if(sampledParticle.r < 1.0) continue;\n            \n            sampledCell = texture(iChannel1, targetPos / iResolution.xy);\n            \n            // If the angle between the direction from the targeted cell to our current cell and the targeted cell's target direction\n            // is under PI/4, we can be confident that we are the intended target\n            float thetaBetween = acos(dot(normalize(targetDir), normalize(sampledCell.ba)));\n            if(thetaBetween < 3.14159265 / 4.0) {\n                fragColor = vec4(1);\n                // No point checking for more; overlapping cells merge.\n                return;\n            }\n        }\n    }\n    \n    fragColor = vec4(0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const vec2 START_POS = vec2(0.5,0.5); // Origin of pathfinding; where the particles will move\nconst float NOISE_SCALE = 2.0; // Increase to decrease the scale of the obstacles (i.e. 2 will have more \"\"\"islands\"\"\" than 1)\nconst int NOISE_DETAIL = 5; // Increase to add some finer detail to the obstacles\nconst float NOISE_BIAS = 0.8; // Increase to make \"\"\"islands\"\"\" bigger\nconst vec2 NOISE_SEED = vec2(0,0); // Change to move the noise\n\n// This is *very* approximate, but it gives a rough approximation for the value lol\nconst float PARTICLES_PER_SECOND = 100000.0;\n\nconst float PI = 3.14159265;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}