{
    "Shader": {
        "info": {
            "date": "1542969166",
            "description": "A raymarched lavalamp",
            "flags": 0,
            "hasliked": 0,
            "id": "4tGfzm",
            "likes": 12,
            "name": "Raymarched Lava Lamp",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 1,
            "username": "_polymath",
            "viewed": 1089
        },
        "renderpass": [
            {
                "code": "#define MAXITERS 30\n#define LENFACTOR .95\n#define MINDIST 0.04\n#define NDELTA 0.001\n\n// metaballs ref:\n// http://jamie-wong.com/2014/08/19/metaballs-and-marching-squares/\n\n#define NDELTAX vec3(NDELTA, 0., 0.)\n#define NDELTAY vec3(0., NDELTA, 0.)\n#define NDELTAZ vec3(0., 0., NDELTA)\n\nfloat rand(float n) {\n    //return texture(iChannel0, fract(vec2(n, n))).r;\n\treturn fract(2634.2745 * (n + 3.263));\n}\nvec3 rand3(float n) {\n    return vec3(rand(n * 363.34), rand(n * 73.25), rand(n * 3734.423));\n}\n\n// Hardcoded randomness for speed:\nconst vec3[6] speeds = vec3[6] (\n\tvec3(0.764, 1.175, 1.035),\n    vec3(1.32, 1.227, 0.9745),\n    vec3(0.834, 0.734, 1.263),\n    vec3(1.1623, 0.933, 0.7373),\n    vec3(0.9347, 1.3734, 0.834),\n    vec3(0.853, 1.2745, 0.972)\n);\nconst vec3[6] ranges = vec3[6] (\n\tvec3(0.5273, 1.8347, 1.0734),\n\tvec3(0.846, 2.384, 0.7346),\n\tvec3(0.7234, 1.377, 0.982),\n\tvec3(0.62485, 1.927, 0.5273),\n\tvec3(0.982, 1.73435, 0.8245),\n\tvec3(0.5834, 2.572, 0.6725)\n);\n\nfloat scene(vec3 p) {\n    //float d = 10000.;\n    float den = 0.;\n    for (float i = .0; i < 5.; ++i) {\n        vec3 c = sin(iTime * speeds[int(i)]) * ranges[int(i)]\n            + vec3(0., 0., 10.);\n        vec3 dis = c - p;\n        float x = dot(dis, dis);\n        den += .8 / x;\n    }\n    //return     pow(den, .25) - 2.;\n    if (den < 0.333) return 2.;\n    else return 1. / den - 1.;\n}\n    \nvec3 sceneNormal(vec3 p) {\n    return normalize(vec3(\n        scene(p + NDELTAX) - scene(p - NDELTAX),\n        scene(p + NDELTAY) - scene(p - NDELTAY),\n        scene(p + NDELTAZ) - scene(p - NDELTAZ)\n\t));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.yy;\n    vec3 ray = normalize(vec3(uv, 1.));\n    vec3 cam = vec3(0., 1., -1.);\n    \n    vec3 pos = cam;\n    float dist;\n    for (int i = 0; i < MAXITERS; ++i) {\n        dist = scene(pos);\n        if (dist < MINDIST) break;\n        pos += ray * dist * LENFACTOR;\n    }\n    \n    float b;\n    if (dist < MINDIST) {\n\t    vec3 n = sceneNormal(pos);\n    \tb = -0.5 * n.y + 0.5;\n    } else\n        b = (-0.5 * uv.y + 0.5) * cos(uv.x);\n    b = clamp(b, 0., 1.);\n    \n    float t = iTime * 0.4;\n    float smallTime = smoothstep(0., 1., fract(t)),\n        bigTime = mod(t, 6.);\n    \n    vec3 col = vec3(0, 0, 0);\n    if (bigTime < 1.) {\n        col.r = b; col.g = b * smallTime;\n    } else if (bigTime < 2.) {\n        col.g = b; col.r = (1. - smallTime) * b;\n    } else if (bigTime < 3.) {\n        col.g = b; col.b = b * smallTime;\n    } else if (bigTime < 4.) {\n        col.b = b; col.g = (1. - smallTime) * b;\n    } else if (bigTime < 5.) {\n        col.b = b; col.r = b * smallTime;\n    } else {\n        col.r = b; col.b = (1. - smallTime) * b;\n    }\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}