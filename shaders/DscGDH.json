{
    "Shader": {
        "info": {
            "date": "1677177416",
            "description": "Some Blobs with some aura color.",
            "flags": 0,
            "hasliked": 0,
            "id": "DscGDH",
            "likes": 8,
            "name": "Blobs Aura",
            "published": 3,
            "tags": [
                "blobs2d"
            ],
            "usePreview": 0,
            "username": "rge15",
            "viewed": 355
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n\nstruct Blob\n{\n    vec2 center;\n    vec2 axis_speed;\n    vec3 color;\n    float radius;\n    \n};\n\nconst int numBlobs = 5;\nconst float distBlobs = 1./float(numBlobs);\n\nfloat N21_limitless( in vec2 p )\n{\n    p = 50.*fract( p/PI + vec2(0.71,0.113) );\n\n    return -1. + 2. * fract( p.x*p.y*(p.x+p.y)); \n}\n\nfloat N21_normal(vec2 co)\n{\n    return fract(N21_limitless(co));\n}\n\n\nBlob blobs[numBlobs];\nvec2 N12(in int i)\n{\n    vec2 value = vec2(i, i+1); \n    return normalize(value);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    for(int i = 0 ; i < numBlobs; i++)\n    {\n        blobs[i].center = vec2(float(i+1)*distBlobs);\n        \n        float speedX = N21_limitless(vec2(i));\n        float speedY = N21_limitless(vec2(i+2));\n        speedX = mod(speedX,4.);\n        speedY = mod(speedY,4.);\n        blobs[i].axis_speed = vec2(speedX, speedY);\n        \n        blobs[i].center.x *= sin(speedX*iTime);\n        blobs[i].center.y *= cos(speedY*iTime);\n    \n        blobs[i].radius = N21_normal(vec2(i));\n     \n        float colX = N21_normal(vec2(i+5,i));\n        float colY = N21_normal(vec2(i,i+3));\n        float colZ = N21_normal(vec2(i+2,i+7));\n        blobs[i].color = vec3(colX,colY,colZ);\n    }\n\n    float length_blob = 1.;\n    float length_total = 1.;\n    vec3 color = vec3(1.);\n    \n    for(int i = 0 ; i < numBlobs; i++)\n    {\n        length_blob = length(uv-blobs[i].center);\n        length_total *= length_blob;\n        length_blob = 1.-length_blob;\n        color += length_blob*blobs[i].color;\n    }\n\n    length_total = smoothstep(0.,1.,clamp(1.-length_total,0.,1.));\n    length_total = 1.-length_total;\n\n    // Time varying pixel color\n    vec3 col = vec3(length_total*color);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}