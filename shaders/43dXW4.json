{
    "Shader": {
        "info": {
            "date": "1719044203",
            "description": "fractal",
            "flags": 0,
            "hasliked": 0,
            "id": "43dXW4",
            "likes": 3,
            "name": "music fractalic ",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "/*originals  https://www.shadertoy.com/view/X3K3zG https://www.shadertoy.com/view/DtGyWh and other*/\n#define R(p,a,r) mix(a*dot(p,a),p,cos(r)) + sin(r)*cross(p,a)\n#define H(h) (cos((h)*2.3+vec3(1.,13,21))*0.5+.5)\n\nvec3 color(float t) {\n  vec3 c1 = vec3(1.0, 0.0, 0.0);\n  vec3 c2 = vec3(0.0, 1.0, 0.0);\n  vec3 c3 = vec3(0.0, 0.0, 1.0);\n  vec3 c4 = vec3(1.0, 1.0, 0.0);\n  vec3 c5 = vec3(1.0, 0.0, 1.0);\n  vec3 c6 = vec3(0.0, 1.0, 1.0);\n\n  float r = cos(t) * 0.5 + 0.5;\n  if (r < 0.23) return mix(c1, c2, r * 5.0);\n  if (r < 0.44) return mix(c2, c3, (r - 0.2) * 5.0);\n  if (r < 0.65) return mix(c3, c4, (r - 0.4) * 5.0);\n  if (r < 0.86) return mix(c4, c5, (r - 0.6) * 5.0);\n  return mix(c5, c6, (r - 0.8) * 7.0);\n}\n\nconst float gmh=(sqrt(5.)+1.)/2.;\nconst float gmi_i_bedi_mimo_menya=1./gmh;\n\nvec3[] d12 = vec3[]  (\nvec3(1.,1.,1.),\nvec3(1.,1.,-1.),\nvec3(1.,-1,1.),\nvec3(1.,-1,-1.),\nvec3(-1,1.,1.),\nvec3(-1.,1.,-1),\nvec3(-1.,-1.,1.),\nvec3(-1.,-1.,-1.),\nvec3(0.,gmh,gmi_i_bedi_mimo_menya),\nvec3(0.,gmh,-gmi_i_bedi_mimo_menya),\nvec3(0.,-gmh,gmi_i_bedi_mimo_menya),\nvec3(0.,-gmh,-gmi_i_bedi_mimo_menya),\nvec3(gmi_i_bedi_mimo_menya,0.,gmh),\nvec3(gmi_i_bedi_mimo_menya,0.,-gmh),\nvec3(-gmi_i_bedi_mimo_menya,0.,gmh),\nvec3(-gmi_i_bedi_mimo_menya,0.,-gmh),\nvec3(gmh,gmi_i_bedi_mimo_menya,0.),\nvec3(gmh,-gmi_i_bedi_mimo_menya,0.),\nvec3(-gmh,gmi_i_bedi_mimo_menya,0.),\nvec3(-gmh,-gmi_i_bedi_mimo_menya,0.)\n);\nfloat random(vec2 p) {\n    return fract( sin( dot( p, vec2(12., 90.)))* 5e5 );\n}\n#define rot(a)  mat2(cos(a+vec4(0,11,33,0)))\n\nvec4 color2;\n\nfloat de(vec3 p) {\n\n\n    float dd=2.4;\n    p = mod(p-dd,2.*dd)-dd;\n    \n    p.xz *=  rot(iTime/2.);\n    p.yz *=  rot(iTime/3.);\n\n    int vertex=0;\n    float dist, minDist=1e6;\n    for (int i=0; i<20; i++) {\n    \n        dist = length(p-d12[i]);\n        if (dist < minDist) { vertex=i; minDist=dist; }\n    }\n    \n    float fv = float(vertex);\n    vec3  cc = cos(d12[vertex]+fv*fv);\n    \n    cc.xz *= rot(iTime/6.);\n    \n    cc *= cc;\n    cc  = 1. - exp( -cc*cc );\n    color2 = vec4( cc, 0.); \n    \n    return minDist;\n\n}\n\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    fragColor = vec4(0);\n    vec4 O = fragColor; \n    vec2 U =fragCoord ;\n    vec2 uv = fragCoord/iResolution.xy -0.5 ;\n      vec2 C = fragCoord;\n\n    float m = float(-iFrame % 360) / float(360);  \n    uv -= C;\n    uv.x *= iResolution.x / iResolution.y;\n    uv = uv / (1.0 + 0.1*dot(uv,uv));\n    uv.x /= iResolution.x / iResolution.y;\n    uv *= exp(mix(log(1.0),log(0.5),m));\n    U = (2.*U - iResolution.xy)/iResolution.y;\n    float ss=0.,s=0.,st=1./4.;\n    vec3 p=vec3(.1,.5,-9.5+iTime), rd=normalize(vec3(U,2));\n    float a2;\n             for(float z=0.; z<1.; z+=st) {\n    for(float y=0.; y<1.; y+=st) {\n    for(float x=0.; x<1.; x+=st) {\n  \n  a2=texture(iChannel0, vec2(x*y*z*0.1,.0)).r;\n }}}\n    rd.yz *= rot(.4);\n    rd.xz *= rot(.3);\n    \n    float i=0.,t=0.,d;\n    \n    O = vec4(0);\n    \n    for (;i<100.;i++) {\n            \n        d = de(p+t*rd);        \n        t += .3*d;\n        O += exp( -d*d*15.)*exp(-t*t/30.) * color2; \n      \n    }\n    \n    O = (sqrt(O));\n    \n   vec4  O2=fragColor;\n   \n   O2=vec4(0);\n    vec3 n1,q,r=iResolution,\n     d3=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O2.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        n1=g*d3;\n        \n        a=20.;\n        n1=mod(n1-a,a*2.)-a;\n        s=3.;\n        for(int i=0;i++<8;){\n            n1=.3-abs(n1);\n            \n            n1.x<n1.z?n1=n1.zyx:n1;\n            n1.x<n1.y?n1=n1.xzy:n1;\n            n1.y<n1.x?n1=n1.zyx:n1;\n            \n            s*=e=1.4+sin(iTime*.234)*.1;\n            n1=abs(n1)*e-\n                vec3(\n                    5.+cos(iTime*.3+.5*cos(iTime*.3))*3.,\n                    120,\n                    8.+cos(iTime*.5)*5.\n                 );\n         }\n       \n         g+=e=length(n1.yx)/s;\n    }\n    \n    \n    vec3 p2, r2 = iResolution, d2 = normalize(vec3((fragCoord-.5*r2.xy)/r2.y,0.7));  \n \n \n \n\n\t\n    for(float i = 0., g = 0., e, s; i < 99.; ++i)\n    {\n  \n        p2 = g * tan(d2);\n       \n          \n        p2.z -= 0.50;\n        p2 = R(p2, normalize(vec3(1,2,3)), 0.);\n        s = 4.*a2*a2;\n;\n        for(int j = 0; j++ < 14;)\n        {\n        \n       \n            p2 = abs(p2);\n            p2 = p2.x*a2 < p2.y ? p2.zxy : p2.zyx;\n             p2 = p2.z*a2 > p2.x ? p2.xyz : p2.xzy;\n               \n            s *= e = 1.8 / min(dot(p2, p2), 1.3);\n            p2 = p2 * e - vec3(15,3,2)+O2.xyz;\n        }\n\n        g += e = length(p2.xz) / s;\n        fragColor.rgb += color(iTime * 0.5 + cos(i)) * mix(r / r, H(log(s+a2)), 0.7) * 0.08* exp(-i * i * e );\n    }\n   \n    fragColor = pow(fragColor, vec4(3));\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 13,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}