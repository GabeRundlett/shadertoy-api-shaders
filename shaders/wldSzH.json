{
    "Shader": {
        "info": {
            "date": "1580424223",
            "description": "Just tinkering with the mandelbrot set to learn glsl",
            "flags": 0,
            "hasliked": 0,
            "id": "wldSzH",
            "likes": 2,
            "name": "Slapping Fractal (mandelbrot)",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "hazenn",
            "viewed": 299
        },
        "renderpass": [
            {
                "code": "//made by hazenn :p\nconst float PI = 3.14159265358979;\nvec2 cmpxcjg(in vec2 c) {\n\treturn vec2(c.x, -c.y);\n}\n\nvec2 cmpxmul(in vec2 a, in vec2 b) {\n\treturn vec2(a.x * b.x - a.y * b.y, a.y * b.x + a.x * b.y);\n}\n\nvec2 cmpxpow(in vec2 c, int p) {\n    vec2 temp = vec2(1.0,0.0);\n\tfor (int i = 0; i < p; ++i) {\n\t\ttemp = cmpxmul(temp, c);\n\t}\n    return temp;\n}\n\nvec2 cmpxdiv(in vec2 a, in vec2 b) {\n    return cmpxmul(a, cmpxcjg(b));\n}\n\nfloat cmpxmag(in vec2 c) {\n    return sqrt(c.x * c.x + c.y * c.y);\n}\n\nvec2 uv_scaled(vec2 uv, vec2 top_left, vec2 bot_right)\n{\n    return mix(top_left.xy,bot_right.xy,uv.xy);\n}\nfloat F (float x)\n{\n\treturn (cos(PI * (x+1.0))+1.0)/2.0;\n}\nfloat mandelbrot(vec2 c, int n)\n{\n    vec2 z = vec2(0,0);\n    for (int i = 0; i < n;i++)\n    {\n        if (sqrt(z.x*z.x + z.y*z.y)  > 2.0)\n        {\n            return (1.0-float(i)/float(n));\n\t\t}\n        z = cmpxmul(z,z) + c;\n        \n    }\n    return 0.0;\n}\nvec2 f(vec2 c,vec2 z, float t)\n{\n    //the function used to define the sequence\n\treturn cmpxpow(z,3) * t + cmpxpow(c,1) + t * z;\n}\nfloat fractal(vec2 c, int n, float t)\n{\n    vec2 z = vec2(0,0);\n    for (int i = 0; i < n;i++)\n    {\n        if (sqrt(z.x*z.x + z.y*z.y)  > 2.0)\n        {\n            return (1.0-float(i)/float(n));\n\t\t}\n        z = f(c,z,t);\n        \n    }\n    return 0.0;\n}\nvec3 colorA = vec3(0.03137254901,0.05882352941,0.05882352941);\nvec3 colorB = vec3(0.6431372549,0.7294117647,0.7294117647);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec2 c = uv_scaled(uv,vec2(-1.5,1.5),vec2(1.5,-1.5));\n    vec3 col = vec3(0.0,0.0,0.0);\n    col = mix(colorA,colorB,F(fractal(c,200,sin(iTime))));\n    //col.x = c.x;\n    //col.y = c.y;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}