{
    "Shader": {
        "info": {
            "date": "1573480134",
            "description": "I added color to Stellar window by the argument (theta).",
            "flags": 0,
            "hasliked": 0,
            "id": "3sySRW",
            "likes": 3,
            "name": "Stellar window (with color)",
            "published": 3,
            "tags": [
                "math",
                "mathematics"
            ],
            "usePreview": 0,
            "username": "Kanata",
            "viewed": 332
        },
        "renderpass": [
            {
                "code": "const float PI  = 3.141592653589793;\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 res = iResolution.xy,\n          uv = ( u* 2. - res) / min(res.x, res.y);\n\n    float t = iTime;\n    float scale = 2.;\n    uv *= scale;\n    \n    vec2 a = vec2(sin(t), cos(t));\n    vec2 b = vec2(1., 0.);\n    vec2 c = vec2(0., 1.);\n    vec2 d = vec2(1., 0.);\n    vec2 e = vec2(sin(t* 0.83), cos(t* 0.83));\n    \n    \n    vec2 f = cpow(uv, 100) + cmul(a, cpow(uv, 4)) + cmul(b, cpow(uv, 3))\n                     + cmul(c, cpow(uv, 2)) + cmul(d, cpow(uv, 1)) + e;\n    float theta = (atan(f.x, f.y) + PI) / (2.* PI) * 360.;\n    float r = length(f);\n    \n    O = vec4(hsvToRgb(theta, 0.1/r, 0.3/r), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 cmul(in vec2 a, in vec2 b) {\n\treturn vec2(a.x * b.x - a.y * b.y, a.y * b.x + a.x * b.y);\n}\n\nvec2 cpow(in vec2 a, in int n) {\n    vec2 z = a;\n    for (int i = 1; i < n; i++) {\n        z = cmul(z, a);\n    }\n    return z;\n}\n\nvec3 hsvToRgb(float h, float s, float v) {\n    // h: 0.0 - 360.0, s: 0.0 - 1.0, v: 0.0 - 1.0\n    float c = s; // float c = v * s;\n    float h2 = h / 60.0;\n    float x = c * (1.0 - abs(mod(h2, 2.0) - 1.0));\n    vec3 rgb = (v - c) * vec3(1.0, 1.0, 1.0);\n\n    if (0.0 <= h2 && h2 < 1.0) {\n        rgb += vec3(c, x, 0.0);\n    } else if (1.0 <= h2 && h2 < 2.0) {\n        rgb += vec3(x, c, 0.0);\n    } else if (2.0 <= h2 && h2 < 3.0) {\n        rgb += vec3(0.0, c, x);\n    } else if (3.0 <= h2 && h2 < 4.0) {\n        rgb += vec3(0.0, x, c);\n    } else if (4.0 <= h2 && h2 < 5.0) {\n        rgb += vec3(x, 0.0, c);\n    } else if (5.0 <= h2 && h2 < 6.0) {\n        rgb += vec3(c, 0.0, x);\n    }\n\n    return rgb;\n}\n// hsvToRgb borrowed from \n// https://qiita.com/sw1227/items/4be9b9f928724a389a85\n        ",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}