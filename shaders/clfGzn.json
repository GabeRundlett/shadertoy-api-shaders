{
    "Shader": {
        "info": {
            "date": "1671138928",
            "description": "Inspired by Cosmic by Xor: https://www.shadertoy.com/view/msjXRK\nI am a big fan of high saturated glowin colors.\nSo I really liked Cosmic by Xor.\nMy contribution is making the shader longer while remove the loop",
            "flags": 0,
            "hasliked": 0,
            "id": "clfGzn",
            "likes": 5,
            "name": "Longer Cosmic ",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "// CC0: Longer Cosmic \n//  Inspired by Cosmic by Xor: https://www.shadertoy.com/view/msjXRK\n//  I am a big fan of high saturated glowin colors.\n//  So I really liked Cosmic by Xor.\n//  Making short shaders isn't part of my skill set but I was \n//  thinking I could maybe remove the need for loop for each ring.\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define PI_2        (0.5*PI)\n#define TAU         (2.0*PI)\n\nconst float ringDistance= 0.05;\nconst float noOfRings   = 30.0;\nconst float glowFactor  = 0.005;\n\n// License: MIT, author: Pascal Gilcher, found: https://www.shadertoy.com/view/flSXRV\nfloat atan_approx(float y, float x) {\n  float cosatan2 = x / (abs(x) + abs(y));\n  float t = PI_2 - cosatan2 * PI_2;\n  return y < 0.0 ? -t : t;\n}\n\n// License: CC0, author: Mårten Rånge, found: https://github.com/mrange/glsl-snippets\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan_approx(p.y, p.x));\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\nvec3 glow(vec2 pp, float h) {\n  float hh = fract(h*8677.0);\n  float b = TAU*h+0.5*TIME*(hh > 0.5 ? 1.0 : -1.0);\n  float a = pp.y+b;\n  float d = max(abs(pp.x)-0.001, 0.00125);\n  return smoothstep(0.5*ringDistance, 0.2*ringDistance, d)*smoothstep(0.1, 1.0, cos(a))*(cos(a+b+vec3(0,1,2))+vec3(1.0))*glowFactor/d;\n}\n\nvec3 effect(vec2 p) {\n  p += -0.1;\n  // Didn't really understand how the original Cosmic produced the fake projection.\n  // Took part of the code and tinkered\n  p = (p*mat2(1,-1, 2, 2));\n  p += vec2(0.0, 0.33)*length(p);\n \n  vec2 pp = toPolar(p);\n  vec2 pp0 = pp;\n  float rn0 = mod1(pp0.x, ringDistance); \n  vec2 pp1 = pp;\n  pp1.x -= ringDistance*0.5;\n  float rn1 = mod1(pp1.x, ringDistance); \n  float d0 = abs(pp0.x);\n  float d1 = abs(pp1.x);\n  vec3 col = vec3(0.0);\n  float h0 = hash(rn0*1E5+3.0);\n  float h1 = hash(rn1+4.0);\n  col += glow(pp0, h0)*step(1.0, rn0)*step(rn0, noOfRings);\n  col += glow(pp1, h1)*step(rn1, noOfRings);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/iResolution.xy;;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = vec3(0.0);\n  col = effect(p);\n  col = sqrt(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}