{
    "Shader": {
        "info": {
            "date": "1691333799",
            "description": "Colourful waves of smoke based upon an example on GLSL sandbox water turbulence effect by joltz0r and David Hoskins's implementation https://www.shadertoy.com/view/MdlXz8",
            "flags": 0,
            "hasliked": 0,
            "id": "DtsyWl",
            "likes": 18,
            "name": "Colourful smoke",
            "published": 3,
            "tags": [
                "waves",
                "smoke",
                "colour"
            ],
            "usePreview": 0,
            "username": "motus_art",
            "viewed": 632
        },
        "renderpass": [
            {
                "code": "// Colourful waves of smoke based upon an example on \n// GLSL sandbox water turbulence effect by joltz0r and \n// David Hoskins's implementation https://www.shadertoy.com/view/MdlXz8\n#define TAU 6.28318530718\n#define MAX_ITER 8\n\n// cosine based palette, 4 vec3 params\n// By Inigo Quilez https://iquilezles.org/articles/palettes/\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat time = iTime * .095 + 23.0;\n\t\n    vec2 uv = fragCoord/iResolution.xy;;\n\n    vec2 p = mod(uv*TAU, TAU) - 213.0;\n\tvec2 i = vec2(p);\n\tfloat c = 1.0;\n\tfloat inten = .005;\n\n\tfor (int n = 0; n < MAX_ITER; n++) {\n\t\tfloat t = time * (1.0 - (3.5 / float(n + 1)));\n\t\ti = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n\t\tc += 1.0 / length(vec2(p.x / (sin(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n\t}\n    \n\tc /= float(MAX_ITER);\n\tc = 1.17 - pow(c, 1.4);\n\tvec3 colour = vec3(pow(abs(c), 10.0));\n    colour *= 1.1;\n    colour = clamp(colour + vec3(0.095), 0.0, 1.0);\n  \n    float palettePhase = abs(sin(uv.x * uv.y + iTime * 0.05)) + iTime * 0.1;\n    vec3 col = palette(palettePhase, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3(2.0, 1.0, 0.0), vec3(0.50, 0.20, 0.25));\n    col *=  colour;\n \n\tfragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}