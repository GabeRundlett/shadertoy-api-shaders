{
    "Shader": {
        "info": {
            "date": "1699099050",
            "description": "its a little slow tbh :P",
            "flags": 0,
            "hasliked": 0,
            "id": "dttcDr",
            "likes": 15,
            "name": "Focus closely",
            "published": 3,
            "tags": [
                "2d",
                "psychedelic",
                "trippy",
                "replication"
            ],
            "usePreview": 0,
            "username": "scry",
            "viewed": 253
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n#define pi acos(-1.)\n#define deg pi/180.\n#define time iTime*pi/10.\n#define R iResolution.xy\n#define ar R.x/R.y\nvec3 cs = vec3(1.,2.,3.);\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n// box-filted cos(x)\nvec3 fcos( in vec3 x )\n{\n    vec3 w = fwidth(x);\n    #if 1\n    return cos(x) * sin(0.5*w)/(0.5*w);       // exact\n    #else\n    return cos(x) * smoothstep(6.2832,0.0,w); // approx\n    #endif    \n}\nvec3 t1(vec2 uv, float t, float v) {\n    vec3 col = vec3(0.);\n    float c = length(uv);\n    \n    uv = vec2(log(length(uv)),atan(uv.x,uv.y));\n    //uv.x *= sin(time*0.1);\n    //uv.x += time*8.;\n    //uv.x *= sin(-time*0.1)*0.1+0.5;\n    //uv.x -= t*-0.2+time*0.1;\n    uv.x += v*-2.;\n    uv.x *= 0.3;\n    //uv.x += time10.5;\n    //uv.y += -time*10.;\n    uv.x += uv.y*0.0795;\n    float sx = floor(uv.x*2.)/pi+2.+fract((uv.y/pi/2.+0.5))*-0.3183;\n    //uv.x += sin(uv.y*80.)*0.1;\n    uv.x = (fract(uv.x*2.)-0.5)/2.;\n    //\n    //uv.x *= 0.5;\n    \n    float s = (min(abs(uv.x-sin(uv.y*8.)*0.1),abs(uv.x+sin(uv.y*8.)*0.1)));\n    //s = min(s,abs(-abs(uv.x)+0.1));\n    //s = min(s,abs(-abs(uv.x)+0.2));\n    //s = min(s,(min(abs((abs(uv.x)-0.15)-sin(uv.y*8.)*0.05),abs((abs(uv.x)-0.15)+cos(uv.y*8.)*0.05))));\n    //s += 0.1;\n    col -= (smoothstep(0.01,0.,abs(uv.x-0.25))+smoothstep(0.01,0.,abs(uv.x+0.25)))*0.02;\n    col -= fcos(uv.xxx*190.+t*25.)*0.1;\n    \n    //col += sin(sx*2.);\n    col += fcos(sx*28.+t+cs*0.2+t*8.)*0.12;\n    col += fcos(sx*0.65*v*v+t*0.1+cs*0.8+time*2.)*0.4+0.6;\n    //col += sin(cs+s*200.+sx*10.+t*10.)*0.5;\n    //col += smoothstep(0.002+pow((1-c),5.)*0.02,0.,s)*(c*0.5+0.5);\n    col = clamp(col,-0.,1.);\n    return col;\n}\n\nvec3 t2(vec2 uv, float t) {\n    vec3 col = vec3(0.);\n    float c = length(uv);\n    uv = uv/dot(uv,uv);\n    uv *= 0.002;\n    uv *= 30.;\n    //uv.xy *= pow(time*0.3,2.)+1.;\n    uv = (fract(uv*12.-0.5)-0.5)/12.;\n    uv = abs(uv)-0.024;\n    uv *= r2d(time*-12.);\n    col = t1(uv,t,log(c)*0.8)*0.7;\n    col = clamp(col,0.,1.);\n    col = mix(col,vec3(0.5),log(1.-c)*0.);\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 tv = uv;\n    uv -= 0.5;\n    uv.x *= ar;\n    uv *= 0.6;\n    vec3 col = vec3(0.);\n    float c = length(uv);\n    for (int j=0;j<4;j++) {\n    float jj = float(j+1);\n    vec2 ov = uv;\n    uv *= 1.+sin(time+jj+c+sin(uv.x*8.-time)+sin(uv.y*8.+time))*0.06;\n    uv *= r2d(sin(time+jj+c*2.)*deg*4.);\n    //uv = abs(uv)-0.25;\n    for (int i=0;i<12;i++) {\n        float ii = float(i);\n        float aa = fract(ii/48.+jj/3.+time+c*1.5);\n        float sa = abs(aa-0.5)*2.;\n        uv *= 1.+sin(time+jj+c+cos(uv.x*8.-time)+cos(uv.y*8.+time))*0.0005;\n        vec3 nl = t2(uv,time-ii*pi)*sa*0.03*(sin(jj*pi+time)*0.5+0.5);\n        //col += (sin(nl*12.+atan(uv.x,uv.y)+time));\n        col += nl+sin(col*8.+nl*12.+sin(atan(uv.x,uv.y))+time+c*2.)*0.002;\n        //col += floor(nl*128.)/68.;\n        uv += vec2(sin(time+c*5.*sa+sa+cos(uv.x*18.+time)+jj),cos(time+c*8.*sa+sa+sin(uv.y*18.+time*0.4)))*0.0013*sa*sin(c*1.2+time+jj*2.)*jj;\n        \n    }\n    ov *= 0.95;\n    uv = ov;\n    }\n    //col -= 0.12;\n    col *= 3.;\n    col += 0.2;\n    //col = sin(col*12.+time+atan(uv.x,uv.y)+c*8.)*0.5+0.5;\n   // col -= 0.44;\n   // col *= 4.9;\n    col = pow(col,vec3(2./1.2));\n    //col -= sin(col*8.+time)*0.5+0.5;\n    // (sin(col+time)*0.75+0.25)+sin(col-1.2)*0.;\n    \n    //col = sin(cs+col*8.+time)*0.5+0.5;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}