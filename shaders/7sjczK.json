{
    "Shader": {
        "info": {
            "date": "1643817192",
            "description": "click to move\n\nidea was to refract through object -> hit other stuff in scene -> return color\nso I think shows refracted version of the \"holes\" within the object\n\nvery messy code",
            "flags": 0,
            "hasliked": 0,
            "id": "7sjczK",
            "likes": 22,
            "name": "Fractal Refracty Thing",
            "published": 3,
            "tags": [
                "raymarching",
                "refraction",
                "glass",
                "diamond",
                "gem",
                "artofcode"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 440
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 10.\n#define SURF_DIST .001\n\n#define sabs(x) sqrt(x*x+1e-2)\n#define pi 3.14159\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\nfloat GetDist(vec3 p) {\n    vec3 op = p;\n    vec3 n = normalize(vec3(cos(iTime), 1, sin(iTime)));\n    //p += p.y;\n    float m = 0.2;\n    float time = 0.5 * iTime;\n   // p *= 0.7;\n    \n    for (float i = 0.; i < 2.; i++) {\n        time += 0.25 * p.y + -0.25 * iTime + pi/4.;\n       // p = sabs(1.15 * p) - m;\n        p = sabs(p) - m;\n        p.xy *= Rot(time + pi/3.);\n        p.zy *= Rot(time);\n        m *= 0.9;\n    }\n    \n    p.xz *= Rot(iTime*.1);\n    \n    float d = sdBox(p, vec3(0.05)) - 0.05;\n    //float d = length(p) - 0.08;\n    return 1. * d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float side) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p)*side;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3)*.7;\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 2.3);\n    \n    vec3 col = texture(iChannel0, rd).rgb;\n    \n    float d = RayMarch(ro, rd, 1.); // outside of object\n    \n    float IOR = 1.15;//mix(0., 1.5, 0.5 + 0.5 * thc(5., 0.6 * iTime)); // index of refraction\n    \n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d; // 3d hit position\n        vec3 n = GetNormal(p); // normal of surface... orientation\n        vec3 r = reflect(rd, n);\n             \n        vec3 rdIn = refract(rd, n, 1./IOR); // ray dir when entering\n        \n        vec3 pEnter = p - n*SURF_DIST*30.;\n        float dIn = RayMarch(pEnter, rdIn, -1.); // inside the object\n        \n        vec3 pExit = pEnter + rdIn * dIn; // 3d position of exit\n        vec3 nExit = -GetNormal(pExit); \n        \n        vec3 reflTex = vec3(0);\n        \n        vec3 rdOut = vec3(0);\n        \n        IOR = -1.; // <-- remove this to make it work like normal\n        rdOut = refract(rdIn, nExit, IOR);\n       \n        if(dot(rdOut, rdOut)==0.) rdOut = reflect(rdIn, nExit);\n        reflTex = texture(iChannel0, rdOut).rgb;\n        \n        vec3 pExit2 = pExit - nExit*SURF_DIST*3.;\n        float dExit = RayMarch(pExit2, rdOut, 1.);\n        if (dExit < MAX_DIST) {\n           vec3 pL = pExit2 + rdOut * dExit;\n           vec3 nL = GetNormal(pL);\n           float dif = dot(nL, normalize(vec3(1,2,3)))*.5+.5;\n           dif = clamp(dif, 0., 1.);\n           //dif = smoothstep(0., 1., dif);\n           //dif = pow(4. * dif * (1.-dif), 2.);\n           col = vec3(dif);\n          // float fresnel = pow(1.+dot(rdOut, nL), 3.);\n           //col *= clamp(fresnel, 0., 1.);\n           col *= 0.5 + 0.5 * nL;\n          \n           col *= 1. + 0.5 * thc(4., 12. * length(p) - iTime);\n           col = mix(col, texture(iChannel0, rdOut).rgb, 0.2);\n        }\n        else\n            col = texture(iChannel0, rdOut).rgb;\n            \n        float fresnel = pow(1.+dot(rd, n), 3.);\n       // col = vec3(fresnel);\n        vec3 refOutside = texture(iChannel0, r).rgb;\n        col = mix(col, refOutside, fresnel);\n       \n        \n\n    }\n    //col *= 2.;\n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\n// (SdSmoothMin) stolen from here: https://www.shadertoy.com/view/MsfBzB\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}