{
    "Shader": {
        "info": {
            "date": "1667271106",
            "description": "using fourier transform(FT) to color low frequencies\nfeed the FT result to a neural network(NN)\nthe NN will extract concepts and tell whats going behind the noise\n",
            "flags": 32,
            "hasliked": 0,
            "id": "csB3RD",
            "likes": 6,
            "name": "the cube",
            "published": 3,
            "tags": [
                "automata"
            ],
            "usePreview": 0,
            "username": "lomateron",
            "viewed": 283
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uvec4 tt = floatBitsToUint(texelFetch(iChannel0,ivec2(fragCoord),0));\n    float pi = 3.141592;\n    #define zz 128.\n    #define ww 3\n    float frq = 5.;\n    fragColor = vec4(0);\n    for(int i = 0; i < ww; ++i)\n    {\n        float co = 0.;\n        float si = 0.;\n        float su = 0.;\n        for(float y = .5; y < zz; ++y)\n        {\n                               uint t = tt.x;\n            if(y>=32.*1.&&y<32.*2.){t = tt.y;}\n            if(y>=32.*2.&&y<32.*3.){t = tt.z;}\n            if(y>=32.*3.          ){t = tt.w;}\n            float y2 = frq*(y/zz-.5);\n            float a = float((t>>(int(y)&31))&1U)-.5;\n            float e = 1./exp(y2*y2);  su+=e;\n                  a*= e;\n                  y2*=3.;\n            co += cos(y2)*a;\n            si += sin(y2)*a;\n        }\n        float l = sqrt(si*si+co*co)/su;\n                vec4 msk = vec4(1,0,0,0);\n      //if((i%3)==0){msk = vec4(1,0,0,0);}\n        if((i%3)==1){msk = vec4(0,1,0,0);}\n        if((i%3)==2){msk = vec4(0,0,1,0);}\n        fragColor += l*msk;\n        frq *= 1.3; //2^(1/3)\n    }\n    fragColor *= 4.*(3./float(ww));\n    //if(fragCoord.x>iResolution.x*.5){fragColor = vec4(tt.x&1U);}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define rz 120.  //size of each world in pixels\n#define sz  3.   //size of kernel across space\n#define tz  3    //size of kernel across time          must be <= 32\n#define nz  .02  //size of mouse click noise ball",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "uvec4 read(vec2 u, vec2 m)\n{\n    return floatBitsToUint(texelFetch(iChannel0,ivec2(u+m),0));\n}\nvoid mainImage( out vec4 fragColor, in vec2 u )\n{\n    uvec4 tt = read(u,vec2(0,0));\n    float ck = -floor((sz-1.)*.5);    //center the kernel\n    float ev = float(mod(sz,2.)==0.); //move and resize kernel when sz = even\n    uint o = 0U;                      //sum of all bits\n                          float n = (float(iFrame&1)-1.)*ev;\n    for(int   t=0 ; t<tz; ++t){ float m = n*(1.-float(t&1)); float s2 = sz-float(t&1)*ev; \n    for(float i=0.; i<s2; ++i){\n    for(float j=0.; j<s2; ++j){ uint r = read(u,vec2(i,j)+ck+m).x;\n                                o += (r>>t)&1U;\n    }}}\n\n    uint a = +16U*8U        *(16U*7U+12U)\n             +16U*8U*16U*8U *(1U<<8);      \n    o = ((tt.x)<<1U) | ((a>>(o&31U))&1U);\n    tt = uvec4(o,(tt.x>>31)|(tt.y<<1),\n                 (tt.y>>31)|(tt.z<<1),\n                 (tt.z>>31)|(tt.w<<1));\n    fragColor = uintBitsToFloat(tt);\n    if(iFrame==0||iMouse.z>.5)\n    {\n        vec2  v = (u/iResolution.xy)-.5;\n        float r = fract(cos(dot(u,vec2(1.76543,iTime+9.)))*5467.5678)*11111.;\n              r*= step(dot(v,v),nz);\n        fragColor = vec4(r);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}