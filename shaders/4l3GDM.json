{
    "Shader": {
        "info": {
            "date": "1469489819",
            "description": "A reflective copper ball. Put this together to try using a cubemap. Think it looks pretty good, and the reflect() built-in makes it really simple.",
            "flags": 0,
            "hasliked": 0,
            "id": "4l3GDM",
            "likes": 5,
            "name": "Copper Mirror Ball",
            "published": 3,
            "tags": [
                "reflection",
                "cubemap"
            ],
            "usePreview": 0,
            "username": "geoff",
            "viewed": 866
        },
        "renderpass": [
            {
                "code": "mat3 rotY(float d){\n    float s = sin(d);\n    float c = cos(d);\n    return mat3(  c, 0.0,  -s,\n                0.0, 1.0, 0.0,\n                  s, 0.0,   c );\n}\n\nfloat closeObj = 0.0;\n\nvec2 vecMin(vec2 a, vec2 b){\n    if(a.x <= b.x){\n        return a;\n    }\n    return b;\n}\n\nvec2 mapMat(vec3 p){\n    vec2 cubeMap = vec2(-length(p) + 4.0, 1.0);\n    vec2 mirrorSphere = vec2(length(p - vec3(cos(iTime / 2.0), 0.0, sin(iTime / 2.0))) - 0.25, 2.0);\n    return vecMin(cubeMap, mirrorSphere);\n}\n\nfloat map(vec3 p){\n    return mapMat(p).x;\n}\n\nfloat trace(vec3 ro, vec3 rd){\n    float t = 0.0;\n    float d = 0.0;\n    vec2 c;\n    int inter = 0;\n    for(int i = 0; i < 1000; i++){\n        c = mapMat(ro + rd * t);\n        d = c.x;\n        if(d < 0.0001){\n            inter = 1;\n            break;\n        }\n        t += d;\n        if(t > 5.0){\n            break;\n        }\n    }\n    closeObj = c.y;\n    if(inter == 0){\n        t = -1.0;\n    }\n    return t;\n}\n\nvec3 normal(vec3 p){\n    return normalize(vec3(map(vec3(p.x + 0.0001, p.yz)) - map(vec3(p.x - 0.0001, p.yz)),\n                          map(vec3(p.x, p.y + 0.0001, p.z)) - map(vec3(p.x, p.y - 0.0001, p.z)),\n                \t      map(vec3(p.xy, p.z + 0.0001)) - map(vec3(p.xy, p.z - 0.0001))));\n}\n\nvec3 camPos = vec3(0.0, 0.0, 0.0);\nvec3 lightPos = vec3(0.0, 0.0, 0.0);\n\nvec3 amb(vec3 c, float k){\n    return c * k;\n}\n\nvec3 diff(vec3 c, float k, vec3 p){\n    vec3 n = normal(p);\n    vec3 l = normalize(lightPos - p);\n    return c * k * max(0.0, dot(n, l));\n}\n\nvec3 spec(vec3 c, float k, vec3 p, float a){\n    vec3 n = normal(p);\n    vec3 l = normalize(lightPos - p);\n    vec3 v = normalize(p - camPos);\n    float facing = dot(l, n) > 0.0 ? 1.0 : 0.0;\n    vec3 r = reflect(l, n);\n    return c * k * facing * pow(max(0.0, dot(r, v)), a);\n}\n\nvec3 colour(vec3 p, float id){    \n    if(id == 1.0){\n        vec3 col = texture(iChannel0, normal(p)).xyz;\n        return col;\n    }else if(id == 2.0){\n        vec3 col = texture(iChannel0, reflect(normalize(lightPos - p), normal(p))).xyz \n            \t* vec3(0.776477, 0.376471, 0.184314);\n        return amb(col, 0.5) + diff(col, 0.6, p) + spec(vec3(0.776477, 0.376471, 0.184314), 0.95, p, 64.0);\n    }\n    return vec3(0.0, 1.0, 0.0);\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    camPos = vec3(0.0 , 0.0, 0.0);\n    lightPos = vec3(0.0, 0.0, 0.0);\n    vec3 ro = camPos;\n    vec3 rd = normalize(rotY(-iTime / 2.0 + radians(90.0)) * vec3(uv, 1.0));\n    float d = trace(ro, rd);\n    vec3 c = ro + rd * d;\n    vec3 col = vec3(1.0);\n    //If intersected\n    if(d > 0.0){\n    \tcol = colour(c, closeObj);\n    }else{\n        col = vec3(0.0);\n    }\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}