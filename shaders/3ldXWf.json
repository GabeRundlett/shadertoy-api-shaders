{
    "Shader": {
        "info": {
            "date": "1581875094",
            "description": "Basic test for beat detection using a few FFT samples (using lower frequencies).",
            "flags": 0,
            "hasliked": 0,
            "id": "3ldXWf",
            "likes": 3,
            "name": "Beat detection test",
            "published": 3,
            "tags": [
                "beatbass"
            ],
            "usePreview": 0,
            "username": "xfennec",
            "viewed": 326
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // create pixel coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    // the sound texture is 512x2\n    int tx = int(uv.x*512.0);\n    \n\t// first row is frequency data\n\tfloat fft = texelFetch( iChannel0, ivec2(tx,0), 0 ).x;\n\n\t// crude beat detection\n    float bass = 0.0;\n    int samples = 5;\n    for(int i = 0 ; i < samples ; ++i) {\n        bass += texelFetch( iChannel0, ivec2(i,0), 0 ).x;\n    }\n    bass /= float(samples);\n    float beat = smoothstep(0.8, 1.0, bass);\n    \n    // second row is the sound wave, one texel is one mono sample\n    float wave = texelFetch( iChannel0, ivec2(tx,1), 0 ).x;\n\n    float waveR = 1.0 - smoothstep(0.0, 0.01, abs(wave - uv.y));\n    float waveG = 1.0 - smoothstep(0.0, 0.04, abs(wave - uv.y));\n    float waveB = 1.0 - smoothstep(0.0, 0.5, abs(wave - uv.y));\n\n\tvec3 waveRGB = vec3(waveR, waveG * 0.5, waveB * 0.4);\n\n    // output final color\n    fragColor = vec4(waveRGB + beat * waveRGB + beat * vec3(1.0, 0.0, 0.1), 1.0);\n\t//fragColor = vec4(vec3(beat), 1.0);\n    //fragColor = vec4(vec3(waveRGB), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}