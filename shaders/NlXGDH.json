{
    "Shader": {
        "info": {
            "date": "1622020702",
            "description": "1st Showdown from Outline 2021 :\n\nAs usual, not fully identical to bonzomatic, find original here :\n https://psenough.github.io/shader_summary/shader_file_sources/outline_shader_showdown_2021/outline_2021_totetmatt_1.glsl",
            "flags": 0,
            "hasliked": 0,
            "id": "NlXGDH",
            "likes": 8,
            "name": "[OUTLINE 2021] - Le Mandel Cube",
            "published": 3,
            "tags": [
                "mandelbrot",
                "cube",
                "outline",
                "showdown"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 356
        },
        "renderpass": [
            {
                "code": "vec4 texNoise(vec2 uv,sampler2D tex ){ float f = 0.; f+=texture(tex, uv*.125).r*.5; f+=texture(tex,uv*.25).r*.25; //Funciton simulating the perlin noise texture we have in Bonzomatic shader editor, written by yx\n                       f+=texture(tex,uv*.5).r*.125; f+=texture(tex,uv*1.).r*.125; f=pow(f,1.2);return vec4(f*.45+.05);}\n\n#define texFFTIntegrated (floor(iTime*.5)+pow(fract(iTime*.5),.125))*.43\n#define texFFTIntegrated2 (floor(iTime*.33)+pow(fract(iTime*.33),.5))*.37\nmat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\n\n\n\nfloat mandel(vec2 uv,float l){\n    float bi3 = texFFTIntegrated;\n    vec2 z = uv;\n    vec2 c = vec2(-.856,.401);\n    float i=0.;\n    for(;i<=l;i++){\n        z = vec2(z.x*z.x-z.y*z.y,2.*z.x*z.y)+ c;\n        z*=rot(floor(bi3*20.));\n        if(length(z) >=2.) break;\n        \n    }\n    return i/l;\n}\nfloat box(vec3 p,vec3 b){\n\n    vec3 q = abs(p)-b;\n    return length(max(vec3(0.),q))+min(0.,max(q.x,max(q.y,q.z)));\n }\nvec2 sdf(vec3 p){\n    float _bit3 = texFFTIntegrated;\n  float _bit6 = texFFTIntegrated2;\n    p.xz *=rot(iTime);\n    vec3 pp= p;\n      p.xy *=rot(floor(_bit3*50.)*6.66);\n     p.zy *=rot(floor(_bit6*75.)*3.66);\n     vec2 mandeluv = vec2(abs(atan(p.x,abs(p.z))),p.y);\n    float q = mandel(mandeluv,10.);\n    vec2 h;\n    h.x = box(p,vec3(1.0-q*.1));\n    h.x = max(h.x,-box(p,vec3(.9-q*.1)));\n    h.y = 1.-q;\n    h.x *=.9;\n  \n    vec2 t;\n    t.x = -box(pp,vec3(10.));\n  \n     pp = abs(pp)-2.5;\n     t.x  = min(box(pp,vec3(1.)),t.x);\n    t.y = t.x == box(pp,vec3(1.)) ? 3.:2.;\n  \n      h = h.x < t.x ? h:t; \n    return h;\n}\nvec2 nv=vec2(-.001,.001);\n#define q(s) s*sdf(p+s).x\nvec3 norm(vec3 p){return normalize(q(nv.xyy)+q(nv.yxy)+q(nv.yyx)+q(nv.xxx));}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n\n      float _bit3 = texFFTIntegrated;\n     _bit3 = cos(texNoise(vec2(uv*.5),iChannel1).r+floor(_bit3*33.)*6.66)*.5;\n   \n  vec3 ro = vec3(0.,0.,-5.),rd=normalize(vec3(uv,1.-_bit3 )),rp=ro;\n  vec3 light= vec3(1.,2.,-3.);\n  \n  \tvec3 col =vec3(.1);\n  \n  vec3 acc = vec3(0.);\n  for(float i=0.;i<=69.;i++){\n      vec2 d = sdf(rp);\n     \n      if(d.y <=.1) {\n          acc += vec3(.1,7,.2)*exp(-abs(d.x))/59.;\n          d.x = max(0.02,abs(d.x));\n      }\n    \n    \n      if(d.x<=0.01) {\n          vec3 n= norm(rp);\n        \n        \n         if(d.y>.1 && d.y <=1.){\n             if(d.y >.5) {\n          col = vec3(.2,.5,.7)*max(0.,dot(normalize(light-rp),n));\n             } else {\n                 col = vec3(9.,.5,.1)*max(0.,dot(normalize(light-rp),n));\n               }\n             break;\n         } \n         if(d.y ==2.){\n             float noize = texNoise(rp.xz*10.,iChannel1).r*.01;\n             col*=vec3(.1,.7,.5)*1.2;\n             rd = reflect(rd,n+noize);\n             rp+=rd*.01;\n           }\n                    if(d.y ==3.){\n             float noize = texNoise(rp.xz*10.,iChannel1).r*.01;\n             col*=vec3(.1,.7,.5)*2.2;\n             rd = reflect(rd,n+noize);\n             rp+=rd*.01;\n           }\n        \n      }\n      rp+=rd*d.x;\n  }\n  col += acc;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}