{
    "Shader": {
        "info": {
            "date": "1723081585",
            "description": "colors of transition",
            "flags": 0,
            "hasliked": 0,
            "id": "Xf2yDc",
            "likes": 1,
            "name": "Fresnel VIBES",
            "published": 3,
            "tags": [
                "cineshader"
            ],
            "usePreview": 0,
            "username": "netfetti",
            "viewed": 181
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\n#define EVOLUTION_SPEED 0.3\n#define FRACTAL_COMPLEXITY 1.3\n#define COLOR_PALETTE 0.2\n#define ZOOM_LEVEL -2.0\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 4.0, 1.0 / 3.0, 1.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\nmat2 rotate2d(float angle) {\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nfloat map(vec3 p, vec3 offset) {\n    p /= ZOOM_LEVEL;\n    for(int i = 0; i < 4; i++) {\n        p.xy *= rotate2d(iTime * EVOLUTION_SPEED * 0.3);\n        p.yz *= rotate2d(iTime * EVOLUTION_SPEED * 0.2);\n        p = abs(p) - vec3(0.5 + sin(iTime * EVOLUTION_SPEED) * 0.1);\n        p = p * (2.0 - FRACTAL_COMPLEXITY) - offset * FRACTAL_COMPLEXITY;\n    }\n    float d = sdSphere(p, 1.0);\n    d += sin(p.x * 10.0) * sin(p.y * 10.0) * sin(p.z * 10.0) * 0.1;\n    return d * ZOOM_LEVEL;\n}\n\nvec3 calcNormal(vec3 p, vec3 offset) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xyy*map(p + k.xyy*h, offset) + \n                     k.yyx*map(p + k.yyx*h, offset) + \n                     k.yxy*map(p + k.yxy*h, offset) + \n                     k.xxx*map(p + k.xxx*h, offset));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0.0, 0.0, -5.0);\n    vec3 rd = normalize(vec3(uv, 2.0));\n    vec3 offset = vec3(uv, 0.0);\n\n    float t = 0.0;\n    for(int i = 0; i < 100; i++) {\n        vec3 p = ro + rd * t;\n        float d = map(p, offset);\n        if(abs(d) < 0.001) break;\n        t += d;\n        if(t > 20.0) break;\n    }\n\n    vec3 p = ro + rd * t;\n    vec3 n = calcNormal(p, offset);\n    float fresnel = pow(1.0 - max(dot(n, -rd), 0.0), 1.0);\n\n    vec3 color = hsv2rgb(vec3(\n        fract(length(p) * 0.1 + iTime * EVOLUTION_SPEED * 0.1 + COLOR_PALETTE),\n        0.8,\n        fresnel + 0.5\n    ));\n\n    color += pow(fresnel, 4.0);\n\n    vec2 texCoord = fragCoord.xy / iResolution.xy;\n    vec3 texColor = texture(iChannel0, texCoord).rgb;\n    color = mix(color, texColor, 0.3);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}