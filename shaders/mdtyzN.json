{
    "Shader": {
        "info": {
            "date": "1694807455",
            "description": "making loopless the costly SnackEater's shader https://shadertoy.com/view/dljfWW\n+ golfing.   → at least 342 x faster, and cost independent of amount of dots.\nJacobian (O.x line ) : generic method to draw fair disc dots in distorted field.",
            "flags": 0,
            "hasliked": 0,
            "id": "mdtyzN",
            "likes": 43,
            "name": "Sphere fake 3d - loopless & golf",
            "published": 3,
            "tags": [
                "3d",
                "distortions",
                "dots",
                "short",
                "golf",
                "loopless"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 610
        },
        "renderpass": [
            {
                "code": "// loopless + golfing 533 \"Sphere fake 3d\" by SnackEater. https://shadertoy.com/view/dljfWW\n// 272 without Jacobians -  288 with approx J  - 308 with exact J\n// --- Unlooping reasoning: -------------------------------------------\n//     usually it's easy (e.g. for 2D patterns) : one just has to solve which loop counter is closest:\n//     with a term like length(U-P), we must have P ~ U + P constraints (grid sampled, interval, etc).\n//     Here it's a bit involved:\n//     dot → U ~ P.xy → reverse rot on U → reverse P to a,b\n//     trick is to complete U with U.z = sqrt(r² - [U|²)\n\n/**/\n\n#define r  mat2(cos( iTime +vec4(0,33,11,0)))\n\nvoid mainImage( out vec4 O, vec2 U )\n{   \n    vec3  R = iResolution, P;\n          U = ( U+U - R.xy ) / R.y;                                // normalize coordinates\n    float s = .04365,                                              // s+s = 2Pi/72 = 5° steps\n          z = 1. - dot(U,U);\n    O *= 0.;             \n    z > 0.                                                         // if on sphere\n      ? P = vec3( U, sqrt(z) ),                                    // 3D point on front half-sphere\n        P.yz *= r,\n        P.xz *= r,                                                 // rotate on sphere\n        U =  vec2( atan(length(P.xy),P.z), atan(P.x,P.y) ),        // get parameterization\n        O.x = 1. - length( ( mod( U + s , s+s ) -s )               // draw blob at grid centers\n                       //  / fwidth(U) ) * 140./R.y                // compensate distorsion with Jacobian (approx)\n                           * inverse(transpose(mat2(dFdx(U),dFdy(U)))) )  * 1e2/R.y  // ( precise )\n      : s;\n}\n\n\n\n\n/**  // 289 chars  -5 by timedstamp , -25 by Fab\n\n#define r *= mat2(cos( iTime +vec4(0,33,11,0)))\n\nvoid mainImage( out vec4 O, vec2 U )\n{   \n    vec3  R = iResolution, P;\n    float z = 1. - dot( U = ( U+U - R.xy ) / R.y , U );\n    O *= 0.;             \n    z > 0.\n      ? P = vec3( U, sqrt(z) ),\n        P.yz r,\n        P.xz r, \n        O.x = 1. - length(  inverse(mat2(dFdx(U),dFdy(U)))\n                           *( fract( U = atan( vec2(length(P.xy),P), P.zy )*11.45 + .5 ) -.5 )\n                         ) *1e2/R.y \n      : z;\n}\n\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}