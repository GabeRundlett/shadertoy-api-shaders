{
    "Shader": {
        "info": {
            "date": "1549907442",
            "description": "Playing with Katie's favourite shape, the Elongated Square (Gyro)bicupoloid Gem\n\nhttps://www.youtube.com/watch?v=wN9f-k9oRts",
            "flags": 0,
            "hasliked": 0,
            "id": "Wdj3DG",
            "likes": 11,
            "name": "(Pseudo)rhombicuboctahedral Gem",
            "published": 3,
            "tags": [
                "raymarcher"
            ],
            "usePreview": 0,
            "username": "_polymath",
            "viewed": 531
        },
        "renderpass": [
            {
                "code": "const vec2 nd = vec2(0., .01);\nconst float eta = 1.05;\nconst float pi = acos(0.);\nconst float pi4 = pi / 2.;\nconst float gap = 0.00;\nconst float r = 2.5;\nconst float x = .22654;\nconst float y = 1. / sqrt(3.); \nconst vec4 gamma = vec4(1. / 1.2);\n\nmat2 rotate(float t) {\n    float s = sin(t), c = cos(t);\n    return mat2(c, s, -s, c);\n}\n\n// this is a bit glitchynoisy where the inner surface is exposed\n// i kind of want to fix that up but everything i've tried so far\n// has caused the inner surface where the two halves touch to become visible\n// that's fixable but it won't be easy so i'm not doing it just now\n\n// i might later though and feel free to put your own version together that does\n\n#define cap(a) max(p.a, x)\n#define ss(a) smoothstep(0., 1., a)\nfloat scene(vec3 p) {\n    p -= vec3(0., 0., 5.);\n    p.xy *= rotate(iTime * 0.1);\n    p.zx *= rotate(iTime * 0.23);\n    float theta = (\n           ss(ss(ss(fract(iTime * 0.5))))\n           + (fract(iTime * 0.25) >= 0.5 ? 1. : 0.)\n        ) * pi4;\n    // normally we spin about the centre of the gem\n    // but we spin around the edge of the left cupola when theta is tiny\n    // to avoid having a visible seam due to rounding errors\n    if (p.x > (abs(fract(theta / pi4) - 0.5) < 0.499 ? 0. : y))\n        p.yz *= rotate(theta);\n    p = abs(p) / r;\n    float shape = cap(x) + cap(y) + cap(z) - 1.;\n    return shape;\n    if (shape >= 0.) return max(shape, gap - p.x) * 0.25 * r;\n    else return min(shape, p.x - gap) * 0.25 * r;\n    // todo: not sure why the *.5 is needed but at the moment it is\n    // maybe my distance function is overzealous somehow\n}\n\nvec3 normal(vec3 p) {\n    return normalize(vec3(\n        scene(p + nd.yxx) - scene(p - nd.yxx),\n        scene(p + nd.xyx) - scene(p - nd.xyx),\n        scene(p + nd.xxy) - scene(p - nd.xxy)\n    ));\n}\n\nvec4 bg(vec3 ray) {\n    ray.yz *= rotate(iTime * 0.085);\n    ray.xy *= rotate(iTime * 0.215);\n\treturn pow(texture(iChannel0, ray), 1. / gamma);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy / 2.) / iResolution.y;\n\tvec3 ray = normalize(vec3(uv, 1.));\n    vec3 p = vec3(0.);\n    vec3 l = normalize(vec3(2., 5., -4.));\n    \n    vec4 reflectedColour,\n        refractedColour;\n    \n    // march up to the gem\n    for (int i = 0; i < 100; ++i) p += ray * scene(p);\n    \n    // draw background if we missed it\n    if (p.z > 300.) {\n        fragColor = pow(bg(ray), gamma);\n        return;\n    }\n    \n    // otherwise work out what the reflected light brings to the party\n    vec3 n = normal(p);\n    reflectedColour = bg(reflect(ray, n)) + pow(max(dot(n, l), 0.), 5.) * 7.;\n\n    // now refract and march through the gem\n    ray = refract(ray, normal(p), eta);\n\tp += ray * 0.1;\n    for (int i = 0; i < 100; ++i) p -= ray * scene(p);\n   \n    // refract back out and work out the final colour\n    vec3 refractedNormal = normal(p);\n    refractedColour = bg(refract(ray, refractedNormal, 1. / eta))\n        + pow(max(dot(-refractedNormal, l), 0.), 5.) * \n       1.;\n    \n    fragColor = pow(reflectedColour * 0.2 + refractedColour * 0.8, gamma);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}