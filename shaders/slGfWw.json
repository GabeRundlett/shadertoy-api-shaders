{
    "Shader": {
        "info": {
            "date": "1664592114",
            "description": "other arms",
            "flags": 0,
            "hasliked": 0,
            "id": "slGfWw",
            "likes": 4,
            "name": "other arms",
            "published": 3,
            "tags": [
                "otherarms"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 192
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n/// y El grande Grupo de Shadertoy\n///other arms-----30-sep-2022\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(8.0*antialiasing(1.0),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\n#define R iResolution.xy\n#define s3(v,l) smoothstep(l/R.y,0.,v) // AA\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec2 cs(float x)\n{ return vec2(cos(x),sin(x) );}\n\nvec3 Brazos(vec2 p, vec3 colOut)\n{   float l1,l2,l3,l4;\n    float a1, a2,a3,a4;\n    vec2 p0,p1,p2,p3,p4;\n    \n    float t=iTime;\n    \n    p0=vec2(0.0,0.0);\n    a1=radians(45.0*cos(t*2.));\n    a2=radians(t*50.0);\n    a3=radians(45.0);\n    a4=radians(180.0*sin(t+cos(t)));\n    l1=2.5;\n    l2=3.0;\n    l3=2.0;\n    l4=3.0;\n    \n    p1=p0+l1*cs(a1);\n    p2=p1+l2*cs(a2);\n    p3=p2+l3*cs(a3);\n    p4=p3+l4*cs(a4);\n    \n    float d1= sdSegment(p,p0,p1);\n    float d2= sdSegment(p,p1,p2);\n    float d3= sdSegment(p,p2,p3);\n    float d4= sdSegment(p,p3,p4);\n    \n    float ds1= sdCircle(p-p1,l1);\n    float ds2= sdCircle(p-p2,l2);\n    float ds3= sdCircle(p-p3,l3);\n    float ds4= sdCircle(p-p4,l4);\n    \n    vec3 col=colOut;\n    col= DrawFigBorde(vec3(1.0), col,ds4 );\n    col= DrawFigBorde(vec3(1.0), col,ds2 );\n    col= DrawFigBorde(vec3(1.0), col,ds3 );\n    col= DrawFigBorde(vec3(1.0), col,ds1 );\n    \n    col= DrawFigBorde(vec3(0.0), col,abs(d1)-0.1 );\n    col= DrawFigBorde(vec3(1.0,0.0,0.0), col,abs(d2)-0.1 );\n    col= DrawFigBorde(vec3(0.0,0.0,1.0), col,abs(d3)-0.1 );\n    col= DrawFigBorde(vec3(1.0,0.0,1.0), col,abs(d4)-0.1 );\n    return col;\n}\n\nfloat fbm(vec2 p){\n    return texture(iChannel0, p*.001).x*.533+ texture(iChannel0, p*.01).x*.267 +\n           texture(iChannel0, p*.3).x*.133  + texture(iChannel0, p*.5).x*.067; \n}\n\nvec3 grid(vec2 uv)\n{ // Time varying pixel color\n    vec3 grid_color = vec3(.5, .2, .9);\n    vec3 col = vec3(0.9);\n    const float grid_size = .1; \n    vec2 u=uv+vec2(cos(iTime*0.05));\n    u -= (vec2(fbm(uv*16.), fbm(u*16. + .35)) - .5) * .008;\n    /// col = 0.5 + 0.5*cos(iTime+u.xyx+vec3(0,2,4));\n    col = mix(col, grid_color, s3( pow(fract(u.x / grid_size -.5)-.5, 2.)-.001 , 1.5));\n    col = mix(col, grid_color, s3( pow(fract(u.y / grid_size -.5)-.5, 2.)-.001 , 1.5));\n    col = mix(col, col*.7, texture(iChannel0, u*5.).x*.5);\n    col += texture(iChannel0, (u+vec2(.125,.382))*5.).x*.2;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    vec2 u = fragCoord/iResolution.xy;\n    \n    uv-=vec2(0.0,-0.5);\n    float esc=8.0;\n    uv*=esc;\n    vec3 col=vec3(0.0);\n    col= grid(u);\n    col= Brazos(uv-vec2(0.0,5.0), col);\n \n    col=pow(col,  vec3(1.));\n    //vignette\n    uv = u; uv *=  1.0 - uv.yx;\n    float vig = uv.x*uv.y * 15.0; // multiply with sth for intensity\n    vig = pow(vig, 0.25); // change pow for modifying the extend of the  vignette\n    \n    fragColor = vec4(col*vig,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}