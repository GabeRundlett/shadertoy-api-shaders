{
    "Shader": {
        "info": {
            "date": "1672218310",
            "description": "CC0: Infinite Arcs II\nRethinking a bit on how do the infinite \"zoom\". \nIf I expotential zoom then it becomes scale invariant\nwhich ended up quite useful\n Potentially useful for future raymarchers.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "mlf3Rl",
            "likes": 22,
            "name": "Infinite Arcs II",
            "published": 3,
            "tags": [
                "2d",
                "infinite",
                "arcs"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 346
        },
        "renderpass": [
            {
                "code": "// CC0: Infinite Arcs II\n//  Rethinking a bit on how do the infinite \"zoom\". \n//  If I expotential zoom then it becomes scale invariant\n//  which ended up quite useful\n//  Potentially useful for future raymarchers.\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst float ExpBy = log2(1.2);\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\nvec2 sca(float a) {\n  return vec2(sin(a), cos(a)); \n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat arc(vec2 p, vec2 sc, float ra, float rb) {\n  // sc is the sin/cos of the arc's aperture\n  p.x = abs(p.x);\n  return ((sc.y*p.x>sc.x*p.y) ? length(p-sc*ra) : \n                                  abs(length(p)-ra)) - rb;\n}\n\nfloat forward(float n) {\n  return exp2(ExpBy*n);\n}\n\nfloat reverse(float n) {\n  return log2(n)/ExpBy;\n}\n\nvec2 cell(float n) {\n  float n2  = forward(n);\n  float pn2 = forward(n-1.0);\n  float m   = (n2+pn2)*0.5;\n  float w   = (n2-pn2)*0.5;\n  return vec2(m, w);\n}\n\nvec2 df(vec2 p) {\n  const float w = 2.0/3.0;\n  \n  float tm = TIME;\n  float m = fract(tm);\n  float f = floor(tm);\n  float z = forward(m);\n  \n  vec2 p0 = p;\n  p0 /= z;\n\n  float l0 = length(p0);\n  float n0 = ceil(reverse(l0));\n  vec2 c0 = cell(n0); \n  \n  float h0 = hash(n0-f);\n  float h1 = fract(3677.0*h0);\n  float h2 = fract(8677.0*h0);\n  float sh2 = (h2-0.5)*2.0;\n\n  float a = TAU*h2+sqrt(abs(sh2))*sign(sh2)*TIME*TAU/20.0;\n  p0 *= ROT(a);\n  float d0 = arc(p0, sca(PI/4.0+0.5*PI*h1), c0.x, c0.y*w);\n  d0 *= z;\n  return vec2(d0, h0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  float aa = 2.0/RESOLUTION.y;\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec2 d2 = df(p);\n\n  vec3 col = vec3(0.0);\n  vec3 bcol = hsv2rgb(vec3(d2.y, 0.9, smoothstep(10.0*aa, 20.0*aa, length(p))));\n  col = mix(col, bcol, smoothstep(aa, -aa, d2.x));\n  col = sqrt(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}