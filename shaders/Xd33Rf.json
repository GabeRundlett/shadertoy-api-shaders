{
    "Shader": {
        "info": {
            "date": "1452319999",
            "description": "This separable blur uses the linear filtering hardware in order to average two texels in one single fetch. It's a bad implementation of http://rastergrid.com/blog/2010/09/efficient-gaussian-blur-with-linear-sampling/ (I didn't rebalance the coefficients)",
            "flags": 32,
            "hasliked": 0,
            "id": "Xd33Rf",
            "likes": 68,
            "name": "Fast Separable Blur",
            "published": 3,
            "tags": [
                "2d",
                "blur",
                "multipass"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 6491
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2015 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n//\n// Vertical blur pass + composit\n//\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord;\n\n    // vertical blur (since fragCoord samples at pixel centers it has a 0.5 added to it)\n    // hence, i added an extra 0.5 to the texel coordinates to sample not at texel centers\n    // but right between texels. the bilinear filtering hardware will average two texels\n    // in each sample for me).\n\n    vec3 blr  = vec3(0.0);\n    //blr += 0.013658*texture( iChannel0, (uv+vec2(0.0,-19.5))/iResolution.xy ).xyz;\n    //blr += 0.019227*texture( iChannel0, (uv+vec2(0.0,-17.5))/iResolution.xy ).xyz;\n    blr += 0.026109*texture( iChannel0, (uv+vec2(0.0,-15.5))/iResolution.xy ).xyz;\n    blr += 0.034202*texture( iChannel0, (uv+vec2(0.0,-13.5))/iResolution.xy ).xyz;\n    blr += 0.043219*texture( iChannel0, (uv+vec2(0.0,-11.5))/iResolution.xy ).xyz;\n    blr += 0.052683*texture( iChannel0, (uv+vec2(0.0, -9.5))/iResolution.xy ).xyz;\n    blr += 0.061948*texture( iChannel0, (uv+vec2(0.0, -7.5))/iResolution.xy ).xyz;\n    blr += 0.070266*texture( iChannel0, (uv+vec2(0.0, -5.5))/iResolution.xy ).xyz;\n    blr += 0.076883*texture( iChannel0, (uv+vec2(0.0, -3.5))/iResolution.xy ).xyz;\n    blr += 0.081149*texture( iChannel0, (uv+vec2(0.0, -1.5))/iResolution.xy ).xyz;\n    blr += 0.041312*texture( iChannel0, (uv+vec2(0.0,  0.0))/iResolution.xy ).xyz;\n    blr += 0.081149*texture( iChannel0, (uv+vec2(0.0,  1.5))/iResolution.xy ).xyz;\n    blr += 0.076883*texture( iChannel0, (uv+vec2(0.0,  3.5))/iResolution.xy ).xyz;\n    blr += 0.070266*texture( iChannel0, (uv+vec2(0.0,  5.5))/iResolution.xy ).xyz;\n    blr += 0.061948*texture( iChannel0, (uv+vec2(0.0,  7.5))/iResolution.xy ).xyz;\n    blr += 0.052683*texture( iChannel0, (uv+vec2(0.0,  9.5))/iResolution.xy ).xyz;\n    blr += 0.043219*texture( iChannel0, (uv+vec2(0.0, 11.5))/iResolution.xy ).xyz;\n    blr += 0.034202*texture( iChannel0, (uv+vec2(0.0, 13.5))/iResolution.xy ).xyz;\n    blr += 0.026109*texture( iChannel0, (uv+vec2(0.0, 15.5))/iResolution.xy ).xyz;\n    //blr += 0.019227*texture( iChannel0, (uv+vec2(0.0, 17.5))/iResolution.xy ).xyz;\n    //blr += 0.013658*texture( iChannel0, (uv+vec2(0.0, 19.5))/iResolution.xy ).xyz;\n    \n    blr /= 0.93423; // renormalize to compensate for the 4 taps I skipped\n\n    \n    blr = mix( blr, \n               texture( iChannel1, (uv+vec2(0.0,  0.0))/iResolution.xy ).xyz,\n               smoothstep(0.3,0.5,sin(iTime)) );\n                    \n\n\n    fragColor = vec4( blr, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Created by inigo quilez - iq/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n    \n    p.x += 0.1*sin(6.0*p.y + 0.5*iTime);\n    p.y += 0.5*sin(4.0*p.x + 0.5*iTime);\n    \n    vec3 col = texture( iChannel0, p ).zyx * 1.5;\n\n    fragColor = vec4( col, 1.0 );\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Created by inigo quilez - iq/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n//\n// Horizontal blur pass. \n//\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n\n    // horizontal blur (since fragCoord samples at pixel centers it has a 0.5 added to it)\n    // hence, i added an extra 0.5 to the texel coordinates to sample not at texel centers\n    // but right between texels. the bilinear filtering hardware will average two texels\n    // in each sample for me).\n    vec3 blr = vec3(0.0);\n    //blr += 0.013658*samplePremul( iChannel0, (fragCoord+vec2(-19.5,0.0))/iResolution.xy ).xyz;\n    //blr += 0.019227*samplePremul( iChannel0, (fragCoord+vec2(-17.5,0.0))/iResolution.xy ).xyz;\n    blr += 0.026109*texture( iChannel0, (fragCoord+vec2(-15.5,0.0))/iResolution.xy ).xyz;\n    blr += 0.034202*texture( iChannel0, (fragCoord+vec2(-13.5,0.0))/iResolution.xy ).xyz;\n    blr += 0.043219*texture( iChannel0, (fragCoord+vec2(-11.5,0.0))/iResolution.xy ).xyz;\n    blr += 0.052683*texture( iChannel0, (fragCoord+vec2( -9.5,0.0))/iResolution.xy ).xyz;\n    blr += 0.061948*texture( iChannel0, (fragCoord+vec2( -7.5,0.0))/iResolution.xy ).xyz;\n    blr += 0.070266*texture( iChannel0, (fragCoord+vec2( -5.5,0.0))/iResolution.xy ).xyz;\n    blr += 0.076883*texture( iChannel0, (fragCoord+vec2( -3.5,0.0))/iResolution.xy ).xyz;\n    blr += 0.081149*texture( iChannel0, (fragCoord+vec2( -1.5,0.0))/iResolution.xy ).xyz;\n    blr += 0.041312*texture( iChannel0, (fragCoord+vec2(  0.0,0.0))/iResolution.xy ).xyz;\n    blr += 0.081149*texture( iChannel0, (fragCoord+vec2(  1.5,0.0))/iResolution.xy ).xyz;\n    blr += 0.076883*texture( iChannel0, (fragCoord+vec2(  3.5,0.0))/iResolution.xy ).xyz;\n    blr += 0.070266*texture( iChannel0, (fragCoord+vec2(  5.5,0.0))/iResolution.xy ).xyz;\n    blr += 0.061948*texture( iChannel0, (fragCoord+vec2(  7.5,0.0))/iResolution.xy ).xyz;\n    blr += 0.052683*texture( iChannel0, (fragCoord+vec2(  9.5,0.0))/iResolution.xy ).xyz;\n    blr += 0.043219*texture( iChannel0, (fragCoord+vec2( 11.5,0.0))/iResolution.xy ).xyz;\n    blr += 0.034202*texture( iChannel0, (fragCoord+vec2( 13.5,0.0))/iResolution.xy ).xyz;\n    blr += 0.026109*texture( iChannel0, (fragCoord+vec2( 15.5,0.0))/iResolution.xy ).xyz;\n    //blr += 0.019227*samplePremul( iChannel0, (fragCoord+vec2( 17.5,0.0))/iResolution.xy ).xyz;\n    //blr += 0.013658*samplePremul( iChannel0, (fragCoord+vec2( 19.5,0.0))/iResolution.xy ).xyz;\n\n    blr /= 0.93423; // renormalize to compensate for the 4 taps I skipped\n    \n    fragColor = vec4( blr, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}