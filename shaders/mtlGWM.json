{
    "Shader": {
        "info": {
            "date": "1671865809",
            "description": "nothing here.",
            "flags": 0,
            "hasliked": 0,
            "id": "mtlGWM",
            "likes": 3,
            "name": "Three Lights",
            "published": 3,
            "tags": [
                "raytracing",
                "raytracer",
                "ray",
                "pointlight",
                "light",
                "sphere",
                "sky",
                "ball",
                "orb",
                "plane",
                "flare",
                "lights",
                "floor",
                "ground",
                "raycaster",
                "tracasting"
            ],
            "usePreview": 0,
            "username": "SONENEIS",
            "viewed": 182
        },
        "renderpass": [
            {
                "code": "mat2 rot(float a){return mat2(cos(a),-sin(a),sin(a),cos(a));}\n\nstruct Inter{\n\tfloat t;\n\tvec3 nor;\n\tfloat id;\n};\n\nfloat iSphere(vec3 ro,vec3 rd,out vec3 nor,vec4 s){\n\tvec3 oc = ro - s.xyz;\n\tfloat b = dot(oc,rd);\n\tfloat c = dot(oc,oc) - s.w*s.w;\n\tfloat h = b*b - c;\n\tfloat t = -b - sqrt(h);\n\tif(h < 0.0) t = -1.0;\n\tnor = normalize(((ro+rd*t)-s.xyz)/s.w);\n\treturn t;\n}\n\nfloat iPlane(vec3 ro,vec3 rd,out vec3 nor,vec4 p){\n\tp.xyz = normalize(p.xyz);\n\tnor = p.xyz;\n\treturn -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\nInter raytrace(vec3 ro,vec3 rd){\n\tInter res = Inter(9999999999.9,vec3(0.0),-1.0);\n\tfloat temp = res.t;\n  vec3 tnor = res.nor;\n\n  temp = iPlane(ro,rd,tnor,vec4(0,1,0,0.5));\n  if(temp > 0.0 && temp < res.t){\n  \tres.nor = tnor;\n  \tres.id = 0.0;\n  \tres.t = temp;\n  }\n\n  temp = iSphere(ro,rd,tnor,vec4(0.5,0.0,-0.4,0.5));\n  if(temp > 0.0 && temp < res.t){\n    res.nor = tnor;\n    res.id = 3.0;\n  \tres.t = temp;\n  }\n\n  temp = iSphere(ro,rd,tnor,vec4(-0.6,sin(iTime*4.0)*0.2,-0.5,0.3));\n  if(temp > 0.0 && temp < res.t){\n    res.nor = tnor;\n    res.id = 1.0;\n  \tres.t = temp;\n  }\n\n  temp = iSphere(ro,rd,tnor,vec4(0.2,sin(iTime*6.0)*0.1,0.3,0.3));\n  if(temp > 0.0 && temp < res.t){\n    res.nor = tnor;\n    res.id = 2.0;\n  \tres.t = temp;\n  }\n\n  temp = iSphere(ro,rd,tnor,vec4(-0.2,-0.2,0.5,0.3));\n  if(temp > 0.0 && temp < res.t){\n    res.nor = tnor;\n    res.id = 4.0;\n  \tres.t = temp;\n  }\n\n\treturn res;\n}\n\nfloat pointLight(vec3 ro,vec3 rd,float t,vec3 lpos,float r){\n\tfloat lig = 1.0;\n\n\tfloat dt = dot(lpos-ro,rd);\n\tdt = clamp(dt,0.0,t);\n\tvec3 p = ro+rd*dt;\n\tlig = length(p-lpos);\n\n\treturn r/5.0 / (lig*lig);\n}\n\nvoid mainImage(out vec4 fragColor,vec2 fragCoord){\n  vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  vec3 col = vec3(0.0);\n\n  vec3 ro = vec3(0.0,0.0,2.5);\n  vec3 rd = normalize(vec3(uv,-2.0));\n\n  ro.xz *= rot(iTime*0.5);\n  rd.xz *= rot(iTime*0.5);\n\n  Inter hit = raytrace(ro,rd);\n\n  int ligsLen = 3;\n  vec3 lights[3] = vec3[](\n  \t2.0*vec3(-0.5,0.1,0.7),\n    2.0*vec3(0.2,0.2,0.3),\n    2.0*vec3(-0.5,1.0,-0.5)\n  );\n  \n  if(hit.t > 0.0 && hit.id != -1.0){\n  \tvec3 pos = ro + rd*hit.t;\n  \tvec3 nor = hit.nor;\n    vec3 ref = reflect(rd,nor);\n\n    vec3 mate = vec3(0.0);\n    float albedo = 0.5;\n    float shininess = 15.0;\n\n    if(hit.id == 0.0){\n    \tmate += 0.5+0.5*mod(floor(pos.x*5.0)+floor(pos.z*5.0),2.0);\n    }else if(hit.id == 1.0){\n    \tmate += vec3(1.0,0.3,0.15)+0.5;\n    \tshininess = 20.0;\n      albedo = 1.2;\n    }else if(hit.id == 2.0){\n   \t mate += vec3(0.2,0.0,0.3)+0.5;\n    \talbedo = 0.5;\n    }else if(hit.id == 3.0){\n      mate += vec3(0.7,1.5,0.5);\n      shininess = 1000.0;\n      albedo = 10.0;\n    }else if(hit.id == 4.0){\n      mate += vec3(0.0,0.0,0.5);\n      shininess = 100.0;\n      albedo = 2.0;\n    }\n\n    for(int i=0;i<ligsLen;i++){\n  \t\tvec3 lig = normalize(lights[i]-pos);\n  \t\tfloat dif = clamp(dot(nor,lig),0.0,1.0);\n  \t  float sha = step(length(pos-lig),raytrace(pos,lig).t);\n    \tdif *= sha;\n    \tfloat spe = clamp(dot(ref,lig),0.0,1.0);\n  \t\tspe = albedo * pow(spe,shininess);\n\n    \tcol += mate * dif;\n  \t  col += spe * dif;\n    }\n    col /= float(ligsLen);\n  }\n  \n  col = mix(col,mix(vec3(0.2,0.1,1),vec3(0.5,0.8,1),clamp(1.0-rd.y,0.0,1.0)),clamp(hit.t*hit.t*0.01,0.0,1.0));\n  \n  for(int i=0;i<ligsLen;i++){\n  \tcol = mix(col,vec3(1),pointLight(ro,rd,hit.t,lights[i],0.005));\n  }\n  \n  fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}