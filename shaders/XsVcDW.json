{
    "Shader": {
        "info": {
            "date": "1522052615",
            "description": "Seeking \"intelligence\" (i.e. radio users) in the cosmos; auto/manual day/night views, mouseable",
            "flags": 0,
            "hasliked": 0,
            "id": "XsVcDW",
            "likes": 10,
            "name": "Big SETI",
            "published": 3,
            "tags": [
                "grid",
                "radio",
                "antenna",
                "telescope"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 595
        },
        "renderpass": [
            {
                "code": "// \"Big SETI\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA   1   // optional antialiasing (0/1 - off/on)\n\nfloat PrEllips2AnDf (vec3 p, vec2 r, float w);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvec3 HexGrid (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 qHit, sunDir, ltPos, ltAx;\nvec2 gId;\nfloat tCur, dstFar, hgSize, hgLim, antAz, antEl, netAz, netEl;\nint idObj;\nbool isNt;\nconst int idBase = 1, idRng = 2, idLegB = 3, idJnt = 4, idMesh = 5, idLegR = 6,\n   idRefl = 7, idDsk = 8;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  vec2 rAnt;\n  float dMin, d, r, w;\n  dMin = dstFar;\n  rAnt = vec2 (2.7, 2.);\n  w = 0.015;\n  d = dMin;\n  p.xz -= HexToPix (gId * hgSize);\n  q = p;  q.y -= 0.5;\n  d = PrCylDf (q.xzy, 1.55, 0.5);\n  DMINQ (idBase);\n  q.y -= 0.55;\n  qq = q;\n  qq.xz = Rot2D (qq.xz, antAz);\n  q = qq;\n  d = PrCylAnDf (q.xzy, 1.4, 0.1, 0.05);\n  DMINQ (idRng);\n  q.y -= 2.8;\n  d = PrCylDf (q.xzy, 0.35, 0.05);\n  DMINQ (idRng);\n  q = qq;  q.y -= 3.1;\n  r = length (q);\n  q.xz = Rot2D (q.xz, pi / 6.);\n  q.xz = Rot2D (q.xz, ((r > 0.) ? 2. * pi * (floor (6. * atan (q.z, - q.x) / (2. * pi) +\n     0.5) / 6.) : 0.));\n  q.y -= -0.6;\n  q.xy = Rot2D (q.xy, 0.13 * pi);\n  q.xy -= vec2 (-0.3, -1.35);\n  d = PrCylDf (q.xzy, 0.05, 1.5);\n  DMINQ (idLegB);\n  q = qq;  q.y -= 2.8;\n  d = max (max (PrFlatCylDf (q.yxz, 0.27, 0.2, 0.25), - q.y), 0.05 - abs (abs (q.z) - 0.1));\n  DMINQ (idJnt);\n  qq.y -= 3.1;\n  qq.xy = Rot2D (qq.xy, antEl);\n  q = qq;  q.y -= 0.17;\n  d = max (PrFlatCylDf (q.yxz, 0.17, 0.18, 0.15), 0.05 - abs (q.z));\n  DMINQ (idJnt);\n  qq.y -= rAnt.y + 0.45;\n  r = length (qq);\n  if (r > 0.) {\n    q = qq;\n    q.xz = Rot2D (q.xz, 2. * pi * (floor (netAz * atan (q.z, - q.x) / (2. * pi) + 0.5) / netAz));\n    d = abs (q.z) - w;\n    q = qq;\n    q.xz = Rot2D (q.xz, pi / netAz);\n    q.xz = Rot2D (q.xz, 2. * pi * (floor (netAz * atan (q.z, - q.x) / (2. * pi) + 0.5) / netAz));\n    q.xy = Rot2D (q.xy, 0.5 * pi * (floor (netEl * asin (q.y / r) / (0.5 * pi) + 0.5) / netEl));\n    d = min (d, abs (q.y) - w);\n    q = qq;\n    d = max (max (d, PrEllips2AnDf (q.xzy, rAnt, w)), q.y - w);\n    q.y -= 2.5 * w;\n    d = min (d, PrTorusDf (q.xzy, 1.5 * w, rAnt.x));\n    DMINQ (idMesh);\n    q = qq;\n    q.xz = Rot2D (q.xz, 2. * pi * (floor (3. * atan (q.z, - q.x) / (2. * pi) + 0.5) / 3.));\n    q.x -= - rAnt.x;\n    q.xy = Rot2D (q.xy, 0.3 * pi);\n    q.y -= 1.5;\n    d = PrCylDf (q.xzy, 0.03, 1.5);\n    DMINQ (idLegR);\n    q = qq;  q.y -= 1.8;\n    d = PrCylAnDf (q.xzy, 0.25, 0.03, 0.05);\n    DMINQ (idRefl);\n    q = qq;  q.y -= 0.02 - rAnt.y;\n    d = PrCylDf (q.xzy, 0.5, 0.07 * (1. - dot (q.xz, q.xz) / 0.3));\n    DMINQ (idDsk);\n  }\n  return dMin;\n}\n\nvoid SetGrdConf ()\n{\n  antAz = pi * sin (0.1 * tCur);\n  antEl = 0.25 * pi * (1. + 0.8 * sin (tCur));\n  if (gId.x == 0. && gId.y == 0.) {\n    antEl = 0.1 * pi;\n    antAz *= 0.5;\n  } else if (gId.y == 0.) {\n    antAz *= -1.;\n  } else if (gId.x + gId.y == 0.) {\n    antEl = 0.5 * pi - antEl;\n  }\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.y == 0.) rd.y = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / hgSize;\n  pM = HexToPix (PixToHex (ro.xz / hgSize));\n  hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n  s = Minv3 (hv);\n  gIdP = vec2 (-999.);\n  dHit = 0.;\n  for (int j = 0; j < 250; j ++) {\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (max (max (abs (gId.x), abs (gId.y)), abs (gId.x + gId.y)) <= hgLim) {\n      if (gId.x != gIdP.x || gId.y != gIdP.y) {\n        gIdP = gId;\n        SetGrdConf ();\n      }\n      d = ObjDf (p);\n    } else d = dstFar;\n    if (dHit + d < s) dHit += d;\n    else {\n      dHit = s + 0.001;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n      hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n      s = Minv3 (hv);\n    }\n    if (d < 0.0005 || dHit > dstFar || p.y < 0.) break;\n  }\n  if (d >= 0.0005) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  gIdP = vec2 (-999.);\n  d = 0.1;\n  for (int j = 0; j < 60; j ++) {\n    p = ro + d * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (max (max (abs (gId.x), abs (gId.y)), abs (gId.x + gId.y)) > hgLim) break;\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetGrdConf ();\n    }\n    h = ObjDf (p);\n    sh = min (sh, smoothstep (0., 0.03 * d, h));\n    d += min (0.18, 3. * h);\n    if (h < 0.001) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec3 ShStagGrid (vec2 p, vec2 g)\n{\n  vec2 q, sq, ss;\n  q = p * g;\n  if (2. * floor (0.5 * floor (q.y)) != floor (q.y)) q.x += 0.5;\n  sq = smoothstep (0.05, 0.1, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.3 * smoothstep (0.3, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.8 + 0.2 * sq.x * sq.y, ss.y);\n}\n\nvec3 SkyCol (vec3 rd)\n{\n  vec3 col, rds, mDir, vn;\n  float mRad, bs, ts;\n  if (isNt) {\n    mDir = normalize (vec3 (-1., 0.1, 0.));\n    mRad = 0.01;\n    col = vec3 (0.02, 0.02, 0.04) + vec3 (0.06, 0.04, 0.02) *\n       pow (clamp (dot (rd, mDir), 0., 1.), 16.);\n    bs = dot (rd, mDir);\n    ts = bs * bs - dot (mDir, mDir) + mRad * mRad;\n    if (ts > 0.) {\n      ts = bs - sqrt (ts);\n      if (ts > 0.) {\n        vn = normalize ((ts * rd - mDir) / mRad);\n        col += 0.8 * vec3 (1., 0.9, 0.5) * clamp (dot (vec3 (0.5, 0.4, -0.77), vn) *\n           (1. - 0.3 * Noisefv3 (4. * vn)), 0., 1.);\n      }\n    }\n    if (ts < 0.) {\n      rds = floor (2000. * rd);\n      rds = 0.00015 * rds + 0.1 * Noisefv3 (0.0005 * rds.yzx);\n      for (int j = 0; j < 19; j ++) rds = abs (rds) / dot (rds, rds) - 0.9;\n      col += smoothstep (0.01, 0.04, rd.y) * vec3 (0.8, 0.8, 0.6) *\n         min (1., 0.5e-3 * pow (min (6., length (rds)), 5.));\n    }\n  } else {\n    rd.y = abs (rd.y) + 0.001;\n    col = mix (vec3 (0.2, 0.3, 0.5) + 0.3 * pow (max (dot (rd, sunDir), 0.), 8.), vec3 (1.),\n       0.2 + 0.8 * rd.y * Fbm2 (2. * rd.xz / rd.y));\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, rg, ltDir;\n  float dstObj, spec, a, r, h, sh, atten;\n  bool isBg, isLit;\n  netAz = 84.;\n  netEl = 24.;\n  dstObj = ObjRay (ro, rd);\n  isBg = true;\n  isLit = false;\n  if (dstObj < dstFar) {\n    isBg = false;\n    ro += dstObj * rd;\n    gId = PixToHex (ro.xz / hgSize);\n    vn = ObjNf (ro);\n    spec = 0.1;\n    r = length (qHit.xz);\n    a = atan (qHit.z, - qHit.x) / (2. * pi);\n    if (idObj == idBase) {\n      col = vec3 (0.6, 0.3, 0.1);\n      h = smoothstep (-0.45, -0.35, qHit.y);\n      if (vn.y < 0.01) {\n        rg = ShStagGrid (vec2 (a, qHit.y), vec2 (32., 8.));\n        col *= rg.y * (1. - 0.2 * Noisefv2 (16. * vec2 (8. * a, qHit.y) + 17. * gId));\n        if (rg.x == 0.) {\n          vn.y = rg.z * h;\n          vn.xz *= sqrt (1. - vn.y * vn.y * h);\n        } else vn.xz = Rot2D (vn.xz, - rg.x * h);\n      } else col *= 0.5 + 0.5 * SmoothBump (0.05, 0.95, 0.02, mod (6. * r, 1.));\n      col = mix (vec3 (0.45, 0.4, 0.1) * (1.-\n         0.3 * Noisefv2 (64. * vec2 (8. * a, qHit.y))), col, h);\n      vn = VaryNf (32. * qHit, vn, 0.5);\n      spec = 0.05;\n    } else if (idObj == idRng) {\n      col = vec3 (0.4, 0.43, 0.4) * (0.5 +\n         0.5 * SmoothBump (0.05, 0.95, 0.02, mod (36. * a, 1.)));\n    } else if (idObj == idLegB) {\n      col = vec3 (0.4, 0.43, 0.4) * (0.5 +\n         0.5 * SmoothBump (0.05, 0.95, 0.02, mod (8. * qHit.y, 1.)));\n    } else if (idObj == idJnt) {\n      col = vec3 (0.5, 0.5, 0.55);\n      if (abs (qHit.z) > 0.24 && length (qHit.xy - vec2 (0., 0.27)) < 0.08) col *= 0.5;\n    } else if (idObj == idMesh) {\n      col = vec3 (0.6, 0.6, 0.65);\n      spec = 0.2;\n    } else if (idObj == idLegR) {\n      col = vec3 (0.6, 0.5, 0.4) * (0.5 +\n         0.5 * SmoothBump (0.1, 0.9, 0.02, mod (8. * qHit.y, 1.)));\n    } else if (idObj == idRefl) {\n      if (isNt) {\n        col = vec3 (1., 0.7, 0.2) * (0.3 +\n           0.7 * SmoothBump (0.4, 0.6, 0.02, mod (18. * a, 1.)));\n        isLit = true;\n      } else col = vec3 (0.6, 0.5, 0.4) * (0.5 +\n         0.5 * SmoothBump (0.05, 0.95, 0.02, mod (36. * a, 1.)));\n    } else if (idObj == idDsk) {\n      col = vec3 (0.7, 0.6, 0.4);\n      if (qHit.y > 0.) col *= 0.7 +\n         0.3 * SmoothBump (0.1, 0.9, 0.02, mod (16. * r + a, 1.));\n    }\n  } else if (rd.y < 0.) {\n    isBg = false;\n    dstObj = - ro.y / rd.y;\n    ro += dstObj * rd;\n    col = 0.7 * mix (vec3 (0.35, 0.4, 0.2), vec3 (0.45, 0.4, 0.1),\n       smoothstep (0.3, 0.7, Fbm2 (ro.xz)));\n    spec = 0.;\n    vn = VaryNf (ro, vec3 (0., 1., 0.), 2.);\n  }\n  if (isBg) {\n    col = SkyCol (rd);\n  } else if (! isLit) {\n    if (isNt) {\n      ltDir = ltPos - ro;\n      atten = 1.2 * smoothstep (0.1, 0.2, dot (ltAx, - ltDir)) /\n         (1. + 0.002 * pow (length (ltDir), 1.5));\n      ltDir = normalize (ltDir);\n    }\n    sh = (dstObj < dstFar) ? ObjSShadow (ro, (isNt ? ltDir : sunDir)) : 1.;\n    if (isNt) {\n      col = mix (col, Maxv3 (col) * vec3 (1., 1., 0.8), 0.5);\n      col = atten * (col * (0.2 + 0.8 * sh * max (dot (vn, ltDir), 0.)) +\n         2. * spec * sh * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.));\n    } else {\n      col = col * (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.)) +\n         spec * sh * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n      col = mix (col, SkyCol (rd), smoothstep (0.5, 1., dstObj / dstFar));\n    }\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvd, ori, ca, sa, mMid, ut, mSize;\n  float el, az, asp, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  isNt = (mod (0.05 * tCur, 2.) < 1.);\n  asp = canvas.x / canvas.y;\n  mSize = (1./6.) * vec2 (asp, 1.);\n  mMid = vec2 (1. / mSize.y, 1. / mSize.y - 1.) * mSize * vec2 (1. - 1./6., -1.);\n  ut = abs (uv - mMid) - mSize;\n  if (max (ut.x, ut.y) < 0.) {\n    uv = (uv - mMid) / mSize.y;\n    isNt = isNt = ! isNt;\n  }\n  hgSize = 10.;\n  hgLim = 7.;\n  az = 0.;\n  el = -0.17 * pi;\n  if (mPtr.z > 0. && (mPtr.x < 0.5 - 1./6. || mPtr.y > -0.5 + 1./6.)) {\n    az += 3. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.01 * pi * tCur;\n    el += 0.15 * pi * cos (0.02 * pi * tCur);\n    if (mPtr.z > 0. && ! (mPtr.x < 0.5 - 1./6. || mPtr.y > -0.5 + 1./6.)) isNt = ! isNt;\n  }\n  el = clamp (el, -0.4 * pi, 0.4 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  zmFac = 6. - 4. * abs (el);\n  ro = vuMat * vec3 (0., 0., -40.);\n  if (ro.y < 1.) {\n    ro.y = 1.;\n    ro.xz *= sqrt (1599.) / length (ro.xz);\n  }\n  dstFar = 300.;\n  sunDir = normalize (vec3 (cos (0.02 * pi * tCur), 1., sin (0.02 * pi * tCur)));\n  ltPos = ro + vuMat * vec3 (3., 3., 0.);\n  ltAx = vuMat * vec3 (0., 0., 1.);\n#if ! AA\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  col = ShowScene (ro, rd);\n#else\n  col = vec3 (0.);\n  for (int iy = 0; iy <= 1; iy ++) {\n    for (int ix = 0; ix <= 1; ix ++) {\n      uvd = (0.5 / canvas.y) * (2. * vec2 (float (ix), float (iy)) - 1.);\n      rd = vuMat * normalize (vec3 (uv + uvd, zmFac));\n      col += ShowScene (ro, rd);\n    }\n  }\n  col *= 0.25;\n#endif\n  if (max (ut.x, ut.y) < 0. && min (abs (ut.x), abs (ut.y)) * canvas.y < 2.)\n     col = vec3 (0.1, 0.1, 0.8);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrEllips2AnDf (vec3 p, vec2 r, float w)\n{\n  return max ((length (p / (r.xxy + w)) - 1.) * (min (r.x, r.y) + w),\n            - (length (p / (r.xxy - w)) - 1.) * (min (r.x, r.y) - w));\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  float d;\n  d = length (p.xy - vec2 (rhi * clamp (p.x / rhi, -1., 1.), 0.)) - rlo;\n  if (h > 0.) d = max (d, abs (p.z) - h);\n  return d;\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec3 HexGrid (vec2 p)\n{\n  vec2 q;\n  p = p - HexToPix (PixToHex (p));\n  q = abs (p);\n  return vec3 (p, 0.5 * sqrt3 - q.x + 0.5 * min (q.x - sqrt3 * q.y, 0.));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}