{
    "Shader": {
        "info": {
            "date": "1683576464",
            "description": "Click to invert colors",
            "flags": 0,
            "hasliked": 0,
            "id": "mtK3Rh",
            "likes": 5,
            "name": "Additive vs. multiplicative",
            "published": 3,
            "tags": [
                "colors"
            ],
            "usePreview": 0,
            "username": "Slals",
            "viewed": 172
        },
        "renderpass": [
            {
                "code": "#define M(C,s) col = mix(col, C, clamp(s,0.,1.))\n\nfloat circleSDF(vec2 uv, float s) {\n    return length(uv) - s + 1.0;\n}\nfloat fill(float x, float s) {\n    float pw = 1.0 / iResolution.y;\n    return smoothstep(x - pw, x + pw, s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    vec3 col = vec3(0.0);\n    col += (step(0.0, uv.x) - step(0.01, uv.x)) * vec3(1.0);\n    \n    vec3 r = vec3(1.0, 0.0, 0.0), g = vec3(0.0, 1.0, 0.0), b = vec3(0.0, 0.0, 1.0);\n    vec3 c = vec3(0.0, 1.0, 1.0), m = vec3(1.0, 0.0, 1.0), y = vec3(1.0, 1.0, 0.0);\n    \n    if (iMouse.z >= 1.0) {\n        r = c;\n        g = y;\n        b = m;\n        \n        c = vec3(1.0, 0.0, 0.0);\n        m = vec3(0.0, 0.0, 1.0);\n        y = vec3(0.0, 1.0, 0.0);\n \n    }\n    \n    float s = 0.2, yO = 0.25, xO = 0.42;\n    float leftACircle = fill(circleSDF(uv + vec2(xO, -yO * abs(sin(iTime))), s), 1.0);\n    float leftBCircle = fill(circleSDF(uv + vec2(xO, yO * abs(sin(iTime))), s), 1.0);\n    float rightACircle = fill(circleSDF(uv + vec2(-xO, -yO * abs(sin(iTime))), s), 1.0);\n    float rightBCircle = fill(circleSDF(uv + vec2(-xO, yO * abs(sin(iTime))), s), 1.0);\n    float midACircle = fill(circleSDF(uv + vec2(xO - 0.2 * sin(iTime), 0.0), s), 1.0);\n    float midBCircle = fill(circleSDF(uv + vec2((xO - 0.2 * sin(-iTime)) - xO * 2.01, 0.0), s), 1.0);\n    \n    col += leftACircle * r + leftBCircle * b;\n    col += rightACircle * c + rightBCircle * m;\n    col += midACircle * g + midBCircle * y;\n    \n    col = M(c * m, rightACircle + rightBCircle - 1.0);\n    col = M(y * c, midBCircle + rightACircle - 1.0);\n    col = M(y * m, midBCircle + rightBCircle - 1.0);\n    col = M(c * m * y, midBCircle + rightACircle + rightBCircle - 2.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}