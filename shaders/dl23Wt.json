{
    "Shader": {
        "info": {
            "date": "1674145989",
            "description": "An idea I had to roughly recreate Photoshop's \"Refine Edges\" effect. Mouse controls the radius :)\nFirst you find the edge and its direction, then sample colors inside and outside of it. Finally you lerp between a property of those colors.",
            "flags": 0,
            "hasliked": 0,
            "id": "dl23Wt",
            "likes": 2,
            "name": "Refine Edges (Approximation)",
            "published": 3,
            "tags": [
                "2d",
                "chroma",
                "color",
                "greenscreen",
                "chromakey",
                "matte",
                "compositing",
                "photoshop",
                "despill",
                "decontaminate"
            ],
            "usePreview": 0,
            "username": "MysteryPancake",
            "viewed": 268
        },
        "renderpass": [
            {
                "code": "const float TAU = 6.28318530;\n\nfloat getAlpha(vec3 col) {\n    const vec3 green = vec3(0.0, 1.0, 0.0);\n    return step(0.65, distance(col, green));\n}\n\nfloat inverseLerp(float x, float xMin, float xMax) {\n\treturn (x - xMin) / (xMax - xMin);\n}\n\n// From https://www.shadertoy.com/view/lsdGzN\nfloat xyzF(float t) {\n    return mix(pow(t, 1.0 / 3.0), 7.787037 * t + 0.139731, step(t, 0.00885645));\n}\n\nvec3 rgb2lch(vec3 c) {\n\tc *= mat3(0.4124, 0.3576, 0.1805, 0.2126, 0.7152, 0.0722, 0.0193, 0.1192, 0.9505);\n    c.x = xyzF(c.x);\n\tc.y = xyzF(c.y);\n\tc.z = xyzF(c.z);\n\tvec3 lab = vec3(max(0.0, 116.0 * c.y - 16.0), 500.0 * (c.x - c.y), 200.0 * (c.y - c.z)); \n    return vec3(lab.x, length(vec2(lab.y, lab.z)), atan(lab.z, lab.y));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    const float dirSteps = 64.0;\n    \n    // Radius\n    float radius = iMouse.z > 0.0 ? iMouse.x / iResolution.x * 128.0 : sin(iTime * 6.0) * 8.0 + 16.0;\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    float alpha = getAlpha(fragColor.rgb);\n    \n    // Correct aspect ratio\n    vec2 aspect = 1.0 / vec2(textureSize(iChannel0, 0));\n    \n    // STEP 1: Find average direction away from edge\n    \n    vec2 dirAvg = vec2(0.0);\n    bool interior = false;\n    \n    for (float i = 0.0; i < TAU; i += TAU / dirSteps) {\n        // Move in a circle to find edges within radius\n        vec2 dir = vec2(sin(i), cos(i));\n        vec4 col = texture(iChannel0, uv + dir * aspect * radius);\n        \n        // Edge was found, accumulate for average\n        float neighbor = getAlpha(col.rgb);\n        if (alpha != neighbor) {\n            dirAvg += dir;\n            interior = alpha > neighbor;\n        }\n    }\n    \n    // No edges within radius\n    if (length(dirAvg) <= 0.0) return;\n    \n    // Calculate average direction\n    dirAvg = normalize(dirAvg);\n\n    // STEP 2: Raycast in average direction until an edge is hit\n    \n    float d = radius * 0.5;\n    float move = d * 0.5;\n    // Binary search works better than linear search\n    for (int i = 0; i < 8; i++, move *= 0.5) {\n        vec4 col = texture(iChannel0, uv + dirAvg * aspect * d);\n        d += alpha != getAlpha(col.rgb) ? -move : move;\n    }\n    \n    // STEP 3: Fix interior direction and distance\n    \n    dirAvg = interior ? dirAvg : -dirAvg;\n    d = interior ? radius - d : d + radius;\n    \n    // STEP 4: Sample colors inside and outside edge\n    \n    vec3 insideColor = texture(iChannel0, uv - dirAvg * aspect * d).rgb;\n    vec3 outsideColor = texture(iChannel0, uv + dirAvg * aspect * (radius * 2.0 - d)).rgb;\n    \n    // STEP 5: Lerp between a property, I used the chrominance but Photoshop likely doesn't\n    \n    float chroma = inverseLerp(rgb2lch(fragColor.rgb).y, rgb2lch(outsideColor).y, rgb2lch(insideColor).y);\n    \n    // Display matte\n    fragColor.rgb = vec3(chroma);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}