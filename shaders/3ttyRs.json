{
    "Shader": {
        "info": {
            "date": "1609723220",
            "description": "asdf asdf",
            "flags": 32,
            "hasliked": 0,
            "id": "3ttyRs",
            "likes": 0,
            "name": "Screenspace Normal Calculation",
            "published": 3,
            "tags": [
                "normals",
                "heightmap",
                "screenspace"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 544
        },
        "renderpass": [
            {
                "code": "vec2 fetch(in vec2 p) {\n    return texture(iChannel0, p / iResolution.xy).rg;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 r = fetch(fragCoord + vec2(1.0, 0.0));\n    vec2 t = fetch(fragCoord + vec2(0.0, 1.0));\n    vec2 o = fetch(fragCoord);\n\n    vec3 n = normalize(vec3(o.r - r.r, o.r - t.r, 1.0));\n\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    if (o.g > 0.5) {\n        fragColor.rgb += max(0.0, dot(n, vec3(-0.58, 0.58, 0.58)));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float mapScene(in vec3 p) {\n    float r = iTime * 0.5;\n    float c = cos(r), s = sin(r);\n    p.xz *= mat2(c, s, -s, c);\n    p.yz *= mat2(c, s, -s, c);\n    return max(abs(p.x) - 2.0, max(abs(p.y) - 1.0, abs(p.z) - 3.0));\n}\n\nvec3 getNormal(in vec3 p) {\n    return normalize(vec3(mapScene(p + vec3(0.001, 0.0, 0.0)) - mapScene(p - vec3(0.001, 0.0, 0.0)),\n                          mapScene(p + vec3(0.0, 0.001, 0.0)) - mapScene(p - vec3(0.0, 0.001, 0.0)),\n                          mapScene(p + vec3(0.0, 0.0, 0.001)) - mapScene(p - vec3(0.0, 0.0, 0.001))));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 1000000.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 8.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    float t = 0.0;\n    for (float i=0.0; i < 150.0; i++) {\n        vec3 p = ro + rd * t;\n        float d = mapScene(p);\n        if (d < 0.001) {\n            fragColor.r = p.z;\n            fragColor.g = 1.0;\n            break;\n        }\n\n        if (t > 50.0) {\n            break;\n        }\n\n        t += d;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}