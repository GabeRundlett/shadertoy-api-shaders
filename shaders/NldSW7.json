{
    "Shader": {
        "info": {
            "date": "1671733338",
            "description": "Some old never published visuals I did that I used for some VJ sets.",
            "flags": 64,
            "hasliked": 0,
            "id": "NldSW7",
            "likes": 17,
            "name": "DnB corridor",
            "published": 3,
            "tags": [
                "dark",
                "dnb",
                "boomboom"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 499
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n#define FFT(a) pow(texelFetch(iChannel2, ivec2(a, 0), 0).x, 5.)\n\nfloat _time;\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\nvec2 _max(vec2 a, vec2 b)\n{\n    if (a.x > b.x)\n        return a;\n    return b;\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(l.x, max(l.y, l.z));\n}\n\n\nvec2 map(vec3 p)\n{\nfloat ttunnel = _time*55.;\nvec3 po = p;\n    p.zy += vec2(_time*.5,0.);\n//return vec2(length(p)-.5, 0.);\n    vec2 acc = vec2(1000., -1.);\n    acc = _min(acc, vec2(-p.y\n    +sin(p.x+p.z-_time)*.1+0.025*sin((p.x-p.z*.5)*3.-_time*4.5)\n    +0.015*sin((p.x+p.z)*12.3+_time)\n    +0.01*sin((p.x-p.z)*9.+_time)*sin(p.x*5.)\n    , 0.));\n    p.zy += vec2(ttunnel*.5,0.);\n    float offWall = .2*(1.-sat(pow(texture(iChannel1, p.zy*.1).z, 5.)));\n    acc = _min(acc, vec2(-(abs(p.x)-1.-offWall), 1.));\n    acc = _max(acc, vec2(abs(po.z)-20., 0.));\n    \n    vec3 cpos = po-vec3(0,-1.+sin(_time),-5.);\n    cpos.zy*=r2d(_time);\n    cpos.xz*= r2d(_time*.5);\n    acc = _min(acc, vec2(_cube(cpos, vec3(.5)), 2.));\n    \n    return acc;\n}\n\nvec3 _norm(float d, vec3 p)\n{\n    return normalize(-cross(dFdx(p), dFdy(p)));\n    vec2 e = vec2(0.01,0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x<0.001)\n            return vec3(res.x, distance(ro, p), res.y);\n        p+= rd * res.x;\n    }\n    return vec3(-1.);\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 2.5;\n    if (mod(iTime, 5.) < 2.)\n        fov += 5.5;\n    if (mod(iTime, 10.) < 5.)\n        fov *= .2;\n    fov -= FFT(10)*.5;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nfloat lenny(vec2 v)\n{\n    return abs(v.x)+abs(v.y);\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(1.);\n    \n    float dist = mix(-20., -15., mod(_time, 5.)/5.+FFT(10));\n    vec3 ro = vec3(sin(iTime+3.1415),-6.+sin(_time)*5.,dist);\n    vec3 ta = vec3(0.,0.,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    rd.xy *= r2d(sin(_time+FFT(15)*5.)*.25);\n    vec3 res = trace(ro, rd, 256);\n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd * res.y;\n        vec3 n = _norm(res.x, p);\n        \n        //col = n*.5+.5;\n        \n        if (res.z == 0.)\n        {\n            col = vec3(.05);\n            n.xz += 0.2*texture(iChannel0, p.xz*.1+_time*.025*vec2(1.,-1.)).x+.1*sin((p.x+p.z*.3)*8.+_time)+.1*sin(p.z*8.33-pow(abs(p.x)-.2, 5.)*10.)+.25*sin(_time+length((p.xz-vec2(0.,20.))*2.));\n            n = normalize(n);\n            col += pow(sat(-dot(normalize(vec3(0.,1.,1.)-rd), n)), 250.05)*vec3(.5)*length(uv*5.);\n        }\n        if (res.z == 1.)\n        {\n            col = vec3(.05);\n            col *= texture(iChannel0, p.zy*vec2(.01,2.)).xxx;\n            col += mix(vec3(0.), .15*texture(iChannel1, p.zy*.1*vec2(5.,1.)-vec2(-_time*.2, 0.)+sin((n.x+p.y+p.x)*3.+_time*.3)).xxx, \n            texture(iChannel0, p.zy*vec2(.1,1.)*.5).x);\n            col +=.1*texture(iChannel1, p.zy*vec2(1.,1.)*.5-vec2(-_time*.25,0.)).xyz;\n            \n        }\n        if (res.z == 2.)\n        {\n            col = vec3(0.0);\n            \n            col += (n*.5+.5)*pow(1.-sat(-dot(n, rd)), 5.);\n            //col = n*.5+.5;\n        }\n       col += vec3(.5)*pow(1.-sat(-dot(rd, n)), 5.);\n       col = sat(col);\n       col += pow(1.-sat(lenny(uv-vec2(0.,.15))), 3.)*1.2;\n       if (res.z == 1.)\n       {\n           col *= sat(pow(sat(-p.y*.25), .5)+.4);\n       }\n    }\n    \n    float waves = sin((uv.x+uv.y)*55.);\n     \n     float flicker = 0.1;\n     col = mix(col, 1.-col, sat(waves*400.)*pow(FFT(50),.25)*sat(length(uv*.25)));\n    return col;\n}\n\nvec3 rdr2(vec2 uv)\n{\n    vec2 dir = normalize(vec2(1.,1.));\n    float strength = 0.03*FFT(20);\n    vec3 col;\n    col.r = rdr(uv+dir*strength).r;\n    col.g = rdr(uv).g;\n    col.b = rdr(uv-dir*strength).b;\n    col *= mix(vec3(1.), vec3(0.180,1.000,0.863), sat(length(uv)*1.5-.3)*sat((sin(-iTime*5.+(uv.y-uv.x)*50.)-.9)*400.));\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    _time = iTime;//+texture(iChannel3, fragCoord/8.).x*.1;\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n\n    vec3 col = rdr2(uv);\n    col *= mix(vec3(0.5), vec3(1.), 1.-sat(lenny(uv*1.5)));\n    col = pow(col, vec3(1.2));\n    float flicker = 1./12.;\n    float flickperiod = 2.;\n    col = mix(col, 1.-col, FFT(125)*float(mod(iTime, flickperiod)<.5)*sat(mod(iTime, flicker)/flicker));\n    col = mix(fwidth(col)*10., col, sat((sin(iTime*.5)+.8)*400.));\n   \n    col = mix(col, col.zxy*vec3(.1,.1,.3)*8., sat(sin(iTime*.25)*400.));\n    col = col * 2.*vec3(sat((sin(iTime*.25)*.5+.5)+.5)*.5,texture(iChannel0, vec2(iTime*.05)).x, .5); \n    col *= sat(pow(FFT(10)+.3,5.)+.5)*2.;\n    fragColor = vec4(2.*mix(col, col.xxx, .5)*mix(vec3(.1,.45,.23), vec3(0.541,1.000,0.992), sat(length(uv))),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 31622,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/stylesofbeyond/subculture-1?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}