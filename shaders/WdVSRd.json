{
    "Shader": {
        "info": {
            "date": "1574796421",
            "description": "Just a simple RK4 integrated double pendulum.",
            "flags": 48,
            "hasliked": 0,
            "id": "WdVSRd",
            "likes": 6,
            "name": "Double pendulum.",
            "published": 3,
            "tags": [
                "rk4",
                "doublependulum"
            ],
            "usePreview": 0,
            "username": "Txoka",
            "viewed": 410
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n\t\n    fragColor=vec4(0);\n    \n    vec4 s=texelFetch(iChannel0,ivec2(0),0);\n    \n    vec2 a=-vec2(sin(s.x),cos(s.x))*l1;\n    vec2 b=-vec2(sin(s.y),cos(s.y))*l2;\n    \n    vec2 p1=origin+a;\n    vec2 p2=p1+b;\n    \n    fragColor+=line(uv,origin,p1,0.01);\n    fragColor+=line(uv,p1,p2,0.01);\n    \n    p1-=uv;\n    p2-=uv;\n    \n    fragColor.rgb+=vec3(0,0,1)*0.001*m1/dot(p1,p1);\n    fragColor.rgb+=vec3(1,0,0)*0.001*m2/dot(p2,p2);\n    \n    \n    fragColor+=\n         pow(texelFetch(iChannel1,ivec2(fragCoord), 0),vec4(1./1.8));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define tf texelFetch\nconst float pi=4.*atan(1.);\n\n\nconst float m1=\t2.;\nconst float m2= 1.;\n\nconst float l1=\t0.3;\nconst float l2=\t0.6;\n\nconst float g=\t9.8;\n\nconst float dt=\t1./60.;\n\nconst float damping=0.998;\t//0.5**(1/60/(vida media en segundos))\n\nconst vec2 origin=vec2(0);\n\nconst vec4 initial_state=vec4(\n    pi*.75\t\t,\n    -pi\t\t\t,\n    0\t\t\t,\n    0\n);\n\n/*const vec4 initial_state=vec4(\n    pi*.25\t\t,\n    -pi*.375\t,\n    0\t\t\t,\n    0\n);*/\n\n\n\n\nconst float line_smoothness=0.01;\nfloat line(vec2 uv, vec2 p, vec2 p2, float width){\n\tvec2 n=uv-p;\n\tvec2 w=p2-p;\n\tfloat r=clamp(dot(n,w)/dot(w,w),0.,1.);\n\tr=length(n-w*r);\n    return clamp(\n        smoothstep(\n    \t\twidth+line_smoothness,\n            width,\n            r\n        ),\n        0.,\n        1.\n    );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define FORCE 1\nbool keyPress(int ascii) { return (texture(iChannel1,vec2((.5+float(ascii))/256.,0.25)).x > 0.); }\n\nvec4 acc(vec4 s){\n\tvec4 f;\n\tf.x = s.z*dt;\n\tf.y = s.w*dt;\n\t\n    float d=s.x-s.y;\n    float c1=cos(d);\n    float s1=sin(d);\n    \n    float a=2.*m1+m2*(1.-cos(2.*d));\n    \n\tf.z =-g*(2.*m1+m2)*sin(s.x)-m2*g*sin(s.x-2.*s.y)-2.*s1*m2*(s.w*s.w*l2+s.z*s.z*l1*c1);\n\tf.z/=l1*a;\n    f.z*=dt;\n    \n    f.w =2.*s1*(s.z*s.z*l1*(m1+m2)+g*(m1+m2)*cos(s.x)+s.w*s.w*l2*m2*c1);\n\tf.w/=l2*a;\n    f.w*=dt;\n    \n    return f;\n}\n\nvoid RK4(inout vec4 s){\n\tvec4 k1 = acc(s\t\t\t);\n\tvec4 k2 = acc(s + k1*.5\t);\n\tvec4 k3 = acc(s + k2*.5\t);\n\tvec4 k4 = acc(s + k3\t);\n    vec4 d=(k1 + k4) / 6. + (k2 + k3) / 3.;\n\ts += d;\n    s.xy = mod(s.xy + pi, 2. * pi) - pi;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    if(fragCoord.x==0.5&&fragCoord.y==0.5){\n        vec4 s=texelFetch(iChannel0,ivec2(0),0);\n    \tRK4(s);\n    \t//if(iFrame==0)s=-vec4(pi*.75,-pi*.75,0,0);\n        if(iFrame==0||keyPress(32))s=initial_state;\n        fragColor=s;\n    }\n    if(fragCoord.x==0.5&&fragCoord.y==1.5)\n        fragColor=texelFetch(iChannel0,ivec2(0),0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "bool keyPress(int ascii) { return (texture(iChannel2,vec2((.5+float(ascii))/256.,0.25)).x > 0.); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n\tfragColor=texelFetch(iChannel1,ivec2(fragCoord),0)*damping;\n    \n    \n    vec2 s1=tf(iChannel0,ivec2(0,0),0).rg;\t//current time step\n    vec2 s0=tf(iChannel0,ivec2(0,1),0).rg;\t//one time step back\n    \n    \n    vec2 v1=\n        -vec2(sin(s1.x),cos(s1.x))*l1\n        -vec2(sin(s1.y),cos(s1.y))*l2;\t\t//current time step\n\n    vec2 v0=\n        -vec2(sin(s0.x),cos(s0.x))*l1\n        -vec2(sin(s0.y),cos(s0.y))*l2;\t\t//one time step back\n    \n    \n    vec2 p1=origin+v1;\t\t\t\t\t\t//current time step\n    vec2 p0=origin+v0;\t\t\t\t\t\t//one time step back\n    \n    vec2 k=normalize(p1-p0);\n    p0+=k*line_smoothness;\n    \n    fragColor+=line(uv,p1,p0,0.);\n    if(iFrame==0||keyPress(32))fragColor=vec4(0);\n   \t\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}