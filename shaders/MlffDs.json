{
    "Shader": {
        "info": {
            "date": "1513943738",
            "description": "Raymarching... understood, shading & shadow... understood, cartesian to polar and back... understood. But I just can't get how the distance estimator is derived. This nasty single line 45 makes it feel like cheating and not having a clue what I'm doing :(",
            "flags": 0,
            "hasliked": 0,
            "id": "MlffDs",
            "likes": 4,
            "name": "MacSlow's Mandelbulb attempt",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "fractal",
                "mandelbulb",
                "study"
            ],
            "usePreview": 0,
            "username": "MacSlow",
            "viewed": 1260
        },
        "renderpass": [
            {
                "code": "const int MAX_ITER = 96;\nconst float STEP_SIZE = .75;\nconst float EPSILON = .001;\nconst float PI = 3.1415926;\n\nstruct Ray {\n    vec3 ro;\n    vec3 rd;\n};\n\nstruct Result {\n\tvec3 point;\n    vec3 normal;\n    float dist;\n    int iter;\n    int id;\n};\n\nconst Result nullResult = Result (vec3 (.0), vec3 (.0), .0, 0, -1);\n\nfloat mandelbulb (vec3 pos, in float n, in float bail, in int iter)\n{\n\tvec3 z = pos;\n\tfloat dr = 1.;\n\tfloat r = .0;\n\tfor (int i = 0; i < iter; i++) {\n\t\tr = length (z);\n\t\tif (r > bail) break;\n\t\t\n\t\t// from cartesian to polar\n\t\tfloat theta = acos (z.z / r);\n\t\tfloat phi = atan (z.y, z.x);\n\t\tdr = pow(r, n - 1.) * n * dr + 1.;\n\t\t\n\t\t// scale and rotate the point\n\t\tfloat zr = pow (r, n);\n\t\ttheta = theta * n;\n\t\tphi = phi * n;\n\t\t\n\t\t// back to cartesian\n\t\tz = zr * vec3(sin(theta)*cos(phi), sin(theta)*sin(phi), cos(theta));\n\t\tz += pos;\n\t}\n\n    return .5 * log (r) * r / dr; // I just don't get this distance estimator here\n}\n\nfloat map (in vec3 p)\n{\n\tfloat d = mandelbulb (p, 8. + 8.*(.5 + .5*cos(iTime)), 4., 8);\n    return d;\n}\n\nvec3 normal (in vec3 p)\n{\n    float d = map (p);\n    vec3 e = vec3 (.001, .0, .0);\n    vec3 n = vec3 (map (p + e.xyy) - d,\n                   map (p + e.yxy) - d,\n                   map (p + e.yyx) - d);\n\n    return normalize (n);\n}\n\nResult march (in Ray ray)\n{\n    Result res = nullResult;\n\n    for (int i = 0; i < MAX_ITER; ++i) {\n        res.iter = i;\n        float tmp = map (ray.ro + res.dist * ray.rd);\n        if (tmp < EPSILON) break;\n        res.dist += tmp * STEP_SIZE;\n    }\n\n    res.point = ray.ro + res.dist * ray.rd;\n    res.normal = normal (res.point);\n    //res.id = tmp.id;\n\n    return res;\n}\n\nfloat shadow (in Ray ray, in vec3 lPos)\n{\n    float distToLight = distance (lPos, ray.ro);\n    float dist = .0;\n\n    for (int i = 0; i < MAX_ITER; ++i) {\n        float tmp = map (ray.ro + dist * ray.rd);\n        if (tmp < EPSILON) {\n            if (dist < distToLight)\n                return .125;\n            else\n                return 1.;\n        }\n        dist += tmp * STEP_SIZE;\n    }\n\n    return 1.;\n}\n\nvec3 shade (in Result res)\n{    \n    vec3 amb = vec3 (.1);\n    vec3 diffM = vec3 (.9, .25, .2);\n    vec3 diffL = vec3 (.95, .9, .3)*3.;\n    vec3 diffL2 = vec3 (.5, .7, .85)*2.;\n    vec3 specM = vec3 (1.);\n    vec3 specL = vec3 (1.);\n    vec3 lPos = vec3 (.4, 1., -1.25);\n    vec3 lPos2 = vec3 (-.25, .5, 1.);\n\tvec3 lDir = normalize (lPos - res.point);\n\tvec3 lDir2 = normalize (lPos2 - res.point);\n\n    float diff = clamp (dot (res.normal, lDir), .0, 1.);\n    float diff2 = clamp (dot (res.normal, lDir2), .0, 1.);\n    vec3 h = normalize (lDir + res.point);\n    vec3 h2 = normalize (lDir2 + res.point);\n    float shininess = 60.;\n    float spec = pow (clamp (dot (res.normal, h), .0, 1.), shininess);\n    float spec2 = pow (clamp (dot (res.normal, h2), .0, 1.), shininess);\n    float sha = shadow (Ray (res.point + .001 * res.normal, lDir), lPos);\n    float sha2 = shadow (Ray (res.point + .001 * res.normal, lDir2), lPos2);\n\n    return amb + sha * (diff * diffM * diffL + spec * specM * specL) + \n        sha2 * (diff2 * diffM * diffL2 + spec2 * specM * specL);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n\n    float r = 1.5 + 1.5 * (cos (iTime)*.5+.5);\n    float theta = (iMouse.x / iResolution.x) * PI;\n    float phi = -(iMouse.y / iResolution.y * 2. - 1.) * PI;\n    float x = r * sin (theta) * cos (phi);\n    float y = r * sin (theta) * sin (phi);\n\tfloat z = r * cos (theta);\n    vec3 ro = vec3 (x, y, z);\n    float zoom = 2.;\n    vec3 lookAt = vec3 (.0);\n    vec3 forward = normalize (lookAt - ro);\n    vec3 worldUp = vec3 (.0, 1., .0);\n    vec3 right = normalize (cross (worldUp, forward));\n    vec3 up = normalize (cross (forward, right));\n    vec3 camCenter = ro + zoom * forward;\n    vec3 i = camCenter + uv.x * right + uv.y * up;\n    vec3 rd = normalize (i - ro);\n\n    Ray ray = Ray (ro, rd);\n    Result res = march (ray);\n    vec3 col = shade (res);\n    float fog = float (res.iter) / float (MAX_ITER);\n    col *= 1. - (fog * fog);\n\n    col = col / (.85 + col);\n    col *= vec3 (.95, .9, .85);\n    col = .3*col + .7*sqrt (col);\n\n    fragColor = vec4 (col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}