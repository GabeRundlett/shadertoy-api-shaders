{
    "Shader": {
        "info": {
            "date": "1573663335",
            "description": "A result mostly out of my boredom and insomnia, a navigation radar inspired from retro video games.",
            "flags": 0,
            "hasliked": 0,
            "id": "WdySzw",
            "likes": 5,
            "name": "Navigation Radar",
            "published": 3,
            "tags": [
                "2d",
                "radar",
                "reconstruction"
            ],
            "usePreview": 0,
            "username": "piyushslayer",
            "viewed": 600
        },
        "renderpass": [
            {
                "code": "/**\nA very simple and basic navigation radar inspired from retro video games. This\nis mostly a result of my boredom. :p\n*/\n\n#define PI 3.1415926535\n\n#define ROT(x) mat2(cos(x), -sin(x), sin(x), cos(x))\n\n#define BRIGHT_GREEN vec3(0., 1.2, 0.)\n#define MEDIUM_GREEN vec3(0., .6, 0.)\n#define DARK_GREEN vec3(0., .3, 0.)\n#define RED vec3(10., 0., 0.)\n\n#define RADAR_SIZE .9\n#define RADAR_STRENGTH .45\n\n// hash function by Dave_Hoskins\nvec2 hash22(vec2 p)\n{\n\tuvec2 q = uvec2(ivec2(p))*uvec2(1597334673U, 3812015801U);\n\tq = (q.x ^ q.y) * uvec2(1597334673U, 3812015801U);\n\treturn vec2(q) * (1.0 / float(0xffffffffU));\n}\n\n// remaps value x from range [a, b] to range [c, d]\nfloat remap(float x, float a, float b, float c, float d)\n{\n    return (((x - a) / (b - a)) * (d - c)) + c;\n}\n\n// iq's 2d line sdf\nfloat line(vec2 p, vec2 a, vec2 b)\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// thanks FabriceNeyret2, for a more efficient circle function!\nfloat circle(vec2 p, float r, float t)\n{\n    //float or = r + t;\n    //return smoothstep(or, or-.01, length(p)) - smoothstep(r, r-.01, length(p));\n    return smoothstep(.01, -.01, abs(length(p) - r) - t * .5);\n}\n\n// Paints random enemy dots on the radar\nvoid paintEnemies(in vec2 uv, inout vec3 col, in float radarCrossSec)\n{\n\tfor(int i = 0; i < 8; ++i)\n    {\n        vec2 h = 2. * hash22(vec2(float(i + 2) * 1.2)) - 1.;\n        vec2 enemyLoc =  h * .6;\n        float enemy = smoothstep(.04, -.04, length(uv - enemyLoc));\n        col += enemy * RED * radarCrossSec;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float asp = iResolution.x / iResolution.y;\n    vec2 uv =  (2. * fragCoord - iResolution.xy) / iResolution.y;\n    \n    // rotate uv over time\n    vec2 rv = uv * ROT(iTime*1.5);\n    // polar angle\n    float theta = atan(rv.y, rv.x);\n    theta = remap(theta, -PI, PI, 0., 1./min(1., RADAR_STRENGTH));\n    vec2 a = vec2(0.), b = vec2(-asp, 0.);\n    float aaLine = smoothstep(.007, 0., line(rv, a, b));\n    // circle mask for drawing the radar navigation cross-section\n    float radarArea = smoothstep(RADAR_SIZE, RADAR_SIZE - .01, length(uv));\n    float radarCrossSec = max(0., (1. - theta - aaLine)) * radarArea;\n    \n    vec3 col = circle(uv, RADAR_SIZE, .01) * BRIGHT_GREEN;\n    col += radarCrossSec * MEDIUM_GREEN;\n    float sr = RADAR_SIZE, rStep = RADAR_SIZE/4.;\n    \n    // draw inner circles and lines\n    for (int i = 0; i < 4; ++i)\n    {\n        sr -= rStep;\n        col += circle(uv, sr, .01) * DARK_GREEN;\n    }\n    \n    col += smoothstep(.005, .004, line(uv, vec2(0., -RADAR_SIZE),\n\t\t\t\tvec2(0., RADAR_SIZE))) * DARK_GREEN;\n    col += smoothstep(.005, .004, line(uv, vec2(-RADAR_SIZE, 0.),\n\t\t\t\tvec2(RADAR_SIZE, 0.))) * DARK_GREEN;\n    \n    paintEnemies(uv, col, radarCrossSec);\n    col += DARK_GREEN * radarArea * .5;\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}