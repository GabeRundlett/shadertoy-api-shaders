{
    "Shader": {
        "info": {
            "date": "1725127682",
            "description": "Sometimes just want to play no thinking about it",
            "flags": 0,
            "hasliked": 0,
            "id": "4cjfzy",
            "likes": 7,
            "name": "Entangled knex",
            "published": 3,
            "tags": [
                "sdf",
                "trig",
                "neon"
            ],
            "usePreview": 0,
            "username": "SwagLordLancalot",
            "viewed": 121
        },
        "renderpass": [
            {
                "code": "// Fork of \"Entangled Illumination\" by akr51. https://shadertoy.com/view/Xcc3Wn\n// 2024-08-31 17:44:21\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R =  iResolution.xy,\n         U = ( u+u - R ) / R.y, P;  \n    U.x += sin(U.y + iTime) * .04;\n    O*=0.;\n    for (float i,l; i < 24.; i++ ) //stars\n                 // P = bright     i/stars radius          orientation    \n        l = length( P = 20.* ( U + i/15.* cos(i+iTime +vec2(sin(iTime),11)) ) *  mat2(sin( i+i + vec4(0,33,11,0)))),\n        R = P*P, // line darkness\n        O +=   (1. - l       ) / abs(P.x * P.y) / 1e3 //flair\n             + (1. - l * 1.86) / abs(R.x - R.y) / 1e2  //flair vertical\n             + .1 / (l - .01); //bg color   \n}\n\n\n\n// Code golfed to 280 chars by FabriceNeyret2\n// With original shown for beginners here\n// #define PI 3.141529\n\n\n// mat2 rot2(float a)\n// {\n\n    \n//     float s = sin(a);\n//     float c = cos(a);\n    \n//     return mat2(c, -s, s, c);\n\n// }\n\n\n\n// float wstar(vec2 uv, float i)\n// {\n\n//     uv *= rot2(i);\n//     uv *= 13.0;\n    \n//     float f = (0.1 / length(uv.x * uv.y * 100.0)) * (1.0 - length(uv));\n//     vec2 uvd = uv * rot2(45.0 * (PI / 180.0));\n//     f += (0.5 / length(uvd.x * uvd.y * 100.0)) * (1.0 - length(uvd) * 1.86);\n//     f += 0.1 / (length(uv) - 0.01);\n//     return f;\n// }\n\n\n// void mainImage( out vec4 fragColor, in vec2 fragCoord )\n// {\n//     vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n//     uv.x *= (iResolution.x / iResolution.y);\n    \n//     uv.x += sin(uv.y + iTime) * 0.1;\n\n//     vec3 color = vec3(0.0);\n\n//     for (float i = 0.0; i < 19.0; i++)\n//     {\n    \n        \n        \n//         color.r += wstar(uv + vec2(cos(i + iTime), sin(i + iTime)) * i * 0.05, i * 2.0);\n//         color.g += wstar(uv + vec2(cos(i + iTime), sin(i + iTime)) * i * 0.05, i * 2.0);\n//         color.b += wstar(uv + vec2(cos(i + iTime), sin(i + iTime)) * i * 0.05, i * 2.0);\n    \n//     }\n\n//     fragColor = vec4(color, 1.0);\n// }",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}