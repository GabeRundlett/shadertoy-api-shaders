{
    "Shader": {
        "info": {
            "date": "1611418337",
            "description": "\"I need your clothes, your boots, and your motorcycle.\"  And your GPU...\nSlow to compile on Windows, but nearly instant on my (old) Mac.  Apologies...",
            "flags": 64,
            "hasliked": 0,
            "id": "3tKyzV",
            "likes": 28,
            "name": "T-800 (Model 101)",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "terminator",
                "movie",
                "cineshader"
            ],
            "usePreview": 1,
            "username": "dean_the_coder",
            "viewed": 10454
        },
        "renderpass": [
            {
                "code": "// 'T-800 (Model 101)' dean_the_coder (Twitter: @deanthecoder)\n// https://www.shadertoy.com/view/3tKyzV\n//\n// I wanted to create a metal material, and found a\n// cool resource describing the physical properties\n// of metal:\n//   https://www.chaosgroup.com/blog/understanding-metalness\n//\n// What better scene to try it than the T-800 arm\n// from Terminator 2? :)\n//\n// Tricks to get the performance:\n//   - The map() function checks if the point is within\n//\t the glass.  If not in the glass, we don't bother\n//\t calculating the SDF of the arm.\n//\n// Thanks to Evvvvil, Flopine, Nusan, BigWings, Iq, Shane\n// and a bunch of others for sharing their knowledge!\n\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define Z0 min(iTime, 0.)\n\nfloat open;\n\n//#define AA\t// Disable to improve frame rate.\n\nvoid minH(inout vec2 a, vec2 b) {\n\tif (b.x < a.x) a = b;\n}\n\nfloat remap(float f, float in1, float in2, float out1, float out2) {\n\treturn mix(out1, out2, clamp((f - in1) / (in2 - in1), 0., 1.));\n}\n\nmat2 rot(float a) {\n\tfloat c = cos(a), s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n\tvec3 q = abs(p) - b;\n\treturn length(max(q, 0.)) + min(max(q.x, max(q.y, q.z)), 0.);\n}\n\nfloat sdCyl(vec3 p, vec2 hr) {\n\tvec2 d = abs(vec2(length(p.xz), p.y)) - hr;\n\treturn min(max(d.x, d.y), 0.) + length(max(d, 0.));\n}\n\nfloat sdCapsule(vec3 p, float h, float r) {\n\tp.y -= clamp(p.y, 0., h);\n\treturn length(p) - r;\n}\n\nfloat sdRod(vec3 p, vec3 a, vec3 b, float r) {\n  vec3 pa = p - a, ba = b - a;\n  return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0., 1.)) - r;\n}\n\nvec3 getRayDir(vec3 ro, vec3 lookAt, vec2 uv) {\n\tvec3 f = normalize(lookAt - ro),\n\t\t r = normalize(cross(vec3(0, 1, 0), f));\n\treturn normalize(f + r * uv.x + cross(f, r) * uv.y);\n}\n\nfloat sdPinkyPin(vec3 p) {\n\tp.x += .18;\n\treturn sdCapsule(p.yxz, .34, .12);\n}\n\nfloat sdPinky(vec3 p) {\n\tp.y -= .7;\n\n\tfloat d = sdCyl(p, vec2(.16));\n\tp.y += .24;\n\td = min(d, sdCyl(p, vec2(.2, .14))) - .04;\n\tp.y += .5;\n\td = min(d, sdPinkyPin(p));\n\tp.x += .12;\n\treturn min(d, max(sdCapsule(p, .3, .2), abs(p.x) - .1));\n}\n\nfloat sqHinge(vec3 p, float thk) {\n\tp.y += .2;\n\n\tvec3 tp = p;\n\ttp.x -= .12;\n\ttp.y += .1;\n\tfloat d = max(sdCapsule(tp, .38, .2), abs(tp.x) - .1);\n\tp.y += .1 + .04 * thk;\n\treturn max(min(d, sdBox(p, vec3(.2, .04 * thk, .19))), -p.y - .04);\n}\n\nfloat fingerBone(vec3 p, float l) {\n\tfloat d = min(\n\t\t\t\tsqHinge(p, 1.),\n\t\t\t\tsqHinge(p * vec3(-1, -1, 1) - vec3(0, l, 0), 1.));\n\n\tp.y += l * .5;\n\treturn min(d, sdCyl(p, vec2(.16, 1. - .8 / l)));\n}\n\nvec3 pToPinkyAttach(vec3 p, float r) {\n\tp.z += abs(r) * 5. - .7;\n\tmat2 t = rot(-r);\n\tp.xz *= t;\n\tp.xy *= t;\n\tp.yz *= rot(open * -.5);\n\n\tp.y -= .35;\n\tp.z += .25;\n\treturn p;\n}\n\nfloat sdFinger(vec3 p, float l1, float l2, float r, float r2) {\n\tp.z += abs(r) * 5. - .7;\n\tmat2 t = rot(-r);\n\tp.xz *= t;\n\tp.xy *= t;\n\n\t// Base hinge.\n\tfloat d = min(sqHinge(p, 4.), sdCyl(p + vec3(0, 2, 0), vec2(.14, 1.5)));\n\td = min(d, sdBox(p + vec3(0, .65, 0), vec3(.2, .12, .2 + step(abs(p.x), .08) * .03)));\n\n\tp.yz *= rot(open * -.5 + r2);\n\tvec3 fp, s, o = vec3(0, l1, 0);\n\n\t// Base bone.\n\td = min(d, min(sdPinkyPin(p), sdPinkyPin(p - o)));\n\t// todo - Bail ealy here?\n\td = min(d, fingerBone(p - o, l1));\n\n\t// Middle bone.\n\ts = o;\n\ts.yz += vec2(l2, 0) * rot(open);\n\tfp = p - s;\n\tfp.yz *= rot(-open);\n\td = min(d, fingerBone(fp, l2));\n\n\t// Pinky\n\tfp = p - s;\n\tfp.yz *= rot(open * -2.);\n\treturn min(d, sdPinky(fp));\n}\n\nfloat sdFingers(vec3 p) {\n\tp.x += .7 * 1.5;\n\tfloat d = sdFinger(p, .9, .85, -.1, 0.);\n\tp.x -= .7; d = min(d, sdFinger(p, 1.2, 1., -.03, 0.));\n\tp.x -= .7; d = min(d, sdFinger(p, 1.3, 1.1, .03, 0.));\n\tp.x -= .7;\n\treturn min(d, sdFinger(p, 1.2, 1.05, .1, 0.));\n}\n\nfloat pinkyPiston(vec3 p, vec3 basep, float r) {\n\tp = pToPinkyAttach(p, r);\n\n\tfloat d = step(length(vec3(0, -.2, -.2) - basep), 3.2) * .04;\n\treturn min(\n\t\tsdRod(p, vec3(0, -.03, .08), vec3(0, -.2, -.2), .05),\n\t\tsdRod(p, p - basep, vec3(0, -.2, -.2), .05 + d));\n}\n\nfloat sdPiston(vec3 p, vec3 p1, vec3 p2, float b) {\n\tp1.y -= .1;\n\tfloat l = p.y - p1.y;\n\tfloat r = .14\n\t\t\t  + .04 * step(-1.3, l) * sign(sin(p.y * 6. - 4.))\n\t\t\t  + .15 * b * smoothstep(-5., -5.1, l),\n\t\t\t  d = sdRod(p, p1, p2, r);\n\n\tp -= mix(p1, p2, .79);\n\tp.y = abs(abs(p.y) - .7) - .1;\n\treturn min(d, sdCyl(p, vec2(.16 + .15 * b, .05)));\n}\n\nfloat sdArm(vec3 p) {\n\t// Thumb.\n\tvec3 fp = p;\n\tfp.xz *= rot(-1.4);\n\tfloat d = min(sdFingers(p),\n\t\t\t\t  max(\n\t\t\t\t\t sdFinger(fp + vec3(-.5, 2.7, .05), 1.5, 1.4, .03, 1.),\n\t\t\t\t\t -fp.y - 3.5));\n\n\t// Wrist plate.\n\tfp = p;\n\tp.y += 3.5;\n\td = min(d, sdCyl(p, vec2(1, .1)));\n\n\t// Finger hydraulics.\n\tfp.x += .7 * 1.5; d = min(d, pinkyPiston(fp, p + vec3(.5, 0, .4), -.1));\n\tfp.x -= .7; d = min(d, pinkyPiston(fp, p + vec3(.2, 0, .6), -.03));\n\tfp.x -= .7; d = min(d, pinkyPiston(fp, p + vec3(-.1, 0, .5), .03));\n\tfp.x -= .7; d = min(d, pinkyPiston(fp, p + vec3(-.6, 0, .1), .1));\n\n\t// Main arm bone.\n\tfp = p;\n\tfp.y += 4.;\n\td = min(d, sdCyl(fp, vec2(.35 + step(3., fp.y) * (.1 - .02 * sign(abs(sin(fp.y * 24. + 1.6)) - .8) * step(fp.y, 3.5)), 4)));\n\n\t// Arm base.\n\td = min(min(d, length(p + vec3(0, 7.1, 1.25)) - .05),\n\t\t\tmax(abs(sdCyl(p + vec3(0, 7, .1),\n\t\t\t\t\t\t  vec2(1.1 - .01 *\n\t\t\t\t\t\t\t\t (\n\t\t\t\t\t\t\t\t\t step(abs(p.y + 7.7), .04) *\n\t\t\t\t\t\t\t\t\t step(.04, abs(p.x) - .3) -\n\t\t\t\t\t\t\t\t\t step(.04, abs(abs(p.x) - .3))\n\t\t\t\t\t\t\t\t ),\n\t\t\t\t\t\t\t   1\n\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t )) - .06,\n\t\t\t\tp.y - .3 * p.z + 6.6));\n\n\t// Arm pistons.\n\td = min(d, sdPiston(p, vec3(0, 0, -.8), vec3(0, -7.5, -.7), 1.5));\n\tp.x = abs(p.x) - .7;\n\treturn min(d, sdPiston(p, vec3(0), vec3(-.1, -7.5, 0), 1.));\n}\n\nfloat sdGlass(vec3 p) {\n\treturn sdCapsule(p + vec3(0,11,0), 13.5, 3.2);\n}\n\n// Map the scene using SDF functions.\nvec2 map(vec3 p) {\n\tvec2 h = vec2(min(p.y + 11.7, 6. - p.z), 1);\n\n\tif (sdGlass(p) < 0.)\n\t\tminH(h, vec2(sdArm(p - vec3(0,1.4,0)) * .8, 2));\n\n\tp.y += 10.9;\n\tminH(h, vec2(sdCyl(p, vec2(3.1, .5)) - .2, 2));\n\n\treturn h;\n}\n\nvec3 calcN(vec3 p, float t) {\n\tvec3 n = vec3(0);\n\tfor (int i = min(iFrame, 0); i < 4; i++) {\n\t\tvec3 e = .0017319 * (2. * vec3((((i + 3) >> 1) & 1), (i >> 1) & 1, i & 1) - 1.);\n\t\tn += e * map(p + e * t).x;\n\t}\n\n\treturn normalize(n);\n}\n\nvec3 glassN(vec3 p) {\n\tvec3 n = vec3(0);\n\tfor (int i = min(iFrame, 0); i < 4; i++) {\n\t\tvec3 e = .0017319 * (2. * vec3((((i + 3) >> 1) & 1), (i >> 1) & 1, i & 1) - 1.);\n\t\tn += e * sdGlass(p + e);\n\t}\n\n\treturn normalize(n);\n}\n\n// Quick ambient occlusion.\nfloat ao(vec3 p, vec3 n, float h) { return map(p + h * n).x / h; }\n\n/**********************************************************************************/\n\nvec3 vignette(vec3 c, vec2 fc) {\n\tvec2 q = fc.xy / iResolution.xy;\n\tc *= .5 + .5 * pow(16. * q.x * q.y * (1. - q.x) * (1. - q.y), .4);\n\treturn c;\n}\n\nvec3 lights(vec3 p, vec3 rd, float d, vec2 h) {\n\tvec3 ld = normalize(vec3(12, 5, -10) - p),\n\t\t n = calcN(p, d), c;\n\tfloat f, alb;\n\n\tif (h.y == 1.) {\n\t\t// Walls.\n\t\talb = max(0., .1 + .9 * dot(ld, n));\n\t\tc = vec3(.5, .7, 1);\n\t\tf = .3;\n\t} else {\n\t\t// Metal.\n\t\tc = vec3(.6);\n\t\talb = 1.;\n\t\tf = 10.;\n\t}\n\n\tfloat ao = ao(p, n, .3),\n\n\t// Primary light.\n\tl1 = alb * (.3 + .7 * ao), // ...and _some_ AO.\n\n\t// Secondary(/bounce) light.\n\tl2 = max(0., .1 + .9 * dot(ld * vec3(-1, 0, -1), n)) * .3,\n\n\t// Specular.\n\tspe = smoothstep(0., 1., pow(max(0., dot(rd, reflect(ld, n))), 3. * f)) * f,\n\n\t// Fresnel\n\tfre = 1. - smoothstep(.4, 1., 1. + dot(rd, n));\n\n\tif (h.y == 3.) // Glass\n\t\treturn vec3(spe);\n\n\t// Combine into final color.\n\tfloat lig = (l2 + spe) * ao + l1;\n\treturn fre * lig * c * vec3(2, 1.8, 1.7);\n}\n\nfloat glassCol(vec3 p, vec3 rd) {\n\tvec3 ld = normalize(vec3(12, 5, -10) - p),\n\t\t n = glassN(p);\n\treturn .01 + pow(max(0., dot(rd, reflect(ld, n))), 30.) * 3. + smoothstep(.4, 1., 1. + dot(rd, n)) * .3;\n}\n\nvec3 march(vec3 ro, vec3 rd) {\n\t// Raymarch.\n\tvec3 p = ro, col = vec3(0);\n\n\tfloat d = .01;\n\tvec2 h;\n\tbool inGlass = false, doneGlass = false;\n\tfor (float i = Z0; i < 120.; i++) {\n\t\th = map(p);\n\n\t\tfloat g = abs(sdGlass(p));\n\t\tif (!doneGlass && g < .005) {\n\t\t\tfloat c = glassCol(p, rd);\n\t\t\tif (!inGlass) {\n\t\t\t\tinGlass = true;\n\n\t\t\t\t// Add slight glass refraction.\n\t\t\t\tp += .5 * refract(rd, glassN(p), 1.0/3.);\n\t\t\t} else {\n\t\t\t\tc *= .1;\n\t\t\t\tdoneGlass = true;\n\t\t\t}\n\n\t\t\tcol += c;\n\t\t\tg += .1;\n\t\t}\n\n\t\tif (abs(h.x) < .005)\n\t\t\tbreak;\n\n\t\td += min(g, h.x); // No hit, so keep marching.\n\t\tp += rd * min(g, h.x);\n\t}\n\n\tcol += lights(p, rd, d, h) * exp(d * d * -.001);\n\n\tif (h.y == 1.)\n\t\treturn col; // Hit wall - No reflection needed.\n\n\t// We hit metal, so march along a reflection ray.\n\trd = reflect(rd, calcN(p, d)); ro = p; d = .01;\n\tfor (float i = Z0; i < 40.; i++) {\n\t\tp = ro + rd * d;\n\t\th = map(p);\n\n\t\tif (abs(h.x) < .005)\n\t\t\tbreak;\n\n\t\td += h.x;\n\t}\n\n\treturn abs(h.x) < .005 ?\n\t\tmix(col, .6 * lights(p, rd, d, h), .9) :\n\t\tmix(col, vec3(1), .5);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fc)\n{\n\topen = .4;\n\n\tfloat T = mod(iTime * 2.5, 36.),\n\t\t  dim = 1. - pow(abs(cos(clamp(min(T, abs(T - 12.)), -1., 1.) * 1.57)), 10.);\n\n\tvec3 ro, lookAt;\n\tif (T < 12.) {\n\t\tfloat p = remap(T, 0., 12., 0., 1.);\n\t\tro = mix(vec3(-6, -6, -23), vec3(6, 2, -15), p);\n\t\tlookAt = mix(vec3(0, -5, 0), vec3(0, -2, 0), p);\n\t} else if (T < 24.) {\n\t\tfloat p = remap(T, 12., 24., 0., 1.);\n\t\tro = mix(vec3(2, -10, -9), vec3(-2, -4, -9), p);\n\t\tlookAt = mix(vec3(0, -10, 0), vec3(0), p);\n\t} else if (T < 36.) {\n\t\tfloat p = remap(T, 24., 36., 0., 1.);\n\t\tro = mix(vec3(3, 0, -12), vec3(-3, 0, -15), p);\n\t\tlookAt = vec3(0, -1, 0);\n\t\topen = .35 * sin(p * 11.) + .7462;\n\t}\n\n#ifdef AA\n\tvec3 col = vec3(0);\n\tfor (float dx = Z0; dx <= 1.; dx++) {\n\t\tfor (float dy = Z0; dy <= 1.; dy++) {\n\t\t\tvec2 uv = (fc + vec2(dx, dy) * .5 - .5 * iResolution.xy) / iResolution.y;\n\t\t\tcol += march(ro, getRayDir(ro, lookAt, uv));\n\t\t}\n\t}\n\tcol /= 4.;\n#else\n\tvec2 uv = (fc - .5 * iResolution.xy) / iResolution.y;\n\tvec3 col = march(ro, getRayDir(ro, lookAt, uv));\n#endif\n\n\t// Output to screen.\n\tfragColor = vec4(vignette(pow(col * dim, vec3(.45)), fc), 0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 25282,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/randyheavenridgemusic/terminator-theme"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}