{
    "Shader": {
        "info": {
            "date": "1710156445",
            "description": "incircles in circles in circles in circles in circles in circles in circles in circles in circles in circles in circles in circles in circles in circles in circles in circles in circles in circles in circles in circles in circles in circles in ci",
            "flags": 0,
            "hasliked": 0,
            "id": "4XsSWs",
            "likes": 8,
            "name": "incircles in circles",
            "published": 3,
            "tags": [
                "circles",
                "circle",
                "algebra",
                "geometric",
                "projective",
                "incircle",
                "pga"
            ],
            "usePreview": 0,
            "username": "ENDESGA",
            "viewed": 208
        },
        "renderpass": [
            {
                "code": "// 2D PROJECTIVE GEOMETRIC ALGEBRA\n// copyright ENDESGA 2024\n\n#define M iMouse.xy\n#define W iResolution.x\n#define H iResolution.y\n#define point vec2\n#define segment vec4\n#define line vec3\n#define circle vec3\n#define get_AA( uv ) ( .5 * ( dFdx( uv.x ) + dFdy( uv.y ) ) )\n\n#define CYAN vec4( 0, 1, 1, 1 )\n#define MAGENTA vec4( 1, 0, 1, 1 )\n#define YELLOW vec4( 1, 1, 0, 1 )\n\n#define point_dot( P ) dot( P, P )\n#define line_dot( L ) dot( L.xy, L.xy )\n\nfloat AA = 0.;\nvec2 uv = vec2( 0 );\n\n#define TH1 1.\n#define TH2 1.5\n#define TH3 3.\n#define TH4 6.\n\nfloat sqrlen( point P1, point P2 )\n{\n    P1 = P2 - P1;\n    return (P1.x * P1.x + P1.y * P1.y);\n}\n\nfloat sqrlen( point P1 )\n{\n    return (P1.x * P1.x + P1.y * P1.y);\n}\n\npoint avg( point P1, point P2 )\n{\n    return ( P1 + P2 ) * .5;\n}\n\n// line that joins two points\nline join( point P1, point P2 )\n{\n\treturn vec3( P1.y - P2.y, P2.x - P1.x, P1.x * P2.y - P1.y * P2.x );\n}\n\nline join( segment S )\n{\n\treturn vec3( S.y - S.w, S.z - S.x, S.x * S.w - S.y * S.z );\n}\n\n// point that meets two lines\npoint meet( line L1, line L2 ) {\n    L1 = cross(L1, L2);\n    return L1.xy / L1.z;\n}\n\n// perpendicular bisector between two points\n// thank you @mla for this function and the link() upgrade\nline bisect( point P1, point P2 ) {\n  return line( 2. * ( P1 - P2 ), point_dot( P2 ) - point_dot( P1 ) );\n}\n\nline bisect( segment S ) {\n  return line( 2. * ( S.xy - S.zw ), point_dot( S.zw ) - point_dot( S.xy ) );\n}\n\n// circle that links three points\n// intersect two of the bisectors\ncircle link( point P1, point P2, point P3 ) {\n  P2 = meet( bisect( P1, P2 ), bisect( P2, P3 ) );\n  return circle( P2, sqrlen( P2, P1 ) );\n}\n\ncircle link( point P1, point P2 ) {\n  P2 = (P1 + P2) * .5;\n  return circle( P2, sqrlen( P2, P1 ) );\n}\n\ncircle link( segment S ) {\n  S.zw = (S.xy + S.zw) * .5;\n  return circle( S.zw, sqrlen( S.zw, S.xy ) );\n}\n\n// \"distance\" between line and point\nfloat dist( line L, point P )\n{\n\treturn dot( P, L.xy );\n}\n\n// \"distance\" between point and line\nfloat dist( point P, line L )\n{\n\treturn ( dist( L, P ) + L.z ) / line_dot( L );\n}\n\n// project a point onto a line\npoint project_to_line( point P, line L )\n{\n\treturn P - ( dist( P, L ) * L.xy );\n}\n\npoint project_to_circle( point P, circle C )\n{\n    return C.xy + normalize( P - C.xy ) * sqrt(C.z);\n}\n\n// project line to point\nline project( line L, point P )\n{\n\treturn line( L.xy, -dist( L, P ) );\n}\n\ncircle project( circle C, line L )\n{\n    point P = project_to_line( point( C.xy ), L );\n    return circle( P - normalize( P - C.xy ) * sqrt(C.z), C.z );\n}\n\n// reflect point across line (2x projection)\npoint mirror( point P, line L )\n{\n\treturn P - ( 2. * dist( P, L ) * L.xy );\n}\n\n// reflect line across point (2x projection)\nline mirror( line L, point P )\n{\n    return line( L.xy, -L.z - 2. * dist( L, P ) );\n}\n\n// incircle of a triangle given by three points\ncircle incircle( point P1, point P2, point P3 )\n{\n    point v1 = P2 - P1;\n    point v2 = P3 - P1;\n    point v3 = P3 - P2;\n    \n    float a = point_dot( v1 );\n    float b = point_dot( v2 );\n    float c = point_dot( v3 );\n    \n    a = a * inversesqrt( a );\n    b = b * inversesqrt( b );\n    c = c * inversesqrt( c );\n    \n    float abc = ( a + b + c );\n    float s = .5 * abc;\n    \n    return circle( ( a * P3 + b * P2 + c * P1 ) / abc, ( s - a ) * ( s - b ) * ( s - c ) / s );\n}\n\n// segment from a pair of points tangent of a point and circle\n// thanks mla, elenzil, jeyko: https://www.shadertoy.com/view/DtBBWc\n// simplified by me\nsegment tangents(point P, circle C)\n{\n    P -= C.xy;\n    float d = point_dot( P ) / ( C.z );\n    P = P / d;\n    point t = ( vec2( -P.y, P.x ) * sqrt( d - 1. ) );\n    return segment( P + C.xy + t, P + C.xy - t );\n}\n\n// segment that intersect a circle\nsegment intersect(line L, circle C)\n{\n    point p = project_to_line(C.xy,L);\n    float d = distance(C.xy,p);\n    vec2 n = normalize(vec2(-L.y, L.x)) * sqrt(C.z - d * d);\n    return segment(p - n, p + n);\n}\n\n//\n\nvec4 draw_col = vec4( 0 );\n\nvoid draw_line( in line L, in vec4 col, in float thickness )\n{\n\tdraw_col = mix( draw_col, col, smoothstep( AA, -AA, (abs( dist( L, uv ) + L.z ) / length( L.xy )) - thickness ) );\n}\n\nvoid draw_segment( in segment S, in vec4 col, in float thickness)\n{\n    point ba = S.zw-S.xy;\n    point pa = uv-S.xy;\n\tdraw_col = mix( draw_col, col, smoothstep( AA, -AA, length(pa-clamp( dot(pa,ba) / point_dot(ba), 0.0, 1. )*ba) - thickness ) );\n}\n\nvoid draw_point( point P, in vec4 col, in float thickness )\n{\n\tdraw_col = mix( draw_col, col, smoothstep( AA, -AA, length( uv - P ) - thickness ) );\n}\n\nvoid draw_circle( in circle C, in vec4 col, in float thickness) {\n    draw_col = mix( draw_col, col, smoothstep( AA, -AA, abs(length(uv - C.xy) - sqrt(C.z)) - thickness ) );\n}\n\nvoid mainImage( out vec4 out_col, in vec2 in_uv, in float T )\n{\n    uv = in_uv;\n    AA = get_AA( in_uv );\n    \n    float hW = W * .5;\n    float hH = H * .5;\n    float qW = hW * .5;\n    float qH = hH * .5;\n    float sW = qW * .5;\n    float sH = qH * .5;\n    \n    point p_mouse = (iMouse.z <= 0.) ? point(hW+(cos(T)*qW)+sW,hH+(cos(T)*qH)+sH) : M;\n    point p_1a = point( sW, hH - ( sin( T * 2. ) * qH ) );\n\tpoint p_1b = point( hW - ( cos( T * 2. ) * qW ), sH );\n    \n    circle c = link(p_mouse,p_1a,p_1b);\n    \n    circle ic = incircle(p_mouse,p_1a,p_1b);\n    \n    point a1 = project_to_circle(p_mouse,ic);\n    point a2 = project_to_circle(p_1a,ic);\n    point a3 = project_to_circle(p_1b,ic);\n    \n    circle ic2 = incircle(a1,a2,a3);\n    \n    point b1 = project_to_circle(a1,ic2);\n    point b2 = project_to_circle(a2,ic2);\n    point b3 = project_to_circle(a3,ic2);\n    \n    circle ic3 = incircle(b1,b2,b3);\n    \n    point c1 = project_to_circle(b1,ic3);\n    point c2 = project_to_circle(b2,ic3);\n    point c3 = project_to_circle(b3,ic3);\n    \n    circle ic4 = incircle(c1,c2,c3);\n    \n    draw_segment( segment(c1,c2), CYAN * .5, TH1 );\n    draw_segment( segment(c2,c3), CYAN * .5, TH1 );\n    draw_segment( segment(c3,c1), CYAN * .5, TH1 );\n    \n    draw_segment( segment(b1,b2), YELLOW * .5, TH1 );\n    draw_segment( segment(b2,b3), YELLOW * .5, TH1 );\n    draw_segment( segment(b3,b1), YELLOW * .5, TH1 );\n    \n    draw_segment( segment(a1,a2), MAGENTA * .5, TH2 );\n    draw_segment( segment(a2,a3), MAGENTA * .5, TH2 );\n    draw_segment( segment(a3,a1), MAGENTA * .5, TH2 );\n    \n    draw_segment( segment(p_mouse,p_1a), CYAN * .5, TH3 );\n    draw_segment( segment(p_1a,p_1b), CYAN * .5, TH3 );\n    draw_segment( segment(p_1b,p_mouse), CYAN * .5, TH3 );\n    \n    draw_circle( ic4, CYAN, TH1 );\n    draw_circle( ic3, YELLOW, TH2 );\n    draw_circle( ic2, MAGENTA, TH3 );\n    draw_circle( ic, CYAN, TH4 );\n    draw_circle( c, YELLOW * .5, TH1 );\n    \n    draw_point( c1, CYAN, TH1 );\n    draw_point( c2, CYAN, TH1 );\n    draw_point( c3, CYAN, TH1 );\n    \n    draw_point( b1, YELLOW, TH2 );\n    draw_point( b2, YELLOW, TH2 );\n    draw_point( b3, YELLOW, TH2 );\n    \n    draw_point( a1, MAGENTA, TH3 );\n    draw_point( a2, MAGENTA, TH3 );\n    draw_point( a3, MAGENTA, TH3 );\n    \n    draw_point( p_mouse, CYAN, TH3 );\n    draw_point( p_1a, CYAN, TH3 );\n    draw_point( p_1b, CYAN, TH3 );\n\n\tout_col = draw_col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//fabrice's AA method + my temporal blur\nint _N = 3;\n#define mainImage mainImage0(out vec4 O, vec2 U, float T);        \\\nvoid mainImage(out vec4 O, vec2 U) {                     \\\n    vec4 o; O = vec4(0);                                 \\\n    for (int k=0; k < _N*_N; k++ )                       \\\n      { mainImage0(o,U+vec2(k%_N-_N/2,k/_N-_N/2)/float(_N),iTime-pow(float(k)*.5,2.)*.001); O += o; }  \\\n    O /= float(_N*_N);                                   \\\n} \\\nvoid mainImage0",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}