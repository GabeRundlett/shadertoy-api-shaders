{
    "Shader": {
        "info": {
            "date": "1579280988",
            "description": "★Wavetable Synthesizer\n    wavetable synthesizer similar to Namco C30\n    8 instruments, max 32 samples\n★Wavetable Viewer\n    visualize the wavetable\n★Scale Sequencer\n    generate melody, chord & bassline based on scale\n",
            "flags": 40,
            "hasliked": 0,
            "id": "WlV3DD",
            "likes": 23,
            "name": "[♪]Wavetable Synthesizer",
            "published": 3,
            "tags": [
                "music"
            ],
            "usePreview": 0,
            "username": "Catzpaw",
            "viewed": 894
        },
        "renderpass": [
            {
                "code": "//---Wavetable Viewer\n// by Catzpaw 2020\n\n//STATE (iChannel0)\nvec4 peek(in ivec2 a){return texelFetch(iChannel0,a,0);}\nconst ivec2 txsel=ivec2(2,0);\n\n//FONT (iChannel3)\nvec2 cur=vec2(0);\nfloat siz=24.;\nfloat chr(int c){\n    vec2 p=cur*siz/16.;\n    vec4 t=p.x<.0||p.x>.0625||p.y<0.||p.y>.0625?vec4(0):\n        textureGrad(iChannel3,p+fract(vec2(c,15-c/16)/16.),dFdx(p),dFdy(p));\n    cur.x-=.5/siz;\n    return length(t.yz)==0.?0.:t.x;\n}\nint imod(uint x,uint y){return int(x-y*(x/y));}\nfloat puthex(uint n){int b=imod(n,16u)>9?55:48;return chr(b+imod(n,16u));}\n\n//GRAPHICS\nfloat rect(vec2 p,vec4 r){return (p.x>r.x)&&(p.y>r.y)&&(p.x<r.x+r.z)&&(p.y<r.y+r.w)?1.:0.;}\n\n//MAIN\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    vec2 uv=(fragCoord.xy-.5*iResolution.xy)/iResolution.x;\n    vec3 col=vec3(0);\n    float c=0.3-rect(uv,vec4(-2,-.2,4,.4))*.15;\n    int t=int(peek(txsel).x);\n    cur=vec2(.095,-.2)+uv;\n    c+=chr(83);c+=chr(79);c+=chr(85);c+=chr(78);c+=chr(68);\n    c+=chr(32);c+=chr(35);c+=puthex(uint(t));\n    siz=32.;\n    float l=float(wl[t]),x=-.5+.125/24.,y=0.;\n    for(int i=0;i<int(wl[t]);i++){\n        y=float((wt[i]>>(t*4))&15u);\n        float h=(y-7.5)*.025,v=-1.;\n        if(h<0.){v=rect(uv,vec4(x,h,.7/l,-h))*.4;}else{v=rect(uv,vec4(x,0,.7/l,h))*.4;}\n        if(v>0.){col+=mix(vec3(0,1,1),vec3(1,0,1),abs(h)*4.);}\n        cur=vec2(0.495-float(i)*(1./l),.235)+uv;\n        c+=puthex(uint(y))*.1;\n        x+=1./l;\n    }\n    fragColor=vec4(col+c,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//---Scale Sequencer\n// by Catzpaw 2020\n\n//SETUP\nconst float base =432.;\t//A tuning (Hz)\nconst float bpm  =135.;\t//beats per minute\nconst float steps=240.;\t//block length\nconst float start=1.;   //start count (beats)\nconst float fade =10.;  //fade out time (sec)\nconst float sec  =180.; //performance time (includes fade out time and start count)\n\n//SCALE\nconst int forcescale=-1; //0-10:scale compulsion -1:disable...use pattern data\nconst uint[11] scl=uint[](\n    0xcb975420u, //0:major\n    0xca875320u, //1:natural minor\n    0xcb875320u, //2:harmonic minor\n    0xcb975320u, //3:melodic minor\n    0xc9974320u, //4:major blues\n    0xca965320u, //5:minor blues\n    0x42c97420u, //6:major pentatonic\n    0x53ca7530u, //7:minor pentatonic\n    0xc9974420u, //8:major pentatonic (to heptatonic)\n    0xca775330u, //9:minor pentatonic (to heptatonic)\n    0xeca86420u);//10:whole tone\nint scalenote(int sc,int y){\n    sc=forcescale>=0?forcescale:sc;\n    return y<0?-999:(int(scl[sc])>>(y&7)*4)&15;\n}\n\n//PATTERN\n// melodic:scale(4),tonic(4),mode(4),seed1(8),seed2(12)\n// percussive:note(2x16)\nconst uint[32] pat=uint[](\n    //00-0B melody\n    0x74000000u,0x74011171u,0x74012172u,0x74013173u,\n    0x74014174u,0x74015165u,0x74016166u,0x74017167u,\n    0x74028168u,0x74019119u,0x7401a11au,0x7401b11bu,\n    //0C-0F backing\n    0x74001434u,0x74001491u,0x74001002u,0x74001002u,\n    //10-13 chord\n    0x74004434u,0x74004491u,0x74004002u,0x74004002u,\n    //14-17 bass\n    0x74004434u,0x74004491u,0x74004002u,0x74000003u,\n    //18-1F rhythm\n    0x313aa13au,0x513aa186u,0x00000000u,0x00000000u,  //sd+hh\n    0x91e121e1u,0x55e121e5u,0x00000000u,0x00000000u); //bd+conga\n\n//SEQUENCE\n// speed(2),algorithm(2),division(4),pattern1(8),key1(4),pattern2(8),key2(4)\n//  >>>>algorithm:0mute 1,2,3note(no difference so far)\n//  0123↓speed:0half\n//  4567↓      1normal\n//  89AB↓      2double\n//  CDEF↓      3quad\nconst uint[16] seq1=uint[]( //snare+hihat\n    0x50000180u,0x50000180u,0x50000180u,0x58180190u,\n    0x50000180u,0x50000180u,0x50000180u,0x50000190u,\n    0x50000180u,0x50000180u,0x50000180u,0x58180190u,\n    0x50000180u,0x50000180u,0x50000180u,0x50000190u);\nconst uint[16] seq2=uint[]( //bassdrum+conga\n    0x500001c0u,0x500001c0u,0x500001c0u,0x5e1c01d0u,\n    0x500001c0u,0x500001c0u,0x500001c0u,0x581c01d0u,\n    0x500001c0u,0x500001c0u,0x500001c0u,0x581c01d0u,\n    0x500001c0u,0x500001c0u,0x500001c0u,0x500001d0u);\nconst uint[16] seq3=uint[]( //bass\n    0x50000140u,0x50000140u,0x50000141u,0x50000165u,\n    0x50000140u,0x50000140u,0x50000141u,0x50000176u,\n    0x50000145u,0x50000143u,0x50000144u,0x50000160u,\n    0x50000145u,0x50000143u,0x50000144u,0x50000176u);\nconst uint[16] seq4=uint[]( //chord\n    0x50000100u,0x50000100u,0x50000101u,0x50000125u,\n    0x50000100u,0x50000100u,0x50000101u,0x50000136u,\n    0x50000105u,0x50000103u,0x50000104u,0x50000120u,\n    0x50000105u,0x50000103u,0x50000104u,0x50000136u);\nconst uint[16] seq5=uint[]( //backing\n    0x100000c0u,0x500000c0u,0x100000c1u,0x980d80e5u,\n    0x100000c0u,0x500000c0u,0x100000c1u,0x980d00f6u,\n    0x100000c5u,0x500000c3u,0x100000c4u,0x980d60e0u,\n    0x100000c5u,0x500000c3u,0x100000c4u,0x980d00f6u);\nconst uint[16] seq6=uint[]( //melody\n    0x10000010u,0x10000020u,0x10000031u,0x10000045u,\n    0x10000010u,0x10000020u,0x10000031u,0x10000056u,\n    0x10000065u,0x10000073u,0x10000084u,0x10000090u,\n    0x10000065u,0x10000073u,0x100000A4u,0x100000B6u);\n\n//BIT OPERATION\nint imod(int x,int y){return int(x-y*(x/y));}\nint imod(uint x,uint y){return int(x-y*(x/y));}\nint get8(uint b,int l){return int(b>>l*4)&255;}\nint get4(uint b,int l){return int(b>>l*4)&15;}\nint get2(uint b,int l){return int(b>>l*2)&3;}\n\n//PATTERN GENERATOR\nfloat hash(float s){s=fract(s*.13);s*=s+33.33;return fract(s+s*s);}\nfloat pgen(float s,float r){\n    int p=0;\n    for(int i=0;i<16;i+=2){p+=int(hash(s)*r)<<i;s+=1.;}\n    return float(p);\n}\n\n//AMP\n//  vec3 p( drive, pressure, volume)\nvec2 amp(vec2 i,vec3 p){return clamp(sign(i)*pow(abs(i*p.x),vec2(1./p.y)),-1.,1.)*p.z;}\n\n//FREQUENCY FROM MIDI NOTE NUMBER\nfloat freq(float n){return pow(2.,(n-69.)/12.)*base*6.283;}\n\n//ENVELOPE\nfloat env_d(float x,float d){return max(0.,1.-x/max(d,1e-4));}\n\n//CHIPTUNE INSTRUMENTS (freq,time)\nfloat dutybass(float f,float x){return osc_duty(f*.5,.5)*env_d(x,.6);}\nfloat tri4bass(float f,float x){return osc_tri4(f*.5);}\nfloat c30chord(float f,float x){return osc_c30(f,6);}\nfloat c30bell(float f,float x){return osc_c30(f,1)*env_d(x,.6);}\nfloat c30lead(float f,float x){return osc_c30(f,4)*env_d(x,.5);}\n\n//CHIPTUNE PERCUSSION (time)\nfloat nessd(float x){return osc_nesnoise(x,11)*env_d(x,.2);}\nfloat neshh(float x,float d){return osc_nesnoise(x,0)*env_d(x,d);}\nfloat nesbd(float x){return osc_duty(20./(x*.5+.1),.5)*env_d(x,.2);}\nfloat neslc(float x){return osc_duty(65./(x*.3+.1),.25)*env_d(x,.05);}\nfloat neshc(float x){return osc_duty(75./(x*.3+.1),.25)*env_d(x,.05);}\n\n//NOTE GENERATORS\nint rnd1(float s,float s1,float s2){\n    int r=int(mod(abs(sin(floor(s)*s1*s2)*s2),4.)-1.2);return r<0?-999:r;\n}\nvec2 bassline(float t,float l,uint b,float m,float s,int k){\n    //pattern:scale(4),tonic(4),mode(4),seed1(8),seed2(12)\n    int sc=get4(b,7),to=get4(b,6),mo=get4(b,5);\n    float s1=float(get8(b,3))+16.,s2=float(b&4095u)+16.;\n    float x=mod(t,l/m);\n    int y=scalenote(sc,rnd1(s,s1,s2)*2+mo+k);\n    if((s>=1.)&&(y<0)){y=scalenote(sc,rnd1(s-1.,s1,s2)*2+mo+k);x+=l/m;}\n    return vec2(x,y+to);\n}\nvec4 triad(float t,float l,uint b,float m,float s,int k){\n    //pattern:scale(4),tonic(4),mode(4),seed1(8),seed2(12)\n    int sc=get4(b,7),to=get4(b,6),mo=get4(b,5);\n    float s1=float(get8(b,3))+16.,s2=float(b&4095u)+16.;\n    float x=mod(t,l/m);\n    int y=scalenote(sc,mo+k);\n    int z=scalenote(sc,mo+k+2);\n    int w=scalenote(sc,mo+k+4);\n    y+=rnd1(s,s1,s2)>1?-999:0;\n    return vec4(x,y+to,z+to,w+to);\n}\nint rnd2(float s,float s1,float s2){\n    int r=int(mod(abs(sin(floor(s)*s1*s2)*s2+s1),7.)-1.8);return r<0?-999:r;\n}\nvec2 melody(float t,float l,uint b,float m,float s,int k){\n    //pattern:scale(4),tonic(4),mode(4),seed1(8),seed2(12)\n    int sc=get4(b,7),to=get4(b,6),mo=get4(b,5);\n    float s1=float(get8(b,3))+16.,s2=float(b&4095u)+16.;\n    float x=mod(t,l/m);\n    int y=scalenote(sc,rnd2(s,s1,s2)*2+mo+k);\n    if((s>=1.)&&(y<0)){y=scalenote(sc,rnd2(s-1.,s1,s2)*2+mo+k);x+=l/m;}\n    return vec2(x,y+to);\n}\n\n//PERFORMER SETUP\nbool performerinit(in float t,inout uint b,inout float m,inout float s,inout int a,inout int k){\n    //sequence:speed(2),algorithm(2),division(4),pattern1(8),key1(4),pattern2(8),key2(4)\n    a=get2(b,14);if(a==0)return false;\n    m=pow(2.,float(get2(b,15)-1))*16.;\n    s=mod(t*bpm*m/steps,16.);\n    int d=int(mod(t*bpm*16./steps,16.));\n    k=d<get4(b,6)?get8(b,3):get8(b,0);\n    b=d<get4(b,6)?pat[get8(b,4)]:pat[get8(b,1)];\n    return true;\n}\n\n//PERFORMERS\nvec2 playpercussion(float t,float l,uint b){\n    float m=0.,s=0.;int a=0,k=0;if(!performerinit(t,b,m,s,a,k))return vec2(0);\n    float x=mod(t,l/m);int y=get2(b,int(s));\n    if((s>=1.)&&(y==0)){y=get2(b,int(s)-1);x+=l/m;}\n    return vec2(x,y);\n}\nvec2 playbassline(float t,float l,uint b){\n    float m=0.,s=0.;int a=0,k=0;if(!performerinit(t,b,m,s,a,k))return vec2(0);\n    return bassline(t,l,b,m,s,k);\n}\nvec4 playchord(float t,float l,uint b){\n    float m=0.,s=0.;int a=0,k=0;if(!performerinit(t,b,m,s,a,k))return vec4(0);\n    return triad(t,l,b,m,s,k);\n}\nvec2 playbacking(float t,float l,uint b){\n    float m=0.,s=0.;int a=0,k=0;if(!performerinit(t,b,m,s,a,k))return vec2(0);\n    return bassline(t,l,b,m,s,k);\n}\nvec2 playmelody(float t,float l,uint b){\n    float m=0.,s=0.;int a=0,k=0;if(!performerinit(t,b,m,s,a,k))return vec2(0);\n    return melody(t,l,b,m,s,k);\n}\n\n//RENDERER\nvoid render(float t,float l,inout vec2 o){\n    float c=0.;     //render target\n    vec2 n=vec2(0); //note info x:gate y:note\n    vec4 nc=vec4(0); //chord info x:gate yzw:note\n    float f=0.;     //freq*gate for melodic osc\n    int b=int(t/l); //pattern offset now playing\n\n    //TRACK 1 NES noise snaredrum,closehh,openhh\n    n=playpercussion(t,l,seq1[imod(b,16)]);\n    c+=(n.y==1.)?nessd(n.x)*.8:0.;\n    c+=(n.y==2.)?neshh(n.x,.08)*.4:0.;\n    c+=(n.y==3.)?neshh(n.x,.2)*.5:0.;\n\n    //TRACK 2 NES sqr bassdrum,lowconga,highconga\n    n=playpercussion(t,l,seq2[imod(b,16)]);\n    c+=(n.y==1.)?nesbd(n.x)*.6:0.;\n    c+=(n.y==2.)?neslc(n.x)*.2:0.;\n    c+=(n.y==3.)?neshc(n.x)*.2:0.;\n\n    //TRACK 3 NES tri4 bass\n    n=playbassline(t,l,seq3[imod(b,16)]);\n    c+=(n.y>0.)?tri4bass(freq(n.y+48.)*n.x,n.x)*.8:0.;\n\n    //TRACK 4 N163 chord\n    nc=playchord(t,l,seq4[imod(b,16)]);\n    c+=(nc.y>0.)?c30chord(freq(nc.y+60.03)*nc.x,nc.x)*.2:0.;\n    c+=(nc.y>0.)?c30chord(freq(nc.z+60.02)*nc.x,nc.x)*.2:0.;\n    c+=(nc.y>0.)?c30chord(freq(nc.w+60.01)*nc.x,nc.x)*.2:0.;\n\n    //TRACK 5 N163 backing\n    n=playbacking(t,l,seq5[imod(b,16)]);\n    c+=(n.y>0.)?c30bell(freq(n.y+72.05)*n.x,n.x)*.3:0.;\n\n    //TRACK 6 N163 melody\n    n=playmelody(t,l,seq6[imod(b,16)]);\n    c+=(n.y>0.)?c30lead(freq(n.y+48.05)*n.x,n.x)*.6:0.;\n\n    o+=c; //output\n}\n\n//MASTER SECTION\n#define MASTER_DRIVE    0.5\n#define MASTER_PRESSURE 1.1\nvec2 mainSound( in int samp,float time){\n    float l=steps/bpm,vol=1.;\n    vec2 o=vec2(0);\n    if(time>sec-fade){vol=(sec-min(time,sec))/fade;}\n    time-=start*60./bpm;\n    if(time<0.)return o;\n    render(time,l,o);\n    return amp(o,vec3(MASTER_DRIVE,MASTER_PRESSURE,vol));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "//---Wavetable Synthesizer\n// by Catzpaw 2020\n\n//WAVETABLE (8 instruments, max 32 samples)\n//sound0:flute  ADFF DA75 4456 9ABB A852 0025\n//sound1:brass  BFED ED93 0378 78CF C621 2104\n//sound2:organ  87D7 F7F7 D7A7 8582 8080 8287\n//sound3:piano  BEFF EBA9 9998 7666 6541 0014\n//sound4:harpsi BDEF 000F EDB9 6421 0fff 0124\n//sound5:bass   0033 2266 0033 CCFF 99DD CCFF\n//sound6:octsqr 0000 00AA AAAA 5555 55FF FFFF\n//sound7:octsaw 0123 4567 89AB 4567 89AB CDEF\n\n//square wave with duty ratio(NES)\nfloat osc_duty(float x,float d){return mod(x,6.283)<d*6.283?1.:-1.;}\n\n//4bit triangle wave(NES)\nfloat osc_tri4(float x){return abs(floor(mod(x/6.283,1.)*15.9999)/7.5-1.);}\n\n//noise(NES)\nconst float[16] nt=float[](2.,4.,8.,16.,32.,48.,64.,80.,101.,127.,190.,254.,381.,508.,1017.,2034.);\nfloat osc_nesnoise(float x,int i){return fract(sin(floor(x*1789772.5/nt[i])*179.2)*204.8);}\n\n//wavetable osc(namco C30/N163)\nconst uint[32] wt=uint[](\n    0x000bb8bau,0x100de7fdu,0x203efdefu,0x303ff7dfu,0x4020efedu,0x5020b7dau,0x6a60af97u,0x7a6f9735u,\n    0x8a0e9d04u,0x9a0d9734u,0xaa3b9a75u,0xba398786u,0x45c67879u,0x55c4658au,0x65f268cbu,0x75f162fbu,\n    0x859068cau,0x959f5068u,0xafdf4825u,0xbfdf1012u,0xcfc00820u,0xdfc10210u,0xeff21802u,0xfff44745u,\n    0x00000000u,0x00000000u,0x00000000u,0x00000000u,0x00000000u,0x00000000u,0x00000000u,0x00000000u);\nconst float[8] wl=float[](24.,24.,24.,24.,24.,24.,24.,24.);\nfloat osc_c30(float x,int i){return(float((wt[int(mod(x*wl[i]/6.283,wl[i]))]>>(i*4))&15u)/15.-.5);}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//---Clickable UI\n// by Catzpaw 2020\n\n//STATE (iChannel0)\nvec4 peek(ivec2 a){return texelFetch(iChannel0,a,0);}\nvoid poke(ivec2 a,in vec4 v,inout vec4 f,in ivec2 p){f=(p==a)?v:f;}\nbool chktx(ivec2 tx,ivec2 p){return (tx.x==p.x)&&(tx.y==p.y);}\nconst float txw=3.,txh=1.;\nconst ivec2 txstat=ivec2(0,0);\nconst ivec2 txlmo=ivec2(1,0);\nconst ivec2 txsel=ivec2(2,0);\n\n//BUTTONS\nbool chkrect(vec2 c,vec4 r,float d){return((c.x>r.x)&&(c.x<r.x+r.z)&&(c.y>r.y)&&(c.y<r.y+r.w));}\nconst vec4 b0=vec4(-1.00,-0.50,1.00,1.00);\nconst vec4 b1=vec4( 0.00,-0.50,1.00,1.00);\n\n//MAIN\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n\n    //FRAME INIT\n    if(fragCoord.x>=txw||fragCoord.y>=txh)discard;\n    ivec2 fcd=ivec2(fragCoord-.5);\n    fragColor=vec4(0);\n\n    //LOAD STATE\n    vec4 stat=peek(txstat),lmo=peek(txlmo),sel=peek(txsel);\n\n    //FIRST FRAME\n    if(iFrame==0)stat.x=-1.;\n    if(stat.x<-.5){stat.x=1.;sel.x=0.;lmo=iMouse;}\n\n    //UI OPERATION\n    if(stat.x>.5){\n        bool click=(iMouse.z>1e-3)&&(lmo.z<-1e-3);\n        if(click){\n            vec2 uv=(fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n            vec2 mo=(iMouse.xy-.5*iResolution.xy)/iResolution.y;\n            //button:prev\n            if(chkrect(mo,b0,8.)&&chktx(txsel,fcd)){sel.x=floor(mod(sel.x+7.,8.));}\n            //button:next\n            if(chkrect(mo,b1,8.)&&chktx(txsel,fcd)){sel.x=floor(mod(sel.x+1.,8.));}\n        }\n    }\n\n    //STORE STATE\n    poke(txstat,stat,fragColor,fcd);\n    poke(txlmo,iMouse,fragColor,fcd);\n    poke(txsel,sel,fragColor,fcd);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}