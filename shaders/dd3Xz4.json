{
    "Shader": {
        "info": {
            "date": "1679442753",
            "description": "converted from glsl",
            "flags": 0,
            "hasliked": 0,
            "id": "dd3Xz4",
            "likes": 2,
            "name": "Tokyo DemoFest '21 'Clock'",
            "published": 3,
            "tags": [
                "demoshaderglsl"
            ],
            "usePreview": 0,
            "username": "ford442",
            "viewed": 197
        },
        "renderpass": [
            {
                "code": "precision mediump float;\n\n\nconst float pi = acos(-1.);\nconst float pi2 = pi*2.;\n\nconst float bpm = 120.;\n\nmat2 rot(float r)\n{\n  return mat2(cos(r),sin(r),-sin(r),cos(r));\n}\n\nvec2 pmod(vec2 p, float r)\n{\n  float a = atan(p.x,p.y) + pi / r;\n  float n = pi2 / r;\n  a = floor(a/n)*n;\n\n  return p*rot(-a);\n}\n\nfloat cube(vec3 p, vec3 s)\n{\n  p = abs(p) - s;\n  return max(max(p.x,p.y),p.z);\n}\n\nfloat crosscube(vec3 p, vec3 s)\n{\n  vec3 v = vec3(1./3.,1./3.,4./3.);\n\n  float d = cube(p,s*v.xyz);\n  float d2 = cube(p,s*v.yzx);\n  float d3 = cube(p,s*v.zxy);\n\n  return min(min(d,d2),d3);\n}\n\nfloat background(vec3 p)\n{\n  float tbpm = iTime * bpm / 60.;\n  float seq = floor(tbpm);\n  float count = mod(seq,4.);\n\n  vec3 q = p;\n  p.z -= tbpm+exp(sin(tbpm*1.6));\n  p.xy *= rot(0.1*p.z);\n  p.xy *= rot((tbpm*0.1));\n  p.z = mod(p.z,4.)-2.;\n  p.xy = pmod(p.xy,6.);\n\n\n  float d = 1e5;\n  float v = 1.;\n  float scale = 1.1;\n  float sum = scale;\n  for(int i = 0; i < 7; i++)\n  {\n    p.xy = abs(p.xy)-3.;\n    p.xy *= rot(pi*0.25);\n    float td = cube(p,vec3(0.5)*v)/sum;\n    d = min(d,td);\n    v *= 1.1;\n    p *= scale;\n    sum *= scale;\n  }\n  d = max(d,-cube(q,vec3(5.)));\n  return d;\n}\n\nfloat menger(vec3 p,vec3 s)\n{\n  vec3 size = s;\n  float d = cube(p,size);\n  float cd = crosscube(p,size);\n  d = max(d,-cd);\nfor(int i = 0; i < 4; i++)\n{\n  size *= 1./3.;\n  float m = size.x*2.;\n  p = mod(p-0.5*m,m)-0.5*m;\n  cd = crosscube(p,size);\n  d = max(d,-cd);\n}\n  return d;\n}\n\nfloat map(vec3 p)\n{\n  float tbpm = iTime * bpm / 60.;\n  float seq = floor(tbpm);\n  float count = mod(seq,4.);\n\n\n\n  p.xz *= rot(sin(iTime)+exp(sin(iTime)));\n  p.yz *= rot(cos(iTime)+exp(cos(iTime)));\n  p.xy *= rot(pi*0.25*seq);\n  if(count == 0.)\n  {\n    p.xy = pmod(p.xy,8.);\n  }\n  if(count == 1.)\n  {\n    p.xy = pmod(p.xy,8.);\n  }\n  if(count == 2.)\n  {\n    p.xy = pmod(p.xy,8.);\n  }\n  if(count == 3.)\n  {\n    p.xy = pmod(p.xy,8.);\n  }\n\n  vec3 q = p;\n\n  float d = menger(q,vec3(1.));\n  float scale = 1.5;\n  float sum = scale;\n  for(int i = 0; i < 5; i++)\n  {\n    q.x = abs(q.x) - 1.;\n    q.y = abs(q.y) - 1.;\n    q.xy *= rot(pi*0.25);\n    float td = menger(q,vec3(0.5))/sum;\n    d = min(d,td);\n\n    q*=scale;\n    sum*=scale;\n  }\n\n\n  return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n  vec2 p = (fragCoord.xy * 2. - iResolution.xy) / min(iResolution.x,iResolution.y);\n\n  vec3 cp = vec3(0.,0.,10.);\n  cp.xz *= rot(sin(iTime*0.1)*0.6);\n  cp.yz *= rot(cos(iTime*0.2)*0.3);\n  vec3 ta = vec3(0.,0.,0.);\n  vec3 cd = normalize(vec3(ta-cp));\n  vec3 cu = vec3(0.,1.,0.);\n  vec3 cs = cross(cd,cu);\n  float td = 1.;\n\n  vec3 ray = normalize(p.x*cs+p.y*cu+cd*td);\n  vec3 col = vec3(0.);\n  float me = 0.;\n  float se = 0.;\n\n  float d,rl = 0.;\n  float d2 = 0.;\n  vec3 rp = cp;\n  for(int i = 0; i < 128; i++)\n  {\n    d = map(rp);\n    d2 = background(rp);\n    if(d < d2) me += exp(abs(d)*-0.2);\n    if(d > d2) se += exp(abs(d)*-0.2);\n    d = min(d,d2);\n    rl += d;\n    rp = cp + rl * ray;\n\n    if(d < 0.001)\n    {\n      break;\n    }\n  }\n  col = vec3(0.3,0.6,0.8)*me*0.02;\n  col += vec3(1.,1.1,1.2)*se*0.02;\n  fragColor = vec4(col,1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}