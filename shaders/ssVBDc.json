{
    "Shader": {
        "info": {
            "date": "1658963031",
            "description": "Wanted a quick desktop wallpaper for my PC -- 2022/07/27",
            "flags": 0,
            "hasliked": 0,
            "id": "ssVBDc",
            "likes": 3,
            "name": "Quick Desktop Wallpaper 220727",
            "published": 3,
            "tags": [
                "desktopwallpaperquick"
            ],
            "usePreview": 0,
            "username": "NEAR_DREAM_UNITY",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "/*\n    Wanted a quick desktop wallpaper for my PC -- 2022/07/27\n*/\n#define  AA        12.\nfloat    AA_Recip  = 1. / AA;\nfloat    AA_InvSq  = 1. / (AA * AA);\n\n\n#define  Grid(P)          (10. * vec2(3. * (P).x + (P).y, 3. * (P).y))\n#define  Pulse(N, F)      pow(0.5 + 0.5 * cos(N), (F))\n#define  PulseGrid(G, F)  max(Pulse((G).x, (F)), Pulse((G).y, (F)))\n\n\nvec3  TealGridImage  (vec2 p) {\n    vec3 total = vec3(0., 0.4, 0.3);\n    total += sin(1.57 * p.y) * vec3(0., 0.2, 0.3);\n    total += sin(0.78 * p.x) * vec3(0., -0.07, 0.);\n    vec2 mgrid = Grid(p);\n    total += 0.03 * PulseGrid(mgrid, 10.);\n    total += vec3(0.15, 0., 0.) * (1. - PulseGrid(mgrid, 1.7));\n    vec2 hgrid = Grid(p - vec2(0.01, 0.01));\n    total += 0.02 * PulseGrid(hgrid, 40.);\n    return total;\n}\n\n\nvec3  NDUWatermarkImage  (vec2 p) {\n    p.x += 170. - iResolution.x;\n    p.y += 150. - iResolution.y;\n    p *= 0.008;\n    return vec3(NDULogo(p) ? -0.1 : 0.);\n}\n\n\nvoid  mainImage  (out vec4 o, vec2 p) {\n    vec3 total = vec3(0.);\n    for (float aax = 0.5; aax < AA; aax++)\n    for (float aay = 0.5; aay < AA; aay++) {\n        vec2 aap = p + vec2(aax, aay) * AA_Recip - 0.5;\n        vec2 q = (aap * 2. - iResolution.xy) / iResolution.y; \n        total += TealGridImage(q);\n        total += NDUWatermarkImage(aap);\n    }\n    o = vec4(total * AA_InvSq, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nbool  OneSquare  (vec2 moved, float size) {\n    float hlt = 17. / 32.;\n    return (\n        moved.x >= -hlt           &&\n        moved.y >= -hlt           &&\n        moved.x <= size + hlt     &&\n        moved.y <= size + hlt     && (\n            moved.x < hlt         ||\n            moved.y < hlt         ||\n            moved.x > size - hlt  ||\n            moved.y > size - hlt  ));\n}\n\n\nbool  NDULogo  (vec2 p) {\n    vec2 zoom = p * 17.;\n    vec2 tilt = vec2(zoom.x * 15. - zoom.y * 8., zoom.y * 17.) / 15.;\n    return (\n        OneSquare(tilt - vec2(0.,    -8.),   8.)  ||\n        OneSquare(tilt - vec2(-4.,   -12.),  4.)  ||\n        OneSquare(tilt - vec2(8.,    0.),    4.)  ||\n        OneSquare(tilt - vec2(8.,    -12.),  4.)  ||\n        OneSquare(tilt - vec2(0.,    8.),    4.)  ||\n        OneSquare(tilt - vec2(-12.,  -4.),   4.)  ||\n        OneSquare(tilt - vec2(-12.,  8.),    4.)  ||\n        OneSquare(tilt - vec2(-8.,   0.),    8.)  );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}