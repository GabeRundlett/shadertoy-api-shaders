{
    "Shader": {
        "info": {
            "date": "1568636588",
            "description": "pixelRain",
            "flags": 0,
            "hasliked": 0,
            "id": "3s33DM",
            "likes": 8,
            "name": "cubeRain",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "wavebbs",
            "viewed": 699
        },
        "renderpass": [
            {
                "code": "// Idea from \"https://shadertoy.com/view/MdfBRX\"\n\n\n\nfloat _DropSpeed =1.;\nfloat _DropSize = 0.7;\nfloat _WindSpeed = 0.5;\nfloat _ReflectIntensity = 2.5;\nfloat _Density = 0.8;\n\n#define S(a,b,c) smoothstep(a,b,c)\n    \n\t\t\tvec2 Rain(vec2 uv,float t)\n\t\t\t{\n\n\t\t\t\tt *=10.*_DropSpeed;\n\t\t\t\t//uv *= 3;\n\t\t\t\tvec2 a = vec2(3.,1.);\n\t\t\t\tvec2 st = uv*a;\n\n\t\t\t\t///随机id\n\t\t\t\tvec2 id= floor(st);\n\t\t\t\tst.y += t *0.22;\n\n\t\t\t\t//随机下每个格子位置\n\t\t\t\tfloat n = fract(sin(id.x *361.34)*712.34) ;\n\t\t\t\tst.y += n ;\n\t\t\t\tuv.y += n;\n\t\t\t\tid= floor(st);\n\n\t\t\t\t//设置每个格子中心点。\n\t\t\t\tst = fract( st) - 0.5;\n\n\t\t\t\t///随机每个 水珠下落时间\n\t\t\t\tt +=  fract(sin(id.x *361.34+id.y * 2312.7)*712.34) * 6.283;\n\n\n\t\t\t\t///水滴下落\n\t\t\t\tfloat y = -sin(t + sin(t+sin(t)*0.5))*0.43;\n\t\t\t\tvec2 p1 = vec2(0.,y);\n\t\t\t\tvec2 o1 =  (st-p1)/a;\n\n\t\t\t\t///绘制形状\n\t\t\t\t//float d = length(o1);\n\t\t\t\tfloat d = max(abs(o1.x),abs(o1.y));//  length(o1);\n\t\t\t\tfloat m1 = S(0.05*_DropSize,0.0,d);\n\t\t\t\t\n\n\n\t\t\t\tvec2 o2 = (fract(uv*a.x*vec2(1.,2.)) - 0.5)/vec2(1.,2.);\n\t\t\t\t//d = length(o2);\n\t\t\t\td = max(abs(o2.x),abs(o2.y));//  length(o1);\n\n\t\t\t\tfloat m2 = S(0.25*_DropSize*(0.5-st.y),0.0,d)*S(-0.1,0.1,st.y - p1.y);\n\t\t\t\t\n\t\t\t\t///绘制调试使用的格子\n\t\t\t\t//if(st.x > 0.48 || st.y > 0.49) m1 = 1;\n\t\t\t\t///混合2种水滴\n\t\t\t\tvec2 c =  m1*o1*30. + m2*o2*10.;\n\t\t\t\treturn c;// float2(c,c);\n\t\t\t}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 1.;\n\tuv.x *= iResolution.x/iResolution.y;\n       \n\tuv.x += _WindSpeed*uv.y;\n    \n \tfloat t = iTime * 0.1;\n\n     //_DropSpeed = (0.9 + sin(iTime)*0.1);//0.9+ ((sin(iTime/2.)+1.)* 0.5 *0.01);\n    \n    \n    _DropSize *= 0.7+ ((sin(iTime/2.)+1.)* 0.5 *0.3);//(1.-abs(sin(iTime/1.))/3.0);\n\t\t\t\t\n\tvec2 rainDistort = Rain(uv*3.*_Density,t)*0.5*_ReflectIntensity;\n\t\t\t\trainDistort += Rain(uv*7.*_Density,t)*0.5*_ReflectIntensity;\n\t\t\t\t\n\n\t//return float4(rainDistort.x,rainDistort.y,0,1);\n\n    \n\t\t//vec4 col = texture(iChannel0,fragCoord/iResolution.xy + rainDistort);\n    \tvec2 uvo = fragCoord  / iResolution.xy  ;\n    \tvec4 nosie = texture(iChannel1, uvo*.6);\n\t   // uvo.x += sin(((uvo.y + iTime*0.2)*2.*PI))*0.1;\n        nosie = pow(nosie,vec4(7.)) ;\n        float xoff = nosie.r * cos(iTime*.1) * uv.y;\n       // nosie *= cos(iTime*3.0);\n\t\tvec4 N1 = texture(iChannel0, uvo + rainDistort  + vec2(xoff,nosie.r));\n\t\tvec4 N2 = texture(iChannel0, uvo  + rainDistort  + vec2(xoff,nosie.g));\n    \tvec4 N3 = texture(iChannel0, uvo + rainDistort  + vec2(xoff,nosie.b) );\n\n    \tvec3 col = vec3(N1.r,N2.g,N3.b);\t\t\t\n    \n\t\tfragColor =vec4( col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}