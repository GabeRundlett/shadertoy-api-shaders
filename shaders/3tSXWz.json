{
    "Shader": {
        "info": {
            "date": "1565524159",
            "description": "Update of \"Colliding Blocks\"; details in source.",
            "flags": 32,
            "hasliked": 0,
            "id": "3tSXWz",
            "likes": 11,
            "name": "Colliding Blocks 2",
            "published": 3,
            "tags": [
                "raytracing",
                "collision",
                "dynamics",
                "physics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 495
        },
        "renderpass": [
            {
                "code": "// \"Colliding Blocks 2\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  An update of \"Colliding Blocks\": Blocks move inside a sphere; they experience a\n  periodic short-term repulsion from the center (explosion), and then are\n  attracted back to their original positions. Motion is based on Newton's laws.\n*/\n\nmat3 QtToRMat (vec4 q);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nvec4 Loadv4 (int idVar);\nfloat Fbm2 (vec2 p);\n\nconst int nBlock = 64;\n\nvec3 vnBlk, vnSph, ltDir;\nvec2 qBlk;\nfloat tCur, dstFar, spRad, bSize;\nint idBlk;\nconst float pi = 3.14159;\n\nfloat SphHit (vec3 ro, vec3 rd)\n{\n  float b, d, w;\n  b = dot (rd, ro);\n  w = b * b + spRad * spRad - dot (ro, ro);\n  d = dstFar;\n  if (w > 0.) {\n    d = - b - sqrt (w);\n    vnSph = (ro + d * rd) / spRad;\n  }\n  return d;\n}\n\nfloat SphHitSh (vec3 ro, vec3 rd, float rng)\n{\n  float b, d, w;\n  b = dot (rd, ro);\n  w = b * b + spRad * spRad - dot (ro, ro);\n  d = dstFar;\n  if (w > 0.) d = - b - sqrt (w);\n  return smoothstep (0., rng, d);\n}\n\nfloat BlkHit (vec3 ro, vec3 rd)\n{\n  mat3 m;\n  vec3 rm, rdm, v, tm, tp, u;\n  float dMin, dn, df;\n  dMin = dstFar;\n  for (int n = 0; n < nBlock; n ++) {\n    rm = Loadv4 (4 + 4 * n).xyz;\n    m = QtToRMat (Loadv4 (4 + 4 * n + 2));\n    rdm = rd * m;\n    v = ((ro - rm) * m) / rdm;\n    tp = bSize / abs (rdm) - v;\n    tm = - tp - 2. * v;\n    dn = Maxv3 (tm);\n    df = Minv3 (tp);\n    if (df > 0. && dn < min (df, dMin)) {\n      dMin = dn;\n      vnBlk = - sign (rdm) * step (tm.zxy, tm) * step (tm.yzx, tm);\n      idBlk = n;\n      u = (v + dn) * rdm;\n    }\n  }\n  if (dMin < dstFar) {\n    qBlk = vec2 (dot (u.zxy, vnBlk), dot (u.yzx, vnBlk));\n    vnBlk = QtToRMat (Loadv4 (4 + 4 * idBlk + 2)) * vnBlk;\n  }\n  return dMin;\n}\n\nfloat BlkHitSh (vec3 ro, vec3 rd, float rng)\n{\n  mat3 m;\n  vec3 rm, rdm, v, tm, tp;\n  float dMin, dn, df;\n  dMin = dstFar;\n  for (int n = 0; n < nBlock; n ++) {\n    rm = Loadv4 (4 + 4 * n).xyz;\n    m = QtToRMat (Loadv4 (4 + 4 * n + 2));\n    rdm = rd * m;\n    v = ((ro - rm) * m) / rdm;\n    tp = bSize / abs (rdm) - v;\n    tm = - tp - 2. * v;\n    dn = Maxv3 (tm);\n    df = Minv3 (tp);\n    if (df > 0. && dn < min (df, dMin)) dMin = dn;\n  }\n  return smoothstep (0., rng, dMin);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, ltDirUp;\n  vec2 w, iw;\n  float dstBlk, dstSph, c, sh, dstFloor, dstBack;\n  bool isBg, isBlk;\n  isBg = false;\n  isBlk = false;\n  ltDirUp = vec3 (0., -1., 0.);\n  dstSph = SphHit (ro, rd);\n  dstBlk = BlkHit (ro, rd);\n  dstFloor = (rd.y < 0.) ? - (ro.y + 1.4 * spRad) / rd.y : dstFar;\n  dstBack = (rd.z > 0.) ? (- ro.z + 1.4 * spRad) / rd.z : dstFar;\n  if (dstBlk < dstFar) {\n    ro += dstBlk * rd;\n    vn = vnBlk;\n    c = float (idBlk) / float (nBlock);\n    col4 = (max (abs (qBlk.x), abs (qBlk.y)) > 0.7) ? vec4 (1.) :\n       vec4 (HsvToRgb (vec3 (c, 1. - 0.2 * mod (3. * c, 1.),\n       1. - 0.3 * mod (7. * c, 1.))), 0.5);\n    isBlk = true;\n  } else if (min (dstBack, dstFloor) < dstFar) {\n    if (dstBack < dstFloor) {\n      ro += dstBack * rd;\n      w = 0.2 * (ro.xy + vec2 (0., 1.4 * spRad)) * vec2 (1., 2.);\n      iw = floor (w);\n      if (2. * floor (iw.y / 2.) != iw.y) w.x += 0.5;\n      w = smoothstep (0.03, 0.06, abs (fract (w + 0.5) - 0.5));\n      col4 = vec4 ((1. - 0.4 * w.x * w.y) * vec3 (0.6, 0.6, 0.65), 0.2);\n      vn = vec3 (0., 0., -1.);\n    } else if (dstFloor < dstFar) {\n      ro += dstFloor * rd;\n      col4 = vec4 (mix (vec3 (0.8, 0.4, 0.2), vec3 (0.45, 0.25, 0.1),\n         Fbm2 (ro.xz * vec2 (1., 0.2))), 0.1) *\n         (0.5 + 0.5 * smoothstep (0.05, 0.1, mod (ro.x, 4.)));\n      vn = vec3 (0., 1., 0.);\n    } else isBg = true;\n  } else isBg = true;\n  if (isBg) col = vec3 (0., 0., 0.1);\n  else {\n    sh = min (0.2 + 0.8 * BlkHitSh (ro + 0.01 * ltDir, ltDir, 8. * spRad),\n       0.7 + 0.3 * SphHitSh (ro + 0.01 * ltDir, ltDir, 8. * spRad));\n    col = col4.rgb * (0.1 + 0.9 * sh * max (dot (vn, ltDir), 0.)) +\n       0.5 * col4.a * sh * pow (max (0., dot (ltDir, reflect (rd, vn))), 32.);\n    if (isBlk) {\n      sh = BlkHitSh (vec3 (0., - 1.1 * spRad, 0.), ltDirUp, 8. * spRad);\n      col += col4.rgb * (0.3 * sh * max (dot (vn, ltDirUp), 0.)) +\n         0.3 * col4.a * sh * pow (max (0., dot (ltDirUp, reflect (rd, vn))), 32.);\n    }\n  }\n  if (dstSph < dstFar) {\n    col = mix (col, vec3 (0.15), pow (1. - abs (dot (rd, vnSph)), 4.));\n    col += 0.01 + 0.07 * max (dot (vnSph, ltDir), 0.) +\n       0.1 * pow (max (0., dot (ltDir, reflect (rd, vnSph))), 32.) +\n       0.06 * max (dot (vnSph, ltDirUp), 0.) +\n       0.08 * pow (max (0., dot (ltDirUp, reflect (rd, vnSph))), 32.);\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define AA    0  // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat;\n  vec3 col, rd, ro;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el, zmFac, sr, ltAng;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  stDat = Loadv4 (0);\n  spRad = stDat.y;\n  bSize = stDat.z;\n  dstFar = 150.;\n  az = 0.15 * pi * cos (0.05 * pi * tCur);\n  el = -0.1 * pi + 0.08 * pi * sin (0.027 * pi * tCur);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  zmFac = 2.4;\n  ro = vuMat * vec3 (0., 0., - spRad * 3.);\n  ltAng = 0.35 * pi * sin (0.023 * pi * tCur);\n  ltDir = normalize (vec3 (sin (ltAng), 1., - cos (ltAng)));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    rd = vuMat * rd;\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.9)), 1.);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Colliding Blocks 2\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nBlock = 64;\nconst int nSiteBk = 27;\n\nfloat nStep, spRad, blkSph, blkGap, bSize, nmEdge;\nbool orgAttr, midRepl;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvec3 RSite (int sId)\n{\n  float sIdf;\n  sIdf = float (sId);\n  return blkGap * (floor (vec3 (mod (sIdf, blkSph), mod (sIdf, blkSph * blkSph) / blkSph,\n     sIdf / (blkSph * blkSph))) - 0.5 * (blkSph - 1.));\n}\n\nvec3 BlockOrg (int mId)\n{\n  float mIdf;\n  mIdf = float (mId);\n  return (2. * bSize + 0.2) * (floor (vec3 (mod (mIdf, nmEdge),\n     mod (mIdf, nmEdge * nmEdge) / nmEdge, mIdf / (nmEdge * nmEdge))) - 0.5 * (nmEdge - 1.));\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  float fOvlap, fricN;\n  fOvlap = 500.;\n  fricN = 5.;\n  return max (fOvlap * (1. / rSep - 1.) - fricN * dot (dr, dv) / (rSep * rSep), 0.) * dr;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot, mRotN;\n  vec4 drw4;\n  vec3 rmN, vmN, wmN, dr, dv, rts, rtsN, rms, vms, fc, am, wam, dSp, drw;\n  float farSep, rSep, fOrg, dt;\n  fOrg = 0.5;\n  dt = 0.01;\n  rm = Loadv4 (4 + 4 * mId).xyz;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  mRot = QtToRMat (qm);\n  farSep = length (vec3 (blkGap) * (vec3 (blkSph) - 1.)) + 1.;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBlock; n ++) {\n    rmN = Loadv4 (4 + 4 * n).xyz;\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      mRotN = QtToRMat (Loadv4 (4 + 4 * n + 2));\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      for (int j = 0; j < nSiteBk; j ++) {\n        rts = mRot * RSite (j);\n        rms = rm + rts;\n        vms = vm + cross (wm, rts);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (int jN = 0; jN < nSiteBk; jN ++) {\n          rtsN = mRotN * RSite (jN);\n          dr = rms - (rmN + rtsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rtsN));\n        }\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  if (length (rm) > spRad - 0.5 * (farSep + 1.)) {\n    for (int j = 0; j < nSiteBk; j ++) {\n      rts = mRot * RSite (j);\n      dr = rm + rts - spRad * normalize (rm + rts);\n      rSep = length (dr);\n      if (rSep < 1.) {\n        fc = FcFun (dr, rSep, vm + cross (wm, rts));\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  if (orgAttr) am -= fOrg * (rm - BlockOrg (mId));\n  if (midRepl) am += 2. * fOrg * rm;\n  dSp = vec3 (blkGap * blkSph);\n  wam = mRot * (wam * mRot / (0.5 * (vec3 (dot (dSp, dSp)) - dSp * dSp) + 1.));\n  vm += dt * am;\n  rm += dt * vm;\n  wm += dt * wam;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  vec3 e;\n  float mIdf;\n  rm = BlockOrg (mId);\n  mIdf = float (mId);\n  e = normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3), Hashff (mIdf + 0.6)));\n  vm = e - 0.5;\n  qm = EulToQt (vec3 (0.));\n  wm = 5. * (e - 0.5);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag;\n  float stepCyc;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBlock + 4) discard;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  doInit = false;\n  blkSph = 3.;\n  blkGap = 0.4;\n  bSize = 0.5 * blkGap * (blkSph - 1.) + 0.4;\n  nmEdge = floor (pow (float (nBlock), 1./3.) + 0.1);\n  stepCyc = 7000.;\n  if (iFrame <= 5) {\n    spRad = 3. * floor (pow (float (nBlock), 1./3.) + 0.1);\n    nStep = 0.;\n    doInit = true;\n  } else {\n    stDat = Loadv4 (0);\n    nStep = stDat.x;\n    spRad = stDat.y;\n    ++ nStep;\n    orgAttr = (mod (nStep, stepCyc) > 1500.);\n    midRepl = (mod (nStep, stepCyc) < 100.);\n  }\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm);\n    else Step (mId, rm, vm, qm, wm);\n  }\n  if (pxId == 0) stDat = vec4 (nStep, spRad, bSize, 0.);\n  else if (pxId == 4 + 4 * mId) stDat = vec4 (rm, 0.);\n  else if (pxId == 4 + 4 * mId + 1) stDat = vec4 (vm, 0.);\n  else if (pxId == 4 + 4 * mId + 2) stDat = qm;\n  else if (pxId == 4 + 4 * mId + 3) stDat = vec4 (wm, 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Colliding Blocks 2\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nBlock = 64;\nconst int nSiteBk = 27;\n\nfloat nStep, spRad, blkSph, blkGap, bSize, nmEdge;\nbool orgAttr, midRepl;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvec3 RSite (int sId)\n{\n  float sIdf;\n  sIdf = float (sId);\n  return blkGap * (floor (vec3 (mod (sIdf, blkSph), mod (sIdf, blkSph * blkSph) / blkSph,\n     sIdf / (blkSph * blkSph))) - 0.5 * (blkSph - 1.));\n}\n\nvec3 BlockOrg (int mId)\n{\n  float mIdf;\n  mIdf = float (mId);\n  return (2. * bSize + 0.2) * (floor (vec3 (mod (mIdf, nmEdge),\n     mod (mIdf, nmEdge * nmEdge) / nmEdge, mIdf / (nmEdge * nmEdge))) - 0.5 * (nmEdge - 1.));\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  float fOvlap, fricN;\n  fOvlap = 500.;\n  fricN = 5.;\n  return max (fOvlap * (1. / rSep - 1.) - fricN * dot (dr, dv) / (rSep * rSep), 0.) * dr;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot, mRotN;\n  vec4 drw4;\n  vec3 rmN, vmN, wmN, dr, dv, rts, rtsN, rms, vms, fc, am, wam, dSp, drw;\n  float farSep, rSep, fOrg, dt;\n  fOrg = 0.5;\n  dt = 0.01;\n  rm = Loadv4 (4 + 4 * mId).xyz;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  mRot = QtToRMat (qm);\n  farSep = length (vec3 (blkGap) * (vec3 (blkSph) - 1.)) + 1.;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBlock; n ++) {\n    rmN = Loadv4 (4 + 4 * n).xyz;\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      mRotN = QtToRMat (Loadv4 (4 + 4 * n + 2));\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      for (int j = 0; j < nSiteBk; j ++) {\n        rts = mRot * RSite (j);\n        rms = rm + rts;\n        vms = vm + cross (wm, rts);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (int jN = 0; jN < nSiteBk; jN ++) {\n          rtsN = mRotN * RSite (jN);\n          dr = rms - (rmN + rtsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rtsN));\n        }\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  if (length (rm) > spRad - 0.5 * (farSep + 1.)) {\n    for (int j = 0; j < nSiteBk; j ++) {\n      rts = mRot * RSite (j);\n      dr = rm + rts - spRad * normalize (rm + rts);\n      rSep = length (dr);\n      if (rSep < 1.) {\n        fc = FcFun (dr, rSep, vm + cross (wm, rts));\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  if (orgAttr) am -= fOrg * (rm - BlockOrg (mId));\n  if (midRepl) am += 2. * fOrg * rm;\n  dSp = vec3 (blkGap * blkSph);\n  wam = mRot * (wam * mRot / (0.5 * (vec3 (dot (dSp, dSp)) - dSp * dSp) + 1.));\n  vm += dt * am;\n  rm += dt * vm;\n  wm += dt * wam;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  vec3 e;\n  float mIdf;\n  rm = BlockOrg (mId);\n  mIdf = float (mId);\n  e = normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3), Hashff (mIdf + 0.6)));\n  vm = e - 0.5;\n  qm = EulToQt (vec3 (0.));\n  wm = 5. * (e - 0.5);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag;\n  float stepCyc;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBlock + 4) discard;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  doInit = false;\n  blkSph = 3.;\n  blkGap = 0.4;\n  bSize = 0.5 * blkGap * (blkSph - 1.) + 0.4;\n  nmEdge = floor (pow (float (nBlock), 1./3.) + 0.1);\n  stepCyc = 7000.;\n  if (iFrame <= 5) {\n    spRad = 3. * floor (pow (float (nBlock), 1./3.) + 0.1);\n    nStep = 0.;\n    doInit = true;\n  } else {\n    stDat = Loadv4 (0);\n    nStep = stDat.x;\n    spRad = stDat.y;\n    ++ nStep;\n    orgAttr = (mod (nStep, stepCyc) > 1500.);\n    midRepl = (mod (nStep, stepCyc) < 100.);\n  }\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm);\n    else Step (mId, rm, vm, qm, wm);\n  }\n  if (pxId == 0) stDat = vec4 (nStep, spRad, bSize, 0.);\n  else if (pxId == 4 + 4 * mId) stDat = vec4 (rm, 0.);\n  else if (pxId == 4 + 4 * mId + 1) stDat = vec4 (vm, 0.);\n  else if (pxId == 4 + 4 * mId + 2) stDat = qm;\n  else if (pxId == 4 + 4 * mId + 3) stDat = vec4 (wm, 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Colliding Blocks 2\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nBlock = 64;\nconst int nSiteBk = 27;\n\nfloat nStep, spRad, blkSph, blkGap, bSize, nmEdge;\nbool orgAttr, midRepl;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvec3 RSite (int sId)\n{\n  float sIdf;\n  sIdf = float (sId);\n  return blkGap * (floor (vec3 (mod (sIdf, blkSph), mod (sIdf, blkSph * blkSph) / blkSph,\n     sIdf / (blkSph * blkSph))) - 0.5 * (blkSph - 1.));\n}\n\nvec3 BlockOrg (int mId)\n{\n  float mIdf;\n  mIdf = float (mId);\n  return (2. * bSize + 0.2) * (floor (vec3 (mod (mIdf, nmEdge),\n     mod (mIdf, nmEdge * nmEdge) / nmEdge, mIdf / (nmEdge * nmEdge))) - 0.5 * (nmEdge - 1.));\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  float fOvlap, fricN;\n  fOvlap = 500.;\n  fricN = 5.;\n  return max (fOvlap * (1. / rSep - 1.) - fricN * dot (dr, dv) / (rSep * rSep), 0.) * dr;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot, mRotN;\n  vec4 drw4;\n  vec3 rmN, vmN, wmN, dr, dv, rts, rtsN, rms, vms, fc, am, wam, dSp, drw;\n  float farSep, rSep, fOrg, dt;\n  fOrg = 0.5;\n  dt = 0.01;\n  rm = Loadv4 (4 + 4 * mId).xyz;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  mRot = QtToRMat (qm);\n  farSep = length (vec3 (blkGap) * (vec3 (blkSph) - 1.)) + 1.;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBlock; n ++) {\n    rmN = Loadv4 (4 + 4 * n).xyz;\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      mRotN = QtToRMat (Loadv4 (4 + 4 * n + 2));\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      for (int j = 0; j < nSiteBk; j ++) {\n        rts = mRot * RSite (j);\n        rms = rm + rts;\n        vms = vm + cross (wm, rts);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (int jN = 0; jN < nSiteBk; jN ++) {\n          rtsN = mRotN * RSite (jN);\n          dr = rms - (rmN + rtsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rtsN));\n        }\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  if (length (rm) > spRad - 0.5 * (farSep + 1.)) {\n    for (int j = 0; j < nSiteBk; j ++) {\n      rts = mRot * RSite (j);\n      dr = rm + rts - spRad * normalize (rm + rts);\n      rSep = length (dr);\n      if (rSep < 1.) {\n        fc = FcFun (dr, rSep, vm + cross (wm, rts));\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  if (orgAttr) am -= fOrg * (rm - BlockOrg (mId));\n  if (midRepl) am += 2. * fOrg * rm;\n  dSp = vec3 (blkGap * blkSph);\n  wam = mRot * (wam * mRot / (0.5 * (vec3 (dot (dSp, dSp)) - dSp * dSp) + 1.));\n  vm += dt * am;\n  rm += dt * vm;\n  wm += dt * wam;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  vec3 e;\n  float mIdf;\n  rm = BlockOrg (mId);\n  mIdf = float (mId);\n  e = normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3), Hashff (mIdf + 0.6)));\n  vm = e - 0.5;\n  qm = EulToQt (vec3 (0.));\n  wm = 5. * (e - 0.5);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag;\n  float stepCyc;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBlock + 4) discard;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  doInit = false;\n  blkSph = 3.;\n  blkGap = 0.4;\n  bSize = 0.5 * blkGap * (blkSph - 1.) + 0.4;\n  nmEdge = floor (pow (float (nBlock), 1./3.) + 0.1);\n  stepCyc = 7000.;\n  if (iFrame <= 5) {\n    spRad = 3. * floor (pow (float (nBlock), 1./3.) + 0.1);\n    nStep = 0.;\n    doInit = true;\n  } else {\n    stDat = Loadv4 (0);\n    nStep = stDat.x;\n    spRad = stDat.y;\n    ++ nStep;\n    orgAttr = (mod (nStep, stepCyc) > 1500.);\n    midRepl = (mod (nStep, stepCyc) < 100.);\n  }\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm);\n    else Step (mId, rm, vm, qm, wm);\n  }\n  if (pxId == 0) stDat = vec4 (nStep, spRad, bSize, 0.);\n  else if (pxId == 4 + 4 * mId) stDat = vec4 (rm, 0.);\n  else if (pxId == 4 + 4 * mId + 1) stDat = vec4 (vm, 0.);\n  else if (pxId == 4 + 4 * mId + 2) stDat = qm;\n  else if (pxId == 4 + 4 * mId + 3) stDat = vec4 (wm, 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Colliding Blocks 2\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nBlock = 64;\nconst int nSiteBk = 27;\n\nfloat nStep, spRad, blkSph, blkGap, bSize, nmEdge;\nbool orgAttr, midRepl;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvec3 RSite (int sId)\n{\n  float sIdf;\n  sIdf = float (sId);\n  return blkGap * (floor (vec3 (mod (sIdf, blkSph), mod (sIdf, blkSph * blkSph) / blkSph,\n     sIdf / (blkSph * blkSph))) - 0.5 * (blkSph - 1.));\n}\n\nvec3 BlockOrg (int mId)\n{\n  float mIdf;\n  mIdf = float (mId);\n  return (2. * bSize + 0.2) * (floor (vec3 (mod (mIdf, nmEdge),\n     mod (mIdf, nmEdge * nmEdge) / nmEdge, mIdf / (nmEdge * nmEdge))) - 0.5 * (nmEdge - 1.));\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  float fOvlap, fricN;\n  fOvlap = 500.;\n  fricN = 5.;\n  return max (fOvlap * (1. / rSep - 1.) - fricN * dot (dr, dv) / (rSep * rSep), 0.) * dr;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot, mRotN;\n  vec4 drw4;\n  vec3 rmN, vmN, wmN, dr, dv, rts, rtsN, rms, vms, fc, am, wam, dSp, drw;\n  float farSep, rSep, fOrg, dt;\n  fOrg = 0.5;\n  dt = 0.01;\n  rm = Loadv4 (4 + 4 * mId).xyz;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  mRot = QtToRMat (qm);\n  farSep = length (vec3 (blkGap) * (vec3 (blkSph) - 1.)) + 1.;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBlock; n ++) {\n    rmN = Loadv4 (4 + 4 * n).xyz;\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      mRotN = QtToRMat (Loadv4 (4 + 4 * n + 2));\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      for (int j = 0; j < nSiteBk; j ++) {\n        rts = mRot * RSite (j);\n        rms = rm + rts;\n        vms = vm + cross (wm, rts);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (int jN = 0; jN < nSiteBk; jN ++) {\n          rtsN = mRotN * RSite (jN);\n          dr = rms - (rmN + rtsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rtsN));\n        }\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  if (length (rm) > spRad - 0.5 * (farSep + 1.)) {\n    for (int j = 0; j < nSiteBk; j ++) {\n      rts = mRot * RSite (j);\n      dr = rm + rts - spRad * normalize (rm + rts);\n      rSep = length (dr);\n      if (rSep < 1.) {\n        fc = FcFun (dr, rSep, vm + cross (wm, rts));\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  if (orgAttr) am -= fOrg * (rm - BlockOrg (mId));\n  if (midRepl) am += 2. * fOrg * rm;\n  dSp = vec3 (blkGap * blkSph);\n  wam = mRot * (wam * mRot / (0.5 * (vec3 (dot (dSp, dSp)) - dSp * dSp) + 1.));\n  vm += dt * am;\n  rm += dt * vm;\n  wm += dt * wam;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  vec3 e;\n  float mIdf;\n  rm = BlockOrg (mId);\n  mIdf = float (mId);\n  e = normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3), Hashff (mIdf + 0.6)));\n  vm = e - 0.5;\n  qm = EulToQt (vec3 (0.));\n  wm = 5. * (e - 0.5);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag;\n  float stepCyc;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBlock + 4) discard;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  doInit = false;\n  blkSph = 3.;\n  blkGap = 0.4;\n  bSize = 0.5 * blkGap * (blkSph - 1.) + 0.4;\n  nmEdge = floor (pow (float (nBlock), 1./3.) + 0.1);\n  stepCyc = 7000.;\n  if (iFrame <= 5) {\n    spRad = 3. * floor (pow (float (nBlock), 1./3.) + 0.1);\n    nStep = 0.;\n    doInit = true;\n  } else {\n    stDat = Loadv4 (0);\n    nStep = stDat.x;\n    spRad = stDat.y;\n    ++ nStep;\n    orgAttr = (mod (nStep, stepCyc) > 1500.);\n    midRepl = (mod (nStep, stepCyc) < 100.);\n  }\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm);\n    else Step (mId, rm, vm, qm, wm);\n  }\n  if (pxId == 0) stDat = vec4 (nStep, spRad, bSize, 0.);\n  else if (pxId == 4 + 4 * mId) stDat = vec4 (rm, 0.);\n  else if (pxId == 4 + 4 * mId + 1) stDat = vec4 (vm, 0.);\n  else if (pxId == 4 + 4 * mId + 2) stDat = qm;\n  else if (pxId == 4 + 4 * mId + 3) stDat = vec4 (wm, 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}