{
    "Shader": {
        "info": {
            "date": "1589061381",
            "description": "Visioni- Uffizi-1 Uffizi -Visions",
            "flags": 1,
            "hasliked": 0,
            "id": "wdfBWj",
            "likes": 4,
            "name": "VisionI- Uffizi- Uffizi -Visions",
            "published": 3,
            "tags": [
                "visioniuffizivisions"
            ],
            "usePreview": 0,
            "username": "tester1963",
            "viewed": 264
        },
        "renderpass": [
            {
                "code": "\nconst int MAX_MARCHING_STEPS=2048;\nconst float MIN_DIST=.02;\nconst float MAX_DIST=10.;\nconst float EPSILON=.00001;\nconst float PI = 3.141;\n\n// Primitives from https://iquilezles.org/articles/distfunctions \n \n\nfloat sdSphere(vec3 p,float s)\n{\n    return length(p)-s;\n}\n\nfloat sdBox(vec3 p,vec3 b)\n{\n    vec3 q=abs(p)-b;\n    return length(max(q,0.))+min(max(q.x,max(q.y,q.z)),0.);\n}\n\nfloat sdRoundBox(vec3 p,vec3 b,float r)\n{\n    vec3 q=abs(p)-b;\n    return length(max(q,0.))+min(max(q.x,max(q.y,q.z)),0.)-r;\n}\n\nfloat sdVerticalCapsule(vec3 p,float h,float r)\n{\n    p.y-=clamp(p.y,2.,h);\n    return length(p)-r;\n}\n\nfloat sdCapsule(vec3 p,vec3 a,vec3 b,float r)\n{\n    vec3 pa=p-a,ba=b-a;\n    float h=clamp(dot(pa,ba)/dot(ba,ba),0.,1.);\n    return length(pa-ba*h)-r;\n}\n\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\n\n\nfloat opUnion(float d1,float d2){return min(d1,d2);}\n\nfloat opSubtraction(float d1,float d2){return max(-d1,d2);}\n\nfloat opIntersection(float d1,float d2){return max(d1,d2);}\n\nfloat opSmoothUnion(float d1,float d2,float k){\n    float h=clamp(.5+.5*(d2-d1)/k,0.,1.);\nreturn mix(d2,d1,h)-k*h*(1.-h);}\n\nfloat opSmoothSubtraction(float d1,float d2,float k){\n    float h=clamp(.5-.5*(d2+d1)/k,0.,1.);\nreturn mix(d2,-d1,h)+k*h*(1.-h);}\n\nfloat opSmoothIntersection(float d1,float d2,float k){\n    float h=clamp(.5-.5*(d2-d1)/k,0.,1.);\nreturn mix(d2,d1,h)+k*h*(1.-h);}\n\nvec3 rotateX(vec3 p,float angle){\n    return vec3(mat4(\n           1,0,0,0,\n            0,cos(angle),-sin(angle),0,\n            0,sin(angle),cos(angle),0,\n            0,0,0,1\n        )*vec4(p,0)\n    );\n}\n\nvec3 rotateY(vec3 p,float angle){\n    return vec3(mat4(\n            cos(angle),0,sin(angle),0,\n            0,1,0,0,\n            -sin(angle),0,cos(angle),0,\n            0,0,0,1\n        )*vec4(p,0)\n    );\n}\n\nvec3 rotateZ(vec3 p,float angle){\n    return vec3(mat4(\n            cos(angle),-sin(angle),0,0,\n            sin(angle),cos(angle),0,0,\n            0,0,1,0,\n            0,0,0,1\n        )*vec4(p,0)\n    );\n}\n\nvec3 repeat(in vec3 p,in vec3 c){\n    return mod(p+.5*c,c)-.5*c;\n}\n\nvec3 twist(in vec3 p,float k){\n    float c=cos(k*p.y);\n    float s=sin(k*p.y);\n    mat2 m=mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\nvec3 cheapBend(in vec3 p,float k){\n    float c=cos(k*p.x);\n    float s=sin(k*p.x);\n    mat2 m=mat2(c,-s,s,c);\n    return vec3(m*p.xy,p.z);\n}\n\nvec3 cameraTransform(vec3 p) {\n    return rotateY(rotateX(p,.3+sin(iTime*.2)*.4), iTime*0.2);\n}\n\nfloat grimace(in vec3 p) {\n    return opSmoothUnion(\n        sdRoundBox(cheapBend(p,sin(iTime*3.)),vec3(1.1,.2,.4),.05),\n        sdRoundBox(cheapBend(rotateY(p, 3.141*.5),cos(iTime*3.)),vec3(1.1,.2,.4),.05),\n        .4\n    );\n}\n\nfloat displace(in vec3 p) {\n    return sin(5.*p.x+iTime)*sin(5.*p.y+iTime*.9)*sin(5.*p.z+iTime*.8)*.1;\n}\n\nfloat sceneSDF2(in vec3 p){\n    return sdSphere(p, .6 + sin(iTime*.1)*.7);\n}\n\n\nfloat sceneSDF(in vec3 p){\n    return opSmoothUnion(opSmoothIntersection(grimace(p), sceneSDF2(p), .1), opSmoothSubtraction(\n\t\topSmoothUnion(\n        \topSmoothUnion(\n            \tsdCylinder(p, vec3(0,0,.5)),\n            \tsdCylinder(rotateZ(p, PI*.5), vec3(0,0,.5)),\n                .03\n        \t),\n        \tsdCylinder(rotateX(p, PI*.5), vec3(0,0,.5)),\n            .03\n    \t),\n    \topSmoothIntersection(\n    \t\tsdSphere(p, 1.),\n        \tsdBox(p, vec3(.75)),\n            .05\n    \t),.05\n    ),.5);\n}\n\nfloat march(in vec3 ro,in vec3 rd){\n    float depth=MIN_DIST;\n    int cost=MAX_MARCHING_STEPS;\n    for(int i=0;i<MAX_MARCHING_STEPS;i++){\n        float dist=sceneSDF(ro+depth*rd);\n        if(dist<EPSILON){\n            cost=i;\n            break;\n        }\n        depth+=dist;\n        if(depth>=MAX_DIST){\n            cost=i;\n            depth=MAX_DIST;\n            break;\n        }\n    }\n    return depth;\n}\n\nvec3 calcNormal(in vec3 p)\n{\n    const float h = 0.0002; // replace by an appropriate value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*sceneSDF( p + k.xyy*h ) + \n                      k.yyx*sceneSDF( p + k.yyx*h ) + \n                      k.yxy*sceneSDF( p + k.yxy*h ) + \n                      k.xxx*sceneSDF( p + k.xxx*h ) );\n}\n\n\nvec4 normalColor( in vec3 pos)\n{\n\treturn vec4(calcNormal(pos)*0.5+0.5, 4.);    \t\n}\n\nvec4 aoColor(in vec3 pos, in vec3 rd) {\n    vec3 nor = calcNormal(pos);\n    vec3 ref = reflect(rd,nor);\n\n    float outer = march(pos, ref);\n    vec3 reflection = texture( iChannel0, ref ).xyz * clamp(outer-3.,0.,.5);\n    vec3 ambient = texture( iChannel1, ref ).xyz * clamp(outer-1.,.5,.1);\n\n    vec3 n = normalize(pos);\n\tvec2 uv = vec2( atan( n.z, n.x ), asin(n.y) );\n    \n    vec3 col = (texture( iChannel2, uv ).xyz) * clamp(march(pos, normalize(vec3(.1, 2., .2))), .2, 2.);\n\treturn vec4(ambient *col + reflection,60.);\n}\n\n\n\nvec4 render(in vec3 ro,in vec3 rd){\n    float depth=march(ro, rd);\n    if(depth>MAX_DIST-EPSILON){\n        return texture( iChannel0, rd);\n    }\n    return aoColor(ro + rd * depth, rd);\n    \n}\n\nvec3 rayDirection(float fieldOfView,vec2 size,vec2 fragCoord){\n    vec2 xy=fragCoord-size/2.;\n    float z=size.y/tan(radians(fieldOfView)/2.);\n    return normalize(vec3(xy,-z));\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    fragColor=render(\n        cameraTransform(vec3(1.,0.,5.)),// ray origin\n        cameraTransform(rayDirection(60.,iResolution.xy,fragCoord))\n    );\n}\n\nvoid mainVR(out vec4 fragColor,in vec2 fragCoord,in vec3 fragRayOri,in vec3 fragRayDir)\n{\n    fragColor=render(\n        fragRayOri+vec3(3.,1.,4.),\n    fragRayDir);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}