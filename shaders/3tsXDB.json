{
    "Shader": {
        "info": {
            "date": "1564145100",
            "description": "Rendering parametrics with a special distance estimation where start parameters are distributed evenly and then an iteration is used which minimizes distance of the current point to the curve normal.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tsXDB",
            "likes": 15,
            "name": "Rendering Parametrics",
            "published": 3,
            "tags": [
                "2d",
                "distance",
                "curve",
                "graph",
                "plot",
                "parametric"
            ],
            "usePreview": 0,
            "username": "NinjaKoala",
            "viewed": 677
        },
        "renderpass": [
            {
                "code": "//#define SHOW_DISTANCE_FIELD\n//#define USE_VARIANT\n//#define SECOND_ORDER\n//#define HYBRID\n//#define SEGMENTS\n\n#define PARAMETRIC 1\n\n/*\nCurves 1,2,3 and 6 by me\nCurves 4 and 5 by iq (see https://www.shadertoy.com/view/Mlf3zl and https://www.shadertoy.com/view/Xlf3zl)\nCurves 7 to 11 by nimitz (see https://www.shadertoy.com/view/XdSSRw)\n\nUses the same technique as in https://www.shadertoy.com/view/3lsSR2\nand https://www.shadertoy.com/view/3lsSzS\n\nI also implemented a variant where only the n nearest points on the curve\nare used as start parameters, this however doesn't work very well generally.\n*/\n\nconst float dot_size = .0025;\nconst float line_size = .001;\n\nconst vec3 bg_col = vec3(1);\nconst vec3 point_col = vec3(1,0,0);\nconst vec3 line_col = vec3(0);\n\nconst float zoom = 1.;\n\nconst float pi = 3.1415926535;\n\nconst int num_segments = 256;\n\nconst float eps = .005;\n\nconst float factor = 1.;\n\nfloat sfloor(in float x, in float w){\n    float fx = floor(x);\n    return fx+smoothstep(fx+w,fx+1.-w,x);\n}\n\n#if PARAMETRIC == 1\n//Random parametric curve 1\nconst int num_iterations = 3;\nconst int num_start_params = 25;\n\nconst int num_iterations2 = 3;\nconst int num_start_params2 = 49;\nconst int num_mins=5;\n\nvec2 parametric(float t){\n\tt *= 2.*pi;\n\tfloat x = (1.5+cos(10.*t))*cos(3.*t);\n\tfloat y = (1.5-cos(10.*t))*sin(3.*t);\n\n\treturn 1./10.*vec2(x,y);\n}\n\nvec2 parametric_diff(float t){\n\tt *= 2.*pi;\n\tfloat x = -10.0*cos(3.0*t)*sin(10.0*t) - 3.0*cos(10.0*t)*sin(3.0*t) - 4.5*sin(3.0*t);\n\tfloat y = -3.0*cos(10.0*t)*cos(3.0*t) + 10.0*sin(10.0*t)*sin(3.0*t) + 4.5*cos(3.0*t);\n\n\treturn 2.*pi*1./10.*vec2(x,y);\n}\n\nvec2 parametric_snd_diff(float t){\n\tt *= 2.*pi;\n\tfloat x = -109.0*cos(10.0*t)*cos(3.0*t) + 60.0*sin(10.0*t)*sin(3.0*t) - 13.5*cos(3.0*t);\n\tfloat y = 60.0*cos(3.0*t)*sin(10.0*t) + 109.0*cos(10.0*t)*sin(3.0*t) - 13.5*sin(3.0*t);\n\n\treturn 4.*pi*pi*1./30.*vec2(x,y);\n}\n#elif PARAMETRIC == 2\n//Random parametric curve 2\nconst int num_iterations = 3;\nconst int num_start_params = 31;\n\nconst int num_iterations2 = 3;\nconst int num_start_params2 = 49;\nconst int num_mins = 5;\n\nvec2 parametric(float t){\n\tt *= 2.*pi;\n\n\tfloat x = 3.*(1.+.75*cos(t*10.))*cos(t);\n\tfloat y = 3.*(1.-.75*cos(t*10.))*sin(t);\n\n\treturn 1./20.*vec2(x,y);\n}\n\nvec2 parametric_diff(float t){\n\tt *= 2.*pi;\n\n\tfloat x = -22.5*cos(t)*sin(10.0*t) - 2.25*cos(10.0*t)*sin(t) - 3.0*sin(t);\n\tfloat y = -2.25*cos(10.0*t)*cos(t) + 22.5*sin(10.0*t)*sin(t) + 3.0*cos(t);\n\n\treturn 1./20.*2.*pi*vec2(x,y);\n}\n\nvec2 parametric_snd_diff(float t){\n\tt *= 2.*pi;\n\n\tfloat x = -227.25*cos(10.0*t)*cos(t) + 45.0*sin(10.0*t)*sin(t) - 3.0*cos(t);\n\tfloat y = 45.0*cos(t)*sin(10.0*t) + 227.25*cos(10.0*t)*sin(t) - 3.0*sin(t);\n\n\treturn 1./20.*4.*pi*pi*vec2(x,y);\n}\n#elif PARAMETRIC == 3\nconst int num_iterations=4;\nconst int num_start_params=45;\n\nconst int num_iterations2=5;\nconst int num_start_params2=255;\nconst int num_mins=6;\n\nvec2 parametric(float t){\n\tt*=2.*pi;\n\n\tfloat x=tan(7.*t)*cos(13.*t);\n\tfloat y=tan(7.*t)*sin(13.*t);\n\n\treturn 1./2.*vec2(x,y);\n}\n\nvec2 parametric_diff(float t){\n\tt*=2.*pi;\n\n\tfloat x=7.*(tan(7.*t)*tan(7.*t)+1.)*cos(13.*t)-tan(7.*t)*sin(13.*t);\n\tfloat y=7.*(tan(7.*t)*tan(7.*t)+1.)*sin(13.*t)+tan(7.*t)*cos(13.*t);\n\n\treturn 1./2.*2.*pi*vec2(x,y);\n}\n\nvec2 parametric_snd_diff(float t){\n\tt*=2.*pi;\n\n\tfloat x=-((13.*cos(7.*t)*cos(7.*t) - 98.)*cos(13.*t)*sin(7.*t) + 98.*cos(7.*t)*sin(13.*t))/(cos(7.*t)*cos(7.*t)*cos(7.*t));\n\tfloat y=-((13.*cos(7.*t)*cos(7.*t) - 98.)*sin(13.*t)*sin(7.*t) - 98.*cos(13.*t)*cos(37.*t))/(cos(7.*t)*cos(7.*t)*cos(7.*t));\n\n\treturn 1./2.*2.*2.*pi*pi*vec2(x,y);\n}\n#elif PARAMETRIC == 4 || PARAMETRIC == 5\n//Parametric curve by iq\nconst int num_iterations = 3;\n\n#if PARAMETRIC == 4\nconst int num_start_params = 19;\n\nconst int num_iterations2 = 3;\nconst int num_start_params2 = 23;\nconst int num_mins = 5;\n#else\nconst int num_start_params = 25;\n\nconst int num_iterations2 = 3;\nconst int num_start_params2 = 60;\nconst int num_mins = 5;\n#endif\nvec2 parametric(float t)\n{\n\t#if PARAMETRIC == 5\n\tfloat a = 0.85 + 0.1*cos(mod(5.0+0.7*iTime,2.*pi));\n    float b = 0.60 + 0.1*cos(mod(4.0+0.5*iTime,2.*pi));\n    float c = 0.40 + 0.1*cos(mod(1.0+0.3*iTime,2.*pi));\n    vec2 m = cos(mod(0.11*iTime + vec2(2.0,0.0),2.*pi));\n    vec2 n = cos(mod(0.17*iTime + vec2(3.0,1.0),2.*pi));\n\t#else\n\tfloat a=.85;\n\tfloat b=.6;\n\tfloat c=.4;\n\tvec2 n=vec2(0,1);\n\tvec2 m=vec2(0,1);\n\t#endif\n\n\tt*=2.*pi;\n\n    return 1./4.*(a*cos(t+m)*(b+c*cos(t*7.0+n)));\n}\n\nvec2 parametric_diff(float t)\n{\n\t#if PARAMETRIC == 5\n\tfloat a = 0.85 + 0.1*cos(mod(5.0+0.7*iTime,2.*pi));\n    float b = 0.60 + 0.1*cos(mod(4.0+0.5*iTime,2.*pi));\n    float c = 0.40 + 0.1*cos(mod(1.0+0.3*iTime,2.*pi));\n    vec2 m = cos(mod(0.11*iTime + vec2(2.0,0.0),2.*pi));\n    vec2 n = cos(mod(0.17*iTime + vec2(3.0,1.0),2.*pi));\n\t#else\n\tfloat a=.85;\n\tfloat b=.6;\n\tfloat c=.4;\n\tvec2 n=vec2(0,1);\n\tvec2 m=vec2(0,1);\n\t#endif\n\n\tt*=2.*pi;\n\n    return 1./4.*2.*pi*(-7.0*a*c*cos(t+m)*sin(7.0*t+n) - a*sin(t+m)*(b+c*cos(7.0*t+n)));\n}\n\nvec2 parametric_snd_diff(float t)\n{\n\t#if PARAMETRIC == 5\n\tfloat a = 0.85 + 0.1*cos(mod(5.0+0.7*iTime,2.*pi));\n    float b = 0.60 + 0.1*cos(mod(4.0+0.5*iTime,2.*pi));\n    float c = 0.40 + 0.1*cos(mod(1.0+0.3*iTime,2.*pi));\n    vec2 m = cos(mod(0.11*iTime + vec2(2.0,0.0),2.*pi));\n    vec2 n = cos(mod(0.17*iTime + vec2(3.0,1.0),2.*pi));\n\t#else\n\tfloat a=.85;\n\tfloat b=.6;\n\tfloat c=.4;\n\tvec2 n=vec2(0,1);\n\tvec2 m=vec2(0,1);\n\t#endif\n\n\tt*=2.*pi;\n\n    return 1./4.*4.*pi*pi*(14.0*a*c*sin(t+m)*sin(7.0*t+n) - a*cos(t+m)*(b+c*cos(7.0*t+n)) - 49.0*a*c*cos(t+m)*cos(7.0*t+n));\n}\n#elif PARAMETRIC == 6\n//Archimedean spiral\nconst int num_iterations=3;\nconst int num_start_params=20;\n\nconst int num_iterations2=2;\nconst int num_start_params2=81;\nconst int num_mins=3;\n\nvec2 parametric(float t){\n\tt*=2.*pi;\n\n\tfloat a=10.;\n\n\tfloat x=t*sin(a*t);\n\tfloat y=t*cos(a*t);\n\n\treturn 1./25.*vec2(x,y);\n}\n\nvec2 parametric_diff(float t){\n\tt*=2.*pi;\n\n\tfloat a=10.;\n\n\tfloat x=a*t*cos(a*t) + sin(a*t);\n\tfloat y=-a*t*sin(a*t) + cos(a*t);\n\n\treturn 1./25.*2.*pi*vec2(x,y);\n}\n\nvec2 parametric_snd_diff(float t){\n\tt*=2.*pi;\n\n\tfloat a=10.;\n\n\tfloat x=-a*a*t*sin(a*t) + 2.*a*cos(a*t);\n\tfloat y=-a*a*t*cos(a*t) - 2.*a*sin(a*t);\n\n\treturn 1./25.*4.*pi*pi*vec2(x,y);\n}\n#elif PARAMETRIC == 7\n//Hypotrochoid\nconst int num_iterations=3;\nconst int num_start_params=18;\n\nconst int num_iterations2=3;\nconst int num_start_params2=60;\nconst int num_mins=5;\n\nvec2 parametric(float t){\n\tt*=2.*pi;\n\n\tfloat cam=mod(sfloor(iTime*0.6,.2)*pi,2.*pi);\n    float R=mod(floor(iTime*0.3),9.)+3.;\n    const float r=1.;\n    //float d = sin(time*1.)*2.+3.5;\n    float d=R;\n    float x = ((R-r)*cos(t-cam)+d*cos((R-r)/r*t))/(R+.5)*3.;\n    float y = ((R-r)*sin(t)-d*sin((R-r)/r*t))/(R+.5)*3.;\n\n\treturn 1./20.*vec2(x,y);\n}\n\nvec2 parametric_diff(float t){\n\tt*=2.*pi;\n\n\tfloat cam=mod(sfloor(iTime*0.6,.2)*pi,2.*pi);\n    float R=mod(floor(iTime*0.3),9.)+3.;\n    const float r=1.;\n    //float d = sin(time*1.)*2.+3.5;\n    float d=R;\n    float x=(-(R-r)*sin(t-cam)-d*(R-r)/r*sin((R-r)/r*t))/(R+.5)*3.;\n    float y=((R-r)*cos(t)-d*(R-r)/r*cos((R-r)/r*t))/(R+.5)*3.;\n\n\treturn 1./20.*2.*pi*vec2(x,y);\n}\n\nvec2 parametric_snd_diff(float t){\n\tt*=2.*pi;\n\n\tfloat cam=sfloor(iTime*0.6,.2)*pi;\n    float R=mod(floor(iTime*0.3),9.)+3.;\n    const float r=1.;\n    //float d = sin(time*1.)*2.+3.5;\n    float d=R;\n    float x=(-(R-r)*cos(t-cam)-d*(R-r)/r*(R-r)/r*cos((R-r)/r*t))/(R+.5)*3.;\n    float y=(-(R-r)*sin(t)+d*(R-r)/r*(R-r)/r*sin((R-r)/r*t))/(R+.5)*3.;\n\n\treturn 1./20.*4.*pi*pi*vec2(x,y);\n}\n#elif PARAMETRIC == 8\n//Epitrochoid\nconst int num_iterations=3;\nconst int num_start_params=18;\n\nconst int num_iterations2=5;\nconst int num_start_params2=60;\nconst int num_mins=5;\n\nvec2 parametric(float t){\n\tt*=2.*pi;\n\n\tfloat cam=mod(sfloor(iTime*0.4,.1)*pi*2.,2.*pi);\n    const float R = 2.8;\n    const float r = .4;\n    float d = sin(mod(iTime*0.21,2.*pi))*2.+2.6;\n\n    float x = (R+r)*cos(t-cam)-d*cos((R+r)/r*t);\n    float y = (R+r)*sin(t)-d*sin((R+r)/r*t);\n\n\treturn 1./30.*vec2(x,y);\n}\n\nvec2 parametric_diff(float t){\n\tt*=2.*pi;\n\n\tfloat cam=mod(sfloor(iTime*0.4,.1)*pi*2.,2.*pi);\n    const float R = 2.8;\n    const float r = .4;\n    float d = sin(mod(iTime*0.21,2.*pi))*2.+2.6;\n\n    float x = -(R+r)*sin(t-cam)+d*(R+r)/r*sin((R+r)/r*t);\n    float y = (R+r)*cos(t)-d*(R+r)/r*cos((R+r)/r*t);\n\n\treturn 1./30.*2.*pi*vec2(x,y);\n}\n\nvec2 parametric_snd_diff(float t){\n\tt*=2.*pi;\n\n\tfloat cam=mod(sfloor(iTime*0.4,.1)*pi*2.,2.*pi);\n    const float R = 2.8;\n    const float r = .4;\n    float d = sin(mod(iTime*0.21,2.*pi))*2.+2.6;\n\n    float x = -(R+r)*cos(t-cam)+d*(R+r)/r*(R+r)/r*cos((R+r)/r*t);\n    float y = -(R+r)*sin(t)+d*(R+r)/r*(R+r)/r*sin((R+r)/r*t);\n\n\treturn 1./30.*4.*pi*pi*vec2(x,y);\n}\n#elif PARAMETRIC == 9\n//Rose Curve\nconst int num_iterations=3;\nconst int num_start_params=16;\n\nconst int num_iterations2=3;\nconst int num_start_params2=70;\nconst int num_mins=6;\n\nvec2 parametric(float t){\n\tt*=2.*pi;\n\n\tfloat cam= mod(sfloor(iTime*0.1,.1)*pi,2.*pi);\n    float k = mod(floor(iTime*0.1),6.)+2.;\n\n    float x = cos(k*t-cam)*cos(t+cam)*5.5;\n    float y = cos(k*t)*sin(t)*5.5;\n\n\treturn 1./30.*vec2(x,y);\n}\n\nvec2 parametric_diff(float t){\n\tt*=2.*pi;\n\n\tfloat cam=mod(sfloor(iTime*0.1,.1)*pi,2.*pi);\n    float k=mod(floor(iTime*0.1),6.)+2.;\n\n\tfloat x=-5.5*k*cos(t+cam)*sin(k*t - cam) - 5.5*cos(k*t - cam)*sin(t+cam);\n\tfloat y=-5.5*k*sin(k*t)*sin(t) + 5.5*cos(k*t)*cos(t);\n\n\treturn 1./30.*2.*pi*vec2(x,y);\n}\n\nvec2 parametric_snd_diff(float t){\n\tt*=2.*pi;\n\n\tfloat cam=mod(sfloor(iTime*0.1,.1)*pi,2.*pi);\n    float k=mod(floor(iTime*0.1),6.)+2.;\n\n\tfloat x=-5.5*k*k*cos(k*t - cam)*cos(cam + t) + 11.*k*sin(k*t - cam)*sin(cam + t) - 5.5*cos(k*t - cam)*cos(cam + t);\n\tfloat y=-11.0*k*cos(t)*sin(k*t) + (-5.5*k*k - 5.5)*cos(k*t)*sin(t);\n\n\treturn 1./30.*4.*pi*pi*vec2(x,y);\n}\n#elif PARAMETRIC == 10\n//Lissajous\nconst int num_iterations=3;\nconst int num_start_params=25;\n\nconst int num_iterations2=3;\nconst int num_start_params2=50;\nconst int num_mins=5;\n\nvec2 parametric(float t){\n\tt*=2.*pi;\n\n\tfloat ft = mod(floor(iTime*.125),3.);\n    float a = 3.+ft;\n    float b = 2.+ft;\n\n    float x = sin(b*t);\n    float y = sin(a*t+pi/2.+mod(iTime*.5,2.*pi));\n\n\treturn 1./7.*vec2(x,y);\n}\n\nvec2 parametric_diff(float t){\n\tt*=2.*pi;\n\n\tfloat ft = mod(floor(iTime*.125),3.);\n    float a = 3.+ft;\n    float b = 2.+ft;\n\n\tfloat x=b*cos(b*t);\n    float y=a*cos(a*t+pi/2.+mod(iTime*.5,2.*pi));\n\n\treturn 1./7.*2.*pi*vec2(x,y);\n}\n\nvec2 parametric_snd_diff(float t){\n\tt*=2.*pi;\n\n\tfloat ft = mod(floor(iTime*.125),3.);\n    float a = 3.+ft;\n    float b = 2.+ft;\n\n\tfloat x=-b*b*sin(b*t);\n    float y=-a*a*sin(a*t+pi/2.+mod(iTime*.5,2.*pi));\n\n\treturn 1./7.*4.*pi*pi*vec2(x,y);\n}\n#elif PARAMETRIC == 11\n//Hypocycloid (just a special case of hypotrochoids)\nconst int num_iterations=4;\nconst int num_start_params=40;\n\nconst int num_iterations2=3;\nconst int num_start_params2=80;\nconst int num_mins=6;\n\nvec2 parametric(float t){\n\tt*=8.*pi;\n\n\tconst float a = 6.;\n    float ft = mod(floor(iTime*0.25),5.)+2.25;\n    float b = 6./ft;\n    float cam= mod(sfloor(iTime*0.5,.2)*pi,2.*pi);\n\n    float x = ((a-b)*cos(t-cam) + b*cos(t*(a/b-1.)));\n    float y = ((a-b)*sin(t) - b*sin(t*(a/b-1.)));\n\n\treturn 1./30.*vec2(x,y);\n}\n\nvec2 parametric_diff(float t){\n\tt*=8.*pi;\n\n\tconst float a = 6.;\n    float ft = mod(floor(iTime*0.25),5.)+2.25;\n    float b = 6./ft;\n    float cam= mod(sfloor(iTime*0.5,.2)*pi,2.*pi);\n\n    float x = ((b-a)*sin(t-cam) + (b-a)*sin(t*(a/b-1.)));\n    float y = ((a-b)*cos(t) - (a-b)*cos(t*(a/b-1.)));\n\n\treturn 1./30.*8.*pi*vec2(x,y);\n}\n\nvec2 parametric_snd_diff(float t){\n\tt*=8.*pi;\n\n\tconst float a = 6.;\n    float ft = mod(floor(iTime*0.25),5.)+2.25;\n    float b = 6./ft;\n    float cam= mod(sfloor(iTime*0.5,.2)*pi,2.*pi);\n\n    float x = ((b-a)*cos(t-cam) + (b-a)*(a/b-1.)*cos(t*(a/b-1.)));\n    float y = ((b-a)*sin(t) + (a-b)*(a/b-1.)*sin(t*(a/b-1.)));\n\n\treturn 1./30.*8.*8.*pi*pi*vec2(x,y);\n}\n#endif\n\nfloat length2( vec2 v ) { return dot(v,v); }\n\nfloat segment_dis_sq( vec2 p, vec2 a, vec2 b ){\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length2( pa - ba*h );\n}\n\nfloat segment_param( vec2 p, vec2 a, vec2 b ){\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn h;\n}\n\nfloat parametric_segments_dis_sq(vec2 uv){\n    float d0 = 1e38;\n    vec2 a = parametric(0.);\n    for( int i=1; i<num_segments; i++ )\n    {\n        float t = float(i)/float(num_segments-1);\n\t\tvec2 b = parametric(t);\n        d0 = min(d0,segment_dis_sq(uv, a, b ));\n        a = b;\n    }\n    \n    return d0;\n}\n\nfloat parametric_segments_dis(vec2 uv){\n\treturn sqrt(parametric_segments_dis_sq(uv));\n}\n\nfloat parametric_normal_iteration(float t, vec2 uv){\n\tvec2 uv_to_p=parametric(t)-uv;\n\tvec2 tang=parametric_diff(t);\n\n\tfloat l_tang=dot(tang,tang);\n\treturn t-factor*dot(tang,uv_to_p)/l_tang;\n}\n\nfloat parametric_normal_iteration2(float t, vec2 uv){\n\tvec2 uv_to_p=parametric(t)-uv;\n\tvec2 tang=parametric_diff(t);\n\tvec2 snd_drv=parametric_snd_diff(t);\n\n\tfloat l_tang=dot(tang,tang);\n\n\tfloat fac=dot(tang,snd_drv)/(2.*l_tang);\n\tfloat d=-dot(tang,uv_to_p);\n\n\tfloat t2=d/(l_tang+fac*d);\n\n\treturn t+factor*t2;\n}\n\nfloat parametric_dis_approx_sq(vec2 uv){\n\tfloat d0 = 1e38;\n\n\tfloat t0=0.;\n\tfloat t;\n\n\tfor(int i=0;i<num_start_params;i++){\n\t\tt=t0;\n\t\tfor(int j=0;j<num_iterations;j++){\n\t\t\t#ifdef SECOND_ORDER\n\t\t\tt=parametric_normal_iteration2(t,uv);\n\t\t\t#else\n\t\t\tt=parametric_normal_iteration(t,uv);\n\t\t\t#endif\n\t\t}\n\t\tt=clamp(t,0.,1.);\n\t\tvec2 uv_to_p=parametric(t)-uv;\n\t\td0=min(d0,dot(uv_to_p,uv_to_p));\n\n\t\tt0+=1./float(num_start_params-1);\n\t}\n\n\treturn d0;\n}\n\nfloat parametric_dis_approx_sq2(vec2 uv){\n\tfloat d0 = 1e38;\n\tfloat d1 = 1e38;\n\n\tfloat t0=0.;\n\n\tfloat[6] nt;\n\tfloat[6] nd=float[6](1e38,1e38,1e38,1e38,1e38,1e38);\n\n\tfor(int i=0;i<num_start_params2;i++){\n\t\tvec2 uv_to_p=parametric(t0)-uv;\n\t\td1=dot(uv_to_p,uv_to_p);\n\t\t//d1=abs(dot(uv_to_p,parametric_diff(t0)));\n\n\t\tif(d1<nd[2]){\n\t\t\tif(d1<nd[0]){\n\t\t\t\tnd[5]=nd[4];\n\t\t\t\tnt[5]=nt[4];\n\n\t\t\t\tnd[4]=nd[3];\n\t\t\t\tnt[4]=nt[3];\n\n\t\t\t\tnd[3]=nd[2];\n\t\t\t\tnt[3]=nt[2];\n\n\t\t\t\tnd[3]=nd[2];\n\t\t\t\tnt[3]=nt[2];\n\n\t\t\t\tnd[2]=nd[1];\n\t\t\t\tnt[2]=nt[1];\n\n\t\t\t\tnd[1]=nd[0];\n\t\t\t\tnt[1]=nt[0];\n\n\t\t\t\tnd[0]=d1;\n\t\t\t\tnt[0]=t0;\n\t\t\t}\n\t\t\telse if(d1<nd[1]){\n\t\t\t\tnd[5]=nd[4];\n\t\t\t\tnt[5]=nt[4];\n\n\t\t\t\tnd[4]=nd[3];\n\t\t\t\tnt[4]=nt[3];\n\n\t\t\t\tnd[3]=nd[2];\n\t\t\t\tnt[3]=nt[2];\n\n\t\t\t\tnd[2]=nd[1];\n\t\t\t\tnt[2]=nt[1];\n\n\t\t\t\tnd[1]=d1;\n\t\t\t\tnt[1]=t0;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tnd[5]=nd[4];\n\t\t\t\tnt[5]=nt[4];\n\n\t\t\t\tnd[4]=nd[3];\n\t\t\t\tnt[4]=nt[3];\n\n\t\t\t\tnd[3]=nd[2];\n\t\t\t\tnt[3]=nt[2];\n\n\t\t\t\tnd[2]=d1;\n\t\t\t\tnt[2]=t0;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif(d1<nd[3]){\n\t\t\t\tnd[5]=nd[4];\n\t\t\t\tnt[5]=nt[4];\n\n\t\t\t\tnd[4]=nd[3];\n\t\t\t\tnt[4]=nt[3];\n\n\t\t\t\tnd[3]=d1;\n\t\t\t\tnt[3]=t0;\n\t\t\t}\n\t\t\telse if(d1<nd[4]){\n\t\t\t\tnd[5]=nd[4];\n\t\t\t\tnt[5]=nt[4];\n\n\t\t\t\tnd[4]=d1;\n\t\t\t\tnd[4]=t0;\n\t\t\t}\n\t\t\telse if(d1<nd[5]){\n\t\t\t\tnd[5]=d1;\n\t\t\t\tnt[5]=t0;\n\t\t\t}\n\t\t}\n\n\t\tt0+=1./float(num_start_params2-1);\n\t}\n\n\td0=1e38;\n\n\tfor(int i=0;i<num_mins;i++){\n\t\tfor(int j=0;j<num_iterations2;j++){\n\t\t\t#ifdef SECOND_ORDER\n\t\t\tnt[i]=parametric_normal_iteration2(nt[i],uv);\n\t\t\t#else\n\t\t\tnt[i]=parametric_normal_iteration(nt[i],uv);\n\t\t\t#endif\n\t\t}\n\t\tnt[i]=clamp(nt[i],0.,1.);\n\n\t\tvec2 uv_to_p=parametric(nt[i])-uv;\n\t\td0=min(d0,dot(uv_to_p,uv_to_p));\n\t}\n\n\treturn d0;\n}\n\nfloat parametric_dis_approx(vec2 uv){\n\treturn sqrt(parametric_dis_approx_sq(uv));\n}\n\nfloat parametric_dis_approx2(vec2 uv){\n\treturn sqrt(parametric_dis_approx_sq2(uv));\n}\n\nfloat parametric_dis_approx_hybrid(vec2 uv){\n\tfloat d0=parametric_dis_approx_sq(uv);\n\n\tif(d0>eps){\n\t\td0=min(d0,parametric_segments_dis_sq(uv));\n\t}\n\n\treturn sqrt(d0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tfloat border=2./iResolution.x;\n\n\tvec2 uv=gl_FragCoord.xy/iResolution.xy;\n\tuv-=.5;\n    uv.y*=iResolution.y/iResolution.x;\n\n\tvec2 mouse=iMouse.xy/iResolution.xy;\n\tmouse-=.5;\n    mouse.y*=iResolution.y/iResolution.x;\n\n\tborder*=zoom;\n\tuv*=zoom;\n\tmouse*=zoom;\n\n\tvec3 curve_col=vec3(1,1,1);\n\n\t#ifdef HYBRID\n\tfloat dis=parametric_dis_approx_hybrid(uv);\n\t#elifdef SEGMENTS\n\tfloat dis=parametric_segments_dis(uv);\n\t#else\n\t#ifdef USE_VARIANT\n\tfloat dis=parametric_dis_approx2(uv);\n\t#else\n\tfloat dis=parametric_dis_approx(uv);\n\t#endif\n\t#endif\n\n\t#ifdef SHOW_DISTANCE_FIELD\n\tfloat sgn=1.;\n\tdis/=zoom;\n\t//iq's sd color scheme\n\tvec3 color = vec3(1) - sgn*vec3(0.1,0.4,0.7);\n\tcolor *= 1.0 - exp(-8.0*dis);\n\tcolor *= 0.8 + 0.2*cos(480.0*dis*sgn);\n\tcolor = mix( color, curve_col, 1.0-smoothstep(0.0,0.005,dis) );\n\t#else\n\tvec3 color=bg_col;\n\tcolor=mix(line_col,color,smoothstep(0.,border,dis-line_size));\n\t#endif\n\n\tfloat t0=mod(iTime*.05,1.);\n\tvec2 p0=parametric(t0);\n\n\tdis=distance(uv,p0)-dot_size;\n\tcolor=mix(point_col,color,smoothstep(0.,border,dis));\n\n\tfragColor=vec4(color,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}