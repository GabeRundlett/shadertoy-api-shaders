{
    "Shader": {
        "info": {
            "date": "1690987380",
            "description": "test",
            "flags": 0,
            "hasliked": 0,
            "id": "ctscRB",
            "likes": 0,
            "name": "processing loadscreen idk xD",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "derplayer",
            "viewed": 17
        },
        "renderpass": [
            {
                "code": "float N21(vec2 uv)\n{\n    return fract(sin(uv.x * 21.281 + uv.y * 23.182) * 5821.92);\n}\n\nfloat line(vec2 uv)\n{\n    return smoothstep(0.0, 0.25, uv.x) - smoothstep(0.0, 0.75, uv.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    \n    vec2 offset = abs(uv.yx) / vec2(30., 5.2);\n    uv = uv + uv * offset * offset;\n    uv = uv * 0.5 + 0.5;\n    \n    vec2 scale = vec2(128, 90);\n    \n    vec2 lUV = fract(uv * scale);\n    vec2 gID = floor(uv * scale);\n\n    float rowNoise = N21(vec2(0.0, gID.y));\n    float dir = ((rowNoise * 2.0) - 1.0) + 0.2;\n    gID.x += floor(iTime * dir * 30.);\n    \n    float cellNoise = N21(gID);\n    cellNoise /= 0.95;\n    float test = sin(cellNoise - iTime) + (rowNoise * 2.0);\n    float drawBlock = float(cellNoise > test);\n    int even = int(gID.y) % 2;\n\n    vec3 col = vec3(line(lUV)) * drawBlock * float(even);\n    col *= fract(sin(gID.x)) + 0.24;\n    //col *= vec3(0,0.796,0.596); // matrix\n    col *= vec3(0.311,0.496,0.696);\n    \n    fragColor = vec4(vec3(col), col.g * 0.2);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}