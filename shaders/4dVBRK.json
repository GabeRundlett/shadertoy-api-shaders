{
    "Shader": {
        "info": {
            "date": "1529557755",
            "description": "Visualizing the complex Gaussian kernel described on this page:\nhttp://yehar.com/blog/?p=1495\n\nMagnitude, phase, real part, imaginary part.\nClick and drag horizontally to change magnitude.\nClick and drag vertically to change phase.",
            "flags": 0,
            "hasliked": 0,
            "id": "4dVBRK",
            "likes": 8,
            "name": "Complex Gaussian kernel",
            "published": 3,
            "tags": [
                "convolution",
                "complex",
                "gaussian",
                "kernel",
                "signal"
            ],
            "usePreview": 0,
            "username": "Zavie",
            "viewed": 668
        },
        "renderpass": [
            {
                "code": "/*\n\nComplex Gaussian kernel.\n\nA quick visualization to get a better understanding of the math described here:\nhttp://yehar.com/blog/?p=1495\n\nTop left    : magnitude\nBottom left : phase\nTop right   : real part\nBottom right: imaginary part\n\nDrag horizontally to change magnitude.\nDrag vertically to change phase.\n\n-- \nZavie\n\n*/\n\n#define PI acos(-1.)\n\nvec3 angleToColor(float angle)\n{\n    vec3 color = vec3(\n        sin(angle),\n        sin(angle + 2. * PI / 3.),\n        sin(angle + 4. * PI / 3.));\n    return color * 0.5 + 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = 10.*(fragCoord/iResolution.xy - 0.5) * vec2(1., iResolution.y/iResolution.x);\n\n    // Complex Gaussian kernel:\n    // f(x,y) = exp((a + ib)*(x*x + y*y))\n    float a = mix(1., mix(0., 10., iMouse.x / iResolution.x), float(iMouse.z > 0.));\n    float b = mix(4., mix(0., 10., iMouse.y / iResolution.y), float(iMouse.z > 0.));\n\n    float sqrDist = dot(xy, xy);\n    float norm = exp(-a * sqrDist);\n    float theta = b * sqrDist;\n    vec2 complexGaussianKernel = norm * vec2(cos(theta), sin(theta));\n\n    // Below this comment there is nothing but\n    // just coloring things.\n    vec3 visualizeMagnitude = vec3(norm);\n    vec3 visualizePhase = pow(angleToColor(theta), vec3(1. / 2.2));\n    vec3 visualizeRealPart = vec3(complexGaussianKernel.x * 0.5 + 0.5);\n    vec3 visualizeImaginaryPart = vec3(complexGaussianKernel.y * 0.5 + 0.5);\n\n    vec3 color = (xy.x < 0. ?\n        (xy.y < 0. ? visualizePhase : visualizeMagnitude) :\n        (xy.y < 0. ? visualizeImaginaryPart : visualizeRealPart));\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}