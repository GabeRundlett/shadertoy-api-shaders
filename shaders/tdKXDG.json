{
    "Shader": {
        "info": {
            "date": "1574910366",
            "description": "First time working with shaders or OpenGL.\n\nThough I would try to make something simple like no signal tv screen.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "tdKXDG",
            "likes": 5,
            "name": "TV no signal (basic)",
            "published": 3,
            "tags": [
                "nosignaltvscreen"
            ],
            "usePreview": 0,
            "username": "japoilski",
            "viewed": 597
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // First time working with shader\n    // Mostly I understand that mainImage is a loop of every pixel on the screen\n    // Something so simple that can be extremely complex\n    \n    // It's important to normalize the resolution\n    // because it's easier to work with 0-1 than the screen resolution e.g 640/360\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // TV screen\n    // 7 vertical rectangle (white, yellow, light blue, green, pink, red blue)\n    // 7 vertical smaller rectangle (blue, black, pink, black, light blue, black, white)\n    // 6 square (dark blue, white, purple, black, gradiant black to gray, black)\n    \n    // Default black pixel\n    vec3 col = vec3(0,0,0);\n    \n    float l = 1.0 / 7.0; // Since the resolution was normalized screen is equal to 1 and we divide it by 7\n    \n    // Draw 7 rectangle different color per segment\n    if (uv.y > 0.35) {\n        if (uv.x > l*0.0 && uv.x < l*1.0) col = vec3(1, 1, 1); // white\n        if (uv.x > l*1.0 && uv.x < l*2.0) col = vec3(1, 1, 0); // yellow\n        if (uv.x > l*2.0 && uv.x < l*3.0) col = vec3(0, 1, 1); // light blue\n        if (uv.x > l*3.0 && uv.x < l*4.0) col = vec3(0, 1, 0); // green\n        if (uv.x > l*4.0 && uv.x < l*5.0) col = vec3(1, 0, 1); // purple\n        if (uv.x > l*5.0 && uv.x < l*6.0) col = vec3(1, 0, 0); // red\n        if (uv.x > l*6.0 && uv.x < l*7.0) col = vec3(0, 0, 1); // blue\n    }\n    \n    // Draw 7 smaller rectangle\n    if (uv.y > 0.25 && uv.y < 0.35) {\n     \tif (uv.x > l*0.0 && uv.x < l*1.0) col = vec3(0, 0, 1); // blue\n        // if (uv.x < l*2.0) col = vec3(0, 0, 0); // black -- don't need it because background is black\n        if (uv.x > l*2.0 && uv.x < l*3.0) col = vec3(1, 0, 1); // pink\n        // if (uv.x > l*3.0 && uv.x < l*4.0) col = vec3(0, 0, 0); // black\n        if (uv.x > l*4.0 && uv.x < l*5.0) col = vec3(0, 1, 1); // light blue\n        // if (uv.x > l*5.0 && uv.x < l*6.0) col = vec3(0, 0, 0); // black\n        if (uv.x > l*6.0 && uv.x < l*7.0) col = vec3(1, 1, 1); // white\n    }\n    \n    float l2 = 1.0 / 6.0; // Same as earlier except we divide the screen by 6\n    // Draw 6 square\n    if (uv.y < 0.25) {\n    \tif (uv.x > l2*0.0 && uv.x < l2*1.0) col = vec3(0, 0, 0.5); // dark blue\n    \tif (uv.x > l2*1.0 && uv.x < l2*2.0) col = vec3(1, 1, 1); // white\n        if (uv.x > l2*2.0 && uv.x < l2*3.0) col = vec3(0.2, 0, 0.5); // dark purple\n        //if (uv.x > l2*3.0 && uv.x < l2*4.0) col = vec3(0, 0, 0); // black\n    \t// Gradient box\n        if (uv.x > l2*4.0 && uv.x < l2*5.0) {\n            // We want to start the gradiant at black (left to right)\n            // If we only use uv.x it will start a grayish color\n            // So we subtract the position of the square to uv.x\n            float s = uv.x - l2*4.0;\n        \tcol = vec3(s); // Increment pixel position to get the gradient effect\n        }\n        //if (uv.x > l2*5.0 && uv.x < l2*6.0) col = vec3(0,0,0); // black\n    }\n    \n    \n    // Output color of the pixel with alpha \n    // recommended to leave alpha channel at 1.0\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}