{
    "Shader": {
        "info": {
            "date": "1675128693",
            "description": "pendulum, \ninspired by this https://www.youtube.com/watch?v=4GaGnU8Ij2Y&t=623s",
            "flags": 8,
            "hasliked": 0,
            "id": "DlsXzX",
            "likes": 24,
            "name": "sound pendulum",
            "published": 3,
            "tags": [
                "sound",
                "audio",
                "sine",
                "pendulum"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 524
        },
        "renderpass": [
            {
                "code": "\nvec3 f_hsl2rgb( in vec3 c )\n{\n    // from here https://www.shadertoy.com/view/XljGzV\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_fc = (fragCoord.xy - iResolution.xy*.5)/iResolution.y;\n    o_fc*=1.32;\n    o_fc+=vec2(0.,0.5);\n    float n_t = iTime;\n    vec4 o_col = vec4(0.);\n    vec2 o_freq;\n    float n_its = 33.;\n    float n_one_it = 1./n_its;\n    \n    float n_hz_start = 60.;\n    float n_hz = n_hz_start;\n    //n_ampfade = pow(n_ampfade,2.);\n    float n_offset = sin(n_t*0.1)*2.;\n    \n    float n_dmin = 1.;\n    float n_tau = 6.283185;\n    float n_ang_ball_nor = 0.;\n    \n    for(float n_it=0.; n_it<n_its;n_it+=1.){\n        float n_it_nor = n_it/n_its;\n        float n_radius = n_it_nor;\n        float n_ang = -(n_t+n_it_nor*n_offset)*(n_tau/2.)-n_tau/4.;\n        float n_ampfade = n_one_it-fract(n_t+n_it_nor*n_offset)*n_one_it;\n \n        n_hz += n_hz/2.;\n        \n        vec2 o_p = vec2(\n            sin(sin(n_ang)*(n_tau/4.))*n_radius,\n            cos(sin(n_ang)*(n_tau/4.))*n_radius\n        );\n        float n_d = length(o_p-o_fc);\n        if(n_d < n_dmin){\n            if(mod(floor(n_t+n_it_nor*n_offset),2.)== 0.){\n                n_ang_ball_nor = (sin(n_ang)*(n_tau/4.))/(n_tau/2.);\n            }else{\n                n_ang_ball_nor = 1.-(sin(n_ang)*(n_tau/4.))/(n_tau/2.);\n            }\n            n_ang_ball_nor = abs(fract(-1.*n_ang_ball_nor-.5));\n            \n            n_dmin = n_d;\n        }\n    }\n    float n_rball = 1./n_its*.5;\n    float n_aa = (1./iResolution.x)*10.;\n    float n_dball = smoothstep(n_rball+n_aa, n_rball, n_dmin);\n    float n_dballoutline = smoothstep(\n        0.+n_aa,\n        0.,\n        abs(n_dmin-n_rball)\n    );\n    \n    float n_dcntr = length(o_fc);\n    float n_it = ((n_dcntr-n_one_it*.5) / n_one_it);\n    float n_itnor = floor(n_it)/ n_its;\n    float n_itnor2 = sin((clamp(n_dcntr,0.,1.))*n_tau*n_its+n_tau/4.);\n    n_itnor = clamp(n_itnor, 0., 1.-n_one_it);\n    n_itnor2 = clamp(n_itnor2, 0., 1.);\n    n_it = clamp(n_it, 0.,n_its-1.);\n    float n_dorbitoutline = smoothstep(\n        .05+n_aa*10.,\n        .0,\n        abs(fract(n_it)-.5)\n    );\n    float n_rline = 0.01;\n    //n_dorbitoutline = n_itnor2;\n\n    float n_dlinebot = smoothstep(\n        n_aa,\n        0.0,\n        abs(o_fc.y+n_rball)\n    );\n    float n_dlinebelowbot = float(o_fc.y > 0.-n_rball);\n    //o_col += clamp(n_dballoutline,0.,1.)-(n_dball*n_ang_ball_nor);\n    o_col += (n_dball*n_ang_ball_nor)+n_dballoutline;\n    o_col += vec4(n_dorbitoutline);\n    o_col += n_dlinebot;\n    vec3 o_col_orbit = f_hsl2rgb(vec3(n_itnor, .5, .5));\n    \n    o_col *= n_dlinebelowbot;\n    o_col = o_col*vec4(o_col_orbit, 1.);\n\n    fragColor = o_col;\n    //fragColor += vec4(n_itnor);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound( int samp, float time )\n{\n   \n    float n_t = time*1.;\n    \n    vec2 o_amp;\n    float n_its = 33.;\n    float n_one_it = 1./n_its;\n    \n    float n_hz_start = 60.;\n    float n_hz = n_hz_start;\n    float n_tau = 6.283185;\n    //n_ampfade = pow(n_ampfade,2.);\n    float n_offset = sin(n_t*0.1)*2.;\n    for(float n_it=0.; n_it<n_its;n_it+=1.){\n        float n_it_nor = n_it/n_its;\n\n        float n_ampfade = n_one_it-fract(n_t+n_it_nor*n_offset)*n_one_it;\n        float n_amp = sin(n_tau*n_hz*time)*n_ampfade;\n        if(mod(floor(n_t+n_it_nor*n_offset),2.)== 0.){\n            o_amp.x += n_amp;\n        }else{\n            o_amp.y += n_amp;\n        }\n            \n        n_hz = n_hz_start * n_it;\n    }\n    //n_freq += sin(6.2831*220.0*time)*exp(-n_t);\n    // A 440 Hz wave that attenuates quickly overt time\n    \n    return o_amp*0.5;//loudness reduction\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}