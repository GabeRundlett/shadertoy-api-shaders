{
    "Shader": {
        "info": {
            "date": "1674211379",
            "description": "Simulating a fixed update rate with no rendering interpolation. Update rates are 50 Hz, 100 Hz, 200 Hz and no quantization.\n\nOpinion wanted: How smooth is each animation? And what is your screen update rate?",
            "flags": 0,
            "hasliked": 0,
            "id": "ctlSRr",
            "likes": 1,
            "name": "Quantized rendering",
            "published": 3,
            "tags": [
                "techtest"
            ],
            "usePreview": 0,
            "username": "NohatCoder",
            "viewed": 164
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float boxsize=min(iResolution.x*0.5,iResolution.y*0.5);\n    vec2 centre;\n    int quadrant=0;\n    if(fragCoord.x*2.0<iResolution.x){\n        centre.x=iResolution.x*0.25;\n    }\n    else{\n        centre.x=iResolution.x*0.75;\n        quadrant+=1;\n    }\n    if(fragCoord.y*2.0<iResolution.y){\n        centre.y=iResolution.y*0.25;\n    }\n    else{\n        centre.y=iResolution.y*0.75;\n        quadrant+=2;\n    }\n    float time=iTime;\n    vec3 c=vec3(1.0,0.8,0.8);\n    if(quadrant==1){\n        time=floor(time*200.0)/200.0;\n        c=vec3(1.0,1.0,1.0);\n    }\n    if(quadrant==2){\n        time=floor(time*100.0)/100.0;\n        c=vec3(0.8,1.0,0.8);\n    }\n    if(quadrant==3){\n        time=floor(time*50.0)/50.0;\n        c=vec3(0.8,0.8,1.0);\n    }\n    time*=1.0;\n    vec2 along=vec2(sin(time),cos(time));\n    vec2 normal=vec2(cos(time),-sin(time));\n    vec2 end1=centre+along*boxsize*0.4;\n    vec2 end2=centre-along*boxsize*0.4;\n    float radius=boxsize*0.05;\n    float radiuss=radius*radius;\n    float sumd=0.0;\n    float sumdp=0.0;\n    float a;\n    float b;\n    for(a=-0.5;a<1.0;a+=1.0){\n        for(b=-0.5;b<1.0;b+=1.0){\n            vec2 pixelcorner=fragCoord+vec2(a,b);\n            float d=distance(end1,pixelcorner)-radius;\n            d=min(d,distance(end2,pixelcorner)-radius);\n            float inlinesegment=dot(pixelcorner-centre,along);\n            if(abs(inlinesegment)<boxsize*0.4){\n                d=min(d,abs(dot(normal,pixelcorner-centre))-radius);\n            }\n            sumd+=d;\n            sumdp+=abs(d);\n        }\n    }\n    float fill=((-sumd/sumdp)+1.0)*0.5;\n    fragColor = vec4(c*fill,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}