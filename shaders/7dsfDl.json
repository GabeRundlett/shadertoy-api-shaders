{
    "Shader": {
        "info": {
            "date": "1645563523",
            "description": "reflection changes n2",
            "flags": 0,
            "hasliked": 0,
            "id": "7dsfDl",
            "likes": 12,
            "name": "reflection changes n2",
            "published": 3,
            "tags": [
                "reflectionchangesn2"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 259
        },
        "renderpass": [
            {
                "code": "//cambios por jorge flores p.---->jorge2017a2\n//21-feb-2022\n///referencia y fork\n//https://www.shadertoy.com/view/MtlfRs.....by zackpudil in 2017-12-11\n\n\n//----\nstruct Ray\n{   vec3 ro; // origin\n    vec3 rd; // direction\n};\n\n#define MIN_DIST 0.001\n\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\n\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{   float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n\nvec2 GetDist(vec3 p  )\n{\n\tvec2 res= vec2(9999.0, -1.0);  vec3 p0=p;\n\tfloat planeDist1 = p.y-1.0;  //piso inf\n   \n    res =opU2(res, vec2(planeDist1,1.0));\n    float sds1=sdSphere(p-vec3(0.0,5.0,0.0), 5.0 );\n    float d2= sdBox(p-vec3(-10.0,5.0,-5.0), vec3(3.0,10.0,2.0) );\n    float d3= sdBox(p-vec3(10.0,15.0,5.0), vec3(3.0,15.0,5.0) );\n    float d4=sdSphere(p-vec3(0.0,14.0,0.0), 3.0 );\n    float d5= sdBox(p-vec3(-10.0,3.5,10.0), vec3(2.0) );\n\n    res =opU2(res, vec2(sds1,2.0));\n    res =opU2(res, vec2(d2,3.0));\n    res =opU2(res, vec2(d3,4.0));\n    res =opU2(res, vec2(d4,5.0));\n    res =opU2(res, vec2(d5,6.0));\n    return res;\n}\n\n// basic trace, with some LOD\nvec2 RayMarch(vec3 ro, vec3 rd, float m) {\n    float t;\n\tvec2 d = vec2(9999.0,-1.0);\n    \n\tfor(int i = 0; i < 200; i++) {\n\t\td = GetDist(ro + rd*t);\n\t\tif(d.x < (0.001 + 0.0001*t) || t >= m) break;\n        t += d.x*0.67;\n\t}\n\treturn vec2(t,d.y);\n}\n\n// basic normal.\nvec3 normal(vec3 p) {\n\tvec2 h = vec2(0.001, 0.0);\n\tvec3 n = vec3(\n\t\tGetDist(p + h.xyy).x - GetDist(p - h.xyy).x,\n\t\tGetDist(p + h.yxy).x - GetDist(p - h.yxy).x,\n\t\tGetDist(p + h.yyx).x - GetDist(p - h.yyx).x\n\t);\n\treturn normalize(n);\n}\n\nfloat getSoftShadow(vec3 p, vec3 lightPos)\n{   float res = 1.0;\n    float dist = 0.01;\n    float lightSize = 0.03;\n    for (int i = 0; i < 15; i++) {\n        float hit = GetDist(p + lightPos * dist).x;\n        res = min(res, hit / (dist * lightSize));\n        dist += hit;\n        if (hit < 0.0001 || dist > 60.0) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nfloat ambOcclusion(vec3 pos, vec3 nor)\n{   float sca = 2.0, occ = 0.0;\n    for(int i = 0; i < 10; i++) {\n        float hr = 0.01 + float(i) * 0.5 / 4.0;\n        float dd = GetDist(nor * hr + pos).x;\n        occ += (hr - dd)*sca;\n        sca *= 0.6;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );\n}\n\n//euclidean cameras.\nmat3 camera(vec3 o, vec3 l) \n{\tvec3 w = normalize(l - o);\n\tvec3 u = normalize(cross(vec3(0, 1, 0), w));\n\tvec3 v = normalize(cross(w, u));\t\n\treturn mat3(u, v, w);\n}\n\nvec3 iluminacion(vec3 pos,vec3 rd,vec3 nor, vec3 ref, vec3 lig, float id_color )\n{\n    vec3 rcol =vec3(0.0);    \n    // occlusion and shadows\n    float occ = ambOcclusion(pos, nor);\n\t//float sha = step(5.0, trace(pos + nor*0.001, lig, 5.0));\n    float sha = getSoftShadow(pos, normalize(lig));\n\t\t\t\n    // lighting ambient + diffuse + fresnel + specular\n\trcol += 0.2*occ;\n\trcol += clamp(dot(lig, nor), 0.0, 1.0)*occ*sha;\n\trcol += pow(clamp(1.0 + dot(rd, nor), 0.0, 1.0), 2.0)*occ;\n\trcol += 2.0*pow(clamp(dot(ref, lig), 0.0, 1.0), 30.0)*occ;\n\t\t\t\n     \n    if(id_color==1.0)\n    {    rcol *= 0.2 + 0.5*mod(floor(pos.x*0.25) + floor(pos.z*0.25), 2.0);}\n      \n\tif(id_color==2.0)\n    { rcol *= vec3(0.2, 0.7, 0.7);  }\n     \n     if(id_color==3.0)\n    { rcol *= vec3(1.0, 0.32, 0.17); }\n    \n    if(id_color==4.0)\n    { rcol *= vec3(1.0); }\n    \n    if(id_color==5.0)\n    { rcol *= vec3(1.0,0.0,0.0); }\n    \n    if(id_color==6.0)\n    { rcol *= vec3(1.0,1.0,0.0); }\n    \n        \n\treturn rcol;\t\t\n}        \n\nvec3 render(vec3 ro, vec3 rd) \n{\n    vec3 col = vec3(0.45, 0.8, 1.0);\n\tvec3 lig1 = normalize(vec3(10.8, 20.0, -25.6));\n    vec3 lig2 = normalize(vec3(0.0, 10., 25.6));\n    vec2 t;\n    \n    \tfor(int i = 0; i < 3; i++) {\n\t\t t = RayMarch(ro, rd, 50.0);\n\t\tif(t.x < 50.0) \n        {\n\t\t\tvec3 rcol = vec3(0);\n            // geometry, hit position, normal, reflect\n\t\t\tvec3 pos = ro + rd*t.x;\n\t\t\tvec3 nor = normal(pos);\n\t\t\tvec3 ref = reflect(rd, nor);\n            rcol=iluminacion(pos,rd, nor, ref, lig1,t.y);\n            rcol+=iluminacion(pos,rd, nor, ref, lig2,t.y);\n            rcol/=2.0;\n            \n            // set up the ray orgin and direction for reflection.\n\t\t\t\n            ro = pos + nor*0.001;\n            //separacion de colores y reflection\n            if (t.y<5.0)  \n\t\t\trd = ref;\n            \n            // sky fog.\n\t\t\trcol = mix(rcol, vec3(0.45, 0.8, 1.0), 1.0 - exp(-0.00715*t.x));\n            // lighten intensity on each successive reflect.\n\t\t\tif(i == 0)\n               col = rcol;\n\t\t\telse\n                col *= mix(rcol, vec3(1), 1.0 - exp(-0.8*float(i)));\n\t\t}\n\t}\n    return col;\n}\n\n\nvec3 linear2srgb(vec3 c) \n{ return mix(12.92 * c,1.055 * pow(c, vec3(1.0/1.8)) - 0.055, step(vec3(0.0031308), c)); }\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{ return vec3(1.0) - exp(-hdrColor * exposure); }\n\n\nvec3 ACESFilm(vec3 x)\n{   float a,b,c,d,e;\n    a = 2.51; b = 0.03; c = 2.43; \n    d = 0.59; e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nRay RotarEnCirculo(vec3 ro,vec3 rd)\n{\n   float r=25.0;\n   float veltime=30.0;  \n    float tt = radians( -iTime*veltime);\n    vec3  pos=vec3(0.0,0.0,20.0);\n    vec3 rotation1 = pos+vec3(r*sin(tt), 0.0, r*cos(tt));\n    ro +=rotation1;   \n    rd=rotate_y( vec3(-rd.x,rd.y,-rd.z), tt);\n    return  Ray(ro,rd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\tvec2 p = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\t\n    vec3 ro=vec3(0.0,8.0,-15.0);\n    vec3 rd=normalize(vec3(p,1.0));\n    \n     Ray ray= RotarEnCirculo(ro,rd);\n    ro=ray.ro;\n    rd=ray.rd;\n    \n    \n    vec3 col= render(ro, rd);\n        \n    // tone mapping and gamma correction.\n\t//col = 1.0 - exp(-0.5*col);\n\t//col = pow(abs(col), vec3(1.0/2.2));\n\tcol= (ACESFilm(col)+linear2srgb(col)+col+ exposureToneMapping(3.0, col))/4.0 ;\n\tfragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}