{
    "Shader": {
        "info": {
            "date": "1578290707",
            "description": "sphere",
            "flags": 0,
            "hasliked": 0,
            "id": "tttGWM",
            "likes": 0,
            "name": "sphere_exmple",
            "published": 3,
            "tags": [
                "sphere",
                "imi202001"
            ],
            "usePreview": 0,
            "username": "tomoe",
            "viewed": 251
        },
        "renderpass": [
            {
                "code": "float sdf(vec3 p) {\n    return length(p) - 1.0;\n}\nvec3 gradSDF(vec3 p) {\n    float d = 0.0001;\n    return normalize(vec3(\n        sdf(p + vec3(d, 0.0, 0.0)) - sdf(p + vec3(-d, 0.0, 0.0)),\n        sdf(p + vec3(0.0, d, 0.0)) - sdf(p + vec3(0.0, - d, 0.0)),\n        sdf(p + vec3(0.0, 0.0, d)) - sdf(p + vec3(0.0, 0.0, - d))\n    ));\n}\nmat3 rotY(float t) {\n    return mat3(\n        cos(t), 0.0, sin(t),\n        0.0, 1.0, 0.0,\n        - sin(t), 0.0, cos(t)\n    );\n}    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // fragment position\n     vec2 pos = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    \n    // camera\n    vec3 cPos = vec3(0.0, 0.0, 2.0);\n    vec3 cDir = vec3(0.0, 0.0, - 1.0);\n    vec3 cUp = vec3(0.0, 1.0, 0.0);\n    vec3 cSide = cross(cDir, cUp);\n    float targetDepth = 1.0;\n    \n    // light\n    vec3 lightDir = vec3(1.0, 0.0, 0.0);\n    lightDir = rotY(iTime) * lightDir;\n\n    // ray\n    vec3 ray = normalize(cSide * pos.x + cUp * pos.y + cDir * targetDepth);\n    \n    // marching loop\n    vec3 rPos = cPos;\n    for(int i = 0; i < 40; i++ ) {\n        rPos += ray * sdf(rPos);\n    }\n    \n    // collision detection\n    if (abs(sdf(rPos)) < 0.001) {\n        vec3 normal = gradSDF(rPos);\n        float diff = clamp(dot(lightDir, gradSDF(rPos)), 0.1, 1.0);\n        fragColor = vec4(vec3(diff), 1.0);\n    } else {\n        fragColor = vec4(vec3(0.0), 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}