{
    "Shader": {
        "info": {
            "date": "1607540104",
            "description": "playing with noise.",
            "flags": 0,
            "hasliked": 0,
            "id": "3sVfzV",
            "likes": 5,
            "name": "Line Sliders",
            "published": 3,
            "tags": [
                "noise",
                "random",
                "race"
            ],
            "usePreview": 0,
            "username": "ljdp",
            "viewed": 323
        },
        "renderpass": [
            {
                "code": "// convert 2D seed to 1D\n// 2 imad\nuint seed(uint x) {\n    return 19u * x;\n}\n\nuint seed(uvec2 p) {\n    return 19u * p.x + 47u * p.y + 101u;\n}\n\n// convert 3D seed to 1D\nuint seed(uvec3 p) {\n    return 19u * p.x + 47u * p.y + 101u * p.z + 131u;\n}\n\nuint seed(uvec4 p) {\n\treturn 19u * p.x + 47u * p.y + 101u * p.z + 131u * p.w + 173u;\n}\n\nuint pcg(uint v)\n{\n\tuint state = v * 747796405u + 2891336453u;\n\tuint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n\treturn (word >> 22u) ^ word;\n}\n\nfloat noise(float x)\n{\n\treturn float(pcg(uint(x*1000.0))) * (1.0/float(0xffffffffu));\n}\n\nvec2 noise(vec2 p)\n{\n\tuint x = seed(uvec3(p.xy*1000.0, iTime*1000.1));\n\tfloat v = float(pcg(x)) * (1.0/float(0xffffffffu));\n\treturn vec2(v);\n}\n\nfloat noise2( uint n ) \n{   // integer hash copied from Hugo Elias\n\tn = (n<<13U)^n;\n    n = n*(n*n*15731U+789221U)+1376312589U;\n    return float(n&uvec3(0x0fffffffU))/float(0x0fffffff);\n}\n\n// Basic noise\nfloat bnoise( in float x )\n{\n    // setup    \n    float i = floor(x);\n    float f = fract(x);\n    float s = sign(fract(x/2.0)-0.5);\n    \n    // use some hash to create a random value k in [0..1] from i\n    float k = noise2(uint(i));\n\n    // quartic polynomial\n    return s*f*(f-1.0)*((16.0*k-4.0)*f*(f-1.0)-1.0);\n}\n\nfloat terrain(vec2 p)\n{\n\tfloat v2 = 1.0 * bnoise(p.x*0.5);\n    v2 += 0.05 * bnoise(p.x*2.2);\n    v2 += 0.025 * bnoise(p.x*4.2);\n    v2 += 0.0125 * bnoise(p.x*8.2);\n    v2 += 0.0025 * bnoise(p.x*36.2);\n    return v2;\n}\n\nvec3 noiseLine(vec2 p, vec3 col)\n{\n\tfloat px = 1.0/iResolution.y;\n    p.x = (p.x*0.3) + 0.5;\n    return mix(col, vec3(0.0,1.0,1.0), 1.0 - smoothstep(0.0, px*2.0, abs(p.y-p.x)));\n}\n\n/**\n * Convert r, g, b to normalized vec3\n */\nvec3 rgb(float r, float g, float b) {\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\n/**\n * Draw a rectangle at vec2 `pos` with width `width`, height `height` and\n * color `color`.\n */\nvec4 rectangle(vec2 uv, vec2 pos, float width, float height, vec3 color) {\n\tfloat t = 0.0;\n\tif ((uv.x > pos.x - width / 2.0) && (uv.x < pos.x + width / 2.0)\n\t\t&& (uv.y > pos.y - height / 2.0) && (uv.y < pos.y + height / 2.0)) {\n\t\tt = 1.0;\n\t}\n\treturn vec4(color, t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float px = 1.0/iResolution.y;\n    vec2 p = fragCoord*px;\n    p.x += iTime*2.5;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col = vec3(0.5);\n\t\n    vec2 n1 = vec2((terrain(p)+terrain(p*0.3)*2.0)*0.4, p.y);\n    vec2 n2 = vec2(terrain(p*0.1), p.y);\n    vec2 n3 = vec2(terrain(p*0.7), p.y);\n    \n    col = noiseLine(n1, col);\n    col += noiseLine(n2, vec3(1.0, 0.0, 0.0));\n    col += noiseLine(n3, vec3(1.0, 0.0, 0.0));\n    \n    vec4 r = rectangle(uv, vec2(0.4+(n1.x*-0.25), n1.x*0.3+0.514), 0.014, 0.032, vec3(1.0));\n    r += rectangle(uv, vec2(0.5+(n2.x*-0.45), n2.x*0.3+0.514), 0.05, 0.032, vec3(1.0));\n    r += rectangle(uv, vec2(0.6+(n3.x*-0.12), n3.x*0.3+0.508), 0.03, 0.018, vec3(1.0));\n    \n    fragColor = vec4(col, 1.0);\n    fragColor = mix(fragColor, r, r.a);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}