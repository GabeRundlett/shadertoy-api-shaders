{
    "Shader": {
        "info": {
            "date": "1694201251",
            "description": "torus but spiralized",
            "flags": 0,
            "hasliked": 0,
            "id": "ml2Bzy",
            "likes": 4,
            "name": "Torus but Spiralized",
            "published": 3,
            "tags": [
                "spiraltorus"
            ],
            "usePreview": 0,
            "username": "Varyemez",
            "viewed": 142
        },
        "renderpass": [
            {
                "code": "const int MAX_STEP = 15;\nconst float SURFACE_DIST = 0.02;\nconst float PI = radians(180.);\n\nconst vec2 torusr = vec2(0.85, 0.15)*0.5;\n\nmat2 rot2d(float r)\n{\n    float s = sin(r), c = cos(r);\n    return mat2(c,-s,s,c);\n}\nfloat random(vec2 s)\n{\n    return fract(sin(dot(s, vec2(362.485, 123.445))*764.346)*2647.9752);\n}\n\nfloat plane(vec3 p)\n{\n    return abs(p.y);\n}\nfloat sphere(vec3 p, float r)\n{\n    return length(p)-r;\n}\nfloat torus(vec3 p, float a, float b)\n{\n    return length(vec2(length(p.xz)-a, p.y))-b;\n}\nfloat cube(vec3 p, float r)\n{\n    p = abs(p);\n    return length(max(p-r, 0.));\n}\n\nfloat map(vec3 p)\n{\n    p = fract(p);\n    p -= 0.5;\n    float t0 = torus(p, torusr.x, torusr.y);\n    p.xy *= rot2d(PI*0.5);\n    p.z -= 0.5;\n    float t1 = torus(p, torusr.x, torusr.y);\n    p.z += 1.;\n    float t2 = torus(p, torusr.x, torusr.y);\n    return min(min(t0, t1), t2);\n}\n\nvec3 get_normal(vec3 p)\n{\n    vec2 e = vec2(0.05, 0.);\n    float d = map(p);\n    return -normalize(vec3(\n        d-map(p+e.xyy),\n        d-map(p+e.yxy),\n        d-map(p+e.yyx)\n    ));\n}\n\nfloat raymarch(vec3 vo, vec3 dir)\n{\n    float d = 0.;\n    for (int i = 0; i < MAX_STEP; i++)\n    {\n        vec3 p = vo + dir*d;\n        p.y -= 1.;\n        p.xy *= rot2d(p.z*0.75);\n        p.y += 1.;\n        float cd = map(p);\n        if (cd < SURFACE_DIST)\n            break;\n        d += cd;\n    }\n    return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy) / iResolution.y;\n\n    vec3 r0 = vec3(0.,1.,0.);\n    vec3 dir = normalize(vec3(uv.xy, 1.));\n    r0.z += iTime*0.45;\n    float d = raymarch(r0, dir);\n    vec3 p = r0 + dir*d;\n\n    fragColor = vec4(0.3, 0., 1., 1.) / max(0.5, d);\n    fragColor.rgb = pow(fragColor.rgb, vec3(1./2.2));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}