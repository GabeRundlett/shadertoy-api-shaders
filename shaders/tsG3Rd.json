{
    "Shader": {
        "info": {
            "date": "1570738211",
            "description": "I wanted to try the sdLine function and create this happy shape. I added a little noise in posteffect to create something strange.",
            "flags": 0,
            "hasliked": 0,
            "id": "tsG3Rd",
            "likes": 3,
            "name": "Shadertober 10 Pattern",
            "published": 3,
            "tags": [
                "raymarching",
                "line",
                "colors",
                "inktober"
            ],
            "usePreview": 0,
            "username": "GreenChicken",
            "viewed": 346
        },
        "renderpass": [
            {
                "code": "// SHADERTOBER 10 Pattern\n// Poulet Vert 10-10-2019\n// Thanks to iq, leon, patricio&jen\n\n#define VOLUME 0.001\n#define PI 3.14159\n\n\n\n////////////////////////////////////////////////////////////////////////////////\nfloat opU(float s1, float s2) { return min(s1, s2);}\n\nvec2 opU2(vec2 d1, vec2 d2) { return (d1.x < d2.x) ? d1 : d2; }\n\nfloat sat(float a) {return clamp(a, .0, 1.); }\n\n\nvec2 sdLine( vec3 p, vec3 a, vec3 b )\n{\n    vec3 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return vec2( length( pa - ba*h ), h );\n}\n\n\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat sdChronoLine(vec3 p, float o, float s, float le)\n{\n    float time = iTime + o;\n    vec3 pa = vec3(.0);\n    vec3 pb = vec3(sin(time), cos(time), 0.0) * le;\n    vec2 b = sdLine( p, pa, pb );\n\n    float tr = s;\n    float l = b.x - tr;\n    \n    return l;\n}\n\n// -------------------------------------------------------------------------\n\nvec2 map(vec3 pos)\n{\n    vec2 t = vec2(0.0, -1.0);\n    \n    // ground\n    t.x = pos.y;\n    \n    vec3 p = pos + vec3(0.0, -1.5, 0.0);\n    \n    vec2 l = vec2(1.0, 0.0);\n    float anim = abs(sin(iTime));\n    for(int i=0; i<16 ; i++)\n    {\n        l = opU2(l, vec2(sdChronoLine(p, float(i)*PI/8.0, anim, 1.0), float(i)*.1));\n    }\n    \n    \n    t = opU2(t, l);\n    \n    return t;\n}\n\nfloat GetShadow (vec3 pos, vec3 at, float k) {\n    vec3 dir = normalize(at - pos);\n    float maxt = length(at - pos);\n    float f = 01.;\n    float t = VOLUME*50.;\n    for (float i = 0.; i <= 1.; i += 1./15.) {\n        vec2 dist = map(pos + dir * t);\n        if (dist.x < VOLUME) return 0.;\n        f = min(f, k * dist.x / t);\n        t += dist.x;\n        if (t >= maxt) break;\n    }\n    return f;\n}\n\nvec2 CastRay(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    \n    for(int i=0 ; i<64 ; i++)\n    {\n        vec2 ray = map(ro + rd * t);\n        \n        if(ray.x < (0.0001*t))\n        {\n            return vec2(t, ray.y);\n        }\n        \n        t += ray.x;\n    }\n    \n    return vec2(-1.0, 0.0);\n}\n\nvec3 GetNormal (vec3 p) \n{ \n    vec2 e = vec2(0.01, 0.0); \n    return normalize(vec3(\n        map(p+e.xyy).x-map(p-e.xyy).x,\n        map(p+e.yxy).x-map(p-e.yxy).x,\n        map(p+e.yyx).x-map(p-e.yyx).x\n        )); \n}\n\nvec3 Render(vec3 ro, vec3 rd, vec2 uv)\n{\n    vec2 t = CastRay(ro, rd);\n    vec3 pos = ro+rd*t.x;\n    vec3 col = vec3(0.0);\n    float depth = clamp(pos.z, 0.0, 1.0);\n    depth = 1.0 - sat(pos.z*.1);\n            \n    if(t.x == -1.0)\n    {        \n        col = vec3(rd.y);\n        \n    }\n    else\n    {\n        float glp = clamp(length(pos)*.1, 0.0, 1.0);\n        vec3 N = GetNormal(ro+rd*t.x);\n        vec3 L = vec3(0.0, 1.0, 1.0);\n        float light = dot(N,L);\n        float shade = GetShadow(pos, L, 4.);\n        \n        if(t.y == -1.0) \n        {\n            col = vec3(.3+pos.z*.1);\n            col *= shade;\n        }\n        else\n        {\n            col = vec3(1.0, 0.2+t.y, 1.0-t.y);\n            col *= vec3(light)*.7;\n        }\n    }\n    \n    return col;\n}\n\nvec3 GetViewDir(vec2 uv, vec3 cp, vec3 ct)\n{\n    vec3 forward = normalize(ct - cp);\n    vec3 right = normalize(cross(vec3(0.0, -1.0, 0.0), forward));\n    vec3 up = normalize(cross(right, forward));\n    \n    return normalize(uv.x * right + uv.y * up + 2.0 * forward);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float time = iTime*.25;\n    \n    vec3 cp = vec3(0.0, 1.0, 5.0);\n    vec3 ct = vec3(0.0, 1.5, 0.0);\n    \n    vec3 vd = GetViewDir(uv, cp, ct);\n    \n    vec3 col = vec3(length(uv));\n    vec2 screenUV = fragCoord.xy / iResolution.xy;\n    \n    col = Render(cp, vd, uv);\n    col.z += screenUV.y*.2;\n    col -= random(screenUV) * .1;\n    col *= 1.0-length(uv)*.8;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}