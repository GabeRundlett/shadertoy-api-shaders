{
    "Shader": {
        "info": {
            "date": "1711191258",
            "description": "Simple test where I added a sort of shadow to the exterior of the set, pretty happy with the result.",
            "flags": 48,
            "hasliked": 0,
            "id": "XXBXWt",
            "likes": 6,
            "name": "Mandelbrot shadow experimenting",
            "published": 3,
            "tags": [
                "fractalmandelbrotshadowsinteriorinteresting"
            ],
            "usePreview": 0,
            "username": "gtouzali",
            "viewed": 173
        },
        "renderpass": [
            {
                "code": "\n\n\n#define ITER 420\n\n\n#define cx_mul(a, b) vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x)\n#define cx_div(a, b) vec2(((a.x*b.x+a.y*b.y)/(b.x*b.x+b.y*b.y)),((a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y)))\n\n    vec2 offset;\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec2 squareImaginary(vec2 number){\n\treturn vec2(\n\t\tpow(number.x,2.)-pow(number.y,2.),\n\t\t2.*number.x*number.y\n\t);\n}\n\nvec2 GiveReflection(vec2 C)\n{\n    //float c2 = dot(C, C);                                                  //These 3 lines allow to skip calculations\n    //if( 256.0*c2*c2 - 96.0*c2 + 32.0*C.x - 3.0 < 0.0 ) return vec2(0.0);   //for the 2 main bulbs of mandelbrot\n    //if( 16.0*(c2+2.0*C.x+1.0) - 1.0 < 0.0 ) return vec2(0.0);              //\n    \n    \n    vec2 Z = vec2(0.0);\n    vec2 dC = vec2(0.0);\n    float reflection = 0.; \n    \n    vec2 mouse = ((iMouse.xy - iResolution.xy*.5)/iResolution.y);\n    float h2 = 2. - 2. * distance(mouse.xy, vec2(0.0));                                                         //Light height\n    float angle = -atan(mouse.x, mouse.y);                                 //From where the light is coming (where the cursor is)\n    angle = degrees(angle) / 360.;\n    vec2 v = vec2(cos(2.0 * angle * 3.14159), sin(2.0 * angle * 3.14159)); //Light direction\n    vec2 u;\n    \n    \n    \n\n    for (int i = 0; i < ITER; i++)\n    {\n        dC = 2.0 * cx_mul(dC, Z) + vec2(1.0);\n        Z = squareImaginary(Z) + C;\n\n        if (length(Z) > 10000.)\n        {\n            u = cx_div(Z, dC);\n            u = u / length(u);\n            reflection = dot(u, v) + h2;\n            reflection = reflection / (1.0 + h2);\n            if (reflection < 0.0) reflection = 0.0;\n\n            return vec2(reflection, (float(i) - log2(log2(length(Z))) + 4.0) / float(ITER)); //continuous iteration count to allow color gradient not needed for smooth shadows\n        }\n    }\n            u = cx_div(Z, dC);\n            u = u / length(u);\n            reflection = -dot(u, v) + h2 + 1.;\n            reflection = reflection / (2.0 + h2);\n            if (reflection < 0.0) reflection = 0.0;\n    return vec2(reflection, 0);\n}\n\nfloat customLerp(float t)\n{\n\n  float growthFactor = 1.;\n  float adjustedT = 1. - exp(-growthFactor * t);\n  \n  return 1. - adjustedT;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    offset = texelFetch( iChannel0, ivec2(0,0), 0 ).xy;\n    vec2 l = vec2(0);\n    vec2 ourPosition = (fragCoord - iResolution.xy*.5)/iResolution.y * 2.314;\n\n    ourPosition.x -= 1.1;\n    vec4 col = vec4(0.0);\n    ourPosition += offset;\n    #ifdef AA\n        for( int m=0; m<AA; m++ )\n        for( int n=0; n<AA; n++ )\n        {\n            vec2 p = vec2(ourPosition.x, ourPosition.y) + (vec2(float(m),float(n))/float(AA) / iResolution.x);\n            l = GiveReflection(p.xy);\n            col+= vec4(l.x * pal(customLerp(l.y * 100.), vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) ), 1.0);\n        } \n        col /= float(AA*AA); \n        fragColor = vec4(col);\n        if (l.y == 0.0f)\n            fragColor = vec4(pal(customLerp((l.y)* 100.) - 0.4 * distance(ourPosition, vec2(0.)), vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) ), 1.0);\n    #else\n        l = GiveReflection(ourPosition.xy);\n        fragColor = vec4(l.x,l.x, l.x, 1.0);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nvec2 handleKeyboard(vec2 offset) {\n    float velocity = 1. / 100.; // This will cause offset to change by 0.01 each time an arrow key is pressed\n    \n    // texelFetch(iChannel1, ivec2(KEY, 0), 0).x will return a value of one if key is pressed, zero if not pressed\n    vec2 left = texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).x * vec2(-1, 0);\n    vec2 up = texelFetch(iChannel1, ivec2(KEY_UP,0), 0).x * vec2(0, 1);\n    vec2 right = texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).x * vec2(1, 0);\n    vec2 down = texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).x * vec2(0, -1);\n    \n    offset += (left + up + right + down) * velocity;\n\n    return offset;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Return the offset value from the last frame (zero if it's first frame)\n    vec2 offset = texelFetch( iChannel0, ivec2(0, 0), 0).xy;\n    \n    // Pass in the offset of the last frame and return a new offset based on keyboard input\n    offset = handleKeyboard(offset);\n\n    // Store offset in the XY values of every pixel value and pass this data to the \"Image\" shader and the next frame of Buffer A\n    fragColor = vec4(offset, 0, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}