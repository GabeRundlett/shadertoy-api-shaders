{
    "Shader": {
        "info": {
            "date": "1523624537",
            "description": "Fractal space station (some mouseability, optional antialiasing)",
            "flags": 0,
            "hasliked": 0,
            "id": "ldVcDc",
            "likes": 12,
            "name": "Menger Ring",
            "published": 3,
            "tags": [
                "fractal",
                "space"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 669
        },
        "renderpass": [
            {
                "code": "// \"Menger Ring\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  1   // optional antialiasing (0/1 - off/on)\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Noisefv3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nfloat tCur, dstFar;\nconst float pi = 3.14159;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 b;\n  float r, a;\n  const float nIt = 5., sclFac = 2.4;\n  b = (sclFac - 1.) * vec3 (1., 1.125, 0.625);\n  r = length (p.xz);\n  a = (r > 0.) ? atan (p.z, - p.x) / (2. * pi) : 0.;\n  p.x = mod (16. * a + 1., 2.) - 1.;\n  p.z = r - 32. / (2. * pi);\n  for (float n = 0.; n < nIt; n ++) {\n    p = abs (p);\n    p.xy = (p.x > p.y) ? p.xy : p.yx;\n    p.xz = (p.x > p.z) ? p.xz : p.zx;\n    p.yz = (p.y > p.z) ? p.yz : p.zy;\n    p = sclFac * p - b;\n    p.z += b.z * step (p.z, -0.5 * b.z);\n  }\n  return PrBoxDf (p, vec3 (1.)) / pow (sclFac, nIt);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 24; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += min (0.05, 3. * h);\n    if (sh < 0.001) break;\n  }\n  return 0.3 + 0.7 * sh;\n}\n\nfloat ObjAO (vec3 ro, vec3 rd)\n{\n  float ao, d;\n  ao = 0.;\n  for (int j = 0; j < 8; j ++) {\n    d = 0.1 + float (j) / 16.;\n    ao += max (0., d - 3. * ObjDf (ro + d * rd));\n  }\n  return 0.5 + 0.5 * clamp (1. - 0.2 * ao, 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 ltPos[4], ltDir, col, vn, rds;\n  float dstObj, dfTot, spTot, at, ao, sh, ul;\n  for (int k = 0; k < 4; k ++) {\n    ul = (k < 2) ? 1. : - 1.;\n    ltPos[k] = vec3 (0., 20. * ul, 20.);\n    ltPos[k].xz = Rot2D (ltPos[k].xz, float (k) * pi + 0.1 * ul * pi * tCur);\n  }\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    vn = VaryNf (256. * ro, vn, 1.);\n    dfTot = 0.;\n    spTot = 0.;\n    for (int k = 0; k < 4; k ++) {\n      ltDir = normalize (ltPos[k]);\n      at = smoothstep (0., 0.3, dot (normalize (ltPos[k] - ro), ltDir));\n      sh = ObjSShadow (ro, ltDir);\n      dfTot = max (dfTot, at * sh * max (dot (vn, ltDir), 0.));\n      spTot = max (spTot, at * smoothstep (0.5, 0.8, sh) *\n         pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.));\n    }\n    ao = ObjAO (ro, vn);\n    col = ao * (vec3 (0.75, 0.8, 0.75) * (0.2 + 0.8 * dfTot) + 0.3 * vec3 (1., 1., 0.) * spTot);\n  } else {\n    col = vec3 (0.02, 0.02, 0.04);\n    if (rd.y < 0.) {\n      rd.y = - rd.y;\n      rd.xz = vec2 (- rd.z, rd.x);\n    }\n    rds = floor (2000. * rd);\n    rds = 0.00015 * rds + 0.1 * Noisefv3 (0.0005 * rds.yzx);\n    for (int j = 0; j < 19; j ++) rds = abs (rds) / dot (rds, rds) - 0.9;\n    col += vec3 (1., 1., 0.5) * min (1., 0.5e-3 * pow (min (6., length (rds)), 5.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac, t, tt, ph;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  t = 0.05 * tCur;\n  tt = t - floor (t);\n  ph = mod (floor (t), 3.);\n  if (tt > 0.95 && 0.5 * uv.x * canvas.y / canvas.x + 0.5 < (tt - 0.95) / 0.05)\n     ph = mod (ph + 1., 3.);\n  az = 0.;\n  el = 0.;\n  if (ph == 0.) {\n    if (mPtr.z > 0.) {\n      az += 2. * pi * mPtr.x;\n      el += 0.5 * pi * mPtr.y;\n    } else {\n      az = 0.03 * pi * tCur;\n      el = -0.25 * pi * cos (0.02 * pi * tCur);\n    }\n    zmFac = 4.;\n  } else if (ph == 1.) {\n    if (mPtr.z > 0.) {\n      az -= 2. * pi * mPtr.x;\n    } else {\n      az = 0.5 * pi * (1. - 2. * SmoothBump (0.25, 0.75, 0.2, mod (0.02 * tCur, 1.)));\n      el = 0.15 * pi * (1. - 2. * SmoothBump (0.25, 0.75, 0.2, mod (0.017 * tCur, 1.)));\n    }\n    t = 0.03 * tCur;\n    ro = (32. / (2. * pi)) * vec3 (cos (t), 0., sin (t));\n    vd = normalize (- ro);\n    zmFac = 1.8;\n  } else if (ph == 2.) {\n    t = 0.043 * tCur;\n    tt = mod (t, 1.);\n    ro.xz = 8. * ((mod (t, 2.) < 1.) ? vec2 (- cos (2. * pi * tt) + 1., sin (2. * pi * tt)) :\n       vec2 (cos (2. * pi * tt) - 1., sin (2. * pi * tt)));\n    ro.y = 5. * (0.5 - SmoothBump (0.3, 0.7, 0.15, tt));\n    vd = normalize (vec3 (1., 0., 1.) - ro);\n    zmFac = 2.4;\n  }\n  if (ph == 0.) {\n    ori = vec2 (el, az);\n    ca = cos (ori);\n    sa = sin (ori);\n    vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n            mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n    ro = vuMat * vec3 (0., 0., -25.);\n  } else {\n    vd.yz = Rot2D (vd.yz, - el);\n    vd.xz = Rot2D (vd.xz, az);\n    vuMat = mat3 (vec3 (vd.z, 0., - vd.x) / sqrt (1. - vd.y * vd.y),\n       vec3 (- vd.y * vd.x, 1. - vd.y * vd.y, - vd.y * vd.z) / sqrt (1. - vd.y * vd.y), vd);\n  }\n  dstFar = 60.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 4.;\n#endif  \n  col = vec3 (0.);\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.),\n       0.5 * pi * (a + 0.5)), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}