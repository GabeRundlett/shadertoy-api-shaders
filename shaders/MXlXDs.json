{
    "Shader": {
        "info": {
            "date": "1710169365",
            "description": "Dispersing a gaussian bump in deep water under consideration of surface tension.\n\n",
            "flags": 48,
            "hasliked": 0,
            "id": "MXlXDs",
            "likes": 2,
            "name": "Deep Water Drop Wave 2",
            "published": 3,
            "tags": [
                "wave",
                "simulation",
                "water"
            ],
            "usePreview": 0,
            "username": "TinyTexel",
            "viewed": 107
        },
        "renderpass": [
            {
                "code": "// License: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n// https://twitter.com/Mirko_Salm\n\n/*\n    Dispersing a gaussian bump in deep water under consideration of surface tension.\n    The physical size of the viewport depends on the x-coordinate of the mouse cursor (left: 0.5 m, right: 4.5 m, default: 2.5 m)\n    The minimal group velocity is approximately equalized over all scales to make comparisons easier (see Buffer A).\n    To get a good comparison of how the drop wave looks at different scales stop the animation after \n    about two seconds and drag the mouse horizontally over the viewport.\n    \n    Buffer A: 1d height profile computation\n    Buffer B: summing up partial profiles pass 1\n    Buffer c: summing up partial profiles pass 2\n    Buffer D: prepare height profile for cubic reconstruction\n    Image   : presentation\n\n    Simpler version without surface tension and without physical quantities: https://www.shadertoy.com/view/M3XXD2\n*/\n\n\n// CUBIC RECONSTRUCTION KERNELS ===================================================================================================\n// https://www.shadertoy.com/view/WtsBDH (\"Bicubic C2 cont. Interpolation\")\n\nfloat kern_v(float x) { return 1.0-x*x*(3.0-2.0*abs(x)); }\nfloat kern_d(float x) { float o = abs(x)-1.0; return x*(o*o); }\n\nfloat kern_vD1(float x) { return x*(abs(x)*6.0-6.0); }\nfloat kern_dD1(float x) { return (abs(x)-1.0)*(abs(x)*3.0-1.0); }\n\nmat2 kern2x2(float p)\n{\n    float v   = kern_v  (p);\n    float d   = kern_d  (p);\n    \n    float vD1 = kern_vD1(p);\n    float dD1 = kern_dD1(p);\n    \n    mat2 m = mat2\n    (\n        /* kern | kernDx */\n        vec2(v, vD1),\n        vec2(d, dD1)\n    );\n    \n    return m;\n}\n\nvec2 SampleCubic2(sampler2D channel, float x)\n{\n    x -= 0.5;\n    \n    float xi = floor(x);\n    float xf = x - xi;\n\n    int x0 = int(xi);\n    \n    vec2 r = vec2(0.0);\n    r += kern2x2(xf    ) * texelFetch(channel, ivec2(x0 + 0, 0), 0).xy;\n    r += kern2x2(xf-1.0) * texelFetch(channel, ivec2(x0 + 1, 0), 0).xy;\n    \n    // r = vec2(f, df/dx)\n\treturn r;\n}\n\n\n// IMAGE ==========================================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 uv0 )\n{    \n    vec3 col;\n    \n    vec2 uv = uv0;\n    vec2 tc = uv0 / iResolution.xx;\n    \n    vec2 uv0c = (uv0 - iResolution.xy*0.5)/length(iResolution.xy*0.5);\n\n    float WaveSampleCount = GetWaveSampleCount(iResolution.xy);\n\n    vec2 uv2 = vec2(length(uv0c) * WaveSampleCount, 0.5);\n\n    vec3 V = vec3(0.0, 0.0, 1.0);\n    vec3 L = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 L2 = normalize(vec3(-1.0, -1.0, 2.0));\n\n    vec2 h = SampleCubic2(iChannel0, uv2.x + 0.5);// sample water surface\n    \n    float nscale = WaveSampleCount / 8.0;\n    vec3 N = normalize(vec3(-normalize(uv0c) * h.y * nscale, 1.0));\n\n    //fragColor = vec4(N * 0.5 + 0.5, 0.0); return;\n\n    vec3 R = 2.0*dot(V, N)*N - V;\n\n    float ct = clamp01(dot(N, L));\n    float ct2 = dot(N, L) * 0.5 + 0.5;    \n        \n    // diffuse\n    float v =  clamp01(ct2+0.15);\n    v = 1.0-v;\n    v = v*v*(3.0-2.0*v);\n    \n    //col = exp(-(v * 20.0 + 5.) * vec3(0.04, 0.3, 1.))*2.;\n    col = exp(-(v * 10.0 + 6.) * vec3(0.1, 0.15, 1.).bgr)*2.0;\n\n    col += vec3(-0.2, -0.5, 1.0).bgr*0.2;\n    \n    // specular\n    float c = 1.0 - (dot(R, L)*0.5+0.5);\n    float c2 = 1.0 - (dot(R, L2)*0.5+0.5);\n    float spec = 0.0;\n    spec += smoothstep(0.9, 0.99, dot(R, L))*0.5; \n    float spec0 = spec;\n    spec += smoothstep(0.7, 0.9, dot(R, L))*0.125; \n    spec += smoothstep(0.8, 0.9, dot(R, L2))*0.02; \n    spec += smoothstep(0.95, 0.99, N.z)*0.02; \n    spec += exp2(-32.0*(c))*0.25;\n    \n    col += spec;\n    \n    col += texture(iChannel3, R).rgb*0.3;\n    \n    col = GammaEncode(clamp01(col));\n    //col = vec3(uv2.x);\n    fragColor = vec4(col, 0.0);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// License: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n\nconst float PartialProfileCountSqrt = 16.0;\nconst float PartialProfileCount = PartialProfileCountSqrt * PartialProfileCountSqrt;\n\nfloat GetWaveSampleCount(vec2 screenResolution)\n{\n    return min(screenResolution.x, 512.0);\n}\n\n#define rsqrt inversesqrt\n#define clamp01(x) clamp(x, 0.0, 1.0)\n#define If(cond, resT, resF) mix(resF, resT, cond)\n\nconst float Pi = 3.14159265359;\nconst float Pi05 = Pi * 0.5;\nconst float Pi2  = Pi * 2.0;\n\nfloat Pow2(float x) {return x*x;}\nfloat Pow3(float x) {return x*x*x;}\nfloat Pow4(float x) {return Pow2(Pow2(x));}\n\nvec3 GammaEncode(vec3 x) {return pow(x, vec3(1.0 / 2.2));}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// License: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n/* \n    1d height profile computation\n*/\n\n// https://link.springer.com/article/10.1007/s40314-020-01238-z\nfloat BesselJ0(float x)\n{\n    float xx = x * x;\n    float lamb = 0.865;\n    float q    = 0.7172491568;\n    float p0   = 0.6312725339;\n    float ps0  = 0.4308049446;\n    float p1   = 0.3500347951;\n    float ps1  = 0.4678202347;\n    float p2   =-0.06207747907;\n    float ps2  = 0.04253832927;\n\n    float lamb4 = (lamb * lamb) * (lamb * lamb);\n    float t0 = sqrt(1.0 + lamb4 * xx);\n    float t1 = sqrt(t0);\n    \n    return xx == 0.0 ? 1.0 : 1.0/(t1 * (1.0 + q * xx)) * ((p0 + p1*xx + p2*t0) * cos(x) + ((ps0 + ps1*xx) * t0 + ps2*xx) * (sin(x)/x));\n}\n\nfloat Wave(float x, float k, float w)\n{\n    float ts = iMouse.x < 16.0 && iMouse.y < 16.0 ? 7.5 : \n               mix(1.5, 13.5, iMouse.x / iResolution.x);\n               \n    float t = fract(iTime / ts) * ts;// repeat animation after a set amount of time (depends on scale)\n    \n  #if 1\n    // approx. equalize minimal group velocity (i.e. the rate at which the inner circle expands)\n    // this makes it easier to compare the characteristics of the drop wave at different scales\n    // deactivate to use physically correct velocity/time scale\n    t = fract(iTime / 9.0) * 9.0;// repeat after 9 seconds (at all scales)\n    t = t * ts * 0.1;\n  #endif\n    \n    return BesselJ0(x * k) * cos(w * t);// radially symmetric standing wave\n}\n\nvoid mainImage(out vec4 col, in vec2 uv0)\n{\n    col = vec4(0.0);\n    \n    float WaveSampleCount = GetWaveSampleCount(iResolution.xy);\n    \n    vec2 uv = floor(uv0);\n    \n    if(uv0.x >= WaveSampleCount && uv0.y >= PartialProfileCount) discard;\n    \n    float scale = iMouse.x < 16.0 && iMouse.y < 16.0  ? 1.25 : \n                  mix(0.25, 2.25, iMouse.x / iResolution.x);// radius\n    \n    float x = uv.x / (WaveSampleCount - 1.0) * scale;\n    \n    float bumpScale = scale / 128.0;\n    \n    float v = 0.0;\n    float wa = 0.0;\n    float count = 64.0;// number of waves per partial profile\n    \n    for(float j = 0.0; j < count; ++j)\n    {        \n      #if 1\n        // importance sampling\n        float i = uv.y * count + j + 0.5;\n        \n        float k = sqrt(-log2(i / (count * PartialProfileCount))) / bumpScale;\n        float w = 1.0;\n      #else\n        // uniform sampling\n        float i = uv.y * count + j + 1.0;\n        \n        float maxWavelen = scale * 8.0;\n        \n        float Wavelen = maxWavelen / i;\n        float k = Pi2 / Wavelen;\n        \n        float w = exp2(-Pow2(k * bumpScale)) * i;// exp() -> gauss bump | i -> weigh wave by radius\n      #endif\n        \n        wa += w;\n        \n        // deep water dispersion + surface tension ( https://en.wikipedia.org/wiki/Capillary_wave )\n        float p_air =   1.2 ;// kg/m³\n        float p_wat = 998.0 ;// kg/m³\n        float o_wat =  0.072;// J/m² = (kg*m²/s²)/m² = kg/s²\n        float g     =   9.81;// m/s²\n        \n        float a = (p_wat - p_air) / (p_wat + p_air) * g;\n        float b = o_wat / (p_wat + p_air);\n        \n        v += Wave(x, k, sqrt(k * (a + b * (k*k)))) * w;\n    }\n    \n    col.r = v;\n    col.g = wa;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// License: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n/*\n    summing up partial profiles pass 1\n*/\n\nvoid mainImage(out vec4 col, in vec2 uv0)\n{\n    col = vec4(0.0);\n    \n    float WaveSampleCount = GetWaveSampleCount(iResolution.xy);\n    \n    vec2 uv = floor(uv0);\n    \n    if(uv0.x >= WaveSampleCount && uv0.y >= PartialProfileCountSqrt) discard;\n    \n    for(float j = 0.0; j < PartialProfileCountSqrt; ++j)\n    {\n        float i = uv.y * PartialProfileCountSqrt + j;\n        \n        col.rg += textureLod(iChannel0, vec2(uv0.x, i + 0.5) / iResolution.xy, 0.0).rg;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// License: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n/* \n    summing up partial profiles pass 2\n*/\n\nvoid mainImage(out vec4 col, in vec2 uv0)\n{\n    col = vec4(0.0);\n    \n    float WaveSampleCount = GetWaveSampleCount(iResolution.xy);\n    \n    vec2 uv = floor(uv0);\n    \n    if(uv0.x >= WaveSampleCount && uv0.y >= 1.0) discard;\n    \n    for(float j = 0.0; j < PartialProfileCountSqrt; ++j)\n    {\n        col.rg += textureLod(iChannel0, vec2(uv0.x, j + 0.5) / iResolution.xy, 0.0).rg;\n    }\n    \n    col.r /= col.g == 0.0 ? 1.0 : col.g;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// License: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n\n/*\n    pre-filter pass (prepares height profile for cubic reconstruction)\n    https://www.shadertoy.com/view/WtsBDH (\"Bicubic C2 cont. Interpolation\")\n*/\n\n#define FETCH(uv) (texelFetch(iChannel0, uv, 0).r)\n\nvoid mainImage( out vec4 fragColor, in vec2 uv0 )\n{    \n    float WaveSampleCount = GetWaveSampleCount(iResolution.xy);\n\n    if(uv0.x >= WaveSampleCount || uv0.y >= 1.0) return;\n\n    ivec2 uv = ivec2(uv0 - 0.5);\n    \n    vec4 col = vec4(0.0);\n    \n    // ======================================================= GENERALIZED CUBIC BSPLINE =======================================================\n    \n    float kernD0[3];\n    float kernD1[3];\n    \n    kernD0[0] = 2.0/3.0; kernD0[1] = 1.0/6.0; kernD0[2] = 0.0;\n    kernD1[0] =     0.0; kernD1[1] =    -0.5; kernD1[2] = 0.0;\n    \n    float sw;// side lobes weight\n\n    sw = 0.0;// cubic BSpline\n    \n   #if 0\n   \n    sw = 0.25;// similar to 1/3 but less ringing\n    \n   #elif 0\n   \n    sw = 1.0/3.0;// kernD0[0] == 1\n    \n   #elif 0\n    \n    sw = 0.186605;// max abs derivative == 1\n    \n   #elif 0\n    \n    sw = 1.0/6.0;// maximaly flat pass band\n    \n   #elif 1\n    \n    sw = -0.25;// spectrum falls off to 0 at Nyquist frequency\n    \n   #endif\n    \n    // add a pair of side lobes:\n    kernD0[0] += 1.0 * sw; kernD0[1] += -1.0/3.0 * sw; kernD0[2] += -1.0/6.0 * sw;\n    \t                   kernD1[1] += -1.0     * sw; kernD1[2] +=  0.5     * sw;\n    \n    int r = sw == 0.0 ? 1 : 2;\n\n    for(int i = -r; i <= r; ++i)\n    {\n    \tfloat f = FETCH(ivec2(abs(uv.x + i), 0));\n        \n        int x = abs(i);\n        \n        float kAx = kernD0[x];\n        float kBx = kernD1[x] * (i > 0 ? -1.0 : 1.0);\n        \n        col.rg += f * vec2(kAx, kBx).xy;\n    }\n\n    // col = vec4(f, df/dx, 0, 0)\n    fragColor = col;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}