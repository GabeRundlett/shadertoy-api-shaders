{
    "Shader": {
        "info": {
            "date": "1636216427",
            "description": "https://en.wikipedia.org/wiki/Collatz_conjecture\n\nin this variant we only simulate in line1 of buffA,\nand we display in y value reached from x, hue = iteration.",
            "flags": 32,
            "hasliked": 0,
            "id": "Nlc3RS",
            "likes": 5,
            "name": "Syracuse problem / Collatz con 2",
            "published": 3,
            "tags": [
                "collatzconjecture",
                "syracuseproblem",
                "ulamconjecture",
                "hailstonesequence"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 281
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/7td3W7\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n        O = T(U/1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    U -= .5;\n    if (iFrame==0) {            // --- initialization\n        O.x = U.x + U.y*R.x;    // each pixel represent one integer\n        O.y = 0.;               // step count\n        return;\n    }\n                                // --- Syracuse steps\n    O = T(U);                   // previous state\n    int i = int(O.x+.5);\n    if ( i==1 ) return;         // already converged\n    \n    i = i/2*2==i ? i/2 : 3*i+1; // hearth of the model\n    O.x = float(i);             // store current value\n    O.y++;                      // increment steps as long as not converged\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(U) texelFetch( iChannel0, ivec2(U), 0 )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U -= .5;\n    O = T(U);\n    vec4 T = texelFetch(iChannel1, ivec2(U.x,0),0); // add explored value to the graph\n    if ( U.y == round(T.x ) )  O += hue(.1*T.y);    // hue = corresponding iteration\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}