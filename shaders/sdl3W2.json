{
    "Shader": {
        "info": {
            "date": "1616607759",
            "description": "marching cubes personal test. this was for learning purposes only.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdl3W2",
            "likes": 1,
            "name": "marching cubes personal test",
            "published": 3,
            "tags": [
                "marching"
            ],
            "usePreview": 0,
            "username": "sirjofri",
            "viewed": 525
        },
        "renderpass": [
            {
                "code": "vec3 lightPos = vec3(-10., 5., 10.);\nvec3 lightCol = vec3(1., 1., .9);\nvec3 ambiCol = vec3(.8, .9, 1.);\n\nvec3 camrot = vec3(0.7, .85, 0.);\n\nvec3 getLightVector(vec3 p)\n{\n    return normalize(lightPos-p);\n}\n\nfloat sdBox(vec3 pos, vec3 dim, vec3 p)\n{\n    return length(max(vec3(0), abs(p-pos)-dim));\n}\n\nfloat sdSphere(vec3 pos, vec3 p, float r)\n{\n    return distance(pos, p) - r;\n}\n\nfloat aNoise(vec3 pos)\n{\n    return smoothstep(0., 1., texture(iChannel1, pos.xy*2.).r*texture(iChannel1, pos.xz*1.).r)*.01;\n}\n\nfloat aBox(vec3 pos)\n{\n    return sdBox(vec3(.0, .3, .0), vec3(.3, .15, .1), pos)-sin(pos.x*25.+iTime*4.)*0.01-.01-aNoise(pos)-aNoise(pos*.2)*4.;\n}\nfloat bBox(vec3 pos)\n{\n    return sdBox(vec3(0., .6, sin(iTime)*.1), vec3(.1, .15, .1), pos)-aNoise(pos)-.01-aNoise(pos*.2)*4.;\n}\n\nfloat compose(vec3 pos)\n{\n    return min(\n        min(\n            min(\n                aBox(pos),\n                bBox(pos)\n            ),\n            distance(vec3(pos.x, pos.y, 0.), pos)\n        ),\n        sdSphere(pos, vec3(sin(iTime*2.)*.35, cos(iTime*3.5)*.2+.5, sin(iTime)*.05+.06), .1)\n    );\n}\n\nfloat shadow(vec3 pos)\n{\n    float res = 1.;\n    float t = .0;\n    float ph = 1e10;\n    vec3 lv = getLightVector(pos);\n    for(int i = 0; i < 32; i++)\n    {\n        float h = compose(pos + lv*t);\n        float y = h*h/(2.*ph);\n        float d = sqrt(h*h-y*y);\n        res = min(res, 8.*d/max(0., t-y));\n        ph = h;\n        t += h;\n        if (res < .0001 || t > distance(lightPos, pos)) break;\n    }\n    res = clamp(res, 0., 1.);\n    return res*res*(3.-2.*res);\n}\n\n/* how to color the boxes individually? */\nvec3 color(vec3 pos, vec3 normal)\n{\n    vec3 left = texture(iChannel0, pos.yz*2.).rgb;\n    vec3 front = texture(iChannel0, pos.xz*2.).rgb;\n    vec3 top = texture(iChannel0, pos.xy*2.).rgb;\n    vec3 col = mix(mix(left, front, abs(normal.y)), top, pow(abs(normal.z), .5));\n    return pow(col, vec3(1.2));\n}\n\nfloat calcAO(vec3 pos, vec3 normal)\n{\n    float dist = .05;\n    float d = compose(pos + normal*dist);\n    return mix(.6, 1., clamp(d/dist, 0., 1.));\n}\n\n/* thanks wikipedia. Now I understand rotation matrices. */\nvec3 calcRayDir(vec3 d)\n{\n    mat3 yaw = mat3(\n        cos(camrot.x), -sin(camrot.x), 0.,\n        sin(camrot.x),  cos(camrot.x), 0.,\n        0.           ,  0.           , 1.\n    );\n    mat3 pitch = mat3(\n        1., 0., 0.,\n        0., cos(camrot.y), -sin(camrot.y),\n        0., sin(camrot.y),  cos(camrot.y)\n    );\n    mat3 roll = mat3(\n        cos(camrot.z), 0., sin(camrot.z),\n        0., 1., 0.,\n        -sin(camrot.z), 0., cos(camrot.z)\n    );\n    \n    d *= roll;\n    d *= pitch;\n    d *= yaw;\n    return normalize(d);\n}\n\n\n/* Thanks iq */\nvec3 calcNormal(vec3 p)\n{\n    const float h = 0.001;\n    #define ZERO (min(iFrame,0))\n    vec3 n = vec3(0.);\n    for (int i=ZERO; i<4; i++)\n    {\n        vec3 e = 0.5773*(2.*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.);\n        n += e*compose(p+e*h); /* btw: s/pos/p */\n    }\n    return normalize(n);\n}\n\nfloat march(vec3 ro, vec3 rd)\n{\n    float d = 0.;\n    for (int i=0; i<64; i++) {\n        float n = compose(ro + rd*d);\n        d += n;\n        if (n < .01)\n            return d;\n    }\n    return 1000.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    uv.x -= iResolution.y/iResolution.x/2.;\n    uv -= .5;\n    \n    float speed = .3;\n    vec3 campos = vec3(sin(iTime*speed)*.2-.5, cos(iTime*speed)*.15+.15+1., 1.);\n    vec3 raydir = vec3(uv.x, -2., uv.y);\n    camrot.z = cos(sin(iTime*.5)*50.)*sin(iTime*3.)*.01;\n    raydir = calcRayDir(raydir);\n    lightPos = vec3(sin(iTime*.7)*5., cos(iTime*.7)*5., sin(iTime*.2)*3.+5.);\n    \n    \n    float d = march(campos, raydir);\n    vec3 pos = campos + raydir*d;\n    float dist = distance(pos, campos);\n    vec3 normal = calcNormal(pos);\n    vec3 lightVector = getLightVector(pos);\n    float shade = shadow(pos);\n    \n    float shadow = min(shade, mix(.3, 1., dot(normal, lightVector)));\n    \n    vec3 col = clamp(vec3(1.8-dist), 0., 1.)*color(pos, normal);\n    col *= calcAO(pos, normal);\n    float mixvis = smoothstep(1., .95, sin(iTime)*abs(sin(dist*100.-iTime*5.)));\n    col = mix(col*vec3(.8, .9, .8), col, mixvis);\n    vec3 result = mix(col*.4, col*lightCol, shadow);\n    result = col * lightCol * shadow;\n    result += ambiCol*.6*col;\n    \n //   result = vec3(d*.05);\n\n    fragColor = vec4(result, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}