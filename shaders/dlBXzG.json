{
    "Shader": {
        "info": {
            "date": "1676262709",
            "description": "having fun",
            "flags": 0,
            "hasliked": 0,
            "id": "dlBXzG",
            "likes": 2,
            "name": "OVERLAP_ROTATING_MANDLEBROT",
            "published": 3,
            "tags": [
                "zen"
            ],
            "usePreview": 0,
            "username": "gschian0",
            "viewed": 166
        },
        "renderpass": [
            {
                "code": "uniform float time;\n\nmat4 rotateZ(float angle)\n{\nreturn mat4(vec4(cos(angle), sin(angle), 0, 0), vec4(-sin(angle), cos(angle), 0, 0), vec4(0, 0, 1, 0), vec4(0, 0, 0, 1));\n}\n\nmat4 rotateY(float angle)\n{\nreturn mat4(vec4(cos(angle), 0, -sin(angle), 0), vec4(0, 1, 0, 0), vec4(sin(angle), 0, cos(angle), 0), vec4(0, 0, 0, 1));\n}\n\nmat4 rotateX(float angle)\n{\nreturn mat4(vec4(1, 0, 0, 0), vec4(0, cos(angle), sin(angle), 0), vec4(0, -sin(angle), cos(angle), 0), vec4(0, 0, 0, 1));\n}\n\nvec3 hsv2rgb(vec3 c)\n{\nvec4 K = vec4(1.0, 1.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nvec2 uv = fragCoord.xy / vec2(iResolution.x, iResolution.y) * 2.0 - 1.0;\nvec2 c = vec2(uv);\n//c.x += 0.1 *sin(2.*3.14*c.y);\nvec3 color = vec3(0.2, 0., 0.5);\nfor (int i = 0; i < 50; i++) {\nmat4 rotZ = rotateZ(time + float(float(i)+iTime) *fract(iTime*.001));\nmat4 rotY = rotateY(time + float(i) * 0.2);\nmat4 rotX = rotateX(time + float(i) * 0.3);\nvec4 c_homo = vec4(c, 0.0, 1.0);\nc_homo = rotZ * rotY * rotX * c_homo;\nc = c_homo.xy;\nint iterations = 0;\nint maxIterations = 100;\nvec2 z = vec2(0.0);\nfor(int j = 0; j < maxIterations; j++)\n{\nfloat x = z.x;\nfloat y = z.y;\nfloat z_real = x * x - y * y + c.x;\nfloat z_imag = 2.0 * x * y + c.y;\nz = vec2(z_real, z_imag);\nif(length(z) > 2.0)\n{\niterations = j;\nbreak;\n}\n}\ncolor += hsv2rgb(vec3(float(iterations) / float(maxIterations), 1.0-float(iterations) / float(maxIterations), float(iterations) / float(maxIterations)));\n}\nfragColor = vec4(color*4. / 5.0, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}