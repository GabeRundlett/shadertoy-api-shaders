{
    "Shader": {
        "info": {
            "date": "1657701523",
            "description": "Compare the Zeta function with the true value of the first 500 non trivial zeros.\nKeys from 1 to 7 change algorithm for zeta\nkey 8 is gamma, key z is zoom, key x goes directly to last zero\n",
            "flags": 16,
            "hasliked": 0,
            "id": "ssKBz1",
            "likes": 3,
            "name": "Zeros of Riemann Zeta function",
            "published": 3,
            "tags": [
                "zeta"
            ],
            "usePreview": 0,
            "username": "guil",
            "viewed": 283
        },
        "renderpass": [
            {
                "code": "\nprecision highp float;\nconst float pi = 3.1415926535897932;\nconst float LOG2 = 0.6931471805599453;\nconst float LOGPI = 1.1447298858494002;\nconst float[1025] zeros = float[1025](\n\t14.134725,\t21.022040,\t25.010858,\t30.424876,\t32.935062,\n\t37.586178,\t40.918719,\t43.327073,\t48.005151,\t49.773832,\n\t52.970321,\t56.446248,\t59.347044,\t60.831779,\t65.112544,\n\t67.079811,\t69.546402,\t72.067158,\t75.704691,\t77.144840,\n\t79.337375,\t82.910381,\t84.735493,\t87.425275,\t88.809111,\n\t92.491899,\t94.651344,\t95.870634,\t98.831194,\t101.317851,\n\t103.725538,\t105.446623,\t107.168611,\t111.029536,\t111.874659,\n\t114.320221,\t116.226680,\t118.790783,\t121.370125,\t122.946829,\n\t124.256819,\t127.516684,\t129.578704,\t131.087689,\t133.497737,\n\t134.756510,\t138.116042,\t139.736209,\t141.123707,\t143.111846,\n\t146.000982,\t147.422765,\t150.053520,\t150.925258,\t153.024694,\n\t156.112909,\t157.597592,\t158.849988,\t161.188964,\t163.030710,\n\t165.537069,\t167.184440,\t169.094515,\t169.911976,\t173.411537,\n\t174.754192,\t176.441434,\t178.377408,\t179.916484,\t182.207078,\n\t184.874468,\t185.598784,\t187.228923,\t189.416159,\t192.026656,\n\t193.079727,\t195.265397,\t196.876482,\t198.015310,\t201.264752,\n\t202.493595,\t204.189672,\t205.394697,\t207.906259,\t209.576510,\n\t211.690863,\t213.347919,\t214.547045,\t216.169539,\t219.067596,\n\t220.714919,\t221.430706,\t224.007000,\t224.983325,\t227.421444,\n\t229.337413,\t231.250189,\t231.987235,\t233.693404,\t236.524230,\n\t237.769820,\t239.555478,\t241.049158,\t242.823272,\t244.070898,\n\t247.136990,\t248.101990,\t249.573690,\t251.014948,\t253.069987,\n\t255.306256,\t256.380714,\t258.610439,\t259.874407,\t260.805085,\n\t263.573894,\t265.557852,\t266.614974,\t267.921915,\t269.970449,\n\t271.494056,\t273.459609,\t275.587493,\t276.452050,\t278.250744,\n\t279.229251,\t282.465115,\t283.211186,\t284.835964,\t286.667445,\n\t287.911921,\t289.579855,\t291.846291,\t293.558434,\t294.965370,\n\t295.573255,\t297.979277,\t299.840326,\t301.649325,\t302.696750,\n\t304.864371,\t305.728913,\t307.219496,\t310.109463,\t311.165142,\n\t312.427801,\t313.985286,\t315.475616,\t317.734806,\t318.853104,\n\t321.160134,\t322.144559,\t323.466970,\t324.862866,\t327.443901,\n\t329.033072,\t329.953240,\t331.474468,\t333.645379,\t334.211355,\n\t336.841850,\t338.339993,\t339.858217,\t341.042261,\t342.054878,\n\t344.661703,\t346.347871,\t347.272678,\t349.316261,\t350.408419,\n\t351.878649,\t353.488900,\t356.017575,\t357.151302,\t357.952685,\n\t359.743755,\t361.289362,\t363.331331,\t364.736024,\t366.212710,\n\t367.993575,\t368.968438,\t370.050919,\t373.061928,\t373.864874,\n\t375.825913,\t376.324092,\t378.436680,\t379.872975,\t381.484469,\n\t383.443529,\t384.956117,\t385.861301,\t387.222890,\t388.846128,\n\t391.456084,\t392.245083,\t393.427744,\t395.582870,\t396.381854,\n\t397.918736,\t399.985120,\t401.839229,\t402.861918,\t404.236442,\n\t405.134387,\t407.581460,\t408.947246,\t410.513869,\t411.972268,\n\t413.262736,\t415.018810,\t415.455215,\t418.387706,\t419.861365,\n\t420.643828,\t422.076710,\t423.716580,\t425.069882,\t427.208825,\n\t428.127914,\t430.328745,\t431.301307,\t432.138642,\t433.889218,\n\t436.161006,\t437.581698,\t438.621739,\t439.918442,\t441.683199,\n\t442.904546,\t444.319336,\t446.860623,\t447.441704,\t449.148546,\n\t450.126946,\t451.403308,\t453.986738,\t454.974684,\t456.328427,\n\t457.903893,\t459.513415,\t460.087944,\t462.065367,\t464.057287,\n\t465.671539,\t466.570287,\t467.439046,\t469.536005,\t470.773655,\n\t472.799175,\t473.835232,\t475.600339,\t476.769015,\t478.075264,\n\t478.942182,\t481.830339,\t482.834783,\t483.851427,\t485.539148,\n\t486.528718,\t488.380567,\t489.661762,\t491.398822,\t493.314442,\n\t493.957998,\t495.358829,\t496.429696,\t498.580782,\t500.309085,\n\t501.604447,\t502.276270,\t504.499773,\t505.415232,\t506.464153,\n\t508.800700,\t510.264228,\t511.562290,\t512.623145,\t513.668986,\n\t515.435057,\t517.589669,\t518.234223,\t520.106310,\t521.525193,\n\t522.456696,\t523.960531,\t525.077386,\t527.903642,\t528.406214,\n\t529.806226,\t530.866918,\t532.688183,\t533.779631,\t535.664314,\n\t537.069759,\t538.428526,\t540.213166,\t540.631390,\t541.847437,\n\t544.323890,\t545.636833,\t547.010912,\t547.931613,\t549.497568,\n\t550.970010,\t552.049572,\t553.764972,\t555.792021,\t556.899476,\n\t557.564659,\t559.316237,\t560.240807,\t562.559208,\t564.160879,\n\t564.506056,\t566.698788,\t567.731758,\t568.923955,\t570.051115,\n\t572.419984,\t573.614611,\t575.093886,\t575.807247,\t577.039003,\n\t579.098835,\t580.136959,\t581.946576,\t583.236088,\t584.561706,\n\t585.984563,\t586.742772,\t588.139663,\t590.660398,\t591.725858,\n\t592.571358,\t593.974715,\t595.728154,\t596.362768,\t598.493077,\n\t599.545640,\t601.602137,\t602.579168,\t603.625619,\t604.616218,\n\t606.383460,\t608.413217,\t609.389575,\t610.839163,\t611.774210,\n\t613.599779,\t614.646238,\t615.538563,\t618.112831,\t619.184483,\n\t620.272894,\t621.709295,\t622.375003,\t624.269900,\t626.019283,\n\t627.268397,\t628.325862,\t630.473887,\t630.805781,\t632.225141,\n\t633.546858,\t635.523800,\t637.397193,\t637.925514,\t638.927938,\n\t640.694795,\t641.945500,\t643.278884,\t644.990578,\t646.348192,\n\t647.761753,\t648.786401,\t650.197519,\t650.668684,\t653.649572,\n\t654.301921,\t655.709463,\t656.964085,\t658.175614,\t659.663846,\n\t660.716733,\t662.296586,\t664.244605,\t665.342763,\t666.515148,\n\t667.148495,\t668.975849,\t670.323585,\t672.458184,\t673.043578,\n\t674.355898,\t676.139674,\t677.230181,\t677.800445,\t679.742198,\n\t681.894992,\t682.602735,\t684.013550,\t684.972630,\t686.163224,\n\t687.961543,\t689.368941,\t690.474735,\t692.451684,\t693.176970,\n\t694.533909,\t695.726336,\t696.626070,\t699.132095,\t700.296739,\n\t701.301743,\t702.227343,\t704.033839,\t705.125814,\t706.184655,\n\t708.269071,\t709.229589,\t711.130274,\t711.900290,\t712.749383,\n\t714.082772,\t716.112396,\t717.482570,\t718.742787,\t719.697101,\n\t721.351162,\t722.277505,\t723.845821,\t724.562614,\t727.056403,\n\t728.405482,\t728.758750,\t730.416482,\t731.417355,\t732.818053,\n\t734.789643,\t735.765459,\t737.052929,\t738.580421,\t739.909524,\n\t740.573807,\t741.757336,\t743.895013,\t745.344990,\t746.499306,\n\t747.674564,\t748.242754,\t750.655950,\t750.966381,\t752.887622,\n\t754.322370,\t755.839309,\t756.768248,\t758.101729,\t758.900238,\n\t760.282367,\t762.700033,\t763.593066,\t764.307523,\t766.087540,\n\t767.218472,\t768.281462,\t769.693407,\t771.070839,\t772.961618,\n\t774.117745,\t775.047847,\t775.999712,\t777.299749,\t779.157077,\n\t780.348925,\t782.137664,\t782.597944,\t784.288823,\t785.739090,\n\t786.461147,\t787.468464,\t790.059092,\t790.831620,\t792.427708,\n\t792.888653,\t794.483792,\t795.606596,\t797.263470,\t798.707570,\n\t799.654336,\t801.604246,\t802.541985,\t803.243096,\t804.762239,\n\t805.861636,\t808.151815,\t809.197783,\t810.081805,\t811.184359,\n\t812.771108,\t814.045914,\t814.870540,\t816.727738,\t818.380669,\n\t819.204642,\t820.721898,\t821.713454,\t822.197757,\t824.526294,\n\t826.039287,\t826.905811,\t828.340174,\t829.437011,\t830.895884,\n\t831.799778,\t833.003641,\t834.651915,\t836.693576,\t837.347335,\n\t838.249022,\t839.465395,\t841.036390,\t842.041354,\t844.166197,\n\t844.805994,\t846.194770,\t847.971718,\t848.489281,\t849.862274,\n\t850.645448,\t853.163113,\t854.095512,\t855.286710,\t856.484117,\n\t857.310741,\t858.904026,\t860.410671,\t861.171098,\t863.189720,\n\t864.340824,\t865.594664,\t866.423740,\t867.693123,\t868.670494,\n\t870.846902,\t872.188751,\t873.098979,\t873.908389,\t875.985285,\n\t876.600826,\t877.654698,\t879.380952,\t880.834649,\t882.386697,\n\t883.430332,\t884.198743,\t885.272304,\t886.852802,\t888.475567,\n\t889.735294,\t890.813132,\t892.386433,\t893.119118,\t894.886292,\n\t895.397920,\t896.632252,\t899.221523,\t899.858885,\t900.849740,\n\t902.243208,\t903.099674,\t904.702903,\t905.829941,\t907.656729,\n\t908.333544,\t910.186334,\t911.234951,\t912.331046,\t912.823999,\n\t914.730097,\t916.355001,\t917.825378,\t918.836535,\t919.448344,\n\t921.156396,\t922.500629,\t923.285720,\t924.773484,\t926.551553,\n\t927.850859,\t928.663659,\t929.874093,\t931.009211,\t931.852741,\n\t934.385307,\t934.995425,\t936.228649,\t937.532926,\t939.024301,\n\t939.660941,\t941.157000,\t942.052342,\t944.188036,\t945.333563,\n\t946.765842,\t947.079183,\t948.346646,\t950.151613,\t951.033249,\n\t952.727989,\t954.129719,\t954.829309,\t956.675479,\t957.510053,\n\t958.414593,\t959.459169,\t961.669572,\t963.182087,\t963.567040,\n\t965.055580,\t966.110755,\t967.371154,\t968.636302,\t970.125611,\n\t971.071491,\t973.185361,\t973.873079,\t974.774635,\t976.178502,\n\t976.917202,\t978.766672,\t980.578001,\t981.288615,\t982.396485,\n\t983.575076,\t985.186929,\t986.130515,\t986.756008,\t988.992622,\n\t990.223918,\t991.374294,\t992.728696,\t993.214581,\t994.404591,\n\t996.205336,\t997.511935,\t998.827547,\t999.791572,\t1001.349483,\n\t1002.404305,\t1003.267808,\t1004.675044,\t1005.543420,\t1008.006704,\n\t1008.795710,\t1009.806591,\t1010.569757,\t1012.410043,\t1013.058638,\n\t1014.689633,\t1016.060179,\t1017.266402,\t1018.605573,\t1019.912440,\n\t1020.917475,\t1021.544344,\t1022.885271,\t1025.265724,\t1025.707944,\n\t1027.467694,\t1028.128964,\t1029.227297,\t1030.897369,\t1031.833180,\n\t1032.812883,\t1034.612916,\t1036.195917,\t1037.024708,\t1038.087752,\n\t1039.077401,\t1040.264038,\t1041.621528,\t1043.623954,\t1044.514976,\n\t1045.107042,\t1047.089817,\t1047.987147,\t1048.953785,\t1049.996284,\n\t1051.576572,\t1053.245785,\t1054.781039,\t1055.002146,\t1056.688847,\n\t1057.100044,\t1059.133769,\t1060.139519,\t1061.501304,\t1062.915382,\n\t1064.071551,\t1065.121855,\t1066.463223,\t1067.418860,\t1067.990000,\n\t1070.535042,\t1071.618623,\t1072.543998,\t1073.570353,\t1074.747771,\n\t1076.266626,\t1076.924056,\t1078.647198,\t1079.809965,\t1081.171002,\n\t1082.952750,\t1083.295467,\t1084.183264,\t1085.647831,\t1086.911999,\n\t1088.755725,\t1089.795338,\t1090.863191,\t1091.728473,\t1093.440873,\n\t1094.284458,\t1095.433085,\t1096.401918,\t1098.841015,\t1099.360667,\n\t1100.574461,\t1101.839111,\t1102.551780,\t1103.732297,\t1105.617189,\n\t1106.774372,\t1107.774532,\t1109.158919,\t1110.444143,\t1111.443505,\n\t1112.432995,\t1113.397595,\t1115.065359,\t1116.787254,\t1117.965920,\n\t1118.684135,\t1119.473247,\t1121.155938,\t1122.458621,\t1123.101117,\n\t1125.314729,\t1125.763442,\t1127.658024,\t1128.430225,\t1129.728997,\n\t1130.391598,\t1131.495086,\t1133.708626,\t1134.885655,\t1135.562214,\n\t1136.929293,\t1138.151590,\t1138.992342,\t1140.721848,\t1141.261023,\n\t1142.858660,\t1144.782300,\t1145.485328,\t1146.576815,\t1147.501777,\n\t1148.615277,\t1149.982601,\t1151.562815,\t1152.943129,\t1153.890304,\n\t1154.697520,\t1156.621568,\t1157.432315,\t1158.001609,\t1159.480657,\n\t1161.396645,\t1162.487529,\t1163.701032,\t1164.737586,\t1165.271228,\n\t1166.943613,\t1168.086272,\t1169.698357,\t1170.463639,\t1172.120682,\n\t1173.305688,\t1174.232767,\t1175.215452,\t1176.632876,\t1177.106304,\n\t1179.701224,\t1180.653544,\t1181.267318,\t1182.582270,\t1183.712775,\n\t1185.155843,\t1185.875359,\t1187.345161,\t1188.856444,\t1189.963636,\n\t1191.482606,\t1192.218611,\t1193.324021,\t1193.857427,\t1196.034672,\n\t1197.071787,\t1198.686569,\t1199.356514,\t1200.532692,\t1201.810335,\n\t1203.137351,\t1203.855248,\t1204.985492,\t1206.870500,\t1208.471460,\n\t1208.989484,\t1209.898030,\t1211.416116,\t1212.113153,\t1213.598373,\n\t1215.389975,\t1216.183722,\t1217.174482,\t1219.050028,\t1219.614471,\n\t1220.816348,\t1221.692242,\t1222.952484,\t1225.018330,\t1225.855021,\n\t1227.231828,\t1227.917142,\t1228.793154,\t1230.584603,\t1231.562274,\n\t1232.529587,\t1234.277817,\t1235.502549,\t1236.399017,\t1237.977299,\n\t1238.457233,\t1239.490807,\t1240.813472,\t1243.078076,\t1243.538147,\n\t1244.851434,\t1245.655866,\t1247.372562,\t1248.063061,\t1249.159888,\n\t1250.672397,\t1251.659832,\t1253.673578,\t1254.431328,\t1255.408231,\n\t1256.181214,\t1257.541219,\t1258.779233,\t1260.344548,\t1261.611717,\n\t1262.556614,\t1263.676733,\t1264.957223,\t1266.179038,\t1267.200346,\n\t1267.570572,\t1270.118922,\t1271.134300,\t1272.083960,\t1273.261145,\n\t1274.196221,\t1275.092030,\t1276.842172,\t1277.763092,\t1279.332843,\n\t1280.155794,\t1281.828727,\t1283.000491,\t1283.335032,\t1284.854795,\n\t1285.695023,\t1287.410027,\t1289.165352,\t1290.104772,\t1290.417708,\n\t1291.945871,\t1293.493982,\t1294.118474,\t1295.365364,\t1296.801111,\n\t1298.256527,\t1299.405171,\t1300.490019,\t1301.495517,\t1302.346742,\n\t1303.273200,\t1305.401672,\t1306.508393,\t1307.267242,\t1308.988197,\n\t1309.421532,\t1311.056571,\t1311.966941,\t1313.031599,\t1314.052566,\n\t1316.212113,\t1317.072986,\t1318.171279,\t1318.947881,\t1319.931083,\n\t1321.628139,\t1322.258067,\t1324.224979,\t1325.237624,\t1325.981970,\n\t1327.635281,\t1329.043518,\t1329.205019,\t1330.429937,\t1331.827591,\n\t1333.673523,\t1334.747329,\t1335.694975,\t1336.690185,\t1337.688792,\n\t1338.923165,\t1340.426400,\t1341.166272,\t1342.608508,\t1344.156044,\n\t1345.477106,\t1345.731413,\t1347.519472,\t1348.017238,\t1349.085194,\n\t1351.296206,\t1352.210465,\t1353.483338,\t1353.886782,\t1355.680595,\n\t1356.605656,\t1357.771743,\t1358.460160,\t1360.393145,\t1361.393075,\n\t1363.022329,\t1363.879191,\t1364.576585,\t1365.493734,\t1367.104091,\n\t1368.330193,\t1369.686949,\t1370.973523,\t1371.686554,\t1373.202915,\n\t1374.154799,\t1375.302392,\t1376.161780,\t1377.177634,\t1379.683283,\n\t1380.148578,\t1381.073977,\t1382.345663,\t1383.297591,\t1384.444416,\n\t1385.663777,\t1387.326648,\t1387.921454,\t1389.565832,\t1390.705490,\n\t1391.853200,\t1392.644028,\t1393.433402,\t1394.884185,\t1396.544163,\n\t1397.834623,\t1398.837675,\t1399.839473,\t1400.426946,\t1402.564347,\n\t1402.973748,\t1404.006292,\t1405.666975,\t1407.085143,\t1408.136307,\n\t1409.320681,\t1410.024811,\t1411.257057,\t1411.965653,\t1413.843149,\n\t1415.585785,\t1415.781581,\t1417.102823,\t1418.696964,\t1419.422481,\n\t1420.416526,\t1421.850567,\t1422.461311,\t1424.463046,\t1425.873469,\n\t1426.645980,\t1427.365671,\t1428.592306,\t1429.650477,\t1431.218314,\n\t1432.049741,\t1433.821941,\t1434.584942,\t1435.692907,\t1437.226722,\n\t1438.006285,\t1438.949553,\t1439.622793,\t1441.960988,\t1442.911060,\n\t1444.041931,\t1445.072278,\t1445.830085,\t1447.226227,\t1448.323854\n\n);\n\n\n\n//------------------ ------------------------------------------\n// complex number operations\nvec2 cadd( vec2 a, float s ) { return vec2( a.x+s, a.y ); }\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 cinv(vec2 z) {return vec2(z.x,-z.y)/dot(z,z);}\nvec2 cdiv( vec2 a, vec2 b )  { float d = dot(b,b); return vec2( dot(a,b), a.y*b.x - a.x*b.y ) / d; }\nvec2 csqr( vec2 a ) { return vec2(a.x*a.x-a.y*a.y, 2.0*a.x*a.y ); }\nvec2 csqrt( vec2 z ) { float m = length(z); return sqrt( 0.5*vec2(m+z.x, m-z.x) ) * vec2( 1.0, sign(z.y) ); }\nvec2 conj( vec2 z ) { return vec2(z.x,-z.y); }\nvec2 cpow( vec2 z, float n ) { float r = length( z ); float a = atan( z.y, z.x ); return pow( r, n )*vec2( cos(a*n), sin(a*n) ); }\nvec2 cpow( float n, vec2 z ) {  return pow( n, z.x )*vec2( cos(z.y*log(n)), sin(z.y*log(n)) ); }\nvec2 cexp( vec2 z) {  return exp( z.x )*vec2( cos(z.y), sin(z.y) ); }\nvec2 clog( vec2 z) {  return vec2( 0.5*log(z.x*z.x+z.y*z.y), atan(z.y,z.x)); }\nvec2 csin( vec2 z) { float r = exp(z.y); return 0.5*vec2((r+1.0/r)*sin(z.x),(r-1.0/r)*cos(z.x));}\nvec2 cpow( vec2 a, vec2 b ) {  return cexp(cmul(b,clog(a))) ;}\nvec2 ccos( vec2 z) { float r = exp(z.y); return 0.5*vec2((r+1.0/r)*cos(z.x),-(r-1.0/r)*sin(z.x));}\nvec2 clogsin(vec2 z) {\n  if (abs(z.y)<8.0)return clog(csin(z));  \n  if (z.y > 0.) return vec2(z.y - LOG2, mod(1.5*pi-z.x, 2.0*pi) - pi);\n  else return vec2(-z.y - LOG2, mod(0.5*pi+z.x, 2.0*pi) - pi);\n  \n}\n//------------------------------------------------------------\n\n\n\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nvec3 col(vec2 u){\n    float r = u.x;\n    float v =min( exp(-r*.15),1.);\n    return hsv2rgb(vec3(u.y/(2.*pi),.5+.5*fract(r),.8))*v;\n}\n\n\n\n// Spouge's method for loggamma\nvec2 logspouge(vec2 z){\n    const int N = 10;\n    float c = sqrt(2.*pi);\n\tvec2 s = vec2(c,0.);\n    float f = 1.;\n\tfor(int k = 1; k<N ;k++){\n\t\tc = exp(float(N-k)) * pow(float(N-k),float(k)-.5)/f;\n        f *= -float(k);\n        s += c*cinv(z+vec2(float(k),0.));\n\t}\t   \n    //s = cmul(s,cmul(cexp(-z-vec2(float(N),0.)),cpow(z+vec2(float(N),0.),z+vec2(.5,0.))));\n    //return cdiv(s,z);\n    s = clog(s); \n    s += -z - vec2(float(N),0.) + cmul(z+vec2(.5,0.), clog(z+vec2(float(N),0.)));\n    return s-clog(z);      \n}\n\n\n// Spouge approximation for loggamma function\nvec2 loggamma(vec2 z){\n  if(z.x > 0.5) return logspouge(z);\n  return vec2(LOGPI,0)-clogsin(pi*z)-logspouge(vec2(1,0)-z);\n}\n\n\n//Basic eta def\nvec2 eta1(vec2 z){\n  const float N = 50.;\n  vec2 sum = vec2(0);\n  float s=1.;\n  for(float i = 0.; i < N; i++)\n    sum += s*cpow(i+1.,-z), s*=-1.;\n  return sum;\n}\n\n//Knopp and Hasse\nvec2 eta2(vec2 z){\n  const float N = 50.;\n  vec2 sum = vec2(0);\n  for(float i = 0.; i < N; i++){\n    vec2 term = vec2(0);\n    float s = 1.;\n    float bnk = 1./pow(2.,i+1.);\n    for(float k = 0.; k < i+1.; k++){\n       term += s*bnk* cpow(k+1.,-z);\n       bnk *= (i-k)/(k+1.);\n       s*=-1.;\n       }\n    sum += term;\n    }\n  return sum;\n}\n\n\n\n\n//Same algorithm as in mia shader but extended to N = 40\n//ek coeff are calculated on the fly\n//http://numbers.computation.free.fr/Constants/Miscellaneous/zetaevaluations.pdf\nvec2 eta3(vec2 s) {\n  const int N = 120;  \n\n  vec2 sum1 = vec2(0);\n  float a = 1.0;\n  for(int i = 1; i <= N; i++) {\n    sum1 += a*(cpow(float(i), -s));\n    a = -a;\n  }\n  vec2 sum2 = vec2(0);\n  a = -1.0;\n  float bk= 1.0/pow(2.,float(N));\n  float ek= bk;\n  for(int i = 0 ; i <  N; i++) {\n    sum2 += a*ek*(cpow(float(2*N-i),-s));\n    bk *= float(N-i)/float(i+1);\n    ek += bk;    \n    a = -a;\n  }\n\n  return sum1 + sum2;\n}\n\n//Borwein method, valid for z.x > 0 \n//http://numbers.computation.free.fr/Constants/Miscellaneous/zetaevaluations.pdf\nvec2 eta4(vec2 z){\n        \n    int n1=100;\n    int n2=45;\n    \n\tfloat a=1.;\n    vec2  sum1 = vec2(0.);\n    for (int i = 1; i <= n1 ; i++) {\n        sum1 += cpow(float(i),-z)*a;\n        a=-a;\n        }\n    \n    float dni = 1.;\n    float dnn = dni;\n    float val = dni;\n\tfor(int i = 1; i<=n2 ;i++){\n\t\tval *= 2.*float((n2+i-1)*(n2-i+1))/float((2*i-1)*i);\n\t\tdnn+= val;\t\t\n\t}\n    dni = 1./dnn;\n    val = dni;\n    vec2  sum2 = vec2(0.);\n    for (int i = 1; i <= n2 ; i++) {\n        float ci = 1.- dni;\n        sum2 += a*ci*cpow(float(i+n1),-z);\n        a *= -1.;\n        val *= 2.*float((n2+i-1)*(n2-i+1))/float((2*i-1)*i);\n        dni +=val;\n        }\n    return sum1+sum2;\n}\n\n\nvec2 logkhi(vec2 z){\n    return z*log(2.*pi)-vec2(log(pi),0)+clogsin(pi*z/2.)+loggamma(vec2(1.,0.)-z);\n}  \n\n//Henri Cohen, Fernando Rodriguez Villegas, and Don Zagier\n//https://people.mpim-bonn.mpg.de/zagier/files/exp-math-9/fulltext.pdf\nvec2 eta5(vec2 z){\n  const float N1 = 300.;\n  const float N2 = 48.;\n  \n  vec2 s1 = vec2(0);\n  float a = 1.0;\n  for(float i = 0.; i < N1; i++) {\n    s1 += a*(cpow(i+1., -z));\n    a = -a;\n  }\n  \n  float d= pow((3. + sqrt(8.)),N2);\n  d=(d+1./d)/2.;\n  float b=-1.,c=-d;\n  vec2 s2 = vec2(0);\n  for(float k = 0.; k < N2; k++)\n    c = b-c,\n    s2 += c*cpow(k+N1+1.,-z),\n    b *= (k+N2)/(k+0.5)*(k-N2)/(k+1.);\n    \n  return s1+s2/d;\n}\n\n\n\n//Riemann-Siegel formula\n//Valid for 0<z.x<1 and abs(z.y) very large\n//http://numbers.computation.free.fr/Constants/Miscellaneous/zetaevaluations.pdf\nvec2 zeta6(vec2 z){\n  const float N = 100.;\n  float m = sqrt(abs(z.y)/(2.*pi));\n  vec2 sum1 = vec2(0);\n  vec2 sum2 = vec2(0);\n  for(float i = 0.; i < N; i++){\n    sum1 += cpow(i+1.,-z); \n    sum2 += cpow(i+1.,z-1.);\n    if(i>m)break;\n}    \n  return sum1 + cexp(logkhi(z)+clog(sum2));\n}\n\n//Dirichlet lambda = (eta+zeta)/2 = sum (2*i+1)**-z for i in N\n//zeta = lambda /(1-2**-z)\n//not very accurate near 0 but very accurate for large Im(z)\nvec2 lambda(vec2 z){\n  const float N = 200.;\n  vec2 sum = vec2(0);\n  \n  for(float i = 0.; i < N; i++)\n    sum += cpow(2.*i+1.,-z);\n  return sum;\n}\n\n\nvec2 logzeta(vec2 z){\n    if(z.x<.5)return logkhi(z)+clog(eta4(vec2(1.,0.)-z))-clog(vec2(1,0)-cpow(2.,z));\n    return clog(eta4(z))-clog(vec2(1,0)-cpow(2.,vec2(1,0)-z));\n}\n\nvec2 zeta(vec2 z){    \n    return cexp(logzeta(z));\n}\n\nvec2 zetabrot(vec2 z){\n    for(int i = 0; i < 12; i++){\n        z=zeta(z);\n        if (dot(z,z)<.7)break;\n        }\n    return z;\n}\n\nint binarysearch(float x){\n    const int N = 1024;\n    if(x>zeros[N])return N;\n    if(x<zeros[0])return 0;\n    int n = 0;\n    int k = N/2;\n    for(int i=0;i<9;i++){\n        if(x>zeros[n+k])n+=k;\n        k/=2;\n    }\n    if(abs(zeros[n]-x)<abs(zeros[n+1]-x))return n;\n    return n+1;\n\n}\n\nbool keypress(int key) {\n    return texelFetch(iChannel0, ivec2(key,2),0).x != 0.0;\n}\n\nvoid mainImage(out vec4 fragColor,  in vec2 fragCoord){\n  vec2 uv = (2.*fragCoord - iResolution.xy-iMouse.xy) / iResolution.y+(iMouse.xy==vec2(0.,0.)?0.:.5);;  // Map y-coordinates to [-1;1]\n  float zoom = 8.;\n  if (keypress(90)) zoom = 2.0;\n  uv *= zoom;  // Zoom out\n  float shift = 0.;\n  if (keypress(88)) shift = 800.0;\n  uv.x += iTime+shift;  // Move up in uv-space!\n  vec2 z = uv.yx;\n  if (keypress(49)) {//1\n      z = clog(eta1(z))-clog(vec2(1,0)-cpow(2.,vec2(1,0)-z));\n  } else if (keypress(50)){//2\n      z = clog(eta2(z))-clog(vec2(1,0)-cpow(2.,vec2(1,0)-z));\n  } else if (keypress(51)){//3\n      z = clog(eta3(z))-clog(vec2(1,0)-cpow(2.,vec2(1,0)-z));\n  } else if (keypress(52)){//4\n      z = clog(eta4(z))-clog(vec2(1,0)-cpow(2.,vec2(1,0)-z));\n  } else if (keypress(53)){//5\n      z = clog(eta5(z))-clog(vec2(1,0)-cpow(2.,vec2(1,0)-z));\n  } else if (keypress(54)){//6\n      z = clog(zeta6(z));  \n  } else if (keypress(55)){//7\n      z = clog(lambda(z))-clog(vec2(1,0)-cpow(2.,-z));\n  } else if (keypress(56)){//8\n      z = loggamma(z);\n  } else {\n      z = logzeta(z);\n  }\n  fragColor.rgb = col(z);\n  float size = 4.*zoom/iResolution.x;\n  if (mod(abs(uv.x),5.)<size)fragColor.rgb = vec3(0.5);\n  if (mod(abs(uv.y),5.)<size)fragColor.rgb = vec3(0.5);\n  if (abs(uv.y-.5)<size)fragColor.rgb = vec3(1);\n  float x = abs(uv.x);\n  if (abs(x-zeros[binarysearch(x)])<size)fragColor.rgb = vec3(1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}