{
    "Shader": {
        "info": {
            "date": "1726579991",
            "description": "The texture is just randomly offset over time (as shown by the red dot)\nbut we have the illusion of global translation of the noise via separate layers.\nIn facts you can force yourself to favor a direction.\nmouse.x controls the amplitude of random motion\n",
            "flags": 0,
            "hasliked": 0,
            "id": "MXlczl",
            "likes": 8,
            "name": "illusion of motion in PerlinNois",
            "published": 3,
            "tags": [
                "perlinnoise",
                "hypertexture",
                "short",
                "gradientnoise",
                "isovalue"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 144
        },
        "renderpass": [
            {
                "code": "// paper variant: https://www.shadertoy.com/view/lf2fzw\n// Gabor variant: https://www.shadertoy.com/view/lcjBz3\n// Perlin variant: https://www.shadertoy.com/view/MXlczl (this one) \n// FBM variant by rikr: https://www.shadertoy.com/view/4Xlczf\n\n\n// from https://shadertoy.com/view/4cVGRW\n// Perlin noise adapted from https://shadertoy.com/view/wtf3R2\n   #define P     ( v = smoothstep(0.,1.,fract(V)), 2.*    mix( Py(0), Py(1), v.y) )\n// #define P     ( v = smoothstep(0.,1.,fract(V)), 2.*abs(mix( Py(0), Py(1), v.y)) ) // turbulence : abs\n#define Px(x,y) dot( H( C = floor(V) + vec2(x,y) ), V-C )\n#define Py(y)   mix( Px(0,y), Px(1,y), v.x)\n#define H(p)  ( 2.* fract(sin( mod( (p) * mat2(127.1,311.7,269.5,183.3) , 6.283 ))*3758.54) - 1.)\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         M = length(iMouse.xy)< 10. ? vec2(1) : iMouse.xy/R,\n         U = u / R.y, V = 8.*U + 10.*M.x * H(vec2(floor(10.*iTime))), V0=V,v,C;\n    if (M==vec2(0)) M = R/2.;\n    \n    float i,s=1., p;\n    for ( ; i++ < 5. ; V *= 2., s *= 2. )      // Perline turbulence\n        p += P/s;\n    p /= 2.; p -= .274;                        // mean: .274 std: .217\n\n    O = vec4( .5+.5*p ); \n // O = smoothstep(0.4, 0.5, O);\n // O = sqrt(O);                               // to sRGB: strangely, it seems to make the effect less visible. or not ?\n    O.r += max( 0., 10. - R.y/8.*length(V0-4.*R/R.y) );  // draw offset mark\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}