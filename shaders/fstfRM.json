{
    "Shader": {
        "info": {
            "date": "1656246779",
            "description": "Forked from original shader by @charmless. Mouse adds extra layer of waves.\n\n[url]http://mainisusuallyafunction.blogspot.ca/2011/10/quasicrystals-as-sums-of-waves-in-plane.html[/url]",
            "flags": 16,
            "hasliked": 0,
            "id": "fstfRM",
            "likes": 10,
            "name": "Quasicrystalline Fun",
            "published": 3,
            "tags": [
                "quasicrystals"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 366
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159265359;\nint AA = 2;\nfloat zoom = 100.0;\nfloat cycle = 60.0;\nfloat maxlayers = 20.0;\nfloat time;\n\nfloat wave(float theta, vec2 p) {\n\treturn 0.5+0.5*cos(dot(p,vec2(cos(theta),sin(theta))));\n}\n\nvec3 quasicrystal(vec2 p, float layers) {\n    float sum = 0.;\n    for (float theta = 0.0; theta < PI; theta += PI/layers) {\n      float k = smoothstep(0.0,1.0,min((PI-theta)*layers/PI,1.0));\n      sum += k*wave(theta, p);\n    }\n    if (iMouse.z > 0.0) {\n      vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n      sum += length(m)*wave(atan(m.y,m.x),p);\n    }\n    vec3 t = (1.0+0.5*cos(0.5*time))*sum*vec3(2,3,5);\n    t /= layers;\n    // Sawtooth\n    return fract(t);\n    // Triangle wave alternative coloring\n    t *= 2.0;\n    t = mod(t,2.0);\n    t = min(t,2.0-t);\n    return t;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  vec3 col = vec3(0);\n  time = iTime;\n  float t = mod(time/cycle,2.0);\n  t = min(t,2.0-t);\n  float layers = 3.0+(maxlayers-3.0)*smoothstep(0.0,1.0,t);\n  if (key(CHAR_X)) layers = floor(layers);\n  if (key(CHAR_Z)) zoom *= 2.0;\n  for (int i = 0; i < AA; i++) {\n    for (int j = 0; j < AA; j++) {\n      vec2 uv = (2.0*(fragCoord.xy+vec2(i,j)/float(AA))-iResolution.xy)/iResolution.y;\n      uv *= zoom;\n      col += quasicrystal(uv,layers);\n    }\n  }\n  col /= float(AA*AA);\n  col = pow(col,vec3(0.8));\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "// const int KEY_ALT = 18;\n// const int KEY_PAGE_UP = 33;\n// const int KEY_PAGE_DOWN = 34;\n// const int KEY_LEFT = 37;\n// const int KEY_RIGHT = 39;\n// const int KEY_UP = 38;\n// const int KEY_DOWN = 40;\n\n// const int CHAR_0 = 48;\n\n// const int CHAR_A = 65;\n// const int CHAR_B = 66;\n// const int CHAR_C = 67;\n// const int CHAR_D = 68;\n// const int CHAR_E = 69;\n// const int CHAR_F = 70;\n// const int CHAR_G = 71;\n// const int CHAR_H = 72;\n// const int CHAR_I = 73;\n// const int CHAR_J = 74;\n// const int CHAR_K = 75;\n// const int CHAR_L = 76;\n// const int CHAR_M = 77;\n// const int CHAR_N = 78;\n// const int CHAR_O = 79;\n// const int CHAR_P = 80;\n// const int CHAR_Q = 81;\n// const int CHAR_R = 82;\n// const int CHAR_S = 83;\n// const int CHAR_T = 84;\n// const int CHAR_U = 85;\n// const int CHAR_V = 86;\n// const int CHAR_W = 87;\nconst int CHAR_X = 88;\n// const int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n#define keystate(code,n) ( texelFetch(iChannel3,ivec2(code,n),0) )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}