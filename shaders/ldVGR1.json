{
    "Shader": {
        "info": {
            "date": "1453324803",
            "description": "Forest fire cellular automata.\nhttps://en.wikipedia.org/wiki/Forest-fire_model",
            "flags": 32,
            "hasliked": 0,
            "id": "ldVGR1",
            "likes": 12,
            "name": "Forest fire",
            "published": 3,
            "tags": [
                "cellularautomata",
                "forestfire"
            ],
            "usePreview": 0,
            "username": "Impossible",
            "viewed": 1164
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec4 samp = texture(iChannel0,uv);\n    \n    fragColor = samp;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "#define PROB_TREE 0.1\n#define PROB_FIRE 0.0000001\n#define FIRE_TIME 5.0\n#define GROWTH_TIME 1.0\n#define BURN_THRESHOLD 0.15\n\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame==0)\n    {\n        fragColor = vec4(0.0);\n        return;\n    }\n    \n    vec2 uv = fragCoord / ( iResolution.xy);\n    vec4 current = texture(iChannel0, uv);   \n    vec4 outVal = current;\n\n    float prob = abs(rand(vec2(uv.x*iTime,uv.y*iTime)));\n    \n    if(current.x > 0.0)\n    {\n        outVal.x = max( 0.0, current.x - FIRE_TIME * iTimeDelta );\n    }\n    else if(current.y == 0.0 )\n    {\n        if(prob<PROB_TREE)\n        {\n            outVal.y = 0.25;\n        }\n    }\n    else if(current.y == 1.0 )\n    {\n        if(prob<PROB_FIRE)\n        {\n            outVal.x = 1.0;\n            outVal.y = 0.0;\n        }\n        else\n        {\n            vec4 neighborUp = texture(iChannel0, ( fragCoord + vec2(0.0,1.0) ) / (iResolution.xy));\n    \t\tvec4 neighborDown = texture(iChannel0, ( fragCoord + vec2(0.0,-1.0) ) / (iResolution.xy));\n\t  \t\tvec4 neighborLeft = texture(iChannel0, ( fragCoord + vec2(1.0,0.0) ) / (iResolution.xy ));\n     \t\tvec4 neighborRight = texture(iChannel0, ( fragCoord + vec2(-1.0,0.0) ) / (iResolution.xy));\n\n            \n            if(neighborUp.x > BURN_THRESHOLD || neighborDown.x > BURN_THRESHOLD || neighborRight.x > BURN_THRESHOLD || neighborLeft.x > BURN_THRESHOLD )\n            {\n                outVal.x = 1.0;\n                outVal.y = 0.0;\n            }\n        }\n        \n    }\n    else if(current.y > 0.0 )\n    {\n        outVal.y = min(1.0,current.y + GROWTH_TIME * iTimeDelta );\n    }\n    \n    fragColor = outVal;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}