{
    "Shader": {
        "info": {
            "date": "1692074783",
            "description": "Often debugging can be helped if numbers can be seen. This is a little boilerplate that can display a numbers (or text if bitmaps are given). Numbers are 10, 3 by 5 pixel black & white bitmaps . Click drag mouse button to see mouse coordinates displayed.",
            "flags": 0,
            "hasliked": 0,
            "id": "DtBczc",
            "likes": 9,
            "name": "Bitmapped text render.",
            "published": 3,
            "tags": [
                "bitmappedtext"
            ],
            "usePreview": 0,
            "username": "Blindman67",
            "viewed": 143
        },
        "renderpass": [
            {
                "code": "#define DIGIT_PX_SIZE 2.0 /* Bitmapped pixel render size */\n#define DIGIT_HEIGHT 5u   /* Bitmapped digit height */\n#define DIGIT_WIDTH 4u\n#define DIGIT_PX_WIDTH 3u /* Bitmapped digit width */\n#define DIGIT_COUNT 10u   /* Number of bitmapped digits */\n\n/* Bitmapped digits, low bit 0b1 is bottom left pixel, high bit 0b100_000_000_000_000 is top right pixel */\nuint digits[DIGIT_COUNT] = uint[](\n    0x7u + (0x5u << 3) + (0x5u << 6) + (0x5u << 9) + (0x7u << 12),  // digit 0\n    0x7u + (0x2u << 3) + (0x2u << 6) + (0x2u << 9) + (0x3u << 12),  // digit 1\n    0x7u + (0x1u << 3) + (0x2u << 6) + (0x4u << 9) + (0x7u << 12),  // digit 2\n    0x7u + (0x4u << 3) + (0x2u << 6) + (0x4u << 9) + (0x7u << 12),  // digit 3\n    0x4u + (0x7u << 3) + (0x5u << 6) + (0x1u << 9) + (0x1u << 12),  // digit 4\n    0x3u + (0x4u << 3) + (0x3u << 6) + (0x1u << 9) + (0x7u << 12),  // digit 5\n    0x2u + (0x5u << 3) + (0x3u << 6) + (0x1u << 9) + (0x6u << 12),  // digit 6\n    0x2u + (0x2u << 3) + (0x2u << 6) + (0x4u << 9) + (0x7u << 12),  // digit 7\n    0x7u + (0x5u << 3) + (0x2u << 6) + (0x5u << 9) + (0x7u << 12),  // digit 8\n    0x3u + (0x4u << 3) + (0x6u << 6) + (0x5u << 9) + (0x7u << 12)   // digit 9   \n);\nconst float invH = 1.0 / float(DIGIT_HEIGHT);\n\n/* Digit of number to display. eg 5 digits thus max number is 99999 */\n#define NUMBER_DIGITS 5u\nuint number[NUMBER_DIGITS];\n\n/* Bounding box size to contain NUMBER_DIGITS */\nconst vec2 size = vec2(\n    float(NUMBER_DIGITS) * DIGIT_PX_SIZE * float(DIGIT_WIDTH), \n    DIGIT_PX_SIZE * float(DIGIT_HEIGHT)\n);\n\n/* Used to avoid overhead of second number. */\nbool coordOnNum = false;\n\nvoid setNumber(uint num) {\n    uint i = NUMBER_DIGITS;\n    while (i-- > 0u) {\n        if (num > 0u) {\n            number[i] = num % 10u;\n            num /= 10u;\n        } else { number[i] = DIGIT_COUNT; }\n    }\n}    \nfloat drawNumber(vec2 px, vec4 boxed) {\n    if (px.x >= boxed.x && px.x < boxed.z && px.y >= boxed.y && px.y < boxed.w) {\n        coordOnNum = true;\n        uvec2 pos = uvec2((px - boxed.xy) / ((boxed.w - boxed.y) * invH));\n        uint idx = number[(pos.x >> 2) % DIGIT_COUNT];\n        if (idx < DIGIT_COUNT) {        \n            uint xBit = pos.x % DIGIT_WIDTH;\n            if (xBit < DIGIT_PX_WIDTH) {\n                uint yBit = (pos.y % (DIGIT_HEIGHT)) * DIGIT_PX_WIDTH;\n                bool bit = bool((digits[idx] >> (xBit + yBit)) & 1u);\n                return bit ? 1.0 : 0.0;\n            }\n        }\n    }    \n    return 0.0;\n}    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float p = 0.0;\n    setNumber(uint(iFrame) % 100000u);\n    p = drawNumber(fragCoord, vec4((iResolution.xy - size * 4.0) * 0.5,  (iResolution.xy + size * 4.0) * 0.5));\n    if (!coordOnNum) { /* if not on frame number */\n        setNumber(uint(iMouse.x));\n        vec2 mousePos = iMouse.xy;\n        p += drawNumber(fragCoord, vec4(mousePos, mousePos + size));\n        if (!coordOnNum) { /* if not on x coord number */\n            setNumber(uint(iMouse.y));        \n            mousePos += vec2(0, size.y + 2.0);\n            p += drawNumber(fragCoord, vec4(mousePos,  mousePos + size));\n        }\n    }\n    \n    fragColor = vec4(vec3(p), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}