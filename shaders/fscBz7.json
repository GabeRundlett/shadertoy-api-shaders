{
    "Shader": {
        "info": {
            "date": "1656193172",
            "description": "Purple an Green joining to build something amazing.",
            "flags": 0,
            "hasliked": 0,
            "id": "fscBz7",
            "likes": 5,
            "name": "Purple and Green",
            "published": 3,
            "tags": [
                "colors"
            ],
            "usePreview": 0,
            "username": "BigETI",
            "viewed": 300
        },
        "renderpass": [
            {
                "code": "//#define SCREENSHOT_MODE\n\nconst float minimalGridAxisCellCount = 5.0;\n\nstruct Cell\n{\n    vec4 color;\n    float movementSpeedMultiplier;\n};\n\nconst Cell cells[] =\n    Cell[]\n    (\n        Cell(vec4(1.0, 0.0, 1.0, 1.5), 3.0),\n        Cell(vec4(0.0, 1.0, 0.0, 1.5), 4.0),\n        Cell(vec4(1.0, 0.0, 1.0, 1.5), 2.0),\n        Cell(vec4(0.0, 1.0, 0.0, 1.5), 5.0),\n        Cell(vec4(1.0, 0.0, 1.0, 1.5), 1.0)\n    );\n\nconst float cellGlowSize = 0.0625;\n\nconst float cellGlowBoost = 2.0;\n\nconst vec3 skyColor = vec3(0.5, 0.25, 0.5);\n\nconst float e = 0.577215664901532860606512090082402431042159335;\n\n#if defined SCREENSHOT_MODE\nconst float screenshotTime = e * 2.0;\n#endif\n\nvec4 AlphaBlendColors(const vec4 baseColor, const vec4 appendColor)\n{\n    vec3 color = mix(baseColor.rgb, appendColor.rgb, appendColor.a);\n    return vec4(color.x, color.y, color.z, baseColor.a + ((1.0 - baseColor.a) * appendColor.a));\n}\n\nvec3 EmissionToRGB(const vec3 emissiveColor)\n{\n    vec3 ret = emissiveColor;\n    if (emissiveColor.r > 1.0)\n    {\n        float distribution = (emissiveColor.r - 1.0) * 0.5;\n        ret.g += distribution;\n        ret.b += distribution;\n    }\n    if (emissiveColor.g > 1.0)\n    {\n        float distribution = (emissiveColor.g - 1.0) * 0.5;\n        ret.r += distribution;\n        ret.b += distribution;\n    }\n    if (emissiveColor.b > 1.0)\n    {\n        float distribution = (emissiveColor.b - 1.0) * 0.5;\n        ret.r += distribution;\n        ret.g += distribution;\n    }\n    ret /= max(max(ret.r, ret.g), ret.b);\n    return ret;\n}\n\n\nvec4 DrawCell(const vec2 uv, vec4 emissiveColor, float glowSize, float glowBoost)\n{\n    vec4 ret;\n    float left = uv.y * 0.25;\n    float right = 0.75 + (uv.y * 0.25);\n    if\n    (\n        (uv.x >= (left - glowSize)) &&\n        (uv.x <= (right + glowSize)) &&\n        (uv.y >= -glowSize) &&\n        (uv.y <= 1.0)\n    )\n    {\n        float intensity =\n            (\n                (uv.x < left) ?\n                    (1.0 - ((left - uv.x) / glowSize)) :\n                    (\n                        (uv.x > right) ?\n                            (1.0 - ((uv.x - right) / glowSize)) :\n                            1.0\n                    )\n            ) *\n            (\n                (uv.y < 0.0) ?\n                    (1.0 - (-uv.y / glowSize)) :\n                    (\n                        (uv.x < left) ?\n                            1.0 :\n                            (\n                                (uv.x > right) ?\n                                    1.0 :\n                                    (uv.y / glowBoost)\n                            )\n                    )\n            ) * glowBoost;\n        vec3 color = EmissionToRGB(emissiveColor.rgb * emissiveColor.a * intensity);\n        ret.rgba = vec4(color.r, color.g, color.b, intensity * emissiveColor.a * (1.0 - uv.y));\n    }\n    return ret;\n}\n\nvoid mainImage(out vec4 fragmentColor, in vec2 fragmentCoordinates)\n{\n    vec2 uv = (fragmentCoordinates.xy - (iResolution.xy * 0.5)) / ((iResolution.x > iResolution.y) ? iResolution.y : iResolution.x);\n    fragmentColor = vec4(clamp(skyColor.r * uv.y, 0.0, 1.0), clamp(skyColor.g * uv.y, 0.0, 1.0), clamp(skyColor.b * uv.y, 0.0, 1.0), 1.0);\n#if defined SCREENSHOT_MODE\n    float y_movement = mod(screenshotTime, 1.0);\n#else\n    float y_movement = mod(iTime * 0.5, 1.0);\n#endif\n    float x_movement = y_movement * 0.25;\n    for (int cell_index = 0, x; cell_index < cells.length(); cell_index++)\n    {\n        Cell cell = cells[cell_index];\n        for (x = 0; x < 6; x++)\n        {\n            fragmentColor = AlphaBlendColors(fragmentColor, DrawCell(vec2((uv.x + x_movement * cell.movementSpeedMultiplier) * minimalGridAxisCellCount + (4.0 - float(cell_index) * 2.0) + 0.75 * 0.5 - (minimalGridAxisCellCount * 0.25) * float(x), (uv.y + y_movement * cell.movementSpeedMultiplier) * minimalGridAxisCellCount + (-1.5 + float(cell_index)) - minimalGridAxisCellCount * float(x)), cell.color, cellGlowSize, cellGlowBoost));\n        }\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}