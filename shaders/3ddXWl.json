{
    "Shader": {
        "info": {
            "date": "1573342488",
            "description": "derp",
            "flags": 0,
            "hasliked": 0,
            "id": "3ddXWl",
            "likes": 1,
            "name": "fractalskew",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "ArthurSango",
            "viewed": 288
        },
        "renderpass": [
            {
                "code": "vec2 skew (vec2 st) {\n    vec2 r = vec2(0.0);\n    r.x = 1.1547*st.x;\n    r.y = st.y+0.5*r.x;\n    return r;\n}\n#define t iTime\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    \t\n    \n  \n    vec3 col = vec3( 1.);\n    \n    uv = abs( uv * 2. - 1. );\n   uv = skew(uv);\n    vec2 iuv = uv;\n    \n   // uv = fract( 5.* abs(sin(iTime+1.) + 1.) * uv );\n     uv = fract( 5. * uv );\n     uv = skew(uv);\n    iuv *= mat2( sin(iTime), 0.,0., sin(iTime) );\n    \n     uv *= mat2( cos(t), sin(t), -sin(t), cos(t) );\n    \n    float d = distance( uv, iuv);\n    \n    float dt = dot( uv, iuv) * length(uv);\n\n    col.x = uv.y;\n    col.y = d;\n    \n\n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}