{
    "Shader": {
        "info": {
            "date": "1501431325",
            "description": "This bloom is extracted from my shaderpack: http://www.robobo1221.net/",
            "flags": 32,
            "hasliked": 0,
            "id": "lsBfRc",
            "likes": 143,
            "name": "Buffer pass bloom",
            "published": 3,
            "tags": [
                "2d",
                "triangle",
                "post",
                "circle",
                "postprocess",
                "square",
                "bloom",
                "red",
                "green",
                "blue",
                "dynamic",
                "process",
                "robobo1221"
            ],
            "usePreview": 1,
            "username": "robobo1221",
            "viewed": 16171
        },
        "renderpass": [
            {
                "code": "#define colorRange 24.0\n\nvec3 jodieReinhardTonemap(vec3 c){\n    float l = dot(c, vec3(0.2126, 0.7152, 0.0722));\n    vec3 tc = c / (c + 1.0);\n\n    return mix(c / (l + 1.0), tc, tc);\n}\n\nvec3 bloomTile(float lod, vec2 offset, vec2 uv){\n    return texture(iChannel1, uv * exp2(-lod) + offset).rgb;\n}\n\nvec3 getBloom(vec2 uv){\n\n    vec3 blur = vec3(0.0);\n\n    blur = pow(bloomTile(2., vec2(0.0,0.0), uv),vec3(2.2))       \t   \t+ blur;\n    blur = pow(bloomTile(3., vec2(0.3,0.0), uv),vec3(2.2)) * 1.3        + blur;\n    blur = pow(bloomTile(4., vec2(0.0,0.3), uv),vec3(2.2)) * 1.6        + blur;\n    blur = pow(bloomTile(5., vec2(0.1,0.3), uv),vec3(2.2)) * 1.9 \t   \t+ blur;\n    blur = pow(bloomTile(6., vec2(0.2,0.3), uv),vec3(2.2)) * 2.2 \t   \t+ blur;\n\n    return blur * colorRange;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color = pow(texture(iChannel0, uv).rgb * colorRange, vec3(2.2));\n    color = pow(color, vec3(2.2));\n    color += pow(getBloom(uv), vec3(2.2));\n    color = pow(color, vec3(1.0 / 2.2));\n    \n    color = jodieReinhardTonemap(color);\n    \n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n#define colorRange 24.0\n\nfloat getSquare(vec2 p, vec2 rp){\n    p *= vec2(iResolution.x, iResolution.y);\n    p /= max(iResolution.x, iResolution.y);\n        \n    p += rp;\n    vec2 bl = step(abs(p * 2.0 - 1.0),vec2(0.2));\n    float rt = bl.x * bl.y;\n    \n\treturn rt;\n}\n\nfloat getCircle(vec2 p, vec2 rp){\n\tp *= vec2(iResolution.x, iResolution.y);\n    p /= max(iResolution.x, iResolution.y);\n    \n    return step(distance(p, rp), 0.1);\n}\n\nfloat getTriangle(vec2 p, vec2 rp){\n    p *= vec2(iResolution.x, iResolution.y);\n    p /= max(iResolution.x, iResolution.y);\n    \n    p -= rp;\n\n    vec3 color = vec3(0.0);\n    float d = 0.0;\n\n    // Remap the space to -1. to 1.\n    p = p *2.-1.;\n\n    // Number of sides of your shape\n    int N = 3;\n\n    // Angle and radius from the current pixel\n    float a = atan(p.x,p.y)+PI;\n    float r = TWO_PI/float(N);\n\n    // Shaping function that modulate the distance\n    d = cos(floor(.5+a/r)*r-a)*length(p);\n\n    return 1.0-step(.12,d);\n}\n\nvec3 getTexture(vec2 uv){\n    vec4 textureSample = texture(iChannel0, uv);\n\treturn sqrt(textureSample.rgb * textureSample.a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / vec2(iResolution.x, iResolution.y);\n    \n    vec3 rectangle = getSquare(uv, vec2(-0.3, 0.21)) * vec3(2.0, 12.0, 30.0) * 2.0;\n    vec3 circle = getCircle(uv, vec2(0.2, 0.29)) * vec3(30.0, 12.0, 2.0) * 2.0;\n    vec3 triangle = getTriangle(uv, vec2(0.0, -0.23)) * vec3(2.0, 30.0, 2.0) * 2.0;\n    \n    vec3 color = rectangle + circle + triangle;\n    \n    //color = pow(getTexture(uv), vec3(2.2)) * 10.0;\n    \n    fragColor = vec4(pow(color, vec3(1.0 / 2.2)) / colorRange,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3 makeBloom(float lod, vec2 offset, vec2 bCoord){\n    \n    vec2 pixelSize = 1.0 / vec2(iResolution.x, iResolution.y);\n\n    offset += pixelSize;\n\n    float lodFactor = exp2(lod);\n\n    vec3 bloom = vec3(0.0);\n    vec2 scale = lodFactor * pixelSize;\n\n    vec2 coord = (bCoord.xy-offset)*lodFactor;\n    float totalWeight = 0.0;\n\n    if (any(greaterThanEqual(abs(coord - 0.5), scale + 0.5)))\n        return vec3(0.0);\n\n    for (int i = -5; i < 5; i++) {\n        for (int j = -5; j < 5; j++) {\n\n            float wg = pow(1.0-length(vec2(i,j)) * 0.125,6.0);\n\n            bloom = pow(texture(iChannel0,vec2(i,j) * scale + lodFactor * pixelSize + coord, lod).rgb,vec3(2.2))*wg + bloom;\n            totalWeight += wg;\n\n        }\n    }\n\n    bloom /= totalWeight;\n\n    return bloom;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n\tvec3 blur = makeBloom(2.,vec2(0.0,0.0), uv);\n\t\tblur += makeBloom(3.,vec2(0.3,0.0), uv);\n\t\tblur += makeBloom(4.,vec2(0.0,0.3), uv);\n\t\tblur += makeBloom(5.,vec2(0.1,0.3), uv);\n\t\tblur += makeBloom(6.,vec2(0.2,0.3), uv);\n\n    fragColor = vec4(pow(blur, vec3(1.0 / 2.2)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}