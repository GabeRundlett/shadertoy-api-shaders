{
    "Shader": {
        "info": {
            "date": "1670901030",
            "description": "raymarching with reflections",
            "flags": 0,
            "hasliked": 0,
            "id": "msBXDV",
            "likes": 11,
            "name": "Cubemap reflections",
            "published": 3,
            "tags": [
                "raymarching",
                "distancefield",
                "reflection",
                "phong",
                "sdf",
                "cube",
                "shadow",
                "sphere",
                "cubemap",
                "occlusion",
                "plane",
                "smoothminimum",
                "softshadow",
                "goursat",
                "occ"
            ],
            "usePreview": 0,
            "username": "SONENEIS",
            "viewed": 316
        },
        "renderpass": [
            {
                "code": "mat2 rot(float a){return mat2(cos(a),-sin(a),sin(a),cos(a));}\n\nfloat smin(float a,float b,float k){\n\tfloat h = clamp(0.5-0.5*(b-a)/k,0.0,1.0);\n\treturn mix(a,b,h) - k*h*(1.0-h);\n}\n\nfloat smax(float a,float b,float k){\n\tfloat h = clamp(0.5+0.5*(b-a)/k,0.0,1.0);\n\treturn mix(a,b,h) + k*h*(1.0-h);\n}\n\nfloat sdSphere(vec3 p,float r){\n\treturn length(p) - r;\n}\n\nfloat sdBox(vec3 p,vec3 b){\n\tvec3 q = abs(p) - b;\n\treturn length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdPlane(vec3 p,vec3 n,float d){\n\treturn dot(p,n) + d;\n}\n\nfloat sdCylinderInf(vec3 p,float r){\n\treturn length(p.xy) - r;\n}\n\nfloat scene(vec3 p){\n\tfloat d = 99999.99999;\n\n\td = min(d,mix(sdBox(p,vec3(0.4))-0.1,sdSphere(p,0.5),-1.0));\n  d = smax(d,-sdSphere(p,0.43),0.5);\n  d = min(d,sdSphere(p,0.5));\n\td = smin(d,sdPlane(p,vec3(0,1,0),0.5),0.25);\n\n\td = smin(d,sdSphere(p-vec3(1,-0.25,-1),0.3),0.05);\n\n\treturn d;\n}\n\nfloat raymarch(vec3 ro,vec3 rd){\n\tfloat d = 0.001;\n\n\tfor(int i=0;i<128;i++){\n\t\tvec3 p = ro + rd*d;\n\t\tfloat h = scene(p);\n\t\td += h*0.45;\n\t\tif(h < 0.001 || d > 20.0) break;\n\t}\n\n\tif(d > 20.0) return 20.0;\n\treturn d;\n}\n\nfloat calcSoftShadow(vec3 ro,vec3 rd,float k){\n\tfloat mint = 0.001;\n\tfloat tmax = 256.0;\n\n\tfloat res = 1.0;\n  float t = mint;\n  float ph = 1e10;\n\n  for(int i=0;i<512;i++){\n\t\tfloat h = scene(ro + rd*t);\n\n    float y = (i==0) ? 0.0 : h*h/(2.0*ph);\n    float d = sqrt(h*h-y*y);\n    res = min(res,k*d/max(0.0,t-y));\n    ph = h;\n\n    t += h*0.45;\n\n    if(res<0.0001 || t>tmax) break;\n  }\n\n  res = clamp(res,0.0,1.0);\n  return res*res*(3.0-2.0*res);\n}\n\nfloat calcAO(vec3 pos,vec3 nor){\n\tfloat occ = 0.0;\n\tfloat sca = 1.0;\n\n  for(int i=0;i<5;i++){\n    float h = 0.1*float(i)/10.0;\n    float d = scene(pos + h*nor);\n    occ += (h-d)*sca;\n    sca *= 0.95;\n    if(occ > 0.35) break;\n  }\n\n  return clamp(1.0-7.0*occ,0.0,1.0);\n}\n\nvec3 calcNormal(vec3 p){\n\tvec2 e = vec2(1,-1) * 0.001;\n\treturn normalize(vec3(\n\t\te.yyx * scene(p + e.yyx) +\n\t\te.xyy * scene(p + e.xyy) +\n\t\te.yxy * scene(p + e.yxy) +\n\t\te.xxx * scene(p + e.xxx)\n\t));\n}\n\nvoid mainImage(out vec4 fragColor,vec2 fragCoord){\n  vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  vec3 col = vec3(0.0);\n\n  vec3 ro = vec3(0.0,0.0,3.0);\n  vec3 rd = normalize(vec3(uv,-2.0));\n\n  ro.y += 1.0;\n  rd.yz *= rot(-0.25);\n\n  ro.xz *= rot(iTime*0.5);\n  rd.xz *= rot(iTime*0.5);\n\n  vec3 bg = vec3(0.7,0.8,1.0);\n  //vec3 bg = 0.5+mix(vec3(0.2,0.1,0.05),vec3(0.1,0.5,1.0),clamp(rd.y*0.5+0.25,0.0,1.0));\n  //bg = pow(clamp(bg,0.0,1.0),vec3(1.5))*1.0+0.5;\n\n  float d = raymarch(ro,rd);\n  if(d > 0.0 && d < 20.0){\n  \tvec3 pos = ro + rd*d;\n  \tvec3 nor = calcNormal(pos);\n  \tvec3 mate = vec3(0.0);\n  \tvec3 ref = reflect(rd,nor);\n  \tfloat occ = calcAO(pos,nor);\n\n    //mate = 0.2*vec3(1.0);\n  \tmate = clamp(texture(iChannel0,ref).rgb,0.0,1.0);\n  \t//mate *= vec3(1.0,0.7,0.5);\n  \t//mate += vec3(1.0,0.7,0.5);\n\n    mate = pow(mate,vec3(2.2));\n    mate *= pow(bg,vec3(2.2));\n    //mate *= bg;\n\n  \t{\n  \t\tvec3 lig = normalize(vec3(0.5));\n  \t\tfloat dif = clamp(dot(nor,lig),0.0,1.0);\n  \t\tfloat spe = 2.0*pow(clamp(dot(ref,lig),0.0,1.0),10.0);\n  \t  dif *= calcSoftShadow(pos,lig,8.0);\n  \t  col += mate * dif;\n  \t  spe *= calcSoftShadow(pos,ref,4.0);\n  \t  col += mate * 5.0*spe * dif;\n  \t  col += clamp(0.001*pow(spe,10.0),0.0,1.0) * dif;\n  \t}\n\n  \t{\n  \t\tfloat dif = clamp(nor.y*0.5+0.5,0.0,1.0);\n  \t\tfloat spe = clamp(ref.y*0.5+0.5,0.0,1.0);\n  \t  col += 0.05 * mate * vec3(0.2,0.4,1.0) * dif;\n  \t  spe *= calcSoftShadow(pos,ref,1.0);\n  \t  col += 0.05 * vec3(0.2,0.4,1.0) * spe;\n  \t}\n\n   col = clamp(col,0.0,1.0) * occ*occ*occ;\n  }\n\n  col = clamp(pow(col,vec3(1.0/2.2)),0.0,1.0);\n\n  col = mix(col,clamp(texture(iChannel0,rd).rgb*bg,0.0,1.0),clamp(0.000001*d*d*d*d*d,0.0,1.0));\n\n  fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}