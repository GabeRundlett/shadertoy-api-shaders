{
    "Shader": {
        "info": {
            "date": "1563206417",
            "description": "inspired by https://www.reddit.com/r/IndieDev/comments/9wpia9/speed_boosts_breaking_space_time/",
            "flags": 0,
            "hasliked": 0,
            "id": "WllSDM",
            "likes": 76,
            "name": "Neon road",
            "published": 3,
            "tags": [
                "3d",
                "volume",
                "raymarch",
                "glow"
            ],
            "usePreview": 0,
            "username": "kaneta",
            "viewed": 4472
        },
        "renderpass": [
            {
                "code": "#define repid(p, r) (floor((p + r*.5) / r))\n#define rep(p, r) (mod(p - r*.5, r) - r*.5)\n\n// Volumetric pointlight by robobo1221\n// https://www.shadertoy.com/view/lstfR7\nfloat bayer2(vec2 a){\n    a = floor(a);\n    return fract( dot(a, vec2(.5, a.y * .75)) );\n}\n\n#define bayer4(a)   (bayer2( .5*(a))*.25+bayer2(a))\n#define bayer8(a)   (bayer4( .5*(a))*.25+bayer2(a))\n#define bayer16(a)  (bayer8( .5*(a))*.25+bayer2(a))\n\nconst float pi = acos(-1.0);\nconst float pi2 = pi*2.;\n\nmat2 rot(float a) {\n\tfloat c = cos(a), s = sin(a);\n    return mat2(c,s,-s,c);\n}\n\nvec2 pmod(vec2 p, float r) {\n\tfloat a = pi/r - atan(p.x, p.y);\n    float n = pi2/r;\n    a = floor(a/n) * n;\n    return p * rot(a);\n}\n\nfloat sdHex(vec3 p, vec2 h, float r)\n{\n    p.zy = p.yz;\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// http://mercury.sexy/hg_sdf/\nfloat ost(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2. * s)) - s)));\n}\n\nfloat sdFloor(vec3 p) {\n    vec2  hx = vec2(1.73205081,1)*1.04;\n    vec3  q = p;\n    q.xz = mod(p.xz + hx*0.5, hx)-hx*0.5;\n\tfloat d = sdHex(q, vec2(0.5, 1.0), 0.04);\n    q.xz = mod(p.xz, hx)-hx*0.5;\n    d = min(d, sdHex(q, vec2(0.5, 1.0), 0.04));\n    return d;\n}\n\nfloat sdWall(vec3 p) {\n\tvec3 q = p;\n    \n    // wall\n    float d = -(abs(p.x) - 8.);\n    \n    // square\n    q = p;\n    q.z = rep(q.z, 240.);\n    d = max(d, -sdHex(q, vec2(40., 100.), 0.0));\n    \n    // pillars\n    vec3 pp = p;\n    pp.z = rep(pp.z, 240.);\n    \n    q.x = abs(q.x) - 7.;\n    q.z = rep(q.z, 20.);\n    q = abs(q) - 1.0;\n    // clipping pillars in square\n    d = min(d, max(max(q.x, q.z), -(abs(pp.z) - 40. + 5.0)));\n    \n\treturn d;\n}\n\nfloat sdSquareObjects(vec3 p, float r, out float id) {\n\tvec3 q = p;\n    \n    q.z = rep(q.z, 240.);\n    vec3 pp = q;\n    q.xz *= rot(pi / 6.);\n    q.xz = pmod(q.xz, 6.);\n    q.z -= 15.;\n    \n    id = repid(q.z, 15.);\n    q.z = rep(q.z, 15.);\n    float d = length(q.xz) - r;\n    d = max(d, -length(pp.xz) + 15. - r);\n    return d;\n}\n\nfloat tt;\n\nfloat sdSquareFrame(vec3 p) {\n    float id;\n    float d = sdSquareObjects(p, 1.5 + 1., id);\n    d = max(d, -(abs(p.y - 13.) - (1.0 - exp(sin(tt * 5. - id * 1.25)*5.)/exp(5.)) * 5.));\n    return d;\n}\n\nfloat sdSquareEmission(vec3 p) {\n    float id;\n\tfloat d = sdSquareObjects(p, 1.5, id);\n    d = max(d, (abs(p.y - 13.) - (1.0 - exp(sin(tt * 5. - id * 1.25)*5.)/exp(5.)) * 5.));\n    return d;\n}\n\nfloat sdCeil(vec3 p) {\n\treturn -(p.y - 30.0);\n}\n\nfloat map(vec3 p) {\n    float d = sdFloor(p);\n\n    d = ost(d, sdWall(p), 1.0, 5.0);\n    \n    d = min(d, sdSquareFrame(p));\n    \n    d = min(d, sdCeil(p));\n\n    return d;\n}\n\nvec4 volumeMap0(vec3 p) {\n    vec3 q = p;\n    q.z = rep(q.z, 30.);\n    q.y -= 2.;\n    float d = length(q.zy) - .5;\n    return vec4(vec3(1., 0.001, .1) * .25, d);\n}\n\nvec4 volumeMap1(vec3 p) {\n    vec3 q = p;\n    q.z = rep(q.z, 30.);\n    q.z += 15.;\n    q.y -= 20.;\n    float d = length(q.zy) - .5;\n    return vec4(vec3(.01, 0.01, 1.0) * .4, d);\n}\n\nvec4 volumeMap2(vec3 p) {\n    vec3 q = p;\n    q.z = rep(q.z, 20.);\n    q.y -= 12.;\n    q.x = abs(q.x) - 6.;\n    float d = max(length(q.xy) - .25, abs(q.z) - 3.0);\n    return vec4(vec3(.01, 0.01, 1.0) * .3, d);\n}\n\nvec4 volumeMap3(vec3 p) {\n\tfloat d = sdSquareEmission(p);\n    return vec4(vec3(1., 0.01, 0.001) * .2, d);\n}\n\nvec3 volumetric(vec3 p, vec3 ray, int slice, float depth, float dither) {\n    vec3 ret = vec3(0.);\n    \n    float sd = depth / float(slice);\n    float t = 0.05 + sd * dither;\n    vec4 d;\n    for(int i = 0; i < slice; i++) {\n        vec3 pos = p + ray * t;\n        d = volumeMap0(pos);\n        float dd = max(0.01, d.w);\n        ret += (d.rgb*sd) / (dd * dd);\n        \n        d = volumeMap1(pos);\n        dd = max(0.01, d.w);\n        ret += (d.rgb*sd) / (dd * dd);\n        \n        d = volumeMap2(pos);\n        dd = max(0.01, d.w);\n        ret += (d.rgb*sd) / (dd * dd);\n        \n        d = volumeMap3(pos);\n        dd = max(0.01, d.w);\n        ret += (d.rgb*sd) / (dd * dd);\n        \n        t += sd;\n    }\n    return ret;\n}\n\nvoid trace(vec3 p, vec3 ray, int iter, out vec3 pos, out float t) {\n    t = .1;\n    for(int i=0; i<iter; i++) {\n    \tpos = p + ray * t;\n        float d = map(pos);\n        if (d < 0.0001) {\n            break;\n        }\n        t += d;\n    }\n}\n\nvec3 acesFilm(const vec3 x) {\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return clamp((x * (a * x + b)) / (x * (c * x + d ) + e), 0.0, 1.0);\n}\n\nfloat n3(vec3 p) {\n\tvec3 r = vec3(1, 99, 999);\n\tvec4 s = dot(floor(p), r) + vec4(0., r.yz, r.y + r.z);\n\tp = smoothstep(0., 1., fract(p));\n\tvec4 a = mix(fract(sin(s)*5555.), fract(sin(s+1.)*5555.), p.x);\n\tvec2 b = mix(a.xz, a.yw, p.y);\n\treturn mix(b.x, b.y, p.z);\n}\n\nvec3 normal(vec3 p) {\n\tvec2 e = vec2(1., -1.) * 0.001; // 0.005;\n    return normalize(e.xyy * map(p + e.xyy) + e.yxy * map(p + e.yxy) + e.yyx * map(p + e.yyx) + e.xxx * map(p + e.xxx));\n}\n\nvec3 applyFog(vec3 col, float depth) {\n    float fog = 1.0 - exp(-depth * 0.0003);\n    col = mix(vec3(col), vec3(1.0, 1.05, 1.8) * 10., fog);\n    return col;\n}\n\nvec3 getCol(inout vec3 p, vec3 ray, int titer, int viter, float vd, float dither) {\n    vec3 col, pos;\n    float depth;\n    trace(p, ray, titer, pos, depth);\n    col += volumetric(p, ray, viter, min(depth, vd), dither);\n    p = pos;\n    return applyFog(col, depth);\n}\n\nfloat stepup(float t, float len, float smo)\n{\n    float tt = mod(t += smo, len);\n    float stp = floor(t / len) - 1.0;\n    return smoothstep(0.0, smo, tt) + stp;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    float nois = (n3(vec3(normalize(p)*20., 1.0)) * 1.0 + n3(vec3(normalize(p)*40., 2.0)) * 1.5  + n3(vec3(normalize(p)*100., 3.0)) * 1.5) / 3.5;\n    nois = pow(nois, 4.0) * 2.0 - 1.0;\n    \n    tt = iTime + (nois * 0.009 + n3(vec3(p*500., 0.0)) * 0.004) * pow(dot(p, p), 0.6) * 1.;\n    \n    float speed = tt * 100.;\n    \n    //speed = stepup(tt, 1.0, 0.5) * 80.;\n\n    vec3 ro = vec3(0., 7., -5. + speed);\n    vec3 ray = normalize(vec3(p, 1.4 + (1.0 - dot(p, p)) * 0.15));\n    //ray.xy *= rot(stepup(tt-0.5, 4.0, 0.1) * pi * 0.5);\n    \n    float dither = bayer16(gl_FragCoord.xy);\n    vec3 col = getCol(ro, ray, 99, 120, 300., dither);\n\n    vec3 n = normal(ro);\n    ray = reflect(ray, n);\n    col += getCol(ro, ray, 60, 70, 100., dither) * 0.2;\n\n    n = normal(ro);\n    ray = reflect(ray, n);\n    col += getCol(ro, ray, 40, 40, 100., dither) * 0.04;\n\n    col = acesFilm(col*0.5);\n    \n    col = pow(col, vec3(1./2.2));\n    \n    p = fragCoord.xy / iResolution.xy;\n    p *=  1.0 - p.yx;\n    float vig = p.x*p.y * 30.0;\n    vig = pow(vig, 0.1);\n\n    fragColor = vec4(col * vig,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}