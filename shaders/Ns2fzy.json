{
    "Shader": {
        "info": {
            "date": "1646573127",
            "description": "Path tracing the kleinian fractal from Jos Leys & Knighty [url]https://www.shadertoy.com/view/XlVXzh[/url]\n\nI've attempted 'focus stacking' to widen the focal plane, so objects near the camera stay in focus, but allowing a large blur in the background.",
            "flags": 32,
            "hasliked": 0,
            "id": "Ns2fzy",
            "likes": 109,
            "name": "Kleinian Seahorse",
            "published": 3,
            "tags": [
                "fractal",
                "pathtrace",
                "kleinian"
            ],
            "usePreview": 0,
            "username": "tdhooper",
            "viewed": 4153
        },
        "renderpass": [
            {
                "code": "vec3 aces(vec3 x) {\n  const float a = 2.51;\n  const float b = 0.03;\n  const float c = 2.43;\n  const float d = 0.59;\n  const float e = 0.14;\n  return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec4 tex = texelFetch(iChannel0, ivec2(fragCoord.xy), 0);\n    vec3 col = tex.rgb / tex.a;\n\n    col = aces(col);\n    col = pow( col, vec3(1./2.2) );\n    \n    fragColor = vec4(col, 1);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int MAX_BOUNCE = 3; // Try 6 if you have the power\nconst float UNDERSTEP = .5;\nconst float BOUNCE_UNDERSTEP = 1.;\n\n//#define DEBUG\n\n#define PI 3.14159265359\n\n// Dave_Hoskins https://www.shadertoy.com/view/4djSRW\nvec2 hash22(vec2 p)\n{\n    p += 1.61803398875; // fix artifacts when reseeding\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n// Dave_Hoskins https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// iq https://www.shadertoy.com/view/tl23Rm\nvec2 rndunit2(vec2 seed ) {\n    vec2 h = seed * vec2(1,6.28318530718);\n    float phi = h.y;\n    float r = sqrt(h.x);\n\treturn r*vec2(sin(phi),cos(phi));\n}\n\n\n// Spectrum palette, iq https://www.shadertoy.com/view/ll2GD3\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 spectrum(float n) {\n    return pal( n, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n}\n\n\n// Kleinian group distance estimator\n// Jos Leys & Knighty https://www.shadertoy.com/view/XlVXzh\n\nvec2 box_size = vec2(-0.40445, 0.34) * 2.;\n\n//sphere inversion\nbool SI=true;\nvec3 InvCenter=vec3(0,1,1);\nfloat rad=.8;\n\nvec2 wrap(vec2 x, vec2 a, vec2 s){\n    x -= s; \n    return (x - a * floor(x / a)) + s;\n}\n\nvoid TransA(inout vec3 z, inout float DF, float a, float b){\n\tfloat iR = 1. / dot(z,z);\n\tz *= -iR;\n\tz.x = -b - z.x; z.y = a + z.y; \n\tDF *= iR;//max(1.,iR);\n}\n\nvec4 JosKleinian(vec3 z)\n{\n    float t = 0.;\n\n    float KleinR = 1.5 + .39;\n    float KleinI = (.55 * 2. - 1.);\n    vec3 lz=z+vec3(1.), llz=z+vec3(-1.);\n    float d=0.; float d2=0.;\n\n    if (SI) {\n        z=z-InvCenter;\n        d=length(z);\n        d2=d*d;\n        z=(rad*rad/d2)*z+InvCenter;\n    }\n\n    vec3 orbitTrap = vec3(1e20);\n\n    float DE = 1e12;\n    float DF = 1.;\n    float a = KleinR;\n    float b = KleinI;\n    float f = sign(b) * .45;     \n    for (int i = 0; i < 80 ; i++) \n    {\n        z.x += b / a * z.y;\n        z.xz = wrap(z.xz, box_size * 2., -box_size);\n        z.x -= b / a * z.y;\n\n        //If above the separation line, rotate by 180° about (-b/2, a/2)\n        if  (z.y >= a * 0.5 + f *(2.*a-1.95)/4. * sign(z.x + b * 0.5)* (1. - exp(-(7.2-(1.95-a)*15.)* abs(z.x + b * 0.5))))\t\n        {z = vec3(-b, a, 0.) - z;}\n\n        //Apply transformation a\n        TransA(z, DF, a, b);\n\n        //If the iterated points enters a 2-cycle , bail out.\n        if(dot(z-llz,z-llz) < 1e-5) {break;}\n\n        //Store prévious iterates\n        llz=lz; lz=z;\n\n        orbitTrap = min(orbitTrap, z);\n    }\n\n    float y =  min(z.y, a - z.y);\n    DE = min(DE, min(y, .3) / max(DF, 2.));\n    if (SI) {\n        DE = DE * d2 / (rad + d * DE);\n    }\n\n    return vec4(DE, orbitTrap);\n}\n\n\n//========================================================\n// Modelling\n//========================================================\n\nstruct Material {\n    vec3 albedo;\n    float specular;\n    float roughness;\n};\n\nstruct Model {\n    float d;\n    vec3 uvw;\n    vec3 albedo;\n    int id;\n};\n\nMaterial shadeModel(Model model, inout vec3 nor) {\n    float spec = 0.;\n    float rough = 0.;\n    vec3 col = spectrum(clamp(model.albedo.y * 2., 0., 1.)) * mix(1., 3., smoothstep(0., .4, model.albedo.y));\n    return Material(col, spec, rough);\n}\n\nModel map(vec3 p) {\n    p += vec3(-.86,1.16,1.76);\n    vec4 res = JosKleinian(p);\n    float d = res.x;\n    vec3 orbitTrap = res.yzw;\n    return Model(d, p, orbitTrap, 1);\n}\n\n\n//========================================================\n// Rendering\n//========================================================\n\nvec3 sunPos = normalize(vec3(-.1,1.5,-.5)) * 100.;\nvec3 skyColor = vec3(0.50,0.70,1.00);\nvec3 sunColor = vec3(8.10,6.00,4.20) * 1.5;\n\nvec3 env(vec3 dir) {\n    vec3 col = mix(vec3(.5,.7,1) * .0, vec3(.5,.7,1) * 1., smoothstep(-.2, .2, dot(dir, normalize(vec3(.5,1.,-.5)))));\n    return col;\n}\n\nvec3 calcNormal( in vec3 p ) // for function f(p)\n{\n    const float eps = 0.0001; // or some other value\n    const vec2 h = vec2(eps,0);\n    return normalize( vec3(map(p+h.xyy).d - map(p-h.xyy).d,\n                           map(p+h.yxy).d - map(p-h.yxy).d,\n                           map(p+h.yyx).d - map(p-h.yyx).d ) );\n}\n\nstruct Hit {\n    Model model;\n    vec3 pos;\n    float rayLength;\n};\n\nHit march(vec3 origin, vec3 rayDirection, float maxDist, float understep) {\n\n    vec3 rayPosition;\n    float rayLength, dist = 0.;\n    Model model;\n\n    for (int i = 0; i < 400; i++) {\n        model = map(rayPosition);\n        rayLength += model.d * understep;\n        rayPosition = origin + rayDirection * rayLength;\n\n        if (model.d < .00002) break;\n\n        if (rayLength > maxDist) {\n            model.id = 0;\n            break;\n        }\n    }\n    \n    return Hit(model, rayPosition, rayLength);\n}\n\n// tracing/lighting setup from yx\n// https://www.shadertoy.com/view/ts2cWm\nvec3 ortho(vec3 a){\n    vec3 b=cross(vec3(-1,-1,.5),a);\n    // assume b is nonzero\n    return (b);\n}\n\n// re-borrowed from yx from\n// http://blog.hvidtfeldts.net/index.php/2015/01/path-tracing-3d-fractals/\nvec3 getSampleBiased(vec3 dir, float power, vec2 seed) {\n\tdir = normalize(dir);\n\tvec3 o1 = normalize(ortho(dir));\n\tvec3 o2 = normalize(cross(dir, o1));\n\tvec2 r = seed;\n\tr.x=r.x*2.*PI;\n\tr.y=pow(r.y,1.0/(power+1.0));\n\tfloat oneminus = sqrt(1.0-r.y*r.y);\n\treturn cos(r.x)*oneminus*o1+sin(r.x)*oneminus*o2+r.y*dir;\n}\n\nvec3 getConeSample(vec3 dir, float extent, vec2 seed) {\n\tdir = normalize(dir);\n\tvec3 o1 = normalize(ortho(dir));\n\tvec3 o2 = normalize(cross(dir, o1));\n\tvec2 r =  seed;\n\tr.x=r.x*2.*PI;\n\tr.y=1.0-r.y*extent;\n\tfloat oneminus = sqrt(1.0-r.y*r.y);\n\treturn cos(r.x)*oneminus*o1+sin(r.x)*oneminus*o2+r.y*dir;\n}\n\nvec3 sampleDirect(Hit hit, vec3 nor, vec3 throughput, inout vec2 seed) {\n    vec3 col = vec3(0);\n    vec3 lightDir = (sunPos - hit.pos);\n    vec3 lightSampleDir = getConeSample(lightDir, .0005, seed);\n    seed = hash22(seed);\n    float diffuse = dot(nor, lightSampleDir);\n    vec3 shadowOrigin = hit.pos + nor * (.0002 / abs(dot(lightSampleDir, nor)));\n    if (diffuse > 0.) {\n        Hit sh = march(shadowOrigin, lightSampleDir, 1., BOUNCE_UNDERSTEP);\n        if (sh.model.id == 0) {\n            col += throughput * sunColor/10. * diffuse;\n        }\n    }\n    return col;\n}\n\nconst float sqrt3 = 1.7320508075688772;\n\n// main path tracing loop, based on yx's\n// https://www.shadertoy.com/view/ts2cWm\n// with a bit of demofox's\n// https://www.shadertoy.com/view/WsBBR3\nvec4 draw(vec2 fragCoord, int frame) {\n\n    vec2 p = (-iResolution.xy + 2.* fragCoord) / iResolution.y;\n    \n    vec2 seed = hash22(fragCoord + (float(frame)) * sqrt3);\n    \n    // jitter for antialiasing\n    p += 2. * (seed - .5) / iResolution.xy;\n\n    p *= .85;\n\n    vec3 col = vec3(0);\n\n    float focalLength = 3.;\n    vec3 camPos = vec3(-.8346,-.1214,-.4026);\n    vec3 camTar = vec3(0,-.02,-.04);\n    \n    vec3 ww = normalize(camTar - camPos);\n    vec3 uu = normalize(cross(vec3(1,.45,0),ww));\n    vec3 vv = normalize(cross(ww,uu));\n    mat3 camMat = mat3(-uu, vv, ww);\n    \n    float rayLength = 0.;\n    \n    vec3 rayDir = normalize(camMat * vec3(p.xy, focalLength));\n    vec3 origin = camPos;\n    \n    Hit hit;\n    \n    #ifdef DEBUG\n        hit = march(origin, rayDir, 30., UNDERSTEP);\n        if (hit.model.id == 0) {\n            return vec4(0);\n        } else {\n            vec3 nor = calcNormal(hit.pos);\n            //vec3 col = nor * .5 + .5;\n            vec3 col = shadeModel(hit.model, nor).albedo;\n            col *= dot(nor, normalize(vec3(0,1,-1))) * .5 + .5;\n            float fog = 1. - exp((hit.rayLength - .5) * -2.);\n            col = mix(col, vec3(0), clamp(fog, 0., 1.)); \n            return vec4(col, 1.);\n        }\n    #endif\n    \n    // Focus Stacking (with help from @Aliatraces)\n    // Do an initial march with no circle of confusion but stop at the focal plane,\n    // if we hit something, continue as normal,\n    // if we don't hit anything, add a circle of confusion to the ray direction before continuing\n\n    float focalPointDist = distance(camPos, camTar) * 1.1;\n    float focalPlaneDist = dot(camMat[2], rayDir) * focalPointDist;\n    hit = march(origin, rayDir, focalPlaneDist, UNDERSTEP);\n    if (hit.model.id == 0)\n    {\n        vec3 rayFocalPoint = origin + rayDir * focalPlaneDist;\n        origin += camMat * vec3(rndunit2(seed), 0.) * .033;\n        rayDir = normalize(rayFocalPoint - origin);\n        origin = hit.pos;\n        rayLength += hit.rayLength;\n        hit = march(origin, rayDir, 30., UNDERSTEP);\n    }\n\n    vec3 nor, ref;\n    Material material;\n    vec3 throughput = vec3(1);\n    vec3 bgCol = vec3(0.);\n    \n    for (int bounce = 0; bounce < MAX_BOUNCE; bounce++) {\n   \n        if (bounce > 0) {\n            hit = march(origin, rayDir, 1., BOUNCE_UNDERSTEP);\n        }\n       \n        if (hit.model.id == 0)\n        {\n            if (bounce > 0)\n            {\n                col += env(rayDir) * throughput;\n            }\n            if (bounce == 0)\n            {\n                col = bgCol;\n            }\n            break;\n        }\n\n        rayLength += hit.rayLength;\n\n        nor = calcNormal(hit.pos);\n        material = shadeModel(hit.model, nor);\n        \n        // update the colorMultiplier\n        throughput *= material.albedo;\n\n        // Calculate diffuse ray direction\n        seed = hash22(seed);\n        vec3 diffuseRayDir = getSampleBiased(nor, 1., seed);\n\n        seed = hash22(seed);\n        col += sampleDirect(hit, nor, throughput, seed);\n        rayDir = diffuseRayDir;\n    \n        // offset from sufrace https://www.shadertoy.com/view/lsXGzH\n        origin = hit.pos + nor * (.0002 / abs(dot(rayDir, nor)));\n    }\n\n    float fog = 1. - exp((rayLength - focalPointDist) * -1.);\n    col = mix(col, bgCol, clamp(fog, 0., 1.)); \n\n    return vec4(col, 1);\n}\n\n//#define ONE_SHOT\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec4 col = draw(fragCoord, iFrame);\n\n    #ifndef ONE_SHOT\n    if (iFrame > 0) {\n        vec4 lastCol = texelFetch(iChannel0, ivec2(fragCoord.xy), 0);\n        col += lastCol;\n    }\n    #endif\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}