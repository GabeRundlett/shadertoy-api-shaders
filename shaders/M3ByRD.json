{
    "Shader": {
        "info": {
            "date": "1727037536",
            "description": " a try of imitating the youtube countdown\nsry for the ugly coding ",
            "flags": 0,
            "hasliked": 0,
            "id": "M3ByRD",
            "likes": 6,
            "name": "youtube premiere countdown ",
            "published": 3,
            "tags": [
                "mimic",
                "imitate"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 87
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy-iResolution.xy*.5)/min(iResolution.x, iResolution.y);\n\n    float n_t = fract(iTime*(1./10.))*10.;\n    float n_idx_t = floor(n_t);\n    float n_tf = fract(n_t);\n    float n_tau = radians(360.);\n    float n_amp = 0.125;\n    \n    int a_nc[] = int[](\n        0x00ffe6,\n        0x0039f8,\n        0xf2f531,\n        0xff35d9,\n        0x00bb18,\n        0xee5b00,\n        0x7134a0,\n        0xeabe00,\n        0x00d9e4,\n        0xff0200,\n        0x535353\n    );\n    float noft = 0.2;\n    vec2 ouvs = abs(uv+vec2(0., noft));\n    vec2 oc = clamp(ouvs, 0.0, .5);\n    float n_dsqr = max(oc.x,oc.y);\n    float n_its = 20.;\n    float n2 = n_dsqr*n_its;\n    float n_idx = floor(n2);\n    float n_idx_nor = (n_idx/n_its)*2.;\n    float n_bmask = 1.-step(.5, n_dsqr);\n    float nf = fract(n2);\n    float n_shadow = 1.-nf;\n    \n    n_shadow = smoothstep(-1., .5, n_shadow);\n    int nc = a_nc[int(n_idx_t)];\n    vec3 ocol = vec3(\n        float((nc >> (8*2)) & 255) / 255.,\n        float((nc >> (8*1)) & 255) / 255.,\n        float((nc >> (8*0)) & 255) / 255.\n    );\n    vec3 o_hsl = rgb2hsl(ocol);\n    o_hsl[2] = .5+(1.-n_idx_nor)*0.1;\n\n    vec3 o_rgb = hsl2rgb(\n        o_hsl\n    );\n    o_rgb *= n_shadow;\n    \n    float nt2 = pow(fract(iTime),1.5);\n    o_rgb *= 0.5+(1.-n_idx_nor)-(nt2*1.5);//nt2;\n    //o_rgb = vec3(n_idx_nor-nt2);\n    //o_rgb = vec3(n_shadow);\n    \n    float num = 9.-n_idx_t;\n    float nz = 1.2;\n    vec2 ouv1 = (uv+vec2(0., -.0)*nz)*nz+(0.5);\n\n    float n_num = texture(iChannel0, (clamp(ouv1, 0., 1.)+vec2(num,12.))/vec2(16.)).w;\n    n_num = smoothstep(0.499, .51, n_num);\n    n_num = n_num*n_bmask+(1.-n_bmask);\n    vec2 ouv2 = vec2(ouv1.x, 1.-ouv1.y-.52);\n    float n_num_shadow = texture(\n        iChannel0,\n        (clamp(ouv2, 0., 1.)+vec2(num,12.))/vec2(16.)\n   ).w;\n    n_num_shadow = smoothstep(0.48, .52, n_num_shadow);\n    n_num_shadow = n_num_shadow*n_bmask+(1.-n_bmask);\n    o_rgb *= n_bmask;\n    if(uv.y < -noft){\n        // cheap pseudo blur\n        float nd = (length(ouvs+vec2(0., nt2*.9-.1))*1.7);\n        o_rgb = vec3(ocol*(1.-nd));\n    }\n    fragColor = vec4(o_rgb, 1.);\n    fragColor *= n_num;\n    fragColor *= (n_num_shadow+(1.-n_num_shadow)*.5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec3 HueShift (in vec3 Color, in float Shift)\n{\n    vec3 P = vec3(0.55735)*dot(vec3(0.55735),Color);\n    \n    vec3 U = Color-P;\n    \n    vec3 V = cross(vec3(0.55735),U);    \n\n    Color = U*cos(Shift*6.2832) + V*sin(Shift*6.2832) + P;\n    \n    return vec3(Color);\n}\n\nvec3 rgb2hsl( in vec3 c ){\n  float h = 0.0;\n\tfloat s = 0.0;\n\tfloat l = 0.0;\n\tfloat r = c.r;\n\tfloat g = c.g;\n\tfloat b = c.b;\n\tfloat cMin = min( r, min( g, b ) );\n\tfloat cMax = max( r, max( g, b ) );\n\n\tl = ( cMax + cMin ) / 2.0;\n\tif ( cMax > cMin ) {\n\t\tfloat cDelta = cMax - cMin;\n        \n        //s = l < .05 ? cDelta / ( cMax + cMin ) : cDelta / ( 2.0 - ( cMax + cMin ) ); Original\n\t\ts = l < .0 ? cDelta / ( cMax + cMin ) : cDelta / ( 2.0 - ( cMax + cMin ) );\n        \n\t\tif ( r == cMax ) {\n\t\t\th = ( g - b ) / cDelta;\n\t\t} else if ( g == cMax ) {\n\t\t\th = 2.0 + ( b - r ) / cDelta;\n\t\t} else {\n\t\t\th = 4.0 + ( r - g ) / cDelta;\n\t\t}\n\n\t\tif ( h < 0.0) {\n\t\t\th += 6.0;\n\t\t}\n\t\th = h / 6.0;\n\t}\n\treturn vec3( h, s, l );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}