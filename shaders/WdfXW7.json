{
    "Shader": {
        "info": {
            "date": "1551376683",
            "description": "Actually it's \"Joan of Arc versus Terry Tangent\" - Shader showdown practice session 009.\nLive coded on Twitch with 25 minutes time limit.\nPracticing live on TWITCH every Tuesdays around 21:00 UK time.\nhttps://www.twitch.tv/evvvvil_",
            "flags": 0,
            "hasliked": 0,
            "id": "WdfXW7",
            "likes": 9,
            "name": "[TWITCH] Joan of Arc Tangent",
            "published": 3,
            "tags": [
                "time",
                "demoscene",
                "abstract",
                "limit",
                "arc",
                "live",
                "tangent",
                "battle",
                "shadershowdown",
                "coding",
                "twitch",
                "showdown",
                "joan"
            ],
            "usePreview": 0,
            "username": "evvvvil",
            "viewed": 836
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\"Joan of Arc versus Terry Tangent\" - Shader Showdown practice session 009\n\n// WHAT THE FUCK IS THE SHADER SHOWDOWN?\n// The \"Shader Showdown\" is a demoscene live-coding shader battle competition.\n// 2 coders battle for 25 minutes making a shader from memory on stage. \n// The audience votes for the winner by making noise or by voting on their phone.\n// Winner goes through to the next round until the final where champion is crowned.\n// Live coding shader software used is BONZOMATIC made by Gargaj from Conspiracy:\n// https://github.com/Gargaj/Bonzomatic\n\n// Every tuesdays around 20:30 UK time I practise live on TWITCH. This is the result of session 009.\n\n// COME SEE LIVE CODING EVERY TUESDAYS HERE: https://www.twitch.tv/evvvvil_\n\n// evvvvil / DESiRE demogroup\n\n// \"What happened to my cigar commercial? What happened to my agent? Bastard must have died.\" - Withnail & I\n\nvec2 sc,e=vec2(.00035,-.00035);float t,tt,at,st;vec3 bp,pp;//Some fucking globals, about as exciting as instagram influencer being advertising boards\nfloat bo(vec3 p,vec3 r){vec3 q=abs(p)-r;return max(max(q.x,q.y),q.z);}//box function stolen from UNC because UNC from QUITE is a genius coder\nvec2 fb( vec3 p ) //fucking bit function creates a piece and then we clone and tweak it in the mp map function. Just like poverty and crime: they are related.\n{\n    vec2 h,t=vec2(bo(abs(p)-vec3(3,2,3),vec3(.5,1.5,.5)),0);//abs symstery cloning to make 8 boxes in one line of code\n    h=vec2(bo(abs(p)-vec3(3,0,3),vec3(.4,100,.4)),5);//more abs symstery cloning boxes\n    h.x=min(bo(abs(p)-vec3(3,0,0),vec3(.3,3,3)),h.x);//man loving this abs symstery cloning thing, pass me another beer\n    t.x=min(bo(abs(p)-vec3(0,2.5,2),vec3(3,.4,.4)),t.x);//Fucking hell still at it: cloning fucking boxes.\n    t=(t.x<h.x)?t:h;//finally box stacking job is finished, i can get paid and smoke that cigar: it's been so rewarding broski.\n    return t;//Return this, return that, this guy will never leave you alone, go away and never return!\n}\n\nfloat noise(vec3 p){//Noise function stolen from Virgil who stole it from Shane who I assume understands this shit, unlike me who is too busy trying to fit these round pegs in squared holes\n  vec3 ip=floor(p),s=vec3(7,157,113);\n  p-=ip;\n  vec4 h=vec4(0,s.yz,s.y+s.z)+dot(ip,s);\n  p=p*p*(3.-2.*p);\n  h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n  h.xy=mix(h.xz,h.yw,p.y);\n  return mix(h.x,h.y,p.z);//Ah, yes I understand this bit: it draws a shape which, if you have enough imagination, looks like a penis\n}\n\n\nmat2 r2(float r){return mat2(cos(r),sin(r),-sin(r),cos(r));}//simple rotate function, it is useful as fuck and short. Bit like your diminutive friend who can get you into the club for free.\n\nvec2 mp( vec3 p ) //This is the main MAP function where all geometry is made/defined. It's centre stage broski, like cat videos on youtube\n{\n  vec4 np=vec4(p,1);//np will be the new position we pass to fucking bit function fb\n    //because np will be scaled in a loop we make it a vec4 to remember the amount of scaling in np.w and scale the distance field to avoid artifact \n  np.z=atan(np.z);//Making geometry infinite and more interesting by turning z axis into and arc tangent of it\n  bp=np.xyz;//bp is another new position which will be the pos for the white spehrical geometries\n  for(int i=0;i<4;i++){//in da  fucking loop broski\n    np*=1.6;//sizing the fucker\n    np.xz*=r2(sin(p.y*0.3)*0.2);//spin xy along y axis\n    np.xyz=abs(np.xyz)-vec3(6,6,0);//Spread geom out each iter we make more\n    bp.xyz=abs(bp.xyz)-vec3(6,4.+2.*sin(tt*5.),0);//Ah yeah do the same to bp but with little offset\n    bp.x+=2.;//nudge bp out to make it wide, open up the centre hole, some much innuendo im giggling at the lewd joke possibilities, if you're not then you're a nerd\n    if(i==0){//sometimes we do this, sometimes we dont\n    np.xy*=r2(.785*1.5*sin(p.z*0.1+tt*10.));//spinneroo the fuckeroo\n    bp.xy*=r2(.785*1.5*sin(p.z*0.1+tt*10.));//spinneroo the whiteroo fuckeroo\n    }\n    if(i==1) np.xz*=r2(.785);//Sometimes i just feel like spinning things, mostly when i is 1 the other times I feel like a double cheesburger\n    np.w+=0.1;//nudge the distance field scaler a bit, seems to improve artifacts, truth is I dont really know what the fuck im doing but it's looking good broski\n  }\n  pp=np.xyz;//shortening the np.xyz into pp var for ease of use further down the line\n  vec2 h,t=fb(pp);//push the new fucking position in to the fucking bits function and get some mad fucking geometry broski\n  t.x/=np.w;//THERE we scale the distance field to avoid artifact. Not so dumb overall I guess, well a litte more susbtance than a drowning shoe\n  h=vec2(length(bp)-1.9,6);h.x*=0.8;//make the white geom from bp, Making it all more exciting, like recruiting the youth for political party activisim.\n  t=(t.x<h.x)?t:h;//We blend it all together while retaignin material ID, because sharing is fucking caring as long as it's colour coded.\n  return t;//This guy again, using precious bytes and all it does is return, what a fucking waste of a boomerang.\n}\n\nvec2 tr( vec3 ro, vec3 rd,float near,float far,int it )\n{\n  vec2 h,t=vec2(near);//Near plane because we all started as babies\n  for(int i=0;i<it;i++){//Main loop de loop\n    h=mp(ro+rd*t.x);//Marching forward like any good fascist army: without any care for culture theft\n    if(h.x<.0001||t.x>far) break;//Don't let the bastards break you down!\n    t.x+=h.x;t.y=h.y;//Remember the postion and the material id? Because it was an amazing afternoon we spent feeling all these drapes.\n  }\n  if(t.x>far) t.x=0.;//If we've gone to far then I will remove my cape.\n  return t;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(gl_FragCoord.x / iResolution.x, gl_FragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);//boiler[plate code to get uvs in BONZOMATIC live coding software i use.\n    tt=mod(iTime*0.1,10.);//My time variable which everything uses to animate. This is modulo to avoid ugly artifact. Holding time in my hand: playing god is such a thrill.\n\t\n    vec3 ro=vec3(-sin(tt)*5.,-cos(tt*10.)*5.,-10),//Ro=ray origin=camera position because everything is relative to a view point, even nerds' lack of sense of humour\n    rd=normalize(vec3(uv,0.5)),co,fo,//rd=ray direction (where the camera is pointing), co=final color, fo=fog color\n    ld=normalize(vec3(0.4,0.2,0.2));//light direction, because god likes to point fingers with dramatic effect\n    co=fo=vec3(0.5)*(1.-(length(uv)-0.2));//By default the color fog color and it's a dark coloured vignette, because someone made a sexist joke and the west is offended\n\n    sc=tr(ro,rd,0.1,50.,128);t=sc.x;//This is where we shoot the fucking rays to get the scene, because shooting rays to gather colours beats playing Rugby against your ex girlfriend's team\n\t//(warned you about the sexist joke in line 93, if offended please tell Twitter, but trust, only the Rugby reference was meant to be offensive)\n    if(t>0.){//If t>0 then we must have hit some geometry so let's fucking shade it. Grab an umbrella, it's like dinning at the beach\n    //We hit some geometry so let's get the current position (po) and build some normals (no). You do the Maths while I light up Diogenes' lamp as he searches for an honest person.\n    vec3 po=ro+rd*t,no=normalize(e.xyy*mp(po+e.xyy).x+e.yyx*mp(po+e.yyx).x+e.yxy*mp(po+e.yxy).x+e.xxx*mp(po+e.xxx).x),\n    //LIGHTING MICRO ENGINE BROSKI \n    al=vec3(.7,.2,.5+0.1*(length(po-ro)-10.));//Albedo is base colour.\n\n    float spo=exp2(1.+3.*noise(pp/vec3(.8,1.6,1.6)+noise(pp/vec3(.4,.8,.8))));//spo=specular power THIS, sick gloss map derived from noise function, it's a thing of fucking beauty\n    if(sc.y<5.) al=vec3(0);//Change colour depending on material id, it's like a painting/decorating job but without smoking weed at each break\n    if(sc.y>5.) {//More colour change this time re make the spo as the pos is different (bp instead of np) get your fucking positions in order this isn't you and your mates trying to dance to beyoncÃ© after 2 shandies\n      al=vec3(1);no*=(1.+.6*ceil(cos(bp*4.)));no=normalize(no);\n      spo=exp2(1.+3.*noise(bp/vec3(.2,.4,.4)+noise(bp/vec3(.05,.1,.1))));\n    }\n    float dif=max(0.,dot(no,ld)),//dif=diffuse because i ain't got time to cook torrance\n    aor=t/50.,ao=exp2(-2.*pow(max(0.,1.-mp(po+no*aor).x/aor),2.)),//aor =amibent occlusion range, ao = ambient occlusion\n    fr=pow(1.+dot(no,rd),4.),//Fr=fresnel which adds reflections on edges to composite geometry better, yeah could be reflected, but who gives a shit? That's twice you're a nerd, come on, grab a beer, relax.\n    sha=tr(po,ld,.05,2.0,50).x;sha=(sha>.0)?0.0:1.0;//Fuck it why not draw some fucking shadows? just gonnu soften them with some brutal hacks\n    vec3 sss=vec3(0.5)*smoothstep(0.,1.,mp(po+ld*0.4).x/0.4),//sss=subsurface scatterring made by tekf from the wax shader, big up tekf! https://www.shadertoy.com/view/lslXRj\n    sp=vec3(0.5)*pow(max(dot(reflect(-ld,no),-rd),0.),spo);//Sp=specualr, sotlen from Shane and it's better than dipping your fingers in hot mashed potatoes\n\tsha*=0.5;//Pseudo soften the shadows and adding 0.5 in line below \n    co=mix(sp+al*(0.8*ao+0.2)*((sha+0.5)*dif+sss),fo,min(fr,0.5));//Building the final lighting result, compressing the fuck outta everything above into an RGB shit sandwich\n    co=mix(co,fo,1.-exp(-.00003*t*t*t));//Fog soften things, like smoke machines at a SUNN O))) concerts\n    }\n    fragColor = vec4(pow(co,vec3(0.45)),1);//Cheap tone mapping, even cheaper than street justice\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}