{
    "Shader": {
        "info": {
            "date": "1650695712",
            "description": "CC0: Pretty sweet colors\nI watched a YT (https://www.youtube.com/watch?v=pG0t19bEYJw), didn't remember anything except I thought \nthe colors and shapes were pretty sweet around 0:09 in the video. So improvised a shader around it.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "NlXBDn",
            "likes": 18,
            "name": "Pretty sweet colors",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 574
        },
        "renderpass": [
            {
                "code": "// CC0: Pretty sweet colors\n//  I watched a YT (https://www.youtube.com/watch?v=pG0t19bEYJw), didn't remember anything except I thought \n//  the colors and shapes were pretty sweet around 0:09 in the video. So improvised a shader around it.\n//  Unfortunately in chromium (Chrome, Edge etc) the colors for me looks dull and boring. Hopefully it's ok for you.\n//  In FF it looks right though.\n\n#define RESOLUTION  iResolution\n#define TIME        iTime\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nfloat sRGB(float t) { return mix(1.055*pow(t, 1./2.4) - 0.055, 12.92*t, step(t, 0.0031308)); }\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(in vec3 c) { return vec3 (sRGB(c.x), sRGB(c.y), sRGB(c.z)); }\n\n\nfloat plane(vec2 p, vec3 pl) {\n  return dot(p, pl.xy) + pl.z;\n}\n\nvec2 toSmith(vec2 p)  {\n  // z = (p + 1)/(-p + 1)\n  // (x,y) = ((1+x)*(1-x)-y*y,2y)/((1-x)*(1-x) + y*y)\n  float d = (1.0 - p.x)*(1.0 - p.x) + p.y*p.y;\n  float x = (1.0 + p.x)*(1.0 - p.x) - p.y*p.y;\n  float y = 2.0*p.y;\n  return vec2(x,y)/d;\n}\n\nvec2 fromSmith(vec2 p)  {\n  // z = (p - 1)/(p + 1)\n  // (x,y) = ((x+1)*(x-1)+y*y,2y)/((x+1)*(x+1) + y*y)\n  float d = (p.x + 1.0)*(p.x + 1.0) + p.y*p.y;\n  float x = (p.x + 1.0)*(p.x - 1.0) + p.y*p.y;\n  float y = 2.0*p.y;\n  return vec2(x,y)/d;\n}\n\nconst vec3[] bcols = vec3[](\n    HSV2RGB(vec3(243.0/360.0,0.95,0.07))\n  , HSV2RGB(vec3(246.0/360.0,0.89,0.28))\n  , HSV2RGB(vec3(244.0/360.0,0.80,0.23))\n  , HSV2RGB(vec3(263.0/360.0,0.84,0.27))\n  , HSV2RGB(vec3(277.0/360.0,0.86,0.26))\n  , HSV2RGB(vec3(337.0/360.0,0.98,0.61))\n  , HSV2RGB(vec3(348.0/360.0,0.99,0.83))\n  , HSV2RGB(vec3(357.0/360.0,0.93,0.85))\n  );\nconst int noOfBCols = bcols.length();\n\nvec2 transform(vec2 p, float i) {\n  float tm = TIME*0.2;\n  float ii = i/float(noOfBCols);\n  float f =sin(3.0*p.y+2.1*i+tm);\n  vec2 sp = toSmith(p);\n//  sp.y -= 0.1*i+0.9*sin(+0.1*i);\n  sp *= ROT(0.1*i+tm);\n  sp *= ROT(mix(0.0, 0.2, ii)*f);\n//  p.x += 0.08*f;\n  p = fromSmith(sp);;\n  return p;\n}\n\nfloat df(vec2 p, float i) {\n  return plane(p, vec3(normalize(-vec2(1.0, 1.0)), 0.2*i-0.3));\n}\n\nvec3 effect(vec2 p, vec2 np) {\n  float aaa = 2.0/RESOLUTION.y;\n  vec3 col = bcols[0];\n  \n  for (int i = 1; i < noOfBCols; ++i) {\n    float ii = float(i);\n    vec2 pp   = transform(p, ii);\n    vec2 npp  = transform(np, ii);\n    float aa  = distance(pp, npp)*sqrt(0.5);\n    float d = df(pp, ii);\n    col = mix(col, col*0.33, exp(-max(10.0*d*aaa/aa, 0.0)));\n    col = mix(col, bcols[i], smoothstep(aa, -aa, d));\n  }\n  \n  \n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q  = fragCoord/RESOLUTION.xy;\n  vec2 p  = -1.0 + 2.0*q;\n  p.x     *= RESOLUTION.x/RESOLUTION.y;\n  vec2 np = p + 2.0/RESOLUTION.y;\n  \n  vec3 col = effect(p, np);\n  col = sRGB(col);\n  fragColor = vec4(col, 1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}