{
    "Shader": {
        "info": {
            "date": "1621259549",
            "description": "I wanted to recreate the classic dotted balls so common during the Amiga era\nThen I messed around a bit more.\n",
            "flags": 64,
            "hasliked": 0,
            "id": "sdBXWt",
            "likes": 52,
            "name": "Bouncing dotted ball",
            "published": 3,
            "tags": [
                "3d",
                "retro"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 839
        },
        "renderpass": [
            {
                "code": "// Licence CC0: Bouncing dotted ball\n//  I wanted to recreate the classic dotted balls so common during the Amiga era\n//  Then I messed around a bit more.\n\n#define PI            3.141592654\n#define TAU           (2.0*PI)\n#define ROT(a)        mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PCOS(x)       (0.5 + 0.5*cos(x))\n#define DOT2(x)       dot(x, x)\n#define TIME          iTime\n#define RESOLUTION    iResolution\n\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\nconst float beat          = 2.0*60.0/125.0;\nconst vec3  grid_color    = HSV2RGB(vec3(0.6, 0.6, 1.0)); \nconst vec3  plate_color   = HSV2RGB(vec3(0.0, 0.0, 0.125)); \nconst vec3  plane_color   = HSV2RGB(vec3(0.7, 0.125, 1.0/32.0)); \nconst vec3  light0_color  = 16.0*HSV2RGB(vec3(0.6, 0.5, 1.0)); \nconst vec3  light1_color  = 8.0*HSV2RGB(vec3(0.9, 0.25, 1.0)); \nconst vec3  sky0_color    = HSV2RGB(vec3(0.0, 0.65, 0.95)); \nconst vec3  sky1_color    = HSV2RGB(vec3(0.6, 0.5, 0.5)); \nconst vec3  light0_pos    = vec3(3.0, 4.0, 4.0);\nconst vec3  light1_pos    = vec3(-3.0, 2.0, -8.0);\nconst vec3  light0_dir    = normalize(light0_pos);\nconst vec3  light1_dir    = normalize(light1_pos);\nconst vec4  planet_sph    = vec4(50.0*normalize(light1_dir+vec3(0.025, -0.025, 0.0)), 10.0);\nconst float truchet_lw    = 0.05;\nconst mat2[] truchet_rots = mat2[](ROT(0.0*PI/2.0), ROT(1.00*PI/2.0), ROT(2.0*PI/2.0), ROT(3.0*PI/2.0));\n\nconst float period        = 18.0;\n\n// IQ's soft minimum: https://iquilezles.org/articles/smin\nfloat pmin(float a, float b, float k) {\n  float h = clamp( 0.5+0.7*(b-a)/k, 0.0, 1.0);\n  return mix(b,a,h) - k*h*(1.0-h);\n}\n\n// From: http://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\n// IQ's ray plane intersect: https://iquilezles.org/articles/intersectors\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\n// IQ's ray sphere intersect: https://iquilezles.org/articles/intersectors\nvec2 raySphere(vec3 ro, vec3 rd, vec4 sph) {\n  vec3 oc = ro - sph.xyz;\n  float b = dot( oc, rd );\n  float c = dot( oc, oc ) - sph.w*sph.w;\n  float h = b*b - c;\n  if (h < 0.0) return vec2(-1.0);\n  h = sqrt(h);\n  return vec2(-b - h, -b + h);\n}\n\nvec3 toSpherical(vec3 p) {\n  float r   = length(p);\n  float t   = acos(p.z/r);\n  float ph  = atan(p.y, p.x);\n  return vec3(r, t, ph);\n}\n\nvec3 toRect(vec3 p) {\n  return p.x*vec3(cos(p.z)*sin(p.y), sin(p.z)*sin(p.y), cos(p.y));\n}\n\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\nfloat hash(vec2 co) {\n  return fract(sin(dot(co, vec2(12.9898,58.233))) * 13758.5453);\n}\n\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nfloat grid(vec2 p, float f, float mf) {\n  const float steps = 20.0;\n  vec2 gz = vec2(PI/(steps*mf), PI/steps);\n  vec2  n = mod2(p, gz);\n  p.y     *= f;\n  float d = min(abs(p.x), abs(p.y))-0.00125;\n  return d;\n}\n\nfloat dots(vec2 p, float f) {\n  const vec2 gz = vec2(PI/128.0);\n  vec2  n = mod2(p, gz);\n  p.y     *= f;\n  float d = length(p)-0.00125;\n  float r = hash(n+124.0);\n  \n  return d;\n}\n\nfloat plates(vec2 p, float f, float mf) {\n  vec2 gz = vec2(PI/(64.0*mf), PI/64.0);\n  vec2  n = mod2(p, gz);\n  p.y     *= f;\n  float r = hash(n+124.0);\n  \n  if (-1.5*sin(TAU*TIME/period)+r < f) {\n    return 1E6;\n  } else {\n    return 0.0;\n  }\n}\n\nfloat truchet_cell0(vec2 p, float h) {\n  float d0  = circle(p-vec2(0.5), 0.5);\n  float d1  = circle(p+vec2(0.5), 0.5);\n\n  float d = 1E6;\n  d = min(d, d0);\n  d = min(d, d1);\n  return d;\n}\n\nfloat truchet_cell1(vec2 p, float h) {\n  float d0  = abs(p.x);\n  float d1  = abs(p.y);\n  float d2  = circle(p, mix(0.2, 0.4, h));\n\n  float d = 1E6;\n  d = min(d, d0);\n  d = min(d, d1);\n  d = min(d, d2);\n  return d;\n}\n\nfloat truchet(vec2 p, float f, float sections) {\n  float z = TAU/sections; \n  \n  vec2 hp = p/z;\n  hp.x -= sections/4.0;\n  vec2 lp = hp;\n  lp.x = abs(lp.x);\n\n  \n  vec2 hn = mod2(hp, vec2(1.0));\n  float r = hash(hn);\n\n  hp *= truchet_rots[int(r*4.0)];\n  float rr = fract(r*131.0);\n  float cd0 = truchet_cell0(hp, rr);\n  float cd1 = truchet_cell1(hp, rr);\n\n  float d = mix(cd0, cd1, float(fract(r*113.0) > 0.5));\n\n  float ld = lp.x-sections/6.0; \n\n  d = max(d, ld);\n  d = min(d, abs(ld));\n  d = abs(d) - truchet_lw;\n\n  return d*z;\n}\n\nfloat truchet(vec2 p, float f) {\n  float n = floor((TIME-2.0)/period);\n  float r = hash(0.1*n+100.0);\n  float sections = 11.0+2.0*floor(15.0*r*r);\n  float d = truchet(p, f, sections);\n  return d;\n}\n\nfloat bounce() {\n  float tm = TIME/beat;\n  float t = fract(tm*1.0)-0.5;\n  return 0.25 - t*t;\n}\n\nvoid lighting(vec3 pos, vec3 nor, vec3 ref, out vec3 ld0, out vec3 dif0, out vec3 ld1, out vec3 dif1) {\n  float ll0 = 0.05*DOT2(light0_pos-pos);\n  float ll1 = 0.05*DOT2(light1_pos-pos);\n  ld0       = normalize(light0_pos-pos);\n  ld1       = normalize(light1_pos-pos);\n  dif0      = light0_color*max(dot(nor, ld0), 0.0)/ll0;\n  dif1      = light1_color*max(dot(nor, ld1), 0.0)/ll1;\n}\n\nvec3 renderBackground(vec3 ro, vec3 rd, vec3 nrd, vec4 sph) {\n  vec3 sky  = smoothstep(1.0, 0.0, rd.y)*sky1_color+smoothstep(0.5, 0.0, rd.y)*sky0_color;\n\n  vec2 pi = raySphere(ro, rd, planet_sph);\n\n  float lf1 = 1.0;\n  if (pi.x > 0.0) {\n    vec3 ppos = ro+rd*pi.x;\n    float t = 1.0-tanh_approx(1.5*(pi.y - pi.x)/planet_sph.w);\n    sky *= mix(0.5, 1.0, t);\n    lf1 = t;\n  }\n\n  sky += pow(max(dot(rd, light0_dir), 0.0), 800.0)*light0_color; \n  sky += lf1*pow(max(dot(rd, light1_dir), 0.0), 150.0)*light1_color; \n\n  if(rd.y > 0.0) return sky;\n\n  // As suggested by elenzil in the comments\n  float py  = 1.0 + 0.2 * smoothstep(-0.05, 0.1, bounce());\n  float t   = rayPlane(ro, rd, vec4(vec3(0.0, py, 0.0), 0.5));\n\n  vec3 pos  = ro + t*rd;\n  vec3 npos = ro + t*nrd;\n  float aa  = length(npos-pos);\n\n  vec3 nor  = vec3(0.0, 1.0, 0.0);\n  vec3 ref  = reflect(rd, nor); \n  vec3 nref = reflect(nrd, nor); \n\n\n  vec3 ld0 ;\n  vec3 ld1 ;\n  vec3 dif0; \n  vec3 dif1;\n  lighting(pos, nor, ref, ld0, dif0, ld1, dif1);\n\n  vec2 si0 = raySphere(pos, ld0, sph);\n\n  vec2 pp = pos.xz;\n  vec2 op = pp;\n  pp += TIME*0.513;\n  \n  vec2 np = mod2(pp, vec2(0.6));\n  \n  float sha0 = si0.x < 0.0 ? 1.0 : (1.0-1.0*tanh_approx((si0.y-si0.x)*2.5/(0.5+.5*si0.x)));\n  dif0 *= sha0;\n  \n  vec3 col = vec3(0.0);\n\n  float ll = 2.0*DOT2(op);\n  \n  float d = pmin(abs(pp.x), abs(pp.y), 0.05);\n\n  float gm = PCOS(-TAU/beat*TIME+0.25*TAU*length(op));\n  col += mix(vec3(0.75), 2.0*vec3(3.5, 2.0, 1.25), gm)*exp(-mix(400.0, 100.0, gm)*max(d-0.00125, 0.0));\n  col /= (1.0+ll);\n\n  col += plane_color*(dif0+dif1); \n\n  \n  return mix(sky, col, tanh_approx(500.0/(1.0 + DOT2(pos))));\n}\n\nvec3 renderBall(vec3 ro, vec3 rd, vec3 nrd, vec4 sph, vec2 t2) {\n  vec3 pos  = ro + t2.x*rd;\n  vec3 npos = ro + t2.x*nrd;\n  float aa  = length(npos-pos);\n\n  vec3 sp   = pos - sph.xyz;\n  vec3 nor  = normalize(sp);\n  vec3 ref  =reflect(rd, nor); \n  vec3 nref =reflect(nrd, nor); \n  \n  vec3 ld0 ;\n  vec3 ld1 ;\n  vec3 dif0; \n  vec3 dif1;\n  lighting(pos, nor, ref, ld0, dif0, ld1, dif1);\n  \n  sp.yz    *= ROT(TIME*sqrt(0.5));\n  sp.xy    *= ROT(TIME*1.234);\n  vec3 ssp = toSpherical(sp.zxy);\n\n  vec2  pp = ssp.yz;\n  float f  = sin(pp.x); \n\n  float lf2 = -ceil(log(f)/log(2.0));\n  float mf = pow(2.0, lf2);\n\n  float gd = grid(pp, f, mf);\n  float dd = dots(pp, f);\n  float pd = plates(pp, f, mf);\n  float td = truchet(pp, f);\n\n  vec3 rcol= renderBackground(pos, ref, nref, sph);\n  \n  vec3 col = vec3(0.0);\n  col = mix(col, vec3(1.0), smoothstep(-aa, aa, -dd));\n  vec3 gcol = vec3(0.0); \n  gcol -= 0.5*vec3(1.0, 2.0, 2.0)*exp(-100.0*max(td+0.01, 0.0));\n  gcol = mix(gcol, vec3(0.1, 0.09, 0.125), smoothstep(-aa, aa, -(td+0.005)));\n  gcol += 8.0*vec3(2.0, 1.0, 1.0)*exp(-900.0*abs(td-0.00125));\n  gcol = mix(gcol, 0.5*(plate_color*(dif0+dif1)), vec3(pd > 0.0));\n  col += clamp(gcol, -1.0, 1.0);\n  col = mix(col, grid_color, smoothstep(-aa, aa, -gd));\n  \n  float b = smoothstep(0.15, 0.0, dot(nor, -rd));\n  col *= tanh_approx(1.0*abs(t2.y-t2.x)/sph.w);\n  \n  return col+rcol*(pd <= 0.0 ? 0.275 : 0.1);\n}\n\nvec3 effect(vec2 p, vec2 q) { \n  vec3 ro = 0.65*vec3(2.0, 0, 0.2)+vec3(0.0, 0.5, 0.0);\n  ro.xz *= ROT(TIME*0.312);\n  vec3 la = vec3(0.0,0.125, 0.0); \n\n  vec2 np = p + vec2(4.0/RESOLUTION.y); \n\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross(vec3(0.0,1.0,0.0), ww));\n  vec3 vv = normalize(cross(ww,uu));\n  float rdd = 2.0;\n  vec3 rd = normalize(p.x*uu + p.y*vv + rdd*ww);\n  vec3 nrd= normalize(np.x*uu + np.y*vv + rdd*ww);\n  \n  vec4 sph= vec4(vec3(0.0, bounce(), 0.0), 0.5);\n  \n  vec2 si = raySphere(ro, rd, sph);\n\n  if (si.x >= 0.0) {\n    return renderBall(ro, rd, nrd, sph, si);\n  } else {\n    return renderBackground(ro, rd, nrd, sph);\n  }\n}\n\nvec3 postProcess(vec3 col, vec2 q) {\n  col = clamp(col, 0.0, 1.0);\n  col = pow(col, vec3(1.0/2.2));\n  col = col*0.6+0.4*col*col*(3.0-2.0*col);\n  col = mix(col, vec3(dot(col, vec3(0.33))), -0.4);\n  col *=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1.0 + 2.0*q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect(p, q);\n\n  float fi = smoothstep(0.0, 5.0, TIME);\n  col = mix(vec3(0.0), col, fi);\n\n  col = postProcess(col, q);\n  \n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 27174,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/slender-boy-380833869/markus-captain-kaarlonen-space-debris-spacesynth-remix"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}