{
    "Shader": {
        "info": {
            "date": "1509216367",
            "description": "Test realistic bloom using texture lods",
            "flags": 32,
            "hasliked": 0,
            "id": "MlBcRV",
            "likes": 11,
            "name": "Lod bloom",
            "published": 3,
            "tags": [
                "2d",
                "blur",
                "filter",
                "bloom",
                "lod"
            ],
            "usePreview": 0,
            "username": "luluco250",
            "viewed": 2089
        },
        "renderpass": [
            {
                "code": "// Final blend\n\n#define BLOOM_INTENSITY 0.5\n#define BLOOM_STEPS 9\n#define SHOW_BLOOM 0\n\nconst vec2[] offsets = vec2[](\n    vec2(0.05, 0.075),\n    vec2(0.975, 0.05),\n    vec2(0.975, 0.55),\n    vec2(0.975, 0.875),\n    vec2(0.7, 0.95),\n    vec2(0.65, 0.7),\n    vec2(0.65, 0.5),\n    vec2(0.475, 0.65),\n    vec2(0.325, 0.65)\n);\n\nvec2 scale_uv(vec2 uv, vec2 scale, vec2 center) {\n    return (uv - center) * scale + center;\n}\n\nvec4 read_bloom(sampler2D sp, vec2 uv, float lod, vec2 center) {\n    uv = scale_uv(uv, vec2(1.0 / pow(2.0, lod)), center);\n    return texture(sp, uv);\n}\n\nvec4 get_bloom(sampler2D sp, vec2 uv, int steps) {\n    vec4 col = vec4(0.0);\n    \n    for (int i = 1; i <= steps; ++i)\n        col += read_bloom(sp, uv, float(i), offsets[i - 1]);\n    \n    return col / float(steps);\n}\n\nvec3 screen(vec3 a, vec3 b, float w) {\n    return mix(a, vec3(1.0) - (vec3(1.0) - a) * (vec3(1.0) - b), w);\n}\n\nvec3 tonemap(vec3 col) {\n    return col / (vec3(1.0) + col);\n}\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    vec2 uv = coord / iResolution.xy;\n    \n    #if SHOW_BLOOM == -1\n    \n    color = texture(iChannel0, uv);\n    \n    #elif SHOW_BLOOM == 2\n    \n    color = texture(iChannel1, uv);\n    \n    #else\n    \n    vec4 bloom = get_bloom(iChannel1, uv, BLOOM_STEPS);\n    \n    #if SHOW_BLOOM == 1\n    \n    color = bloom;\n    \n    #else\n    \n    color = texture(iChannel0, uv);\n    \n    if (iMouse.z > 0.0)\n    \tcolor += (bloom * BLOOM_INTENSITY) * iMouse.x / iResolution.x;\n    else\n        color += bloom * BLOOM_INTENSITY;\n    \n    color.rgb = tonemap(color.rgb);\n    color.rgb *= 1.0 - smoothstep(0.0, 2.0, distance(uv, vec2(0.5)));\n    \n    //color.rgb = screen(color.rgb, bloom.rgb, BLOOM_INTENSITY);\n    \n    #endif\n    #endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Source image\n\nconst vec3 bg_top    = vec3(0.0);\nconst vec3 bg_bottom = vec3(4.0, 0.0, 4.0);\n\nconst vec3 grd_high = vec3(10.0);\nconst vec3 grd_low  = vec3(0.0);\n\nfloat ground(vec2 uv) {\n    uv = mod(floor(uv), 2.0);\n    return mod(uv.x + uv.y, 2.0);\n}\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    vec2 uv = coord / iResolution.xy;\n    color.a = 0.0;\n    \n    color.rgb = mix(bg_bottom, bg_top, smoothstep(0.0, 0.6, uv.y));\n\t\n    vec3 cam = vec3(uv * 2.0 - 1.0, 1.0);\n    vec2 ground_uv = cam.xz / cam.y;\n    ground_uv.y -= iTime;\n    \n    vec3 ground_color = mix(grd_low, grd_high, ground(ground_uv));\n    \n    vec3 fog_color = mix(vec3(1.0), bg_bottom, uv.y);\n    ground_color *= fog_color;\n    \n    if (uv.y < 0.5)\n        color.rgb = ground_color;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Split source into lods\n\nconst vec2[] offsets = vec2[](\n    vec2(0.05, 0.075),\n    vec2(0.975, 0.05),\n    vec2(0.975, 0.55),\n    vec2(0.975, 0.875),\n    vec2(0.7, 0.95),\n    vec2(0.65, 0.7),\n    vec2(0.65, 0.5),\n    vec2(0.475, 0.65),\n    vec2(0.325, 0.65)\n);\n\nvec2 scale_uv(vec2 uv, vec2 scale, vec2 center) {\n    return (uv - center) * scale + center;\n}\n\nvoid draw(inout vec4 color, sampler2D sp, vec2 uv, float lod, vec2 center) {\n    uv = scale_uv(uv, vec2(pow(2.0, lod)), center);\n    \n    if (uv.x >= -0.1 && uv.x <= 1.1 && uv.y >= -0.1 && uv.y <= 1.1)\n        color += textureLod(sp, uv, lod);\n}\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    vec2 uv = coord / iResolution.xy;\n    color = vec4(0.0);\n    \n    for (int i = 1; i < 10; ++i)\n        draw(color, iChannel0, uv, float(i), offsets[i - 1]);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Horizontal blur\n\n#define BLUR_SAMPLES 13\n#define pi 3.141592\n#define pow2(x) (x * x)\n\nfloat gaussian(float x, float sigma) {\n    return (1.0 / sqrt(2.0 * pi * pow2(sigma))) * exp(-(pow2(x) / (2.0 * pow2(sigma))));\n}\n\nvec4 blur(sampler2D sp, vec2 uv, vec2 scale) {\n    vec4 col = vec4(0.0);\n    float accum, weight, offset;\n    \n    for (int i = -BLUR_SAMPLES / 2; i < BLUR_SAMPLES / 2; ++i) {\n        offset = float(i);\n        weight = gaussian(offset, sqrt(float(BLUR_SAMPLES)));\n        col += texture(sp, uv + scale * offset) * weight;\n        accum += weight;\n    }\n    \n    return col / accum;\n}\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    vec2 ps = vec2(1.0) / iResolution.xy;\n    vec2 uv = coord * ps;\n    \n    color = blur(iChannel0, uv, vec2(ps.x, 0.0));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Vertical blur\n\n#define BLUR_SAMPLES 13\n#define pi 3.141592\n#define pow2(x) (x * x)\n\nfloat gaussian(float x, float sigma) {\n    return (1.0 / sqrt(2.0 * pi * pow2(sigma))) * exp(-(pow2(x) / (2.0 * pow2(sigma))));\n}\n\nvec4 blur(sampler2D sp, vec2 uv, vec2 scale) {\n    vec4 col = vec4(0.0);\n    float accum, weight, offset;\n    \n    for (int i = -BLUR_SAMPLES / 2; i < BLUR_SAMPLES / 2; ++i) {\n        offset = float(i);\n        weight = gaussian(offset, sqrt(float(BLUR_SAMPLES)));\n        col += texture(sp, uv + scale * offset) * weight;\n        accum += weight;\n    }\n    \n    return col / accum;\n}\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    vec2 ps = vec2(1.0) / iResolution.xy;\n    vec2 uv = coord * ps;\n    \n    color = blur(iChannel0, uv, vec2(0.0, ps.y));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}