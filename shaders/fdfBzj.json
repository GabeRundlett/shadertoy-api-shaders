{
    "Shader": {
        "info": {
            "date": "1645037531",
            "description": "Quite simple but fun :)",
            "flags": 0,
            "hasliked": 0,
            "id": "fdfBzj",
            "likes": 13,
            "name": "Random Blobs E",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 348
        },
        "renderpass": [
            {
                "code": "float blob(vec2 uv, float o) {\n    float d = 10.;\n    for (float i = 0.; i < 12.; i++) {\n        float e = 0.01 * i;\n        float hx = h21(vec2(e + o, 1.-e));\n        float hy = h21(vec2(e + 1., e - o));\n        vec2 p = 0.45 * (0.5 - vec2(hx, hy));\n        d = smin(d, (1.5 - 0.5 * hx) * length(uv - p));\n    }\n    return d;\n}\n\n// todo:\n// stretch hx/hy so u get stretched blobs not in a square\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    float time = 0.4 * iTime;\n    \n    float sc = 8.;\n    vec2 ipos = floor(sc * uv) + 0.5;\n    vec2 fpos = sc * uv - ipos;\n\n    float h = h21(ipos);\n    float o = 0.01 * floor(time + h);\n    float d = blob(fpos, o + h);\n    \n    float k = 6. / iResolution.y;\n    float s = smoothstep(-k, k, abs(-d + 0.05) - 0.05);\n    s *= smoothstep(-k, k, smin(-abs(fpos.x), -abs(fpos.y)) + 0.45);\n    vec3 e = vec3(1.);\n    vec3 col = s * pal(0.12 * fpos.y - 0.2 + floor(3. * h) / 3. + floor(time + h)/3., \n                       e, e, e, 0.45 * vec3(0,1,2)/3.);\n    col += 0.08;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}