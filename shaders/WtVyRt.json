{
    "Shader": {
        "info": {
            "date": "1611595911",
            "description": "Test for morphing between different sdfs (circle, box and arcs)",
            "flags": 0,
            "hasliked": 0,
            "id": "WtVyRt",
            "likes": 1,
            "name": "Naive SDF morphing",
            "published": 3,
            "tags": [
                "sdfmorphing"
            ],
            "usePreview": 0,
            "username": "DragonWolf",
            "viewed": 529
        },
        "renderpass": [
            {
                "code": "/* First attempt at some morphing between arbitary SDF functions. Introduced a constant A that\n * varies depending on the target SDFs, had to manually update this until it looked good.\n *\n * - Could do with some algorithm to select an A value that is suitable for the SDFs somehow.\n * - Morph's aren't perfect, but will likely do for my purposes.\n */\n \n\nfloat sdBox( vec2 p, in vec2 bounds )\n{\n    vec2 d = abs(p)-bounds;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle(vec2 p, float radius) {\n    return length(p) - radius;\n}\n\nfloat sdArc( in vec2 p, in vec2 sca, in vec2 scb, in float ra, float rb )\n{\n    p *= mat2(sca.x,sca.y,-sca.y,sca.x);\n    p.x = abs(p.x);\n    float k = (scb.y*p.x>scb.x*p.y) ? dot(p.xy,scb) : length(p.xy);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\nfloat sdf(vec2 uv) {\n\n    int variation = int(mod(floor(iTime / 10.), 4.));\n    \n    float pulse = 0.5 + sin(((iTime / 5.) - 0.25) * 3.141 * 2.) * 0.5;\n    \n    float a;\n    float obj1 = 0.;\n    float obj2 = 0.;\n    \n    // Some static arc values.\n    float ta1 = 2.;\n    float tb1 = 2.;\n    float rb1 = 0.05;\n    float size1 = 1.;\n    \n    float ta2 = 3.141;\n    float tb2 = 1.;\n    float rb2 = 0.1;\n    float size2 = .5;\n    \n    vec2 arcPosition1 = vec2(.75,0.);\n    vec2 arcPosition2 = vec2(.5,0.);\n    \n    float radius1 = 0.15;\n    vec2 position1 = vec2(0., -0.2);\n    \n    float radius2 = 0.8;\n    vec2 position2 = vec2(0., 0.4);\n    \n    switch (variation) {\n        case 0:\n\n            obj1 = sdCircle(uv - position2, radius2);    \n            obj2 = sdCircle(uv - position1, radius1); \n            \n            a = 0.22;\n            \n            break;\n            \n        case 1:\n            obj1 = sdCircle(uv - position2, radius2); \n            obj2 = sdArc(uv - arcPosition1,vec2(sin(ta1),cos(ta1)),vec2(sin(tb1),cos(tb1)), size1, rb1);  \n            \n            a = 0.14;\n            \n            break;\n            \n        case 2:\n            obj1 = sdArc(uv - arcPosition1,vec2(sin(ta1),cos(ta1)),vec2(sin(tb1),cos(tb1)), size1, rb1);  \n            obj2 = sdArc(uv - arcPosition2,vec2(sin(ta2),cos(ta2)),vec2(sin(tb2),cos(tb2)), size2, rb2);\n            \n            // a = 0.09;\n            a = 0.3;\n            \n            break;\n            \n        case 3:\n\n\n            obj1 = sdBox(uv - position1, vec2(0.5, 0.5)); \n            obj2 = sdCircle(uv - position2, radius2); \n            \n            a = 0.09;\n            \n            break;\n    }\n    \n    return mix(obj1, obj2, pulse) - a * (1. - (2. * abs(pulse - 0.5)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from y = -1 to 1 with 0,0 in the center of the screen)\n    vec2 uv = 2.0 * (fragCoord - (0.5*iResolution.xy))/iResolution.y;\n    \n    // Calculate SDF\n    float d = sdf(uv);\n\n    // Set base colour depending on inside or outside bounding box.\n    vec3 baseColor = vec3(0.1,0.4,0.7);\n   \n    // Taken from iq to visualize sdf distances (https://www.shadertoy.com/view/4lcBWn)    \n    vec3 col = vec3(1.0) - sign(d)*baseColor;\n\tcol *= 1.0 - exp(-3.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(120.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.008,abs(d)));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}