{
    "Shader": {
        "info": {
            "date": "1588817386",
            "description": "Playing with [url]http://www.cs.cmu.edu/~kmcrane/Projects/MonteCarloGeometryProcessing/paper.pdf[/url]. See [url]https://www.shadertoy.com/view/WdXfzl[/url] for a more advanced example",
            "flags": 32,
            "hasliked": 0,
            "id": "WsXBzl",
            "likes": 68,
            "name": "Montecarlo PDE (1)",
            "published": 3,
            "tags": [
                "2d",
                "montecarlo",
                "pde"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 8259
        },
        "renderpass": [
            {
                "code": "// Playing with Keenan Crane's latest paper in collab with\n// Rohan Sawhney: http://www.cs.cmu.edu/~kmcrane/Projects/MonteCarloGeometryProcessing/paper.pdf[/url]\n//\n// See https://www.shadertoy.com/view/WdXfzl for a more complex example\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 data = texelFetch(iChannel0,ivec2(fragCoord),0);\n    fragColor = vec4(data.xyz/data.w, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Playing with Keenan Crane's latest paper in collab with\n// Rohan Sawhney\n//\n// http://www.cs.cmu.edu/~kmcrane/Projects/MonteCarloGeometryProcessing/paper.pdf[/url]\n//\n\n// https://iquilezles.org/articles/distfunctions\nvec4 sdLine( in vec2 p, in vec2 a, in vec2 b, in vec3 ca, in vec3 cb )\n{\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba),0.0,1.0);\n    float d = length(pa-h*ba);\n    float s = step(0.0,pa.x*ba.y-pa.y*ba.x);\n    return vec4(d, mix(ca,cb,s)*smoothstep(-0.1,0.1,sin(50.0*h)) );\n}\n\n// sdf map\nvec4 map( in vec2 p )\n{\n    vec4 d  = sdLine(p, vec2(-1.0,0.4), vec2(1.1,-0.1), vec3(1.0,0.4,0.1),vec3(0.2,0.5,0.8) )-0.05;\n    vec4 d2 = sdLine(p, vec2(-0.3,0.8), vec2(0.2,-0.6), vec3(1.0,1.0,0.2), vec3(0.1,0.7,0.3) )-0.05;\n    if( d2.x<d.x ) d = d2;\n    \n    return d;\n}\n\n\n// --------------------------------------\n// oldschool rand() from Visual Studio\n// --------------------------------------\nint   seed = 1;\nint   rand(void) { seed = seed*0x343fd+0x269ec3; return (seed>>16)&32767; }\nfloat frand(void) { return float(rand())/32767.0; }\nvoid  srand( ivec2 p, int frame )\n{\n    int n = frame;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589; // by Hugo Elias\n    n += p.y;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589;\n    n += p.x;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589;\n    seed = n;\n}\n\n// --------------------------------------\n\nvec2 randomInCircle( void )\n{\n    float an = 6.283185*float(rand())/32767.0;\n    return vec2(cos(an),sin(an));\n}\n    \n// WoS\nvec3 march( in vec2 p )\n{\n    vec4 h=vec4(0.0);\n\tfor( int i=0; i<32; i++ )\n    {\n        h = map(p);\n        if( h.x<0.001 ) break;\n        p = p + h.x*randomInCircle();\n    }\n    return h.yzw;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// init randoms\n    srand( ivec2(fragCoord), iFrame );\n\n    // solve\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 col = march(p);\n\n    // display map()\n    #if 0\n    vec4 dcol = map(p);\n    float f = 1.0-smoothstep(0.0,0.01,dcol.x);\n    col = mix(col,dcol.yzw,f);\n    col *= smoothstep(0.0,0.01,abs(dcol.x));\n    #endif\n\n    // montecarlo\n    vec4 data = texelFetch(iChannel0,ivec2(fragCoord),0);\n    fragColor = data + vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}