{
    "Shader": {
        "info": {
            "date": "1613408110",
            "description": "potaten",
            "flags": 32,
            "hasliked": 0,
            "id": "wldfDB",
            "likes": 7,
            "name": "Day 424",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 404
        },
        "renderpass": [
            {
                "code": "// dont fullscreen\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord -= 0.5*iResolution.xy;\n    //fragCoord *= 0.99;\n    fragCoord += 0.5*iResolution.xy;\n    \n    float n1d = texelFetch(iChannel1,ivec2(mod(fragCoord + vec2(float(iFrame),0.),256.)),0).x;\n    vec3 n  = texelFetch(iChannel1,ivec2(mod(fragCoord  + n1d*200. ,256.)),0).xyz;\n    \n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    fragColor.xyz =texture(iChannel0,fragCoord/iResolution.xy).xyz;\n    fragColor.xyz = abs(fragColor.xyz);\n    \n    fragColor.xyz = pow(fragColor.xyz, vec3(1.1,1.1,1.1));\n    \n    //fragColor.xyz = 1. - fragColor.xyz;\n    \n    //fragColor.xyz *= 1. - dot(uv,uv)*0.8;\n    fragColor.xyz = pow(fragColor.xyz, vec3(0.4545 + n*0.05));\n    \n    \n    \n    //fragColor = texture(iChannel2,fragCoord/iResolution.xy);\n    \n    fragColor.xyz += smoothstep(1.,0.,length(fragColor))*n*0.04;\n    \n    fragColor.xyz -= smoothstep(0.,1.,length(fragColor))*n*0.05;\n       \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat envcnt = 0.;\n\nfloat getEnv(float t, float speed, float pa, float pb, float jumpAmt, bool cnt){\n    //return pow(sin((t - 0.5)*3.14),1.)*0.5 + 0.5;\n    t = clamp(t*speed,0.,1.);\n    \n    envcnt += float(t > 0.99 && cnt);\n    //t = smoothstep(0.,1.,t);\n    pa += 1.;\n    pb += 1.;\n    \n    float c = cos(t*3.14);\n    float a = 1.- ((pow(abs(c),pa)*sign(c))*0.5 + 0.5);\n    float b = 1.-((pow(abs(c),pb)*sign(c))*0.5 + 0.5);\n    \n    a = pow(sin(t*3.14/2.),pa);\n    b = 1.-pow(sin((-t + 1.)*3.14/2.),pb);\n    \n    b *= 1. + (\n            smoothstep(0.,1.,t) *smoothstep(0.99,0.7,t)*jumpAmt\n        );\n    return mix( a, b,t);\n}\n\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec2 uv = (U - 0.5*iResolution.xy)/iResolution.y;\n    \n    uv += sin(iTime*vec2(3,2)*0.5)*0.01;\n\n\n    vec3 col = vec3(0);\n    \n    float vn = valueNoise(iTime + uv.x*0.2, 2.)*1.;\n    float t = iTime*1. - vn*0.1 + sin(iTime);\n        \n    float env = getEnv(t, 1., 2., 2., 1., false);\n    \n    \n    float nb = cyclicNoise(vec3(uv*0.5 + t*0.,-t*0.2 ), false, t*0.1);\n    \n    float n = cyclicNoise(vec3(uv*(3.5- dot(uv,uv)) - vec2(sin(t)*0.5,cos(t*0.6)*0.6) ,t*0.5 - nb) , false, t*0.);\n\n    \n    float r = 12. - n*3.;\n    int didx = 3;\n    vec2 dfn = vec2(T(U + vec2(1.,0)*r)[didx] - T(U - vec2(1.,0)*r)[didx],T(U + vec2(0.,1)*r)[didx] - T(U - vec2(0.,1)*r)[didx]);\n    \n    r = 16. - n*10. + nb*15.;\n    didx = 3;\n    \n    vec2 dfnb = vec2(T(U + vec2(1.,0)*r)[didx] - T(U - vec2(1.,0)*r)[didx],T(U + vec2(0.,1)*r)[didx] - T(U - vec2(0.,1)*r)[didx]);\n    \n    \n    //col += 1.-abs(length(dfn.xyx))*4.;\n    \n\n    vec3 c = 1.-vec3(0.15+ sin(length(dfnb)*5. + iTime+ n*10.)*0.1 ,0.1 + n*0.1 + sin(nb*20. + t)*0.05 ,0.1 );\n    c *= 0.8;\n    col = mix(col,c,smoothstep(0.1 + n*0.4 - nb*0.2,1.5,length(dfnb.xy)));\n    \n    col = mix(col,3.*vec3(0.15,0.15,0.15 + 0.5*sin(nb*20.)*0.1)*0.3,smoothstep(-0.1,0.4,-length(dfn)));\n    \n    \n    \n    C = vec4(col,n);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec4 fr = texture(iChannel0,(U)/iResolution.xy);\n   \n    float r = 1. + sin(fr.w*4.)*0.5+ sin(fr.w*11.)*0.4;\n    int didx = 3;\n    \n    vec2 dfn = vec2(T0(U + vec2(1.,0)*r)[didx] - T0(U - vec2(1.,0)*r)[didx],T0(U + vec2(0.,1)*r)[didx] - T0(U - vec2(0.,1)*r)[didx]);\n    \n    float sc = 0. + valueNoise(iTime*4.,2.)*0. \n        + pow(smoothstep(0.,1.,length(dfn.x)*9.),2.7)*2.1;\n    \n    C.x =texture(iChannel0,(U + sc*vec2(0,4))/iResolution.xy).x;\n    \n    C.y =texture(iChannel0,(U + sc*vec2(0,-1))/iResolution.xy).y;\n    \n    C.z =texture(iChannel0,(U + sc*vec2(0,-4))/iResolution.xy).z;\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nfloat r11(float i){ return fract(sin(i*15.126)*115.6);}\n\nfloat ss( float c, float power, float bias){\n    c = clamp(c,-0.,1.);\n    //c = smoothstep(0.,1.,c);\n    \n    c = pow(c,1. + bias);\n    \n    float a = pow( abs(c), power);\n    float b = 1.-pow( abs(c - 1.), power);\n    \n    return mix(a,b,c);\n}\n\nfloat valueNoise(float i, float p){ return mix(r11(floor(i)),r11(floor(i) + 1.), ss(fract(i), p,0.6));}\n\nfloat valueNoiseStepped(float i, float p, float steps){ return mix(  floor(r11(floor(i))*steps)/steps, floor(r11(floor(i) + 1.)*steps)/steps, ss(fract(i), p,0.6));}\n\n\n#define pi acos(-1.)\n\n#define R (iResolution.xy)\n#define T(u) texture(iChannel2,(u)/R)\n#define T0(u) texture(iChannel0,(u)/R)\n\n#define sint(a) (asin(sin(a))*2. - 1.)\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define pmod(p,d) mod(p - (d)*0., (d)) - 0.5*(d)\n\n#define pal(a,b,c,d,e) (a + (b)*sin((c)*(d) + (e)))\n\nvec2 r12(float i){float r=r11(i );  return vec2(r,r11(i + r + 2.));}\n\n#define xor(a,b,c) min(max((a),-(b)), max((b),-(a) - c)) \n#define pal(a,b,c,d,e) (a + (b)*sin((c)*(d) + (e)))\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define pi acos(-1.)\n\nmat3 getOrthogonalBasis(vec3 direction){\n    direction = normalize(direction);\n    vec3 right = normalize(cross(vec3(0,1,0),direction));\n    vec3 up = normalize(cross(direction, right));\n    return mat3(right,up,direction);\n}\nfloat cyclicNoise(vec3 p, bool turbulent, float time){\n    float noise = 0.;\n    \n    p.yz *= rot(1.5);\n    float amp = 1.;\n    float gain = 1. + sin(p.x*3.5 + time)*0.1;\n    const float lacunarity = 1.6;\n    const int octaves = 5;\n    \n    const float warp =0.4;    \n    float warpTrk = 1.5 ;\n    const float warpTrkGain = .2;\n    \n    vec3 seed = vec3(-4,-2.,0.5);\n    mat3 rotMatrix = getOrthogonalBasis(seed);\n    \n    for(int i = 0; i < octaves; i++){\n        \n        p += sin(p.zxy*warpTrk + vec3(0,-time*0.2,0) - 2.*warpTrk)*warp; \n        noise += sin(dot(cos(p), sin(p.zxy + vec3(0,time*0.1,0))))*amp;\n    \n        p *= rotMatrix;\n        p *= lacunarity;\n        \n        warpTrk *= warpTrkGain;\n        amp *= gain;\n    }\n    \n    if(turbulent){\n        return 1. - abs(noise)*0.5;\n    \n    }{\n        return (noise*0.25 + 0.5);\n\n    }\n}\n\n\n\nfloat cyclicNoiseB(vec3 p, bool turbulent, float time){\n    float noise = 0.;\n    \n    p.yz *= rot(1.);\n    float amp = 1.;\n    float gain = 0.8 + sin(p.z*0.2)*0.2;\n    const float lacunarity = 1.6;\n    const int octaves = 2;\n    \n    const float warp =.4;    \n    float warpTrk = 1.5 ;\n    const float warpTrkGain = .2;\n    \n    vec3 seed = vec3(-4,-2.,0.5);\n    mat3 rotMatrix = getOrthogonalBasis(seed);\n    \n    for(int i = 0; i < octaves; i++){\n        \n        p += sin(p.zxy*warpTrk + vec3(0,-time*2.,0) - 2.*warpTrk)*warp; \n        noise += sin(dot(cos(p), sin(p.zxy + vec3(0,time*0.3,0))))*amp;\n    \n        p *= rotMatrix;\n        p *= lacunarity;\n        \n        warpTrk *= warpTrkGain;\n        amp *= gain;\n    }\n    \n    if(turbulent){\n        return 1. - abs(noise)*0.5;\n    \n    }{\n        return (noise*0.25 + 0.5);\n\n    }\n}\n\nvec3 sdgBox( in vec2 p, in vec2 b )\n{\n    vec2 w = abs(p)-b;\n    vec2 s = vec2(p.x<0.0?-1:1,p.y<0.0?-1:1);\n    float g = max(w.x,w.y);\n    vec2  q = max(w,0.0);\n    float l = length(q);\n    return vec3(   (g>0.0)?l  :g,\n                s*((g>0.0)?q/l:((w.x>w.y)?vec2(1,0):vec2(0,1))));\n}\n\n\nfloat sdSq(vec2 p, vec2 s){\n    p = abs(p) - s;\n    return max(p.x,p.y);\n}\n\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}