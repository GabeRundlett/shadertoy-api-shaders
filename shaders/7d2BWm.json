{
    "Shader": {
        "info": {
            "date": "1646451038",
            "description": "Using reflections to create fractals",
            "flags": 0,
            "hasliked": 0,
            "id": "7d2BWm",
            "likes": 13,
            "name": "Chez",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "fractal"
            ],
            "usePreview": 0,
            "username": "El_Sargo",
            "viewed": 393
        },
        "renderpass": [
            {
                "code": "//Heavy performance impact \n#define AA 1\n#define raymarchSteps 40\n#define vanillaMarch\n#define rotationSpeed 7.\n#define ZERO min(iFrame, 0)\n#define post\n#define vignet\n\nconst float pi = 3.14159265359;\nmat3 rotx(float a) { mat3 rot; rot[0] = vec3(1.0, 0.0, 0.0); rot[1] = vec3(0.0, cos(a), -sin(a)); rot[2] = vec3(0.0, sin(a), cos(a)); return rot; }\nmat3 roty(float a) { mat3 rot; rot[0] = vec3(cos(a), 0.0, sin(a)); rot[1] = vec3(0.0, 1.0, 0.0); rot[2] = vec3(-sin(a), 0.0, cos(a)); return rot; }\nmat3 rotz(float a) { mat3 rot; rot[0] = vec3(cos(a), -sin(a), 0.0); rot[1] = vec3(sin(a), cos(a), 0.0); rot[2] = vec3(0.0, 0.0, 1.0); return rot; }\n\n// Base primitive\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n//The main part\nvec4 map(vec3 p) {\n    mat3 rot = rotx(sin (2. * iTime*0.1)*pi + sin(pi * iTime*0.1)*pi)*rotz(cos(iTime/4.)*pi)*roty(sin(iTime/4.+12313.123)*pi);\n    int maxI = 8;\n    float scale = 1.;\n    const float factor = 2.;\n    const float baseSize = .7;\n    float d = 10e10;\n    for (int i=ZERO;i<maxI;i++){ \n        p = abs(p)-.4*factor;\n        p *= factor;\n        scale /= factor;\n        p *= rot;\n\n    }\n            d = min(d,\n             sdBox(p-vec3(0,.44*factor,0), (vec3(baseSize)))*scale-(0.4*scale)\n             );\n    return vec4(d,p);\n}\n#ifndef vanillaMarch \n//https://www.shadertoy.com/view/wlVGRV\nvec3 intersection(vec3 ro, vec3 rd){\n    \n    //Boring variables\n    vec3 pos = ro;\n    float T = 0.; \n    float h = map(pos).x;\n\n    float omega = 1.;\n    float pom = 1.;\n    float ph = 1e5;\n    vec2 gap = vec2(0.,0.);\n    for (int i = 0; i<raymarchSteps; ++i) {\n    \n        //Position and distance estimation\n        vec3 p = ro+T*rd;\n        h = map(p).x;\n        \n        \n        //Overstep recovery\n        float om = (ph+h)/ph;\n        if (om<pom && pom > 1.) { //ph+h<ph*pom\n            \n            gap = vec2(h,T);\n            T+=(1.-pom)*ph;\n            pom = 1.;\n            \n        } else {\n            \n            //Variable updates\n        \tT += h * omega;\n            ph = h;\n            pom = omega;\n            \n            //Back to the place where the gap opened (foward)\n        \tif (T>=gap.y-gap.x && gap.y+gap.x > T) {T = gap.y+gap.x*omega; ph = gap.x;};\n        }\n        \n          \n        //Dynamic Omega \n        //omega = clamp((omega+om)*.5,1.,3.);\n        omega = clamp(omega+(om-omega)*.6,1.,3.);\n    }\n    return ro+T*rd;;\n}\n#else\nfloat intersection(vec3 ro, vec3 rd){\n    float T = 0.;\n    for(int i=0;i < raymarchSteps;i++){\n        float dist = map(ro+rd*T).x;\n        T += dist;\n    \n        if(dist <0.01 || dist > 4.)\n            break;\n    }\n    return T;\n}\n#endif\n//iq ---\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k ){\n    float res = 1.0;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t).x;\n        if( h<0.001 )\n            return 0.0;\n        res = min( res, k*h/t );\n        t += h;\n    }\n    return res;\n}\nvec3 calcNormal( in vec3 p, float t ){\n    float h = 0.002*t;\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(p+e*h).x;\n    }\n    return normalize(n);\n}\nfloat calcAO(vec3 pos, vec3 nor){\n\tfloat occ = 0.0;\n    float sca = .4;\n    for( int i=ZERO; i<5; i++ )\n    {\n            float h = 0.01 + 0.25*float(i)/4.0;\n        float d = map( pos+h*nor).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );\n}\n// ---\nvec4 render(vec3 ro, vec3 rd){\n    //world info\n    float d = intersection(ro,rd);\n    vec3 pos = ro+rd*d;\n    vec4 d_t = map(pos);\n    vec3 trp = d_t.yzw;\n   float dis = d_t.x;\n   float trd = distance(pos, trp);\n    //Shading\n     vec3 sun = vec3(1., 1., 1.1);\n    float sha = softshadow(pos, sun, 0.1, 5., 1.)*0.5+0.5;\n     vec3 nor = calcNormal(pos, d);\n    float occ = calcAO(pos, nor);\n    float lig = (dot(sun,nor)*0.5+0.5);\n\n    //Colors\n    vec3 col = vec3(0);\n    vec3 bcl = vec3(log(trd),0.5,cos(trd));\n    vec3 scl = vec3(1., 0.8 ,.7);\n    vec3 amb = vec3(0.7, 0.9, 1.);\n    //\n    if (dis < 0.1) {\n        //Bones\n        col += 0.75*lig*sha*scl*bcl;\n        col += 0.6*amb*occ;\n    } else\n        col = vec3(.7-0.5*abs(rd.y))*scl;\n    return vec4(col, 1);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec3   ro = vec3(0, 0, -5.5);\n    mat3 yrot = roty(iTime*0.2);\n    mat3 xrot = rotx(.9);\n           ro*=xrot*yrot;\n\n    vec4 tot = vec4(0);\n    \n    //Super sampling\n    for(int m=0;m<AA;m++){\n    for(int n=0;n<AA;n++){\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 u = ((fragCoord+o) / iResolution.xy - 0.5) / vec2(iResolution.y / iResolution.x, 1);\n        vec3 rd = normalize(vec3(u, 1));\n        tot += render(ro, rd*xrot*yrot) / float(AA*AA);\n    }}\n\n    \n    #ifdef vignet\n    vec2 uv = fragCoord/iResolution.xy-0.5;\n    tot *= smoothstep(1.34, 0., length(uv));\n    #endif\n    \n    // Output to screen\n    #ifdef post\n    fragColor = smoothstep(0.,1.3,tot);\n    #else\n    fragColor = tot;\n    #endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}