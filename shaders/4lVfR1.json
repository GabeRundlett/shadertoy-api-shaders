{
    "Shader": {
        "info": {
            "date": "1541832014",
            "description": "To forever inscribe peace.",
            "flags": 0,
            "hasliked": 0,
            "id": "4lVfR1",
            "likes": 1,
            "name": "Peace Within",
            "published": 3,
            "tags": [
                "peace",
                "treaty"
            ],
            "usePreview": 0,
            "username": "voz",
            "viewed": 383
        },
        "renderpass": [
            {
                "code": "//Do not redistribute.\n\n//-----------------CONSTANTS MACROS-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n\n//-----------------UTILITY MACROS-----------------\n\n#define time ((.125-.25*saw(float(__LINE__)*PI*GR*E)/PI/GR/E)*iTime+1000.0)\n#define sphereN(uv) (clamp(1.0-length(uv*2.0-1.0), 0.0, 1.0))\n#define clip(x) (smoothstep(0.25, .75, x))\n#define TIMES_DETAILED (1.0)\n#define angle(uv) (atan(uv.y, uv.x))\n#define angle_percent(uv) ((angle(uv)/PI+1.0)/2.0)\n\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n#define circle(x) (vec2(cos((x)*2.0*PI),sin(2.0*PI*(x))))\n\n#define rotatePoint(p,n,theta) (p*cos(theta)+cross(n,p)*sin(theta)+n*dot(p,n) *(1.0-cos(theta)))\n\n\nfloat saw(float x)\n{\n    float f = mod(floor(abs(x)), 2.0);\n    float m = mod(abs(x), 1.0);\n    return f*(1.0-m)+(1.0-f)*m;\n}\nvec2 saw(vec2 x)\n{\n    return vec2(saw(x.x), saw(x.y));\n}\n\nvec3 saw(vec3 x)\n{\n    return vec3(saw(x.x), saw(x.y), saw(x.z));\n}\n\nvec4 saw(vec4 x)\n{\n    return vec4(saw(x.x), saw(x.y), saw(x.z), saw(x.w));\n}\n\n\n//-----------------ITERATED FUNCTION SYSTEM-----------------\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float gradient = uv.y;\n    \n        float scale = E;\n    uv = uv*scale-scale/2.0;\n    \n    float aspect = iResolution.x/iResolution.y;\n    \n    uv.x *= aspect;\n    \n    vec2 uv0 = uv;\n    \n    int max_iterations = 4;//-int(saw(spounge)*float(max_iterations)/2.0);\n    \n    float antispeckle = 1.0; \n    float magnification = 1.0;\n  \n\tvec4 color = vec4(0.0);\n    float map = 0.0;\n    float border = 1.0;\n    vec4 final = vec4(0.0);\n    float c1 = 0.0;\n    \n    for(int i = 0; i < max_iterations; i++)\n    {\n        float iteration = float(i)/float(max_iterations);\n    \n        float d = -cos(float(i)*PI);\n        \n        vec2 o = circle(time*d)*(1.0-iteration)/2.0;\n        \n        \n        float c = smoothstep(0.0, 1.0/E/E, 1.0-length(uv));\n        if(i == 0) c1 = c;\n        \n        \n        \n        vec2 uv2 = (uv+o)*(E+iteration);\n        float c2 = smoothstep(1.0/E, 1.0/GR, 1.0-length(uv2)*2.0/PI)*c;\n        vec2 uv3 = (uv-o)*(E+iteration);\n        float c3 = smoothstep(1.0/E, 1.0/GR, 1.0-length(uv3)*2.0/PI)*c;\n        \n        uv = ((uv)*(1.0-c2)*(1.0-c3)+\n            (uv2)*(c2)*(1.0-c3)+\n            (uv3)*(1.0-c2)*(c3))*(antispeckle)+uv*(1.0-antispeckle)*c;\n        \n        \n        border *= saw(1.0+c2*2.0)*saw(1.0+c3*2.0);\n\n        float b = pow(border, iteration);\n        float a = atan(uv.y, uv.x)/PI*.5+.5;\n        float l = d*length(uv)*.5;\n        map += smoothstep( 0.0, border*GR, GR*saw(c+c2+c3)*saw(border*saw(saw(2.0*(a+l))*saw(b*(d-c2)*(d-c3))*antispeckle)*(iteration+1.0)));\n        \n        antispeckle *= (clamp((c2+c3), 0.0, 1.0))*(1.0-saw(c2*2.0-c3)*saw(c3*2.0-c2));\n        final += vec4(flux(map*PI+time*GR*E), 1.0);\n    }\n     \n    float w = smoothstep(.8, 1.0, saw(map));\n    \n    map = smoothstep(0.0, 1.0, map);\n    fragColor = ((w+final*(1.0-w)))*map*c1+(1.0-c1)*gradient;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}