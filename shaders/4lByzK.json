{
    "Shader": {
        "info": {
            "date": "1509121754",
            "description": "- Chrome and Firefox don't produce the same LODs because firefox resize texture to upper multiple of 4.\n  ( in facts linux chrome v62 does like firefox.)\n- ShaderToy iChannelResolution (red bar) is then wrong ( white bar = textureSize(0) ).",
            "flags": 0,
            "hasliked": 0,
            "id": "4lByzK",
            "likes": 0,
            "name": "glsl bug: MIPmap LOD size",
            "published": 3,
            "tags": [
                "video",
                "texture",
                "glsl",
                "rectangle",
                "mipmap",
                "bug",
                "nonpoweroftwo"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 846
        },
        "renderpass": [
            {
                "code": "// ==== text utils\n\n// --- access to the image of ascii code c\nvec4 char(vec2 p, int c) {\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx(p/16.),dFdy(p/16.) );\n}\nvec4 pInt(vec2 p, float n) { // --- display int4\n    vec4 v = vec4(0);\n    for (float i = 2.; i>=0.; i--) \n        n /=  9.999999, // 10., // for windows :-(\n        v += char(p - .5*vec2(i,0), 48+ int(fract(n)*10.) );\n    return v;\n}\n\n// --- chars\nint CAPS=0;\n#define low CAPS=32;\n#define caps CAPS=0;\n#define spc  U.x-=.5;\n#define C(c) spc O+= char(U,64+CAPS+c);\n\n\n// === explore Lod sizes ============== */\n\nvoid mainImage( out vec4 O,  vec2 uv )\n{\n    O -= O;\n    vec2 R = iResolution.xy, U;\n    uv /= R.y;    \n    \n    U = ( uv - vec2(.0,.9) ) * 16.;  \n    caps;C(18);low;C(5);C(19);C(15);C(12);caps;C(-6); // \"Resol\"\n    \n    U = ( uv - vec2(0,.8) ) * 16.;   \n    low;C(20);C(5);C(24);C(20);C(21);                // \"text\"\n \n    U = ( uv - vec2(0,.7) ) * 8.;      \n    O += pInt(U, iChannelResolution[1].x);  U.y += .8; // texture ( video )\n    O += pInt(U, iChannelResolution[1].y);  U.y += .8; // see LOD in column 2b\n    //O += pInt(U, iChannelResolution[1].z);  U.y += .8;\n    U.y += .8;\n\n\tfloat d = 0.;\n    for (int i=0; i<=9; i++, d+=.17) {\n        U = ( uv - vec2(d,.5) ) * 16.;  \n        low C(12)C(15)C(4) U.x-=.1; C(-48+i)                // \"lod\"\n\n        U = ( uv - vec2(.03+d,.4) ) * 11.;\n        ivec2 S = textureSize(iChannel1,i);\n        O += pInt(U, float(S.x));  U.y += .8; // texture LOD\n        O += pInt(U, float(S.y));  U.y += .8;\n    }\n\n    O = O.xxxx;\n\n    float w = iChannelResolution[1].x,\n         w0 = float(textureSize(iChannel1,0).x);\n    uv.x -= .5*R.x/R.y;\n    if (uv.y<.25) {\n         uv.x += w / R.y;\n        O = texelFetch(iChannel1,ivec2(uv*R.y),0);\n        uv.x -= (w+.25*R.x)/R.y;\n        if (uv.x>=0.) O += textureLod(iChannel1,uv,4.);\n      //O += texelFetch(iChannel1,ivec2(uv*R.y),4);\n    }\n    else if (uv.y<.26 && uv.x < 0.) O.r++;\n    else if (uv.y<.27 && uv.x < (w0-w)/R.y ) O++;\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}