{
    "Shader": {
        "info": {
            "date": "1684532703",
            "description": "loop noise",
            "flags": 0,
            "hasliked": 0,
            "id": "mtyGWG",
            "likes": 0,
            "name": "Loop noise slower",
            "published": 3,
            "tags": [
                "loopnoise"
            ],
            "usePreview": 0,
            "username": "FoxDev",
            "viewed": 101
        },
        "renderpass": [
            {
                "code": "\n//\tClassic Perlin 3D Noise \n//\tby Stefan Gustavson\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\nvec3 box (vec2 sizes, vec2 uv) {\n    \n    float w = sizes.x / 2.;\n    float h = sizes.y / 2.;\n    float blur = .01;\n    \n    vec3 col = vec3(1.);\n    col -= vec3(smoothstep(-w, -w - blur, uv.x));\n    col -= vec3(smoothstep(w, w + blur, uv.x));\n    col -= vec3(smoothstep(h, h + blur, uv.y));\n    col -= vec3(smoothstep(-h, -h - blur, uv.y));\n    return col;\n}\n\n#define pi 3.14159265\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n  \n    \n    float loopDuration = 10.;\n    float speed = .02;\n    \n    float time = mod(iTime * speed / loopDuration, 1.);\n    float playhead = .5 * sin(time * pi * 2.) + 2.;\n    \n    float s = sin(time * 2. * pi) + 1.;\n    float c = cos(time * 2. * pi) + 1.;\n    \n    \n    float zoom = 1.;\n    vec2 uvNoise = uv * zoom;\n    \n\n    \n    float n1 = cnoise(vec3(uvNoise, s));\n    float n2 = cnoise(vec3(uvNoise, c));\n    \n    \n\tvec3 col1 = vec3(3.9 * uvNoise.x + n2, uvNoise.x + n2, 1.);\n    vec3 col2 = vec3(2.2 * uvNoise.x + n1, uvNoise.x + n2, 1.);\n        \n    vec3 col = mix(col1, col2, playhead);\n    \n    col = vec3(col.r);\n    \n    vec3 t2 = vec3(1., uv.y, 0.);    \n    vec3 t1 = vec3(uv.x * .5 + .5, uv.y, 1.);   \n    t2 += mod(col, 0.2);\n    t1 += mod(col, 0.2);\n    \n\tcol = clamp(col, 0., 1.);\n    col = mix(t1, t2, col);\n    \n    \n    // Output to screen\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}