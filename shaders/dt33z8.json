{
    "Shader": {
        "info": {
            "date": "1681917257",
            "description": "An auto-VJ with a few simple frequency & compression visualizations. Utilizing buffer for frame blending & recent max amplitude indicators. \n\n- Use with audio in iChannel0 of Buffer A -",
            "flags": 32,
            "hasliked": 0,
            "id": "dt33z8",
            "likes": 1,
            "name": "Aurora Apollalis",
            "published": 3,
            "tags": [
                "2d",
                "music",
                "buffer",
                "virtualdj"
            ],
            "usePreview": 0,
            "username": "QuantumSuper",
            "viewed": 180
        },
        "renderpass": [
            {
                "code": "// Aurora Apollalis 0.13.230420 by QuantumSuper\n// auto-vj with simple frequency & compression visualizations\n// ...and more debugging than designing to get it running in VirtualDJ\n//\n// - use with audio in iChannel0 of Buffer A -\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    vec3 col = texelFetch( iChannel1, ivec2(fragCoord), 0).rgb; //read buffer\n    col *= abs(sin(.2666*iTime+vec3(0,.7854,1.571))); //color shift\n    fragColor = vec4( col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// BUFFER A (0.22) of Aurora Apollalis by QuantumSuper\n// workaround for VirtualDJ to get music iChannel recognized & avoid buffer self read\n// iFrameRate also seem incompatible, use define to match yours\n// \n// - use with audio in iChannel0 of Buffer A -\n\n#define FRAMERATE 30.\n \nvec4 fft, ffts; //compressed frequency amplitudes\n\nvoid compressFft(){ //compress sound in iChannel0 to simplified amplitude estimations by frequency-range\n    fft = vec4(0), ffts = vec4(0);\n\n\t// Sound (assume sound texture with 44.1kHz in 512 texels, cf. https://www.shadertoy.com/view/Xds3Rr)\n    for (int n=1;n<3;n++) fft.x  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //bass, 0-517Hz, reduced to 86-258Hz\n    for (int n=6;n<8;n++) ffts.x  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech I, 517-689Hz\n    for (int n=8;n<14;n+=2) ffts.y  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech II, 689-1206Hz\n    for (int n=14;n<24;n+=4) ffts.z  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech III, 1206-2067Hz\n    for (int n=24;n<95;n+=10) fft.z  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //presence, 2067-8183Hz, tenth sample\n    for (int n=95;n<512;n+=100) fft.w  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //brilliance, 8183-44100Hz, tenth2 sample\n    fft.y = dot(ffts.xyz,vec3(1)); //speech I-III, 517-2067Hz\n    ffts.w = dot(fft.xyzw,vec4(1)); //overall loudness\n    fft /= vec4(2,8,7,4); ffts /= vec4(2,3,3,21); //normalize\n}\n\nvoid mainImage( out vec4 col, in vec2 fC){\n    compressFft(); //initializes fft, ffts\n    vec2 uv = fC/iResolution.xy; //x,y each 0 to 1\n    \n    // Save sound info\n         if (fC.y<1.) col = fft;\n    else if (fC.y<2.) col = ffts;\n    else if (fC.y<3.) col.r = texelFetch(iChannel0,ivec2(uv.x*512.,0),0).x;\n    else if (fC.y<4.) col = (iFrame>1)? vec4(clamp( texelFetch( iChannel1, ivec2(fC.x,3), 0).r - .25/FRAMERATE, 3./iResolution.y, 1.)) : vec4(4./iResolution.y); //lastMax \n    else col = vec4(.5,.2,1.,0)*texelFetch(iChannel1,ivec2(fC.xy),0).x + clamp(texelFetch(iChannel0,ivec2(uv.x*512.,0),0).x-uv.y +4./iResolution.y,-.1,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// BUFFER B (0.44) of Aurora Apollalis by QuantumSuper\n// frame blending, recent max amplitude per frequency update, spectrum compressed into symbols\n// bonus: including rain when max indicator hits bottom of screen (marker hits its own position memory buffer)\n// \n// - use with audio in iChannel0 of Buffer A -\n\nfloat circ(vec2 pos, float rad){\n    rad -= length(pos);\n    return smoothstep(fwidth(-rad),0.,-rad);\n}\n\nfloat square(vec2 pos, float width){\n    pos = abs(pos)-width/2.;\n    width = max(pos.x,pos.y);\n    return smoothstep(fwidth(width),0.,width);\n}\n\nfloat triangle(vec2 pos, float scale){ //based on: https://iquilezles.org/articles/distfunctions2d/\n    const float k = sqrt(3.);\n    pos /= scale;\n    pos = vec2( abs(pos.x) - 1., pos.y + 1./k);\n    if (pos.x+k*pos.y>0.) pos = vec2(pos.x-k*pos.y,-k*pos.x-pos.y)/2.;\n    pos.x -= clamp(pos.x,-2.,0.);\n    scale = -length(pos)*sign(pos.y);\n    return smoothstep(fwidth(scale),0.,scale);\n}\n\nvoid mainImage( out vec4 col, in vec2 fC){\n    vec2 uv = fC/iResolution.xy; //x,y each 0 to 1\n    vec2 uvs = (2.*fC-iResolution.xy) / max( iResolution.x, iResolution.y); //long edge -1 to 1, square aspect ratio\n    \n    // Sound texture & color fade\n    float amp = texelFetch( iChannel0, ivec2(fC.x,2), 0).r; //read prepared sound info (workaround)\n    vec4 ffts = texelFetch( iChannel0, ivec2(1), 0); //read prepared compression info 2 (workaround)\n    vec4 fft = texelFetch( iChannel0, ivec2(0), 0); //read prepared compression info 1 (workaround)\n    col = texelFetch( iChannel0, ivec2(fC.xy), 0);\n    if (fC.y>4.) col.g += .7*fft.w; //green tint atop\n    \n    // Max indicator\n    float lastMax = texelFetch( iChannel0, ivec2(fC.x,3), 0).r; //read last max (workaround)\n    if (floor(fC.y)==3.) col.r = (lastMax<amp)? amp : lastMax; //save new max    \n    if (uv.y>lastMax && uv.y<lastMax+.006) col.r = (floor(fC.y)==3.)? 1. : ffts.w; //draw max indicator\n    \n    // Compression symbols\n    col += .7 * (.3 + .7 * vec4(ffts.x,ffts.y,ffts.z, 0)) * dot( vec3(1), vec3(\n        circ(uvs+vec2(.5,0),.21*(.25+fft.x)),\n        square(uvs+vec2(   0),.36*(.25+fft.y)),\n        triangle(uvs-vec2(.5,-.06*(.25+fft.z)),.23*(.2+fft.z))));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}