{
    "Shader": {
        "info": {
            "date": "1617639609",
            "description": "Playing around with the mandelbox fractal and audio",
            "flags": 64,
            "hasliked": 0,
            "id": "7sS3RK",
            "likes": 2,
            "name": "Spacemandel1",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbox",
                "audioreactive",
                "soundcloud"
            ],
            "usePreview": 0,
            "username": "Chaotnix",
            "viewed": 284
        },
        "renderpass": [
            {
                "code": "\n#define ITERS 6\n\nfloat SCALE=2.0;\nfloat MR2=0.0;\n\nfloat mandelbox(vec3 position){\n  vec4 scalevec = vec4(SCALE, SCALE, SCALE, abs(SCALE)) / MR2;\n  float C1 = abs(SCALE + 7.0), C2 = pow(abs(SCALE), float(1-ITERS));\n  vec4 p = vec4(position.xyz, 1.0) + 0.8 * pow(texture(iChannel0, vec2(length(position.xyz), 0.26) ).x, 0.2), p0 = vec4(position.xyz, 1.0) + 0.8 * pow(texture(iChannel0, vec2(length(position.xyz), 0.26) ).x, 0.2);  // p.w is knighty's DEfactor\n  //vec4 p = vec4(position.xyz, 1.0) + pow(texture(iChannel0, vec2(length(position.xyz), 0.1) ).x, 0.1)/4., p0 = vec4(position.xyz, 1.0) + pow(texture(iChannel0, vec2(length(position.xyz), 0.1) ).x, 0.1)/4.5;  // p.w is knighty's DEfactor\n  for (int i=0; i<ITERS; i++) {\n    p.xyz = clamp(p.xyz, -1.0, 1.0) * 2.0 - p.xyz;  // box fold: min3, max3, mad3\n    float r2 = dot(p.xyz, p.xyz);  // dp3\n    p.xyzw *= clamp(max(MR2/r2, MR2), 0.0, 1.0);  // sphere fold: div1, max1.sat, mul4\n    p.xyzw = p*scalevec + p0/6.;  // mad4\n}\n  return (length(p.xyz) - C1) / p.w - C2;\n}\n\nfloat color(vec3 p){\n    vec3 op = p;\n    for (int i=0; i<ITERS; i++) {\n        p.xyz = clamp(p.xyz, -1.0, 1.0) * 2.0 - p.xyz;  // box fold: min3, max3, mad3\n        float r2 = dot(p.xyz, p.xyz);  // dp3\n        p.xyz *= clamp(max(MR2/r2, MR2), 0.0, 1.0);  // sphere fold: div1, max1.sat, mul4\n        p.xyz = p*SCALE/MR2 + op;  // mad4\n        p.xyz = p - mix(vec3(0.2),p,smoothstep(.04,0.06, 0.002 * pow(texture(iChannel0, vec2(length(p.xy), 0.) ).x/3., 0.01)*4.));\n//p; //- pow(texture(iChannel0, vec2(length(p.xy), 0.) ).x/3., 0.01)*4.;\n\n    }\n  \treturn length(p/2.);\n}\n\nfloat trace(vec3 o,vec3 d){\n    float v=0.2;\n    for(int i=0;i<34;i++){\n        vec3 p=o+d*v;\n        p=p + 1.;// + 0.2 * texture(iChannel0, vec2(length(p.xy), 1.) ).x;\n        float mv=mandelbox(p);        \n        if(mv<0.01){\n            return v;\n        }\n        v+=mv *.9;\n    }\n    return 0.;\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy)*4.-1.5;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 4.0;\n   //SCALE = 2.5 + iMouse.x * 2.0;\n   // MR2 = iMouse.x * iMouse.x;\n    //SCALE = 2.9 + sin(iTime*10.0)*.0;\n    SCALE = 2.4;\n    float mr = 0.6;\n    MR2 = mr * mr;\n    \n      \n    vec3 lookingTo = vec3(3.,2.,4.);\n    float it = iTime / 5.;\n    vec3 viewer = vec3(\n        sin(iTime*.1) * 6.0,\n        cos(iTime*.17) * 5.0,\n        cos(iTime*.1) * 6.0\n    );\n    \n    vec3 forward = normalize(lookingTo-viewer);\n    vec3 rigth = cross(vec3(1.0,1.0,0.0),forward);\n    vec3 up = cross(forward,rigth);\n    \n    vec3 direction = normalize(forward/0.1 * pow(texture(iChannel0, vec2(length(uv.y),.8) ).x, 0.005) + rigth * uv.x + up * uv.y);\n    \n    float dist = trace(viewer,direction);\n    vec3 col=vec3(0.0);\n    if(dist <=0.) {\n    //    dist=dist + 2. * texture(iChannel0, vec2(length(dist),0.005) ).x;\n\t\tdist = 1. - dist + 2. * texture(iChannel0, vec2(length(dist),0.005) ).x;\t\n    };    \n     vec3 p = viewer + direction * dist ;\n    \n    \n    if(dist!=0.) {\n        \n         float c = color(p);\n        \n   \t\t col = pal(c/50.0, \n                   vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.7),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20)\n                   //vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25)\n                   //vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25)\n                  );\n\n        //col = vec3(1.0);\n    };\n\n    \n   \n   \n    float fog = .8 + .05 * texture(iChannel0, vec2(length(p),.3) ).x;\n    fragColor.rgb = vec3(col * fog);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 26489,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/4i20music/4i20-thanks-for-10k-folows-dj"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}