{
    "Shader": {
        "info": {
            "date": "1640693224",
            "description": "basic playing with shattering the webcam stream through voronoi",
            "flags": 0,
            "hasliked": 0,
            "id": "styXWD",
            "likes": 7,
            "name": "VORONOI_SHATTER_WEBCAM",
            "published": 3,
            "tags": [
                "voronoi",
                "worley",
                "shatter",
                "webcam",
                "mirror",
                "split"
            ],
            "usePreview": 0,
            "username": "SimonOakey",
            "viewed": 409
        },
        "renderpass": [
            {
                "code": "vec2 hash( vec2 p )\n{\n    //p = mod(p, 4.0); // tile\n    p = vec2(dot(p,vec2(127.1,311.7)),\n             dot(p,vec2(269.5,183.3)));\n    return fract(sin(p)*18.5453);\n}\n\n// return distance, and cell id\nvec2 voronoi( in vec2 x )\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n\n\tvec3 m = vec3( 8.0 );\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2  g = vec2( float(i), float(j) );\n        vec2  o = hash( n + g );\n      //vec2  r = g - f + o;\n\t    vec2  r = g - f + (0.5+0.5*sin(iTime+6.2831*o));\n\t\tfloat d = dot( r, r );\n        if( d<m.x )\n            m = vec3( d, o );\n    }\n\n    return vec2( sqrt(m.x), m.y+m.z );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy/max(iResolution.x,iResolution.y);\n   p.y *=1.77;\n   \n   /*\n     \n     // axial mirror\n     p.x -=.5;\n     p.y -=.5;\n   \n    p.x = abs(-p.x*2.);\n    p.y = abs(-p.y*2.);\n    \n    */\n    \n    float rmx = iMouse.x/iResolution.x;\n    float rmy = iMouse.y/iResolution.y;\n    \n        \n    // redudndant - only for demo purpose\n     if(iMouse.x ==0.){ rmx = .7 ;}\n     if(iMouse.y ==0.){ rmy = .7 ;}\n    \n    // voronoi patterm\n    vec2 c = voronoi( 3.0+p*rmx*12. );\n\n   \n   \n    \n    //basic voronoi uv in gray\n    vec3 col = vec3(c.y,c.y,c.y);\n    \n    // add distance to center\n    col -= vec3(c.x,c.x,c.x);\n   \n   // above only for testing\n   \n   \n   // get real uv data\n    vec2 vpos = p.xy;\n    \n   \n    \n    vpos.xy -= c.yy*rmy;\n  \n  // distord by voronoi distance - todo - looks shitty ;)\n   //vpos += (( c.xx *6.3)-1.0)*.04*c.x*(1.-rmx);\n   \n   //safety first\n    vpos.x = abs(vpos.x);\n    vpos.y = abs(vpos.y);\n   \n    \n     col = texture( iChannel0, vpos.xy ).rgb;\n     \n     // darken cell edges\n     col -= c.xxx*.33*rmy;\n     \n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}