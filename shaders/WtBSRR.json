{
    "Shader": {
        "info": {
            "date": "1564709291",
            "description": "Based off Karis, 2014:\nhttps://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_slides.pdf'\n\nYou can drag the mouse from left to right to increase the roughness.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtBSRR",
            "likes": 11,
            "name": "Prefiltered Environment Map",
            "published": 3,
            "tags": [
                "ibl",
                "pbr",
                "karis"
            ],
            "usePreview": 0,
            "username": "bruOp",
            "viewed": 1242
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653589793\n\nfloat saturate(float x) {\n    return clamp(x, 0.0, 1.0);\n}\n\n\nfloat D_GGX(float NoH, float linearRoughness) {\n    float a = NoH * linearRoughness;\n    float k = linearRoughness / (1.0 - NoH * NoH + a * a);\n    return k * k * (1.0 / PI);\n}\n\n\n// Taken from https://github.com/SaschaWillems/Vulkan-glTF-PBR/blob/master/data/shaders/genbrdflut.frag\n// Based on http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html\nvec2 hammersley(uint i, uint N) \n{\n\t// Radical inverse based on http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html\n\tuint bits = (i << 16u) | (i >> 16u);\n\tbits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\n\tbits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\n\tbits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\n\tbits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\n\tfloat rdi = float(bits) * 2.3283064365386963e-10;\n\treturn vec2(float(i) /float(N), rdi);\n}\n\n// From the filament docs. Geometric Shadowing function\n// https://google.github.io/filament/Filament.html#toc4.4.2\nfloat G_Smith(float NoV, float NoL, float roughness)\n{\n\tfloat k = (roughness * roughness) / 2.0;\n\tfloat GGXL = NoL / (NoL * (1.0 - k) + k);\n\tfloat GGXV = NoV / (NoV * (1.0 - k) + k);\n\treturn GGXL * GGXV;\n}\n\n// Based on Karis 2014\nvec3 importanceSampleGGX(vec2 Xi, float linearRoughness, vec3 N)\n{\n    float a = linearRoughness * linearRoughness;\n    // Sample in spherical coordinates\n    float Phi = 2.0 * PI * Xi.x;\n    float CosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));\n    float SinTheta = sqrt(1.0 - CosTheta * CosTheta);\n    // Construct tangent space vector\n    vec3 H;\n    H.x = SinTheta * cos(Phi);\n    H.y = SinTheta * sin(Phi);\n    H.z = CosTheta;\n    \n    // Tangent to world space\n    vec3 UpVector = abs(N.z) < 0.999 ? vec3(0.,0.,1.0) : vec3(1.0,0.,0.);\n    vec3 TangentX = normalize(cross(UpVector, N));\n    vec3 TangentY = cross(N, TangentX);\n    return TangentX * H.x + TangentY * H.y + N * H.z;\n}\n\nvec3 prefilterEnvMap(float roughness, vec3 R)\n{\n  vec3 N = R;\n  vec3 V = R;\n  vec3 prefilteredColor = vec3(0.0);\n  const uint numSamples = 64u;\n  float totalWeight = 0.0;\n  float imgSize = float(textureSize(iChannel0, 0).x);\n    \n  for (uint i = 0u; i < numSamples; i++) {\n    vec2 Xi = hammersley(i, numSamples);\n    vec3 H = importanceSampleGGX(Xi, roughness, N);\n    vec3 L = 2.0 * dot(V, H) * H - V;\n    float NoL = saturate(dot(N, L));\n    float NoH = saturate(dot(N, H));\n          \n    if (NoL > 0.0) {\n      // Based off https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch20.html\n      // Typically you'd have the following:\n      // float pdf = D_GGX(NoH, roughness) * NoH / (4.0 * VoH);\n      // but since V = N => VoH == NoH\n      float pdf = D_GGX(NoH, roughness) / 4.0 + 0.001;\n      // Solid angle of current sample -- bigger for less likely samples\n      float omegaS = 1.0 / (float(numSamples) * pdf);\n      // Solid angle  of pixel\n      float omegaP = 4.0 * PI / (6.0 * imgSize  * imgSize);\n      float mipLevel = max(0.5 * log2(omegaS / omegaP), 0.0);\n      prefilteredColor += textureLod(iChannel0, L, mipLevel).rgb * NoL;\n      totalWeight += NoL;\n    }\n  }\n  return prefilteredColor / totalWeight;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\t\n    vec3 R = normalize(vec3(1.0, 2.0 * uv.yx - 1.0));\n    \n    float roughness = iMouse.x / iResolution.x + 0.0001;\n    \n    // Output to screen\n    vec3 res = prefilterEnvMap(roughness, R);\n    \n    // Scale and Bias for F0 (as per Karis 2014)\n    fragColor = vec4(res, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}