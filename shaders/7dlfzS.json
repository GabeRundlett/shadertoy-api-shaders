{
    "Shader": {
        "info": {
            "date": "1645026691",
            "description": "Gaz smol raymarch + meger sponge fracal from previous week shader (lost ref T_T))\n",
            "flags": 0,
            "hasliked": 0,
            "id": "7dlfzS",
            "likes": 7,
            "name": "大龙猫 - 20220216",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 295
        },
        "renderpass": [
            {
                "code": "/**\nGaz smol raymarch + meger sponge fracal from previous week shader (lost ref T_T))\n\n\n*/\n\n#define R(p,a,t) (mix(a*dot(p,a),p,cos(t))+sin(t)*cross(p,a))\nmat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\n// distance to a menger sponge of n = 1\nfloat crossDist( in vec3 p ) {\n  \n    vec3 absp = abs(p);\n  \n    //return length(p.yx+sin(p.z)*.05)-2.7;\n    // get the distance to the closest axis\n    float maxyz = max(absp.y, absp.z);\n    float maxxz = max(absp.x, absp.z);\n    float maxxy = max(absp.x, absp.y);\n    float cr = 1.0 - (step(maxyz, absp.x)*maxyz+step(maxxz, absp.y)*maxxz+step(maxxy, absp.z)*maxxy);\n    // cube\n    float cu = max(maxxy, absp.y) - 3.0;\n    // remove the cross from the cube\n    return max(cr, cu);\n}\n\n// menger sponge fractal\nfloat fractal( in vec3 p ) {\n    vec3 pp = p;\n    float scale = 1.0;\n    float dist = 0.0;\n    for (int i = 0 ; i < 6 ; i++) {\n    \n        dist = max(dist, crossDist(p)*scale);\n        \n        p = fract((p-1.0)*0.5) * 6.0 - 3.0;\n        scale /= 3.;\n        //p.yz*=rot(.785);\n        \n    }\n\n    return dist;\n}\nvec3 pal(float t){ return vec3(.4,.5,.6)+vec3(.2,.3,.5)*cos(6.28*(vec3(.2,.2,.3)*t+vec3(.2,.5,.8)));}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 p,c=vec3(0.);\n    vec3 d = normalize(vec3(fragCoord.xy -.5*iResolution.xy,iResolution.y));\n    for(float i=0.,s,e,g=0.,t=iTime;i++<50.;){\n        p=g*d;\n        p = R(p,normalize(vec3(.1+cos(iTime*.5+p.z*.2)*.5,sin(iTime*.5+p.z*.2)*.5,.5)),.5+t*.2);\n\n        p.z +=iTime;\n        p=asin(cos(p))-vec3(2,4,1);\n        p = mod(p,4.)-2.;\n        s=1.;\n        \n        g+=e=max(.0001,abs(fractal(p))+.0009);\n        c+=2.*sqrt(pal(p.z/6.28))*.02/exp(i*i*e);\n    }\n    c*=c;\n    fragColor = vec4(c,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}