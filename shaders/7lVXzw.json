{
    "Shader": {
        "info": {
            "date": "1640411427",
            "description": "Spirals, ya dig?",
            "flags": 0,
            "hasliked": 0,
            "id": "7lVXzw",
            "likes": 1,
            "name": "eindacor_spiralwave",
            "published": 3,
            "tags": [
                "spiral"
            ],
            "usePreview": 0,
            "username": "Eindacor_DS",
            "viewed": 237
        },
        "renderpass": [
            {
                "code": "#define TWOPI 6.28318530718f\n#define AA 0.001f\n\n#define CYAN vec3(0., .2, .2)\n#define MAGENTA vec3(.2, 0., .2)\n#define YELLOW vec3(.2, .2, 0.)\n#define BLACK vec3(0.)\n\n\nfloat getHoldTransitionValue(float lower, float upper, float holdTime, float transitionTime, float time) {\n    float period = 2. * holdTime + 2. * transitionTime;\n    float halfPeriod = period / 2.;\n    float relativeTime = fract(time / halfPeriod);\n    float halfHoldTime = holdTime / 2.;\n    \n    float val = smoothstep(halfHoldTime, halfHoldTime + transitionTime, relativeTime * halfPeriod);\n    \n    if (int(time / halfPeriod) % 2 == 0) {\n        val = 1. - val;\n    }\n\n    return mix(lower, upper, val);\n}\n\nfloat getOffsetAngle(vec2 first, vec2 second) {\n    vec2 offsetVec = second - first;\n    float angle = atan(offsetVec.y / offsetVec.x);\n    \n    \n    if (first.x < second.x) {\n        angle = TWOPI / 2.f + angle;\n    } else if (first.y > second.y) {\n        angle = TWOPI + angle;\n    }\n    \n    return angle;\n}\n\nfloat getRadialVal(vec2 p1, vec2 p2) {\n    float offsetAngle = getOffsetAngle(p1, p2);\n    offsetAngle = mod(TWOPI - offsetAngle + 3.f * TWOPI / 6.f, TWOPI);\n    return offsetAngle / TWOPI;\n}\n\nmat2x2 createRotationMatrix(float rotation) {\n    return mat2x2(\n        cos(rotation), -sin(rotation),\n        sin(rotation), cos(rotation)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspectRatio = iResolution.x / iResolution.y;\n    uv.x *= aspectRatio;\n    \n    \n    float bandWidth = getHoldTransitionValue(0.1, .5, 0., 45., iTime);\n    \n    vec2 center = vec2(.5 * aspectRatio, .5);\n    \n    uv = (uv - center) * createRotationMatrix(TWOPI / 4. + iTime * .3) + center;\n    \n    float angle = asin((uv.y - center.y)/distance(uv, center));\n    \n    float sinModCoeff = getHoldTransitionValue(0., .02, 3., 10., iTime);\n    \n    float radialVal = getRadialVal(center, uv);\n    float dist = distance(uv, center) + bandWidth * radialVal + sin((radialVal + iTime * .05) * TWOPI * 10.) * sinModCoeff; \n    float dist2 = distance(uv, center) + bandWidth * -radialVal + sin((radialVal + iTime * .05) * TWOPI * 10.) * sinModCoeff; \n    \n    float val = pow(mod(dist, bandWidth) / bandWidth, 2.);\n    float val2 = pow(mod(dist2, bandWidth) / bandWidth, 2.);\n    \n    float coeff = getHoldTransitionValue(1., 3., 0., 26., iTime);\n    vec3 cyan = mix(vec3(1.), CYAN, getHoldTransitionValue(0., pow(val, coeff), 3., 10., iTime));\n    vec3 magenta = mix(vec3(1.), MAGENTA, getHoldTransitionValue(0., pow(val2, coeff), 3., 10., iTime + 13.));\n   \n    // Output to screen\n    vec3 modColor = vec3(1., .95, .8);\n    fragColor = vec4(cyan * magenta * modColor,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}