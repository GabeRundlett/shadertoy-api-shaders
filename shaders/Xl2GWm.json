{
    "Shader": {
        "info": {
            "date": "1438230831",
            "description": "Just a little bit of messing around with no specific goals or direction.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xl2GWm",
            "likes": 17,
            "name": "70s Dancing Wallpaper",
            "published": 3,
            "tags": [
                "2d",
                "sound"
            ],
            "usePreview": 0,
            "username": "HamzaHutchinson",
            "viewed": 3391
        },
        "renderpass": [
            {
                "code": "const float bgwidth = 0.2;\nconst float speed = 0.2;\nconst float size = 0.7;\nconst float thickness = 0.1;\nconst float spikiness = 0.3;\nconst float arms = 4.;\nconst float tiling = 5.;\nconst vec3 color1 = vec3( 0.9, 0.25, 0.4 );\nconst vec3 color2 = vec3( 0.3, 0.75, 0.2 );\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3( 0. );\n    \n\tvec2 uv = 2. * fragCoord.xy / iResolution.xy - vec2( 1. );\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float t = speed * iTime;\n    \n    vec2 l = normalize( vec2( cos( t ), sin( t ) ) );\n    float d = length( uv - dot( uv, l ) * l );\n    float m = ( 1.0 - bgwidth * d * d );\n    \n    uv = sin( tiling * uv );\n    float f = atan( uv.y, uv.x ) + speed * iTime;\n    \n    float s = size;\n    s += spikiness * sin( arms * f );\n    s += texture( iChannel0, vec2( 1., 0. ) ).x;\n    \n    d = length( uv ) - s;\n    bool inside = d < 0.;\n    d = abs( d );\n    \n    if( inside ) col += m * color1;\n    else col += m * color2;\n    \n\tfloat w = fwidth( d );\n\tfloat a = mix( 1., 0., smoothstep( -w, w, d - thickness ) );\n    col += a * vec3( 1. );\n    \n\tfragColor = vec4( col, 1. );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 34,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}