{
    "Shader": {
        "info": {
            "date": "1546003403",
            "description": "[url]https://en.wikipedia.org/wiki/Zonohedron[/url]\n\n<mouse>, <up>,<down>: change view\n'z': Colour by zones\n't': enable transparency\n",
            "flags": 48,
            "hasliked": 0,
            "id": "tsX3W8",
            "likes": 7,
            "name": "Zonohedron",
            "published": 3,
            "tags": [
                "zonohedra",
                "zonohedron"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 463
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// A Zonohedron. mla, 2018.\n//\n// Not seen zonohedra on Shadertoy, though the shader name \"Zonohedra\"\n// is taken, so someone has been thinking about it.\n//\n// https://en.wikipedia.org/wiki/Zonohedron\n//\n// Uses a simple algorithm to find the face planes of the Zonohedron, then\n// intersects the ray with the planes enclosing the origin.\n//\n// Algorithm is n^3 in number of vectors, but the inner loop is fairly fast.\n//\n// Usual mouse & arrow keys for changing view.\n// 'z' colours the zonohedron by zone.\n// 't' enables transparency.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n//#define ALTERNATIVE\n\nconst float PI =  3.141592654;\nconst float TWOPI = 2.0*PI;\n\nconst int CHAR_T = 84;\nconst int CHAR_Z = 90;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nbool keypress(int code) {\n  return texelFetch(iChannel0, ivec2(code,2),0).x != 0.0;\n}\n\nvec4 store(int i,int j) {\n  return texelFetch(iChannel1, ivec2(i,j),0);\n}\n\nint keycount(int key) {\n  return int(store(0,key).x);\n}\n\nvec2 rotate(vec2 p, float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\n#if defined ALTERNATIVE\n// Alternative zonohedron. Mainly for testing.\nconst int NVECS = 13;\n\nvec3 vecs[] = vec3[]\n  (vec3(1,1,1),\n   vec3(1,-1,1),\n   vec3(-1,1,1),\n   vec3(-1,-1,1),\n   vec3(1,0,0),\n   vec3(0,1,0),\n   vec3(0,0,1),\n   vec3(1,1,0),\n   vec3(0,1,1),\n   vec3(1,0,1),\n   vec3(1,-1,0),\n   vec3(0,1,-1),\n   vec3(1,0,-1));\n\nvoid initvecs() {\n}\n#else\n\nconst int NVECS = 20;\nvec3 vecs[NVECS];\n\nfloat K;\nvec3 getvec(int i) {\n  float theta = TWOPI/float(NVECS)*float(i);\n  return vec3(cos(theta),sin(theta),K);\n}\n\nvoid initvecs0() {\n  float t = iTime;\n  // Can't quite cope with completely flat vectors.\n  K = 0.707*(1.0 - 0.99*cos(t));\n}\nvoid initvecs() {\n  initvecs0();\n  for (int i = 0; i < NVECS; i++) vecs[i] = getvec(i);\n}\n#endif\n\n#if 0\n#define INITVECS() initvecs()\n#define VEC(i) vecs[i]\n#else\n#define INITVECS() initvecs0()\n#define VEC(i) getvec(i)\n#endif\n\nbool solve(vec3 p0, vec3 r, out vec3 enormal, out vec3 inormal) {\n  vec3 vsum = vec3(0);\n  for (int i = 0; i < NVECS; i++) {\n    vsum += VEC(i);\n  }\n  float lastfront = 0.0;\n  float firstback = 1e8;\n  for (int i = 0; i < NVECS-1; i++) {\n    vec3 vi = VEC(i);\n    for (int j = i+1; j < NVECS; j++) {\n      vec3 vj = VEC(j);\n      vec3 n = cross(vi,vj);\n      vec3 p1 = 0.5*vsum;\n      for (int k = 0; k < NVECS; k++) {\n        vec3 vk = VEC(k);\n        if (dot(vk,n) < 0.0) {\n          p1 -= vk;\n        }\n      }\n      for (int s = 0; s < 2; s++) {\n        // Intersect ray (p0,r) with plane (p1,n)\n        // ie. find k with (p0 + kr - p1).n = 0\n        float rn = dot(r,n);\n        if (rn == 0.0) rn = 1e-6;\n        float k = dot(p1-p0,n)/rn;\n        //assert(eq(dot(p0+k*r-p1,n),0.0));\n        if (rn > 0.0) {\n          // Back face\n          if (k < firstback) {\n            // Found a better back face\n            firstback = k;\n            inormal = n;\n          }\n        } else if (k > lastfront) {\n          // Found a better front face\n          lastfront = k;\n          enormal = n;\n        }\n        n = -n; p1 = -p1;\n      }\n      if (lastfront >= firstback) return false;\n    }\n  }\n  return lastfront > 0.0;\n}\n\n// Thomas Wang hash\nuint ihash(uint a) {\n  a = (a ^ 61U) ^ (a >> 16);\n  a *= 9U;\n  a = a ^ (a >> 4);\n  a = a * 0x27d4eb2dU;\n  a = a ^ (a >> 15);\n  return a;\n}\n\n// Smooth HSV to RGB conversion \n// Function by iq, from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(float h, float s, float v) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return v * mix( vec3(1.0), rgb, s);\n}\n\nfloat uint2float(uint n) {\n  return float(n)/float(0xffffffffU);\n}\n\nvec3 getfacenormal(vec3 normal) {\n  for (int i = 0; i < NVECS-1; i++) {\n    for (int j = i+1; j < NVECS; j++) {\n      vec3 facenormal = cross(VEC(i),VEC(j));\n      vec3 c = cross(normal,facenormal);\n      if (dot(c,c) < 1e-8) return facenormal;\n    }\n  }\n  return vec3(0);\n}\n\nint getzone(vec3 normal) {\n  for (int i = 0; i < NVECS-1; i++) {\n    for (int j = i+1; j < NVECS; j++) {\n      vec3 facenormal = cross(VEC(i),VEC(j));\n      vec3 c = cross(normal,facenormal);\n      if (dot(c,c) < 1e-8) {\n        if (dot(normal,facenormal) < 0.0) return i;\n        else return j;\n      }\n    }\n  }\n  return 0;\n}\n\nvec3 getcolor(vec3 normal, vec3 r, vec3 light) {\n  float hsv;\n  if (keypress(CHAR_Z)) {\n    int zone = getzone(normal);\n    hsv = float(zone)/float(NVECS);\n  } else {\n    vec3 facenormal = getfacenormal(normal);\n    //float hsv = uint2float(ihash(uint(floor(iTime)+1000.0*length(facenormal)+0.5)));\n    hsv = 0.5*length(facenormal)+0.1*iTime;\n  }\n  vec3 basecolor = hsv2rgb(hsv,1.0,1.0);\n  vec3 color = basecolor;\n  float ambient = 0.5;\n  float diffuse = 0.5;\n  color *= ambient;\n  float k = dot(light,normal);\n  if (k > 0.0) {\n    color += basecolor*diffuse*k;\n  }\n  if (k > 0.0) {\n    float specular = pow(max(0.0,dot(reflect(light,normal),r)),4.0);\n    color += 0.8*specular*vec3(1);\n  }\n  return color;\n}\n\nvec3 surface(vec3 p0, vec3 r, vec3 light, bool transparent) {\n  vec3 enormal, inormal; // Interior and exterior normals\n  if (!solve(p0,r,enormal,inormal)) return vec3(0);\n  enormal = normalize(enormal);\n  vec3 color = getcolor(enormal,r,light);\n  if (transparent) {\n    inormal = normalize(inormal);\n    color = 0.6*color + 0.4*getcolor(inormal,r,light);\n  }\n  return color;\n}\n\nvec3 transform(vec3 p) {\n  if (iMouse.x > 0.0) {\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,-theta);\n    p.zx = rotate(p.zx,phi);\n  }\n  float t = iTime;\n  p.yz = rotate(p.yz,t * 0.125);\n  p.zx = rotate(p.zx,-t * 0.2);\n  return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  INITVECS();\n  // Projection parameters\n  float scale = 1.0;\n  vec2 uv = scale * (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n  float camera = 32.0;\n\n  camera *= 0.1*float(10+keycount(KEY_DOWN)-keycount(KEY_UP));\n\n  vec3 light = vec3(0.5,1,-1);\n\n  vec3 p0 = vec3(0,0,-camera);\n  vec3 r = vec3(0,0,2);\n  r += vec3(uv,0);\n  \n  p0 = transform(p0);\n  r = transform(r);\n  r = normalize(r);\n  light = transform(light);\n  light = normalize(light);\n  bool transparent = keypress(CHAR_T);\n  vec3 color = surface(p0,r,light,transparent);\n  color = sqrt(color);\n  //if (alert) color.x = 1.0;\n  fragColor = vec4(color,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel0,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n#if __VERSION__ < 300\n    t = vec4(0);\n#else\n    \n    int i = int(uv.x);\n    int j = int(uv.y);\n    if ( iFrame == 0 ) {\n        t = vec4(0);\n    } else {\n        t = texelFetch(iChannel1,ivec2(i,j),0); // Get current state   \n    }  \n    if (i == 0) {\n        float w1 = keystate(j,2).x;\n        if (w1 != t.w) {\n            t.w = w1;\n            t.x++;\n        }\n    }     \n        \n#endif           \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}