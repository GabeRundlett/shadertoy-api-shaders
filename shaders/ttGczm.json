{
    "Shader": {
        "info": {
            "date": "1610691754",
            "description": "it squirms.\nhttps://cineshader.com/view/ttGczm",
            "flags": 0,
            "hasliked": 0,
            "id": "ttGczm",
            "likes": 6,
            "name": "squishy noise 2",
            "published": 3,
            "tags": [
                "noise",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "fraser",
            "viewed": 9737
        },
        "renderpass": [
            {
                "code": "//<3d simplex noise by nikat https://www.shadertoy.com/view/XsX3zB>\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n//</3d simplex noise by nikat https://www.shadertoy.com/view/XsX3zB>\nfloat fbm(vec2 xy, float z, int octs){\n    float f = 1.0;\n    float a = 1.0;\n    float t = 0.0;\n    float a_bound = 0.0;\n    for(int i=0;i<octs;i++){\n        t += a*simplex3d(vec3(xy*f,z*f));\n        f *= 2.0;\n        a_bound += a;\n        a *= 0.5;\n    }\n    return t/a_bound;\n}\nfloat noise_final_comp(vec2 xy, float z){\n    float value = fbm(vec2(xy.x / 200.0+513.0, xy.y / 200.0+124.0), z, 3);\n    value = 1.0-abs(value);\n    value = value*value;\n    return value*2.0-1.0;\n}\nfloat noise_f(vec2 xy, float z){\n        float value = fbm(\n            vec2((noise_final_comp(xy,       z)*15.0+xy.x) / 100.0,\n                 (noise_final_comp(xy+300.0, z)*15.0+xy.y) / 100.0), z*1.5, 5);\n                 \n        return max(0.0, min(1.0, (value*0.5+0.5)*1.3));\n}\nfloat noise_a(vec2 xy, float z){\n        float value = fbm(\n            vec2((xy.x) / 100.0,\n                 (xy.y) / 100.0), z*1.5, 1);\n                 \n        return max(0.0, min(1.0, (value*0.5+0.5)*1.3));\n}\nfloat noise_b(vec2 xy, float z){\n        float value = fbm(\n            vec2((xy.x) / 100.0,\n                 (xy.y) / 100.0), z*1.5, 2);\n                 \n        return max(0.0, min(1.0, (value*0.5+0.5)*1.3));\n}\nvec2 noise_c(vec2 xy, float z){\n        vec2 value = \n            vec2((noise_final_comp(xy,       z)*15.0),\n                 (noise_final_comp(xy+300.0, z)*15.0));\n        value.x = max(0.0, min(1.0, (value.x*0.5+0.5)/10.0));    \n        value.y = max(0.0, min(1.0, (value.y*0.5+0.5)/10.0));    \n        return value;\n}\nfloat noise_e(vec2 xy, float z){\n        float value = fbm(\n            vec2((xy.x) / 100.0,\n                 (xy.y) / 100.0), z*1.5, 5);\n                 \n        return max(0.0, min(1.0, (value*0.5+0.5)*1.3));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord*500.0/iResolution.x;\n\n    float pA = noise_a(uv,iTime*0.025+0.05*sin(iTime*0.2+(uv.x*0.3*(sin(iTime/30.0)-0.3)+uv.y)/265.0));\n    float pB = noise_b(uv,iTime*0.025+0.05*sin(iTime*0.2+(uv.x*0.3*(sin(iTime/30.0)-0.3)+uv.y)/265.0));\n    vec2  pC = noise_c(uv,iTime*0.025+0.05*sin(iTime*0.2+(uv.x*0.3*(sin(iTime/30.0)-0.3)+uv.y)/265.0));\n    float pE = noise_e(uv,iTime*0.025+0.05*sin(iTime*0.2+(uv.x*0.3*(sin(iTime/30.0)-0.3)+uv.y)/265.0));\n    float pF = noise_f(uv,iTime*0.025+0.05*sin(iTime*0.2+(uv.x*0.3*(sin(iTime/30.0)-0.3)+uv.y)/265.0));\n    \n    vec3 c1 = vec3(152.0,193.0,217.0)/255.0;\n    vec3 c2 = vec3(224.0,251.0,252.0)/255.0;\n    vec3 c3 = vec3(238.0,108.0,77.0)/255.0;\n    vec3 c4 = vec3(41.0,50.0,65.0)/255.0;\n    \n    \n    // Mouse code based (loosely) from iq (https://www.shadertoy.com/view/4djSDy)\n    float s = (2.0*iMouse.x-iResolution.x) / iResolution.y;\n    if( iMouse.z<0.001 ) s=1.0;\n    \n    float sAB=step((8.0  *fragCoord.x-iResolution.x) / iResolution.y-s,0.0);\n    float sBC=step((4.0  *fragCoord.x-iResolution.x) / iResolution.y-s,0.0);\n    float sCE=step((2.685*fragCoord.x-iResolution.x) / iResolution.y-s,0.0);\n    float sEF=step((2.0  *fragCoord.x-iResolution.x) / iResolution.y-s,0.0);\n    float p =pA*sAB+pB*(1.0-sAB)*sBC+pE*(1.0-sCE)*sEF+pF*(1.0-sEF);\n    vec3 col = clamp(p*1.5-0.75,0.0,1.0)*1.0*c2+(1.0-clamp(abs(p-0.5)*5.0,0.0,1.0))*c3;\n    \n    col+=(pC.x*c1+pC.y*c4)*(1.0-sBC)*sCE;\n    \n    vec2 rC = vec2(max(iResolution.x,iResolution.y),\n                   min(iResolution.x,iResolution.y));\n                   \n    fragColor = vec4(col,p*clamp(1.3-1.5*length(fragCoord-0.5*vec2(rC.x,rC.y))/rC.y,0.0,1.0));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}