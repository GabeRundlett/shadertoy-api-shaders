{
    "Shader": {
        "info": {
            "date": "1561603483",
            "description": "This visualizes the low frequency (0-2048hz) content on the X-axis and higher frequency (2048-8000hz) content on the Y-axis.\nHigh frequency content is shifted down to a lower frequency for visualization.\n",
            "flags": 96,
            "hasliked": 0,
            "id": "3t23Rt",
            "likes": 19,
            "name": "XY Audio Oscilloscope",
            "published": 3,
            "tags": [
                "oscilloscope",
                "sound",
                "graph",
                "signal",
                "visualize"
            ],
            "usePreview": 0,
            "username": "Flyguy",
            "viewed": 1861
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = texelFetch(iChannel0,ivec2(fragCoord),0).xxxx;\n    fragColor *= BEAM_COLOR;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Display Modes\n#define POINTS 0\n#define LINES 1\n#define DISP_MODE LINES\n\n//AGC Settings\n#define AGC_ENABLED 1 //Auto adjust gain for varying volume levels.\nconst float AGC_SPEED = 0.02; //Lower = longer average for peak volume\nconst vec2 AGC_MAX_GAIN = vec2(10.0,100.0);\n\n//Visual Settings\nconst float BEAM_BRIGHTNESS = 0.7;\nconst float BEAM_PERSISTANCE = 0.05;\nconst float BEAM_FOCUS = 1.5;\nconst vec4 BEAM_COLOR = vec4(0.0,1.0,0.6,0.0);\nconst vec2 BEAM_GAIN = vec2(0.6,0.6); //Gain after AGC is applied\n\nconst float LO_FREQ = 2048.0; //Local oscillator frequency.\nconst int BUFFER_SIZE = 512; //Audio buffer size (max 512 based on audio texture size).\nconst int FILTER_PASSES = 2; //# of times the signal is filtered.\nconst int TAPS = 79; //# of FIR filter taps\n\n//FIR filter coefficients, generated from https://www.arc.id.au/FilterDesign.html\n//Low pass 0 - 2048hz\nfloat lowpass[TAPS] = float[](\n-0.000154, \n-0.000246, \n-0.000339, \n-0.000410, \n-0.000430, \n-0.000369, \n-0.000197, \n0.000105, \n0.000539, \n0.001091, \n0.001718, \n0.002354, \n0.002909, \n0.003275, \n0.003340, \n0.002998, \n0.002169, \n0.000812, \n-0.001057, \n-0.003355, \n-0.005925, \n-0.008539, \n-0.010905, \n-0.012688, \n-0.013533, \n-0.013098, \n-0.011089, \n-0.007290, \n-0.001600, \n0.005951, \n0.015185, \n0.025779, \n0.037274, \n0.049107, \n0.060645, \n0.071232, \n0.080237, \n0.087108, \n0.091413, \n0.092880, \n0.091413, \n0.087108, \n0.080237, \n0.071232, \n0.060645, \n0.049107, \n0.037274, \n0.025779, \n0.015185, \n0.005951, \n-0.001600, \n-0.007290, \n-0.011089, \n-0.013098, \n-0.013533, \n-0.012688, \n-0.010905, \n-0.008539, \n-0.005925, \n-0.003355, \n-0.001057, \n0.000812, \n0.002169, \n0.002998, \n0.003340, \n0.003275, \n0.002909, \n0.002354, \n0.001718, \n0.001091, \n0.000539, \n0.000105, \n-0.000197, \n-0.000369, \n-0.000430, \n-0.000410, \n-0.000339, \n-0.000246, \n-0.000154\n);\n\n//Band pass 2048 - 8000hz\nfloat bandpass[TAPS] = float[](\n0.000230, \n0.000093, \n0.000003, \n0.000321, \n0.000923, \n0.001042, \n0.000114, \n-0.001230, \n-0.001560, \n-0.000468, \n0.000370, \n-0.001170, \n-0.004649, \n-0.006596, \n-0.004203, \n0.000617, \n0.002447, \n-0.001153, \n-0.005292, \n-0.002235, \n0.008815, \n0.018448, \n0.016564, \n0.005385, \n-0.000563, \n0.009106, \n0.025300, \n0.025844, \n0.000930, \n-0.030634, \n-0.037989, \n-0.015018, \n0.004245, \n-0.022778, \n-0.094301, \n-0.147781, \n-0.108899, \n0.032900, \n0.197301, \n0.269932, \n0.197301, \n0.032900, \n-0.108899, \n-0.147781, \n-0.094301, \n-0.022778, \n0.004245, \n-0.015018, \n-0.037989, \n-0.030634, \n0.000930, \n0.025844, \n0.025300, \n0.009106, \n-0.000563, \n0.005385, \n0.016564, \n0.018448, \n0.008815, \n-0.002235, \n-0.005292, \n-0.001153, \n0.002447, \n0.000617, \n-0.004203, \n-0.006596, \n-0.004649, \n-0.001170, \n0.000370, \n-0.000468, \n-0.001560, \n-0.001230, \n0.000114, \n0.001042, \n0.000923, \n0.000321, \n0.000003, \n0.000093, \n0.000230\n);\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float tau = atan(1.0)*8.0;\n\nfloat Oscillator(float Fo, float Fs, float N)\n{\n    return cos(mod((tau*Fo*floor(N))/Fs,tau));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int idx = int(fragCoord.x);\n    int pass = int(fragCoord.y);\n    \n    vec4 dspout = vec4(0);\n    \n    /*\n\tPass 0 - Pre-filtering\n\tX = Low-pass filtered audio\n\tY = Band-pass filtered audio, modulated with LO freqency to shift signal down to DC.\n\t*/\n    if(pass == 0)\n    {\n        for(int i = 0;i < TAPS;i++)\n        {            \n            vec2 s = texelFetch(iChannel1, ivec2(idx - i,1),0).xx-0.5;\n            s.x *= lowpass[i];\n            s.y *= bandpass[i];\n            dspout.xy += s;\n        }\n        \n        int off = int(iChannelTime[1] * iSampleRate);\n        dspout.y *= Oscillator(LO_FREQ, iSampleRate, float(off-idx));\n    }\n\t\n    /*\n\tPass 1 - Post-filtering\n\tX = Pass thru\n\tY = Low pass filtered to remove image frequency at 2x LO freqency.\n\t*/\n    if(pass == 1)\n    {\n        dspout.x = texelFetch(iChannel0, ivec2(idx,0),0).x;\n        \n        for(int i = 0;i < TAPS;i++)\n        {\n            float s = texelFetch(iChannel0, ivec2(idx - i,0),0).y;\n            s *= lowpass[i];\n            dspout.y += s;\n        }\n    }  \n\n    fragColor = dspout;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 23410,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/hiyadya/dance-of-the-dead-900-follower-special"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Distance to line segment between start & end from point uv.\nfloat dfLine(vec2 start, vec2 end, vec2 uv)\n{\n    uv -= start;\n\tvec2 line = end - start;\n\tfloat frac = dot(uv,line) / dot(line,line);\n\treturn distance(line * clamp(frac, 0.0, 1.0), uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float px = 1.0/iResolution.y;\n    vec2 res = iResolution.xy/iResolution.y;\n    vec2 uv = fragCoord.xy / iResolution.y;\n    uv -= res/2.0;\n\t\n    float acc = 0.0;\n    vec2 lastPt = texelFetch(iChannel0,ivec2(TAPS*FILTER_PASSES,1),0).xy;\n    float beamSize = BEAM_FOCUS*px;\n    \n    vec2 lastPeak = max(texelFetch(iChannel1,ivec2(0),0).yz,vec2(1.0/AGC_MAX_GAIN));\n        if(iFrame <= 3){lastPeak=vec2(0.1);};\n    vec2 currPeak = vec2(0);\n    \n    //Draw the samples, skip the samples at the start to avoid artefacts\n    //caused by the discontinuity at the start of the buffer. \n    for(int i = TAPS*FILTER_PASSES;i < BUFFER_SIZE;i++)\n    {\n    \tvec2 currPt = texelFetch(iChannel0, ivec2(i,1), 0).xy;\n        \n        #if(AGC_ENABLED == 1)\n        currPeak = max(currPeak,abs(currPt));\n        currPt = 0.5*currPt/lastPeak; \n        #endif\n        \n        currPt *= BEAM_GAIN;\n        \n        #if(DISP_MODE == POINTS)\n        float dist = length(currPt-uv);\n        acc += max(0.0, beamSize - dist);\n        #endif\n        \n        #if(DISP_MODE == LINES)\n        float dist = dfLine(currPt,lastPt,uv);\n        acc += 0.01*max(0.0,beamSize-dist) / (0.001+distance(currPt,lastPt)); //Avoid x/0\n        lastPt = currPt;\n        #endif\n    }\n    \n    lastPeak += AGC_SPEED*(currPeak-lastPeak);\n    \n    acc /= px*BEAM_FOCUS;\n    acc *= BEAM_BRIGHTNESS; \n    acc += BEAM_PERSISTANCE * texelFetch(iChannel1,ivec2(fragCoord),0).x;\n    \n    fragColor = vec4(acc,lastPeak,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}