{
    "Shader": {
        "info": {
            "date": "1554355319",
            "description": "I am completely amazed by iq's 'Sculpture III' (https://www.shadertoy.com/view/XtjSDK) and was wondering how clean one can get such a twisted SDF... now much TFlops does it take to make it super clean. This is my attempt. Move/orbit around with the mouse.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdSXzV",
            "likes": 16,
            "name": "Sculpture III Remix (GPU killer)",
            "published": 3,
            "tags": [
                "3d",
                "phong",
                "sdf",
                "distortion",
                "shadow",
                "ao",
                "blinn"
            ],
            "usePreview": 0,
            "username": "MacSlow",
            "viewed": 1055
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// \"Sculpture III Remix\" - This is my 'interpretation' of iq's 'Sculpture III'.\n// The original shader is here: https://www.shadertoy.com/view/XtjSDK\n//\n// Copyright 2019 Mirco Müller\n//\n// Author(s):\n//   Mirco \"MacSlow\" Müller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst int MAX_ITER = 512;\nconst float EPSILON = .001;\nconst float STEP_BIAS = .1;\nconst int AA_SIZE = 2; // 1: no anti-aliasing (faster), 2 or up: better anti-aliasing (slower)\n\nfloat sdPlane (in vec3 p, in float height)\n{\n\treturn length (p.y - height);\n}\n\nmat2 r2d (in float degree)\n{\n    float rad = radians (degree);\n    float c = cos (rad);\n\tfloat s = sin (rad);\n\n    return mat2 (c, s, -s, c);\n}\n\n// the reason I did this shader... iq's SDF from https://www.shadertoy.com/view/XtjSDK\nfloat sdThingFromIQ (in vec3 p, in float v)\n{\n    p.xyz += 1.000*sin(  2.0*p.yzx )*v;\n    p.xyz += 0.500*sin(  4.0*p.yzx )*v;\n    p.xyz += 0.250*sin(  8.0*p.yzx )*v;\n    p.xyz += 0.125*sin( 16.0*p.yzx )*v;\n\n    float d = length (p) - 1.5;\n\treturn d*.5;\n}\n\nfloat scene (in vec3 p)\n{\n    float ground = sdPlane (p, -3.);\n\n    vec3 thingCenter = p;\n    float thing = sdThingFromIQ (thingCenter, .5 + .5*cos (iTime));\n\n    return min (ground, thing);\n}\n\nvec3 normal (in vec3 p, in float epsilon)\n{\n    vec2 e = vec2 (epsilon, .0);\n    float d = scene (p);\n    return normalize (vec3 (scene (p + e.xyy),\n                            scene (p + e.yxy),\n                            scene (p + e.yyx)) - d);\n}\n\nfloat raymarch (in vec3 ro, in vec3 rd)\n{\n    float d = .0;\n    float t = .0;\n    for (int iter = 0; iter < MAX_ITER; ++iter) {\n        t = scene (ro + d * rd);\n        if (abs(t) < EPSILON*(1. + .125*t)) break;\n        d += t*STEP_BIAS;\n    }\n\n    return d;\n}\n\nfloat shadow (in vec3 p, in vec3 lpos)\n{\n    float distanceToLight = distance (lpos, p);\n    vec3 n = normal (p, distanceToLight*EPSILON);\n    vec3 ldir = normalize (lpos - p);\n    float distanceToObject = raymarch (p + .01 * n, ldir);\n    bool isShadowed = distanceToObject < distanceToLight;\n\n\treturn isShadowed ? .3 : 1.;\n}\n\nfloat ao (in vec3 p, in vec3 n, float stepsize, int iterations, float intensity) {\n    float ao = .0; \n    float dist = .0; \n    for (int a = 1; a <= iterations; ++a) {\n        dist = float (a)*stepsize;\n        ao += max (.0, (dist - scene (p + n*dist))/dist);\n    }   \n    return 1. - ao*intensity;\n}\n\n// rusty old blinn/phong shading model\nvec3 shade (in vec3 p, in vec3 rd, in vec3 n)\n{\n\t// attributes of first light\n    vec3 lightPosition1 = vec3 (2.);\n    lightPosition1.xz *= r2d (60.*iTime);\n    vec3 l1 = normalize (lightPosition1 - p);\n    float d1 = distance (p, lightPosition1);\n    float lightIntensity1 = 5.;\n\tfloat att1 = 3./(d1*d1);\n    vec3 lightColor1 = vec3 (.95, .7, .6);\n\n\t// attributes of second light\n \tvec3 lightPosition2 = vec3 (2., 4.75, -1.5);\n    lightPosition2.xz *= r2d (20.*iTime);\n    vec3 l2 = normalize (lightPosition2 - p);\n    float d2 = distance (p, lightPosition2);\n    float lightIntensity2 = 8.;\n\tfloat att2 = 4./(d2*d2);\n    vec3 lightColor2 = vec3 (.2, .4, .9);\n\n\t// diffuse term parts\n    vec3 diffuseColor1 = max (dot (n, l1), .0) * lightColor1 * lightIntensity1;\n    vec3 diffuseColor2 = max (dot (n, l2), .0) * lightColor2 * lightIntensity2;\n\n\t// specular coefficient\n\tfloat shiny = 100.;\n\tvec3 h1 = normalize (-rd + l1);\n\tvec3 h2 = normalize (-rd + l2);\n\tfloat sp1 = pow (max(.0, dot (h1, l1)), shiny);\n\tfloat sp2 = pow (max(.0, dot (h2, l2)), shiny);\n\n\t// there is only one 'material'\n    vec3 matertialColor = vec3 (.4, .7, .6);\n\n    float ao = ao (p, n, .2, 6, .175);\n    \n    return ao*att1*shadow (p, lightPosition1) * (matertialColor*diffuseColor1 + sp1*vec3 (1.))+\n           ao*att2*shadow (p, lightPosition2) * (matertialColor*diffuseColor2 + sp2*vec3 (1.));\n}\n\nvec3 camera (in vec2 uv, in vec3 ro, in vec3 aim, in float zoom)\n{\n\tvec3 f = normalize (aim - ro);\n\tvec3 wu = vec3 (.0, 1., .0);\n\tvec3 r = normalize (cross (wu, f));\n\tvec3 u = normalize (cross (f, r));\n\tvec3 c = ro + f*zoom;\n\treturn normalize (c + r*uv.x + u*uv.y - ro);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// orbit camera preparation\n    float dist2cam = 5.;\n    float azimuthAngle = ((iMouse.x/iResolution.x) * 2. - 1.) * 179.;\n    float elevationAngle = 30. + ((iMouse.y/iResolution.y) * 2. - 1.) * -20.;\n    float x = dist2cam*cos (radians (azimuthAngle));\n    float y = dist2cam*sin (radians (elevationAngle));\n    float z = dist2cam*sin (radians (azimuthAngle));\n\n\t// stuff\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec3 ro = vec3 (x, y, z);\n\tfloat fog = .0;\n\tfloat d = .0;\n\tvec3 col = vec3 (.0);\n\tvec3 aim = vec3 (.0);\n\tfloat zoom = 1.7;\n\n\t// walk over AA-grid\n\tfor (int x = 0; x < AA_SIZE; ++x) {\n\t\tfor (int y = 0; y < AA_SIZE; ++y) {\n\n\t\t\t// anti-alias offset\n\t\t\tvec2 pixelOffset = vec2 (float (x), float (y))/float  (AA_SIZE);\n\n\t\t\t// normalize and aspect-correct UVs\n\t\t\tvec2 uv = (fragCoord.xy + pixelOffset)/iResolution.xy;\n    \t\tuv = uv*2. - 1.;\n            uv.x *= iResolution.x/iResolution.y;\n\n    \t\t// create viewray\n    \t\tvec3 rd = camera (uv, ro, aim, zoom);\n\n\t\t\t// primary/view ray\n\t\t\td = raymarch (ro, rd);\n\t\t\tfog = 1. / (1. + d*d*.02);\n\t\t\tvec3 p = ro + d*rd;\n\t\t\tvec3 n = normal (p, d*EPSILON);\n\t\t\tvec3 ctmp = shade (p, rd, n);\n\t\t\tctmp *= fog;\n\n\t\t\tcol += ctmp;\n\t\t}\n\t}\n\tcol /= float (AA_SIZE*AA_SIZE);\n\n    // distance-mist, vignette, tone-map, gamma-correction, color-correction\n\tcol = mix (col, vec3 (.2, .35, .7), pow (1. - 1./d, 90.));\n\tcol *= 1. - .5*length (fragCoord.xy/iResolution.xy*2. - 1.);\n    col = col / (1. + col);\n    col = pow (col, vec3 (1./2.2));\n    col = smoothstep (vec3(.0125), vec3(.9875), col);\n\n    fragColor = vec4 (col, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}