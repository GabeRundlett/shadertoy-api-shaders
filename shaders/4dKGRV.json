{
    "Shader": {
        "info": {
            "date": "1455378174",
            "description": "Testing maximum zoom before hitting FP32 precision problems. Going to try emulating some FP64 calculations to see if I can improve the zoom. Any suggestions or ideas are more than welcome. Thanks!\nThe mouse x coordinate is used to zoom.",
            "flags": 32,
            "hasliked": 0,
            "id": "4dKGRV",
            "likes": 4,
            "name": "Simplex Noise - Maximum zoom",
            "published": 3,
            "tags": [
                "noise",
                "zoom",
                "precision"
            ],
            "usePreview": 0,
            "username": "raRaRa",
            "viewed": 880
        },
        "renderpass": [
            {
                "code": "float getHeight(vec2 uv) {\n\treturn texture( iChannel0, uv ).r;\n}\n\nvec3 getNormalSobel(vec2 uv, float zoom) {\n    float vTEXEL_ONE = 1.0 / iResolution.x;\n    float tl = getHeight(uv + vTEXEL_ONE * vec2(0, 0));   // top left\n    float  l = getHeight(uv + vTEXEL_ONE * vec2(0, 1));   // left\n\n    float bl = getHeight(uv + vTEXEL_ONE * vec2(0, 2));   // bottom left\n    float  t = getHeight(uv + vTEXEL_ONE * vec2(1, 0));   // top\n\n    float  b = getHeight(uv + vTEXEL_ONE * vec2(1, 2));   // bottom\n    float tr = getHeight(uv + vTEXEL_ONE * vec2(2, 0));   // top right\n\n    float  r = getHeight(uv + vTEXEL_ONE * vec2(2, 1));   // right\n    float br = getHeight(uv + vTEXEL_ONE * vec2(2, 2));   // bottom right\n \n    // Compute dx using Sobel:\n    //           -1 0 1 \n    //           -2 0 2\n    //           -1 0 1\n    float dX = tr + 2.0*r + br -tl - 2.0*l - bl;\n \n    // Compute dy using Sobel:\n    //           -1 -2 -1 \n    //            0  0  0\n    //            1  2  1\n    float dY = bl + 2.0*b + br -tl - 2.0*t - tr;\n\n    float normalStrength = 0.125 / ( (zoom + 1.0) * (zoom + 1.0) );\n \n    // Build the normalized normal\n    vec3 normal = normalize(vec3(dX, dY, 2.0 * normalStrength));\n\n   // normal = normal * 0.5 + 0.5;\n \n    //convert (-1.0 , 1.0) to (0.0 , 1.0), if needed\n    return normal;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = (iMouse.x / iResolution.x + 0.02) * 250.0;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xx;\n    vec3 normal = getNormalSobel(uv, zoom);\n    \n\tfragColor = vec4(normal, 1.0);\n}\t",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nfloat fbm_experiment(vec2 x) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100);\n    for (int i = 0; i < 15; ++i) {\n        v += a * snoise(x);\n        x = x * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float mousePosX = ((iMouse.x / iResolution.x) + 0.02) * 250.0;\n    \n    if (mousePosX < 0.2) \n        mousePosX = 0.2;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xx;\n    uv /= mousePosX;\n    float height = fbm_experiment(uv);\n\tfragColor = vec4(height, height, height, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}