{
    "Shader": {
        "info": {
            "date": "1708693584",
            "description": "rayfloor",
            "flags": 0,
            "hasliked": 0,
            "id": "M3jGR3",
            "likes": 1,
            "name": "rayfloor",
            "published": 3,
            "tags": [],
            "usePreview": 0,
            "username": "moka",
            "viewed": 94
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // 正規化デバイス座標（NDC）へ変換\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n\n    // カメラ設定\n    vec3 ro = vec3(0.0, 1.0, 3.0); // カメラの位置\n    vec3 rd = normalize(vec3(uv, -1.0)); // カメラからのレイの方向\n\n    // レイマーチングのパラメータ\n    float minDist = 0.01; // 最小距離\n    float maxDist = 100.0; // 最大距離\n    float surfaceDist = maxDist; // 表面までの距離\n    bool hitSurface = false; // 表面に到達したかどうか\n\n    // レイマーチング\n    float t = 0.0;\n    for(int i = 0; i < 100; i++) {\n        vec3 p = ro + t * rd; // 現在の点\n        float d = p.y; // y=0の平面との距離\n        if(d < minDist) {\n            // 表面に到達\n            hitSurface = true;\n            surfaceDist = t;\n            break;\n        }\n        t += d; // レイを進める\n        if(t > maxDist) break; // 最大距離を超えたら終了\n    }\n\n    // 描画\n    if(hitSurface) {\n        // 床の色\n        fragColor = vec4(vec3(0.5 + 0.5 * sin(surfaceDist * 0.1)), 1.0);\n    } else {\n        // 背景色\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}