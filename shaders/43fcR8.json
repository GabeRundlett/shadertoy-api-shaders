{
    "Shader": {
        "info": {
            "date": "1725790170",
            "description": "Parallax experiments",
            "flags": 0,
            "hasliked": 0,
            "id": "43fcR8",
            "likes": 6,
            "name": "Parallax noise",
            "published": 3,
            "tags": [
                "noise",
                "parallax",
                "simplex"
            ],
            "usePreview": 0,
            "username": "avin",
            "viewed": 134
        },
        "renderpass": [
            {
                "code": "#define CHANGE_S -1.25\n#define N 10.\n\n#define COL vec3(143, 57, 143) / 255.0\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {    \n    vec2 cuv = (fragCoord - iResolution.xy * .5) / iResolution.y * 1.25;\n\n    vec3 col = vec3(0.);\n    for (float i = 0.; i < N; ++i) {\n           \n        vec2 uv = cuv * (N - i * .25) * (.25 + sin(iTime*.5) * .05);\n\n        uv.y += iTime * .25;\n\n        float s = simplex_noise(vec3(uv * 5., iTime * .25 * CHANGE_S - 1./N*i*0.5)) - .5;\n        float vs = -i * (1./N);\n\n        if (step(s, vs) > 0.) {\n            col = COL * (i / N * 2.);\n            \n            col.r += uv.x*.25;\n            col.g -= uv.y*.25;\n        }\n    }\n\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Original noise code from https://www.shadertoy.com/view/4sc3z2\n#define MOD3 vec3(.1031, .11369, .13787)\n\nvec3 hash33(vec3 p3) {\n    p3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz + 19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y) * p3.z, (p3.x + p3.z) * p3.y, (p3.y + p3.z) * p3.x));\n}\n\nfloat simplex_noise(vec3 p) {\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n\n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n\n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n    vec3 i1 = e * (1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy * (1.0 - e);\n\n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n\n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n\n    return dot(vec4(31.316), n);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}