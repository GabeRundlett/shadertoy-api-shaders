{
    "Shader": {
        "info": {
            "date": "1707925145",
            "description": "-tmm added some color to @ FFFFFFear1 's work - Mouse to spread color\nJust some playing with uv :)\nI completely forgot what i wanna do on the start, but anyway there is a result and a love it!",
            "flags": 0,
            "hasliked": 0,
            "id": "MXX3D2",
            "likes": 7,
            "name": "Just something to hypnotize you",
            "published": 3,
            "tags": [
                "learning"
            ],
            "usePreview": 0,
            "username": "timmaffett",
            "viewed": 188
        },
        "renderpass": [
            {
                "code": "// Fork of \"Just something\" by FFFFFFear1. https://shadertoy.com/view/X3XGDj\n// 2024-02-14 15:23:40\n\n#define float2x2 mat2\n\n\nvec3 hsb2rgb( in vec3 c )\n{\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return (c.z * mix( vec3(1.0), rgb, c.y));\n}\n\n\nvec2 _rhombusVector = vec2(1.5, 1.5);\nfloat _speedColor = .6;\nfloat _tilling = 1.;\n\nfloat2x2 getRotationMatrix(float theta) {\n    float s = sin(theta);\n    float c = cos(theta);\n    \n    return float2x2(c,-s,s,c);\n}\n\nvec3 colorPalette(float t)\n{\n\n    return hsb2rgb(vec3(((t)*1.1343+(iTime/10230.0)),0.9,0.9));\n    \n    vec3 a = vec3(0.910, 0.710, 0.710);\n    vec3 b = vec3(0.331, -0.147, 0.405);\n    vec3 c = vec3(0.390, 0.272, 0.390);\n    vec3 d = vec3(-1.882, 0.333, 0.667);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat drawLine(vec2 uv, vec2 startPoint, vec2 endPoint, float widthLine, float distanceLine, vec2 anchor) {\n    float halfWidthLine = widthLine * .5f;\n    \n    vec2 pos = uv;\n    vec2 vector = endPoint - startPoint;\n    float angle = 0.f;\n    \n    if (vector.x > 0.f && vector.y == 0.f) {\n        angle = 90.f;\n    }\n    else if (vector.x == 0.f && vector.y > 0.f) {\n        angle = 0.f;\n    }\n    else {\n        angle = (90.f / (vector.x + vector.y));\n    }\n    \n    pos *= getRotationMatrix(angle * 0.0174f);\n    \n    float A = step(-halfWidthLine, pos.x + anchor.x) - (step(distanceLine, pos.y + anchor.y) + step(distanceLine, -pos.y - anchor.y));\n    float B = step(-halfWidthLine, -pos.x - anchor.x) - (step(distanceLine, pos.y + anchor.y) + step(distanceLine, -pos.y - anchor.y));\n    \n    \n    return A * B;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2. - iResolution.xy)/iResolution.y;\n    vec2 uvColor = uv;\n    \n     vec2 mouse = (iMouse.xy == vec2(0.)) ? vec2(0.159,0.844) : iMouse.xy/iResolution.xy;\n    \n    \n    vec2 pos = uv;\n    vec3 finalColor = vec3(0);    \n    \n    float angle = 1. - sin(iTime+ cos(uvColor.x));\n    \n    if(angle * 0.0174f >= 45.) {\n        angle = 180. / 0.0174f;\n    }\n    \n    float2x2 rotateMat = getRotationMatrix(angle);\n    \n    float line1;\n    float line2;\n    float line3;\n    float line4;\n    float lines;\n    vec3 color;    \n    \n    for(float i = 0.; i < 7.; i++)\n    { \n        \n        line1 = drawLine((pos - vec2(-(i / 10.),  (i / 10.)))* rotateMat, vec2(-.5f, -.5f), vec2(-.5f, .5f), .05f - (i / 10.), 1.f, vec2(.0f, 6.f));\n        line2 = drawLine((pos - vec2((i / 10.), -(i / 10.))) * rotateMat, vec2(.0f, -.5f), vec2(-.5f, -.5f), .05f - (i / 10.), 1.f,vec2(.0f, 5.f));\n        line3 = drawLine((pos - vec2( (i / 10.), (i / 10.))) * rotateMat, vec2(-.5f, .5f), vec2(.5f, .5f), .05f - (i / 10.), 1.f, vec2(.0f, 5.f));\n        line4 = drawLine((pos - vec2(-(i / 10.), -(i / 10.))) * rotateMat, vec2(.0f, .0f), vec2(-.5f, -.5f), .05f - (i / 10.), 1.f, vec2(.0f, 5.f));\n        lines += line1 + line2 + line3 + line4;\n        lines = sin(lines * 2. + iTime) / 1.5;\n    color = colorPalette(lines + length(uv)*i/2.*mouse.x/mouse.y) ;\n    //finalColor += lines * color;\n    finalColor += color;\n    }\n \n \n    lines = pow( abs(0.09 / lines), 0.8) + smoothstep(0.2,0.,abs(lines)/fwidth(lines) );\n//    color = colorPalette(lines * 0.5 + 0.2*cos(iTime+uvColor.x)) * 1.8;\n    //color = colorPalette(lines * (length(uv) ) )  );// 0.5 + 0.2*(iTime/550.)) * 1.8;\n    finalColor /= 7.0;\n    \n    \n    fragColor = vec4(finalColor, 1.);\n    \n#ifdef SHOWMOUSECOORDS    \n    printMouseCoords( fragColor, fragCoord );\n#endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#ifdef SHOWMOUSECOORDS\n// Code from \"Smaller Numbers\" by P_Malin. https://shadertoy.com/view/4sBSWW\n// Extracted from \"Printing numbers and coordinates\" by Piperoman. https://shadertoy.com/view/XllSWl\n\nfloat DigitBin(const in int x)\n{\n    return x==0?480599.0:x==1?139810.0:x==2?476951.0:x==3?476999.0:x==4?350020.0:x==5?464711.0:x==6?464727.0:x==7?476228.0:x==8?481111.0:x==9?481095.0:0.0;\n}\n\nfloat PrintValue(const in vec2 fragCoord, const in vec2 vPixelCoords, const in vec2 vFontSize, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces)\n{\n    vec2 vStringCharCoords = (fragCoord.xy - vPixelCoords) / vFontSize;\n    if ((vStringCharCoords.y < 0.0) || (vStringCharCoords.y >= 1.0)) return 0.0;\n\tfloat fLog10Value = log2(abs(fValue)) / log2(10.0);\n\tfloat fBiggestIndex = max(floor(fLog10Value), 0.0);\n\tfloat fDigitIndex = fMaxDigits - floor(vStringCharCoords.x);\n\tfloat fCharBin = 0.0;\n\tif(fDigitIndex > (-fDecimalPlaces - 1.01)) \n    {\n\t\tif(fDigitIndex > fBiggestIndex) \n        {\n\t\t\tif((fValue < 0.0) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;\n\t\t} \n        else \n        {\t\t\n\t\t\tif(fDigitIndex == -1.0) \n            {\n\t\t\t\tif(fDecimalPlaces > 0.0) fCharBin = 2.0;\n\t\t\t} \n            else \n            {\n\t\t\t\tif(fDigitIndex < 0.0) fDigitIndex += 1.0;\n\t\t\t\tfloat fDigitValue = (abs(fValue / (pow(10.0, fDigitIndex))));\n                float kFix = 0.0001;\n                fCharBin = DigitBin(int(floor(mod(kFix+fDigitValue, 10.0))));\n\t\t\t}\t\t\n\t\t}\n\t}\n    return floor(mod((fCharBin / pow(2.0, floor(fract(vStringCharCoords.x) * 4.0) + (floor(vStringCharCoords.y * 5.0) * 4.0))), 2.0));\n}\n\nvoid printMouseCoords( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 vColour = vec3(0.0);\n    float fDigits = 1.0;\n\tfloat fDecimalPlaces = 2.0;\n\t\n\t// Multiples of 4x5 work best\n\tvec2 vFontSize = vec2(16.0, 30.0);\n    \n    // Plot Mouse Pos\n\tfloat fDistToPointB = length( vec2(iMouse.x, iMouse.y) - fragCoord.xy) - 4.0;\n\tvColour = mix(vColour, vec3(0.0, 1.0, 0.0), (1.0 - clamp(fDistToPointB, 0.0, 1.0)));\n\n    if(iMouse.x > 0.0)\n\t{\n\t\t// Print Mouse X\n\t\tvec2 vPixelCoord2 = iMouse.xy + vec2(-102.0, 6.0);\n\t\tfloat fValue2 = iMouse.x / iResolution.x;\n\t\tfDigits = 1.0;\n\t\tfDecimalPlaces = 3.0;\n\t\tfloat fIsDigit2 = PrintValue(fragCoord, vPixelCoord2, vFontSize, fValue2, fDigits, fDecimalPlaces);\n\t\tvColour = mix( vColour, vec3(0.0, 1.0, 0.0), fIsDigit2);\n\t\t\n\t\t// Print Mouse Y\n\t\tvec2 vPixelCoord3 = iMouse.xy + vec2(0.0, 6.0);\n\t\tfloat fValue3 = iMouse.y / iResolution.y;\n\t\tfDigits = 1.0;\n\t\tfloat fIsDigit3 = PrintValue(fragCoord, vPixelCoord3, vFontSize, fValue3, fDigits, fDecimalPlaces);\n\t\tvColour = mix( vColour, vec3(0.0, 1.0, 0.0), fIsDigit3);\n\t}\n    \n    fragColor += vec4(vColour,1.0);\n}\n\n#endif",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}