{
    "Shader": {
        "info": {
            "date": "1583593006",
            "description": "Click and drag the mouse along x axis to blend between euclidean and manhattan distance",
            "flags": 0,
            "hasliked": 0,
            "id": "ttGSWV",
            "likes": 2,
            "name": "voronoi manhattan and euclidean",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "paz7",
            "viewed": 383
        },
        "renderpass": [
            {
                "code": "#define iR iResolution\n\nvec2 Hash12(float f){ \n    return vec2(fract(sin(65.621*f+f) * 43758.5453),fract(sin(65.621*f-f) * 231.654));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tfloat scale = iR.x/iR.y;\n    vec2 uv = (fragCoord)/iR.x*scale;\n    \n    float seed = 621.;\n    \n    int numberOfPoints = 200;\n    vec2 points[200];\n    vec2 offset;\n    \n   \tfor(int i = 0;i<numberOfPoints-1;i++){\n        seed += float(i);\n    \tvec2 xy = Hash12(seed);\n        offset = vec2(sin(xy.x+iTime+float(i)*45.),sin(xy.y+iTime+float(i)*45.))/100.;\n        xy += offset;\n        xy.x *= scale;\n        points[i] = xy;\n    }\n\n    vec3 col = vec3(0,0,0);\n    float t = iMouse.x/iR.x;\n    float mind = 9999.;\n    int pid = 0;\n    float p = 0.;\n\n    vec3 hsvcol = vec3(0,.8,.9);\n    for(int i = 0;i<numberOfPoints-1;i++){\n        float e = euclidDist(uv,points[i]+offset);\n        float m = manhattanDist(uv,points[i]+offset);\n\t\t\n        if(e<.005) p = 1.;\n        \n        float d = m*t + e*(1.-t);\n        if(d<mind) {\n            pid = i;\n            mind = d;\n        }\n    }\n    hsvcol.x = float(pid)/float(numberOfPoints-1);\n    col+=hsv2rgb(hsvcol);\n    col*=(1.-mind)*(1.-mind)*(1.-mind)*(1.-mind);\n    col-=p;\n\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float manhattanDist(vec2 a, vec2 b){\n\treturn abs(a.x - b.x) + abs(a.y - b.y);\n}\n\nfloat euclidDist(vec2 a, vec2 b){\n\treturn sqrt(pow(a.x-b.x,2.) + pow(a.y-b.y,2.));\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}