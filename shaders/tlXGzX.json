{
    "Shader": {
        "info": {
            "date": "1557085701",
            "description": "Meh. Mouse enabled.",
            "flags": 0,
            "hasliked": 0,
            "id": "tlXGzX",
            "likes": 11,
            "name": "Hall of PBR",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "ibl",
                "pbr"
            ],
            "usePreview": 0,
            "username": "zackpudil",
            "viewed": 637
        },
        "renderpass": [
            {
                "code": "float box(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return max(q.x, max(q.y, q.z));\n}\n\nvec2 un(vec2 a, vec2 b) {\n    return a.x < b.x ? a : b;\n}\n\nvec2 shape(vec3 p) {\n    vec2 s = vec2(box(p.xyz + vec3(0.6, 0, 0), vec3(0.6)), 1.0);\n    vec2 t = vec2(box(p.xyz - vec3(0.6, 0, 0), vec3(0.6)), 1.0);\n   \n    return un(s, t);\n}\n\nvec2 de(vec3 p) {\n    vec4 q = vec4(p, 1);\n    \n    for(int i = 0; i < 7; i++) {\n\t\tq.xyz = -1.0 + 2.0*fract(0.5 + 0.5*q.xyz);\n\t\tq = 1.01*q/max(dot(q.xyz, q.xyz), 0.95);\n    }\n    \n    vec2 s = shape(q.xyz)/vec2(q.w, 1);\n \tvec2 t = vec2(p.y - 0.3, 2.0);\n    \n    p.xz = abs(p.xz) - vec2(0.2, 0.4);\n    p.xz = mod(p.xz + 1.0, 2.0) - 1.0;\n    \n    vec2 u = vec2(length(p.xz) - 0.2, 3.0);\n    return un(un(s, t), u);\n}\n\nvec2 trace(vec3 ro, vec3 rd, float mx) {\n    float t = 0.0, m = -1.0;\n    for(int i = 0; i < 200; i++) {\n        vec2 d = de(ro + rd*t);\n        if(d.x < 0.001 || t >= mx) break;\n        t += d.x;\n        m = d.y;\n    }\n    return vec2(t, t < mx ? m : -1.0);\n}\n\nvec3 normal(vec3 p) {\n    vec2 h = vec2(0.0001, 0.0);\n    vec3 n = vec3(\n        de(p + h.xyy).x - de(p - h.xyy).x,\n        de(p + h.yxy).x - de(p - h.yxy).x,\n        de(p + h.yyx).x - de(p - h.yyx).x);\n    return normalize(n);\n}\n\nvec3 pbr(vec3 p, vec3 n, vec3 l, vec3 rd, \n         vec3 a, float r, float m, float sha,\n         inout vec3 f, inout float hov, inout float nov) {\n    \n    vec3 v = normalize(-rd);\n    vec3 h = normalize(v + l);\n    \n    float nol = clamp(dot(n, l), 0.0, 1.0);\n    float noh = clamp(dot(n, h), 0.0, 1.0);\n    nov = clamp(dot(n, v), 0.0, 1.0);\n    hov = dot(h, v);\n    \n    f = mix(vec3(0.1), a, m);\n    vec3 F = f + (1.0 - f)*pow(1.0 - hov, 5.0);\n    \n    float a2 = pow(r, 4.0);\n    float D = a2/pow(noh*noh*(a2 - 1.0) + 1.0, 2.0);\n    \n    float k = 0.5*pow(0.5*r + 0.5, 2.0);\n    float kl = nol*(1.0 - k) + k;\n    float kv = nov*(1.0 - k) + k;\n    float V = 1.0/(4.0*kl*kv);\n    \n    vec3 spe = F*D*V;\n    vec3 dif = (1.0 - F)*(1.0 - m);\n    \n    return (dif*sha*a/3.141 + spe)*nol;\n}\n\n\nvec3 tex3D(vec3 p, vec3 n, sampler2D s) {\n    vec3 m = pow(abs(n), vec3(10.0));\n    m /= dot(vec3(1), m);\n    \n    vec3 x = texture(s, p.yz).rgb;\n    vec3 y = texture(s, p.xz).rgb;\n    vec3 z = texture(s, p.xy).rgb;\n    \n    return m.x*x*x + m.y*y*y + m.z*z*z;\n}\n\nvec3 ibl(vec3 p, vec3 n, vec3 rf, vec3 a, float r, float m,\n         vec3 f, float hov, float nov) {\n    \n    vec3 F = f + (max(vec3(1.0 - r), f) - f)*pow(1.0 - hov, 5.0);\n    vec3 irr = textureLod(iChannel0, n, 1.0).rgb;\n    vec3 dif = irr*(1.0 - F)*(1.0 - m)*a;\n    \n    vec4 c0 = vec4(-1, -0.0275, -0.572, 0.022);\n    vec4 c1 = vec4(1, 0.0425, 1.04, -0.04);\n    vec4 cr = c0*r + c1;\n    float a4 = min(cr.x*cr.x, exp2(-9.28*nov))*cr.x + cr.y;\n    vec2 ab = vec2(-1.04, 1.04)*a4 + cr.zw;\n    \n    vec3 pc = textureLod(iChannel0, rf, 1.0*r).rgb;\n    vec3 spe = pc*(F*ab.x + ab.y);\n    \n    float occ = exp2(-pow(max(0.0, 1.0 - de(p + n*0.05).x/0.05), 2.0));\n    return (dif + spe)*occ;\n}\n\n\nvec3 bump(vec3 p, vec3 n, sampler2D s, float bf) {\n    vec2 h = vec2(0.005, 0.0);\n    vec3 g = mat3(\n        tex3D(p - h.xyy, n, s),\n        tex3D(p - h.yxy, n, s),\n        tex3D(p - h.yyx, n, s))*vec3(0.299, 0.584, 0.114);\n    \n    g -= dot(vec3(0.299, 0.584, 0.114), tex3D(p, n, s));\n    g -= n*dot(g, n);\n    \n    return normalize(n + bf*g);\n}\n    \n\nvoid material(float mid, vec3 p, inout vec3 n,\n              inout vec3 a, inout float r, inout float m) {\n    if(mid == 1.0) {\n        n = bump(p, n, iChannel1, 0.5);\n        a = tex3D(p, n, iChannel1);\n        r = 0.5 - dot(a, a);\n        m = 1.0;\n    } else if(mid == 2.0) {\n        n = bump(p, n, iChannel2, 0.3);\n        a = tex3D(p, n, iChannel2);\n        r = 0.3;\n        m = 0.0;\n    } else if (mid == 3.0) {\n        n = bump(2.0*p, n, iChannel3, 10.0);\n        a = tex3D(2.0*p, n, iChannel3);\n        r = 0.7;\n        m = 0.0;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec2 mo = (5.0*iMouse.xy - 2.5*iResolution.xy)/iResolution.y;\n    \n    if(iMouse.z <= 0.0) mo = vec2(0);\n    float at = 0.2*iTime;\n    \n    vec3 ro = vec3(at, 1.0, 0);\n    vec3 la = vec3(at + 1.0, 1.0, 0);\n    la.zy += vec2(-mo.x, mo.y);\n    vec3 ww = normalize(la-ro);\n    vec3 uu = normalize(cross(vec3(0, 1, 0), ww));\n    vec3 vv = normalize(cross(ww, uu));\n    vec3 rd = normalize(mat3(uu, vv, ww)*vec3(uv, 0.5));\n    \n    vec3 bcol = texture(iChannel0, rd).rgb;\n    vec3 col = vec3(0);\n    vec3 lp = vec3(at + 1.0, 1.0, 0.0);\n    \n    vec2 t = trace(ro, rd, 50.0);\n    if(t.y > 0.0) {\n        vec3 p = ro + rd*t.x;\n        vec3 n = normal(p);\n        vec3 l = normalize(lp - p);\n        \n        vec3 a = vec3(1);\n        float r = 0.4, m = 0.0;\n        \n        material(t.y, p, n, a, r, m);\n        \n        vec3 f;\n        float hov, nov;\n        \n        float sha = step(length(lp - p), trace(p + n*0.01, l, length(lp - p)).x);\n        col = pbr(p, n, l, rd, a, r, m, sha, f, hov, nov);\n        \n        vec3 rf = reflect(rd, n);\n        col += ibl(p, n, rf, a, r, m, f, hov, nov);\n    }\n    \n    col = mix(col, bcol, 1.0 - exp(-0.02*t.x*t.x));\n    col = 1.0 - exp(-0.5*col);\n    fragColor = vec4(pow(col, vec3(0.454545)), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}