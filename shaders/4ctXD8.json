{
    "Shader": {
        "info": {
            "date": "1713959394",
            "description": "Interactive!\n\nA 2D implementation of [url=https://drive.google.com/file/d/1L6v1_7HY2X-LV3Ofb6oyTIxgEaP4LOI6/view]\"Radiance Cascades: A Novel Approach to Calculating Global Illumination\"[/url]\n\nOriginal RC shader [url=/view/mtlBzX]by fad[/url]",
            "flags": 48,
            "hasliked": 0,
            "id": "4ctXD8",
            "likes": 45,
            "name": "RC Experimental Testbed",
            "published": 3,
            "tags": [
                "mouse",
                "interactive",
                "global",
                "illumination",
                "light",
                "tracing",
                "keyboard",
                "trace",
                "path",
                "radiance",
                "cascade"
            ],
            "usePreview": 1,
            "username": "Suslik",
            "viewed": 5468
        },
        "renderpass": [
            {
                "code": "// The OG shadertoy implementation of Radiance Cascades by fad: https://www.shadertoy.com/view/mtlBzX\n\n// The goal of this implementation is to show useful design patterns for working with radiance\n// cascades: interpolation, packing, handy abstractions, etc. They become increasingly important\n// when working with more advanced versions of the algorithm\n\n// This implementation supports multiple versions of ringing fixes in Common:\n// MERGE_FIX = 0 -- vanilla\n// MERGE_FIX = 1 -- bilinear fix\n// MERGE_FIX = 2 -- bilinear fix with a midpoint\n// MERGE_FIX = 3 -- the Dolkar fix\n// MERGE_FIX = 4 -- outer parallax fix\n// MERGE_FIX = 5 -- inner parallax fix (extremely inefficient implementation on shadertoy)\n\n// You can change branching factors used by RC also in Common:\n// BRANCHING_FACTOR 0 -- no branching (constant angular resolution)\n// BRANCHING_FACTOR 1 -- 2x branching\n// BRANCHING_FACTOR 2 -- 4x branching\n\n// And spatial resolution scaling factors in Common:\n// SPATIAL_SCALE_FACTOR 0 -- constant spatial resolution\n// SPATIAL_SCALE_FACTOR 1 -- spatial resolution decreases 2x on each axis per cascade\n// SPATIAL_SCALE_FACTOR 2 -- spatial resolution decreases 4x on each axis per cascade\n\n// Controls:\n// Click and drag with mouse to draw\n// Press space to toggle betweem emissive and non-emissive brush\n// Press 1 to switch to drawing a temporary light instead of permanent\n\n// A 2D implementation of \n// Radiance Cascades: A Novel Approach to Calculating Global Illumination\n// https://drive.google.com/file/d/1L6v1_7HY2X-LV3Ofb6oyTIxgEaP4LOI6/view\n\n// You can set the parameters to the algorithm in the Common tab\n\n// Sky integral formula taken from\n// Analytic Direct Illumination - Mathis\n// https://www.shadertoy.com/view/NttSW7\n\n// sdBezier() formula taken from\n// Quadratic Bezier SDF With L2 - Envy24\n// https://www.shadertoy.com/view/7sGyWd\n\n// In this Shadertoy implementation there is a bit of temporal lag which\n// is not due to a flaw in the actual algorithm, but rather a limitation\n// of Shadertoy - one of the steps in the algorithm is to merge cascades\n// in a reverse mipmap-like fashion which would actually be done within\n// one frame, but in Shadertoy we have to split that work up over\n// multiple frames. Even with this limitation, it still looks good and\n// only has an n-frame delay to fully update the lighting, where n is\n// the total number of cascades.\n\n\n// This buffer interpolates the radiance coming from cascade 0\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n   \n    ivec2 viewport_size = ivec2(iResolution.xy);\n    ivec2 face_size = textureSize(iChannel0, 0);\n    \n    vec2 screen_pos = fragCoord.xy / vec2(viewport_size);\n    CascadeSize c0_size = GetC0Size(viewport_size);\n    int src_cascade_index = 0;\n    \n    CascadeSize cascade_size = GetCascadeSize(src_cascade_index, c0_size);\n    \n    BilinearSamples bilinear_samples = GetProbeBilinearSamples(screen_pos, src_cascade_index, c0_size);\n    vec4 weights = GetBilinearWeights(bilinear_samples.ratio);\n    \n    vec4 fluence = vec4(0.0f);\n    for(int dir_index = 0; dir_index < cascade_size.dirs_count; dir_index++)\n    {\n        #if C_MINUS1_GATHERING == 1\n            vec2 c0_dir = GetProbeDir(float(dir_index), c0_size.dirs_count);\n            vec2 c0_interval_length = GetCascadeIntervalScale(0) * GetC0IntervalLength(viewport_size);\n            vec4 c_minus1_radiance = radiance(iChannel1, screen_pos * vec2(viewport_size), c0_dir, c0_interval_length.x).radiance;\n        #else\n            vec4 c_minus1_radiance = vec4(vec3(0.0f), 1.0f);\n        #endif\n        \n        vec4 c0_radiance = vec4(0.0f);\n        for(int i = 0; i < 4; i++)\n        {\n            ProbeLocation probe_location;\n            probe_location.cascade_index = src_cascade_index;\n            probe_location.probe_index = clamp(bilinear_samples.base_index + GetBilinearOffset(i), ivec2(0), cascade_size.probes_count- ivec2(1));\n            probe_location.dir_index = dir_index;\n            \n            int pixel_index = ProbeLocationToPixelIndex(probe_location, c0_size);\n            ivec3 texel_index = PixelIndexToCubemapTexel(face_size, pixel_index);\n            \n            \n            vec4 src_radiance = cubemapFetch(iChannel0, texel_index.z, texel_index.xy);\n            \n            c0_radiance += src_radiance * weights[i];\n        }\n        fluence += MergeIntervals(c_minus1_radiance, c0_radiance) / float(cascade_size.dirs_count);\n    }\n    \n    // Overlay actual SDF drawing to fix low resolution edges\n    //vec4 data = sampleDrawing(iChannel1, fragCoord);\n    //fluence = mix(fluence, data * 2.0 * PI, clamp(3.0 - data.r, 0.0, 1.0));\n    // Tonemap\n    //fragColor = vec4(pow(fluence / (fluence + 1.0), vec3(1.0/2.5)), 1.0);\n    fragColor = vec4(1.0 - 1.0 / pow(1.0 + fluence.rgb, vec3(2.5)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This buffer calculates and merges radiance cascades. Normally the\n// merging would happen within one frame (like a mipmap calculation),\n// meaning this technique actually has no termporal lag - but since\n// Shadertoy has no way of running a pass multiple times per frame, we \n// have to resort to spreading out the merging of cascades over multiple\n// frames.\n\n\n\n\n\n\nvec3 integrateSkyRadiance_(vec2 angle) {\n    // Sky radiance helper function\n    float a1 = angle[1];\n    float a0 = angle[0];\n    \n    // Sky integral formula taken from\n    // Analytic Direct Illumination - Mathis\n    // https://www.shadertoy.com/view/NttSW7\n    const vec3 SkyColor = vec3(0.2,0.5,1.);\n    const vec3 SunColor = vec3(1.,0.7,0.1)*10.;\n    const float SunA = 2.0;\n    const float SunS = 64.0;\n    const float SSunS = sqrt(SunS);\n    const float ISSunS = 1./SSunS;\n    vec3 SI = SkyColor*(a1-a0-0.5*(cos(a1)-cos(a0)));\n    SI += SunColor*(atan(SSunS*(SunA-a0))-atan(SSunS*(SunA-a1)))*ISSunS;\n    return SI / 6.0;\n}\n\nvec3 integrateSkyRadiance(vec2 angle) {\n    // Integrate the radiance from the sky over an interval of directions\n    if (angle[1] < 2.0 * PI) {\n        return integrateSkyRadiance_(angle);\n    }\n    \n    return\n        integrateSkyRadiance_(vec2(angle[0], 2.0 * PI)) +\n        integrateSkyRadiance_(vec2(0.0, angle[1] - 2.0 * PI));\n}\n\n#define RAYS_FORK_POW 2\n\n\nvec4 CastMergedInterval(vec2 screen_pos, vec2 dir, vec2 interval_length, int prev_cascade_index, int prev_dir_index)\n{\n    ivec2 face_size = textureSize(iChannel0, 0);    \n    ivec2 viewport_size = textureSize(iChannel1, 0);\n    CascadeSize c0_size = GetC0Size(viewport_size);\n    CascadeSize prev_cascade_size = GetCascadeSize(prev_cascade_index, c0_size);\n\n    vec2 ray_start = screen_pos * vec2(viewport_size) + dir * interval_length.x;\n    vec2 ray_end = screen_pos * vec2(viewport_size) + dir * interval_length.y;                \n\n    RayHit ray_hit = radiance(iChannel1, ray_start, normalize(ray_end - ray_start), length(ray_end - ray_start));\n\n    BilinearSamples bilinear_samples = GetProbeBilinearSamples(screen_pos, prev_cascade_index, c0_size);\n    vec4 weights = GetBilinearWeights(bilinear_samples.ratio);\n    vec4 prev_interp_interval = vec4(0.0f);\n    for(int i = 0; i < 4; i++)\n    {\n        ProbeLocation prev_probe_location;\n        prev_probe_location.cascade_index = prev_cascade_index;\n        prev_probe_location.probe_index = clamp(bilinear_samples.base_index + GetBilinearOffset(i), ivec2(0), prev_cascade_size.probes_count - ivec2(1));\n        prev_probe_location.dir_index = prev_dir_index;\n\n\n        int pixel_index = ProbeLocationToPixelIndex(prev_probe_location, c0_size);\n        ivec3 texel_index = PixelIndexToCubemapTexel(face_size, pixel_index);\n\n        vec4 prev_interval = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n        if(prev_cascade_index < nCascades)\n            prev_interval = cubemapFetch(iChannel0, texel_index.z, texel_index.xy);\n\n        prev_interp_interval += prev_interval * weights[i];\n    }\n    return MergeIntervals(ray_hit.radiance, prev_interp_interval);\n}\n\nvec4 InterpProbeDir(ivec2 probe_index, int cascade_index, float dir_indexf)\n{\n    ivec2 face_size = textureSize(iChannel0, 0);    \n    ivec2 viewport_size = textureSize(iChannel1, 0);\n    CascadeSize c0_size = GetC0Size(viewport_size);\n    CascadeSize cascade_size = GetCascadeSize(cascade_index, c0_size);\n    \n    vec4 interp_interval = vec4(0.0f);\n    LinearSamples dir_samples = GetLinearSamples(dir_indexf);\n    vec2 weights = GetLinearWeights(dir_samples.ratio);\n    for(int i = 0; i < 2; i++)\n    {\n        ProbeLocation probe_location;\n        probe_location.cascade_index = cascade_index;\n        probe_location.probe_index = probe_index;\n        probe_location.dir_index = (dir_samples.base_index + i + cascade_size.dirs_count) % cascade_size.dirs_count;\n        \n        int pixel_index = ProbeLocationToPixelIndex(probe_location, c0_size);\n        ivec3 texel_index = PixelIndexToCubemapTexel(face_size, pixel_index);\n        \n        vec4 prev_interval = cubemapFetch(iChannel0, texel_index.z, texel_index.xy);\n        interp_interval += prev_interval * weights[i];\n    }\n    return interp_interval;\n}\n\nvec4 CastMergedIntervalParallaxFix(vec2 screen_pos, vec2 dir, vec2 interval_length, int prev_cascade_index, int prev_dir_index)\n{\n    ivec2 face_size = textureSize(iChannel0, 0);    \n    ivec2 viewport_size = textureSize(iChannel1, 0);\n    CascadeSize c0_size = GetC0Size(viewport_size);\n    CascadeSize prev_cascade_size = GetCascadeSize(prev_cascade_index, c0_size);\n    \n    vec2 ray_start = screen_pos * vec2(viewport_size) + dir * interval_length.x;\n    vec2 ray_end = screen_pos * vec2(viewport_size) + dir * interval_length.y;                \n\n    RayHit ray_hit = radiance(iChannel1, ray_start, normalize(ray_end - ray_start), length(ray_end - ray_start));\n\n    BilinearSamples bilinear_samples = GetProbeBilinearSamples(screen_pos, prev_cascade_index, c0_size);\n    vec4 weights = GetBilinearWeights(bilinear_samples.ratio);\n    vec4 prev_interp_interval = vec4(0.0f);\n    for(int i = 0; i < 4; i++)\n    {\n        ivec2 prev_probe_index = clamp(bilinear_samples.base_index + GetBilinearOffset(i), ivec2(0), prev_cascade_size.probes_count - ivec2(1));\n        vec2 prev_screen_pos = GetProbeScreenPos(vec2(prev_probe_index), prev_cascade_index, c0_size);\n        float prev_dir_indexf = GetDirIndexf(ray_end - prev_screen_pos * vec2(viewport_size), prev_cascade_size.dirs_count);\n        vec4 prev_interval = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n        if(prev_cascade_index < nCascades)\n            prev_interval = InterpProbeDir(\n                prev_probe_index,\n                prev_cascade_index,\n                prev_dir_indexf);\n\n        prev_interp_interval += prev_interval * weights[i];\n    }\n    return MergeIntervals(ray_hit.radiance, prev_interp_interval);\n}\n\n\nvec4 CastMergedIntervalBilinearFix(vec2 screen_pos, vec2 dir, vec2 interval_length, int prev_cascade_index, int prev_dir_index)\n{\n    ivec2 face_size = textureSize(iChannel0, 0);    \n    ivec2 viewport_size = textureSize(iChannel1, 0);\n    CascadeSize c0_size = GetC0Size(viewport_size);\n    CascadeSize prev_cascade_size = GetCascadeSize(prev_cascade_index, c0_size);\n    \n    BilinearSamples bilinear_samples = GetProbeBilinearSamples(screen_pos, prev_cascade_index, c0_size);\n    vec4 weights = GetBilinearWeights(bilinear_samples.ratio);\n    vec4 merged_interval = vec4(0.0f);\n    for(int i = 0; i < 4; i++)\n    {\n        ProbeLocation prev_probe_location;\n        prev_probe_location.cascade_index = prev_cascade_index;\n        prev_probe_location.probe_index = clamp(bilinear_samples.base_index + GetBilinearOffset(i), ivec2(0), prev_cascade_size.probes_count - ivec2(1));\n        prev_probe_location.dir_index = prev_dir_index;\n\n\n        int pixel_index = ProbeLocationToPixelIndex(prev_probe_location, c0_size);\n        ivec3 texel_index = PixelIndexToCubemapTexel(face_size, pixel_index);\n\n        vec4 prev_interval = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n        if(prev_cascade_index < nCascades)\n            prev_interval = cubemapFetch(iChannel0, texel_index.z, texel_index.xy);\n\n        vec2 prev_screen_pos = GetProbeScreenPos(vec2(prev_probe_location.probe_index), prev_probe_location.cascade_index, c0_size);\n\n        vec2 ray_start = screen_pos * vec2(viewport_size) + dir * interval_length.x;\n        vec2 ray_end = prev_screen_pos * vec2(viewport_size) + dir * interval_length.y;                \n\n        RayHit ray_hit = radiance(iChannel1, ray_start, normalize(ray_end - ray_start), length(ray_end - ray_start));\n        merged_interval += MergeIntervals(ray_hit.radiance, prev_interval) * weights[i];\n    }\n    return merged_interval;\n}\n\n\nvec4 CastMergedIntervalMidpointBilinearFix(vec2 screen_pos, vec2 dir, vec2 interval_length, int prev_cascade_index, int prev_dir_index)\n{\n\n    ivec2 face_size = textureSize(iChannel0, 0);    \n    ivec2 viewport_size = textureSize(iChannel1, 0);\n    CascadeSize c0_size = GetC0Size(viewport_size);\n    CascadeSize prev_cascade_size = GetCascadeSize(prev_cascade_index, c0_size);\n    vec2 probe_screen_size = GetProbeScreenSize(prev_cascade_index, c0_size);\n\n    float midpoint_length = max(interval_length.x, interval_length.y - probe_screen_size.x * float(viewport_size.x) * 1.5f);\n    \n    vec2 ray_start_1 = screen_pos * vec2(viewport_size) + dir * interval_length.x;\n    vec2 ray_end_1 = screen_pos * vec2(viewport_size) + dir * midpoint_length;                \n\n    RayHit ray_hit_1 = radiance(iChannel1, ray_start_1, normalize(ray_end_1 - ray_start_1), length(ray_end_1 - ray_start_1));\n\n    \n    BilinearSamples bilinear_samples = GetProbeBilinearSamples(screen_pos, prev_cascade_index, c0_size);\n    vec4 weights = GetBilinearWeights(bilinear_samples.ratio);\n    vec4 merged_interval = vec4(0.0f);\n    for(int i = 0; i < 4; i++)\n    {\n        ProbeLocation prev_probe_location;\n        prev_probe_location.cascade_index = prev_cascade_index;\n        prev_probe_location.probe_index = clamp(bilinear_samples.base_index + GetBilinearOffset(i), ivec2(0), prev_cascade_size.probes_count - ivec2(1));\n        prev_probe_location.dir_index = prev_dir_index;\n\n\n        int pixel_index = ProbeLocationToPixelIndex(prev_probe_location, c0_size);\n        ivec3 texel_index = PixelIndexToCubemapTexel(face_size, pixel_index);\n\n        vec4 prev_interval = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n        if(prev_cascade_index < nCascades)\n            prev_interval = cubemapFetch(iChannel0, texel_index.z, texel_index.xy);\n\n        vec2 prev_screen_pos = GetProbeScreenPos(vec2(prev_probe_location.probe_index), prev_probe_location.cascade_index, c0_size);\n\n        vec2 ray_start_2 = ray_end_1;\n        vec2 ray_end_2 = prev_screen_pos * vec2(viewport_size) + dir * interval_length.y;                \n\n        RayHit ray_hit_2 = radiance(iChannel1, ray_start_2, normalize(ray_end_2 - ray_start_2), length(ray_end_2 - ray_start_2));\n        \n        vec4 combined_interval = MergeIntervals(ray_hit_1.radiance, ray_hit_2.radiance);\n        merged_interval += MergeIntervals(combined_interval, prev_interval) * weights[i];\n    }\n    return merged_interval;\n}\n\nvec4 CastMergedIntervalMaskFix(vec2 screen_pos, vec2 dir, vec2 interval_length, int prev_cascade_index, int prev_dir_index)\n{\n\n    ivec2 face_size = textureSize(iChannel0, 0);    \n    ivec2 viewport_size = textureSize(iChannel1, 0);\n    CascadeSize c0_size = GetC0Size(viewport_size);\n    CascadeSize prev_cascade_size = GetCascadeSize(prev_cascade_index, c0_size);\n    vec2 probe_screen_size = GetProbeScreenSize(prev_cascade_index, c0_size);\n\n    vec2 ray_start = screen_pos * vec2(viewport_size) + dir * interval_length.x;\n    vec2 ray_end = screen_pos * vec2(viewport_size) + dir * (interval_length.y + probe_screen_size.x * float(viewport_size.x) * 3.0f); \n\n    vec2 ray_dir = normalize(ray_end - ray_start);\n    RayHit ray_hit = radiance(iChannel1, ray_start, ray_dir, length(ray_end - ray_start));\n\n    BilinearSamples bilinear_samples = GetProbeBilinearSamples(screen_pos, prev_cascade_index, c0_size);\n    vec4 weights = GetBilinearWeights(bilinear_samples.ratio);\n    \n    vec4 masks;\n    for(int i = 0; i < 4; i++)\n    {\n        ivec2 prev_probe_index = clamp(bilinear_samples.base_index + GetBilinearOffset(i), ivec2(0), prev_cascade_size.probes_count - ivec2(1));\n        vec2 prev_screen_pos = GetProbeScreenPos(vec2(prev_probe_index), prev_cascade_index, c0_size);\n        \n        float max_hit_dist = dot(prev_screen_pos * vec2(viewport_size) + ray_dir * interval_length.y - ray_start, ray_dir);\n        masks[i] = ray_hit.dist > max_hit_dist ? 0.0f : 1.0f;\n    }\n    \n    float interp_mask = dot(masks, weights);\n    \n    vec4 ray_interval = ray_hit.radiance;\n    // https://www.desmos.com/calculator/2oxzmwlwhi\n    ray_interval.a = 1.0 - (1.0 - ray_interval.a) * interp_mask;\n    ray_interval.rgb *= 1.0 - ray_interval.a * (1.0 - interp_mask);\n    \n    vec4 prev_interp_interval = vec4(0.0f);\n    for(int i = 0; i < 4; i++)\n    {\n        ProbeLocation prev_probe_location;\n        prev_probe_location.cascade_index = prev_cascade_index;\n        prev_probe_location.probe_index = clamp(bilinear_samples.base_index + GetBilinearOffset(i), ivec2(0), prev_cascade_size.probes_count - ivec2(1));\n        prev_probe_location.dir_index = prev_dir_index;\n\n\n        int pixel_index = ProbeLocationToPixelIndex(prev_probe_location, c0_size);\n        ivec3 texel_index = PixelIndexToCubemapTexel(face_size, pixel_index);\n\n        vec4 prev_interval = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n        if(prev_cascade_index < nCascades)\n            prev_interval = cubemapFetch(iChannel0, texel_index.z, texel_index.xy);\n        prev_interp_interval += prev_interval * weights[i];\n    }\n    return MergeIntervals(ray_interval, prev_interp_interval);\n}\n\nvec4 CastInterpProbeDir(ivec2 probe_index, int cascade_index, vec2 interval_length, float dir_indexf)\n{\n    ivec2 face_size = textureSize(iChannel0, 0);    \n    ivec2 viewport_size = textureSize(iChannel1, 0);\n    CascadeSize c0_size = GetC0Size(viewport_size);\n    CascadeSize cascade_size = GetCascadeSize(cascade_index, c0_size);\n    \n    vec2 probe_screen_pos = GetProbeScreenPos(vec2(probe_index), cascade_index, c0_size);\n\n    vec4 interp_interval = vec4(0.0f);\n    LinearSamples dir_samples = GetLinearSamples(dir_indexf);\n    vec2 weights = GetLinearWeights(dir_samples.ratio);\n    for(int i = 0; i < 2; i++)\n    {\n        int dir_index = (dir_samples.base_index + i + cascade_size.dirs_count) % cascade_size.dirs_count;\n        vec2 ray_dir = GetProbeDir(float(dir_index), cascade_size.dirs_count);\n        \n        vec2 ray_start = probe_screen_pos * vec2(viewport_size) + ray_dir * interval_length.x;\n        vec2 ray_end = probe_screen_pos * vec2(viewport_size) + ray_dir * interval_length.y;                \n\n        RayHit ray_hit = radiance(iChannel1, ray_start, normalize(ray_end - ray_start), length(ray_end - ray_start));\n        interp_interval += ray_hit.radiance * weights[i];\n    }\n    return interp_interval;\n}\n\nvec4 CastMergedIntervalInnerParallaxFix(ivec2 probe_index, vec2 dir, vec2 interval_length, int prev_cascade_index, int prev_dir_index)\n{\n    ivec2 face_size = textureSize(iChannel0, 0);    \n    ivec2 viewport_size = textureSize(iChannel1, 0);\n    CascadeSize c0_size = GetC0Size(viewport_size);\n    CascadeSize prev_cascade_size = GetCascadeSize(prev_cascade_index, c0_size);\n    int cascade_index = prev_cascade_index - 1;\n    CascadeSize cascade_size = GetCascadeSize(cascade_index, c0_size);\n    vec2 probe_screen_pos = GetProbeScreenPos(vec2(probe_index), cascade_index, c0_size);\n    BilinearSamples bilinear_samples = GetProbeBilinearSamples(probe_screen_pos, prev_cascade_index, c0_size);\n    vec4 weights = GetBilinearWeights(bilinear_samples.ratio);\n    vec4 merged_interval = vec4(0.0f);\n    for(int i = 0; i < 4; i++)\n    {\n        ProbeLocation prev_probe_location;\n        prev_probe_location.cascade_index = prev_cascade_index;\n        prev_probe_location.probe_index = clamp(bilinear_samples.base_index + GetBilinearOffset(i), ivec2(0), prev_cascade_size.probes_count - ivec2(1));\n        prev_probe_location.dir_index = prev_dir_index;\n\n\n        int pixel_index = ProbeLocationToPixelIndex(prev_probe_location, c0_size);\n        ivec3 texel_index = PixelIndexToCubemapTexel(face_size, pixel_index);\n\n        vec4 prev_interval = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n        if(prev_cascade_index < nCascades)\n            prev_interval = cubemapFetch(iChannel0, texel_index.z, texel_index.xy);\n\n        vec2 prev_screen_pos = GetProbeScreenPos(vec2(prev_probe_location.probe_index), prev_probe_location.cascade_index, c0_size);\n\n        vec2 ray_start = probe_screen_pos * vec2(viewport_size) + dir * interval_length.x;\n        vec2 ray_end = prev_screen_pos * vec2(viewport_size) + dir * interval_length.y;\n        \n        vec2 ray_dir = normalize(ray_end - ray_start);\n        float dir_indexf = GetDirIndexf(ray_dir, cascade_size.dirs_count);\n\n        vec4 ray_hit_radiance = CastInterpProbeDir(probe_index, cascade_index, interval_length, dir_indexf);\n        merged_interval += MergeIntervals(ray_hit_radiance, prev_interval) * weights[i];\n    }\n    return merged_interval;\n}\n\n\nvoid mainCubemap(out vec4 fragColor, vec2 fragCoord, vec3 fragRO, vec3 fragRD) {\n    // Calculate the index for this cubemap texel\n    int face;\n    \n    if (abs(fragRD.x) > abs(fragRD.y) && abs(fragRD.x) > abs(fragRD.z)) {\n        face = fragRD.x > 0.0 ? 0 : 1;\n    } else if (abs(fragRD.y) > abs(fragRD.z)) {\n        face = fragRD.y > 0.0 ? 2 : 3;\n    } else {\n        face = fragRD.z > 0.0 ? 4 : 5;\n    }\n    \n    ivec2 face_size = textureSize(iChannel0, 0);\n    \n    ivec2 face_pixel = ivec2(fragCoord.xy);\n    int face_index = face;\n    int pixel_index = face_pixel.x + face_pixel.y * face_size.x + face_index * (face_size.x * face_size.y);\n    \n    ivec2 viewport_size = textureSize(iChannel1, 0);\n    CascadeSize c0_size = GetC0Size(viewport_size);\n    ProbeLocation probe_location = PixelIndexToProbeLocation(pixel_index, c0_size);\n    \n    if(probe_location.cascade_index >= nCascades)\n    {\n        fragColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n        return;\n    }\n    vec2 interval_overlap = vec2(1.0f, 1.0f);\n    #if MERGE_FIX == 4 || MERGE_FIX == 5 //parallax fix works better with overlapping intervals\n        interval_overlap = vec2(1.0f, 1.1f);\n    #endif\n    vec2 interval_length = GetCascadeIntervalScale(probe_location.cascade_index) * GetC0IntervalLength(viewport_size) * interval_overlap;\n    CascadeSize cascade_size = GetCascadeSize(probe_location.cascade_index, c0_size);\n    int prev_cascade_index = probe_location.cascade_index + 1;\n    CascadeSize prev_cascade_size = GetCascadeSize(prev_cascade_index, c0_size);\n   \n    \n    vec2 screen_pos = GetProbeScreenPos(vec2(probe_location.probe_index), probe_location.cascade_index, c0_size);\n    \n    int avg_dirs_count = prev_cascade_size.dirs_count / cascade_size.dirs_count;\n    \n    vec4 merged_avg_interval = vec4(0.0f);\n    for(int dir_number = 0; dir_number < avg_dirs_count; dir_number++)\n    {\n        int prev_dir_index = probe_location.dir_index * avg_dirs_count + dir_number;\n        vec2 ray_dir = GetProbeDir(float(prev_dir_index), prev_cascade_size.dirs_count);\n        \n        #if MERGE_FIX == 0\n            vec4 merged_inteval = CastMergedInterval(screen_pos, ray_dir, interval_length, prev_cascade_index, prev_dir_index);\n        #elif MERGE_FIX == 1\n            vec4 merged_inteval = CastMergedIntervalBilinearFix(screen_pos, ray_dir, interval_length, prev_cascade_index, prev_dir_index);\n        #elif MERGE_FIX == 2\n            vec4 merged_inteval = CastMergedIntervalMidpointBilinearFix(screen_pos, ray_dir, interval_length, prev_cascade_index, prev_dir_index);\n        #elif MERGE_FIX == 3\n            vec4 merged_inteval = CastMergedIntervalMaskFix(screen_pos, ray_dir, interval_length, prev_cascade_index, prev_dir_index);\n        #elif MERGE_FIX == 4\n            vec4 merged_inteval = CastMergedIntervalParallaxFix(screen_pos, ray_dir, interval_length, prev_cascade_index, prev_dir_index);\n        #elif MERGE_FIX == 5\n            vec4 merged_inteval = CastMergedIntervalInnerParallaxFix(probe_location.probe_index, ray_dir, interval_length, prev_cascade_index, prev_dir_index);\n        #endif\n        merged_avg_interval += merged_inteval / float(avg_dirs_count);  \n    }\n    fragColor = merged_avg_interval;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            },
            {
                "code": "#define MERGE_FIX 1\n#define C_MINUS1_GATHERING 1\n// Number of cascades all together\nconst int nCascades = 6;\n\n// Brush radius used for drawing, measured as fraction of iResolution.y\nconst float brushRadius = 0.02;\n\nconst float MAX_FLOAT = uintBitsToFloat(0x7f7fffffu);\nconst float PI = 3.1415927;\nconst float MAGIC = 1e25;\n\n#define probe_center vec2(0.5f)\n\n#define BRANCHING_FACTOR 2\n\n#define SPATIAL_SCALE_FACTOR 1\n\nstruct CascadeSize\n{\n    ivec2 probes_count;\n    int dirs_count;\n};\nCascadeSize GetC0Size(ivec2 viewport_size)\n{\n    CascadeSize c0_size;\n    #if BRANCHING_FACTOR == 0\n        c0_size.probes_count = ivec2(256) * ivec2(1, viewport_size.y) / ivec2(1, viewport_size.x);//viewport_size / 10;\n        c0_size.dirs_count = 64;\n    #elif BRANCHING_FACTOR == 1\n        c0_size.probes_count = ivec2(256) * ivec2(1, viewport_size.y) / ivec2(1, viewport_size.x);//viewport_size / 10;\n        c0_size.dirs_count = 32;\n    #elif BRANCHING_FACTOR == 2\n        c0_size.probes_count = ivec2(512) * ivec2(1, viewport_size.y) / ivec2(1, viewport_size.x);//viewport_size / 10;\n        c0_size.dirs_count = 4;\n    #endif\n    return c0_size;\n}\n\nfloat GetC0IntervalLength(ivec2 viewport_size)\n{\n    #if BRANCHING_FACTOR == 0\n        return float(viewport_size.x) * 10.0f * 1e-2f;\n    #elif BRANCHING_FACTOR == 1\n        return float(viewport_size.x) * 15.0f * 1e-3f;\n    #elif BRANCHING_FACTOR == 2\n        return float(viewport_size.x) * 1.5f * 1e-3f;\n    #endif\n}\n\nvec2 screenRes;\n\nvec4 cubemapFetch(samplerCube sampler, int face, ivec2 P) {\n    // Look up a single texel in a cubemap\n    ivec2 cubemapRes = textureSize(sampler, 0);\n    if (clamp(P, ivec2(0), cubemapRes - 1) != P || face < 0 || face > 5) {\n        return vec4(0.0);\n    }\n\n    vec2 p = (vec2(P) + 0.5) / vec2(cubemapRes) * 2.0 - 1.0;\n    vec3 c;\n    \n    switch (face) {\n        case 0: c = vec3( 1.0, -p.y, -p.x); break;\n        case 1: c = vec3(-1.0, -p.y,  p.x); break;\n        case 2: c = vec3( p.x,  1.0,  p.y); break;\n        case 3: c = vec3( p.x, -1.0, -p.y); break;\n        case 4: c = vec3( p.x, -p.y,  1.0); break;\n        case 5: c = vec3(-p.x, -p.y, -1.0); break;\n    }\n    \n    return texture(sampler, normalize(c));\n}\n\nivec2 roundSDim(ivec2 v) {\n    return v - (v & ivec2((1 << nCascades) - 1));\n}\n\nfloat GetCascadeIntervalStartScale(int cascade_index)\n{\n    #if BRANCHING_FACTOR == 0\n        return float(cascade_index);\n    #else\n        return (cascade_index == 0 ? 0.0f : float(1 << (BRANCHING_FACTOR * cascade_index))) + float(C_MINUS1_GATHERING);\n    #endif\n}\n\nvec2 GetCascadeIntervalScale(int cascade_index)\n{\n    return vec2(GetCascadeIntervalStartScale(cascade_index), GetCascadeIntervalStartScale(cascade_index + 1));\n}\n\nstruct BilinearSamples\n{\n    ivec2 base_index;\n    vec2 ratio;\n};\n\nvec4 GetBilinearWeights(vec2 ratio)\n{\n    return vec4(\n        (1.0f - ratio.x) * (1.0f - ratio.y),\n        ratio.x * (1.0f - ratio.y),\n        (1.0f - ratio.x) * ratio.y,\n        ratio.x * ratio.y);\n}\n\nivec2 GetBilinearOffset(int offset_index)\n{\n    ivec2 offsets[4] = ivec2[4](ivec2(0, 0), ivec2(1, 0), ivec2(0, 1), ivec2(1, 1));\n    return offsets[offset_index];\n}\nBilinearSamples GetBilinearSamples(vec2 pixel_index2f)\n{\n    BilinearSamples samples;\n    samples.base_index = ivec2(floor(pixel_index2f));\n    samples.ratio = fract(pixel_index2f);\n    return samples;\n}\n\nstruct LinearSamples\n{\n    int base_index;\n    float ratio;\n};\nvec2 GetLinearWeights(float ratio)\n{\n    return vec2(1.0f - ratio, ratio);\n}\nLinearSamples GetLinearSamples(float indexf)\n{\n    LinearSamples samples;\n    samples.base_index = int(floor(indexf));\n    samples.ratio = fract(indexf);\n    return samples;\n}\n\nCascadeSize GetCascadeSize(int cascade_index, CascadeSize c0_size)\n{\n    CascadeSize cascade_size;\n    cascade_size.probes_count = max(ivec2(1), c0_size.probes_count >> (SPATIAL_SCALE_FACTOR * cascade_index));\n    cascade_size.dirs_count = c0_size.dirs_count * (1 << (BRANCHING_FACTOR * cascade_index));\n    return cascade_size;\n}\n\nint GetCascadeLinearOffset(int cascade_index, CascadeSize c0_size)\n{\n    int c0_pixels_count = c0_size.probes_count.x * c0_size.probes_count.y * c0_size.dirs_count;\n    int offset = 0;\n    \n    for(int i = 0; i < cascade_index; i++)\n    {\n        CascadeSize cascade_size = GetCascadeSize(i, c0_size);\n        offset += cascade_size.probes_count.x * cascade_size.probes_count.y * cascade_size.dirs_count;\n    }\n    return offset;\n    /*#if BRANCHING_FACTOR == 2\n        return c0_pixels_count * cascade_index;\n    #elif BRANCHING_FACTOR == 1\n        return cascade_index == 0 ? 0 : (c0_pixels_count * ((1 << cascade_index) - 1) / (1 << (cascade_index - 1)));\n    #endif*/\n    \n}\n\n\n\nstruct ProbeLocation\n{\n    ivec2 probe_index;\n    int dir_index;\n    int cascade_index;\n};\nint ProbeLocationToPixelIndex(ProbeLocation probe_location, CascadeSize c0_size)\n{\n    CascadeSize cascade_size = GetCascadeSize(probe_location.cascade_index, c0_size);\n    int probe_linear_index = probe_location.probe_index.x + probe_location.probe_index.y * cascade_size.probes_count.x;\n    int offset_in_cascade = probe_linear_index * cascade_size.dirs_count + probe_location.dir_index;\n    return GetCascadeLinearOffset(probe_location.cascade_index, c0_size) + offset_in_cascade ;\n}\n\nProbeLocation PixelIndexToProbeLocation(int pixel_index, CascadeSize c0_size)\n{\n    ProbeLocation probe_location;\n\n    for(\n        probe_location.cascade_index = 0;\n        GetCascadeLinearOffset(probe_location.cascade_index + 1, c0_size) <= pixel_index && probe_location.cascade_index < 10;\n        probe_location.cascade_index++);\n\n    int offset_in_cascade = pixel_index - GetCascadeLinearOffset(probe_location.cascade_index, c0_size);\n    CascadeSize cascade_size = GetCascadeSize(probe_location.cascade_index, c0_size);\n    \n    probe_location.dir_index = offset_in_cascade % cascade_size.dirs_count;\n    int probe_linear_index = offset_in_cascade / cascade_size.dirs_count;\n    probe_location.probe_index = ivec2(probe_linear_index % cascade_size.probes_count.x, probe_linear_index / cascade_size.probes_count.x);\n    return probe_location;\n}\nivec3 PixelIndexToCubemapTexel(ivec2 face_size, int pixel_index)\n{\n    int face_pixels_count = face_size.x * face_size.y;\n    int face_index = pixel_index / face_pixels_count;\n    int face_pixel_index = pixel_index - face_pixels_count * face_index;\n    ivec2 face_pixel = ivec2(face_pixel_index % face_size.x, face_pixel_index / face_size.x);\n    return ivec3(face_pixel, face_index);\n}\n\nvec2 GetProbeScreenSize(int cascade_index, CascadeSize c0_size)\n{\n    vec2 c0_probe_screen_size = vec2(1.0f) / vec2(c0_size.probes_count);\n    return c0_probe_screen_size * float(1 << (SPATIAL_SCALE_FACTOR * cascade_index));\n}\n\nBilinearSamples GetProbeBilinearSamples(vec2 screen_pos, int cascade_index, CascadeSize c0_size)\n{\n    vec2 probe_screen_size = GetProbeScreenSize(cascade_index, c0_size);\n    \n    vec2 prev_probe_index2f = screen_pos / probe_screen_size - probe_center;    \n    return GetBilinearSamples(prev_probe_index2f);\n}\n\nvec2 GetProbeScreenPos(vec2 probe_index2f, int cascade_index, CascadeSize c0_size)\n{\n    vec2 probe_screen_size = GetProbeScreenSize(cascade_index, c0_size);\n    \n    return (probe_index2f + probe_center) * probe_screen_size;\n}\n\nvec2 GetProbeDir(float dir_indexf, int dirs_count)\n{\n    float ang_ratio = (dir_indexf + 0.5f) / float(dirs_count);\n    float ang = ang_ratio * 2.0f * PI;\n    return vec2(cos(ang), sin(ang));\n}\n\nfloat GetDirIndexf(vec2 dir, int dirs_count)\n{\n    float ang = atan(dir.y, dir.x);\n    float ang_ratio = ang / (2.0f * PI);\n    return ang_ratio * float(dirs_count) - 0.5f;\n}\n\nvec4 MergeIntervals(vec4 near_interval, vec4 far_interval)\n{\n    //return near_interval + far_interval;\n    return vec4(near_interval.rgb + near_interval.a * far_interval.rgb, near_interval.a * far_interval.a);\n}\n\nconst int KEY_SPACE = 32;\nconst int KEY_1 = 49;\n\n#ifndef HW_PERFORMANCE\nuniform vec4 iMouse;\nuniform sampler2D iChannel2;\nuniform float iTime;\n#endif\n\nbool keyToggled(int keyCode) {\n    return texelFetch(iChannel2, ivec2(keyCode, 2), 0).r > 0.0;\n}\n\nvec3 hsv2rgb(vec3 c) {\n    vec3 rgb = clamp(\n        abs(mod(c.x * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0,\n        0.0,\n        1.0\n    );\n\treturn c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvec3 getEmissivity() {\n    return !keyToggled(KEY_SPACE)\n        ? pow(hsv2rgb(vec3(iTime * 0.2 + 0.0f, 1.0, 2.5)), vec3(2.2))\n        : vec3(0.0);\n}\n\nfloat sdCircle(vec2 p, vec2 c, float r) {\n    return distance(p, c) - r;\n}\n\nfloat sdSegment(vec2 p, vec2 a, vec2 b) {\n    vec2 ap = p - a;\n    vec2 ab = b - a;\n    return distance(ap, ab * clamp(dot(ap, ab) / dot(ab, ab), 0.0, 1.0));\n}\n\nvec4 sampleDrawing(sampler2D drawingTex, vec2 P) {\n    // Return the drawing (in the format listed at the top of Buffer B) at P\n    vec4 data = texture(drawingTex, P / vec2(textureSize(drawingTex, 0)));\n    \n    if (keyToggled(KEY_1) && iMouse.z > 0.0) {\n        float radius = brushRadius * screenRes.y;\n        //float sd = sdCircle(P, iMouse.xy + 0.5, radius);\n        float sd = sdSegment(P, abs(iMouse.zw) + 0.5, iMouse.xy + 0.5) - radius;\n        \n        if (sd <= max(data.r, 0.0)) {\n            data = vec4(min(sd, data.r), getEmissivity());\n        }\n    }\n\n    return data;\n}\n\nfloat sdDrawing(sampler2D drawingTex, vec2 P) {\n    // Return the signed distance for the drawing at P\n    return sampleDrawing(drawingTex, P).r;\n}\n\nvec2 intersectAABB(vec2 ro, vec2 rd, vec2 a, vec2 b) {\n    // Return the two intersection t-values for the intersection between a ray\n    // and an axis-aligned bounding box\n    vec2 ta = (a - ro) / rd;\n    vec2 tb = (b - ro) / rd;\n    vec2 t1 = min(ta, tb);\n    vec2 t2 = max(ta, tb);\n    vec2 t = vec2(max(t1.x, t1.y), min(t2.x, t2.y));\n    return t.x > t.y ? vec2(-1.0) : t;\n}\n\n\n\nfloat intersect(sampler2D sdf_tex, vec2 ro, vec2 rd, float tMax) {\n    // Return the intersection t-value for the intersection between a ray and\n    // the SDF drawing from Buffer B\n    screenRes = vec2(textureSize(sdf_tex, 0));\n    float tOffset = 0.0;\n    // First clip the ray to the screen rectangle\n    vec2 tAABB = intersectAABB(ro, rd, vec2(0.0001), screenRes - 0.0001);\n    \n    if (tAABB.x > tMax || tAABB.y < 0.0) {\n        return -1.0;\n    }\n    \n    if (tAABB.x > 0.0) {\n        ro += tAABB.x * rd;\n        tOffset += tAABB.x;\n        tMax -= tAABB.x;\n    }\n    \n    if (tAABB.y < tMax) {\n        tMax = tAABB.y;\n    }\n\n    float t = 0.0;\n\n    for (int i = 0; i < 100; i++) {\n        float d = sdDrawing(sdf_tex, ro + rd * t);\n        \n        t += (d);\n        if ((d) < 0.01)\n            return t;\n\n        if (t >= tMax) {\n            break;\n        }\n    }\n\n    return -1.0;\n}\n\nstruct RayHit\n{\n    vec4 radiance;\n    float dist;\n};\n#if MERGE_FIX != 3 //Dolkar fix works better if miss rays terminate instead of being infinite\nRayHit radiance(sampler2D sdf_tex, vec2 ro, vec2 rd, float tMax) {\n    // Returns the radiance and visibility term for a ray\n    vec4 p = sampleDrawing(sdf_tex, ro);\n    float t = 1e6f;\n    if (p.r > 0.0) {\n        t = intersect(sdf_tex, ro, rd, tMax);\n        \n        if (t == -1.0) {\n            return RayHit(vec4(0.0, 0.0, 0.0, 1.0), 1e5f);\n        }\n\n        p = sampleDrawing(sdf_tex, ro + rd * t);\n    }\n\n    return RayHit(vec4(p.gba, 0.0), t);\n}\n#else\nRayHit radiance(sampler2D sdf_tex, vec2 ro, vec2 rd, float tMax) {\n    // Returns the radiance and visibility term for a ray\n    vec4 p = sampleDrawing(sdf_tex, ro);\n    if (p.r > 0.0) {\n        float t = intersect(sdf_tex, ro, rd, tMax);\n        \n        if (t == -1.0) {\n            return RayHit(vec4(0.0, 0.0, 0.0, 1.0), 1e5f);\n        }\n\n        p = sampleDrawing(sdf_tex, ro + rd * t);\n        return RayHit(vec4(p.gba, 0.0), t);\n    } else {\n        return RayHit(vec4(0.0), 0.0);\n    }\n}\n#endif",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// SDF drawing logic from \n// Smooth Mouse Drawing - fad\n// https://www.shadertoy.com/view/dldXR7\n\n// This buffer tracks smoothed mouse positions over multiple frames.\n\n// See https://lazybrush.dulnan.net/ for what these mean:\n#define RADIUS (iResolution.y * 0.015)\n#define FRICTION 0.05\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    if (fragCoord.y != 0.5 || fragCoord.x > 3.0) {\n        return;\n    }\n\n    if (iFrame == 0) {\n        if (fragCoord.x == 2.5) {\n            fragColor = iMouse;\n        } else {\n            fragColor = vec4(0.0);\n        }\n        \n        return;\n    }\n    \n    vec4 iMouse = iMouse;\n    \n    if (iMouse == vec4(0.0)) {\n        float t = iTime * 3.0;\n        iMouse.xy = vec2(\n            cos(3.14159 * t) + sin(0.72834 * t + 0.3),\n            sin(2.781374 * t + 3.47912) + cos(t)\n        ) * 0.25 + 0.5;\n        iMouse.xy *= iResolution.xy;\n        iMouse.z = MAGIC;\n    }\n    \n    vec4 mouseA = texelFetch(iChannel0, ivec2(1, 0), 0);\n    vec4 mouseB = texelFetch(iChannel0, ivec2(2, 0), 0);\n    vec4 mouseC;\n    mouseC.zw = iMouse.zw;\n    float dist = distance(mouseB.xy, iMouse.xy);\n    \n    if (mouseB.z > 0.0 && (mouseB.z != MAGIC || iMouse.z == MAGIC) && dist > 0.0) {\n        vec2 dir = (iMouse.xy - mouseB.xy) / dist;\n        float len = max(dist - RADIUS, 0.0);\n        float ease = 1.0 - pow(FRICTION, iTimeDelta * 10.0);\n        mouseC.xy = mouseB.xy + dir * len * ease;\n    } else {\n        mouseC.xy = iMouse.xy;\n    }\n    \n    if (fragCoord.x == 0.5) {\n        fragColor = mouseA;\n    } else if (fragCoord.x == 1.5) {\n        fragColor = mouseB.z == MAGIC && iMouse.z != MAGIC ? vec4(0.0) : mouseB;\n    } else {\n        fragColor = mouseC;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This buffer draws the SDF:\n// .r stores signed distance\n// .gba stores emissivity\n\n// SDF drawing logic from \n// Smooth Mouse Drawing - fad\n// https://www.shadertoy.com/view/dldXR7\n\n// solveQuadratic(), solveCubic(), solve() and sdBezier() are from\n// Quadratic Bezier SDF With L2 - Envy24\n// https://www.shadertoy.com/view/7sGyWd\n// with modification. Thank you! I tried a lot of different sdBezier()\n// implementations from across Shadertoy (including trying to make it\n// myself) and all of them had bugs and incorrect edge case handling\n// except this one.\n\nint solveQuadratic(float a, float b, float c, out vec2 roots) {\n    // Return the number of real roots to the equation\n    // a*x^2 + b*x + c = 0 where a != 0 and populate roots.\n    float discriminant = b * b - 4.0 * a * c;\n\n    if (discriminant < 0.0) {\n        return 0;\n    }\n\n    if (discriminant == 0.0) {\n        roots[0] = -b / (2.0 * a);\n        return 1;\n    }\n\n    float SQRT = sqrt(discriminant);\n    roots[0] = (-b + SQRT) / (2.0 * a);\n    roots[1] = (-b - SQRT) / (2.0 * a);\n    return 2;\n}\n\nint solveCubic(float a, float b, float c, float d, out vec3 roots) {\n    // Return the number of real roots to the equation\n    // a*x^3 + b*x^2 + c*x + d = 0 where a != 0 and populate roots.\n    const float TAU = 6.2831853071795862;\n    float A = b / a;\n    float B = c / a;\n    float C = d / a;\n    float Q = (A * A - 3.0 * B) / 9.0;\n    float R = (2.0 * A * A * A - 9.0 * A * B + 27.0 * C) / 54.0;\n    float S = Q * Q * Q - R * R;\n    float sQ = sqrt(abs(Q));\n    roots = vec3(-A / 3.0);\n\n    if (S > 0.0) {\n        roots += -2.0 * sQ * cos(acos(R / (sQ * abs(Q))) / 3.0 + vec3(TAU, 0.0, -TAU) / 3.0);\n        return 3;\n    }\n    \n    if (Q == 0.0) {\n        roots[0] += -pow(C - A * A * A / 27.0, 1.0 / 3.0);\n        return 1;\n    }\n    \n    if (S < 0.0) {\n        float u = abs(R / (sQ * Q));\n        float v = Q > 0.0 ? cosh(acosh(u) / 3.0) : sinh(asinh(u) / 3.0);\n        roots[0] += -2.0 * sign(R) * sQ * v;\n        return 1;\n    }\n    \n    roots.xy += vec2(-2.0, 1.0) * sign(R) * sQ;\n    return 2;\n}\n\nint solve(float a, float b, float c, float d, out vec3 roots) {\n    // Return the number of real roots to the equation\n    // a*x^3 + b*x^2 + c*x + d = 0 and populate roots.\n    if (a == 0.0) {\n        if (b == 0.0) {\n            if (c == 0.0) {\n                return 0;\n            }\n            \n            roots[0] = -d/c;\n            return 1;\n        }\n        \n        vec2 r;\n        int num = solveQuadratic(b, c, d, r);\n        roots.xy = r;\n        return num;\n    }\n    \n    return solveCubic(a, b, c, d, roots);\n}\n\nfloat sdBezier(vec2 p, vec2 a, vec2 b, vec2 c) {\n    vec2 A = a - 2.0 * b + c;\n    vec2 B = 2.0 * (b - a);\n    vec2 C = a - p;\n    vec3 T;\n    int num = solve(\n        2.0 * dot(A, A),\n        3.0 * dot(A, B),\n        2.0 * dot(A, C) + dot(B, B),\n        dot(B, C),\n        T\n    );\n    T = clamp(T, 0.0, 1.0);\n    float best = 1e30;\n    \n    for (int i = 0; i < num; ++i) {\n        float t = T[i];\n        float u = 1.0 - t;\n        vec2 d = u * u * a + 2.0 * t * u * b + t * t * c - p;\n        best = min(best, dot(d, d));\n    }\n    \n    return sqrt(best);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec4 data = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    float sd = iFrame != 0 ? data.r : MAX_FLOAT;\n    vec3 emissivity = iFrame != 0 ? data.gba : vec3(0.0);\n    vec4 mouseA = iFrame > 0 ? texelFetch(iChannel0, ivec2(0, 0), 0) : vec4(0.0);\n    vec4 mouseB = iFrame > 0 ? texelFetch(iChannel0, ivec2(1, 0), 0) : vec4(0.0);\n    vec4 mouseC = iFrame > 0 ? texelFetch(iChannel0, ivec2(2, 0), 0) : iMouse;\n    mouseA.xy += 0.5;\n    mouseB.xy += 0.5;\n    mouseC.xy += 0.5;\n    float d = MAX_FLOAT;\n    \n    if (mouseB.z <= 0.0 && mouseC.z > 0.0) {\n        d = distance(fragCoord, mouseC.xy);\n    } else if (mouseA.z <= 0.0 && mouseB.z > 0.0 && mouseC.z > 0.0) {\n        d = sdSegment(fragCoord, mouseB.xy, mix(mouseB.xy, mouseC.xy, 0.5));\n    } else if (mouseA.z > 0.0 && mouseB.z > 0.0 && mouseC.z > 0.0) {\n        d = sdBezier(\n            fragCoord,\n            mix(mouseA.xy, mouseB.xy, 0.5),\n            mouseB.xy,\n            mix(mouseB.xy, mouseC.xy, 0.5)\n        );\n    } else if (mouseA.z > 0.0 && mouseB.z > 0.0 && mouseC.z <= 0.0) {\n        d = sdSegment(fragCoord, mix(mouseA.xy, mouseB.xy, 0.5), mouseB.xy);\n    }\n    \n    d -= brushRadius * iResolution.y;\n    \n    if (\n        d < max(0.0, sd) && !keyToggled(KEY_1) &&\n        (mouseC.z != MAGIC || cos(iTime * 20.0) > 0.5)\n    ) {\n        sd = min(d, sd);\n        emissivity = getEmissivity() * float(mouseC.z != MAGIC || cos(iTime * 10.0) > 0.5);\n    }\n    \n    /*float t = 20.0f;\n    sd = distance(fragCoord, vec2(0.66 + sin(t/4.0)/8.0, 0.5 + cos(t/4.0)/4.0) * iResolution.xy) - 10.0;\n    sd = min(sd, max(abs(fragCoord.x - 0.5 * iResolution.x) - 10.0, abs(fragCoord.y - 0.5 * iResolution.y) - 30.0));\n    emissivity = (fragCoord.x < 0.52 * iResolution.x) ? vec3(0.0) : vec3(4.0);*/\n\n    fragColor = vec4(sd, emissivity);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}