{
    "Shader": {
        "info": {
            "date": "1635715544",
            "description": "one day i had the bright idea to color warped noise with not the value but the difference between the value at one pixel and the value at an offset from that pixel. this creates some nice shading-like effects. NGL, pretty satisfying as a screensaver",
            "flags": 0,
            "hasliked": 0,
            "id": "fltGzH",
            "likes": 8,
            "name": "Warped noise with shadows",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "procedual"
            ],
            "usePreview": 0,
            "username": "arthehaxxor",
            "viewed": 282
        },
        "renderpass": [
            {
                "code": "// copy from https://www.shadertoy.com/view/4l2GzW\n#define CONT 0.1\n\nfloat r(float n)\n{\n \treturn fract(cos(n*89.42)*343.42);\n}\nvec2 r(vec2 n)\n{\n \treturn vec2(r(n.x*23.62-300.0+n.y*34.35),r(n.x*45.13+256.0+n.y*38.89)); \n}\nfloat worley(vec2 n,float s)\n{\n    float dis = 2.0;\n    for(int x = -1;x<=1;x++)\n    {\n        for(int y = -1;y<=1;y++)\n        {\n            vec2 p = floor(n/s)+vec2(x,y);\n            float d = length(r(p)+vec2(x,y)-fract(n/s));\n            if (dis>d)\n            {\n             \tdis = d;   \n            }\n        }\n    }\n    return 1.0 - dis;\n\t\n}\n\n// copy from https://www.shadertoy.com/view/4sc3z2\n\n#define MOD3 vec3(.1031,.11369,.13787)\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n                \tmix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                       \tw.x),\n                \tmix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                       \tw.x),\n                \tw.z),\n        \t\tmix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                       \tw.x),\n                   \tmix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                       \tw.x),\n                \tw.z),\n    \t\t\tw.y);\n}\n\nfloat noise(vec2 v) {\n    float dis = (1.0+perlin_noise(vec3(v, sin(iTime*0.15))*5.0)) \n        * (1.0+(worley(v, 32.0)+\n        0.5*worley(2.0*v,32.0) +\n        0.25*worley(4.0*v,32.0) ));\n        \n    return dis*0.25;\n}\n\nfloat frct(vec2 v) {\n    return noise((v) + noise(v - noise(v)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float c =(frct(fragCoord/iResolution.xy) - frct((fragCoord+CONT)/iResolution.xy))/CONT + 0.5;\n    \n\tfragColor = vec4(vec3(abs(sqrt(c))),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}