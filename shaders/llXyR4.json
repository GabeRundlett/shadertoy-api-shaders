{
    "Shader": {
        "info": {
            "date": "1503603770",
            "description": "trying to render a 3d part of 4d. surprisingly not heavy, considering all the sphere raycasts.",
            "flags": 0,
            "hasliked": 0,
            "id": "llXyR4",
            "likes": 3,
            "name": "hypercylinder fractal",
            "published": 3,
            "tags": [
                "fractal",
                "4d"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 808
        },
        "renderpass": [
            {
                "code": "#define rot(spin) mat2(sin(spin),cos(spin),cos(spin),-sin(spin))\n\n//by iq https://www.shadertoy.com/view/XljGDy\nvec2 sphIntersect(in vec3 rd, in vec4 sph )\n{\n\tvec3 oc =  sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0  || dot(sph.xyz,sph.xyz) > sph.w*sph.w) return vec2(-1.0);\n    h = sqrt( h );\n\treturn -b + vec2(-h,h);\n}\n\n//by iq https://www.shadertoy.com/view/XljGDy\nfloat sphDensity( vec4  ro, vec4  rd,   // ray origin, ray direction\n                  vec4  sc, float sr,   // sphere center, sphere radius\n                  float dbuffer )       // depth buffer\n{\n    // normalize the problem to the canonical sphere\n    float ndbuffer = dbuffer / sr;\n    vec4  rc = (ro - sc)/sr;\n\t\n    // find intersection with sphere\n    float b = dot(rd,rc);\n    float c = dot(rc,rc) - 1.0;\n    float h = b*b - c;\n\n    // not intersecting\n    if( h<0.0 ) return 0.0;\n\t\n    h = sqrt( h );\n    \n    //return h*h*h;\n\n    float t1 = -b - h;\n    float t2 = -b + h;\n\n    // not visible (behind camera or behind ndbuffer)\n    if( t2<0.0 || t1>ndbuffer ) return 0.0;\n\n    // clip integration segment from camera to ndbuffer\n    t1 = max( t1, 0.0 );\n    t2 = min( t2, ndbuffer );\n\n    // analytical integration of an inverse squared density\n    float i1 = -(c*t1 + b*t1*t1 + t1*t1*t1/3.0);\n    float i2 = -(c*t2 + b*t2*t2 + t2*t2*t2/3.0);\n    return (i2-i1)*(3.0/4.0);\n}\n\n/*vec2 circle(in vec2 rd, in vec3 sph )\n{\n    vec2 oc = sph.xy;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - sph.z*sph.z;\n    float h = b*b - c;\n    if( h<0.0 || dot(sph.xy,sph.xy) > sph.z*sph.z) return vec2(0.0);\n    h = sqrt( h );\n    return -b + vec2(-h,h);\n}*/\n\n\n\nfloat cylinder(vec4 ray, vec4 pos, float size,\n        float lenrayyzw,\n        float lenrayzwx,\n        float lenraywxy,\n        float lenrayxyz) {\n    return max(max(max(\n        sphIntersect(ray.yzw*lenrayyzw,vec4(pos.yzw,size)).y*lenrayyzw,\n        sphIntersect(ray.zwx*lenrayzwx,vec4(pos.zwx,size)).y*lenrayzwx),\n        sphIntersect(ray.wxy*lenraywxy,vec4(pos.wxy,size)).y*lenraywxy),\n        sphIntersect(ray.xyz*lenrayxyz,vec4(pos.xyz,size)).y*lenrayxyz);\n    \n}\nvec4 cylindernormal(vec4 ray, vec4 pos, float size,\n        float lenrayyzw,\n        float lenrayzwx,\n        float lenraywxy,\n        float lenrayxyz) {\n    vec4 lens = vec4(\n        sphIntersect(ray.yzw*lenrayyzw,vec4(pos.yzw,size)).y*lenrayyzw,\n        sphIntersect(ray.zwx*lenrayzwx,vec4(pos.zwx,size)).y*lenrayzwx,\n        sphIntersect(ray.wxy*lenraywxy,vec4(pos.wxy,size)).y*lenraywxy,\n        sphIntersect(ray.xyz*lenrayxyz,vec4(pos.xyz,size)).y*lenrayxyz);\n    float len = max(max(max(lens.x,lens.y),lens.z),lens.w);\n    vec4 mask = step(len,lens);\n    pos += ray*len;\n    return -pos/size*(1.0-mask);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy*2.0-iResolution.xy)/iResolution.y;\n    \n    vec4 ray = normalize(vec4(uv,sin(iTime*0.1),cos(iTime*0.1)));\n    \n    //rotating the camera (multiplying time with random numbers)\n    ray.xy *= rot(iTime*0.578);\n    ray.yz *= rot(iTime*0.258);\n    ray.zw *= rot(iTime*0.854);\n    ray.wx *= rot(iTime*0.476);\n    float lenrayyzw = 1.0/length(ray.yzw);\n    float lenrayzwx = 1.0/length(ray.zwx);\n    float lenraywxy = 1.0/length(ray.wxy);\n    float lenrayxyz = 1.0/length(ray.xyz);\n    float time = iTime*0.1;\n    vec4 cam =      vec4(clamp(vec4(mod(time,4.0))-vec4(0.0,1.0,2.0,3.0),vec4(0.0),vec4(1.0))\n                   +floor(time/4.0));\n    \n    vec4 pos = cam;\n    time += 0.1;\n    vec4 lightpos = vec4(clamp(vec4(mod(time,4.0))-vec4(0.0,1.0,2.0,3.0),vec4(0.0),vec4(1.0))\n                   +floor(time/4.0));\n    \n    //vec4 pos = vec4(0.0,0.0,0.0,iTime);\n    float dist = 0.0;\n    vec4 normal;\n    int i;\n    for (i = 0; i < 20; i++) {\n        float len = 0.0;\n        for (float j = 1.0/6.0; j > 0.001; j /= 3.0) {\n        \tvec4 p = mod(pos+3.0*j,6.0*j)-3.0*j;\n            float len2 = cylinder(ray, p, j,\n\t\t\t\tlenrayyzw,\n                lenrayzwx,\n                lenraywxy,\n                lenrayxyz);\n            \n            if (len2 > len) {\n                normal = cylindernormal(ray, p, j,\n                    lenrayyzw,\n                    lenrayzwx,\n                    lenraywxy,\n                    lenrayxyz);\n            \tlen = len2;\n            }\n        }\n        \n        if (len < 0.001) {\n            break;\n        }\n        dist += len;\n        pos += ray*len;\n    }\n    \n    vec4 lightdir = normalize(lightpos-pos);\n    \n    fragColor = vec4(0.5*normal+0.5);\n    fragColor *= vec4(max(dot(lightdir,normal),0.2));\n    fragColor += max(sphDensity(cam,ray,lightpos,0.01,dist),0.0);\n    //fragColor *= vec4(-dot(cos(pos*5.0),vec4(1.0/3.0))*0.5+0.5);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}