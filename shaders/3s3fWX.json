{
    "Shader": {
        "info": {
            "date": "1606090463",
            "description": "Adapting domain warping from iq in interesting ways with powers and other perturbations",
            "flags": 0,
            "hasliked": 0,
            "id": "3s3fWX",
            "likes": 1,
            "name": "Domain warped sludge",
            "published": 3,
            "tags": [
                "noise",
                "texture"
            ],
            "usePreview": 0,
            "username": "freedmand",
            "viewed": 331
        },
        "renderpass": [
            {
                "code": "// Modified from domain warping techniques by iq\n// https://iquilezles.org/articles/warp\n\nconst mat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );\nconst mat2 m2 = mat2( 0.13,  0.09, -0.3,  0.19 );\n\nconst vec2 noiseOffset = vec2(0.0, 0.0);\nconst float initialFrequency = 10.0;\n\nfloat noise( in vec2 p )\n{\n\treturn sin(p.x) * sin(p.y);\n}\n\nfloat fbm4( vec2 p )\n{\n    float f = 0.0;\n    f += 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.1250*noise( p ); p = m*p*2.01;\n    f += 0.0625*noise( p );\n    return f/0.9375;\n}\n\nfloat fbm6( vec2 p )\n{\n    float f = 0.0;\n    f += pow(0.500000*(0.5+0.5*noise( p )), 5.0); p = m*p*2.02;\n    f += pow(0.250000*(0.5+0.5*noise( p )), 0.2); p = m*p*2.03;\n    f += pow(0.125000*(0.5+0.5*noise( p )), 1.0); p = m2*p*2.01;\n    return f/0.96875;\n}\n\nvec2 fbm4_2( vec2 p )\n{\n    return vec2(pow(fbm4(p), 2.0), pow(fbm4(p+vec2(7.8)), 3.0));\n}\n\nvec2 fbm6_2( vec2 p )\n{\n    return vec2(fbm6(p+vec2(16.8)), fbm6(p+vec2(11.5)));\n}\n\nfloat onoise(vec2 v, float t) {\n  v = (v + noiseOffset) * initialFrequency;\n  vec2 o = fbm4_2( sin(t / 10.0)*v + vec2(noise(v), noise(v * 1.2)) ) * m;\n  o += 0.04*sin( vec2(0.12,0.14) + length(o));\n\n  vec2 n = fbm6_2( 3.0*(o + vec2(noise(o), noise(v * 1.2)))) + o * m2 * 5.0;\n\n  return pow(0.5 + 0.5*fbm4( 1.8*v + 6.0*n ), 0.3);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3(onoise(uv, iTime));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}