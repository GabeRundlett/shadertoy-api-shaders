{
    "Shader": {
        "info": {
            "date": "1709828330",
            "description": "normal map from perlin noise displacing uv",
            "flags": 0,
            "hasliked": 0,
            "id": "X3fXRs",
            "likes": 1,
            "name": "noise based chromatic aberration",
            "published": 3,
            "tags": [
                "distortion"
            ],
            "usePreview": 0,
            "username": "Krapas",
            "viewed": 92
        },
        "renderpass": [
            {
                "code": "vec3 n_rand3(vec3 p) {\n\n    vec3 r = \n        fract(\n            sin(\n                vec3(\n                    dot(p, vec3(127.1,311.7,371.8)),\n                    dot(p,vec3(269.5,183.3,456.1)),\n                    dot(p,vec3(352.5,207.3,198.67))\n                )\n            ) * 43758.5453\n        ) * 2.0 - 1.0;\n    return normalize(vec3(r.x/cos(r.x), r.y/cos(r.y), r.z/cos(r.z)));\n}\n\nfloat noise(vec3 p) {\n\n    vec3 fv = fract(p);\n    vec3 nv = vec3(floor(p));\n    \n    vec3 u = fv*fv*fv*(fv*(fv*6.0-15.0)+10.0);\n    \n    return (\n        mix(\n            mix(\n                mix(\n                    dot( n_rand3( nv+vec3(0.0,0.0,0.0) ), fv-vec3(0.0,0.0,0.0)), \n                    dot( n_rand3( nv+vec3(1.0,0.0,0.0) ), fv-vec3(1.0,0.0,0.0)), \n                    u.x\n                ), \n                mix(\n                    dot( n_rand3( nv+vec3(0.0,1.0,0.0) ), fv-vec3(0.0,1.0,0.0)), \n                    dot( n_rand3( nv+vec3(1.0,1.0,0.0) ), fv-vec3(1.0,1.0,0.0)), \n                    u.x\n                ), \n                u.y\n            ),\n            mix(\n                mix(\n                    dot( n_rand3( nv+vec3(0.0,0.0,1.0) ), fv-vec3(0.0,0.0,1.0)), \n                    dot( n_rand3( nv+vec3(1.0,0.0,1.0) ), fv-vec3(1.0,0.0,1.0)), \n                    u.x\n                ), \n                mix(\n                    dot( n_rand3( nv+vec3(0.0,1.0,1.0) ), fv-vec3(0.0,1.0,1.0)), \n                    dot( n_rand3( nv+vec3(1.0,1.0,1.0) ), fv-vec3(1.0,1.0,1.0)), \n                    u.x\n                ), \n                u.y\n            ),\n            u.z\n       )\n  );\n}\n\nfloat oct_noise(vec3 pos, int o)\n{\n\n    float ns = 0.0;\n    float d = 0.0;\n    for(int i=0;i<o;++i)    \n    {\n        float v = pow(2.0,float(i));\n        d += 1.0/v;\n        ns += noise(pos*v)*(1.0/v);\n    }\n    \n    return ns/d;\n}\n\nvec3 distortion(vec3 pos, int oct)\n{\n\n    float h_top = oct_noise(pos + vec3(0.0, 1.0, 0.0), oct);\n    float h_bottom = oct_noise(pos + vec3(0.0, -1.0, 0.0), oct);\n    float h_right = oct_noise(pos + vec3(1.0, 0.0, 0.0), oct);\n    float h_left = oct_noise(pos + vec3(-1.0, 1.0, 0.0), oct);\n    \n    vec2 diff = vec2(h_right - h_left, h_top - h_bottom);\n    vec3 normal = normalize(vec3(diff, iResolution.x/iResolution.y));\n    \n    return normal;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 ns = uv * 6.0;\n    ns.x *= iResolution.x/iResolution.y;\n    vec2 ds = uv * 6.0;\n    ds.x *= iResolution.x/iResolution.y;\n    int noct = 1;\n    int doct = 1;\n    \n    vec3 rd = vec3(ns, iTime) + distortion(vec3(ds , iTime + 10.0), doct) * 2.0;\n    float r = oct_noise(rd, noct);\n    \n    vec3 gd = vec3(ns, iTime) + distortion(vec3(ds , iTime + 20.0), doct) * 2.0;\n    float g = oct_noise(gd, noct);\n    \n    vec3 bd = vec3(ns, iTime) + distortion(vec3(ds , iTime + 30.0), doct) * 2.0;\n    float b = oct_noise(bd, noct);\n    \n    \n    \n    vec3 color = vec3(r,g,b)+.5;\n    \n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}