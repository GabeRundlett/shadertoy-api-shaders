{
    "Shader": {
        "info": {
            "date": "1618264018",
            "description": "Ray marched sphere with distortion. Still think I messed something up, but I am moving on. Hopefully the next thing I write will be a little cleaner/better documented.",
            "flags": 0,
            "hasliked": 0,
            "id": "NsB3Dd",
            "likes": 1,
            "name": "SphereMarcher",
            "published": 3,
            "tags": [
                "sdf",
                "sphere"
            ],
            "usePreview": 0,
            "username": "nialred",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "/*\nReferences:\nhttp://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/\nhttps://michaelwalczyk.com/blog-ray-marching.html\nhttps://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-generating-camera-rays/generating-camera-rays\n*/\n\nconst int MAX_MARCHING_STEPS = 32;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 1000.0;\nconst float EPSILON = 0.0001;\n\nstruct Ray\n{\n    vec3 origin;\n    vec3 direction;\n};\n\nstruct Sphere\n{\n    vec3 center;\n    float radius;\n};\n\nSphere sphere = Sphere(vec3(0.0, 0.0, 0.0), 2.5);\n\n/*\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n*/\n\nfloat sphere_sdf(vec3 point)\n{\n    return length(point - sphere.center) - sphere.radius;\n}\n\nfloat map_world(vec3 point)\n{\n    float d = 10.0;\n    float displacement = sin(d * point.x) * sin(d * point.y) * sin(d * point.z);\n    float dist = sphere_sdf(point);\n    \n    return dist + displacement;\n}\n\nfloat shortest_distance_to_surface(vec3 eye_pos, vec3 march_dir, float start, float end)\n{\n    float depth = start;\n    int i = 0;\n    float dist = 0.0;\n    \n    while (i < MAX_MARCHING_STEPS)\n    {\n        dist = map_world(eye_pos + (depth * march_dir));\n        \n        if (dist < EPSILON)\n        {\n            return depth;\n        }\n        \n        depth += dist;\n        \n        if (depth >= end)\n        {\n            return end;\n        }\n        \n        i += 1;\n     }\n     \n     return end;\n}\n\nvec3 estimate_normal(vec3 point)\n{\n    vec3 step = vec3(EPSILON, 0.0, 0.0);\n    \n    float gradient_x = map_world(point + step) - map_world(point - step);\n    float gradient_y = map_world(point + step.yxz) - map_world(point - step.yxz);\n    float gradient_z = map_world(point + step.yzx) - map_world(point - step.yzx);\n    \n    vec3 normal = vec3(gradient_x, gradient_y, gradient_z);\n    \n    return normalize(normal);\n}\n\nfloat diffuse(vec3 current_pos, vec3 light_pos, vec3 normal)\n{\n    vec3 light_dir = normalize(current_pos - light_pos);\n    \n    float intensity = max(0.0, dot(normal, light_dir));\n    \n    return intensity;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord/iResolution.xy) * 2.0 - 1.0;\n    uv.x = uv.x * iResolution.x/iResolution.y;\n    \n    // Define ray as vector from camera position to pixel position\n    Ray ray = Ray(vec3(0.0, 0.0, -5.0), vec3(uv, 1.0));\n    \n    vec3 light_pos = vec3(2.0, -5.0, 3.0);\n    \n    float dist;\n    dist = shortest_distance_to_surface(ray.origin, ray.direction, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON)\n    {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n    \n    else \n    {\n        vec3 normal = estimate_normal(ray.origin + dist*ray.direction);\n        //normal = normal * 0.5 + 0.5; // convert back to RGB\n        float intensity = diffuse(ray.origin + dist*ray.direction, light_pos, normal);\n        normal = vec3(1.0, 0.0, 0.0) * intensity;\n        fragColor = vec4(normal, 1.0);\n    }\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}