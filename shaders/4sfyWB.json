{
    "Shader": {
        "info": {
            "date": "1489683255",
            "description": "Butterfly shaped with polar equation depending on trigonometric functions with even and odd degrees. Material details with voronoi noise. Movement with shear matrix transformation.",
            "flags": 64,
            "hasliked": 0,
            "id": "4sfyWB",
            "likes": 22,
            "name": "[ #07 ] - Flourescent butterfly",
            "published": 3,
            "tags": [
                "2d",
                "polar",
                "transformation",
                "butterfly"
            ],
            "usePreview": 0,
            "username": "Yrai",
            "viewed": 1456
        },
        "renderpass": [
            {
                "code": "\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define res_       iResolution\n#define time_      iTime\n#define shear(g)   mat2(1., 0., g, 1.)\n\nconst float PI = 3.1415926;\nfloat scale = 22.8;\n\nfloat function(float r, float t);\nfloat solve(vec2 p);\nfloat value(vec2 p, float size);\nfloat voronoi_noise2(vec2 p);\nvec2 hash2_2(vec2 p);\nvec2 domain(vec2 uv, float s);\nvec3 butterfly_mat(vec2 p, float snd);\n\n\n// ----------------------------------------------------------------------------------------------------------------------------------\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = domain(fragCoord, .7);\n    float snd = .5*texture(iChannel0, fragCoord).x;\n    \n    uv.x *= 1. - sin(time_*2.)*.2;\n    if(uv.x > 0.)\n    \tuv *= shear((.3+sin(snd*.2))*sin(1.2*time_));\n    else\n        uv *= shear(-(.3+sin(snd*.2))*sin(1.2*time_));\n    \n    float butterfly = value(uv*scale, 0.005*scale);\n    \n\tvec3 c = vec3(0.);\n\tvec3 bfmat = butterfly_mat(uv*33., snd);\n    vec3 solar = smoothstep(.05, .01, butterfly)+bfmat;\n    vec3 frozen = smoothstep(.05, .01, butterfly)/bfmat;\n    c = mix(solar, frozen, abs(sin(time_)));\n \tc = mix(c, vec3(0.), -butterfly*8.);\n    \n    fragColor = vec4(c, 1.);\n}\n// ----------------------------------------------------------------------------------------------------------------------------------\n\n\nvec2 domain(vec2 uv, float s) {\n    return (2.*uv.xy-res_.xy) / res_.y*s;\n}\n\nvec3 butterfly_mat(vec2 p, float snd) {\n   \tfloat r = length(p);\n\tfloat t = atan(p.y, p.x);\n    \n    float butterfly = \n        7. - .5*sin(t) + 2.5*sin(3.*t) + 2.*sin(5.*t) - 1.7*sin(7.*t) +\n        3.*cos(2.*t) - 2.*cos(4.*t) - 0.4*cos(16.*t) - r;\n\tfloat vor = voronoi_noise2(abs(p));\n    \n    vec3 c = vec3(0.+snd*.5);\n    c.g += .4*smoothstep(-5.1, .3, butterfly);\n    c.r += .6*smoothstep(-6.1, .3, butterfly/vor);\n    \n    c.r += .2*smoothstep(.1, 0., butterfly);\n    c.g += .1*smoothstep(-.2, 0., butterfly*vor);\n    \n   \n    return c;\n}\n\nfloat function(float r, float t) {\n\tfloat butterfly = \n        7.2 - .5*sin(t) + 2.5*sin(3.*t) + 2.*sin(5.*t) - 1.7*sin(7.*t) +\n        3.*cos(2.*t) - 2.*cos(4.*t) - 0.4*cos(16.*t) - r;\n    return butterfly;\n}\n\nfloat solve(vec2 p) {\n\tfloat r = length(p);\n\tfloat t = atan(p.y, p.x);\n\t\n\tfloat v = 1000.;\n\tfor(int i=0; i<32; i++ ) {\n\t\tv = min(v, abs(function(r,t)));\n\t\tt += PI*2.;\n\t}\n    \n\treturn v;\n}\n\nfloat value(vec2 p, float size) {\n\tfloat error = size;\n\treturn 1. / max(solve(p) / error, 1.);\n}\n\nvec2 hash2_2(vec2 p) {\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)));\n    return -1.0 + 2.0 * fract(sin(p)*43758.5453123);\n}\n\nfloat voronoi_noise2(vec2 p){\n\tvec2 g = floor(p), o; p -= g;\n\tvec3 d = vec3(1.); \n    \n\tfor(int y = -2; y <= 2; y++){\n\t\tfor(int x = -2; x <= 2; x++){\n            \n\t\t\to = vec2(x, y);\n            o += hash2_2(g + o) - p;\n            \n\t\t\td.z = max(dot(o.x, o.x), dot(o.y, o.y));    \n            d.y = max(d.x, min(d.y, d.z));\n            d.x = min(d.x, d.z); \n                       \n\t\t}\n\t}\n    return max(d.y/1.2 - d.x*1., 0.)/1.2;  \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 7600,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/exian/taxi-ride-k-pax-soundtrack-remix-by-exian"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}