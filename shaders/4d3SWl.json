{
    "Shader": {
        "info": {
            "date": "1461939151",
            "description": "Another Mobius",
            "flags": 0,
            "hasliked": 0,
            "id": "4d3SWl",
            "likes": 0,
            "name": "Another Mobius",
            "published": 3,
            "tags": [
                "anothermobius"
            ],
            "usePreview": 0,
            "username": "vox",
            "viewed": 526
        },
        "renderpass": [
            {
                "code": "\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define EPS .001\n\n#define time ((saw(float(__LINE__))+1.0)*iTime/E)\n#define saw(x) (acos(cos(x))/PI)\n#define cosaw(x) saw(x+PI/2.0)\n\nvec2 SinCos( const in float x )\n{\n\treturn vec2(sin(x), cos(x));\n}\n\nvec2 rotatez( const in vec2 vPos, const in vec2 vSinCos )\n{\n\treturn vPos.xy * mat2(vSinCos.yx, -vSinCos.x, vSinCos.y);\n}\n\nvec2 rotatez( const in vec2 vPos, const in float fAngle )\n{\n\treturn rotatez( vPos, SinCos(fAngle) );\n}\n\nvec2 mobius(vec2 uv)\n{\n    float turns = mod(floor(time), 5.0)+3.0;\n    uv = rotatez(uv.xy, PI/(1.0*turns)).xy;\n    float theta = atan(uv.y, uv.x);\n    float rot = float(int((theta/PI*.5+.5)*turns))/turns;\n    vec2 xy = rotatez(uv.xy, PI*2.0*(rot)+PI/turns).xy;\n    xy = sign(xy)*log(abs(xy));\n    return vec2(saw(theta*turns), saw(xy.x*PI*1.0));\n}\n\nvec3 phase(float map)\n{\n    return vec3(saw(map),\n                saw(4.0*PI/3.0+map),\n                saw(2.0*PI/3.0+map));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float scale = exp(-saw(time)*8.0);\n    uv = uv*scale-scale/2.0;\n    \n    uv.x *= iResolution.x/iResolution.y;\n    float r = length(uv);\n    uv = normalize(uv)/log(r+1.0);\n    uv += sin(vec2(time, time/PI*E*GR))/scale*2.0*PI;\n    uv = mobius(uv); \n    \n    const int max_iterations =1;\n    \n    \n    float dist = clamp(1.0-length(uv*2.0-1.0), 0.0, 1.0);\n    float map = sqrt(dist)*PI;\n    \n    for(int i = 0; i < max_iterations; i++)\n    {\n        float iteration = float(i)/float(max_iterations);\n        \n     \tuv = uv*2.0-1.0;\n        scale = exp(-saw(time+float(i))*8.0);\n        uv *= scale;\n        r = length(uv);\n        uv = normalize(uv)/log(r+1.0);\n        uv += sin(vec2(time+iteration*2.0*PI, time/PI*E*GR+iteration*2.0*PI))/scale;\n        uv = mobius(uv);\n        \n        dist = clamp(1.0-length(uv*2.0-1.0), 0.0, 1.0);\n        map += sqrt(dist)*PI;\n    }\n\n    fragColor = texture(iChannel0, uv);\n    \n    fragColor = smoothstep(0.0, .75, map)*vec4(phase(map*2.0+time), 1.0);\n    fragColor = vec4(uv, 0.0, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}