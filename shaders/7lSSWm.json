{
    "Shader": {
        "info": {
            "date": "1628861078",
            "description": "Follows a geodesic path of rational points on a horocycle (turn on/off with space bar)\nIf laggy decrease N.\nYou can offset the path with the following controls.\na/z expand x-direction & contract y-direction\ns/x & f/v shear\nd/c rotate\n\n\n",
            "flags": 48,
            "hasliked": 0,
            "id": "7lSSWm",
            "likes": 5,
            "name": "Non-Euclidean Shock Wave II",
            "published": 3,
            "tags": [
                "lattice",
                "hyperbolic",
                "horocycle",
                "geodesicflow"
            ],
            "usePreview": 0,
            "username": "spr",
            "viewed": 442
        },
        "renderpass": [
            {
                "code": "/*\nNon-Euclidean shockwave (see also https://www.shadertoy.com/view/NtfSRr )\n\n\nN = 53 in \"Common\" can be decreased to increase performance.\n\nFun fact:\nTry rotating (\"d\") a bit periodically after 3 or so seconds to get an approximative closed orbit, that is, the vectors trace out a clear path.\n\n\nInitial points are are on a horocycle of height 1 with placement 0, 1/N, 2/N, ... looking downwards.\nIn hyperbolic coordinates the k-th point is at z = k/N + i (i = imaginary unit).\n\nEach point represents a two dimensional lattice in R^2 with covolume one (\"unimodular lattice\").\nIn this space, each point corresponds to the lattice with basis (column vectors) (1,0) (k/n,1).\n\nRight animation shows z-point together with the Voronoi cell associated to the lattice.\n\n\nAt each frame, we flow by multiplying (in \"Buffer A\") the lattice by the diagonal matrix with coefficients 1.005, 1/1.005.\nThis corresponds to pressing \"a\" every second frame.\n\nAfter a lattice reduction procedure (see https://en.wikipedia.org/wiki/Lenstra%E2%80%93Lenstra%E2%80%93Lov%C3%A1sz_lattice_basis_reduction_algorithm )\nthe basis of the lattice can be chosen such that (up to a rotation), the first basis vector is (1,0)\nand the second one is of length >=1 and has x-coord between -0.5 and 0.5.\nThis domain is represented by the hyperbolic triangle pictured in the shader.\n\n\nThe left and middle animation show the same simulation but follow a different numerical strategy.\nOn the left, at each frame the lattice reduction is applied \nand its result are saved to be used in the next frame (Buffer A). \nIn particular, the flow and user modification is applied to the reduced basis vectors.\nIn the middle, we save the (non-reduced) basis vectors in every frame and apply to it\nthe flow / user controls. Only then the lattice reduction is applied (\"Buffer B\") and hence \nthe whole calculation is redone in each frame.\n\n\nDepending on the user input, either left or the middle side will show the first floating point inaccuracy (presumably).\n(The first will \"diverge\" if we go forward and backwards a lot, keeping the initial basis vectors roughly unmodified but having many lattice reduction steps inbetween).\n(The second will diverge if we flow a long time so that the initial basis vectors get distorted a lot. Example: Rotate (\"d\") a bit in the beginning and waiting for a few seconds (platform dependent, 20sec deskop, 8sec mobile)).\n\n\n\n\n\n\nThe MIT License\nCopyright © 2021 René Rühr\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\nconst int sample_range = 5; \nconst float point_size = 0.1;\nconst float line_thickness = 0.01;\nconst float infty = 10000.;\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec2 uv = (fragCoord-0.5*iResolution.xy)/pixel_per_unit;\n    fragColor = vec4(vec3(0),1);\n    float cusp_zoom = 1.; \n    vec2 resolution = vec2(iResolution.x, iResolution.y);\n    float scale = 10. / resolution.x;\n    vec2 uv = scale * fragCoord; \n    vec3 color = vec3(0);\n\nuv.x -=  1.;\nif(uv.x < 1. && uv.x > -1.){\nfor(int i = 0; i < N; ++i){\n\n    vec2 z = texelFetch( iChannel1, ivec2(0,i), 0 ).zw; // Height from Buffer B\n    float cusp_zoom = 1.;       // Used to zoom out in upper half plane, increase copies in the disk model, \n\n     vec2 dir = texelFetch( iChannel1, ivec2(0,i), 0 ).xy;    \n        \n        if(length(z-uv) < 0.3){\n            if(length(z-uv) < 0.02)\n                color = vec3(1);\n            else{\n                float arrow = sdArrow( uv*40., z*40., z*40.-.3*dir*40., 0.1, 1. );\n                arrow = arrow <= 0.1 ? 1. : 0.;\n                color +=vec3(arrow);     \n            }\n        }\n\n} \n    float line_width = max(0.01, cusp_zoom*0.01);\n    int num_translates = 0;\n    for(int j = -num_translates; j<=num_translates; ++j){\n        vec2 st = uv + vec2(j,0);\n            if( abs(abs(st.x)-0.5) < line_width && length(st) >= 1.) \n                color = vec3(1);\n            else if(abs(length(st)-1.) < line_width) \n                color = vec3(1);\n    }\n    fragColor = vec4(color,1.0);\n }\n    \n\nuv.x -=  2.;\nif(uv.x < 1. && uv.x > -1.){\nfor(int i = 0; i < N; ++i){\n\n    vec2 z = texelFetch( iChannel1, ivec2(1,i), 0 ).zw; // Height from Buffer B\n    float cusp_zoom = 1.;   \n    \n    vec2 dir = texelFetch( iChannel1, ivec2(1,i), 0 ).xy;    \n\n    if(length(z-uv) < 0.3){\n        if(length(z-uv) < 0.02)\n            color = vec3(1);\n        else{\n            float arrow = sdArrow( uv*40., z*40., z*40.-.3*dir*40., 0.1, 1. );\n            arrow = arrow <= 0.1 ? 1. : 0.;\n            color +=vec3(arrow);     \n        }\n    }\n\n} \n    float line_width = max(0.01, cusp_zoom*0.01);\n    int num_translates = 0;\n    for(int j = -num_translates; j<=num_translates; ++j){\n        vec2 st = uv + vec2(j,0);\n            if( abs(abs(st.x)-0.5) < line_width && length(st) >= 1.) \n                color = vec3(1);\n            else if(abs(length(st)-1.) < line_width) \n                color = vec3(1);\n    }\n    fragColor = vec4(color,1);\n}\n\n\ncolor = vec3(0);\nuv -=  vec2(4.5,-2.8);\n\nuv *= 0.3;\nif(uv.x < 1. && uv.x > -1.){\n    int count = 0; \nfor(int i = 0; i < N; ++i){\n    int range = 1; float cusp_zoom = 1.; float size = 0.1; \n    vec2 p1,p2;\n    float d1 = infty;\n    float d2 = infty;\n    mat2 lattice;\n    lattice[0] = texelFetch( iChannel0, ivec2(0,i), 0 ).xy; // Lattice after Reduction from Buffer A\n    lattice[1] = texelFetch( iChannel0, ivec2(0,i), 0 ).zw; // \n    vec2 z = texelFetch( iChannel1, ivec2(0,i), 0 ).zw; // Height from Buffer B\n    vec2 dir = texelFetch( iChannel1, ivec2(0,i), 0 ).xy;  \n        \n   \n    if(length(z-uv) < 0.5){\n        for(int x = -range; x<=range; ++x){\n        for(int y = -range; y<=range; ++y){              \n            vec2 point = size * ( lattice[0]*float(x) + lattice[1]*float(y) ) + z;\n            ClosestPoints(p1, p2, d1, d2, uv, point);\n        }}\n        if(length(uv-z)<=d1) { color +=vec3(float(i)*N_inv,1.-float(i)*N_inv,0); count++; }\n    }\n\n} \n    \n    fragColor = vec4(color,1);\n    \n    float line_width = 0.003;\n    int num_translates = 0;\n    for(int j = -num_translates; j<=num_translates; ++j){\n        vec2 st = uv + vec2(j,0);\n            if( abs(abs(st.x)-0.5) < line_width && length(st) >= 1.) \n                fragColor = vec4(1.0);\n            else if(abs(length(st)-1.) < line_width) \n                fragColor = vec4(1.0);\n    }\n    \n}\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int N = 53;\nconst float y_start = 5.;\nconst float y_end = 10.;\nfloat time_reset = 2. * log2(float(N)) + log2(y_start) + log2(y_end);\nconst float N_inv = 1. / float(N);\n\n\nconst float pixel_per_unit = 100.;\n\n\n\n\n\n//Transformations\nmat2 e(){\n    return mat2(1,0,0,1);\n}\n\nvoid Rotate(inout mat2 A, in float theta){\n    mat2 k = mat2(cos(theta), -sin(theta), sin(theta), cos(theta));\n    A = k*A;\n}\n\nvoid Shear(inout mat2 A, in float s){\n    mat2 u = mat2(1,s,0,1);\n    A= u*A;\n}\nvoid ShearOpposite(inout mat2 A, in float s){\n    mat2 u = mat2(1,0,s,1);\n    A= u*A;\n}\n\nvoid Dilate(inout mat2 A, in float t){\n    mat2 a = mat2(t,0,0,1./t);\n    A= a*A;\n}\n\n\nvoid kan(inout mat2 k, inout mat2 A, inout mat2 n, in mat2 g)\n{\n    float a=g[0][0], b=g[1][0], c=g[0][1], d=g[1][1];\n    float t= sqrt(a*a+c*c);\n   \n    k[0] = vec2(a,c); k[1] = vec2(-c,a); k = k / t;\n    A=mat2(t,0,0,1./t);\n    n=mat2(1,(a*b+c*d)/(t*t),0,1);\n}\n\n\nvoid sl2inverse(inout mat2 g){\n    mat2 h = g;\n    g[0][0] = h[1][1];\n    g[1][1] = h[0][0];\n    g[1][0] = -h[1][0];\n    g[0][1] = -h[0][1];\n}\n\nvoid MoebiusAti(in mat2 g, inout vec2 z){//z=i -> di-b / -ci+a\n    sl2inverse(g);\n    float a=g[0][0], b=g[1][0], c=g[0][1], d=g[1][1];\n    z = vec2(a*c+b*d,1) / (c*c+d*d);\n}\n\nvoid Moebius(in mat2 g, inout vec2 z){// z -> az+b / cz+d  for a,b,c,d real\n    float a=g[0][0], b=g[1][0], c=g[0][1], d=g[1][1];\n    float x = a*c*dot(z,z)+b*d + (a*d+b*c)*z.x;\n    float y = z.y;\n    float denom = (c*c*dot(z,z)+d*d+2.*d*c*z.x);\n    z = vec2(x,y) / denom;\n    }\n    \n\nvoid ToHalfplane(inout vec2 z){// z -> -iz-i / z-1\n    float x=z[0], y=z[1];\n    float denom = x*x + y*y + 1. - 2.*x;\n    z = vec2(-2.*y, -x*x-y*y+1.) / denom;\n}\n\nvoid CircleInversion(inout vec2 z)\n{\n\tz.x = -z.x;\n\tz /= dot(z,z);\n}\n\nvoid HorizontalTranslation(inout vec2 z)\n{\n\tz.x = mod(z.x+0.5, 1.)-0.5;\n}\n\n\n\n\n//Lattice Reduction\n\nvoid WeakReduce(inout mat2 A, inout mat2 gamma){\n    float mu = round( dot(A[0], A[1]) / dot(A[0],A[0]) );\n    A[1] -= mu * A[0];\n    mat2 u = mat2(1,-mu,0,1);\n    gamma = gamma*u;\n}\n\nvoid GramSchmidt(inout mat2 A){\n    float mu = dot(A[0], A[1]) / dot(A[0],A[0]);\n    A[1] -= mu * A[0];\n}\n\nvoid SwapColumns(inout mat2 A, inout mat2 gamma){\n     mat2 B = A;\n     A[0] = -B[1]; A[1] = B[0];\n     mat2 w = mat2(0,-1,1,0);\n     gamma = gamma*w;\n}\n\nbool IsReduced(in mat2 A){\n    GramSchmidt(A);\n    return dot(A[0],A[0]) <=  4./3. * dot(A[1],A[1]);\n}\n\n\nvoid LLL(inout mat2 A, inout mat2 gamma){ //Lattice Reduction Algorithm\n    WeakReduce(A, gamma);\n    while(!IsReduced(A)){\n        SwapColumns(A, gamma);\n        WeakReduce(A, gamma);\n    }   \n}\n\n#define bug_fix 0.00001\nvoid MakeShorter(inout mat2 A, inout mat2 gamma){ // Tries to find a shorter basis using at most one step.\n    if(dot(A[0],A[0]) > dot(A[1],A[1])+bug_fix) {\n        SwapColumns(A, gamma); \n        return;}    \n    mat2 B = A, C = A;\n    B[1] -=  B[0];\n    if(dot(A[1],A[1]) > dot(B[1],B[1])){ \n        A = B; \n        gamma = gamma*mat2(1,-1,0,1);\n        return;}\n    C[1] +=  C[0];\n    if(dot(A[1],A[1]) > dot(C[1],C[1])){\n        A = C;\n        gamma = gamma*mat2(1,1,0,1);\n        return;}\n}\n\n\n\n\nfloat DrawCircle(in vec2 uv, float radius){\n    return abs(length(uv)-radius) < 0.01 ? 1. : 0.;\n}\n\n\n\n\n\n\n\n\n\nvoid DrawPoint(inout vec3 color_out, in vec3 color_in, in vec2 pixel, in vec2 center, in float radius){\n    vec2 point = pixel-center;\n    if( dot(point, point) <= radius*radius){\n        color_out = color_in;\n    }\n}\n\n//Checks if \"point\" is closer to \"pixel\" compared to the currently closest points p1,p2.\nvoid ClosestPoints(inout vec2 p1, inout vec2 p2, inout float d1, inout float d2, in vec2 pixel, in vec2 point){\n    float d = distance(pixel, point);\n    if(d < d2){\n        if(d<d1){\n            d1 = d;\n            p1 = point;\n        }else{\n            d2 = d;\n            p2 = point;\n        }\n    }\n}\n\n\nbool ClosestPointsCount(inout vec2 p1, inout vec2 p2, inout float d1, inout float d2, in vec2 pixel, in vec2 point){\n    float d = distance(pixel, point);\n    if(d < d2){\n        if(d<d1){\n            d1 = d;\n            p1 = point;\n        }else{\n            d2 = d;\n            p2 = point;\n        }\n        return true;\n    }\n    return false;\n}\n\n\n\n\n// https://www.shadertoy.com/view/slj3Dd\n// The MIT License\n// Copyright © 2021 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// Distance to an arrow\n// The arrow goes from a to b. It's thickness is w1. The arrow\n// head's thickness is w2.\nfloat sdArrow( in vec2 p, vec2 a, vec2 b, float w1, float w2 )\n{\n    const float k = 3.0;   // arrow head ratio\n\tvec2  ba = b - a;\n    float l2 = dot(ba,ba);\n    float l = sqrt(l2);\n\n    // pixel setup\n    p = p-a;\n    p = mat2(ba.x,-ba.y,ba.y,ba.x)*p/l;\n    p.y = abs(p.y);\n    vec2 pz = p-vec2(l-w2*k,w2);\n\n    // === distance (four segments) === \n\n    vec2 q = p;\n    q.x -= clamp( q.x, 0.0, l-w2*k );\n    q.y -= w1;\n    float di = dot(q,q);\n    //----\n    q = pz;\n    q.y -= clamp( q.y, w1-w2, 0.0 );\n    di = min( di, dot(q,q) );\n    //----\n    if( p.x<w1 ) // conditional is optional\n    {\n    q = p;\n    q.y -= clamp( q.y, 0.0, w1 );\n    di = min( di, dot(q,q) );\n    }\n    //----\n    if( pz.x>0.0 ) // conditional is optional\n    {\n    q = pz;\n    q -= vec2(k,-1.0)*clamp( (q.x*k-q.y)/(k*k+1.0), 0.0, w2 );\n    di = min( di, dot(q,q) );\n    }\n    \n    // === sign === \n    \n    float si = 1.0;\n    float z = l - p.x;\n    if( min(p.x,z)>0.0 ) //if( p.x>0.0 && z>0.0 )\n    {\n      float h = (pz.x<0.0) ? w1 : z/k;\n      if( p.y<h ) si = -1.0;\n    }\n    return si*sqrt(di);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(1.0,0.0,0.0,1.0);\n    \n    \n    ivec2 st = ivec2(fragCoord);\n    if( (st.s == 0 || st.s == 1 )  && st.t < N  ){\n        mat2 current = e();\n        \n        if(iFrame < 1){\n            //Dilate(lattice, 0.6);\n            ShearOpposite(current, float(st.t) * N_inv);\n        }\n        else{\n            current[0] = texelFetch( iChannel0, st, 0 ).xy;\n            current[1] = texelFetch( iChannel0, st, 0 ).zw;\n            \n            if( texelFetch(iChannel1,ivec2(32,2),0).x <= 0. )\n                Dilate(current, 1.005);\n        }\n    \n        \n        if( texelFetch(iChannel1,ivec2(65,0),0).x > 0.){            \n            Dilate(current, 1.01);\n        } \n        else if( texelFetch(iChannel1,ivec2(90,0),0).x > 0.){           \n            Dilate(current, 1./1.01);\n        }\n        else if( texelFetch(iChannel1,ivec2(83,0),0).x > 0.){            \n            Shear(current, 0.02);\n        } \n        else if( texelFetch(iChannel1,ivec2(88,0),0).x > 0.){            \n            Shear(current, -0.02);\n        }\n        else if( texelFetch(iChannel1,ivec2(68,0),0).x > 0.){            \n            Rotate(current, 0.05);\n        } \n        else if( texelFetch(iChannel1,ivec2(67,0),0).x > 0.){            \n            Rotate(current, -0.05); \n        }\n        else if( texelFetch(iChannel1,ivec2(70,0),0).x > 0.){            \n            ShearOpposite(current, 0.02);\n        } \n        else if( texelFetch(iChannel1,ivec2(86,0),0).x > 0.){            \n            ShearOpposite(current, -0.02);\n        }\n        \n        if(st.s == 0){\n            mat2 gamma = e();\n            LLL(current, gamma);\n            MakeShorter(current, gamma);\n        }\n        fragColor = vec4(current[0], current[1]);\n \n    }\n     \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0,0,1,1);\n    ivec2 st = ivec2(fragCoord);\n\n    if(st.s == 0 && st.t < N){\n        mat2 lattice;\n        lattice[0] = texelFetch( iChannel0, st, 0 ).xy;\n        lattice[1] = texelFetch( iChannel0, st, 0 ).zw;\n        \n    \n        mat2 K,a,n;\n        kan(K,a,n,lattice);\n        \n        vec2 z;\n        MoebiusAti(lattice,z);\n           \n        fragColor = vec4((K*K)[1], z);\n\n    }\n    else if(st.s == 1 && st.t < N){\n        mat2 current;\n        current[0] = texelFetch( iChannel0, st, 0 ).xy;\n        current[1] = texelFetch( iChannel0, st, 0 ).zw;\n        \n        mat2 gamma = e();\n        LLL(current, gamma);\n        MakeShorter(current, gamma);\n\n        mat2 K,a,n;\n        kan(K,a,n,current);\n        \n        vec2 z;\n        MoebiusAti(current,z);\n           \n        fragColor = vec4((K*K)[1], z);\n\n    }\n              \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}