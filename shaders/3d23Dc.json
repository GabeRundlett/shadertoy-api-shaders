{
    "Shader": {
        "info": {
            "date": "1550170267",
            "description": "Sometime useful :-)\n- get 3 solutions (when 3)\n- or the smallest\n- k = index of the smallest ( or -1 when only 1 solution).",
            "flags": 0,
            "hasliked": 0,
            "id": "3d23Dc",
            "likes": 2,
            "name": "solving cubic polynomial",
            "published": 3,
            "tags": [
                "cubic",
                "polynomial",
                "tuto",
                "solve",
                "degree3"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 889
        },
        "renderpass": [
            {
                "code": "// === solving Pol3=0 by Cardano formula https://en.wikipedia.org/wiki/Cubic_function\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = ( 2.*u - R ) / R.y;\n    \n    // --- Solving a*x³ +b*x³ +c*x +d = 0. -> l = min(3 solutions)\n    float a = 1., b = -4., c = 3., d = -(.1+sin(iTime)),\n          Q, A, D, v, l, k = -1.;\n\n    if (abs(a)<1e-3) {                          // degenerated P3\n        k = -2.;\n        v = c*c - 4.*b*d;\n        l = ( -c -sign(b)* sqrt(v) ) / (2.*b);\n    }\n    else {                                      // true P3       \n      b /= a; c /= a; d /= a;\n      float p = ( 3.*c - b*b ) / 3.,\n            q = ( 9.*b*c - 27.*d - 2.*b*b*b) / 27., // -\n            r = q/2.; Q = p/3.;\n            D = Q*Q*Q + r*r;\n    \n      if ( D < 0.) {                            // --- if 3 sol\n        A = acos(r/sqrt(-Q*Q*Q)), \n        k = round(1.5-A/6.283); // k = 0,1,2 ; we want min l\n#define sol(k) ( 2.*sqrt(-Q)* cos((A+(k)*6.283)/3.) - b/3. )\n        l = sol(k);\n      }\n      else                                        // --- if 1 sol\n        if (p>0.) v = -2.*sqrt(p/3.), \n#define asinh(z) ( sign(z)*asinh(abs(z)) )      // fix asinh() symetry error \n                  l = -v* sinh(asinh(3.*-q/p/v)/3.) -b/3.; \n        else      v = -2.*sqrt(-p/3.), \n                  l = sign(-q)*v* cosh(acosh(3.*abs(q)/p/v)/3.) -b/3.;\n      }\n    \n    // --- display\n    float x = 3.*U.x, y = 3.*U.y;\n    O = vec4( y < a*x*x*x+b*x*x+c*x+d );        // draw curve\n    \n    if (u.y-.5==R.y/2.) O = vec4(1,0,0,0);      // draw zero-line\n    if (abs(x-l)<3.*3./R.x) O = vec4(0,1,0,0);  // draw min solution\n    if (k>=0.) {\n      if ( abs(x-sol(k+1.)) < 3.*3./R.x ) O = vec4(0,0,1,0); // the 2 other solutions\n      if ( abs(x-sol(k+2.)) < 3.*3./R.x ) O = vec4(0,0,1,0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}