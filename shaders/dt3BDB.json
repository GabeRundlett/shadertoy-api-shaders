{
    "Shader": {
        "info": {
            "date": "1701536954",
            "description": "shapes can be morphed easily",
            "flags": 0,
            "hasliked": 0,
            "id": "dt3BDB",
            "likes": 4,
            "name": "morphing / interpolating f_n_sd",
            "published": 3,
            "tags": [
                "morphing"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 137
        },
        "renderpass": [
            {
                "code": "#define n_tau 6.2831\nfloat f_n_sd_circle(vec2 o_trn, float n_radius){\n    return length(o_trn)-n_radius;\n}\nfloat f_n_sd_square(vec2 o_trn, float n_radius){\n    return max(abs(o_trn.x),abs(o_trn.y))-n_radius;\n}\nfloat f_n_sd_min(vec2 o_trn, float n_radius){\n    return min(abs(o_trn.x),abs(o_trn.y))-n_radius;\n}\nfloat f_n_sd_wigglycircle(vec2 o_trn, float n_radius, float n_wiggles ){\n    float n_circ = f_n_sd_circle(o_trn, n_radius);\n    float n_radians_nor = fract((atan(o_trn.y,o_trn.x)/n_tau)-.25);\n    return n_circ+sin(n_radians_nor*n_tau*n_wiggles)*0.02;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 o_trn_pixel = (fragCoord.xy - iResolution.xy*0.5)/ iResolution.y;\n    vec2 o_trn_mouse = (iMouse.xy - iResolution.xy*0.5)/ iResolution.y;\n    o_trn_pixel*=1.8;\n    o_trn_mouse*=1.8;\n    //fragColor = vec4(f_n_sd_wigglycircle(o_trn_pixel, 0.2));\n    //return;\n    \n    vec2 o_trn_shape_point = vec2(\n        sin(iTime)*0.25,\n        cos(iTime)*0.25\n    );\n    vec2 o_v_pixel_shape_point = o_trn_pixel - o_trn_shape_point;\n    vec2 o_v_mouse_shape_point = o_trn_mouse - o_trn_shape_point;\n    float n_radius = 0.3;\n    \n    vec2[] a_o = vec2[](\n        vec2(\n            f_n_sd_circle(o_v_pixel_shape_point, n_radius), \n            f_n_sd_circle(o_v_mouse_shape_point, n_radius)\n        ),\n        vec2(\n            f_n_sd_square(o_v_pixel_shape_point, n_radius),\n            f_n_sd_square(o_v_mouse_shape_point, n_radius)\n        ),\n        vec2(\n            f_n_sd_min(o_v_pixel_shape_point, n_radius),\n            f_n_sd_min(o_v_mouse_shape_point, n_radius)\n        ),\n        vec2(\n            f_n_sd_wigglycircle(o_v_pixel_shape_point, n_radius,9.),\n            f_n_sd_wigglycircle(o_v_mouse_shape_point, n_radius,9.)\n        )\n    );\n    float n_idx = (\n        fract(iTime*0.1)*float(a_o.length())\n    );\n    int n_idx_int = int(n_idx);\n    int n_idx_int_next = int(mod(n_idx+1., float(a_o.length())));\n    //n_idx = 3;\n    vec2 o_shapeinfo = a_o[n_idx_int];\n    vec2 o_shapeinfo_next = a_o[n_idx_int_next];\n    \n    vec2 o_shapeinfo_interpolated = vec2(\n        o_shapeinfo * fract(n_idx)\n        + o_shapeinfo_next * (1.-fract(n_idx))\n    );\n    float n_sd = o_shapeinfo_interpolated[0];\n\n    float n_sd2 = f_n_sd_circle(\n        o_trn_pixel - o_trn_mouse, \n        abs(o_shapeinfo_interpolated[1])\n    );\n    float n_sd_abs = pow(abs(n_sd), n_radius);\n    vec3 o_color = (n_sd < 0.)\n        ? vec3(0.878,0.106,0.141)\n        : vec3(0.976,0.941,0.420);\n    \n\n    float n_amp = sin(n_tau * n_sd*20.)*0.2;\n    n_amp = pow(n_amp, 1.);\n    o_color = vec3(\n        n_amp+o_color.x,\n        n_amp+o_color.y, \n        n_amp+o_color.z\n    ); \n    o_color += 1.-smoothstep(0.001, 0.009, abs(n_sd2));\n    // Output to screen\n    fragColor = vec4(abs(n_sd_abs)*o_color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}