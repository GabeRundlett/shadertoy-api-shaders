{
    "Shader": {
        "info": {
            "date": "1631181006",
            "description": "Really pleased I was able to figure out the math for the stacking effect, in the end it wasn't that complicated but I tried a lot of things that didn't work. Part of me still feels it can be massively simplified but idk",
            "flags": 0,
            "hasliked": 0,
            "id": "sst3Ws",
            "likes": 16,
            "name": "Double Helix Assembly Kit",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "stack",
                "helix",
                "stacking"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 423
        },
        "renderpass": [
            {
                "code": "#define STEPS 140.\n#define MDIST 100.\n#define pi 3.1415926535\n#define pmod(p,x) (mod(p,x)-0.5*(x)) \n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n//#define elon(p,h) (p-clamp(p,-h,h))\n\n//iq palette \nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n//iq segment\nfloat seg(vec2 p, vec2 a, vec2 b){\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n    return length(pa - ba*h);\n}\n//iq extrude\nfloat ext(vec3 p, float s, float h){\n  vec2 b = vec2(s,abs(p.y)-h);\n  return min(max(b.x,b.y),0.)+length(max(b,0.));\n}\n\nfloat layers(vec2 p, float t){\n    p.xy*=rot(t*0.1);\n    float off = (sin(t*0.1)*0.5+0.5)*4.0+6.0;\n    vec2 p2 = p;\n    p2.x = abs(p.x)-off;\n    float c = length(p2.xy)-1.5;\n    if(mod(t,7.0)<1.0){\n        //if(mod(id,2.0)<1.0) p.xz*=rot(pi/2.);\n        c = min(c,seg(p.xy,vec2(off,0),vec2(-off,0))-1.5);\n    }\n    return c;\n\n}\n\nvec2 map(vec3 p){\n    float t = iTime;\n    //p.y-=t*8.-20.;\n    vec3 po = p;\n    vec2 a = vec2(1);\n    float spd = 8.0;\n    t*=spd;\n    float dh = 0.28; //Disk Height\n\n    float lscl = 1.0; //Leading Edge Scale\n    float le = -mod(t * lscl,lscl); //Lead Edge\n    float tscl = 5.; //Trailing Edge Scale\n    float te = tscl - mod(t * tscl,tscl); //Trailing Edge\n    float scl = 0.; //Final Scale for later\n    float id = 0.;\n    float npy = 0.;\n    bool mid = false;\n    \n        //Transitional domain\n        if(p.y > le && p.y < te){ \n            npy = mod(p.y-le,tscl);\n            scl = mix(tscl,lscl,min(fract(t)*2.0,1.0));\n            //Alternative where the transitional domain slows down before stopping on the stack\n            //npy = mod(p.y-le,te-le);\n            //scl = te-le;\n            \n            mid = true;\n            id = floor(t);\n        }\n        //The stacked tower\n        if(p.y<le){ \n            npy = mod(p.y-le,lscl);\n            id = floor((p.y-le)/lscl)+floor(t);\n            scl = lscl;\n        }\n        //The falling part\n        if(p.y>te){ \n            npy = mod(p.y-te,tscl);           \n            id = floor((p.y-te)/tscl)+floor(t)+1.0; \n            scl = tscl;\n        }\n        npy-=scl*0.5;\n        p.y = npy;\n    \n    //Get Layer\n    float c = layers(p.xz,id);\n    \n    a.x = ext(p, c, dh);\n    a.x-=0.15;\n    \n    //The most annoying domain artifact fixing\n    if(!mid) a.x = min(a.x,max(-(abs(p.y)-scl*0.65),0.01));\n    else {\n        a.x = min(a.x,max(-(-po.y+le),0.1));\n    }\n    \n    a.y = id;\n    return a;\n}\nvec3 norm(vec3 p){\n    vec2 e = vec2(0.01,0.);\n    return normalize(map(p).x-vec3(\n    map(p-e.xyy).x,\n    map(p-e.yxy).x,\n    map(p-e.yyx).x));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0,15,-35);\n    ro.xz*=rot(iTime*pi/3.0*0.3);\n    vec3 lk = vec3(0,-3,0);\n    vec3 f = normalize(lk-ro);\n    vec3 r = normalize(cross(vec3(0,1,0),f));\n    vec3 rd = normalize(f*0.9+uv.x*r+uv.y*cross(f,r));\n    float dO = 0.;\n    vec2 d = vec2(0);\n    vec3 p = vec3(0);\n    bool hit = false;\n    \n    for(float i = 0.; i<STEPS; i++){\n         p = ro+rd*dO;\n         d = map(p);\n         dO+=d.x*1.3; //Idk why this doesn't cause artifacts but whatever\n         if(abs(d.x)<0.005){\n             hit = true;\n             break;\n         }\n         if(dO>MDIST){\n             dO=MDIST;\n             break;\n         }\n    }\n    vec3 al = vec3(0);\n    if(hit){\n        vec3 e = vec3(0.5);\n        al = pal(d.y*0.5+iTime*0.1,e,e,e*2.0,vec3(0,0.33,0.66));\n        //Atlernative coloring by @Gaktan\n        //al = pal(p.y*0.005+d.y*0.5+iTime*0.05,e,e,e*2.0,vec3(0,0.33,0.66));\n        al*=1.5;\n        vec3 n = norm(p);\n        vec3 ld = normalize(vec3(0.,0.1,1));\n        vec3 h = normalize(ld-rd);\n        float spec = pow(max(dot(n,h),0.0),5.0);\n        float fres = 1.-abs(dot(rd,n))*.98;\n        float diff = dot(n, ld)*0.4+0.6;\n        col=al*diff+pow(spec,2.0)*0.3*vec3(0.008,0.133,0.078);\n        col*=1.2-fres;\n    }\n    col = sqrt(col);\n    col = mix(col,vec3(0.016,0.102,0.204)*(0.7-dot(uv,uv)),pow(min(dO/68.,1.0),3.0));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}