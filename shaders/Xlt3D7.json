{
    "Shader": {
        "info": {
            "date": "1469709365",
            "description": "Due to our poor trichromatic vision, different color spectrums can give the same color perception.\nfrom bottom to top:\n1 peak at green, 2 peaks around green, box around green, cos around green, 2 peaks at +-pi/3 around green, 1 peak + const",
            "flags": 0,
            "hasliked": 0,
            "id": "Xlt3D7",
            "likes": 3,
            "name": "metameric colors (spectrum)",
            "published": 3,
            "tags": [
                "spectrum",
                "tutorial",
                "color",
                "metameric"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 875
        },
        "renderpass": [
            {
                "code": "// following https://www.shadertoy.com/view/XldGDM\n// next: https://www.shadertoy.com/view/Mtd3WM\n// biblio: https://en.wikipedia.org/wiki/Metamerism_(color)\n//         https://en.wikipedia.org/wiki/Trichromacy\n\n// for simplicity, cone response is approximated by (1 + cos(3.14*(f-f0) )/2.\n//                                                  with f0 = -2/3, 0, 2/3\n// f in [-1 (red) , 1 (violet) ]\n// perception = int( colorSpectrum(f) * coneResponse(f) )/2.\n\n// ATTENTION:\n// - there might still be some normalization bug ;-)\n// - next shader is more about surface color while this one is about volumes\n\n#define RGB(f) ( .5 + .5* cos(3.14*f + vec4(2.1, 0,-2.1, 1)) )\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    O -= O;\n    vec2 R = iResolution.xy;\n    U /= R;\n    float y = 6.*U.y, a = fract(y), pa=3.14*a;\n    if (a < 6./R.y) return;\n    \n    // decompose a pure frequency color into R,G,B using kernel (1+cos)/2\n    O =   y > 5. ?    a + (1.-a)*RGB(0.)                   // peak + const a\n        : y > 4. ?  ( RGB(-1./3.) + RGB(1./3.) ) / 2.      // 2 peaks around green\n        : y > 3. ?   .5 + .5* vec4(-1./4.,1./2.,-1./4.,1)  // cos around green\n        : y > 2. ?   .5 + .5* sin(pa)/pa*vec4(-.5,1,-.5,1) // box around green\n        : y > 1. ? ( RGB(-a/2.) + RGB(a/2.) ) / 2.         // 2 peaks around green\n        :            RGB(0.);                              // 1 peak at green\n\n    // O /= max(O.r,max(O.g,O.b)); // chrominance only\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}