{
    "Shader": {
        "info": {
            "date": "1726505126",
            "description": "source https://www.shadertoy.com/view/stsXDl https://www.shadertoy.com/view/M3lyRH",
            "flags": 0,
            "hasliked": 0,
            "id": "43syzf",
            "likes": 0,
            "name": "cosmoport",
            "published": 3,
            "tags": [
                "port",
                "menger",
                "cosmos"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 60
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nconst float PI = 3.14159265358979323846264;\nconst int MAX_PRIMARY_RAY_STEPS = 256; //decrease this number if it runs slow on your computer\nconst float L2 = 0.69314718056;\nfloat iters = 0.0;\nfloat last_distance = 0.0;\n\n// cream and dark red tho\n\nvec2 rot(vec2 X, float a)\n{\n \tfloat s = sin(a); float c = cos(a);\n    return mat2(c, -s, s, c)*X;\n}\n\nfloat hash2D(vec2 uv)\n{\n \tvec2 suv = sin(uv);\n    suv = rot(suv, uv.x);\n    return fract(mix(suv.x*13.13032942, suv.y*12.01293203924, dot(uv, suv)));\n}\n\nfloat repeat(float x, float t) {\n    return mod(x, t) - t/2.; \n}\nfloat repeat_even(float x, float t) {\n    return t*(fract(x/2. + 0.5) - 0.5); \n}\nvec2 kaleidoscope(vec2 p, float r) {\n    // cart2pol\n    //repeat x\n    // pol2cart\n    return vec2(0.0);\n}\n\n\nfloat maxcomp(vec2 a) {\n    return max(a.x, a.y);\n}\n\nmat2 rotmat(float angle) {\n    float cosAngle = cos(angle);\n    float sinAngle = sin(angle);\n\n    return mat2(\n        cosAngle, -sinAngle,\n        sinAngle,  cosAngle\n    );\n}\n\nvec3 my_stereo_inv(vec2 p)\n{\n    float den = dot(p,p)+1.0;\n    return vec3(\n        2.0*p.x * den,\n        2.0*p.y / den,\n        (den-2.0)*den\n    );\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n}\n\nfloat sdCross( in vec3 p )\n{\n  float da = maxcomp(abs(p.xy));\n  float db = maxcomp(abs(p.yz));\n  float dc = maxcomp(abs(p.zx));\n  return min(da,min(db,dc))-1.0;\n}\n\n#define iterations 30\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\nfloat distanceField(vec3 p) {\n \n  \n   p.z = repeat_even(p.z, 2.0);\n   p.x = repeat_even(p.x, 2.0);\n   p.z = repeat_even(p.z, 2.0);\n   \n   float d = sdBox(p,vec3(1.0));\n  p.xz = rot(p.xz, p.x);\n    p.yz = rot(p.yz, p.y);\n   float s = 1.0;\n   for( int m=0; m<4; m++ )\n   {\n  \n      vec3 a = mod( p*s, 2.0 )-1.0;\n      s *= 4.0;\n      vec3 r = 1.0 - 3.0*abs(a);\n\n      float c = sdCross(r)/s;\n      d = max(d,c);\n   }\n\n   return d;\n}\nfloat dfc(vec3 p) {\n    return max(distanceField(p), 0.);\n}\n\nfloat get_ao(vec3 p, vec3 n) {\n    float thing = -dfc(p+0.05*n)\n        -dfc(p+0.05*n)*3.0 \n        -dfc(p+0.1*n)*4.0\n        -dfc(p+0.15*n)*3.0\n        -dfc(p+0.2*n)*2.0\n        -dfc(p+0.25*n)*1.0\n        -dfc(p+0.4*n)*1.0\n        -dfc(p+0.8*n)*2.0\n        ;\n    return 1.0 - exp(thing / 2.0);\n}\nvec3 calcNormal(vec3 p) {\n    vec2 e = vec2(0.001, 0.0);\n    float rd = distanceField(p);\n    return normalize(vec3(\n        rd - distanceField(p - e.xyy),\n        rd - distanceField(p - e.yxy),\n        rd - distanceField(p - e.yyx)\n    ));\n}\n\nvec3 calcNormala(vec3 p) {\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(\n        distanceField(p + e.xyy) - distanceField(p - e.xyy),\n        distanceField(p + e.yxy) - distanceField(p - e.yxy),\n        distanceField(p + e.yyx) - distanceField(p - e.yyx)\n    ));\n}\n\n\nvec3 castRay(vec3 pos, vec3 dir, float threshold) {\n\tfor (int i = 0; i < MAX_PRIMARY_RAY_STEPS; i++) {\n\t\t\tfloat dist = distanceField(pos);\n\t\t\tif (abs(dist) < threshold) break;\n            last_distance = dist;\n\t\t\tpos += dist * dir * 1.0;\n            iters = float(i);\n\t}\n\treturn pos;\n}\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    \tvec2 uv=C.xy/iResolution.xy-.5;\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1)); \n      \n  vec3 dir=vec3(uv*zoom,1.);\n\n\tvec3 from=vec3(1.,.5,0.5);\n\t\n        \n       \n       \n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v2=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n    vec4 p2=vec4(vec3(from+s*dir*.5),1.);\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; \n            p.xy*=mat2(cos(iTime*0.05),sin(iTime*0.05),-sin(iTime*0.05), cos(iTime*0.05));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.1-dm; // dark matter, don't render near\n\n\t\tv2+=fade;\n\t\tv2+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv2=mix(vec3(length(v2)),v2,saturation); //color adjust\n\t\n  \n   \n    vec2 wh = vec2(320.0, 180.0)/2.;\n   \n    float angle = iTime * 0.0;\n    float radius = 0.0;\n    vec4 v = vec4(cos(iTime*0.), 0.0, sin(iTime*.0), 1.0);\n    vec3 ro = radius*v.yyy;\n    ro -= vec3(0.0, 0.0, 0.25*iTime*1.);\n    uv = uv * rotmat(-iTime * 0.0);\n    vec3 rd = normalize(my_stereo_inv(uv));\n\tvec3 rayPos = castRay(ro, rd, 0.0001);\n   \n    float itersf = iters; // would love to know how to use last distance to smooth this out\n   \n    vec3 normal = calcNormal(rayPos);\n    float ao = get_ao(rayPos, normal);\n    vec3 sun_dir = normalize(vec3(0.1, 0.8, 0.6));\n    float d2 = (max(dot(sun_dir, normal), 0.0)+0.5)/1.5;\n    \n    d2 *= ao;\n    vec3 col = mix(vec3(0.3, 0.0, 0.0), vec3(0.7, 0.6, 0.5), d2*3.0);\n    for(float i=0.,a,s,e,g=0.;\n        ++i<70.;\n        O.xyz+=mix(vec3(10),H(g*.1),.8)*1./e/8e3\n    )\n    {\n        p=g*d+rd;\n       \n     \n        a=30.;\n        p=mod(p-a,a*2.)-a;\n        s=3.;\n        for(int i=0;i++<8;){\n          \n            p=.3-abs(p)+col;\n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            s*=e=1.7+sin(iTime*.001)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.*3.,\n                    120,\n                    8.*5.\n                 );\n         }\n         g+=e=length(p.yxzz)/s;\n    }\n    O*= vec4(v2*.01,1.);\t\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}