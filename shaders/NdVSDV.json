{
    "Shader": {
        "info": {
            "date": "1635326128",
            "description": "Two famous characters locked in eternal conflict - updated",
            "flags": 0,
            "hasliked": 0,
            "id": "NdVSDV",
            "likes": 25,
            "name": "Snoopy and the Red Baron 2",
            "published": 3,
            "tags": [
                "aircraft",
                "flight",
                "immersive",
                "peanuts"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 351
        },
        "renderpass": [
            {
                "code": "// \"Snoopy and the Red Baron 2\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Alternating flight paths; mouse in small window to switch views; mouse in right\n// top/bottom corners for closeups.\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrCaps2Df (vec2 p, float r, float h);\nfloat PrConeDf (vec3 p, vec3 b);\nfloat Maxv2 (vec2 p);\nfloat Minv2 (vec2 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nmat3 AxToRMat (vec3 vz, vec3 vy);\nfloat Noisefv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nfloat Fbm2e (vec2 p);\n\n#if 1\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\n#define N_SEG 12\n\n#define N_FLYER  2\n\nmat3 flyerMat[N_FLYER];\nvec3 flyerPos[N_FLYER], qHit, sunDir, cPt[N_SEG], cPtOrg, cUpCirc, cDnCirc, oDir, oNorm;\nfloat tCur, dstFar, flyVel, tLen[N_SEG], rLoop, sHzRamp, rCirc, pathDir, vfLoop,\n   ptFac, grndScl, flSzFac;\nint idObj, idObjGrp, tpTrk, vuMode;\nbool isSh;\nconst int idFus = 1, idPipe = 2, idWngM = 3, idStrut = 4, idWngT = 5, idTail = 6, idLeg = 7,\n   idWhl = 8, idNose = 9, idGun = 10, idPlt = 11;\nconst float pi = 3.1415927;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat FlyerDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 ws;\n  float d, wr, h, qy;\n  int ig;\n  ig = idObjGrp / 256;\n  dMin /= flSzFac;\n  p /= flSzFac;\n  if (! isSh) d = PrRoundBoxDf (p, vec3 (1.2, 0.5, 1.1), 0.02);\n  if (isSh || d < dMin) {\n    q = p;\n    wr = -0.2 + q.z;\n    d = PrRoundBoxDf (q, vec3 (0.07 * (1. - 0.8 * wr * wr),\n       0.11 * (1. - 0.6 * wr * wr), 1.), 0.05);\n    d = max (d, - PrRoundBoxDf (q - vec3 (0., 0.16, 0.), vec3 (0.04, 0.03, 0.07), 0.04)); \n    DMINQ (idObjGrp + idFus);\n    q = p;  \n    q.yz -= vec2 (0.17, 0.5);\n    d = PrCylDf (q, 0.015, 0.15);\n    DMINQ (idObjGrp + idGun);\n    q = p;  \n    q.y -= 0.17;\n    d = PrSphDf (q, 0.04); \n    DMINQ (idObjGrp + idPlt);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.1, 0.03, 0.8);\n    d = PrCapsDf (q, 0.02, 0.15);\n    DMINQ (idObjGrp + idPipe);\n    q = p;\n    q.yz -= vec2 (0.03, 1.1);\n    d = PrConeDf (q, vec3 (0.8, 0.6, 0.06));\n    DMINQ (idObjGrp + idNose);\n    q = p;\n    q.yz -= vec2 (((ig == 1) ? 0.12 : 0.09), 0.4);\n    qy = q.y;\n    if (ig == 1) q.y += 0.12;\n    h = (ig == 1) ? 0.24 : 0.42;\n    q.y = mod (q.y, h) - 0.5 * h;\n    d = min (1.2 - abs (q.x), abs (PrBox2Df (vec2 (abs (q.x) - 1., q.z + 0.2), vec2 (0.25, 0.05))));\n    wr = 0.47;\n    h = (q.z - 0.1) / wr;\n    d = max (SmoothMax (PrCaps2Df (vec2 (q.y, q.z + 0.25), 0.03 * (wr - h * h), wr), - d, 0.01),\n       - q.z - 0.22);\n    d = max (d, abs (qy) - 0.26);\n    q.y = qy;\n    DMINQ (idObjGrp + idWngM);\n    q = p;\n    q.yz -= vec2 (((ig == 1) ? 0.12 : 0.09), 0.42);\n    q.xz = abs (q.xz) - vec2 (0.5, 0.1);\n    d = PrCylDf (q.xzy, 0.01, ((ig == 1) ? 0.24 : 0.21));\n    DMINQ (idObjGrp + idStrut);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.1, ((ig == 1) ? 0.24 : 0.15), 0.42);\n    d = PrCylDf (q.xzy, 0.01, ((ig == 1) ? 0.12 : 0.15));\n    DMINQ (idObjGrp + idStrut);\n    q = p;\n    q.z -= -0.9;\n    wr = 0.33;\n    h = (q.z - 0.05) / wr;\n    q.x = abs (q.x);\n    d = min (0.42 - q.x, abs (q.z + 0.06));\n    d = max (SmoothMax (PrCaps2Df (vec2 (q.y, q.z + 0.18), 0.03 * (wr - h * h), wr), - d, 0.01),\n       - q.z - 0.14);\n    d = max (d, 0.02 - 1.5 * q.x - q.z);\n    DMINQ (idObjGrp + idWngT);\n    q = p;\n    wr = 0.28;\n    q.yz -= vec2 (-0.1, -0.98);\n    h = (q.z - 0.1) / wr;\n    d = min (0.24 - abs (q.y - 0.3), abs (PrBox2Df (vec2 (q.y - 0.35, q.z + 0.02), vec2 (0.16, 0.04))));\n    d = SmoothMax (PrCaps2Df (vec2 (q.x, dot (q.zy, sin (0.1 * pi + vec2 (0.5 * pi, 0.)))),\n       0.03 * (wr - h * h), wr), - d, 0.01);\n    d = max (d, - q.z - 0.04);\n    DMINQ (idObjGrp + idTail);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.135, -0.24, 0.7);\n    q.xy = Rot2D (q.xy, -0.55);\n    q.yz = Rot2D (q.yz, 0.15);\n    d = PrCylDf (q.xzy, 0.012, 0.12);\n    DMINQ (idObjGrp + idLeg);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.22, -0.34, 0.715);\n    d = PrCylDf (q.yzx, 0.01, 0.035);\n    DMINQ (idObjGrp + idLeg);\n    q.x -= 0.01;\n    d = PrCylDf (q.yzx, 0.1, 0.015);\n    DMINQ (idObjGrp + idWhl);\n  } else dMin = min (dMin, d);\n  return flSzFac * dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin;\n  dMin = dstFar;\n  for (int k = VAR_ZERO; k < N_FLYER; k ++) {\n    if (vuMode == 0 || vuMode == k + 1) {\n      idObjGrp = (k + 1) * 256;\n      dMin = FlyerDf (flyerMat[k] * (p - flyerPos[k]), dMin);\n    }\n  }\n  return 0.8 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  isSh = true;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  isSh = false;\n  return 0.5 + 0.5 * sh;\n}\n\nfloat TrObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar / flSzFac;\n  for (int k = VAR_ZERO; k < N_FLYER; k ++) {\n    if (vuMode == 0 || vuMode == k + 1) {\n      idObjGrp = (k + 1) * 256;\n      q = flyerMat[k] * (p - flyerPos[k]) / flSzFac - vec3 (0., 0.02, 1.07);\n      d = PrCylDf (q, 0.3, 0.007);\n      DMINQ (0);\n    }\n  }\n  return flSzFac * dMin;\n}\n\nfloat TrObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 40; j ++) {\n    d = TrObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nfloat GrndDf (vec3 p)\n{\n  vec3 q;\n  float d, hb, hn, hf, a, r, vs;\n  q = p / grndScl;\n  r = length (q.xz);\n  d = p.y;\n  if (r > 0.) {\n    a = atan (q.z, - q.x) / (2. * pi) + 0.5;\n    hb = sqrt (r) / (2. * pi);\n    vs = 40.;\n    hf = (r > 1.4) ? 2.5 * hb * mix (Fbm2e (vs * vec2 (hb, a + 1.)), Fbm2e (vs * vec2 (hb, a)), a) : 0.;\n    hn = (r > 1.8) ? 0. : 0.03 * Fbm2e (8. * q.xz) * (1. - smoothstep (1.4, 1.8, r));\n    d = q.y - hn - mix (hb, hf, smoothstep (1.4, 2.2, r)) * smoothstep (1.4, 2.6, r);\n    d = max (r - 20., d);\n  }\n  return grndScl * d;\n}\n\nfloat GrndDfN (vec3 p)\n{\n  return GrndDf (p) - 0.8 * Fbm2 (0.5 * p.xz);\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + s * rd;\n    h = GrndDf (p);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.5, h);\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = VAR_ZERO; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (GrndDf (p) > 0.) sLo = s;\n      else sHi = s;\n    }\n    dHit = 0.5 * (sLo + sHi);\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.01, -0.01);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = GrndDfN (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat Insig (vec2 p, int ig)\n{\n  float s;\n  if (ig == 2) s = (1. - SmoothBump (0.08, 0.12, 0.005, length (p))) *\n     (1. - SmoothBump (-0.01, 0.03, 0.005, length (p)));\n  else s = 1. - SmoothBump (0.03, 0.06, 0.005, length (abs (p) - 0.07));\n  return s;\n}\n\nvec4 FlyerCol (int ig, int id, vec3 vn)\n{\n  vec4 col4;\n  vec2 w;\n  float s;\n  col4 = (ig == 2) ? vec4 (0.9, 0.9, 0.2, 0.2) : vec4 (0.9, 0.2, 0.2, 0.2);\n  if (id == idFus) {\n    if (qHit.z > 1.01) {\n      col4 = vec4 (0.9, 0.9, 0.9, 0.3);\n      if (length (abs (qHit.xy + vec2 (0., 0.05)) * vec2 (0.6, 1.)) < 0.03) col4.rgb *= 1. -\n         0.7 * SmoothBump (0.2, 0.8, 0.05, mod (64. * ((ig == 1) ? qHit.y : qHit.x), 1.));\n    }\n    w = abs (qHit.xz) - vec2 (0.09, 0.12);\n    if (abs (qHit.y - 0.1) < 0.04 && Maxv2 (w) < 0.) col4.rgb = vec3 (0.2, 0.15, 0.05);\n    col4.rgb = mix (1. - col4.rgb, col4.rgb, Insig (1.5 * qHit.yz + vec2 (0., 0.4), ig));\n  } else if (id == idWngM) {\n    col4.rgb = mix (col4.rgb, 1. - col4.rgb, step (0., qHit.z - 0.14 - 0.07 *\n       abs (sin ((8./1.2) * pi * qHit.x))));\n    s = 1.2 / 8.;\n    s = mod (qHit.x + 0.5 * s, s) - 0.5 * s;\n    col4.rgb *= 1. + 0.1 * SmoothBump (-0.01, 0.01, 0.002, s);\n    if (abs (qHit.y) > 0.1 && qHit.y * vn.y > 0.) {\n      col4.rgb = mix (1. - col4.rgb, col4.rgb, Insig (vec2 (abs (qHit.x) - 0.9, qHit.z), ig));\n    }\n  } else if (id == idWngT) {\n    col4.rgb = mix (col4.rgb, 1. - col4.rgb, step (0., qHit.z - 0.11 - 0.03 *\n       abs (sin (17. * pi * qHit.x))));\n    s = 1. / 17.;\n    s = mod (qHit.x + 0.5 * s, s) - 0.5 * s;\n    col4.rgb *= 1. + 0.1 * SmoothBump (-0.005, 0.005, 0.001, s);\n  } else if (id == idTail) {\n    col4.rgb = mix (1. - col4.rgb, col4.rgb, Insig (2.5 * qHit.yz + vec2 (-0.9, -0.25), ig));\n  } else if (id == idNose) {\n    col4 = (qHit.z > -0.04) ? mix (col4, vec4 (1., 1., 1., 0.5), 0.5) : vec4 (0.1);\n  } else if (id == idPipe) {\n    col4 = vec4 (0.8, 0.8, 0.85, 0.3) * (0.5 + 0.5 * SmoothBump (0.1, 0.9, 0.05,\n       mod (16. * qHit.z, 1.)));\n  } else if (id == idStrut || id == idLeg) {\n    col4.rgb = 0.6 * col4.rgb + vec3 (0.4);\n  } else if (id == idGun) {\n    col4.rgb = vec3 (0.6, 0.6, 0.7);\n  } else if (id == idPlt) {\n    col4 = vec4 (0.4, 0.2, 0.1, 0.);\n    if (qHit.z > 0.02 && qHit.y < 0.03) col4.rgb = (ig == 2) ? vec3 (0.9) : vec3 (0.6, 0.4, 0.4);\n    if (qHit.z > 0. && length (vec2 (abs (qHit.x) - 0.011, qHit.y - 0.015)) < 0.01)\n       col4 = vec4 (0., 0.2, 0., 0.2);\n    if (qHit.z > 0. && ig == 2 && length (qHit.xy - vec2 (0., -0.02)) < 0.012)\n       col4.rgb = vec3 (0.1);\n  } else if (id == idWhl) {\n    if (length (qHit.yz) > 0.07) col4 = vec4 (0.05);\n  }\n  return col4;\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, skCol;\n  vec2 q;\n  float f, fd, ff, sd;\n  rd.y = abs (rd.y);\n  q = 0.01 * (ro.xz + 0.5 * tCur + ((200. - ro.y) / rd.y) * rd.xz);\n  ff = Fbm2 (q);\n  f = smoothstep (0.2, 0.8, ff);\n  fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n  clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n     smoothstep (0., 0.05, abs (fd)));\n  sd = max (dot (rd, sunDir), 0.);\n  skCol = vec3 (0.4, 0.5, 0.8) + step (0.1, sd) * vec3 (1., 1., 0.9) * min (0.3 * pow (sd, 64.) +\n     0.5 * pow (sd, 2048.), 1.);\n  fd = smoothstep (0.01, 0.1, rd.y);\n  col = mix (mix (vec3 (0.8, 0.8, 0.7), skCol, 0.3 + 0.7 * fd), clCol, 0.1 + 0.9 * f * fd);\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 vn, col, roo;\n  float dstObj, dstGrnd, sh;\n  int ig, id;\n  roo = ro;\n  isSh = false;\n  dstGrnd = (vuMode == 0) ? GrndRay (ro, rd) : dstFar;\n  dstObj = ObjRay (ro, rd);\n  if (min (dstGrnd, dstObj) < dstFar) {\n    if (dstObj < dstGrnd) {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      ig = idObj / 256;\n      id = idObj - 256 * ig;\n      col4 = FlyerCol (ig, id, ((ig == 1) ? flyerMat[0] : flyerMat[1]) * vn);\n      sh = ObjSShadow (ro + 0.01 * vn, sunDir);\n      col = col4.rgb * (0.2 + 0.2 * max (dot (vn.xz, - normalize (sunDir.xz)), 0.) +\n         0.8 * sh * max (dot (vn, sunDir), 0.)) +\n         sh * col4.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n    } else if (dstGrnd < dstFar) {\n      ro += dstGrnd * rd;\n      vn =  GrndNf (ro);\n      col = mix (vec3 (0.2, 0.4, 0.1), vec3 (0., 0.5, 0.), clamp (0.7 * Noisefv2 (ro.xz) - 0.3, 0., 1.));\n      col = mix (vec3 (0.6, 0.6, 0.7) * (0.7 + 0.3 * Noisefv2 (4. * vec2 (length (ro.xz), ro.y))),\n         col, smoothstep (0.5, 0.8, vn.y));\n      col *= 0.1 + 0.9 * max (0., max (dot (vn, sunDir), 0.));\n    }\n  } else {\n    col = (vuMode == 0) ? SkyCol (ro, rd) : vec3 (0.2);\n  }\n  if (TrObjRay (roo, rd) < min (min (dstGrnd, dstObj), dstFar)) col = mix (col,\n     mix (vec3 (1.), vec3 (0.8), step (0.02, abs (length (qHit.xy) - 0.26))), 0.2);\n  return clamp (col, 0., 1.);\n}\n\nvoid PathSetup ()\n{\n  float hTop, sHzStr, sDnRamp, sUpRamp;\n  ptFac = 20.;\n  cPtOrg = vec3 (2. * pathDir, 0., -3.);\n  hTop = 1.5;\n  rLoop = 2.2;\n  sHzRamp = 1.;\n  rCirc = 2.;\n  sDnRamp = 1.5;\n  sUpRamp = 1.3 * sDnRamp;\n  sHzStr = sDnRamp - sUpRamp + 3. * sHzRamp;\n  vfLoop = 0.3;\n  cDnCirc = cPtOrg + vec3 (- rCirc * pathDir, 0., -2. * sHzRamp);\n  cUpCirc = cPtOrg + vec3 (- rCirc * pathDir, 2. * hTop, 2. * sDnRamp + 6. * sHzRamp);\n  cPt[0] = cDnCirc;   cPt[0].xz += vec2 (- rCirc * pathDir, sHzStr);\n  cPt[1] = cPt[0];    cPt[1].z += sHzStr;\n  cPt[3] = cUpCirc;   cPt[3].x -= rCirc * pathDir;\n  cPt[4] = cUpCirc;   cPt[4].x += rCirc * pathDir;\n  cPt[2] = cPt[3];    cPt[2].z -= 2. * sHzRamp;\n  cPt[5] = cPt[4];    cPt[5].z -= 2. * sHzRamp;\n  cPt[7] = cPtOrg;\n  cPt[8] = cPtOrg;\n  cPt[6] = cPt[7];    cPt[6].z += 4. * sHzRamp;\n  cPt[9] = cDnCirc;   cPt[9].x += rCirc * pathDir;\n  cPt[10] = cDnCirc;  cPt[10].x -= rCirc * pathDir;\n  cPt[11] = cPt[0];\n  tLen[0] = 0.;\n  for (int k = 1; k < N_SEG; k ++) tLen[k] = length (cPt[k] - cPt[k - 1]);\n  tLen[4] = pi * rCirc;\n  tLen[8] = 2. * pi * rLoop * (1. + vfLoop);\n  tLen[10] = pi * rCirc;\n  for (int k = 1; k < N_SEG; k ++) tLen[k] += tLen[k - 1];\n}\n\nvec3 TrkPos (float t)\n{\n  vec3 r;\n  vec2 cs;\n  t *= 0.05 / (2. * pi);\n  t = mod (t, 1.);\n  cs = sin (2. * pi * t + vec2 (0.5 * pi, 0.));\n  r.xz = vec2 (1., cs.y);\n  r.xz = 40. * cs.x * r.xz / dot (r.xz, r.xz) + vec2 (1., - 5.);\n  r.y = 10. + 2. * sin (2. * pi * t);\n  return r;\n}\n\nvoid FlyerPM1 (float t, out vec3 flPos, out mat3 flMat)\n{\n  vec3 vel, acc, va, flVd, fpF, fpB;\n  vec2 cs;\n  float oRl, dt;\n  if (vuMode == 0) {\n    dt = 0.2;\n    flPos = TrkPos (t);\n    fpF = TrkPos (t + dt);\n    fpB = TrkPos (t - dt);\n    vel = (fpF - fpB) / (2. * dt);\n    acc = (fpF - 2. * flPos + fpB) / (dt * dt);\n    va = cross (acc, vel) / length (vel);\n    flVd = normalize (vel);\n    oRl = 2. * length (va) * sign (va.y);\n    oRl = smoothstep (0.01, 0.03, abs (oRl)) * oRl;\n    cs = sin (oRl + vec2 (0.5 * pi, 0.));\n    flMat = mat3 (cs.x, - cs.y, 0., cs.y, cs.x, 0., 0., 0., 1.) *\n       mat3 (flVd.z, 0., flVd.x, 0., 1., 0., - flVd.x, 0., flVd.z);\n  } else {\n    flPos = vec3 (0.);\n    flMat = mat3 (1., 0., 0., 0., 1., 0., 0., 0., 1.);\n  }\n}\n\nvoid FlyerPM2 (float t, float vu, out vec3 flPos, out mat3 flMat)\n{\n  vec3 p, p1, p2, u;\n  vec2 cs;\n  float w, ft, ftt, s, h, oRl;\n  int ik;\n  h = 2. * sin (0.43 * pi * t) + sin (0.79 * pi * t);\n  oRl = 0.01 * pi * h;\n  t = mod (t, tLen[N_SEG - 1]);\n  for (int k = 1; k < N_SEG; k ++) {\n    if (t < tLen[k]) {\n      t -= tLen[k - 1];\n      p1 = cPt[k - 1];\n      p2 = cPt[k];\n      w = tLen[k] - tLen[k - 1];\n      ik = k;\n      break;\n    }\n  }\n  oNorm = vec3 (0., 1., 0.);\n  ftt = t / w;\n  ft = ftt;\n  if (ik == 4 || ik == 10) oRl += -0.25 * pi * SmoothBump (0.05, 0.95, 0.05, ft);\n  if (ik == 4) oRl += 2. * pi * smoothstep (0.4, 0.6, ft);\n  if (ik == 2 || ik == 6) {\n    oDir = p2 - p1;\n    p.xz = p1.xz + oDir.xz * ft * vec2 (pathDir, 1.);\n    p.y = p1.y + oDir.y * smoothstep (0., 1., ft);\n    oDir.y *= 6. * ft * (1. - ft);\n    oDir = normalize (oDir);\n  } else if (ik == 4) {\n    ft *= pi;\n    p = cUpCirc;\n    u = vec3 (- cos (ft) * pathDir, 0., sin (ft));\n    p.xz += rCirc * u.xz;\n    oDir = cross (oNorm, u);\n    oDir.xz *= pathDir;\n  } else if (ik == 8) {\n    ft = (ft < 0.5) ? ft * (1. + vfLoop * (1. - 2. * ft)) :\n       ft * (1. + 2. * vfLoop * (ft - 1.5)) + vfLoop;\n    p = 0.5 * (cPt[7] + cPt[8]);\n    ft *= 2. * pi;\n    u = vec3 (0., cos (ft), sin (ft));\n    p.yz += rLoop * (vec2 (1., 0.) - u.yz);\n    oNorm = u;\n    oDir = normalize (vec3 (0., 2. * pi * rLoop * vec2 (sin (ft), - cos (ft))));\n  } else if (ik == 10) {\n    ft *= pi;\n    p = cDnCirc;\n    u = vec3 (cos (ft) * pathDir, 0., - sin (ft));\n    p.xz += rCirc * u.xz;\n    oDir = cross (oNorm, u);\n    oDir.xz *= pathDir;\n  } else {\n    oDir = p2 - p1;\n    p = p1 + oDir * ft;\n    oDir = normalize (oDir);\n  }\n  p *= ptFac;\n  p.y += 2. + 0.1 * h;\n  p.y += 8.;\n  flPos = p;\n  if (vu > 0.) {\n    oDir *= -1.;\n    oRl *= -1.;\n  }\n  oRl += 0.2 * (Fbm1 (t) - 0.5) * SmoothBump (0.1, 0.9, 0.1, ftt);\n  cs = sin (oRl * pathDir + vec2 (0.5 * pi, 0.));\n  flMat = mat3 (cs.x, - cs.y, 0., cs.y, cs.x, 0., 0., 0., 1.) * AxToRMat (oDir, oNorm);\n}\n\nvec3 VuPos (float t)\n{\n  vec3 p, df;\n  float b, r, a, tb;\n  df = flyerPos[1] - flyerPos[0];\n  b = 3.;\n  r = 4.;\n  p = vec3 (0., 1. + 1.5 * sin (0.1 * pi * t), 0.);\n  t = 8. * mod (t / (2. * (b + pi * r)), 1.);\n  t = floor (t) + smoothstep (0.9, 1., fract (t));\n  t = 2. * (b + pi * r) * t / 8.;\n  tb = 0.5 * pi * r;\n  a = -1.;\n  if (t < tb) {\n    a = t / r;\n    p.x = 0.5 * b;\n  } else if (t < tb + b) {\n    p.xz = vec2 (tb + 0.5 * b - t, r);\n  } else if (t < 3. * tb + b) {\n    a = 0.5 * pi + (t - (tb + b)) / r;\n    p.x = -0.5 * b;\n  } else if (t < 3. * tb + 2. * b) {\n    p.xz = vec2 (t - (3. * tb + 1.5 * b), - r);\n  } else {\n    a = 1.5 * pi + (t - (3. * tb + 2. * b)) / r;\n    p.x = 0.5 * b;\n  }\n  if (a >= 0.) p.xz += r * sin (a + vec2 (0.5 * pi, 0.));\n  p.xz = Rot2D (p.xz, - atan (- df.z, df.x));\n  p += 0.5 * (flyerPos[1] + flyerPos[0]);\n  return p;\n}\n\nvec3 GlareCol (vec3 rd, vec3 sd, vec2 uv)\n{\n  vec3 col;\n  vec2 e;\n  e = vec2 (1., 0.);\n  uv *= 2.;\n  if (sd.z > 0.) col = 0.05 * pow (abs (sd.z), 4.) *\n     (4. * e.xyy * max (dot (normalize (rd + vec3 (0., 0.3, 0.)), sunDir), 0.) +\n      e.xxy * SmoothBump (0.03, 0.05, 0.01, length (uv - 0.7 * sd.xy)) +\n      e.yxx * SmoothBump (0.2, 0.23, 0.02, length (uv - 0.5 * sd.xy)) +\n      e.xyx * SmoothBump (0.6, 0.65, 0.03, length (uv - 0.3 * sd.xy)));\n  else col = vec3 (0.);\n  return col;\n}\n\n#define AA  0   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 flMat, vuMat;\n  vec4 mPtr;\n  vec3 flPos, ro, rd, vd, col;\n  vec2 canvas, uv, mMid, ut, mSize, msw;\n  float az, el, zmFac, asp, sr, tCyc;\n  int vuId, regId;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= iResolution.x / iResolution.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  vuMode = 0;\n  if (mPtr.z > 0. && Minv2 (vec2 (mPtr.x, abs (mPtr.y)) + 0.04 * vec2 (1. / asp, 1.) - 0.5) > 0.)\n     vuMode = (mPtr.y > 0.) ? 1 : 2;\n  if (vuMode == 0) {\n    mSize = (1./5.) * vec2 (asp, 1.);\n    mMid = vec2 (asp, 1.) * (1. - mSize.y) * vec2 (-1., -1.);\n    ut = abs (uv - mMid) - mSize;\n    regId = -1;\n    if (mPtr.z > 0.) {\n      regId = 0;\n      msw = 2. * mPtr.xy - mMid / vec2 (asp, 1.);\n      if (Maxv2 (abs (msw)) < mSize.y) {\n        regId = 1;\n        msw /= 2. * mSize.y;\n      }\n      if (regId == 0) msw = mPtr.xy;\n      msw *= smoothstep (0.01, 0.1, abs (msw));\n    }\n    vuId = 0;\n    if (Maxv2 (ut) < 0.) {\n      uv = (uv - mMid) / mSize.y;\n      vuId = 1;\n    }\n    if (regId > 0 && (vuId == 0 || vuId == regId)) vuId = regId - vuId;\n    tCyc = 60.;\n    tpTrk = (length (uv * vec2 (1. / asp, 1.)) < 1.5 * SmoothBump (0.25, 0.75, 0.01,\n       mod (tCur / tCyc, 1.))) ? 2 : 1;\n    if (tpTrk == 1) {\n      flyVel = 2.;\n      for (int k = 0; k < N_FLYER; k ++) FlyerPM1 (tCur * flyVel + ((k == 0) ? 0. : 2.),\n        flyerPos[k], flyerMat[k]);\n    } else {\n      flyVel = 1.;\n      pathDir = (mod (tCur / tCyc, 2.) > 1.) ? 1. : -1.;\n      PathSetup ();\n      for (int k = 0; k < N_FLYER; k ++) FlyerPM2 (tCyc * mod (tCur / tCyc, 1.) * flyVel + \n         ((k == 0) ? 0.15 : 0.4), 0., flyerPos[k], flyerMat[k]);\n      FlyerPM2 (tCyc * mod (tCur / tCyc, 1.) * flyVel, 0., flPos, flMat);\n    }\n    ro = vec3 (1., 10., 1.);\n    vd = 0.5 * (flyerPos[0] + flyerPos[1]) - ro;\n    az = 0.;\n    el = 0.;\n    zmFac = 3.;\n    if (tpTrk == 1) {\n      if (vuId == 1) {\n        ro = VuPos (0.1 * tCur);\n        vd = 0.5 * (flyerPos[0] + flyerPos[1]) - ro;\n      } else {\n        zmFac = 6. + 0.2 * length (vd);\n      }\n    } else {\n      if (vuId == 1) {\n        ro = flPos + 0.3 * oNorm + 0.2 * cross (oNorm, oDir) * sin (0.1 * pi * tCur);\n      } else {\n        zmFac = 6. + 0.2 * length (vd);\n      }\n    }\n    if (tpTrk == 1 || vuId != 1) {\n      az = 0.5 * pi + atan (- vd.z, vd.x);\n      el = asin (vd.y / length (vd));\n    }\n    if (vuId == regId) {\n      msw *= smoothstep (0., 0.03, length (msw));\n      az += 0.5 * pi * msw.x;\n      el += 0.25 * pi * msw.y;\n    }\n    vuMat = StdVuMat (el, az);\n    grndScl = 100.;\n    dstFar = 10. * grndScl;\n    sunDir = normalize (vec3 (cos (0.01 * tCur), 2., - sin (0.01 * tCur)));\n    flSzFac = 0.5;\n  } else {\n    for (int k = 0; k < N_FLYER; k ++) FlyerPM1 (0., flyerPos[k], flyerMat[k]);\n    az = 0.6 * pi + 2. * pi * mod (0.02 * tCur, 1.);\n    el = 0.15 * pi * sin (0.1 * pi * tCur);\n    vuMat = StdVuMat (el, az);\n    ro = vuMat * vec3 (0., 0., -8.);\n    zmFac = 7.;\n    dstFar = 120.;\n    sunDir = vuMat * normalize (vec3 (1., 1., -1.));\n    flSzFac = 1.;\n  }\n  col = vec3 (0.);\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    if (vuMode == 0 && tpTrk == 2 && vuId == 1) rd = rd * flMat;\n    rd = vuMat * rd;\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  if (vuMode == 0) {\n    col += GlareCol (rd, flMat * sunDir * vuMat, uv);\n    if (mPtr.z > 0. && Maxv2 (abs (uv)) < 0.05 && Minv2 (abs (uv)) < 0.005)\n       col = mix (col, vec3 (1., 1., 0.1), 0.3);\n    if (Maxv2 (ut) < 0. && Minv2 (abs (ut)) * canvas.y < 2.) col = vec3 (0.5, 0.1, 0.1);\n  }\n  if (mPtr.z > 0. && vuId == 0 && regId == 0 && min (uv.x - asp, abs (uv.y) - 1.) > -0.08)\n     col = mix (col, vec3 (1., 1., 0.1), 0.3);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrCaps2Df (vec2 p, float r, float h)\n{\n  return length (p - vec2 (0., clamp (p.y, - h, h))) - r;\n}\n\nfloat PrConeDf (vec3 p, vec3 b)\n{\n  return max (dot (vec2 (length (p.xy), p.z), b.xy), abs (p.z) - b.z);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nmat3 AxToRMat (vec3 vz, vec3 vy)\n{\n  vec3 vx;\n  vx = normalize (cross (vy, vz));\n  vy = cross (vz, vx);\n  return mat3 (vec3 (vx.x, vy.x, vz.x), vec3 (vx.y, vy.y, vz.y), vec3 (vx.z, vy.z, vz.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2e (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 6; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.96875);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}