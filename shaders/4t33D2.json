{
    "Shader": {
        "info": {
            "date": "1471532893",
            "description": "These shiny chrome highlights are exaggerated for effect; they weren't as blatantly obvious and numerous in the originals usually :) This is not a pixel buffer or post-processing effect!  The animation loops every 5 seconds.",
            "flags": 0,
            "hasliked": 0,
            "id": "4t33D2",
            "likes": 42,
            "name": "Highlights from the 80's",
            "published": 3,
            "tags": [
                "2d",
                "80s",
                "neon",
                "highlight",
                "sparkle",
                "glint",
                "glimmer"
            ],
            "usePreview": 0,
            "username": "TimoKinnunen",
            "viewed": 3757
        },
        "renderpass": [
            {
                "code": "// 80's style shiny chrome effect with highlights for extra shininess.\n// Based on 80s chrome effect by nuclear @ https://www.shadertoy.com/view/XtcGzs\n//\n// Coloring and general style inspired by Drive Radio logo.\n//\n//\n// With the main scene and almost everything by nuclear:\n// 80s chrome effect @ https://www.shadertoy.com/view/XtcGzs\n//\n// Post effects by P_Malin:\n// Where the River Goes (+ PostFX) @ https://www.shadertoy.com/view/XdG3zd\n//\n// Subpixel dithering by CeeJayDK:\n// dithering: Color Banding Removal @ https://www.shadertoy.com/view/MslGR8\n//\n\nconst bool apply_vignetting = true;\nconst bool apply_tonemap = false;\nconst bool apply_gamma = false;\nconst bool apply_crushedshadows = false;\nconst float vignet = 0.491;\nconst float gamma = 0.87;\nconst float exposure = 1.44;\nconst float smoothness = 0.005;\nconst float bevel_size = 0.1;\nconst float horiz_scale = 10.0;\nconst float spokes = 5.0;\nconst float highlights = 23.0;\nconst vec2 light_dir = vec2(0.1, 1.0);\nconst vec3 mid_color = vec3(0.133, 0.006, 0.612);\nconst vec3 horiz_color = vec3(0.612, 0.006, 1.0);\nconst vec3 fog_color = vec3(0.008, 0.04, 0.022);\nconst vec3 grid_color = vec3(1.0, 0.2, 1.0);\nconst vec3 top_color = vec3(0.05, 0.0, 0.035);\nconst float bevelMul = 1.8760002;\nconst float lineMul = 1.06;\nconst float line1Mul = -1.0;\nconst float line2Mul = -1.0;\nconst float bevelExp = 0.772;\nconst float lineExp = 8.776;\nconst float glareMul = 0.736;\nconst float sparkleMul = -2.0;\nconst float displaceAmount = -2.17;\nconst float ptMul = 0.188;\nconst float ptDiv = 20.715;\nconst float distMul = 7.2980003;\nconst float distDiv = 1.02;\nconst float PI = 3.1415926535897932384626433832795;\nconst float HALF_PI = 1.5707963267948966192313216916398;\nfloat spin0;\n\nmat2 rot2(float T) {\n\tmat2 R = mat2(vec2(cos(T), sin(T)), vec2( -sin(T), cos(T)));\n\treturn R;\n}\nfloat udLine(vec2 p, vec2 a, vec2 b) {\n\tvec2 pa = p- a, ba = b- a;\n\treturn length(pa- ba* dot(pa, ba)/ dot(ba, ba));\n}\n// Subpixel dithering by CeeJayDK\nvec3 dither() {\n\tfloat px = 1.0/ 255.0;\n\tfloat fpx = px* fract(dot(gl_FragCoord.xy- .5, vec2(5./ 16., 19./ 36.)));\n\treturn vec3(px- fpx, fpx, px- fpx);\n}\n// Post Effects by P_Malin\nvec3 ApplyVignetting(const in vec2 vUV, const in vec3 vInput) {\n\tvec2 vOffset = (vUV- 0.5)* sqrt(2.0);\n\tfloat fDist = dot(vOffset, vOffset);\n\tconst float kStrength = vignet;\n\tfloat fShade = mix(1.0, 1.0- kStrength, fDist);\n\treturn vInput* fShade;\n}\nvec3 ApplyTonemap(const in vec3 vLinear) {\n\tconst float kExposure = exposure;\n\treturn 1.0- exp2(vLinear* -kExposure);\n}\nvec3 ApplyGamma(const in vec3 vLinear) {\n\tconst float kGamma = gamma;\n\treturn pow(vLinear, vec3(1.0/ kGamma));\n}\nvec3 ApplyPostFX(const in vec2 vUV, const in vec3 vInput) {\n\tvec3 vFinal = vInput;\n\tif(apply_vignetting) vFinal = ApplyVignetting(vUV, vFinal);\n\tif(apply_tonemap) vFinal = ApplyTonemap(vFinal);\n\tif(apply_gamma) vFinal = ApplyGamma(vFinal);\n\tif(apply_crushedshadows) vFinal = vFinal* 1.1- 0.1;\n\treturn vFinal;\n}\nfloat glyph_dist2(in vec2 pt, float angle) {\n\tfloat len = length(pt);\n\tfloat rad = 1.0- len;\n\treturn rad- abs(sin(angle* spokes/ 2.0))* 0.6;\n}\nfloat glyph_dist(in vec2 pt) {\n\tfloat angle = atan(pt.y, pt.x)- spin0* 2.0* PI;\n\treturn glyph_dist2(pt, angle);\n}\nvec2 sparklyPosition(float progress) {\n\tvec2 pt = vec2(1, 0);\n\tfloat angle = 2.0* PI* progress;\n\tfloat glyph = glyph_dist2(pt, angle);\n\tvec2 adjust = vec2(1.0- 0.5* bevel_size, 0);\n\tvec2 trace = pt* glyph+ adjust;\n\tvec2 pos = trace* rot2( -angle+ -2.0* PI* spin0);\n\treturn pos;\n}\nvec2 gradient(vec2 pt, float dist) {\n\tfloat dfdu = glyph_dist(pt+ vec2(0.01, 0.0))- dist/ 1.01;\n\tfloat dfdv = glyph_dist(pt+ vec2(0.0, 0.01))- dist/ 1.01;\n\tvec2 grad = normalize(vec2(dfdu, -dfdv));\n\treturn grad;\n}\nfloat bevelShade(vec2 pt) {\n\treturn clamp(1.0* dot(gradient(pt, glyph_dist(pt)), light_dir)* 0.5+ 0.5, 0.0,\n\t\t\t1.0);\n}\nvec3 gradcolors(float t) {\n\tfloat over = cos(t* HALF_PI);\n\tfloat under = cos(t* HALF_PI+ HALF_PI)+ 1.0;\n\treturn vec3(over, under, over);\n}\nvec3 sky_grad(float t) {\n\treturn mix(horiz_color, mid_color, t- 0.8);\n}\nvec3 grid(in vec2 pt) {\n\tfloat z = 1.0+ abs(pt.y* (1.0- 0.025* pt.x* pt.x))* 6.0;\n\tfloat ptx = pt.x/ z;\n\tfloat pty = abs(pt.y)/ z;\n\tfloat val = max(sin(ptx* 100.0), sin(pty* 900.0- 8.0* PI* spin0));\n\tfloat col_t = smoothstep(2.0, 4.5, z);\n\tvec3 col = mix(fog_color, grid_color, col_t);\n\tfloat upper = z* z* 0.00375;\n\tfloat mixAmount = 5.0- 2.0* smoothstep(0.4, 0.6, -pt.y)+ 2.4* pt.y;\n\tfloat lowMix = 0.9+ upper* mixAmount;\n\tfloat smoothMul = smoothstep(lowMix, 0.95, val);\n\treturn smoothstep(0.11, 0.22, -pt.y)* val* smoothMul* col;\n}\n\n//\n// GLSL textureless classic 2D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/stegu/webgl-noise\n//\n\nvec4 mod289(vec4 x) {\n\treturn x- floor(x* (1.0/ 289.0))* 289.0;\n}\n\nvec4 permute(vec4 x) {\n\treturn mod289(((x* 34.0)+ 1.0)* x);\n}\n\nvec4 taylor_inv_sqrt(vec4 r) {\n\treturn 1.79284291400159- 0.85373472095314* r;\n}\n\n// by Ken Perlin\nvec2 smootherstep(vec2 t) {\n\treturn t* t* t* (t* (t* 6.0- 15.0)+ 10.0);\n}\n\n// Classic perlin noise\nfloat cnoise(vec2 p) {\n\tvec4 pi = floor(p.xyxy)+ vec4(0.0, 0.0, 1.0, 1.0);\n\tvec4 pf = fract(p.xyxy)- vec4(0.0, 0.0, 1.0, 1.0);\n\tpi = mod289(pi); // To avoid truncation effects in permutation\n\tvec4 ix = pi.xzxz;\n\tvec4 iy = pi.yyww;\n\tvec4 fx = pf.xzxz;\n\tvec4 fy = pf.yyww;\n\n\tvec4 i = permute(permute(ix)+ iy);\n\n\tvec4 gx = fract(i* (1.0/ 41.0))* 2.0- 1.0;\n\tvec4 gy = abs(gx)- 0.5;\n\tvec4 tx = floor(gx+ 0.5);\n\tgx = gx- tx;\n\n\tvec2 g00 = vec2(gx.x, gy.x);\n\tvec2 g10 = vec2(gx.y, gy.y);\n\tvec2 g01 = vec2(gx.z, gy.z);\n\tvec2 g11 = vec2(gx.w, gy.w);\n\n\tvec4 norm = taylor_inv_sqrt(\n\t\t\tvec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n\tg00 *= norm.x;\n\tg01 *= norm.y;\n\tg10 *= norm.z;\n\tg11 *= norm.w;\n\n\tfloat n00 = dot(g00, vec2(fx.x, fy.x));\n\tfloat n10 = dot(g10, vec2(fx.y, fy.y));\n\tfloat n01 = dot(g01, vec2(fx.z, fy.z));\n\tfloat n11 = dot(g11, vec2(fx.w, fy.w));\n\n\tvec2 fade_xy = smootherstep(pf.xy);\n\tvec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n\tfloat n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n\treturn 2.3* n_xy;\n}\nfloat fbm4(float p) {\n\tfloat res = 0.0;\n\tfloat freq = 1.0;\n\tfloat scale = 1.0;\n\n\tfor(int i = 0; i< 4; i++) {\n\t\tres += cnoise(vec2(p* freq, 0.0))* scale;\n\t\tfreq *= 2.0;\n\t\tscale *= 0.5;\n\t}\n\treturn res;\n}\n\nvec3 backdrop(in vec2 pt) {\n\t//return grid(pt);\n\tvec3 color = sky_grad(pt.y* 2.0);\n\tfloat horiz = pt.y+ fbm4(pt.x* 1.8)* 0.1;\n\treturn mix(mix(fog_color, top_color, pt.y* 2.0+ 0.5), color,\n\t\t\tsmoothstep(0.025, 0.03, horiz))+ grid(pt)+ dither();\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    spin0 = iTime* 0.2;\n\tvec2 uv = fragCoord.xy/ iResolution.xy;\n\tfloat aspect = iResolution.x/ iResolution.y;\n\tvec2 pt = (uv* 2.0- 1.0)* vec2(aspect, 1.0)* 1.0;\n\n\tfloat dist = glyph_dist(pt);\n\tvec2 grad = gradient(pt, dist);\n\n\tfloat val = smoothstep( -smoothness, smoothness, dist);\n\tfloat bevel = smoothstep(bevel_size- smoothness, bevel_size+ smoothness,\n\t\t\tdist);\n\n\t// --- face gradients ---\n\tvec2 ngrad = (gradient(pt*ptMul/ptDiv, dist*distMul/distDiv));\n\tvec2 auv = uv + ngrad*0.01* displaceAmount;\n\tfloat t = auv.y;\n\tfloat horiz = t* 0.95+ fbm4(auv.x* 1.8* 2.0)* .075;\n\tvec3 color_low = gradcolors(clamp(1.1275* t- 0.8+ horiz, 0.0, 1.0))\n\t\t\t* vec3(1.7, 1.5, 1.4);\n\tvec3 color_high = gradcolors(clamp(1.75* t- 0.4+ horiz, 0.0, 1.0))\n\t\t\t* vec3(1.9, 1.5, 1.4);\n\tvec3 face_color = mix(color_high, color_low, smoothstep(0.495, 0.505, horiz))\n\t\t\t+ dither();\n\n\t// --- bevel gradients ---\n\tfloat bv_shade = clamp(1.0* dot(grad, normalize(vec2(0.1, 1.0)))* 0.5+ 0.5,\n\t\t\t0.0, 1.0);\n\n\tvec3 bv_color = gradcolors(1.0- bv_shade)* vec3(1.6, 1.05, 1.13);\n\tvec3 color = mix(bv_color, face_color, bevel);\n\n\tcolor = mix(backdrop(pt), color, val);\n\t// --- bevel highlights ---\n\tfor(float i = 0.0; i< highlights; i++) {\n\t\tvec2 glintPos = sparklyPosition((i+ 1.0)/ highlights);\n\t\tfloat dist = distance(pt, glintPos);\n\t\tfloat sparkle = dist* 2.0;\n\t\tif(sparkle< 1.0) {\n\t\t\tfloat line1 = udLine(pt, glintPos, glintPos+ vec2(1, +1))* line1Mul;\n\t\t\tfloat line2 = udLine(pt, glintPos, glintPos+ vec2(1, -1))* line2Mul;\n\t\t\tfloat bevel = bevelShade(glintPos)* bevelMul;\n\t\t\tfloat lines = 1.0+ (line1+ line2)* lineMul;\n\t\t\tfloat glare = pow(bevel, bevelExp)* pow(lines, lineExp);\n\t\t\tcolor = color+ glare* glareMul* (1.0- sparkle* sparkleMul);\n\t\t}\n\t}\n\tcolor += dither();\n\tcolor = ApplyPostFX(uv, color);\n\tfragColor = vec4(clamp(color, 0.0, 1.0), 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}