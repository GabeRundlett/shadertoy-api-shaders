{
    "Shader": {
        "info": {
            "date": "1670415696",
            "description": "Attempt at deforming a plane to create some kind of gravity field. Ended up by adjusting the step size, but this only works if the deformation is small.\n\nIs there a better method to do this, and get clean results? ",
            "flags": 0,
            "hasliked": 0,
            "id": "ds2SDw",
            "likes": 5,
            "name": "28 Tauri Aa",
            "published": 3,
            "tags": [
                "sphereuvmapplane"
            ],
            "usePreview": 0,
            "username": "darkeclipz",
            "viewed": 248
        },
        "renderpass": [
            {
                "code": "#define AA 2.\n#define R iResolution.xy\n\nmat2 rot(float a) {\n\tfloat c = cos(a), s = sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat sdSphere(vec3 p, float r) {\n\treturn length(p) - r;    \n}\n\nvec4 map( in vec3 pos, float time )  \n{\n    float id = 0.;\n    float sphere = sdSphere(pos, 0.5);\n    float nearestDistanceToSphere = 1e20;\n    \n    // F = G m1 m2 / r2\n    float G = 0.192;\n    float F = G / dot(pos, pos);\n    \n    float plane = (pos.y + F);\n    float d = min(sphere, plane);\n    \n    nearestDistanceToSphere = min(nearestDistanceToSphere, sphere);\n    \n    if(plane < sphere) {\n    \tid = 1.;  \n    }\n    \n    return vec4(d, id, F, nearestDistanceToSphere);\n}\n\nvec3 calcNormal( in vec3 pos, float t ) \n{\n    vec2 e = vec2(0.001, 0.0);\n    return normalize( vec3(map(pos+e.xyy,t).x-map(pos-e.xyy,t).x,\n                           map(pos+e.yxy,t).x-map(pos-e.yxy,t).x,\n                           map(pos+e.yyx,t).x-map(pos-e.yyx,t).x ) );\n}\n\nfloat castShadow( in vec3 ro, vec3 rd, float time )\n{\n    float res = 1.0;\n    float t = 0.00;\n    for( int i=0; i< 100; i++ )\n    {\n        vec3 pos = ro + t*rd;\n        float h = map( pos, time ).x;\n        res = min( res, 16.0*h/t );\n        if ( res<0.001 ) break;\n        t += h;\n        if( t > 10.0 ) break;\n    }\n\n    return clamp(res,0.0,1.0);\n} \n\nvec3 castRay( in vec3 ro, vec3 rd, float time )\n{\n    float m = -1.0;\n    float t = 0.00;\n    int i=0;\n    float w = 1e20;\n    for( i=0; i<100; i++ )\n    {\n        float precis = 0.001;\n        vec3 pos = ro + t*rd;        \n\n        vec4 h = map( pos, time );\n        m = h.y;\n        w = min(w, h.w);\n        if( h.x<precis )\n            break;\n            \n        float stepSize = 1.0 / max(1.0, 1.0 + h.z);\n            \n        t += h.x * stepSize;\n        if( t>20.0 )\n            break;\n    } \n    if( t>20.0 ) m=-1.0;\n    return vec3(t, m, w);\n}\n\nvec3 rgb(int r, int g, int b) {\n    return vec3(r,g,b) / 255.;\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    float time = iTime/4.;\n\n    vec3 col = vec3(0);\n    vec3 res = vec3(0);\n    \n    for(float aax=0.; aax < AA; aax++)\n    for(float aay=0.; aay < AA; aay++)\n    {\n        vec2 p = (2.*(U + vec2(aax, aay) / AA)-R)/R.y;\n        \n        vec3 ta = vec3(0,0,0);\n        vec3 ro = vec3(0, 1.0 + (-sin(time) * .5 + .5), -1);\n        ro.xz *= rot(time);\n        \n        vec3 ww = normalize( ta-ro );\n        vec3 uu = normalize( cross(ww, vec3(0,1,0)) );\n        vec3 vv = normalize( cross(uu,ww) );\n\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.8*ww );\n \n        vec3 col = vec3(0.0);\n\n        vec3 tm = castRay(ro, rd, time); \n        \n        #if 1\n        vec3 starGlowColor = rgb(252, 120, 49);\n        vec3 starColor1 = rgb(254, 235, 164);\n        vec3 starColor2 = rgb(158, 40, 0);\n        #else\n        vec3 starGlowColor = rgb(61, 181, 255);\n        vec3 starColor1 = rgb(124, 191, 254);\n        vec3 starColor2 = rgb(0, 90, 173);\n        #endif\n\n        if( tm.x < 20. )\n        {\n            float t = tm.x;\n            float id = tm.y;\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos, time);\n            \n            vec3 mate = vec3(0.6); \n            \n            if(id < 0.5) { // sphere\n                \n            \tmate = vec3(.8); \n                \n                //calculate uv coordinates for the sphere:\n                // https://en.wikipedia.org/wiki/UV_mapping\n                \n                // posn is the normalized vector from P to the sphere center\n                // which in this example is at (0, 0, 0).\n                vec3 posn = normalize(pos);\n                float u = 0.5 + atan(posn.z, posn.x) / (2.*3.1415);\n                float v = 0.5 - asin(posn.y) / 3.1415;\n                \n                // trick from Fabrice to avoid the discontinuity at Greenwich.\n                vec2 uv = vec2(u,v),\n                     df = fwidth(uv);\n               \tif(df.x > 0.5) df.x = 0.;\n                \n                mate = 4.0 * starGlowColor * exp(-30.0 * tm.z);\n                \n                float r = textureLod(iChannel0, uv, log2(max(df.x, df.y)*1024.)).r;\n                \n                mate *= mix(starColor1, starColor2, r);\n                \n                \n                \n                \n                // reuse mate \n                //nor += 0.05*length(mate);\n                 \n            }\n            else if(id < 1.5) { // floor\n                \n            \tmate = vec3(0.02);   \n                float s = 12.;\n                float w = 0.05;\n                \n                if(fract(pos.x*s) < w) {\n                \tmate = vec3(.3);    \n                }\n                \n                if(fract(pos.z*s) < w) {\n                \tmate = vec3(.3);    \n                }\n                \n                mate += 1.5 * starGlowColor * exp(-8.0 * tm.z);\n                mate += 2.0 * starGlowColor * exp(-15.0 * tm.z);\n                mate += 0.5 * starGlowColor * exp(-30.0 * tm.z);\n                mate += 0.25 * starGlowColor * exp(-60.0 * tm.z);\n                \n                //mate = dot(nor, normalize(vec3(1,1,1))) * vec3(1.0);\n            }\n            \n            \n\n            vec3  light1 = vec3( 0, 1, 1 );\n            vec3  light2 = vec3( 1, 3, 1 );\n\n            float key = clamp( 1.0, 0.0, 1.0 );\n            float bac = clamp( 0.2 + 0.8*dot( light2, nor ), 0.0, 1.0 );\n            float amb = (0.7+0.3*nor.y);\n            float shadow = 1.0;// clamp(castShadow(pos + nor*.1, light1 - pos, time), 0., 1.);\n\n            vec3 brdf  = 1.0*vec3(0.40,0.40,0.40)*amb*shadow;\n            brdf += 1.0*vec3(1.00,1.00,1.00)*key*shadow;\n            brdf += 1.0*vec3(0.40,0.40,0.40)*bac;\n\n            col = mate * brdf * exp(-0.6*t);\n        }\n        \n        // col = vec3(tm.x / 20.);\n\n        res += clamp(col, 0.0, 1.0);\n    }\n    \n    \n    col = pow( res/(AA*AA), vec3(0.4545) );\n    \n    vec2 uv = U / R.xy;\n    uv *= 1.0 - uv.yx;\n    float v = pow(uv.x * uv.y * 10.0, 0.25);\n    col *= v;\n    \n    O = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}