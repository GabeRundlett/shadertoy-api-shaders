{
    "Shader": {
        "info": {
            "date": "1591294959",
            "description": "In the wake of Char Stiles's workshop â™¥ ",
            "flags": 0,
            "hasliked": 0,
            "id": "Wlsczr",
            "likes": 3,
            "name": "When the ocean is marching rays",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "postviolet",
            "viewed": 293
        },
        "renderpass": [
            {
                "code": "vec3 pMod3(inout vec3 p, vec3 size) {\n\tvec3 c = floor((p + size * 0.5)/size);\n\tp = mod (p + size * 0.5, size) - size * 0.5;\n\treturn c;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nconst int steps = 250;\nconst float smallNumber = 0.00001;\nconst float maxDist = 10.;\n\nfloat scene(vec3 position){    \n    \n    vec3 st = position;\n    pMod3 (st, vec3 (0.364, 4.2, 0.));\n    \n    float ground = st.y + sin(position.x*8. * abs(sin(iTime/15.)))/9. \n                              + cos(position.z*10. * fract (iTime/5.)) / 10. + 1.5 ;\n    \n    float shar1 = sdSphere (vec3(position.x-0.844, position.y-1.036, position.z+1.788), -0.800 );\n\n    return opSmoothUnion(shar1, ground*ground, 3.);\n}\n\nvec4 trace (vec3 origin, vec3 direction){\n    \n    float dist = 0.;\n    float totalDistance = 0.;\n    vec3 positionOnRay = origin;\n    \n    for(int i = 0 ; i < steps; i++){\n        \n        dist = scene(positionOnRay);\n\n        positionOnRay += dist * direction;\n\n        totalDistance += dist;\n\n        if (dist < smallNumber){\n\n            return 1.000 - (vec4(totalDistance) / maxDist);\n        }\n        \n        if (totalDistance > maxDist){\n \n            return vec4(0);\n        }\n    }\n    \n    return vec4(0.890+sin(iTime),0.583+sin(iTime),0.540,1.000);\n}\n \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord.xy/iResolution.xy;\n  uv += -0.5;\n  uv *= 2.;\n\n  vec3 camOrigin = vec3(0., 0., -2.);\n  vec3 rayOrigin = vec3(uv + camOrigin.xy, camOrigin.z + 1.);\n  vec3 dir = camOrigin + rayOrigin;\n\n  vec4 color = vec4(trace(rayOrigin, dir));\n  fragColor = color;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}