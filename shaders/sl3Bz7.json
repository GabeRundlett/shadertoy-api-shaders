{
    "Shader": {
        "info": {
            "date": "1662817730",
            "description": "CC0: Saturday Torus II\nI did a B&W torus sometime ago. I revisited it \nand instead for glowing lines.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "sl3Bz7",
            "likes": 38,
            "name": "Saturday Torus III",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 806
        },
        "renderpass": [
            {
                "code": "// CC0: Saturday Torus III\n//  I did a B&W torus sometime ago. I revisited it \n//  and instead for glowing lines.\n\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n#define PERIOD      30.0\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/intersectors\nfloat rayTorus(vec3 ro, vec3 rd, vec2 tor) {\n  float po = 1.0;\n\n  float Ra2 = tor.x*tor.x;\n  float ra2 = tor.y*tor.y;\n\n  float m = dot(ro,ro);\n  float n = dot(ro,rd);\n\n  // bounding sphere\n  {\n    float h = n*n - m + (tor.x+tor.y)*(tor.x+tor.y);\n    if(h<0.0) return -1.0;\n    //float t = -n-sqrt(h); // could use this to compute intersections from ro+t*rd\n  }\n\n  // find quartic equation\n  float k = (m - ra2 - Ra2)/2.0;\n  float k3 = n;\n  float k2 = n*n + Ra2*rd.z*rd.z + k;\n  float k1 = k*n + Ra2*ro.z*rd.z;\n  float k0 = k*k + Ra2*ro.z*ro.z - Ra2*ra2;\n\n  #ifndef TORUS_REDUCE_PRECISION\n  // prevent |c1| from being too close to zero\n  if(abs(k3*(k3*k3 - k2) + k1) < 0.01)\n  {\n    po = -1.0;\n    float tmp=k1; k1=k3; k3=tmp;\n    k0 = 1.0/k0;\n    k1 = k1*k0;\n    k2 = k2*k0;\n    k3 = k3*k0;\n  }\n  #endif\n\n  float c2 = 2.0*k2 - 3.0*k3*k3;\n  float c1 = k3*(k3*k3 - k2) + k1;\n  float c0 = k3*(k3*(-3.0*k3*k3 + 4.0*k2) - 8.0*k1) + 4.0*k0;\n\n\n  c2 /= 3.0;\n  c1 *= 2.0;\n  c0 /= 3.0;\n\n  float Q = c2*c2 + c0;\n  float R = 3.0*c0*c2 - c2*c2*c2 - c1*c1;\n\n  float h = R*R - Q*Q*Q;\n  float z = 0.0;\n  if(h < 0.0) {\n    // 4 intersections\n    float sQ = sqrt(Q);\n    z = 2.0*sQ*cos(acos(R/(sQ*Q)) / 3.0);\n  } else {\n    // 2 intersections\n    float sQ = pow(sqrt(h) + abs(R), 1.0/3.0);\n    z = sign(R)*abs(sQ + Q/sQ);\n  }\n  z = c2 - z;\n\n  float d1 = z   - 3.0*c2;\n  float d2 = z*z - 3.0*c0;\n  if(abs(d1) < 1.0e-4) {\n    if(d2 < 0.0) return -1.0;\n    d2 = sqrt(d2);\n  } else {\n    if(d1 < 0.0) return -1.0;\n    d1 = sqrt(d1/2.0);\n    d2 = c1/d1;\n  }\n\n  //----------------------------------\n\n  float result = 1e20;\n\n  h = d1*d1 - z + d2;\n  if(h > 0.0) {\n    h = sqrt(h);\n    float t1 = -d1 - h - k3; t1 = (po<0.0)?2.0/t1:t1;\n    float t2 = -d1 + h - k3; t2 = (po<0.0)?2.0/t2:t2;\n    if(t1 > 0.0) result=t1;\n    if(t2 > 0.0) result=min(result,t2);\n  }\n\n  h = d1*d1 - z - d2;\n  if(h > 0.0) {\n    h = sqrt(h);\n    float t1 = d1 - h - k3;  t1 = (po<0.0)?2.0/t1:t1;\n    float t2 = d1 + h - k3;  t2 = (po<0.0)?2.0/t2:t2;\n    if(t1 > 0.0) result=min(result,t1);\n    if(t2 > 0.0) result=min(result,t2);\n  }\n\n  return result;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/intersectors\nvec3 torusNormal(vec3 pos, vec2 tor) {\n  return normalize(pos*(dot(pos,pos)- tor.y*tor.y - tor.x*tor.x*vec3(1.0,1.0,-1.0)));\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\nvec3 effect(vec2 p, float ntime, float ptime) {\n  float h0 = hash(ntime + 1.5);\n  float h1 = fract(8677.0*h0);\n  float rn = mod(ntime, 3.0);\n  const float rdd = 2.0;\n  const vec3 ro0 = vec3(0.0, 0.75, -0.2); \n  const vec3 ro1 = vec3(0.0, 0.75, 0.2); \n  const vec3 ro2 = vec3(0.0, 0.5, -0.38); \n  vec3 ro  = ro0;\n  if (rn == 1.0) {\n    ro = ro1;\n  } else if (rn == 2.0) {\n    ro = ro2;\n  }\n  \n  const vec3 la  = vec3(0.0, 0.0, 0.2);\n  const vec3 up  = normalize(vec3(0.3, 0.0, 1.0));\n  vec3 lp1 = ro;\n  lp1.xy  *= ROT(0.85);\n  lp1.xz  *= ROT(-0.5);\n\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross(up, ww));\n  vec3 vv = (cross(ww,uu));\n  vec3 rd = normalize(p.x*uu + p.y*vv + rdd*ww);\n\n  const vec2 tor = 0.55*vec2(1.0, 0.75);\n  float td    = rayTorus(ro, rd, tor);\n  vec3  tpos  = ro + rd*td;\n  vec3  tnor  = -torusNormal(tpos, tor);\n  vec3  tref  = reflect(rd, tnor);\n\n  vec3  ldif1 = lp1 - tpos;\n  float ldd1  = dot(ldif1, ldif1);\n  float ldl1  = sqrt(ldd1);\n  vec3  ld1   = normalize(ldif1);\n  vec3  sro   = tpos+0.05*tnor;\n  float sd    = rayTorus(sro, ld1, tor);\n  vec3  spos  = sro+ld1*sd;\n  vec3  snor  = -torusNormal(spos, tor);\n\n  float dif1  = max(dot(tnor, ld1), 0.0);\n  float spe1  = pow(max(dot(tref, ld1), 0.0), 10.0);\n  float r     = length(tpos.xy);\n\n  float a     = atan(tpos.y, tpos.x);\n  float tw    = 1.0*PI*tpos.z/(r+0.5*abs(tpos.z));\n  float aa    = ptime*TAU/45.0;\n  a -= tw+aa;\n\n  float n = floor(mix(1.0, 7.0, h0));\n  vec2 pg = vec2(a, tpos.z-TIME*0.1);\n  vec2 ng = mod2(pg, vec2(TAU/n, 0.5));\n  float dg0 = max(abs(pg.x)-0.01, 0.001);\n  float dg1 = 0.5*max(length(pg)-0.01, 0.001);\n  float dg = h1 < 0.5 ? dg0 : dg1;\n\n  vec3 gcol = hsv2rgb(vec3(fract(0.1*ptime+0.125*ng.x*tpos.y), 0.75, 1.0-0.5));\n  const vec3 lcol = HSV2RGB(vec3(0.55, 0.9, 0.75));\n  \n  float fre = 1.0+dot(rd, tnor);\n  fre *= fre;\n\n  vec3 col = vec3(0.0);\n\n  vec3 mat = 0.125*lcol*dif1+4.0*sqrt(lcol)*spe1*fre; \n  if (td > -1.0) {\n    col += mat;\n  }\n  \n  float shade = mix(1.0, 0.1, pow(abs(dot(ld1, snor)), 3.0*tanh_approx(sd))); \n  if (sd < ldl1) {\n    col *= shade;\n  }\n\n  vec3 glow = 0.0125*gcol/(dg)*smoothstep(1.0, 0.8, fre); \n  if (td > -1.0) {\n    col += glow;\n  }\n\n  return col;\n}\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float ptime = mod(TIME, PERIOD);\n  float ntime = floor(TIME/PERIOD);\n  vec3 col = effect(p, ntime, ptime);\n  col = aces_approx(col);\n  col *= smoothstep(0.0, 2.0, ptime);\n  col *= smoothstep(PERIOD, PERIOD-2.0, ptime);\n  col = sRGB(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}