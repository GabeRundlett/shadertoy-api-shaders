{
    "Shader": {
        "info": {
            "date": "1471314035",
            "description": " A material design styled pattern thing with faked shadows.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "XsySWc",
            "likes": 18,
            "name": "Material Design Pattern",
            "published": 3,
            "tags": [
                "shadow",
                "light",
                "pattern",
                "material"
            ],
            "usePreview": 0,
            "username": "Flyguy",
            "viewed": 994
        },
        "renderpass": [
            {
                "code": "//----- Definitions -----\n//#define FAKE_POINT_LIGHT\n\n#define TEXTURE_OVERLAY\n#define TEXTURE_OPACITY 0.16\n#define TEXTURE_BLUR 0.5\n\n#define TILE_SIZE 0.25\n\n//Colors from https://material.google.com/style/color.html\n#define TILE0_BG 0x8BC34A\n#define TILE0_BG_S 0x558B2F\n#define TILE0_CIRC 0xF44336\n\n#define TILE1_BG 0x0D47A1\n#define TILE1_BG_S 0x1E88E5\n#define TILE1_CIRC 0xE65100\n#define TILE1_CIRC_S 0xFF9800\n\n//Alpha mask from distance field.\n#define DFMASK(a) smoothstep(aaSize, 0.0, (a))\n\n//----- Globals -----\nvec2 aspect = vec2(0);\nvec2 uv = vec2(0);\nvec2 mouse = vec2(0);\nfloat aaSize = 0.0;\nvec2 tIdx = vec2(0);\nvec2 tUV = vec2(0);\n\n//----- Utilities -----\n//Hex color code (0xRRGGBB) to vec3.\nvec3 Hex(int hex)\n{\n    return mod(floor(float(hex) / exp2(vec3(16, 8, 0))), 256.0) / 255.0;\n}\n\n//Average of vec3 components.\nfloat Average(vec3 c)\n{\n    return (c.r + c.g + c.b)/3.0;\n}\n\n//----- Shapes -----\nvec4 Background(vec3 col)\n{\n\treturn vec4(col, 1);   \n}\n\nvec4 Circle(vec2 pos, float r, vec3 col)\n{\n    float mask = DFMASK(length(tUV - pos) - r);\n    return vec4(col, mask);\n}\n\nvec4 Line(vec2 start, vec2 end, float r, vec3 col)\n{\n\tvec2 line = end - start;\n\tfloat frac = dot(tUV - start,line) / dot(line,line);\n    float mask = DFMASK(distance(start + line * clamp(frac, 0.0, 1.0), tUV) - r);\n\treturn vec4(col, mask);\n}\n\nvec4 Box(vec2 pos, float r, vec3 col)\n{\n    vec2 p = abs(tUV - pos);\n    float mask = DFMASK(max(p.x,p.y) - r);\n    return vec4(col, mask); \n}\n\n//----- Operations -----\n//Blend a into b using a's alpha.\nvec4 Blend(vec4 a, vec4 b)\n{\n    return mix(b, a, a.w);\n}\n\n//Mask a's alpha with msk's alpha.\nvec4 Mask(vec4 a, vec4 msk, bool inv)\n{\n    return vec4(a.rgb, a.w * (inv ? 1.0-msk.w : msk.w));\n}\n\n//----- Rendering -----\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Setup globals\n    aspect = iResolution.xy / iResolution.y;\n\tuv = fragCoord.xy / iResolution.y - aspect/2.0;\n    aaSize = 1.0 / iResolution.y / TILE_SIZE;\n    mouse = (iMouse.xy / iResolution.y) - aspect/2.0;\n    \n    vec2 tileIdx = floor(uv / TILE_SIZE);\n    tUV = fract(uv / TILE_SIZE) - 0.5;\n    \n    vec4 color = vec4(0, 0, 0, 1);\n    \n    vec4 tile = vec4(0);\n    \n    //Shadow direction/size.\n    float ang = 0.3 * iTime;\n    vec2 shadvec = 0.12 * vec2(cos(ang), sin(ang));\n    \n    #ifdef FAKE_POINT_LIGHT\n    shadvec = normalize(vec3(uv - mouse, 2.0)).xy;\n    #endif\n    \n    //Checker board pattern.\n    if(mod(tileIdx.x + tileIdx.y, 2.0) == 1.0)\n    {\n        //Tile 0\n        \n        tile = Background(Hex(TILE0_BG));\n        vec4 shad = Line(vec2(0),shadvec,0.25, Hex(TILE0_BG_S));\n        vec4 circ = Circle(vec2(0), 0.25, Hex(TILE0_CIRC));\n\t\t\n        tile = Blend(shad, tile);\n        tile = Blend(circ, tile);\n    }\n    else\n    {\n        //Tile 1\n        \n        tile = Background(Hex(TILE1_BG));\n        vec4 ligt = Box(shadvec,0.5, Hex(TILE1_BG_S));\n        vec4 shad = Circle(vec2(0), 0.25, Hex(TILE1_CIRC));\n        vec4 circ = Circle(shadvec, 0.25, Hex(TILE1_CIRC_S));\n        circ = Mask(circ, shad, false);\n\t\t\n        tile = Blend(ligt, tile);\n        tile = Blend(shad, tile);\n        tile = Blend(circ, tile);\n    }\n    \n    color = tile;\n    \n    //Subtle overlay texture.\n    #ifdef TEXTURE_OVERLAY\n    vec2 texUV = uv * (iResolution.y / iChannelResolution[0].y);\n    color *= Average(texture(iChannel0, texUV, TEXTURE_BLUR).rgb) * TEXTURE_OPACITY + (1.0 - TEXTURE_OPACITY);\n    #endif\n    \n\tfragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}