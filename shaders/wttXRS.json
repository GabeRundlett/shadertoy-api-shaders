{
    "Shader": {
        "info": {
            "date": "1581251136",
            "description": "KIFS with glow.",
            "flags": 0,
            "hasliked": 0,
            "id": "wttXRS",
            "likes": 2,
            "name": "KIFS experiments 8",
            "published": 3,
            "tags": [
                "raymarching",
                "glow",
                "kifs"
            ],
            "usePreview": 0,
            "username": "rodgzilla",
            "viewed": 379
        },
        "renderpass": [
            {
                "code": "#define time iTime\n#define ZPOS -30.\n\nfloat PI = acos(-1.);\n\nvec3 palette(float x) {\n    vec3 a = vec3(.81, .16, .53);\n    vec3 b = vec3(.3, .5, .7);\n    vec3 c = vec3(1., 1., 1.);\n    vec3 d = vec3(0., 0., 1.);\n\n\treturn a + b * sin(2. * PI * (c + x * d)); \n}\n\nmat2 rot2d(float a) {\n    float c = cos(a), s = sin(a);\n    \n    return mat2(c, s, -s, c);\n}\n\nvec3 kifs(vec3 p, float tf1, float tf2, float s, float r) {\n    float tr1 = floor(time) + smoothstep(0., .5, fract(time));\n\tfloat tr2 = floor(time) + smoothstep(.5, 1., fract(time));\n    for (float i = 0.; i < 6.; i++) {\n        p.xy *= rot2d(tf1 * tr1);\n        p.yz *= rot2d(tf2 * tr2 - i);\n        p = abs(p);\n        p -= s;\n        s *= r;\n    }\n    \n    return p;\n}\n\nfloat sphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat cylinder(vec3 p, vec3 c) {\n\treturn length(p.xy - c.xy) - c.z;   \n}\n\nfloat at = 0.;\nfloat map(vec3 p) {\n    float d = 500.;\n    \n    vec3 pk = kifs(p, .5, .3, 3. + sin(2. * time), .7);\n    float obj = max(\n        cylinder(pk, vec3(.1, .05, .1)),\n        sphere(p, 12.)\n    );\n  \td = min(d, obj);\n\tat += .1 / (.2 + abs(d));\n//  \tat += .01 * abs(d);\n        \n    return d;\n}\n\nvec3 glow = vec3(0);\nfloat rm(vec3 ro, vec3 rd) {\n    float d = 0.;\n    \n    for (int i = 0; i < 100; i++) {\n        vec3 p = ro + d * rd;\n        float ds = map(p);\n        \n        if (ds < .01 || ds > 100.) {\n            break;\n        }\n        \n        glow += 0.01 * at * vec3(.3, 0, 0);\n        d += ds;\n    }\n    \n    return d;\n}\n\nvec3 normal(vec3 p) {\n    vec2 e = vec2(0.01, 0);\n    \n    vec3 n = normalize(map(p) - vec3(\n        map(p - e.xyy),\n        map(p - e.yxy),\n        map(p - e.yyx)\n\t));\n\n    return n;\n}\n\nfloat light(vec3 p) {\n    vec3 lp = vec3(2, 2, ZPOS);\n    vec3 tl = lp - p;\n    vec3 tln = normalize(tl);\n    vec3 n = normal(p);\n    float dif = dot(n, tln);\n    float d = rm(p + .01 * n, tln);\n    \n    if (d < length(tl)) {\n     \tdif *= .1;   \n    }\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\tvec3 col = vec3(0);\n    vec3 ro = vec3(0, 0, ZPOS);\n    vec3 rd = normalize(vec3(uv, 1.));\n    float d = rm(ro, rd);\n    vec3 p = ro + d * rd;\n    float dif = light(p);\n    \n    col = .2 * dif + glow;\n//\tcol = dif * vec3(palette(p.z / 5.));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}