{
    "Shader": {
        "info": {
            "date": "1553792496",
            "description": "orbit-trap experiments.\nmouse the lower-left to restore auto-pilot.\nturn AA down to 1 if it's too slow.\nor turn down MAX_ITERS.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WdBSDD",
            "likes": 10,
            "name": "orbit traps 1",
            "published": 3,
            "tags": [
                "mandelbrot",
                "orbittrap",
                "orbit",
                "trap"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 625
        },
        "renderpass": [
            {
                "code": "// experimenting w/ orbit traps.\n// mouse the lower-left to restore auto-pilot.\n// turn AA down to 1 if it's too slow.\n// or turn down MAX_ITERS.\n\n#define AA         2.0\n#define MAX_ITERS 16.0\n\n// from https://gist.github.com/NiklasRosenstein/ee1f1b5786f94e17995361c63dafeb3f\nvec2 cmpxmul(in vec2 a, in vec2 b) {\n\treturn vec2(a.x * b.x - a.y * b.y, a.y * b.x + a.x * b.y);\n}\n\nmat2 Rot2(in float rads) {\n    float s = sin(rads);\n    float c = cos(rads);\n    return mat2(c, s, -s, c);\n}\n\nfloat myTime;\nvec2  MS;\n\nvoid mainImage( out vec4 fragColor, in vec2 XYZW )\n{\n    // funky offset to get a pretty thumbnail\n    myTime = (iTime - 5.0) / 3.14159;\n    \n    vec2 UV  = (XYZW.xy - iResolution.xy * 0.5) / iResolution.y * 2.0;\n    vec2 MS  = (iMouse.xy - iResolution.xy * 0.5) / iResolution.y * 2.0;\n\n    vec3 RGB = vec3(0.0);\n    \n    mat2 otRot1 = Rot2(myTime);\n    vec2 otp;\n    if (dot(iMouse.xy, vec2(1.0)) > 100.0) {\n        otp = -MS;\n    }\n    else {\n        otp = vec2(cos(myTime) * 1.0, 0.4 * sin(myTime * 1.13));\n    }\n\n    float dilation = (cos(myTime * 0.21) * -0.5 + 0.5) * .1;\n    float mix1 = cos(myTime * 0.87) * -0.5 + 0.5;\n    float mix2 = cos(myTime * 0.31) * -0.5 + 0.5;\n    float mix3 = cos(myTime * 0.23) * -0.5 + 0.5;\n    \n    const float AAR = (AA - 1.0) / 2.0;\n    for (float aax = -AAR; aax <= AAR; aax += 1.0) {\n    for (float aay = -AAR; aay <= AAR; aay += 1.0) {\n        vec2 c   = UV + 0.5 * vec2(aax, aay) / iResolution.xy;\n\n        c += otp;\n\n        float accum = 1e20;\n        vec2  vAcc  = vec2(0.0);\n        vec2  z     = vec2(0.0);\n\n\n        // looks good with relatively few iterations.\n        for (float n = 0.0; n < MAX_ITERS; n += 1.0) {\n\n            // basic mandelbrot\n            z =  cmpxmul(z, z);\n            z += c;\n\n            // offset z by center of orbit trap\n            vec2 otz = z - otp;\n\n            // rotate trap\n            otz *= otRot1;\n\n            float d1 = otz.x;\n            float d2 = length(otz);\n            float d  = mix(d2, d1, mix1);\n\n            // dilate trap\n            d = abs(d - dilation);\n\n            // the first two iterations have boringly un-distorted Z.\n            if ((n > 0.0) && (d < accum)) {\n                accum = d;\n                vAcc = z;\n            }\n        }\n\n        float f = accum;\n        f = sqrt(f);\n        f = sqrt(f);\n\n        vec3 rgb = vec3(f);\n        // fract()ing here because video tends to load as clamped,\n        // despite being marked as repeat.\n        vec3 tex = 1.0 * texture(iChannel0, fract(1.0 * (vAcc + 0.5))).rgb;\n        vec3 tx2 = 0.4 * vec3(fract(vAcc * 2.0), length(fract(vAcc / 4.0)));\n        tex = mix(tex, tx2      , mix2);\n        tex = mix(tex, vec3(0.0), mix3);\n        rgb = 1.0 - (1.0 - tex) * f;\n        RGB += rgb;\n\t}\n    }\n    RGB /= AA * AA;\n\n    fragColor = vec4(RGB, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}