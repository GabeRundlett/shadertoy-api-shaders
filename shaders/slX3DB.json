{
    "Shader": {
        "info": {
            "date": "1626409126",
            "description": "From 2021",
            "flags": 0,
            "hasliked": 0,
            "id": "slX3DB",
            "likes": 1,
            "name": "plasma ball v1",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "milkfat",
            "viewed": 113
        },
        "renderpass": [
            {
                "code": "/*\n    Code date: 2021-06-23\n*/\n\n\n#define SCREEN_D -800.0\n#define AMOUNT_OF_PLASMA 15\n\nfloat hash(float n) {\n    float n2 = fract(n*5.18261);\n    return fract(n2*n);\n}\n\nfloat hash(int n) {\n    return hash(float(n));\n}\n\n\nfloat sdist(vec2 p, vec2 l0, vec2 l1) {\n    vec2 v1 = l1 - l0;\n    vec2 v2 = l0 - p;\n    vec2 v3 = vec2(v1.y,-v1.x);\n    return dot(v2,normalize(v3));\n}\n\n\nfloat dist(vec2 p, vec2 l0, vec2 l1) {\n    return abs(sdist(p, l0, l1));\n}\n\n\n\n\nvec2 rotate(vec2 p, float a) {\n    \n    return vec2 (\n        cos(a)*p.x - sin(a)*p.y,\n        sin(a)*p.x + cos(a)*p.y);\n}\n\nvec2 irotate(vec2 p, float a) {\n    return rotate(p, -a);\n}\n\nvec3 closestPoint(vec3 A, vec3 B, vec3 C) {\n    vec3 d = (C - B) / distance(C,B);\n    vec3 v = A - B;\n    float t = dot(v,d);\n    vec3 P = B + t * d;\n    return P;\n}\n\nvec3 iproject(vec3 p)\n{\n\n    \n    p.x -= iResolution.x/2.0;\n    p.y -= iResolution.y/2.0;\n    \n    p.z -= 2000.0;\n    p.x /= iResolution.y/675.0;\n    p.y /= iResolution.y/675.0;\n    \n    p.x *= (SCREEN_D+p.z);\n    p.y *= (SCREEN_D+p.z);\n    \n    p.x /= (SCREEN_D);\n    p.y /= (SCREEN_D);\n    \n    \n    p.z += 2000.0;\n    p.z += 400.0;\n    \n    p.y += sin(iTime*.5)*200.0;\n    p.x += cos(iTime*.35)*200.0;\n    p.z += cos(iTime*.4)*300.0;\n    p.yz = irotate(p.yz, sin(iTime*.3)*.04);\n    p.xz = irotate(p.xz, cos(iTime*.3)*.02);\n    p.yx = irotate(p.yx, cos(iTime*.5)*.02);\n    \n    p.yz =  irotate(p.yz,- 2.3+2.7+6.28*sin((iMouse.y)/iResolution.y));\n    p.xz =  irotate(p.xz, 4.1+6.28*sin((iMouse.x)/iResolution.x));\n    return p;\n    \n}\n\nvec4 calcLight(vec3 p, vec3 ps) {\n    float wx = max((5000.0 - p.x)/ps.x,(-5000.0 - p.x)/ps.x);\n    float wy = max((5000.0 - p.y)/ps.y,(-5000.0 - p.y)/ps.y);\n    float wz = max((5000.0 - p.z)/ps.z,(-5000.0 - p.z)/ps.z);\n    float w = min(min(wx,wy),wz);\n    p += ps*w;\n    vec3 light = vec3(500,3000,2000);\n    vec3 l = light-p;\n    float ll = length(l);\n    l = normalize(l);\n    //box norm X\n    if(abs(p.x) > max(abs(p.y),abs(p.z))) {\n        vec3 norm = vec3(-p.x/abs(p.x),0,0);\n        norm.x += (texture(iChannel0,.4*p.yz/iResolution.xy).b - texture(iChannel0,.4*vec2(p.y+.1,p.z)/iResolution.xy).b)*50.0;\n        norm.y += (texture(iChannel0,.4*p.yz/iResolution.xy).b - texture(iChannel0,.4*vec2(p.y,p.z+.1)/iResolution.xy).b)*50.0;\n        float bri = 2.0*dot(l,norm) / (ll*ll*.0000005);\n        return clamp(texture(iChannel0,.4*p.zy/iResolution.xy)*bri,0.0,1.0);\n    //box norm Y\n    } else if (abs(p.y) > max(abs(p.x),abs(p.z))) {\n        vec3 norm = vec3(0,-p.y/abs(p.y),0);\n        norm.x += (texture(iChannel0,.4*p.xz/iResolution.xy).b - texture(iChannel0,.4*vec2(p.x+.1,p.z)/iResolution.xy).b)*50.0;\n        norm.y += (texture(iChannel0,.4*p.xz/iResolution.xy).b - texture(iChannel0,.4*vec2(p.x,p.z+.1)/iResolution.xy).b)*50.0;\n        float bri = 2.0*dot(l,norm) / (ll*ll*.0000005);\n        return clamp(texture(iChannel0,.4*p.xz/iResolution.xy)*bri,0.0,1.0);\n    //box norm Z\n    } else {\n        vec3 norm = vec3(0,0,-p.z/abs(p.z));\n        norm.x += (texture(iChannel0,.4*p.xy/iResolution.xy).b - texture(iChannel0,.4*vec2(p.x+.1,p.y)/iResolution.xy).b)*50.0;\n        norm.y += (texture(iChannel0,.4*p.xy/iResolution.xy).b - texture(iChannel0,.4*vec2(p.x,p.y+.1)/iResolution.xy).b)*50.0;\n        float bri = 2.0*dot(l,norm) / (ll*ll*.0000005);\n        return clamp(texture(iChannel0,.4*p.xy/iResolution.xy)*bri,0.0,1.0);\n    }\n}\nfloat rmod(vec3 cp) {\n    float asdf = sin(atan(cp.y,cp.z)*36.0);\n    float asdf2 = sin(atan(cp.x,cp.z)*36.0);\n    return (asdf+asdf2)*3.0;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float spec = 0.0;\n    vec2 coord = fragCoord-.5;\n    //coord = rotate(coord, sin(coord.x*.01)*.1);\n    vec3 p = iproject(vec3(coord, 800));\n    vec3 p2 = iproject(vec3(coord, -1000));\n    vec3 ps = normalize(p2-p);\n    float old_d = length(p);\n    vec3 pg = vec3(0,0,0); //glass reflection\n    vec3 psg = vec3(0,0,0);\n    bool glass_reflect = false;\n    \n    vec3 pg2 = vec3(0,0,0); //glass reflection\n    vec3 psg2 = vec3(0,0,0);\n    bool glass_reflect2 = false;\n    \n        //glass sphere\n    vec3 cp = closestPoint(vec3(0,0,0), p, p2);\n    \n    if( length(cp) > 800.0 && old_d > 800.0) {} else\n    {\n        float A = length(cp);\n        float C = 800.0;\n        float B = sqrt(C*C-A*A);\n        p = cp - ps*B;\n        //p+=rmod(normalize(p));\n        spec += dot(reflect(ps, normalize(p)), normalize(vec3(500,8000,2000)));\n        pg = p;\n        glass_reflect = true;\n        psg = reflect(ps,normalize(p));\n        ps = refract(ps, normalize(p), 1.0/1.52);\n        p+=ps*10.0;\n        ps = refract(ps, normalize(p), 1.52/1.0);\n    }\n    \n    \n    bool glass_out = false;\n    \n    \n    float val = 0.0;\n    float r = sin(iTime)*700.0;\n    //cast rays\n    for (int i = 0; i <60; i++) {\n        float d = length(p);\n        \n        //glass sphere\n        if(!glass_out && d > 800.0 && old_d < 800.0) {\n            vec3 cp = closestPoint(vec3(0,0,0), p, p+ps);\n            float A = length(cp);\n            float C = 800.0;\n            float B = -sqrt(C*C-A*A);\n            p = cp - ps*B; \n        //p+=rmod(normalize(p));\n        pg2 = p;\n        glass_reflect2 = true;\n        psg2 = reflect(ps,normalize(-p));\n            d=length(p);\n            ps = refract(ps, normalize(-p), 1.0/1.52);\n            p+=ps*10.0;\n            ps = refract(ps, normalize(-p), 1.52/1.03); \n            glass_out = true;\n            //i=50;\n            break;\n        }\n    \n        \n        float dist = 100.0;\n        //check ray against plasma\n        for (int j = 0; j < AMOUNT_OF_PLASMA; j++) {\n        \n            float more = clamp(100.0 - (800.0 - d), 0.0, 100.0);\n            more /= 100.0;\n            more *= more;\n            more *= more;\n            more *= 50.0;\n            \n            vec3 lps = vec3(0,1,0);\n            float h = hash(j);\n            float time = iTime+float(j)*100.0;\n            //float h2 = fract(h*8.1731);\n            lps.xy = rotate(lps.xy,(h-.5)*6.28*time*.087+cos((d+more)/150.0-h*time*3.5)*.15);\n            lps.yz = rotate(lps.yz,(h-.5)*6.28*time*.14+cos((d+more)/150.0-h*time*2.0)*.15);\n\n            lps = normalize(lps);\n            vec3 a1 = d*lps;\n            if(d <= 801.0) {\n                dist = min(dist,distance(p,a1));\n                float v = clamp((35.0+more)-distance(p,a1), 0.0, 35.0);\n                v += clamp(5.0 - (d - 60.0),0.0,20.0)*.05;\n                //v+= v*clamp(100.0 - (800.0 - d), 0.0, 100.0)*.05;\n                if(d < 100.0) v -= v*(100.0-d)/100.0;\n                val += v;\n            } else {\n                break;\n            }\n        }\n        old_d = d;\n        if(d < 50.0) { //small sphere in the middle\n            ps = vec3(0,0,0);\n            break;\n        }\n        p+=ps*max(min(dist*.5,clamp(808.0-d,0.0,1000.0)),5.0);\n    }\n    \n    //val += clamp(50.0-distance(p,vec3(0,0,0)), 0.0, 50.0)*100.0;\n    val /= 85.0;\n    vec3 col = vec3((val-1.0)*.5,(val-2.0)*.15,val);\n    col = clamp(col, 0.0, 1.0);\n    \n    \n  \n    fragColor = calcLight(p,ps)*vec4(1,.8,.7,1);\n    if(glass_reflect) fragColor += calcLight(pg,psg)*.3*vec4(1,.8,.7,1); //outer reflection\n    if(glass_reflect2) fragColor += calcLight(pg2,psg2)*.1*vec4(1,.8,.7,1); //inner reflection\n \n    p.x+=iTime*100.0;\n    fragColor += vec4(col,1.0);\n    spec=clamp(spec,0.0,1.0);\n    spec*=spec;\n    spec*=spec;\n    spec*=spec;\n    spec*=spec;\n    spec*=spec;\n    spec*=spec;\n    spec*=spec;\n    spec*=spec;\n    fragColor += spec*vec4(1,.8,.7,1);\n    fragColor.rgb = pow(fragColor.rgb, vec3(1.0/2.2));\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}