{
    "Shader": {
        "info": {
            "date": "1501341303",
            "description": "Graphical proof of Pythagore theorem a²+b²=c² . \nNB: mouse controls triangle shape.",
            "flags": 0,
            "hasliked": 0,
            "id": "XsSfR3",
            "likes": 17,
            "name": "[SH17C] Pythagore theorem proof",
            "published": 3,
            "tags": [
                "math",
                "geometry",
                "proof"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 843
        },
        "renderpass": [
            {
                "code": "float A = .3, B=.6; // default triangle proportion. Overhided by mouse.\n\n// --- shape utilities --------------------------------------------------------\n#define S(v) smoothstep( 0., 1., v )\n\nfloat line( vec2 p, vec2 a, vec2 b, float r) { // draw line a-b width r\n    p -= a; b -= a;\n    float d = length( p - b * clamp(dot(p,b)/dot(b,b), 0., 1. ));\n    return  1.- S(  d/r);\n}\n\nfloat halfplane( vec2 p, vec2 a, vec2 b) {\n    p -= a; b -= a; b = normalize(b);\n    return b.x*p.y - b.y*p.x;\n}\n\nfloat tri( vec2 p, vec2 a, vec2 b, vec2 c, float r) {\n    float d = min( min( halfplane(p, a,b), halfplane(p, b,c)), halfplane(p, c,a));\n // return S( d/r );      // minus border \n    return 1.- S( -d/r ); // plus border\n}\nfloat quad( vec2 p, vec2 a, vec2 b, float r) {\n    float d = min( min( p.x-a.x, b.x-p.x), min(p.y-a.y, b.y-p.y) );\n    return S( d/r );\n}\n\n// --- fonts utilities --------------------------------------------------------\nvec4 char(vec2 p, int c) { // char texture of ascii code c . From https://www.shadertoy.com/view/llySRh\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,0);\n\treturn textureGrad( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx(p/16.),dFdy(p/16.) );\n}\nint CAPS=0;\n#define low CAPS=32\n#define caps CAPS=0\n#define C(c) char(V,64+CAPS+c).x\n#define N(c) char(V,48+c).x\n\n\n\n// --- Pythagore theorem graphical proof --------------------------------------\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy, V;\n    float w = 2./R.y, C=0., s, t = mod(iTime, 26.);\n    bool slide_tri = false, label_a2 = false, label_b2 = false, label_c2 = false;\n    U -= (R-R.y)/2.;\n\tU = -.1 + 1.2* U/R.y;\n  //A += .01*cos(20.*t), B += .01*sin(20.*t);\n    if (length(iMouse.xy)>10.) A = iMouse.x/R.x, B = 1.-iMouse.y/R.y;\n    O -= O; low;\n    \n    // main triangle\n    C =   line (U, vec2(0,1),vec2(A,1)   , w)\n        + line (U, vec2(0,1),vec2(0,1.-B), w)\n        + line (U, vec2(A,1),vec2(0,1.-B), w);\n    V = ( U - vec2(A/2.,1.)     ) * 12. +vec2(.5,0);  C += C(1); // labels a,b,c\n    V = ( U - vec2(0,1.-B/2.)   ) * 12. +vec2( 1,0);  C += C(2);\n    V = ( U - vec2(A/2.,1.-B/2.)) * 12. +vec2( 0,.5); C += C(3);\n    O.ra += C; // blend\n    \n    if (t>3.) { // c^2 square\n        C =   line (U, vec2(A,1),vec2(A+B,1.-A)     , w)\n            + line (U, vec2(0,1.-B),vec2(B,1.-B-A)  , w)\n            + line (U, vec2(B,1.-B-A),vec2(A+B,1.-A), w);\n        label_c2 = t < 10.;\n        O.ba += (1.-O.a) * C; // blend\n    }\n    \n    if (t>5.) { // (a+b)^2 square\n        C =   line (U, vec2(0,1),     vec2(A+B,1)     , w)\n            + line (U, vec2(0,1),     vec2(0,1.-B-A)  , w)\n            + line (U, vec2(0,1.-B-A),vec2(A+B,1.-B-A), w)\n            + line (U, vec2(A+B,1),   vec2(A+B,1.-B-A), w);\n        V = ( U - vec2(A+B/2.,1.)     ) * 12. +vec2(.5,0);  C += C(2); // mirror labels a,b\n        V = ( U - vec2(0,1.-B-A/2.)   ) * 12. +vec2( 1,0);  C += C(1);\n        O.ga += (1.-O.a) * C; // blend\n    }\n                \n    if (t>7.) { // 4 triangles\n        slide_tri = true; \n        s = clamp((t-10.)/2.,0.,1.); // slide triangles from t=10 to 12\n    }\n\n    if (t>9.) { // darken exterior\n        O.a += (1.-O.a) * .7*quad( U, vec2(0,1.-A-B), vec2(A+B,1), -w); // blend\n    }\n    \n    label_b2 = t > 13.;\n    label_a2 = t > 14.;\n    \n    if (t>16.) {\n        slide_tri = true; label_a2 = label_b2 = label_c2 = false;\n        float it = floor(t), ft = fract(t);\n        if (it==16. || it==20.) s = 1.-ft;                   // slide back\n        if (it==17. || it==21.) s = 0., label_c2 = true;\n        if (it==18. || it==22.) s = ft;                      // slide again\n        if (it==19. || it>=23.) s = 1., label_a2 = label_b2 = true;\n    }\n    \n    if (slide_tri) {  // draw triangles sliding\n        C =   tri ( U,               vec2(0,1),      vec2(0,1.-B),   vec2(A,1)        , w ) \n            + tri ( U+ s*vec2(B,-A), vec2(A+B,1.-A), vec2(B,1.-B-A), vec2(A+B,1.-A-B) , w )\n            + tri ( U+ s*vec2(0,B),  vec2(A,1),      vec2(A+B,1.-A), vec2(A+B,1)      , w )\n            + tri ( U+ s*vec2(-A,0), vec2(B,1.-B-A), vec2(0,1.-B),   vec2(0,1.-B-A)   , w );\n        O += (1.-O.a) *C * vec4(.5,.5,.5,1); // blend\n    }\n\n#define draw_label2(P,l) {                         \\\n       vec2 U0 = U-(P);                            \\\n        V = U0 * 12. +vec2(.8,.5); O.ba += C(l);   \\\n        V = U0 * 20. +vec2(.5, 0); O.ba += N(2); }\n    \n    if (label_c2)   // c^2 label\n        draw_label2( vec2(A/2.,1.-B/2.)+.5*vec2(B,-A) , 3);\n\n    if (label_b2)   // a^2 label\n        draw_label2( vec2(A+B/2.,1.-B/2.) , 2 );\n\n    if (label_a2)   // b^2 label\n        draw_label2( vec2(A/2.,1.-B-A/2.), 1);\n    \n    \n    O += (1.-O.a);                       // blend background\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}