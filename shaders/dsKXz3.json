{
    "Shader": {
        "info": {
            "date": "1681498832",
            "description": "i think there are some issues with this implementation but i'm fairly happy with it (not optimized in the slightest)",
            "flags": 32,
            "hasliked": 0,
            "id": "dsKXz3",
            "likes": 1,
            "name": "anisotropic kuwahara filtering",
            "published": 3,
            "tags": [
                "kuwaharafiltering"
            ],
            "usePreview": 0,
            "username": "aaaaaa123456",
            "viewed": 278
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(texture(iChannel1, uv).xyz ,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nconst int kernelSize = 5;\nconst float[kernelSize] kernel = float[kernelSize](0.3829, 0.2417, 0.0606, 0.0060, 0.0002);\n\nmat2 calcSst(float ix, float iy) {\n    return mat2(\n        ix * ix, ix * iy,\n        ix * iy, iy * iy\n    );\n}\n\nvec3 dt(vec2 uv, vec2 t) {\n    return texture(iChannel3, uv - t).xyz - texture(iChannel3, uv + t).xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Get the smooth structure tensor\n    vec3 k = vec3(1.0 / iResolution.x, 1.0 / iResolution.y, 0.0);\n    \n    // Discrete integral of the directional derivatives multiplied by a gaussian weighting function\n    vec3 swx, swy;\n    \n    for (int i = -kernelSize + 1; i < kernelSize; i ++) {\n        float w = kernel[abs(i)];\n        \n        swx += w * dt(uv - k.xz * float(i), k.xz);\n        swy += w * dt(uv - k.zy * float(i), k.zy);\n    }\n    \n    // Structure tensor!\n    mat2 sst = calcSst(swx.x, swy.x) + calcSst(swx.y, swy.y) + calcSst(swx.z, swy.z);\n    \n    // Now we get the anisotropy and orientation of this pixel from the smooth structure tensor\n    // First we get the eigenvalues\n    float mean = (sst[0][0] + sst[1][1]) * 0.5;\n    float p = sqrt(mean * mean - determinant(sst));\n    \n    float a1 = mean + p;\n    float a2 = mean - p;\n    \n    float anisotropy = (a1 - a2) / (a1 + a2);\n    \n    // This is just a guess but the anisotropy seems to be inverted? maybe this means i have a bigger issue\n    anisotropy = max(0.0, 1.0 - anisotropy);\n    \n    // Orientation\n    float ox = 1.0 * sign(a2);\n    float oy = sst[0][1] / (a2 - sst[1][1]);\n    vec2 orientation = normalize(vec2(ox, oy));\n    \n    // Final buffer for the effect\n    fragColor = vec4(orientation.x, orientation.y, anisotropy, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nmat2 R(float theta) {\n    return mat2(\n        cos(theta), -sin(theta),\n        sin(theta), cos(theta)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 pixelSize = 1.0 / iResolution.xy;\n    vec4 ba = texture(iChannel0, uv);\n    \n    // Fetch previously computed values\n    vec2 orientation = ba.xy;\n    float anisotropy = ba.z;\n    \n    float phi = atan(orientation.y / orientation.x);\n    \n    float a = ((alpha + anisotropy) / alpha) * (radius / pixelSize.x);\n    float b = (alpha / (alpha + anisotropy)) * (radius / pixelSize.y);\n    \n    mat2 S = mat2(\n        1.0 / a, 0.0,\n        0.0, 1.0 / b\n    ) * R(-phi);\n    \n    mat2 transform = S * R(-phi);\n    float zeta = 2.0 / radius;\n    float gamma = (2.0 * PI) / float(sectors);\n    float eta = (zeta + cos(gamma)) / (sin(gamma) * sin(gamma));\n    \n    vec4 m[sectors];\n    vec3 s[sectors];\n    \n    for (int i = 0; i < sectors; i ++) {\n        m[i] = vec4(0.0);\n        s[i] = vec3(0.0);\n    }\n    \n    // Get the bounding box\n    for (float dx = -radius; dx <= radius; dx += pixelSize.x) {\n        for (float dy = -radius; dy <= radius; dy += pixelSize.y) {\n            vec3 c = texture(iChannel3, uv + vec2(dx, dy)).rgb;\n            \n            for (int i = 0; i < sectors; ++ i) {\n                vec2 p = vec2(dx, dy) / pixelSize;\n                p *= S * R((-2.0 * PI * float(i)) / float(sectors));\n            \n                float k0 = step(eta * p.y * p.y, p.x) * ((p.x + zeta) - eta * p.y * p.y);\n                // k0 is the weighting for this pixel\n                // Now we add this sector\n                m[i] += vec4(c * k0, k0);\n                s[i] += c * c * k0;\n            }\n        }\n    }\n    \n    // Yippee\n    vec4 o = vec4(0.0);\n    for (int i = 0; i < sectors; i ++) {\n        m[i].rgb /= m[i].w;\n        s[i] = abs(s[i] / m[i].w - m[i].rgb * m[i].rgb);\n        \n        float sigma2 = s[i].r + s[i].g + s[i].b;\n        float w = 1.0 / (1.0 + pow(255.0 * sigma2, 0.5 * q));\n        \n        o += vec4(m[i].rgb * w, w);\n    }\n    \n    fragColor = vec4(o.rgb / o.w, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nconst float alpha = 1.0;\nconst float radius = 0.03;\nconst int sectors = 8;\nconst float q = 15.0;\n\nconst float PI = 3.1415;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}