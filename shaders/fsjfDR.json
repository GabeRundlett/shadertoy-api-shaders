{
    "Shader": {
        "info": {
            "date": "1646016369",
            "description": "rasterizing a obj file",
            "flags": 32,
            "hasliked": 0,
            "id": "fsjfDR",
            "likes": 9,
            "name": "obj rasterizer",
            "published": 3,
            "tags": [
                "rasterizer",
                "gouraud",
                "obj"
            ],
            "usePreview": 0,
            "username": "icantcomeupwithausername",
            "viewed": 465
        },
        "renderpass": [
            {
                "code": "/*\n * common, obj verticies and indices\n * buffer a, camera control\n * buffer b, rendering\n */\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define fov 80.0\n#define clearCol vec3(0.509803922, 0.509803922, 0.717647059);\n\n#define pi acos(-1.0)\n\n/*\n * obj file indices and verticies converted to arrays\n */\n\nconst vec3 verticies[48] = vec3[48](\n\tvec3(-0.547476,-0.550000,0.552480),\n\tvec3(-0.247488,-0.550000,0.551115),\n\tvec3(-0.551115,0.550000,-0.247488),\n\tvec3(-0.548841,0.550000,0.252492),\n\tvec3(0.552479,0.550000,0.547476),\n\tvec3(0.251127,0.550000,0.248853),\n\tvec3(0.547476,0.550000,-0.552480),\n\tvec3(-0.251127,-0.550000,-0.248853),\n\tvec3(0.251127,-0.550000,0.248853),\n\tvec3(0.551115,0.550000,0.247488),\n\tvec3(-0.548841,-0.000000,0.252492),\n\tvec3(-0.251127,0.550000,-0.248853),\n\tvec3(0.548840,0.550000,-0.252492),\n\tvec3(-0.551115,-0.000000,-0.247488),\n\tvec3(-0.547476,-0.000000,0.552480),\n\tvec3(0.552479,-0.000000,0.547476),\n\tvec3(0.252492,-0.000000,0.548840),\n\tvec3(0.552479,-0.550000,0.547476),\n\tvec3(-0.247488,-0.000000,0.551115),\n\tvec3(0.252492,-0.550000,0.548840),\n\tvec3(0.547476,-0.000000,-0.552480),\n\tvec3(0.247488,-0.550000,-0.551115),\n\tvec3(0.547476,-0.550000,-0.552480),\n\tvec3(0.247488,-0.000000,-0.551115),\n\tvec3(-0.248853,0.550000,0.251127),\n\tvec3(-0.248853,-0.000000,0.251127),\n\tvec3(0.248852,0.550000,-0.251127),\n\tvec3(0.252492,0.550000,0.548840),\n\tvec3(0.251127,-0.000000,0.248853),\n\tvec3(-0.252492,0.550000,-0.548840),\n\tvec3(-0.252492,-0.000000,-0.548840),\n\tvec3(0.548840,-0.000000,-0.252492),\n\tvec3(-0.552480,0.550000,-0.547476),\n\tvec3(0.248852,-0.000000,-0.251127),\n\tvec3(-0.252492,-0.550000,-0.548840),\n\tvec3(-0.547476,0.550000,0.552480),\n\tvec3(-0.548841,-0.550000,0.252492),\n\tvec3(-0.551115,-0.550000,-0.247488),\n\tvec3(-0.552480,-0.550000,-0.547476),\n\tvec3(-0.552480,-0.000000,-0.547476),\n\tvec3(0.548840,-0.550000,-0.252492),\n\tvec3(0.551115,-0.000000,0.247488),\n\tvec3(0.551115,-0.550000,0.247488),\n\tvec3(-0.248853,-0.550000,0.251127),\n\tvec3(0.248852,-0.550000,-0.251127),\n\tvec3(-0.247488,0.550000,0.551115),\n\tvec3(0.247488,0.550000,-0.551115),\n\tvec3(-0.251127,-0.000000,-0.248853)\n);\n \nconst ivec3 indicies[96] = ivec3[96](\n\tivec3(45,23,41),\n\tivec3(45,22,23),\n\tivec3(1,44,2),\n\tivec3(1,37,44),\n\tivec3(33,12,30),\n\tivec3(3,12,33),\n\tivec3(4,46,25),\n\tivec3(4,36,46),\n\tivec3(6,5,10),\n\tivec3(28,5,6),\n\tivec3(47,13,7),\n\tivec3(47,27,13),\n\tivec3(35,38,39),\n\tivec3(35,8,38),\n\tivec3(20,43,18),\n\tivec3(20,9,43),\n\tivec3(6,10,34),\n\tivec3(34,10,32),\n\tivec3(26,12,11),\n\tivec3(11,12,3),\n\tivec3(29,43,9),\n\tivec3(42,43,29),\n\tivec3(26,4,25),\n\tivec3(11,4,26),\n\tivec3(34,13,27),\n\tivec3(32,13,34),\n\tivec3(38,48,14),\n\tivec3(38,8,48),\n\tivec3(36,19,46),\n\tivec3(15,19,36),\n\tivec3(17,18,16),\n\tivec3(17,20,18),\n\tivec3(39,31,35),\n\tivec3(40,31,39),\n\tivec3(24,7,21),\n\tivec3(24,47,7),\n\tivec3(15,2,19),\n\tivec3(15,1,2),\n\tivec3(16,28,17),\n\tivec3(16,5,28),\n\tivec3(20,46,19),\n\tivec3(20,17,46),\n\tivec3(21,22,24),\n\tivec3(21,23,22),\n\tivec3(47,35,31),\n\tivec3(47,24,35),\n\tivec3(30,40,33),\n\tivec3(30,31,40),\n\tivec3(9,25,29),\n\tivec3(9,26,25),\n\tivec3(8,27,48),\n\tivec3(8,34,27),\n\tivec3(34,22,45),\n\tivec3(24,22,34),\n\tivec3(29,28,6),\n\tivec3(17,28,29),\n\tivec3(26,2,44),\n\tivec3(19,2,26),\n\tivec3(30,48,31),\n\tivec3(30,12,48),\n\tivec3(5,42,10),\n\tivec3(16,42,5),\n\tivec3(32,23,21),\n\tivec3(32,41,23),\n\tivec3(1,11,37),\n\tivec3(11,1,15),\n\tivec3(14,33,40),\n\tivec3(14,3,33),\n\tivec3(34,35,24),\n\tivec3(8,35,34),\n\tivec3(26,20,19),\n\tivec3(9,20,26),\n\tivec3(15,4,11),\n\tivec3(15,36,4),\n\tivec3(37,3,14),\n\tivec3(3,37,11),\n\tivec3(38,40,39),\n\tivec3(38,14,40),\n\tivec3(21,13,32),\n\tivec3(21,7,13),\n\tivec3(10,41,32),\n\tivec3(41,10,42),\n\tivec3(43,16,18),\n\tivec3(42,16,43),\n\tivec3(48,12,44),\n\tivec3(44,12,26),\n\tivec3(29,6,45),\n\tivec3(45,6,34),\n\tivec3(25,46,29),\n\tivec3(47,48,27),\n\tivec3(29,46,17),\n\tivec3(29,41,42),\n\tivec3(31,48,47),\n\tivec3(48,37,14),\n\tivec3(45,41,29),\n\tivec3(44,37,48)\n);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec3 getRotation(){\n   vec4 r = texelFetch(iChannel0, ivec2(0,0), 0) * 255.0 - 100.0;     \n   return r.xyz;\n}\n\nvec3 getPRotation(){\n   vec4 r = texelFetch(iChannel0, ivec2(0,1), 0) * 255.0 - 100.0;     \n   return r.xyz;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    if(int(fragCoord.x) > 0 || int(fragCoord.y) > 1){\n        discard;\n    }\n\n    if(iFrame > 0){\n        vec3 rot = getRotation();\n        switch(int(fragCoord.y)){\n            case 0:                \n                if(iMouse.z > 0.0){\n                    rot = getPRotation() + vec3((iMouse.xy-abs(iMouse.zw)).yx * 0.8, 0.0);\n                    rot.x = clamp(rot.x, -90.0, 90.0); //prevent camera from flipping\n                }\n\n                fragColor = vec4((rot + 100.0) / 255.0, 1.0);\n            break;\n            \n            case 1:\n                if((iMouse.z > 0.0) == false){\n                    fragColor = vec4((rot + 100.0) / 255.0, 1.0);\n                }else{\n                    fragColor = vec4((getPRotation() + 100.0) / 255.0, 1.0);\n                }\n            break;\n        }\n    }else{\n        switch(int(fragCoord.y)){\n            case 0:\n                fragColor = vec4((vec3(-45.0, -45.0, 0.0) + 100.0) / 255.0, 1.0);\n            break;\n            \n            case 1:\n                fragColor = vec4((vec3(-45.0, -45.0, 0.0) + 100.0) / 255.0, 1.0);\n            break;\n         }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define lightPos vec3(-1.0, 1.7, -1.7)\n#define triColor vec3(0.8)\n\nmat4 perspective(float aspect){\n    float ft = tan(pi*0.5-0.5*radians(fov));\n    float r = 1.0/(0.1-9e20);\n    \n    return mat4(ft/aspect,0.0,0.0,0.0,\n                0.0,ft,0.0,0.0,\n                0.0,0.0,(0.1+9e20)*r,-1.0,\n                0.0,0.0,0.1*9e20*r*2.0,0.0);\n}\n\nmat4 translate(vec3 pos){\n    return mat4(1.0,0.0,0.0,pos.x,\n                0.0,1.0,0.0,-pos.y,\n                0.0,0.0,1.0,pos.z,\n                0.0,0.0,0.0,1.0);\n}\n\nmat4 rotateY(float rotation){\n    rotation = radians(rotation);\n\tfloat ysine = sin(rotation);\n\tfloat ycos = cos(rotation);\n\tfloat yoc = 1.0-ycos;\n\treturn mat4(ycos,0.0,ysine,0.0,\n\t\t\t\t0.0,yoc+ycos,0.0,0.0,\n\t\t\t\t-ysine,0.0,ycos,0.0,\n\t\t\t\t0.0,0.0,0.0,1.0);\n}\n\nmat4 rotateX(float rotation){\n    rotation = radians(rotation);\n\tfloat xsine = sin(rotation);\n\tfloat xcos = cos(rotation);\n\tfloat xoc = 1.0-xcos;\n\treturn mat4(xoc+xcos,0.0,0.0,0.0,\n\t\t\t    0.0,xcos,-xsine,0.0,\n\t\t\t\t0.0,xsine,xcos,0.0,\n\t\t\t\t0.0,0.0,0.0,1.0);\n}\n\nfloat edge(vec2 a, vec3 b, vec2 c){\n    return (c.x-a.x)*(b.y-a.y)-(c.y-a.y)*(b.x-a.x);\n}\n\nvec3 interpolate(vec3 v1,vec3 v2,vec3 v3,vec3 a,vec3 b,vec3 c,vec2 uv){\n    float h = ((v2.y-v3.y)*(v1.x-v3.x)+(v3.x-v2.x)*(v1.y-v3.y));\n    float weight1 = ((v2.y-v3.y)*(uv.x-v3.x)+(v3.x-v2.x)*(uv.y-v3.y))/h;\n    float weight2 = ((v3.y-v1.y)*(uv.x-v3.x)+(v1.x-v3.x)*(uv.y-v3.y))/h;\n    float weight3 = 1.0-weight1-weight2;\n\n    return a*weight1+b*weight2+c*weight3/(weight1+weight2+weight3);\n}\n\nvec2 getRotation(){\n   vec4 r = texelFetch(iChannel0, ivec2(0,0), 0) * 255.0 - 100.0;     \n   return r.xy;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n    uv.y *= -1.0;\n    \n    vec3 col = clearCol;\n    float pdepth = 9e20;\n    \n    vec2 rot = getRotation();\n    \n    //cheap optimization\n    if(uv.x < 0.5 && uv.x > -0.5 && uv.y < 0.8 && uv.y > -0.8){\n        for(int i=0; i<indicies.length(); i++){ //very long loop *yikes*\n            mat4 rotation = rotateY(rot.y) * rotateX(rot.x);\n            mat4 perspectiveMatrix = perspective(iResolution.x/iResolution.y);\n            mat4 translation = translate(vec3(0.0,0.0,7.0));\n\n            vec4 v41n = vec4(verticies[indicies[i].x - 1], 1.0);\n            vec4 v42n = vec4(verticies[indicies[i].y - 1], 1.0);\n            vec4 v43n = vec4(verticies[indicies[i].z - 1], 1.0);\n\n            vec4 v41 = v41n * rotation * translation * perspectiveMatrix;\n            vec4 v42 = v42n * rotation * translation * perspectiveMatrix;\n            vec4 v43 = v43n * rotation * translation * perspectiveMatrix;\n\n            vec3 v1 = (v41/v41.w).xyz;\n            vec3 v2 = (v42/v42.w).xyz;\n            vec3 v3 = (v43/v43.w).xyz;\n\n            float tsa = edge(v2.xy,v3,uv);\n            float tsb = edge(v3.xy,v1,uv);\n            float tsc = edge(v1.xy,v2,uv);\n            \n            vec3 rnormal = -normalize(cross(v42.xyz-v41.xyz, v43.xyz-v41.xyz));\n            \n            vec3 snormal = normalize(cross(v42n.xyz-v41n.xyz, v43n.xyz-v41n.xyz));\n            \n            //compute lighting at each vertex\n            vec3 col1 = triColor * max(dot(normalize(lightPos - v41n.xyz), snormal), 0.2) * 1.2; \n            vec3 col2 = triColor * max(dot(normalize(lightPos - v42n.xyz), snormal), 0.2) * 1.2; \n            vec3 col3 = triColor * max(dot(normalize(lightPos - v43n.xyz), snormal), 0.2) * 1.2; \n\n            if(((tsa>=0.0)==(tsb>=0.0))&&((tsb>=0.0)==(tsc>=0.0))&&(dot(rnormal,vec3(0.0,0.0,1.0))>-1e-4)){\n                float area = edge(v1.xy,v2,v3.xy);\n\n                tsa/=area;\n                tsb/=area;\n                tsc/=area;\n\n                float depth = v1.z*tsa+v2.z*tsb+v3.z*tsc;\n                depth = 1.0/depth;\n                \n                if(depth<pdepth){ \n                    col = interpolate(v1,v2,v3,col1,col2,col3,uv);\n                    pdepth = depth;\n                }\n            }\n        }\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}