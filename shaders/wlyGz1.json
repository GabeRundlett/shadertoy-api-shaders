{
    "Shader": {
        "info": {
            "date": "1578270717",
            "description": "Just messing around with atan. Use the mouse to orbit around the shape (x) or change the period of the deformation (y)",
            "flags": 0,
            "hasliked": 0,
            "id": "wlyGz1",
            "likes": 1,
            "name": "deforming sphere along xyz axis",
            "published": 3,
            "tags": [
                "simple",
                "experiment"
            ],
            "usePreview": 0,
            "username": "percentcer",
            "viewed": 344
        },
        "renderpass": [
            {
                "code": "#define MAXD 100.\n\nmat3 roty(float a) {\n    return mat3(\n    \tcos(a), 0., sin(a),\n        0., 1., 0.,\n        -sin(a), 0., cos(a)\n    );\n}\n\nfloat shape(vec3 p) {\n    float sweepX = atan(p.z, p.y);\n    float sweepY = atan(p.x, p.z);\n    float sweepZ = atan(p.y, p.x);\n    float period = floor(iMouse.y / iResolution.y * 10.);\n    float radiusOffset = \n        (sin(sweepY * period))\n        * (sin(sweepX * period))\n        * (sin(sweepZ * period));\n    \n    return length(p) - (1. + radiusOffset*.2);\n}\n\nvec2 map(vec3 p) {\n    // return a distance and a material id\n    return vec2(shape(p), 1.);\n}\n\nvec3 norm(vec3 p) { \n    vec2 ep = vec2(0.001, 0.0);\n    return normalize(map(p).r - vec3(\n        map(p - ep.xyy).r,\n        map(p - ep.yxy).r,\n        map(p - ep.yyx).r\n    ));\n}\n\nvec4 march(vec3 ro, vec3 rd) {\n    float t = 0.;\n    vec4 ret;\n    for (int i = 0; i < 100; i++) {\n        \n        ret.xyz = ro + rd * t;\n        vec2 d = map(ret.xyz);\n        \n        if (d.x < .001) {\n        \tret.w = d.y;\n            break;\n        }\n        \n        t += d.x;\n        \n        if (t > MAXD) {\n            break;\n        }\n    }\n    return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2. - iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.5);\n    \n    vec3 ro = vec3(0., 0., 2.);\n    vec3 rd = normalize(vec3(uv.xy, -1.));\n    \n    mat3 rot = roty((iMouse.x / iResolution.x - .5)*10.);\n    ro *= rot;\n    rd *= rot;\n    \n    vec4 p = march(ro, rd);\n    \n    if (p.w > 0.) {\n        col = norm(p.xyz);\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}