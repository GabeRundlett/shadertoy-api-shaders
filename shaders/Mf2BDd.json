{
    "Shader": {
        "info": {
            "date": "1726886183",
            "description": "a",
            "flags": 0,
            "hasliked": 0,
            "id": "Mf2BDd",
            "likes": 1,
            "name": "diamboy's newton's fractal test",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "Diamboy",
            "viewed": 40
        },
        "renderpass": [
            {
                "code": "vec2 coeff[4] = vec2[](vec2(0), vec2(0), vec2(0), vec2(1,0));\nvec2 roots[3] = vec2[](vec2(-1, 0), vec2(0.6,-0.8), vec2(0.6,0.8));\n\nvec2 mul(vec2 a, vec2 b)\n{\n    return vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\nvec2 div(vec2 a, vec2 b)\n{\n    return mul(a, vec2(b.x, -b.y)) / (b.x*b.x+b.y*b.y);\n}\n\nvec2 f(vec2 x)\n{\n    vec2 r = coeff[3];\n    vec2 m = x;\n    for (int i = 2; i >= 0; i--)\n    {\n        r += mul(x, coeff[i]);\n        x = mul(x, m);\n    }\n    return r;\n}\n\nvec2 df(vec2 x)\n{\n    vec2 r = coeff[2];\n    vec2 m = x;\n    for (int i = 1; i >= 0; i--)\n    {\n        r += float(3 - i) * mul(x, coeff[i]);\n        x = mul(x, m);\n    }\n    return r;\n}\n\nvoid unsolve()\n{\n    vec2 tmp[4];\n    for (int i = 0; i < 3; i++)\n    {\n        for (int j = 0; j < 4; j++)\n        {\n            vec2 lower = vec2(0);\n            if (j+1 < 4) lower = coeff[j+1];\n            tmp[j] = lower - mul(coeff[j], roots[i]);\n        }\n        for (int j = 0; j < 4; j++)\n            coeff[j] = tmp[j];\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    roots[0] += vec2(cos(iTime*0.25), sin(iTime*0.25)) * 0.3;\n    roots[1] += vec2(cos(iTime*0.225), sin(iTime*0.225)) * 0.2;\n    roots[2] += vec2(cos(iTime*0.275), sin(iTime*0.275)) * 0.15;\n    mat2 rot = mat2(cos(iTime*0.11), sin(iTime*0.11), -sin(iTime*0.11), cos(iTime*0.11));\n    roots[0] *= rot;\n    roots[1] *= rot;\n    roots[2] *= rot;\n    unsolve();\n    vec3 o = vec3(0);\n    for (float x = -0.5; x <= 0.5; x += 0.5)\n        for (float y = -0.5; y <= 0.5; y += 0.5)\n        {\n            vec2 uv = ((fragCoord.xy + vec2(x,y)) * 2.0 - iResolution.xy) / iResolution.y;\n            //uv = (uv - vec2(0.4, 0)) * 5.0 * pow(0.75, iTime) + vec2(0.4, 0);\n            vec2 n = uv;\n            int iters = 0;\n            for (; iters < 100; iters++)\n            {\n                n -= div(f(n), df(n));\n                float d = min(min(length(n - roots[0]), length(n - roots[1])), length(n - roots[2]));\n                if (d < 0.1) break;\n            }\n            int idx = 0;\n            for (int i = 1; i < 3; i++)\n                if (length(n - roots[i]) < length(n - roots[idx])) idx = i;\n            float d = length(n - roots[idx]);\n            vec3 c = vec3(0);\n            c[idx] = 1.0;\n            float p = 0.0;\n            for (int i = 0; i < 3; i++) p += smoothstep(0.03, 0.029, length(uv - roots[i]));\n            o += c + p;\n        }\n    fragColor = vec4(o*o / 81.0, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}