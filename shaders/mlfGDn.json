{
    "Shader": {
        "info": {
            "date": "1671577030",
            "description": "clock",
            "flags": 0,
            "hasliked": 0,
            "id": "mlfGDn",
            "likes": 3,
            "name": "another clock",
            "published": 3,
            "tags": [
                "tau",
                "shaderclockdenodev"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 284
        },
        "renderpass": [
            {
                "code": "\n\nfloat f_n_inout(float n){\n    if(n > .5){\n        return 0.5 - mod(n, 0.5); \n    }\n    return n;\n\n}\nfloat f_n_clockhand(\n    vec2 o_trpino, \n    float n_freq_offset\n){\n    float n_tau = 6.283185;\n    vec2 o_p = vec2(0., 0.);\n    vec2 o_diff = o_trpino-o_p;\n    float n_dist = length(o_diff);\n    float n_ang_nor = fract(((atan(o_diff.y, o_diff.x)+(n_tau/2.))/n_tau)+0.5);\n    float n_its = 1.;\n    float n_ang_snapped = floor(n_ang_nor / (1./n_its));\n    float n_ang_snapped_nor = n_ang_snapped / n_its;\n    vec2 o_p_center = vec2(0.);\n    float n_dist_center = length(o_trpino-o_p_center);\n    float n_a = fract(n_ang_snapped_nor);\n    vec2 o_p_onangle_snapped = vec2(\n        cos(n_a*n_tau+(1./n_its/2.)*n_tau)*n_dist_center,\n        sin(n_a*n_tau+(1./n_its/2.)*n_tau)*n_dist_center\n    );\n    float n_dist_o_p_onangle_snapped = length(\n        o_trpino - o_p_onangle_snapped\n    );\n    float n = n_dist_o_p_onangle_snapped*20.;\n\n    //n = smoothstep(0.1, 0.11, n);\n    n = n+(sin(n_dist_center*n_tau+n_freq_offset)*0.5+0.5);\n    return n;\n}\nfloat f_n_inout_parabola(\n    float n_nor, \n    float n_width, \n    float n_offset_nor\n){\n    //https://www.desmos.com/calculator/buuowzksdh?lang=de\n    float n = pow(n_nor - (1./2.)*2.*n_offset_nor, 2.) * - (4./n_width)+1.; \n    return n;\n}\nvec2 f_o_rotd(vec2 o, float n_angle_nor){\n    float n_tau = 6.283185;\n    float n_ang_rad = n_angle_nor * n_tau;\n    return vec2(\n        cos(n_ang_rad)*o.x - sin(n_ang_rad)*o.y, \n        sin(n_ang_rad)*o.x + cos(n_ang_rad)*o.y\n    );\n}\n//IMPORTANT START, keep the lines with and between IMPORTANT START and IMPORTANT END\n// and add the tag 'shaderclockdenodev' to the shader\n// otherwise the shader will not work on https://shaderclock.deno.dev/\n// also at the moment only the following variables are available iTime, iResolution,fragCoord,iDate\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//IMPORTANT END\n    vec2 o_trpino = (fragCoord - iResolution.xy*0.5)/ iResolution.y;\n    o_trpino = f_o_rotd(o_trpino, 1./4.);\n    o_trpino*=1.1;\n    vec2 o_fc_nor = fragCoord.xy / iResolution.xy;\n    float n_tau = 6.283185;\n    float n_freq_sec = fract(iTime)*n_tau;\n    //float n_t_sec = (iTime);\n    //n_t_sec = floor(iTime);// for snapping handle\n    \n\n    float n_t_yea = (iDate.x);//year-1\n    float n_t_mon = (iDate.y);//month-1\n    float n_t_day = (iDate.z);//day-1\n    float n_t_sec = (iDate.w);//secs since midnight\n    float n_t_min = (n_t_sec / 60.); //min since midnight\n    float n_t_hou = (n_t_min / 60.); //hours since midnight\n    \n    float n_min_nor = n_t_min / 60.;\n    //float n_hou_nor = n_t_hou / 24.;\n    \n    float n_sec = iDate.w;\n    float n_hou_mod = floor(mod(n_sec, 60.*60.*12.));\n    float n_hou_nor = n_hou_mod / (60.*60.*12.);\n    \n    float n_ang_sec = (1./60.)*(mod(n_t_sec, 60.));\n    vec2 o_rotd_sec = f_o_rotd(o_trpino, n_ang_sec);\n    float n_clockhand_sec = f_n_clockhand(o_rotd_sec, iTime*n_tau);\n\n    float n_ang_min = n_min_nor;\n    vec2 o_rotd_min = f_o_rotd(o_trpino, n_ang_min);\n    float n_clockhand_min = f_n_clockhand(o_rotd_min, n_ang_min);\n    \n    float n_ang_hou = n_hou_nor;\n    vec2 o_rotd_hou = f_o_rotd(o_trpino, n_ang_hou);\n    float n_clockhand_hou = f_n_clockhand(o_rotd_hou, n_ang_hou);\n\n    float n_dist_center = length(o_trpino);\n    float n_circle_around = 1.-smoothstep(0.5-0.025, 0.5+0.025, n_dist_center);\n    float b_circle_mask = 1.-smoothstep(0.5, 0.5, n_dist_center);\n    n_circle_around = f_n_inout_parabola(n_circle_around, 1.0, 0.5);\n\n    float n_min = min(n_clockhand_sec, 1.);\n    n_min = min(n_min, n_clockhand_min);\n    n_min = min(n_min, n_clockhand_hou);\n    //n_min += (n_clockhand_sec*n_clockhand_min*n_clockhand_hou)*0.01;\n    //n_min = sqrt(n_min);\n    float n_max = 1.-n_min;\n\n    float n = b_circle_mask*n_max + n_circle_around;\n    fragColor = vec4(n);\n    //fragColor *= b_circle_mask;\n    //fragColor = 1.-fragColor;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}