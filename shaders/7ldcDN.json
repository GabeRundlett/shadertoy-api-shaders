{
    "Shader": {
        "info": {
            "date": "1660031918",
            "description": "Just ripples using a circular-ish kernel. The two extra buffers are to store the previous output, but it would have been more more efficient to store in unused color channels in Buffer A.  Needs an additional smoothing step to get rid of artifacts.",
            "flags": 32,
            "hasliked": 0,
            "id": "7ldcDN",
            "likes": 5,
            "name": "Ripple Kernel",
            "published": 3,
            "tags": [
                "water",
                "fluid",
                "derivative",
                "ripple",
                "kernel",
                "sim",
                "fluidsim"
            ],
            "usePreview": 0,
            "username": "JB_0x0003",
            "viewed": 294
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalize coords\n    vec2 pix = fragCoord.xy / iResolution.xy;\n    \n    // use buffer content to determine color mixing\n    float fac = texture(iChannel0,pix).x / 10.0 + .1; \n    if (fac <= 0.0) {fac = fac * 0.2;}\n    \n    // define colors\n    vec4 col1 = vec4(0.752941, 0.733333, 0.780392,1.0);\n    vec4 col2 = vec4(0.0745098, 0.192157, 0.258824,1.0);\n    \n    // interpolate between colors. Goes darker than the color associated with negative numbers\n    // because ripple values can be negative\n    vec4 outCol = col1 * fac + col2 * (1.0 - fac);\n\n    fragColor = vec4(outCol);\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    // sets ripple height at mouse position on click\n    if (iFrame %1 == 0 && vec2(fragCoord.xy + .5) == abs(iMouse.xy) && iMouse.z > 0.0)  {\n    \n        fragColor = vec4(100);\n    \n    }else{\n    \n        ivec2 pos = ivec2(fragCoord.xy - 0.5);\n        \n        //There's probably a better way to implement kernels on shadertoy, but I don't know what it is\n        fragColor = (texelFetch(iChannel0, ivec2(pos.x + 1,pos.y),0) //positives\n                     +texelFetch(iChannel0, pos.xy+1,0) * 0.25\n                     +texelFetch(iChannel0, ivec2(pos.x,pos.y + 1),0)\n                     +texelFetch(iChannel0, pos.xy-1, 0) *0.25//negatives\n                     +texelFetch(iChannel0, ivec2(pos.x - 1, pos.y), 0)\n                     +texelFetch(iChannel0, ivec2(pos.x, pos.y -1),0)\n                     +texelFetch(iChannel0, ivec2(pos.x + 1, pos.y -1),0) *.25//mixed\n                     +texelFetch(iChannel0, ivec2(pos.x -1, pos.y + 1),0) *.25\n                     \n                     // divides total inputs to ensure conservation of energy, \n                     // then subtracts based on the stored volocity value\n                     ) /2.49  -texelFetch(iChannel1,pos,0); \n        \n        // dampens energy every tick to make ripples die\n        fragColor = fragColor * 0.98;\n    \n    \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Janky way of recording previous buffer values\n    //B will always execute before C, so it will be one loop behind\n    vec2 pix = fragCoord.xy / iResolution.xy;\n    \n        fragColor = texture(iChannel0,pix);\n        \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Janky way of recording preious buffer values\n    //B will always execute before C, so it will be one loop behind\n    vec2 pix = fragCoord.xy / iResolution.xy;\n    \n    fragColor = texture(iChannel0,pix);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}