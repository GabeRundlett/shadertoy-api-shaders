{
    "Shader": {
        "info": {
            "date": "1503597997",
            "description": "An alphabetic version of \"Urban Growth\" (look around using mouse)",
            "flags": 0,
            "hasliked": 0,
            "id": "XtfczN",
            "likes": 60,
            "name": "Alphaville",
            "published": 3,
            "tags": [
                "font",
                "architecture",
                "cityscape",
                "cellmarch"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 3353
        },
        "renderpass": [
            {
                "code": "// \"Alphaville\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txFnt iChannel0\n\nfloat Hashff (float p);\nfloat Hashfv2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nfloat IFbm1 (float p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nfloat PrOBoxDf (vec3 p, vec3 b);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\n\nmat3 vuMat;\nvec3 vuPos, qHit, sunDir;\nvec2 iqBlk, cTimeV, qnTex;\nfloat dstFar, tCur, qcCar, cDir, flrHt;\nint idObj;\nconst float pi = 3.14159;\nconst int idBldg = 1, idBldgRf = 2, idRoad = 3, idSWalk = 4, idCarWhl = 5,\n   idCarBdy = 6, idTrLight = 7;\n\nfloat TrLightDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  q = p;\n  q.xz = abs (fract (q.xz) - vec2 (0.5)) - vec2 (0.345);\n  q.y -= 0.023;\n  d = PrCylDf (q.xzy, 0.002, 0.02);\n  if (d < dMin) { dMin = d;  idObj = idTrLight;  qHit = q; }\n  return dMin;\n}\n\nfloat FontTexDf (vec2 p, int ic)\n{\n  vec3 tx;\n  float d;\n  tx = texture (txFnt, mod ((vec2 (mod (float (ic), 16.),\n     15. - floor (float (ic) / 16.)) + p) * (1. / 16.), 1.)).gba - 0.5;\n  qnTex = vec2 (tx.r, - tx.g);\n  d = tx.b + 1. / 256.;\n  return d;\n}\n\nfloat BldgDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 ip;\n  float d, df, bHt, bHtFac;\n  ip = floor (p.xz);\n  bHtFac = 0.01 + 0.99 * SmoothBump (0.15, 0.85, 0.1, \n     mod (0.03 * tCur + 0.2 * length (floor ((ip + 8.) / 16.)), 1.));\n  d = p.y;\n  if (d < dMin) { dMin = d;  idObj = idRoad;  qHit = p;  iqBlk = ip; }\n  q = p;\n  q.xz = fract (q.xz) - vec2 (0.5);\n  bHt = (0.5 * Hashfv2 (13. * ip) + 0.05) * (1. + 0.15 / flrHt) + 0.1;\n  bHt = (floor (bHt * bHtFac / flrHt) + 0.2) * flrHt;\n  q.y -= 0.0015;\n  d = PrOBoxDf (q, vec3 (0.35, 0.0015, 0.35));\n  if (d < dMin) { dMin = d;  idObj = idSWalk;  qHit = p; }\n  q.y -= 0.0015;\n  q.y -= bHt - 0.2 * flrHt - 0.001;\n  int ic = int (Hashfv2 (17. * floor (p.xz)) * 26.);\n  if (ic == 16) ++ ic;\n  df = FontTexDf (fract (p.xz), 0x41 + ic);\n  d = max (df, abs (q.y) - bHt);\n  if (d < dMin) {\n    dMin = d;\n    idObj = (d == df) ? idBldg : idBldgRf;\n    qHit = q;\n    iqBlk = ip;\n  }\n  if (bHtFac > 0.1) dMin = TrLightDf (p, dMin);\n  return dMin;\n}\n\nvec4 CarPos (vec3 p)\n{\n  vec3 q;\n  float vDir, cCar;\n  if (cDir == 0. && abs (fract (p.z) - 0.5) > 0.35 ||\n     cDir == 1. && abs (fract (p.x) - 0.5) < 0.35) {\n    p.xz = vec2 (- p.z, p.x);\n    vDir = 0.;\n  } else {\n    vDir = 1.;\n  }\n  q = p;\n  q.y -= -0.003;\n  q.z += 3. * floor (q.x);\n  q.x = fract (q.x) - 0.5;\n  q.z *= 2. * step (0., q.x) - 1.;\n  q.z -= cTimeV.x + ((cDir == vDir) ? vDir + cTimeV.y : 1.);\n  cCar = floor (20. * q.z);\n  q.z = fract (q.z) - 0.5;\n  q.x = abs (q.x) - 0.395 - 0.06 * step (0.7, Hashff (11. * cCar)) -\n     0.03 * Hashff (13. * cCar);\n  return vec4 (q, cCar);\n}\n\nfloat CarDf (vec3 p, float dMin)\n{\n  vec4 q4;\n  vec3 q;\n  float d, bf;\n  q4 = CarPos (p);\n  q = q4.xyz;\n  bf = PrOBoxDf (q + vec3 (0., 0., -0.1), vec3 (0.015, 0.05, 0.2));\n  q.z = mod (q.z, 0.05) - 0.025;\n  d = SmoothMin (PrOBoxDf (q + vec3 (0., -0.008, 0.), vec3 (0.007, 0.002, 0.015)),\n     PrOBoxDf (q + vec3 (0., -0.015, 0.003), vec3 (0.0035, 0.0003, 0.005)), 0.02);\n  d = max (d, bf);\n  if (d < dMin) { dMin = d;  idObj = idCarBdy;  qHit = q;  qcCar = q4.w; }\n  q.xz = abs (q.xz) - vec2 (0.0085, 0.01);\n  q.y -= 0.006;\n  d = max (PrCylDf (q.yzx, 0.003, 0.0012), bf);\n  if (d < dMin) { dMin = d;  idObj = idCarWhl;  qHit = q; }\n  return 0.7 * dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin;\n  dMin = dstFar;\n  dMin = BldgDf (p, dMin);\n  dMin = CarDf (p, dMin);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 srd, dda, h;\n  float dHit, d;\n  srd = 1. - 2. * step (0., rd.xz);\n  dda = - srd / (rd.xz + 0.0001);\n  dHit = 0.;\n  for (int j = 0; j < 240; j ++) {\n    p = ro + dHit * rd;\n    h = fract (dda * fract (srd * p.xz));\n    d = ObjDf (p);\n    dHit += min (d, 0.02 + max (0., min (h.x, h.y)));\n    if (d < 0.0002 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.0001, -0.0001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = 0; j < 40; j ++) {\n    h = BldgDf (ro + rd * d, dstFar);\n    sh = min (sh, smoothstep (0., 1., 20. * h / d));\n    d += min (0.05, 3. * h);\n    if (h < 0.001) break;\n  }\n  return max (sh, 0.);\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, skyCol, sunCol, p;\n  float ds, fd, att, attSum, d, sd;\n  rd.y = (rd.y + 0.1) / 1.1;\n  rd = normalize (rd);\n  if (rd.y >= 0.) {\n    p = rd * (200. - ro.y) / max (rd.y, 0.0001);\n    ds = 0.1 * sqrt (length (p));\n    p += ro;\n    fd = 0.002 / (smoothstep (0., 10., ds) + 0.1);\n    p.xz *= fd;\n    p.xz += 0.1 * tCur;\n    att = Fbm2 (p.xz);\n    attSum = att;\n    d = fd;\n    ds *= fd;\n    for (int j = 0; j < 4; j ++) {\n      attSum += Fbm2 (p.xz + d * sunDir.xz);\n      d += ds;\n    }\n    attSum *= 0.3;\n    att *= 0.3;\n    sd = clamp (dot (sunDir, rd), 0., 1.);\n    skyCol = mix (vec3 (0.7, 1., 1.), vec3 (1., 0.4, 0.1), 0.25 + 0.75 * sd);\n    sunCol = vec3 (1., 0.8, 0.7) * pow (sd, 1024.) +\n       vec3 (1., 0.4, 0.2) * pow (sd, 256.);\n    col = mix (vec3 (0.5, 0.75, 1.), skyCol, exp (-2. * (3. - sd) *\n       max (rd.y - 0.1, 0.))) + 0.3 * sunCol;\n    attSum = 1. - smoothstep (1., 9., attSum);\n    col = mix (vec3 (0.4, 0., 0.2), mix (col, vec3 (0.3, 0.3, 0.3), att), attSum) +\n       vec3 (1., 0.4, 0.) * pow (attSum * att, 3.) * (pow (sd, 10.) + 0.5);\n  } else col = vec3 (0.6);\n  return col;\n}\n\nvec4 ObjCol (vec3 ro, vec3 rd, vec3 vn)\n{\n  vec3 col;\n  vec2 g, b;\n  float wFac, f, ff, spec;\n  wFac = 1.;\n  col = vec3 (0.);\n  spec = 0.;\n  if (idObj == idBldg || idObj == idBldgRf) {\n    col = HsvToRgb (vec3 (0.7 * Hashfv2 (19. * iqBlk), 0.2,\n       0.4 + 0.2 * Hashfv2 (21. * iqBlk)));\n    if (idObj == idBldg) {\n      f = mod (qHit.y / flrHt - 0.2, 1.) - 0.5;\n      wFac = 1. - (step (0., f) - 0.5) * step (abs (abs (f) - 0.24), 0.02) -\n         0.801 * step (abs (f), 0.22);\n      if (wFac < 0.2) {\n        f = 1.5 * dot (qHit.xz, normalize (vn.zx));\n        wFac = min (0.2 + 0.8 * floor (fract (f / flrHt + 0.25) *\n           (1. + Hashfv2 (51. * iqBlk))), 1.);\n      }\n      col *= wFac;\n      if (wFac > 0.5) col *= (0.8 + 0.2 * Noisefv2 (512. * vec2 (qHit.x + qHit.z, qHit.y)));\n      spec = 0.3;\n    } else {\n      g = step (0.05, fract (qHit.xz * 70.));\n      col *= mix (0.8, 1., g.x * g.y);\n    }\n  } else if (idObj == idSWalk) {\n    g = step (0.05, fract (qHit.xz * 35.));\n    col = vec3 (0.2) * mix (0.7, 1., g.x * g.y);\n  } else if (idObj == idTrLight) {\n    f = 2. * (atan (qHit.z, qHit.x) / pi + 1.) + 0.5;\n    ff = floor (f);\n    if (abs (qHit.y - 0.014) < 0.004 && abs (f - ff) > 0.3) {\n      col = mix (vec3 (0., 1., 0.), vec3 (1., 0., 0.),\n         (mod (ff, 2.) == 0.) ? cDir : 1. - cDir);\n      spec = -2.;\n    } else {\n      col = vec3 (0.4, 0.2, 0.1);\n      spec = 0.5;\n    }\n  } else if (idObj == idCarBdy) {\n    col = HsvToRgb (vec3 (Hashff (qcCar * 37.), 0.9,\n       0.4 + 0.6 * vec3 (Hashff (qcCar * 47.))));\n    f = abs (qHit.z + 0.003);\n    wFac = max (max (step (0.001, f - 0.005) * step (0.001, abs (qHit.x) - 0.0055),\n       step (f, 0.001)), step (0.0015, abs (qHit.y - 0.0145)));\n    col *= wFac;\n    spec = 0.5;\n    if (abs (qHit.z) > 0.015) {\n      g = vec2 (qHit.x, 3. * (qHit.y - 0.008));\n      if (qHit.z > 0. && dot (g, g) < 3.6e-5) col *= 0.3;\n      g = vec2 (abs (qHit.x) - 0.005, qHit.y - 0.008);\n      f = dot (g, g);\n      if (qHit.z > 0. && f < 2.2e-6) {\n        col = vec3 (1., 1., 0.3);\n        spec = -2.;\n      } else if (qHit.z < 0. && f < 1.1e-6) {\n        col = vec3 (1., 0., 0.);\n        spec = -2.;\n      }\n    }\n  } else if (idObj == idCarWhl) {\n    if (length (qHit.yz) < 0.0015) {\n      col = vec3 (0.7);\n      spec = 0.8;\n    } else {\n      col = vec3 (0.03);\n    } \n  } else if (idObj == idRoad) {\n    g = abs (fract (qHit.xz) - 0.5);\n    if (g.x < g.y) g = g.yx;\n    col = mix (vec3 (0.05), vec3 (0.08), step (g.x, 0.355));\n    f = ((step (abs (g.x - 0.495), 0.002) + step (abs (g.x - 0.365), 0.002)) +\n       step (abs (g.x - 0.44), 0.0015) * step (fract (g.y * 18. + 0.25), 0.7)) *\n       step (g.y, 0.29);\n    col = mix (col, vec3 (0.5, 0.4, 0.1), f);\n    f = step (0.6, fract (g.x * 30. + 0.25)) * step (0.36, g.x) *\n       step (abs (g.y - 0.32), 0.02);\n    col = mix (col, vec3 (0.6), f);\n    b = CarPos (ro).xz;\n    g = abs (b + vec2 (0., -0.1)) - vec2 (0.015, 0.2);\n    b.y = mod (b.y, 0.05) - 0.025;\n    b = abs (b) * vec2 (1.55, 1.);\n    if (max (g.x, g.y) < 0. && max (b.x, b.y) < 0.016) col *= 0.6;\n  }\n  if (wFac < 0.5) {\n    rd = reflect (rd, vn);\n    g = Rot2D (rd.xz, 5.1 * atan (20. + iqBlk.y, 20. + iqBlk.x));\n    f = step (1., 0.5 * ro.y + 3. * rd.y -\n       0.1 * floor (5. * IFbm1 (0.4 * atan (g.y, g.x) + pi) + 0.05));\n    if (f == 1.) col = 0.8 * BgCol (ro, rd);\n    else col = vec3 (0.1, 0.05, 0.);\n    spec = -1.;\n  }\n  return vec4 (col, spec);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, vn;\n  float dstHit, sh;\n  int idObjT;\n  dstHit = ObjRay (ro, rd);\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    if (idObj == idBldg) vn = normalize (vec3 (qnTex.x, 0.00001, qnTex.y));\n    else vn = ObjNf (ro);\n    idObj = idObjT;\n    objCol = ObjCol (ro, rd, vn);\n    col = objCol.rgb;\n    if (objCol.a >= 0.) {\n      if (idObj == idRoad) vn = VaryNf (500. * qHit, vn, 2.);\n      else if (idObj == idBldg || idObj == idBldgRf)\n         vn = VaryNf (500. * qHit, vn, 0.5);\n      sh = 0.2 + 0.8 * ObjSShadow (ro, sunDir);\n      col = col * (0.2 + 0.1 * max (dot (vn, sunDir * vec3 (-1., 1., -1.)), 0.) +\n         0.8 * sh * max (dot (vn, sunDir), 0.) +\n         sh * objCol.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 128.));\n      col *= vec3 (1., 0.8, 0.6);\n    } else if (objCol.a == -1.) {\n      if (idObj == idBldg || idObj == idBldgRf) col *= 0.6;\n    }\n    col = mix (col, BgCol (ro, rd), smoothstep (0.4, 1., dstHit / dstFar));\n  } else col = BgCol (ro, rd);\n  return pow (clamp (col, 0., 1.), vec3 (0.6));\n}\n\nvec3 TrackPath (float t)\n{\n  vec3 p;\n  float pLen, s, cCount;\n  pLen = 2.;\n  t *= 10.;\n  p.y = 0.2 + 1.7 * SmoothBump (0.2, 0.8, 0.1, mod (0.08 * t, 1.));\n  s = mod (t, 11.);\n  if (s < 7.) p.xz = (s < 4.) ? vec2 (0., s) : vec2 (s - 4., 4.);\n  else p.xz = (s < 9.) ? vec2 (3., 11. - s) : vec2 (12. - s, 2.);\n  cCount = floor (t / 11.);\n  if (mod (cCount, 2.) == 0.) p.x *= -1.;\n  else p.x -= 1.;\n  p.z += 2. * cCount;\n  p.xz *= pLen;\n  return p;\n}\n\nvec4 FlyPR (float s)\n{\n  vec3 fpF, fpB, vd;\n  float ds;\n  ds = 0.02;\n  fpF = TrackPath (s + ds);\n  fpB = TrackPath (s - ds);\n  vd = fpF - fpB;\n  return vec4 (0.5 * (fpF + fpB), - (atan (vd.z, vd.x) - 0.5 * pi));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, flDat;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, cTime;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  el = -0.02 * pi;\n  az = 0.02 * pi;\n  if (mPtr.z > 0.) {\n    el += clamp (pi * mPtr.y, -0.4 * pi, 0.35 * pi);\n    az += clamp (2. * pi * mPtr.x, - pi, pi);\n  }\n  flDat = FlyPR (0.015 * tCur);\n  ro = flDat.xyz;\n  ro.xz += 0.01;\n  ori = vec2 (el, az + flDat.w);\n  dstFar = 50.;\n  flrHt = 0.07;\n  sunDir = normalize (vec3 (1., 0.5, -1.));\n  cTime = 0.15 * mod (tCur, 80.);\n  cDir = mod (floor (cTime), 2.);\n  cTimeV = vec2 (floor (0.5 * floor (cTime)), mod (cTime, 1.));\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 2.));\n  col = ShowScene (ro, rd);\n  if (mPtr.z > 0. && max (abs (uv.x), abs (uv.y)) < 0.05 &&\n     min (abs (uv.x), abs (uv.y)) < 0.003) col = mix (col, vec3 (0.1, 1., 0.1), 0.3);\n  fragColor = vec4 (col, 1.);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, cHashA3.xy)) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + cHashA4.xy) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat IFbm1 (float p)\n{\n  float s, a;\n  p *= 5.;\n  s = 0.;\n  a = 10.;\n  for (int j = 0; j < 4; j ++) {\n    s += floor (a * Noiseff (p));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return 0.1 * s;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat PrOBoxDf (vec3 p, vec3 b)\n{\n  return length (max (abs (p) - b, 0.));\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}