{
    "Shader": {
        "info": {
            "date": "1467310319",
            "description": "Conway's Game of Life, except each cell gets a random hue to begin with, and when a cell is born, it takes on a hue chosen randomly from one of its three neighbors, so you can watch different hues fight for territory. Press R to reset.",
            "flags": 48,
            "hasliked": 0,
            "id": "XsGXDd",
            "likes": 33,
            "name": "Colorful Game of Life",
            "published": 3,
            "tags": [
                "2d",
                "conway",
                "gameoflife",
                "multipass"
            ],
            "usePreview": 0,
            "username": "fb39ca4",
            "viewed": 2143
        },
        "renderpass": [
            {
                "code": "//From https://github.com/hughsk/glsl-hsv2rgb\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 textel = vec4(texture(iChannel0, fragCoord / iResolution.xy));\n\tfragColor = vec4(hsv2rgb(vec3(textel.g, textel.r * vec2(0.2, 0.8) + vec2(0.8, 0.2))), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float pi = 3.14159265359;\n\n//Hash functions from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 pushElement(in vec3 v, float n) {\n\tv.yz = v.xy;\n    v.x = n;\n    return v;\n}\n\nfloat getAtIdx(vec3 v, int i) {\n \tif (i == 0) return v.x;\n    else if (i == 1) return v.y;\n    else if (i == 2) return v.z;\n    else return 0.;\n}\n\nfloat keyPressed(int keyCode) {\n\treturn texture(iChannel1, vec2((float(keyCode) + 0.5) / 256., .5/3.)).r;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    if (iFrame == 0 || bool(keyPressed(82))) {\n        float hue = hash13(vec3(fragCoord, float(iFrame - 11)));\n        float alive = step(hash13(vec3(fragCoord, float(iFrame))), 0.5);\n        fragColor = vec4(alive, hue, 1.0, 1.0);\n    }\n    else {\n        int n = 0;\n        vec3 hues = vec3(0);\n        for (float i = 0.; i < 8.; i += 1.) {\n         \tvec2 sampleOffset = vec2(cos(i * pi / 4.), sin(i * pi / 4.));\n            sampleOffset *= 2.;\n            sampleOffset = clamp(sampleOffset, -1., 1.);\n            vec4 textel = texture(iChannel0, fract((fragCoord + sampleOffset) / iResolution.xy));\n            if (textel.r > 0.5) {\n            \thues = pushElement(hues, textel.g);\n                n += 1;\n            }\n        }\n        vec4 current = texture(iChannel0, fragCoord / iResolution.xy);\n        if (current.r < 0.5 && n == 3) {\n        \tcurrent.r = 1.;\n            current.g = getAtIdx(hues, int(floor(mod(hash13(vec3(fragCoord, iTime) * 3. ), 3. ))));\n        }\n        else if (n < 2 || n > 3) current.r = 0.;\n\t\tfragColor = current;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}