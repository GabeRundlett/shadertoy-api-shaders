{
    "Shader": {
        "info": {
            "date": "1480075182",
            "description": "Simple 'Droste' effect shader that does not rely on any branching or loops. Because there is always a better alternative than falling back on slow branching or not unrollable loops.",
            "flags": 0,
            "hasliked": 0,
            "id": "MttXDM",
            "likes": 9,
            "name": "Droste (Pure Math Version)",
            "published": 3,
            "tags": [
                "2d",
                "effect",
                "postprocess"
            ],
            "usePreview": 0,
            "username": "Xaymar",
            "viewed": 913
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Customizable Parameters\n\tfloat repeat = 8.0;\t\t\t// How many times it should be repeated.\n    \n    // UV in 0..1 space and also inverted UV (1..0).\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uv_inverted = 1.0 - uv;\n    \n    // Calculate the offset_multiplier using the current uv.\n    // Since droste works by only repeating when both uv parts are above a threshold,\n    // we can just use the min() operator twice on it to get the final multiplier.\n    vec2 fiter = floor(uv * repeat * 2.0);\t\t\t// Calculate forward UV multiplier.\n    vec2 riter = floor(uv_inverted * repeat * 2.0);\t// Calculate reverse UV multiplier.\n    vec2 iter = min(fiter, riter);\t\t\t\t\t// iter = min(forward UV, reverse UV)\n    float offset_mul = min(iter.x, iter.y);\t\t\t// min(iter.x, iter.y) - Our Droste multiplier.\n    \n    // Offset is calculated by taking half the view and dividing it by the amount of repeats,\n    //  and then we multiply it by the multiplier above.\n    vec2 offset = (vec2(0.5, 0.5) / repeat) * offset_mul;\n    \n    // The final step is to fix the UVs that are inside a Droste offset back to 0..1 range.\n    // You can do this by calculating the new drawable area and divide 1.0 by this area.\n    vec2 uv_mul = 1.0 / (vec2(1.0, 1.0) - offset * 2.0);\n    \n    // Calculate the final UV: Screen UV minus Offset, clamped to 0..1, times UV Multiplier.\n    // The clamp could technically be skipped if out-of-bounds UVs are not a problem.\n    //vec2 finaluv = clamp(uv - offset, 0.0, 1.0) * uv_mul;\n    vec2 finaluv = (uv - offset) * uv_mul;\n    \n    // And now just read the texture.\n\tfragColor = texture(iChannel0, finaluv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}