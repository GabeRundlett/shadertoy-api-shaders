{
    "Shader": {
        "info": {
            "date": "1722896120",
            "description": "isohedron",
            "flags": 32,
            "hasliked": 0,
            "id": "McByDG",
            "likes": 27,
            "name": "Path Traced Isohedron",
            "published": 3,
            "tags": [
                "isohedron"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 270
        },
        "renderpass": [
            {
                "code": "Main {\n\n    Q = A(U)/float(iFrame);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define A(U) texelFetch(iChannel0,ivec2(U),0)\n#define Main void mainImage(out vec4 Q, in vec2 U)\n\n#define W (.1)\n\n#define eta(f) (.8-.02*(f))\n#define ei(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define phi 1.618033988749895\n#define rho 0.5257311121191336\n#define tau 0.85065080835204\n\n\n#define verts vec3[12] (\\\n    vec3(tau,rho,0), \\\n    vec3(-tau,rho,0), \\\n    vec3(tau,-rho,0), \\\n    vec3(-tau,-rho,0), \\\n    vec3(rho,0,tau), \\\n    vec3(rho,0,-tau), \\\n    vec3(-rho,0,tau), \\\n    vec3(-rho,0,-tau), \\\n    vec3(0,tau,rho), \\\n    vec3(0,-tau,rho), \\\n    vec3(0,tau,-rho), \\\n    vec3(0,-tau,-rho)) \n\n#define tris ivec3[20] (\\\n    ivec3(0,8,4), \\\n    ivec3(0,5,10), \\\n    ivec3(2,4,9),  \\\n    ivec3(2,11,5), \\\n    ivec3(1,6,8),  \\\n    ivec3(1,10,7), \\\n    ivec3(3,9,6),  \\\n    ivec3(3,7,11), \\\n    ivec3(0,10,8), \\\n    ivec3(1,8,10), \\\n    ivec3(11,2,9), \\\n    ivec3(9,3,11), \\\n    ivec3(4,2,0),  \\\n    ivec3(5,0,2),  \\\n    ivec3(6,1,3),  \\\n    ivec3(7,3,1),  \\\n    ivec3(8,6,4),  \\\n    ivec3(9,4,6),  \\\n    ivec3(10,5,7), \\\n    ivec3(11,7,5))\n   \nmat3 matrix (vec3 r) { \n   if (length(r)==0.) return mat3(1);\n   float a = length(r);\n   vec3 o = normalize(r);\n   float c = cos(a), t = 1.-c;\n   float s = sin(a);\n   return mat3(\n       t*o.x*o.x+c,t*o.x*o.y-o.z*s,t*o.x*o.z+o.y*s,\n       t*o.x*o.y+o.z*s,t*o.y*o.y+c,t*o.y*o.z-o.x*s,\n       t*o.x*o.z-o.y*s,t*o.y*o.z+o.x*s,t*o.z*o.z+c\n   \n   );\n}\n    \nvec2 iSphere (vec3 p, vec3 d, vec3 m, float r) {\n\n    p -= m;\n    \n    float b = 2.*dot(p,d);\n    float c = dot(p,p)-r*r;\n    float s = (b*b-4.*c);\n    if (s < 0.) return vec2(1e9);\n    else return vec2(.5*(-b-sqrt(s)),.5*(-b+sqrt(s)));\n\n}\nvec3 normal_segment (vec3 q, vec3 a, vec3 b) {\n    return normalize(q - a - (b-a)*clamp(dot(q-a,b-a)/dot(b-a,b-a),0.,1.));\n}\nvec2 iSegment (vec3 p, vec3 d, vec3 a, vec3 b, float r) {    \n    vec3 q = p-a;\n    vec3 u = b-a;\n    float du = dot(d,u);\n    float uu = dot(u,u);\n    float qu = dot(q,u);\n    float dq = dot(d,q);\n    float qq = dot(q,q);\n    float a_ = 1. - du*du/uu;\n    float b_ = 2.*(dq - qu*du/uu);\n    float c_ = qq - qu*qu/uu - r*r;\n    float s = b_*b_-4.*a_*c_;\n    if (s < 0.) return vec2(1e9);\n    vec2 i = vec2(\n        (-b_-sqrt(s))/(2.*a_),\n        (-b_+sqrt(s))/(2.*a_));\n    float x = dot(p+d*i.x-a,u)/uu;\n    if (x < 0. || x > 1.) i.x = 1e9;\n    x = dot(p+d*i.y-a,u)/uu;\n    if (x < 0. || x > 1.) i.y = 1e9;\n    return i;\n}\nfloat iPlane (vec3 p, vec3 d, vec3 n) {\n    return -dot(p,n)/dot(d,n);\n}\nfloat iTriangle (vec3 p, vec3 d, vec3 a, vec3 b, vec3 c) {\n    vec3 n = normalize(cross(b-a,c-a));\n    float i = -dot(p-a,n)/dot(d,n);\n    vec3 x = p + d*i;\n    float ab = dot(x-a,cross(n,normalize(b-a)));\n    float bc = dot(x-b,cross(n,normalize(c-b)));\n    float ca = dot(x-c,cross(n,normalize(a-c)));\n    if (ab<0.||bc<0.||ca<0.) return 1e9;\n    return i;\n}\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Fork of \"Isohedron\" by wyatt. https://shadertoy.com/view/msGyz1\n// 2024-08-05 19:59:04\n\nfloat scene (vec3 p, vec3 d, out vec3 no, bool inside) {\n    float x = 1e9;\n    vec3 m = vec3(0);\n    vec2 y;\n    y.x = iPlane(p-vec3(0,0,1),d,vec3(0,0,-1));\n    if (y.x > 0. && y.x < x) {\n        no = vec3(0,0,-1);\n        x = y.x;\n    }\n    for (int i = 0; i < 20; i++) {\n        vec3 a = verts[tris[i][0]]*(1.-W);\n        vec3 b = verts[tris[i][1]]*(1.-W);\n        vec3 c = verts[tris[i][2]]*(1.-W);\n        vec3 n = normalize(cross(b-a,c-a));\n        \n        y.x = iTriangle(p,d,a+W*n,b+W*n,c+W*n);\n        if (y.x > 0. && y.x < x) {\n            x = y.x;\n            no = n;\n        }\n        y = iSegment(p,d,a,b,W);\n        if (inside) y.x = y.y;\n        if (y.x > 0. && y.x < x) {\n            vec3 q = p+d*y.x;\n            if (dot(q-a,n)>0.&&dot(q-m,normalize(cross(a-m,b-m)))>0.&&dot(q-m,normalize(cross(a+W*n-m,b+W*n-m)))<0.) {\n                x = y.x;\n                no = normal_segment(q,a,b);\n            }\n                \n        }\n        y = iSegment(p,d,b,c,W);\n        if (inside) y.x = y.y;\n        if (y.x > 0. && y.x < x) {\n            vec3 q = p+d*y.x;\n            if (dot(q-b,n)>0.&&dot(q-m,normalize(cross(b-m,c-m)))>0.&&dot(q-m,normalize(cross(b+W*n-m,c+W*n-m)))<0.) {\n                x = y.x;\n                no = normal_segment(q,b,c);\n            }\n                \n        }\n        y = iSegment(p,d,c,a,W);\n        if (inside) y.x = y.y;\n        if (y.x > 0. && y.x < x) {\n            vec3 q = p+d*y.x;\n            if (dot(q-c,n)>0.&&dot(q-m,normalize(cross(c-m,a-m)))>0.&&dot(q-m,normalize(cross(c+W*n-m,a+W*n-m)))<0.) {\n                x = y.x;\n                no = normal_segment(q,c,a);\n            }\n                \n        }\n        \n        y = iSphere(p,d,a,W);\n        if (inside) y.x = y.y;\n        if (y.x > 0. && y.x < x) {\n            vec3 q = p+d*y.x;\n            if (dot(q-a,b-a)<0.&&dot(q-a,c-a)<0.&&dot(q-m,normalize(cross(a-m,b-m)))>0.&&dot(q-m,normalize(cross(c-m,a-m)))>0.) {\n                x = y.x;\n                no = normalize(q-a);\n            } \n        }\n        y = iSphere(p,d,b,W);\n        if (inside) y.x = y.y;\n        if (y.x > 0. && y.x < x) {\n            vec3 q = p+d*y.x;\n            if (dot(q-b,c-b)<0.&&dot(q-b,a-b)<0.&&dot(q-m,normalize(cross(b-m,c-m)))>0.&&dot(q-m,normalize(cross(a-m,b-m)))>0.) {\n                x = y.x;\n                no = normalize(q-b);\n            } \n        }\n        y = iSphere(p,d,c,W);\n        if (inside) y.x = y.y;\n        if (y.x > 0. && y.x < x) {\n            vec3 q = p+d*y.x;\n            if (dot(q-c,a-c)<0.&&dot(q-c,b-c)<0.&&dot(q-m,normalize(cross(c-m,a-m)))>0.&&dot(q-m,normalize(cross(b-m,c-m)))>0.) {\n                x = y.x;\n                no = normalize(q-c);\n            } \n        }\n    }\n    return x;\n}\nMain {\n     \n      Q = A(U);\n      U += hash44(vec4(U,iTime,iFrame)).xy-.5;\n      vec3 p = vec3(0,0,-1.5);\n      vec3 d = normalize(vec3(2.*(U-.5*R)/R.y,1));\n      p.xz *= ei(.4);\n      d.xz *= ei(.4);\n      p.yz *= ei(.1);\n      d.yz *= ei(.1);\n      for (float i = 0.; i < 6.; i++) {\n          vec4 h = hash44(vec4(U,i,iFrame));\n          vec3 n;\n          float x = scene(p,d,n,i>0.);\n          p += d*x;\n          if (length(n-vec3(0,0,-1))<1e-8) {\n              vec3 r = reflect(d,n);\n              d = h.xyz*2.-1.;\n              d.z = -abs(d.z);\n              d = normalize(d);\n              p += 1e-4*d;\n          } else if (h.x < .7) {\n              d = normalize(d-.4*n);\n              p += 1e-4*d;\n          } else {\n              d = reflect(d,n);\n              p += 1e-4*d;\n          }\n          \n          if (x>100.) {\n              Q += 20.*vec4(1,.75,.5,1)*exp(-100.*abs(1.-dot(d,normalize(vec3(1,1,-1)))));\n              Q += 20.*vec4(.5,1,.75,1)*exp(-100.*abs(1.-dot(d,normalize(vec3(0,1,-1)))));\n              Q += 20.*vec4(1,.75,1,1)*exp(-100.*abs(1.-dot(d,normalize(vec3(-1,-.5,-.1)))));\n              \n              return;\n          }\n      }\n      \n        \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}