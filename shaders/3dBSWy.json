{
    "Shader": {
        "info": {
            "date": "1558795950",
            "description": "Chess board.",
            "flags": 32,
            "hasliked": 0,
            "id": "3dBSWy",
            "likes": 7,
            "name": "Chess Pawn Board",
            "published": 3,
            "tags": [
                "raymarch",
                "chess"
            ],
            "usePreview": 0,
            "username": "crocidb",
            "viewed": 692
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 70\n#define MAX_DIST 90.0\n#define SURF_DIST .001\n\nconst vec3 camera_pos = vec3(10.0, 5.0, -10.0);\nconst vec3 plane_pos = vec3(0.0, -2.0, 0.0);\nvec3 light_pos = vec3(-4.0, 5.2, -3.0);\n\nconst vec3 vec_left = vec3(1.0, 0.0, 0.0);\nconst vec3 vec_up = vec3(0.0, 1.0, 0.0);\nconst vec3 vec_forward = vec3(0.0, 0.0, 1.0);\n\n#define OBJ_EMPTY 0\n#define OBJ_PAWN 1\n#define OBJ_BOARD 2\n#define OBJ_TABLE 3\n\nstruct object\n{\n    float d;\n    int id;\n};\n    \nobject closest(object o1, object o2)\n{\n    if (o1.d < o2.d)\n        return o1;\n    \n    return o2;\n}\n\nobject board(vec3 p)\n{\n    float f = sdBox(p, vec3(4.0, 0.42, 4.0)) - fbmd(p * 20., 2).x * .00003;\n    return object(f, OBJ_BOARD);\n}\n\nobject table(vec3 p)\n{\n    float f = sdBox(p, vec3(5.0, 0.24, 5.0)) - fbmd(p * 20., 2).x * .00006 - .09;\n    return object(f, OBJ_TABLE);\n}\n\nobject pawn(vec3 p)\n{\n    float s = sdSphere(p + vec3(0.0, 0.2, 0.0), 0.19);\n    float b = sdCappedCylinder(p + vec3(.0, 1.0, .0), vec2(0.24, 0.1));\n    float h = sdCappedCylinder(p + vec3(.0, 0.6, .0), vec2(0.11, 0.27));\n    \n    float r = sdCappedCylinder(p + vec3(.0, 0.48, .0), vec2(0.205, 0.01));\n    \n    float f = opUnion(opSmoothUnion(opSmoothUnion(h, b, 0.4), s, .05), r);// - fbmd(p * 30., 2).x * .0025;\n    \n    return object(f, OBJ_PAWN);\n}\n    \nobject getDist(vec3 p) \n{\n    object p1 = pawn(p - vec3(1.5, 3.0, 0.5));\n\n    vec3 pos = (translate(-1.65, -2.01, -1.3) * vec4(p, 1.0)).xyz;\n    pos = rotateX(6.15) * rotateZ(-1.77) * pos;\n    object p2 = pawn(pos);\n    \n    object board = board(p - vec3(0.0, 1.46, 0.0));\n    object table = table(p - vec3(0.0, 1.5, 0.0));\n    \n    p1.d = min(p1.d, p2.d);\n    \n    return closest(closest(table, board), p1);\n}\n\n    \nobject rayMarch(vec3 ro, vec3 rd)\n{\n    object obj;\n    obj.id = OBJ_EMPTY;\n    obj.d = 0.0;\n    \n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + rd * obj.d;\n        object o = getDist(p);\n        \n        obj.d += o.d;\n        obj.id = o.id;\n        \n        if (obj.d > MAX_DIST || o.d < SURF_DIST) break;\n    }\n    \n    return obj;\n}\n\n#define ZERO (min(iFrame,0))\nvec3 getNormal(vec3 p)\n{\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*getDist(p+0.0001*e).d;\n    }\n    return normalize(n);\n}\n\nfloat calc_ao(vec3 p, vec3 n)\n{\n\tfloat stepSize = 0.03f;\n\tfloat t = stepSize;\n\tfloat oc = 0.0f;\n\tfor(int i = 0; i < 5; ++i)\n\t{\n\t\tobject obj = getDist(p + n * t);\n\t\toc += t - obj.d;\n\t\tt += stepSize;\n\t}\n\n\treturn 1.0 - clamp(oc * .7, 0.0, 1.0);\n}\n\nvec2 triplanar_map(vec3 p, vec3 normal)\n{\n    if (abs(dot(normal, vec_up)) > .8)\n    {\n        return p.xz;\n    }\n    else if (abs(dot(normal, vec_left)) > .8)\n    {\n        return p.yz;\n    }\n    else\n    {\n        return p.xy;\n    }\n}\n\nvec3 texture_pawn(vec3 pos, vec3 n)\n{\n    pos += vec3(.2);\n    pos *= 0.4;\n    n = abs(n);\n    vec3 t0 = texture(iChannel2, pos.yz).xyz;\n    vec3 t1 = texture(iChannel2, pos.zx).xyz;\n    vec3 t2 = texture(iChannel2, pos.xy).xyz;\n    \n    return (t0 + t1 + t2) / 3.0; \n}\n\nvec3 lighting(vec3 n, vec3 rd, vec3 pos, float spec_power)\n{\n    vec3 light_dir = normalize(light_pos - pos);\n    float light_intensity = (sin(tan(iTime * 2.0) * 123124.0) + 1.0) / 100.0;\n    \n    vec3 refd = reflect(rd, n);\n    float diff = max(0.0, dot(light_dir, n));\n    float spec = pow(max(0.0, dot(refd, light_dir)), spec_power);\n    float rim = (1.0 - max(0.0, dot(-n, rd)));\n    \n    vec3 l = vec3(diff, spec, rim);\n    \n    return l * .8 + (l * light_intensity * 2.0); \n}\n\nvec3 render_pawn(object o, vec3 p, vec3 rd, vec3 normal, float shadow)\n{\n    vec3 l = lighting(normal, rd, p, 4.0);\n    vec3 t = texture_pawn(p, normal);\n    float ao = calc_ao(p, normal);\n\n    return (ao * t * .5) + (t * l.r * shadow) + (l.g * shadow * .1) + (l.b * .12 * shadow);\n}\n\nvec3 render(object o, vec3 p, vec3 rd, vec2 suv)\n{\n    vec3 normal = getNormal(p);\n    \n    object _o = rayMarch(p + normal * SURF_DIST * 2.0, normalize(light_pos - p));\n    float shadow = step(length(light_pos - p), _o.d);\n    \n    if (o.id == OBJ_EMPTY || o.d > MAX_DIST)\n    {\n        return vec3(0.03) + vec3(0.3) * pow(1. - length(suv - vec2(.5, .2)), 5.0);\n    }\n    else if (o.id == OBJ_PAWN)\n    {\n        return render_pawn(o, p, rd, normal, shadow); \n    }\n    else if (o.id == OBJ_BOARD)\n    {\n        vec2 uv = triplanar_map(p, normal);\n        uv = mod(uv * 0.1 + 0.5, 1.0);\n        vec3 t = texture(iChannel1, uv).xyz;\n        \n    \tvec3 l = lighting(normal, rd, p, 55.0);\n        float spec_map = clamp(smoothstep(0.43, 0.52, fbm(uv * 20.0)), 0.0, 1.0);\n        vec3 spec = spec_map * l.g * .000002 * t * .2 * shadow;\n        \n        \n        // Reflection\n        vec3 r = reflect(rd, normal);\n        vec3 _or = p + normal * SURF_DIST * 2.0;\n        object _o = rayMarch(_or, normalize(r));\n        vec3 _p = _or + r * _o.d;\n        vec3 _normal = getNormal(_p);\n        vec3 ref = vec3(0.0);\n        if (_o.d < MAX_DIST) ref = render_pawn(_o, _p, r, _normal, 0.0);\n        \n        t += ref * .4;\n        \n        float ao = calc_ao(p, normal);\n        \n        return (ao * t * .3) + (l.r * t * shadow * .8) + spec + (l.b * .1 * spec_map * shadow);\n    }\n    else if (o.id == OBJ_TABLE)\n    {\n    \tvec3 l = lighting(normal, rd, p, 4.0);\n        vec2 uv = triplanar_map(p, normal);\n        vec3 t = texture(iChannel2, uv * 0.1 + 0.5).xyz;\n        float ao = calc_ao(p, normal);\n        return (ao * t * .3) + (t * l.r * shadow) + (l.g * .1 * shadow);\n    }\n    \n    return normal;\n}\t\t\n\n// Main Image\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y *= iResolution.y / iResolution.x;\n    \n    vec3 ro = camera_pos;\n    \n    float angle = 0.6;\n    float sit = sin(iTime * .14);\n    float dist = 9.0 + sin(iTime * .2) * 2.0;\n    ro = vec3(\n        sin(angle + sit * .28) * dist,\n        cos(iTime * 1.2) * .15 + camera_pos.y, \n        cos(angle + sit * .28) * dist);\n    \n\tvec3 rd = normalize(vec3(uv.x - .5, uv.y, 1.0));\n    \n    rd = (viewMatrix(plane_pos, ro, vec_up) * vec4(rd, 1.0)).xyz;\n    \n    object o = rayMarch(ro, rd);\n    vec3 p = ro + rd * o.d;\n    \n    vec3 r = render(o, p, rd, uv);\n\n    vec2 guv = uv + noise(vec2(iTime)) + noise(vec2(uv));\n    float h = hash12(guv)*0.3+0.7;\n    vec3 col = r * mix(1.0, h, clamp(r.y, 0.7, 1.0));\n    \n    // gamma\n    col.xyz = pow( col.xyz, vec3(0.835) );\n    \n    //col = texture(iChannel2, uv).xyz;\n\n    fragColor = vec4(col * 1.8,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Math\nconst float PI = 3.1415926535897932384626433832795;\nconst float PI_2 = 1.57079632679489661923;\nconst float PI_4 = 0.785398163397448309616;\n\nmat4 scale(float x, float y, float z){\n    return mat4(\n        vec4(x,   0.0, 0.0, 0.0),\n        vec4(0.0, y,   0.0, 0.0),\n        vec4(0.0, 0.0, z,   0.0),\n        vec4(0.0, 0.0, 0.0, 1.0)\n    );\n}\n\nmat4 translate(float x, float y, float z){\n    return mat4(\n        vec4(1.0, 0.0, 0.0, 0.0),\n        vec4(0.0, 1.0, 0.0, 0.0),\n        vec4(0.0, 0.0, 1.0, 0.0),\n        vec4(x,   y,   z,   1.0)\n    );\n}\n\nmat3 rotateX(float phi){\n    float c = cos(phi);\n    float s = sin(phi);\n\n    return mat3(\n        vec3(1.0, 0.0, 0.0),\n        vec3(0.0, c, -s),\n        vec3(0.0, s, c));\n}\n\nmat3 rotateY(float theta){\n\tfloat c = cos(theta);\n    float s = sin(theta);\n\n    return mat3(\n        vec3(c, 0.0, s),\n        vec3(0.0, 1.0, 0.0),\n        vec3(-s, 0.0, c));\n}\n\nmat3 rotateZ(float psi){\n    float c = cos(psi);\n    float s = sin(psi);\n\n    return mat3(\n        vec3(c, -s, 0.0),\n        vec3(s, c, 0.0),\n        vec3(0.0, 0.0, 1.0));\n}\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) \n{\n\tvec3 f = normalize(center - eye);\n\tvec3 s = normalize(cross(f, up));\n\tvec3 u = cross(s, f);\n\treturn mat4(\n\t\tvec4(s, 0.0),\n\t\tvec4(u, 0.0),\n\t\tvec4(-f, 0.0),\n\t\tvec4(0.0, 0.0, 0.0, 1)\n\t);\n}\n\n// Noise\n\nvec2 random(vec2 st)\n{\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\nfloat noise(vec2 st)\n{\n    vec2 f = fract(st);\n    vec2 i = floor(st);\n    \n    vec2 u = f * f * f * (f * (f * 6. - 15.) + 10.);\n    \n    float r = mix( mix( dot( random(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n    return r * .5 + .5;\n}\n\nfloat fbm(vec2 st)\n{\n    float value = 0.;\n    float amplitude = .5;\n    float frequency = 0.;\n    \n    for (int i = 0; i < 8; i++)\n    {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    \n    return value;\n}\n\n// Noise and FBM (as seen on iq tutorials)\nconst mat3 m3  = mat3( 0.00,  0.80,  0.60,\n                      -0.80,  0.36, -0.48,\n                      -0.60, -0.48,  0.64 );\nconst mat3 m3i = mat3( 0.00, -0.80, -0.60,\n                       0.80,  0.36, -0.48,\n                       0.60, -0.48,  0.64 );\nconst mat2 m2 = mat2(  0.80,  0.60,\n                      -0.60,  0.80 );\nconst mat2 m2i = mat2( 0.80, -0.60,\n                       0.60,  0.80 );\n\nfloat hash1( vec2 p )\n{\n    p  = 50.0*fract( p*0.3183099 );\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat hash1( float n )\n{\n    return fract( n*17.0*fract( n*0.3183099 ) );\n}\n\nvec4 noised( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 w = fract(x);\n    \n    vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);\n    vec3 du = 30.0*w*w*(w*(w-2.0)+1.0);\n\n    float n = p.x + 317.0*p.y + 157.0*p.z;\n    \n    float a = hash1(n+0.0);\n    float b = hash1(n+1.0);\n    float c = hash1(n+317.0);\n    float d = hash1(n+318.0);\n    float e = hash1(n+157.0);\n\tfloat f = hash1(n+158.0);\n    float g = hash1(n+474.0);\n    float h = hash1(n+475.0);\n\n    float k0 =   a;\n    float k1 =   b - a;\n    float k2 =   c - a;\n    float k3 =   e - a;\n    float k4 =   a - b - c + d;\n    float k5 =   a - c - e + g;\n    float k6 =   a - b - e + f;\n    float k7 = - a + b + c - d + e - f - g + h;\n\n    return vec4( -1.0+2.0*(k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z), \n                      2.0* du * vec3( k1 + k4*u.y + k6*u.z + k7*u.y*u.z,\n                                      k2 + k5*u.z + k4*u.x + k7*u.z*u.x,\n                                      k3 + k6*u.x + k5*u.y + k7*u.x*u.y ) );\n}\n\nvec4 fbmd( in vec3 x, int octaves ) \n{\n    float f = 1.98;  // could be 2.0\n    float s = 0.49;  // could be 0.5\n    float a = 0.0;\n    float b = 0.5;\n    vec3  d = vec3(0.0);\n    mat3  m = mat3(1.0,0.0,0.0,\n                   0.0,1.0,0.0,\n                   0.0,0.0,1.0);\n    for( int i=0; i < octaves; i++ )\n    {\n        vec4 n = noised(x);\n        a += b*n.x;          // accumulate values\t\t\n        d += b*m*n.yzw;      // accumulate derivatives\n        b *= s;\n        x = f*m3*x;\n        m = f*m3i*m;\n    }\n    return vec4( a, d );\n}\n\n//https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * 443.8975);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// Primitives\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0));\n}\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat rounding( in float d, in float h )\n{\n    return d - h;\n}\n\n\nfloat opOnion( in float sdf, in float thickness )\n{\n    return abs(sdf)-thickness;\n}\n\nfloat opUnion( float d1, float d2 ) { return min(d1,d2); }\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec3 checkers_pattern(vec2 sz)\n{\n    float v = float(mod(sz.x + sz.y, 2.0) <= 0.01);\n    return vec3(0.4 + 0.5 * v);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 iuv = floor(uv * 10.0);\n    \n    vec3 col = checkers_pattern(iuv) * fbm(uv * 15.5) * vec3(0.75, 0.68, 0.591);\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv.x *= .8;\n    \n    float no = noise(vec2(1.2, 2.4) + uv * 6.);\n\n    float n0 = .6 + .4 * smoothstep(\n        .24,\n        0.55,\n        fbm(vec2(uv.x * 10., uv.y * 30.) + vec2(15.0, 10.0)));\n    uv += no;\n    float n1 = fbm(vec2(uv.x * 5., uv.y * 20.) + vec2(2.0, 2.0));\n    float n2 = smoothstep(\n        1.0,\n        0.3,\n        fbm(vec2(uv.x * 1., uv.y * 10.)));\n    \n    vec3 col = n0 * n1 * n2 * vec3(0.82, 0.48, 0.28);\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}