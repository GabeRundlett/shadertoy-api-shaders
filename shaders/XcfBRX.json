{
    "Shader": {
        "info": {
            "date": "1724086824",
            "description": "combination fractal 62 by gaz and lansflare",
            "flags": 0,
            "hasliked": 0,
            "id": "XcfBRX",
            "likes": 2,
            "name": "moving with mouse light",
            "published": 3,
            "tags": [
                "fractal",
                "light",
                "star",
                "cineshader",
                "lansflare"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 170
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\n\n// Simulate the pitch inputs using a smoothed stairs function STEP\n#define STEP1(x) ((x) - sin(x))\n#define STEP(x, offset, amp) (STEP1(STEP1(offset + x * amp)) * 1.15)\n#define is (iTime)\n\nfloat pitches[9];\nvoid genPitches() {\n  pitches[0] = STEP(is, 1., 1.);\n  pitches[1] = STEP(is, 2., 2.);\n  pitches[2] = STEP(is, 3., 3.);\n  pitches[3] = STEP(is, 4., 4.);\n  pitches[4] = STEP(is, 5., 1.);\n  pitches[5] = STEP(is, 6., 2.);\n  pitches[6] = STEP(is, 7., 3.);\n  pitches[7] = STEP(is, 8., 4.);\n  pitches[8] = STEP(is, 1., 5.);\n}\n#define ipitch_1 pitches[0]\n#define ipitch_2 pitches[1]\n#define ipitch_3 pitches[2]\n#define ipitch_4 pitches[3]\n#define ipitch_5 pitches[4]\n#define ipitch_6 pitches[5]\n#define ipitch_7 pitches[6]\n#define ipitch_8 pitches[7]\n#define ipitch_9 pitches[8]\n\n#define icolor (iTime*1.05)\n#define imoveFWD (iTime*.1)\n\n\n#define FAR 100.\n#define PI 3.14159\nmat2 rot(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat sdBox( vec3 p, vec3 b ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.x)),0.0);\n}\n\nvec2 boxes(vec3 p) {\n    vec2 h,t = vec2(100,0);\n    vec3 q = p;\n   \n    h = vec2(sdBox(abs(q)-vec3(1,5,1), vec3(1,1,1))-.1, 1);\n    t = h.x<t.x ? h : t;\np.yz *= rot((iTime*.05 + 0.));\n       \n        p.xz *= rot((iTime*.5 + 0.));\n    q = p;\n       q.xz *= rot((iTime*.5 + 0.));\n    h = vec2(sdBox(abs(q)-vec3(0,4,2), vec3(4,1,1))-.1, 1);\n    t = h.x<t.x ? h : t;\n    return t;\n}\n\nvec2 map(vec3 p) {\n    \n  p.xy *= rot((iTime*1.05 + 0.));\n    for (float i=0.; i<3.; i++) {\n        p = abs(p);\n         \n        p -= i*mix(1.,1.5,sin(ipitch_2)*i*.5+.5);\n           p.xy *=rot(iTime*.3005);\n    }\n   \n    vec2 t = min(boxes(p), boxes(p*2.)/2.);\n    return t;\n}\n\nvec3 normal(vec3 p) {\n    vec2 e = vec2(.001,0);\n    return normalize(map(p).x - vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvoid cam(inout vec3 p) {\n   \n}\nfloat noise(float t)\n{\nreturn texture(iChannel0,vec2(t, 0.0) / iChannelResolution[0].xy).x;\n}\nfloat noise(vec2 t)\n{\nreturn texture(iChannel0,(t + vec2(iTime)) / iChannelResolution[0].xy).x;\n}\n\nvec3 lensflare(vec2 uv,vec2 pos)\n{\nvec2 main = uv-pos;\nvec2 uvd = uv*(length(uv));\n\nfloat ang = atan(main.y, main.x);\nfloat dist=length(main); dist = pow(dist,.1);\nfloat n = noise(vec2((ang-iTime/9.0)*16.0,dist*32.0));\n\nfloat f0 = 1.0/(length(uv-pos)*16.0+1.0);\n\nf0 = f0+f0*(sin((ang+iTime/18.0 + noise(abs(ang)+n/2.0)*2.0)*12.0)*.1+dist*.1+.8);\n\nfloat f2 = max(1.0/(1.0+32.0*pow(length(uvd+0.8*pos),2.0)),.0)*00.25;\nfloat f22 = max(1.0/(1.0+32.0*pow(length(uvd+0.85*pos),2.0)),.0)*00.23;\nfloat f23 = max(1.0/(1.0+32.0*pow(length(uvd+0.9*pos),2.0)),.0)*00.21;\n\nvec2 uvx = mix(uv,uvd,-0.5);\n\nfloat f4 = max(0.01-pow(length(uvx+0.4*pos),2.4),.0)*6.0;\nfloat f42 = max(0.01-pow(length(uvx+0.45*pos),2.4),.0)*5.0;\nfloat f43 = max(0.01-pow(length(uvx+0.5*pos),2.4),.0)*3.0;\n\nuvx = mix(uv,uvd,-.4);\n\nfloat f5 = max(0.01-pow(length(uvx+0.2*pos),5.5),.0)*2.0;\nfloat f52 = max(0.01-pow(length(uvx+0.4*pos),5.5),.0)*2.0;\nfloat f53 = max(0.01-pow(length(uvx+0.6*pos),5.5),.0)*2.0;\n\nuvx = mix(uv,uvd,-0.5);\n\nfloat f6 = max(0.01-pow(length(uvx-0.3*pos),1.6),.0)*6.0;\nfloat f62 = max(0.01-pow(length(uvx-0.325*pos),1.6),.0)*3.0;\nfloat f63 = max(0.01-pow(length(uvx-0.35*pos),1.6),.0)*5.0;\n\nvec3 c = vec3(.0);\n\nc.r+=f2+f4+f5+f6; c.g+=f22+f42+f52+f62; c.b+=f23+f43+f53+f63;\nc+=vec3(f0);\n\nreturn c;\n}\n\nvec3 cc(vec3 color, float factor,float factor2) // color modifier\n{\nfloat w = color.x+color.y+color.z;\nreturn mix(color,vec3(w)*factor,w*factor2);\n}\n\nvoid mainImage(out vec4 O, vec2 C)\n\n\n{\n    O=vec4(0);\n    \n    \n    vec2 uv = C/iResolution.xy;\n    uv = uv*2.-1.;\n    uv.x *= iResolution.x/iResolution.y;\n    genPitches();\n\n\nuv.x *= iResolution.x/iResolution.y; //fix aspect ratio\nvec3 mouse = vec3(iMouse.xy/iResolution.xy - 0.5,iMouse.z-.5);\nmouse*=3.;\nmouse.x *= iResolution.x/iResolution.y; //fix aspect ratio\n\nvec3 color = vec3(0.5,0.5,0.5)*lensflare(uv,mouse.xy);\ncolor = cc(color,.5,.01);\n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0,0,-20.);\n     uv.xy-=mouse.xy;\n    vec3 rd = normalize(vec3(uv, 1));\n\n    //cam(ro);cam(rd);\n\n    float t = 0.;\n    for (float i=0.; i<10.; i++) {\n        vec3 p = ro + rd*t;\n\n        vec2 h = map(p);\n        float d = h.x;\n        float m = h.y;\n        t += d;\n        if (t>FAR) {\n            break;\n        }\n        if (d < .001) {\n            vec3 sn = normal(p);\n            col = .5+.5*cos((sn*.3+.15)*PI+icolor+vec3(0,4,8).yxz + dot(sn,vec3(1))*PI );\n            break;\n        }\n        float a = atan(uv.y,uv.x);\n        col += (1./d *.02)*(.5*.5+cos(imoveFWD+a+vec3(0,2,4)));\n    }\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p=g*d+color;\n         \n\n\n        p.zy*=floor(p.zy);\n       p.xy*=floor(p.xy);\n        a=20.;\n        p.z+=iTime;\n        p=mod(p-a,a*2.)-a;\n        s=6.;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n           \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n           \n            s*=e=1.4+sin(iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+cos(iTime*.03+.5*cos(iTime*.3))*3.,\n                    120,\n                    8.+cos(iTime*.05)*5.\n                 )+col+color;\n         }\n         g+=e=length(p.yz)/s;\n    }\n       O+=vec4(color*2.,1.);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}