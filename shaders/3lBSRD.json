{
    "Shader": {
        "info": {
            "date": "1565141533",
            "description": "More about technique here later.  Simple data-driven blowout technique that sends colors to the edge of the rgb cube along directions normal to the isosurface of a gaussian fit to image color probabilities (in a sample offline image) at the location of th",
            "flags": 2,
            "hasliked": 0,
            "id": "3lBSRD",
            "likes": 5,
            "name": "purple blowout",
            "published": 3,
            "tags": [
                "simple",
                "video",
                "blowout"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 950
        },
        "renderpass": [
            {
                "code": "\n\nvec2 grad(in vec2 uv_in, in float h) {\n    vec2 uv = vec2(1.0 - uv_in.x, uv_in.y);\n    float h_inv = 1.0 / h;\n    float f = dot(vec3(1.0), texture(iChannel1, uv).rgb);\n    float fu = dot(vec3(1.0), texture(iChannel1, uv + vec2(h, 0.0)).rgb);\n    float fv = dot(vec3(1.0), texture(iChannel1, uv + vec2(0.0, h)).rgb);\n    return h_inv * vec2(fu - f, fv - f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).rgb;\n    \n    mat3 blowout = mat3(4.72376,  -8.85515,   3.84846,\n                        -8.85515,  18.4378,   -8.71892,\n                        3.84846,  -8.71892,   4.48226);\n    vec3 cent = vec3(0.47968451, \n                     0.450743, \n                     0.45227517);\n\n    float weight = step(fragCoord.x, iMouse.x);\n    blowout = (1.0 - weight) * blowout + weight * mat3(1.0, 0.0, 0.0,\n                                                       0.0, 1.0, 0.0,\n                                                       0.0, 0.0, 1.0);\n    \n    vec3 dir = blowout * (col - cent);\n    \n    vec3 maxes = (step(vec3(0.0), dir) - col)/dir;\n    \n    float amount = min(maxes.x, min(maxes.y, maxes.z));\n    \n    col = col + dir * amount;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}