{
    "Shader": {
        "info": {
            "date": "1702424103",
            "description": "Use the mouse to agitate the wave.",
            "flags": 32,
            "hasliked": 0,
            "id": "dtGBDG",
            "likes": 3,
            "name": "MC Ripple Pool 2",
            "published": 3,
            "tags": [
                "wave",
                "simulation",
                "feedback",
                "montecarlo",
                "ripple"
            ],
            "usePreview": 0,
            "username": "Real_NC",
            "viewed": 195
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, in vec2 U )\n{\n    O = tex(U).rrrr;\n    O.g *= sign(O.r)*.2+.8;\n    O = pow(abs(O)*22., vec4(.6));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Here red channel stores value and green channel stores delta\n\n#define DMPG 0.99\n#define RC(r) vec2(cos(r.x*6.2831853), sin(r.x*6.2831853))*sqrt(r.y)\n#define SAMPLES 80.\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    O *= 0.;\n    \n    if(iFrame > 0)\n    {\n        O = tex(U);\n        \n        // mouse monopole\n        if(length((iMouse.xy - U)/R.y) <= .01 && iMouse.z > 0.5) O.g = cos(iTime*16.)*6.;\n        \n        // starting dipole\n        if(length((U + U - R.xy)/R.y + vec2(0.4, 0.0)) <= .05) O.g = cos(iTime*16.1);\n        if(length((U + U - R.xy)/R.y - vec2(0.4, 0.0)) <= .05) O.g = cos(iTime*16.);\n        \n        \n        float v = 0.;\n        for(float n = 0.; n < SAMPLES; n++)\n        {\n            vec2 t = tex(U + R.y*.03*RC(pcg2(U + n*R.xy + float(iFrame*10)))).rg;\n            v += t.r + t.g - O.r - O.g*DMPG;\n        }\n        O.g += v/SAMPLES;\n        O.rg *= vec2(DMPG, DMPG); // damp\n        O.r += O.g; // change wave value by delta\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define tex(u) texelFetch(iChannel0, ivec2(u), 0)\n#define R iResolution\n\n// https://www.pcg-random.org/\nvec2 pcg2(vec2 p)\n{\n    uvec2 v = floatBitsToUint(p);// modified to accept float\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    return vec2(v)*(1.0/float(0xffffffffU)); // modified to return float\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}