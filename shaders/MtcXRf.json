{
    "Shader": {
        "info": {
            "date": "1480916619",
            "description": "Analytical computation of the exact bounding box for an arbitrarily oriented disk. See [url]http://iquilezles.org/articles/diskbbox/diskbbox.htm[/url] for the derivation.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtcXRf",
            "likes": 40,
            "name": "Cylinder - bounding box",
            "published": 3,
            "tags": [
                "3d",
                "aabb",
                "cylinder",
                "bounding",
                "boundingbox"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 5035
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2016 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// See https://iquilezles.org/articles/diskbbox\n//\n//\n// Analytical computation of the exact bounding box for an arbitrarily oriented disk. \n// It took me a good two hours to find the symmetries and term cancellations that \n// simplified the original monster equation into something pretty compact in its final form.\n//\n// For a disk of raius r centerd in the origin oriented in the direction n, has extent e:\n//\n// e = r·sqrt(1-n²)\n//\n// Derivation and more info in the link above\n\n\n// Disk             - 3D BBox : https://www.shadertoy.com/view/ll3Xzf\n// Cylinder         - 3D BBox : https://www.shadertoy.com/view/MtcXRf\n// Ellipse          - 3D BBox : https://www.shadertoy.com/view/Xtjczw\n// Cone boundong    - 3D BBox : https://www.shadertoy.com/view/WdjSRK\n// Cubic     Bezier - 2D BBox : https://www.shadertoy.com/view/XdVBWd \n// Quadratic Bezier - 3D BBox : https://www.shadertoy.com/view/ldj3Wh\n// Quadratic Bezier - 2D BBox : https://www.shadertoy.com/view/lsyfWc\n\n\n// Cylinder intersection: https://www.shadertoy.com/view/4lcSRn\n// Cylinder bounding box: https://www.shadertoy.com/view/MtcXRf\n// Cylinder distance:     https://www.shadertoy.com/view/wdXGDr\n\n\n#define AA 3\n\nstruct bound3\n{\n    vec3 mMin;\n    vec3 mMax;\n};\n    \n//---------------------------------------------------------------------------------------\n// bounding box for a cylinder (https://iquilezles.org/articles/diskbbox)\n//---------------------------------------------------------------------------------------\nbound3 CylinderAABB( in vec3 pa, in vec3 pb, in float ra )\n{\n    vec3 a = pb - pa;\n    vec3 e = ra*sqrt( 1.0 - a*a/dot(a,a) );\n    \n    return bound3( min( pa - e, pb - e ),\n                   max( pa + e, pb + e ) );\n}\n\n// ray-cylinder intersetion (returns t and normal)\nvec4 iCylinder( in vec3 ro, in vec3 rd, \n                in vec3 pa, in vec3 pb, in float ra ) // point a, point b, radius\n{\n    // center the cylinder, normalize axis\n    vec3 cc = 0.5*(pa+pb);\n    float ch = length(pb-pa);\n    vec3 ca = (pb-pa)/ch;\n    ch *= 0.5;\n\n    vec3  oc = ro - cc;\n\n    float card = dot(ca,rd);\n    float caoc = dot(ca,oc);\n    \n    float a = 1.0 - card*card;\n    float b = dot( oc, rd) - caoc*card;\n    float c = dot( oc, oc) - caoc*caoc - ra*ra;\n    float h = b*b - a*c;\n    if( h<0.0 ) return vec4(-1.0);\n    h = sqrt(h);\n    float t1 = (-b-h)/a;\n    //float t2 = (-b+h)/a; // exit point\n\n    float y = caoc + t1*card;\n\n    // body\n    if( abs(y)<ch ) return vec4( t1, normalize( oc+t1*rd - ca*y ) );\n    \n    // caps\n    float sy = sign(y);\n    float tp = (sy*ch - caoc)/card;\n    if( abs(b+a*tp)<h )\n    {\n        return vec4( tp, ca*sy );\n    }\n\n    return vec4(-1.0);\n}\n\n\n// ray-box intersection\nvec2 iBox( in vec3 ro, in vec3 rd, in vec3 cen, in vec3 rad ) \n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*(ro-cen);\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\t\n\tif( tN > tF || tF < 0.0) return vec2(-1.0);\n\n\treturn vec2( tN, tF );\n}\n\n\nfloat hash1( in vec2 p )\n{\n    return fract(sin(dot(p, vec2(12.9898, 78.233)))*43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    \n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n\n        // camera position\n        vec3 ro = vec3( -0.5, 0.4, 1.5 );\n        vec3 ta = vec3( 0.0, 0.0, 0.0 );\n        // camera matrix\n        vec3 ww = normalize( ta - ro );\n        vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n        vec3 vv = normalize( cross(uu,ww));\n        // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // cylidner animation\n        vec3  c_a =  0.2 + 0.3*sin(iTime*vec3(1.11,1.27,1.47)+vec3(2.0,5.0,6.0));\n        vec3  c_b = -0.2 + 0.3*sin(iTime*vec3(1.23,1.41,1.07)+vec3(0.0,1.0,3.0));\n        float c_r =  0.3 + 0.2*sin(iTime*1.3+0.5);\n\n\n        // render\n        vec3 col = vec3(0.4)*(1.0-0.3*length(p));\n\n        // raytrace\n        vec4 tnor = iCylinder( ro, rd, c_a, c_b, c_r );\n        float t = tnor.x;\n        float tmin = 1e10;\n        if( t>0.0 )\n        {\n            tmin = t;\n            // shading/lighting\t\n            vec3 pos = ro + t*rd;\n            vec3 nor = tnor.yzw;\n            float dif = clamp( dot(nor,vec3(0.5,0.7,0.2)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n            col = sqrt( vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.7,0.5)*dif );\n            col *= vec3(1.0,0.75,0.3);\n        }\n\n\n        // compute bounding box of cylinder\n        bound3 bbox = CylinderAABB( c_a, c_b, c_r );\n\n        // raytrace bounding box\n        vec3 bcen = 0.5*(bbox.mMin+bbox.mMax);\n        vec3 brad = 0.5*(bbox.mMax-bbox.mMin);\n        vec2 tbox = iBox( ro, rd, bcen, brad );\n        if( tbox.x>0.0 )\n        {\n            // back face\n            if( tbox.y < tmin )\n            {\n                vec3 pos = ro + rd*tbox.y;\n                vec3 e = smoothstep( brad-0.03, brad-0.02, abs(pos-bcen) );\n                float al = 1.0 - (1.0-e.x*e.y)*(1.0-e.y*e.z)*(1.0-e.z*e.x);\n                col = mix( col, vec3(0.0), 0.25 + 0.75*al );\n            }\n            // front face\n            if( tbox.x < tmin )\n            {\n                vec3 pos = ro + rd*tbox.x;\n                vec3 e = smoothstep( brad-0.03, brad-0.02, abs(pos-bcen) );\n                float al = 1.0 - (1.0-e.x*e.y)*(1.0-e.y*e.z)*(1.0-e.z*e.x);\n                col = mix( col, vec3(0.0), 0.15 + 0.85*al );\n            }\n        }\n\n        // no gamma required here, it's done in line 118\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    // dithering\n    tot += ((hash1(fragCoord.xy)+hash1(fragCoord.yx+13.1))/2.0 - 0.5)/256.0;\n\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}