{
    "Shader": {
        "info": {
            "date": "1607529180",
            "description": "This shader is the result of an accident. I wanted to make a displacement map for the sphere, but I'm ok with this.",
            "flags": 0,
            "hasliked": 0,
            "id": "3dKfRK",
            "likes": 3,
            "name": "Sphere Intrusion Variant",
            "published": 3,
            "tags": [
                "planet"
            ],
            "usePreview": 0,
            "username": "andrinr",
            "viewed": 341
        },
        "renderpass": [
            {
                "code": "/////////////////////////////////////////////////////////////\n\n// Constants\n\nfloat planetSize = 0.04;\nvec3 planetCenter = vec3(0,0,-0.06);\n\n\n/////////////////////////////////////////////////////////////\n\n\nfloat map(vec3 p){\n    //sphere\n    vec3 q = p + planetCenter;\n    \n    // Map cartesian to spherical coordinate system\n    // https://en.wikipedia.org/wiki/Spherical_coordinate_system#Cartesian_coordinates\n    float r = length(q);\n    float a = atan(q.y/q.x) + iTime*0.03*p.z;\n    float b = atan(length(q.xy)/q.z) + iTime*0.1;\n    \n    float d = texture(iChannel0,vec2(a,b)/3.141).x;\n    return length(q) - planetSize + 0.02*d; \n} \n\n\n// Raytracer\nfloat trace(vec3 origin, vec3 ray){ \n    float t = 0.; \n    for (int i = 0; i < 64; ++i){ \t\n        vec3 p = origin + ray * t; \n        float d = map(p);\n        t += d*0.4; \n    } return t; \n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) { \n    // Normalized pixel coordinates (from 0 to 1) \n    vec2 uv = fragCoord/iResolution.xy; \n    uv = uv * 2.0 - 1.0; \n    uv.x *= iResolution.x / iResolution.y; \n    \n    // Start raytracer\n    vec3 ray = normalize(vec3(uv, 1.0)); \n    float rotSpeed = 0.4;\n    vec3 origin = vec3(0,0,0); \n    float t = trace(origin, ray); \n    \n    vec3 surface = origin + ray * t;\n    \n    \n    // Calculate fog\n    float fog = 1.0 / (1.0 + t*t*400.); \n    vec3 fc = vec3(fog); \n    // Output to screen \n    fragColor = vec4(fc,1.0); \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}