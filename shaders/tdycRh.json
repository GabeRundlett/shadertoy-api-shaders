{
    "Shader": {
        "info": {
            "date": "1602187598",
            "description": "Always wanted to cast some rays and finally did, the stuff is mindblowing. So, this is my progress so far, took me about a week, starting from being completely clueless about any raycasting stuff. Still have a lot of things to figure out, though.",
            "flags": 0,
            "hasliked": 0,
            "id": "tdycRh",
            "likes": 48,
            "name": "First Time!",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf"
            ],
            "usePreview": 0,
            "username": "thepheer",
            "viewed": 932
        },
        "renderpass": [
            {
                "code": "// light, material, raymarching result\nstruct L { vec3 c; vec3 p; };\nstruct M { vec3 c; float r; float d; };\nstruct R { M m; vec3 p; float t; };\n\n// M mmin(M a, M b) { if (a.d < b.d) return a; return b; }\n// M mmax(M a, M b) { if (a.d > b.d) return a; return b; }\nM msmin(M a, M b, float k) {\n    float h = clamp(0.5 + 0.5*(a.d - b.d)/k, 0.0, 1.0);\n    return M(mix(a.c, b.c, h), mix(a.r, b.r, h), mix(a.d, b.d, h) - k*h*(1.0 - h));\n}\n\nM map(vec3 p) {\n    const vec2 n = vec2(0.0, 1.0);\n    mat3 r = rot(n.yxx, 0.3*iTime) * rot(n.xyx, 0.5*iTime) * rot(n.xxy, 0.7*iTime);\n    vec3 t = vec3(vec2(1.0, 1.5)*sin(vec2(0.6, 0.3)*iTime), 0.0);\n    return msmin(\n        M(vec3(1.0), 1.0, -sdBox(p, vec3(3.0, 1.5, 3.0))),\n        msmin(\n            M(vec3(1.0), 0.02, sdSphere(p + t, 1.0) + 0.001*prod3(sin(60.0*p))),\n            M(vec3(1.0), 0.98, sdBox(r*(p - t), vec3(0.75))),\n            1.0\n        ),\n        0.5\n    );\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 normal(vec3 p) {\n    const vec3 k = vec3(1.0, -1.0, 1e-4);\n    return normalize(\n        k.xyy*map(p + k.xyy*k.z).d + \n        k.yyx*map(p + k.yyx*k.z).d + \n        k.yxy*map(p + k.yxy*k.z).d + \n        k.xxx*map(p + k.xxx*k.z).d\n    );\n}\n\nbool raymarch(vec3 rc, vec3 ro, vec3 rd, out R rr) {\n\t// rayconfig rc: threshold, near, far\n    for (rr.t = rc.y; rr.t < rc.z; rr.t += rr.m.d) {\n        rr.p = ro + rr.t*rd;\n        rr.m = map(rr.p);\n        if (rr.m.d < rc.x) return true;\n    }\n    return false;\n}\n\nvec3 color(vec3 p, vec3 n) {\n    const L lights[] = L[] (\n    \tL(vec3(3.0, 2.0, 1.0), vec3(-2.5, 1.0, 2.5)),\n        L(vec3(1.0, 2.0, 3.0), vec3(+2.5, 1.0, 2.5))\n\t);\n\n    vec3 c = vec3(0.0); // 0.002 * vec3(0.1, 2.0, 4.0);\n    for (int i = 0; i < 2; i++) {  \n        vec3 lp = lights[i].p - p;\n        float ll = length(lp);\n        vec3 ld = lp/ll;\n        float la = max(0.0, dot(ld, n)/exp(ll));\n        c += la*lights[i].c;\n    }\n    return c;\n}\n\nvec3 render(vec2 uv) {\n    vec3 rc = vec3(1e-3, 1e-2, 1e+1);\n    vec3 rt = vec3(1.8*uv,  0.0);\n    vec3 ro = vec3(1.4*uv, -2.0);\n    vec3 rd = normalize(rt - ro);\n    R rr;\n\n    vec3 c = vec3(0.0);\n    for (float r = 1.0; r > 1e-3 && raymarch(rc, ro, rd, rr);) {\n        // if (rr.m.d < 0.0) { c.r += r; break; }\n        vec3 n = normal(rr.p);\n        float a = rr.m.r*r;\n        c += a*rr.m.c*color(rr.p, n);\n        r -= a;\n        ro = rr.p;\n        rd = reflect(rd, n);\n    }\n    return c;\n}\n\nvoid mainImage(out vec4 rgba, vec2 xy) {\n    vec2 r = vec2(iResolution.x/iResolution.y, 1.0);\n    vec2 uv = 2.0*xy/iResolution.xy - 1.0;\n    rgba = vec4(srgb(render(r*uv)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://iquilezles.org/articles/distfunctions\nfloat sdPlane(vec3 p, vec3 n, float h) {\n    return dot(p, n) + h;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdTorus(vec3 p, vec2 t) {\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\n    return length(q) - t.y;\n}\n\n// https://iquilezles.org/articles/smin\nfloat smin(float a, float b, float k) {\n    float h = max(k - abs(a - b), 0.0);\n    return min(a, b) - 0.25*h*h/k;\n}\n\n// https://iquilezles.org/articles/smin\nfloat smax(float a, float b, float k) {\n    float h = max(k - abs(a - b), 0.0);\n    return max(a, b) + 0.25*h*h/k;\n}\n\n// https://gamedev.stackexchange.com/a/148088\nvec3 srgb(vec3 rgb) {\n    bvec3 t = lessThan(rgb, vec3(0.0031308));\n    vec3 a = 1.055*pow(rgb, vec3(1.0/2.4)) - 0.055;\n    vec3 b = 12.92*rgb;\n    return mix(a, b, t);\n}\n\nfloat prod3(vec3 v) {\n\treturn v.x*v.y*v.z;\n}\n\nmat3 rot(vec3 axis, float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    vec3 a = axis*(1.0 - c);\n    vec4 b = vec4(axis*s, c);\n    vec2 n = vec2(-1.0, 1.0);\n    return mat3(\n        axis.xyx*a.xxz + b.wzy*n.yxy,\n        axis.yyz*a.xyy + b.zwx*n.yyx,\n        axis.xzz*a.zyz + b.yxw*n.xyy\n    );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}