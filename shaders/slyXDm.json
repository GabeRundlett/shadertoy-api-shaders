{
    "Shader": {
        "info": {
            "date": "1640807175",
            "description": "Hope you find it useful, could probably be improved!\n\n+ not sure if it's continuous (but looks good enough)",
            "flags": 0,
            "hasliked": 0,
            "id": "slyXDm",
            "likes": 3,
            "name": "Spaced Pulses Example",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 232
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n\nfloat func(float a, float b) { return tanh(a * b) / tanh(a); }\nfloat thc(float a, float b) { return func(a, cos(b)); }\nfloat ths(float a, float b) { return func(a, sin(b)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    float zoom = 5. + 2. * thc(2., 0.8 * iTime);\n    \n    // Height of pulses (in [-0.5, 0.5] range)\n    float h = 1. / zoom;// + 0.05 * cos(10. * uv.x + iTime);   \n    \n    // Width of pulses\n    float w = 1.5 + 0.5 * ths(4., iTime);\n    \n    // Spacing of pulses\n    float sp = 3. + thc(4., iTime);\n    \n    // Sharpness / squareness of pulses (larger numbers -> squarer pulses)\n    float shrp = 3.;\n    \n    // Translate x\n    float t = 0.; // iTime;\n    \n    // x value (works well with polar co-ordinates)\n    float x = zoom * uv.x;\n    \n    // y value\n    float y = w * (mod(x + t, sp) - 0.5 * sp);\n    y = clamp(y, -1., 1.);\n    y = 0.5 * y * (3. - y * y);\n    \n    // (y = 0.5 * cos(pi * y) works well on it's own)\n    y = 0.5 * cos(pi * y) + 0.5;\n    // (smoothstep makes the base of the pulses smoother (I think))\n    y = smoothstep(0., 1., y); \n    y = func(shrp, y) - 0.5;\n    \n    // Shape (ty fabrice) \n    float v = -uv.y + 2. * h * y;\n    float s = 0.5 * smoothstep(-.7,.7, v/fwidth(v) );\n    //float px = 2./iResolution.y;\n    //s = 0.5 * smoothstep(-px, px, -uv.y + 2. * h * y);\n           \n    // Red lines\n    float s2 = 0.75 * (1. + thc(2., iTime)) * smoothstep(-0.005, 0.005, -abs(abs(uv.y)-h) + 0.001);\n    \n    fragColor = vec4(s2, s, s, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}