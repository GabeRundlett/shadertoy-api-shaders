{
    "Shader": {
        "info": {
            "date": "1657222343",
            "description": "It sparkles, it melts GPUs, I learnt something new :)",
            "flags": 4,
            "hasliked": 0,
            "id": "NdtfWj",
            "likes": 6,
            "name": "Disco Balls",
            "published": 3,
            "tags": [
                "raymarchspheremusic"
            ],
            "usePreview": 0,
            "username": "itgaz",
            "viewed": 476
        },
        "renderpass": [
            {
                "code": "const float maxt = 1000.0;\nconst float mint = 0.01;\nconst int maxs = 250;\nconst vec3 grad = vec3(0.001,0,0);\nconst float PI=3.14159265;\nconst float PI_2=2.0*PI;\n\n//////////////////////\nmat3 rotX(float a) {\n  float s = sin(a);\n  float c = cos(a);\n  return mat3(\n    vec3(1, 0, 0),\n    vec3(0, c, -s),\n    vec3(0, s, c));}\nmat3 rotY(float a) {\n  float s = sin(a);\n  float c = cos(a);\n  return mat3(\n    vec3(c, 0, s),\n    vec3(0, 1, 0),\n    vec3(-s, 0, c));}\nmat3 rotZ(float a) {\n  float s = sin(a);\n  float c = cos(a);\n  return mat3(\n    vec3(c, -s, 0),\n    vec3(s, c, 0),\n    vec3(0, 0, 1));}\nmat3 identity() {return mat3(vec3(1, 0, 0), vec3(0, 1, 0), vec3(0, 0, 1));}\n//////////////////////\n\nvec4 sun(vec3 p, vec4 o, vec3 c) {\n  float d = length(p-o.xyz)-o.w;\n  \n  float fft = texture(iChannel0, vec2(0.1, 1.0)).r;\n  \n  float t = iTime + (fft/2.0);\n  \n  float i = (2.0 * sin(p.x + t) * sin(p.y) * sin(p.z)) *\n            (2.0 * sin(2.0*p.x+(t*4.0)) * sin(2.0*p.y+(t*PI)) * sin(2.0*p.z-(t*3.192))) *\n            (4.0 * sin(4.0*p.x+(t*2.0)) * sin(4.0*p.y-(t*PI_2)) * sin(4.0*p.z+(t/1.3021))) *\n            (5.0 * sin(5.0*p.x-(t*0.753)) * sin(5.0*p.y+(t/2.67)) * sin(5.0*p.z-(t*13.0)));\n  c *= (i);\n  \n  d -= clamp(i, 0.0, 1.0);\n  \n  return vec4(c,d);\n}\nvec4 sphere(vec3 p, vec4 o, vec3 c) {\n  float d = length(p-o.xyz)-o.w;\n  return vec4(c,d);\n}\nvec4 minsdf(vec4 a, vec4 b) {\n  if(a.w<b.w)return a;\n  else return b;\n}\nvec4 sdf(vec3 p) {\n  vec4 t = vec4(0.0);\n  t.w=maxt;\n  \n  vec3 ballColour = vec3(1.0, 0.4, 0.0);\n  // ballColour = mod(ballColour, p);\n  t=minsdf(t, sun(p, vec4(0.0, 0.0, 0.0, 10.0), ballColour));\n  \n  t=minsdf(t, sun(p, vec4(8.0, 8.0, 0.0, 4.0), vec3(0.4, 0.4, 0.0)));\n  t=minsdf(t, sun(p, vec4(-8.0, 8.0, 0.0, 4.0), vec3(0.4, 0.4, 0.0)));\n  t=minsdf(t, sun(p, vec4(8.0, -8.0, 0.0, 4.0), vec3(0.4, 0.4, 0.0)));\n  t=minsdf(t, sun(p, vec4(-8.0, -8.0, 0.0, 4.0), vec3(0.4, 0.4, 0.0)));\n  //t=minsdf(t, sphere(p, vec4(4.0, 4.5, -8.0, 2.0), vec3(1.0, 1.0, 1.0)));\n  //t=minsdf(t, sphere(p, vec4(-4.0, 4.5, -8.0, 2.0), vec3(1.0, 1.0, 1.0)));\n  return t;\n}\n\nvec4 march(vec3 ro, vec3 rd, out vec3 n, out vec3 p) {\n  float t = 0.0;\n  for(int s=0;s<maxs;++s) {\n    p = ro + (t*rd);\n    \n    p = mod(p / 8.0, vec3(50.0)) - 0.5 * 50.0;\n    \n    vec4 newt=sdf(p);\n    \n    if(newt.w < mint) {\n      n = normalize(vec3(\n        sdf(p+grad.xyy).w - sdf(p-grad.xyy).w,\n        sdf(p+grad.yxy).w - sdf(p-grad.yxy).w,\n        sdf(p+grad.yyx).w - sdf(p-grad.yyx).w\n      ));\n      return newt;\n    }\n    \n    if(newt.w > maxt)\n    {\n      break;\n    }\n    \n    t+=newt.w;\n  }\n  \n  return vec4(0.0);\n}\n\nvec4 shade(vec3 p, vec3 n, vec3 c) {\n  float kA = 0.4;\n  vec3 cA = vec3(1.0, 1.0, 1.0);\n  \n  vec3 cD = vec3(1.0, 1.0, 1.0);\n  vec3 pD = vec3(0.0, 0.0, 0.0);\n  \n  vec3 p2D = normalize(pD - p);\n  float kD = max(0.0, dot(n, p2D));\n  \n  return vec4(((kA*cA) + (kD*cD)) * c, 1.0);\n}\nvec4 shadeBG() {\nreturn vec4(0.0);\n// return vec4(0.4*sin(0.2*iTime), 0.2*cos(iTime*0.4), 0.2, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;    \n    \n    /*\n    vec3 ro = vec3(\n      - sin(iTime) - cos(iTime) * 8.0,\n      - cos(iTime) + sin(iTime) * 2.0,\n      iTime * 2.0);\n      */\n    vec3 ro = vec3(0.0, 0.0, 0.0);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    \n    mat3 r = identity();\n    r *= rotZ(((iTime)*0.2));\n    r *= rotY(sin(- iTime / 2.0) * 0.25);\n    ro *= r;\n    rd *= r;\n    \n    vec3 n = vec3(0);\n    vec3 p = vec3(0);\n    vec4 c = march(ro, rd, n, p);\n    \n    if(c.w==0.0) fragColor=shadeBG();\n    else fragColor = shade(p, n, c.xyz);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}