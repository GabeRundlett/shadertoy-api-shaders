{
    "Shader": {
        "info": {
            "date": "1649809952",
            "description": "ahogado n2",
            "flags": 8,
            "hasliked": 0,
            "id": "7tjcDw",
            "likes": 4,
            "name": "ahogado n2",
            "published": 3,
            "tags": [
                "ahogadon2"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///ahogado n2--12-abril-2022\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(8.0*antialiasing(1.5),b,d)\n//#define PI     3.14159265\n#define TWO_PI 6.28318530\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\nfloat sdTunnel( in vec2 p, in vec2 wh )\n{ p.x = abs(p.x); p.y = -p.y;\n    vec2 q = p - wh;\n   float d1 = dot2(vec2(max(q.x,0.0),q.y));\n    q.x = (p.y>0.0) ? q.x : length(p)-wh.x;\n    float d2 = dot2(vec2(q.x,max(q.y,0.0)));\n    float d = sqrt( min(d1,d2) );\n    return (max(q.x,q.y)<0.0) ? -d : d;\n}\n\n\nfloat onda1(vec2 p)\n{   float t=iTime*5.0;\n    float d1=p.y+ sin(p.x*0.5+0.8*(cos(t-p.x+p.y/2.0)));\n    t=2.0;\n    float d2=p.y+ sin(p.x*0.5+0.8*(cos(t-p.x+p.y/2.0)));\n    return d1+d2;\n}\n\nfloat onda2(vec2 p)\n{   float t=iTime*5.0;\n    float d1=p.y+ sin(p.x*0.5+0.8*(cos(t-p.x+p.y/2.0)));\n    t=2.0;\n    float d2=p.y+ 4.0*sin(p.x*0.5+0.8+d1);\n    return d1+d2;\n}\n\n\nfloat onda3(vec2 p)\n{   float t=iTime*5.0;\n    float d1=p.y+ sin(p.x*0.5+0.8*(cos(t-p.x+p.y/2.0)));\n    t=2.0;\n    float d2=p.y+ 4.0*sin(-p.x+0.4*d1);\n    return d1+d2;\n}\n\nfloat onda(vec2 p)\n{   float t=iTime*5.0;\n    float d1=p.y+ sin(p.x*0.5+t);\n    t=2.0;\n    float d2=p.y+ 4.0*sin(-p.x+2.4*d1*cos(t));\n    return d1+d2;\n}\n\n\n\nvec3 Rostro(vec2 p, vec3 colOut)\n{\n   vec2 p0=p;\n   float d1=onda(vec2(-p.x,-p.y)*2.0);\n   float d2rostro=sdCircle( p,4.0 );\n   float dinter=intersectSDF(d2rostro,d1);\n   \n   float t=iTime;\n   float movx=sin(t);\n   vec2 pmov=vec2(movx,0.0);\n   float d3ojoa= sdTunnel(p+pmov-vec2(-1.2,0.0), vec2(1.0,1.5) );\n   float d3ojob= sdTunnel(p+pmov-vec2( 1.2,0.0), vec2(1.0,1.5) );\n   float d4pupilaa=sdCircle(p+pmov-vec2(-1.5,-1.0),0.5 );\n   float d4pupilab=sdCircle(p+pmov-vec2(1.5,-1.0),0.5 );\n   p=p0;\n   \n   vec2 a=vec2(0.0,0.0);\n   vec2 b=vec2(2.0,0.0);\n   \n   float d5boca= sdSegment(p+pmov-vec2(-1.0,-2.4),a, b );\n   \n   vec3 col;\n   col= DrawFigBorde(vec3(0.7,0.5,0.3), colOut, d2rostro);\n   col= DrawFigBorde(vec3(1.0), col, d3ojoa);\n   col= DrawFigBorde(vec3(1.0), col, d3ojob);\n   col= DrawFigBorde(vec3(0.0), col, d4pupilaa);\n   col= DrawFigBorde(vec3(0.0), col, d4pupilab);\n   col= DrawFigBorde(vec3(0.2), col, dinter);\n   col= DrawFigBorde(vec3(1.0,0.2,0.2), col, d5boca-0.2);\n   return col; \n}\n\nvec3 olas001(vec2 p, vec3 colOut)\n{  float d1= onda1(p);\n   vec3 col= DrawFigBorde(vec3(0.2,0.1,1.0), colOut, d1);\n   return col; \n}\n\nvec3 olas002(vec2 p, vec3 colOut)\n{  float d2=onda( p-vec2(0.0,3.0));\n   vec3 col= DrawFigBorde(vec3(0.2,0.1,0.8), colOut, d2);\n   return col; \n}\n\nvec3 olas003(vec2 p, vec3 colOut)\n{  float d2=onda2( p-vec2(0.0,4.0));\n   vec3 col= DrawFigBorde(vec3(0.3,0.2,0.8), colOut, d2);\n   return col; \n}\n\nvec3 olas004(vec2 p, vec3 colOut)\n{  float d2=onda3( p-vec2(0.0,5.5));\n   vec3 col= DrawFigBorde(vec3(0.1,0.2,0.8), colOut, d2);\n   return col; \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.5);\n    float esc=8.0;\n    uv*=esc;\n    vec2 uv0=uv;\n    //vec3 col=vec3(0.0,0.1,0.8);\n    vec3 col=vec3(0.0,0.0,0.8)*(1.0-(uv.y/esc)*0.45);\n \n    float t=5.0*sin(iTime);\n    col= olas004(uv,col);\n    col= olas003(uv, col);\n    col= olas002(uv, col);\n    \n    col= Rostro(uv-vec2(0.0,2.8), col);\n    col= olas001(uv-vec2(0.5+t,0.0), col);\n    \n    col=pow(col,  vec3(0.554545));\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//// fork --Colored noise (sound)----Created by athibaul in 2021-02-11\n//https://www.shadertoy.com/view/tttfRj\n#define TAU (2.*3.1415926)\n\n#define PI acos(-1.)\n#define PIH (PI * .5)\n///#define TAU (PI * 2.)\n#define osc_sin(x) sin((x) * TAU)\n#define osc_saw(x) (1. - fract(x) * 2.)\n#define osc_sqr(x) sign(.5 - fract(x))\n#define osc_tri(x) (asin(sin((x) * PI)) / PIH)\n \n \nfloat rand(float p)\n{   // Hash function by Dave Hoskins\n    // https://www.shadertoy.com/view/4djSRW\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat noise(float s){\n    // Noise is sampled at every integer s\n    // If s = t*f, the resulting signal is close to a white noise\n    // with a sharp cutoff at frequency f.\n    \n    // For some reason float(int(x)+1) is sometimes not the same as floor(x)+1.,\n    // and the former produces fewer artifacts?\n    int si = int(floor(s));\n    float sf = fract(s);\n    sf = sf*sf*(3.-2.*sf); // smoothstep(0,1,sf)\n    //sf = sf*sf*sf*(sf*(sf*6.0-15.0)+10.0); // quintic curve\n    // see https://iquilezles.org/articles/texture\n    return mix(rand(float(si)), rand(float(si+1)), sf) * 2. - 1.;\n}\n\n\nfloat coloredNoise(float t, float fc, float df)\n{\n    // Noise peak centered around frequency fc\n    // containing frequencies between fc-df and fc+df\n    // Assumes fc is an integer, to avoid problems with sin(large number).\n    // Modulate df-wide noise by an fc-frequency sinusoid\n    float f0a=TAU*fc*fract(t);\n    float f0=sin(f0a+cos(f0a*2.0));\n    float f1=noise(t*df);\n    float f2=osc_saw(t*df*2.0);   \n    return 2.0*f2+f0;  //trumpeta\n    \n}\n\n\nvec2 mainSound( int samp, float time )\n{\n    float v = 0.;\n    float t = time;\n    float fc = 50.*pow(100.,rand(floor(t)));\n    \n    float df = rand(floor(t)+0.5)*fc;\n    v += 0.1*coloredNoise(t, fc, df);\n    v *= smoothstep(0.,0.1,fract(t)) * smoothstep(1.0,0.9,fract(t));\n    return vec2(v);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// See Common tab",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}