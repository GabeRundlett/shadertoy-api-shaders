{
    "Shader": {
        "info": {
            "date": "1590269676",
            "description": "Very glitchy but I kinda like the effect.",
            "flags": 0,
            "hasliked": 0,
            "id": "WdBfRy",
            "likes": 2,
            "name": "Raymarching surface coloring",
            "published": 3,
            "tags": [
                "coloring"
            ],
            "usePreview": 0,
            "username": "rodgzilla",
            "viewed": 448
        },
        "renderpass": [
            {
                "code": "#define time iTime\n\n// #define SPEED 15.\n#define SPEED 15.\n#define FLOOR 0\n#define SPH 1\n#define CAP 2\n#define EXTR 3\n#define INF 4\n\nint hit = FLOOR;\n\nmat2 rot2d(float a) {\n    float c = cos(a), s = sin(a);\n    \n    return mat2(c, s, -s, c);\n}\n\nvec3 kifs(vec3 p) {\n    float r = .7;\n    float s = 2.;\n\n    for (float i = 0.; i < 4.; i++) {\n        p.xy *= rot2d(time * .7);\n        p.yz *= rot2d(time * .5 - i);\n        p = abs(p);\n        p -= s;\n        s *= r;\n    }\n    \n    return p;\n}\n\nfloat sph(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat tube(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b - a;\n\tvec3 ap = p - a;\n\tfloat t = dot(ab, ap) / dot(ab, ab);\n\tvec3 c = a + ab * t;\n  \n\treturn length(p - c) - r;\n}\n\nfloat cap(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b - a;\n\tvec3 ap = p - a;\n\tfloat t = dot(ab, ap) / dot(ab, ab);\n\tt = clamp(t, 0., 1.);\n\tvec3 c = a + ab * t;\n  \n\treturn length(p - c) - r;\n}\n\n\nvec3 rep(vec3 p, vec3 r) {\n    return mod(p, r) - .5 * r;\n}\n\nfloat map(vec3 p) {\n    p.xy *= rot2d(p.z / 70.);\n//    p = rep(p, vec3(0., 0, 100.));\n    p = rep(p, vec3(0., 0, 40.));\n    vec3 pkifs = kifs(p);\n    float d = 5000.;\n    \n    hit = FLOOR;\n  \tfloat dsph = sph(pkifs - vec3(2, 0, 0), 1.);\n    d = min(d, dsph);\n    hit = (d == dsph) ? SPH : hit;\n    float dtube = tube(pkifs, vec3(0, 1, 0), vec3(2, 1, 0), .5);\n    d = min(d, dtube);\n    hit = (d == dtube) ? CAP : hit;\n    float dextr = -tube(p, vec3(0, 0, -1), vec3(0, 0, 0), 2.);\n    d = max(d, dextr);\n    hit = (d == dextr) ? EXTR : hit;\n    \n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0, 0, -30. + time * SPEED);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n\n    vec3 p = ro;\n    float d = 0.;\n    for (int i = 0; i < 100; i++) {\n\t\tfloat ds = map(p);\n        \n        if (ds < .01 || ds > 100.) {\n            break;\n        }\n        if (ds > 100.) {\n            hit = INF;\n        }\n        p += .7 * ds * rd;\n    }\n    \n    col = vec3(length(p - ro) * .1);\n    vec2 e = vec2(0.01, 0);\n    \n    vec3 n = normalize(map(p) - vec3(\n        map(p - e.xyy),\n        map(p - e.yxy),\n        map(p - e.yyx)\n\t));\n    \n    vec3 lp = vec3(0, 0, -30. + time * SPEED);\n    float dif = dot(n, normalize(lp - p));\n    \n//    map(p);\n    col = vec3(0, 0, 1);\n    if (hit == SPH) {\n        col = vec3(0.306, 0.21 + .3 * (.5 * sin(3. * time) + 0.5), .43);\n    }\n    if (hit == CAP) {\n//        col = vec3(201. /255., 122. / 255., 30. / 255.);\n        col = vec3(1);\n    }\n    if (hit == EXTR) {\n//        255, 182, 71\n\t\tcol = vec3(255. / 255., 182. / 255., 71. / 255.);\n//        col = vec3(1., 0., 0.);\n    }\n    if (hit == INF) {\n        col = vec3(1);\n    }\n    col *= dif;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}