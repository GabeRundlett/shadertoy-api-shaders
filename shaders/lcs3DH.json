{
    "Shader": {
        "info": {
            "date": "1703040930",
            "description": "[url]https://youtu.be/khblXafu7iA[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "lcs3DH",
            "likes": 60,
            "name": "An introduction to Raymarching",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "kishimisu",
            "viewed": 4126
        },
        "renderpass": [
            {
                "code": "// This scene is taken from my second tutorial about shader coding,\n// which introduces the concept of raymarching as well as some useful\n// transforms and space-bending techniques.\n// \n//     Mouse interactive!\n//                            Video URL: https://youtu.be/khblXafu7iA\n\n// 2D rotation function\nmat2 rot2D(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\n// Custom gradient - https://iquilezles.org/articles/palettes/\nvec3 palette(float t) {\n    return .5+.5*cos(6.28318*(t+vec3(.3,.416,.557)));\n}\n\n// Octahedron SDF - https://iquilezles.org/articles/distfunctions/\nfloat sdOctahedron(vec3 p, float s) {\n    p = abs(p);\n    return (p.x+p.y+p.z-s)*0.57735027;\n}\n\n// Scene distance\nfloat map(vec3 p) {\n    p.z += iTime * .4; // Forward movement\n    \n    // Space repetition\n    p.xy = fract(p.xy) - .5;     // spacing: 1\n    p.z =  mod(p.z, .25) - .125; // spacing: .25\n    \n    return sdOctahedron(p, .15); // Octahedron\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2  m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n    \n    // Default circular motion if mouse not clicked\n    if (iMouse.z <= 0.) m = vec2(cos(iTime*.2), sin(iTime*.2));\n\n    // Initialization\n    vec3 ro = vec3(0, 0, -3);         // ray origin\n    vec3 rd = normalize(vec3(uv, 1)); // ray direction\n    vec3 col = vec3(0);               // final pixel color\n\n    float t = 0.; // total distance travelled\n\n    int i; // Raymarching\n    for (i = 0; i < 80; i++) {\n        vec3 p = ro + rd * t; // position along the ray\n        \n        p.xy *= rot2D(t*.15 * m.x);     // rotate ray around z-axis\n\n        p.y += sin(t*(m.y+1.)*.5)*.35;  // wiggle ray\n\n        float d = map(p);     // current distance to the scene\n\n        t += d;               // \"march\" the ray\n\n        if (d < .001 || t > 100.) break; // early stop\n    }\n\n    // Coloring\n    col = palette(t*.04 + float(i)*.005);\n\n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}