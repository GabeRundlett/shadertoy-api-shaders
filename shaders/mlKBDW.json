{
    "Shader": {
        "info": {
            "date": "1702100772",
            "description": "This shader creates three rotating vortexes, each with its own unique rotation speed and scale.",
            "flags": 0,
            "hasliked": 0,
            "id": "mlKBDW",
            "likes": 8,
            "name": "Code Vortex",
            "published": 3,
            "tags": [
                "grid",
                "glow",
                "vortex"
            ],
            "usePreview": 0,
            "username": "harsh",
            "viewed": 249
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 a = (uv - 0.5) * 5.0;\n    float f = iTime * 1.3;\n\n    float angle1 = f * 0.35;\n    float angle2 = -f * 0.8;\n    float angle3 = f * 0.25;\n    float scale1 = 3.0;\n    float scale2 = 1.1;\n    float scale3 = 0.7;\n\n    vec2 a1 = vec2(\n        a.x * cos(angle1) - a.y * sin(angle1),\n        a.x * sin(angle1) + a.y * cos(angle1)\n    ) * scale1;\n\n    vec2 a2 = vec2(\n        a.x * cos(angle2) - a.y * sin(angle2),\n        a.x * sin(angle2) + a.y * cos(angle2)\n    ) * scale2;\n\n    vec2 a3 = vec2(\n        a.x * cos(angle3) - a.y * sin(angle3),\n        a.x * sin(angle3) + a.y * cos(angle3)\n    ) * scale3;\n\n    vec4 O = vec4(0.0);\n    float x;\n\n    for (float m = 0.0; m < 250.0; m += 0.55) {\n        vec2 p = vec2(cos(x = m * 0.05 - f), sin(x));\n        float wave = sin(m * mix(0.07, 0.07, sin(f) * 0.9 + 0.9) - f);\n\n        float d1 = length(a1 + abs(wave) * p * 0.5) - 2.0;\n        float d2 = length(a2 + abs(wave) * p * 0.5) - 2.0;\n        float d3 = length(a3 + abs(wave) * p * 0.5) - 2.0;\n\n        float dynamic = 1.35 + cos(m * 0.1 + length(a) * 0.5 - f);\n\n        vec3 color1 = 0.5 + 0.3 * cos(f + vec3(1.0, 2.0, 3.0) + a1.xyx * 0.25);\n        vec3 color2 = 0.5 + 0.3 * cos(f + vec3(4.0, 5.0, 6.0) + a2.xyx * 0.25);\n        vec3 color3 = 0.5 + 0.3 * cos(f + vec3(7.0, 8.0, 9.0) + a3.xyx * 0.25);\n\n        float glowStrength = 0.0004;\n        float glowRadius = 50.0;\n\n        float glowFactor1 = smoothstep(glowRadius, 0.1, abs(d1));\n        float glowFactor2 = smoothstep(glowRadius, 0.1, abs(d2));\n        float glowFactor3 = smoothstep(glowRadius, 0.1, abs(d3));\n\n        vec3 glowColor1 = color1 * glowFactor1;\n        vec3 glowColor2 = color2 * glowFactor2;\n        vec3 glowColor3 = color3 * glowFactor3;\n\n        vec3 color = mix(mix(glowColor1, glowColor2, step(d1, d2)), glowColor3, step(min(d1, d2), d3));\n\n        O += (glowStrength / (min(min(abs(d1), abs(d2)), abs(d3)) + 0.05)) * dynamic * vec4(color, 1.0);\n    }\n\n    fragColor = O;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}