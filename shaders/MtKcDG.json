{
    "Shader": {
        "info": {
            "date": "1538141919",
            "description": "oil paintbrush effect originally done in shaderoo.org using geometry, but here done purely in fragment shader (much slower though...)\n...don't forget to enable mipmaps for the video source, if you change the video",
            "flags": 32,
            "hasliked": 0,
            "id": "MtKcDG",
            "likes": 102,
            "name": "oil paint brush",
            "published": 3,
            "tags": [
                "painting",
                "oil",
                "paint",
                "npr",
                "brush"
            ],
            "usePreview": 1,
            "username": "flockaroo",
            "viewed": 8769
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// oil paint brush drawing\n\n// original geometry version of this: https://shaderoo.org/?shader=N6DFZT\n\n// some relief lighting\n\n#define ImageTex iChannel0\n\n#define Res  iResolution.xy\n#define Res0 vec2(textureSize(iChannel0,0))\n#define Res1 vec2(textureSize(iChannel1,0))\n#define Res2 vec2(textureSize(iChannel2,0))\n#define Res3 vec2(textureSize(iChannel3,0))\n\nfloat getVal(vec2 uv)\n{\n    return length(textureLod(ImageTex,uv,.5+.5*log2(Res.x/1920.)).xyz)*1.;\n}\n    \nvec2 getGrad(vec2 uv,float delta)\n{\n    vec2 d=vec2(delta,0);\n    return vec2(\n        getVal(uv+d.xy)-getVal(uv-d.xy),\n        getVal(uv+d.yx)-getVal(uv-d.yx)\n    )/delta;\n}\n\nfloat PaintSpec = .15;\n\nfloat Vignette = 1.5;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/Res;\n    vec3 n = vec3(getGrad(uv,1.0/iResolution.y),150.0);\n    //n *= n;\n    n=normalize(n);\n    fragColor=vec4(n,1);\n    vec3 light = normalize(vec3(-1,1,1.4));\n    float diff=clamp(dot(n,light),0.,1.0);\n    float spec=clamp(dot(reflect(light,n),vec3(0,0,-1)),0.0,1.0);\n    spec=pow(spec,12.0)*PaintSpec;\n    float sh=clamp(dot(reflect(light*vec3(-1,-1,1),n),vec3(0,0,-1)),0.0,1.0);\n    sh=pow(sh,4.0)*.1;\n\tfragColor = texture(ImageTex,uv)*mix(diff,1.,.9)+spec*vec4(.85,1.,1.15,1.)+sh*vec4(.85,1.,1.15,1.);\n\tfragColor.w=1.;\n    vec2 uv2 = (fragCoord-.5*Res)*min(Res2.y/Res.y,Res2.x/Res.x)/Res2+.5;\n    vec4 col0 = texture(iChannel2,uv2);\n    \n    if(true)\n    {\n        vec2 scc=(fragCoord-.5*iResolution.xy)/iResolution.x;\n        float vign = 1.1-Vignette*dot(scc,scc);\n        vign*=1.-.7*Vignette*exp(-sin(fragCoord.x/iResolution.x*3.1416)*40.);\n        vign*=1.-.7*Vignette*exp(-sin(fragCoord.y/iResolution.y*3.1416)*20.);\n        fragColor.xyz *= vign;\n    }\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// created by florian berger (flockaroo) - 2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// oil paint brush drawing\n\n// calculating and drawing drawing the brush strokes\n// ...reimplementation of shaderoo.org geometry version, but purely in fragment shader\n// original geometry version of this: https://shaderoo.org/?shader=N6DFZT\n\n#define COLORKEY_BG\n#define QUALITY_PERCENT 85\n//#define CANVAS\n\n#define Res (iResolution.xy)\n#define Res0 vec2(textureSize(iChannel0,0))\n#define Res1 vec2(textureSize(iChannel1,0))\n\n#define PI 3.1415927\n\n#define N(v) (v.yx*vec2(1,-1))\n\nvec4 getRand(vec2 pos)\n{\n    return textureLod(iChannel1,pos/Res1,0.);\n}\n\nvec4 getRand(int idx)\n{\n    ivec2 rres=textureSize(iChannel1,0);\n    idx=idx%(rres.x*rres.y);\n    return texelFetch(iChannel1,ivec2(idx%rres.x,idx/rres.x),0);\n}\n\nfloat SrcContrast = 1.4;\nfloat SrcBright = 1.;\n\nvec4 getCol(vec2 pos, float lod)\n{\n    // use max(...) for fitting full image or min(...) for fitting only one dir\n    vec2 uv = (pos-.5*Res)*min(Res0.y/Res.y,Res0.x/Res.x)/Res0+.5;\n    vec2 mask = step(vec2(-.5),-abs(uv-.5));\n    vec4 col = clamp(((textureLod(iChannel0,uv,lod)-.5)*SrcContrast+.5*SrcBright),0.,1.)/**mask.x*mask.y*/;\n    #ifdef COLORKEY_BG\n    vec4 bg=textureLod(iChannel2,uv,lod+.7);\n    col = mix(col,bg,dot(col.xyz,vec3(-.6,1.3,-.6)));\n    #endif\n    return col;\n}\n\nuniform float FlickerStrength;\n\nvec3 getValCol(vec2 pos, float lod)\n{\n    return getCol(pos,1.5+log2(Res0.x/600.)).xyz;\n    return getCol(pos,1.5+log2(Res0.x/600.)).xyz*.7+getCol(pos,3.5+log2(Res0.x/600.)).xyz*.3;\n}\n\nfloat compsignedmax(vec3 c)\n{\n    vec3 s=sign(c);\n    vec3 a=abs(c);\n    if (a.x>a.y && a.x>a.z) return c.x;\n    if (a.y>a.x && a.y>a.z) return c.y;\n    return c.z;\n}\n\nvec2 getGradMax(vec2 pos, float eps)\n{\n    vec2 d=vec2(eps,0);\n    // calc lod according to step size\n    float lod = log2(2.*eps*Res0.x/Res.x);\n    //lod=0.;\n    return vec2(\n        compsignedmax(getValCol(pos+d.xy,lod)-getValCol(pos-d.xy,lod)),\n        compsignedmax(getValCol(pos+d.yx,lod)-getValCol(pos-d.yx,lod))\n        )/eps/2.;\n}\n\nvec2 quad(vec2 p1, vec2 p2, vec2 p3, vec2 p4, int idx) \n{\n    vec2 p[6] = vec2[](p1,p2,p3,p2,p4,p3);\n    return p[idx%6];\n}\n\nfloat BrushDetail = 0.1;\n\nfloat StrokeBend=-1.;\nfloat BrushSize = 1.;\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n    vec2 pos = fragCoord.xy;\n    pos += 4.0*sin(iTime*.5*vec2(1,1.7))*iResolution.y/400.;\n    \n    float canv=0.;\n    canv=max(canv,(getRand(pos*vec2(.7,.03).xy)).x);\n    canv=max(canv,(getRand(pos*vec2(.7,.03).yx)).x);\n    fragColor=vec4(vec3(.93+.07*canv),1);\n    canv-=.5;\n    \n    int pidx0 = 0;\n    \n    vec3 brushPos;\n    //int layerScalePercent = QUALITY_PERCENT;\n    float layerScaleFact=float(QUALITY_PERCENT)/100.;\n    float ls = layerScaleFact*layerScaleFact;\n    //number of grid positions on highest detail level\n    int NumGrid=int(float(0x10000/2)*min(pow(Res.x/1920.,.5),1.)*(1.-ls));\n    //int NumGrid=10000;\n    float aspect=Res.x/Res.y;\n    int NumX = int(sqrt(float(NumGrid)*aspect)+.5);\n    int NumY = int(sqrt(float(NumGrid)/aspect)+.5);\n    //int pidx2 = NumX*NumY*4/3-pidx;\n    int pidx2 /*= NumTriangles/2-pidx*/;\n    // calc max layer NumY*layerScaleFact^maxLayer==10. - so min-scale layer has at least 10 strokes in y\n    int maxLayer=int(log2(10./float(NumY))/log2(layerScaleFact));\n    //maxLayer=8;\n    for(int layer = min(maxLayer,11); layer>=0; layer--) // min(...) at beginning - possible crash cause on some systems?\n    {\n    int NumX2 = int(float(NumX) * pow(layerScaleFact,float(layer))+.5);\n    int NumY2 = int(float(NumY) * pow(layerScaleFact,float(layer))+.5);\n\n    // actually -2..2 would be needed, but very slow then...\n    //for(int nx=-1;nx<=1;nx++)\n    //for(int ny=-1;ny<=1;ny++)\n    // replaced the 2 loops above by 1 loop and some modulo magic (possible crash cause on some systems?)\n    for(int ni=0;ni<9;ni++)\n    {\n        int nx=ni%3-1;\n        int ny=ni/3-1;\n    // index centerd in cell\n    int n0 = int(dot(floor(vec2(pos/Res.xy*vec2(NumX2,NumY2))),vec2(1,NumX2)));\n    pidx2=n0+NumX2*ny+nx;\n    int pidx=pidx0+pidx2;\n    brushPos.xy = (vec2(pidx2%NumX2,pidx2/NumX2)+.5)/vec2(NumX2,NumY2)*Res;\n    float gridW = Res.x/float(NumX2);\n    float gridW0 = Res.x/float(NumX);\n    // add some noise to grid pos\n    brushPos.xy += gridW*(getRand(pidx+iFrame*123*0).xy-.5);\n    // more trigonal grid by displacing every 2nd line\n    brushPos.x += gridW*.5*(float((pidx2/NumX2)%2)-.5);\n    \n    vec2 g; \n    g = getGradMax(brushPos.xy,gridW*1.)*.5+getGradMax(brushPos.xy,gridW*.12)*.5\n        +.0003*sin(pos/Res*20.); // add some gradient to plain areas\n    float gl=length(g);\n    vec2 n = normalize(g);\n    vec2 t = N(n);\n    \n    brushPos.z = .5;\n\n    // width and length of brush stroke\n    float wh = (gridW-.6*gridW0)*1.2;\n    float lh = wh;\n    float stretch=sqrt(1.5*pow(3.,1./float(layer+1)));\n    wh*=BrushSize*(.8+.4*getRand(pidx).y)/stretch;\n    lh*=BrushSize*(.8+.4*getRand(pidx).z)*stretch;\n    float wh0=wh;\n    \n    wh/=1.-.25*abs(StrokeBend);\n    \n    wh = (gl*BrushDetail<.003/wh0 && wh0<Res.x*.02 && layer!=maxLayer) ? 0. : wh;\n    \n    vec2 uv=vec2(dot(pos-brushPos.xy,n),dot(pos-brushPos.xy,t))/vec2(wh,lh)*.5;\n    // bending the brush stroke\n    uv.x-=.125*StrokeBend;\n    uv.x+=uv.y*uv.y*StrokeBend;\n    uv.x/=1.-.25*abs(StrokeBend);\n    uv+=.5;\n    //float s=mix((uv.x-.4)/.6,1.-uv.x,step(.5,uv.x))*5.;\n    float s=1.;\n    s*=uv.x*(1.-uv.x)*6.;\n    s*=uv.y*(1.-uv.y)*6.;\n    float s0=s;\n    s=clamp((s-.5)*2.,0.,1.);\n    vec2 uv0=uv;\n    \n    // brush hair noise\n    float pat = textureLod(iChannel1,uv*1.5*sqrt(Res.x/600.)*vec2(.06,.006),1.).x+textureLod(iChannel1,uv*3.*sqrt(Res.x/600.)*vec2(.06,.006),1.).x;\n    vec4 rnd = getRand(pidx);\n    \n    s0=s;\n    s*=.7*pat;\n    uv0.y=1.-uv0.y;\n    float smask=clamp(max(cos(uv0.x*PI*2.+1.5*(rnd.x-.5)),(1.5*exp(-uv0.y*uv0.y/.15/.15)+.2)*(1.-uv0.y))+.1,0.,1.);\n    s+=s0*smask;\n    s-=.5*uv0.y;\n#ifdef CANVAS\n    s+=(1.-smask)*canv*1.;\n    s+=(1.-smask)*(getRand(pos*.7).z-.5)*.5;\n#endif\n    \n    vec4 dfragColor;\n    dfragColor.xyz = getCol(brushPos.xy,1.).xyz*mix(s*.13+.87,1.,smask)/**(.975+.025*s)*/;\n    s=clamp(s,0.,1.);\n    dfragColor.w = s * step(-0.5,-abs(uv0.x-.5)) * step(-0.5,-abs(uv0.y-.5));\n    // do alpha blending\n    fragColor = mix(fragColor,dfragColor,dfragColor.w);\n    }\n    pidx0+=NumX2*NumY2;\n    }\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}