{
    "Shader": {
        "info": {
            "date": "1460444034",
            "description": "Since most shaders start with normalizing and centering the coordinate system, here's a reference shader for code golfing that shows the various ways of doing that. Please add to this list other ways of centering and normalizing. Thank you.",
            "flags": 0,
            "hasliked": 0,
            "id": "XsdSR2",
            "likes": 12,
            "name": "Normalize and Center",
            "published": 3,
            "tags": [
                "reference",
                "center",
                "teach",
                "normalize"
            ],
            "usePreview": 0,
            "username": "GregRostami",
            "viewed": 2274
        },
        "renderpass": [
            {
                "code": "// Since most shaders start with normalizing and centering the coordinate system, \n// here's a reference shader for code golfing (size optimization)\n// that shows the various ways of normalizing and centering the coordinate system.\n// Feel free to copy/paste this code into the first few lines of your shaders.\n\nvoid mainImage(out vec4 o,vec2 u)\n{\nfloat t = fract( .1*iTime );\n    \n    if (t < 1./6.){\n    // 16 chars - Square pixels, coordinates centered at lower left of screen\n    u /= iResolution.y ;\n    }\n    \n    else if (t < 2./6.){\n    // 17 chars - Stretched pixels, coordinates centered at lower left of screen\n    u /= iResolution.xy ;\n    }\n\n    else if (t < 3./6.){\n    // 20 chars - Square pixels, coordinates centered on screen for Y axis only\n        u = u / iResolution.y - .5 ;\n    }\n    \n    else if (t < 4./6.){\n    // 21 chars - Stretched pixels, coordinates centered on screen for both X and Y axis    \n        u = u / iResolution.xy - .5 ;\n    }\n    \n    else if (t < 5./6.){\n    // 29 chars - Square pixels, coordinates centered (assumes 16:9 screen ratio)\n        u = u / iResolution.y - .5 ; u.x -= .4 ;\n    }\n    \n    else\n    // 33 chars - Square pixels, coordinates centered on screen for both X and Y axis\n  \t \tu = (u+u - (o.xy=iResolution.xy) ) / o.y ;\n   \n    \n    // Draw a circle with a radius of 0.5 (Diameter of 1.0)\n\to = vec4 (length(u) < .5); \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}