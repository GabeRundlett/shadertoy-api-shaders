{
    "Shader": {
        "info": {
            "date": "1727775113",
            "description": "GLSL live coding at 2024 09 28 at WebGL総本山 10th anniversary party.",
            "flags": 32,
            "hasliked": 0,
            "id": "XXjcRc",
            "likes": 6,
            "name": "GLSL_live_Coding_at_2024_09_28",
            "published": 3,
            "tags": [
                "raymarching",
                "livecoding"
            ],
            "usePreview": 0,
            "username": "butadiene",
            "viewed": 126
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 buffercol = texture(iChannel0,uv).xyz;\n    fragColor = vec4(buffercol,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define time mod(iTime,32.0)\n#define sec1 4.0\n#define sec2 8.0\n#define sec25 12.0\n#define sec3 16.0\n#define sec4 18.0\n#define sec5 20.0\n#define sec6 24.0\n#define sec7 28.0\n#define BPM 120.0\nmat2 rot(float r){\n    return mat2(cos(r),sin(r),-sin(r),cos(r));\n}\n\n//////////////////////////////////////////////////////////\n\n// Noise function from twigl\n/*\nMIT License\n\nCopyright (c) 2020 doxas\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\nvec4  taylorInvSqrt(vec4 r) {return 1.79284291400159 - 0.85373472095314 * r;}\nvec3  mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4  mod289(vec4 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec3  permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);}\nvec4  permute(vec4 x) {return mod289(((x*34.0)+1.0)*x);}\n\nfloat snoise3D(vec3 v){\n  const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n  // Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\n  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  //Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  // Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n}\n\n//////////////////////////////////////////////////////////\n\n\nvec4 map(vec3 p){\n  vec3 sp = p;\n  vec3 ssp = p;\n  float ks = 2.;\n  if(time>sec1){\n  ssp.xy *= rot(ssp.z*2.-0.4*time);\n  ssp.y += pow(abs(sin(time*2.+ssp.z*3.)),2.);\n  if(time>sec25||sec2>time){ssp.xy = mod(ssp.xy,ks)-0.5*ks;}\n  }\n  if(time>sec3){\n  if(time>sec5){ssp.xy *= rot(ssp.z*3.-0.4*time);}\n  ssp = p;\n  ssp.y += pow(abs(sin(time*2.+ssp.z*3.)),2.);\n  ssp.xy = mod(ssp.xy,ks)-0.5*ks;\n  }\n  float skt = time*BPM/130.;\n  float cylinscale = 0.5;\n  if(time>sec1&&time<sec2){\n      cylinscale = 0.9;\n  }\n  float rkt = 1.8*(smoothstep(0.,1.,fract(skt)*3.)+skt-fract(skt));\n  float cylin = -(length(ssp.xy)-cylinscale);\n  float density = mix(-0.2-p.y,cylin,step(sec1,time));\n  float f = 0.0;\n  float scale = 0.5;\n  float octr = mix(0.0,10.0,step(sec2,time));\n  vec3 tscale = time*vec3(0.,0.2,0.);\n  if(sec1<time&&sec2>time){\n      tscale = vec3(0.,time,0.7*time+0.9*rkt);\n  }\n  if(sec2<time){\n      tscale = vec3(0.,time,0.7*time+(0.9+0.7*step(sec5,time))*rkt);\n  }\n  float spn = 1.+0.6*step(sec7,time);\n  for(int i = 0;i<5;i++){\n    sp -=tscale;\n    f += spn*scale*snoise3D(sp-vec3(0,f*octr,0));\n    sp *= 2.0;\n    scale *= 0.5;\n  }\n  f *= 1.0+step(sec5,time)*1.4;\n  density += f;\n  skt = time*(BPM+3.*BPM*step(sec6,time))/130.;\n  float spow = mix(0.8,2.8,step(sec3,time));\n  float ssn = 1.1*pow(abs(sin(time*(2.5+step(sec3,time))+p.z)),spow)+step(sec4,time)*(1.-smoothstep(0.,1.,fract(skt)*1.4));\n  ssn = mix(0.15,ssn,step(sec1,time));\n  ssn = mix(ssn,ssn+1.,step(sec3,time));\n  vec3 col = mix(mix(vec3(0.8,0.8*ssn,0.8*ssn),vec3(0.8*ssn,0.8*ssn,0.8),step(sec6,time)),mix(vec3(0.2,0.2*step(time,sec3),0.2),vec3(-0.14,-0.14,0.2),step(sec6,time)),density);\n  \n  float k = 1.0;\n  p.y -= time;\n  p = mod(p,k)-0.5*k;\n  float d = length(p)-0.4;\n  if(density<d&&time<sec3){\n  col = mix(vec3(1.2,0.6,0.2),6.*vec3(0.2,0.2,0.2),density);\n  }\n  \n  return vec4(col,density);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nfloat skt = time*BPM/130.;\nfloat rkt = 1.8*(smoothstep(0.,1.,fract(skt)*3.)+skt-fract(skt));\nvec2 r = iResolution.xy;\nvec2 p=(fragCoord.xy*2.-r)/min(r.x,r.y);\np *= rot(step(sec5,time)*rkt*0.4);\nfloat ra = 1.0;\n\nif(time<sec1){rkt = time*0.3;}\nvec3 tar = vec3(0.,sin(time),0);\nif(time<sec1&&time<sec3){tar = vec3(0.);}\nvec3 ro = vec3(ra*cos(rkt),0.5,ra*sin(rkt));\nif(time>sec1)\n{\n    ro = vec3(0,1,3);\n}\nvec3 cdir = normalize(tar-ro);\nvec3 side = cross(cdir,vec3(0,1,0));\nvec3 up = cross(side,cdir);\nfloat fov = 0.9;\nif(time>sec1){fov = 0.6;}\nvec3 rd = normalize(side*p.x+up*p.y+cdir*fov);\n\nvec4 rsd;\nvec4 col = vec4(0.);\nfloat ts = 0.5;\nfor(int i = 0;i<66;i++){\n  rsd = map(ro+rd*ts);\n  if(rsd.w>0.){\n    rsd.w = min(rsd.w,1.);\n    rsd.xyz *= rsd.w;\n    col += (1.0-col.w)*rsd;\n    if(col.w>1.)break;\n  }\n  ts += 0.05;\n}\n\nvec4 outcol = pow(clamp(col,vec4(0.),vec4(1.)),vec4(1.4,1.4,1.4,1.));\nvec4 o1 = mix(outcol,texture(iChannel0,fragCoord.xy/r.xy),0.3*step(sec4,time));\nfragColor = o1;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}