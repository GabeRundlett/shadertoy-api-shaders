{
    "Shader": {
        "info": {
            "date": "1687453107",
            "description": "Simple perlin noise test",
            "flags": 0,
            "hasliked": 0,
            "id": "DsSyzD",
            "likes": 6,
            "name": "My first FLIUIDE",
            "published": 3,
            "tags": [
                "perlin"
            ],
            "usePreview": 0,
            "username": "Deceleris",
            "viewed": 252
        },
        "renderpass": [
            {
                "code": "// Perlin noise from : https://www.shadertoy.com/view/DsK3W1\n\n// =================================\nvec2 n22 (vec2 p)\n{\n    vec3 a = fract(p.xyx * vec3(123.34, 234.34, 345.65));\n    a += dot(a, a + 34.45);\n    return fract(vec2(a.x * a.y, a.y * a.z));\n}\n\nvec2 get_gradient(vec2 pos)\n{\n    float twoPi = 6.283185;\n    float angle = n22(pos).x * twoPi;\n    return vec2(cos(angle), sin(angle));\n}\n\nfloat perlin_noise(vec2 uv, float cells_count)\n{\n    vec2 pos_in_grid = uv * cells_count;\n    vec2 cell_pos_in_grid =  floor(pos_in_grid);\n    vec2 local_pos_in_cell = (pos_in_grid - cell_pos_in_grid);\n    vec2 blend = local_pos_in_cell * local_pos_in_cell * (3.0f - 2.0f * local_pos_in_cell);\n    \n    vec2 left_top = cell_pos_in_grid + vec2(0, 1);\n    vec2 right_top = cell_pos_in_grid + vec2(1, 1);\n    vec2 left_bottom = cell_pos_in_grid + vec2(0, 0);\n    vec2 right_bottom = cell_pos_in_grid + vec2(1, 0);\n    \n    float left_top_dot = dot(pos_in_grid - left_top, get_gradient(left_top));\n    float right_top_dot = dot(pos_in_grid - right_top,  get_gradient(right_top));\n    float left_bottom_dot = dot(pos_in_grid - left_bottom, get_gradient(left_bottom));\n    float right_bottom_dot = dot(pos_in_grid - right_bottom, get_gradient(right_bottom));\n    \n    float noise_value = mix(\n                            mix(left_bottom_dot, right_bottom_dot, blend.x), \n                            mix(left_top_dot, right_top_dot, blend.x), \n                            blend.y);\n   \n    \n    return (0.5 + 0.5 * (noise_value / 0.7));\n}\n// =================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 aspected = vec2(fragCoord.x / (iResolution.y / iResolution.x), fragCoord.y);\n    aspected += perlin_noise(aspected + iTime * 30., 0.01f) * 500.;\n    vec2 uv = fract (aspected/iResolution.xy * 5.);\n    vec2 tile = abs ((uv - .5) * 2.);   \n    vec3 col = vec3(1.0, 2.0, 3.0);    \n    float m = max (tile.x, tile.y);\n    m = 0.02 / m;\n    col *= m * 3.;\n    col *= col;    \n    fragColor = vec4 (col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}