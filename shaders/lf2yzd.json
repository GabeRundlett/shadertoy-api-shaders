{
    "Shader": {
        "info": {
            "date": "1722876582",
            "description": "3.4\nMultiplicación y suma de colores :\n ",
            "flags": 0,
            "hasliked": 0,
            "id": "lf2yzd",
            "likes": 0,
            "name": "Colores mezcla 3.4",
            "published": 3,
            "tags": [
                "mix",
                "tutorial",
                "sin",
                "color",
                "cos",
                "shaders",
                "shaders",
                "livecoding",
                "functions",
                "taller",
                "tutoriales",
                "osciladores"
            ],
            "usePreview": 0,
            "username": "jpupper",
            "viewed": 43
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159235659\n#define resolution iResolution\n#define time iTime\n\n//FUNCIONES SACADAS DE https://thebookofshaders.com/06/: \n//esta es para transformar si pensamos un color en hsb a rgb, nunca lo use.\nvec3 rgb2hsb( in vec3 c ){\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz),\n                 vec4(c.gb, K.xy),\n                 step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r),\n                 vec4(c.r, p.yzx),\n                 step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),\n                d / (q.x + e),\n                q.x);\n}\n\n//  Function from Iñigo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        vec2 uv = gl_FragCoord.xy / resolution.xy; // De esta manera obtenemos las coordenadas cartesianas\n      \n     //ES IMPORTANTE COMPRENDER QUE NO EXISTE UNA REAL DIFERENCIA ENTRE FORMA Y COLOR EN GLSL\n     //LA DIFERENCIA ENTRE UNA Y OTRA ES ARBITRARIA SEGUN LO QUE EL PROGRAMADORE ENTIENDA COMO TAL.\n      \n     //Esta es la forma que habíamos hecho en el tutorial anterior.\n     //Veremos las opciones existentes que hay para poder pintar un dibujo:\n     float formafinal = sin(uv.x*10.*PI+time\n                            +sin(uv.y*2.*PI+time\n                            +sin(uv.x*10.*PI-time \n                            +sin(uv.y*10.*PI-time\n                            +sin(uv.x*10.*PI-time\n                            +sin(uv.y*10.*PI-time)\n                            +sin(uv.x*10.*PI-time))))))*0.5+0.5;\n    \n    float formafinal2 = sin(uv.y*10.*PI+time\n                            +sin(uv.y*10.*PI+time\n                            +sin(uv.x*8.*PI-time \n                            +sin(uv.y*5.*PI-time\n                            +sin(uv.x*10.*PI-time\n                            +sin(uv.y*2.*PI-time)\n                            +sin(uv.x*9.*PI-time))))))*0.5+0.5;\n                            \n                            \n    \n   \n    vec3 color1 = vec3(1.0,0.0,0.2) ; \n    vec3 color2 = vec3(0.2,0.5,1.0) ; \n    \n    \n    //Creo una variable en donde voy a hacer todas las cuentas finales. \n    //En donde una forma si la multiplico por ese color va a ser de ese color.\n    //Sumo 2 formas que fueron multiplicadas por los colores respectivos.\n    \n    \n    vec3 fin = color1 * formafinal + color2 * formafinal2;\n    fragColor = vec4(fin,1.0); \n    \n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}