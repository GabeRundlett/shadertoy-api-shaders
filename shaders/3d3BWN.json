{
    "Shader": {
        "info": {
            "date": "1605056510",
            "description": "Remix of \"Playing marble\" by guil.",
            "flags": 0,
            "hasliked": 0,
            "id": "3d3BWN",
            "likes": 2,
            "name": "Still playing marble",
            "published": 3,
            "tags": [
                "3d",
                "fractal",
                "volumetric",
                "remix",
                "glitch",
                "green",
                "fork",
                "mirror",
                "weird",
                "marble"
            ],
            "usePreview": 0,
            "username": "UrbanClubProfessional",
            "viewed": 1262
        },
        "renderpass": [
            {
                "code": "// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Created by S. Guillitte 2015\n\nfloat zoom=1.;\n\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 csqr( vec2 a )  { return vec2( a.x*a.x - a.y*a.y, 2.*a.x*a.y  ); }\n\n\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nvec2 iSphere( in vec3 ro, in vec3 rd, in vec4 sph )//from iq\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return vec2(-2.0);\n\th = sqrt(h);\n\treturn vec2(-b-h, -b+h );\n}\n\nfloat map(in vec3 p) {\n\t\n\tfloat res = 0.;\n\t\n    vec3 c = p;\n\tfor (int i = 0; i < 20; ++i) {\n        p =.7*abs(p)/dot(p,p) -.7;\n        p.yz= csqr(p.yz);\n        p=p.zxy;\n        res += exp(-29. * abs(dot(p,c)));\n        \n\t}\n\treturn res/3.;\n}\n\n\n\nvec3 raymarch( in vec3 ro, vec3 rd, vec2 tminmax )\n{\n    float t = tminmax.x;\n    float dt = .03;\n    //float dt = .2 - .195*cos(iTime*.05);//animated\n    vec3 col= vec3(0.);\n    float c = 0.;\n    for( int i=0; i<74; i++ )\n\t{\n        t+=dt*exp(3.*c);\n        if(t>tminmax.y)break;\n        vec3 pos = ro+t*rd;\n        \n        c = map(ro+t*rd);               \n        \n        col = 1.03*col+ .09*vec3(c*c, c, c*c*c);//green\t\n        //col = .99*col+ .08*vec3(c*c*c, c*c, c);//blue\n    }    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat time = iTime;\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -2.0 + 3.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.);\n\tif( iMouse.z>0.0 )m = iMouse.xy/iResolution.xy*4.14;\n    m-=.6;\n\n    // camera\n\n    vec3 ro = zoom*vec3(5.);\n    ro.yz*=rot(m.y);\n    ro.xz*=rot(m.x+ 0.2*time);\n    vec3 ta = vec3( 0.0 , 0.0, 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,2.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 2.5*ww );\n\n    \n    vec2 tmm = iSphere( ro, rd, vec4(0.,0.,0.,3.) );\n\n\t// raymarch\n    vec3 col = raymarch(ro,rd,tmm);\n    if (tmm.x<0.)col = texture(iChannel0, rd).rgb;\n    else {\n        vec3 nor=(ro+tmm.x*rd)/3.;\n        nor = reflect(rd, nor);        \n        float fre = pow(.6+ clamp(dot(nor,rd),0.0,2.0), 4. )*2.3;\n        col += texture(iChannel0, nor).rgb * fre;\n    \n    }\n\t\n\t// shade\n    \n    col =  .5 *(log(1.+col));\n    col = clamp(col,0.,2.);\n    fragColor = vec4( col, 2.0 );\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}