{
    "Shader": {
        "info": {
            "date": "1532322880",
            "description": "cubemap showing the sides it was made on and stuff like that. It reflects its own cubemap too. Mouseable",
            "flags": 0,
            "hasliked": 0,
            "id": "4t3cW8",
            "likes": 5,
            "name": "Cubemap on a cube",
            "published": 3,
            "tags": [
                "mouse",
                "texture",
                "light",
                "cubemap"
            ],
            "usePreview": 0,
            "username": "Veggiebob",
            "viewed": 428
        },
        "renderpass": [
            {
                "code": "#define EPSILON pow(10., -4.)\nfloat align (float diff, float dim){\n    if(diff>=dim){\n        return diff-dim;\n    } else {\n        return 0.;\n    }\n}\nfloat box3D (vec3 boxPos, vec3 boxSize, vec3 pos){\n    float n = align(abs(pos.x-boxPos.x), boxSize.x)+align(abs(pos.y-boxPos.y), boxSize.y);\n    n+=align(abs(pos.z-boxPos.z), boxSize.z);//just to keep the lines short\n    return n;\n}\nvec2 rotate2D (vec2 p, float angle){\n    return vec2(p.x*cos(angle)-p.y*sin(angle), p.y*cos(angle)+p.x*sin(angle));\\\n}\nvec4 SDF (vec3 p){\n    vec3 matCol = vec3(-1.);\n    float total = box3D(vec3(0.), vec3(0.1), p);\n    \n    return vec4(total, matCol);\n}\nvec4 trace (vec3 o, vec3 r) {\n    float t = 0.;\n    vec3 p = o;\n    for(int i = 0; i<64; i++){\n        p = o+r*t;\n        float d = SDF(p).x;\n        t+=d*0.5;\n    }\n    return vec4(p, t);\n}\n//Credit to Jamie Wong http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/#surface-normals-and-lighting\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        SDF(vec3(p.x + EPSILON, p.y, p.z)).x - SDF(vec3(p.x - EPSILON, p.y, p.z)).x,\n        SDF(vec3(p.x, p.y + EPSILON, p.z)).x - SDF(vec3(p.x, p.y - EPSILON, p.z)).x,\n        SDF(vec3(p.x, p.y, p.z  + EPSILON)).x - SDF(vec3(p.x, p.y, p.z - EPSILON)).x\n    ));\n}\n\n//made this one myself with some tutorials I found out there on the \nfloat diffuseLight (vec3 n, vec3 r){\n    return dot(n, -r);\n}\nfloat specularLight (vec3 n, vec3 r){\n    vec3 nr = reflect(r, n);\n    float d = dot(nr, -r);\n    return pow(max(dot(nr, -r), 0.), 8.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //setup coordinates\n    vec2 mouse = iMouse.xy/iResolution.xy - vec2(0.5, 0.);\n    if(iMouse.xy == vec2(0.))mouse = vec2(0.5, 0.2);\n    mouse.x*=5.;\n    mouse.y*=2.;\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv-=0.5;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    //setup camera + rays\n    float angle = mouse.x;\n    float fov = 0.5;\n    float camDist = 1.;\n    vec3 camera = vec3(cos(mouse.x)*camDist, 0., sin(mouse.x)*camDist);\n    vec3 ray = vec3(-cos(mouse.x+uv.x*fov)*2., uv.y, -sin(mouse.x+uv.x*fov)*2.);\n    ray = normalize(ray);\n    mouse.y-=0.5;\n    mouse.y*=-2.5;\n    camera = vec3(rotate2D(camera.xy, mouse.y), camera.z);\n    ray = vec3(rotate2D(ray.xy, mouse.y), ray.z);\n    \n    vec4 v = trace(camera, ray);\n    vec3 norm = v.xyz;\n    vec3 normal = estimateNormal(v.xyz);\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, norm).rgb;\n    vec3 slightReflection = texture(iChannel0, reflect(ray, normal)).rgb;\n    col+=slightReflection*0.5;\n    col+=specularLight(normal, ray)*0.8;\n    col+=diffuseLight(normal, ray)*0.1;\n    float fog = 1./(1.+pow(v.w*2., 2.)*0.01);//distance shading\n\tvec3 back = texture(iChannel0, ray).rgb;\n    col = (1.-fog)*back+max(fog*col, 0.);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}