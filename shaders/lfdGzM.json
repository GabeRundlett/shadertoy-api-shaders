{
    "Shader": {
        "info": {
            "date": "1717642833",
            "description": "Generated by GPT 4o\n\nThe result is an altered version of an already existing shader:\nhttps://www.shadertoy.com/view/XlfGRj\n\nThanks berelium for noticing.",
            "flags": 0,
            "hasliked": 0,
            "id": "lfdGzM",
            "likes": 0,
            "name": "Fire and Smoke Simulation",
            "published": 3,
            "tags": [
                "gpt"
            ],
            "usePreview": 0,
            "username": "sferrando",
            "viewed": 282
        },
        "renderpass": [
            {
                "code": "// Fire and Smoke Simulation\n\n#define iterations 16\n#define formuparam 0.53\n#define volsteps 20\n#define stepsize 0.1\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010 \n#define brightness 0.0015\n#define darkmatter 0.400\n#define distfading 0.730\n#define saturation 0.850\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\tvec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n\tuv.y *= iResolution.y / iResolution.x;\n\tvec3 dir = vec3(uv * zoom, 1.0);\n\tfloat time = iTime * speed + 0.25;\n\n\t// Rotate around Y axis\n\tfloat a1 = 0.5 + iMouse.x / iResolution.x * 3.0;\n\tfloat a2 = 0.8 + iMouse.y / iResolution.y * 3.0;\n\tmat2 rot1 = mat2(cos(a1), sin(a1), -sin(a1), cos(a1));\n\tmat2 rot2 = mat2(cos(a2), sin(a2), -sin(a2), cos(a2));\n\tdir.xz *= rot1;\n\tdir.xy *= rot2;\n\tvec3 from = vec3(1.0, 0.5, 0.5);\n\tfrom += vec3(time * 2.0, time, -2.0);\n\tfrom.xz *= rot1;\n\tfrom.xy *= rot2;\n\n\tfloat s = 0.1, fade = 1.0;\n\tvec3 v = vec3(0.0);\n\tfor (int r = 0; r < volsteps; r++) {\n\t\tvec3 p = from + s * dir * 0.5;\n\t\tp = abs(vec3(tile) - mod(p, vec3(tile * 2.0)));\n\t\tfloat pa, a = pa = 0.0;\n\t\tfor (int i = 0; i < iterations; i++) { \n\t\t\tp = abs(p) / dot(p, p) - formuparam; \n\t\t\ta += abs(length(p) - pa);\n\t\t\tpa = length(p);\n\t\t}\n\t\tfloat dm = max(0.0, darkmatter - a * a * 0.001);\n\t\ta *= a * a;\n\t\tif (r > 6) fade *= 1.0 - dm;\n\t\tv += fade;\n\t\tv += vec3(s, s * s, s * s * s * s) * a * brightness * fade; \n\t\tfade *= distfading;\n\t\ts += stepsize;\n\t}\n\tv = mix(vec3(length(v)), v, saturation);\n\tfragColor = vec4(v * 0.09, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}