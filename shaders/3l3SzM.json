{
    "Shader": {
        "info": {
            "date": "1580574469",
            "description": "spring in japan",
            "flags": 0,
            "hasliked": 0,
            "id": "3l3SzM",
            "likes": 16,
            "name": "Sakura Fubuki (cherry blossoms)",
            "published": 3,
            "tags": [
                "raymarching",
                "japan",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "whisky_shusuky",
            "viewed": 27571
        },
        "renderpass": [
            {
                "code": "// https://github.com/whisky-shusuky/glsl_storage/blob/master/glsl/sakurahubuki.glsl\nprecision highp float;\n\nconst float fluid_speed     = 208.0;  // Drives speed, higher number will make it slower.\nfloat gTime = 0.;\n\n// 回転行列\nmat2 rot(float a) {\n\tfloat c = cos(a), s = sin(a);\n\treturn mat2(c,s,-s,c);\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n\tfloat k0 = length(p/r);\n\tfloat k1 = length(p/(r*r));\n\treturn k0*(k0-1.0)/k1;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n\tvec3 q = abs(p) - b;\n\treturn length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sakura(vec3 pos, float scale) {\n\tpos *= scale;\n\tfloat base = sdEllipsoid(pos, vec3(.4,.6,.2)) /1.5;\n\tpos.xy *= 5.;\n\t//pos.yz *= rot(.);\n\tpos.y -= 3.5;\n\tpos.xy *= rot(.75);\n\tfloat cut = sdBox(pos  , vec3(1.,1.,1.));\n\tfloat result = min(-base,cut) *2.;\n\treturn result;\n}\n\nfloat sakura_set(vec3 pos) {\n\tvec3 pos_origin = pos;\n\tpos = pos_origin;\n\tpos .y -= .1;\n\tfloat sakura1 = sakura(pos,2.);\n\tpos = pos_origin;\n\tpos .x += .35;\n\tpos .y += .15;\n\tpos.xy *=   rot(.9);\n\tfloat sakura2 = sakura(pos,2.);\n\tpos = pos_origin;\n\tpos .x -= .35;\n\tpos .y += .15;\n\tpos.xy *=   rot(-.9);\n\tfloat sakura3 = sakura(pos,2.);\t\n\tpos = pos_origin;\n\tpos .x += .225;\n\tpos .y += .6;\n\tpos.xy *=   rot(2.5);\n\tfloat sakura4 = sakura(pos,2.);\t\n\tpos = pos_origin;\n\tpos .x -= .225;\n\tpos .y += .6;\n\tpos.xy *=   rot(-2.5);\n\tfloat sakura5 = sakura(pos,2.);\t\n\tfloat result = max(max(max(max(sakura1,sakura2),sakura3),sakura4),sakura5);\n\treturn result;\n}\n\nfloat map(vec3 pos) {\n\tvec3 pos_origin = pos;\n\tfloat sakura_set1 = sakura_set(pos);\n\tpos.x +=sin(gTime);\n\tpos.y +=sin(gTime);\n\tpos.z +=sin(gTime);\n    pos.yz *= rot(sin(gTime * 2.)) * 2.;\n\tpos *= 1.5;\n\tfloat result =sakura_set1;\n\n\treturn result;\n}\n\n// ref: https://qiita.com/aa_debdeb/items/b78975c5bcb063e28a08\nfloat linearFog(float d, float start, float end) {\n\t// (end - d) / (end - start)と0の内最大値とそれと1の最小値を求める。\n\t// d がstart より前だと0,startより後だと１,間なら1~0に線形に変化する。\n\treturn clamp((end - d) / (end - start), 0.0, 1.0);\n}\n\nfloat expFog(float d, float density) {\n    return exp(-d * density);\n}\n\nfloat exp2Fog(float d, float density) {\n    float dd = d * density;\n    return exp(-dd * dd);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 p = (fragCoord.xy * 2. - iResolution.xy) / min(iResolution.x, iResolution.y);\n\tvec3 ro = vec3(0.5, sin(iTime) * 2.  + 0.3 ,iTime * 2.);\n\tvec3 ray = normalize(vec3(p, 1.5));\n\n\tfloat t = 0.01;\n\tvec3 col = vec3(0.);\n\tfloat ac = 0.0;\n\n\tro.xy  =ro.xy * rot(sin(iTime* .005)) * .1;\n\tro.yz  =ro.yz * rot(sin(iTime* .005)) * 0.05;\n\tray.xy  =ray.xy * rot(sin(iTime * .03) * 5.);\n\tray.yz  =ray.yz * rot(sin(iTime * .03) * 5.);\n\n\tfor (int i = 0; i < 99; i++){\n\t\tvec3 pos = ro + ray * t;\n\t\tpos = mod(pos-2., 4.) -2.;\n\t\tgTime = iTime -float(i) * 0.01;\n\t\tpos.xy = pos.xy  * rot(iTime);\n\t\t\n\t\tpos.yz = pos.yz  * rot(sin(iTime) /2.);\n\t\t\n\t\tfloat d = map(pos);\n\n\t\td = max(abs(d), 0.02);\n\t\tac += exp(-d*3.);\n\n\t\tt += d* 0.15;\n\t}\n\n    for(int i=1;i<140;i++)\n\t{\n\t\tvec2 newp=p + iTime*0.005;\n\t\tnewp.x+=0.9/float(i)*sin(float(i)*p.y+iTime/fluid_speed+0.3*float(i)) + sin(iTime)* 0.01; // + mouse.y/mouse_factor+mouse_offset;\n\t\tnewp.y+=0.85/float(i)*sin(float(i)*p.x+iTime/fluid_speed+0.3*float(i+10) + sin(iTime)* 0.01); // - mouse.x/mouse_factor+mouse_offset;\n\t\tp=newp;\n\t}\n    \n\tcol = vec3(ac * 0.04);\n\tvec3 finalColor = vec3 ( 0., 0., 0. );\n\n\tcol += smoothstep(0.5, 1.,sin(iTime)) * .15 * vec3 ( 1.0, 0.3, 0.5 );\n\tcol += smoothstep(0.5, 1.,cos(iTime)) * .15 * vec3 ( .0, 0.3, 1.0 );\n\n\tcol.z += + 0.54;\n\tcol.y = col.y * abs(sin(iTime) / 4.) + 0.540;\n\n\n\tfragColor = vec4(col ,1.0 -  t *  0.005);\n}\n\n/** SHADERDATA\n{\n\t\"title\": \"My Shader 0\",\n\t\"description\": \"Lorem ipsum dolor\",\n\t\"model\": \"person\"\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}