{
    "Shader": {
        "info": {
            "date": "1639842107",
            "description": "///modificado por jorge2017a2\nThis is a simple Menger Sponge, rendered with raymarching. This is based on iq's article about iterative fractals: https://iquilezles.org/articles/menger/menger.htm",
            "flags": 0,
            "hasliked": 0,
            "id": "sldXD2",
            "likes": 21,
            "name": "Fork Menger Sponge",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "fractal",
                "menger",
                "sponge",
                "mengersponge"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 483
        },
        "renderpass": [
            {
                "code": "///modificado por jorge2017a2\n//referencia\n//https://www.shadertoy.com/view/ltGSWz\n\n#define distfar 6.0\n#define iterations 5.0\n\nfloat maxcomp(vec3 p) {\n    return max(p.x,max(p.y,p.z));\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3  di = abs(p) - b;\n  float mc = maxcomp(di);\n  return min(mc,length(max(di,0.0)));\n}\n\nfloat sdBox2D(vec2 p, vec2 b) {\n\tvec2  di = abs(p) - b;\n    float mc = max(di.x,di.y);\n    return min(mc,length(max(di,0.0)));\n}\n\nfloat sdCross( in vec3 p )\n{\n  float da = sdBox2D(p.xy,vec2(1.0));\n  float db = sdBox2D(p.yz,vec2(1.0));\n  float dc = sdBox2D(p.zx,vec2(1.0));\n  return min(da,min(db,dc));\n}\n\n#define MENGER_ITERATIONS\t2\n\nvec4 mapFractal(in vec3 p)\n{\t\n    p.xz = mod(p.xz + 4.0, 2.0) -1.0;\n    //p.y = mod(p.y + 1.0, 2.0) - 1.0;\n\t\n    float d = sdBox(p,vec3(1.0));\n    vec4 res = vec4(d, 1.0, 0.01, 0.0);\n\t\n    //float s = 1.5;\n    float s = 2.5;\n    \n    for(int i = 0; i < MENGER_ITERATIONS; ++i)\n    {\t \n       \n        s = pow(2.0,float(i));\n        vec3 a = mod(p * s, 2.0) - 1.0;\n        s *= 11.0;\n        //vec3 r = abs(1.0 - 4.0 * abs(a));\n        vec3 r = abs(1.0 - 5.0 * abs(a));\n        \n        float da = max(r.x, r.y);\n        float db = max(r.y, r.z);\n        float dc = max(r.z, r.x);\n        float c = (min(da, min(db, dc)) - 0.85) / s;\n        \n\n        if(c > d)\n        {\n            d = c;\n            res = vec4(d, min(res.y, 0.2 * da * db * dc), 0.0, 1.0);\n        }\n    }\n    \n    return res;\n}\n\n\nvec2 map1(vec3 p) \n{\n    float d = sdBox(p,vec3(1.0));\n    \n    for (float i = 0.0; i < iterations; i++) {\n\n        float scale = pow(2.0,i);\n        vec3 q = mod(scale*p,2.0)-1.0;\n        q = 1.0-abs(q);\n        float c = sdCross(q*3.0)/(scale*3.0);\n        d = max(d,-c),1.0;\n        \n        p += scale/3.0;\n\t\t\n    }\n    \n    return vec2(d,1.0);\n    \n}\n\n\n\n\nvec2 map(vec3  p)\n{\n\n   float t=mod(iTime,10.0); \n   float t1=mod(t,4.0);\n   float t2=mod(t,3.0);\n   float d1;\n   if (t1<t2)\n    d1=mapFractal(p).x;\n   else\n    d1=map1(p).x;\n   \n   return vec2(d1,1.0);\n    \n}\n\n/*\n*/\n\nvec3 calcnormal(vec3 p) {\n    vec2 e = vec2(0.0001, 0.0);\n    vec3 n;\n    n.x = map(p+e.xyy).x - map(p-e.xyy).x;\n    n.y = map(p+e.yxy).x - map(p-e.yxy).x;\n    n.z = map(p+e.yyx).x - map(p-e.yyx).x;\n    return  normalize(n);\n}\n\nfloat softshadow (vec3 ro, vec3 rd) {\n    float res = 1.0;\n    float t = 0.001;\n    for (float i = 0.0; i < 1000.0; i++) {\n        if (t>distfar) break;\n        vec2 h = map(ro + t*rd);\n        if (h.x < 0.0001) return 0.0;\n        res = min(res, 64.0*h.x/t);\n        t += h.x;\n    }\n    return res;\n}\n\nvec3 trace(vec3 ro, vec3 rd) {\n    float t = 0.0;\n    for (float i = 0.0; i < 1000.0; i++) {\n        if (t > distfar) break;\n        vec2 d = map(ro + rd*t);\n        if (d.x < 0.0001) return vec3(t, d.y, i);\n        t += d.x;\n    }\n    return vec3(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0.0,0.0,1.5);\n    vec3 rd = normalize(vec3(uv,-1.5));\n    \n    float theta = sin(iTime/2.0);\n    mat2 rot = mat2(cos(theta),sin(theta),-sin(theta),cos(theta));\n    ro.yz *= rot;\n    rd.yz *= rot;\n    theta = iTime/3.0;\n    rot = mat2(cos(theta),sin(theta),-sin(theta),cos(theta));\n    ro.xz *= rot;\n    rd.xz *= rot;\n    \n    vec3 t = trace(ro, rd);\n    \n    vec3 col = vec3(0.8);\n    \n    if (t.y > 0.5) {\n        \n        vec3 pos = ro + rd*t.x;\n        vec3 lig = normalize(vec3(0.6,1.0,0.8));\n        vec3 nor = calcnormal(pos);\n        float refRange = 0.2;\n        \n        float occ = 1.0/(1.0+t.z/15.0);\n        float sha = softshadow(pos, lig);\n        float dif = max(0.0, dot(nor,lig));\n        float sky = 0.5+0.5*nor.y;\n        float ind = max(0.0, dot(nor,vec3(-1.0,-0.2,-1.0)*lig));\n        float ref = max(1.0-refRange,dot(-nor,rd))-1.0+refRange;\n        \n        col = vec3(0.8,1.0,1.2)*dif*pow(vec3(sha),vec3(1.0,1.2,1.5));\n        col += vec3(0.2,0.3,0.4)*ind*occ;\n        col += vec3(0.2,0.2,0.3)*sky*occ;\n        col += pow(ref,2.0)*4.0*occ;\n        \n        col = pow(col,vec3(0.4545));\n        \n    }\n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}