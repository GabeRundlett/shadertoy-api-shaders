{
    "Shader": {
        "info": {
            "date": "1643412452",
            "description": "lots of unnecessary code, artifacts at 0,y,0 top and bottom, idk how to remove",
            "flags": 0,
            "hasliked": 0,
            "id": "ssByW1",
            "likes": 4,
            "name": "Holey Thingy",
            "published": 3,
            "tags": [
                "template"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 260
        },
        "renderpass": [
            {
                "code": "#define STEPS 512\n#define MAXDIST 128.\n#define SURFDIST 0.001\n\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nfloat box(vec3 pos, vec3 size)\n{\n    vec3 q = abs(pos) - size;\n    return min(max(q.x,max(q.y,q.z)),0.0) + length(max(q,0.0));\n}\n\nfloat scene(vec3 p)\n{\n    p.xz *= Rot(-0.25 * iTime);\n    //p.xz *= Rot(3. * atan(p.x, p.z));\n    float d = box(p,vec3(1)) - 0.6;\n    d += 0.1 * sin(-2. * iTime + atan(p.x, p.z)*7. + p.y * 5.);\n    return 0.5 * d;\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 e = vec2(0.01, 0);\n    float d = scene(p);\n    return normalize(d - vec3(scene(p - e.xyy),scene(p - e.yxy),scene(p - e.yyx)));\n}\n\nfloat march(vec3 ro, vec3 rd, float z)\n{\n    float d = 0.;\n    vec3 p;\n    \n    for(int i = 0; i < STEPS; i++)\n    {\n        p = ro + rd * d;\n        float s = scene(p);\n        s *= z; d += s;\n        if(d > MAXDIST || s < SURFDIST) break;\n    }\n    \n    return d;\n}\n\nvec3 ray(vec3 p, vec3 l, vec2 uv, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvec3 pixel(vec3 p, vec3 rd)\n{\n    vec3 n = normal(p);\n    float diffs = dot(n,-rd);\n    float diff = max(diffs,0.);\n    float fres = pow(1. - abs(diffs),4.);\n    float spec = pow(max(dot(reflect(-rd,n),rd),0.),40.);\n    return vec3(1) * (diff + fres) + spec;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0);\n\n    float r = 5.;\n    float time = 0.1 * iTime;\n    vec3 ro = vec3(r * cos(time),.2 * cos(3. * iTime), r * sin(time));\n    vec3 rd = ray(ro,vec3(0),uv, 1.);\n    \n    \n    //Normal raymarching\n    float d0 = march(ro,rd, 1.);\n    vec3 p = ro + rd * d0;\n    vec3 n = normal(p);\n    \n    //Raymarch again, through the inside of the object, using inverted distance field\n    float d1 = march(p - n*0.01, rd, -1.); // -4.\n    \n    float dens = 40.;\n    float foff = 1.;\n    \n    float thick = 0.;//clamp(d1 / dens, 0.,1.);\n    //thick *= 0.5 + 0.5 * thc(4., 4. * n.y * pi);\n    \n    //foff = 0.5 + 0.5 * cos(n.y * pi);\n    //float blend = pow(thick, foff);\n    \n    float v = clamp(0.4 * d1, 0., 1.);\n    if (d0 < MAXDIST)\n        v = 1.-v;\n    \n   // v = smoothstep(0., 1., v);\n    vec3 e = vec3(v);\n    col =  pal(0.225 + 0.5 * n.y, e, e, e,  vec3(0.,0.33,0.66));\n    \n    //vec3 bg = vec3(col) + dot(rd, rd) * 0.28;\n    \n    //col = vec3(1.);\n    \n    // somehow adds \"lighting\", wasnt thinking when I wrote this\n    //col = mix(col, mix(vec3(0.), vec3(dot(rd,rd)), blend), blend);\n\n    //--------------------------------\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\nfloat thc(float a, float b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nfloat ths(float a, float b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec2 thc(float a, vec2 b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nvec2 ths(float a, vec2 b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec3 thc(float a, vec3 b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\n// (SdSmoothMin) stolen from here: https://www.shadertoy.com/view/MsfBzB\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}