{
    "Shader": {
        "info": {
            "date": "1632340907",
            "description": "fake 3d",
            "flags": 0,
            "hasliked": 0,
            "id": "sdKGW3",
            "likes": 3,
            "name": "fake 3d",
            "published": 3,
            "tags": [
                "fake3d"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 235
        },
        "renderpass": [
            {
                "code": "\n//https://iquilezles.org/articles/distfunctions2d\n\n///por jorge2017a2...2021-sep-19\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(antialiasing(0.05),b,d)\n\n//fake 3d =) 2d\n\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{   float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n///---------------------------\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n    \nvec2 opRep2D( in vec2 p, in vec2 c )\n\t{ vec2 q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n    \nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\nreturn colOut;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nvec3 nubes(vec2 p, vec3 colOut)\n{    \n    vec2 centro=vec2(0.0,0.0);\n    float c1= sdCircle(p-vec2(0.0,0.05), 0.105);\n    float c2= sdCircle(p-vec2(0.15,0.02), 0.065);\n    float c3= sdCircle(p-vec2(-0.15,0.02), 0.065);\n    float b1=sdBox(p-vec2(0.0,-0.04), vec2(0.22,0.045 ) );\n    \n    float res=unionSDF(c1, c2);\n    res=unionSDF(res, c3);\n    res=differenceSDF(res,b1 );\n    \n    colOut=DrawFigBorde(vec3(1.0), colOut, res );\n\treturn colOut;\n    \n}\n\nvec3 arbol(vec2 uv, vec3 col)\n{\n    float sdbtronco= sdBox(uv-vec2(0.5,0.0), vec2(0.0125,0.05));\n    float sdc1= sdCircle(uv-vec2(0.5,0.1), 0.05 );\n   \n    col=DrawFig(vec3(1.0,0.5,0.0), col, sdbtronco);\n    col=DrawFig(vec3(0.0,0.5,0.0), col, sdc1);\n    return col;\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nvec3 casav1(vec2 p, vec3 col)\n{\n    float sdbcasa1= sdBox(p-vec2(0.0,0.0), vec2(0.2,0.2));\n    float sdbventana= sdBox(p-vec2(0.1,0.0), vec2(0.05,0.05));\n    float sdbPuerta= sdBox(p-vec2(-0.1,-0.1), vec2(0.05,0.1));\n    float sdt1= sdTriangleIsosceles( -p-vec2(0.0,-0.4),vec2(0.2,0.2) );  \n\n    col=DrawFig(vec3(0.3,0.5,0.0), col, sdbcasa1);\n    col=DrawFig(vec3(0.8,0.7,0.0), col, sdbventana);\n    col=DrawFig(vec3(0.3,0.7,0.3), col, sdbPuerta);\n    col=DrawFig(vec3(0.0), col, sdt1);\n    col= arbol(p-vec2(0.0,-0.1),col);\n    col= arbol(p-vec2(0.2,-0.1),col);  \n    return col;\n}    \n\nvec3 casav2(vec2 p, vec3 col)\n{\n    float sdbcasa1= sdBox(p-vec2(0.0,0.0), vec2(0.2,0.2));\n    float sdbPuerta= sdBox(p-vec2(0.0,-0.05), vec2(0.15,0.15));\n    \n    col=DrawFig(vec3(0.3,0.8,0.9), col, sdbcasa1);\n    col=DrawFig(vec3(0.3,0.7,0.3), col, sdbPuerta);\n    return col;\n}\n\nvec3 casav3(vec2 p, vec3 col)\n{\n    float sdbcasa1= sdBox(p-vec2(0.025,0.05), vec2(0.225,0.25));\n    float sdbPuerta= sdBox(p-vec2(0.0,-0.075), vec2(0.15,0.125));\n    float sdbventana= sdBox(p-vec2(0.0,0.2), vec2(0.15,0.05));\n    \n    col=DrawFig(vec3(1.,0.5,0.2), col, sdbcasa1);\n    col=DrawFig(vec3(0.3,0.7,0.3), col, sdbPuerta);\n    col=DrawFig(vec3(0.0,0.0,1.), col, sdbventana);\n    return col;\n}\n\nvec3 casav4(vec2 p, vec3 col)\n{\n   float sdbcasa1= sdBox(p-vec2(0.0,0.08), vec2(0.3,0.28));\n   float sdbPuerta= sdBox(p-vec2(0.0,-0.05), vec2(0.15,0.15));\n   col=DrawFig(vec3(0.0,0.8,0.9), col, sdbcasa1);\n   col=DrawFig(vec3(0.3,0.1,0.3), col, sdbPuerta);\n   return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/max(iResolution.x,iResolution.y);    \n    vec3 col=vec3(0.0,0.0,1.0);\n   \n    vec2 pos=uv;\n        float horizon = 0.1;   //0.2\n        float fov = .5; \n        float scaling = 0.5;\n\t\n    \n    float theta=radians(15.0);\n    float l;\n    l=1.0/100.0;\n    float xp=pos.x+l*cos(theta);\n    float yp=pos.y+l*sin(theta);\n    \n    vec3 p2 = vec3(xp, fov, yp - horizon);\n    p2= rotate_y(p2, radians(90.0));\n\tvec2 s2p2 = vec2(p2.x/p2.z, p2.y/p2.z) * scaling;\n    \n    s2p2.y=opRep1D(s2p2.y+iTime*0.5, 4.0);\n    s2p2= rotatev2(s2p2, radians(90.0));\n    \n     if (s2p2.y<0.0)\n    { col=vec3(0.01,0.4,0.05);  }\n    else\n    {   col=vec3(0.1,0.1,0.8);// cielo\n        vec2 uv2=uv;\n        uv2.x+=mod(iTime*0.5, 3.0)-1.7;\n        col= nubes(uv2*1.5-vec2(0.0,0.4), col);\n        col= nubes(uv2*1.5-vec2(0.5,0.6), col);\n        col= nubes(uv2*2.5-vec2(-1.5,0.7), col);\n    }\n    \n   if (uv.x<0.0)\n   {col=casav1(s2p2-vec2(0.0,0.0), col);\n    col=casav2(s2p2-vec2(0.40,0.0), col);\n    col=casav3(s2p2-vec2(0.8,0.0), col);\n    col=casav4(s2p2-vec2(1.35,0.0),col);\n      \n   }\n   else\n    {   \n     \n     col=vec3(0.0);  \n    s2p2= -s2p2;\n    col=casav1(s2p2+vec2(0.0,0.0), col);\n    col=casav2(s2p2+vec2(0.40,0.0), col);\n    col=casav3(s2p2+vec2(0.8,0.0), col);\n    col=casav4(s2p2+vec2(1.35,0.0),col);\n    }\n   \n   fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}