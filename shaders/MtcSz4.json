{
    "Shader": {
        "info": {
            "date": "1479767179",
            "description": "First attempt to draw mandala like shapes.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtcSz4",
            "likes": 45,
            "name": "Mandala",
            "published": 3,
            "tags": [
                "procedural",
                "2d"
            ],
            "usePreview": 0,
            "username": "xbe",
            "viewed": 1684
        },
        "renderpass": [
            {
                "code": "// Xavier Benech\n// Mandala 2D\n//\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define PI 3.14159265\n\n#define aspect (iResolution.x/iResolution.y)\n\nfloat circle(vec2 p, float r, float width)\n{\n    float d = 0.;\n    d += smoothstep(1., 0., width*abs(p.x - r));\n    return d;\n}\n\nfloat arc(vec2 p, float r, float a, float width)\n{\n    float d = 0.;\n    if (abs(p.y) < a) {\n\t    d += smoothstep(1., 0., width*abs(p.x - r));\n    }\n    return d;\n}\n\n\nfloat rose(vec2 p, float t, float width)\n{\n    const float a0 = 6.;\n    float d = 0.;\n    p.x *= 7. + 8. * t;\n    d += smoothstep(1., 0., width*abs(p.x - sin(a0*p.y)));\n    d += smoothstep(1., 0., width*abs(p.x - abs(sin(a0*p.y))));\n    d += smoothstep(1., 0., width*abs(abs(p.x) - sin(a0*p.y)));\n    d += smoothstep(1., 0., width*abs(abs(p.x) - abs(sin(a0*p.y))));\n    return d;\n}\n\nfloat rose2(vec2 p, float t, float width)\n{\n    const float a0 = 6.;\n    float d = 0.;\n    p.x *= 7. + 8. * t;\n    d += smoothstep(1., 0., width*abs(p.x - cos(a0*p.y)));\n    d += smoothstep(1., 0., width*abs(p.x - abs(cos(a0*p.y))));\n    d += smoothstep(1., 0., width*abs(abs(p.x) - cos(a0*p.y)));\n    d += smoothstep(1., 0., width*abs(abs(p.x) - abs(cos(a0*p.y))));\n    return d;\n}\n\nfloat spiral(vec2 p, float width)\n{\n    float d = 0.;\n    d += smoothstep(1., 0., width*abs(p.x - 0.5 * p.y / PI));\n    d += smoothstep(1., 0., width*abs(p.x - 0.5 * abs(p.y) / PI));\n    d += smoothstep(1., 0., width*abs(abs(p.x) - 0.5 * p.y / PI));\n    d += smoothstep(1., 0., width*abs(abs(p.x) - 0.5 * abs(p.y) / PI));\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = uv - 0.5;\n\tp.x *= aspect;\n\n    vec2 f = vec2 ( sqrt(p.x*p.x + p.y*p.y), atan(p.y, p.x) );\n\n    float T0 = cos(0.3*iTime);\n    float T1 = 0.5 + 0.5 * cos(0.3*iTime);\n    float T2 = sin(0.15*iTime);\n    \n    float m0 = 0.;\n    float m1 = 0.;\n    float m2 = 0.;\n    float m3 = 0.;\n    float m4 = 0.;\n    if (f.x < 0.7325) {\n        f.y += 0.1 * iTime;\n\t    vec2 c;\n\t    vec2 f2;\n        c = vec2(0.225 - 0.1*T0, PI / 4.);\n        if (f.x < 0.25) {\n            for (float i=0.; i < 2.; ++i) {\n                f2 = mod(f, c) - 0.5 * c;\n                m0 += spiral(vec2(f2.x, f2.y), 192.);\n            }\n    \t}\n        c = vec2(0.225 + 0.1*T0, PI / 4.);\n        if (f.x > 0.43) {\n            for (float i=0.; i < 2.; ++i) {\n                f.y += PI / 8.;\n            \tf2 = mod(f, c) - 0.5 * c;\n                m1 += rose((0.75-0.5*T0)*f2, 0.4*T1, 24.);\n                m1 += rose2((0.5+0.5*T1)*f2, 0.2 + 0.2*T0, 36.);\n            }\n\t    }\n        c = vec2(0.6 - 0.2*T0, PI / 4.);\n        if (f.x > 0.265) {\n            for (float i=0.; i < 2.; ++i) {\n                f.y += PI / 8.;\n                f2 = mod(f, c) - 0.5 * c;\n                m2 += spiral(vec2((0.25 + 0.5*T1)*f2.x, f2.y), 392.);\n                m2 += rose2((1.+0.25*T0)*f2, 0.5, 24.);\n            }\n        }\n        c = vec2(0.4 + 0.23*T0, PI / 4.);\n        if (f.x < 0.265) {\n            for (float i=0.; i < 2.; ++i) {\n                f.y += PI / 8.;\n                f2 = mod(f, c) - 0.5 * c;\n                m3 += spiral(vec2(f2.x, f2.y), 256.);\n                m3 += rose(f2, 1.5 * T1, 16.);\n            }\n        }\n        m4 += circle(f, 0.040, 192.);\n        m4 += circle(f, 0.265, 192.);\n        m4 += circle(f, 0.430, 192.);\n    }\n    m4 += circle(f, 0.7325, 192.);\n\n    // color\n    float z = m0 + m1 + m2 + m3 + m4;\n    z *= z;\n    z = clamp(z, 0., 1.);\n    vec3 col = vec3(z) * vec3(0.33*T2);\n    \n    // Background\n\tvec3 bkg = vec3(0.32,0.36,0.4) + p.y*0.1;\n\tcol += bkg;\n    \n\t// Vignetting\n\tvec2 r = -1.0 + 2.0*(uv);\n\tfloat vb = max(abs(r.x), abs(r.y));\n\tcol *= (0.15 + 0.85*(1.0-exp(-(1.0-vb)*30.0)));\n\n    fragColor = vec4( col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}