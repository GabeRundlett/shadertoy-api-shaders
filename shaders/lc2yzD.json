{
    "Shader": {
        "info": {
            "date": "1722010010",
            "description": "Optical illusion, dots at the edge of you vision look like they are filled with black. But when you focus on them they are completely white.",
            "flags": 0,
            "hasliked": 0,
            "id": "lc2yzD",
            "likes": 0,
            "name": "Dot grid optical illusion",
            "published": 3,
            "tags": [
                "simple",
                "illusion",
                "trainning"
            ],
            "usePreview": 0,
            "username": "SSAlp",
            "viewed": 50
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 white = vec3(1, 1, 1);\n    // What percent of white do you want your gray to be (0 = black, 1 = white)\n    float grayFactor = 0.4;\n    // distance between grid lines\n    float gridSpacing = 0.2;\n    // width of grid lines\n    float gridWidth = 0.025;\n    // vector of grid shift (can also be seen as the position of one grid intersection relative to the center of\n    // the screen)\n    vec2 gridShift = vec2(0.0, 0.0);\n    // the radius of the dots at the intersections should be the ditance between the intersection and the corner\n    // created by the intersecting grid lines. Such that the dot \"fills\" the intersection and touches the corner\n    // of the black squares.\n    float dotRad = distance(vec2(gridWidth, gridWidth)/2.0, vec2(0.0, 0.0));\n    \n    // Center the coordinates\n    vec2 uv = fragCoord - (iResolution.xy / 2.0);\n    // Normalized pixel coordinates (from 0 to 1) with respect to the y axis\n    uv = uv / iResolution.y;\n    \n    // distance (on x and y) to the next grid lines WHEN GOING TOWARD (0,0). This distance is relative to lines\n    // spacing. example : if relDistToNext = (0.7, 0.1) then there is 70% of the way left between the last\n    // vertical grid line and the next and 10% of the way left from the last horizontal grid line and the next.\n    vec2 relDistToNext = fract(abs(uv + gridShift) / gridSpacing);\n    // distance (on x and y) to the closest grid lines. Relative to lines spacing.\n    vec2 relDistToGrid = min(relDistToNext, 1.0 - relDistToNext);\n    // distance (on x and y) to the closest grid lines.\n    vec2 distToGrid = relDistToGrid * gridSpacing;\n    \n    // Euclidian distance to the closest intersection\n    float distToDot = distance(distToGrid, vec2(0.0, 0.0));\n    \n    float isOnGrid = float((distToGrid.x <= gridWidth / 2.0) || (distToGrid.y <= gridWidth / 2.0));\n    float isOnDot = float(distToDot <= dotRad);\n    \n    // grid lines are colored in gray and the dots at the intersections ar colored in white.\n    vec3 col = white * (isOnGrid * grayFactor) + white * (isOnDot * (1.0 - grayFactor));\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}