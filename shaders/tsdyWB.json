{
    "Shader": {
        "info": {
            "date": "1601667757",
            "description": "Very Very Sleepy...",
            "flags": 0,
            "hasliked": 0,
            "id": "tsdyWB",
            "likes": 2,
            "name": "You are feeling sleepy 2",
            "published": 3,
            "tags": [
                "hypnotise"
            ],
            "usePreview": 0,
            "username": "itgaz",
            "viewed": 305
        },
        "renderpass": [
            {
                "code": "/*\nCopyright 2020 Gareth Francis\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nvec2 rotate(vec2 v, float a, vec2 origin) {\n    v = v - origin;\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn (m * v) + origin;\n}\n\nvec2 aspectCorrect( in vec2 uv )\n{\n   vec2 p = vec2(uv.x * (iResolution.x / iResolution.y), uv.y);\n   return p;\n}\n\n// Angle between axis and coord, around center of screen\nfloat angle( vec2 origin, vec2 axis, vec2 coord ) {\n    vec2 a = normalize( axis );\n    vec2 b = normalize( origin - coord );\n    return acos( dot(a, b) );\n}\n\nvoid tunnel( out vec4 fragColor, in vec2 uv )\n{\n    uv = aspectCorrect(uv);\n    vec2 origin = aspectCorrect(vec2(0.5));\n    \n    float anglePc = angle(origin, vec2(0.0, -1.0), uv) / radians(360.0);\n    float dist = - (anglePc* 2.0) - distance(uv, origin);\n    vec4 baseColour = vec4(sin(iTime), cos(iTime * 2.0), sin(iTime * 8.0), 1.0);\n    \n    fragColor = sin((iTime * 12.0) + (dist * 32.0)) * baseColour;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // read frequency info (for le bass)\n    vec4 bassFFT1 = texture( iChannel0, vec2(0.05, 0.25) );\n    vec4 bassFFT2 = texture( iChannel0, vec2(0.10, 0.25) );\n    vec4 bassFFT3 = texture( iChannel0, vec2(0.15 , 0.25) );\n    \n    \n    // Rotate around the center\n    // uv = rotate(uv,(2.0 * /*sin*/(iTime * 0.5)) /*+ (bassFFT1.x)*/, vec2(0.0, 0.0));\n    \n\t// Mirror\n    uv = uv.x > 0.5 ? vec2(1.0 - uv.x, uv.y) : uv.xy;\n    \n    \n    // Mirror again <3\n    uv = uv.y > 0.5 ? vec2(uv.x, 1.0 - uv.y) : uv.xy;\n    \n    // Zoom/Repeat effect\n    // uv = fract(uv + /*cos(iTime / 3.0)*/ + (bassFFT2.x * bassFFT1.x * 7.0));\n    \n    vec2 uvDir = uv - vec2(0.0);\n    uv = fract((distance(uv, vec2(0.5)) + cos(iTime / 3.0) + (bassFFT2.r * bassFFT1.r)) * 2.0) * uvDir ;\n    \n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    tunnel(fragColor, uv);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}