{
    "Shader": {
        "info": {
            "date": "1558064322",
            "description": "Pikachu's attack \"thunderbolt\"",
            "flags": 0,
            "hasliked": 0,
            "id": "3tfGWl",
            "likes": 34,
            "name": "Pikachu Thunderbolt",
            "published": 3,
            "tags": [
                "procedural",
                "2d"
            ],
            "usePreview": 0,
            "username": "nyri0",
            "viewed": 6136
        },
        "renderpass": [
            {
                "code": "#define V 3\n\nconst float PI = 3.14159265;\n\n// Adds pikachu to the image\nvec3 addPikachu(vec2 uv, vec3 bg) {\n    float screenRatio = iResolution.x / iResolution.y;\n    const vec2 picDim = vec2(128.0, 120.0);\n    const float bTop = 0.5;\n    float bLeft = 0.55 - 0.5 * bTop * picDim.x / (picDim.y * screenRatio);\n    float bRight = 0.55 + 0.5 * bTop * picDim.x / (picDim.y * screenRatio);\n    if(uv.x < bLeft || uv.x > bRight || uv.y > bTop)\n        return bg;\n\n    int idx_x = int(picDim.x * (uv.x - bLeft) / (bRight - bLeft));\n    int idx_y = int(picDim.y * (bTop - uv.y) / bTop);\n\n    return pikachuText(idx_x, idx_y, bg);\n}\n\n// Finds a vector normal to the given vector\nvec2 vnorm(in vec2 v) {\n    return vec2(v.y, -v.x);\n}\n\n// Moves the points according to time and the id of the line\nvec2 getOffset(vec2 pos, vec2 posParent, vec2 offsetParent, int i) {\n    float rMag = i < 5 ? 0.1 : 0.04;\n    float lMag = i < 5 ? 0.04 : 0.01;\n    float period = 0.25 + 0.05 * mod(float(i), 3.0);\n    float tShift = iTime - 1.3 * float(i);\n    vec2 rOffset = rMag * 0.666 * floor(1.5*cos(7.0*float(i) + tShift / period)\n                                        * vnorm(pos - posParent - offsetParent));\n    vec2 lOffset = lMag * 0.666 * floor(1.5*cos(11.0*float(i) + tShift / period)\n                                        * (pos - posParent - offsetParent));\n    return offsetParent + rOffset + lOffset;\n}\n\n// Returns the lines that make the lightning\nconst int nbVertices = 25;\nconst int nbLines = nbVertices - 1;\nvec4[nbLines] getLines() {\n    const vec2[nbVertices] vertices = vec2[nbVertices] (\n        vec2(0.5, 0.1), vec2(0.2, 0.3), vec2(0.32, 0.5),\n        vec2(0.51, 0.55), vec2(0.75, 0.51), vec2(0.8, 0.2),\n        vec2(-0.05, 0.15), vec2(-0.15, 0.35), vec2(0.1, 0.6),\n        vec2(0.25, 0.7), vec2(-0.1, 0.5), vec2(-0.1, 0.8),\n        vec2(0.17, 1.1), vec2(0.3, 1.1), vec2(0.45, 0.69),\n        vec2(0.59, 0.83), vec2(0.48, 1.15), vec2(0.8, 1.15),\n        vec2(0.79, 0.79), vec2(0.94, 1.2), vec2(1.03, 1.07),\n        vec2(1.1, 0.63), vec2(0.93, 0.31), vec2(1.15, 0.1),\n        vec2(1.1, 0.28)\n    );\n    const ivec2[nbLines] lines = ivec2[nbLines] (\n        ivec2(0, 1), ivec2(0, 2), ivec2(0, 3), ivec2(0, 4),\n        ivec2(0, 5), ivec2(1, 6), ivec2(1, 7), ivec2(2, 8),\n        ivec2(2, 9), ivec2(8, 10), ivec2(8, 11), ivec2(9, 12),\n        ivec2(9, 13), ivec2(3, 14), ivec2(3, 15), ivec2(14, 16),\n        ivec2(15, 17), ivec2(4, 18), ivec2(18, 19), ivec2(18, 20),\n        ivec2(4, 21), ivec2(5, 22), ivec2(5, 23), ivec2(22, 24)\n    );\n    vec2[nbVertices] offsets;\n    offsets[0] = vec2(0.0, 0.0);\n    for(int i = 0; i < nbLines; i++) {\n        offsets[lines[i].y] = getOffset(vertices[lines[i].y],\n                                        vertices[lines[i].x],\n                                        offsets[lines[i].x], i);\n    }\n    vec4[nbLines] verticeLines;\n    for(int i = 0; i < nbLines; i++) {\n        verticeLines[i] = vec4(vertices[lines[i].x] + offsets[lines[i].x],\n                               vertices[lines[i].y] + offsets[lines[i].y]);\n    }\n    return verticeLines;\n}\n\n// Returns the lines that make Pikachu\nconst int nbPkVertices = 5;\nconst int nbPkLines = 5;\nvec4[nbPkLines] getPkLines() {\n    const vec2[nbPkVertices] vertices = vec2[nbPkVertices] (\n        vec2(0.43, 0.08), vec2(0.48, 0.3), vec2(0.54, 0.29),\n        vec2(0.59, 0.18), vec2(0.59, 0.07)\n    );\n    const ivec2[nbPkLines] lines = ivec2[nbPkLines] (\n        ivec2(0, 1), ivec2(1, 2), ivec2(2, 3), ivec2(3, 4), ivec2(4, 0)\n    );\n    vec4[nbPkLines] verticeLines;\n    for(int i = 0; i < nbPkLines; i++) {\n        verticeLines[i] = vec4(vertices[lines[i].x], vertices[lines[i].y]);\n    }\n    return verticeLines;\n}\n\n// From https://www.shadertoy.com/view/4sc3z2\n// and https://www.shadertoy.com/view/XsX3zB\n#define MOD3 vec3(.1031,.11369,.13787)\nvec3 hash33(vec3 p3)\n{\n    p3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\nfloat simplexNoise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n    \n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n    \n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n    vec3 i1 = e * (1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy * (1.0 - e);\n    \n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n    \n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n    \n    return dot(vec4(31.316), n);\n}\n\n// Creates the background texture\nvec3 backgroundDefault(vec2 uv) {\n    return vec3(0.05, 0.4, 0.2) + vec3(0.0, -0.05, 0.1)*simplexNoise(vec3(4.0*uv, 1.0));\n}\n\nfloat dot2(in vec2 v)\n{\n    return dot(v, v);\n}\n\n// Distance between p and the line from a to b\nfloat lineDist( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 adjRatio = vec2(1.0, iResolution.y / iResolution.x);\n    vec2 pp = vec2((p.x - 0.5) / (1.0 + 0.3 * p.y) + 0.5, p.y);\n    vec2 pa = (pp-a)*adjRatio, ba = (b-a)*adjRatio;\n    float h = clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);\n    float sdist = dot2(pa-ba*h);\n    return sdist;\n}\n\n// Break the line according to the value of i\n// and return the minimum distance between p and\n// one of the sub-lines between a and b\nfloat lineMultiDist(in vec2 p, in vec2 a, in vec2 b, in int i)\n{\n    float offset1 = 0.4 + 0.05 * cos(5.0 * iTime + float(i+3));\n    float offset2 = 0.7 + 0.05 * cos(5.0 * iTime + float(i+5));\n    float shift1 = 0.02 + 0.04 * cos(5.0 * iTime + float(i));\n    float shift2 = -0.02 + 0.04 * sin(5.0 * iTime + float(i));\n    vec2[4] points = vec2[4] (\n        a,\n        mix(a, b, offset1) + shift1 * vnorm(b - a),\n        mix(a, b, offset2) + shift2 * vnorm(b - a),\n        b\n    );\n    float dm = 10.0;\n    for(int i = 0; i < 3; i++) {\n        dm = min(dm, lineDist(p, points[i], points[i+1]));\n    }\n    return dm;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float noiseMicro = simplexNoise(vec3(20.0*uv, floor(iTime * 10.)));\n    float noiseMacro = simplexNoise(vec3(5.0*uv, iTime));\n    vec2 uv_o = uv + 0.007 * vec2(noiseMicro, noiseMicro) + 0.02 * vec2(noiseMacro, noiseMacro);\n\n    // Background color\n    vec3 col = backgroundDefault(uv);\n    \n    // Pikachu contour\n    vec4[nbPkLines] pkLines = getPkLines();\n    float di = 10.0;\n    for(int i = 0; i < nbPkLines; i++) {\n        di = min(di, lineDist(uv, pkLines[i].xy, pkLines[i].zw));\n    }\n    di /= (1.0 + 0.2 * cos(2.0*iTime) + 0.05 * cos(15.0*iTime));\n    float ampl = 1.0 / (1.0 + 3.0 * length(uv - vec2(0.5, 0.1)));\n    col = mix(col, vec3(1.0, 0.9, 0.5),0.8*(1.0-smoothstep(0.0,0.12,sqrt(di)*ampl)));\n    ampl = 1.0 / (1.0 + 3.0 * length(uv - vec2(0.5, 0.1)));\n    col = mix(col, vec3(1.0, 0.95, 0.4),0.8*(1.0-smoothstep(0.0,0.05,sqrt(di)*ampl)));\n     \n\n    // Thunderbolts\n    vec4[nbLines] lines = getLines();\n    const int[nbLines] groups = int[nbLines] (\n        0,1,2,3,4,0,0,1,1,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4\n    );\n    float[5] showgroup = float[5] (1.3*iTime, 1.1*iTime+0.5, 1.0*iTime+0.7, 1.4*iTime+0.3, 1.2*iTime+0.1);\n    di = 10.0;\n    int lum = 0;\n    for(int i = 0; i < nbLines; i++) {\n        if(fract(showgroup[groups[i]]) > 0.5) {\n        \tdi = min(di, lineMultiDist(uv_o, lines[i].xy, lines[i].zw, i));\n            lum++;\n        }\n    }\n  \n    if(fract(iTime * 7.) > 0.2)\n    {\n    col = mix(col, vec3(0.9, 0.9, 0.7), 0.7 * float(lum) / float(nbLines));\n\n    ampl = 1.0 / (1.0 + 3.0 * length(uv - vec2(0.5, 0.1)));\n    col = mix(col, vec3(1.0, 0.9, 0.4), 1.0-smoothstep(0.000002,0.00008,di*ampl));\n    col = mix(col, vec3(1.0, 1.0, 0.7), 1.0-smoothstep(0.000002,0.00001,di*ampl));\n    }\n\n    // Adding pikachu\n    col = addPikachu(uv, col);\n      \n    // Vignetting\n    col *= pow( 20.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.07 );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 pikachuText(int idx_x, int idx_y, vec3 col) {\nconst vec3[7] colors = vec3[7](vec3(1.000,0.847,0.145),vec3(0.165,0.165,0.149),vec3(0.917,0.314,0.145),vec3(0.980,0.980,0.980),vec3(0.753,0.435,0.157),vec3(0.902,0.666,0.180),vec3(0.764,0.259,0.090));\nint idx = idx_y * 128 + idx_x;\nuint off = uint(idx % 10);\nuint pos = uint(idx / 10);\nint index;\nif(pos >= 0u && pos < 128u) {\n  const int[128] indexv = int[128] (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,524288,0,0,0,0,0,0,0,0,0,0,0,0,74752,0,0,0,0,0,0,0,0,0,0,0,0,1170,0,0,0,0,0,0,0,0,0,0,0,306184192,18,0,0,0,0,0,0,0,0,0,0,0,306782208,0,0,0,0,0,0,0,0,0,0,0,0,4793488,0,0,0,0,0,0,0,0,0,0,0,301989888,74898,0,0,0,0,0,0,0,0,0,0,0,306774016,1170,0,0,0,0,0,0,0,0,0,0,0,306783360,18,0,0,0,0,0,0,0,0);\n  index = (indexv[pos % 128u] >> (3u * off)) & 7; }\nif(pos >= 128u && pos < 256u) {\n  const int[128] indexv = int[128] (0,0,268435456,306783378,0,0,0,0,0,0,0,0,0,0,0,306708480,4793490,0,0,0,0,0,0,0,0,0,0,0,306782208,74898,0,0,0,0,0,0,134217728,153391689,0,0,0,306783376,1170,0,0,0,0,0,0,153391680,153391689,0,0,268435456,306783378,18,0,0,0,0,0,153391680,153391689,19173961,0,0,306708480,287610002,0,0,0,0,0,153391104,153391689,153391689,299593,0,0,306782208,2396745,0,0,0,0,150994944,153391689,153391689,153391689,4681,0,0,153429136,37449,0,0,0,0,153391688,153391689,153391689,153391689,9,0,268435456,153391698,585,0,0,0,153387008,153391689,153391689,153391689,153391689,0,0,172490752,153391689,9,0,0,0,153391689,153391689,153391689,153391689,299593);\n  index = (indexv[pos % 128u] >> (3u * off)) & 7; }\nif(pos >= 256u && pos < 384u) {\n  const int[128] indexv = int[128] (0,0,153427968,153391689,0,0,0,153387008,153391689,153391689,153391689,153391689,4681,0,0,153391760,299593,0,0,0,153391689,153391689,153391689,153391689,153391689,9,0,268435456,153391689,4681,0,0,153387008,153391689,153391689,153391689,153391689,153391689,0,0,153092096,153391689,9,0,0,153391689,153391689,153391689,153391689,153391689,299593,0,0,153391104,153391689,0,0,153092096,153391689,153391689,153391689,153391689,153391689,4681,0,0,153391680,2396745,0,0,153387008,153391689,153391689,153391689,153391689,153391689,9,0,0,153391689,4681,0,0,153391616,153391689,153391689,153391689,153391689,153391689,0,0,153092096,153391689,73,0,0,165375360,153391689,153391689,153391689,153391689,299593,0,0,153387008,153391689,0,0,0,920350128,165375414,153391689,153391689,153391689,4681,0,0,153391616,2396745,0,0,0,920350134,920350134,153391734,153391689,153391689,9);\n  index = (indexv[pos % 128u] >> (3u * off)) & 7; }\nif(pos >= 384u && pos < 512u) {\n  const int[128] indexv = int[128] (0,0,153391688,4681,0,0,805306368,920350134,153415094,306782793,153391690,153391689,0,0,134217728,153391689,73,0,0,905969664,920350134,153391689,306783305,153391698,299593,0,0,153354240,824480329,6,0,0,918552576,153415094,153391689,306783377,153391698,4681,0,0,153391104,14193225,0,0,0,920125440,153391694,287609417,306783378,153391734,9,0,0,153391680,224329,0,0,0,153550848,153391689,306745929,910763154,153391734,0,0,0,153391689,153354673,153391689,0,0,153391680,153391689,306782793,920331410,299638,0,0,150994944,908366409,153391689,153391689,73,150994944,153391689,153391689,306783377,920350098,4726,0,0,153354240,154866249,153391689,153391689,585,153391104,153391689,287609417,910763154,920350134,118,0,0,153391104,153394249,153391689,153391689,37449,153391689,153391689,306745929,920347794,920350134,0,0,0,153391680,153391689,153391689,153391689,153391689,153391689,153391689,306783305,918577152,224694,0);\n  index = (indexv[pos % 128u] >> (3u * off)) & 7; }\nif(pos >= 512u && pos < 640u) {\n  const int[128] indexv = int[128] (0,0,153391689,153391689,153391689,153391689,153391689,153391689,153391689,74898,0,0,0,0,150994944,153391689,153391689,153391689,153391689,153391689,153391689,306483785,18,0,0,0,0,153354240,153391689,153391689,153391689,153391689,153391689,153391689,709435977,0,0,0,0,0,153391104,153391689,153391689,153391689,153391689,153391689,918852169,14328982,0,0,0,0,0,153391680,153391689,153391689,153391689,153391689,153391689,383479177,1797554,0,0,0,0,134217728,153391689,153391689,153391689,153391689,153391689,920326729,920350134,224694,0,0,0,0,153092096,153391689,153391689,153391689,153391689,920162889,115043766,920349696,28086,0,0,0,0,153387008,153391689,153391689,153391689,153391689,920162889,805306806,920350134,3510,0,0,0,0,153391680,153391689,153391689,153391689,153391689,920326729,920350134,920350134,54,0,0,0,0,153391689,153391689,153391689,153391689,153391689,920347209,920350134,920350134,6,0,0);\n  index = (indexv[pos % 128u] >> (3u * off)) & 7; }\nif(pos >= 640u && pos < 768u) {\n  const int[128] indexv = int[128] (0,150994944,153391689,153391689,153391689,153391689,153391689,920350089,920350134,115043766,0,0,0,0,153354240,153391689,153391689,153391689,153391689,153391689,920350129,920350134,1797558,0,0,0,0,153391616,153391689,153391689,153391689,153391689,824480329,920350134,920350134,3510,0,0,0,0,153391688,153391689,153391689,153391689,153391689,918852169,920350134,14380470,0,0,0,0,134217728,153391689,153391689,153391689,153391689,153391689,918229577,1797558,0,0,0,0,0,153092096,153391689,153391689,153391689,153391689,153391689,920052297,28086,0,0,0,0,0,153387008,153391689,153391689,153391689,153391689,153391689,920313225,3510,0,0,0,0,0,153391616,153391689,153391689,153391689,153391689,153391689,920345462,438,0,0,0,0,0,153391689,153391689,153391689,153391689,153391689,908366409,920349550,46,0,0,0,0,150994944,153391689,153391689,153391689,153391689,153391689,784634441,903535981,5,0,0,0);\n  index = (indexv[pos % 128u] >> (3u * off)) & 7; }\nif(pos >= 768u && pos < 896u) {\n  const int[128] indexv = int[128] (0,153354240,153391689,153391689,153391689,153391689,153391689,758846025,766991221,0,0,0,0,0,153391104,153391689,153391689,153391689,153391689,153391689,901049417,95869806,0,0,0,0,0,153391680,153391689,153391689,153391689,153391689,153391689,699847601,11983725,0,0,0,0,0,304386633,153391716,153391689,153391689,153396401,824480329,768006734,187245,0,0,0,0,150994944,612962889,153391692,153391689,606376521,153396372,247763529,766810985,2925,0,0,0,0,153354240,613557385,153391689,153391689,613552713,153391762,691737161,95867757,0,0,0,0,0,153391616,160580754,153391689,153391689,311576713,153391698,765783113,2893,0,0,0,0,0,304386632,153503890,153391689,153391689,306858274,153391689,229938097,365,0,0,0,0,134217728,306745929,153392274,153391689,304386633,155788580,824480329,758567502,5,0,0,0,0,153354240,306782793,153391698,153391689,307794505,153429138,247763529,765778761,0,0,0,0);\n  index = (indexv[pos % 128u] >> (3u * off)) & 7; }\nif(pos >= 896u && pos < 1024u) {\n  const int[128] indexv = int[128] (0,153464832,172565577,153391689,153391689,306778697,153392274,154866249,11965289,0,0,0,0,0,153466560,153429129,153391689,153391689,306782793,153391690,690285961,1497673,0,0,0,0,402653184,153401051,153391689,153396297,153391689,155788361,191730249,153392054,27465,0,0,0,0,459276288,153392859,153391689,153392265,153391689,153391689,917354201,153391694,109,0,0,0,0,460161024,153391707,153391689,153391689,153391689,455381577,165131995,757371465,9,0,0,0,0,460174848,153391691,153391689,153391689,153391689,460165705,153583323,162828873,0,0,0,0,0,191739608,153391689,153391689,153391689,153391689,460175049,153394683,2413129,0,0,0,0,402653184,158185179,153391689,153391689,153391689,153391689,997045979,153391735,299849,0,0,0,0,452984832,153466587,153391689,153391689,153391689,459575881,268285659,153391689,4681,0,0,0,0,460062720,153392859,287609417,153391698,153391689,460165705,154662619,153391689,73,0,0,0);\n  index = (indexv[pos % 128u] >> (3u * off)) & 7; }\nif(pos >= 1024u && pos < 1152u) {\n  const int[128] indexv = int[128] (0,460173312,153391707,766022217,153391698,153391689,460174921,153415675,153391689,1,0,0,0,0,460174912,153391689,690410569,153391698,153391689,997045977,153391743,19173961,0,0,0,0,0,158185177,153391689,690262634,153391698,421827145,939374299,153391689,2396745,0,0,0,0,153092096,153466587,153391689,153391689,153391690,459575881,154662619,153391689,37449,0,0,0,0,421826560,153391835,153391689,153391689,153391689,460100169,153415675,153391689,585,0,0,0,0,455381568,153391689,153391689,153391689,153391689,1064153673,153391727,153391689,9,0,0,0,134217728,153391689,153391689,153391689,153391689,153391689,234862153,153391689,824480329,0,0,0,0,153092096,153391689,153391689,153391689,153391689,153391689,154852233,153391689,12882505,0,0,0,0,153391104,153391689,153391689,153391689,153391689,153391689,153392054,824480329,221769,0,0,0,0,153391680,153391689,153391689,153391689,153391689,918852169,153391694,247763529,3465,0,0,0);\n  index = (indexv[pos % 128u] >> (3u * off)) & 7; }\nif(pos >= 1152u && pos < 1280u) {\n  const int[128] indexv = int[128] (134217728,153391689,153391689,153391689,153391689,153391689,165372489,153391689,825791049,54,0,0,0,153092096,153391689,153391734,153391689,153391689,153391689,153415089,153391689,920347209,0,0,0,0,153391104,824480329,153391694,153391689,153391689,908366409,153392054,153391689,14380105,0,0,0,0,153391680,908366409,153391694,153391689,153391689,920326729,153391689,153391689,224689,0,0,0,134217728,153391689,918852169,153391694,153391689,153391689,154889649,153391689,824480329,438,0,0,0,153092096,153391689,920162889,153391694,153391689,918852169,153394614,153391689,918852169,6,0,0,0,153391104,153391689,920347209,153391734,153391689,920350089,153391694,153391689,114856521,0,0,0,0,153391680,153391689,920349769,153392054,918852169,165375414,153391689,153391689,1794633,0,0,0,134217728,153391689,153391689,920350089,920350134,920350134,153415094,153391689,153391689,3465,0,0,0,153092096,153391689,153391689,920350134,920350134,920350134,153391734,153391689,153391689,54,0,0,0);\n  index = (indexv[pos % 128u] >> (3u * off)) & 7; }\nif(pos >= 1280u && pos < 1408u) {\n  const int[128] indexv = int[128] (153391104,153391689,824480329,920350134,920350134,920350134,153391689,153391689,908366409,0,0,0,0,153391680,153391689,918852169,920350134,920350134,249261494,153391689,153391689,14193225,0,0,0,0,153391689,153391689,920326729,920350134,920350134,154889654,153391689,153391689,1794633,0,0,0,153092096,153391689,153391689,920350089,920350134,920350134,153578934,153391689,153391689,28041,0,0,0,153387008,153391689,153391689,920350134,920350134,920350134,153415094,153391689,153391689,438,0,0,0,153391616,153391689,918852169,920350134,920350134,920350134,153392054,153391689,908366409,1,0,0,0,153391689,153391689,918553161,920350134,920350134,920350134,153391734,153391689,154702409,0,0,0,150994944,153391689,153391689,920125441,920350134,438,0,153391688,153391689,2417225,0,0,0,153354240,153391689,2396745,920326656,920350134,0,0,153391689,153391689,37769,0,0,0,153391104,153391689,4681,920326729,1797558,0,150994944,153391689,153391689,585,0,0,0);\n  index = (indexv[pos % 128u] >> (3u * off)) & 7; }\nif(pos >= 1408u && pos < 1536u) {\n  const int[128] indexv = int[128] (153391688,153391689,153092105,920162889,3510,0,153092096,153391689,153391689,9,0,0,134217728,153391689,19173961,153391104,920162889,6,0,153354240,153391689,153391689,0,0,0,153092096,153391689,37449,153391680,1774153,0,0,153387008,153391689,2396745,0,0,0,153387008,153391689,73,153391689,585,0,0,153391104,153391689,37449,0,0,0,153391104,153391689,150994944,153391689,0,0,0,153391616,153391689,585,0,0,0,153391616,37449,153092096,37449,0,0,0,153391680,153391689,1,0,0,0,153391616,9,153354240,9,0,0,0,153391688,19173961,0,0,0,0,0,0,0,0,0,0,0,153391689,37449,0,0,0,0,0,0,0,0,0,0,134217728,153391689,73,0,0,0,0,0,0,0,0,0,0,134217728,153391689,0,0,0,0);\n  index = (indexv[pos % 128u] >> (3u * off)) & 7; }\nif(index == 0) return col;\nelse return colors[index-1];\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}