{
    "Shader": {
        "info": {
            "date": "1723645199",
            "description": "port of twigl code; https://twigl.app/?ol=true&ss=-O47nOaumEkDnpPbLJe7\ni've cut so many chars since making it so i've shared this with a slowly decreasing char count lol\nthis is like the first shader i'm really happy with, pls send any tips my way!!",
            "flags": 0,
            "hasliked": 0,
            "id": "XcffW8",
            "likes": 6,
            "name": "analog, 324 chars",
            "published": 3,
            "tags": [
                "2d",
                "simple",
                "basic",
                "sdf",
                "circle",
                "art",
                "creative"
            ],
            "usePreview": 0,
            "username": "IDG_works",
            "viewed": 119
        },
        "renderpass": [
            {
                "code": "/* mat2 rot (float a) {\n    float s = sin(a),\n    c = cos(a);\n    return mat2 (c, -s, s, c);\n}\n*/ \n\n// very much inspired by kishimisu's works, check them out !! https://www.kishimisu.art/\n// original twigl code: https://twigl.app/?ol=true&ss=-O47nOaumEkDnpPbLJe7\n// i'm aware the twigl post is unoptimized and outdated, but that's just how it goes lol\n// i don't want to tamper what's already published, that's what this shadertoy port is partially for!\n\n// if this code doesn't run on your device, try https://www.shadertoy.com/view/XcffW8\n\nvoid mainImage( out vec4 o, in vec2 F )\n{\n    vec2 R = iResolution.xy,\n    u = (F+F-R.xy)/R.y;\n    \n    //u*=3.5;\n    //u.y -= 1.;\n    // for setting the loop count really high for fun lol, would recommend\n    \n    \n    float i, // i loop\n    t = iTime; // time\n    vec3 col = vec3(0.);\n    \n    for(o *= i; i++ < 40.; // loop\n    // u *= rot(i/96.), // fun piece of code to make it more 2 dimensional, kinda wish this was in the original! make denominator 12*loopAmount\n        o += vec4(vec3(\n            .005/abs(length(vec2( // main circle sdf\n            u + vec2(i/32. + sin(t * i/8.) / 2. - .5, // modulate x movement\n            i/32. + cos(t * i/8.) / 2. - .5))) - .07)) // modulate y movement\n            * vec3(vec3(.8, .3, .2) + vec3(.7, .5, 1.) * cos(6. * (vec3(.6, .3, .3) * (t/8. + (i/16.)) + vec3(2.8, 3., -.3 )))), 0.)); // colorization\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}