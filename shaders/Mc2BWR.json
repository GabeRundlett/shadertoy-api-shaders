{
    "Shader": {
        "info": {
            "date": "1724827071",
            "description": "This is a shader for edge detection",
            "flags": 34,
            "hasliked": 0,
            "id": "Mc2BWR",
            "likes": 0,
            "name": "adhtri::EdgeDetection",
            "published": 3,
            "tags": [
                "computervision"
            ],
            "usePreview": 0,
            "username": "AdhTri001",
            "viewed": 117
        },
        "renderpass": [
            {
                "code": "const mat3 dX = mat3(\n    -1, 0, 1,\n    -2, 0, 2,\n    -1, 0, 1\n);\n\nfloat processR(vec2 uv, vec2 X, vec2 Y) {\n    mat3 imageMat = mat3(\n        texture(iChannel0, uv - X + Y).x,\n        texture(iChannel0, uv + Y).x,\n        texture(iChannel0, uv + X + Y).x,\n        texture(iChannel0, uv - X).x,\n        texture(iChannel0, uv).x,\n        texture(iChannel0, uv + X).x,\n        texture(iChannel0, uv - X - Y).x,\n        texture(iChannel0, uv -Y).x,\n        texture(iChannel0, uv + X - Y).x\n    );\n\n    mat3 dermatX = imageMat * dX;\n    mat3 dermatY = transpose(imageMat) * dX;\n    float s = 0.;\n    \n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            s += length(vec2(dermatX[i][j], dermatY[i][j]));\n        }\n    }\n    return s;\n}\n\nfloat processG(vec2 uv, vec2 X, vec2 Y) {\n    mat3 imageMat = mat3(\n        texture(iChannel0, uv - X + Y).y,\n        texture(iChannel0, uv + Y).y,\n        texture(iChannel0, uv + X + Y).y,\n        texture(iChannel0, uv - X).y,\n        texture(iChannel0, uv).y,\n        texture(iChannel0, uv + X).y,\n        texture(iChannel0, uv - X - Y).y,\n        texture(iChannel0, uv -Y).y,\n        texture(iChannel0, uv + X - Y).y\n    );\n\n    mat3 dermatX = imageMat * dX;\n    mat3 dermatY = transpose(imageMat) * dX;\n    float s = 0.;\n    \n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            s += length(vec2(dermatX[i][j], dermatY[i][j]));\n        }\n    }\n    return s;\n}\n\nfloat processB(vec2 uv, vec2 X, vec2 Y) {\n    mat3 imageMat = mat3(\n        texture(iChannel0, uv - X + Y).z,\n        texture(iChannel0, uv + Y).z,\n        texture(iChannel0, uv + X + Y).z,\n        texture(iChannel0, uv - X).z,\n        texture(iChannel0, uv).z,\n        texture(iChannel0, uv + X).z,\n        texture(iChannel0, uv - X - Y).z,\n        texture(iChannel0, uv -Y).z,\n        texture(iChannel0, uv + X - Y).z\n    );\n\n    mat3 dermatX = imageMat * dX;\n    mat3 dermatY = transpose(imageMat) * dX;\n    float s = 0.;\n    \n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            s += length(vec2(dermatX[i][j], dermatY[i][j]));\n        }\n    }\n    return s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = abs(vec2(1., 0.) - fragCoord/iResolution.xy);\n    vec2 X = vec2(2., 0.) / iResolution.x;\n    vec2 Y = vec2(0., 2.) / iResolution.y;\n\n    float s = max(max(\n        processR(uv, X, Y),\n        processG(uv, X, Y)),\n        processB(uv, X, Y)\n    );\n    s = 1. - step(0.4, s / 3.);\n    \n    // Output to screen\n    fragColor = vec4(s, s, s, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Convert UV coordinates to texel coordinates for the 8x8 image\n    ivec2 texSize = textureSize(iChannel0, 0);\n    ivec2 texCoord = ivec2(uv * vec2(texSize));\n\n    fragColor = vec4(texelFetch(iChannel0, texCoord, 0).xxx, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}