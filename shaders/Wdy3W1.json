{
    "Shader": {
        "info": {
            "date": "1570050333",
            "description": "Inktober day 2 with theme \"mindless\". I wanted to create something close to human with primitives and a simple dot of waving colors for hair to catch the eye.",
            "flags": 64,
            "hasliked": 0,
            "id": "Wdy3W1",
            "likes": 4,
            "name": "Shadertober 02 Mindless",
            "published": 3,
            "tags": [
                "raymarching",
                "human",
                "inktober"
            ],
            "usePreview": 0,
            "username": "GreenChicken",
            "viewed": 541
        },
        "renderpass": [
            {
                "code": "// SHADERTOBER 02 MINDLESS\n// Poulet Vert, 02/10/2019\n// thanks to iq, ajweeks, Leon, Flopine\n\n#define PI 3.14159\n\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\n\nfloat uSDF(float s1, float s2) { return min(s1, s2);}\n\nfloat sSDF( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); \n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n    p.y -= clamp( p.y, 0.0, h );\n    return length( p ) - r;\n}\n\n\nfloat SuitUp(vec3 p)\n{\n    float t = 0.0;\n    \n    p.zx *= rot(PI/4.0);\n    \n    p.x += sin(p.y*10.)*0.03; // primitive to cloth\n    \n    vec3 bodyP = p + vec3(0.0, 1.6, 0.0);\n    float body = sdBox(bodyP, vec3(1.0, 1.0, .2));\n    \n    vec3 LarmP = p + vec3(1.35, 2.8, 0.0);\n    LarmP.xy *= rot(PI/5.);\n    float Larm = sdBox(LarmP, vec3(1.0, 2.0, .2));\n    \n    vec3 RarmP = p + vec3(-1.2, 2.85, 0.0);\n    RarmP.xy *= rot(PI/3.0);\n    float Rarm = sdBox(RarmP, vec3(2.0, 1.0, .2));\n    \n    vec3 neckP = p + vec3(0.0, 0.8, 0.0);\n    neckP.xy *= rot(PI/3.0);\n    float neck = sdTriPrism(neckP, vec2(.5, 1.0));\n    \n    vec3 topNeckP = p + vec3(0.0, .8, 0.0);\n    vec3 topNeckPsub = topNeckP + vec3(0.0, 0.0, 0.1);\n    float topNeck = sdCappedCylinder(topNeckP, .5, .5);\n    topNeck = sSDF(sdCappedCylinder(topNeckPsub, .5, .6), topNeck);\n    \n    t = uSDF(body, Larm);\n    t = uSDF(t, Rarm);\n    t = sSDF(neck, t);\n    t = uSDF(t, topNeck);\n    \n    return t;\n}\n\nfloat head(vec3 p)\n{\n    float t = 0.0;\n    \n    p.zx *= rot(PI/4.0); \n    float yMask = max(p.y*4.0-1.0, 0.0);\n    p.z -= sin(iTime+dot(p.x, p.y)*10.)*0.1*yMask; // magic hair\n    \n    vec3 sP = p + vec3(0.0, -0.3, 0.0);\n    float s = sdVerticalCapsule(sP, 1.0, .5);\n    \n    vec3 jawP = sP + vec3(0.0, .35, 0.0);\n    float j = sdCappedCylinder(jawP, .5, .4);\n    \n    vec3 jawMaskP = jawP + vec3(0.0, 0.0, 0.5);\n    float jm = sdSphere(jawMaskP, .4);\n    j = opIntersection(j, jm);\n    \n    vec3 neckP = sP + vec3(0.0, 1.0, 0.0);\n    float n = sdCappedCylinder(neckP, .3, .8);\n    \n    t = uSDF(s, j);\n    t = uSDF(t, n);\n    \n    return t;\n}\n\nfloat map(vec3 pos)\n{\n    float t = 0.0;\n    \n    t = SuitUp(pos);\n    t = min(t, head(pos));\n    \n    return t;\n}\n\nfloat CastRay(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    \n    for(int i=0 ; i<64 ; i++)\n    {\n        float ray = map(ro + rd * t);\n        \n        if(ray < (0.0001*t))\n        {\n            return t;\n        }\n        \n        t += ray;\n    }\n    \n    return -1.0;\n}\n\nvec3 GetNormal (vec3 p) \n{ \n    vec2 e = vec2(0.01, 0.0); \n    return normalize(vec3(\n        map(p+e.xyy)-map(p-e.xyy),\n        map(p+e.yxy)-map(p-e.yxy),\n        map(p+e.yyx)-map(p-e.yyx)\n        )); \n}\n\nvec3 Render(vec3 ro, vec3 rd, vec2 uv)\n{\n    float t = CastRay(ro, rd);\n    \n    vec3 col = vec3(0.0);\n    \n    if(t == -1.0)\n    {\n        vec2 vignetteUV = uv;\n        vignetteUV.y -= 0.2;\n        col = vec3(2.0 - length(vignetteUV))*.15;\n        \n        \n    }\n    else\n    {\n        float maskY = rd.y*4.0+.5;\n        vec3 N = GetNormal(ro+rd*t);\n        vec3 L = vec3(1.0, 0.0, 0.0);\n        float light = dot(N,L);\n        \n        col = mix(vec3(0.0), vec3(N+1.0), max(rd.y*4.0-0.2, 0.0));\n        \n        \n        \n        //col += N*max(rd.y*4.0-.5, 0.0)+ .2 * maskY;\n        \n    }\n    \n    return col;\n}\n\nvec3 GetViewDir(vec2 uv, vec3 cp, vec3 ct)\n{\n    vec3 forward = normalize(ct - cp);\n    vec3 right = normalize(cross(vec3(sin(iTime*.5)*.03, -1.0, 0.0), forward));\n    vec3 up = normalize(cross(right, forward));\n    \n    return normalize(uv.x * right + uv.y * up + 2.0 * forward);\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 cp = vec3(0.0, 0.0, -4.5);\n    vec3 ct = vec3(sin(iTime)*.1, 0.0, 0.0);\n    \n    vec3 vd = GetViewDir(uv, cp, ct);\n    \n    vec3 col = vec3(length(uv));\n    vec2 screenUV = fragCoord.xy / iResolution.xy;\n    \n    col = Render(cp, vd, uv);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 19823,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/cryo-chamber/dark-ambient"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}