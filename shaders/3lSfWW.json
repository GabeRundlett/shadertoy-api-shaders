{
    "Shader": {
        "info": {
            "date": "1598893803",
            "description": "Gabory Perlin, replacing the smooth wavelet at grid vertices by a Gabor kernel (with random phase) at grid vertices, to better tune anisotropy and mainDirection(pos).\nPlay with parameters A ( anisotropy ) D (direction ) etc. ",
            "flags": 0,
            "hasliked": 0,
            "id": "3lSfWW",
            "likes": 8,
            "name": "GaboryPerlin",
            "published": 3,
            "tags": [
                "perlinnoise",
                "displacement",
                "distortion",
                "flownoise",
                "filament",
                "divergencefree"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 485
        },
        "renderpass": [
            {
                "code": "// inspired from https://shadertoy.com/view/WtBBD1\n\nfloat A = .2, // Anisotropy. 1 = isotropic\n      D = 0., // favorite dir\n      K = 0.; // seed for random numbers\n//#define D atan((p).y,(p).x)\n\n//#define rot(a)       mat2( cos( a + vec4(0,11,33,0) ) )\n  #define hash(p,K)    fract(sin(dot(p+K, vec2(12.9898, 78.233))) * 43758.5453)\n//#define hash2(p) ( 2.* fract( sin( (p) * mat2(127.1,311.7, 269.5,183.3) ) *43758.5453123 ) - 1. )\n  #define hash2(p)   cos( A/2.*6.28*hash(p,K) + vec2(0,11) + D + V(p)*iTime ) // variant of random gradient + rotating (= lownoise)\n//#define l(i,j)     dot( hash2(I+vec2(i,j)) , F-vec2(i,j) )       // random wavelet at grid vertex I+vec2(i,j) \n  #define Gabor(v,x,f)   cos( 6.28*( 2.*dot(x,v) + f ) ) * exp(-.5*1.*dot(x,x) )\n  #define l(i,j)     Gabor( hash2(I+vec2(i,j)), F-vec2(i,j) , hash(I+vec2(i,j),2.))       // random wavelet at grid vertex I+vec2(i,j) \n  #define L(j,x)     mix( l(0,j), l(1,j), x )\n\n  #define V(p) 0.                                // flownoise rotation speed \n//#define V(p) 1.*( 2.*mod((p).x+(p).y,2.)- 1. ) // checkered rotation direction \n//#define V(p) length(p)\n//#define V(p) ( 8. - length(p) )\n\nfloat GaboryPerlin(vec2 p) {\n    vec2 I = floor(p), \n         F = fract(p), \n     //  U = F;\n     //  U = F*F*(3.-2.*F);                   // based Perlin noise\n         U = F*F*F*( F* ( F*6.-15.) + 10. );  // improved Perlin noise ( better derivatives )\n    return mix( L(0,U.x) , L(1,U.x) , U.y );  // smooth interpolation of corners random wavelets\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         S = 8. / R.yy,\n         U = ( 2.*u - R ) * S, I = floor(U);\n    \n    A = .5+.5*sin(iTime);   // anisotropy\n  //A = abs( length(I)*2.-1.);\n    D = atan(U.y,U.x);      // prefered direction\n  //A = 0.; D += 3.14/2.*sin(iTime);  // variant\n    \n#if 0\n    float v = GaboryPerlin( U );      // only 1 kernel\n#else\n    float v = 0., N = 4.;\n    for ( float i = 0.; i < 5.; i++, K+=.1 ) // sum N kernels\n        v += GaboryPerlin( U ); \n    v /= 2.*sqrt(N);\n#endif  \n    \n    O = vec4( .5 + .5 * v );          // see Perlin noise\n }",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}