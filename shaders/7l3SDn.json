{
    "Shader": {
        "info": {
            "date": "1638945001",
            "description": "Inspired by: https://www.shadertoy.com/view/Ns3XWf <-- When I saw this for the first time I felt intimidated. After thinking about it a bit, decided to replicate it myself without using SDFs.",
            "flags": 32,
            "hasliked": 0,
            "id": "7l3SDn",
            "likes": 18,
            "name": "Tron's over, go home!",
            "published": 3,
            "tags": [
                "raymarching",
                "field",
                "twisting",
                "scalar"
            ],
            "usePreview": 0,
            "username": "toomuchvoltage",
            "viewed": 397
        },
        "renderpass": [
            {
                "code": "/***********************************************************\n\n   Tron's over, go home!\n   Inspired by: https://www.shadertoy.com/view/Ns3XWf\n\n   When I saw it for the first time I felt intimidated.\n   I was like: Woah! how do you distort SDFs so much without breaking the field?\n   Then I realized that there's a decent degree of field correction there.\n   Then I decided to try and replicate it without really studying the code.... aaaand here we are.\n   I realized it's probably a lot easier to heavily twist a scalar field without ending up in an infinite marching loop...\n   ... unlike what you get with distance fields.\n   I use that same approach here and it gives me pretty good normals: https://www.shadertoy.com/view/3s33Rn\n   It's a lot harder here to get good normals as discontinuities are severe.\n   However, if you do smoothen out the field, good normals are totally possible.\n\n   Covered under the MIT license:\n\n   Copyright (c) 2021 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\n#define FXAA_SPAN_MAX 8.0\n#define FXAA_REDUCE_MUL   (1.0/FXAA_SPAN_MAX)\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_SUBPIX_SHIFT (1.0/4.0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 rcpFrame = vec2 (1.0/iResolution.x, 1.0/iResolution.y);\n    vec3 rgbNW = texture(iChannel0, uv).xyz;\n    vec3 rgbNE = texture(iChannel0, uv + vec2(1,0)*rcpFrame.xy).xyz;\n    vec3 rgbSW = texture(iChannel0, uv + vec2(0,1)*rcpFrame.xy).xyz;\n    vec3 rgbSE = texture(iChannel0, uv + vec2(1,1)*rcpFrame.xy).xyz;\n    vec3 rgbM  = texture(iChannel0, uv.xy).xyz;\n\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n    float lumaNW = dot(rgbNW, luma);\n    float lumaNE = dot(rgbNE, luma);\n    float lumaSW = dot(rgbSW, luma);\n    float lumaSE = dot(rgbSE, luma);\n    float lumaM  = dot(rgbM,  luma);\n\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max(\n        (lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL),\n        FXAA_REDUCE_MIN);\n    float rcpDirMin = 1.0/(min(abs(dir.x), abs(dir.y)) + dirReduce);\n    \n    dir = min(vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n          dir * rcpDirMin)) * rcpFrame.xy;\n\n    vec3 rgbA = (1.0/2.0) * (\n        texture(iChannel0, uv + dir * (1.0/3.0 - 0.5)).xyz +\n        texture(iChannel0, uv + dir * (2.0/3.0 - 0.5), 0.0).xyz);\n    vec3 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n        texture(iChannel0, uv + dir * (0.0/3.0 - 0.5)).xyz +\n        texture(iChannel0, uv + dir * (3.0/3.0 - 0.5)).xyz);\n    \n    float lumaB = dot(rgbB, luma);\n\n    if((lumaB < lumaMin) || (lumaB > lumaMax)) fragColor = vec4 (rgbA, 1.0);\n    \n    fragColor = vec4 (rgbB, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/***********************************************************\n\n   Tron's over, go home!\n   Inspired by: https://www.shadertoy.com/view/Ns3XWf\n\n   When I saw it for the first time I felt intimidated.\n   I was like: Woah! how do you distort SDFs so much without breaking the field?\n   Then I realized that there's a decent degree of field correction there.\n   Then I decided to try and replicate it without really studying the code.... aaaand here we are.\n   I realized it's probably a lot easier to heavily twist a scalar field without ending up in an infinite marching loop...\n   ... unlike what you get with distance fields.\n   I use that same approach here and it gives me pretty good normals: https://www.shadertoy.com/view/3s33Rn\n   It's a lot harder here to get good normals as discontinuities are severe.\n   However, if you do smoothen out the field, good normals are totally possible.\n\n   Covered under the MIT license:\n\n   Copyright (c) 2021 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\n#define MAX_STEPS 2500\n#define MAX_DIST 500.0\n#define M_PI 3.1415926535\n#define ROT_AMT (M_PI*0.1)\n#define GUIDE_W 0.13\n#define GUIDE_WH (GUIDE_W*0.5)\n\nconst mat2 rotABit = mat2(cos(ROT_AMT), -sin(ROT_AMT), sin(ROT_AMT), cos(ROT_AMT));\n\nfloat scene(vec3 pos, float inpTime, out float wireMux)\n{\n    wireMux = 0.0;\n    if ( pos.y < -0.05 ) return 0.0;\n    if ( pos.x > 2.0 ) pos.x = 2.0 - pos.x;\n    inpTime -= floor(pos.z + 1.0);\n    pos.z = mod(pos.z + 1.0, 2.0) - 1.0;\n    if ( inpTime < -2.0 )\n    {\n        if ( abs(pos.y) < 0.02 && abs(pos.z) < 1.0 )\n        {\n            wireMux = (fract(pos.x + GUIDE_WH) < GUIDE_W || fract(pos.z + GUIDE_WH) < GUIDE_W) ? 1.0 : 0.0;\n            return 1.0;\n        }\n        return 0.0;\n    }\n    \n    float elevation = abs(inpTime) * 0.1 + 0.2;\n    if ( pos.y > elevation * 2.0 ) return 0.0;\n    \n    float elevationSq = elevation * elevation;\n    vec3 gravityCenter = vec3 ((2.0 - inpTime * 2.0), elevation, 0.0);\n    int i = 0, j = 0;\n    float distTravelled = 0.0;\n    for (j = 0; j != int (inpTime * 15.0); j++)\n    {\n        vec2 posxyCached = pos.xy;\n        vec2 subLine = pos.xy - gravityCenter.xy;\n        if ( dot(subLine, subLine) > elevationSq )\n        {\n            if ( pos.x > gravityCenter.x ) return 0.0;\n            break;\n        }\n        pos.xy = gravityCenter.xy + rotABit * subLine;\n        pos.xy += (pos.xy - gravityCenter.xy) * 0.04;\n        distTravelled += length(posxyCached - pos.xy);\n    }\n    if ( abs(pos.y) < 0.02 && abs(pos.z) < 1.0 )\n    {\n        if ( j > 1 ) pos.x += distTravelled;\n        wireMux = (fract(pos.x + GUIDE_WH) < GUIDE_W || fract(pos.z + GUIDE_WH) < GUIDE_W) ? 1.0 : 0.0;\n        return 1.0;\n    }\n    return 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uvDeNorm = fragCoord/iResolution.xy;\n    vec2 uv = uvDeNorm * 2.0 - 1.0;\n    uv.y *= iResolution.y / iResolution.x;\n    float timeScaled = mod(iTime, 10.0) * 2.0;\n    \n    vec3 eyePos = vec3 (-4.0, 1.5, -7.0 + timeScaled);\n    vec3 look = normalize (vec3 (sin(iTime), 0.0, 1.0));\n    vec3 globalUp = vec3 (0.0, 1.0, 0.0);\n    vec3 side = normalize (cross (globalUp, look));\n    vec3 up = cross (look, side);\n    \n    vec3 traceDir = normalize (look + up * uv.y + side * uv.x);\n    vec3 tracePos = eyePos;\n    float outVal = 0.0;\n    float scaleTrace = 0.01;\n    float wireMux;\n    \n    for (int i = 0; i != MAX_STEPS; i++)\n    {\n        if ( scene (tracePos, timeScaled, wireMux) > 0.0 )\n        {\n            outVal = 3.0 / length(tracePos - eyePos);\n            vec3 outColor = pow (vec3 (0.25, outVal, 0.25) * wireMux, vec3 (1.0/2.2));\n            fragColor = vec4 (outColor, 1.0);\n            return ;\n        }\n        tracePos += traceDir * scaleTrace;\n        vec3 diffVec = tracePos - eyePos;\n        if ( dot (diffVec, diffVec) > MAX_DIST ) break;\n        if ( timeScaled - floor(tracePos.z + 1.0) < -2.0 ) scaleTrace *= 1.03;\n    }\n    \n    vec3 blue = vec3 (0.5, 0.5, 1.0);\n    vec3 purple = vec3 (1.0, 0.25, 1.0);\n    vec3 outColor = pow (mix (purple, blue, uvDeNorm.y), vec3(1.0/2.2));\n    fragColor = vec4 (outColor, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}