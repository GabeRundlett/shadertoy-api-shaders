{
    "Shader": {
        "info": {
            "date": "1696811365",
            "description": "ðŸ”º",
            "flags": 0,
            "hasliked": 0,
            "id": "cddBRr",
            "likes": 18,
            "name": "Transparent Tri-Towers ðŸ”º",
            "published": 3,
            "tags": [
                "fractal",
                "25d",
                "bw",
                "sierpinksi",
                "bitwise",
                "towers",
                "golf"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 271
        },
        "renderpass": [
            {
                "code": "vec4 getCol(ivec4 P) \n{\n    P = abs(P) % 99;\n    //P = abs(P*P.w/49) % 99;\n    return vec4(P ^ P.yzxw&P.zxyw) * (.6+.4*cos(float(P.w)));\n}\n\nvoid mainImage(out vec4 o, vec2 u)\n{\n    float d,        // distance\n          acc,      // accumulator\n          inc = 1., // accumulator increment size\n          i,        // index\n          l,        // distance at hit position\n          t = iTime;\n    \n    vec2 R = iResolution.xy,\n         p; // 2.5D position\n    u = (u+u-R)/R.y;             \n         \n    ivec4 P; // integer positions for 3 (coplanar) axes, and int(d)\n    \n    vec4 col, \n         hitcol;\n    \n    bool hasHit = false;\n    \n    // use > 330. for more depth (and more lag!)\n    // alternatively, iterate with d and remove i\n    while(i++ < 330.)\n    {       \n        if ((abs((P.x^P.y^P.z)-P.w*3)) % 128 < int(d)) {\n            if (!hasHit) {\n                hasHit = true;\n                l = d;\n                hitcol = getCol(P);\n            }\n            inc *= .95; // accumulate less after every hit\n            acc += inc; \n             \n            // add to color (use weighted average)\n            col += inc * getCol(P);\n            \n            // less accumulation / iterations / lag\n            if (inc < .25)\n                break;            \n        }\n        p = u*d + 5.*t;\n        p += d*vec2(cos(.31*t), sin(.2*t));\n       \n        d += .15;\n             \n        P = ivec4(p.x,             // dot(p, dir(0))  \n                  .5*p.x+.866*p.y, // dot(p, dir(pi/3)) \n                  .5*p.x-.866*p.y, // dot(p, dir(-pi/3))\n                  d + 0.*iTime);\n    }              \n\n    o = mix(hitcol, col/acc, .5) / 1e2;\n    o = sqrt(o);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}