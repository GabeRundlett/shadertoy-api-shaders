{
    "Shader": {
        "info": {
            "date": "1514261003",
            "description": "SprialMove_BabyVersion",
            "flags": 0,
            "hasliked": 0,
            "id": "XtsBWl",
            "likes": 0,
            "name": "SprialMove_BabyVersion",
            "published": 3,
            "tags": [
                "sprialmovebabyversion"
            ],
            "usePreview": 0,
            "username": "PaperColor",
            "viewed": 489
        },
        "renderpass": [
            {
                "code": "//I make this in unity3d first,then implement it here\n//Twitter:@LowpolySun\n\n#define float2 vec2\n#define float3 vec4\n#define float4 vec4\n#define frac fract\n\n//This macro is always the same\n#define SetUVAndMoveToCenter vec2 uv = fragCoord.xy/iResolution.xy;uv.x*=iResolution.x/iResolution.y;uv.x -= 0.35;uv.y+=0.1;\n\n#define pi 3.141592654\n#define tao 2.0*pi\n#define width 0.03\n\n#define moveSpeed 0.05\n#define angleSpeed pi\n#define dotNumber  1.0\t\n\n//every timeCycle animation will reset\n#define timeCycle 50.0\n\nfloat lerp(float a,float b,float v)\n{\n\t//clamp to 0 and 1\n\tif(v>1.0) v=1.0;\n\telse if(v<0.0) v=0.0;\n\treturn a*(1.0-v)+b*v;\n}\n\nvec4 lerp(vec4 a,vec4 b,float v)\n{\n\tfloat red = lerp(a.r,b.r,v);\n\tfloat green = lerp(a.g,b.g,v);\n\tfloat blue = lerp(a.b,b.b,v);\n\tfloat alpha = lerp(a.a,b.a,v);\n\treturn vec4(red,green,blue,alpha);\n}\n\nbool IsInRange(float2 p1,float2 p2,float range)\n{\n\treturn length(p1-p2)<range;\n}\n\nfloat totalLength = 0.0;\nfloat time = 0.0;\nfloat lastTime =0.0;\n\nfloat SprialPattern(float2 uv)\n{\n\tuv = uv*2.0 - 1.0;\n    uv*=2.0;\n    //float time =log(iTime); //sin(iTime);\n\t\n    time =frac(iTime/timeCycle)*timeCycle;\n    \n\tfloat moveLength = moveSpeed*time;\n\tfloat currentAngle = angleSpeed*time;\n\tfloat2 currentPosition = float2(moveLength*cos(currentAngle),moveLength*sin(currentAngle));\n\n\tbool b = IsInRange(currentPosition,uv,width);\n\tif(b) return 1.0;\n\treturn 0.0;\n}\n\nfloat SprialMove(float2 uv,float2 centerPosition,float speedDirection)\n{\n\tuv = uv*2.0 - 1.0;\n    uv*=2.0;\n    //float time =log(iTime); //sin(iTime);\n\t\n    time =frac(iTime/50.0)*50.0;\n    \n    if(speedDirection<=0.0)\n        speedDirection = -1.0;\n    else\n        speedDirection =1.0;\n    \n    \n\tfloat moveLength = moveSpeed*time*speedDirection;\n\tfloat currentAngle = angleSpeed*time*speedDirection;\n\tfloat2 currentPosition =centerPosition + float2(moveLength*cos(currentAngle),moveLength*sin(currentAngle));\n\n\tbool b = IsInRange(currentPosition,uv,width);\n\t\n    if(b) return 1.0;\n\treturn 0.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tSetUVAndMoveToCenter\n\n    \n\tfloat finalValue =0.0;\n    float dx = iResolution.x/100.0;\n    //Change dotNumber here,but trust me,single dot looks better,\n    for(float index=-dotNumber;index<dotNumber;index+=1.0)\n    {\n        finalValue += SprialMove( uv ,float2( index/100.0 , 0.0 ),sin(index));\n    }\n\t\n\t//float finalValue = moveValue1+moveValue2+moveValue3+moveValue4;\n\n\tfragColor = vec4(finalValue,finalValue,finalValue,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}