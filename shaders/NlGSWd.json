{
    "Shader": {
        "info": {
            "date": "1641490824",
            "description": "My participation to genuary 2022\nThe original creation I \"trade\" : https://www.instagram.com/p/CV-tjLSIgMu/\nMy friend does not generative though",
            "flags": 0,
            "hasliked": 0,
            "id": "NlGSWd",
            "likes": 33,
            "name": "Genuary 2022 - Day6",
            "published": 3,
            "tags": [
                "generative",
                "genuary",
                "2022",
                "tradestyle"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 602
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if(a.x < b.x)\n        return a;\n    return b;\n}\n\nvec2 map(vec3 p)\n{\n    p.xy *= r2d(.25);\n        p.xz *= r2d(.25);\n\n    p -= vec3(1.,1.2,0.);\n    vec2 acc = vec2(10000.,-1.);\n    float shape = length(p)-1.;\n    shape = max(shape, -(length(p.xy)-.5));\n    shape = max(shape, -(length(p)-.8));\n    float mat = 0.0;\n    if (length(p) > .9)\n    {\n        mat = 1.;\n        float th = 0.04;\n        if (abs(length(p.xz)-.2)-th < 0.)\n            mat = 3.;\n        if (abs(length(p.yz)-.2)-th < 0.)\n            mat = 3.;\n    }\n       \n    if (length(p.xy) < .51)\n        mat = 2.;\n\n        \n    acc = _min(acc, vec2(shape, mat));\n    \n    float antena = max(max(length(p.xz)-.015, p.y+.5), -p.y-2.);\n    antena = min(antena, length(p-vec3(0.,-2.,0.))-.1);\n    acc = _min(acc, vec2(antena, 0.));\n    return acc;\n}\n\nfloat grass(vec2 uv)\n{\n    uv.x+= sin(uv.y*20.+iTime)*.02;\n    float h= mix(.01,.02, sat(sin(uv.x)*.5+.5));\n    return uv.y-h*asin(sin(uv.x*250.+sin(uv.y*2.)*20.+sat(3.+uv.y*15.)*iTime));\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+r*uv.x+u*uv.y);\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n  vec2 e = vec2(0.01,0.);\n  return normalize(vec3(d)-vec3(map(p-e.xyy).x,map(p-e.yxy).x,map(p-e.yyx).x));\n}\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n  vec3 p = ro;\n  for (int i = 0; i<steps;++i)\n  {\n    vec2 res = map(p);\n    if (res.x<0.01)\n      return vec3(res.x,distance(p,ro),res.y);\n    p+= rd*res.x;\n  }\n  return vec3(-1.);\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec2 buv = uv;\n    float baseT = iTime*.1;\n    float t = sin(baseT)*.5;\n    vec3 col = mix(vec3(0.694,0.827,0.824), vec3(0.796,0.882,0.871), sat(-uv.y));\n    \n    float xA = uv.x+t*.125;\n    float mountA = uv.y+.1-0.05*sin(xA*5.)+0.01*asin(sin(xA*10.));\n    vec3 mountACol = mix(vec3(0.627,0.710,0.690)*.8, vec3(0.702,0.784,0.765), sat(sin(14.6*length(vec2(xA,uv.y)-vec2(0.2,1.))*10.)*sin(length(vec2(xA,uv.y)-vec2(0.,1.))*50.)*1000.));\n    col = mix(col, mountACol, 1.-sat(mountA*40000.));\n    float xB = uv.x+t*.25;\n    float mountB = uv.y+.1-0.02*sin(xB*10.)+0.01*asin(sin(xB*10.));\n    col = mix(col, vec3(0.729,0.553,0.541), 1.-sat(mountB*40000.));\n    \n    vec3 ro = vec3(sin(t)*10.,0.,10.*cos(t));\n    vec3 ta = vec3(t*4.,0.,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, buv);\n    \n    vec3 res = trace(ro, rd, 128);\n    \n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        vec3 ldir = normalize(vec3(1.,-1.,1.));\n        \n        col = n*.5+.5;\n        if (res.z == 0.)\n            col = vec3(.1);\n        if (res.z == 1. || res.z == 3.)\n            col = mix(vec3(.8), vec3(.92), sat(dot(n,ldir)*100.));\n        if (res.z == 2.)\n            col = vec3(.4);\n        if (res.z == 3.)\n            col *= .75;\n    }\n    \n    \n    float xC = uv.x+t*.5;\n    float mountC = uv.y+.15-0.02*sin(xC*7.)+0.01*asin(sin(xC*10.));\n    col = mix(col, vec3(0.824,0.392,0.388), 1.-sat(mountC*40000.));\n    \n\n    float xD = uv.x+t;\n    float mountD = uv.y+.17-0.02*sin(-xD*10.+4.)+0.015*asin(sin(xD*7.));\n    mountD += .2+grass(uv);\n    col = mix(col, vec3(0.776,0.314,0.314), 1.-sat(mountD*40000.));\n    float xE = uv.x+t*2.;\n    float mountE = uv.y+.3-0.04*sin(-xE*10.+4.)+0.015*asin(sin(xE*7.));\n    mountE += .2+grass(uv);\n    col = mix(col, vec3(0.541,0.173,0.173), 1.-sat(mountE*40000.));\n    uv.y -= .2;\n    float xCloud = uv.x+t*.0125;\n    float cloud =  max(uv.y-asin(sin(xCloud*5.))*.02-sin(xCloud*5.-iTime*.25)*.03, -(uv.y+.03-.02*(sin(xCloud*5.+iTime*.25))));\n    \n    col = mix(col, vec3(0.776,0.875,0.863), 1.-sat(cloud*40000.));\n    \n    //col = vec3(1.)*sat(*40000.);\n//    float t3d = iTime*.1;\n\n    \n    return col;\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    float stp = .005;\n    \n    uv = floor(uv/stp)*stp;\n    vec3 col = rdr(uv);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}