{
    "Shader": {
        "info": {
            "date": "1604267055",
            "description": "Making a doot field i guess\nyoutube vid showcase: [video]https://youtu.be/_WDsGupdeL4[/video]",
            "flags": 40,
            "hasliked": 0,
            "id": "WdyyWd",
            "likes": 3,
            "name": "Doot Doot",
            "published": 3,
            "tags": [
                "halloween",
                "gpusound",
                "mrskeletal",
                "dootdoot"
            ],
            "usePreview": 0,
            "username": "Shapkofil",
            "viewed": 334
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    int power = int(iTime/period);\n    uv = mod(uv*float(1<<power),1.0);\n    \n    fragColor = texture(iChannel0,uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float sigmoid(float x)\n{\n    return 1.0 / (1.0 + exp(-x));\n}\n\nfloat smoothed_sawtooth(float d, float x)\n{\n    return (1.0 - 2.0 * acos(d * -cos(x / 2.0)) / pi) * (2.0 *  atan(sin(x / 2.0) / (1.0 - d)) / pi);\n}\n\nfloat trumpet(float t, float f)\n{\n    // Sound starts with sine which turns into (smoothed) sawtooth.\n    return smoothed_sawtooth(0.95 * sigmoid(t), f * t);\n}\n\n#define sw(freq) trumpet(time, freq)\n\nvec2 mainSound( in int samp, float time )\n{\n    // A 440 Hz wave that attenuates quickly overt time\n    vec2 amp = doot_doot_gen(time);\n    amp *= 1.1*ceil(time/period);\n    vec2 doot1 = vec2( sw(1160.0) * amp.x);\n    vec2 doot2 = vec2( sw(1480.0) * amp.y);\n    \n    return doot1 + doot2;\n    //return vec2(amp.x+amp.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "float dot2( in vec2 v ) { return dot(v,v); }\nfloat cross2d( in vec2 v0, in vec2 v1) { return v0.x*v1.y - v0.y*v1.x; }\n\nconst int N = 36;\nvec2[] points = vec2[](\n    vec2(0.15604078965517243,0.006952005245901639),\n    vec2(0.32516884137931035,0.009793744262295083),\n    vec2(0.4561191379310345,0.1933462393442623),\n    vec2(0.47910444827586207,0.32490575409836064),\n    vec2(0.44083172413793104,0.3615969180327869),\n    vec2(0.36398189655172414,0.33533137704918037),\n    vec2(0.35815955172413794,0.23650780327868856),\n    vec2(0.4379587586206896,0.20692787213114758),\n    vec2(0.44928834482758623,0.29642963934426236),\n    vec2(0.4184613793103448,0.3387371803278689),\n    vec2(0.24744845172413796,0.39635101639344267),\n    vec2(0.1870086379310345,0.4062724590163935),\n    vec2(0.16284365862068967,0.3071456918032787),\n    vec2(0.2646114137931035,0.2890036491803279),\n    vec2(0.28749012413793107,0.371974131147541),\n    vec2(0.441803,0.3709476721311476),\n    vec2(0.4452385172413793,0.4970127540983607),\n    vec2(0.47387834482758623,0.5541454098360656),\n    vec2(0.4985668275862069,0.48326540983606564),\n    vec2(0.6566372413793103,0.6022237049180329),\n    vec2(0.6406144137931035,0.6310666885245904),\n    vec2(0.7040961379310345,0.6674860327868855),\n    vec2(0.8457785862068965,0.6441119672131149),\n    vec2(0.9539346206896551,0.745187704918033),\n    vec2(0.8865772068965515,0.9323457377049182),\n    vec2(0.6883219310344826,0.9618828852459018),\n    vec2(0.6139840344827585,0.8737540327868855),\n    vec2(0.6284143103448274,0.7487036721311477),\n    vec2(0.4333702758620688,0.5798480000000003),\n    vec2(0.3237771793103446,0.5974329508196723),\n    vec2(0.2202485827586205,0.5254885573770494),\n    vec2(0.18859653448275843,0.5003934754098363),\n    vec2(0.15468172413793085,0.4297871475409838),\n    vec2(0.09884780344827568,0.4146684262295084),\n    vec2(0.10784707241379292,0.3700899344262297),\n    vec2(0.04969448620689637,0.32742981967213136)\n    );\n\n\n\nfloat sdPoly( in vec2[N] v, in vec2 p )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, p.y<v[j].y, e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s*=-1.0;  \n    }\n    \n    return s*sqrt(d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = vec2(uv.x, 1.0- uv.y);\n    \n    vec2 doot_doot = doot_doot_gen(iTime) * vec2(1.0, -1.0);\n    for(int i=21; i<=27; i++)\n        points[i] += doot_doot/50.0;\n    \n    float iter = floor(iTime/period) + 1.0;\n    fragColor = vec4(1.0-abs(sdPoly(points,uv))*(200.0/iter));\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float doot_width = 10.0;\nfloat basepower = 1.0;\nfloat sred = 0.8;\nfloat offset = 1.0;\nfloat soffset = 0.21;\n\nfloat period = 2.6;\n\n#define pi 3.1415926\n\nfloat doot_gen(float x)\n{\n    return max(-pow(doot_width*x, 16.0) + basepower, 0.0);\n}\n\nvec2 doot_doot_gen(float x)\n{\n    x = mod(x, period);\n    return vec2(doot_gen(x - offset), sred*doot_gen(x - soffset - offset));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}