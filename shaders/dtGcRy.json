{
    "Shader": {
        "info": {
            "date": "1700341863",
            "description": "truchet3d toroidal  hexagonal tiled spherical tetrahedron slides",
            "flags": 0,
            "hasliked": 0,
            "id": "dtGcRy",
            "likes": 14,
            "name": "hexagonal tetrahedron slides",
            "published": 3,
            "tags": [
                "3d",
                "grid",
                "sdf",
                "tetrahedron",
                "tiling",
                "schwarzchristoffel"
            ],
            "usePreview": 0,
            "username": "cyperus",
            "viewed": 260
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License.\n//\n// \"hexagonal tetrahedron slides\"\n//\n// created by Colling Patrik (cyperus) in 2023\n//\n//\n// References & Inspiration:\n// - \"Schwarz-Christoffel Mapping\" by mla\n//   https://www.shadertoy.com/view/tsfyRj\n//\n// - \"Year of Truchets\" #058 by byt3_m3chanic\n//   https://www.shadertoy.com/view/msVfzR\n//\n// - conformal mapping with confmap.m by Trefethen\n//   https://people.maths.ox.ac.uk/trefethen/lightning.html\n//\n// - signed distance functions & operations by iq\n//   https://iquilezles.org/articles/distfunctions/\n//\n// - quick guide for shadertoy by FabriceNeyret2\n//   https://shadertoyunofficial.wordpress.com/\n// \n// - hexagonal grid by Amit Patel\n//   https://www.redblobgames.com/grids/hexagons/\n//\n//\n// Known Issues:\n//\n// - Artefacts at singularities while raymarching space.\n//   In this case line singularities along the \"truchet net tubes\".\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// ray casting bounding shape\nconst float CAM_DIST = 5.; \nconst float CAM_FLE  = 2.;\nconst float BB_DIST  = 5.;\nconst float RAY_MIN_DIST = 0.;\nconst float RAY_MAX_DIST = CAM_DIST+1.1*BB_DIST;\n\nconst int   MAX_MARCHING_STEPS = 310;\nconst float RAY_STEP_FACTOR = 0.06686;\nconst float RAY_PRECISION = 3.;\n\n// data from sdf\nvec4 mat = vec4(0);\n\nfloat map(in vec3 p) {\n    float rxy = 0., au = 0.0, av = 0.0;\n    vec2 z = vec2(0.);\n    float rnd = 0.5; float dc = 1.; float d = -1.;\n\n    /// platonic sphere\n    // normalize spherical radius\n    vec3 pn = normalize(p);\n\n    // spherical projection from n cell to 1 cell.\n    float ps_id = 0., sr = 0.;\n    pn = tetra_cells(pn, ps_id, sr); \n\n    // inverse stereographic projection\n    z = pn.xy/(1.-pn.z);\n    z = cTeraPolyArc2disk(z);\n\n    // r-polygon-distribution\n    float e = 0.4 + 0.1 *cos(3.*atan(z.y, z.x));\n    float en = 1.- e*smoothstep(1.,5., abs(12.));        \n    float r = length(z); vec2 zn = z/r;\n    z = dist(r, en) * zn;     \n\n    // stereograpic projection\n    float zz = dot(z,z); pn = vec3(2.*z.x,  2.*z.y, -1.+zz); pn /= 1.+zz;\n\n    // unnormalize spherical radius\n    p = length(p) * pn;\n\n    /// regular polygon tiles\n    vec3 rpt_id = vec3(1.);  float rpt_sr;\n    p.xy = inversesc(hexgrid2hex(p.xy, rpt_id),6);\n\n    /// cylinder radial plane -> halfcomplex plane\n    rxy = length(p.xy); au = atan(p.y, p.x);\n    z = ccos(PI*vec2(rxy,p.z))/0.5; z.x -= -1.28;   \n        \n    p = vec3(log(length(z)), 0.5*au/PI, 0.5*atan(z.y,z.x)/PI); // ruv \n    z = p.yz;   \n\n    /// truchet 3D\n    const float TC3D_nu = 18.;\n    const float TC3D_nv = 8.;\n    const float TC3D_nr = 1.;\n    p *= vec3(TC3D_nr,TC3D_nu,TC3D_nv); // r,u,v\n    p.yzx = p.xyz;\n\n    ivec3 l0 = -ivec3(TC3D_nv/2.,0,TC3D_nu/2.);\n    ivec3 l1 = ivec3(TC3D_nv/2.,TC3D_nr,TC3D_nu/2.)-ivec3(1.);\n    vec3 tc_id = floor(p);\n    tc_id = clamp(tc_id, vec3(l0), vec3(l1));\n    vec3 q = p - tc_id -0.5;\n\n    // random\n    rnd = hash21(tc_id.xz);\n\n    // flip cell direction randomly\n    if(rnd<.5) q.x = -q.x;\n\n    // sdf\n    float r0 = 0.5; float r1 = 0.125;\n\n    if(fract(rnd*77.57+iTime/6.)>.75) {\n       // offset-xz circle, id diagonal sub domain\n       vec3 q2 =  length(q.xz-.5)<length(q.xz+.5)\n                ? vec3(q.xz-.5,0.)  \n                : vec3(q.xz+.5,1.);\n       d = sdTorus( vec3(q2.x, q.y, q2.y) , vec2(0.5,r1) );}\n    else\n       d = opSmoothUnion( sdCylinder( q.zxy, r1 ), sdCylinder( q.xzy, r1 ), 0.05 );\n\n    // cell alpha    \n    float tc_a = sdBox( q, vec3(r0*0.9)); float px = fwidth(tc_a);\n    tc_a = smoothstep(px,-px,tc_a);\n   \n    /// return\n    // torus uv, truchet cell alpha, random cell id\n    mat.xy = z; mat.z = tc_a, mat.w = rnd;\n    return d;\n}\n\n// intersect\nfloat intersect(in vec3 ro, in vec3 rd, in float px) {\n    float res = -1.0; // init no intersection\n    \n    // bounding shape BB\n    vec2 dis = isphere( ro, rd , abs(BB_DIST));    \n    if( dis.y<0.0 ) return -1.0;\n    dis.x = max( dis.x, RAY_MIN_DIST );\n    dis.y = min( dis.y, RAY_MAX_DIST );\n\n    // raymarch signed distance field    \n\tfloat fh = RAY_STEP_FACTOR;\n    float t = dis.x;\n    for( int i=0; i<MAX_MARCHING_STEPS; i++  ) {\n        vec3 pos = ro + rd*t;\n        float th = RAY_PRECISION * px * t;\n        float h = map( pos);\n        if( t>dis.y || h<th ) break;\n        t += h*fh;\n    }\n    if( t<dis.y ) {\n        res = t;\n    }\n    return res;\n}\n\nvec3 calcNormal( in vec3 p, in float prec ) {\n    vec2 e = vec2( prec, 0. );\n    return normalize(vec3(\n\t\tmap(p+e.xyy) - map(p-e.xyy),\n\t\tmap(p+e.yxy) - map(p-e.yxy),\n\t\tmap(p+e.yyx) - map(p-e.yyx) )\n    \t);\n}\n\nvec3 transform(in vec3 p, in float time) { \n\tif (iMouse.x > 0.0) {\n        vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\t\tp.yz = crot(p.yz,-PI*m.y);\n\t\tp.zx = crot(p.zx,-PI*m.x);\n\t}\n    p.yz = crot(p.yz,-2.*PI*1.*time/360.);\n    p.zx = crot(p.zx,-2.*PI*3.*time/360.);\n\treturn p.xyz;\n}\n\n// textures\nvec4 ribbon(in float uv_x, in float time) {\n    float sdf = -(2.*pulsecollision(1.,1./3. * uv_x, time, 2./6.)-1.);\n    float px = fwidth(sdf);\n    return vec4( h2rgb(sdf -2./6.)\n               , smoothstep(px+0.1,-px-0.1,sdf+0.2) );\n}\n\nvec4 truchet3D(in float rnd, in float a ,in float time) {\n    return mix(vec4(1.), vec4(h2rgb( fract(abs(rnd)*22.93 + time)),1.), a);\n}\n\n// main\nvoid mainImage(out vec4 O, in vec2 fragCoord) {\n    // anti-aliasing to take a picture\n    vec3 tot = vec3(0.0);\n    #define AA 1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ ) {       \n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 uv = (2.0*(fragCoord+o) - iResolution.xy)/iResolution.y;\n        \n        // camera viewport --> worldspace\n        vec3 ro = vec3(0,0,-CAM_DIST);\n        vec3 rd = vec3(-uv.x,uv.y,CAM_FLE);\n             ro = transform(ro,iTime);\n             rd = normalize(transform(rd,iTime));\n        \n        // distance hit ray surface\n        float px = 2.0/( iResolution.y*CAM_FLE );\n        float t = intersect( ro, rd, px );\n\n        vec3 sky_col = rd*.2+.8;\n\n        // background\n        vec4 C = vec4(sky_col,1.);\n        O = C;\n        \n        // object surface\n        if (t >= 0.) {\n            // surface properties\n            vec3 p = ro + rd * t;\n            vec3 n = calcNormal( p, 0.001);\n            \n            // uv-coords\n            vec2 mat_uv = mat.xy;\n                \n            // texture\n            O = vec4(0);\n            #if 1\n            if(O.a<1.) {             \n                C = ribbon( 3.*6.* mat_uv.x, 0.0125*iTime); C.rgb *= 0.7;\n                O += (1.-O.a) * vec4( C.rgb, 1 ) *C.a;}\n            #endif\n            if(O.a<1.) {\n                C = vec4(vec3(n)*0.5,0.2);\n                O += (1.-O.a) * vec4( C.rgb, 1 ) *C.a;}\n            if(O.a<1.) {            \n                C = truchet3D(mat.w, mat.z, iTime/60.); C.rgb *= 0.5;\n                O += (1.-O.a) * vec4( C.rgb, 1 ) *C.a;}\n            C = O;\n                       \n            // lighting\n            vec3  came_li_o   = transform(vec3(-10.,10.,-10.),iTime); // origine\n            vec3  came_li_dir = normalize(p - came_li_o);             // direction\n            vec3  came_li_col = vec3(1.,1.,.5);                       // color\n            float came_li_shi = 10.;                                  // shininess            \n\n            float cosa = 1.;\n            O.rgb += 0.1 * cosa * C.rgb * sky_col;           // amb\n            cosa = clamp(dot(-came_li_dir, n), 0., 1.);\n            O.rgb += 0.5 * cosa * C.rgb * came_li_col;       // dif       \n            cosa = pow(clamp(dot(reflect(came_li_dir, n), -rd), 0., 1.), came_li_shi);           \n            O.rgb += 0.4 *(cosa>0.? cosa:0.) * came_li_col ; // spec\n            \n            // fresnel\n            O.rgb += pow(clamp(1. - dot(n, -rd), 0., 1.), 5.) * 0.6 * sky_col;\n            \n            // fog\n            O.rgb = mix(O.rgb, sky_col, 1.0 - exp(-8.E-3 * pow(t,3.)));    \n        }\n        tot += O.rgb;\n    }\n    tot /= float(AA*AA);\n    \n    // gamma correction\n    O = vec4(rgb2srgb(tot),1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// const\nconst float \n    PI = abs(atan(0.,-1.));\n\n// helpers\nfloat pulsecollision(in float pf, in float x, in float x0, in float pw) {\n    float ntriw_p = abs( fract( pf*(x - x0) )-0.5);\n    float ntriw_n = abs( fract( pf*(x + x0) )-0.5);\n    float pp = smoothstep( 0.5*pw, 0., ntriw_p );\n    float pn = smoothstep( 0.5*pw, 0., ntriw_n );\n    return (pp+pn);\n}\n\nfloat hash21(vec2 p) {\n    return fract(sin(dot(p, vec2(27.609, 57.583)))*43758.5453);}\n\n// complex\nvec2 cmul(vec2 za,vec2 zb) {\n    return za*mat2(zb.x,-zb.y,zb.yx);}\n\nvec2 crot(vec2 z,float a) {\n    return cmul(vec2(cos(a),sin(a)),z);}\n\nvec2 cinv(vec2 z) {\n    return z*vec2(1,-1)/dot(z,z);}\n    \nvec2 cdiv(vec2 z, vec2 w) {\n    return cmul(z,cinv(w));}\n    \nvec2 cpow(vec2 z, int n) {\n  float r = length(z);\n  float theta = atan(z.y,z.x);\n  return pow(r,float(n))*normalize(vec2(cos(float(n)*theta),sin(float(n)*theta)));}\n  \nvec2 csqr(vec2 z) {\n    return vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y );}\n\nvec2 ccos(vec2 z) {\n    vec2 d=vec2(exp(z.y),exp(-z.y));\n\treturn vec2(cos(z.x)*(d.x+d.y)*.5,-sin(z.x)*(d.x-d.y)*.5);}\n\n// schwarzchristoffel\nfloat binomial(float a, int n) {\n   float s = 1.0;\n   for (int i = n; i >= 1; i--,a--) {\n     s *= float(a)/float(i);\n   }\n   return s;\n}\n\nvec2 expi(float x) {\n  return vec2(cos(x),sin(x));\n}\n\nfloat gamma(float z) {\n  const float[8] p = float[](\n    676.5203681218851,\n    -1259.1392167224028,\n    771.32342877765313,\n    -176.61502916214059,\n    12.507343278686905,\n    -0.13857109526572012,\n    9.9843695780195716e-6,\n    1.5056327351493116e-7\n  );\n  z -= 1.0;\n  float x = 0.99999999999980993;\n  for (int i = 0; i < 8; i++) {\n    float pval = p[i];\n    x += pval/(z+float(i+1));\n  }\n  float t = z + 8.0 - 0.5;\n  return sqrt(2.0*PI) * pow(t,z+0.5) * exp(-t) * x;\n}\n\nfloat B(float a, float b) {\n  return (gamma(a)*gamma(b))/gamma(a+b);\n} // beta function\n\nvec2 inversesc(vec2 z, int K) {\n  float cn[6];\n  for (int n = 1; n <= 5; n++) {\n    cn[n] = binomial(float(n)-1.0+2.0/float(K),n)/float(1+n*K); // Series Coefficients\n  }\n  float C = B(1.0/float(K),1.0-2.0/float(K))/float(K); // Scale factor\n  z *= C; // Scale polygon to have diameter 1\n  vec2 h = cpow(z,int(K));\n  float T1 = -cn[1];\n  float T2 = -cn[2]+float(K+1)*pow(cn[1],2.0);\n  float T3 = -cn[3]+float(3*K+2)*(cn[1]*cn[2]-float(K+1)/2.0*pow(cn[1],3.0));\n  float T4 = -cn[4]+float(2*K+1)*(2.0*cn[1]*cn[3]+pow(cn[2],2.0)-float(4*K+3)*\n                                  (pow(cn[1],2.0)*cn[2]-float(K+1)/3.0*pow(cn[1],4.0)));\n  float T5 = -cn[5]+float(5*K+2)*(cn[1]*cn[4]+cn[2]*cn[3]+float(5*K+3)*\n            (-0.5*pow(cn[1],2.0)*cn[3]-0.5*cn[1]*pow(cn[2],2.0)+float(5*K+4)*\n            (pow(cn[1],3.0)*cn[2]/6.0-float(K+1)*pow(cn[1],5.0)/24.0)));\n  vec2 X = vec2(1,0)+h/pow(C,float(K));\n  vec2 w = cmul(z,vec2(1,0) + T1*h + T2*cpow(h,2) + T3*cpow(h,3) + T4*cpow(h,4) + cdiv(T5*cpow(h,5),X));\n  return w;\n}\n\n// hexagonal grid\nvec2 hexgrid2hex(in vec2 Z, out vec3 U_id){\n    const float PI_6 = PI/6.;\n    const float SQRT3 = sqrt(3.);\n    const float SQRT_3 = 1./SQRT3;\n\tconst mat2 M = mat2(SQRT_3,-1.,-SQRT_3,-1.),\n        iM = 0.5*mat2(SQRT3,-SQRT3,-1.,-1.);\n    Z = crot(Z,PI/6.);\t\t// F:orientation-offset of cell     \n    Z = iM*Z/0.75;          // F:scale cell\n    vec3 U = vec3(Z.x,-Z.x-Z.y,Z.y);// plane: x+y+z=0\n    U_id = 2.*floor(U*0.5+0.5);\t\t// global cell offset id \n    vec3 U_lo = U-U_id;\t\t\t\t// local cell coord's\n    vec3 aU_lo = abs(U_lo);\n    if (aU_lo.x > aU_lo.y && aU_lo.x > aU_lo.z) U_lo.x = -U_lo.y-U_lo.z;\n    if (aU_lo.y > aU_lo.z) U_lo.y = -U_lo.x-U_lo.z;\n    else U_lo.z = -U_lo.x-U_lo.y;\n    Z = U_lo.rb; \t\t\t// mape grid-zell to unit-zell\n    Z = M*Z*0.75; \t\t\t// B:scale of cell\n    return crot(Z,-PI_6);\t// B:orientation-offset of cell  \n}\n\n// regular circular arc triangle -> unitcircle conformal mapping by using a barycentric approximation\nvec2 cTeraPolyArc2disk(vec2 z) {\n    const int NUM_j = 15;\n    const vec2[NUM_j] rf = vec2[]\n    (vec2(-0.4534, -0.8913)\n    ,vec2( 0.5001,  0.8660)\n    ,vec2(-1.0000,  0.0001)\n    ,vec2( 0.5008, -0.8656)\n    ,vec2(-0.5452,  0.8383)\n    ,vec2( 0.1901,  0.9818)\n    ,vec2( 0.9875, -0.1576)\n    ,vec2(-0.9856, -0.1691)\n    ,vec2( 0.4224, -0.9064)\n    ,vec2( 0.5738,  0.8190)\n    ,vec2(-0.9995,  0.0311)\n    ,vec2( 0.4858,  0.8741)\n    ,vec2( 0.5760, -0.8175)\n    ,vec2(-1.0000, -0.0061)\n    ,vec2( 0.4959, -0.8684));\n    \n    const vec2[NUM_j] rw = vec2[]\n    (vec2( 0.2728,  0.0   )  \n    ,vec2( 0.0003,  0.0126)\n    ,vec2(-0.0016, -0.0121)\n    ,vec2(-0.0172,  0.0324)\n    ,vec2( 0.1417, -0.4629)\n    ,vec2(-0.4681, -0.2288)\n    ,vec2(-0.2433,  0.2822)\n    ,vec2( 0.1996, -0.0082)\n    ,vec2( 0.2884, -0.0353)\n    ,vec2(-0.0666,  0.1824)\n    ,vec2(-0.0357, -0.1136)\n    ,vec2(-0.1091,  0.0396)\n    ,vec2(-0.0831,  0.2627)\n    ,vec2( 0.0598, -0.0284)\n    ,vec2( 0.0597,  0.0760));\n\n    const vec2[NUM_j] rz = vec2[]\n    (vec2(-0.239570, -0.459171)\n    ,vec2( 0.354172,  0.611300)\n    ,vec2(-0.706487,  0.001072)\n    ,vec2( 0.356785, -0.606740)\n    ,vec2(-0.277869,  0.437059)\n    ,vec2( 0.047259,  0.573454)\n    ,vec2( 0.515842, -0.066306)\n    ,vec2(-0.591622, -0.166501)\n    ,vec2( 0.221135, -0.605193)\n    ,vec2( 0.413545,  0.494105)\n    ,vec2(-0.671697,  0.057599)\n    ,vec2( 0.309337,  0.611574)\n    ,vec2( 0.414577, -0.491758)\n    ,vec2(-0.695342, -0.019940)\n    ,vec2( 0.334074, -0.612218));\n\n    // polynomial barycentric representation\n    vec2 zn = vec2(0.); vec2 zd = vec2(0.);       \n    for(int j = 0; j<NUM_j; j++)\n    {\n        vec2 zj = cdiv( rw[j], (z-rz[j]));\n        zd += zj; // sum denominator\n        zn += cmul(rf[j], zj); // sum nominator\n    }\n    return cdiv(zn, zd);;\n}\n\n// map spherical platonic solid pyramidal sectors to one sector located at -z-axis.\nvec3 tetra_cells(in vec3 p, out float cell_id, out float sr) {\n\t//// tetrahedron (bounded by a cube)\n\t// cells: A,B,C,D\n\t// cell walls defined by the face_normal\n    bool nBA = dot(vec3( 1., 0.,-1.),p)>=0.;\n\tbool nCA = dot(vec3( 0., 1.,-1.),p)>=0.;\n\tbool nDA = dot(vec3( 1., 1., 0.),p)>=0.;\n\tbool nCB = dot(vec3(-1., 1., 0.),p)>=0.;\n\tbool nDB = dot(vec3( 0., 1., 1.),p)>=0.;\n\tbool nDC = dot(vec3( 1., 0., 1.),p)>=0.;\n    \n    // map n-cells to 1-cell by rotation\n    // rotation angles\n    const float a45 = PI/4.;             // 45° \n    const float a35 = atan(sqrt(8.))/2.; // 35.264°\n    const float a30 = PI/6.;             // 30°\n    \n    const vec2 ei_a45 = vec2(cos(a45), sin(a45));\n    const vec2 ei_a35 = vec2(cos(a35), sin(a35));\n    const vec2 ei_a30 = vec2(cos(a30), sin(a30));\n    \n    vec2 ei_y = ei_a45;   \n    vec2 ei_x = ei_a35;\n    vec2 ei_z = ei_a30;\n    // symmetries\n    if(nBA && nCA && nDA) //inside cell A\n\t{\n\t\tcell_id =  0.;\n        ei_x.y *= -1.; // a = -35.264°\n\t}\n\telse if( nCB && nDB && !nBA) //inside cell B\n\t{\n\t\tcell_id =  1.;\n\t\tei_y   *= -1.; // a = -3.*45°\n        ei_x.y *= -1.; // a = -35.264°\n\t}\n\telse if(!nCA && !nCB && nDC) //inside cell C\n\t{\n\t\tcell_id =  2.;\n\t\tei_y.x *= -1.; // a = +3.*45°\n\t\tei_z.y *= -1.; // a = -30°\n\t}\n\telse if(!nDA && !nDB && !nDC)//inside cell D\n\t{\n\t\tcell_id =  3.;\n\t\tei_y.y *= -1.; // a = -45°\n\t\tei_z.y *= -1.; // a = -30°\n\t}\n\tp.zx = cmul(p.zx,ei_y); // y-axis\n\tp.yz = cmul(p.yz,ei_x); // x-axis\n\tp.xy = cmul(p.xy,ei_z); // z-axis\n\t// 3 edges per face, non cyclic\n\tsr = 3.;\n    return p;\n}\n\n// distribution\nfloat sig(float x) {\n    return x < 0. ? -1. : +1.; \n    }\n\nfloat dist(float x, float e) {\n    // e in [0., +inf]\n    return sign(x)*abs( pow(abs(x), abs(e)) );\n    }\n\n// bb\nvec2 isphere(in vec3 ro, in vec3 rd, in float r) {\n\tfloat b = dot(ro,rd);\n\tfloat c = dot(ro,ro) - r*r;\n    float h = b*b - c;   \n    if( h<0.0 ) return vec2(-1.0);\n    h = sqrt( h );\n    return -b + vec2(-h,h);\n}\n\n// sdf\nfloat opIntersection( float d1, float d2 ) {\n    return max(d1,d2); }\n\nfloat opSmoothUnion( in float d1, in float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat sdSphere( vec3 p, float s ) {\n  return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b ) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdCylinder( vec3 p, float r ) {\n  return length(p.xz)-r;\n}\n\nfloat sdTorus( vec3 p, vec2 t ) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n// color\nvec3 h2rgb(float h){\n    vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\n}\n\n// srgb <--> rgb (linear)\nvec3 rgb2srgb(vec3 col) {\n    return pow(col, vec3(1./2.2));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}