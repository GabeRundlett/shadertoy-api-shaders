{
    "Shader": {
        "info": {
            "date": "1648487564",
            "description": "Boxes don't bounce perfectly but looks kinda nice, much easier to do with a circle:\nhttps://www.desmos.com/calculator/a0eis58nzj\nhttps://www.desmos.com/calculator/b6tawvw9te\n\nMessy example of square on a line:\nhttps://www.shadertoy.com/view/NtXyRl\n",
            "flags": 0,
            "hasliked": 0,
            "id": "flXyRl",
            "likes": 27,
            "name": "Bouncing Box Wave",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 422
        },
        "renderpass": [
            {
                "code": "float sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // How far squares travel before stopping etc\n    float rep = 3. * pi;\n    \n    // Stop-Start time (a is time, since you can't spell \"time\" without \"a\")\n    float m = min(mod(iTime, rep), 0.5 * rep);\n    float a = -pi + rep * floor(iTime/rep) \n                  + rep * smoothstep(0., 0.5 * rep, m);\n    \n    // Amplitude of sin wave\n    float c = 0.8 * cos(0.4 * iTime);\n    \n    // Scale + translate uv \n    float sc = 4.5; // + cos(iResolution.y * 3. * uv.x);\n    uv *= sc;\n    uv.y += 0.25;\n    uv.x += c + mix(a, iTime, 0.5);\n    \n    // Smallest square size\n    float r = 0.025;\n    // Square outline width\n    float w = 0.02;// + 0.01 * thc(8., iTime + 20. * uv.x);\n    \n    // Draw sin wave\n    float k = sc / iResolution.y;\n    float s = 1. - 0.98 * smoothstep(-k, k, abs(-uv.y + c * cos(uv.x)) - w);\n    \n    vec3 e = vec3(0.5);\n    vec3 col = vec3(s);\n    \n    float n = 40.;   \n    for (float i = n - 1.; i >= 0.; i--) {\n        // Offset time for each square\n        a += mix(-1., 1., 0.5 - 0.5 * cos(iTime + i * pi / 400.)) * pi / n;\n        \n        // Rescale each square\n        //r *= 1.08;\n        r = mix(0.05, 0.4, cos(a + iTime + 1. * pi * i / n) * 0.5 + 0.5);\n        \n        // sgn determines which side of the sin wave the boxes are on\n        float sgn = -1.;\n        \n        // sq is a constant used for finding the normal to the wave\n        // (mix between 1 and sqrt(2) so the box \"bounces\" correctly-ish)\n        float mx = mix(1., sqrt(2.), abs(ths(1., 2. * a + 4. * iTime)));\n        float sq = mx * sgn * (r + 0.5 * w) / sqrt(c * c * sin(a) * sin(a) + 1.);\n        \n        // First vector is point on wave, 2nd vector is normal\n        vec2 p = vec2(a, c * cos(a)) - sq * vec2(c * sin(a), 1.); \n\n        // Translate + rotate uv to p\n        vec2 uv2 = (uv - p) * Rot(a + c * sin(a));\n        \n        // Draw box\n        float box = w - abs(sdBox(uv2, vec2(0.8 * r - 0.5 * w)) - 0.2 * r);\n        s = (i/40.) * smoothstep(-k, k, box);\n        \n        vec3 col2 = pal(0.5 * a + i/n * 2., e, e, e, 0.5 * vec3(0,1,2)/3.);\n        col2 = vec3(1.); // uncomment me for colors\n        col = mix(col, col2, s);\n    }\n    \n    // Lighten the colors\n    col = sqrt(col);\n\n    //col += 0.25 * step(abs(uv.y - c * cos(a) + c * sin(a) * (uv.x - a)), 0.04);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+0.0001)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b)\n{\n    float k = 0.03;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}