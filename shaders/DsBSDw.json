{
    "Shader": {
        "info": {
            "date": "1670427419",
            "description": "restart after the audio loads for the full effect\nuses a spectrogram to draw funny cat picture",
            "flags": 96,
            "hasliked": 0,
            "id": "DsBSDw",
            "likes": 2,
            "name": "The Sniff (Spectrogram Image)",
            "published": 3,
            "tags": [
                "image",
                "cat",
                "spectrogram"
            ],
            "usePreview": 0,
            "username": "Retard_Gaming",
            "viewed": 191
        },
        "renderpass": [
            {
                "code": "// go to buffer A\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 info = texture(iChannel0, uv);\n\n    fragColor = info;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "// set to 0 if you want it to stay still\n#define scroll 1\n\n\n//spectrogram\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n#if scroll\n    if(fragCoord.x > iResolution.x - 1.) {\n        fragColor = texture(iChannel1, vec2(uv.y, 0)).rrrr;\n    } else {\n        fragColor = texture(iChannel0, uv + vec2(0.01, 0.));\n    }\n#else\n    if(uv.x > iTime/3.) {\n        fragColor = texture(iChannel1, vec2(uv.y, 0)).rrrr;\n    } else {\n        fragColor = texture(iChannel0, uv);\n    }\n#endif\n    \n    \n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 31125,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/retardgaming1967/result-15/s-GmUqsW2xAdl?si=a869038115f94fe99fa88d0289d5d54c&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// useless buffer\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}