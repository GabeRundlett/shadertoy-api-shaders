{
    "Shader": {
        "info": {
            "date": "1686441011",
            "description": "inspired by tutorial https://www.youtube.com/watch?v=f4s1h2YETNY",
            "flags": 0,
            "hasliked": 0,
            "id": "clySDt",
            "likes": 1,
            "name": "broken fractal",
            "published": 3,
            "tags": [
                "fractal",
                "broken"
            ],
            "usePreview": 0,
            "username": "cemysf",
            "viewed": 125
        },
        "renderpass": [
            {
                "code": "float calcBasis(vec2 uv) {\n    float pp = pow(uv.x, 4.) / pow(uv.y, 2.0);\n    float d = pow(pp, iTime*0.001) - (pow(uv.x, 3.0)* pow(uv.y, 2.0)) ;\n    \n    //d -= 0.5;\n    \n    d = cos(d * iTime + iTime) / 2.;\n        \n    d = abs(d);\n    //d = smoothstep(0.0, 0.1, d);\n    \n    d = 0.15 / d;\n    \n    d = smoothstep(0.0, 1.0, d);\n    \n    d = 0.2 / d;\n    \n    d = pow(0.2 / d, 2.0);\n    \n    \n    return d;\n    \n}\n\n\nvec3 palette(float t){\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n \n    return a + b*tan( 6.28318*(c*t + d));\n}\n\n\n// https://www.youtube.com/watch?v=f4s1h2YETNY\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    // and scale and shif\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    // fix aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 uv0 = uv;\n    \n    \n    vec3 finalColor = vec3(0.0);\n    \n    \n    for (float i = 0.0; i < 3.0; i++) {\n        uv = fract(uv * (2. + fract(i)) + i) - i;\n         \n    \n        // basis\n        float d = calcBasis(uv); //length(uv); //\n        d *= calcBasis(uv0);\n        \n        //d *= length(uv0); //\n        \n        d *= exp(-length(uv));\n        d *= exp(-length(uv0));\n\n        //vec3 col = palette(tan(d) * length(uv) * length(uv0) + i*0.3 + iTime*0.125);\n        vec3 col = palette(cos(uv.x) * cos(uv.y) * length(uv) * length(uv0) + i*0.3 + iTime*0.125);\n        finalColor += col * d;\n\n        // Time varying pixel color\n        //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n        \n    }\n\n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}