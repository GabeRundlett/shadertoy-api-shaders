{
    "Shader": {
        "info": {
            "date": "1676748150",
            "description": "now really needs music :)",
            "flags": 96,
            "hasliked": 0,
            "id": "DtBSWd",
            "likes": 4,
            "name": "Synced Walker Dude",
            "published": 3,
            "tags": [
                "walk",
                "person"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 217
        },
        "renderpass": [
            {
                "code": "// The only new line of code here\n#define iTime texture(iChannel1, vec2(0)).r*2.\n\n#define pi 3.14159\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define Dir(a) vec2(cos(a),sin(a))\n\n//https://lospec.com/palette-list/verdigris\n#define white vec3(238, 228, 189) / 255.\n#define grey1 vec3(196, 196, 153) / 255.\n#define grey2 vec3(127, 144, 129) / 255.\n#define brown0 vec3(44,  31,  26) / 255.\n#define brown1 vec3(125, 71,  53) / 255.\n#define brown2 vec3(179, 109, 65) / 255.\n#define brown3 vec3(216, 152, 64) / 255.\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdSeg(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy;\n    float k = 1. / res.y;\n    vec2 uv = (fragCoord - 0.5 * res) / res.y;\n    vec2 ms = (iMouse.xy - 0.5 * res) / res.y;\n    if (iMouse.z <= 0.)\n        ms = vec2(0.18, -0.1);\n    float t = 0.65 * iTime;\n   \n    float h = -0.25; \n    float r = 0.03;\n    \n    float sw = ms.x;//0.18 * ms.x; // Stride width (x2)\n    float sh = -ms.y; // Stride height\n    \n    float fr = mod(t, 2.);\n    float fr2 = mod(t + 1., 2.);\n\n    float y = max(0., -ths(4., pi/2. + pi * t));\n    float y2 = max(0.,ths(4., pi/2. + pi * t));\n    y = pow(y, 14.);\n    y2 = pow(y2, 14.);\n    \n    vec2 pHead = vec2(0, 0.225 + 2. * r * ths(2., 2. * pi * t + 0.1));\n    vec2 pNeck = vec2(0, 0.1 + 2. * r * ths(2., 2. * pi * t + 0.2));\n    vec2 pHip = vec2(0, 2. * r * ths(2., 2. * pi * t ));\n    vec2 pFoot1 = vec2(sw * ths(4., pi*t), h + 0.4*r + 2. * r * y);\n    vec2 pFoot2 = vec2(sw * -ths(4., pi*t), h + 0.4*r + 2. * r * y2);\n    vec2 pHand1 = pNeck - vec2(sw * ths(4.,pi*t), sh * (.5+.5*thc(2.,pi*t)));\n    vec2 pHand2 = pNeck - vec2(sw * -ths(4.,pi*t), sh * (.5+.5*thc(2.,pi*t)));\n    \n    float dHead = length(uv - pHead) - 0.05 - 0.004 *ths(2.,2.*pi*t+0.1);\n    float dBody = sdSeg(uv, pHip, pNeck) - 0.05 - 0.005 *ths(2.,2.*pi*t);\n    vec2 dLeg = vec2(sdSeg(uv, pFoot1, pHip),\n                     sdSeg(uv, pFoot2, pHip)) - 0.9 * r;\n    vec2 m = min(vec2(r), abs(vec2(pFoot1.y, pFoot2.y) - h));\n    vec2 dFoot = vec2(sdBox(uv-pFoot1, vec2(r*r/m.x, m.x)-.4*r)-.4*r,\n                      sdBox(uv-pFoot2, vec2(r*r/m.y, m.y)-.4*r)-.4*r);\n    vec2 dArm = vec2(sdSeg(uv, pNeck, pHand1) - 0.8 * r,\n                     sdSeg(uv, pNeck, pHand2) - 0.8 * r);\n    \n    float d = min(dHead, dBody);\n    //d = min(d, min(dLeg.x, dLeg.y));\n    d = min(d, min(dFoot.x, dFoot.y));\n    d = min(d, min(dArm.x, dArm.y));\n    \n    float sHead = smoothstep(-k, k, -dHead);\n    float sBody = smoothstep(-k, k, -dBody);\n    vec2   sLeg = smoothstep(-k, k, -dLeg);\n    sLeg.x *= step(pFoot1.y - m.x + k, uv.y);\n    sLeg.y *= step(pFoot2.y - m.y + k, uv.y);\n    vec2  sFoot = smoothstep(-k, k, -dFoot);\n    vec2   sArm = smoothstep(-k, k, -dArm);\n    float sGround = smoothstep(-k, k, h - uv.y);\n    \n    float s = smoothstep(-k, k, -d + 0.4 * r);\n    vec2 sLeg2 = smoothstep(-k, k, -dLeg + 0.4 * r); //sloppy\n    sLeg2.x *= step(pFoot1.y - m.x + k, uv.y);\n    sLeg2.y *= step(pFoot2.y - m.y + k, uv.y);\n    s = max(s, max(sLeg2.x, sLeg2.y));\n    \n    vec3 col = vec3(0);    \n    col.r = max(sFoot.x, sLeg.x);\n    col.r = max(col.r, sArm.x);\n    col.g += max(sFoot.y, sLeg.y);\n    col.g = max(col.g, sArm.y);\n    col.b = max(sHead, sBody);\n    \n    vec3 col2 = white;//mix(white, brown0, s);\n    float dHill = -0.5 * h * (1. - cos(4.*uv.x-0.25*pi*t)) - uv.y;\n    float sHill = smoothstep(-k, k, dHill);\n    uv = 2. * (uv + vec2(0.125*pi*(1.- 0.5*t), 0.5*h));\n    float ix = floor(2.*uv.x/pi) + 0.;\n    float fx = mod(uv.x, 0.5*pi) - pi/4.;\n    float test = mod(ix, 2.);\n    \n    float dCircle = length(vec2(fx, uv.y)) - 0.2;\n    float sCircle = smoothstep(-2.*k, 2.*k, dCircle);\n    col2 = mix(col2, grey1, 1.-sHill);\n    col2 = mix(col2, mix(white, grey1, test), (1.-sCircle));\n    col2 = mix(col2, grey2, sGround);\n    col2 = mix(col2, brown0, s);\n    col2 = mix(col2, brown1, col.r);\n    col2 = mix(col2, brown2, col.b);\n    col2 = mix(col2, brown3, col.g);\n    fragColor = vec4(col2,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Stores audio in a buffer because the soundcloud input doesn't have mipmaps\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, vec2(fragCoord.x/iResolution.x, 0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 32415,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/lostdogz/sumthin-sumthin-cut-that-untz-premiere?in=user-747537358/sets/2021-playback&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Accumulate the average of all the pixels using mipmaps\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    if(iFrame == 0)\n        fragColor = vec4(0);\n    fragColor += vec4(pow(textureLod(iChannel0, fragCoord/iResolution.xy, 10.).r, 2.)*iTimeDelta);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}