{
    "Shader": {
        "info": {
            "date": "1692762971",
            "description": "Fancy number spiral.\nMagical segmentation code derived from: https://www.shadertoy.com/view/lsdBzX\nUpdated Jan 2023",
            "flags": 0,
            "hasliked": 0,
            "id": "mtlfR7",
            "likes": 4,
            "name": "Fork Jeweled Vo DJBETOTJ 469",
            "published": 3,
            "tags": [
                "2d",
                "math",
                "spiral",
                "fractions"
            ],
            "usePreview": 0,
            "username": "djbetotj",
            "viewed": 194
        },
        "renderpass": [
            {
                "code": "#define M iMouse\n#define R iResolution.xy\n#define PI 3.14159265358979\n#define TAU 6.283185307179586\nvoid mainImage( out vec4 RGBA, in vec2 XY )\n{\n    vec3 c = vec3(0);\n    vec2 m = (M.xy-.5*R)/R.y*2.; // mouse coords\n    float t = (M.z > 0.) ? atan(m.x, -m.y): -.54+(iTime*TAU)/3600., // arc from time or mouse\n          n = (cos(t) > 0.) ? sin(t): 1./sin(t), // t to sin/csc\n          e = n*2.,                              // exponent\n          z = clamp(pow(500., n), 1e-16, 1e+18); // zoom\n    vec2 uv = (XY-.5*R)/R.y*2., // screen coords\n          u = uv*z;             // coords with zoom\n    float ro = -PI/2.,               // rotation\n          cr = iTime*TAU/5.,         // counter rotation\n          a = atan(u.y, u.x)-ro,     // screen arc\n          i = a/TAU,                 // arc to range between +/-0.5\n          r = exp(log(length(u))/e), // radius | slightly faster than pow(length(u), 1./e)\n          sc = ceil(r-i),            // spiral contour\n          s = pow(sc+i, 2.),         // spiral gradient\n          vd = cos((sc*TAU+a)/n),    // visual denominator\n          ts = cr+s/n*TAU;           // segment with time\n    c += sin(ts/2.); // spiral 1\n    c *= cos(ts);    // spiral 2\n    c *= pow(abs(sin((r-i)*PI)), abs(n*2.)+5.); // smooth edges & thin near inf\n    c *= .2+abs(vd);                            // dark folds\n    c = min(c, pow(length(u)/z, -1./n));        // dark gradient\n    vec3 rgb = vec3(vd+1., abs(sin(t)), 1.-vd); // color\n    c += (c*2.)-(rgb*.5);                       // add color\n    if (M.z > 0.) c = max(c, digit(iChannel0, uv-m, n, .2, 4., 4.)); // digits\n    RGBA = vec4(c, 1.);\n}\n\n/* golf 489 char with help from Fabrice\nvoid mainImage( out vec4 c, vec2 U )\n{\n    vec2 R = iResolution.xy, u,\n         m = (2.*iMouse.xy-R)/R.y;\n    float T = 6.283,\n          t = (iMouse.z > 0.) ? \n              atan(m.x, -m.y): \n              -.54+iTime*T/3600.,\n          n = (cos(t) > 0.) ? sin(t): 1./sin(t),\n          z = clamp(pow(5e2, n), 1e-16, 1e+18);\n    u = (2.*U-R)/R.y*z;\n    float a = T/4.+atan(u.y, u.x),\n          i = a/T,\n          l = length(u),\n          r = exp(log(l)/n/2.),\n          h = ceil(r-i),\n          v = cos((h*T+a)/n),\n          k = iTime*T/5.+pow(h+i, 2.)/n*T;\n    c *= 0.;\n    c += sin(k/2.)*cos(k) *\n             pow(abs(sin((r-i)*T/2.)), abs(n*2.)+5.) *\n             (.2+abs(v));\n    c = min(c, pow(l/z, -1./n));\n    c += c+c-.5*vec4(v+1., abs(sin(t)), 1.-v, 0);\n}\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// font code from https://www.shadertoy.com/view/7tV3zK\nvec4 char(sampler2D ic, vec2 p, int c)\n{\n    vec2 dFdx = dFdx(p/16.), dFdy = dFdy(p/16.);\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad(ic, p/16. + fract( vec2(c, 15-c/16)/16.), dFdx, dFdy );\n}\nvec4 pInt(sampler2D ic, vec2 p, float n, float d)\n{\n    vec4 v = vec4(0);\n    if (n < 0.) \n        v += char(ic, p - vec2(-.5,0), 45 ),\n        n = -n;\n    for (float i = d; i>0.; i--) \n        n /=  9.999999, // 10., // for windows :-(\n        v += char(ic, p - .5*vec2(i-1.,0), 48+ int(fract(n)*10.) );\n    return v;\n}\n\n// texture, screen coords, value, size, num left digits, num right digits\nvec3 digit(sampler2D ic, vec2 uv, float v, float s, float l, float r)\n{\n    float numleft = min(log2(abs(v))/log2(10.), l-1.);\n    l = max(floor(numleft), 0.)+1.;\n    uv /= s; // size\n    if (isinf(abs(v))) return vec3(char(ic, uv*.7+vec2(.5, .3), 153).x); // infinity symbol\n    uv += vec2((l+1.)/2., .28); // center on decimal\n    vec3 d = vec3(0);\n    d += pInt(ic, uv, v, l).x; // left of decimal\n    uv.x -= l/2.;\n    d += char(ic, uv, 46).x; // decimal point\n    uv.x -= .5;\n    d += pInt(ic, uv, floor(abs(v)*pow(10., r)), r).x; // right of decimal\n    return d;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}