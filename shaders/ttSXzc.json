{
    "Shader": {
        "info": {
            "date": "1566583067",
            "description": "feedback loop using hue angle ",
            "flags": 32,
            "hasliked": 0,
            "id": "ttSXzc",
            "likes": 3,
            "name": "feedback hueish",
            "published": 3,
            "tags": [
                "hue",
                "feedback",
                "angle"
            ],
            "usePreview": 0,
            "username": "aferriss",
            "viewed": 427
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 rgb2hsv(vec3 c){\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(clamp(fract(c.xxx + K.xyz), 0.0, 0.999) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 texel = 1.0 / iResolution.xy;\n    \n    // zoom texture coordinates\n    vec2 tc = uv;\n    tc = tc * 2.0 - 1.0;\n    tc *= 0.997;\n    tc = tc * 0.5 + 0.5;\n    \n    vec4 fb = texture(iChannel1, tc);\n    fb.rgb = rgb2hsv(fb.rgb);\n    \n    // get the xy angles from the hue\n    float xAngle = cos(fb.r * 6.28);\n    float yAngle = sin(fb.r * 6.28);\n    \n    // The amount\n    vec2 amt = texel.xy * 2.;\n    \n    // Sample texture\n    vec4 colOut = texture(iChannel1, tc - vec2(xAngle, yAngle) * amt);\n    \n    // Update hsv a little every time through the loop\n    colOut.rgb = rgb2hsv(colOut.rgb);\n    colOut.r += 0.001;\n    colOut.g += 0.004;\n    colOut.b += 0.001; \n    \n    colOut.rgb = hsv2rgb(colOut.rgb);\n    \n    fragColor = colOut;\n    \n    \n    // Seed the buffer with noise\n    if(iTime < 1.0){\n        fragColor = texture(iChannel0, uv);\n    }\n    \n    if(iMouse.z > 0.0){\n        fragColor = texture(iChannel0, uv);\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}