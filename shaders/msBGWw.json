{
    "Shader": {
        "info": {
            "date": "1667669313",
            "description": "Here is my shader royale shader. I got eliminated pretty early on, but I continued throughout the shader royale until the winner was announced.",
            "flags": 0,
            "hasliked": 0,
            "id": "msBGWw",
            "likes": 15,
            "name": "Inercia 2022 Shader Royale",
            "published": 3,
            "tags": [
                "3d",
                "sdf",
                "spheres",
                "transition"
            ],
            "usePreview": 0,
            "username": "mu6k",
            "viewed": 335
        },
        "renderpass": [
            {
                "code": "#define T (iTime)\n\nfloat sid=0.0;\nvec3 c0=vec3(0);\n\nmat2 rot(float a)\n{\n\tfloat c=cos(a), s=sin(a);\n\treturn mat2(c,s,-s,c);\n}\n\nfloat dfo(vec3 p, float id)\n{\n\tp.xy*=rot(p.z*sin(T/4.0+id)*(.01+id*0.1));\n\tp.z+=T;\n\tfloat s = 1.0/id/id;\n\tvec3 p2 = mod(p, s+s)-s;\n\tp+=sin(p.yzx+T);\n\treturn length(p2)-s*0.5;\n}\n\nfloat df(vec3 p)\n{\n\tfloat d=dfo(p,0.0);\n\tfor (float i=.0; i<4.0; i+=1.)\n\t{\n\t\td=max(d-.2, min(d, dfo(p, i)));\n\t}\n\treturn d;\n}\n\nvec3 nf(vec3 p)\n{\n\tvec2 e=vec2(0,0.5e-4);\n\treturn normalize(vec3(\n\t\tdf(p+e.yxx)-df(p-e.yxx), \n\t\tdf(p+e.xyx)-df(p-e.xyx), \n\t\tdf(p+e.xxy)-df(p-e.xxy)));\n}\n\nvec3 surf(vec3 pos)\n{\n\tvec3 norm = nf(pos);\n\tvec3 emc = c0;\n\tvec3 shr = vec3(0);\n\tfloat pat = 0.0;\n\tfloat q = 0.0;\n\tq += smoothstep(0.9,0.98,sin((pos.z*0.5+T*3.14159)));\n\tpat += smoothstep(0.97-q,0.98,sin(94.0*df(pos*1.0+1.0)));\n\tpat += smoothstep(0.92,0.98,sin(94.0*df(pos*4.0+1.0)))*0.2;\n\tshr=emc * pat * (1.0+q*2.0) * max(.0,sin(pos.z*0.5+T));\n\treturn shr;\n  }\n\nvec3 eval_surface(vec3 pos, vec3 dir)\n{\n\treturn surf(pos);\n}\n\nvec3 frame(in vec2 coord, int id)\n{\n\tvec4 color = vec4(1.0);\n\tvec2 uv = (coord-iResolution.xy/2.0)/iResolution.yy;\n\n\tvec2 quv = uv-mod(uv,vec2(0.1));\n\tfloat q=fract(dot(quv, vec2(2.412,95.313))*31.3513);\n\tsid = T*0.3+q*0.25;\n\tsid -= fract(sid);\n\tsid = sin(sid*4123.0);\n\t\n\tc0 = mix(vec3(0.9,9,1.1), vec3(9,0.9,1.1), abs(sin(sid*4.04+uv.y*0.5)));\n\tc0 = mix(c0, vec3(1.5,.9,6), abs(sin(sid*9.53+uv.y*0.5)));\n\n\tvec3 pos = vec3(sin(sid)*0.35,cos(sid*4.0)*0.35,-4.0);\n\tvec3 dir = normalize(vec3(uv.xy, +1));\n\tfloat dt=0.01;\n\tfloat dist;\n\t\n\tdir.xy*=rot(sid);\n\tdir.xz*=rot(sin(sid*53.0)/4.0);\n\tdir.yz*=rot(sin(sid*9.0)/4.0);\n\t\n\tfor (int i=0; i<150; i+=1){\n\t  dist = df(pos+dir*dt);\n\t  dt += dist;\n\t  if (dist<1e-4) break;\n\t}\n\t\n\tvec3 pos2 = pos+dir*dt;\n  \n\tvec3 col = vec3(0);\n\tif (dist < 1e-3)\n\t{\n\t  col = surf(pos2);\n\t}\n\t\n\tvec3 dir2 = reflect(dir, nf(pos2));\n\tfloat dt2 = 1e-3;\n\tfloat dist2 = 0.0;\n\tfor (int i=0; i<100; i+= 1){\n\t  dist=df(pos2+dir2*dt2);\n\t  dt2+=dist;\n\t  if (dist<1e-4) break;\n   \n\t}\n\tvec3 pos3 = pos2+dir*dt2;\n\tvec3 col2 = c0;\n\tif (dist < 1e-3)\n\t{\n\t  col2 = surf(pos3);\n\t}\n\tcol2 += mix(c0*4.0,col2,1.0/(1.0+dt2*dt2*.5e-3));\n\t\n\tfloat fres = pow(1.0+dot(dir, nf(pos2)),2.0);\n\tfres = clamp(fres,0.0,1.0);\n\t\n\tcol=mix(col, col2, fres);\n\tcol=mix(c0*4.0,col,1.0/(1.0+dt*dt*.5e-3));\n\n\treturn vec3(col);\n}\n\nvoid mainImage(out vec4 color, in vec2 coord){\n\n\tcolor = vec4(0);\n\n\tfor (int i=0; i<1; i+=1)\n\t{\n\t\tcolor.xyz += frame(coord, i);\n\t}\n\n\tfloat vignette = 1.0-pow(length((coord.xy-.5*iResolution.xy)/iResolution.yy),2.0);\n\tcolor.xyz *= clamp(vignette, 0.0, 1.0);\n\tcolor.xyz = 1.2*vec3(1.35,1.3,1.5)*color.xyz/(1.0+color.xyz);\n\tvec3 inv_gamma = vec3(1.0/2.2);\n\tcolor.xyz = pow(color.xyz, inv_gamma);\n\tcolor.xyz = clamp(color.xyz, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}