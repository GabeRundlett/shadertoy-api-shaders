{
    "Shader": {
        "info": {
            "date": "1525185645",
            "description": "Nostalgic egavga.bgi test/demo :)\nI tried to do one-connected Bresenham-like primitives routines for line, circle and ellipse.",
            "flags": 0,
            "hasliked": 0,
            "id": "XdtfW4",
            "likes": 11,
            "name": "egavga.bgi test",
            "published": 3,
            "tags": [
                "oldstylevga"
            ],
            "usePreview": 0,
            "username": "klk",
            "viewed": 5283
        },
        "renderpass": [
            {
                "code": "// Created by Alex Kluchikov\n\n#define float2 vec2\n#define float3 vec3\n#define float4 vec4\n\nbool circle(float2 p, float r)\n{\n    p=abs(p);\n    if((p.x>r+.5)||(p.y>r+.5))\n        return false;\n    if(p.x<p.y)\n        p.xy=p.yx;\n    if(abs(p.x-sqrt(r*r-p.y*p.y))<0.5)\n       return true;\n    return false;\n}\n\nbool ellipse(float2 p, float2 r)\n{\n    p=abs(p);\n    r=abs(r)+0.01;\n    if((p.x>r.x+.5)||(p.y>r.y+.5))\n        return false;\n    float m=max(r.x,r.y);\n    r/=m;\n    p.x/=r.x;\n    p.y/=r.y;\n    if(p.x/r.x>p.y/r.y)\n    {\n        p.xy=p.yx;\n        r.xy=r.yx;\n    }\n\n    if(r.x>=r.y)\n    {\n        if(abs(p.y-sqrt(m*m-p.x*p.x))<0.5/r.y)\n            return true;\n    }\n    else\n    {\n        if(abs(p.y-sqrt(m*m-p.x*p.x))<0.5)\n            return true;\n    }\n    return false;\n\n    if(abs(sqrt(p.x*p.x+p.y*p.y))<m)\n       return true;\n    return false;\n\n}\n\nbool fillellipse(float2 p, float2 r)\n{\n    p=abs(p);\n    r=abs(r)+0.01;\n    float m=max(r.x,r.y);\n    r/=m;\n    p.x/=r.x;\n    p.y/=r.y;\n\n    if(abs(sqrt(p.x*p.x+p.y*p.y))<m)\n       return true;\n    return false;\n}\n\nbool line(float2 p, float2 p0, float2 p1)\n{\n\tfloat2 dp=p1-p0;\n    p-=p0;\n    float2 n=p/dp;\n    if(abs(dp.x)<abs(dp.y))\n    {\n        if((n.y<0.0)||(n.y>1.0))\n            return false;\n        float l=p.x-p.y*dp.x/dp.y;\n        if(abs(l)<0.5)\n            return true;\n    }\n    else\n    {\n        if((n.x<0.0)||(n.x>1.0))\n            return false;\n        float l=p.y-p.x*dp.y/dp.x;\n        if(abs(l)<0.5)\n            return true;\n    }\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor=vec4(0,0,0,1);\n    float2 uv=fragCoord;\n\t\n\tif(false)\n    {\n\t    if(line(trunc(uv/2.0),float2(100,100),iMouse.xy/2.0))\n    \t    fragColor.g=1.0;\n\t    if(fillellipse(trunc(uv/2.0)-float2(100,100),iMouse.xy/2.0-float2(100,100)))\n    \t    fragColor.r=1.0;\n    \treturn;\n    }\n        \n\n    if(mod(float(iFrame),240.0)<1.0)\n    {\n        return;\n    }\n    \n   \tfloat3 col=float3(\n        fract(sqrt(iTime)*float3(117.22,151.56,510.285))\n    );\n\n    col=trunc(col*6.0)/5.0;\n    int n=int(mod(float(iFrame/240), 4.0));\n    if(n==1)\n    {\n        float2 c0=iResolution.xy*(\n            float2(fract(sqrt(iTime)*float2(354.5671,510.8234))));\n        float2 rp=trunc(uv/2.0)-trunc(c0/2.0);\n        if(!circle(rp,60.0*fract(sqrt(iTime)*358.116)))\n            discard;\n    }\n    else if(n==0)\n    {\n        float2 c0=iResolution.xy*(\n            float2(fract(sqrt(iTime)*float2(354.5671,510.8234))));\n        float2 c1=iResolution.xy*(\n            float2(fract(sqrt(iTime+5.0)*float2(354.5671,510.8234))));\n        if(!line(trunc(uv/2.0), trunc(c0/2.0), trunc(c1/2.0)))\n            discard;\n    }\n    else if(n==2)\n    {\n        float2 c0=iResolution.xy*(\n            float2(fract(sqrt(iTime)*float2(354.5671,510.8234))));\n        float2 c1=float2(80)*(\n            float2(fract(sqrt(iTime+5.0)*float2(354.5671,510.8234))));\n        if(!ellipse(trunc(c0/2.0)-trunc(uv/2.0), trunc(c1/2.0)))\n            discard;\n    }\n    else if(n==3)\n    {\n        float2 c0=iResolution.xy*(\n            float2(fract(sqrt(iTime)*float2(354.5671,510.8234))));\n        float2 c1=float2(80)*(\n            float2(fract(sqrt(iTime+5.0)*float2(354.5671,510.8234))));\n        if(!fillellipse(trunc(c0/2.0)-trunc(uv/2.0), trunc(c1/2.0)))\n            discard;\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}