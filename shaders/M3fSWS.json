{
    "Shader": {
        "info": {
            "date": "1709896377",
            "description": "noice",
            "flags": 0,
            "hasliked": 0,
            "id": "M3fSWS",
            "likes": 3,
            "name": "bulbus",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "lomateron",
            "viewed": 109
        },
        "renderpass": [
            {
                "code": "float pi = 3.1415926535897932384626433832795;\nvec3 objec(vec3 u)\n{\n    vec3 n = u;\n         n = vec3(.4+cos(iTime)*.2);\n    for(float i = .5; i < 2.; ++i)\n    {\n        u = vec3(atan(u.y,u.x),\n                 atan(u.z,length(u.xy)),\n                 log(length(u)));    u = u*5.;  //change 5 to 7 or -4\n        u = vec3(cos(u.y)*cos(u.x),\n                 cos(u.y)*sin(u.x),\n                 sin(u.y))*exp(u.z);   u = u+n;\n    }\n    float l = dot(u,u);\n    vec3 b = vec3(atan(u.y,u.x),\n                  atan(u.z,length(u.xy)),\n                  log(length(u)));\n         b = cos(4.*b+iTime*.91)*.5+.5; //b=u*.5+.5;\n    vec3 c = vec3(0);\n    float a = 0.;  if(l==l && l<9.){a=max(0.,1.-l); c = b;}\n    return max(1.-a*c,0.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 camDir = normalize(cos(iTime*vec3(.27,.71,.51)+vec3(0,1,3)));\n    vec3 camPos = -camDir*1.7;\n    \n\tvec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    \n    mat3 mtx;\n    mtx[0] = normalize(vec3(camDir.z,0.,-camDir.x));\n    mtx[1] = cross(camDir,mtx[0]);\n    mtx[2] = camDir;\n    vec3 ray = mtx*normalize(vec3(uv,1.));//direction of ray from camera\n \n    vec3 p = camPos;\n    vec3 c = vec3(0);                      //reflected light\n    vec3 g = vec3(1.3);                      //directed light\n    for (int i = 0; i < 333; ++i)          //ray march\n    {\n        vec3 r = objec(p);\n        vec3 g2 = g;\n        g *= r;\n        c += g*r*(g2-g);\n        p += ray*2.8/333.;\n    }\n\tfragColor = vec4(c,0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}