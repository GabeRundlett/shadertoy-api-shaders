{
    "Shader": {
        "info": {
            "date": "1614226327",
            "description": "First try at making an algorithm that calculates the distance to a bitmap. I originally considered some sort of pixel search but later thought a cellular automaton would be faster. The distances are NOT exact but seem pretty decent (except on interiors).",
            "flags": 32,
            "hasliked": 0,
            "id": "3lGBD1",
            "likes": 4,
            "name": "Distance Propagation",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "bitmap",
                "cellular",
                "ca",
                "cellularautomata",
                "propagation"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 215
        },
        "renderpass": [
            {
                "code": "// You can test the distance field by moving the mouse around\nfloat getDistance(in vec2 p) {\n    return texture(iChannel0, p / iResolution.xy).x;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel1, fragCoord / iResolution.xy * vec2(0.5, 2.0));\n    fragColor.rgb -= getDistance(fragCoord) / 50.0;\n\n    fragColor.rgb += (0.25 + 0.25 * sin(getDistance(fragCoord))) * (1.0 - fragColor.a);\n\n    float bcircle = abs(length(fragCoord - iMouse.xy) - getDistance(iMouse.xy)) - 1.0;\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.0, 0.0, 1.0), smoothstep(1.0, 0.0, bcircle));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nThe idea is that each cell carries a piece of distance information that gets passed\nalong from cell to cell. The outline of the algorithm is extremely simple:\n1. If the current cell is filled, ignore it but retain its distance.\n2. If any neighboring cell is filled, update the current cell's distance to the\n   minimum of its distance and the distance of the neighboring cell plus the\n   distance between both cells.\n*/\n\n#define textureLoaded(s) (textureSize(s, 0).x > 1) // https://www.shadertoy.com/view/wldGW8\n#define bufferResized() ivec2(iResolution.xy) != ivec2(texelFetch(iChannel1, ivec2(0), 0).xy)\n#define SQRT_2 sqrt(2.0)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    ivec2 iFragCoord = ivec2(fragCoord);\n    if (iFrame > 0 && textureLoaded(iChannel1)) {\n        fragColor = texelFetch(iChannel0, iFragCoord, 0);\n\n        // Only update if the current cell has not been filled\n        if (fragColor.y < 0.5) {\n            float closest;\n            bool foundCandid = false; // Flags whether a first candidate for the shortest distance has been found\n\n            // Loop over neighboring cells\n            for (int i=-1; i < 2; i++) {\n                for (int j=-1; j < 2; j++) {\n\n                    // Ignore the center (current) cell\n                    if (!(i == 0 && j == 0)) {\n                        vec2 cell = texelFetch(iChannel0, iFragCoord + ivec2(i, j), 0).xy;\n                        if (cell.y > 0.5) {\n                            // The distance is 1 if the cell is on an edge and sqrt(2) if it is on a corner\n                            float dist = (i == 0 || j == 0) ? cell.x + 1.0 : cell.x + SQRT_2;\n                            closest = !foundCandid ? dist : min(closest, dist);\n\n                            // Cells on the edges are always the closest so we might be able to break out early\n                            if (i == 0 || j == 0) break;\n\n                            foundCandid = true;\n                        }\n\n                        // Update filled status of the current cell\n                        fragColor.y = max(fragColor.y, cell.y);\n                    }\n                }\n            }\n\n            // Store closest distance if one has been found\n            if (foundCandid) fragColor.x = closest;\n        }\n    }\n\n    if (iFrame == 0 || bufferResized() || !textureLoaded(iChannel1)) {\n        // Scale texture and read from the alpha (opacity) channel\n        fragColor.x = 0.0;\n        fragColor.y = round(texture(iChannel2, fragCoord / iResolution.xy * vec2(0.5, 2.0)).w);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(iChannelResolution[0].xy, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}