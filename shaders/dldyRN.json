{
    "Shader": {
        "info": {
            "date": "1698965594",
            "description": "function plotter for my own purposes of debugging... thought it might be useful to everyone else too.  was a fun project ~30 minutes.",
            "flags": 0,
            "hasliked": 0,
            "id": "dldyRN",
            "likes": 7,
            "name": "a function plotter",
            "published": 3,
            "tags": [
                "visualizer",
                "function",
                "plotter"
            ],
            "usePreview": 0,
            "username": "kp1197",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "const float Y_RANGE = 2.0;\nconst float MAJOR_TICKS = 1.0;\nconst float MINOR_TICKS = 0.25;\n\n\n// put your own functions here\n\n// green\nfloat f1(float x) {\n    return pow(x,2.);\n}\n\n// orange\nfloat f2(float x) {\n    return -pow(x,2.);\n}\n\n// blue\nfloat f3(float x) {\n    return sin(x);\n}\n\nvec2 to_plot_space(vec2 p) {\n    return (Y_RANGE * iResolution.x/iResolution.y ) * 2.0 * (p - vec2(0.5, 0.5 * iResolution.y/iResolution.x));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\n    // Normalized pixel coordinates\n    vec2 uv = fragCoord/iResolution.xx;\n    uv = to_plot_space(uv);\n    \n    // Interactivity\n    vec2 mouse_uv = iMouse.xy/iResolution.xx;\n    mouse_uv = to_plot_space(mouse_uv);\n    uv = uv - step(1.,iMouse.z) * mouse_uv;\n\n    float edge_distance = 0.01 * Y_RANGE;\n    float smoothstep_left_edge = 1. - edge_distance;\n    \n    float x_axis = smoothstep(smoothstep_left_edge, 1.0, 1.-abs(uv.y));\n    float y_axis = smoothstep(smoothstep_left_edge, 1.0, 1.-abs(uv.x));\n    \n    float major_tick_length = 6. * edge_distance;\n    float major_x_ticks = (1.-step(major_tick_length, abs(uv.y))) * smoothstep(smoothstep_left_edge, 1.0, 1.-abs(mod(uv.x, MAJOR_TICKS)));\n    float major_y_ticks = (1.-step(major_tick_length, abs(uv.x))) * smoothstep(smoothstep_left_edge, 1.0, 1.-abs(mod(uv.y, MAJOR_TICKS)));\n    \n    float minor_tick_length = 2. * edge_distance;\n    float minor_x_ticks = (1.-step(minor_tick_length, abs(uv.y))) * smoothstep(smoothstep_left_edge, 1.0, 1.-abs(mod(uv.x, MINOR_TICKS)));\n    float minor_y_ticks = (1.-step(minor_tick_length, abs(uv.x))) * smoothstep(smoothstep_left_edge, 1.0, 1.-abs(mod(uv.y, MINOR_TICKS)));\n    \n    float grid = smoothstep(smoothstep_left_edge, 1.0, 1.-min(mod(uv.x, MINOR_TICKS), mod(uv.y, MINOR_TICKS)));\n    \n    float plot1 = smoothstep(smoothstep_left_edge, 1.0, 1. - abs(uv.y - f1(uv.x)));\n    float plot2 = smoothstep(smoothstep_left_edge, 1.0, 1. - abs(uv.y - f2(uv.x)));\n    float plot3 = smoothstep(smoothstep_left_edge, 1.0, 1. - abs(uv.y - f3(uv.x)));\n\n    \n    float i = 0.;\n    i = max(x_axis, i);\n    i = max(y_axis, i);\n    i = max(major_x_ticks, i);\n    i = max(major_y_ticks, i);\n    i = max(minor_x_ticks, i);\n    i = max(minor_y_ticks, i);\n    \n    \n    vec3 chart_color = vec3(i);\n    vec3 grid_color = grid * vec3(0.2, 0.2, 0.2);\n    vec3 plot_color_1 = plot1 * vec3(0.1, 0.9, 0.1);\n    vec3 plot_color_2 = plot2 * vec3(0.9, 0.9, 0.1);\n    vec3 plot_color_3 = plot3 * vec3(0.1, 0.1, 0.9);\n    \n    vec3 color = vec3(0.);\n    color = max(color, chart_color);\n    color = max(color, grid_color);\n    color = max(color, plot_color_1);\n    color = max(color, plot_color_2);\n    color = max(color, plot_color_3);\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}