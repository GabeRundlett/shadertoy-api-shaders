{
    "Shader": {
        "info": {
            "date": "1668796715",
            "description": "this aproach looks at the direct neighbours 3x3 kernel and looks who has the least distance\nthis way we can have more cells, but their movement is one cell at max\nthe possible movement corresponds to the kernel size",
            "flags": 0,
            "hasliked": 0,
            "id": "msXXDH",
            "likes": 10,
            "name": "vonoroi noise neighbours",
            "published": 3,
            "tags": [
                "pixels"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 205
        },
        "renderpass": [
            {
                "code": "\nfloat f_n_rand(\n    vec2 o\n){\n    return fract(sin(o.x*331.5543+o.y*173.32112)*11.23*3232.33 + o.x*o.y);\n}\nfloat f_n_dist(\n    vec2 o_pix_coo_nor, \n    vec2 o_pix_coo_nor_ds,\n    float n_ds\n){\n    float n_rand = f_n_rand(o_pix_coo_nor_ds);\n    float n_t = iTime*20.;\n    float n_rand2 = sin(n_rand*n_t);\n    float n_rand3 = cos(n_rand*n_t);\n    vec2 o_half = vec2(1./(iResolution.x/n_ds));\n    vec2 o_rand = vec2(\n        o_half.x*(n_rand2),\n        o_half.x*(n_rand3)\n        );\n    float n_dist = length(o_pix_coo_nor_ds+o_half+o_rand - o_pix_coo_nor);\n    return n_dist;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_pix_coo_nor = ((fragCoord.xy) - (iResolution.xy)*0.5) /(iResolution.y);\n    vec2 o_mou_coo_nor = ((iMouse.xy) - (iResolution.xy)*0.5) /(iResolution.y);\n    \n    float n_new_pixel_size = 1.0;//(99.*o_mou_coo_nor.x);\n    \n    float [] a_n_new_pixel_size = float[] (1.,2.,3.,4.,9.,15.,33.,66., 99.);\n    for(float n_i = 0.0; n_i < float(a_n_new_pixel_size.length()); n_i+=1.){\n        if(o_pix_coo_nor.x > (1./float(a_n_new_pixel_size.length()))*n_i-0.5){\n            n_new_pixel_size = a_n_new_pixel_size[int(n_i)];\n        \n        }\n    }\n    \n    vec2 o_fragCoord_ds = floor(fragCoord / n_new_pixel_size);\n    vec3 o_iRes_ds = (iResolution / n_new_pixel_size);\n    vec2 o_pix_coo_nor_ds = ((o_fragCoord_ds.xy) - (o_iRes_ds.xy * 0.5)) / o_iRes_ds.y; \n    \n    float n_dist = f_n_dist(o_pix_coo_nor, o_pix_coo_nor_ds, n_new_pixel_size);\n    \n    vec2 o_kernel = vec2(3.);\n    float n_dist_min = 1.;\n    for(float n_i_kernel = 0.0; n_i_kernel<(o_kernel.x*o_kernel.y); n_i_kernel+=1.){\n        float n_x_k = mod(n_i_kernel, o_kernel.x);\n        float n_y_k = floor(n_i_kernel / o_kernel.x);\n        n_x_k-=1.;\n        n_y_k-=1.;\n        \n        vec2 o_fragCoord_ds2 = floor((fragCoord) / n_new_pixel_size) + vec2(n_x_k, n_y_k);\n        vec2 o_pix_coo_nor_ds2 = ((o_fragCoord_ds2.xy) - (o_iRes_ds.xy * 0.5)) / o_iRes_ds.y; \n    \n        float n_dist2 = f_n_dist(\n            o_pix_coo_nor,\n            o_pix_coo_nor_ds2,\n            n_new_pixel_size\n        );\n        n_dist_min = min(n_dist_min, n_dist2);\n        fragColor = mix(fragColor, vec4(n_dist2), 0.2);\n\n    }\n    float n_max_dist = sqrt(pow(iResolution.y/n_new_pixel_size, 2.));\n    fragColor = vec4(n_dist_min*n_max_dist);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}