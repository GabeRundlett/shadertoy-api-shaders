{
    "Shader": {
        "info": {
            "date": "1578290783",
            "description": "Lerp between spheres ",
            "flags": 0,
            "hasliked": 0,
            "id": "WlcGR2",
            "likes": 3,
            "name": "Lerp between spheres ",
            "published": 3,
            "tags": [
                "raymarching",
                "imi202001"
            ],
            "usePreview": 0,
            "username": "tomoe",
            "viewed": 384
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\nmat3 rotX(float t) {\n    return mat3(\n        1.0, 0.0, 0.0,\n        0.0, cos(t), sin(t),\n        0.0, - sin(t), cos(t)\n    );\n}\nmat3 rotY(float t) {\n    return mat3(\n        cos(t), 0.0, sin(t),\n        0.0, 1.0, 0.0,\n        - sin(t), 0.0, cos(t)\n    );\n}\nmat3 rotZ(float t) {\n    return mat3(\n        cos(t), sin(t), 0.0,\n        - sin(t), cos(t), 0.0,\n        0.0, 0.0, 1.0\n    );\n}\nfloat sphereSDF(vec3 p, vec3 cent, float rad) {\n    return distance(p, cent) - rad;\n}\nfloat sceneSDF(vec3 p){\n    float t = 0.5* iTime;\n    p *= rotY(t) * rotX(t) * rotZ(t);\n    float dist = 1.0;\n    for (float i = 0.0; i < 6.0; i++){\n        vec3 cent = vec3(cos(2.0 * PI * i / 6.0), sin(2.0 * PI * i / 6.0), 0.0);\n        dist = min(dist, sphereSDF(p, cent, 0.2));\n    }\n    return mix(dist, sphereSDF(p, vec3(0.0), 1.), abs(mod(t, 2.0) - 1.0));\n}\nvec3 gradSDF(vec3 p) {\n    float d = 0.0001;\n    return normalize(vec3(\n        sceneSDF(p + vec3(d, 0.0, 0.0)) - sceneSDF(p + vec3(-d, 0.0, 0.0)),\n        sceneSDF(p + vec3(0.0, d, 0.0)) - sceneSDF(p + vec3(0.0, - d, 0.0)),\n        sceneSDF(p + vec3(0.0, 0.0, d)) - sceneSDF(p + vec3(0.0, 0.0, - d))\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    // fragment position\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    // camera\n    vec3 cPos = vec3(0.0, 0.0, 2.0);\n    vec3 cDir = vec3(0.0, 0.0, - 1.0);\n    vec3 cUp = vec3(0.0, 1.0, 0.0);\n    vec3 cSide = cross(cDir, cUp);\n    float targetDepth = 1.0;\n    \n    // light\n    vec3 lightDir = vec3(0.0, 0.0, 1.0);\n    // lightDir *= rotY(u_time);\n\n    // ray\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n    \n    // marching loop\n    vec3 rPos = cPos;\n    for(int i = 0; i < 40; i++ ) {\n        rPos += ray * sceneSDF(rPos);\n    }\n    \n    // collision detection\n    if (abs(sceneSDF(rPos)) < 0.001) {\n        vec3 normal = gradSDF(rPos);\n        float diff = clamp(dot(lightDir, gradSDF(rPos)), 0.1, 1.0);\n        fragColor = vec4(vec3(diff), 1.0);\n    } else {\n        fragColor = vec4(vec3(0.0), 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}