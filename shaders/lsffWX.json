{
    "Shader": {
        "info": {
            "date": "1499311179",
            "description": "Featuring beats by SWEEDIN:\nhttps://soundcloud.com/sethweedin\n\nInspired by:\nhttps://assets.razerzone.com/eedownloads/desktop-wallpapers/RazerChroma_1920x1080.png\n\nDon't look at the code, its a mess <3",
            "flags": 32,
            "hasliked": 0,
            "id": "lsffWX",
            "likes": 21,
            "name": "Chroma Beats",
            "published": 3,
            "tags": [
                "music",
                "audio",
                "visualizer",
                "soundcloud",
                "buffers",
                "razer"
            ],
            "usePreview": 0,
            "username": "StanRee",
            "viewed": 3323
        },
        "renderpass": [
            {
                "code": "vec3 HUEtoRGB(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0/3.0, 1.0/3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat t = iTime*10.; \n\tfloat st = sin(t)*.5+.5; \n\n    // this is where the set up happens, 2/10 \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 l = fragCoord;\n\tvec3 Color = HUEtoRGB(vec3(uv.x*.92,1.0,1.0)); \n\tvec3 HeightCached = Color; \n\tfloat height = (1.0-mod(l.x * 1., 10.))*1000000.;\n\theight = clamp(height, 0., 1.); \n\tColor = Color * height; \n\n    // git that fft boi\n\tfloat textureSample = texture(iChannel1, vec2(uv.x*.5+.2,.15)).r;\n\tfloat ft = textureSample; \n\n\tif((uv.y*(abs(uv.x-.5)+.9))>textureSample) textureSample=0.;\n\n    // hotness part II\n\tfloat fff = clamp(textureSample *100., 0., 1.0);\n\tfloat f2 = 0.;\n\tconst int amt = 50;\n\t\n    // oooff yesss lets do 100 million calculations b/c blur is pretty\n\tfor(int x = 0; x<amt; x++){\n\t\tfloat uC = uv.x*.5 + .15 * ((float(x) - float(amt)*.5)/(float(amt)*.5));\n\t\tf2 += texture(iChannel1, vec2(uC*.5 + .2, 0.)).r *1. ;\t\n\t}\n\n    //rade the grad w/ the invh yo\n\tf2/=float(amt); \n\tvec3 grad; vec3 rade = HeightCached * (f2-(1.0-(1.0-uv.y))+.05);\n\trade = clamp(rade, 0.,1.); \n\tvec3 invh = (HeightCached*uv.y-.5)*.8; \n\tinvh = clamp(invh*height, 0., 1.0);\n    \n    //sandwich it all togather, om nom. \n\tvec3 glow = Color*uv.y*.25;\n\tvec3 rubyr = texture(iChannel3,uv).rgb; ;\n\tvec3 ruby = vec3(rubyr.x + rubyr.y); \n\tvec3 lines = HeightCached* (ruby); \n\tlines = clamp(lines,0.,1.); \n\tgrad = clamp(lines,0.,1.);\n\tfragColor = vec4(lines+glow+grad+invh+rade, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 l = fragCoord;\n  \n   \t// vec3 h = HUEtoRGB(vec3(uv.x*.92, 1.0, 1.0)); \n \t//   vec3 hh = vec3(1.0); \n \t//   h *= clamp((mod(uv.x*149.001 , 2.)-1.7)*100. , 0., 1.); \n\t//  h = vec3(1.0);\n    float ll; \n    // ll = clamp(ll, 0., 1.);\n    ll= abs(fract(l.x *.1) - .5)* 2.0;\n    ll = clamp(ll, 0., 1.); \n    float bb = clamp((1.0- mod(l.x * 1., 10.)) * 2.51, 0. , 1.);//ll \n \tll = clamp(ll, 0., 1.); \n\t// ll = 1.;\n\t// h = vec3(1.0); \n\t//h = h *ll; \n    \n    float f = texture(iChannel1, vec2(uv.x*.5 + .2, .15)).r;\n\tfloat ft = f; \n    float uvy  = (uv.y * (abs(uv.x-.5)+.9));\n \tif(uvy>f)\n        f = 0.;\n    \n \tfloat fff = clamp(1.0-uvy/f, 0., 1.0);\n    float hard = clamp(f*10., 0., 1.0);\n\t// if((uv.y * (abs(uv.x-.5)+.9)) < f * .5)\n\t//     fff += bb; \n\t//float f2 = 0.;\n\t// const int amt = 50;\n\t//int x ; \n\t//for(x = 0; x < amt; x++)\n\t//{ float uC = uv.x*.5 + .15 * ((float(x) - float(amt)*.5)/(float(amt)*.5));\n\t//     f2 += texture(iChannel1, vec2(uC*.5 + .2, 0.)).r *1. ;}\n\t//f2/=float(amt); \n\t//vec3 grad = hh * (f2 - uv.y+.05);// * (1.0 - uv.y)* .25; \n\t//vec3 invh = (hh * uv.y -.5) * .8; \n\t//invh = clamp(invh *ll, 0., 1.0); \n \t//vec3 hmm =  h * uv.y* .25;\n \tvec3 lines = vec3(bb * hard);\n    \n    vec3 ff = texture(iChannel0, uv).xyz;\n    if(lines.x > ff.x){        \n    ff.x = lines.x;            \n    ff.x =lines.x;          \n    }\n    else\n        ff.x -=0.0614; \n\t//ff.x*=0.;\n    \n\t//if(ff.x < .955)\n\t\t//   ff-=1.; \n\t\t// ff *= 0.; \n    \n    vec3 glow = vec3(1.) *ll * fff;\n    fragColor = vec4(lines*0.0 + glow,1.0);   \n \t//  vec3 lines = texture(iChannel0, uv).xyz;\n    \n    \n   // vec3 glow = vec3(1.) *ll * fff;\n    float t =iTime;\n    vec3 tex = texture(iChannel2, uv * vec2(4.,.25)+ vec2(0.,-t*.1)).xxx ;\n    vec3 tex2 = texture(iChannel2, uv * vec2(4.,.25)+ vec2(0.,t*.0525)).xxx ;\n\n    tex *= tex2; \n    vec3 rang = glow *1.03*01. -tex;    \n   // vec3 hmm =  hard * uv.y* .25;\n     fragColor = vec4(clamp(rang, 0., 1.)*.25 + lines,1.0);\n  //  fragColor = vec4(vec3(clamp(ff.x,0.,1.), clamp(rang.x,0.,1.), 1.), 1.0); \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 f = texture(iChannel0, uv).xyz -.01;\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n    fragColor.rgb = f; \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}