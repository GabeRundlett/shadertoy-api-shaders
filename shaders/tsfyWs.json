{
    "Shader": {
        "info": {
            "date": "1585829457",
            "description": "Combining the best of both worlds. Use mouse to distort the fractal.",
            "flags": 32,
            "hasliked": 0,
            "id": "tsfyWs",
            "likes": 13,
            "name": "Mandelbrot fluid",
            "published": 3,
            "tags": [
                "fractal",
                "fluid"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 512
        },
        "renderpass": [
            {
                "code": "vec2 sqr(vec2 x)\n{\n    return vec2(x.x*x.x - x.y*x.y, 2.*x.x*x.y); \n}\n\nfloat mandelbrot(vec2 x)\n{\n    vec2 z = vec2(0), dz = vec2(0);\n    for(int i = 0; i < 128; i++)\n    {\n        dz = 2.*vec2(dot(z, dz*a.yz), dot(z, dz.yx)) + a.yx;\n        z = sqr(z) + x;\n        if(length(z)>32.) break;\n    }\n    return 0.5*sqrt(dot(z,z)/dot(dz,dz))*log(dot(z,z));\n}\n\nvoid mainImage( out vec4 U, in vec2 p )\n{\n    vec2 uv = pixel(ch0, p).zw;\n    vec2 mouse = (iMouse.z > 0.)?iMouse.xy:size*0.5;\n\t//if(all(lessThan(p, size.xx*0.25))) uv = pixel(ch0, 0.1*p+iMouse.xy).zw;\n   \n    \n    U = sin(vec4(1.,1.2,1.3,4)*log(0.0001 + 0.1*mandelbrot(uv)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//definitions\n#define size iResolution.xy\n#define pixel(a, p) texture(a, vec2(p)/vec2(size))\n#define texel(a, p) texelFetch(a, ivec2(p), 0)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n#define PI 3.14159265\n#define dt 1.\n\nconst vec3 a = vec3(0, 1, -1);\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 U, in vec2 p )\n{\n    //advection\n\tU = pixel(ch0, p - dt*pixel(ch0, p).xy); \n    //pressure gradient\n    U.xy -= dt*0.25*vec2(pixel(ch1, p+a.yx).x - pixel(ch1, p+a.zx).x,\n                      pixel(ch1, p+a.xy).x - pixel(ch1, p+a.xz).x);\n    \n    \n    \n    //border\n    float dx = min(p.x, size.x - 1. - p.x);\n    float dy = min(p.y, size.y - 1. - p.y);\n    U.xy -= U.xy*vec2(exp(-0.5*dy*dy),exp(-0.5*dx*dx));\n    float d = min(dx,dy);\n    U.xy -= U.xy*exp(-d*d);\n    \n    if(iFrame < 1)\n    {\n        vec2 dx = p - size*0.5;\n        U.xy = exp(-0.0005*dot(dx,dx))*vec2(sin(iTime),cos(iTime));\n        U.zw = (p - size*vec2(2.,0.5))/size.x;\n    }\n    \n    if(iMouse.z>0.)\n    {\n        vec2 dx = p - iMouse.xy;\n        U.xy +=\t0.1*exp(-0.01*dot(dx,dx))*vec2(sin(iTime),cos(iTime));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 U, in vec2 p )\n{\n    //advection\n    U = pixel(ch1, p - dt*pixel(ch0, p).xy); \n    //velocity divergence \n    U.x -= dt*0.25*(pixel(ch0, p+a.yx).x - pixel(ch0, p+a.zx).x + \n                    pixel(ch0, p+a.xy).y - pixel(ch0, p+a.xz).y);\n    if(iFrame < 1)\n    {\n        U.x = 0.;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 U, in vec2 p )\n{\n    vec2 uv = (p - size*vec2(2.,0.5))/size.x;\n    //advection\n\tU = pixel(ch0, p - dt*pixel(ch0, p).xy); \n    //pressure gradient\n    U.xy -= dt*0.25*vec2(pixel(ch1, p+a.yx).x - pixel(ch1, p+a.zx).x,\n                      pixel(ch1, p+a.xy).x - pixel(ch1, p+a.xz).x);\n    \n    \n    \n    //border\n    float dx = min(p.x, size.x - 1. - p.x);\n    float dy = min(p.y, size.y - 1. - p.y);\n    U.xy -= U.xy*vec2(exp(-0.5*dy*dy),exp(-0.5*dx*dx));\n    float d = min(dx,dy);\n    U.xy -= U.xy*exp(-d*d);\n    \n    U.zw = mix(uv, U.zw, 0.995);\n    \n    if(iFrame < 1)\n    {\n        vec2 dx = p - size*0.5;\n        U.xy = exp(-0.0005*dot(dx,dx))*vec2(sin(iTime),cos(iTime));\n        U.zw = uv;\n    }\n    \n    if(iMouse.z>0.)\n    {\n        vec2 dx = p - iMouse.xy;\n        U.xy +=\t0.1*exp(-0.01*dot(dx,dx))*vec2(sin(iTime),cos(iTime));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 U, in vec2 p )\n{\n    //advection\n    U = pixel(ch1, p - dt*pixel(ch0, p).xy); \n    //velocity divergence \n    U.x -= dt*0.25*(pixel(ch0, p+a.yx).x - pixel(ch0, p+a.zx).x + \n                 pixel(ch0, p+a.xy).y - pixel(ch0, p+a.xz).y);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}