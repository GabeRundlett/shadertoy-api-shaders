{
    "Shader": {
        "info": {
            "date": "1702656051",
            "description": "Experimental mashup of different effects and ideas of mine and others.\n\nbased on:\nFractal: https://shadertoy.com/view/dllcDM\nNeurons: https://www.shadertoy.com/view/dlGfWV\nDroste: https://www.shadertoy.com/view/MtGSzV",
            "flags": 32,
            "hasliked": 0,
            "id": "DtVBWd",
            "likes": 12,
            "name": "[phreax] neural programming",
            "published": 3,
            "tags": [
                "2d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "phreax",
            "viewed": 332
        },
        "renderpass": [
            {
                "code": "// Fork of \"N,N-Dimethyltryptamin Fade 1\" by POSTHELIOS. https://shadertoy.com/view/DltBD8\n// 2023-12-15 00:18:30\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 col = texture(iChannel0, uv).rgb;\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Fork of \"[phreax] ordered chaos\" by phreax. https://shadertoy.com/view/dllcDM\n// 2023-12-15 01:00:30\n\n\n\n#define R1 0.15\n#define R2 1.0\n#define TAU 6.28318530718\n#define SIN(x) (.5+.5*sin(x))\n\nvec3 pal(float t) {\n\n    vec3 a = vec3(.6);\n    vec3 b = vec3(1.);\n    vec3 c = vec3(.5);\n    vec3 d = vec3(0.161,1.000,0.902);\n    \n    //d = vec3(0.216,0.14,0.545);\n    return a + b*cos(6.283*(c*t+d));\n}\n\n\nvec2 drosteSpiral(in vec2 uv, out vec2 zOut) {\n    //math from www.josleys.com/article_show.php?id=82\n\n    // cartesian coordinates -> z coords, (r, theta) = ( sqrt(x*x + y*y), atan(y/x) )\n    vec2 z = vec2(length(uv),atan(uv.y,uv.x));\n    // transform z-> log(z/R1)\n    z.x = log(z.x/R1);\n    //z.x += .1*iTime;\n    // ratio for the radia\n    float ratio = log(R2/R1);\n    // alpha = atan(log(r2/r1)/2pi)\n    float alpha = atan(ratio, TAU);\n    // lets make a rotation matrix\n    // remember that GLSL is right handed...\n    mat2 digamma = mat2(cos(alpha), sin(alpha),\n                        -sin(alpha), cos(alpha));\n    // Rotate\n    vec2 beta = digamma * z;\n    // Still don't get why we are adjusting this by the alpha... Looking at the math, this seems to be the isolation of\n    // the complex plane without the rotation in the form of e^ia since B = Fe^ia, e^ia = B/F...\n    beta = beta/cos(alpha);\n    // This is where we are duplicating, but I still don't understand how...\n    // Ok, I think I got it - we are shifting by the width of the transformed strip\n    // where the R2 radius circle ends up being a line on log(r2/r1). So we want to move up until we hit that width,\n    // then start again\n    beta.x = mod(beta.x, log(R2/R1));\n    // And lets twist this bad boy with the exponentiation and convert it back to cartesian coords.\n    // Polar -> Cartesian: (x,y) = r*(cos(theta), sin(theta))\n    // And also scale back by R1\n    beta = R1 * exp(beta.x) * vec2(cos(beta.y), sin(beta.y));\n    \n    zOut = z;\n    return beta;\n}\n\n\n\n// chebyshev distance\nfloat d2(vec2 v, float k) {\n    return pow(pow(abs(v.x), k)+pow(abs(v.y), k), 1./k);\n}\n\nmat2 rot(float x) {\n    return mat2(cos(x), sin(x), -sin(x), cos(x));\n}\n\nfloat neurons(vec2 uv) {\n\n    float t = iTime*2.;\n    \n    vec2 n = vec2(0),q;\n    vec2 N = vec2(0);\n    vec2 p = uv + sin(t*0.1)/10.;\n    float S = 5.;\n    mat2 m = rot(1. - 0.0001);\n\n    for(float j=0.;j++<30.;){\n      p*=m;\n      n*=m;\n      q=p*S+j+n+t;\n      n+=sin(q+iMouse.x*0.001);\n      N+=cos(q+iMouse.y*0.001)/S;\n      S*=1.15;\n      \n    }\n    \n    float v = pow((N.x + N.y + 0.1)+.0001/length(N), 2.1);\n    \n   // v = pow(v*1.5, 2.);\n    return v;\n\n\n}\n\nvec3 fractalNeuron(vec2 uv, float N, float n, float l) {\n    \n\n    vec2 uv0 = uv;\n    vec2 uv2 = uv;\n\n    vec3 col = vec3(0);\n    \n    for(float i=0.; i<N; i++) {\n\n        uv = fract(uv*(1.9))-.5;\n        uv2 = fract(uv2*(1.+.5*sin(iTime*.1)))-.5;\n        \n        vec3 c = pal(length(uv0) + iTime*.4 + i*.9);\n        \n        \n        float d = (d2(uv, 1.2)+0.05/n+length(uv2)*exp(-length(uv0)));\n        \n        d = abs(.1*d+sin(d*(8.+2.*n))/10.)+0.001/n;\n        d = l*.1*pow((0.02)/d, 1.2) + smoothstep(.05, .0, d);\n   \n        d = max(0., d);\n\n        col += d*c;\n    \n    }\n    return col;\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2. - iResolution.xy)/iResolution.y;\n    \n    float exp_droste_zoom = exp(-mod(iTime*.5, 10.));\n  \n    float n1 = neurons(uv);\n    vec2 zSpiral;\n    uv = drosteSpiral(uv*exp_droste_zoom, zSpiral);\n    \n    uv += vec2(.1, -.2)*sin(iTime*.2);\n    uv *= rot(iTime*.3);\n    float n2 = neurons(uv);\n    \n    vec3 colN = fractalNeuron(uv, 6., n1, 1.);\n    colN = mix(colN, fractalNeuron(uv, 6., n2, 1.),.5)*1.5;\n    \n    vec2 uv0 = uv;\n    vec2 uv2 = uv;\n    \n    vec3 colBg = fractalNeuron(uv, 6., 1., 0.);\n\n    \n    fragColor = vec4(mix(colN, colBg, mix(.2, .4*smoothstep(0.4, .5, length(uv)), .4)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}