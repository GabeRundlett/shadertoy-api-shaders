{
    "Shader": {
        "info": {
            "date": "1553324397",
            "description": "Nothing special about this. I might continue to work on this shader.",
            "flags": 0,
            "hasliked": 0,
            "id": "WsBXWR",
            "likes": 6,
            "name": "ISOMETRIC CITY ver0.1",
            "published": 3,
            "tags": [
                "isometric"
            ],
            "usePreview": 1,
            "username": "yasuo",
            "viewed": 478
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    vec2 q = abs(p);\n\n    float h = clamp( (-2.0*ndot(q,b) + ndot(b,b) )/dot(b,b), -1.0, 1.0 );\n    float d = length( q - 0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( q.x*b.y + q.y*b.x - b.x*b.y );\n\n}\n\n// modefied version of the sdTriangle\nfloat sdQuads( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p3 )\n{\n    vec2 e0 = p1-p0, e1 = p2-p1, e2 = p3-p2, e3 = p0-p3;\n    vec2 v0 = p -p0, v1 = p -p1, v2 = p -p2, v3 = p -p3;\n\n    vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n    vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n    vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    vec2 pq3 = v3 - e3*clamp( dot(v3,e3)/dot(e3,e3), 0.0, 1.0 );\n    \n    float s = sign( e0.x*e3.y - e0.y*e3.x );\n    vec2 d = min( min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                 \t   vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) )),\n                       vec2( dot( pq3, pq3 ), s*(v3.x*e3.y-v3.y*e3.x) ));\n\n    return -sqrt(d.x)*sign(d.y);\n}\n\nvec3 isometricCube(vec2 p, vec2 pos, vec2 size, float h, vec3 col, vec3 topCol, vec3 lWallCol, vec3 rWallCol){\n    float d = sdRhombus(p+pos-vec2(0.0,h),size);\n    col = mix( col, topCol, smoothstep(0.01,0.0,d));\n    d = sdQuads(p+pos,vec2(-size.x,0.0),vec2(-size.x,h),vec2(0.0,h-size.y),vec2(0.0,-size.y));\n    col = mix( col, lWallCol, smoothstep(0.01,0.0,d));\n    d = sdQuads(p+pos,vec2(0.0,-size.y),vec2(0.0,h-size.y),vec2(size.x,h),vec2(size.x,0.0));\n    col = mix( col, rWallCol, smoothstep(0.01,0.0,d));\n    return col;\n}\n\nvec3 isometricCar(vec2 p, vec3 col) {\n    vec2 size = vec2(0.2,0.1);\n    float t = iTime*2.0;\n    vec2 pos = (vec2(-0.2,0.1)*mod(t,21.0))-vec2(-2.2,1.1);\n    float h = 0.1;\n    \n    col = isometricCube(p+pos,vec2(-0.1,-0.0),size, h, col, vec3(0.2), vec3(0.7), vec3(0.7));    \n    col = isometricCube(p+pos,vec2(-0.3,0.1),size, h, col, vec3(0.2), vec3(0.7), vec3(0.5));\n    col = isometricCube(p+pos,vec2(-0.17,-0.07),size, h, col, vec3(0.2), vec3(0.7), vec3(0.5));\n    return col;\n}\n\nfloat animateVal(float val) {\n    return sin(iTime*2.0+val*3.0)*0.03;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 col = vec3(0.9);\n    vec2 size = vec2(0.3,0.15);\n    vec2 offsetPos = vec2(-0.1,0.0);\n    \n    // buildings\n    col = isometricCube(p+vec2(1.1,-0.9),offsetPos,size, 0.1, col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(0.3,-0.9),offsetPos,size, 0.1, col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(0.7,-0.7),offsetPos,size, 0.5, col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(-0.9,-0.7),offsetPos,size, 0.3, col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(-0.5,-0.5),offsetPos,size, 0.2, col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(-0.1,-0.3),offsetPos,size, 0.5, col, vec3(0.35), vec3(0.8), vec3(0.6));  \n    col = isometricCube(p+vec2(-0.9,0.1),offsetPos,size, 0.15, col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(-0.9,0.1),offsetPos,size*0.5, 0.6, col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(-1.3,0.3),offsetPos,size, 0.4, col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(-1.7,0.5),offsetPos,size, 0.1, col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    \n    // car\n    col = isometricCar(p,col);\n    \n    // buildings\n    col = isometricCube(p+vec2(1.4,-0.4),offsetPos,size, 0.3, col, vec3(0.4), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(1.4,-0.4),offsetPos,size*0.5, 0.3, col, vec3(0.4), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(1.8,-0.2),offsetPos,size, 0.7, col, vec3(0.4), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(0.5,0.0),offsetPos,size, 0.3, col, vec3(0.4), vec3(0.8), vec3(0.6)); \n    \n    col = isometricCube(p+vec2(0.9,0.2),offsetPos,size, 0.5, col, vec3(0.4), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(1.3,0.4),offsetPos,size, 0.4, col, vec3(0.4), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(1.7,0.6),offsetPos,size, 0.2, col, vec3(0.4), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(1.7,0.6),offsetPos,size*0.5, 0.3, col, vec3(0.4), vec3(0.8), vec3(0.6)); \n    \n    col = isometricCube(p+vec2(0.1,0.2),offsetPos,size, 0.2, col, vec3(0.4), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(0.1,0.1),offsetPos,size*0.5, 0.1, col, vec3(0.4), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(-0.3,0.4),offsetPos,size, 0.6, col, vec3(0.4), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(-0.7,0.6),offsetPos,size, 0.15, col, vec3(0.4), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(-1.1,0.8),offsetPos,size, 0.3, col, vec3(0.4), vec3(0.8), vec3(0.6)); \n    \n    // chars\n    float charH = 0.06;\n    col = isometricCube(p+vec2(0.9,0.52),offsetPos,size*0.3, charH+animateVal(0.1), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(0.8,0.57),offsetPos,size*0.3, charH+animateVal(0.15), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(0.5,0.32),offsetPos,size*0.3, charH+animateVal(0.2), col, vec3(0.35), vec3(0.8), vec3(0.6));\n    col = isometricCube(p+vec2(0.6,0.37),offsetPos,size*0.3, charH+animateVal(0.25), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(0.7,0.42),offsetPos,size*0.3, charH+animateVal(0.3), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(0.6,0.47),offsetPos,size*0.3, charH+animateVal(0.35), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(0.5,0.52),offsetPos,size*0.3, charH+animateVal(0.4), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(0.6,0.57),offsetPos,size*0.3, charH+animateVal(0.45), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(0.7,0.62),offsetPos,size*0.3, charH+animateVal(0.5), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(0.4,0.37),offsetPos,size*0.3, charH+animateVal(0.55), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(0.3,0.42),offsetPos,size*0.3, charH+animateVal(0.6), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    \n    col = isometricCube(p+vec2(0.1,0.52),offsetPos,size*0.3, charH+animateVal(0.1), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(0.2,0.57),offsetPos,size*0.3, charH+animateVal(0.15), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(0.3,0.62),offsetPos,size*0.3, charH+animateVal(0.2), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(0.4,0.67),offsetPos,size*0.3, charH+animateVal(0.25), col, vec3(0.35), vec3(0.8), vec3(0.6));\n    col = isometricCube(p+vec2(0.5,0.72),offsetPos,size*0.3, charH+animateVal(0.3), col, vec3(0.35), vec3(0.8), vec3(0.6));\n    col = isometricCube(p+vec2(0.2,0.67),offsetPos,size*0.3, charH+animateVal(0.35), col, vec3(0.35), vec3(0.8), vec3(0.6));\n    col = isometricCube(p+vec2(0.1,0.72),offsetPos,size*0.3, charH+animateVal(0.4), col, vec3(0.35), vec3(0.8), vec3(0.6));\n    col = isometricCube(p+vec2(-0.2,0.67),offsetPos,size*0.3, charH+animateVal(0.45), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(-0.1,0.72),offsetPos,size*0.3, charH+animateVal(0.5), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(0.0,0.77),offsetPos,size*0.3, charH+animateVal(0.55), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(0.1,0.82),offsetPos,size*0.3, charH+animateVal(0.6), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(0.2,0.87),offsetPos,size*0.3, charH+animateVal(0.65), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    \n    col = isometricCube(p+vec2(-0.4,0.77),offsetPos,size*0.3, charH+animateVal(0.1), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(-0.3,0.82),offsetPos,size*0.3, charH+animateVal(0.15), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(-0.2,0.87),offsetPos,size*0.3, charH+animateVal(0.2), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(-0.1,0.92),offsetPos,size*0.3, charH+animateVal(0.25), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    \n    col = isometricCube(p+vec2(-0.2,0.97),offsetPos,size*0.3, charH+animateVal(0.3), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(-0.3,1.02),offsetPos,size*0.3, charH+animateVal(0.35), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    \n    col = isometricCube(p+vec2(0.0,0.97),offsetPos,size*0.3, charH+animateVal(0.4),  col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(-0.5,0.82),offsetPos,size*0.3, charH+animateVal(0.45), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(-0.6,0.87),offsetPos,size*0.3, charH+animateVal(0.5), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(-0.7,0.92),offsetPos,size*0.3, charH+animateVal(0.55), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(-0.6,0.97),offsetPos,size*0.3, charH+animateVal(0.6), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    col = isometricCube(p+vec2(-0.5,1.02),offsetPos,size*0.3, charH+animateVal(0.65), col, vec3(0.35), vec3(0.8), vec3(0.6)); \n    \n    // results\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}