{
    "Shader": {
        "info": {
            "date": "1551109957",
            "description": "per pixel particles with basic velocity transfer, also switched up the particle structure a bit to support an extra float attribute 'type'",
            "flags": 32,
            "hasliked": 0,
            "id": "tdfXWr",
            "likes": 7,
            "name": "per pixel particles transfer",
            "published": 3,
            "tags": [
                "2d",
                "pixel",
                "particles",
                "bounce",
                "physics",
                "collisions",
                "proper"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 651
        },
        "renderpass": [
            {
                "code": "//Ethan Alexander Shulman 2019\nvoid mainImage( out vec4 fragColor, in vec2 u )\n{\n    float pf = texelFetch(iChannel0,ivec2(u),0).w;\n    fragColor = vec4(min(1.,pf)*pow(.7+.3*vec3(sin(pf),cos(pf*.77),cos(pf*1.2)),vec3(2.2)),1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_VELOCITY 1.\n\n#define PI 3.141592653\n\nfloat pmod(float v, float m) {\n \tif (v < 0.) return m-mod(abs(v),m);\n    return mod(v,m);\n}\nvec2 pmod(vec2 v, vec2 m) {\n \treturn vec2(pmod(v.x,m.x),pmod(v.y,m.y));   \n}\n\nfloat vtof(vec2 v) {\n    return uintBitsToFloat(uint(v.x*65535.99) | (uint(v.y*65535.99)<<16));\n}\nvec2 ftov(float v) {\n    uint u = floatBitsToUint(v);\n\treturn vec2(float(u&uint(0xFFFF)),float(u>>16))/65535.;\n}\n\n/*\npos = particle position in screen coordinates\nvel = velocity in screen space \ntype 0 = no particle\n*/\n#define new_particle(pos,vel,type) vec4(pos,vtof(vel*.5+.5),type)\n#define particle_position(p) p.xy\n//2.00003.. is 1/(floor(0.5*65535.99)/65535) which fixes compression precision errors\n#define particle_velocity(p) (ftov(p.z)*2.000030518509-1.)\n#define particle_type(p) p.w",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "/*\nEthan Alexander Shulman 2019\n\nBufA - Stores a particle in each pixel and processes movement steps,\nlook in Common at new_particle for the structure.\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 u)\n{\n\tfragColor = vec4(0);\n\tif (iFrame < 30 || iMouse.w > 0.) {\n        float cx = u.x-iResolution.x*.5;\n        if (mod(abs(cx),floor(4.+abs(cx)*.1)) < 1.) fragColor = new_particle(u,vec2((sin(u.y*.03+cx*.777)*.5+.5)*-sign(cx),0),1.+u.x*.333+fract(u.y*.22+u.x*1.3333)*18.4783);\n        return;\n\t}\n    \n\tvec4 p;\n\tvec2 q = floor(u);\n    ivec2 ub;\n\t#define f(b) ub = ivec2(pmod(u+b,iResolution.xy));\\\n    p = texelFetch(iChannel0,ub,0);\\\n\tif (p.w > 0.) {\\\n        vec4 it = texelFetch(iChannel1,ub,0);\\\n        vec2 pv = particle_velocity(p);\\\n\t\tif (it.x > 0.5) {\\\n\t\t\tif (dot(b,b) < 1e-2) {\\\n                vec4 ip = texelFetch(iChannel0,ivec2(it.zw),0);\\\n            \tvec2 iv = particle_velocity(ip), n1 = normalize(pv), n2 = normalize(iv), dir = normalize(ip.xy-p.xy),\\\n                nv = pv*(1.-max(0.,dot(n1,dir)))+iv*max(0.,dot(n2,-dir));\\\n                float vl = length(nv);\\\n                if (vl > MAX_VELOCITY) {nv = (nv/vl)*MAX_VELOCITY;}\\\n                fragColor = new_particle(p.xy,nv,p.w);\\\n                return;\\\n\t\t\t}\\\n\t\t} else {\\\n\t\t\tp.xy = pmod(p.xy+pv,iResolution.xy);\\\n\t\t\tvec2 s = floor(p.xy)-q;\\\n\t\t\tif (dot(s,s) < 1e-2) {\\\n\t\t\t\tfragColor = p;\\\n\t\t\t\treturn;\\\n\t\t\t}\\\n\t\t}\\\n\t}\n\n\tf(vec2(0));\n\tf(vec2(-1));\n\tf(vec2(0,-1));\n\tf(vec2(1,-1));\n\tf(vec2(-1,0));\n\tf(vec2(1,0));\n\tf(vec2(-1,1));\n\tf(vec2(0,1));\n\tf(vec2(1));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\nEthan Alexander Shulman 2019\n\nBufB - Calculates particle collisions,\nx = 1 if the particle at the pixel has a collision during its movement step otherwise 0\nzw = position of colliding particle\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 u) {\n\tfragColor = vec4(0);\n\tvec4 p = texelFetch(iChannel0,ivec2(u),0),s;\n \tif (p.w < 1e-4) return;\n\tp.xy = floor(pmod(p.xy+particle_velocity(p),iResolution.xy));\n\n\tvec2 q,ub,fu = floor(u);\n\t#define f(b) ub = pmod(p.xy+b,iResolution.xy);\\\n\tif (length(ub-floor(u)) > 1e-2) {\\\n\t\ts = texelFetch(iChannel0,ivec2(ub),0);\\\n\t\tq = floor(s.xy)-p.xy;\\\n\t\ts.xy = floor(pmod(s.xy+particle_velocity(s),iResolution.xy))-p.xy;\\\n\t\tif (min(dot(s.xy,s.xy),dot(q,q)) < 1e-2) {\\\n\t\t\tfragColor = vec4(1,0,ub);\\\n\t\t\treturn;\\\n\t\t}\\\n\t}\n\t\n\tf(vec2(-1));\n\tf(vec2(0,-1));\n\tf(vec2(1,-1));\n\tf(vec2(-1,0));\n\tf(vec2(0));\n\tf(vec2(1,0));\n\tf(vec2(-1,1));\n\tf(vec2(0,1));\n\tf(vec2(1));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}