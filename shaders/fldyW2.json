{
    "Shader": {
        "info": {
            "date": "1660575808",
            "description": "asdfgadg",
            "flags": 32,
            "hasliked": 0,
            "id": "fldyW2",
            "likes": 9,
            "name": "Diamond Square algorithm.",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 445
        },
        "renderpass": [
            {
                "code": "// explanation: https://www.youtube.com/watch?v=4GuAV1PnurU\n// some creative liberty is taken to make it display here nicely.\nvoid mainImage( out vec4 C, in vec2 U){\n    \n    /*\n    C += texelFetch(\n        iChannel0,\n        ivec2(\n            vec2(res)*U/min(R.x,R.y)\n            ),\n        0\n        )*0.2;\n      */  \n        \n    C -= C;\n    \n    C += texelFetch(iChannel0,ivec2(U),0)*0.2;\n    \n    if(fract(iTime*0.125)<0.5)\n        C = vec4(1)*sin(C.x*3.+iTime)*0.5 + 0.5;\n    \n    C = 1.-exp(0.6*C); // bro y r u tonemapping ur noise 🤦‍\n    \n    C = pow(abs(C),vec4(0.4545));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n\n// dave hoskins hash\nvec4 hash44(vec4 p4)\n{\n    p4 += 1200.;\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nconst ivec2 res = ivec2(pow(2.,9.) + 1.);\n//#define res ivec2(R.y+1.)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\nvec4 getSquare(ivec2 lidx, int sz){\n    return (\n        texelFetch(iChannel0, (lidx + ivec2(sz,-sz))  % ivec2(R)   ,0) + \n        texelFetch(iChannel0, (lidx + ivec2(-sz,sz))  % ivec2(R)   ,0) +\n        texelFetch(iChannel0, (lidx + ivec2(-sz,-sz)) % ivec2(R)   ,0) + \n        texelFetch(iChannel0, (lidx + ivec2(sz,sz))   % ivec2(R)    ,0) \n    )/4.\n    ;\n}\n\nvec4 getDiamond(ivec2 lidx, int sz){\n    return (\n        texelFetch(iChannel0,(lidx + ivec2(0,sz) ) % ivec2(R),0) + \n        texelFetch(iChannel0,(lidx + ivec2(sz,0) ) % ivec2(R),0) +\n        texelFetch(iChannel0,(lidx + ivec2(-sz,0)) % ivec2(R),0) + \n        texelFetch(iChannel0,(lidx + ivec2(0,-sz)) % ivec2(R),0) \n    )/4.\n    ;\n}\n\nvoid mainImage( out vec4 C, in vec2 U){\n    \n    C = texelFetch(iChannel0,ivec2(U),0) ;\n    \n    \n    ivec2 idx = ivec2(U);\n    \n    bool currPixelIsTime = ( idx.x == int(R.x - 1.) && idx.y == int(R.y - 1.) ) ;\n    \n    \n    \n    \n    int t = floatBitsToInt(texelFetch(iChannel0,ivec2(R.x-1.,R.y-1.),0).x);\n\n    // Init bs    \n    {\n        if(iFrame == 0){\n            C -= C;\n            return;\n        }\n        // increment time counter pixel\n        if(idx.x == int(R.x - 1.) &&idx.y == int(R.y - 1.) ){\n\n            C = vec4(intBitsToFloat(t + 1));\n            if(iMouse.z > 0.)\n                C -= C;\n            return;\n        }\n\n        if(t == 0 || iMouse.z > 0.){\n            C -= C;\n            return;\n        }   \n        //if(idx.x >= res.x || idx.y >= res.y) return;\n\n\n        // First step\n        if(t == 1){\n            if( idx.y == 0 || idx.y == res.y - 1){\n                if(idx.x == 0 || idx.x == res.x - 1){\n                    C =  hash44(vec4(idx,0.,0));\n                }\n            }\n            return;\n        }\n    }\n\n    int st = t%2;\n    int stId = t/2;\n    \n    \n    int chunkSz = (res.x-1)/int(pow(2.,float(stId-1)));\n    \n    float roughness = exp(-float(stId)*0.1);\n    //roughness = 1.;\n    \n    int halfChunkSz = chunkSz/2;\n    \n    \n    \n    \n    if(chunkSz <= 1)\n        return;\n    \n    \n    \n    \n    float bias = 1.;\n    float biasMin = -1.;\n    float biasMax = 2.;\n    \n    \n    #define getBias(r) ((r)*(biasMax - biasMin) + biasMin)*bias\n    if(st == 0){\n        // Square\n        ivec2 lidx = idx - halfChunkSz;\n        if(\n            lidx.x%chunkSz == 0 \n            && lidx.y%chunkSz == 0\n        ){\n            C = getSquare(lidx, chunkSz) + getBias(hash44(vec4(lidx,0.,iTime)))*roughness;\n        }\n       \n    }else{\n        // Diamond\n        ivec2 lidx = idx;\n        \n        if(\n            (lidx.x + (lidx.y + halfChunkSz) % chunkSz ) % chunkSz == 0 \n            && (lidx.y) % halfChunkSz == 0\n        ){\n            C = getDiamond(lidx, halfChunkSz) + getBias(hash44(vec4(lidx,0.,iTime)))*roughness;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}