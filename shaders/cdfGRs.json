{
    "Shader": {
        "info": {
            "date": "1666614282",
            "description": "The Gosper Curve using a simple stack (just storing the offset of the \"current instruction\").\n\nZoomed right in to a 14 level pattern, where we start to hit numeric limits.",
            "flags": 0,
            "hasliked": 0,
            "id": "cdfGRs",
            "likes": 13,
            "name": "Gosper Curve Zoomed",
            "published": 3,
            "tags": [
                "optimized",
                "lsystem",
                "stack",
                "gosper"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Gosper Curve, drawn with stack. mla, 2022.\n//\n// Optimized implementation, and now with winding number calculation.\n// Zoomed in to 14 levels (so 7^14 segments in complete pattern).\n//\n// Uses an explicit stack to keep track of the recursion.\n// This one keeps track of intermediate segments and avoids recursing far from\n// the point being plotted.\n//\n// Mouse down shows segments actually drawn around mouse position\n//\n////////////////////////////////////////////////////////////////////////////////\n\n\n#define C(turns,offset) (((turns) << 16) | ((offset) & 0xffff))\n// Each instruction is an integer number of turns, followed by\n// either an instruction offset for the recursive call or -1\n// to terminate the current level.\nconst int A = 0, B = 8, END = -1, L = -1, R = 1;\nconst int program[16] =\n  int[] (C(0,A),C(L,B),C(L+L,B),C(R,A), C(R+R,A),C(0,A),C(R,B),C(L,END),\n         C(R,A),C(L,B),C(0,B),C(L+L,B), C(L,A),C(R+R,A),C(R,B),C(0,END));\n\nconst float angle = PI/3.0;\n\nconst int maxdepth = 14;\n\nvec2 p = vec2(0);     // The drawing point\nvec2 point = vec2(100); // The moving point\nfloat plen = 0.0;     // Cumulative path length\n\nint wind = 0; // Compute winding number here\nvoid polywind(vec2 p, vec2 q, vec2 r) {\n  // NR winding number computation\n  q -= p; r -= p; // Relative to p\n  float t = determinant(mat2(q,r));\n  if (q.y <= 0.0) {\n    if (r.y > 0.0 && t > 0.0) wind++;\n  } else {\n    if (r.y <= 0.0 && t < 0.0) wind--;\n  }\n}\n\nfloat drawsegment(vec2 pos, float seglen, float theta, float t) {\n  vec2 seg = seglen*vec2(cos(theta),sin(theta));\n  if (t >= plen && t < plen+seglen) point = p + (t-plen)/seglen*seg;\n  vec2 q = p + seg;\n  float d = segment(pos,p,q);\n  polywind(pos,p,q);\n  plen += seglen;\n  p = q;\n  return d;\n}\n\nfloat magic = 0.333473; // !!\n\nvec2 map(vec2 pos) {\n  pos = (2.0*pos - iResolution.xy)/iResolution.y;\n  pos.x += 0.2*iTime;\n  pos /= exp(10.0);\n  pos -= vec2(-0.5,-0.8);\n  return pos;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 pos = map(fragCoord);\n  vec2 pos2 = pos;\n  if (iMouse.z > 0.0) pos2 = map(iMouse.xy);\n  int stack[maxdepth];\n  int depth = 0;\n  stack[depth++] = 0;\n  float t = mod(iTime,pow(7.0,0.5+0.5*float(maxdepth))); // Moving point\n  float d = 1e8;\n  float seglen = 1.0;\n  float theta = 0.0;    // Cumulative angle\n  while (depth > 0) {\n    int instr = program[stack[depth-1]++];\n    // Decode instruction\n    int turns = instr>>16;\n    int code = instr<<16>>16;\n    theta += float(turns)*angle; // Apply turn\n    if (code == END) {\n      depth--;    // Terminate level & unwind\n      seglen *= sqrt(7.0);\n    } else if (depth == maxdepth) {\n      d = min(d,drawsegment(pos,seglen,theta,t)); // Segment\n    } else if (distance(pos2,p) > 1.2*seglen) {\n      // Short circuit\n      float offset = float(maxdepth-depth)*magic;\n      vec2 seg = seglen*vec2(cos(theta-offset),sin(theta-offset));\n      polywind(pos,p,p+seg);\n      // Show skipped segments on mouse down.\n      if (iMouse.z > 0.0) d = min(d,segment(pos,p,p+seg));\n      p += seg;\n      plen += seglen*pow(7.0,0.5*float(maxdepth-depth));\n    } else {\n      stack[depth++] = code;  // Recurse\n      seglen /= sqrt(7.0);\n    }\n  }\n  float px = fwidth(pos.x);\n  vec3 col = vec3(smoothstep(0.0,px,d));\n  if ((wind&1) != 0) col *= 0.8;\n  col = mix(vec3(1,0,0), col,smoothstep(0.0,px,distance(pos,point)-0.01));\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.1415926;\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}