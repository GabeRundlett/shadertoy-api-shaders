{
    "Shader": {
        "info": {
            "date": "1692902788",
            "description": "challenge shader",
            "flags": 0,
            "hasliked": 0,
            "id": "clXBW4",
            "likes": 0,
            "name": "Fork polygon :D beans_plea 404",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "distance",
                "polygon"
            ],
            "usePreview": 0,
            "username": "beans_please",
            "viewed": 79
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Distance to a regular pentagon, without trigonometric functions. \n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n\n\n\n\n\n\n\n\n// NO STEALING CODE FROM THE ORIGINAL!\n\n\n\n\n\n\n\n\n\nconst int N = 5;\n\nfloat sdPolygon( in vec2 p, in vec2[N] v )\n{\n    // Minimum distance\n    float m = 1e9;\n    \n    // How many segments intersect a half line from p to (+inf, p.y)\n    int num_intersections = 0;\n    \n    // The segments\n    for (int i = 0; i < N; i++)\n    {\n        // Line segment vertices\n        vec2 a = v[i];\n        vec2 b = v[(i + 1) % N];\n        \n        // Slope and intercept\n        float temp = b.x - a.x;\n        if (temp == 0.) temp = 1e-9;\n        float slope = (b.y - a.y) / temp;\n        float intercept = a.y - slope * a.x;\n        \n        // Should we use the endpoints or the line?\n        if (min(dot(p - a, b - a), dot(p - b, a - b)) < 0.)\n        {\n            // Distance from the endpoints\n            m = min(m, min(distance(p, a), distance(p, b)));\n        }\n        else\n        {\n            // Distance from the line\n            m = min(m, abs(slope * p.x - p.y + intercept) / sqrt(slope * slope + 1.));\n        }\n        \n        // Intersect AB with half line from p to (+inf, p.y)\n        // (only if p.y is between a.y and b.y)\n        if (p.y > min(a.y, b.y) && p.y < max(a.y, b.y))\n        {\n            float x_where_y_equals_py = (p.y - intercept) / slope;\n            if (x_where_y_equals_py > p.x)\n            {\n                num_intersections++;\n            }\n        }\n    }\n    \n    // Is num_intersections odd?\n    if (num_intersections % 2 == 1) m = -m;\n    \n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n        \n    // add more points\n    vec2[] polygon = vec2[N](\n        0.8*cos( 0.40*iTime + vec2(0.0,2.00) + 0.0 ),\n        0.8*cos( 0.45*iTime + vec2(0.0,1.50) + 1.0 ),\n        0.8*cos( 0.50*iTime + vec2(0.0,3.00) + 2.0 ),\n        0.8*cos( 0.55*iTime + vec2(0.0,2.00) + 4.0 ),\n        0.8*cos( 0.60*iTime + vec2(0.0,1.00) + 5.0 )\n    );\n    \n\tfloat d = sdPolygon(p, polygon);\n\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\tcol *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(140.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    \n    if( iMouse.z>0.001 ){\n        d = sdPolygon( m, polygon );\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n    \n    fragColor = col.xyzz;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}