{
    "Shader": {
        "info": {
            "date": "1675529459",
            "description": "My first attempt at shaders after watching some YouTube videos.  Creating space engine 2D exhaust using some parabolas.\nNext, I want to try to write a pixelated version of this to use in my hobby game project as a random exhaust generator.",
            "flags": 0,
            "hasliked": 0,
            "id": "DlXSDl",
            "likes": 0,
            "name": "Engine Exhaust",
            "published": 3,
            "tags": [
                "space",
                "spaceship",
                "engine",
                "exhaust"
            ],
            "usePreview": 0,
            "username": "natsew",
            "viewed": 233
        },
        "renderpass": [
            {
                "code": "//Creates an engine exhaust from parabolas. \n\n//offset.x for moving parabola left\\right\n//offset.y for moving it up\\down\n//that's same as in standart math\n//anims.x for animating brightest part\n//anims.y used for blur on the exhaust's edges\nvec4 Exhaust(vec2 uv, float sharpness, vec2 offset, vec2 anims) { \n    vec4 col = vec4(.0);\n    //base color\n    vec4 fire = vec4(.0, .7, .8, 0.);\n    \n    //current parabola point for uv.x\n    vec2 f_point = vec2(uv.x, pow(uv.x + offset.x, 2.) * sharpness + offset.y); \n    \n    //lowest brigthness layer\n    fire.a = smoothstep(f_point.y-anims.y-.1, f_point.y, uv.y);      \n    col += fire;\n     \n    //middle brigthness layer\n    //move created parabole up taking care of offsets\n    f_point.y += .3 * (1. - offset.y);\n    fire *= smoothstep(f_point.y-.1-anims.y, f_point.y, uv.y) * .25; \n    col.rgb += fire.rgb;       \n       \n    //highest brightness layer\n    f_point.y += .3 * (1. - offset.y);\n    //sqrt function to interpolate between it and original parabola\n    vec2 s_point = vec2(uv.x, sqrt(abs(uv.x + offset.x)) * 1.8 + offset.y); \n    \n    vec2 n_point = vec2(uv.x, mix(s_point.y, f_point.y, anims.x));\n    \n    fire *= smoothstep(n_point.y-.1-anims.y, n_point.y, uv.y); \n    col.rgb += fire.rgb;\n\n    return col;\n}\n\n//\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv.x -= .5;\n    uv.y -= .1;\n    uv.x *= iResolution.x / iResolution.y;    \n     \n    vec4 col = vec4(vec3(0.), 1.);\n    \n    float inside = 0.3 * sin(iTime*5.)/2.+.5;\n    float outside = 0.05 + (sin(iTime*5.)+1.) / 100.;\n    \n    //just to test 'starting' animation\n    float starting = (sin(iTime*3.)+1.)/2.*.5;\n    starting = 0.; //comment here to try it\n    \n    vec4 left = Exhaust(uv, 20., vec2(.4, .5+starting), vec2(inside, outside));\n    col = mix(col, left, left.a);\n    \n    vec4 rigth = Exhaust(uv, 20., vec2(-.4, .5+starting), vec2(inside, outside));\n    col = mix(col, rigth, rigth.a);\n       \n    vec4 main = Exhaust(uv, 7., vec2(0, .1+starting), vec2(inside, outside));    \n    col = mix(col, main, main.a);\n  \n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}