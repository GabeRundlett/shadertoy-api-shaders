{
    "Shader": {
        "info": {
            "date": "1713255124",
            "description": "I changed the original to allow for patterns of specific Harmonies\ntry change harmony and harmony2 for some nice standing oscillation harmonic patterns\nalmost fractions work really well \n",
            "flags": 0,
            "hasliked": 0,
            "id": "MfK3Dy",
            "likes": 3,
            "name": "Orb Mandala 2 ",
            "published": 3,
            "tags": [
                "maths",
                "orbs",
                "mandala",
                "harmony"
            ],
            "usePreview": 0,
            "username": "Dancetothetower",
            "viewed": 135
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    float d1 = length(uv);\n    \n    \n    int i=1;\n    int x=               1000;  //Change to adjust the number of orbs\n    float speed =        50.;  //Change to adjust speed \n\n    float harmony =       42.001;  //Change to adjust Harmony of the first Oscillation\n    float harmony2 =      7.;  //Change to adjust Harmony of the second Oscillation\n\n    float orbgradient =   4.0;  //Change to make the color offset between outer and inner orbs bigger\n    float orbgrade =      1.5;  //Change to make the color offset between first and last orbs bigger\n    float orbdarkening =  1.0;  //Change to adjust the darkening of the outer Orbs\n    float orb3d =         1.3;  //Change to adjust the 3d Coloring \n    float orbbase =       1.2;  //Change to adjust the base size of the orbs \n    float orbgrowth =     0.5;  //Change to adjust the size of the orb growth\n    float bggradient =    4.5;  //Change to adjust the background gradient\n    float size =          0.8;  //Change to adjust the size of the larger cirlce\n    float circlesize =    0.8;  //Change to adjust the radius of the individual circles\n    float speedadj =    100.;\n    float speedadj2 =    1.;\n    float offset =      0.;\n    //if(harmony > harmony2){speedadj2 = harmony2/harmony;}\n    //else{speedadj2 = harmony/harmony2;}\n    while(harmony > 100.){harmony /= 10.;}\n    while(harmony2 > 100.){harmony2 /= 10.;}\n    speedadj = pow(harmony2 + harmony, 2.)*0.25 +1000.;\n    speed = speedadj/speed;\n    float x1=float(x)*speed;\n    uv *= bggradient;\n    float d = length(uv);\n    vec3 f = 0.55 + 0.3*cos(iTime*0.0025+vec3(d)+vec3(0,2,4));\n   f -= vec3(0.1);\n    for(i=1; i < x; i++){\n        uv = fragCoord/iResolution.xy;\n        uv -= 0.5;\n        uv.x *= iResolution.x/iResolution.y;\n        offset= float(x)* (harmony2 + harmony);\n        uv -= vec2(cos((iTime +  offset) * float(i)/x1*harmony )*0.5*size, \n                   sin((iTime +  offset) * float(i)/x1*harmony )*0.5*size);\n        uv += vec2(sin((iTime +  offset) * float(i)/x1*harmony2 )*0.5*circlesize, \n                   cos((iTime +  offset) * float(i)/x1*harmony2)*0.5*circlesize);\n        d = length(uv);\n        if(d < (.05*orbbase + sin(iTime*0.25 + float(i)/float(x))*0.025)*.5*orbgrowth){ \n            f = 0.6 + 0.3*sin(iTime*0.025+vec3(d1)*orbgradient+vec3(3,5,7)+float(i)/float(x)*orbgrade);\n            f -= vec3(d1)*0.055*orbdarkening; \n            f += vec3(d + uv.x + uv.y)*orb3d; \n                 }\n    } \n    // Output to screen\n    fragColor = vec4(f,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}