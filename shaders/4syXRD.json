{
    "Shader": {
        "info": {
            "date": "1463075898",
            "description": "Fuzzy scratches mask",
            "flags": 0,
            "hasliked": 0,
            "id": "4syXRD",
            "likes": 26,
            "name": "Fuzzy scratches",
            "published": 3,
            "tags": [
                "fuzzyscratchesmask"
            ],
            "usePreview": 0,
            "username": "Daedelus",
            "viewed": 1673
        },
        "renderpass": [
            {
                "code": "// uniform float uWavyness;\n// uniform vec2 uScale;\n// uniform vec2 uOffset;\n// uniform int uLayers;\n// uniform vec2 uBaseFrequency;\n// uniform vec2 uFrequencyStep;\n#define uWavyness 0.1\n#define uScale vec2(3.0, 3.0)\n#define uOffset vec2(iTime, 0.0)\n#define uLayers 4\n#define uBaseFrequency vec2(0.5, 0.5)\n#define uFrequencyStep vec2(0.25, 0.25)\n\nvoid pR(inout vec2 p, float a)\n{\n    float sa = sin(a);\n    float ca = cos(a);\n    p *= mat2(ca, sa, -sa, ca);\n}\n\nfloat scratch(vec2 uv, vec2 seed)\n{\n    seed.x = floor(sin(seed.x * 51024.0) * 3104.0);\n    seed.y = floor(sin(seed.y * 1324.0) * 554.0);\n \n    uv = uv * 2.0 - 1.0;\n    pR(uv, seed.x + seed.y);\n    uv += sin(seed.x - seed.y);\n    uv = clamp(uv * 0.5 + 0.5, 0.0, 1.0);\n    \n    float s1 = sin(seed.x + uv.y * 3.1415) * uWavyness;\n    float s2 = sin(seed.y + uv.y * 3.1415) * uWavyness;\n    \n    float x = sign(0.01 - abs(uv.x - 0.5 + s2 + s1));\n    return clamp(((1.0 - pow(uv.y, 2.0)) * uv.y) * 2.5 * x, 0.0, 1.0);\n}\n\nfloat layer(vec2 uv, vec2 frequency, vec2 offset, float angle)\n{\n    pR(uv, angle);\n    uv = uv * frequency + offset;\n    return scratch(fract(uv), floor(uv));\n}\n\nfloat scratches(vec2 uv)\n{\n    uv *= uScale;\n    uv += uOffset;\n    vec2 frequency = uBaseFrequency;\n    float scratches = 0.0;\n    for(int i = 0; i < uLayers; ++i)\n    {\n        float fi = float(i);\n    \tscratches = max(scratches, layer(uv, frequency, vec2(fi, fi), fi * 3145.0)); // Nicer blending, thanks Shane!\n        frequency += uFrequencyStep;\n    }\n    return clamp(scratches, 0.0, 1.0); // Saturate for AA to work better\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    \n    // using AA by Shane:\n    // https://www.shadertoy.com/view/4d3SWf\n    const float AA = 4.; // Antialias level. Set to 1 for a standard, aliased scene.\n    const int AA2 = int(AA*AA);\n    float col = 0.0;\n    vec2 pix = 2.0/iResolution.yy/AA; // or iResolution.xy\n    for (int i=0; i<AA2; i++){ \n\n        float k = float(i);\n        vec2 uvOffs = uv + vec2(floor(k/AA), mod(k, AA)) * pix;\n        col += scratches(uvOffs);\n    }\n    col /= (AA*AA);\n\t\n\tfragColor = vec4(col);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}