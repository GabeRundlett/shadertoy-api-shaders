{
    "Shader": {
        "info": {
            "date": "1630940324",
            "description": "Testing an idea I had while trying to understand [url=https://www.shadertoy.com/view/fdd3Ws]this[/url] shader.\nLeft click with the mouse to restart it.",
            "flags": 32,
            "hasliked": 0,
            "id": "7dt3Dl",
            "likes": 5,
            "name": "Twisty Marching",
            "published": 3,
            "tags": [
                "raymarching",
                "twisty",
                "bisection"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 160
        },
        "renderpass": [
            {
                "code": "#define hue2rgb(t) abs(2.0 * smoothstep(0.0, 1.0, fract(vec3(t, t - 1.0 / 3.0, t + 1.0 / 3.0))) - 1.0)\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0);\n\n    vec3 rd = normalize(vec3(uv, -FOCAL_LEN));\n    vec4 buf = texture(iChannel0, fragCoord / iResolution.xy);\n    float t = buf.x, hit = buf.y;\n    if (hit > 0.5) {\n        // Refine with bisection\n        float tmin = t - dt, tmax = t;\n        for (int i=0; i < REFINEMENT; i++) {\n            float tmid = (tmin + tmax) * 0.5;\n            if (map(CAM_POS + rd * tmid) < 0.0) tmax = tmid;\n            else tmin = tmid;\n        }\n\n        t = (tmin + tmax) * 0.5;\n        vec3 hit = CAM_POS + rd * t;\n        vec3 nor = getNormal(hit);\n\n        vec3 color = hue2rgb((nor.x - 0.5 * nor.y) * nor.z);\n        float shade = max(0.0, dot(nor, normalize(vec3(-1.0, 1.0, 1.0))));\n        fragColor.rgb = color * shade;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define CAM_POS vec3(0.0, 0.0, 8.0)\n#define FOCAL_LEN 1.0\n\n#define START 3.0\n#define REFINEMENT 10\n#define dt 0.01 //0.001\n\nmat2 Rotate2D(in float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat map(in vec3 p) {\n    p.xz *= Rotate2D(0.4);\n    p.yz *= Rotate2D(-0.78);\n    p.xz *= Rotate2D(p.y);\n    p.x += p.y;\n    p.yz *= Rotate2D(-p.z);\n    p.y += p.x;\n    p.xz *= Rotate2D(-p.z);\n    p.xz *= Rotate2D(p.y);\n    return length(abs(p.xz) - 1.5) - 0.5;\n}\n\nvec3 getNormal(in vec3 p) {\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(map(p + e.xyy) - map(p - e.xyy),\n                          map(p + e.yxy) - map(p - e.yxy),\n                          map(p + e.yyx) - map(p - e.yyx)));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if (iFrame > 0) {\n        vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n        fragColor = vec4(0.0);\n\n        vec3 rd = normalize(vec3(uv, -FOCAL_LEN));\n        float t = texture(iChannel0, fragCoord / iResolution.xy).x;\n        if (map(CAM_POS + rd * t) > 0.0) t += dt; // If not inside, step forward\n        else fragColor.y = 1.0; // Else, flag a hit\n\n        fragColor.x = t;\n    }\n\n    if (iFrame == 0 || iMouse.z > 0.0) {\n        fragColor = vec4(START, 0.0, 0.0, 0.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}