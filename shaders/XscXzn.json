{
    "Shader": {
        "info": {
            "date": "1457359695",
            "description": "Procedural Chiptune with waveform visualization.\nAudio and visuals by Pink/Abyss in March 2016.",
            "flags": 40,
            "hasliked": 0,
            "id": "XscXzn",
            "likes": 52,
            "name": "Chip Churn ",
            "published": 3,
            "tags": [
                "music",
                "chiptune"
            ],
            "usePreview": 0,
            "username": "pinko",
            "viewed": 3526
        },
        "renderpass": [
            {
                "code": "/*\n\n pink/abyss, march 2016\n\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv  = vec2(fragCoord.x/iResolution.x, fragCoord.y/iResolution.y);\n    vec3 t=texture(iChannel0,vec2(uv)).rgb;\n    float x=(uv.x-0.5)*t.x*0.1*sin(iTime*0.1)*0.5;\n    float x2=(uv.x-0.5)*t.y*0.1*sin(iTime*0.2)*0.5;\n    float tr=texture(iChannel0,vec2(uv.x+x,uv.y)).x;\n    float tg=texture(iChannel0,vec2(uv.x+x2,uv.y)).y;\n    fragColor=vec4(t,1.0);\n\tfragColor.x=tr;\n\tfragColor.y=tg;\n    \n    vec2 uv2=(uv-vec2(0.5))*(2.0+cos(iTime*0.25));\n    fragColor.rgb+=vec3(0.1,0.1,0.2)*4.0;\n    fragColor*=(1.0-length(uv2)*0.7)*0.5;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n   Songname: 5450\n   Composer: Pink/aBYSs\n       Date: March, 2016\n*/\n\nint globalTranspose=0;\nfloat baseFreq=1.0;\nfloat globalTime=0.0;\nfloat PI=3.141592;\nfloat speed=1.2;\n \n#define TT(d) mod(mod(time,1.0)-d,1.0)\n\nfloat rand(float t){\n    return fract(sin(t*1793.326) * 43758.5453);\n}\n\nfloat ws(float x,float a)\n{\n\treturn x*(abs(x) + a)/(x*x + (a-1.0)*abs(x) + 1.0);\n}\n\nfloat sn(float _time)\n{\n    float freq=680.0*baseFreq;\n\tfloat c=0.0;\n    const int  num=7;\n    for (int i=0;i<num;i++)\n    {\n        float time=_time-float(i)*(0.09+float(i)*0.01);\n\n        if (time<0.0)\n            continue;\n        \n        float t=1.0-(time*1.0);\n        t=max(t,0.0);\n        t=pow(t,2.0);\n\n        float f=sin(t*freq)/PI;\n\n    \tf=ws(f,2.9);\n        t=time*baseFreq;\n        f*=pow(max(0.0,1.0-(t*6.0)),4.0);\n        f+=rand(time)*0.4*pow(1.0-t,20.0);\n    \tf=ws(f,1.9);\n\t    f= clamp(f,-1.0,1.0);\n        f*=0.7;\n        c+=f/float(1+(i*i*4));\n        \n    }\n    \n    return c*0.35;        \n}\n\nfloat bd(float time)\n{\n    float freq=100.0*baseFreq;\n    float vol=0.4;\n    float depth=4.0;\n\n    float t=1.0-(time*4.0);\n    t=max(t,0.0);\n    t=pow(t,depth);\n    float f=cos(t*freq)/PI;\n    \n    float t2=time*baseFreq;\n    \n    f*=pow(1.0-t2,8.0);\n//    f=ws(f,2.0);\n    f+=rand(time)*pow(1.0-t2,1464.0)*0.5;\n\n    return clamp(f*vol,-1.0,1.0);\n}\n\nfloat bs(float time,int note)\n{\n    note+=globalTranspose;\n    \n    float base_a4=110.0;\n    float freq=base_a4*pow(2.0,float(note)/12.0)*baseFreq;\n    \n    float t=1.0-(time*1.0);\n    t=max(t,0.0);\n\t\n    //create sqr duty wave\n    float duty=cos(time*4.0)/PI;\n    duty=duty*0.5+0.5;\n    float f1=fract(t*freq);\n    float f2=fract(duty+t*freq);\n    float f=f1-f2;\n    f= clamp(f,-1.0,1.0);\n    \n\tfloat t2=time*baseFreq;\n    f*=pow(max(0.0,1.0-(t2*2.0)),3.0);\n\n    //hihat\n    f+=rand(time)*0.5*pow(1.0-t2,16.0);\n\n    return f;\n}\n\nfloat ld(float time,int note,float speed,float arpVolume)\n{\n    note+=globalTranspose;\n    \n    float base_a4=440.0;\n    float freq=base_a4*pow(2.0,float(note)/12.0)*baseFreq;\n    freq*=speed;\n    \n    freq+=freq*step(mod(time,0.1),0.05)*arpVolume;\n\t\n    //vibrato\n    float vibratoDelay=0.2;\n    freq+=1.0+sin(time*20.0*speed)/PI*0.001*freq*step(0.0,time-vibratoDelay);\n\n    float t=1.0-(time*1.0);\n    t=max(t,0.0);\n\t\n    //create sqr duty wave\n    float duty=cos(time*2.0+globalTime*0.5)/PI;\n    duty=duty*0.2+0.8;\n    float f1=fract(t*freq);\n    float f2=fract(duty+t*freq);\n    float f=f1-f2;\n    f= clamp(f,-1.0,1.0);\n    \n\tfloat t2=time*baseFreq;\n    f*=pow(max(0.0,1.0-(t2*1.0)),1.5);\n\n    //hihat\n  //  f+=rand(time)*0.2*pow(1.0-t2,16.0);\n\n    return f;\n}\n\nfloat ap(float _time,int note[3],float speed,float delay)\n{\n    note[0]+=globalTranspose;\n    note[1]+=globalTranspose;\n    note[2]+=globalTranspose;\n\n    float base_a4=440.0;\n    float c=0.0;\n    for (int i=0;i<3;i++)\n    {\n        float time=_time+float(i)*delay;\n        float freq=base_a4*pow(2.0,float(note[i])/12.0)*baseFreq;\n        freq*=speed;\n\n        //vibrato\n        float vibratoDelay=0.1;\n        freq+=1.0+sin(time*20.0*speed)/PI*0.0005*freq*step(0.0,time-vibratoDelay);\n\n        float t=1.0-(time*1.0);\n        t=max(t,0.0);\n\n        //create sqr duty wave\n        float duty=cos(time*5.0)/PI;\n        float f1=fract(t*freq);\n        float f2=fract(duty+t*freq);\n        float f=f1-f2;\n        f= clamp(f,-1.0,1.0);\n\n        float t2=time*baseFreq;\n        f*=pow(max(0.0,1.0-(t2*1.0)),1.5);\n        \n        c+=f;\n    }\n        \n    return c;\n}\n\nfloat drums(float t)\n{\n    float c=0.0;\n\n    float n = 0.0, b = 0.0, x = 0.0;\n    #define BD(d)   c+=bd(TT(d));\n    #define SN(d)   c+=sn(TT(d));\n\t\n    float time=mod(t,4.0);\n\n    if (time<1.0)\n    {\n        BD(0.0);\n        SN(0.5);\n        BD(0.75);\n    }\n\telse\n    if (time<2.0)\n    {\n        BD(0.0);\n        SN(0.5);\n    }\n\telse\n    if (time<3.0)\n    {\n        BD(0.0);\n        SN(0.5);\n        BD(0.75);\n    }\n    else\n    if (time<4.0)\n    {\n        BD(0.0);\n        SN(0.25);\n        SN(0.5);\n        SN(0.75);\n    }\n\n    \n    return c;\n}\n\nfloat lead(float t,float arpVolume)\n{\n    float c=0.0;\n    float speed=0.5;\n\n    #define LD(d,n)   c+=ld(TT(d),n,1.0/speed,arpVolume)*step(0.0,time-d);\n   \n    float time=mod(t*speed,32.0);\n    if (time>8.0 && time<16.0)time-=8.0;\n\n    int i=0;\n    float f=0.0;\n    if (time<1.0)\n    {\n        LD(0.0,i);\n        LD(0.5,i+2);\n\t}\n\telse\n    if (time<2.0)\n    {\n\t\ttime=fract(time);\n        LD(0.0,i+3);\n        LD(0.125*1.0,i+5);\n        LD(0.125*3.0,i);\n        LD(0.125*5.0,i-2);\n\t}\n\telse\n    if (time<3.0)\n    {\n\t\ttime=fract(time);\n        LD(0.0,i);\n        LD(0.5,i+2);\n    }\n    else\n    if (time<4.0)\n    {\n\t\ttime=fract(time);\n        LD(0.0,i+3);\n        LD(0.125*1.0,i+5);\n        LD(0.125*3.0,i+10);\n        LD(0.125*5.0,i+7);\n    }\n    else\n    if (time<5.0)\n    {\n\t\ttime=fract(time);\n        LD(0.0,i);\n        LD(0.5,i+2);\n\t}\n\telse\n    if (time<6.0)\n    {\n\t\ttime=fract(time);\n        LD(0.0,i+3);\n        LD(0.125*1.0,i+5);\n        LD(0.125*3.0,i);\n        LD(0.125*5.0,i-2);\n\t}\n\telse\n    if (time<7.0)\n    {\n\t\ttime=fract(time);\n        LD(0.0,i);\n        LD(0.5,i-2);\n    }\n    else\n    if (time<8.0)\n    {\n\t\ttime=fract(time);\n        i=-12;\n        LD(0.0,i+7);\n        LD(0.125*1.0,i+10);\n        LD(0.125*2.0,i+5);\n        LD(0.125*3.0,i+7);\n    }\n\n\n    return c;\n}\n\nfloat arp(float t)\n{\n    float c=0.0;\n    float speed=4.0;\n    float delay=-0.4;\n\n    #define ARP(d,n)   c+=ap(TT(d),n,1.0/speed,delay);\n    \t\n    float time=mod(t*speed,4.0*speed);\n\t\n    float  g=time/speed;\n    int i[3];\n    if (g<1.0)\n\t    {i[0]=0;i[1]=3;i[2]=7;ARP(0.0,i);}\n\telse if (g<2.0)\n    \t{int a=-2;i[0]=0+a;i[1]=4+a;i[2]=7+a;ARP(0.0,i);}\n\telse if (g<3.0)\n    \t{int a=-4;i[0]=0+a;i[1]=4+a;i[2]=7+a;ARP(0.0,i);}\n\telse if (g<4.0)\n    \t{int a=-4;i[0]=0+a;i[1]=4+a;i[2]=7+a;ARP(0.0,i);}\n\n    return c*0.4;\n}\n\nfloat bass(float t)\n{\n    float c=0.0;\n\n    float n = 0.0, b = 0.0, x = 0.0;\n    #define BS(d,n)   c+=bs(TT(d),n);\n    \t\n    float time=mod(t,4.0);\n\n    int i=0;\n    \n    if (time<1.0)\n        i=0;\n\telse\n    if (time<2.0)\n        i=-5;\n\telse\n    if (time<3.0)\n        i=-2;\n    else\n    if (time<4.0)\n        i=-7;\n        BS(0.0,-12+i);\n        BS(0.25,0+i);\n        BS(0.5,-12+i);\n        BS(0.75,-5+i);\n    \n    return c;\n}\n\n\n\nfloat song(float t0)\n{\n//  t0+=40.0;\n\n    float _t=t0;\n\tfloat c=0.0;\n    float songTime=64.0+16.0;\n\tif (_t>64.0)_t+=4.0;\n    float t=mod(_t,songTime);\n\tfloat arpT=1.0;\n    float drumT=1.0;\n    float bassT=1.0;\n    float leadArpVolume=0.0;\n    float leadWait=8.0;\n    float leadTime=t-leadWait;\n    float drumRm=1.0;\n\n    if (t>24.0 && t<40.0)\n    {\n        globalTranspose=-3;\n\t    leadArpVolume=1.0;\n\t}\n    else\n    if (t>40.0 && t<48.0)\n    {\n        //add bd\n    \tfloat time=mod(_t,0.5);\n       \tBD(0.0);\n        c*=3.0;\n\n        globalTranspose=2;\n        arpT=0.5;\n        bassT=2.0;\n\t}\n\telse\n    if (t>48.0 && t<songTime)\n    {\n\n        globalTranspose=5;\n        \n        arpT=0.5;\n        drumT=0.5;\n        bassT=2.0;\n\t    leadTime=16.0-(t-48.0);\n        drumRm=0.7;\n\n        if (t>64.0)\n        {\n        \tglobalTranspose=8;\n        \tleadTime=t-64.0-4.0;\n            arpT=1.0;\n\n            if (t>64.0+12.0)\n            {\n               drumT=1.0;\n               drumRm=1.25;\n               leadArpVolume=step(0.1,mod(t,1.0));\n            }\n       }\n\t\t\n        //extra deep bass\n        c+=bass(t*0.5)*0.5;\n\n        if (t>56.0 && t<64.0)\n\t        leadArpVolume=1.0;\n    }\n    else\n\t\tglobalTranspose=0;\n    \n    if (t<40.0 || t>48.0)\n\t    c+=drums(t*drumT)*4.0*drumRm;\n    \n    if (t>4.0)\n    {\n        c+=bass(t*bassT)*0.5;\n        c+=arp(t*arpT)*0.3;\n    }\n   \n    float leadC=0.0;\n    leadC+=lead(leadTime,leadArpVolume);\n    leadC+=lead(leadTime+sin(t)*0.001,leadArpVolume);\n    c+=leadC*0.2;\n    \n\t//ring mod\n    float t3=mod(t0,songTime+4.0);\n    if (t<4.0 || t3>songTime-4.0)\n//    if (t3>songTime-4.0)\n\t    c*=sin(t*440.0*16.0);\n\n    //fadein\n    c*=pow(min(0.2+_t*0.2,1.0),2.0);\n\n    \n    return c;\n}\n\nfloat mainSound( in int samp,float time)\n{\n    globalTime=time;\n   \n    baseFreq=1.0/speed;\n    time*=speed;\n    float c=song(time);\n    \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.y>=1.0)\n        discard;\n\n    vec2 uv  = vec2(fragCoord.x/iResolution.x, fragCoord.y/iResolution.y);\n    \n\tfloat x=fragCoord.x/iResolution.x;\n    x*=iTimeDelta;\n    x+=iTime;\n    float c=0.0;\n    c+=mainSound(0,x)*0.5+0.5;\n    fragColor=vec4( c,1,1,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv  = vec2(fragCoord.x/iResolution.x, fragCoord.y/iResolution.y);\n    float t=texture(iChannel0,vec2(uv.x,0)).x;\n    t*=t*t;\n    t-=0.5;\n    t*=2.0;\n    float y=(uv.y-0.5)*2.0;\n \ty*=mix(0.1,3.0,sin(iTime*0.1)); \n    t=t-y;\n    float lineWidth=mix(0.0,1.5,abs(cos(iTime*0.1)));//+sin(cos(iTime*0.14))*0.2,sin(cos(iTime*0.14*t)*0.5));\n    t=1.0-smoothstep(0.0*sign(t),lineWidth*sign(t),t);\n    \n    vec2 uv2=(uv-vec2(0.5))*2.0;\n    uv2.x*=1.0+sin(iTime*0.2)*0.01;\n    uv2.y*=1.0+sin(iTime*0.2)*0.01;\n    uv2/=2.0;\n    uv2+=vec2(0.5);\n    vec3 old=texture(iChannel1,vec2(uv2)).rgb;\n    old*=0.8+sin(t*iTime*0.5)*0.3;\n    vec3 rgb=vec3(abs(sin(iTime*3.1)*0.2)+0.4,sin(iTime)*0.2+0.5,sin(iTime*0.31)*0.3+0.4)*t;\n    old+=rgb;\n\tfragColor=vec4(old,1.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\n   Songname: 5450\n   Composer: Pink/aBYSs\n       Date: March, 2016\n*/\nint globalTranspose=0;\nfloat baseFreq=1.0;\nfloat globalTime=0.0;\nfloat PI=3.141592;\nfloat speed=1.2;\n \n#define TT(d) mod(mod(time,1.0)-d,1.0)\n\nfloat rand(float t){\n    return fract(sin(t*1793.326) * 43758.5453);\n}\n\nfloat ws(float x,float a)\n{\n\treturn x*(abs(x) + a)/(x*x + (a-1.0)*abs(x) + 1.0);\n}\n\nfloat sn(float _time)\n{\n    float freq=680.0*baseFreq;\n\tfloat c=0.0;\n    const int  num=7;\n    for (int i=0;i<num;i++)\n    {\n        float time=_time-float(i)*(0.09+float(i)*0.01);\n\n        if (time<0.0)\n            continue;\n        \n        float t=1.0-(time*1.0);\n        t=max(t,0.0);\n        t=pow(t,2.0);\n\n        float f=sin(t*freq)/PI;\n\n    \tf=ws(f,2.9);\n        t=time*baseFreq;\n        f*=pow(max(0.0,1.0-(t*6.0)),4.0);\n        f+=rand(time)*0.4*pow(1.0-t,20.0);\n    \tf=ws(f,1.9);\n\t    f= clamp(f,-1.0,1.0);\n        f*=0.7;\n        c+=f/float(1+(i*i*4));\n        \n    }\n    \n    return c*0.35;        \n}\n\nfloat bd(float time)\n{\n    float freq=100.0*baseFreq;\n    float vol=0.4;\n    float depth=4.0;\n\n    float t=1.0-(time*4.0);\n    t=max(t,0.0);\n    t=pow(t,depth);\n    float f=cos(t*freq)/PI;\n    \n    float t2=time*baseFreq;\n    \n    f*=pow(1.0-t2,8.0);\n//    f=ws(f,2.0);\n    f+=rand(time)*pow(1.0-t2,1464.0)*0.5;\n\n    return clamp(f*vol,-1.0,1.0);\n}\n\nfloat bs(float time,int note)\n{\n    note+=globalTranspose;\n    \n    float base_a4=110.0;\n    float freq=base_a4*pow(2.0,float(note)/12.0)*baseFreq;\n    \n    float t=1.0-(time*1.0);\n    t=max(t,0.0);\n\t\n    //create sqr duty wave\n    float duty=cos(time*4.0)/PI;\n    duty=duty*0.5+0.5;\n    float f1=fract(t*freq);\n    float f2=fract(duty+t*freq);\n    float f=f1-f2;\n    f= clamp(f,-1.0,1.0);\n    \n\tfloat t2=time*baseFreq;\n    f*=pow(max(0.0,1.0-(t2*2.0)),3.0);\n\n    //hihat\n    f+=rand(time)*0.5*pow(1.0-t2,16.0);\n\n    return f;\n}\n\nfloat ld(float time,int note,float speed,float arpVolume)\n{\n    note+=globalTranspose;\n    \n    float base_a4=440.0;\n    float freq=base_a4*pow(2.0,float(note)/12.0)*baseFreq;\n    freq*=speed;\n    \n    freq+=freq*step(mod(time,0.1),0.05)*arpVolume;\n\t\n    //vibrato\n    float vibratoDelay=0.2;\n    freq+=1.0+sin(time*20.0*speed)/PI*0.001*freq*step(0.0,time-vibratoDelay);\n\n    float t=1.0-(time*1.0);\n    t=max(t,0.0);\n\t\n    //create sqr duty wave\n    float duty=cos(time*2.0+globalTime*0.5)/PI;\n    duty=duty*0.2+0.8;\n    float f1=fract(t*freq);\n    float f2=fract(duty+t*freq);\n    float f=f1-f2;\n    f= clamp(f,-1.0,1.0);\n    \n\tfloat t2=time*baseFreq;\n    f*=pow(max(0.0,1.0-(t2*1.0)),1.5);\n\n    //hihat\n  //  f+=rand(time)*0.2*pow(1.0-t2,16.0);\n\n    return f;\n}\n\nfloat ap(float _time,int note[3],float speed,float delay)\n{\n    note[0]+=globalTranspose;\n    note[1]+=globalTranspose;\n    note[2]+=globalTranspose;\n\n    float base_a4=440.0;\n    float c=0.0;\n    for (int i=0;i<3;i++)\n    {\n        float time=_time+float(i)*delay;\n        float freq=base_a4*pow(2.0,float(note[i])/12.0)*baseFreq;\n        freq*=speed;\n\n        //vibrato\n        float vibratoDelay=0.1;\n        freq+=1.0+sin(time*20.0*speed)/PI*0.0005*freq*step(0.0,time-vibratoDelay);\n\n        float t=1.0-(time*1.0);\n        t=max(t,0.0);\n\n        //create sqr duty wave\n        float duty=cos(time*5.0)/PI;\n        float f1=fract(t*freq);\n        float f2=fract(duty+t*freq);\n        float f=f1-f2;\n        f= clamp(f,-1.0,1.0);\n\n        float t2=time*baseFreq;\n        f*=pow(max(0.0,1.0-(t2*1.0)),1.5);\n        \n        c+=f;\n    }\n        \n    return c;\n}\n\nfloat drums(float t)\n{\n    float c=0.0;\n\n    float n = 0.0, b = 0.0, x = 0.0;\n    #define BD(d)   c+=bd(TT(d));\n    #define SN(d)   c+=sn(TT(d));\n\t\n    float time=mod(t,4.0);\n\n    if (time<1.0)\n    {\n        BD(0.0);\n        SN(0.5);\n        BD(0.75);\n    }\n\telse\n    if (time<2.0)\n    {\n        BD(0.0);\n        SN(0.5);\n    }\n\telse\n    if (time<3.0)\n    {\n        BD(0.0);\n        SN(0.5);\n        BD(0.75);\n    }\n    else\n    if (time<4.0)\n    {\n        BD(0.0);\n        SN(0.25);\n        SN(0.5);\n        SN(0.75);\n    }\n\n    \n    return c;\n}\n\nfloat lead(float t,float arpVolume)\n{\n    float c=0.0;\n    float speed=0.5;\n\n    #define LD(d,n)   c+=ld(TT(d),n,1.0/speed,arpVolume)*step(0.0,time-d);\n   \n    float time=mod(t*speed,32.0);\n    if (time>8.0 && time<16.0)time-=8.0;\n\n    int i=0;\n    float f=0.0;\n    if (time<1.0)\n    {\n        LD(0.0,i);\n        LD(0.5,i+2);\n\t}\n\telse\n    if (time<2.0)\n    {\n\t\ttime=fract(time);\n        LD(0.0,i+3);\n        LD(0.125*1.0,i+5);\n        LD(0.125*3.0,i);\n        LD(0.125*5.0,i-2);\n\t}\n\telse\n    if (time<3.0)\n    {\n\t\ttime=fract(time);\n        LD(0.0,i);\n        LD(0.5,i+2);\n    }\n    else\n    if (time<4.0)\n    {\n\t\ttime=fract(time);\n        LD(0.0,i+3);\n        LD(0.125*1.0,i+5);\n        LD(0.125*3.0,i+10);\n        LD(0.125*5.0,i+7);\n    }\n    else\n    if (time<5.0)\n    {\n\t\ttime=fract(time);\n        LD(0.0,i);\n        LD(0.5,i+2);\n\t}\n\telse\n    if (time<6.0)\n    {\n\t\ttime=fract(time);\n        LD(0.0,i+3);\n        LD(0.125*1.0,i+5);\n        LD(0.125*3.0,i);\n        LD(0.125*5.0,i-2);\n\t}\n\telse\n    if (time<7.0)\n    {\n\t\ttime=fract(time);\n        LD(0.0,i);\n        LD(0.5,i-2);\n    }\n    else\n    if (time<8.0)\n    {\n\t\ttime=fract(time);\n        i=-12;\n        LD(0.0,i+7);\n        LD(0.125*1.0,i+10);\n        LD(0.125*2.0,i+5);\n        LD(0.125*3.0,i+7);\n    }\n\n\n    return c;\n}\n\nfloat arp(float t)\n{\n    float c=0.0;\n    float speed=4.0;\n    float delay=-0.4;\n\n    #define ARP(d,n)   c+=ap(TT(d),n,1.0/speed,delay);\n    \t\n    float time=mod(t*speed,4.0*speed);\n\t\n    float  g=time/speed;\n    int i[3];\n    if (g<1.0)\n\t    {i[0]=0;i[1]=3;i[2]=7;ARP(0.0,i);}\n\telse if (g<2.0)\n    \t{int a=-2;i[0]=0+a;i[1]=4+a;i[2]=7+a;ARP(0.0,i);}\n\telse if (g<3.0)\n    \t{int a=-4;i[0]=0+a;i[1]=4+a;i[2]=7+a;ARP(0.0,i);}\n\telse if (g<4.0)\n    \t{int a=-4;i[0]=0+a;i[1]=4+a;i[2]=7+a;ARP(0.0,i);}\n\n    return c*0.4;\n}\n\nfloat bass(float t)\n{\n    float c=0.0;\n\n    float n = 0.0, b = 0.0, x = 0.0;\n    #define BS(d,n)   c+=bs(TT(d),n);\n    \t\n    float time=mod(t,4.0);\n\n    int i=0;\n    \n    if (time<1.0)\n        i=0;\n\telse\n    if (time<2.0)\n        i=-5;\n\telse\n    if (time<3.0)\n        i=-2;\n    else\n    if (time<4.0)\n        i=-7;\n        BS(0.0,-12+i);\n        BS(0.25,0+i);\n        BS(0.5,-12+i);\n        BS(0.75,-5+i);\n    \n    return c;\n}\n\n\n\nfloat song(float t0)\n{\n//  t0+=40.0;\n\n    float _t=t0;\n\tfloat c=0.0;\n    float songTime=64.0+16.0;\n\tif (_t>64.0)_t+=4.0;\n    float t=mod(_t,songTime);\n\tfloat arpT=1.0;\n    float drumT=1.0;\n    float bassT=1.0;\n    float leadArpVolume=0.0;\n    float leadWait=8.0;\n    float leadTime=t-leadWait;\n    float drumRm=1.0;\n\n    if (t>24.0 && t<40.0)\n    {\n        globalTranspose=-3;\n\t    leadArpVolume=1.0;\n\t}\n    else\n    if (t>40.0 && t<48.0)\n    {\n        //add bd\n    \tfloat time=mod(_t,0.5);\n       \tBD(0.0);\n        c*=3.0;\n\n        globalTranspose=2;\n        arpT=0.5;\n        bassT=2.0;\n\t}\n\telse\n    if (t>48.0 && t<songTime)\n    {\n\n        globalTranspose=5;\n        \n        arpT=0.5;\n        drumT=0.5;\n        bassT=2.0;\n\t    leadTime=16.0-(t-48.0);\n        drumRm=0.7;\n\n        if (t>64.0)\n        {\n        \tglobalTranspose=8;\n        \tleadTime=t-64.0-4.0;\n            arpT=1.0;\n\n            if (t>64.0+12.0)\n            {\n               drumT=1.0;\n               drumRm=1.25;\n               leadArpVolume=step(0.1,mod(t,1.0));\n            }\n       }\n\t\t\n        //extra deep bass\n        c+=bass(t*0.5)*0.5;\n\n        if (t>56.0 && t<64.0)\n\t        leadArpVolume=1.0;\n    }\n    else\n\t\tglobalTranspose=0;\n    \n    if (t<40.0 || t>48.0)\n\t    c+=drums(t*drumT)*4.0*drumRm;\n    \n    if (t>4.0)\n    {\n        c+=bass(t*bassT)*0.5;\n        c+=arp(t*arpT)*0.3;\n    }\n   \n    float leadC=0.0;\n    leadC+=lead(leadTime,leadArpVolume);\n    leadC+=lead(leadTime+sin(t)*0.001,leadArpVolume);\n    c+=leadC*0.2;\n    \n\t//ring mod\n    float t3=mod(t0,songTime+4.0);\n    if (t<4.0 || t3>songTime-4.0)\n\t    c*=sin(t*440.0*16.0);\n\n    //fadein\n    //c*=pow(min(0.2+_t*0.2,1.0),2.0);\n\n    \n    return c;\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    globalTime=time;\n   \n    baseFreq=1.0/speed;\n    time*=speed;\n    float c=song(time);\n    \n    return vec2(c,c);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 38
                    }
                ],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}