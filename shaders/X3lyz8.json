{
    "Shader": {
        "info": {
            "date": "1725832160",
            "description": "originals fractal 62 by gaz",
            "flags": 0,
            "hasliked": 0,
            "id": "X3lyz8",
            "likes": 2,
            "name": " colorful Kaleidoscope 22",
            "published": 3,
            "tags": [
                "fractal",
                "neoncolor"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 108
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*2.5+.5)\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<70.;\n        O.xyz+=mix(vec3(0.,0.2,2.),H(g*1.1),.8)*1./e/8e3\n    )\n    {\n        p=g*d;\np.z-=iTime;\n\n vec2 uv = 3. * (2. * C - iResolution.xy) / iResolution.y;\n float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .31)) * 0.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n uv*=ma;\n  p.xy*=mat2(cos(iTime), sin(iTime),-sin(iTime),cos(iTime));\n  \n    float dist = length(uv);\n    float a2 = 1.25 * iTime;\n    \n    for(float i; i <5.; i++)\n    {\n \n        float scale = exp2(-i)*2.;\n        dist = abs(dist - scale) - 1.5 * scale;\n         uv*=ma;\n          \n        dist += 1.25 * fract(i * 1.375) * abs(abs(uv.x) + abs(uv.y));\n    }\n    float val = 0.34 / max(dist, 0.);\n    vec3 col = val * vec3(1.35, 0.5, 1.);\n\n        a=30.;\n        p=mod(p-a,a*2.)-a;\n        s=3.;\n           ;\n        for(int i=0;i++<10;){\n            p=.023-abs(p);\n          \n       p=p.zyx;\n\n            p.z<p.y?p=p.xzy:p;\n            s*=e=1.7+sin(iTime*.01)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.*3.,\n                    120,\n                    8.*5.\n                 )-col;\n         }\n         g+=e=length(p.yx)/s;\n         \n    }\n    vec2 uv = ( C - .5*iResolution.xy ) / iResolution.y;\n  \n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    O*= vec4(happy_star(uv, anim) * vec3(0.35,0.2,1.15)*2., 1.0);\n \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}