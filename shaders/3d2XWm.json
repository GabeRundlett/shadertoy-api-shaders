{
    "Shader": {
        "info": {
            "date": "1554054076",
            "description": "Some points and lines, from the tutorial: https://www.youtube.com/watch?v=3CycKKJiwis",
            "flags": 64,
            "hasliked": 0,
            "id": "3d2XWm",
            "likes": 26,
            "name": "Sparkles and lines",
            "published": 3,
            "tags": [
                "lines",
                "audio",
                "points"
            ],
            "usePreview": 0,
            "username": "gena",
            "viewed": 1508
        },
        "renderpass": [
            {
                "code": "// Credits: https://www.youtube.com/watch?v=KGJUl8Teipk\n// Original code: https://www.shadertoy.com/view/lscczl\n\n#define S(a, b, t) smoothstep(a, b, t)\n\nfloat DistLine(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    float t = clamp(dot(pa, ba)/dot(ba, ba), 0.0, 1.0);\n    \n    return length(pa - ba*t);\n}\n\nfloat N21(vec2 p) {\n\tp = fract(p * vec2(233.34, 851.73));\n    p += dot(p, p + 23.45);\n    \n    return fract(p.x * p.y);\n}\n\nvec2 N22(vec2 p) {\n\tfloat n = N21(p);\n    \n    return vec2(n, N21(p + n));\n}\n\nfloat speed = .4;\n\nvec2 GetPos(vec2 id, vec2 offs) {\n    vec2 n = N22(id + offs);\n    \n    return offs + sin(n * speed * iTime) * .4;\n}\n\nfloat Line(vec2 p, vec2 a, vec2 b) {\n\tfloat d = DistLine( p, a, b);\n    float m = S(.03, .01, d);\n    float d2 = length(a-b);\n    m *= S(1., .0, d2) * .5 + S(.05, .03, abs(d2 - .75));\n    \n    return m;\n}\n\nfloat Layer(vec2 uv) {\n    float m = .0;\n    vec2 gv = fract(uv) - .5;\n    vec2 id = floor(uv);\n\n    vec2 p[9];\n    int i = 0;\n    for(float y=-1.; y<=1.; y++) {\n        for(float x=-1.; x<=1.; x++, i++) {\n            p[i] = GetPos(id, vec2(x, y));\n        }\n    }\n\n    for(int i=0; i<9; i++) {\n        m += Line(gv, p[4], p[i]);\n\n        vec2 j = (p[i] - gv) * 20.;\n        float sparkle = 1./dot(j, j);\n        m += sparkle * ( sin(speed * iTime + fract(p[i].x) * 10.) * .4 + .4);\n    }\n    m += Line(gv, p[1], p[3]);\n    m += Line(gv, p[1], p[5]);\n    m += Line(gv, p[5], p[7]);\n    m += Line(gv, p[7], p[3]);\n    \n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n\n    vec2 mouse = (iMouse.xy / iResolution.xy) - .5;\n    \n    float gradient = uv.y - 0.15;\n    \n    float m = 0.0;\n    float t = iTime * speed * .1;\n\n    float s = sin(t);\n    float c = cos(t);\n    mat2 rot = mat2(c, -s, s, c); \n    uv *= rot;\n    mouse *= rot;\n\n    \n    for(float i=0.; i<= 1.; i+= 1./4.) {\n        float z = fract(i + t);\n        float size = mix(10., .5, z);\n        float fade = S(0., .5, z) * S(1.2, .8, z);\n        m += Layer(uv * size + i * 20. - mouse) * fade;\n    }\n    \n    float fft = texelFetch(iChannel0, ivec2(0.7, 0), 0).x;\n    \n    vec3 base = sin((t * t + 100.) * vec3(.345, .456, .657)) * .4 + .6;\n\n    vec3 col = base * m;\n\n    gradient *= fft;\n    \n    col -= gradient * base;\n       \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 24128,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/g-k-e-islam/yann-tiersen-amelie-soundtrack-piano-version"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}