{
    "Shader": {
        "info": {
            "date": "1613762486",
            "description": "metaballs + particles = metafluid\nAttract the fluid with the mouse on the left side.\nMove the right paddle with mouse on the right side.",
            "flags": 32,
            "hasliked": 0,
            "id": "wltfWf",
            "likes": 12,
            "name": "Metafluid II",
            "published": 3,
            "tags": [
                "simulation",
                "metaballs",
                "particles",
                "blobby",
                "liquid",
                "physics",
                "smin",
                "metafluid"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "float smin(in float a, in float b, in float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n\n    float d = 100000.0;\n    for (int i=0; i < NUMBER_OF_PARTICLES; i++) {\n        d = smin(d, length(uv - getParticlePos(i)) - PARTICLE_RADIUS, BLOBBINESS);\n    }\n\n    vec3 color = vec3(0.6, 0.3, 0.0) * smoothstep(unit, 0.0, mapEmptyEnvironment(uv, mousePos, iTime));\n    color.b = smoothstep(unit * 0.5, 0.0, d);\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Simlulation settings\n#define NUMBER_OF_PARTICLES 100\n#define PARTICLE_RADIUS 0.02\n\n#define GRAVITY 0.0001\n#define VISCOCITY 0.15\n#define BLOBBINESS 0.1\n\n// Utilities\n#define getPrevMouseState() texelFetch(iChannel0, ivec2(0, 0), 0).xyz\n#define getParticlePos(id) texelFetch(iChannel0, ivec2(id, 1), 0).xy\n#define getParticleVel(id) texelFetch(iChannel0, ivec2(id, 2), 0).xy\n\n#define mousePos vec3((iMouse.xy - 0.5 * iResolution.xy) / iResolution.y, iMouse.z)\n\n// Hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW):\nvec2 Hash12(in float x) {\n    vec3 p3 = fract(x * vec3(0.1031, 0.103, 0.0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nmat2 Rotate(in float r) {\n    float c = cos(r), s = sin(r);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdDisc(in vec2 p, in float r) {\n    return length(p) - r;\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    vec2 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(0.0, max(q.x, q.y));\n}\n\nfloat sdTriangleWave(in vec2 p, in float freq, in float amp) {\n    float pw = 1.0 / freq, qw = 0.25 * pw;\n    vec2 sc = vec2(2.0 * amp, pw);\n    float l = length(sc);\n    p.x = abs(mod(p.x + qw, pw) - 0.5 * pw) - qw;\n    p *= mat2(sc, -sc.y, sc.x) / l;\n    return length(vec2(p.x, max(0.0, abs(p.y) - 0.25 * l))) * sign(p.x);\n}\n\n// Attraction\n// Originally meant for particle-particle interactions so it get added for each\n// particle in the simulation. As a result, it can have a very dramatic affect\n// on the particles if it is not just based on particle-particle interaction.\nvec2 attract(in vec2 particle, in vec2 attractor, in vec3 mouse, in float time) {\n    if (mouse.x < 0.0 && mouse.z > 0.0) return normalize(mouse.xy - particle) * 0.0000025;\n    return vec2(0.0);\n}\n\n// Environment\nfloat mapEmptyEnvironment(in vec2 p, in vec3 mouse, in float time) {\n    float env = -sdBox(p, vec2(0.8, 0.415));\n\n    env = min(env, sdTriangleWave(p + vec2(0.0625, 0.34), 4.0, 0.15));\n    env = min(env, sdBox(p * Rotate(time * 2.0), vec2(0.02, 0.15)));\n\n    vec2 mp = p;\n    float h = 0.2 * sin(time);\n    env = min(env, sdBox(vec2(mp.x + 0.5, mp.y + h), vec2(0.2, 0.025)));\n\n    if (mouse.z > 0.0 && mouse.x > 0.0) mp -= vec2(mouse.x - 0.5, mouse.y);\n    else mp.y -= h;\n\n    env = min(env, sdBox(vec2(mp.x - 0.5, mp.y), vec2(0.2, 0.025)));\n\n    float r = 6.28 / 6.0, hr = 0.5 * r;\n    p = sin(mod(atan(p.y, p.x) + hr - time, r) - hr + vec2(1.57, 0.0)) * length(p);\n    env = min(env, sdDisc(p - vec2(0.2, 0.0), 0.025));\n\n    return env;\n}\n\nvec2 getEmptyEnvNormal(in vec2 p, in vec3 mouse, in float time) {\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec2(mapEmptyEnvironment(p + e.xy, mouse, time) - mapEmptyEnvironment(p - e.xy, mouse, time),\n                          mapEmptyEnvironment(p + e.yx, mouse, time) - mapEmptyEnvironment(p - e.yx, mouse, time)));\n}\n\n// Calculates environment velocity\nvec2 getEmptyEnvVel(in vec2 p, in vec3 mousePrev, in vec3 mouseCur, in float time, in float dt) {\n    float tb = time - dt;\n    vec2 d1 = getEmptyEnvNormal(p, mousePrev, tb) * mapEmptyEnvironment(p, mousePrev, tb);\n    vec2 d2 = getEmptyEnvNormal(p, mouseCur, time) * mapEmptyEnvironment(p, mouseCur, time);\n    return (d2 - d1) * dt;\n}\n\n// Particle generation\nvec2 generatePosition(in float id) {\n    return Hash12(id + iDate.w) - 0.5;\n}\n\nvec2 generateVelocity(in float id) {\n    return 0.001 + 0.001 * Hash12(id + 538.384);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "struct EnvData {\n    float distToEnv;\n    vec2 colliderVel;\n    float colliderType;\n    vec2 attraction;\n};\n\nEnvData mapEnvironment(in vec2 p, in int particleID) {\n    vec2 particlePos = getParticlePos(particleID);\n\n    float distToEnv = mapEmptyEnvironment(p, mousePos, iTime);\n    vec2 colliderVel = vec2(0.0, 0.0);\n    float colliderType = 0.0;\n    vec2 attraction = vec2(0.0);\n\n    for (int id=0; id < NUMBER_OF_PARTICLES; id++) {\n        // Avoid self collisions\n        if (id != particleID) {\n            vec2 colliderPos = getParticlePos(id);\n            distToEnv = min(distToEnv, length(p - colliderPos) - PARTICLE_RADIUS);\n\n            // Colliding with another particle\n            if (length(particlePos - colliderPos) < 2.0 * PARTICLE_RADIUS) {\n                colliderVel = getParticleVel(id);\n                colliderType = 1.0;\n            }\n\n            attraction += attract(particlePos, colliderPos, mousePos, iTime);\n        }\n    }\n\n    return EnvData(distToEnv, colliderVel, colliderType, attraction);\n}\n\nvec2 getEnvNormal(in vec2 p, in int id) {\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec2(mapEnvironment(p + e.xy, id).distToEnv - mapEnvironment(p - e.xy, id).distToEnv,\n                          mapEnvironment(p + e.yx, id).distToEnv - mapEnvironment(p - e.yx, id).distToEnv));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    ivec2 address = ivec2(fragCoord);\n\n    // Store mouse\n    if (address == ivec2(0, 0)) {\n        fragColor.xyz = mousePos;\n    }\n\n    // Generate particles\n    if (address.x < NUMBER_OF_PARTICLES && address.y == 1) {\n        fragColor.xy = generatePosition(fragCoord.x);\n    }\n\n    if (address.x < NUMBER_OF_PARTICLES && address.y == 2) {\n        fragColor.xy = generateVelocity(fragCoord.x);\n    }\n\n    if (iFrame > 0) {\n        if (address.x < NUMBER_OF_PARTICLES) {\n            // Load previous mouse state (important for proper mouse control)\n            vec3 mousePrev = getPrevMouseState();\n\n            // Load particle\n            vec2 particlePos = getParticlePos(address.x);\n            vec2 particleVel = getParticleVel(address.x);\n\n            // Update particle\n            particleVel.y -= GRAVITY;\n            particlePos += particleVel;\n\n            EnvData envData = mapEnvironment(particlePos, address.x);\n\n            // Colliding with the environment\n            if (envData.distToEnv < PARTICLE_RADIUS) {\n                vec2 hitNormal = getEnvNormal(particlePos, address.x);\n                vec2 perpNormal = hitNormal.yx * vec2(-1.0, 1.0);\n                vec2 hitPos = particlePos - hitNormal * envData.distToEnv;\n\n                // Decollide\n                particlePos += hitNormal * (PARTICLE_RADIUS - envData.distToEnv);\n\n                // Colliding with another particle\n                if (envData.colliderType > 0.0) {\n                    // Transfer energy (only true for perfectly elastic collisions of same mass)\n                    vec2 particleVel2 = envData.colliderVel;\n                    particleVel = dot(particleVel2, hitNormal) * hitNormal + dot(particleVel, perpNormal) * perpNormal;\n                }\n\n                else {\n                    // Gain velocity from the environment and bounce\n                    vec2 envVel = getEmptyEnvVel(hitPos, mousePrev, mousePos, iTime, iTimeDelta);\n                    particleVel += envVel * step(0.0, dot(envVel, hitNormal)); // Prevent suction effect\n                    particleVel = reflect(particleVel, hitNormal);\n                }\n\n                // Slow down\n                particleVel *= 1.0 - VISCOCITY;\n            }\n\n            particleVel += envData.attraction;\n\n            // Store new mouse position\n            if (address == ivec2(0, 0)) {\n                fragColor.xyz = mousePos;\n            }\n\n            // Store particle\n            if (address.y == 1) {\n                fragColor = vec4(particlePos, 0.0, 1.0);\n            }\n\n            if (address.y == 2) {\n                fragColor = vec4(particleVel, 0.0, 1.0);\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}