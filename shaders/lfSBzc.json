{
    "Shader": {
        "info": {
            "date": "1725269264",
            "description": "number",
            "flags": 0,
            "hasliked": 0,
            "id": "lfSBzc",
            "likes": 0,
            "name": "f_n_num",
            "published": 3,
            "tags": [
                "number"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 58
        },
        "renderpass": [
            {
                "code": "int f_n_digits_before_decpoint(float x) {\n    x = abs(x);               // Make sure the number is positive\n    if (x < 1.0) return 1;    // Handle cases where the number is less than 1\n    return int(floor(log(x) / log(10.0))) + 1;\n}\nfloat f_n_num(\n    vec2 o_trn, \n    float n_num, \n    float n_digits_before_decpoint,\n    float n_digits_after_decpoint\n){\n\n    float n_digits_before_decpoint_max = float(f_n_digits_before_decpoint(n_num));\n\n    float n = 0.;\n    float n_chars = 1.+n_digits_before_decpoint;\n    float n_decpoint = 0.;\n    if(n_digits_after_decpoint > 0.){\n        n_decpoint = 1.;\n        n_chars += + n_decpoint+ n_digits_after_decpoint;\n    }\n    vec2 o_trn_char = fract(o_trn)*vec2(n_chars, 1.);\n    float n_idx_char = floor(o_trn_char).x;\n    float n_idx_digit_before_decpoint = n_digits_before_decpoint-1.-(n_idx_char - 1.);\n    float n_idx_digit_after_decpoint = n_idx_char - 1. -1. - n_digits_before_decpoint+1.;\n    float n_num_abs = abs(n_num);\n    float n_digit_after_decimal = mod(\n        floor(n_num_abs * pow(10., n_idx_digit_after_decpoint))\n        , 10.\n    );\n    float n_digit_before_decimal = mod(\n        floor(floor(n_num_abs) / pow(10., n_idx_digit_before_decpoint))\n        ,10.\n    );\n    \n    vec2 o_trn_texture = vec2(0.);\n    if(n_idx_char == 0.){\n        if(n_num < 0.){\n            o_trn_texture = vec2(13. , 13.); // -\n        }else{\n            o_trn_texture = vec2(11. , 13.); // + \n        }\n    }\n    if(\n        n_idx_digit_before_decpoint >= 0.\n        && n_idx_digit_before_decpoint < n_digits_before_decpoint\n    ){\n        o_trn_texture = vec2(n_digit_before_decimal, 12.); \n        if(n_idx_digit_before_decpoint >= n_digits_before_decpoint_max){\n            o_trn_texture = vec2(0. , 13.);\n        }\n    }\n    if(n_idx_char == (1.+n_digits_before_decpoint+1.)-1.){\n        o_trn_texture = vec2(14., 13.); // . \n    }\n    if(n_idx_char > (1.+n_digits_before_decpoint+1.)-1.){\n        o_trn_texture = vec2(n_digit_after_decimal, 12.); \n    }\n    \n    \n    vec4 o_col_char = texture(iChannel0, (fract(o_trn_char)+o_trn_texture)/vec2(16.,16.));\n\n    n = o_col_char.a;\n    \n    return n;\n            \n}\nfloat f_n_num_auto(\n    vec2 o_trn, \n    float n_num, \n    float n_digits_after_decpoint\n){\n    float n_digits_before_decpoint = float(f_n_digits_before_decpoint(n_num));\n\n    return f_n_num(\n        o_trn, \n        n_num,\n        n_digits_before_decpoint,\n        n_digits_after_decpoint\n    );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float n_min = min(iResolution.x,iResolution.y);\n    float n_max = max(iResolution.x,iResolution.y);\n    vec2 uv = (fragCoord.xy-iResolution.xy*.5)/n_min;\n\n    float n_ratio = n_max/n_min;\n    vec2 uv2 = clamp(uv*vec2(1.,(1./n_ratio)*14.)+.5, 0., 1.); \n    //float n = f_n_num(uv2, 12911234.9547, 4.);\n    float n = f_n_num(uv2, 0034.1234, 4., 4.);\n    float n_aa = 0.001;//1./n_min;\n    float n_thick = 0.5;\n    \n    n = smoothstep(n_thick+n_aa*50., n_thick, n);\n    fragColor = vec4(n);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}