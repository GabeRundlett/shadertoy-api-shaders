{
    "Shader": {
        "info": {
            "date": "1476360376",
            "description": "simpler cleaner version of\nhttps://www.shadertoy.com/view/4djXRh\nlacks features, focuses on its unique camera.",
            "flags": 0,
            "hasliked": 0,
            "id": "XtG3DG",
            "likes": 9,
            "name": "Inverse Perspective small",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "inverse",
                "perspective",
                "orthographic",
                "fov"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 889
        },
        "renderpass": [
            {
                "code": "// Inverse Perspective by HLorenzi\n// (Distance Functions by iquilezles.org)\n// modified by ollj (no globals; no shadow; no materials; no slider)\n\n#define kMaxIterations 160\n\n//uncomment dynamicEps to have epsilon increase with every raymarch step. \n//-> spatial distortion that enables longer raymarch distances. (distant objects get lager surface epsilon till they fill the view)\n//-> spatial distortion in the distance tends to look better than distance fog.\n//-> tends to hit a surface in linear time even within >10x larger [kMaxIterations]\n//#define dynamicEps\n//this works independent from inverse perspective, but the visual effect is similar.\n\nvoid opU(inout float a,float b){a=min(a,b);}\nfloat dfBox(vec3 p,vec3 s,float r){return length(max(abs(p)-s+vec3(r),0.0))-r;}\n\n//MaterialColor() is a placeholder reminder that\n//EVERY space in 3d is assigned a material\n//and this function does it.\n//by calling a simpler COPY of df();\n//because in the end df() can hit a \"surface\" anywhere.\n//because MaterialColor() is likely called in df();\n//vec3 MaterialColor(vec3 p){return vec3(.5);}\n\nfloat df(vec3 p){float r=p.z;\n opU(r,dfBox(p-vec3( 3, 1,1.05),vec3(1),.5));\n opU(r,dfBox(p-vec3(-3, 1,1.05),vec3(1),.2));\n opU(r,dfBox(p-vec3( 0,-3,1.05),vec3(1),.7));return r;}\n\nvec3 normal(vec3 p){const vec2 e=vec2(.01,0);return normalize(vec3(\n df(p+e.xyy)-df(p-e.xyy),df(p+e.yxy)-df(p-e.yxy),df(p+e.yyx)-df(p-e.yyx)));}\n\n//return distance of nearest surface along ray with [o]origin and [d]direction.\nfloat raymarch(vec3 o,vec3 i){float e,d;for(int j=0;j<kMaxIterations;j++){float p=df(o+i*d);if(p<e)return d;d+=p;\n#ifdef dynamicEps                                 \n e=e+.00000001+e*1.00000001;\n#endif\n }return d;}\n\n/*\nfloat shadow(vec3 o,vec3 i){const float minDist=1.;float r=1.,t=.25;\n for(int j=0;j<10;j++){r=min(r,4.*df(o+i*t)/t),t+=.25;}return r;}\n*/\n\n//return raydirection and rayorigin from camera input.\n//[s]screenspace, [e]Eyepos, [t]target, [u]up, out Ray [o]origin, out Ray [d]direction , [f]fow\nvoid camera(vec2 s,vec3 e,vec3 t,vec3 u,out vec3 o,out vec3 d,float f){\t\n vec3 z=normalize(t-e),x=normalize(cross(z,u)),y=normalize(cross(x,z))*s.y;x*=s.x;//vec3 x,y,z==vec3 u,v,w\n float w=acos(dot(z,normalize(x))),//fow.xy\n a=(10./(2.*tan(abs(w)*.5)));o=e+(x+y)*(.7+.2*f)*a;d=normalize((e+z*2.+(x+y)*a)-o);}\n\n//q=fragment screenspace, f= fow, h=cameraHeight\nvec3 pixel(vec2 q,float f,float h){float dist=4.;\n vec3 t=vec3(0,0,1),u=vec3(0,0,1),//target,up\n e=t+vec3(cos(iTime/2.0)*dist,sin(iTime/2.)*dist,0.25+h*2.),//EyePos\n o,d;//origin,direction\n camera(q,e,t,u,o,d,f);//set o and d\n vec3 p=o+d*raymarch(o,d);//P=intersection of ray with surface by raymarching.\n vec3 light0=normalize(vec3(1,2,3)*9.-p);\n vec3 n=normal(p);\n vec3 c=n*.5+.5;\n //c=mix(c-vec3(.1),c,shadow(p,vec3(1,2,3)));\n //c*=max(dot(n,normalize(vec3(1,2,3))),0.)*.5+.5;//diffuse light\n if(dot(n,light0)>0.){float s=min(1.,pow(max(0.,dot(reflect(-light0,n),normalize(o-p))), 50.0));\n  return mix(c,vec3(1),s*.75);}\n return c;}\n\n#define clampe(a) clamp(-.2+1.4*(iMouse.a/e.a*2.),0.,2.)\nvoid mainImage(out vec4 r,in vec2 i){\n vec2 e=iResolution.xy,p=i/e;p=p*2.-vec2(1);p.x*=e.x/e.y;\n    float fow =clampe(x);\n    float height=2.-clampe(y);\n r=vec4(pixel(p,fow,height),1);}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}