{
    "Shader": {
        "info": {
            "date": "1469726186",
            "description": "Little shader art.",
            "flags": 8,
            "hasliked": 0,
            "id": "lldGDM",
            "likes": 20,
            "name": "Noise Bands (sound)",
            "published": 3,
            "tags": [
                "music",
                "art"
            ],
            "usePreview": 0,
            "username": "srtuss",
            "viewed": 569
        },
        "renderpass": [
            {
                "code": "// srtuss, 2016\n\nvec2 solve(float A, float B, float C)\n{\n    float X0, X1, Q;\n    float Discr = B * B - 4.0 * A * C;\n    if(Discr < 0.0)\n    {\n        return vec2(100.0, 100.0);\n    }\n    else if(Discr == 0.0)\n    {X0 = X1 = -0.5 * B / A;}\n    else\n    {\n        Q = (B > 0.0) ? -0.5 * (B + sqrt(Discr)) : -0.5 * (B - sqrt(Discr));\n        X0 = Q / A;\n        X1 = C / Q;\n    }\n    if(X0 > X1)\n    {\n        float H = X1;\n        X1 = X0;\n        X0 = H;\n    }\n    return vec2(X0, X1);\n}\n/*float hsh(vec2 p)\n{\n    float V = fract(p.x * 2467.0 + p.x * 4789.0 - p.x * p.y * 3761.0);\n    return V;\n}*/\nfloat hsh(vec2 p)\n{\n    return fract(sin(p.x * 234.28972) + cos(p.y * 298.879812) * 279872.18979);\n}\n\nstruct HIT\n{\n    float t0;\n    vec3 nml;\n    vec3 pos;\n    float oid;\n};\n\nvec3 gsph1 = vec3(0., -0.5, 0.);\n#define gsph2 vec3(1., sin(iTime) * 0.2 - 1.0, 0.)\nvec3 gsph3 = vec3(1.5, -0.5, -1.4);\n\nHIT scene(vec3 RO, vec3 RD)\n{\n    float WOID = -1.0;\n    vec3 WHit, WNml;\n    float Radius = 0.5;\n    vec3 Center = gsph1;\n    vec3 WL = RO - Center; float A = dot(RD, RD), B = 2.0 * dot(RD, WL), C = dot(WL, WL) - Radius * Radius;\n    float WT0 = 100.0, WT1;\n    WT1 = solve(A, B, C).x;\n    if(WT1 > 0.0)\n    {\n        WT0 = WT1;\n        WHit = WT1 * RD + RO;\n        WNml = WHit - Center;\n        WOID = 0.0;\n    }\n\n    vec3 PN = normalize(vec3(0.0, -0.7, 0.0));\n    WT1 = (0.0 - dot(PN, RO)) / dot(PN, RD);\n    if(WT1 > 0.0 && WT1 < WT0)\n    {\n        WT0 = WT1;\n        WNml = PN;\n        WOID = 1.0;\n    }\n\n    PN = normalize(vec3(0.0, 0.0, -1.0));\n    WT1 = (-1.501 - dot(PN, RO)) / dot(PN, RD);\n    if(WT1 > 0.0 && WT1 < WT0)\n    {\n        WT0 = WT1;\n        WNml = PN;\n        WOID = 4.0;\n    }\n\n    Radius = 0.2;\n    Center = gsph2;\n    WL = RO - Center; A = dot(RD, RD); B = 2.0 * dot(RD, WL); C = dot(WL, WL) - Radius * Radius;\n    WT1 = solve(A, B, C).x;\n    if(WT1 > 0.0 && WT1 < WT0)\n    {\n        WT0 = WT1;\n        WHit = WT0 * RD + RO;\n        WNml = WHit - Center;\n        WOID = 2.0;\n    }\n\n    Radius = 0.6;\n    Center = gsph3;\n    WL = RO - Center; A = dot(RD, RD); B = 2.0 * dot(RD, WL); C = dot(WL, WL) - Radius * Radius;\n    WT1 = solve(A, B, C).x;\n    if(WT1 > 0.0 && WT1 < WT0)\n    {\n        WT0 = WT1;\n        WHit = WT0 * RD + RO;\n        WNml = WHit - Center;\n        WOID = 3.0;\n        \n        //WNml += (fract(sin(WHit.x * 10.0 + WHit.y * 33.0 - WHit.z * 100.0) * 187252.521) - 0.5) * vec3(0.05);\n    }\n\n    HIT ret;\n    ret.nml = WNml;\n    ret.pos = RO + RD * WT0;\n    ret.t0 = WT0;\n    ret.oid = WOID;\n    return ret;\n}\n\nfloat nse(vec2 p)\n{\n\treturn hsh(floor(p) * 1.01);\n}\n\nfloat map1(vec2 p, vec2 id)\n{\n    if(nse(id * 1012.1986982) > 0.5)\n    {\n        p = p.yx;\n    }\n    float v = length(vec2(p.x, max(abs(p.y) - 0.8, 0.0))) - 0.04;\n    return v;\n}\n\nfloat map2(vec2 p, float ts, float g)\n{\n    p *= ts;\n    //p += iTime;\n    float stress = length(fwidth(p));\n    \n    float s = 1.0;\n    vec2 id = floor(p / s), id3 = id;\n    vec2 q = mod(p, s) - s * 0.5;\n    float v = 1e38;\n    \n    if(hsh(id * 0.4) > 0.5)\n\t    v = length(max(abs(q) - 0.3, 0.0)) - 0.15;\n    \n    if(hsh(id * 0.7) > 0.5)\n\t    v = min(v, length(max(abs(q) - 0.1, 0.0)) - 0.1);\n    \n    s = 2.0;\n    p += s * 0.25;\n    id = floor(p / s);\n    q = mod(p, s) - s * 0.5;\n    vec2 q2 = mod(p + s * 0.5, s) - s * 0.5;\n    vec2 id2 = floor(p / s + 0.5);\n    //v = 1e38;\n    \n    float w = map1(q, id);\n    w = min(w, map1(q2, id2));\n    \n    if(nse(id3) < 0.5)\n\t    v = min(w, max(v, -(w - 0.06)));\n    else\n        v = min(w, v);\n    \n    if(g > 0.5)\n        v = abs(v);\n    \n    return smoothstep(0.0, stress / ts, v / ts);\n}\n\nfloat map0(vec2 p)\n{\n    return mix(0.6, map2(p, 0.5, 0.0) * 0.15 + 0.85, mix(map2(p, 2.0, 0.0), map2(p, 2.0, 1.0), map2(p * 0.4, 2.0, 0.0)));\n}\n\nvec3 obj0(vec3 hit, vec3 nml, vec3 o)\n{\n    float v = dot(hit - o, normalize(vec3(1.2, 1.0, 0.5)));\n    v = abs(v) - 0.01;\n    return smoothstep(0.0, 0.02, v) * vec3(1.0);\n}\n\nvec3 mtl(vec3 hit, vec3 nml, float oid)\n{\n    //Surf = vec(sinr(Hit:x() * 20), sinr(Hit:y() * 20), sinr(Hit:z() * 20)) * 0.1 + 0.7\n    //Surf = array(vec(1.0, 0.5, 0.5), vec(0.4, 0.8, 0.5), vec(0.5, 0.5, 1.0), vec(1.0, 1.0, 0.5), vec(0.9))[OID + 1, vector]\n    vec3 surf = vec3(0.0, 0.0, 0.0);\n    surf = mix(surf, vec3(1) * obj0(hit, nml, gsph1), step(abs(oid - 0.0), 0.1));\n    surf = mix(surf, vec3(0.8) * map0(hit.xz), step(abs(oid - 1.0), 0.1));\n    surf = mix(surf, vec3(1) * obj0(hit, nml, gsph2), step(abs(oid - 2.0), 0.1));\n    surf = mix(surf, vec3(1) * obj0(hit, nml, gsph3), step(abs(oid - 3.0), 0.1));\n    surf = mix(surf, vec3(1), step(abs(oid - 4.0), 0.1));\n    //surf *= (nse(hit.xz) * 0.3 + nse(hit.xz * 0.2) * 0.3 + 0.2);\n    //Surf *= exp(Hit:distance(VEye) * -0.3) * 2.0\n    float D = 2.;\n    surf *= 1.0 - exp(max(0., distance(hit, vec3(1.5, 0.0, -1.4)) - 0.4) * -6.9) * 0.6;\n    surf *= 1.0 - exp(max(0., distance(hit, vec3(0.)) - 0.2) * -3.9) * 0.6;\n    return surf;\n}\n\nvec2 rotate(vec2 p, float a)\n{\n\treturn vec2(p.x * cos(a) - p.y * sin(a), p.x * sin(a) + p.y * cos(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.y *= iResolution.y / iResolution.x;\n    uv.y *= -1.0;\n    vec3 ro = vec3(0.4, -2., -3.5);\n    vec3 rd = normalize(vec3(uv, 1.66));\n    \n    float ct = iTime * 0.1;\n    ro.x += cos(ct);\n    ro.y += sin(ct);\n    \n    rd.xy = rotate(rd.xy, 0.1);\n    rd.xz = rotate(rd.xz, -0.1 + cos(ct) * 0.2);\n    rd.yz = rotate(rd.yz, -0.5 + sin(ct) * 0.2);\n    \n    \n    vec3 sun = normalize(vec3(-0.3, -1.0, -0.5));\n    \n    HIT h = scene(ro, rd);\n    h.nml = normalize(h.nml);\n    vec3 ref = reflect(rd, h.nml);\n    vec3 col = max(0.0, dot(h.nml, sun) + 0.2) * mtl(h.pos, h.nml, h.oid);\n    col += pow(max(0.0, dot(ref, sun)), 16.0);\n    col *= step(40.0, scene(h.pos + sun * 0.001, sun).t0) * 0.5 + 0.5;\n    col *= exp(h.t0 * -0.1);\n    \n    vec3 rdo = rd, roo = ro;\n    \n    rd = ref;\n    ro = h.pos + rd * 0.0001;\n    HIT hr = scene(ro, rd);\n    vec3 colr = vec3(0.0);\n    if(hr.t0 < 40.0)\n    {\n        hr.nml = normalize(hr.nml);\n        ref = reflect(rd, hr.nml);\n        colr = max(0.0, dot(hr.nml, sun) + 0.2) * mtl(hr.pos, hr.nml, hr.oid);\n        colr += pow(max(0.0, dot(ref, sun)), 16.0);\n        colr *= step(40.0, scene(hr.pos + sun * 0.001, sun).t0) * 0.5 + 0.5;\n        colr *= exp((h.t0 + hr.t0) * -0.1);\n    }\n    \n    /*vec3 pn = normalize(vec3(0.0, 1.0, 0.0));\n    for(int i = 0; i < 5; ++i)\n    {\n        float t0 = (-0.6 - dot(roo, pn)) / dot(rdo, pn);\n        vec3 hit = roo + rdo * t0;\n\n        col += -map2(hit.xz, 5.0, 1.0) * 0.2;\n    }\n    col = max(col, vec3(0.));*/\n    col = col * 0.9 + colr * 0.3;\n    col = pow(col, vec3(3.2) * vec3(1.0, 0.8, 0.5)) * 2.0;\n    col = pow(col, vec3(1.0 / 2.2));\n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// srtuss, 2016\n\nfloat hsh(float x)\n{\n    return fract(sin(x * 237.234234) * 982734.1235);\n}\n\nfloat nse(float x)\n{\n    float fl = floor(x);\n    x = smoothstep(0., 1., fract(x));\n    return mix(hsh(fl), hsh(fl + 1.), x) - .5;\n}\n\nfloat fbm(float x)\n{\n    return nse(x) + nse(x * -2.) * .5 + nse(x * 4.1) * .25;\n}\n\nvec2 metal(float time, float seed, float fmul, float lp)\n{\n    vec2 v = vec2(0.);\n    for(int i = 0; i < 30; ++i)\n    {\n        float f = 100. + pow(hsh(float(i) + seed), 3.) * 15000.;\n        f *= fmul;\n        vec4 dat = texture(iChannel0, vec2(float(i) / 100., time * 0.1));\n        \n        float amp = dat.x * exp(-f * lp);\n        \n    \tv += sin(time * f * 6.) * amp * (vec2(nse(time * .09 * f), nse(time * .091 * f)) * .8 + .2);\n        time -= 3.3333;\n    }\n    v *= 0.6;\n    return v;\n}\n\nvec2 stereomix(float time)\n{\n    float spd = 0.2;\n    \n    float sd = floor(time * spd) * 100.;\n    float lp = .002;//exp(-5. - clamp(time * .4, 0., 5.));\n    \n    \n   \tvec2 v = mix(metal(time, sd, .1, lp), metal(time, sd + 100., .1, lp), smoothstep(0., 1., fract(time * spd)));\n    \n    spd = .13333;\n    sd = floor(time * spd) * 100.;\n    vec2 vh = mix(metal(time, sd, 1., lp), metal(time, sd + 100., 1., lp), smoothstep(0., 1., fract(time * spd)));\n\t//v += .3 * clamp(vh, -0.01, .01);\n    \n    \n    float tmp = fract(time * 3.);\n    //v += sin(tmp * 5000. * exp(.3 * (-1. + tmp))) * 0.01;\n    \n    v += vec2(0.1, .2) * .2 * (sin(time * 13000.)) * smoothstep(0.001, 0., abs(fract(time * .1) - .5) - 0.015);\n    //v += vec2(0.05, .1) * (sin(time * 13000.)) * smoothstep(0.001, 0., abs(fract(time * .1333) - .5) - 0.03);\n    \n    \n    return vec2(v);\n}\n\nfloat tempo = 2.1;\n\nfloat echo(float time)\n{\n   \tfloat v = 0.;\n    float nt = floor(hsh(floor(time * tempo * 4.)) * 2.) * 5.;\n    float tm = fract(time * tempo * 4.);\n    v += sin(time * 5000. * exp2(nt / 12.)) * exp(tm * -2.) * smoothstep(.0, .1, tm);\n    \n    return v;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    vec2 v = stereomix(time);//(stereomix(time) + stereomix(time + .5 / iSampleRate)) * .5;\n    \n    \n    \n    float tm = fract(time * tempo) / tempo, tmk = tm;\n    float w = sin(tm * 400. * exp(tm * -0.5)) * exp(tm * -10.);\n    w += 1. * sin(tm * 1000. * exp(tm * -0.4)) * exp(tm * -100.);\n    //w += (hsh(tm * 100.)) * 0.1 * exp(tm * -20.);\n    w = clamp(w, -.4, .4);\n    \n    float mhats = smoothstep(31.99, 32., time * tempo);\n    \n    tm = fract(time * tempo + .5) / tempo;\n    w += hsh(fract(time)) * exp(tm * -40.) * .3 * mhats;\n    tm = fract(time * tempo + .75) / tempo;\n    w += hsh(fract(time)) * exp(tm * -40.) * .05 * mhats;\n    tm = fract(time * tempo + .25) / tempo;\n    w += hsh(fract(time)) * exp(tm * -40.) * .03 * mhats;\n    \n    tm = mod(time * tempo + .25, 4.) / tempo;\n    v += hsh(fract(time)) * exp(tm * -5.) * .03 * mhats;\n    \n    tm = mod(time * tempo, 32.) / tempo;\n    v += metal(tm, 2000., 3., tm * .0001) * .1 * exp(fract(tm) * -2.) * .5;\n    v += metal(tm, 3000., 3., tm * .0001) * .1 * exp(fract(-tm) * -2.) * .5;\n    \n    //v = vec2(0.);\n    float et = tempo / 4.;\n    v += (echo(time) + echo(time - et) * vec2(.5, .3) + echo(time - et * 2.) * vec2(.10, .25)) * .05 * smoothstep(15.99, 16., time * tempo);\n    \n    v = (w * .3 + v * clamp(1. - exp(tmk * -9.) * 2. * smoothstep(0., 0.005, tmk), 0., 1.));\n    \n    v = (1. - exp(abs(v) * -1.5)) * sign(v);\n    \n    return v;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Sound",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 38
                    }
                ],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}