{
    "Shader": {
        "info": {
            "date": "1468521281",
            "description": "Gut-wrenching - only for the brave",
            "flags": 0,
            "hasliked": 0,
            "id": "XltGRM",
            "likes": 14,
            "name": "[SH16B] Aerobatics",
            "published": 3,
            "tags": [
                "speed",
                "flight",
                "sh16b"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 951
        },
        "renderpass": [
            {
                "code": "// \"[SH16B] Aerobatics\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Noisefv2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 AxToRMat (vec3 vz, vec3 vy);\nvec2 Rot2D (vec2 q, float a);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\n\n#define N_FLYER 2\n#define N_PSEG 12\n\nint idObj, idFlmGrp;\nmat3 flyerMat[N_FLYER], flMat;\nvec3 flyerPos[N_FLYER], cPt[N_PSEG], cPtOrg, cUpCirc, cDnCirc, flPos, qHit, qHitFlm,\n   sunDir, flmCylPos;\nfloat tLen[N_PSEG], hTop, rLoop, sHzRamp, rCirc, sDnRamp, sUpRamp, sHzStr, vfLoop,\n   dstFar, tCur, fusLen, flmCylRad, flmCylLen, vFly, ptFac;\nconst float pi = 3.14159;\nconst int npSeg = N_PSEG;\nconst int idCkp = 11, idFus = 12, idEngO = 13, idEngI = 14, idWngI = 15,\n   idWngO = 16, idTlf = 17, idRng = 18;\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 vn, col;\n  vec2 w, e;\n  float f;\n  if (rd.y >= 0.) {\n    col = vec3 (0.1, 0.2, 0.4) + 0.2 * pow (1. - rd.y, 8.) +\n       0.35 * pow (max (dot (rd, sunDir), 0.), 6.);\n    col = mix (col, vec3 (0.9), clamp (0.1 + 0.8 * rd.y *\n       Fbm2 (5. * rd.xz / max (rd.y, 0.001)), 0., 1.));\n  } else {\n    ro -= rd * ro.y / rd.y;\n    w = 0.5 * ro.xz;\n    f = Fbm2 (w);\n    e = vec2 (0.01, 0.);\n    vn = normalize (vec3 (f - Fbm2 (w + e.xy), 0.1, f - Fbm2 (w + e.yx)));\n    col = mix (vec3 (0.4, 0.5, 0.2), vec3 (0.35, 0.3, 0.1), f) *\n       (1. - 0.1 * Noisefv2 (31. * w));\n    col *= 0.1 + 0.9 * max (dot (vn, sunDir), 0.);\n    col = mix (col, vec3 (0.1, 0.2, 0.4) + 0.25, pow (1. + rd.y, 32.));\n  }\n  return col;\n}\n\nfloat FlmDf (vec3 p)\n{\n  vec3 q;\n  float d, dMin, r;\n  dMin = dstFar;\n  for (int k = 0; k < N_FLYER; k ++) {\n    q = flyerMat[k] * (p - flyerPos[k]) - flmCylPos;\n    r = flmCylRad * (0.6 + 0.4 * q.z / flmCylLen);\n    d = PrCylDf (q, r, flmCylLen);\n    if (d < dMin) { dMin = d;  qHitFlm = q;  idFlmGrp = k; }\n    q.x += 2. * flmCylPos.x;\n    d = PrCylDf (q, r, flmCylLen);\n    if (d < dMin) { dMin = d;  qHitFlm = q;  idFlmGrp = k; }\n  }\n  return dMin;\n}\n\nfloat FlmRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = FlmDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  if (d >= 0.001) dHit = dstFar;\n  return dHit;\n}\n\nfloat FlyerDf (vec3 p, float dMin)\n{\n  vec3 pp, q;\n  float d, wr, ws;\n  q = p;\n  q.yz = Rot2D (q.yz, 0.07 * pi);\n  d = PrCapsDf (q - fusLen * vec3 (0., 0.05, 0.), 0.11 * fusLen, 0.1 * fusLen);\n  if (d < dMin) { dMin = d;  idObj = idCkp;  qHit = q; }\n  q = p - fusLen * vec3 (0., 0., -0.12);\n  wr = -0.05 + q.z / fusLen;\n  q.xz *= 0.8;\n  d = PrCapsDf (q, (0.14 - 0.14 * wr * wr) * fusLen, fusLen);\n  if (d < dMin + 0.01 * fusLen) {\n    dMin = SmoothMin (dMin, d, 0.01 * fusLen);  idObj = idFus;  qHit = q;\n  }\n  pp = p;\n  pp.x = abs (pp.x);\n  q = pp - fusLen * vec3 (0.5, 0., -0.25);\n  ws = q.z / (0.4 * fusLen);\n  wr = ws - 0.1;\n  d = max (PrCylDf (q, (0.09 - 0.05 * wr * wr) * fusLen, 0.35 * fusLen),\n     - PrCylDf (q, 0.05 * fusLen, 0.36 * fusLen));\n  if (d < dMin) { dMin = d;  idObj = idEngO;  qHit = q; }\n  d = min (PrCylDf (q, (0.04 - 0.038 * ws * ws) * fusLen, 0.38 * fusLen),\n     PrCylDf (q - vec3 (0., 0., 0.03 * fusLen), 0.05 * fusLen, 0.28 * fusLen));\n  if (d < dMin) { dMin = d;  idObj = idEngI;  qHit = q; }\n  q = pp - fusLen * vec3 (0.1, 0., -0.15);\n  q.xz = Rot2D (q.xz, 0.12 * pi);\n  wr = 1. - 0.6 * q.x / (0.4 * fusLen);\n  d = PrFlatCylDf (q.zyx, 0.25 * wr * fusLen, 0.02 * wr * fusLen, 0.4 * fusLen);\n  if (d < dMin) { dMin = d;  idObj = idWngI;  qHit = q; }\n  q = pp - fusLen * vec3 (0.6, 0., -0.37);\n  q.xy = Rot2D (q.xy, -0.1 * pi);\n  q -= fusLen * vec3 (0.07, 0.01, 0.);\n  q.xz = Rot2D (q.xz, 0.14 * pi);\n  wr = 1. - 0.8 * q.x / (0.2 * fusLen);\n  d = PrFlatCylDf (q.zyx, 0.06 * wr * fusLen, 0.005 * wr * fusLen, 0.2 * fusLen);\n  if (d < dMin) { dMin = d;  idObj = idWngO;  qHit = q; }\n  q = pp - fusLen * vec3 (0.03, 0., -0.85);\n  q.xy = Rot2D (q.xy, -0.24 * pi);\n  q -= fusLen * vec3 (0.2, 0.02, 0.);\n  wr = 1. - 0.5 * q.x / (0.17 * fusLen);\n  q.xz = Rot2D (q.xz, 0.1 * pi);\n  d = PrFlatCylDf (q.zyx, 0.1 * wr * fusLen, 0.007 * wr * fusLen, 0.17 * fusLen);\n  if (d < dMin) { dMin = d;  idObj = idTlf;  qHit = q; }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  for (int k = 0; k < N_FLYER; k ++)\n     dMin = FlyerDf (flyerMat[k] * (p - flyerPos[k]), dMin);\n  dMin *= 0.8;\n  q = p - ptFac * 0.5 * (cPt[0] + cPt[1]);\n  q.y -= 1.5;\n  d = max (PrTorusDf (q, 0.2, 3.), - p.y);\n  if (d < dMin) { dMin = d;  idObj = idRng; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0002 || dHit > dstFar) break;\n  }\n  if (d >= 0.0002) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec4 FlyerCol ()\n{\n  vec3 qq, qqr, col;\n  float spec, br;\n  spec = 1.;\n  qq = qHit / fusLen;\n  br = 0.4 + 0.6 * abs (cos (3. * tCur));\n  col = vec3 (0.7, 0.7, 1.);\n  if (qq.y > 0.) col *= 0.5;\n  else col *= 1.2;\n  if (idObj == idTlf) {\n    qqr.xz = Rot2D (qq.xz, -0.1 * pi);\n    if (abs (qqr.x) < 0.08)\n       col *= 1. - SmoothBump (-0.005, 0.005, 0.001, qqr.z + 0.06);\n    if (qqr.z < - 0.06)\n       col *= 1. - SmoothBump (- 0.005, 0.005, 0.001, abs (qqr.x) - 0.08);\n  } else if (idObj == idWngI) {\n    qqr.xz = Rot2D (qq.xz, -0.12 * pi);\n    if (abs (qqr.x) > 0.1 && abs (qqr.x) < 0.28)\n       col *= 1. - SmoothBump (-0.005, 0.005, 0.001, qqr.z + 0.19);\n    if (qqr.z < - 0.19)\n       col *= 1. - SmoothBump (- 0.005, 0.005, 0.001, abs (abs (qqr.x) - 0.19) - 0.09);\n  } else if (idObj == idCkp && qq.z > 0.05) {\n    col = vec3 (0.4, 0.2, 0.1);\n  } else if (idObj == idEngO) {\n    if (qq.z > 0.34) {\n      col = vec3 (0.8, 0.8, 1.);\n    } else if (qq.z < -0.2 && length (qq.xy) < 0.05) {\n      col = vec3 (1., 0.3, 0.);\n      spec = 0.1;\n    }\n  } else if (idObj == idEngI) {\n    if (qq.z > 0.36) col = vec3 (1., 0., 0.);\n    else if (qq.z < 0.) {\n      col = vec3 (1., 0.3, 0.);\n      spec = 0.1;\n    } else {\n      col = vec3 (0.01);\n    }\n  }\n  if (idObj == idWngO && qq.x > 0.17 ||\n     idObj == idTlf && qq.x > 0.15 && qq.z < -0.03) {\n    col = vec3 (1., 0., 0.) * br;\n    spec = -1.;\n  } else if (idObj == idFus && qq.z > 0.81) {\n    col = vec3 (0., 1., 0.) * br;\n    spec = -1.;\n  }\n  return vec4 (col, spec);\n}\n\nfloat FlmAmp (vec3 p, vec3 rd)\n{\n  vec3 dp, q;\n  float g, s, fr, fz;\n  dp = (2. * flmCylRad / 30.) * rd;\n  g = 0.;\n  for (int i = 0; i < 30; i ++) {\n    p += dp;\n    s = length (p.xy);\n    if (s > flmCylRad || g > 10.) break;\n    fr = max (1. - s / flmCylRad, 0.);\n    fz = 0.6 + 0.4 * p.z / flmCylLen;\n    q = 5. * p / fusLen;\n    g += fr * fz * Noisefv3 (vec3 (q.xy, q.z +\n       50. * (1. - 0.5 * fr) * (100. + tCur)));\n  }\n  return min (0.15 * g, 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, vn;\n  float dstHit, dstFlm, aFlm;\n  int idObjT;\n  flmCylRad = 0.051 * fusLen;\n  flmCylLen = 0.25 * fusLen;\n  flmCylPos = vec3 (0.5 * fusLen, 0., -0.55 * fusLen - flmCylLen);\n  dstFlm = FlmRay (ro, rd);\n  dstHit = ObjRay (ro, rd);\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj != idRng) objCol = FlyerCol ();\n    else objCol = vec4 (1., 0.2, 0.2, 1.);\n    if (objCol.a >= 0.) {\n      col = objCol.rgb * (0.2 + 0.8 * (max (dot (vn, sunDir), 0.) +\n         objCol.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.)));\n      if (idObj != idRng) col = 0.8 * col + 0.2 * BgCol (ro, reflect (rd, vn));\n    } else col = objCol.rgb;\n  } else col = BgCol (ro, rd);\n  if (dstFlm < min (dstFar, dstHit)) {\n    aFlm = FlmAmp (qHitFlm, ((idFlmGrp == 0) ? flyerMat[0] : flyerMat[1]) * rd);\n    col = mix (col, mix (vec3 (1., 0.2, 0.2),\n       vec3 (1., 1., 0.7), 0.8 * aFlm), aFlm);\n  }\n  col = pow (clamp (col, 0., 1.), vec3 (0.8));\n  return col;\n}\n\nvoid PathSetup ()\n{\n  vec4 uVec = vec4 (1., 1., 1., 0.);\n  ptFac = 20.;\n  cPtOrg = vec3 (2., 0., -3.);\n  hTop = 1.5;\n  rLoop = 2.2;\n  sHzRamp = 1.;\n  rCirc = 2.;\n  sDnRamp = 1.5;\n  sUpRamp = 1.3 * sDnRamp;\n  sHzStr = sDnRamp - sUpRamp + 3. * sHzRamp;\n  vfLoop = 0.3;\n  cDnCirc = cPtOrg + vec3 (- rCirc, 0., -2. * sHzRamp);\n  cUpCirc = cPtOrg + vec3 (- rCirc, 2. * hTop, 2. * sDnRamp + 6. * sHzRamp);\n  cPt[0] = cDnCirc + vec3 (- rCirc, 0., sHzStr);\n  cPt[1] = cPt[0] + sHzStr * uVec.wwz;\n  cPt[3] = cUpCirc - rCirc * uVec.xww;\n  cPt[4] = cUpCirc + rCirc * uVec.xww;\n  cPt[2] = cPt[3] - 2. * sHzRamp * uVec.wwz;\n  cPt[5] = cPt[4] - 2. * sHzRamp * uVec.wwz;\n  cPt[7] = cPtOrg;\n  cPt[8] = cPtOrg;\n  cPt[6] = cPt[7] + 4. * sHzRamp * uVec.wwz;\n  cPt[9] = cDnCirc + rCirc * uVec.xww;\n  cPt[10] = cDnCirc - rCirc * uVec.xww;\n  cPt[11] = cPt[0];\n  tLen[0] = 0.;\n  for (int k = 1; k < npSeg; k ++) tLen[k] = length (cPt[k] - cPt[k - 1]);\n  tLen[4] = pi * rCirc;\n  tLen[8] = length (vec2 (2. * pi * rLoop, 0.)) * (1. + vfLoop);\n  tLen[10] = pi * rCirc;\n  for (int k = 1; k < npSeg; k ++) tLen[k] += tLen[k - 1];\n}\n\nvec3 PathLoc (float t, out vec3 oDir, out vec3 oNorm, out float oRl)\n{\n  vec3 p, p1, p2, u;\n  float w, ft, s, h;\n  int ik;\n  h = 2. * sin (0.43 * pi * t) + sin (0.79 * pi * t);\n  oRl = 0.01 * pi * h;\n  t = mod (t, tLen[npSeg - 1]);\n  for (int k = 1; k < npSeg; k ++) {\n    if (t < tLen[k]) {\n      t -= tLen[k - 1];\n      p1 = cPt[k - 1];\n      p2 = cPt[k];\n      w = tLen[k] - tLen[k - 1];\n      ik = k;\n      break;\n    }\n  }\n  oNorm = vec3 (0., 1., 0.);\n  ft = t / w;\n  if (ik == 4 || ik == 10) oRl += -0.25 * pi * SmoothBump (0.05, 0.95, 0.05, ft);\n  if (ik == 4) oRl += 2. * pi * smoothstep (0.4, 0.6, ft);\n  if (ik == 2 || ik == 6) {\n    oDir = p2 - p1;\n    p.xz = p1.xz + oDir.xz * ft;\n    p.y = p1.y + oDir.y * smoothstep (0., 1., ft);\n    oDir.y *= 6. * ft * (1. - ft);\n    oDir = normalize (oDir);\n  } else if (ik == 4) {\n    ft *= pi;\n    p = cUpCirc;\n    u = vec3 (- cos (ft), 0., sin (ft));\n    p.xz += rCirc * u.xz;\n    oDir = cross (oNorm, u);\n  } else if (ik == 8) {\n    ft = (ft < 0.5) ? ft * (1. + vfLoop * (1. - 2. * ft)) :\n       ft * (1. + 2. * vfLoop * (ft - 1.5)) + vfLoop;\n    p = 0.5 * (cPt[7] + cPt[8]);\n    ft *= 2. * pi;\n    u = vec3 (0., cos (ft), sin (ft));\n    p.yz += rLoop * (vec2 (1., 0.) - u.yz);\n    oNorm = u;\n    oDir = normalize (vec3 (0., 2. * pi * rLoop * vec2 (sin (ft), - cos (ft))));\n  } else if (ik == 10) {\n    ft *= pi;\n    p = cDnCirc;\n    u = vec3 (cos (ft), 0., - sin (ft));\n    p.xz += rCirc * u.xz;\n    oDir = cross (oNorm, u);\n  } else {\n    oDir = p2 - p1;\n    p = p1 + oDir * ft;\n    oDir = normalize (oDir);\n  }\n  p *= ptFac;\n  p.y += 2. + 0.1 * h;\n  return p;\n}\n\nvoid FlyerPM (float t, float vu)\n{\n  vec3 oDir, oNorm;\n  float oRl, c, s;\n  flPos = PathLoc (t, oDir, oNorm, oRl);\n  if (vu > 0.) {\n    oDir *= -1.;\n    oRl *= -1.;\n  }\n  flMat = AxToRMat (oDir, oNorm);\n  c = cos (oRl);\n  s = sin (oRl);\n  flMat = mat3 (c, - s, 0., s, c, 0., 0., 0., 1.) * AxToRMat (oDir, oNorm);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec3 ro, rd, vd, u;\n  vec2 canvas, uv, ut, mMid, mSize;\n  float dVu, f, pDist;\n  bool sWin;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  tCur += 5.;\n  sunDir = normalize (vec3 (1., 1., -1.));\n  PathSetup ();\n  fusLen = 1.;\n  vFly = 1.;\n  FlyerPM (vFly * tCur, 0.);        flyerPos[0] = flPos;  flyerMat[0] = flMat;\n  FlyerPM (vFly * tCur + 0.5, 0.);  flyerPos[1] = flPos;  flyerMat[1] = flMat;\n  mMid = vec2 (-0.67, 0.65) * vec2 (canvas.x / canvas.y, 1.);\n  mSize = 0.3 * vec2 (canvas.x / canvas.y, 1.);\n  ut = abs (uv - mMid) - mSize;\n  sWin = (max (ut.x, ut.y) < 0.);\n  if (sWin) {\n    ro = vec3 (0., 5., 0.);\n    vd = 0.5 * (flyerPos[0] + flyerPos[1]) - ro;\n    pDist = length (vd);\n    vd = normalize (vd);\n    u = - vd.y * vd;\n    f = 1. / sqrt (1. - vd.y * vd.y);\n    vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n    rd = vuMat * normalize (vec3 ((uv - mMid) / mSize.x, 2. + 5. * pDist / 50.));\n    dstFar = 200.;\n  } else {\n    dVu = - 1.;\n    if (false) dVu += 2. * SmoothBump (0.25, 0.75, 0.05, mod (tCur / 30., 1.));\n    FlyerPM (vFly * tCur + (0.25 + 0.6 * dVu), dVu);\n    ro = flPos + flMat * vec3 (0., 0.8 * fusLen, 0.);\n    rd = normalize (vec3 (uv, 3.)) * flMat;\n    dstFar = 100.;\n  }\n  ut = abs (ut);\n  fragColor = vec4 (((sWin && min (ut.x, ut.y) * canvas.y < 2.) ?\n     vec3 (0.3, 0.5, 0.2) : ShowScene (ro, rd)), 1.);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  return max (length (p.xy - vec2 (rhi *\n     clamp (p.x / rhi, -1., 1.), 0.)) - rlo, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nmat3 AxToRMat (vec3 vz, vec3 vy)\n{\n  vec3 vx;\n  vz = normalize (vz);\n  vx = normalize (cross (vy, vz));\n  vy = cross (vz, vx);\n  return mat3 (vec3 (vx.x, vy.x, vz.x), vec3 (vx.y, vy.y, vz.y),\n     vec3 (vx.z, vy.z, vz.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t1, t2;\n  vec3 ip, fp;\n  float q;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  q = dot (ip, cHashA3);\n  t1 = Hashv4f (q);\n  t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n              mix (mix (t2.x, t2.y, fp.x), mix (t2.z, t2.w, fp.x), fp.y), fp.z);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}