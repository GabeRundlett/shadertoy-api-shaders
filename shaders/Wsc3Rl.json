{
    "Shader": {
        "info": {
            "date": "1569041678",
            "description": "I wanted to use this image as a sprite, and the easiest way to create it was programatically.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wsc3Rl",
            "likes": 1,
            "name": "Donut graphic",
            "published": 3,
            "tags": [
                "image"
            ],
            "usePreview": 0,
            "username": "ashfordneil",
            "viewed": 311
        },
        "renderpass": [
            {
                "code": "float to_rads(float deg)\n{\n    return 2.0 * 3.14159 * deg / 360.0;\n}\n\nvec3 to_rgb(in vec3 hsl)\n{\n    float h = hsl.x;\n    float s = hsl.y;\n    float l = hsl.z;\n    \n    float C = (1.0 - abs(2.0 * l - 1.0)) * s;\n    float X = C * (1.0 - abs(mod(h / to_rads(60.0), 2.0) - 1.0));\n    float m = l - C / 2.0;\n    \n    vec3 rgb;\n    if (0.0 <= h && h < to_rads(60.0)) {\n        rgb = vec3(C, X, 0);\n    } else if (to_rads(60.0) <= h && h < to_rads(120.0)) {\n        rgb = vec3(X, C, 0);\n    } else if (to_rads(120.0) <= h && h < to_rads(180.0)) {\n        rgb = vec3(0, C, X);\n    } else if (to_rads(180.0) <= h && h < to_rads(240.0)) {\n        rgb = vec3(0, X, C);\n    } else if (to_rads(240.0) <= h && h < to_rads(300.0)) {\n        rgb = vec3(X, 0, C);\n    } else if (to_rads(300.0) <= h && h < to_rads(360.0)) {\n        rgb = vec3(C, 0, X);\n    } else {\n        rgb = vec3(1.0 - m, 1.0 - m, 1.0 - m);\n    }\n    \n    rgb += vec3(m, m, m);\n    rgb.x = clamp(rgb.x, 0.0, 1.0);\n    rgb.y = clamp(rgb.y, 0.0, 1.0);\n    rgb.z = clamp(rgb.z, 0.0, 1.0);\n    \n    return rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float res = min(iResolution.x, iResolution.y);\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (2.0 * fragCoord/res) - vec2(1, 1);\n    \n    vec4 dead = vec4(to_rgb(vec3(0.0, 0.0, 0.5)), 1.0);\n    \n    if (uv.x * uv.x + uv.y * uv.y > 1.0) {\n        fragColor = dead;\n        return;\n    }\n\n    float angle = 3.14159 + atan(uv.y, uv.x);\n    \n    float radius = sqrt(uv.x * uv.x + uv.y * uv.y);\n    \n    float saturation = pow(sin(radius * 3.14159), 2.0);\n    \n    if (radius > 0.5 && saturation < 0.3) {\n        fragColor = dead;\n        return;\n    } else {\n    \n    vec3 color = to_rgb(vec3(angle, 1.0, saturation));\n    \n    fragColor = vec4(color, 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}