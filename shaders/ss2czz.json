{
    "Shader": {
        "info": {
            "date": "1643303737",
            "description": "An animation switching between a metric inspired by brilliance/blackness and lightness (in Oklab), showing sRGB colors of max saturation next to grayscale colors of the same intensity.",
            "flags": 0,
            "hasliked": 0,
            "id": "ss2czz",
            "likes": 5,
            "name": "Lightness vs brilliance",
            "published": 3,
            "tags": [
                "brilliancelightness"
            ],
            "usePreview": 0,
            "username": "bjornornorn",
            "viewed": 729
        },
        "renderpass": [
            {
                "code": "vec2 findCenterAndPurity(vec3 x)\n{\n    // Matrix derived for (c_smooth+s_smooth) to be an approximation of the macadam limit, the limit of reflectance color intensity\n    // \n    mat3 M = mat3(\n        2.26775149, -1.43293879,  0.1651873,\n        -0.98535505,  2.1260072, -0.14065215,\n        -0.02501605, -0.26349465,  1.2885107);\n\n    x = x*M;\n    \n    float x_min = min(x.r,min(x.g,x.b));\n    float x_max = max(x.r,max(x.g,x.b));\n    \n    float c = 0.5*(x_max+x_min);\n    float s = (x_max-x_min);\n    \n    // math trickery to create values close to c and s, but without producing hard edges\n    vec3 y = (x-c)/s;\n    float c_smooth = c + dot(y*y*y, vec3(1.0/3.0))*s;\n    float s_smooth = sqrt(dot(x-c,x-c)/2.0);\n    return vec2(c_smooth, s_smooth);\n}\n\nvec3 compute(float L, float hue, float sat)\n{\n    vec3 c;\n    c.x = L;\n    c.y = sat*cos(hue);\n    c.z = sat*sin(hue);\n    \n    float l_ = 0.0 + 0.3963377774f * c.y + 0.2158037573f * c.z;\n    float m_ = 0.0 - 0.1055613458f * c.y - 0.0638541728f * c.z;\n    float s_ = 0.0 - 0.0894841775f * c.y - 1.2914855480f * c.z;\n    \n    vec3 lms = vec3(l_,m_,s_);\n    \n    if (sat > 0.001)\n    {\n        vec2 CP = findCenterAndPurity(lms); \n\n        lms -= (0.5-0.5*cos(0.2*iTime*2.0*3.1415932))*(CP.x + 1.0*CP.y);   \n        //lms -= CP.x;\n        \n        lms += c.x;\n\n    }\n    else\n    {\n        lms += c.x;\n    }\n    \n    lms = lms*lms*lms;\n    \n    float l = lms.x;\n    float m = lms.y;\n    float s = lms.z;\n\n    vec3 rgbResult;\n    rgbResult.r = + 4.0767245293f*l - 3.3072168827f*m + 0.2307590544f*s;\n    rgbResult.g = - 1.2681437731f*l + 2.6093323231f*m - 0.3411344290f*s;\n    rgbResult.b = - 0.0041119885f*l - 0.7034763098f*m + 1.7068625689f*s;\n \n    //rgbResult *= c.x*c.x*c.x/dot(vec3(0.2126,0.7152,0.0722),rgbResult); \n    \n    return rgbResult;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float xx = (fragCoord.x / iResolution.x)*24.0;\n    float yy = (fragCoord.y / iResolution.x)*24.0+1.5;\n\n    float h = floor(xx)/24.0* 3.141592 * 2.;\n    float L = (iResolution.x/iResolution.y)*floor(yy)/24.0;\n    float C = -0.5*log(0.5+0.5*sin(iTime));\n\n    float C_guess = 1.0;\n    float C_max = 0.0;\n    \n    for (int i=0; i<2000; i++)\n    {\n        vec3 rgbTest = compute(L, h, C_guess*float(i)/2000.0);\n        float diff = length(rgbTest - clamp(rgbTest, 0., 1.));\n    \n        if(diff < 0.0001)\n        {\n            C_max = C_guess*float(i)/2000.0;\n        }\n    }\n    \n    vec3 rgb;\n    \n    rgb = compute(L, h, C_max);\n    \n    \n    fragColor.rgb = Srgb3(vec3(L*L*L));\n    //fragColor.rgb = Srgb3(vec3(0.2));\n    \n    if (((xx)-floor(xx)) > 0.25)\n    if (((xx)-floor(xx)) < 0.75)   \n    if (((yy)-floor(yy)) > 0.25)\n    if (((yy)-floor(yy)) < 0.75)\n        fragColor.rgb = Srgb3(rgb);  \n        \n    fragColor.a = 1.;\n    \n        \n    //fragColor = vec4(Srgb3(avgColor),1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define F1 float\n#define F3 vec3\n\nF1 Linear1(F1 c){return(c<=0.04045)?c/12.92:pow((c+0.055)/1.055,2.4);}\nF3 Linear3(F3 c){return F3(Linear1(c.r),Linear1(c.g),Linear1(c.b));}\nF1 Srgb1(F1 c){return(c<0.0031308?c*12.92:1.055*pow(c,0.41666)-0.055);}\nF3 Srgb3(F3 c){return F3(Srgb1(c.r),Srgb1(c.g),Srgb1(c.b));}\n\nvec3 rgb_to_oklab(vec3 c) \n{\n    float l = 0.4121656120f * c.r + 0.5362752080f * c.g + 0.0514575653f * c.b;\n    float m = 0.2118591070f * c.r + 0.6807189584f * c.g + 0.1074065790f * c.b;\n    float s = 0.0883097947f * c.r + 0.2818474174f * c.g + 0.6302613616f * c.b;\n\n    float l_ = pow(l, 1./3.);\n    float m_ = pow(m, 1./3.);\n    float s_ = pow(s, 1./3.);\n\n    vec3 labResult;\n    labResult.x = 0.2104542553f*l_ + 0.7936177850f*m_ - 0.0040720468f*s_;\n    labResult.y = 1.9779984951f*l_ - 2.4285922050f*m_ + 0.4505937099f*s_;\n    labResult.z = 0.0259040371f*l_ + 0.7827717662f*m_ - 0.8086757660f*s_;\n    return labResult;\n}\n\nvec3 oklab_to_rgb(vec3 c) \n{\n    float l_ = c.x + 0.3963377774f * c.y + 0.2158037573f * c.z;\n    float m_ = c.x - 0.1055613458f * c.y - 0.0638541728f * c.z;\n    float s_ = c.x - 0.0894841775f * c.y - 1.2914855480f * c.z;\n\n    float l = l_*l_*l_;\n    float m = m_*m_*m_;\n    float s = s_*s_*s_;\n\n    vec3 rgbResult;\n    rgbResult.r = + 4.0767245293f*l - 3.3072168827f*m + 0.2307590544f*s;\n    rgbResult.g = - 1.2681437731f*l + 2.6093323231f*m - 0.3411344290f*s;\n    rgbResult.b = - 0.0041119885f*l - 0.7034763098f*m + 1.7068625689f*s;\n    return rgbResult;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}