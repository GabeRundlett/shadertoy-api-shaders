{
    "Shader": {
        "info": {
            "date": "1685362159",
            "description": "Monte carlo ray tracer with tonemapping, gamma correct rendering, and caustics.",
            "flags": 32,
            "hasliked": 0,
            "id": "mttSD8",
            "likes": 2,
            "name": " Ray tracer - Mik0",
            "published": 3,
            "tags": [
                "raytracing"
            ],
            "usePreview": 0,
            "username": "Mik0",
            "viewed": 326
        },
        "renderpass": [
            {
                "code": "#define halfpi acos(0.0)\n#define pi (acos(0.0)*2.0)\n#define tau (acos(0.0)*4.0)\n#define constant (180.0/pi)\n#define PHI ((sqrt(5.0)+1.0)/2.0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uvn = fragCoord/iResolution.xy;\n\n    \n    vec3 col = texture(iChannel0, uvn).xyz;//float(iFrame+1);\n    col = col/(col+1.0);\n    \n    float gamma = 1.5;\n    \n    col.x = pow(col.x, 1.0/gamma);\n    col.y = pow(col.y, 1.0/gamma);\n    col.z = pow(col.z, 1.0/gamma);\n\n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define halfpi acos(0.0)\n#define pi (acos(0.0)*2.0)\n#define tau (acos(0.0)*4.0)\n#define constant (180.0/pi)\n#define PHI ((sqrt(5.0)+1.0)/2.0)\n\nstruct Ray\n{\n    vec3 origin;\n    vec3 dir;\n};\n\nstruct HitInfo\n{\n    vec3 color;\n    vec3 normal;\n    float roughness;\n    float t;\n    bool hit;\n};\n\nstruct Sphere\n{\n    vec3 ce;\n    float ra;\n    vec3 color;\n    float roughness;\n};\n\nRay cam(vec3 pos, vec2 turn, float zoom, vec2 uv)\n{\n    vec3 dir = vec3(sin(turn.x)*cos(turn.y), cos(turn.x)*cos(turn.y), sin(turn.y));\n    \n    vec3 up = vec3(sin(turn.x)*cos(turn.y+halfpi), cos(turn.x)*cos(turn.y+halfpi), sin(turn.y+halfpi));\n    \n    vec3 right = vec3(sin(turn.x+halfpi), cos(turn.x+halfpi), 0);\n    \n    vec3 p = (dir*zoom)+(up*uv.y)+(right*uv.x);\n    \n    return Ray(pos, normalize(p));\n}\n\nHitInfo sphere( Ray ray, Sphere sphere)\n\n{\n\n    vec3 oc = ray.origin - sphere.ce;\n\n    float b = dot( oc, ray.dir );\n\n    float c = dot( oc, oc ) - sphere.ra*sphere.ra;\n\n    float h = b*b - c;\n    \n    bool hit = true;\n\n    if( h<0.0 ) {hit = false; h = 0.0;} // no intersection\n\n    h = sqrt( h );\n    \n    float t = -b-h;\n    if(t<=0.0)\n    {\n        hit=false;\n    }\n    vec3 hitPos = ray.origin+(ray.dir*t);\n    vec3 normal = normalize(hitPos-sphere.ce);\n\n    return HitInfo(sphere.color, normal, sphere.roughness, t, hit);\n\n}\n\n\nvec3 hemisphere(vec3 normal, vec2 uv, float seed)\n{\n    int points = 100000;\n    int i = int(rand(vec3(uv.x, uv.y, seed))*float(points));\n    float dist = float(i)/float(points);\n    float angle = float(i)*pi*PHI;\n    vec3 p = vec3(sin(acos(1.0-(2.0*dist)))*cos(angle), sin(acos(1.0-(2.0*dist)))*sin(angle), 1.0-(2.0*dist));\n    //if(dot(p, normal)<0.0){p = -p;}\n    return normalize(p+normal);\n}\n\n\n\nHitInfo ClosestCollision(Ray ray)\n{\n    const int sphereNum = 3;\n    float speed = 0.1;\n    Sphere spheres[sphereNum] = Sphere[sphereNum](Sphere(vec3(-cos(iTime*speed), -sin(iTime*speed), 0), 1.0, vec3(1, 0.3, 0.3), 1.0), Sphere(vec3(cos(iTime*speed), sin(iTime*speed), 0), 1.0, vec3(0.3, 1.0, 0.3), 1.0), Sphere(vec3(0, 0, sqrt(3.0)), 1.0, vec3(1.0, 1.0, 1.0), 0.0));\n    \n    HitInfo closestHit;\n    closestHit.t = 999999999999.0;\n    \n    for(int i = 0; i<sphereNum; i++)\n    {\n        Sphere s = spheres[i];\n        HitInfo hitInfo = sphere(ray, s);\n        \n        if(hitInfo.hit && hitInfo.t<closestHit.t)\n        {\n            closestHit = hitInfo;\n        }\n    }\n    \n    return closestHit;\n}\n\nvec3 sky(Ray ray, vec2 dir, vec3 col, float brightness, float angle)\n{\n    dir/=constant;\n    //return col*clamp(float(dot(vec3(sin(dir.x)*cos(dir.y), cos(dir.x)*cos(dir.y), sin(dir.y)), ray.dir)>angle)*dot(vec3(sin(dir.x)*cos(dir.y), cos(dir.x)*cos(dir.y), sin(dir.y)), ray.dir), 0.0, 1.0)*brightness;\n    vec4 o = texture(iChannel1, vec3(ray.dir.y, ray.dir.z, ray.dir.x));\n    return (o.xyz*o.xyz*o.xyz)*brightness*col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    int samplesPerFrame = int(1.0/iTimeDelta);\n    vec3 totalCol = vec3(0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uvn = fragCoord/iResolution.xy;\n    vec2 uv = uvn-0.5;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    for(int sampl = 0; sampl<samplesPerFrame; sampl++)\n    {\n\n        Ray ray = cam(vec3(sin(-iTime)*-6.0, cos(-iTime)*-6.0, 1), vec2(-iTime*constant, 0)/constant, 1.0, uv+((vec2( rand(uv.x+float(sampl*2)), rand(uv.y-float(sampl*5)) )-0.5)/iResolution.xy) );\n    \n        vec3 col = vec3(1, 1, 1);\n        float brightness = 1.0;\n    \n        int bounces = 8;\n    \n        for(int i = 0; i<bounces; i++)\n        {\n            HitInfo hitInfo = ClosestCollision(ray);\n        \n    \n    \n            if(hitInfo.hit)\n            {\n                col *= hitInfo.color*brightness;\n                if(i==bounces-1){col*=0.0;}\n            }\n            else\n            {\n                col *= sky(ray, vec2(iTime*halfpi*halfpi, iTime*5.0), vec3(1,1,1), 4.0, 0.0);\n                col *= brightness;\n                break;\n            }\n            Ray reflection = Ray(ray.origin+(ray.dir*hitInfo.t), (hemisphere(hitInfo.normal, fragCoord.xy/29.54, fract(float(iFrame*(sampl+1))/(6.0*pi*PHI))+1.0)*hitInfo.roughness) + (reflect(ray.dir, hitInfo.normal)*(1.0-hitInfo.roughness)));\n            ray = reflection;\n            //brightness = clamp((dot(hitInfo.normal, reflection.dir)*(hitInfo.roughness)) + (1.0-hitInfo.roughness), 0.0, 1.0);\n            brightness = 1.0;\n        }\n        totalCol += col;\n    }\n    // Output to screen\n    fragColor = vec4((totalCol/float(samplesPerFrame)),1.0);//+texture(iChannel0,  uvn);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float rand(float co) { return fract(sin(co*(91.3458)) * 473.55653); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 458.5453); }\nfloat rand(vec3 co){ return rand(co.xy+rand(co.z)); }",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}