{
    "Shader": {
        "info": {
            "date": "1463164764",
            "description": "Greeble-ish effect. A grid for which cells are randomly split in 2 on X, 2 on Z or 4 on XZ.\nA cube at the center of each cell with a tweakable amount of edge padding. Can probably be optimized.\nFirst attempt at buffers in shadertoy too!",
            "flags": 32,
            "hasliked": 0,
            "id": "lsGSRD",
            "likes": 8,
            "name": "blukskes",
            "published": 3,
            "tags": [
                "greeblecubesboundingraymarchingbloom"
            ],
            "usePreview": 0,
            "username": "Daedelus",
            "viewed": 1114
        },
        "renderpass": [
            {
                "code": "/*\nbufA contains the raymarched 'greeble'\n\ncredits go to:\nhttp://mercury.sexy/hg_sdf/\nfor distance functions\nhttps://www.youtube.com/watch?v=T-9R0zAwL7s\nfor the concept bounding shapes & stability\nhttps://www.shadertoy.com/view/4sfGzS\n(even though it's not about the part I use) for the hash function\n\n\nbufB and C are simple diretional blurs\nthis combines them as a simple bloom effect\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = (texture(iChannel0, fragCoord / iResolution.xy) +\n                 pow(texture(iChannel1, fragCoord / iResolution.xy) + 0.4, vec4(4.0)));\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void pR(inout vec2 p, float a)\n{\n\tfloat sa = sin(a), ca = cos(a);\n\tp *= mat2(ca, sa, -sa, ca);\n}\n\nfloat hash( float n ) { return fract(sin(n)*753.5453123); }\n\nvec2 pMod2(inout vec2 p, vec2 size) {\n\tvec2 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5,size) - size*0.5;\n\treturn c;\n}\n\nfloat fBox2(vec2 p, vec2 b) {\n\tvec2 d = abs(p) - b;\n    vec2 q = min(d, vec2(0.0));\n\treturn length(max(d, vec2(0.0))) + max(q.x, q.y);\n}\n\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n    vec3 q = min(d, vec3(0.0));\n\treturn length(max(d, vec3(0.0))) + max(q.x, max(q.y, q.z));\n}\n\nfloat map(vec3 pt, out float mtl)\n{\n    float terrain = pt.y;\n    \n    vec2 cell = pMod2(pt.xz, vec2(1.0));\n    \n    float seed = cell.x * 113.0 + cell.y * 157.0;\n    float noise = hash(seed);\n    vec3 size = vec3(0.5, 0.0, 0.5);\n    \n    if(noise < 0.15 && noise > 0.9)\n    {\n        seed -= sign(pt.x);\n        \n        pt.x = abs(pt.x) - 0.25;\n        size.x *= 0.5;\n    }\n    if(noise < 0.3)\n    {\n        seed += sign(pt.z) * 89.0;\n        \n        pt.z = abs(pt.z) - 0.25;\n        size.z *= 0.5;\n    }\n    \n    noise = hash(seed);\n    size.y = noise * 0.5 + 0.2;\n    \n    // bounding shape is only required because of the height variation\n    // bounds bias must be tweaked to avoid bounding shape appearing at the horizon when perpendicular to it\n    // when we're looking down an aisle we can see a vertical line pop in the distance, \n    // tweak FAR fog plane, number of raymarching STEPS and BOUNDS_BIAS for best results.\n    float BOUNDS_BIAS = sin(fract(noise * 2.0 + iTime) * 6.28) * 0.1 + 0.4;\n    // the bounds bias also scales down the box so it's not going to get glitches\n    size -= BOUNDS_BIAS * 0.5;\n    float shape = fBox(pt, size);\n    \n    float bounds = -fBox2(pt.xz, size.xz + BOUNDS_BIAS);\n    shape = min(shape, bounds);\n    \n    mtl = 0.0;\n    if(shape < terrain)\n    {\n        terrain = shape;\n    \tmtl = noise;\n    }\n\treturn terrain;\n}\n\nvec3 gradient(vec3 pt, float last)\n{\n\tvec2 eps = vec2(0.01, 0.0);\n    float stub;\n\treturn (vec3(map(pt + eps.xyy, stub), map(pt + eps.yxy, stub), map(pt + eps.yyx, stub)) - last) / eps.x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tconst float NEAR = 0.1;\n\tconst float FAR = 30.0;\n\tconst int STEPS = 200;\n\tconst float FOV_BIAS = 0.35;\n\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n\tuv.x *= iResolution.x / iResolution.y;\n\n\tvec3 o = vec3(sin(iTime * 0.2) * 5.0, 2.0, iTime);\n\tfloat tilt = sin(iTime * 0.4) * 0.25 - 0.5;\n    float rotate = iTime * 0.2;\n    \n\tvec3 d = vec3(0.0, 0.0, 1.0);\n\tpR(d.xz, uv.x * FOV_BIAS);\n\tpR(d.yz, uv.y * FOV_BIAS + tilt);\n    pR(d.xz, rotate);\n\n    vec3 isect;\n\tfloat mtl, dt, t = NEAR;\n\tfor(int i = 0 ; i < STEPS ; ++i)\n\t{\n    \tisect = o + d * t;\n\t\tdt = map(isect, mtl);\n\t\tif(dt <= 0.0 || t > FAR)\n        {\n\t\t\tbreak;\n        }\n\t\tt += dt;\n\t}\n\n\tfloat fog = pow(clamp(t / FAR, 0.0, 1.0), 2.0);\n    float color = isect.y * (pow(sin(isect.y * 10.0 - iTime * 8.0) * 0.5 + 0.5, 32.0) + 0.5) + 0.05;\n    color *= gradient(isect, dt).y * 0.5 + 0.5;\n    vec3 albedo = normalize(vec3(hash(mtl) * 0.5, 0.1, hash(mtl + 273.0)));\n\tfragColor.xyz = mix(albedo * color, vec3(0.1, 0.2, 0.3), fog);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 bidirectionalSample(inout float tw, vec2 uv, vec2 stp, float i)\n{\n\tconst float invMaxI = 1.0 / 16.0;\n\n\tfloat w = 1.0 - i * invMaxI;\n\ttw += w + w;\n\treturn texture(iChannel0, uv - stp * i) * w + texture(iChannel0, uv + stp * i) * w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 stp = vec2(4.0, 0.0) / iResolution.xy;\n    \n\tfloat tw = 2.0;\n\tfragColor = texture(iChannel0, uv);\n\tfragColor += bidirectionalSample(tw, uv, stp, 1.0);\n\tfragColor += bidirectionalSample(tw, uv, stp, 2.0);\n\tfragColor += bidirectionalSample(tw, uv, stp, 3.0);\n\tfragColor += bidirectionalSample(tw, uv, stp, 4.0);\n\tfragColor += bidirectionalSample(tw, uv, stp, 5.0);\n\tfragColor += bidirectionalSample(tw, uv, stp, 6.0);\n\tfragColor += bidirectionalSample(tw, uv, stp, 7.0);\n\tfragColor += bidirectionalSample(tw, uv, stp, 8.0);\n\tfragColor /= tw;\n    \n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 bidirectionalSample(inout float tw, vec2 uv, vec2 stp, float i)\n{\n\tconst float invMaxI = 1.0 / 16.0;\n\n\tfloat w = 1.0 - i * invMaxI;\n\ttw += w + w;\n\treturn texture(iChannel0, uv - stp * i) * w + texture(iChannel0, uv + stp * i) * w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 stp = vec2(0.0, 4.0) / iResolution.xy;\n    \n\tfloat tw = 2.0;\n\tfragColor = texture(iChannel0, uv);\n\tfragColor += bidirectionalSample(tw, uv, stp, 1.0);\n\tfragColor += bidirectionalSample(tw, uv, stp, 2.0);\n\tfragColor += bidirectionalSample(tw, uv, stp, 3.0);\n\tfragColor += bidirectionalSample(tw, uv, stp, 4.0);\n\tfragColor += bidirectionalSample(tw, uv, stp, 5.0);\n\tfragColor += bidirectionalSample(tw, uv, stp, 6.0);\n\tfragColor += bidirectionalSample(tw, uv, stp, 7.0);\n\tfragColor += bidirectionalSample(tw, uv, stp, 8.0);\n\tfragColor /= tw;\n    \n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}