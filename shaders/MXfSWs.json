{
    "Shader": {
        "info": {
            "date": "1711026655",
            "description": "Learning example",
            "flags": 0,
            "hasliked": 0,
            "id": "MXfSWs",
            "likes": 3,
            "name": "fire shader example noise",
            "published": 3,
            "tags": [
                "firenoise"
            ],
            "usePreview": 0,
            "username": "likeavenus",
            "viewed": 224
        },
        "renderpass": [
            {
                "code": "float random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 6\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nvoid fire(vec4 fragColor, vec2 fragCoord ) {\n    float c = random(fragCoord);\n    \n    fragColor = vec4(vec3(c), 1.0);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    \n    const float speed = 100.;\n    const float details = 0.021;\n    const float force = 0.4;\n    const float shift = 0.4;\n    const float scaleFactor = 2.7;\n    \n    vec2 xyFast = details * vec2(fragCoord.x, fragCoord.y - iTime * speed);\n    float noise1 = fbm(xyFast);\n    float noise2 = force * (fbm(xyFast + noise1 + iTime) - shift);\n\n    float nnoise1 = force * fbm(vec2(noise1, noise2));\n    float nnoise2 = fbm(vec2(noise2, noise1));\n    \n    \n    const vec3 red = vec3(0.9, 0.4, 0.2);\n    const vec3 yellow = vec3(0.9, 0.9, 0.0);\n    const vec3 darkRed = vec3(0.5, 0.0, 0.0);\n    const vec3 dark = vec3(0.1, 0.1, 0.1);\n    \n    vec3 c1 = mix(red, darkRed, nnoise1 + shift);\n    vec3 c2 = mix(yellow, dark, nnoise2);\n\n    vec3 gradient = vec3(scaleFactor * fragCoord.y / iResolution.y) - shift;\n    vec3 c = c1 + c2 - gradient - noise2;\n\n    fragColor = vec4(c, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}