{
    "Shader": {
        "info": {
            "date": "1694806086",
            "description": "Uniform random points sample in a Unit Hemisphere. Set HEMISPHERE to 0 to enable sampling points on a Unit Sphere.",
            "flags": 0,
            "hasliked": 0,
            "id": "clSBzt",
            "likes": 19,
            "name": "Uniform (Hemi)Sphere Sampling",
            "published": 3,
            "tags": [
                "raytracing",
                "raymarching",
                "sdf",
                "pathtracing",
                "sampling",
                "pdf"
            ],
            "usePreview": 0,
            "username": "piyushslayer",
            "viewed": 543
        },
        "renderpass": [
            {
                "code": "#define PI     3.1415926535\n#define TWO_PI 6.2831853071\n\n#define HEMISPHERE   1      // Disabling this generates uniform random points on a unit sphere. \n#define MAX_POINTS   1024.0 // Max number of generated points.\n#define COLOR_POINTS 1      // Enable/Disable random coloring for each point. \n\n// From quality hashes collection by nimitz: https://www.shadertoy.com/view/Xt3cDn\nuint BaseHash(uvec2 p) \n{\n    p = 1103515245U * ((p >> 1U) ^ (p.yx));\n    uint h32 = 1103515245U * ((p.x) ^ (p.y >> 3U));\n    return h32 ^ (h32 >> 16);\n}\n\nvec3 Hash3(inout float seed) \n{\n    uint n = BaseHash(floatBitsToUint(vec2(seed += 0.1, seed += 0.1)));\n    uvec3 rz = uvec3(n, n * 16807U, n * 48271U);\n    return vec3(rz & uvec3(0x7fffffffU)) / float(0x7fffffff);\n}\n\nvec3 RandomPointInUnitSphere(inout float seed, inout vec3 hash, in float rotationOffset) \n{\n    hash = Hash3(seed);\n#if HEMISPHERE\n    vec3 s = hash * vec3(TWO_PI, 1.0, 1.0) - vec3(rotationOffset, 0.0, 0.0);\n#else\n    vec3 s = hash * vec3(TWO_PI, 2.0, 1.0) - vec3(rotationOffset, 1.0, 0.0);\n#endif\n    float theta = s.x;\n    float sinPhi = sqrt(1.0 - s.y * s.y); // s.y --> cos(phi)\n    float r = pow(s.z, 0.3333333334); // Cuberoot to evenly spread out the points from the center along the radius. \n    \n    return r * vec3(cos(theta) * sinPhi, s.y, sin(theta) * sinPhi);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n#if HEMISPHERE\n    uv.y += 0.2;\n#endif\n    uv *= 3.0;\n    \n    vec4 m = iMouse / iResolution.y;\n    \n    float currentTime = floor(iTime * MAX_POINTS * 0.1);\n    float timeThreshold = MAX_POINTS * 1.3;\n    float rOffset = iTime * 0.1;\n\n    vec3 outColor = vec3(0.0);\n    \n    float numPoints = min(MAX_POINTS, mod(currentTime, timeThreshold));\n    float hashSeed = floor(currentTime / timeThreshold);\n    \n    if (m.z > 0.0)\n    {\n        rOffset = -m.x * 4.0;\n    }\n    \n    vec3 point;\n    vec2 pointUv;\n    vec3 hash;\n    for (float i = 0.0; i < numPoints; ++i)\n    {\n        point = RandomPointInUnitSphere(hashSeed, hash, rOffset);\n        pointUv = uv * (point.z * 0.25 + 0.75);\n        \n        outColor += 4e-5 / pow(length(pointUv - point.xy), 1.6) * ((1.0 - point.z) * 1.6 + 0.8) \n#if COLOR_POINTS\n        * hash.zyx * 0.32\n#else\n        * 0.16\n#endif\n        ;\n    }\n    \n    float t = fragCoord.x + fragCoord.y * iTime;\n    fragColor = vec4(pow(outColor, vec3(1.0 / 2.2)) - Hash3(t).xxx * 0.04, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}