{
    "Shader": {
        "info": {
            "date": "1548890238",
            "description": "Kind of discover this kind of patterns by accident.\n\nI called it rxr because is a ridgedMF inside a ridgedMF from this link while working with thebookofshaders :\n\nHereÂ´s the link to the original rigedMF https://thebookofshaders.com/edit.php#13/ridge.frag ",
            "flags": 0,
            "hasliked": 0,
            "id": "Wd2GDW",
            "likes": 18,
            "name": "RXR ",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "jpupper",
            "viewed": 1325
        },
        "renderpass": [
            {
                "code": "//RXR shader. \n\n\n\n\n// Some useful functions\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n\n//SCALE\nmat2 scale(vec2 _scale){\n    mat2 e = mat2(_scale.x,0.0,\n                0.0,_scale.y); \n    return e;\n}\n\n//SNOISE\nfloat snoise(vec2 v) {\n\n    // Precompute values for skewed triangular grid\n    const vec4 C = vec4(0.211324865405187,\n                        // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,\n                        // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,\n                        // -1.0 + 2.0 * C.x\n                        0.024390243902439);\n                        // 1.0 / 41.0\n\n    // First corner (x0)\n    vec2 i  = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n\n    // Other two corners (x1, x2)\n    vec2 i1 = vec2(0.0);\n    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);\n    vec2 x1 = x0.xy + C.xx - i1;\n    vec2 x2 = x0.xy + C.zz;\n\n    // Do some permutations to avoid\n    // truncation effects in permutation\n    i = mod289(i);\n    vec3 p = permute(\n            permute( i.y + vec3(0.0, i1.y, 1.0))\n                + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(\n                        dot(x0,x0),\n                        dot(x1,x1),\n                        dot(x2,x2)\n                        ), 0.0);\n\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients:\n    //  41 pts uniformly over a line, mapped onto a diamond\n    //  The ring size 17*17 = 289 is close to a multiple\n    //      of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt(a0*a0 + h*h);\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);\n\n    // Compute final noise value at P\n    vec3 g = vec3(0.0);\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n    return 130.0 * dot(m, g);\n}\n\n#define OCTAVES 4\n\n// Ridged multifractal\n// See \"Texturing & Modeling, A Procedural Approach\", Chapter 12\nfloat ridge(float h, float offset) {\n    h = abs(h);     // create creases\n    h = offset - h; // invert so creases are at top\n    h = h * h;      // sharpen creases\n    return h;\n}\n\nfloat ridgedMF(vec2 p) {\n    float lacunarity = 2.0;\n    float gain = 0.5;\n    float offset = 0.9;\n\n    float sum = 0.0;\n    float freq = 1.0, amp = 0.5;\n    float prev = 1.0;\n    for(int i=0; i < OCTAVES; i++) {\n        float n = ridge(snoise(p*freq), offset);\n        sum += n*amp;\n        sum += n*amp*prev;  // scale by previous octave\n        prev = n;\n        freq *= lacunarity;\n        amp *= gain;\n    }\n    return sum;\n}\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\n#define PI 3.14159265359\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tfloat time = iTime;\n    \n    //fixed aspect radio\n    float fx = iResolution.x/iResolution.y;\n    uv.x *= fx;\n    \n    vec2 p = vec2(0.5*fx,0.5) - uv;\n    \n    //define radius and angle\n    float r = length(p);\n    float a = atan(p.x,p.y);\n    \n    //Make a snoise\n    float n = snoise(vec2(uv.x*100.,uv.y*100.+iTime)*0.002) ;\n    \n    //This is where the magic happens : A ridgedMF inside a ridgedMF\n    float e = ridgedMF(vec2(0.5,0.5)\n             *(ridgedMF(vec2(uv.x*0.8,uv.y*0.5-time*0.1)))\n             +n\n             *ridgedMF(vec2(uv.x*1.,uv.y+time*0.002)\n             *ridgedMF(vec2(uv.x*0.5,uv.y*0.5+time*0.02))));\n    \n    \n    //VERSION 2 :\n    /*e = ridgedMF(vec2(uv.x*0.5*uv.y,uv.y*0.5)\n             *(ridgedMF(vec2(uv.x*2.2,uv.y*2.0+time*0.01)))\n             +n\n             *ridgedMF(vec2(uv.x,uv.y)*ridgedMF(vec2(uv.x*0.5,uv.y*0.5-time*0.002))));\n    */\n    //simplify version : \n\t//e = ridgedMF(vec2(ridgedMF(uv)));\n    \n    \n    //Some colors: \n    vec3 col1 = vec3(0.1,0.1,0.4);\n    vec3 col2 = vec3(0.5,0.8,1.-r);\n \n    //mixing color1 and color2 with the pattern\n    vec3 fin = mix(col1,col2,e);\n         //fin = vec3(smoothstep(0.2,0.9,fin));\n         //fin = hsb2rgb(vec3(e,1.0,1));\n    \n    fragColor = vec4(fin,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}