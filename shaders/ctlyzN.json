{
    "Shader": {
        "info": {
            "date": "1690471249",
            "description": "CC0: Travelling to Giza\nSome artifacts left and the normals goes bad after\nawhile (which is the reason for the 60 sec reset)\nBut I will be travelling for a few days and thought I like to publish this before I go.\n\nMusic: RMC Nighthawk by",
            "flags": 96,
            "hasliked": 0,
            "id": "ctlyzN",
            "likes": 63,
            "name": "Travelling to Neon-Giza",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 1,
            "username": "mrange",
            "viewed": 2089
        },
        "renderpass": [
            {
                "code": "// CC0: Travelling to Neon-Giza\n//  Some artifacts left and the normals goes bad after\n//  awhile (which is the reason for the 60 sec reset)\n//  But I will be travelling for a few days and thought I like to publish this before I go.\n\n// Music: RMC Nighthawk by amazing Skaven: https://soundcloud.com/skaven252/rmc-nighthawk\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec3 col = texture(iChannel0, q).xyz;\n  col = aces_approx(col);\n  col = sqrt(col);\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define REFLECT\n#define WARP_WORLD\n#define SKYBOX1\n\n//#define BACKSTEP\n\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\n#define MAX_RAY_LENGTH_HI   48.0\n#define TOLERANCE_HI        0.0001\n#define MAX_RAY_MARCHES_HI  70\n#define NORM_OFF            0.001\n#define ROT(a)              mat2(cos(a), sin(a), -sin(a), cos(a))\n\n#define SCA(a)              vec2(sin(a), cos(a))\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n#if defined(WARP_WORLD)\n#define PATHA (0.33*vec2(0.1147, 0.2093))\n#define PATHB (0.33*vec2(13.0, 3.0))\nvec3 path(float z) {\n  return vec3(sin(z*PATHA)*PATHB, z);\n}\n\nvec3 dpath(float z) {\n  return vec3(PATHA*PATHB*cos(PATHA*z), 1.0);\n}\n\nvec3 ddpath(float z) {\n  return vec3(-PATHA*PATHA*PATHB*sin(PATHA*z), 0.0);\n}\n#endif\n\nfloat beat() {\n float beat = 0.0;\n  beat = texture(iChannel0, vec2(0.75, 0.25)).x;\n  beat -= 0.25;\n  beat *= beat;\n  beat *= beat;\n  beat *= 100.0;\n  beat = clamp(beat, 0.0, 1.0);\n  return beat;\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// License: CC0, author: Mårten Rånge, found: https://github.com/mrange/glsl-snippets\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions2d/\nfloat flatTorus(vec3 p, vec2 dim) {\n  float d = length(p.xy)-dim.x;\n  d = abs(d) - dim.y;\n  vec2 w = vec2(d, abs(p.z) - dim.y);\n  return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nfloat cappedTorus(vec3 p, vec2 sc, vec2 t) {\n  float ra = t.x;\n  float rb = t.y;\n  p.x = abs(p.x);\n  float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n  return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\nfloat arc(vec2 p, vec2 sc, float ra, float rb) {\n  // sc is the sin/cos of the arc's aperture\n  p.x = abs(p.x);\n  return ((sc.y*p.x>sc.x*p.y) ? length(p-sc*ra) : \n                                abs(length(p)-ra)) - rb;\n}\n\n#if defined(SKYBOX0)\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nconst float hoff      = 0.0;\nconst vec3 skyCol     = HSV2RGB(vec3(hoff+0.57, 0.70, 0.25));\nconst vec3 glowCol0   = HSV2RGB(vec3(hoff+0.4, 0.85, 0.00125));\nconst vec3 glowCol1   = HSV2RGB(vec3(hoff+0.55, 0.85, 0.05));\nconst vec3 sunCol1    = HSV2RGB(vec3(hoff+0.60, 0.50, 0.5));\nconst vec3 sunCol2    = HSV2RGB(vec3(hoff+0.05, 0.75, 25.0));\nconst vec3 diffCol    = HSV2RGB(vec3(hoff+0.45, 0.5, 0.25));\nconst vec3 sunDir     = normalize(vec3(0., 0.5, 7.0));\n\nconst vec3 sunCol     = sunCol1;\n\nvec3 render0(vec3 ro, vec3 rd, vec3 nrd, float beat) {\n  vec3 col = vec3(0.0);\n  float sd = max(dot(sunDir, rd), 0.0);\n  float sf = 1.0001-sd;\n\n\n  col += clamp(vec3(1.0/abs(rd.y))*glowCol0, 0.0, 1.0);\n  col += 0.75*skyCol*pow((1.0-abs(rd.y)), 8.0);\n  col += 2.0*sunCol1*pow(sd, 100.0);\n  col += sunCol2*pow(sd, 800.0);\n\n  float tp1  = rayPlane(ro, rd, vec4(vec3(0.0, -1.0, 0.0), -6.0));\n\n  if (tp1 > 0.0) {\n    vec3 pos  = ro + tp1*rd;\n    vec2 pp = pos.xz;\n    float db = box(pp, vec2(5.0, 9.0))-3.0;\n    \n    col += vec3(4.0)*skyCol*rd.y*rd.y*smoothstep(0.25, 0.0, db);\n    col += vec3(0.8)*skyCol*exp(-0.5*max(db, 0.0));\n    col += 0.25*sqrt(skyCol)*max(-db, 0.0);\n  }\n\n  return clamp(col, 0.0, 10.0);\n}\n#elif defined(SKYBOX1)\n#define ROTY(a)               \\\n  mat3(                       \\\n    +cos(a) , 0.0 , +sin(a) \\\n  , 0.0     , 1.0 , 0.0     \\\n  , -sin(a) , 0.0 , +cos(a) \\\n  )\n\n#define ROTZ(a)               \\\n  mat3(                       \\\n    +cos(a) , +sin(a) , 0.0   \\\n  , -sin(a) , +cos(a) , 0.0   \\\n  , 0.0     , 0.0     , 1.0   \\\n  )\n\n#define ROTX(a)               \\\n  mat3(                       \\\n    1.0 , 0.0     , 0.0       \\\n  , 0.0 , +cos(a) , +sin(a)   \\\n  , 0.0 , -sin(a) , +cos(a)   \\\n  )\n\nconst mat3 roty       = ROTY(radians(10.0));\nconst vec3 sunDir     = normalize(vec3(0.0, -0.01, 1.0))*roty;\nconst vec3 lightPos   = vec3(0.0, -60.0, -200.0)*roty;\nconst float hoff      = 0.725;\nconst vec3 sunColor   = HSV2RGB(vec3(hoff+0.0, 0.9, 0.0005));\nconst vec3 topColor   = HSV2RGB(vec3(hoff+0.0, 0.9, 0.0001));\nconst vec3 glowColor0 = HSV2RGB(vec3(hoff+0.0, 0.9, 0.0001));\nconst vec3 glowColor2 = HSV2RGB(vec3(hoff+0.3, 0.95, 0.001));\nconst vec3 diffColor  = HSV2RGB(vec3(hoff+0.0, 0.9, .25));\n\nconst vec3 glowCol1   = HSV2RGB(vec3(hoff+0.2, 0.85, 0.0125));\nconst vec3 diffCol    = diffColor;\nconst vec3 sunCol     = sunColor;\n\nvec2 planeCoord(vec3 p, vec3 c, vec3 up, vec4 dim) {\n  vec3 d = p - c;\n  vec3 xx = (cross(up,dim.xyz));\n  vec3 yy = (cross(xx,dim.xyz));\n  return vec2(dot(d,xx), dot(d,yy));\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat triIso(vec2 p, vec2 q) {\n  p.x = abs(p.x);\n  vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n  float s = -sign( q.y );\n  vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                vec2( dot(b,b), s*(p.y-q.y)  ));\n  return -sqrt(d.x)*sign(d.y);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/intersectors/\nvec2 rayBox(vec3 ro, vec3 rd, vec3 boxSize, out vec3 outNormal)  {\n  vec3 m = 1.0/rd; // can precompute if traversing a set of aligned boxes\n  vec3 n = m*ro;   // can precompute if traversing a set of aligned boxes\n  vec3 k = abs(m)*boxSize;\n  vec3 t1 = -n - k;\n  vec3 t2 = -n + k;\n  float tN = max( max( t1.x, t1.y ), t1.z );\n  float tF = min( min( t2.x, t2.y ), t2.z );\n  if( tN>tF || tF<0.0) return vec2(-1.0); // no intersection\n  outNormal = (tN>0.0) ? step(vec3(tN),t1)  : // ro ouside the box\n                         step(t2,vec3(tF))  ;  // ro inside the box\n  outNormal *= -sign(rd);\n  return vec2( tN, tF );\n}\n\nvec3 sky(vec3 ro, vec3 rd) {\n  vec3 col = vec3(0.0);\n  col += sunColor/(1.0+0.00001 - dot(sunDir, rd));\n  float hd = max(abs(rd.y+0.15), 0.00066);\n  col += 100.0*glowColor0/sqrt(hd);\n  col += glowColor2/(hd);\n  return col;\n}\n\n// License: Unknown, author: Claude Brezinski, found: https://mathr.co.uk/blog/2017-09-06_approximating_hyperbolic_tangent.html\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\nvec3 glow(vec3 ro, vec3 rd, float beat) {\n  vec3 bn;\n  vec3 bro = ro;\n  bro.y += -1000.0+70.0;\n  vec2 bi = rayBox(bro, rd, vec3(90.0, 1000.0, 90.0), bn);\n  float lightDist = distance(lightPos, ro);\n  vec3 lightDir   = normalize(lightPos-ro);\n  float g3        = 1.0+0.00001 - dot(lightDir, rd);\n  vec3 col = vec3(0.0);\n  col += 8.0*glowColor0/(g3);\n  vec3 rrd = rd*transpose(roty)*ROTX(0.027);\n  if (bi != vec2(-1.0)) {\n    float bdi = tanh_approx(0.00125*(bi.y-bi.x));\n    col += 1000.0*glowColor0*(bdi/max(rrd.y, 0.005));\n  }\n  \n  float sx = abs(rrd.x);\n  rrd.y += mix(0.00, 0.0125, beat)*(texture(iChannel0, vec2(0.5*sx, 0.75)).x-0.5);\n  col += 20.0*glowColor0/(abs(mix(mix(20.0, 0.25, beat)*rrd.y*rrd.y, abs(rrd.y), tanh_approx(4.0*sx)))+mix(2.0, 0.5, beat)*sx*sx*sx+0.0001);\n\n  col *= mix(1.0, 4.0, beat);\n  return col;\n}\n\nvec3 side(vec3 col, vec3 ro, vec3 rd, vec3 nrd, float t, float nt, vec4 dim, vec3 c) {\n  vec3 n = dim.xyz;\n\n  vec3 p = ro + rd*t;\n  vec3 np = ro + nrd*t;\n\n  vec3 r = reflect(rd, n);\n  vec3 ldiff = p - lightPos;\n  vec3 ld = normalize(ldiff);\n  vec3 rcol0 = sky(p, r);\n  float dcol = max(dot(ld, n), 0.0);\n  dcol *= dcol;\n  float aa = distance(p, np);\n  vec2 pp = planeCoord(p, c, vec3(0.0, 1.0, 0.0), dim);\n  vec2 p0 = pp;\n  vec2 p1 = pp;\n  const vec2 tri =vec2(485, sqrt(3.0)*356.0);\n  float d0 = triIso(p0, tri);\n  float d1 = triIso(p1, 0.11*tri);\n  float d = d0;\n  vec3 bcol = col;\n  float hf = smoothstep(-600.0, -400.0, p.y);\n  vec3 pcol = 3.0*diffColor*dcol;  \n  pcol += rcol0;\n  pcol = mix(clamp(col, 0.0, 0.1), pcol, hf); \n  col = mix(col, pcol, smoothstep(aa, 0.0, d));\n  col += topColor/max(0.00005*(d1-1.), 0.000025)*hf;\n  return col;\n}\n\nvec3 pyramid(vec3 col, vec3 ro, vec3 rd, vec3 nrd) {\n  const mat3 rotx = ROTX(radians(-51.8));\n  const mat3 rr0  = rotx;\n  const mat3 rr1  = rr0*ROTY(PI/2.0);\n\n  const vec3 n0   = normalize(vec3(.0, 0.0, 1.0))*rr0;\n  const vec3 c0   = vec3(0.0);\n  const vec4 dim0 = vec4(n0, -dot(c0, n0));\n\n  const vec3 n1   = normalize(vec3(.0, 0.0, 1.0))*rr1;\n  const vec3 c1   = vec3(0.0);\n  const vec4 dim1 = vec4(n1, -dot(c1, n1));\n\n  float t0  = rayPlane(ro, rd , dim0);\n  float nt0 = rayPlane(ro, nrd, dim0);\n  float t1  = rayPlane(ro, rd , dim1);\n  float nt1 = rayPlane(ro, nrd, dim1);\n  if (t1 > 0.0 && nt1 > 0.0) {\n    col = side(col, ro, rd, nrd, t1, nt1, dim1, c1);\n  }\n  if (t0 > 0.0 && nt0 > 0.0) {\n    col = side(col, ro, rd, nrd, t0, nt0, dim0, c0);\n  }\n\n\n  return col;\n}\n\nvec3 render0(vec3 ro, vec3 rd, vec3 nrd, float beat) {\n  const vec3 ro_ = vec3(0.0, 0.0, -2700.0)*roty;\n  const mat3 rrd = ROTX(-0.2)*ROTY(0.); \n  rd *= rrd;\n  ro = ro_;\n  const float rdd = 3.0;\n  const float mm = 4.0;\n\n  vec3 glowCol = glow(ro, rd, beat);\n  \n  vec3 col = sky(ro, rd); \n  col = pyramid(col, ro, rd, nrd);\n  col += glowCol;  \n  col = clamp(col, 0.0, 10.0);\n  return col;\n}\n\n#endif\n\n\nfloat g_gd;\n\nvoid warpWorld(inout vec3 p){\n#if defined(WARP_WORLD)\n  vec3 warp = path(p.z);\n  vec3 dwarp = normalize(dpath(p.z));\n  p.xy -= warp.xy;\n  p -= dwarp*dot(vec3(p.xy, 0), dwarp)*0.5*vec3(1,1,-1);\n#endif\n}\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\nvec2 dfArcs(vec3 p) {\n  vec3 p1 = p;\n  float n1 = mod1(p1.z, 4.0);\n  float h1 = hash(n1);\n  float sh1 = -1.0+2.0*h1;\n  vec3 p2 = p1;\n  const mat2 rot = ROT(-PI*0.25);\n  p1.xy *= ROT(0.25*TIME*sh1);\n  p1.xy = abs(p1.xy);\n  p1.xy *= rot;\n  float d1 = cappedTorus(p1, SCA(PI*0.125*0.5), 3.0*vec2(1.0, 0.075)); \n  float d2 = flatTorus(p2, 3.0*vec2(1.0, 0.03));\n  d2 = max(d2, -d1);\n  return vec2(d1, d2);\n}\n\nfloat df(vec3 p, float t) {\n  warpWorld(p);\n  \n  vec3 p0 = p;\n  p0.y -= 3.0;\n  p0.y = -p0.y;\n  vec3 p1 = p;\n  mod1(p1.z, 4.0); \n  p1 = p1.xzy;\n  float d0 = arc(p0.xy, SCA(PI/6.0), 6.0, 0.8);\n  vec2 dd1 = dfArcs(p);\n  float d = d0;\n  d = pmax(d, -(dd1.y-0.25), 0.125);\n  d = min(d, dd1.x);\n  d = min(d, dd1.y);\n  float gd = dd1.x;\n  t = max(t-MAX_RAY_LENGTH_HI*0.5, 0.0);\n  g_gd = min(g_gd, gd+t*t*1E-4);\n  \n  return d;\n\n}\n\nfloat df(vec3 p) {\n  return df(p, 0.0);\n}\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nfloat rayMarchHi(vec3 ro, vec3 rd, float initt, out int iter) {\n  float t = initt;\n  const float tol = TOLERANCE_HI;\n#if defined(BACKSTEP)\n  vec2 dti = vec2(1e10,0.0);\n#endif  \n  int i = 0;\n  for (i = 0; i < MAX_RAY_MARCHES_HI; ++i) {\n    float d = df(ro + rd*t, t);\n#if defined(BACKSTEP)\n    if (d<dti.x) { dti=vec2(d,t); }\n#endif  \n    if (d < TOLERANCE_HI || t > MAX_RAY_LENGTH_HI) {\n      break;\n    }\n    t += d;\n  }\n  \n#if defined(BACKSTEP)\n  if(i==MAX_RAY_MARCHES_HI) { t=dti.y; };\n#endif\n  iter = i;\n  \n  return t;\n}\n\n\nvec3 render1(vec3 ro, vec3 rd, vec3 nrd, vec2 sp) {\n  float beat = beat();\n  g_gd = 1E3;\n  int iter;\n  float t = rayMarchHi(ro, rd, 0.0, iter);\n  float gd = g_gd;\n  vec3 ggcol = (glowCol1)/(max(gd, 0.00125));\n  vec3 skyCol = render0(ro, rd, nrd, beat);\n  vec3 col = skyCol;\n\n  float tt = t/MAX_RAY_LENGTH_HI;\n  tt -= 0.33;\n  tt = clamp(tt, 0.0, 1.0);\n  float sfo = 1.0-exp(-9.0*tt*tt);\n\n  if (t < MAX_RAY_LENGTH_HI) {\n    vec3 p = ro+rd*t;\n    vec3 n = normal(p);\n    vec3 r = reflect(rd, n);\n    vec3 nr = reflect(nrd, n);\n    float fre0 = 1.0+dot(rd, n);\n    float fre = fre0;\n    fre *= fre;\n    float dif = dot(sunDir, n); \n  \n    float ao = 1.0-float(iter)/float(MAX_RAY_MARCHES_HI);\n    float fo = mix(0.2, 0.5, ao);\n\n    vec3 wp = p;\n    warpWorld(wp);\n    vec2 dd = dfArcs(wp);\n\n    vec3 rcol = vec3(0.0);\n    float hit = min(dd.x, dd.y);\n#if defined(REFLECT)\n    if (hit > .05) {\n      g_gd = 1E3;\n      int riter;\n      float rt = rayMarchHi(p, r, 0.5,riter);\n      float rgd = g_gd;\n      vec3 rggcol = (glowCol1)/(max(rgd, 0.00125));\n      rcol = clamp(rggcol, 0.0, 40.0);\n      rcol *= smoothstep(0.66, 0.1, tt);\n      if (rt < MAX_RAY_LENGTH_HI) {\n        rcol += diffCol*0.2;\n      } else {\n        rcol += 0.5*render0(p, r, nr, beat);\n      }\n    } else {\n    }\n    rcol += 4.0*(diffCol+0.5)*glowCol1/max(dd.x*dd.x, 0.01);\n#else\n    rcol += 0.5*render0(p, r, nr);\n    rcol += 4.0*(diffCol+0.5)*glowCol1/max(dd.x*dd.x, 0.01);\n#endif\n    col = vec3(0.0);\n    col += sunCol*dif*dif*diffCol*fo;\n    col += rcol*fre;\n  }\n\n  col = clamp(col, 0.0, 4.0);  \n  col = mix(col, skyCol, sfo);\n\n  col += clamp(ggcol, 0.0, 4.0);\n\n#if defined(SKYBOX1)\n  vec3 rrd = rd*transpose(roty)*ROTX(0.027);\n  float flash = dot(rrd, normalize(vec3(0.0, -0.2, -1.0)))+1.0005;\n  col += (0.01*vec3(0.5, 0.25, 1.0))*smoothstep(0.5, 1.0, beat)/flash;\n#endif\n\nreturn col;\n}\n\n\nvec3 effect(vec2 p, vec2 pp) {\n  const vec3 up = normalize(vec3(0.0, 1.0, 0.0));\n\n  float tm  = mod(TIME, 60.)-30.0;\n  float z = 5.0*tm;\n#if defined(WARP_WORLD)\n  \n  vec3 ro = path(z);\n  vec3 ww = normalize(dpath(z));\n  vec3 dd = ddpath(z);\n#else\n  vec3 ro = vec3(0.0, 0.0, z);\n  vec3 ww = normalize(vec3(0.0, 0.0, +1.0));\n  vec3 dd = vec3(0.0);\n#endif\n  vec3 uu = normalize(cross(up+dd, ww));\n  vec3 vv = (cross(ww,uu));\n  const float fov = tan(TAU/6.);\n  vec2 np = p + 4.0/RESOLUTION.y;\n  vec3 rd   = normalize(-p.x*uu + p.y*vv + fov*ww);\n  vec3 nrd  = normalize(-np.x*uu + np.y*vv + fov*ww);\n\n  vec3 col = render1(ro, rd, nrd, p);\n  col -= 0.05*length(pp);\n\n  col *= smoothstep(1.5, 0.5, length(pp));\n  col = clamp(col, 0.0, 4.0); \n  col *= smoothstep(30.0, 28.0, abs(tm));\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp);\n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 34118,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/skaven252/rmc-nighthawk"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define TIME        iTime\n#define RESOLUTION  iResolution\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n\n\nconst mat2 brot = 1.05*ROT(2.399);\n// License: Unknown, author: Dave Hoskins, found: Forgot where\nvec3 dblur(vec2 q,float rad) {\n  vec3 acc=vec3(0);\n  const float m = 0.0025;\n  vec2 pixel=vec2(m*RESOLUTION.y/RESOLUTION.x,m);\n  vec2 angle=vec2(0,rad);\n  rad=1.;\n  const int iter = 20;\n  for (int j=0; j<iter; ++j) {  \n    rad += 1./rad;\n    angle*=brot;\n    vec3 col=texture(iChannel1,q+pixel*(rad-1.)*angle).xyz;\n    acc+=clamp(col, 0.0, 1.0);\n  }\n  return acc*(1.0/float(iter));\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1.0+2.0*q;\n  vec2 p2 = (1.0-0.025)*p;\n  vec2 q2 = 0.5+0.5*p2;\n\n  vec3 bcol = dblur(q2, 1.);\n  vec3 col = texture(iChannel0, q).xyz;\n  const vec3 mul = vec3(0.5*vec3(3.0, 1.0, 2.0))/3.0;\n  col += bcol*mul;\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}