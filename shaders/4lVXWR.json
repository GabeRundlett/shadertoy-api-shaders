{
    "Shader": {
        "info": {
            "date": "1483855618",
            "description": "This is what happens when I realize the McDonalds logo is NOT made of parabola functions. They are ellipse functions. I'll rewrite the shader to use ellipse functions. ",
            "flags": 0,
            "hasliked": 0,
            "id": "4lVXWR",
            "likes": 3,
            "name": "McDonald's - 117 chars",
            "published": 3,
            "tags": [
                "2d",
                "drawing",
                "2tc",
                "onetweet",
                "mcdonalds"
            ],
            "usePreview": 0,
            "username": "GregRostami",
            "viewed": 760
        },
        "renderpass": [
            {
                "code": "// 117 chars - Replaced vec2 u with o.zw\n\nvoid mainImage(out vec4 o, vec2 u)\n{\n    o.zw = abs(u/iResolution.y - 1.)-.2;\n    o = vec4(1, min(o.z>.0 ? .7: .6, o.z*= 28.*o.z ) > o.w && o.z/3.-.1 < o.w, 0,1);\n}\n\n/*\n        \n// Using the #define trick:\n\n#define mainImage(o,U)  \\\n    vec2 u = abs(U/iResolution.y - 1.)-.2;  \\\n    o = vec4(1, min(u.x>.0 ? .7: .6, u.x*= 28.*u.x ) > u.y && u.x/3.-.1 < u.y, 0,1)\n\n        \n// 128 chars - Grand Master iq's kung fu is better than Fabrice's ;)\n// Thank you Fabrice for the comments.\n\nvoid mainImage(out vec4 o,vec2 u)\n{\n    u = abs(u/iResolution.y - 1.)-.2;   // scaling + left-right symmetry\n    \n    o = vec4(1,\t\t\t\t\t\t\t// red channel is always on\n             min(u.x>.0 ? .7: .6,       // bottom cuts\n                 u.x*= 28.*u.x ) > u.y  // concave bottom red parabola\n             &&        u.x/3.-.1 < u.y, // convex top red parabola\n             0,1);\t\t\t\t\t\t// blue channel is always off \n}\n\n\n// 149 chars - centered\n\nvoid mainImage(out vec4 o, vec2 u)\n{\n    o.xyz=iResolution;\n    o.x *= .5;\n    u = abs((u-o.xy)/o.y ) - .19;\n    \n    o = vec4(1,\n             min(u.x>.0 ? .7: .6,\n                 u.x*= 28.*u.x ) > u.y\n             &&      u.x/3.-.1 < u.y,\n             0, 1);\n}\n\n\n// 140 chars - Once again, Fabrice does the impossible in ONE TWEET!! (not centered)\n\nvoid mainImage(out vec4 o,vec2 u)\n{\n    u /= iResolution.y;\n    float X = .2 - abs(--u.x),\n        y = u.y;\n    \n    o = vec4(1,\n\t    y > .1 &&\n             (X < .1 || y > .2) &&\n             9.*X*X < .9-y && 28.*X*X > .8-y ,\n             0,1);\n}\n\n\n// 159 chars - Fabrice's SUPER powers reduced the shader. (centered)\n\nvoid mainImage(out vec4 o,vec2 u)\n{\n\n    float X = .38 - abs( u = (u+u - (o.xy=iResolution.xy) ) / o.y ).x,\n        y = u.y;\n    \n    o = vec4(1,\n\t    y > -.8 &&\n             (X < .18 || y > -.65) &&\n             5.*X*X < .8-y && 14.*X*X > .65-y ,\n             0,1);\n}\n\n\n// 180 chars - Original shader by Greg Rostami\n\nvoid mainImage(out vec4 o,vec2 u)\n{\n\tu = (u+u - (o.xy=iResolution.xy) ) / o.y;\n    float x = abs(u.x), y = u.y, X = x-.38;\n    X *= -X;\n    o = vec4(1,.8,0,1);\n\to = y > -.8 &&\n             (x > .2 || y > -.65) &&\n             5.*X > y-.8 && 14.*X < y-.65 ?\n        o : o.gbba;\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}