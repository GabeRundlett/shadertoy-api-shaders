{
    "Shader": {
        "info": {
            "date": "1704660739",
            "description": "Coordinates distorted by noise and then used to sample worley noise (nothing special about Worley noise, it just looked better) creating a smoke like pattern. Similar idea to https://www.shadertoy.com/view/lsl3RH",
            "flags": 0,
            "hasliked": 0,
            "id": "Mc23DK",
            "likes": 3,
            "name": "Yellow smoke",
            "published": 3,
            "tags": [
                "noise",
                "distortion",
                "smoke"
            ],
            "usePreview": 0,
            "username": "ikucha",
            "viewed": 255
        },
        "renderpass": [
            {
                "code": "// Author:\n// Title:\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\n//from https://www.shadertoy.com/view/XsX3zB\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\n/* const matrices for 3d rotation */\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);\nconst mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);\n\n/* directional artifacts can be reduced by rotating each octave */\nfloat simplex3d_fractal(vec3 m) {\n    return   0.5333333*simplex3d(m*rot1)\n\t\t\t+0.2666667*simplex3d(2.0*m*rot2)\n\t\t\t+0.1333333*simplex3d(4.0*m*rot3)\n\t\t\t+0.0666667*simplex3d(8.0*m);\n}\n\n\nfloat checker(vec2 v){\n    return mod(floor(v.x)+floor(v.y), 2.);\n}\n\n\n//from https://www.shadertoy.com/view/4l2GzW\nvec2 Hash(vec2 P)\n{\n \treturn fract(cos(P*mat2(-64.2,71.3,81.4,-29.8))*8321.3); \n}\nfloat Worley(vec2 P)\n{\n    float Dist = 1.;\n    vec2 I = floor(P);\n    vec2 F = fract(P);\n    \n    for(int X = -1;X<=1;X++)\n    for(int Y = -1;Y<=1;Y++)\n    {\n        float D = distance(Hash(I+vec2(X,Y))+vec2(X,Y),F);\n        Dist = min(Dist,D);\n    }\n    return Dist;\n\t\n}\nvec3 palette(float t){\n    t = pow(t, 0.35);\n    /*\n    vec3 color1 = vec3(58, 51, 53)/256.;\n    vec3 color2 = vec3(216, 30, 91)/256.;\n    vec3 color3 = vec3(240, 84, 79)/256.;\n    */\n    vec3 color1 = vec3(52, 52, 74)/256.;\n    vec3 color2 = vec3(216, 30, 91)/256.;\n    vec3 color3 = vec3(240, 247, 87)/256.;\n    float edge = 0.35;\n    vec3 result = vec3(0.);\n    \n    result = mix(color1, color2, t/edge);\n    if(t>edge){\n        result = mix(color2, color3, (t-edge)/(1.-edge));\n    }\n    \n    return result;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    \n    st*=2.;\n    for(float i = 1.; i<2.;i+=1.){\n        st += 0.3*simplex3d_fractal(vec3(2.3346*st*i, iTime*0.1));\n        st = vec2(simplex3d_fractal(vec3(st, 0.1*iTime)), simplex3d_fractal(vec3(st+vec2(1000.), 0.1*iTime)));\n    }\n\n    //float grey = 0.5*simplex3d_fractal(vec3(0.8*st,0.))+0.5;\n    float grey = Worley(st);\n    //float grey = checker(st);\n\tvec3 color = palette(grey);\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}