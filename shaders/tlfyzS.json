{
    "Shader": {
        "info": {
            "date": "1592321800",
            "description": "test",
            "flags": 32,
            "hasliked": 0,
            "id": "tlfyzS",
            "likes": 2,
            "name": "Mezzotint  filter",
            "published": 3,
            "tags": [
                "test"
            ],
            "usePreview": 0,
            "username": "indere",
            "viewed": 352
        },
        "renderpass": [
            {
                "code": "const float min_scale = 300.0;\nconst float max_scale = 300.0;\n\nvec2 random2( vec2 p ) {\n    return abs(fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453));\n}\n\nfloat random1(float p){\n\treturn fract(sin(p) * 100000.0);\n}\n\nbool judgeMin(in vec3 c, int tag){\n\tfloat min_c = min(c.r, min(c.g, c.b));\n    if(min_c == c[tag])\t\treturn true;\n    return false;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \t\n    \n    float scale = min_scale + (max_scale - min_scale) * (0.5 + 0.5 * sin(iTime * 0.12423));\n    \n    vec2 st = fragCoord / iResolution.xy;\n    \n    //fragColor = texture(iChannel0, st);\n    //return ;\n    \n    if(st.x <= iMouse.x / iResolution.x){\n    \tfragColor = texture(iChannel0, st);\n        return ;\n    }\n    \n    st.x *= iResolution.x / iResolution.y;\n    \n    st *= scale;\n    \n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n    float m_dist = 100.;  // minimum distance\n    vec2 uv = st;\n    bool tag = false;\n    for(int y = -1; y <= 1; ++y){\n        for(int x = -1; x <= 1; ++x){\n        \tvec2 neighbor = vec2(float(x),float(y));\n            vec2 point = random2(i_st + neighbor);\n            point = 0.5 + 0.5*sin(iTime + 6.2831*point);\n            vec2 diff = neighbor + point - f_st;\n            float dist = length(diff);\n\n            // Keep the closer distance\n            if(dist < 0.65 && m_dist > dist){\n            \tm_dist = dist;\n                uv = st + diff;\n                tag = true;\n            }\n        }\n    }\n    \n    if(!tag){\n    \tfragColor = vec4(vec3(1.0), 1.0);\n        return ;\n    }\n    \n    \n    if(m_dist < 0.35){\n        float random_v = random2(st).r;\n        float t1 = 0.0;\n        if(random_v >= 0.25)\tt1 = 1.0;\n    \tfragColor = vec4(vec3(t1), 1.0);\n    }else{\n\n        float th = 0.15;\n    \tst /= scale;\n        st.x /= iResolution.x / iResolution.y;\n         vec3 color = texture(iChannel0, st).rgb;\n        float maxV = max(color.r, max(color.g, color.b));\n        float minV = min(color.r, min(color.g, color.b));\n        if(maxV - minV < th){\n        \tfragColor = vec4(vec3(smoothstep(0.399, 0.401, maxV)), 1.0);\n            return ;\n        }\n            \n        \n        if(judgeMin(color,0)){\n        \tint maxTag = 1;\n            int secondTag = 2;\n            if(color.g < color.b)\t{maxTag = 2; secondTag = 1;}\n            vec3 new_c = vec3(0.0);\n            new_c[maxTag] = 1.0;\n            if(color[secondTag] == 0.0){\n                fragColor = vec4(new_c, 1.0);\n            }else if(color[maxTag] - color[secondTag] < th * 0.75){\n                new_c[secondTag] = 1.0;\t\n                fragColor = vec4(new_c, 1.0);\n            }else{\n                float random_v = random2(st).r;\n               if(random_v <= 0.3)\t\tnew_c[secondTag] = 1.0;\t\n                fragColor = vec4(new_c, 1.0);\n            }\n            \n        }else if(judgeMin(color, 1)){\n            int maxTag = 0;\n            int secondTag = 2;\n            if(color.r < color.b)\t{maxTag = 2; secondTag = 0;}\n            vec3 new_c = vec3(0.0);\n            new_c[maxTag] = 1.0;\n             if(color[secondTag] == 0.0){\n                fragColor = vec4(new_c, 1.0);\n            }else if(color[maxTag] - color[secondTag] < th * 0.75){\n                new_c[secondTag] = 1.0;\t\n                fragColor = vec4(new_c, 1.0);\n            }else{\n                float random_v = random2(st).r;\n\n                if(random_v <= 0.3)\t\tnew_c[secondTag] = 1.0;\t\n                fragColor = vec4(new_c, 1.0);\n             }\n        \n        }else{\n        \tint maxTag = 0;\n            int secondTag = 1;\n            if(color.r < color.g)\t{maxTag = 1; secondTag = 0;}\n            vec3 new_c = vec3(0.0);\n            new_c[maxTag] = 1.0;\n            if(color[secondTag] == 0.0){\n                fragColor = vec4(new_c, 1.0);\n            }else if(color[maxTag] - color[secondTag] < th * 0.75){\n                new_c[secondTag] = 1.0;\t\n                fragColor = vec4(new_c, 1.0);\n            }else{\n                float random_v = random2(st).r;\n\n                if(random_v <= 0.3)\t\tnew_c[secondTag] = 1.0;\t\n                fragColor = vec4(new_c, 1.0);\n            }\n            \n        }\n\n        \n    }    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //fragColor = vec4(130.0 / 255.0,67.0/255.0,50.0/255.0,1.0);\n    fragColor = vec4(1.0, 1.0, 0.0,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}