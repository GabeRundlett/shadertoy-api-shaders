{
    "Shader": {
        "info": {
            "date": "1633051812",
            "description": "lineto false 3d-2d",
            "flags": 32,
            "hasliked": 0,
            "id": "NdtXD8",
            "likes": 6,
            "name": "lineto false 3d-2d",
            "published": 3,
            "tags": [
                "linetofalse3d2d"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 321
        },
        "renderpass": [
            {
                "code": "/// por jorge flores P.\n// jorge2017a1@\n//lineto false 3d---2d\n\n//referencia\n//.....FabriceNeyret2\n//https://www.shadertoy.com/view/MlVSWc\n//-----letras\n//https://www.shadertoy.com/view/MlSXDm...by David Hoskins.\n\n//--------------image\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(antialiasing(1.0),b,d)\n\n\nvec2 gidDistColor;\nfloat _x,_y, _z;\nfloat x0,y0,z0;\nvec2 gUV;\nvec2 frag;\n\n#define opU(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(-distA, distB);}\n    \n\nvec2 differenceSDF(vec2 distA, vec2 distB)\n{  return max(distA,-distB); }\n\nvec2 intersectSDF(vec2 distA, vec2 distB)\n{    return max(distA, distB);}\n\nvec2 unionSDF(vec2 distA, vec2 distB)\n{ \n    if(distA.x< distB.x)\n        return distA;\n    else\n        return distB;    \n}\n  \nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  //colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj),0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\nreturn colOut;\n}\n\nvoid IniciarPath(vec2 uv)\n{   gUV=uv;\n    gidDistColor= vec2(10000.0,1.0);\n}\n\n//moveto\nvoid M(float x, float y)\n{   _x=x; _y=y;\n    x0=x; y0=y;\n}\n\nvec3 FinPath(vec3 colIn,  vec3 colOut)    \n{   colOut= DrawFig(colIn, colOut,gidDistColor.x);\n    return colOut;\n}\n\nvec3 FinPathId(float idColor,  vec3 colOut)    \n{   \n    vec3 colIn=GetColor(int(idColor));\n    colOut= DrawFig(colIn, colOut,gidDistColor.x);\n    return colOut;\n}\n\nvec3 FinPathDir(vec3 colOut)    \n{   \n    vec3 colIn=GetColor(int(gidDistColor.y));\n    colOut= DrawFig(colIn, colOut,gidDistColor.x);\n    return colOut;\n}\n\nfloat line( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvoid Z(void)\n{\n    float d1=line(gUV, vec2(_x,_y), vec2(x0,y0));\n    gidDistColor = opU(gidDistColor,  vec2( d1,gidDistColor.y ) );  \n}\n\n//line\nvoid L(float x, float y)\n{    float d1=line(gUV, vec2(_x,_y), vec2(x,y));\n    gidDistColor = unionSDF(gidDistColor,  vec2(d1,gidDistColor.y) ); \n    _x=x;\n    _y=y;\n}\n\n\nvec2 Conv3da2dFrag(vec3 pos )\n{ float xm=frag.x/1.0;\n  float ym=frag.y/1.0;\n  float horizon = 0.3;   //0.2\n  float fov = .5;\n  float scaling = 0.5;\n  vec2 s=vec2(pos.x+(xm+(pos.z-horizon)*scaling), pos.y+(ym+(pos.z-horizon)*scaling));\n    return s;    \n}\n\nvec2 convertirv3da2dEscala(vec3 p3)\n{\n    float escala=1.0/30.0;\n    p3*=escala;\n    vec2 p2=Conv3da2dFrag(p3);\n    return p2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    vec3 col=vec3(1.0);\n    \n    float aspect = min(iResolution.x, iResolution.y);\n    float tp = 1.0 / aspect;\n    vec2 uv = (fragCoord - (0.5 * iResolution.xy)) * tp;\n    uv-=vec2(-0.4,-0.2); \n    frag=1.0/iResolution.xy; \n    \n    \n     vec3 p300=vec3(5.0,6.0,0.0); \n     vec3 p30=vec3( 4.0,6.0,0.0);\n     vec3 p31=vec3( 4.0,7.0,0.0);\n     vec3 p32=vec3( 3.0,7.0,0.0);\n     vec3 p33=vec3( 3.0,2.0,0.0);\n     vec3 p34=vec3( 10.0,2.0,0.0);\n     vec3 p35=vec3( 10.0,7.0,0.0);\n     vec3 p36=vec3( 9.0, 7.0,0.0);\n     vec3 p37=vec3( 9.0, 6.0,0.0);\n     vec3 p38=vec3( 8.0, 6.0,0.0);\n  \n      vec2 p00=convertirv3da2dEscala(p300);\n      vec2 p0=convertirv3da2dEscala(p30);\n      vec2 p1=convertirv3da2dEscala(p31);\n      vec2 p2=convertirv3da2dEscala(p32);\n      vec2 p3=convertirv3da2dEscala(p33);\n      vec2 p4=convertirv3da2dEscala(p34);\n      vec2 p5=convertirv3da2dEscala(p35);\n      vec2 p6=convertirv3da2dEscala(p36);\n      vec2 p7=convertirv3da2dEscala(p37);\n      vec2 p8=convertirv3da2dEscala(p38);  \n      \n         \n    IniciarPath(uv );\n    M(p00.x,p00.y);\n    L(p0.x, p0.y);\n    L(p1.x, p1.y);\n    L(p2.x, p2.y);\n    L(p3.x, p3.y);\n    L(p4.x, p4.y);\n    L(p5.x, p5.y);\n    L(p6.x, p6.y);\n    L(p7.x, p7.y);\n    L(p8.x, p8.y);\n    col= FinPath(vec3(1.0,0.0,0.0), col);\n    ///----------\n    \n    //lineas inclinadas\n    float pz=14.0;\n     vec3 p36b=vec3( 9.0, 7.0,pz);\n     vec3 p37b=vec3( 9.0, 6.0,pz);\n     vec3 p35b=vec3( 10.0,7.0,pz);\n     vec3 p34b=vec3( 10.0,2.0,pz);\n     vec3 p30b=vec3( 4.0,6.0,pz);\n     vec3 p31b=vec3( 4.0,7.0,pz);\n     vec3 p32b=vec3( 3.0,7.0,pz);\n     vec3 p300b=vec3(5.0,6.0,pz); \n     vec3 p38b=vec3( 8.0, 6.0,pz);\n      \n     vec2 p2b0=convertirv3da2dEscala(p37);\n     vec2 p2b1=convertirv3da2dEscala(p37b);\n     \n     vec2 p3b0=convertirv3da2dEscala(p36);\n     vec2 p3b1=convertirv3da2dEscala(p36b);\n     \n     vec2 p5b0=convertirv3da2dEscala(p35);\n     vec2 p5b1=convertirv3da2dEscala(p35b);\n     \n     vec2 p4b0=convertirv3da2dEscala(p34);\n     vec2 p4b1=convertirv3da2dEscala(p34b);\n     \n     vec2 p330b0=convertirv3da2dEscala(p30);\n     vec2 p330b1=convertirv3da2dEscala(p30b);\n     \n     vec2 p331b0=convertirv3da2dEscala(p31);\n     vec2 p331b1=convertirv3da2dEscala(p31b);\n     \n     vec2 p332b0=convertirv3da2dEscala(p32);\n     vec2 p332b1=convertirv3da2dEscala(p32b);\n     \n     vec2 p300b0=convertirv3da2dEscala(p300);\n     vec2 p300b1=convertirv3da2dEscala(p300b);\n     \n     vec2 p338b0=convertirv3da2dEscala(p38);\n     vec2 p338b1=convertirv3da2dEscala(p38b);\n     \n     /*\n     IniciarPath(uv );\n     M(p2b0.x, p2b0.y);\n     L(p2b1.x, p2b1.y);\n     col= FinPath(vec3(0.0,1.0,0.0), col);\n     */\n      IniciarPath(uv );\n     M(p3b0.x, p3b0.y);\n     L(p3b1.x, p3b1.y);\n     col= FinPath(vec3(0.0,0.0,1.), col);\n\n     IniciarPath(uv );\n     M(p5b0.x, p5b0.y);\n     L(p5b1.x, p5b1.y);\n     col= FinPath(vec3(0.0,0.0,1.0), col);\n\n     IniciarPath(uv );\n     M(p4b0.x, p4b0.y);\n     L(p4b1.x, p4b1.y);\n     col= FinPath(vec3(0.0,0.0,1.0), col);\n     \n     IniciarPath(uv );\n     M(p330b0.x, p330b0.y);\n     L(p330b1.x, p330b1.y);\n     col= FinPath(vec3(0.0,0.0,1.0), col);\n     \n     IniciarPath(uv );\n     M(p331b0.x, p331b0.y);\n     L(p331b1.x, p331b1.y);\n     col= FinPath(vec3(0.0,0.0,1.0), col);\n     \n     IniciarPath(uv );\n     M(p332b0.x, p332b0.y);\n     L(p332b1.x, p332b1.y);\n     col= FinPath(vec3(0.0,0.0,1.0), col);\n     \n     IniciarPath(uv );\n     M(p300b0.x, p300b0.y);\n     L(p300b1.x, p300b1.y);\n     col= FinPath(vec3(0.0,0.0,1.0), col);\n     \n     IniciarPath(uv );\n     M(p338b0.x, p338b0.y);\n     L(p338b1.x, p338b1.y);\n     col= FinPath(vec3(0.0,0.0,1.0), col);\n     \n     ///------parte de atras\n       pz=14.0;\n     p300=vec3(5.0,6.0,pz); \n     p30=vec3( 4.0,6.0,pz);\n     p31=vec3( 4.0,7.0,pz);\n     p32=vec3( 3.0,7.0,pz);\n     p33=vec3( 3.0,2.0,pz);\n     p34=vec3( 10.0,2.0,pz);\n     p35=vec3( 10.0,7.0,pz);\n     p36=vec3( 9.0, 7.0,pz);\n     p37=vec3( 9.0, 6.0,pz);\n     p38=vec3( 8.0, 6.0,pz);\n     \n     p00=convertirv3da2dEscala(p300);\n     p0=convertirv3da2dEscala(p30);\n     p1=convertirv3da2dEscala(p31);\n     p2=convertirv3da2dEscala(p32);\n     p3=convertirv3da2dEscala(p33);\n     p4=convertirv3da2dEscala(p34);\n     p5=convertirv3da2dEscala(p35);\n     p6=convertirv3da2dEscala(p36);\n     p7=convertirv3da2dEscala(p37);\n     p8=convertirv3da2dEscala(p38);  \n         \n    IniciarPath(uv );\n    M(p00.x,p00.y);\n    L(p0.x, p0.y);\n    L(p1.x, p1.y);\n    L(p2.x, p2.y);\n    L(p3.x, p3.y);\n    L(p4.x, p4.y);\n    L(p5.x, p5.y);\n    L(p6.x, p6.y);\n    L(p7.x, p7.y);\n    L(p8.x, p8.y);\n    col= FinPath(vec3(0.0,0.0,0.0), col);\n    \n    col= mix(col, texture(iChannel0, uv-vec2(0.2,-0.2)).rgb,0.4);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///-------------common\nvec3  Arrcolores[] = vec3[] (\nvec3(0.,0.,0.),\nvec3(0.,0.,1.),\nvec3(0.,1.,0.),\nvec3(0.,1.,1.),\nvec3(1.,0.,0.),\nvec3(1.,0.,1.),\nvec3(1.,1.,0.),\nvec3(1.,1.,1.)\n);\n\nvec3 GetColor(int i)\n{    \n    //if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//https://www.shadertoy.com/view/MlSXDm\n// Learning to Dig\n// by David Hoskins.\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//8x8x1 font data...\n#define _A col += char(vec4(0x386C, 0xC6C6, 0xFEC6, 0xC600));loc.x+=1.;\n#define _B col += char(vec4(0xFCC6, 0xC6FC, 0xC6C6, 0xFC00));loc.x+=1.;\n#define _C col += char(vec4(0x3C66, 0xC0C0, 0xC066, 0x3C00));loc.x+=1.;\n#define _D col += char(vec4(0xF8CC, 0xC6C6, 0xC6CC, 0xF800));loc.x+=1.;\n#define _E col += char(vec4(0xFEC0, 0xC0FC, 0xC0C0, 0xFE00));loc.x+=1.;\n#define _F col += char(vec4(0xFEC0, 0xC0FC, 0xC0C0, 0xC000));loc.x+=1.;\n#define _G col += char(vec4(0x3E60, 0xC0CE, 0xC666, 0x3E00));loc.x+=1.;\n#define _H col += char(vec4(0xC6C6, 0xC6FE, 0xC6C6, 0xC600));loc.x+=1.;\n#define _I col += char(vec4(0x7E18, 0x1818, 0x1818, 0x7E00));loc.x+=1.;\n#define _J col += char(vec4(0x606, 0x606, 0x6C6, 0x7C00));loc.x+=1.;\n#define _K col += char(vec4(0xC6CC, 0xD8F0, 0xF8DC, 0xCE00));loc.x+=1.;\n#define _L col += char(vec4(0x6060, 0x6060, 0x6060, 0x7E00));loc.x+=1.;\n#define _M col += char(vec4(0xC6EE, 0xFEFE, 0xD6C6, 0xC600));loc.x+=1.;\n#define _N col += char(vec4(0xC6E6, 0xF6FE, 0xDECE, 0xC600));loc.x+=1.;\n#define _O col += char(vec4(0x7CC6, 0xC6C6, 0xC6C6, 0x7C00));loc.x+=1.;\n#define _P col += char(vec4(0xFCC6, 0xC6C6, 0xFCC0, 0xC000));loc.x+=1.;\n#define _Q col += char(vec4(0x7CC6, 0xC6C6, 0xDECC, 0x7A00));loc.x+=1.;\n#define _R col += char(vec4(0xFCC6, 0xC6CC, 0xF8DC, 0xCE00));loc.x+=1.;\n#define _S col += char(vec4(0x78CC, 0xC07C, 0x6C6, 0x7C00));loc.x+=1.;\n#define _T col += char(vec4(0x7E18, 0x1818, 0x1818, 0x1800));loc.x+=1.;\n#define _U col += char(vec4(0xC6C6, 0xC6C6, 0xC6C6, 0x7C00));loc.x+=1.;\n#define _V col += char(vec4(0xC6C6, 0xC6EE, 0x7C38, 0x1000));loc.x+=1.;\n#define _W col += char(vec4(0xC6C6, 0xD6FE, 0xFEEE, 0xC600));loc.x+=1.;\n#define _X col += char(vec4(0xC6EE, 0x7C38, 0x7CEE, 0xC600));loc.x+=1.;\n#define _Y col += char(vec4(0x6666, 0x663C, 0x1818, 0x1800));loc.x+=1.;\n#define _Z col += char(vec4(0xFE0E, 0x1C38, 0x70E0, 0xFE00));loc.x+=1.;\n#define _a col += char(vec4(0x0, 0x7C06, 0x7EC6, 0x7E00));loc.x+=1.;\n#define _b col += char(vec4(0xC0C0, 0xFCC6, 0xC6C6, 0x7C00));loc.x+=1.;\n#define _c col += char(vec4(0x0, 0x7EC0, 0xC0C0, 0x7E00));loc.x+=1.;\n#define _d col += char(vec4(0x606, 0x7EC6, 0xC6C6, 0x7E00));loc.x+=1.;\n#define _e col += char(vec4(0x0, 0x7CC6, 0xFEC0, 0x7C00));loc.x+=1.;\n#define _f col += char(vec4(0xE18, 0x7E18, 0x1818, 0x1800));loc.x+=1.;\n#define _g col += char(vec4(0x0, 0x7EC6, 0xC67E, 0x67C));loc.x+=1.;\n#define _h col += char(vec4(0xC0C0, 0xFCC6, 0xC6C6, 0xC600));loc.x+=1.;\n#define _i col += char(vec4(0x1800, 0x3818, 0x1818, 0x7E00));loc.x+=1.;\n#define _j col += char(vec4(0xC00, 0x1C0C, 0xC0C, 0xC78));loc.x+=1.;\n#define _k col += char(vec4(0xC0C0, 0xCEFC, 0xF8DC, 0xCE00));loc.x+=1.;\n#define _l col += char(vec4(0x3818, 0x1818, 0x1818, 0x7E00));loc.x+=1.;\n#define _m col += char(vec4(0x0, 0xFCB6, 0xB6B6, 0xB600));loc.x+=1.;\n#define _n col += char(vec4(0x0, 0xFCC6, 0xC6C6, 0xC600));loc.x+=1.;\n#define _o col += char(vec4(0x0, 0x7CC6, 0xC6C6, 0x7C00));loc.x+=1.;\n#define _p col += char(vec4(0x0, 0xFCC6, 0xC6FC, 0xC0C0));loc.x+=1.;\n#define _q col += char(vec4(0x0, 0x7EC6, 0xC67E, 0x606));loc.x+=1.;\n#define _r col += char(vec4(0x0, 0x6E70, 0x6060, 0x6000));loc.x+=1.;\n#define _s col += char(vec4(0x0, 0x7CC0, 0x7C06, 0xFC00));loc.x+=1.;\n#define _t col += char(vec4(0x1818, 0x7E18, 0x1818, 0x1800));loc.x+=1.;\n#define _u col += char(vec4(0x0, 0xC6C6, 0xC6C6, 0x7E00));loc.x+=1.;\n#define _v col += char(vec4(0x0, 0x6666, 0x663C, 0x1800));loc.x+=1.;\n#define _w col += char(vec4(0x0, 0xB6B6, 0xB6B6, 0x7E00));loc.x+=1.;\n#define _x col += char(vec4(0x0, 0xC6FE, 0x38FE, 0xC600));loc.x+=1.;\n#define _y col += char(vec4(0x0, 0xC6C6, 0xC67E, 0x67C));loc.x+=1.;\n#define _z col += char(vec4(0x0, 0xFE1C, 0x3870, 0xFE00));loc.x+=1.;\n#define _0 col += char(vec4(0x384C, 0xC6C6, 0xC664, 0x3800));loc.x+=1.;\n#define _1 col += char(vec4(0x1838, 0x1818, 0x1818, 0x7E00));loc.x+=1.;\n#define _2 col += char(vec4(0x7CC6, 0xE3C, 0x78E0, 0xFE00));loc.x+=1.;\n#define _3 col += char(vec4(0x7E0C, 0x183C, 0x6C6, 0x7C00));loc.x+=1.;\n#define _4 col += char(vec4(0x1C3C, 0x6CCC, 0xFE0C, 0xC00));loc.x+=1.;\n#define _5 col += char(vec4(0xFCC0, 0xFC06, 0x6C6, 0x7C00));loc.x+=1.;\n#define _6 col += char(vec4(0x3C60, 0xC0FC, 0xC6C6, 0x7C00));loc.x+=1.;\n#define _7 col += char(vec4(0xFEC6, 0xC18, 0x3030, 0x3000));loc.x+=1.;\n#define _8 col += char(vec4(0x78C4, 0xE478, 0x9E86, 0x7C00));loc.x+=1.;\n#define _9 col += char(vec4(0x7CC6, 0xC67E, 0x60C, 0x7800));loc.x+=1.;\n#define _EXC col += char(vec4(0x3838, 0x3830, 0x3000, 0x3000));loc.x+=1.;\n#define _QTN col += char(vec4(0x7CFE, 0xC60C, 0x3800, 0x3800));loc.x+=1.;\n#define _COM col += char(vec4(0x0, 0x0, 0x30, 0x3060));loc.x+=1.;\n#define _APO col += char(vec4(0x3030, 0x3000, 0x0, 0x0));loc.x+=1.;\n#define _STP col += char(vec4(0x0, 0x0, 0x30, 0x3000));loc.x+=1.;\n#define _SP loc.x+=1.; \n\nvec2 loc;\nvec2 crd;\n\nfloat char(in vec4 b)\n{\n    float bin;\n    vec2 p = crd- (loc * 9.0);\n    if (!(all(lessThan(p,vec2(8))) &&  all(greaterThanEqual(p,vec2(0))))) return 0.0;\n    \n\tp = floor(8.0-p);    int c = int(p.y / 2.0);\n    if (c == 0)\n    {\n    \tbin = b.x;\n    }else\n    if (c == 1)\n    {\n    \tbin = b.y;\n    }else\n    if (c == 2)\n    {\n    \tbin = b.z;\n    }else\n    if (c == 3)\n    {\n    \tbin = b.w;\n    }\n    if (int(mod(p.y, 2.0)) == 0) p.x += 8.;\n\treturn mod(floor(float(bin) / pow(2.0, p.x)), 2.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 coord )\n{\n\t\n    crd = coord*0.5;\n    \n    float col = 0.0;\n     //loc = vec2(0, 0);\n    // _A _B _C _D _E _F _G _H _I _J _K _L _M _N _O _P _Q _R _S _T _U _V _W _X _Y _Z\n     //loc = vec2(0, 1);\n    //_a _b _c _d _e _f _g _h _i _j _k _l _m _n _o _p _q _r _s _t _u _v _w _x _y _z\n    //loc = vec2(0, 2);\n    //_0 _1 _2 _3 _4 _5 _6 _7 _8 _9 _EXC _QTN _STP _COM _APO\n    \n     \n     loc = vec2(17.0,1.0);\n     _c _o _d _e _SP _b _y _SP _J _F\n    \n\tfragColor = vec4(col);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}