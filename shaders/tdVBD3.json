{
    "Shader": {
        "info": {
            "date": "1608152060",
            "description": "Trying to simulate a [url=https://en.wikipedia.org/wiki/Bean_machine]Galton board[/url] (bean machine). Big thank you to kastorp for fixing the collision problem! :) Click to see the normal distribution.",
            "flags": 32,
            "hasliked": 0,
            "id": "tdVBD3",
            "likes": 49,
            "name": "Bean Machine",
            "published": 3,
            "tags": [
                "simulation",
                "physics",
                "statistics",
                "beanmachine",
                "galtonboard"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 677
        },
        "renderpass": [
            {
                "code": "float mapEnvironment(in vec2 p, in int ballID) {\n    float distToEnv = mapEnvironmentNoBalls(p);\n    for (int id=0; id < NUMBER_OF_BALLS; id++) {\n        if (id != ballID) {\n            vec2 ballPos = getBallPos(id);\n            distToEnv = min(distToEnv, length(p - ballPos) - BALL_RADIUS);\n        }\n    }\n\n    return distToEnv;\n}\n\nfloat normalDistribution(in float x, in float sigma, in float mu) {\n    const float SQRT_TWO_PI = 2.50662827463;\n    float q = (x - mu) / sigma;\n    return exp(-0.5 * q * q) / (sigma * SQRT_TWO_PI);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    float env = mapEnvironmentNoBalls(uv);\n    fragColor.rgb += vec3(0.6, 0.3, 0.0) * smoothstep(unit, 0.0, env);\n\n    if (env > 0.0) {\n        for (int id=0; id < NUMBER_OF_BALLS; id++) {\n            vec2 ballPos = getBallPos(id);\n            float ball = length(uv - ballPos) - BALL_RADIUS;\n            fragColor.rgb = mix(fragColor.rgb, vec3(1.0, 0.8, 0.6), smoothstep(unit, 0.0, ball));\n            fragColor.rgb = mix(fragColor.rgb, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, abs(ball) + 0.2 * unit));\n        }\n    }\n\n    if (iMouse.z > 0.0) {\n        fragColor.rgb = mix(fragColor.rgb, vec3(1.0, 1.0, 1.0), smoothstep(unit, 0.0, abs(uv.y + 0.4 - 0.75 * normalDistribution(3.0 * uv.x, 1.0, 0.0))));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define NUMBER_OF_BALLS 100\n#define BALL_RADIUS 0.02\n\n#define GRAVITY 0.0001\n#define FRICTION 0.9\n\n#define getBallPos(id) texelFetch(iChannel0, ivec2(id, 0), 0).xy\n#define getBallVel(id) texelFetch(iChannel0, ivec2(id, 1), 0).xy\n\nfloat mapEnvironmentNoBalls(in vec2 p) {\n    float container = min(p.y + 0.4, 0.8 - abs(p.x));\n\n    vec2 q1 = mod(p, vec2(0.1, 0.2)) - vec2(0.05, 0.1);\n    vec2 q2 = mod(p + vec2(0.05, 0.1), vec2(0.1, 0.2)) - vec2(0.05, 0.1);\n    vec2 q3 = abs(p - vec2(0.0, 0.1)) - vec2(0.51, 0.11);\n\n    float bbox = length(max(q3, 0.0)) + min(max(q3.x, q3.y), 0.0);\n    float pegs = max(min(length(q1) - 0.01, length(q2) - 0.01), bbox);\n\n    vec2 q4 = abs(vec2(mod(p.x, 0.1) - 0.05, p.y + 0.25)) - vec2(0.005, 0.15);\n    bbox = abs(p.x) - 0.675;\n    float bins = max(length(max(q4, 0.0)) + min(max(q4.x, q4.y), 0.0), bbox);\n\n    p.x = abs(p.x);\n    p.x -= 0.92;\n    p.y -= 0.8;\n    p *= mat2(0.5, -0.866, 0.866, 0.5);\n    vec2 q5 = abs(p) - vec2(0.01, 1.0);\n    float funnel = length(max(q5, 0.0)) + min(max(q5.x, q5.y), 0.0);\n\n    return min(container, min(pegs, min(bins, funnel)));\n}\n\n// Hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW):\nvec2 generatePosition(in float id) {\n\tid += iDate.w; // Thanks Jinkweiq :)\n    vec3 p3 = fract(vec3(id) * vec3(0.1031, 0.1030, 0.0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    vec2 p = fract((p3.xx + p3.yz) * p3.zy);\n    return vec2(-0.3, 5.0) + p * vec2(0.6, -4.5);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec4 mapEnvironment(in vec2 p, in int ballID) {\n    vec2 ballPos = getBallPos(ballID);\n\n    float distToEnv = mapEnvironmentNoBalls(p);\n    vec2 colliderVel = vec2(0.0, 0.0);\n    float colliderType = 0.0;\n\n    for (int id=0; id < NUMBER_OF_BALLS; id++) {\n        if (id != ballID) {\n            vec2 colliderPos = getBallPos(id);\n            distToEnv = min(distToEnv, length(p - colliderPos) - BALL_RADIUS);\n\n            if (length(ballPos - colliderPos) < 2.0 * BALL_RADIUS) {\n                colliderVel = getBallVel(id);\n                colliderType = 1.0;\n            }\n        }\n    }\n\n    return vec4(distToEnv, colliderVel, colliderType);\n}\n\nvec2 getNormal(in vec2 p, in int id) {\n    return normalize(vec2(mapEnvironment(p + vec2(0.001, 0.0), id).x - mapEnvironment(p - vec2(0.001, 0.0), id).x,\n                          mapEnvironment(p + vec2(0.0, 0.001), id).x - mapEnvironment(p - vec2(0.0, 0.001), id).x));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 address = ivec2(fragCoord);\n    if (address.x < NUMBER_OF_BALLS && address.y == 0) {\n        fragColor = vec4(generatePosition(fragCoord.x), 0.0, 1.0);\n    }\n\n    if (address.x < NUMBER_OF_BALLS && address.y == 1) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n\n    if (iFrame > 0) {\n        if (address.x < NUMBER_OF_BALLS) {\n            vec2 ballPos = getBallPos(address.x);\n            vec2 ballVel = getBallVel(address.x);\n\n            ballVel.y -= GRAVITY;\n            ballPos += ballVel;\n\n            vec4 envData = mapEnvironment(ballPos, address.x);\n            if (envData.x < BALL_RADIUS) {\n                vec2 hitNormal = getNormal(ballPos, address.x);\n                ballPos += hitNormal * (BALL_RADIUS - envData.x); // Thanks kastorp :)\n\n                if (envData.w > 0.0) {\n                    vec2 perpNormal = hitNormal.yx * vec2(-1.0, 1.0);\n                    vec2 ballVel2 = envData.yz;\n                    ballVel = dot(ballVel2, hitNormal) * hitNormal + dot(ballVel, perpNormal) * perpNormal;\n                }\n\n                else {\n                    ballVel = reflect(ballVel, hitNormal);\n                }\n\n                ballVel *= FRICTION;\n            }\n\n            if (address.y == 0) {\n                fragColor = vec4(ballPos, 0.0, 1.0);\n            }\n\n            if (address.y == 1) {\n                fragColor = vec4(ballVel, 0.0, 1.0);\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}