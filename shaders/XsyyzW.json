{
    "Shader": {
        "info": {
            "date": "1521130729",
            "description": "each pixel of BufA compute a digit of Pi.\nAlas, this is in hexadecimal. Or cf #define DISP for short decimal display.\nref: 3.1415926535897932384626433832795028841971693993\n      3.243F6A8885A308D313198A2E03707344A409382",
            "flags": 32,
            "hasliked": 0,
            "id": "XsyyzW",
            "likes": 4,
            "name": "parallel Pi -hexa (Plouffe algo)",
            "published": 3,
            "tags": [
                "pi",
                "plouffe",
                "spigot"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 736
        },
        "renderpass": [
            {
                "code": "// Pi by Plouffe spigot algorithm:\n\n\n// === access to the image of ascii code c\nvec4 char(vec2 p, int c) {\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx(p/16.),dFdy(p/16.) );\n}\n#define num(c) char(U, 48+c ).x\n#define hex(c) char(U, c<10 ? 48+c: 55+c ).x\n\n\n// === display\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O-=O;\n    U /= S;\n    ivec2 iU = ivec2(U);                // cell index\n    iU.y = W.y-iU.y-1;                  // 1st line on top\n    if ( iU.x>=W.x || iU.y<0 ) return;\n    U = fract(U); U.x = U.x/2.+.2;      // reframed char coord in its bbox\n\n    int n = int( texelFetch(iChannel0, iU, 0).r );\n\n#if DISP==0\n    // all digits of pi in hexa\n    O += hex(n); \n\n#else\n    // one line per block of digit in hexa or decimal\n    O += hex(n); \n    if (iU.y==0) O.b =0.;               // ref value in yellow\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Pi by Plouffe spigot algorithm:\n\n// each pixel computes a separate digit thanks to the marvelous Plouffe formula \n// ( well, each character block, for readability :-) ).\n\n// See also (en & fr) https://en.wikipedia.org/wiki/Bailey%E2%80%93Borwein%E2%80%93Plouffe_formula\n// Adapted from C code:  http://www.experimentalmath.info/bbp-codes/piqpr8.c\n\n// Another PI method (not parallel): https://www.shadertoy.com/view/MdtXWj\n\n#define double float\n#define pow16(x) exp2(4.*(x))\n\ndouble series (int m, int n);\ndouble expm (double x, double y);\n\n//  id is the digit position.  Digits generated follow immediately after id. \nfloat digit(int id)\n{ \n  if (id<0) return .1415926535897; // for test ( = ref )\n    \n  double pid, s1, s2, s3, s4;\n\n  s1 = series (1, id);\n  s2 = series (4, id);\n  s3 = series (5, id);\n  s4 = series (6, id);\n  pid = 4. * s1 - 2. * s2 - s3 - s4;\n  return fract(pid);// NB: pid always <0 ? \n}\n\n\n//  This routine evaluates the series  sum_k 16^(id-k)/(8*k+m) \n//  using the modular exponentiation technique.\ndouble series (int m, int id)\n{\n  int k;\n  double ak, p, s, t;\n#define eps 1e-17     // maybe we could shorten it when using floats\n\n  s = 0.;\n\n//  Sum the series up to id.\n  for (k = 0; k < id; k++){\n    ak = float(8 * k + m);\n    p = float(id - k);\n    t = expm (p, ak) / ak;\n    s = fract(s+t); \n  }\n\n//  Compute a few terms where k >= id. \n#define M 8  // was 100. 8 seems sufficient to have the whole 10 hex digit ok ! 1 is still ok for 3 digits\n  for (k = id; k <= id + M; k++){\n    ak = float(8 * k + m);\n    t = pow16( float(id - k)) / ak; \n    if (t < eps) break;\n    s = fract(s+t);\n  }\n  return s;\n}\n\n//  expm = 16^p mod ak.  This routine uses the left-to-right binary \n//  exponentiation scheme.\ndouble expm (double p, double ak)\n{\n  int i, j;\n  double p1, pt, r;\n#define ntp 25\n#define tp(i) exp2(float(i))\n    \n  if (ak == 1.) return 0.;\n\n//  Find the greatest power of two less than or equal to p.\n// $FaN: why not using floor(log2(p)) ?\n  for (i = 0; i < ntp; i++) if (tp(i) > p) break;\n\n  pt = tp(i-1);\n  p1 = p;\n  r = 1.;\n\n//  Perform binary exponentiation algorithm modulo ak.\n  for (j = 1; j <= i; j++){\n    if (p1 >= pt){\n      r = 16. * r;\n      r = mod(r,ak); // $FaN: is mod reliable ?\n      p1 -= pt;\n    }\n    pt /= 2.;\n    if (pt >= 1.){\n      r = r * r;\n      r = mod(r,ak); \n    }\n  }\n\n  return r;\n}\n\n// === access to the image of ascii code c\nvec4 char(vec2 p, int c) {\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx(p/16.),dFdy(p/16.) );\n}\n#define num(c) char(U, 48+c ).x\n#define hex(c) char(U, c<10 ? 48+c: 55+c ).x\n\n\n// === store digits\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U -= .5;\n    ivec2 iU = ivec2(U);                // cell index\n    \n    if (iU==ivec2(0,0)) { O.x =  3.; return; } // 3\n    if (iU==ivec2(1,0)) { O.x = -2.; return; } // .\n    iU.x -= 2;\n    \n#if DISP==0\n    // all digits of pi in hexa\n    if ( iU.x>=W.x || iU.y>=W.y ) return;\n    int n = int(16.* digit(iU.x + W.x*iU.y));\n    O.x = float(n); \n\n#elif DISP==1\n    // one line per block of digit in hexa or decimal\n    float pi = digit(iU.y-1);\n    int n = int( 16.*fract(pi*pow16(float(iU.x))) );   // x -> block digit\n    O.x = float(n); \n#else\n    // one line per block of digit in decimal\n    float pi = digit(iU.y-1);\n    int n = int( 10.*fract(pi*pow(10.,float(iU.x))) ); // x -> block digit\n    O.x = float(n); \n#endif\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define DISP 0 // 0: long PI in hexa. 1: 1 block in hexa. 2: 1 block in decimal. \n\nvec2 S = 32./vec2(2,1);             // character size\n#define W ivec2(iResolution.xy/S)   // size of display char matrix\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}