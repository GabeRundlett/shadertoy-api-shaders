{
    "Shader": {
        "info": {
            "date": "1684921762",
            "description": "Simple Mandelbrot set animation",
            "flags": 0,
            "hasliked": 0,
            "id": "DlcXzn",
            "likes": 0,
            "name": "Simple Mandelbrot animation",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "Sleng",
            "viewed": 137
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Shifted to [-1.0, 1.0] and zoom\n    uv = (uv - 0.5) * 2.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Julia Set Parameters\n    vec2 c = vec2(0.5*sin(iTime), 0.5*cos(iTime));\n    vec2 z = uv;\n\n    float iter = 0.0;\n    float max_iter = 100.0;\n\n    // Mandelbrot Set Iterations\n    while (iter < max_iter) {\n        float x = (z.x * z.x - z.y * z.y) + c.x;\n        float y = (2.0 * z.x * z.y) + c.y;\n\n        z = vec2(x,y);\n\n        if (length(z) > 2.0) break;\n        iter++;\n    }\n\n    // Color\n    vec3 color = vec3(0.0);\n    if (iter < max_iter) {\n        color = 0.5 + 0.5*cos(3.0 + iter*0.15 + vec3(0.0,0.6,1.0));\n    }\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}