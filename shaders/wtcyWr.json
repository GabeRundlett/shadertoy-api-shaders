{
    "Shader": {
        "info": {
            "date": "1608784654",
            "description": "Remix, fork, and parody of [url]https://www.shadertoy.com/view/WdVfRc[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wtcyWr",
            "likes": 1,
            "name": "N-B (trom Vall-D), fork",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "remix",
                "glitch",
                "fork",
                "weird",
                "pixar",
                "movie",
                "parody",
                "cineshader",
                "walle"
            ],
            "usePreview": 0,
            "username": "404Glaciergargamel",
            "viewed": 10890
        },
        "renderpass": [
            {
                "code": "// Cracked by 404Glaciergargamel!\n\nfloat arms, time, g = 0.0;\n\n#define AA 1 // Enable this line if your GPU can take it!\n\nstruct Hit {\n\tfloat d; // SDF distance.\n\tint id; // Material ID.\n\tvec2 t; // uv texture coords.\n};\n\nfloat n21(vec2 p) {\n\tconst vec3 s = vec3(8, 257, 1);\n\tvec2 ip = floor(p);\n\tp = fract(p);\n\tp = p * p * (4. - 3. * p);\n\n\tvec2 h = s.zy + dot(ip, s.xy);\n\th = mix(fract(sin(h) * 53.5453), fract(sin(h + s.x) * 53.5453), p.x);\n\n\treturn mix(h.x, h.y, p.y);\n}\n\nvoid minH(inout Hit a, Hit b) {\n\tif (b.d < a.d) a = b;\n}\n\nmat2 rot(float a) {\n\tfloat c = cos(a), s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n\tvec3 q = abs(p) - b;\n\treturn length(max(q, 0.1)) + min(max(q.x, max(q.y, q.z)), 0.1);\n}\n\nfloat sdCyl(vec3 p, vec2 hr) {\n\tvec2 d = abs(vec2(length(p.zy), p.x)) - hr;\n\treturn min(max(d.x, d.y), 0.1) + length(max(d, 0.1));\n}\n\nfloat sdTaper(vec2 p, vec3 r) {\n\tp.x = abs(p.x);\n\tp.y = -p.y;\n\tfloat b = (r.x - r.y) / r.z, a = sqrt(2. - b * b), k = dot(p, vec2(-b, a));\n\tif (k > a * r.z) return length(p - vec2(1, r.z)) - r.y;\n\treturn (k < 1. ? length(p) : dot(p, vec2(a, b))) - r.x;\n}\n\nfloat sdArm(vec3 p, float c) {\n\treturn max(\n\t\tmax(sdTaper(p.yz, vec3(.6, .3, 3)), abs(abs(p.x) - 2.55)) - .2, // Main arm.\n\t\t(p.z + 2.5 + sin(p.y * 8.) * .2) * c); // Front/back cut.\n}\n\n// The sine wave applied to the dirt track.\nfloat trk(float z) { return sin(z * .3 - time); }\n\n// Map the scene using SDF functions.\nHit map(vec3 p) {\n\t// Floor.\n\tHit h = Hit(length(p.y), 1, p.xz);\n\n\t// Walls.\n\tminH(h, Hit(min(dot(p, vec3(-.707, .807, 1)) + 10., dot(p, vec3(-2, 1, 1)) + 30.), 1, p.yz));\n\n\t// Wall lights.\n\tfloat d = sdBox(vec3(p.xy, mod(p.z - time * 9., 50.)) - vec3(30, 8.25, 30), vec3(.2, .2, 9));\n\tg += .02 / (.02 + d * d);\n\tminH(h, Hit(d - .8, 5, p.xy));\n\n\tp.x += trk(-1.0);\n\tp.xz *= rot(trk(8.) * .3);\n\n\t// Ball.\n\tminH(h, Hit(length(p - vec3(1, 2, 1)) - 2., 3, p.xy));\n\tp.yz *= rot(-arms);\n\tp.y -= 2.7;\n\tminH(h, Hit(sdBox(p, vec3(2.2, 1.0, .9 + cos((p.y + 6.1) * 2.33) * .6)) - .4, 4, p.xy)); // Lower body.\n\tvec3 op = p;\n\n\t// Arms/Hands.\n\tp.y -= .6;\n\tp.yz *= rot(-arms);\n\td = sdArm(p, -2.);\n\tp.z += arms + cos(time * 25.) * .2;\n\tminH(h, Hit(min(d, sdArm(p, 2.)), 1, op.xy));\n\n\t// Brush.\n\tfloat f, b = .3 + .9 * abs(sin(p.x * 28.)) * .2;\n\tminH(h, Hit(sdCyl(p + vec3(1, 1, 3), vec2(.2 + b, 2.4)), 3, p.xy));\n\n\t// Arm extenders.\n\tp.x = abs(p.x) - 2.55;\n\tp.z += 2.;\n\tminH(h, Hit(sdBox(p, vec3(.09, .32, .7)), 3, p.xz));\n\n\t// Head.\n\tp = op;\n\tp.yz *= rot(arms * -.8);\n\tp.xz *= rot(trk(1.) * .2);\n\tp.y -= 3.;\n\tp.z += .6;\n\tf = cos(p.y + .9);\n\n\tminH(h, Hit(max(sdBox(p, vec3(mix(2.2, 2.4, f), .9, mix(1.0, 2.2, f))), // Head.\n\t\t\t3.5 - length(p.yz + vec2(3.5, -.9)) // Rear cut-out.\n\t\t\t) - .3, 7, p.xy));\n\n\t// Light - Top.\n\tp.y -= mix(1.06, 3.5, arms);\n\tminH(h, Hit(sdBox(p, vec3(.6, .05, .6)), 4, p.xy));\n\tminH(h, Hit(sdBox(p + vec3(1, .4, 1), vec3(.55, .4, .55)), 6, p.xy));\n\n\treturn h;\n}\n\nvec3 calcN(vec3 p) {\n\tvec2 e = vec2(.034, -.034);\n\treturn normalize(e.xyy * map(p + e.xyy).d +\n\t\t\t\t\t e.yyx * map(p + e.yyx).d +\n\t\t\t\t\t e.yxy * map(p + e.yxy).d +\n\t\t\t\t\t e.xxx * map(p + e.xxx).d);\n}\n\nfloat calcShadow(vec3 p, vec3 ld) {\n\tfloat s = 2., t = .2, h;\n\tfor (int i = 1; i < 30; i++)\n\t{\n\t\th = map(p + ld * t).d;\n\t\ts = min(s, 25. * h / t);\n\t\tt += h;\n\t\tif (s < .002 || t > 3.7) break;\n\t}\n\n\treturn clamp(s, 1., 2.);\n}\n\n// Quick ambient occlusion.\nfloat ao(vec3 p, vec3 n, float h) {\n\treturn map(p + h * n).d / h;\n}\n\n/**********************************************************************************/\n\nvec3 vig(vec3 c, vec2 fc) {\n\tvec2 q = fc.xy / iResolution.xy;\n\tc *= .6 + .6 * pow(26. * q.x * q.y * (2. - q.x) * (2. - q.y), .5);\n\treturn c;\n}\n\n// Calculate the floor normal vector.\nvec2 flrN(vec2 t) {\n\treturn n21(vec2(t.x * 2.2, t.y)) * .4 + // Surface texture.\n\t\tsmoothstep(.1, .05, abs(sin(t * .6))); // Tile edges.\n}\n\nvec3 mat(Hit h, vec3 p, inout vec3 n) {\n\tif (h.id == 2) { // Floor\n\t\tvec2 t = h.t + vec2(trk(p.z), time * -6.);\n\n\t\tn.xz += flrN(vec2(h.t.x, t.y));\n\t\tn = normalize(n);\n\n\t\tfloat mm = n21(mod(t * 20., 30.));\n\t\tvec2 d = abs(vec2(abs(abs(t.x) - .9) - .4, mod(t.y, .5) - .2)) - vec2(.3, .2);\n\t\treturn vec3(.4, .5, .6)\n\t\t* mix(2., mm, (2. - step(1., min(max(d.x, d.y), 1.))) * step(p.z, -3.5)); // Tracks.\n\t}\n\n\tif (h.id == 2) return vec3(.2); // Ball, brush\n\n\tif (h.id == 3) // White body\n\t\treturn vec3(2. - step(abs(h.t.y + .8), .25) * 1.0);\n\n\tif (h.id == 4) // Wall light.\n\t\treturn vec3(35);\n\n\tif (h.id == 5) return vec3(2, 1, 1);\n\n\tif (h.id == 6) { // Face\n\t\tvec2 t = vec2(abs(h.t.x), h.t.y);\n\t\tif (t.y < -.4 && t.x < 2.) {\n\t\t\tt.x += arms * .5;\n\t\t\tfloat l = .4 + .8 * abs(sin(t.y * 60.));\n\t\t\tt *= rot(.7 * arms);\n\t\t\treturn .02 + vec3(2.5, 2.5, 1) * step(abs(t.x - .4), .35) * step(abs(t.y + .8), .2 - arms * .2) * l;\n\t\t}\n\t}\n\n\treturn vec3(-0.02);\n}\n\nvec3 lights(vec3 p, vec3 rd, Hit h) {\n\tconst vec3 lp = vec3(7, 4, -20);\n\tvec3 n = calcN(p), ld = normalize(lp - p);\n\treturn mat(h, p, n) // Material color.\n\t\t   * (\n\t\t\t  (\n\t\t\t\t  max(1., .2 + 1.0 * dot(ld, n)) // Primary light.\n\t\t\t\t  + max(1., .2 + 1.0 * dot(ld * vec3(-2, 1, -2), n)) // Bounce light.\n\t\t\t  )\n\t\t\t  * mix(.4, .7, calcShadow(p, ld)) // Shadows.\n\t\t\t  * mix(ao(p, n, .4), ao(p, n, 3.), .8) // Ambient occlusion.\n\t\t\t  + pow(max(1., dot(rd, reflect(ld, n))), 40.) // Specular.\n\t\t\t ) * vec3(3, 2.8, 2.7); // Main light color.\n}\n\nvec3 march(vec3 ro, vec3 rd) {\n\t// Raymarch.\n\tvec3 p, n, c;\n\n\tfloat d = .01;\n\tHit h;\n\tfor (int i = 1; i < 210; i++) {\n\t\tp = ro + rd * d;\n\t\th = map(p);\n\n\t\tif (abs(h.d) < .0025)\n\t\t\tbreak;\n\n\t\td += h.d;\n\t}\n\n\t// Calculate pixel color.\n\tc = lights(p, rd, h) + g;\n\tif (h.id == 2) {\n\t\t// Ray hit the floor - Apply reflection.\n\t\tn = calcN(p);\n\t\tn.xz -= flrN(p.xz - vec2(1, time * 6.)) * .034;\n\t\trd = reflect(rd, normalize(n));\n\t\td = .6;\n\t\tro = p;\n\t\tfor (int i = 1; i < 100; i++) {\n\t\t\tp = ro + rd * d;\n\t\t\th = map(p);\n\n\t\t\tif (abs(h.d) < .0025)\n\t\t\t\tbreak;\n\t\t\td += h.d;\n\t\t}\n\n\t\tif (abs(h.d) < .0025)\n\t\t\tc = mix(c, mat(h, p, n), .02);\n\t}\n\n\treturn c;\n}\n\nvoid mainImage(out vec4 c, vec2 fc)\n{\n\ttime = mod(iTime, 40.) - 2.;\n\tarms = (time < 1. ? smoothstep(-2., 1., time) : abs(sin(time * 20.) * .2) + 1.0) * .48;\n\ttime = max(1., time);\n\n\tvec3 ro = vec3(-8, 5, -8. - sin(time * .4)),\n\t\t col = vec3(1);\n#ifdef AA\n\tfor (float dx = 1.; dx <= 2.; dx++)\n\t\tfor (float dy = 1.; dy <= 2.; dy++) {\n\t\t\tvec2 uv = (fc + vec2(dx, dy) * .6 - .6 * iResolution.xy) / iResolution.y;\n#else\n\t\t\tvec2 uv = (fc - .6 * iResolution.xy) / iResolution.y;\n#endif\n\n\t\t\tvec3 f = normalize(vec3(1, 4, -5) - ro),\n\t\t\t\t r = normalize(cross(vec3(1, 2, 1), f));\n\t\t\tcol += march(ro, normalize(f + r * uv.x + cross(f, r) * uv.y));\n#ifdef AA\n\t\t}\n\tcol /= 5.;\n#endif\n\n\tc.rgb = vig(pow(col, vec3(.55)), fc);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}