{
    "Shader": {
        "info": {
            "date": "1512499982",
            "description": "inverse transform of the Moebius spiral,  vs direct  Moebius spiral. \nR,G,B,grey correspond to the 4 solution domains of the inverse transform.\nMouse click to display domain stitching limit & restitch in coherent domains ( UNIQ flag )",
            "flags": 0,
            "hasliked": 0,
            "id": "Xllfzj",
            "likes": 2,
            "name": "inverse Moebius Spiral",
            "published": 3,
            "tags": [
                "spiral",
                "mobius",
                "complex",
                "inverse",
                "screenspace",
                "tuto",
                "weave"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 580
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/Xlffzj\n\nbool UNIQ = false; // if true, inverse gives one unique solution\n\n#define S(v) smoothstep(2./iResolution.y, 0., v )\n\n// --- direct transforms\nvec2 Mobius(vec2 p, vec2 z1, vec2 z2)\n{\n\tz1 = p - z1; p -= z2;\n\treturn mat2(z1,z1.y,-z1.x) * p / dot(p, p);\n}\n\nvec2 spiralZoom(vec2 p, vec2 offs, float n, float spiral, float zoom, vec2 phase)\n{\n\tp -= offs;\n\tfloat a = atan(p.y, p.x)/6.283 + iTime/32.;\n\tfloat d = length(p);\n\treturn mat2(n,1, spiral,-zoom) * vec2(a, log(d)) + phase;\n}\n\n// --- inverse transforms\nfloat k; // for tests\nvec4 iMobius(vec2 p, vec2 z1, vec2 z2, float s)      // s = -1 or 1, 2 solution for each\n{   float sb = 1.;\n    if (UNIQ)                                        // ... or if activating signs,\n        s *= sign(p.x), sb = sign(p.y);              // unique sol: s=1,x1,y1 otherwise 4\n\n    float l = length(p), t = p.y/p.x,                // solve  u = v*l ; tan(u,v) = p.y/p.x\n        c = s / sqrt(1.+t*t),                        // c = cos(atan( ) )\n        v = length(z1-z2) / sqrt( 1.+ l*l -2.*l*c ), // c = (u²+v²-|z1z2|² ) / 2uv\n        u = v*l;                                   \n    vec2  a = 2.*(z1-z2);                            // solve |P-z1| = u ; |P-z2| = v\n    float b = u*u-v*v + dot(z2,z2)-dot(z1,z1);       // ||²-||²: a.P + b = 0\n    // y = -( b + a.x* x ) / a.y                     // normalize by a.y\n    b /= a.y; a /= a.y;                              // ( in Shane example a.y was = 0 ! )\n    float A = 1. +  a.x*a.x,                         //  |P-z1|² = u² , P = (x,y)\n          B =     2.* b*a.x -2.*dot(vec2(1,-a.x),z1),\n          C =           b*b +2.*b*z1.y + dot(z1,z1) - u*u,\n          D = B*B - 4.*A*C,\n         x1 = (-B+sb*sqrt(D))/(2.*A), y1 = -( b + a.x*x1 ),\n         x2 = (-B-sb*sqrt(D))/(2.*A), y2 = -( b + a.x*x2 );\n    k += 1./ (.01*abs(t)) + 1./ (.02*abs(1./t)); // for tests\n // if (abs(A)<1e-5) { x1 = x2 = -C/B; y1 = y2 = -( b + a.x*x1 ) / a.y; } // degenerate case\n\treturn vec4(x1,y1, x2,y2);                       // 2 solutions per s\n}\n// horizontal red/blue glitches at t ~ 0 ( or D ~ 0 )\n// vertical red/blue glitches at t ~ inf ( or c ~ 0 )\n\nvec2 ispiralZoom(vec2 p, vec2 offs, float n, float spiral, float zoom, vec2 phase)\n{\n    p = inverse(mat2(n,1, spiral,-zoom)) * (p-phase) ;\n    p.x = (p.x - iTime/32.) * 6.283;             // ( p.x, p.y )  = ( a, log(d) )\n    return exp(p.y) * vec2(cos(p.x),sin(p.x)) + offs;\n}\n\n// --- demo configuration \nvec2 Z1 = vec2(-.875, -.525),  // in Shane example Z1.y=Z2.y was causing a degenerescence\n     Z2 = vec2(.375, -.125);\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n\tvec2 R = iResolution.xy,\n        uv0 = (U -.5*R) / R.y;\n    \n    UNIQ = ( iMouse.w > 0. );\n    \n    O -= O;\n    vec2 uv = Mobius(uv0, Z1, Z2), p, q; vec4 v; \n    uv = spiralZoom(uv, vec2(-.5), 5., 3.14159*.2, .5, vec2(-1, 1)*iTime*.125);\n    \n  if ( mod(iTime,2.) > 1. ) {\n        p = uv*4.;\n        p = abs(fract(p+.5)-.5);                       // --- Moebius spiral\n        O += .5*float(min(p.x,p.y)<.1);\n        \n        q = ispiralZoom(uv, vec2(-.5), 5., 3.14159*.2, .5, vec2(-1, 1)*iTime*.125);\n\t\tfloat err = 1e-3;\n        v = iMobius(q, Z1, Z2, 1.); \n        if ( length(uv0-v.xy) < err ) O *= vec4(1,0,0,0);\n        if ( length(uv0-v.zw) < err ) O *= vec4(0,1,0,0);\n        v = iMobius(q, Z1, Z2, -1.); \n        if ( length(uv0-v.xy) < err ) O *= vec4(0,0,1,0);\n        if ( length(uv0-v.zw) < err ) O *= vec4(1);\n    }\n\n    else {    \n        float r = .05, g=8.;                         // --- inverse Moebius spiral           \n        q = ispiralZoom(uv0*5., vec2(-.5), 5., 3.14159*.2, .5, vec2(-1, 1)*mod(iTime,15.)*.125);\n\n        v = iMobius(q, Z1, Z2, 1.); \n        p = abs(fract(v.xy*g+.5)-.5); O.r += float( min(p.x,p.y) < r );\n        p = abs(fract(v.zw*g+.5)-.5); O.g += float( min(p.x,p.y) < r );\n\n        v = iMobius(q, Z1, Z2, -1.); \n        p = abs(fract(v.xy*g+.5)-.5); O.b += float( min(p.x,p.y) < r );\n        p = abs(fract(v.zw*g+.5)-.5); O +=.5*float( min(p.x,p.y) < r );\n    }\n\n    if ( iMouse.w > 0. ) O += k/1e4; // limit where tg = 0 or inf\n} ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}