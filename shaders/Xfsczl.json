{
    "Shader": {
        "info": {
            "date": "1721466424",
            "description": "combination  https://www.shadertoy.com/view/lfXczs  https://www.shadertoy.com/view/DlycWR",
            "flags": 0,
            "hasliked": 0,
            "id": "Xfsczl",
            "likes": 5,
            "name": "flowers of fractal2",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 123
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5*fract(iTime)+.5)\nfloat TK = 0.;\nfloat PI = 3.1415926535;\n\nvec2 rot(vec2 p,float r){\n  mat2 m = mat2(cos(r),sin(r),-sin(r),cos(r));\n  return m*p;\n}\nvec2 pmod(vec2 p,float n){\n  float np = 1.0*PI/n;\n  float r = atan(p.x,p.y)-0.5*np;\n  r = mod(r,np)-0.5*np;\n  return length(p)*vec2(cos(r),sin(r));\n}\n\nfloat cube(vec3 p,vec3 s){\n  vec3 q = abs(p);\n  vec3 m = max(s-q,0.0);\n  return length(max(q-s,0.0))-min(min(m.x,m.y),m.z);\n}\nfloat dist(vec3 p){\n  p.z -= 1.*TK*iTime;\n  p.xy = rot(p.xy,1.0*p.z);\n  p.xy = pmod(p.xy,1.0);\n  float k = 0.7;\n  float zid = floor(p.z*k);\n  p = mod(p,k)-0.5*k;\n  for(int i = 0;i<4;i++){\n    p = abs(p)-0.3;\n\n    p.yz = rot(p.xy,1.0+zid+0.1*TK*iTime);\n    p.xz = rot(p.xz,1.0+4.7*zid+0.3*TK*iTime);\n  }\nreturn min(cube(p,vec3(0.3)),length(p)-0.4);\n}\nprecision highp float;\n\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c,s,-s,c);\n}\n\nconst float pi = acos(-1.0);\nconst float pi2 = pi*1.0;\n\n\n\n\nfloat box( vec3 p, vec3 b ) {\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat ifsBox(vec3 p) {\n    for (int i=0; i<2; i++) {\n        p = abs(p) - 1.0;\n        p.xy *= rot(iTime*0.3);\n        p.xz *= rot(iTime*0.1);\n         p.yz *= rot(iTime*0.4);\n    }\n    p.xz *= rot(iTime);\n    return box(p, vec3(0.4,0.8,0.3));\n}\n\nfloat map(vec3 p, vec3 cPos) {\n p.xz*= rot(iTime*0.001);\n p.xy*= rot(iTime*0.0011);\n    vec3 p1 = p;\n    \n    p1.x = mod(p1.x-5., 10.) - 5.;\n    p1.y = mod(p1.y-5., 10.) - 5.;\n    p1.z = mod(p1.z, 16.)-8.;\n    p1.xy = pmod(p1.xy, 5.0);\n    return ifsBox(p1);\n}\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n     vec2 uv = ( C - .5*iResolution.xy ) / iResolution.y;\n     vec2 p2 = (C.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n\n\n    vec3 cPos = vec3(0.0,0.0, -2.2* iTime);\n    \n    // vec3 cPos = vec3(0.3*sin(iTime*0.8), 0.4*cos(iTime*0.3), -6.0 * iTime);\n    vec3 cDir = normalize(vec3(0.0, 0.0, -5.7));\n    vec3 cUp  = vec3(sin(iTime*0.1), 1.0,0.0);\n    vec3 cSide = cross(cDir, cUp);\n\n\n  \n\n    vec3 ray = normalize(cSide * p2.x + cUp * p2.y + cDir);\n\n \n    float acc = 0.0;\n    float acc2 = 0.0;\n    float t = 0.0;\n    for (int i = 0; i < 80; i++) {\n        vec3 pos = cPos + ray * t;\n        \n        float dist = map(pos, cPos);\n        dist = max(abs(dist), 0.01);\n        float a = exp(-dist*100.9);\n        if (mod(length(pos), 1.0) < 1.0) {\n            a *= 2.0;\n            acc2 += a;\n        }\n        acc += a;\n        t += dist * 0.36;\n    }\n\n    vec3 col = vec3(acc * 0.0, acc * 0.011 + acc2*0.0070, acc * 0.012+ acc2*0.006 + acc2*-0.0 );\n    vec3 p;\n     vec3 q;\n     vec3 r=iResolution;\n    vec3 d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p=g*d*col;\n      \n        a=10.;\n        p=mod(p-a,a*2.)-a;\n        s=6.;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            \n            s*=e=1.4+sin(iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+sin(iTime*.3+.5*sin(iTime*.3))*3.,\n                    120,\n                    8.+cos(iTime*.2)*5.\n                 );\n         }\n         g+=e=length(p.yz)/s;\n          g+=e=length(p.yx)/s;\n    }\n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n   O*= vec4(happy_star(uv, anim) * vec3(0.35+0.1*cos(iTime),1.2+0.1*sin(iTime),0.15+1.1*cos(iTime)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}