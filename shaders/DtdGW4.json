{
    "Shader": {
        "info": {
            "date": "1682467661",
            "description": "was working on fake emissive objects and thought this would be a cool idea\n\n- SDFs & get normal function are all from iq (I'm not smart enough)\n- basically everything else by me",
            "flags": 32,
            "hasliked": 0,
            "id": "DtdGW4",
            "likes": 5,
            "name": "Pixel Art Spacecraft",
            "published": 3,
            "tags": [
                "space",
                "raymarcher",
                "spaceship"
            ],
            "usePreview": 0,
            "username": "ThePlaneGuy45",
            "viewed": 248
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ratio = 360.0 / iResolution.y;\n    float ratio2 = iResolution.y / 720.0;\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = sampleTex(iChannel0, vec2(640.0, 360.0) * ratio2, uv * ratio);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define AMBIENT 0.2\n\n#define LIGHT vec3(0.0, 200.0, 400.0)\n\n#define blurQUAL 8.0\n#define blurDIR 32.0\n#define blurSIZE 64.0\n\nstruct Material {\n\n    vec3 color;\n    float emission;\n    float sheen;\n    float roughness;\n    float metallic;\n\n};\n\nstruct Info {\n\n    Material mat;\n    vec3 p;\n    float d;\n\n};\n\nstruct Ray {\n\n    vec3 origin;\n    vec3 normal;\n\n};\n\nstruct Normal {\n\n    vec3 n;\n    vec3 b;\n    vec3 t;\n\n};\n\nmat2 rot2( float a ){ vec2 v = sin(vec2(1.570796, 0) + a);\treturn mat2(v, -v.y, v.x); }\n\nfloat sphere(vec3 center, float radius, vec3 pos) {\n\n    return distance(pos, center) - radius;\n\n}\n\nfloat box(vec3 center, vec3 dim, float radius, vec3 pos) {\n\n    vec3 q = abs(pos - center) - dim;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - radius;\n\n}\n\nfloat cylinder(vec3 a, vec3 b, float radius, vec3 pos) {\n\n  vec3  ba = b - a;\n  vec3  pa = pos - a;\n  float baba = dot(ba, ba);\n  float paba = dot(pa, ba);\n  float x = length(pa * baba - ba * paba) - radius * baba;\n  float y = abs(paba - baba * 0.5) - baba * 0.5;\n  float x2 = x * x;\n  float y2 = y * y * baba;\n  float d = max(x, y) < 0.0 ? -min(x2, y2) : (x > 0.0 ? x2 : 0.0) + (y > 0.0 ? y2 : 0.0);\n  return sign(d)*sqrt(abs(d))/baba;\n  \n}\n\nfloat cone(vec3 a, vec3 b, float r1, float r2, vec3 p) {\n\n  vec3  ba = b - a;\n  float l2 = dot(ba, ba);\n  float rr = r1 - r2;\n  float a2 = l2 - rr * rr;\n  float il2 = 1.0 / l2;\n  vec3 pa = p - a;\n  float y = dot(pa, ba);\n  float z = y - l2;\n  vec3 temp = pa * l2 - ba * y;\n  float x2 = dot(temp, temp);\n  float y2 = y * y * l2;\n  float z2 = z * z * l2;\n  float k = sign(rr) * rr * rr * x2;\n  if(sign(z) * a2 * z2 > k) { return  sqrt(x2 + z2) * il2 - r2; }\n  if(sign(y) * a2 * y2 < k) { return  sqrt(x2 + y2) * il2 - r1; }\n  return (sqrt(x2 * a2 * il2) + y * rr) * il2 - r1;\n  \n}\n\nvoid object(in Material mat, in float dist, inout Info i) {\n\n    if(dist < i.d) {\n    \n        i.mat = mat;\n        i.d = dist;\n    \n    }\n\n}\n\nfloat add(float d1, float d2, float k) {\n\n    float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);\n    return mix(d2, d1, h) - k * h * (1.0 - h);\n    \n}\n\nfloat sub(float d1, float d2, float k) {\n\n    float h = clamp(0.5 - 0.5 * (d2 + d1) / k, 0.0, 1.0);\n    return mix(d2, -d1, h) + k * h * (1.0 - h);\n\n}\n\nfloat and(float d1, float d2, float k) {\n\n    float h = clamp(0.5 - 0.5 * (d2 - d1) / k, 0.0, 1.0);\n    return mix(d2, d1, h) + k * h * (1.0 - h);\n    \n}\nvec3 random(inout uvec3 state) {\n    state = ((state>>8U)^state.yzx)*1103515245U;\n    state = ((state>>8U)^state.yzx)*1103515245U;\n    state = ((state>>8U)^state.yzx)*1103515245U;\n    return vec3(state)*(1.0/float(0xffffffffU));\n}\n\nvec4 sampleTex(sampler2D tex, vec2 resolution, vec2 uv) {\n\n    vec2 suv = round(uv * resolution) / resolution;\n    return texture(tex, suv);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void map(inout Info i) {\n\n    vec3 p = i.p;\n    \n    object( Material( vec3(0.45, 0.25, 0.15) * (texture(iChannel1, vec2(i.p.x, i.p.y) * 0.00005).r * 0.2 + 0.8), 0.0, 0.0, 0.9, 0.0 ), (\n        sphere(vec3(3000.0, -200.0, 7000.0), 5000.0, i.p)\n    ), i);\n    \n    \n\n    // Spacecraft Body\n    object( Material( vec3(1.0), 0.0, 0.75, 0.9, 0.0 ), add(\n        add(\n            cylinder(vec3(0.0, 0.0, -250.0), vec3(0.0, 0.0, 400.0), 100.0, i.p),\n            add(\n                cone(vec3(0.0, -10.0, 450.0), vec3(0.0, 0.0, 400.0), 75.0, 100.0, i.p),\n                cone(vec3(0.0, -10.0, 500.0), vec3(0.0, 0.0, 400.0), 50.0, 75.0, i.p),\n                20.0\n            ),\n            0.0\n        ),\n        and(\n            box(vec3(0.0, 0.0, -250.0), vec3(150.0, 1.0, 50.0), 100.0, i.p),\n            box(vec3(0.0, 0.0, -200.0), vec3(300.0, 300.0, 100.0), 0.0, i.p),\n            40.0\n        ),\n        100.0\n    ), i);\n    \n    // Spacecraft Wings\n    p = i.p;\n    p.xy *= rot2(0.78539816339);\n    \n    object( Material( vec3(0.8), 0.0, 0.75, 0.4, 0.0 ), add(\n    \n        box(vec3(0.0, 0.0, 300.0), vec3(0.0, 300.0, 35.0), 10.0, vec3(p.x, p.y, (p.z - 300.0) * 1.0 / (2.0 - abs(p.y * 0.004)) + 300.0)),\n        box(vec3(0.0, 0.0, 300.0), vec3(300.0, 0.0, 35.0), 10.0, vec3(p.x, p.y, (p.z - 300.0) * 1.0 / (2.0 - abs(p.x * 0.004)) + 300.0)),\n        0.0\n    \n    ), i);\n    \n    // Spacecraft Windshield\n    object( Material( vec3(0.1, 0.1, 0.2), 0.0, 0.2, 0.0, 0.0 ), and(\n        sphere(vec3(0.0, -10.0, 425.0), 100.0, i.p),\n        box(vec3(0.0, 65.0, 500.0), vec3(40.0, 10.0, 50.0), 0.0, i.p),\n        0.0\n    ), i);\n    \n    // Spacecraft Engines\n    vec3 ion = mix(vec3(0.0, 0.3, 1.0), vec3(0.0, 0.75, 1.0), (sin(2.0 * (5.0 * iTime + i.p.x * 0.05)) + sin(3.14159265 * (6.0 * iTime + i.p.x * 0.05))) / 10.0 + 0.7);\n    \n    object( Material( vec3(0.2, 0.25, 0.3), 0.0, 0.2, 0.93, 0.0 ), sub(\n        cylinder(vec3(0.0, 0.0, -330.0), vec3(0.0, 0.0, -370.0), 60.0, i.p),\n        cylinder(vec3(0.0, 0.0, -250.0), vec3(0.0, 0.0, -370.0), 80.0, i.p),\n        10.0\n    ), i);\n    \n    object( Material( vec3(0.2, 0.25, 0.3), 0.0, 0.2, 0.93, 0.0 ), sub(\n        cylinder(vec3(150.0, 0.0, -330.0), vec3(150.0, 0.0, -350.0), 40.0, i.p),\n        cylinder(vec3(150.0, 0.0, -250.0), vec3(150.0, 0.0, -350.0), 60.0, i.p),\n        10.0\n    ), i);\n    object( Material( vec3(0.2, 0.25, 0.3), 0.0, 0.2, 0.93, 0.0 ), sub(\n        cylinder(vec3(-150.0, 0.0, -330.0), vec3(-150.0, 0.0, -350.0), 40.0, i.p),\n        cylinder(vec3(-150.0, 0.0, -250.0), vec3(-150.0, 0.0, -350.0), 60.0, i.p),\n        10.0\n    ), i);\n    object( Material( ion, 2.0, 0.2, 0.93, 0.0 ), (\n        cylinder(vec3(0.0, 0.0, -330.0), vec3(0.0, 0.0, -360.0), 60.0, i.p)\n    ), i);\n    object( Material( ion, 2.0, 0.2, 0.93, 0.0 ), (\n        cylinder(vec3(150.0, 0.0, -330.0), vec3(150.0, 0.0, -340.0), 40.0, i.p)\n    ), i);\n    object( Material( ion, 2.0, 0.2, 0.93, 0.0 ), (\n        cylinder(vec3(-150.0, 0.0, -330.0), vec3(-150.0, 0.0, -340.0), 40.0, i.p)\n    ), i);\n\n}\n\nNormal initNormal(vec3 n) {\n\n    vec3 t = normalize(vec3(n.z, 0.0, -n.x));\n    if(n.x + n.z == 0.0) {\n            \n        t = vec3(1.0, 0.0, 0.0);\n            \n    }\n    vec3 b = normalize(cross(n, t));\n    return Normal(n, b, t);\n\n}\n\nNormal calcNormal(vec3 position) {\n\n    vec3 n = vec3(0.0);\n    for( int i = 0; i < 4; i++ ) {\n    \n        vec3 e = 0.5773 * (2.0 * vec3((((i + 3) >> 1) & 1), ((i >> 1) & 1), (i & 1)) - 1.0);\n        Info p;\n        p.p = position + 0.0005 * e;\n        p.d = 100000.0;\n        map(p);\n        n += e * p.d;\n        \n    }\n    n = normalize(n);\n    return initNormal(n);\n\n}\n\nvec3 worldSpace(vec3 map, Normal n) {\n\n    mat3x3 tbn = mat3x3(n.t.x, n.b.x, n.n.x, n.t.y, n.b.y, n.n.y, n.t.z, n.b.z, n.n.z);\n    return normalize(map * tbn);\n\n}\n\nInfo march(Ray ray, bool celshade) {\n\n    Info i;\n    i.p = ray.origin;\n    float md = 100000.0;\n    for(int j = 0; j < 50; j++) {\n    \n        i.d = 100000.0;\n        map(i);\n        i.p += i.d * ray.normal;\n        if(i.d <= 1.0) {break;}\n        if(i.d < md) {md = i.d;}\n    \n    }\n    if(i.d <= 1.0) {\n    \n        return i;\n        \n    }\n    i.d = 100000.0;\n    vec4 tex = texture(iChannel0, ray.normal);\n    i.mat = Material(tex.rgb, tex.w, 0.0, 0.0, 0.0);\n    if(md < 10.0 && celshade) { i.mat.color = vec3(0.75); }\n    i.p = vec3(0.0);\n    return i;\n\n}\n\nvoid initRay(inout Ray ray, in vec2 fragCoord) {\n\n    ray.origin = vec3(0.0, 0.0, -1500.0);\n    ray.normal = normalize(vec3(fragCoord, 250.0));\n    mat2 rot = rot2(6.0 * (iMouse.y/iResolution.y-0.5));\n    ray.origin.yz *= rot;\n    ray.normal.yz *= rot;\n    rot = rot2(6.0 * (iMouse.x/iResolution.x-0.5));\n    ray.origin.xz *= rot;\n    ray.normal.xz *= rot;\n\n}\n\nvec4 Trace(in vec2 fragCoord) {\n\n    Ray ray;\n    initRay(ray, fragCoord);\n    Info i = march(ray, true);\n    if(i.d <= 5.0) {\n        Normal planeInfo = calcNormal(i.p);\n        vec3 normal = planeInfo.n;\n        vec3 lightNormal = worldSpace(normalize(vec3(-1.0, 1.0, -1.0)), initNormal(ray.normal));\n        float lightDist = distance(LIGHT, i.p);\n        float shade = clamp(dot(normal, lightNormal), 0.0, 1.0);\n        float specang = acos(shade);\n        float specexp = specang / (1.0-i.mat.sheen);\n        float spec = 1.0 / (i.mat.emission + 1.0) * exp(-specexp * specexp) * i.mat.sheen;\n        vec3 color = mix(i.mat.color * AMBIENT, i.mat.color, shade) + spec;\n        if(i.mat.roughness < 1.0) {\n            ray.origin = i.p + 2.0 * normal;\n            ray.normal = reflect(ray.normal, normal);\n        \n            Info r = march(ray, false);\n        \n            vec3 reflectedColor = mix(r.mat.color, dot(r.mat.color, vec3(.2126, .7152, .0722)) * i.mat.color, i.mat.metallic);\n            \n            color = mix(color, reflectedColor, 1.0 - i.mat.roughness);\n        }\n        return vec4(mix(color, i.mat.color, i.mat.emission), i.mat.emission);\n    }\n    return vec4(i.mat.color, i.mat.emission);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.x <= 640.0 && fragCoord.y <= 360.0) {\n        fragColor = Trace((fragCoord - vec2(320.0, 180.0)));\n    } else {\n        fragColor = vec4(0.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    if(fragCoord.x <= 640.0 && fragCoord.y <= 360.0) {\n        float br = 9.0 / 16.0;\n        vec2 uv = fragCoord/iResolution.xy;\n    \n        vec2 rad = (blurSIZE / vec2(640.0, 360.0)) * br;\n        vec3 color = sampleTex(iChannel0, vec2(640.0, 360.0), uv).rgb;\n    \n        for( float i = 0.0; i < 6.283185307179586; i += 6.283185307179586/blurDIR ) {\n    \n            for( float j = 1.0/blurQUAL; j <= 1.0; j += 1.0/blurQUAL ) {\n        \n                vec4 add = sampleTex(iChannel0, vec2(640.0, 360.0), uv + vec2( cos(i), sin(i) ) * rad * j);\n            \n                if(dot(abs(add.rgb), add.rgb) > 0.0 && add.w > 0.0) {\n        \n                    color += add.rgb * (1.0 - exp(-(2.0 * tanh(add.w / 2.0))));\n                    \n                }\n            \n            }\n        \n        }\n    \n        color /= blurQUAL * blurDIR + blurSIZE;\n    \n        fragColor = vec4(color.rgb + texture(iChannel0, uv).rgb, 1.0);\n    } else {\n        fragColor = vec4(0.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    uvec3 state = floatBitsToUint(vec3(-rayDir.x, rayDir.yz));\n    vec3 rand = random(state);\n    float det = float(clamp(dot(rand, rand), 0.0, 1.0) < 0.01);\n    fragColor = vec4(1.0, 1.0, 1.0, 100.0) * det;\n}",
                "description": "",
                "inputs": [],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            }
        ],
        "ver": "0.1"
    }
}