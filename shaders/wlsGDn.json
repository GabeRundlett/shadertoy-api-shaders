{
    "Shader": {
        "info": {
            "date": "1556108076",
            "description": "Climate change is coming...",
            "flags": 0,
            "hasliked": 0,
            "id": "wlsGDn",
            "likes": 15,
            "name": "Waterworld City",
            "published": 3,
            "tags": [
                "water",
                "tower",
                "boat"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 609
        },
        "renderpass": [
            {
                "code": "// \"Waterworld City\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA    0  // optional antialiasing\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Minv3 (vec3 p);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define N_BOAT 2\n\nmat3 boatMat[N_BOAT], bMat;\nvec3 boatPos[N_BOAT], bPos, sunDir, qHit;\nvec2 gId, obOff;\nfloat boatAng[N_BOAT], bAng, dstFar, tCur, obSzFac, hgSize, nWin;\nint idObj, idObjGrp;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\n\nvec3 TrackPath (float t)\n{\n  return vec3 (7. * cos (0.06 * t) + 0.1 * t, 0., t);\n}\n\nvec3 TrackVel (float t)\n{\n  return vec3 (-0.06 * 7. * sin (0.06 * t) + 0.1, 0., 1.);\n}\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjCDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  if (obSzFac > 0.) {\n    dMin /= obSzFac;\n    p.xz -= HexToPix (gId * hgSize) + obOff;\n    p /= obSzFac;\n    p.y -= 2.2;\n    q = p;\n    d = PrCylDf (q.xzy, 0.25 * (0.7 + 0.1 * q.y * q.y), 2.2);\n    DMINQ (1);\n    p.y -= 2.4 - 0.01;\n    q = p;\n    d = PrRoundCylDf (q.xzy, 0.8, 0.1, 0.4);\n    DMINQ (2);\n    dMin *= obSzFac;\n  }\n  return dMin;\n}\n\nfloat GrndHt (vec2 p)\n{\n  float h, s;\n  h = Fbm2 (0.5 * p) - 0.5;\n  s = 1. - abs (p.x - TrackPath (p.y).x) / 4.;\n  if (s > 0.) h = max (h - s * s, -0.5);\n  return h;\n}\n\nvoid SetTwrConf ()\n{\n  vec2 g, w;\n  g = HexToPix (gId * hgSize);\n  if (GrndHt (g) < 0.1 || Hashfv2 (37. * gId + 99.) < 0.1) obSzFac = 0.;\n  else {\n    obSzFac = hgSize * 0.5 * sqrt3 * (1. - 0.7 * Hashfv2 (17. * gId + 99.));\n    w = Hashv2v2 (73. * gId + 77.);\n    obOff = hgSize * max (0., 0.4 * sqrt3 - obSzFac) * w.x * sin (2. * pi * w.y + vec2 (0.5 * pi, 0.));\n    nWin = 4. + floor (8. * w.y);\n  }\n}\n\nfloat ObjCRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s, eps;\n  eps = 0.0005;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / hgSize;\n  pM = HexToPix (PixToHex (ro.xz / hgSize));\n  gIdP = vec2 (-99.);\n  dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n    s = Minv3 (hv);\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetTwrConf ();\n    }\n    d = ObjCDf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n    }\n    if (d < eps || dHit > dstFar || p.y < -0.1 || rd.y > 0. && p.y > 10.) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjCNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (- ObjCDf (p + e.xxx), ObjCDf (p + e.xyy), ObjCDf (p + e.yxy), ObjCDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjCSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  gIdP = vec2 (-99.);\n  for (int j = 0; j < 30; j ++) {\n    p = ro + d * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetTwrConf ();\n    }\n    h = ObjCDf (p);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (h, 0.05, 0.3);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = -0.1 - ro.y / rd.y;\n  for (int j = 0; j < 100; j ++) {\n    p = ro + dHit * rd;\n    d = p.y + 0.01 * step (GrndHt (p.xz), -0.01);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nfloat BoatDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  p.y -= 0.7;\n  q = p;\n  d = max (max (PrRoundCylDf (q, 1.2, 2., 3.5),\n     - max (PrRoundCylDf (q - vec3 (0., 0.1, 0.), 1.15, 2., 3.5),\n     abs (q.y) - 0.1)), abs (q.y + 0.1) - 0.1);\n  q.y -= -0.2;\n  d = max (SmoothMin (d, max (PrRoundCylDf (q, 1., 2., 3.3), q.y), 0.1), q.z - 2.);\n  DMINQ (idObjGrp + 1);\n  q = p;\n  q.yz -= vec2 (-0.5, -0.2);\n  d = max (PrRoundCylDf (q, 1., 1.1, 2.3), max (0.4 - q.y, q.z - 1.2));\n  DMINQ (idObjGrp + 2);\n  q = p;\n  q.yz -= vec2 (0.8, 0.5);\n  d = PrCylDf (q.xzy, 0.04, 0.3);\n  DMINQ (idObjGrp + 3);\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, dLim;\n  const float bSzFac = 0.3;\n  dLim = 0.5 / bSzFac;\n  dMin = dstFar;\n  dMin /= bSzFac;\n  for (int k = 0; k < N_BOAT; k ++) {\n    q = p - boatPos[k];\n    idObjGrp = (k + 1) * 256;\n    d = PrCylDf (q.xzy, 2., 2.);\n    dMin = (d < dLim) ? BoatDf (boatMat[k] * q / bSzFac, dMin) : min (dMin, d);\n  }\n  return bSzFac * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (h, 0.01, 0.3);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol;\n  vec2 q;\n  float f, fd, ff;\n  q = 0.005 * (ro.xz + tCur * vec2 (0.5, 2.) + ((200. - ro.y) / rd.y) * rd.xz);\n  ff = Fbm2 (q);\n  f = smoothstep (0.1, 0.8, ff);\n  fd = smoothstep (0.1, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n  clCol = (0.8 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n     smoothstep (0., 0.05, abs (fd)));\n  fd = smoothstep (0.01, 0.1, rd.y);\n  col = mix (mix (vec3 (0.8, 0.8, 0.75), vec3 (0.4, 0.5, 0.8), 0.3 + 0.7 * fd), clCol,\n     0.1 + 0.9 * f * fd);\n  return col;\n}\n\nfloat WakeFac (vec3 row)\n{\n  vec2 tw[N_BOAT], twa;\n  float twLen[N_BOAT], wkFac, ba;\n  for (int k = 0; k < N_BOAT; k ++) {\n    tw[k] = row.xz - (boatPos[k].xz - Rot2D (vec2 (0., 2.5), boatAng[k]));\n    twLen[k] = length (tw[k]);\n  }\n  if (twLen[0] < twLen[1]) {\n    twa = tw[0];\n    ba = boatAng[0];\n  } else {\n    twa = tw[1];\n    ba = boatAng[1];\n  }\n  twa = Rot2D (twa, - ba);\n  wkFac = 0.;\n  if (length (twa * vec2 (1., 0.5)) < 1.) wkFac =\n     clamp (1. - 2. * abs (twa.x), 0., 1.) * clamp (0.5 + twa.y, 0., 1.);\n  return wkFac;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, row, rdd;\n  float dstObj, dstObjC, dstObjM, dstGrnd, wkFac, sh, a, nDotS;\n  int idObjC, ig, id;\n  bool wtRefl, glRefl;\n  dstObjC = ObjCRay (ro, rd);\n  idObjC = idObj;\n  dstObjM = ObjRay (ro, rd);\n  dstGrnd = (rd.y < 0.) ? GrndRay (ro, rd) : dstFar;\n  wtRefl = false;\n  glRefl = false;\n  wkFac = 0.;\n  dstObj = min (dstObjM, dstObjC);\n  if (dstGrnd < min (dstObj, dstFar)) {\n    row = ro + dstGrnd * rd;\n    if (row.y < 0.) {\n      ro = row;\n      wkFac = WakeFac (row);\n      row.xz += 0.2 * tCur;\n      if (wkFac > 0.) vn = VaryNf (16. * row, vec3 (0., 1., 0.), 2. * wkFac);\n      else vn = VaryNf (2. * row, vec3 (0., 1., 0.), 0.05 *\n         (1. - smoothstep (0.1, 0.4, dstGrnd / dstFar)));\n      row = ro;\n      rd = reflect (rd, vn);\n      ro += 0.01 * rd;\n      dstObjC = ObjCRay (ro, rd);\n      idObjC = idObj;\n      dstObjM = ObjRay (ro, rd);\n      dstGrnd = dstFar;\n      dstObj = min (dstObjM, dstObjC);\n      wtRefl = true;\n    }\n  }\n  if (min (dstObj, dstGrnd) < dstFar) {\n    if (dstObj < dstGrnd) {\n      if (dstObjM < dstObjC) {\n        ro += dstObjM * rd;\n        vn = ObjNf (ro);\n        ig = idObj / 256;\n        id = idObj - 256 * ig;\n        if (id == 1) {\n          if (abs (qHit.y - 0.105) < 0.005) col4 = vec4 (0.8, 0.6, 0.4, 0.1) *\n             (1. - 0.4 * SmoothBump (0.42, 0.58, 0.05, mod (7. * qHit.x, 1.)));\n          else col4 = (qHit.y > -0.3) ? ((ig == 1) ? vec4 (0.9, 0.9, 0.3, 0.3) :\n             vec4 (0.9, 0.3, 0.3, 0.3)) : vec4 (0.7, 0.7, 0.8, 0.1);\n        } else if (id == 2) {\n          col4 = (abs (abs (qHit.x) - 0.4) < 0.36 && qHit.y > 0.45 && \n             length (vec2 (abs (qHit.x) - 0.1, qHit.y - 0.2)) < 0.7 ||\n             abs (abs (qHit.z + 0.2) - 0.6) < 0.5 && abs (qHit.y - 0.65) < 0.2) ?\n             vec4 (0., 0., 0.1, -1.) : vec4 (0.9, 0.9, 1., 0.5);\n        } else if (id == 3) col4 = vec4 (1., 1., 1., 0.2);\n        if (col4.a == -1.) {\n          col4.a = 0.1;\n          glRefl = true;\n        }\n        sh = ObjSShadow (ro, sunDir);\n     } else {\n        ro += dstObjC * rd;\n        gId = PixToHex (ro.xz / hgSize);\n        vn = ObjCNf (ro);\n        if (idObjC == 1) {\n          col4 = vec4 (0.8, 0.8, 0.2, 0.2);\n        } else if (idObjC == 2) {\n          col4 = vec4 (0.7, 0.4, 0.1, 0.1);\n          a = mod (nWin * atan (qHit.z, - qHit.x) / pi, 1.);\n          if (step (abs (qHit.y), 0.3) * step (a, 0.75) > 0.) {\n             if (step (abs (qHit.y), 0.27) * step (a, 0.72) > 0.) {\n              col4.rgb = vec3 (0.3, 0.5, 0.3);\n              glRefl = true;\n            } else col4.rgb *= 1.4;\n          }\n        }\n        sh = ObjCSShadow (ro, sunDir);\n      }\n    } else {\n      ro += dstGrnd * rd;\n      vn = vec3 (0., 1., 0.);\n      if (dstGrnd < 0.5 * dstFar)\n         vn = VaryNf (4. * ro, vn, 1.5 * (1. - smoothstep (0.2, 0.5, dstGrnd / dstFar)));\n      col4 = vec4 (vec3 (0., 0.4, 0.) * min (1. - 0.2 * Fbm2 (32. * ro.xz), 1.), 0.1);\n      sh = ObjCSShadow (ro, sunDir);\n    }\n    nDotS = max (dot (vn, sunDir), 0.);\n    if (dstObj < dstGrnd) nDotS *= nDotS;\n    col = col4.rgb * (0.2 + 0.1 * max (dot (normalize (vec3 (vn.x, 0., vn.z)), - sunDir), 0.) +\n       0.8 * sh * nDotS) + col4.a * smoothstep (0.8, 1., sh) *\n       pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n    col = mix (col, SkyCol (ro, rd), (wtRefl ? 0.2 + 0.8 * smoothstep (0.4, 0.6, dstObj / dstFar) :\n       smoothstep (0.8, 0.9, min (dstGrnd, dstObj) / dstFar)));\n    if (glRefl) {\n      rdd = reflect (rd, vn);\n      rdd.y = abs (rdd.y);\n      col = mix (col, 0.8 * SkyCol (ro, rdd), 0.5);\n    }\n  } else col = SkyCol (ro, rd);\n  if (wkFac > 0.) col = mix (col, vec3 (0.8, 0.83, 0.8), wkFac * clamp (0.1 +\n     Fbm2 (16. * row.xz), 0., 1.));\n  col.rgb *= vec3 (1.1, 0.9, 0.9);\n  return clamp (col, 0., 1.);\n}\n\nvoid BoatPM (float t)\n{\n  vec3 v;\n  float c, s, bAz;\n  bPos = TrackPath (t);\n  bPos.y = 0.;\n  bMat[2] = vec3 (Rot2D (vec2 (1., 0.), 0.4 * (Fbm1 (0.2 * t) - 0.5)), 0.);\n  bMat[0] = normalize (vec3 (0., 0.1, 1.));\n  bMat[1] = cross (bMat[0], bMat[2]);\n  v = TrackVel (t);\n  bAz = atan (v.z, - v.x);\n  bAng = 0.5 * pi - bAz;\n  c = cos (bAz);\n  s = sin (bAz);\n  bMat *= mat3 (c, 0., s, 0., 1., 0., - s, 0., c);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv, uvs, ori, ca, sa, mMid, ut, mSize;\n  float el, az, asp, winHt, vuId, zmFac, sr, spd;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uvs = uv;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  winHt = 0.85;\n  mSize = (1./6.) * vec2 (asp, 1.) * winHt;\n  mMid = vec2 (asp * (1. - mSize.y) - 0.1 * mSize.y, - winHt + 1.1 * mSize.y);\n  ut = abs (uv - mMid) - mSize;\n  vuId = 0.;\n  if (max (ut.x, ut.y) < 0.) {\n    uv = (uv - mMid) / mSize.y;\n    vuId = 1.;\n  }\n  tCur = mod (tCur, 2400.) + 30. * floor (dateCur.w / 7200.);\n  hgSize = 1.;\n  spd = 2.;\n  ro = TrackPath (spd * tCur);\n  ro.x += 1. * sin (0.05 * 2. * pi * tCur);\n  ro.y = 1. + 2. * Fbm1 (0.1 * tCur);\n  vd = TrackVel (spd * tCur);\n  el = -0.03 * pi;\n  az = atan (vd.x, vd.z);\n  if (mPtr.z > 0.) {   \n    el += 0.4 * pi * mPtr.y;\n    az += 2.2 * pi * mPtr.x;\n  }\n  for (int k = 0; k < N_BOAT; k ++) {\n    BoatPM (spd * tCur + ((vuId == 0. && abs (az) > 0.5 * pi ||\n       vuId == 1. && abs (az) < 0.5 * pi) ? -1. : 1.) * (7. * float (k) + 4.5));\n    boatPos[k] = bPos;\n    boatMat[k] = bMat;\n    boatAng[k] = bAng;\n    boatPos[k].y = -0.02 + 0.07 * Fbm1 (tCur + 5. * float (k));\n  }\n  if (vuId == 1.) az += pi;\n  ori = vec2 (clamp (el, -0.5 * pi, 0.45 * pi), az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  dstFar = 100.;\n  sunDir = normalize (vec3 (0., 1.2, -1.));\n  sunDir.xz = Rot2D (sunDir.xz, 0.3 * pi * cos (0.1 * tCur));\n  zmFac = 1.5;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  if (abs (uvs.y) < winHt) {\n    sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n    for (float a = 0.; a < naa; a ++) {\n      rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n         sr * (0.667 * a + 0.5) * pi), zmFac));\n      col += (1. / naa) * ShowScene (ro, rd);\n    }\n  }\n  if (max (ut.x, ut.y) < 0. && min (abs (ut.x), abs (ut.y)) * canvas.y < 2.) col = vec3 (0.4, 0.4, 0.);\n  if (vuId == 0.) col *= 1. - smoothstep (0.99 * winHt, winHt, abs (uvs.y));\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  return min (min (max (dxy + rt, dz), max (dxy, dz + rt)), length (vec2 (dxy, dz) + rt) - rt);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}