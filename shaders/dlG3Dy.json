{
    "Shader": {
        "info": {
            "date": "1684649514",
            "description": "3D",
            "flags": 32,
            "hasliked": 0,
            "id": "dlG3Dy",
            "likes": 1,
            "name": "Pathtracing V2 WIP",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "FifthStateOfMatter",
            "viewed": 199
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    //vec4 col = vec4(texture(iChannel0, uv).xyz, 1);\n    fragColor = texture(iChannel0, uv);\n    fragColor.xyz = pow(fragColor.xyz, vec3(1.0/2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int iterations = 2;\nconst int rayBounces = 10;\nconst float aperture = 0.2;\nconst float focalLength = 5.5;\n\nstruct material{\n    vec3 col;\n    float intensity;\n    float smoothness;\n    float specProb;\n};\n\nvec3 rotate2D(vec3 p, vec2 t){\n    float stx = sin(t.x);\n    float ctx = cos(t.x);\n    float sty = sin(t.y);\n    float cty = cos(t.y);\n    mat3 xRotation;\n    xRotation[0] = vec3(1, 0, 0);\n    xRotation[1] = vec3(0, ctx, -stx);\n    xRotation[2] = vec3(0, stx, ctx);\n    \n    mat3 yRotation;\n    yRotation[0] = vec3(cty, 0, -sty);\n    yRotation[1] = vec3(0, 1, 0);\n    yRotation[2] = vec3(sty, 0, cty);\n    return p*xRotation*yRotation;\n}\n\nvec4[100] scene;\n\nmaterial[100] mats;\n\n//Dave_Hoskins' Hash Without Sine\nfloat random3(vec3 p){\n    p = fract(p*0.1031);\n    p += dot(p, p.zyx + 31.32);\n    return (fract((p.x + p.y)*p.z)*2.0) - 1.0;\n}\n\nfloat traceSphere(vec3 o, vec3 d, vec4 s){\n    vec3 oc = o - s.xyz;\n    float a = dot(d, d);\n    float b = 2.0*dot(d, oc);\n    float c = dot(oc, oc) - s.w*s.w;\n    float disc = b*b - 4.0*a*c;\n    return disc > 0.0 ? (-b - sqrt(disc))/2.0*a : 100000.0;\n}\n\nfloat traceScene(vec3 o, vec3 d, inout bool hit, inout vec3 normal, inout material mat){\n    float initT = 100000.0;\n    for(int i = 0; i < scene.length(); i++){\n        float t = traceSphere(o, d, scene[i]);\n        if(t < initT && t >= 0.0){\n            initT = t;\n            hit = true;\n            normal = (o + d*t - scene[i].xyz)/scene[i].w;\n            mat = mats[i];\n        }\n    }\n    return initT;\n}\n\nvoid pathtrace(vec3 o, vec3 d, inout vec3 col, float seed){\n    col = vec3(1);\n    bool hit = false;\n    vec3 n = vec3(0);\n    material mat = material(vec3(1), 0.0, 0.0, 0.0);\n    float t = traceScene(o, d, hit, n, mat);\n    vec3 pn = n;\n    material pmat = mat;\n    float iDepth = t;        \n    if(hit){\n        col *= mat.col*mat.intensity;\n        if(mat.intensity > 1.0) return;\n        for(int i = 0; i < rayBounces; i++){\n            hit = false;\n            o = o + d*t;\n            vec3 rd = normalize(vec3(random3(o*2093847.4832 + 293.482 + seed), random3(o*3283742.438 + 213.847 + seed), random3(o*208347.483 + 283.837 + seed)));\n            float dn = dot(rd, pn);\n            rd *= sign(dn);\n            \n            vec3 sd = normalize(reflect(d, pn));\n            \n            float hasSpec = (random3(o*2093847.4832 + 293.482 + seed) + 1.0)/2.0 <= mat.specProb ? 1.0 : 0.0;\n            \n            d = mix(rd, sd, mat.smoothness*(hasSpec));\n            t = traceScene(o, d, hit, n, mat);\n            \n            if(hit){\n                col = mix(col, mat.col, hasSpec);\n                col *= mat.col*mat.intensity*clamp(dn, 0.0, 1.0)*2.0;\n            }else{\n                col = mix(col, mat.col, hasSpec);\n                col *= vec3(1)*mat.intensity*clamp(dn, 0.0, 1.0)*2.0;\n                break;\n            }\n            pn = n;\n            pmat = mat;\n            if(mat.intensity > 1.0) break;\n        }\n    }else{\n        col *= vec3(1);\n        return;\n    }\n    col = mix(col, vec3(1), 1.0 - exp(-iDepth*vec3(0.01, 0.011, 0.015)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    scene[0] = vec4(-1.5, 5, 6, 1);\n    scene[1] = vec4(1.5, 5, 4, 1);\n    scene[2] = vec4(0, -10001, 5, 10000);\n    \n    mats[0] = material(vec3(1), 20.0, 0.0, 0.0);\n    mats[1] = material(vec3(1), 20.0, 0.0, 0.0);\n    mats[2] = material(vec3(1), 0.5, 0.0, 0.0);\n\n    for(int i = 3; i < 100; i++){\n        scene[i] = vec4(float(i - 3)*1.0 - 8.0, 0, ((random3(vec3(i) + 28347.483) + 1.0)/2.0)*20.0 + 5.0, 1);\n        mats[i] = material(vec3(sin(float(i)), 0.5, cos(float(i))), 0.5, 1.2 - float(i)/7.0, 1.2 - float(i)/7.0);\n    }\n    \n    vec3 newCol = vec3(0);\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec3 o = vec3(0, 2, 0);\n    vec3 d = normalize(rotate2D(vec3(uv, 1), vec2(radians(10.0), radians(0.0))));\n    vec3 so = o + vec3(random3(d*483092.4837 + float(iFrame)), random3(d*327463.3247 + float(iFrame)), random3(d*227422.2347 + float(iFrame)))*aperture;\n    vec3 focalPoint = o + d*focalLength;\n    vec3 cd = normalize(focalPoint - so);\n    vec3 col = vec3(1);\n    //for(int i = 0; i < iterations; i++){\n        col = vec3(1);\n        pathtrace(so, cd, col, iTime);\n        //newCol += col;\n    //}\n    //newCol /= float(iterations);\n    //col = newCol;\n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    //vec4 col = ;\n    fragColor = texture(iChannel1, uv)*(1.0 - 1.0/float(iFrame + 1)) + texture(iChannel0, uv)*1.0/float(iFrame + 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}