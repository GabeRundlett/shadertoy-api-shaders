{
    "Shader": {
        "info": {
            "date": "1606609173",
            "description": "Made during a friendly Shader Showdown @ Cookie Demoparty November 2020 that was streamed on Twitch.\n30 minutes round.\nNo win, no loss, just for the sport and friendship :D jeyko did a fantastic clean design shader https://www.shadertoy.com/view/3dyfz1",
            "flags": 0,
            "hasliked": 0,
            "id": "wdVBz1",
            "likes": 5,
            "name": "Cookie Demoparty 2020 Showdown",
            "published": 3,
            "tags": [
                "raymarching",
                "distancefield",
                "demoscene",
                "liveshading"
            ],
            "usePreview": 0,
            "username": "Alkama",
            "viewed": 538
        },
        "renderpass": [
            {
                "code": "const float pi=acos(-1.);\nfloat t=0.0,d=0.0;\n\nvec3 rep(vec3 p, float r) { return mod(p,r)-.5*r; }\n\nfloat grid(vec3 p) {\n  float d=1000.;\n  float w=.4+.2*sin(t*2.5);\n  p=rep(p,1.);\n  d=min(d,length(p.xy)-w);\n  d=min(d,length(p.xz)-w);\n  d=min(d,length(p.yz)-w);\n  return d;\n}\n\nvec3 fold(vec3 p) {\n  float a=3.0;\n  for(int i=0; i<5; i++) {\n    p = 2.*clamp(p,-vec3(a),vec3(a))-p;\n    a*=.2+(.1*sin(t*2.));\n  }\n  return p;\n}\n\nfloat scene(vec3 p) {\n  p=fold(p);\n  return grid(p);\n}\n\nvec3 norm(vec3 p) {\n  vec2 e=vec2(.001,0);\n  return normalize(scene(p)-vec3(scene(p-e.xyy),scene(p-e.yxy),scene(p-e.yyx)));\n}\n\nvec2 proj(vec3 p, vec3 n) {\n  n = pow(abs(n),vec3(2.));\n  return (n.x*p.zy+n.y*p.xz+n.z*p.xy)/(n.x+n.y+n.z);\n}\n\nfloat tex( vec2 uv )\n{\n  float o=0.;\n  uv.y-=2.665;\n  for(float i=1.; i<41.; i++) {\n    uv.y+=.13+.3*sin(uv.x+i+t);\n    uv.x+=.13*sin(uv.y+i+t);\n    o+=1./((100.+80.*sin(uv.x+t*20.))*abs(uv.y));\n  }\n  return o;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy-.5)/vec2(iResolution.y/iResolution.x, 1);\n    \n    t = 3.55+.5*mod(iTime, 20.*pi);\n\n  \tif(abs(uv.y)+.05*cos(uv.x*2.)>.45) return;\n  \tuv/=1.-length(uv)*3.;\n  \tvec3 o=vec3(sin(t),sin(sin(t)),cos(t));\n  \tvec3 tg=.5*vec3(cos(t),cos(sin(t)),sin(t));\n \tvec3 f=normalize(tg-o);\n  \tvec3 s=normalize(cross(vec3(.4*sin(t),1,0),f));\n  \tvec3 u=normalize(cross(f,s));\n  \tvec3 dir=normalize(f*.6+uv.x*s+uv.y*u);\n  \n  \tvec3 col=vec3(0),p=o;\n  \tfor(int i=0;i<200;i++) {\n    \tfloat h=scene(p)*.85;\n    \tif(abs(h)<.01) {\n      \t\tvec2 tuv = proj(p,norm(p));\n      \t\tvec3 tint=acos(normalize(dir-p))*vec3(.5,.5,1);\n      \t\tcol = clamp(.4*tex(tuv)*tint, 0.,1.);\n      \t\tfloat den=40.+2.*sin(t*10.+p.z*5.);\n      \t\tcol*=pow(float(i)/den, 5.);\n      \t\tbreak;\n    \t}\n    \tif(d>11.) break;\n    \td+=h;\n    \tp+=dir*h;\n  \t}\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}