{
    "Shader": {
        "info": {
            "date": "1628894074",
            "description": "Nevoke ShaderJam",
            "flags": 32,
            "hasliked": 0,
            "id": "Nl2XDd",
            "likes": 6,
            "name": "Nevoke ShaderJam",
            "published": 3,
            "tags": [
                "shaderjam",
                "nevoke"
            ],
            "usePreview": 0,
            "username": "Alien01",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n\tfragColor = texture(iChannel0, uv);\n}\n\n//Hello, NÃ©voke!!!\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define one_bpm (60./117.)\n#define beat(a) tick(iTime / (one_bpm*a))\n#define cumbeat(a) iTime+beat(a)\n\nfloat tick(float t) {\n  return fract(t);\n}\n\nmat2 rot(float a) {return mat2( cos(a), sin(a), -sin(a), cos(a) ) ; }\n\nfloat sphere(vec3 p, float r) {\n  return length(p) - r;\n}\n\nfloat box2(vec2 p, vec2 b){\n  vec2 q = abs(p) - b;\n  return length(max(q, 0.0)) + min(max(q.x, q.y), 0.0);\n}\n\nfloat torus(vec3 p, vec2 t){\n  float a = length(p.xz ) - t.x;\n  p.x += 2.*cumbeat(8.);\n  a += sin(p.z);\n  \n  vec2 q = vec2(a , p.y );\n  return length(q) - t.y;\n}\n\nfloat map(vec3 p) {\n  float final = 0.;\n  vec3 pp = p;\n  \n  if(beat(8.) < 0.5)\n    p.xy *= rot(0.1*cumbeat(16.));\n  if(beat(16.) < 0.5)\n    p.xy *= rot(-0.1*cumbeat(16.));\n  \n  float y = p.y - cumbeat(32.);\n  p.z -= 10.;\n  p.x *= atan(p.y, p.z);\n  \n  p.z -= 10.0;\n  p.xz *= vec2(0.1, 0.5);\n  \n  for(int i = 0; i < 4; i++){\n    final += box2(p.xz, vec2(5*i));\n    p.z -= 10. + beat(4.);\n    p.x *= 2.;\n    p.xz *= rot(0.2*float(i)*y);\n    p.z = cos(p.x * 2.0 +sin(p.z*2.0));\n    \n    if(beat(16.) < 0.8)\n      p.xz *= rot(0.8 - p.y);\n  }\n  \n  float denum = 22.;\n  if(beat(8.) < 0.5)\n    denum = 15.+beat(8.);\n  final = final / denum;\n  \n  pp.z += 15.;\n  \n  float sp = sphere(pp, 15. + beat(4.)) ;\n  final = min(final, sp);\n  \n  pp.xz *= rot(iTime*0.5);\n  pp.xz *= rot(2.6);\n  pp.xy *= rot(0.4);\n  \n  float tor = torus(pp, vec2(24., 2. + beat(8.)));;\n  \n  final = min(final, tor);\n  \n  return final;\n}\n\nvec3 march(vec3 ro, vec3 rd) {\n  float t = 0.;\n  float a;\n  int steps = 64;\n  if(beat(8.) < 0.2) steps = 32;\n  for(int i = 0; i < steps; i++){\n    a = map(ro+rd*t);\n    if(a < 0.01) break;\n    if(t > 100.) break;\n    t+=a;\n  }\n  \n  float ret = a;\n  if(beat(16.) < 0.1)\n    ret *= t/8.;\n  \n  return vec3(ret);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  vec2 uv1 = uv;\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1.);\n  \n  vec3 ro = vec3(0, 5, -55);\n  if(beat(16.) < 0.5) \n    ro.z = -75.;\n  vec3 rd = normalize(vec3(uv, 1));\n  \n  if(beat(32.) < 0.1)\n    rd.xy *= rot(0.2);\n \n  vec3 color = march(ro, rd);\n  color *= 1.75;\n \n if(beat(16.) < 0.5)\n    color *= vec3(0.8, 0.2, 0.3);\n  \n  if(beat(32.) < 0.5)\n    color = 1.-color;\n  \n  \n  bool mask;\n  float b = beat(64.);\n  if(b< 0.1)\n    mask =  uv1.x < 0.5;\n  else if(b < 0.2)\n    mask =  false;\n  else if(b < 0.3)\n    mask =  uv1.y < 0.5;\n  else if(b < 0.4)\n    mask = true;\n  else if(b < 0.5)\n  mask = length(uv) < 0.2 + beat(8.);  \n  else if(b < 0.6)\n    mask = false;\n  else if(b < 0.8)\n    mask = fract(uv.x * 10.*beat(8.)) < 0.5;\n  else if(b < 1.){\n    \n    uv *= rot(iTime);\n    uv = fract(uv*100.*beat(16.));\n    mask = uv.x < 0.5 && uv.y < 0.5; \n  }\n \n  \n  if(mask)\n    color = 1.-color;\n  \n  color = mix(color, texture(iChannel0, uv1).rgb, 0.9);\n  \n  fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}