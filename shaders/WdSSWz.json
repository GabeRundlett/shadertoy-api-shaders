{
    "Shader": {
        "info": {
            "date": "1553362186",
            "description": "Add 3 shifted complex logs to transform a texture. Mouse changes rotation.\n\nVariant of [url]https://www.shadertoy.com/view/tsBXRW[/url], also see [url]https://www.shadertoy.com/view/3sSSDR[/url] & [url]https://www.shadertoy.com/view/wdsSWs[/url].",
            "flags": 16,
            "hasliked": 0,
            "id": "WdSSWz",
            "likes": 25,
            "name": "Complex Log x 3",
            "published": 3,
            "tags": [
                "complex",
                "conformal",
                "log",
                "logpolar"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 944
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n// Complex Log\n//\n// Domain mapping of sums of complex log (aka. log polar transform).\n//\n// Care needed for alignment across branch cuts.\n////////////////////////////////////////////////////////////////////////////////\n\nfloat A = 7.0, B = 3.0; // Rotation angle is atan(B,A)\nfloat scale = 2.0;\n\nbool keypress(int key) {\n  return texelFetch(iChannel1,ivec2(key,2),0).x != 0.0;\n}\n\nconst int CHAR_G = 71;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 z = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  z *= scale;\n  if (iMouse.x > 0.0) {\n    // Get angle from mouse position\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    m *= 10.0;\n    A = floor(m.x), B = floor(m.y);\n  }\n  //z -= 0.5;z /= dot(z,z);z += 0.5; // Inversion adds one spiral\n  vec2 rot = vec2(A,B);\n  //vec2 z1 = clog(z);\n  //vec2 z2 = 2.0*catanh(z);\n  //vec2 z3 = 2.0*(3.0*catanh(z) - 2.0*catanh(cmul(vec2(cos(0.1*iTime),sin(0.1*iTime)), z)));\n  vec2 delta1 = (1.0-cos(0.15*iTime))*vec2(sin(0.25*iTime),cos(0.25*iTime));\n  vec2 delta2 = vec2(3.0*sin(0.3*iTime),1.5*sin(0.2*iTime));\n  vec2 delta3 = vec2(0);\n  z = clog(z+delta1) - clog(z+delta2) + clog(z+delta3);\n  z *= 0.5/PI;\n  float fw = length(rot)*fwidth(z.x);\n\n  z = cmul(rot,z);\n  z.y += 0.2*iTime;\n  z -= floor(z);\n  // LOD calculation from Fabrice Neyret.\n  float lod = log2(0.5*fw*iChannelResolution[0].x);\n  vec3 col = textureLod(iChannel0,z,lod).xyz;\n  vec2 z0 = min(z,1.0-z);\n  if (!keypress(CHAR_G)) col *= smoothstep(-fw,fw,min(z0.x,z0.y)-0.02);\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float PI = 3.14159;\n\n// Complex functions\nvec2 cmul(vec2 z, vec2 w) {\n  //return vec2 (z.x*w.x-z.y*w.y, z.x*w.y+z.y*w.x);\n  return mat2(z,-z.y,z.x)*w;\n}\n\nvec2 cinv(vec2 z) {\n  float t = dot(z,z);\n  return vec2(z.x,-z.y)/t;\n}\n\nvec2 cdiv(vec2 z, vec2 w) {\n  return cmul(z,cinv(w));\n}\n\nvec2 clog(vec2 z) {\n  float r = length(z);\n  return vec2(log(r),atan(z.y,z.x));\n}\n\n// Inverse hyperbolic tangent \nvec2 catanh(vec2 z) {\n  return 0.5*clog(cdiv(vec2(1,0)+z,vec2(1,0)-z));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}