{
    "Shader": {
        "info": {
            "date": "1684484618",
            "description": "efficient variant of https://shadertoy.com/view/dtKGDD\ninspiration reference:https://twitter.com/PavelBoytchev/status/1650945937462685713\nmouse controls camera.",
            "flags": 0,
            "hasliked": 0,
            "id": "clV3Rd",
            "likes": 52,
            "name": "animated knitting 2b",
            "published": 3,
            "tags": [
                "short",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 523
        },
        "renderpass": [
            {
                "code": "// efficient variant of https://shadertoy.com/view/dtKGDD\n// cf https://www.desmos.com/calculator/zd265cjxqi\n#define rot2(a)  mat2(cos(a+vec4(0,11,33,0)))                         //\n#define arc(L)   l = max( length( vec2( length((L).xy)-r,(L).z) ) -.2, \\\n                          abs(atan((L).x,(L).y)-A)-A ),                \\\n                 t = l < t ? N = i-n , l : t\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9.,d=1., h,r,A,i, T, y,n, N,l, s = 1.3;\n    vec3  R = iResolution, \n          D = normalize(vec3(U+U, -4.*R.y) - R),           // ray direction\n          p = vec3(0,0,50), q,                             // marching point along ray \n          M = iMouse.z > 0. ? 6.*iMouse.xyz/R -3.          // camera control\n              :  vec3( -.8,-.5,0); //+vec3(.2,.4,0)*cos(.3*iTime + vec3(0,11,0));\n    \n    for ( O=vec4(1); O.x > 0. && t > .01; O-=.01 ) {       // march scene\n        q = p, \n        q.yz *= rot2(-M.y),                                // rotations\n        q.xz *= rot2(-M.x-1.57),\n        T = mod(iTime,1.33), q.x -= T*1.5;                 // infinite scroll\n        n = floor(q.y/s+.5), q.y = mod(q.y+s/2.,s)-s/2.;   // vertical repeat\n        if (q.x>1.) T = 2.5-T;                             // horizontal symmetry\n        T -= floor(abs(q.x/2.)+.5)*1.3, q.x = abs(mod(q.x-1.,2.)-1.); // repeat along x\n        for( i=0.; i<3.; i++ , q.y += s )                  // foreach thread\n            h = 2.3*clamp(T+i-n+3.7,1e-3,1.), r = (d*d+h*h)/h/4., A = atan(h/d),\n            y = .5*sin(1.2*s*q.y),\n            arc(     vec3(1, r  , y ) - q ), \n            arc( q - vec3(0, h-r, y )     ),\n            t = min(t, length(q-vec3(1,.75,0))+.1 );       // trick to limit the artifact\n         // t = min(t,max( length(q.yz)-.1, 1.-abs(q.x)) );\n        p += .5*t*D;                                       // step forward = dist to obj    \n    }\n   O *= O*O*O*2.                                           // color scheme \n     * ( 1. + .2 * cos( 6.3*fract(1e3*sin(1e3*N)) + vec4(0,23,21,0) ));\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}