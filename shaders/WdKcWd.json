{
    "Shader": {
        "info": {
            "date": "1604051524",
            "description": "Starting from a hexagonal truchet tiling...",
            "flags": 0,
            "hasliked": 0,
            "id": "WdKcWd",
            "likes": 14,
            "name": "Truchet Passages",
            "published": 3,
            "tags": [
                "truchet",
                "architecture"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 404
        },
        "renderpass": [
            {
                "code": "// \"Truchet Passages\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0   // optional antialiasing\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat Minv3 (vec3 p);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir;\nvec2 gId, cMid;\nfloat tCur, dstFar, hgSize, cDir, trWidf;\nint idObj;\nconst int idPath = 1, idRail = 2, idBod = 3, idSup = 4, idBas = 5, idCone = 6,\n   idRfC = 7, idRfT = 8, idGrnd = 9;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 qa, qb;\n  float dMin, d, wThk, r, s1, s2;\n  dMin = dstFar;\n  wThk = 0.005;\n  p.xz -= cMid;\n  p /= hgSize;\n  p.xz = Rot2D (p.xz, cDir * pi / 6.);\n  p.xz = Rot2D (p.xz, 2. * pi * floor (3. * atan (p.z, - p.x) / (2. * pi) + 0.5) / 3.);\n  q = p;\n  q.x += 1.;\n  r = length (q.xz);\n  d = max (abs (r - 0.5) - trWidf, abs (q.y - 0.1) - 0.02);\n  DMIN (idPath);\n  d = length (vec2 (abs (r - 0.5) - trWidf + 0.02, q.y - 0.27)) - 0.007;\n  DMIN (idRail);\n  q = p;\n  q.x += 1.;\n  q.xz = Rot2D (q.xz, 2. * pi * floor (12. * atan (q.z, - q.x) / (2. * pi) + 0.5) / 12.);\n  q.y -= 0.17;\n  q.x = abs (q.x + 0.5) - trWidf + 0.02;\n  d = PrCylDf (q.xzy, 0.007, 0.1);\n  DMIN (idRail);\n  q = p;\n  q.x += 0.46 * sqrt3 - 0.02;\n  q.y -= 0.51;\n  d = 0.9 * PrCylDf (q.xzy, 0.01 * (1. - 0.6 * q.y), 0.51);\n  DMIN (idSup);\n  q = p;\n  d = PrCylDf (q.xzy, 0.46 * sqrt3, 0.08);\n  DMIN (idBas);\n  q.y -= 0.2;\n  d = PrCylDf (q.xzy, 0.1 - 0.2 * q.y, 0.2);\n  DMIN (idCone);\n  q = p;\n  q.y -= 1.;\n  s1 = length (vec2 (abs (r - 0.5), abs (q.y))) - 0.8 * trWidf;\n  s2 = length (vec2 (abs (length (q.xz) - 0.46 * sqrt3 + trWidf), abs (q.y))) - 0.8 * trWidf;\n  d = SmoothMax (max (abs (s1), - s2) - wThk, - q.y, 0.02);\n  DMIN (idRfT);\n  d = SmoothMax (max (abs (s2), - s1) - wThk, - q.y, 0.02);\n  DMIN (idRfC);\n  q = p;\n  d = q.y;\n  DMIN (idGrnd);\n  q = p;\n  q.x += 1.;\n  q.xz = Rot2D (q.xz, mod (0.5 * cDir * tCur + pi / 3., 2. * pi / 3.) - pi / 3.);\n  qa = 0.5 * q.xz - vec2 (0.5, 0.);\n  qb = 0.5 * sqrt3 * q.zx * vec2 (1., -1.);\n  r = sqrt (dot (qa, qa) + dot (qb, qb) - 2. * abs (dot (qa, qb)));\n  d = min (max (r, abs (q.y - 0.21) - 0.09), length (vec2 (r, q.y - 0.34))) - 0.025;\n  DMIN (idBod);\n  return dMin;\n}\n\nvoid SetTrConf ()\n{\n  cMid = HexToPix (gId * hgSize);\n  cDir = 2. * step (Hashfv2 (gId), 0.5) - 1.;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s, eps;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  eps = 0.0005;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / hgSize;\n  pM = HexToPix (PixToHex (ro.xz / hgSize));\n  hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n  s = Minv3 (hv);\n  gIdP = vec2 (-999.);\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 240; j ++) {\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId != gIdP) {\n      gIdP = gId;\n      SetTrConf ();\n    }\n    d = ObjDf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n      hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n      s = Minv3 (hv);\n    }\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  gIdP = vec2 (-99.);\n  for (int j = VAR_ZERO; j < 50; j ++) {\n    p = ro + d * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId != gIdP) {\n      gIdP = gId;\n      SetTrConf ();\n    }\n    h = ObjDf (p);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (h, 0.02, 0.5);\n    if (sh < 0.05 ) break;\n  }\n  return 0.4 + 0.6 * sh;\n}\n\nvec4 PathCol (vec2 p)\n{\n  vec4 col4;\n  vec2 q;\n  float a, d, f;\n  p = Rot2D (p, cDir * pi / 6.);\n  p = Rot2D (p, 2. * pi * floor (3. * atan (p.y, - p.x) / (2. * pi) + 0.5) / 3.);\n  p.x += 1.;\n  col4 = vec4 (0.9, 0.9, 0.95, 0.1);\n  col4 *= 0.3 + 0.7 * smoothstep (0.05, 0.1, abs (mod (72. * atan (p.y, - p.x) / (2. * pi) + 0.5, 1.) - 0.5));\n  f = abs (length (p) - 0.5);\n  if (f < trWidf - 0.04) {\n    q = Rot2D (p, mod (0.5 * cDir * tCur + pi / 3., 2. * pi / 3.) - pi / 3.);\n    a = mod (15. * atan (cDir * q.y, - q.x) / (2. * pi), 1.) - 0.5;\n    for (float s = 1.; s >= 0.; s -= 1.) {\n      d = 1.;\n      if (abs (a - 0.2) - 0.2 < 0.006 * s) d = min (d, smoothstep (0., 0.002,\n         f - 0.015 * (1. - a / 0.2) - 0.002 * s));\n      else if (abs (a + 0.2) - 0.2 < 0.006 * s) d = min (d, smoothstep (0., 0.002, f - 0.005 - 0.003 * s));\n      if (abs (mod (4. * a + 0.5, 1.) - 0.5) - 0.3 < 0.03 * s)\n         d = min (d, smoothstep (0., 0.002, abs (f - 0.05) - 0.004 - 0.003 * s));\n      col4 = mix (vec4 (1. - 0.9 * s, 0., 0., -1.), col4, d);\n    }\n  }\n  return col4;\n}\n\nvec3 SkyHrzCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol;\n  vec2 q;\n  float f, fd, ff;\n  if (rd.y > -0.05 && rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n    col = mix (vec3 (0.1, 0.35, 0.1), vec3 (0.3, 0.35, 0.35),\n       smoothstep (-0.05, 0.01, rd.y));\n  } else if (rd.y > 0.) {\n    q = 0.005 * (ro.xz + tCur * vec2 (0.5, 2.) + ((200. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.1, 0.8, ff);\n    fd = smoothstep (0.1, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.8 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    fd = smoothstep (0.01, 0.1, rd.y);\n    col = mix (mix (vec3 (0.8, 0.8, 0.75), vec3 (0.4, 0.5, 0.8), 0.3 + 0.7 * fd), clCol,\n       0.1 + 0.9 * f * fd);\n  }\n  return 0.5 * col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  vec2 q, vf;\n  float dstObj, sh, nDotL, s;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    vf = vec2 (0.);\n    q = (ro.xz - cMid) / hgSize;\n    if (idObj == idPath) {\n     col4 = PathCol (q);\n    } else if (idObj == idRail) {\n      col4 = vec4 (0.8, 0.7, 0.2, 0.2);\n    } else if (idObj == idBod) {\n      col4 = mix (vec4 (0.2, 0.7, 0.2, 0.2), vec4 (0.2, 1., 0.2, -1.), step (0.66, ro.y));\n    } else if (idObj == idSup) {\n      col4 = vec4 (0.8, 0.8, 0.85, 0.1);\n    } else if (idObj == idBas) {\n      s = length (q);\n      col4 = vec4 (0.55, 0.5, 0.5, 0.1) * (0.8 + 0.2 * smoothstep (0.12, 0.15, s));\n      col4 = mix (vec4 (0., 0., 1., 0.1), col4, 0.5 + 0.5 * smoothstep (0.12, 0.18, s));\n      vf = vec2 (64., 0.2);\n    } else if (idObj == idCone) {\n      col4 = vec4 (0.1, 0.1, 0.6, -1.);\n    } else if (idObj == idRfT) {\n      if (vn.y < 0.) {\n        s = abs (length (q) - 0.46 * sqrt3 + trWidf);\n        q = Rot2D (q, cDir * pi / 6.);\n        q = Rot2D (q, 2. * pi * floor (3. * atan (q.y, - q.x) / (2. * pi) + 0.5) / 3.);\n        q.x += 1.;\n        s = min (s, abs (abs (length (q) - 0.5)));\n      }\n    } else  if (idObj == idRfC) {\n      if (vn.y < 0.) s = abs (length (q) - 0.46 * sqrt3 + trWidf);\n    } else  if (idObj == idGrnd) {\n      col4 = vec4 (0.3, 0.4, 0.3, 0.);\n      vf = vec2 (32., 1.);\n    }\n    if (idObj == idRfT || idObj == idRfC) {\n      col4 = vec4 (0.5, 0.5, 0.55, 0.1);\n      if (vn.y < 0.) col4 = mix (vec4 (1., 1., 0.9, -1.), col4, smoothstep (0.004, 0.008, s));\n      if (vn.y > 0. || s > 0.008) vf = vec2 (64., 0.5);\n    } else if (idObj == idGrnd || idObj == idBas && abs (vn.y) < 0.1) {\n      q = Rot2D (q, cDir * pi / 6.);\n      q = Rot2D (q, 2. * pi * floor (3. * atan (q.y, - q.x) / (2. * pi) + 0.5) / 3.);\n      q.x += 1.;\n      col4 = mix (vec4 (0., 1., 0., 0.1), col4, smoothstep (0.02, 0.12, abs (abs (length (q) - 0.5))));\n    }\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    nDotL = max (dot (vn, sunDir), 0.);\n    if (idObj == idRail || idObj == idSup) nDotL *= nDotL;\n    sh = ObjSShadow (ro, sunDir);\n    if (col4.a >= 0.) col = col4.rgb * (0.2 + 0.8 * sh * nDotL) +\n       col4.a * step (0.95, sh) * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n    else col = col4.rgb * (0.6 - 0.4 * dot (vn, rd));\n    col = mix (col, vec3 (0.1, 0.2, 0.1), 1. - max (0., 1. - 2. * smoothstep (0., 1.,\n       dstObj / (2. * dstFar))));\n  } else col = SkyHrzCol (ro, rd);\n  return clamp (col, 0., 1.);\n}\n\nvec2 TrkPath (float t)\n{\n  vec2 r;\n  float tt;\n  tt = mod (t, 4.);\n  if (tt < 1.) r = mix (vec2 (sqrt3/2., -0.5), vec2 (sqrt3/2., 0.5), tt);\n  else if (tt < 2.) r = mix (vec2 (sqrt3/2., 0.5), vec2 (0., 1.), tt - 1.);\n  else if (tt < 3.) r = mix (vec2 (0., 1.), vec2 (0., 2.), tt - 2.);\n  else r = mix (vec2 (0., 2.), vec2 (sqrt3/2., 2.5), tt - 3.);\n  r += vec2 (0.001, 3. * floor (t / 4.));\n  return r * hgSize;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvv, p1, p2, vd;\n  float el, az, zmFac, asp, sr, vel, tCyc, s;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  hgSize = 2.;\n  trWidf = 0.1;\n  vel = 0.2;\n  tCyc = 4. / vel;\n  p1 = 0.5 * (TrkPath (vel * tCur + 0.05) + TrkPath (vel * tCur + 0.15));\n  p2 = 0.5 * (TrkPath (vel * tCur - 0.05) + TrkPath (vel * tCur - 0.15));\n  s = SmoothBump (0.25, 0.75, 0.05, mod (tCur / (1. * tCyc), 1.));\n  ro.xz = 0.5 * (p1 + p2);\n  ro.x += 0.2 * (2. * SmoothBump (0.25, 0.75, 0.15, mod (0.07 * vel * tCur, 1.)) - 1.);\n  ro.y = 1.2 + 1.8 * s;\n  vd = p1 - p2;\n  az = atan (vd.x, vd.y);\n  el = -0.2 * pi * (s + 0.3);\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  vuMat = StdVuMat (el, az);\n  zmFac = 2.5;\n  dstFar = 60.;\n  sunDir = normalize (vec3 (1., 1.5, -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) * pi)) / zmFac;\n    rd = vuMat * normalize (vec3 ((2. * tan (0.5 * atan (uvv.x / asp))) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}