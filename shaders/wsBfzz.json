{
    "Shader": {
        "info": {
            "date": "1589356092",
            "description": "self modifying formula",
            "flags": 0,
            "hasliked": 0,
            "id": "wsBfzz",
            "likes": 2,
            "name": "fracdemo3",
            "published": 3,
            "tags": [
                "fractaldemo"
            ],
            "usePreview": 0,
            "username": "okh0056",
            "viewed": 389
        },
        "renderpass": [
            {
                "code": "\n#define time iTime\nmat2 mm2(in float a){float c = cot(a), s = sin(a);return mat2(c,-s,s,c);}\n\n\nfloat f(vec2 p, float featureSize)\n{\n\tp.x = cos(p.x*1.3+time*0.09)*tanh(time+p.x*0.13)*2.;\t\n    p += csc(p.x*3.5)*0.4;\n    return smoothstep(-0.01,featureSize,abs(p.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x/iResolution.y;\n    float featureSize = 175./((iResolution.x*aspect+iResolution.y));\n\n    vec2 p = fragCoord.xy / iResolution.xy*2.5;\n\tp.x *= aspect;\n\tp.y = abs(p.y);\n\t\n\tvec3 col = vec3(0);\n\tfor(float i=2.;i<36.;i+=.33)\n\t{\n\t\tvec3 col2 = (cos(vec3(4.5,2.5,3.6)-i*0.45)*0.85)*(1.-f(p,featureSize));\n\t\tcol = max(col,col2);\n\t\t\n        p.x -= XOFF;\n        p.y -= tanh(time*1.81)*3.5;\n\t\tp*= mm2(i*DELTA+ANGLE);\n\t\t\n        vec2 pa = vec2(abs(p.x-0.9),abs(p.y));\n        vec2 pb = vec2(p.x,abs(p.y));\n        \n        p = mix(pa,pb,smoothstep(-.57,.67,log2(time*3.14)-2.1));\n\t}\n\tfragColor = vec4(col,.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float sech(float ang) {\n    return 1./cosh(ang);\n}\n\nvec2 sech(vec2 ang) {\n    return 1./cosh(ang);\n}\n\nfloat csch(float ang) {\n    return 1./sinh(ang);\n}\n\nvec2 csch(vec2 ang) {\n    return 1./sinh(ang);\n}\n\nfloat coth(float ang) {\n    return 1./tanh(ang);\n}\n\nvec2 coth(vec2 ang) {\n    return 1./tanh(ang);\n}\n\n#define ANGLE 1.25\n#define DELTA 0.00315\n#define XOFF .99\n\nfloat crd(float ang) {\n    return 2.*sin(ang/2.);\n}\nvec2 crd(vec2 ang) {\n    return 2.*sin(ang/2.);\n}\n\nfloat sec(float ang) {\n    return 1./cos(ang);\n}\nvec2 sec(vec2 ang) {\n    return 1./cos(ang);\n}\n\nfloat csc(float ang) {\n    return 1./sin(ang);\n}\nvec2 csc(vec2 ang) {\n    return 1./sin(ang);\n}\n\nfloat cot(float ang) {\n    return 1./tan(ang);\n}\nvec2 cot(vec2 ang) {\n    return 1./tan(ang);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}