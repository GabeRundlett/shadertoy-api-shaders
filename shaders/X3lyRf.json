{
    "Shader": {
        "info": {
            "date": "1726511191",
            "description": "Another julia rednering",
            "flags": 0,
            "hasliked": 0,
            "id": "X3lyRf",
            "likes": 14,
            "name": "Julia love parade",
            "published": 3,
            "tags": [
                "julia",
                "set",
                "shaded",
                "colorfull"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 140
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2024 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// designed with my offline shader editor Noodlesplate (https://github.com/aiekick/NoodlesPlate)\n    \n// default\nconst int uAA = 2;\nconst vec2 uCenter = vec2(-0.748835,-0.078497);\nconst float uExteriorColorFactor = 0.15;\nconst float uBaseEdgeOffset = 3.0;\nconst float uBaseColorOffset = 0.1;\nconst int uIterations = 1000;\nconst float uScale = 1.00535;\n\n// rendering\nconst vec3 uLightDir = vec3(0.8,0.30624,0.2);\n\nvec2 zmul(vec2 a, vec2 b){ // z * z \n\treturn mat2(a.x, a.y, -a.y, a.x) * b;\n}\n\n// from iq : https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb_smooth( in vec3 c ) {\n    vec3 rgb = mod(c.x * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0;\n    rgb = clamp(abs(rgb) - 1.0, 0.0, 1.0);\n\trgb = rgb * rgb * (3.0 - 2.0 * rgb); // cubic smoothing\n\treturn c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nfloat julia(vec2 g, vec2 s) {\n\tvec2 uv = (g+g-s)/min(s.x,s.y);\n\tvec2 z = uv * uScale;\n\tvec2 c = uCenter;\t\n\tfloat r = 0.0;\n\tfloat n = 0.0;\n\tfloat iterf = float(uIterations);\n\tfor(; n < iterf; ++n) {\n\t\tz = zmul(z,z) + c;\n\t\tr = dot(z,z);\n\t\tif (floor(r) > 128.0) {\n\t\t\tbreak;\n\t\t}\n\t}\t\n    return n - log(log(r))/log(2.0);\n}\n\nvec3 shaded(vec2 g, vec2 s) {\n\t// normal\n\tfloat d = julia(g, s);\n\tfloat e = 10.0 / min(s.x, s.y);\n\tfloat dx = (d - julia(g + vec2(1,0), s))/e;\n\tfloat dy = (d - julia(g + vec2(0,1), s))/e;\n\tvec3 n = normalize(vec3(dx, dy, 1.0));\n\t\n    // shading\n\tvec2 uv = g / s;\n\tvec3 rd = vec3(uv,1);\n    float lightAngle = iTime * 0.5;\n\tvec3 ld = normalize(vec3(cos(lightAngle), sin(lightAngle), 0.2));\n    \n    float colorOffset = iTime * 0.025 + uBaseColorOffset;\n    vec3 baseColor = hsv2rgb_smooth(vec3(colorOffset, 1.0, 1.0));\n    \n    float edgeOffset = iTime * -0.1 + uBaseEdgeOffset;    \n    vec3 c = cos(edgeOffset + 0.15 * d + baseColor) * 0.5 + 0.5; // based on a formula of iq\n    \n\tc += pow(max(dot(n, ld) * 0.5 + 0.5, 0.0), 4.0) * 0.75; // diff\n\tc += pow(max(dot(-rd, reflect(-ld, n)), 0.0), 2.0) * 0.1; // spec\n\tc -= max(dot(n, ld), 0.0) * 0.25; // weak sha maybe :)\n\t\n\treturn c;\n}\n\nvec3 antiAliased(vec2 g, vec2 s) {\n\tconst int AA = uAA;\n\tconst float AAf = float(AA);\n\tvec3 c = vec3(0);\n\tfor(int i=0;i<AA;++i) {\n\t\tfor(int j=0;j<AA;++j) {\n\t\t\tvec2 o = vec2(i,j) / AAf - 0.5;\n\t\t\tc += shaded(g + o, s);\n\t\t}\n\t}\n    c /= AAf * AAf;\n\treturn c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor.rgb = antiAliased(fragCoord, iResolution.xy);\n\tfragColor.rgb = sqrt(fragColor.rgb * fragColor.rgb); // gamma correction\n    fragColor.rgb = clamp(fragColor.rgb, 0.0, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}