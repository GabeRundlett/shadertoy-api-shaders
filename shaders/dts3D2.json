{
    "Shader": {
        "info": {
            "date": "1672489235",
            "description": "Have a nice party tonight. HereÂ´s a laser tunnel for you :)\n",
            "flags": 96,
            "hasliked": 0,
            "id": "dts3D2",
            "likes": 14,
            "name": "Foggy laser tunnel",
            "published": 3,
            "tags": [
                "tunnel",
                "madtracer",
                "madtracing"
            ],
            "usePreview": 0,
            "username": "Virgill",
            "viewed": 462
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy/iResolution.xy);\n    float flicker = 0.15*fract(iFrameRate*iTime*0.333)+0.8;\n    fragColor = texture(iChannel0, uv)*flicker;\n    vec2 uv_border = (fragCoord.xy/iResolution.xy)*vec2(1.0,-1.0);\n    if (uv_border.y<-0.80||uv_border.y>-0.20) fragColor= vec4(0.0);  // black borders\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 31782,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/virgill/nihil-admirari"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define FAR 10.0\n#define ITER 25\n#define BOUNCES 3\n\n\n// palette calculation (IQ)\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nvec3 col( in float t)\n{\nreturn pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n\n}\n\n// hemispherical hash function (fizzer+slerpy)\nvec3 hashHs( vec3 n, uint seed )\n{\n    float a=(float((seed*0x73493U)&0xfffffU)/float(0x100000))*2.-1.;\n    float b=6.283*(float((seed*0xAF71fU)&0xfffffU)/float(0x100000));\n    float c=sqrt(1.-a*a);\n    vec3 r=vec3(c*cos(b),a,c*sin(b));\n    return dot(r,n)>0.?r:-r;\n    //return r;\n}\n\n\n// 3d noise function (shane)\nfloat noise(vec3 p)\n{\n\tvec3 ip=floor(p);\n    p-=ip; \n    vec3 s=vec3(7,157,113);\n    vec4 h=vec4(0.,s.yz,s.y+s.z)+dot(ip,s);\n    p=p*p*(3.-2.*p); \n    h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n    h.xy=mix(h.xz,h.yw,p.y);\n    return mix(h.x,h.y,p.z); \n}\n\n\n// smooth minimum function (iq)\nfloat smin( float a, float b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\n// signed distance box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.));\n\n}\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\n\n// 3d rotation function\nvoid pR(inout vec2 p,float a) \n{\n\tp = cos(a)*p+sin(a)*vec2(p.y,-p.x);\n}\n\n// sphere\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n// min for the map function\nvoid dmin(inout vec3 d, in float x, in float y, in float z)\n{\n    if(x < d.x) d = vec3(x,y,z);\n}\n\nvec3 map(vec3 p)\n{\n    vec3 d = vec3(1e+31,0,0); \n    float floornoise = noise(3.*p+0.2*iTime)+0.1*noise(20.*p+0.1*iTime); \n    \n    dmin(d,smin(7.-p.z,8.,8.),1.,.0);\n    vec3 q=p;\n\n    pR(q.yz,(3.1415*.5));\n    float cylinder = max(-sdCylinder(q,vec3(0.0,0.0,1.)),sdCylinder(q,vec3(0.0,0.0,1.)));\n    dmin(d,cylinder,2.-2.*floornoise,1.0);\n    \n    float random = iTime*iFrameRate;\n   // random=0.;\n    float beam = sdCylinder(q,vec3(sin(random),cos(random),.005));\n    dmin(d,beam,4.-2.*floornoise,0.);\n\n    return d;\n}\n\n// normal calculation function\nvec3 normal(vec3 p, float k)\n{\n    float m = map(p).x;\n\tvec2 e = vec2(0.,k);\n\treturn normalize(m-vec3(map(p - e.yxx).x,map(p - e.xyx).x,map(p - e.xxy).x));\n}\n\n\n// standard ray marching function\nvec3 tracer(vec3 ro, vec3 rd)\n{    \n    vec3 m;\n    float t=.001;\n    for(int i=0; i < ITER; i++)\n    {\n        m = map(ro + rd*t);\n        if(t > FAR)break;\n        if(m.z!=0.) t += abs(m.x); else t += m.x; \n    }\n    return vec3(t, m.yz);\n}\n\n\n// set up a very basic camera (ro= ray origin, rd=ray direction)\nvoid camera(out vec3 ro, out vec3 rd, in vec2 p)\n{\n\n\tvec2 uv = (2.*p.xy-iResolution.xy)/iResolution.x*vec2(1.0,-1.0);\n\tro =  vec3(0,0, -3);\n    rd =  normalize(vec3(uv, 1));\n    pR(ro.yz,0.15*sin(0.1*iTime));    \n    pR(ro.xz,0.15*cos(0.1*iTime));   \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // feedbak noise (with buffer a)\n    vec2 uv = (fragCoord.xy / iResolution.xy);\n   \tuv.x-=0.0002*noise(uv.yxx*32.-iTime)-0.00002; \n   \tuv.y+=0.0002*noise(uv.yxx*32.+iTime)-0.00002; \n    vec4 buffer= texture(iChannel0,uv);\t\t  \n\n    uint seed = uint(fragCoord) * uint(fragCoord.y); \n    vec3 emit = vec3(0), ro, rd, t, sp, sn;\n    \n    camera(ro, rd, fragCoord); \n    \n    for(int i=0; i<BOUNCES; i++)\n    {\n        t = tracer(ro, rd);\n        sp = ro + rd*t.x; \n\t\tsn = normal(sp,0.001); \n        if(t.y > 1.) emit = t.y * col(t.z+0.25*iTime); \n        seed *= uint(iTime*112.); \n        rd = mix(reflect(rd, sn), hashHs(sn, seed), clamp(t.y,0.,1.));  \n        ro = sp;\n    }\n    float blur=.97; \t\t\t\n    float amplify =.02; \n    \n    emit*=amplify;\n    \n    fragColor = vec4(emit.x,emit.y,emit.z, 1.)+buffer*blur;\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}