{
    "Shader": {
        "info": {
            "date": "1481667322",
            "description": "Shows a bug in bool-to-float conversion, where the condition seems to be true and false at the same time. Seen in desktop OpenGL on NVidia and WebGL in Edge. If you see red or purple areas or a vertical white line, that's them bugs.",
            "flags": 0,
            "hasliked": 0,
            "id": "4ltSW2",
            "likes": 2,
            "name": "true is false, GLSL bug",
            "published": 3,
            "tags": [
                "glsl",
                "bug",
                "boolean",
                "language",
                "conversion",
                "nan",
                "conditional"
            ],
            "usePreview": 0,
            "username": "TimoKinnunen",
            "viewed": 959
        },
        "renderpass": [
            {
                "code": "// Second version.\n//\n// I changed things around a bit to more clearly isolate the conditions\n// that can lead to the buggy behavior. This version should be about what\n// will hopefully soon accompany a bug report, minus the animated parts.\n//\n// The function plotting code is by mu6k from\n// Precise Graphing @ https://www.shadertoy.com/view/4dS3WG\n//\nfloat f(float x) {return sin(pow(4.0,x)* 10.0)+ log(x)/ log(10.0);}\nfloat hash(float x) {return fract(sin(x* 164437.36831)* 13217.321)- 0.5;}\n\nvoid image(out vec4 glFragColor, vec2 glFragCoord, vec2 reso, float globalTime) {\nvec2 aCenter = vec2(6.0+ sin(globalTime),3);\nfloat aZoom = 0.0923;\nvec2 uv = ((((glFragCoord/ reso)- .5)/ aZoom)+ aCenter* 0.5* max(reso.y,reso.x)/ reso)* 2.0*3.5;\nuv.x *= reso.x/ reso.y;\nfloat pixel = 3.5/ reso.y/ aZoom;\n\nfloat x = uv.x+ hash(uv.y* 41.0)* pixel* 4.0;\nfloat y = uv.y+ hash(uv.x* 41.0)* pixel* 4.0;\n\nfloat s0 = f(x- pixel);\nfloat s1 = f(x+ pixel);\n\nfloat tested = (y- s1)/ pixel;\n\n// Prepare for first of two rounds around the code block.\n    \n#define VARIANT\nfloat ratio = 1.0-smoothstep(-.125,.125,sin((glFragCoord.x*0.01-glFragCoord.y*0.01+globalTime*2.)));\nglFragColor = vec4(0);\n\n// First round, GO!\n// This round is actually a char-to-char identical copy-paste of the\n// the second round. Like a function inlined by hand.\n{\nvec3 graphColor = vec3(0);\nvec4 debugColor = vec4(0);\n\n#ifdef VARIANT\nfloat belowS1 = ( (tested>= 1.)) ? 0.0 : 1.0;\n#else\nfloat belowS1 = (!(tested>= 1.)) ? 1.0 : 0.0;\n#endif\n\n#ifdef VARIANT\nbool test1 = tested>= 1.;\nbool test2 = !(tested>= 1.);\n#else\nbool test1 = tested>= 1.;\nbool test2 = !test1;\n#endif\n\n#ifdef VARIANT\nfloat small = 0.0;\n#else\nfloat small = 0.11754944999999999284*0.0000000000000000000000000000000000001;\n#endif\n\nif(float((s0- y)/ pixel<= 1.)*belowS1+float((s1- y)/ pixel<= 1.)*float(!((y- s0)/ pixel>= 1.))>= 0.5) graphColor += 1.0;\nif(test1== test2) debugColor.r += 1.0;\nbool test0 = (y- s1)/ pixel>= 1.;\nif(!test0) debugColor.b += 0.5;\nif(test0) debugColor.g -= small;\n\nglFragColor += ratio*(vec4(pow(graphColor,vec3(.6)),1.0) + debugColor);\n}\n// Setting up another go..\n\nratio=1.0-ratio;\n\n#ifdef VARIANT\n#undef VARIANT\n#else\n#define VARIANT\n#endif\n\n// Second round, GO!\n// The code duplication here is unfortunate but necessary to allow for\n// maximal freedom in what transformations the compiler can use.\n{\nvec3 graphColor = vec3(0);\nvec4 debugColor = vec4(0);\n\n#ifdef VARIANT\nfloat belowS1 = ( (tested>= 1.)) ? 0.0 : 1.0;\n#else\nfloat belowS1 = (!(tested>= 1.)) ? 1.0 : 0.0;\n#endif\n\n#ifdef VARIANT\nbool test1 = tested>= 1.;\nbool test2 = !(tested>= 1.);\n#else\nbool test1 = tested>= 1.;\nbool test2 = !test1;\n#endif\n\n#ifdef VARIANT\nfloat small = 0.0;\n#else\nfloat small = 0.11754944999999999284*0.0000000000000000000000000000000000001;\n#endif\n\nif(float((s0- y)/ pixel<= 1.)*belowS1+float((s1- y)/ pixel<= 1.)*float(!((y- s0)/ pixel>= 1.))>= 0.5) graphColor += 1.0;\nif(test1== test2) debugColor.r += 1.0;\nbool test0 = (y- s1)/ pixel>= 1.;\nif(!test0) debugColor.b += 0.5;\nif(test0) debugColor.g -= small;\n\nglFragColor += ratio*(vec4(pow(graphColor,vec3(.6)),1.0) + debugColor);\n}\n// And with that we're done.\n}\nvoid mainImage(out vec4 glFragColor, vec2 glFragCoord) {image(glFragColor,glFragCoord,iResolution.xy,iTime);}\n// First version, keeping it just in case.\n/*\nfloat f(float x) {\n\treturn sin(pow(4.0,x)* 10.0)+ log(x)/ log(10.0);\n}\nfloat hash(float x) {\n\treturn fract(sin(x* 164437.36831)* 13217.321)- 0.5;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 aCenter = vec2(6.0+ sin(iTime),3);\n\tfloat aZoom = 0.0923;\n\tvec2 uv = ((((fragCoord.xy/ iResolution.xy)- .5)/ aZoom)+ aCenter* 0.5* max(iResolution.y,iResolution.x)/ iResolution.xy)* 2.0*3.5;\n\tuv.x *= iResolution.x/ iResolution.y;\n\tfloat pixel = 3.5/ iResolution.y/ aZoom;\n\n\tvec3 c = vec3(0);\n\tvec4 debugColor = vec4(0);\n\n\tfloat x = uv.x+ hash(uv.y* 41.0)* pixel* 4.0;\n\tfloat y = uv.y+ hash(uv.x* 41.0)* pixel* 4.0;\n\n\tfloat s0 = f(x- pixel);\n\tfloat s1 = f(x+ pixel);\n\n\tfloat original = 0.5;\n\tfloat tested = (y- s1)/ pixel;\n    // Two ways to convert bool to float, should give the same result.\n    // Generates blinking white vertical line on the right, if buggy.\n    if(mod(iTime,2.0)>1.0) {\n        original = (!(tested>= 1.))?1.:0.;}else{\n        original = ( (tested>= 1.))?0.:1.;\n    }\n\tif(((float((s0- y)/ pixel<= 1.))* original+ float(((s1- y)/ pixel<= 1.))* float(!((y- s0)/ pixel>= 1.))>= 0.5)) {\n\t\tc += 1.0;\n\t}\n    // NaNs or no NaNs, these booleans should not both be true!\n    // Generates red blocks left and right side, if buggy.\n    bool test1 = ( (tested>= 1.));\n    bool test2 = (!(tested>= 1.));\n\tif(test1== test2) debugColor += vec4(0xd00d,0,0,0); // WTF?!\n\n    bool test = (y- s1)/ pixel>= 1.;\n\tif(!test== test) debugColor += vec4(0,0xfaaa,0,0); // Seen on desktop, YMMV?!\n\n\tfragColor = vec4(pow(c,vec3(.6)),1.0);\n\tfragColor += debugColor;\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}