{
    "Shader": {
        "info": {
            "date": "1716088494",
            "description": "Today I learned what a sigmoid is, and I noticed that I can implement anti aliasing + animations with it.\n\nPlay with animationK",
            "flags": 0,
            "hasliked": 0,
            "id": "4XdGRH",
            "likes": 1,
            "name": "015 - Simple Sigmoid Fun",
            "published": 3,
            "tags": [
                "beginner",
                "learning"
            ],
            "usePreview": 0,
            "username": "PiGIon",
            "viewed": 101
        },
        "renderpass": [
            {
                "code": "// 2024.05.19 rev 1\n// 2024.05.20 rev 2 Use exp instead of EULER hard coded constant\n\nfloat animationK = 15.;\n\n// returns a back and forth 0.0 to 1.0 per second\nfloat cycle(float perSecond) {\n    float d = fract((iTime + iTimeDelta) * perSecond);\n    \n    // step 0.5 is used to reverse the keyframe, to get a coming and going effect\n    // since the cut point is 0.5, we need to get original place (e.g. 1 again) if d is exactly to 0.5\n    // this means that it cycles from 0...1...0 every second\n    return 2. * ( d>.5 ? 1.-d : d );\n}\n\nfloat sigmoid(float x, float k) {\n    return 1. / (1. + exp(-k * x + k/2.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    vec4 O = fragColor;\n\n    vec4 bg = vec4(1.);\n    float size = 0.3;\n    // Put the ball at the bottom of the screen\n    float y = size - 1. + (1. - size)*2.;\n    // Bounce it using the sigmoid\n    y -= sigmoid(cycle(1.), animationK);\n    float circle = length(uv + vec2(0., y));\n    float delta = 0.01;\n    float k = 12.;\n    vec4 ballColor = vec4(1., 0., 0., 1.);\n    if (circle < size) {\n        // Plot the difference between the circle and delta\n        // Put it into a sigmoid function between (0, 1);\n        O = mix(bg, ballColor, sigmoid((size-circle)/delta, k));\n    }\n\n    fragColor = O;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}