{
    "Shader": {
        "info": {
            "date": "1653404698",
            "description": "Very very very messy attempt at making pixel art\n\nadds a walk with random length lines, uses flood fill to find an outline, then automata for some other stuff (lots unused)",
            "flags": 48,
            "hasliked": 0,
            "id": "ss3yW8",
            "likes": 2,
            "name": "Flood Fill Shape Test",
            "published": 3,
            "tags": [
                "feedback",
                "pixelart",
                "cellularautomata"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 442
        },
        "renderpass": [
            {
                "code": "vec3 pal(in float t, in vec3 d) {\n    return 0.5 + 0.5*cos( 6.28318*(0.5*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    float zm = 0.2;\n    \n    vec2 res = floor(iResolution.xy);\n    \n    vec2 f = fragCoord;vec2(abs(fragCoord.x - 0.5 * res.x) + 0.5 * res.x, fragCoord.y);\n    vec2 f2 = vec2(res.x-f.x, f.y);\n\n    vec4 col = texelFetch( iChannel0, ivec2(zm * f + 0.5 * (1.-zm) * res), 0);\n    vec4 col2 = texelFetch( iChannel1, ivec2(zm * f + 0.5 * (1.-zm) * res), 0);\n    float b = col.b;\n    \n   // if (col.r >= 1.)\n     //   col *= 0.;\n    \n    if (col.rgb == vec3(0))\n       col.rgb = vec3(0.95);\n    else {\n        if (col.rgb == vec3(0,1,1))\n            col.rgb = vec3(0);\n        col.r /= col.a;\n        //col.g = col.a;\n    \n        if (col.r > 0.) {\n            //col.rgb = pal(floor(8. * col.r)/5. + cos(1.75 * 3.14159 * floor(float(iFrame)/360.)), 0.5 * vec3(0,1,2)/3.);\n            col.rgb = pal(1.5 + floor(uv.y * 16.) / 16., 0.5 * vec3(0,1,2)/3.);\n           \n            col.rgb = mix(col.rgb, vec3(1), col.r);\n        }\n        \n        if (col.g == 1.)\n            col.rgb = vec3(0);\n    }\n    \n    col2.rgb = col2.rrr;\n   // vec3 col3 = pal(floor(uv.y * 16.) / 16.+ floor(float(iFrame)/360.), 0.5 * vec3(0,1,2)/3.);\n   // vec3 col4 = pal(0.12 + floor(uv.y * 16.) / 16.+ floor(float(iFrame)/360.), 0.5 * vec3(0,1,2)/3.);\n    \n    vec3 col3 = pal(1.15 + floor(uv.y * 16.) / 16., 0.5 * vec3(0,1,2)/3.);\n    vec3 col4 = pal(0.12 + 1.2 + floor(uv.y * 16.) / 16., 0.5 * vec3(0,1,2)/3.);\n    \n    if (col.rgb == vec3(0))\n        col.rgb = mix(col3, col4, col2.r);\n    \n    if (b==1.)\n        col.rgb = vec3(0.1);\n     \n    //*/\n    fragColor.rgb = col.rgb;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define KEYBOARD iChannel1\n#define KEY_RESET 82\n\n#define pi 3.14159\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat pxLine(vec2 f, vec2 p, vec2 q) {\n    f -= p;\n    vec2 dir = .5 * (q - p),\n         v = step(abs(f - round(dir/dir.yx * f.yx)), vec2(0)),\n         a = step(abs(f - dir), abs(dir));  \n    return max(v.x, v.y) * a.x * a.y ;           \n}\n\nfloat getShape(vec2 f) {\n    f -= 0.5;\n    vec2 p = vec2(0);\n    float s = 0.;\n    float t = 0.01 * floor(iTime);\n    float a = 0.;\n\n    float n = 100.;\n    for (float i = 0.; i < n; i++) {\n        float j = i + t;\n        float h = h21(vec2(j , 103. + j));\n        float h2 = h21(vec2(j-10.,3. * j));\n      \n       // float m = 0.;mod(i, 2.);\n        a += 0.25 * pi * (2. * floor(h) - 1.);// * (0.25 * floor((2. + m) * h)-m);\n               \n        vec2 q = p + ceil(h2 * 8.) * vec2(cos(a), sin(a));\n        q = round(q);\n        \n        s = max(s, pxLine(f, p, q));\n        s = max(s, pxLine(vec2(-f.x-1., f.y), p, q));\n\n        p = q;\n    }     \n    return s;\n}\n\nvec3 cell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 ).rgb;\n}\n\n// because im lazy\nfloat alpha(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 ).a;\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\nvoid mainImage( out vec4 col, in vec2 f )\n{\n    ivec2 px = ivec2(f);\n\n    col.rgb = cell(px);\n    col.a = alpha(px);\n    \n    vec3 b = cell(px - ivec2(0,1));\n    vec3 t = cell(px + ivec2(0,1));\n    vec3 l = cell(px - ivec2(1,0));\n    vec3 r = cell(px + ivec2(1,0));\n    \n    vec3 bl = cell(px + ivec2(-1,-1));\n    vec3 tl = cell(px + ivec2(-1,1));\n    vec3 br = cell(px + ivec2(1,-1));\n    vec3 tr = cell(px + ivec2(1,1));\n        \n    \n    vec3 col2 = vec3(0);\n    \n    if (frame == 0 || key_down(KEY_RESET)) {\n        vec2 res = floor(0.5 * iResolution.xy);\n\n        col.b = 0.;\n        col.rg = vec2(1) * clamp(getShape(f-res), 0., 1.);\n        col.a = 0.;\n        \n        //if (length(f-res) < 25. && length(f-res) > 24.)\n         //   col.r = 1.;\n\n        if (f.x < 1. || f.y < 1.)\n            col.g = 0.;\n        else\n            col.g = 1.;\n       // if (f.x < res.x && f.x > res.x - 1. && f.y < res.y && f.y > res.y - 1.)\n         //   col.g = 2.;\n        \n        return;\n    }\n    else if (frame < 20) {        \n        int n = 20;\n        for (int i = 0; i < n; i++) {\n            if (cell(px + ivec2(i,0)).r == 1. ||\n                cell(px + ivec2(0,i)).r == 1. ||\n                cell(px + ivec2(-i,0)).r == 1. ||\n                cell(px + ivec2(0,-i)).r == 1.) {\n                  //col.b = float(i)/float(n);\n                  break;              \n            }\n        \n            if (cell(px + ivec2(i,0)).g == 0. ||\n                cell(px + ivec2(0,i)).g == 0. ||\n                cell(px + ivec2(-i,0)).g == 0. ||\n                cell(px + ivec2(0,-i)).g == 0.) {\n                    col.g = 0.;\n            }\n        }\n    }\n    else if (frame < 21) { \n        vec3 b = cell(px - ivec2(0,1));\n        vec3 t = cell(px + ivec2(0,1));\n        vec3 l = cell(px - ivec2(1,0));\n        vec3 r = cell(px + ivec2(1,0));\n \n        float gsum = b.g + t.g + l.g + r.g;\n        \n        if (col.r == 1.) {\n            col.g = 1.;\n            col.r = 0.;\n        }\n       \n        if (col.r == 0. && col.g == 1.&& gsum != 4.) {\n            //col.g = 0.;\n            col.b = 1.;\n        }\n        \n       \n    } \n    else if (frame < 22) {\n        vec3 b = cell(px - ivec2(0,1));\n        vec3 t = cell(px + ivec2(0,1));\n        vec3 l = cell(px - ivec2(1,0));\n        vec3 r = cell(px + ivec2(1,0));\n        \n        float bsum = b.b + t.b + l.b + r.b;\n      \n        if (col.g == 1. && col.b == 0. && bsum > 0.) {\n            col.r = 1.;\n           // col.b = 0.;\n        }\n    }\n    else if (frame < 23) {\n        vec2 res = floor(0.5 * iResolution.xy);\n        if (abs(f.x-res.x) < 1. && f.y <= res.y && col.r == 1.)\n            col.r = 2.;\n    }\n    else if (frame < 163) {\n        vec3 v = vec3(1);\n        float mx = max(max(b.r,t.r),max(l.r,r.r));\n        mx = max( mx, max(max(bl.r,tl.r), max(br.r, tr.r)) );\n        if(mx > 1. && col.r == 1.) {\n            col.g = 0.;\n            col.r = mx + 1.;\n        }\n    }\n    else if (frame < 164) {\n        col.a = col.r;\n    }\n    else if (frame < 175) {\n        int n = 20;\n        for (int i = 0; i < n; i++) {\n            float a = max( max(alpha(px + ivec2(i,0)), alpha(px + ivec2(0,i))), \n                           max(alpha(px + ivec2(-i,0)), alpha(px + ivec2(0,-i))) );\n            //a = max( max(cell(px + ivec2(i,0)).b, cell(px + ivec2(0,i)).b), \n             //        max(cell(px + ivec2(-i,0)).b, cell(px + ivec2(0,-i)).b) );\n            \n            if (a > col.a)\n                col.a = a;\n        }\n    }\n   // if (col.rgb == vec3(0))\n    //    col.rgb = vec3(0.5);\n    // */\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3 cell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 ).rgb;\n}\n\nvec3 cell2(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel1, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel1, p, 0 ).rgb;\n}\n\nvoid mainImage( out vec4 col, in vec2 f )\n{\n    ivec2 px = ivec2(f);\n    if (frame == 0) {\n        col.rgb = cell(px);\n    }\n    else \n        col.rgb = cell2(px);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define frame iFrame % 360",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}