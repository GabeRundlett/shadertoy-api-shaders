{
    "Shader": {
        "info": {
            "date": "1658907196",
            "description": "Whitted Ray Tracing\nNUS course group project",
            "flags": 0,
            "hasliked": 0,
            "id": "ssGBWc",
            "likes": 24,
            "name": "The Amusement Park",
            "published": 3,
            "tags": [
                "raytracing"
            ],
            "usePreview": 0,
            "username": "wcvanvan",
            "viewed": 900
        },
        "renderpass": [
            {
                "code": "//============================================================================\n// Constants.\n//============================================================================\n\nconst float PI = 3.1415926536;\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\n\n// Position the camera.\nvec3 CAM_LOOKAT = vec3( 0.3, 1.1, 0.0 );\nvec3 CAM_UP_VEC = vec3( 0.0, 1.0, 0.0 );\n\n// Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 45.0 * PI / 180.0;\n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n// Constants for the scene objects.\nconst int NUM_LIGHTS = 3;\nconst int NUM_MATERIALS = 10;\nconst int NUM_PLANES = 5;\nconst int NUM_SPHERES = 11;\nconst int NUM_STICKS = 40;\nconst int NUM_ROLLING_BALLS = 30;\n\n// Constants for the spikey\nconst float EDGLEN_SPIKEY = 0.8;\nconst float EDGRAD_SPIKEY = 0.056;\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Stick_t {\n    vec3 vertexA;\n    vec3 vertexB;\n    float radius;\n    int materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.\n};\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that shown in\n// Lecture Topic B08 (Basic Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS {\n//                   I_a * k_a +\n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nSphere_t RollingBalls[NUM_ROLLING_BALLS];\nStick_t Stick[NUM_STICKS];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\n\n//============================================================================\n// Initialize the spikey (star body)\n//============================================================================\nvoid InitSpikey(){\n\n    float size = EDGLEN_SPIKEY;\n\n    // translate direction\n    vec3 transDirec = vec3 (0.0, size * 1.1135 + EDGRAD_SPIKEY, 1.2);\n\n    // Verteces\n\n    vec3 vtx00 = size * vec3( 0.0   , -1.1135,  0.8574) + transDirec;\n    vec3 vtx01 = size * vec3( 0.8090, -1.1135,  0.2629) + transDirec;\n    vec3 vtx02 = size * vec3( 0.5   , -1.1135, -0.6882) + transDirec;\n    vec3 vtx03 = size * vec3(-0.5   , -1.1135, -0.6882) + transDirec;\n    vec3 vtx04 = size * vec3(-0.8090, -1.1135,  0.2629) + transDirec;\n\n    vec3 vtx10 = size * vec3( 0.0   , -0.2629,  1.3764) + transDirec;\n    vec3 vtx11 = size * vec3( 1.3090, -0.2629,  0.4253) + transDirec;\n    vec3 vtx12 = size * vec3( 0.8090, -0.2629, -1.1135) + transDirec;\n    vec3 vtx13 = size * vec3(-0.8090, -0.2629, -1.1135) + transDirec;\n    vec3 vtx14 = size * vec3(-1.3090, -0.2629,  0.4253) + transDirec;\n\n    vec3 vtx20 = size * vec3( 0.0   ,  0.2629, -1.3764) + transDirec;\n    vec3 vtx21 = size * vec3(-1.3090,  0.2629, -0.4253) + transDirec;\n    vec3 vtx22 = size * vec3(-0.8090,  0.2629,  1.1135) + transDirec;\n    vec3 vtx23 = size * vec3( 0.8090,  0.2629,  1.1135) + transDirec;\n    vec3 vtx24 = size * vec3( 1.3090,  0.2629, -0.4253) + transDirec;\n\n    vec3 vtx30 = size * vec3( 0.0   ,  1.1135, -0.8574) + transDirec;\n    vec3 vtx31 = size * vec3(-0.8090,  1.1135, -0.2629) + transDirec;\n    vec3 vtx32 = size * vec3(-0.5   ,  1.1135,  0.6882) + transDirec;\n    vec3 vtx33 = size * vec3( 0.5   ,  1.1135,  0.6882) + transDirec;\n    vec3 vtx34 = size * vec3( 0.8090,  1.1135, -0.2629) + transDirec;\n\n    // edges (sticks)\n    vec3 a; vec3 b; vec3 c; vec3 d;\n    for (int i = 0; i < NUM_STICKS; i++){\n        Stick[i].radius = EDGRAD_SPIKEY;\n    }\n\n    // pyrimid0: 00 12 21 33\n    a = vtx00; b = vtx12; c = vtx21; d = vtx33;\n    Stick[ 0].vertexA = a; Stick[ 0].vertexB = b; Stick[ 0].materialID = 3;\n    Stick[ 1].vertexA = a; Stick[ 1].vertexB = c; Stick[ 1].materialID = 3;\n    Stick[ 2].vertexA = a; Stick[ 2].vertexB = d; Stick[ 2].materialID = 3;\n    Stick[ 3].vertexA = b; Stick[ 3].vertexB = c; Stick[ 3].materialID = 3;\n    Stick[ 4].vertexA = b; Stick[ 4].vertexB = d; Stick[ 4].materialID = 3;\n    Stick[ 5].vertexA = c; Stick[ 5].vertexB = d; Stick[ 5].materialID = 3;\n\n    // pyrimid1: 01 13 22 34\n    a = vtx01; b = vtx13; c = vtx22; d = vtx34;\n    Stick[ 6].vertexA = a; Stick[ 6].vertexB = b; Stick[ 6].materialID = 4;\n    Stick[ 7].vertexA = a; Stick[ 7].vertexB = c; Stick[ 7].materialID = 4;\n    Stick[ 8].vertexA = a; Stick[ 8].vertexB = d; Stick[ 8].materialID = 4;\n    Stick[ 9].vertexA = b; Stick[ 9].vertexB = c; Stick[ 9].materialID = 4;\n    Stick[10].vertexA = b; Stick[10].vertexB = d; Stick[10].materialID = 4;\n    Stick[11].vertexA = c; Stick[11].vertexB = d; Stick[11].materialID = 4;\n\n    // pyrimid2: 02 14 23 30\n    a = vtx02; b = vtx14; c = vtx23; d = vtx30;\n    Stick[12].vertexA = a; Stick[12].vertexB = b; Stick[12].materialID = 5;\n    Stick[13].vertexA = a; Stick[13].vertexB = c; Stick[13].materialID = 5;\n    Stick[14].vertexA = a; Stick[14].vertexB = d; Stick[14].materialID = 5;\n    Stick[15].vertexA = b; Stick[15].vertexB = c; Stick[15].materialID = 5;\n    Stick[16].vertexA = b; Stick[16].vertexB = d; Stick[16].materialID = 5;\n    Stick[17].vertexA = c; Stick[17].vertexB = d; Stick[17].materialID = 5;\n\n    // pyrimid3: 03 10 24 31\n    a = vtx03; b = vtx10; c = vtx24; d = vtx31;\n    Stick[18].vertexA = a; Stick[18].vertexB = b; Stick[18].materialID = 6;\n    Stick[19].vertexA = a; Stick[19].vertexB = c; Stick[19].materialID = 6;\n    Stick[20].vertexA = a; Stick[20].vertexB = d; Stick[20].materialID = 6;\n    Stick[21].vertexA = b; Stick[21].vertexB = c; Stick[21].materialID = 6;\n    Stick[22].vertexA = b; Stick[22].vertexB = d; Stick[22].materialID = 6;\n    Stick[23].vertexA = c; Stick[23].vertexB = d; Stick[23].materialID = 6;\n\n    // pyrimid4: 04 11 20 32\n    a = vtx04; b = vtx11; c = vtx20; d = vtx32;\n    Stick[24].vertexA = a; Stick[24].vertexB = b; Stick[24].materialID = 7;\n    Stick[25].vertexA = a; Stick[25].vertexB = c; Stick[25].materialID = 7;\n    Stick[26].vertexA = a; Stick[26].vertexB = d; Stick[26].materialID = 7;\n    Stick[27].vertexA = b; Stick[27].vertexB = c; Stick[27].materialID = 7;\n    Stick[28].vertexA = b; Stick[28].vertexB = d; Stick[28].materialID = 7;\n    Stick[29].vertexA = c; Stick[29].vertexB = d; Stick[29].materialID = 7;\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Initialize the rolling pyrimid and the pink stick.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitBSModels(){\n    // size\n    float size = 0.55;\n    float ballRad = 0.1;\n\n    // translate direction\n    vec3 transDirec = vec3(1.5, ballRad, -0.1);\n\n    for (int i = 0; i < NUM_SPHERES; i++){\n        Sphere[i].radius = ballRad;\n        Sphere[i].materialID = 0;\n    }\n\n    Sphere[0].center = size * vec3(0.0, sqrt(6.0), 0.0) + transDirec;\n    Sphere[1].center = size * vec3(cos(iTime)         , 0.0, sin(iTime)         ) + transDirec;\n    Sphere[2].center = size * vec3(cos(iTime+PI*0.667), 0.0, sin(iTime+PI*0.667)) + transDirec;\n    Sphere[3].center = size * vec3(cos(iTime+PI*1.333), 0.0, sin(iTime+PI*1.333)) + transDirec;\n\n    Stick[30].vertexA = Sphere[0].center; Stick[30].vertexB = Sphere[1].center;\n    Stick[31].vertexA = Sphere[0].center; Stick[31].vertexB = Sphere[2].center;\n    Stick[32].vertexA = Sphere[0].center; Stick[32].vertexB = Sphere[3].center;\n    Stick[33].vertexA = Sphere[1].center; Stick[33].vertexB = Sphere[2].center;\n    Stick[34].vertexA = Sphere[1].center; Stick[34].vertexB = Sphere[3].center;\n    Stick[35].vertexA = Sphere[2].center; Stick[35].vertexB = Sphere[3].center;\n\n    Stick[30].radius = ballRad / 2.5; Stick[30].materialID = 1;\n    Stick[31].radius = ballRad / 2.5; Stick[31].materialID = 1;\n    Stick[32].radius = ballRad / 2.5; Stick[32].materialID = 1;\n    Stick[33].radius = ballRad / 2.5; Stick[33].materialID = 1;\n    Stick[34].radius = ballRad / 2.5; Stick[34].materialID = 1;\n    Stick[35].radius = ballRad / 2.5; Stick[35].materialID = 1;\n\n    ballRad = 0.14;\n    Sphere[4].center = vec3(-0.7, ballRad, 2.2);\n    Sphere[5].center = vec3( 0.5, ballRad, 2.5);\n    Sphere[4].radius = ballRad; Sphere[4].materialID = 0;\n    Sphere[5].radius = ballRad; Sphere[5].materialID = 0;\n    Stick[36].vertexA = Sphere[4].center; Stick[36].vertexB = Sphere[5].center;\n    Stick[36].radius = ballRad / 2.5; Stick[36].materialID = 8;\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// the balls are rolling in a heart-shaped trajectory\n/////////////////////////////////////////////////////////////////////////////\nvoid InitRollingBalls() {\n\n    // translate direction\n    vec3 transDirec = vec3(1.0, -0.1, 0.8);\n\n    for (int i = 0; i < NUM_ROLLING_BALLS; i++)\n    {\n        float sizeOfHeart = 1.42;\n        float zPos = -2.0;\n        float yOffset = sizeOfHeart + 1.0;\n\n        RollingBalls[i].center.x = sizeOfHeart * sin( float(100 * i + 1) * iTime);\n\n        float x = RollingBalls[i].center.x;\n        if (cos(float(100 * i + 1) * iTime) > 0.0)\n        {\n            RollingBalls[i].center.y = sqrt(sizeOfHeart * abs(x) - pow(x, 2.0)) + yOffset;\n        } else {\n            RollingBalls[i].center.y = (-sizeOfHeart - 0.5) * sqrt(sqrt(sizeOfHeart) - sqrt(abs(x))) + yOffset;\n        }\n        RollingBalls[i].center.z = zPos;\n\n        RollingBalls[i].center += transDirec;\n        RollingBalls[i].radius = 0.1;\n        RollingBalls[i].materialID = 8;\n    }\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 0;\n\n    // Vertical plane.\n    Plane[1].A = 0.0;\n    Plane[1].B = 0.0;\n    Plane[1].C = 1.0;\n    Plane[1].D = 3.5;\n    Plane[1].materialID = 0;\n\n    Plane[2].A = 0.0;\n    Plane[2].B = 1.0;\n    Plane[2].C = 0.0;\n    Plane[2].D = 10.0;\n    Plane[2].materialID = 9;\n\n    Plane[3].A = 1.0;\n    Plane[3].B = 0.0;\n    Plane[3].C = 0.0;\n    Plane[3].D = -10.0;\n    Plane[3].materialID = 0;\n\n    Plane[4].A = 1.0;\n    Plane[4].B = 0.0;\n    Plane[4].C = 0.0;\n    Plane[4].D = 10.0;\n    Plane[4].materialID = 9;\n\n    // Spikey.\n    InitSpikey();\n\n    // Box.\n    InitBSModels();\n\n    // Rolling Balls.\n    InitRollingBalls();\n\n    // Spheres.\n    // rolling sphere\n    Sphere[6].center = vec3( -2.0 - sin(1.3*iTime), 0.3, 0.5 + 1.2 * cos(1.3*iTime) );\n    Sphere[6].radius = 0.24;\n    Sphere[6].materialID = 3;\n\n    // back sphere\n    Sphere[7].center = vec3( 0.2, 0.5, -1.0 );\n    Sphere[7].radius = 0.5;\n    Sphere[7].materialID = 2;\n\n    // frount sphere\n    Sphere[8].center = vec3( 1.45, 0.25, 1.55 );\n    Sphere[8].radius = 0.25;\n    Sphere[8].materialID = 4;\n\n    // slipping sphere\n    Sphere[9].center = vec3( abs(sin(2.0*iTime))+2.1, 0.15, 0.2*abs(sin(2.0*iTime))+0.5);\n    Sphere[9].radius = 0.15;\n    Sphere[9].materialID = 0;\n\n    // jumpping sphere\n    Sphere[10].center = vec3( -2.0, 2.0*abs(sin(2.0*iTime))+0.15, 0.5 );\n    Sphere[10].radius = 0.15;\n    Sphere[10].materialID = 5;\n\n    // Balls - Silver material.\n    Material[0].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    // Balls - Azure material.\n    Material[1].k_d = vec3( 63.0, 95.0, 132.0 ) / 255.0;\n    Material[1].k_a = 0.2 * Material[1].k_d;\n    Material[1].k_r = 2.0 * Material[1].k_d;\n    Material[1].k_rg = 0.5 * Material[1].k_r;\n    Material[1].n = 64.0;\n\n    // Balls - White material.\n    Material[2].k_d = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_a = 0.2 * Material[2].k_d;\n    Material[2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.5 * Material[2].k_r;\n    Material[2].n = 128.0;\n\n    // Spikey - yellow.\n    Material[3].k_d = vec3( 255.0, 221.0, 169.0 )/255.0;\n    Material[3].k_a =  0.2 * Material[3].k_d;\n    Material[3].k_r =  2.0 * Material[3].k_d;\n    Material[3].k_rg = 0.5 * Material[3].k_r;\n    Material[3].n = 128.0;\n\n    // Spikey - blue.\n    Material[4].k_d = vec3( 207.0, 231.0, 245.0 )/255.0;\n    Material[4].k_a =  0.2 * Material[4].k_d;\n    Material[4].k_r =  2.0 * Material[4].k_d;\n    Material[4].k_rg = 0.5 * Material[4].k_r;\n    Material[4].n = 128.0;\n\n    // Spikey - violet.\n    Material[5].k_d = vec3( 201.0, 175.0, 195.0 )/255.0;\n    Material[5].k_a =  0.2 * Material[5].k_d;\n    Material[5].k_r =  2.0 * Material[5].k_d;\n    Material[5].k_rg = 0.5 * Material[5].k_r;\n    Material[5].n = 128.0;\n\n    // Spikey - crimson.\n    Material[6].k_d = vec3( 161.0, 72.0, 66.0 )/255.0;\n    Material[6].k_a =  0.2 * Material[6].k_d;\n    Material[6].k_r =  2.0 * Material[6].k_d;\n    Material[6].k_rg = 0.5 * Material[6].k_r;\n    Material[6].n = 128.0;\n\n    // Spikey - purple.\n    Material[7].k_d = vec3( 104.0, 84.0, 141.0 )/255.0;\n    Material[7].k_a =  0.2 * Material[7].k_d;\n    Material[7].k_r =  2.0 * Material[7].k_d;\n    Material[7].k_rg = 0.5 * Material[7].k_r;\n    Material[7].n = 128.0;\n\n    // Rolling Balls - red.\n    Material[8].k_d = vec3( 244.0, 128.0, 135.0) / 255.0;\n    Material[8].k_a =  0.2 * Material[8].k_d;\n    Material[8].k_r =  2.0 * Material[8].k_d;\n    Material[8].k_rg = 0.5 * Material[8].k_r;\n    Material[8].n = 128.0;\n\n    // Walls - white.\n    Material[9].k_d = vec3( 200.0,200.0, 200.0) / 255.0;\n    Material[9].k_a =  0.2 * Material[9].k_d;\n    Material[9].k_r =  vec3(0.0);;\n    Material[9].k_rg = vec3(0.0);\n    Material[9].n = 128.0;\n\n\n    // Lighting Coeffecient\n    float lightCoeff = 1.0 / 12.5;\n\n    // Light 1.\n    Light[0].position = vec3(2.0*cos(1.1*iTime)+0.5, 8.0, 2.0*sin(1.1*iTime)+2.0) * 1.2;\n    Light[0].I_a      = vec3(7.0, 1.0, 4.0) * lightCoeff;\n    Light[0].I_source = vec3(7.0, 1.0, 4.0) * lightCoeff;\n\n    // Light 2.\n    Light[1].position = vec3(2.0*cos(1.1*iTime+PI*0.667)+0.5, 8.0, 2.0*sin(1.1*iTime+PI*0.667)+2.0) * 1.2;\n    Light[1].I_a      = vec3(1.0, 4.0, 7.0) * lightCoeff;\n    Light[1].I_source = vec3(1.0, 4.0, 7.0) * lightCoeff;\n\n    // Light 3.\n    Light[2].position = vec3(2.0*cos(1.1*iTime+PI*1.333)+0.5, 8.0, 2.0*sin(1.1*iTime+PI*1.333)+2.0) * 1.2;\n    Light[2].I_a      = vec3(4.0, 7.0, 1.0) * lightCoeff;\n    Light[2].I_source = vec3(4.0, 7.0, 1.0) * lightCoeff;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection\n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n\n    vec3  v = ray.o - sph.center;\n    float b = dot(ray.d, v);\n    float c = dot(v, v) - sph.radius*sph.radius;\n    float d = b*b - c;\n    if (d > 0.0){\n        d = sqrt(d);\n        t = -b-d;\n        if (t >= tmin && t <= tmax) {\n            hitPos = ray.o + t * ray.d;\n            hitNormal = normalize( hitPos-sph.center );\n            return true;\n        }\n        t = -b + d;\n        if (t >= tmin && t <= tmax) {\n            hitPos = ray.o + t * ray.d;\n            hitNormal = normalize( hitPos-sph.center );\n            return true;\n        }\n    }\n    return false;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n\n    vec3  v = ray.o - sph.center;\n    float b = dot(ray.d, v);\n    float c = dot(v, v) - sph.radius*sph.radius;\n    float d = b*b - c;\n    if (d > 0.0){\n        d = sqrt(d);\n        float t = -b - d;\n        if (t >= tmin && t <= tmax) return true;\n\n        t = -b + d;\n        if (t >= tmin && t <= tmax) return true;\n    }\n    return false;\n\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a stick and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\n\n// copied from https://www.shadertoy.com/view/Xt3SzX\nfloat capIntersect( in vec3 ro, in vec3 rd, in vec3 pa, in vec3 pb, in float r )\n{\n    vec3  ba = pb - pa;\n    vec3  oa = ro - pa;\n\n    float baba = dot(ba,ba);\n    float bard = dot(ba,rd);\n    float baoa = dot(ba,oa);\n    float rdoa = dot(rd,oa);\n    float oaoa = dot(oa,oa);\n\n    float a = baba      - bard*bard;\n    float b = baba*rdoa - baoa*bard;\n    float c = baba*oaoa - baoa*baoa - r*r*baba;\n    float h = b*b - a*c;\n    if( h>=0.0 )\n    {\n        float t = (-b-sqrt(h))/a;\n        float y = baoa + t*bard;\n        // body\n        if( y>0.0 && y<baba ) return t;\n        // caps\n        vec3 oc = (y<=0.0) ? oa : ro - pb;\n        b = dot(rd,oc);\n        c = dot(oc,oc) - r*r;\n        h = b*b - c;\n        if( h>0.0 ) return -b - sqrt(h);\n    }\n    return -1.0;\n}\n\nvec3 capNormal( in vec3 pos, in vec3 a, in vec3 b, in float r )\n{\n    vec3  ba = b - a;\n    vec3  pa = pos - a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);\n    return (pa - h*ba)/r;\n}\n\nbool IntersectStick( in Stick_t stk, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    t = capIntersect( ray.o, ray.d, stk.vertexA, stk.vertexB, stk.radius );\n\n    if (t >= 0.0 && t <= tmax){\n        hitPos = ray.o + t * ray.d;\n        hitNormal = capNormal(hitPos, stk.vertexA, stk.vertexB, stk.radius);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a stick and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectStick( in Stick_t stk, in Ray_t ray, in float tmin, in float tmax)\n{\n    float t = capIntersect( ray.o, ray.d, stk.vertexA, stk.vertexB, stk.radius );\n    if (t >= 0.0 && t >= tmin && t <= tmax){\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a +\n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray,\n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg )\n{\n    // Find whether and where the ray hits some object.\n    // Take the nearest hit point.\n\n    bool hasHitSth = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    for (int i = 0; i < NUM_PLANES; i++){\n        if (IntersectPlane(Plane[i], ray,DEFAULT_TMIN,nearest_t,temp_t,temp_hitPos,temp_hitNormal)){\n            hasHitSth = true;\n            nearest_t = temp_t;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitMatID = Plane[i].materialID;\n        }\n    }\n    for (int i = 0; i < NUM_SPHERES; i++){\n        if (IntersectSphere(Sphere[i], ray,DEFAULT_TMIN,nearest_t,temp_t,temp_hitPos,temp_hitNormal)){\n            hasHitSth = true;\n            nearest_t = temp_t;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitMatID = Sphere[i].materialID;\n        }\n    }\n    for (int i = 0; i < NUM_STICKS; i++){\n        if (IntersectStick(Stick[i], ray, DEFAULT_TMIN,nearest_t,temp_t,temp_hitPos,temp_hitNormal)){\n            hasHitSth = true;\n            nearest_t = temp_t;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitMatID = Stick[i].materialID;\n        }\n    }\n    for (int i = 0; i < NUM_ROLLING_BALLS; i++){\n        if (IntersectSphere(RollingBalls[i], ray, DEFAULT_TMIN,nearest_t,temp_t,temp_hitPos,temp_hitNormal)){\n            hasHitSth = true;\n            nearest_t = temp_t;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitMatID = RollingBalls[i].materialID;\n        }\n    }\n    \n    // One of the output results.\n    hasHit = hasHitSth;\n    if ( !hasHitSth ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n\n    for (int i = 0; i < NUM_LIGHTS; i++){\n        Light_t light = Light[i];\n        Ray_t shadowRay;\n        shadowRay.o = nearest_hitPos;\n        shadowRay.d = normalize(light.position - nearest_hitPos);\n        float maxTime = (light.position - nearest_hitPos).x / shadowRay.d.x;\n        hasHitSth = false;\n\n        if (dot(shadowRay.d, nearest_hitNormal) > 0.0){\n            if (!hasHitSth){\n                for (int i = 0; i < NUM_PLANES; i++){\n                    hasHitSth = IntersectPlane(Plane[i], shadowRay, DEFAULT_TMIN, maxTime);\n                    if (hasHitSth){ break; }\n                }\n            }\n            if (!hasHitSth){\n                for (int i = 0; i < NUM_SPHERES; i++){\n                    hasHitSth = IntersectSphere(Sphere[i], shadowRay, DEFAULT_TMIN, maxTime);\n                    if (hasHitSth){ break; }\n                }\n            }\n            if (!hasHitSth){\n                for (int i = 0; i < NUM_STICKS; i++){\n                    hasHitSth = IntersectStick(Stick[i], shadowRay, DEFAULT_TMIN, maxTime);\n                    if (hasHitSth){ break; }\n                }\n            }\n            if (!hasHitSth){\n                for (int i = 0; i < NUM_ROLLING_BALLS; i++){\n                    hasHitSth = IntersectSphere(RollingBalls[i], shadowRay, DEFAULT_TMIN, maxTime);\n                    if (hasHitSth){ break; }\n                }\n            }\n        }\n        I_local += PhongLighting(normalize(light.position - nearest_hitPos), normalize(nearest_hitNormal), normalize(ray.o - nearest_hitPos), hasHitSth, Material[nearest_hitMatID], light);\n\n    }\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    vec4 initCamPos = vec4( -1.0, 1.1, 5.0, 1.0 );\n    float rotateRadian = -60.0 * abs(sin(0.1 * iTime-5.25)) * PI / 180.0;\n    mat4 rotateMat = mat4(\n                        vec4(cos(rotateRadian), 0.0, -sin(rotateRadian), 0.0),\n                        vec4(0.0, 1.0, 0.0, 0.0),\n                        vec4(sin(rotateRadian), 0.0, cos(rotateRadian), 0.0),\n                        vec4(0.0, 0.0, 0.0, 1.0)\n                        );\n\n    vec3 CAM_POS    = (initCamPos * rotateMat).xyz + vec3(0.0, 0.0, 0.5);\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( CAM_POS - CAM_LOOKAT );\n    vec3 cam_x_axis = normalize( cross(CAM_UP_VEC, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = CAM_POS;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ )\n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}