{
    "Shader": {
        "info": {
            "date": "1607696452",
            "description": "Change the mouse over the screen to move the light source to cast rays on different parts of the 2D objects.\nYou may add more objects to the scene.\nChange the parameters of the objects as you wish.",
            "flags": 0,
            "hasliked": 0,
            "id": "3syBzd",
            "likes": 3,
            "name": "2D ray casting with ray marching",
            "published": 3,
            "tags": [
                "2d",
                "raymarching",
                "raycasting",
                "shadow",
                "light",
                "circle",
                "rectangle",
                "generativeart"
            ],
            "usePreview": 0,
            "username": "AI",
            "viewed": 812
        },
        "renderpass": [
            {
                "code": "#define MAXSTEPS 100\n#define MAXDIST 150.\n#define MINDIST 0.01\n\n//a circle\nfloat dist2circle( in vec2 p,in vec2 center,in float radius ) \n{\n    return length(p-center)-radius;\n}\n\n//a line segment\nfloat lineSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n//a rectangle\nfloat dis2box( in vec2 p, in vec2 center, in vec2 r )\n{\n    vec2 d = abs(p-center)-r;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n//define objects by distance function\nfloat getDist(vec2 p){\n\n\tfloat d=dist2circle(p,vec2(.55,.3),.12);\n    float d2=dist2circle(p,vec2(.5,.9),.1);\n    d=min(d,d2);    \n    d2=dist2circle(p,vec2(.15,.5),.1);\n    d=min(d,d2);    \n    d2=dis2box(p,vec2(0.8,.6),vec2(.1,.07));\n    d=min(d,d2);    \n\td2=dis2box(p,vec2(0.2,.12),vec2(.1,.07));\n    d=min(d,d2);  \n\treturn d;\n\n}\n//2D ray marching\nfloat rayMarch2D(vec2 ro,vec2 rd)\n{\n\t float dO=0.;\n     for(int i=0;i<MAXSTEPS;++i){\n      vec2 p=ro+rd*dO;\n      float ds=getDist(p);\n      dO+=ds;\n      if (ds<MINDIST || ds>MAXDIST) break;\n      }\n return  dO;   \n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv =fragCoord/iResolution.xy;\n    vec3 color=vec3(0.);\n    float line;\n    float radius=.01;\n    float d; \n\tvec2 ro=vec2(0.,.0)+iMouse.xy/iResolution.xy;\n    vec2 rd=normalize(uv-ro);\n    float dis=rayMarch2D(ro,rd);\n    vec2 point=ro+rd*dis;\n    d=dist2circle(uv,point,radius);\n    d=1.-smoothstep(0.0,0.005,d);\n    d+=.5-.5*smoothstep(0.,0.01,dist2circle(uv,vec2(.55,.3),.12));\n    d+=.5-.5*smoothstep(0.,0.01,dist2circle(uv,vec2(.5,.9),.1));\n    d+=.5-.5*smoothstep(0.,0.01,dist2circle(uv,vec2(.15,.5),.1));\n\td+=.5-.5*smoothstep(0.,0.01,dis2box(uv,vec2(.8,.6),vec2(.1,.07)));\n  \td+=.5-.5*smoothstep(0.,0.01,dis2box(uv,vec2(.2,.12),vec2(.1,.07)));;\n\n    //---draw ray from ro to point\n    line=1.-smoothstep(0.,0.001,lineSegment(uv,ro,point));\n    float light=1.-smoothstep(0.,0.1,dist2circle(uv,ro,.02));\n    color=vec3(clamp(d+line,0.,1.),line,light);\n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}