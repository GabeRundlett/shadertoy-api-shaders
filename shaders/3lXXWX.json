{
    "Shader": {
        "info": {
            "date": "1564418441",
            "description": "[url=https://youtu.be/XYrRWPAB_o4]Youtube Render[/url]\n[url=https://soundcloud.com/bigmamashouse/rave-sickness-oropendola-stig ]Music on Soundcloud[/url]\n[url=https://www.shadertoy.com/view/XsSfWm ]Previous Shader[/url]",
            "flags": 96,
            "hasliked": 0,
            "id": "3lXXWX",
            "likes": 114,
            "name": "Rave Sickness - Oropendola VIZU",
            "published": 3,
            "tags": [
                "triangle",
                "music",
                "conway",
                "clip",
                "track",
                "pinwheel",
                "vizu",
                "musicclip",
                "musicclip"
            ],
            "usePreview": 0,
            "username": "ttoinou",
            "viewed": 5792
        },
        "renderpass": [
            {
                "code": "// Fork of \"Pinwheel Vizu\" by ttoinou. https://shadertoy.com/view/XsBfDm\n// 2019-07-09 14:03:16\n\n#define dx iMouse.x/iResolution.x\n#define dy iMouse.y/iResolution.y\n\n#define PI (3.14159265359)\n#define TWOPI (3.14159265359*2.0)\n\n#define sound iChannel0\n#define to01(x) clamp(x,0.0,1.0)\n\nvec4 fft(float freq,float time){\n    return texture(sound,vec2(freq,time));\n}\n\n\nfloat repeat(float x,float y){\n    x = mod(x,2.0*y);\n    if( x > y ){\n        x = 2.0*y - x;\n    }\n    //return x;\n    return mod(x+y,y);\n}\n\n// segment.x is distance to closest point\n// segment.y is barycentric coefficient for closest point\n// segment.z is length of closest point on curve, on the curve, starting from A\n// segment.a is approximate length of curve\nvec4 segment( vec2 p, vec2 a, vec2 b )\n{\n  a -= p;\n  b -= p;\n  vec3 k = vec3( dot(a,a) , dot(b,b) , dot(a,b) );\n  float t = (k.x - k.z)/( k.x + k.y - 2.*k.z );\n  float len = length(b-a);\n    \n  t = clamp(t,0.0,1.0);\n  return vec4( length(a*(1.-t) + b*t) , t , t*len , len );\n}\n\n// https://www.shadertoy.com/view/4djSRW\n#define ITERATIONS 4\n\n\n// *** Change these to suit your range of random numbers..\n\n// *** Use this for integer stepped ranges, ie Value-Noise/Perlin noise functions.\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)\n//----------------------------------------------------------------------------------------\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvec3 hash3point(vec2 p)\n{\n    //vec3 col = hash32(p);\n    vec3 col = \n            hash32(p*1.25672+vec2(.2,.8))\n          * hash32(vec2(p.y,p.x)/3.42464-vec2(.5,.0))\n          - hash32(vec2(3.0+p.y,1.2))\n    ;\n    \n    return pow(\n        (abs(col)+max(col,0.0))/2.0\n        , vec3(.6,.5,.4)\n    );\n}\n\nfloat smoothFunction(float k)\n{\n    return 1.0 / ( 1.0 + k*k );\n}\n\nvec3 smoothFunction(vec3 k)\n{\n    return 1.0 / ( 1.0 + k*k );\n}\n\n\nfloat coeffDistPoint(vec2 uv,vec2 colPoint,float scale)\n{    \n    //float dist = length(uv - colPoint) * scale;\n    //dist = pow(dist,0.25);\n    //dist = 1.0 - smoothstep(0.0,1.0,dist);\n    \n    vec2 uv_ = (uv - colPoint)*scale*24.0;\n    float dist = dot(uv_,uv_);\n    return  1.0 / ( 1.0 + dist );\n}\n\n\nvec3 mixColorLine(vec2 uv,vec3 currentCol,vec3 colLine,vec2 lineA,vec2 lineB,float scale)\n{\n    return mix(\n        currentCol , \n        colLine ,\n        1.0 - smoothstep(0.0,1.0,(sqrt(       max(segment(uv,lineA,lineB).x * scale , .0)     )))\n    );\n}\n\n// pointA and pointB are on the same side of the half plane delimited by line (lineA,lineB)\nbool pointsOnSameSideOfLine(vec2 pointA,vec2 pointB,vec2 lineA, vec2 lineB)\n{\n    vec2 n = lineB - lineA;\n    n = vec2(n.y,-n.x);\n    return  dot(pointA-lineA,n)\n          * dot(pointB-lineA,n)\n    > 0.0;\n}\n\n\nfloat viewportMagnify = 2.0;\nvec2 screenToViewport(vec2 uv)\n{\n    return (uv - iResolution.xy/2.0 ) / min(iResolution.x,iResolution.y) * viewportMagnify;\n}\n\nvec2 viewportToScreen(vec2 uv,vec2 base)\n{\n    return (uv - base/4.0) / viewportMagnify * min(iResolution.x,iResolution.y) +  iResolution.xy/2.0;\n    //return (uv - iResolution.xy/2.0 ) / min(iResolution.x,iResolution.y) * viewportMagnify;\n} \n\nfloat det22(vec2 a,vec2 b)\n{\n    return a.x*b.y - a.y*b.x;\n}\n\nstruct Pinwheel\n{\n    vec2 A; // Right angle, divided into 1 acute and 1 obtuse\n    vec2 B; // Acute angle, stays acute\n    vec2 C; // Obtuse angle, stays obtuse\n    \n    vec2 D; // on GA\n    vec2 E; // on AB\n    vec2 F; // on BC, close to B\n    vec2 G; // on BC, close to C\n};\n   \nvec3 barycentricCoordinate(vec2 P,Pinwheel T)\n{\n    vec2 PA = P - T.A;\n    vec2 PB = P - T.B;\n    vec2 PC = P - T.C;\n    \n    vec3 r = vec3(\n        det22(PB,PC),\n        det22(PC,PA),\n        det22(PA,PB)\n    );\n    \n    return r / (r.x + r.y + r.z);\n}\n\n    \n#define EQUERRE_COPY(T,Q) \\\n    T.A = Q.A; \\\n    T.B = Q.B; \\\n    T.C = Q.C;\n    \n#define EQUERRE_COMPUTE_DEFG(T) \\\n\tT.E = (T.A + T.B)/2.0; \\\n\tT.F = (3.0 * T.B + 2.0 * T.C)/5.0; \\\n\tT.G = (T.B + 4.0 * T.C)/5.0; \\\n\tT.D = (T.G + T.A)/2.0;\n    \n#define EQUERRE_GET1(T,Q) \\\n\tT.A = Q.F; \\\n    T.B = Q.B; \\\n    T.C = Q.E;\n\n#define EQUERRE_GET2(T,Q) \\\n\tT.A = Q.F; \\\n    T.B = Q.G; \\\n    T.C = Q.E;\n\n#define EQUERRE_GET3(T,Q) \\\n\tT.A = Q.D; \\\n    T.B = Q.E; \\\n    T.C = Q.G;\n\n#define EQUERRE_GET4(T,Q) \\\n\tT.A = Q.D; \\\n    T.B = Q.E; \\\n    T.C = Q.A;\n\n#define EQUERRE_GET5(T,Q) \\\n\tT.A = Q.G; \\\n    T.B = Q.A; \\\n    T.C = Q.C;\n\n#define EQUERRE_COND_12_345(X,T) \\\n\tpointsOnSameSideOfLine(uv,T.F,T.E,T.G)\n \n#define EQUERRE_COND_1_2(X,T) \\\n\tpointsOnSameSideOfLine(uv,T.B,T.E,T.F)\n\n#define EQUERRE_COND_34_5(X,T) \\\n\tpointsOnSameSideOfLine(uv,T.E,T.A,T.G)\n        \n#define EQUERRE_COND_3_4(X,T) \\\n\tpointsOnSameSideOfLine(uv,T.G,T.E,T.D)\n        \n#define EQUERRE_CENTER(T) ((T.A+T.B+T.C)/3.0)\n        \n\nvoid mainImage2( out vec4 fragColor, in vec2 uv )\n{\n    float tWholeMusic = iTime/378.;\n    fragColor = vec4(1.0);\n    \n    int nbIterations = 6;\n    vec2 base = vec2(2.0,1.0);\n    \n    \n    \n    \n    viewportMagnify = mix(.1,.5,tWholeMusic)/3.2;\n    uv *= viewportMagnify;\n    \n    uv *= mat2(cos(iTime/48.+vec4(0.,1.6,-1.6,0.)));\n    \n    uv += base/3.2;\n    \n    // Base Triangle\n    Pinwheel Tri;\n    Pinwheel Tri_TMP;\n    Tri.A = Tri.B = Tri.C = vec2(0.0);\n    Tri.B.x += base.x;\n    Tri.C.y += base.y;\n    int PinwheelID = 0;\n    \n    for(int i = 0 ; i < nbIterations ; i++)\n    {\n        PinwheelID *= 5;\n        EQUERRE_COMPUTE_DEFG(Tri);\n        \n        if( EQUERRE_COND_12_345(uv,Tri) )\n        {\n            if( EQUERRE_COND_1_2(uv,Tri) )\n            {\n            \tEQUERRE_GET1(Tri_TMP,Tri);\n            }\n            else\n            {\n            \tEQUERRE_GET2(Tri_TMP,Tri);\n                PinwheelID += 1;\n            }\n        }\n        else if( EQUERRE_COND_34_5(uv,Tri) )\n        {\n            if( EQUERRE_COND_3_4(uv,Tri) )\n            {\n            \tEQUERRE_GET3(Tri_TMP,Tri);\n                PinwheelID += 2;\n            }\n            else\n            {\n            \tEQUERRE_GET4(Tri_TMP,Tri);\n                PinwheelID += 3;\n            }\n        }\n        else \n        {\n            EQUERRE_GET5(Tri_TMP,Tri);\n            PinwheelID += 4;\n        }\n        \n        EQUERRE_COPY(Tri,Tri_TMP);\n    }\n    \n    \n    //fragColor.rgb = hash3point(EQUERRE_CENTER(Tri));\n    vec3 v = cos(\n             iTime/vec3(63.,54.,69.)/float(nbIterations)/1.2\n              + vec3(.0,.95,1.22)\n             )\n             * vec3(36.,34.,31.)\n             + vec3(25.,19.,42.);\n    vec3 s = vec3( cos(iTime/1.425)*.5+.5 ,dx,dy);\n    fragColor.rgb = mod(vec3(PinwheelID),v)/(v-1.);\n    fragColor.rgb = mod(fragColor.rgb+s,1.);\n    // interesting variation\n    // but needs tuning in color \n    //fragColor = sqrt( cos(fragColor*3.14*vec4(1.,2.,3.,1.))*.5+.5 );\n    \n\n    \n    float k = 13.;\n    k = mod(float(PinwheelID),k)/(k-1.);\n    \n    \n    float ma = (fft( repeat( k*3. + .32 , 1.) , .0 ).g - .03 )*2.;\n    \n    float ga = fft(.08,.0).r;\n    float gb = fft(.18,.0).r;\n    float gc = fft(.28,.0).r;\n    float gabc =(ga+gb+gc)/3.0;\n    \n    vec4 col = cos( vec4(3.,5.,7.,1.)*k*.75 + iTime*1. + float(PinwheelID)/19. )*.5+.5;\n    // negative sqrt :(((\n    // canot remove it, it looks very good on my computer ! (but undefined behavir on other computers)\n    col *= sqrt( (fft( repeat( k*2. + .05 ,1.) , .0 ).r - .07 ))*4.5+ga*.5;\n    \n    fragColor = mix(\n        fragColor ,\n        col, //vec4(1.)\n        mix(1.5,-1.5,gabc)\n    );\n           \n    float scale = float(nbIterations);\n    scale = pow(2.0,scale)/viewportMagnify/scale*mix(6.,1.,ma*sqrt(ma));\n    \n        \n        \n    vec3 EquerreColor = vec3(0.);\n    #define OPERATION1(x,y) fragColor.rgb = mixColorLine(uv,fragColor.rgb,EquerreColor,x,y,scale);\n    OPERATION1(Tri.A,Tri.B);\n    OPERATION1(Tri.B,Tri.C);\n    OPERATION1(Tri.C,Tri.A);\n    \n    \n    fragColor.rgb = tanh(\n        pow(fragColor.rgb,vec3(mix(1.,2.,tWholeMusic)))\n        *mix(.8,1.5,tWholeMusic)\n        *vec3(1.,.8,.7)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //float tWholeMusic = iTime/378.;\n    \n    // 2.35 PAR preview\n    if( abs(fragCoord.y*2.-iResolution.y) > iResolution.x/2.34 )\n    {\n        //fragColor = vec4(.0);\n        //return;\n    }\n    \n    fragColor.a = 1.;\n    vec4 fgCout = vec4(.0);\n    \n\tvec2 uv = screenToViewport(fragCoord.xy );\n    vec2 newUV;\n    vec3 r = vec3(sqrt(dot(uv,uv)));\n    vec3 newR = r - r*r*r*vec3(\n         .072\n        ,.068 - fft(.8,.0).g*.01\n        ,.064 - fft(.6,.0).g*.01\n    );\n    //+ sin(r*r-1.)*.1 + 0.;\n    \n    \n    //r\n    newUV = normalize(uv)*newR.r;\n    mainImage2( fgCout, newUV );\n    fragColor.r = fgCout.r;\n    \n    //g\n    newUV = normalize(uv)*newR.g;\n    mainImage2( fgCout, newUV );\n    fragColor.g = fgCout.g;\n    \n    //b\n    newUV = normalize(uv)*newR.b;\n    \n    mainImage2( fgCout, newUV );\n    fragColor.b = fgCout.b;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://www.shadertoy.com/view/XtVGDz\n\n#define buffer iChannel0\n#define sound  iChannel1\n#define soundRes iChannelResolution[1]\n#define step 1.0/iResolution.y\n#define inputSound iChannel0\n#define fftWidth \t\t1.0\t\t\n#define fftMinBass \t\t0.00196 \t// 1.0/512.0\n\n#define render 0\n\n// fft Options\n#if render\n\n#define fftSmoothTime   0.08\n#define fftSmooth \t\t1.3\t\t\t// smoothness coeff\n#define fftPreamp\t\t0.65\t\t// pre amp before dynamic\n#define fftBoost  \t\t0.14\t\t// dynamic amp\n#define fftAmp\t\t\t0.65\t\t    // final gain\n#define noiseLevel      0.1\n#define fftTrebles\t\t2.5\n#define fftBass\t\t\t1.0\n\n#else\n\n#define fftSmoothTime   .7\n#define fftSmooth \t\t1.3\t\t\t// smoothness coeff\n#define fftPreamp\t\t0.65\t\t// pre amp before dynamic\n#define fftBoost  \t\t0.14\t\t// dynamic amp\n#define fftAmp\t\t\t0.6\t\t\t// final gain\n#define noiseLevel      0.05\n#define fftTrebles\t\t3.0\n#define fftBass\t\t\t1.6\n\n#endif\n\n#define fftRadiusR\t\t3.0/512.0\n#define fftRadiusG\t\tfftRadiusR*3.0\n#define fftRadiusB\t\tfftRadiusR*3.0*3.0\n#define fftSamplesR \t4 // number of iteration for fft sampling, increases quality !\n#define fftSamplesG \tfftSamplesR*4\n#define fftSamplesB \tfftSamplesR*4*4\n#define fftGBGain       1.1\n\n#define to01(x) clamp(x,0.0,1.0)\n\nfloat remapIntensity(float f, float i){\n  //return i;\n  // noise level\n  i = to01( (i - noiseLevel) / (1.0 - noiseLevel) );\n  float k = f-1.0;\n  i *= ( fftTrebles - fftBass*k*k ) * fftPreamp;\n  // more dynamic\n  i *= (i+fftBoost);\n    \n  return i*fftAmp;\n  // limiter, kills dynamic when too loud\n  //return 1.0 - 1.0 / ( i*4.0 + 1.0 );\n}\n\nfloat remapFreq(float freq){\n // linear scale\n //return clamp(freq,fftMinBass,1.0);\n // log scale\n return clamp(to01(- log(1.0-freq/1.65 + fftMinBass)),fftMinBass,1.0);\n}\n\nfloat fftR(float f){\n    float sum = 0.0;\n    float val = 0.0;\n    float coeff = 0.0;\n    float k = 0.0;\n    for( int i = 0; i < fftSamplesR ; i++ ){\n        k = float(i)/float(fftSamplesR-1)-0.5;\n        coeff = exp(-k*k/(fftSmooth*fftSmooth)*2.0);\n\t\tval += texture(sound, vec2( remapFreq(f + k * fftRadiusR)*fftWidth, 0.0) ).r * coeff;\n        sum += coeff;\n    }\n    return remapIntensity(f,val/sum);\n}\n\nfloat fftG(float f){\n    float sum = 0.0;\n    float val = 0.0;\n    float coeff = 0.0;\n    float k = 0.0;\n    for( int i = 0; i < fftSamplesG ; i++ ){\n        k = float(i)/float(fftSamplesG-1)-0.5;\n        coeff = exp(-k*k/(fftSmooth*fftSmooth)*2.0);\n\t\tval += texture(sound, vec2( remapFreq(f + k * fftRadiusG)*fftWidth, 0.0) ).r * coeff;\n        sum += coeff;\n    }\n    return remapIntensity(f,val/sum)*fftGBGain;\n}\n\nfloat fftB(float f){\n    float sum = 0.0;\n    float val = 0.0;\n    float coeff = 0.0;\n    float k = 0.0;\n    for( int i = 0; i < fftSamplesB ; i++ ){\n        k = float(i)/float(fftSamplesB-1)-0.5;\n        coeff = exp(-k*k/(fftSmooth*fftSmooth)*2.0);\n\t\tval += texture(sound, vec2( remapFreq(f + k * fftRadiusB)*fftWidth, 0.0) ).r * coeff;\n        sum += coeff;\n    }\n    return remapIntensity(f,val/sum)*fftGBGain*fftGBGain;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n   \t// black by default\n    fragColor = vec4(0.0,0.0,0.0,1.0);\n\n     // iFrame == 0 => Reset\n    if( iFrame != 0 ){\n        // store current fft\n        if( fragCoord.y <= 1.0 ){\n            \n            float freq = uv.x;\n            float i1,i2,i3;\n\n            i1 = fftR(freq);\n            i2 = fftG(freq);\n            i3 = fftB(freq);\n\t\n            fragColor.rgb = vec3(i1,i2,i3);\n            fragColor.rgb = mix(texture(buffer,vec2(uv.x,uv.y - step)).rgb,fragColor.rgb,fftSmoothTime);\n\n            #if render\n            //vec3 mean = mix(fragColor.rgb,texture(buffer,vec2(uv.x,uv.y - step)).rgb,fftSmoothTime);\n            \n            /*if( length(mean) > length(fragColor.rgb) ){\n               fragColor.rgb = mean.rgb; \n            }\n            */\n            //fragColor.rgb = max(fragColor.rgb,mean.rgb);\n            #endif\n            //fragColor.rgb = vec3(0.0);\n            fragColor.a = texture(sound,vec2(freq,1.0)).x;\n            \n        // store previous fft\n        } else if( fragCoord.y < iResolution.y - 1.0 ) {\n            fragColor=texture(buffer,vec2(uv.x,uv.y - step));\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 19051,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/bigmamashouse/rave-sickness-oropendola-stig"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}