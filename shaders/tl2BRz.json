{
    "Shader": {
        "info": {
            "date": "1598242980",
            "description": "This is a port to GLSL of the GEGL Spherize image processing operation.\n\nGEGL Spherize:\n  [url]http://gegl.org/operations/gegl-spherize.html[/url]\n  [url]https://docs.gimp.org/2.10/en/gimp-filter-spherize.html[/url]\n",
            "flags": 0,
            "hasliked": 0,
            "id": "tl2BRz",
            "likes": 1,
            "name": "GIMP Spherize",
            "published": 3,
            "tags": [
                "texture",
                "spherize",
                "gimp"
            ],
            "usePreview": 0,
            "username": "pschroen",
            "viewed": 385
        },
        "renderpass": [
            {
                "code": "/**\n * This is a port to GLSL of the GEGL Spherize image processing operation.\n *\n * Author: pschroen\n *\n * GEGL Spherize:\n *   http://gegl.org/operations/gegl-spherize.html\n *   https://docs.gimp.org/2.10/en/gimp-filter-spherize.html\n *\n * GEGL is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * GEGL is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with GEGL; if not, see <https://www.gnu.org/licenses/>.\n *\n * Copyright (C) 2017 Ell\n */\n\n#define G_PI    3.1415926535897932384626433832795028841971693993751\n#define G_PI_2  1.5707963267948966192313216916397514420985846996876\n#define EPSILON 1e-10\n\nvec4 spherize(sampler2D image, vec2 uv, vec2 center, vec2 direction, float angle_of_view, float curvature, float amount)\n{\n    direction = 2.0 * direction;\n\n    float coangle_of_view_2 = max(180.0 - angle_of_view, 0.01) * G_PI / 360.0;\n    float focal_length      = tan(coangle_of_view_2);\n    float curvature_sign    = curvature > 0.0 ? 1.0 : -1.0;\n    float cap_angle_2       = abs(curvature) * coangle_of_view_2;\n    float cap_radius        = 1.0 / sin(cap_angle_2);\n    float cap_depth         = curvature_sign * cap_radius * cos(cap_angle_2);\n    float factor            = abs(amount);\n\n    float f     = focal_length;\n    float f2    = f * f;\n    float r     = cap_radius;\n    float r_inv = 1.0 / r;\n    float r2    = r * r;\n    float p     = cap_depth;\n    float f_p   = f + p;\n    float f_p2  = f_p * f_p;\n    float f_pf  = f_p * f;\n    float a     = cap_angle_2;\n    float a_inv = 1.0 / a;\n    float sgn   = curvature_sign;\n\n    bool perspective = angle_of_view > EPSILON;\n    bool inverse     = amount < 0.0;\n\n    float x = direction.x * (uv.x - center.x);\n    float y = direction.y * (uv.y - center.y);\n\n    float d2 = x * x + y * y;\n\n    if (d2 > EPSILON && d2 < 1.0 - EPSILON) {\n        float d = sqrt(d2);\n        float src_d = d;\n\n        if (!inverse) {\n            float d2_f2 = d2 + f2;\n\n            if (perspective)\n                src_d = (f_pf - sgn * sqrt(d2_f2 * r2 - f_p2 * d2)) * d / d2_f2;\n\n            src_d = (G_PI_2 - acos(src_d * r_inv)) * a_inv;\n        } else {\n            src_d = r * cos(G_PI_2 - src_d * a);\n\n            if (perspective)\n                src_d = f * src_d / (f_p - sgn * sqrt(r2 - src_d * src_d));\n        }\n\n        if (factor < 1.0)\n            src_d = d + (src_d - d) * factor;\n\n        uv.x = direction.x > 0.0 ? center.x + src_d * x / (direction.x * d) : uv.x;\n        uv.y = direction.y > 0.0 ? center.y + src_d * y / (direction.y * d) : uv.y;\n    }\n\n    return texture(image, uv);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    fragColor = spherize(iChannel0, uv, vec2(0.5, 0.5), vec2(1.0, 1.0), 0.0, 1.0, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}