{
    "Shader": {
        "info": {
            "date": "1592235533",
            "description": "Some weird looking shader coded on Android shader editor.",
            "flags": 64,
            "hasliked": 0,
            "id": "tlfcD7",
            "likes": 5,
            "name": "Random  pattern",
            "published": 3,
            "tags": [
                "2d",
                "random",
                "abstract",
                "pattern"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 233
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nmat2 r2d(float a){float cosa = cos(a);float sina = sin(a);return mat2(cosa,-sina,sina,cosa);}\nconst float PI = 3.14159265;\nbool rng(float a, float mi, float ma)\n{\n  return (a>mi && a<ma)|| (a>ma && a<mi);\n}\nvec3 cols[4];\n\nfloat sat(float a)\n{\n  return clamp(a,0.,1.);\n}\nfloat lenny(vec2 v)\n{\n  return abs(v.x)+abs(v.y);\n}\nfloat loz(vec2 uv, float sz)\n{\n  return lenny(uv)-sz;\n}\n\nfloat cir(vec2 uv, float r)\n{\n  return length(uv)-r;\n}\n\nvoid setup()\n{\n  cols[0] = .8*vec3(106, 48, 128)/255.;\n  cols[1] = vec3(125, 44, 82)/255.;\n  cols[2] = .8*vec3(232, 26, 77)/255.;\n  cols[3] = .9*vec3(227, 187, 54)/255.;\n}\n\nfloat rdrLine(vec2 p, float tim)\n{\n  float xPosl = smoothstep(-1.,1., sin(tim))-.5;\n  float xPosr = smoothstep(-1.,1., sin(tim+.5))-.5;\n  float width = .5;\n  float thick = .05;\n  float line = float(rng(p.y+.1*sin((tim+p.x)*PI*5.), -thick,+thick) && rng(p.x,xPosl,xPosr));\n  return line+.1*max(xPosl,.5)*sat(1.-length(p));\n}\n\nvec3 rdr(vec2 uv)\n{\n\n  setup();\n\n  vec3 col;\n  int i = 0;\n  int cnt =16;\n  float fcnt = float(cnt);\n  float tim = iTime+(.5+.5*sin(iTime*.5))*floor(asin(sin(iTime*PI*2.)))+abs(sin(iTime*PI));\n  tim*=.1;\n    \n  while (i<cnt)\n  {\n    float fi = float(i);\n    col += rdrLine(uv-vec2(0.,(fi-fcnt/2.)*.05),fi*.1*tim+fi)*cols[int(mod(fi,4.))];\n   ++i;\n  }\n\n  col *= cols[int(clamp(length(uv)*5.,0.,3.))];\n  return col;\n}\n\nvec3 rdr2(vec2 uv)\n{\n  vec2 uv2 = uv*r2d(uv.x);\n  uv2.x += sin(uv.y*15.)*.1;\n  vec3 col = rdr(uv2).yzx+rdr(uv*length(uv+vec2(sin(iTime),cos(iTime))*.5))*.5;\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord.xy / iResolution.xx;\n  uv -= vec2(.5)*iResolution.xy/iResolution.xx;\n  uv *= 2.+sin(iTime*.25)*.5;\n  vec3 col = rdr2(abs(r2d(pow(length(uv*r2d(uv.y))+sin(iTime+uv.x)*.1,5.))*uv));\n\n  col*=col*(abs(sin(iTime))+.5)*2.;\n  col += 5.*cols[0]*pow(sat(1.-lenny(uv)),5.);\n  col = pow(col,vec3(1./2.2));\n  col = mix(col, col.zxy, sin(iTime*.2)*.5+.5);\n  fragColor = vec4(col.zyx, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 23169,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/nutone/cannibals-feat-dynamite-preview"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}