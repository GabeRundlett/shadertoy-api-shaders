{
    "Shader": {
        "info": {
            "date": "1641573505",
            "description": "Wave interference",
            "flags": 0,
            "hasliked": 0,
            "id": "fd3SRn",
            "likes": 5,
            "name": "Interference Patterns",
            "published": 3,
            "tags": [
                "waves"
            ],
            "usePreview": 0,
            "username": "tarnith",
            "viewed": 287
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( fragCoord - .5*iResolution.xy ) / iResolution.y;\n    vec3 col = vec3(0.);\n    for (float i = 0.; i < 5.; i++){\n      col += createWave(uv+(hashwithoutsine21(i*.1)-vec2(.5)),iTime);\n      }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 hashwithoutsine21(float p)\n{\n\tvec3 p3 = fract(vec3(p,p,p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nfloat createWave(vec2 origin, float rate){\n  \n  origin *= 100.;\n  \n  \n  return sin(length(origin)+rate); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}