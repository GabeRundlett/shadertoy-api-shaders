{
    "Shader": {
        "info": {
            "date": "1609621396",
            "description": "potato",
            "flags": 32,
            "hasliked": 0,
            "id": "3lcyRf",
            "likes": 46,
            "name": "Day 381",
            "published": 3,
            "tags": [
                "sun",
                "landscape",
                "fog",
                "ice",
                "iceberg",
                "mdtmjvm",
                "mdtmjvm",
                "glacier",
                "cyclicnoise"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 1159
        },
        "renderpass": [
            {
                "code": "// All Cyclic noise from nimitz\n// PBR atmospheric scattering from Sebastian Lague video tutorial on youtube\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n\n    col = texture(iChannel0,fragCoord/iResolution.xy).xyz;\n    \n    col *= vec3(0.96,0.9,1.07);\n    col *= exposure; \n    \n    col = pow(col,vec3(1.03,0.98,1.05));\n    col = mix(acesFilm(col), col, 0.);\n    col = mix(col,smoothstep(0.,1.,col*vec3(1.0,1.02,1.08)),0.6);\n    \n    col *= 1. - dot(uv,uv*0.4)*1.5;\n    \n    col = pow(col,vec3(0.454545));\n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool hitDiffuse = false;\n\nbool refractedInIceberg = false;\nbool reflectedFromWater = false;\n#define exposure 1.\n#define groundOffs vec3(0,1.3,0)\n\n\n#define IDSEA 1.\n#define IDICEBERG 2.\n\n#define skyCol vec3(0.36,0.66,0.97)*0.5\n\n// General\n#define marchSteps 350\n#define marchEps  (mix(0.0005,0.2,smoothstep(0.,1.,t*0.03 - 0.4)))\n//#define marchEps  (0.0005)\n#define maxDist 90.\n\n\n#define distScale mix(0.4, 0.2,exp(-d.x*d.x*0.05))\n//#define distScale 0.25\n\n#define reflections 4\n#define normalEps 0.0005\n\n// Clouds\n\n#define cloudsLowerLimit 7.\n#define cloudsHigherLimit 12.\n\n#define cloudSteps 30.\n#define volumetricDithAmt .15\n\n// Wind\n#define windSteps 10.\n// Atmosphere\n#define sunCol vec3(0.23,0.45,0.35)*1.\n#define planetSz 2984.\n#define atmoSz (planetSz/83.)\n\n\n#define itersAtmo 6.\n#define itersOptic 9.\nconst float redLightLen = 690.;\nconst float greenLightLen = 540.;\nconst float blueLightLen = 440.;\n\nconst float transStrength = 0.02;\n\nfloat densFalloff = 5.;\n\n\n#define sss(a) clamp(map(p + sunDir*a).x/a,0., 1.)\n#define ao(a,b) clamp(map(p + normalize((mix(n, sunDir,b)))*a).x/a,0., 1.)\n\n#define pi acos(-1.)\n\n#define tau (2.*pi)\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define pmod(p,a) mod(p - 0.*a,a) - 0.5*a\nfloat valueNoise(vec3 p, float pw);\nvec3 acesFilm(const vec3 x);\nvec2 dmin(vec2 a, float b, float cmp){return a.x < b ? a : vec2(b,cmp);}\nfloat turbulentNoise(vec3 p);\nvec2 sphIntersect( in vec3 ro, in vec3 rd, in vec3 ce, float ra );\nfloat atmosphericDensity( vec3 p);\nfloat opticalDepth(vec3 p, vec3 rd, float len);\nvec3 getAtmosphere(vec3 ro, vec3 rd, float t, out float opticalDepthView, vec3 sunPos);\nmat3 getRd(vec3 ro, vec3 lookAt);\nvec3 getRdSpherical(vec3 ro, inout vec2 uv);\nvec3 hash3(vec3 p);\nfloat r21(vec2 p);\nfloat plaIntersect( in vec3 ro, in vec3 rd, in vec4 p );\n\nvec3 acesFilm(const vec3 x) {\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return clamp((x * (a * x + b)) / (x * (c * x + d ) + e), 0.0, 1.0);\n}\n\n/*\nfloat r24(vec2 p){\n    return texture(iChannel0,)[ int(mod(p.x))];\n}*/\n\n \n\nmat3 getOrthogonalBasis(vec3 direction){\n    direction = normalize(direction);\n    vec3 right = normalize(cross(vec3(0,1,0),direction));\n    vec3 up = normalize(cross(direction, right));\n    return mat3(right,up,direction);\n}\n\nfloat cyclicNoiseClouds(vec3 p, bool turbulent, float t){\n    float noise = 0.;\n    \n    float amp = 0.43;\n    const float gain = 0.77;\n    const float lacunarity = 1.6;\n    const int octaves = 6;\n    \n    const float warp = 0.46;    \n    float warpTrk = 1.9;\n    const float warpTrkGain = 1.1;\n    \n    vec3 seed = vec3(-1.4,-2.,0.5);\n    mat3 rotMatrix = getOrthogonalBasis(seed);\n    \n    for(int i = 0; i < octaves; i++){\n        \n        p += sin(sin(p.zxy + t*0.05\n        )*warpTrk - 2.*warpTrk)*warp; \n        noise += sin(dot(cos(p), sin(p.zxy  )))*amp;\n    \n        p *= rotMatrix;\n        p *= lacunarity;\n        \n        warpTrk *= warpTrkGain;\n        amp *= gain;\n    }\n    \n    if(turbulent){\n        return max(-0. - (noise)*0.6,0.);\n    \n    }{\n        return (noise*0.25 + 0.5);\n\n    }\n}\n\n\nfloat cyclicNoiseSea(vec3 p, bool turbulent){\n    float noise = 0.;\n    \n    float amp = 0.07;\n    const float gain = 0.7;\n    const float lacunarity = 1.8;\n    const int octaves = 7;\n    \n    const float warp = 0.;    \n    float warpTrk = 1.4;\n    const float warpTrkGain = 1.2;\n    \n    vec3 seed = vec3(-1,-2.,0.5);\n    mat3 rotMatrix = getOrthogonalBasis(seed);\n    \n        for(int i = 0; i < octaves; i++){\n        \n        p += sin(p.zxy*warpTrk - 2.*warpTrk)*warp; \n        noise += sin(dot(cos(p), sin(p.zxy )))*amp;\n    \n        p *= rotMatrix;\n        p *= lacunarity;\n        \n        warpTrk *= warpTrkGain;\n        amp *= gain;\n    }\n    \n    if(turbulent){\n        return 1. - abs(noise)*0.5;\n    \n    }{\n        return (noise*0.25 + 0.);\n\n    }\n}\n\nfloat cyclicNoiseRocks(vec3 p, bool turbulent){\n    float noise = 0.;\n    \n    float amp = 0.94;\n    const float gain = 0.5;\n    const float lacunarity = 2.5;\n    const int octaves = 2;\n    \n    const float warp = 0.;    \n    float warpTrk = 1. ;\n    const float warpTrkGain = 1.2;\n    \n    vec3 seed = vec3(-0,-2.,0.5);\n    mat3 rotMatrix = getOrthogonalBasis(seed);\n    \n    for(int i = 0; i < octaves; i++){\n        \n        p += sin(p.zxy*warpTrk - 2.*warpTrk)*warp; \n        noise += sin(dot(cos(p), sin(p.zxy )))*amp;\n    \n        p *= rotMatrix;\n        p *= lacunarity;\n        \n        warpTrk *= warpTrkGain;\n        amp *= gain;\n    }\n    \n    if(turbulent){\n        return 1. - abs(noise)*0.5;\n    \n    }{\n        return (noise*0.25 + 0.5);\n\n    }\n}\n\nfloat cyclicNoiseRocksInside(vec3 p, bool turbulent){\n    float noise = 0.;\n    \n    float amp = 1.;\n    const float gain = 0.5;\n    const float lacunarity = 2.5;\n    const int octaves = 2;\n    \n    const float warp = 0.;    \n    float warpTrk = 1. ;\n    const float warpTrkGain = 1.2;\n    \n    vec3 seed = vec3(-2,-2.,0.5);\n    mat3 rotMatrix = getOrthogonalBasis(seed);\n    \n    for(int i = 0; i < octaves; i++){\n        \n        p += sin(p.zxy*warpTrk - 2.*warpTrk)*warp; \n        noise += sin(dot(cos(p), sin(p.zxy )))*amp;\n    \n        p *= rotMatrix;\n        p *= lacunarity;\n        \n        warpTrk *= warpTrkGain;\n        amp *= gain;\n    }\n    \n    if(turbulent){\n        return 1. - abs(noise)*0.5;\n    \n    }{\n        return (noise*0.25 + 0.5);\n\n    }\n}\n\n\nfloat cyclicNoiseRocksTri(vec3 p, bool turbulent){\n    float noise = 0.;\n    \n    float amp = 1.;\n    const float gain = 0.7;\n    const float lacunarity = 1.5;\n    const int octaves = 3;\n    \n    const float warp = 0.27;    \n    float warpTrk = 1.6 ;\n    const float warpTrkGain = 1.3;\n    \n    vec3 seed = vec3(-1,-2.,0.5);\n    mat3 rotMatrix = getOrthogonalBasis(seed);\n    \n    for(int i = 0; i < octaves; i++){\n        \n        //p += sin(p.zxy*warpTrk - 2.*warpTrk)*warp; \n        p += asin(sin(p.zxy*warpTrk - 2.*warpTrk))*warp; \n        \n        //noise += asin(sin(dot(cos(p), sin(p.zxy ))))*amp;\n        noise += asin(sin(dot(acos(cos(p)), sin(sin(p.zxy )))))*amp;\n    \n        p *= rotMatrix;\n        p *= lacunarity;\n        \n        warpTrk *= warpTrkGain;\n        amp *= gain;\n    }\n    \n    if(turbulent){\n        return 1. - abs(noise)*0.5;\n    \n    }{\n        return (noise*0.25 + 0.5);\n\n    }\n}\n\n\n\nfloat cyclicNoiseWind(vec3 p, bool turbulent){\n    float noise = 0.;\n    \n    float amp = 1.;\n    const float gain = 0.5;\n    const float lacunarity = 2.5;\n    const int octaves = 3;\n    \n    const float warp = 0.3;    \n    float warpTrk = 1. ;\n    const float warpTrkGain = .9;\n    \n    vec3 seed = vec3(-5,-2.,0.5);\n    mat3 rotMatrix = getOrthogonalBasis(seed);\n    \n    for(int i = 0; i < octaves; i++){\n        \n        p += sin(p.zxy*warpTrk - 2.*warpTrk)*warp; \n        noise += sin(dot(cos(p), sin(p.zxy )))*amp;\n    \n        p *= rotMatrix;\n        p *= lacunarity;\n        \n        warpTrk *= warpTrkGain;\n        amp *= gain;\n    }\n    \n    if(turbulent){\n        return 1. - abs(noise)*0.5;\n    \n    }{\n        return (noise*0.25 + 0.5);\n\n    }\n}\n\n\nfloat cyclicNoiseGrass(vec3 p, bool turbulent){\n    float noise = 0.;\n    \n    float amp = 1.;\n    const float gain = 0.3;\n    const float lacunarity = 2.5;\n    const int octaves = 2;\n    \n    const float warp = 0.9;    \n    float warpTrk = 1. ;\n    const float warpTrkGain = 1.2;\n    \n    vec3 seed = vec3(-5,-2.,0.5);\n    mat3 rotMatrix = getOrthogonalBasis(seed);\n    \n    for(int i = 0; i < octaves; i++){\n        \n        p += sin(p.zxy*warpTrk - 2.*warpTrk)*warp; \n        noise += sin(dot(cos(p), sin(p.zxy )))*amp;\n    \n        p *= rotMatrix;\n        p *= lacunarity;\n        \n        warpTrk *= warpTrkGain;\n        amp *= gain;\n    }\n    \n    if(turbulent){\n        return 1. - abs(noise)*0.5;\n    \n    }{\n        return (noise*0.25 + 0.5);\n\n    }\n}\n\n\n/*\nfloat valueNoiseCheap(in vec3 p,float pw)\n{\n    vec3 ip = floor(p);\n    vec3 fp = fract(p);\n\tfp = fp*fp*(3.0-2.0*fp);\n\tvec2 tap = (ip.xy+vec2(37.0,17.0)*ip.z) + fp.xy;\n\tvec2 rz = textureLod( iChannel0, (tap+0.5)/256.0, 0.0 ).yx;\n\treturn mix( rz.x, rz.y, fp.z );\n}*/\n\n\nfloat valueNoise(vec3 p, float pw){\n    \n\tvec3 s = vec3(1., 25, 75);\n\t\n\tvec3 ip = floor(p); // Unique unit cell ID.\n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    \n\tp -= ip; // Cell's fractional component.\n\t\n    // A bit of cubic smoothing, to give the noise that rounded look.\n    if(pw == 1.){\n        p = p*p*(3. - 2.*p); \n    } else {\n    \n    \tp = p*p*(p*(p * 6. - 15.) + 10.);\n    }\n    \n    //p = smoothstep(0.,1.,p);\n    // Smoother version of the above. Weirdly, the extra calculations can sometimes\n    // create a surface that's easier to hone in on, and can actually speed things up.\n    // Having said that, I'm sticking with the simpler version above.\n\t//p = p*p*(p*(p * 6. - 15.) + 10.);\n    h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n\t\n    // Interpolating along Y.\n    h.xy = mix(h.xz, h.yw, p.y);\n    \n    // Interpolating along Z, and returning the 3D noise value.\n    return mix(h.x, h.y, p.z); // Range: [0, 1].\n\t\n}\n\nvec3 hash3(vec3 p) {\n\tp = vec3(dot(p, vec3(127.1, 311.7, 74.7)),\n\t\t\tdot(p, vec3(269.5, 183.3, 246.1)),\n\t\t\tdot(p, vec3(113.5, 271.9, 124.6)));\n\n\treturn -1.0 + 2.0 * fract(sin(p) * 43758.5453123);\n}\n\nfloat r21(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 r23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\nvec2 sphIntersect( in vec3 ro, in vec3 rd, in vec3 ce, float ra )\n{\n    vec3 oc = ro - ce;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - ra*ra;\n    float h = b*b - c;\n    if( h<0.0 ) return vec2(-1.0); // no intersection\n    h = sqrt( h );\n    //return -b+h;\n    //return max(max(-b-h,0.),max(-b+h,0.));\n    return vec2( -b-h, -b+h );\n}\nfloat plaIntersect( in vec3 ro, in vec3 rd, in vec4 p )\n{\n    return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\n\nfloat atmosphericDensity( vec3 p){\n    float fact = (p.y - planetSz )/atmoSz;\n    fact = max(fact, 0.0001);\n    return exp(-fact*densFalloff)*pow(max(1. - fact,0.),0.04);//*pow(smoothstep(0.95,0.84,fact),1.);\n}\n\nfloat opticalDepth(vec3 p, vec3 rd, float len){\n    float stSz = len / (itersOptic-1.);\n    float depth = 0.;\n    for(float opticIdx = 0.; opticIdx < itersOptic; opticIdx++ ){\n        depth += atmosphericDensity(p) * stSz;\n        p += rd*stSz;\n     }\n    return depth;\n}\n\n\nvec3 scatteringCoefficients = transStrength*vec3(\n    pow(400./redLightLen,4.),\n    pow(400./greenLightLen,4.),\n    pow(400./blueLightLen,4.)\n);\nvec3 getAtmosphere(vec3 ro, vec3 rd, float t, out float opticalDepthView, vec3 sunPos){\n    vec3 accumAtmo = vec3(0);\n    float atmoMarchLen = 0.;\n    \n    vec3 offs = vec3(0,planetSz ,0);\n    vec3 p = ro;\n    sunPos += offs;\n    \n    p += offs*1.;\n    \n    \n    float lenViewDirToEndOfAtmosphere = sphIntersect( p, rd, vec3(0), planetSz + atmoSz ).y;\n    \n    if(refractedInIceberg  || reflectedFromWater){\n        atmoMarchLen = mix(t,lenViewDirToEndOfAtmosphere,smoothstep(0.,1.,t/386. - 0.));\n    } else {\n        atmoMarchLen = lenViewDirToEndOfAtmosphere;\n    }\n    float stepSz = atmoMarchLen/(itersAtmo - 1.);\n    \n\n    for(float atmoIdx = 0.; atmoIdx < itersAtmo ; atmoIdx++ ){\n        vec3 dirToSun = normalize(sunPos - p);\n        float lenSunDirToEndOfAtmosphere = sphIntersect( p, dirToSun, vec3(0), planetSz + atmoSz ).y;\n        lenViewDirToEndOfAtmosphere = sphIntersect( p, -rd, vec3(0), planetSz + atmoSz ).y;\n        \n        float opticalDepthSun = opticalDepth(p, dirToSun, lenSunDirToEndOfAtmosphere);\n        opticalDepthView = opticalDepth(p, -rd, stepSz*atmoIdx);\n        \n        float localDens = atmosphericDensity(p);\n        \n\n        vec3 transmittance = exp(-(opticalDepthSun + opticalDepthView) * scatteringCoefficients);        \n        accumAtmo += transmittance * localDens * scatteringCoefficients * stepSz;\n        \n        p += rd * stepSz;\n    }\n    \n    return accumAtmo;\n}\n\nmat3 getRd(vec3 ro, vec3 lookAt){\n    vec3 dir = normalize(lookAt - ro);\n    vec3 right = normalize(cross(vec3(0,1,0),dir));\n    vec3 up = normalize(cross(dir,right));\n    \n    return mat3(right,up,dir); \n}\n\n\n// Tri-Planar blending function. Based on an old Nvidia tutorial.\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){\n  \n    n = max((abs(n) - 0.2)*7., 0.001); // max(abs(n), 0.001), etc.\n    n /= (n.x + n.y + n.z );  \n    \n\treturn (texture(tex, p.yz)*n.x + texture(tex, p.zx)*n.y + texture(tex, p.xy)*n.z).xyz;\n}\n\nvec3 getRdSpherical(inout vec2 uv){\n    \n    // polar coords\n    uv = vec2(atan(uv.y,uv.x),length(uv));\n    \n    vec2 ouv = uv;\n    uv += 0.5;\n    uv.y *= pi;\n    \n    \n    // parametrized sphere\n    vec3 offs = vec3(cos(uv.y)*cos(uv.x),sin(uv.y),cos(uv.y)*sin(uv.x));\n    \n    // insert camera rotations here\n    offs.yz *= rot(-(1.)*pi);\n    \n    //vec3 lookAt = ro + offs;\n    //vec3 v = normalize(lookAt - ro);\n    vec3 v = offs;\n    //uv = ouv;\n    //uv.x = v.x;\n    //uv.y = v.y;\n    \n    return v;\n}\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\nfloat sdRoundCone( vec3 p, float r1, float r2, float h )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n    \n  float b = (r1-r2)/h;\n  float a = sqrt(1.0-b*b);\n  float k = dot(q,vec2(-b,a));\n    \n  if( k < 0.0 ) return length(q) - r1;\n  if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n        \n  return dot(q, vec2(a,b) ) - r1;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n\nvec3 opRepLim( in vec3 p, in float c, in vec3 l )\n{\n    vec3 q = p-c*clamp(round(p/c),-l,l);\n    return q;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n#define TAA false\n\n\nvec3 getNormal(vec3 p);\nvec3 getSun(vec2 uv, vec2 sunPos, vec3 sunPosW, vec3 ro, mat3 vp);\n\n\nfloat side = 1.;\n\nfloat t = 0.;\nfloat firstT = 0.;\nvec3 firstRo = vec3(0);\nvec3 firstRd = vec3(0);\nfloat grh = 0.;\nfloat ng = 0.;\n\nfloat nIceBergs;\n\nfloat mapClouds(vec3 p){\n    float currHeight = p.y;\n    \n    p *= 0.5;\n    float cloudsRange = (cloudsHigherLimit - cloudsLowerLimit)*0.494;\n    float cloudsMid = cloudsLowerLimit + cloudsRange;\n    \n    float fb = cyclicNoiseClouds(p*1. + iTime*0., false,iTime);\n    float f = cyclicNoiseClouds(p*0.4 + iTime*0.04 + fb*0.3, true,iTime);\n    //f = (f*0.4 + cyclicNoise(p*0.5 + f*2. - fb*1.4 + iTime))*cyclicNoise(p*0.2 + 5.+ f*4.);\n        //f *= pow( smoothstep( 1.,0., abs(currHeight - cloudsHigherLimit + cloudsRange)/cloudsRange*0.9), 2.29);\n    \n    //f = fb;\n    f = max(f,0.);\n    f *= pow( smoothstep( 1.,0., abs(currHeight - cloudsHigherLimit + cloudsRange)/cloudsRange*0.9), 2.29);\n    \n    return f;\n}\n\n\n\n\nvec2 getSea(vec3 p){\n    float d = p.y;\n    vec3 pp = vec3(p.x,2. - iTime*.36,p.z);\n    float n = cyclicNoiseSea(pp*0.5, false);\n    float on = n;\n    //n = pow((n),1.9);\n    \n    d -= n;\n    \n    return vec2(d,IDSEA);\n}\n\n\nvec2 getIcebergs(vec3 p){\n    float d = 10e4;\n    \n    p.y += 1.;\n    \n    \n    float n = cyclicNoiseRocks(vec3(p.x,p.y*0.,p.z)*0.4, false);\n    \n    nIceBergs = cyclicNoiseRocksTri(vec3(p.x,p.y*0.3,p.z)*1., false);\n    \n    n = smoothstep(0.3,1.,n*0.94);\n    \n    \n    \n    //n += rockTex;\n    \n    \n    d = abs(p.y + 2.5)   - (  n*7.3) - 0.;\n    d -= nIceBergs*1.;\n    \n    return vec2(d,2.);\n}\n\n\nvec2 map(vec3 p){\n    vec2 d = vec2(10e5);\n    vec2 dsea = getSea(p);\n    vec2 dicebergs = getIcebergs(p);\n    //vec2 dbal = getIcebergs(p);\n    \n    dsea.x += sin(dicebergs.x*14. - iTime*3.)*exp(-dicebergs.x*1.1)*0.02;\n    //dsea.x -= sin(dicebergs.x*14. + iTime*7.)*clamp(1.-dicebergs.x*1.,0.,1.)*0.02;\n    dsea.x = max(dsea.x,-dicebergs.x + 0.01);\n    \n    \n    \n    \n    \n    d = dmin(d,dsea.x,dsea.y);\n    d = dmin(d,dicebergs.x,dicebergs.y);\n    \n    \n    \n    return d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 prevFrame = texture(iChannel2,fragCoord/iResolution.xy);\n\n    if(TAA){\n        vec2 taaidx = r23(vec3(fragCoord,float(iFrame)))*4.;\n        fragCoord += float(iMouse.z>0.)*.6*vec2(sin(float(taaidx.x)*pi/4.),cos(float(taaidx.x)*pi/4.))*taaidx.y/4.;\n\n    }\n    \n    \n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec2 muv = iMouse.xy/iResolution.xy;\n    \n    \n    vec3 col = vec3(0);\n    \n    \n    \n    vec3 sunPos = vec3(-1,.7,2.)*2300.;\n    vec3 sunDir = normalize(sunPos);\n\n    \n    vec3 ro = vec3(0);\n    \n    ro.z += iTime;\n    \n    ro.x -= 1.4;\n    \n    \n    vec3 lookAt = vec3(0,0,ro.z +4.);\n    \n        \n    float T = -iTime*0.1;\n    \n    float sea = getSea(ro).x;\n    \n    //float rocks = getRocks(ro).x*1.04; \n    \n    ro += groundOffs;\n    lookAt += groundOffs;\n    lookAt.y -= muv.y*3.;\n    lookAt.x += (1.-muv.x)*5. + 2.;\n    \n    mat3 vp = getRd(ro,lookAt);\n    \n    vec3 rd = normalize(vec3(uv,1.))*vp;\n    \n    firstRo = ro;\n    firstRd = rd;\n    \n    \n    // Marching\n    \n    vec3 atten = vec3(1);\n    vec3 accumIceberg = vec3(0);\n    float tAccumIceberg = 0.;\n    vec3 p = ro;\n    vec2 d;\n    //bool marchingIceberg = false;\n    float depthView;\n    vec3 atmosphere;\n    bool hitSky = false;\n    \n    \n    vec3 hitCol = vec3(0);\n    for(int reflection = 0; reflection < reflections; reflection++){\n        \n        if(!hitDiffuse && !hitSky){\n            p = ro + rd*0.05;\n            for(int i = 0; i < marchSteps ; i++){\n                d = map(p);\n                d.x *= side * distScale;\n                if(side == -1.){\n                    d.x = min(d.x,0.5);\n                    \n                    float dens = 0.075;\n                    dens *= 1. - tAccumIceberg;\n                    dens *= d.x;\n                    \n                    vec3 c = vec3(0.1,0.2,0.08 + sin(p.z*0.5)*0.0);\n                    \n                    float n = cyclicNoiseRocks( p*2., true);\n                    c = mix(\n                        c,\n                        vec3(0,0.4,0.4),\n                        pow(abs(n)*1.,3.)*4.9);\n                    c = mix(\n                        c,\n                        c*c,\n                        pow(abs(n),15.)*1.9);\n                    \n                    \n                    \n                    accumIceberg  += dens*c;\n                    tAccumIceberg += dens;\n                }\n                if (t > maxDist || i == marchSteps - 1){\n                    if(reflection == 0){\n                        firstT = t;\n                    } \n                    if(refractedInIceberg){\n                        hitCol += skyCol*atten;\n                        //hitCol = hitCol * exp(-depthView*0.1) + atten*getAtmosphere(vec3(0,ro.y,0), rd, t, depthView, sunPos);\n                        \n                        hitSky = true;\n                    \n                    } else if(reflectedFromWater){\n                        hitCol = hitCol * exp(-depthView*0.1) + atten*getAtmosphere(vec3(0,ro.y,0), rd, t, depthView, sunPos);\n                        hitSky = true;\n                    }\n                    break;\n                } else if (d.x < marchEps ){\n                    if(reflection == 0){\n                        firstT = t;\n                    }\n                \n                    vec3 n = getNormal(p)*side;\n                    vec3 hf = normalize(sunDir - rd);\n                    float diff = max(dot(n,sunDir),0.);\n                    float spec = pow(max(dot(n,hf),0.),18.);\n                    float fres = pow( 1. - max(dot( n, -rd),0.001),5.);\n                    fres = max(fres,0.);\n                \n                    //float rockiness = d.y - 1.;\n                    //rockiness = clamp(rockiness,0.,1.);\n                    //float AO = mix(ao(.5,0.2)*ao(3.9,0.5)*ao(2.2,0.5)*ao(4.2,0.5),1.,0.34);\n                    float AO = mix(ao(.25,0.5)*ao(1.2,0.5)*ao(.8,0.1),1.,0.2);\n                    \n                    //float SSS = sss(.3)*sss(0.04)*sss(.1)*5.;\n                    \n                    vec3 albedo = vec3(0);\n                    vec3 iceCol = vec3(0);\n                    vec3 seaCol = vec3(0);\n                    if(d.y == IDICEBERG){\n                        refractedInIceberg = true;\n                        albedo = vec3(0.6,0.8,1)*0.1;\n                        atten = mix(atten, albedo*atten,0.1);\n                        if(side == -1.){\n                            atten *= 1. - tAccumIceberg;\n                            iceCol += accumIceberg*atten;\n                        } \n                        if( reflection == 1){\n                            }\n                        atten *= AO;\n                        \n                        rd = refract(rd, n, 0.95);\n                        ro = p ;\n                        t = 0.;\n                        \n                        iceCol += albedo*atten*pow(clamp(abs(nIceBergs),0.,1.),4.)*0.9;\n                        //iceCol += albedo*atten*smoothstep(0.1,0.04,nIceBergs)*4.9;\n                        //iceCol += albedo*atten*smoothstep(0.2,0.1,AO)*4.9;\n                        \n                        \n                        iceCol += (fres + spec)*skyCol*atten;\n                        \n                        \n                        hitCol += iceCol;\n                        atten *= 1. - albedo;\n                        \n                        \n                        side *= -1.;\n                    } else {\n                        // water\n                        AO = mix(AO,1.,0.9);\n                        //albedo = vec3(0.8,0.9,1.)*1.;\n                        albedo = vec3(1.,1.,1.)*1.;\n                        \n                        \n                        //AO *= ao(.5)*ao(1.2);\n                        //seaCol += albedo*pow(AO*0.4,13.);\n                        atten *= (spec + fres)*AO*albedo;\n                        //hitCol += seaCol*atten;\n                        reflectedFromWater = true;\n                        \n                        ro = p;\n                        t = 0.1;\n                        rd = reflect(rd,n);\n                    }\n\n                    break;\n                }\n\n                p = ro + rd*(t += d.x);\n            }\n    \n        }\n    }\n    \n    \n    atmosphere = getAtmosphere(vec3(0,firstRo.y,0), firstRd, firstT, depthView, sunPos);\n    \n    // Clouds\n    \n    vec3 cloudRo = firstRo;\n    vec3 cloudRd = firstRd;\n    \n    if(reflectedFromWater){\n        cloudRo = ro;\n        cloudRo = rd;\n    }\n    \n    float lowerCloudLimitDist = plaIntersect( cloudRo - vec3(0,cloudsLowerLimit,0), cloudRd, vec4(0,-1,0,0) );\n    float higherCloudLimitDist = plaIntersect( cloudRo - vec3(0,cloudsHigherLimit,0), cloudRd, vec4(0,-1,0,0) );\n    \n    float volumetricDith = r21(fragCoord + sin(iTime*20.)*20.)*volumetricDithAmt;\n    \n    float cloudLength = higherCloudLimitDist - lowerCloudLimitDist; \n    float cloudStepSz = cloudLength/(cloudSteps);\n    vec3 cloudP = cloudRo + rd * ( lowerCloudLimitDist + volumetricDith*cloudLength );\n    \n    \n    float cloudDensTotal = 0.;\n    vec3 cloudAccum = vec3(0.);\n    \n    \n    for(float i = 0.; i < cloudSteps ; i++){\n        float d = mapClouds(cloudP);\n        \n        float difffact = clamp( d*1. - mapClouds(cloudP + sunDir*1.4)*0.5  + 0.22, 0., 1. );\n        vec3 diff = mix( atmosphere*0.1 + vec3(0.04,0.07,0.2)*(0.4 - smoothstep(0.,1.,1. - atmosphere*1.8)*0.1), (vec3(1,0.9,0.9)*1. + sunCol*0.4 + atmosphere*.4)*0.4, difffact );\n        //vec3 diff = vec3(0.2); \n        vec3 absorption = mix( vec3(0.8,0.85,0.9), vec3(0.5,0.9,0.7)*0.6, clamp( cloudDensTotal*0.5, 0., 1. ) );\n        vec3 fringe = vec3(0.1,0.5,0.5)*clamp( 1. - d*3., 0.,1.);\n        \n        d = d*(1.-cloudDensTotal)*cloudStepSz;\n        \n        cloudDensTotal += d;\n        cloudAccum += d*(diff*2.7*absorption + fringe*(0.1 + diff*0.9)*2.64);\n\n            \n        if( cloudDensTotal > 1.){\n            break;\n        }\n        cloudP += rd*cloudStepSz;\n    }\n    \n    \n    // Wind\n    vec3 windRo = firstRo;\n    vec3 windRd = firstRd;\n    if(reflectedFromWater){\n        //windRo = ro;\n        //windRd = rd;\n    }\n    vec3 windP = windRo + windRd*volumetricDith*0.00 ;\n    float windStepSz = min(firstT,14.)/windSteps;\n    \n    \n    \n    vec3 windAccum = vec3(0);\n    float windT = 0.;\n    \n    for(float i = 0.; i < windSteps ; i++){\n        vec3 wp = windP*1. - vec3(-iTime*1.,0.,0.);\n            float dens = cyclicNoiseWind(wp,false)*0.239 + 0.0;\n        dens *= smoothstep(1.,0.,windP.y*0.10 + 0.04);\n        \n        dens *= dens*(1.-windT)*windStepSz;\n        windAccum += dens*vec3(.5,0.7,0.9)*2.6;\n        windT += dens;\n        \n        if( windT > 1.){\n            break;\n        }\n        windP += windRd*windStepSz;\n    }\n    \n    \n    \n    // Coloring\n    \n\n    // Compositing\n    \n    col += hitCol;\n    \n    atmosphere += getSun(rd.xy, sunDir.xy, sunPos, ro, vp)*atten;\n    //float depthViewFac = smoothstep(0.,1.,exp(-depthView*1.) + exp(-firstT*0.01));\n    float depthViewFac = smoothstep(0.,1.,exp(-depthView*0.01 ));\n    \n    //float depthViewFac = exp(-depthView*0.000001);\n    \n    \n    col = col * depthViewFac + atmosphere;//*(1. - depthViewFac) ; \n    \n    \n    cloudAccum *= atten;\n    \n    cloudDensTotal *= length(atten)/length(vec3(1));\n    if (!refractedInIceberg &&  lowerCloudLimitDist > 0.){\n        cloudAccum = mix(cloudAccum,col,clamp(1.-exp(-lowerCloudLimitDist*0.01 + 0.4),0.,1.));\n        col = mix(col,cloudAccum*1. , pow(clamp(cloudDensTotal*1. - 0.,0.,1.),4.));\n    }\n    \n    //windAccum *= smoothstep(0.,1.,firstT*0.1 - 0.01);\n    \n    col = mix(col,windAccum,windT);\n    //col = (col - windAccum) + 2.*windAccum*vec3(0.5,0.9,1.2);\n    \n    if(TAA && iFrame >1 && iMouse.z < 1.){\n        fragColor = mix(prevFrame, col.xyzz,0.4);\n    } else {\n        fragColor = col.xyzz;\n    }\n    \n    \n    \n    \n    fragColor.w = cloudDensTotal + float(hitDiffuse)*1.;\n}\n\n\nvec3 getNormal(vec3 p){\n      vec3 n = vec3(0.0);\n    for( int i=0; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(p+e*normalEps).x;\n    }\n    return normalize(n);\n}\nvec3 getNormalq(vec3 p){\n    vec2 t = vec2(normalEps, 0.);\n    return normalize(map(p).x - vec3(\n        map(p - t.xyy).x,\n        map(p - t.yxy).x,\n        map(p - t.yyx).x\n    ));\n}\n\n\n\nvec3 getSun(vec2 uv, vec2 sunPos, vec3 sunPosW, vec3 ro, mat3 vp){\n    \n    vec2 sunUVOriginal = uv;\n    \n    vec2 sunUV = uv - sunPos;\n    //float cloudDensPrevFrame = texture(iChannel2, ((sunUV*iResolution.y + 0.5*iResolution.xy)/iResolution.xy)).w;\n    \n    //vec2 sunUvPrevFrame = (normalize(sunPosW - ro)*inverse(getRd(ro,sunPosW))).xy;\n    vec2 sunUvPrevFrame = (normalize(sunPosW - ro)*inverse(vp)).xy;\n    \n    sunUvPrevFrame = (sunUvPrevFrame*iResolution.y)/iResolution.xy + 0.5;\n    \n    float deltaUV = 0.04;\n    float cloudDensPrevFrame = \n        texture(iChannel2, sunUvPrevFrame + deltaUV).w\n        + texture(iChannel2, sunUvPrevFrame - deltaUV).w\n        + texture(iChannel2, sunUvPrevFrame + vec2(-deltaUV,deltaUV)).w\n        + texture(iChannel2, sunUvPrevFrame + vec2(deltaUV,-deltaUV)).w\n        ; \n    \n    cloudDensPrevFrame /= 4.;\n    \n    cloudDensPrevFrame = clamp(cloudDensPrevFrame,0.,1.);\n    // sun\n    \n    vec3 sun = sunCol*smoothstep(0.07,0.,length(sunUV));\n    sun += sunCol*vec3(1.,0.4,0.6)*smoothstep(0.1,0.,length(sunUV));\n    sun += sunCol*vec3(0.7,0.4,0.6)*smoothstep(0.3,0.,length(sunUV))*0.5;\n    sun += sunCol*vec3(0.3,0.4,0.6)*smoothstep(0.6,0.,length(sunUV))*0.35;\n    \n    \n    // rays\n    \n    \n    vec3 sunRays = 0.4*sunCol * smoothstep(0.015*(1. + smoothstep(1.,0.,abs(sunUV.x)) ) ,0.,abs(sunUV.y))*smoothstep(0.5,0.,abs(sunUV.x));\n    \n    for(float i = 0.; i < 8.; i++){\n        sunUV *= rot(pi/8./1.);\n        float mda = sin(i*pi/4.);\n        float mdb = sin(i*pi/2.);\n        float w = 0.03;\n        float l = 0.1;\n        sunRays += (sunCol) *\n            mix(.8,.1,smoothstep(0.,0.25 +  sin(i*pi/ 4. + iTime)*0.1,length(sunUV))) *\n            smoothstep(w + mda*w/4.,0.,abs(sunUV.y))*smoothstep((l + mdb*0.1)*1.5,0.,abs(sunUV.x));\n    }   \n    sunUV = sunUVOriginal - sunPos;\n    vec3 flares = vec3(0);\n    vec2 toMid = sunPos;\n    vec2 dirToMid = -normalize(toMid);\n    float lenToMid = length(toMid);\n\n    // flares\n    for(float i = 0.; i < 12.; i++){\n          sunUV -= 2.*lenToMid*dirToMid/12.;\n          float dfl = length(sunUV) - (0.1 + 0.1*sin(i*5.))*0.5;\n          dfl *= 0.5;\n          vec3 flare = 0.01*(sunCol)*smoothstep(0.02,0.,dfl);\n          flare += 0.003*(sunCol*sunCol)*smoothstep(0.01,0.,abs(dfl - dFdx(uv.x)));\n          flares += flare*abs(sin(i*10.));\n    }   \n    \n    \n    return (sun + sunRays + flares*3.*sunCol) * (1. - cloudDensPrevFrame*1.);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nfloat FXAAamt = 0.5;\n\n\n\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord){\n    vec2 p = fragCoord.xy/iResolution.xy;\n    vec2 pp = 1. / iResolution.xy;\n    vec4 color = texture(iChannel0, vec2(fragCoord.xy * pp));\n    vec3 luma = vec3(.299, 0.587, 0.114);\n    \n    float lumaNW = dot(texture(iChannel0, (fragCoord.xy + vec2(-1.0, -1.0)*FXAAamt) * pp).xyz, luma);\n    float lumaNE = dot(texture(iChannel0, (fragCoord.xy + vec2(1.0, -1.0)*FXAAamt) * pp).xyz, luma);\n    float lumaSW = dot(texture(iChannel0, (fragCoord.xy + vec2(-1.0, 1.0)*FXAAamt) * pp).xyz, luma);\n    float lumaSE = dot(texture(iChannel0, (fragCoord.xy + vec2(1.0, 1.0)*FXAAamt) * pp).xyz, luma);\n    float lumaM  = dot(color.xyz,  luma);\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n\n    vec2 dir = vec2(-((lumaNW + lumaNE) - (lumaSW + lumaSE)), ((lumaNW + lumaSW) - (lumaNE + lumaSE)));\n\n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n                          (0.25 * (1.0/8.0)), (1.0/128.0));\n\n    float rcpDirMin = 2.5 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(8.0, 8.0),\n              max(vec2(-8.0, -8.0),\n              dir * rcpDirMin)) * pp;\n\n    vec3 rgbA = 0.5 * (\n        texture(iChannel0, fragCoord.xy * pp + dir * (1.0 / 3.0 - 0.5)).xyz +\n        texture(iChannel0, fragCoord.xy * pp + dir * (2.0 / 3.0 - 0.5)).xyz);\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\n        texture(iChannel0, fragCoord.xy * pp + dir * -0.5).xyz +\n        texture(iChannel0, fragCoord.xy * pp + dir * 0.5).xyz);\n\n    float lumaB = dot(rgbB, luma);\n    if ((lumaB < lumaMin) || (lumaB > lumaMax)){\n        fragColor = vec4(rgbA, color.w);\n    } else {\n        fragColor = vec4(rgbB, color.w);\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}