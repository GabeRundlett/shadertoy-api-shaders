{
    "Shader": {
        "info": {
            "date": "1577903228",
            "description": "Happy new year 2020!\n\nThis is faked to the bones, demoscene style :D",
            "flags": 0,
            "hasliked": 0,
            "id": "3tcGDs",
            "likes": 22,
            "name": "Liquid metal ocean",
            "published": 3,
            "tags": [
                "raymarching",
                "distancefield",
                "liveshading"
            ],
            "usePreview": 1,
            "username": "Alkama",
            "viewed": 1261
        },
        "renderpass": [
            {
                "code": "#define sat(a) clamp(a, 0., 1.)\nfloat t=0.;\n\nfloat scene(vec3 p) {\n    // the sphere\n\tfloat s = length(p-vec3(0,.3,0)) - 1.;\n\n    // the ocean is just a plane with different levels of noise going opposite directions and with different scale\n    // of course this breaks continuity so we compensate by undershooting our marching\n  \tfloat pl = p.y +\n  \t0.1 * texture(iChannel0, sin( t*.008)+t*.008+p.xz*.50).r +\n  \t0.2 * texture(iChannel0, cos(-t*.004)-t*.004+p.xz*.15).r +\n  \t0.9 * texture(iChannel0, sin( t*.020)+t*.010+p.xz*.05).r;\n\n  \treturn min(s,pl);\n}\n\n// returns distance, iteration count and if it hit (1) or not (0)\nvec3 march(in vec3 ro, in vec3 rd) {\n  \tfloat d = 0.;\n  \tvec3 p = ro;\n  \tfloat li=0.;\n  \tfor(float i=0.; i<200.; i++) {\n    \tfloat h = scene(p)*.5; // undershoot the march by half\n    \tif(abs(h)<.001*d) return vec3(d,i,1);\n    \tif(d>100.) return vec3(d,i,0);\n    \td+=h;\n    \tp+=rd*h;\n        li = i;\n  \t}\n  \treturn vec3(d, li, 0);\n}\n\nvec3 wrecked_normals(vec3 p) {\n    // normals epsilons are way overshot, this is what gives the ocean smoothness\n    const vec2 e = vec2(0.3,0.0);\n    return normalize(scene(p)-vec3(scene(p-e.xyy), scene(p-e.yxy), scene(p-e.yyx)));\n}\n\nvec3 getcam(vec2 uv, vec3 o, vec3 tg, float z) {\n  \tvec3 f = normalize(tg-o);\n  \tvec3 s = normalize(cross(vec3(0,1,0), f));\n  \tvec3 u = normalize(cross(f,s));\n  \treturn normalize(f*z+uv.x*s+uv.y*u);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    t = mod(iTime, 100.);\n    vec2 uv = ((fragCoord/iResolution.xy)-0.5) / vec2(iResolution.y / iResolution.x, 1);\n    \n    vec3 eye = vec3(0,1,-2);\n    // animate camera\n  \teye.xz += 5.*vec2(sin(t*.025), cos(t*.025));\n  \tvec3 target = vec3(0);\n  \tvec3 dir = getcam(uv,eye,target,.75);\n  \n  \tvec3 lp = 3.*vec3(1,2,2);\n  \n  \tvec3 col = vec3(0);\n  \tvec3 m = march(eye, dir);\n  \tif(m.z == 1.) {\n    \tvec3 p = eye+dir*m.x;\n    \tvec3 n = wrecked_normals(p);\n    \tvec3 ld = normalize(lp-p);\n    \tfloat diff = sat(max(0., dot(n,ld)));\n    \tfloat spec = sat(pow(max(0., dot(dir,reflect(ld,n))), 40.));\n    \tfloat fres = sat(pow(max(0., 1.-dot(-dir,n)), 2.));\n    \tcol = sat(vec3(diff+spec)*fres*cos(dir)*vec3(.8, .7, 1.1));\n  \t} else {\n    \tcol = cos(dir)*vec3(.8, .7, 1.1)*smoothstep(0.,.1,dir.y);\n  \t}\n    // all the look comes from that shaped iteration glow\n  \tcol += pow(m.y/70., 2.);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}