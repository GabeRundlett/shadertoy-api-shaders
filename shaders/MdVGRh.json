{
    "Shader": {
        "info": {
            "date": "1453307762",
            "description": "View of K-k plane. The code is duplicated into the 4 stages in order to gain speed because speed is limited by the refresh rate.\nNeeds better parametrization (too much uninterresting areas) .",
            "flags": 32,
            "hasliked": 0,
            "id": "MdVGRh",
            "likes": 95,
            "name": "Gray-Scott diffusion",
            "published": 3,
            "tags": [
                "reactiondiffusion",
                "grayscott"
            ],
            "usePreview": 0,
            "username": "knighty",
            "viewed": 4049
        },
        "renderpass": [
            {
                "code": "//Adapted from original fragmentarium shader by Syntopia\n//I've only added F-k parametrization and coloring\nvec3 normal(vec2 uv){\n    vec3 delta = vec3(1./iResolution.xy, 0.);\n    float du = texture(iChannel0, uv + delta.xz).x - texture(iChannel0, uv - delta.xz).x;\n    float dv = texture(iChannel0, uv + delta.zy).x - texture(iChannel0, uv - delta.zy).x;\n    return normalize(vec3(du,dv,1.));\n}\nvec3 getColor(vec2 uv){\n    return 0.5+0.5*sin(vec3(uv,uv.x-uv.y)*vec3(12.2,6.8,1.25)+vec3(1.,.0,1.25));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 val=texture(iChannel0, uv).xy;\n    vec3 col = getColor(val)*(1.5*val.y+0.25);\n    col += texture(iChannel1, reflect(vec3(0.,1.,0.),normal(uv))).xyz*0.15;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "const vec2 Diffusion = vec2(0.08,0.03);\n//const float F = 0.04;\n//const float k = 0.06;\nconst float dt = 2.;\n\nfloat rand(vec2 co){\n\t// implementation found at: lumina.sourceforge.net/Tutorials/Noise.html\n\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n// nine point stencil\nvec2 laplacian1(vec2 position) {\n    vec2 pixelSize = 1. / iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture( iChannel0,  position - P.xy ).xy // first row\n\t+ texture( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture( iChannel0,  position - P.wy ).xy\n\t+  texture( iChannel0,  position - P.xz).xy // seond row\n\t- 6.0* texture( iChannel0,  position ).xy\n\t+   texture( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture( iChannel0,  position +P.wy).xy  // third row\n\t+ texture( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture( iChannel0,  position + P.xy   ).xy;\t\n}\n// nine point stencil\nvec2 laplacian2(vec2 position) {\n    vec2 pixelSize = 5. / iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture( iChannel0,  position - P.xy ).xy // first row\n\t+ texture( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture( iChannel0,  position - P.wy ).xy\n\t+  texture( iChannel0,  position - P.xz).xy // seond row\n\t- 6.0* texture( iChannel0,  position ).xy\n\t+   texture( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture( iChannel0,  position +P.wy).xy  // third row\n\t+ texture( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture( iChannel0,  position + P.xy   ).xy;\t\n}\n// nine point stencil\nvec2 laplacian3(vec2 position) {\n    vec2 pixelSize = 7. / iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture( iChannel0,  position - P.xy ).xy // first row\n\t+ texture( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture( iChannel0,  position - P.wy ).xy\n\t+  texture( iChannel0,  position - P.xz).xy // seond row\n\t- 6.0* texture( iChannel0,  position ).xy\n\t+   texture( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture( iChannel0,  position +P.wy).xy  // third row\n\t+ texture( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture( iChannel0,  position + P.xy   ).xy;\t\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    if(iFrame == 0) {\n        float rnd=rand(uv)+(sin(50.*uv.x)+sin(50.*uv.y))*0.;\n        if(rnd>0.5) fragColor.x=.5;\n        else fragColor.y=.5;\n        return;\n    }\n    float F = uv.y*0.05+0.0;\n    float k = uv.x*0.05+0.025;\n    vec4 data = texture(iChannel0, uv);\n    float u = data.x;\n    float v = data.y;\n    vec2 Duv = (1.*laplacian1(uv)+0.*laplacian2(uv)+0.*laplacian3(uv))*Diffusion;\n    float du = Duv.x - u*v*v + F*(1.-u);\n    float dv = Duv.y + u*v*v - (F+k)*v;\n    fragColor.xy = clamp(vec2(u+du*dt,v+dv*dt), 0., 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const vec2 Diffusion = vec2(0.08,0.03);\n//const float F = 0.04;\n//const float k = 0.06;\nconst float dt = 2.;\n\nfloat rand(vec2 co){\n\t// implementation found at: lumina.sourceforge.net/Tutorials/Noise.html\n\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n// nine point stencil\nvec2 laplacian1(vec2 position) {\n    vec2 pixelSize = 1. / iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture( iChannel0,  position - P.xy ).xy // first row\n\t+ texture( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture( iChannel0,  position - P.wy ).xy\n\t+  texture( iChannel0,  position - P.xz).xy // seond row\n\t- 6.0* texture( iChannel0,  position ).xy\n\t+   texture( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture( iChannel0,  position +P.wy).xy  // third row\n\t+ texture( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture( iChannel0,  position + P.xy   ).xy;\t\n}\n// nine point stencil\nvec2 laplacian2(vec2 position) {\n    vec2 pixelSize = 5. / iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture( iChannel0,  position - P.xy ).xy // first row\n\t+ texture( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture( iChannel0,  position - P.wy ).xy\n\t+  texture( iChannel0,  position - P.xz).xy // seond row\n\t- 6.0* texture( iChannel0,  position ).xy\n\t+   texture( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture( iChannel0,  position +P.wy).xy  // third row\n\t+ texture( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture( iChannel0,  position + P.xy   ).xy;\t\n}\n// nine point stencil\nvec2 laplacian3(vec2 position) {\n    vec2 pixelSize = 7. / iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture( iChannel0,  position - P.xy ).xy // first row\n\t+ texture( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture( iChannel0,  position - P.wy ).xy\n\t+  texture( iChannel0,  position - P.xz).xy // seond row\n\t- 6.0* texture( iChannel0,  position ).xy\n\t+   texture( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture( iChannel0,  position +P.wy).xy  // third row\n\t+ texture( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture( iChannel0,  position + P.xy   ).xy;\t\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    /*if(iFrame == 0) {\n        float rnd=rand(uv)+(sin(50.*uv.x)+sin(50.*uv.y))*0.;\n        if(rnd>0.5) fragColor.x=.1;\n        else fragColor.y=.1;\n        return;\n    }*/\n    float F = uv.y*0.05+0.0;\n    float k = uv.x*0.05+0.025;\n    vec4 data = texture(iChannel0, uv);\n    float u = data.x;\n    float v = data.y;\n    vec2 Duv = (1.*laplacian1(uv)+0.*laplacian2(uv)+0.*laplacian3(uv))*Diffusion;\n    float du = Duv.x - u*v*v + F*(1.-u);\n    float dv = Duv.y + u*v*v - (F+k)*v;\n    fragColor.xy = clamp(vec2(u+du*dt,v+dv*dt), 0., 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const vec2 Diffusion = vec2(0.08,0.03);\n//const float F = 0.04;\n//const float k = 0.06;\nconst float dt = 2.;\n\nfloat rand(vec2 co){\n\t// implementation found at: lumina.sourceforge.net/Tutorials/Noise.html\n\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n// nine point stencil\nvec2 laplacian1(vec2 position) {\n    vec2 pixelSize = 1. / iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture( iChannel0,  position - P.xy ).xy // first row\n\t+ texture( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture( iChannel0,  position - P.wy ).xy\n\t+  texture( iChannel0,  position - P.xz).xy // seond row\n\t- 6.0* texture( iChannel0,  position ).xy\n\t+   texture( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture( iChannel0,  position +P.wy).xy  // third row\n\t+ texture( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture( iChannel0,  position + P.xy   ).xy;\t\n}\n// nine point stencil\nvec2 laplacian2(vec2 position) {\n    vec2 pixelSize = 5. / iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture( iChannel0,  position - P.xy ).xy // first row\n\t+ texture( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture( iChannel0,  position - P.wy ).xy\n\t+  texture( iChannel0,  position - P.xz).xy // seond row\n\t- 6.0* texture( iChannel0,  position ).xy\n\t+   texture( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture( iChannel0,  position +P.wy).xy  // third row\n\t+ texture( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture( iChannel0,  position + P.xy   ).xy;\t\n}\n// nine point stencil\nvec2 laplacian3(vec2 position) {\n    vec2 pixelSize = 7. / iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture( iChannel0,  position - P.xy ).xy // first row\n\t+ texture( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture( iChannel0,  position - P.wy ).xy\n\t+  texture( iChannel0,  position - P.xz).xy // seond row\n\t- 6.0* texture( iChannel0,  position ).xy\n\t+   texture( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture( iChannel0,  position +P.wy).xy  // third row\n\t+ texture( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture( iChannel0,  position + P.xy   ).xy;\t\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    /*if(iFrame == 0) {\n        float rnd=rand(uv)+(sin(50.*uv.x)+sin(50.*uv.y))*0.;\n        if(rnd>0.5) fragColor.x=.1;\n        else fragColor.y=.1;\n        return;\n    }*/\n    float F = uv.y*0.05+0.0;\n    float k = uv.x*0.05+0.025;\n    vec4 data = texture(iChannel0, uv);\n    float u = data.x;\n    float v = data.y;\n    vec2 Duv = (1.*laplacian1(uv)+0.*laplacian2(uv)+0.*laplacian3(uv))*Diffusion;\n    float du = Duv.x - u*v*v + F*(1.-u);\n    float dv = Duv.y + u*v*v - (F+k)*v;\n    fragColor.xy = clamp(vec2(u+du*dt,v+dv*dt), 0., 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const vec2 Diffusion = vec2(0.08,0.03);\n//const float F = 0.04;\n//const float k = 0.06;\nconst float dt = 2.;\n\nfloat rand(vec2 co){\n\t// implementation found at: lumina.sourceforge.net/Tutorials/Noise.html\n\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n// nine point stencil\nvec2 laplacian1(vec2 position) {\n    vec2 pixelSize = 1. / iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture( iChannel0,  position - P.xy ).xy // first row\n\t+ texture( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture( iChannel0,  position - P.wy ).xy\n\t+  texture( iChannel0,  position - P.xz).xy // seond row\n\t- 6.0* texture( iChannel0,  position ).xy\n\t+   texture( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture( iChannel0,  position +P.wy).xy  // third row\n\t+ texture( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture( iChannel0,  position + P.xy   ).xy;\t\n}\n// nine point stencil\nvec2 laplacian2(vec2 position) {\n    vec2 pixelSize = 5. / iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture( iChannel0,  position - P.xy ).xy // first row\n\t+ texture( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture( iChannel0,  position - P.wy ).xy\n\t+  texture( iChannel0,  position - P.xz).xy // seond row\n\t- 6.0* texture( iChannel0,  position ).xy\n\t+   texture( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture( iChannel0,  position +P.wy).xy  // third row\n\t+ texture( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture( iChannel0,  position + P.xy   ).xy;\t\n}\n// nine point stencil\nvec2 laplacian3(vec2 position) {\n    vec2 pixelSize = 7. / iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture( iChannel0,  position - P.xy ).xy // first row\n\t+ texture( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture( iChannel0,  position - P.wy ).xy\n\t+  texture( iChannel0,  position - P.xz).xy // seond row\n\t- 6.0* texture( iChannel0,  position ).xy\n\t+   texture( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture( iChannel0,  position +P.wy).xy  // third row\n\t+ texture( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture( iChannel0,  position + P.xy   ).xy;\t\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    /*if(iFrame == 0) {\n        float rnd=rand(uv)+(sin(50.*uv.x)+sin(50.*uv.y))*0.;\n        if(rnd>0.5) fragColor.x=.1;\n        else fragColor.y=.1;\n        return;\n    }*/\n    float F = uv.y*0.05+0.0;\n    float k = uv.x*0.05+0.025;\n    vec4 data = texture(iChannel0, uv);\n    float u = data.x;\n    float v = data.y;\n    vec2 Duv = (1.*laplacian1(uv)+0.*laplacian2(uv)+0.*laplacian3(uv))*Diffusion;\n    float du = Duv.x - u*v*v + F*(1.-u);\n    float dv = Duv.y + u*v*v - (F+k)*v;\n    fragColor.xy = clamp(vec2(u+du*dt,v+dv*dt), 0., 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}