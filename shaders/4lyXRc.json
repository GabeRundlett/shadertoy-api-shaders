{
    "Shader": {
        "info": {
            "date": "1485193232",
            "description": "Androids reflecting",
            "flags": 0,
            "hasliked": 0,
            "id": "4lyXRc",
            "likes": 13,
            "name": "Mirror, Mirror",
            "published": 3,
            "tags": [
                "reflection"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 674
        },
        "renderpass": [
            {
                "code": "// \"Mirror, Mirror\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec3 qHit, qnHit, sunDir, msOrg;\nvec2 rAngACs;\nfloat tCur, dstFar, msRad, msDep, msDir, mDskRad, frmWid;\nint idObj;\nbool isRefl;\n\nfloat PrRndBoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float s);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrERCylDf (vec3 p, float r, float rt, float h);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat AngQnt (float a, float s, float nr);\n\nconst float pi = 3.14159;\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 vn, col;\n  vec2 w;\n  float sd, f;\n  vec2 e = vec2 (0.01, 0.);\n  if (rd.y > 0.) {\n    ro.xz += 2. * tCur;\n    sd = max (dot (rd, sunDir), 0.);\n    col = vec3 (0.1, 0.2, 0.4) + 0.2 * (1. - max (rd.y, 0.)) +\n       0.1 * pow (sd, 16.) + 0.2 * pow (sd, 256.);\n    f = Fbm2 (0.02 * (ro.xz + rd.xz * (100. - ro.y) / max (rd.y, 0.01)));\n    col = mix (col, vec3 (1.), clamp (0.2 + 0.8 * f * rd.y, 0., 1.));\n  } else {\n    ro -= (ro.y / rd.y) * rd;\n    w = 4. * ro.xz;\n    f = Fbm2 (w);\n    col = mix (vec3 (0.3, 0.4, 0.1), vec3 (0.4, 0.5, 0.2), f) *\n         (1. - 0.1 * Noisefv2 (w));\n    vn = normalize (vec3 (f - Fbm2 (w + e.xy), 0.1, f - Fbm2 (w + e.yx)));\n    col *= 0.1 + 0.9 * max (dot (vn, sunDir), 0.);\n    col = mix (col, vec3 (0.45, 0.55, 0.7), pow (1. + rd.y, 64.));\n  }\n  return col;\n}\n\nfloat MirHit (vec3 ro, vec3 rd)\n{\n  vec3 v;\n  float h, b, d;\n  v = ro - msOrg;\n  b = dot (rd, v);\n  d = b * b + msRad * msRad - dot (v, v);\n  h = dstFar;\n  if (d > 0.) {\n    d = sqrt (d);\n    h = - b + d * msDir;\n    qHit = ro + h * rd;\n    v = qHit - msOrg;\n    if (qHit.z > 0. || length (v.xy) > mDskRad) h = dstFar;\n    else qnHit = v / msRad;\n  }\n  return h;\n}\n\nfloat RobDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 s;\n  float d, szFac;\n  p.xz = vec2 (- p.z, p.x);\n  szFac = 8.;\n  p *= szFac;\n  dMin *= szFac;\n  q = p;  q.y -= 2.2;\n  d = max (PrSphDf (q, 0.85), - q.y);\n  q = p;  q.y -= 1.2;\n  d = min (d, PrERCylDf (q.xzy, 0.9, 0.28, 0.7));\n  q = p;  q.x = abs (q.x) - 0.3;  q.y -= 3.;\n  q.xy = Rot2D (q.xy, 0.2 * pi);\n  q.y -= 0.1;\n  d = min (d, PrERCylDf (q.xzy, 0.06, 0.04, 0.3));\n  q = p;  q.x = abs (q.x) - 1.05;  q.y -= 2.1;\n  q.yz = Rot2Cs (q.yz, rAngACs * vec2 (1.));\n  q.y -= -0.8;\n  d = min (d, PrERCylDf (q.xzy, 0.2, 0.15, 0.6));\n  q = p;  q.x = abs (q.x) - 0.4;  q.y -= 0.2;\n  d = min (d, PrERCylDf (q.xzy, 0.25, 0.15, 0.55));\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  q = p;  q.x = abs (q.x) - 0.4;  q.yz -= vec2 (2.6, 0.7);\n  d = PrSphDf (q, 0.15);\n  if (d < dMin) { dMin = d;  idObj = 3; }\n  dMin /= szFac;\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  if (! isRefl) {\n    d = dMin;\n    q = p;\n    q.y -= msOrg.y;\n    d = min (d, PrCylDf (q, mDskRad + frmWid, msDep));\n    q.z -= -0.01;\n    d = max (d, - PrCylDf (q, mDskRad, msDep));\n    if (d < dMin) { dMin = d;  idObj = 1; }\n    q = p;\n    q.y -= 0.2 * frmWid;\n    d = PrRndBoxDf (q, vec3 (0.4, 0.2 * frmWid, msDep), 0.01);\n    if (d < dMin) { dMin = d;  idObj = 1; }\n  }\n  q = p;\n  q.xz = Rot2D (q.xz, AngQnt (atan (q.z, - q.x), 0.5, 13.));\n  q.x -= -2.;\n  dMin = RobDf (q, dMin);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = 0; j < 25; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += 0.02;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstObj, dstMir, sh;\n  int idObjT;\n  bool isBg;\n  if (rd.z > 0.) dstMir = MirHit (ro, rd);\n  else dstMir = dstFar;\n  isRefl = false;\n  isBg = false;\n  dstObj = ObjRay (ro, rd);\n  if (dstMir < min (dstObj, dstFar)) {\n    rd = reflect (rd, qnHit);\n    ro = qHit;\n    isRefl = true;\n    dstObj = ObjRay (ro, rd);\n    if (dstObj >= dstFar) isBg = true;\n  } else if (dstObj >= dstFar) isBg = true;\n  if (! isBg) {\n    ro += dstObj * rd;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == 1) {\n      vn = VaryNf (100. * ro, vn, 2.);\n      col = vec3 (0.6, 0.4, 0.1);\n    } else if (idObj == 2) col = vec3 (0.8, 0.2, 0.5);\n    else if (idObj == 3) col = vec3 (1., 1., 0.);\n    sh = ObjSShadow (ro, sunDir);\n    col = col * (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.)) +\n       0.2 * sh * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n  } else {\n    col = BgCol (ro, rd);\n    if (rd.y < 0.) {\n      ro -= (ro.y / rd.y) * rd;\n      col *= ObjSShadow (ro, sunDir);\n    }\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el, t;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  dstFar = 15.;\n  az = 0.;\n  el = 0.02 * pi;\n  if (mPtr.z > 0.) {\n    az = clamp (az - 4. * mPtr.x, -0.4 * pi, 0.4 * pi);\n    el = clamp (el - 3. * mPtr.y, -0.01 * pi, 0.3 * pi);\n  } else az += 0.3 * pi * sin (0.011 * 2. * pi * tCur);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  t = mod (0.1 * tCur, 2.);\n  msDir = 2. * floor (t) - 1.;\n  t = pow (0.5 * (1. + cos (2. * pi * t)), 2.);\n  msRad = exp (8. * t) + 0.4;\n  mDskRad = 0.75;\n  frmWid = 0.05;\n  msDep = 0.25;\n  msOrg = vec3 (0., mDskRad + frmWid,\n     - sqrt (msRad * msRad - mDskRad * mDskRad) * msDir - msDep);\n  t = 2. * pi * (0.5 - abs (mod (0.3 * tCur, 1.) - 0.5)); \n  rAngACs = vec2 (cos (t), sin (t));\n  ro = vec3 (0., mDskRad + frmWid, -7.) * vuMat;\n  rd = normalize (vec3 (uv, 5.)) * vuMat;\n  sunDir = normalize (vec3 (-1., 1., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrRndBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrERCylDf (vec3 p, float r, float rt, float h)\n{\n  vec2 dc;\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z - 0.5 * h) - h;\n  dc = vec2 (dxy, dz) + rt;\n  return min (min (max (dc.x, dz), max (dc.y, dxy)), length (dc) - rt);\n}\n\nfloat AngQnt (float a, float s, float nr)\n{\n  return (s + floor (a * (nr / (2. * pi)))) * (2. * pi / nr);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.1, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}