{
    "Shader": {
        "info": {
            "date": "1577939404",
            "description": "cellernoise",
            "flags": 0,
            "hasliked": 0,
            "id": "wtcGDs",
            "likes": 3,
            "name": "\"Cell\"",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "tono",
            "viewed": 439
        },
        "renderpass": [
            {
                "code": "//i posted the shader on neort and shadertoy\n\n#define A 3\n\nmat2 rot(float a)\n{\n    float s = sin(a),c = cos(a);\n    return mat2(c,s,-s,c);\n}\n\nvec3 random33(vec3 st)\n{\n    st = vec3(dot(st,vec3(127.1, 311.7,811.5)),\n                dot(st, vec3(269.5, 183.3,211.91)),\n                dot(st, vec3(511.3, 631.19,431.81))\n                );\n    return -1.0 + 2.0 * fract(sin(st) * 43758.5453123);\n}\n\nfloat norm(vec3 p, float n)\n{\n    vec3 t=pow(abs(p),vec3(n));\n    return pow(t.x+t.y,1./n);\n}\n\nvec4 celler3D(vec3 i,vec3 sepc)\n{\n    float stime = iTime / 1.5;\n    vec3 sep = i * sepc;\n    vec3 fp = floor(sep);\n    vec3 sp = fract(sep);\n    float dist = 5.;\n    vec3 mp = vec3(0.);\n\n    for (int z = -1; z <= 1; z++)\n    {\n        for (int y = -1; y <= 1; y++)\n        {\n            for (int x = -1; x <= 1; x++)\n            {\n                vec3 neighbor = vec3(x, y ,z);\n                vec3 pos = vec3(random33(fp+neighbor));\n                pos = sin( (pos*50. +stime/(230. + 100.*cos(stime/130.))) )* 0.5 + 0.5;\n                \n                float shape = 0.5 + clamp(sin(stime),0.,1.) *30.;\n                float rate = clamp( (sin(stime/2.)),0.,1.);\n                float divs = norm(neighbor + pos - sp,shape);\n                divs = mix(length(neighbor + pos - sp),divs,rate);\n                mp = (dist >divs)?pos:mp;\n                dist = (dist > divs)?divs:dist;\n            }\n        }\n    }\n    return vec4(mp,dist);\n}\n\nvoid scene(out vec3 color,in vec2 F)\n{\n    vec2 p = (F.xy * 2.0 - iResolution.xy) / min(iResolution.x,iResolution.y);\n    //vec3 color = vec3(0.);\n    \n    vec3 cp = vec3(0.,0.,-5.);\n    vec3 cd = vec3(0.,0.,1.);\n    vec3 cu = vec3(0.,1.,0.);\n    vec3 cs = normalize(cross(cd,cu));\n    cu = normalize(cross(cd,cs));\n    \n    float target = 5.0;\n    \n    vec3 rd = normalize(vec3(p.x * cs + p.y * cu + cd * target));\n    \n    float depth = 0.;\n    \n    float stime = iTime/ 150.;\n    \n    for(int i = 0 ; i < 3 ; i++)\n    {\n        vec3 rp = cp + rd * depth;\n        vec4 celler = celler3D(rp,vec3(50.)+1.1*sin(stime) );\n        float w = celler.w;\n        w = max(celler.w,0.001);\n        \n        if (celler.w - 0.3 < 0.0001 && depth > 0.0001)\n        {\n            color += celler.xyz - celler.w;\n            break;\n        }\n        if(depth > 1.){break;}\n        depth += w;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //supersampling | oversampling\n\t//https://youtu.be/Pcph14WlLsk   \n    \n    vec3 color = vec3(0.);\n    \n    for(int i = 0;i < A;i++ )\n    {\n        for(int j = 0; j < A;j++)\n        {\n            vec2 d = vec2(float(i),float(j)) - vec2(float(i),float(j))/2.;\n            d /= float(A);\n            scene(color,fragCoord + d);\n        }\n    }\n    color /= float(A * A);\n    \n    fragColor = vec4(color ,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}