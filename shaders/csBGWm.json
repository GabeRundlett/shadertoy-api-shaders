{
    "Shader": {
        "info": {
            "date": "1667660006",
            "description": "Made in the Shader Royale at Inercia 2022, mostly unplanned, no idea how it ended up in this strange state.",
            "flags": 0,
            "hasliked": 0,
            "id": "csBGWm",
            "likes": 4,
            "name": "Fluttering thing",
            "published": 3,
            "tags": [
                "shaderroyale"
            ],
            "usePreview": 0,
            "username": "aldroid",
            "viewed": 178
        },
        "renderpass": [
            {
                "code": "\nmat2 rot(float a) {\n  return mat2(cos(a), -sin(a),sin(a), cos(a));\n}\n\nfloat wing2(vec2 uv) {\n  uv.x = abs(uv.x);\n  return length(uv + sin(uv.y)*2.)-1.;\n}\n\nfloat wing(vec3 p) {\n  p.x = abs(p.x);\n  p.xz *= rot(sin(iTime*20.)/5.);\n  return max(abs(p.z)-0.01,wing2(p.xy));\n}\n\n\nfloat flutter(vec3 p) {\n    p.y += sin(iTime);\n  p.x += sin(iTime*2.)*2.;\n  p.yz *= rot (1.2+sin(iTime*2.)*0.2);\n  p.xy *= rot(sin(iTime*2.+0.5));\n  float bod=length(p/vec3(0.3,1.,0.3)+vec3(0.,0.,0.3))-1.;\n  bod /= 3.;\n  float hed = length(p-vec3(0.,1.,0.)) -0.2;\n  float flutter = min(min(wing(p/3.),bod),hed);\n  return flutter;\n}\n\nfloat flh = 3.5;\nfloat twgl = 100.;\n\nfloat twimst(vec3 p) {\n  p.yz *= rot(iTime+p.x/10.);\n  \n  float twgls = max(abs(p.y)-0.4,abs(p.z)-0.4);\n  twgl = min(twgl,twgls);\n  return twgls;\n}\n\nfloat flugl = 100.;\n\nfloat map(vec3 p) {\n\n  float flut = flutter(p);\n  flugl = min(flugl,flut);\n  float flo = p.y+flh;\n  \n  float muun = length(p - vec3(19.,12.,25.))-1.;\n  \n  float twi=twimst(p-vec3(0.,0.,20.));\n  \n  return min(min(min(flut, flo), muun),twi);\n}\n\n\n\nvec3 skydome(vec3 rd) {\n  return vec3(vec2(-rd.y),rd.y);\n}\n\nvec3 gn(vec3 p) {\n  vec2 e=vec2(0.001,0);\n  return normalize(map(p) - vec3(map(p-e.xyy), map(p-e.yxy), map(p-e.yyx)));\n}\n\nvec3 wh = vec3(1);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = fragCoord/iResolution.xy*2.-1.;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  vec3 ro=vec3(0,0,-8), rd=normalize(vec3(uv,1));\n  \n  rd.x += max(0.,sin(uv.y*4.))*0.003;\n  rd.y += max(0.,cos(uv.x*4.))*0.003;\n  \n  float d,t=0.;\n  \n  for(int i=0; i < 1000; ++i ) {\n    d = map(ro+rd*t);\n    t+=d;\n    if (d < 0.01) {\n      vec3 p = ro + rd * t;\n        \n      if (p.y > 0.3-flh)\n        break;\n      else {\n        wh = vec3(0.5,0.5,1);\n        vec3 n = gn(p);\n        n.x += sin(iTime*4.+30.*p.z)/50.;\n        n.y += cos(iTime*4.+30.*p.z)/50.;\n        rd = reflect(rd,n);\n        ro = p;\n        t = 0.2;\n      }\n    }\n  }\n  \n  \n  vec3 col = skydome(rd);\n  \n  vec3 ld = normalize(vec3(3,4,-10));\n  \n  vec3 p = ro + rd * t;\n  \n  if (d < 0.01) {\n    vec3 n = gn(ro+rd*t);\n    if (p.y > 3.) {\n      col = vec3(1.);\n    } else {\n      if (p.z > 3.) {\n        col = vec3(0,0.4,0);\n      } else {\n        col = vec3(0.3,0,0);\n      }\n      col += pow(max(dot(reflect(-ld,n),rd),0.),30.);\n      col += dot(n,ld);\n    }\n  } else {\n    \n    col += vec3(0.3,0.3,0.)* 0.1/pow(twgl,2.);\n    col += vec3(0.6,0.,0.4)* 0.1/flugl;\n }\n  \n  col *= wh;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}