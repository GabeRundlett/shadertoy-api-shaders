{
    "Shader": {
        "info": {
            "date": "1472263103",
            "description": "A distant terrestrial world with a rough and rugged terrain.",
            "flags": 1,
            "hasliked": 0,
            "id": "Xtc3Ws",
            "likes": 10,
            "name": "Planet Texture",
            "published": 3,
            "tags": [
                "texture",
                "light",
                "space",
                "planet",
                "raymarcher",
                "stars",
                "world"
            ],
            "usePreview": 0,
            "username": "jackdavenport",
            "viewed": 1123
        },
        "renderpass": [
            {
                "code": "#define MAX_ITERATIONS 512\n#define MAX_DISTANCE 20000.\n#define SHADOW_BIAS .01\n\n#define EPSILON .001\n#define PI 3.14159265358979323846264338327950288419\n\n#define LIGHT_COL vec3(252.,212.,128.)/255.\n#define LIGHT_AMB vec3(.1)\n#define LIGHT_DIR normalize(vec3(45.,30.,45.))\n\nvec2 rot2D(vec2 p, float angle) {\n\tangle = radians(angle);\n    float s = sin(angle), c = cos(angle);\n    return mat2(c,s,-s,c)*p;\n}\n\n// Noise by iq\n// Source: https://www.shadertoy.com/view/XslGRr\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture( iChannel1, (uv+ 0.5)/256.0, -100.0 ).yx;\n\treturn -1.0+2.0*mix( rg.x, rg.y, f.z );\n}\n\nfloat dstScene(vec3 p) {\n    vec3  n = normalize(p);\n    vec2 uv = asin(n.xy)/PI+.5;\n    float h = texture(iChannel0,uv).x*.1;\n\treturn length(p)-(6300.+(1250.*h));\n}\n\nfloat raymarch(vec3 ori, vec3 dir) {\n    float t = 0.;\n    for(int i = 0; i < MAX_ITERATIONS; i++) {\n    \tfloat scn = dstScene(ori+dir*t);\n        if(scn < EPSILON*t || t > MAX_DISTANCE)\n            break;\n        t += scn * .75;\n    }\n    return t;\n}\n\nvec3 calcNormal(vec3 p, float t) {\n\tvec2 e = vec2(EPSILON*t,0.);\n    vec3 n = vec3(dstScene(p+e.xyy)-dstScene(p-e.xyy),\n                  dstScene(p+e.yxy)-dstScene(p-e.yxy),\n                  dstScene(p+e.yyx)-dstScene(p-e.yyx));\n    return normalize(n);\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax, in float k )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<64; i++ )\n    {\n\t\tfloat h = dstScene( ro + rd*t );\n        res = min( res, k*h/t );\n        t += clamp( h, 0.07, .5 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// Shadows by iq\n// Source: https://www.shadertoy.com/view/Xds3zN\nvec3 calcLighting(vec3 col, vec3 p, vec3 n, vec3 r, float sh, vec3 ori) {\n\tvec3 ds = vec3(0.);\n    vec3 ss = vec3(0.);\n    float d = max(dot(LIGHT_DIR,n),0.);\n    float s = 0.;\n    d *= softshadow(p,LIGHT_DIR,SHADOW_BIAS,MAX_DISTANCE,64.);\n    if(d > 0. && sh > 0.)\n        s = pow(max(dot(LIGHT_DIR,r),0.),sh);\n    ds += LIGHT_COL * d;\n    ss += LIGHT_COL * s;\n    vec3 plv = ori-p;\n    vec3 pld = normalize(plv);\n    d = max(dot(pld,n),0.);\n    s = 0.;\n    d *= softshadow(p,pld,SHADOW_BIAS,length(plv),64.);\n    if(d > 0. && sh > 0.)\n        s = pow(max(dot(pld,r),0.),sh);\n    float a = 1.-clamp(length(plv)/3500.,0.,1.);\n    ds += vec3(d*a);\n    ss += vec3(s*a);\n    return (col*(LIGHT_AMB+ds))+ss;\n}\n\nvec3 getSky(vec3 dir) {\n\tvec3 c = vec3(noise(dir*256.));\n    if(c.x < .8) {\n    \tc = vec3(0.);\n    }\n    return c;\n}\n\nvec3 shade(vec3 ori, vec3 dir) {\n \n    float  t = raymarch(ori,dir);\n    vec3 col = vec3(0.);\n    \n    if(t < MAX_DISTANCE) {\n    \tvec3 p = ori+dir*t;\n        vec3 n = calcNormal(p,t);\n        vec3 r = normalize(reflect(dir, n));\n        \n        vec2 uv = asin(n.xy)/PI+.5;\n        \n        col = texture(iChannel0,uv).xyz;\n        col = calcLighting(col, p, n, r, 30., ori);\n    } else {\n    \tcol = getSky(dir);\n    }\n    \n    float f = pow(max(dot(LIGHT_DIR,dir),0.),60.);\n  \tif(raymarch(ori,LIGHT_DIR) >= MAX_DISTANCE)\n         col += LIGHT_COL * f;\n    \n    return col;\n    \n}\n\nvec3 getCameraOrigin(float t) {\n\tfloat gt = mod(t, 15.);\n    float  r = 1.-(smoothstep(3.,6.,gt)*(1.-smoothstep(12.,15.,gt)));\n    float  a = radians(35.*(2.+t*.1));\n    return vec3(cos(a),0.,sin(a))*mix(7050.,15000.,r);   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    \n    vec3 ori = getCameraOrigin(iTime);\n    vec3 dir = vec3(uv,1.);\n    \n    vec3 f = normalize(-ori);\n    vec3 u = normalize(cross(f,vec3(0.,1.,0.)));\n    vec3 v = normalize(cross(u,f));\n    dir = normalize(mat3(u,v,f)*dir);\n    \n\tfragColor = vec4(shade(ori,dir),1.);\n}\n\nvoid mainVR(out vec4 fc, in vec2 fp, in vec3 ro, in vec3 rd) {\n    vec3 ori = ro + getCameraOrigin(iTime);\n    vec3 dir = normalize(rd);\n    fc = vec4(shade(ori,dir),1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}