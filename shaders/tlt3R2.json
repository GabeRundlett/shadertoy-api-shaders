{
    "Shader": {
        "info": {
            "date": "1576961557",
            "description": "Recursive gaussian filter, 3*3 kernel",
            "flags": 32,
            "hasliked": 0,
            "id": "tlt3R2",
            "likes": 4,
            "name": "Recursive gaussian filter",
            "published": 3,
            "tags": [
                "filter",
                "recursive",
                "convolution",
                "gaussian"
            ],
            "usePreview": 0,
            "username": "Guilouf",
            "viewed": 443
        },
        "renderpass": [
            {
                "code": "// Ne fait rien que retranscrire le buffer, car ici pas de backbuffer sur image possible\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    vec4 draw = texture(iChannel0,uv);\n    fragColor = vec4(draw.rgb,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define move(x, y) ((fragCoord.xy + vec2(x, y)) / iResolution.xy)\n#define movec(U) ((fragCoord.xy + U) / iResolution.xy)\n#define uv (fragCoord.xy / iResolution.xy)\n#define gaussian(x, y)  (gaussian_vec( vec2(x, y)))\n\nfloat gaussian_vec( vec2 coords)\n    // for 3*3 gaussian kernels only, sigma 1\n{\n    // 1 / sum of the kernel before multiplied by s\n    float s = 0.6193470305571772;  \n    return exp(-2. * ( coords.x * coords.x + coords.y * coords.y)) * s ;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define convo(x, y, draw) (texture(iChannel1, move(x, y)) * gaussian(x, y))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    if (iFrame == 0 ) {  // texture init\n    \tfragColor = texture(iChannel0,uv);\n        return;\n    } \n\n\tvec4 draw;\n\n    draw += convo(-1, -1, draw);\n    draw += convo(-1, 0, draw);\n    draw += convo(-1, 1, draw);\n    draw += convo(0, -1, draw);\n    draw += convo(0, 0, draw);\n    draw += convo(0, 1, draw);\n    draw += convo(1, -1, draw);\n    draw += convo(1, 0, draw);\n    draw += convo(1, 1, draw);\n    \n    fragColor = draw;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}