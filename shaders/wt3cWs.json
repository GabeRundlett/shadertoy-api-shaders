{
    "Shader": {
        "info": {
            "date": "1610169818",
            "description": "I wanted to make miffy, lol. This was also a good practice at making more complex 2D shapes (although i think some of my approaches are fairly hacky).",
            "flags": 0,
            "hasliked": 0,
            "id": "wt3cWs",
            "likes": 3,
            "name": "Animated Miffy style rabbit",
            "published": 3,
            "tags": [
                "2d",
                "cute",
                "animated",
                "shapes",
                "rabbit",
                "miffy"
            ],
            "usePreview": 0,
            "username": "intrakits",
            "viewed": 311
        },
        "renderpass": [
            {
                "code": "mat2 rotate(float r) {\n    float c = cos(r);\n    float s = sin(r);\n    return mat2(c, -s, s, c);\n}\n\nvec3 circle (vec2 uv, float posX, float posY, float r, float blur, vec3 color){\n    uv.x-=posX;\n    uv.y-=posY;\n    \n    float d = length(uv);\n    return color * vec3(smoothstep(r,r-blur,d));\n}\nvec3 circle (vec2 uv, float r, float blur, vec3 color){\n    float d = length(uv);\n    return color * vec3(smoothstep(r,r-blur,d));\n}\nvec3 square(vec2 uv, float w, float h, float posX, float posY, float rot, float blur, vec3 color){\n    uv*=rotate(rot);\n    float wPos = length(uv.x-posX);\n    float hPos = length(uv.y-posY);\n    \n    float col = smoothstep(w,w-blur, wPos);\n    col *= smoothstep(h,h-blur, hPos);\n    return color*vec3(col);\n}\nvec3 triangle(vec2 uv, float w, float h, float posX, float posY, float rot, float blur, vec3 color){\n    uv.x-=posX;\n    uv.y-=posY;\n    uv*=rotate(rot);\n    vec3 sq = square(uv,w,h,0.,0.,0.,blur,color);\n    uv*=rotate(3.1415/2./2.);\n    uv-= vec2(0.,h);\n    float hyp = sqrt(w*w + h*h);\n    vec3 sqMask = square(uv,hyp,h,0.,0., 0.,blur,color);\n    sq -= sqMask;\n    return sq;\n}\nvec3 ellipse(vec2 uv, float posX, float posY, float rot, float a,float b, float blur, vec3 color){\n    uv -= vec2(posX,posY);\n    uv*=rotate(rot);\n    float x = uv.x;\n    float y = sqrt((1.-a)*(1.-((x*x)/(1.-b))));\n    float d = length(uv);\n    return color * vec3(smoothstep(y,y-blur,d));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    uv-= 0.5;\n    \n    uv.x *= iResolution.x/iResolution.y;\n\n    \n    //background\n    float blur = 0.01;\n    vec3 col = square(uv, 1., .3, 0., -.4,0., blur, vec3(0,.5,.2));\n    col = max(col, square(uv, 1., .3, 0., .2,0., blur, vec3(0.,0.,.5)));\n    \n    //ears\n    float a = 0.95;\n    float b = 0.995;\n    float posX = -0.1;\n    float posY = 0.14;\n    float rot = -0.1;\n    \n    //left ear outline\n    col = min(col,col-ellipse(uv, posX, posY-sin(iTime)*.025, rot, a, b, blur, vec3(1.)));\n    \n    //left ear fill\n    a = 0.96;\n    b = 0.997;\n    col = max(col,ellipse(uv, posX, posY-sin(iTime)*.025, rot, a, b, blur, vec3(1.)));\n    \n    //right ear outline\n    a = 0.95;\n    b = 0.995;\n    posX = 0.1;\n    posY = 0.14;\n    rot = 0.1;\n    col = min(col,col-ellipse(uv, posX, posY-sin(iTime)*.025, rot, a, b, blur, vec3(1.)));\n    \n    //right ear fill\n    a = 0.96;\n    b = 0.997;\n    col = max(col,ellipse(uv, posX, posY-sin(iTime)*.025, rot, a, b, blur, vec3(1.)));\n    //legs\n    col = min(col,col-circle (uv - vec2(.1,-.46), .08, blur, vec3(1.))); \n    col = max(col,circle (uv - vec2(.1,-.46), .07, blur, vec3(1.)));\n    col = min(col,col-circle (uv - vec2(-.06,-.46), .08, blur, vec3(1.))); \n    col = max(col,circle (uv - vec2(-.06,-.46), .07, blur, vec3(1.)));\n    //shirt\n    a = 0.93;\n    b = 0.91;\n    posX = 0.;\n    posY = -0.35;\n    rot = 3.14159/2.;\n    \n    col = min(col, col-ellipse(uv, posX, posY, rot, a, b, blur, vec3(1.))+square(uv, .3, .1, 0., -0.44,0., blur, vec3(1)));\n    a = 0.935;\n    b = 0.92;\n    col = max(col, ellipse(uv, posX, posY, rot, a, b, blur, vec3(1.,.4,.0))-square(uv, .254, .1, 0., -0.42,0., blur, vec3(1)));\n    \n    \n    a = 0.93;\n    b = 0.99;\n    posY = -0.4;\n    col = min(col, col-ellipse(uv, posX, posY, rot, a, b, blur, vec3(1.)));\n    a = 0.9299;\n    b = 0.988;\n    posY = -0.382;\n    col = max(col, ellipse(uv, posX, posY, rot, a, b, blur, vec3(1.,.4,0)));\n    \n    col = min(col, col - square(uv, .263, .05, 0., -0.37,0., blur, vec3(1)));\n    col = max(col, square(uv, .249, .056, 0., -0.3699,0., blur, vec3(1.,.4,0)));\n    \n    //arms\n    col = min(col,col-circle (uv - vec2(.27,-.35), .06, blur, vec3(1.))); \n    col = max(col,circle (uv - vec2(.27,-.35), .053, blur, vec3(1.))); \n    \n    col = min(col,col-circle (uv - vec2(-.27,-.35), .06, blur, vec3(1.))); \n    col = max(col,circle (uv - vec2(-.27,-.35), .053, blur, vec3(1.))); \n    //head\n    a = 0.95;\n    b = 0.91;\n    posX = 0.;\n    posY = -0.1;\n    rot = 3.14159/2.;\n    \n    col = min(col, col-ellipse(uv, posX, posY, rot, a, b, blur, vec3(1.)));\n    a = 0.954;\n    b = 0.933;\n    col = max(col, ellipse(uv, posX, posY, rot, a, b, blur, vec3(1.)));\n    //ear mask\n    \n    col = max(col,circle (uv - vec2(.094,.07), .055, blur, vec3(1.))); \n    col = max(col,circle (uv - vec2(-.094,.07), .055, blur, vec3(1.))); \n    \n    //eyes\n    col = min(col, col-circle (uv - vec2(.1,-sin(iTime)*.025-.12), 0.015, blur, vec3(1.)));\n    col = min(col, col-circle (uv - vec2(-.05,-sin(iTime)*.025-.12), 0.015, blur, vec3(1.)));\n    \n    //mouth\n    col = min(col, col-square(uv-=vec2(-0.1,-.37-sin(iTime)*.025), .03, .01, 0., .2,0.7, blur, vec3(1.)));\n    col = min(col, col-square(uv-=vec2(0.26,-sin(iTime)*.004), .03, .01, 0., .2,-0.7, blur, vec3(1.)));\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}