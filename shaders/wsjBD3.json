{
    "Shader": {
        "info": {
            "date": "1591024904",
            "description": "License CC0: A battered alien planet\nBeen experimenting with space inspired shaders\n",
            "flags": 0,
            "hasliked": 0,
            "id": "wsjBD3",
            "likes": 53,
            "name": "A battered alien planet",
            "published": 3,
            "tags": [
                "raymarching",
                "terrain"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 1875
        },
        "renderpass": [
            {
                "code": "// License CC0: A battered alien planet\n//  Been experimenting with space inspired shaders\n\n#define PI  3.141592654\n#define TAU (2.0*PI)\n\n#define TOLERANCE       0.00001\n#define MAX_ITER        65\n#define MIN_DISTANCE    0.01\n#define MAX_DISTANCE    9.0\n\nconst vec3  skyCol1       = vec3(0.35, 0.45, 0.6);\nconst vec3  skyCol2       = vec3(0.4, 0.7, 1.0);\nconst vec3  skyCol3       = pow(skyCol1, vec3(0.25));\nconst vec3  sunCol1       = vec3(1.0,0.6,0.4);\nconst vec3  sunCol2       = vec3(1.0,0.9,0.7);\nconst vec3  smallSunCol1  = vec3(1.0,0.5,0.25)*0.5;\nconst vec3  smallSunCol2  = vec3(1.0,0.5,0.25)*0.5;\nconst vec3  mountainColor = 1.0*sqrt(vec3(0.95, 0.65, 0.45));\nconst float cellWidth     = 1.0;\nconst vec4  planet        = vec4(80.0, -20.0, 100.0, 50.0)*1000.0;\n\nvoid rot(inout vec2 p, float a) {\n  float c = cos(a);\n  float s = sin(a);\n  p = vec2(p.x*c + p.y*s, -p.x*s + p.y*c);\n}\n\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nfloat egg(vec2 p, float ra, float rb) {\n  const float k = sqrt(3.0);\n  p.x = abs(p.x);\n  float r = ra - rb;\n  return ((p.y<0.0)       ? length(vec2(p.x,  p.y    )) - r :\n          (k*(p.x+r)<p.y) ? length(vec2(p.x,  p.y-k*r)) :\n                              length(vec2(p.x+r,p.y    )) - 2.0*r) - rb;\n}\n\nvec2 hash(vec2 p) {\n  p = vec2(dot (p, vec2 (127.1, 311.7)), dot (p, vec2 (269.5, 183.3)));\n  return -1. + 2.*fract (sin (p)*43758.5453123);\n}\n\nvec2 raySphere(vec3 ro, vec3 rd, vec4 sphere) {\n  vec3 center = sphere.xyz;\n  float radius = sphere.w;\n  vec3 m = ro - center.xyz;\n  float b = dot(m, rd);\n  float c = dot(m, m) - radius*radius;\n  if(c > 0.0 && b > 0.0) return vec2(-1.0, -1.0);\n  float discr = b * b - c;\n  if(discr < 0.0) return vec2(-1.0);\n  float normalMultiplier = 1.0;\n  float s = sqrt(discr);\n  float t0 = -b - s;\n  float t1 = -b + s;;\n  return vec2(t0, t1);\n}\n\nfloat noise1(vec2 p) {\n  vec2 n = mod2(p, vec2(cellWidth));\n  vec2 hh = hash(sqrt(2.0)*(n+1000.0));\n  hh.x *= hh.y;\n  \n  float r = 0.225*cellWidth;\n \n  float d = circle(p, 2.0*r);\n  \n  float h = hh.x*smoothstep(0.0, r, -d);\n\n  return h*0.25;\n}\n\nfloat noise2(vec2 p) {\n  vec2 n = mod2(p, vec2(cellWidth));\n  vec2 hh = hash(sqrt(2.0)*(n+1000.0));\n  hh.x *= hh.y;\n\n  rot(p, TAU*hh.y);\n  float r = 0.45*cellWidth;\n \n//  float d = circle(p, 1.0*r);\n  float d = egg(p, 0.75*r, 0.5*r*abs(hh.y));\n  \n  float h = (hh.x)*smoothstep(0.0, r, -2.0*d);\n\n  return h*0.275;\n}\n\n\nfloat height(vec2 p, float dd, int mx) {\n  const float aa   = 0.45;\n  const float ff   = 2.03;\n  const float tt   = 1.2;\n  const float oo   = 3.93;\n  const float near = 0.25;\n  const float far  = 0.65;\n  \n  float a = 1.0;\n  float o = 0.2;\n  float s = 0.0;\n  float d = 0.0;\n  \n  int i = 0;\n  \n  for (; i < 4;++i) {\n    float nn = a*noise2(p);\n    s += nn;\n    d += abs(a);\n    p += o;\n    a *= aa;\n    p *= ff;\n    o *= oo;\n    rot(p, tt);\n  }\n\n  float lod = s/d;\n\n  float rdd = dd/MAX_DISTANCE;\n  mx = int(mix(float(4), float(mx), step(rdd, far)));\n  \n  for (; i < mx; ++i) {\n    float nn = a*noise1(p);\n    s += nn;\n    d += abs(a);\n    p += o;\n    a *= aa;\n    p *= ff;\n    o *= oo;\n    rot(p, tt);\n  }\n  \n  float hid = (s/d);\n  \n  return mix(hid, lod, smoothstep(near, far, rdd));\n}\n\nfloat loheight(vec2 p, float d) {\n  return height(p, d, 0);\n}\n\nfloat height(vec2 p, float d) {\n  return height(p, d, 6);\n}\n\nfloat hiheight(vec2 p, float d) {\n  return height(p, d, 8);\n}\n  \nvec3 normal(vec2 p, float d) {\n  vec2 eps = vec2(0.00125, 0.0);\n  \n  vec3 n;\n  \n  n.x = (hiheight(p - eps.xy, d) - hiheight(p + eps.xy, d));\n  n.y = 2.0*eps.x;\n  n.z = (hiheight(p - eps.yx, d) - hiheight(p + eps.yx, d));\n  \n  return normalize(n);\n}\n\nconst float stepLength[] = float[](0.9, 0.25);\n\n\nfloat march(vec3 ro, vec3 rd, out int max_iter) {\n  float dt = 0.1;\n  float d = MIN_DISTANCE;\n  int currentStep = 0;\n  float lastd = d;\n  for (int i = 0; i < MAX_ITER; ++i)\n  {\n    vec3 p = ro + d*rd;\n    float h = height(p.xz, d);\n    \n    if (d > MAX_DISTANCE) {\n      max_iter = i;\n      return MAX_DISTANCE;\n    }\n\n    float hd = p.y - h;\n\n    if (hd < TOLERANCE) {\n      ++currentStep;\n      if (currentStep >= stepLength.length()) {\n        max_iter = i;\n        return d;\n      }\n      \n      d = lastd;\n      continue;\n    }\n\n    float sl = stepLength[currentStep];\n\n    dt = max(hd, TOLERANCE)*sl + 0.0025*d;\n    lastd = d;\n    d += dt;\n  }\n  \n  max_iter = MAX_ITER;\n  return MAX_DISTANCE;\n}\n\nvec3 sunDirection() {\n  return normalize(vec3(-0.5, 0.085, 1.0));\n}\n\nvec3 smallSunDirection() {\n  return normalize(vec3(-0.2, -0.05, 1.0));\n}\n\nfloat psin(float f) {\n  return 0.5 + 0.5*sin(f);\n}\n\nvec3 skyColor(vec3 ro, vec3 rd) {\n  vec3 sunDir = sunDirection();\n  vec3 smallSunDir = smallSunDirection();\n\n  float sunDot = max(dot(rd, sunDir), 0.0);\n  float smallSunDot = max(dot(rd, smallSunDir), 0.0);\n  \n  float angle = atan(rd.y, length(rd.xz))*2.0/PI;\n\n  vec3 skyCol = mix(mix(skyCol1, skyCol2, max(0.0, angle)), skyCol3, clamp(-angle*2.0, 0.0, 1.0));\n  \n  vec3 sunCol = 0.5*sunCol1*pow(sunDot, 20.0) + 8.0*sunCol2*pow(sunDot, 2000.0);\n  vec3 smallSunCol = 0.5*smallSunCol1*pow(smallSunDot, 200.0) + 8.0*smallSunCol2*pow(smallSunDot, 20000.0);\n\n  vec3 dust = pow(sunCol2*mountainColor, vec3(1.75))*smoothstep(0.05, -0.1, rd.y)*0.5;\n\n  vec2 si = raySphere(ro, rd, planet);\n  \n  vec3 planetSurface = ro + si.x*rd;\n  vec3 planetNormal = normalize(planetSurface - planet.xyz);\n  float planetDiff = max(dot(planetNormal, sunDir), 0.0);\n  float planetBorder = max(dot(planetNormal, -rd), 0.0);\n  float planetLat = (planetSurface.x+planetSurface.y)*0.0005;\n  vec3 planetCol = mix(1.3*vec3(0.9, 0.8, 0.7), 0.3*vec3(0.9, 0.8, 0.7), pow(psin(planetLat+1.0)*psin(sqrt(2.0)*planetLat+2.0)*psin(sqrt(3.5)*planetLat+3.0), 0.5));\n\n  vec3 final = vec3(0.0);\n  \n final += step(0.0, si.x)*pow(planetDiff, 0.75)*planetCol*smoothstep(-0.075, 0.0, rd.y)*smoothstep(0.0, 0.1, planetBorder);\n\n final += skyCol + sunCol + smallSunCol + dust;\n\n\n  return final;\n}\n\nvec3 getColor(vec3 ro, vec3 rd) {\n  int max_iter = 0;\n  vec3 skyCol = skyColor(ro, rd);\n  vec3 col = vec3(0);\n  \n  float d = march(ro, rd, max_iter);\n\n  if (d < MAX_DISTANCE)   {\n    vec3 sunDir = sunDirection();\n    vec3 osunDir = sunDir*vec3(-1.0, .0, -1.0);\n    vec3 p = ro + d*rd;\n\n    vec3 normal = normal(p.xz, d);\n    \n    float amb = 0.2;\n\n    float dif1 = max(0.0, dot(sunDir, normal));\n    vec3 shd1 = sunCol2*mix(amb, 1.0, pow(dif1, 0.75));\n\n    float dif2 = max(0.0, dot(osunDir, normal));\n    vec3 shd2 = sunCol1*mix(amb, 1.0, pow(dif2, 0.75));\n\n    vec3 ref = reflect(rd, normal);\n    vec3 rcol = skyColor(p, ref);\n\n    col = mountainColor*amb*skyCol3;\n    col += mix(shd1, shd2, -0.5)*mountainColor;   \n    float fre = max(dot(normal, -rd), 0.0);\n    fre = pow(1.0 - fre, 5.0);\n    col += rcol*fre*0.5;\n    col += (1.0*p.y);\n    col = tanh(col);\n    col = mix(col, skyCol, smoothstep(0.5*MAX_DISTANCE, 1.0*MAX_DISTANCE, d));\n  \n  } else {\n    col = skyCol;\n  }\n  \n//  col += vec3(1.1, 0.0, 0.0)* smoothstep(0.25, 1.0,(float(max_iter)/float(MAX_ITER)));\n  return col;\n}\n\nvec3 getSample1(vec2 p, float time) {\n  float off = 0.5*iTime;\n\n  vec3 ro  = vec3(0.5, 1.0-0.25, -2.0 + off);\n  vec3 la  = ro + vec3(0.0, -0.30,  2.0);\n\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross(vec3(0.0,1.0,0.0), ww));\n  vec3 vv = normalize(cross(ww, uu));\n  vec3 rd = normalize(p.x*uu + p.y*vv + 2.0*ww);\n\n  vec3 col = getColor(ro, rd)  ;\n \n  return col;\n  \n}\n\nvec3 getSample2(vec2 p, float time) {\n  p.y-=time*0.25;\n  float h = height(p, 0.0);\n  vec3 n = normal(p, 0.0);\n  \n  vec3 lp = vec3(10.0, -1.2, 0.0);\n  \n  vec3 ld = normalize(vec3(p.x, h, p.y)- lp);\n  \n  float d = max(dot(ld, n), 0.0);\n  \n  vec3 col = vec3(0.0);\n\n  col = vec3(1.0)*(h+0.1);\n  col += vec3(1.5)*pow(d, 0.75);\n \n  return col;\n  \n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  vec2 q = fragCoord.xy/iResolution.xy;\n  vec2 p = -1.0 + 2.0*q;\n  p.x *= iResolution.x/iResolution.y;\n  \n  vec3 col = getSample1(p, iTime);\n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}