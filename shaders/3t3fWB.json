{
    "Shader": {
        "info": {
            "date": "1613327767",
            "description": "Optimized version of: [url=https://www.shadertoy.com/view/3ltBRs]https://www.shadertoy.com/view/3ltBRs[/url]\nPlease make suggestion for further optimizations!\nAlso testing nonconvex shapes using iq's animated polygon (his stuff is awesome!).",
            "flags": 32,
            "hasliked": 0,
            "id": "3t3fWB",
            "likes": 11,
            "name": "Optimized Closest Point",
            "published": 3,
            "tags": [
                "sdf",
                "optimized",
                "gradientdescent",
                "closestpoint"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 341
        },
        "renderpass": [
            {
                "code": "// Optimized and improved version of: https://www.shadertoy.com/view/3ltBRs\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float d = min(sdf1(uv, iTime), sdf2(uv, iTime));\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcolor *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(140.0 * d);\n\tcolor = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 0.015, abs(d)));\n\n    // Fetch the estimated closest point from the buffer\n    vec2 closest = texelFetch(iChannel0, ivec2(0), 0).xy;\n\n    // Normalization is unnecessary since a true SDF will always have a normalized gradient\n    // If its not a true SDF then you will need to do that step\n    vec2 proj1 = closest - grad1(closest, iTime) * sdf1(closest, iTime); // Project onto first SDF\n    vec2 proj2 = closest - grad2(closest, iTime) * sdf2(closest, iTime); // Project onto second SDF\n\n    // Average the projections for a more consistent (and still very good) estimate\n    closest = (proj1 + proj2) * 0.5;\n\n    color = mix(color, vec3(0.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.015, sdLine(uv, proj1, proj2)));\n    color = mix(color, vec3(1.0, 0.0, 0.0), 1.0 - smoothstep(0.0, 0.015, length(uv - closest) - 0.01));\n    color = mix(color, vec3(0.0, 0.0, 1.0), 1.0 - smoothstep(0.0, 0.015, length(uv - proj1) - 0.01));\n    color = mix(color, vec3(0.0, 0.0, 1.0), 1.0 - smoothstep(0.0, 0.015, length(uv - proj2) - 0.01));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//////////////////////////////////////// Solver Hyperparameters /////////////////////////////////////////\n\n// Maximum iterations\n#define ITERATIONS 75\n\n// Controls how fast the algorithm steps (don't make too large!)\n#define DESCENT_RATE 0.05\n\n// Error margin\n#define EPSILON 0.001\n\n// Small number\n#define DELTA 0.001\n\n///////////////////////////////////////////// Utilities /////////////////////////////////////////////////\n\nvoid Rotate(inout vec2 p, in float r) {\n    float c = cos(r), s = sin(r);\n    p *= mat2(c, -s, s, c);\n}\n\n// Distance functions from iq\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\nfloat sdHorseshoe(in vec2 p, in vec2 c, in vec2 w, in float r) {\n    p.x = abs(p.x);\n    float l = length(p);\n    p = mat2(-c.x, c.y, c.y, c.x) * p;\n    p = vec2((p.y > 0.0) ? p.x : -l * sign(c.x), (p.x > 0.0) ? p.y : l);\n    p = vec2(p.x, abs(p.y - r)) - w;\n    return length(max(p, 0.0)) + min(0.0, max(p.x, p.y));\n}\n\nfloat sdPolygon(in vec2 p, in vec2[5] v) {\n    const int num = v.length();\n    float d = dot(p - v[0], p - v[0]);\n    float s = 1.0;\n    for(int i=0, j=num-1; i<num; j=i, i++) {\n        vec2 e = v[j] - v[i];\n        vec2 w = p - v[i];\n        vec2 b = w - e * clamp(dot(w, e) / dot(e, e), 0.0, 1.0);\n        d = min(d, dot(b, b));\n        bvec3 cond = bvec3(p.y >= v[i].y, p.y < v[j].y, e.x * w.y > e.y * w.x);\n        if (all(cond) || all(not(cond))) s = -s;  \n    }\n\n    return s * sqrt(d);\n}\n\n///////////////////////////////////////////// SDFs //////////////////////////////////////////////////////\n\nfloat sdf1(in vec2 p, in float t) {\n    p.x += 0.25;\n\n    // Animation from iq\n    vec2 v1 = 0.4 * cos(0.4  * t + vec2(0.0, 2.0) + 0.0);\n\tvec2 v2 = 0.4 * cos(0.45 * t + vec2(0.0, 1.5) + 1.0);\n\tvec2 v3 = 0.4 * cos(0.5  * t + vec2(0.0, 3.0) + 2.0);\n\tvec2 v4 = 0.4 * cos(0.55 * t + vec2(0.0, 2.0) + 4.0);\n    vec2 v5 = 0.4 * cos(0.6  * t + vec2(0.0, 1.0) + 5.0);\n\n    vec2[] poly = vec2[5](v1, v2, v3, v4, v5);\n    return sdPolygon(p, poly);\n}\n\nfloat sdf2(in vec2 p, in float t) {\n    p.x -= 0.45;\n    float frac = fract(t);\n    p.y -= frac * (1.0 - frac) - 0.1;\n    Rotate(p, -2.0 * t);\n    float a = 0.25;\n    return sdHorseshoe(p, vec2(sin(a), cos(a)), vec2(0.2, 0.1), 0.2);\n}\n\n/////////////////////////////////////// SDF Gradients (numeric) /////////////////////////////////////////\n\n// As DELTA should be very tiny, it is not necessary to center the samples (and thus avoid 4 subtractions and one multiplication)\nvec2 grad1(in vec2 p, in float t) {\n    float middle = sdf1(p, t);\n    return vec2(sdf1(p + vec2(DELTA, 0.0), t) - middle,\n                sdf1(p + vec2(0.0, DELTA), t) - middle) / DELTA;\n}\n\nvec2 grad2(in vec2 p, in float t) {\n    float middle = sdf2(p, t);\n    return vec2(sdf2(p + vec2(DELTA, 0.0), t) - middle,\n                sdf2(p + vec2(0.0, DELTA), t) - middle) / DELTA;\n}\n\n////////////////////////////////////// Solver (gradient descent) ////////////////////////////////////////\n\n// Seed is somewhat arbitrary but will affect performance in some cases\n// If the object positions are known (or can be estimated), its probably best\n// to just pick the midway point\nvec2 grad(in vec2 p, in float t) {\n    return sdf1(p, t) > sdf2(p, t) ? grad1(p, t) : grad2(p, t);\n}\n\nvec2 findClosest(in vec2 seed, in float t) {\n    vec2 closest = seed;\n    for (int i=0; i < ITERATIONS; i++) {\n        vec2 g = grad(closest, t);\n        closest -= g * DESCENT_RATE;\n        if (all(lessThan(abs(g), vec2(EPSILON)))) { // Avoid square roots\n            break;\n        }\n    }\n\n    return closest;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// The closest point is computed and stored here\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    if (ivec2(fragCoord) == ivec2(0)) {\n         // Use previous position to speed up convergence\n         fragColor.xy = findClosest(texelFetch(iChannel0, ivec2(0), 0).xy, iTime);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}