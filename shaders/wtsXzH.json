{
    "Shader": {
        "info": {
            "date": "1562155535",
            "description": "View of the SDF from previous shader.\nCan rotate, scale and change origin",
            "flags": 0,
            "hasliked": 0,
            "id": "wtsXzH",
            "likes": 1,
            "name": "Shitty Triangle SDF",
            "published": 3,
            "tags": [
                "2d",
                "triangle",
                "distance"
            ],
            "usePreview": 0,
            "username": "zlnimda",
            "viewed": 503
        },
        "renderpass": [
            {
                "code": "/* ----------------\n*\tzlnimda wrote this file and is under license CC-BY-SA-4.0 \n* \t( see legal notice: https://creativecommons.org/licenses/by-sa/4.0/legalcode )\n/* ----------------\n* \tSDF from previous shader: https://www.shadertoy.com/view/XsyyWm\n*/\n\nprecision highp float;\n\nconst float M_PI = 3.1415926535897932384626433832795;\n\n// normalized angle (a,b) [0,1]\nfloat normAngle(vec2 a, vec2 b)\n{\n    return .5 + .5 * sign(cross(vec3(a,0.), vec3(b,0.)).z) * -acos(dot(normalize(a), normalize(b))) / M_PI;\n}\n\n// shitty signed dist tri\nfloat sdtri(vec2 uv, vec2 o, float s, float a)\n{\n    uv = mat2(1./s,0.,0.,1./s) * (uv - o);\n    \n    vec2 oa = mat2(cos(a), -sin(a), sin(a), cos(a)) * vec2(0., -1.);\n    float ua = normAngle(oa, uv);\n    float ba = floor(ua * 3.);\n    float r = (0.25- ba) * 2.*M_PI/3. - a;\n    vec2 nn = mat2(cos(r), -sin(r), sin(r), cos(r)) * uv;\n    return nn.x - .5*s*.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec2  origin = vec2(cos(iTime) * 0.2, sin(iTime) * 0.2);\n    float scale = 1. + .5 * cos(iTime);\n    float angle = mod(iTime * .5, 2. * M_PI);\n    \n    float d = sdtri(uv, origin, scale, angle);\n    \n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-4.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(140.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}