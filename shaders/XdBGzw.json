{
    "Shader": {
        "info": {
            "date": "1384880603",
            "description": "My first shader, written in 2011-10-23. I tried porting it to Shadertoy, but at the time it did not support extra buffers. On 2016-04-26, I've updated this shader to make it work in Shadertoy. This would look much cooler if there was mouse-over support.",
            "flags": 32,
            "hasliked": 0,
            "id": "XdBGzw",
            "likes": 8,
            "name": "Mouse position fog",
            "published": 3,
            "tags": [
                "mouse",
                "framebuffer"
            ],
            "usePreview": 0,
            "username": "denilsonsa",
            "viewed": 1205
        },
        "renderpass": [
            {
                "code": "// Written by Denilson SÃ¡ <denilsonsa@gmail.com>\n// http://denilson.sa.nom.br/\n//\n// GLSL Sandbox version at:\n// http://glslsandbox.com/e#12315.2\n//\n// The source is also available at:\n// https://bitbucket.org/denilsonsa/atmega8-magnetometer-usb-mouse/src/tip/html_javascript/\n// https://github.com/denilsonsa/atmega8-magnetometer-usb-mouse/tree/master/html_javascript\n//\n// The original code (above) was restructured to work with Shadertoy.\n\n// Code originally from draw_to_main().\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define fb iChannel0\n\n// Code originally from draw_to_fb().\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 pos;\n\tvec2 posnorm;\n\tvec2 poscanv;\n\tvec2 zooming;\n\tvec4 color;\n\tfloat dist;\n\n    // These have the same size in Shadertoy:\n    vec2 canvassize = iResolution.xy;\n\tvec2 fbsize = canvassize;\n\n    bool mouse_hold = !(iMouse.z < 0.0);\n    vec2 mouse = iMouse.xy;\n\n\t// Position of the current pixel\n\tpos = fragCoord.xy;\n\t// Position of the current pixel, normalized between 0.0 and 1.0\n\tposnorm = fragCoord.xy / iResolution.xy;\n\t// Position of the current pixel, in canvas coordinates (the same as the\n\t// mouse)\n\tposcanv = posnorm*canvassize;\n\n\n\t// Distance between the current pixel and the mouse, already taking into\n\t// account the difference between the coordinate systems\n\tdist = distance(mouse, poscanv);\n\tif ( dist < 16.0 ) {\n\t\t// Drawing a circle around the mouse with a solid color\n\t\t// Blue if mouse button is not pressed, orange if it is pressed\n\t\tcolor = vec4(0.2, 0.25, 1.0, 0.0) + vec4(1.0, 0.5, -1.0, 0.0) * float(mouse_hold);\n\t} else {\n\t\t// Zooming trick\n\t\tzooming = ((mouse - poscanv) * (0.015625)) / canvassize;\n\t\tcolor = texture(fb, posnorm + zooming);\n\n\t\tcolor -= (color * 0.00390625) + 0.001953125;\n\t}\n\n\tfragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}