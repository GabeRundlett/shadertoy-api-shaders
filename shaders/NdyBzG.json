{
    "Shader": {
        "info": {
            "date": "1658367207",
            "description": "Some collapse",
            "flags": 0,
            "hasliked": 0,
            "id": "NdyBzG",
            "likes": 6,
            "name": "Gradient flower",
            "published": 3,
            "tags": [
                "distancefield",
                "flower",
                "smoothstep"
            ],
            "usePreview": 0,
            "username": "VPaltoDance",
            "viewed": 323
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define CIRCLE_SCALE 10.0f\n#define COLOR_1_v3 vec3(0.5f, 0.1f, 0.0f)\n#define COLOR_2_v3 vec3(0.95f, 0.2f, 0.8f)\n\nfloat beatFunc(float time, vec2 uv)\n{\n    //float beat = 0.5+0.5*sin((time*4.0 - 0.25)*2.0*PI) * exp(-length(uv) * 50.0);   \n    //return beat;//mix(0.0f, beat, fract(time) < 0.5);\n    \n    float tt = mod(time,1.5)/1.5;\n    float ss = pow(tt,.2)*0.5 + 0.5;\n    return 1.0 - ss*0.3*sin(tt*6.2831*3.0)*exp(-tt*4.0)*exp(-length(uv)*2.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 baseUV = uv - 0.5f;\n    baseUV.x *= iResolution.x / iResolution.y;\n    baseUV.x *= 1.1*uv.y + 1.1;\n    baseUV.y *= 1.6*uv.y  + 1.4;\n    \n    float beat_func = beatFunc(iTime, baseUV);\n    baseUV *= (beat_func) ;\n    \n    \n   \n    float phi = atan(baseUV.y, baseUV.x);\n    float phi_func = 0.04 + 0.02 * sin(phi * 10.0);\n    \n    float dist = length(baseUV) ;\n    float pattern = phi_func + dist; // pattern distance field\n    \n    float frac_pattern = fract(CIRCLE_SCALE * (pattern + 0.1f * iTime));    \n    float circle_pattern = frac_pattern - smoothstep(0.95f, 1.0f, frac_pattern);\n    \n    vec3 uvcol = 0.5 + 0.5*cos(iTime+ 0.0f * baseUV.xyx + dist * 2.0f + vec3(1,2,4));\n    vec3 uvcols = 0.25 + 0.25*sin(iTime+ 0.0f * baseUV.xyx + dist * 2.0f + vec3(1,2,4));\n    \n    vec3 col = mix(uvcols, uvcol, circle_pattern);\n \n    // Output to screen\n    fragColor = vec4(col, 1.0f);\n    //fragColor = vec4(pattern);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}