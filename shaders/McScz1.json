{
    "Shader": {
        "info": {
            "date": "1721904553",
            "description": "i have created a small website https://shaderclock.deno.dev/ where i want to have multiple shader clocks , and one gets loaded randomly \nif you want to participate make sure to add the tag 'shaderclockdenodev'",
            "flags": 0,
            "hasliked": 0,
            "id": "McScz1",
            "likes": 4,
            "name": "daily shader clock 2",
            "published": 3,
            "tags": [
                "daily",
                "shaderclockdenodev"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 112
        },
        "renderpass": [
            {
                "code": "float f_n_dist_rect(\n    vec2 o, \n    vec2 o_size\n){\n    vec2 o2 = abs(o)-o_size;\n    return length(max(o2,0.0)) + min(max(o2.x,o2.y),0.0);\n}\n//IMPORTANT START, keep the lines with and between IMPORTANT START and \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//IMPORTANT END\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 o_trn = (fragCoord.xy-iResolution.xy*.5)/min(iResolution.y, iResolution.x);\n    o_trn*=1.2;\n\n    float n_sec = iDate.w;\n    float n_sec_mod = mod(n_sec , 60.);\n    float n_sec_mod_nor = n_sec_mod / 60.;\n    float n_min_mod = floor(mod(n_sec, 60.*60.));\n    float n_min_mod_nor = n_min_mod / (60.*60.);\n    float n_hou_mod = floor(mod(n_sec, 60.*60.*12.));\n    float n_hou_mod_nor = n_hou_mod / (60.*60.*12.);\n    \n    float n_aa = (1./(iResolution.x+iResolution.y)/2.)*8.;\n    float n_its = 3.;\n    float n_it_nor_one = 1./n_its;\n    \n    vec4 o_col = vec4(0.);\n    float n_min = 1.;\n    float n_tau = 6.2831;\n    o_trn+=.5;\n    float nx = clamp(o_trn.x, 0., .99);\n    float n_x_12 = floor(nx*12.)/12.;\n    float n_x_60 = floor(nx*60.)/60.;\n    \n    for(float n_it_nor = 0.; n_it_nor < 1.; n_it_nor+=n_it_nor_one){\n        \n        float n = f_n_dist_rect(\n            o_trn-vec2(n_x_12+(1./11./2.), n_it_nor+(1./3./2.)), \n            vec2(.5/11., .5/3.)\n        );\n        float n2 = abs(clamp(n, -1., 0.))*12.;\n        n = pow(abs(n), 1./9.);\n        o_col += vec4(1.-n);\n        float[] anmt = float[] (\n            n_hou_mod_nor, \n            n_min_mod_nor, \n            n_sec_mod_nor\n        );\n        float nmt = anmt[int((1.-n_it_nor)*3.)];\n        if(nmt > n_x_12){\n            o_col += vec4(n2);\n        }\n    }\n    \n    fragColor = o_col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}