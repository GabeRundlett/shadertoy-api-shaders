{
    "Shader": {
        "info": {
            "date": "1483020590",
            "description": "First audio shader",
            "flags": 64,
            "hasliked": 0,
            "id": "llVXRh",
            "likes": 14,
            "name": "Audio EQ Circles",
            "published": 3,
            "tags": [
                "circles",
                "audioreactive"
            ],
            "usePreview": 0,
            "username": "cacheflowe",
            "viewed": 1078
        },
        "renderpass": [
            {
                "code": "const float TWO_PI = 6.28318530718;\nconst float distThresh = 0.3;\nconst float baseRadius = 0.4;\nconst float brightAdjust = 8.;\nconst int numControlPoints = 128;\n\nfloat map(float value, float low1, float high1, float low2, float high2) {\n   return low2 + (value - low1) * (high2 - low2) / (high1 - low1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  uv = (2. * fragCoord.xy - iResolution.xy) / iResolution.y,\n          uvAudio = fragCoord.xy / iResolution.xy;\n    float speed = 1.0,\n          time = iTime * speed,\n          radius = baseRadius, // 0.98 to reduce aliasing when all circles overlap\n          dist = 0.,\n          segmentRads = TWO_PI / float(numControlPoints);\n    \n\t// create control points in a circle and check distance sum\n    for(int i=0; i < numControlPoints; i++) {\n        float curRads = segmentRads * float(i);\n        float audioTexX = curRads / TWO_PI; // sweep across audio texture based on circle progress\n        uvAudio = vec2(map(audioTexX, 0., 1., 0.2, 0.5), 0.25); // remap to use the best part of the spectrum. 0.5 for y is where shadertoy give us fft data\n        float eqAmp = texture( iChannel0, uvAudio ).r;\n        float curRadius = 0.1 + radius * 3. * eqAmp;\n        vec2 ctrlPoint = vec2(sin(curRads) * curRadius, cos(curRads) * curRadius);\n        if(distance(uv, ctrlPoint) < distThresh * eqAmp) dist += distance(uv, ctrlPoint) * 15. * eqAmp;\n    }\n    \n    // adjust distance to compensate for numControlPoints addition\n    dist /= float(numControlPoints);\n    fragColor = vec4(vec3(dist * brightAdjust), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 6392,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/cacheflowe/cacheflowe-ooh-ooh"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}