{
    "Shader": {
        "info": {
            "date": "1618643565",
            "description": "uuh",
            "flags": 0,
            "hasliked": 0,
            "id": "ssfSWN",
            "likes": 4,
            "name": "Day 486[4d kaliset]",
            "published": 3,
            "tags": [
                "fractal",
                "projection",
                "4d",
                "mdtmjvm"
            ],
            "usePreview": 1,
            "username": "jeyko",
            "viewed": 298
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 486[4d projected fractal]\" by jeyko. https://shadertoy.com/view/7dXXD4\n// 2021-04-17 06:41:35\n\n// Fork of \"Day 485[4d projected apollonian]\" by jeyko. https://shadertoy.com/view/fdXSD4\n// 2021-04-17 05:50:39\n\n// My bro Nameless explained 4d projection/rendering to me,\n// so I needed to render fractals in it. fun stuff.\n\n// here follows my interpretation of his explanation\n\n// 2d creatures see a line\n// 3d creatures see a 2d array, projected by cam z\n// 4d creatrues see a 3d grid, projected by cam w\n\n\n// what i've done here is construct a 3d grid of 2d slices.\n// each slice is a full raymarch into 4d space, projected by the w\n// this just means that instead of doing\n// rd = normalize(vec3(uv,1));\n// we do\n// rd = normalize(vec3(uv,sliceIdx/sliceCnt,1));d\n// that's really about all there is to it. in the end we project the 3d grid isometrically to our 2d shadertoy screen.\n\n// this code is probably not a good learning resource though.\n\n\n\n// Performance vars\n\nfloat sliceCnt = 128.;\nfloat marchSteps = 30.;\nfloat dMult = 1.;\n\n\n// Coeff vars\n\nfloat rotSpd = 0.5;\nfloat fov4D = 0.4;     // scale up the sliceZDepth when widening the fov\nfloat sliceZDepth = 1.; \nfloat minT = 10e5;\n\nfloat normalEps = 0.01;\nfloat distEps = 0.001;\nfloat distOffs = 0.;\n\nfloat ditherAmt = 1.;\n\n#define DEBUG 0\n#define TUBES 1\n\n\nvec2 sdMeng(vec4 p){\n    float sc = 1.;\n    vec2 d = vec2(10e5,0.);\n    \n    //p = pmod(p,4.);\n    vec4 op = p;\n    for(float i = 0.; i < 4.; i++){\n        \n        float dpp = dot(p,p); \n        p /= dpp; sc /= dpp;\n        \n        p = abs(p);\n        //if(p.x > p.z) p.xz = p.zx;\n        //if(p.y > p.z) p.yz = p.zy;\n        //if(p.w > p.y) p.yw = p.wy;\n        \n        //if(p.x > p.w) p.xw = p.wx;\n        //if(p.x > p.y) p.xy = p.yx;\n        \n        \n        //if(i == 2.)\n        //p = pmod(p,vec4(3.5));\n        \n        p -= vec4(0.5,0.3,0.5,0.1)*.41;\n        p.wx *= rot(0.4 + iTime*0.1 );\n        p.wy *= rot(0.5*pi );\n        //p.xy *= rot(-0.4*pi);\n        \n        const float scMult = 1.4;\n        p *= scMult; sc *= scMult;\n        \n     \n    }\n    p /= sc;\n    \n    //d = dmin(d,ld(p.zxw) - 0.001 );\n    //d = dmin(d,length(p.y) - 0.00 );\n    \n    //d = dmin(d,sdBox(p,vec4(0.06)));\n    d = dmin(d,sdBox(p,vec4(0.01,0.01,0.01,.83)) - 0.0 );\n    d = dmin(d,sdBox(p,vec4(0.01,0.01,.61,.02)) - 0.0 );\n    \n    return d;\n}\n\nvec2 map(vec4 p){\n    \n    \n    p -= vec4(0.3,0.,1.,1.5);\n    //p.x += sin(iTime*0.5)*0.4;\n    \n    //p.wz *= rot(1.4);\n    //p.yw *= rot( -iTime*0.4);\n    \n    p.xw *= rot( iTime*1.5*rotSpd);\n    p.wz *= rot( -iTime*1.7*rotSpd );\n    \n    p.yw *= rot( iTime*1.5*rotSpd);\n    \n    p.yx *= rot( iTime*.5*rotSpd);\n    \n    //p.xz *= rot( iTime*0.7 *rotSpd);\n    \n    //p += 0.2 ;\n    \n    //p -= 0.5 ;\n    \n    //p.yw *= rot( -iTime*0.15);\n\n    //vec2 d = sdApollonian(p);\n    vec2 d = sdMeng(p);\n      \n     \n    return d;\n}\n\nvec4 getNormal(vec4 p){\n    vec2 t = vec2(normalEps,0.00);\n    return normalize(map(p).x-vec4(\n        map(p-t.xyyy).x,\n        map(p-t.yxyy).x,\n        map(p-t.yyxy).x,\n        map(p-t.yyyx).x));\n}\n\n// suggested from tdhooper. Thanks!\n// improve compilation time & overall fps.\nconst int NORMAL_STEPS = 8;\nvec4 getNormala(vec4 pos) {\n\n    vec4 eps = vec4(normalEps*1., 0, 0,0.);\n\t\n\tvec4 nor = vec4(0);\n\tfloat invert = 1.;\n\tfor (int i = 0; i < NORMAL_STEPS; i++) {\n\t\tnor += map(pos + eps * invert).x * eps * invert;\n\t\teps = eps.wxyz;\n\t\tinvert *= -1.;\n\t}\n\treturn normalize(nor);\n}\n\nfloat rnd(vec2 uv) {\n  return fract(dot(sin(uv*vec2(172.412,735.124)+uv.yx*vec2(97.354,421.653)+vec2(94.321,37.365)),vec2(4.6872,7.9841))+0.71243);\n}\n\nvec2 halton (int index)\n{\n    const vec2 coprimes = vec2(2.0f, 3.0f);\n    vec2 s = vec2(index, index);\n\tvec4 a = vec4(1,1,0,0);\n    while (s.x > 0. && s.y > 0.)\n    {\n        a.xy = a.xy/coprimes;\n        a.zw += a.xy*mod(s, coprimes);\n        s = floor(s/coprimes);\n    }\n    return a.zw;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec2 muv = (iMouse.xy - 0.5*iResolution.xy)/iResolution.y;\n    muv *= 6.28;\n\n    vec3 col = vec3(0);\n\n\n    #if DEBUG\n    \n        vec3 gro = vec3(sin(muv.x),0,cos(muv.x))*sliceZDepth*1.5;\n        vec3 grd = normalize(vec3(uv,1));\n\n        gro.yz *= rot(-muv.y);\n        grd.yz *= rot(-muv.y);\n        grd.xz *= rot(-muv.x);\n\n    #endif\n    \n    \n    bool hitAtLeastOnce = false;\n    float dither = texture(iChannel1, fragCoord / 1024.0f).r*ditherAmt*2. - 0.5*ditherAmt;\n    \n    \n    const vec3 fogCol = vec3(0.6,0.6,0.56)*4.;\n\n    col = fogCol;\n    for(float slice = 0.; slice < sliceCnt; slice++){\n          \n        #if DEBUG\n            vec3 sliceUv = gro + grd * plaIntersect( gro + vec3(0,0,1)*slice/sliceCnt*1.*sliceZDepth , grd, vec4(0,0,-1,0) );\n        #else\n            vec2 sliceUv = uv;\n        #endif\n        \n        \n        vec4 rd = normalize(vec4(sliceUv.xy,sliceZDepth*((slice+(dither))/sliceCnt - 0.5),fov4D));\n        \n        vec4 p = vec4(0); \n       \n        bool hit = false;\n        vec2 d;\n        float glow = 0.;\n        float t = 0.;\n       \n    \n        for(float st = 0.; st < marchSteps; st++){\n            d = map(p);\n            d.x += distOffs;\n            if(d.x < distEps){\n                hit = true;\n                break;\n            } else if (t > 3.5){\n                //t = 10.;\n                break;\n            }\n            \n            d.x *= dMult;\n            t += d.x;\n            p += rd*d.x;\n        }\n        \n\n          \n        if(hit && t < minT){\n            minT = t;\n            hitAtLeastOnce = true;\n            vec4 n = getNormal(p); \n            \n            col = (pal(0.5,0.5*vec3(1.,1.,1.),vec3(0.4,1.,1.5),1.,4.*dot(n,rd)));\n            //col = pow(abs(col),vec3(1.8));\n            col *= AO(.1)*AO(.01)*AO(.04)*AO(.08)*AO(.13);\n            \n            \n            col = mix(col,fogCol,smoothstep(0.,1.,(t)*.66- 0.6));\n            }\n        else{\n        }\n        \n    }\n    \n    // reinhardt and sutff\n    col = 1./(1. + 1./col);\n    \n    //col = 0.5 - col*2.;\n    //col = 1. - exp(-col*1.);\n    col = ACESFilm(col);\n    col = pow(col,vec3(0.4545));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define NOISE_THRESHOLD 1.0\n#define comp(a, b, c) (v[a].c > v[b].c)\n#define swap(a, b, c) temp = v[b].c; v[b].c = v[a].c; v[a].c = temp;\n#define cmpswap(x, y) if (comp(x, y, r)){ swap(x, y, r)}; if (comp(x, y, g)){ swap(x, y, g)}; if (comp(x, y, b)){ swap(x, y, b)};\n\nvec3 medianSub(in vec3[9] v){\n    float temp;  \n        \n    cmpswap(0, 1); \n    cmpswap(3, 4); \n    cmpswap(6, 7); \n    \n    cmpswap(1, 2); \n    cmpswap(4, 5); \n    cmpswap(7, 8); \n    \n    cmpswap(0, 1); \n    cmpswap(3, 4); \n    cmpswap(6, 7); \n    cmpswap(2, 5); \n    \n    cmpswap(0, 3); \n    cmpswap(1, 4); \n    cmpswap(5, 8); \n    \n    cmpswap(3, 6); \n    cmpswap(4, 7); \n    cmpswap(2, 5); \n    \n    cmpswap(0, 3); \n    cmpswap(1, 4); \n    cmpswap(5, 7); \n    cmpswap(2, 6); \n    \n    cmpswap(1, 3); \n    cmpswap(4, 6); \n    \n    cmpswap(2, 4); \n    cmpswap(5, 6); \n    \n    cmpswap(2, 3); \n    \n    return (v[4]);\n}\n\n\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define pal(a,b,c,d,e) (a + (b)*sin((c)*(d) + e))\n\n#define AO(a) smoothstep(0.,1.,map(p+n*a).x/a)\n\n#define pi acos(-1.)\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51f;\n    float b = 0.03f;\n    float c = 2.43f;\n    float d = 0.59f;\n    float e = 0.14f;\n    return clamp((x*(a*x+b))/(x*(c*x+d)+e),0.,1.);\n}\n/*\nvec4 getNormala(vec4 p){\n    vec2 t = vec2(0.0004,0.00);\n    return normalize(vec4(\n        map(p+t.xyyy).x - map(p-t.xyyy).x,\n        map(p+t.yxyy).x - map(p-t.yxyy).x,\n        map(p+t.yyxy).x - map(p-t.yyxy).x,\n        map(p+t.yyyx).x - map(p-t.yyyx).x));\n}\n*/\nfloat plaIntersect( in vec3 ro, in vec3 rd, in vec4 p )\n{\n    return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\n\nfloat sdBox(vec4 p, vec4 s){p = abs(p) - s; return max(p.x,max(p.y,max(p.z,p.w)));}\n\n\nfloat sdBoxEdges(vec4 p, vec4 s, float edgeW){\n    float d = sdBox(p, s);\n    \n    float cuttingEdgeW = edgeW*1.;\n    //d = abs(d);\n    d = max(d, -sdBox(p, s - vec4(-cuttingEdgeW,edgeW,edgeW,edgeW)));\n    d = max(d, -sdBox(p, s - vec4(edgeW,-cuttingEdgeW,edgeW,edgeW)));\n    d = max(d, -sdBox(p, s - vec4(edgeW,edgeW,-cuttingEdgeW,edgeW)));\n    d = max(d, -sdBox(p, s - vec4(edgeW,edgeW,edgeW,-cuttingEdgeW)));\n    \n    \n    return d;\n}\n\n\n#define max4v(v) max(max(v.x, v.y), max(v.z, v.w))\n#define min4(x,y,z,w) min(min(x, y), min(z, w))\n\n\n#define dmin(d,b) d.x < b ? d : vec2(b,d.y + 1.)\nfloat sdTesseractFrame( vec4 p, vec4 b, float e ) { \n  p = abs(p)-b; \n  vec4 q = abs(p+e)-e; \n  mat4 t = mat4(\n        p.x, q.y, q.z, q.w,\n        q.x, p.y, q.z, q.w,\n        q.x, q.y, p.z, q.w,\n        q.x, q.y, q.z, p.w\n  );\n  return min4(\n        length(max(t[0], 0.0)+min(max4v(t[0]),0.0)),\n        length(max(t[1], 0.0)+min(max4v(t[1]),0.0)),\n        length(max(t[2], 0.0)+min(max4v(t[2]),0.0)),\n        length(max(t[3], 0.0)+min(max4v(t[3]),0.0))\n  );\n}\n\n#define pmod(p,a) (mod(p - 0.5*a,a) - 0.5*a)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}