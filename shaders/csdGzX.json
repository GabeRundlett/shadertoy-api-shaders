{
    "Shader": {
        "info": {
            "date": "1677616741",
            "description": "Hi. Can you generate me a Shadertoy Shader with an mesh gradient which you can change with mouse input.",
            "flags": 0,
            "hasliked": 0,
            "id": "csdGzX",
            "likes": 1,
            "name": "Mesh Gradient ChatGPT Test#3",
            "published": 3,
            "tags": [
                "mouseinput",
                "meshgradient"
            ],
            "usePreview": 0,
            "username": "sasa42",
            "viewed": 288
        },
        "renderpass": [
            {
                "code": "// Shadertoy Shader by ChatGPT\n// Mesh gradient with mouse input control\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Define the size of the mesh and the number of segments\n    vec2 meshSize = vec2(3.0, 3.0);\n    vec2 segments = vec2(30.0, 30.0);\n\n    // Calculate the position of the current pixel in normalized coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Calculate the position of the current pixel in mesh coordinates\n    vec2 meshCoord = uv * meshSize;\n\n    // Calculate the color of the current pixel based on the distance from the center of the mesh\n    vec2 center = meshSize / 2.0;\n    float dist = distance(meshCoord, center);\n    vec3 color = vec3(dist);\n\n    // Use the mouse position to adjust the mesh gradient\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    vec2 gradient = vec2(mouse.x, mouse.y);\n    meshCoord -= gradient;\n\n    // Calculate the segment size\n    vec2 segmentSize = meshSize / segments;\n\n    // Calculate the segment index of the current pixel\n    vec2 segmentIndex = floor(meshCoord / segmentSize);\n\n    // Calculate the position of the current pixel relative to its segment\n    vec2 segmentCoord = fract(meshCoord / segmentSize);\n\n    // Calculate the four corners of the current segment\n    vec2 bottomLeft = segmentIndex * segmentSize;\n    vec2 bottomRight = bottomLeft + vec2(segmentSize.x, 0.0);\n    vec2 topLeft = bottomLeft + vec2(0.0, segmentSize.y);\n    vec2 topRight = bottomLeft + segmentSize;\n\n    // Calculate the distances between the current pixel and the four corners\n    float distBL = distance(meshCoord, bottomLeft);\n    float distBR = distance(meshCoord, bottomRight);\n    float distTL = distance(meshCoord, topLeft);\n    float distTR = distance(meshCoord, topRight);\n\n    // Calculate the weights for each corner based on the distance\n    float weightBL = 1.0 - (distBL / dist);\n    float weightBR = 1.0 - (distBR / dist);\n    float weightTL = 1.0 - (distTL / dist);\n    float weightTR = 1.0 - (distTR / dist);\n\n    // Calculate the final color of the current pixel by interpolating between the four corner colors\n    color = mix(color, vec3(1.0), weightBL);\n    color = mix(color, vec3(0.0), weightBR);\n    color = mix(color, vec3(1.0, 0.0, 0.0), weightTL);\n    color = mix(color, vec3(0.0, 1.0, 0.0), weightTR);\n\n    // Output the final color\n    fragColor = vec4(color, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}