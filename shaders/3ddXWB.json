{
    "Shader": {
        "info": {
            "date": "1572798428",
            "description": "An atom looking shader for codevember 02",
            "flags": 0,
            "hasliked": 0,
            "id": "3ddXWB",
            "likes": 4,
            "name": "Codevember02 - Geometric",
            "published": 3,
            "tags": [
                "2d",
                "atom",
                "codevember"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 305
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nconst float PI = 3.15159265;\n\nmat2 r2d(float a) { float sa = sin(a);float ca = cos(a);return mat2(ca, -sa, sa, ca);}\n\nfloat sat(float a)\n{\n    return clamp(0.,1.,a);\n}\n\n\nfloat _sub(float a, float b)\n{\n    return max(-a, b);\n}\n\nfloat sdf_cir(vec2 uv, float r)\n{\n    return length(uv)-r;\n}\n\nfloat sdf_borderCir(vec2 uv, float r, float th)\n{\n    return _sub(sdf_cir(uv, r), sdf_cir(uv, r + th));\n}\n\nvec3 drawAtom(vec2 uv, float prec)\n{\n    vec3 col;\n    float spd = 1.5;\n    uv += vec2(sin(mod(spd*iTime, 0.97)), cos(mod(spd*iTime*10.,7.9)))*0.005;\n    col += 5.*(sat((uv*r2d(spd*iTime*15.)).y)+0.1)*(1.-sat(sdf_borderCir((uv*r2d(PI*.25))*vec2(1.,4.), 0.1,0.001)*prec));\n    col += 5.*(sat((uv*r2d(spd*iTime*15.)).y)+0.1)*(1.-sat(sdf_borderCir((uv*r2d(-PI*.25))*vec2(1.,4.), 0.1,0.001)*prec));\n    col += 5.*(sat((uv*r2d(spd*iTime*15.-1.3)).y)+0.2)*(1.-sat(sdf_borderCir((uv*r2d(PI*.5))*vec2(1.,4.), 0.1,0.001)*prec));\n    col += 5.*(sat((uv*r2d(spd*iTime*15.+3.6)).y)+0.2)*(1.-sat(sdf_borderCir((uv*r2d(0.))*vec2(1.,4.), 0.1,0.001)*prec));\n    return col;\n}\n\nfloat lenny(vec2 v)\n{\n    return abs(v.x) + abs(v.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xx;\n\tuv -= (iResolution.xy/iResolution.xx)*vec2(0.5);\n    \n    vec3 colA = vec3(10.,175.,138.)/255.;\n    vec3 colB = vec3(75.,35.,150.)/255.;\n    \n    vec3 col = mix(colA, colB, -uv.y);\n    col *= length(uv);\n    \n    col += drawAtom(uv, 450.);\n    col += drawAtom(uv, 25.)*0.5;\n    col += vec3(.279,.123,.576)*drawAtom(uv*0.5, 15.)*0.2;\n    col += sat(1.-length(uv*vec2(.5,15.))) * vec3(.279,.123,.576);\n    col *= colB*(1.-length(uv))*2.;\n    col += colB*(1.-lenny(uv))*3.;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}