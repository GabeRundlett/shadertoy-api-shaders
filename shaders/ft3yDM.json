{
    "Shader": {
        "info": {
            "date": "1659879346",
            "description": "A 7-Segment display counter\nDIGITS are how many digits are displayed on screen\nBCD is the binary representation of the 7 segments to binary digits\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ft3yDM",
            "likes": 4,
            "name": "7-Segment display counter",
            "published": 3,
            "tags": [
                "7segment",
                "counter"
            ],
            "usePreview": 0,
            "username": "Zyphery",
            "viewed": 272
        },
        "renderpass": [
            {
                "code": "#define DIGITS 5\n#define CURVEDEDGES true\n#define EDGETHICKNESS 0.03\n#define TILTED true\n#define TILTFACTOR 0.2\n#define COLOR vec3(0.8,0.05,0.1)\n#define FADECOLOR COLOR * 0.15\n\nbool rect(vec2 uv, vec2 pos, vec2 size)\n{\n    if(uv.x > pos.x && uv.x < pos.x + size.x)\n        if(uv.y > pos.y && uv.y < pos.y + size.y)\n            return true;\n    return false;\n}\n\nint line(vec2 uv, vec2 p0, vec2 p1, float len)\n{\n    vec2 pos = min(p0,p1);\n    vec2 size = max(p0,p1) - pos;\n    if(!rect(uv, pos, size))\n        return 0;\n    \n    float m = (p1.y-p0.y)/(p1.x-p0.x);\n    float b = p1.y-m*p1.x;\n    \n    vec2 d = vec2(\n    ((2.0*(m*(uv.y-b)+uv.x))/(m*m+1.0))-uv.x,\n    ((2.0*(m*(m*(uv.y-b)+uv.x)))/(m*m+1.0))+2.0*b-uv.y);\n    float dis=distance(d,uv)/2.0;\n    \n    if(dis <= len)\n        return 1;\n    \n    return 0;\n}\n\nint clm(int v)\n{\n    if(v >= 1)\n        return 1;\n    return 0;\n}\n\nint BCD[] = int[](95, 12, 118, 124, 45, 121, 123, 28, 127, 61);\n\nint outline(vec2 uv, int num)\n{\n    int BITS = BCD[num % 10];\n    int mask = 0;\n    \n    if(rect(uv, vec2(0.1,0.55), vec2(0.1,0.3))) {\n        mask++;\n        if((BITS & 1) != 0)\n            mask++;\n    }\n    \n    if(rect(uv, vec2(0.1,0.15), vec2(0.1,0.3))) {\n        mask++;\n        if((BITS & 2) != 0)\n            mask++;\n    }\n    \n    if(rect(uv, vec2(0.5,0.55), vec2(0.1,0.3))) {\n        mask++;\n        if((BITS & 4) != 0)\n            mask++;\n    }\n    \n    if(rect(uv, vec2(0.5,0.15), vec2(0.1,0.3))) {\n        mask++;\n        if((BITS & 8) != 0)\n            mask++;\n    }\n    \n    if(rect(uv, vec2(0.2,0.85), vec2(0.3,0.1))) {\n        mask++;\n        if((BITS & 16) != 0)\n            mask++;\n    }\n    \n    if(rect(uv, vec2(0.2,0.45), vec2(0.3,0.1))) {\n        mask++;\n        if((BITS & 32) != 0)\n            mask++;\n    }\n    \n    if(rect(uv, vec2(0.2,0.05), vec2(0.3,0.1))) {\n        mask++;\n        if((BITS & 64) != 0)\n            mask++;\n    }\n    \n    //mask += rect(uv, vec2(0.1,0.55), vec2(0.1,0.3)) * (BITS & 1);\n    //mask += rect(uv, vec2(0.1,0.15), vec2(0.1,0.3)) * (BITS & 2);\n    \n    //mask += rect(uv, vec2(0.5,0.55), vec2(0.1,0.3)) * (BITS & 4);\n    //mask += rect(uv, vec2(0.5,0.15), vec2(0.1,0.3)) * (BITS & 8);\n    \n    //mask += rect(uv, vec2(0.2,0.85), vec2(0.3,0.1)) * (BITS & 16);\n    //mask += rect(uv, vec2(0.2,0.45), vec2(0.3,0.1)) * (BITS & 32);\n    //mask += rect(uv, vec2(0.2,0.05), vec2(0.3,0.1)) * (BITS & 64);\n    \n    if(CURVEDEDGES) {    \n        mask -= line(uv, vec2(0.05, 0.6), vec2(0.65, 0.0), EDGETHICKNESS) * 64;\n        mask -= line(uv, vec2(0.05, 0.0), vec2(0.65, 0.6), EDGETHICKNESS) * 64;\n        mask -= line(uv, vec2(0.05, 1.0), vec2(0.65, 0.4), EDGETHICKNESS) * 64;\n        mask -= line(uv, vec2(0.05, 0.4), vec2(0.65, 1.0), EDGETHICKNESS) * 64;\n    }\n    \n    return mask;\n}\n\nint tenpow(int x)\n{\n    int z = 1;\n    for(int i = 0; i < x; i++)\n        z = z * 10;\n    return z;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float value = iTime * 1.0;\n    \n    vec2 uv = (fragCoord/iResolution.x) * 0.7;\n    \n    uv *= float(DIGITS);\n    if(TILTED)\n        uv.x -= uv.y * TILTFACTOR - TILTFACTOR * 0.5;\n    float xVal = uv.x;\n    uv.x = mod(uv.x, 0.7);\n    \n    int xDif = (DIGITS - 1) - int(floor(xVal / 0.7));\n\n    vec3 col = vec3(0.0);\n    //col = floor(col * 10.0) / 10.0;\n    int oVal = outline(uv, int(value) / tenpow(xDif));\n    if(oVal > 0)\n        col = (oVal == 2) ? COLOR : FADECOLOR;\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}