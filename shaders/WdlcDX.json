{
    "Shader": {
        "info": {
            "date": "1585738205",
            "description": "potato",
            "flags": 0,
            "hasliked": 0,
            "id": "WdlcDX",
            "likes": 10,
            "name": "Day 104",
            "published": 3,
            "tags": [
                "mograph",
                "motiongraphics",
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 456
        },
        "renderpass": [
            {
                "code": "\n// USING YX/LUNA'S AWESOME DITHERED MOTION BLUR - https://www.shadertoy.com/view/wsfcWX\n// I modified it to not be framerate dependent like the original.\n\n\n\n#define pi acos(-1.)\n#define tau (2.*pi)\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n\n#define timeStep (1./30.)\n#define motionBlurSteps 100\n\n\nfloat bayer8(ivec2 uv)\n{   \n    uv %= 8;\n\treturn texelFetch(iChannel1,uv,0).r;\n}\n\n\n// from https://necessarydisorder.wordpress.com/\nfloat ease(float p, float g) {\n    if(p < 0.){\n        return 0.;\n    } else if(p > 1.){\n    \treturn 1.;\n    } else {\n        if (p < 0.5) \n            return 0.5 * pow(2.*p, g);\n        else\n            return 1. - 0.5 * pow(2.*(1. - p), g);\n    }\n}\n\nfloat ease(float p, float power, float jump, float offs, float end) {\n    float j = p;\n    p *= offs;\n    float r = (1.-cos(pi*p))/2.*jump;\n    r = pow(r, power);\n    r = mix(r, 1., pow(smoothstep(0.,1.,j),end));\n\treturn r;\n}\nfloat smease(float p, float g) {\n    float s = p;\n    for(float i = 0.; i < g; i++){\n    \ts = smoothstep(0.,1.,s);\n    }\n    return s;\n}\n\n\nfloat sdBox(vec2 p, vec2 s){\n\tp = abs(p) - s;\n\treturn max(p.x, p.y);\n}\nfloat sdCirc(vec2 p, float s){\n    return length(p) - s;\n}\n\nfloat sdEquilateralTriangle(  vec2 p, float s )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - s;\n    p.y = p.y + s/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    float d = -length(p)*sign(p.y);\n    \n    d = abs(d) - 0.001;\n    return d;\n}\nconst float speed = 0.44;\nfloat[] scenes = float[3](2.*speed,1.7*speed, 0.6*speed); \n\nconst float W = 0.4;\nconst float dotW = 0.05;\nconst float triS = W*0.85;\n\nvec3 get( vec2 uv, float t  )\n{\n    uv *= 2.;\n    float col = 0.;\n    \n    float d = 10e6;\n    \n    float bA;\n    float bB;\n    float bC;\n    float bD;\n    float bE;\n    \n    float pl;\n    \n    \n    //t += scenes[0];\n    //t += scenes[1] - 0.1;\n    //t += scenes[2] - 0.1;\n    t = mod(t, scenes[0] + scenes[1] /* + scenes[2]*/  );\n    \n    \n    \n    if(t < scenes[0]){\n        float lsp = 1.3;\n        float env = ease(t/scenes[0]*lsp, 1., 1.05, 0.98, 1.);  \n        \n        \n        d = min(d, sdCirc(uv - vec2(0,1)*W, dotW));\n        d = min(d, sdCirc(uv - vec2(sin(tau*1./3.),cos(tau*1./3.))*W, dotW));\n        d = min(d, sdCirc(uv - vec2(sin(tau*2./3.),cos(tau*2./3.))*W, dotW));\n        \n        d = 10e6;\n        for(float i = 1.; i < 4.; i++){\n        \n        }\n        \n        vec2 uvo = uv;\n        uv.y += W;\n        uv *= rot(tau/2.);\n        uv *= rot(tau*1./3.);\n        uv.y -= W;\n        uv *= rot(env*pi*4./3.);\n        uv.y += W;\n        \n        d = min(d,  sdEquilateralTriangle( uv, triS ));\n        \n        uv = uvo;\n        uv *= rot(tau/3.);\n        uv *= rot(tau*2./3.);\n        uv.y -= W;\n        uv *= rot(env*pi*4./3. + pi/3.);\n        uv.y += W;\n        d = min(d,  sdEquilateralTriangle( uv, triS ));\n        \n        uv = uvo;\n        uv *= rot(tau*3.);\n        uv *= rot(tau*1./3.);\n        uv.y -= W;\n        uv *= rot(env*pi*4./3. + pi/3.);\n        uv.y += W;\n        d = min(d,  sdEquilateralTriangle( uv, triS ));\n        \n    } else if(t < scenes[1] + scenes[0]){\n        t -= scenes[0];\n        \n        float lsp = 1.8;\n        float env = ease(t/scenes[1]*lsp, 1., 1.14, 0.96, 10.)*smoothstep(1.,0.,t/scenes[1]*lsp);\n\n        float mov = env*0.3;\n        \n        d = min(d, sdCirc(uv - vec2(0,1)*W, dotW));\n        d = min(d, sdCirc(uv - vec2(sin(tau*1./3.),cos(tau*1./3.))*W, dotW));\n        d = min(d, sdCirc(uv - vec2(sin(tau*2./3.),cos(tau*2./3.))*W, dotW));\n        \n        d = 10e6;\n        \n        vec2 uvo = uv;\n        uv.y += W;\n        \n        \n        uv.y += mov;\n        uv *= rot(tau/2.);\n        uv *= rot(tau*1./3.);\n        d = min(d,  sdEquilateralTriangle( uv, triS ));\n        \n        uv = uvo;\n        uv *= rot(tau/3.);\n        uv.y += mov;\n        uv *= rot(tau*2./3.);\n        uv.y -= W;\n        uv *= rot(pi/3.);\n        uv.y += W;\n        d = min(d,  sdEquilateralTriangle( uv, triS ));\n        \n        uv = uvo;\n        uv *= rot(tau*1./3.);\n        uv.y -= W;\n        uv *= rot(pi/3.);\n        uv.y += mov*0.5;\n        uv.x += mov;\n        uv.y += W;\n        d = min(d,  sdEquilateralTriangle( uv, triS ));\n                \n        \n    }  \n    \n    return vec3(d);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;  \n    vec3 col = vec3(0);\n    \n    float edge = dFdx(uv.x)*1.;\n    \n    for (int i = 0; i < motionBlurSteps + min(iFrame,0); ++i) {\n        float subsample = bayer8(ivec2(fragCoord));\n        float time = iTime + ((float(i)+subsample)/float(motionBlurSteps)-.5) * timeStep;\n        col += smoothstep(-edge,edge,-get(uv,time));\n    }\n    col/=float(motionBlurSteps);\n    \n    col = clamp(col, 0., 1.);\n    col *= 0.999;\n    \n    col *= max((1. + 1.*cos(sin(0.25*tau*iTime/(scenes[0] + scenes[1] ))*tau+length(uv)*2.+vec3(4,2.5,1.5)))*1., 0.);\n    //col *= max((1.5 + 1.4*cos(iTime+length(uv)*2.+vec3(1,1.5,1.5)))*1., 0.);\n    \n    col *= 1. - pow(smoothstep(0.,1.,dot(uv,uv)*0.9),0.9)*1.;\n    \n    col = pow(col, vec3(0.454545));\n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}