{
    "Shader": {
        "info": {
            "date": "1619769012",
            "description": "My very first shader.",
            "flags": 0,
            "hasliked": 0,
            "id": "fsSXzD",
            "likes": 0,
            "name": "Min f√∏rste shader",
            "published": 3,
            "tags": [
                "firstattempt"
            ],
            "usePreview": 0,
            "username": "KreaAda",
            "viewed": 209
        },
        "renderpass": [
            {
                "code": "float radius = 0.2;\n\nbool bjorn(vec2 center, vec2 pixel, float time){\n\n\n    center.y += abs(0.4* time);\n        \n    float xdist = (center.x - pixel.x) * (iResolution.x/iResolution.y);\n    float ydist = center.y - pixel.y;\n    \n    float dist = xdist*xdist + ydist*ydist;\n    \n    \n    return dist < (radius*radius);\n    \n} \n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //iTime+\n//    vec3 col = 0.5 + 0.5*cos(xy.xxx+vec3(0,2,4));\n//    vec3 col = vec3(xy.x);\n\n\n        vec3 col = vec3(cos(iTime),0.75,abs(cos(log(iMouse.x))));\n        // Output to screen\n        fragColor = vec4(col,1.0);\n\n    if (uv.x == uv.y)\n       {\n           fragColor = vec4(.0,.0,.0,1.0);\n       }\n       \n       \n    if (bjorn(vec2(0.5, radius), uv, abs(sin(iTime)))){\n\n        fragColor = vec4(abs(sin(iTime)),.0,1.0,1.0);    \n        \n    }\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}