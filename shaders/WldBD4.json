{
    "Shader": {
        "info": {
            "date": "1612756274",
            "description": "Reproduction of a random gif seen on a random Discord: https://cdn.discordapp.com/attachments/553619379540066304/795702582252404767/straightdownup-1.gif ... with a bit of added randomness.",
            "flags": 0,
            "hasliked": 0,
            "id": "WldBD4",
            "likes": 5,
            "name": "Ball rows",
            "published": 3,
            "tags": [
                "hex"
            ],
            "usePreview": 0,
            "username": "DukeOfStraylight",
            "viewed": 277
        },
        "renderpass": [
            {
                "code": "const float headingchaos = 0.01;\nconst float directionchaos = 0.1;\n\nvec2 hex = vec2(sqrt(3.), 1.).yx;\n\n// HexDist and HexCoords from The Art of Code: https://www.youtube.com/watch?v=VmrIDyYiJBA\nfloat HexDist(vec2 p) {\n  p = abs(p);\n  float c = dot(p, normalize(hex));\n  return max(c, p.x);\n}\n\nstruct HexCoord {\n  vec2 gv;\n  vec2 id;\n};\n\nHexCoord HexCoords(vec2 uv) {\n  vec2 r = hex;\n  vec2 h = r*.5;\n    \n  vec2 a = mod(uv, r)-h;\n  vec2 b = mod(uv-h, r)-h;\n    \n  vec2 gv = dot(a, a) < dot(b,b) ? a : b;\n    \n  vec2 id = uv-gv;\n  return HexCoord(gv, id);\n}\n\nfloat hash11(in float x) {\n    return fract(sin(x)*1e4);\n}\n\nvec2 rotate90(vec2 p) {\n  return vec2(p.y, -p.x);\n}\n\nconst float pi = 3.14159;\n\nfloat circledistance(float time, HexCoord hexcoord, vec2 hexdir) {\n  float second = floor(time);\n  float ind = fract(second*0.5)*2.0;\n  float sign = round(max(0.0, hash11(second) - (1.0 - directionchaos))); // 0 or 1\n\n  float slope = cos(time * pi) * 0.5 + 0.5;\n  float up = ind*slope + (1.0-ind)*(1.0-slope);\n\n  float parity = round(fract(dot(rotate90(hexdir), hexcoord.id - 0.5) * sqrt(3.0)));\n  sign = sign == parity ? 0.0 : 1.0; // a bit of a silly way to do xor, but these both came out of round() so equality does work\n  float t = sign * up + (1.0 - sign) * (1.0 - up);\n  \n  return min(length(hexcoord.gv + t * hexdir),\n\t     length(hexcoord.gv + (t - 1.0) * hexdir));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 st = (fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n\n  st *= 10.;\n\n  HexCoord hex_coord = HexCoords(st);\n  vec2 xy = hex_coord.gv;\n\n  float time = iTime * 1.5;\n  float second = floor(time );\n  float regularheading = mod(second, 3.0);\n  float randomheading = floor(hash11(second + 543.) * 3.0 + 0.5);\n  float heading = hash11(second + 47.) < headingchaos ? randomheading : regularheading;\n  \n  vec2 hexdir1 = vec2(1.0, 0.0);\n  vec2 hexdir2 = normalize(hex);\n  vec2 hexdir3 = normalize(hexdir2 - hexdir1);\n\n  vec2 hexdir = heading == 0.0 ? hexdir1 : heading == 1.0 ? hexdir2 : hexdir3;\n\n  float c = smoothstep(0.22, 0.19, circledistance(time, hex_coord, hexdir));\n  \n  fragColor =\n    vec4(c,\n\t c,\n\t c,\n     1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}