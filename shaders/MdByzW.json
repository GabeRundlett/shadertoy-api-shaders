{
    "Shader": {
        "info": {
            "date": "1491067942",
            "description": "reset for start skeletization, quite similarto the df himself :)\n",
            "flags": 32,
            "hasliked": 0,
            "id": "MdByzW",
            "likes": 6,
            "name": "Skeletization Attempt",
            "published": 3,
            "tags": [
                "attempt",
                "skeletization"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 604
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = 1.-texture(iChannel0, uv)*0.8;\n    \n    // df test with mouse by Abje\n    vec2 muv = iMouse.xy / iResolution.xy;\n    fragColor += max(1.0-abs(length((uv-muv)*iResolution.xy/iResolution.y)-(1.0-texture(iChannel0, muv))/6.0)*500.0,0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\nvec4 shapeScreenRectangle(vec2 fragCoord, float edge)\n{\n\tvec4 col = vec4(0);\n    if (fragCoord.x < edge || fragCoord.x > iResolution.x - edge\n            || fragCoord.y < edge || fragCoord.y > iResolution.y - edge)\n    {\n    \tcol = vec4(1);\n    }\n    return col;\n}\n\nvec4 shapeCircle(vec2 fragCoord, float edge)\n{\n    float e = edge / iResolution.y;\n\tvec4 col = vec4(0);\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    float y = iResolution.y / iResolution.x * .75;\n    \n    float d = abs(length(uv)-y)-e;\n    \n    return vec4(step(d,e));\n}\n\nvec4 shapeTri(vec2 fragCoord, float edge)\n{\n    float e = edge / iResolution.y;\n\tvec4 col = vec4(0);\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    float y = iResolution.y / iResolution.x * .75;\n    \n    float d = abs(max(abs(uv.x)+uv.y,-uv.y)-y)-e;\n    \n    return vec4(step(d,e));\n}\n\nvec4 shapeQuad(vec2 fragCoord, float edge)\n{\n    float e = edge / iResolution.y;\n\tvec4 col = vec4(0);\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    float y = iResolution.y / iResolution.x;\n    \n    float d = length(max(abs(uv)-y,0.)-y*0.1);\n    \n    return vec4(step(abs(d)-e,e));\n}\n\nvec4 shapeQuadRepeat(vec2 fragCoord, float edge)\n{\n    float e = edge / iResolution.y;\n\tvec4 col = vec4(0);\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y*3.;\n    float y = iResolution.y / iResolution.x;\n    uv = mod(uv,2.)-1.;\n    float d = abs(max(abs(uv.x),abs(uv.y))-y)-e;\n    \n    return vec4(step(d,e));\n}\n\nvec4 shapeFlower(vec2 fragCoord, float edge)\n{\n    float e = edge / iResolution.y;\n\tvec4 col = vec4(0);\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    float y = iResolution.y / iResolution.x;\n    \n    float a = atan(uv.x, uv.y)/3.14159*3.;\n    float d = length(uv) - mix(y,y+.5,abs(fract(a)-.5));\n    \n    return vec4(step(abs(d)-e,e));\n}\n\nvec4 cell(vec2 fragCoord, vec2 pixel)\n{\n\tvec2 uv = (fragCoord-pixel) / iResolution.xy;\n    return texture(iChannel0, uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    if (iFrame < 60)\n    {\n        fragColor = shapeScreenRectangle(fragCoord, 1.);\n        fragColor += shapeCircle(fragCoord, 1.);\n        //fragColor = shapeTri(fragCoord, 1.);\n        //fragColor = shapeQuad(fragCoord, 1.);\n        //fragColor = shapeQuadRepeat(fragCoord, 1.);\n        fragColor += shapeFlower(fragCoord, 1.);\n        //fragColor = vec4(step(texture(iChannel1, uv).x,0.2));\n    }\n    else\n    {       \n        vec2 n = vec2(1,1);\n        //n = normalize(sobel(uv));\n        \n        // get current cell from backbuffer\n        vec4 c = cell(fragCoord, vec2(0,0)); // current cell\n        if (length(c) < 0.5)\n        {\n#if 0\n            // A B\n            // C D\n        \t// get adjacents cells from backbuffer \n        \tvec4 l = cell(fragCoord, n*vec2(-1,0)); // left cell\n        \tvec4 r = cell(fragCoord, n*vec2(1,0)); // rigt cell\n        \tvec4 t = cell(fragCoord, n*vec2(0,1)); // top cell\n        \tvec4 b = cell(fragCoord, n*vec2(0,-1)); // bottom cell\n        \tc = max(c, max(l,max(r,max(t,b))));\n#else\n            // A B C\n            // D E F\n            // G H I\n            vec4 d = vec4(0);\n            for (float i = -1.; i <= 1.; i++)\n            for (float j = -1.; j <= 1.; j++)\n            {\n               c = max(c, cell(fragCoord, vec2(i,j)));\n            }\n#endif\n            c *= .975;         \n        }\n\n        fragColor = c;\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}