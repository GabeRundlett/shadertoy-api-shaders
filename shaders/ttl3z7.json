{
    "Shader": {
        "info": {
            "date": "1555962295",
            "description": "After Revision 2019 - which was a blast - I have lots of trippy ideas in my head. This is one of them... also kind of Amiga-compo inspried. I might add/change face-patterns over time. I added motion-blur support. Mess with the value of MOTION_BLUR_SAMPLES",
            "flags": 64,
            "hasliked": 0,
            "id": "ttl3z7",
            "likes": 8,
            "name": "Trippy rubber cube",
            "published": 3,
            "tags": [
                "3d",
                "retro",
                "sdf",
                "motionblur",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "MacSlow",
            "viewed": 1741
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Trippy rubber cube - Giving room to ideas after Revision 2019.\n//\n// Copyright 2019 Mirco Müller\n//\n// Author(s):\n//   Mirco \"MacSlow\" Müller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nprecision highp float;\n\n// number of samples used for motion blur, set to 1.\n// for no motion-blur, if the frame-rate is too low\n// higher values give smoother motion-blur results\nconst float MOTION_BLUR_SAMPLES = 12.;\n\nconst int MAX_ITER    = 32;\nconst float STEP_SIZE = 1.;\nconst float EPSILON   = .001;\n\nmat2 r2d (float d) {\n\tfloat a = radians(d);\n\tfloat c = cos(a);\n\tfloat s = sin (a);\n\treturn mat2 (vec2 (c, s), vec2 (-s, c));\n}\n\nfloat map (vec3 p, inout int id, inout vec3 pout, float t)\n{\n\t// rotate the cube\n\tp.xz *= r2d (135.*t);\n\tp.zy *= r2d (90.*t);\n\tp.xy *= r2d (-73.*t);\n\n\t// twist the cube\n\tp.xy *= r2d (35.*cos(p.z + 2.*t));\n\tp.yz *= r2d (60.*sin(p.x + 3.*t));\n\tp.zx *= r2d (40.*sin(p.y + 3.*t));\n\n    // build cube from infinite planes, so it's\n    // easier to get the UVs per plane later\n\tfloat size = .75;\n\tfloat p1 = p.y - size;\n\tfloat p2 = -p.y - size;\n\tfloat p3 = p.z - size;\n\tfloat p4 = -p.z - size;\n\tfloat p5 = p.x - size;\n\tfloat p6 = -p.x - size;\n\n\tfloat d = max (p1, p2);\n\td = max (d, p3);\n\td = max (d, p4);\n\td = max (d, p5);\n\td = max (d, p6);\n\n    // material/UV id\n\tif (d == p1) id = 1;\n\tif (d == p2) id = 2;\n\tif (d == p3) id = 3;\n\tif (d == p4) id = 4;\n\tif (d == p5) id = 5;\n\tif (d == p6) id = 6;\n\n    // scale UVs\n\tpout = 10.*p;\n\n\treturn d;\n}\n\nfloat march (vec3 ro, vec3 rd, inout int id, inout vec3 pout, float tm)\n{\n\tfloat t = .0;\n\tfloat d = .0;\n\n    for (int i = 0; i < MAX_ITER; i++)\n    {\n        t = map (ro+d*rd, id, pout, tm);\n        if (abs (t) < EPSILON*(1. + .125*t)) break;\n        d += t*STEP_SIZE;\n    }\n\n    return d;\n}\n\nvec3 background (vec2 uv, float t)\n{\n\tfloat d = fract (5.*length (uv) - 3.*t);\n\tfloat m = smoothstep (.0, 1., d);\n    return mix (vec3 (.0125), vec3 (.3, .0125, .0), 1. - m);\n}\n\nvec3 shade (int id, vec3 pout, float t)\n{\n    vec3 color = vec3 (.0);\n\tfloat dark = .1;\n\tfloat light = .9;\n\n\tif (id == 1) {\n\t\tpout.xz *= r2d (90.*t);\n\t\tfloat lf = 4.*texture (iChannel0, .25*pout.xz).r;\n\t\tfloat hf = .25*texture (iChannel0, 4.*pout.xz).r;\n\t\tfloat d = cos (2.*pout.z - 6.*t + sin(2.*(pout.x+lf+hf)));\n\t\tfloat m = smoothstep (.3, .7, d);\n\t\tcolor = mix (vec3 (dark), vec3 (light), m);\n\t}\n\tif (id == 2) {\n        t *= 2.;\n\t\tpout.xz *= r2d (-135.*t);\n\t\tpout.xz *= 20.;\n        float d = cos(pout.x*.12 + t)+\n                  cos(pout.x*.13 - t)+\n                  cos(pout.z*.1 + t)+\n            \t  cos(pout.z*.105 - t);\n\t    float m = smoothstep (.0, 1., d);\n\n\t\tcolor = mix (vec3 (dark), vec3 (light), m);\n\t}\n\tif (id == 3) {\n\t\tfloat lf = 2.*texture (iChannel0, .125*pout.xy).r;\n\t\tfloat hf = .125*texture (iChannel0, 8.*pout.xy).r;\n\t\tfloat d = cos (5.*(pout.x+lf+hf)-5.*(pout.y-lf+hf)+15.*t);\n\t\tfloat m = smoothstep (.5, .55, d);\n\t\tcolor = mix (vec3 (dark), vec3 (light), m);\n\t}\n\tif (id == 4) {\n\t\tpout.xy *= 1. + 1.*(.5 + .5*cos(4.*t));\n\t\tpout.xy *= r2d (45.*t);\n\t\tfloat lf = texture (iChannel0, .25*pout.xy-.6*t).r;\n\t\tfloat hf = .25*texture (iChannel0, 2.*pout.xy+.4*t).r;\n\t\tfloat d = cos (pout.x+lf+hf + sin(lf+hf*pout.y));\n\t\tfloat m = smoothstep (.0, 1., d);\n\t\tcolor = mix (vec3 (dark), vec3 (light), m);\n\t}\n\tif (id == 5) {\n\t\tfloat d = fract (length (.5*pout.zy)+2.*t);\n\t\tfloat m = smoothstep (.45, .55, d);\n\t\tcolor = mix (vec3 (dark), vec3 (light), d);\n\t}\n\tif (id == 6) {\n\t\tvec2 off1 = 5.*vec2 (cos (1.6*t), sin (2.4*t));\n\t\tvec2 off2 = 6.*vec2 (cos (2.1*t), sin (1.5*t));\n\t\tfloat d1 = fract (length (pout.yz + off1) - .3);\n\t\tfloat d2 = fract (length (pout.yz + off2) - .3);\n\t\tfloat m1 = smoothstep (.5, .52, d1);\n\t\tfloat m2 = smoothstep (.5, .52, d2);\n\t\tfloat m = m1*(1. - m2) + m2*(1. - m1);\n\t\tcolor = mix (vec3 (dark), vec3 (light), m);\n\t}\n\n    return color;\n}\n\nvec3 camera (in vec2 uv, in vec3 ro, in vec3 aim, in float zoom)\n{\n    vec3 f = normalize (vec3 (aim - ro));\n    vec3 wu = vec3 (.0, 1., .0);\n    vec3 r = normalize (cross (wu, f));\n    vec3 u = normalize (cross (f, r));\n    vec3 c = ro + f*zoom;\n\n    return normalize (c + uv.x*r + uv.y*u - ro);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 uvRaw = fragCoord.xy/iResolution.xy;\n\tvec2 uv = uvRaw*2. - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n\n    vec3 ro = vec3 (1., 1.5, 2.);\n    vec3 aim = vec3 (.0, .5*cos(4.*iTime), .0);\n    float zoom = 1.5+.2*cos(3.*iTime);\n    vec3 rd = camera (uv, ro, aim, zoom);\n\n\tint id = 0;\n\tvec3 pout;\n\n    float d;\n    float fog;\n    vec3 bg;\n    vec3 fg;\n\tvec3 c = vec3 (.0);\n\n    const float numSamples = MOTION_BLUR_SAMPLES;\n    for (float samples = .0; samples < numSamples; ++samples) {\n        float t = iTime - samples/numSamples/60.;\n\t\td = march (ro, rd, id, pout, t);\n    \tfog = abs (1./(2. - exp(d*d*.35)));\n    \tbg = background (uv, t);\n        fg = shade (id, pout, t);\n        c += (d < 3.25) ? fg*fog : bg;\n    }\n    c /= numSamples;\n\n    c = c / (1. + c);\n\tc *= 1. - .75*length (uvRaw*2.-1.);\n\tc *= mix (1., .5, cos(700.*uv.y));\n\tc *= mix (1., .5, cos(700.*uv.x));\n    c = pow (c, vec3 (1./2.2));\n\n\tfragColor = vec4(c, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 18442,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/kinesau/jesus-on-es-on-speed"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}