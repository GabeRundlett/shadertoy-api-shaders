{
    "Shader": {
        "info": {
            "date": "1715232669",
            "description": "CC0: Gravity sucks\nTinkering away....\n",
            "flags": 0,
            "hasliked": 0,
            "id": "4cyXWw",
            "likes": 54,
            "name": "Gravity sucks",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 735
        },
        "renderpass": [
            {
                "code": "// CC0: Gravity sucks\n//  Tinkering away....\n\n#define LAYERS      5.\n#define SCALE       1.\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat bounce(float t, float dy, float dropOff) {\n  const float g = 5.;\n  float p0 = 2.*dy/g;\n\n  t += p0/2.;\n    \n  float ldo = log(dropOff);\n    \n  float yy = 1. - (1. - dropOff) * t / p0;\n\n  if (yy > 1e-4)  {\n    float n  = floor(log(yy) / ldo);\n    float dn = pow(dropOff, n);\n\n    float yyy = dy * dn;\n    t -= p0 * (1. - dn) / (1. - dropOff);\n\n    return -.5*g*t*t + yyy*t;\n\n  } else {\n      return 0.;\n  }\n}\n\nvec3 ball(vec3 col, vec2 pp, vec2 p, float r, float pal) {\n  const vec3 ro = vec3(0.,0., 10.);\n  const vec3 difDir = normalize(vec3(1., 1.5, 2.));\n  const vec3 speDir = normalize(vec3(1., 2., 1.));\n  vec3 p3 = vec3(pp, 0.);\n  vec3 rd = normalize(p3-ro);\n  \n  vec3 bcol = .5+.5*sin(0.5*vec3(0., 1., 2.)+TAU*pal);\n  float aa = sqrt(8.)/RESOLUTION.y;\n  float z2 = (r*r-dot(p, p));\n  if (z2 > 0.) {\n    float z = sqrt(z2);\n    vec3 cp = vec3(p, z);\n    vec3 cn = normalize(cp);\n    vec3 cr = reflect(rd, cn);\n    float cd= max(dot(difDir, cn), 0.0);\n    float cs= 1.008-dot(cr, speDir);\n    \n    vec3 ccol = mix(.1, 1.,cd*cd)*bcol+sqrt(bcol)*(1E-2/cs);\n    float d = length(p)-r;\n    col = mix(col, ccol, smoothstep(0., -aa, d));\n  }\n  \n  return col;\n}\n\n\nvec3 effect(vec2 p) {\n  p.y += .5;\n  float sy = sign(p.y);\n  p.y = abs(p.y);\n  if (sy < 0.) {\n    p.y*=  1.5;\n  }\n\n  vec3 col = vec3(0.);\n  float aa = sqrt(4.)/RESOLUTION.y;\n  for (float i = 0.; i < LAYERS; ++i) {\n    float h0 = hash(i+123.4);\n    float h1 = fract(8667.0*h0);\n    float h2 = fract(8707.0*h0);\n    float h3 = fract(8887.0*h0);\n    float tf = mix(.5, 1.5, h3);\n    float it = tf*TIME;\n    float cw = mix(0.25, 0.75, h0*h0)*SCALE;\n    float per = mix(0.75, 1.5, h1*h1)*cw;\n    vec2 p0 = p;\n    float nt = floor(it/per);\n    p0.x -= cw*(it-nt*per)/per;\n    float n0 = mod1(p0.x, cw)-nt;\n    if (n0 > -7.-i*3.) continue;\n    float ct = it+n0*per;\n\n    float ch0 = hash(h0+n0);\n    float ch1 = fract(8667.0*ch0);\n    float ch2 = fract(8707.0*ch0);\n    float ch3 = fract(8887.0*ch0);\n    float ch4 = fract(9011.0*ch0);\n\n    float radii = cw*mix(.25, .5, ch0*ch0);\n    float dy = mix(3., 2., ch3);\n    float bf = mix(.6, .9, ch2);\n    float b = bounce(ct/tf+ch4, dy, bf);\n    p0.y -= b+radii;\n    col = ball(col, p, p0, radii, ch1);\n  }\n  \n  if (sy < 0.) {\n    col *= mix(sqrt(vec3(.05, .1, .2)), vec3(.05, .1, .2), p.y);\n    col += .1*vec3(0., 0., 1.)*max(p.y*p.y, 0.);\n  }\n  \n  col = sqrt(col);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 p = (-RESOLUTION.xy+2.*fragCoord)/RESOLUTION.yy;\n  vec3 col = effect(p);\n\n  fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}