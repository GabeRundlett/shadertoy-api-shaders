{
    "Shader": {
        "info": {
            "date": "1560329865",
            "description": "Left & right arrow keys to dodge!\n\nHeadphones recommended.\n\nYou have to beat it to see it... :)\n\nChange SAMPLE_COUNT to 1 to try and solve any performance issues.",
            "flags": 112,
            "hasliked": 0,
            "id": "tt2GzK",
            "likes": 5,
            "name": "Cubefield",
            "published": 3,
            "tags": [
                "game",
                "synthwave",
                "cubefield"
            ],
            "usePreview": 0,
            "username": "josplode",
            "viewed": 819
        },
        "renderpass": [
            {
                "code": "//#define DEBUG_BUFFER\n\nconst float SAMPLE_COUNT = 4.;\n\nconst vec3 fog1 = vec3(.2, .3, .6);\nconst vec3 fog2 = vec3(.2, .5, .6);\nvec3 fog3 = vec3(.2, .7, .2);\nconst vec3 fog39 = vec3(0.9, 0.9, 0.2);\nconst vec3 fog4 = vec3(.8, .3, .6);\nconst vec3 sky = vec3(0.);\nconst vec3 lasers = vec3(.2, .35, .5);\nconst vec3 sunTop = vec3(1., 0.7, 0.2);\nconst vec3 sunBottom = vec3(1., 0.4, 0.6);\n\nfloat plane(in vec3 p0, in vec3 l0, in vec3 l, in vec3 n) {\n    return dot((p0 - l0), n) / dot(l, n);\n}\n\nconst vec3 sunDir = normalize(vec3(1., -1., 2.));\n\nconst vec3 left = vec3(-1., 0., 0.);\nconst vec3 right = vec3(1., 0., 0.);\nconst vec3 down = vec3(0., 0., -1.);\nconst vec3 up = vec3(0., 0., 1.);\n\nvec3 renderPixel(in vec3 r, in vec3 d, in int interval, in vec2 fragCoord) {\n    float t = plane(vec3(0., 0., 1.), r, d, vec3(0., 0., 1.));\n\tfloat intensity = intensity(iTime);\n    fog3 = mix(fog3, fog39, intensity * intensity);\n    if (t < 0. || t > iResolution.y * 2.) {\n        // Sky\n\t\tfloat zenith = d.z;\n        float m = texture(iChannel3, vec2((d.x + 1.) / 2., 0.)).r;\n        float m2 = texture(iChannel3, vec2((1. - d.x) / 2., 0.)).r;\n        switch (interval) {\n            case 4:\n        \t\treturn mix(fog1, sky, pow(zenith, .2 * (1. - intensity)));\n            case 3:\n        \t\treturn mix(fog2, sky, pow(zenith, .1 + pow((m * m2), 2.)));\n            case 2:\n        \t\treturn mix(fog3, sky, pow(zenith, pow(intensity, 4.) * (m + m2) * 2.));\n            case 1:\n            \n            \t// Sun\n            \tfloat offset = sin(iTime * 0.666) * .025;\n            \tfloat dist = distance(d.xz, vec2(0., offset + 0.1));\n            \tfloat sun = 1.0 - smoothstep(0.2, 0.21, dist);\n            \t\n            \t// Notches\n            \tif (d.z < 0.15 + offset) {\n                   \tsun *= step(0.5, mod(d.z + offset, 0.002/(d.z + 0.07) + 0.01) * 50.);\n            \t}\n            \n            \tvec3 sunColor = mix(sunBottom, sunTop * 2., d.z * 5.);\n            \n            \tfloat mei = (0.4 - dist);\n            \n            \tvec3 background = mix(fog4, sky, pow(zenith, .2)) + mei * sunColor;\n            \n        \t\treturn mix(background, sunColor, sun);\n        }\n    }\n    vec3 top = r + d * t;\n    \n    t = plane(vec3(0., 0., 0.), r, d, vec3(0., 0., 1.));\n    vec3 bottom = r + d * t;\n    \n    // Player\n    float taa = taa();\n    if (abs(bottom.x - r.x) < (2. - (bottom.y - taa) * .25) && \n        abs(bottom.x - r.x) > (11. - (bottom.y - taa) * 1.5)) {\n        return vec3(1.) - step(0., bottom.x - r.x) * 0.3;\n    }\n    \n    bool hit = false;\n    vec3 normal = up;\n    vec3 current = top;\n    vec3 currentPixel;\n    while (current.z >= 0.) {\n        currentPixel = texture(iChannel0, current.xy / iResolution.xy).rgb;\n        if (length(currentPixel) > 0.1) {\n            hit = true;\n            break;\n        }\n        float t = plane(\n            vec3(current.x, ceil(current.y), current.z),\n            current,\n            d,\n            vec3(0., -1., 0.));\n        normal = vec3(0., -1., 0.);\n        if (d.x > 0.) {\n            float rt = plane(\n                vec3(ceil(current.x), current.y, current.z),\n                current,\n                d,\n                left);\n            if (rt < t) {\n                t = rt;\n                normal = left;\n            }\n        } else {\n            float lt = plane(\n                vec3(floor(current.x), current.y, current.z),\n                current,\n                d,\n                right);\n            if (lt < t) {\n                t = lt;\n                normal = right;\n            }\n        }\n        t = max(t, 0.1);\n        current += d * t;\n    }\n    \n    if (hit) {\n        float diffuse = max(dot(normal, sunDir), 0.25) * 3.;\n        switch (interval) {\n        case 4:\n        \treturn currentPixel * diffuse * (1. - intensity);\n        case 3:\n        \treturn vec3(0.);\n        case 2:\n            float glow = (.1 / pow(abs(mod(current.x + sin(iTime), 1.) - 0.5), 0.5)) *\n                \t\t(.1 / abs(mod(current.y + cos(iTime), 1.) - 0.5)) *\n                \t\t(.1 / abs(mod(current.z - sin(iTime), 1.) - 0.5));\n        \treturn fog3 * intensity + fog3 * glow;\n        case 1:\n            //Scanlines\n        \treturn fog4 * diffuse * 4. * mod(fragCoord.y + iTime * 1.5 + 1., 2.);\n    \t}\n    }\n    \n    switch (interval) {\n        case 4:\n        \treturn fog1 * (0.2 + intensity * intensity * 0.6);\n        case 3:\n        \treturn fog2 * 0.4;\n        case 2:\n        \treturn fog3 * intensity * (pow(sin(bottom.y + iTime * intensity * intensity), intensity) + 1.);\n        case 1:\n        \tt = plane(vec3(0., 0., -1.), r, d, vec3(0., 0., 1.));\n    \t\tvec3 bottom = r + d * t;\n        \treturn lasers * 0.3 * (1. / pow(abs(mod(bottom.x, 6.) - 3.), 0.5));\n    }\n}\n\nconst vec3 beatVector = normalize(vec3(0., -1., 1.));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#ifdef DEBUG_BUFFER\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    return;\n#endif\n    \n    vec3 r = vec3(iResolution.x / 2., taa() + 2., 2.);\n    \n    float aspect = iResolution.x / iResolution.y;\n\tvec2 uv = (fragCoord / iResolution.xy) - vec2(0.5);\n    \n    vec3 color = vec3(0.);\n    \n    vec3 state = texelFetch(iChannel1, ivec2(0., 0.), 0).rgb;\n    \n    // Death\n    if (state.z > 0.5) {\n        fragColor = vec4(0.);\n        \n        // Rect\n        if (-.1 < uv.x && uv.x < -0.05 &&\n            -0.2 < uv.y && uv.y < 0.2)\n        {\n            fragColor = vec4(1.);\n        }\n        \n        // Triangle\n        else if(uv.y < uv.x * aspect + 0.1 &&\n                uv.y > -uv.x * aspect - 0.1 &&\n                uv.x < 0.06) {\n            fragColor = vec4(1.);\n        }\n        \n        return;\n    }\n    \n    float playerX = state.x;\n    r.x += playerX;\n    \n    int interval = interval();\n    \n    if (interval == 1) {\n        r += beatVector * mod(iTime, 0.666) * 0.2;\n    }\n    \n    for (float s = 0.; s < SAMPLE_COUNT; s += 1.) {\n        float jitterWidth = 1. / (4. * iResolution.x);\n        float jitterHeight = 1. / (4. * iResolution.y);\n        vec3 d = normalize(vec3(uv.x * aspect + s * jitterWidth, 1., uv.y + s * jitterHeight));\n        color += renderPixel(r, d, interval, fragCoord);\n    }\n    \n    color /= float(SAMPLE_COUNT);\n    \n    fragColor.rgb = clamp(color, vec3(0.), vec3(1.));\n    \n    if (interval > 1) {\n    \t// Transition whiteout\n        fragColor.rgb = mix(fragColor.rgb, vec3(1.), smoothstep(.99, 1., intensity(iTime)));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "musicstream",
                        "id": 18809,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/official-rezz/rezz-x-1788-l-h-e-x"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Block Buffer //\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float initialized = texture(iChannel0, fragCoord / iResolution.xy).a;\n    \n    if (iFrame < 1 && fragCoord.y < 200.) {\n        fragColor.a = 1.;\n        initialized = 1.;\n        return;\n    }\n    \n    if (initialized < 0.5 || fragCoord.y > iResolution.y - 1.) {\n        // New blocks\n        float probability = 0.1 + float(5 - interval()) * 0.025;\n        fragColor = vec4(step(pow(rand(fragCoord + iTime), probability), 0.5));\n        \n        // Color\n        fragColor.r *= rand(fragCoord * 3. + iTime);\n        fragColor.g *= rand(-fragCoord * 2. + iTime);\n        fragColor.b *= rand(fragCoord * 4. - iTime * 2.);\n        // Mark as initialized\n        fragColor.a = 1.;\n    } else {\n        if (iFrame % interval() == 0) {\n        \t// Panning\n        \tfragColor = texture(iChannel0, (fragCoord + vec2(0., 1.)) / iResolution.xy);\n        } else {\n            fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//#define INVINCIBLE\n\n// Game State //\n\nconst int KEY_LEFT  = 37;\nconst int KEY_RIGHT = 39;\n\nconst float SPEED = 5.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Player position\n    if (fragCoord.x < 1. && fragCoord.y < 1.) {\n        // Control\n    \tfloat kl = texelFetch( iChannel3, ivec2(KEY_LEFT,0), 0).r;\n\t\tfloat kr = texelFetch( iChannel3, ivec2(KEY_RIGHT,0), 0).r;\n        \n        fragColor = texelFetch(iChannel1, ivec2(fragCoord), 0);\n        float playerX = fragColor.x;\n        playerX += (kr - kl) * SPEED * float(5 - interval()) * iTimeDelta;\n        \n        // Collision detection\n        vec3 block = texelFetch(iChannel0, ivec2(int(iResolution.x / 2. + playerX), 8), 0).rgb;\n        \n#ifndef INVINCIBLE\n        if (interval() > 1 && length(block) > 0.) {\n            playerX = 0.;\n            fragColor.z = 1.;\n        }\n#endif\n        \n        fragColor.x = playerX;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define M1 26.5\n#define M15 37.2\n#define M2 47.8\n#define M25 53.15\n#define M3 58.5\n\n#define interval() int(4. - step(M1, iTime) - step(M2, iTime) - step(M3, iTime))\n\n#define taa() (float(iFrame % interval()) / 4.)\n\nfloat intensity(float time) {\n    if (time < M1) {\n        return time / M1;\n    } else if (time < M15) {\n        return (time - M1) / (M15 - M1);\n    } else if (time < M2) {\n        return (time - M15) / (M2 - M15);\n    } else if (time < M3) {\n        return (time - M2) / (M3 - M2);\n    } else {\n        return time - M3;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}