{
    "Shader": {
        "info": {
            "date": "1613057955",
            "description": "True bliss isn't from a magic formula or a labor of love. Its a glitch, a hack and most likely a random domain distortion with sine waves... always from a kali preset.",
            "flags": 8,
            "hasliked": 0,
            "id": "wlcfR2",
            "likes": 30,
            "name": "Bliss Function",
            "published": 3,
            "tags": [
                "bliss"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 687
        },
        "renderpass": [
            {
                "code": "//Bliss Function by eiffie\n#define time iTime\n#define rez iResolution\n\nvec3 mcol=vec3(0.0);\nfloat t=0.;\nfloat DE(vec3 p0){\n  vec3 pc=sin(p0.yzx*vec3(1,1.3,1.7)+vec3(time));\n  if(mcol.x>0.0)mcol+=vec3(0.5)+0.5*pc;\n  vec4 p=vec4(mod(p0+pc*.2,2.)-1.,1.5-t/20.);\n  vec3 c=vec3(.97,.65,1)*-4.0;\n  for(int n=0;n<3;n++){\n    p.xyz=abs(p.xyz+1.0)-1.0;\n    p*=2.0/clamp(dot(p.xyz,p.xyz),0.,1.);\n    if(p.x>p.y)p.xy=p.yx;\n    p.xyz+=c;\n  }\n  p=abs(p);\n  return (max(p.x-.2,p.y-1.))/p.w;\n}\nvec3 normal(vec3 p, float d){//from dr2\n  vec2 e=vec2(d,-d);vec4 v=vec4(DE(p+e.xxx),DE(p+e.xyy),DE(p+e.yxy),DE(p+e.yyx));\n  return normalize(2.*v.yzw+vec3(v.x-v.y-v.z-v.w));\n}\nvec3 sky(vec3 rd, vec3 L){\n  float d=0.5*dot(rd,L)+0.5;\n  vec3 bg=mix(vec3(.4,.5,.7),vec3(.7,.5,.1),d);\n  bg=mix(bg,vec3(1.,.9,0.),pow(d,40.));\n  vec3 c=sin(rd*7.+2.*sin(rd.yzx*7.+2.*sin(7.*rd.zxy)));\n  d=(c.x+c.y+c.z)*.15;\n  bg=mix(bg,vec3(max(.75,(c.x+c.y+c.z)*.27)),d);\n  return bg;\n}\nfloat rnd;\nvoid randomize(in vec2 p){rnd=fract(float(time)+sin(dot(p,vec2(13.3145,117.7391)))*42317.7654321);}\n\nfloat ShadAO(in vec3 ro, in vec3 rd){\n float t=0.01*rnd,s=1.0,d,mn=0.01;\n for(int i=0;i<12;i++){\n  d=max(DE(ro+rd*t)*1.5,mn);\n  s=min(s,d/t+t*0.5);\n  t+=d;\n }\n return s;\n}\nvec3 scene(vec3 ro, vec3 rd){\n  t=DE(ro)*rnd;\n  float d,px=1.0/rez.x,stop=10.+sin((rd.x+rd.y+rd.z)*3.)*2.;\n  for(int i=0;i<99;i++){\n    t+=d=DE(ro+rd*t);\n    if(t>stop || d<px*t)break;\n  }\n  vec3 L=normalize(vec3(0.4,0.025,0.5));\n  vec3 col=sky(rd,L);\n  if(d<px*t*5.0){\n    mcol=vec3(0.001);\n    vec3 so=ro+rd*t;\n    vec3 N=normal(so,d);\n    vec3 scol=mcol*0.25;\n    float dif=0.5+0.5*dot(N,L);\n    float vis=clamp(dot(N,-rd),0.05,1.0);\n    float fr=pow(1.-vis,5.0);\n    float shad=ShadAO(so,L);\n    col=(scol*dif+fr*sky(reflect(rd,N),L))*shad;\n  }\n  return col;\n}\nmat3 lookat(vec3 fw){\n   fw=normalize(fw);vec3 rt=normalize(cross(fw,normalize(vec3(.2,.8,.2))));\n   return mat3(rt,cross(rt,fw),fw);\n}\nvec3 path(float tim){return vec3(sin(tim),sin(tim*.3),cos(tim))*10.;}\nvoid mainImage(out vec4 O, in vec2 U){\n  vec2 uv=vec2(U-0.5*rez.xy)/rez.x;\n  randomize(U);\n  float tim=time*.15;\n  vec3 ro=path(tim);\n  vec3 rd=lookat(path(tim+1.)-ro)*normalize(vec3(uv.xy,1.0));\n  O=vec4(scene(ro,rd),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define bps 4.5\nfloat rnd(float t){return fract(sin(mod(t,32.123)*32.123)*41.123);}\nvec2 nofs(float n){//the song's \"random\" ring\n  float r=0.5+0.5*rnd(floor(n));\n  n=mod(n,8.0);\n  if(n<1.0)n= 1.0;\n  else if(n<2.0)n= 3.0;\n  else if(n<3.0)n= 5.0;\n  else if(n<4.0)n= 7.0;\n  else if(n<5.0)n= 5.0;\n  else if(n<6.0)n= 3.0;\n  else if(n<7.0)n= 1.0;\n  else n=0.0;\n  return vec2(n,r);\n}\nfloat scale(float note){//throws out dissonant tones\n float n2=mod(note,12.);\n //if((n2==1.)||(n2==3.)||(n2==6.)||(n2==8.)||(n2==10.))note=-100.;//major\n if((n2==1.)||(n2==4.)||(n2==6.)||(n2==9.)||(n2==11.))note=-100.;//minor\n //if((n2==1.)||(n2==2.)||(n2==4.)||(n2==6.)||(n2==8.)||(n2==9.)||(n2==11.))note=-100;//pentatonic minor\n //if((n2==1.)||(n2==2.)||(n2==4.)||(n2==8.)||(n2==9.)||(n2==11.))note=-100.;//blues \n //if((n2==1.)||(n2==2.)||(n2==5.)||(n2==6.)||(n2==8.)||(n2==10.)||(n2==11.))note=-100.;//country\n //if((n2==1.)||(n2==4.)||(n2==7.)||(n2==10.))note=-100.;//diminished whole/half\n //if((n2==1.)||(n2==3.)||(n2==5.)||(n2==6.)||(n2==8.)||(n2==10.)||(n2==11.))note=-100.;//pentatonic major\n //if((n2==1.)||(n2==4.)||(n2==6.)||(n2==9.)||(n2==10.))note=-100.;//harmonic minor\n //if((n2==1.)||(n2==4.)||(n2==6.)||(n2==8.)||(n2==10.))note=-100.;//melodic minor ascending\n //if((n2==1.)||(n2==3.)||(n2==5.)||(n2==7.)||(n2==9.)||(n2==11.))note=-100.;//whole tone\n //if((n2==2.)||(n2==5.)||(n2==8.)||(n2==11.))note=-100.;//diminished half/whole\n //if((n2==1.)||(n2==3.)||(n2==6.)||(n2==8.)||(n2==11.))note=-100.;//mixolydian  \n //if((n2==1.)||(n2==4.)||(n2==6.)||(n2==8.)||(n2==11.))note=-100.;//dorian\n //if((n2==1.)||(n2==3.)||(n2==5.)||(n2==8.)||(n2==10.))note=-100.;//lydian  \n //if((n2==2.)||(n2==4.)||(n2==6.)||(n2==9.)||(n2==11.))note=-100.;//Phrygian\n //if((n2==2.)||(n2==3.)||(n2==6.)||(n2==9.)||(n2==11.))note=-100.;//Phrygian Major\n //if((n2==1.)||(n2==3.)||(n2==5.)||(n2==8.)||(n2==11.))note=-100.;//locrian\n //if((n2==2.)||(n2==4.)||(n2==7.)||(n2==9.)||(n2==11.))note=-100.;//lydian dominant\n //if((n2==2.)||(n2==3.)||(n2==6.)||(n2==9.)||(n2==10.))note=-100.;//double harmonic\n //if((n2==2.)||(n2==3.)||(n2==5.)||(n2==7.)||(n2==9.))note=-100.;//enigmatic\n //if((n2==2.)||(n2==4.)||(n2==6.)||(n2==8.)||(n2==10.))note=-100.;//neapolitan \n //if((n2==2.)||(n2==4.)||(n2==6.)||(n2==9.)||(n2==10.))note=-100.;//neapolitan minor\n //if((n2==1.)||(n2==4.)||(n2==5.)||(n2==9.)||(n2==10.))note=-100.;//hungarian minor\n return note;\n}\n// note number to frequency  from https://www.shadertoy.com/view/ldfSW2\nfloat ntof(float n){return (n>0.0)?440.0 * pow(2.0, (n - 67.0) / 12.0):0.0;}\nconst float PI=3.14159;\nfloat Cos(float a){return cos(mod(a,PI*2.));}\nfloat Sin(float a){return Cos(a+PI/2.);}\nstruct instr{float att,fo,vibe,vphas,phas,dtun;};\nvec2 I(float n,float t,float bt,instr i){//note,time,bt 0-8,instrument\n float f=ntof(scale(n));if(f<12.)return vec2(0.0);f-=bt*i.dtun;f*=t*PI*2.;\n f=exp(-bt*i.fo)*(1.0-exp(-bt*i.att))*Sin(f+Cos(bt*i.vibe*PI/8.+i.vphas*PI/2.)*Sin(f*i.phas))*(1.0-bt*0.125);\n n+=t;return vec2(f*Sin(n),f*Cos(n));\n}\nvec2 mainSound(int samp, float time){\n instr epiano=instr(20.0,0.05,1.5,0.1,0.505,0.001);\n instr sitar=instr(30.0,0.25,0.1,0.0,0.25125,0.005);\n instr kettledrum=instr(50.0,0.5,4.0,0.75,1.0,0.0125);\n instr hihat=instr(100.0,1.0,100.5,0.0,1.3131,100.0);\n instr ebongo=instr(500.0,2.0,100.5,0.0,1.333,2.0);\n instr bass=instr(20.0,0.2,1.5,0.0,0.2525,0.005);\n float tim=time*bps;\n vec2 a=vec2(0);//accumulator\n for(float i=0.;i<8.;i+=1.){//go back 8 beats and add note tails\n   float b0=floor(tim),b1=floor(tim*0.5),b2=floor(tim*0.25);\n   float t0=fract(tim),t1=fract(tim*0.5)*2.0,t2=fract(tim*0.25)*4.0;\n   vec2 n2=nofs(b2*0.125)+nofs(b2*0.5)+nofs(b2);\n   vec2 n1=n2+nofs(b1),n0=n1+nofs(b0);\n   a+=I(n0.x+72.0,time,t0+i,sitar)*n0.y*0.15;\n   a+=I(n0.x+73.0,time+Sin((t0+i)*222.0),t0+i,hihat)*n0.y*0.05;\n   if(mod(i,2.)<1.){//notes that play every 2 beats\n     a+=I(n1.x+56.0,time,t1+i,epiano)*n1.y;\n     a+=I(n1.x+60.0,time,t1+i,epiano)*n1.y;\n     a+=I(n1.x+63.0,time,t1+i,ebongo)*n1.y*.75;\n     if(mod(i,4.)<1.){//every 4\n       a+=I(n2.x+56.0,time,t2+i,bass)*n2.y*4.0;\n       a+=I(n2.x+48.0,time,t2+i,kettledrum)*n2.y*4.0;\n     }\n   }\n   tim-=1.;\n }\n return clamp(a/256.0,-1.,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}