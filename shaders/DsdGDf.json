{
    "Shader": {
        "info": {
            "date": "1677955949",
            "description": "CC0: Necropolis for Windows Terminal\nTweaked the earlier alien city shader and ported it to Windows Terminal\n\nhttps://github.com/mrange/windows-terminal-shader-gallery/\n",
            "flags": 64,
            "hasliked": 0,
            "id": "DsdGDf",
            "likes": 17,
            "name": "Necropolis for Windows Terminal",
            "published": 3,
            "tags": [
                "windows",
                "xor"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 436
        },
        "renderpass": [
            {
                "code": "// CC0: Necropolis for Windows Terminal\n//  Tweaked the earlier alien city shader and ported it to Windows Terminal\n\n// https://github.com/mrange/windows-terminal-shader-gallery/\n\n#define TIME            iTime\n#define RESOLUTION      iResolution\n\n#define PI                  3.141592654\n#define TAU                 (2.0*PI)\n#define TOLERANCE           0.0001\n#define MAX_RAY_LENGTH      16.0\n#define MAX_RAY_MARCHES     60\n#define MAX_SHADOW_MARCHES  24\n#define NORM_OFF            0.001\n#define REPS                6\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\nconst vec3 bcol = HSV2RGB(vec3(0.45, 0.85, 0.051));\nconst vec3 dcol = HSV2RGB(vec3(0.58, 0.666, 0.666));\nconst vec3 scol = HSV2RGB(vec3(0.58, 0.5  , 2.0));\nconst vec3 gcol = HSV2RGB(vec3(0.35, 0.36 , 5.0));\nconst vec3 skyCol = (0.125*gcol+dcol)*0.5; \nconst vec2 csize  = vec2(4.5);\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Claude Brezinski, found: https://mathr.co.uk/blog/2017-09-06_approximating_hyperbolic_tangent.html\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat ubox(vec3 p, vec3 b) {\n  vec3 q = p;\n  q.xz = abs(p.xz);\n  q -= b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// License: CC0, author: Mårten Rånge, found: https://github.com/mrange/glsl-snippets\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\n\nfloat df(vec3 p) {\n  float d1 = p.y;\n  p.y -= 0.50;\n  float d = 1E6;\n  vec2 n = mod2(p.xz, csize);\n  float d2 = length(p-vec3(0.0, 0.5, 0.0))-0.5;\n  float sc = 1.;\n  const float zz = 2.0;\n  const float hh = 1.0;\n  for (int i = 0; i < REPS; ++i) {\n    float d0 = ubox(p, vec3(1.0, hh, 1.))-0.033;\n    vec3 tp = p;\n    tp.y -= -0.5*hh;\n    vec3 sp = p;\n    sp.y -= hh;\n    float d4 = length(sp)-1.1;\n    float dd = d0;\n    dd = min(dd, d0);\n    dd = pmax(dd, -d4, 0.2);\n    dd *= sc;      \n    d = pmin(d, dd, 0.25*sc);\n    p.xz = abs(p.xz);\n    const float off = 1.125;\n    p -= vec3(off, -hh*0.25, off);\n    p *= zz;\n    sc /= zz;\n  }\n  \n  d = min(d, d1);\n  d = min(d, d2);\n  return d;\n}\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, float initt, out int iter) {\n  float t = initt;\n  const float tol = TOLERANCE;\n  vec2 dti = vec2(1e10,0.0);\n  int i = 0;\n  for (i = 0; i < MAX_RAY_MARCHES; ++i) {\n    float d = df(ro + rd*t);\n    if (d<dti.x) { dti=vec2(d,t); }\n    if (d < TOLERANCE || t > MAX_RAY_LENGTH) {\n      break;\n    }\n    t += d;\n  }\n  if(i==MAX_RAY_MARCHES) { t=dti.y; };\n  iter = i;\n  return t;\n}\n\nfloat softShadow(vec3 ps, vec3 ld, float mint, float k) {\n  float res = 1.0;\n  float t = mint*2.0;\n  for (int i=0; i<MAX_SHADOW_MARCHES; ++i) {\n    vec3 p = ps + ld*t;\n    float d = df(p);\n    res = min(res, k*d/t);\n    if (res < TOLERANCE) break;\n    \n    t += max(d, mint);\n  }\n  return clamp(res, 0.0, 1.0);\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n  const vec3 lightDir = normalize(vec3(5.0, 10.0, 10.0));\n  int iter;\n  float initt = -(ro.y-1.65)/rd.y;\n  float bott  = -(ro.y-0.0125)/rd.y;\n  float t = rayMarch(ro, rd, initt, iter);\n  vec3 col = skyCol;\n  vec3 bp = ro+rd*bott;\n  vec3 p = ro+rd*t;\n  vec3 n = normal(p);\n  vec3 r = reflect(rd, n);\n  float sd = softShadow(p, lightDir, 0.025, 4.0);\n  float dif = max(dot(lightDir, n), 0.0);\n  dif *= dif;\n  dif *= dif;\n  float spe = pow(max(dot(lightDir, r), 0.0), 10.0);\n  float ii = float(iter)/float(MAX_RAY_MARCHES);\n  if (t < MAX_RAY_LENGTH) {\n    col = dcol;\n    col += gcol*tanh_approx(1.0*ii*ii);\n    col *= mix(0.05, 1.0, dif*sd);\n    col += spe*sd*scol;\n  }\n  float wp = 0.25*bp.x;\n  float wn = mod(floor(wp), 2.0);\n  wp = fract(wp);\n  wp = mix(wp, 1.0-wp, wn);\n  float wave = texture(iChannel0, vec2(wp, 0.75)).x-0.5;\n  float gd = abs(abs(bp.z+0.25*wave) - 2.25);\n  gd -= mix(0.0025, 0.01, 0.5+0.5*(sin(13.0*bp.x+2.0*TIME)*sin(6.0*bp.x+3.0*TIME)));\n  \n  col += bcol/max(gd+.5*max(bott-t, 0.001), 0.0002*bott*bott);\n\n  float c = tanh_approx(p.y*p.y*5.0);\n  col = mix(skyCol, col, exp(-mix(0.25, 0.125, c)*max(t-initt, 0.)-0.25*max(t-5.0, 0.)));\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  vec3 ro = vec3(3.0, 3.35, .0);\n  ro.x -= 0.1*TIME;\n  const vec3 up = normalize(vec3(0.0, 1.0, 0.0));\n  const vec3 ww = normalize(vec3(-3.0, -2.0, 0.0));\n  vec3 uu = normalize(cross(up, ww ));\n  vec3 vv = (cross(ww,uu));\n  const float fov = tan(TAU/6.);\n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww);\n\n  float ll = length(pp);\n  vec3 col = render(ro, rd);\n  col -= 0.1*vec3(0.0, 1.0, 2.0).zyx*(ll+0.3);\n  col *= smoothstep(1.75, 1.0-0.5, ll);\n  col = aces_approx(col); \n  col = sRGB(col);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p,pp);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 32571,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/wolfgang1217/divinitus-rome-total-war-o-s-t?si=070036b5bdf3488fb67cc9bc63407a51&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}