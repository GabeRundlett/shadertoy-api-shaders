{
    "Shader": {
        "info": {
            "date": "1624049030",
            "description": "Simple GPU pathtracing. Generated rays used emmitance of object as light sources. Doenst currently sample lights at each bounce.",
            "flags": 32,
            "hasliked": 0,
            "id": "7t2GWm",
            "likes": 1,
            "name": "Path traced cornell v1.0",
            "published": 3,
            "tags": [
                "cornellbox",
                "pathtracing"
            ],
            "usePreview": 0,
            "username": "Danimtz",
            "viewed": 269
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec3 col = vec3(0.0);\n    // Time varying pixel color\n    if(iFrame>0)\n    {\n        col = texelFetch( iChannel0, ivec2(fragCoord), 0 ).xyz;\n        col /= float(iFrame);\n    }\n    \n    // Output to screen\n    col *= 2.5; \n    fragColor = vec4(pow(col, vec3(0.4545)),1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 200.0\n#define SURF_DIST 0.0001\n\n#define OBJ1 1.0\n#define OBJ2 2.0\n#define LIGHT_ID 3.0\n#define RIGHT_WALL 4.0\n#define LEFT_WALL 5.0\n\n\n\nfloat sdBox( vec3 p, vec3 r )\n{\n  vec3 q = abs(p) - r;\n  return length(max(q,0.0)) + min(max(q.x, max(q.y,q.z)), 0.0);\n}\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nvec2 minSDF(vec2 sdf1, vec2 sdf2)\n{\n    return sdf1.x<sdf2.x ? sdf1 : sdf2;\n}\n\n\nvec2 rot_point(vec2 a, float b)\n{\n    float c = cos(b);\n    float s = sin(b);\n    return vec2(a.x * c - a.y * s, a.x * s + a.y * c);\n}\n\nfloat hash(float seed)\n{\n    return fract(sin(seed)*43758.5453);\n}\n\n//http://www.amietia.com/lambertnotangent.html\nvec3 getBRDFray(vec3 n, float seed)\n{\n    float u = hash(78.233 + seed);\n    float v = hash(10.873 + seed);\n\n    float theta = 6.283185 * v; //2pi*v\n    u = 2.0*u - 1.0;\n    vec3 sph_point = vec3(sqrt(1.0 - u*u) * vec2(cos(theta), sin(theta)), u);\n\n    return normalize(n + sph_point);\n}\n\nvec2 map(vec3 p) //cornell box map\n{\n    vec2 cur_sdf = vec2(1e10, 1.0);\n\n    float size = 2.0;\n    cur_sdf = minSDF(cur_sdf, vec2(sdBox(p-vec3(0.0, -size, 0.0), vec3(size, 0.01, size)), OBJ1));//plane\n    cur_sdf = minSDF(cur_sdf, vec2(sdBox(p-vec3(-size, 0.0, 0.0), vec3(0.01, size, size)), LEFT_WALL));//side walls\n    cur_sdf = minSDF(cur_sdf, vec2(sdBox(p-vec3(size, 0.0, 0.0), vec3(0.01, size, size)), RIGHT_WALL));\n    cur_sdf = minSDF(cur_sdf, vec2(sdBox(p-vec3(0.0, size, 0.0), vec3(size, 0.01, size)), OBJ1));//cealing\n    cur_sdf = minSDF(cur_sdf, vec2(sdBox(p-vec3(0.0, 0.0, size), vec3(size, size, 0.01)), OBJ1));//backwall\n\n    cur_sdf = minSDF(cur_sdf, vec2(sdBox(p-vec3(0.0, 1.99, 0.0), vec3(0.5, 0.01, 0.5)), LIGHT_ID));//light\n\n   \n    cur_sdf = minSDF(cur_sdf, vec2(sdSphere(p-vec3(-1.0, -1.5, 0.3), 0.5), OBJ2 ));//sphere\n    cur_sdf = minSDF(cur_sdf, vec2(sdSphere(p-vec3(0.2, -1.7, -1.0), 0.3), OBJ2 ));//sphere\n\n    vec3 q = p-vec3(1.0, -1.1, 0.5);\n    q.xz = rot_point(q.xz, 0.4);\n    cur_sdf = minSDF(cur_sdf, vec2(sdBox(q, vec3(0.4, 0.9, 0.4)), OBJ2));//box\n    return cur_sdf;\n}\n\nvec3 getNormal(vec3 p)\n{\n    vec2 e = vec2(0.0001, 0);//error bias\n    vec3 n = normalize(vec3(\n            map(p + e.xyy).x - map(p - e.xyy).x,\n            map(p + e.yxy).x - map(p - e.yxy).x,\n            map(p + e.yyx).x - map(p - e.yyx).x));\n    return n;\n}\n\nvec2 rayMarch(vec3 ro, vec3 rd)\n{\n    float t = 0.0001;\n    vec2 res;\n    for(int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + t*rd;\n        res = map(p);\n        if(res.x < SURF_DIST || res.x > MAX_DIST) break;\n        t += res.x;\n    }\n\n    if (t > MAX_DIST) t = -1.0;\n    \n    return vec2(t, res.y);\n}\n/*\nfloat calcShadow(vec3 ro, vec3 rd)\n{\n    float t = 0.0001;\n    for(int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + t*rd;\n        float res = map(p).x;\n        if(res < SURF_DIST || res > MAX_DIST) break;\n        t += res;\n    }\n\n    return t>MAX_DIST ? 1.0 : 0.0;\n}*/\n\nvec4 getMaterial(float objID){\n\n    vec4 col = vec4(vec3(1.0), 0.0);\n    if(objID == OBJ2)       {col = vec4(vec3(0.7), 0.0);}\n    else if(objID == OBJ1)  {col = vec4(vec3(1.0), 0.0);}//vec3(0.016, 0.02, 0.03)\n    else if(objID == RIGHT_WALL)  {col = vec4(vec3(0.7, 0.05, 0.1), 0.0);}\n    else if(objID == LEFT_WALL)  {col = vec4(vec3(0.1, 0.7, 0.03), 0.0);}\n    else if(objID == LIGHT_ID)  {col = vec4(vec3(1.0, 0.83, 0.71), 4.0);}\n    else                    {col = vec4(vec3(0.2), 0.0);}\n\n    return col;\n}\n\n\n#define GI_BOUNCE 6\nvec3 pathTraceColor(vec3 ro, vec3 rd, float rngFloat)\n{\n    vec3 total_col = vec3(0.0);\n    vec3 ray_col = vec3(1.0);\n    for(int i = 0; i < GI_BOUNCE; i++)\n    {\n        //raymarch scene/////////\n        vec2 res = rayMarch(ro, rd);\n        float t = res.x;\n        float objID = res.y;\n\n        //check ray didnt escape scene/////////\n        if(t < 0.0)  {break;}\n\n        //point position and normal/////////\n        vec3 p = ro + t*rd;\n        vec3 n = getNormal(p);\n\n        //lighting for current path////////\n        vec4 material = getMaterial(objID);\n        float emisiv = material.w;\n        \n        ray_col *= material.xyz; //add surface colour to ray\n\n        vec3 indirect_light = ray_col * emisiv;\n        total_col += indirect_light * ray_col; //indirect + direct light\n\n        //setup new ray/////////\n        ro = p+n*0.05;\n        rd = getBRDFray(n, 76.2 + 73.1*float(i) + rngFloat + 17.7*float(iFrame));\n    }\n    return total_col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    \n    //center 0,0\n    float rng = hash( dot( fragCoord, vec2(12.9898, 78.233) ) + 1113.1*float(iFrame)); //RNG\n    \n    //AA through random offset\n    vec2 offset = -0.5 + vec2( hash(rng+13.271), hash(rng+63.216) );\n    vec2 uv = ((fragCoord+offset) - 0.5*iResolution.xy)/iResolution.y; \n   \n\n    vec3 ro = vec3(0.0, 0.0,-5.5);\n    vec3 rd = vec3(uv.x, uv.y, 1.0);\n\n    vec3 col = texelFetch( iChannel0, ivec2(fragCoord), 0 ).xyz;\n    if( iFrame==0 ) {col = vec3(0.0);};\n\n    col += pathTraceColor(ro, rd, rng);\n\n\n    fragColor = vec4( col , 1.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}