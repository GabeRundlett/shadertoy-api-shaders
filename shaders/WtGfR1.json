{
    "Shader": {
        "info": {
            "date": "1613835703",
            "description": "License CC0: Smooth Koch coordinate transform\nPlaying around with koch mappings and attempt to smooth the distance\nfunction between cells",
            "flags": 0,
            "hasliked": 0,
            "id": "WtGfR1",
            "likes": 31,
            "name": "Smooth koch coordinate transform",
            "published": 3,
            "tags": [
                "2d",
                "koch"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 688
        },
        "renderpass": [
            {
                "code": "// License CC0: Smooth koch coordinate transform\n//  Playing around with koch mappings and attempt to smooth the distance\n//  function between cells\n\n#define TIME        iTime\n#define TTIME       (TIME*TAU)\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define N(a)        vec2(sin(a), cos(a))\n#define LESS(a,b,c) mix(a,b,step(0.,c))\n#define SABS(x,k)   LESS((.5/(k))*(x)*(x)+(k)*.5,abs(x),abs(x)-(k))\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n#define L2(x)       dot(x, x)\n#define PSIN(x)     (0.5 + 0.5*sin(x))\n\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\nvec2 mod2_1(inout vec2 p) {\n  vec2 c = floor(p + 0.5);\n  p = fract(p + 0.5) - 0.5;\n  return c;\n}\n\nfloat hash(vec2 co) {\n  return fract(sin(dot(co, vec2(12.9898, 58.233))) * 13758.5453);\n}\n\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  \n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\nfloat pabs(float a, float k) {\n  return pmax(a, -a, k);\n}\n\nconst float truchet_lw = 0.0125;\n\nconst mat2[] truchet_rots = mat2[](ROT(0.0*PI/2.0), ROT(1.00*PI/2.0), ROT(2.0*PI/2.0), ROT(3.0*PI/2.0));\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nfloat modMirror1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize,size) - halfsize;\n  p *= mod(c, 2.0)*2.0 - 1.0;\n  return c;\n}\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nvec2 toRect(vec2 p) {\n  return vec2(p.x*cos(p.y), p.x*sin(p.y));\n}\n\nfloat smoothKaleidoscope(inout vec2 p, float sm, float rep) {\n  vec2 hp = p;\n\n  vec2 hpp = toPolar(hp);\n  float rn = modMirror1(hpp.y, TAU/rep);\n\n  float sa = PI/rep - SABS(PI/rep - abs(hpp.y), sm);\n  hpp.y = sign(hpp.y)*(sa);\n\n  hp = toRect(hpp);\n\n  p = hp;\n\n  return rn;\n}\n\n// Attempt for classic koch mapping, thanks to art of code YT\nvoid koch(inout vec2 p) {\n  const float a = PI*2.0/3.0;\n  const vec2 nn = N(PI*5.0/6.0);\n  const vec2 n = N(a);\n\n  p.y -= sqrt(0.75);\n  p.x = abs(p.x);\n  p.x += -1.5;\n  p   -= nn*max(0.0, dot(p, nn))*2.0;\n  p.x -= -1.5;\n\n  const int levels = 6;\n  \n  p.x  = abs(p.x);\n  p.x -= 0.5;\n  p   -= n*min(0.0, dot(p, n))*2.0;\n\n\n  float s = 1.0;\n  for (int i = 1; i < levels; ++i) {\n    s /= 3.0;\n    p *= 3.0;\n    p.x -= 1.5;\n    \n    p.x  = abs(p.x);\n    p.x -= 0.5;\n    p   -= n*min(0.0, dot(p, n))*2.0;\n  }\n\n  p *= s;  \n}\n\n// Attempt to smooth koch mapping\nvoid skoch(inout vec2 p) {\n  const float a       = PI*2.0/3.0;\n  const vec2  nn      = N(PI*5.0/6.0);\n  const vec2  n       = N(a);\n  const int   levels  = 4;\n  const float k       = 0.0125;\n\n  p.xy = p.yx;\n  smoothKaleidoscope(p, k, 6.0);\n  p.xy = p.yx;\n  p.y -= 0.875;\n\n  p.x  = pabs(p.x, k*2.0);\n  p.x -= 0.5;\n  p   -= n*pmin(0.0, dot(p, n), k)*2.0;\n\n  float s = 1.0;\n  for (int i = 1; i < levels; ++i) {\n    s /= 3.0;\n    p *= 3.0;\n    p.x -= 1.5;\n    \n    p.x  = pabs(p.x, k/s*2.0);\n    p.x -= 0.5;\n    p   -= n*pmin(0.0, dot(p, n), k/s)*2.0;\n  }\n\n  p *= s;  \n}\n\n\nvec2 truchet_cell0(vec2 p, float h) {\n  float d0  = circle(p-vec2(0.5), 0.5);\n  float d1  = circle(p+vec2(0.5), 0.5);\n\n  float d = 1E6;\n  d = min(d, d0);\n  d = min(d, d1);\n  return vec2(d, 1E6); // 1E6 gives a nice looking bug, 1E4 produces a more \"correct\" result\n}\n\nvec2 truchet_cell1(vec2 p, float h) {\n  float d0  = abs(p.x);\n  float d1  = abs(p.y);\n  float d2  = circle(p, mix(0.2, 0.4, h));\n\n  float d = 1E6;\n  d = min(d, d0);\n  d = min(d, d1);\n  d = min(d, d2);\n  return vec2(d, d2+truchet_lw);\n}\n\nfloat truchet(vec2 p) {\n  vec2 np = mod2_1(p);\n  float r = hash(np);\n\n  p *= truchet_rots[int(r*4.0)];\n  float rr = fract(r*31.0);\n  vec2 cd0 = truchet_cell0(p, rr);\n  vec2 cd1 = truchet_cell1(p, rr);\n  vec2 d0 = mix(cd0, cd1, vec2(fract(r*13.0) > 0.5));\n\n  float d = 1E6;\n  d = min(d, d0.x);\n  d = abs(d) - truchet_lw;\n\n  return d;\n}\n\nfloat snowFlake(vec2 p) {\n  const float s = 0.2;\n\n  vec2 kp = p;\n  skoch(kp);\n  kp -= 0.7345;\n  kp *= ROT(1.0);\n  koch(kp);\n  kp += TIME*0.05;\n\n  float d = truchet(kp/s)*s;\n  return d-0.0025;\n}\n\nfloat df(vec2 p) {\n  const float rep = 10.0;\n  const float sm  = 0.05*6.0/rep;\n  mat2 rot = ROT(TTIME/240.0);\n  p *= rot;\n  smoothKaleidoscope(p, sm, rep);\n  p *= rot;\n  const float ss = 0.55;\n  return snowFlake(p/ss)*ss;\n}\n\nfloat height(vec2 p) {\n  float d = df(p);\n  float h = tanh_approx(smoothstep(0.02, 0.0, d)*mix(2.0, 6.0, PSIN(TTIME/60.0)));\n  return -h*0.01;\n}\n\nvec3 normal(vec2 p) {\n  vec2 v;\n  vec2 w;\n  vec2 e = vec2(4.0/RESOLUTION.y, 0);\n  \n  vec3 n;\n  n.x = height(p + e.xy) - height(p - e.xy);\n  n.y = 2.0*e.x;\n  n.z = height(p + e.yx) - height(p - e.yx);\n  \n  return normalize(n);\n}\n\nvec3 postProcess(vec3 col, vec2 q) {\n  col = clamp(col, 0.0, 1.0);\n  col = pow(col, 1.0/vec3(2.2));\n  col = col*0.6+0.4*col*col*(3.0-2.0*col);\n  col = mix(col, vec3(dot(col, vec3(0.33))), -0.4);\n  col *=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  const float s = 1.0;\n  const vec3 lp1 = vec3(1.0, 1.25, 1.0)*vec3(s, 1.0, s);\n  const vec3 lp2 = vec3(-1.0, 1.25, 1.0)*vec3(s, 1.0, s);\n\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  float aa = 2.0/RESOLUTION.y;\n\n  vec3 col = vec3(0.0);\n  float d = df(p);\n  float h = height(p);\n  vec3  n = normal(p);\n\n  vec3 ro = vec3(0.0, -10.0, 0.0);\n  vec3 pp = vec3(p.x, 0.0, p.y);\n\n  vec3 po = vec3(p.x, h, p.y);\n  vec3 rd = normalize(ro - po);\n\n  vec3 ld1 = normalize(lp1 - po);\n  vec3 ld2 = normalize(lp2 - po);\n  \n  float diff1 = max(dot(n, ld1), 0.0);\n  float diff2 = max(dot(n, ld2), 0.0);\n\n  vec3  rn    = n;\n  vec3  ref   = reflect(rd, rn);\n  float ref1  = max(dot(ref, ld1), 0.0);\n  float ref2  = max(dot(ref, ld2), 0.0);\n\n  vec3 lcol1 = vec3(1.5, 1.5, 2.0).zyx;\n  vec3 lcol2 = vec3(2.0, 1.5, 0.75).zyx;\n  vec3 lpow1 = 0.15*lcol1/L2(ld1);\n  vec3 lpow2 = 0.5*lcol2/L2(ld2);\n  vec3 dm = vec3(1.0)*tanh(-h*10.0+0.125);\n  col += dm*diff1*diff1*lpow1;\n  col += dm*diff2*diff2*lpow2;\n  vec3 rm = vec3(1.0)*mix(0.25, 1.0, tanh_approx(-h*1000.0));\n  col += rm*pow(ref1, 10.0)*lcol1;\n  col += rm*pow(ref2, 10.0)*lcol2;\n  col = postProcess(col, q);  \n  \n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}