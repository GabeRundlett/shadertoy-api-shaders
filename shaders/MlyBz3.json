{
    "Shader": {
        "info": {
            "date": "1543374669",
            "description": "ray marching test.",
            "flags": 0,
            "hasliked": 0,
            "id": "MlyBz3",
            "likes": 0,
            "name": "Ray Marching:test",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "truemeat001",
            "viewed": 152
        },
        "renderpass": [
            {
                "code": "const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n\nvec3 col;\nint hitindex;\nfloat planeSDF(vec3 samplePoint){\n \n\treturn samplePoint.y + 1.0;\n}\n\n/**\n * Signed distance function for a sphere centered at the origin with radius 1\n */\nfloat sphereSDF(vec3 samplePoint){\n\treturn length(samplePoint) - 1.0;\n}\n\nfloat sphereSDF2(vec3 samplePoint){\n\treturn length(samplePoint - vec3(2.0, 0.0, 2.0)) - 1.0;\n}\n\nfloat sdSphere(vec3 samplePoint, vec3 center, float radius)\n{\n    return length(samplePoint - center) - radius;\n}\n/**\n * Singed distance function describing the scene\n * \n * Absolute value of the return value indicates the distance to the surface.\n * Sign indicates whether the point is inside or outside the surfacce,\n * negative indicating inside.\n */\nfloat sceneSDF(vec3 samplePoint){\n    float p = planeSDF(samplePoint);\n    float s = sphereSDF(samplePoint);\n    float s2 = sphereSDF2(samplePoint);\n    float s3 = sdSphere(samplePoint, vec3(-4.0, 0.0, -4.0), 2.0);\n    hitindex = 2;\n    float o;\n    if(s < p || s2 < p)\n    {\n        hitindex = 0;\n        col = vec3(0.75, 0.75, 0.75);\n        o = s < s2 ? s : s2;\n        if(s3 < o)\n        {\n            o = s3;\n            col = vec3(0.8, 0.6, 0.2);\n        }\n    }else\n    {\n        hitindex = 1;\n         float w = sin(samplePoint.x * 10.0);\n         float h = sin(samplePoint.z * 10.0);\n         if(w>= 0.9 || h>= 0.9)\n             col = vec3(0.75, 0.75, 0.75);\n         else\n             col = vec3(0.2, 0.2, 0.2);\n        o = p;\n    }\n    return o;\n}\n\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end){\n\tfloat depth = start;\n    for(int i = 0; i < MAX_MARCHING_STEPS; i++){\n    \tfloat dist = sceneSDF(eye + depth * marchingDirection);\n        if(dist < EPSILON){\n        \treturn depth;\n        }\n        depth += dist;\n        if(depth >= end)\n        {\n           return end; \n        }\n    }\n    return end;\n}\n\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord, vec3 eye, vec3 lookat){\n    vec3 forward = lookat - eye;\n    vec3 right = normalize(cross(forward, vec3(0.0, 1.0, 0.0)));\n    vec3 up = normalize(cross(right, forward));\n\tvec2 uv = fragCoord / size.xy;\n    float dis = 1.0;\n    float halfH = dis * tan(radians(fieldOfView)/ 2.0);\n    float halfW = halfH * size.x / size.y;\n    vec3 point = eye + normalize(forward) * dis- halfW * right - halfH * up;\n    vec3 target = 2.0 * halfW * uv.x * right + 2.0 * halfH * uv.y*up + point;\n    vec3 dir = target - eye;\n    return normalize(dir);\n    \n    /*\n\tvec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView)/ 2.0);\n    return normalize(vec3(xy, -z));\n*/\n}\n\nvec3 estimateNormal(vec3 p){\n\treturn normalize(vec3(\n    \tsceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nvec3 lightpos= vec3(-10.0, 10.0, 5.0);\nvec3 getlightpos(float time)\n{\n    vec3 pos = vec3(10.0* sin(time), 10.0 , abs(10.0* cos(time)));\n    //return pos;\n\treturn lightpos;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    col = vec3(1.0);\n    \n    vec3 eye = vec3(sin(iTime * 0.1) * 20.0, 5.0 + sin(iTime * 0.02) * 2.0, cos(iTime * 0.1) * 20.0);\n    //vec3 eye = vec3(0.0, 5.0, 15.0);\n    vec3 lookat = vec3(0.0, 0.0, 0.0);\n    vec3 dir = rayDirection(30.0, iResolution.xy, fragCoord, eye, lookat);\n    \n    \n    float dist = shortestDistanceToSurface(eye, dir, MIN_DIST, MAX_DIST);\n    if(dist > MAX_DIST-EPSILON)\n    {\n        // hit nothing    \n        fragColor = vec4(0.2,0.3,0.4, 0.0);\n   \t\treturn;\n    }\n    vec3 p = eye + dir * dist;\n    vec3 N = estimateNormal(p);\n\tvec3 lightdir = normalize(getlightpos(iTime) - p);\n    vec3 half_vector = normalize(lightdir - dir); \n    float n_dot_h = dot(N, half_vector);\n    if(n_dot_h < 0.0)\n        n_dot_h = 0.0;\n    float lightp = pow(n_dot_h,16.0);\n\n\n    vec3 specular = vec3(1.0)* lightp;\n    vec3 cols;\n    if(hitindex == 0){\n        if(dot(N, half_vector) > 0.0)\n            cols = col * n_dot_h;\n        else\n            cols = vec3(0.0);\n    }\n    else \n       cols = col;\n    cols += specular;\n    fragColor = vec4(cols,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}