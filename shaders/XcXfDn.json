{
    "Shader": {
        "info": {
            "date": "1723569045",
            "description": "Graphic Design Experiment 15\nWe've moved the previous font animation shaders to unlisted due to performance issues on low-power devices.",
            "flags": 0,
            "hasliked": 0,
            "id": "XcXfDn",
            "likes": 29,
            "name": "Graphic Design Experiment 15",
            "published": 3,
            "tags": [
                "graphicdesign",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 292
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 64\n#define MAX_DIST 64.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(1.,-1., (d - b) / fwidth(d) )\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define deg45 .707\n#define R45(p) (( p + vec2(p.y,-p.x) ) *deg45)\n#define Tri(p,s) max(R45(p).x,max(R45(p).y,B(p,s)))\n#define PI 3.141592653589793\n\nconst vec2 path[9] = vec2[](vec2(-2.7,0.75),vec2(-2.7,0.35),vec2(-2.2,-0.1),vec2(-2.8,-0.75),vec2(2.7,-0.75),vec2(2.7,-0.35),vec2(2.2,0.1),vec2(2.8,0.75),vec2(-2.7,0.75));\nconst float angle_speed = radians(90.0);\n\nfloat cubicInOut(float t) {\n  return t < 0.5\n    ? 4.0 * t * t * t\n    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\n}\n\nfloat quadraticInOut(float t) {\n  float p = 2.0 * t * t;\n  return t < 0.5 ? p : -p + (4.0 * t) - 1.0;\n}\n\nfloat getTime(float t, float duration){\n    return clamp(t,0.0,duration)/duration;\n}\n\nfloat getAnimationValue(){\n    float easeValue = 0.;\n    float frame = mod(iTime,12.0);\n    float time = frame;\n    \n    float duration = 1.;\n    if(frame>=5. && frame<6.){\n        time = getTime(time-5.,duration);\n        easeValue = cubicInOut(time);\n    } else if(frame>=6. && frame<11.){\n        easeValue = 1.;\n    } else if(frame>=11. && frame<12.){\n        time = getTime(time-11.,duration);\n        easeValue = 1.0-cubicInOut(time);\n    }\n    \n    return easeValue;\n}\n\nfloat getEaseValue(float pathLength, float speed){\n    float duration = pathLength*speed*2.;\n    float timeStep = pathLength*speed;\n    float t = getTime(mod(iTime*0.7,pathLength),duration);\n    float ease = quadraticInOut(t)*pathLength;\n    return ease;\n}\n\nfloat plus(vec2 p, vec2 s){\n    float d = B(p,vec2(s.x,s.y));\n    float d2 = B(p,vec2(s.y,s.x));\n    d = min(d,d2);\n    return d;\n}\n\nfloat animationItem(vec2 p, vec2[9] path, float speed, float dir){\n    float pathLength = float(path.length()-1);\n    float ease = getEaseValue(pathLength,speed);\n    \n    vec2 currentPath = path[int(mod(ease,pathLength))];\n    vec2 nextPath = path[int(mod(ease,pathLength))+1];\n    vec2 lerpPath = mix(currentPath,nextPath,mod(ease,1.0));\n    vec2 newP = p+lerpPath;\n    newP*=Rot(iTime*angle_speed*dir);\n    float d = plus(newP,vec2(0.02,0.08));\n\n    return d;\n}\n\nfloat grid(vec2 p){\n    float thickness = 0.002;\n    float size = 0.1;\n    p+=vec2(size*0.5);\n    p = mod(p,size)-(size*0.5);\n    \n    float d = abs(p.x)-thickness;\n    float d2 = abs(p.y)-thickness;\n    d = min(d,d2);\n    return d;\n}\n\nfloat typoS(vec2 p){\n    vec2 prevP = p;\n    \n    p.y = abs(p.y);\n    float d = B(p-vec2(0.,0.25),vec2(0.3,0.05));\n    p = prevP;\n    \n    p.x+=0.1;\n    p*= Rot(radians(55.));\n    float d2 = B(p,vec2(0.36,0.05));\n    p = prevP;\n    d2 = max(-p.y-0.1,d2);\n    d = min(d,d2);\n    \n    p.x-=0.1;\n    p*= Rot(radians(55.));\n    d2 = B(p,vec2(0.36,0.05));\n    p = prevP;\n    d2 = max(p.y-0.1,d2);\n    d = min(d,d2);\n    \n    p*= Rot(radians(-45.));\n    d = max(B(p,vec2(0.355,0.5)),d);\n    \n    p = prevP;\n    d = max(B(p,vec2(0.3,0.3)),d);\n    return d;\n}\n\nfloat typoH(vec2 p){\n    vec2 prevP = p;\n    \n    float d = B(p-vec2(0.25,-0.05),vec2(0.05,0.35));\n    float d2 = B(p-vec2(0.,-0.05),vec2(0.3,0.05));\n    d = min(d,d2);\n    d2 = B(p-vec2(-0.25,-0.15),vec2(0.05,0.15));\n    d = min(d,d2);\n    d2 = B(p-vec2(-0.25,0.25),vec2(0.05,0.15));\n    d = min(d,d2);\n    \n    p*= Rot(radians(-45.));\n    d = max(B(p,vec2(0.355,0.5)),d);\n    \n    return d;\n}\n\nfloat typoA(vec2 p){\n    vec2 prevP = p;\n    float d = B(p-vec2(0.25,0.0),vec2(0.05,0.3));\n    float d2 = B(p-vec2(0.15,0.25),vec2(0.15,0.05));\n    d = min(d,d2);\n    d2 = B(p-vec2(0.1,-0.05),vec2(0.2,0.05));\n    d = min(d,d2);\n    \n    p*= Rot(radians(27.));\n    d2 = B(p-vec2(-0.085,0.),vec2(0.05,0.5));\n    d = min(d,d2);\n    \n    p = prevP;\n    d = max(B(p,vec2(0.3,0.3)),d);\n    return d;\n}\n\nfloat typoD(vec2 p){\n    vec2 prevP = p;\n    float d = B(p-vec2(-0.25,0.15),vec2(0.05,0.15));\n    float d2 = B(p-vec2(-0.25,-0.2),vec2(0.05,0.1));\n    d = min(d,d2);\n    d2 = B(p-vec2(0.25,-0.1),vec2(0.05,0.2));\n    d = min(d,d2);\n    d2 = B(p-vec2(-0.1,0.25),vec2(0.2,0.05));\n    d = min(d,d2);\n    \n    p-=vec2(0.13,-0.16);\n    p*= Rot(radians(45.));\n    d2 = B(p,vec2(0.15,0.05));\n    d = min(d,d2);\n    \n    p = prevP;\n    p-=vec2(0.13,0.2);\n    p*= Rot(radians(45.));\n    d2 = B(p,vec2(0.2,0.05));\n    d = min(d,d2);\n    \n    p = prevP;\n    d = max(B(p,vec2(0.3,0.3)),d);\n    return d;\n}\n\nfloat typoE(vec2 p){\n    vec2 prevP = p;\n    \n    float d = B(p-vec2(0.05,-0.25),vec2(0.25,0.05));\n    float d2 = B(p-vec2(0.1,-0.05),vec2(0.2,0.05));\n    d = min(d,d2);\n    d2 = B(p-vec2(0.1,0.25),vec2(0.2,0.05));\n    d = min(d,d2);\n    \n    d2 = B(p-vec2(-0.25,0.2),vec2(0.05,0.1));\n    d = min(d,d2);\n    \n    p-=vec2(-0.15,-0.28);\n    p*= Rot(radians(-45.));\n    d2 = B(p,vec2(0.05,0.3));\n    d = min(d,d2);   \n    \n    p = prevP;\n    p-=vec2(-0.205,0.075);\n    p*= Rot(radians(-45.));\n    d2 = B(p,vec2(0.05,0.2));\n    d = min(d,d2);   \n    \n    p = prevP;\n    d = max(B(p,vec2(0.3,0.3)),d);\n    return d;\n}\n\nfloat typoR(vec2 p){\n    vec2 prevP = p;\n    \n    float d = B(p-vec2(-0.1,0.25),vec2(0.2,0.05));\n    float d2 = B(p-vec2(-0.15,-0.05),vec2(0.15,0.05));\n    d = min(d,d2);    \n    \n    p-=vec2(0.15,0.22);\n    p*= Rot(radians(-65.));\n    d2 = B(p,vec2(0.05,0.3));\n    d = min(d,d2);   \n    \n    p = prevP;\n    p-=vec2(0.15,0.06);\n    p*= Rot(radians(57.));\n    d2 = B(p,vec2(0.05,0.21));\n    p = prevP;\n    d2 = max(p.y-0.15,d2);\n    d = min(d,d2);   \n    \n    p-=vec2(0.15,-0.2);\n    p*= Rot(radians(-40.));\n    d2 = B(p,vec2(0.05,0.25));\n    d = min(d,d2);  \n    \n    p = prevP;\n    d = max(B(p,vec2(0.3,0.3)),d);\n    return d;\n}\n\nfloat arrow(vec2 p){\n    vec2 prevP = p;\n    float d = B(p-vec2(-0.2,0.15),vec2(0.3,0.05));\n    \n    p-=vec2(0.215,0.21);\n    p*= Rot(radians(65.));\n    float d2 = B(p,vec2(0.05,0.15));\n    \n    p = prevP;\n    d2 = max(p.x-0.3,d2);\n    d = min(d,d2);    \n    \n    p.y-=0.15;\n    p.y = abs(p.y);\n    p-=vec2(-0.5,0.05);\n    \n    p*= Rot(radians(60.));\n    d2 = B(p,vec2(0.05,0.26));\n    \n    p = prevP;\n    d2 = max(p.x+0.3,d2);\n    \n    d = min(d,d2); \n     \n    return d;\n}\n\nfloat arrow2(vec2 p){\n    p*=-1.;\n    float d = arrow(p);\n    return d;\n}\n\nfloat stripes(vec2 p, float dir){\n    vec2 prevP = p;\n    \n    p*=Rot(radians(45.));\n    p.x+=iTime*0.2*dir;\n    p.x = mod(p.x,0.1)-0.05;\n    \n    float d = B(p,vec2(0.02,10.));\n    p = prevP;\n    return max(B(p,vec2(1.9,0.1)),d);\n}\n\nfloat drawTypos(vec2 p){\n    float d = arrow(p-vec2(-1.9,0.3));\n    float d2 = typoS(p-vec2(-1.8,0.0));\n    d = min(d,d2);\n    d2 = typoH(p-vec2(-1.1,0.0));\n    d = min(d,d2);\n    d2 = typoA(p-vec2(-0.4,0.0));\n    d = min(d,d2);\n    d2 = typoD(p-vec2(0.3,0.0));\n    d = min(d,d2);\n    d2 = typoE(p-vec2(1.,0.0));\n    d = min(d,d2);\n    d2 = typoR(p-vec2(1.7,0.0));\n    d = min(d,d2);\n    d2 = arrow2(p-vec2(1.8,-0.3));\n    d = min(d,d2);\n    d2 = stripes(p-vec2(-0.7,-0.55),-1.);\n    d = min(d,d2);\n    d2 = stripes(p-vec2(0.6,0.55),1.);\n    d = min(d,d2);\n    return d;\n}\n\nfloat drawGraphics(vec2 p){\n    p.x-=0.05;\n    float d = drawTypos(p);\n    \n    float d2 = animationItem(p,path,0.5,1.);\n    d = min(d,d2);\n    p*=-1.;\n    d2 = animationItem(p,path,0.5,-1.);\n    d = min(d,d2);\n\n    return d;\n}\n\nvec3 tileUV(vec3 p){\n    p.y-=iTime*0.6;\n    \n    float t = iTime*1.2+2.;\n    if(mod(p.y,3.6)>1.8){\n        p.x+=t*0.562;\n    } else {\n        p.x-=t*0.562;\n    }\n    \n    p.x = mod(p.x,5.8)-2.9;\n    p.y = mod(p.y,1.8)-0.9;\n    return p;\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    p = tileUV(p);\n    float d = drawGraphics(p.xy);\n    d = max((abs(p.z)-0.1),d);\n    \n    return vec2(d,0);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd,  int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n        \n        if(i<50){\n            dO.x += dS.x*0.38;\n        } else {\n            dO.x += dS.x;\n        }\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,5,5));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff;\n    diffCol += col*vec3(1.)*skyDiff;\n    diffCol += col*vec3(0.5)*bounceDiff;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.); // spec\n        \n    return diffCol;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    col = diffuseMaterial(n,rd,p,vec3(0.1));\n    return col;\n}\n\nfloat dots(vec2 p){\n    p.y-=iTime*0.05;\n    p = mod(p,0.08)-0.04;\n    float d = plus(p,vec2(0.005,0.025));\n    return d;\n}\n\nfloat arrowItem0(vec2 p){\n    vec2 prevP = p;\n    p.y-=0.1;\n    float d = Tri(p,vec2(0.5));\n    p-=vec2(0.,-0.25);\n    float d2 = Tri(p,vec2(0.5));\n    d = max(-d2,d);\n    return max(dots(p),d);\n}\n\nfloat arrowItem1(vec2 p, float dir){\n    p.x += sin(iTime*0.6)*1.7*dir;\n    p.y = abs(p.y)-0.11;\n    p.y*=-1.;\n    float d = Tri(p,vec2(0.035));\n    return d;\n}\n\nfloat drawTypoItem(vec2 p){\n    vec2 prevP = p;\n    float d = B(p,vec2(0.14,0.3));\n    float a = radians(60.);\n    p.y = abs(p.y)-0.22;\n    d = abs(max(dot(p,vec2(cos(a),sin(a))),d))-0.05;\n    p = prevP;\n    d = max(-B(p-vec2(-0.2,0.0),vec2(0.15,0.12)),d);\n    return d;\n}\n\nfloat draw2d(vec2 p){\n    vec2 prevP = p;\n    p*=4.;\n    p.x-=0.05;\n    \n    float d = drawTypos(p);\n    p = prevP;\n    p*=4.;\n    p.y = abs(p.y);\n    float d2 = arrowItem0(p-vec2(0.,1.2));\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=4.;\n    d2 = arrowItem1(p-vec2(0.7,0.55),1.);\n    d = min(d,d2);\n    d2 = arrowItem1(p-vec2(-0.7,-0.55),-1.);\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=4.;\n    d2 = drawTypoItem(p-vec2(-2.35,-0.05));\n    d = min(d,d2);\n    p.x*=-1.;\n    d2 = drawTypoItem(p-vec2(-2.35,0.05));\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=Rot(radians(45.));\n    d2 = abs(B(p,vec2(0.3)))-0.01;\n    p = prevP;\n    d2 = max(-(abs(p.y)-0.2),d2);\n    \n    p*=Rot(radians(45.*iTime+45.));\n    d2 = max(-(abs(p.x)-0.05),d2);\n    \n    d = min(d,d2);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    float zoom = getAnimationValue();\n    vec3 ro = vec3(0, 0, -4.-(zoom*4.));\n    ro.yz *= Rot(radians(-15.0));\n    ro.xz *= Rot(radians(15.));\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, MAX_STEPS);\n    vec3 col = vec3(.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    }\n    \n    float d2 = draw2d(uv);\n    col = mix(col,vec3(1.),S(d2,0.0));\n    \n    fragColor = vec4(sqrt(col),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}