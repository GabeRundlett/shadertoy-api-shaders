{
    "Shader": {
        "info": {
            "date": "1710758272",
            "description": "circle, fog, 3D",
            "flags": 0,
            "hasliked": 0,
            "id": "dlBcW3",
            "likes": 4,
            "name": "Ethereal Symphony",
            "published": 3,
            "tags": [
                "3d",
                "circle",
                "fog"
            ],
            "usePreview": 0,
            "username": "KarmaDeezy",
            "viewed": 156
        },
        "renderpass": [
            {
                "code": "precision highp float;\n\nfloat gTime = 0.0;\nconst float REPEAT = 5.0;\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat box(vec3 pos, float scale) {\n    pos *= scale;\n    float base = sdBox(pos, vec3(0.4, 0.4, 0.1)) / 1.5;\n    pos.xy *= 5.0;\n    pos.y -= 3.5;\n    pos.xy *= rot(0.75);\n    float result = -base;\n    return result;\n}\n\nfloat sphere(vec3 pos, float radius) {\n    return length(pos) - radius;\n}\n\nfloat torus(vec3 pos, float majorRadius, float minorRadius) {\n    vec2 q = vec2(length(pos.xz) - majorRadius, pos.y);\n    return length(q) - minorRadius;\n}\n\nfloat distort(float value, float amount) {\n    return value + sin(value * amount) * 0.1;\n}\n\n// Function to combine multiple boxes with distortion\nfloat box_set(vec3 pos, float iTime) {\n    vec3 pos_origin = pos;\n    pos = pos_origin;\n    pos.y += sin(gTime * 0.4) * 2.5;\n    pos.xy *= rot(0.8);\n    float box1 = distort(box(pos, 2.0 - abs(sin(gTime * 0.4)) * 1.5), 2.0);\n    pos = pos_origin;\n    pos.y -= sin(gTime * 0.4) * 2.5;\n    pos.xy *= rot(0.8);\n    float box2 = distort(box(pos, 2.0 - abs(sin(gTime * 0.4)) * 1.5), 2.0);\n    pos = pos_origin;\n    pos.x += sin(gTime * 0.4) * 2.5;\n    pos.xy *= rot(0.8);\n    float box3 = distort(box(pos, 2.0 - abs(sin(gTime * 0.4)) * 1.5), 2.0);\n    pos = pos_origin;\n    pos.x -= sin(gTime * 0.4) * 2.5;\n    pos.xy *= rot(0.8);\n    float box4 = distort(box(pos, 2.0 - abs(sin(gTime * 0.4)) * 1.5), 2.0);\n    pos = pos_origin;\n    pos.xy *= rot(0.8);\n    float box5 = distort(box(pos, 0.5) * 6.0, 4.0);\n    pos = pos_origin;\n    float box6 = distort(box(pos, 0.5) * 6.0, 4.0);\n    float result = max(max(max(max(max(box1, box2), box3), box4), box5), box6);\n    return result; // Return the combined value\n}\n\n// Function to map the scene using different shapes\nfloat map(vec3 pos, float iTime) {\n    vec3 pos_origin = pos;\n    float box_set1 = box_set(pos, iTime);\n    float sphere1 = sphere(pos - vec3(0.0, 2.0, 0.0), 2.0);\n    float torus1 = torus(pos - vec3(0.0, 0.0, 0.0), 1.5, 0.5);\n\n    return max(max(box_set1, sphere1), torus1);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    // Camera position with vertical movement (sine wave) and forward momentum\n    vec3 ro = vec3(2.0 * sin(gTime * 0.1), -0.2 + 0.2 * sin(gTime * 0.2), iTime * 4.0);\n    vec3 ray = normalize(vec3(p, 1.5));\n    ray.xy = ray.xy * rot(sin(iTime * 0.03) * 5.0);\n    ray.yz = ray.yz * rot(sin(iTime * 0.05) * 3.2);\n    \n    float t = 0.1;\n    vec3 col = vec3(0.0);\n    float ac = 0.0;\n    \n    // Loop to trace rays and accumulate color\n    for (int i = 0; i < 99; i++) {\n        vec3 pos = ro + ray * t;\n        pos = mod(pos - 2.0, 4.0) - 2.0;\n        gTime = iTime - float(i) * 0.01;\n        \n        // Calculate the signed distance to the scene and accumulate color\n        float d = map(pos, iTime);\n        d = max(abs(d), 0.01);\n        ac += exp(-d * 23.0);\n        t += d * 0.55;\n    }\n    \n    // Apply colors with some added variation\n    col = vec3(ac * 0.03);\n    col += vec3(1.15 * abs(sin(iTime * 0.1)), 0.15 * abs(cos(iTime * 1.7)), 0.15 * abs(sin(iTime * 0.3)));\n    \n    // Apply fog-like effect to the background\n    col *= smoothstep(0.5, 01.0, t);\n    \n    fragColor = vec4(col, 4.0 - t * (0.42 + 0.42 * sin(iTime)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}