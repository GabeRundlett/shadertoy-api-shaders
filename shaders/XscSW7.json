{
    "Shader": {
        "info": {
            "date": "1459556251",
            "description": "Fractal Experiment 16",
            "flags": 0,
            "hasliked": 0,
            "id": "XscSW7",
            "likes": 8,
            "name": "Fractal Experiment 16",
            "published": 3,
            "tags": [
                "fractal",
                "experiment",
                "16"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 685
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2015 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\n/*\nbased on https://www.shadertoy.com/view/4stXR7\n*/\n\nconst vec3 ld = vec3(0.,1., .5);\nfloat dstepf = 0.0;\nfloat t = 0.;\n\nvec2 path(float z){return sin(z*.3 + vec2(1.6,0));}\n\nfloat fractus(vec3 p)\n{\n\tvec2 z = p.xy;\n    vec2 c = vec2(0.28,-0.56) * sin(p.z-cos(p.z));\n\tfloat k = 1., h = 1.0;    \n    for (float i=0.;i<5.;i++)\n    {\n\t\t//if (i/5. > (sin(iTime*.5)*.5+.5)) break;\n\t\th *= 4.*k;\n\t\tk = dot(z,z);\n        z = vec2(z.x * z.x - z.y * z.y, 1.5 * z.x * z.y) + c;\n    }\n\treturn 1. - sqrt(k/h)*log(h);   \n}\n\nvec2 df(vec3 p)\n{\n    p.xy += path(p.z);\n\tfloat obj = min(1., fractus(p));\n\tvec2 res = vec2(obj, 1.);\n\treturn res;\n}\n\nvec3 nor( vec3 p, float prec )\n{\n    vec2 e = vec2( prec, 0. );\n    vec3 n = vec3(\n\t\tdf(p+e.xyy).x - df(p-e.xyy).x,\n\t\tdf(p+e.yxy).x - df(p-e.yxy).x,\n\t\tdf(p+e.yyx).x - df(p-e.yyx).x );\n    return normalize(n);\n}\n\n// from iq code\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<10; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = df( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n// from velocibox by zackpudil : https://www.shadertoy.com/view/lsdXD8\nvec3 lighting(vec3 p, vec3 lp, vec3 rd, float prec) \n{\n    vec3 l = lp - p;\n    float dist = max(length(l), 0.01);\n    float atten = min(1./(1. + dist*0.5), 0.2);\n    l /= dist;\n    \n    vec3 n = nor(p, prec);\n   \tvec3 r = reflect(-l, n);\n    \n    float dif = clamp(dot(l, n), 0.0, 1.0);\n    float spe = pow(clamp(dot(r, -rd), 0.0, 1.0), 8.0);\n    float fre = pow(clamp(1.0 + dot(n, rd), 0.0, 1.0), 2.0);\n    float dom = smoothstep(-1.0, 1.0, r.y);\n    \n    vec3 lin = vec3(0.08,0.32,0.47);//vec3(0.2);\n    lin += 1.0*dif*vec3(1,1,0.84);//vec3(1, .97, .85);\n    lin += 2.5*spe*dif*vec3(1,1,0.84);//vec3(1, .97, .85);\n    lin += 2.5*fre*vec3(1);\n    lin += 0.5*dom*vec3(1);\n    \n    return lin*atten*calcAO(p, n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 si = iResolution.xy;\n\tvec2 g = fragCoord;\n\tvec2 uv = (2.*g-si)/min(si.x, si.y);\n\t\n\tvec4 f = vec4(0);\n\t\n\tt = iTime*2.;\n    \n\tdstepf = 1.5;\n\t\n    vec3 rayOrg = vec3(vec2(0,0),t);\n    rayOrg.xy -= path(t);\n\n    vec3 camUp = vec3(0,1,0);\n    // thanks to shane\n    vec3 camOrg = vec3(vec2(0,0), t+.1);\n\tcamOrg.xy -= path(t+.1);\n\t\n\tfloat fov = 0.8;\n\tvec3 axisZ = normalize(camOrg - rayOrg);\n\tvec3 axisX = normalize(cross(camUp, axisZ));\n\tvec3 axisY = normalize(cross(axisZ, axisX));\n\tvec3 rayDir = normalize(axisZ + fov * uv.x * axisX + fov * uv.y * axisY);\n\t\n\tvec2 s = vec2(0.01);\n\tfloat d = 0.;\n\tvec3 p = rayOrg + rayDir * d;\n\tfloat dMax = 40.;\n\tfloat sMin = 0.00001;\n\t\n\tfor (float i=0.; i<250.; i++)\n\t{\n\t\tif (s.x<sMin || d>dMax) break;\n\t\ts = df(p);\n\t\td += s.x * 0.3;\n\t\tp = rayOrg + rayDir * d;\t\n        dstepf += 0.005;\n\t}\n\t\n\tfragColor.rgb = vec3(0.89,0.91,1) * lighting(p, rayOrg, rayDir, 0.001) * dstepf; \n\tfragColor.rgb = mix( fragColor.rgb, vec3(0.89,0.91,1), 1.0-exp( -0.007*d*d ) ); \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}