{
    "Shader": {
        "info": {
            "date": "1711071590",
            "description": "Two years old, publishing old code. Goal: a large number of internal reflections with acceptable performance. Learned a lot.",
            "flags": 0,
            "hasliked": 0,
            "id": "MXBXWK",
            "likes": 17,
            "name": "brilliant cut diamond",
            "published": 3,
            "tags": [
                "reflection",
                "refraction",
                "diamond",
                "dispersion",
                "brilliant",
                "roundcut"
            ],
            "usePreview": 0,
            "username": "milkfat",
            "viewed": 418
        },
        "renderpass": [
            {
                "code": "\n#define LIGHT vec3(00,000,8000)\n#define IOR 2.407 //index of refraction: 2.407 violet, 2.42 yellow (standard), 2.451 red\n#define IOR2 (IOR + .0044)\n#define DISPERSION 30.0\n#define D DISPERSION\n#define BRIGHT 10.0\nconst float PI = (355./113.);\nconst vec2 u = vec2(.1,0);\n\nfloat hash(float n) {return fract(n*fract(n*.133929));}\n\nvec2 rotate(vec2 p, float a) {return vec2 (cos(a)*p.x - sin(a)*p.y, sin(a)*p.x + cos(a)*p.y);}\n\nfloat line_sdf(vec3 p, vec3 a, vec3 b)\n{\n    b-=a;\n    p-=a;\n    float angxy = -atan(b.y,b.x);\n    p.xy = rotate(p.xy, angxy);\n    b.xy = rotate(b.xy, angxy);\n    float angxz = -atan(b.z,b.x);\n    p.xz = rotate(p.xz, angxz);\n    return length(p.yz);   \n}\n\nfloat dist (vec2 a, vec2 b)\n{\n    return (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);\n}\n\n//\"pyramid\" distance function (a cone with planar sides)\n//the pyramid tip is (0,0,0), the pyramid shares its axis with the global x-axis\n//p: point being sampled\n//ang3: angle of p around the x-axis (0.0 - 1.0, precalculated)\n\n//s: number of sides\n//t: tilt angle (radians)\n//o: offset of pyramid (offset along x-axis)\n//r: rotation around x-axis (0.0 - 1.0)\n//h: height (offset along surface normal)\nfloat pyramid(vec3 p, float ang3, float s, float t, float o, float r, float h)\n{\n    ang3 = round((ang3+r)*s)/s-r;\n    ang3 = ang3*PI*2.0;\n    p.yz = rotate(p.yz,-ang3);\n    p.x += o;\n    p.xy = rotate(p.xy,t);\n    return p.y-h;\n}\n\nfloat scene(vec3 p)\n{\n    if(length(p)>400.0)return length(p)-350.0;\n\n    float ang3 = atan(p.z,p.y)/(PI*2.0);  //angle of p around x axis  0.0 - 1.0\n    \n    //make our diamond cuts out of six pyramids\n    float t7 = pyramid(p,ang3,16.0,-PI/2.0,355.,0.0,0.0); //culet\n    float t1 = pyramid(p,ang3,16.0,-(PI/2.0-.722),361.4,0.0,0.0); //lower girdle facets\n    float t11 = pyramid(p,ang3,8.0,-(PI/2.0-.705),357.2,1.0/32.0,0.0); //pavilion main facets\n    \n    float t5 = pyramid(p,ang3,16.0,0.0,0.0,-1.0/32.0,290.0); //girdle\n    \n    float adjust_top = -10.0;\n    \n    float t2 = pyramid(p,ang3,16.0,PI/2.0-.71,-146.0+adjust_top,0.0,0.0); //upper girdle facets\n    float t3 = pyramid(p,ang3,8.0,PI/2.0-.602,-100.85+adjust_top,1.0/32.0,0.0); //kite facets\n    float t4 = pyramid(p,ang3,8.0,PI/2.0-.35,-41.85+adjust_top,-1.0/32.0,0.0); //star facets\n    \n    float t6 = pyramid(p,ang3,16.0,PI/2.0,15.0+adjust_top,0.0,0.0); //top\n\n    return max(max(max(max(max(max(max(t1,t11),t2),t3),t4),t5),t6),t7); \n}\n\nfloat calc(inout vec3 p, vec3 ps, inout vec3 norm) \n{\n    float min_d = 100000.0;\n    for(int i = 0; i < 80; i++)\n    {\n        float dist = scene(p);\n        min_d = min(dist, min_d);\n        p+=dist*ps;\n        if(dist<.1)break;\n    }\n    if(min_d>.1)return 1000.0;\n    norm = normalize(vec3(scene(p+u.xyy)-scene(p-u.xyy), scene(p+u.yxy)-scene(p-u.yxy), scene(p+u.yyx)-scene(p-u.yyx)));\n    return min_d;\n}\n\nfloat light(vec3 p, vec3 ps, vec3 l)\n{\n        float ldist = line_sdf(l,p,p+ps);\n        ldist = clamp((1.0-ldist/1000.0),0.0,1.0);\n        return ldist*ldist*ldist*float(dot(ps,normalize(l-p))>0.0)*2.0;\n}\n\nvec3 cam(vec3 p)\n{\n    float s = sin(iTime*.1);\n    s=mod(iTime*.1,2.0);\n    s-=1.0;\n    s = (1.0-pow(1.0-abs(s),6.0))*sign(s);\n    s*=PI;\n    s+=PI;\n    p.xz = rotate(p.xz,-PI*.5+sin(iTime*.5)*PI*.25-s);\n    p.xy = rotate(p.xy,-PI*.25+cos(iTime*.5)*PI*.15);\n    return p;\n}\nvec3 icam(vec3 p)\n{\n    float s = sin(iTime*.1);\n    s=mod(iTime*.1,2.0);\n    s-=1.0;\n    s = (1.0-pow(1.0-abs(s),6.0))*sign(s);\n    s*=PI;\n    s+=PI;\n    p.xy = rotate(p.xy,PI*.25-cos(iTime*.5)*PI*.15);\n    p.xz = rotate(p.xz,PI*.5-sin(iTime*.5)*PI*.25-iTime*.05+s);\n    return p;\n}\nvoid mainImage( out vec4 F, in vec2 C )\n{\n    F = vec4(0);\n        \n    //lighting\n    vec3 l=cam(LIGHT);\n  \n    \n    //start marching\n    vec3 p = cam(vec3(0,0,1200));\n    vec3 ps = cam(normalize((vec3((C-iResolution.xy*.5)/iResolution.y,-1.2))));\n    \n    vec3 norm;\n    float min_d = calc(p,ps,norm);\n    \n    if(min_d==1000.0||min_d > .1)\n    {\n        F=texture(iChannel0,icam(ps));\n        return;\n    } \n\n    //refract into diamond\n    vec3 p3 = p;\n    vec3 ps3 = normalize(refract(ps,norm,1.03/IOR));\n    p3+=ps3*2500.0;\n    ps3=-ps3;\n    vec3 norm3;\n    float min_d3 = calc(p3,ps3,norm3);\n    \n    vec3 p4 = p;\n    vec3 ps4 = normalize(refract(ps,norm,1.03/IOR2));\n    p4+=ps4*2500.0;\n    ps4=-ps4;\n    vec3 norm4;\n    float min_d4 = calc(p4,ps4,norm4);\n    float remaining_light = .8;\n    \n    //bounce around inside diamond\n    for (int i = 0; i < 10; i++)\n    {\n        vec3 ps_old = ps3;\n        ps3 = refract(-ps_old,-norm3,IOR/1.03);\n        float r0 = (1.03-IOR)/(1.03+IOR);\n        r0*=r0;\n        \n        vec3 pss_old = ps4;\n        ps4 = refract(-pss_old,-norm3,IOR2/1.03);\n        float r00 = (1.03-IOR2)/(1.03+IOR2);\n        r00*=r00;\n        \n        if((ps3!=vec3(0))) //check for total internal reflection\n        {\n            float refract_amount = 1.0-(r0+(1.0-r0)*pow((1.0-dot(-ps_old,norm3)),5.0)); //Fresnel transmittance using Schlick's approximation\n                                                                                        //taken directly from here: https://en.wikipedia.org/wiki/Schlick%27s_approximation\n            float rrr = texture(iChannel0,icam(normalize(ps3+(ps4-ps3)*D)),4.).b;       //taken directly from here: https://en.wikipedia.org/wiki/Schlick%27s_approximation\n            float ggg = texture(iChannel0,icam(normalize(ps3+(ps4-ps3)*D*.5)),4.).b;    //taken directly from here: https://en.wikipedia.org/wiki/Schlick%27s_approximation\n            float bbb = texture(iChannel0,icam(normalize(ps3)),4.).b;  \n            F.r+=pow(rrr,2.2)*refract_amount*remaining_light;\n            F.g+=pow(ggg,2.2)*refract_amount*remaining_light;\n            F.b+=pow(bbb,2.2)*refract_amount*remaining_light;\n            F.r+=BRIGHT*light(p3,normalize(ps3+(ps4-ps3)*D),l)*refract_amount*remaining_light;\n            F.g+=BRIGHT*light(p3,normalize(ps3+(ps4-ps3)*D*.5),l)*refract_amount*remaining_light;\n            F.b+=BRIGHT*light(p3,normalize(ps3),l)*refract_amount*remaining_light;\n            remaining_light-=refract_amount*remaining_light;\n            if(remaining_light<0.1)break;       \n        }\n        \n        ps3=normalize(reflect(-ps_old,-norm3));\n        p3+=ps3*2500.0;\n        ps3=-ps3;\n        \n        ps4=normalize(reflect(-pss_old,-norm3));\n        p4+=ps4*2500.0;\n        ps4=-ps4;\n           \n        min_d3 = calc(p3,ps3,norm3);\n        if(min_d3>.1)break;\n           \n        min_d4 = calc(p4,ps4,norm4);\n\n    }\n    F.r+=pow(texture(iChannel0,icam(normalize(ps3+(ps4-ps3)*D)),4.).r,2.2)*remaining_light;\n    F.g+=pow(texture(iChannel0,icam(normalize(ps3+(ps4-ps3)*D*.5)),4.).g,2.2)*remaining_light;\n    F.b+=pow(texture(iChannel0,icam(normalize(ps3)),4.).b,2.2)*remaining_light;\n    F.r+=BRIGHT*light(p3,normalize(ps3+(ps4-ps3)*D),l)*remaining_light;\n    F.g+=BRIGHT*light(p3,normalize(ps3+(ps4-ps3)*D*.5),l)*remaining_light;\n    F.b+=BRIGHT*light(p3,normalize(ps3),l)*remaining_light;\n\n    \n    //reflection\n    vec3 p2 = p;\n    vec3 ps2 = normalize(reflect(ps,norm));\n    F*=.7; //~70% transmittance\n    //reflected texture\n    if(min_d <=.1) F+=pow(texture(iChannel0,icam(ps2)),vec4(2.2))*.2; //~30% reflectance\n \n    //reflected specular\n    float ldist = line_sdf(l,p2,p2+ps2);\n    ldist = clamp((1.0-ldist/500.0),0.0,1.0);\n    F += BRIGHT*.1*ldist*ldist*ldist*ldist*float(dot(ps2,l-p2)>0.0);\n    \n    //srgb\n    F=pow(F,vec4(1./2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}