{
    "Shader": {
        "info": {
            "date": "1591898565",
            "description": "Creates an abstract grid of brightly colored irregular rectangles.  What else would it do?\n\nBased on a modification of an earlier shader : https://www.shadertoy.com/view/4lffWs",
            "flags": 32,
            "hasliked": 0,
            "id": "3tfyD8",
            "likes": 10,
            "name": "modern art",
            "published": 3,
            "tags": [
                "abstract",
                "feedback",
                "creative"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 447
        },
        "renderpass": [
            {
                "code": "// most fun stuff to modify is in \"Buffer B\"\n// click that tab and start hacking.\n\n#define INTENSIFY_COLOR 0\n#define DISTORT_INTENSE_COLORS 0\n\nvec3 color_blowout(in vec3 col)\n{\n    mat3 blowout = mat3(4.72376,  -8.85515,   3.84846,\n                        -8.85515,  18.4378,   -8.71892,\n                        3.84846,  -8.71892,   4.48226);\n    vec3 cent = vec3(0.47968451, \n                     0.450743, \n                     0.45227517);\n\n    \n    vec3 dir = col - cent; // blowout * (col - cent);\n    \n#if DISTORT_INTENSE_COLORS\n    dir = blowout * dir;\n#endif\n    \n    vec3 maxes = (step(vec3(0.0), dir) - col)/dir;\n    \n    float amount = min(maxes.x, min(maxes.y, maxes.z));\n    \n    col = col + dir * amount;\n    \n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).rgb;\n    \n#if INTENSIFY_COLOR\n    col = color_blowout(col);\n#endif\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MORE_VISUAL_INTEREST_IN_CENTER 1 // set to 0 to make better images for tiling\n// set to 1 for visually interesting variation in density\n\nvec2 to_uv(in vec2 in_pixels) {\n    return in_pixels / iResolution.xy;\n\t// return 0.1 + mod(vec2(0.8) + in_pixels / iResolution.xy, vec2(0.9));\n}\n\nvec2 fetch_dir(in vec2 in_pixels) {\n    vec2 dir = texture(iChannel0, to_uv(in_pixels)).rg;\n    dir = step(vec2(0.5), dir) * vec2(step(dir.y, dir.x), step(dir.x, dir.y));\n    return dir;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 p )\n{\n    float refresh_period = 15.0 * iResolution.y / 300.0;\n    float t = iTime - mod(iTime, refresh_period);\n    mat2 rotator = mat2(cos(t), sin(t),\n                          -sin(t), cos(t));\n    vec2 center = abs(p.xy - vec2(0.5) * iResolution.yx);\n    vec2 thresh = vec2(0.9875);\n#if MORE_VISUAL_INTEREST_IN_CENTER\n    vec2 distorted = 1.5 * iResolution.yx - 0.5 * iResolution.xy;\n    thresh = thresh - vec2(0.03, 0.005) * smoothstep(0.4 * distorted.y, 0.0, center.y) * smoothstep(0.4 * distorted.x, 0.0, center.x);\n#else\n    // thresh = thresh - 0.0075;\n#endif\n    vec2 dir = step(thresh, texture(iChannel1, to_uv(rotator * p)).rg);\n    dir = vec2(step(dir.y, dir.x), step(dir.x, dir.y)) * dir;\n \n    if (mod(iTime, refresh_period) < 0.1) {\n      fragColor = vec4(dir, 0.0, 1.0);\n        return;\n    }\n   \n    if (dot(dir, dir) < 0.5) {\n\t    dir = step(vec2(0.9), texture(iChannel0, to_uv(p)).rg);\n    }\n     \n    if (dot(dir, dir) < 0.01) {\n    \tvec2 dir1 = vec2(1.0, 0.0);\n    \tvec2 dir2 = dir1.yx;\n        \n        \n    \tfloat val1 = max(abs(dot(dir1, fetch_dir(p + dir1))),\n                     \tabs(dot(dir1, fetch_dir(p - dir1))));\n        \n            \n    \tfloat val2 = max(abs(dot(dir2, fetch_dir(p + dir2))),\n        \t             abs(dot(dir2, fetch_dir(p - dir2))));\n        \n    \t\n        if (val1 > val2) {\n            val2 = 0.0;\n        } else {\n            val1 = 0.0;\n        }\n        \n        val1 = step(0.9, val1);\n        val2 = step(0.9, val2);\n        \n    \n    \tdir = mix(dir, dir1, val1);\n    \tdir = mix(dir, dir2, val2);\n    }\n    \n    dir = step(vec2(0.9), dir) * vec2(step(dir.y, dir.x), step(dir.x, dir.y));\n \n    fragColor = vec4(dir,0.0,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define CHAOS_FILL 1 // set to 1 for more interesting fill patterns.  Looks very nice with color_to_val_3\n\n// in the function \"greatest\" there are two calls to \"color_to_val_4\"\n// change those to \"color_to_val_1\", \"color_to_val_2\" etc to get different effects\n\nvec2 to_uv(in vec2 in_pixels) {\n    return in_pixels / iResolution.xy;\n\t// return 0.1 + mod(vec2(0.8) + in_pixels / iResolution.xy, vec2(0.9));\n}\n\nvec2 fetch_dir(in vec2 in_pixels) {\n    vec2 dir = texture(iChannel0, to_uv(in_pixels)).rg;\n    dir = step(vec2(0.5), dir) * vec2(step(dir.y, dir.x), step(dir.x, dir.y));\n    return dir;\n}\n\n// favors slightly more garish primary colors than color_to_val_2\nfloat color_to_val_1(in vec3 color) {\n    vec3 radial = color - vec3(1.0) * dot(color, vec3(1.0))/3.0;\n    return length(radial);\n}\n\n// favors solid primary colors\nfloat color_to_val_2(in vec3 color) {\n    return  max(abs(color.r - color.g), max(abs(color.g - color.b), abs(color.b - color.r)));\n}\n\n// produces a pastel palette\nfloat color_to_val_3(in vec3 color) {\n    return length(color);\n}\n\n// produces a pleasing, miami, cyan-magenta-yellow thing\nfloat color_to_val_4(in vec3 color) {\n    return color_to_val_1(color) + color_to_val_3(color);\n}\n\nfloat color_to_val_cmy(in vec3 color) {\n    vec3 pair_mins = min(color.rgb, color.gbr);\n    float second = max(pair_mins.r, max(pair_mins.g, pair_mins.b));\n    float last = min(pair_mins.r, min(pair_mins.g, pair_mins.b));\n    return second - last;\n}\n\nfloat color_to_val_5(in vec3 color) {\n    return color_to_val_cmy(color) + 2.0 * color_to_val_2(color);\n}\n\nvec3 greatest(in vec3 color1, in vec3 color2) {\n    float val1 = color_to_val_3(color1);\n    float val2 = color_to_val_3(color2);\n#if CHAOS_FILL\n    return mix(color1, color2, smoothstep(val1 - 0.05, val1 + 0.05, val2));\n#else\n    return mix(color1, color2, step(val1, val2));\n#endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 p )\n{\n    vec2 dir = step(vec2(0.98), texture(iChannel0, to_uv(p)).rg);\n\n    if (dot(dir, dir) > 0.81) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    float refresh_period = 15.0 * iResolution.y / 300.0;\n    \n    float t = iTime - mod(iTime, refresh_period);\n    mat2 rotator = mat2(cos(t), -sin(t),\n                          sin(t), cos(t));\n    vec3 color = texture(iChannel2, to_uv(rotator * p)).rgb;\n    \n    \n    if (mod(iTime, refresh_period) + 0.05 < 0.3 * refresh_period) { // about 3 frames at 60 fps\n\t    fragColor = vec4(1.0);\n        return;\n    }\n\n    if (mod(iTime, refresh_period) < 0.3 * refresh_period) {\n\t    fragColor = vec4(color, 1.0);\n        return;\n    }\n   \n    \n    \n    \n    color = greatest(color, texture(iChannel1, to_uv(p + vec2(1.1, 0.0))).rgb);\n    color = greatest(color, texture(iChannel1, to_uv(p - vec2(1.1, 0.0))).rgb);\n    color = greatest(color, texture(iChannel1, to_uv(p + vec2(0.0, 1.1))).rgb);\n    color = greatest(color, texture(iChannel1, to_uv(p - vec2(0.0, 1.1))).rgb);\n    color = greatest(color, texture(iChannel1, to_uv(p + vec2(1.1, 1.1))).rgb);\n    color = greatest(color, texture(iChannel1, to_uv(p - vec2(1.1, 1.1))).rgb);\n    color = greatest(color, texture(iChannel1, to_uv(p + vec2(1.1, -1.1))).rgb);\n    color = greatest(color, texture(iChannel1, to_uv(p - vec2(1.1, -1.1))).rgb);\n \n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}