{
    "Shader": {
        "info": {
            "date": "1503481625",
            "description": "Day, date and time (mouse enabled)",
            "flags": 0,
            "hasliked": 0,
            "id": "MlscR8",
            "likes": 5,
            "name": "Font Clock",
            "published": 3,
            "tags": [
                "reflection",
                "texture",
                "clock",
                "font",
                "calendar"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 609
        },
        "renderpass": [
            {
                "code": "// \"Font Clock\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txFnt iChannel0\n\nvoid DTimeSet (vec4 d);\nint GetTxChar (vec2 p);\nfloat Fbm2 (vec2 p);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\n\nvec4 dateCur;\nvec3 ltDir, qnBlk[2];\nvec2 qnTex;\nfloat dstFar, tCur, txDep, grDep;\nivec3 inm[2];\nivec2 idt[6];\nconst float pi = 3.14159;\n\nfloat FontTexDf (vec3 p)\n{\n  vec3 tx;\n  float d;\n  int ic;\n  ic = GetTxChar (p.xy);\n  if (ic != 0) {\n    tx = texture (txFnt, mod ((vec2 (mod (float (ic), 16.),\n       15. - floor (float (ic) / 16.)) + fract (p.xy)) * (1. / 16.), 1.)).gba - 0.5;\n    qnTex = vec2 (tx.r, - tx.g);\n    d = tx.b + 1. / 256.;\n  } else d = 1.;\n  return d;\n}\n\nfloat ObjRayT (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 srd, dda, h;\n  float dHit, dLim, d;\n  srd = 1. - 2. * step (0., rd.xy);\n  dda = 1. / (abs (rd.xy) + 0.0001);\n  dHit = max ((abs (ro.z) - txDep - 0.02) / (abs (rd.z) + 0.001), 0.);\n  dLim = min (dHit + (2. * txDep + 0.02) / (abs (rd.z) + 0.001), dstFar);\n  for (int j = 0; j < 160; j ++) {\n    p = ro + dHit * rd;\n    h = fract (dda * fract (srd * p.xy));\n    d = max (FontTexDf (p), abs (p.z) - txDep);\n    dHit += min (d, 0.01 + min (h.x, h.y));\n    if (d < 0.0001 || dHit > dLim) break;\n  }\n  if (d >= 0.0001) dHit = dstFar;\n  return dHit;\n}\n\nfloat BlkHit (vec3 ro, vec3 rd, vec3 bSize)\n{\n  vec3 v, tm, tp;\n  float dMin, dn, df;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  dMin = dstFar;\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    qnBlk[0] = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n    qnBlk[1] = - sign (rd) * step (tp, tp.zxy) * step (tp, tp.yzx);\n  }\n  return dMin;\n}\n\nfloat ChqPat (vec2 p)\n{\n  vec2 ip;\n  ip = floor (p);\n  if (2. * floor (ip.y / 2.) != ip.y) p.x += 0.5;\n  p = smoothstep (0., 0.1, abs (fract (p + 0.5) - 0.5));\n  return 0.7 + 0.3 * p.x * p.y;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  if (rd.y >= 0.) {\n    rd.y += 0.0001;\n    ro.z += 2. * tCur;\n    col = mix (vec3 (0.1, 0.2, 0.4), vec3 (1.),\n       clamp (0.1 + 0.8 * Fbm2 (0.05 * (ro.xz + rd.xz * (100. - ro.y) / rd.y)) * rd.y, 0., 1.));\n  } else {\n    col = mix ((1. + ChqPat (2. * (ro.xz - rd.xz * ((grDep + ro.y) / rd.y)))) *\n     vec3 (0.15, 0.2, 0.1), vec3 (0.18, 0.28, 0.48), pow (1. + rd.y, 5.));\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, roo;\n  float dstTxt, dstBlk;\n  roo = ro;\n  dstBlk = BlkHit (ro + vec3 (-1., 0., 0.), rd, vec3 (6.2, 1.2, txDep + 0.05));\n  dstTxt = (dstBlk < dstFar) ? ObjRayT (ro, rd) : dstFar;\n  if (dstTxt < dstFar) {\n    ro += rd * dstTxt;\n    if (abs (ro.z) < txDep - 0.001) {\n      vn = normalize (vec3 (qnTex, 0.00001));\n      col = vec3 (0.8, 0.8, 0.9) * (0.2 + 0.8 * max (dot (ltDir, vn), 0.)) +\n         0.5 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 128.);\n      col = mix (col, BgCol (ro, reflect (rd, vn)), 1. - 0.8 * abs (dot (rd, vn)));\n    } else {\n      vn = vec3 (0., 0., sign (ro.z));\n      col = vec3 (0.9, 0.3, 0.3) * (0.2 + 0.8 * max (dot (ltDir, vn), 0.)) +\n         0.5 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 128.);\n    }\n  } else {\n    col = BgCol (ro, rd);\n    if (rd.y < 0.) {\n      col *= 0.8 + 0.2 * smoothstep (0., 10.,\n         ObjRayT (roo - ((grDep + ro.y) / rd.y) * rd, ltDir));\n      col *= 0.9 + 0.1 * smoothstep (0., 10.,\n         BlkHit (roo - ((grDep + ro.y) / rd.y) * rd + vec3 (-1., 0., 0.), \n         ltDir, vec3 (6.2, 1.2, txDep + 0.05)));\n    }\n  }\n  if (dstBlk < dstFar) {\n    if (dstTxt >= dstFar) col *= vec3 (1., 0.9, 0.8) * (0.7 + 0.3 * dot (rd, - qnBlk[1]));\n    col = mix (col, BgCol (roo + dstBlk * rd, reflect (rd, qnBlk[0])),\n       pow (1. - abs (dot (rd, qnBlk[0])), 3.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, t;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  t = mod (0.05 * tCur, 2.);\n  az = 2. * pi * SmoothBump (0.25, 0.75, 0.2, mod (t, 1.)) *\n     (1. - 2. * step (1., t));\n  el = -0.05 * pi;\n  if (mPtr.z > 0.) {\n    az += 3. * pi * mPtr.x;\n    el += 1.5 * pi * mPtr.y;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 3.5));\n  ro = vuMat * vec3 (0.01, 0., -15.);\n  ltDir = normalize (vec3 (0.5, 1., -1.));\n  ltDir = vuMat * ltDir;\n  ro.x += 1.;\n  dstFar = 30.;\n  txDep = 0.25;\n  grDep = 3.;\n  DTimeSet (dateCur);\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (clamp (col, 0., 1.), 1.);\n}\n\n#define C(c) c\n\n#define _SP    C(0x20)\n#define _EXCL  C(0x21)\n#define _QUOT  C(0x22)\n#define _NUM   C(0x23)\n#define _DOLLR C(0x24)\n#define _PCENT C(0x25)\n#define _AMP   C(0x26)\n#define _SQUOT C(0x27)\n#define _LPAR  C(0x28)\n#define _RPAR  C(0x29)\n#define _AST   C(0x2A)\n#define _PLUS  C(0x2B)\n#define _COMMA C(0x2C)\n#define _MINUS C(0x2D)\n#define _PER   C(0x2E)\n#define _SLASH C(0x2F)\n#define _0     C(0x30)\n#define _1     C(0x31)\n#define _2     C(0x32)\n#define _3     C(0x33)\n#define _4     C(0x34)\n#define _5     C(0x35)\n#define _6     C(0x36)\n#define _7     C(0x37)\n#define _8     C(0x38)\n#define _9     C(0x39)\n#define _COLON C(0x3A)\n#define _SEMI  C(0x3B)\n#define _LT    C(0x3C)\n#define _EQUAL C(0x3D)\n#define _GT    C(0x3E)\n#define _QUEST C(0x3F)\n#define _AT    C(0x40)\n#define _A     C(0x41)\n#define _B     C(0x42)\n#define _C     C(0x43)\n#define _D     C(0x44)\n#define _E     C(0x45)\n#define _F     C(0x46)\n#define _G     C(0x47)\n#define _H     C(0x48)\n#define _I     C(0x49)\n#define _J     C(0x4A)\n#define _K     C(0x4B)\n#define _L     C(0x4C)\n#define _M     C(0x4D)\n#define _N     C(0x4E)\n#define _O     C(0x4F)\n#define _P     C(0x50)\n#define _Q     C(0x51)\n#define _R     C(0x52)\n#define _S     C(0x53)\n#define _T     C(0x54)\n#define _U     C(0x55)\n#define _V     C(0x56)\n#define _W     C(0x57)\n#define _X     C(0x58)\n#define _Y     C(0x59)\n#define _Z     C(0x5A)\n#define _LSQB  C(0x5B)\n#define _BSLSH C(0x5C)\n#define _RSQB  C(0x5D)\n#define _CARET C(0x5E)\n#define _USCOR C(0x5F)\n#define _GRAVE C(0x60)\n#define _a     C(0x61)\n#define _b     C(0x62)\n#define _c     C(0x63)\n#define _d     C(0x64)\n#define _e     C(0x65)\n#define _f     C(0x66)\n#define _g     C(0x67)\n#define _h     C(0x68)\n#define _i     C(0x69)\n#define _j     C(0x6A)\n#define _k     C(0x6B)\n#define _l     C(0x6C)\n#define _m     C(0x6D)\n#define _n     C(0x6E)\n#define _o     C(0x6F)\n#define _p     C(0x70)\n#define _q     C(0x71)\n#define _r     C(0x72)\n#define _s     C(0x73)\n#define _t     C(0x74)\n#define _u     C(0x75)\n#define _v     C(0x76)\n#define _w     C(0x77)\n#define _x     C(0x78)\n#define _y     C(0x79)\n#define _z     C(0x7A)\n#define _LBRC  C(0x7B)\n#define _VBAR  C(0x7C)\n#define _RBRC  C(0x7D)\n#define _TILDE C(0x7E)\n\nivec3 MName (int i)\n{\n  ivec3 m;\n  if      (i == 0)  m = ivec3 (_J, _a, _n);\n  else if (i == 1)  m = ivec3 (_F, _e, _b);\n  else if (i == 2)  m = ivec3 (_M, _a, _r);\n  else if (i == 3)  m = ivec3 (_A, _p, _r);\n  else if (i == 4)  m = ivec3 (_M, _a, _y);\n  else if (i == 5)  m = ivec3 (_J, _u, _n);\n  else if (i == 6)  m = ivec3 (_J, _u, _l);\n  else if (i == 7)  m = ivec3 (_A, _u, _g);\n  else if (i == 8)  m = ivec3 (_S, _e, _p);\n  else if (i == 9)  m = ivec3 (_O, _c, _t);\n  else if (i == 10) m = ivec3 (_N, _o, _v);\n  else if (i == 11) m = ivec3 (_D, _e, _c);\n  return m;\n}\n\nivec3 DName (int i)\n{\n  ivec3 d;\n  if      (i == 0)  d = ivec3 (_S, _u, _n);\n  else if (i == 1)  d = ivec3 (_M, _o, _n);\n  else if (i == 2)  d = ivec3 (_T, _u, _e);\n  else if (i == 3)  d = ivec3 (_W, _e, _d);\n  else if (i == 4)  d = ivec3 (_T, _h, _u);\n  else if (i == 5)  d = ivec3 (_F, _r, _i);\n  else if (i == 6)  d = ivec3 (_S, _a, _t);\n  return d;\n}\n\nint DWk (vec3 ymd) // \"Zeller's congruence\"\n{\n  ivec3 d;\n  vec2 cy;\n  ymd.y += 1.;\n  if (ymd.y <= 2.) {\n    ymd.x -= 1.;\n    ymd.y += 12.;\n  }\n  cy = vec2 (floor (ymd.x / 100.), mod (ymd.x, 100.));\n  return int (mod (mod (ymd.z + floor (13. * (ymd.y + 1.) / 5.) + cy.y + floor (cy.y / 4.) +\n     floor (cy.x / 4.) + 5. * cy.x, 7.) + 6., 7.));\n}\n\n#define DIG2(v) _0 + ivec2 (vec2 (floor ((v) / 10.), mod ((v), 10.)))\n#define T(c) _ic = (_nc -- == 0) ? (c) : _ic;\n#define T2(v) T(v.x) T(v.y)\n#define T3(v) T(v.x) T(v.y) T(v.z)\n\nvoid DTimeSet (vec4 d)\n{\n  idt[0] = DIG2 (floor (d.x / 100.));\n  idt[1] = DIG2 (mod (d.x, 100.));\n  idt[2] = DIG2 (d.z);\n  idt[3] = DIG2 (floor (d.w / 3600.));\n  idt[4] = DIG2 (floor (mod (d.w, 3600.) / 60.));\n  idt[5] = DIG2 (floor (mod (d.w, 60.)));\n  inm[0] = MName (int (d.y));\n  inm[1] = DName (DWk (d.xyz));\n}\n\nint GetTxChar (vec2 p)\n{\n  ivec2 ip;\n  int _ic, _nc;\n  ip = ivec2 (floor (p));\n  ip.x += 5;\n  ip.y = - ip.y;\n  _nc = ip.x;\n  _ic = 0;\n  if (ip.y == 0) {\n    if (ip.x >= 0 && ip.x < 12) {\n      T3(inm[1]) T(_SP) T2(idt[3]) T(_COLON) T2(idt[4]) T(_COLON) T2 (idt[5])\n    }\n  } else if (ip.y == 1) {\n    if (ip.x >= 0 && ip.x < 11) {\n      T2(idt[2]) T(_MINUS) T3(inm[0]) T(_MINUS) T2(idt[0]) T2(idt[1])\n    }\n  }\n  return _ic;\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}