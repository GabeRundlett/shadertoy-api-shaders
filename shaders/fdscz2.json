{
    "Shader": {
        "info": {
            "date": "1642395110",
            "description": "Calibrate by positioning your eyes in the two circles. They'll disappear when the tracker has locked on. If it locks onto something else, try restarting the shader. Then try tilting and moving your head (SLOWLY, and try not to blink).",
            "flags": 34,
            "hasliked": 0,
            "id": "fdscz2",
            "likes": 6,
            "name": "Image Tracking II - Eyes/Head",
            "published": 3,
            "tags": [
                "eyes",
                "cv",
                "image",
                "tracking",
                "useless"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 752
        },
        "renderpass": [
            {
                "code": "// If anyone knows how to do this sort of tracking better, please let me know!\n\n// https://www.shadertoy.com/view/WtdBRS\nfloat sdMoon(in vec2 p, in float d, in float ra, in float rb) {\n    p.y = abs(p.y);\n\n    float a = (ra * ra - rb * rb + d * d) / (2.0 * d);\n    float b = sqrt(max(ra * ra - a * a, 0.0));\n    if (d * (p.x * b - p.y * a) > d * d * max(b - p.y, 0.0)) {\n        return length(p - vec2(a, b));\n    }\n\n    return max(length(p) - ra, rb - length(p - vec2(d, 0.0)));\n}\n\nvec3 heatPalette(in float h) {\n    return vec3(1.0, pow(0.95, h), pow(0.1, h)) * pow(0.98, h);\n}\n\n#define drawSDF(dist, color) fragColor.rgb = mix(fragColor.rgb, color, smoothstep(unit, 0.0, dist))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    float unit = 2.0 / iResolution.y;\n\n    fragColor = texture(iChannel0, uv);\n    //fragColor.rgb = heatPalette(length(fragColor.rgb) * 100.0);\n\n    vec3 eye1 = texelFetch(iChannel1, ivec2(0, 0), 0).xyz;\n    vec3 eye2 = texelFetch(iChannel1, ivec2(1, 0), 0).xyz;\n\n    float aspect = iResolution.x / iResolution.y;\n\n    uv -= 0.5;\n    uv.x *= aspect;\n\n    if (eye1.z > 0.5 && eye2.z > 0.5) {\n        eye1.xy -= 0.5;\n        eye1.x *= aspect;\n\n        eye2.xy -= 0.5;\n        eye2.x *= aspect;\n\n        if (length(uv - eye1.xy) < 0.01) fragColor++;\n        if (length(uv - eye2.xy) < 0.01) fragColor++;\n\n        vec2 pos = (eye1.xy + eye2.xy) / 2.0;\n        vec2 right = normalize(eye2.xy - eye1.xy);\n        mat2 basis = mat2(right, -right.y, right.x);\n        uv = (uv - pos) * basis;\n\n        uv.y -= 0.25;\n        uv.x = 0.1 - abs(uv.x);\n        float tilt = 0.2;\n        float co = cos(tilt), si = sin(tilt);\n        uv *= mat2(co, si, -si, co);\n        drawSDF(max(sdMoon(uv, 0.2, 0.2, 0.3), -0.1 - uv.y), vec3(1.0, 0.0, 0.0));\n    }\n\n    else {\n        vec2 pEyeLock1 = eyeLock1 - 0.5;\n        pEyeLock1.x *= aspect;\n        drawSDF(abs(length(uv - pEyeLock1) - minLock), vec3(1.0));\n\n        vec2 pEyeLock2 = eyeLock2 - 0.5;\n        pEyeLock2.x *= aspect;\n        drawSDF(abs(length(uv - pEyeLock2) - minLock), vec3(1.0));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {   \n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define WIN_W 40.0\n#define WIN_H 40.0\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0);\n    float total = 0.0;\n    for (float x=-WIN_W; x < WIN_W; x++) {\n        float weight = 0.1 * exp(-smoothing * x * x);\n        fragColor += vec4(texture(iChannel0, (fragCoord + vec2(x, 0.0)) / iResolution.xy).rgb * weight, weight);\n    }\n\n    fragColor.rgb /= fragColor.w;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define WIN_W 40.0\n#define WIN_H 40.0\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0);\n    float total = 0.0;\n    for (float y=-WIN_H; y < WIN_H; y++) {\n        float weight = 0.1 * exp(-smoothing * y * y);\n        fragColor += vec4(texture(iChannel0, (fragCoord + vec2(0.0, y)) / iResolution.xy).rgb * weight, weight);\n    }\n\n    fragColor.rgb /= fragColor.w;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define video(x, y) texture(iChannel0, vec2(x, y)).r\nvec2 newtonOptimize(in vec2 p0) {\n    vec2 p = p0;\n    vec2 h = 1.0 / iResolution.xy;\n    for (int i=0; i < 10; i++) {\n        float up = video(p.x, p.y + h.y);\n        float right = video(p.x + h.x, p.y);\n        vec2 grad = vec2(right, up) - video(p.x, p.y);\n\n        float dxx = (video(p.x + 2.0 * h.x, p.y) - right - grad.x) / (h.x * h.x);\n        float dxy = (video(p.x + h.x, p.y + h.y) - right - grad.y) / (h.x * h.y);\n        float dyy = (video(p.x, p.y + 2.0 * h.y) - up    - grad.y) / (h.y * h.y);\n\n        grad /= h;\n        mat2 hessian = mat2(dxx, dxy, dxy, dyy);\n\n        p -= inverse(hessian) * grad;\n    }\n\n    return p;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0);\n    ivec2 iFragCoord = ivec2(fragCoord);\n    if (iFragCoord == ivec2(0, 0)) {\n        fragColor = texelFetch(iChannel1, ivec2(0, 0), 0);\n        if (fragColor.z < 0.5) {\n            fragColor.xy = newtonOptimize(eyeLock1);\n            if (length(fragColor.xy - eyeLock1) < minLock) {\n                fragColor.z = 1.0;\n            }\n        }\n\n        else {\n            fragColor.xy = newtonOptimize(fragColor.xy);\n        }\n    }\n\n    if (iFragCoord == ivec2(1, 0)) {\n        fragColor = texelFetch(iChannel1, ivec2(1, 0), 0);\n        if (fragColor.z < 0.5) {\n            fragColor.xy = newtonOptimize(eyeLock2);\n            if (length(fragColor.xy - eyeLock2) < minLock) {\n                fragColor.z = 1.0;\n            }\n        }\n\n        else {\n            fragColor.xy = newtonOptimize(fragColor.xy);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define eyeLock1 vec2(0.42, 0.5)\n#define eyeLock2 vec2(0.58, 0.5)\n#define minLock 0.05\n#define smoothing 0.005",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}