{
    "Shader": {
        "info": {
            "date": "1535167647",
            "description": "Learning how to call backbuffers.\nMouse moves the flower.",
            "flags": 32,
            "hasliked": 0,
            "id": "XdyfWK",
            "likes": 14,
            "name": "ShaderPainter",
            "published": 3,
            "tags": [
                "2d",
                "wave",
                "simulation",
                "paint"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 1146
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture( iChannel0, uv ).rgb;\n\n    fragColor = vec4( col, 1 );\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat2 rot( float a )\n{\n\n\treturn mat2( cos( a ), -sin( a ),\n               \t sin( a ),  cos( a )\n               );\n\n}\n\n// This function returns the center of the uv coordinates and relates it to the mouse position \nfloat dis( vec2 uv, vec2 mou )\n{\n\n\treturn 0.03 * cos( atan( uv.x - mou.x, uv.y - mou.y ) * 10.0 );\n\n}\n\nfloat hash( float a )\n{\n\n\treturn fract( sin( a * 46354.93 ) * 37394.45 );\n\n}\n\nfloat cir( vec2 uv, vec2 mou )\n{\n\n    float a = length( uv - mou );\n\n    uv *= rot( iTime );\n    mou *= rot( iTime );\n    \n    float dist = dis( uv, mou );\n    \n    float r = hash( iTime ) * 0.1 + dist;\n    \n    a = smoothstep( r, r - 0.0001, a );\n    \n    return a;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 p = fragCoord / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 col = vec3( 0 );\n    vec2 mou = iMouse.xy / iResolution.y;\n    \n    float c = cir( p, mou );\n    \n    // Thanks PatricioGonzalezVivo\n    vec3 diff = vec3( vec2(1.0) / iResolution.xy, 0.0);\n    \n    vec4 center = textureLod(iChannel0, uv, 0.0);\n    float top = textureLod(iChannel0, uv - diff.zy, 0.0).r;\n    float left = textureLod(iChannel0, uv - diff.xz, 0.0).r;\n    float right = textureLod(iChannel0, uv + diff.xz, 0.0).r;\n    float bottom = textureLod(iChannel0, uv + diff.zy, 0.0).r;\n\n    vec3 red = vec3( -(center.a - 0.5) * 2.0 + (top + left + right + bottom - 2.0) );\n\n    if( iMouse.z < 0.5 ) \n    {\n    \t\n        c = cir( p, vec2( 0.9 + sin( iTime * 5.0 ) * 0.5, 0.5 - cos( iTime * 5.0 ) * 0.5 ) );\n        \n    }\n    \n    vec3 ran = vec3( c * hash( iTimeDelta + 5.0 ), c * hash( iTimeDelta + 2.0 ), c * hash( iTimeDelta + 1.0 ) );\n    \n    red += c; // mouse\n    red *= 0.98; // damping\n    red *= step(0.1, iTime); // hacky way of clearing the buffer\n    red = 0.5 + red * 0.5;\n    red = clamp(red, 0., 1.);\n    \n    fragColor = vec4(red, center.r);\n    fragColor += 0.05 * texture( iChannel0, uv );\n    fragColor *= vec4( 1.0, 1.5, 1.3, 1.0 );\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}