{
    "Shader": {
        "info": {
            "date": "1623379230",
            "description": "WIP",
            "flags": 0,
            "hasliked": 0,
            "id": "st2GR1",
            "likes": 11,
            "name": "Vorochet I",
            "published": 3,
            "tags": [
                "voronoi",
                "truchet",
                "tiling",
                "connections"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 148
        },
        "renderpass": [
            {
                "code": "// https://www.shadertoy.com/view/4djSRW\nfloat Hash11(in float x) {\n    x = fract(x * 0.1031);\n    x *= x + 33.33;\n    x *= x + x;\n    return fract(x);\n}\n\nfloat Hash31(in vec3 p) {\n\tp = fract(p * 0.1031);\n    p += dot(p, p.zyx + 31.32);\n    return fract((p.x + p.y) * p.z);\n}\n\nvec2 Hash22(in vec2 p) {\n\tvec3 p3 = fract(p.xyx * vec3(0.1031, 0.103, 0.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\n// Random cycling points\nvec2 getPoint(in vec2 cell) {\n    float time = 2.0;//iTime\n    float freq = Hash11(dot(cell, vec2(393.84, 673.48))) * 3.0 + 1.0;\n    float phase = Hash11(dot(cell, vec2(348.46, 183.37)));\n    float amp = Hash11(dot(cell, vec2(275.35, 741.69)));\n    float t = time * freq + phase;\n    return cell + 0.5 + 0.5 * vec2(cos(t), sin(t)) * amp;\n}\n\n// https://www.shadertoy.com/view/7dSSW1\n#define ID_POS(x) clamp(abs(4.-8.*fract(vec2(x+3,x-3)/8.))-2.,-1.,1.)\nvec2 intersect(vec2 p0, vec2 n0, vec2 p1, vec2 n1) {\n    float d = n0.x * n1.y - n0.y * n1.x; // 0 if paralelle but does not append here\n    vec2 p = (p0 - p1) / d;\n    return vec2(p.y * n1.x - p.x * n1.y, p.y * n0.x - p.x * n0.y);\n}\n\nvec2[8] getVoronoiPolygon(in vec2 cellId, out int out_sz) {\n\tvec2 rm = getPoint(cellId); // center of cell\n    vec2 c[8], n[8];\n    // Get liste of lines\n    for(int i=0; i < 8; i++) {\n        vec2 g0 = ID_POS(i),\n             r0 = getPoint(cellId + g0),  // centre de l'autre cellule\n             n0 = r0 - rm;\n         c[i] = rm + n0*.5;  // Pt entre les 2 cellules             \n         n[i] = normalize(vec2(-n0.y,n0.x));\n    }\n\n    // Find intersection between lines\n    vec4 seg[8]; // x:-2 y:-1 z:+1 w:+2  \n    for(int i=2; i < 10; i++) { // Intersection point with two previous lines\n        vec2 t1 = intersect(c[i % 8], n[i % 8], c[(i - 1) % 8], n[(i - 1) % 8]),\n             t2 = intersect(c[i % 8], n[i % 8], c[(i - 2) % 8], n[(i - 2) % 8]);\n        seg[i % 8].x = t2.x;     // -2 of seg  0\n        seg[i % 8].y = t1.x;     // -1 of seg  0\n        seg[(i - 1) % 8].z = t1.y; // +1 of seg -1\n        seg[(i - 2) % 8].w = t2.y; // +2 of seg -2      \n    }\n\n    // Reconstruct the polygon\n    out_sz = 0;\n    for(int i=0; i<8; i++) {\n        float dmin = max(seg[i].z, seg[i].w);\n        if (dmin < min(seg[i].x, seg[i].y)) { // skip useless segments\n            n[out_sz] = c[i] + dmin * n[i];\n            out_sz++;\n        }\n    }\n\n    return n;\n}\n\nfloat sdBezier(in vec2 p, in vec2 v1, in vec2 v2, in vec2 v3) {\n    vec2 c1 = p - v1;\n    vec2 c2 = 2.0 * v2 - v3 - v1;\n    vec2 c3 = v1 - v2;\n\n    float t3 = dot(c2, c2);\n    float t2 = dot(c3, c2) * 3.0 / t3;\n    float t1 = (dot(c1, c2) + 2.0 * dot(c3, c3)) / t3;\n    float t0 = dot(c1, c3) / t3;\n\n    float t22 = t2 * t2;\n    vec2 pq = vec2(t1 - t22 / 3.0, t22 * t2 / 13.5 - t2 * t1 / 3.0 + t0);\n    float ppp = pq.x * pq.x * pq.x, qq = pq.y * pq.y;\n\n    float p2 = abs(pq.x);\n    float r1 = 1.5 / pq.x * pq.y;\n\n    if (qq * 0.25 + ppp / 27.0 > 0.0) {\n        float r2 = r1 * sqrt(3.0 / p2), root;\n        if (pq.x < 0.0) root = sign(pq.y) * cosh(acosh(r2 * -sign(pq.y)) / 3.0);\n        else root = sinh(asinh(r2) / 3.0);\n        root = clamp(-2.0 * sqrt(p2 / 3.0) * root - t2 / 3.0, 0.0, 1.0);\n        return length(p - mix(mix(v1, v2, root), mix(v2, v3, root), root));\n    }\n\n    else {\n        float ac = acos(r1 * sqrt(-3.0 / pq.x)) / 3.0;\n        vec2 roots = clamp(2.0 * sqrt(-pq.x / 3.0) * cos(vec2(ac, ac - 4.18879020479)) - t2 / 3.0, 0.0, 1.0);\n        vec2 p1 = p - mix(mix(v1, v2, roots.x), mix(v2, v3, roots.x), roots.x);\n        vec2 p2 = p - mix(mix(v1, v2, roots.y), mix(v2, v3, roots.y), roots.y);\n        return sqrt(min(dot(p1, p1), dot(p2, p2)));\n    }\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float zoom = mix(2.0, 10.0, 0.5 + 0.5 * cos(0.25 * iTime));\n    float fade = 0.5 + 0.5 * sin(iTime);\n\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * zoom + 0.5 * iTime;\n    float unit = 2.0 * zoom / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    vec2 cell = floor(uv), closest;\n    float minDist = 1e20;\n    for (int i=-1; i < 2; i++) {\n        for (int j=-1; j < 2; j++) {\n            vec2 curPoint = getPoint(cell + vec2(i, j));\n            vec2 toCurPoint = uv - curPoint;\n            float curDist = dot(toCurPoint, toCurPoint);\n            if (curDist < minDist) { closest = curPoint; minDist = curDist; }\n        }\n    }\n\n    int numVerts;\n    vec2 closestCell = floor(closest);\n    vec2[8] voroPoly = getVoronoiPolygon(closestCell, numVerts);\n    for (int n=0; n < numVerts; n++) {\n        int randEdge = int(Hash31(vec3(closestCell, n)) * float(numVerts));\n        if (randEdge == n) randEdge = (randEdge + 1) % numVerts;\n\n        vec2 rand1 = voroPoly[randEdge], rand2 = voroPoly[(randEdge + 1) % numVerts];\n        vec2 v1 = voroPoly[n], v2 = voroPoly[(n + 1) % numVerts];\n\n        vec2 nor1 = normalize(v2 - v1).yx * vec2(-1.0, 1.0);\n        vec2 nor2 = normalize(rand2 - rand1).yx * vec2(-1.0, 1.0);\n\n        vec2 a = 0.5 * (v1 + v2), c = 0.5 * (rand1 + rand2);\n        vec2 b = a + nor1 * (c.y * nor2.x - c.x * nor2.y + nor2.y * a.x - nor2.x * a.y) / (nor1.y * nor2.x - nor1.x * nor2.y);\n        //vec2 b = 0.5 * (a + c) + normalize(c - a).yx * vec2(1.0, -1.0);\n        //vec2 b = closest;\n\n        color = max(color, vec3(smoothstep(unit, 0.0, sdBezier(uv, a, b, c))));\n        color.b = max(color.b, smoothstep(unit, 0.0, sdLine(uv, v1, v2) - 0.01) * fade);\n    }\n\n    color.rg = max(color.rg, 0.6 * Hash22(closestCell) * fade);\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}