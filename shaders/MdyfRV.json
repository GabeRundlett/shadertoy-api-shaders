{
    "Shader": {
        "info": {
            "date": "1529533301",
            "description": "Trying to reproduce the blue blob at the beginning of the Future Sound of London clip \"Lifeforms\".\nhttps://www.youtube.com/watch?v=kDSDeyfYJ5M",
            "flags": 0,
            "hasliked": 0,
            "id": "MdyfRV",
            "likes": 25,
            "name": "FSOL Lifeforms",
            "published": 3,
            "tags": [
                "raymarch",
                "oldies",
                "1994"
            ],
            "usePreview": 0,
            "username": "lsdlive",
            "viewed": 1133
        },
        "renderpass": [
            {
                "code": "// @lsdlive\n// CC-BY-NC-SA\n\n// Trying to reproduce the blue blob at the beginning of the Future Sound of London clip \"Lifeforms\".\n// https://www.youtube.com/watch?v=kDSDeyfYJ5M\n\n\nmat2 r2d(float a) {\n\tfloat c = cos(a), s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\nfloat smin(float a, float b, float k) {\n\tfloat h = clamp(.5 + .5*(b - a) / k, 0., 1.);\n\treturn mix(b, a, h) - k * h * (1. - h);\n}\n\n#define nsin(x) (.5+.5*sin(x))\n\nfloat de(vec3 p) {\n\tp.xz *= r2d(iTime*.3);\n\t// p.zy*=r2d(3.14*.25);\n\n\tconst float num_tentacles = 5.;\n\tfloat sz_tentacles = .15;\n\tfloat sz_blob = .5;\n\n\tfloat ease_tentacle = 1.;//nsin(iTime)*1.5;\n\tfloat ease_blob = 1.;//.2*nsin(iTime);\n\n\tfloat dis_speed = iTime * 1.5;//sin(iTime*1.5)*2.;\n\n\tfloat sph = length(p) - sz_blob - ease_blob;\n\tfloat od = dot(p, normalize(sign(p))) - sz_blob - ease_blob;\n\n\t// Trying to be as organic as possible, so avoid axial & radial symetry abs(), amod() etc.\n\tvec3 q = p;\n\n\t// upper tentacles\n\tp.y += sin(dis_speed + p.x*1.*ease_tentacle);\n\tp.xy *= r2d(3.14*.25);\n\tfloat d = 1e6;\n\tfor (float i = 0.; i < num_tentacles; i++) {\n\t\tp.xz *= r2d(3.14 / num_tentacles);\n\t\td = smin(d, length(p.yz) - sz_tentacles, .2);\n\t}\n\n\t// down tentacles\n\tp = q;\n\tp.xy *= r2d(-3.14*.25);\n\tp.y += sin(dis_speed + p.x*1.*ease_tentacle);\n\tfor (float i = 0.; i < num_tentacles; i++) {\n\t\tp.xz *= r2d(3.14 / num_tentacles);\n\t\td = smin(d, length(p.yz) - sz_tentacles, .2);\n\t}\n\n\t// mid tentacles\n\tp = q;\n\tp.y += sin(dis_speed + p.x*1.*ease_tentacle);\n\tfor (float i = 0.; i < num_tentacles; i++) {\n\t\tp.xz *= r2d(3.14 / num_tentacles);\n\t\td = smin(d, length(p.yz) - sz_tentacles, .2);\n\t}\n\n\t// additionnal tentacles\n\tp = q;\n\tp.x += sin(sin(iTime*1.5) + p.y*1.*ease_tentacle);\n\td = smin(d, length(p.xz) - sz_tentacles, .95);\n\n\treturn smin(d, sph, .7);\n}\n\nvec3 normal(in vec3 pos)\n{\n\tvec2 e = vec2(1., -1.)*.5773*.0005;\n\treturn normalize(e.xyy*de(pos + e.xyy) +\n\t\te.yyx*de(pos + e.yyx) +\n\t\te.yxy*de(pos + e.yxy) +\n\t\te.xxx*de(pos + e.xxx));\n}\n\n// https://www.shadertoy.com/view/Xsl3Dl\nvec3 hash(vec3 p) // replace this by something better\n{\n\tp = vec3(dot(p, vec3(127.1, 311.7, 74.7)),\n\t\tdot(p, vec3(269.5, 183.3, 246.1)),\n\t\tdot(p, vec3(113.5, 271.9, 124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise(in vec3 p)\n{\n\tvec3 i = floor(p);\n\tvec3 f = fract(p);\n\n\tvec3 u = f * f*(3.0 - 2.0*f);\n\n\treturn mix(mix(mix(dot(hash(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0)),\n\t\tdot(hash(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0)), u.x),\n\t\tmix(dot(hash(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0)),\n\t\t\tdot(hash(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0)), u.x), u.y),\n\t\tmix(mix(dot(hash(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0)),\n\t\t\tdot(hash(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0)), u.x),\n\t\t\tmix(dot(hash(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0)),\n\t\t\t\tdot(hash(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0)), u.x), u.y), u.z);\n}\n\nfloat fbm(vec3 p) {\n\tmat3 m = mat3(0.00, 0.80, 0.60,\n\t\t-0.80, 0.36, -0.48,\n\t\t-0.60, -0.48, 0.64);\n\n\tfloat f = 0.0;\n\n\tvec3 q = 8.0*p;\n\tf = 0.5000*noise(q); q = m * q*2.01;\n\tf += 0.2500*noise(q); q = m * q*2.02;\n\t//f += 0.1250*noise( q ); q = m*q*2.03;\n\tf += 0.0625*noise(q); q = m * q*2.01;\n\treturn f;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord / iResolution.xy - .5;\n\tuv.x *= iResolution.x / iResolution.y;\n\n\tvec3 ro = vec3(0, 0, -5.);//-nsin(iTime)*8.\n\tvec3 rd = normalize(vec3(uv, 1));\n\n\tvec3 p;\n\tfloat t = 0.;\n\tfloat maxt = 30.;\n\tfor (float i = 0.; i < 1.; i += .01) {\n\t\tp = ro + rd * t;\n\t\tfloat d = de(p);\n\t\tif (d < .001 || t > maxt) break;\n\t\tt += d * .7;\n\t}\n\n\tvec3 bg_rd = rd;\n\tbg_rd.xz *= r2d(iTime*.005);\n\tbg_rd.zy *= r2d(-iTime * .2);\n\n\tvec3 bg = smoothstep(0., 1., vec3(1.5) * fbm(bg_rd*.5 + iTime * .06 + fbm(bg_rd)*.2));\n\tvec3 col = sqrt(bg);\n\tif (t <= maxt) {\n\t\tvec3 n = normal(p);\n\t\t// diff 1\n\t\tfloat dotNL = dot(n, normalize(vec3(-1)));\n\t\tcol = .8 * vec3(.08, .45, 1.) * max(0., dotNL);\n\n\t\t// diff 2\n\t\tdotNL = dot(n, -rd);\n\t\tcol += .1 * vec3(.08, .45, 1.) * max(0., dotNL);\n\n\t\t// spec 1\n\t\tvec3 h = normalize(vec3(-1) - rd);\n\t\tfloat dotHN = dot(h, n);\n\t\tcol += .2 * pow(clamp(dotHN, 0., 1.), 64.);\n\n\t\t// reflection\n\t\tcol += .25 *  texture(iChannel0, reflect(rd, n)).rgb;\n\t}\n\tcol = pow(col, vec3(.8));\n\tcol *= .8;\n\n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}