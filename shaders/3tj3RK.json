{
    "Shader": {
        "info": {
            "date": "1560263582",
            "description": "Hexagonal plane 3D",
            "flags": 96,
            "hasliked": 0,
            "id": "3tj3RK",
            "likes": 11,
            "name": "Hexagonal plane 3D",
            "published": 3,
            "tags": [
                "plane",
                "hexagonal"
            ],
            "usePreview": 0,
            "username": "edo_m18",
            "viewed": 688
        },
        "renderpass": [
            {
                "code": "vec2 blurCenter = vec2(0.5);\n\n#define USE_BLUR 1\n\nconst float strength = 10.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float i = pow(texture(iChannel1, vec2(0.0, 0.85)).x, 3.0);\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec2 dir = blurCenter - uv;\n    float dist = length(dir);\n    dir = normalize(dir) * (1.0 / iResolution.xy);\n    float power = i * 15.0;\n    dir *= power * dist;\n  \n    #if USE_BLUR == 1\n\tfloat s = strength;\n    vec3 col = texture(iChannel0, uv).rgb / s;\n    for (float j = 0.0; j < s; j++)\n    {\n        col.r += texture(iChannel0, uv + (vec2(0.00, 0.00) * i) + (dir * j)).r / s;\n        col.g += texture(iChannel0, uv + (vec2(0.02, 0.02) * i) + (dir * j)).g / s;\n        col.b += texture(iChannel0, uv + (vec2(0.05, 0.05) * i) + (dir * j)).b / s;\n    }\n    #else\n    vec3 col = texture(iChannel0, uv).rgb;\n    #endif\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 18792,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/elektrik-dreams-music/nicola-cite-borderline-original-mix-out-now-on-beatport"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float sdPlane(vec3 p, vec4 n)\n{\n    return dot(p, n.xyz) + n.w;\n}\n\nfloat map(vec3 p)\n{\n    p = -abs(p);\n    p.y += 7.0;\n    float d1 = sdPlane(p, vec4(0, 1, 0, +1));\n    \n    float d2 = sdPlane(p, vec4(normalize(vec3(1., 1., 0)), +5));\n    \n    return min(d1, d2);\n}\n\nmat3 camera(vec3 ro, vec3 ta, vec3 up)\n{\n    vec3 cw = normalize(ta - ro);\n    vec3 cu = normalize(cross(cw, up));\n    vec3 cv = normalize(cross(cu, cw));\n    return mat3(cu, cv, cw);\n}\n\nfloat HexDist(vec2 p)\n{\n    p = abs(p);\n    float c = dot(p, normalize(vec2(1., 1.73)));\n    return max(c, p.x);\n}\n\nvec4 HexCoords(vec2 uv)\n{\n\tvec2 r = vec2(1.0, 1.73);\n\tvec2 h = r * 0.5;\n\tvec2 a = mod(uv, r) - h;\n\tvec2 b = mod(uv - r * 0.5, r) - h;\n        \n\tvec2 gv = length(a) < length(b) ? a : b;\n\tvec2 id = uv - gv;\n        \n\tfloat x = atan(gv.x, gv.y);\n\tfloat y = 0.5 - HexDist(gv);\n    \n    return vec4(x, y, id.x, id.y);\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 uv = (U - 0.5 * iResolution.xy)/ iResolution.y;\n\n    float time = iTime * 20.0;\n    vec3 ro = vec3(cos(time * 0.01), sin(time * 0.03) * 1., time);\n    vec3 ta = vec3(0, 0, 5. + time);\n    \n    vec3 ray = camera(ro, ta, normalize(vec3(0, 1, 0))) * normalize(vec3(uv, 1.5));\n    \n    vec3 p = ro;\n    \n    const int max_march = 124;\n    \n    float d = 0., t = 0.;\n    for (int i = 0; i < max_march; i++)\n    {\n        d = map(p);\n        \n        if (d < 0.01) break;\n        \n        p += ray * d;\n        t += d;\n    }\n    \n    vec3 col = vec3(0);\n    \n    if (d < 0.01)\n    {\n        vec2 st = p.xz;\n        \n\t\tvec4 hc = HexCoords(st);\n        \n        float c = smoothstep(0.01, 0.03, hc.y);\n        float m = texture(iChannel0, vec2(0.1, 0.5)).x;\n        float i = sin(hc.z * hc.w + iTime);\n        col.rgb = vec3(c * i + 0.3);\n    }\n    \n    vec3 fog = vec3(0.5, 0.9, 1.2) * t * 0.009;\n    fog *= fog;\n    O = vec4(col + fog, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}