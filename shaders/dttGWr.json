{
    "Shader": {
        "info": {
            "date": "1682369856",
            "description": "in each 8x8 tiles, show the center of mass of red.\nclick for color.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "dttGWr",
            "likes": 13,
            "name": "dot video",
            "published": 3,
            "tags": [
                "moment",
                "gpmipmap"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 289
        },
        "renderpass": [
            {
                "code": "// === center of mass of red in 8x8 tiles ============\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         F = fract(u/8.)*2. - 1.;                 // tile centered coords\n         \n    O = texelFetch(iChannel0, ivec2(u/R*S)/8, 3); // get location coordinates\n // O = textureLod(iChannel0, u/R*S/R, 3.);       // interpolated version\n    O.x += 1e-5;                                  // avoid div0\n    O = vec4( smoothstep(.2,-.2,length(F-2.*O.yz/O.x)-.5 ) ); // display disk\n  //if ( fract(iTime/4.)<.5)          // 2.* to amplify displacement\n    if ( iMouse.z > 0. )\n        O *= texture(iChannel1,u/R*S/R);                      // display color\n      \n         \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// === store video ==============\n// NB: report video size in Common\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    O = T(u);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// === prepare MIPmap for center of mass of red in 8x8 tiles ====\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    float v = T(u).r;\n    vec2  F = fract(u/8.)*2. - 1.;\n    O.rgb = vec3( v, F * v );\n    \n // O = T(u).r * vec4(1, mod(u/4.,2.) - 1., 0 );  // golfed version\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//vec2 S = vec2(512,396); // Britney size.\n  vec2 S = vec2(640,360); // JC.VD size.  \n  \n#define T(u) texelFetch(iChannel0, ivec2(u), 0)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}