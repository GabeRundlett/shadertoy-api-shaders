{
    "Shader": {
        "info": {
            "date": "1492481702",
            "description": "Just bored and thought I'd try a funky distance function.",
            "flags": 0,
            "hasliked": 0,
            "id": "4dScRG",
            "likes": 7,
            "name": "Distance field test",
            "published": 3,
            "tags": [
                "foo"
            ],
            "usePreview": 0,
            "username": "nuclear",
            "viewed": 579
        },
        "renderpass": [
            {
                "code": "#define THRES\t\t1e-3\n#define MAX_ITER\t250\n#define MAX_STEP\t0.1\n#define M_PI\t\t3.14159265\n\nfloat calc_dist(in vec3 p);\n\nvec3 ray_march(in vec3 p, in vec3 dir);\nvec3 colorize(in vec3 p, in vec3 dir, in float dist);\nvec3 backdrop(in vec3 dir);\nvec3 get_ray_dir(in vec2 p);\n\nfloat tsec;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    tsec = iTime;\n    \n    vec3 origin = vec3(0.0, 0.0, -13.0);\n    vec3 dir = normalize(get_ray_dir(uv));\n    \n    fragColor.rgb = ray_march(origin, dir);\n    fragColor.a = 1.0;\n}\n\nfloat calc_dist(in vec3 p)\n{\n    const vec3 sph_pos = vec3(0.0, 0.0, 0.0);\n    vec3 sph_dir = p - sph_pos;\n    float sph_dist = length(sph_dir * vec3(1.0, 1.0, 1.0));\n    sph_dir = normalize(sph_dir);\n    float theta = atan(sph_dir.z, sph_dir.x) + M_PI + cos(sph_dist + tsec * 2.0) * 0.1;\n    theta = mod(theta - tsec * 0.2, 2.0 * M_PI);\n    float phi = acos(sph_dir.y) + cos(sph_dist + tsec * 1.2) * 0.1;\n    \n    float rad = 5.0 + (1.0 - sin(theta * 8.0)) * 1.0 *\n        (1.0 - cos(phi * 10.0)) * 1.0;\n    sph_dist -= rad;\n    \n    return sph_dist;\n}\n\nvec3 ray_march(in vec3 p, in vec3 dir)\n{\n    float d, total_d = 0.0;\n    \n    for(int i=0; i<MAX_ITER; i++) {\n        if((d = calc_dist(p)) <= THRES) {\n            return colorize(p, dir, total_d);\n        }\n        \n        d = min(d, MAX_STEP);\n        \n        p = p + dir * d;\n        total_d += d;\n    }\n    \n    return backdrop(dir);\n}\n\nvec3 calc_normal(in vec3 p)\n{\n    const float delta = 1e-2;\n    float gx = calc_dist(p + vec3(delta, 0.0, 0.0)) - calc_dist(p - vec3(delta, 0.0, 0.0));\n    float gy = calc_dist(p + vec3(0.0, delta, 0.0)) - calc_dist(p - vec3(0.0, delta, 0.0));\n    float gz = calc_dist(p + vec3(0.0, 0.0, delta)) - calc_dist(p - vec3(0.0, 0.0, delta));\n    return normalize(vec3(gx, gy, gz));\n}\n\nvec3 colorize(in vec3 p, in vec3 dir, in float dist)\n{\n    const vec3 kd = vec3(1.0, 0.3, 0.1);\n    const vec3 ks = vec3(0.7, 0.7, 0.7);\n    const vec3 ldir = normalize(vec3(-1.0, 1.0, -1.5));\n    const vec3 vdir = vec3(0.0, 0.0, -1.0);\n\n    vec3 diffuse = vec3(0.0, 0.0, 0.0);\n    vec3 specular = vec3(0.0, 0.0, 0.0);\n    \n    vec3 n = calc_normal(p);\n    vec3 hdir = normalize(ldir + vdir);\n\n    float ndotl = max(dot(n, ldir), 0.0);\n    float ndoth = max(dot(n, hdir), 0.0);\n    \n    diffuse += kd * ndotl;\n    specular += ks * pow(ndoth, 50.0);\n    \n    float fog = clamp(300.0 / (dist * dist), 0.0, 1.0);\n\n    return mix(backdrop(dir), diffuse + specular, fog);\n}\n\nvec3 backdrop(in vec3 dir)\n{\n    return vec3(0.5, 0.5, 0.7);\n}\n\nvec3 get_ray_dir(in vec2 p)\n{\n    float aspect = iResolution.x / iResolution.y;\n    return vec3(aspect * (p.x * 2.0 - 1.0), p.y * 2.0 - 1.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}