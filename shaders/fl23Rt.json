{
    "Shader": {
        "info": {
            "date": "1624506981",
            "description": "it just keeps going and going",
            "flags": 0,
            "hasliked": 0,
            "id": "fl23Rt",
            "likes": 4,
            "name": "Patterned Spiral",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "spiral",
                "atan",
                "kifs"
            ],
            "usePreview": 0,
            "username": "scry",
            "viewed": 278
        },
        "renderpass": [
            {
                "code": "#define iTime iTime*0.1\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\n//https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\n// All components are in the range [0…1], including hue.\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n \n\n// All components are in the range [0…1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 tv = uv;\n    vec2 R = iResolution.xy;\n    float ar = R.x/R.y;\n    //tv -= 0.5;\n    //tv = vec2((length(tv)), atan(tv.x,tv.y));\n    //tv.y = abs(tv.y+iTime*0.02);\n    //tv *= r2d(iTime*0.91);\n    //tv = vec2(tv.x*sin(tv.y),tv.x*cos(tv.y));\n    //tv += 0.5;\n    //tv = abs(tv-0.5)+0.5;\n    //vec3 bak = texture(texture1,tv).rgb;\n    uv -= 0.5;\n    uv.x *= ar;\n    //uv *= 0.2;\n    //uv += 0.5;\n    uv *= 1.;\n    float ac = length(uv);\n    float udt = iTime*0.2;\n    vec2 uvd = uv/mix(vec2(sin(udt),cos(udt*0.9238)*9.)*0.5,vec2(1.,0.5),1.-ac);\n    //uv = mix(uvd,uv,sin(iTime*0.1+1.)*0.5+0.5);\n    //uv *= (1.-ac)*(1.-ac);\n    //uv *= vec2(sin(udt),cos(udt*0.9238)*4.)*0.2;\n    //uv *= r2d(ac*2.+iTime*0.5);\n    //uv.x *= 0.1;\n    float c = length(uv);\n    float lc = log(c)*0.093;\n    //uv *= 20.1;\n    float scrolltime = iTime*0.;\n    float zoomtime = iTime*0.9;\n    //scrolltime += sin(lc*9+iTime*1)*0.1;\n    //uv /= c;\n    //uv.x += iTime;\n    tv -= 0.5;\n    tv *= 1.+lc*0.09;\n    tv += 0.5;\n    //vec3 bakd = texture(texture1,tv).rgb;\n    vec2 cuv = vec2(lc,atan(uv.x,uv.y)/6.27831853071);\n    //uv.x *= 0.9;\n    //uv = mix(uv,cuv,sin(iTime)*0.5+0.5);\n    //uv *= 0.1;\n    //cuv.x *= 0.1;\n    uv = cuv;\n    //uv *= 0.5;\n    \n    uv.x *= 1.;\n    uv.y *= 1.;\n    vec2 uvb = uv;\n    //uv *= 0.1;\n    uv.x -= zoomtime*0.2;\n    //uv.x *= 1.7;\n    vec2 uvc = uv+0.5;\n    //uv.y /= 6.28318;\n    uv = fract(uv-0.5);\n    //uv.x += iTime;\n    //uvc = fract(uvc-0.5);\n    //uv = vec2(lc,atan(uv.x,uv.y));\n    //uv.x *= 0.4;\n    vec3 col = vec3(0.);\n    float ct = 20.;\n    //uv *= r2d(lc);\n    float b = 0.;\n    //uv *= 0.6;\n    vec2 rud = uv;\n    uv *= r2d(1./ct);\n    uvc *= r2d(1./ct);\n    uvb *= r2d(1./ct);\n    //uv *= 0.3;\n    //uv.x *= 0.03;\n    //uv *= r2d((3.141/180.)*(90/ct));\n    vec2 uvf = floor(uv*ct)/ct;\n    vec2 fr = fract(rud);\n    //uvc.x += .9;\n    float uvxf = floor(uvc.x*ct)/ct;\n    float uvtf = floor(uvc.x*ct);\n    float sy = uvxf;\n    sy -= ((uvc.y)/ct);\n    //uvtf = uvxf;\n    //uvtf -= sin(((uvc.y)/ct)*iTime);\n    float dist = (sin(c*8.+iTime*23.)*0.004);\n    //sy += sin(sy*0.0002)*iTime;\n    //sy += sin(floor(uvc.x*ct))*iTime*0.5;\n    //sy -= sin(uvxf/3.14159)*iTime;\n    //sy += dist*(dist+lc*2);\n    //sy += sin(uvxf*4.14+iTime*0.1);\n    //sy += sin(uvtf*iTime*0.01)*iTime*0.51;\n    //sy = ((fract(sy*400.)/400.)-(0.5/40))+sy;\n    //sy -= 0.5/40;\n    //sy = abs(fract(sy))-0.55;\n    //sy += sin(floor(uvc.x*ct)*62.9+2)*iTime*0.3;\n    sy += sin(sy*0.5)*1.;\n    sy *= 01.25;\n    //sy += sin(uvc.x*02.2)*0.01;\n    //sy += sin(iTime*0.5)*2.;\n    //sy *= r2d(iTime);\n    //sy = sin(sy*4)*40;\n    sy -= scrolltime*0.05;\n    //sy += iTime*c*0.00002;\n    //sy *= c;\n    //sy += (rud.y-0.5);\n    //sy -= (-rud.y-iTime)/ct;\n    //sy = fract(sy);\n    //sy *= 2;\n    vec2 uvs = fract(vec2((uvc.x)*20.,sy));\n    //uvs.y *= 0.5;\n    //uvs.y += sin(uvc.x*0.03);\n    uvs.y = abs(uvs.y-0.5)+0.5;\n    uvs.y *= ct*ct;\n    \n    //uvs.x *= 1./ct;\n    //uvs.y = abs(uvs.y)-1.;\n    //sy += (-rud.y)/ct;\n    //sy = rud.y;\n    //uvf -= uv.y*0.05;\n    //uvf *= 0.9;\n    //uvf += ((rud.y)/ct);\n    //uvf += abs((rud.y)/ct);\n    //b *= 0.;\n    //b = (rud.y);\n    //b = 1.-smoothstep(0.,0.02,abs(uvs.x-0.5)-0.4);\n    b = 1.-smoothstep(0.,0.06,abs(uvs.x-0.5)-0.1);\n    vec2 uvg = uvs;\n    //uvg.x += 0.3;\n    //uvg.y += 2.;\n    uvg.y += sin(sin(sin(uvg.x*3.141)+uvg.y*0.004)*3.)*0.2;\n    //uvg.x = abs(uvg.x);\n    //uvg.x *= 2.2;\n    uvg.y *= 01.5;\n    //uvg.x *= (sin(sin(uvs.y*0.01)*2.)*0.5+1.)*3.;\n    uvg = fract(uvg);\n    //uvg.x *= 2.;\n    uvg = abs(uvg-0.5);\n    //uvg *= 3.;\n    //uvg.y += c;\n    uvs.y *= 0.2;\n    //uvg.x *= 1*sin(uvs.y*0.1);\n    uvg -= 0.5*sin(uvs.y*0.01);\n    uvg *= r2d(uvs.y*sin(uvs.y*0.00101+0.)*2.);\n    uvg = abs(uvg)-0.2;\n    uvg *= r2d(uvs.y*cos(uvs.y*0.001)*0.1);\n    uvg = abs(uvg)-0.2;\n    uvg *= sin(uvs.y*0.01)*0.5+0.8;\n    uvg *= r2d(uvs.y*sin(uvs.y*0.0001)*1.);\n    for (int i=0;i<5;i++) {\n        uvg *= r2d(uvs.y*cos(uvs.y*0.001)*0.1);\n        uvg = abs(uvg)-0.2;\n    }\n    uvg += 0.5;\n    //uvg.x += lc;\n    b *= smoothstep(0.02,0.04,abs(uvg.x-0.5));\n    float bh = smoothstep(1.,0.0,abs(uvg.x-.5));;\n    //b *= smoothstep(0.02,0.01,abs(uvg.x-0.5));\n    //uvs *= 10.;\n    \n    //col.rg = sin(uvs);\n    col = vec3(b);\n    //col = sin(col);\n    col = rgb2hsv(col);\n    //col = hsv2rgb(vec3((uvs.y*0.02)+bh*10+iTime*0.1,1.,(sin(uvs.y*0.1)*0.3+0.7)*col.b));\n    //col = hsv2rgb(vec3((uvs.y*0.02)+bh*10+iTime*0.1,1.,(sin(uvs.y*0.1)*0.3+0.7)*col.b));\n    \n    col = hsv2rgb(vec3((uvs.y*0.02)+bh*10.+iTime*0.1,1.,((sin(uvs.y*sin(uvs.x*02.2+0.6)*.15+4.5)*.5+0.5)*0.5+0.5)*b));\n    //col = hsv2rgb(vec3((uvs.y*0.02)+bh*10+iTime*0.1,1.,(sin(uvs.y*0.1)*0.3+0.7)*col.b));\n    //bak = mix(bak,bakd,0.08);\n    \n    //if (b < 0.95) {\n        //col = bak*0.997;\n        //col \n        //col = fract(col+0.01);\n        //col = mix(col,bak,01.4);\n    //}\n    //col = mix(col,bak,0.6*(1.-((lc+1)*.15)));\n    //col = mix(vec3(b),col,0.4);\n    //col.rg = sin(uvs*30);\n    //col = vec3(sin(uvs.y)+sin(uvs.x));\n    //col.rg = sin(uvs*6+iTime*2);\n    //col.b = sin((uv.x+uv.y)*9*4);\n    //col.rg = vec2(sin(vec2(uvc.x,uvx.y)/2));\n    //col.rg = uv;\n    //col.rg = uv*0.2;\n    //col.b = sy+iTime*0.5;\n    //col.b = sin(sy*0.7);\n    //col.b = sy;\n    //col.r = rud.y;\n    //col.b = sin(sy*220)*0.3+sin(sy);\n    //col = vec3(abs(uvc.y-0.5));\n    //col.b = sin(col.b*2000)+sin(col.b*4.);\n    //col.b = sin(col.b+iTime);\n    //col.b = sin(col.b*3.14)*0.5+0.5;\n    //col.b = sin(col.b*62.9+1.)+sin(col.b*2+iTime)*0.5;\n    //col = vec3(sin(uv.x*20));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}