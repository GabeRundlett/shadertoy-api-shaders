{
    "Shader": {
        "info": {
            "date": "1561668064",
            "description": "Based on https://www.shadertoy.com/view/4sVfRc by FabriceNeyret2\nA partial remake of http://slither.io/\n",
            "flags": 48,
            "hasliked": 0,
            "id": "WtXXRn",
            "likes": 17,
            "name": "Slither3: eat blobs!",
            "published": 3,
            "tags": [
                "2d",
                "game",
                "remake",
                "snake",
                "worm",
                "io",
                "reproduction",
                "slither"
            ],
            "usePreview": 0,
            "username": "1j01",
            "viewed": 1176
        },
        "renderpass": [
            {
                "code": "/*\n\nBased on https://www.shadertoy.com/view/4sVfRc\nby FabriceNeyret2\n\nImprovements (\"ladders\"):\n- added mouth magnet behavior\n- fixed eating with regard to world wrapping\n- added boosting (sans the glow and dropping dots)\n    - hold space or up arrow, or enable BOOST_WITH_MOUSE in Common\n- you now spiral instead of making a perfect donut if you go in circles\n- added keyboard controls (left/right arrows to rotate, space or up to boost)\n- removed the inter-segment points that were used for spacing segments (#define k & usages)\n- separated initial energy ball count from slots/max\n- improved some variable names / code clarity (but there's still a lot of single letters)\n\nRegressions (\"snakes\"):\n- the spiral effect (vs going in a perfect circle) is too pronounced\n    - you can now turn back on yourself in ways that look\n      like it should knot up your body\n\t- and if you spiral, your tail can stay outside of the spiral indefinitely\n- it now computes all the physics of the segments ahead of a given segment\n  in order to have a variable speed for boosting,\n  so it's more likely to get laggy from having a lot of segments\n\nTODO:\n- make eyes look at mouse (rotationally)\n- separate eyes (spacing-wise)\n- get movement feeling right\n    - center cam in front of snek a bit\n    - non-constant turning speed\n- grow without expanding backwards\n- boosting:\n    - transition speed (could store in w of another segment)\n    - glow while boosting!\n    - drop dots and lose length while boosting\n- animate dots shrinking as you eat them (and maybe fading?)\n    - question: do dots get marked as eaten before gravitating?\n        - if two snakes go perfectly alongside a dot,\n          would it cancel out the pull, or go to one?\n- animate dots appearing\n- colorful snek\n- moar sneks\n- bigger level\n- minimap\n- maybe make dots more accurate to the original? eh, they look alright\n- multiplayer where you point a webcam at each others' screen LOL\n\n*/\n\n\n#define rot(a) mat2(cos( a + vec4(0,33,11,0)))   // From https://www.shadertoy.com/view/XlsyWX\n#define hue(v) ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) ) // From https://www.shadertoy.com/view/ll2cDc\n\n\n// --- return hexa cell center + dist to center. // From https://www.shadertoy.com/view/lsVBWw\n\nvec2 Hcoords( vec2 U, out float d ) {\n#define SQR3S2 0.866\n    U.y /= SQR3S2;\n    U.x -= .5*U.y;                           // global slant\n\n    vec2 F = fract(U);                       // triangular barycentric coordinates\n    bool u = F.x+F.y > 1.;       \n    vec3 q = vec3(F, fract(1.-F.x-F.y));\n    if (u) q = 1.-q;\n    vec3   r = q - q.zxy;\n\n    U = floor(U);                            // hexagonal center, d = dist to border\n    if      ( r.x>0. && r.y<0. ) U += vec2(!u,u), d = min(r.x,-r.y);\n    else if ( r.y>0. && r.z<0. ) U += vec2(u,!u), d = min(r.y,-r.z);\n    else                         U += vec2(u)   , d = min(r.z,-r.x);\n        \n    return U;\n}\n\n#define blend(c,d) O = mix(O, vec4(c), smoothstep(.02,0.,d))\n#define B(U,d,h)   length( U -(d)*D -(h)*H )   // Ball at coord(d,h) relative to (D,H)\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    vec2 R = iResolution.xy, r = 400.*R/R.y / PIX;\n    float L = T(1,0).w;                      // num segments ( = pos to queue )\n    U *= 400./R.y;\n    U /= PIX; \n    vec2 P0 = T(0,0).xy; U += P0-r*.5;\n    float d;\n    vec2 P = Hcoords(U * rot(-.2), d);\n    O = ( smoothstep(.0,.01,d-.33)*.4 + sqrt(clamp(-5.*(d-.23),0.,1.))*.2 )\n         * vec4(.7,.7,1,0)*.6;\n    \n    for (float i=0.; i<MAX_BALLS; i++)           // draw energy balls\n        if ( T(i,1).z != -1.) {\n            d = length( mod( U - T(i,1).xy+.5*r , r)-.5*r );\n            vec2 r = rnd(i+.5);\n            O +=  .01*(1.+r.x+.3*sin(6.3*r.y+13.*iTime)) / (d*d) * hue(i/10.);\n        }\n    \n    vec2 D = V*D(T(0,0).z), H = vec2(-D.y,D.x);\n    for (float i=L-1.0; i>=0.0; i-=1.0) {          // draw worm body\n        P = T(i,0).xy;\n        d = length( U - P );\n        blend(d, d-.37);\n    }\n    float h = T(0,0).w;\n    d =       B( U-P, 1., .7 );               // draw worm eyes\n    d = min(d,B( U-P, 1.,-.7 ));\n    blend(1., d-.15);\n    \n    d =       B( U-P, 1.4, .7+h );\n    d = min(d,B( U-P, 1.4,-.7+h ));\n    blend(0., d-.08);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float m = 0.39/1.41;          // screen wrapping margin\nconst float MAX_TURN_SPEED = 3.5;\nconst float BALL_EAT_DIST = 0.3;\nconst float LEN_PER_BALL = 0.25;\n\n/*\ndata layout:\n\nrow index 0 is the worm -\n    index 0 is the head, with (x, y, angle, eyes position)\n    the rest are segments with (x, y),\n    with index 1 also storing the number of segments (x, y, _, num sements in worm)\n\nrow index 1 is the energy balls -\n    each with (curX, curY, baseX, baseY),\n\t-1 in z component means nonexistent\n\n*/\n\nvec2 findClosestWrappedPosition(vec2 originalPos, vec2 nearPos, vec2 r) {\n    vec2 pos = mod(originalPos, r);\n    \n    float midX = r.x / 2.0;\n    float midY = r.y / 2.0;\n    if (nearPos.x < midX && pos.x > midX) pos.x -= r.x;\n    if (nearPos.y < midY && pos.y > midY) pos.y -= r.y;\n    if (nearPos.x > midX && pos.x < midX) pos.x += r.x;\n    if (nearPos.y > midY && pos.y < midY) pos.y += r.y;\n    \n    return pos;\n}\n\nvec2 getMouthPos(vec4 headO) {\n    return headO.xy + D(headO.z) * 0.2; // ahead of the head by a bit\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U -= 0.5;\n    float i = U.x,\n          j = U.y;\n    \n    if (j>1.0) return; // only deal with two rows of data\n\n    vec2 R = iResolution.xy;\n    vec2 r = 400.0*R/R.y / PIX;\n    \n    if (iFrame==0) {                 // --- initial position\n        if (j==0.0) {\n            if (i==0.0) O.z = A0;    // head angle\n            if (i==0.0) O.w = 0.2;   // eyes position\n            if (i==1.0) O.w = INITIAL_SEGS;// start worm length\n            float L = INITIAL_SEGS;      // num segments ( = pos to queue )   \n            vec2 headPos = vec2(330,150)/PIX;\n            vec2 D = D0;\n            vec2 H = vec2(-D.y,D.x);\n            i = (L-i)-1.0;\n            O.xy = mod( headPos + i * D + 0.3*H*sin(i/2.0), r+m );\n        } else {\n            // energy balls\n            if (i < INITIAL_BALLS) {\n            \tO.zw = rnd(i)*r;\n            } else {\n                O = vec4(-1); // nonexistent\n            }\n        }\n        return;\n    }\n                         // --- simulation\n    O = T(i,j);                      // previous state\n    vec4 headO = T(0,0);             // worm head\n    vec4 originalHeadO = headO;\n    \n    if (j == 0.0) {\n        bool boost = keyHeld(KEY_SPACE) || keyHeld(KEY_UP);\n        #if BOOST_WITH_MOUSE\n        boost = boost || iMouse.z > 0.0;\n        #endif\n        float speed = (boost ? 0.5 : 0.25) * V; // V may be arbitrary here\n\n        \n        // in normal programming, you'd just look at the previous item,\n        // updating them as you go, but in this case,\n        // we can't just look at the updated previous items\n        // so we might have to...\n        \n        // calculate all previous positions of segments for each segment\n\n        vec2 segPos, leadPos;\n        for (float seg_i=0.0; seg_i <= i; seg_i++) {\n            segPos = T(seg_i, 0).xy;\n            if (seg_i == 0.0) {\n                // head motion\n                vec2 M = iMouse.xy * 400.0/R.y / PIX + headO.xy - r*0.5;\n                // mouse and keyboard control turns head\n                float turningInputs =\n                    float(keyHeld(KEY_LEFT)) -\n                    float(keyHeld(KEY_RIGHT)) -\n                    (iMouse.z > 0.0 ? cross2(normalize(M-headO.xy),D(headO.z)) : 0.0);\n                float a = MAX_TURN_SPEED * clamp(turningInputs, -1.0, +1.0);\n                headO.z += a*dt;\n                headO.w = mix( headO.w, 0.15*a, dt*3.0 ); // eyes position\n                \n                #if SNAKY_SNAKY\n                headO.z += sin(5.0*iTime)/50.0;   // snaking motion \n\t\t\t\t#endif\n                \n                headO.xy += speed * D(headO.z);    // move head\n                segPos = headO.xy;\n            } else {\n                vec2 dirVec = normalize(leadPos - segPos);\n                segPos = leadPos - dirVec * V;\n            }\n            leadPos = segPos;\n        }\n        // store results from the above loop\n        if (i == 0.0) {\n            O = headO;\n        } else {\n            O.xy = segPos;\n        }\n\n        // if eat ball, increase worm length\n        if (i == 1.0)  {\n            for (float i=0.0; i < MAX_BALLS; i++) {\n                vec4 ballO = T(i,1);\n                if (ballO.z != -1.0) {\n                    // use original head position so we don't need to calculate\n                    // head motion below for the energy balls\n                    // and energy ball base position (zw) so we don't need to calculate\n                    // ball wobbling up here\n                    vec2 mouthPos = getMouthPos(originalHeadO);\n                    mouthPos = findClosestWrappedPosition(headO.xy, ballO.zw, r);\n\n                    if ( length(mouthPos - ballO.zw) < BALL_EAT_DIST ) {\n                        O.w += LEN_PER_BALL; // increase worm length\n                    }\n                }\n            }\n        }\n    } else {\n        // new energy balls\n        if (O.z == -1.0) {\n            if(1.0-rnd(i+iTime).x < BALL_SPAWN_CHANCE) {\n                O.zw = rnd(i-iTime)*r;\n            }\n        }\n        \n        // wobble energy balls (with zw components as base position)\n        // (and finish initing new energy balls)\n        O.xy = O.zw - 0.06*cos(i+4.0*iTime+vec2(33,0));\n\n        // existing energy balls\n        if (O.z != -1.0) {\n\n            vec2 mouthPos = getMouthPos(originalHeadO);\n            mouthPos = findClosestWrappedPosition(headO.xy, O.zw, r);\n            \n            float distToMouth = length( mouthPos - O.zw );\n\n            // mouth magnet\n            if ( distToMouth < 1.0 ) {\n                O.zw += normalize(mouthPos - O.xy) * 0.04 / distToMouth;\n            }\n\n            // eating\n            if ( distToMouth < BALL_EAT_DIST ) {\n                O = vec4(-1);\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define BOOST_WITH_MOUSE 0      // mouse pos only avail while clicking\n#define SNAKY_SNAKY 0           // snaking movement\n\n#define PIX 64.                 // pixel size (i.e. zoom )\n#define INITIAL_SEGS 15.        // number of initial segments\n#define INITIAL_BALLS 20.       // number of initial energy balls\n#define MAX_BALLS 50.           // maximum number of energy balls\n#define BALL_SPAWN_CHANCE 0.001 // chance of new energy ball per slot per frame\n\n#define dt  (1./60.)\n#define D0  vec2(10,5)/PIX      // initial segment vector\n#define A0  atan((D0).y,(D0).x) // corresponding angle and length\n#define V   length(D0)          // distance between segments\n\n#define D(a)           vec2(cos(a),sin(a))\n#define cross2(a,b)    ( (a).x*(b).y-(a).y*(b).x )\n#define T(i,j)         texelFetch(iChannel0,ivec2(i,j),0)\n#define keyHeld(key)   texelFetch(iChannel1, ivec2(key,0), 0).x > 0.0\n#define rnd(p)         fract(sin( (p) * vec2(27.1,311.7) )*43758.5453123)\n//#define rnd(p)       fract(sin((p) * mat2(127.1,311.7,269.5,183.3) )*43758.5453123)\n\nconst int KEY_SPACE = 32;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\n/*\nconst int n_colors = 41;\nconst int[n_colors] rrs = int[](192, 144, 128, 128, 238, 255, 255, 255, 224, 255, 144,  80, 255,  40, 100, 120,  72, 160, 255,  56,  56,  78, 255, 101, 128,  60,   0, 217, 255, 144,  32, 240, 240, 240, 240,  32,  40, 104,   0, 104,   0);\nconst int[n_colors] ggs = int[](128, 153, 208, 255, 238, 160, 144,  64,  48, 255, 153,  80, 192, 136, 117, 134,  84,  80, 224,  68,  68,  35,  86, 200, 132, 192, 255,  69,  64, 144,  32,  32, 240, 144,  32, 240,  60, 128,   0,  40,   0);\nconst int[n_colors] bbs = int[](255, 255, 208, 128, 112,  96, 144,  64, 224, 255, 255,  80,  80,  96, 255, 255, 255, 255,  64, 255, 255, 192,   9, 232, 144,  72,  83,  69,  64, 144, 240,  32,  32,  32, 240,  32, 173, 255, 112, 170,   0);\n\nvec3[n_colors] colors;\n\n// can't do a for loop at top level\nfor (int i = 0; i < n_colors; i++) {\n    colors[i] = vec3(rrs[i], ggs[i], bbs[i]);\n}\n*/\n/* JavaScript:\nvar rrs=[192, 144, 128, 128, 238, 255, 255, 255, 224, 255, 144,  80, 255,  40, 100, 120,  72, 160, 255,  56,  56,  78, 255, 101, 128,  60,   0, 217, 255, 144,  32, 240, 240, 240, 240,  32,  40, 104,   0, 104,   0]\nvar ggs=[128, 153, 208, 255, 238, 160, 144,  64,  48, 255, 153,  80, 192, 136, 117, 134,  84,  80, 224,  68,  68,  35,  86, 200, 132, 192, 255,  69,  64, 144,  32,  32, 240, 144,  32, 240,  60, 128,   0,  40,   0]\nvar bbs=[255, 255, 208, 128, 112,  96, 144,  64, 224, 255, 255,  80,  80,  96, 255, 255, 255, 255,  64, 255, 255, 192,   9, 232, 144,  72,  83,  69,  64, 144, 240,  32,  32,  32, 240,  32, 173, 255, 112, 170,   0]\nvar vec3s=[]\nvar pad = (n)=> `${n}`.padStart(3, \" \");\nfor (var i = 0; i < rrs.length; i++) {\n\tvec3s.push(`vec3( ${pad(rrs[i])}, ${pad(ggs[i])}, ${pad(bbs[i])} )`);\n}\nvec3s.join(\",\\n\")\n*/\n/*\nvec3[] colors = vec3[](\n    vec3( 192, 128, 255 ),\n    vec3( 144, 153, 255 ),\n    vec3( 128, 208, 208 ),\n    vec3( 128, 255, 128 ),\n    vec3( 238, 238, 112 ),\n    vec3( 255, 160,  96 ),\n    vec3( 255, 144, 144 ),\n    vec3( 255,  64,  64 ),\n    vec3( 224,  48, 224 ),\n    vec3( 255, 255, 255 ),\n    vec3( 144, 153, 255 ),\n    vec3(  80,  80,  80 ),\n    vec3( 255, 192,  80 ),\n    vec3(  40, 136,  96 ),\n    vec3( 100, 117, 255 ),\n    vec3( 120, 134, 255 ),\n    vec3(  72,  84, 255 ),\n    vec3( 160,  80, 255 ),\n    vec3( 255, 224,  64 ),\n    vec3(  56,  68, 255 ),\n    vec3(  56,  68, 255 ),\n    vec3(  78,  35, 192 ),\n    vec3( 255,  86,   9 ),\n    vec3( 101, 200, 232 ),\n    vec3( 128, 132, 144 ),\n    vec3(  60, 192,  72 ),\n    vec3(   0, 255,  83 ),\n    vec3( 217,  69,  69 ),\n    vec3( 255,  64,  64 ),\n    vec3( 144, 144, 144 ),\n    vec3(  32,  32, 240 ),\n    vec3( 240,  32,  32 ),\n    vec3( 240, 240,  32 ),\n    vec3( 240, 144,  32 ),\n    vec3( 240,  32, 240 ),\n    vec3(  32, 240,  32 ),\n    vec3(  40,  60, 173 ),\n    vec3( 104, 128, 255 ),\n    vec3(   0,   0, 112 ),\n    vec3( 104,  40, 170 ),\n    vec3(   0,   0,   0 )\n);\n*/",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}