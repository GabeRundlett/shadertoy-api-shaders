{
    "Shader": {
        "info": {
            "date": "1724813165",
            "description": "Turn a Mandelbrot along its main cardioid.",
            "flags": 0,
            "hasliked": 0,
            "id": "4fSBzw",
            "likes": 6,
            "name": "Cardioid Twist",
            "published": 3,
            "tags": [
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "Refurio",
            "viewed": 76
        },
        "renderpass": [
            {
                "code": "vec2 center = vec2(0.,0.);\nfloat radius = 1.5;\nfloat angle = radians(0.);\n\nconst float pi = radians(180.);\n\nfloat abs2(vec2 z) {\n  return dot(z,z);\n}\nfloat arg(vec2 z) {\n  return atan(z.y, z.x);\n}\nvec2 cmul(vec2 a, vec2 b) {\n  return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\nvec2 cdiv(vec2 a, vec2 b) {\n  return vec2(dot(a,b), a.y*b.x-a.x*b.y)/abs2(b);\n}\nvec2 cinv(vec2 b) {\n  return vec2(b.x, b.y)/abs2(b);\n}\nvec2 cexp(vec2 z) {\n  float e = exp(z[0]);\n  return vec2(e*cos(z[1]), e*sin(z[1]));\n}\nvec2 cln(vec2 z) {\n  return vec2(log(sqrt(abs2(z))), arg(z));\n}\nvec2 cpow(vec2 b, vec2 e) {\n  return cexp(cmul(e,cln(b)));\n}\nvec2 csqrt(vec2 z) {\n  return cpow(z, vec2(.5,0.));\n}\n\n// https://github.com/hughsk/glsl-hsv2rgb/blob/master/index.glsl\nvec3 hsv2rgb(in vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// coloring:\nvec4 phase(vec2 z) {\n  return hsv2rgb(vec3(arg(z)/pi, 1., 1.)).xyzz;\n}\nvec4 axies(vec2 z) {\n  float t = arg(z)/pi;\n  float a = mod(2.*t+2., 2.)-1.;\n  a = abs(2.*a)-1.;\n  a = asin(a)/pi+.5;\n  return vec4(a,a,a, 1.);\n}\nvec4 icolor(int i) {\n  float x = float(i);\n  return vec4(sin(x*100.), sin(x*200.), sin(x*300.), 0.);\n}\nvec4 black = vec4(0., 0., 0., 1.);\nvec4 white = vec4(1., 1., 1., 1.);\n\nvec2 p2c(vec2 p) {\n  vec2 wh2 = iResolution.xy/2.;\n  float pr = min(wh2.x, wh2.y);\n  vec2 c = (p - wh2)/pr;\n  vec2 r = radius * vec2(cos(angle), sin(angle));\n  return cmul(r,c) + center;\n}\n\nvec4 f(vec2 c) {\n  int n = 1000;\n  const vec2 one = vec2(1.,0.);\n  float di = 1.5*(1.+cos(iTime/3.));\n  c = cinv(csqrt(one-4.*c)) - vec2(0.,di);\n  c = 0.25*(one-cinv(cmul(c,c)));\n  vec2 z = c;\n  vec2 dz = vec2(0.,0.);\n  vec2 phi = z;\n  for(int i=0; i<n; ++i) {\n    dz = 2.*cmul(z,dz);\n    z = cmul(z,z)+c;\n    vec2 a = cdiv(z,z-c);\n    float s = pow(0.5, float(i));\n    phi = cmul(phi, cpow(a, vec2(s,0.)));\n    if(abs2(z) > 10000.) {\n      return white*clamp(abs2(z)/pow(2.,float(i)/(1.+di)),0.,1.);\n    }\n  }\n  return phase(z);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 z = p2c(fragCoord);\n  fragColor = f(z);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}