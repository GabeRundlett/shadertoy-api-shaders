{
    "Shader": {
        "info": {
            "date": "1461083706",
            "description": "Counts the number of red pixels on screen using parallel reduction. Draw with the mouse to add pixels.",
            "flags": 32,
            "hasliked": 0,
            "id": "lstXzs",
            "likes": 11,
            "name": "Parallel Reduction",
            "published": 3,
            "tags": [
                "reduction",
                "histopyramid",
                "parallel"
            ],
            "usePreview": 0,
            "username": "cornusammonis",
            "viewed": 1166
        },
        "renderpass": [
            {
                "code": "/*\n\tParallel Reduction\n\n\tBuffers A, B, and C count the number of red pixels in Buffer D by parallel reduction.\n\tWorks up to a resolution of 4096x4096. The default brush size can be \n    changed in Buffer D.\n*/\n\n\n\n/* \n\tBegin 7-seg display code by Andrew Wild\n\tSee: https://www.shadertoy.com/view/MdtSzs\n*/\n\n// Created by Andrew Wild - akohdr/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define BLK vec4(.0,.0,.0,1.)\n#define WHT vec4(1.,1.,1.,1.)\n\n// tweaked 7 seg decoder originally from dr2 @ https://www.shadertoy.com/view/MddXRl\n#define HSEG(a,b,c) (1.-smoothstep(a,b,abs(c)))\n#define SEG(q) HSEG(.13,.17,q.x)*HSEG(.5,.57,q.y)\n#define CHK b=a/2;if(b*2!=a)d+= \nfloat Seg7(vec2 q, int v)\n{\n  float d;\n  int a, b;\n  const vec2 vp = vec2 (.5,.5), \n             vm = vec2 (-.5,.5), \n             vo = vec2 (1,0);\n  if (v < 5) {\n    if (v == -1) a = 8;\n    else if (v == 0) a = 119;\n    else if (v == 1) a = 36;\n    else if (v == 2) a = 93;\n    else if (v == 3) a = 109;\n    else a = 46;\n  } else {\n    if (v == 5) a = 107;\n    else if (v == 6) a = 123;\n    else if (v == 7) a = 37;\n    else if (v == 8) a = 127;\n    else a = 111;\n  }\n  q = (q-.5) * vec2(1.7,2.3);\n  d = 0.; CHK SEG(vec2(q.yx - vo));\n  a = b;  CHK SEG(vec2(q.xy - vp));\n  a = b;  CHK SEG(vec2(q.xy - vm));\n  a = b;  CHK SEG(vec2(q.yx));\n  a = b;  CHK SEG(vec2(q.xy + vm));\n  a = b;  CHK SEG(vec2(q.xy + vp));\n  a = b;  CHK SEG(vec2(q.yx + vo));\n  return d;\n}\n\nint decDigit(lowp float v, int i) {\n    float f = float(i), \n          p1 = pow(10.,f-1.);\n    return int((mod(v,pow(10.,f))-mod(v,p1))/p1);\n}\n\nvec4 drawDigits(vec2 fragCoord, float count)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy,\n         left = vec2(-1,0),\n         home=24.*(fragCoord*vec2(-1,1))/iResolution.xy;\n    \n    vec4 col = vec4(0);\n    \n#define DIGITS(l) for(int i=1;i<=l;i++){xy+=left;col+=vec4(Seg7(xy,decDigit(v,i) ));}\n    \n    float v = count; \n    vec2 xy = home + vec2(12.,-20);\n    DIGITS(8);\n    \n    return col;\n\n}\n\n/* \n\tEnd 7-seg display code by Andrew Wild\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    float count = texture(iChannel0, vec2(0.0)).w;\n    float brush = texture(iChannel1, uv).x;\n    fragColor = vec4(brush, 0.0, 0.0, 0.0) + drawDigits(fragCoord, count);\n\n    //fragColor = texture(iChannel2, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define STARTING_MODULUS 2\n\n#define ch0 iChannel0\n#define ch1 iChannel1\n\nbool reduceHere(int n, ivec2 uv) {\n    return (uv & (ivec2(n) - 1)) == ivec2(0);\n}\n\nvec4 T(sampler2D ch, ivec2 uv) {\n\treturn clamp(uv, ivec2(0), ivec2(iResolution.xy)) == uv ? texelFetch(ch, uv, 0) : vec4(0);  \n}\n\nvec4 reduce(ivec2 uv) {\n    vec4 r = vec4(0.0);\n    for (int p = 0; p < 4; p++) {\n        int n = STARTING_MODULUS << p;\n        int m = n >> 1;\n        if (reduceHere(n, uv)) {\n            ivec2 i = ivec2(m, 0);\n            ivec2 uv_e  = uv + i.xy;\n            ivec2 uv_ne = uv + i.xx;\n            ivec2 uv_n  = uv + i.yx;\n            if (p == 0) {\n                r[p] = T(ch0, uv).x + T(ch0, uv_e).x + T(ch0, uv_ne).x + T(ch0, uv_n).x;\n            } else {\n                r[p] = T(ch1, uv)[p-1] + T(ch1, uv_e)[p-1] + T(ch1, uv_ne)[p-1] + T(ch1, uv_n)[p-1];\n            }\n        } else {\n           r[p] = 0.0; \n        }\n    }\n    return r;\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n\tO = vec4(reduce(ivec2(U)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define STARTING_MODULUS 32\n\nbool reduceHere(int mm, vec2 c) {\n\tvec2 m = floor(mod(c, float(mm)));\n    return all(equal(m, vec2(0.0)));\n}\n\nvec4 T(sampler2D ch, vec2 uv) {\n\treturn clamp(uv, 0.0, 1.0) == uv ? texture(ch, uv) : vec4(0.0);   \n}\n\nconst ivec4 wi = ivec4(1, 2, 4, 8);\n\nvec4 reduce(sampler2D ch0, sampler2D ch1, int mi, vec2 c) {\n    vec4 r = vec4(0.0);\n    for (int p = 0; p < 4; p++) {\n        // this ought to be done with bitwise ops but they are not supported here\n        float m = float(wi[p] * mi/2);\n        int n = wi[p] * mi;\n        if (reduceHere(n, c)) {\n            vec3 i = vec3(m, m, 0.0) / iResolution.xyy;\n            vec2 uv = c / iResolution.xy;\n            vec2 uv_e  = uv + i.xz;\n            vec2 uv_ne = uv + i.xy;\n            vec2 uv_n  = uv + i.zy;\n            if (p == 0) {\n                r[p] = T(ch0, uv).w + T(ch0, uv_e).w + T(ch0, uv_ne).w + T(ch0, uv_n).w;\n            } else {\n                r[p] = T(ch1, uv)[p-1] + T(ch1, uv_e)[p-1] + T(ch1, uv_ne)[p-1] + T(ch1, uv_n)[p-1];\n            }\n        } else {\n           r[p] = 0.0; \n        }\n    }\n    return r;\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n\tO = vec4(reduce(iChannel0, iChannel1, STARTING_MODULUS, U));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define STARTING_MODULUS 512\n\nbool reduceHere(int mm, vec2 c) {\n\tvec2 m = floor(mod(c, float(mm)));\n    return all(equal(m, vec2(0.0)));\n}\n\nvec4 T(sampler2D ch, vec2 uv) {\n\treturn clamp(uv, 0.0, 1.0) == uv ? texture(ch, uv) : vec4(0.0);   \n}\n\nconst ivec4 wi = ivec4(1, 2, 4, 8);\n\nvec4 reduce(sampler2D ch0, sampler2D ch1, int mi, vec2 c) {\n    vec4 r = vec4(0.0);\n    for (int p = 0; p < 4; p++) {\n        // this ought to be done with bitwise ops but they are not supported here\n        float m = float(wi[p] * mi/2);\n        int n = wi[p] * mi;\n        if (reduceHere(n, c)) {\n            vec3 i = vec3(m, m, 0.0) / iResolution.xyy;\n            vec2 uv = c / iResolution.xy;\n            vec2 uv_e  = uv + i.xz;\n            vec2 uv_ne = uv + i.xy;\n            vec2 uv_n  = uv + i.zy;\n            if (p == 0) {\n                r[p] = T(ch0, uv).w + T(ch0, uv_e).w + T(ch0, uv_ne).w + T(ch0, uv_n).w;\n            } else {\n                r[p] = T(ch1, uv)[p-1] + T(ch1, uv_e)[p-1] + T(ch1, uv_ne)[p-1] + T(ch1, uv_n)[p-1];\n            }\n        } else {\n           r[p] = 0.0; \n        }\n    }\n    return r;\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n\tO = vec4(reduce(iChannel0, iChannel1, STARTING_MODULUS, U));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define BRUSH_SIZE 10.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 brush = vec4(0.0);\n    if (iMouse.z > 0.0) {\n    \tfloat d = length(floor(fragCoord.xy) - floor(iMouse.xy));\n        float m = d < BRUSH_SIZE ? 1.0 : 0.0;\n        brush += vec4(m);\n    }\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    if (iFrame < 10) {\n        fragColor = length(fragCoord.xy - iResolution.xy/2.0) < 10.0 ? vec4(1.0) : vec4(0.0);\n    } else {\n    \tfragColor = clamp(texture(iChannel0, uv) + brush, 0.0, 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}