{
    "Shader": {
        "info": {
            "date": "1589637601",
            "description": "some try with Truchet ",
            "flags": 0,
            "hasliked": 0,
            "id": "3s2fR1",
            "likes": 6,
            "name": "Truchet experimentations",
            "published": 3,
            "tags": [
                "2d",
                "truchet",
                "layers"
            ],
            "usePreview": 0,
            "username": "ManuManu",
            "viewed": 436
        },
        "renderpass": [
            {
                "code": "\nfloat hash21(vec2 p)\n{\n    float v = fract(sin( p.x*1234.68 + p.y * 98765.543)*753.159);\n    return v;\n}\n\nvec3 palette( float t, vec3 a, vec3 b, vec3 c, vec3 d )\n{\n    return a + b * cos( 2.*3.14159 * ( c * t + d) );\n}\n\n// Different tries with palettes :\nvec3 MyPalette1( float t )\n{\n    return palette( t, vec3(.8, .5, .4), vec3(.2,.4,.2), vec3( .5), vec3( 0., .25, .25));\n}\nvec3 MyPalette2( float t )\n{\n    return palette( t, vec3(.5, .5, 5), vec3(.5, .5, .5), vec3( 1., 0.7,0.4), vec3( 0., .15, .2));\n}\nvec3 MyPalette3( float t )\n{\n    return palette( t, vec3(.5), vec3(.5), vec3( 1.), vec3( 0.3, .2, .2));\n}\nvec3 MyPalette4( float t )\n{\n    return palette( t, vec3(.5), vec3(.5), vec3( 1.,1.,0.5), vec3( 0.8, .9, .3));\n}\nvec3 MyPalette5( float t )\n{\n    return palette( t, vec3(.8, .5, .4), vec3(.2), vec3( .5,.5,0.5), vec3( 0., .9, .3));\n}\n\n\nvec3 MyPalette( float t )\n{\n    return MyPalette3(t);\n}\n\nfloat full_width = 0.09;\nfloat fade_width = 0.1;\n\nvec3 insideBoxDraw2( vec2 uv )\n{\n    vec3 col;\n    float d = min( abs(uv.x), abs(uv.y));\n    float val = smoothstep( fade_width, 0.,  d - full_width);\n    col = vec3(val);\n    return col;\n}\nvec3 insideBoxDraw3( vec2 uv )\n{\n    vec3 col;\n    float d = abs(abs(uv.x + uv.y) -.5);\n    float val = smoothstep( fade_width, 0.,  d - full_width);\n    col = vec3(val);\n    return col;\n}\n\nvec3 circle( vec2 uv, vec2 center, float rad, float width, vec3 color )\n{\n    float d = length(uv - center );\n    float val = smoothstep(  fade_width, 0., abs( d-rad) - full_width );\n    return val * color;\n}\n\nvec3 insideBoxDraw( vec2 uv )\n{\n    vec3 col = vec3(0.);\n    \n    vec2 center = vec2(.5,.5);\n    vec2 center2 = vec2(-.5,-.5);\n    \n    col  = circle( uv, center, .5, 0.05, vec3( 1.,1.,1.));\n    col += circle( uv, center2, .5, 0.05, vec3( 1.,1.,1.));\n    return col;\n}\n\nfloat truchet(vec2 p )\n{\n    float returnVal = 0.;\n    \n    vec2 boxCoord = fract(p)-.5;\n    vec2 id = floor(p);\n    \n    \n    //col = vec3( 1.-length(boxCoord) );\n    \n    float rnd = hash21( id );\n    if ( rnd < .5)\n        boxCoord.x = -boxCoord.x;\n    \n    float rnd2 = mod(rnd, .5 ) * 2.; \n    if ( rnd2 < .33)\n\t    returnVal = insideBoxDraw2(boxCoord).x;\n    else\n        if ( rnd2 < .66)\n\t\t\treturnVal = insideBoxDraw(boxCoord).x;\n        else\n            returnVal = insideBoxDraw3(boxCoord).x;\n        \n     \n    return returnVal;    \n    /*\n    if ( boxCoord.x > 0.48 || boxCoord.y > 0.48 )\n        col = vec3(1., 0.,0.);\n    //*/\n}\n\nmat2 rot( float a )\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2( c, s, -s, c);\n}\nvec2 moveUV( vec2 uv, float angle, float zoom, vec2 dep )\n{\n    return rot( angle ) * ( ( uv * zoom) + dep );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * 2. - 1.;\n\tuv.x *= iResolution.x/iResolution.y;\n\n    vec2 realUv = uv;\n\tvec3 col = length(uv*.3) *vec3(0.3,0.3,0.8);\n\n    // general camera move :\n    uv = moveUV( uv, sin(iTime*.2), 1.1+.2*sin(iTime*.51), vec2(cos(iTime*.1), sin(iTime*.07)));\n    \n    float nbLayers = 10.;\n    for( float i = 0.; i < nbLayers; i+= 1.)\n    {\n        vec2 coord = moveUV( uv, iTime/(.3*i+1.), (nbLayers-i)*2., (nbLayers-i)*vec2(cos(iTime*5./(i+1.)), sin(iTime*3./(i+1.))) );\n        float truchetVal = truchet(coord);\n        \n        \n        float timeFactorPal = .5;\n        vec3 paletteColor1= mix( MyPalette1( length(coord )*2.), MyPalette5( length(coord )*.5), .5+.5*sin(iTime*timeFactorPal)) ;\n        vec3 paletteColor2 = mix( MyPalette1( length(coord )*2.), MyPalette3( length(coord )*3.), .5+.5*sin(iTime*timeFactorPal)) ;\n        \n        //vec3 paletteColor = mix( paletteColor1, paletteColor2, i/nbLayers);\n        vec3 paletteColor = paletteColor1;\n    \n        vec3 layerCol = paletteColor * ( i) / nbLayers;\n        col = mix( col,  layerCol, truchetVal);\n    }\n    \n    // Output to screen\n    //vignetting :\n    col*=smoothstep(2.5,1.,length(realUv));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}