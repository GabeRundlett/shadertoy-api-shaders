{
    "Shader": {
        "info": {
            "date": "1609750145",
            "description": "普通的ray march 球体，附加一点点改变",
            "flags": 0,
            "hasliked": 0,
            "id": "tltczl",
            "likes": 0,
            "name": "RayMarching Sphere 球体",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "hanker",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define SURFACE_DIST  .01\n#define MAX_DIST  100.\nfloat GetDist(vec3 p){\n    vec4 sphere = vec4(0.,1.5,6.,1.5);\n    float dS = length(p - sphere.xyz) - sphere.w;\n    float dG = p.y;\n    return min(dS,dG);\n}\nfloat RayMartch(vec3 ro,vec3 rd){\n    float d = 0.;\n    vec3 p = ro;\n    for(int i = 0; i < MAX_STEPS; i++){\n        p = ro + rd * d;\n        float dS = GetDist(p);\n        d += dS;\n        if(dS < SURFACE_DIST || d > MAX_DIST)break;\n    }\n    return d;\n}\nvec3 GetNormal(vec3 p){\n    float d = GetDist(p);\n    vec2 e = vec2(.001,0.);\n    vec3 n = d - vec3(\n        GetDist(p - e.xyy),GetDist(p - e.yxy),GetDist(p - e.yyx)\n    );\n    return normalize(n);\n}\nfloat GetLight(vec3 p){\n    vec3 lightPos = vec3(0.,8.,1.);\n    lightPos.xz += vec2(sin(iTime),cos(iTime));\n    vec3 ld =  normalize(lightPos - p);\n    vec3 normal = GetNormal(p);\n    float dif = clamp(dot(normal,ld),1.,1.);\n    \n    //shadow\n    float d = RayMartch(p + normal * SURFACE_DIST * 2.,ld);\n    if(d < length(lightPos - p))dif *= .5;\n    return dif;\n}\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    uv.y  += 1.;\n    vec3 ro = vec3(0.,1.,-3.);\n    vec3 rd = normalize(vec3(uv.x,uv.y,0.) - ro);\n    float d = RayMartch(ro,rd);\n\n    vec3 p = ro + rd * d;\n\n    float diffuse = GetLight(p);\n    vec3 col = vec3(diffuse);\n\n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}