{
    "Shader": {
        "info": {
            "date": "1682140737",
            "description": "QwQ",
            "flags": 0,
            "hasliked": 0,
            "id": "dttGRM",
            "likes": 3,
            "name": "QwQ",
            "published": 3,
            "tags": [
                "cineshader"
            ],
            "usePreview": 1,
            "username": "chenxianming",
            "viewed": 1721
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926\n#define showPixel 0\n\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nmat2 rotation(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat rasterize( vec2 p1, vec2 p2, in vec2 uv ){\n    return step( length( uv - ( p1 + p2 ) / 2. ) - distance( p1, p2) * .5, 0. );\n}\n\nfloat mExp( vec2 p1, vec2 p2, in vec2 uv ){\n    return ( uv.y - p2.y ) * ( p1.x - p2.x ) -( ( uv.x - p2.x ) * ( p1.y - p2.y ) );\n}\n\nfloat drawLine( vec2 p1, vec2 p2, in vec2 uv ){\n    \n    float p = mExp( p1, p2, uv );\n\n    return p;\n}\n\nfloat calcTriangle( vec3 pos ){\n    \n    vec2 uv = pos.xy;\n    \n    float p = drawLine( vec2( .0, .2 ), vec2( -.25, -.2 ), uv );\n\n    p = max( p, -drawLine( vec2( .0, .2 ), vec2( .25, -.2 ), uv ) );\n    \n    p = max( p, drawLine( vec2( -.25, -.2 ), vec2( .2, -.2 ), uv ) );\n    \n    uv *= 2.5;\n    \n    float t2 = drawLine( vec2( .0, .2 ), vec2( -.35, -.35 ), uv );\n    t2 = max( t2, -drawLine( vec2( .0, .2 ), vec2( .3, -.3 ), uv ) );\n    t2 = max( t2, drawLine( vec2( -.35, -.35 ), vec2( .2, -.35 ), uv ) );\n    \n    p = max( p, -t2 );\n    \n    return max( p, abs( pos.z ) - .02 );\n}\n\nfloat calcSquare( vec3 pos ){\n    vec2 uv = pos.xy;\n    \n    float p = abs( uv.x ) - .2;\n    \n    p = min( -p, -( abs( uv.y ) - .2 ) );\n    \n    p *= -1.;\n    \n    uv *= 1.5;\n    \n    float s2 = abs( uv.x ) - .2;\n    s2 = min( -s2, -( abs( uv.y ) - .2 ) );\n    s2 *= -1.;\n    \n    p = max( p, -s2 );\n    \n    return max( p, abs( pos.z ) - .02 );\n}\n\nfloat calcCross( vec3 pos ){\n    vec2 uv = pos.xy;\n    \n    uv *= rotation( PI * .25 );\n    \n    float p = drawLine( vec2( -.03, .2 ), vec2( .03, .2 ), uv );\n\n    p = max( -p, drawLine( vec2( -.03, .2 ), vec2( -.03, -.2 ), uv ) );\n    \n    p = max( p, -drawLine( vec2( .03, .2 ), vec2( .03, -.2 ), uv ) );\n    \n    p = min( -p, -drawLine( vec2( -.03, -.2 ), vec2( .03, -.2 ), uv ) );\n    \n    p *= -1.;\n    \n    uv *= rotation( PI * .5 );\n    \n    float c2 = drawLine( vec2( -.03, .2 ), vec2( .03, .2 ), uv );\n\n    c2 = max( -c2, drawLine( vec2( -.03, .2 ), vec2( -.03, -.2 ), uv ) );\n    \n    c2 = max( c2, -drawLine( vec2( .03, .2 ), vec2( .03, -.2 ), uv ) );\n    \n    c2 = min( -c2, -drawLine( vec2( -.03, -.2 ), vec2( .03, -.2 ), uv ) );\n    \n    c2 *= -1.;\n    \n    p = min( p, c2 );\n    \n    return max( p, abs( pos.z ) - .02 );\n}\n\nfloat calcCircle( vec3 pos ){\n    vec2 uv = pos.xy;\n    \n    float p = length( uv ) - .2;\n    \n    p = max( p, -( length( uv ) - .125 ) );\n    \n    return max( p, abs( pos.z ) - .02 );\n}\n\nfloat gi = 1.;\nfloat rand( in float ri ){\n    return (fract(ri * 412.531 + 0.513 ) - 0.5) + sin( ri );\n}\n\nfloat calcShape( vec3 p ){\n    float d = 5.;\n\n    vec3 cp, tp, sp, cip;\n    \n    float time = iMouse.z > .01 ? iTime * 1. : iTime;\n    \n    cp = p;\n    tp = p;\n    sp = p;\n    cip = p;\n    \n    tp.xz *= rotation( rand( 1. ) * time );\n    tp.yz *= rotation( rand( 2. ) * time * .1 );\n    tp.x += rand( 1. ) * cos( time ) * 3.;\n    tp.y += rand( 2. ) * sin( time );\n    tp.z += rand( 3. ) * sin( time );\n    \n    \n    sp.xz *= rotation( rand( 2. ) * time );\n    sp.yz *= rotation( rand( 3. ) * time * .1 );\n    sp.x += rand( 3. ) * sin( time ) * 3.;\n    sp.y += rand( 4. ) * cos( time );\n    sp.z += rand( 5. ) * sin( time );\n    \n\n    cp.xz *= rotation( rand( 3. ) * time );\n    cp.yz *= rotation( rand( 4. ) * time * .1 );\n    cp.x += rand( 7. ) * cos( time ) * 3.;\n    cp.y += rand( 8. ) * sin( time );\n    cp.z += rand( 9. ) * cos( time );\n    \n    \n    cip.xz *= rotation( rand( 4. ) * time );\n    cip.yz *= rotation( rand( 5. ) * time * .1 );\n    cip.x += rand( 10. ) * cos( time ) * 3.;\n    cip.y += rand( 11. ) * cos( time );\n    cip.z += rand( 12. ) * sin( time );\n    \n    \n    d = min( d, calcTriangle( tp ) );\n    d = min( d, calcSquare( sp ) );\n    d = min( d, calcCross( cp ) );\n    d = min( d, calcCircle( cip ) );\n    \n    return d;\n}\n\n\nvec2 repetition( inout vec2 p, vec2 size)\n{\n\n    vec2 h = size * .5;\n    vec2 cell = floor((p + h) / size);\n\n    p = mod(p + h, size) - h;\n    \n    return cell;\n}\n\nfloat calcNum1( in vec2 uv ){\n\n    float p = 0.;\n    \n    uv *= .8;\n    \n    p = drawLine( vec2( -.05, .2 ), vec2( -.05, -.2 ), uv );\n    p = max( p, -drawLine( vec2( .05, .2 ), vec2( .05, -.2 ), uv ) );\n    p = max( p, drawLine( vec2( -.05, -.2 ), vec2( .05, -.2 ), uv ) );\n    p = max( p, -drawLine( vec2( -.1, .2 ), vec2( .05, .2 ), uv ) );\n    \n    float p2 = 0.;\n    p2 = drawLine( vec2( -.1, .2 ), vec2( .05, .3 ), uv );\n    p2 = max( -p2, drawLine( vec2( .05, .2 ), vec2( .05, .3 ), uv ) );\n    p2 = min( -p2, -drawLine( vec2( -.1, .2 ), vec2( .05, .2 ), uv ) );\n    p = min( p, -p2 );\n    \n    \n    return p;\n}\n\nfloat calcNum2( in vec2 uv ){\n    float p = 0.;\n    uv.x += .1;\n    uv.y += .1;\n    uv *= .9;\n    \n    p = 0.36 * pow( uv.x, 2. ) + 0.25 * pow( uv.y, 2. ) + -0.60 * uv.x * uv.y + 0.16 * uv.x + -0.02 * uv.y + -0.02;\n    p = max( p, -( 0.25 * pow( uv.x, 2. ) + 0.16 * pow( uv.y, 2. ) + -0.40 * uv.x * uv.y + 0.08 * uv.x + -0.04 * uv.y + 0. ) );\n    \n    p = min( -p, -drawLine( vec2( -.05, .3 ), vec2( -.05, .2 ), uv ) );\n    p = min( p, -drawLine( vec2( .05, -.1 ), vec2( .15, -.1 ), uv ) ) * -1.;\n    \n    float p2 = 0.;\n    \n    p2 = drawLine( vec2( .05, -.1 ), vec2( .15, -.1 ), uv );\n    p2 = max( -p2, drawLine( vec2( -.05, -.15 ), vec2( .15, -.15 ), uv ) );\n    p2 = max( p2, -drawLine( vec2( -.05, -.15 ), vec2( -.05, -.1 ), uv ) );\n    p2 = min( -p2, -drawLine( vec2( .15, -.15 ), vec2( .15, -.1 ), uv ) );\n    \n    p = min( p, -p2 );\n    \n    return p;\n}\n\nfloat calcNum3( in vec2 uv ){\n    float p = 0.;\n    p = 0.12 * pow( uv.x, 2. ) + 0.25 * pow( uv.y, 2. ) + -0.35 * uv.x * uv.y + 0.10 * uv.x + -0.07 * uv.y + 0.;\n    uv.x += .25;\n    uv.y += .2;\n    p = max( p, -( 0.09 * pow( uv.x, 2. ) + 0.12 * pow( uv.y, 2. ) + -0.21 * uv.x * uv.y + 0.05 * uv.x + -0.04 * uv.y + 0. ) );\n    uv.x -= .25;\n    uv.y -= .2;\n    \n    p = -min( -p, -drawLine( vec2( -.2, .3 ), vec2( -.15, .2 ), uv ) );\n    \n    float p2 = 0.;\n    uv.x += .07;\n    \n    uv.y += .04;\n    \n    p2 = 0.01 * pow( uv.x, 2. ) + 0.25 * pow( uv.y, 2. ) + 0.10 * uv.x * uv.y + 0.06 * uv.x + 0.03 * uv.y + -0.01;\n    uv.x -= .05;\n    \n    p2 = max( p2, -( 0.02 * pow( uv.x, 2. ) + 0.13 * pow( uv.y, 2. ) + 0.11 * uv.x * uv.y + 0.03 * uv.x + 0.02 * uv.y + 0. ) );\n    \n    p2 = -min( -p2, -drawLine( vec2( -.22, .3 ), vec2( -.2, .2 ), uv ) );\n    \n    p2 = max( p2, drawLine( vec2( .2, .3 ), vec2( .15, .25 ), uv ) );\n    \n\n    p = min( p, p2 );\n    \n    return p;\n}\n\nfloat calcNum4( in vec2 uv ){\n    float p = 0.;\n\n    uv /= 1.5;\n\n    p = drawLine( vec2( .0, .0 ), vec2( .0, -.2 ), uv );\n    \n    p = max( p, -drawLine( vec2( .05, .3 ), vec2( .05, -.2 ), uv ) );\n    \n    \n    float p2 = 0.;\n    \n    p2 = drawLine( vec2( -.2, .0 ), vec2( .15, .0 ), uv );\n\n    p2 = max( p2, drawLine( vec2( .15, .1 ), vec2( .05, .1 ), uv ) );\n    \n    p = min( p, p2 );\n    \n    float p3 = drawLine( vec2( .0, .0 ), vec2( .0, -.2 ), uv );\n    p3 = -min( p3, drawLine( vec2( .15, .1 ), vec2( .05, .1 ), uv ) );\n    \n    p = min( p, p3 );\n    p = max( p, -drawLine( vec2( -.2, 0. ), vec2( .05, .3 ), uv ) );\n    p = max( p, drawLine( vec2( -.0, -.2 ), vec2( .05, -.2 ), uv ) );\n    p = max( p, -drawLine( vec2( .15, .1 ), vec2( .15, .0 ), uv ) );\n    \n    uv.x -= .02;\n    uv.y += .02;\n    \n    float p4 = drawLine( vec2( -.1, .1 ), vec2( .001, .2 ), uv );\n    p4 = -min( p4, -drawLine( vec2( -.05, .1 ), vec2( .0, .1 ), uv ) );\n    p4 = max( p4, -drawLine( vec2( -.0, .15 ), vec2( .0, .1 ), uv ) );\n    \n    p = max( p, -p4 );\n    \n    return p;\n}\n\nfloat calcNum5( in vec2 uv ){\n    float p = 0.;\n    \n    uv *= 1.1;\n    \n    p = 0.04 * pow( uv.x, 2. ) + 0.2025 * pow( uv.y, 2. ) + -0.18 * uv.x * uv.y + 0.017000000000000005 * uv.x + 0.05975 * uv.y + -0.0030937499999999997;\n    \n    p = max( p, -( 0.0225 * pow( uv.x, 2. ) + 0.22562500000000002 * pow( uv.y, 2. ) + -0.1425 * uv.x * uv.y + 0.00675 * uv.x + 0.052125000000000005 * uv.y + 0.00050625 ) );\n    \n    p = max( p, -drawLine( vec2( -.15, -.0 ), vec2( -.1, .05 ), uv ) );\n    \n    p = max( p, -drawLine( vec2( -.0, -.5 ), vec2( -.2, -.0 ), uv ) );\n    \n    float p2 = 0.;\n    \n    p2 = 0.03999999999999999 * pow( uv.x, 2. ) + 0.010000000000000002 * pow( uv.y, 2. ) + 0.04000000000000002 * uv.x * uv.y + 0.02600000000000001 * uv.x + -0.019000000000000003 * uv.y + -0.006974999999999997;\n    \n    p2 = max( p2, -( 0.02249999999999997 * pow( uv.x, 2. ) + 0.0006250000000000023 * pow( uv.y, 2. ) + -0.0075 * uv.x * uv.y + 0.0045000000000000005 * uv.x + -0.006749999999999999 * uv.y + -0.0015749999999999998 ) );\n    \n    p2 = max( p2, -drawLine( vec2( -.1, -.0 ), vec2( -.1, .05 ), uv ) );\n    \n    p2 = max( p2, -drawLine( vec2( .15, .0 ), vec2( .2, -.1 ), uv ) );\n    \n    // p = min( p, p2 );\n    \n    float p3 = 0.;\n    \n    p3 = drawLine( vec2( -.15, .3 ), vec2( -.15, -.0 ), uv );\n    \n    p3 = max( p3, -( drawLine( vec2( -.1, .25 ), vec2( -.1, .05 ), uv ) ) );\n    \n    p3 = max( p3, -drawLine( vec2( -.1, .05 ), vec2( -.15, -.0 ), uv ) );\n    \n    p3 = max( p3, -drawLine( vec2( -.15, .3 ), vec2( .2, .3 ), uv ) );\n    \n    p = min( p, p3 );\n    \n    float p4 = 0.;\n    \n    p4 = drawLine( vec2( -.1, .25 ), vec2( .2, .25 ), uv );\n    p4 = max( p4, -drawLine( vec2( -.15, .3 ), vec2( .2, .3 ), uv ) );\n    \n    p4 = max( p4, drawLine( vec2( -.15, .3 ), vec2( -.15, -.0 ), uv ) );\n    p4 = -min( -p4, -drawLine( vec2( .2, .25 ), vec2( .2, .3 ), uv ) );\n    \n    p = min( p, p4 );\n    \n    return p;\n}\n\nfloat calcNum6( in vec2 uv ){\n\n    float p = 0.;\n    \n    p = 0.040000000000000056 * pow( uv.x, 2. ) + 0.09000000000000002 * pow( uv.y, 2. ) + 0.12000000000000001 * uv.x * uv.y + -0.076 * uv.x + 0.014000000000000002 * uv.y + -0.008700000000000001;\n    \n    p = max( p, -( 0.06250000000000006 * pow( uv.x, 2. ) + 0.1089 * pow( uv.y, 2. ) + 0.16500000000000004 * uv.x * uv.y + -0.0758 * uv.x + -0.0002000000000000014 * uv.y + -0.002980000000000001 ) );\n    \n    p = -min( -p, -( drawLine( vec2( .15, .25 ), vec2( .1, .3 ), uv ) ) );\n    \n    p = max( p, ( drawLine( vec2( .1, .0 ), vec2( .2, .1 ), uv ) ) );\n    \n    float p2 = 0.;\n    \n    p2 = 0.2500000000000001 * pow( uv.x, 2. ) + 0.04000000000000001 * pow( uv.y, 2. ) + -0.20000000000000007 * uv.x * uv.y + -0.07200000000000002 * uv.x + -0.029 * uv.y + -0.011000000000000006;\n    \n    p2 = max( p2, -( 0.16000000000000003 * pow( uv.x, 2. ) + 0.006400000000000003 * pow( uv.y, 2. ) + -0.06399999999999997 * uv.x * uv.y + -0.03519999999999999 * uv.x + -0.012320000000000003 * uv.y + -0.0019360000000000002 ) );\n    \n    p2 = max( p2, -( drawLine( vec2( .1, .05 ), vec2( .2, .1 ), uv ) ) );\n    \n    p2 = max( p2, -( drawLine( vec2( .2, -.1 ), vec2( .2, -.3 ), uv ) ) );\n    \n    p = min( p, p2 );\n    \n    float p3 = 0.;\n    \n    p3 = 0.0009000000000000006 * pow( uv.x, 2. ) + 0.0625 * pow( uv.y, 2. ) + -0.014999999999999972 * uv.x * uv.y + 0.01643999999999999 * uv.x + 0.00820000000000001 * uv.y + -0.004783999999999998;\n    \n    p3 = -min( -p3, -( 0.052899999999999996 * pow( uv.x, 2. ) + 0.008099999999999996 * pow( uv.y, 2. ) + -0.04139999999999999 * uv.x * uv.y + -0.013888 * uv.x + 0.021296 * uv.y + -0.00064016 ) );\n    \n    p3 = max( p3, -( 0.12250000000000003 * pow( uv.x, 2. ) + 0.1764 * pow( uv.y, 2. ) + -0.294 * uv.x * uv.y + -0.0392 * uv.x + 0.07447999999999999 * uv.y + 0.002744 ) );\n    \n    p3 = -min( -p3, -( drawLine( vec2( .0, -.1 ), vec2( .2, -.3 ), uv ) ) );\n    \n    p = min( p, p3 );\n    \n    return p;\n}\n\nfloat calcNum7( in vec2 uv ){\n    float p = 0.;\n    \n    p = drawLine( vec2( -.05, .2 ), vec2( -.15, -.3 ), uv );\n    \n    p = max( p, -drawLine( vec2( .05, .2 ), vec2( -.05, -.3 ), uv ) );\n    \n    p = max( p, -drawLine( vec2( -.05, .2 ), vec2( .05, .2 ), uv ) );\n    \n    p = -min( -p, -drawLine( vec2( -.15, -.3 ), vec2( -.05, -.3 ), uv ) );\n    \n    float p2 = 0.;\n    \n    p2 = drawLine( vec2( -.2, .3 ), vec2( .05, .3 ), uv );\n    \n    p2 = -min( p2, -drawLine( vec2( -.2, .2 ), vec2( .05, .2 ), uv ) );\n    \n    p2 = max( p2, -drawLine( vec2( -.2, .2 ), vec2( -.2, .3 ), uv ) );\n    \n    p2 = -min( -p2, -drawLine( vec2( .05, .2 ), vec2( .05, .3 ), uv ) );\n    \n    p = min( p, p2 );\n    \n    return p;\n}\n\nfloat calcNum8( in vec2 uv ){\n    float p = 0.;\n    \n    uv.y *= 1.2;\n    \n    p = length( uv+vec2( 0., -.2 ) ) - .2;\n    \n    p = max( p, -( length( uv+vec2( 0., -.2 ) ) - .1 ) );\n    \n    float p2 = 0.;\n    \n    p2 = length( uv+vec2( 0., .17 ) ) - .2;\n    \n    p2 = max( p2, -( length( uv+vec2( 0., .17 ) ) - .1 ) );\n    \n    p = min( p, p2 );\n    \n    return p;\n}\n\nfloat calcNum9( in vec2 uv ){\n\n    float p = 0.;\n    \n    uv *= rotation( PI );\n    \n    p = 0.040000000000000056 * pow( uv.x, 2. ) + 0.09000000000000002 * pow( uv.y, 2. ) + 0.12000000000000001 * uv.x * uv.y + -0.076 * uv.x + 0.014000000000000002 * uv.y + -0.008700000000000001;\n    \n    p = max( p, -( 0.06250000000000006 * pow( uv.x, 2. ) + 0.1089 * pow( uv.y, 2. ) + 0.16500000000000004 * uv.x * uv.y + -0.0758 * uv.x + -0.0002000000000000014 * uv.y + -0.002980000000000001 ) );\n    \n    p = -min( -p, -( drawLine( vec2( .15, .25 ), vec2( .1, .3 ), uv ) ) );\n    \n    p = max( p, ( drawLine( vec2( .1, .0 ), vec2( .2, .1 ), uv ) ) );\n    \n    float p2 = 0.;\n    \n    p2 = 0.2500000000000001 * pow( uv.x, 2. ) + 0.04000000000000001 * pow( uv.y, 2. ) + -0.20000000000000007 * uv.x * uv.y + -0.07200000000000002 * uv.x + -0.029 * uv.y + -0.011000000000000006;\n    \n    p2 = max( p2, -( 0.16000000000000003 * pow( uv.x, 2. ) + 0.006400000000000003 * pow( uv.y, 2. ) + -0.06399999999999997 * uv.x * uv.y + -0.03519999999999999 * uv.x + -0.012320000000000003 * uv.y + -0.0019360000000000002 ) );\n    \n    p2 = max( p2, -( drawLine( vec2( .1, .05 ), vec2( .2, .1 ), uv ) ) );\n    \n    p2 = max( p2, -( drawLine( vec2( .2, -.1 ), vec2( .2, -.3 ), uv ) ) );\n    \n    p = min( p, p2 );\n    \n    float p3 = 0.;\n    \n    p3 = 0.0009000000000000006 * pow( uv.x, 2. ) + 0.0625 * pow( uv.y, 2. ) + -0.014999999999999972 * uv.x * uv.y + 0.01643999999999999 * uv.x + 0.00820000000000001 * uv.y + -0.004783999999999998;\n    \n    p3 = -min( -p3, -( 0.052899999999999996 * pow( uv.x, 2. ) + 0.008099999999999996 * pow( uv.y, 2. ) + -0.04139999999999999 * uv.x * uv.y + -0.013888 * uv.x + 0.021296 * uv.y + -0.00064016 ) );\n    \n    p3 = max( p3, -( 0.12250000000000003 * pow( uv.x, 2. ) + 0.1764 * pow( uv.y, 2. ) + -0.294 * uv.x * uv.y + -0.0392 * uv.x + 0.07447999999999999 * uv.y + 0.002744 ) );\n    \n    p3 = -min( -p3, -( drawLine( vec2( .0, -.1 ), vec2( .2, -.3 ), uv ) ) );\n    \n    p = min( p, p3 );\n    \n    return p;\n}\n\nfloat calcNum0( in vec2 uv ){\n    float p = 0.;\n    \n    uv.x *= 1.2;\n    \n    p = length( uv+vec2( 0., 0. ) ) - .3;\n    \n    p = max( p, -( length( uv+vec2( 0., 0. ) ) - .2 ) );\n    \n    uv.x /= 1.2;\n    \n    uv *= rotation( PI * -.15 );\n    \n    float p2 = abs( uv.x ) - .035;\n        \n    p2 = -min( -p2, -( abs( uv.y ) - .2 ) );\n\n    p = min( p, p2 );\n\n    return p;\n}\n\nfloat Numbers[10];\n\nvoid initNumb( vec2 p ){\n    Numbers[0] = calcNum0( p );\n    Numbers[1] = calcNum1( p );\n    Numbers[2] = calcNum2( p );\n    Numbers[3] = calcNum3( p );\n    Numbers[4] = calcNum4( p );\n    Numbers[5] = calcNum5( p );\n    Numbers[6] = calcNum6( p );\n    Numbers[7] = calcNum7( p );\n    Numbers[8] = calcNum8( p );\n    Numbers[9] = calcNum9( p );\n}\n\nfloat calcDot( vec3 pos ){\n    vec3 p = pos;\n    \n    float time = iMouse.z > .01 ? iTime * 3. : iTime;\n    \n    vec2 cell = repetition( p.xy, vec2( .05 ) );\n\n    float s = hash12( cell * 2.05 ) * 3.;\n    \n    p.x += cos( time * s ) * .008;\n    p.y += sin( time * s ) * .008;\n\n    int hh = int( iDate.w / 60. / 60.) % 100;\n    int mm = int( iDate.w / 60.) % 100;\n    \n    float px = 5.;\n    \n    initNumb( cell.xy * .05 + vec2( -1.6, 0. ) );\n    \n    px = min( px, Numbers[ int( ( int( iDate.a ) % 10 ) ) ] );\n\n    initNumb( cell.xy * .05 + vec2( -1.0, 0. ) );\n    \n    px = min( px, Numbers[ int( ( int( iDate.a / 10. ) % 6 ) ) ] );\n\n    initNumb( cell.xy * .05 + vec2( -.2, 0. ) );\n    \n    px = min( px, Numbers[ int( ( mm % 10 ) ) ] );\n\n    initNumb( cell.xy * .05 + vec2( .4, 0. ) );\n    \n    px = min( px, Numbers[ ( int( iDate.a / 10. / 60. ) % 6 ) ] );\n    \n    initNumb( cell.xy * .05 + vec2( 1.25, 0. ) );\n    \n    px = min( px, Numbers[ ( int( hh % 10 ) ) ] );\n    \n    initNumb( cell.xy * .05 + vec2( 1.8, 0. ) );\n    \n    px = min( px, Numbers[ ( int( iDate.a / 10. / 60. / 60. ) % 6 ) ] );\n    \n    if( showPixel != 0 ){\n        return max( px, abs( pos.z ) - .02 );\n    }\n    \n\n    if( distance( step( px, 0. ), p.x ) > .1 ){\n        return length( p + vec3( 0., 0., 0. ) ) - ( ( .015 - ( s * .005 ) ) ) * 1.; // ( 1. - abs( fract( iTime ) - .5 ) * 2. )\n    }\n    \n\n    return 5.;\n}\n\nfloat calcTime( vec3 p ){\n    float d = 3.;\n    \n    vec3 pos = p;\n    \n    pos.x -= .35;\n    pos.y -= .1;\n    float dott = length( pos ) - .02;\n    d = min( d, dott );\n    pos = p;\n    \n    pos.x -= .35;\n    pos.y += .1;\n    dott = length( pos ) - .02;\n    d = min( d, dott );\n    pos = p;\n    \n    pos.x += .5;\n    pos.y += .1;\n    dott = length( pos ) - .02;\n    d = min( d, dott );\n    pos = p;\n    \n    pos.x += .5;\n    pos.y -= .1;\n    dott = length( pos ) - .02;\n    d = min( d, dott );\n    pos = p;\n    \n    \n    pos.xy *= 1.7;\n    \n\n    d = min( d, calcDot( pos ) );\n\n    return d;\n}\n\nfloat map(vec3 p)\n{\n    float d = 2.0;\n    \n    d = min( d, calcShape( p ) );\n    d = min( d, calcTime( p ) );\n\n\n    // d = min( d, opSmoothUnion( calcDot( p ), calcDotN( p ), .999999 ) );\n\n    return d;\n}\n\nvec3 calcNormal( in vec3 p )\n{\n    const float h = 1e-5; // or some other value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n    vec2 uv = fragCoord/iResolution.xy;\n    // Time varying pixel color\n    \n    // screen size is 6m x 6m\n    vec3 rayOri = vec3((uv - 0.5) * vec2(iResolution.x/iResolution.y, 1.0) * 2.3, 1.5);\n    vec3 rayDir = vec3(0.0, 0.0, -1.0);\n    \n    float depth = 0.0;\n    vec3 p;\n    \n    for(int i = 0; i < 128; i++) {\n        p = rayOri + rayDir * depth;\n        float dist = map(p);\n        depth += dist;\n        if (dist < 1e-6) {\n            break;\n        }\n    }\n    \n    depth = min(6.0, depth);\n    vec3 n = calcNormal(p);\n    float b = max(0.0, dot(n, vec3(0.577)));\n\n    \n    vec3 col = (0.5 + 0.5 * cos((b + iTime * 3.0) + uv.xyx * 2.0 + vec3(0,2,4))) * (0.85 + b * 0.35);\n    col *= exp( -depth * 0.15 );\n    \n    if( ( map( p ) == calcTime( p ) ) ){\n        col = mix( vec3( 1. ), col, .1 );\n    }\n    \n    // maximum thickness is 2m in alpha channel\n    fragColor = vec4(col, 1.0 - (depth - 0.5) / 2.0);\n}\n\n/** SHADERDATA\n{\n    \"title\": \"My Shader 0\",\n    \"description\": \"Lorem ipsum dolor\",\n    \"model\": \"person\"\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}