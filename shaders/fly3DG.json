{
    "Shader": {
        "info": {
            "date": "1638241137",
            "description": "Cellular automata implementation of a self-avoiding walk. The left and right panels feature a von Neumann and hexagonal neighborhood respectively.",
            "flags": 32,
            "hasliked": 0,
            "id": "fly3DG",
            "likes": 8,
            "name": "self-avoiding walk",
            "published": 3,
            "tags": [
                "hexagon",
                "ca",
                "saw",
                "cellularautomata",
                "vonneumannneighborhood",
                "randomwalk",
                "selfavoiding",
                "4neighborhood",
                "6neighborhood"
            ],
            "usePreview": 0,
            "username": "remaindeer",
            "viewed": 361
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv  = fragCoord / iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb;\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Buffer A\n\nconst float N = 10.0;\nconst float d = 1.0 / 60.0;\nconst float R = d / 2.0;\nconst float W = R * 0.15;\nconst float r = R * cos(radians(30.0));\n\nfloat random(vec2 seed) {\n    // https://thebookofshaders.com/10/\n    return fract(sin(dot(seed.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat cross2(vec2 p, vec2 q) {\n    return p.x * q.y - p.y * q.x;\n}\n\nbool in_tri(vec2 uv, vec2 v1, vec2 v2, vec2 v3) {\n    // https://mathworld.wolfram.com/TriangleInterior.html\n    // http://www.sunshine2k.de/coding/java/pointInTriangle/pointInTriangle.html\n    vec2 w1 = v2 - v1;\n    vec2 w2 = v3 - v1;\n    float d = determinant(mat2(w1, w2));\n    // check for d â‰ˆ 0.0 ?\n    float s = determinant(mat2(uv - v1, w2)) / d;\n    float t = determinant(mat2(w1, uv - v2)) / d;\n    return s >= 0.0 && t >= 0.0 && (s + t) <= 1.0;\n}\n\nbool in_reg(vec2 uv, vec2 c, float n, float R, float theta) {\n    // break-up regular polygon into triangles\n    float dt = radians(360.0 / n);\n    for (float i = 0.0, j = 1.0; i < n; i++, j++) {\n        vec2 a = R * vec2(cos(dt * i + theta), sin(dt * i + theta)) + c;\n        vec2 b = R * vec2(cos(dt * j + theta), sin(dt * j + theta)) + c;\n        if (in_tri(uv, a, b, c)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool in_cir(vec2 uv, vec2 c, float R) {\n    return distance(uv, c) < R;\n}\n\nbool in_hex(vec2 uv, vec2 c, float R) {\n    return in_reg(uv, c, 6.0, R, radians(30.0));\n}\n\nvec2 uv_to_cir(vec2 uv, float R) {\n    return (1.0 + floor(uv / d)) * d - R;\n}\n\nvec2 uv_to_hex(vec2 uv, float R) {\n    float theta = radians(30.0);\n    float r = R * cos(theta);\n    mat2 b = mat2(2.0 * r, 0.0, r, 1.5 * R);\n    vec2 hex = b * round(inverse(b) * uv);\n    bool inhex = in_reg(uv, hex, 6.0, R, theta);\n    // adjust hex coordinate due to overlap\n    if (!inhex)\n        if (cross2(vec2(r, 0.5 * R), hex - uv) < 0.)\n            hex += (uv.x > hex.x) ? b[1] : -b[0];\n        else\n            hex += (uv.x > hex.x) ? b[0] : -b[1];\n    return hex;\n}\n\nvec3 rcir(vec2 seed, vec3 n, vec3 e, vec3 w, vec3 s) {\n    // select random available direction\n    vec3[] dir = vec3[4] (n, e, w, s);\n    int i = 0;\n    if (n == vec3(0)) dir[i++] = vec3(1, 0, 0);\n    if (e == vec3(0)) dir[i++] = vec3(0, 1, 1);\n    if (w == vec3(0)) dir[i++] = vec3(0, 1, 0);\n    if (s == vec3(0)) dir[i++] = vec3(0, 0, 1);\n    return dir[int(float(i) * random(seed))];\n}\n\nvec3 rhex(vec2 seed, vec3 nw, vec3 ne, vec3 wc, vec3 ec, vec3 sw, vec3 se) {\n    // select random available direction\n    vec3[] dir = vec3[6] (nw, ne, wc, ec, sw, se);\n    int i = 0;\n    if (nw == vec3(0)) dir[i++] = vec3(1, 1, 0);\n    if (ne == vec3(0)) dir[i++] = vec3(1, 0, 1);\n    if (wc == vec3(0)) dir[i++] = vec3(1, 0, 0);\n    if (ec == vec3(0)) dir[i++] = vec3(0, 1, 1);\n    if (sw == vec3(0)) dir[i++] = vec3(0, 1, 0);\n    if (se == vec3(0)) dir[i++] = vec3(0, 0, 1);\n    return dir[int(float(i) * random(seed))];\n}\n\nvec2 y_to_xy(vec2 uv) {\n    return uv / (iResolution.xy / iResolution.y) * (iResolution.xy / iResolution.xy);\n}\n\nvec4 main_cir(in vec2 uv, vec2 range) {\n    vec2 cell = uv_to_cir(uv, R);\n    \n    vec3 col1 = texture(iChannel0, y_to_xy(uv)).rgb;\n    vec3 col2 = vec3(0);\n    \n    if (mod(float(iFrame), N) == 0.0) {\n        if (col1 == vec3(0)) {\n            // initialize random cell and direction\n            vec2 rcell = uv_to_cir(vec2(range.x + range.y * random(iTime + iDate.xy), random(iTime * iDate.xy)), R);\n            if (cell == rcell) {\n                col2 = rcir(rcell * iTime, vec3(0), vec3(0), vec3(0), vec3(0));\n            }\n        }\n    }  \n    \n    if (col1 == vec3(0)) {\n        // von Neumann neighborhood state\n        vec3 n = texture(iChannel0, y_to_xy(cell + vec2(0., +d))).rgb;\n        vec3 e = texture(iChannel0, y_to_xy(cell + vec2(+d, 0.))).rgb;\n        vec3 w = texture(iChannel0, y_to_xy(cell + vec2(-d, 0.))).rgb;\n        vec3 s = texture(iChannel0, y_to_xy(cell + vec2(0., -d))).rgb;\n        // is there an instruction?\n        if (n == vec3(0, 0, 1) || e == vec3(0, 1, 0) || w == vec3(0, 1, 1) || s == vec3(1, 0, 0)) {\n            col2 = rcir(cell * iTime, n, e, w, s);\n        }\n    } else {\n        col2 = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4)) - vec3(.01);\n    }\n     \n    \n    float aa = 2.0 / iResolution.y; \n    float dist = distance(uv, cell) - (R - W);\n    // col2 = in_cir(uv, cell, R - W) ? col2 : vec3(0); // anit-alias off\n    col2 *= smoothstep(aa, 0.0, dist);                  // anit-alias on\n    \n    return vec4(col2, 1.0);\n}\n\nvec4 main_hex(in vec2 uv, vec2 range) {\n    vec2 cell = uv_to_hex(uv, R);\n    vec3 col = vec3(0);\n    // on grid\n    if (in_hex(uv, cell, R - W)) {\n        // previous color\n        col = texture(iChannel0, y_to_xy(uv)).rgb;\n        if (mod(float(iFrame), N) == 0.0) {\n            if (col == vec3(0)) {\n                // initialize random cell and direction\n                vec2 rcell = uv_to_hex(vec2(range.x + range.y * random(iTime + iDate.xy), random(iTime * iDate.xy)), R);\n                if (cell == rcell) {\n                    col = rhex(rcell * iTime, vec3(0), vec3(0), vec3(0), vec3(0), vec3(0), vec3(0));\n                }\n            }\n        } else {\n            if (col == vec3(0)) {\n                // hexagonal neighborhood state\n                vec3 nw = texture(iChannel0, y_to_xy(cell + vec2(-(1.0 * r), +(1.5 * R)))).rgb;\n                vec3 ne = texture(iChannel0, y_to_xy(cell + vec2(+(1.0 * r), +(1.5 * R)))).rgb;\n                vec3 wc = texture(iChannel0, y_to_xy(cell + vec2(-(2.0 * r), (0.000000)))).rgb;\n                vec3 ec = texture(iChannel0, y_to_xy(cell + vec2(+(2.0 * r), (0.000000)))).rgb;\n                vec3 sw = texture(iChannel0, y_to_xy(cell + vec2(-(1.0 * r), -(1.5 * R)))).rgb;\n                vec3 se = texture(iChannel0, y_to_xy(cell + vec2(+(1.0 * r), -(1.5 * R)))).rgb;\n                // is there an instruction?\n                if (nw == vec3(0, 0, 1) || ne == vec3(0, 1, 0) || wc == vec3(0, 1, 1) || \n                    ec == vec3(1, 0, 0) || sw == vec3(1, 0, 1) || se == vec3(1, 1, 0)) {\n                    col = rhex(cell * iTime, nw, ne, wc, ec, sw, se);\n                }\n            } else {\n                col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4)) - vec3(.01);\n            }\n        }\n    }\n    return vec4(col, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.y;\n    float mid = iResolution.x / iResolution.y / 2.0;\n    vec2 range = uv.x < mid ? vec2(0.0, mid) : vec2(mid, mid);\n    fragColor = fragCoord.x < iResolution.x / 2.0 ? main_cir(uv, range) : main_hex(uv, range);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}