{
    "Shader": {
        "info": {
            "date": "1599084984",
            "description": "https://en.wikipedia.org/wiki/Lyapunov_fractal\n\nW: pan up\nA: pan left\nS: pan down\nD: pan right\nQ: zoom in\nE: zoom out\nR: reset pan and zoom to default position",
            "flags": 48,
            "hasliked": 0,
            "id": "WtjfDw",
            "likes": 1,
            "name": "Lyapunov fractal explorer",
            "published": 3,
            "tags": [
                "fractal",
                "lyapunov"
            ],
            "usePreview": 0,
            "username": "zzggbb",
            "viewed": 207
        },
        "renderpass": [
            {
                "code": "#define VIEW_STATE_2D iChannel0\n\n// number of iterations. larger is more accurate\n#define N 100.0\n\n// The iteration sequence, which defines the image\n// This can be any sequence of 1s, 2s and 3s \n// Examples: 1 12 22 121221 212122\n//#define S 1222121\n#define S 2122312\n\n#define MAP_LOGISTIC 0\n#define MAP_GAUSS 1\n#define MAP_FUNC MAP_GAUSS\n\n#define LYAPUNOV_PRODUCT 0\n#define LYAPUNOV_SUM 1\n#define LYAPUNOV_TYPE LYAPUNOV_SUM\n\nfloat get_growth_degree(float n, float a, float b, float c, float S_length) {\n    float S_index = mod(n, S_length);\n\tfloat S_n = floor(mod(float(S) / pow(10.0, S_index), 10.0));\n    if (S_n == 1.0) return a;\n    if (S_n == 2.0) return b;\n    if (S_n == 3.0) return c;\n}\n\nvec3 get_color(float lambda) {\n    if (lambda > 0.0) \n        // chaos\n        return BLACK;\n    else if (lambda == 0.0) \n        return BLUE;\n    else\n      \t// stabiity  \n        return color_palette(ninf2one(lambda, 5.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float zoom = texelFetch(VIEW_STATE_2D, ivec2(3,0), 0).x;\n    vec2 pan = vec2(\n        texelFetch(VIEW_STATE_2D, ivec2(0,0), 0).x,\n        texelFetch(VIEW_STATE_2D, ivec2(1,0), 0).x\n    );\n    \n    vec2 uv = fragCoord.xy/min(iResolution.x, iResolution.y);\n    vec2 uvo = 0.5*iResolution.xy/min(iResolution.x, iResolution.y);\n    uv = (uv - uvo) * zoom;\n    uv = uv - pan;\n    \n    float a = uv.x;\n    float b = uv.y;\n    \n    float S_length = floor(log(float(S)) / log(10.0)) + 1.0;\n    \n    float c = osc(iTime*0.5, -1.0, 1.0);\n    \n    #if LYAPUNOV_TYPE == LYAPUNOV_SUM\n        float sum = 0.0;\n    #elif LYAPUNOV_TYPE == LYAPUNOV_PRODUCT\n        float product = 1.0;\n    #endif\n    \n    #if MAP_FUNC == MAP_LOGISTIC\n        float x = 0.5;\n        float r;\n        for (float n=1.0; n<N; n++) {\n            r = get_growth_degree(n, a, b, c, S_length);\n            x = r * x * (1.0 - x);\n            #if LYAPUNOV_TYPE == LYAPUNOV_SUM\n                sum += log(abs(r * (1.0 - 2.0*x)));\n            #elif LYAPUNOV_TYPE == LYAPUNOV_PRODUCT\n                product *= abs(r * (1.0 - 2.0*x));\n            #endif\n        }\n    #elif MAP_FUNC == MAP_GAUSS\n        float x = 0.01;\n        float alpha = 4.9;\n        float beta;\n        for (float n=1.0; n<N; n++) {\n            beta = get_growth_degree(n, a, b, c, S_length);\n            x = exp(-alpha*x*x) + beta;\n            #if LYAPUNOV_TYPE == LYAPUNOV_SUM\n                sum += log(abs(-2.0*alpha*x*exp(-alpha*x*x)));\n            #elif LYAPUNOV_TYPE == LYAPUNOV_PRODUCT\n                product *= abs(-2.0*alpha*x*exp(-alpha*x*x));\n            #endif\n        }\n    #endif\n    #if LYAPUNOV_TYPE == LYAPUNOV_SUM\n        float lambda = sum / N;\n    #elif LYAPUNOV_TYPE == LYAPUNOV_PRODUCT\n        float lambda = log(product) / N;\n    #endif\n    vec3 color = get_color(lambda);\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// *CHANNEL_TITLE* VIEW_STATE_2D  \n\n#define SELF iChannel0\n#define KEYBOARD iChannel1\n\n#define KEY_W 87\n#define KEY_A 65\n#define KEY_S 83\n#define KEY_D 68\n#define KEY_Q 81\n#define KEY_E 69\n#define KEY_R 82\n\n#define INITIAL_X_PAN 0.5\n#define INITIAL_Y_PAN 0.4\n\n#define INITIAL_ZOOM 2.0\n#define ZOOM_IN_LIMIT 0.005\n#define ZOOM_OUT_LIMIT 10.0\n\n#define PAN_SPEED 1.0\n#define ZOOM_SPEED 50.0\n\n/*\nW to pan up\nA to pan left\nS to pan down\nD to pan right\nQ to zoom in\nE to zoom out\n\nAt (0,0).x, we store left-right pan\nAt (1,0).x, we store up-down pan\nAt (3,0).x, we store zoom\n*/\n\nfloat get_key(int key) {\n    return texelFetch(KEYBOARD, ivec2(key, 0), 0).x;\n}\n\nvoid mainImage(out vec4 input_state, in vec2 fragCoord){\n    ivec2 xy = ivec2(fragCoord);\n    vec4 current_value = texelFetch(SELF, xy, 0);\n    float current_zoom = texelFetch(SELF, ivec2(3,0), 0).x;\n    float new_value = current_value.x;\n    if (xy == ivec2(0,0)) {\n        // left-right pan\n        if (current_value.y == 0.0 || get_key(KEY_R) == 1.0) {\n            new_value = INITIAL_X_PAN;\n        } else {\n            float dx = (iTimeDelta*PAN_SPEED)*(get_key(KEY_A) - get_key(KEY_D));\n            new_value = current_value.x + dx*current_zoom;\n        }\n    }\n    else if (xy == ivec2(1,0)) {\n        // up-down pan\n        if (current_value.y == 0.0 || get_key(KEY_R) == 1.0) {\n            new_value = INITIAL_Y_PAN;\n        } else {\n            float dy = (iTimeDelta*PAN_SPEED)*(get_key(KEY_S) - get_key(KEY_W));\n            new_value = current_value.x + dy*current_zoom;\n        }\n    }\n    else if (xy == ivec2(3,0)) {\n        // zoom\n        if (current_value.y == 0.0 || get_key(KEY_R) == 1.0) {\n            new_value = INITIAL_ZOOM;\n        } else {\n            if (get_key(KEY_Q) == 1.0 && get_key(KEY_E) == 1.0) {\n                /* do nothing */\n            } else if (get_key(KEY_E) == 1.0) {\n                new_value = current_value.x*1.1;\n            } else if (get_key(KEY_Q) == 1.0) {\n                new_value = current_value.x*0.9;\n            }\n            new_value = clamp(new_value, ZOOM_IN_LIMIT, ZOOM_OUT_LIMIT);\n        }\n    }\n    input_state = vec4(new_value, 1.0, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.14159265\n\n#define BLACK vec3(0)\n#define WHITE vec3(1)\n#define RED vec3(1,0,0)\n#define GREEN vec3(0,1,0)\n#define BLUE vec3(0,0,1)\n#define YELLOW (RED+GREEN)\n\nvec3 color_palette(float t) {\n    vec3 a = vec3(0.5);\n    vec3 b = vec3(0.5);\n    vec3 c = vec3(1.0);\n    vec3 d = vec3(0.0, 0.33, 0.67);\n    return a + b*cos(2.0*PI*(c*t + d));\n}\n\nfloat inf2one(float x, float q) {\n    // scale [0..∞] -> [0..1]\n    // q determines how quickly the output approaches 1.0\n    return 1.0-1.0/(q*x+1.0);\n}\nfloat ninf2one(float x, float q) {\n    // scale [-∞..0] -> [1..0]\n    return 1.0+1.0/(q*x-1.0);\n}\n\nvec2 linscale(vec2 p, vec2 p1, vec2 p2, vec2 s1, vec2 s2) {\n\treturn (s2 - s1) / (p2 - p1) * (p - p2) + s2;\n}\n\nfloat linscale(float p, float p1, float p2, float s1, float s2) {\n\treturn (s2 - s1) / (p2 - p1) * (p - p2) + s2;\n}\n\nfloat osc(float t, float m, float M) {\n\treturn linscale(sin(t), -1.0, 1.0, m, M);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}