{
    "Shader": {
        "info": {
            "date": "1709979025",
            "description": "mouse moves camera\nloop\nz^2+c   then\nz^-3+c",
            "flags": 0,
            "hasliked": 0,
            "id": "M3fXWj",
            "likes": 3,
            "name": "flowerclod",
            "published": 3,
            "tags": [
                "3d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "lomateron",
            "viewed": 139
        },
        "renderpass": [
            {
                "code": "float pi = 3.1415926535897932384626433832795;\nvec3 objec(vec3 u)\n{\n    vec3 n = u;\n         //n = cos(iTime*vec3(.27,.71,.51)+vec3(0,1,3))*.6;\n    for(float i = .5; i < 3.; ++i)\n    {\n        u = vec3(atan(u.y,u.x),\n                 atan(u.z,length(u.xy)),\n                 log(length(u)));    u = u*2.;\n        u = vec3(cos(u.y)*cos(u.x),\n                 cos(u.y)*sin(u.x),\n                 sin(u.y))*exp(u.z);   u = u+n;\n    }\n    for(float i = .5; i < 2.; ++i)\n    {\n        u = vec3(atan(u.y,u.x),\n                 atan(u.z,length(u.xy)),\n                 log(length(u)));    u = u*-3.;\n        u = vec3(cos(u.y)*cos(u.x),\n                 cos(u.y)*sin(u.x),\n                 sin(u.y))*exp(u.z);   u = u+n;\n    }\n    float l = dot(u,u);\n    vec3 b = normalize(u)*.5+.5;\n    vec3 c = vec3(0);\n    float a = 0.;  if(l==l && l<9.){a=max(0.,1.-l); c = b;}\n    return max(1.-a*c,0.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 camDir = normalize(cos(iTime*vec3(.27,.71,.51)+vec3(1,3,6))*vec3(9,1,9));\n    if(iMouse.z>.5){camDir = normalize(cos(iMouse.xyx/iResolution.xyx*-vec3(7,-3,7)-vec3(0,1,.5)*pi));}\n    \n    vec3 camPos = -camDir*1.9;\n    \n\tvec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    vec3 sd = 1.6*normalize(vec3(camDir.z,0,-camDir.x));\n    vec3 up = 1.6*normalize(cross(camDir,sd));\n    camPos += sd*uv.x + up*uv.y;\n    camPos = camPos.yxz*vec3(1,-1,1);\n    camDir = camDir.yxz*vec3(1,-1,1);\n    \n    vec3 ray = camDir;\n    vec3 p = camPos;\n    vec3 c = vec3(0);                      //reflected light\n    vec3 g = vec3(1.3);                      //directed light\n    for (int i = 0; i < 444; ++i)          //ray march\n    {\n        vec3 r = objec(p);\n        vec3 g2 = g;\n        g *= r;\n        c += g*r*(g2-g);\n        p += ray*3./444.;\n    }\n\tfragColor = vec4(c,0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}