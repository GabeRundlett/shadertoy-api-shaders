{
    "Shader": {
        "info": {
            "date": "1520662339",
            "description": "Mouse does stuff",
            "flags": 0,
            "hasliked": 0,
            "id": "lstyDl",
            "likes": 2,
            "name": "RippleSDF",
            "published": 3,
            "tags": [
                "3d",
                "sdf"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 652
        },
        "renderpass": [
            {
                "code": "#define EPS 0.0001\n#define STEPS 1028\n#define FAR 1000.0\n#define NUMBEROFWAVES 1\n#define PI acos( -1.0 )\n\n// Formula for ripples from Fabrice's https://www.shadertoy.com/view/ldl3z2\n\nfloat hash( float n )\n{\n\n    return fract( sin( n ) * 45843.349 );\n    \n}\n\nvec2 rand( vec2 p ) \n{\n    \n    return fract( sin ( vec2 ( dot ( p, vec2( 127.1, 311.7 ) ), \n                              dot( p, vec2( 0.310, 0.180 ) ) ) ) * 43758.5453);\n\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat opBlend( float d1, float d2 )\n{\n    return smin( d1, d2, 0.2 );\n}\n\nfloat tri( float amp, float dis, float fre, float spe, float dec )\n{\n\n    return amp * sin( fre * dis - iTime * spe ) / ( dec + dis * dis );\n    \n}\n\nvec2 map(vec3 p)\n{\n    \n    vec2 mou = iMouse.xy / iResolution.xy;\n    float d[ NUMBEROFWAVES ];\n    for( int i = 0; i < NUMBEROFWAVES; i++ )\n    {\n    \n        d[i] = length( p.xz - vec2( ( rand( vec2( float( i ) * float( i ) * 6.0,\n                                      hash( float( i ) * float( i ) * 6.0 ) ) ) ) ) );\n    \n    }\n    \n    float dO = 0.0;\n    for( int j = 0; j < NUMBEROFWAVES; j++ )\n    {\n    \n        dO += tri( 0.2, d[j], 20.0, 3.0, 40.1  );\n        \n    }\n\n\tvec2 rip = vec2( p.y + dO, 0.0 );\n    vec2 pla = vec2( length( p - vec3( 0.0, mou.y, 0.0 ) ) - 0.5, 1.0 );\n    rip = vec2(  opBlend( rip.x, pla.x ), 0.0 );\n    //if( pla.x < rip.x ) rip = pla;\n    return rip;\n    //return ble;\n}\n\n\nvec3 nor( vec3 p )\n{\n\n    vec2 e = vec2( EPS, 0.0 );\n    return normalize( vec3( map( p + e.xyy ).x - map( p - e.xyy ).x,\n                            map( p + e.yxy ).x - map( p - e.yxy ).x,\n                            map( p + e.yyx ).x - map( p - e.yyx ).x\n                          ) );\n\n}\n\nfloat ray( vec3 ro, vec3 rd, out float d )\n{\n\n    float t = 0.0;\n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n        d = 0.5 * map( ro + rd * t ).x;\n        if( d < EPS || t > FAR ) break;\n        t += d;\n        \n    }\n    \n    return t;\n\n}\n\nvec3 sha( vec3 ro, vec3 rd )\n{\n\n    float d = 0.0;\n    float t = ray( ro, rd, d );\n    vec3 p = ro + rd * t;\n    vec3 n = nor( p );\n    vec3 ref = texture( iChannel0, reflect( rd, n ) ).xyz;\n\t//vec3 ref = reflect( rd, n );\n    vec3 lig = normalize( vec3( 1.0, 0.8, 0.6 ) );\n    vec3 blig = vec3( -lig.x, -lig.y, -lig.z );\n    vec3 col = vec3( 0.0 );\n    \n    float amb = 0.5 + 0.5 * n.y;\n    float dif = max( 0.0, dot( n, lig ) );\n    float bac = max( 0.0, 0.5 + 0.2 * dot( n, blig ) );\n    float spe = pow( clamp( dot( n, lig ), 0.0, 1.0 ), 16.0 );\n    float speO = pow( clamp( dot( n, blig ), 0.0, 1.0 ), 16.0 );\n    float tex = texture( iChannel1, p.xz ).x;\n    \n    col += amb;\n    col += 1.0 * blig;\n    col += vec3( 0.4 ) * dif;\n    col *= 0.5 + vec3( 0.0, 0.2, 0.4 );\n    col += 1.0 * spe * speO;\n    col += vec3( 0.0, 0.1, 0.3 );\n    //col += 1.0 * ref;\n    \n    //if( map( p ).y == 1.0 ) col *= tex;\n    if( map( p ).y == 0.0 ) col *= ref;\n    \n    return col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n\n    vec2 mou = iMouse.xy / iResolution.xy;\n    \n    //if( mou.y == 0.0 ) mou.y = 0.5;\n    vec3 ro = 2.0 * vec3( sin( mou.x * PI ), 0.4, cos( -mou.x * PI ) );\n    vec3 ww = normalize( vec3( 0.0 ) - ro );\n    vec3 uu = normalize( cross( vec3( 0.0, 1.0, 0.0 ), ww ) );\n    vec3 vv = normalize( cross( ww, uu ) );\n    vec3 rd = normalize( uv.x * uu + uv.y * vv + 1.5 * ww );\n    //vec3 rd = normalize( vec3( uv, -1.0 ) );\n    \n    float d = 0.0;\n    float t = ray( ro, rd, d );\n    vec3 p = ro + rd * t;\n    vec3 n = nor( p );\n    vec3 tex = texture( iChannel0, rd ).rgb;\n    \n    // Time varying pixel color\n    vec3 col = d < EPS ? sha( ro, rd ) : tex; //mix( vec3( 0.0, 0.0, 0.3 ), vec3( 1.0 ), uv.y );\n    \n    if( p.y > 0.02 )\n        \n    rd = normalize( reflect( rd, n ) );\n    \n    ro = p + rd * 0.02;\n    \n    if( d < EPS )\n    \n    col = sha( ro, rd );\n        \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}