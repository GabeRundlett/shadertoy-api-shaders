{
    "Shader": {
        "info": {
            "date": "1599680660",
            "description": "visualisation of HSL using ray tracing.\n\nthanks FabriceNeyret2 to help me with the artefacts, antialiasing, and cleaning some code",
            "flags": 0,
            "hasliked": 0,
            "id": "tlBBzt",
            "likes": 7,
            "name": "HSL visualisation",
            "published": 3,
            "tags": [
                "raytracing",
                "hsl"
            ],
            "usePreview": 0,
            "username": "elgecko",
            "viewed": 409
        },
        "renderpass": [
            {
                "code": "vec3 raytrace(vec3 ray)\n{\n    vec3 col = vec3(.5);\n    \n    //intersect between cylinder and ray\n    \n    vec2 xz = normalize(ray.xz);\n    vec2 dir = -viewer.xz;\n    float d_o = dot(xz,dir);\n    float d_c = length(d_o*xz-dir);\n    if ( d_c>cyl_radius ) return col;\n\n    float d_d = sqrt(cyl_radius*cyl_radius-d_c*d_c);\n    float lmin = (d_o-d_d)/length(ray.xz);\n    float lmax = (d_o+d_d)/length(ray.xz);\n    if (abs(ray.y) <= 1e-6)\n    {\n        if (viewer.y>(cyl_height/2.)||viewer.y<(-cyl_height/2.))\n            lmax = lmin-1.;\n    }\n    else\n    {\n        d_o = sign(ray.y)*(-viewer.y);\n        d_d = cyl_height/2.;\n        lmin = max (lmin, (d_o-d_d)/abs(ray.y));\n        lmax = min (lmax, (d_o+d_d)/abs(ray.y));\n    }\n    float hmin = lmin-1.;\n    float hmax = lmax+1.;\n    if (abs(ray.x) <= 1e-6)\n    {\n        if (viewer.x>cyl_radius||viewer.x<0.)\n            hmax = hmin-1.;\n    }\n    else\n    {\n        d_o = sign(ray.x)*(cyl_radius/2.-viewer.x);\n        d_d = cyl_radius/2.;\n        hmin = max (hmin, (d_o-d_d)/abs(ray.x));\n        hmax = min (hmax, (d_o+d_d)/abs(ray.x));\n    }\n    if (abs(ray.y) <= 1e-6)\n    {\n        if (viewer.z>0.||viewer.z<-cyl_radius)\n            hmax = hmin-1.;\n    }\n    else\n    {\n        d_o = sign(ray.z)*(-cyl_radius/2.-viewer.z);\n        d_d = cyl_radius/2.;\n        hmin = max (hmin, (d_o-d_d)/abs(ray.z));\n        hmax = min (hmax, (d_o+d_d)/abs(ray.z));\n    }\n    if ((lmin<hmax)&&(lmin>hmin)) lmin = hmax;\n    if (lmin<=lmax)\n    {\n        col.z=1.;\n        vec3 loc = lmin*ray+viewer;\n        if (loc.z>0.) col.x = 1.;\n        float h,s,l,c,h2,x,m;\n        h = acos(loc.x/(length(loc.xz)+1e-6))*sign(loc.z)+pi+iTime/pi;\n        h = mod(h, 2.*pi);\n        s = length(loc.xz)/cyl_radius;\n        l = loc.y/cyl_height+.5;\n        c = l*s;\n        h2 = h/(pi/3.);\n\n        int ih = int(h2);\n        col = vec3(1.);\n        col[(ih/2+2)%3] = 0.;\n        col[(7-ih)%3] -= abs( mod(h2, 2.)-1.);\n        col *= c;\n        col += l-c;\n    }\n\n    return(col);\n}\n\nvec3 raygen(vec2 uv)\n{\n    //vec from viewer to cyl_center turned by fov*uv\n    vec3 ray = vec3(uv,.5/tan(fov/2.));\n    {\n    vec3 dir = -viewer;\n    float h,c,s;\n    h = length(dir.xz);\n    s = dir.y/h;\n    c = dir.z/h;\n    ray.yz *= mat2(c,s,-s,c);\n    h = length(dir.xz);\n    s = dir.x/h;\n    c = dir.z/h;\n    ray.xz *= mat2(c,s,-s,c);\n    }\n    return normalize(ray);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 R = iResolution.xy;\n    if (fov<0.||fov>=pi) return;\n    vec3 col = vec3(0.);\n    \n    // squared pixel coordinates (from -0.5 to 0.5)\n    vec2 uv;\n    for(int i = 0; i <9; ++i) {\n        vec2 delta = vec2(i%3-1,i/3-1);\n        uv = (fragCoord+delta/3.-R/2.)/max(R.x,R.y);\n        col += raytrace(raygen(uv))/9.;\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float pi = 3.1415926535;\nvec3 viewer = vec3(1., 2.,-3.);\nfloat fov = 3.14159/3.;\nfloat cyl_radius = 1.;\nfloat cyl_height = 1.;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}