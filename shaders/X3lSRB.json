{
    "Shader": {
        "info": {
            "date": "1709678653",
            "description": "Voronoi smooth biomes generation",
            "flags": 0,
            "hasliked": 0,
            "id": "X3lSRB",
            "likes": 1,
            "name": "Voronoi smooth biomes generation",
            "published": 3,
            "tags": [
                "voronoi",
                "smooth",
                "terraingeneration",
                "biomesgeneration"
            ],
            "usePreview": 0,
            "username": "juk",
            "viewed": 149
        },
        "renderpass": [
            {
                "code": "#define TWOPI 6.28318530718\n\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);\n  vec2 i = floor(v + dot(v, C.yy));\n  vec2 x0 = v - i + dot(i, C.xx);\n  vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m;\n  m = m*m;\n  vec3 x = vec3(2.0) * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * (a0*a0 + h*h);\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n//\n\nconst int cellsLength = 5;\n\nvec3 colors[cellsLength] =  vec3[cellsLength](\n    vec3(1.0, 1.0, 0.0), \n    vec3(1.0, 0.0, 0.0), \n    vec3(0.0, 1.0, 0.0),\n    vec3(0.0, 0.0, 1.0),    \n    vec3(0.0, 1.0, 1.0)\n);\n\nfloat weight(float value){\n    return 0.1 / pow(value, 2.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // pixelate\n    uv = floor(uv * 200.0) / 200.0;\n\n    float h = snoise(uv * 3.0) / 3.0;\n    h += snoise(uv * 5.0) / 5.0;\n    h += snoise(uv * 10.0) / 10.0;\n    h += snoise(uv * 15.0) / 15.0;\n    h += snoise(uv * 25.0) / 25.0;\n    h = h * 0.5 + 0.5;\n    \n    float noiseDisplace = snoise(uv * 2.0);\n\tuv = vec2(\n        uv.x + 0.02 * sin(noiseDisplace * TWOPI),\n        uv.y + 0.02 * cos(noiseDisplace * TWOPI)\n    );\n    \n    float noiseDisplace2 = snoise(uv * 4.0);\n    uv = vec2(\n        uv.x + 0.04 * sin(noiseDisplace2 * TWOPI),\n        uv.y + 0.04 * cos(noiseDisplace2 * TWOPI)\n    );\n    \n    float noiseDisplace3 = snoise(uv * 8.0);\n    uv = vec2(\n        uv.x + 0.01 * sin(noiseDisplace3 * TWOPI),\n        uv.y + 0.01 * cos(noiseDisplace3 * TWOPI)\n    );\n    \n    vec2 cells[cellsLength] = vec2[cellsLength](\n        iMouse.xy / iResolution.xy, \n        vec2(0.3, 0.5),\n        vec2(0.5, 0.6),\n        vec2(0.7, 0.1),         \n        1.0 - iMouse.xy / iResolution.xy\n    );\n    \n    // summ\n    float weightsSumm = 0.0;\n\n    // edge distance\n    vec2 fromUVToNearestCell;\n    float minDistanceToCell = 1.0;\n    int nearestCellIndex = 0;\n    \n\n    for(int i = 0; i < cellsLength; i++) {\n        vec2 fromUVToCell = cells[i] - uv;\n        float distanceToCell = length(fromUVToCell);\n\n        // summ\n        weightsSumm += weight(distanceToCell);\n        \n        // edge distance\n        if(distanceToCell < minDistanceToCell) {\n            nearestCellIndex = i; \n            minDistanceToCell = distanceToCell;\n            fromUVToNearestCell = fromUVToCell;\n        }\n    }\n\n    // blur\n    vec3 color = vec3(0.0);\n\n    // edge distance\n    float minDistanceToEdge = 1.0;\n\n    for(int i = 0; i < cellsLength; i++) {\n        vec2 fromUVToCell = cells[i] - uv;\n        // blur\n        float distanceToCell = length(fromUVToCell);\n        float distanceWeight = weight(distanceToCell);\n\n        color += colors[i] * (distanceWeight / weightsSumm);\n\n        // edge distance\n        minDistanceToEdge = min(\n            minDistanceToEdge,\n            dot(0.5 * (fromUVToNearestCell + fromUVToCell), normalize(fromUVToCell - fromUVToNearestCell))\n        );\n    }\n    \n    // terrain height\n    color *= h;\n\n    fragColor = vec4(color, 1.0);\n\n    // reduce colors\n    fragColor = floor(fragColor*16.0) / 16.0;\n\n    // biomes borders\n    if(minDistanceToEdge < 0.02) fragColor = 1.0 - fragColor;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}