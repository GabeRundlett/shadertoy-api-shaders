{
    "Shader": {
        "info": {
            "date": "1665326444",
            "description": "test ba",
            "flags": 32,
            "hasliked": 0,
            "id": "wlKfR1",
            "likes": 2,
            "name": "waves_343",
            "published": 3,
            "tags": [
                "test"
            ],
            "usePreview": 0,
            "username": "yurka",
            "viewed": 168
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord - iResolution.xy * 0.5)/iResolution.y;\n\n    vec4 data = texelFetch(iChannel0,ivec2(fragCoord),0);\n    \n    vec4 data1 = texelFetch(iChannel0,ivec2(fragCoord) + ivec2(-1, 0),0);\n    vec4 data2 = texelFetch(iChannel0,ivec2(fragCoord) + ivec2(+1, 0),0);\n    vec4 data3 = texelFetch(iChannel0,ivec2(fragCoord) + ivec2(0, -1),0);\n    vec4 data4 = texelFetch(iChannel0,ivec2(fragCoord) + ivec2(0, +1),0);\n    vec3 norm = vec3(data2.x - data1.x, data4.x - data3.x, 0.2); \n    vec3 light = vec3(0.3, -0.1, 0.7);\n    float cs = dot(norm, light) / (length(norm) * length(light));\n    fragColor = vec4(1.0 * cs, 1.0 * cs, 1.0 * cs, 1.0);\n///*\n    //float Y = data.q < 0.0 ? -data.q : 0.0;\n    //float Z = data.q > 0.0 ? +data.q : 0.0;\n    //fragColor = vec4(data.x * 30.0, Y * 1000.0, Z * 1000.0, data.q);\n    data.x *= 15.0;\n    data.q *= 500.0;\n    float xpos = data.x > 0.0? data.x : 0.0;\n    float xneg = data.x < 0.0? -data.x : 0.0;\n    float vpos = data.q > 0.0? data.q : 0.0;\n    float vneg = data.q < 0.0? -data.q : 0.0;\n    vec4 cxpos = xpos * vec4(1.0, 0.0, 0.0, 0.0);\n    vec4 cxneg = xneg * vec4(0.0, 1.0, 1.0, 0.0);\n    vec4 cvpos = vpos * vec4(0.5, 0.0, 1.0, 0.0);\n    vec4 cvneg = vneg * vec4(0.5, 1.0, 0.0, 0.0);\n    fragColor = cxpos + cxneg + cvpos+ cvneg;\n//*/\n}\n    \n    ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0*(fragCoord - iResolution.xy * 0.5)/iResolution.y;\n    \n    \n    if (iFrame < 10) {\n        vec2 pnt = vec2(0.4, -0.217);\n        float dst = length(uv - pnt);\n        \n        //float dst = length(uv);\n        //if (dst > length(uv - vec2(0.4, 0.1)))\n        //   dst = length(uv - vec2(0.4, 0.1));\n        \n        //float linex = -1.5;\n        //float dst = length(uv - vec2(linex, -0.5));\n        //if (dst > length(uv - vec2(linex, 0.5)))\n        //   dst = length(uv - vec2(linex, 0.5));\n        //if (uv.y > -0.5 && uv.y < 0.5 && dst > abs(uv.x - linex))\n        //   dst = abs(uv.x - linex);\n        /*\n        float ox = 0.5;\n        float oy = -0.3;\n        float or = 1.5;\n        float oap = 3.14 * 0.26;\n        float oan = 3.14 * 0.10;\n           \n        float dst = 10.0e10;\n        vec2 v = uv - vec2(ox, oy);\n        float vcos = -v.x/length(v);\n        if (vcos > 1.0)\n            vcos = 1.0;\n        float a = acos(vcos);\n        if ((uv.y > oy && a < oap) || (uv.y <= oy && a < oan)) \n           dst = abs(length(v) - or);\n        else \n        {\n           float dstp1 = length(uv - vec2(ox - or * cos(oan), oy - or * sin(oan)));\n           if (dst > dstp1)\n              dst = dstp1;\n           float dstp2 = length(uv - vec2(ox - or * cos(oap), oy + or * sin(oap)));\n           if (dst > dstp2)\n              dst = dstp2;\n        }*/\n        //float dst = length(uv - vec2(ox - or * cos(oa), oy - or * sin(oa)));\n        //float dst = length(uv - vec2(ox - or * cos(oa), oy - or * sin(oa/2.0)));\n        float radius = 0.2;\n        float factor = dst < radius? cos((dst / radius) * 3.14) * 0.5 + 0.5 : 0.0; //1.0/(pow(abs(dst/R), 3.0) + 1.0);\n\n        //fragColor = vec4(1.0/(pow(abs(dst/radius), 3.0) + 1.0), 0.0, 0.0, 0.0);\n        \n        float freq = 80.0;\n        float H = factor * sin((uv.x * 0.7 + uv.y * 0.3)* freq) * .1;\n        float V = factor * cos((uv.x * 0.7 + uv.y * 0.3)* freq) * .013;\n        float Y = V < 0.0 ? -V : 0.0;\n        float Z = V > 0.0 ? +V : 0.0;\n        fragColor = vec4(H, Y, Z, V);\n        \n        /*\n        float freq = 100.0;\n        float H = factor * cos(dst * freq) * 1.0;\n        float V = factor * sin(dst * freq) * 0.03;\n        float Y = V < 0.0 ? -V : 0.0;\n        float Z = V > 0.0 ? +V : 0.0;\n        fragColor = vec4(H, Y, Z, V);\n        */\n        /*\n        float freq = 80.0;\n        factor = 1.0 - max(abs(uv.x - pnt.x), abs(uv.y - pnt.y)) / 0.2;\n        if (factor < 0.0) factor = 0.0;\n        float H = factor * sin((uv.x + uv.y * 0.0)* freq) * 1.0;\n        float V = factor * cos((uv.x + uv.y * 0.0)* freq) * 0.04;\n        fragColor = vec4(H, 0.0, 0.0, V);\n        */\n    }\n    else {\n        vec4 data = texelFetch(iChannel1,ivec2(fragCoord), 0);\n        vec4 data1 = texelFetch(iChannel1,ivec2(fragCoord) + ivec2(-1, 0),0);\n        vec4 data2 = texelFetch(iChannel1,ivec2(fragCoord) + ivec2(+1, 0),0);\n        vec4 data3 = texelFetch(iChannel1,ivec2(fragCoord) + ivec2(0, -1),0);\n        vec4 data4 = texelFetch(iChannel1,ivec2(fragCoord) + ivec2(0, +1),0);\n\n        //fragColor = (data + data1 + data2 + data3 + data4) / 5.0;\n        float fact = 1.0; // 0.1;\n        vec2 mc = vec2(-0.5, 0.0);\n /*\n        if (length(uv-mc) < 0.5) {\n            fact = 0.5;\n        }\n*/\n        float A = (data.q)*(1.0) + ((data1.x + data2.x + data3.x + data4.x - data.x * 4.0) / 4.0)*fact;\n        float X = data.x + A*fact;\n        //float X = (data.x)*(1.0) - ((data1.q + data2.q + data3.q + data4.q - data.q * 4.0) / 4.0)*fact;\n        \n        // mirror parabola\n        /*\n        if ((uv.x + 1.0) < uv.y * uv.y) {\n            X = 0.0;\n            A = 0.0;\n        }\n        */\n        // mirrortwo holes\n        /*\n        if ((-0.54 < uv.x && uv.x < -0.5) && (abs(uv.y) < 0.08 || abs(uv.y) > 0.10)) {\n            X *= 0.03;\n            A *= 0.03;\n        }\n        */\n        /*\n        if (length(uv-mc) < 0.5) {\n            X *= 0.03;\n            A *= 0.03;\n        }\n        */\n        // elipse\n        vec2 elp1 = vec2(-0.9, 0.0);\n        vec2 elp2 = vec2(0.9, 0.0);\n        if (length(uv - elp1) + length(uv - elp2) > 2.5) {\n            X *= 0.03;\n            A *= 0.03;\n        }\n        \n        //fragColor = data / 1.01;\n        fragColor = vec4(X, 0.0, 0.0, A);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float random (in vec2 _st) {\n     return fract(sin(1.0+dot(_st,vec2(127.1,311.7)))*43758.545); \n}\n\nfloat random (in float _st) {\n    return fract(sin(dot(vec2(_st, 0.0),\n                         vec2(127.1,311.7)))*\n        43758.545);\n}\nfloat lastrandom = 1.0;\nfloat nextrandom(float a)\n{\n    float r = random (lastrandom);\n    lastrandom = r + a;\n    return r;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 data = texelFetch(iChannel0,ivec2(fragCoord),0);\n    fragColor = data;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}