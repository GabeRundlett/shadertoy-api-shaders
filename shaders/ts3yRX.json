{
    "Shader": {
        "info": {
            "date": "1601387405",
            "description": "A quick test of a fast cloud technique, still optimizing.",
            "flags": 0,
            "hasliked": 0,
            "id": "ts3yRX",
            "likes": 2,
            "name": "Fast Cloud Test",
            "published": 3,
            "tags": [
                "noise",
                "clouds",
                "fast"
            ],
            "usePreview": 0,
            "username": "Dragonpeak",
            "viewed": 373
        },
        "renderpass": [
            {
                "code": "vec3 CAMERA_POS = vec3(0.,0.,0.2);\nvec3 CAMERA_LOOK = vec3(0., 0., 2.);\n\nfloat CLOUD_SCALE = 0.5;\nvec3 CLOUD_WIND = vec3(0.2, 0.4, 0.1)*0.2;\nconst float CLOUD_HEIGHT = 4.;\nconst int CLOUD_OCT = 6;\nconst float FAR = 200.;\nconst float CLOUD_COVER = 1.1;\n\nconst vec3 CLOUD_COL = vec3(.9);\n\nconst float CLOUD_END_HEIGHT = CLOUD_HEIGHT + 0.15;\n\nconst int LIGHT_STEPS = 8;\nconst float LIGHT_FAR = 1.;\n\nvec3 LIGHT_DIR = normalize(vec3(0.4, 0.8, 0.1));\nconst vec3 LIGHT_COL = vec3(1., 0.9, 0.8)*0.8;\nconst vec3 AMBIENT = vec3(0.5, 0.5, 0.6)*0.7;\n//uncomment for 3d noise\n//#define USE_3D \n//uncomment for volume marching\n//#define USE_VOLUME\nconst int VOLUME_STEPS = 12;\nconst float VOLUME_FAR = 2.;\n\nvec3 ray_direction(float fov, vec2 size, vec2 coord) {\n    // from https://www.shadertoy.com/view/Xtd3z7\n    vec2 xy = coord - size / 2.0;\n    float z = size.y / tan(radians(fov) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nmat4 view_matrix(vec3 eye, vec3 center, vec3 up) {\n    // from https://www.shadertoy.com/view/Xtd3z7\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1)\n    );\n}\n\n\n//from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n#ifdef USE_3D\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n#endif\n#ifndef USE_3D\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec3 ps){\n    vec2 p = ps.xy;\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res+0.1;\n}\n#endif\n//end from\n\nfloat get_cloud_density(vec3 pos, int oct)\n{\n    \n    vec3 a_pos = pos*CLOUD_SCALE + CLOUD_WIND*iTime;\n\n    a_pos += CLOUD_WIND*iTime;\n    float dens = noise(a_pos/2.);\n    float scl = 1.;\n    float str = 1.;\n    \n    for(int i = 0; i < oct; i++)\n    {\n\t\tdens += noise(a_pos*scl)*str;\n        str*=0.6;\n        scl*=1.9;\n    }\n    dens -= 1.8;\n    dens *= 2.;\n    dens += CLOUD_COVER;\n    #ifndef USE_3D\n    dens -= pos.z-CLOUD_HEIGHT;\n    #endif\n \treturn dens;   \n}\n\nfloat march_light(vec3 pos, vec3 dir)\n{\n    float dens = 0.;\n    float depth = 0.001;\n\tfor(int i = 0; i < LIGHT_STEPS; i++)\n    {\n\t\tvec3 p = pos + dir*depth;\n        depth += LIGHT_FAR/float(LIGHT_STEPS);\n        \n        dens += clamp(get_cloud_density(p, CLOUD_OCT), 0., 1.);\n        if(depth > LIGHT_FAR || pos.z > CLOUD_END_HEIGHT){return dens/float(LIGHT_STEPS);}\n    }\n    return dens/float(LIGHT_STEPS);\n}\n\n\nvec3 draw_sky(vec3 pos)\n{\n    vec3 col = mix(vec3(0.8, 0.8, 0.95), vec3(0.5, 0.5, 0.7), pos.z/FAR);\n    vec3 sun = LIGHT_DIR * FAR;\n    col += clamp(LIGHT_COL * 1.-clamp(distance(sun, pos)/FAR*5., 0., 1.), 0., 1.);\n\treturn col;\n}\nvec2 march_volume(vec3 pos, vec3 dir)\n{\n\tfloat dens = 0.;\n    float depth = 0.001;\n    float light_dens = 0.;\n\tfor(int i = 0; i < VOLUME_STEPS; i++)\n    {\n\t\tvec3 p = pos + dir*depth;\n        depth += VOLUME_FAR/float(VOLUME_STEPS);\n        light_dens += march_light(p, LIGHT_DIR);\n        dens += clamp(get_cloud_density(p, CLOUD_OCT), 0., 1.);\n        if(depth > VOLUME_FAR || pos.z > CLOUD_END_HEIGHT){return vec2(dens/float(VOLUME_STEPS), light_dens/float(VOLUME_STEPS));}\n    }\n    return vec2(dens/float(VOLUME_STEPS), light_dens/float(VOLUME_STEPS));\n}\nvec4 draw_clouds(vec3 pos, vec3 dir)\n{\n    vec3 col = CLOUD_COL;\n    #ifdef USE_VOLUME\n    vec2 r = march_volume(pos, dir);\n    float dens = r.x;\n    float light = 1.-r.y;\n    #endif\n    #ifndef USE_VOLUME\n\tfloat dens = clamp(get_cloud_density(pos, CLOUD_OCT), 0., 1.);\n    float light = 1.;\n    if(dens > 0.05)\n    {\n\t\tlight = 1.-march_light(pos, LIGHT_DIR);\n        \n    }\n    #endif\n    vec3 light_col = LIGHT_COL*light + AMBIENT*(1.7-dens+0.5);\n    col = CLOUD_COL*light_col;\n\n    return vec4(col, dens);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    CAMERA_POS.y = sin(iTime*0.1)*8.;\n    CAMERA_POS.x = cos(iTime*0.1)*8.;\n    LIGHT_DIR.z = sin(iTime*0.1);\n    LIGHT_DIR.x = cos(iTime*0.1);\n    vec3 local_dir = ray_direction(80., iResolution.xy, fragCoord);\n    \n    mat4 view = view_matrix(CAMERA_POS, CAMERA_LOOK, vec3(0.,0.,1.));\n    vec3 dir = (view * vec4(local_dir, 0.)).xyz;\n    \n    vec3 pos = CAMERA_POS + dir * FAR;\n    vec3 col = draw_sky(pos);\n    \n\n    if(pos.z > CLOUD_HEIGHT)\n    {\n\t\tpos = vec3(vec2(pos.x, pos.y)/pos.z, CLOUD_HEIGHT);\n        vec4 cloud = draw_clouds(pos, dir);\n        col = mix(col, cloud.xyz, clamp(cloud.w, 0., 1.));\n    }\n    //if(false)\n    if(pos.z <= 0.)\n    {\n        pos = vec3(vec2(pos.x, pos.y)/pos.z, 0.);\n\t\tcol = vec3(0.);\n        float sc = 0.005;\n        for(int i = 0; i < 8; i++)\n        {\n\t\t\tcol += mix(vec3(0.7), vec3(0.2), mod(floor(pos.x-float(i)*sc) + floor(pos.y+float(i)*sc), 2.));\n        }\n        col /= 8.;\n        float h = CLOUD_HEIGHT;\n        #ifndef USE_3D\n        h-=8.;\n        #endif\n        vec3 c_pos = pos + vec3(LIGHT_DIR.xy, h);\n        col *= (LIGHT_COL * 1.-vec3(clamp(get_cloud_density(-c_pos, CLOUD_OCT), 0., 1.)))+AMBIENT;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}