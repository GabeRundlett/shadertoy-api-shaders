{
    "Shader": {
        "info": {
            "date": "1572646664",
            "description": "test",
            "flags": 32,
            "hasliked": 0,
            "id": "WsdXRs",
            "likes": 13,
            "name": "Complex inverse diffusion  ",
            "published": 3,
            "tags": [
                "waves",
                "rainbow"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 507
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 pos )\n{\n    vec4  field = SAMPLR(F1, pos);\n  \n    vec2 psi = field.xy; \n  \n     vec2 red = vec2(1,0), green = vec2(-0.5,sqrt(3.)*0.5), blue = vec2(-0.5,-sqrt(3.)*0.5);\n   \n    vec3 RGB =  vec3(dot(psi, red),dot(psi, green),dot(psi, blue));\n    fragColor.xyz = RGB*RGB*2.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 field, in vec2 pos)\n{   \n    field = SAMPLR(F1, pos);\n    \n    //mouse interaction\n   // if(iMouse.z>0.)\n      \n    field.x += 0.1*gaussian(pos-iMouse.xy, 1000.);\n    float phi = 0.05;\n    mat2 rotation = mat2(cos(phi), -sin(phi), sin(phi), cos(phi)); //exp(i*phi)\n    field.xyz += dt*Laplacian(F1, pos,size).xyz;\n    field.xyz = normalize( field.xyz );\n    field.xy *= rotation;\n    \n    if(iFrame < 1)\n    {\n        float f = gaussian(pos-size*0.45, 30.)+gaussian(pos-size*0.55, 30.);\n        field.xyz = 1.*vec3(f,0.,1.-f);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define size iResolution.xy\n#define SAMPLR(a, pos) texture((a), (pos)/size)\n#define SAMPLRs(a, pos,sz) texture((a), (pos)/sz)\n#define F1 iChannel0\n\n//scales\n#define dt -0.2\n#define dx 1.\n#define border 0.01\n#define PI 3.14159265\n\n\nvec4 Laplacian(sampler2D F, vec2 pos, vec2 sz)\n{\n    vec4 a = SAMPLRs(F, pos,sz);\n\tvec4 x0 = SAMPLRs(F, pos + vec2(-1,0),sz);\n    vec4 x1 = SAMPLRs(F, pos + vec2(1,0),sz);\n    vec4 y0 = SAMPLRs(F, pos + vec2(0,1),sz);\n    vec4 y1 = SAMPLRs(F, pos + vec2(0,-1),sz);\n \n\treturn (x0+x1+y0+y1-4.f*a)/(dx*dx);\n}\n\nfloat gaussian(vec2 pos, float r)\n{\n    pos /= r;\n    return exp(-dot(pos,pos));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}