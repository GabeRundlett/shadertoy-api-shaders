{
    "Shader": {
        "info": {
            "date": "1609451590",
            "description": "Artistic interpretation of Monte-Carlo Scattering simulation",
            "flags": 32,
            "hasliked": 0,
            "id": "tldyRB",
            "likes": 37,
            "name": "Electron Monte-Carlo",
            "published": 3,
            "tags": [
                "physics"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 621
        },
        "renderpass": [
            {
                "code": "Main {\n    vec4 c = C(U);\n    Q = c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define A(i) texelFetch(iChannel0,ivec2(i,0),0);\n#define B(i) texelFetch(iChannel1,ivec2(i,0),0);\n#define C(U) texture(iChannel2,(U)/R)\n#define D(U) texture(iChannel3,(U)/R)\n#define Main void mainImage(out vec4 Q, vec2 U)\n#define N 100.\nvec3 hash33(vec3 p3)\n{ // Dave H\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\nfloat ln (vec2 p, vec2 a, vec2 b) {\n\treturn length(p-a-(b-a)*clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.));\n}\nfloat absmin(float a, float b) {\n\tif (b>0.) return min(a,b);\n    return a;\n}\nfloat intersect (vec2 coes) {\n\tfloat i=1e4;\n    float det = coes.x*coes.x-4.*coes.y;\n    if (det < 0.) return i;\n    det =sqrt(det);\n    i = absmin(i,0.5*(-coes.x+det));\n    i = absmin(i,0.5*(-coes.x-det));\n    return i;\n}\nfloat plane (vec3 p, vec3 d, vec3 c, vec3 n) {\n// dot(p+d*i-c,n) = 0\n// d.n i =-(p-c).n\n    return absmin(-dot(p-c,n)/dot(d,n),1e9);\n}\nfloat sphere (vec3 p, vec3 d, vec3 c, float r) {\n\tc = p-c;\n    return intersect(vec2(2.*dot(c,d),dot(c,c)-r*r));\n}\nvec3 tubenor (vec3 p, vec3 a, vec3 b) {\n    float d = dot(p-a,b-a)/dot(b-a,b-a);\n    vec3 q = a + (b-a)*d;\n    q = p-q;\n    if (length(q)>0.) return normalize(q);\n    else return vec3(0);\n}\nfloat tube (vec3 p, vec3 d, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a,\n         ap = p-a;\n    float \n        abd = dot(ab,d),\n        abab = dot(ab,ab),\n        apd = dot(ap,d),\n        abap = dot(ab,ap),\n        apap = dot(ap,ap),\n        l = sqrt(abab);\n   float x = intersect(vec2 (\n        2.*(apd-abap*abd/abab),\n        apap-r*r-abap*abap/abab\n    )/(1.-abd*abd/abab));\n    \n    vec3 i = p+d*x;\n    float t = dot(i-a,ab)/l;\n    if (t > 0. && t < l) return x;\n    else return 1e4;\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Position update\nMain {\n    if (U.x>N || U.y > 2.) discard;\n    Q = A(U.x);\n    vec4 v = B(U.x);\n    Q += v;\n    if (iFrame < 1) {\n        Q = vec4(U.x/R.x*1e-3,-1,0,0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// velocity update - random forces \nMain {\n    if (U.x>N || U.y > 2.) discard;\n    Q = B(U.x);\n    vec4 p = A(U.x);\n    vec3 f = vec3(0);\n    \n    Q.xyz += f;\n    Q.y += -2e-5;\n    vec3 h = hash33(floor(12000.*p.xyz))*2.-1.;\n    float hl = length(h);\n    float l = length(Q.xyz);\n    if (hl>0.&&l>0.) {\n        float d = min(0.,dot(normalize(h),normalize(Q.xyz)));\n        vec3 v = Q.xyz + .01*d*normalize(h)*pow(hl,2.);\n        if (length(v)>0.)\n        Q.xyz = .985*l*normalize(v);\n    }\n    if (iFrame < 1) {\n        Q = vec4(0,3.3e-2,0,0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// draw tubes and spheres and accumulate the image\nMain {\n\n    \n    vec3 p = vec3(0,0,-1.1),\n         d = normalize(vec3(2.*(U-0.5*R)/R.y,1));\n    if (iFrame < 1) {\n        Q = vec4(0,0,0,1e9);\n        float i = plane(p,d,vec3(0,0,2),vec3(-.5,0,1));\n        if (i > 0. && i < Q.w) Q = vec4(0,1,1,i);\n        i = plane(p,d,vec3(0,-1,0),vec3(0,1,0));\n        if (i > 0. && i < Q.w) Q = vec4(1,1,0,i);\n        return;\n    }\n    Q = C(U);\n    #define rad max(.1*exp(-float(iFrame)*3e-2),.001)\n    for (float n = 0.; n < N; n++) {\n        vec4 a = A(n);\n        vec4 b = B(n);\n        float i = tube(p,d,a.xyz,a.xyz+b.xyz,rad);\n        if (i>0.&&i<Q.w) {\n            vec3 q = p + d*i;\n            Q.xyz = (reflect(d,tubenor(q,a.xyz,a.xyz+b.xyz)).x*0.5+0.8)*(0.5+0.5*sin(float(iFrame)*.02+vec3(1,2,3)));\n            Q.w = i;\n        }\n        i = sphere(p,d,a.xyz,rad);\n        if (i>0.&&i<Q.w) {\n            vec3 q = p + d*i;\n            Q.xyz = (reflect(d,normalize(q-a.xyz)).x*0.2+0.8)*(0.5+0.5*sin(float(iFrame)*.02+vec3(1,2,3)));\n            Q.w = i;\n        }\n    }\n    p = p + d*Q.w;\n    d = normalize(vec3(1,1,-1)-p);\n    p += .01*d;\n    for (float n = 0.; n < N; n++) {\n        vec4 a = A(n);\n        vec4 b = B(n);\n        float i = tube(p,d,a.xyz,a.xyz+b.xyz,rad);\n        if (i>0.&&i<1e3) {Q.xyz *= .8;break;}\n        i = sphere(p,d,a.xyz,rad);\n        if (i>0.&&i<1e3) {Q.xyz *= .8;break;}\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}