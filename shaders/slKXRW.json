{
    "Shader": {
        "info": {
            "date": "1641286358",
            "description": "Here is my attempt on visualizing fft in polar coordinates. \n\nIt would be really cool if i could get the soundcloud stream to work :(\n\nFork from https://www.shadertoy.com/view/4lGSzy",
            "flags": 0,
            "hasliked": 0,
            "id": "slKXRW",
            "likes": 3,
            "name": "circle of silence",
            "published": 3,
            "tags": [
                "fft",
                "music",
                "vfx",
                "polar",
                "coordinates",
                "dubstep"
            ],
            "usePreview": 0,
            "username": "ersteller",
            "viewed": 287
        },
        "renderpass": [
            {
                "code": "//Fork from https://www.shadertoy.com/view/4lGSzy\n\n// inspired by vfx used by DSG https://www.youtube.com/watch?v=Qg1qZq5yjps\n\n\n#define time iTime\n\nvec3 mixc(vec3 col1, vec3 col2, float v)\n{\n    v = clamp(v,0.0,1.0);\n    return col1+v*(col2-col1);\n}\n\nconst float Semitone  = 1.05946309436; //12 notes between an octave, octave is 2, so a semitone is 2^(1/12)\n\nfloat KeyToFrequency(float n){\n    return pow(Semitone,(n-8.))*440./48000.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = uv*2.0-1.0;\n    p.x*=iResolution.x/iResolution.y;\n    //p.y+=0.5;  // for fft draw pos\n    \n    // polar coordinates \n    vec2 st = vec2(atan(p.x, p.y)/(1.*3.1415),length(p));  // x is now angle and y is radius\n    \n    st.x = abs(st.x);\n    // uv = st;\n\n    vec3 col = vec3(0.0);\n    \n    float nBands = 96.0;\n    float i = floor(st.x*nBands);\n    // float f = fract(uv.x*nBands);\n    float band = KeyToFrequency(i);\n    \n    // first texture row is frequency data\n\tfloat fft  = textureLod( iChannel0, vec2(band,0.25), 0.0 ).x; \n    float s = fft;\n    s *= s;  // improve signal to noise\n    \n    // second texture row is the sound wave\n\tfloat wave = textureLod( iChannel0, vec2(uv.x,0.75), 0.0 ).x;\n    \n    /* Gradient colors and amount here */\n    float roffset = 0.4;\n    const int nColors = 5;\n    vec3 colors[nColors];  \n    colors[0] = vec3(1.0,1.0,1.0);\n    colors[1] = vec3(0.0,0.0,1.0);\n    colors[2] = vec3(0.0,1.0,1.0);\n    colors[3] = vec3(1.0,1.0,0.0);\n    colors[4] = vec3(1.0,0.0,0.0);\n    \n    vec3 gradCol = colors[0];\n    float n = float(nColors)-1.0;\n    for(int i = 1; i < nColors; i++)\n    {\n\t\tgradCol = mixc(gradCol,colors[i],(s-float(i-1)/n)*n);\n    }\n    \n    // the circle of silence\n    col+= vec3(1.-smoothstep(0.,0.01,(st.y-s*.75)-roffset));\n    \n    //col += vec3(1.0-smoothstep(0.0,0.01,p.y-s*1.5));\n    col *= gradCol;\n\n    //col = mix(vec3(0.0),col,smoothstep(-0.01,0.01,p.y));\n\n    //col *= smoothstep(0.125,0.375,f);\n    //col *= smoothstep(0.875,0.625,f);\n    \n\n    \n    col += 1.0 - smoothstep(0.0, 0.01, abs(0.8*wave - uv.y - 0.3));\n    col = clamp(col, 0.0, 1.0);\n\n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}