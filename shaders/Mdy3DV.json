{
    "Shader": {
        "info": {
            "date": "1456429762",
            "description": "Transitioning between different shapes produced by the superformula. https://en.wikipedia.org/wiki/Superformula",
            "flags": 0,
            "hasliked": 0,
            "id": "Mdy3DV",
            "likes": 9,
            "name": "Bouncy Supershapes / rev2",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "superformula",
                "supershape"
            ],
            "usePreview": 0,
            "username": "blurryroots",
            "viewed": 973
        },
        "renderpass": [
            {
                "code": "// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\n#define PI 3.14159\n#define TWO_PI 6.28319\n\nconst float Gold = (1.0+sqrt(5.0)) / 2.0;\nconst float InvGold = 1. / Gold;\nconst float OneMinusInvGold = 1.0 - InvGold;\nconst float OneMinusInvGoldSquared = OneMinusInvGold * OneMinusInvGold;\n\nfloat superformula (float angle, vec4 shape, vec2 symmetry) {    \n    float m = shape.x;\n    float n1 = shape.y;\n    float n2 = shape.z;\n    float n3 = shape.w;\n    float a = symmetry.x;\n    float b = symmetry.y;\n\n    float rpart = (m * angle) / 4.;\n    float apart = abs (cos (rpart) / a);\n    float bpart = abs (sin (rpart) / b);\n\n    float r = pow (\n        pow (apart, n2) + pow (bpart, n3),\n        -1. / n1\n    );\n    \n    return r;\n}\n\nfloat angleBetween (vec2 a, vec2 b) {\n    float cosTheta = dot (a, b) / (length (a) * length (b));\n    \n    return acos (cosTheta);\n}\n\nvec4 createShape (float t) {    \n    float m = 1. + abs (sin (t) + cos (1.6 * t)) * 8.;\n    float n1 = 1. + abs (sin (2. * t) * 4.);\n    float n2 = 1. + (cos (t + PI / 1.6) * 2.);\n    float n3 = 2. + sin (1.6 * t + PI) * 4.;\n    \n    return vec4 (m, n1, n2, n3);\n}\n\nvec2 createSymmetry (float t) {\n    return  vec2 (.618 + sin (t + PI / 2.) * .5, .5 + cos (t) * .618);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    float restraint = Gold * PI;\n    float radius = iResolution.y / restraint;\n    float border = 23.07;\n    vec4 borderColor = vec4 (0.618, 0.123, 0.987, 1.0);\n    \n    vec2 center = iResolution.xy / 2.;\n    vec2 d = fragCoord - center;\n    vec2 up = vec2 (0., 1.);\n    vec2 uv = fragCoord.xy / iResolution.xy;\n        \n    float t = iTime * 0.6;\n    float angle = angleBetween (up, d);\n    vec2 symmetry = createSymmetry (t);\n    vec4 shape = createShape (t);\n    float r = superformula (angle, shape, symmetry) * radius;\n    \n    float size = length (d); \n    vec4 colorFromShape = 1.-normalize (shape);\n    \n    if (size <= r) {\n        vec2 texture_offset = 0.1*vec2(iTime, iTime/2.0);\n        vec4 noise = texture(iChannel0, uv*4. + texture_offset);\n        float much = (r-size);\n        fragColor = vec4(colorFromShape.rgb, much) + (noise*InvGold);\n    }\n    else if (size <= (r+border)) {\n        float much = ((r+border)-size)/border;\n        fragColor = mix(borderColor, colorFromShape, much);\n    }\n    else {\n        vec2 texture_offset = vec2(0.1*cos(iTime), tan(iTime/2.0));\n        vec4 noise = texture(iChannel0, uv + texture_offset);\n        fragColor = vec4 (vec3(OneMinusInvGoldSquared), 1.) + OneMinusInvGoldSquared*vec4((.5*sin(iTime)+.5)*noise.rgb, 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}