{
    "Shader": {
        "info": {
            "date": "1688771719",
            "description": "My first experiment, have fun.\n\nMouse controls:\nleft: changing complexity over time\nright: constant complexity over time\n",
            "flags": 0,
            "hasliked": 0,
            "id": "mtGXRD",
            "likes": 5,
            "name": "Psy Radiance",
            "published": 3,
            "tags": [
                "interactive",
                "psychedelic"
            ],
            "usePreview": 0,
            "username": "PhiVape",
            "viewed": 166
        },
        "renderpass": [
            {
                "code": "float sdEquilateralTriangle(  in vec2 p, in float r ){\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\nvec3 palette1( float t ) {\n\n    vec3 a = vec3(0.550, 0.580, 0.550);\n    vec3 b = vec3(0.500, 0.500, 0.500);\n    vec3 c = vec3(2.025, 2.025, 2.025);\n    vec3 d = vec3(0.110, 0.333, 0.577);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nvec3 palette5( float t ) {\n\n    vec3 a = vec3(0.718, 0.768, 0.548);\n    vec3 b = vec3(0.515, 0.550, 0.550);\n    vec3 c = vec3(1.120, 1.120, 1.120);\n    vec3 d = vec3(0.000, 0.333, 0.667);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 iMouse = iMouse.xy / iResolution.xy;\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    uv.x = abs(uv.x);\n    vec2 polar = vec2(distance(uv.xy, vec2(0,0)), atan(uv.y,uv.x));\n    \n    for(int i = 0; i < 2;i++){\n        polar.xy = abs(polar.xy);\n        float complexity = mix(0.5*(sin(0.3*iTime)+2.3),2. , iMouse.x);\n        polar = fract(complexity*polar)-0.5;\n    }\n      \n    vec2 triangle = vec2(0.,0.15);\n    float factor = 3.+0.0005*sin(iTime)*sin(iTime);\n  \n    polar.xy = factor*abs(polar.xy);\n    float d_t = sdEquilateralTriangle(polar + triangle, 0.6 );\n    d_t = 0.5*sin(1.5*sin(0.4*iTime+d_t*0.7)*abs(d_t));\n      \n    vec4 col1 = vec4(palette1(3.*d_t + 0.5*iTime),1.0);\n    vec4 col2 = vec4(palette5(3.*d_t + 0.5*iTime),1.0);\n    float col_slider = 0.5*sin(1.5*iTime)+0.5;\n    vec4 col = mix(col1, col2, col_slider);\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}