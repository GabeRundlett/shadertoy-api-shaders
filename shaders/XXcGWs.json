{
    "Shader": {
        "info": {
            "date": "1727564776",
            "description": "a scene with a moving light source",
            "flags": 0,
            "hasliked": 0,
            "id": "XXcGWs",
            "likes": 1,
            "name": "GPT 4o: Moving Light",
            "published": 3,
            "tags": [
                "gpt"
            ],
            "usePreview": 0,
            "username": "sferrando",
            "viewed": 32
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Time variable for animation\n    float time = iTime * 0.5;\n    \n    // Sphere center and radius\n    vec3 sphereCenter = vec3(0.0, 0.0, 3.0);\n    float sphereRadius = 1.0;\n    \n    // Ray origin and direction\n    vec3 rayOrigin = vec3(0.0, 0.0, 0.0);\n    vec3 rayDir = normalize(vec3(uv, 1.0));\n    \n    // Moving light source\n    vec3 lightPos = vec3(2.0 * cos(time), 1.0, 2.0 * sin(time));\n    vec3 lightColor = vec3(1.0, 1.0, 0.9);\n    \n    // Ray-sphere intersection\n    vec3 oc = rayOrigin - sphereCenter;\n    float b = dot(oc, rayDir);\n    float c = dot(oc, oc) - sphereRadius * sphereRadius;\n    float h = b * b - c;\n    \n    if (h < 0.0) {\n        // No intersection\n        fragColor = vec4(0.0);\n    } else {\n        // Intersection point\n        h = sqrt(h);\n        float t = -b - h;\n        if (t < 0.0) t = -b + h;\n        vec3 hitPoint = rayOrigin + t * rayDir;\n        vec3 normal = normalize(hitPoint - sphereCenter);\n        \n        // Lighting calculation\n        vec3 lightDir = normalize(lightPos - hitPoint);\n        float diff = max(dot(normal, lightDir), 0.0);\n        \n        // Color the sphere\n        vec3 sphereColor = vec3(0.0, 0.5, 1.0); // Blue color\n        fragColor = vec4(sphereColor * diff * lightColor, 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}