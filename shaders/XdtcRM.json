{
    "Shader": {
        "info": {
            "date": "1575884106",
            "description": "branchless 3D implementation/demo of \"A Fast Voxel Traversal Algorithm for Ray Tracing\" by Amanatides & Woo (http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.42.3443&rep=rep1&type=pdf)\n",
            "flags": 32,
            "hasliked": 0,
            "id": "XdtcRM",
            "likes": 52,
            "name": "Fast Voxel Traversal Algorithm",
            "published": 3,
            "tags": [
                "3d",
                "voxel",
                "algorithm",
                "traversal"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 3511
        },
        "renderpass": [
            {
                "code": "vec4 load(vec3 p, float f) {\n    if (min(p.x,min(p.y,p.z)) < 0.0)\n        return vec4(0.0);\n   \tif (max(p.x,max(p.y,p.z)) >= (R / pow(2.0,f)))\n        return vec4(0.0);\n    vec2 uv = vec2(float(int(p.z)) * R + p.x, f * R + p.y);    \n    return texture(iChannel0, uv / iChannelResolution[0].xy);\n}\n\nbool cube(vec3 org, vec3 dir, out float near, out float far) {\n    vec3 p = -org/dir;\n    vec3 q = 0.5/abs(dir);\n\tvec3 tmin = p - q;\n\tvec3 tmax = p + q;\n    near = max(tmin.x,max(tmin.y,tmin.z));\n\tfar = min(tmax.x,min(tmax.y,tmax.z));\n\treturn near < far && far > 0.0;\n}\n\nvec2 rotate(vec2 p, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return vec2(\n    \tp.x * c + p.y * s,\n    \tp.x * s - p.y * c );\n}\n\nvec3 hue2rgb (float hue) {\n    return clamp(abs(mod(hue * 6.0 + vec3(0.0,4.0,2.0),6.0) - 3.0) - 1.0,0.0,1.0);\n}\n\n// maps n=0 to blue, n=1 to red, n=0.5 to green\nvec3 normhue (float n)  {\n    return hue2rgb((1.0 - clamp(n,0.0,1.0)) * 0.66667);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n#if 0\n    vec4 c = texture(iChannel0, uv);\n    // Output to screen\n    fragColor = vec4(c.rgb * c.a,1.0);\n#elif 0\n    float w = sin(iTime)*0.5+0.5;\n    vec4 c0 = load(vec3(uv, w) * R / pow(2.0, 0.0), 0.0);\n    c0 = c0 * c0.a;\n    vec4 c1 = load(vec3(uv, w) * R / pow(2.0, 1.0), 1.0);\n    c1 = c1 * c1.a;\n    fragColor = vec4((c0.rgb + c1.rgb)*0.5,1.0);\n#else\n    float a = iTime;\n    vec3 ro = vec3(0.0, 0.0, -2.0);\n    vec2 ndc = uv*2.0 - 1.0;\n    ndc *= 0.5;\n    ndc.x *= iResolution.x / iResolution.y;\n    vec3 rd = vec3(ndc, 1.0);\n    float h = -0.5;\n    ro.yz = rotate(ro.yz, h);\n    rd.yz = rotate(rd.yz, h);\n    ro.xz = rotate(ro.xz, a);\n    rd.xz = rotate(rd.xz, a);\n    \n    vec3 lit = normalize(vec3(1.0,2.0,-3.0));\n    lit.yz = rotate(lit.yz, h);\n    lit.xz = rotate(lit.xz, a);\n    \n   \tfragColor = vec4(0.0);\n    float near; float far;    \n    if (cube(ro, rd, near, far)) {\n        const int N = 128;\n        vec3 c = vec3(0.0);\n    \tfloat k = 1.0;\n        float d = 1.0 / float(N);\n        float ln = (far - near) * d;        \n        int maxit = 0;\n        #if 0\n        for (int i = 1; i < N; ++i) {\n            float t = near + (far - near) * float(i) * d;\n\t        vec3 p = clamp(ro + rd * t + 0.5, vec3(0.0), vec3(1.0));\n            float lod = 0.0;\n\t        vec4 col = load(p * R / pow(2.0, lod), lod);\n            float a = clamp(pow(col.a, 6.0)*ln*32.0, 0.0, 1.0); \n            c = c + col.rgb*a*k;\n            k = k*(1.0 - a);\n            if (a > 0.0) {\n            \tmaxit = i;\n            }\n            #if 1\n            if (k < (1.0/255.0)) {\n                break;\n            }\n            #endif\n        }\n        #else\n        {\n            float lod = 1.0;\n            float rez = 1.0 / pow(2.0, lod);\n            ro = ((ro + rd * near) + 0.5) * R * rez;\n            rd = normalize(rd) * (far - near) * R * rez;\n            vec3 p = floor(ro);\n            vec3 rdinv = 1.0 / rd;\n            vec3 stp = sign(rd);\n            vec3 delta = min(1.0 / abs(rd), 1000000.0);\n            // start at intersection of ray with initial cell\n            vec3 t_max = abs((p + max(stp, 0.0) - ro) * rdinv);\n            \n            \n            for( int i=0; i<128; i++ ) {\n                vec4 col = load(p, lod);\n                \n                vec3 n = normalize(col.rgb*2.0 - 1.0);\n                float lum = 1.0;//max(0.0, dot(n, lit));\n                \n                float a = col.a;\n                c = c + col.rgb*(vec3(0.1,0.1,0.2) + lum)*a*k;\n                k = k*(1.0 - a);                \n                \n\t\t\t\tfloat next_t = min(t_max.x,t_max.y);\n        \t\tif (next_t > 1.0) break;\n                \n                vec3 cmp = step(t_max.xyz, t_max.zxy) * step(t_max.xyz, t_max.yzx);\n                t_max += delta * cmp;\n                p += stp * cmp;                \n            }\n        }        \n        #endif\n#if 0\n        fragColor = vec4(normhue(float(maxit)/float(N-1)), 1.0);\n#else\n        fragColor = vec4(c, 1.0);\n#endif\n    }\n    \n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 load(vec2 p) {\n    return texture(iChannel0, p / iChannelResolution[0].xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float u = mod(fragCoord.x, R);\n\tfloat v = mod(fragCoord.y, R);\n    float w = (fragCoord.x - u) / R;\n    float f = (fragCoord.y - v) / R;\n    if (f < 0.5) {\n        //u -= 0.5;\n        //v -= 0.5;\n\t    vec3 p = clamp(mod(vec3(u, v, w) * pow(2.0, f) / R, vec3(1.0)), 0.0, 1.0);\n        p = p*2.0 - 1.0;\n        vec3 n = normalize(p);\n        float a = length(p) - 1.0;//(sin(iTime*0.7123)*0.5+0.5);\n        vec3 c = n * 0.5 + 0.5;\n        c *= normalize(p)*0.5+0.5;\n    \tfragColor = vec4(c,step(a, 0.0));\n    } else {\n        u -= 0.5;\n        v -= 0.5;\n        //w -= 0.5;\n        f = f - 1.0;\n       \tvec4 a = load(vec2(w * 2.0 * R + u * 2.0, f * R + v * 2.0));\n        a += load(vec2(w * 2.0 * R + u * 2.0 + 1.0, f * R + v * 2.0));\n        a += load(vec2(w * 2.0 * R + u * 2.0, f * R + v * 2.0 + 1.0));\n        a += load(vec2(w * 2.0 * R + u * 2.0 + 1.0, f * R + v * 2.0 + 1.0));\n        \n       \ta += load(vec2((w * 2.0 + 1.0) * R + u * 2.0, f * R + v * 2.0));\n        a += load(vec2((w * 2.0 + 1.0) * R + u * 2.0 + 1.0, f * R + v * 2.0));\n        a += load(vec2((w * 2.0 + 1.0) * R + u * 2.0, f * R + v * 2.0 + 1.0));\n        a += load(vec2((w * 2.0 + 1.0) * R + u * 2.0 + 1.0, f * R + v * 2.0 + 1.0));\n        \n        fragColor = vec4(a / 8.0);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float R = 16.0;\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}