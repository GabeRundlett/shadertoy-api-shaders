{
    "Shader": {
        "info": {
            "date": "1466051047",
            "description": "Getting somewhere",
            "flags": 0,
            "hasliked": 0,
            "id": "ldd3Rn",
            "likes": 3,
            "name": "march learning: 2 shapes!",
            "published": 3,
            "tags": [
                "wip"
            ],
            "usePreview": 0,
            "username": "vsnchips",
            "viewed": 533
        },
        "renderpass": [
            {
                "code": "//# CLOCK : iTime\n\nfloat scope=1.0;\nfloat radius = 0.2;\nfloat pulsespeed = 0.2;\n\nvec3 origincam = vec3 (0.5,1.5,2.2);\nfloat camrotx = 0.;\nfloat camroty = 0.;\n\n//sphere\nfloat sphere (vec3 p,float rad)\n{\n    //return length (p) - rad;\n //  return length(frp) - rad *1.;\n return length(fract((2.*(p+.5))-1.)  -.5) - rad;\n}\n\n\n//cubeything\n\nfloat cubish (vec3 p, float size, float pw)\n{\n    vec3 ftbish= vec3(pow(fract(p.x)*2.-1.,2.),pow(fract(p.y)*2.-1.,2.),pow(fract(p.z)*2.-1.,2.));\n    vec3 bish= vec3(pow(p.x,pw),pow(p.y,pw),pow(p.z,pw));\n    return length (ftbish) - size;\n}\n\n\n\n// trace function finds surface\nfloat trace (vec3 o, vec3 r, float rad){ \n\n\tfloat t = 0.0;\n\tfor (int i = 0; i < 32; ++i) {\n        \n    \tvec3 newpoint= o + r * t;\n    \n        //shaping function:\n        float d= min (sphere(newpoint, 0.2-rad),cubish(newpoint, rad, 2.));    \n    \t//float d = sphere(newpoint, rad);\n        //float d = cubish(newpoint, 0.5 -rad, 2.);\n        \n    t += d * (0.5 + sin(iTime*10.)*0.01);\n         }\nreturn t;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    \n    //update camera, size, transforms\n    float ti = iTime;\n    radius = sin(ti*pulsespeed*10.)*0.2+0.21;\n    //camrotx = ti*10.8;\n    //camroty = ti*10.2;\n    if (iMouse.z > 0.) \n    {\n        origincam += (vec3(iMouse.xy/ iResolution.xy * 2. , 1.));\n    }\n    else {camroty = sin(ti)*-0.8; camrotx = 3.; \n          origincam = vec3 (0.5*sin(ti)+0.,0.5*sin(ti*2.3)+0.,1.2);}\n    \n       \n\tvec2 uv = fragCoord.xy / iResolution.xy * 2.0 -1.0; \n\n    vec3 ray= normalize(vec3( uv,scope));\n   ray.xz *= mat2 (cos (camrotx),-sin (camrotx),sin (camrotx),cos (camrotx));\n   ray.yz *= mat2 (cos (camroty),-sin (camroty),sin (camroty),cos (camroty));\n    \n    \n    float t=(trace(origincam,ray,radius));\n    float thisT=1./1.0+pow(t,3.)*1.0;\n  \n    \n    fragColor = vec4(t*0.1,thisT*0.001,uv.y*sin(iTime),1.0);\n   \n   \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}