{
    "Shader": {
        "info": {
            "date": "1684415212",
            "description": "CC0: Atans begone!\nTinkering around with an old shader\nManaged to remove atan from the loop which made me happy\nand thus sharing it\n",
            "flags": 64,
            "hasliked": 0,
            "id": "DtGGRd",
            "likes": 39,
            "name": "CC0: Atans begone!",
            "published": 3,
            "tags": [
                "travelling"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 792
        },
        "renderpass": [
            {
                "code": "// CC0: Atans begone!\n//  Tinkering around with an old shader\n//  Managed to remove atan from the loop which made me happy\n//  and thus sharing it\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst float bstart = 0.0;\nconst float bpm    = 150.0;\nconst float bhz    = bpm/60.0;\nconst float bperiod= 8.0/bhz;\n\n#define BTIME(n) ((n)*bperiod+bstart)\n\nfloat beatCount(float tm) {\n  return (tm-bstart)*bhz;\n}\n\nfloat beat(float tm) {\n  return smoothstep(0.25, 1.0, cos(TAU*beatCount(tm)));\n}\n\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\nvec3 skyColor(vec3 ro, vec3 rd) {\n  const vec3 gcol0 = HSV2RGB(vec3(0.55, 0.9, 0.035*0.5));\n  const vec3 gcol1 = HSV2RGB(vec3(0.75, 0.85, 0.035*2.0));\n  float b = beat(TIME);\n  vec2 pp = rd.xy;\n  b *= step(BTIME(6.0), TIME);\n  return mix(gcol0, gcol1, b)/max(dot(pp, pp), 0.0001);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/intersectors/intersectors.htm\nvec2 rayCylinder(vec3 ro, vec3 rd, vec3 cb, vec3 ca, float cr) {\n  vec3  oc = ro - cb;\n  float card = dot(ca,rd);\n  float caoc = dot(ca,oc);\n  float a = 1.0 - card*card;\n  float b = dot( oc, rd) - caoc*card;\n  float c = dot( oc, oc) - caoc*caoc - cr*cr;\n  float h = b*b - a*c;\n  if( h<0.0 ) return vec2(-1.0); //no intersection\n  h = sqrt(h);\n  return vec2(-b-h,-b+h)/a;\n}\n\nvec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {\n  const float rdd = 2.0;\n  const float mm  = 5.0;\n  const float rep = 16.0;\n\n  vec3 rd = normalize(-p.x*uu + p.y*vv + rdd*ww);\n  \n  vec3 skyCol = skyColor(ro, rd);\n\n  vec2 etc = rayCylinder(ro, rd, ro, vec3(0.0, 0.0, 1.0), 1.0);\n  vec3 etcp = ro+rd*etc.y;\n  rd.yx *= ROT(0.3*etcp.z);\n\n  vec3 col = skyCol;\n\n  float fi = smoothstep(BTIME(1.0), BTIME(3.0), TIME);\n\n  // I read somewhere that if you call atan in a shader you got no business writing shader code.\n  float a = atan(rd.y, rd.x);\n  for(float i = 0.0; i < mm; ++i) {\n    float ma = a;\n    float sz = rep+i*9.0;\n    float slices = TAU/sz; \n    float na = mod1(ma, slices);\n\n    float h1 = hash(na+13.0*i+123.4);\n    float h2 = fract(h1*3677.0);\n    float h3 = fract(h1*8677.0);\n\n    float tr = mix(0.5, 3.0, h1);\n    vec2 tc = rayCylinder(ro, rd, ro, vec3(0.0, 0.0, 1.0), tr);\n    vec3 tcp = ro + tc.y*rd;\n    vec2 tcp2 = vec2(tcp.z, a);\n  \n    float zz = mix(0.025, 0.05, sqrt(h1))*rep/sz;\n    float tnpy = mod1(tcp2.y, slices);\n    float fo = smoothstep(0.5*slices, 0.25*slices, abs(tcp2.y));\n    tcp2.x += h2*TIME;\n    tcp2.y *= tr*(PI/3.0);\n    vec2 tcp3 = tcp2;\n    float w = mix(.2, 1.0, h2);\n    float tnpx = mod1(tcp3.x, w);\n    float h4 = hash(tnpx+123.4);\n\n    tcp2/=zz;\n    tcp3/=zz;\n    float d1 = abs(tcp2.y);\n\n    float d2 = length(tcp3) - 2.0*h4;\n    d2 = abs(d2)-1.0*h4;\n    d2 = abs(d2)-0.5*h4;\n    float d = mix(d1, d2, fi*(0.5+0.5*sin(0.01*tcp2.x)));\n    d *= zz;\n\n    vec3 bcol = (1.0+cos(vec3(0.0, 1.0, 2.0)+TAU*h3+0.5*h2*h2*tcp.z))*0.00005;\n    bcol /= max(d*d, 0.00001+5E-7*tc.y*tc.y);\n    bcol *= exp(-0.04*tc.y*tc.y);\n    bcol *= smoothstep(-0.5, 1.0, sin(mix(0.125, 1.0, h2)*tcp.z));\n    bcol *= fo;\n    col += bcol;\n  }\n\n  return col;\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  float tm  = 3.0*TIME;\n  vec3 ro   = vec3(0.0, 0.0, tm);\n  vec3 dro  = normalize(vec3(1.0, 0.0, 3.0));\n  dro.xz *= ROT(0.2*sin(0.05*tm));\n  dro.yz *= ROT(0.2*sin(0.05*tm*sqrt(0.5)));\n  const vec3 up = vec3(0.0,1.0,0.0);\n  vec3 ww = normalize(dro);\n  vec3 uu = normalize(cross(up, ww));\n  vec3 vv = (cross(ww, uu));\n  vec3 col = color(ww, uu, vv, ro, p);\n  col -= 0.125*vec3(0.0, 1.0, 2.0).yzx*length(pp);\n  col = aces_approx(col);\n  col *= smoothstep(BTIME(0.0), BTIME(0.25), TIME);\n  col = sqrt(col);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect(p, pp);\n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 33329,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/jezbuddha/astral-traveller-1?si=fdf3916529a44e1ba0048a0098c59316&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}