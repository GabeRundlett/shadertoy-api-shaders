{
    "Shader": {
        "info": {
            "date": "1666112954",
            "description": "Huge credit to sonicether his bloom implementation that is essential for this shader: https://www.shadertoy.com/view/lstSRS\nWould be glad to get some feedback if you have some bug or about how I can improve this shader :)\n",
            "flags": 96,
            "hasliked": 0,
            "id": "csf3D4",
            "likes": 82,
            "name": "Space Rainbow Road",
            "published": 3,
            "tags": [
                "sdf",
                "road",
                "bloom",
                "stars",
                "rainbow"
            ],
            "usePreview": 1,
            "username": "rcargou",
            "viewed": 2622
        },
        "renderpass": [
            {
                "code": "\nvec4 cubic(float x)\n{\n    float x2 = x * x;\n    float x3 = x2 * x;\n    vec4 w;\n    w.x =   -x3 + 3.0*x2 - 3.0*x + 1.0;\n    w.y =  3.0*x3 - 6.0*x2       + 4.0;\n    w.z = -3.0*x3 + 3.0*x2 + 3.0*x + 1.0;\n    w.w =  x3;\n    return w / 6.0;\n}\n\nvec4 BicubicTexture(in sampler2D tex, in vec2 coord)\n{\n\tvec2 resolution = iResolution.xy;\n\n\tcoord *= resolution;\n\n\tfloat fx = fract(coord.x);\n    float fy = fract(coord.y);\n    coord.x -= fx;\n    coord.y -= fy;\n\n    fx -= 0.5;\n    fy -= 0.5;\n\n    vec4 xcubic = cubic(fx);\n    vec4 ycubic = cubic(fy);\n\n    vec4 c = vec4(coord.x - 0.5, coord.x + 1.5, coord.y - 0.5, coord.y + 1.5);\n    vec4 s = vec4(xcubic.x + xcubic.y, xcubic.z + xcubic.w, ycubic.x + ycubic.y, ycubic.z + ycubic.w);\n    vec4 offset = c + vec4(xcubic.y, xcubic.w, ycubic.y, ycubic.w) / s;\n\n    vec4 sample0 = texture(tex, vec2(offset.x, offset.z) / resolution);\n    vec4 sample1 = texture(tex, vec2(offset.y, offset.z) / resolution);\n    vec4 sample2 = texture(tex, vec2(offset.x, offset.w) / resolution);\n    vec4 sample3 = texture(tex, vec2(offset.y, offset.w) / resolution);\n\n    float sx = s.x / (s.x + s.y);\n    float sy = s.z / (s.z + s.w);\n\n    return mix( mix(sample3, sample2, sx), mix(sample1, sample0, sx), sy);\n}\n\nvec3 ColorFetch(vec2 coord)\n{\n \treturn texture(iChannel0, coord).rgb;   \n}\n\nvec3 BloomFetch(vec2 coord)\n{\n \treturn BicubicTexture(iChannel3, coord).rgb;   \n}\n\nvec3 Grab(vec2 coord, const float octave, const vec2 offset)\n{\n \tfloat scale = exp2(octave);\n    \n    coord /= scale;\n    coord -= offset;\n\n    return BloomFetch(coord);\n}\n\nvec2 CalcOffset(float octave)\n{\n    vec2 offset = vec2(0.0);\n    \n    vec2 padding = vec2(10.0) / iResolution.xy;\n    \n    offset.x = -min(1.0, floor(octave / 3.0)) * (0.25 + padding.x);\n    \n    offset.y = -(1.0 - (1.0 / exp2(octave))) - padding.y * octave;\n\n\toffset.y += min(1.0, floor(octave / 3.0)) * 0.35;\n    \n \treturn offset;   \n}\n\nvec3 GetBloom(vec2 coord)\n{\n \tvec3 bloom = vec3(0.0);\n    \n    //Reconstruct bloom from multiple blurred images\n    bloom += Grab(coord, 1.0, vec2(CalcOffset(0.0))) * 1.0;\n    bloom += Grab(coord, 2.0, vec2(CalcOffset(1.0))) * 1.5;\n\tbloom += Grab(coord, 3.0, vec2(CalcOffset(2.0))) * 1.0;\n    bloom += Grab(coord, 4.0, vec2(CalcOffset(3.0))) * 1.5;\n    bloom += Grab(coord, 5.0, vec2(CalcOffset(4.0))) * 1.8;\n    bloom += Grab(coord, 6.0, vec2(CalcOffset(5.0))) * 1.0;\n    bloom += Grab(coord, 7.0, vec2(CalcOffset(6.0))) * 1.0;\n    bloom += Grab(coord, 8.0, vec2(CalcOffset(7.0))) * 1.0;\n\n\treturn bloom;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color = ColorFetch(uv);\n    \n    \n    color += GetBloom(uv) * 0.12;\n    \n    color *= 2.0;\n    \n\n    //Tonemapping and color grading\n    color = pow(color, vec3(1.5));\n    color = color / (1.0 + color);\n    color = pow(color, vec3(1.0 / 1.5));\n\n    \n    color = mix(color, color * color * (3.0 - 2.0 * color), vec3(1.0));\n    color = pow(color, vec3(1.3, 1.20, 1.0));    \n\n\tcolor = saturate(color * 1.01);\n    \n    color = pow(color, vec3(0.7 / 2.2));\n\n    fragColor = vec4(color, 1.0);\n   // fragColor = texture(iChannel1, uv) * 10111.;\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat3 m = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64 );\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nvec2 hash22( vec2 p )\n{\n    //p = mod(p, 4.0); // tile\n    p = vec2(dot(p,vec2(175.1,311.7)),\n             dot(p,vec2(260.5,752.3)));\n    return fract(sin(p+455.)*18.5453);\n}\n\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nfloat sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 )\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p0 - p2;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    float s = e0.x*e2.y - e0.y*e2.x;\n    vec2 d = min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                       vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) ));\n\n\treturn -sqrt(d.x)*sign(d.y);\n}\n\nvec3 saturate(vec3 x)\n{\n    return clamp(x, vec3(0.0), vec3(1.0));\n}\n\n\nfloat sdCross(vec2 p) {\n    p *= 2.;\n    vec2 p2 = vec2(p.y, p.x);\n    p2.y = abs(p2.y);\n    p2.y -=.0;\n    p.y = abs(p.y);\n    p.y-=.0;\n\n\tvec2 v1 = vec2(-.5, 0.);\n\tvec2 v2 = vec2(.5, 0.);\n\tvec2 v3 = vec2(0., 1.5);\n    float sd1= sdTriangle(p, v1, v2, v3);\n    float sd2 = sdTriangle(p2, v1, v2, v3);\n    return min(sd1, sd2);\n\n}\n\n \nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat sdStar(vec2 p) {\n    float d1 = sdCross(p);\n    float d2 = sdCross(rotate2d(3.14 / 4.) * p  );\n    return min(d1, d2);\n}\n\n\nfloat opExtrusion( in vec3 p, in float h )\n{\n    float d = sdStar(p.xy);\n    vec2 w = vec2( d, abs(p.z) - h );\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float c1() {\n    return (1. + clamp(-.2, .2, sin(iTime / 5.) ));\n}\n\nfloat c2() {\n    return 0.;\n    return .1*clamp(.0, 1., clamp(-.2, .2, sin(iTime / 3. + .7) ));\n}\n\nfloat hash31(vec3 p) {\n   \tfloat h = dot(p,vec3(127.1,311.7, 21.));\t\n    return fract(sin(h)*43758.5453123);\n}\n\nfloat hash21( vec2 p ) {\n\tfloat h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n    \n}\n \nvec3 HUEtoRGB(in float hue)\n{\n    vec3 rgb = abs(hue * 6. - vec3(3, 2, 4)) * vec3(1, -1, -1) + vec3(-1, 2, 2);\n    return clamp(rgb, 0., 1.);\n}\n\nfloat path(float t) {\n    return 0.1;\n}\n\nfloat multiwave(float path) {\n    path /= 3.;\n    return 10.*(2. * sin(path / 20.) + \n            1./4. * sin(path / 4.) +\n            1./4. * sin(path / 4.));\n}\nfloat dmultiwave(float path) {\n    path /= 3.;\n    return (2. * cos(path / 20.) + \n            1./4. * cos(path / 4.) +\n            1./4. * cos(path / 4.));\n}\n\nfloat opS( in float d1, in float d2 )\n{\n    d1 *= -1.0;\n    return (d1 > d2) ? d1 : d2;\n}\n\n\nvec3 archCOL(vec3 p ) {\n    float rep = 52.;\n    float size = 11.;\n    float in_size = 7.8;\n    float l = 25.5;\n    p.y += multiwave(p.z);\n    float id = floor(p.z / rep);\n    p.z = mod(p.z, rep) - rep / 2.;\n    p.z-=20.;\n    float outer = length(p.xy) - size;\n    float iner = length(p.xy) - size + .5;\n    float d = opS(iner, outer);\n    \n    float dist = max(d, abs( p.z - l) );\n    vec3 c =  HUEtoRGB(hash31(vec3(id)));\n    c /= 4.;\n    c+= .3;\n    return c;\n}\n \nfloat mapStarField(vec3 p, out vec2 id) {\n\n    float r = c1();\n    vec3 rep = vec3(20.);\n    float scale = 1.;\n    p.yz = rotate2d(3.14 / -2.) * p.yz;\n    float t = iTime * 150.;\n    p /= scale;\n    p.y += t;\n    float d = p.z;\n    vec3 pm = mod(p, rep) - rep / 2.;\n    id.x = hash31(floor(p / rep));\n \n    if (id.x * r < 1.1) {\n        return rep.z / 2.;\n    }\n    pm.xz = rotate2d( 42.*iTime *id.x) * pm.xz;\n    id.x = fract(id.x *112.131);\n    id.y = 1.;\n   // id.x = .2;\n    return opExtrusion(pm  / 2., .05);\n}\n\nfloat mapArch(vec3 p) {\n    float rep = 52.;\n    float size = 11.;\n    float in_size = 7.8;\n    float l = -25.5;\n    p.y += multiwave(p.z);\n    p.z = mod(p.z, rep) - rep / 2.;\n    p.z-=20.;\n    float outer = length(p.xy) - size;\n    float iner = length(p.xy) - size + .5;\n    float d = opS(iner, outer);\n    \n    return max(d, abs( p.z - l) );\n}\n\nfloat mapFence(vec3 p) {\n    float rep = 2.;\n    float height = .4;// + (1.+ sin(p.z / 4.)) / 1.;\n    float size = .1 ;\n    \n    p.y += multiwave(p.z);\n    p.z = mod(p.z, rep) - rep / 2.;\n    p.x = abs(p.x) - 8.;\n    float dt = length(vec2(p.x, p.y -.76 - height + 4.0*size)) - size / 2.;\n        \n    vec3 pstar = vec3(p.z, p.y, p.x);\n    float dstar = opExtrusion(pstar, .01);\n    float df = abs(max(length( p.xz - size), -.1+abs(p.y +.8) - height));\n    return min(dt, dstar);\n    \n}\n\nfloat mapRoad(vec3 p, out vec2 id) {\n \n    \n    vec2 rep = vec2(1, 1.);\n    \n    vec2 mp = mod(p.xz, rep) - rep / 2.;\n    \n    float s = .35;\n    id.x = fract( ((+ p.z/rep.y)*0.323 + (p.x / rep.x )) *.0379523 );\n   \n    id.y = hash21( floor(p.xz / rep.xy ) * 10. );\n    if (id.y < 0.02)\n     id.x = fract( (floor(+ p.z/rep.y) *0.323+ floor(p.x / rep.x )) *0.0379523 );\n    float l = iTime* 2. * hash21( floor(p.xz / rep)  );\n    \n     p.y -= .3 + sin(l ) * .0;\n     float h =  p.y + 2. + multiwave(p.z) + cos(sin(p.z *c2()*.02  + iTime * c2() * .5) + p.x / 3.);\n   \n    return max( max(max(mp.x -s , mp.y - s ) , abs(p.x) - 8. ), abs( h )  - .05);\n}\n\nvec2 map(vec3 p, out vec2 id) {\n    vec2 id2;\n    vec3 ps = p;\n    p.x+=sin(p.z / 15.)*2. + cos(p.z / 20.) + sin(p.z / 200.) * 200.;\n    vec2 res =  vec2(mapRoad(p, id), 1.);\n    \n    vec2 resFence = vec2(mapFence(p), 2. );\n    if (resFence.x < res.x) {\n        res = resFence;\n    }\n    vec2 resArch = vec2(mapArch(p), 3.);\n    if (resArch.x < res.x) {\n        res = resArch;\n    }\n    vec2 resStar = vec2(mapStarField(ps, id2), 4.);\n    if (resStar.x < res.x) {\n        res = resStar;\n        id = id2;\n    }\n    return res;\n}\n\nvec2 castRay(vec3 ro, vec3 rd, out vec2 id) {\n    vec2 res = vec2(1e10, 0.);\n    vec3 pos = ro;\n\n    const float NEAR = 0.;\n    const float FAR = 220.;\n\n    float t = NEAR;\n    \n    for (int i = 0; i < 300 && t < FAR; ++i) {\n    \n        pos = ro + rd * t;\n        vec2 h = map(pos, id);\n        if (abs(h.x) < 0.001 * t) {\n            res = vec2(t, h.y);\n            break ;\n        }\n        t += t < 10. ? h.x * .5: h.x;\n    }\n    \n    return res;\n}\n\n\nvec3 normal (in vec3 p)\n{\n    vec2 e = vec2(.0001, .0);\n    vec2 id;\n    float d = map (p,id).x;\n    vec3 n = vec3 (map (p + e.xyy,id).x - d,\n                   map (p + e.yxy,id).x - d,\n                   map (p + e.yyx,id).x - d);\n    return normalize(n);\n}\n\nvec3 raymarch_arch(vec3 ro, vec3 rd) {\n    float t = 0.;\n    vec3 acc = vec3(0.);\n\n    for (int i = 0; i < 40; ++i) {\n        vec3 pos = ro + rd * t;\n         float dLight = .03+21.5/(10.+ length(mod(pos.zzz, 52.) -20.))*0.5;\n        acc += dLight * archCOL(pos) / 50.;\n    }\n    return vec3(acc);\n}\n\nfloat stars(vec2 uv) {\n\n    float acc = 0.;\n    float s = 0.1;\n    float scale = 100.;\n    for (float i = 0.; i < 3.; i = i + 1.) {\n        for (float j = 0.; j < 3.; j = j + 1.) {\n            vec2 off = vec2( (j - 2.) * s, (i - 2.) * s);  \n            acc += ( smoothstep( .92, 1.0, pow( noise(vec3( uv.x * scale + off.x, uv.y * scale + off.y, 0.)),3. )));\n        }\n    }\n    return acc / 20.;\n}\n\nvec3 render(vec3 ro, vec3 rd, vec2 uv) {\n\n    vec2 id;\n    vec2 res = castRay(ro, rd, id);\n    vec3 pos = ro + rd * res.x;\n    float mat = res.y;\n    float depth = length(pos - ro);\n    vec3 albedo = vec3(20.);\n    vec3 nor = normal(pos);\n    vec3 lightDir = normalize( vec3(-2., 1., -0.));\n    float ndotl = max(.4, dot(nor, lightDir));\n   // vec3 stars = vec3( smoothstep( .9, 1.0, pow( noise(vec3( uv.x * 100., rd.y * 100., 0.)),3. )));\n        vec3 stars = vec3(stars(vec2(uv.x, rd.y)));\n    float dLight = .03+21.5/(5.+ length(mod(pos.zzz, 52.) -20.))*0.5;\n     vec3 dLightCol = archCOL(pos);\n    if (mat == 0.) {\n        return stars;\n    }\n    if (mat == 1. || mat == 4.) {\n        albedo = 4.* HUEtoRGB(id.x);// * (texture(iChannel1, pos.xz * 11.).x * 3. + .1);\n        if (id.y < 0.02)\n        albedo *= 32.;\n        if (mat == 4.)\n        albedo *= 12.;\n     }\n    if (mat == 2.) {\n        albedo = vec3(0.5, 0.5, 0.2) * 20.;\n    }\n    float f = 1. / (1. +pow(depth * .0015 , 2.));\n\n    vec3 r = raymarch_arch(ro, rd);\n    float m = clamp(0., 1., 1.7 - f);\n    return vec3(mix(dLightCol*dLight*albedo *ndotl + albedo / 30., stars  * 4., .8));\n}\n\nvoid camera(out vec3 ro, out vec3 rd, vec2 uv) {\n    vec2 mouse = (-iResolution.xy + 2.0*iMouse.xy)/iResolution.y;\n    float speed = iTime * 15.;\n    ro = vec3( + sin(speed / 200.) * 200., 3.0 + multiwave(speed), -speed);\n    mouse = vec2(0.);\n    mouse.y += 3.;\n    vec3 lookAt = vec3(sin(speed / 200. - 0.5 / 200.) * 200. + mouse.x + uv.x, mouse.y + -uv.y + multiwave(speed)- dmultiwave(speed)*.2, 1.-speed - c1() * 0.);\n    \n    rd = normalize(ro - lookAt);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n    vec3 ro, rd;\n    camera(ro, rd, uv);\n    vec3 col = pow( render(ro, rd, uv)*1.6, vec3(1.0));\n    fragColor = vec4(col * 1.,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 29988,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/extra_shard/mario-kart-wii-rainbow-road"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//First bloom pass, mipmap tree thing\n\nvec3 ColorFetch(vec2 coord)\n{\n \treturn texture(iChannel0, coord).rgb;   \n}\n\nvec3 Grab1(vec2 coord, const float octave, const vec2 offset)\n{\n \tfloat scale = exp2(octave);\n    \n    coord += offset;\n    coord *= scale;\n\n   \tif (coord.x < 0.0 || coord.x > 1.0 || coord.y < 0.0 || coord.y > 1.0)\n    {\n     \treturn vec3(0.0);   \n    }\n    \n    vec3 color = ColorFetch(coord);\n\n    return color;\n}\n\nvec3 Grab4(vec2 coord, const float octave, const vec2 offset)\n{\n \tfloat scale = exp2(octave);\n    \n    coord += offset;\n    coord *= scale;\n\n   \tif (coord.x < 0.0 || coord.x > 1.0 || coord.y < 0.0 || coord.y > 1.0)\n    {\n     \treturn vec3(0.0);   \n    }\n    \n    vec3 color = vec3(0.0);\n    float weights = 0.0;\n    \n    const int oversampling = 4;\n    \n    for (int i = 0; i < oversampling; i++)\n    {    \t    \n        for (int j = 0; j < oversampling; j++)\n        {\n\t\t\tvec2 off = (vec2(i, j) / iResolution.xy + vec2(0.0) / iResolution.xy) * scale / float(oversampling);\n            color += ColorFetch(coord + off);\n            \n\n            weights += 1.0;\n        }\n    }\n    \n    color /= weights;\n    \n    return color;\n}\n\nvec3 Grab8(vec2 coord, const float octave, const vec2 offset)\n{\n \tfloat scale = exp2(octave);\n    \n    coord += offset;\n    coord *= scale;\n\n   \tif (coord.x < 0.0 || coord.x > 1.0 || coord.y < 0.0 || coord.y > 1.0)\n    {\n     \treturn vec3(0.0);   \n    }\n    \n    vec3 color = vec3(0.0);\n    float weights = 0.0;\n    \n    const int oversampling = 8;\n    \n    for (int i = 0; i < oversampling; i++)\n    {    \t    \n        for (int j = 0; j < oversampling; j++)\n        {\n\t\t\tvec2 off = (vec2(i, j) / iResolution.xy + vec2(0.0) / iResolution.xy) * scale / float(oversampling);\n            color += ColorFetch(coord + off);\n            \n\n            weights += 1.0;\n        }\n    }\n    \n    color /= weights;\n    \n    return color;\n}\n\nvec3 Grab16(vec2 coord, const float octave, const vec2 offset)\n{\n \tfloat scale = exp2(octave);\n    \n    coord += offset;\n    coord *= scale;\n\n   \tif (coord.x < 0.0 || coord.x > 1.0 || coord.y < 0.0 || coord.y > 1.0)\n    {\n     \treturn vec3(0.0);   \n    }\n    \n    vec3 color = vec3(0.0);\n    float weights = 0.0;\n    \n    const int oversampling = 16;\n    \n    for (int i = 0; i < oversampling; i++)\n    {    \t    \n        for (int j = 0; j < oversampling; j++)\n        {\n\t\t\tvec2 off = (vec2(i, j) / iResolution.xy + vec2(0.0) / iResolution.xy) * scale / float(oversampling);\n            color += ColorFetch(coord + off);\n            \n\n            weights += 1.0;\n        }\n    }\n    \n    color /= weights;\n    \n    return color;\n}\n\nvec2 CalcOffset(float octave)\n{\n    vec2 offset = vec2(0.0);\n    \n    vec2 padding = vec2(10.0) / iResolution.xy;\n    \n    offset.x = -min(1.0, floor(octave / 3.0)) * (0.25 + padding.x);\n    \n    offset.y = -(1.0 - (1.0 / exp2(octave))) - padding.y * octave;\n\n\toffset.y += min(1.0, floor(octave / 3.0)) * 0.35;\n    \n \treturn offset;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n    vec3 color = vec3(0.0);\n    \n    /*\n    Create a mipmap tree thingy with padding to prevent leaking bloom\n   \t\n\tSince there's no mipmaps for the previous buffer and the reduction process has to be done in one pass,\n    oversampling is required for a proper result\n\t*/\n    color += Grab1(uv, 1.0, vec2(0.0,  0.0)   );\n    color += Grab4(uv, 2.0, vec2(CalcOffset(1.0))   );\n    color += Grab8(uv, 3.0, vec2(CalcOffset(2.0))   );\n    color += Grab16(uv, 4.0, vec2(CalcOffset(3.0))   );\n    color += Grab16(uv, 5.0, vec2(CalcOffset(4.0))   );\n    color += Grab16(uv, 6.0, vec2(CalcOffset(5.0))   );\n    color += Grab16(uv, 7.0, vec2(CalcOffset(6.0))   );\n    color += Grab16(uv, 8.0, vec2(CalcOffset(7.0))   );\n\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Horizontal gaussian blur leveraging hardware filtering for fewer texture lookups.\n\nvec3 ColorFetch(vec2 coord)\n{\n \treturn texture(iChannel0, coord).rgb;   \n}\n\nfloat weights[5];\nfloat offsets[5];\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    \n    weights[0] = 0.19638062;\n    weights[1] = 0.29675293;\n    weights[2] = 0.09442139;\n    weights[3] = 0.01037598;\n    weights[4] = 0.00025940;\n    \n    offsets[0] = 0.00000000;\n    offsets[1] = 1.41176471;\n    offsets[2] = 3.29411765;\n    offsets[3] = 5.17647059;\n    offsets[4] = 7.05882353;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color = vec3(0.0);\n    float weightSum = 0.0;\n    \n    if (uv.x < 1.12)\n    {\n        color += ColorFetch(uv) * weights[0];\n        weightSum += weights[0];\n\n        for(int i = 1; i < 5; i++)\n        {\n            vec2 offset = vec2(offsets[i]) / iResolution.xy;\n            color += ColorFetch(uv + offset * vec2(0.5, 0.0)) * weights[i];\n            color += ColorFetch(uv - offset * vec2(0.5, 0.0)) * weights[i];\n            weightSum += weights[i] * 2.0;\n        }\n\n        color /= weightSum;\n    }\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Vertical gaussian blur leveraging hardware filtering for fewer texture lookups.\n\nvec3 ColorFetch(vec2 coord)\n{\n \treturn texture(iChannel0, coord).rgb;   \n}\n\nfloat weights[5];\nfloat offsets[5];\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    \n    weights[0] = 0.19638062;\n    weights[1] = 0.29675293;\n    weights[2] = 0.09442139;\n    weights[3] = 0.01037598;\n    weights[4] = 0.00025940;\n    \n    offsets[0] = 0.00000000;\n    offsets[1] = 1.41176471;\n    offsets[2] = 3.29411765;\n    offsets[3] = 5.17647059;\n    offsets[4] = 7.05882353;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color = vec3(0.0);\n    float weightSum = 0.0;\n    \n    if (uv.x < 0.52)\n    {\n        color += ColorFetch(uv) * weights[0];\n        weightSum += weights[0];\n\n        for(int i = 1; i < 5; i++)\n        {\n            vec2 offset = vec2(offsets[i]) / iResolution.xy;\n            color += ColorFetch(uv + offset * vec2(0.0, 0.5)) * weights[i];\n            color += ColorFetch(uv - offset * vec2(0.0, 0.5)) * weights[i];\n            weightSum += weights[i] * 2.0;\n        }\n\n        color /= weightSum;\n    }\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}