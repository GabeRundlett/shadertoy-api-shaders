{
    "Shader": {
        "info": {
            "date": "1650469774",
            "description": "testing more effects, nothing special",
            "flags": 0,
            "hasliked": 0,
            "id": "ftsfzn",
            "likes": 16,
            "name": "Simple Torus Grid",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 316
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nvec3 face(vec3 p) {\n     vec3 a = abs(p);\n     return step(a.yzx, a.xyz)*step(a.zxy, a.xyz)*sign(p);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec3 getRo() {\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    float t = 0.1 * iTime;\n    vec3 ro = vec3(2., 3. * cos(t), -3. * sin(t));\n   // ro.yz *= Rot(-m.y*3.14+1.);\n    //ro.xz *= Rot(-m.x*6.2831);\n    return ro;\n}\n\nfloat GetDist(vec3 p) {\n    vec3 ip = floor(p) + 0.5;\n    vec3 fp = p - ip;\n    \n    float h = h21(vec2(ip.x, h21(ip.yz)));\n   \n    float o = 2. * pi * h;\n    fp.xz*= Rot(o + 0.25 * iTime + 0.25 * pi * cc(1., o + 0.5 * iTime));\n    fp.xy*= Rot(o + 0.25 * iTime + 0.25 * pi * cc(1., o + 0.5 * iTime + 0.5 * pi) + 0.5 * pi);\n  \n    float r1 = 0.1 + 0.2 * h - 0.15 * exp(-0.5 * length(p-getRo()));\n    float r2 = min(0.1, r1);\n    float d1 = length(fp.xz) - r1;\n    float d = length(vec2(d1,fp.y)) - r2;\n   \n   // float d = mlength(fp) - 0.1 - 0.15 * h;\n    return 0.4 * d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n    float s = sign(z);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if (s != sign(dS)) { z *= 0.5; s = sign(dS); }\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = getRo();\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    float IOR = 1.05;\n    vec3 p = ro + rd * d;\n    vec3 n = GetNormal(p);\n    vec3 r = reflect(rd, n);\n    if(d<MAX_DIST) {\n\n\n        vec3 pIn = p - 4. * SURF_DIST * n;\n        vec3 rdIn = refract(rd, n, 1./IOR);\n        float dIn = RayMarch(pIn, rdIn, -1.);\n        \n        vec3 pExit = pIn + dIn * rdIn;\n        vec3 nExit = -GetNormal(pExit); // *-1.; ?\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n        \n        float fres = pow(1. + dot(rd, n), 5.);\n        fres = 1. - fres;\n        float k = 0.08;\n        fres = smoothstep(-k, k,-0.9 + fres);\n        fres = 1. - exp(-3. * fres + 1.5 * dif);\n        col = mix(col, vec3(0), fres);\n        vec3 e = vec3(0.5);\n        vec3 c = pal(n.y, e, e, e, 0.5 * vec3(0,1,2)/3.);\n        col *= c;\n    }\n    \n    vec3 ip = floor(p) + 0.5;\n    vec3 fp = p - ip;\n    \n    float h = h21(vec2(ip.x, h21(ip.yz)));\n    \n    vec3 col2 = vec3(1);\n    float o = 2. * pi / 3.;\n    float t = iTime + h * pi * 2.;\n    vec3 a = 0.9 + 0.1 * thc(2., vec3(t-o,o,t+o));\n    //vec3(0.75,0.9,1.)\n    \n    col2 = mix(col2, a, exp(-thc(4., 0.125 * pi * h + iTime - 0.1 * p.y)));\n    \n    float m2= exp(-0.1 * dot(p, r)) * exp(-0.5 * dot(p, normalize(vec3(1,2,3))));\n    vec3 col3 = vec3(0.5 * dot(rd, n));// vec3(dot(normalize(r), normalize(p)));\n    col2 = mix(col3, col2, 1.-exp(-0.5 * length(p)));\n   // col = mix(col, vec3(0), 1.-m2);\n   // col2 *= m2;\n    \n    float m = exp(-0.2 * length(p));\n    m = clamp(m, 0., 1.);\n    col = mix(col2, col, m);\n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\n#define Rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b) {\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}