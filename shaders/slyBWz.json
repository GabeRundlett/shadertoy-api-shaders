{
    "Shader": {
        "info": {
            "date": "1664338085",
            "description": "I decided to created a graphing calculator plot similar to desmos that allow for plotting points equations. This was done all offline without reference as a way to test myself on shader knowledge. I love math. lol",
            "flags": 0,
            "hasliked": 0,
            "id": "slyBWz",
            "likes": 2,
            "name": "Graphing Plot Fractal",
            "published": 3,
            "tags": [
                "graph",
                "plot",
                "graphing",
                "v2"
            ],
            "usePreview": 0,
            "username": "spenceryonce",
            "viewed": 193
        },
        "renderpass": [
            {
                "code": "float plot(vec2 uv, float y) {\n    return smoothstep(y-0.02,y,uv.y)-\n    smoothstep(y,y+0.02,uv.y);\n\n}\n\nvec2 grid(vec2 uv, float w, float h){\n    uv.x = fract(uv.x * w);\n    uv.y = fract(uv.y * h);\n    return uv;\n}\n\nfloat vwall(vec2 uv, float w){\n    return uv.x < 1.0 - w ? 0.0 : 1.0;\n}\nfloat hwall(vec2 uv, float h){\n    return uv.y < 1.0 - h ? 0.0 : 1.0;\n}\nfloat xlabel(vec2 uv, float h){\n    return uv.y > -h && uv.y < h ? 1.0 : 0.0;\n}\nfloat ylabel(vec2 uv, float w){\n    return uv.x > -w && uv.x < w ? 1.0 : 0.0;\n}\n\nfloat point(vec2 uv, float r,float x, float y){\n    return smoothstep(-0.01,0.02,(uv.x-(x*0.1))*(uv.x-(x*0.1))*r+(uv.y-(y*0.1))*(uv.y-(y*0.1))*r);\n}\n\nvoid mainImage(out vec4 c, in vec2 fc)\n{\n    vec2 uv = (2.0*fc.xy-iResolution.xy)/iResolution.y;\n    float a = 1.2 + sin(iTime)*0.3;\n    uv *= 1.0+sin(iTime)*0.3;\n    for(float i = 1.0;i<32.0;i+=1.0){\n        uv = abs(uv);\n        uv -= 0.5;\n        uv *= mat2(sin(a),-sin(a),cos(a),sin(a));\n        uv+= 0.5;\n    }\n    \n    vec3 color = vec3(0.0);\n    \n    float y = uv.x*uv.x*uv.x;\n    vec2 g = grid(uv,10.,10.);\n    float p = plot(uv, y);\n    \n    float ci = point(uv, 7.8, 5.0,6.0);\n    float ci2 = point(uv, 7.8, -5.0,6.0);\n    \n    color = vec3(p);\n    \n    float w = vwall(g,0.1);\n    float h = hwall(g,0.1);\n    \n    float xlab = xlabel(uv,0.01);\n    float ylab = ylabel(uv,0.01);\n    color += vec3(w*0.1);\n    color += vec3(h*0.08);\n    color += vec3(xlab*1.0,0.,0.);\n    color += vec3(0.,ylab*1.0,0.0);\n    \n    color += 1.0-ci;\n    color += 1.0-ci2;\n    \n    \n    c = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}