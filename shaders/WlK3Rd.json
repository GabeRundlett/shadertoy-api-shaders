{
    "Shader": {
        "info": {
            "date": "1579644944",
            "description": "Coding every day, so the code may be dirty. Read at your own risk.",
            "flags": 32,
            "hasliked": 0,
            "id": "WlK3Rd",
            "likes": 45,
            "name": "Day 33 - Metalicity",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 1191
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 29 - Dwarf Train\" by jeyko. https://shadertoy.com/view/3tG3RK\n// 2020-01-21 19:48:13\n// Buffer A is draw buffer\n// Buffer B is TAA from https://www.shadertoy.com/view/4dSBDt\n// Image buffer removes buriness from TAA by sharpening from https://www.shadertoy.com/view/MtdXW4\n\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n\t//C += T(c0,U/iResolution.xy);\n    C = sharpen(c0,U/iResolution.xy,iResolution.xy);\n    C *= 1.3;\n    C = mix(C,smoothstep(0.,1.,C), 0.8);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define c0 iChannel0 \n#define c1 iChannel1 \n#define c2 iChannel2 \n#define c3 iChannel3 \n\n#define T(c, uv) texture(c, uv)\n\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n\n#define pi acos(-1.)\n#define tau (2.*pi)\n\n#define PI pi\n\n\nstruct Mat {\n    vec3 albedo;\n\tfloat metalness; \n\tfloat roughness;\n};\nMat mats[5] = Mat[](\n\tMat(vec3(1)*0.9,0.5,0.23),\n\tMat(vec3(1)*0.1,0.0,0.2),\n\tMat(vec3(1,1,1.)*0.0,0.2,0.5),\n\tMat(vec3(1,1,1.)*0.2,0.2,0.1),\n\tMat(vec3(1,1,1.)*0.2,0.0,0.)\n);  \n\n\n\nfloat DistributionGGX(vec3 N, vec3 H, float roughness)\n{\n    float a = roughness*roughness;\n    float a2 = a*a;\n    float NdotH = max(dot(N, H), 0.0);\n    float NdotH2 = NdotH*NdotH;\n\n    float nom   = a2;\n    float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n    denom = PI * denom * denom;\n\n    return nom / max(denom, 0.001); // prevent divide by zero for roughness=0.0 and NdotH=1.0\n}\n\n\n// ----------------------------------------------------------------------------\nfloat GeometrySchlickGGX(float NdotV, float roughness)\n{\n    float r = (roughness + 1.0);\n    float k = (r*r) / 8.0;\n\n    float nom   = NdotV;\n    float denom = NdotV * (1.0 - k) + k;\n\n    return nom / denom;\n}\n// ----------------------------------------------------------------------------\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)\n{\n    float NdotV = max(dot(N, V), 0.0);\n    float NdotL = max(dot(N, L), 0.0);\n    float ggx2 = GeometrySchlickGGX(NdotV, roughness);\n    float ggx1 = GeometrySchlickGGX(NdotL, roughness);\n\n    return ggx1 * ggx2;\n}\n// ----------------------------------------------------------------------------\nvec3 fresnelSchlick(float cosTheta, vec3 F0)\n{\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\n}\n// ----------------------------------------------------------------------------\n\n\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.)) c = abs(c);\n\treturn c;\n}\n\n// Tri-Planar blending function. Based on an old Nvidia writeup:\n// GPU Gems 3 - Ryan Geiss: https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch01.html\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){\n   \n    n = max((abs(n) - .2)*7., .001);\n    n /= (n.x + n.y + n.z );  \n    \n\tp = (texture(tex, p.yz)*n.x + texture(tex, p.zx)*n.y + texture(tex, p.xy)*n.z).xyz;\n    \n    return p*p;\n}\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\n\n\nvec4 sharpen(sampler2D channel,vec2 uv,vec2 res){\n    vec2 step = 1.0 / res;\n    float kernel [9];vec2 offset [9];\n\n\n    offset[0] = vec2(-step.x, -step.y);\n    offset[1] = vec2(0.0, -step.y);\n    offset[2] = vec2(step.x, -step.y);\n    \n    offset[3] = vec2(-step.x, 0.0);\n    offset[4] = vec2(0.0, 0.0);\n    offset[5] = vec2(step.x, 0.0);\n    \n    offset[6] = vec2(-step.x, step.y);\n    offset[7] = vec2(0.0, step.y);\n    offset[8] = vec2(step.x, step.y);\n    \n    kernel[0] = 0.0; kernel[1] = -0.25; kernel[2] = 0.0;\n    kernel[3] = -0.25; kernel[4] = 1.0; kernel[5] = -0.25;\n    kernel[6] = 0.0; kernel[7] = -0.25; kernel[8] = 0.0;\n    \n    vec4 sum = texture(channel, uv);\n    \n    for (int i = 0; i < 9; i++) {\n        vec4 color = texture(channel, uv + offset[i]);\n        sum += color * kernel[i]*2.;\n    }\n    return sum;\n}\n\nvec4 blur(sampler2D channel,vec2 uv,vec2 res){\n    vec2 step = 1.0 / res;\n    float kernel [9];vec2 offset [9];\n\n\n    offset[0] = vec2(-step.x, -step.y);\n    offset[1] = vec2(0.0, -step.y);\n    offset[2] = vec2(step.x, -step.y);\n    \n    offset[3] = vec2(-step.x, 0.0);\n    offset[4] = vec2(0.0, 0.0);\n    offset[5] = vec2(step.x, 0.0);\n    \n    offset[6] = vec2(-step.x, step.y);\n    offset[7] = vec2(0.0, step.y);\n    offset[8] = vec2(step.x, step.y);\n    \n    kernel[0] = 1.0; kernel[1] = 1.; kernel[2] = 1.0;\n    kernel[3] = 1.; kernel[4] = 1.0; kernel[5] = 1.;\n    kernel[6] = 1.0; kernel[7] = 1.; kernel[8] = 1.0;\n    \n    vec4 sum = vec4(0);\n    \n    for (int i = 0; i < 9; i++) {\n        vec4 color = texture(channel, uv + offset[i]);\n        sum += color * kernel[i];\n    }\n    sum /= 9.;\n\t\n    return sum;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\n#define maxIters 120\n#define mx (30.*iMouse.x/iResolution.x)\n#define dmin(a, b) a.x < b.x ? a : b\n#define dmax(a, b) a.x > b.x ? a : b \n#define pmod(p, x) mod(p, x) - x*0.5\n\nfloat r11c(float x){return texture(iChannel0, vec2(x, x*12.5)).x;}\n\nvec2 offsetTunnel(float z){\n    vec2 t = vec2(\n        sin(z*0.1)*2.,\n        cos(z*0.1)*2.\n    );\n    t.y -= 0.;\n\treturn t;\n}\n\n#define szTunnel 1.\n\n#define modDist 10.\n\nvec3 centerPipes = vec3(0);\nvec3 centerTunnel = vec3(0);\n\n\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e7);\n\n    p.xy -= offsetTunnel(p.z);\n    \n    // --- TUNN --- //\n    \n\t\n    centerTunnel = p;\n    d = dmin(d, vec2(-(length(p.xy) - szTunnel), 0.));\n        \n\n\tvec3 q = p;\n    q.z = pmod(q.z, 1.);\n    \n    p.z = pmod(p.z, modDist);\n    \n    // seperations\n    d = dmin(d, vec2(max(-(length(p.xy) - szTunnel*0.9), (abs(q.z) - 0.01)) ,0.));\n    \n    // bolts\n    vec3 i = q;\n    pModPolar(i.xy, 20.);\n    i.x -= 0.96;\n    i.z *= 2.;\n    d = dmin(d, vec2(length(i)-0.04,0.));\n    \n    // seperations2\n    q = abs(q);\n    q.xy *= rot(0.125*pi);\n    q = abs(q);\n    q.xy *= rot(0.125*pi);\n    d = dmin(d, vec2(max(-(length(p.xy) - szTunnel*0.9), (abs(q.x) - 0.01)) ,0.));\n    \n    // --- LAMPS --- //\n    \n    d =dmin(d, vec2(sdCapsule( abs(p) - vec3(0.+ 0.07,szTunnel*0.8,0) , vec3(0,0,0.6), vec3(0.0), 0.04 ), 4.)); \n\n    \n    // --- PIPES --- //\n    i = p;\n    i.x = abs(i.x);\n    i.x -= 0.89;\n    d = dmin(d, vec2(length(i.xy)-0.04,3.));\n    \n    i.xy += 0.45;\n\n    i.x -= 0.02;\n    i.y += 0.12;\n    \n    i.xy *= rot(p.z*0.5);\n    i= abs(i);\n    i.xy -= 0.03;\n    //i.xy *= rot(0.9);i.y -= 0.05; i.y = abs(i.y); i.y -= 0.05;\n    // cables\n    d = dmin(d, vec2(length(i.xy)-0.02,2.));\n    \n    // --- FLOOR --- //\n    float offsFloor = szTunnel*0.67;\n    p.y += offsFloor;\n    p.x = abs(p.x);\n    d = dmin(d, vec2(\n        max(\n            max(max(p.y, (p.x- 0.4) ),\n                -(p.y + 0.1)\n               ),\n            abs(q.z) - 0.42\n            )\n        , 1.));\n    \n    d.x *= 0.9;\n\treturn d;\n}\nvec3 pLamp;\n\nvec3 getNormal(vec3 p){\n\tvec2 t = vec2(0.001, 0.);\n    return -normalize(\n    \t vec3(\n        \tmap(p - t.xyy).x - map(p + t.xyy).x,\n        \tmap(p - t.yxy).x - map(p + t.yxy).x,\n        \tmap(p - t.yyx).x - map(p + t.yyx).x\n        )\n    );\n}\n\n#define fov 0.8\n\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n\tvec3 dir = normalize(lookAt - ro);\n\tvec3 right = normalize(cross(vec3(0,1,0), dir));\n\tvec3 up = normalize(cross(dir, right));\n\treturn dir + right*uv.x*fov + up*uv.y*fov;\n}\n\nvec3 colLight = vec3(1.)*2.2;\nvec3 glowLight = vec3(0);\nvec3 att = vec3(1.);\nint iters = 0;\nfloat dither;\n//vec3 p\nvec2 march(inout vec3 ro,inout vec3 p,inout vec3 rd, inout float t, inout bool didHit, inout float bounce){\n    p = ro + rd*0.5;vec2 d;\n    didHit = false;\n    for(; iters < maxIters; iters++){\n    \td = map(p);\n        d.x *= dither;\n        if (d.y == 4.)\n            glowLight += exp(-d.x*8.);\n        \n        if(((iters % 7) == 0) && d.x < 0.001){\n            didHit = true;\n            int id = int(d.y); \n            break;\n        }\n        \n        t += d.x;\n        p = ro + rd*t;\n    }\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0,0,-0.);\n    ro.z += iTime*2. + mx;\n    ro.xy += offsetTunnel(ro.z);\n    \n    vec3 lookAt = ro + vec3(0,0,9);\n    lookAt.xy += offsetTunnel(lookAt.z);\n    \n    dither = mix(0.8,1.,texture(iChannel0,20.*uv*256. + iTime*2.).x);\n    vec3 rd = getRd(ro, lookAt, uv);\n    rd.xy *= 1. - dot(uv,uv)*0.2;\n    rd = normalize(rd);\n\t\n    vec3 p = ro; float t = 0.;vec2 d; vec3 l = vec3(0); bool didHit = false; float bounce = 0.;\n    for (int i = 0; i < 2; i++){\n    \td = march(ro, p, rd, t, didHit, bounce);\n    \n        if(didHit == true){\n            pLamp = vec3(0,szTunnel*0.4,floor(p.z/modDist)*modDist + modDist*0.5 );\n            pLamp.xy += offsetTunnel(pLamp.z);\n\n            vec3 n = getNormal(p);\n            l = normalize(pLamp - p);\n            vec3 h = normalize(l - rd);\n            int id = int(d.y);\n            //id = 0;\n            float metalness = mats[id].metalness;\n            float roughness = mats[id].roughness;\n            roughness = max(roughness, 0.);\n            vec3 albedo = mats[id].albedo;\n            vec3 N = getNormal(p);\n            vec3 V = normalize(ro - p);\n            //vec3 V = -rd;\n\n            if (id == 0) \n            {\n                float t =tex3D(iChannel0,p*0.6, n).b*0.2;\n                roughness -= t;\n            \tmetalness -= t;\n            }\n            if (id == 2) {\n                float t =tex3D(iChannel0,p*0.6, n).b*0.2;\n                roughness -= t;\n            \tmetalness -= t;    \n            }\n\n            vec3 F0 = vec3(0.14); \n            F0 = mix(F0, albedo, metalness);\n\n\n            // calculate per-light radiance\n            float distL    = length(pLamp - p);\n            float attenuation = 0.9 / (distL * distL);\n            vec3 radiance     = colLight * attenuation;        \n\n            // cook-torrance brdf\n            float NDF = DistributionGGX(n, h, roughness);   \n            float G   = GeometrySmith(n, V, l, roughness);      \n            vec3 F    = fresnelSchlick(clamp(dot(n, V), 0.0, 1.0), F0);     \n\n            vec3 kS = F;\n            vec3 kD = vec3(1.0) - kS;\n            kD *= 1.0 - metalness;\t  \n\n            vec3 numerator    = NDF * G * F;\n            float denominator = 4.0 * max(dot(n, V), 0.0) * max(dot(n, l), 0.0);\n            vec3 specular     = numerator / max(denominator, 0.001);  \n\n            // add to outgoing radiance Lo\n            float NdotL = max(dot(n, l), 0.0); \n            col += (kD * albedo / PI + specular) * radiance * NdotL * attenuation*att; \n\t\t\t\n           // col += glow;\n\n            if (id < 2 && bounce != 2.){\n                if(id == 0){\n                \tatt *= max(0.03 - roughness*0.1, 0.);\n                } else {\n                \tatt *= max(0.37 - roughness, 0.);\n                \n                }\n                bounce++;\n                ro = p;\n                rd = reflect(rd, n);\n                t = 0.;\n            } else {\n                break;\n            }\n    }\n        \n    }\n    if(d.y == 4.) col = vec3(1);\n\n    col *= vec3(1.0,1.014,1.02);\n    col += glowLight*0.02;\n    \n    col = pow(col, vec3(0.45));\n    \n    col = clamp(col, 0.07 ,1.);\n    //col = smoothstep(0.,0.6,col);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "ivec2 offsets[8] = ivec2[8]( ivec2(-1,-1), ivec2(-1, 1), \n\tivec2(1, -1), ivec2(1, 1), \n\tivec2(1, 0), ivec2(0, -1), \n\tivec2(0, 1), ivec2(-1, 0));\n\nvec3 RGBToYCoCg( vec3 RGB )\n{\n\tfloat Y = dot(RGB, vec3(  1, 2,  1 )) * 0.25;\n\tfloat Co= dot(RGB, vec3(  2, 0, -2 )) * 0.25 + ( 0.5 * 256.0/255.0 );\n\tfloat Cg= dot(RGB, vec3( -1, 2, -1 )) * 0.25 + ( 0.5 * 256.0/255.0 );\n\treturn vec3(Y, Co, Cg);\n}\n\nvec3 YCoCgToRGB( vec3 YCoCg )\n{\n\tfloat Y= YCoCg.x;\n\tfloat Co= YCoCg.y - ( 0.5 * 256.0 / 255.0 );\n\tfloat Cg= YCoCg.z - ( 0.5 * 256.0 / 255.0 );\n\tfloat R= Y + Co-Cg;\n\tfloat G= Y + Cg;\n\tfloat B= Y - Co-Cg;\n\treturn vec3(R,G,B);\n}\n\n//#define NO_AA\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;    \n    vec3 new = RGBToYCoCg(textureLod(iChannel0, q, 0.0).xyz);\n    vec3 history = RGBToYCoCg(textureLod(iChannel1, q, 0.0).xyz);\n    \n    vec3 colorAvg = new;\n    vec3 colorVar = new*new;\n    \n    // Marco Salvi's Implementation (by Chris Wyman)\n    for(int i = 0; i < 8; i++)\n    {\n        vec3 fetch = RGBToYCoCg(texelFetch(iChannel0, ivec2(fragCoord.xy)+offsets[i], 0).xyz);\n        colorAvg += fetch;\n        colorVar += fetch*fetch;\n    }\n    colorAvg /= 9.0;\n    colorVar /= 9.0;\n    float gColorBoxSigma = 0.75;\n\tvec3 sigma = sqrt(max(vec3(0.0), colorVar - colorAvg*colorAvg));\n\tvec3 colorMin = colorAvg - gColorBoxSigma * sigma;\n\tvec3 colorMax = colorAvg + gColorBoxSigma * sigma;\n    \n    history = clamp(history, colorMin, colorMax);\n  \n\tfragColor = vec4(YCoCgToRGB(mix(new, history, 0.95)), 1.0);\n#ifdef NO_AA\n    fragColor = vec4(YCoCgToRGB(new), 1.0);\n#endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}