{
    "Shader": {
        "info": {
            "date": "1685060111",
            "description": "2D SDF & (unit) Gradient",
            "flags": 0,
            "hasliked": 0,
            "id": "DtcXz4",
            "likes": 1,
            "name": "2D SDF & Gradient",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "tristanantonsen",
            "viewed": 197
        },
        "renderpass": [
            {
                "code": "float Circle(vec2 p, vec2 c, float r) {\n    return length(p-c) - r;\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdRoundedBox( vec2 p, vec2 b, vec4 r )\n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\nfloat udSegment( in vec2 p, in vec2 a, in vec2 b, float r)\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length(pa-h*ba) - r;\n}\n\nfloat pointer(vec2 p, vec2 o, vec2 v)\n {\n     float l = 0.1;\n     vec2 p2 = p + l * v;\n     \n     return udSegment(p, o, p2, 0.01);\n \n }\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n    \nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat SceneDist(vec2 p0) {\n\n    // vec2 m = (2.*iMouse.xy-iResolution.xy)/iResolution.y / 2.0;\n    \n    vec2 p = Rot(-0.1 * iTime) * p0;\n    float l = 0.001;\n    \n    float c = Circle(p, vec2(-0.2,0), 0.2);\n    float c2 = Circle(p, vec2(0.2,0), 0.2);\n    \n    return opSmoothUnion(c, c2, 0.1);\n\n}\n\nvec2 GetNormal(vec2 p) {\n\n    float epsilon = 0.0001;\n    vec2 dx = vec2(epsilon, 0.);\n    vec2 dy = vec2(0., epsilon);\n\n    float ddx = SceneDist(p + dx) - SceneDist(p - dx);\n    float ddy = SceneDist(p + dy) - SceneDist(p - dy);\n    \n    return vec2(ddx, ddy);\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5*iResolution .xy)/iResolution.y;\n    vec2 m = (2.*iMouse.xy-iResolution.xy)/iResolution.y / 2.0;\n    \n    if (iMouse.z == 0.0) { m.x = 0.0; };\n    \n    vec3 col1 = vec3(255., 255.,255.) / 255.;\n    vec3 col2 = vec3(240.) / 255.;\n    float f = 1.;\n    \n    float d = SceneDist(uv) * 255.;\n    \n    vec4 solidColor = fragColor = vec4(vec3(0.25,0.25,0.25), 1.0);\n    \n    vec4 prettyColor = vec4(0.0);\n    float t = d;\n    vec2 n = GetNormal(uv);\n    float l = length(n);\n    //if (uv.x < 0.0) {\n    t = .0002 * t / l;\n    //};\n    float fac = 0.5 * sin(f * t - 2.0 * iTime) + 0.5;\n    prettyColor = vec4(mix(col1, col2, fac), 1.0);        \n\n    fragColor = mix(solidColor, prettyColor, smoothstep(0.0,1.0,d) );\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}