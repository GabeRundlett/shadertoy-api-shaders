{
    "Shader": {
        "info": {
            "date": "1673805653",
            "description": "Still having fun with truchet, now in 3D thanks to IQ's formula for extrusion :D ",
            "flags": 0,
            "hasliked": 0,
            "id": "dl2Gzd",
            "likes": 5,
            "name": "Fork Truchet do cast3 228",
            "published": 3,
            "tags": [
                "raymarching",
                "tunnel",
                "truchet",
                "pattern",
                "extrude"
            ],
            "usePreview": 0,
            "username": "cast3",
            "viewed": 222
        },
        "renderpass": [
            {
                "code": "// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define circle(p,s) (length(p)-s)\n#define PI acos(-1.)\n#define hash21(x) fract(sin(dot(x,vec2(164.5, 231.8)))*2164.5)\n#define dt(s,o) fract((iTime+o)*s)\n\n// iq's distance function\n// https://iquilezles.org/articles/distfunctions/\nfloat opExtrusion (vec3 p, float d, float h)\n{\n    vec2 w = vec2( d, abs(p.z) - h );\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nfloat truchet (vec2 uv, float w)\n{\n    vec2 id = floor(uv);\n    \n    uv = fract(uv)-.5;\n    if(hash21(id)<.5) uv.x *= -1.;\n    float s = (uv.x>-uv.y)?1.:-1.;\n    uv -= .5*s;\n    \n    float contour = abs(circle(uv,.5))-w;\n    return contour;\n}\n\nfloat SDF (vec3 p)\n{\n    p.z += iTime;\n    float per = 1.5;\n    float id = floor(p.z/per);\n    p.z = mod(p.z,per)-per*.5;\n    vec2 pp = p.xy+id*.5;\n    float width = sin(length(p.xy)-dt(.3, -id*.2)*(2.*PI))*.1;\n    return opExtrusion(p, truchet(pp, width), .05 );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    float dither = hash21(uv);\n    \n    vec3 ro = vec3(0.001,0.01,-2.), rd=normalize(vec3(uv,1.)), p=ro,\n    col=vec3(0.);\n    float shad; bool hit = false;\n    for(float i=0.; i<64.;i++)\n    {\n        float d = SDF(p);\n        if (d<0.01)\n        {\n            hit = true;\n            shad = i/64.;\n            break;\n        }\n        d *= .45+0.01*dither;\n        p += d*rd;\n    }\n    if(hit)\n    {\n        col = vec3(1.-shad); \n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}