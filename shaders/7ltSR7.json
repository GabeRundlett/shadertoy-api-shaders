{
    "Shader": {
        "info": {
            "date": "1638892574",
            "description": "In any case, I can never describe the beauty of the starry sky I saw that day.",
            "flags": 0,
            "hasliked": 0,
            "id": "7ltSR7",
            "likes": 9,
            "name": "星の瞬き -- twinkling star",
            "published": 3,
            "tags": [
                "2d",
                "fbm",
                "hash"
            ],
            "usePreview": 0,
            "username": "IWBTShyGuy",
            "viewed": 1217
        },
        "renderpass": [
            {
                "code": "// Copyright © 2021 IWBTShyGuy\n// Attribution 4.0 International (CC BY 4.0)\n\nconst float STAR_INTERVAL = 1.0 / 15.0;\n\nconst vec3 MOUNTAIN = pow(vec3(0, 0, 0) / 255.0, vec3(2.2));\nconst vec3 BACK_GROUND = pow(vec3(0, 5, 58) / 255.0, vec3(2.2));\nconst vec3 STAR = pow(vec3(1, 1, 1), vec3(2.2));\n\nfloat fbm( in float x, in float H ) {\n    float G = exp2(-H), f = 1.0, a = 1.0, t = 0.0;\n    for(int i = 0; i < 5; i++) {\n        t += a*smoothnoise11(f*x);\n        f *= 2.0;\n        a *= G;\n    }\n    return t;\n}\n\nfloat mountain(in vec2 uv) {\n    float f = uv.y - fbm(uv.x * 1.5 + 0.2 * iTime + 1.5, 0.0) / 8.0 + 0.15;\n    return clamp(f / 0.005, 0.0, 1.0);\n}\n\nfloat cellstar(in vec2 uv, in vec2 nbr) {\n    vec2 xy = uv + nbr;\n    float rand = noise13(vec3(floor(xy), 1));\n    if (rand < 0.7) return 0.0;\n    vec2 disp = (2.0 * noise22(floor(xy)) - 1.0) * 0.6;\n    vec2 r = fract(xy) + uv - xy - disp - 0.5;\n    float dist = length(r) * STAR_INTERVAL;\n    float c = clamp(0.0005 / dist, 0.0, 1.0);\n    float irr = noise13(vec3(floor(xy), -1));\n    irr = mix(0.5, 0.9, irr);\n    irr = mix(\n        0.1,\n        1.0,\n        noise13(vec3(floor(xy), iTime * 30.0 * noise12(floor(xy))))\n    );\n    return c * c * irr;\n}\n\nfloat star(in vec2 uv) {\n    uv.x += iTime * 0.01;\n    uv /= STAR_INTERVAL;\n    float c = 0.0;\n    for (int k = 0; k < 9; k++)\n#ifdef GLES3\n        c = max(c, cellstar(uv, vec2(k / 3 - 1, k % 3 - 1)));\n#else\n    {\n        int l = k - k / 3 * 3;\n        c = max(c, cellstar(uv, vec2(k / 3 - 1, l - 1)));\n    }\n#endif\n    return c;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.y;\n    float c = star(uv);\n    vec3 col = BACK_GROUND * (1.0 - c) + STAR * c;\n    c = mountain(uv);\n    col = MOUNTAIN * (1.0 - c) + col * c;\n    fragColor = vec4(pow(col, vec3(0.4545)), 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// if you cannot use GLES3, remove this macro\n#define GLES3\n\n#ifdef GLES3\n// based on https://www.shadertoy.com/view/XlXcW4\n// with some minor changes...\nvec3 hash(uvec3 x) {\n    const uint k = 1103515245U;\n    x.y = ((x.y>>8U)^x.y)*k;\n    x.z = ((x.z>>8U)^x.z)*k;\n    x.z = ((x.z>>8U)^x.z)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    return vec3(x)/float(0xffffffffU);\n}\n\nvec3 noise31(float x) {\n    uint s = uint(int(floor(x)) + 2147483647);\n    float t = fract(x);\n    return mix(hash(uvec3(s)), hash(uvec3(s + 1u)), t);\n}\n\nfloat noise11(float x) {\n    return noise31(x).x;\n}\n\nvec2 noise21(float x) {\n    return noise31(x).xy;\n}\n\nvec3 noise32(vec2 x) {\n    uvec3 s = uvec3(ivec2(floor(x)) + 2147483647, 1);\n    vec2 t = fract(x);\n    uvec2 e = uvec2(0, 1);\n    return mix(\n        mix(hash(s + e.xxx), hash(s + e.yxx), t.x),\n        mix(hash(s + e.xyx), hash(s + e.yyx), t.x),\n        t.y\n    );\n}\n\nfloat noise12(vec2 x) {\n    return noise32(x).x;\n}\n\nvec2 noise22(vec2 x) {\n    return noise32(x).xy;\n}\n\nvec3 noise33(vec3 x) {\n    uvec3 s = uvec3(ivec3(floor(x)) + 2147483647);\n    vec3 t = fract(x);\n    uvec2 e = uvec2(0, 1);\n    return mix(\n        mix(\n            mix(hash(s + e.xxx), hash(s + e.yxx), t.x),\n            mix(hash(s + e.xyx), hash(s + e.yyx), t.x),\n            t.y\n        ),\n        mix(\n            mix(hash(s + e.xxy), hash(s + e.yxy), t.x),\n            mix(hash(s + e.xyy), hash(s + e.yyy), t.x),\n            t.y\n        ),\n        t.z\n    );\n}\n\nfloat noise13(vec3 x) {\n    return noise33(x).x;\n}\n\nvec2 noise23(vec3 x) {\n    return noise33(x).xy;\n}\n\n#define three_mix(a0, a1, a2, t) (\\\n      a0 * (1.0 - t) * (1.0 - t) * 0.5\\\n    + a1 * ((t + 1.0) * (1.0 - t) + t * (2.0 - t)) * 0.5\\\n    + a2 * t * t * 0.5\\\n)\n\nvec3 smoothnoise31(float x) {\n    uint s = uint(int(floor(x)) + 2147483647);\n    float t = fract(x);\n    return three_mix(\n        hash(uvec3(s - 2u)),\n        hash(uvec3(s - 1u)),\n        hash(uvec3(s)),\n        t\n    );\n}\n\nfloat smoothnoise11(float x) {\n    return smoothnoise31(x).x;\n}\n\nvec2 smoothnoise21(float x) {\n    return smoothnoise31(x).xy;\n}\n\nvec3 smoothnoise32(vec2 x) {\n    const int k = 2147483647;\n    uvec2 s = uvec2(ivec2(floor(x)) + k);\n    vec2 t = fract(x);\n    uvec3 e = uvec3(0, 1, 2);\n    return three_mix(\n        three_mix(\n            hash(uvec3(s - e.zz, k)),\n            hash(uvec3(s - e.yz, k)),\n            hash(uvec3(s - e.xz, k)),\n            t.x\n        ),\n        three_mix(\n            hash(uvec3(s - e.zy, k)),\n            hash(uvec3(s - e.yy, k)),\n            hash(uvec3(s - e.xy, k)),\n            t.x\n        ),\n        three_mix(\n            hash(uvec3(s - e.zx, k)),\n            hash(uvec3(s - e.yx, k)),\n            hash(uvec3(s - e.xx, k)),\n            t.x\n        ),\n        t.y\n    );\n}\n\nfloat smoothnoise12(vec2 x) {\n    return smoothnoise32(x).x;\n}\n\nvec2 smoothnoise22(vec2 x) {\n    return smoothnoise32(x).xy;\n}\n\nvec3 smoothnoise33(vec3 x) {\n    uvec3 s = uvec3(ivec3(floor(x)) + 2147483647);\n    vec3 t = fract(x);\n    uvec3 e = uvec3(0, 1, 2);\n    return three_mix(\n        three_mix(\n            three_mix(hash(s - e.zzz), hash(s - e.yzz), hash(s - e.xzz), t.x),\n            three_mix(hash(s - e.zyz), hash(s - e.yyz), hash(s - e.xyz), t.x),\n            three_mix(hash(s - e.zxz), hash(s - e.yxz), hash(s - e.xxz), t.x),\n            t.y\n        ),\n        three_mix(\n            three_mix(hash(s - e.zzy), hash(s - e.yzy), hash(s - e.xzy), t.x),\n            three_mix(hash(s - e.zyy), hash(s - e.yyy), hash(s - e.xyy), t.x),\n            three_mix(hash(s - e.zxy), hash(s - e.yxy), hash(s - e.xxy), t.x),\n            t.y\n        ),\n        three_mix(\n            three_mix(hash(s - e.zzx), hash(s - e.yzx), hash(s - e.xzx), t.x),\n            three_mix(hash(s - e.zyx), hash(s - e.yyx), hash(s - e.xyx), t.x),\n            three_mix(hash(s - e.zxx), hash(s - e.yxx), hash(s - e.xxx), t.x),\n            t.y\n        ),\n        t.z\n    );\n}\n#else\n// Hash without Sine https://www.shadertoy.com/view/4djSRW\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  2 out, 1 in...\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 3 in...\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n\n//----------------------------------------------------------------------------------------\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n//----------------------------------------------------------------------------------------\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 1 in...\nvec4 hash41(float p)\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n    \n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 2 in...\nvec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 3 in...\nvec4 hash43(vec3 p)\n{\n\tvec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 4 in...\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n//----------------------------------------------------------------------------------------\n// noises (original code)\n\n#define three_mix(a0, a1, a2, t) (\\\n      a0 * (1.0 - t) * (1.0 - t) * 0.5\\\n    + a1 * ((t + 1.0) * (1.0 - t) + t * (2.0 - t)) * 0.5\\\n    + a2 * t * t * 0.5\\\n)\n\n#define DEFINE_ONE_DIM_NOISE(type, noise, smoothnoise, hash) \\\ntype noise(float p) { \\\n    float t = fract(p); \\\n    p = floor(p) + 1.465; \\\n    return mix(hash(p), hash(p + 1.0), t); \\\n} \\\ntype smoothnoise(float p) { \\\n    float t = fract(p); \\\n    p = floor(p) + 1.465; \\\n    return three_mix(hash(p - 2.0), hash(p - 1.0), hash(p), t); \\\n}\n\nDEFINE_ONE_DIM_NOISE(float, noise11, smoothnoise11, hash11)\nDEFINE_ONE_DIM_NOISE(vec2, noise21, smoothnoise21, hash21)\nDEFINE_ONE_DIM_NOISE(vec3, noise31, smoothnoise31, hash31)\nDEFINE_ONE_DIM_NOISE(vec4, noise41, smoothnoise41, hash41)\n\n#define DEFINE_TWO_DIM_NOISE(type, noise, smoothnoise, hash) \\\ntype noise(vec2 p) { \\\n    vec2 t = fract(p); \\\n    p = floor(p) + vec2(1.365, -0.593); \\\n    vec2 e = vec2(0, 1); \\\n    return mix( \\\n        mix(hash(p + e.xx), hash(p + e.yx), t.x), \\\n        mix(hash(p + e.yx), hash(p + e.yy), t.x), \\\n        t.y \\\n    ); \\\n} \\\ntype smoothnoise(vec2 p) { \\\n    vec2 t = fract(p); \\\n    p = floor(p) + vec2(1.365, -0.593); \\\n    vec3 e = vec3(0, 1, 2); \\\n    return three_mix( \\\n        three_mix(hash(p - e.zz), hash(p - e.yz), hash(p - e.xz), t.x), \\\n        three_mix(hash(p - e.zy), hash(p - e.yy), hash(p - e.xy), t.x), \\\n        three_mix(hash(p - e.zx), hash(p - e.yx), hash(p - e.xx), t.x), \\\n        t.y \\\n    ); \\\n}\n\nDEFINE_TWO_DIM_NOISE(float, noise12, smoothnoise12, hash12)\nDEFINE_TWO_DIM_NOISE(vec2, noise22, smoothnoise22, hash22)\nDEFINE_TWO_DIM_NOISE(vec3, noise32, smoothenoise32, hash32)\nDEFINE_TWO_DIM_NOISE(vec4, noise42, smoothnoise42, hash42)\n\n#define DEFINE_THREE_DIM_NOISE(type, noise, smoothnoise, hash) \\\ntype noise(vec3 p) { \\\n    vec3 t = fract(p); \\\n    p = floor(p) + vec3(1.465, -0.593, 2.1985); \\\n    vec2 e = vec2(0, 1); \\\n    return mix( \\\n        mix( \\\n            mix(hash(p + e.xxx), hash(p + e.yxx), t.x), \\\n            mix(hash(p + e.xyx), hash(p + e.yyx), t.x), \\\n            t.y \\\n        ), \\\n        mix( \\\n            mix(hash(p + e.xxy), hash(p + e.yxy), t.x), \\\n            mix(hash(p + e.xyy), hash(p + e.yyy), t.x), \\\n            t.y \\\n        ), \\\n        t.z \\\n    ); \\\n} \\\ntype smoothnoise(vec3 p) { \\\n    vec3 t = fract(p); \\\n    p = floor(p) + vec3(1.465, -0.593, 2.1985); \\\n    vec3 e = vec3(0, 1, 2); \\\n    return three_mix( \\\n        three_mix( \\\n            three_mix(hash(p - e.zzz), hash(p - e.yzz), hash(p - e.xzz), t.x), \\\n            three_mix(hash(p - e.zyz), hash(p - e.yyz), hash(p - e.xyz), t.x), \\\n            three_mix(hash(p - e.zxz), hash(p - e.yxz), hash(p - e.xxz), t.x), \\\n            t.y \\\n        ), \\\n        three_mix( \\\n            three_mix(hash(p - e.zzy), hash(p - e.yzy), hash(p - e.xzy), t.x), \\\n            three_mix(hash(p - e.zyy), hash(p - e.yyy), hash(p - e.xyy), t.x), \\\n            three_mix(hash(p - e.zxy), hash(p - e.yxy), hash(p - e.xxy), t.x), \\\n            t.y \\\n        ), \\\n        three_mix( \\\n            three_mix(hash(p - e.zzx), hash(p - e.yzx), hash(p - e.xzx), t.x), \\\n            three_mix(hash(p - e.zyx), hash(p - e.yyx), hash(p - e.xyx), t.x), \\\n            three_mix(hash(p - e.zxx), hash(p - e.yxx), hash(p - e.xxx), t.x), \\\n            t.y \\\n        ), \\\n        t.z \\\n    ); \\\n}\n\nDEFINE_THREE_DIM_NOISE(float, noise13, smoothnoise13, hash13)\nDEFINE_THREE_DIM_NOISE(vec2, noise23, smoothnoise23, hash23)\nDEFINE_THREE_DIM_NOISE(vec3, noise33, smoothnoise33, hash33)\nDEFINE_THREE_DIM_NOISE(vec4, noise43, smoothnoise43, hash43)\n#endif",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}