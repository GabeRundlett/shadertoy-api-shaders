{
    "Shader": {
        "info": {
            "date": "1623035378",
            "description": "Blobbies! (with automated calculations). Now using [url=https://www.shadertoy.com/view/ltVfDK]this[/url] solver which does not have artifacts.",
            "flags": 0,
            "hasliked": 0,
            "id": "stsGWf",
            "likes": 9,
            "name": "Blobbies Ray Intersection",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "raycasting",
                "metaballs",
                "intersection",
                "blobbies"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 204
        },
        "renderpass": [
            {
                "code": "struct Linear { float a; float b; };\nstruct Quadratic { float a; float b; float c; };\nstruct Quartic { float a; float b; float c; float d; float e; };\n\n// Polynomial arithmetic makes things much easier and intuitive\nQuadratic add(in Quadratic a, in float b) { a.c += b; return a; }\nQuartic add(in Quartic a, in float b) { a.e += b; return a; }\nQuadratic add(in Quadratic a, in Quadratic b) { return Quadratic(a.a + b.a, a.b + b.b, a.c + b.c); }\nQuartic mul(in Quadratic a, in Quadratic b) { return Quartic(a.a * b.a, a.a * b.b + a.b * b.a, a.a * b.c + a.b * b.b + a.c * b.a, a.b * b.c + a.c * b.b, a.c * b.c); }\nQuadratic square(in Linear a) { return Quadratic(a.a * a.a, 2.0 * a.a * a.b, a.b * a.b); }\n\n// Automatic differentiation utilities (in three variables)\nvec4 add(in vec4 f, in float g) { f.x += g; return f; }\nvec4 mul(in vec4 f, in vec4 g) { return vec4(f.x * g.x, dot(f.xy, g.yx), dot(f.xz, g.zx), dot(f.xw, g.wx)); }\nvec4 square(in vec4 f) { return vec4(f.x * f.x, 2.0 * f.x * f.yzw); }\n\n// Smallest positive root of a quartic\nfloat quartic2(in float a, in float b, in float c, in float d, in float e) {\n    vec4 roots;\n    float t = -1.0;\n    for (int n=0; n < quartic(b / a, c / a, d / a, e / a, roots); n++) {\n        if (roots[n] > 0.0) {\n            t = t < 0.0 ? roots[n] : min(t, roots[n]);\n        }\n    }\n\n    return t;\n}\n\nfloat iBlobbies(in vec3 ro, in vec3 rd, in float size1, in float size2, in vec3 pos1, in vec3 pos2, in float blobbiness) {\n    vec3 ro1 = ro - pos1, ro2 = ro - pos2;\n    Linear x1 = Linear(rd.x, ro1.x), y1 = Linear(rd.y, ro1.y), z1 = Linear(rd.z, ro1.z);\n    Linear x2 = Linear(rd.x, ro2.x), y2 = Linear(rd.y, ro2.y), z2 = Linear(rd.z, ro2.z);\n\n    Quadratic blob1 = add(add(square(x1), add(square(y1), square(z1))), -size1);\n    Quadratic blob2 = add(add(square(x2), add(square(y2), square(z2))), -size2);\n\n    Quartic blobbies = add(mul(blob1, blob2), -blobbiness);\n    return quartic2(blobbies.a, blobbies.b, blobbies.c, blobbies.d, blobbies.e);\n}\n\nvec3 nBlobbies(in vec3 p, in float size1, in float size2, in vec3 pos1, in vec3 pos2, in float blobbiness) {\n    vec3 p1 = p - pos1, p2 = p - pos2;\n    vec4 x1 = vec4(p1.x, 1.0, 0.0, 0.0), y1 = vec4(p1.y, 0.0, 1.0, 0.0), z1 = vec4(p1.z, 0.0, 0.0, 1.0);\n    vec4 x2 = vec4(p2.x, 1.0, 0.0, 0.0), y2 = vec4(p2.y, 0.0, 1.0, 0.0), z2 = vec4(p2.z, 0.0, 0.0, 1.0);\n\n    vec4 blob1 = add(square(x1) + square(y1) + square(z1), -size1);\n    vec4 blob2 = add(square(x2) + square(y2) + square(z2), -size2);\n\n    vec4 blobbies = add(mul(blob1, blob2), -blobbiness);\n    return normalize(blobbies.yzw);\n}\n\nvec4 render(in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    float time = 1406.42;\n\n    vec2 mouse = iMouse.z > 0.0 ? (iMouse.xy - center) / iResolution.y * 3.14 : vec2(0.0, -0.5);\n    vec2 uv = (fragCoord - center) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 10.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    vec4 fragColor = texture(iChannel0, rd);\n\n    vec3 pos = vec3(cos(iTime) * 2.0, sin(iTime), cos(iTime) * sin(iTime)) * 3.0;\n    float t = iBlobbies(ro, rd, 2.0, 5.0, pos, vec3(0.0), 5.0);\n    if (t > 0.0) {\n        vec3 hit = ro + rd * t;\n        vec3 n = nBlobbies(hit, 2.0, 5.0, pos, vec3(0.0), 5.0);\n        vec4 envMap = texture(iChannel0, reflect(rd, n));\n        fragColor = envMap * abs(dot(rd, n));\n    }\n\n    return fragColor;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = render(fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float cbrt(in float x) { return sign(x) * pow(abs(x), 1.0 / 3.0); }\nint quartic(in float b, in float c, in float d, in float e, inout vec4 roots) {\n    // Depress the quartic to x^4 + px^2 + qx + r by substituting x-b/4a\n    // This can be found by substituting x+u and the solving for the value\n    // of u that makes the t^3 term go away\n    float bb = b * b;\n    float p = (8.0 * c - 3.0 * bb) / 8.0;\n    float q = (8.0 * d - 4.0 * c * b + bb * b) / 8.0;\n    float r = (256.0 * e - 64.0 * d * b + 16.0 * c * bb - 3.0 * bb * bb) / 256.0;\n    int n = 0; // Root counter\n\n    // Solve for a root to (t^2)^3 + 2p(t^2)^2 + (p^2 - 4r)(t^2) - q^2 which resolves the\n    // system of equations relating the product of two quadratics to the depressed quartic\n    float ra =  2.0 * p;\n    float rb =  p * p - 4.0 * r;\n    float rc = -q * q;\n\n    // Depress using the method above\n    float ru = ra / 3.0;\n    float rp = rb - ra * ru;\n    float rq = rc - (rb - 2.0 * ra * ra / 9.0) * ru;\n\n    float lambda;\n    float rh = 0.25 * rq * rq + rp * rp * rp / 27.0;\n    if (rh > 0.0) { // Use Cardano's formula in the case of one real root\n        rh = sqrt(rh);\n        float ro = -0.5 * rq;\n        lambda = cbrt(ro - rh) + cbrt(ro + rh) - ru;\n    }\n\n    else { // Use complex arithmetic in the case of three real roots\n        float rm = sqrt(-rp / 3.0);\n        lambda = -2.0 * rm * sin(asin(1.5 * rq / (rp * rm)) / 3.0) - ru;\n    }\n\n    // Newton iteration to fix numerical problems (using Horners method)\n    // Suggested by @NinjaKoala\n    for(int i=0; i < 2; i++) {\n        float a_2 = ra + lambda;\n        float a_1 = rb + lambda * a_2;\n        float b_2 = a_2 + lambda;\n\n        float f = rc + lambda * a_1; // Evaluation of λ^3 + ra * λ^2 + rb * λ + rc\n        float f1 = a_1 + lambda * b_2; // Derivative\n\n        lambda -= f / f1; // Newton iteration step\n    }\n\n    // Solve two quadratics factored from the quartic using the cubic root\n    if (lambda < 0.0) return n;\n    float t = sqrt(lambda); // Because we solved for t^2 but want t\n    float alpha = 2.0 * q / t, beta = lambda + ra;\n\n    float u = 0.25 * b;\n    t *= 0.5;\n\n    float z = -alpha - beta;\n    if (z > 0.0) {\n        z = sqrt(z) * 0.5;\n        float h = +t - u;\n        roots.xy = vec2(h + z, h - z);\n        n += 2;\n    }\n\n    float w = +alpha - beta;\n    if (w > 0.0) {\n        w = sqrt(w) * 0.5;\n        float h = -t - u;\n        roots.zw = vec2(h + w, h - w);\n        if (n == 0) roots.xy = roots.zw;\n        n += 2;\n    }\n\n    return n;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}