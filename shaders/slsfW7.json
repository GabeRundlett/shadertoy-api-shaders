{
    "Shader": {
        "info": {
            "date": "1651002061",
            "description": "cylindrical perspective camera, opening 360°\nmouse.xy: rot\nSPACE : toggles traveling vs circular trajectory.\n",
            "flags": 16,
            "hasliked": 0,
            "id": "slsfW7",
            "likes": 16,
            "name": "360° panoramic camera tour",
            "published": 3,
            "tags": [
                "projection",
                "perspective",
                "cameras",
                "cylindrical"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 365
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/ftffWN\n\n#define T(U)          ( V = smoothstep(0.,-.05,abs(fract(U)-.5) -.5 ),    \\\n                        texture(iChannel0, U) * V.x*V.y ) // pattern\n#define rot(a)          mat2(cos( a + vec4(0,11,33,0)))\n#define keyToggle(a)  ( texelFetch(iChannel3,ivec2(a,2),0).x > 0. )\n\nvoid mainImage(out vec4 O, vec2 u)\n{\n    vec2  R = iResolution.xy, V,\n          U = ( 2.*u - R ) / R.x,                     // normalized screen coordinates\n          M = iMouse.xy/R;\n    float s, a,  W = 1./3.14;                         // 1/W: camera opening\n    vec3  P = vec3(0), T,D;                           // ray direction. flat perspective  = (U,W)\n    a = U.x/W, D.y=U.y, D.xz = W* vec2(sin(a),cos(a));//   cylindrical perspective (panorama)\n    D = normalize(D); \n    if (iMouse.z > 0.)                                // camera control\n      D.yz *= rot( 1.57*(2.*M.y-1.) ),\n      D.xz *= rot( 6.28*(2.*M.x-1.) );\n    T = keyToggle(32) ? 10.*vec3(cos(iTime),0,sin(iTime)) : vec3(0,0,10.*iTime); // motion\n    if  keyToggle(32) D.xz *= rot( -iTime );\n    P += T;\n\n    O-=O;\n    float  t = 10.,c = 1.;    \n    P.y+= 5.;\n    for ( ; c > 0. && t > .01 ; c -= .04 )            // march scene\n        t =  min(s=length(mod(P,10.) -5.)-1.,P.y+5.), // distance to objects\n        P += t*D;                                     // sphere-tracing step\n    if (t==s) { O = vec4(c,0,0,1); return; }          // --- coloring & shading\n    \n    P = D/abs(D.y); P += T/10.; \n    if (P.y<0.) O = T(P.xz+vec2(.5,0)) *vec4(0,1,1,0);// draw floor square grid\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}