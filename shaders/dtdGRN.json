{
    "Shader": {
        "info": {
            "date": "1682096167",
            "description": "(wait for audio to load)\nBy Johann Sebastian Bach\nGraphics inspired by Smalin",
            "flags": 40,
            "hasliked": 0,
            "id": "dtdGRN",
            "likes": 1,
            "name": "Goldberg Variation no. 1",
            "published": 3,
            "tags": [
                "music",
                "audio",
                "bach"
            ],
            "usePreview": 0,
            "username": "incription",
            "viewed": 276
        },
        "renderpass": [
            {
                "code": "\n\n#define F(x,y) col = mix(x, col, smoothstep(0., fwidth(y), y))\n\nvec4 mix4(vec4 v1, vec4 v2, float a) { return v1 * (1. - a) + v2 * a; }\n\nvec4 getNote(int n, int channel) {\n    return texelFetch(iChannel1, ivec2(n, channel), 0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv.x *= SCALE;\n\n    vec3 col = vec3(0.02);\n    vec3 effects = vec3(0);\n\n    for(int channel = 0; channel < CHANNELS; channel++) {\n        ivec2 index = ivec2(texelFetch(iChannel0, ivec2(channel, 0), 0).xy);\n        \n        for(int i = 0; i < index.y - index.x; i++) {\n            int noteIndex = index.x + i;\n            \n            vec4 noteBox = getNoteBox(getNote(noteIndex, channel), iTime);\n            vec4 nextNoteBox = getNoteBox(getNote(noteIndex + 1, channel), iTime);\n            \n            float d = sdNote(noteBox.xy - uv, noteBox.zw);\n            //vec3[6](vec3(1.000,0.000,0.000),vec3(1.000,0.000,0.918),vec3(0.114,0.000,0.980),vec3(0.000,1.000,0.384),vec3(1.000,0.969,0.000),vec3(0.867,0.478,0.031))[channel]\n            vec3 nCol = hsv2rgb(vec3(float(channel+1)/float(CHANNELS),.76,1.));\n            F(nCol, d);\n            //col = mix(col, vec3[6](vec3(1.000,0.000,0.000),vec3(1.000,0.000,0.918),vec3(0.114,0.000,0.980),vec3(0.000,1.000,0.384),vec3(1.000,0.969,0.000),vec3(0.867,0.478,0.031))[channel], float(d<=0.));\n            if(noteBox.x - noteBox.z < 0. && noteBox.x + noteBox.z > 0.) F(pow(col,vec3(0.05)), d);\n            \n            float t = 1. - (nextNoteBox.x - nextNoteBox.z) / (nextNoteBox.x - noteBox.x + noteBox.z - nextNoteBox.z);\n            vec4 lerped = mix4(noteBox, nextNoteBox, t * t);\n            effects = mix(effects, float((nextNoteBox.x - nextNoteBox.z) - (noteBox.x + noteBox.z) <= 0.5) * pow(col,vec3(0.2)), float(sdNote(lerped.xy - uv,lerped.zw) <= 0. && (noteBox.x - noteBox.z < 0. && nextNoteBox.x - nextNoteBox.z > 0.)));\n        }\n    }\n    col += effects;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 uv = ivec2(fragCoord);\n    int n = uv.x;\n    int channel = uv.y;\n    \n    vec4 note = getNoteData(channel, n);\n   \n    fragColor = note;\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int channelIndex = ivec2(fragCoord).x;\n    vec4 data = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    int left = 0;\n    int right = 1;\n    if(channelIndex < CHANNELS) {\n        left = int(data.x);\n        right = int(data.y);\n        \n        vec4 box = getNoteBox(getNoteData(channelIndex, left), iTime);\n        if(box.x + box.z < -.5 * SCALE * ASPECT) left += 1;\n        \n        box = getNoteBox(getNoteData(channelIndex, right), iTime);\n        if(box.x - box.z < .5 * SCALE * ASPECT && iTime < 114.) right += 1;\n    }\n    fragColor = vec4(left, right, -1, -1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\n#define CENTER 60.\n#define BPM 60.\n#define SCALE 3.\n#define ASPECT 1.7777\n#define CHANNELS 2\n#define INTRO 1.5\n\nconst vec4 notes0[596] = vec4[596](vec4(0.0, 67, 0.15, 0.79), vec4(0.15, 66, 0.15, 0.79), vec4(0.3, 67, 0.45, 0.79), vec4(0.75, 62, 0.15, 0.79), vec4(0.9, 64, 0.15, 0.79), vec4(1.05, 66, 0.15, 0.79), vec4(1.2, 67, 0.15, 0.79), vec4(1.35, 69, 0.15, 0.79), vec4(1.5, 71, 0.15, 0.79), vec4(1.65, 73, 0.15, 0.79), vec4(1.8, 74, 0.15, 0.79), vec4(1.95, 73, 0.15, 0.79), vec4(2.1, 74, 0.45, 0.79), vec4(2.55, 69, 0.15, 0.79), vec4(2.7, 71, 0.15, 0.79), vec4(2.85, 73, 0.15, 0.79), vec4(3.0, 74, 0.15, 0.79), vec4(3.15, 76, 0.15, 0.79), vec4(3.3, 78, 0.15, 0.79), vec4(3.45, 74, 0.15, 0.79), vec4(3.6, 79, 0.15, 0.79), vec4(3.75, 78, 0.15, 0.79), vec4(3.9, 79, 0.45, 0.79), vec4(4.35, 78, 0.15, 0.79), vec4(4.5, 76, 0.15, 0.79), vec4(4.65, 74, 0.15, 0.79), vec4(4.8, 73, 0.15, 0.79), vec4(4.95, 76, 0.15, 0.79), vec4(5.1, 69, 0.15, 0.79), vec4(5.25, 67, 0.15, 0.79), vec4(5.4, 66, 0.15, 0.79), vec4(5.55, 64, 0.15, 0.79), vec4(5.7, 62, 0.15, 0.79), vec4(5.85, 61, 0.15, 0.79), vec4(6.0, 62, 0.15, 0.79), vec4(6.15, 66, 0.15, 0.79), vec4(6.3, 57, 0.15, 0.79), vec4(6.45, 55, 0.15, 0.79), vec4(6.6, 54, 0.15, 0.79), vec4(6.75, 57, 0.15, 0.79), vec4(6.9, 50, 0.3, 0.79), vec4(7.5, 74, 0.15, 0.79), vec4(7.65, 72, 0.15, 0.79), vec4(7.8, 74, 0.3, 0.79), vec4(8.1, 67, 0.3, 0.79), vec4(8.4, 59, 0.3, 0.79), vec4(8.7, 74, 0.3, 0.79), vec4(9.3, 76, 0.15, 0.79), vec4(9.45, 74, 0.15, 0.79), vec4(9.6, 76, 0.3, 0.79), vec4(9.9, 69, 0.3, 0.79), vec4(10.2, 60, 0.3, 0.79), vec4(10.5, 76, 0.3, 0.79), vec4(11.1, 78, 0.15, 0.79), vec4(11.25, 76, 0.15, 0.79), vec4(11.4, 78, 0.3, 0.79), vec4(11.7, 74, 0.3, 0.79), vec4(12.0, 81, 0.3, 0.79), vec4(12.3, 72, 0.6, 0.79), vec4(12.9, 71, 0.3, 0.79), vec4(13.35, 67, 0.15, 0.79), vec4(13.5, 71, 0.15, 0.79), vec4(13.65, 74, 0.15, 0.79), vec4(13.8, 79, 0.15, 0.79), vec4(13.95, 74, 0.15, 0.79), vec4(14.1, 79, 0.15, 0.79), vec4(14.25, 81, 0.15, 0.79), vec4(14.4, 83, 0.15, 0.79), vec4(14.55, 79, 0.15, 0.79), vec4(14.7, 74, 0.15, 0.79), vec4(14.85, 71, 0.15, 0.79), vec4(15.0, 67, 0.15, 0.79), vec4(15.15, 71, 0.15, 0.79), vec4(15.3, 74, 0.15, 0.79), vec4(15.45, 79, 0.15, 0.79), vec4(15.6, 83, 0.15, 0.79), vec4(15.75, 79, 0.15, 0.79), vec4(15.9, 78, 0.15, 0.79), vec4(16.05, 76, 0.15, 0.79), vec4(16.2, 81, 0.15, 0.79), vec4(16.35, 76, 0.15, 0.79), vec4(16.5, 73, 0.15, 0.79), vec4(16.65, 69, 0.15, 0.79), vec4(16.8, 66, 0.15, 0.79), vec4(16.95, 69, 0.15, 0.79), vec4(17.1, 73, 0.15, 0.79), vec4(17.25, 76, 0.15, 0.79), vec4(17.4, 81, 0.15, 0.79), vec4(17.55, 78, 0.15, 0.79), vec4(17.7, 76, 0.15, 0.79), vec4(17.85, 74, 0.15, 0.79), vec4(18.0, 79, 0.15, 0.79), vec4(18.15, 74, 0.15, 0.79), vec4(18.3, 71, 0.15, 0.79), vec4(18.45, 67, 0.15, 0.79), vec4(18.6, 64, 0.15, 0.79), vec4(18.75, 67, 0.15, 0.79), vec4(18.9, 71, 0.15, 0.79), vec4(19.05, 74, 0.15, 0.79), vec4(19.2, 79, 0.15, 0.79), vec4(19.35, 78, 0.15, 0.79), vec4(19.5, 76, 0.15, 0.79), vec4(19.65, 74, 0.15, 0.79), vec4(19.8, 73, 0.15, 0.79), vec4(19.95, 67, 0.15, 0.79), vec4(20.1, 64, 0.15, 0.79), vec4(20.25, 61, 0.15, 0.79), vec4(20.4, 57, 0.15, 0.79), vec4(20.55, 61, 0.15, 0.79), vec4(20.7, 64, 0.15, 0.79), vec4(20.85, 67, 0.15, 0.79), vec4(21.0, 73, 0.15, 0.79), vec4(21.15, 76, 0.15, 0.79), vec4(21.3, 74, 0.15, 0.79), vec4(21.45, 73, 0.15, 0.79), vec4(21.6, 74, 0.3, 0.79), vec4(21.9, 54, 0.3, 0.79), vec4(22.2, 54, 0.3, 0.79), vec4(22.5, 69, 0.3, 0.79), vec4(22.8, 74, 0.3, 0.79), vec4(23.1, 78, 0.3, 0.79), vec4(23.4, 71, 0.3, 0.79), vec4(23.7, 55, 0.3, 0.79), vec4(24.0, 55, 0.3, 0.79), vec4(24.3, 71, 0.3, 0.79), vec4(24.6, 76, 0.3, 0.79), vec4(24.9, 79, 0.3, 0.79), vec4(25.2, 73, 0.15, 0.79), vec4(25.35, 76, 0.15, 0.79), vec4(25.5, 69, 0.15, 0.79), vec4(25.65, 67, 0.15, 0.79), vec4(25.8, 66, 0.15, 0.79), vec4(25.95, 69, 0.15, 0.79), vec4(26.1, 74, 0.15, 0.79), vec4(26.25, 78, 0.15, 0.79), vec4(26.4, 79, 0.15, 0.79), vec4(26.55, 76, 0.15, 0.79), vec4(26.7, 74, 0.15, 0.79), vec4(26.85, 73, 0.15, 0.79), vec4(27.0, 78, 0.15, 0.79), vec4(27.15, 74, 0.15, 0.79), vec4(27.3, 73, 0.15, 0.79), vec4(27.45, 71, 0.15, 0.79), vec4(27.6, 69, 0.15, 0.79), vec4(27.75, 67, 0.15, 0.79), vec4(27.9, 66, 0.15, 0.79), vec4(28.05, 64, 0.15, 0.79), vec4(28.2, 62, 0.6, 0.79), vec4(28.8, 67, 0.15, 0.79), vec4(28.95, 66, 0.15, 0.79), vec4(29.1, 67, 0.45, 0.79), vec4(29.55, 62, 0.15, 0.79), vec4(29.7, 64, 0.15, 0.79), vec4(29.85, 66, 0.15, 0.79), vec4(30.0, 67, 0.15, 0.79), vec4(30.15, 69, 0.15, 0.79), vec4(30.3, 71, 0.15, 0.79), vec4(30.45, 73, 0.15, 0.79), vec4(30.6, 74, 0.15, 0.79), vec4(30.75, 73, 0.15, 0.79), vec4(30.9, 74, 0.45, 0.79), vec4(31.35, 69, 0.15, 0.79), vec4(31.5, 71, 0.15, 0.79), vec4(31.65, 73, 0.15, 0.79), vec4(31.8, 74, 0.15, 0.79), vec4(31.95, 76, 0.15, 0.79), vec4(32.1, 78, 0.15, 0.79), vec4(32.25, 74, 0.15, 0.79), vec4(32.4, 79, 0.15, 0.79), vec4(32.55, 78, 0.15, 0.79), vec4(32.7, 79, 0.45, 0.79), vec4(33.15, 78, 0.15, 0.79), vec4(33.3, 76, 0.15, 0.79), vec4(33.45, 74, 0.15, 0.79), vec4(33.6, 73, 0.15, 0.79), vec4(33.75, 76, 0.15, 0.79), vec4(33.9, 69, 0.15, 0.79), vec4(34.05, 67, 0.15, 0.79), vec4(34.2, 66, 0.15, 0.79), vec4(34.35, 64, 0.15, 0.79), vec4(34.5, 62, 0.15, 0.79), vec4(34.65, 61, 0.15, 0.79), vec4(34.8, 62, 0.15, 0.79), vec4(34.95, 66, 0.15, 0.79), vec4(35.1, 57, 0.15, 0.79), vec4(35.25, 55, 0.15, 0.79), vec4(35.4, 54, 0.15, 0.79), vec4(35.55, 57, 0.15, 0.79), vec4(35.7, 50, 0.3, 0.79), vec4(36.3, 74, 0.15, 0.79), vec4(36.45, 72, 0.15, 0.79), vec4(36.6, 74, 0.3, 0.79), vec4(36.9, 67, 0.3, 0.79), vec4(37.2, 59, 0.3, 0.79), vec4(37.5, 74, 0.3, 0.79), vec4(38.1, 76, 0.15, 0.79), vec4(38.25, 74, 0.15, 0.79), vec4(38.4, 76, 0.3, 0.79), vec4(38.7, 69, 0.3, 0.79), vec4(39.0, 60, 0.3, 0.79), vec4(39.3, 76, 0.3, 0.79), vec4(39.9, 78, 0.15, 0.79), vec4(40.05, 76, 0.15, 0.79), vec4(40.2, 78, 0.3, 0.79), vec4(40.5, 74, 0.3, 0.79), vec4(40.8, 81, 0.3, 0.79), vec4(41.1, 72, 0.6, 0.79), vec4(41.7, 71, 0.3, 0.79), vec4(42.15, 67, 0.15, 0.79), vec4(42.3, 71, 0.15, 0.79), vec4(42.45, 74, 0.15, 0.79), vec4(42.6, 79, 0.15, 0.79), vec4(42.75, 74, 0.15, 0.79), vec4(42.9, 79, 0.15, 0.79), vec4(43.05, 81, 0.15, 0.79), vec4(43.2, 83, 0.15, 0.79), vec4(43.35, 79, 0.15, 0.79), vec4(43.5, 74, 0.15, 0.79), vec4(43.65, 71, 0.15, 0.79), vec4(43.8, 67, 0.15, 0.79), vec4(43.95, 71, 0.15, 0.79), vec4(44.1, 74, 0.15, 0.79), vec4(44.25, 79, 0.15, 0.79), vec4(44.4, 83, 0.15, 0.79), vec4(44.55, 79, 0.15, 0.79), vec4(44.7, 78, 0.15, 0.79), vec4(44.85, 76, 0.15, 0.79), vec4(45.0, 81, 0.15, 0.79), vec4(45.15, 76, 0.15, 0.79), vec4(45.3, 73, 0.15, 0.79), vec4(45.45, 69, 0.15, 0.79), vec4(45.6, 66, 0.15, 0.79), vec4(45.75, 69, 0.15, 0.79), vec4(45.9, 73, 0.15, 0.79), vec4(46.05, 76, 0.15, 0.79), vec4(46.2, 81, 0.15, 0.79), vec4(46.35, 78, 0.15, 0.79), vec4(46.5, 76, 0.15, 0.79), vec4(46.65, 74, 0.15, 0.79), vec4(46.8, 79, 0.15, 0.79), vec4(46.95, 74, 0.15, 0.79), vec4(47.1, 71, 0.15, 0.79), vec4(47.25, 67, 0.15, 0.79), vec4(47.4, 64, 0.15, 0.79), vec4(47.55, 67, 0.15, 0.79), vec4(47.7, 71, 0.15, 0.79), vec4(47.85, 74, 0.15, 0.79), vec4(48.0, 79, 0.15, 0.79), vec4(48.15, 78, 0.15, 0.79), vec4(48.3, 76, 0.15, 0.79), vec4(48.45, 74, 0.15, 0.79), vec4(48.6, 73, 0.15, 0.79), vec4(48.75, 67, 0.15, 0.79), vec4(48.9, 64, 0.15, 0.79), vec4(49.05, 61, 0.15, 0.79), vec4(49.2, 57, 0.15, 0.79), vec4(49.35, 61, 0.15, 0.79), vec4(49.5, 64, 0.15, 0.79), vec4(49.65, 67, 0.15, 0.79), vec4(49.8, 73, 0.15, 0.79), vec4(49.95, 76, 0.15, 0.79), vec4(50.1, 74, 0.15, 0.79), vec4(50.25, 73, 0.15, 0.79), vec4(50.4, 74, 0.3, 0.79), vec4(50.7, 54, 0.3, 0.79), vec4(51.0, 54, 0.3, 0.79), vec4(51.3, 69, 0.3, 0.79), vec4(51.6, 74, 0.3, 0.79), vec4(51.9, 78, 0.3, 0.79), vec4(52.2, 71, 0.3, 0.79), vec4(52.5, 55, 0.3, 0.79), vec4(52.8, 55, 0.3, 0.79), vec4(53.1, 71, 0.3, 0.79), vec4(53.4, 76, 0.3, 0.79), vec4(53.7, 79, 0.3, 0.79), vec4(54.0, 73, 0.15, 0.79), vec4(54.15, 76, 0.15, 0.79), vec4(54.3, 69, 0.15, 0.79), vec4(54.45, 67, 0.15, 0.79), vec4(54.6, 66, 0.15, 0.79), vec4(54.75, 69, 0.15, 0.79), vec4(54.9, 74, 0.15, 0.79), vec4(55.05, 78, 0.15, 0.79), vec4(55.2, 79, 0.15, 0.79), vec4(55.35, 76, 0.15, 0.79), vec4(55.5, 74, 0.15, 0.79), vec4(55.65, 73, 0.15, 0.79), vec4(55.8, 78, 0.15, 0.79), vec4(55.95, 74, 0.15, 0.79), vec4(56.1, 73, 0.15, 0.79), vec4(56.25, 71, 0.15, 0.79), vec4(56.4, 69, 0.15, 0.79), vec4(56.55, 67, 0.15, 0.79), vec4(56.7, 66, 0.15, 0.79), vec4(56.85, 64, 0.15, 0.79), vec4(57.0, 62, 0.6, 0.79), vec4(57.6, 78, 0.15, 0.79), vec4(57.75, 79, 0.15, 0.79), vec4(57.9, 81, 0.45, 0.79), vec4(58.35, 83, 0.15, 0.79), vec4(58.5, 81, 0.15, 0.79), vec4(58.65, 79, 0.15, 0.79), vec4(58.8, 78, 0.15, 0.79), vec4(58.95, 76, 0.15, 0.79), vec4(59.1, 74, 0.15, 0.79), vec4(59.25, 72, 0.15, 0.79), vec4(59.4, 71, 0.15, 0.79), vec4(59.55, 72, 0.15, 0.79), vec4(59.7, 74, 0.45, 0.79), vec4(60.15, 76, 0.15, 0.79), vec4(60.3, 74, 0.15, 0.79), vec4(60.45, 72, 0.15, 0.79), vec4(60.6, 71, 0.15, 0.79), vec4(60.75, 69, 0.15, 0.79), vec4(60.9, 67, 0.15, 0.79), vec4(61.05, 66, 0.15, 0.79), vec4(61.2, 64, 0.15, 0.79), vec4(61.35, 68, 0.15, 0.79), vec4(61.5, 69, 0.15, 0.79), vec4(61.65, 71, 0.15, 0.79), vec4(61.8, 69, 0.15, 0.79), vec4(61.95, 64, 0.15, 0.79), vec4(62.1, 69, 0.15, 0.79), vec4(62.25, 71, 0.15, 0.79), vec4(62.4, 72, 0.15, 0.79), vec4(62.55, 69, 0.15, 0.79), vec4(62.7, 75, 0.15, 0.79), vec4(62.85, 76, 0.15, 0.79), vec4(63.0, 78, 0.15, 0.79), vec4(63.15, 76, 0.15, 0.79), vec4(63.3, 75, 0.15, 0.79), vec4(63.45, 73, 0.15, 0.79), vec4(63.6, 71, 1.35, 0.79), vec4(64.95, 75, 0.15, 0.79), vec4(65.1, 76, 0.45, 0.79), vec4(65.55, 63, 0.15, 0.79), vec4(65.7, 64, 0.45, 0.79), vec4(66.15, 51, 0.15, 0.79), vec4(66.3, 52, 0.3, 0.79), vec4(66.75, 80, 0.15, 0.79), vec4(66.9, 81, 0.45, 0.79), vec4(67.35, 68, 0.15, 0.79), vec4(67.5, 69, 0.45, 0.79), vec4(67.95, 56, 0.15, 0.79), vec4(68.1, 57, 0.45, 0.79), vec4(68.55, 59, 0.15, 0.79), vec4(68.7, 60, 0.15, 0.79), vec4(68.85, 66, 0.15, 0.79), vec4(69.0, 59, 0.15, 0.79), vec4(69.15, 63, 0.15, 0.79), vec4(69.3, 64, 0.15, 0.79), vec4(69.45, 67, 0.15, 0.79), vec4(69.6, 66, 0.15, 0.79), vec4(69.75, 64, 0.15, 0.79), vec4(69.9, 63, 0.15, 0.79), vec4(70.05, 69, 0.15, 0.79), vec4(70.2, 67, 0.15, 0.79), vec4(70.35, 66, 0.15, 0.79), vec4(70.5, 64, 0.15, 0.79), vec4(70.65, 63, 0.15, 0.79), vec4(70.8, 64, 0.15, 0.79), vec4(70.95, 67, 0.15, 0.79), vec4(71.1, 59, 0.15, 0.79), vec4(71.25, 57, 0.15, 0.79), vec4(71.4, 55, 0.15, 0.79), vec4(71.55, 59, 0.15, 0.79), vec4(71.7, 52, 0.3, 0.79), vec4(72.3, 76, 0.3, 0.79), vec4(72.6, 72, 0.3, 0.79), vec4(72.9, 76, 0.3, 0.79), vec4(73.2, 81, 0.3, 0.79), vec4(73.5, 69, 0.3, 0.79), vec4(74.1, 74, 0.3, 0.79), vec4(74.4, 71, 0.3, 0.79), vec4(74.7, 74, 0.3, 0.79), vec4(75.0, 79, 0.3, 0.79), vec4(75.3, 67, 0.3, 0.79), vec4(75.6, 72, 0.15, 0.79), vec4(75.75, 69, 0.15, 0.79), vec4(75.9, 64, 0.15, 0.79), vec4(76.05, 60, 0.15, 0.79), vec4(76.2, 57, 0.15, 0.79), vec4(76.35, 60, 0.15, 0.79), vec4(76.5, 64, 0.15, 0.79), vec4(76.65, 69, 0.15, 0.79), vec4(76.8, 72, 0.15, 0.79), vec4(76.95, 69, 0.15, 0.79), vec4(77.1, 72, 0.15, 0.79), vec4(77.25, 76, 0.15, 0.79), vec4(77.4, 78, 0.15, 0.79), vec4(77.55, 72, 0.15, 0.79), vec4(77.7, 69, 0.15, 0.79), vec4(77.85, 66, 0.15, 0.79), vec4(78.0, 62, 0.15, 0.79), vec4(78.15, 66, 0.15, 0.79), vec4(78.3, 69, 0.15, 0.79), vec4(78.45, 72, 0.15, 0.79), vec4(78.6, 78, 0.15, 0.79), vec4(78.75, 72, 0.15, 0.79), vec4(78.9, 78, 0.15, 0.79), vec4(79.05, 81, 0.15, 0.79), vec4(79.2, 83, 0.15, 0.79), vec4(79.35, 79, 0.15, 0.79), vec4(79.5, 74, 0.15, 0.79), vec4(79.65, 71, 0.15, 0.79), vec4(79.8, 67, 0.15, 0.79), vec4(79.95, 71, 0.15, 0.79), vec4(80.1, 74, 0.15, 0.79), vec4(80.25, 79, 0.15, 0.79), vec4(80.4, 83, 0.15, 0.79), vec4(80.55, 77, 0.15, 0.79), vec4(80.7, 83, 0.15, 0.79), vec4(80.85, 86, 0.15, 0.79), vec4(81.0, 76, 0.15, 0.79), vec4(81.15, 86, 0.15, 0.79), vec4(81.3, 84, 0.15, 0.79), vec4(81.45, 76, 0.15, 0.79), vec4(81.6, 74, 0.15, 0.79), vec4(81.75, 84, 0.15, 0.79), vec4(81.9, 83, 0.15, 0.79), vec4(82.05, 74, 0.15, 0.79), vec4(82.2, 72, 0.15, 0.79), vec4(82.35, 76, 0.15, 0.79), vec4(82.5, 78, 0.15, 0.79), vec4(82.65, 79, 0.15, 0.79), vec4(82.8, 81, 0.15, 0.79), vec4(82.95, 72, 0.15, 0.79), vec4(83.1, 71, 0.15, 0.79), vec4(83.25, 69, 0.15, 0.79), vec4(83.4, 71, 0.15, 0.79), vec4(83.55, 74, 0.15, 0.79), vec4(83.7, 71, 0.15, 0.79), vec4(83.85, 67, 0.15, 0.79), vec4(84.0, 72, 0.15, 0.79), vec4(84.15, 69, 0.15, 0.79), vec4(84.3, 67, 0.15, 0.79), vec4(84.45, 66, 0.15, 0.79), vec4(84.6, 71, 0.15, 0.79), vec4(84.75, 67, 0.15, 0.79), vec4(84.9, 66, 0.15, 0.79), vec4(85.05, 64, 0.15, 0.79), vec4(85.2, 62, 0.15, 0.79), vec4(85.35, 60, 0.15, 0.79), vec4(85.5, 59, 0.15, 0.79), vec4(85.65, 57, 0.15, 0.79), vec4(85.8, 55, 0.6, 0.79), vec4(86.4, 78, 0.15, 0.79), vec4(86.55, 79, 0.15, 0.79), vec4(86.7, 81, 0.45, 0.79), vec4(87.15, 83, 0.15, 0.79), vec4(87.3, 81, 0.15, 0.79), vec4(87.45, 79, 0.15, 0.79), vec4(87.6, 78, 0.15, 0.79), vec4(87.75, 76, 0.15, 0.79), vec4(87.9, 74, 0.15, 0.79), vec4(88.05, 72, 0.15, 0.79), vec4(88.2, 71, 0.15, 0.79), vec4(88.35, 72, 0.15, 0.79), vec4(88.5, 74, 0.45, 0.79), vec4(88.95, 76, 0.15, 0.79), vec4(89.1, 74, 0.15, 0.79), vec4(89.25, 72, 0.15, 0.79), vec4(89.4, 71, 0.15, 0.79), vec4(89.55, 69, 0.15, 0.79), vec4(89.7, 67, 0.15, 0.79), vec4(89.85, 66, 0.15, 0.79), vec4(90.0, 64, 0.15, 0.79), vec4(90.15, 68, 0.15, 0.79), vec4(90.3, 69, 0.15, 0.79), vec4(90.45, 71, 0.15, 0.79), vec4(90.6, 69, 0.15, 0.79), vec4(90.75, 64, 0.15, 0.79), vec4(90.9, 69, 0.15, 0.79), vec4(91.05, 71, 0.15, 0.79), vec4(91.2, 72, 0.15, 0.79), vec4(91.35, 69, 0.15, 0.79), vec4(91.5, 75, 0.15, 0.79), vec4(91.65, 76, 0.15, 0.79), vec4(91.8, 78, 0.15, 0.79), vec4(91.95, 76, 0.15, 0.79), vec4(92.1, 75, 0.15, 0.79), vec4(92.25, 73, 0.15, 0.79), vec4(92.4, 71, 1.35, 0.79), vec4(93.75, 75, 0.15, 0.79), vec4(93.9, 76, 0.45, 0.79), vec4(94.35, 63, 0.15, 0.79), vec4(94.5, 64, 0.45, 0.79), vec4(94.95, 51, 0.15, 0.79), vec4(95.1, 52, 0.3, 0.79), vec4(95.55, 80, 0.15, 0.79), vec4(95.7, 81, 0.45, 0.79), vec4(96.15, 68, 0.15, 0.79), vec4(96.3, 69, 0.45, 0.79), vec4(96.75, 56, 0.15, 0.79), vec4(96.9, 57, 0.45, 0.79), vec4(97.35, 59, 0.15, 0.79), vec4(97.5, 60, 0.15, 0.79), vec4(97.65, 66, 0.15, 0.79), vec4(97.8, 59, 0.15, 0.79), vec4(97.95, 63, 0.15, 0.79), vec4(98.1, 64, 0.15, 0.79), vec4(98.25, 67, 0.15, 0.79), vec4(98.4, 66, 0.15, 0.79), vec4(98.55, 64, 0.15, 0.79), vec4(98.7, 63, 0.15, 0.79), vec4(98.85, 69, 0.15, 0.79), vec4(99.0, 67, 0.15, 0.79), vec4(99.15, 66, 0.15, 0.79), vec4(99.3, 64, 0.15, 0.79), vec4(99.45, 63, 0.15, 0.79), vec4(99.6, 64, 0.15, 0.79), vec4(99.75, 67, 0.15, 0.79), vec4(99.9, 59, 0.15, 0.79), vec4(100.05, 57, 0.15, 0.79), vec4(100.2, 55, 0.15, 0.79), vec4(100.35, 59, 0.15, 0.79), vec4(100.5, 52, 0.3, 0.79), vec4(101.1, 76, 0.3, 0.79), vec4(101.4, 72, 0.3, 0.79), vec4(101.7, 76, 0.3, 0.79), vec4(102.0, 81, 0.3, 0.79), vec4(102.3, 69, 0.3, 0.79), vec4(102.9, 74, 0.3, 0.79), vec4(103.2, 71, 0.3, 0.79), vec4(103.5, 74, 0.3, 0.79), vec4(103.8, 79, 0.3, 0.79), vec4(104.1, 67, 0.3, 0.79), vec4(104.4, 72, 0.15, 0.79), vec4(104.55, 69, 0.15, 0.79), vec4(104.7, 64, 0.15, 0.79), vec4(104.85, 60, 0.15, 0.79), vec4(105.0, 57, 0.15, 0.79), vec4(105.15, 60, 0.15, 0.79), vec4(105.3, 64, 0.15, 0.79), vec4(105.45, 69, 0.15, 0.79), vec4(105.6, 72, 0.15, 0.79), vec4(105.75, 69, 0.15, 0.79), vec4(105.9, 72, 0.15, 0.79), vec4(106.05, 76, 0.15, 0.79), vec4(106.2, 78, 0.15, 0.79), vec4(106.35, 72, 0.15, 0.79), vec4(106.5, 69, 0.15, 0.79), vec4(106.65, 66, 0.15, 0.79), vec4(106.8, 62, 0.15, 0.79), vec4(106.95, 66, 0.15, 0.79), vec4(107.1, 69, 0.15, 0.79), vec4(107.25, 72, 0.15, 0.79), vec4(107.4, 78, 0.15, 0.79), vec4(107.55, 72, 0.15, 0.79), vec4(107.7, 78, 0.15, 0.79), vec4(107.85, 81, 0.15, 0.79), vec4(108.0, 83, 0.15, 0.79), vec4(108.15, 79, 0.15, 0.79), vec4(108.3, 74, 0.15, 0.79), vec4(108.45, 71, 0.15, 0.79), vec4(108.6, 67, 0.15, 0.79), vec4(108.75, 71, 0.15, 0.79), vec4(108.9, 74, 0.15, 0.79), vec4(109.05, 79, 0.15, 0.79), vec4(109.2, 83, 0.15, 0.79), vec4(109.35, 77, 0.15, 0.79), vec4(109.5, 83, 0.15, 0.79), vec4(109.65, 86, 0.15, 0.79), vec4(109.8, 76, 0.15, 0.79), vec4(109.95, 86, 0.15, 0.79), vec4(110.1, 84, 0.15, 0.79), vec4(110.25, 76, 0.15, 0.79), vec4(110.4, 74, 0.15, 0.79), vec4(110.55, 84, 0.15, 0.79), vec4(110.7, 83, 0.15, 0.79), vec4(110.85, 74, 0.15, 0.79), vec4(111.0, 72, 0.15, 0.79), vec4(111.15, 76, 0.15, 0.79), vec4(111.3, 78, 0.15, 0.79), vec4(111.45, 79, 0.15, 0.79), vec4(111.6, 81, 0.15, 0.79), vec4(111.75, 72, 0.15, 0.79), vec4(111.9, 71, 0.15, 0.79), vec4(112.05, 69, 0.15, 0.79), vec4(112.2, 71, 0.15, 0.79), vec4(112.35, 74, 0.15, 0.79), vec4(112.5, 71, 0.15, 0.79), vec4(112.65, 67, 0.15, 0.79), vec4(112.8, 72, 0.15, 0.79), vec4(112.95, 69, 0.15, 0.79), vec4(113.1, 67, 0.15, 0.79), vec4(113.25, 66, 0.15, 0.79), vec4(113.4, 71, 0.15, 0.79), vec4(113.55, 67, 0.15, 0.79), vec4(113.7, 66, 0.15, 0.79), vec4(113.85, 64, 0.15, 0.79), vec4(114.0, 62, 0.15, 0.79), vec4(114.15, 60, 0.15, 0.79), vec4(114.3, 59, 0.15, 0.79), vec4(114.45, 57, 0.15, 0.79), vec4(114.6, 55, 1.25, 0.79));\nconst vec4 notes1[508] = vec4[508](vec4(0.0, 43, 0.3, 0.79), vec4(0.3, 59, 0.15, 0.79), vec4(0.45, 57, 0.15, 0.79), vec4(0.6, 59, 0.3, 0.79), vec4(0.9, 55, 0.3, 0.79), vec4(1.2, 43, 0.3, 0.79), vec4(1.5, 55, 0.3, 0.79), vec4(1.8, 42, 0.3, 0.79), vec4(2.1, 54, 0.15, 0.79), vec4(2.25, 52, 0.15, 0.79), vec4(2.4, 54, 0.3, 0.79), vec4(2.7, 50, 0.3, 0.79), vec4(3.0, 42, 0.3, 0.79), vec4(3.3, 50, 0.3, 0.79), vec4(3.6, 40, 0.3, 0.79), vec4(3.9, 52, 0.15, 0.79), vec4(4.05, 50, 0.15, 0.79), vec4(4.2, 52, 0.3, 0.79), vec4(4.5, 55, 0.3, 0.79), vec4(4.8, 45, 0.3, 0.79), vec4(5.1, 61, 0.3, 0.79), vec4(5.4, 50, 0.3, 0.79), vec4(5.7, 54, 0.15, 0.79), vec4(5.85, 52, 0.15, 0.79), vec4(6.0, 54, 0.3, 0.79), vec4(6.3, 50, 0.3, 0.79), vec4(6.6, 38, 0.3, 0.79), vec4(7.05, 48, 0.15, 0.79), vec4(7.2, 47, 0.15, 0.79), vec4(7.35, 45, 0.15, 0.79), vec4(7.5, 47, 0.45, 0.79), vec4(7.95, 50, 0.15, 0.79), vec4(8.1, 52, 0.15, 0.79), vec4(8.25, 54, 0.15, 0.79), vec4(8.4, 55, 0.15, 0.79), vec4(8.55, 57, 0.15, 0.79), vec4(8.7, 59, 0.15, 0.79), vec4(8.85, 55, 0.15, 0.79), vec4(9.0, 48, 0.15, 0.79), vec4(9.15, 47, 0.15, 0.79), vec4(9.3, 48, 0.45, 0.79), vec4(9.75, 52, 0.15, 0.79), vec4(9.9, 54, 0.15, 0.79), vec4(10.05, 55, 0.15, 0.79), vec4(10.2, 57, 0.15, 0.79), vec4(10.35, 59, 0.15, 0.79), vec4(10.5, 60, 0.15, 0.79), vec4(10.65, 57, 0.15, 0.79), vec4(10.8, 50, 0.15, 0.79), vec4(10.95, 49, 0.15, 0.79), vec4(11.1, 50, 0.45, 0.79), vec4(11.55, 57, 0.15, 0.79), vec4(11.7, 59, 0.15, 0.79), vec4(11.85, 60, 0.15, 0.79), vec4(12.0, 62, 0.15, 0.79), vec4(12.15, 64, 0.15, 0.79), vec4(12.3, 66, 0.15, 0.79), vec4(12.45, 62, 0.15, 0.79), vec4(12.6, 67, 0.15, 0.79), vec4(12.75, 66, 0.15, 0.79), vec4(12.9, 67, 0.15, 0.79), vec4(13.05, 62, 0.15, 0.79), vec4(13.2, 59, 0.15, 0.79), vec4(13.35, 62, 0.15, 0.79), vec4(13.5, 55, 0.15, 0.79), vec4(13.65, 59, 0.15, 0.79), vec4(13.8, 50, 0.15, 0.79), vec4(13.95, 55, 0.15, 0.79), vec4(14.1, 47, 0.15, 0.79), vec4(14.25, 50, 0.15, 0.79), vec4(14.4, 43, 0.3, 0.79), vec4(14.7, 55, 0.3, 0.79), vec4(15.0, 59, 0.3, 0.79), vec4(15.3, 55, 0.3, 0.79), vec4(15.6, 43, 0.3, 0.79), vec4(15.9, 55, 0.3, 0.79), vec4(16.2, 42, 0.3, 0.79), vec4(16.5, 54, 0.3, 0.79), vec4(16.8, 57, 0.3, 0.79), vec4(17.1, 54, 0.3, 0.79), vec4(17.4, 42, 0.3, 0.79), vec4(17.7, 54, 0.3, 0.79), vec4(18.0, 40, 0.3, 0.79), vec4(18.3, 52, 0.3, 0.79), vec4(18.6, 55, 0.3, 0.79), vec4(18.9, 52, 0.3, 0.79), vec4(19.2, 40, 0.3, 0.79), vec4(19.5, 55, 0.3, 0.79), vec4(19.8, 45, 0.3, 0.79), vec4(20.1, 52, 0.3, 0.79), vec4(20.4, 55, 0.3, 0.79), vec4(20.7, 52, 0.3, 0.79), vec4(21.0, 45, 0.3, 0.79), vec4(21.3, 55, 0.3, 0.79), vec4(21.6, 54, 0.15, 0.79), vec4(21.75, 57, 0.15, 0.79), vec4(21.9, 62, 0.15, 0.79), vec4(22.05, 66, 0.15, 0.79), vec4(22.2, 69, 0.15, 0.79), vec4(22.35, 66, 0.15, 0.79), vec4(22.5, 62, 0.15, 0.79), vec4(22.65, 57, 0.15, 0.79), vec4(22.8, 54, 0.15, 0.79), vec4(22.95, 57, 0.15, 0.79), vec4(23.1, 50, 0.15, 0.79), vec4(23.25, 54, 0.15, 0.79), vec4(23.4, 55, 0.15, 0.79), vec4(23.55, 59, 0.15, 0.79), vec4(23.7, 62, 0.15, 0.79), vec4(23.85, 67, 0.15, 0.79), vec4(24.0, 71, 0.15, 0.79), vec4(24.15, 67, 0.15, 0.79), vec4(24.3, 62, 0.15, 0.79), vec4(24.45, 59, 0.15, 0.79), vec4(24.6, 55, 0.15, 0.79), vec4(24.75, 59, 0.15, 0.79), vec4(24.9, 52, 0.15, 0.79), vec4(25.05, 55, 0.15, 0.79), vec4(25.2, 57, 0.3, 0.79), vec4(25.5, 61, 0.3, 0.79), vec4(25.8, 62, 0.15, 0.79), vec4(25.95, 57, 0.15, 0.79), vec4(26.1, 54, 0.15, 0.79), vec4(26.25, 50, 0.15, 0.79), vec4(26.4, 57, 0.3, 0.79), vec4(26.7, 45, 0.3, 0.79), vec4(27.0, 38, 0.15, 0.79), vec4(27.15, 50, 0.15, 0.79), vec4(27.3, 52, 0.15, 0.79), vec4(27.45, 54, 0.15, 0.79), vec4(27.6, 55, 0.15, 0.79), vec4(27.75, 57, 0.15, 0.79), vec4(27.9, 59, 0.15, 0.79), vec4(28.05, 61, 0.15, 0.79), vec4(28.2, 62, 0.6, 0.79), vec4(28.8, 43, 0.3, 0.79), vec4(29.1, 59, 0.15, 0.79), vec4(29.25, 57, 0.15, 0.79), vec4(29.4, 59, 0.3, 0.79), vec4(29.7, 55, 0.3, 0.79), vec4(30.0, 43, 0.3, 0.79), vec4(30.3, 55, 0.3, 0.79), vec4(30.6, 42, 0.3, 0.79), vec4(30.9, 54, 0.15, 0.79), vec4(31.05, 52, 0.15, 0.79), vec4(31.2, 54, 0.3, 0.79), vec4(31.5, 50, 0.3, 0.79), vec4(31.8, 42, 0.3, 0.79), vec4(32.1, 50, 0.3, 0.79), vec4(32.4, 40, 0.3, 0.79), vec4(32.7, 52, 0.15, 0.79), vec4(32.85, 50, 0.15, 0.79), vec4(33.0, 52, 0.3, 0.79), vec4(33.3, 55, 0.3, 0.79), vec4(33.6, 45, 0.3, 0.79), vec4(33.9, 61, 0.3, 0.79), vec4(34.2, 50, 0.3, 0.79), vec4(34.5, 54, 0.15, 0.79), vec4(34.65, 52, 0.15, 0.79), vec4(34.8, 54, 0.3, 0.79), vec4(35.1, 50, 0.3, 0.79), vec4(35.4, 38, 0.3, 0.79), vec4(35.85, 48, 0.15, 0.79), vec4(36.0, 47, 0.15, 0.79), vec4(36.15, 45, 0.15, 0.79), vec4(36.3, 47, 0.45, 0.79), vec4(36.75, 50, 0.15, 0.79), vec4(36.9, 52, 0.15, 0.79), vec4(37.05, 54, 0.15, 0.79), vec4(37.2, 55, 0.15, 0.79), vec4(37.35, 57, 0.15, 0.79), vec4(37.5, 59, 0.15, 0.79), vec4(37.65, 55, 0.15, 0.79), vec4(37.8, 48, 0.15, 0.79), vec4(37.95, 47, 0.15, 0.79), vec4(38.1, 48, 0.45, 0.79), vec4(38.55, 52, 0.15, 0.79), vec4(38.7, 54, 0.15, 0.79), vec4(38.85, 55, 0.15, 0.79), vec4(39.0, 57, 0.15, 0.79), vec4(39.15, 59, 0.15, 0.79), vec4(39.3, 60, 0.15, 0.79), vec4(39.45, 57, 0.15, 0.79), vec4(39.6, 50, 0.15, 0.79), vec4(39.75, 49, 0.15, 0.79), vec4(39.9, 50, 0.45, 0.79), vec4(40.35, 57, 0.15, 0.79), vec4(40.5, 59, 0.15, 0.79), vec4(40.65, 60, 0.15, 0.79), vec4(40.8, 62, 0.15, 0.79), vec4(40.95, 64, 0.15, 0.79), vec4(41.1, 66, 0.15, 0.79), vec4(41.25, 62, 0.15, 0.79), vec4(41.4, 67, 0.15, 0.79), vec4(41.55, 66, 0.15, 0.79), vec4(41.7, 67, 0.15, 0.79), vec4(41.85, 62, 0.15, 0.79), vec4(42.0, 59, 0.15, 0.79), vec4(42.15, 62, 0.15, 0.79), vec4(42.3, 55, 0.15, 0.79), vec4(42.45, 59, 0.15, 0.79), vec4(42.6, 50, 0.15, 0.79), vec4(42.75, 55, 0.15, 0.79), vec4(42.9, 47, 0.15, 0.79), vec4(43.05, 50, 0.15, 0.79), vec4(43.2, 43, 0.3, 0.79), vec4(43.5, 55, 0.3, 0.79), vec4(43.8, 59, 0.3, 0.79), vec4(44.1, 55, 0.3, 0.79), vec4(44.4, 43, 0.3, 0.79), vec4(44.7, 55, 0.3, 0.79), vec4(45.0, 42, 0.3, 0.79), vec4(45.3, 54, 0.3, 0.79), vec4(45.6, 57, 0.3, 0.79), vec4(45.9, 54, 0.3, 0.79), vec4(46.2, 42, 0.3, 0.79), vec4(46.5, 54, 0.3, 0.79), vec4(46.8, 40, 0.3, 0.79), vec4(47.1, 52, 0.3, 0.79), vec4(47.4, 55, 0.3, 0.79), vec4(47.7, 52, 0.3, 0.79), vec4(48.0, 40, 0.3, 0.79), vec4(48.3, 55, 0.3, 0.79), vec4(48.6, 45, 0.3, 0.79), vec4(48.9, 52, 0.3, 0.79), vec4(49.2, 55, 0.3, 0.79), vec4(49.5, 52, 0.3, 0.79), vec4(49.8, 45, 0.3, 0.79), vec4(50.1, 55, 0.3, 0.79), vec4(50.4, 54, 0.15, 0.79), vec4(50.55, 57, 0.15, 0.79), vec4(50.7, 62, 0.15, 0.79), vec4(50.85, 66, 0.15, 0.79), vec4(51.0, 69, 0.15, 0.79), vec4(51.15, 66, 0.15, 0.79), vec4(51.3, 62, 0.15, 0.79), vec4(51.45, 57, 0.15, 0.79), vec4(51.6, 54, 0.15, 0.79), vec4(51.75, 57, 0.15, 0.79), vec4(51.9, 50, 0.15, 0.79), vec4(52.05, 54, 0.15, 0.79), vec4(52.2, 55, 0.15, 0.79), vec4(52.35, 59, 0.15, 0.79), vec4(52.5, 62, 0.15, 0.79), vec4(52.65, 67, 0.15, 0.79), vec4(52.8, 71, 0.15, 0.79), vec4(52.95, 67, 0.15, 0.79), vec4(53.1, 62, 0.15, 0.79), vec4(53.25, 59, 0.15, 0.79), vec4(53.4, 55, 0.15, 0.79), vec4(53.55, 59, 0.15, 0.79), vec4(53.7, 52, 0.15, 0.79), vec4(53.85, 55, 0.15, 0.79), vec4(54.0, 57, 0.3, 0.79), vec4(54.3, 61, 0.3, 0.79), vec4(54.6, 62, 0.15, 0.79), vec4(54.75, 57, 0.15, 0.79), vec4(54.9, 54, 0.15, 0.79), vec4(55.05, 50, 0.15, 0.79), vec4(55.2, 57, 0.3, 0.79), vec4(55.5, 45, 0.3, 0.79), vec4(55.8, 38, 0.15, 0.79), vec4(55.95, 50, 0.15, 0.79), vec4(56.1, 52, 0.15, 0.79), vec4(56.25, 54, 0.15, 0.79), vec4(56.4, 55, 0.15, 0.79), vec4(56.55, 57, 0.15, 0.79), vec4(56.7, 59, 0.15, 0.79), vec4(56.85, 61, 0.15, 0.79), vec4(57.0, 62, 0.6, 0.79), vec4(57.6, 38, 0.3, 0.79), vec4(57.9, 54, 0.15, 0.79), vec4(58.05, 52, 0.15, 0.79), vec4(58.2, 54, 0.3, 0.79), vec4(58.5, 50, 0.3, 0.79), vec4(58.8, 38, 0.3, 0.79), vec4(59.1, 54, 0.3, 0.79), vec4(59.4, 43, 0.3, 0.79), vec4(59.7, 59, 0.15, 0.79), vec4(59.85, 57, 0.15, 0.79), vec4(60.0, 59, 0.3, 0.79), vec4(60.3, 55, 0.3, 0.79), vec4(60.6, 43, 0.3, 0.79), vec4(60.9, 59, 0.3, 0.79), vec4(61.2, 48, 0.3, 0.79), vec4(61.5, 60, 0.15, 0.79), vec4(61.65, 59, 0.15, 0.79), vec4(61.8, 60, 0.3, 0.79), vec4(62.1, 54, 0.3, 0.79), vec4(62.4, 57, 0.3, 0.79), vec4(62.7, 60, 0.3, 0.79), vec4(63.0, 57, 0.3, 0.79), vec4(63.3, 54, 0.3, 0.79), vec4(63.6, 51, 0.15, 0.79), vec4(63.75, 47, 0.15, 0.79), vec4(63.9, 51, 0.15, 0.79), vec4(64.05, 54, 0.15, 0.79), vec4(64.2, 59, 0.15, 0.79), vec4(64.35, 63, 0.15, 0.79), vec4(64.5, 66, 0.15, 0.79), vec4(64.65, 69, 0.15, 0.79), vec4(64.8, 67, 0.45, 0.79), vec4(65.25, 66, 0.15, 0.79), vec4(65.4, 67, 0.45, 0.79), vec4(65.85, 54, 0.15, 0.79), vec4(66.0, 55, 0.45, 0.79), vec4(66.45, 47, 0.15, 0.79), vec4(66.6, 48, 0.45, 0.79), vec4(67.05, 71, 0.15, 0.79), vec4(67.2, 72, 0.45, 0.79), vec4(67.65, 59, 0.15, 0.79), vec4(67.8, 60, 0.45, 0.79), vec4(68.25, 52, 0.15, 0.79), vec4(68.4, 51, 0.3, 0.79), vec4(68.7, 57, 0.3, 0.79), vec4(69.0, 55, 0.3, 0.79), vec4(69.3, 46, 0.3, 0.79), vec4(69.6, 47, 0.3, 0.79), vec4(69.9, 54, 0.3, 0.79), vec4(70.2, 52, 0.3, 0.79), vec4(70.5, 55, 0.15, 0.79), vec4(70.65, 54, 0.15, 0.79), vec4(70.8, 55, 0.3, 0.79), vec4(71.1, 52, 0.3, 0.79), vec4(71.4, 40, 0.3, 0.79), vec4(71.85, 50, 0.15, 0.79), vec4(72.0, 48, 0.15, 0.79), vec4(72.15, 52, 0.15, 0.79), vec4(72.3, 57, 0.15, 0.79), vec4(72.45, 60, 0.15, 0.79), vec4(72.6, 64, 0.15, 0.79), vec4(72.75, 60, 0.15, 0.79), vec4(72.9, 57, 0.15, 0.79), vec4(73.05, 52, 0.15, 0.79), vec4(73.2, 48, 0.15, 0.79), vec4(73.35, 52, 0.15, 0.79), vec4(73.5, 50, 0.15, 0.79), vec4(73.65, 48, 0.15, 0.79), vec4(73.8, 47, 0.15, 0.79), vec4(73.95, 50, 0.15, 0.79), vec4(74.1, 55, 0.15, 0.79), vec4(74.25, 59, 0.15, 0.79), vec4(74.4, 62, 0.15, 0.79), vec4(74.55, 59, 0.15, 0.79), vec4(74.7, 55, 0.15, 0.79), vec4(74.85, 50, 0.15, 0.79), vec4(75.0, 47, 0.15, 0.79), vec4(75.15, 50, 0.15, 0.79), vec4(75.3, 48, 0.15, 0.79), vec4(75.45, 47, 0.15, 0.79), vec4(75.6, 45, 0.3, 0.79), vec4(75.9, 48, 0.3, 0.79), vec4(76.2, 52, 0.3, 0.79), vec4(76.5, 55, 0.3, 0.79), vec4(76.8, 54, 0.3, 0.79), vec4(77.1, 52, 0.3, 0.79), vec4(77.4, 50, 0.3, 0.79), vec4(77.7, 54, 0.3, 0.79), vec4(78.0, 57, 0.3, 0.79), vec4(78.3, 60, 0.3, 0.79), vec4(78.6, 59, 0.3, 0.79), vec4(78.9, 57, 0.3, 0.79), vec4(79.2, 55, 0.3, 0.79), vec4(79.5, 59, 0.3, 0.79), vec4(79.8, 62, 0.3, 0.79), vec4(80.1, 65, 0.3, 0.79), vec4(80.4, 64, 0.3, 0.79), vec4(80.7, 62, 0.3, 0.79), vec4(81.0, 60, 0.3, 0.79), vec4(81.3, 64, 0.3, 0.79), vec4(81.6, 66, 0.3, 0.79), vec4(81.9, 68, 0.3, 0.79), vec4(82.2, 69, 0.3, 0.79), vec4(82.5, 67, 0.3, 0.79), vec4(82.8, 66, 0.3, 0.79), vec4(83.1, 62, 0.3, 0.79), vec4(83.4, 67, 0.3, 0.79), vec4(83.7, 55, 0.3, 0.79), vec4(84.0, 62, 0.3, 0.79), vec4(84.3, 50, 0.3, 0.79), vec4(84.6, 55, 0.15, 0.79), vec4(84.75, 43, 0.15, 0.79), vec4(84.9, 45, 0.15, 0.79), vec4(85.05, 47, 0.15, 0.79), vec4(85.2, 48, 0.15, 0.79), vec4(85.35, 50, 0.15, 0.79), vec4(85.5, 52, 0.15, 0.79), vec4(85.65, 54, 0.15, 0.79), vec4(85.8, 55, 0.6, 0.79), vec4(86.4, 38, 0.3, 0.79), vec4(86.7, 54, 0.15, 0.79), vec4(86.85, 52, 0.15, 0.79), vec4(87.0, 54, 0.3, 0.79), vec4(87.3, 50, 0.3, 0.79), vec4(87.6, 38, 0.3, 0.79), vec4(87.9, 54, 0.3, 0.79), vec4(88.2, 43, 0.3, 0.79), vec4(88.5, 59, 0.15, 0.79), vec4(88.65, 57, 0.15, 0.79), vec4(88.8, 59, 0.3, 0.79), vec4(89.1, 55, 0.3, 0.79), vec4(89.4, 43, 0.3, 0.79), vec4(89.7, 59, 0.3, 0.79), vec4(90.0, 48, 0.3, 0.79), vec4(90.3, 60, 0.15, 0.79), vec4(90.45, 59, 0.15, 0.79), vec4(90.6, 60, 0.3, 0.79), vec4(90.9, 54, 0.3, 0.79), vec4(91.2, 57, 0.3, 0.79), vec4(91.5, 60, 0.3, 0.79), vec4(91.8, 57, 0.3, 0.79), vec4(92.1, 54, 0.3, 0.79), vec4(92.4, 51, 0.15, 0.79), vec4(92.55, 47, 0.15, 0.79), vec4(92.7, 51, 0.15, 0.79), vec4(92.85, 54, 0.15, 0.79), vec4(93.0, 59, 0.15, 0.79), vec4(93.15, 63, 0.15, 0.79), vec4(93.3, 66, 0.15, 0.79), vec4(93.45, 69, 0.15, 0.79), vec4(93.6, 67, 0.45, 0.79), vec4(94.05, 66, 0.15, 0.79), vec4(94.2, 67, 0.45, 0.79), vec4(94.65, 54, 0.15, 0.79), vec4(94.8, 55, 0.45, 0.79), vec4(95.25, 47, 0.15, 0.79), vec4(95.4, 48, 0.45, 0.79), vec4(95.85, 71, 0.15, 0.79), vec4(96.0, 72, 0.45, 0.79), vec4(96.45, 59, 0.15, 0.79), vec4(96.6, 60, 0.45, 0.79), vec4(97.05, 52, 0.15, 0.79), vec4(97.2, 51, 0.3, 0.79), vec4(97.5, 57, 0.3, 0.79), vec4(97.8, 55, 0.3, 0.79), vec4(98.1, 46, 0.3, 0.79), vec4(98.4, 47, 0.3, 0.79), vec4(98.7, 54, 0.3, 0.79), vec4(99.0, 52, 0.3, 0.79), vec4(99.3, 55, 0.15, 0.79), vec4(99.45, 54, 0.15, 0.79), vec4(99.6, 55, 0.3, 0.79), vec4(99.9, 52, 0.3, 0.79), vec4(100.2, 40, 0.3, 0.79), vec4(100.65, 50, 0.15, 0.79), vec4(100.8, 48, 0.15, 0.79), vec4(100.95, 52, 0.15, 0.79), vec4(101.1, 57, 0.15, 0.79), vec4(101.25, 60, 0.15, 0.79), vec4(101.4, 64, 0.15, 0.79), vec4(101.55, 60, 0.15, 0.79), vec4(101.7, 57, 0.15, 0.79), vec4(101.85, 52, 0.15, 0.79), vec4(102.0, 48, 0.15, 0.79), vec4(102.15, 52, 0.15, 0.79), vec4(102.3, 50, 0.15, 0.79), vec4(102.45, 48, 0.15, 0.79), vec4(102.6, 47, 0.15, 0.79), vec4(102.75, 50, 0.15, 0.79), vec4(102.9, 55, 0.15, 0.79), vec4(103.05, 59, 0.15, 0.79), vec4(103.2, 62, 0.15, 0.79), vec4(103.35, 59, 0.15, 0.79), vec4(103.5, 55, 0.15, 0.79), vec4(103.65, 50, 0.15, 0.79), vec4(103.8, 47, 0.15, 0.79), vec4(103.95, 50, 0.15, 0.79), vec4(104.1, 48, 0.15, 0.79), vec4(104.25, 47, 0.15, 0.79), vec4(104.4, 45, 0.3, 0.79), vec4(104.7, 48, 0.3, 0.79), vec4(105.0, 52, 0.3, 0.79), vec4(105.3, 55, 0.3, 0.79), vec4(105.6, 54, 0.3, 0.79), vec4(105.9, 52, 0.3, 0.79), vec4(106.2, 50, 0.3, 0.79), vec4(106.5, 54, 0.3, 0.79), vec4(106.8, 57, 0.3, 0.79), vec4(107.1, 60, 0.3, 0.79), vec4(107.4, 59, 0.3, 0.79), vec4(107.7, 57, 0.3, 0.79), vec4(108.0, 55, 0.3, 0.79), vec4(108.3, 59, 0.3, 0.79), vec4(108.6, 62, 0.3, 0.79), vec4(108.9, 65, 0.3, 0.79), vec4(109.2, 64, 0.3, 0.79), vec4(109.5, 62, 0.3, 0.79), vec4(109.8, 60, 0.3, 0.79), vec4(110.1, 64, 0.3, 0.79), vec4(110.4, 66, 0.3, 0.79), vec4(110.7, 68, 0.3, 0.79), vec4(111.0, 69, 0.3, 0.79), vec4(111.3, 67, 0.3, 0.79), vec4(111.6, 66, 0.3, 0.79), vec4(111.9, 62, 0.3, 0.79), vec4(112.2, 67, 0.3, 0.79), vec4(112.5, 55, 0.3, 0.79), vec4(112.8, 62, 0.3, 0.79), vec4(113.1, 50, 0.3, 0.79), vec4(113.4, 55, 0.15, 0.79), vec4(113.55, 43, 0.15, 0.79), vec4(113.7, 45, 0.15, 0.79), vec4(113.85, 47, 0.15, 0.79), vec4(114.0, 48, 0.15, 0.79), vec4(114.15, 50, 0.15, 0.79), vec4(114.3, 52, 0.15, 0.79), vec4(114.45, 54, 0.15, 0.79), vec4(114.6, 55, 1.25, 0.79));\nconst int sizes[10] = int[10](596,508,1,1,1,1,1,1,1,1);\n\nvec4 getNoteData(int channel, int n) {\n    switch(channel) {\n        case 0: return notes0[n];\n        case 1: return notes1[n];\n    }\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvec4 getNoteBox(vec4 note, float t) {\n    t -= INTRO;\n    float m = 60. / BPM;\n    note.xz *= m;\n    float interval = .5 / 88.; \n    return vec4(note.x + note.z / 2. - t,                        \n               (note.y - CENTER) * interval * 2. - interval / 2.,\n                note.z / 2.,\n                interval * 2.);\n}\n\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\n\nfloat sdStar5(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\n\nfloat sdNote(in vec2 p, in vec2 wh) {\n    return sdBox(p, wh);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat noteToFrequency(float n) {\n    return 440. * exp2((n-60.)/12.);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define pi 3.14159\n\n\n// Various temperaments, expressed as the number of cents from which they differ\n// from the equal temperament.\n// https://en.wikipedia.org/wiki/Musical_temperament\n\n// 12-tone equal temperament\nconst float[] adjustment = float[12](0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.);\n\n// Five-limit tuning: unpleasant intervals appear when modulating\n//const float[] adjustment = float[12](0., 12., 4., 16., -14., -2., -10., 2., 14., -16., 18., -12.);\n\n// 1/4 comma meantone\n//const float[] adjustment = float[12](0., 16., -6., 10., -13., 3., -19., -3., 13., -10., 6., -16.);\n\nfloat pitch(float i)\n{\n    // Chromatic scale degree within the B minor scale.\n    // Goes from 0 (note B) to 11 (note A#).\n    int degree = int(mod(i - 6., 12.));\n    // Baroque tuning (middle A = 415hz vs 440hz)\n    // Adjust each degree with the number of cents prescribed.\n    return 440. * pow(2., (i - 69. + 0.01*adjustment[degree]) / 12.);\n}\n\nvec2 wave(vec2 f, vec2 a, float time)\n{\n    vec2 w = 2.*pi*fract(f * time);\n    //float v = pow(abs(sin(w / 2.)), 8.) - .5;\n    //float v = pow(max(0., (sin(w) + 1.) / 2.), 2.) - .5;\n    vec2 sw = sin(w/2.);\n    vec2 sw2 = sw*sw;\n    vec2 v = sw2*sw2 - .375; // Remove DC offset\n    //vec2 v = sw2*sw2*sw2 - .3125; // Remove DC offset\n    a *= sqrt(clamp(800./f, 1., 10.));\n    return a * v;\n}\n\nvec2 organ(vec2 f, float time)\n{\n    vec2 sound = vec2(0);\n    sound += wave(f, vec2(.08), time);\n    sound += wave(f * 2., vec2(0.8,1)*.01, time);\n    sound += wave(f * 4., vec2(.004), time);\n    sound += wave(f * .5, vec2(1,0.5)*.008, time);\n    return sound;\n}\n\n\nvec2 mainSound(int samp, float time)\n{\n    vec2 sound = vec2(0);\n\n    float t = time - INTRO;\n    t *= BPM / 60.;\n    for(int channel = 0; channel < CHANNELS; channel++)\n        for (int i=min(0, int(iSampleRate)) ; i<sizes[channel]; ++i)\n        {\n            vec4 note = getNoteData(channel, i);\n            note.y;\n            if (note.w == -1.)\n                continue;\n            if (note.x < t && t < note.x + note.z  + 5.)\n            {\n                float f = pitch(note.y);\n                // Add random pitch variation per note,\n                // so that if several notes with the same pitch are\n                // played at the same time, they are still\n                // decorrelated.\n                // Otherwise the combined tone sounds too loud\n                // (amplitude proportional to n, instead of sqrt(n)).\n                f += 0.3*sin(float(i));\n\n                float pos = sin(note.w);\n                vec2 pan = sqrt(vec2(1) + 0.5*vec2(1,-1)*pos);\n\n\n                float t_in = t - note.x; // Time since attack\n                float t_out = t_in - note.z; // Time since release\n                float env = smoothstep(0., .05, t_in) * smoothstep(.05,0.,t_out);\n                sound += pan*env*organ(vec2(f), time);\n                float rtime = 0.1 + smoothstep(100.,400.,f);\n                float rtau = 99./rtime; // Reverb decay time: lower for bass notes\n                float env_verb = clamp(1.-exp(-t_in*rtau),0.,1.)*clamp(exp(-t_out*rtau),0.,1.);\n                sound += 0.5 * rtime * env_verb * organ(f+vec2(-.2,.32), time);\n\n            }\n        }\n\n    return sound;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}