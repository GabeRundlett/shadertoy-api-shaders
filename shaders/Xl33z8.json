{
    "Shader": {
        "info": {
            "date": "1467814271",
            "description": "This Is Easy.\n\nUpgraded To Slime (not hexagonal)",
            "flags": 0,
            "hasliked": 0,
            "id": "Xl33z8",
            "likes": 5,
            "name": "cubesine v.0.1.7",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "cube",
                "reference"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 783
        },
        "renderpass": [
            {
                "code": "#define EPS 64\n//fogDensityX / fogDensX : Fog Density, The More The Mass, The More Darkness Will Spead On The Shader.\nfloat fogDens = 2.;\n \n//float fogDens = clamp(fogDensX, 1.0, 2.0);\nfloat map(vec3 p, float i)\n{\n    fogDens += sin(iTime/5.)/20.;\n    \n    vec3 q = sin(p) * cos(p) * 2.0 - 1.0;\n    return length(q)-0.5;\n}\nvec3 spos( vec3 ro, vec3 rd, float t )\n{\n    \n    return ro+t*rd/tan(sin(fogDens));\n    \n}\nfloat trace(vec3 o,vec3 r)\n{\n    \n    float t = 0.0;\n    \n    for(int i = 0; i < 24; i++)\n    {\n        \n        vec3 p = spos(o, r, t);\n        float d = map(p, t);\n        t += d * 0.5;\n        \n    }\n    \n    return t;\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv = uv * 2.0 - 1.0;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0));\n    r.xz *= mat2(cos(iTime),-sin(iTime),sin(iTime),cos(iTime));\n    \n    vec3 o = vec3((2.+sin(iTime)/2.)*abs(sin(iTime/11.))*10.,\n                  iTime*1.205+(sin(iTime/13.)/10.), iTime);\n    \n    float t = trace(o, r);\n    \n    \n    //vec3 h: This Vector Is Used For Custom Colors.\n    //Component 1: Render Background.\n    //Component 2: Render Sphere Color (Blends Background)\n    //Component 3: Render Sky Color ( Blends Background And Sphere );\n    vec3 h = vec3(0.9,0.5,0.1);\n    float fogx = fogDens / (1.0 + t * float(h) * 1.0);\n    \n    vec3 fog = mix(vec3(fogx),h,2.0);\n    \n    vec3 fc = vec3(fog);\n    \n\tfragColor = vec4(fc,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}