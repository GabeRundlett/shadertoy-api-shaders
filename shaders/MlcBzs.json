{
    "Shader": {
        "info": {
            "date": "1540639685",
            "description": "this is actually a fractal, but it isn't really obvious.\nupdate: ok now its obvious lol",
            "flags": 32,
            "hasliked": 0,
            "id": "MlcBzs",
            "likes": 6,
            "name": "Pixel Fractal Noise",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 634
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    //uv = -1.0+2.0*uv;\n    //uv.x *= iResolution.x/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    fragColor -= max(dot(uv*2.0-1.0,uv*2.0-1.0)-0.9,0.)/2.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float scaleValue( vec2 uv, float scaleOffset ) {\n    float scale = 0.;\n    //float prog = iter == maxiter ? 0. : scaleValue(iter+1., maxiter, p*2.);\n    for(int i = 0; i < 4; i++) {\n        float power = pow(2., float(i));\n        vec2 p = uv * power + vec2(floor(3.*float(i)/13.)/4.);\n        p.x = (mod(p.x,0.) == 0. && p.x != 0.) ? 1. : mod(p.x, 1.);\n        p.y = (mod(p.y,0.) == 0. && p.y != 0.) ? 1. : mod(p.y, 1.);\n    \tif(p.x <= 0.5 && p.y <= 0.5) scale += 0.25 + scaleOffset;\n    \telse if(p.x > 0.5 && p.y <= 0.5) scale += 0.50 + scaleOffset;\n    \telse if(p.x > 0.5 && p.y > 0.5) scale += 0.75 + scaleOffset;\n    \telse if(p.x <= 0.5 && p.y > 0.5) scale += 1. + scaleOffset;\n        scale += float(i);\n        scale += floor(float(i)/7.);\n    \t//scale = mod(prog + scale, 1.);\n    }\n    scale = mod(scale, 1.);\n    if(scale == 0.) scale = 1.;\n    return scale;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord / iResolution.xy;\n    p = p*2.0-1.0;\n    p.x *= iResolution.x/iResolution.y;\n    p /= 1.618033;\n    //vfx\n    vec2 fc = vec2(cos(iTime*2.)/100., sin(iTime*2.)/100.);\n    p -= fc*2.;\n    vec3 col = vec3(0.,0.,0.);\n    //col = vec3(scaleValue(p, iTime/16.));\n    col.r = scaleValue(p+fc.xy,iTime/4.);\n    col.g = scaleValue(p,iTime/4.);\n    col.b = scaleValue(p+fc.yx,iTime/4.);\n    fragColor = vec4(col,0.);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}