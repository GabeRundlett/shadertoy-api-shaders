{
    "Shader": {
        "info": {
            "date": "1620651082",
            "description": "super goku -v3",
            "flags": 0,
            "hasliked": 0,
            "id": "fdBXz3",
            "likes": 5,
            "name": "super goku -v3",
            "published": 3,
            "tags": [
                "2d",
                "draw",
                "anime",
                "poly",
                "supergokuv3"
            ],
            "usePreview": 1,
            "username": "jorge2017a1",
            "viewed": 420
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1 ----jorgeFloresP---10/may/2021\n// referencia \n////-------------------\n/// IQ funciones....librerias\n//https://www.shadertoy.com/view/tlGBW3\n//Created by manu210404 in 2021-03-13\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(antialiasing(0.75),b,d)\n\n//----------oPeraciones de Repeticion\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n    \nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r; }\n\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\nvec3 ponerBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj),0.0));\n  return colOut;\n}\n\nfloat opU(float d1, float d2) {return min(d1, d2); }\nconst vec3 colNegro=vec3(0.0);\nconst vec3 colGris=vec3(0.49,0.49,0.49);\nconst vec3 colGris2=vec3(0.6);\nconst vec3 colBlanco=vec3(1.0);\nconst vec3 colRojo=vec3(1.0,0.0,0.0);\nconst vec3 colAzul=vec3(0.0,0.0,1.0);\nconst vec3 colVerde=vec3(0.0,1.0,0.0);\nconst vec3 colVerde2=vec3(0.1,0.8,0.1);\nconst vec3 colrojoObs=vec3(0.45,0.13,0.15); //rojo obscuro\n\n\nconst vec3 colDorado=vec3(0.925,0.67,0.0);\n\n#define POLY(N) (in vec2 p, in vec2[N] v) {const int n=v.length();float d=dot(p-v[0],p-v[0]);float s=1.;for(int i=0,j=n-1;i<n;j=i,i++){vec2 e=v[j]-v[i];vec2 w=p-v[i];vec2 b=w-e*clamp(dot(w,e)/dot(e,e),0.,1.);d=min(d,dot(b,b));bvec3 cond=bvec3(p.y>=v[i].y,p.y<v[j].y,e.x*w.y>e.y*w.x);if(all(cond)||all(not(cond))) s=-s;}return s*sqrt(d);}\n\n\nfloat sdPoly26 POLY(26)\nvec2 pt26[ 26]=vec2[](  \nvec2(.48,1.00),vec2(.73,1.00),vec2(.70,.83),vec2(.73,.86),vec2(.74,.87),\nvec2(.75,.87),vec2(.78,.84),vec2(.78,.79),vec2(.78,.74),vec2(.76,.68),\nvec2(.74,.66),vec2(.71,.65),vec2(.71,.57),vec2(.71,.54),vec2(.68,.50),\nvec2(.62,.44),vec2(.58,.41),vec2(.55,.41),vec2(.52,.46),vec2(.49,.52),\nvec2(.48,.53),vec2(.45,.71),vec2(.45,.73),vec2(.45,.78),vec2(.46,.83),\nvec2(.48,1.00) );\n\n\nfloat sdPoly8 POLY(8)\nvec2 pt8[ 8]=vec2[](  \nvec2(.50,.58),vec2(.55,.62),vec2(.56,.60),vec2(.52,.57),vec2(.53,.57),\nvec2(.53,.56),vec2(.51,.56),vec2(.50,.58) );\n\nfloat sdPoly15 POLY(15)\nvec2 pt15[ 15]=vec2[](  \nvec2(.50,.58),vec2(.55,.62),vec2(.56,.60),vec2(.52,.57),vec2(.53,.57),\nvec2(.53,.56),vec2(.51,.56),vec2(.50,.58),vec2(.55,.63),vec2(.57,.54),\nvec2(.57,.52),vec2(.57,.51),vec2(.54,.49),vec2(.53,.50),vec2(.50,.58) );\n\nfloat sdPoly8b POLY(8)\nvec2 pt8b[ 8]=vec2[](  \nvec2(.53,.50),vec2(.53,.52),vec2(.54,.54),vec2(.55,.55),vec2(.56,.55),\nvec2(.57,.52),vec2(.54,.50),vec2(.53,.50) );\n\nfloat sdPoly6 POLY(6)\nvec2 pt6[ 6]=vec2[](  \nvec2(.49,.68),vec2(.47,.62),vec2(.47,.61),vec2(.49,.59),vec2(.50,.63),\nvec2(.49,.68) );\n\nfloat sdPoly4 POLY(4)\nvec2 pt4[ 4]=vec2[](  \nvec2(.47,.61),vec2(.50,.63),vec2(.50,.60),vec2(.47,.61) );\n\nfloat sdPoly3 POLY(3)\nvec2 pt3[ 3]=vec2[](  \nvec2(.53,.69),vec2(.61,.73),vec2(.53,.69) );\n\nfloat sdPoly5 POLY(5)\nvec2 pt5[ 5]=vec2[](  \nvec2(.55,.69),vec2(.61,.72),vec2(.59,.70),vec2(.62,.71),vec2(.55,.69) );\n\nfloat sdPoly12 POLY(12)\nvec2 pt12[ 12]=vec2[](  \nvec2(.50,.76),vec2(.54,.85),vec2(.56,.90),vec2(.57,.91),vec2(.59,.91),\nvec2(.60,.91),vec2(.60,.88),vec2(.57,.86),vec2(.54,.84),vec2(.53,.81),\nvec2(.51,.78),vec2(.50,.76) );\n\nfloat sdPoly8c POLY(8)\nvec2 pt8c[ 8]=vec2[](  \nvec2(.45,.77),vec2(.46,.78),vec2(.47,.77),vec2(.48,.73),vec2(.48,.73),\nvec2(.46,.75),vec2(.45,.74),vec2(.45,.77) );\n\nfloat sdPoly23 POLY(23)\nvec2 pt23[ 23]=vec2[](  \nvec2(.46,.64),vec2(.40,.65),vec2(.35,.64),vec2(.31,.63),vec2(.38,.76),\nvec2(.26,.79),vec2(.16,.82),vec2(.30,1.00),vec2(.80,1.00),vec2(.80,.98),\nvec2(.92,1.00),vec2(.86,.91),vec2(.99,.90),vec2(.99,.84),vec2(.92,.76),\nvec2(1.00,.74),vec2(.99,.71),vec2(.88,.64),vec2(.93,.62),vec2(.81,.59),\nvec2(.80,.61),vec2(.73,.65),vec2(.46,.64) );\n\nfloat sdPoly35 POLY(35)\nvec2 pt35[ 35]=vec2[](  \nvec2(.58,.41),vec2(.62,.44),vec2(.67,.48),vec2(.70,.53),vec2(.71,.65),\nvec2(.80,.61),vec2(.83,.48),vec2(.92,.40),vec2(.95,.41),vec2(1.00,.38),\nvec2(1.00,.01),vec2(.00,.01),vec2(.00,.21),vec2(.05,.21),vec2(.08,.19),\nvec2(.13,.22),vec2(.18,.22),vec2(.23,.21),vec2(.26,.23),vec2(.26,.26),\nvec2(.30,.28),vec2(.32,.30),vec2(.36,.30),vec2(.37,.31),vec2(.42,.30),\nvec2(.45,.29),vec2(.45,.29),vec2(.46,.31),vec2(.49,.29),vec2(.53,.31),\nvec2(.54,.30),vec2(.55,.31),vec2(.59,.34),vec2(.59,.36),vec2(.58,.41) );\n\n\nfloat sdPoly14 POLY(14)\nvec2 pt14[ 14]=vec2[](  \nvec2(.36,.30),vec2(.35,.19),vec2(.35,.02),vec2(.45,.02),vec2(.45,.06),\nvec2(.47,.14),vec2(.50,.25),vec2(.54,.31),vec2(.51,.30),vec2(.49,.29),\nvec2(.46,.31),vec2(.45,.29),vec2(.42,.31),vec2(.36,.30) );\n\nfloat sdPoly18 POLY(18)\nvec2 pt18[ 18]=vec2[](  \nvec2(.25,.23),vec2(.26,.26),vec2(.27,.27),vec2(.29,.28),vec2(.29,.27),\nvec2(.31,.29),vec2(.33,.30),vec2(.34,.30),vec2(.36,.29),vec2(.37,.30),\nvec2(.36,.24),vec2(.35,.14),vec2(.35,.01),vec2(.33,.01),vec2(.32,.09),\nvec2(.30,.16),vec2(.27,.23),vec2(.25,.23) );\n\n\nfloat sdPoly10 POLY(10)\nvec2 pt10[ 10]=vec2[](  \nvec2(.95,.41),vec2(1.00,.39),vec2(1.00,.22),vec2(.94,.01),vec2(.71,.00),\nvec2(.79,.19),vec2(.83,.28),vec2(.86,.35),vec2(.91,.38),vec2(.95,.41) );\n\nfloat sdPoly20 POLY(20)\nvec2 pt20[ 20]=vec2[](  \nvec2(.54,.31),vec2(.56,.32),vec2(.51,.25),vec2(.48,.13),vec2(.54,.10),\nvec2(.62,.12),vec2(.70,.16),vec2(.75,.19),vec2(.79,.29),vec2(.85,.38),\nvec2(.88,.39),vec2(.95,.41),vec2(.95,.40),vec2(.90,.38),vec2(.86,.35),\nvec2(.73,.01),vec2(.45,.01),vec2(.46,.18),vec2(.53,.31),vec2(.54,.31) );\n\nfloat sdPoly3b POLY(3)\nvec2 pt3b[ 3]=vec2[](  \nvec2(.50,.83),vec2(.55,1.00),vec2(.50,.83) );\n\nfloat sdPoly7 POLY(7)\nvec2 pt7[ 7]=vec2[](  \nvec2(.47,.66),vec2(.49,.67),vec2(.48,.72),vec2(.47,.73),vec2(.46,.73),\nvec2(.46,.71),vec2(.47,.66) );\n\nfloat sdPoly9 POLY(9)\nvec2 pt9[ 9]=vec2[](  \nvec2(.54,.71),vec2(.58,.73),vec2(.58,.78),vec2(.58,.81),vec2(.56,.83),\nvec2(.55,.83),vec2(.53,.80),vec2(.53,.77),vec2(.54,.71) );\n\nfloat sdPoly9b POLY(9)\nvec2 pt9b[ 9]=vec2[](  \nvec2(.57,1.00),vec2(.58,.96),vec2(.58,.93),vec2(.57,.86),vec2(.59,.89),\nvec2(.63,.95),vec2(.63,.99),vec2(.63,1.00),vec2(.57,1.00) );\n\n\nfloat sdPoly10b POLY(10)\nvec2 pt10b[ 10]=vec2[](  \nvec2(.49,1.00),vec2(.54,1.00),vec2(.52,.95),vec2(.49,.90),vec2(.48,.86),\nvec2(.48,.77),vec2(.46,.82),vec2(.45,.91),vec2(.45,.93),vec2(.49,1.00) );\n\nfloat sdPoly17 POLY(17)\nvec2 pt17[ 17]=vec2[](  \nvec2(.72,.70),vec2(.73,.70),vec2(.75,.71),vec2(.76,.76),vec2(.76,.82),\nvec2(.76,.83),vec2(.77,.79),vec2(.77,.79),vec2(.77,.83),vec2(.75,.84),\nvec2(.74,.84),vec2(.73,.79),vec2(.72,.76),vec2(.73,.76),vec2(.73,.74),\nvec2(.73,.73),vec2(.72,.70) );\n\nfloat sdPoly9c POLY(9)\nvec2 pt9c[9]=vec2[](  \nvec2(.52,.24),vec2(.54,.24),vec2(.59,.23),vec2(.60,.23),vec2(.64,.25),\nvec2(.70,.29),vec2(.76,.32),vec2(.81,.33),vec2(.52,.24) );\n\n\nconst vec3 col1=vec3(0.83,0.34,0.69); //rosa\nconst vec3 col2=vec3(0.18,0.28,0.76); //azul\nconst vec3 col3=vec3(1.00,0.84,0.77); //piel\nconst vec3 col4=vec3(0.88,0.60,0.37); //piel obscuro\nconst vec3 col5=vec3(0.98,0.96,0.95); //blanco\nconst vec3 col6=vec3(0.97,0.42,0.14);\n\nfloat sdPoly4b POLY(4)\nvec2 pt4b[4]=vec2[](  \nvec2(.59,.19),vec2(.58,.14),vec2(.58,.11),vec2(.59,.19) );\n\nfloat sdPoly16 POLY(16)\nvec2 pt16[16]=vec2[](  \nvec2(.64,1.),vec2(.66,.91),vec2(.65,.87),vec2(.65,.83),vec2(.66,.84),\nvec2(.68,.86),vec2(.69,.87),vec2(.69,.82),vec2(.68,.81),vec2(.70,.82),\nvec2(.72,.84),vec2(.73,.86),vec2(.74,.87),vec2(.75,.87),vec2(.75,1.),\nvec2(.64,1.) );\n\n\nfloat sdPoly7b POLY(7)\nvec2 pt7b[7]=vec2[](  \nvec2(.10,.17),vec2(.15,.18),vec2(.18,.18),vec2(.22,.17),vec2(.25,.17),\nvec2(.27,.15),vec2(.10,.17) );\n\nfloat sdPoly7c POLY(7)\nvec2 pt7c[7]=vec2[](  \nvec2(.59,.38),vec2(.61,.36),vec2(.62,.32),vec2(.62,.31),vec2(.61,.35),\nvec2(.59,.37),vec2(.59,.38) );\n\nfloat sdPoly7d POLY(7)\nvec2 pt7d[7]=vec2[](  \nvec2(.70,.53),vec2(.70,.48),vec2(.64,.26),vec2(.64,.26),vec2(.70,.48),\nvec2(.70,.53),vec2(.70,.53) );\n\nfloat sdPoly3c POLY(3)\nvec2 pt3c[3]=vec2[](  \nvec2(.82,.45),vec2(.78,.35),vec2(.82,.45) );\n\n\n//***------------****-----------****------------******-------\nvec3 RostroGoku(in vec2 pp, vec3 col, vec2 uv) \n{\n  vec2 p=pp;\n   float sd26 = sdPoly26(p, pt26);\n   float sd8 = sdPoly8(p, pt8);\n   float sd15 = sdPoly15(p, pt15);\n   float sd8b = sdPoly8b(p, pt8b);\n   float sd6 = sdPoly6(p, pt6);\n   float sd4 = sdPoly4(p, pt4);\n   float sd3 = sdPoly3(p, pt3);\n   float sd5 = sdPoly5(p, pt5);\n   float sd12 = sdPoly12(p, pt12);\n   float sd8c = sdPoly8c(p, pt8c);\n   float sd23 = sdPoly23(p, pt23);\n   float sd35 = sdPoly35(p, pt35);\n   float sd14 = sdPoly14(p, pt14);\n   float sd18 = sdPoly18(p, pt18);\n   float sd10 = sdPoly10(p, pt10);\n   float sd20 = sdPoly20(p, pt20);\n   float sd3b = sdPoly3b(p, pt3b);    \n   float sd7 = sdPoly7(p, pt7);\n   float sd9 = sdPoly9(p, pt9);\n   float sd9b = sdPoly9b(p, pt9b);\n   float sd10b = sdPoly10b(p, pt10b);\n   float sd17 = sdPoly17(p, pt17);\n   float sd9c = sdPoly9c(p, pt9c);\n   float sd4b = sdPoly4(p, pt4b);\n   float sd16 = sdPoly16(p, pt16);\n    float sd7b = sdPoly7b(p, pt7b);\n    float sd7c = sdPoly7c(p, pt7c);\n   float sd7d = sdPoly7d(p, pt7d);\n    float sd3c = sdPoly3c(p, pt3c);\n   \n   float sdojo1= sdCircle(uv-vec2(-0.03,0.28), 0.02 );\n   float sdojo2= sdCircle(uv-vec2(-0.22,0.19), 0.02 ); //izq pupila\n   \n   float t1=mod(iTime,1.);\n   float t2=mod(iTime,2.);\n   vec3 colpelo;\n   if (t1<t2)\n    colpelo=mix(colNegro, colDorado, p.y);\n   else\n       colpelo=colNegro;\n   //col=mix(col,colpelo ,S( sd23,0.0)); // pelo\n   col=ponerBorde(colpelo,col,sd23); //pelo\n   col= ponerBorde(col3,col,sd26); //rostro\n   col=mix(col,colBlanco ,S( sd8,0.0));// dientes\n   col= ponerBorde(colNegro,col,sd15); // boca\n   col= ponerBorde(colRojo,col,sd8b); //lengua\n   col= ponerBorde(col3,col,sd6); // nariz\n   col= ponerBorde(col4,col,sd4); // \n   col=mix(col,colNegro ,S( sd3,0.0)); //linea rostro1\n   col=mix(col,colNegro ,S( sd5,0.0)); //linea rostro 2\n   col=mix(col,colNegro ,S( sd12,0.0)); //ceja der\n   col=mix(col,colNegro ,S( sd8c,0.0)); //ceja izq\n   col= ponerBorde(col3,col,sd35); // cuerpo\n   col= ponerBorde(col6,col,sd14); // camisa 0 roja\n   col= ponerBorde(col2,col,sd18); //camisa 1 azul\n   col= ponerBorde(col6,col,sd10); //camisa 2 azul\n   col= ponerBorde(col2,col,sd20); // camisa roja 2\n   col= ponerBorde(col1,col,sd3b); // linea 2 arruga\n   col= ponerBorde(colBlanco,col,sd7); // ojo izq\n   col= ponerBorde(colBlanco,col,sd9); // ojo der\n   col= ponerBorde(colpelo,col,sd9b); // pelo negro\n   col= ponerBorde(colpelo,col,sd10b); // pelo negro\n   col= ponerBorde(col4,col,sd17); // oreja\n   col= ponerBorde(colNegro,col,sd9c); // linea pecho\n   col= ponerBorde(colNegro,col,sdojo1); // pupila-ojo \n   col= ponerBorde(colNegro,col,sdojo2); // pupila-ojo \n   col=mix(col,colNegro ,S( sd4b ,0.0));// linea\n   col=mix(col,colpelo ,S( sd16 ,0.0));\n   col=mix(col,colNegro ,S( sd7b ,0.0));\n   col=mix(col,colNegro ,S( sd7c ,0.0));\n   col=mix(col,colNegro ,S( sd7d ,0.0));\n   col=mix(col,colNegro ,S( sd3c ,0.0));\n  return col;\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    float t=1.0-0.5*fract(sin(iTime*0.5));\n    uv*=t;\n    //uv.x+=1.4;uv.y+=0.8;\n    vec2 p=uv;\n    p.x+=1.4;p.y+=0.8;\n    p.x*=0.4; p.y*=0.7;\n    vec3 col=mix(col1, vec3(0.0),uv.y*0.5);\n    col=RostroGoku(p, col, uv);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}