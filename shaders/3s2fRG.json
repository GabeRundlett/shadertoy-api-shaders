{
    "Shader": {
        "info": {
            "date": "1590281877",
            "description": "mirage, the",
            "flags": 32,
            "hasliked": 0,
            "id": "3s2fRG",
            "likes": 3,
            "name": "angel 4",
            "published": 3,
            "tags": [
                "the",
                "mirage"
            ],
            "usePreview": 0,
            "username": "Aman",
            "viewed": 330
        },
        "renderpass": [
            {
                "code": "\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv =  fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// S/o mercury.sexy for these ops:\n\nfloat cyl(vec3 p, float r) {\n    return length(p.xz) - r;\n}\n\nmat3x3 rotationAlign( vec3  d,  vec3  z )\n{\n     vec3  v = cross( z, d );\n     float c = dot( z, d );\n     float k = 1.0f/(1.0f+c);\n\n    return mat3x3( v.x*v.x*k + c,     v.y*v.x*k - v.z,    v.z*v.x*k + v.y,\n                   v.x*v.y*k + v.z,   v.y*v.y*k + c,      v.z*v.y*k - v.x,\n                   v.x*v.z*k - v.y,   v.y*v.z*k + v.x,    v.z*v.z*k + c    );\n}\n\n// Same, but mirror every second cell so all boundaries match\nvec2 pModMirror2(in vec2 p, vec2 size) {\n    vec2 halfsize = size*0.5;\n    vec2 c = floor((p + halfsize)/size);\n    p = mod(p + halfsize, size) - halfsize;\n    p *= mod(c,vec2(2.0))*2.0 - vec2(1);\n    return p;\n}\n\nfloat sdf(vec3 p) {\n    vec3 spp = p;\n  //  spp.z *= 2.0;\n    float sp = length(spp) - 1.2;\n  //  sp /= 2.0 * abs(dot(p, vec3(0.0, 0.0, 1.0)));\n    //sp *= \n    \n    float f = clamp(sin(iTime), 0.2, 1.0);\n  \n    float posoff = texture(iChannel1, vec2(sin(iTime * 0.1), cos(iTime * 0.1))).r;\n    float x = sin(iTime - (1.0 - f)) * 0.5 + 0.5 + posoff;\n    float y = cos(iTime - (1.0 - f)) * 0.5 + 0.5;\n   \n    p = p * rotationAlign(vec3(0.0, 1.0, 0.0), normalize(vec3(0.3 + x, 0.3 + y, -2.5)));\n    float c = cyl(p, (f - 0.5));\n    vec2 polar = vec2(length(p.xz), atan(-p.x, p.z));\n    polar.y /= (3.14159) * 0.5 ;\n    polar.x += 0.1;\n    polar.y += polar.x * f * 5.0 + polar.y * 0.1 + 0.2;\n    polar.y +=sin(iTime) * 0.5 + 0.5;\n    vec2 sampleAt = vec2(p.y * 0.5, polar.y * 0.6) * 0.3;\n    vec2 sampleAt2 = sampleAt; //pModMirror2(sampleAt, vec2(1.0));\n    float sampl = texture(iChannel1, fract(sampleAt2 + 0.1)).r;\n    sampl -= 0.1;\n    sampl *= sampl;\n    sampl *= sampl;\n    \n    \n    sampl *= 4.0;\n//    sampl *= clamp(tan(time), 0.0, 1.0);\n    c -= sampl * 0.25 ;\n    return max(sp +c*0.04, -c);\n}\n\n\n\nbool march(vec3 ro, vec3 rd, out vec3 hitPos) {\n    float over = 1.0;\n    float tot = 0.0;\n    for(int i = 0; i < 40; i++) {\n        float d = sdf(ro);\n        tot += d;\n        if(d < 0.001 * tot) {\n            hitPos = ro;\n            return true;\n        }\n        //d *= over;\n        //over *= 1;\n        ro += rd * d;\n    }\n    return false;\n}\n\nvec3 calcNormal(vec3 p, float d) {\n    vec2 eps = vec2(0.001, -0.001) * d;\n    return normalize(eps.xyy * sdf(p + eps.xyy)\n                    + eps.yyx * sdf(p + eps.yyx)\n                    + eps.yxy * sdf(p + eps.yxy)\n                    + eps.xxx * sdf(p + eps.xxx));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = -1.0 + 2.0 * fragCoord/iResolution.xy;\n    uv.x /= iResolution.y / iResolution.x;\n    vec3 ro = vec3(0.0, 0.0, -2.0);\n    vec3 rd = normalize(vec3(uv, 1.2));\n    vec3 col = vec3(1); //texture2D(shared1, inData.v_texcoord).rbb;\n    vec3 hitPos;\n     vec3 prev = texture(iChannel0, fragCoord/iResolution.xy).rgb;\n   \n    \n    \n    if(march(ro, rd, hitPos)) {\n        float d = length(hitPos - ro);\n        vec3 normal = calcNormal(hitPos, d);\n        vec3 toLight = normalize(vec3(1.0, 0.9, -1) - hitPos);\n        float dif = clamp(dot(normal, toLight), 0.3, 1.0);\n        col = mix( normalize(sin(normal.rbb * 3.0) * 0.5 + 0.5), vec3(0.4, 0.4, 1.0), dif);\n        col = vec3(pow(dif, 1.5));\n        col += step(0.9, pow(dif, 6.0)) * pow(dif, 5.0);\n        vec3 keyLight = normalize(vec3(0.0, -4.0, -0.2) - hitPos);\n        col += clamp(dot(normal, keyLight), 0.0, 1.0) * vec3(1.0, 0.0, 0.0);\n       // col.g *= 0.5\n        //col.rb *= 2.0;\n            prev = texture(iChannel0, fragCoord/iResolution.xy + -(2.0 * col.rb - 1.0) * 0.005).rgb;\n        col = mix(col, prev, 0.9);\n        if(length(hitPos) < 1.14) {\n            col = mix(col, vec3(1.0, 0.7, 0.85), 0.1);\n            //col += vec3(1.0);\n        }\n    } else {\n         col = mix(col, prev, 0.9);\n    }\n    \n    fragColor = vec4(col,\n        1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}