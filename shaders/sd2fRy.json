{
    "Shader": {
        "info": {
            "date": "1646591287",
            "description": "This is very laggy for me! Wanted to do more with it but its hard to come up with stuff at 8fps lol\n\n(changed it a bit so runs faster)",
            "flags": 0,
            "hasliked": 0,
            "id": "sd2fRy",
            "likes": 12,
            "name": "Fractal Toruseseses",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 266
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 150\n#define MAX_DIST 20.\n#define SURF_DIST .0001\n// SURF_DIST very low because you can see it \"click\" when motion reverts\n// for illusion of constant zoom-out\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec3 getRo() {\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(sin(iTime), cos(iTime), 2.);\n    //ro.yz *= Rot(-m.y*3.14+1.);\n  // ro.xz *= Rot(-m.x*6.2831);\n    return ro;\n}\n\nvec3 angleMod(vec3 p, in float r) {\n    float a = pi / r;   \n    float a2 = mod(atan(p.z, p.x) + a, 2. * a) - a;\n    \n    p.xz = length(p.xz) * vec2(cos(a2), sin(a2));   \n    return p;\n}\n\nfloat test(float x, float n) {\n    float k = pow(0.4, -log(2.));\n    float f = exp(-pow(k * x, n));\n    return f;\n}\n\nfloat GetDist(vec3 p) {  \n    float f = fract(0.25 * iTime);\n    \n    // (used at the end)\n    float mx = 1. - f;\n   // mx = test(fract(0.25 * iTime), 5.);\n    mx = smoothstep(0., 1., mx);\n    \n    f = 3. - 2. * f;\n    p /= exp2(f);\n   // p *= pow(0.5, f);\n    float m = 3.; // was 2\n    \n    /*\n    float r1 = m;\n    float r2 = 0.25 * m;\n    float d1 = length(p.xy) - r1;\n    float d  = length(vec2(d1, p.z)) - r2;\n    */\n    \n    float d = 100.;\n    \n    int n = 7;\n    for(int i = 0; i < n; i++) {\n        p = angleMod(p.yzx, 4.);\n        p.x -= m;// + 0.25 * m * cos(io + iTime);\n        m *= 0.5;\n        float d1 = length(p.xy) - m;\n        d = min(d, length(vec2(d1, p.z)) - .25 * m);\n    }\n    \n    // do 2 extra gens which retract as you zoom out. \n    // when you \"click\" back it should look the same as when you started\n    float d2 = d;\n    \n    p = angleMod(p.yzx, 4.);\n    p.x -= m;\n    m *= 0.5;\n    float d1 = length(p.xy) - m;\n    d2 = min(d2, length(vec2(d1, p.z)) - .25 * m);\n    \n    p = angleMod(p.yzx, 4.);\n    p.x -= m;\n    m *= 0.5;\n    d1 = length(p.xy) - m;\n    d2 = min(d2, length(vec2(d1, p.z)) - .25 * m);\n        \n    d = mix(d, d2, mx);\n\n    return 2. * d; // makes it run a bit faster\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n   // float s = sign(z);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n       // if (s != sign(dS)) { z *= 0.5; s = sign(dS); }\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = getRo();\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    vec3 p = ro + rd * d;\n\n    float IOR = 1.05;\n    if(d<MAX_DIST) {\n        \n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        /*\n        vec3 pIn = p - 4. * SURF_DIST * n;\n        vec3 rdIn = refract(rd, n, 1./IOR);\n        float dIn = RayMarch(pIn, rdIn, -1.);\n        \n        vec3 pExit = pIn + dIn * rdIn;\n        vec3 nExit = -GetNormal(pExit); // *-1.; ?\n        */\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n\n        float fresnel = pow(1.+dot(rd, n), 2.); \n        col *= mix(vec3(0), col, fresnel);\n        \n        col *= 0.5 + 0.5 * n;\n\n    }\n    vec3 e = vec3(1);\n    vec3 col2 = vec3(0.5 + 0.2 * cos(0.25 * iTime),1,0.3) * exp(rd.y-0.4);//0.8 * abs(rd);//pal(cross(rd,p)., e, e, e, vec3(0,1,2)/3.);\n    //col *= pal(0.1 * p.y, e, e, e, vec3(0,1,2)/3.);\n    col = mix(col, col2, 1.-vec3(exp(-0.8 * length(p))));\n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}