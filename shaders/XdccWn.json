{
    "Shader": {
        "info": {
            "date": "1518350290",
            "description": "A place for meditation (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "XdccWn",
            "likes": 23,
            "name": "Rock Garden",
            "published": 3,
            "tags": [
                "rocks",
                "zen",
                "stones"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 999
        },
        "renderpass": [
            {
                "code": "// \"Rock Garden\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrBoxAn2Df (vec2 p, vec2 b, float w);\nfloat PrSphDf (vec3 p, float r);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvoid HexVorInit ();\nvec4 HexVor (vec2 p);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir;\nfloat tCur, dstFar;\nint idObj;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec4 vc;\n  vec3 q;\n  float dMin, d, h, s;\n  dMin = dstFar;\n  q = p;\n  h = SmoothMin (4.8 - abs (q.x), 2.8 - abs (q.z), 0.2);\n  h = SmoothMin (h, SmoothMin (length (q.xz - vec2 (3., 1.)),\n    length (q.xz - vec2 (-3., -1.)), 0.1), 0.1);\n  q.xz = Rot2D (q.xz, pi / 4.);\n  h = SmoothMin (h, SmoothMin (length (q.xz - vec2 (-1.5, 2.)),\n    length (q.xz - vec2 (1.5, -2.)), 0.1), 0.1);\n  q = p;\n  q.xz *= q.xz;\n  h = SmoothMin (h, pow (dot (q.xz, q.xz), 0.25), 0.1);\n  h *= 12. * pi;\n  s = abs (sin (h));\n  h = 0.01 + 0.02 * (1. - s) * (s + sqrt (1. - s * s));\n  q = p;\n  d = max (PrBoxDf (q, vec3 (4., h, 2.)), - p.y);\n  DMIN (1);\n  d = PrSphDf (q, 0.35 + 0.07 * Noisefv3 (8. * p));\n  q.xz -= vec2 (3., 1.) * sign (q.zx);\n  d = min (d, PrSphDf (q, 0.25 + 0.05 * Noisefv3 (8. * p)));\n  q = p;\n  q.xz -= vec2 (1.35, 1.2) * sign (q.zx);\n  d = max (min (d, PrSphDf (q, 0.2 + 0.04 * Noisefv3 (8. * p))), - p.y);\n  DMIN (2);\n  q = p;\n  d = max (PrBoxAn2Df (q.xz, vec2 (4.02, 2.02), 0.02), abs (q.y - 0.02) - 0.02);\n  DMIN (3);\n  vc = HexVor (8. * q.zx);\n  h = 0.006 * smoothstep (0.05, 0.14, vc.x - 0.03 * vc.w);\n  d = max (PrBoxAn2Df (q.xz, vec2 (4.55, 2.55), 0.51), abs (q.y - h) - h);\n  DMIN (4);\n  d = max (max (PrBoxAn2Df (q.xz, vec2 (5.04, 3.04), 0.05), abs (q.y - 0.3) - 0.3),\n     0.3 - min (abs (q.x - 0.4 * sign (q.z)), abs (q.z + 1.6 * sign (q.x))));\n  DMIN (5);\n  q.xz = abs (q.xz) - vec2 (4.9, 2.9);\n  q.y -= 0.1;\n  d = max (max (PrSphDf (q, 0.25 + 0.03 * Noisefv3 (64. * p)),\n     PrBox2Df (p.xz, vec2 (5., 3.))), - p.y);\n  DMIN (6);\n  return 0.7 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0002, -0.0002);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.1 * d, h));\n    d += clamp (3. * h, 0.05, 0.5);\n    if (sh < 0.05) break;\n  }\n  return 0.3 + 0.7 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 vc;\n  vec3 col, vn;\n  vec2 vf;\n  float dstObj, sh, spec;\n  HexVorInit ();\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    vf = vec2 (0.);\n    if (idObj == 1) {\n      col = mix (vec3 (0.3), vec3 (0.5), smoothstep (0.45, 0.55, Fbm2 (256. * ro.xz)));\n      spec = 0.02;\n      vf = vec2 (64., 1.);\n    } else if (idObj == 2) {\n      col = mix (vec3 (0.4, 0.45, 0.4), vec3 (0.6, 0.6, 0.65),\n         smoothstep (0.4, 0.6, Noisefv3 (256. * ro)));\n      spec = 0.1;\n      vf = vec2 (16., 5.);\n    } else if (idObj == 3) {\n      col = vec3 (0.15, 0.2, 0.15);\n      spec = 0.05;\n    } else if (idObj == 4) {\n      vc = HexVor (8. * ro.zx);\n      col = mix (vec3 (0.2, 0.2, 0.), vec3 (0.45, 0.4, 0.4),\n         step (0.06 + 0.03 * vc.w, vc.x)) * (1. - 0.1 * Noisefv2 (128. * ro.xz));\n      spec = 0.1;\n      vf = vec2 (32., 1.);\n    } else if (idObj == 5) {\n      col = vec3 (0.5, 0.4, 0.3);\n      if (ro.y > 0.59) col *= 0.3;\n      else col *= 1. - 0.15 * smoothstep (0.3, 0.7,\n         Fbm2 (4. * vec2 (2. * dot (abs (vn.zx), ro.xz), ro.y)));\n      vf = vec2 (64., 0.5);\n      spec = 0.05;\n    } else if (idObj == 6) {\n      col = vec3 (0.1, 0.4, 0.1) * (1. - 0.5 * Fbm3 (32. * ro.yzx));\n      spec = 0.;\n      vf = vec2 (16., 5.);\n    }\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    sh = ObjSShadow (ro, sunDir);\n    col = col * (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.)) +\n       spec * sh * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n  } else {\n    col = vec3 (0.6, 0.6, 0.7) * (0.05 + 0.245 * (rd.y + 1.) * (rd.y + 1.));\n  }\n  return pow (clamp (col, 0., 1.), vec3 (0.7));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  if (mPtr.z > 0.) {\n    az = 3. * pi * mPtr.x;\n    el = pi * (-0.2 + mPtr.y);\n  } else {\n    az = 0.1 * pi * (floor (0.3 * tCur) + smoothstep (0.9, 1., mod (0.3 * tCur, 1.)));\n    el = - pi * (0.2 + 0.05 * sin (0.2 * az));\n  }\n  el = clamp (el, -0.4 * pi, -0.02 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -20.);\n  zmFac = 6. + 2. * SmoothBump (0.25, 0.75, 0.15, mod (az / pi, 1.));\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  dstFar = 50.;\n  sunDir = normalize (vec3 (1., 1.5, -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrBoxAn2Df (vec2 p, vec2 b, float w)\n{\n  return max (PrBox2Df (p, vec2 (b + w)), - PrBox2Df (p, vec2 (b - w)));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec2 gVec[7], hVec[7];\n\nvoid HexVorInit ()\n{\n  vec3 e = vec3 (1., 0., -1.);\n  gVec[0] = e.yy;\n  gVec[1] = e.xy;\n  gVec[2] = e.yx;\n  gVec[3] = e.xz;\n  gVec[4] = e.zy;\n  gVec[5] = e.yz;\n  gVec[6] = e.zx;\n  for (int k = 0; k < 7; k ++) hVec[k] = HexToPix (gVec[k]);\n}\n\nvec4 HexVor (vec2 p)\n{\n  vec4 sd, udm;\n  vec2 ip, fp, d, u;\n  float amp, a;\n  amp = 0.7;\n  ip = PixToHex (p);\n  fp = p - HexToPix (ip);\n  sd = vec4 (4.);\n  udm = vec4 (4.);\n  for (int k = 0; k < 7; k ++) {\n    u = Hashv2v2 (ip + gVec[k]);\n    a = 2. * pi * (u.y - 0.5);\n    d = hVec[k] + amp * (0.4 + 0.6 * u.x) * vec2 (cos (a), sin (a)) - fp;\n    sd.w = dot (d, d);\n    if (sd.w < sd.x) {\n      sd = sd.wxyw;\n      udm = vec4 (d, u);\n    } else sd = (sd.w < sd.y) ? sd.xwyw : ((sd.w < sd.z) ? sd.xyww : sd);\n  }\n  sd.xyz = sqrt (sd.xyz);\n  return vec4 (SmoothMin (sd.y, sd.z, 0.3) - sd.x, udm.xy, Hashfv2 (udm.zw));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}