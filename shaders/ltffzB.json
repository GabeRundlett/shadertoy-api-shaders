{
    "Shader": {
        "info": {
            "date": "1512291462",
            "description": "Lots of power (mouseable - click in lower-right corner for color image or upper-right for\n color-coded raymarch step count)",
            "flags": 0,
            "hasliked": 0,
            "id": "ltffzB",
            "likes": 32,
            "name": "Endless Engines",
            "published": 3,
            "tags": [
                "machine",
                "cellmarching"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 1100
        },
        "renderpass": [
            {
                "code": "// \"Endless Engines\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrSphDf (vec3 p, float s);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec3 HsvToRgb (vec3 c);\nfloat RgbToVal (vec3 c);\nfloat Hashfv3 (vec3 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 bSize, qHit, cId;\nvec2 aCs[3], crCs[3], crMid[3];\nfloat tCur, dstFar, crRad, crLen, aRot, stepCnt;\nint idObj;\nbool colImg, marchImg;\nconst float pi = 3.14159;\nconst int idWhl = 1, idSpk = 2, idCrnk = 3, idAx = 4, idPis = 5, idCrod = 6, idCyl = 7,\n   idCylEnt = 8, idValv = 9, idPipes = 10, idSup = 11, idBase = 12, idFlr = 13, idCol = 14,\n   idRail = 15, idLt = 16;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat HallDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  q = p;\n  d = max (0.5 * bSize.y - 0.4 - abs (q.y),\n    - PrBox2Df (vec2 (q.x, abs (q.z) - 0.5 * bSize.z), vec2 (16., 8.)));\n  DMINQ (idFlr);\n  d = length (abs (q.xz) - vec2 (16.6, 11.9)) - 0.6;\n  DMIN (idCol);\n  q = p;  q.z = abs (q.z) - 11.8;  q.y -= -4.6;\n  d = min (min (PrCylDf (q.zyx, 0.15, 16.1),\n     PrCylDf (vec3 (abs (abs (q.x) - 7.) - 3.5, q.y + 2.5, q.z).xzy, 0.1, 2.5)),\n     PrCylDf (vec3 (q.x, abs (q.y + 2.5) - 1., q.z).zyx, 0.1, 16.1));\n  q = p;  q.xz = abs (q.xz) - vec2 (16.4, 19.4);  q.y -= -4.6;\n  d = min (d, min (min (PrCylDf (q, 0.15, 7.7),\n     PrCylDf (vec3 (q.x, q.y + 2.5, abs (q.z) - 2.).xzy, 0.1, 2.5)),\n     PrCylDf (vec3 (q.x, abs (q.y + 2.5) - 1., q.z), 0.1, 7.7)));\n  DMIN (idRail);\n  q = p;  q.xz = abs (q.xz);  q -= vec3 (6., 9.6, 6.);\n  d = PrCylDf (q.xzy, 2., 0.2);\n  DMINQ (idLt);\n  return dMin;\n}\n\nfloat CrnkDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, dz;\n  for (int k = 0; k < 3; k ++) {\n    dz = float (k - 1) * 4.;\n    q = p;  q.x -= 8.;\n    q.xy = Rot2Cs (q.xy, aCs[k]);\n    q.z += dz;\n    d = min (PrBoxDf (vec3 (q.x + 0.5 * crRad, q.y, abs (q.z) - 0.5), vec3 (0.5 * crRad, 0.2, 0.1)),\n       PrCylDf (vec3 (abs (q.x + 0.5 * crRad) - 0.5 * crRad, q.y, abs (q.z) - 0.5), 0.6, 0.1));\n    DMIN (idCrnk);\n    d = PrCylDf (vec3 (q.x + crRad, q.yz), 0.3, 0.65);\n    DMIN (idAx);\n    q = p;  q.xz -= vec2 (8., - dz);\n    q.xy = Rot2Cs (q.xy + crMid[k], crCs[k]);\n    d = min (PrCylDf (vec3 (abs (q.y) - 0.12, q.zx), 0.15, crLen - 0.5),\n       PrCylDf (vec3 (abs (q.x) - crLen, q.yz), 0.6, 0.15));\n    DMIN (idCrod);\n    q = p;  q.xz -= vec2 (3.5 - (crMid[k].x + crLen * crCs[k].x), - dz);\n    d = PrCylDf (q.yzx, 0.25, 3.7);\n    DMIN (idPis);\n    d = PrCylDf ((q - vec3 (0.7, 1.7, 0.)).yzx, 0.07, 3.);\n    DMIN (idPis);\n    q.x -= 4.5;\n    d = PrCylDf (q, 0.3, 0.5);\n    DMIN (idAx);\n    d = min (min (PrCylDf ((q + vec3 (0.8, 0., 0.)).yzx, 0.6, 0.13),\n       PrCylDf ((q + vec3 (0.8, -0.8, 0.)).xzy, 0.08, 0.95)),\n       PrCylDf (vec3 (q.xy, abs (q.z) - 0.35), 0.7, 0.1));\n    DMIN (idCrnk);\n  }\n  return dMin;\n}\n\nfloat EngDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  p.y += 4.6;\n  d = min (PrBoxDf (p + vec3 (0., 4., 0.), vec3 (13., 1., 6.)),\n     PrBoxDf (vec3 (abs (p.x + 9.) - 2., p.y + 2.5, p.z), vec3 (1., 1.4, 5.)));\n  DMIN (idBase);\n  q = p;  q.x -= 8.;\n  q.xy = Rot2Cs (q.xy, aCs[0]);\n  q.z = abs (q.z) - 7.;\n  d = min (PrCylAnDf (q, 4., 0.2, 0.6), PrCylDf (q, 0.6, 0.6));\n  DMINQ (idWhl);\n  q.xy = Rot2D (q.xy, 2. * pi * (floor (6. * atan (q.y, - q.x) / (2. * pi) + 0.5)) / 6.);\n  d = PrCylDf (vec3 (q.x + 2.2, q.y, abs (q.z) - 0.35).zyx, 0.2, 1.7);\n  DMIN (idSpk);\n  d = max (PrCylDf (p - vec3 (8., 0., 0.), 0.3, 7.8), min (0.35 - abs (mod (p.z + 2., 4.) - 2.),\n     6. - abs (p.z)));\n  DMIN (idAx);\n  dMin = CrnkDf (p, dMin);\n  q = p;  q.x -= -8.9;  q.z = mod (q.z + 2., 4.) - 2.;\n  d = max (PrCylDf ((q + vec3 (-3.5, 0., 0.)).yzx, 0.7, 0.2), abs (p.z) - 6.);\n  DMINQ (idCylEnt);\n  d = max (PrCylDf (q.yzx, 1.5, 3.5), abs (p.z) - 6.);\n  DMINQ (idCyl);\n  q = p + vec3 (8.9, -1.7, 0.);  q.z = mod (q.z + 2., 4.) - 2.;\n  d = max (PrCylDf (q.yzx, 0.5, 2.5), abs (p.z) - 6.);\n  DMINQ (idValv);\n  q = vec3 (abs (p.x + 8.9) - 1.5, p.y - 2.5, p.z);\n  d = min (min (max (PrCylDf ((vec3 (q.x, q.y, mod (q.z + 2., 4.) - 2.)).xzy, 0.35, 1.25),\n     abs (p.z) - 6.), PrCylDf (vec3 (q.x, q.y - 1.3, q.z), 0.35, 4.)),\n     PrSphDf (vec3 (q.x, q.y - 1.3, abs (q.z) - 4.), 0.35));\n  q = p + vec3 (8.9, -6.3, 0.);\n  d = min (d, min (PrCylDf ((q + vec3 (-1.5, 0., 2.)).xzy, 0.35, 2.5),\n     PrCylDf ((q + vec3 (1.5, 0., -2.)).xzy, 0.35, 2.5)));\n  d = min (d, length (vec2 (abs (q.x) - 1.5, q.y - 2.5)) - 0.4);\n  DMIN (idPipes);\n  q = p;  q.x -= 8.;  q.z = abs (abs (p.z) - 4.) - 1.7;\n  d = min (PrBoxDf (q + vec3 (0., 1.6, 0.), vec3 (0.5, 1.5, 0.2)), PrCylDf (q, 0.5, 0.3));\n  DMIN (idSup);\n  q = p + vec3 (-8., -1.8, -2.3);\n  d = PrCylDf ((q + vec3 (0., 0.6, 0.)).xzy, 0.12, 0.8);\n  q.xz = Rot2D (q.xz, 4. * aRot);\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (4. * atan (q.z, - q.x) / (2. * pi) + 0.5)) / 4.);\n  q.xy = Rot2D (q.xy, -0.25 * pi);\n  d = min (d, PrCylDf ((q + vec3 (0.4, -0.1, 0.)).yzx, 0.05, 0.4));\n  DMIN (idAx);\n  d = PrSphDf (q + vec3 (0.7, -0.1, 0.), 0.15);\n  DMIN (idPis);\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin;\n  dMin = dstFar;\n  dMin = HallDf (p, dMin);\n  dMin = EngDf (p, dMin);\n  return dMin;\n}\n\nvoid SetEngConf ()\n{\n  aRot = -(0.1 + 0.3 * Hashfv3 (cId + 11.)) * 2. * pi * tCur;\n  aCs[0] = vec2 (cos (aRot), sin (aRot));\n  aCs[1] = vec2 (cos (aRot + pi * 2./3.), sin (aRot + pi * 2./3.));\n  aCs[2] = vec2 (cos (aRot + pi * 4./3.), sin (aRot + pi * 4./3.));\n  for (int k = 0; k < 3; k ++) {\n    crMid[k].y = -0.5 * crRad * aCs[k].y;\n    crCs[k] = vec2 (cos (asin (crMid[k].y / crLen)), crMid[k].y / crLen);\n    crMid[k].x = crLen * crCs[k].x + crRad * aCs[k].x;\n  }\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, rdi, s, cIdP;\n  float dHit, d, eps;\n  eps = 0.0005;\n  dHit = eps;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  ro /= bSize;\n  rd /= bSize;\n  rdi = 1. / rd;\n  cIdP = vec3 (-99.);\n  stepCnt = 0.;\n  for (int j = 0; j < 180; j ++) {\n    p = ro + dHit * rd;\n    cId = floor (p);\n    if (cId.x != cIdP.x || cId.y != cIdP.y || cId.z != cIdP.z) {\n      SetEngConf ();\n      cIdP = cId;\n    }\n    s = (cId + step (0., rd) - p) * rdi;\n    d = min (ObjDf (bSize * (p - cId - 0.5)), abs (min (min (s.x, s.z), s.y)) + eps);\n    dHit += d;\n    ++ stepCnt;\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0005, -0.0005);\n  p -= bSize * (cId + 0.5);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p, cIdP;\n  float sh, d, h;\n  sh = 1.;\n  cIdP = vec3 (-99.);\n  d = 0.1;\n  for (int j = 0; j < 16; j ++) {\n    p = ro + d * rd;\n    cId = floor (p / bSize);\n    if (cId.x != cIdP.x || cId.y != cIdP.y || cId.z != cIdP.z) {\n      SetEngConf ();\n      cIdP = cId;\n    }\n    h = ObjDf (p - bSize * (cId + 0.5));\n    sh = min (sh, smoothstep (0., 0.1 * d, h));\n    d += 0.3;\n    if (sh < 0.05) break;\n  }\n  return sh;\n}\n\nvec3 ShGrid (vec2 p)\n{\n  vec2 q, sq, ss;\n  q = p;\n  sq = smoothstep (0.05, 0.1, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.3 * smoothstep (0.3, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.8 + 0.2 * sq.x * sq.y, ss.y);\n}\n\nvec3 ShStagGrid (vec2 p, vec2 g)\n{\n  vec2 q, sq, ss;\n  q = p * g;\n  if (2. * floor (0.5 * floor (q.y)) != floor (q.y)) q.x += 0.5;\n  sq = smoothstep (0.05, 0.1, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.3 * smoothstep (0.3, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.8 + 0.2 * sq.x * sq.y, ss.y);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, bgCol, vn, lVec, rg;\n  vec2 vf;\n  float dstObj, a, s, fFade;\n  bool fxz;\n  crRad = 2.;\n  crLen = 5.;\n  bgCol = mix (0.6 * vec3 (0.4, 0.4, 0.5), vec3 (0.21), smoothstep (-0.01, 0.01, rd.y));\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    cId = floor (ro / bSize);\n    SetEngConf ();\n    vn = ObjNf (ro);\n    vf = vec2 (0.);\n    fFade = exp (32. * min (0., 0.7 - dstObj / dstFar));\n    if (idObj == idFlr) {\n      if (vn.y > 0.99) {\n        col4 = vec4 (0.4, 0.4, 0.5, 0.1);\n        rg = ShGrid (ro.xz);\n        col4.rgb *= mix (1., rg.y, fFade) * (1. - 0.3 * Fbm2 (2. * ro.xz));\n        if (rg.x == 0.) vn.yz = Rot2D (vn.yz, rg.z * fFade);\n        else vn.yx = Rot2D (vn.yx, rg.x * fFade);\n        col4 *= (1. - 0.5 * smoothstep (12., 16., length (qHit.xz)));\n        vf = vec2 (32., 1.);\n      } else if (vn.y < -0.99) {\n        col4 = vec4 (vec3 (0.3) * (1. - 0.3 * smoothstep (3., 7.,\n           length (abs (qHit.xz) - 6.))), -1.);\n      } else {\n        col4 = vec4 (0.3, 0.3, 0.3, 0.1);\n        vf = vec2 (32., 1.);\n      }\n    } else if (idObj == idBase) {\n      col4 = vec4 (0.6, 0.3, 0.2, 0.1);\n      if (abs (vn.y) < 0.01) {\n        rg = ro;\n        rg.y += 0.5;\n        fxz = (abs (vn.x) > 0.99);\n        rg = ShStagGrid ((fxz ? rg.zy : rg.xy), vec2 (1., 2.));\n        col4.r *= rg.y;\n        col4.rgb *= 1. - 0.3 * Fbm2 (2. * (fxz ? ro.zy : ro.xy));\n        rg.xz *= sign (fxz ? vn.x : vn.z);\n        if (fxz) {\n          if (rg.x == 0.) vn.xy = Rot2D (vn.xy, rg.z);\n          else vn.xz = Rot2D (vn.xz, rg.x);\n        } else {\n          if (rg.x == 0.) vn.zy = Rot2D (vn.zy, rg.z);\n          else vn.zx = Rot2D (vn.zx, rg.x);\n        }\n      } else {\n        rg = ShGrid (ro.xz);\n        col4.r *= rg.y;\n        col4.rgb *= 1. - 0.3 * Fbm2 (2. * ro.xz);\n        if (vn.y > 0.99) {\n          if (rg.x == 0.) vn.yz = Rot2D (vn.yz, rg.z);\n          else vn.yx = Rot2D (vn.yx, rg.x);\n        }\n      }\n      vf = vec2 (32., 1.);\n    } else if (idObj == idCol) {\n      col4 = vec4 (0.8, 0.8, 0.75, 0.05);\n      vf = vec2 (32., 1.);\n    } else if (idObj == idCyl) {\n      col4 = vec4 (0.8, 0.8, 0.9, 0.3);\n      a = atan (qHit.z, - qHit.y) / (2. * pi);\n      if (abs (vn.x) > 0.99) {\n        col4.rgb *= 1. - 0.2 * Fbm2 (4. * qHit.yz);\n        col4.rgb *= (1. - 0.5 * SmoothBump (0.2, 0.4, 0.01, mod (16. * a + 0.5, 1.)) *\n           SmoothBump (0.05, 0.13, 0.01, 1. - length (qHit.yz) / 1.5));\n      } else {\n        col4.rgb *= 1. - 0.2 * Fbm2 (4. * vec2 (8. * a, qHit.x));\n        col4.rgb *= (1. - 0.5 * SmoothBump (0.03, 0.06, 0.01, 1. - abs (qHit.x) / 3.5));\n        a = mod (32. * a, 1.);\n        if (abs (qHit.x) < 3.3) vn.yz = Rot2D (vn.yz, 0.4 * SmoothBump (0.25, 0.75, 0.2, a) *\n           sign (a - 0.5));\n      }\n    } else if (idObj == idWhl) {\n      if (abs (vn.z) < 0.01) {\n        s = length (qHit.xy);\n        qHit.xy = vec2 (8. * atan (qHit.x, - qHit.y) / pi, qHit.z);\n        if (s > 4.1) {\n          s = mod (4. * qHit.z, 1.);\n          vn.z = -0.2 * SmoothBump (0.25, 0.75, 0.15, s) * sign (s - 0.5) * sign (ro.z);\n          vn = normalize (vn);\n        }\n      }\n      col4 = vec4 (0.5, 0.5, 0.55, 0.05) * (1. + 0.2 * Noisefv2 (128. * qHit.xy));\n    } else if (idObj == idSpk) {\n      col4 = 1.1 * vec4 (0.5, 0.5, 0.55, 0.2);\n    } else if (idObj == idCrnk) {\n      col4 = vec4 (0.5, 0.5, 0.6, 0.2);\n    } else if (idObj == idAx) {\n      col4 = vec4 (0.6, 0.4, 0.1, 0.3);\n    } else if (idObj == idPis) {\n      col4 = vec4 (0.5, 0.5, 0.2, 0.3);\n    } else if (idObj == idCrod) {\n      col4 = vec4 (0.6, 0.6, 0.5, 0.3);\n    } else if (idObj == idCylEnt) {\n      col4 = vec4 (0.7, 0.7, 0.8, 0.2) * (1. - 0.5 * step (length (qHit.yz), 0.33));\n    } else if (idObj == idValv) {\n      col4 = vec4 (0.7, 0.7, 0.8, 0.5) * (1. - 0.5 * step (0., vn.x) *\n         step (length (qHit.yz), 0.13));\n      vf = vec2 (32., 0.3);\n    } else if (idObj == idPipes) {\n      col4 = vec4 (0.6, 0.4, 0.1, 0.1);\n      vf = vec2 (32., 0.3);\n    } else if (idObj == idSup) {\n      col4 = vec4 (0.2, 0.4, 0.1, 0.05);\n      vf = vec2 (32., 1.);\n    } else if (idObj == idRail) {\n      col4 = vec4 (0.2, 0.4, 0.2, 0.1);\n      vf = vec2 (32., 0.2);\n    } else if (idObj == idLt) {\n      qHit.xz = smoothstep (0.05, 0.1, abs (qHit.xz));\n      col4 = vec4 (vec3 (1., 1., 0.8) * 0.5 * (1. - vn.y) * (0.7 + 0.3 * qHit.x * qHit.z), -1.);\n    }\n    if (col4.a >= 0.) {\n      if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n      lVec = normalize (vec3 (1., 1.3, 1.));\n      col = 0.2 * col4.rgb;\n      for (float sx = -1.; sx <= 1.; sx += 2.) {\n        for (float sz = -1.; sz <= 1.; sz += 2.) {\n          col += 0.5 * col4.rgb * max (dot (vn, lVec * vec3 (sx, 1., sz)), 0.) +\n             col4.a * pow (max (dot (normalize (lVec * vec3 (sx, 1., sz) - rd), vn), 0.), 64.);\n        }\n      }\n      col *= 0.7 + 0.3 * ObjSShadow (ro, vec3 (0., 1., 0.));\n    } else col = col4.rgb;\n    col = clamp (mix (bgCol, col, fFade), 0., 1.);\n  } else col = bgCol;\n  if (! colImg) col = pow (vec3 (1., 0.59, 0.18) * RgbToVal (col), vec3 (0.9));\n  if (marchImg) col = HsvToRgb (vec3 (0.7 * (1. - stepCnt / 180.), 1., 1.));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvs, ori, ca, sa;\n  float el, az, asp;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uvs = uv;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  bSize = vec3 (40., 20., 40.);\n  az = 0.;\n  el = -0.05 * pi;\n  colImg = false;\n  marchImg = false;\n  if (mPtr.z > 0. && mPtr.x > 0.4 && mPtr.y < -0.4) colImg = true;\n  if (mPtr.z > 0. && mPtr.x > 0.4 && mPtr.y > 0.4) marchImg = true;\n  if (mPtr.z > 0. && ! colImg && ! marchImg) {\n    az += 2. * pi * mPtr.x;\n    el += 0.7 * pi * mPtr.y;\n  } else {\n    az = 0.5 * pi * (2. * mod (floor (0.07 * tCur), 2.) - 1.) *\n       SmoothBump (0.2, 0.8, 0.1, mod (0.07 * tCur, 1.));\n  }\n  el = clamp (el, -0.4 * pi, 0.4 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -1.) + vec3 (0., 8., 3. * tCur);\n  asp = canvas.x / canvas.y;\n  uv.xy /= 1.9;\n  rd = vuMat * normalize (vec3 (2. * tan (0.5 * atan (uv.x / asp)) * asp, uv.y, 1.));\n  dstFar = 180.;\n  col = ShowScene (ro, rd);\n  if (! colImg && ! marchImg) {\n    uvs *= uvs;\n    col = mix (0.2 * vec3 (1., 0.59, 0.18), col, 1. - smoothstep (0.9, 1.,\n       length (uvs * uvs * uvs)));\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nfloat RgbToVal (vec3 c)\n{\n  return max (c.r, max (c.g, c.b));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, vec3 (37., 39., 41.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}