{
    "Shader": {
        "info": {
            "date": "1712325110",
            "description": "Yet another signed distance field visualisation.",
            "flags": 0,
            "hasliked": 0,
            "id": "XcVGRR",
            "likes": 2,
            "name": "Debug distance",
            "published": 3,
            "tags": [
                "sdf",
                "debug"
            ],
            "usePreview": 0,
            "username": "Zavie",
            "viewed": 138
        },
        "renderpass": [
            {
                "code": "/*\n\nThis shader proposes a function to display isolines for a distance field.\nThe line width should appear constant regardless of the distance scale.\n\n--\nZavie\n\n*/\n\n#define POSITIVE_DISTANCE_SPACE vec3(0.13, 0.62, 0.74)\n#define NEGATIVE_DISTANCE_SPACE vec3(0.01, 0.19, 0.28)\n#define ZERO_DISTANCE_ISO_LINE vec3(1.0, 0.72, 0.01)\n#define ISO_LINES vec3(0.56, 0.79, 0.9)\n\nvec3 debugDistance(vec3 iResolution, float d)\n{\n    float refWidth = iResolution.y / 1080.;\n\n    float dd1 = fwidth(d);\n    float width1 = 2.5 * dd1 * refWidth;\n    \n    float iso1 = smoothstep(-dd1, dd1, abs(fract(d) * 2. - 1.) - (1. - width1));\n\n    float dd5 = fwidth(5. * d);\n    float width5 = 0.75 * dd5 * refWidth;\n    float iso5 = smoothstep(-dd5, dd5, abs(fract(5.*d) * 2. - 1.) - (1. - width5));\n\n    float dd0 = fwidth(d);\n    float width0 = 3. * dd0 * refWidth;\n    float iso0 = smoothstep(-dd0, dd0, width0 - abs(d));\n\n    float isoLines = max(iso0, max(iso1, iso5));\n\n    vec3 background = (d > 0. ? POSITIVE_DISTANCE_SPACE : mix(NEGATIVE_DISTANCE_SPACE, ISO_LINES, 0.1));\n    vec3 lineColor = mix(ISO_LINES * (d > 0. ? 1. : 0.8), ZERO_DISTANCE_ISO_LINE, iso0);\n\n    return mix(background, lineColor, isoLines);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy * vec2(1., iResolution.y / iResolution.x);\n    vec2 c = vec2(0.5) * vec2(1., iResolution.y / iResolution.x);\n\n    float scale = mix(0.5, 10., sin(iTime * 0.25) * 0.5 + 0.5);\n    float d = length(uv - c) * scale - 1.;\n\n    vec3 colouredDistance = debugDistance(iResolution, d);\n\n    fragColor = vec4(colouredDistance, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}