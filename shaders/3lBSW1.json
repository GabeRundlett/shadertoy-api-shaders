{
    "Shader": {
        "info": {
            "date": "1565689310",
            "description": "Cool",
            "flags": 0,
            "hasliked": 0,
            "id": "3lBSW1",
            "likes": 3,
            "name": "luc",
            "published": 3,
            "tags": [
                "2ddistancefield"
            ],
            "usePreview": 0,
            "username": "JulesFouchy",
            "viewed": 669
        },
        "renderpass": [
            {
                "code": "// NOISE NOISE NOISE\n\n//\n// GLSL textureless classic 2D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec2 P)\n{\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return (2.3 * n_xy + 0.6)*0.7;\n}\n\n// end of NOISE NOISE NOISE\n\nfloat smoothMin( float a, float b, float k )\n{//https://iquilezles.org/articles/smin\n    float res = exp2( -k*a ) + exp2( -k*b );\n    return -log2( res )/k;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float PI = 3.141592653;\n\tfloat ratio = iResolution.x/iResolution.y;\n    vec2 pos = gl_FragCoord.xy/iResolution.y;\n    float puls = 0.12;\n    \n    float maxD = 0.4;\n    \n    float time = iTime + 8.0;\n    \n    vec2 pos1 = vec2( cnoise( vec2(time*puls,0.0) ) , cnoise( vec2(0.0,time*puls) ) );\n    vec2 pos2 = vec2( cnoise( vec2(0.0,time*puls+0.3) ) , cnoise( vec2(time*puls+0.3,0.0) ) );\n    \n\tfloat d1 = length( pos - pos1 ) ;\n    float d2 = length( pos - pos2 ) ;\n    float d = smoothMin(d1,d2,15.872);\n    vec3 backColour = vec3(0.003,0.005,0.055);\n    vec3 col1 = vec3(0.885,0.417,0.349);\n    vec3 col2 = vec3(0.725,0.447,0.885);\n    \n    float blendFactor = atan(d*34.184)/PI*2.0;\n    vec3 col = d1/(d1+d2) * col1 + d2/(d1+d2) * col2;\n    vec3 color = (1.0-blendFactor) * col  + blendFactor * backColour;\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}