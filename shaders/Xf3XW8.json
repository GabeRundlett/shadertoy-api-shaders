{
    "Shader": {
        "info": {
            "date": "1713879365",
            "description": "A simulation of gravity and the three body problem. When going fullscreen, click to reset the view. Sit back and relax while chaos unfolds...",
            "flags": 32,
            "hasliked": 0,
            "id": "Xf3XW8",
            "likes": 4,
            "name": "Three Body Problem Simulation",
            "published": 3,
            "tags": [
                "space",
                "planet",
                "orbit",
                "three",
                "gravity",
                "problem",
                "body"
            ],
            "usePreview": 0,
            "username": "oemfoe",
            "viewed": 115
        },
        "renderpass": [
            {
                "code": "float sdLineSquared(in vec2 iPoint, in vec2 iLine0, in vec2 iLine1) {\n\tvec2 diff = iPoint - iLine0;\n\tvec2 dir = iLine1 - iLine0;\n\tfloat t = dot(diff, dir) / (length(dir) * length(dir));\n\tt = clamp(t, 0.0, 1.0);\n\tvec2 oLinePoint = t * dir + iLine0;\n\treturn length(iPoint - oLinePoint);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv2 = fragCoord/iResolution.y;\n    uv2 -= .5;\n    uv2 *= zoom;\n    uv2 += .5;\n    vec2 body1 = vec2(_(PX1), _(PY1));\n    vec2 b1v = vec2(_(VX1), _(VY1));\n    vec2 body2 = vec2(_(PX2), _(PY2));\n    vec2 b2v = vec2(_(VX2), _(VY2));\n    vec2 body3 = vec2(_(PX3), _(PY3));\n    vec2 b3v = vec2(_(VX3), _(VY3));\n\n    // Output to screen\n    fragColor = texture(iChannel1, uv);\n    //fragColor += texture(iChannel0, uv);\n    \n    float d1 = sdLineSquared(uv2, body1, body1 + b1v * 100.);\n    fragColor.rgb += vec3(smoothstep(0.005, 0.001, d1));\n    \n    float d2 = sdLineSquared(uv2, body2, body2 + b2v * 100.);\n    fragColor.rgb += vec3(smoothstep(0.005, 0.001, d2));\n    \n    float d3 = sdLineSquared(uv2, body3, body3 + b3v * 100.);\n    fragColor.rgb += vec3(smoothstep(0.005, 0.001, d3));\n    \n    \n    vec3 field = vec3(1., 0., 0.) * smoothstep(0., 100., 1./pow(length(uv2 - body1), 2.));\n    field += vec3(1., 0., 1.) * smoothstep(0., 100., 1./pow(length(uv2 - body2), 2.));\n    field += vec3(1., 1., 0.) * smoothstep(0., 100., 1./pow(length(uv2 - body3), 2.));\n\n    \n    fragColor.rgb += vec3(pow(field.x, 0.5), pow(field.y, 0.5), pow(field.z, 0.5));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define SET(X,V) if (uv.x - 0.01 < X && uv.x + 0.01 > X) { fragColor = vec4(V, V, V, 1.); }\n#define SETV(P,N,V) SET(PXN, (V).x) SET(PYN, (V).y)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float x1 = texture(iChannel0, vec2(PX1, 0.)).x;\n    \n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    \n    if (iTime < 2. || iMouse.z > 0.) {\n        SET(PX1, 1.)\n        SET(PY1, 0.5)\n        \n        SET(VX1, -0.0005)\n        SET(VY1, 0.000866)\n        \n        SET(PX2, 1.3)\n        SET(PY2, 0.5 + 0.6 * 0.866);\n        \n        SET(VX2, 0.001)\n        SET(VY2, 0.0000)\n        \n        SET(PX3, 1.6)\n        SET(PY3, 0.5)\n        \n        SET(VX3, -0.0005)\n        SET(VY3, -0.000866)\n        return;\n    }\n    \n    vec2 body1 = vec2(_(PX1), _(PY1));\n    vec2 b1v = vec2(_(VX1), _(VY1));\n    vec2 body2 = vec2(_(PX2), _(PY2));\n    vec2 b2v = vec2(_(VX2), _(VY2));\n    vec2 body3 = vec2(_(PX3), _(PY3));\n    vec2 b3v = vec2(_(VX3), _(VY3));\n    \n    float G = 0.0000006;\n    \n    float D12 = length(body1 - body2);\n    float F12 = G / (D12 * D12);\n    float D13 = length(body1 - body3);\n    float F13 = G / (D13 * D13);\n    float D23 = length(body2 - body3);\n    float F23 = G / (D23 * D23);\n    \n    b1v = normalize(body2 - body1) * F12 + b1v;\n    b1v = normalize(body3 - body1) * F13 + b1v;\n    \n    b2v = normalize(body1 - body2) * F12 + b2v;\n    b2v = normalize(body3 - body2) * F23 + b2v;\n    \n    b3v = normalize(body1 - body3) * F13 + b3v;\n    b3v = normalize(body2 - body3) * F23 + b3v;\n    \n    body1 += b1v;\n    body2 += b2v;\n    body3 += b3v;\n    \n    \n    SET(PX1, body1.x);\n    SET(PY1, body1.y);\n    SET(VX1, b1v.x);\n    SET(VY1, b1v.y);\n    \n    SET(PX2, body2.x);\n    SET(PY2, body2.y);\n    SET(VX2, b2v.x);\n    SET(VY2, b2v.y);\n    \n    SET(PX3, body3.x);\n    SET(PY3, body3.y);\n    SET(VX3, b3v.x);\n    SET(VY3, b3v.y);\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float PX1 = 0.05;\nconst float PY1 = 0.10;\nconst float PX2 = 0.15;\nconst float PY2 = 0.20;\nconst float VX1 = 0.25;\nconst float VY1 = 0.30;\nconst float VX2 = 0.35;\nconst float VY2 = 0.40;\nconst float PX3 = 0.45;\nconst float PY3 = 0.50;\nconst float VX3 = 0.55;\nconst float VY3 = 0.60;\nconst float zoom = 2.;\n\n#define _(X) (texture(iChannel0, vec2(X, 0.5)).x)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv2 = fragCoord/iResolution.y;\n    uv2 -= .5;\n    uv2 *= zoom;\n    uv2 += .5;\n\n    // Output to screen\n    fragColor = texture(iChannel1, uv) * 0.9999;\n    \n    vec2 body1 = vec2(_(PX1), _(PY1));\n    vec2 b1v = vec2(_(VX1), _(VY1));\n    vec2 body2 = vec2(_(PX2), _(PY2));\n    vec2 b2v = vec2(_(VX2), _(VY2));\n    vec2 body3 = vec2(_(PX3), _(PY3));\n    vec2 b3v = vec2(_(VX3), _(VY3));\n    \n    if (length(uv2 - body1) < 0.005)\n        fragColor = vec4(1., 0., 0., 1.);\n    \n    if (length(uv2 - body2) < 0.005)\n        fragColor = vec4(1., 0., 1., 1.);\n    \n    if (length(uv2 - body3) < 0.005)\n        fragColor = vec4(1., 1., 0., 1.);\n        \n    if (iTime < 2. || iMouse.z > 0.)\n        fragColor = vec4(0.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}