{
    "Shader": {
        "info": {
            "date": "1451912142",
            "description": "Simple truchet Smith pattern.",
            "flags": 0,
            "hasliked": 0,
            "id": "4ddGzX",
            "likes": 11,
            "name": "Truchet Tiles, Smith",
            "published": 3,
            "tags": [
                "truchet",
                "smith"
            ],
            "usePreview": 0,
            "username": "4rknova",
            "viewed": 709
        },
        "renderpass": [
            {
                "code": "// by Nikos Papadopoulos, 4rknova / 2016\n// Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define ZOOM 10.\n#define WGHT .08\n\nfloat hash(vec2 p)\n{\n    return fract(sin(dot(p,vec2(127.1,311.7))) * 43758.5453123);\n}\n\nfloat df_circ(in vec2 p, in vec2 c, in float r)\n{\n    return abs(r - length(p - c));\n}\n\nfloat sharpen(in float d, in float w)\n{\n    float e = 1. / min(iResolution.y , iResolution.x);\n    return 1. - smoothstep(-e, e, d - w);\n}\n\nfloat df_pattern(vec2 uv)\n{\n    float l1 = sharpen(df_circ(uv, vec2(0), .5), WGHT);\n    float l2 = sharpen(df_circ(uv, vec2(1), .5), WGHT);\n    return max(l1,l2);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy * 2. - 1.) * ZOOM;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 st = floor(uv), p = fract(uv);\n    if (hash(st * floor(iTime+1.0)) >.5) p.x = 1. - p.x;\n    fragColor = vec4(vec3(df_pattern(p)), 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}