{
    "Shader": {
        "info": {
            "date": "1716717675",
            "description": "hoverboard wall",
            "flags": 0,
            "hasliked": 0,
            "id": "43cGzj",
            "likes": 20,
            "name": "hoverboard wall",
            "published": 3,
            "tags": [
                "cineshader",
                "hoverboard"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 376
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .0001\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define deg45 .707\n#define R45(p) (( p + vec2(p.y,-p.x) ) *deg45)\n#define Tri(p,s) max(R45(p).x,max(R45(p).y,B(p,s)))\n#define SUV(p) vec2(atan(p.x,p.z),acos(p.y))\n#define ZERO (min(iFrame,0))\n#define AA 1\n\nvec2 combine(vec2 val1, vec2 val2 ){\n    return (val1.x < val2.x)?val1:val2;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions2d/\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat baseBody(vec3 p, float w, float h, float thickness){\n    vec3 prevP = p;\n    float d = sdBox(p,vec3(w,h,thickness));\n    p.y-=h;\n    float d2 = max(abs(p.z)-thickness,length(p.xy)-w);\n    d = min(d,d2);\n    return d;\n}\n\nfloat boardItem0(vec3 p){\n    vec3 prevP = p;\n    float thickness = 0.02;\n    float w = 0.07;\n    float circleSpace = 0.023;\n    float d = sdBox(p,vec3(w,0.1,thickness));\n    p.x = abs(p.x)-(w+0.005);\n    p.y = abs(p.y)-circleSpace;\n    p.y = abs(p.y)-circleSpace;\n    p.y = abs(p.y)-circleSpace;\n    float d2 = max(abs(p.z)-(thickness+0.1),length(p.xy)-0.015);\n    d = max(-d2,d);\n    \n    p = prevP;\n    p.y = abs(p.y)-0.05;\n    d2 = max(abs(p.z)-(thickness+0.1),length(p.xy)-0.01);\n    d = max(-d2,d);\n    return d;\n}\n\nfloat smallItem(vec3 p){\n    vec3 prevP = p;\n    \n    float thickness = 0.02;\n    float w = 0.02;\n    float h = 0.025;\n    float d = sdBox(p,vec3(w,h,thickness));\n    p.y-=h;\n    float d2 = max(abs(p.z)-thickness,length(p.xy)-w);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.y-=0.025;\n    d2 = max(abs(p.z)-0.1,length(p.xy)-0.01);\n    d = max(-d2,d);\n    return d;\n}\n\nfloat boardItem1(vec3 p){\n    vec3 prevP = p;\n    float d = max(abs(p.z)-0.01,length(p.xy)-0.11);\n    float d2 = max(abs(p.z)-0.02,length(p.xy)-0.08);\n    p.xy*=Rot(radians(30.+30.*iTime*5.));\n    d2 = max(-(abs(p.x)-0.01),d2);\n    d = min(d,d2);\n    return d;\n}\n\nfloat boardItem2(vec3 p){\n    vec3 prevP = p;\n    float thickness = 0.02;\n    p.y = abs(p.y)-0.001;\n    p.x = abs(p.x)-0.07;\n    p.y-=0.11;\n    p.xy*=Rot(radians(30.));\n    float d = smallItem(p);\n    \n    p = prevP;\n    p.y = abs(p.y);\n    float d2 = max(abs(p.z)-thickness,length(p.xy)-0.13);\n    float d3 = max(abs(p.z)-(thickness+0.1),length(p.xy)-0.09);\n    d2 = max(-d3,d2);\n    \n    p.x = abs(p.x);\n    float a = radians(-50.);\n    d2 = max(dot(p,vec3(cos(a),sin(a),0.0)),d2);\n    \n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat boardItem3(vec3 p){\n    vec3 prevP = p;\n    float thickness = 0.02;\n    float w = 0.05;\n    float d = sdBox(p,vec3(w,0.22,thickness));\n    float d2 = sdBox(p,vec3(0.01,0.15,thickness+0.1));\n    d = max(-d2,d);\n    return d;\n}\n\nfloat bindingMounts(vec3 p){\n    vec3 prevP = p;\n    p.xy*=Rot(radians(45.));\n    float d = max(abs(p.z)-0.01,length(p.xy)-0.11);\n    p.z-=0.01;\n    float d2 = sdBox(p,vec3(0.04,0.08,0.01));\n    d = min(d,d2);\n    return d;\n}\n\nfloat hoverboardItems(vec3 p){\n    vec3 prevP = p;\n    p.y+=sin(iTime*1.2)*0.02;\n    float d = boardItem0(p-vec3(0.,0.02,-0.02));\n    \n    p = prevP;\n    p.y-=0.02;\n    p.y = abs(p.y);\n    float d2 = boardItem1(p-vec3(0.0,0.32,-0.02));\n    d = min(d,d2);\n    \n    d2 = boardItem2(p-vec3(0.0,0.32,-0.02));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.y-=0.02;\n    d2 = boardItem3(p-vec3(0.0,0.0,-0.01));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.y+=0.3;\n    d2 = bindingMounts(p-vec3(0.0,0.0,0.02));\n    d = min(d,d2);\n    return d;\n}\n\nvec2 GetDist(vec3 p) {\n    p.y-=iTime*0.2;\n    p.xy*=Rot(radians(90.));\n    vec3 prevP = p;\n    p.z -=sin(iTime*1.2)*0.03;\n    p.y-=iTime*0.2;\n    p.x = mod(p.x,0.7)-0.35;\n    p.y = mod(p.y,1.16)-0.58;    \n    \n    \n    float d = baseBody(p-vec3(0.,-0.05,0.0),0.16,0.47,0.013);\n    float d2 = baseBody(p-vec3(0.,-0.03,0.0),0.14,0.45,0.016);\n    float d3 = hoverboardItems(p);\n    \n    p = prevP;\n    p.z +=sin(iTime*1.2)*0.03;\n    p.y+=iTime*0.2;\n    p.x+=0.35;\n    p.y+=1.76;\n    p.yz*=Rot(radians(180.));\n    p.x = mod(p.x,0.7)-0.35;\n    p.y = mod(p.y,1.16)-0.58;\n    \n    float d4 = baseBody(p-vec3(0.,-0.05,0.0),0.16,0.47,0.013);\n    d = min(d,d4);\n    float d5 = baseBody(p-vec3(0.,-0.03,0.0),0.14,0.45,0.016);\n    float d6 = hoverboardItems(p);\n    d3 = min(d3,d6);\n    vec2 res = combine(vec2(d,2),combine(vec2(d2,0),vec2(d3,2)));\n    res = combine(res,vec2(d5,1));\n    return res;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n        \n        if(i<50){\n            dO.x += dS.x*0.38;\n        } else {\n            dO.x += dS.x;\n        }\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<3; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,10,-10));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float shadow = step(RayMarch(p+n*0.3,lightDir,1.0, 15).x,0.9);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*shadow*occ;\n    diffCol += col*vec3(1.0,1.0,0.9)*skyDiff*occ;\n    diffCol += col*vec3(0.3,0.3,0.3)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.)*occ; // spec\n        \n    return diffCol;\n}\n\n// the reflection code reference from the following: https://www.shadertoy.com/view/tsXSRs\nvec3 reflectionBg(vec2 uv){\n    const float pi = 3.14159;\n    return mix(vec3(0.05), vec3(2.), smoothstep(pi*0.35, pi*0.98, uv.y));\n}\n\nvec3 repeatBgItem(vec2 p, vec3 col){\n    vec2 prevP = p;\n    float r = 0.1;\n    p.x = abs(p.x)-0.1;\n    float d = length(p)-0.1;\n    p = prevP;\n    float d2 = B(p,vec2(r,r));\n    d = min(d,d2);\n    col = mix(col,vec3(0.3),S(d,0.0));\n    p = prevP;\n    p.x = abs(p.x)-0.1;\n    d = length(p)-0.06;\n    col = mix(col,vec3(1),S(d,0.0));\n    return col;\n}\n\nvec3 reatBgTex(vec2 p){\n    vec3 col = vec3(0.);\n    p*=5.;\n    p*=Rot(radians(30.));\n    vec2 prevP = p;\n    p.x+=iTime*0.1;\n    p.y = mod(p.y,0.5)-0.25;\n    p.x = mod(p.x,0.42)-0.21;\n    col = repeatBgItem(p,col);\n    \n    p = prevP;\n    p.x+=iTime*-0.1;\n    p.y+=0.25;\n    p.y = mod(p.y,0.5)-0.25;\n    p.x = mod(p.x,0.42)-0.21;\n    col = repeatBgItem(p,col);\n    return col;\n}\n\nfloat arrowTex(vec2 p){\n    vec2 prevP = p;\n    p.y*=-1.;\n    p.y-=0.1;\n    float d = Tri(p,vec2(0.05));\n    float d2 = B(p-vec2(0.,-0.06),vec2(0.03,0.027));\n    d = min(d,d2);\n    p.y+=0.155;\n    p.y = abs(p.y)-0.015;\n    p.y = abs(p.y)-0.015;\n    p.y = abs(p.y)-0.015;\n    d2 = B(p,vec2(0.03,0.01));\n    d = min(d,d2);\n    return d;\n}\n\nvec3 boardtex(vec2 p){\n    vec2 prevP = p;\n    vec3 col = vec3(1.);\n    col = reatBgTex(p);\n    \n    p.y = abs(p.y)-0.3;\n    p*=Rot(radians(45.));\n    p.y = abs(p.y)-0.07;\n    float d = abs(p.y)-0.02;\n    \n    p = prevP;\n    p*=Rot(radians(80.));\n    float d2 = abs(p.y)-0.02;\n    d = min(d,d2);\n    \n    col = mix(col,vec3(1.),S(abs(d)-0.005,0.0));\n    \n    p = prevP;\n    p*=Rot(radians(45.));\n    p.y+=iTime*0.1;\n    p.y+=0.1;\n    p.y=mod(p.y,0.24)-0.12;\n    d = arrowTex(p);\n    col = mix(col,vec3(1.2),S(d,0.0));\n    \n    return col;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    p.y-=iTime*0.2;\n    p.xy*=Rot(radians(90.));\n    if(mat == 0){\n        p.y-=iTime*0.2;\n        p.x = mod(p.x,0.7)-0.35;\n        p.y = mod(p.y,1.16)-0.58;\n        col = diffuseMaterial(n,rd,p,boardtex(p.xy));       \n    } else if (mat == 1){\n        p.y+=iTime*0.2;\n        p.x+=0.35;\n        p.y+=1.76;\n        p.x = mod(p.x,0.7)-0.35;\n        p.y = mod(p.y,1.16)-0.58;  \n        col = diffuseMaterial(n,rd,p,boardtex(p.xy));\n    } else if (mat == 2){\n        float IOR =\t1.309; //IOR:index of reflection\n        vec3 rdir = refract(-rd,n,1.0/IOR); \n        col = reflectionBg(SUV(rdir));\n        col = diffuseMaterial(n,rd,p,sqrt(col));\n    }\n    return col;\n}\n\nfloat cubicInOut(float t) {\n  return t < 0.5\n    ? 4.0 * t * t * t\n    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\n}\n\nfloat getTime(float t, float duration){\n    return clamp(t,0.0,duration)/duration;\n}\n\nvec3 cameraAnim(vec3 p){\n\n    float rotX = 0.;\n    float rotY = -10.;\n\n    float frame = mod(iTime,20.0);\n    float time = frame;\n\n    if(frame>=5. && frame<10.){\n        time = getTime(time-5.,0.6);\n\n        rotY = -10.+cubicInOut(time)*-10.;\n        rotX = cubicInOut(time)*-30.;\n    } else if(frame>=10. && frame<15.){\n        time = getTime(time-10.,0.6);\n        \n        rotY = -20.;\n        rotX = -30.+cubicInOut(time)*60.;\n    } else if(frame>=15.){\n        time = getTime(time-15.,0.6);\n\n        rotY = -20.+cubicInOut(time)*10.;\n        rotX = 30.+cubicInOut(time)*-30.;\n    }\n\n    p.xz*=Rot(radians(rotX));\n    p.yz*=Rot(radians(rotY));\n    return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0, -1.35);\n    if(iMouse.z>0.){\n        ro.yz *= Rot(m.y*3.14+1.);\n        ro.y = max(-0.9,ro.y);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        ro = cameraAnim(ro);\n    }\n    \n    vec3 col = vec3(.0);\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 rr = vec2(float(m),float(n))/float(AA);\n\n        uv =  ((fragCoord+rr)-.5*iResolution.xy)/iResolution.y;\n\n        vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n        vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n\n        if(d.x<MAX_DIST) {\n            vec3 p = ro + rd * d.x;\n            vec3 n = GetNormal(p);\n            int mat = int(d.y);\n            col = materials(mat,n,rd,p,col);\n        }\n    }   \n    \n    //col = reatBgTex(uv);\n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}