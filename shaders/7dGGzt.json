{
    "Shader": {
        "info": {
            "date": "1631936316",
            "description": "A function for ray tracing cubes repeated In one dimension. (no loops in the code)\nMove around with the mouse",
            "flags": 0,
            "hasliked": 0,
            "id": "7dGGzt",
            "likes": 6,
            "name": "Analytic domain repetition",
            "published": 3,
            "tags": [
                "raytracing",
                "domainrepetition",
                "shadows",
                "infinite"
            ],
            "usePreview": 0,
            "username": "NLIBS",
            "viewed": 326
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define EPS 0.001\n//#define BASIC\n\nfloat plane(vec3 ro, vec3 rd, float h) \n{\n    float t = (h-ro.y)/rd.y;\n    if (t<=0.) t = 1e5;\n    return t;\n}\n\nvec4 ray(vec3 ro, vec3 rd) \n{ \n    float t = plane(ro,rd,1.)*step(1.,ro.y);\n    vec3 n = vec3(0.,1.,0.);\n    \n    if (abs(ro.x)>.5-EPS) {\n        vec3 s = vec3(1.,sign(ro.x),1.);\n        float t2 = plane(ro.yxz*s,rd.yxz*s,.5-EPS)+EPS;\n        if (t2>=t) {\n            t = t2;\n            n = vec3(s.y,0.,0.);\n        }\n    }\n    \n    vec3 p = ro+rd*t;\n    float target = mix(p.z,floor(p.z+step(0.,rd.z)),mod(floor(p.z),2.));\n    float shift = (target-p.z)/rd.z;\n    t += shift;\n    if (abs(shift)>EPS) n = vec3(0.,0.,-sign(rd.z));\n    if (t<=0. || abs(ro.x+rd.x*t)>.5 || abs(ro.y+rd.y*t)>1.+EPS) t = 1e5;\n    \n    float t2 = plane(ro,rd,0.);\n    if (t2<t) {\n        t = t2;\n        n = vec3(0.,1.,0.);\n    }\n    \n    return vec4(t,n);\n}\n\nvoid mainImage( out vec4 O, in vec2 u )\n{\n    vec2 R   = iResolution.xy,\n         uv  = (2.*u-R)/R.x,\n         muv = -(2.*iMouse.xy-R)/R.x*PI*.5;\n    \n    muv = mix(vec2(.7,.3), muv, step(1.,iMouse.z));\n    //Camera\n    vec3 ro = vec3(muv.x*6.,2.,iTime),\n         rd = normalize(vec3(uv,1));\n         \n    //Add Mouse rotation\n    vec4 cs = vec4(cos(muv),sin(muv));\n    rd.yz = mat2(cs.y,cs.w,-cs.w,cs.y)*rd.yz;\n    rd.xz = mat2(cs.x,cs.z,-cs.z,cs.x)*rd.xz;\n    \n    vec3 col = vec3(0.);\n    \n    vec4 tn = ray(ro,rd);\n    vec3 p = ro+rd*(tn.x-EPS);\n    \n    vec3 ld = vec3(4.*sin(iTime),4.,iTime+6.)-p;\n    float d = length(ld)*0.05;\n    ld /= d;\n    \n    #ifdef BASIC\n    col = vec3(1.) * 0.5*(1.-sqrt(1.-min(0.01/(d*d),1.)));\n    #else\n    col = vec3(1.) * dot(tn.yzw,ld) * 0.5*(1.-sqrt(1.-min(0.01/(d*d),1.)));\n    vec4 tn2 = ray(p,ld);\n    if (tn2.x<1e4 || tn.x>1e4) col *= 0.;\n    #endif\n    \n    col = pow(max(1.-exp(-col),EPS),vec3(1./2.2));\n        \n    O = vec4(col,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}