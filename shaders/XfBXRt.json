{
    "Shader": {
        "info": {
            "date": "1706661475",
            "description": "Tried to implement some triangular filtering on a noise function, but I couldn't get it to interpolate the values smoothly, so I used the \"blocky\" interpolation to make something else.\nSet the \"SHOW_ME_THE_NOISE\" constant to 1 to see what I mean.",
            "flags": 0,
            "hasliked": 0,
            "id": "XfBXRt",
            "likes": 4,
            "name": "Low-res water",
            "published": 3,
            "tags": [
                "2d",
                "water",
                "lowres",
                "lowres"
            ],
            "usePreview": 0,
            "username": "ianertson",
            "viewed": 179
        },
        "renderpass": [
            {
                "code": "#define R iResolution.xy\n#define T (iTime*0.75)\n#define M_PI 3.14159265358979323846264338327950288\n#define TAU (M_PI*2.0)\n\n#define SHOW_ME_THE_NOISE 0\n\nfloat hash21(vec2 ip, float seed) {\n    uvec2 p = floatBitsToUint(ip);\n    uint s = floatBitsToUint(seed);\n    uvec2 k = ~p + ~s;\n    p ^= p << 17U; p ^= p >> 13U;\n    p ^= p << 5U;\n    p += (p ^ k) + p * k; p *= 1013U;\n    uint n = p.x * k.y + p.y + p.y * k.x + k.y;\n    return float(n) / float(0xFFFFFFFFU);\n}\n\nfloat noise(vec2 p, float s) {\n    vec2 id = floor(p);\n    vec2 lv = fract(p);\n    lv = lv * lv * (3.0 - 2.0 * lv);\n    const float t = 1.0;\n    float a = hash21(id + vec2(0, 0), s);\n    float b = hash21(id + vec2(-t, 0), s);\n    float c = hash21(id + vec2(t, 0), s);\n    float d = hash21(id + vec2(0, -t), s);\n    float e = hash21(id + vec2(0.0, t), s);    \n    float bc = mix(b, c, lv.x);\n    float de = mix(d, e, lv.y);\n    float bcde = mix(bc, de, 0.5);\n    return mix(a, bcde, 0.5);\n}\n\n\nvoid mainImage(out vec4 o, in vec2 fc) {\n  vec3 col = vec3(0.0);\n  vec2 uv = (fc-0.5*R.xy)/R.y;\n  \n  #if SHOW_ME_THE_NOISE\n  o = vec4(vec3(noise(uv*30., TAU)), 1.0);\n  return;\n  #endif\n  \n  vec2 buv = uv;\n  float t = T;\n  float c = mix(-0.5, 0.5, 0.5+0.5*cos(t)*smoothstep(0.0, 3.0, t));\n  float k = 1.0;\n  float Z = 0.1;\n  if (uv.x > c) {\n    t += 3.0492;\n    t *= 0.3;\n    uv.x -= 0.5;\n    if (uv.y >= -Z) {\n      col = mix(vec3(0.25, 0.76, 0.1), vec3(0.1, 0.59, 0.96), smoothstep(0.0, 0.25, uv.y));\n      k = 0.0;\n    }\n    \n    uv.x = (uv.x*(0.9+Z)) / (uv.y*10.);\n  } else { uv.x += 0.5; }\n  float sc = mix(0.5, 2.0, 0.5+0.5*sin(t-2.));\n  float n1 = noise((uv + 0.25*vec2(cos(t*0.5+0.01), sin(t*0.5-11.555)))*22.*sc , TAU);\n  float n2 = noise((0.01*(n1*2.0-1.0) + uv + 0.25*vec2(sin(t*0.5+0.003*n1), cos((t-7.7452)*0.5+0.003*n1)))*52.*sc , M_PI);\n  float n3 = noise((0.01*(n2*2.0-1.0) + uv + 0.25*vec2(cos((t+1.345)*0.5+0.003*n2), sin(t*0.5+0.003*n2)))*128.*sc , M_PI*TAU);\n  col += k*0.15*n1 * vec3(0.15, 0.51, 0.5);\n  col += k*0.75*n2 * vec3(0.19, 0.59, 0.76);\n  col += k*n3*0.69;\n  col /= 1.7;\n  col += float(buv.x > c) * 1.0 * smoothstep((1.0 / (Z*100.0))*0.5, 0.0, (abs(uv.y)/(Z*100.)));\n  col = max(vec3(0.0), mix(col, vec3(0.0), smoothstep(0.02, 0.0, abs(buv.x-c)))); \n  col = pow(col, vec3(1.0 / 2.2));\n  o = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}