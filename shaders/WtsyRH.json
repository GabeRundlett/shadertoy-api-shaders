{
    "Shader": {
        "info": {
            "date": "1591543611",
            "description": "1995 byte graphics entry for nova",
            "flags": 48,
            "hasliked": 0,
            "id": "WtsyRH",
            "likes": 4,
            "name": "Storage Room",
            "published": 3,
            "tags": [
                "reflect"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 416
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    fragColor = sqrt(fragColor/fragColor.w);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float box(vec3 p, vec3 d) {\n\tvec3 q = abs(p)-d;\n\treturn length(max(q,0.))+min(0.,max(q.x,max(q.y,q.z)));\n}\n\nfloat tex(vec3 p) {\n\t//marbly texture, also used for RNG\n\treturn sin(dot(sin(p*32.),vec3(2,3,1)))*cos(dot(cos(p*43.),vec3(3,1,2)))\n\t\t+sin(dot(sin(p*52.),vec3(2,3,1)))*cos(dot(cos(p*73.),vec3(3,1,2)));\n}\n\nfloat ref;\nfloat scene(vec3 p) {\n\tfloat tx = tex(p*100.)/5000.*(exp(tex(p)+tex(p*2.)+tex(p/5.))*.3+.6); //add very tiny bumps to the SDF itself, which will cause glossy reflections!\n\tfloat bx = -box(p, vec3(7.9));\n\tp = asin(sin(p));\n\tfloat sbx = box(p,vec3(.7,.6,.6))-.02;\n\tref = sbx>bx?sin(length(p)*20.):1.;\n\treturn min(bx, sbx)+tx;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    if (texelFetch(iChannel2, ivec2(32,1), 0).x > 0.) fragColor = vec4(0);\n\tfor (int j = iFrame; j < iFrame+1; j++) {\n\t\tvec2 uv = (gl_FragCoord.xy-iResolution.xy*vec2(.52,.46))/(iResolution.y*.92);\n        uv += vec2(tex(vec3(j+1)),tex(vec3(j)))/2./iResolution.y;\n\n\t\tvec3 cam = normalize(vec3(.5-dot(uv,uv)*.6,uv)) + vec3(0,tex(vec3(j)),tex(vec3(j+1)))*.01;\n\t\tvec3 p = vec3(-6.5,2,-5.2) - vec3(0,tex(vec3(j)),tex(vec3(j+1)))*.03;\n\t\tfloat atten = 1.;\n\t\tfloat dist;\n\t\tfor (int i = 0; i < 150; i++) {\n\t\t\tdist = scene(p);\n\t\t\tif (dist*dist<1e-6 && ref > -0.5) { //reflect within the raymarching loop!\n\t\t\t\tmat3 k = mat3(p,p,p)-mat3(0.01);\n\t\t\t\tvec3 n = normalize(scene(p)-vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n\t\t\t\tatten *= 1.-abs(dot(cam,n))*.98;\n\t\t\t\tcam = reflect(cam, n);\n\t\t\t\tdist = 0.1;\n\t\t\t}\n\t\t\tp += cam*dist;\n\t\t}\n\t\tfragColor += vec4(dist*dist<1e-6?(sin(vec3(0,5,4)-p*.2)*.2+1.2)*atten:vec3(0.01), 1);\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}