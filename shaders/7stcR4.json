{
    "Shader": {
        "info": {
            "date": "1653338441",
            "description": "Left, approximated (but incorrect) SDF to a Squircle. Right, correct SDF but brute-force and resolution dependent SDF. This is NOT a great way go blend between a circle and a square. For that use [url=https://www.shadertoy.com/view/7sdXz2]this[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "7stcR4",
            "likes": 28,
            "name": "Squircle - distance",
            "published": 3,
            "tags": [
                "2d",
                "distancefield",
                "sdf"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1075
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2022 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org\n\n// Left, incorrect SDF to a Squircle. Right, correct SDF with bisection root\n// finding. This is NOT a great way go blend between a circle and a square,\n// or that you can use https://www.shadertoy.com/view/7sdXz2\n\n// Gradient here: https://www.shadertoy.com/view/fs3yDM\n\n\nfloat sdSquircle(vec2 p, float n)\n{\n    // symmetries\n    p = abs(p); if( p.y>p.x ) p=p.yx;\n    \n    n = 2.0/n; // note the remapping in order to match the implicit versions\n\n    float xa = 0.0, xb = 6.283185/8.0;\n    for( int i=0; i<6; i++ )\n    {\n        float x = 0.5*(xa+xb);\n        float c = cos(x);\n        float s = sin(x);\n        float cn = pow(c,n);\n        float sn = pow(s,n);\n        float y = (p.x-cn)*cn*s*s - (p.y-sn)*sn*c*c;\n\n        if( y<0.0 ) xa = x; else xb = x;\n    }\n    // compute distance\n    vec2  qa = pow(vec2(cos(xa),sin(xa)),vec2(n));\n    vec2  qb = pow(vec2(cos(xb),sin(xb)),vec2(n));\n    vec2  pa = p-qa, ba = qb-qa;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba),0.0,1.0);\n\treturn length( pa - ba*h ) * sign(pa.x*ba.y-pa.y*ba.x);\n}\n\nfloat approx_sdSquircle(vec2 p, float n)\n{\n    // symmetries\n    p = abs(p); if( p.y>p.x ) p=p.yx;\n    \n    float w = pow(p.x,n) + pow(p.y,n);\n\n    // implicit\n    // return pow(w,1.0/n) - 1.0;\n\n    // linearlized implicit (taylor)\n    float b = 2.0*n-2.0;\n    float a = 1.0-1.0/n;\n    return (w-pow(w,a)) * inversesqrt(pow(p.x,b)+pow(p.y,b));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    p *= 1.4;\n    m *= 1.4;\n    \n     // animation\n    float n = 3.0 + 2.5*sin(6.283185*iTime/3.0);\n\n    // distance\n    float d = (p.y<p.x) ? sdSquircle(p, n) : \n                          approx_sdSquircle( p, n );\n    // coloring\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\tcol *= 1.0 - exp(-8.0*abs(d));\n    col *= 0.6 + 0.4*smoothstep(-0.5,0.5,cos(90.0*abs(d)));\n    \n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n    // mouse interaction\n    if( iMouse.z>0.001 )\n    {\n    d = (m.y<m.x) ? sdSquircle(m,n) : \n                    approx_sdSquircle(m,n);\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n    col *= smoothstep( 0.005, 0.010, abs(p.y-p.x) );\n    \n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}