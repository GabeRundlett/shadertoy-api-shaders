{
    "Shader": {
        "info": {
            "date": "1610060071",
            "description": "Tried to make a wormhole.\nI came up with this the chromatic aberration make it great to look at.",
            "flags": 32,
            "hasliked": 0,
            "id": "WtdcWf",
            "likes": 5,
            "name": "Chwormhole",
            "published": 3,
            "tags": [
                "torusraymarchingchromaticaboration"
            ],
            "usePreview": 0,
            "username": "Shapkofil",
            "viewed": 336
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float t = abs(sin(iTime));\n    float off = .6*(1.0 - t) + 0.08*t*hash11(iTime) + .1;\n    float r = texture(iChannel0, .03 * off + uv).x;\n    float g = texture(iChannel0, .04 * off + uv).x;\n    float b = texture(iChannel0, .05 * off + uv).x;\n    \n    \n    vec3 col = vec3(r,g,b);\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float sdTorus ( in vec3 pos, in vec2 t , out vec2 uv)\n{\n    vec2 q = vec2(length(pos.xz) - t.x, pos.y);\n    uv = vec2(atan(pos.x,pos.z), atan(q.x,q.y));\n    return length(q) - t.y;\n}\n\nfloat map ( in vec3 pos, out vec2 uv )\n{\n   float d = sdTorus(pos, vec2(1.0, .8), uv);\n   \n   return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.0);\n    \n    float an = 1.0*iTime;\n    \n    vec3 ta = .5*vec3(sin(an), 0, -cos(an));\n    vec3 ro = vec3(0, sin(an), 0);\n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww,vec3(0,1,0)));\n    vec3 vv = normalize(cross(uu,ww));\n    vec3 rd = normalize(p.x*uu + p.y*vv + .4*ww);\n    \n    float t = 0.0;\n    for(int i=0; i<200; i++)\n    {\n        vec3 pos = ro + t*rd;\n        \n        vec2 _;\n        float h = map( pos , _);\n        \n        if (h<.0005)\n            break;\n            \n        t += h;\n    }\n    \n    if( t < 20.0 )\n    {\n        vec3 pos = ro + t*rd;\n        float t = .5*iTime;\n        vec2 tuv;\n        map( pos, tuv );\n        vec2 ttuv = (tuv/3.1415)/2.0 + 0.5;\n    \n        vec2 tpa = vec2(8.0, 24.0);\n        float pa = sin(tpa.x*tuv.y + tpa.y*tuv.x); \n         \n        \n        float pa_id = hash11(floor(mod(tpa.x*ttuv.y+tpa.y*ttuv.x,tpa.x))/(tpa.x-1.0));\n        float grad = 2.0*mod(tpa.x*ttuv.x+tpa.y*ttuv.y,tpa.x)/tpa.x - 1.0;\n        float cars = smoothstep(-.002,.002,sin(grad + sign(hash11(pa_id)-.5)*6.0*t*pa_id) - \n                                hash11(pa_id));\n        float distb = smoothstep(-0.05,0.05,sin(tpa.x*tuv.x + tpa.y*tuv.y + sign(hash11(pa_id)-.5)*20.0*t) +\n                                 .9 + .1*sin(40.0*ttuv.y));\n        \n        col = vec3(distb);\n        col = cars * distb * vec3(smoothstep(-0.05,0.05,pa));\n    }\n    \n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float hash11(float n){return fract(sin(n) * 43758.5453123);}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}