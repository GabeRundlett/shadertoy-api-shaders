{
    "Shader": {
        "info": {
            "date": "1705541199",
            "description": "sum of point charges. Coded while I was supposed to be calculating these in physics class because I was bored :P",
            "flags": 0,
            "hasliked": 0,
            "id": "MclSzf",
            "likes": 5,
            "name": "electric field potential",
            "published": 3,
            "tags": [
                "tag"
            ],
            "usePreview": 0,
            "username": "01000001",
            "viewed": 156
        },
        "renderpass": [
            {
                "code": "const float scale = 20.;\n\nconst int n = 4;\nvec3 charges[n] = vec3[n](\n\n    vec3(5.5, 5.5, 5),\n    vec3(-5, -5, -5),\n    vec3(15, -5, 5),\n    vec3(-15.5, -5.5, -10)\n\n);\n\nvec2 field(vec2 p){\n\n    vec2 sum = vec2(0);\n    \n    for (int i = n; i-->0;){\n        sum += charges[i].z*normalize(p-charges[i].xy)/(length(p-charges[i].xy)*length(p-charges[i].xy));\n    }\n    \n    return (sum);\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 r = iResolution.xy;\n    vec2 uv = (2.*U-r)/r.y * scale;\n    \n\n    charges[1].xy = vec2(sin(iTime*.5), cos(iTime*1.2))*5.5;\n    charges[2].xy = vec2(sin(iTime*1.3), cos(iTime*.8))*10.;\n\n    float x = smoothstep(sqrt(length(field(uv))), .0, mod(log(length(field(uv))), 1.));\n    \n    // Fabrice's improvement \n    x = sin(5.*log(length(field(uv))));\n    x = 1. - abs(x) / fwidth(x);\n    // ^ this is awesome, tysm!\n    \n    \n    O = vec4(sqrt(x));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}