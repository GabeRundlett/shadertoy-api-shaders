{
    "Shader": {
        "info": {
            "date": "1532210013",
            "description": "Use this shader to ask questions to the community about the challenge or the competition. \n\nMore info : [url]https://www.shadertoy.com/events/competition2018[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "MttczN",
            "likes": 12,
            "name": "[SH18] The Human Challenge",
            "published": 3,
            "tags": [
                "challenge",
                "sh18"
            ],
            "usePreview": 0,
            "username": "shadertoy",
            "viewed": 4776
        },
        "renderpass": [
            {
                "code": "// Simple Bitmap Text by Gerard Geer\n// License: Creative Commons CC0 1.0 Universal (CC-0) \n// Modification by iq to use integer arithmetic, arrays and branches when appropiate\n\nconst int font[] = int[](\n 0x69f99, 0x79797, 0xe111e, 0x79997, 0xf171f, 0xf1711, 0xe1d96, 0x99f99, \n 0xf444f, 0x88996, 0x95159, 0x1111f, 0x9f999, 0x9bd99, 0x69996, 0x79971,\n 0x69b5a, 0x79759, 0xe1687, 0xf4444, 0x99996, 0x999a4, 0x999f9, 0x99699,\n 0x99e8e, 0xf843f, 0x6bd96, 0x46444, 0x6942f, 0x69496, 0x99f88, 0xf1687,\n 0x61796, 0xf8421, 0x69696, 0x69e84, 0x66400, 0x0faa9, 0x0000f, 0x00600,\n 0x0a500, 0x02720, 0x0f0f0, 0x08421, 0x33303, 0x69404, 0x00032, 0x00002,\n 0x55000, 0x00000, 0x00202, 0x42224, 0x24442);\n\nconst ivec2 MAP_SIZE = ivec2(4,5);\n\n\nint drawChar( in int char, in vec2 pos, in vec2 size, in vec2 uv )\n{\n    uv = vec2(MAP_SIZE)*(uv-pos)/size;\n\n    ivec2 iuv = ivec2(round(uv));\n    \n    if( iuv.x<0 || iuv.x>MAP_SIZE.x-1 ||\n        iuv.y<0 || iuv.y>MAP_SIZE.y-1 ) return 0;\n\n    int index = MAP_SIZE.x*iuv.y + iuv.x;\n    \n    return (font[char]>>index)&1;\n\n}\n\n//------------------------------------------------------------------\n\nvec2  charSize;\nfloat spaceSize;\nvec2  charPos;\nint   chr;\n\n#define DC(a) chr += drawChar( a, charPos, charSize, uv); charPos.x += spaceSize;\n\n#define _A DC(0)\n#define _B DC(1)\n#define _C DC(2)\n#define _D DC(3)\n#define _E DC(4)\n#define _F DC(5)\n#define _G DC(6)\n#define _H DC(7)\n#define _I DC(8)\n#define _J DC(9)\n#define _K DC(10)\n#define _L DC(11)\n#define _M DC(12)\n#define _N DC(13)\n#define _O DC(14)\n#define _P DC(15)\n#define _Q DC(16)\n#define _R DC(17)\n#define _S DC(18)\n#define _T DC(19)\n#define _U DC(20)\n#define _V DC(21)\n#define _W DC(22)\n#define _X DC(23)\n#define _Y DC(24)\n#define _Z DC(25)\n#define _0 DC(26)\n#define _1 DC(27)\n#define _2 DC(28)\n#define _3 DC(29)\n#define _4 DC(30)\n#define _5 DC(31)\n#define _6 DC(32)\n#define _7 DC(33)\n#define _8 DC(34)\n#define _9 DC(35)\n#define _APST DC(36)\n#define _PI   DC(37)\n#define _UNDS DC(38)\n#define _HYPH DC(39)\n#define _TILD DC(40)\n#define _PLUS DC(41)\n#define _EQUL DC(42)\n#define _SLSH DC(43)\n#define _EXCL DC(44)\n#define _QUES DC(45)\n#define _COMM DC(46)\n#define _FSTP DC(47)\n#define _QUOT DC(48)\n#define _BLNK DC(49)\n#define _COLN DC(50)\n#define _LPAR DC(51)\n#define _RPAR DC(52)\n\nvoid Start( void )\n{\n    chr = 0;\n}\n\nfloat End( void )\n{\n    return float(chr);\n}\n\n\nvoid SetSize( float size )\n{\n    charSize = size*vec2(MAP_SIZE)/float(MAP_SIZE.x);\n    spaceSize = charSize.x*1.25;\n}\n\nvoid SetPos( in vec2 pos )\n{\n    charPos = pos;\n}\n\n//===============================================================\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord / iResolution.y;\n    \n\n    Start();\n    \n    SetSize( 0.06 );\n\tSetPos( vec2(0.12, 0.85) );\n    \n    _S _H _A _D _E _R _T _O _Y   _BLNK   _C _O _M _P _E _T _I _T _I _O _N\n    \n    SetSize( 0.1 );\n\tSetPos( vec2(0.45, 0.45) );\n\n    _QUOT _H _U _M _A _N _QUOT\n        \n    float txt = End();        \n    \n\tfragColor = vec4(txt,txt,txt,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}