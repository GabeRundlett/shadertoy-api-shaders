{
    "Shader": {
        "info": {
            "date": "1648283226",
            "description": "Mandelbrot set is mapped to the Riemann sphere via Stereographic projection, rotated it and mapped back to the complex plane.",
            "flags": 0,
            "hasliked": 0,
            "id": "flXcz2",
            "likes": 7,
            "name": "Mandelbrot on Riemann sphere",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "sphere",
                "projection",
                "stereographic",
                "riemann"
            ],
            "usePreview": 0,
            "username": "Fraktoler",
            "viewed": 334
        },
        "renderpass": [
            {
                "code": "vec2 cis(float theta) {\n    //Euler's formula\n    return vec2(cos(theta), sin(theta));\n}\n\nvec2 mul(vec2 z, vec2 w) {\n    //Complex multiplication\n    return z.x * w + z.y * vec2(-w.y, w.x);\n}\n\nvec3 rotate(vec3 p, vec3 rot) {\n    vec2 v = mul(p.yz, cis(rot.x));\n    vec3 p_prime = vec3(p.x, v.xy);\n    v = mul(p_prime.xz, cis(rot.y));\n    p_prime = vec3(v.x, p_prime.y, v.y);\n    v = mul(p_prime.xy, cis(rot.z));\n    p_prime = vec3(v.xy, p_prime.z);\n    return p_prime;\n}\n\nvec2 nearestObject(vec3 ro, vec3 rd) {\n    // Outputs vec2(nearest distince to object, type of object)\n\n    //https://en.wikipedia.org/wiki/Line%E2%80%93plane_intersection\n    float planeDist = -ro.z / rd.z;\n\n    //https://en.wikipedia.org/wiki/Line%E2%80%93sphere_intersection\n    float b = dot(rd, ro);\n    float delta = b * b - dot(ro, ro) + 1.0;\n    if (delta < 0.0) {\n        return vec2(planeDist, 0.0);\n    } else {\n        float sphereDist = sqrt(delta);\n        sphereDist = min(sphereDist, -sphereDist) - b;\n        if (planeDist < 0.0) {\n            return vec2(sphereDist, 1.0);\n        } else {\n            if (planeDist < sphereDist) {\n                return vec2(planeDist, 0.0);\n            } else {\n                return vec2(sphereDist, 1.0);\n            }\n        }\n    }\n}\n\nfloat DE(vec3 p) {\n    return min(length(p) - 1.0, p.z);\n}\n\nfloat raymarch(vec3 ro, vec3 rd) {\n    float max_dist = 1000.0;\n    float min_dist = 0.0001;\n    float dist = 0.0;\n    float steps = 0.0;\n    for (int m = 0; m < 96; m++) {\n        vec3 p = ro + dist * rd;\n        float DE = DE(p);\n        dist += DE;\n        if (dist > max_dist || DE < min_dist) break;\n        steps += 1.0;\n    }\n    return steps;\n}\n\nfloat mandelbrot(vec2 c) {\n    vec2 z = c;\n    float k = 0.0;\n    for (int i = 0; i < 50; i++) {\n        if (dot(z, z) > 4.0) break;\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n        k += 1.0;\n    }\n    return k;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.x - vec2(0.5, iResolution.y / iResolution.x * 0.5)) * 4.0;\n    \n    vec3 camAngle = vec3(-0.5, 0.0, iTime * 0.2);\n    vec3 ro = rotate(vec3(0.0, -3.0, 0.0), camAngle);\n    vec3 rd = rotate(normalize(vec3(uv.x, 1.0, uv.y)), camAngle);\n    vec3 angle = vec3(iTime * 0.5, 0.0, 0.0);\n    \n    //https://en.wikipedia.org/wiki/Stereographic_projection#First_formulation\n    vec2 nearest = nearestObject(ro, rd);\n    vec3 p = ro + nearest.x * rd;\n    float iter = 0.0;\n    vec3 sphere = vec3(0.0);\n    float product = 0.0;\n    if (nearest.y == 0.0) {\n        product = dot(p.xy, p.xy);\n        sphere = rotate(vec3(2.0 * p.xy, product - 1.0) / (product + 1.0), angle);        \n        iter = mandelbrot(sphere.xy / (1.0 - sphere.z));\n    } else {\n        sphere = rotate(p, angle);\n        iter = mandelbrot(sphere.xy / (1.0 - sphere.z));\n    }\n    \n    if (nearest.x < 0.0) {\n        fragColor = vec4(vec3(0.0), 1.0);\n    } else {\n        vec3 col = vec3(iter / 50.0 - raymarch(ro, rd) / 128.0);\n\n        // Output to screen\n        fragColor = vec4(col, 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}