{
    "Shader": {
        "info": {
            "date": "1679727014",
            "description": "This is a fork of my previous shader here:\n[url]https://www.shadertoy.com/view/dscSRH[/url]\nA huge thanks to Fabrice Neyret and Xor for help in golfing and shading. ",
            "flags": 64,
            "hasliked": 0,
            "id": "cstSWH",
            "likes": 10,
            "name": "RayTrace Flurry - 476 chars",
            "published": 3,
            "tags": [
                "reflection",
                "motionblur",
                "raytrace",
                "short"
            ],
            "usePreview": 1,
            "username": "GregRostami",
            "viewed": 326
        },
        "renderpass": [
            {
                "code": "// 476 chars - Sith Lord Fabrice once again uses the FORCE!!\n#define v vec3//\n#define S(x)                                                   \\\n    b  = dot(D, x-P),                                          \\\n    b -= sqrt( b*b - dot(P-x, P-x) + r*r),                     \\\n    b > 0. && b < t ? t = b, p = P + t*D, n = normalize(p - x) : n;//\n#define L(n,k,s,y)                                             \\\n    for (i = 0.; i++ < n; )                                    \\\n        a = i/n * 6.28 + k*T,                                  \\\n        S( s * v(cos(a), y, sin(a)) );\n    \nvoid mainImage( out vec4 o, vec2 u ) {\n    float t, b, l=0., r, i, a, \n         T = iTime   \n         // + texture(iChannel0,u/1024.).r * .015 //  Remove the \"//\" comment if you want motion blur\n           ;\n    v R = iResolution, p, n,\n      P = -v(0, 2, 4),                // Camera position\n      D = normalize( v(u+u, R) - R ); // Camera direction\n    \n    for (o *= l; o.a++ < 8.; P = p )  // The ray reflects 8 times\n     {\n        t = r = 96.;                  // Radius of large spheres is 60 (the walls) \n        L(6.,.1,99.,0)                // Rotating 6 walls (you can change the 6.)\n        S( v(0,-99,0) )               // Floor      \n        r = .9; S( v(0,-2,0) )        // Center large sphere\n        r = .17 ;                     // Set the radius of small spheres\n        L(60.,.5,1.8,.5*sin (T+i*.05*T)-1.) // The 60 small spheres\n        a = dot (n, D);\n        D -= 2.* n*a;                 // D = reflect(D, n)\n        l += t;\n        o += a*a *1.37 / l;           // Shading calculations\n        o.rgb *= 1. - n*n/l;\n     }  \n} \n\n\n\n// 579 chars - Original shader\n/*\n#define v vec3\n#define S(x)                                                   \\\n    b = dot(D, P-x),                                           \\\n    b = -sqrt( b*b - dot(P-x, P-x) + r*r) - b,                 \\\n    b > 0. && b < t ? t = b, p = P + t*D, n = normalize(p - x) : n;\n    \nvoid mainImage( out vec4 o, vec2 u ) {\n    float t, b, l=0., r, i, a, A,\n       //T = iTime;                                      // Use this T if you don't want motion blur.\n         T = iTime + texture(iChannel0,u/1024.).r * .02; // Use this T if you want motion blur.\n          \n    v R = iResolution, p, n, N,\n         V = v(63, 0, 0),\n         P = -v(0, 2, 4),\n         D = normalize( v( u+u, R) - R  );\n    \n    for (o *= 0.; R.z++ < 9.;\n        o += b*b, o.rgb *= 1. - n*n/l){\n        t = r = 60.;\n        \n        for (i = 0.; i++ < 6.; a = i/6. * 6.28)        //The rotating walls\n            S(63. * v(cos(a + .1*T),0, sin(a +.1*T)));\n        S( -V.yxz )          // Floor\n      //S(  vec3 (0,60, 0) ) // ceiling\n        \n        r = .9;\n        S( v(0,-2,0))\n        \n        A = 60.;     // The 60 small spheres\n        r = .17 ;\n        for (i = 0.; i++ < A; a = i/A * 6.28)\n            S(1.8 * v(cos(a + .5*T), .5*sin (T+(i*.05*T))-1., sin(a +.5*T)));\n        \n        l += t;\n        b = dot (n, D) * .37 / sqrt(l);\n        P = p + n / 1e4;\n        D = reflect(D, n);\n        }\n\n    o /= .1;\n}\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 32866,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/armandox-1/jean-michel-jarre-industrial-revolution-overture-armandox-revolution-remix"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}