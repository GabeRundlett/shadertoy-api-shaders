{
    "Shader": {
        "info": {
            "date": "1647008119",
            "description": "not happy with the colors + messy code. the hole when it squashes is actually a bug lol\n\n2D version here: https://www.shadertoy.com/view/ss2BWG\nalternated and layered ^",
            "flags": 0,
            "hasliked": 0,
            "id": "7d2BWG",
            "likes": 12,
            "name": "Little Basket",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 266
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nvec3 face(vec3 p) {\n     vec3 a = abs(p);\n     return step(a.yzx, a.xyz)*step(a.zxy, a.xyz)*sign(p);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec3 angleMod(vec3 p, in float r) {\n    float a = pi / r;\n    \n    float a2 = mod(atan(p.z, p.x) + a, 2. * a) - a;\n    \n    p.xz = length(p.xz) * vec2(cos(a2), sin(a2));\n    \n    return p;\n}\n\nvec3 getRo() {\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 1.82, -3.5 - (0.15 + 0.15 * thc(3., 0.5 * iTime)));\n    //ro.yz *= Rot(-m.y*3.14+1.);\n    //ro.xz *= Rot(-m.x*6.2831);\n    return ro;\n}\n\nfloat GetDist(vec3 p) {\n    p.xz *= Rot(-0.1 * iTime);\n    vec3 op = p;\n   // p *= 1.5;\n   //p *= 0.8;\n    //p.xz *= 0.5 + 0.3 * thc(1., iTime - cos(1.2 * p.y - 0.5 * iTime) + p.y);\n    p.xz *= 1.3;\n    p.xz /= abs(thc(1., 0.8 * p.y));\n\n    float n = 21.;\n    float r = 2. + (0.25 + 0.25 * thc(6., 0.5 * iTime));// * thc(1., p.y);//sqrt(abs(1. - p.y * p.y));\n\n    vec3 q = p;\n    //q.xz *= Rot(0.5 * pi / n); // if n is even\n    q = angleMod(q, 2. * n);\n    q.x -= r;\n    float w = 0.025;\n\n    float d = length(q.xz) - w;\n    \n    float sc = 1.;\n    float i = 1.;\n    p.y = fract(p.y) - 0.5;\n    float m = 0.25;//0.15 + 0.1 * cos(q.y + iTime);\n    // bad way of doing it, but it works! :)\n    for (int j = 0; j < 4; j++) {\n        i *= sign(p.y);\n        p.y = abs(p.y) - m;\n        m *= 0.5;\n    }\n\n    float d1 = length(p.xz) - r;\n    float a = atan(p.x, p.z);\n    float d2 = length(vec2(d1, p.y) - vec2(2. * w * cos(n * a + i * pi/2.), 0)) - w;\n\n    float d3 = length(vec2(d1, op.y - 1.4)) - w;\n\n   // float \n\n   //d2 *= 0.05;\n    d2 = min(d2, d);\n    d2 *= 0.08;\n    d2 = max(d2, op.y - 1.4);\n    d2 = max(d2, -op.y - 1.4);\n    d2 = min(d2, d3);\n    \n    d2 = min(d2, op.y * (1. + 0.2 * cos(length(op.xz) - iTime))+ 1.7);\n    \n    return d2;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n    float s = sign(z);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if (s != sign(dS)) { z *= 0.5; s = sign(dS); }\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nfloat getLight(vec3 p) {\n    vec3 lp = vec3(5. * cos(iTime), 4, 5. * sin(iTime));\n    float l = length(lp - p);\n    if (RayMarch(p, lp - p, 1.) < l) return 0.;\n    \n    return 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = getRo();\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    float IOR = 1.05;\n    \n    vec3 p = ro + rd * d;\n    if(d<MAX_DIST) {\n        \n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        vec3 pIn = p - 4. * SURF_DIST * n;\n        vec3 rdIn = refract(rd, n, 1./IOR);\n        float dIn = RayMarch(pIn, rdIn, -1.);\n        \n        vec3 pExit = pIn + dIn * rdIn;\n        vec3 nExit = -GetNormal(pExit); // *-1.; ?\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n        \n        float fresnel = pow(1.+dot(rdIn, nExit), 5.);\n        //col += fresnel;\n        float fresnel2 = pow(1.+dot(rd, n), 1.); \n        col.rg += 0.75 * fresnel2;\n        col *= 0.7 + 0.3 * n.y;\n       \n        col = clamp(col, 0., 1.);\n       \n        col -= 0.4 * cross(col, n);\n       \n        if (p.y > -1.4) {\n            //col.r = 0.;\n            float iy = floor(8. * p.y) + 0.5;\n            iy /= 8.;\n            col *= 0.4 * iy + 0.5;\n       \n        }\n        vec3 e = vec3(1);\n        vec3 pal = pal(0.1 * log(length(p.xz)), e, e, e, 0.4 * vec3(0,1,2)/3.);\n        col *= pal;\n      //  col = mix(col, pal, exp(-4. * length(p.xz)));\n        \n       // col *= getLight(p - 30. * SURF_DIST * n);\n       //col = clamp(col,0.,1.);\n        //want to add shadows + light\n        // + curve into basket maybe\n    \n    }\n    col = mix(vec3(0), col, exp(-0.1 * length(p)));\n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}