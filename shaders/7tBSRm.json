{
    "Shader": {
        "info": {
            "date": "1627308512",
            "description": "Fracts",
            "flags": 0,
            "hasliked": 0,
            "id": "7tBSRm",
            "likes": 0,
            "name": "Fractals practice v01",
            "published": 3,
            "tags": [
                "fracts"
            ],
            "usePreview": 0,
            "username": "Endrju",
            "viewed": 125
        },
        "renderpass": [
            {
                "code": "#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nvec3 ColsVecBase = vec3(.65, 0.61, .48);\nvec3 ColsContrast = vec3(-.9, .3, -.8);\n\nfloat velocity = 0.1;\nfloat RotVal = 25.;\nfloat Close_Up = .25;\nfloat CosBaseStructure = cos(.02);\nfloat SinBaseStructure = sin(.11);\nfloat StructuralMultiplier = 2.1;\nfloat BuildingBase = 1.22;\nfloat StructDiff = 0.37;\nfloat Noise = .005;\nfloat FractStructurization = 41.92;\nfloat ColChangeA = 13.;\nfloat ColChangeB = 16.;\nfloat Brightness = 1.35;\nfloat OverallColPower = .95;\nfloat ColComputingBase = 1.75;\nfloat SS_Begin = 0.;\nfloat SS_End = 12.;\nfloat ColStrength = .65;\nfloat DirX = 1.15;\nfloat DirY = 2.;\n\nint NumInterations = 26;\n\nbool UseSin = false;\n\nfloat CalcStructure(vec2 uv, vec2 bsv)\n{\n    float ColStep = 0.;\n    \n    for(int i = 0; i < NumInterations; i++)\n    {\n        uv *= BuildingBase;\n        uv = abs(uv);\n    \tuv -= StructDiff;\n    \tuv -= bsv * min(0., dot(uv, bsv)) * 2.;\n        uv.y += UseSin ? sin(uv.x * FractStructurization) * Noise : cos(uv.x * FractStructurization) * Noise;\n        \n        ColStep += dot(uv, uv);\n    }\n    \n    return ColStep;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float TimeStep = iTime * velocity;\n    \n    vec2 uv = vec2(fragCoord.xy - RotVal * iResolution.xy) / iResolution.y;\n    uv += vec2(TimeStep * DirX, TimeStep * DirY);\n    uv *= rot(RotVal);\n    uv = fract(uv * Close_Up) - .5;\n    uv = abs(uv);\n    \n    vec2 BasicStructureVec = vec2(CosBaseStructure, SinBaseStructure);\n    \n    float DotVal = dot(uv, BasicStructureVec);\n    \n    uv -= BasicStructureVec * max(0., DotVal) * StructuralMultiplier;\n    \n    float ColorStep = CalcStructure(uv, BasicStructureVec);\n    \n    vec3 Color = 1. - (.5 + ColStrength * cos(ColsVecBase *\n    (ColorStep * ColChangeA + DotVal * ColChangeB) + ColsContrast));\n    \n    Color *= max(smoothstep(SS_Begin, SS_End, abs(uv.y)), OverallColPower);\n    Color = pow(Color * Brightness, vec3(ColComputingBase));\n    \n    fragColor = vec4(1. - exp(-Color), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}