{
    "Shader": {
        "info": {
            "date": "1461002534",
            "description": "Fur Space 2",
            "flags": 0,
            "hasliked": 0,
            "id": "ldtSzl",
            "likes": 14,
            "name": "Fur Space 2",
            "published": 3,
            "tags": [
                "space",
                "fur",
                "2"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 909
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2015 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\nconst vec3 ld = vec3(0.,1., .5);\n\nfloat t = 0., ts = 0.;\n\nmat3 getRotZMat(float a){return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\n\nfloat df(vec3 p)\n{\n\tp.x += sin(p.z*1.2);\n    p.y += cos(p.z*.2) * sin(p.x*.8);\n\tp *= getRotZMat(p.z*1.8+sin(p.x)+cos(p.y));\n    p.xy = mod(p.xy, 0.8) - 0.4;\n\treturn length(p.xy);\n}\n\nvec3 nor( vec3 p, float prec )\n{\n    vec2 e = vec2( prec, 0. );\n    vec3 n = vec3(\n\t\tdf(p+e.xyy) - df(p-e.xyy),\n\t\tdf(p+e.yxy) - df(p-e.yxy),\n\t\tdf(p+e.yyx) - df(p-e.yyx) );\n    return normalize(n);\n}\n\nvec3 lighting(vec3 p, vec3 lp, vec3 rd, float prec) \n{\n    vec3 l = lp - p;\n    float d = max(length(l), 0.01);\n    float atten = .8-exp( -0.01*d*d );\n    vec3 n = nor(p, prec);\n    float fre = pow(clamp(1.0 + dot(n, rd), 0.0, 1.0), 2.0);\n    vec3 lin = vec3(0.08,0.32,0.47);\n    lin += 2.5*fre*vec3(1);\n    return lin * atten;\n}\n\n//--------------------------------------------------------------------------\n// Grab all sky information for a given ray from camera\n// from Dave Hoskins // https://www.shadertoy.com/view/Xsf3zX\nvec3 GetSky(in vec3 rd, in vec3 sunDir, in vec3 sunCol)\n{\n\tfloat sunAmount = max( dot( rd, sunDir), 0.0 );\n\tfloat v = pow(1.0-max(rd.y,0.0),6.);\n\tvec3  sky = vec3(0.5,0.49,0.72);\n\tsky = sky + sunCol * sunAmount * sunAmount * .25;\n\tsky = sky + sunCol * min(pow(sunAmount, 800.0)*1.5, .3);\n\treturn clamp(sky, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 si = iResolution.xy;\n\tvec2 uv = (2.*fragCoord.xy-si)/min(si.x, si.y);\n\t\n\tt = iTime;\n\tts = sin(t)*.5+.5;\n    \n    vec3 ro = vec3(1.2*vec2(cos(t*.5),sin(t*.5)),t*2.);\n\n    vec3 cu = vec3(0,1,0);\n    vec3 co = ro + vec3(0.,0,1);\n\t\n\tfloat fov = .5;\n\tvec3 z = normalize(co - ro);\n\tvec3 x = normalize(cross(cu, z));\n\tvec3 y = normalize(cross(z, x));\n\tvec3 rd = normalize(z + fov * uv.x * x + fov * uv.y * y);\n\t\n\tfloat s = 0.01;\n\tfloat d = 0.;\n\tvec3 p = ro + rd * d;\n\tfloat dMax = 20.;\n\tfor (float i=0.; i<250.; i++)\n\t{\n\t\tif (s<0.01*log(d*d/s/1000.) || d>dMax) break;\n\t\ts = df(p);\n        d += s * 0.2;\n        p = ro + rd * d;\t\n\t}\n\t\n    vec3 sky = GetSky(rd, ld, vec3(1.5));\n    \n\tif (d<dMax)\n\t{\n        fragColor.rgb = vec3(0.47,0.6,0.76) * lighting(p, ro, rd, .000001);\n\t\tfragColor.rgb = mix( fragColor.rgb, sky, 1.0-exp( -0.03*d*d ) ); \n\t}\n\telse\n\t{\n\t\tfragColor.rgb = sky;\n\t}\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}