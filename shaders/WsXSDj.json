{
    "Shader": {
        "info": {
            "date": "1553195576",
            "description": "traversing through a hexagonal tiling of \"flowers\". thanks to BigWings for his tutorial\n[url]https://www.youtube.com/watch?v=VmrIDyYiJBA[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "WsXSDj",
            "likes": 10,
            "name": "flower tower",
            "published": 3,
            "tags": [
                "hex",
                "traversal"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 581
        },
        "renderpass": [
            {
                "code": "\n#define rot(spin) mat2(cos(spin),sin(spin),-sin(spin),cos(spin))\n#define pi acos(-1.0)\n\n#define hex1 vec3(1,0,0)\n#define hex2 normalize(vec3( 1,0,sqrt(3.0)))\n#define hex3 normalize(vec3(-1,0,sqrt(3.0)))\n\n#define hex4 vec2(1,0)\n#define hex5 vec2(1,1)\n#define hex6 vec2(0,1)\n\n#define maxdist 800.0\n#define maxheight 0.0\n\nfloat map(vec2 p, vec2 ip) {\n    \n    float height = dot(sin(p*0.2+iTime*0.2),vec2(1))*6.0-12.0;\n    \n    return min(height, maxheight);\n}\n\nfloat flower(vec3 ro, vec3 rd, out vec3 n) {\n    \n    vec3 ird;\n    ird.x = dot(rd,hex1);\n    ird.y = dot(rd,hex2);\n    ird.z = dot(rd,hex3);\n    ird = 1.0/ird;\n    \n    vec3 ro2;\n    ro2.x = dot(ro,hex1);\n    ro2.y = dot(ro,hex2);\n    ro2.z = dot(ro,hex3);\n    \n    vec3 ds1 = -ro2*ird-abs(ird)*0.75;\n    float l1 = max(max(ds1.x,ds1.y),ds1.z);\n    vec3 n1 = vec3(equal(vec3(l1),ds1));\n    \n    vec3 ds2 = -ro2*ird+abs(ird)*0.75;\n    float l2 = min(min(ds2.x,ds2.y),ds2.z);\n    \n    vec3 ds3 = -ro2*ird-abs(ird)*0.25;\n    vec3 ds4 = -ro2*ird+abs(ird)*0.25;\n    \n    vec3 a1 = step(ds4,vec3(l1))+step(ds4,vec3(0));\n    ds3 += a1*1000.0;\n    float l3 = min(min(ds3.x,ds3.y),ds3.z);\n    vec3 n3 = vec3(equal(vec3(l3),ds3));\n    \n    float l4 = max(max(ds4.x,ds4.y),ds4.z);\n    \n    float l5;\n    if (l1 > l3) {\n        l5 = l1;\n        n = n1;\n    } else {\n        l5 = l3;\n        n = n3;\n    }\n    n *= sign(ird);\n    \n    float l6 = min(l2,l4);\n    \n    float l = l5;\n    \n    if (l6 < l5 || l6 < 0.0) {\n        l = 100000.0;\n    }\n    \n    return l;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0,0,-30);\n    vec3 rd = normalize(vec3(uv,1));\n    \n    if (length(iMouse.xy) > 40.0) {\n    \trd.yz *= rot(iMouse.y/iResolution.y*3.14-3.14*0.5);\n    \trd.xz *= rot(iMouse.x/iResolution.x*3.14*2.0-3.14);\n    \tro.yz *= rot(iMouse.y/iResolution.y*3.14-3.14*0.5);\n    \tro.xz *= rot(iMouse.x/iResolution.x*3.14*2.0-3.14);\n    }\n    \n    ro.y *= 0.5;\n    float d = 0.0;\n    \n    vec2 bh = vec2(1,3.0/sqrt(3.0));\n    vec2 a = mod(ro.xz+bh,bh*2.0)-bh;\n    vec2 b = mod(ro.xz   ,bh*2.0)-bh;\n    \n    vec2 p;\n    \n    if (dot(a,a) < dot(b,b)) {\n        p = a;\n    } else {\n        p = b;\n    }\n    \n    vec2 id = ro.xz-p;\n    \n    vec2 iid = id/bh*vec2(0.5,1);\n    iid.x += iid.y*0.5;\n    \n    iid = round(iid);\n    \n    vec3 rd2;\n    \n    rd2.x = dot(rd,hex1);\n    rd2.y = dot(rd,hex2);\n    rd2.z = dot(rd,hex3);\n    \n    rd2 = 1.0/rd2;\n    \n    vec3 ro2;\n    \n    vec3 mlens = 1.0/rd2;\n    \n    vec3 n;\n    \n    float hexlen;\n    float circlen;\n    \n    float h = map(id, iid);\n    ro.y = max(ro.y,h+0.1);\n    \n    \n    vec3 cam = ro;\n    \n    bool hit = false;\n    vec3 nor;\n    for (int i = 0; i < 1000; i++) {\n        \n        if (ro.y > maxheight && rd.y > 0.0 || d > maxdist) break;\n        \n    \tvec3 p5 = ro-vec3(id,0).xzy;\n        vec3 ro2;\n        \n        ro2.x = -dot(p5,hex1)*rd2.x+abs(rd2.x);\n        ro2.y = -dot(p5,hex2)*rd2.y+abs(rd2.y);\n        ro2.z = -dot(p5,hex3)*rd2.z+abs(rd2.z);\n        \n        vec3 mask;\n        \n        if (ro2.x < min(ro2.y,ro2.z)) {\n            mask = vec3(1,0,0);\n        } else if (ro2.y < ro2.z) {\n            mask = vec3(0,1,0);\n        } else {\n            mask = vec3(0,0,1);\n        }\n        \n        float len = dot(mask,ro2);\n        \n        float h = map(id, iid);\n        \n    \tfloat e2 = length(id)*0.3+iTime;\n        float r = min(mod(e2+2.5,pi*2.0),pi/3.0);\n        mat2 rotm1 = rot(r);\n        mat2 rotm2 = rot(-r);\n        \n        if (ro.y < h) {\n            vec3 p = p5;\n            vec3 rdr = rd;\n            p.xz *= rotm1;\n            rdr.xz *= rotm1;\n        \tfloat hex = flower(p,rdr,nor);\n            \n            p = ro+rd*hex;\n            if (p.y < h && hex < 100.0) {\n    \t\t\tn = -(nor.x*hex1+nor.y*hex2+nor.z*hex3);\n                n.xz *= rotm2;\n                ro = p;\n                hit = true;\n                break;\n            }\n        } else if (rd.y < 0.0) {\n            float len2 = -(ro.y-h)/rd.y;\n            \n            vec3 p = p5+rd*len2;\n            vec3 rdr = rd;\n            p.xz *= rotm1;\n            rdr.xz *= rotm1;\n        \tfloat hex = flower(p,rdr,nor)+len2;\n            \n            if (hex > len2) {\n                len2 = hex;\n    \t\t\tn = -(nor.x*hex1+nor.y*hex2+nor.z*hex3);\n                n.xz *= rotm2;\n            } else {\n                n = vec3(0,1,0);\n            }\n            \n            if (len2 < len) {\n                hit = true;\n                ro += rd*len2;\n                d += len2;\n                break;\n            }\n        }\n        \n        ro += rd*len;\n        d += len;\n        \n        nor = mask*sign(rd2);\n        \n        n = -(nor.x*hex1+nor.y*hex2+nor.z*hex3);\n        \n        iid += nor.x*hex4+nor.y*hex5+nor.z*hex6;\n        \n        id += -n.xz*2.0;\n    }\n    \n    fragColor = vec4(0);\n    \n    if (hit) {\n        //random color (sort of) (double square root for brightness)\n        \n        vec3 col = sqrt(sqrt(0.5+0.5*sin(iid.xxx*vec3(0.6,2.0,1.5)\n                                        *(sin(iid.yyy*vec3(1.0,1.0,1.0)+2.0))\n                                        +iid.xxy*vec3(0.9,1.6,0.5)\n                                        +iid.yyx*vec3(0.8,1.4,1.8))));\n\t\t\n    \t//vec3 col = textureLod(iChannel0,iid*0.1,0.0).xyz;\n        \n        //vec3 col = vec3(dot(sin(id),vec2(0.25))+0.5);\n        \n        vec3 lightn = normalize(vec3(1));\n        \n        float diff = max(dot(n,lightn),0.1);\n        \n        col *= diff;\n        \n        float d2 = 1.0-d/maxdist;\n        col *= d2;\n        \n        //col = fract(ro);\n        \n    \tfragColor = vec4(sqrt(col),1);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}