{
    "Shader": {
        "info": {
            "date": "1497565806",
            "description": "Get the red block out !\nEach block moves only along its axis.\n( 4 levels for now )\n",
            "flags": 32,
            "hasliked": 0,
            "id": "Msffzs",
            "likes": 14,
            "name": "Unblock me",
            "published": 3,
            "tags": [
                "game",
                "puzzle"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1226
        },
        "renderpass": [
            {
                "code": "#define T(u) texelFetch(iChannel0, ivec2(u), 0)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    float S = T(0).z,                                 // size\n          n = T(2).w,                                 // number of blocks\n          t = T(3).w;\n    U *= (S+2.)/iResolution.y; U.x -= 3.;             // cell id\n    float V = U.x<0. ? -1. : T(U).x;                  // cell content\n    if (V>100.) V -= 100.;\n    \n    O =   V==-1. ? vec4(.82)                          // out of grid\n        : V== 0. ? vec4(1)                            // grid background\n                 : .5 + .5 * cos( (V-1.)*6.3/n + vec4(0,2.1,-2.1,0) ); // blocks in color\n                   if (V>1.) O = .7+.3*O;             // only the target is saturated\n\n    if ( U.x<-2.5 && U.y*10.<t ) O -= O;              // number of tries\n\n // O -= step(length(U-T(1).yz-.5),.2);               // debug: mouse pos\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define T(u)        texelFetch(iChannel0, ivec2(u), 0)\n#define pos(n)      ( u == ivec2(n) )\n#define setH(X,Y,l) ++n; if(u.y==Y && u.x>=X && u.x<X+l) O.x= n;      // set horizontal block (pos,len,id)\n#define setV(X,Y,l) ++n; if(u.x==X && u.y>=Y && u.y<Y+l) O.x= n+100.; // set vertical block (pos,len,id+100)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    ivec2 u = ivec2(U), m;\n    if (T(0).z == 0.) {                                  // restart game\n        float n = 0.; int S, Y, g = int(T(0).y) + 0 ;    // + N to start at level N-1\n        O -= O;\n        if (g == 0) {                                    // game #1\n            S=6, Y=4;                                    // 6x6, out at Y=4                                                    \n            setH(2,Y, 2);                                // --- setup blocks. 1st: target\n            setH(1,6, 2);\n            setH(5,2, 2);\n            setH(3,1, 3);\n            setV(1,1, 2);\n            setV(1,3, 3);\n            setV(4,3, 3);\n            setV(6,4, 3);\n        } \n        else if (g == 1) {                               // game #2\n            S=6, Y=4;                                    // 6x6, out at Y=4                                                     \n            setH(1,Y, 2);                                // --- setup blocks. 1st: target\n            setH(1,1, 2);\n            setH(4,1, 2);\n            setH(5,2, 2);\n            setH(4,6, 3);\n            setH(1,3, 3);\n            setV(1,5, 2);\n            setV(3,1, 2);\n            setV(4,4, 2);\n            setV(5,3, 2);\n            setV(6,3, 3);\n        }\n        else if (g == 2) {                               // game #3\n            S=6, Y=4;                                    // 6x6, out at Y=4                                                     \n            setH(2,Y, 2);                                // --- setup blocks. 1st: target\n            setH(2,3, 2);\n            setH(3,1, 2);\n            setV(2,1, 2);\n            setV(4,2, 3);\n            setV(6,1, 3);\n        }\n        else if (g == 3) {                               // game #4\n            S=6, Y=4;                                    // 6x6, out at Y=4                                                     \n            setH(2,Y, 2);                                // --- setup blocks. 1st: target\n            setH(1,2, 2);\n            setH(3,2, 2);\n            setH(1,3, 2);\n            setH(3,3, 2);\n            setH(4,6, 3);\n            setV(1,4, 3);\n            setV(3,5, 2);\n            setV(4,4, 2);\n            setV(6,2, 3);\n        }\n        else  g = S = 0; \n        if (u.x<=0||u.y<=0||(u.x>=S+1&&u.y!=Y)||u.y>=S+1) O.x--; // walls\n        if pos(0) O.yzw = vec3(g,S,Y);                   // store game, size, Y out\n        if pos(2) O.w = n;                               // store number of blocks\n        return;\n    }\n    \n    O = T(u);                                            // previous cell state\n    float V,v, S = T(0).z, Y = T(0).w;                   // size, Y exit\n    \n    if (T(vec2(S+2.,Y)).x > 0.) {                        // --- win !\n        if (O.x<0.) O.x--;                               // flash during 135 frames\n        if (pos(0) && O.x<-135.) O.y++, O.z = 0.;        // next game\n        return;                                          // ( important )\n    }\n    \n    if (max(U.x,U.y)>S+3.) return;                       // out of grid\n                                                         // --- mouse \n    m = ivec2(iMouse.xy*(S+2.)/iResolution.y); m.x -= 3; // cell id under mouse\n    if pos(1)                                            // mouse storage\n        O.yzw = iMouse.z<=0. ? vec3(0)                   // reset init mouse drag\n                             : O.y==0. ? vec3(m, T(m).x) // init drag: (pos,content)\n                             : O.yzw ;\n    if (iMouse.z>0.) {                                   // on click\n        vec4 M = T(1);                                   // drag start values\n        V = M.w;                                         // clicked content\n        if (V>0.) {                                      // --- click on block\n            ivec2 m0 = ivec2(M.yz), \n               p, dm = sign(m - m0);                     // drag vector \n            dm[int(V<=100.)] = 0;                        // constrained move direction\n            //if (V<=10.) dm.y==0; else dm.x=0;          //  ( GLSL bug ) \n            for (int i=1; i<6; i++) {                    // seek for block end\n                v = T( p = m0+i*dm ).x;\n                if (v!=V) break;                         // next to block end\n            }\n            if (v==0.) {                                 // block free to move\n                if pos(p) O.x = V;                       // block go to here\n                else {                                   // seek for the other end\n                    for (int i=1; i<6; i++) {\n                        v = T( p = m0-i*dm ).x;\n                        if (v!=V) break;\n                    }\n                    if pos(p+dm) O.x = 0.;               // free it\n                }\n                if pos(1) O.yz = vec2(m0+dm);            // move mouse handle\n                if pos(3) O.w++;                         // try++\n            }\n        } \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}