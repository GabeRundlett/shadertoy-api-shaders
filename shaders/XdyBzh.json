{
    "Shader": {
        "info": {
            "date": "1527768950",
            "description": "Inspired by Beeple's VJ loops.",
            "flags": 0,
            "hasliked": 0,
            "id": "XdyBzh",
            "likes": 13,
            "name": "Spline Toroid Tunnel",
            "published": 3,
            "tags": [
                "raymarching",
                "music"
            ],
            "usePreview": 0,
            "username": "TekF",
            "viewed": 858
        },
        "renderpass": [
            {
                "code": "vec3 spline[] = vec3[](\n     vec3(0,-.2,2)\n    ,vec3(1.4,0,1.4)\n    ,vec3(2,0,0)\n    ,vec3(1.1,0,-1.2)\n    ,vec3(0,-.2,-2)\n    ,vec3(-1.4,0,-1.4)\n    ,vec3(-2,.2,0)\n    ,vec3(-2.6,.5,1.4)\n    ,vec3(-4,.8,2)\n    ,vec3(-5.4,.5,2.6)\n    ,vec3(-6,.2,4)\n    ,vec3(-5.4,0,5.4)\n    ,vec3(-4,-.2,6)\n    ,vec3(-2.6,-.5,5.4)\n    ,vec3(-2,-.8,4)\n    ,vec3(-1.4,-.5,2.6)\n    );\n\n\n\nvec3 CatmullRom( float t )\n{\n    int n = spline.length();\n\n    int i = int(floor(t));\n    t -= float(i);\n    \n    vec3 p0 = spline[(i-1+1000*n)%n]; // % is stupid on negative numbers, so add 1000*n because nothing matters and the world is a dumpster fire. Also I'm lazy.\n    vec3 p1 = spline[(i+0+1000*n)%n];\n    vec3 p2 = spline[(i+1+1000*n)%n];\n    vec3 p3 = spline[(i+2+1000*n)%n];\n    \n    const float t0 = -1.;\n    const float t1 = 0.;\n    const float t2 = 1.;\n    const float t3 = 2.;\n    \n    vec3 A0 = mix( p0, p1, (t-t0)/(t1-t0) ); // todo: simplify this maths\n    vec3 A1 = mix( p1, p2, (t-t1)/(t2-t1) ); // hopefully the compiler's smart enough to do it\n    vec3 A2 = mix( p2, p3, (t-t2)/(t3-t2) );\n    vec3 B0 = mix( A0, A1, (t-t0)/(t2-t0) );\n    vec3 B1 = mix( A1, A2, (t-t1)/(t3-t1) );\n\n    return mix( B0, B1, (t-t1)/(t2-t1) );\n}\n\nfloat Torus( vec3 pos, vec3 centre, vec3 axis, float majorRadius, float minorRadius )\n{\n    pos -= centre;\n    float pd = dot(pos,axis);\n    float pd2 = pd*pd;\n    float r = sqrt(dot(pos,pos)-pd2)-majorRadius;\n    return sqrt(r*r+pd2)-minorRadius;\n}\n\t\n#define SplinePosDir(T) CatmullRom(T),normalize(CatmullRom(T+.1)-CatmullRom(T-.1))\n\nfloat SDF( vec3 pos )\n{\n    float f = 1e30;\n    \n    int n = spline.length();\n    \n    float beat = 1.-fract(iChannelTime[0]*114./60.);\n    beat = pow(beat,2.)*sin(beat*6.283*4.);\n    \n    // in theory calling CatmullRom() with a constant *SHOULD* compile to a static result\n    // but the compiler seems to get confused if I do it in a loop (i.e. it didn't unroll the loop)\n    // unrolling the loop by hand fixed the problem, and means I can set individual radii\n    float s = float(n)/24.;\n    f = min(f,Torus(pos,SplinePosDir(0.*s),1.,.3));\n    f = min(f,Torus(pos,SplinePosDir(1.*s),1.,.3));\n    f = min(f,Torus(pos,SplinePosDir(2.*s),1.,.3));\n    f = min(f,Torus(pos,SplinePosDir(3.*s),1.,.3));\n    f = min(f,Torus(pos,SplinePosDir(4.*s),1.,.3));\n    f = min(f,Torus(pos,SplinePosDir(5.*s),1.,.3));\n    f = min(f,Torus(pos,SplinePosDir(6.*s),.7,.5+.1*beat));\n    f = min(f,Torus(pos,SplinePosDir(7.*s),.9,.1));\n    f = min(f,Torus(pos,SplinePosDir(8.*s),.8,.1));\n    f = min(f,Torus(pos,SplinePosDir(9.*s),.7,.1));\n    f = min(f,Torus(pos,SplinePosDir(10.*s),.6,.1));\n    f = min(f,Torus(pos,SplinePosDir(11.*s),1.,.3));\n    f = min(f,Torus(pos,SplinePosDir(12.*s),.8,.3));\n    f = min(f,Torus(pos,SplinePosDir(13.*s),1.,.1));\n    f = min(f,Torus(pos,SplinePosDir(14.*s),.8,.3));\n    f = min(f,Torus(pos,SplinePosDir(15.*s),1.,.1));\n    f = min(f,Torus(pos,SplinePosDir(16.*s),1.+.025*beat,.3));\n    f = min(f,Torus(pos,SplinePosDir(17.*s),1.+.05*beat,.3));\n    f = min(f,Torus(pos,SplinePosDir(18.*s),1.+.1*beat,.3));\n    f = min(f,Torus(pos,SplinePosDir(19.*s),1.+.2*beat,.3));\n    f = min(f,Torus(pos,SplinePosDir(20.*s),1.+.1*beat,.3));\n    f = min(f,Torus(pos,SplinePosDir(21.*s),1.+.05*beat,.3));\n    f = min(f,Torus(pos,SplinePosDir(22.*s),1.+.025*beat,.3));\n    f = min(f,Torus(pos,SplinePosDir(23.*s),1.+.0*beat,.3));\n    \n    return f;\n}\n\n\nfloat Trace( vec3 start, vec3 dir, float minT, float maxT, float pixelScale )\n{\n    float epsilon = pixelScale*1.;\n    \n    float t = minT;\n    \n    float dist;\n    for ( int i=0; i < 500; i++ ) // this can be really big as long as epsilon is high enough\n    {\n        dist = SDF( start + t*dir );\n        if ( dist < epsilon*t || t > maxT ) return t;\n        t += dist;\n    }\n    \n    if ( dist < 0.1 && t < maxT )\n    {\n        t += dist;\n        float dist2 = SDF( start + t*dir );\n        \n        // try to guess where the surface might be, by extrapolating as if SDF is planar here\n        t += max(0.,dist2*dist/(dist-dist2)); //(dist-dist2)/dist = change in df / distance stepped, so divide DF by this to find distance we should step\n        \n        return t;\n    }\n    \n    return maxT; // todo: maybe return best-guess t when we run out of iterations?\n}\n\n\nvec3 GetNormal( vec3 pos, float sampleSpacing )\n{\n    vec2 d = vec2(-1,1)*sampleSpacing;\n    \n    return normalize(\n        SDF( pos + d.xxx )*d.xxx +\n        SDF( pos + d.yyx )*d.yyx +\n        SDF( pos + d.yxy )*d.yxy +\n        SDF( pos + d.xyy )*d.xyy\n        );\n}\n\n\nvec4 Shade( vec3 pos, vec3 ray, vec3 n )\n{\n    vec4 col = vec4(1,0,0,0);\n\n    //col.rgb = fract(pos);\n\n    vec3 diffuse = vec3(.1)*(n.y*.5+.5);\n\n    vec3 l = normalize( vec3( 2,3,1 ) );\n    diffuse += vec3(1) * max(dot(n,l),0.);\n\n    col.rgb *= diffuse;\n    \n    // reflectivity\n    col.a = pow( 1.+dot(ray,n), 5. );\n    col.a = mix( .01, 1., col.a );\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n    const float targetT = 1.;\n    float time = iTime/1.;\n    \n    vec3 camPos = CatmullRom( time );\n    \n    vec3 camK = CatmullRom( time+targetT ) - camPos;\n    \n    if ( iMouse.z > 0. )\n    {\n\t    float a = -.5*6.283*(iMouse.x/iResolution.x-.5);\n        camK.xz = camK.xz*cos(a) + sin(a)*vec2(-1,1)*camK.zx;\n        camK.y += 2.*(iMouse.y/iResolution.y-.5);\n\t}\n    camK = normalize(camK);\n    \n    vec3 camI = normalize(cross(vec3(0,1,0),camK));\n    vec3 camJ = cross(camK,camI);\n    \n    vec3 ray = vec3((fragCoord.xy-.5*iResolution.xy)/iResolution.y,1.);\n    float pixelScale = ray.z / iResolution.y;\n    ray = ray.x*camI + ray.y*camJ + ray.z*camK;\n    ray = normalize(ray);\n    \n    float far = 1e10;\n    float t = Trace( camPos, ray, 0., far, pixelScale );\n\n    fragColour.rgb = vec3(.7);\n    if ( t < far )\n    {\n        vec3 pos = camPos + ray*t;\n        \n\t    vec3 n = GetNormal( pos, .001 );\n\n        fragColour.rgba = Shade( pos, ray, n );\n        \n        // reflection\n        vec3 rayr = reflect(ray,n);\n        float tr = Trace( pos, rayr, .01, 128., pixelScale );\n\n        vec3 ref = vec3(.7);\n        if ( tr < 128. )\n        {\n            vec3 posr = pos + rayr*t;\n            ref = Shade( posr, rayr, GetNormal( posr, .001 ) ).rgb;\n        }\n        \n        fragColour.rgb = mix( fragColour.rgb, ref, fragColour.a );\n    }\n\n        \n    fragColour.rgb = pow(fragColour.rgb,vec3(1./2.2));\n    fragColour.a = 1.;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}