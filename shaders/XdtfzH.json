{
    "Shader": {
        "info": {
            "date": "1524080722",
            "description": "Transforms FFT of soundcloud input (or mic, just change iChannel0 of Buf A) into a new palette of colors for iChannel1 of Image",
            "flags": 96,
            "hasliked": 0,
            "id": "XdtfzH",
            "likes": 1,
            "name": "Visualizer #2.1",
            "published": 3,
            "tags": [
                "sound",
                "recoloring"
            ],
            "usePreview": 0,
            "username": "cwrawls",
            "viewed": 645
        },
        "renderpass": [
            {
                "code": "/*\n Visualizer #2.1 - Color Remapping\n By cwrawls\n*/\n#define LUMACOEFF vec4(0.299, 0.587, 0.114, 0.0)\n//modify to change the number of colors available to resample (should be >= 2.0)\n#define PALETTESIZE 20.0\n//modify to change where in the palette to sample from (should be < iResolution.x - PALETTESIZE)\n#define PALETTEOFFSET 5.5\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //use luminosity of input to determine where in palette to sample from\n    float luma = dot(texture(iChannel1, uv), LUMACOEFF);\n    \n    float c0x = floor(luma * PALETTESIZE) + PALETTEOFFSET;\n    float c1x = ceil(luma * PALETTESIZE) + PALETTEOFFSET;\n    float cMix = fract(luma * PALETTESIZE);\n    \n    //mix the 2 colors together\n    vec3 col = mix(texture(iChannel0, vec2(c0x / iResolution.x, uv.y)).xyz, texture(iChannel0, vec2(c1x / iResolution.x, uv.y)).xyz, vec3(cMix));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n By cwrawls\n Slide Buffer - Smooth out transitions between frames\n*/\n//how quickly to travel towards the current amp if it is greater than old\n#define SLIDE_UP 1.0\n//how quickly to travel towards the current amp if it is less than old\n#define SLIDE_DOWN 40.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //get normalized coords\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    //get the past frame's value\n   \tfloat ampOld = texture(iChannel1, uv).x;\n    \n    //get the new value\n    float ampCurr = texture(iChannel0, vec2(uv.x, 0.25)).x;\n    \n    //control whether up or down is used\n    float amount = ampCurr > ampOld ? 1.0 : 0.0;\n\t\n\t// calculate slide down\n\tfloat down_amt = max(1.0, abs(SLIDE_DOWN));\n\tfloat sdown = 1.0 / down_amt;\n\tvec3 down = vec3(ampOld + ((ampCurr - ampOld) * sdown));\n\n\t// calculate slide up\n\tfloat up_amt = max(1.0, abs(SLIDE_UP));\n\tfloat sup = 1.0 / up_amt;\n\tvec3 up = vec3(ampOld + ((ampCurr - ampOld) * sup));\n    \n    vec3 val = mix(down, up, vec3(amount));\n    \n    fragColor = vec4(val,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 19447,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/deejaytrademark/through-the-storm-alesso-x-tritonal-x-bastille-x-mako"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\n\tAmplitude to Hue to RGB Conversion\n*/\n#define TWOPI 6.28318530718\n\nvec3 getColor(float amt, float vs) {\n\tfloat colDeg = amt * TWOPI;\n    float x = 1.0 - abs(mod(colDeg/radians(60.0), 2.0) -1.0);\n    /*if(colDeg < radians(60.00)){return vec3(1.0,\tx, \t\t0.0);}\n    if(colDeg < radians(120.0)){return vec3(x,\t\t1.0, \t0.0);}\n    if(colDeg < radians(180.0)){return vec3(0.0, \t1.0, \tx);}\n    if(colDeg < radians(240.0)){return vec3(0.0, \tx, \t\t1.0);}\n    if(colDeg < radians(300.0)){return vec3(x, \t\t0.0, \t1.0);}\n    return vec3(1.0, 0.0, x); */\n    if(colDeg < radians(60.00)){return vec3(x,\t\t0.0, \tvs);}\n    if(colDeg < radians(120.0)){return vec3(vs,\t\t0.0, \tx);}\n    if(colDeg < radians(180.0)){return vec3(vs, \tx,\t \t0.0);}\n    if(colDeg < radians(240.0)){return vec3(x,\t \tvs, \t0.0);}\n    if(colDeg < radians(300.0)){return vec3(0.0, \tvs, \tx);}\n    return vec3(0.0, x, vs);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = getColor(texture(iChannel0, uv).x, texture(iChannel0, uv).x * uv.x);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}