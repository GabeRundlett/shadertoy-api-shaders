{
    "Shader": {
        "info": {
            "date": "1704175861",
            "description": "just made this in school",
            "flags": 0,
            "hasliked": 0,
            "id": "4f23W1",
            "likes": 0,
            "name": "Color Repeating Room",
            "published": 3,
            "tags": [
                "color"
            ],
            "usePreview": 0,
            "username": "Lego0_77",
            "viewed": 22
        },
        "renderpass": [
            {
                "code": "#define offset vec2(iMouse.x, iMouse.y)\n\nconst bool invert = false; // this is filter\nconst bool flipColor = false; // this flips the colors\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y += -0.5 + abs(sin(uv.x+iTime))*0.05;\n    uv.x += -0.5 + abs(cos(uv.y+iTime))*0.05;\n    \n    uv.x += (offset.x / iResolution.x)-.5;\n    uv.y += (offset.y / iResolution.y)-.5;\n\n    vec3 col;\n    \n    if (flipColor)\n    {\n        col.b += cos(iTime+(uv.x/uv.y)*5.)*(1./(uv.x/uv.y));\n        col.g += sin(iTime+(uv.x/uv.y)*5.)*(1./(uv.x/uv.y));\n        col.r -= sin(iTime+(uv.x/uv.y)*5.)*(1./(uv.x/uv.y));\n    } else {\n        col.r += cos(iTime+(uv.x/uv.y)*5.)*(1./(uv.x/uv.y));\n        col.g += sin(iTime+(uv.x/uv.y)*5.)*(1./(uv.x/uv.y));\n        col.b -= sin(iTime+(uv.x/uv.y)*5.)*(1./(uv.x/uv.y));\n    }\n    \n    if (invert) col = 1.0 - col;\n    \n    fragColor = vec4(col,1.0);\n}\n// hey if you want haxeflixel version of this shader, look down here.\n/*\n#pragma header\n\nuniform vec2 offset; // screen offset\nuniform float iTime;\nuniform bool invert;\nuniform bool flipColor;\n\nvoid main(){\n    vec2 uv = openfl_TextureCoordv;\n    uv.y += -0.5 + abs(sin(uv.x+iTime))*0.05;\n    uv.x += -0.5 + abs(cos(uv.y+iTime))*0.05;\n    \n    uv.x += (offset.x / openfl_TextureSize.x)-.5;\n    uv.y += (offset.y / openfl_TextureSize.y)-.5;\n    \n    vec3 col;\n    if (flipColor)\n    {\n        col.b += cos(iTime+(uv.x/uv.y)*5.)*(1./(uv.x/uv.y));\n        col.g += sin(iTime+(uv.x/uv.y)*5.)*(1./(uv.x/uv.y));\n        col.r -= sin(iTime+(uv.x/uv.y)*5.)*(1./(uv.x/uv.y));\n    } else {\n        col.r += cos(iTime+(uv.x/uv.y)*5.)*(1./(uv.x/uv.y));\n        col.g += sin(iTime+(uv.x/uv.y)*5.)*(1./(uv.x/uv.y));\n        col.b -= sin(iTime+(uv.x/uv.y)*5.)*(1./(uv.x/uv.y));\n    }\n    \n    if (invert) col = 1.0 - col;\n    \n    gl_FragColor = vec4(col,1.0);\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}