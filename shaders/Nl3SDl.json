{
    "Shader": {
        "info": {
            "date": "1640102816",
            "description": "My most polished planet shader so far, really happy to show it to you, have fun observing this saturn inspired planet !",
            "flags": 32,
            "hasliked": 0,
            "id": "Nl3SDl",
            "likes": 41,
            "name": "Saturnish planet",
            "published": 3,
            "tags": [
                "space",
                "planet",
                "stars",
                "saturn",
                "asteroid",
                "gas"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 1003
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat seed;\nfloat rand()\n{\n    seed++;\n    return hash11(seed);\n}\n// Chromatic abberation\nvec3 rdr(vec2 uv)\n{\n  float dist = .002;//0.5*sat(pow(length(uv)-.2,2.));\n  vec2 dir = normalize(vec2(1.));\n  vec3 col = vec3(0.);\n  col.r = texture(iChannel1, uv+dir*dist).r;\n  col.g = texture(iChannel1, uv).g;\n  col.b = texture(iChannel1, uv-dir*dist).b;\n  return col;\n}\n// A JJ Abrams likish flare\nvec3 chromaFlare(vec2 uv, vec2 ouv, float sz, float id)\n{\n    vec3 col = vec3(0.);\n    col = texture(iChannel0, vec2(1.)+uv*vec2(-1.)*id).xyz;\n    float shape = max(length(ouv)-.5, -(length(ouv)-.15));\n    col *= vec3(1.)*(1.-sat(shape*1.));\n    return pow(col,vec3(3.))*.5*vec3(.1,.2,.7);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 cuv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    \n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(0.,f*factor);\n        if (nuv.y > 0. && nuv.y < 1.)\n            col += texture(iChannel0, uv+vec2(0.,f*factor)).xyz/float(steps);\n    }\n     \n    vec3 rgb = rdr(uv)+GLOW_OPACITY*pow(col, vec3(GLOW_POW));\n    rgb += chromaFlare(uv, cuv, 0.01, .75)*vec3(.1,0.,1.)*3.;\n    rgb += chromaFlare(uv, cuv, 0.01, .95)*vec3(1.,0.,0.);\n    rgb += chromaFlare(uv, cuv, 0.01, 1.)*vec3(0.,1.,0.);\n    rgb += chromaFlare(uv, cuv, 0.01, 1.05)*vec3(0.,0.,1.);\n\n    seed+= texture(iChannel2, .75*uv+vec2(-0.1,-.2)).x;\n    seed += iTime;\n    \n    // calculating kind of \"luminance\" this way is more reliable than fixed points on the picture\n    float avglight = 0.;\n    for (int i = 0; i < 16; ++i)\n    {\n        avglight += length(texture(iChannel0, vec2(rand(), rand())).xyz);\n    }\n    avglight /= 16.;\n    \n    // Kind of cheap pupillary light reflex\n    rgb *= mix(1.5,.5, pow(avglight,1.));\n    \n    fragColor = vec4(rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat seed;\nfloat rand()\n{\n    seed++;\n    return hash11(seed);\n}\n\nvec3 lpos; // Sun position\nfloat _time;\n\nfloat mapring(vec3 p)\n{\n    p.xy *= r2d(.3);\n    float ring = max(max(length(p.xz)-5., -(length(p.xz)-3.)), abs(p.y)-.001);\n    return ring;\n}\n\nvec2 map(vec3 p) // I know the vec2 is useless here but it's legacy :p\n{\n    vec2 acc = vec2(10000.,-1.);\n    \n    float planet = length(p)-2.;\n    acc = _min(acc, vec2(planet, 0.));\n      \n    return acc;\n}\n\nvec3 accCol;\nvec2 tracering(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        float res = mapring(p);\n        if (res < 0.01)\n            return vec2(res, distance(p, ro));\n        p+= rd*res;\n    }\n    return vec2(-1.);\n}\n\n\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    accCol = vec3(0.);\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n            return vec3(res.x, distance(p, ro), res.y);\n        accCol += (1.-sat(res.x/.521))\n        *vec3(0.639,0.545,0.384)\n        *.02\n        *sat(sat(dot(normalize(p-lpos), normalize(p)))+.05);\n        p+= rd*res.x*.25;\n    }\n    return vec3(-1.);\n}\n\nvec3 getNormal(float d, vec3 p)\n{\n    vec2 e = vec2(0.01,0.);\n    return normalize(vec3(d) - vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvec3 getEnv(vec3 rd)\n{\n    rd.xy *= r2d(.5);\n    vec3 col = vec3(0.);\n    col += 1.5*pow(texture(iChannel0, 2.*vec2(atan(rd.z, rd.x), acos(rd.y))).x,20.);\n    vec2 uvSky = 2.*vec2(atan(rd.z, rd.x), acos(rd.y));\n    vec3 rgblact = mix(vec3(0.984,0.639,0.455), vec3(0.984,0.639,0.455).zyx, \n    pow(texture(iChannel0,uvSky*.1).x,.76));\n    float visi = sat(sat((abs(rd.y*20.)-.1-0.3 \n    *texture(iChannel2, uvSky).x)*2.)+.4);\n    col += visi*1.3*rgblact*pow(texture(iChannel0, uvSky).x,2.)*(1.-sat(5.*abs(dot(rd, vec3(0.,1.,0.)))));\n    col = pow(col, vec3(1.5))*.6;\n    return col*.5;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    float d = mix(3.,15.,sat(sin(_time*.33)*.5+.5));\n    float t = _time*.1;\n    vec3 ro = vec3(sin(t)*d,sin(_time*.2)*5.,cos(t)*d);\n    vec3 ta = vec3(0.,sin(_time+PI*.5),0.);\n    vec3 rd = normalize(ta-ro);\n    rd = getCam(rd, uv);\n    \n    float raydist = 1000.;\n    vec2 resring = tracering(ro, rd, 100);\n\n    vec3 res = trace(ro, rd, 64);\n    if (res.y > 0.)\n    {\n        raydist = res.y;\n        vec3 p = ro + rd*res.y;\n        vec3 n = getNormal(res.x, p);\n        \n        col = n*.5+.5;\n        vec3 ldir = p-lpos;\n        vec3 h = normalize(rd+ldir);\n        float ndotl = dot(normalize(ldir), n);\n        if (res.z == 0.)\n        {\n            vec3 prd = n;\n            vec2 uvplanet = vec2((atan(prd.z, prd.x)-_time*.1)*2.*1.575, acos(prd.y));\n            float clouds = texture(iChannel2, uvplanet*.25*vec2(.2,1.)).x;\n            clouds = pow(clouds, mix(.5, .025, pow(sat(ndotl),.01)));\n            col = vec3(0.137,0.125,0.063)*.75*(1.-sat(-ndotl));\n            col += vec3(0.620,0.592,0.420)*pow(sat(ndotl),.3);\n            col *= clouds;\n            vec2 uvpole = vec2(atan(p.z, p.x), abs(p.y)-1.95);\n            vec3 storm = texture(iChannel2, uvpole*vec2(.05,1.)).xyz;\n            col = mix(col, col*.5+storm*vec3(0.424,0.718,0.996)*2., sat((-max(uvpole.y,-uvpole.y-.1)-0.02*sin(_time+uvpole.x*5.))*20.));\n        }\n    }\n    else\n    {\n        col = getEnv(rd);\n    }\n        col += accCol;\n    if (raydist > 30.)\n        col += 1.*vec3(1.000,0.867,0.502)*pow(sat(dot(rd, -normalize(lpos-ro))),100.);\n  \n    if (resring.y > 0. && resring.y < raydist)\n    {\n        vec3 pring = ro+rd*resring.y;\n        float an = atan(pring.z, pring.x);\n        float ring = texture(iChannel2, vec2(abs(an*.01), length(pring.xz))).x;\n        ring += texture(iChannel2, pring.xz*1.*vec2(2.,1.)).x*.25;\n        ring *= mix(0.25,1.,sat((length(pring.xz)-3.5)*400.));\n        ring *= mix(0.125,1.,sat((abs(length(pring.xz)-4.2)-.1)*400.));\n        vec3 resshadow = trace(pring, -normalize((lpos+2.*(vec3(rand(), rand(), rand())-.5))-pring), 64);\n        col *= sat(ring+.5);\n        col = mix(col, vec3(.8)*mix(.2,1.,float(resshadow.y < 0.)), pow(ring,.5)*.6);\n        col *= mix(0.,1.,1.-sat((length(pring)-4.9)*3.));\n    }\n  col = sat(col);\n  return col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    lpos = vec3(100.,-15.,0.);\n    \n    _time = iTime*.35;\n    vec2 ouv = fragCoord/iResolution.xy;\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n        seed+= texture(iChannel0, .75*ouv+vec2(-0.1,-.2)).x;\n    seed += iTime;\n    uv *= r2d(sin(_time*.125)*.25);\n    vec2 off = vec2(1., -1.)/(iResolution.x*1.75);\n    \n    vec3 col = rdr(uv+off*(vec2(rand(), rand())-.5)*2.); // Single sample AA\n\n    col += .1*rand(); // film grain\n    \n    col = pow(col, vec3(1.2));\n    \n    col = mix(col, texture(iChannel1, ouv).xyz, .8); // \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(f*factor, 0.);\n        if (nuv.x > 0. && nuv.x < 1.)\n          col += texture(iChannel0, uv+vec2(f*factor,0.)).xyz/float(steps);\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define GLOW_SAMPLES 80\n#define GLOW_DISTANCE 0.1\n#define GLOW_POW .8\n#define GLOW_OPACITY .6\n#define PI 3.14159265\n#define sat(a) clamp(a, 0., 1.)\n\n// Stolen from 0b5vr here https://www.shadertoy.com/view/ss3SD8\nfloat hash11(float p)\n{\n    return (fract(sin((p)*114.514)*1919.810));\n}\n\nmat2 r2d(float a){float cosa = cos(a);float sina = sin(a);return mat2(cosa,sina,-sina,cosa);}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 1.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(uv.x*r+-uv.y*u));\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nfloat _cucube(vec3 p, vec3 s, vec3 th)\n{\n    vec3 l = abs(p)-s;\n    float cube = max(max(l.x, l.y), l.z);\n    l = abs(l)-th;\n    float x = max(l.y, l.z);\n    float y = max(l.x, l.z);\n    float z = max(l.x, l.y);\n    \n    return max(min(min(x, y), z), cube);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}