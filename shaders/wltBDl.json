{
    "Shader": {
        "info": {
            "date": "1619616705",
            "description": "copied the pixelToCubial from somewhere else in shadertoy, cant remember where",
            "flags": 0,
            "hasliked": 0,
            "id": "wltBDl",
            "likes": 3,
            "name": "Hexagon Grid",
            "published": 3,
            "tags": [
                "hexagongrid"
            ],
            "usePreview": 0,
            "username": "Dude",
            "viewed": 415
        },
        "renderpass": [
            {
                "code": "#define HMAT mat2(vec2(1., 0.), vec2(.5, 0.866))\n#define hScale .12\n\nfloat N21(vec2 p){\n    return fract(sin(p.x * 100. + p.y * 6574.) * 5647.);\n}\n\nfloat SmoothNoise(vec2 uv){\n    vec2 lv = fract(uv * 10.);\n    vec2 id = floor(uv * 10.);\n    \n    lv = lv * lv * (3. -2. * lv);\n    \n    float bl = N21(id);\n    float br = N21(id + vec2(1,0));\n    float b = mix(bl, br, lv.x);\n    \n    float tl = N21(id+vec2(0,1));\n    float tr = N21(id+vec2(1,1));\n    float t = mix(tl, tr, lv.x);\n    \n    return mix(b, t, lv.y);\n}\n\nvoid pixelToCubial(vec2 uv, out vec3 cubial, out vec3 grid) {\n\n    vec2 axial = inverse(HMAT) * uv;\n    cubial = vec3(axial, -axial.x - axial.y) / hScale;\n    grid = round(cubial);\n    vec3 dist = abs(cubial - grid);\n    if (dist.x > dist.y && dist.x > dist.z) {\n        grid.x = -grid.y - grid.z;\n    }\n    else if (dist.y > dist.z) {\n        grid.y = -grid.x - grid.z;\n    }\n    else {\n        grid.z = -grid.x - grid.y;\n    }\n}\n\nfloat cubialDistance(vec3 a, vec3 b) {\n    vec3 c = abs(a - b);\n    return max(c.x, max(c.y, c.z));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 vec_pos = (gl_FragCoord.xy);\n    vec2 uv = (vec_pos - .5*iResolution.xy) / iResolution.y;\n    uv *= 3.;\n    vec4 uv_r = vec4(uv.x, uv.y, 0., 0.);\n\n    vec3 cubial;\n    vec3 grid;\n    pixelToCubial(uv_r.xy, cubial, grid);\n\n    vec3 coord = cubial - grid;\n    vec3 dist = abs(coord.xyz - coord.zxy);\n\n    vec3 background_col = vec3(0.);\n    float edge = (12.*2.)-1.;\n    float center_distance = cubialDistance(grid/edge, vec3(0,0,0) );\n    if (center_distance > 0.5){\n        background_col = vec3(center_distance, center_distance, center_distance);\n    }\n    \n    float uvm = uv.y * 3. + uv.x + (SmoothNoise(grid.xy * (iTime*0.02)) * 1.9);\n    \n    float wave = sin(uvm+0.5+(iTime*2.));\n    float thickness = .1 * wave;\n    vec3 col = vec3(wave * 2., 1., 1.);\n    \n    thickness += 0.2;\n    col *= 1. - smoothstep(thickness, thickness + (2.0 / iResolution.y) / hScale, 1.0 - max(dist.x, max(dist.y, dist.z)));\n\n    col = (col + background_col)/2.;\n\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}