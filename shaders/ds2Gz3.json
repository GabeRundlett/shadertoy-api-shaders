{
    "Shader": {
        "info": {
            "date": "1667977393",
            "description": "WCOM AB logo\nThe logo is a trademark of WCOM AB.",
            "flags": 0,
            "hasliked": 0,
            "id": "ds2Gz3",
            "likes": 3,
            "name": "WCOM AB",
            "published": 3,
            "tags": [
                "wcom"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 192
        },
        "renderpass": [
            {
                "code": "// CC0: WCOM AB Logo\n//  The logo is a trademark of WCOM AB.\n\n// #define LOGO_TO_RIGHT\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\n// License: Unknown, author: Martijn Steinrucken, found: https://www.youtube.com/watch?v=VmrIDyYiJBA\nvec2 hextile(inout vec2 p) {\n  // See Art of Code: Hexagonal Tiling Explained!\n  // https://www.youtube.com/watch?v=VmrIDyYiJBA\n  const vec2 sz       = vec2(1.0, sqrt(3.0));\n  const vec2 hsz      = 0.5*sz;\n\n  vec2 p1 = mod(p, sz)-hsz;\n  vec2 p2 = mod(p - hsz, sz)-hsz;\n  vec2 p3 = dot(p1, p1) < dot(p2, p2) ? p1 : p2;\n  vec2 n = ((p3 - p + hsz)/sz);\n  p = p3;\n\n  n -= vec2(0.5);\n  // Rounding to make hextile 0,0 well behaved\n  return round(n*2.0)*0.5;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat hexagon(vec2 p, float r) {\n  const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n  p = abs(p);\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  return length(p)*sign(p.y);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat shape(vec2 p) {\n  return hexagon(p.yx, 0.4)-0.075;\n}\n\nfloat cellHeight(float h) {\n  return 0.05*2.0*(-h);\n}\n\nvec3 cell(vec2 p, float h) {\n  float hd = shape(p);\n\n  const float he = 0.0075*2.0;\n  float aa = he;\n  float hh = -he*smoothstep(aa, -aa, hd);\n  \n  return vec3(hd, hh, cellHeight(h));\n}\n\nfloat height(vec2 p, float h) {\n  return cell(p, h).y;\n}\n\nvec3 normal(vec2 p, float h) {\n  vec2 e = vec2(4.0/RESOLUTION.y, 0);\n  \n  vec3 n;\n  n.x = height(p + e.xy, h) - height(p - e.xy, h);\n  n.y = height(p + e.yx, h) - height(p - e.yx, h);\n  n.z = 2.0*e.x;\n  \n  return normalize(n);\n}\n\nvec3 planeColor(vec3 ro, vec3 rd, vec3 lp, vec3 pp, vec3 pnor, vec3 bcol, vec3 pcol) {\n  vec3  ld = normalize(lp-pp);\n  float dif  = pow(max(dot(ld, pnor), 0.0), 1.0);\n  vec3 col = pcol;\n  col = mix(bcol, col, dif);\n  return col;\n}\n\nconst mat2 rots[6] = mat2[](\n    ROT(0.0*TAU/6.0)\n  , ROT(1.0*TAU/6.0)\n  , ROT(2.0*TAU/6.0)\n  , ROT(3.0*TAU/6.0)\n  , ROT(4.0*TAU/6.0)\n  , ROT(5.0*TAU/6.0)\n); \n\nconst vec2 off = vec2(1.0, 0.0);\n\nconst vec2 offs[6] = vec2[](\n    off*rots[0]\n  , off*rots[1]\n  , off*rots[2]\n  , off*rots[3]\n  , off*rots[4]\n  , off*rots[5]\n  );\n  \nfloat cutSlice(vec2 p, vec2 off) {\n  // A bit like this but unbounded\n  // https://www.shadertoy.com/view/MlycD3\n  p.x = abs(p.x);\n  off.x *= 0.5; \n\n  vec2 nn = normalize(vec2(off));\n  vec2 n  = vec2(nn.y, -nn.x);\n\n  float d0 = length(p-off);\n  float d1 = -(p.y-off.y);\n  float d2 = dot(n, p);\n  \n  bool b = p.x > off.x && (dot(nn, p)-dot(nn, off)) < 0.0;\n  \n  return b ? d0 : max(d1, d2);\n}\n\nfloat hexSlice(vec2 p, int n) {\n  n = 6-n;\n  n = n%6;\n  p *= rots[n];\n  p = p.yx;\n  const vec2 dim  = vec2((0.5)*2.0/sqrt(3.0), (0.5));\n  return cutSlice(p, dim);\n}\n\nvec3 backdrop(vec2 p) {\n  const float z = 0.327;\n  float aa = 2.0/(z*RESOLUTION.y);\n  \n  p.yx = p;\n  \n  vec3 lp = vec3(3.0, 0.0, 1.0);\n  \n  p -= vec2(0.195, 0.);\n  p /= z;\n\n  float toff = 0.2*TIME;\n  p.x += toff;\n  lp.x += toff;\n\n  vec2 hp  = p;\n  vec2 hn  = hextile(hp);\n  float hh = hash(hn);\n  vec3 c   = cell(hp, hh);\n  float cd = c.x;\n  float ch = c.z;  \n\n  vec3 fpp = vec3(p, ch);\n  vec3 bpp = vec3(p, 0.0);\n\n  vec3 ro = vec3(0.0, 0.0, 1.0);\n  vec3 rd = normalize(fpp-ro);\n\n  vec3  bnor = vec3(0.0, 0.0, 1.0);\n  vec3  bdif = lp-bpp;\n  float bl2  = dot(bdif, bdif);\n\n  vec3  fnor = normal(hp, hh);\n  vec3  fld  = normalize(lp-fpp); \n\n  float sf = 0.0;\n\n  for (int i = 0; i < 6; ++i) {\n    vec2  ioff= offs[i];\n    vec2  ip  = p+ioff;\n    vec2  ihn = hextile(ip);\n    float ihh = hash(ihn);\n    float ich = cellHeight(ihh);\n    float iii = (ich-ch)/fld.z;\n    vec3  ipp = vec3(hp, ch)+iii*fld;\n    \n    float hsd = hexSlice(ipp.xy, i);\n    if (ich > ch) {\n      sf += exp(-20.0*tanh_approx(1.0/(10.0*iii))*max(hsd+0., 0.0));\n    }\n  }\n\n  const float sat = 0.23;\n  vec3 bpcol = planeColor(ro, rd, lp, bpp, bnor, vec3(0.0), HSV2RGB(vec3(240.0/36.0, sat, 0.14)));\n  vec3 fpcol = planeColor(ro, rd, lp, fpp, fnor, bpcol, HSV2RGB(vec3(240.0/36.0, sat, 0.19)));\n\n  vec3 col = bpcol;\n  col = mix(col, fpcol, smoothstep(aa, -aa, cd));\n  col *= 1.0-tanh_approx(sf);\n\n  float fo = exp(-0.025*max(bl2-0., 0.0));\n  col *= fo;\n  col = mix(bpcol, col, fo);\n\n  return col;\n}\n\nvec3 wcom(vec3 col, vec2 p) {\n  const float sc = 0.25;\n#if defined(LOGO_TO_RIGHT)  \n  p.x -= (RESOLUTION.x/RESOLUTION.y - 2.0*sc);\n#endif\n  vec2 op = p;\n  float aa = 2.0/RESOLUTION.y;\n  p -= 0.5*1.5*sc;\n\n  vec2 n = mod2(p, vec2(1.5*sc));\n  const float bw = 0.1;\n  float dh = box(p, vec2((0.5-bw)*sc))-bw*sc;\n  if (abs(n.x+0.5) > 1.0||abs(n.y+0.5) > 2.0) {\n    dh = box(op, sc*vec2(1.25, 2.75));\n  }\n\n  vec3 gcol0 = hsv2rgb(vec3(0.6, 0.85, 0.0025)); \n\n  float v = mod(n.x+n.y, 2.0) == 0.0 ? 0.0 : 1.0;\n  vec3 bcol = hsv2rgb(vec3(0.62, 0.925, v));\n  col = mix(col, bcol, smoothstep(aa, -aa, dh));\n\n  col += gcol0/(max(abs(dh)-0.001, 0.0)+0.0001);\n  return col;\n}\n\nvec3 effect(vec2 p) {\n  vec3 col = backdrop(p);\n\n  col = wcom(col, p);\n\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p);\n  col = aces_approx(col);\n  col = sRGB(col);\n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}