{
    "Shader": {
        "info": {
            "date": "1661810223",
            "description": "License CC0: Beat boxing\nBit of tinkering with the oldie but goldie mandelbox (based on Evilryus version): https://www.shadertoy.com/view/XdlSD4\nMusic by Ultrasyd (sadly no longer with us): https://soundcloud.com/ultrasyd/shitstep-game-boy\n",
            "flags": 64,
            "hasliked": 0,
            "id": "7tGcRV",
            "likes": 23,
            "name": "Beat boxing",
            "published": 3,
            "tags": [
                "mandelbox"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 598
        },
        "renderpass": [
            {
                "code": "// License CC0: Beat boxing\n//  Bit of tinkering with the oldie but goldie mandelbox (based on Evilryus version):\n//   https://www.shadertoy.com/view/XdlSD4\n//  Music by Ultrasyd (sadly no longer with us): https://soundcloud.com/ultrasyd/shitstep-game-boy\n//  The music AFAIK is made on a Gameboy!\n\n//#define THEME0\n#define THEME1\n\n#define TOLERANCE       0.001\n#define NORMTOL         0.00125\n#define MAX_RAY_LENGTH  10.0\n#define MAX_RAY_MARCHES 90\n#define TIME            iTime\n#define RESOLUTION      iResolution\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n\n// https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n#define PATHA vec2(0.1147, 0.2093)\n#define PATHB vec2(13.0, 3.0)\n\nconst float cam_amp = 1.0;\n\nmat2 g_rot = ROT(0.0);\n\nfloat g_quad = 0.0;\nfloat g_beat = 0.0;\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/spherefunctions/spherefunctions.htm\nfloat sphered(vec3 ro, vec3 rd, vec4 sph, float dbuffer) {\n  float ndbuffer = dbuffer/sph.w;\n  vec3  rc = (ro - sph.xyz)/sph.w;\n  \n  float b = dot(rd,rc);\n  float c = dot(rc,rc) - 1.0;\n  float h = b*b - c;\n  if( h<0.0 ) return 0.0;\n  h = sqrt( h );\n  float t1 = -b - h;\n  float t2 = -b + h;\n\n  if( t2<0.0 || t1>ndbuffer ) return 0.0;\n  t1 = max( t1, 0.0 );\n  t2 = min( t2, ndbuffer );\n\n  float i1 = -(c*t1 + b*t1*t1 + t1*t1*t1/3.0);\n  float i2 = -(c*t2 + b*t2*t2 + t2*t2*t2/3.0);\n  return (i2-i1)*(3.0/4.0);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// License: CC0, author: Mårten Rånge, found: https://github.com/mrange/glsl-snippets\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\n// -------------------------------------------------\n// Mandelbox - https://www.shadertoy.com/view/XdlSD4\n\nconst float fixed_radius2 = 1.9;\nconst float min_radius2 = 0.1;\nconst float folding_limit = 1.0;\nconst float scale = -2.5;\n\n\nvoid sphere_fold(inout vec3 z, inout float dz) {\n  float r2 = dot(z, z);\n  if(r2 < min_radius2) {\n    float temp = (fixed_radius2 / min_radius2);\n    z *= temp;\n    dz *= temp;\n  } else if(r2 < fixed_radius2) {\n    float temp = (fixed_radius2 / r2);\n    z *= temp;\n    dz *= temp;\n  }\n}\n\nvoid box_fold(inout vec3 z, inout float dz) {\n  z = clamp(z, -folding_limit, folding_limit) * 2.0 - z;\n}\n\nfloat mb(vec3 z) {\n  float dd = length(z)-mix(2.1, 2.2, g_beat);\n  vec3 offset = z;\n  float dr = 1.0;\n\n  for(int n = 0; n < 5; ++n) {\n    box_fold(z, dr);\n    sphere_fold(z, dr);\n\n    z = scale * z + offset;\n    dr = dr * abs(scale) + 1.5;\n  }\n  \n  float d = (length(z))/abs(dr)-0.04;\n  dd = pmax(dd, -d, 0.5);\n  if (dd < d) {\n    g_quad = -1.0;\n  } else {\n    g_quad = 1.0;\n  }\n  g_quad = -g_quad;\n  d = min(d, dd);\n\n  return d;\n}\n// -------------------------------------------------\n\n\nfloat df(vec3 p) {\n  p.xz *= g_rot;\n  const float z = 1.0;\n  float d = mb(p/z)*z;\n  \n  return d; \n} \n\nfloat rayMarch(in vec3 ro, in vec3 rd, out int iter) {\n  float t = 2.0;\n  int i = 0;\n  for (i = 0; i < MAX_RAY_MARCHES; i++) {\n    float d = df(ro + rd*t);\n    if (d < TOLERANCE || t > MAX_RAY_LENGTH) break;\n    t += d;\n  }\n  iter = i;\n  return t;\n}\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORMTOL, 0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nfloat softShadow(in vec3 pos, in vec3 ld, in float ll, float mint, float k) {\n  const float minShadow = 0.25;\n  float res = 1.0;\n  float t = mint;\n  for (int i=0; i<25; ++i) {\n    float distance = df(pos + ld*t);\n    res = min(res, k*distance/t);\n    if (ll <= t) break;\n    if(res <= minShadow) break;\n    t += max(mint*0.2, distance);\n  }\n  return clamp(res,minShadow,1.0);\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n  const vec3 lightPos0  = 2.5*vec3(1.0, 1.0, 1.0);\n  const vec3 lightPos1  = vec3(0.0);\n\n  const vec3 scol = HSV2RGB(vec3(0.0, 0.95, 0.005));\n  vec3 skyCol = vec3(0.0);\n  float a = atan(rd.x, rd.z);\n  for (int i = 0; i < 2; ++i) {\n    float off = texture(iChannel0, vec2(0.15*(a+3.0*float(i)+PI), 0.75)).x;\n\n    skyCol += scol/max(abs(rd.y+0.3+0.2*off)-0.001, 0.0);\n  }\n\n  int iter = 0;\n  float t = rayMarch(ro, rd, iter);\n  float quad = g_quad;\n\n  float tt = float(iter)/float(MAX_RAY_MARCHES);\n  float bs = 1.0-tt*tt*tt*tt;\n \n  vec3 pos = ro + t*rd;    \n  float beat = g_beat;\n  float lsd1  = sphered(ro, rd, vec4(lightPos1, mix(2.3, 2.4, beat)), t);\n\n  const vec3 bcol0 = HSV2RGB(vec3(0.6, 0.6, 3.0));\n  const vec3 bcol1 = HSV2RGB(vec3(0.55, 0.8, 7.0));\n  vec3 bcol   = mix(bcol0, bcol1, beat);\n  vec3 gcol   = lsd1*bcol;\n\n  if (t >= MAX_RAY_LENGTH) {\n    return skyCol+gcol;\n  }\n\n  float d     = df(pos);  \n  vec3 nor    = normal(pos);\n  float fre   = 1.0+dot(nor, rd);\n  fre *= fre;\n  fre *= fre;\n\n  vec3 lv0    = lightPos0 - pos;\n  float ll20  = dot(lv0, lv0);\n  float ll0   = sqrt(ll20);\n  vec3 ld0    = lv0 / ll0;\n  float dm0   = 8.0/ll20;\n  float sha0  = softShadow(pos, ld0, ll0, 0.125, 32.0);\n  float dif0  = max(dot(nor,ld0),0.0)*dm0;\n  float spe0  = pow(max(dot(reflect(rd, nor), ld0), 0.), 10.0);\n\n\n  vec3 col = vec3(0.0);\n  quad = -quad;\n  const vec3 black = vec3(0.0);\n#if defined(THEME0)\n  const vec3 dcol0 = HSV2RGB(vec3(0.6, 0.5, 1.0));\n  const vec3 dcol1 = black;\n#elif defined(THEME1)\n  const vec3 dcol0 = HSV2RGB(vec3(0. , 0.75, -0.25));\n  const vec3 dcol1 = HSV2RGB(vec3(0.08, 1.0, 1.0));\n#else\n  const vec3 dcol0 = black;\n  const vec3 dcol1 = dcol0;\n#endif\n  col += dif0*dif0*sha0*mix(dcol0, dcol1, 0.5+0.5*quad);\n  col += spe0*bcol*bs*sha0;\n  col += gcol;\n\n  return col;\n}\n\nvec3 effect(vec2 p) {\n  float fft = 0.0;\n  fft += texture(iChannel0, vec2(0.3, 0.25)).x;\n  fft += texture(iChannel0, vec2(0.2, 0.25)).x;\n  fft += texture(iChannel0, vec2(0.1, 0.25)).x;\n  fft /= 3.0;\n\n  float beat = tanh_approx(8.0*max(fft-0.5, 0.0));\n  beat *= beat;\n  beat *= beat;\n  \n  g_beat = beat;\n\n  g_rot = ROT(-0.1*TIME-0.1*beat);\n  vec3 cam  = 5.0*vec3(1.0, 0.5, 1.0);\n  vec3 dcam = normalize(vec3(0.0) - cam);\n\n  vec3 ro = cam;\n  vec3 ww = dcam;\n  vec3 uu = normalize(cross(vec3(0.0,1.0,0.0), ww));\n  vec3 vv = cross(ww,uu);\n  float rdd = tan(TAU/mix(5.5, 5.0, beat*(0.5+0.8*length(p))));\n  vec3 rd = normalize(-p.x*uu + p.y*vv + rdd*ww);\n\n  vec3 col = render(ro, rd);\n  return col;\n}\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1.0 + 2.0*q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect(p);\n  col += 2.0*smoothstep(1.0, 0.0, TIME);\n  col = aces_approx(col);\n  col = sRGB(col);\n  \n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 29680,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/ultrasyd/shitstep-game-boy?si=7d4cbcb348ce453f8849ac639a37b790&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}