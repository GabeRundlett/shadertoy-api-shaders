{
    "Shader": {
        "info": {
            "date": "1570570515",
            "description": "was trying stuffs with matrix and... well it didn't work so i made legs with a lot of sphere instead of a cylinder looking at the creature.",
            "flags": 0,
            "hasliked": 0,
            "id": "WsV3RV",
            "likes": 4,
            "name": "Shadertober 08 Frail",
            "published": 3,
            "tags": [
                "raymarching",
                "monster",
                "inktober"
            ],
            "usePreview": 0,
            "username": "GreenChicken",
            "viewed": 375
        },
        "renderpass": [
            {
                "code": "// SHADERTOBER 08 Frail\n// Poulet Vert 08-10-2019\n// thanks to iq, leon\n\n////////////////////////////////////////////////////////////////////////////////\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\nfloat sat(float a) {return clamp(a, .0, 1.); }\n\nfloat opU(float s1, float s2) { return min(s1, s2);}\n\nvec2 opU2(vec2 d1, vec2 d2) { return (d1.x < d2.x) ? d1 : d2; }\n\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nvec3 opRep(vec3 p, vec3 c)\n{\n    return mod(p+0.5*c, c)-0.5*c;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0);\n}\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdLeg(vec3 p, vec3 t, int legnum, float legsize, float smoothsize)\n{\n    float leg = sdSphere(p, legsize);\n    for(int i=0;i<legnum;i++)\n    {\n        vec3 dist = (t - p)*float(i)/float(legnum);\n        leg = opSmoothUnion(leg, sdSphere(p+dist, legsize), smoothsize);\n    }\n    return leg;\n}\n\nvec2 map(vec3 pos)\n{\n    vec2 t = vec2(0.0,0.0);\n    \n    // ground\n    t.x = pos.y;\n    \n    // poto\n    vec3 potop = pos + vec3(2., -0.5, 3.0);\n    potop = opRep(potop, vec3(4.0, 0.0, 6.0));\n    float prep = sdCappedCylinder(potop, .5, .3);\n    float pp = opI(prep, sdBox(pos+vec3(0.0), vec3(7.0, 5.0, 10.0)));\n    vec2 poto = vec2(pp, 1.0);\n    \n    // *****\n    // monster\n    // head\n    vec3 headp = pos + vec3(sin(iTime), -3., -5.0);\n    float randShape = sin(pos.y*10.+iTime)*.05;\n    vec3 headpFX = headp;\n    headpFX.xz += randShape;\n    float head = sdSphere(headpFX, 1.0);\n    // eyes\n    vec3 eyep = headp + vec3(0.5, -0.05, -1.0);\n    eyep.y *= .5;\n    float eye = sdSphere(eyep, .05);\n    eyep = headp + vec3(-0.5, -0.05, -1.0);\n    eyep.y *= .5;\n    eye = opU(eye, sdSphere(eyep, .05));\n    // legs\n    int legpartnumber = 10;\n    float legSize = .1;\n    float legsmoothsize = .55;\n    float leg1 = sdLeg(pos + vec3(2.0, -1.0, -9.0), headp+vec3(.5, .5,-.5), legpartnumber, legSize, legsmoothsize);\n    float leg2 = sdLeg(pos + vec3(-2.0, -1.0, -9.0), headp+vec3(-.5,.5,-.5), legpartnumber, legSize, legsmoothsize);\n    float leg3 = sdLeg(pos + vec3(2.0, -1.0, -3.0), headp+vec3(.5, .5,-.5), legpartnumber, legSize, legsmoothsize);\n    float leg4 = sdLeg(pos + vec3(-2.0, -1.0, -3.0), headp+vec3(-.5,.5,-.5), legpartnumber, legSize, legsmoothsize);\n    \n    vec2 monster = vec2(head, 2.0);\n    vec2 eyes = vec2(eye, 3.0);\n    vec2 legs1 = vec2(leg1, 2.0);\n    vec2 legs2 = vec2(leg2, 2.0);\n    vec2 legs3 = vec2(leg3, 2.0);\n    vec2 legs4 = vec2(leg4, 2.0);\n    \n    // merge\n    t = opU2(t, poto);\n    t = opU2(t, monster);\n    t = opU2(t, eyes);\n    t = opU2(t, legs1);\n    t = opU2(t, legs2);\n    t = opU2(t, legs3);\n    t = opU2(t, legs4);\n    \n    return t;\n}\n\nvec2 CastRay(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    \n    for(int i=0 ; i<64 ; i++)\n    {\n        vec2 ray = map(ro + rd * t);\n        \n        if(ray.x < (0.0001*t))\n        {\n            return vec2(float(i)/64., ray.y);\n        }\n        \n        t += ray.x;\n    }\n    \n    return vec2(-1.0, 0.0);\n}\n\nvec3 GetNormal (vec3 p) \n{ \n    vec2 e = vec2(0.01, 0.0); \n    return normalize(vec3(\n        map(p+e.xyy).x-map(p-e.xyy).x,\n        map(p+e.yxy).x-map(p-e.yxy).x,\n        map(p+e.yyx).x-map(p-e.yyx).x\n        )); \n}\n\nvec3 Render(vec3 ro, vec3 rd, vec2 uv)\n{\n    vec2 t = CastRay(ro, rd);\n    vec3 pos = ro+rd*t.x;\n    vec3 col = vec3(0.0);\n    float depth = clamp(pos.z, 0.0, 1.0);\n    depth = 1.0 - sat(pos.z*.1);\n            \n    if(t.x == -1.0)\n    {\n        \n        col = vec3(pos.z);\n        \n    }\n    else\n    {\n        float glp = clamp(length(pos)*.1, 0.0, 1.0);\n        vec3 N = GetNormal(ro+rd*t.x);\n        vec3 L = vec3(1.0, 1.0, 0.0);\n        float light = dot(N,L);\n        \n        if(t.y == 0.0) col = vec3(t.x*1.0);\n        if(t.y == 1.0) col = vec3(t.x*1.4);\n        if(t.y == 2.0) col = vec3(0.0);\n        if(t.y == 3.0) col = vec3(1.0, .25, 0.5);\n    }\n    \n    return col;\n}\n\nvec3 GetViewDir(vec2 uv, vec3 cp, vec3 ct)\n{\n    vec3 forward = normalize(ct - cp);\n    vec3 right = normalize(cross(vec3(0.0, -1.0, 0.0), forward));\n    vec3 up = normalize(cross(right, forward));\n    \n    return normalize(uv.x * right + uv.y * up + 2.0 * forward);\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 cp = vec3(0.0, 2.0, 14.);\n    vec3 ct = vec3(0.0, 0.0, 0.0);\n    \n    vec3 vd = GetViewDir(uv, cp, ct);\n    \n    vec3 col = vec3(length(uv));\n    \n    col = Render(cp, vd, uv);\n    col.x -= (1.0-length(uv))*.5;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}