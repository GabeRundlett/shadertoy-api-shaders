{
    "Shader": {
        "info": {
            "date": "1654273514",
            "description": "TP5",
            "flags": 0,
            "hasliked": 0,
            "id": "sstcDl",
            "likes": 1,
            "name": "TP 5",
            "published": 3,
            "tags": [
                "zinedine"
            ],
            "usePreview": 0,
            "username": "zinedine",
            "viewed": 194
        },
        "renderpass": [
            {
                "code": "// Texturing\n// Zidane Zinedine\n\n\nconst float View = 2800.0;  // View distance\nconst float Epsilon = 0.01; // Marching epsilon\nconst int Steps = 400;      // Number of steps\n\n// Lipschitz constant\nconst float K=1.0;\n\n// Terrain -----------------------------------------------------------------------------------------------\n\n//PLATEAU\n\nfloat plateau(float h, float e, float a)\n{\n    if ((h<e)||(h>e+a)){ return h;}\n   float u = (h-e)/((e+a)-e);\n    float c = u*u;\n    h = e + a*c;\n    return h;\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nfloat Intersection(float a,float b)\n{\n    return max(a,b);\n}\n\nfloat Union(float a, float b)\n{\n    return min(a,b);\n}\n\n// Terrain heightfield\n// x : Position in the plane\nfloat Terrain( in vec2 p )\n{\n\treturn 50.0*sin(p.x/120.0)*cos(p.y/90.0);\n} \n\nfloat Terre (in vec2 p)\n{\n    return FbmRidge(p,200.0, 140.0, 9);\n}\n\nfloat mer(in vec2 p)\n{\n    return FbmRidge(p,20.0, 10.0, 2);\n}\n\n// Implicit surface defining the terrain\n// p : Point\nfloat ImplicitTerrain(in vec3 p)\n{\n    float z = Terre( p.xy );\n    float h = (p.z - z)/2.0; \n    return h;\n}\n\nfloat ImplicitTerrain1(in vec3 p)\n{\n    float z = mer( p.xy );\n    float h = (p.z - z)/2.0; \n    return h;\n}\n\n\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere \n// p : Point\n// c : Center \n// r : Radius\nfloat Sphere(vec3 p, vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n\n\n// Scene --------------------------------------------------------------------------\n\n// Potential field of the object\n// p : point\nfloat Object(vec3 p)\n{\n  float a = ImplicitTerrain1(p+iTime*vec3(27,27,0));\n  float u = Union(ImplicitTerrain(p),a);\n\n  return u;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n    float v = Object(p);\n  n.x = Object( vec3(p.x+eps, p.y, p.z) ) - v;\n  n.y = Object( vec3(p.x, p.y+eps, p.z) ) - v;\n  n.z = Object( vec3(p.x, p.y, p.z+eps) ) - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = Object(p);\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v/K);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n\n\n// Shading and lighting ---------------------------------------------------------------------------\n\n\nvec3 TextureWater(in vec3 p)\n{\n  return vec3(0.52,0.75,0.91);   \n}\n\nvec3 TextureRock(in vec3 p)\n{\n  return mix(vec3(0.92,0.91,0.90),vec3(0.74,0.72,0.72),Fbm(p/50.0));   \n}\n\n\nvec3 TextureBorder(in vec3 p)\n{\n    return vec3(0.25,0.24,0.24);   \n}\n\n// Compute color \n// p : Point\n// n : Normal\nvec3 Color(in vec3 p,in vec3 n)\n{\n    return TextureBorder(p);\n}\n\n// Rendering \n// ro, rd : Ray origin and direction\n// pip : Picture in picture boolean\nvec4 Render( in vec3 ro, in vec3 rd, bool pip )\n{\n    // Light direction\n    vec3 light1 = normalize( vec3(-0.8,-0.3,0.4) );\n   \n    \n\tvec3 col;\n    int it;\n    bool b;\n    float t = SphereTrace( ro, rd, View,b , it);\n\tvec3 p = ro + t*rd;\n    float vp= Object(p);\n    vec3 n = ObjectNormal( p );\n\n\n    col = Color(p,n);\n    // Sky\n    if( b==false )\n    {\n        col = vec3(0.35,0.65,0.95) - rd.z*rd.z*2.5;\n    }\n\telse \n\t{\n        vec3 ref = reflect( rd, n );\n        float fre = clamp( 1.0+dot(rd,n), 0.0, 1.0 );\n        vec3 hal = normalize(light1-rd);\n                   \n\n         // Pseudo diffuse lighting\n\t\tfloat dif = 0.5*(1.0+dot( light1, n ));\n        dif*=dif;\n        \n        col = 0.45*col+0.55*dif*vec3(0.35,0.35,0.35);\n\t}\n    \n    // Shading for iterations\n    if (pip==true)\n    {\n    \tfloat s=float(it)/float(Steps);\n\t\treturn vec4(0.112+0.824*s,0.418+0.556*s,0.611-0.515*s,t);\n    }\n    else\n    {\n    \t// Gamma with square root\n    \treturn vec4( sqrt(col), t );\n    }\n}\n\nvec2 RayDirection(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Picture in picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // Time as function of the position of the mouse\n    float a = 3.14*2.0*1.5*iMouse.x/iResolution.x;\n\n    // Camera transform\n    vec3 ro; \n    mat3 cam = Camera( a, ro);   \n\n    // Picture in picture\n    bool pip=true;\n    \n    // Pixel coordinates\n    vec2 p = RayDirection(fragCoord, pip);\n   \n    // Camera ray    \n    vec3 rd = cam * normalize(vec3(p,5.0));\n    \n    // Render\n    vec4 res = Render( ro, rd, pip );\n     \n    fragColor = vec4( res.xyz, 0.0 );\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Texturing\n// Zinedine Zidane\n\n// Texturing and noise ---------------------------------------------------------\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in the plane\nfloat Hash(in vec2 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix( Hash(i+vec2(0,0)), \n                        Hash(i+vec2(1,0)),f.x),\n                   mix( Hash(i+vec2(0,1)), \n                        Hash(i+vec2(1,1)),f.x),f.y);\n}\n\n// Fractal brownian motion with 4 frequencies\n// p : Point\nfloat Fbm(in vec3 p)\n{\n    return Noise(p)/2.0+Noise(p*2.0)/4.0+Noise(p*4.0)/8.0+Noise(p*8.0)/16.0;\n}\n\nfloat Fbmc(vec2 p, float l, float a, int d)\n{\n    float t=0.0;\n        for(int i = 0; i<0; i++)\n        {\n            t+= a*Noise(p/l);\n            a*=0.5;\n            l*=0.5;\n        }\n    return t;\n}\n\nfloat ridge (vec2 p)\n{\n     float c = 1.0-2.0*abs(Noise(p));\n     return c;\n}\n\nfloat FbmRidge(vec2 p, float l, float a, int d)\n{\n    float t = 0.0;\n    for(int i = 1; i<d; i++)\n    {\n        t += a*ridge(p/l);\n        a *= 0.5; l *= 0.5;\n    }\n    return t;\n}\n\n\nfloat HGRF(vec2 p, float l, float a, int d, float amin, float amax)\n{\n    float t = a*ridge(p/l);\n    for(int i = 1; i<0; i++)\n    {\n        a*=0.5; l*0.5;\n        float att=smoothstep(amin, amax, t);\n        t+= att*a*ridge(p/l);\n    }\n    return t;\n}\n\n\n// Camera\n// a: Rotation angle around z axis\n// ro : Ray origin\nmat3 Camera(float a, out vec3 ro)\n{\n\tfloat range=1350.0;\n    // Origin\n    ro = vec3(range*cos(a),range*sin(a),range/4.0);\n\t\n    // Target\n    vec3 ta = vec3(0.0,0.0,0.0);\n    \n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(0.0, 0.0,1.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}