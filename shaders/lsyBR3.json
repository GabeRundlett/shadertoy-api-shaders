{
    "Shader": {
        "info": {
            "date": "1529708774",
            "description": "Sub Earth Tunnel",
            "flags": 1,
            "hasliked": 0,
            "id": "lsyBR3",
            "likes": 11,
            "name": "Sub Earth Tunnel",
            "published": 3,
            "tags": [
                "tunnel",
                "earth",
                "sub"
            ],
            "usePreview": 1,
            "username": "aiekick",
            "viewed": 1094
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nmat3 getRotXMat(float a){return mat3(1.,0.,0.,0.,cos(a),-sin(a),0.,sin(a),cos(a));}\nmat3 getRotYMat(float a){return mat3(cos(a),0.,sin(a),0.,1.,0.,-sin(a),0.,cos(a));}\nmat3 getRotZMat(float a){return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\n\nmat3 m1;\nmat3 m2;\n\nvec2 path(float t)\n{\n\treturn vec2(cos(t*0.08 + cos(t*0.1)*2.), sin(t*0.12 + sin(t*0.05)*2.5)) * 4.;\n}\n\nfloat pattern(vec3 p)\n{\n\tp = abs(fract(p*.3) - 0.5);\n\treturn length(max(abs(p.x), abs(p.y)) - p.z);\n}\n\nfloat map(vec3 p)\n{\n    vec2 pa = path(p.z); \n\tfloat a = pa.x * pa.y * 0.1;\n\t\n    p.xy -= pa;\n    p.xy *= mat2(cos(a),-sin(a),sin(a),cos(a));\n    \n\tvec3 qm1 = p*m1, qm2 = p*m2;\n\t\n    float d0 = min(pattern(qm1), pattern(qm2));\n    float d1 = min(pattern(qm1*3.), pattern(qm2*2.));\n    \n   \tfloat dist0 = (1.-clamp(d0,0.,1.));\n\tfloat dist1 = (1.-clamp(d1,0.,1.))*d0;\n\n    float di0 = length(p.xy); // tunnel\n    float di1 = abs(cos(p.x*0.3)*p.y); // planes\n    float di2 = 1.7 - 0.4 * cos(p.z*0.1) - abs(cos(p.x*0.5)*p.x + sin(p.y*0.5)*p.y); // planes\n    \n\tp.z *= 0.5;\n\t\n\tvec2 cs = vec2(cos(p.z), sin(p.z)) * 0.5 + 0.5;\n\t\n    return mix(di2, 1.47-mix(di0, di1, cs.y), cs.x) - dist0*0.75 - dist1*2.25;\n}\n\nvec3 nor( vec3 pos, float k )\n{\n\tvec3 eps = vec3( k, 0., 0. );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy) - map(pos-eps.xyy),\n\t    map(pos+eps.yxy) - map(pos-eps.yxy),\n\t    map(pos+eps.yyx) - map(pos-eps.yyx) );\n\treturn normalize(nor);\n}\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;\n}\n\n// get density of the df at surfPoint // ratio between constant step and df value\nfloat SubDensity(vec3 surfPoint, float prec, float ms) \n{\n\tvec3 n;\n\tfloat s = 0.;\n    for (int i=0;i<8;i++)\n\t{\n\t\tn = nor(surfPoint,prec); \n\t\tsurfPoint = surfPoint - n * ms; \n\t\ts += map(surfPoint);\n\t}\n\t\n\treturn 1.-s/(ms*8.); // s < 0. => inside df\n}\n\nfloat SubDensity(vec3 p, float s) \n{\n\tvec3 n = nor(p,s);\n\treturn map(p - n * s);\n}\n\n// from shane\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n )\n{\n    n = max((abs(n) - .2)*7., .001);\n    n /= (n.x + n.y + n.z );  \n    p = (texture(tex, p.yz)*n.x + texture(tex, p.zx)*n.y + texture(tex, p.xy)*n.z).xyz;\n    return p*p;\n}\n\n// from shane\nvec3 doBumpMap( sampler2D tx, in vec3 p, in vec3 n, float bf)\n{\n    const vec2 e = vec2(0.001, 0);\n    mat3 m = mat3( tex3D(tx, p - e.xyy, n), tex3D(tx, p - e.yxy, n), tex3D(tx, p - e.yyx, n));\n    vec3 g = vec3(0.299, 0.587, 0.114)*m; // Converting to greyscale.\n    g = (g - dot(tex3D(tx,  p , n), vec3(0.299, 0.587, 0.114)) )/e.x; g -= n*dot(n, g);\n    return normalize( n + g*bf ); // Bumped normal. \"bf\" - bump factor.\n}\n\nvec4 shade(vec3 ro, vec3 rd, float d, vec3 lp)\n{\n\tvec3 p = ro + rd * d;\t\t\t\t\t\t\t\t\t\t\t// surface point\n\tfloat sb = SubDensity(p, 0.01, 0.1);\t\t\t\t\t\t\t// deep subdensity (10 iterations)\n\tvec3 bb = blackbody(100.*sb+100.);\t\t\t\t\t\t\t\t// bb\n\tvec3 ld = normalize(lp-p); \t\t\t\t\t\t\t\t\t\t// light dir\n\tvec3 n = nor(p, .01);\t\t\t\t\t\t\t\t\t\t\t// normal at surface point\n\tn = doBumpMap(iChannel0, -p*0.5, n, 0.015);\n\tvec3 refl = reflect(rd,n);\t\t\t\t\t\t\t\t\t\t// reflected ray dir at surf point \n\tfloat amb = 0.08; \t\t\t\t\t\t\t\t\t\t\t\t// ambiance factor\n\tfloat diff = clamp( dot( n, ld ), 0.0, 1.0 ); \t\t\t\t\t// diffuse\n\tfloat fre = pow( clamp( 1. + dot(n,rd),0.0,1.0), 16. ); \t\t\t// fresnel\n\tfloat spe = pow(clamp( dot( refl, ld ), 0.0, 1.0 ),25.);\t\t// specular\n\tfloat sss = 1. - SubDensity(p*0.1, 0.1) * 0.5; \t\t\t\t\t\t\t// one step sub density of df\n\treturn vec4(\n        (diff + fre + bb.x * sss) * amb + diff * 0.5, \n        (diff + fre + bb * sb + sss * 0.3) * amb + spe * 0.6 - diff * sss * 0.05\t\n    );\n}\n\nvec4 render(vec3 ro, vec3 rd, float time)\n{\n    vec3 lp = vec3(path(time + 3.),time + 3.);\n    \n    float s = 1.;\n    float d = 0.;\n\t\n\tfor(int i=0;i<80;i++)\n    {      \n        if (d*d/s>1e5) break;\n        d += s = map(ro+rd*d) * .6;\n\t}\n\t\n    vec3 p = ro+rd*d;\n    vec3 n = nor(p, 0.01);\n        \n    vec4 f = shade(ro, rd, d, lp);\n\t\n\tf = f.zyww + f.x*0.2;\n\n    float fog = 1.0-exp( -0.01*d*d );\n    f = mix( f, vec4(0.8), fog);\n       \n\tf = mix(f, f.grba, sin(fog*5.));\n   \treturn sqrt(f*f*f*1.5);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    vec4 f = vec4(0);\n    \n    vec2 g = fragCoord.xy;\n    vec2 si = iResolution.xy;\n    \n    mat3 mx = getRotXMat(-7.);\n\tmat3 my = getRotYMat(-5.);\n\tmat3 mz = getRotZMat(-3.);\n\t\n    m1 = mx * my * mz;\n    m2 = m1 * m1;\n\t\n    float time = iTime * 5.;\n    \n    vec3 cu = vec3(0,1,0);\n  \tvec3 cv = vec3(path(time + .1),time + .1);\n\t\n  \tvec2 uv = (g+g-si)/si.y;\n    \n    vec3 ro = vec3(path(time),time);\n    \n\tvec2 fov = vec2(0.75,0.9);\n  \tvec3 z = normalize(cv-ro);\n    vec3 x = normalize(cross(cu,z));\n  \tvec3 y = cross(z,x);\n  \tvec3 rd = normalize(z + uv.x*x*fov.x + uv.y*y*fov.y);\n    \n    fragColor = render(ro, rd, time);\n}\n\nvoid mainVR(out vec4 fragColor, vec2 fc, vec3 ro, vec3 rd) \n{\n    mat3 mx = getRotXMat(-7.);\n\tmat3 my = getRotYMat(-5.);\n\tmat3 mz = getRotZMat(-3.);\n\t\n    m1 = mx * my * mz;\n    m2 = m1 * m1;\n\t\n    float time = iTime * 5.;\n    \n    ro += vec3(path(time), time);\n\n    fragColor = render(ro, rd, time);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}