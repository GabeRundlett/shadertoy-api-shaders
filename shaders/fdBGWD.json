{
    "Shader": {
        "info": {
            "date": "1617378359",
            "description": "A limited smooth mod operator based on the infinite one by @blackle in this shadertoy: [url=https://www.shadertoy.com/view/wlyBWm]https://www.shadertoy.com/view/wlyBWm[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "fdBGWD",
            "likes": 13,
            "name": "Limited Smooth Mod",
            "published": 3,
            "tags": [
                "sdf",
                "mod",
                "smooth",
                "repeat",
                "operator",
                "limited",
                "smod"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 272
        },
        "renderpass": [
            {
                "code": "// SDFs\nfloat sdBox(in vec3 p, in vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(0.0, max(q.x, max(q.y, q.z)));\n}\n\n// Distance operators\n// Use continuous! It will look a lot nicer.\n// Be sure to choose a span that that is a close multiple of the\n// repeat size (times pi because of the trig) otherwise the edges\n// will get really stretched due to the space distortions by the smooth mod.\nfloat smoothModLim(in float x, in float span, in float size, in float smoothness, in bool continuous) {\n    float m = 1.0 - smoothness;\n    float ss = span / size;\n\n    float sModX = asin(sin(x / size) * m) * size;\n\n    float slope = 1.0;\n    float offs = asin(sin(ss) * m) * size;\n\n    if (continuous) {\n        float s = sin(ss);\n        slope = m * cos(ss) / sqrt(1.0 - m * m * s * s);\n    }\n\n    // The mixes are a (shorter) alternative for ifs and elses\n    float sModLimX = mix(sModX, (x - span) * slope + offs, step(span, x));\n    sModLimX = mix(sModLimX, (x + span) * slope - offs, step(span, -x));\n\n    return sModLimX;\n}\n\n// Overloading for vec2\nvec2 smoothModLim(in vec2 x, in vec2 span, in vec2 size, in float smoothness, in bool continuous) {\n    x.x = smoothModLim(x.x, span.x, size.x, smoothness, continuous);\n    x.y = smoothModLim(x.y, span.y, size.y, smoothness, continuous);\n    return x;\n}\n\n// Overloading for vec3\nvec3 smoothModLim(in vec3 x, in vec3 span, in vec3 size, in float smoothness, in bool continuous) {\n    x.xy = smoothModLim(x.xy, span.xy, size.xy, smoothness, continuous);\n    x.z = smoothModLim(x.z, span.z, size.z, smoothness, continuous);\n    return x;\n}\n\n// Scene\nfloat mapScene(in vec3 p) {\n    p = smoothModLim(p, vec3(6.0), vec3(1.5), 0.3, true);\n\n    float c = cos(iTime), s = sin(iTime);\n    p.xz *= mat2(c, -s, s, c);\n    p.yz *= mat2(c, -s, s, c);\n\n    return sdBox(p, vec3(1.0, 0.25, 1.5)) - 0.2;\n}\n\n// Gradient\nvec3 getNormal(in vec3 p) {\n    vec3 e = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(mapScene(p + e.xyy) - mapScene(p - e.xyy),\n                          mapScene(p + e.yxy) - mapScene(p - e.yxy),\n                          mapScene(p + e.yyx) - mapScene(p - e.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n\n    vec2 mouse = true ? (iMouse.xy - center) / iResolution.y * 3.14 : vec2(0.0);\n    vec2 uv = (fragCoord - center) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 25.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    // Sky\n    fragColor = vec4(mix(vec3(0.25, 0.25, 1.0), vec3(1.0), 0.5 + 0.5 * rd.y), 1.0);\n\n    // Raymarch\n    float t = 0.0, d;\n    for (int i=0; i < 150; i++) {\n        vec3 p = ro + rd * t;\n        d = mapScene(p);\n        if (d < 0.001) {\n            vec3 n = getNormal(p);\n            vec3 l = vec3(-0.58, 0.58, 0.58);\n\n            vec3 color = abs(n) * 1.25;\n            fragColor.rgb = color * max(0.2, dot(n, l));\n\n            break;\n        }\n\n        if (t > 50.0) {\n            break;\n        }\n\n        t += d;\n    }\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}