{
    "Shader": {
        "info": {
            "date": "1598393078",
            "description": "Simple ripple effect that stops at borders, not optimized.",
            "flags": 0,
            "hasliked": 0,
            "id": "wlSBzW",
            "likes": 2,
            "name": "Border Ripple effect",
            "published": 3,
            "tags": [
                "2d",
                "distancefield",
                "rippleeffect"
            ],
            "usePreview": 1,
            "username": "Darkimage",
            "viewed": 384
        },
        "renderpass": [
            {
                "code": "//Created by Luca Faggion \n\nconst float maxsize = 1.1;\nconst float offset = 0.05;\nconst float speed = 1.5;\nconst vec2 uvoffset = vec2(0.2,0.2);\nconst bool useDisplacement = true;\nconst bool useMouse = true;\n\n\n//All df function taken from the df master iq\n//https://iquilezles.org/articles/distfunctions\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat opUnion( float d1, float d2 ) {  return min(d1,d2); }\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nfloat displacement(float d1, vec3 p, sampler2D channel, float strength, float tile)\n{\n    float d2 = texture(iChannel0, p.xy*tile).x * strength;\n    return d1+d2;\n}\n\nfloat scene(vec2 uv) {\n    vec3 uvs = vec3(uv,0.);\n    vec3 sphereuvs = vec3(uv - uvoffset,0.);\n    if(useMouse){\n    \tvec2 mouseuv = iMouse.xy/iResolution.yy - vec2((iResolution.x/iResolution.y)/2.,0.5);\n        sphereuvs = vec3(uv - mouseuv,0.);\n    }\n\tfloat scene = 0.;\n    float sphere = sdSphere(sphereuvs, maxsize*(sin(iTime*speed)/2.+0.5));\n    float sphere2 = sdSphere(sphereuvs, maxsize*(sin(iTime*speed)/2.+0.5) + offset);\n    float box = sdRoundBox(uvs, vec3(0.79,0.41,1.0), 0.05);\n    if(useDisplacement){\n    \tsphere2 = displacement(sphere2, uvs, iChannel0, 0.1, 0.7);\n    \tsphere = displacement(sphere, uvs, iChannel0, 0.1, 0.7);\n        box = displacement(box, uvs, iChannel0, 0.04, 01.2);\n    }\n    scene = sphere;\n    scene = opIntersection(scene,box);\n    scene = opSubtraction(scene,sphere2);\n\treturn scene;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1) with 1-1 ration (square)\n    vec2 uv = (fragCoord/iResolution.yy) - vec2((iResolution.x/iResolution.y)/2.,0.5);\n    \n    //Render the dfs\n    float render = scene(uv);\n    \n    //Hard Edge Visualization https://www.ronja-tutorials.com/2018/11/10/2d-sdf-basics.html#visualisation\n    float distanceChange = fwidth(render) * 5.; //change the multiply to soften the edges\n    float antialiasedCutoff = smoothstep(distanceChange, -distanceChange, render);\n    \n    //Final output\n    float scenecolor = antialiasedCutoff;\n    fragColor = vec4(scenecolor,scenecolor,scenecolor,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}