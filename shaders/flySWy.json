{
    "Shader": {
        "info": {
            "date": "1641274255",
            "description": "WOW (look around with the mouse, change parameters)\nExperimenting with this crazy fractal I discovered ---> [url=https://www.shadertoy.com/view/ssVXDm]https://www.shadertoy.com/view/ssVXDm[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "flySWy",
            "likes": 12,
            "name": "Fractal Night",
            "published": 3,
            "tags": [
                "fractal",
                "psychedelic",
                "abstract",
                "vangogh"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 412
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define TAU 6.28318530718\n\n// Please tell me if it would be better to comment this out by default\n// I tried prerendering it in Cubemap A but I couldn't get the right look\n#define AA\n\n// Time freeze\n#define iTime 9.73\n\n// vec4(a, b, c, d) = a + bi + cj + dk\nvec4 qmul(in vec4 p, in vec4 q) {\n    return vec4(p.x * q.x - p.y * q.y - p.z * q.z - p.w * q.w,\n                p.x * q.y + p.y * q.x + p.z * q.w - p.w * q.z,\n                p.x * q.z - p.y * q.w + p.z * q.x + p.w * q.y,\n                p.x * q.w + p.y * q.z - p.z * q.y + p.w * q.x);\n}\n\nvec4 qconj(in vec4 p) {\n    return vec4(p.x, -p.yzw);\n}\n\nvec4 qinv(in vec4 q) {\n    return qconj(q) / dot(q, q);\n}\n\nvec3 qNewton(in vec4 q) {\n    vec4 a = vec4(1.5 + 0.1 * cos(iTime) + 0.01, 2.0, 1.0, 0.25);\n    vec4 b = vec4(-1.0, 0.65 + 0.1 * sin(iTime), 2.0 + 0.1 * sin(2.0 * iTime - 0.2), -0.1);\n    vec4 c = vec4(-1.2, 1.25, 1.5, 1.3 + cos(0.5 * iTime + 0.1));\n\n    for (int i=0; i < 100; i++) {\n        vec4 qa = q - a, qb = q - b, qc = q - c;\n        vec4 f = qmul(qa, qmul(qb, qc));\n        vec4 df = qmul(qa + qb, qc) + qmul(qa, qb);\n        q -= qmul(f, qinv(df));\n    }\n\n    return 0.5 * vec3(q.x, mix(q.y, q.w, 0.8), q.z);\n}\n\nvoid render(inout vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y;\n\n    if (ivec2(iMouse.xy) == ivec2(0)) mouse = vec2(-0.39, -0.02);\n    mouse *= PI;\n\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    //fragColor += texture(iChannel0, vec2(atan(rd.z, rd.x), atan(rd.y, length(rd.xz))) / vec2(TAU, PI) + 0.5);\n    float norm10 = pow(pow(abs(rd.x), 10.0) + pow(abs(rd.y), 10.0) + pow(abs(rd.z), 10.0), 0.1);\n    fragColor.rgb += qNewton(10.0 * vec4(rd / norm10 * 1.5, sin(iTime)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0);\n    render(fragColor, fragCoord);\n\n    #ifdef AA\n    render(fragColor, fragCoord + vec2(0.5, 0.0));\n    render(fragColor, fragCoord + vec2(0.0, 0.5));\n    render(fragColor, fragCoord + 0.5);\n    fragColor /= 4.0;\n    #endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}