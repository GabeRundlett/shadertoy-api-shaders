{
    "Shader": {
        "info": {
            "date": "1483850929",
            "description": "Computing second derivatives for Value Noise analytically, and curvature from it. Not super useful. See [url]https://www.shadertoy.com/view/MdsSRs[/url] for the 2D case, [url]https://www.shadertoy.com/view/XttSz2[/url] for the analytical normals in use.",
            "flags": 0,
            "hasliked": 0,
            "id": "Mt3SWX",
            "likes": 21,
            "name": "Hessian 3D and curvature",
            "published": 3,
            "tags": [
                "3d",
                "derivative",
                "analytic",
                "hessian"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1519
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2016 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// Analytical second derivatives of value noise and fbm made with it.\n// Used second derivatives to compute the hessian and the curvature.\n// Yellow: negative curvature, Blue: possitive curvature.\n\n\nfloat hash( float n ) { return fract(sin(n)*753.5453123); }\n\n//---------------------------------------------------------------\n// return.x   = value noise\n// return.xyz = derivatives (gradient)\n// out dd     = hessian (second derivatives)\n//---------------------------------------------------------------\n\nvec4 noised( in vec3 x, out mat3 dd )\n{\n    vec3 p = floor(x);\n    vec3 w = fract(x);\n\n    // cubic interpolation vs quintic interpolation\n#if 0\n    vec3 u = w*w*(3.0-2.0*w);\n    vec3 du = 6.0*w*(1.0-w);\n    vec3 ddu = 6.0 - 12.0*w;\n#else\n    vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);\n    vec3 du = 30.0*w*w*(w*(w-2.0)+1.0);\n    vec3 ddu = 60.0*w*(1.0+w*(-3.0+2.0*w));\n#endif\n    \n    \n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    \n    float a = hash(n+  0.0);\n    float b = hash(n+  1.0);\n    float c = hash(n+157.0);\n    float d = hash(n+158.0);\n    float e = hash(n+113.0);\n\tfloat f = hash(n+114.0);\n    float g = hash(n+270.0);\n    float h = hash(n+271.0);\n\t\n    float k0 =   a;\n    float k1 =   b - a;\n    float k2 =   c - a;\n    float k3 =   e - a;\n    float k4 =   a - b - c + d;\n    float k5 =   a - c - e + g;\n    float k6 =   a - b - e + f;\n    float k7 = - a + b + c - d + e - f - g + h;\n\n    dd = mat3( ddu.x*(k1 + k4*u.y + k6*u.z + k7*u.y*u.z), \n               du.x*(k4+k7*u.z)*du.y,\n               du.x*(k6+k7*u.y)*du.z,\n              \n               du.y*(k4+k7*u.z)*du.x,\n               ddu.y*(k2 + k5*u.z + k4*u.x + k7*u.z*u.x),\n               du.y*(k5+k7*u.x)*du.z,\n              \n               du.z*(k6+k7*u.y)*du.x,\n               du.z*(k5+k7*u.x)*du.y,\n               ddu.z*(k3 + k6*u.x + k5*u.y + k7*u.x*u.y) );\n\n\n    return vec4( k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z, \n                 du * vec3( k1 + k4*u.y + k6*u.z + k7*u.y*u.z,\n                            k2 + k5*u.z + k4*u.x + k7*u.z*u.x,\n                            k3 + k6*u.x + k5*u.y + k7*u.x*u.y ) );\n}\n\n//---------------------------------------------------------------\n\nvec4 sdBox( vec3 p, vec3 b ) // distance and normal\n{\n    vec3 d = abs(p) - b;\n    float x = min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n    vec3  n = step(d.yzx,d.xyz)*step(d.zxy,d.xyz)*sign(p);\n    return vec4( x, n );\n}\n\nvec4 fbmd( in vec3 x, out mat3 s )\n{\n    const float scale  = 1.5;\n\n    float a = 0.0;\n    float b = 0.5;\n\tfloat f = 1.0;\n    vec3  d = vec3(0.0);\n    s = mat3(0.0);\n    for( int i=0; i<3; i++ )\n    {\n        mat3 dd;\n        vec4 n = noised(f*x*scale,dd);\n        a += b*n.x;                // accumulate values\t\t\n        d += b*n.yzw*f*scale;      // accumulate derivatives\n        s += b*dd*f*f*scale*scale; // accumulate second derivative\n        b *= 0.5;\n        f *= 1.8;\n    }\n\n\treturn vec4( a, d );\n}\n\nvec4 map( in vec3 p, out mat3 s )\n{\n    \n    mat3 dd;\n\tvec4 d1 = fbmd( p, dd );\n    d1.x -= 0.33;\n\td1.x *= 0.7;\n    d1.yzw = 0.7*d1.yzw;\n    dd *= 0.7;\n    // clip to box\n    vec4 d2 = sdBox( p, vec3(1.5) );\n    if(d1.x>d2.x)\n    {\n        s = dd;\n        return d1;\n    }\n    \n    \n    s = mat3(0.0);\n    return d2;\n}\n\n// ray-box intersection in box space\nvec2 iBox( in vec3 ro, in vec3 rd, in vec3 rad ) \n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\tif( tN > tF || tF < 0.0) return vec2(-1.0);\n\treturn vec2( tN, tF );\n}\n\n// raymarch\nvec4 interesect( in vec3 ro, in vec3 rd, out mat3 resS )\n{\n\tvec4 res = vec4(-1.0);\n    resS = mat3(0.0);\n    // bounding volume    \n    vec2 dis = iBox( ro, rd, vec3(1.5) ) ;\n    if( dis.y<0.0 ) return res;\n\n    // raymarch\n    float tmax = dis.y;\n    float t = dis.x;\n\tfor( int i=0; i<128; i++ )\n\t{\n        vec3 pos = ro + t*rd;\n        mat3 dd;\n\t\tvec4 hnor = map( pos, dd );\n        res = vec4(t,hnor.yzw);\n        resS = dd;\n\t\tif( hnor.x<0.0001 ) break;\n\t\tt += hnor.x;\n        if( t>tmax ) break;\n\t}\n\n\tif( t>tmax ) res = vec4(-1.0);\n\treturn res;\n}\n\n\n// fibonazzi points in s aphsre, more info:\n// http://lgdv.cs.fau.de/uploads/publications/spherical_fibonacci_mapping_opt.pdf\nvec3 forwardSF( float i, float n) \n{\n    const float PI  = 3.141592653589793238;\n    const float PHI = 1.618033988749894848;\n    float phi = 2.0*PI*fract(i/PHI);\n    float zi = 1.0 - (2.0*i+1.0)/n;\n    float sinTheta = sqrt( 1.0 - zi*zi);\n    return vec3( cos(phi)*sinTheta, sin(phi)*sinTheta, zi);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat ao = 0.0;\n    for( int i=0; i<32; i++ )\n    {\n        vec3 ap = forwardSF( float(i), 32.0 );\n        float h = hash(float(i));\n\t\tap *= sign( dot(ap,nor) ) * h*0.25;\n        mat3 kk;\n        ao += clamp( map( pos + nor*0.001 + ap, kk ).x*3.0, 0.0, 1.0 );\n    }\n\tao /= 32.0;\n\t\n    return clamp( ao*5.0, 0.0, 1.0 );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n   \n\t// camera anim\n    float an = 0.1*iTime;\n\tvec3 ro = 3.0*vec3( cos(an), 0.8, sin(an) );\n\tvec3 ta = vec3( 0.0 );\n\t\n    // camera matrix\t\n\tvec3  cw = normalize( ta-ro );\n\tvec3  cu = normalize( cross(cw,vec3(0.0,1.0,0.0)) );\n\tvec3  cv = normalize( cross(cu,cw) );\n\tvec3  rd = normalize( p.x*cu + p.y*cv + 1.7*cw );\n\n\t// render\n\tvec3 col = vec3(0.0);\n    mat3 dd;\n    vec4 tnor = interesect( ro, rd, dd );\n\tfloat t = tnor.x;\n\n    if( t>0.0 )\n\t{\n\t\tvec3  pos = ro + t*rd;\n        vec3  nor = normalize(tnor.yzw);\n        float occ = calcAO( pos, nor );\n\n        \n        vec3 d = tnor.yzw;\n\n        // compute curvature\n\t\tmat4 mm = mat4( dd[0].x, dd[0].y, dd[0].z, d.x,\n                        dd[1].x, dd[1].y, dd[1].z, d.y,\n                        dd[2].x, dd[2].y, dd[2].z, d.z,\n                        d.x, d.y, d.z, 0.0 );\n\t\tfloat k = -determinant(mm)/(dot(d,d)*dot(d,d));\n\n        // shape it a bit\n        k = sign(k)*pow( abs(k), 1.0/3.0 );\n        \n        col = (k<0.0) ? vec3(1.0,0.7,0.2) : vec3(0.2,0.8,1.0);\n        col *= abs(k)*0.4;\n        \n        if( abs(k)<0.0001 ) col = vec3(0.5);\n\n        col *= occ;\n        col *= 0.7 + 0.3*nor.y;\n\t}\n\n    col = sqrt(col);\n\t\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}