{
    "Shader": {
        "info": {
            "date": "1587755488",
            "description": "Another Apollonian gasket. Mouse, up, down keys to move. p for progressive display, m for mouse, a for animation.",
            "flags": 48,
            "hasliked": 0,
            "id": "tdlfzH",
            "likes": 12,
            "name": "Colourful Apollonian II",
            "published": 3,
            "tags": [
                "apollonian",
                "gasket"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 428
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// More Apollonian circles.\n// Matthew Arcus, mla, 2020\n//\n// <mouse>: move things around\n// <up>/<down>: zoom in/out\n// a: animation\n// p: progressive display\n// m: enable mouse\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst int max_iterations = 20;\nconst float PI = 3.14159265;\n\n// Smooth HSV to RGB conversion \n// Function by iq, from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb( in vec3 c ) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 getCol(vec4 n){\n  if (n.z == float(max_iterations)) return vec3(0);\n  return vec3(1);\n  vec3 col = hsv2rgb(vec3(mod(n.z/20.0,1.0),0.8,0.8));\n  //col *= 0.6+0.4*smoothstep(0.05,0.1,sqrt(n.w));\n  return col;\n}\n\nbool keypress(int code) {\n  return texelFetch(iChannel3, ivec2(code,2),0).x != 0.0;\n}\nvec4 store(int i,int j) {\n  return texelFetch(iChannel2, ivec2(i,j),0);\n}\n\nint keycount(int key) {\n  return int(store(0,key).x);\n}\n\nconst int CHAR_A = 65;\nconst int CHAR_D = 68;\nconst int CHAR_H = 72;\nconst int CHAR_J = 74;\nconst int CHAR_M = 77;\nconst int CHAR_P = 80;\nconst int CHAR_V = 86;\nconst int CHAR_Z = 90;\nconst int KEY_LEFT = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nvec2 cmul(vec2 z, vec2 w) {\n  return vec2(z.x*w.x - z.y*w.y, z.x*w.y + z.y*w.x);\n}\n\nvec2 cinv(vec2 z) {\n  return z/dot(z,z)*vec2(1,-1);\n}\n\nvec2 csqrt(vec2 z) {\n  float r = length(z);\n  return vec2(sqrt(0.5*(r+z.x)),sign(z.y)*sqrt(0.5*(r-z.x)));\n}\n\n#define AA 2.0\n\nconst float r = 1.0/(sqrt(2.0)+1.0);\nconst float R = r*tan(3.0*PI/8.0); // R = 1 in fact\nconst float r0 = r*(sqrt(2.0)-1.0);\nconst vec4 circles1[] =\n  vec4[](vec4(0,0,r0*r0,1.0),\n         vec4(r,r,r*r,1.0),\n         vec4(r,-r,r*r,1.0),\n         vec4(-r,r,r*r,1.0),\n         vec4(-r,-r,r*r,1.0),\n         vec4(0,0,1,-1.0)\n     );\nconst float R0 = r+2.0*R;\nvec4 circles2[] =\n  vec4[](vec4(0,0,r*r,1.0),\n         vec4(0,r+R,R*R,1.0),\n         vec4(0,-r-R,R*R,1.0),\n         vec4(r+R,0,R*R,1.0),\n         vec4(-r-R,0,R*R,1.0),\n         vec4(0,0,R0*R0,-1.0)\n         );\n\nfloat length2(vec2 p) {\n  return dot(p,p);\n}\n\nbool inside(vec2 p, vec4 c) {\n  float r2 = length2(p-c.xy);\n  if (c.w < 0.0) return r2 > c.z;\n  else return r2 <= c.z;\n}\n\nvec2 invert(vec2 p, vec4 c, inout float scale) {\n  p -= c.xy;\n  float s = c.z/dot(p,p);\n  scale *= abs(s);\n  p *= s;\n  p += c.xy;\n  return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  int N = circles1.length();\n  int maxsteps = 20;\n    if (keypress(CHAR_P)) {\n        maxsteps = int(iTime)%40;\n        maxsteps = min(maxsteps,40-maxsteps);\n    }// Progressive stepping\n  vec2 z0 = (2.0*fragCoord.xy - iResolution.xy)/iResolution.y;\n  float zoom = 3.0;\n  zoom *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP)));\n  // Transform to put centre at m\n  float aadelta = 1.0/(AA*iResolution.y);\n  vec3 aacol = vec3(0);\n  for (float p = 0.0; p < AA; p++) {\n    for (float q = 0.0; q < AA; q++) {\n      vec2 z = z0 + aadelta*vec2(p,q);\n      z *= zoom;\n      float scale = zoom;\n      if (!keypress(CHAR_M) && iMouse.x > 0.0) {\n        vec2 m = (2.0*iMouse.xy - iResolution.xy)/iResolution.y;\n    \tm *= zoom;\n    \tfloat k = 1.0;\n    \tfloat r = length(m);\n    \tfloat s = 0.5*(-r + sqrt(r*r + 4.0*k));\n    \tvec4 tcircle = vec4(-s/r*m,1,0);\n        z = invert(z,tcircle,scale);\n        z.x = -z.x;\n\t  }\n      if (!keypress(CHAR_A)) {\n        vec4 tcircle = vec4(sin(0.5*iTime),0,1,0);\n        z = invert(z,tcircle,scale);\n        z.x = -z.x;\n      }\n      vec2 z0 = z;\n      int step;\n      for (step = 0; step < maxsteps; step++) {\n        bool found = false;\n        for (int i = 0; i < N; i++) {\n          if (inside(z,circles2[i])) {\n            z = invert(z,circles2[i],scale);\n            found = true;\n            break;\n          }\n        }\n        if (!found) break;\n      }\n      vec3 col = vec3(0);\n      float dmin = 1e10;\n      if (true) {\n        int imin = -1;\n        for (int i = 0; i < N; i++) {\n          vec4 c = circles2[i];\n          float d = abs(length(z-c.xy) - sqrt(c.z));\n          d /= scale;\n          if (d < dmin) {\n            dmin = d;\n            imin = i;\n          }\n        }\n        if (imin >= 0) col = hsv2rgb(vec3(float(imin)/float(6),1,1));\n      }\n      \n      float lwidth = 0.005;\n\n      vec4 tt = texture(iChannel0,0.5*z0);\n      float ds = fwidth(dmin);\n      float t = 1.0-smoothstep(0.0,max(ds,lwidth*(1.0+tt.y)),dmin);\n      col *= tt.x;\n      float t1 = 1.0-t;\n      t1 *= 0.9+0.1*tt.z;\n      vec3 bg = t1*vec3(1,1,0.5);\n      col = mix(bg,0.1+0.9*col,t);\n      aacol += col;\n    }\n  }\n  aacol.xyz /= AA*AA;\n  fragColor = vec4(pow(aacol,vec3(0.4545)),1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel3,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n  int i = int(uv.x);\n  int j = int(uv.y);\n  if ( iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (i == 0) {\n    float w1 = keystate(j,2).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      t.x++;\n    }\n  }     \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}