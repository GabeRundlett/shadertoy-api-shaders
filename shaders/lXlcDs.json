{
    "Shader": {
        "info": {
            "date": "1726805650",
            "description": "source https://www.shadertoy.com/view/XXsyWl https://www.shadertoy.com/view/stsXDl",
            "flags": 0,
            "hasliked": 0,
            "id": "lXlcDs",
            "likes": 1,
            "name": "fractalic room",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 85
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\nconst int min_iterations = 0;\nconst int max_iterations = 7;\nconst float timePerIteration = 1.5;\nconst float squareHeight = 1.0;\nconst float thickness = 0.25;  // Inspired by the flag of Japan\nconst float minThicknessPx = 3.0;\nconst float edgeHalfStepLengthPx = 0.75;\nconst float verticalOffset = 1.0 / 3.0;\n\nconst float gamma = 2.2; // Used for gamma correction\nconst vec3 backgroundColor = vec3(0);\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    \n    \n    vec3 n1,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1)); \n    \n     vec2 inDir = vec2(-1,1);\n    vec2 outDir = vec2(1,1);\n    int max_k = min_iterations + int(iTime / timePerIteration) % (max(max_iterations - min_iterations, 0) + 1);\n    \n    \n    for(float i=0.,a,s,e,g=0.;\n        ++i<70.;\n        O.xyz+=mix(vec3(0.1,0.5,3.),H(g*.1),.8)*2./e/8e3\n    )\n    {\n        n1=g*d;\n        n1.yz*=mat2(cos(iTime*0.02), sin(iTime*0.02), -sin(iTime*0.02), cos(iTime*0.02));\n        n1.xz*=mat2(cos(iTime*0.02), sin(iTime*0.02), -sin(iTime*0.02), cos(iTime*0.02));\n       for (int k = 0; k < max_k; k++) {\n        int order;\n        if (n1.x < 0.5) {\n            order = 0;\n            \n            inDir  = vec2(inDir.x + inDir.y, inDir.x - inDir.y);\n            n1.xy    = vec2(  n1.x +    n1.y,    n1.x -   n1.y);\n            outDir = vec2(2, 2);\n        }\n        else {\n            order = 1;\n            inDir  = vec2(-2, 2);\n            n1.xy    = vec2(    n1.x -     n1.y, 1.0 -     n1.x -     n1.y);\n            outDir = vec2(outDir.x - outDir.y,     - outDir.x - outDir.y);\n        }}\n        a=20.;\n        n1=mod(n1-a,a*2.)-a;\n        s=3.;\n        for(int i=0;i++<8;){\n            n1=.3-abs(n1);\n            n1.x<n1.z?n1=n1.zyx:n1;\n            n1.z<n1.y?n1=n1.xzy:n1;\n            s*=e=1.7+sin(iTime*.01)*.1;\n            n1=abs(n1)*e-\n                vec3(\n                    5.*3.*sin(iTime*0.001),\n                    120,\n                    8.*5.+cos(iTime)\n                 );\n         }\n         g+=e=length(n1.xyxz)/s;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}