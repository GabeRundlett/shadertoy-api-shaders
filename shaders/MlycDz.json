{
    "Shader": {
        "info": {
            "date": "1535743213",
            "description": "looking through alien eyes",
            "flags": 0,
            "hasliked": 0,
            "id": "MlycDz",
            "likes": 2,
            "name": "alieneyes",
            "published": 3,
            "tags": [
                "eyes",
                "alien"
            ],
            "usePreview": 0,
            "username": "originaltomato",
            "viewed": 514
        },
        "renderpass": [
            {
                "code": "// Experiment: Frosted Glass\n// Vladimir Mitrovic\n// branch of Jack Davenport \n// Original: http://coding-experiments.blogspot.com.au/2010/06/frosted-glass.html\n#define FLIP_IMAGE\n\nfloat rand(vec2 uv) {\n \n    float a = dot(uv, vec2(92., 80.));\n    float b = dot(uv, vec2(41., 62.));\n    \n    float x = sin(a) + cos(b) * 51.;\n    return fract(x);\n    \n}\n\n//by Vladimir Storm \n//https://twitter.com/vladstorm_\n\n#define t iTime\n\n//random hash\nvec4 hash42(vec2 p){\n    \n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(443.8975,397.2973, 491.1871, 470.7827));\n    p4 += dot(p4.wzxy, p4+19.19);\n    return fract(vec4(p4.x * p4.y, p4.x*p4.z, p4.y*p4.w, p4.x*p4.w));\n}\n\n\nfloat hash( float n ){\n    return fract(sin(n)*43758.5453123);\n}\n\n// 3d noise function (iq's)\nfloat n( in vec3 x ){\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\n//tape noise\nfloat nn(vec2 p){\n\n\n    float y = p.y;\n    float s = t*2.;\n    \n    float v = (n( vec3(y*.01 +s, \t\t\t1., 1.0) ) + .0)\n          \t *(n( vec3(y*.011+1000.0+s, \t1., 1.0) ) + .0) \n          \t *(n( vec3(y*.51+421.0+s, \t1., 1.0) ) + .0)   \n        ;\n    //v*= n( vec3( (fragCoord.xy + vec2(s,0.))*100.,1.0) );\n   \tv*= hash42(   vec2(p.x +t*0.01, p.y) ).x +.3 ;\n\n    \n    v = pow(v+.3, 1.);\n\tif(v<.7) v = 0.;  //threshold\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy ;\n\tvec2 rnd = vec2(rand(uv), rand(uv));\n    \n    uv += rnd * .03 - .06;\n           \n    fragColor = texture(iChannel0, uv);\n    \n    fragColor.rgb *= vec3(0.0897, 0.761, 0.342);\n\n    \n    uv = fragCoord.xy / iResolution.xy ;\n    float linesN = 240.; //fields per seconds\n    float one_y = iResolution.y / linesN; //field line\n    uv = floor(uv*iResolution.xy/one_y)*one_y;\n\n\tfloat col =  nn(uv);        \n    \n\tvec4 f = vec4(vec3( col ),1.0);\n    fragColor -= f;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}