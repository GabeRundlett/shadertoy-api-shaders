{
    "Shader": {
        "info": {
            "date": "1606520616",
            "description": "I had fun with the first two animations I made for the swirled series so I decided to make some extra ones for fun.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdyBRh",
            "likes": 5,
            "name": "Ckeckercube Animation",
            "published": 3,
            "tags": [
                "cube",
                "animation",
                "checker",
                "cubemapping",
                "looping"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 173
        },
        "renderpass": [
            {
                "code": "float sceneMap(in vec3 p) {\n    vec3 q = abs(p) - 1.0;\n    return max(q.x, max(q.y, q.z));\n}\n\nvec3 colorMap(in vec3 p) {\n    vec3 n = abs(p);\n    float m = max(n.x, max(n.y, n.z));\n\n    vec2 uv = p.xy;\n    bool flip = false;\n    if (m == n.z) {\n        flip = p.z > 0.0;\n    }\n\n    if (m == n.x) {\n        uv = p.yz;\n        flip = p.x < 0.0;\n    }\n\n    if (m == n.y) {\n        uv = p.xz;\n        flip = p.y < 0.0;\n    }\n\n    uv *= 4.0;\n    float fill = mod(floor(uv.x) + floor(uv.y), 2.0);\n    if (flip) {\n        fill = 1.0 - fill;\n    }\n\n    return vec3(fill);\n}\n\nvec3 raymarch(in vec3 ro, in vec3 rd, in float t) {\n    float distTraveled = 0.0;\n    for (int i=0; i < 100; i++) {\n        vec3 pos = ro + rd * distTraveled;\n\n        float time = mod(t, 4.5);\n\n        float t1 = clamp(time * 3.0 - 3.0, 0.0, 6.28);\n        t1 = pow(t1, 1.0 + sin(t1 * 0.5));\n        float t2 = clamp(time - 3.34, 0.0, 1.0);\n        float t3 = min(3.0, time * 3.0);\n\n        pos.z += t3;\n        pos.z -= t2 * 3.0;\n\n        float c = cos(t1);\n        float s = sin(t1);\n        pos.xz = vec2(pos.x * c + pos.z * s, pos.x * s - pos.z * c);\n\n        float tumble = t2 * 1.57;\n        c = cos(tumble);\n        s = sin(tumble);\n        pos.yz = vec2(pos.y * c - pos.z * s, pos.y * s + pos.z * c);\n\n        float dist = sceneMap(pos);\n        if (dist < 0.001) {\n            return colorMap(pos);\n        }\n\n        if (distTraveled > 1000.0) {\n            break;\n        }\n\n        distTraveled += dist;\n    }\n\n    return vec3(0.5);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    float tSamples = 0.0;\n    for (float tOffset=0.0; tOffset > -0.006; tOffset -= 0.001) {\n        fragColor.rgb += raymarch(vec3(0.0, 0.0, 3.0), normalize(vec3(uv, -1.0)), iTime + tOffset);\n        tSamples += 1.0;\n    }\n\n    fragColor /= tSamples;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}