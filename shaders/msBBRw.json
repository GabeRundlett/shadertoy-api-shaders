{
    "Shader": {
        "info": {
            "date": "1690199817",
            "description": "Experimental flowmpa using dither to interpolate UVs and skip a texturelookup. ",
            "flags": 0,
            "hasliked": 0,
            "id": "msBBRw",
            "likes": 4,
            "name": "Flowmap Dither",
            "published": 3,
            "tags": [
                "cheap",
                "dither",
                "flow",
                "interpolation",
                "flowmap"
            ],
            "usePreview": 1,
            "username": "gehtsiegarnixan",
            "viewed": 274
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2023 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/*\nExperimental Flowmap using dithering to make a bitmap out of the alpha and interpolate \nthe UVs instead of the textures. This allows us to skip a texture lookup and is a lot \nfaster than the normal 3 texture flowmap.\n\nThis works also for tiling texture breakup, and Directional Flow to save multiple texture \nsamples. For static textures this should be basically unnoticable. \n\nOther dither functions will work too, but keep in mind the dither has the be cheaper \nthan a texture lookup or it defeats the purpuse of the opimization.\n\nModeren screens have an absurd resolution and often use TAA or other temporal effects\nto effectively hide the dithering. If used in volumetric effects the ray marching \nblends the and use a dither in worldspace the results making this method especally \nuseful there. (I tested it in volumetric clouds, using world space dither creates \nnoisy clouds, the hash dither worked the best. Using screens space dither made the \nclouds stylied, which slooks cool but not for my current project)\n*/\n\n// valve edition (slightly modified to be useful as binary dither)\n// http://alex.vlachos.com/graphics/Alex_Vlachos_Advanced_VR_Rendering_GDC2015.pdf\n// input in pixels (ie not normalized uv)\nfloat ScreenSpaceDither(vec2 vScreenPos)\n{\n\t// Iestyn's RGB dither (7 asm instructions) from Portal 2 X360, slightly modified for VR\n    float vDither = dot( vec2( 171.0, 231.0 ), vScreenPos.xy + iTime); \n    return fract( vDither / 71.0) - 0.5;\n}\n\n// makes a simple flowmap in the shape a donut swirl centered on point\nvec2 donutFlow(vec2 point, float spread, float offset)\n{    \n    float cenderDistance = length(point); // distance to center    \n    // simple inverted x^2 https://www.desmos.com/calculator/ibidozowyh\n    float donut =  1.0-pow(2.0*(cenderDistance-offset)/spread, 2.0);     \n    donut = clamp(donut, 0.0, 1.0);  // saturate\n    \n    vec2 flow = normalize(vec2(-point.y, point.x)); // flow vectors\n    flow *= donut;  // masked by donut\n    //flow = (flow+1.0)/2.0; // generates a flowmap texture\n    //flow += vec2(0.0001,0.0001); //adding tiny offset so it isnt 0\n    return flow;\n}\n\n// dithered temporal Flowmaps \nvec3 ditherFlowmaps(vec2 uv, vec2 flowUV, vec2 ditherUV, float time, float strength) {\n    // sample flow texture or function\n    vec2 flow = donutFlow(flowUV, 0.7, 0.5);\n    flow *= strength;\n    \n    // time caculatation, one is offset by half\n    float time1 = fract(time);\n    float time2 = fract(time - .5);\n\n    // generate dither pattern\n    float dither = ScreenSpaceDither(ditherUV);\n    \n    // normal alpha flipping between 0-1 using timer 1\n    float alpha = abs((0.5-time1)*2.);\n    \n    // flip  between time 1 and two using the alpha and dither, if is slightly faster than step mix\n    float mixTime = (alpha + dither >= 0.5) ? time2 : time1;\n    \n    // calculate UV values using our dither time offset\n    vec2 mixUV = uv - (mixTime * flow);\n    \n    // Mip caculation as the automatic ones don't work\n    vec2 duvdx = dFdx( uv );\n    vec2 duvdy = dFdy( uv );\n    \n    // texture sample\n    vec3 tex = textureGrad(iChannel0, mixUV, duvdx, duvdy).xyz;\n    return tex;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    float time = iTime* 0.1; // flow speed multiplier\n    float strength = 0.3; // flow distrotion strength\n    float scale = 1.0;  // scale of the \"wave\" texture\n    \n    vec2 uv = (fragCoord.xy- (0.5*iResolution.xy))/iResolution.y; // center screen coords\n    \n    vec3 flow = ditherFlowmaps(uv*scale, uv, fragCoord, time, strength);\n    \n    fragColor = vec4(flow,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}