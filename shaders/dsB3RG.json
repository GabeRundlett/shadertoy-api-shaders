{
    "Shader": {
        "info": {
            "date": "1667788407",
            "description": "Something sort of like that example I saw once which tries to pick an arbitrary number of distinct colours with stable first choices.",
            "flags": 0,
            "hasliked": 0,
            "id": "dsB3RG",
            "likes": 15,
            "name": " Ï•-based palette generator",
            "published": 3,
            "tags": [
                "palette",
                "phi",
                "goldenratio"
            ],
            "usePreview": 0,
            "username": "sh1boot",
            "viewed": 373
        },
        "renderpass": [
            {
                "code": "const int num_lines = 15;\n\nvec3 hsv2rgb(float h, float s, float v) {\n    vec3 h3 = mod(6.0 * h + vec3(5.0, 3.0, 1.0), 6.0);\n    h3 = min(h3, 4.0 - h3);\n    h3 = clamp(h3, 0.0, 1.0);\n    return v - v * s * h3;\n}\n\nvec3 palette(int i) {\n    float f = float(i);\n    float h = mod(1.618033988749894848204586834 * f, 1.0);\n    float s = fract(-f / 4.0) * 0.5 + 0.45;\n    float v = 1.0;\n    return hsv2rgb(h, s, v);\n}\n\n\n// borrowed hash from https://www.shadertoy.com/view/llGSzw\nvec3 hash3( uint n ) \n{\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    uvec3 k = n * uvec3(n,n*16807U,n*48271U);\n    return vec3( k & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pixel = 1.5 / iResolution.y;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 col = vec4(0);\n    float y = 0.0;\n    for (int i = num_lines + 8; i >= 0; --i) {\n        vec3 r = hash3(uint(i + 101));\n        float f = 12.0 * r.x + 4.0;\n        float a = (r.y * 0.25 + 0.05) * 16.0 / (f + 8.0);\n        float t = 0.5 * (r.z + 0.1) * (iTime + 2.0);\n        float w = sin(uv.x * f + t) * a;\n        y = w - y * 0.5;\n        if (i < num_lines) {\n            float cutoff = float(i) + uv.x * 0.8;\n            if (iTime < cutoff * 2.0) continue;\n            float thickness = 0.008 * length(vec2(dFdx(y / pixel), 1.0));\n            float alpha = 1.0 - smoothstep(thickness, thickness + pixel, abs(uv.y - 0.5 - y));\n            vec4 over = vec4(palette(i), alpha);\n            col += (over - col) * over.a;\n        }\n    }\n    // Output to screen\n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}