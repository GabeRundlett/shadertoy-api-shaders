{
    "Shader": {
        "info": {
            "date": "1485794099",
            "description": "Surface waves, reflection, refraction; mouse enabled.",
            "flags": 32,
            "hasliked": 0,
            "id": "llKSDG",
            "likes": 7,
            "name": "Swimming Pool Waves",
            "published": 3,
            "tags": [
                "reflection",
                "waves",
                "refraction"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 881
        },
        "renderpass": [
            {
                "code": "// \"Swimming Pool Waves\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Surface waves, reflection, refraction; mouse enabled.\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (vec2 vId);\n\nvec3 sunDir;\nvec2 qcHit, qgHit;\nfloat tCur, dstFar, gSize, wDepth, wHt;\nint idObj;\nconst float pi = 3.14159;\n\nfloat SurfDst (vec3 p)\n{\n  vec2 cg, e;\n  float h;\n  e = vec2 (1., 0.);\n  qgHit = (p.xz + 0.5) * (gSize - 1.);\n  cg = floor (qgHit);\n  if (min (cg.x, cg.y) >= 0. && max (cg.x, cg.y) < gSize - 1.) {\n    qcHit = cg;\n    qgHit -= cg;\n    h = mix (mix (Loadv4 (qcHit).x, Loadv4 (qcHit + e.yx).x, qgHit.y),\n       mix (Loadv4 (qcHit + e).x, Loadv4 (qcHit + e.xx).x, qgHit.y), qgHit.x);\n  } else h = 0.;\n  return p.y - h;\n}\n\nfloat SurfRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 150; j ++) {\n    p = ro + s * rd;\n    h = SurfDst (p);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.01, 0.5 * h);\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (SurfDst (p) > 0.) sLo = s;\n      else sHi = s;\n    }\n    dHit = 0.5 * (sLo + sHi);\n  }\n  return (max (abs (p.x), abs (p.z)) > 0.5 * (1. - 6. / gSize)) ? dstFar : dHit;\n}\n\nvec3 SurfNf ()\n{\n  vec2 v, e;\n  e = vec2 (1., 0.);\n  v = mix (mix (Loadv4 (qcHit).zw, Loadv4 (qcHit + e.yx).zw, qgHit.y),\n     mix (Loadv4 (qcHit + e).zw, Loadv4 (qcHit + e.xx).zw, qgHit.y), qgHit.x);\n  return vec3 (v.x, sqrt (1. - dot (v, v)), v.y);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, w;\n  dMin = dstFar;\n  w = 0.5 * (1. - 6. / gSize);\n  q = p;\n  q.y -= - wDepth;\n  d = PrBoxDf (q, vec3 (w + 0.05, wDepth + 0.01, w + 0.05));\n  q.y -= wDepth;\n  d = max (d, - PrBoxDf (q, vec3 (w, wDepth + 0.01, w)));\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  q = p;\n  q.y -= - wDepth - wHt;\n  d = PrCapsDf (q.xzy, 0.01, wDepth + 1.5 * wHt);\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ObjCol (vec3 ro, vec3 rd, vec3 vn)\n{\n  vec3 b, c;\n  float w;\n  if (idObj == 1) {\n    w = 0.5 * (1. - 6. / gSize);\n    b = smoothstep (0., 0.07, abs (fract (20. * ro / w + 0.5) - 0.5));\n    c = vec3 (mix (vec3 (0.7, 0.7, 0.), vec3 (0.4, 0.4, 0.9),\n       dot (abs (vn) * b.yzx * b.zxy, vec3 (1.))));\n  } else c = vec3 (0.7, 0.3, 0.3);\n  c = c * (0.3 + 0.7 * max (dot (vn, sunDir), 0.)) +    \n     0.5 * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.);\n  return c;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 c;\n  if (rd.y >= 0.) {\n    ro.xz += 2. * tCur;\n    c = vec3 (0.1, 0.2, 0.4) + 0.2 * (1. - max (rd.y, 0.)) +\n       0.1 * pow (max (dot (rd, sunDir), 0.), 16.);\n    c = mix (c, vec3 (0.8), clamp (0.2 + Fbm2 (0.1 *\n       (ro.xz + rd.xz * (100. - ro.y) / max (rd.y, 0.001))) * rd.y, 0., 1.));\n  } else {\n    ro -= (ro.y / rd.y) * rd;\n    c = 0.7 * mix (vec3 (0.3, 0.4, 0.1), vec3 (0.4, 0.5, 0.2), Fbm2 (67. * ro.xz)) *\n         (1. - 0.15 * Noisefv2 (330. * ro.xz));\n  }\n  return c;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, colw, vn, vnr, rdr, ror;\n  float dstSurf, dstObj, aRefl, cCaus;\n  int idObjT;\n  dstObj = ObjRay (ro, rd);\n  dstSurf = SurfRay (ro, rd);\n  aRefl = 0.;\n  if (dstSurf < min (dstObj, dstFar)) {\n    ro += rd * dstSurf;\n    vn = SurfNf ();\n    vn = VaryNf (30. * ro + 0.5 * tCur * vec3 (1., 0., 1.), vn, 0.2);\n    aRefl = 1. - pow (dot (- rd, vn), 5.);\n    rdr = reflect (rd, vn);\n    dstObj = ObjRay (ro, rdr);\n    if (dstObj < dstFar) {\n      ror = ro + dstObj * rdr;\n      idObjT = idObj;\n      vnr = ObjNf (ror);\n      idObj = idObjT;\n      colw = ObjCol (ror, rdr, vnr);\n    } else colw = BgCol (ro, rdr);\n    colw += 0.1 * pow (max (0., dot (sunDir, rdr)), 128.);\n    rd = refract (rd, vn, 1. / 1.3);\n    dstObj = ObjRay (ro, rd);\n    ro += rd * dstObj;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    col = ObjCol (ro, rd, vn) * exp (0.5 * ro.y / wDepth);\n    cCaus = max (0., - SurfDst (ro - (ro.y / sunDir.y) * sunDir));\n    col += vec3 (0.9, 0.9, 1.) * 20. * abs (cCaus);\n  } else if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    if (ro.y < 0. && max (abs (ro.x), abs (ro.z)) >\n       0.5 * (1. - 6. / gSize) + 0.01) col = BgCol (ro, rd);\n    else {\n      idObjT = idObj;\n      vn = ObjNf (ro);\n      idObj = idObjT;\n      col = ObjCol (ro, rd, vn);\n    }\n  } else col = BgCol (ro, rd);\n  col = mix (col, colw, aRefl);\n  col = pow (clamp (col, 0., 1.), vec3 (0.7));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el, a;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  gSize = (canvas.y >= 256.) ? 256. : 64.;\n  wDepth = 0.3;\n  wHt = Loadv4 (vec2 (0.5 * (gSize - 1.))).x;\n  dstFar = 10.;\n  a = sin (2. * pi * mod (0.03 * tCur, 1.));\n  az = 0.3 * pi * a;\n  el = 0.45 * pi - 0.3 * pi * a * a;\n  if (mPtr.z > 0.) {\n    el = clamp (0.2 * pi - 1.5 * mPtr.y, 0.1 * pi, 0.45 * pi);\n    az = -7. * mPtr.x;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  ro = vec3 (0., 0., -3.) * vuMat;\n  rd = normalize (vec3 (uv, 5.5)) * vuMat;\n  sunDir = normalize (vec3 (-1., 3., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n)) * (1. / 1.75);\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Swimming Pool Waves\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec4 Loadv4 (vec2 vId);\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nfloat tCur, nStep;\nfloat gSize, kCon, vAmp, dt, cDamp;\nconst float pi = 3.14159;\n\nfloat VDrive (vec2 sv, float hv, float ha)\n{\n  float t, a;\n  if (sv.x == 0.5 * gSize && sv.y == 0.5 * gSize) {\n    t = mod (nStep * dt * sqrt (kCon / gSize) + 2., 10.);\n    a = SmoothBump (0.2, 0.7, 0.1, t / 10.);\n    hv = a * vAmp * cos (2. * pi * mod (t, 1.));\n  } else hv += ha * dt;\n  return hv;\n}\n\nvoid Step (vec2 sv, inout vec4 p)\n{\n  vec2 s1, s2, e;\n  float h, hv, ha;\n  e = vec2 (1., 0.);\n  h = p.x;\n  hv = p.y;\n  s1 = step (vec2 (1.), sv);\n  s2 = step (sv, vec2 (gSize - 2.));\n  ha = dot (s1, vec2 (Loadv4 (sv - e).x, Loadv4 (sv - e.yx).x) - h) +\n       dot (s2, vec2 (Loadv4 (sv + e).x, Loadv4 (sv + e.yx).x) - h);\n  ha = kCon * ha - cDamp * hv;\n  hv = VDrive (sv, hv, ha);\n  p.xy = vec2 (h + hv * dt, hv);\n}\n\nvoid Norm (vec2 sv, inout vec4 p)\n{\n  vec2 s1, s2, hp, hm, dh, e;\n  float h;\n  e = vec2 (1., 0.);\n  h = p.x;\n  s1 = step (vec2 (1.), sv);\n  s2 = step (sv, vec2 (gSize - 2.));\n  hm = s1 * vec2 (Loadv4 (sv - e).x, Loadv4 (sv - e.yx).x) - h;\n  hp = s2 * vec2 (Loadv4 (sv + e).x, Loadv4 (sv + e.yx).x) - h;\n  dh = s1 * hp - s2 * hm - 0.5 * s1 * s2 * (hp - hm);\n  p.zw = normalize (cross (vec3 (0., dh.y * gSize, 1.),\n     vec3 (1., dh.x * gSize, 0.))).xz;\n}\n\nvoid Init (vec2 sv, out vec4 p)\n{\n  float h, hv;\n  h = 0.;\n  hv = VDrive (sv, 0., 0.);\n  p = vec4 (h, hv, 0., 0.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p;\n  vec2 canvas, pxIv;\n  float pxId;\n  bool doInit;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  gSize = (canvas.y >= 256.) ? 256. : 64.;\n  pxIv = floor (fragCoord);\n  pxId = pxIv.x + gSize * pxIv.y;\n  if (pxIv.x >= gSize || pxId > gSize * gSize) discard;\n  kCon = 0.05;\n  vAmp = 0.004;\n  dt = 1.;\n  cDamp = 0.0075;\n  doInit = false;\n  if (iFrame <= 5) doInit = true;\n  else {\n    p = Loadv4 (vec2 (0., gSize));\n    nStep = p.x;\n     ++ nStep;\n    p = Loadv4 (pxIv);\n    Step (pxIv, p);\n    Norm (pxIv, p);\n  }\n  if (doInit) {\n    nStep = 0.;\n    Init (pxIv, p);\n  }\n  stDat = (pxId < gSize * gSize) ? p : vec4 (nStep, 0., 0., 0.);\n  Savev4 (pxIv, stDat, fragColor, fragCoord);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  d = abs (fCoord - vId - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}