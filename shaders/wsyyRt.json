{
    "Shader": {
        "info": {
            "date": "1603456793",
            "description": "i dunno, i just decided to stick a plasma into a sampler and got this",
            "flags": 0,
            "hasliked": 0,
            "id": "wsyyRt",
            "likes": 1,
            "name": "plasma pixel color \"fixer\"",
            "published": 3,
            "tags": [
                "plasma",
                "post",
                "weird"
            ],
            "usePreview": 1,
            "username": "oatmealine",
            "viewed": 668
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415\n#define strength (iMouse.x / iResolution.x)\n\nfloat plasma(vec2 uv) {\n    float v = 0.0;\n    float k = 4.0;\n    vec2 c = uv * k - k / 2.0;\n    \n    v += sin((c.x + iTime));\n    v += sin((c.y + iTime) / 2.0);\n    \n    v += sin((c.x + c.y + iTime) / 3.0);\n    \n    c += k / 2.0 * vec2(sin(iTime / 3.2), cos(iTime / 2.62));\n    \n    v += sin(sqrt(c.x * c.x + c.y * c.y + 1.0 ) + iTime);\n    \n    v = v/2.0;\n    \n    // vec3 col = vec3(1, sin(PI*v), cos(PI*v));\n    return v;\n}\n\nfloat sum(vec3 p) {\n    return p.r + p.g + p.b;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float angle = tan(plasma(uv));\n    float dist = max(cos(plasma(uv)), 0.0);\n    dist *= strength;\n    \n   \tvec2 diff = vec2(cos(angle), sin(angle)) * dist;\n    \n    uv -= diff;\n    \n    vec2 pixDiff = diff * iResolution.xy;\n    int pixDist = int(sqrt(pixDiff.x * pixDiff.x + pixDiff.y * pixDiff.y));\n    \n    vec3 origCol = texture(iChannel0, uv).rgb;\n    \n    vec2 furthestPix = vec2(0.0);\n    vec3 furthestCol = vec3(0.0);\n    for (int pix = 0; pix < pixDist; pix++) {\n        float a = float(pix) / float(pixDist);\n        vec2 samplePos = uv + pixDiff * a;\n        vec3 col = texture(iChannel0, fract(samplePos/iResolution.xy)).rgb;\n        \n        if (sum(abs(origCol - col)) > sum(furthestCol)) {\n            furthestCol = abs(origCol - col);\n            furthestPix = pixDiff * a;\n        }\n    }\n    \n    vec3 col = texture(iChannel0, uv + furthestPix).rgb;\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}