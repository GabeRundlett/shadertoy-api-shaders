{
    "Shader": {
        "info": {
            "date": "1717242497",
            "description": "A little tool to show how to isolate a single color range with a smooth fadeout from an image",
            "flags": 0,
            "hasliked": 0,
            "id": "M3VGRz",
            "likes": 5,
            "name": "Select Color Range ",
            "published": 3,
            "tags": [
                "filter",
                "color",
                "photoshop",
                "selection",
                "range",
                "isolation"
            ],
            "usePreview": 1,
            "username": "gehtsiegarnixan",
            "viewed": 270
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2023 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/*\nThis is a small trial to generate a feature similar to the Color Range Selection in \nPhotoshop. The image shows the selected color from the image in the cursor, and then \nblends between this color and its inverse using the generated grayscale mask.\n\nThis shader has mouse controls that allow you to change the selected color using the \nmouse. Additionally, you can change the range and fuzziness of the selection in the \nglobal constants below, or set the target color directly.\n*/\n\n// how much deviation from the color is allowed that is still 100%\n#define RANGE 0.1\n\n// Softness of the fadout for the selected color\n#define FUZZINESS 0.3\n\n// Uncomment to use a specific color to isolate that may not be in the image\n//#define REFERENCE_COLOR vec3(0.961,0.980,0.957)\n\n// Generates a smooth mask of isolating a target color\nfloat colorRange(vec3 pixelColor, vec3 targetColor, float range, float fuzziness) {\n    // Calculate the Euclidean distance between pixelColor and targetColor\n    float distance = length(pixelColor - targetColor);\n\n    // Normalize the distance by the maximum possible distance\n    float normalizedDistance = distance / sqrt(3.0);\n\n    // Colors within Range become 1 and colors within Range+ Fuzziness fade to 0\n    return smoothstep(range + fuzziness, range, normalizedDistance);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Sample color Texture\n    vec3 imageColor = texture(iChannel0, uv).xyz;\n    \n    #ifdef REFERENCE_COLOR\n        // overwrite the reference color with a global constant\n        vec3 referenceColor = REFERENCE_COLOR;\n        \n    #else\n        // initilaize some variables \n        vec2 sampleCoords;\n        vec2 cursor;\n        \n        // If the mouse was clicked, scale mouse coordinates to the 0-1 range of the screen\n        if (iMouse.x > 0.0) {\n\n            // set the sample position at mouse posiiton\n            sampleCoords = iMouse.xy / iResolution.xy;\n           \n        } else {\n            // If the mouse was not clicked, animate the direction vector\n            float myTime = iTime * 0.05;\n            sampleCoords = vec2(sin(myTime), cos(myTime))*0.2+0.5;        \n        }\n        \n        vec2 coords = fragCoord / iResolution.xy;\n        \n        // Generate Mouse coursor, x = mouse color, y = mouse weight \n        float mouseSize = 0.02;\n        float mouseDist = length((coords - sampleCoords) * vec2(iResolution.x/iResolution.y, 1.));\n        \n        float aa = fwidth(mouseDist); // cheap anti-aliasing factor\n        \n        // Mask for the outline and the white center of the sphere cursor\n        cursor.x = smoothstep(mouseSize*0.67 + aa, mouseSize*0.67 - aa, mouseDist);\n        cursor.y = smoothstep(mouseSize + aa, mouseSize - aa, mouseDist);\n\n        // sample the coordinates of the texture to find the reference color\n        vec3 referenceColor = texture(iChannel0, sampleCoords).xyz;       \n    #endif\n    \n    // Apply color range selection\n    float mask = colorRange(imageColor, referenceColor, RANGE, FUZZINESS);\n    \n    // Use mask to make make of color and it's inverse\n    vec3 color = mix(1.-referenceColor, referenceColor, mask);\n\n    #ifndef REFERENCE_COLOR\n        // Turn either black or white for max contrast to the current reference color\n        float blackWhite = step(length(referenceColor) , 0.866); // 2./sqrt(3.);\n    \n        // Add mouse cursor with the reference color in the center\n        color = mix(color, mix(vec3(blackWhite), referenceColor, cursor.x), cursor.y);\n    #endif\n    \n    // Output to screen\n    fragColor = vec4(color,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}