{
    "Shader": {
        "info": {
            "date": "1706464221",
            "description": "my result after watching An introduction to Shader Art Coding by kishimisu",
            "flags": 0,
            "hasliked": 0,
            "id": "MfSSRG",
            "likes": 2,
            "name": "my intro to Shader Art Coding",
            "published": 3,
            "tags": [
                "circles",
                "kishimisu"
            ],
            "usePreview": 0,
            "username": "jh0ker",
            "viewed": 196
        },
        "renderpass": [
            {
                "code": "\n// cosine based palette, 4 vec3 params\nvec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n  return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  // Palette violets\n  // [0.638 0.198 0.500] [0.338 -0.112 0.580] [0.588 0.138 0.638] [0.948\n  // -1.442 1.668]\n  vec3 pal_a = vec3(0.638, 0.198, 0.500);\n  vec3 pal_b = vec3(0.338, -0.112, 0.580);\n  vec3 pal_c = vec3(0.588, 0.138, 0.638);\n  vec3 pal_d = vec3(0.948, -1.442, 1.668);\n\n  // Normalized pixel coordinates (from -1 to 1) with aspect ratio\n  vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n  vec2 uv0 = uv;\n\n  vec3 colAcc = vec3(0.0);\n\n  // iterate layers, each fractures the UV again\n  for (float i = 0.0; i < 4.0; i++) {\n    float expComp = exp(-length(uv0));\n\n    // Repeat pattern\n    float fractVal = sin(iTime * 0.6) * expComp * 0.3 * (i * 0.4 + 1.0) + 1.5;\n    uv = fract(uv * fractVal) - 0.5;\n\n    float d = length(uv) * expComp;\n\n    // Brightness based on distance\n    float sineDirection = int(i) % 2 == 0 ? 1.0 : -1.0;\n    float sinePhase = (iTime / ((i + 1.0) * 0.7)) * sineDirection;\n    d = sin(d * 12.0 - sinePhase) * 0.9 + 0.6;\n    d = abs(d);\n    // pow for contrast\n    d = pow(0.06 / d, 1.1);\n\n    // Color based on original UVs\n    float pal_t = length(uv0) - iTime * 0.2 + i * 0.3;\n    vec3 col = palette(pal_t, pal_a, pal_b, pal_c, pal_d) * 1.5;\n\n    // Accumulate colors from layers\n    colAcc += col * d;\n  }\n\n  fragColor = vec4(colAcc, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}