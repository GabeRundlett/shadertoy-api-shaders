{
    "Shader": {
        "info": {
            "date": "1642141633",
            "description": "sample code\nhash function of\n(up left) 2-in/2-out  (up right) 3-in/3-out\n(down left) 2-in/1-out  (down right) 3-in/1-out\n",
            "flags": 0,
            "hasliked": 0,
            "id": "fsXyW7",
            "likes": 4,
            "name": "2_3_hash2d3d",
            "published": 3,
            "tags": [
                "ch2"
            ],
            "usePreview": 0,
            "username": "tomoe",
            "viewed": 316
        },
        "renderpass": [
            {
                "code": "ivec2 channel;\n\nconst uint UINT_MAX = 0xffffffffu;\nuvec3 k = uvec3(0x456789abu, 0x6789ab45u, 0x89ab4567u);\nuvec3 u = uvec3(1, 2, 3);\nuvec2 uhash22(uvec2 n){\n    n ^= (n.yx << u.xy);\n    n ^= (n.yx >> u.xy);\n    n *= k.xy;\n    n ^= (n.yx << u.xy);\n    return n * k.xy;\n}\nuvec3 uhash33(uvec3 n){\n    n ^= (n.yzx << u);\n    n ^= (n.yzx >> u);\n    n *= k;\n    n ^= (n.yzx << u);\n    return n * k;\n}\nvec2 hash22(vec2 p){\n    uvec2 n = floatBitsToUint(p);\n    return vec2(uhash22(n)) / vec2(UINT_MAX);\n}\nvec3 hash33(vec3 p){\n    uvec3 n = floatBitsToUint(p);\n    return vec3(uhash33(n)) / vec3(UINT_MAX);\n}\nfloat hash21(vec2 p){\n    uvec2 n = floatBitsToUint(p);\n    return float(uhash22(n).x) / float(UINT_MAX);\n    //nesting approach\n    //return float(uhash11(n.x+uhash11(n.y)) / float(UINT_MAX)\n}\nfloat hash31(vec3 p){\n    uvec3 n = floatBitsToUint(p);\n    return float(uhash33(n).x) / float(UINT_MAX);\n    //nesting approach\n    //return float(uhash11(n.x+uhash11(n.y+uhash11(n.z))) / float(UINT_MAX)\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    float time = floor(60.* iTime);\n    vec2 pos = fragCoord.xy + time;\n    channel = ivec2(fragCoord.xy * 2.0 / iResolution.xy);\n    if (channel[0] == 0){ //left\n        if (channel[1] == 0){\n            fragColor.rgb = vec3(hash21(pos));\n        } else {\n            fragColor.rgb = vec3(hash22(pos), 1.0);\n        }\n    } else {    //right\n        if (channel[1] == 0){\n            fragColor.rgb = vec3(hash31(vec3(pos, time)));\n        } else {\n            fragColor.rgb = hash33(vec3(pos, time));\n        }\n    }\n    fragColor.a = 1.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}