{
    "Shader": {
        "info": {
            "date": "1553429058",
            "description": "raycasting with polar coordinates",
            "flags": 0,
            "hasliked": 0,
            "id": "wsSSWR",
            "likes": 19,
            "name": "polar wave",
            "published": 3,
            "tags": [
                "voxel",
                "raytrace",
                "polar"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 659
        },
        "renderpass": [
            {
                "code": "#define rot(spin) mat2(cos(spin),sin(spin),-sin(spin),cos(spin))\n#define pi acos(-1.0)\n#define FAR 200.0\n#define STEPS 500\n#define LINES 40.0\n\nfloat ray(vec2 ro, vec2 rd) {\n    float a = max(dot(ro,rd),0.0);\n    return length(ro-rd*a);\n}\n\nfloat map(vec2 c) {\n    float angle = c.y/LINES*2.0*pi;\n    vec2 p = vec2(sin(angle),cos(angle))*c.x;\n    \n    float twist = sin(angle*4.0+sin(c.x*0.2+iTime)*4.0)*2.0;\n    float wave = sin(c.x*0.1+iTime)*4.0;\n    \n    return twist+wave;\n    \n    //return (sin(c.x-iTime)+sin(c.y+iTime))*0.5-1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(0.01,0,-19.5);\n    vec3 rd = normalize(vec3(uv,1));\n\n    if (length(iMouse.xy) > 40.0) {\n        rd.yz *= rot(iMouse.y/iResolution.y*3.14-3.14*0.5);\n        rd.xz *= rot(iMouse.x/iResolution.x*3.14*2.0-3.14);\n        ro.yz *= rot(iMouse.y/iResolution.y*3.14-3.14*0.5);\n        ro.xz *= rot(iMouse.x/iResolution.x*3.14*2.0-3.14);\n    } else {\n        rd.yz *= rot(-0.5);\n        ro.yz *= rot(-0.5);\n    }\n\n    float e = 1.0/dot(rd.xz,rd.xz);\n\n    float a = dot(-ro.xz,rd.xz)*e;\n    vec2 p = ro.xz+rd.xz*a;\n    float b = dot(p,p);\n    \n    float ang = atan(ro.x,ro.z)/pi*0.5*LINES;\n    \n    vec2 cell = floor(vec2(length(ro.xz),ang));\n    \n    float h = map(cell);\n    \n    ro.y = max(ro.y,h+0.1);\n    \n    float angle = (ang)/LINES*2.0*pi;\n    vec3 pln = vec3(cos(angle),0,-sin(angle));\n    \n    vec2 dir = vec2(-1,sign(dot(pln,rd)));\n    \n    vec2 lens = vec2(0);\n    \n    float d = 0.0;\n    \n    vec3 n = vec3(0);\n    vec3 n1;\n    vec3 n2;\n    for (int i = 0; i < STEPS; i++) {\n        float f = d;\n        \n        if (lens.x < lens.y) {\n            if (lens.x > 0.0) {\n                cell.x += dir.x;\n                n = n1;\n            }\n            float cell2 = cell.x+dir.x*0.5+0.5;\n            if (b <= cell2*cell2 || dir.x == 1.0) {\n                float c = sqrt((cell2*cell2-b)*e);\n                if (c+a > 0.0 || dir.x == 1.0) {\n                    lens.x = a+c*dir.x;\n                    n1 = vec3(-normalize(ro.xz+rd.xz*lens.x)*dir.x,0).xzy;\n                } else {\n                    lens.x = 0.0;\n                    dir.x = 1.0;\n                }\n            } else {\n                lens.x = 0.0;\n                dir.x = 1.0;\n            }\n        } else {\n            if (lens.y > 0.0) {\n                cell.y += dir.y;\n                n = n2;\n            }\n            \n            float angle = (cell.y+dir.y*0.5+0.5)/LINES*2.0*pi;\n            \n            vec3 pln = vec3(cos(angle),0,-sin(angle));\n            \n            if (dot(pln,rd)*dir.y < 0.0) {\n                lens.y = 10000.0;\n            } else {\n                lens.y = -dot(ro,pln)/dot(rd,pln);\n                n2 = -pln*dir.y;\n            }\n            \n        }\n        \n        cell.y = mod(cell.y,LINES);\n        float h = map(cell);\n        \n        if (ro.y+rd.y*d < h && d > 0.0) {\n            //if (d == 0.0) return;\n            break;\n        }\n        \n        d = min(lens.x,lens.y);\n        \n        if (rd.y < 0.0) {\n            float pln = -(ro.y-h)/rd.y;\n            \n            if (pln < d) {\n                n = vec3(0,1,0);\n                d = max(pln,f);\n                break;\n            }\n        }\n        \n        if (d > FAR) break;\n    }\n    \n    //cell -= dir;\n    \n    \n    \n    // Output to screen\n    vec3 background = vec3(0);\n    vec3 col = background;\n    if (d < FAR) {\n        float h = (map(cell)+8.0)/10.0;\n        \n        col = vec3(h,1.0-h,sin(h*2.0)*0.1+0.1);\n        \n        float diff = max(0.1,dot(n,normalize(vec3(1))));\n        \n        col *= diff;\n    }\n    fragColor = vec4(sqrt(col),1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}