{
    "Shader": {
        "info": {
            "date": "1663811492",
            "description": "Turns out this effect is easier than I thought. Mouse controls how many tiles are flipped",
            "flags": 0,
            "hasliked": 0,
            "id": "slcfWs",
            "likes": 2,
            "name": "Simple truchet pattern",
            "published": 3,
            "tags": [
                "sdf",
                "truchet"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 193
        },
        "renderpass": [
            {
                "code": "#define tiles 10.0\n\nfloat hash21(in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\nfloat sdfTile(in vec2 p, float r, float t, bool rot)\n{\n    p.x = rot? 1.0 - p.x : p.x;\n    return abs(min(length(p), length(p - vec2(1.0))) - r) - t;\n}\n\nvec2 stepPoint(vec2 p, float c)\n{\n    return floor(p * c) / c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    uv += 0.5;\n    uv.x += iTime*0.3;\n    uv.y += sin(iTime)*0.2;\n    float px = tiles/iResolution.y;\n    \n    vec2 tileUv = fract(uv * tiles);\n    float tile = hash21(stepPoint(uv, tiles));\n    \n    \n    float col = smoothstep(0.0, px, sdfTile(tileUv, 0.5, 0.05, tile < (iMouse.z > 0.0? iMouse.y/iResolution.y : 0.5)));\n\n    fragColor = vec4(vec3(col),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}