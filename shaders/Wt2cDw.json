{
    "Shader": {
        "info": {
            "date": "1594545518",
            "description": "variant of \"GlowLife\" by savegor. [url]https://shadertoy.com/view/3tSyWm[/url]\njust adding buffB for background effect triggered by cells, + the last lines in Image tab to sum it\n\nAnother implementation of Conway's Game of Life",
            "flags": 32,
            "hasliked": 0,
            "id": "Wt2cDw",
            "likes": 13,
            "name": "GlowLife 3 : reaction diffusion",
            "published": 3,
            "tags": [
                "conwaysgameoflife"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 564
        },
        "renderpass": [
            {
                "code": "// Variant 2 of \"GlowLife\" by savegor. https://shadertoy.com/view/3tSyWm\n// Just adding buffB for background effect, + the last line here to sum it.\n\n\nfloat getGlow(vec2 cell, vec2 point) {\n    vec2 cell_uv = cell / (iResolution.xy * CELL_SIZE);\n    vec4 status = texture(iChannel0, cell_uv);\n    float alive = status.b;\n    \n    vec2 diff = point - cell;\n    float invSqrDist = CELL_SIZE / dot(diff, diff);\n    \n    return mix(0.0, invSqrDist, alive);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sumGlow = 0.0;\n    float averageArea = CELL_SIZE * GLOW_RAD_FACTOR;\n    \n    vec2 cell = floor(fragCoord / CELL_SIZE) * CELL_SIZE;\n    cell += CELL_SIZE * 0.5;\n    for(float i = -averageArea; i < averageArea + 1.0; i = i + CELL_SIZE) {\n        for(float j = -averageArea; j < averageArea + 1.0; j = j + CELL_SIZE) {\n            vec2 cell_ij = cell + vec2(i, j);\n            sumGlow += getGlow(cell_ij, fragCoord);\n        }\n    }\n    \n    // output color\n\tfloat red = sumGlow;\n    float green = sumGlow;\n    float blue = 2.0 * sumGlow;\n    fragColor = vec4(red, green, blue, 1.0);\n    \n    // --- Fabrice: added background effect\n    fragColor += .05*(.5+vec4(1,.2,0,0)) * texture(iChannel1,fragCoord/iResolution.xy); \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float CELL_SIZE = 14.0;\nconst float GLOW_RAD_FACTOR = 8.0;\nconst int SLOWDOWN = 5;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nfloat noise(vec2 st) {\n    return fract(sin(st.x * st.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // just lazy trick to generate first state \n    // sorry\n    if(iFrame == 0) { \n    \tfragColor = vec4(0.0,0.0,noise(fragCoord) > 0.5,1.0);\n    }\n    else {\n        vec4 mouse = iMouse;\n        mouse.xy /= CELL_SIZE;\n\t\t\n        vec2 uv = fragCoord / iResolution.xy;\n        vec4 status = texture(iChannel0, uv);\n\n\n        float was_alive = status.b;\n        float is_alive = 0.0;\n        vec2 diff = abs(fragCoord - mouse.xy);\n\t\t\n        // if left mouse button pressed\n        // just freeze world and revive selected cells\n        if(mouse.z > 0.0) {\n            is_alive = was_alive;\n            if(diff.x < 0.5 &&  diff.y < 0.5) {\n                is_alive = 1.0;    \n            }\n        }\n        else {\n            if( iFrame % SLOWDOWN == 0) {\n                int living_count = 0;\n                for(int i = -1; i < 2; i = i + 1) {\n                    for(int j = -1; j < 2; j = j + 1) {\n\n                        float not_center = float((abs(i) + abs(j)) != 0);\n                        vec2 uv_ij = (fragCoord + vec2(i, j)) / iResolution.xy;\n                        vec4 status_ij = texture(iChannel0, uv_ij);\n\n                        living_count += int(status_ij.z * not_center);\n                    }\n                }\n\n                float keepAlive = float(living_count == 2 || living_count == 3);\n                float revive = float(living_count == 3);\n\n                is_alive = mix(revive, keepAlive, was_alive);\n            }\n            else {\n                is_alive = was_alive;\n            }\n        }\n        fragColor = vec4(0.0,was_alive,is_alive,1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// --- Fabrice: alife decorating background triggered by cells\n// here: reaction diffusion triggered by cells\n\n// https://en.wikipedia.org/wiki/Reaction%E2%80%93diffusion_system#Two-component_reactionâ€“diffusion_equations\nfloat L = .5, K = .9, S = 1., du = 10., dv = 1., T = .5,  dt = .05; \n\n#define f(u)  L*u -u*u*u -K\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U /= iResolution.xy;\n\n    O =  texture(iChannel0,U);                            // previous step\n    \n    O.xy += dt* ( vec2(du,dv)*texture(iChannel0,U, 1.).xy // diffusion\n                 + vec2( f(O.x) - S*O.y ,  O.x - O.y )    // reaction\n                ) / vec2(1, T);\n    O.x += texture(iChannel1,U/CELL_SIZE).y;              // trigger source\n // if (iMouse.z>0.) O-=O;                                // reset (anti NaN ;-) )\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}