{
    "Shader": {
        "info": {
            "date": "1724898994",
            "description": "Testing out some rudimentary motion tracking to create a datamosh-esque effect.\n\nClick to place a debug point.\nHold space to freeze the webcam (e.g. to swap a different person in and track their face on yours)\nR to reset\nD to see the tracking view (debug)",
            "flags": 48,
            "hasliked": 0,
            "id": "XclBRB",
            "likes": 0,
            "name": "art motion 3",
            "published": 3,
            "tags": [
                "motion"
            ],
            "usePreview": 0,
            "username": "ExOR",
            "viewed": 57
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if (texelFetch(iChannel2, ivec2(68, 0), 0).x != 0.0) {\n        // For debugging, hold space to see raw pointer data\n        fragColor = (texture(iChannel1, uv / float(BLOCKDIM)) - 0.5) * 50.0 + 0.5;\n    } else {\n        fragColor = texture(iChannel0, uv);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Buffers A and B just maintain a copy of the last frame's camera\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    if (iFrame % 16 == 0) {\n        fragColor = texture(iChannel1, uv);\n    } else {\n        fragColor = texture(iChannel0, uv);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Buffers A and B just maintain a copy of the last frame's camera\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    if (iFrame % 16 == 1) {\n        fragColor = texture(iChannel1, uv);\n    } else {\n        fragColor = texture(iChannel0, uv);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Buffer C provides pointers from the previous frame to the current frame\n\nvec2 dim;\n\nvec4 prevTex(vec2 uv) {\n    if (iFrame % 16 == 0) {\n        return texture(iChannel1, uv);\n    } else {\n        return texture(iChannel0, uv);\n    }\n}\n\nvec4 curTex(vec2 uv) {\n    return texture(iChannel2, uv);\n}\n\nfloat blockDist(vec2 curUV, vec2 prevUV) {\n    float dist = 0.0;\n    \n    for (int i = 0; i < BLOCKDIM; i++) {\n        for (int j = 0; j < BLOCKDIM; j++) {\n            vec2 offset = vec2(float(i) * dim.x, float(j) * dim.y);\n            dist += distance(curTex(curUV + offset), prevTex(prevUV + offset));\n        }\n    }\n    \n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy * float(BLOCKDIM);\n    fragColor = vec4(0.5, 0.5, 0.0, 1.0);\n    if (uv.x > 1.0 || uv.y > 1.0) {\n        return;\n    }\n    \n    dim = 0.1/iResolution.xy;\n    \n    float minDist = blockDist(uv, uv) - 0.0; // The -0.5 biases towards no movement a bit to make it more stable\n    vec2 minPointer = vec2(0.0, 0.0);\n    \n    for (int i = 0; i < 8; i++) { // up, up-right, right, down-right, down, down-left, left, up-left\n        vec2 dir = vec2(0.0, 0.0);\n        switch (i) {\n        case 0:\n            dir.y = dim.y;\n            break;\n        case 1:\n            dir.x = dim.x;\n            dir.y = dim.y;\n            break;\n        case 2:\n            dir.x = dim.x;\n            break;\n        case 3:\n            dir.x = dim.x;\n            dir.y = -dim.y;\n            break;\n        case 4:\n            dir.y = -dim.y;\n            break;\n        case 5:\n            dir.x = -dim.x;\n            dir.y = -dim.y;\n            break;\n        case 6:\n            dir.x = -dim.x;\n            break;\n        case 7:\n            dir.x = -dim.x;\n            dir.y = dim.y;\n            break;\n        }\n        \n        for (int j = 1; j <= ITERS; j++) {\n            vec2 pointer = dir * float(j * STRIDE);\n            float dist = blockDist(uv, uv + pointer);\n            if (dist < minDist) {\n                minDist = dist;\n                minPointer = pointer;\n            }\n        }\n    }\n    \n    fragColor.xy += minPointer;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 d = 1.0/iResolution.xy;\n    \n    if (iFrame < 5 || texelFetch(iChannel3, ivec2(82, 0), 0).x != 0.0) {\n        // Start off with webcam data (or reset if r held down)\n        fragColor = texture(iChannel2, uv);\n        return;\n    } else if (texelFetch(iChannel3, ivec2(32, 0), 0).x != 0.0) {\n        // If space is held down then pause tracking\n        fragColor = texture(iChannel1, uv);\n        return;\n    } else if (iMouse.z > 0.0 && distance(fragCoord, iMouse.zw) < 10.0) {\n        // Place a tracking dot on click\n        fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n        return;\n    }\n    \n    // Move current buffer by pointer from tracking data\n    vec2 pointer = texture(iChannel0, uv / float(BLOCKDIM)).xy - 0.5;\n    fragColor = texture(iChannel1, uv + pointer) * float(DECAY) + texture(iChannel2, uv) * (1.0 - float(DECAY));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// How big of a block to move around (1 for individual pixels)\n#define BLOCKDIM 4\n\n// Check ITERS * STRIDE pixels in each direction for match\n#define ITERS 16\n#define STRIDE 1\n\n// How slow the image should refresh (1 = never)\n#define DECAY 0.99",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}