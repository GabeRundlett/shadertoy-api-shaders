{
    "Shader": {
        "info": {
            "date": "1635017970",
            "description": "My attempt to recreate Martin Naumann's \"Super-Neumorphism\" https://www.behance.net/gallery/108751509/Super-Neumorphism",
            "flags": 0,
            "hasliked": 0,
            "id": "sdVXRV",
            "likes": 19,
            "name": "Super-Neumorphism",
            "published": 3,
            "tags": [
                "noise",
                "rgb",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "theschwa",
            "viewed": 457
        },
        "renderpass": [
            {
                "code": "/*\n\nMy attempt to recreate Martin Naumann's \"Super-Neumorphism\" https://www.behance.net/gallery/108751509/Super-Neumorphism\n\nBy: theschwa\n\n*/\n\n# define PI 3.141592653589\n# define TAU (2. * PI)\n\n// Noise by IQ: https://www.shadertoy.com/view/XdXBRH\nvec2 hash( in vec2 x )  // replace this by something better\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\n\n// return gradient noise (in x) and its derivatives (in yz)\nfloat noised( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\n#if 0\n    // quintic interpolation\n    vec2 u = f*f*f*(f*(f*6.0-15.0)+10.0);\n    vec2 du = 30.0*f*f*(f*(f-2.0)+1.0);\n#else\n    // cubic interpolation\n    vec2 u = f*f*(3.0-2.0*f);\n#endif    \n    \n    vec2 ga = hash( i + vec2(0.0,0.0) );\n    vec2 gb = hash( i + vec2(1.0,0.0) );\n    vec2 gc = hash( i + vec2(0.0,1.0) );\n    vec2 gd = hash( i + vec2(1.0,1.0) );\n    \n    float va = dot( ga, f - vec2(0.0,0.0) );\n    float vb = dot( gb, f - vec2(1.0,0.0) );\n    float vc = dot( gc, f - vec2(0.0,1.0) );\n    float vd = dot( gd, f - vec2(1.0,1.0) );\n\n    return va  + u.x*(vb-va) \n               + u.y*(vc-va) \n               + u.x*u.y*(va-vb-vc+vd);\n}\n\nvec3 colorNoise ( vec2 uv ) {\n    vec3 col = vec3(0., 0., 0.);\n    col.x = noised( uv );\n    col.y = noised( uv + vec2(10., 13.) );\n    col.z = noised( uv + vec2(-17., -15.) );\n    \n    // Map to [0, 1]\n    col = .5 + .5*col;\n    \n    // Contrast\n    col = (col - .5) * 2. + .5;\n    \n    return col;\n}\n\nfloat radialmap( vec2 P ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = P;\n    \n    //uv *= 2.;\n    float l = length( uv );\n    //float d = cos( l / .2 ) ;\n    \n    float d = pow( cos( 3.141 * l / 2. ), 0.5);\n    \n    // Make it go to 0 outside the circle\n    //d *= step(-1., -l);\n    \n    //d = 1. - pow( abs( l ), 3.5 );\n    \n    d = clamp( d, 0.001, 1.);\n    \n    return d;\n    \n}\n\nvec3 upscale_by_grad( vec2 uv ) {\n    float scale = 2.*abs(iTime/20. - floor(iTime/20. + .5) )*1.;\n    //scale = 1.;\n    float radmap = radialmap( uv );\n    \n    // Invert the radial map\n    uv *= scale * (1. - radmap);\n    \n    vec3 col = colorNoise( uv - vec2( cos( iTime * .23 ), sin( iTime * .15 ) ) );\n    return col;\n}\n\n\nvec3 unpolarize( vec2 uv ) {\n    float r = 1.;\n    \n    vec2 rec;\n    \n    rec.x = uv.y * cos( uv.x * TAU ) * r;\n    rec.y = uv.y * sin( uv.x * TAU ) * r;\n    \n \n    return upscale_by_grad(rec);\n}\n\n\nvec3 mirror_shift( vec2 uv ) {\n    vec3 col = vec3( 0. );\n    \n\n    if( uv.y < .5 ) {\n        uv.y += .5;\n        uv.x = (1. - uv.x);\n        col = unpolarize( uv );\n    } else { \n        uv.y -= .5;\n        uv.y = (1. - uv.y);\n        col = unpolarize( uv );\n    }\n    \n    return col;\n}\n\n\nvec3 polarize( vec2 rec ) {\n    vec2 pol;\n    \n    pol.y = length( rec );\n    pol.x = atan( rec.y, rec.x) / TAU;\n    \n    return mirror_shift( pol );\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 st = gl_FragCoord.xy/iResolution.xy;\n    vec2 uv = st;\n    \n    vec3 col = vec3( 0. );\n    \n    \n    st -= vec2( .5 );\n    st *= 2.;\n    st.x *= iResolution.x/iResolution.y;\n    \n    \n    \n    \n    col = upscale_by_grad( st );\n    col = unpolarize( st );\n    col = mirror_shift( st );\n    col = polarize( st );\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}