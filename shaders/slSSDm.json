{
    "Shader": {
        "info": {
            "date": "1627837984",
            "description": "The integral of sqrt(x^2+1) is (asinh(x)+x*sqrt(x^2+1))/2\nHere is a geometrical interpretation. Note that integrating the square root of a quadratic also boils down to this integral (an example would be the arclength of a quadratic bezier curve).",
            "flags": 0,
            "hasliked": 0,
            "id": "slSSDm",
            "likes": 12,
            "name": "Integration - sqrt(x^2+1)",
            "published": 3,
            "tags": [
                "geometry",
                "integration",
                "hyperbola",
                "righttriangle",
                "hyperbolicsector"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 196
        },
        "renderpass": [
            {
                "code": "// Drawing utilities\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\n\n// Modified version of font loader from https://www.shadertoy.com/view/ltcXzs\nvoid drawChar(inout vec3 color, in vec3 charColor, in vec2 p, in vec2 pos, in vec2 size, in int char) {\n    p = (p - pos) / size + 0.5;\n    if (all(lessThan(abs(p - 0.5), vec2(0.5)))) {\n        float val = textureGrad(iChannel0, p / 16.0 + fract(vec2(char, 15 - char / 16) / 16.0), dFdx(p / 16.0), dFdy(p / 16.0)).r;\n        color = mix(color, charColor, val);\n    }\n}\n\n// SDFs\nfloat sdDisk(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    p = abs(p) - b;\n    return length(max(p, 0.0)) + min(0.0, max(p.x, p.y));\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec4 mouse = (vec4(iMouse.xy, abs(iMouse.zw)) - center.xyxy) / iResolution.y * 8.0;\n    vec2 uv = (fragCoord - center) / iResolution.y * 8.0;\n    float unit = 16.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    // Default before interaction\n    if (ivec2(iMouse.xy) == ivec2(0)) mouse.x = sin(iTime) + 2.0;\n\n    // Axes\n    drawSDF(abs(uv.x), vec3(0.0, 0.0, 1.0));\n    drawSDF(abs(uv.y), vec3(0.0, 0.0, 1.0));\n\n    // Point on hyperbola\n    vec2 p = vec2(mouse.x, sqrt(mouse.x * mouse.x + 1.0));\n\n    // Hyperbola\n    float y = sqrt(uv.x * uv.x + 1.0);\n    float dx = uv.x / sqrt(uv.x * uv.x + 1.0);\n\n    // Section\n    vec2 cen = 0.5 * p;\n    drawSDF(max((uv.y - y) / sqrt(1.0 + dx * dx), sdBox(uv - cen, abs(cen))), uv.y > p.y / p.x * uv.x ? vec3(0.0, 1.0, 0.0) : vec3(0.0, 0.0, 1.0));\n\n    drawSDF(sdLine(uv, vec2(0.0, p.y), p) - 0.01, vec3(0.5, 0.0, 1.0));\n    drawSDF(sdLine(uv, vec2(p.x, 0.0), p) - 0.01, vec3(0.5, 0.0, 1.0));\n    drawSDF(sdLine(uv, vec2(0.0), p) - 0.01, vec3(0.5, 0.0, 1.0));\n\n    // Text \"u=sinh(a)\"\n    vec2 pos = vec2(0.5 * p.x - 1.0, p.y + 0.25);\n    drawChar(color, vec3(1.0), uv, pos, vec2(0.5), u);\n    drawChar(color, vec3(1.0), uv, pos + vec2(0.25, 0.0), vec2(0.5), EQUAL);\n    drawChar(color, vec3(1.0), uv, pos + vec2(0.5, 0.0), vec2(0.5), s);\n    drawChar(color, vec3(1.0), uv, pos + vec2(0.75, 0.0), vec2(0.5), i);\n    drawChar(color, vec3(1.0), uv, pos + vec2(1.0, 0.0), vec2(0.5), n);\n    drawChar(color, vec3(1.0), uv, pos + vec2(1.25, 0.0), vec2(0.5), h);\n    drawChar(color, vec3(1.0), uv, pos + vec2(1.5, 0.0), vec2(0.5), OPEN_PARENTHESIS);\n    drawChar(color, vec3(1.0), uv, pos + vec2(1.75, 0.0), vec2(0.5), a);\n    drawChar(color, vec3(1.0), uv, pos + vec2(2.0, 0.0), vec2(0.5), CLOSE_PARENTHESIS);\n\n    // Text \"v=cosh(a)\"\n    vec2 vu = vec2(-uv.y, uv.x); // Rotate 90 degrees\n    pos = vec2(-0.5 * p.y - 0.5 - 0.5, p.x + 0.25 * sign(p.x));\n    drawChar(color, vec3(1.0), vu, pos, vec2(0.5), v);\n    drawChar(color, vec3(1.0), vu, pos + vec2(0.25, 0.0), vec2(0.5), EQUAL);\n    drawChar(color, vec3(1.0), vu, pos + vec2(0.5, 0.0), vec2(0.5), c);\n    drawChar(color, vec3(1.0), vu, pos + vec2(0.75, 0.0), vec2(0.5), o);\n    drawChar(color, vec3(1.0), vu, pos + vec2(1.0, 0.0), vec2(0.5), s);\n    drawChar(color, vec3(1.0), vu, pos + vec2(1.25, 0.0), vec2(0.5), h);\n    drawChar(color, vec3(1.0), vu, pos + vec2(1.5, 0.0), vec2(0.5), OPEN_PARENTHESIS);\n    drawChar(color, vec3(1.0), vu, pos + vec2(1.75, 0.0), vec2(0.5), a);\n    drawChar(color, vec3(1.0), vu, pos + vec2(2.0, 0.0), vec2(0.5), CLOSE_PARENTHESIS);\n\n    // uv/2 (in triangle)\n    pos = vec2(2.0 * p.x, p.y) / 3.0 - vec2(0.25, 0.0);\n    drawChar(color, vec3(1.0), uv, pos, vec2(0.5), u);\n    drawChar(color, vec3(1.0), uv, pos + vec2(0.25, 0.0), vec2(0.5), v);\n    drawChar(color, vec3(1.0), uv, pos + vec2(0.5, 0.0), vec2(0.5), SLASH);\n    drawChar(color, vec3(1.0), uv, pos + vec2(0.75, 0.0), vec2(0.5), TWO);\n\n    // a/2 (in hyperbolic sector)\n    drawSDF(sdLine(uv * vec2(sign(p.x), 1.0), vec2(-1.0, 0.5), vec2(0.125, 0.5)), vec3(1.0));\n    if (p.x > 0.0) {\n        drawChar(color, vec3(1.0), uv, vec2(-1.75, 0.5), vec2(0.5), a);\n        drawChar(color, vec3(1.0), uv, vec2(-1.5, 0.5), vec2(0.5), SLASH);\n        drawChar(color, vec3(1.0), uv, vec2(-1.25, 0.5), vec2(0.5), TWO);\n    }\n\n    else {\n        drawChar(color, vec3(1.0), uv, vec2(1.25, 0.5), vec2(0.5), a);\n        drawChar(color, vec3(1.0), uv, vec2(1.5, 0.5), vec2(0.5), SLASH);\n        drawChar(color, vec3(1.0), uv, vec2(1.75, 0.5), vec2(0.5), TWO);\n    }\n\n    drawSDF(abs(uv.y - y) / sqrt(1.0 + dx * dx), vec3(1.0, 0.0, 0.0));\n    drawSDF(sdDisk(uv, p, 0.1), vec3(1.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int SPACE = 32;\nconst int Exclame = 33;\nconst int DOUBLE_QUOTE = 34;\nconst int HASHTAG = 35;\nconst int DOLLAR = 36;\nconst int PERCENT = 37;\nconst int AMPERSAND = 38;\nconst int SINGLE_QUOTE = 39;\nconst int OPEN_PARENTHESIS = 40;\nconst int CLOSE_PARENTHESIS = 41;\nconst int ASTERISK = 42;\nconst int PLUS = 43;\nconst int COMMA = 44;\nconst int HYPHEN = 45;\nconst int PERIOD = 46;\nconst int SLASH = 47;\nconst int ZERO = 48;\nconst int ONE = 49;\nconst int TWO = 50;\nconst int THREE = 51;\nconst int FOUR = 52;\nconst int FIVE = 53;\nconst int SIX = 54;\nconst int SEVEN = 55;\nconst int EIGHT = 56;\nconst int NINE = 57;\nconst int COLON = 58;\nconst int SEMICOLON = 59;\nconst int LESS_THAN = 60;\nconst int EQUAL = 61;\nconst int GREATER_THAN = 62;\nconst int QUESTION = 63;\nconst int AT = 64;\nconst int A = 65;\nconst int B = 66;\nconst int C = 67;\nconst int D = 68;\nconst int E = 69;\nconst int F = 70;\nconst int G = 71;\nconst int H = 72;\nconst int I = 73;\nconst int J = 74;\nconst int K = 75;\nconst int L = 76;\nconst int M = 77;\nconst int N = 78;\nconst int O = 79;\nconst int P = 80;\nconst int Q = 81;\nconst int R = 82;\nconst int S = 83;\nconst int T = 84;\nconst int U = 85;\nconst int V = 86;\nconst int W = 87;\nconst int X = 88;\nconst int Y = 89;\nconst int Z = 90;\nconst int OPEN_BRACKET = 91;\nconst int BACKSLASH = 92;\nconst int CLOSE_BRACKET = 93;\nconst int CIRCUMFLEX = 94;\nconst int a = 97;\nconst int b = 98;\nconst int c = 99;\nconst int d = 100;\nconst int e = 101;\nconst int f = 102;\nconst int g = 103;\nconst int h = 104;\nconst int i = 105;\nconst int j = 106;\nconst int k = 107;\nconst int l = 108;\nconst int m = 109;\nconst int n = 110;\nconst int o = 111;\nconst int p = 112;\nconst int q = 113;\nconst int r = 114;\nconst int s = 115;\nconst int t = 116;\nconst int u = 117;\nconst int v = 118;\nconst int w = 119;\nconst int x = 120;\nconst int y = 121;\nconst int z = 122;\nconst int OPEN_BRACE = 123;\nconst int PIPE = 124;\nconst int CLOSE_BRACE = 125;\nconst int TILDE = 126;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}