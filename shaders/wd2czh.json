{
    "Shader": {
        "info": {
            "date": "1586124832",
            "description": "looks like a trans-dimentional turd",
            "flags": 32,
            "hasliked": 0,
            "id": "wd2czh",
            "likes": 9,
            "name": "Day 108",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 396
        },
        "renderpass": [
            {
                "code": "\n// radiual chromab in this buffer\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n\tfragColor = vec4(0);\n    // Radial blur\n    float steps = 40.;\n    float scale = 0.00 + pow(dot(uvn,uvn),2.)*0.;\n    float chromAb = pow(length(uv - 0.5),0.9)*0.;\n    vec2 offs = vec2(0);\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n        scale *= 0.97;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.r += texture(iChannel0, target + chromAb*1.4/iResolution.xy).x;\n    \tradial.g += texture(iChannel0, target).y;\n    \tradial.b += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    radial /= steps;\n    \n    fragColor += radial;\n    \n    //fragColor = 1. - fragColor;\n    fragColor *= 3.5;\n    fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.1);\n    fragColor = max(fragColor, 0.);\n    //fragColor.b *= 1. + uv.x*0.4;\n    fragColor *= 1. - dot(uvn,uvn)*1.;\n    fragColor = pow(fragColor, vec4(0.4545 ));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec4 valueNoise(float m, float p){\n\treturn mix(\n        texture(iChannel0, vec2(floor(m))/256.),\n        texture(iChannel0, vec2(floor(m + 1.))/256.),\n        pow(smoothstep(0.,1.,fract(m)),p)\n    );\t\n}\n#define dmin(a,b) a.x < b.x ? a : b\n\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n#define pmod(p,x) mod(p,x) - 0.5*x\n#define pi acos(-1.)\n#define tau (2.*pi)\nvec4 N;\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e6);\n\t\n    \n    vec3 q = p;\n    \n    \n    //float m = sin(p.y*10. +  sin(p.x*20.)*1. + iTime );\n    float m = sin(p.x*4. +  sin(p.x*20. - cos(p.z*20.)*1. - iTime*0.)*1. + iTime );\n    \n    p -= m*0.04;\n    //p -= m*0.04;\n    float b = length(p) - 0.5 ;\n    float bb = length(p - vec3(0.5 - N.z*0.5,0.1 - N.x*0.7,0.5)) - 0.2 - N.z*0.1 ;\n    float bbb = length(p + vec3(0.3,0. - N.y*0.4,0.2)) - 0.1 - N.y*0.1 ;\n    float bbc = length(p + vec3(0.2,-0.3 - N.x*0.4,-0.4)) - 0.2 - N.y*0.1 ;\n    \n    \n    b = opSmoothUnion( b, bb, 0. + N.z) ;\n    b = opSmoothUnion( b, bbb, 0. + N.w*1.) ;\n    b = opSmoothUnion( b, bbc, 0. + N.y*1.) ;\n    \n    d = dmin(d, vec2(b, 2.));\n    \n    \n    \n    p = q;\n    float mb = sin(p.x*10. + iTime*4. + sin(p.y)*10.  + cos(p.x*1. + iTime)*1.);\n    \n    p -= mb*0.06;\n    float c = -length(p.xz)+ 2.4;\n    \n    d = dmin(d, vec2(c, 3.));\n    \n    d.x *= 0.6;\n    \n    return d;\n}\n\n\nvec3 getNormal(vec3 p){\n\tvec2 t = vec2(0.0001,0.);\n    return -normalize(vec3(\n    \tmap(p - t.xyy).x - map(p + t.xyy).x,\n    \tmap(p - t.yxy).x - map(p + t.yxy).x,\n    \tmap(p - t.yyx).x - map(p + t.yyx).x\n    ));\n}\n\nvec2 march(vec3 ro,vec3  rd, inout vec3  p,inout float t,inout bool hit){\n\tt = 0.; hit = false; p = ro;\n\tvec2 d;\n    for(int i = 0;i < 150; i++){\n    \td = map(p);\n        \n        if(d.x < 0.00001){\n        \thit = true;\n            break;\n        }\n        \n        t += d.x;\n    \tp = ro + rd*t;\n    }\n\treturn d;\n}\n\nfloat fov;\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n\tvec3 dir = normalize(lookAt - ro);\n\tvec3 right = normalize(cross(vec3(0,1,0), dir));\n\tvec3 up = normalize(cross(dir, right));\n    return normalize(dir + (right*uv.x + up*uv.y)*fov);\n}\n\n#define mx (iMouse.x/iResolution.x)*2.\n#define my (iMouse.y/iResolution.x)*0.5\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n\n\tvec3 ro = vec3(0);\n    \n    uv *= 1. - dot(uv,uv)*0.1;\n    \n    N = valueNoise(iTime*0.5, 1.)*1.5;\n    vec4 NB = valueNoise(iTime*0.25, 1.);\n    \n    ro.xz += vec2(sin(NB.x*6. + mx),cos( NB.x*6. + mx))*(2. + my);\n    ro.y += NB.y*1.;\n    fov = 0.7 + NB.x*0.3;\n    uv.xy *= rot(0.7);\n    \n    vec3 lookAt = vec3(0.);\n    \n    vec3 rd = getRd(ro, lookAt, uv);\n\tvec3 p; float t; bool hit;\n    vec2 d = march(ro, rd, p, t, hit);\n\n    #define AO(h) smoothstep(0.,1.,map(p + n*h).x/h)\n    #define SSS(h) clamp(map(p + normalize(vec3(1.))*h).x/h,0.,1.)\n    #define pal(a,b,c,d,e) ((a) + (b)*sin((c)*(d) + (e))) \n    \n    \n    if(hit){\n    \tvec3 n = getNormal(p);\n        \n        float ao = AO(0.6)*AO(0.9)*AO(0.1);\n        float sss = SSS(0.6)*SSS(0.9);\n        \n        ao *= (0.1 + sss)*30.;\n        //ao *= 2.;\n        \n        float dnrd = max(dot(n, -rd), 0.);\n        float fres = pow(1.-dnrd,5.);\n        //float antifres = smoothstep(0.,1., (1. - pow(1.-dnrd,1.))* 5.);\n        float antifres = 1. - smoothstep(0.,1., (pow(1.-dnrd,5.))* 2.4);\n        \n        //antifres = 1.;\n        if(d.y == 2.){\n        \tvec3 p = pal(0.5,vec3(0.5,0.6,0.5), vec3(0.1,0.5,0.9), 0.7 + acos(rd)*0., + dnrd*20. + iTime)*fres*antifres;\n        \tvec3 pp = pal(0.5,0.5, vec3(1.6,0.5,0.9), 0.7 + acos(rd)*0.2, acos(rd)*0.2 + dnrd*90.)*(smoothstep(0.,1., pow(dnrd,50.)));\n        \tcol += p*2.;\n        \tcol += pp*0.06;\n        } else if(d.y == 3.){\n        \tvec3 p = pal(0.5,0.5, vec3(0.2,0.5,0.7), 0.7, + dnrd*20.)*pow(fres, 0.6)*antifres;\n            //vec3 p = pal(0.5,0.5, vec3(0.2,3.5,2.), 0.7, + dnrd*20.)*pow(fres, 0.6)*antifres;\n        \tcol += p*0.1;\n        }\n    \n        //col += fres;\n        \n        col *= ao;\n        \n        \n    }\n    \n    \n    \n    fragColor = vec4(col,t);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}