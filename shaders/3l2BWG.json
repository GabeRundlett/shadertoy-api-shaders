{
    "Shader": {
        "info": {
            "date": "1599754640",
            "description": "parallax mapping",
            "flags": 0,
            "hasliked": 0,
            "id": "3l2BWG",
            "likes": 3,
            "name": "parallax mapping cube",
            "published": 3,
            "tags": [
                "parallaxmapping"
            ],
            "usePreview": 0,
            "username": "ich",
            "viewed": 481
        },
        "renderpass": [
            {
                "code": "#define max_dist 100.\n#define min_dist .001\n#define pi 3.141\n\n// camera\n\nmat3 look(vec3 d)\n{\n    vec3 r = normalize(cross(vec3(0, 1, 0), d));\n    vec3 u = normalize(cross(d, r));\n\treturn mat3(r, u, d);\n}\n\n// 3D scene\n\nfloat cube(vec3 p, float r) {\n\treturn length(max(vec3(0), abs(p) - r)) - min_dist;\n}\n\nvec2 cube_texcoord(vec3 p, float r) {\n\treturn p.xy / r * .5;\n}\n\nfloat scene(vec3 p) {\n\treturn cube(p, .5);\n}\n\nvec2 scene_texcoord(vec3 p) {\n\treturn cube_texcoord(p, .5) + .5;\n}\n\nfloat march(vec3 ro, vec3 rd) {\n\tfloat lo = 0.;\n    vec3 p = ro;\n    \n    for (int i = 0; i < 100; ++i) {\n    \tfloat l = scene(p);\n        lo += l;\n        \n        if (l < min_dist || lo > max_dist)\n            return lo;\n        \n        p += rd * l;\n    }\n}\n\nvec3 normal(vec3 p) {\n\tvec2 e = vec2(0, min_dist);\n    float l = scene(p);\n    \n    return normalize(\n    \tl - vec3(\n        \tscene(p - e.yxx),\n            scene(p - e.xyx),\n            scene(p - e.xxy)\n        )\n    );\n}\n\n// heightmap texture\n\nfloat circle(vec2 uv, float r) {\n\treturn length(uv) - r;\n}\n\nfloat square(vec2 uv, float r) {\n    uv = abs(uv);\n\treturn max(uv.x, uv.y) - r;\n}\n\nfloat height(vec2 uv) {\n\tfloat l = 0.;\n    l += max(0., -circle(uv - vec2(.25), .25));\n    l -= max(0., -square(uv - vec2(.75), .25));\n    l = smoothstep(.0, .1, l) - smoothstep(.0, -.1, l);\n    l += sin(uv.x * 15. + sin(iTime * .5) * 20.) * pow(max(0., sin(iTime) * sin(iTime * .3)), 2.);\n    return l * .1;\n}\n\nvec3 height_normal(vec2 uv) {\n\tvec2 e = vec2(0, min_dist);\n    float h = height(uv);\n    \n    vec2 v = h - vec2(\n        height(uv + e.yx),\n        height(uv + e.xy)\n    );\n    v /= min_dist;\n    float l = length(v) + .001;\n    return normalize(vec3(v, 1. / l));\n}\n\nvec2 parallax_offset(vec2 uv, vec2 rd) {\n    return -height(uv) * rd;\n}\n\n// main\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float aspect = iResolution.x / iResolution.y;\n    vec2 aspect2 = vec2(aspect, 1);\n    \n    vec2 uv = fragCoord / iResolution.y - aspect2 * .5;\n    \n    vec2 m = iMouse.xy / iResolution.y - aspect2 * .5;\n    m *= -pi * .2;\n    \n    vec3 ro = vec3(sin(m.x) * cos(m.y), sin(m.y), cos(m.x) * cos(m.y)) * 1.6;\n    vec3 rd = look(normalize(ro)) * normalize(vec3(uv, -1));\n    \n    float l = march(ro, rd);\n    vec3 p = ro + rd * l;    \n    vec3 n = normal(p);\n    vec2 tx = scene_texcoord(p);\n\n    tx += parallax_offset(tx, (look(n) * rd).xy);\n    n = height_normal(tx);\n    \n    vec3 c = vec3(0);\n    c += max(.2, .2 + .8 * dot(n, normalize(vec3(2, 1, 3))));\n    c *= texture(iChannel0, tx).r;\n    \n    float d = 1. - clamp(l / max_dist, 0., 1.);\n    c *= d;\n    \n    fragColor = vec4(c, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}