{
    "Shader": {
        "info": {
            "date": "1539257354",
            "description": "caustics technique reference\nhttps://medium.com/@evanwallace/rendering-realtime-caustics-in-webgl-2a99a29a0b2c",
            "flags": 0,
            "hasliked": 0,
            "id": "MldfDn",
            "likes": 75,
            "name": "Bottom of Water",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "water",
                "caustics"
            ],
            "usePreview": 0,
            "username": "kaneta",
            "viewed": 5852
        },
        "renderpass": [
            {
                "code": "#define Use_Perlin\n//#define Use_Value\n//#define Use_Simplex\n\n// ========= Hash ===========\n\n// Grab from https://www.shadertoy.com/view/4djSRW\n//#define MOD3 vec3(.1031,.11369,.13787)\n#define MOD3 vec3(443.8975,397.2973, 491.1871)\nfloat hash31(vec3 p3)\n{\n\tp3  = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return -1.0 + 2.0 * fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\n// ========= Noise ===========\n\nfloat value_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n        \t\t\tmix(hash31(pi + vec3(0, 0, 0)), hash31(pi + vec3(1, 0, 0)), w.x),\n        \t\t\tmix(hash31(pi + vec3(0, 0, 1)), hash31(pi + vec3(1, 0, 1)), w.x), \n                    w.z),\n        \t\tmix(\n                    mix(hash31(pi + vec3(0, 1, 0)), hash31(pi + vec3(1, 1, 0)), w.x),\n        \t\t\tmix(hash31(pi + vec3(0, 1, 1)), hash31(pi + vec3(1, 1, 1)), w.x), \n                    w.z),\n        \t\tw.y);\n}\n\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n                \tmix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                       \tw.x),\n                \tmix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                       \tw.x),\n                \tw.z),\n        \t\tmix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                       \tw.x),\n                   \tmix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                       \tw.x),\n                \tw.z),\n    \t\t\tw.y);\n}\n\nfloat simplex_noise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n    \n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n    \n    // thx nikita: https://www.shadertoy.com/view/XsX3zB\n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n\tvec3 i1 = e * (1.0 - e.zxy);\n\tvec3 i2 = 1.0 - e.zxy * (1.0 - e);\n    \n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n    \n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n    \n    return dot(vec4(31.316), n);\n}\n\nfloat noise(vec3 p) {\n#ifdef Use_Perlin\n    return perlin_noise(p * 2.0);\n#elif defined Use_Value\n    return value_noise(p * 2.0);\n#elif defined Use_Simplex\n    return simplex_noise(p);\n#endif\n    \n    return 0.0;\n}\n\n\nfloat sphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat box( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat bottom(vec3 ro, vec3 ray)\n{\n    float t = 0.0;\n    for (int i = 0; i < 256; i++) {\n        float res = plane(ro + ray * t, vec4(0.0, 1.0, 0.0, 10.0));\n        if( res < 0.00001 ) return t;\n        t += res;\n    }\n\n    return -1.0;\n}\n\nfloat map(vec3 p)\n{\n\tfloat pl = plane(p, vec4(0.0, 1.0, 0.0, 10.0));\n    float s = sphere(p - vec3(1.5, -8.0, 0.0), 1.0);\n    float b = box(p - vec3(-1.5, -8.0, 0.0), vec3(1.0));\n    float d = min(pl, s);\n    d = min(b, d);\n    return d;\n}\n\nvec2 scene(vec3 ro, vec3 ray)\n{\n    float t = 0.0;\n    for (int i = 0; i < 256; i++) {\n        float res = map(ro+ray*t);\n        if( res < 0.00001 ) return vec2(t, res);\n        t += res;\n    }\n\n    return vec2(-1.0);\n}\n\nvec2 intersect2(vec3 ro, vec3 ray)\n{\n    float t = 0.0;\n    for (int i = 0; i < 256; i++) {\n        float res = plane((ro+ray*t), vec4(0.0, 1.0, 0.0, 10.0));\n        if( res < 0.00001 ) return vec2(t, res);\n        t += res;\n    }\n\n    return vec2(-1.0);\n}\n\nvec2 water(vec3 ro, vec3 ray)\n{\n    float t = 0.0;\n    for (int i = 0; i < 64; i++) {\n        float res = plane(ro+ray*t, vec4(0.0, 1.0, 0.0, -1.0));\n        if( res < 0.0001 ) return vec2(t, res);\n        t += res;\n    }\n\n    return vec2(-1.0);\n}\n\nvec3 waterNormal(vec3 p, float e) {\n    vec3 ee = vec3(e, 0., 0.);\n    vec3 pp = p * 1.0;\n\tfloat h1 = noise(p + ee.xyy);\n    float h2 = noise(p - ee.xyy);\n    float h3 = noise(p + ee.yyx);\n    float h4 = noise(p - ee.yyx);\n    vec3 du = vec3(1., 0., h2 - h1);\n    vec3 dv = vec3(0., 1., h4 - h3);\n    return normalize(cross(du, dv)) * 0.5 + 0.5;\n    //return vec3(h1, h2, h3);\n}\n\nfloat caustics(vec3 p, vec3 lp) {\n    vec3 ray = normalize(p - lp);\n\n    vec2 shadow = scene(lp, ray);\n    float l = distance(lp + ray * shadow.x, p);\n    if (l > 0.01) {\n        return 0.0;\n    }\n\n    vec2 d = water(lp, ray);\n    vec3 waterSurface = lp + ray * d.x;\n\n    vec3 refractRay = refract(ray, vec3(0., 1., 0.), 1.0/1.333);\n    float beforeHit = bottom(waterSurface, refractRay);\n    vec3 beforePos = waterSurface + refractRay * beforeHit;\n\n    vec3 noisePos = waterSurface + vec3(0.,iTime * 2.0,0.);\n    float height = noise(noisePos);\n    vec3 deformedWaterSurface = waterSurface + vec3(0., height, 0.);\n\n    refractRay = refract(ray, waterNormal(noisePos, 0.5), 1.0/1.333);\n    float afterHit = bottom(deformedWaterSurface, refractRay);\n    vec3 afterPos = deformedWaterSurface + refractRay * afterHit;\n\n    float beforeArea = length(dFdx(beforePos)) * length(dFdy(beforePos));\n    float afterArea = length(dFdx(afterPos)) * length(dFdy(afterPos));\n    return max(beforeArea / afterArea, .001);\n}\n\nvec3 normal(vec3 pos, float e )\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n\treturn normalize( vec3(\n           map(pos+eps.xyy) - map(pos-eps.xyy),\n           map(pos+eps.yxy) - map(pos-eps.yxy),\n           map(pos+eps.yyx) - map(pos-eps.yyx) ) );\n}\n\nmat3 createCamera(vec3 ro, vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta - ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // fragment position\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    // camera\n    vec3 ro = vec3(sin(iTime * 0.1) * 10.0, 0.0, cos(iTime * 0.1) * 10.0) * 2.0;\n    vec3 ta = vec3(0.0, -8.0, 0.0);\n    mat3 cm = createCamera(ro, ta, 0.0);\n    vec3 ray = cm * normalize(vec3(p, 4.0));\n    \n    // marching loop\n    vec2 res = scene(ro, ray);\n    \n    // hit check\n    if(res.y > -0.5) {\n        vec3 p = ro + ray * res.x;\n       \tvec3 n = normal(p, 0.0001);\n        vec3 l = vec3(10.0, 10.0, 10.0);\n        vec3 v = -normalize(p - l);\n        fragColor = vec4(normal(ro + ray * res.x, 0.0001), 1.0);\n        float c = caustics(ro + ray * res.x, l) * 0.6;\n        vec3 co = vec3(c,c,c) *  + vec3(0.02,0.15,0.27);\n        float li = max(dot(v, n), 0.0);\n        vec3 col = co * li + vec3(0.02,0.15,0.27);\n        col = pow(col, vec3(1.0/2.2));\n        fragColor = vec4(mix(col, vec3(0.02,0.15,0.27), res.x / 100.0), 1.0);\n    }else{\n        fragColor = vec4(vec3(0.0), 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}