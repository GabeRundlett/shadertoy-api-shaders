{
    "Shader": {
        "info": {
            "date": "1726409184",
            "description": "originals fractal 62 https://www.shadertoy.com/view/4tyfWy",
            "flags": 0,
            "hasliked": 0,
            "id": "lXXcRj",
            "likes": 2,
            "name": "other star",
            "published": 3,
            "tags": [
                "fractal",
                "star"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 81
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\n#define t iTime\n#define r iResolution.xy\nfloat YClamp = 8.f;\nfloat Brightness = 2.f;\n\n\nvec2 triangle_wave(vec2 a){\n\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return abs(fract((a1)*(a2.x+0.01*cos(iTime)+a2.y+0.01*sin(iTime)))-.5);\n}\n\nvec3 fractal(vec2 uv){\n    vec3 col = vec3(0.);\n    float scale = 1.5;\n    vec2 t2 = vec2(0.);\n    vec3 col1 = col;\n    float c1=0.;\n    for(int k = 0; k < 12; k++){\n    \n        uv.y += 1./4.;\n        \n        uv = (uv+t2)/scale;\n        \n        uv = -(fract(vec2(uv+vec2(.5,1.5))*scale)-.5)/scale;\n        \n        t2 =\n            triangle_wave(uv-.5)\n            \n            //purple\n            //triangle_wave(uv+.5) - 1.\n        ;\n        uv =\n            //t2-triangle_wave(uv.yx)+fract(t2/2.)\n            \n            //looks better with more iterations\n            t2-triangle_wave(uv.yx)-fract(t2/2.)-vec2(floor(-uv.x),0.)\n        ;        uv.y -= sign(uv.x-.5)/2.;\n\n        \n        c1 =\n            //max(abs(uv.y-uv.x*sign(uv.x-uv.y))/2.,c1)\n            max(abs(uv.y-uv.x)/2.,c1)\n        ;\n        \n        c1 =\n            1.-abs(2.*c1-1.)\n            \n            //more colorful\n            //abs(2.*c1-1.)\n            \n            //Spooky!\n            //max(abs(2.*c1-2.),c1/4.)/2.\n        ;\n        \n        col.x =\n             //col.x\n            \n            //blue and white\n            //c1\n            \n            //red and blue and white\n            //max(1.-abs(2.*c1-1.),c1/4.)\n\n            \n            //more colorful\n            //max(length(uv-t2-c1)/3.,1.-col.x)\n            \n            //blue and green\n            //max(length(uv-c1)/3.,col.x)\n            length(uv-c1)/3.\n           \n            //purple\n            //2. - max((abs(uv.y-uv.x))/3.,col.x)\n           \n            //black and white\n            //col.x\n        ;\n        \n        col =\n            abs(col-(1.-(c1*col.x)));\n        col1 =\n            abs(col1*c1-col-1.).yzx\n            //abs(col1*c1-col*sign(t2.y-t2.x)-1.).yzx\n        ;\n        //uv.x += sign(uv.y-.5)/2.;\n    }\n    return col1;\n}\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    \n    vec3 c;\n     vec2 uv = (C* 2.0 - iResolution.xy) / iResolution.y;\n    \n    //uv = fract(uv * sin(.5f * iTime)) - .5f;\n\n    vec3 col = vec3(.5f, 1.f, 1.f);\n    col.z = sin(.5f * iTime * 5.f);\n    col.y = cos(.5f * iTime * 5.f);\n       \n\n    float d = length(uv);\n    d = sin(d * 1.0f - iTime) / 8.f;\n    d = abs(d);\n    d = 0.02 / d;\n    \n    col *= d * Brightness;\n    float t1 = 6.;\n    \n   \n\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec3 col1 = fractal(uv);\n\tfloat l,z=t;\n\tfor(int i=0;i<3;i++) {\n\t\tvec2 uv,p=C.xy/r;\n\t\tuv=p;\n\t\tp-=.5;\n\t\tp.x*=r.x/r.y;\n\t\tz+=.37;\n\t\tl=length(p);\n\t\tuv+=p/l*(sin(z)+1.)*abs(sin(l*9.-z-z));\n\t\tc[i]=.03/length(mod(uv,1.)-.5);\n\t}\n    \n    \n    \n    vec3 p2,q,r2=iResolution,\n    d2=normalize(vec3((C*2.-r2.xy)/r2.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<70.;\n        O.xyz+=mix(vec3(10),H(g*.1),.8)*3./e/8e3\n    )\n    {\n        p2=g*d2+col1;\n    \n        a=30.;\n        p2=mod(p2-a,a*2.)-a;\n        s=2.;\n        for(int i=0;i++<8;){\n            p2=.3-abs(p2)+c;\n            p2.x<p2.z?p2=p2.zyx:p2;\n            p2.z<p2.y?p2=p2.xzy:p2;\n            s*=e=1.4+sin(iTime*.1)*.1;\n            p2=abs(p2)*e-\n                vec3(\n                    5.*3.,\n                    120,\n                    8.*5.\n                 )+col*0.1;\n         }\n         g+=e=length(p2.yzxx)/s;\n    }\n    \n  \n    uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    O*= vec4(cheap_star(uv, anim) * vec3(0.5,0.5,0.5)*3.5, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}