{
    "Shader": {
        "info": {
            "date": "1622485329",
            "description": "Some shader practice",
            "flags": 0,
            "hasliked": 0,
            "id": "7ll3D4",
            "likes": 3,
            "name": "31052021",
            "published": 3,
            "tags": [
                "circle",
                "stars"
            ],
            "usePreview": 0,
            "username": "Pixdigit",
            "viewed": 276
        },
        "renderpass": [
            {
                "code": "const float TAU = 2. * 3.141569;\n\n\nvec3 pal(vec3 val) {\n    return 0.5 + 0.5*cos(val+vec3(0,2,4));\n}\n\nmat2 rot(float deg) {\n    float c = cos(deg);\n    float s = sin(deg);\n    return mat2(-c, s, s, c);\n}\n\nfloat rsin(float minVal, float maxVal, float val) {\n    float r = (maxVal - minVal) * 0.5;\n    return r * sin(val) + r + minVal;\n}\n\n\nfloat rand(float seed) {\n    return fract(sin(dot(vec2(seed),vec2(12.9898,78.233))) * 43758.5453);\n}\n\n// 2D SDF for a segment by IQ\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\nvec2 starTrail(float deg, float time) {\n    vec2 dir = vec2(sin(deg), cos(deg));\n    float phase = mod(time, 10.);\n    float d = pow(100., phase-1.3);\n    return dir*d;\n}\n\nvec3 star(vec2 uv, float seed) {\n\n    float deg = rand(seed+1.) * TAU;\n    float time = iTime*.1+rand(seed+2.)*10.;\n\n    vec3 col;\n    for (int i = 0; i<3; i++) {\n        vec2 trailStart = starTrail(deg, time + float(i) * 0.005);\n        vec2 trailEnd = starTrail(deg, time+0.1+ float(i) * 0.005);\n\n        if (length(trailStart) > length(trailEnd)) {\n            return vec3(0.);\n        }\n        \n        if (i == 0 && (abs(trailStart.y) > 1. || abs(trailStart.x) > iResolution.x / iResolution.y)) {\n            return vec3(0.);\n        }\n\n        float d = sdSegment(uv, trailStart, trailEnd);\n        \n        col[i] = smoothstep(.01, 0., d);\n    }\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col;\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 2.;\n\n    vec3 waves = vec3(rsin(0.07, .13, length(uv) * 2. - iTime * 1.2));\n\n    vec2 uv2 = rot(iTime) * (uv + vec2(0.5, 0.5));\n    float scale = rsin(.5, 1., iTime);\n    vec3 ring = pal(vec3(uv2 * scale, 1.) * 4.);\n    float ringMask = smoothstep(0.03, 0.0, abs(1.-length(uv)));\n    \n    vec3 stars;\n    for (int i = 0; i < 1000; i++) {\n        stars = stars + star(uv, float(i));\n    }\n    float starMask = clamp(length(stars), 0., 1.);\n\n    col = mix(mix(waves, stars, starMask), ring, ringMask);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}