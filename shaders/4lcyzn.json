{
    "Shader": {
        "info": {
            "date": "1531180910",
            "description": "Ordered dithering shader",
            "flags": 0,
            "hasliked": 0,
            "id": "4lcyzn",
            "likes": 10,
            "name": "Ordered dithering",
            "published": 3,
            "tags": [
                "dithering"
            ],
            "usePreview": 1,
            "username": "luka712",
            "viewed": 1761
        },
        "renderpass": [
            {
                "code": "\nconst mat4x4 threshold = mat4x4(0., 8., 2., 10., \n                                12., 4., 14., 6.,\n                                3.,11.,1.,9.,\n                                15.,7.,13., 5.);\n\n\nfloat findClosest(int x, int y, float v)\n{\n    mat4x4 thresholdT = transpose(threshold);\n    float t = (thresholdT[x][y]) / 16.;\n    if(v < t)\n    {\n      \treturn 0.;   \n    }\n    else\n    {\n     \treturn 1.;   \n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n\n    // https://en.wikipedia.org/wiki/Ordered_dithering\n   \tint x = int(fragCoord.x) % 4;\n    int y = int(fragCoord.y) % 4;\n    \n    // https://en.wikipedia.org/wiki/Luma_(video)\n\tfloat lum = dot(vec3(0.2126, 0.7152, 0.0722), col.rgb);\n    lum = findClosest(x,y, lum);\n \n\t// Output to screen\n\tfragColor = vec4(lum);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}