{
    "Shader": {
        "info": {
            "date": "1677960087",
            "description": "museum",
            "flags": 0,
            "hasliked": 0,
            "id": "csd3Df",
            "likes": 5,
            "name": "a thing i saw in a museum",
            "published": 3,
            "tags": [
                "museum"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 178
        },
        "renderpass": [
            {
                "code": "#define n_tau 6.2831\nvec2 f_o_rtd(vec2 o, float n_ang_nor){\n    float n_sin = sin(n_ang_nor);\n    float n_cos = cos(n_ang_nor);\n    return vec2(\n        -o.x*n_sin + o.y*n_cos, \n        o.x*n_cos + o.y*n_sin\n    );\n\n}\nfloat f_n_dg(vec2 o_fc){\n    float n_its = 20.;\n    float n_radians = atan(o_fc.y, o_fc.x);\n    float n_ang_nor = (n_radians/n_tau);\n    float n_it = ((n_ang_nor*n_its));\n    float n_itfl = floor(n_it);\n    float n_it_nor =  n_itfl/n_its;\n    float n_one_it_nor = 1./n_its;\n    float n_nor = fract(n_it);\n    float n_dcntr = length(o_fc);\n    // float n_circumf = 2.*n_dcntr*(n_tau/2.);\n    vec2 o_ponline = vec2(\n        cos((n_it_nor)*n_tau+(n_one_it_nor*n_tau*.5))*n_dcntr,\n        sin((n_it_nor)*n_tau+(n_one_it_nor*n_tau*.5))*n_dcntr\n    );\n    // float n = smoothstep(.0, 0.1*n_circumf,n_nor);\n    // float n = sin(fract(n_it)*n_tau);\n    float n = length(o_fc - o_ponline);\n    float n_thick = 0.01;\n    n = smoothstep(0., n_thick, n);\n\n    float n_circles = abs(fract((n_dcntr*(1./n_thick/2.)))-.5);\n    n *= n_circles*2.;\n    return n;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 o_fc = (fragCoord.xy-iResolution.xy*.5) / iResolution.y;\n    \n    fragColor = vec4(0.);\n    \n    float n_its = 5.;\n    float n_dprod = 1.;\n    float n_d1 = length(o_fc);\n    float n_dmin = 1.;\n    n_dprod *= pow(n_d1, 1./20.);\n    for(float n_it = 0.; n_it < n_its; n_it+=1.){\n        float n_it_nor = n_it/ n_its;\n        float n_radius = 0.3;\n        float n_radia = n_tau * n_it_nor;\n        vec2 o_p = vec2(\n            sin(n_radia)*n_radius, \n            cos(n_radia)*n_radius\n        );\n        float n_d = length(o_fc - o_p);\n\n        n_dprod *= pow(n_d, 1./1.74);\n\n    }\n    // n_dprod = pow(n_dprod, 1./3.);\n    // n_d = n_d * n_d1;\n    // float n = pow(n_d, 1./1.9);\n    float n_flow = smoothstep(0.00, 0.099, n_dprod);\n    n_flow = step(0.2, n_flow);\n    // n_dmin = min(n_dmin, n  );\n\n    float n_t = iTime*.5;\n    float n_dg = f_n_dg(\n        f_o_rtd(o_fc, n_t)\n    );\n    float n_dg2 = f_n_dg(\n        f_o_rtd(o_fc, -n_t)\n    );\n    float b1 = n_flow;\n    float b2 = 1.-b1;\n    float n1 = b1*n_dg;\n    float n2 = b2*n_dg2;\n    float n = b1 * n1 + b2 * n2;\n    fragColor = vec4(\n        n\n    );\n    fragColor = sqrt(fragColor);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}