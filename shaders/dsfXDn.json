{
    "Shader": {
        "info": {
            "date": "1668704355",
            "description": "This is my modtag on a scrolling background, with anti-aliased rendering. I'm using this on my github pages as a background for the e-portfolio!",
            "flags": 0,
            "hasliked": 0,
            "id": "dsfXDn",
            "likes": 3,
            "name": "ModTag Background",
            "published": 3,
            "tags": [
                "pixelart"
            ],
            "usePreview": 0,
            "username": "shraiwi",
            "viewed": 170
        },
        "renderpass": [
            {
                "code": "// special thanks to FabriceNeyret2 for helping optimize and clean up the shader!\n\nconst float pixelSize = 10.;\nconst float iPxS = 1.0 / pixelSize;\n\nconst vec4 bgColor = vec4(239.0, 245.0, 241.0, 255.0) * (1.0 / 255.0);\nconst vec4 fgColor = vec4(223.0, 236.0, 227.0, 255.0) * (1.0 / 255.0);\n\nconst float t = -0.10; // rotate pattern in rad. due to the aa method, it works best near 90-degree multiples.\n\n//#define DISABLE_AA // uncomment to disable anti-aliasing entirely\n\n//#define DEMO_AA // comment to disable switch between no anti-aliasing and anti-aliasing every 2s\n//#define DEBUG_SCALE (4.0) // comment to disable scaling screen pixels by 4x, making it easier to see the anti-aliasing\n\n#define ROT(theta) mat2(cos(theta), sin(theta), -sin(theta), cos(theta))\n\nfloat modTag(ivec2 px) {\n    px = abs(px);\n    int x = px.x, y = px.y;\n    return sign(float(\n        (x ^ y) % 5 // your expression here!\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 U = fragCoord;\n\n#ifdef DEBUG_SCALE\n    vec2 c = round(U / DEBUG_SCALE);\n#else\n    vec2 c = U;\n#endif\n\n    c = (c + vec2(iTime * pixelSize * 0.25, 0.0)) * ROT(t);\n    \n    ivec2 ibl = ivec2((c - 0.25) * iPxS);\n    \n#ifdef DISABLE_AA\n    float m = modTag(ibl + ivec2(1, 1));\n#else\n\n    \n    // sample 4 modtag values\n    vec4 values = vec4(\n        modTag(ibl + ivec2(0, 0)),\n        modTag(ibl + ivec2(1, 0)),\n        modTag(ibl + ivec2(0, 1)), \n        modTag(ibl + ivec2(1, 1))\n    );\n\n    // nearest modtag grid intersection in normalized coords, clamped to 0-1\n    vec2 x = clamp(c - vec2(ibl) * pixelSize, 0.0, 1.0);\n    \n#ifdef DEMO_AA\n    if (mod(iTime, 2.0) < 1.0) x = vec2(1.0);\n#endif\n    \n    // modtag pixel weights\n    vec4 w = vec4(1.0 - x, x);\n    w = w.xzxz * w.yyww;\n    \n    // find mixing factor\n    float m = dot(values, w);\n\n#endif\n    \n    fragColor = mix(fgColor, bgColor, m);\n        \n    //fragColor = vec4(x, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}