{
    "Shader": {
        "info": {
            "date": "1654452403",
            "description": "not perfect",
            "flags": 32,
            "hasliked": 0,
            "id": "7dKczh",
            "likes": 8,
            "name": "Trail UV Test",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "vec4 cell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 );\n} \n\nvec3 pal(float t) {\n    vec3 d = 0.5 * vec3(0,1,2)/3.;\n    return 0.5 + 0.5 * cos(6.28319 * (0.5 * t + d));\n}\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    float zm = 1.;\n    vec2 res = iResolution.xy;    \n    ivec2 px = ivec2(mod(zm * fragCoord + (1.-zm) * res, res));\n    \n    vec3 c = cell(px).rgb;\n    vec3 col = c;\n\n    vec2 uv2 = col.rg;\n    col.rgb += 0.5;\n    col *= 0.5 + 0.5 * thc(4., 40. * uv2.x + 2. * cos(10. * (uv2.x + uv2.y - iTime)));\n    col *= step(0.001, c.b);\n    float d = length(uv2);\n    float s = step(d, 0.2);\n\n    col = c.b * c.b * mix(col, pal(iTime * c.b * 2.+ uv2.x * 10. + c.b * 4.), 0.5);\n    col += vec3(0.1,0.12,0.2);\n    \n    fragColor.rgb = col.rgb;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define mlength(p) max(abs(p.x), abs(p.y))\n\nvec4 cell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 );\n} \n\nvoid mainImage( out vec4 col, in vec2 f )\n{\n    vec2 res = floor(0.5 * iResolution.xy);\n\n    ivec2 px = ivec2(f);\n    f -= res;\n\n    col = vec4(0);\n    \n    float t = 2. * iTime; //floor(8. * iTime)/4.;\n    vec2 p = 120. * vec2(cos(t), sin(0.825 * t));\n    t += 0.01;\n    vec2 q = 120. * vec2(cos(t), sin(0.825 * t));\n    \n    vec2 dir = p - q;\n    float a = atan(dir.x, dir.y);\n\n    f -= p;\n    f *= rot(a);\n    float sc = 50.;\n    col.rgb = vec3(f * 0.5 / sc, 1.);   \n    col.rgb *= step(mlength(col.rg), 0.5);\n\n    vec4 c = cell(px);\n    if (col.b < c.b) {\n        col.rgb += c.rgb;\n        col.b -= 0.012;\n    }\n    \n    col.rg = clamp(col.rg, -0.5, 0.5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}