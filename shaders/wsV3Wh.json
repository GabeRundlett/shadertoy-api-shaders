{
    "Shader": {
        "info": {
            "date": "1570116623",
            "description": "filtering angles ( best: encoded as complex to avoid the warping problem. cf INTERP).\nmouse.y: filtering level.   (algo: try FILTER)\nmouse.x: asymmetry = 0 to 4 inflated polar directions\n\nFiltering preserves node pos but for mono-asymmetry.   try SPEED=1",
            "flags": 32,
            "hasliked": 0,
            "id": "wsV3Wh",
            "likes": 4,
            "name": "filtering angles as complex",
            "published": 3,
            "tags": [
                "filtering",
                "mipmap",
                "optimization",
                "tuto",
                "angles"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 433
        },
        "renderpass": [
            {
                "code": "// see flags in Common:\n// test angles encoding  and  filtering algorithm\n\n// --- filtering orientation field\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy,\n         M = iMouse.xy;\n    \n#if FILTER == 0 // pure MIPmapfiltering\n    \n    O = textureLod(iChannel0, U/R, floor(log2(M.y+1.))); \n    //O = .5+.5*O.zwxw; return;\n    \n#else          // loop filtering\n    \n    O -= O;\n    int N=32;\n    float lod =  log2(M.y+1.), n = log2(float(N));\n    if (lod<n) n=lod, N=int(exp2(n));\n    for (int k=0; k < N*N; k++) {\n        vec2 dU = (vec2(k%N,k/N)-float(N-1)/2.)*exp2(lod-n);\n#if FILTER==1  // mix MIPmap + loop filtering\n        O += textureLod(iChannel0, ( U + dU ) / R, floor(lod-n));\n#else          // full loop filtering\n        O += texture(iChannel0, ( U + dU ) / R);\n#endif\n    }\n    O /= float(N*N);\n#endif\n\n#if INTERP==0\n    float a = O.x; \n#else\n    U = O.zw; \n    float a = atan(U.y,U.x), l = length(U);\n#endif\n    \n  //O = vec4(.5+.5*a/6.28);\n    O = .5+.5*cos(a*100./vec4(1,2,4,100));\n \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --- generating orientation field\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = ( 2.*u - R ) / R.y,\n         M = iMouse.xy; if (M==vec2(0)) M.x = R.x*fract(iTime/2.);\n    float a = atan(U.y,U.x), l = length(U),\n          t = SPEED*iTime;\n\n    //a += .2* ( 2.*texture(iChannel1,10.*u/R/256.).x -1.);\n\n    float n = floor(5.*M.x/R.x);\n    a += .2*cos(3.*U.x) + ( n>0. ? 1.*cos(n*a-t)/n : 0. ); \n\n#if INTERP==0\n    O.x = a;\n#elif INTERP==1\n    O.zw = l* vec2( cos(a), sin(a) );\n#else\n    O.zw = vec2( cos(a), sin(a) );\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define INTERP 1   // interp:  0: as angle  1: as complex   2: as normalized complex \n#define SPEED 0.   // phase shift\n#define FILTER 2   // filtering using:   0: MIPmap   1: mix-MIPmap   2: full-loop\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}