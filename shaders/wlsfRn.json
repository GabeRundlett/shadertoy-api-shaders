{
    "Shader": {
        "info": {
            "date": "1596125298",
            "description": "Another abstract thingy based on noise. Loosely based on [url]https://www.shadertoy.com/view/MssGW4[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wlsfRn",
            "likes": 79,
            "name": "Iterations - stripes",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "iterations"
            ],
            "usePreview": 1,
            "username": "iq",
            "viewed": 5492
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2020 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n\n// Other \"Iterations\" shaders:\n//\n// \"trigonometric\"   : https://www.shadertoy.com/view/Mdl3RH\n// \"trigonometric 2\" : https://www.shadertoy.com/view/Wss3zB\n// \"circles\"         : https://www.shadertoy.com/view/MdVGWR\n// \"coral\"           : https://www.shadertoy.com/view/4sXGDN\n// \"guts\"            : https://www.shadertoy.com/view/MssGW4\n// \"inversion\"       : https://www.shadertoy.com/view/XdXGDS\n// \"inversion 2\"     : https://www.shadertoy.com/view/4t3SzN\n// \"shiny\"           : https://www.shadertoy.com/view/MslXz8\n// \"worms\"           : https://www.shadertoy.com/view/ldl3W4\n// \"stripes\"         : https://www.shadertoy.com/view/wlsfRn\n\n#define AA 2\n\nfloat hash( in float n )\n{\n    return fract(sin(n)*43758.5453);\n}\nfloat noise( in vec2 p )\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    f = f*f*(3.0-2.0*f);\n    float n = i.x + i.y*57.0;\n    return mix(mix( hash(n+ 0.0), hash(n+ 1.0),f.x),\n               mix( hash(n+57.0), hash(n+58.0),f.x),f.y);\n}\n\nvec2 map( in vec2 p, in float time )\n{\n    for( int i=0; i<4; i++ )\n    {\n    \tfloat a = noise(p*1.5)*6.2831 + time;\n\t\tp += 0.1*vec2( cos(a), sin(a) );\n    }\n    return p;\n}\n\nfloat height( in vec2 p, in vec2 q )\n{\n    float h = dot(p-q,p-q);\n    h += 0.005*texture(iChannel0,0.75*(p+q)).x;\n    return h;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = 0.25*iTime;\n    \n    vec3 tot = vec3(0.0);\n\t#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n\t\t#else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\t\t#endif\n\n        // deformation\n        vec2 q = map(p,time);\n\n        // color\n        float w = 10.0*q.x;\n        float u = floor(w);\n        float f = fract(w);\n        vec3  col = vec3(0.7,0.55,0.5) + 0.3*sin(3.0*u+vec3(0.0,1.5,2.0));\n        \n        // filtered drop-shadow\n        float sha = smoothstep(0.0,0.5,f)-smoothstep(1.0-fwidth(w),1.0,f);\n        \n        // normal\n        vec2  eps = vec2(2.0/iResolution.y,0.0);\n\t\tfloat l2c = height(q,p);\n        float l2x = height(map(p+eps.xy,time),p) - l2c;\n        float l2y = height(map(p+eps.yx,time),p) - l2c;\n        vec3  nor = normalize( vec3( l2x, eps.x, l2y ) );\n            \n        // lighting\n        col *= 0.4+0.6*sha;\n        col *= 0.8+0.2*vec3(1.0,0.9,0.3)*dot(nor,vec3(0.7,0.3,0.7));\n        col += 0.2*pow(nor.y,8.0)*sha;\n        col *= 7.5*l2c;\n\n        tot += col;\n\t#if AA>1\n    }\n    tot /= float(AA*AA);\n\t#endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}