{
    "Shader": {
        "info": {
            "date": "1651370897",
            "description": "Calculates the transform between a camera and a square, such that the rays through the 3 image points intersect 3 corners of that square.\n\nMouse: manually move image points / directions.",
            "flags": 32,
            "hasliked": 0,
            "id": "stXfWS",
            "likes": 3,
            "name": "2D Transform from 3 Points",
            "published": 3,
            "tags": [
                "geometry",
                "transform",
                "projective"
            ],
            "usePreview": 0,
            "username": "pyBlob",
            "viewed": 281
        },
        "renderpass": [
            {
                "code": "// The interesting bits:\n//   void Common::recover_transform(inout State z);\n\nvoid mainImage(out vec4 C, vec2 O)\n{\n    C = image(O, iResolution, iMouse, iFrame, iChannel0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "struct View\n{\n    float f;\n    vec2 uv;\n    vec2 mouse;\n    vec2 click;\n    bool down;\n    bool clicked;\n};\n\nvoid init(inout View v, vec2 O, vec3 R, vec4 mouse)\n{\n    v.f = R.x / 10.;\n    vec2 o = vec2(0, R.y) / 2.;\n    v.uv = (O - o) / v.f;\n    v.mouse = (abs(mouse.xy) - o) / v.f;\n    v.click = (abs(mouse.zw) - o) / v.f;\n    v.down = mouse.z > 0.;\n    v.clicked = mouse.w > 0.;\n}\n\nconst int N = 3;\nstruct State\n{\n    float screen[N];\n\n    int selected_point;\n    \n    mat2x3 T;\n};\n\nvoid recover_transform(inout State z)\n{\n    float i, j, k, x, y, c, s, r;\n\n    i = z.screen[0];\n    j = z.screen[1];\n    k = z.screen[2];\n\n    x =  j * k + 1.;\n    y =  i * x;\n    c =  i * k - i - j * k + k;\n    s = -i * j - i + j * k + j;\n    r = length(vec2(c, s));\n\n    z.T = mat2x3(\n        x, c, -s,\n        y, s,  c\n    ) / r;\n}\n\n/*\nwhen j == 0 (red):\n    x =  1.\n    y =  i\n    c =  i * k - i + k\n      = -i + k * (i + 1)\n    s = -i\n    \n    when k == i / (i + 1):\n        => c, s = 0, -i\n\nwhen k == 0 (blue):\n    x =  1\n    y =  i\n    c = -i\n    s = -i * j - i + j\n      = -i + j * (1 - i)\n    \n    when j == i / (1 - i):\n        => c, s = -i, 0\n\nwhen i == j:\n    x =  i * k + 1\n    y =  i * x\n    c =  i * k - i - i * k + k\n      =        - i         + k\n    s = -i * i     + i * k\n    \n    when k == 0:\n        => x, y, c, s, r = 1, i, -i, -i², i² + i⁴\n\n    when i == j == 0:\n        => x, y, c, s = 1, 0, k, 0\n*/\n\nvoid load(inout State z, sampler2D A)\n{\n    vec4 t;\n    t = texelFetch(A, ivec2(0, 0), 0);\n    z.selected_point = int(t.y);\n\n    for (int i=0 ; i<N ; ++i)\n    {\n        t = texelFetch(A, ivec2(1, i), 0);\n        z.screen[i] = t.x;\n    }\n    \n    recover_transform(z);\n}\n\nvec4 save(State z, ivec2 O)\n{\n    vec4 t = vec4(0);\n    if (O == ivec2(0, 0))\n    {\n        t.y = float(z.selected_point);\n    }\n    \n    for (int i=0 ; i<N ; ++i)\n        if (O == ivec2(1, i))\n            t.x = z.screen[i];\n    \n    return t;\n}\n\nvoid demo(inout State z, vec4 M, int iFrame, float iTime)\n{\n    if (iFrame == 0)\n    {\n        z.screen[0] = -0.05;\n        z.screen[1] = 0.3;\n        z.screen[2] = -0.2;\n    }\n    if (M == vec4(0))\n    {\n        float t = (iTime - 2.5) / 5.;\n        float a = 0.3 * cos(t * 2.4166);\n        float v = 3. * cos(t * 1.) + 0.2 * t;\n        float b = 0.35 * cos(v);\n        float c = 0.35 * sin(v);\n        float d = sqrt(0.6 + 0.5 * abs(a) + 0.5 * cos(t * 5.1341));\n        z.screen[0] = a;\n        z.screen[1] = a + b * d;\n        z.screen[2] = a + c * d;\n    }\n}\n\nfloat ray(vec2 x, vec2 t)\n{\n    return abs(dot(x, normalize(t).yx * vec2(-1, 1)));\n}\n\nfloat ray(vec2 x, State z, int i)\n{\n    return ray(x, vec2(1, z.screen[i]));\n}\n\nvec4 bufferA(vec2 O, vec3 R, vec4 M, int iFrame, float iTime, sampler2D A)\n{\n    View v; init(v, O, R, M);\n    State z; load(z, A); demo(z, M, iFrame, iTime);\n    if (!v.down)\n        z.selected_point = -1;\n    if (v.clicked)\n    {\n        int closest = 0;\n        for (int i=1 ; i<N ; ++i)\n            if (ray(v.mouse, z, i) < ray(v.mouse, z, closest))\n                closest = i;\n        float r = ray(v.mouse, z, closest);\n        z.selected_point = r < 20. / v.f ? closest : -1;\n    }\n    for (int i=0 ; i<N ; ++i)\n        if (v.down && z.selected_point >= 0 && i==z.selected_point)\n            z.screen[i] = v.mouse.y / v.mouse.x;\n    return save(z, ivec2(O));\n}\n\nvoid blend(inout vec4 C, vec3 c, float r)\n{\n    C = mix(C, vec4(c, 1), clamp(r, 0., 1.));\n}\n\nvoid blend(inout vec4 C, vec4 c)\n{\n    blend(C, c.xyz, c.w);\n}\n\nvoid circle(inout vec4 C, View v, vec3 c, vec2 center, float r)\n{\n    float l = r - length(v.uv - center) * v.f;\n    blend(C, vec3(1), l + 1.);\n    blend(C, c, l);\n}\n\nView transform(View v, mat2x3 T)\n{\n    mat3x3 M = inverse(mat3x3(1, 0, 0, T[0], T[1]));\n    T = mat2x3(M[1], M[2]);\n    v.uv = vec3(1, v.uv) * T;\n    v.mouse = vec3(1, v.mouse) * T;\n    return v;\n}\n\nconst vec3 colors[] = vec3[](\n    vec3(0),\n    vec3(1,   0, 0),\n    vec3(0,   0, 1),\n    vec3(1, 0.3, 0)\n);\n\nvoid object(inout vec4 C, View v)\n{\n    vec2 x = abs(v.uv - 0.5) - 0.5;\n    float l = 1. - max(0., max(x.x, x.y)) * v.f;\n    vec3 c1, c2, c;\n    c1 = mix(colors[0], colors[1], v.uv.x);\n    c2 = mix(colors[2], colors[3], v.uv.x);\n    c = mix(c1, c2, v.uv.y);\n    blend(C, c, l);\n\n    for (int i=0 ; i<4 ; ++i)\n        circle(C, v, colors[i], vec2(i%2, i/2), 3.);\n}\n\nvec4 image(vec2 O, vec3 R, vec4 M, int iFrame, sampler2D A)\n{\n    View v; init(v, O, R, M);\n    State z; load(z, A);\n    vec4 C = vec4(1, 1, 1, 0);\n    \n    // object\n    object(C, transform(v, z.T));\n\n    // image plane\n    blend(C, vec3(0), 1. - abs(v.uv.x - 1.) * v.f);\n\n    for (int i=0 ; i<N ; ++i)\n    {\n        float r = 3., l = 1.;\n        if (z.selected_point == i)\n        {\n            r = 5.;\n            l = 1.5;\n        }\n        vec2 image_point = vec2(1, z.screen[i]);\n        \n        // ray\n        blend(C, colors[i], l - ray(v.uv, image_point) * v.f);\n        \n        // image point\n        circle(C, v, colors[i], image_point, r);\n    }\n    C = sqrt(C);\n    return C;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 C, vec2 O)\n{\n    C = bufferA(O, iResolution, iMouse, iFrame, iTime, iChannel0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}