{
    "Shader": {
        "info": {
            "date": "1524147108",
            "description": "Recreation of the original Boing Ball demo for Commodore Amiga",
            "flags": 64,
            "hasliked": 0,
            "id": "llsyzX",
            "likes": 3,
            "name": "Amiga Boing Ball Demo",
            "published": 3,
            "tags": [
                "3d",
                "retro",
                "amiga",
                "demo"
            ],
            "usePreview": 0,
            "username": "nightfox",
            "viewed": 1750
        },
        "renderpass": [
            {
                "code": "const float BALL_RADIUS = 0.7;\nconst float RED = 0.0;\nconst float WHITE = 1.0;\nconst float SHADOW = 0.2;\nconst float SHADOW_RADIUS = BALL_RADIUS/2.0;\nconst float PI = 3.1415926535;\n\nfloat boingBall(vec3 ro, float r) {\n \treturn length(ro)-r;   \n}\n\nvec2 map(vec3 ro, vec3 p) {\n    float r = sqrt(pow(BALL_RADIUS,2.0)-pow(p.y-ro.y,2.0));\n    float vCoord = smoothstep(0.0,BALL_RADIUS/2.0,abs(ro.y-p.y));\n    float horizontal = step(0.5,0.5+0.5*sin(15.0*(ro.y-p.y)));\n    float vertical = step(0.5,0.5+0.5*sin(15.0*(ro.x-p.x+iTime)));\n    float color = horizontal*vertical;\n    horizontal = 1.0-step(0.5,0.5+0.5*sin(15.0*(ro.y-p.y)));\n    vertical = 1.0-step(0.5,0.5+0.5*sin(15.0*(ro.x-p.x+iTime)));\n    color += horizontal*vertical;\n    vec2 dist = vec2(boingBall(ro-p,BALL_RADIUS), color);\n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv *= 2.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    const float DIVISION = 0.105;\n    const float GRID_THICKNESS = 0.01;\n    vec3 color = vec3(0.5);\n    \n    for (float i = -1.0+DIVISION; i < 1.0-DIVISION; i += DIVISION) {\n        if (abs(uv.x) > 0.8 || abs(uv.y) > 0.8) break;\n    \tif (uv.x >= i && uv.x < i+GRID_THICKNESS)\n            color = vec3(0.7,0.0,0.5);\n        for (float j = -1.0+DIVISION; j < 1.0-DIVISION; j += DIVISION) {\n        if (uv.y < -0.8 || uv.y > 0.8) break;\n    \tif (uv.y >= j && uv.y < j+GRID_THICKNESS)\n            color = vec3(0.7,0.0,0.5);\n        }\n    }\n    \n    const int MAX_STEPS = 50;\n    const float MIN_DIST = 0.01;\n    \n    vec3 ro = vec3(0.0,0.0,-3.0);\n    vec3 screen = vec3(uv.x,uv.y,0.0);\n    vec3 rd = normalize(screen-ro);\n    vec3 ballPos = vec3(abs(mod(iTime,6.0)-3.0)-1.5,abs(sin(iTime)*2.)-0.8,3.0);\n    vec2 shadowPos = vec2(ballPos.xy)/2.;\n    shadowPos.x += 0.2;\n    \n    if (distance(uv,shadowPos) < SHADOW_RADIUS) color = mix(color,vec3(SHADOW),0.9);\n    \n    for (int i = 0; i < MAX_STEPS; i++) {\n    \tvec2 d = map(ro, ballPos);\n        if (d.x < MIN_DIST) {\n        \tcolor = vec3(1.0,d.y,d.y);\n            color /= .01*pow(length(ro*2.),3.0);\n            break;\n        }\n        ro += rd*d.x;\n    }\n    \n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 14516,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/www-digitalista-de/4-mat-share-and-enjoy"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}