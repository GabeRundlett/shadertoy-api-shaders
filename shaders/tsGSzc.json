{
    "Shader": {
        "info": {
            "date": "1574603080",
            "description": "Impressed by j2rgb's artwork https://twitter.com/j2rgb/status/1164240582870331392\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "tsGSzc",
            "likes": 49,
            "name": "Pasta wires",
            "published": 3,
            "tags": [
                "lines"
            ],
            "usePreview": 0,
            "username": "avin",
            "viewed": 1150
        },
        "renderpass": [
            {
                "code": "#define hue(h) clamp( abs( fract(h + vec4(3,2,1,0)/3.) * 6. - 3.) -1. , 0., 1.)\n#define rand1(p) fract(sin(p* 78.233)* 43758.5453) \n\n#define COUNT 22.\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n#define MOD3 vec3(.1031,.11369,.13787)\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\nfloat simplex_noise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n    \n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n        \n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n\tvec3 i1 = e * (1.0 - e.zxy);\n\tvec3 i2 = 1.0 - e.zxy * (1.0 - e);\n    \n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n    \n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n    \n    return dot(vec4(31.316), n);\n}\n\nvoid rotate(in float angle, inout vec2 uv)\n{    \n    float ca = cos(angle);\n    float sa = sin(angle);\n    uv *= mat2(ca, -sa, sa, ca);\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;           \n    rotate(.5, uv);\n    float t = iTime*.75;\n    \n    float sm = (1./iResolution.y * 2.);\n    \n    vec3 res = vec3(0.);\n    \n    for(float i=0.; i<COUNT;i+=1.){\n        vec2 oiuv = uv;\n        vec2 iuv = uv;\n        \n        iuv.x += rand1(i+COUNT)*.5 - .25;\n        \n        iuv.x += simplex_noise(vec3(i, oiuv.y + t, rand1(i+COUNT)))*.25;\n\n        float angle = rand1(i)*.5;\n        rotate(angle, iuv);        \n        \n        float perc = i/COUNT;\n        \n        float width = (perc + .5)*.015 - rand1(i+COUNT*3.)*.01;\n        float ism = sm; // + (1. - perc)*.025;\n            \n    \tfloat g = smoothstep(width + ism, width, abs(iuv.x));\n        \n        float gSh = smoothstep(width, width + ism*10., abs(iuv.x));\n        \n        res = res*clamp(gSh + .5, .0, 1.);\n        \n        vec3 lineCol = hsv2rgb(vec3(.5 + rand1(i+COUNT*2.)*.41, rand1(i)*.5+.25, 1.0)).rgb;\n        \n        res = mix(res, lineCol,  g);\n    }               \n\n    // Output to screen\n    fragColor = vec4(res,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}