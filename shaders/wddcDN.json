{
    "Shader": {
        "info": {
            "date": "1601827368",
            "description": "Still learning 3D . \nExperiment based on @evvvvil_ ray caster. ",
            "flags": 0,
            "hasliked": 0,
            "id": "wddcDN",
            "likes": 6,
            "name": "大龙猫  - Wetshader",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 300
        },
        "renderpass": [
            {
                "code": "vec2 z,v,e=vec2(.001,-.001); \n\n\nmat2 r(float a){\n    float c=cos(a),s=sin(a);\n    return mat2(c,s,-s,c);\n}\nvoid md(inout vec2 uv,vec2 p){\n    uv = abs(uv) - p;\n    if(uv.x < uv.y) uv.xy = uv.yx;\n}\nvec2 pModMirror2(inout vec2 p, vec2 size) {\n    vec2 halfsize = size*0.5;\n    vec2 c = floor((p + halfsize)/size);\n    p = mod(p + halfsize, size) - halfsize;\n    p *= mod(c,vec2(2.))*2. - vec2(1.);\n    return c;\n}\nfloat pMod1(inout float p, float size) {\n    float halfsize = size*0.5;\n    float c = floor((p + halfsize)/size);\n    p = mod(p + halfsize, size) - halfsize;\n    return c;\n}\nvec2 sdf(vec3 p){\n\n       p.z   -=(iTime);\n       p.xy  *=r(iTime*.2);\n       float c= pMod1(p.z,12.);\n       p.xy  *=r(c*.5);\n    p.x = abs(p.x)-12.5;\n    p.y = abs(p.y)-4.5;\n      p.xy  *=r(iTime*.5);\n     vec2 h,t=vec2(length(p)-2.,4.);\n\n   \n        p.x = abs(p.x)-1.3;\n        p.y -=1.8;\n     h = vec2(length(p)-1.,5.);\n     t = t.x< h.x ? t : h; \n     t.x*=.7;\n\n \n    return t;\n\n}\n#define TRLIMIT 256.\nvec2 tr(vec3 ro, vec3 rd){\n    vec2 h,t=vec2(.1);\n    for(float i=0.;i<TRLIMIT;i++){\n        h= sdf(ro+rd*t.x);\n        if(h.x < .0001 || t.x > TRLIMIT) break;\n        t.x+=h.x;\n        t.y=h.y;\n    }\n    if(t.x>TRLIMIT) t.y=0.;\n    return t;\n    \n}\n\n#define a(d) clamp(sdf(po+no*d).x/d,0.,1.)\n#define s(d) smoothstep(0.,1.,sdf(po+ld*d).x/d)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec4 cam = vec4(sin(iTime*.5)*.5,cos(iTime*1.),10.0,1.50);\n    vec2 uv = (fragCoord.xy -.5* iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(cos(cam.w+cam.x)*cam.z, cam.y,sin(cam.w+cam.x)*cam.z);\n   \n    vec3 cw = normalize(vec3(0.)-ro);\n    vec3 cu = normalize(cross(cw,vec3(0.,1.,0.)));\n    vec3 cv = normalize(cross(cu,cw));\n    vec3 rd = mat3(cu,cv,cw)*normalize(vec3(uv,.5));\n    \n    vec3 co, fo = vec3(.0)-length(uv)*.1-rd.y*.1;\n    co = fo;\n    vec3 ld = normalize(vec3(1.2,1.3,10.5));\n    \n    vec2 z = tr(ro,rd);\n    float t = z.x;\n    vec3 al ;\n    if(z.y > 0.) { \n        vec3 po  = ro+rd*t;\n        vec3 no = normalize(e.xyy*sdf(po+e.xyy).x +\n        e.yyx*sdf(po+e.yyx).x +\n        e.yxy*sdf(po+e.yxy).x +\n        e.xxx*sdf(po+e.xxx).x );\n        if(z.y ==3.){\n        al = vec3(1.0,1.0,1.0);\n        }\n        if (z.y == 4.) {\n            al=vec3(1.0,.0,.0);\n        }\n        if(z.y == 5.) {\n         al = vec3(1.0,1.0,1.0);\n        }\n        float dif = max(0.,dot(no,ld)),\n        fr = pow(1.+dot(no,rd),4.), //Fersnel\n        sp = pow(max(dot( reflect(-ld,no),-rd),0.),40.); //specular\n        co = mix(sp+al*(a(.05)*a(.1)+.2)*(dif+s(2.)),fo,min(fr,.5));\n    }\n    \n    fragColor = vec4(pow(co,vec3(.945)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}