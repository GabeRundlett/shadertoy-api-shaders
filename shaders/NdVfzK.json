{
    "Shader": {
        "info": {
            "date": "1658498183",
            "description": "CC0 - Monterey wannabe\nWatching a few streams I enjoy the MacOS Monterey wallpaper. I am a sucker for intense colors.\nHere's my interpretation of the wallpaper in shader form\n",
            "flags": 0,
            "hasliked": 0,
            "id": "NdVfzK",
            "likes": 42,
            "name": "Monterey wannabe",
            "published": 3,
            "tags": [
                "wallpaper",
                "monterey"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 798
        },
        "renderpass": [
            {
                "code": "// CC0 - Monterey wannabe\n// Watching a few streams I enjoy the MacOS Monterey wallpaper\n// I am a sucker for intense colors\n// Here's my interpretation of the wallpaper in shader form\n\n#define RESOLUTION    iResolution\n#define TIME          iTime\n#define PI            3.141592654\n#define TAU           (2.0*PI)\n#define ROT(a)        mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: Unknown, found: don't remember\nvec4 alphaBlend(vec4 back, vec4 front) {\n  float w = front.w + back.w*(1.0-front.w);\n  vec3 xyz = (front.xyz*front.w + back.xyz*back.w*(1.0-front.w))/w;\n  return w > 0.0 ? vec4(xyz, w) : vec4(0.0);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nvec3 alphaBlend(vec3 back, vec4 front) {\n  return mix(back, front.xyz, front.w);\n}\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nfloat sRGB(float t) { return mix(1.055*pow(t, 1./2.4) - 0.055, 12.92*t, step(t, 0.0031308)); }\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(in vec3 c) { return vec3 (sRGB(c.x), sRGB(c.y), sRGB(c.z)); }\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 p) {\n  float a = dot (p, vec2 (127.1, 311.7));\n  return fract(sin(a)*43758.5453123);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.shadertoy.com/view/XslGRr\nfloat vnoise(vec2 p) {\n  vec2 i = floor(p);\n  vec2 f = fract(p);\n    \n  vec2 u = f*f*(3.0-2.0*f);\n\n  float a = hash(i + vec2(0.0,0.0));\n  float b = hash(i + vec2(1.0,0.0));\n  float c = hash(i + vec2(0.0,1.0));\n  float d = hash(i + vec2(1.0,1.0));\n  \n  float m0 = mix(a, b, u.x);\n  float m1 = mix(c, d, u.x);\n  float m2 = mix(m0, m1, u.y);\n  \n  return m2;\n}\n\nfloat heightFactor(vec2 p) {\n  return 2.0*smoothstep(0.0, 1.25, abs(p.x)-0.05)+1.0;\n}\n\nfloat hifbm(vec2 p) {\n  float hf = heightFactor(p);\n  const float aa = 0.5;\n  const float pp = 2.0-0.;\n\n  float sum = 0.0;\n  float a   = 1.0;\n  \n  for (int i = 0; i < 5; ++i) {\n    sum += a*vnoise(p);\n    a *= aa;\n    p *= pp;\n  }\n  \n  return hf*sum;\n}\n\nfloat lofbm(vec2 p) {\n  float hf = heightFactor(p);\n  const float aa = 0.5;\n  const float pp = 2.0-0.;\n\n  float sum = 0.0;\n  float a   = 1.0;\n  \n  for (int i = 0; i < 2; ++i) {\n    sum += a*vnoise(p);\n    a *= aa;\n    p *= pp;\n  }\n  \n  return hf*sum;\n}\n\nvec3 offset(float z) {\n  float a = z*0.5;\n  vec2 p = vec2(0.33, 0.1)*(vec2(cos(a), sin(a*sqrt(2.0))) + vec2(cos(a*sqrt(0.75)), sin(a*sqrt(0.5))));\n//  vec2 p = vec2(0.0, 0.0);\n  return vec3(p, z);\n}\n\nvec3 doffset(float z) {\n  float eps = 0.1;\n  return 0.5*(offset(z + eps) - offset(z - eps))/(2.0*eps);\n}\n\nvec3 ddoffset(float z) {\n  float eps = 0.1;\n  return 0.5*(doffset(z + eps) - doffset(z - eps))/(2.0*eps);\n}\n\nfloat hiheight(vec2 p) {\n  return hifbm(p)-1.8;\n}\n\nfloat loheight(vec2 p) {\n  return lofbm(p)-2.15;\n}\n\nvec4 plane(vec3 ro, vec3 rd, vec3 pp, vec3 npp, vec3 off, float n) {\n  vec2 p = (pp-off*2.0*vec3(1.0, 1.0, 0.0)).xy;\n\n  const vec2 stp = vec2(0.5, 0.33); \n  float he    = hiheight(vec2(p.x, pp.z)*stp);\n  float lohe  = loheight(vec2(p.x, pp.z)*stp);\n\n  float d = p.y-he;\n  float lod = p.y - lohe;\n\n  float aa = distance(pp, npp)*sqrt(1.0/3.0);\n\n  float df = tanh_approx(max(0.225*distance(ro, pp)-0.4, 0.));\n  float hf = mix(0.66, 1.1, df);\n  float gf = tanh_approx(exp(-2.0*lod));\n  float yf = smoothstep(2.5, -1.0, pp.y);\n  vec3 acol = hsv2rgb(vec3(hf, 1.0, mix(0.2, 1.0, df)));\n  vec3 gcol = hsv2rgb(vec3(hf, 1.0, 1.0-gf));\n  \n  float t = smoothstep(aa, -aa, d);\n  t *= mix(1.0, yf, sqrt(df));\n  t = max(t, gf*yf*yf);\n  vec3 col = vec3(0.0);\n  col += acol;\n  col += 0.5*gcol;\n  \n  return vec4(col, t);\n}\n\nvec3 skyColor(vec3 ro, vec3 rd, vec3 nrd) {\n  const vec3 sky = HSV2RGB(vec3(0.66, 0.2, 1.0));\n  return sky;\n}\n\nvec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {\n  vec2 np = p + 2.0/RESOLUTION.y;\n  const float rdd = 2.0;\n  vec3 rd = normalize(-p.x*uu + p.y*vv + rdd*ww);\n  vec3 nrd = normalize(-np.x*uu + np.y*vv + rdd*ww);\n\n  const float planeDist = 1.0-0.4;\n  const int furthest = 12;\n  const int fadeFrom = max(furthest-3, 0);\n\n  const float fadeDist = planeDist*float(fadeFrom);\n  const float maxDist  = planeDist*float(furthest);\n  float nz = floor(ro.z / planeDist);\n\n  vec3 skyCol = skyColor(ro, rd, nrd);\n\n  vec4 acol = vec4(0.0);\n  const float cutOff = 0.995;\n  bool cutOut = false;\n\n  for (int i = 1; i <= furthest; ++i) {\n    float pz = planeDist*nz + planeDist*float(i);\n\n    float pd = (pz - ro.z)/rd.z;\n\n    vec3 pp = ro + rd*pd;\n    \n    if (pd > 0.0 && acol.w < cutOff) {\n      vec3 npp = ro + nrd*pd;\n\n      vec3 off = offset(pp.z);\n\n      vec4 pcol = plane(ro, rd, pp, npp, off, nz+float(i));\n\n      float nz = pp.z-ro.z;\n      float fadeIn = smoothstep(maxDist, fadeDist, pd);\n      float fadeOut = smoothstep(0.0, planeDist, pd);\n      pcol.w *= fadeIn;\n      pcol.w *= fadeOut;\n\n      acol = alphaBlend(pcol, acol);\n    } else {\n      cutOut = true;\n      acol.w = acol.w > cutOff ? 1.0 : acol.w;\n      break;\n    }\n\n  }\n\n  vec3 col = alphaBlend(skyCol, acol);\n// To debug cutouts due to transparency  \n//  col += cutOut ? vec3(1.0, -1.0, 0.0) : vec3(0.0);\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 q) {\n  const mat2 rot = ROT(0.1); \n  float z  = TIME*0.3333;\n  vec3 ro   = offset(z);\n  vec3 dro  = doffset(z); \n  vec3 ddro = ddoffset(z);\n  dro.zy *= rot;\n  vec3 ww = normalize(dro);\n  vec3 uu = normalize(cross(normalize(vec3(0.0,1.0,0.0)+2.*ddro), ww));\n  vec3 vv = cross(ww, uu);\n\n  vec3 col = color(ww, uu, vv, ro, p);\n  \n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = vec3(0.0);\n  col = effect(p, q);\n  col += 2.0*smoothstep(4.0, 0.0, TIME+length(p-vec2(0.0, 1.0)));\n  col = aces_approx(col);\n  col = sRGB(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}