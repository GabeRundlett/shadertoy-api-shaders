{
    "Shader": {
        "info": {
            "date": "1653939426",
            "description": "Purpose is to display an image \"as if\" vectorized at low resolution.\nvariant of https://shadertoy.com/view/NddyRl",
            "flags": 0,
            "hasliked": 0,
            "id": "fddyRs",
            "likes": 20,
            "name": "pseudo-vectorization of video",
            "published": 3,
            "tags": [
                "short",
                "marchingsquare",
                "marchingcube",
                "vectorization"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 432
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/NddyRl\n\n#define s    textureSize(iChannel0,0)\n#define T(U) texelFetch(iChannel0, ivec2(U), lod).r  // texture access\n#define S(v) smoothstep( -.8,.8,(v)/fwidth(v) )      // antialiasing draw\n\nfloat vector(vec2 u, int lod, float thresh)\n{\n    float Z = exp2(float(lod));                      // scaling\n    vec2  R = iResolution.xy, v,\n          U = u/Z;\n    float O = 0.;                                    // --- marching cube -------\n    vec4 c = vec4( T(U)          , T(U+vec2(1,0)),   // value at corners\n                   T(U+vec2(0,1)), T(U+vec2(1,1)) ), \n         b = step(thresh,c);                         // is > threshold ?\n    int  n = int(b.x+b.y+b.z+b.w);                   // number of yes\n    U = fract(U);                                    // tile local coordinates\n    if      (n==0) O += 0.;                          // empty\n    else if (n==4) O += 1.;                          // full\n    else if (n==1 || n==3 || n==2 && b.x==b.w ) {    // corner + checker case \n        if (n==3) b = 1.-b;  \n        if(b.x>0.) O += S( (1.-U.x-U.y)*c.x +   U.x   *c.y +   U.y   *c.z - thresh );\n        if(b.y>0.) O += S( (  U.x -U.y)*c.y + (1.-U.x)*c.x +   U.y   *c.w - thresh );\n        if(b.z>0.) O += S( (-U.x+ U.y )*c.z +   U.x   *c.w + (1.-U.y)*c.x - thresh );\n        if(b.w>0.) O += S( (U.x+U.y-1.)*c.w + (1.-U.x)*c.z + (1.-U.y)*c.y - thresh );\n    } else { // n==2                                      // (checker treated above)\n        if      (b.x==b.y) v = (thresh-c.xy)/(c.zw-c.xy), // horizontal\n                           O += S( U.y - mix(v.x,v.y,U.x) );\n        else if (b.x==b.z) v = (thresh-c.xz)/(c.yw-c.xz), // vertical\n                           O += S( U.x - mix(v.x,v.y,U.y) );\n        if (b.x>0.) O = 1.-O;\n    }\n    return O;\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{   U *= 360./iResolution.y;\n    O = vec4( vector(U,4,.3) + vector(U,4,.5) + vector(U,4,.7) ) / 3.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}