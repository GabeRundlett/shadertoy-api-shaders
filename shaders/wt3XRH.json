{
    "Shader": {
        "info": {
            "date": "1580373425",
            "description": "art",
            "flags": 0,
            "hasliked": 0,
            "id": "wt3XRH",
            "likes": 2,
            "name": "Banana",
            "published": 3,
            "tags": [
                "art"
            ],
            "usePreview": 0,
            "username": "scottdarby",
            "viewed": 415
        },
        "renderpass": [
            {
                "code": "#define I_MAX\t100\n#define E\t\t0.002\n\n/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Forked from https://www.shadertoy.com/view/XttXRX\n*/\n\nvoid\tinit_vars();\nfloat\tde(vec3 pos);\nfloat\tde(vec3 pos, vec4 rad);\nfloat\tsdTorus( vec3 p, vec2 t );\nvec4\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvec3\tcalcNormal(in vec3 pos, float e, vec3 dir);\nfloat\tsmin(float a, float b, float k);\nvec2\tuv;\n\n/*\n* Distances\n*/\n\tfloat\tup_cap;\n\tfloat\tbt_cap;\n\n/*\n* Distance functions taken from iq\n*/\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n\tvec2 q = vec2(length(p.xy)-t.x,p.z);\n    return length(q)-t.y;\n}\n\n\n\nfloat\tscene(vec3 p)\n{\n    up_cap = sdCapsule(vec3(p.y-2.4, p.z, p.x-.6), vec3(-.3, -.0, .33), vec3(.1, .0, -.31), .15);\n    bt_cap = sdCapsule(vec3(p.y+2.4, p.z, p.x-.6), vec3(.3, -.0, .33), vec3(.1, .0, .0), .15);\n\n   \n    float banana = sdTorus(p, vec2(2.4, cos(-(p.y)/1.50)));\n    if (p.x < -.45)\n        banana = 2.;\n   \n    banana = min(banana, up_cap);\n    banana = min(banana, bt_cap);\n\n    return(banana);\n}\n\nvec4\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0);\n    vec3\tp = vec3(0.0);\n    vec4\tstep = vec4(0.0);\n\n    for (int i = -1; i < I_MAX; ++i)\n    {\n    \tp = pos + dir * dist.y;\n        dist.x = scene(p);\n        dist.y += dist.x;\n        if (dist.x < E || dist.y > 20.)\n           break;\n        step.x++;\n    }\n    step.y = dist.x;\n    step.w = dist.y;\n    return (step);\n}\n\n\n//taken from an iq shader\nvec3 calcNormal( in vec3 pos, float e, vec3 dir)\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n\treturn normalize(vec3(\n           march(pos+eps.xyy, dir).w - march(pos-eps.xyy, dir).w,\n           march(pos+eps.yxy, dir).w - march(pos-eps.yxy, dir).w,\n           march(pos+eps.yyx, dir).w - march(pos-eps.yyx, dir).w ));\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float   fov = 1.;\n\tvec3    forw  = vec3(0.0, 0.0, 1.0);\n\tvec3    right = vec3(1.0, 0.0, 0.0);\n\tvec3    up    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x-1.) * right + (uv.y-0.5) * up + fov * forw));\n}\n\nvoid\tinit_vars()\n{\n\tup_cap = 1e5;\n\tbt_cap = 1e5;\n}\n\n//https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n\tfloat res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n\tinit_vars(); // init skeleton and distances\n    uv  = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n\tvec3\tdir = camera(uv);\n    vec4\tcol = vec4(0.0);\n    vec3\tpos = vec3(7.0, 0.0, -15.0);\n\n    vec4\tinter = (march(pos, dir));\n\n    vec3\tv = pos+inter.w*dir;\n\tvec3\tobj_color;\n    if (inter.w <= 17.)\n\t{\n        obj_color = vec3(251.0/255.0, 236.0/255.0, 93.0/255.);\n        /*\n\t\t* taken from here : https://www.shadertoy.com/view/XsB3Rm\n\t\t*/\n        vec3\tn = calcNormal(pos, E, dir);\n        vec3\tev = normalize(v - pos);\n\t\tvec3\tref_ev = reflect(ev, n);\n        vec3\tlight_pos   = vec3(-20.0, 10.0, -25.0);\n\n        vec3\tvl = normalize(light_pos - v);\n\t\tfloat\tdiffuse  = max(0.0, dot(vl, n));\n\t\tfloat\tspecular = pow(max(0.0, dot(vl, ref_ev)), 42.);\n        col.xyz = obj_color * (diffuse + specular);\n        \n        col.a = diffuse*0.2;\n    }\n    \n   \tfragColor = vec4(0.1)+col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}