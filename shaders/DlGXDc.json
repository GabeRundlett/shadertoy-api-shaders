{
    "Shader": {
        "info": {
            "date": "1686404242",
            "description": "Experiment with shaders using hexagons and 2 color palettes",
            "flags": 0,
            "hasliked": 0,
            "id": "DlGXDc",
            "likes": 5,
            "name": "Playing #2",
            "published": 3,
            "tags": [
                "shader"
            ],
            "usePreview": 0,
            "username": "matheusgirola",
            "viewed": 193
        },
        "renderpass": [
            {
                "code": "vec3 palette_1( float t )\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.00, 0.10, 0.20);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 palette_2( float t )\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(2.0, 1.0, 0.0);\n    vec3 d = vec3(0.50, 0.20, 0.25);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 sdgHexagon( in vec2 p, in float r ) \n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    vec2 s = sign(p);\n    p = abs(p);\n\tfloat w = dot(k.xy,p);    \n    p -= 2.0*min(w,0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    float d = length(p)*sign(p.y);\n    vec2  g = (w<0.0) ? mat2(-k.y,-k.x,-k.x,k.y)*p : p;\n    return vec3( d, s*g/d );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 q = p;\n    // size\n\tfloat si = 0.3 + 0.25*sin( iTime );\n    // corner radious\n    float ra = 0.2*(0.5+0.5*cos(iTime*2.0));\n    \n    // fract the screen\n    p = fract(p*2.) - 0.5;\n    \n    // sdf(p) and gradient(sdf(p))\n\tvec3 dg = sdgHexagon(p,si);\n    float d = dg.x-ra;\n    vec2 g = dg.yz;\n\n\t// coloring\n    vec3 col = (d>0.0) ? palette_2(0.4*length(q) + 0.1*iTime):\n                         palette_1(0.8*length(q) + 0.1*iTime);\n    col *= 1.0 + vec3(0.5*g,0.0);\n    col *= 1.0 - 0.5*exp(-10.0*abs(d));\n\tcol *= 0.9 + 0.1*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}