{
    "Shader": {
        "info": {
            "date": "1639794723",
            "description": "Basic Krillin 2d",
            "flags": 0,
            "hasliked": 0,
            "id": "NtdSWj",
            "likes": 3,
            "name": "Basic Krillin 2d",
            "published": 3,
            "tags": [
                "basickrillin2d"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 210
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n//Basic Krillin 2d\n// 17-dic-2021\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(6.0*antialiasing(0.5),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\nvec3 DrawFigBordeR(vec3 pColObj, vec3 colOut, float distObj, float r )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-r,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj-0.05,0.0)); return colOut;}\n\nvec3 DrawFigSolo(vec3 pColObj, vec3 colOut, float distObj ) \n{  colOut = mix(colOut,pColObj ,S( distObj,0.0)); return colOut; }\n\nvec3 DrawFigRB(vec3 pColObj, vec3 colOut, float distObj, float r )\n{  colOut = mix(colOut,pColObj ,S2( distObj-r,0.0)); return colOut; }\n\nvec3 DrawFigDelgado(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj-0.001,0.0)); return colOut; }\n\n\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nvec3 HacerCejaIzq(vec2 p, vec3 col)\n{   vec2 p0=p; \n    p=rotatev2(p,radians(70.));\n    float d1b= sdCircle(p*vec2(0.5,1.0)-vec2(0.2,-0.4),0.065 );\n    float d1c= sdCircle(p*vec2(0.5,1.0)-vec2(0.25,-0.425),0.07 );\n    float ddif2=differenceSDF(d1b, d1c);\n    col= DrawFigDelgado(vec3(0.0), col,ddif2);\n    return col;\n}\n\nvec3 HacerBoca(vec2 p, vec3 col)\n{   vec2 p0=p; \n    float d1a= sdCircle(p-vec2(0.2,-0.4),0.5 );\n    float d1b= sdCircle(p-vec2(0.2,-0.35),0.5 );\n    float d1c= sdBox(p-vec2(0.2,-0.8),vec2(0.15,0.15) );\n    float ddif=differenceSDF(d1a, d1b);\n    ddif= intersectSDF(ddif, d1c);\n    col= DrawFigDelgado(vec3(1.0,0.0,0.0), col,ddif);\n    return col;\n}\n\nvec3 HacerBrazo(vec2 p, vec3 col)\n{   vec2 p0=p-vec2(-0.05,-0.82); \n    p0.x=abs(p0.x)-0.1;\n    p=p0;\n    \n    vec2 pc1p1=vec2(.224,.326);\n    vec2 pc1p2=vec2(.307,.409);\n    vec2 pc1p3=vec2(.354,.021);\n\n    vec2 pc2p1=vec2(.220,.322);\n    vec2 pc2p2=vec2(.137,.236);\n    vec2 pc2p3=vec2(.193,.008);\n\n    float db1= sdBezier(p,pc1p1,pc1p2,pc1p3 );\n    float db2= sdBezier(p,pc2p1,pc2p2,pc2p3 );\n    db1= unionSDF(db1,db2);\n    col = DrawFigDelgado(vec3(0.0),col,db1);    \n    return col;\n}\n\nvec3 HacerOjos(vec2 p, vec3 col)\n{   vec2 p0=p;    \n    //pupila iqz\n    vec2 pa = p0;\n    float d5a = sdCircle(pa-vec2(-0.2, -0.3), 0.015);\n    //pupila der\n    float d5b = sdCircle(pa- vec2(0.02, -0.3), 0.015);\n    col = DrawFigDelgado(vec3(0.0, 0.0, 0.0), col, d5a);  //pupila\n    col = DrawFigDelgado(vec3(0.0, 0.0, 0.0), col, d5b);  //pupila\n    \n    p=p0*vec2(0.8)-vec2(-0.6,-0.6);\n    //ojo izq\n    vec2 pc1p1=vec2(.363,.372);\n    vec2 pc1p2=vec2(.354,.463);\n    vec2 pc1p3=vec2(.429,.426);\n\n    vec2 pc2p1=vec2(.363,.372);\n    vec2 pc2p2=vec2(.370,.285);\n    vec2 pc2p3=vec2(.425,.318);\n    float db1= sdBezier(p,pc1p1,pc1p2,pc1p3 );\n    float db2= sdBezier(p,pc2p1,pc2p2,pc2p3 );\n     \n     //ojo der\n    p=p0*vec2(0.8)-vec2(-0.45,-0.6);   \n    vec2 pc3p1=vec2(.568,.360);\n    vec2 pc3p2=vec2(.571,.467);\n    vec2 pc3p3=vec2(.500,.430);\n\n    vec2 pc4p1=vec2(.568,.360);\n    vec2 pc4p2=vec2(.565,.326);\n    vec2 pc4p3=vec2(.550,.314);\n    float db3= sdBezier(p,pc3p1,pc3p2,pc3p3 );\n    float db4= sdBezier(p,pc4p1,pc4p2,pc4p3 );\n    db1= unionSDF(db1,db2);\n    db3= unionSDF(db3,db4);\n    col = DrawFigDelgado(vec3(0.0),col,db1);\n    col = DrawFigDelgado(vec3(0.0),col,db3);\n return col;\n}   \n\n\nvec3 HacerRostro2d(vec2 uv, vec3 col)\n{   vec2 p0=uv; \n    vec2 p=uv;\n    float r;\n    float d1, d2, d3;\n    float d4a,d4b,d5a,d5b;\n    vec2 pa , pb;\n    \n    //cabeza\n    p = p0;\n    p-= vec2(-0.08, 0.1);\n    p*=  vec2(0.95, 0.76);\n    d1 = sdCircle(p, 0.5);\n    \n    float d1a=sdCircle(p*vec2(0.7,1.0)-vec2(0.0,0.17), 0.33);\n    float d1b=sdCircle(p*vec2(0.7,1.0)-vec2(0.0,-0.17), 0.33);\n    d1= unionSDF( d1,d1a);\n    d1= unionSDF( d1,d1b);\n    \n    //puntos en frente\n    r = 0.015;\n    pa = p0;\n    pa.y+=0.12;\n    pa.x+=0.06;\n    pa.x=abs(pa.x)-0.01;\n    \n    float d6a = sdCircle(pa- vec2(0.05, 0.5), r);\n    float d6b = sdCircle(pa- vec2(0.05, 0.4), r);\n    float d6c = sdCircle(pa- vec2(0.05, 0.3), r);\n    \n    //orejas\n    r = 0.15;\n    pa = p0*vec2(1.0,0.8)-vec2(-0.07,-0.5);\n    pa.x=abs(pa.x)-0.4;\n    float d7a = sdCircle(pa- vec2(0.05, 0.4), r);\n    \n    col = DrawFigBorde(vec3(1.0, 1.0, 1.0), col, d7a);\n    col=DrawFigBordeR(vec3(0.99, 0.917, 0.811), col, d1,0.001);  //cabeza\n    \n    vec2 pmov=p0-vec2(0.0,0.15*abs(sin(iTime)) );\n    col= HacerOjos(pmov,col);\n    \n    p=p0*vec2(0.7,0.7)-vec2(0.0,0.2);\n    //ceja iqz\n    col= HacerCejaIzq(p-vec2(0.02,0.5),col);\n    col= HacerCejaIzq(vec2(-p.x, p.y)-vec2(0.12,0.45),col);\n    \n    col= DrawFigDelgado(vec3(0.905, 0.815, 0.666), col, d6a);\n    col= DrawFigDelgado(vec3(0.905, 0.815, 0.666), col, d6b);\n    col= DrawFigDelgado(vec3(0.905, 0.815, 0.666), col, d6c);\n    \n    col=HacerBoca(pmov-vec2(-0.28,0.38),col);\n    col=HacerBrazo(p,col);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.5);\n    float esc=1.0;\n    uv*=esc;\n\n    vec3  col=vec3(0.45,0.7,1.0)-uv.y*0.5/esc;\n    col= HacerRostro2d(uv-vec2(0.0,0.5),col);\n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}