{
    "Shader": {
        "info": {
            "date": "1458811997",
            "description": "Another lost egg (mouse enabled); the \"surprise\" in this one is a gravitational wave detector.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "MsdXWn",
            "likes": 9,
            "name": "Faberge Balls",
            "published": 3,
            "tags": [
                "dynamics",
                "egg"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 779
        },
        "renderpass": [
            {
                "code": "// \"Faberge Balls\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nfloat PrEllips2ShDf (vec3 p, vec2 r, float w)\n{\n  vec3 ra;\n  float s;\n  s = min (r.x, r.y);\n  ra = r.xyx;\n  return max ((s + w) * (length (p / (ra + w)) - 1.), -\n     (s - w) * (length (p / (ra - w)) - 1.));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nconst int nBall = 216;\nvec3 qHit, vnBall, ltDir, qnSph;\nvec2 sOpen;\nfloat dstFar, tCur, egLen, egRad, egOpen, wThk, spRad;\nint idObj, idBall;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, db, dr, i2;\n  i2 = 1. / sqrt (2.);\n  dMin = dstFar;\n  q = p;\n  q.y -= -1.15 * egLen;\n  q.xz = abs (q.xz);\n  q.xz = vec2 (q.x - q.z, q.z + q.x) * i2;\n  q.yz = q.yz * sOpen.x + q.zy * sOpen.y * vec2 (1., -1.);\n  q.y -= 1.15 * egLen;\n  dr = wThk * (1. - (1. - SmoothBump (0.47, 0.53, 0.03,\n     fract (1.75 * abs (q.y) / egLen + 0.5))) * (1. - SmoothBump (0.45, 0.55, 0.03,\n     fract (4. * (atan (q.z, - q.x) / pi + 1.)))));\n  d = PrEllips2ShDf (q, vec2 (egRad + dr, egLen + dr), wThk);\n  q.xz = vec2 (q.x + q.z, q.z - q.x) * i2;\n  db = (sOpen.y != 0.) ? - min (q.x, q.z) : - dstFar;\n  d = max (d, db);\n  if (d < dMin) { dMin = d;  idObj = 1;  qHit = q; }\n  qq = q;\n  qq.y = abs (qq.y) - (egLen - 0.3 * egRad);\n  d = max (PrCapsDf (qq.xzy, 0.4 * egRad, 0.005 * egRad), 0.25 * egRad - qq.y);\n  d = max (d, db);\n  if (d < dMin) { dMin = d;  idObj = 2;  qHit = q; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  int idObjT;\n  idObjT = idObj;\n  const vec3 e = vec3 (0.0001, -0.0001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  idObj = idObjT;\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat BallHit (vec3 ro, vec3 rd)\n{\n  vec4 p;\n  vec3 v;\n  float b, d, w, dMin, sz;\n  dMin = dstFar;\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 + 2 * n);\n    v = ro - p.xyz;\n    sz = 0.45 * p.w;\n    b = dot (rd, v);\n    w = b * b + sz * sz - dot (v, v);\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) {\n        dMin = d;\n        vnBall = (v + d * rd) / sz;\n        idBall = n;\n      }\n    }\n  }\n  return dMin;\n}\n\nfloat SphHit (vec3 ro, vec3 rd, float sz)\n{\n  float b, d, w;\n  b = dot (rd, ro);\n  w = b * b + sz * sz - dot (ro, ro);\n  d = dstFar;\n  if (w >= 0.) {\n    d = - b - sqrt (w);\n    qnSph = (ro + d * rd) / sz;\n  }\n  return d;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, vn, qh;\n  float dstBall, dstSph, dstObj, a, s, t, c;\n  const vec4 colEg1 = vec4 (0.3, 0.1, 0., 0.2),\n     colEg2 = vec4 (0.6, 0.6, 0.2, 0.5), colEg3 = vec4 (0., 0., 0.6, 0.1);\n  dstObj = ObjRay (ro, rd);\n  dstBall = BallHit (ro, rd);\n  dstSph = SphHit (ro, rd, spRad);\n  if (dstBall < min (dstObj, dstFar)) {\n    c = 33. * float (idBall) / float (nBall);\n    col = HsvToRgb (vec3 (mod (c, 1.), 1. - 0.07 * mod (c, 8.),\n       1. - 0.06 * mod (c, 13.)));\n    col = col * (0.4 + 0.6 * max (dot (vnBall, ltDir), 0.)) +\n       0.5 * pow (max (0., dot (ltDir, reflect (rd, vnBall))), 64.);\n  } else if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    qh.xz = qHit.xz / egRad;\n    qh.y = qHit.y / egLen;\n    a = 0.5 * (atan (qHit.z, - qHit.x) / pi + 1.);\n    s = dot (qh, qh) - (wThk + 0.84);\n    if (idObj == 1) {\n      if (s > 0.01) {\n        vn = VaryNf (100. * qh.xzy, vn, 0.3);\n        t = 1.1 * abs (qh.y);\n        objCol = mix (colEg1, colEg2, step (t, SmoothBump (0.49, 0.51, 0.005,\n           fract (8. * a + 0.015 * cos (30. * t)))));\n      } else {\n        if (s > 0.) objCol = mix (colEg2, colEg3,\n           clamp (10. * Fbm2 (vec2 (33. * pi * a, 17. * asin (qh.y))) - 9.,\n           0., 1.));\n        else idObj = 3;\n      }\n    } else if (idObj == 2) {\n      if (s > 0.) {\n        vn = VaryNf (200. * qh.xzy, vn, 0.1);\n        t = length (qh.xz) - 0.12;\n        t = 50. * t * t;\n        objCol = mix (colEg1, colEg2, step (t, SmoothBump (0.45, 0.55, 0.015,\n           fract (8. * a))));\n      } else idObj = 3;\n    }\n    if (idObj == 3) {\n      vn = VaryNf (100. * qh.xzy, vn, 0.1);\n      objCol = colEg2;\n    }\n    col = objCol.rgb * (0.2 +\n       0.8 * max (0., max (dot (vn, ltDir), 0.))) +\n       objCol.a * pow (max (0., dot (ltDir, reflect (rd, vn))), 64.);\n  }  else col = vec3 (0., 0.03, 0.) * clamp (1. + 0.7 * rd.y, 0., 1.);\n  if (dstSph < min (dstObj, dstFar)) {\n    col = mix (col, vec3 (0.07), pow (1. - abs (dot (rd, qnSph)), 4.));\n    col += 0.005 + 0.05 * max (dot (qnSph, ltDir), 0.) +\n       0.1 * pow (max (0., dot (ltDir, reflect (rd, qnSph))), 32.);\n  }\n  return pow (clamp (col, 0., 1.), vec3 (0.7));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 qtVu;\n  vec3 rd, ro;\n  vec2 canvas, uv, w;\n  float tCur;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dstFar = 100.;\n  egRad = 9.5;\n  egLen = 8.5;\n  wThk = 0.2;\n  egOpen = SmoothBump (0.15, 0.8, 0.1, mod (tCur / 31. + 0.9, 1.));\n  sOpen = vec2 (cos (1.1 * egOpen), sin (1.1 * egOpen));\n  spRad = Loadv4 (0).y;\n  qtVu = Loadv4 (1);\n  vuMat = QtToRMat (qtVu);\n  w = vec2 (cos (0.05 * tCur), sin (0.05 * tCur));\n  vuMat *= mat3 (w.x, 0., - w.y, 0., 1., 0., w.y, 0., w.x);\n  rd = normalize (vec3 (uv, 2.6)) * vuMat;\n  ro = vec3 (0., - 3. * egOpen, -4. * spRad) * vuMat;\n  ltDir = normalize (vec3 (-1., 2., -1.)) * vuMat;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Faberge Balls\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float pi = 3.14159;\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nconst int nBall = 216;\nfloat nbEdge, gravSgn;\n\nvoid Step (int mId, float spRad, vec4 qtVu, out vec3 rm, out vec3 vm, out float sz)\n{\n  vec4 p;\n  vec3 rmN, vmN, dr, dv, am;\n  float fOvlap, fricN, fDamp, grav, rSep, szN, szAv, fc, dt;\n  fOvlap = 500.;\n  fricN = 2.;\n  fDamp = 0.02;\n  grav = 5. * gravSgn;\n  p = Loadv4 (4 + 2 * mId);\n  rm = p.xyz;\n  sz = p.w;\n  vm = Loadv4 (4 + 2 * mId + 1).xyz;\n  am = vec3 (0.);\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 + 2 * n);\n    rmN = p.xyz;\n    szN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    szAv = 0.5 * (sz + szN);\n    if (n != mId && rSep < szAv) {\n      vmN = Loadv4 (4 + 2 * n + 1).xyz;\n      dv = vm - vmN;\n      fc = fOvlap * (szAv / rSep - 1.) - fricN * dot (dr, dv) / (rSep * rSep);\n      am += fc * dr;\n    }\n  }\n  szAv = 0.5 * (sz + 1.);\n  dr = rm - spRad * normalize (rm);\n  rSep = length (dr);\n  if (rSep < szAv) {\n    fc = fOvlap * (szAv / rSep - 1.) - fricN * dot (dr, vm) / (rSep * rSep);\n    am += fc * dr;\n  }\n  am -= vec3 (0., grav, 0.) + fDamp * sz * vm;\n  dt = 0.02;\n  vm += dt * am / (sz * sz * sz);\n  rm += dt * vm;\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out float sz)\n{\n  vec3 e;\n  float mIdf;\n  mIdf = float (mId);\n  rm = 1.2 * (floor (vec3 (mod (mIdf, nbEdge),\n      mod (mIdf, nbEdge * nbEdge) / nbEdge,\n      mIdf / (nbEdge * nbEdge))) - 0.5 * (nbEdge - 1.));\n  vm = vec3 (0.);\n  sz = 1. - 0.3 * Hashff (mIdf + 0.1);\n}\n\nvoid OrientVu (inout vec4 qtVu, vec4 mPtr, inout vec4 mPtrP, bool init)\n{\n  vec3 vq1, vq2;\n  vec2 dm;\n  float mFac;\n  if (! init) {\n    qtVu = vec4 (0., 0., 0., 1.);\n    mPtrP = vec4 (99., 0., -1., 0.);\n  } else {\n    if (mPtr.z > 0.) {\n      if (mPtrP.x == 99.) mPtrP = mPtr;\n      mFac = 1.5;\n      dm = - mFac * mPtrP.xy;\n      vq1 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      dm = - mFac * mPtr.xy;\n      vq2 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      qtVu = normalize (QtMul (vec4 (cross (vq1, vq2), dot (vq1, vq2)), qtVu));\n      mPtrP = mPtr;\n    } else mPtrP = vec4 (99., 0., -1., 0.);\n  }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 qtVu, mPtr, mPtrP, stDat, p;\n  vec3 rm, vm;\n  vec2 iFrag;\n  float tCur, spRad, sz, nStep;\n  int mId, pxId;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 2 * nBall + 4) discard;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  qtVu = Loadv4 (1);\n  mPtrP = Loadv4 (2);\n  if (pxId >= 4) mId = (pxId - 4) / 2;\n  else mId = -1;\n  nbEdge = floor (pow (float (nBall), 1./3.) + 0.001);\n  if (iFrame <= 5) {\n    nStep = 0.;\n    spRad = 1.2 * nbEdge + 1.;\n    OrientVu (qtVu, mPtr, mPtrP, false);\n    if (mId >= 0) Init (mId, rm, vm, sz);\n  } else {\n    stDat = Loadv4 (0);\n    nStep = stDat.x;\n    spRad = stDat.y;\n    ++ nStep;\n    OrientVu (qtVu, mPtr, mPtrP, true);\n    gravSgn = (mod (nStep, 600.) < 520.) ? 1. : -1.;\n    if (mId >= 0) Step (mId, spRad, qtVu, rm, vm, sz);\n  }\n  if (pxId == 0) stDat = vec4 (nStep, spRad, 0., 0.);\n  else if (pxId == 1) stDat = qtVu;\n  else if (pxId == 2) stDat = mPtrP;\n  else if (pxId == 3) stDat = vec4 (0.);\n  else if (pxId == 4 + 2 * mId) p = vec4 (rm, sz);\n  else if (pxId == 4 + 2 * mId + 1) p = vec4 (vm, 0.);\n  Savev4 (pxId, ((pxId >= 4) ? p : stDat), fragColor, fragCoord);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}