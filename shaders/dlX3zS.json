{
    "Shader": {
        "info": {
            "date": "1672004761",
            "description": "Explorer that shows the evolution (usually into chaos, depends on attractor configuration, which you can also explore if you modify a bit the code and see which attractors end up in chaos and which not) of the different inital states. (also added RK4)",
            "flags": 32,
            "hasliked": 0,
            "id": "dlX3zS",
            "likes": 3,
            "name": "Lorentz Initial Space Explorer",
            "published": 3,
            "tags": [
                "fractal",
                "simulation",
                "attractor",
                "chaos",
                "pattern",
                "explorer"
            ],
            "usePreview": 0,
            "username": "Txoka",
            "viewed": 204
        },
        "renderpass": [
            {
                "code": "float sig(float x){\n    return 1./(1.+exp(-x));\n}\n\nvec4 sig(vec4 x){\n    return vec4(sig(x.x),sig(x.y),sig(x.z),0.);\n}\n\nvoid mainImage(out vec4 O, in vec2 U){\n    O = sig(texture(iChannel0, U/iResolution.xy)*sigmoid_transition);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 acc(vec3 p,float s,float r,float b)\n{\n    return vec3(\n        s*(p.y-p.x),\n        p.x*(r-p.z)-p.y,\n        p.x*p.y-b*p.z);\n}\n\nvec3 RK4(vec3 x,float h,float s,float r, float b){\n    vec3 k1=acc(x,s,r,b);\n    vec3 k2=acc(x+k1*h*0.5,s,r,b);\n    vec3 k3=acc(x+k2*h*0.5,s,r,b);\n    vec3 k4=acc(x+k3*h,s,r,b);\n\n    return h*(k1+k2*2.+k3*2.+k4)/6.;\n}\n\nconst float dt=0.01;\n\n\nvoid mainImage(out vec4 O, in vec2 U){\n    vec2 uv=(U*2.-iResolution.xy)/iResolution.y*100.;\n    O=texture(iChannel0, U/iResolution.xy);\n    //60 frames to full-screen if you want\n    if(iFrame<60)O.xyz = initial_state;\n    \n    O.xyz += RK4(O.xyz,dt,s,r,b);\n    //O.xyz += acc(O.xyz,s,r,b)*dt;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define initial_state vec3(uv,r-1.)\n\n//atractor parameters\nconst float s=10.;\nconst float r=28.;\nconst float b=8./3.; \n//change those for defines if you want to explore\n//parameter space\n\n\n//5,28,8/3 converges in all points\n//6,28,8/3 has convergence and chaos\n\n//(1,2,3,4),28,8/3 show cool patters\n\nconst float sigmoid_transition=0.1; //the lower the fuzzyer\n//just the strength of the transition\n//higher is more vivid colors but more constrast",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}