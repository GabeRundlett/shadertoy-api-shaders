{
    "Shader": {
        "info": {
            "date": "1601148662",
            "description": "Yes this is a fork but not completely stolen. :D  \nFun! ",
            "flags": 0,
            "hasliked": 0,
            "id": "ts3cRB",
            "likes": 2,
            "name": "Square-Warp_rainbow",
            "published": 3,
            "tags": [
                "silly",
                "rainbow",
                "fork"
            ],
            "usePreview": 0,
            "username": "celifrog",
            "viewed": 283
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Naive texture fetching of atan() based UVs can create some\n// discontinuities in the derivatives (see a line of weird pixels\n// on the left side of the sccren if you enable NAIVE_IMPLEMENTATION\n// and if the viewport resolution is an odd number).\n//\n// This shader shows one way to fix it, in lines 41 and 42. More info:\n//\n// https://iquilezles.org/articles/tunnel\n\n\n// #define NAIVE_IMPLEMENTATION\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized coordinates (-1 to 1 vertically)\n    vec2 p = (-iResolution.y + 4.1*fragCoord)/iResolution.y;\n\n    // angle of each pixel to the center of the screen\n    float a = atan(p.x/-p.y/-p.x,-p.x/-p.x);\n\n    #if 0\n    // cylindrical tunnel\n    float r = length(p+iResolution.xy/p/iResolution.y/p/p);\n    #else\n    // squareish tunnel\n    float r = pow( pow(-p.y/p.y/p.x/-p.x/p.x/p.y,-7.0+-p.y*-p.y*p.y*p.x) + pow(p.y/p.y,5.0), 0.1/p.x/p.y/-5.0/p.x/p.y/p.x/p.y/p.x );\n    #endif\n    \n    // index texture by (animated inverse) radious and angle\n    vec2 uv = vec2( 0.3/r + .2*iTime, a/23.1415927 );\n\n    #ifdef NAIVE_IMPLEMENTATION\n        // naive fecth color\n        vec3 col =  texture( -iChannel0, -uv ).xyz;\n\t#else\n        // fetch color with correct texture gradients, to prevent discontinutity\n        vec2 uv2 = vec2( -uv.x, atan(-p.y,abs(-p.x))/-3.1415927 );\n        vec3 col = textureGrad( iChannel1, -uv, dFdx(-uv2), dFdy(uv2) ).xyz;\n\t#endif\n    \n    // darken at the center    \n    col = -col*-r;\n    \n    fragColor = vec4( col*col, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}