{
    "Shader": {
        "info": {
            "date": "1377741343",
            "description": "Playing with 16 inversions of the plane (1/z).",
            "flags": 0,
            "hasliked": 0,
            "id": "XdXGDS",
            "likes": 44,
            "name": "Iterations - inversion",
            "published": 3,
            "tags": [
                "2d",
                "iterations",
                "inversion"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 9136
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2013 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n\n// Other \"Iterations\" shaders:\n//\n// \"trigonometric\"   : https://www.shadertoy.com/view/Mdl3RH\n// \"trigonometric 2\" : https://www.shadertoy.com/view/Wss3zB\n// \"circles\"         : https://www.shadertoy.com/view/MdVGWR\n// \"coral\"           : https://www.shadertoy.com/view/4sXGDN\n// \"guts\"            : https://www.shadertoy.com/view/MssGW4\n// \"inversion\"       : https://www.shadertoy.com/view/XdXGDS\n// \"inversion 2\"     : https://www.shadertoy.com/view/4t3SzN\n// \"shiny\"           : https://www.shadertoy.com/view/MslXz8\n// \"worms\"           : https://www.shadertoy.com/view/ldl3W4\n// \"stripes\"         : https://www.shadertoy.com/view/wlsfRn\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n\n    // shape (16 points)\t\n\tfloat time = iTime + 47.0;\n\tvec2 z = -1.0 + 2.0*uv;\n\tvec3 col = vec3(1.0);\n\tfor( int j=0; j<16; j++ )\n\t{\n        // deform\t\t\n        float s = float(j)/16.0;\n\t\tfloat f = 0.2*(0.5 + 1.0*fract(sin(s*113.1)*43758.5453123));\n\t\tvec2 c = 0.5*vec2( cos(f*time+17.0*s),sin(f*time+19.0*s) );\n\t\tz -= c;\n\t\tfloat zr = length( z );\n\t    float ar = atan( z.y, z.x ) + zr*0.6;\n\t    z  = vec2( cos(ar), sin(ar) )/zr;\n\t\tz += c;\n        z += 0.05*sin(2.0*z.x);\n\n        // color\t\t\n        col -= 0.7*exp( -8.0*dot(z,z) )* (0.5+0.5*sin( 4.2*s + vec3(1.6,0.9,0.3) ));\n\t}\n    col *= 0.75 + 0.25*clamp(length(z-uv)*0.6,0.0,1.0);\n\n\t// 3d effect\n\tfloat h = dot(col,vec3(0.333));\n\tvec3 nor = normalize( vec3( dFdx(h), dFdy(h), 1.0/iResolution.x ) );\n\tcol -= 0.05*vec3(1.0,0.9,0.5)*dot(nor,vec3(0.8,0.4,0.2));;\n\tcol += 0.25*(1.0-0.8*col)*nor.z*nor.z;\n\n    // 2d postpro\t\n\tcol *= 1.12;\n    col = pow( clamp(col,0.0,1.0), vec3(0.8) );\n\tcol *= 0.8 + 0.2*pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.1 );\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}