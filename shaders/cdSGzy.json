{
    "Shader": {
        "info": {
            "date": "1667764723",
            "description": "A simple UI HUD shader - - https://www.twitch.tv/videos/1642855178",
            "flags": 0,
            "hasliked": 0,
            "id": "cdSGzy",
            "likes": 5,
            "name": "StarCollectionHUD",
            "published": 3,
            "tags": [
                "star",
                "polar",
                "hud"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 214
        },
        "renderpass": [
            {
                "code": "// StarHUD - https://www.twitch.tv/videos/1642855178\n\n#define PI 3.141519\n#define TAU 6.283185\n\nvec2 rot(vec2 v, float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c)*v;\n}\n\n// mercury sdf\n// Repeat around the origin by a fixed angle.\n// For easier use, num of repetitions is use to specify the angle.\nfloat pModPolar(inout vec2 p, float repetitions)\n{\n\tfloat angle = (2.0*PI/repetitions);\n\tfloat a = atan(p.x, p.y) + angle/2.; // Y,X\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.0)) c = abs(c);\n\treturn c;\n}\n\nfloat sdfStar5( in vec2 p )\n{\n    // repeat domain 5x\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292); // pi/5\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    \n    // draw triangle\n    const vec2 k3 = vec2(0.951056516295,  0.309016994375); // pi/10\n    return dot( vec2(abs(p.x)-0.3,p.y), k3);\n}\n\nfloat SDstar5(in vec2 p, in float r)\n{\n    //return sdfStar5(p/r)*r;\n\n\n    // these 4 lines can be precomputed for a given shape\n    const float an = 3.141593/5.0; // 5sides\n    const float en = 3.141593/3.0; // angle\n    const vec2  acs = vec2(cos(an),sin(an));\n    const vec2  ecs = vec2(cos(en),sin(en)); // ecs=vec2(0,1) and simplify, for regular polygon,\n\n    // reduce to first sector\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n\n    // line sdf\n    p -= r*acs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, r*acs.y/ecs.y);\n    return length(p)*sign(p.x);\n}\n\n\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    p.y = -p.y;\n\n    //float starcount = 38.0;               // example stars collected (pass this in...)\n    \n    float t = iTime*0.75;\n    \n    float starcount = hash11(floor((27.0+t)/3.0));\n    starcount = floor(starcount*50.0);      // randomized stars collected\n    \n    \n    // fill amount (0.0 to 1.0)\n    float fill = mod(t,3.0)-1.0;  // example fill value\n    //float fill = 0.5+sin(t)*0.5;\n\n    vec3 col1 = vec3(0.6,0.3,1.0)*0.7;    // purple\n    vec3 col2 = vec3(0.2,0.2,0.2);        // grey\n    vec3 col3 = vec3(1.0,1.0,1.0);        // white\n\n    float totalstars = 50.0;\n    float c = pModPolar(p,totalstars)+(totalstars*0.5);\n    float fade = 0.0;\n    float rad = 0.015;\n    float ang = -(PI*0.5);\n    //float ang = (c*(-TAU/totalstars))-(PI*0.5);\n\n    if (c>(totalstars-starcount))\n    {\n        fade = -1.0 + (c*(1.0/totalstars));\n        fade+=(fill*2.0);\n        fade = clamp(fade,0.0,1.0);\n        float fade2 = smoothstep(0.0,0.25,fade); // 0.125\n        rad = mix(rad,0.022,fade2);\n        ang = mix(ang,ang-(TAU/5.0),fade2);\n        float fade3 = smoothstep(0.0,0.25,fade-0.1);\n        col2 = mix(col2,col3,fade3);\n    }\n    \n    // render star\n    p = rot(p+vec2(-0.4,0.0),ang);\n    float cc = 1.0-smoothstep(0.0,0.005,SDstar5(p,rad)); // starradius=0.02\n    vec3 col = mix(col2*cc,col1*cc,fade);\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}