{
    "Shader": {
        "info": {
            "date": "1589126996",
            "description": "Raymarching a lunar landscape.\nIf anyone has any hints and tips they could suggest, they would be welcome! I'm trying to learn. :)",
            "flags": 0,
            "hasliked": 0,
            "id": "3slfW2",
            "likes": 14,
            "name": "Raymarched Moonscape",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "raymarching",
                "moon"
            ],
            "usePreview": 0,
            "username": "dean_the_coder",
            "viewed": 470
        },
        "renderpass": [
            {
                "code": "// Processed by 'GLSL Shader Shrinker'\n// (https://github.com/deanthecoder/GLSLShaderShrinker)\n\nfloat hash(vec2 p) { return fract(sin(dot(p, vec2(123.45, 875.43))) * 5432.3); }\n\nfloat noise(vec2 p) {\n\tvec2 i = floor(p),\n\t     f = fract(p);\n\tfloat a = hash(i),\n\t      b = hash(i + vec2(1, 0)),\n\t      c = hash(i + vec2(0, 1)),\n\t      d = hash(i + vec2(1));\n\tf = f * f * (3. - 2. * f);\n\treturn mix(a, b, f.x) + (c - a) * f.y * (1. - f.x) + (d - b) * f.x * f.y;\n}\n\nfloat fbm(vec2 p) {\n\tfloat f = 0.;\n\tf += .5 * noise(p * 1.1);\n\tf += .22 * noise(p * 2.3);\n\tf += .155 * noise(p * 3.9);\n\tf += .0625 * noise(p * 8.4);\n\tf += .03125 * noise(p * 15.);\n\treturn f;\n}\n\nfloat smoothBounds(float a, float b, float v) {\n\tfloat midPoint = a + (b - a) * .5;\n\treturn smoothstep(a, midPoint, v) * smoothstep(b, midPoint, v);\n}\n\nfloat stars(vec2 uv) { return smoothBounds(.195, .2, fbm(uv * 1e2)); }\n\nfloat rfbm(vec2 xz) { return abs(2. * fbm(xz) - 1.); }\n\nfloat sdEarth(vec3 p) { return length(p - vec3(0, -.8, 2)) - .7; }\n\nfloat sdTerrain(vec3 p) {\n\tif (p.y > 0.) return 1e10;\n\tfloat h = rfbm(p.xz * .2);\n\tp.xz += vec2(1);\n\th += .5 * rfbm(p.xz * .8);\n\th += .25 * rfbm(p.xz * 2.);\n\th += .03 * rfbm(p.xz * 16.1);\n\th *= .7 * fbm(p.xz);\n\th -= .7;\n\treturn abs(p.y - h) * .6;\n}\n\nvec2 map(vec3 p) {\n\tfloat d1 = sdTerrain(p),\n\t      d2 = sdEarth(p);\n\treturn d1 < d2 ? vec2(d1, 1) : vec2(d2, 2);\n}\n\nvec3 calcNormal(vec3 p) {\n\tconst vec2 e = vec2(1, -1) * 29e-5;\n\treturn normalize(e.xyy * map(p + e.xyy).x + e.yyx * map(p + e.yyx).x + e.yxy * map(p + e.yxy).x + e.xxx * map(p + e.xxx).x);\n}\n\nfloat calcShadow(vec3 origin, vec3 lightOrigin) {\n\tfloat s = 1.,\n\t      d = .1;\n\tvec3 rayDir = normalize(lightOrigin - origin);\n\twhile (d < 10. && s > 0.) {\n\t\tfloat distToObj = map(origin + rayDir * d).x;\n\t\ts = min(s, distToObj / d);\n\t\td += clamp(distToObj, .2, 1.);\n\t}\n\treturn smoothstep(0., 1., s);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n\tvec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n\tvec3 p, col,\n\t     rd = normalize(vec3(uv, 1));\n\tfloat d = .01,\n\t      id = 0.;\n\tfor (float steps = 0.; steps < 80.; steps++) {\n\t\tp = vec3(0, 0, -3) + rd * d;\n\t\tvec2 h = map(p);\n\t\tif (abs(h.x) < .004 * d) {\n\t\t\tid = h.y;\n\t\t\tbreak;\n\t\t}\n\n\t\tif (d > 5.) break;\n\t\td += h.x;\n\t}\n\n\tif (id < .5) col = vec3(stars(uv));\n\telse {\n\t\tvec3 sunPos = vec3(8. - 16. * iMouse.x / iResolution.x, 6. - cos(iTime * .2), -1. - iMouse.y / 18.),\n\t\t     n = calcNormal(p),\n\t\t     mainLight = vec3(1.82, 1.8, 1.78) * dot(n, normalize(sunPos - p));\n\t\tif (id > 1.5) {\n\t\t\tcol = mix(mix(mix(vec3(.05, .05, .8), vec3(.05, .25, .05), smoothstep(.4, .52, fbm(n.xy * 3.1 + vec2(iTime * .05, 0)))), vec3(1), smoothstep(.8, .95, n.y) * smoothstep(.1, .8, fbm(n.xz * 10. + vec2(iTime * .1, 0)))), vec3(.3, .5, .95), smoothstep(-.5, 0., n.z));\n\t\t\tcol *= mainLight;\n\t\t}\n\t\telse if (id > .5) col = vec3(.5) * mainLight * pow(calcShadow(p, sunPos), 2.);\n\t}\n\n\tfragColor = vec4(pow(col, vec3(.4545)), 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}