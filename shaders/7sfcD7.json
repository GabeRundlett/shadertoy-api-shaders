{
    "Shader": {
        "info": {
            "date": "1642166423",
            "description": "Herringbone tilling ... WIP",
            "flags": 0,
            "hasliked": 0,
            "id": "7sfcD7",
            "likes": 5,
            "name": "Herringbone tilling",
            "published": 3,
            "tags": [
                "herringbone"
            ],
            "usePreview": 0,
            "username": "xZAKHAMx",
            "viewed": 265
        },
        "renderpass": [
            {
                "code": "float S(float x, float snap)\n{\n    return floor(x)*snap;\n}\n\nfloat pingpong(float value, float scale)\n{\n    return scale - abs(mod(abs(value), (2.*scale)) - scale);\n}\n\nfloat blendColorBurn(float base, float blend) {\n\treturn (blend==0.0)?blend:max((1.0-((1.0-base)/blend)),0.0);\n}\nvec3 blendColorBurn(vec3 base, vec3 blend) {\n\treturn vec3(blendColorBurn(base.r,blend.r),blendColorBurn(base.g,blend.g),blendColorBurn(base.b,blend.b));\n}\n\nvec3 blendColorBurn(vec3 base, vec3 blend, float opacity) {\n\treturn (blendColorBurn(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendColorDodge(float base, float blend) {\n\treturn (blend==1.0)?blend:min(base/(1.0-blend),1.0);\n}\nvec3 blendColorDodge(vec3 base, vec3 blend) {\n\treturn vec3(blendColorDodge(base.r,blend.r),blendColorDodge(base.g,blend.g),blendColorDodge(base.b,blend.b));\n}\n\nvec3 blendColorDodge(vec3 base, vec3 blend, float opacity) {\n\treturn (blendColorDodge(base, blend) * opacity + base * (1.0 - opacity));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 20.;\n    float BL = 3.;\n    float edgeblur = .95;\n    float edgegap  = .98;\n    vec2 uv = (fragCoord/iResolution.xy);\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= scale;\n    float col = 0.;\n    \n    float snapX = S(uv.x, 1.);\n    float snapY = S(uv.y, 1.);\n    \n    float t1 = snapX + uv.y;\n    float t2 = snapY + uv.x;\n    \n    float modY = mod(t1, BL*2.);\n    float modX = mod(t2, BL);\n    if(modY < BL) col = 1.;\n    \n    float UVy = mix(modX, modY, col);\n    \n    vec2 fracUV = fract(uv);\n    float UVx = mix(fracUV.y, fracUV.x, col);\n    \n    vec2 newUV = vec2(UVx, UVy);\n    \n    float snapT1 = S(t1, BL)+t1;\n    float snapT2 = S(t1, BL)-t2;\n    float snapT12 = mix(snapT2, snapT1, col);\n    float h = pingpong(UVx, .5);\n    float w = pingpong(UVy, BL/2.);\n    vec3 edge = vec3(w, h, 0.);\n    vec3 edgeburn = blendColorBurn(edge, vec3(edgegap), 1.);\n    vec3 edgedodge = blendColorDodge(edgeburn, vec3(edgeblur), 1.);\n    float edges = min(edgedodge.x, edgedodge.y);\n    fragColor = vec4(edges);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}