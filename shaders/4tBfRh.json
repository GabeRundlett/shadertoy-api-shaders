{
    "Shader": {
        "info": {
            "date": "1514415609",
            "description": "Circular Waves",
            "flags": 0,
            "hasliked": 0,
            "id": "4tBfRh",
            "likes": 5,
            "name": "Circular Waves",
            "published": 3,
            "tags": [
                "waves",
                "circular"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 868
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2017 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// new base code for the quad template of SoShade :)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // central coord\n\tvec2 uv = (fragCoord.xy * 2. - iResolution.xy) / iResolution.y;\n    \n    // fracted length\n    float d = abs(fract(dot(uv, uv) - iTime * 0.5) - 0.5) + 0.3;\n    \n    // fracted angle\n    float a = abs(fract(atan(uv.x,uv.y) / 6.283 * 5.) - 0.5) + 0.2;\n    \n    //only waves\n    //fragColor = vec4(d * vec3(0.2, 1.0, 0.6), 1.0);\n    \n    //only rays\n    //fragColor = vec4(a * vec3(0.2, 0.8, 0.5), 1.0);\n    \n    // mixed\n    if (a < d) // inverted shape => (a > d)\n\t\tfragColor = vec4(d * vec3(0.2, 1.0, 0.6), 1.0);\n    else\n        fragColor = vec4(a * vec3(0.2, 0.8, 0.5), 1.0);\n    \n    // another interested things\n    //fragColor = vec4(mix(a * vec3(0.2, 0.8, 0.5),d * vec3(0.2, 1.0, 0.6),d/a), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}