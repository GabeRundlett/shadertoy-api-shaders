{
    "Shader": {
        "info": {
            "date": "1596679522",
            "description": "cheap vfx shader",
            "flags": 0,
            "hasliked": 0,
            "id": "3lffD4",
            "likes": 8,
            "name": "OrbAttract(SST)",
            "published": 3,
            "tags": [
                "2d",
                "circles",
                "vfx"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 547
        },
        "renderpass": [
            {
                "code": "// orb attract shader\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (iResolution.xy - 2.0*fragCoord.xy)/iResolution.y;\n    //float v1 = 1.0+ sin(iTime+p.x*250.0)*0.3;\n    //float v2 = 1.0+ cos(iTime+p.y*250.0)*0.3;\n    \n    \n    p.y += sin(iTime*1.5+p.x*12.0)*0.05;\t// wibble\n    //p.x = sin(p.y*12.0)*0.05;\n    \n    \n    float speed = 0.45;\n    float d = length(p);\n    p*= 0.8;\t\t// scale\n\tfloat r = (p.x*p.x + p.y*p.y)*4.0;\n    //r+=sin(d*4.0);\t//*0.5;\n\tfloat v = 1.0 + .5*sin((r+iTime*speed)/0.08);\n    v =(v*d)*4.0;\n    v*=1.0-d;\n    v = clamp(v,0.0,4.0);\n    v*=v;\n\tvec3 col = vec3(0.6,0.5,0.9)*v;\n    //col*=v1*v2;\t// dotty\n    fragColor = vec4(col,1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}