{
    "Shader": {
        "info": {
            "date": "1524018400",
            "description": "blur test",
            "flags": 0,
            "hasliked": 0,
            "id": "Ms3BRH",
            "likes": 0,
            "name": "johndp blur test",
            "published": 3,
            "tags": [
                "utility"
            ],
            "usePreview": 0,
            "username": "johndp",
            "viewed": 446
        },
        "renderpass": [
            {
                "code": "float pi = 3.14159265359;\n\n//-----------------------------------------------------------------\n// Digit drawing function by P_Malin (https://www.shadertoy.com/view/4sf3RN)\n\nfloat SampleDigit(const in float n, const in vec2 vUV)\n{\t\t\n\tif(vUV.x  < 0.0) return 0.0;\n\tif(vUV.y  < 0.0) return 0.0;\n\tif(vUV.x >= 1.0) return 0.0;\n\tif(vUV.y >= 1.0) return 0.0;\n\t\n\tfloat data = 0.0;\n\t\n\t     if(n < 0.5) data = 7.0 + 5.0*16.0 + 5.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n\telse if(n < 1.5) data = 2.0 + 2.0*16.0 + 2.0*256.0 + 2.0*4096.0 + 2.0*65536.0;\n\telse if(n < 2.5) data = 7.0 + 1.0*16.0 + 7.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n\telse if(n < 3.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n\telse if(n < 4.5) data = 4.0 + 7.0*16.0 + 5.0*256.0 + 1.0*4096.0 + 1.0*65536.0;\n\telse if(n < 5.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 1.0*4096.0 + 7.0*65536.0;\n\telse if(n < 6.5) data = 7.0 + 5.0*16.0 + 7.0*256.0 + 1.0*4096.0 + 7.0*65536.0;\n\telse if(n < 7.5) data = 4.0 + 4.0*16.0 + 4.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n\telse if(n < 8.5) data = 7.0 + 5.0*16.0 + 7.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n\telse if(n < 9.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n\t\n\tvec2 vPixel = floor(vUV * vec2(4.0, 5.0));\n\tfloat fIndex = vPixel.x + (vPixel.y * 4.0);\n\t\n\treturn mod(floor(data / pow(2.0, fIndex)), 2.0);\n}\n\nfloat PrintInt(const in vec2 uv, const in float value )\n{\n\tfloat res = 0.0;\n\tfloat maxDigits = 1.0+ceil(log2(value)/log2(10.0));\n\tfloat digitID = floor(uv.x);\n\tif( digitID>0.0 && digitID<maxDigits )\n\t{\n        float digitVa = mod( floor( value/pow(10.0,maxDigits-1.0-digitID) ), 10.0 );\n        res = SampleDigit( digitVa, vec2(fract(uv.x), uv.y) );\n\t}\n\n\treturn res;\t\n}\n\nvec4 circle(vec2 p, vec2 center, float radius)\n{\n\treturn mix(vec4(1,1,1,0), vec4(1,0,0,1), smoothstep(radius + 0.005, radius - 0.005, length(p - center)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 xy = uv;\n    vec2 dDim = vec2(120,68);  \n    vec2 PDxy = vec2(10.0,30.0)/dDim;\n    float m_fps = 2.0;\n    float d0 = round(fract(float(iFrame)/2.0/m_fps)+0.001);\n    float v = 7.0;\n    float r = 0.003;\n    float s = .1;\n    \n    if(true)\n        uv.x = fract(uv.x*2.0);\t\t\n      \tdDim = dDim*vec2(0.5,1.0);\t\n    \n    uv -= 0.5;\n    \n    fragColor = vec4(0,0,0,1);\n    \n    if(circle(uv,vec2(0.0,0.01),r).x>0.5 && circle(uv,vec2(0.0,0.01),r).y<0.5){\n        fragColor = vec4(1,1,1,1);\n    }\n\n    vec2 pos = vec2(s*cos(iTime*v),0.0*s*sin(iTime*v));\n    if(circle(uv,pos,r).x>0.5 && circle(uv,pos,r).y<0.5){\n        \tfragColor = vec4(1,1,1,1);\n    }\n    \n    uv += 0.5;\n    \n    if((1.0-uv.x)<PDxy.x && (uv.x)>0.0 && (uv.y)<PDxy.y && (uv.y)>0.0 && xy.x >0.5){\t\t\n        fragColor = vec4(d0,d0,d0,1.0);\n    }\n    \n    float col = 0.1*PrintInt( (xy-vec2(0.01,0.85))*20.0, iFrameRate );\n    fragColor += vec4(col,col,col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}