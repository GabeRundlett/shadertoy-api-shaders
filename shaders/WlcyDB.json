{
    "Shader": {
        "info": {
            "date": "1609798418",
            "description": "I watched this today: https://www.youtube.com/watch?v=--6eyLO78CY\nAnd felt like making this",
            "flags": 32,
            "hasliked": 0,
            "id": "WlcyDB",
            "likes": 16,
            "name": "Curve Table",
            "published": 3,
            "tags": [
                "curve",
                "table",
                "youtube"
            ],
            "usePreview": 0,
            "username": "TheNosiriN",
            "viewed": 392
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    fragColor = vec4(texture(iChannel0, fragCoord.xy/iResolution.xy).rrr, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TIME iTime *0.5\n#define R (iResolution.xy)\n#define mR min(R.x, R.y)\n#define T(U) texelFetch( iChannel0, ivec2(U), 0 )\nconst float RADIUS = 0.05; //decrease this\nconst float SPACING = 2.5; //increase this\nconst float THICKNESS = 0.05;\n\nvec2 rot(vec2 p, float inc){ return vec2(sin((TIME+inc)*p.x),cos((TIME+inc)*p.y)); }\n\nvec2 pMod(in vec2 inp, out vec2 outp, float size){\n\toutp = mod(inp+size*0.5,size)-size*0.5; return floor((inp+size*0.5)/size);\n}\nfloat line(vec2 p, vec4 ab) {\n    p -= ab.xy, ab.zw -= ab.xy;\n    return smoothstep(3./mR,0.,length(p-ab.zw*(clamp(dot(p,ab.zw)/dot(ab.zw,ab.zw),0.,1.))));\n}\n\nvoid mainImage( out vec4 C, in vec2 P ){\n    if (P == vec2(0.5,0.5)){ C.a=R.x; C.g=RADIUS; C.b=THICKNESS; return; }\n    vec4 pc = T(vec2(0,0));\n    if (R.x!=pc.a || RADIUS!=pc.g || THICKNESS!=pc.b){ C = vec4(0); return; }\n    \n    vec2 uv = P/mR - vec2(RADIUS*1.25, 1.0-RADIUS*1.25);\n    vec2 puv; vec2 id = pMod(uv, puv, RADIUS*SPACING);\n    C.r = line(vec2(puv.x, uv.y), RADIUS*vec4(rot(id.xx,0.), rot(id.xx,THICKNESS)));\n    C.r += line(vec2(uv.x, puv.y), RADIUS*vec4(rot(id.yy,0.), rot(id.yy,THICKNESS)));\n    C.r += id.x>0.0 && id.y!=0.0 ? line(puv, RADIUS*vec4(rot(id,0.), rot(id,THICKNESS))) : 0.;\n    C.r *= id.x==0.0 && id.y==0.0 ? 0.0 : 1.0;\n    C.r = mix(0.997*texture(iChannel0, P/R).r, 1.0, C.r);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}