{
    "Shader": {
        "info": {
            "date": "1667962414",
            "description": "Suzanne the Blender monkey on salvia. They're making gifts for you!",
            "flags": 8,
            "hasliked": 0,
            "id": "XsBGDt",
            "likes": 15,
            "name": "Machine Elf",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "julia",
                "pareidolia",
                "suzanne"
            ],
            "usePreview": 0,
            "username": "jimbo00000",
            "viewed": 286
        },
        "renderpass": [
            {
                "code": "// Adapted from\n// https://www.shadertoy.com/view/XdsGDr\n\n#define ITER 120\n\nvec2 mir( vec2 pix, float zoom)\n{\n\tvec2 z = zoom * pix;    \n    z.x = -abs(z.x) + .3;\n    return z;\n}\n\n#define S smoothstep\nvec3 colMap( float x )\n{\n\tvec3 col = vec3(0.);\n\tcol.x = S(.0, .3, x) - .75*S(.2,.9,x);\n\tcol.y = S(.0, .4, x) - .75*S(.3,.8,x);\n\tcol.z = S(.7, .8, x) - .85*S(.8,.9,x);\n\n\treturn col * vec3(1.6, .8, .8) * vec3(1., 1.15, 1.2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 R = iResolution.xy,\n        tc = ( fragCoord - .5*R ) / R.y;\n        \n\t//vec2 m = iMouse.xy / R.xy;\n\tfloat t = iTime * .5;\n    \n    float zoom = 1.5 + 1.*(.5*cos(.15*t)+.5);\n    float freq = 4.;\n\n    // Animate Julia params\n    vec2 c = vec2(-0.35, 0.7);\n    c += vec2(\n        .1 + .016*cos(t*freq),\n        -.005+-(.0123*sin(t*freq)*sin(t*freq*1.1))\n        );\n\n\tvec2 z = mir(tc, zoom);\n    vec2 z0 = z;\n    vec2 eye = vec2(-.31, .41);\n\n    float m = clamp(0.,1., length(z-eye)*3.);\n    c = mix(c, c*.94, 1.-m*m*m);\n\n    // Julia\n\tint i = 0;\n\tfor(; i<ITER; i++)\n    {\n\t\tfloat x = (z.x * z.x - z.y * z.y) + c.x;\n\t\tfloat y = (z.y * z.x + z.x * z.y) + c.y;\n\n\t\tif((x * x + y * y) > 4.0)\n        {\n\t\t\tbreak;\n\t\t}\n\t\tz.x = x;\n\t\tz.y = y;\n\t}\n\t\n    float q = 40. + 10.*sin(.1*t);\n    float x = fract(float(i) / q);\n\tif(i == ITER)\n    {\n        //iris\n        x = sin(100.*length(z0-eye) - 20.*t);\n\t}\n\tvec3 col = colMap(x);\n\n\tfragColor.xyz = col;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "#define PI 3.1415927\n\n// https://kaegi.nl/werner/userfiles/downloads/vosim-system.pdf\nfloat vosim(in float time, in float freq, in float n)\n{\n    float m = 3.;\n    float ph = mod(freq*time, 1.);\n    float fund = sin(n*PI*ph);\n    fund *= 1.-ph;\n\n    return fund * fund;\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    float vol = 1.;\n        \n    float n = 6.;\n    // modulate n\n    float n1 = n + 1.*sin(time);\n    float n2 = n + 1.*sin(1.1*time);\n    \n    // Chant\n    float m = 3.;\n    float chant = 0.;\n    float low = 55.;\n    chant += vosim(time, low, n1);\n    chant -= vosim(time, low*3.0/2., n2);\n    chant -= vosim(time, low*1.006, n2);\n    chant += vosim(time, low*3.0055/2., n1);\n    chant *= .06125;\n    \n    float sig = 0.;\n    sig += .5*chant;\n    \n    // Elf says \"ohhh woooowwwww\"\n    float ooo = 0.;\n    float n3 = n + 4.*cos(4.*time+5.);\n\n    // modulate freq\n    float x = 4.*time + 95.;\n    float pmod = sin(x) + sin(1.3*x) + sin(1.7*x);\n    time += .2*.13*pmod;\n    float freq = 180.;\n\n    ooo += vosim(time, freq, n3);\n    \n    x = .5*time;\n    float vmod = sin(1.23*x) + sin(1.61*x) + sin(2.1*x);\n    //vmod = sin(1.23*x);\n    vmod = pow(clamp(abs(sin(x))-.4, 0.,1.),.12);\n    \n    float t = time * .5;\n    float near = .125*(.5*cos(.15*t)+.5);\n    sig += (.25-near)*vmod*vmod * ooo;\n    \n    return vol * vec2(sig);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}