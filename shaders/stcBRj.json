{
    "Shader": {
        "info": {
            "date": "1663341151",
            "description": "reference: [url]https://twitter.com/pickover/status/1567297600281362433[/url] based on a unique quadrangle tile.\n= equilateral tri +right isosceles tri, the latters always organized as squares. So the tiling ~also consists of \"shuttles\".",
            "flags": 0,
            "hasliked": 0,
            "id": "stcBRj",
            "likes": 29,
            "name": "Damasdi tiling ",
            "published": 3,
            "tags": [
                "tiling",
                "short",
                "reproduction",
                "truchets"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 396
        },
        "renderpass": [
            {
                "code": "    float s = .866, d,a, // sqrt(3)/2\n          q = 1.5708,    // pi/4\n          tau = 6.283,   // 2pi\n          Z = 4.;\n          \n#define r(a)     mat2(cos(a+vec4(0,q,-q,0)))              // rotation\n#define R(a)     length(U0) * cos( mod( atan(U0.y,U0.x) +  a/2. , a  ) -  a/2. + vec2(0,q) ) // rotational symmetry(a)\n#define s(v)     smoothstep(-3.*Z/R.y, 0., v )            // AA draw\n\n       // --- shuttle tile( center, angle, diagonal sign ) = equilateral tri + square + equilateral tri \n#define S(P,a,w)                                                                      \\\n    V  = abs( Q = (U-P) * r(a) );                                                     \\\n    d  = min(.5 - V.y, .683 - dot(V,vec2(.5,s)) );          /* .683 = 1/4 + s/2   */  \\\n    O = max(O, s(d)                                         /* mask */                \\\n        * ( .3 + .5*s(-abs(d)) + .3* s(.5-max(V.x,V.y))     /* border +Â square    */  \\\n            + vec4( 1.-s( min(length(V-.5),length(V-vec2(.5+s,0))) -.33 ) /* dots */  \\\n                    +s( min( length(Q-vec2(1,w 1)), length(Q+vec2(1,w 1)) ) -1.3 ) *step(V.x,.5), 0,0,0) ))  /* diagonal bar */\n                //  +s( .1-abs(Q.x+ w Q.y) ),  0,0,0) ) )   /* diagonal bar */\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R  = iResolution.xy, V, D,T, P, Q,\n         U0 = Z*( 2.*u - R ) / R.y, U;\n    O-=O; \n\n    U = R(tau/6.);                                        // ---6-symmetry\n    P = vec2(s+.5,0);  \n    S(P, 0.,) * vec4(.7,1,0,0);                           // central flower\n // S(P, q,-) * vec4(.7,1,0,0);                           // fills the triangle gaps\n    \n    a = tau/12., U = R(a);                                // --- 12 symmetry\n                                        \n    D = cos(a+vec2(0,q));  T = vec2(-D.y,D.x),  P += vec2(.79,0) + .79*T;  // vec2(.5+s/3.,0.) + (.5+s/3.)*T;\n    S(P, a,);  S(P*r(-a), 2.*a ,);                       // 1st crown\n    // the second call is to complete when the pattern falls out of the main pie ( = fan within angle +- a/2 )\n    \n    P += (1.+s)*D - .5*T; S(P, a ,-); S(P*r(a),,-);      // 2nd crown\n    P += T;               S(P, a ,-);\n\n    P += (1.+s)*D - .5*T; S(P, a ,-); S(P*r(a),,-);      // 3rd crown\n    P += T;               S(P, a , );\n    P -= 2.*T;            S(P, a , ); S(P*r(a),, ); \n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}