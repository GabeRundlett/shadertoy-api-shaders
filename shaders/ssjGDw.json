{
    "Shader": {
        "info": {
            "date": "1617539534",
            "description": "My first raymarching shader",
            "flags": 0,
            "hasliked": 0,
            "id": "ssjGDw",
            "likes": 4,
            "name": "Planet In Raymarching",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "deni_de",
            "viewed": 389
        },
        "renderpass": [
            {
                "code": "#define halftime iTime/2.0\n#define quarttime iTime/4.0\n#define eighttime iTime/8.0\n#define sixteentime iTime/16.0\n#define PI 3.14444\n#define fractime fract(iTime)\n\nvec3 SurfaceImage(vec3 normal)\n{\n    vec2 uv = normal.yz;\n    uv.x += sixteentime;\n    return texture(iChannel0, uv).rgb;\n}\n\n\nvec3 BackgroundImage(vec2 uv)\n{\n    vec3 background = texture(iChannel3,uv - sixteentime * 0.1).rgb;\n    vec3 colorOfback = background;\n    vec2 uv2 = uv * 3.0;\n    uv2.xy += 0.5 * iTime/256.0;\n    vec3 backchanges = texture(iChannel3, uv2).rgb;\n    background *= backchanges;\n    background = background.r < 0.57 ? vec3(0.0) : vec3(background.r);\n    \n    return background * colorOfback;\n}\n\nvec2 sphIntersect(in vec3 ro, in vec3 rd, float ra)\n{\n    float b = dot(ro,rd);\n    float c = dot (ro,ro) - ra * ra;\n    float h = b * b - c;\n    if(h < 0.0) return vec2(-1.0);\n    h = sqrt(h);\n    \n    return vec2(-b -h,-b + h);\n}\n\nvec3 Light(vec3 pos)\n{\n    return normalize(pos);\n}\n\nfloat AnmRadius(float size)\n{\n    return size;\n}\n\nvec3 RayCast(vec3 RayOrigin, vec3 RayDirection, vec2 uv)\n{\n\n    float animatedRadius = AnmRadius(1.04);\n    \n    vec2 it = sphIntersect(RayOrigin,RayDirection,1.0);\n    vec3 normal = RayOrigin + RayDirection * it.x;\n    vec2 it2 = sphIntersect(RayOrigin,RayDirection,1.02);\n    vec3 secondSphereNormal = RayOrigin + RayDirection * it2.x;\n    vec2 it3 = sphIntersect(RayOrigin,RayDirection,animatedRadius);\n    vec3 tSphereNormal = RayOrigin + RayDirection * it3.x;\n    \n    vec3 background = BackgroundImage(uv);\n    \n    vec3 view = vec3(-1,-1,0);\n    vec3 light = Light(vec3(-1,-1,0));\n    \n    vec3 image = background;\n        \n    vec3 planet_image = SurfaceImage(normal) *  (1. - it.x);\n    float diffuse = dot(light,normal);\n    planet_image *= diffuse;\n    float mask = clamp(it.x + it.y, 0.,1.);\n    image = mix(vec3(0),planet_image, mask);\n    image = mix(image,background, 1.- mask);\n    \n    \n    \n    float rim = clamp(1. - dot(view,secondSphereNormal),0.,1.);\n    float rim2 = clamp(1. - dot(view,tSphereNormal),0.,1.);\n    image += vec3(0.15,0.15,.5) * rim + vec3(0.1,0.35,.4) * rim2;\n    \n    return image;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 customUVquad = fragCoord/vec2(512.0,512.0);\n    vec2 uv = fragCoord/iResolution.xy * 1.5;\n    vec3 rayOrigin = vec3(-3.0,0.0,0.0);\n    vec3 rayDirection = normalize( vec3( 1.0, customUVquad - vec2(0.75,0.45) ) );\n    vec3 color = RayCast( rayOrigin, rayDirection, uv );\n    fragColor = vec4( color, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}