{
    "Shader": {
        "info": {
            "date": "1670169676",
            "description": "Day 8 of Codevember 2022\n\nInstagram : https://www.instagram.com/etidouu/\nTwitter : https://twitter.com/EPEtidou",
            "flags": 0,
            "hasliked": 0,
            "id": "cdjXRm",
            "likes": 3,
            "name": "Codevember #8 Square Random 2",
            "published": 3,
            "tags": [
                "random",
                "square",
                "motion",
                "codevember"
            ],
            "usePreview": 0,
            "username": "Etidou",
            "viewed": 117
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#ifndef PI\n#define PI 3.1415926535897932384626433832795\n#endif\n#ifndef TAU\n#define TAU 6.2831853071795864769252867665590\n#endif\n\n\nvec2 rotate(vec2 v, float a) {\n\tfloat sinA = sin(a);\n\tfloat cosA = cos(a);\n\treturn vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA); \t\n}\n\nfloat smootheststep(float edge0, float edge1, float x)\n{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0, 1.0) * 3.14159265;\n    return 0.5 - (cos(x) * 0.5);\n}\n\n\nfloat square(vec2 uv, float d) {\n    uv = uv*0.75-1. * (sin(iTime) / 4.0);\n    return max(abs(uv.x * 2.0), abs(uv.y * -2.0)) - d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = uv * 2.0 - 1.0;\n\tuv.x *= iResolution.x / iResolution.y;\n\tuv *= 1.5;\n\t\n    float blurAmount = -0.005 * 1080.0 / iResolution.y;\n    \n\tfloat period = 35.0;\n\tfloat time = iTime / period;\n\ttime = mod(time, 1.0);\n\ttime = smootheststep(0.0, 1.0, time);\n\t\n\tfragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n\tfor (int i = 0; i < 25; i++) {\n\t\tfloat n = float(i);\n\t\tfloat size = 1.0 - n / 25.0;\n\t\tfloat rotateAmount = (n * 0.5 + 0.25) * PI * 2.0; \n\n        float animTime =  time; // attempt 1\n        // float animTime =  quadraticInOut(time); // attempt 2\n        // float animTime =  qinticInOut((time / 2.0)); // attempt 3\n        // float animTime =  exponentialInOut(time); // attempt 4\n\n        if(n < 1.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0.467, 0.051, 1.), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 2.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0.184, 0.047, 0.91), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 3.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0., 0.11, 1.), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 4.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0., 0.345, 0.91), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 5.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0.0, 0.6, 0.941), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 6.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0.051, 0.663, 1.), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 7.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0.0047, 0.835, 0.91), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 8.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0., 1., 0.808), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 9.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0., 0.91, 0.471), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 10.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0.063, 0.91, 0.047), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 11.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0.369, 1.0, 0.), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 12.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0.651, 0.91, 0.), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 13.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(1., 0.98, 0.051), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 14.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0.91, 0.808, 0.047), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 15.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(1., 0.78, 0.), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 16.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0.91, 0.62, 0.), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 17.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(1., 0.6, 0.051), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 18.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0.91, 0.424, 0.047), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 19.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(1., 0.29, 0.), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 20.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0.91, 0.125, 0.), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 21.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(1., 0.051, 0.078), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 22.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0.91, 0.047, 0.506), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 23.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0.98, 0., 1.), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 24.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0.647, 0., 0.91), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        } else if(n < 25.) {\n            fragColor.rgb = mix(fragColor.rgb, vec3(0.467, 0.051, 1.), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * animTime), size)));\n        }\n\n\t\tfloat blackOffset = mix(1.0 / 4.0, 1.0 / 2.0, n / 400.0) / 400.;\n\n\n        fragColor.rgb = mix(fragColor.rgb, vec3(0.0, 0.0, 0.0), smoothstep(0.0, blurAmount, square(rotate(uv, -(rotateAmount + PI / 2.0) * time), size - blackOffset)));\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}