{
    "Shader": {
        "info": {
            "date": "1703001791",
            "description": "Animated reproductin of this image: https://geometrydaily.tumblr.com/post/19002626421/69-staring-into-the-sun-a-new-minimal-geometric by Tilman Zitzmann, check his other graphical work here: https://geometrydaily.tumblr.com/",
            "flags": 0,
            "hasliked": 0,
            "id": "dtdfDf",
            "likes": 4,
            "name": "Superposed disapearing circle",
            "published": 3,
            "tags": [
                "color",
                "circle",
                "animated",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "Saimon",
            "viewed": 182
        },
        "renderpass": [
            {
                "code": "/* \"Superposed disapearing circles\"\n * I wanted to practice GLSL and the primitives describe in https://thebookofshaders.com/07/\n * so I started looking for art images to try to reproduce.\n * This one is part of my practice serie, it is based on this image: \n * https://geometrydaily.tumblr.com/post/19002626421/69-staring-into-the-sun-a-new-minimal-geometric\n * It was made by Tilman Zitzmann, check his other graphical work here: https://geometrydaily.tumblr.com/\n * (November 2023)(started with 1965 char - Updated 08/01/2024)\n */\n\n#define R       iResolution.xy\n// Clamp the color to make sure it's between [0;1]\n#define clampColor(C) clamp(C,0.,1.)\n\n// r: radius\n// s: size of the border\n// Derived from: http://iquilezles.org/articles/distfunctions2d/\nfloat sdCircleBorder(vec2 p, float r, float s){\n    float d = length(p) - r, //signed distance of circle\n          d2 = abs(d) - s,\n          w = .8/R.y;\n    return smoothstep(-w,w,max(d,d2));\n}\n\n\n// Simplify version of code: https://thebookofshaders.com/edit.php?log=160909065147\n// and http://www.kynd.info\nfloat easeInOutExpo(float t) {\n  t = exp2(40.*t-10.);\n  return t < 1.\n      ?      .5 * t\n      : 1. - .5 / t;\n}\n\n#define tweenEaseInOutExpo(t) easeInOutExpo(min(t, 1. -t))\n#define moove(t) tweenEaseInOutExpo(t)/10.3\n\nfloat radius = 0.65;\n#define sdCB(st,p) sdCircleBorder(st-p,radius, moove(t))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec2 st = ( fragCoord*2. -R.xy ) /R.y + vec2(0.5,.45);\n  float t = fract((iTime+2.)/3.);\n\n  vec3 CYAN = vec3(0.267,0.667,0.729),\n       YELLOW = vec3(0.949,0.898,0.216),\n       MAGENTA = vec3(0.863,0.325,0.592);\n\n  float c1 = sdCB(st,vec2(0.47,0.52));\n\n  t = fract((iTime+1.85)/3.);\n  float c2 = sdCB(st,vec2(0.42, 0.50));\n\n  t = fract((iTime+1.68)/3.);\n  float c3 = sdCB(st,vec2(0.52, 0.38));\n\n  t = fract((iTime+1.55)/3.);\n  float c4 = sdCB(st,vec2(0.38, 0.38));\n\n  t = fract((iTime+1.48)/3.);\n  float c5 = sdCB(st,vec2(0.370, 0.42));\n\n  t = fract((iTime+1.4)/3.);\n  float c6 = sdCB(st,vec2(0.47, 0.39));\n\n  fragColor.rgb = clampColor(c1+YELLOW)\n                     * clampColor(c2+CYAN)\n                     * clampColor(c3+MAGENTA)\n                     * clampColor(c4+MAGENTA)\n                     * clampColor(c5+YELLOW)\n                     * clampColor(c6+CYAN);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}