{
    "Shader": {
        "info": {
            "date": "1472782271",
            "description": "Very simple function plotter, uses alpha to deal with antialiasing",
            "flags": 0,
            "hasliked": 0,
            "id": "4tVGRz",
            "likes": 2,
            "name": "very simple plotter",
            "published": 3,
            "tags": [
                "function",
                "plot"
            ],
            "usePreview": 0,
            "username": "fernandomv3",
            "viewed": 497
        },
        "renderpass": [
            {
                "code": "//Heavily inspired by https://www.shadertoy.com/view/4d23Rm\n\n\nconst float thickness = 1.0;\nconst float scale = 0.09;\n\n//the function to plot\nfloat f(float x){\n    return x*sin(3.0*(x + 0.5*-iTime*sign(x)));\n}\n\n//apply scale\nfloat f1(float x){\n    return scale * f(x / scale);\n}\n\nvec2 gradient(float x){\n    float eps = 0.007;\n    vec2 nor = vec2(\n        2.0* eps,\n        f1(x+eps) - f1(x-eps));\n    return normalize(nor);\n}\n\n//http://imajeenyus.com/mathematics/20121112_distance_estimates/point_to_function.pdf\nfloat distanceToFunction(vec2 p){\n    float num = abs(p.y - f1(p.x));\n    vec2 grad = gradient(p.x);\n    float fpx = grad.y/grad.x;\n    float den = sqrt((fpx*fpx)+1.0);\n    return num/ den;\n}\n\n\n// @return\tAlpha for a pixel which is dist away for a given max allowed radius.\nfloat coverage(float dist, float radius){\n\tradius *= 0.5;\n\treturn 1.0 - smoothstep(floor(radius), radius + 0.01, dist /4.0 * iResolution.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    //centered coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n\tuv.x *= iResolution.x / iResolution.y;\n\n    //how far is our point from the function\n\t//float distY = abs(y - uv.y);\n    float dist = distanceToFunction(uv);\n    \n    vec3 lineColor = vec3(1.0,1.0,1.0);\n\tvec4 plot = vec4(lineColor, coverage(dist, thickness));\n\n\tvec4 backgroundColor = vec4(0.0,0.0,0.0,0.0);\n\tfragColor = mix(backgroundColor,plot,plot.a);\n    //fragColor = vec4(0.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}