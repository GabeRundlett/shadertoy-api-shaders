{
    "Shader": {
        "info": {
            "date": "1704971100",
            "description": "Lots more that could be added, but I though I'd share.",
            "flags": 32,
            "hasliked": 0,
            "id": "lfj3RK",
            "likes": 4,
            "name": "Gravity Sim 3D",
            "published": 3,
            "tags": [
                "gravity"
            ],
            "usePreview": 1,
            "username": "thesage1014",
            "viewed": 183
        },
        "renderpass": [
            {
                "code": "// Everything is in buffer A ^^\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col =  texture(iChannel0,uv).rgb;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://github.com/thesage1014\n// RESTART SIM WHEN STARTING OR CHANGING PARAMETERS ( ALT + DOWNARROW )\n#define saturate(v) clamp(v,0.,1.)\nvec3 hue2rgb(float hue){\n\thue=fract(hue);\n\treturn saturate(vec3(\n\t\tabs(hue*6.-3.)-1.,\n\t\t2.-abs(hue*6.-2.),\n\t\t2.-abs(hue*6.-4.)\n\t));\n}\nmat3 rotx (float angle) {\n\treturn mat3(\n\t\t1.,0,0,\n\t\t0.,cos(angle),-sin(angle),\n\t\t0.,sin(angle),cos(angle)\n\t);\n}\nmat3 roty (float angle) { \n\treturn mat3(\n\t\tcos(angle),0,sin(angle),\n\t\t0,1.,0,\n\t\t-sin(angle),0,cos(angle)\n\t);\n}\nmat3 rotz (float angle) {\n\treturn mat3(\n\t\tcos(angle),-sin(angle),0.,\n\t\tsin(angle),cos(angle),0.,\n\t\t0,0,1.\n\t);\n}\nmat3 trans (vec3 off) {\n    return mat3(\n    off.x,0,0,\n    0,off.y,0,\n    0,0,off.z);\n}\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r ) {// FROM iq\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    const int count = 400; // COUNT MUST BE <= RESOLUTION WIDTH\n    const float fcount = float(count);\n    const float massScale = 2.2/fcount; //BIG G\n    const float maxvel = .3;\n    const float trails = .5;\n    const float brightness = 100000.;\n    const float dotsize = .003;\n    const float spawnSize = .75;\n    const float clipDist = 6.;\n    const float boff = .0015;\n    const float boffp = .2;\n    \n    float id = floor(fragCoord.x);\n    if(iFrame < 60) { // INITIALIZE\n        if(fragCoord.y >= 2.) {\n            fragColor = vec4(0.);\n        } else {\n            if (id < fcount) {\n                // COLOR DATA STORES BODY (POS.X, POS.Y, POS.Z, MASS) at y=0\n                // COLOR DATA STORES BODY (VEL.X, VEL.Y, VEL.Z, ) at y=1\n                if(fragCoord.y >= 1.) {\n                    // VELOCITY\n                    \n                    fragColor = vec4(0);\n                    if(id == 5.) { // velocity overrides for the 2 big masses\n                        fragColor = vec4(boff,0,0,0);\n                    } else if(id == 6.) {\n                        fragColor = vec4(-boff,0,0,0);\n                    }\n                } else {\n                    // POSITION, MASS\n                    float mass = pow(1.-abs(sin(id*11.854)),2.)*2.+.1;\n                    fragColor = vec4(cos(id*3.513135)/spawnSize+.5, sin(id*7.6135135)/spawnSize+.5, sin(id*13.854)/spawnSize+.5, mass);\n                    if(id == 5.) { // position overrides for the 2 big masses\n                        //fragColor = vec4(.5,.5+boffp,.5,1000.);\n                    } else if(id == 6.) {\n                        //fragColor = vec4(.5,.5-boffp,.5,1000.);\n                    }\n                }\n            }\n            \n        }\n    } else { // EACH FRAME\n        \n        vec4 old = (texelFetch(iChannel0,ivec2(fragCoord),0));\n        fragColor = old;\n        vec2 uv = fragCoord/iResolution.xy;\n        if(fragCoord.y > 2.0) { // DRAW PREVIEW WITH REST OF BUFFER\n            fragColor *= trails;\n            mat3 roty = roty(iTime*.05);\n            \n            vec3 cam = vec3(0,0,-4.);\n            cam *= roty;\n            cam += vec3(.5,.5,.5);\n\n            vec3 rp = cam; //ray position\n            vec3 rd = normalize(vec3(uv-vec2(.5),1.)); //ray direction\n            rd *= roty;\n\n            float minDist = 10000.;\n            float nearestMass = 0.;\n            for(int i=0; i<count; i++) {\n                vec4 body = texelFetch(iChannel0,ivec2(i,0),0);\n                vec2 diff = body.xy - uv.xy;\n                float len = sdCapsule(body.xyz,cam,rd*10000.,dotsize);\n                float md = min(length(body.xyz-cam),minDist);\n                if(len < dotsize+log(body.w+1.)*.01 ) {\n                    if(md != minDist) {\n                        nearestMass = body.w;\n                    }\n                    minDist = md;\n                }\n            }\n            if(minDist<10000.) {\n                fragColor = vec4(vec3(1.-max(minDist/clipDist,.3))*hue2rgb(nearestMass*.3),0.);\n            } else {\n                fragColor += texture(iChannel1,rd.yx)*vec4(.03,.02,.04,0);\n            }\n            \n            \n        } else { // GRAVITY LOGIC\n            if( fragCoord.x < fcount ) {\n                if (fragCoord.y >= 1.) { // UPDATE VEL\n                    vec4 oldpos = (texelFetch(iChannel0,ivec2(fragCoord.x,0),0));\n                    float mass = oldpos.w;\n                    vec3 veladd = vec3(0.);\n                    for(int i=0; i<count; i++) {\n                        if( i != int(id)) {\n                            vec4 body = texelFetch(iChannel0,ivec2(i,0),0);\n                            vec3 diff = body.xyz - oldpos.xyz;\n                            float ld = length(diff);\n                            float str = clamp(0.000001*(mass*body.w*massScale)/(ld*ld)/mass,-100000000.,100000000.);\n                            veladd += diff*str;\n                        }\n                    }\n                    veladd = normalize(veladd) * clamp(length(veladd),0.,maxvel);\n                    fragColor.xyz += veladd;\n                } else { // APPLY VEL\n                    vec4 oldvel = (texelFetch(iChannel0,ivec2(fragCoord.x,1.),0));\n                    fragColor.xyz += oldvel.xyz;\n                }\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}