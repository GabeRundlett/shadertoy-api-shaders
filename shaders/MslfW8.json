{
    "Shader": {
        "info": {
            "date": "1496066186",
            "description": "mouse input!\n \nThere is an identity to utilize explicitly:\nmod(a*b,b)=b*fract(a)=b*(a-floor(a))\nalmost mod(a,b), merely scaling a, EVADES division by (b=0) of  mod(a,b)=a-b*floor(a/b)",
            "flags": 0,
            "hasliked": 0,
            "id": "MslfW8",
            "likes": 0,
            "name": "mod(a*b,b)=b*fract(a)",
            "published": 3,
            "tags": [
                "mod",
                "derivative",
                "fract",
                "shortcut",
                "identity",
                "seesaw",
                "divisionby0"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 655
        },
        "renderpass": [
            {
                "code": "//self: https://www.shadertoy.com/view/MslfW8\n\n/*\nsurely unsure how mod(a,b), gets parsed, \nassuming sub-optimally, most likely just mod(a,b)=a-b*floor(a/b). \nThere is a simple explicit case to utilize that does NOT divide!:\nmod(a*b,b)=b*(a-floor(a));\n\n//a*b = your x or time input, easily scaled outside of mod(a*b,b), \n//  b = the first derivative == highest point.\n*/\n\n//return mod(a*b,b)== seesaw with period of [a] & 1st derivative of [b]\nfloat modaab(float a,float b){return b*(a-floor(a));/*return mod(a*b,b);*/}\n//a case where an expensive modulo is replaced by something simpler.\n\n#define zoom 10.\n#define frame(u) (u-.5*iResolution.xy)/iResolution.y\nvoid mainImage(out vec4 O,in vec2 U){vec2 u=frame(U)*zoom;\n vec2 m=frame(iMouse.xy)*zoom;\n float d;\n if(m.x!=0.){//to include iMouse.x                    \n  d=modaab(u.x/m.x,m.y);\n }else d=m.y*.5;//feels arbitiary, looks good for this one.\n d=smoothstep(-.01,.01,d-u.y);//draw linear graph.\n\n u=fract(u);\n u.x*=.5;//better dichromacy contrast.\n O=vec4(d,u,1.);}\n \n/*\nfor type int, the modulo operation is\na%b=a-(b*floor(a/b)); \nand this has the problem of dividing by b, \nso b==0 is an undefined case.\n\nfor powers of n>1, you can do a bitwise AND \nwith a string of bits that is \"filled with 1\"\nx % pow(2,n) == x & (pow(2,n)-1)\nx %  2 == x & 1\nx %  4 == x & 3\nx %  8 == x & 7\nx % 16 == x & 15\nx % 32 == x & 31\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}