{
    "Shader": {
        "info": {
            "date": "1638031880",
            "description": "This is a bit of a monster, could definitely be improved",
            "flags": 0,
            "hasliked": 0,
            "id": "stKGRV",
            "likes": 7,
            "name": "Grid Segments",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 302
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n\nfloat thc(float a, float b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nfloat ths(float a, float b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat h21 (float a, float b, float sc) {\n    a = mod(a, sc); b = mod(b, sc);\n    return fract(sin(dot(vec2(a, b), vec2(12.9898, 78.233)))*43758.5453123);\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec2 pnt(vec2 ipos, float sc) {\n    float h = h21(ipos.x, ipos.y, sc);\n    float t = iTime + 10. * h;\n    float k = 1.5 +  h;\n    return 0.4 * vec2(thc(4. * (1.-h), 100. + k * t), \n                      ths(4. * h, 100. + (1.-k) * t));\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b * cos(6.28318*(c*t+d) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/ iResolution.y;\n    uv += 2. + 0.03 * iTime;\n    \n    //float a = atan(uv.y, uv.x);\n    float r = length(uv); \n    //uv = vec2(a/pi,log(r) - 0.2 * iTime);\n    \n    float c = 100.;\n    // cant scale dynamically because sc used in h21 (bad)\n    float sc = 6.;\n    vec2 fpos = fract(sc * uv) - 0.;\n    vec2 ipos = floor(sc * uv) + 0.5;    \n    \n    // maybe this bit's not necessary, doesn't do much\n    float time = -0.1 * iTime;\n    float flT = floor(time);\n    float frT = fract(time);\n    \n    // Generate values for each corner of uv (sloppy)\n    // (transitions between different noise sets)\n    float l  = h21(flT + ipos.x + 1., flT + ipos.y,      c * sc);\n    float t  = h21(flT + ipos.x,      flT + ipos.y + 1., c * sc);\n    float tl = h21(flT + ipos.x + 1., flT + ipos.y + 1., c * sc);\n    float id = h21(flT + ipos.x,      flT + ipos.y,      c * sc);\n   \n    float l2  = h21(flT + ipos.x + 2., flT + ipos.y + 1., c * sc);\n    float t2  = h21(flT + ipos.x + 1., flT + ipos.y + 2., c * sc);\n    float tl2 = h21(flT + ipos.x + 2., flT + ipos.y + 2., c * sc);\n    float id2 = h21(flT + ipos.x + 1., flT + ipos.y + 1., c * sc);\n\n    l = mix(l, l2, frT);\n    t = mix(t, t2, frT);\n    tl = mix(tl, tl2, frT);\n    id = mix(id, id2, frT);\n\n    // Smooth fpos completely, so v noise looks better\n    vec2 sfpos = fpos * fpos * (3. - 2. * fpos);\n    \n    // Remove me maybe\n    sfpos = pow(sfpos,vec2(3.));\n    \n    // Smooth the grid uvs so different uvs meet continuously on the edges\n    fpos = mix(fpos, fpos * fpos * (3. - 2. * fpos), 0.5 * thc(4., iTime));\n    \n    // Box lerp between the corner values to get a radius value for this pixel\n    float v = l  * sfpos.x      * (1.-sfpos.y)\n     \t    + t  * (1.-sfpos.x) * sfpos.y\n     \t    + tl * sfpos.x      * sfpos.y\n      \t    + id * (1.-sfpos.x) * (1.-sfpos.y);\n    \n    // Warp again (maybe)\n    //fpos = mix(fpos, fpos * fpos * (3. - 2. * fpos), 0.5 * ths(4., iTime));\n    \n    // shift fpos correctly\n    fpos -= 0.5;\n    \n    // moving points for each cell\n    vec2 p = pnt(ipos, sc);\n\n    vec2 pl = -vec2(1.,0.) + pnt(ipos - vec2(1.,0.), sc);\n    vec2 pr =  vec2(1.,0.) + pnt(ipos + vec2(1.,0.), sc);\n    vec2 pt = -vec2(0.,1.) + pnt(ipos - vec2(0.,1.), sc);\n    vec2 pb =  vec2(0.,1.) + pnt(ipos + vec2(0.,1.), sc);\n       \n    // draw half of each segment for each cell\n    float dl = sdSegment(fpos, p, pl);\n    float dr = sdSegment(fpos, p, pr);\n    float dt = sdSegment(fpos, p, pt);\n    float db = sdSegment(fpos, p, pb);\n        \n    // Outline line segments, scale with v\n    // (m = thickness of line, n = thickness of outline)\n    float m = 0.05 + 0.07 * v;\n    float n = 0.5;\n    float sl = step(dl, m)-step(dl, n * m);\n    float sr = step(dr, m)-step(dr, n * m);\n    float st = step(dt, m)-step(dt, n * m);\n    float sb = step(db, m)-step(db, n * m);\n    \n    float s = max(max(sl, sr), max(st, sb));\n    \n    // Make v noise appear/disappear\n    v *= thc(4., 5. * v + 0.1 * h21(uv) + iTime);\n    \n    // Segment colors, changes if over v noise\n    vec3 col = pal(0.6 * v, vec3(0.), vec3(1.), vec3(1.),  \n                  (0.4 + pow(v,10.)) * v * vec3(0.,0.33,0.66));\n    col *= smoothstep(-0.5, 0.5, 0.5 - v) * s;\n    \n    // Color of v noise\n    vec3 vcol = 1.2 * (1.-s) * v * pal(r + 0.2 * iTime, vec3(1.), vec3(1.), vec3(1.), vec3(0.,0.33,0.66));\n    //vcol *= 2. * ths(2., r + 0.4 * iTime);\n    \n    col += vcol;\n    \n    //col += 1.2 * v + 0.2 * s * pal(0.6 * v , vec3(1.), vec3(1.), vec3(1.),  vec3(0.,0.33,0.66));\n    //col = -v + 1.-col;\n    \n    fragColor = vec4(col, 1.); //vec4(v);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}