{
    "Shader": {
        "info": {
            "date": "1638569009",
            "description": "thats boring, i was expecting more... buuuuut i can still fork and implement proper rules, can be reseted on space now",
            "flags": 48,
            "hasliked": 0,
            "id": "ft3Szr",
            "likes": 3,
            "name": "Game of Distortion",
            "published": 3,
            "tags": [
                "meh"
            ],
            "usePreview": 0,
            "username": "Arrangemonk",
            "viewed": 276
        },
        "renderpass": [
            {
                "code": "vec3 fbm8(sampler2D tex,in vec2 uv)\n{    \nvec3 result = texture(tex,uv).rgb;\nresult += texture(tex,uv*  2.).rgb /  2.;\nresult += texture(tex,uv*  4.).rgb /  4.;\nresult += texture(tex,uv*  8.).rgb /  8.;\nresult += texture(tex,uv* 16.).rgb / 16.;\nresult += texture(tex,uv* 32.).rgb / 32.;\nresult += texture(tex,uv* 64.).rgb / 64.;\nresult += texture(tex,uv* 128.).rgb / 128.;\nreturn result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * .01;\n    \n      vec3 gol = normalize(fbm8(iChannel0,uv));\n\n\n      //fragColor = vec4(gol,1);\n      fragColor = texture(iChannel1,gol);\n      //fragColor = texture(iChannel1,uv*0.1 + 0.25* gol.z *gol.xy);\n  }",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2  fragCoord )\n{\n    ivec2 uv = ivec2(fragCoord);\n\n    if(iFrame < 10 || texelFetch(iChannel2, ivec2(32,0),0).x > 0.){\n    fragColor = texture(iChannel0,fragCoord / iResolution.xy);\n    }\n    else\n    {\n     fragColor = texelFetch(iChannel1,uv,0);\n     \n     ivec3 diff = ivec3(1,0,-1);\n     \n     vec4 sum =  texelFetch(iChannel1,uv + diff.xx,0);\n          sum += texelFetch(iChannel1,uv + diff.xy,0);\n          sum += texelFetch(iChannel1,uv + diff.xz,0);\n          sum += texelFetch(iChannel1,uv + diff.yx,0);\n          sum += texelFetch(iChannel1,uv + diff.yz,0);\n          sum += texelFetch(iChannel1,uv + diff.zx,0);\n          sum += texelFetch(iChannel1,uv + diff.zy,0);\n          sum += texelFetch(iChannel1,uv + diff.zz,0);\n \n     float amount = .01;\n     float minl = 2.;\n     float maxl = 3.;\n     \n     if(sum.x < minl || maxl < sum.x)\n         fragColor.x =  max(0.,fragColor.x -amount);\n     else\n         fragColor.x = min(1.,fragColor.x + amount);\n\n         \n      if(sum.y <minl || maxl < sum.y)\n         fragColor.y =  max(0.,fragColor.y -amount);\n     else\n         fragColor.y = min(1.,fragColor.y + amount);\n\n         \n     if(sum.z < minl ||  maxl < sum.z)\n         fragColor.z =  max(0.,fragColor.z -amount);\n     else\n         fragColor.z = min(1.,fragColor.z + amount);\n\n\n     \n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}