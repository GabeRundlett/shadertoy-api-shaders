{
    "Shader": {
        "info": {
            "date": "1550090902",
            "description": "testing lossy image compression left is uncompressed right is compressed, compresses 8 pixels into 3 by finding a cosine wave for each color channel that best matches the pixels",
            "flags": 32,
            "hasliked": 0,
            "id": "3sBGWc",
            "likes": 2,
            "name": "testing lossy image compression",
            "published": 3,
            "tags": [
                "testing",
                "compression",
                "image",
                "lossy"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 522
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 u)\n{\n    vec2 res = min(VIDEO_SIZE,iResolution.xy),\n        cuv = (u/iResolution.xy)*res;\n    float sx;\n    if (iMouse.w > 0.) sx = (iMouse.x/iResolution.x)*res.x;\n    else sx = res.x*.5;\n\n    if (sx > cuv.x) fragColor = texelFetch(iChannel1,ivec2(cuv),0);\n    else {\n        ivec2 fuv = ivec2(floor(cuv.x/float(COMPRESSION))*float(COMPRESSION),cuv.y);\n        float x = (floor(cuv.x)-float(fuv.x))/float(COMPRESSION-1);\n       \tvec4 cr = texelFetch(iChannel0,fuv,0),\n            cg = texelFetch(iChannel0,fuv+ivec2(1,0),0),\n            cb = texelFetch(iChannel0,fuv+ivec2(2,0),0);\n     \tfragColor = vec4(cr.z+cos(cr.x+x*cr.y)*cr.w,\n                         cg.z+cos(cg.x+x*cg.y)*cg.w,\n                         cb.z+cos(cb.x+x*cb.y)*cb.w,1); \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 u )\n{\n    fragColor = texelFetch(iChannel0,ivec2(u),0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define COMPRESSION 8\n#define QUALITY 150\n#define PRECISION1 .175\n#define PRECISION2 .183\n\n#define PI 3.141592653\n\n#define VIDEO_WIDTH 640.\n#define VIDEO_HEIGHT 360.\n#define VIDEO_SIZE vec2(VIDEO_WIDTH,VIDEO_HEIGHT)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec4 hash(vec4 a) {\n\treturn fract(abs(sin(a.ywxz*766.345)+cos(normalize(a)*4972.92855))*2048.97435+abs(a.wxyz)*.2735);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 u)\n{\n    int cc = int(u.x)%COMPRESSION;\n    if (cc > 2 || u.x > VIDEO_WIDTH || u.y > VIDEO_HEIGHT) {\n     \tfragColor = vec4(0);\n        return;\n    }\n    \n    vec2 fu = vec2(floor(u.x/float(COMPRESSION))*float(COMPRESSION),u.y);\n    float samples[COMPRESSION];\n    for (int i = 0; i < COMPRESSION; i++) samples[i] = texelFetch(iChannel0,ivec2(fu+vec2(i,0)),0)[cc];\n    \n    int hi = 4;\n    vec4 c = vec4(0.,3.5,.5,.5),h;\n    for (int i = 0; i < QUALITY; i++) {\n        if (hi > 3) {\n         \th = floor(hash((u.xyyx+float(i))*vec4(.3,.22,1.44,1.42))*(float(COMPRESSION)-1e-4))/float(COMPRESSION-1);\n            hi = 0;\n        }\n        float pscale = 1.-float(i)/float(QUALITY*3/2),\n            x = h[hi++],\n            s = samples[int(x*(float(COMPRESSION)-1e-4))],\n            x1 = c.x+x*c.y,\n            x2 = cos(x1),\n            e = c.z+x2*c.w,\n            d2 = s-e, d2p = d2*pscale*PRECISION2,\n            d1 = d2*c.w*sign(cos(x1+PI*.5))*pscale*PRECISION1;\n        c += vec4(d1,d1*x,d2p,d2p*x2);\n    }\n    \n    fragColor = c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}