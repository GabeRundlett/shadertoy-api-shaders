{
    "Shader": {
        "info": {
            "date": "1670830589",
            "description": "Day 30 of Codevember 2022\n\nInstagram : https://www.instagram.com/etidouu/\nTwitter : https://twitter.com/EPEtidou",
            "flags": 0,
            "hasliked": 0,
            "id": "ds2SRw",
            "likes": 3,
            "name": "Codevember #30 The End",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "polygon",
                "codevember"
            ],
            "usePreview": 0,
            "username": "Etidou",
            "viewed": 221
        },
        "renderpass": [
            {
                "code": "//Inspiration : https://www.shadertoy.com/view/4dXGRM\n\n#define FOV_MORPH 1\n\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nvec3 rot(vec3 p, float f) {\n\tfloat s = sin(f);\n\tfloat c = cos(f);\n\tp.xy *= mat2(c, -s, s, c);\n\tp.yz *= mat2(c, -s, s, c);\n\treturn p;\n}\n\n\nvec3 trans(vec3 p, out float rotout) {\n\tp.zx += iTime*2.0;\n\n\tvec3 b = vec3(4.);\n\tvec3 rep = floor(p/b);\n\n\tp = mod(p,b)-.5*b;\n\t\n\trotout = iTime*1.88 + (rep.x+rep.z+rep.y)*.3;\n\tp = rot(p, rotout);\n\treturn p;\t\n}\n\nfloat scene(vec3 p) {\n\tfloat dummy;\n\treturn sdOctahedron(trans(p,dummy), 0.75);\n}\n\n\nvec3 normal(vec3 p, float d) {\n\tvec3 e = vec3(0.04,.0,.0);\n\treturn normalize(vec3(\n\t\tscene(p+e.xyy)-d,\n\t\tscene(p+e.yxy)-d,\n\t\tscene(p+e.yyx)-d));\n\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 xy = fragCoord.xy / iResolution.xy - vec2(0.5,0.5);\n\txy.y *= -iResolution.y / iResolution.x;\n\n\tfloat time = iTime*0.5;\n\tvec3 ro = 1.5*normalize(vec3(cos(time),cos(time)*1.2,sin(time)));\n    vec3 eyed = normalize(vec3(0.6667, 0.0549, 0.0549) - ro);\n    vec3 ud = normalize(cross(vec3(0.0,1.0,0.0), eyed));\n    vec3 vd = normalize(cross(eyed,ud));\n\n#if FOV_MORPH\n\tfloat fov = 3.14 * 0.8 + sin(time*1.334)*1.45;\n#else\n\tfloat fov = 3.14 * 0.7;\n#endif\n\t\n\tfloat f = fov * length(xy);\n\tvec3 rd = normalize(normalize(xy.x*ud + xy.y*vd) + (1.0/tan(f))*eyed);\n\n\n\tvec3 p = ro + rd;\n\n\tfloat dall,d;\n\tfor(int i = 0; i < 64; i++) {\n\t\td = scene(p);\n\t\tif(d < 0.06) break;\n\t\tp += d*rd;\n\t\tdall += d;\n\t}\n\n\tvec3 bg = normalize(p).zzz + .1;\n\n\tif(d < 0.06) {\n\t\tvec3 n = normal(p,d); \n\t\tvec3 col = vec3(dot(vec3(0.0,0.0,1.0), n));\n\t\tfloat objrot;\n\t\tvec3 objp = trans(p,objrot);\n\t\tvec3 objn = abs(rot(n,objrot));\n\t\t\n\t\tvec2 uv = \n\t\t\t(objn.y > 0.707) ? vec2(objp.zx) : \n\t\t\t(objn.x > 0.707) ? vec2(objp.zy) :\n\t\t\t\t\t\t\t   vec2(objp.xy) ;\n\t\tvec3 hl = smoothstep(0.2, 1.0, col);\n\n\t\tcol = col + hl*.4;\n\t\tfloat fog = clamp(dall/mix(90.0,40.0,((rd.z+1.0)*0.5)), 0.0, 1.0);\n\n\t\tfragColor = vec4(mix(abs(n + 0.2).xyz, bg, fog),1.0);\n\t}\n\telse {\n\t\tfragColor = vec4(bg, 1.0);\n\t}\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}