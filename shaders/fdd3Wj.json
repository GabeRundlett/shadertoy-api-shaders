{
    "Shader": {
        "info": {
            "date": "1630655207",
            "description": "Wanna get back on the groove of things",
            "flags": 0,
            "hasliked": 0,
            "id": "fdd3Wj",
            "likes": 8,
            "name": "Cubic Waves",
            "published": 3,
            "tags": [
                "raymarch",
                "sdf",
                "cube",
                "sin",
                "trig"
            ],
            "usePreview": 0,
            "username": "lambmeow",
            "viewed": 315
        },
        "renderpass": [
            {
                "code": "\nmat2 rot(float f)\n{\n\tfloat c = cos(f), s = sin(f);\n\treturn mat2(c ,-s,s,c);\n}\n\nfloat box(vec3 p, vec3 b)\n{\n\tvec3 q = abs(p) - b;\n\treturn length(max(q,0.)) + min(max(q.x, max(q.y, q.z)), 0.);\n}\nfloat scene(vec3 p) \n{\n\tfloat oz = p.z;\n\t\n\tp.z = mod(p.z + 1., 1.) - 1.;\n\tfloat res = 1000.;\n\t\n\tfor(int i = 0; i < 20; i++)\n\t{\n\t\tfloat offset = iTime +  float(i) + oz ;\n\t\tvec3 rotp = p;\n\t\trotp.xy *= rot(iTime*0.5 + float(i) - oz );\n\t\t//rotp.xz *= rot (time + oz) * 0.001;\n\t\tres  = min( res, box(rotp - vec3(sin(offset) , cos(offset), 0),vec3(0.45 *abs(sin(iTime - sin(float(i) * 0.05) * 2.) + cos(iTime *0.55) *0.5)))); \n\t}\n\treturn res;\n}\n\nvec4 ray(vec3 ro, vec3 rd)\n{\n\tfloat dist = 0., closest = 255.;\n\tfor(int i = 0; i < 255; i ++)\n\t{\n\t\tvec3 pos = ro + rd * dist;\n\t\tfloat len = scene(pos);\n\t\t\n\t\tdist += len;\n\t\tclosest = min(len, closest);\n\t\t\n\t\tif ( len < 0.001 || dist > 100.)\n\t\t\tbreak;\n\t}\n\treturn vec4(ro + rd * dist, dist);\n}\n\nvec3 norm(vec3 p)\n{\n\tvec2 eps = vec2(0.01, 0);\n\treturn normalize(scene(p) - vec3(scene(p - eps.xyy) , scene(p - eps.yxy), scene(p - eps.yyx)));\n}\n\nvec4 color(vec4 res, vec3 lp, vec2 u)\n{\n\tvec3 n = norm(res.xyz), p = res.xyz;\n\tvec3 ldir = lp - p, nldir = normalize(ldir);\n\n\tvec3 amb = vec3(0, .5, 1) * u.x;\n\t\t\n\tif(res.w > 12.) \n\t return vec4(amb , 1.);\n\t \n\tvec3 diff = vec3(0.7, .4, 1) * dot(nldir, n);\n\t\n\tvec3 glow = vec3(0, .3, 0) * (1.- res.w/10.);\n\tvec3 color = clamp(diff, 0.,1.) + clamp(amb,0.,1.) * 0.1;\n\t\n\tcolor = mix(color, amb, res.w/10.);\n\treturn vec4(color , 1); //vec4(dot(n, normalize(ldir))) * (1/(1 + dot(ldir, ldir)));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 r = iResolution.xy, u = (2. *  fragCoord - r)/r.y; \n\t\n\tvec3 ro = vec3(0, 0, -10. + iTime * 4.), rd = normalize(vec3(u, 2.));\n\t\n\tfragColor = color(ray(ro,rd), ro, u + 2.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}