{
    "Shader": {
        "info": {
            "date": "1429195573",
            "description": "Terrain Experiment 1",
            "flags": 0,
            "hasliked": 0,
            "id": "XlBGzw",
            "likes": 15,
            "name": "Terrain Experiment 1",
            "published": 3,
            "tags": [
                "terrainexperiment1"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 1603
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// secant method : doc => http://sirkan.iit.bme.hu/~szirmay/egdisfinal3.pdf\n// and here => http://www.ericrisser.com/stuff/FasterReliefMapingUsingTheSecantMethod.pdf\n// implementation here based from nimitz\n    \nvec3 effect(vec2 v) \n{\n   \tvec2 p = v/4.;\n    \n\tvec3 col = textureLod(iChannel1, p, 0.0).rgb;\n    \n\treturn col;\n}\n\nvec4 displacement(vec3 p)\n{\n    vec3 col = effect(p.xz);\n    \n    col = clamp(col, vec3(0), vec3(1.));\n    \n    float dist = dot(col,vec3(0.15));\n    \n    return vec4(dist, col * normalize(vec3(1.,0.5,0.2)));\n}\n\nfloat obox( vec3 p, vec3 b ){ return length(max(abs(p)-b,0.0));}\n\nvec4 map(vec3 p)\n{\n   \tfloat scale = 2.;\n    float dist = 0.;\n    \n    float x = 6.;\n    float z = 6.;\n    \n    vec4 disp = displacement(p);\n        \n    float y = 1. - smoothstep(0., 1., disp.x) * scale;\n    \n    if ( p.y >= 0. ) dist = obox(p, vec3(x,1.-y,z));\n    else dist = obox(p, vec3(x,1.,z));\n\t\n    return vec4(dist, disp.yzw);\n}\n\nvec3 nor( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.01, 0., 0. );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n////////MAIN///////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime*0.1;\n    float cam_a = time; // angle z\n    \n    float cam_e = 0.2; // elevation\n    float cam_d = 2.; // distance to origin axis\n    \n    vec3 camUp=vec3(0,1,0);//Change camere up vector here\n  \tvec3 camView=vec3(0,0,0); //Change camere view here\n  \tfloat li = 0.6; // light intensity\n    float prec = 0.00001; // ray marching precision\n    float maxd = 50.; // ray marching distance max\n    float refl_i = 0.7; // reflexion intensity\n    float bii = 0.35; // bright init intensity\n    float marchPrecision = 0.1; // ray marching tolerance precision\n    \n    vec2 uv = fragCoord.xy / iResolution.xy * 2. -1.;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); //\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    float d0 = 0.,d1=d0;\n    vec3 p=ro;\n    float s=prec;\n    vec3 ray,cubeRay,m;\n    \n    float sgn=sign(map(p).x*.1);\n    \n    float pas = 0.1;\n    \n    for(int i=0;i<100;i++)\n    {      \n        if(s<prec||s>maxd||sign(s)!=sgn) break;\n        s=map(p).x*.3;\n        d1=d0;\n        d0+=(log(s)+s)*pas*sgn;\n        p=ro+rd*d0;\n    }\n    if (sign(s) != sgn) \n    {\n        m=vec3(d1,0.,d0);\n        p=ro+rd*m.x;\n        sgn=sign(map(p).x);\n        for(int i=0;i<20;i++)\n        { \n            if (abs(d0)<1e-8)break;\n            m.y=(m.x+m.z)*.5;\n            p=ro+rd*m.y;\n            d0=map(p).x*.1;\n            d0*sgn<0.?m.z=m.y:m.x=m.y;\n        }\n    \td0=m.y;\n    }\n    if (d0<maxd)\n    {\n        vec2 e = vec2(-1., 1.)*0.005; \n    \tvec3 p = ro+rd*d0;\n        vec3 n = nor(p);\n        \n        b=li;\n        \n        ray = reflect(rd, n);\n\t\tcubeRay = texture(iChannel0, ray).rgb * refl_i;\n        \n        col = cubeRay + pow(b, 15.);\n        \n       \t// lighting        \n        float occ = calcAO( p, n );\n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n        float dif = clamp( dot( n, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( n, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-p.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ray.y );\n        float fre = pow( clamp(1.0+dot(n,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ray, lig ), 0.0, 1.0 ),16.0);\n        \n        vec3 brdf = vec3(0.0);\n        brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n\t\tbrdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n        brdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        brdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tbrdf += 0.02;\n\t\tcol = col*brdf;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*d0*d0 ) );\n        \n       \tcol = mix(col, map(p).yzw, 0.5);\n    }\n    else\n    {\n        b+=0.1;\n        col = texture(iChannel0, rd).rgb;\n    }\n    \n\tfragColor.rgb = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}