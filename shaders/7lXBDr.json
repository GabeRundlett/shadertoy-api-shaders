{
    "Shader": {
        "info": {
            "date": "1650717644",
            "description": "An infinite procedural grid shader.",
            "flags": 0,
            "hasliked": 0,
            "id": "7lXBDr",
            "likes": 2,
            "name": "Procedural Infinite Grid",
            "published": 3,
            "tags": [
                "grid",
                "proceduralgrid",
                "infinitegrid"
            ],
            "usePreview": 0,
            "username": "VPaltoDance",
            "viewed": 476
        },
        "renderpass": [
            {
                "code": "#define GRID_THICKNESS 1.0\n#define GRID_SCALE 80.0\n\n#define GRID_COLOR vec4(0.8, 0.8, 0.8, 1.0)\n#define BACKGROUND_COLOR vec4(0.1, 0.1, 0.1, 1.0)\n\n#define GRID_WOBBLE 1\n\n\n// Calculating grid bsed on uv coordinates\nfloat calculateGrid(in vec2 uv, float thickness)\n{\n    float gridX = float(fract(uv.x) <= thickness);\n    float gridY = float(fract(uv.y) <= thickness);\n\n    return max(gridX, gridY);\n}\n\n// Calculate simple wobble amount for demonstration\n#ifdef GRID_WOBBLE\n    vec2 calculateWobble(float multiplier, float freq, float scale)\n    {\n        return multiplier * vec2(sin(iTime * freq)) / scale;\n    }\n#endif\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 screenCoord = fragCoord / GRID_SCALE;\n    \n    // Apply wobble if needed\n    #ifdef GRID_WOBBLE\n        screenCoord += calculateWobble(2000.0, 0.1, GRID_SCALE);\n    #endif\n    \n    // Scale the thickness appropriately to match the grid coordinate system scale\n    float scaledThickness = GRID_THICKNESS / GRID_SCALE;\n    float grid = calculateGrid(screenCoord, scaledThickness);\n    \n    // Applying different colors for grid and background\n    vec4 finalColor = mix(BACKGROUND_COLOR, GRID_COLOR, grid);\n    \n    // Output to screen\n    fragColor = finalColor;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}