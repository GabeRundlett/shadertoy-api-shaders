{
    "Shader": {
        "info": {
            "date": "1665912722",
            "description": "Closed-path generalization of \"Hilbertian Saltation\"",
            "flags": 0,
            "hasliked": 0,
            "id": "DdXGWn",
            "likes": 17,
            "name": "Looping Hilbertian Saltation",
            "published": 3,
            "tags": [
                "hilbert",
                "jump",
                "path"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 275
        },
        "renderpass": [
            {
                "code": "// \"Looping Hilbertian Saltation\" by dr2 - 2022\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n#define AA  0   // (= 0/1) optional antialiasing\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nvec3 HsvToRgb (vec3 c);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat ShowIntPZ (vec2 q, vec2 cBox, float mxChar, float val);\n\nconst int nBall = 41;\nvec3 bPos[nBall], ltDir, ltDirS, qHit;\nvec2 gId, gIdL;\nfloat tCur, dstFar, gSize, bSize, hInd, vDirI, vDirO, cHt, cRad, bRad, vFac, bAng[nBall], iQuad;\nint idObj, ballNum;\nconst float pi = 3.1415927;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\n// Hilbert indexing - without bit ops (from \"Hilbert's Path\")\n\nint LoBit (int x)\n{\n  return x - 2 * (x / 2);\n}\n\nint FlipLoBit (int x)\n{\n  return 4 * (x / 2) - x + 1;\n}\n\nconst int maxBits = 7;\n\nint HilXy2D (ivec2 p, int n)\n{\n  ivec2 r;\n  int j, td, d;\n  d = 0;\n  td = 1;\n  j = n / 2;\n  for (int b = 0; b < maxBits - 1; b ++) {\n    td *= 2;\n    j /= 2;\n    if (j == 1) break;\n  }\n  j = n / 2;\n  for (int b = 0; b < maxBits - 1; b ++) {\n    r = ivec2 (LoBit (p.x / td), LoBit (p.y / td));\n    d += j * j * ((r.y == 0) ? 3 * r.x : FlipLoBit (3 * r.x));\n    if (r.y == 0) {\n      if (r.x == 1) p = n - 1 - p;\n      p = p.yx;\n    }\n    td /= 2;\n    j /= 2;\n    if (j == 0) break;\n  }\n  return d;\n}\n\nivec2 HilD2Xy (int d, int n)\n{\n  ivec2 p, r;\n  int j, td;\n  td = d;\n  p = ivec2 (0);\n  j = 1;\n  for (int b = 0; b < maxBits; b ++) {\n    r.x = LoBit (td / 2);\n    r.y = LoBit ((r.x == 0) ? td : FlipLoBit (td));\n    if (r.y == 0) {\n      if (r.x == 1) p = j - 1 - p;\n      p = p.yx;\n    }\n    p += j * r;\n    td /= 4;\n    j *= 2;\n    if (j == n) break;\n  }\n  return p;\n}\n\n#define HT(v) (2.5 - 2. * Maxv2 (abs (v - bSize + 0.5)) / bSize)\n\nvoid SetGParm ()\n{\n  vec2 dq, gIdLL;\n  int ic, ib;\n  ib = int (bSize);\n  gIdL = gId;\n  iQuad = 0.;\n  if (gIdL.x >= bSize) {\n    gIdL.x -= bSize;\n    iQuad += 1.;\n  }\n  if (gIdL.y >= bSize) {\n    gIdL.y -= bSize;\n    iQuad += 2.;\n  }\n  gIdLL = gIdL;\n  if (iQuad < 2.) gIdLL.y = bSize - 1. - gIdLL.y;\n  ic = HilXy2D (ivec2 (gIdLL), ib);\n  hInd = float (ic);\n  cHt = HT (gId);\n  if (ic > 0) {\n    dq = gIdLL - vec2 (HilD2Xy (ic - 1, ib));\n    vDirI = (dq.y == 0.) ? ((dq.x > 0.) ? 0. : 2.) : ((dq.y > 0.) ? 1. : 3.);\n  } else {\n    vDirI = (abs (iQuad - 1.) == 1.) ? 1. : 0.;\n  }\n  if (ic < ib * ib - 1) {\n    dq = vec2 (HilD2Xy (ic + 1, ib)) - gIdLL;\n    vDirO = (dq.y == 0.) ? ((dq.x > 0.) ? 0. : 2.) : ((dq.y > 0.) ? 1. : 3.);\n  } else {\n    vDirO = (abs (iQuad - 1.) == 1.) ? 0. : 3.;\n  }\n}\n\nfloat GObjDf (vec3 p)\n{\n  vec3 q, qq;\n  vec2 b, r;\n  float dMin, d;\n  dMin = dstFar;\n  r = vec2 (0.06, 0.05);\n  if (Minv2 (gIdL) >= 0. && Maxv2 (gIdL) < bSize) {\n    q = p;\n    if (abs (iQuad - 2.) == 1.) q.x -= bSize;\n    if (iQuad >= 2.) q.z -= bSize;\n    q.xz -= gSize * (gIdL + 0.5);\n    if (iQuad < 2.) q.z *= -1.;\n    qq = q;\n    qq.y -= r.y + 0.02;\n    q.y -= 0.5 * cHt;\n    d = PrRoundCylDf (vec3 (abs (q.xz) - 0.6 * cRad, q.y), 0.07 * cRad, 0.01, 0.5 * cHt);\n    DMINQ (1);\n    q.y -= 0.5 * cHt + 0.1;\n    d = PrRoundCylDf (q.xzy, cRad - 0.02, 0.02, 0.1);\n    DMINQ (2);\n    if (vDirI >= 0.) {\n      q = qq;\n      if (vDirI > 0.) q.xz = vec2 (-1., 1.) * ((vDirI == 2.) ? q.xz : q.zx *\n         sign (vDirI - 2.));\n      d = max (PrRoundBox2Df (q.zy, r, 0.02), q.x + cRad);\n      DMINQ (3);\n    }\n    if (vDirO >= 0.) {\n      q = qq;\n      if (vDirO > 0.) q.xz = vec2 (-1., 1.) * ((vDirO == 2.) ? q.xz : q.zx *\n         sign (vDirO - 2.));\n      d = max (PrRoundBox2Df (q.zy, r, 0.02), - q.x + cRad);\n      DMINQ (3);\n    }\n    q = qq;\n    if (vDirI == vDirO) {\n      if (vDirI == 0. || vDirI == 2.) q.xz = q.zx;\n      d = PrRoundBox2Df (q.xy, r, 0.02);\n    } else if (vDirI != vDirO) {\n      d = max (abs (q.x) - cRad, abs (q.z) - cRad);\n      b = vec2 (1.);\n      if (vDirI == 1. && vDirO == 0. || vDirI == 2. && vDirO == 3.) b.x = -1.;\n      else if (vDirI == 0. && vDirO == 1. || vDirI == 3. && vDirO == 2.) b.y = -1.;\n      else if (vDirI == 2. && vDirO == 1. || vDirI == 3. && vDirO == 0.) b = vec2 (-1.);\n      q.xz += cRad * b;\n      d = max (d, PrRoundBox2Df (vec2 (length (q.xz) - cRad, q.y), r, 0.02));\n    }\n    DMINQ (4);\n  }\n  return dMin;\n}\n\nfloat GObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, rdi;\n  vec2 gIdP;\n  float dHit, d, eps;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  rdi.xz = 1. / rd.xz;\n  gIdP = vec2 (-999.);\n  eps = 0.005;\n  dHit = eps;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + dHit * rd;\n    gId = floor (p.xz / gSize);\n    if (gId != gIdP) {\n      gIdP = gId;\n      SetGParm ();\n    }\n    d = GObjDf (p);\n    dHit += min (d, eps + max (0., Minv2 ((gSize * (gId + step (0., rd.xz)) - p.xz) * rdi.xz)));\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 GObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = GObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvoid BPos ()\n{\n  vec3 bp[2];\n  vec2 bs;\n  float tc, t, bb;\n  bb = bSize * bSize;\n  for (int k = VAR_ZERO; k < nBall; k ++) {\n    tc = vFac * tCur + (float (k) / float (nBall)) * 4. * bb;\n    for (int j = 0; j < 2; j ++) {\n      t = mod (tc + float (j), 4. * bb);\n      bs = sign (vec2 (abs (t - 2. * bb) - bb, t - 2. * bb));\n      bp[j].xz = bs * (vec2 (HilD2Xy (int (mod ((sign (0.5 - (abs (bs.x - bs.y)))) *\n         mod (t, bb), bb)), int (bSize))) + 0.5) + bSize;\n      bp[j].y = HT (bp[j].xz - 0.5);\n    }\n    t = clamp (1.3 * fract (tc) - 0.15, 0., 1.);\n    bPos[k] = mix (bp[0], bp[1], t);\n    bPos[k].y += bRad + 0.2 + 3. * t * (1. - t);\n  }\n}\n\nvec4 BallHit (vec3 ro, vec3 rd)\n{\n  vec3 u, vn;\n  float dMin, d, b, w;\n  dMin = dstFar;\n  for (int k = VAR_ZERO; k < nBall; k ++) {\n    u = ro - bPos[k];\n    b = dot (rd, u);\n    w = b * b - dot (u, u) + bRad * bRad;\n    if (w > 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) {\n        dMin = d;\n        vn = (u + d * rd) / bRad;\n        ballNum = k;\n      }\n    }\n  }\n  return vec4 (dMin, vn);\n} \n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  q = p;\n  q -= vec3 (vec2 (bSize), -0.1).xzy;\n  d = PrRoundBoxDf (q, vec3 (vec2 (bSize), 0.1).xzy - 0.01, 0.01);\n  DMINQ (5);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat BlkHitSil (vec3 ro, vec3 rd, vec3 sz)\n{\n  vec3 v, tm, tp;\n  float dn, df;\n  v = ro / rd;\n  tp = sz / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  return (df > 0. && dn < df) ? dn : dstFar;\n}\n\nvec3 BallCol (int k)\n{\n  return HsvToRgb (vec3 (fract (4. * float (k) / float (nBall)), 0.8, 0.9));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, db4;\n  vec3 col, vn, qHitG, bsSize;\n  vec2 b;\n  float dstObj, dstObjG, db, s, pFac, hi, nDotL;\n  int idObjG;\n  vFac = 0.5;\n  bRad = 0.2;\n  bsSize = vec3 (bSize + 0.1, 1.8, bSize + 0.1);\n  db = BlkHitSil (ro - vec3 (bsSize.xz, 1.6).xzy, rd, bsSize);\n  if (db < dstFar) {\n    dstObjG = GObjRay (ro, rd);\n    idObjG = idObj;\n    qHitG = qHit;\n  } else dstObjG = db;\n  BPos ();\n  if (db < dstFar) db4 = BallHit (ro, rd);\n  else db4.x = dstFar;\n  dstObj = (db < dstFar) ? ObjRay (ro, rd) : dstFar;\n  if (dstObjG < min (dstObj, dstFar)) {\n    dstObj = dstObjG;\n    idObj = idObjG;\n    qHit = qHitG;\n  }\n  if (min (dstObj, db4.x) < dstFar) {\n    if (db4.x < dstObj) {\n      dstObj = db4.x;\n      idObj = 6 + ballNum;\n    }\n    ro += dstObj * rd;\n    vn = (dstObj == dstObjG) ? GObjNf (ro) : ((idObj < 6) ? ObjNf (ro) : db4.yzw);\n    nDotL = max (dot (vn, ltDir), 0.);\n    pFac = 16.;\n    if (idObj == 1) {\n      col4 = vec4 (0.9, 0.9, 0.95, 0.1) * (0.85 + 0.15 * sin (32. * pi * qHit.y));\n    } else if (idObj == 2) {\n      col4 = vec4 (0.9, 0.9, 0.9, 0.1);\n      b = qHit.xz;\n      if (length (b) < cRad - 0.01) {\n        for (int k = VAR_ZERO; k < nBall; k ++) {\n          s = length (ro.xz - bPos[k].xz);\n          if (s < bRad) {\n            col4.rgb = mix (BallCol (k), col4.rgb, 0.2 + 0.8 * smoothstep (0.5, 1., s /\n               (bRad - 0.15 * min (bPos[k].y - (cHt + bRad + 0.2), 0.75))));\n            break;\n          }\n        }\n      } else {\n        hi = hInd + iQuad * bSize * bSize;\n        if (iQuad < 2.) {\n          b.y *= -1.;\n          hi = 2. * bSize * bSize - 1. - hi; \n        }\n        b = Rot2D (b, - 0.5 * pi * tCur);\n        col4 = mix (0.9 * col4, vec4 (1., 1., 1., -1.), smoothstep (0.05, 0.1,\n           ShowIntPZ (vec2 (-0.8 * fract (3. * atan (b.y, - b.x) / (2. * pi)), qHit.y + 0.07),\n           0.7 * vec2 (0.5, 0.2), 3., hi + 1.)));\n      }\n    } else if (idObj == 3) {\n      b = qHit.xz;\n    } else if (idObj == 4) {\n      if (vDirI == vDirO) {\n        b = qHit.zx;\n        if (vDirI >= 2.) b.x = - b.x;\n      } else {\n        b = vec2 (atan (qHit.z, qHit.x) / pi + 1. / pFac, length (qHit.xz) - cRad);\n        if (vDirI == 0. && vDirO == 3. || vDirI == 1. && vDirO == 0.) b.x = - b.x;\n        else if (vDirI == 2. && vDirO == 1. || vDirI == 3. && vDirO == 2.) b.x = - b.x;\n      }\n    } else if (idObj == 5) {\n      col4 = vec4 (0.4, 0.2, 0.1, 0.1) * (0.8 + 0.2 * smoothstep (0., 0.02,\n         0.5 - Maxv2 (abs (fract (ro.xz) - 0.5)))) * (0.7 + 0.3 * smoothstep (0.02, 0.05,\n         length (abs (fract (ro.xz) - 0.5) - 0.6 * cRad) - 0.07 * cRad));\n    } else if (idObj >= 6) {\n      col4 = vec4 (BallCol (idObj - 6), 0.15);\n      nDotL *= nDotL;\n    }\n    if (idObj == 3 || idObj == 4) {\n      col4 = vec4 (0.8, 0.85, 0.8, 0.1);\n      s = (iQuad < 2.) ? pFac * (b.x + vFac * tCur) + 1. : pFac * (b.x - vFac * tCur);\n      if (abs (b.y) < 0.05) col4 = mix (0.9 * col4, vec4 (1., 1., 1., -1.), \n         smoothstep (-0.05, 0.05, sin (pi * s)));\n    }\n    if (col4.a >= 0.) col = col4.rgb * (0.3 + 0.7 * nDotL) +\n       col4.a * (pow (max (dot (ltDir, reflect (rd, vn)), 0.), 64.) +\n       pow (max (dot (ltDirS, reflect (rd, vn)), 0.), 64.));\n    else col = col4.rgb * (0.5 + 0.5 * max (dot (-rd, vn), 0.));\n  } else {\n    col = vec3 (0.8, 0.8, 1.) * (0.2 + 0.2 * (rd.y + 1.) * (rd.y + 1.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = -0.45 * pi;\n  el = -0.2 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  el = clamp (el, -0.5 * pi, -0.01 * pi);\n  vuMat = StdVuMat (el, az);\n  gSize = 1.;\n  bSize = 4.;\n  cRad = 1. / pi;\n  ro = vuMat * vec3 (0., 0.2, -4. * bSize);\n  ro.xz += bSize;\n  zmFac = 3.5;\n  dstFar = 120.;\n  ltDir = normalize (vec3 (0.7, 1., -1.));\n  ltDirS = ltDir;\n  ltDirS.xz = Rot2D (ltDirS.xz, 0.2 * pi);\n  ltDir = vuMat * ltDir;\n  ltDirS = vuMat * ltDirS;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1.,\n     0., 1.), c.y);\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat DigSeg (vec2 q)\n{\n  return (1. - smoothstep (0.13, 0.17, abs (q.x))) *\n     (1. - smoothstep (0.5, 0.57, abs (q.y)));\n}\n\n#define DSG(q) k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q)\n\nfloat ShowDig (vec2 q, int iv)\n{\n  float d;\n  int k, kk;\n  const vec2 vp = vec2 (0.5, 0.5), vm = vec2 (-0.5, 0.5), vo = vec2 (1., 0.);\n  if (iv == -1) k = 8;\n  else if (iv < 2) k = (iv == 0) ? 119 : 36;\n  else if (iv < 4) k = (iv == 2) ? 93 : 109;\n  else if (iv < 6) k = (iv == 4) ? 46 : 107;\n  else if (iv < 8) k = (iv == 6) ? 122 : 37;\n  else             k = (iv == 8) ? 127 : 47;\n  q = (q - 0.5) * vec2 (1.8, 2.3);\n  d = 0.;\n  kk = k;\n  DSG (q.yx - vo);  DSG (q.xy - vp);  DSG (q.xy - vm);  DSG (q.yx);\n  DSG (q.xy + vm);  DSG (q.xy + vp);  DSG (q.yx + vo);\n  return d;\n}\n\nfloat ShowIntPZ (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (Minv2 (q) >= 0. && Maxv2 (q) < 1.) {\n    q.x *= mxChar;\n    nDig = mxChar;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = max (val, 0.) / pow (10., mxChar - idChar - 1.);\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}