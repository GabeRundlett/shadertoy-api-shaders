{
    "Shader": {
        "info": {
            "date": "1569027159",
            "description": "Black body spectral density visualizer, click mouse to change the temperature.",
            "flags": 0,
            "hasliked": 0,
            "id": "tsd3zf",
            "likes": 2,
            "name": "Black body spectral density",
            "published": 3,
            "tags": [
                "blackbodyspectra"
            ],
            "usePreview": 0,
            "username": "NirT",
            "viewed": 386
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926535\n//897932384626433832795\n#define EX 2.7182818284\n\nfloat blackBodySpectralDensity(float lambda, float T) {\n    \n\tfloat h = 6.626E-34;// J·s   [Planck's constant]\n\tfloat k = 1.381E-23;// J·K-1   [Boltzmann's constant]\n\tfloat c = 3.0E8;// m·s-1   [speed of light]\n    //U(λ,T) = 8πhcλ^-5 /  ( e^hc/λkT-1 )\n    return 8.0*PI*h*c/(pow(lambda, 5.0)*(exp(h*c/(lambda*k*T))-1.0));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 iUV = iMouse.xy/iResolution.xy;\n\t\n\t//get the colour\n\tfloat xCol = uv.x*2.0;//(uv.x - (iTime / 8.0)) * 3.0;\n\txCol = mod(xCol, 3.0);\n    \n    float lambda = (2.0 - uv.x)*400E-9;\t//λ \\belongto 400~800nm, is the wavelength, in metres\n    float T = iUV.x*10000.0+1900.0;\t//K  is the temperature in Kelvin (add 273 degrees to Celcius temperatures to get Kelvin)\n    float BBSpectralDensity = blackBodySpectralDensity(lambda, T);\n    \n    float lambda_max = 2.897771955185172E-3/T;\t//Wien's displacement law\n    float spectralDensity_max = blackBodySpectralDensity(lambda_max, T);\n    float densityRatio = BBSpectralDensity/spectralDensity_max;\n    \n    //texture(iChannel0, coord).rgb;\n    \n\tvec3 horColour = vec3(1.0, 0.0, 0.0);\n    if(uv.y > densityRatio) {\n        horColour = 2.*normalize(vec3(blackBodySpectralDensity(700.0E-9, T), \n                         blackBodySpectralDensity(546.1E-9, T), \n                         blackBodySpectralDensity(435.8E-9, T)));\n    }\n    else {\n\t\thorColour = vec3(0.25, 0.25, 0.25);\n        if (xCol < 1.0) {\n\n            horColour.r += 1.0 - xCol;\n            horColour.g += xCol;\n        }\n        else if (xCol < 2.0) {\n\n            xCol -= 1.0;\n            horColour.g += 1.0 - xCol;\n            horColour.b += xCol;\n        }\n        else {\n\n            xCol -= 2.0;\n            horColour.b += 1.0 - xCol;\n            horColour.r += xCol;\n        }\n    }\n    \n\t//background lines\n\t//float backValue = 1.0;\n\t//float aspect = iResolution.x / iResolution.y;\n\t//if (mod(uv.y * 100.0, 1.0) > 0.75 || mod(uv.x * 100.0 * aspect, 1.0) > 0.75) {\n\t\t\n\t//\tbackValue = 1.15;\t\n\t//}\n\t\n\tvec3 backLines  = vec3(1.0);//vec3(backValue);\n\t\n    \n\t//main beam\n\tuv = (2.0 * uv) - 1.0;\n\tfloat beamWidth = abs(3.0 / (10.0)*5.0);// * uv.y));\n\tvec3 horBeam = vec3(beamWidth);\t//(backLines * horBeam) * \n    \n\t//fragColor = vec4((horColour*densityRatio), 1.0);\n    fragColor = vec4(((backLines * horBeam) * horColour*densityRatio), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}