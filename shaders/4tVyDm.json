{
    "Shader": {
        "info": {
            "date": "1536823485",
            "description": "Inspired by a plane journey over England.\n\nShould have done American fields, I assume they have a neat grid system, would have been way easier.",
            "flags": 32,
            "hasliked": 0,
            "id": "4tVyDm",
            "likes": 4,
            "name": "Voronoi Fields",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "_polymath",
            "viewed": 669
        },
        "renderpass": [
            {
                "code": "#define CAM vec3(0., 4., -3.)\n#define CAMROT rotation3dX(-0.65)\n#define FOV .6\n#define FIELDOFFSET vec2(0.5, 0.4)\n#define NEPS 0.001\n#define HEDGEH 0.08\n#define HEDGEW 0.001\n#define HEDGEM 0.7\n#define HEDGEL 0.002\n\nstruct sres {\n    bool hedge;\n    float d;\n};\n\nsres scene(vec3 cam, vec3 ray) {\n\tfloat gDist, hedgeDist;\n    float dist2ground = -cam.y;\n\n    dist2ground += cos(cam.z * .3);\n    dist2ground += cos((cam.x - iTime * DRIFTV * DRIFTZOOM)* .1) * .6;\n\n    gDist = dist2ground / ray.y * 0.1;\n    hedgeDist = HEDGEM *\n        texture(iChannel1, cam.xz / FIELDZOOM + FIELDOFFSET).b * .1\n        - HEDGEW;\n    \n    cam.x -= 50. * iTime * DRIFTV * DRIFTZOOM;\n    hedgeDist -= HEDGEL * texture(iChannel2, cam * .6).x;\n\n    if (gDist > HEDGEH)\n        gDist += hedgeDist - HEDGEH;\n    else\n        gDist = min(gDist, hedgeDist);\n\n    return sres(hedgeDist <= gDist, gDist);\n}\n\nvec4 sky(vec3 ray) {\n    return vec4(.6, .9, 1., .1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.yy;\n\n    // fragColor = texture(iChannel1, uv); return;\n    \n    vec3 ray = normalize(vec3(uv, FOV)) * CAMROT;\n    if (ray.y > 0.) {\n        fragColor = sky(ray);\n        return;\n    }\n    vec3 cam = CAM;\n    bool hedge;\n    \n    sres res; int i;\n    for (i = 0; i < 500; ++i) {\n      \tres = scene(cam, ray);\n        cam += ray * res.d;\n        if (res.d < 0.0001) break;\n    }\n    /* if (i == 200) {\n        fragColor = sky(ray);\n        return;\n    } */\n    // fragColor = vec4(fract(cam), 1.); return;\n    \n    vec2 o = vec2(0.001, 0.);\n    vec3 normal = normalize(vec3(\n        scene(cam + o.xyy, ray).d - scene(cam - o.xyy, ray).d,\n        scene(cam + o.yxy, ray).d - scene(cam - o.yxy, ray).d,\n        scene(cam + o.yyx, ray).d - scene(cam - o.yyx, ray).d\n    ));\n    float l = dot(normal, normalize(vec3(-1., 6., -4.))) * 0.4;\n   \n    if (res.hedge) {\n        fragColor = vec4(0., .4, 0., 1.);\n        fragColor += fragColor * l;\n    } else {\n    \tfragColor = texture(iChannel1, cam.xz / FIELDZOOM + FIELDOFFSET)\n                  * l * 3.;\n        fragColor.b = 0.;\n    }\n    float f = 2. / (cam.z + 4.);\n    fragColor = fragColor * f\n        + (1. - f) * vec4(.6, .9, 1., .1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\nfloat x = iTime * DRIFTV + 1000.0;\n\n    float minD = 100000.0, secD = 10000.0, minI;\n    for (float i = 0.; i < NUM; ++i) {\n        float driftL = texture(iChannel0, vec2(0.1, i) / NUM).x + 1.;\n        vec2 xy = vec2(\n        \t\tmod(x, driftL),\n        \t\ttexture(iChannel0, vec2(0.4, i) / NUM).x)\n            \t\t* DRIFTZOOM - 0.5,\n            to = xy - uv;\n        float d = dot(to,to);\n        if (d < minD) {\n            minI = i;\n            secD = minD;\n            minD = d;\n        } else if (d < secD) {\n            secD = d;\n        }\n    }\n  \n    fragColor = vec4(\n        texture(iChannel0, vec2(0.2, minI / NUM)).x,\n                0.6 + minI * 0.4 / NUM,\n                0.,\n                1.) *\n        (.8 + .5 * texture(iChannel0, vec2(uv.x - x * DRIFTZOOM, uv.y)).x);\n    fragColor.b = abs(sqrt(secD) - sqrt(minD)) * 10.;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// so this is from https://github.com/dmnsgn/glsl-rotate\n#define DRIFTV -0.01\n#define DRIFTZOOM 2.\n#define FIELDZOOM 50.\n#define NUM 800.0\n/* \n\nCopyright (C) 2018 the internet and Damien Seguin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\nmat2 rotation2d(float angle) {\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\n\treturn mat2(\n\t\tc, -s,\n\t\ts, c\n\t);\n}\n\nmat3 rotation3dX(float angle) {\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\n\treturn mat3(\n\t\t1.0, 0.0, 0.0,\n\t\t0.0, c, s,\n\t\t0.0, -s, c\n\t);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}