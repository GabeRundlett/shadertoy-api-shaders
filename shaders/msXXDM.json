{
    "Shader": {
        "info": {
            "date": "1669608828",
            "description": "rainbow mandelbrot set with varying zc component from -10 to 10",
            "flags": 0,
            "hasliked": 0,
            "id": "msXXDM",
            "likes": 2,
            "name": "mandelbrot with varying zc",
            "published": 3,
            "tags": [
                "mandelbrot",
                "rainbow"
            ],
            "usePreview": 0,
            "username": "janpitokiala",
            "viewed": 92
        },
        "renderpass": [
            {
                "code": "vec2 square(inout vec2 num) {\n    num = vec2(num.x*num.x-num.y*num.y,2.*num.x*num.y);\n    return num;\n}\nvec2 mul(in vec2 one, in vec2 two) {\n    vec2 result = vec2(one.x*two.x-one.y*two.y,one.x*two.y+one.y*two.x);\n    return result;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = 5.*uv.x - 2.5;\n    uv.y = 3.*uv.y - 1.5;\n    vec2 z = vec2(0.,0.);\n    vec3 col = vec3(0.,0.,0.);\n    for(int i = 0;i < 255; i = i + 1) {\n        z = square(z) + uv + mul(z, uv)*vec2(iTime-10.);\n        if (length(z) > 5.) {\n            float tint = float(i)/16.0;\n            col = tint*sin(iTime+vec3(0.,2.,4.));\n            break;\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}