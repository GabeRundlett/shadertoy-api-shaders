{
    "Shader": {
        "info": {
            "date": "1663014934",
            "description": "Yet another fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "slcfWH",
            "likes": 18,
            "name": "Fractal mosaic 17",
            "published": 3,
            "tags": [
                "fractal",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 551
        },
        "renderpass": [
            {
                "code": "vec2 f1(vec2 a){\n    return\n        fract(a)\n        //min(abs(.5-fract(a.yx)),abs(.5-fract(a+.5)))\n        //fract(a-fract(-a*2.+.5)/2.)\n        //fract(a-floor(a.y*2.+.5)/2.)\n    ;\n}\n\nmat2 rotate2D(float r) {\n    return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\n\n#define fmod(x,y) mod(floor(x),y)\nvec2 triangle_wave(vec2 a){\n    vec2 a2 = //change this constant to get other interesting patterns\n        vec2(1.,0.5)\n        //vec2(-2.,.5+mod(floor(a.x),2.))\n        //vec2(1.5,0.5)\n        \n        //vec2(1.5,0.)\n        //vec2(1.25,1.75)\n        //vec2(abs(mod(a.x-.5,2.)-1.),abs(mod(a.y-.5,2.)-1.))\n    ,\n    \n    a1 = a+a2;\n    //a1 = a*sign(a-a2.yx)+a2;\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n    return abs(f1((a1)*(a2.x+a2.y))-.5);\n}\nconst float scale = 1.5;\n\n\nvoid transform(inout vec2 uv, inout vec2 t2){\n\n        //if(mod(uv.x,1.)>.5){uv.x=uv.x*2.;}\n\n        \n        //uv += vec2(pow(floor(-uv.x*fmod(uv.y,3.)),2.),pow(floor(-uv.y*fmod(uv.y,3.)),2.))/2.;\n\n        \n        //uv.x -= abs(fract(uv.x)-.5)/2.;\n        //uv += floor(uv)/2.;\n        \n        uv =\n            (uv+t2)/scale\n            //abs(-.5+uv+t2)/scale\n        ;\n        //col.x = max(max(length(abs(fract(uv)-.5)-t2),abs(uv.y-uv.x))/3.,col.x);\n\n        //uv = abs(fract(vec2(uv+vec2(.5,1.5))*3.)-.5)/3.;\n        \n        //uv *= r;\n        \n        //uv *= sign(uv-uv.yx);\n        //if(col.y>col.x)\n        t2 = triangle_wave(uv+.5);\n        \n        //uv += (distance(floor(uv),round(uv)));\n\n        //uv_last = abs(uv-uv_last);\n        //if(col.y>col.x)\n        uv =\n            (t2-triangle_wave(uv.yx))\n            //(t2-triangle_wave(uv.yx)/2.)\n            //(t2-max(triangle_wave(uv.yx),triangle_wave(uv+.5)/2.))\n            //(t2-triangle_wave(uv.yx))/(1.5-mod(floor(uv.y),2.)/2.)\n            //t2*length(uv)-triangle_wave(uv.yx)\n        ;\n        //if(length(uv_last) > 1.0) uv_last = vec2(0.);\n        //uv2 =\n        //    (t2-triangle_wave(uv2.yx/1.5));\n        \n        //if(uv.y>uv.x) uv.x += .5;\n\n        \n        //uv *= (1.+uv.x);\n        //t2 *= (1.+uv.x);\n        \n        //uv.x -= floor(uv.x-uv.y)*1.125;\n        \n        //uv.x -= max(uv.y,uv.x);\n        \n        //uv.y += abs(fract(uv.y)-.5)/2.;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 1.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += iTime/t1/24.;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec2 t2 = vec2(0.);\n    vec3 col1 = col;\n    vec2 uv_last = vec2(0.);\n    \n    mat2 r = rotate2D(0.785398);\n    vec2 uv2 = uv;\n    \n    for(int k = 0; k < 9; k++){\n        \n        float warp_scale = 8./3.14159;\n        vec2 uv1 = uv;\n        //if(k>3) uv1 += iTime/8.;\n        vec2 warp =\n            vec2(0.)\n            //vec2(sin((uv1.x)*warp_scale),cos((uv1.y)*warp_scale))/warp_scale\n            //1.-t2.yx*t2.yx\n            //uv1.yx/2.\n        ;\n        \n        vec2 uv_1 =\n            uv+warp.yx\n            //uv/2.+warp.yx\n        ,\n        t2_1=\n            t2+warp.yx\n        ;\n        vec3 col_1 = col;\n        transform(uv,t2);\n        transform(uv_1,t2_1);\n        \n        uv_1 =\n            uv\n            //triangle_wave((uv_1-.5)/3.)-triangle_wave((uv_1.yx)/3.)\n        ;\n        \n        col.x =\n            max(max(length(uv_1-t2_1),abs(uv_1.y-uv_1.x))/3.,col.x);\n            //max(max(length(uv2-t2),abs(uv2.y-uv2.x))/3.,col.x);\n            //max(max(length(uv_last-t2),abs(uv.y-uv.x))/3.,col.x);\n            //max(max(length(vec2(pow(uv.x,2.),pow(uv.y,2.))-sqrt(t2)),abs(uv.y-uv.x))/3.,col.x);\n            //max(max(length(uv*sign(uv)-t2),abs(uv.y-uv.x*sign(uv.y)))/3.,col.x);\n            //max(max(length(uv),length(t2))/3.,col.x);\n            //max(max(length(uv-t2.x),length(t2))/3.,col.x);\n\n            //max(max(length(abs(uv)-abs(t2)),abs(uv.y-uv.x))/3.,col.x);\n            //max(max(length(t2*max(t2,uv)),abs(uv.y-uv.x))/3.,col.x);\n            //max(max(length(abs(uv)-abs(t2)),abs(abs(uv.y)-abs(uv.x)))/3.,col.x);\n            //max(max(length(uv-t2.yx),abs(uv.y-uv.x))/3.,col.x);\n            //max(max(min(length(uv-t2),length(uv-t2.yx)),abs(uv.y-uv.x))/3.,col.x);\n        col =\n            abs(col-(1.-col.x));\n            //abs(abs(col-1.+col.x)-col);\n        col1 =\n            abs(col1-col-1.).yzx;\n            //abs(abs(col1.yzx-col-1.)-col1);\n        //if(uv.y>uv.x) uv /= 1.5;\n        //if(k%3 == 0) {uv = -uv;}\n        //if(uv.x<uv.y) uv.x -= .5;\n\n\n    }\n    fragColor = vec4(col1/2.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fmod(float a, float b){\n    //a += pow(2.,mod(floor(a*2.),4.))/2.;\n    \n    /*\n    for(float i = 1.; i < mod(floor(a/2.),8.); i++){\n        //a += floor(pow(2.,b));\n        a += mod(floor(a*2.),b)*i;\n    }\n    */\n    \n    //divide by powers of 2 to get interesting rhythms\n    float a1 = (a);\n    //a /= 1. + mod(floor(a1/32.),2.);\n    //a /= 1. + mod(floor(a1/16.),2.);\n    //a /= 1. + mod(floor(a1/8.),2.);\n    //a /= 1. + mod(floor(a1/4.),2.);\n    //a /= 1. + mod(floor(a1/2.),2.);\n    return\n        mod(floor(a),b)\n        //mod(floor(a*(1.+mod(floor(a/8.*b),2.))),b)\n        //mod(floor(a+floor(a/b)),b)\n        //mod(floor(a)+floor(a+floor(a/b)),b)\n    ;\n}\n#define fmax1(x,y,z) max(fmod(x,z),fmod(y,z))\n#define fmin1(x,y,z) min(fmod(x,z),fmod(y,z))\nvec2 mainSound(int samp, float time){\n  float tempo = 1.;\n  time /= tempo;\n  float s1 =\n      4.,\n  m4 = fmax1(time+floor(time*s1),time,2.),\n  s2 = 8./(1.+m4),\n  t=\n      time/(1.+m4)\n  ,\n  m1 =\n      fmax1(t*s1,t,s2)\n  ,\n  m3 =\n      fmax1(t/(m1+.5),t,s2);\n  t /=\n      (1.+fmod(t+floor(t+.5),2.))\n  ;\n  //t += pow(2.,mod(floor(t*2.),4.))/2.;\n  t *=\n      s1*s1*(1.+fmod(floor(t*s1*2.)/s1,2.))/(1.+fmod(floor(t*s1/2.)/s1,2.))\n  ;\n  \n  float m2 =\n      1. + fmod((t/s1+floor(t/s1)),s1)\n  ;\n  \n  float a=\n      8.*sqrt((1.-sqrt(fract(t/s1))))\n      //128.*pow((1.-(fract(t/s1))),2.)*.2\n  ,\n\n  nb = time*tempo*pow(2.,(m3+m2)/5.+7.);\n\n  return\n      abs(.5-vec2(fract(nb*.998),fract(nb)))*a\n      //(abs(a/16.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a))\n  ;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}