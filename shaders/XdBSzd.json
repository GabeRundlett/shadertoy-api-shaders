{
    "Shader": {
        "info": {
            "date": "1414746800",
            "description": "Another experiment in stacking texture in a 2D plane deformation.",
            "flags": 0,
            "hasliked": 0,
            "id": "XdBSzd",
            "likes": 288,
            "name": "Tissue",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "tunnel"
            ],
            "usePreview": 1,
            "username": "iq",
            "viewed": 23327
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2014 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n#define HSAMPLES 128\n#define MSAMPLES   8\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // some (not amazing) per-pixel random noise\n    vec4 ran = fract( vec4(10.5421,22.61129,30.7123,35.36291) * \n                      dot(vec2(0.0149451,0.038921),fragCoord)) - 0.5;\n\n    // pixel and time coordinates\n\tvec2  p = (2.0*(fragCoord+ran.xy)-iResolution.xy)/iResolution.y;\n    float t =  iTime + 10.0*iMouse.x/iResolution.x;\n    float dof = dot( p, p );\n\n    // supersample (time and space)\n    vec3 tot = vec3(0.0);\n    for( int j=0; j<MSAMPLES; j++ )\n    {\n        // animate\n        float msa = (float(j)+ran.z)/float(MSAMPLES);\n        float tim = t + 0.5*(1.0/24.0)*(float(j)+ran.w)/float(MSAMPLES);\n        vec2  off = vec2( 0.2*tim, 0.2*sin(tim*0.2) );\n\n        // depth of field\n\t    vec2 q = p + dof*0.04*msa*vec2(cos(15.7*msa),sin(15.7*msa));\n        // deform into cylinder \t\n        vec2 r = vec2( length(q), 0.5+0.5*atan(q.y,q.x)/3.1415927 );\n\n        // render stack of layers (intersect ray with geometry)\n        vec3 uv;\n        for( int i=0; i<HSAMPLES; i++ )\n        {\n            uv.z = (float(i)+ran.x)/float(HSAMPLES-1);\n            uv.xy = off + vec2( 0.2/(r.x*(1.0-0.6*uv.z)), r.y );\n            if( textureLod( iChannel0, uv.xy, 0.0 ).x < uv.z )\n                break;\n        }\n    \n        // shading/coloring\n        float dif = clamp( 8.0*(textureLod(iChannel0, uv.xy, 0.0).x - textureLod(iChannel0, uv.xy+vec2(0.02,0.0), 0.0).x), 0.0, 1.0 );\n        vec3  col = vec3(1.0);\n        col *= 1.0-textureLod( iChannel0, 1.0*uv.xy, 0.0 ).xyz;\n        col = mix( col*1.2, 1.5*textureLod( iChannel0, vec2(uv.x*0.4,0.1*sin(2.0*uv.y*3.1316)), 0.0 ).yzx, 1.0-0.7*col );\n        col = mix( col, vec3(0.2,0.1,0.1), 0.5-0.5*smoothstep( 0.0, 0.3, 0.3-0.8*uv.z + texture( iChannel0, 2.0*uv.xy + uv.z ).x ) );      \n        col *= 1.0-1.3*uv.z;\n        col *= 1.3-0.2*dif;        \n        col *= exp(-0.35/(0.0001+r.x));\n        \n        tot += col;\n    }\n    tot /= float(MSAMPLES);\n \n    // color correct\n    tot.x += 0.05;\n    tot = 1.05*pow( tot, vec3(0.6,1.0,1.0) );\n    \n    fragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}