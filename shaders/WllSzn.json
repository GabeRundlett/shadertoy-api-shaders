{
    "Shader": {
        "info": {
            "date": "1561816528",
            "description": "A Very Quick Number One / Yet To Add Another One\n\n(my first shadertoy here on ShaderToy, a simple edit of https://www.shadertoy.com/view/XtcGWn)",
            "flags": 0,
            "hasliked": 0,
            "id": "WllSzn",
            "likes": 10,
            "name": "experiments â€” #1",
            "published": 3,
            "tags": [
                "3d",
                "spheretracing",
                "optic",
                "tubes",
                "wire",
                "bananas",
                "bendy",
                "fiber"
            ],
            "usePreview": 0,
            "username": "szczm_",
            "viewed": 473
        },
        "renderpass": [
            {
                "code": "/**\n * Part 5 Challenges:\n * - Change the axis of motion of the cube being intersected with the sphere\n * - Rotate the intersection \n */\n\nconst int MAX_MARCHING_STEPS = 200;\nconst float MIN_DIST = 8.0;\nconst float MAX_DIST = 21.0;\nconst float EPSILON = 0.0001;\n\nconst float TUBES = 8.0;\n\nfloat tubeSDF(vec3 samplePoint, float radius)\n{\n    return length(samplePoint.yz) - radius;\n}\n\nfloat sceneSDF(vec3 p)\n{\n    vec3 pp = p;\n    \n    float angle = -iTime * 0.5 + cos(pp.x + iTime + cos(iTime * 2.0));\n        \n    p.y = cos(angle)*pp.y - sin(angle)*pp.z;\n    p.z = sin(angle)*pp.y + cos(angle)*pp.z;\n    \n    p.z -= sin(pp.x - cos(iTime * 0.3)) * 0.25;\n    \n    float scene = MAX_DIST;\n    \n    for (float i = 0.0; i < TUBES; i += 1.0)\n    {\n        float angle = 6.28 * (i / TUBES);\n        vec3 dp = vec3(0.0, sin(angle), cos(angle)) * 0.5;\n        \n        scene = min(scene, tubeSDF(p - dp, 0.2));\n    }\n    \n    return scene;\n}\n\n/**\n * Return the shortest distance from the eyepoint to the scene surface along\n * the marching direction. If no part of the surface is found between start and end,\n * return end.\n * \n * eye: the eye point, acting as the origin of the ray\n * marchingDirection: the normalized direction to march in\n * start: the starting distance away from the eye\n * end: the max distance away from the ey to march before giving up\n */\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection) * 0.9;\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}      \n\n/**\n * Return the normalized direction to march in from the eye point for a single pixel.\n * \n * fieldOfView: vertical field of view in degrees\n * size: resolution of the output image\n * fragCoord: the x,y coordinate of the pixel in the output image\n */\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n/**\n * Using the gradient of the SDF, estimate the normal on the surface at point p.\n */\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nfloat ao(vec3 eye) {\n    float depth = 0.01;\n    vec3 norma = estimateNormal(eye);\n    float accum = 0.0;\n    for (int i = 0; i < 10; i++) {\n        float dist = sceneSDF(eye + depth * norma);\n        accum += (depth - dist) / depth;\n        depth += 0.02;\n    }\n    return 1.0 - min(accum * 0.06, 1.0);\n}\n      \n\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity);    \n    \n    return color;\n}\n\nvec3 bgColor(float x)\n{\n    float bg = 0.7 + 0.3 * cos(x - iTime * 2.0) + sin(iTime * 4.0) * 0.05;\n    return vec3(0.9, 1.15, 1.4) * bg;\n}\n\n/**\n * Return a transform matrix that will transform a ray from view space\n * to world coordinates, given the eye point, the camera target, and an up vector.\n *\n * This assumes that the center of the camera is aligned with the negative z axis in\n * view space when calculating the ray marching direction. See rayDirection.\n */\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(8.0, 5.0, 7.0);\n    \n    mat4 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    \n    vec3 worldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n    \n    float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n    vec3 bgc = bgColor(worldDir.x * 30.0);\n    \n    if (dist > MAX_DIST - EPSILON) {\n        // Didn't hit anything\n        fragColor = vec4(bgc, 1.0);\n\t\treturn;\n    }\n    \n    // The closest point on the surface to the eyepoint along the view ray\n    vec3 p = eye + dist * worldDir;\n    \n    vec3 K_a = vec3(0.7, 0.65, 0.2);\n    vec3 K_d = vec3(1.0, 0.95, 0.2);\n    vec3 K_s = vec3(0.5, 0.5, 0.5);\n    float shininess = 50.0;\n    \n    vec3 color = (phongIllumination(K_a, K_d, K_s, shininess, p, eye) * 0.9 + bgColor(p.x) * 0.3) * (0.2 + 0.8 * ao(p));\n    color = mix(color, bgColor(iTime * 2.0), pow(smoothstep(5.0, 30.0, dist), 2.0));\n    \n    fragColor = vec4(pow(color, vec3(1.2)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}