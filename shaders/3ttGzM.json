{
    "Shader": {
        "info": {
            "date": "1575922873",
            "description": "Another stylized animated background.",
            "flags": 0,
            "hasliked": 0,
            "id": "3ttGzM",
            "likes": 4,
            "name": "Animated stars",
            "published": 3,
            "tags": [
                "background",
                "stylized"
            ],
            "usePreview": 0,
            "username": "vlams1",
            "viewed": 273
        },
        "renderpass": [
            {
                "code": "#define MS 8\n\nmat2 r(float a) { //Rotate\n    float s = sin(radians(a));\n    float c = cos(radians(a));\n    return mat2(c,-s,s,c);\n}\n\nvec4 stars(vec2 uv) { //Image\n    vec2 id = floor(uv+.5); //Split grid into cells\n    float d = abs(length(fract(uv)-.5)+(sin(iTime-id.x+id.y*.4)*.05-.6))-.02;\n    return mix(vec4(.3,.15,.6,1.),vec4(.6,.4,.9,1.),d < 0. ? 1. : 0.); //Return color\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) { //Main\n    vec2 uv = fragCoord/iResolution.xy*2.-1.; //Calculate UVs\n    uv.x *= iResolution.x / iResolution.y; //Extend Horizontal UVs to account for aspect ratio\n    uv *= 2.5; //Zoom\n    vec4 c; //Multisample \n    for (int i; i < MS; i++) c += stars(uv + (vec2(2,0) / iResolution.xy) * r(float(i)/float(MS)*360.));\n    fragColor = c / float(MS);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}