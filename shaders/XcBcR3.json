{
    "Shader": {
        "info": {
            "date": "1722644461",
            "description": "Music visualizer made out of Fractal 77 made by amazing ShaderToy creator 'gaz'. Gaz- I'd love to work with you on a visualizer pack for my media player I am developing. great work you done! thank you! ",
            "flags": 4,
            "hasliked": 0,
            "id": "XcBcR3",
            "likes": 1,
            "name": "Fork Fractal 77 NikolaErce 454",
            "published": 3,
            "tags": [
                "fractal",
                "sound",
                "fft",
                "music",
                "visualizer"
            ],
            "usePreview": 0,
            "username": "NikolaErceg",
            "viewed": 259
        },
        "renderpass": [
            {
                "code": "// Fork of \"Fractal 77_gaz\" by gaz. https://shadertoy.com/view/fdy3WG\n// 2024-02-18 19:18:54\n\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nvec3 pow3(vec3 x, int y) {\n    while (y>0) {\n        x*=x;\n        y=y-1;\n    }\n    return x;\n}\nfloat fft(float x) {\n    return texelFetch( iChannel0, ivec2(128.*x,0), 0 ).x; \n }\n    \nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n         \n    float bass  = texelFetch( iChannel0, ivec2(1,0), 0 ).x; \n    bass = clamp((bass-0.5)*2.0,0.0,1.0);\n   \n    vec3 p=vec3(0),r=iResolution,\n    d=normalize(vec3((bass*2.+C-.5*r.xy)/r.y,1));  \n    for(\n        float i=0.,g=0.,e,s;\n        ++i<99.;\n        O.rgb+=mix(vec3(1) ,H(log(s)),.7)*.08*exp(-i*i*e))\n    {\n       \n        p=g*d;\n        p.z-=.6;\n        p=R(p,normalize(vec3(1,2,3)),iTime*.3);\n        s=4.;\n        for(int j=0;j++<8;) {\n            p=abs(p),p=p.x<p.y?p.zxy:p.zyx,\n            s*=e=1.8/min(dot(p,p),1.3),\n            p=p*e-vec3(12,3,3)+2.*fft((e)/99.);\n        }\n        g+=e=length(p.xz)/s;\n  \n    }\n    O=vec4(pow3(O.rgb,2),1.);\n }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}