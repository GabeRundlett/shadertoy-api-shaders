{
    "Shader": {
        "info": {
            "date": "1543181698",
            "description": "A view through the Tardis doors",
            "flags": 0,
            "hasliked": 0,
            "id": "XlKfRK",
            "likes": 3,
            "name": "Tardis Doors",
            "published": 3,
            "tags": [
                "3d",
                "tardis"
            ],
            "usePreview": 0,
            "username": "_polymath",
            "viewed": 548
        },
        "renderpass": [
            {
                "code": "#define MAXITERS 100\n#define LENFACTOR .99\n\n//#define ALL_INSIDE\n\n// #define GRIDCOLS\n#define LIGHTING\n// #define NORMALS\n\n#define NDELTA 0.001\n#define NDELTAX vec3(NDELTA, 0., 0.)\n#define NDELTAY vec3(0., NDELTA, 0.)\n#define NDELTAZ vec3(0., 0., NDELTA)\n\nconst float tau = acos(-1.) * 2.;\n\nstruct what {\n\tfloat z;\n\tvec3 n;\n\tvec2 uv;\n\tint material;\n};\n\nvoid addCuboid(inout what hit, vec3 ray, vec3 cam, vec3 c, vec3 r, int material) {\n\tc -= cam;\n\tfloat d;\n\tvec2 uv;\n\t// the x-normal plane\n\td = (c.x - r.x) / ray.x;\n\tuv = ray.yz * d - c.yz;\n\tif (d < hit.z && all(lessThan(abs(uv), r.yz)))\n\t\thit = what(d, vec3(-1., 0., 0.), uv, material);\n\td = (c.x + r.x) / ray.x;\n\tuv = ray.yz * d - c.yz;\n\tif (d < hit.z && all(lessThan(abs(uv), r.yz)))\n\t\thit = what(d, vec3(1., 0., 0.), uv, material);\n\t// the horizontal plane\n\td = (c.y - r.y) / ray.y;\n\tuv = ray.xz * d - c.xz;\n\tif (d < hit.z && all(lessThan(abs(uv), r.xz)))\n\t\thit = what(d, vec3(0., -1., 0.), uv, material);\n\td = (c.y + r.y) / ray.y;\n\tuv = ray.xz * d - c.xz;\n\tif (d < hit.z && all(lessThan(abs(uv), r.xz)))\n\t\thit = what(d, vec3(0., 1., 0.), uv, material);\n\t// the z-normal plane\n\td = (c.z - r.z) / ray.z;\n\tuv = ray.yx * d - c.yx;\n\tif (d < hit.z && all(lessThan(abs(uv), r.yx)))\n\t\thit = what(d, vec3(0., 0., -1.), uv, material);\n\td = (c.z + r.z) / ray.z;\n\tuv = ray.yx * d - c.yx;\n\tif (d < hit.z && all(lessThan(abs(uv), r.yx)))\n\t\thit = what(d, vec3(0., 0., 1.), uv, material);\n}\n\nwhat outside(vec3 cam, vec3 ray) { // , vec3 tardisPos, mat3 tardisRot) {\n\twhat hit;\n\tif (ray.y > 0.) {\n\t\t// skybox\n\t\thit = what(100., vec3(0.), vec2(0.), -1);\n\t} else {\n\t\t// floor\n\t\tfloat d = (-.4 - cam.y) / ray.y;\n\t\tvec2 uv = ray.xz * d + cam.xz;\n\t\thit = what(d, vec3(0., 1., 0.), uv, 0);\n\t}\n\t// tardis\n\taddCuboid(hit, ray, cam, vec3(0., -.1, 0.01), vec3(.18, .28, .175), 1);\n    // windows\n\taddCuboid(hit, ray, cam, vec3(0., .3, 0.01), vec3(.18, .1, .175), 2);\n\t// magic door\n\taddCuboid(hit, ray, cam, vec3(0., .0, -0.179), vec3(.18, .38, .01), 100);\n\t// bottom\n\taddCuboid(hit, ray, cam, vec3(0., -.4, 0.), vec3(.22, .02, .22), 1);\n\t// top\n\taddCuboid(hit, ray, cam, vec3(0., 0.41, 0.), vec3(.22, .04, .22), 1);\n\taddCuboid(hit, ray, cam, vec3(0., .44, 0.), vec3(.18, .05, .18), 1);\n\taddCuboid(hit, ray, cam, vec3(0., 0.5, 0.), vec3(.03, .09, .03), 1);\n\t// This bit is the pitched roof:\n\t// float h = min(abs(p.x), abs(p.z));\n\t// if (h < 0.18 && p.y > 0.49)\n\t//     d = min(d, (p.y - 0.543) + h * 0.3);\n\t// corner struts\n\taddCuboid(hit, ray, cam, vec3(-.18, 0., 0.18), vec3(.02, .4, .02), 1);\n\taddCuboid(hit, ray, cam, vec3(.18, 0., 0.18), vec3(.02, .4, .02), 1);\n\taddCuboid(hit, ray, cam, vec3(-.18, 0., -0.18), vec3(.02, .4, .02), 1);\n\taddCuboid(hit, ray, cam, vec3(.18, 0., -0.18), vec3(.02, .4, .02), 1);\n\t// centre struts\n\taddCuboid(hit, ray, cam, vec3(0., 0., 0.), vec3(.19, .4, .02), 1);\n\taddCuboid(hit, ray, cam, vec3(0., 0., 0.17), vec3(.02, .4, .02), 1);\n\t// horizontal struts\n\taddCuboid(hit, ray, cam, vec3(0., -0.2, 0.02), vec3(.19, .02, .18), 1);\n\taddCuboid(hit, ray, cam, vec3(0., 0., 0.02), vec3(.19, .02, .18), 1);\n\taddCuboid(hit, ray, cam, vec3(0., 0.2, 0.02), vec3(.19, .02, .18), 1);\n\treturn hit;\n}\n\nfloat scene(vec3 p) {\n\t// hexagon room\n\tfloat theta = atan(p.z, p.x),\n\t\tr = length(p.xz);\n\ttheta = fract(theta / tau * 6.) / 6. * tau + 2. * tau / 12.;\n\tp.xz = vec2(cos(theta), sin(theta)) * r;\n\t// floor\n\tfloat d = p.y + .4;\n\t// console pillar\n\td = min(d, p.z - .3);\n\t// console table\n\td = min(d, max(p.z - .8, p.y - .2 +.3 * p.z));\n\t// far wall\n\td = min(d, 3. - p.z);\n\treturn d;\n}\n\nvec3 sceneNormal(vec3 p) {\n    return normalize(vec3(\n        scene(p + NDELTAX) - scene(p - NDELTAX),\n        scene(p + NDELTAY) - scene(p - NDELTAY),\n        scene(p + NDELTAZ) - scene(p - NDELTAZ)\n ));\n}\n\nmat2 rot(float t) {\n\tfloat s = sin(t), c = cos(t);\n\treturn mat2(c, s, -s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - iResolution.xy * 0.5)\n\t\t/ min(iResolution.y, iResolution.x) * 1.;\n\tvec3 ray = normalize(vec3(uv, 1.));\n\tvec3 cam = vec3(0., .2 * cos(iTime * .823), cos(iTime * .242) * .7 - 1.);\n\tvec3 iRay = ray;\n\t\n\tmat2 r = rot(iTime);\n\tcam.xz *= r;\n\tray.xz *= r;\n\n\t// raytrace the exterior:\n\twhat hit = outside(cam, ray);\n\t\n\t#ifdef ALL_INSIDE\n\thit.material = 100;\n\t#endif\n\t\n\tif (hit.material < 0) {\n\t\tfragColor = texture(iChannel0, ray);\n\t\treturn;\n\t}\n\t\n\tif (hit.material == 0) {\n\t\tfragColor = texture(iChannel2, hit.uv);\n\t\treturn;\n\t}\n\n\t\n\tif (hit.material == 100) {\n\t\t// raymarch the interior\n\t\tvec3 pos = cam + vec3(0., 0., -1.);\n\t\t// bool hit = false;\n\t\tfor (int i = 0; i < MAXITERS; ++i) {\n\t\t\tfloat dist = scene(pos);\n\t\t\tpos += ray * dist * LENFACTOR;\n\t\t\tif (dot(dist, dist) < 0.0001) {\n\t\t\t\t// hit = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvec3 n = sceneNormal(pos);\n\t\tfloat b = dot(abs(n), vec3(.2, .6, .4));\n        fragColor = texture(iChannel3, pos.xz + pos.y)\n\t\t\t* vec4(b, b * .6, b * .2, 1.);\n\t\treturn;\n\t}\n\n\t#ifdef GRIDCOLS\n\t\tfragColor = vec4(fract(pos), 1.);\n\t#endif\n\t\n\t#ifdef NORMALS\n\t\tfragColor = vec4(sceneNormal(pos) * 0.5 + 0.5, 1.);\n\t#endif\n\t\n\t#ifdef LIGHTING\n\t\tvec3 l = vec3(.8, 1.5, -2.7);\n\t\tl.xz *= r;\n    \tfloat lit = min(0., dot(hit.n, l));\n        if (hit.material == 2) {\n            ray = reflect(ray, hit.n);\n            fragColor = texture(iChannel0, ray) * .2 + .3 + lit;\n            return;\n        }\n\t\tfragColor = vec4(.0, .0,\n\t\t   texture(iChannel1, hit.uv * 2.5).r\n\t\t\t* (.6 + lit),\n\t\t   1.);\n\t#endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}