{
    "Shader": {
        "info": {
            "date": "1675902635",
            "description": "I tried to work out how this amazing effect works, and once I got it, explain to other people too. Just watch the components gradually fade in.\n\nSee top comment for play-by-play.",
            "flags": 0,
            "hasliked": 0,
            "id": "dtSSDR",
            "likes": 40,
            "name": "Pulsing Guts analysis",
            "published": 3,
            "tags": [
                "2d",
                "organic",
                "explanation",
                "analysis",
                "pulsingguts"
            ],
            "usePreview": 0,
            "username": "SonOfLilit",
            "viewed": 2385
        },
        "renderpass": [
            {
                "code": "/*\nExplaining https://www.shadertoy.com/view/clXXDl to myself\n\nbased on the follow tweet:\nhttps://twitter.com/zozuar/status/1621229990267310081\n\nLeft to right: layer index (1, 5, 9, 13, 17, all 20)\nTop and bottom - single layers. Middle - sum of layers\n\nt=0: make nice squares from layers of cos(x) + cos(y)\nt=2.5: soften them by introducing some diagonal movement between layers\nt=5: introduce 57deg rotation between layers\nt=10: introduce 20% zoom out between layers\nt=15: fade in pulsing\nt=20: fade in radial pulse delay\nt=25: fade in edge darkening\nt=30: the full effect!\n\nBetter watched in full screen.\n\nAur\n*/\n\nmat2 rotation(float x) {\n    return mat2(cos(x), sin(x), -sin(x), cos(x));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (center is (0,0), height is 1)\n    vec2 uv = (fragCoord -\n 0.5 * iResolution.xy)/iResolution.y;\n\n    float t = iTime;\n    float fade_squares = clamp(0.4 * t, 0., 1.);\n    float fade_layer_distance = clamp(0.4 * (t - 2.5), 0., 1.);\n    float fade_layer_rotation = clamp(pow(0.2 * (t - 5.), 1.5), 0., 1.);\n    float fade_layer_zoomout = clamp(0.2 * (t - 10.), 0., 1.);\n    float fade_pulse = clamp(0.2 * (t - 15.), 0., 1.);\n    float t2 = t - 15.;\n    float fade_radial_delay = clamp(0.2 * (t - 20.), 0., 1.);\n    float fade_edge_darkening = clamp(0.2 * (t - 25.), 0., 1.);\n    \n    vec2 p = uv;\n    float d = p.x * p.x + p.y * p.y; // square of distance from center\n    float S = 12.; // zoom factor\n    mat2 m = rotation(fade_layer_rotation * 1.0); // rotates by ~57deg\n    vec2 q = vec2(0.);\n    vec2 n = vec2(0.);\n    float a = 0.;\n    float sum = 0.;\n    float layers = 4. * floor(20. / 4. * (uv.x + 1.));\n    for(float j = 0.; j < layers; j++) {\n        p *= m;\n        n *= m;\n        q = p * S\n           + fade_squares * n\n           + fade_layer_distance * j         \n           + fade_pulse * (4.*t2 + .8 * sin(4.*t2 - fade_radial_delay * 6. * d));\n        a = (cos(q.x) + cos(q.y)) * 0.2 / S;\n        sum += a;\n        n -= sin(q);\n        S *= (1.0 + 0.2 * fade_layer_zoomout);\n    }\n    float y = abs(uv.y) < 0.3 ? 0. : 1.;\n    a = y * a + (1. - y) * sum;\n    // Output to screen\n    vec3 col = vec3(4, 2, 1) * (a + 0.2) + a + a - fade_edge_darkening * d;\n    //a = fade_edge_darkening;\n    //col = vec3(a, a, a);\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}