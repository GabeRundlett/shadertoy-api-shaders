{
    "Shader": {
        "info": {
            "date": "1621563962",
            "description": "Using Buffer A to slowly decay color values from previous frames gives a neat 3D look. The effect is very sensitive to low or highly variable frame rates. But, tried my best to make the effect account for timing differences.",
            "flags": 32,
            "hasliked": 0,
            "id": "7lsGRH",
            "likes": 3,
            "name": "extrusion",
            "published": 3,
            "tags": [
                "2d",
                "buffer",
                "kinda3d"
            ],
            "usePreview": 0,
            "username": "pugbyte",
            "viewed": 300
        },
        "renderpass": [
            {
                "code": "//\n// Buffer A contains all the fun bits.\n//\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture(iChannel0, uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159\n#define TAU (2.*PI)\n\n// All components are in the range [0…1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat2 rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat rect(vec2 uv, vec2 size) {\n    float a = 1.-step(size.x, abs(uv.x));\n    float b = 1.-step(size.y, abs(uv.y));\n    return a * b;\n}\n\nfloat circle(vec2 uv, float radius) {\n    return 1.0-step(radius, length(uv));\n}\n\nfloat pipe(vec2 uv, float radius) {\n    float outer = 1.0-step(radius, length(uv));\n    float inner = 1.0-step(radius*0.2, length(uv));\n    return outer - inner;\n}\n\n// Trying to make the effect look the same regardless of framerate.\n// \n// When I tried to use iTimeDelta to compute the decay rate, the\n// rate ended up being too jittery and the effect didn't look smooth.\n// Maybe iTimeDelta's precision is just too low for what I want?\n// Maybe I have no idea what I'm doing...\n// \n// Instead, the frame rate is estimated using a rolling average\n// in Buffer B. Doing a simple (iFrame/iTime) will quickly settle\n// on a rate and then never change. However, say for example, going\n// fullscreen may result in significant frame rate drops on some\n// devices so the rolling average captures this better.\nfloat coefficientOfDecay() {\n    // This certainly is easier...\n    //float frame_rate = float(iFrame) / iTime;\n    \n    // Fetch computed frame rate from Buffer B\n    float frame_rate = texelFetch(iChannel1, ivec2(0), 0).x;\n    \n    // Works well for 144hz\n    //return 0.99;\n    \n    float d;\n    \n    if (iFrame < 1) {\n        // Avoid divide by zero.\n        d = 0.01;\n    } else {\n        // Compute decay based on what I thought looked good on a 144 hz monitor.\n        d = 144. / frame_rate * 0.01;\n    }\n    return 1.0 - clamp(d, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime-1.5;\n    vec3 col = vec3(.0);\n    \n    // Decay previous frame\n    col = texture(iChannel0, fragCoord / iResolution.xy).rgb * coefficientOfDecay();\n    \n    // Centered and aspect corrected\n    vec2 uv = (fragCoord - iResolution.xy*0.5) / iResolution.yy;\n    \n    // Move the whole world\n    vec2 uv_noise = vec2( simplex(vec2(t*.01, 0.0)), simplex(vec2(.0, t*0.01)) );\n    uv_noise -= 0.5;\n    uv_noise *= 1.4;\n    uv += mix(vec2(.0), uv_noise, sin(t)*0.5+0.5);\n    \n    // Rotate and scale the whole world\n    uv *= rot(t*0.5);\n    uv *= mix(3.0, 4.0, sin(t*0.5)*0.5+0.5);\n    \n    // Subdivide the world and recenter\n    uv = fract(uv);\n    uv -= 0.5;\n    \n    // More spin\n    uv *= rot(t);\n    \n    // Fixed size blue rect\n    //col = mix(col, vec3(0.2, sin(t)*0.2+0.5, 1.), rect(uv, vec2(0.1, 0.2)));\n    \n    // Pipe\n    float radius = mix(0.1, 0.45, sin(t*0.5)*0.5+0.5);\n    vec3 pipecolor = hsv2rgb(vec3(length(uv), .9, .9));\n    \n    col = mix(col, pipecolor, pipe(uv, radius));\n    \n    \n    // Candy cane stripes\n    #define offset(radius, phase) vec2(sin(t+phase), cos(t+phase))*radius\n    \n    uv *= rot(t*2.);\n    \n    vec3 stripecol = hsv2rgb(vec3(1.0-length(uv), .9, .9));\n    vec2 stripesize = vec2(mix(0.0, 0.02, pow(1.-radius / 0.45, 2.0) ));\n    \n    col = mix(col, stripecol, rect(uv+offset(radius, 0.),     stripesize));\n    col = mix(col, stripecol, rect(uv+offset(radius, PI*0.5), stripesize));\n    col = mix(col, stripecol, rect(uv+offset(radius, PI),     stripesize));\n    col = mix(col, stripecol, rect(uv+offset(radius, PI*1.5), stripesize));\n    col = mix(col, stripecol, rect(uv+offset(radius, PI*2.),  stripesize));\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// The MIT License\n// Copyright © 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Simplex Noise (http://en.wikipedia.org/wiki/Simplex_noise), a type of gradient noise\n// that uses N+1 vertices for random gradient interpolation instead of 2^N as in regular\n// latice based Gradient Noise.\n\n\n// Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n// Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n// Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n// Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n// Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n// Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n// Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n// Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n// Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n// Wave     Noise 2D             : https://www.shadertoy.com/view/tldSRj\n\n\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nfloat simplex(vec2 uv) {\n    float f = 0.0;\n    \n    uv *= 5.0;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    f  = 0.5000*noise( uv ); uv = m*uv;\n    f += 0.2500*noise( uv ); uv = m*uv;\n    f += 0.1250*noise( uv ); uv = m*uv;\n    f += 0.0625*noise( uv ); uv = m*uv;\n    \n    return f;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This buffer estimates framerate with a rolling average.\n// The intention is for the gradient to be smooth even if\n// there is a fair amount of jitter in the real frame rate.\n// Jitter ruins this shaders decay effect.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const int count = 60;\n\n    ivec2 c = ivec2(fragCoord);\n    \n    if (c == ivec2(0)){\n        // Compute the average frame time.\n        float sum = .0;\n        for (int i = 0; i < count; i++) {\n            sum += texelFetch(iChannel0, ivec2(i, 1), 0).x;\n        }\n        float avg = sum / float(count);\n        \n        // Store estimated frame rate.\n        if (avg <= 0.0) {\n            fragColor = vec4(144.);\n        } else {\n            fragColor = vec4(1.0 / avg);\n        }\n    } else if (c.y == 1 && c.x == iFrame % count) {\n        // Store the current frame time\n        fragColor = vec4(iTimeDelta);\n    } else {\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}