{
    "Shader": {
        "info": {
            "date": "1551218020",
            "description": "Experimental Quake 1 room render.\nUse WASD to move and Shift for extra speed.\nYouTube clip here: https://youtu.be/lvlTjrrVzAg\n\nIf you came here you should check out adx's \"Quake / Introduction\" shader: https://www.shadertoy.com/view/lsKfWd",
            "flags": 48,
            "hasliked": 0,
            "id": "MdGXDK",
            "likes": 19,
            "name": "QTest",
            "published": 3,
            "tags": [
                "quake"
            ],
            "usePreview": 1,
            "username": "P_Malin",
            "viewed": 1737
        },
        "renderpass": [
            {
                "code": "// QTest\n// by @P_Malin\n\n// Experimental Quake 1 room render\n\n// Raytracing a small section of a Quake 1 map\n// Lighting is using Lightmaps calculated in Buffer C\n\n// YouTube clip here: https://youtu.be/lvlTjrrVzAg\n\n// I made this a long time ago.\n// I was also trying to implement player movement but it had bugs. \n// I'll probably never get around to fixing it now as I forgot how the shader works so I just hacked in Fly camera.\n\n// use WASD and Shift for extra speed\n\n// If you came here you should check out adx's \"Quake / Introduction\" shader: https://www.shadertoy.com/view/lsKfWd\n\n\n// Image Shader: Final composition and textures\n\n// TODO:\n// Movement / collision?\n// Texture pass\n//    Text for easy etc.?\n\n\n#define PIXELATE_TEXTURES\t\t\t1\n#define QUANTIZE_TEXTURES\t\t\t1\n#define QUANTIZE_IMAGE\t\t\t\t1\n\n// Debug stuff\n#define SHOW_CAMERA_COORDS \t\t\t0\n#define SHOW_LIGHTS\t\t\t\t\t0\n#define NO_DIFFUSE_TEXTURES\t\t\t0\n#define FULLBRIGHT\t\t\t\t\t0\n\n#define LIGHTING_TYPE_LIGHTMAP\t\t0\n#define LIGHTING_TYPE_PER_PIXEL \t1\n\n#define LIGHTING_TYPE\t\t\t\tLIGHTING_TYPE_LIGHTMAP\n\n//#define HIGHLIGHT_TEXTURE\t\t\t6u\n\n#define iChannelData \t\tiChannel0\n#define iChannelState \t\tiChannel1\n#define iChannelLightmap \tiChannel2\n\n\n#define kFarClip 10000000.0\n\nvec4 ReadData( vec2 vPos )\n{\n    return texture( iChannel0, (vPos + 0.5) / iChannelResolution[0].xy );\n}\n\nvec3 Quantize( vec3 x )\n{\n    return floor( x * 32.0 ) / 32.0;\n}\n\n//////////////////////////////////////////////////////////////\n// Texture Helpers\n//////////////////////////////////////////////////////////////\n\nfloat hash(float p)\n{\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\nfloat hash2D(vec2 p)\n{\n\treturn hash( dot( p, vec2(1.0, 41.0) ) );\t\n}\n\nfloat noise1D( float p )\n{\n\tfloat fl = floor(p);\n\t\n\tfloat h0 = hash( fl );\n\tfloat h1 = hash( fl + 1.0 );\n\t\n\tfloat fr = p - fl;\n\tfloat fr2 = fr * fr;\n\tfloat fr3 = fr2 * fr;\n\t\n\tfloat t1 = 3.0 * fr2 - 2.0 * fr3;\t\n\tfloat t0 = 1.0 - t1;\n\t\n\treturn h0 * t0\n\t\t + h1 * t1;\n}\n\nfloat noise2D( vec2 p, float r )\n{\n\tvec2 fl = floor(p);\n\n\tfloat h00 = hash2D( mod(fl + vec2(0.0, 0.0), r) );\n\tfloat h10 = hash2D( mod(fl + vec2(1.0, 0.0), r) );\n\tfloat h01 = hash2D( mod(fl + vec2(0.0, 1.0), r) );\n\tfloat h11 = hash2D( mod(fl + vec2(1.0, 1.0), r) );\n\t\n\tvec2 fr = p - fl;\n\t\n\tvec2 fr2 = fr * fr;\n\tvec2 fr3 = fr2 * fr;\n\t\n\tvec2 t1 = 3.0 * fr2 - 2.0 * fr3;\t\n\tvec2 t0 = 1.0 - t1;\n\t\n\treturn h00 * t0.x * t0.y\n\t\t + h10 * t1.x * t0.y\n\t\t + h01 * t0.x * t1.y\n\t\t + h11 * t1.x * t1.y;\n}\n\nfloat fbm( vec2 p, float per )\n{\n\tfloat val = 0.0;\n\tfloat tot = 0.0;\n\tfloat mag = 0.5;\n\n\tp += 0.5;\n\tp = p * (1.0 / 8.0);\n\tval += noise2D(p, 4.0) * mag; tot+=mag; p=p*2.0 + 1.234; mag*=per;\t\n\tval += noise2D(p, 8.0) * mag; tot+=mag; p=p*2.0 + 2.456; mag*=per;\n\tval += noise2D(p, 16.0) * mag; tot+=mag; p=p*2.0 + 3.678; mag*=per;\n\tval += noise2D(p, 32.0) * mag; tot+=mag;\n\n\treturn val * (1.0 / tot);\n}\n\nfloat Indent(vec2 vTexCoord, vec2 vHigh, vec2 vLow, float fHighIntensity, float fLowIntensity)\n{\n\tvec2 vMin = min(vLow, vHigh);\n\tvec2 vMax = max(vLow, vHigh);\n\tif((vTexCoord.x < vMin.x) || (vTexCoord.x > vMax.x) || (vTexCoord.y < vMin.y) || (vTexCoord.y > vMax.y))\n\t\treturn 1.0;\n\n\tif((vTexCoord.x == vHigh.x) || (vTexCoord.y == vHigh.y))\n\t{\n\t\treturn fHighIntensity;\n\t}\n\t\n\tif((vTexCoord.x == vLow.x) || (vTexCoord.y == vLow.y))\n\t{\n\t\treturn fLowIntensity;\n\t}\n\t\n\treturn 1.0;\n}\n\nvec4 SmoothBump(const in vec2 vTexCoord, const in vec2 vMin, const in vec2 vMax, const in vec2 vLightDir, const in float fSize)\n{\n\tvec2 vNearest = min( max(vTexCoord, vMin), vMax );\n\tvec2 vDelta = vNearest - vTexCoord;\n    float fDeltaLen = length(vDelta);\n\tfloat fDist = (fDeltaLen - fSize) / fSize;\n\tvec2 vDir = vDelta;\n    if(fDeltaLen > 0.0) vDir = vDir / fDeltaLen;\n\tfloat fShade = dot(vDir, vLightDir);\n\t//return clamp(1.0 - (fDist / fSize), 0.0, 1.0) * fShade;\n\tfShade *= clamp(1.0 - abs((fDist)), 0.0, 1.0);\n\treturn vec4( fShade, fDist, (vTexCoord - vMin + fSize) / (vMax - vMin + fSize * 2.0) );\n}\n\n\nfloat wrap( const in float x , const in float r )\n{\n\treturn fract( x * (1.0 / r) ) * r;\n}\n\nvec4 Hexagon( vec2 vUV )\n{\n\tvec2 vIndex;\n\t\n\tfloat fRow = floor(vUV.y);\n\t\n\tvec2 vLocalUV = vUV;\n\tfloat fRowEven = wrap(fRow, 2.0);\n\tif(fRowEven < 0.5)\n\t{\n\t\tvLocalUV.x += 0.5;\n\t}\n\t\n\tvIndex = floor(vLocalUV);\n\t\n\tvec2 vTileUV = fract(vLocalUV);\n\t{\n\t\tfloat m = 2.0 / 3.0;\n\t\tfloat c = 2.0 / 3.0;\n\t\tif((vTileUV.x *m + c) < vTileUV.y)\n\t\t{\n\t\t\tif(fRowEven < 0.5)\n\t\t\t{\n\t\t\t\tvIndex.x -= 1.0;\n\t\t\t}\n\t\t\tfRowEven = 1.0 - fRowEven;\t\t\t\t\n\t\t\tvIndex.y += 1.0;\n\t\t}\n\t}\n\t\n\t{\n\t\tfloat m = -2.0 / 3.0;\n\t\tfloat c = 4.0 / 3.0;\n\t\tif((vTileUV.x *m + c) < vTileUV.y)\n\t\t{\n\t\t\tif(fRowEven >= 0.5)\n\t\t\t{\n\t\t\t\tvIndex.x += 1.0;\n\t\t\t}\n\t\t\tfRowEven = 1.0 - fRowEven;\t\t\t\t\n\t\t\tvIndex.y += 1.0;\n\t\t}\n\t}\n\t\n\tvec2 vCenter = vIndex - vec2(0.0, -1.0 / 3.0);\n\tif(fRowEven > 0.5)\n\t{\n\t\tvCenter.x += 0.5;\n\t}\n\t\n\tvec2 vDelta = vUV - vCenter;\n\t\n\t//vDelta = abs(vDelta);\n\t\n\tfloat d1 = vDelta.x;\n\tfloat d2 = dot(vDelta, normalize(vec2(2.0/3.0, 1.0)));\n\tfloat d3 = dot(vDelta, normalize(vec2(-2.0/3.0, 1.0)));\n\t\n\td2 *= 0.9;\n\td3 *= 0.9;\n\t\n\tfloat fDist = max( abs(d1), abs(d2) );\n\tfDist = max( fDist, abs(d3) );\n\t\n\tfloat fTest = max(max(-d1, -d2), d3);\n\t\n\treturn vec4(vIndex, abs(fDist), fTest);\n}\n\n\n//////////////////////////\n// Textures\n//////////////////////////\n\nvec3 WizMet1_2( vec2 vTexCoord, float fRandom )\n{\n    // ok\n    // Metal walkway\n\tvec3 col = mix(vec3(19.0, 19.0, 27.0), vec3(55.0, 43.0, 23.0), fRandom * fRandom);\n\n    vTexCoord += 4.0; // hacked (as we dont have uv offsets from brush planes)\n    \n\tvec2 vTileCoord = mod( vTexCoord, vec2( 16.0, 16.0 ) );\n\t\n\tvec2 vOffset = vTileCoord - 8.0;\n\t\n\tif (length( vOffset ) < 2.5 )\n\t{\n\t\tvec2 vLightDir = normalize ( vec2( -1.0, -1.0 ) ) ;\n\t\tfloat hilight = clamp( dot( normalize( vOffset ), vLightDir ), 0.0, 1.0 );\n\t\tcol = mix( vec3( 20.0, 20.0, 50.0), vec3( 50.0, 50.0, 80.0 ), hilight) ;\n\t}\n\t\n\tif (length( vOffset ) < 1.3 )\n\t{\n\t\tcol *= 0.1;\n\t}\n\t\n\treturn col / 255.0;\n}\n\nvec3 Lava1( vec2 vTexCoord, float fRandom )\n{\n    // ok\n\tfRandom = 1.0 - abs( (fRandom - 0.5 ) * 2.0 );\n\tfRandom = clamp( fRandom, 0.0, 1.0 );\n\t\n\tfRandom = pow ( fRandom , 3.0 );\n\n\tvec3 col = mix(vec3(43.0, 1.0, 2.0), vec3(195.0, 74.0, 27.0), fRandom);\n\n\treturn col / 255.0;\n}\n\nvec3 Water1( vec2 vTexCoord, float fRandom )\n{\n    // ok\n    // brown water\n\tfRandom = 1.0 - abs( (fRandom - 0.5 ) * 2.0 );\n\tfRandom = clamp( fRandom, 0.0, 1.0 );\n\t\n\tfRandom = pow ( fRandom , 3.0 );\n\n\tvec3 col = mix(vec3(23.0, 16.0, 8.0), vec3(63.0, 48.0, 27.0), fRandom);\n\n    return col / 255.0;\n}\n\nvec3 Water2( vec2 vTexCoord, float fRandom )\n{\n    // ok\n    // blue water\n\tfRandom = 1.0 - abs( (fRandom - 0.5 ) * 2.0 );\n\tfRandom = clamp( fRandom, 0.0, 1.0 );\n\t\n\tfRandom = pow ( fRandom , 3.0 );\n\n\tfloat lerpMid = 0.75;\n\tfloat lerp1 = clamp( fRandom / lerpMid, 0.0, 1.0);\n\tvec3 col = mix(vec3(0.0, 0.0, 0.0), vec3(48.0, 47.0, 61.0), lerp1);\n\n\treturn col / 255.0;\n}\n\nvec3 Teleport( vec2 vTexCoord, float fRandom )\n{\n\tfRandom = clamp( fRandom * 10.0 - 8.5, 0.0, 1.0 );\n\n\tvec3 col = mix( vec3(1.0, 1.0, 0.0), vec3(107.0, 87.0, 71.0), fRandom);\n\n\treturn col / 255.0;\n}\n\nvec3 BrickA2_2( vec2 vTexCoord, float fRandom )\n{\n    // hard skill wall\n    float fMix = fRandom;\n    \n\tvec3 col = mix( vec3(7.0, 7.0, 0.0), vec3(99.0, 75.0, 31.0), fMix);\n\n    float fRandom2 = fRandom;\n    float fDark = clamp( 3.0 - fRandom2 * 4.5, 0.0, 1.0 );\n\n    col *= fDark;\n\n\treturn col / 255.0;\n}\n\nvec3 City4_7( vec2 vTexCoord, float fRandom )\n{\n    // main area floor\n\tvec3 col = mix( vec3(35.0, 19.0, 7.0), vec3(87.0, 43.0, 23.0), fRandom);\n\n    // herringbone tile pattern\n    vec2 vTileIndex = floor( vTexCoord / 16.0 );\n    \n    vec2 vTileMin = vTileIndex * 16.0;\n    vec2 vTileMax = vTileMin + 16.0;\n    \n    ivec2 iTileIndex = ivec2(vTileIndex);\n    \n    ivec2 iHerringBoneIndex = iTileIndex;\n    iHerringBoneIndex.x = (iHerringBoneIndex.x + 4 - iHerringBoneIndex.y) % 4;\n    if ( iHerringBoneIndex.x == 0 )\n    {\n        vTileMax.x += 16.0;\n    }\n    if ( iHerringBoneIndex.x == 1 )\n    {\n        vTileMin.x -= 16.0;\n    }\n    if ( iHerringBoneIndex.x == 2 )\n    {\n        vTileMin.y -= 16.0;\n    }\n    if ( iHerringBoneIndex.x == 3 )\n    {\n        vTileMax.y += 16.0;\n    }\n    \n    vTileMin += 1.0;\n    vTileMax -= 2.0;\n    \n    float fBump = SmoothBump( vTexCoord, vTileMin, vTileMax, normalize( vec2(-1,1) ), 1.0f ).x;\n    col *= clamp( fBump + 1.0, 0.4, 1.3 );\n\t\n\treturn col / 255.0;\n}\n\nvec3 City4_6( vec2 vTexCoord, float fRandom )\n{    \n    // start area floor\n    \n    fRandom = pow( fRandom, 3.0 );\n\tvec3 col = mix( vec3(23.0, 15.0, 11.0), vec3(47.0, 35.0, 19.0), fRandom);\n\n    // herringbone tile pattern\n    vec2 vTileIndex = floor( vTexCoord / 16.0 );\n    \n    vec2 vTileMin = vTileIndex * 16.0;\n    vec2 vTileMax = vTileMin + 16.0;\n    \n    ivec2 iTileIndex = ivec2(vTileIndex);\n    \n    ivec2 iHerringBoneIndex = iTileIndex;\n    iHerringBoneIndex.x = (iHerringBoneIndex.x + 4 - iHerringBoneIndex.y) % 4;\n    if ( iHerringBoneIndex.x == 0 )\n    {\n        vTileMax.x += 16.0;\n    }\n    if ( iHerringBoneIndex.x == 1 )\n    {\n        vTileMin.x -= 16.0;\n    }\n    if ( iHerringBoneIndex.x == 2 )\n    {\n        vTileMin.y -= 16.0;\n    }\n    if ( iHerringBoneIndex.x == 3 )\n    {\n        vTileMax.y += 16.0;\n    }\n    \n    vTileMin += 1.0;\n    vTileMax -= 2.0;\n    \n    float fBump = SmoothBump( vTexCoord, vTileMin, vTileMax, normalize( vec2(-1,1) ), 1.0f ).x;\n    col *= clamp( fBump + 1.0, 0.4, 1.2 );\n\t\n\treturn col / 255.0;\n}\n\n\nvec3 WBrick1_5( vec2 vTexCoord, float fRandom )\n{\n    // ok\n    // med skill wall\n\tvec3 col = mix( vec3(23.0, 15.0, 11.0), vec3(91.0, 67.0, 31.0), fRandom);\n\t\n\tvec2 vTileCoord = vTexCoord;\n\tif( (vTileCoord.y >= 0.0) && (vTileCoord.y < 32.0) ) \n\t\tvTileCoord.x -= 2.0;\n\telse \n\t\tvTileCoord.x -= 32.0;\n\tvTileCoord.x = mod(vTileCoord.x, 64.0);\n\tvTileCoord.y = mod(vTileCoord.y, 32.0);\n\t\t\n\tvec2 vBoxClosest = clamp(vTileCoord, vec2(4.0, 4.0), vec2(60.0, 28.0));\n\tvec2 vDelta = vTileCoord - vBoxClosest;\n\tfloat fDist2 = dot(vDelta, vDelta);\n\n\tcol *= clamp( 1.0 - fDist2 * 0.1, 0.0, 1.0 ) * 0.1 + 0.9;\t\n    \n    float fBump = SmoothBump( vTileCoord, vec2(3,3), vec2(64, 32)-4.0, normalize( vec2(-1,1) ), 3.0f ).x;\n    col *= clamp( fBump + 1.0, 0.6, 1.3 );\n\t\n\treturn col / 255.0;\n}\n\nvec3 Wiz1_4( vec2 vTexCoord, float fRandom )\n{\n    // Lighter support bricks\n\tvec3 col = mix( vec3(39.0, 31.0, 23.0), vec3(95.0, 75.0, 59.0), fRandom);\n\n\tvec2 vTileCoord = vTexCoord;\n\tif( (vTileCoord.y >= 0.0) && (vTileCoord.y < 32.0) ) \n\t\tvTileCoord.x -= 2.0;\n\telse \n\t\tvTileCoord.x -= 32.0;\n\tvTileCoord.x = mod(vTileCoord.x, 64.0);\n\tvTileCoord.y = mod(vTileCoord.y, 32.0);\n\t\t\n\tvec2 vBoxClosest = clamp(vTileCoord, vec2(4.0, 4.0), vec2(60.0, 28.0));\n\tvec2 vDelta = vTileCoord - vBoxClosest;\n\tfloat fDist2 = dot(vDelta, vDelta);\n\n\tcol *= clamp( 1.0 - fDist2 * 0.1, 0.0, 1.0 ) * 0.1 + 0.9;\t\n    \n    float fBump = SmoothBump( vTileCoord, vec2(2,2), vec2(64, 32)-3.0, normalize( vec2(-1,1) ), 2.0f ).x;\n    col *= clamp( fBump + 1.0, 0.8, 1.2 );\n\t\n\treturn col / 255.0;\n}\n\nvec3 Skill2( vec2 vTexCoord, float fRandom )\n{\n\tvec3 col = mix(vec3(19.0, 19.0, 27.0), vec3(47.0, 35.0, 19.0), fRandom * fRandom) / 255.0;\n\n\treturn col;\n}\n\n\nvec3 WizMet1_1( vec2 vTexCoord, float fRandom )\n{\n    // Big metal fire things\n\tvec3 col = mix(vec3(19.0, 19.0, 27.0), vec3(63.0, 47.0, 23.0), fRandom * fRandom) / 255.0;\n\n    float fBump = SmoothBump( vTexCoord, vec2(2,2), vec2(64, 64)-3.0, normalize( vec2(-1,1) ), 2.0f ).x;\n    col *= clamp( fBump + 1.0, 0.8, 1.2 );\n    \n\treturn col;\n}\n\nvec3 Sky1( vec2 vTexCoord, float fRandom )\n{\n\tfRandom = fRandom * 2.0 - 1.0;\n\tfRandom = clamp( fRandom, 0.0, 1.0 );\n\t\n\tfRandom = pow ( fRandom , 0.75 );\n\t\n\tvec3 col = mix(vec3(35.0, 19.0, 19.0), vec3(75.0, 47.0, 55.0), fRandom) / 255.0;\n\n\tif ( fRandom == 0.0 )\n\t{\n\t\tcol = vec3( 0.0 );\n\t}\n\t\n\treturn col;\n}\n\nvec3 WizWood( vec2 vTexCoord, float fRandom )\n{\n    // Ceiling areas\n    // ok\n\tvec3 col = mix(vec3(35.0, 19.0, 7.0), vec3(99.0, 47.0, 31.0), fRandom);\n    \n\tvec2 vTileCoord = vTexCoord;\n\n    if ( mod( vTileCoord.x, 16.0 ) > 8.0 )\n    {\n    \tvTileCoord.y -= 32.0;\n    }\n\tvTileCoord.x = mod(vTileCoord.x, 8.0);\n\tvTileCoord.y = mod(vTileCoord.y, 64.0);\n\t\t\n\tvec2 vBoxClosest = clamp(vTileCoord, vec2(4.0, 4.0), vec2(6.0, 60.0));\n\tvec2 vDelta = vTileCoord - vBoxClosest;\n\tfloat fDist2 = dot(vDelta, vDelta);\n\n\tcol *= clamp( 1.0 - fDist2 * 0.03, 0.0, 1.0 ) * 0.5 + 0.5;\t\n\t\n\treturn col / 255.0;\n}\n\nvec3 Window02_1( vec2 vTexCoord, float fRandom )\n{\n\tvec3 col = mix(vec3(90.0, 35.0, 19.0), vec3(240.0, 60.0, 32.0), fRandom) / 255.0;\n    \n    return col;\n}\n\nvec3 Cop1_1( vec2 vTexCoord, float fRandom )\n{\n\tvec3 col = mix(vec3(19.0, 19.0, 27.0), vec3(47.0, 35.0, 19.0), fRandom * fRandom) / 255.0;\n\n\treturn col;\n}\n\nvec3 SampleTexture( uint iTexture, const in vec2 _vUV )\n{\n#ifdef HIGHLIGHT_TEXTURE    \n\tif(iTexture == HIGHLIGHT_TEXTURE) return vec3(1,0,0);\n#endif    \n    \n    vec3 vResult = vec3(1.0, 0.0, 1.0);\n    vec2 vUV = _vUV;\n    \n    vec2 vSize = vec2(64.0);\n    float fPersistence = 0.8;\n    \n\tif(iTexture == TEX_WIZMET1_2)\n\t{\n\t\tfPersistence = 1.2;\n\t}\n\telse if ( iTexture == TEX_LAVA1\t)\n\t{\n\t\tfPersistence = 0.4;\n\t}\n    else if ( iTexture == TEX_WATER1 )\n    {\n\t\tfPersistence = 0.4;\n    }\n    else if ( iTexture == TEX_WATER2 )\n    {\n\t\tfPersistence = 0.4;\n    }\n\telse if ( iTexture == TEX_TELEPORT\t)\n\t{\n\t\tfPersistence = 10.0;\n\t}\n\telse if ( iTexture == TEX_BRICKA2_2 )\n\t{\n\t\tfPersistence = 1.0;\n\t}\n\telse if ( iTexture == TEX_CITY4_7 )\n\t{\n\t\tfPersistence = 1.0;\n\t}\n\telse if ( iTexture == TEX_CITY4_6 )\n\t{\n\t\tfPersistence = 3.0;\n\t}\n\telse if ( iTexture == TEX_WBRICK1_5 )\n\t{\n\t\tfPersistence = 1.3;\n\t}\t\n\telse if ( iTexture == TEX_SKILL0 || iTexture == TEX_SKILL1 || iTexture == TEX_SKILL2 || iTexture == TEX_QUAKE )\n\t{\n\t\tfPersistence = 1.0;\n\t\t//vSize = vec2( 32.0, 96.0 );\n\t}\n    else if ( iTexture == TEX_WIZMET1_1 )\n    {\n\t\tfPersistence = 1.0;\n    }\n    else if ( iTexture == TEX_WIZ1_4 )\n    {\n\t\tfPersistence = 1.0;\n    }\n\telse if ( iTexture == TEX_SKY1 )\n\t{\n\t\tfPersistence = 0.6;\n\t}\n\telse if ( iTexture == TEX_WIZWOOD1_5 )\n\t{\n\t\tfPersistence = 0.6;\n\t}\n\telse if ( iTexture == TEX_DEM4_1 || iTexture == TEX_WINDOW02_1 )\n\t{\n\t\tfPersistence = 0.6;\n\t}\n    else if ( iTexture == TEX_COP1_1 || iTexture == TEX_COP3_4 )\n    {\n\t\tfPersistence = 1.2;\n    }\n         \n\t\t\n\t\t\n#ifdef PREVIEW\n    vec2 vTexCoord = floor(fract(vUV) * vSize);\n#else\n    vec2 vTexCoord = fract(vUV / vSize) * vSize;\n    #if PIXELATE_TEXTURES\n    vTexCoord = floor(vTexCoord);\n    #endif\n    vTexCoord.y = vSize.y - vTexCoord.y - 1.0;\n#endif\n\t\n\tfloat fRandom = fbm( vTexCoord, fPersistence );\n    \n    if(iTexture == TEX_WIZMET1_2)\n\t{\n\t\tvResult = WizMet1_2(vTexCoord, fRandom);\n\t}\n\telse if ( iTexture == TEX_LAVA1\t)\n\t{\n\t\tvResult = Lava1(vTexCoord, fRandom);\n\t}\n\telse if ( iTexture == TEX_WATER1\t)\n\t{\n\t\tvResult = Water1(vTexCoord, fRandom);\n\t}\n\telse if ( iTexture == TEX_WATER2\t)\n\t{\n\t\tvResult = Water2(vTexCoord, fRandom);\n\t}\n\telse if ( iTexture == TEX_TELEPORT\t)\n\t{\n\t\tvResult = Teleport(vTexCoord, fRandom);\n\t}\n\telse if ( iTexture == TEX_BRICKA2_2\t)\n\t{\n\t\tvResult = BrickA2_2(vTexCoord, fRandom);\n\t}\n\telse if ( iTexture == TEX_CITY4_7\t)\n\t{\n\t\tvResult = City4_7(vTexCoord, fRandom);\n\t}\n\telse if ( iTexture == TEX_WBRICK1_5 )\n\t{\n\t\tvResult = WBrick1_5(vTexCoord, fRandom);\n\t}\n\telse if ( iTexture == TEX_SKILL0 || iTexture == TEX_SKILL1 || iTexture == TEX_SKILL2 || iTexture == TEX_QUAKE )\n\t{\n\t\tvResult = Skill2(vTexCoord, fRandom);\n\t}\n    else if ( iTexture == TEX_WIZMET1_1 )\n    {\n\t\tvResult = WizMet1_1(vTexCoord, fRandom);\n    }\n    else if ( iTexture == TEX_WIZ1_4 )\n    {\n\t\tvResult = Wiz1_4(vTexCoord, fRandom);\n    }\n\telse if ( iTexture == TEX_SKY1 )\n\t{\n\t\tvResult = Sky1(vTexCoord, fRandom);\n\t}\n    else if ( iTexture == TEX_WIZWOOD1_5)\n    {\n\t\tvResult = WizWood(vTexCoord, fRandom);\n    }\n    else if ( iTexture == TEX_CITY4_6 )\n    {\n\t\tvResult = City4_6(vTexCoord, fRandom);\n    }\n\telse if ( iTexture == TEX_DEM4_1 || iTexture == TEX_WINDOW02_1 )\n    {\n\t\tvResult = Window02_1(vTexCoord, fRandom);\n    }\n    else if ( iTexture == TEX_COP1_1 || iTexture == TEX_COP3_4 )\n    {\n\t\tvResult = Cop1_1(vTexCoord, fRandom);\n    }\n        \n\t\n    #if QUANTIZE_TEXTURES\n    vResult = Quantize(vResult);\n    #endif\n\n    return vResult;\n}\n\n\n\nvec3 GetTexture( uint iTextureIndex, vec3 vRayOrigin, vec3 vHitOffset, vec3 vNormal )\n{\n    vec3 vHitPos = vRayOrigin + vHitOffset;\n    \n\tvec3 vTexCol = vec3(1.0);// * fTextureIndex;\n    \n    vec2 vProjectedCoord = GetProjectedCoord( vHitPos, vNormal );    \n    \n\tvec2 vTexCoord = vProjectedCoord * 0.01;\n    \n    //return vec3(fract(vTexCoord.xy), 0.0);\n\t\n\tif ( iTextureIndex == TEX_LAVA1 || iTextureIndex == TEX_WATER1 || iTextureIndex == TEX_WATER2 || iTextureIndex == TEX_TELEPORT )\n\t{\n\t\tvec2 vOrig = floor( vTexCoord * 64.0 ) / 64.0;\n\t\tvTexCoord.x += sin(vOrig.y * 5.0 + iTime * 1.0) * 0.1;\n\t\tvTexCoord.y += sin(vOrig.x * 5.0 + iTime * 1.0) * 0.1;\n\t}\n    \n    if ( iTextureIndex == TEX_SKY1 )\n    {\n        vTexCoord.xy = vHitOffset.xy / vHitOffset.z;\n        vTexCoord.y += iTime * 0.1;\n    }\n    \n    vTexCol = SampleTexture( iTextureIndex, vTexCoord * 64.0 );\n\n    if ( iTextureIndex == TEX_SKY1 )\n    {\n        vTexCoord *= 2.0;\n        vTexCoord.y += iTime * 0.1;\n\t    vec3 sample2 = SampleTexture( TEX_SKY1, vTexCoord * 64.0 );\n        \n        vTexCol = mix( vTexCol, sample2, step( vTexCol.x, 0.0 ) );\n    }\n    \n\n    return vTexCol;\n}\n\n\n#if SHOW_LIGHTS\n\nfloat TraceSphere( vec3 vRayOrigin, vec3 vRayDir, vec3 vSphereOrigin, float fSphereRadius )\n{\t\n\tvec3 vToOrigin = vSphereOrigin - vRayOrigin;\n\tfloat fProjection = dot(vToOrigin, vRayDir);\n\tvec3 vClosest = vRayOrigin + vRayDir * fProjection;\n\t\n\tvec3 vClosestToOrigin = vClosest - vSphereOrigin;\n\tfloat fClosestDist2 = dot(vClosestToOrigin, vClosestToOrigin);\n\n\tfloat fSphereRadius2 = fSphereRadius * fSphereRadius;\n\t\n\tif(fClosestDist2 < fSphereRadius2)\n\t{\n\t\tfloat fHCL = sqrt(fSphereRadius2 - fClosestDist2);\n\n\t\tfloat fMinDist = max( 0.0, fProjection - fHCL );\n\t\tfloat fMaxDist = fProjection + fHCL;\n\t\t\n\t\tif(fMaxDist > fMinDist )\n\t\t{\t\t\t\n            return min( fMinDist, fMaxDist );\n\t\t}\n\t}\n    \n    return 100000.0f;\n}\n\n#endif\n\n\nvec3 Project( vec3 a, vec3 b )\n{\n\treturn a - b * dot(a, b);\n}\n\n/*\nvoid TraceCylinder( out C_Span span, const in vec3 vRayOrigin, const in vec3 vRayDir, const in vec3 vCylinderOrigin, const in vec3 vCylinderDir, const in float fCylinderRadius, const in float fObjectId )\n{\t\n\tSetupNullSpan(span);\n\t\n\tvec3 vOffset = vCylinderOrigin - vRayOrigin;\n\t\n\tvec3 vProjOffset = Project(vOffset, vCylinderDir);\n\tvec3 vProjDir = Project(vRayDir, vCylinderDir);\n\tfloat fProjScale = length(vProjDir);\n\tvProjDir /= fProjScale;\n\t\n\t// intersect circle in projected space\n\t\n\tfloat fTClosest = dot(vProjOffset, vProjDir);\n\t\n\tvec3 vClosest = vProjDir * fTClosest;\n\tfloat fDistClosest = length(vClosest - vProjOffset);\n\tif(fDistClosest < fCylinderRadius)\n\t{\t\t\n\t\tfloat fHalfChordLength = sqrt(fCylinderRadius * fCylinderRadius - fDistClosest * fDistClosest);\n\t\tfloat fTIntersectMin = clamp((fTClosest - fHalfChordLength) / fProjScale, kNearClip, kFarClip);\n\t\tfloat fTIntersectMax = (fTClosest + fHalfChordLength) / fProjScale;\t\n\t\t\n\t\tif(fTIntersectMax > fTIntersectMin)\n\t\t{\t\n\t\t\tspan.iMin.fDist = fTIntersectMin;\n\t\t\tspan.iMin.vPos = vRayOrigin + vRayDir * span.iMin.fDist;\n\t\t\tspan.iMin.vNormal = normalize(vProjDir * (fTClosest - fHalfChordLength) - vProjOffset );\n\t\t\tspan.iMin.vUVW = span.iMin.vPos;\n\t\t\tspan.iMin.fObjectId = fObjectId;\n\t\n\t\t\tspan.iMax.fDist = fTIntersectMax;\n\t\t\tspan.iMax.vPos = vRayOrigin + vRayDir * span.iMax.fDist;\n\t\t\tspan.iMax.vNormal = normalize(vProjDir * (fTClosest + fHalfChordLength) - vProjOffset );\n\t\t\tspan.iMax.vUVW = span.iMax.vPos;\n\t\t\tspan.iMax.fObjectId = fObjectId;\t\t\t\t\t\t\n\t\t}\t\t\n\t}\n}\n*/\n\n// http://geomalgorithms.com/a07-_distance.html\nfloat dist3D_Segment_to_Segment( vec3 S1_P0, vec3 S1_P1, vec3 S2_P0, vec3 S2_P1 )\n{\n    vec3   u = S1_P1 - S1_P0;\n    vec3   v = S2_P1 - S2_P0;\n    vec3   w = S1_P0 - S2_P0;\n    float    a = dot(u,u);         // always >= 0\n    float    b = dot(u,v);\n    float    c = dot(v,v);         // always >= 0\n    float    d = dot(u,w);\n    float    e = dot(v,w);\n    float    D = a*c - b*b;        // always >= 0\n    float    sc, sN, sD = D;       // sc = sN / sD, default sD = D >= 0\n    float    tc, tN, tD = D;       // tc = tN / tD, default tD = D >= 0\n    \n    const float SMALL_NUM = 0.00001;\n\n    // compute the line parameters of the two closest points\n    if (D < SMALL_NUM) { // the lines are almost parallel\n        sN = 0.0;         // force using point P0 on segment S1\n        sD = 1.0;         // to prevent possible division by 0.0 later\n        tN = e;\n        tD = c;\n    }\n    else {                 // get the closest points on the infinite lines\n        sN = (b*e - c*d);\n        tN = (a*e - b*d);\n        if (sN < 0.0) {        // sc < 0 => the s=0 edge is visible\n            sN = 0.0;\n            tN = e;\n            tD = c;\n        }\n        else if (sN > sD) {  // sc > 1  => the s=1 edge is visible\n            sN = sD;\n            tN = e + b;\n            tD = c;\n        }\n    }\n\n    if (tN < 0.0) {            // tc < 0 => the t=0 edge is visible\n        tN = 0.0;\n        // recompute sc for this edge\n        if (-d < 0.0)\n            sN = 0.0;\n        else if (-d > a)\n            sN = sD;\n        else {\n            sN = -d;\n            sD = a;\n        }\n    }\n    else if (tN > tD) {      // tc > 1  => the t=1 edge is visible\n        tN = tD;\n        // recompute sc for this edge\n        if ((-d + b) < 0.0f)\n            sN = 0.0f;\n        else if ((-d + b) > a)\n            sN = sD;\n        else {\n            sN = (-d +  b);\n            sD = a;\n        }\n    }\n    // finally do the division to get sc and tc\n    sc = (abs(sN) < SMALL_NUM ? 0.0 : sN / sD);\n    tc = (abs(tN) < SMALL_NUM ? 0.0 : tN / tD);\n\n    // get the difference of the two closest points\n    vec3   dP = w + (sc * u) - (tc * v);  // =  S1(sc) - S2(tc)\n\n    return length( dP ); // return the closest distance\n}\n\nfloat Draw3DLine( vec3 vRayOrigin, vec3 vRayDir, vec3 vStart, vec3 vEnd, float fSize )\n{    \n    vec3 vRayEnd = vRayOrigin + vRayDir * 1000.0;\n    \n    float fD = dist3D_Segment_to_Segment(vRayOrigin, vRayEnd, vStart, vEnd );\n    \n    float fFeather = 1.0;\n    return clamp ( 1.0 - (fD - fSize) / fFeather, 0.0, 1.0 );\n    \n    //return fD;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec4 debug = vec4( texelFetch( iChannelState, ADDR_DEBUG_INFO, 0 ) );\n    \n    //fragColor = texelFetch( iChannel0, ivec2(fragCoord), 0); return;\n    //fragColor = texelFetch( iChannel2, ivec2(fragCoord), 0).rrrr * 4.0; return;\n    //fragColor = texelFetch( iChannel2, ivec2(fragCoord), 0) * 4.0; return;\n    \n    //vec4 vSample = texelFetch( iChannel2, ivec2(fragCoord), 0);\n    //if ( vSample.w <= 0.0 ) fragColor = vec4(1,0,0,1);    \n    //return;\n    \n    \n\tvec2 vUV = fragCoord.xy / iResolution.xy;  \n    \n    CameraState cam;\n\tCam_LoadState( cam, iChannelState, ADDR_CAM );\n    \n    float fAspectRatio = iResolution.x / iResolution.y;\n    \n    vec3 vRayOrigin, vRayDir;\n    Cam_GetCameraRay( vUV, fAspectRatio, cam, vRayOrigin, vRayDir );    \n    \n    MapDataInfo mapInfo = MapData_ReadInfo( iChannelData );        \n    \n\tC_HitInfo hitInfo;\n#if 0\n    vec4 vTraceInfo = texelFetch( iChannel1, ivec2(fragCoord), 0 );\n    \n    hitInfo.fClosestT = vTraceInfo.x;\n    hitInfo.iBrushIndex = int(vTraceInfo.y);\n    hitInfo.iPlaneIndex = int(vTraceInfo.z);\n#else\n    MapIntersect( iChannelData, mapInfo, vRayOrigin, vRayDir, hitInfo, 0.0 );    \n#endif    \n    \n    if ( hitInfo.fClosestT > 2000.0 )\n    {\n        fragColor = vec4(0.3);\n        return;\n    }\n        \n\tMapDataPlane planeInfo = MapData_ReadPlane( iChannelData, hitInfo.iPlaneIndex );\n    \n    vec3 vNormal = planeInfo.plane.xyz;    \n\tvec3 vHitPos = vRayOrigin + vRayDir * hitInfo.fClosestT;    \n    \n    uint iBrushTexture = planeInfo.textureIndex;\n\n//fragColor.a = 1.0;\n//fragColor.rgb = vec3(1.0) * fBrushTexture * 0.1;\n//return;\n    \n    //float fShade = texture( iChannelLightmap, vUV ).r;\n    float fShade = 0.0f;\n    \n#if (LIGHTING_TYPE==LIGHTING_TYPE_PER_PIXEL)\n    uint iPlaneTexture = planeInfo.textureIndex;\n    if ( !IsTextureLit( iBrushTexture ) )\n    {\n        fShade = 1.0;\n    }\n    else\n    {\n\t\tMapDataBrush brushInfo = MapData_ReadBrush( iChannelData, hitInfo.iBrushIndex );\n        \n    \tfShade = GetLighting( iChannelData, mapInfo, brushInfo, planeInfo, vHitPos, vNormal );\n    }            \n#endif      \n#if (LIGHTING_TYPE==LIGHTING_TYPE_LIGHTMAP)\n    vec2 vProjectedCoord = GetProjectedCoord( vHitPos, planeInfo.projectionAxis );  \n    vec2 vLightmapCoord = vProjectedCoord + planeInfo.lightmapOffset;\n    vLightmapCoord = (vLightmapCoord - vLightmapMin) / vLightmapRange; \n    vec4 vLightmapSample = textureLod( iChannelLightmap, vLightmapCoord, 0.0 );\n    \n    fShade = vLightmapSample.r;\n#endif      \n    \n    fShade = fShade * 2.0;\n    //fShade = min( 1.0, fShade * 3.0 ) * 2.0;\n\n    if ( planeInfo.projectionAxis == 3 )\n    {\n        fShade = 0.0;\n    }\n\n#if !FULLBRIGHT    \n    if ( !IsTextureLit( iBrushTexture ) )\n#endif        \n    {\n        fShade = 1.0;\n    }    \n        \n    vec3 vResult = vec3( 1.0 );    \n    \n#if !NO_DIFFUSE_TEXTURES\n    vResult = GetTexture( iBrushTexture, vRayOrigin, vRayDir * hitInfo.fClosestT, vNormal );\n#endif    \n    \n    if ( hitInfo.iBrushIndex == int(debug.w) && hitInfo.iPlaneIndex == int(debug.z) ) vResult = vec3(1,0,0);\n    //if ( hitInfo.iBrushIndex == int(debug.w) ) vResult = vec3(1,0,0);\n    \n    //vResult *= fShade;\n    \n    vResult *= fShade;\n    \n#if SHOW_LIGHTS\n    \n    float fClosestHit = hitInfo.fClosestT;\n    bool bHitLight = false;\n    for ( int iLightIndex=0; iLightIndex<mapInfo.lightCount; iLightIndex++ )\n    {\n        vec4 vLightInfo = texelFetch( iChannelData, ivec2(iLightIndex, ADDR_LIGHT), 0 );\n        \n\t\tvec3 vLightPos = vLightInfo.xyz;\n        float light = vLightInfo.w;\n        \n        light = 10.0;\n        \n        float fLightHitDist = TraceSphere( vRayOrigin, vRayDir, vLightPos, light );\n        \n        if ( fLightHitDist < hitInfo.fClosestT )\n        {\n            bHitLight = true;            \n            vResult += 0.5;\n        }\n        \n    }   \n    \n    if ( bHitLight )\n    {\n        //vResult = vec3(1.0);\n    }\n#endif\n    \n    int pointContents = MapPointContents( iChannelData, mapInfo, vRayOrigin );\n    //int pointContents = MapBoxContents( iChannelData, mapInfo, vRayOrigin, playerBox );\n    \n    switch( pointContents )\n    {\n\tdefault:\n        break;\n\tcase CONTENTS_SOLID:\n        vResult = vec3(0.2,0.2,0.2);\n        break;\n\tcase CONTENTS_LAVA:\n        vResult = vec3(0.5,0,0);\n        break;\n\tcase CONTENTS_SLIME:\n        vResult = vec3(0.5,0.25,0);\n        break;\n\tcase CONTENTS_WATER:\n        vResult = vec3(0.0,0.25,0.5);\n        break;\n    }\n    \n    //vResult = vLightmapSample.rgb;    \n    //vResult.xy = fract( vLightmapCoord.xy );\n\n\n    \n    \n#if QUANTIZE_IMAGE\n    vResult = Quantize(vResult);\n#endif\n\n#if SHOW_CAMERA_COORDS    \n    vec2 vFontUV = vUV * 20.0 * vec2(2.0, 1.0) - 1.0;\n    if ( PrintValue( vFontUV, cam.vPos.x, 4.0, 0.0 ) > 0.0 )vResult = vec3(1);vFontUV -= vec2(5.0, 0.0);\n    if ( PrintValue( vFontUV, cam.vPos.z, 4.0, 0.0 ) > 0.0 )vResult = vec3(1);vFontUV -= vec2(5.0, 0.0);\n    if ( PrintValue( vFontUV, cam.vPos.y, 4.0, 0.0 ) > 0.0 )vResult = vec3(1);vFontUV -= vec2(5.0, 0.0);\n#endif        \n\n    \n#if 0\n    {\n        float d = 1000.0;\n        vec3 start = vRayOrigin;\n        vec3 end = vRayOrigin + vRayDir * d;\n        \n        pmtrace_t tr = PM_PlayerMove( iChannelData, mapInfo, start, end );\n        \n        vResult = vec3(1.0 -  tr.fraction * tr.fraction );\n        //vResult = vec3( tr.plane.normal * 0.5 + 0.5 );\n        \n        if ( tr.startsolid )\n        {\n            vResult = vec3(1,0,0);\n\t\t}\n    }\n#endif        \n    \n#if 0\n    {\n     \tvec3 start = vRayOrigin + vec3(100, 100, -100);\n        vec3 end = start + vec3( 0, 200.0, -32 );\n        \n\t\tpmtrace_t tr = PM_PlayerMove( iChannelData, mapInfo, start, end );\n        \n        float fLine = Draw3DLine( vRayOrigin, vRayDir, start, tr.endpos, 1.0 );\n        vResult = mix( vResult, vec3(1.0), fLine );\n\n        vec3 vDir2 = reflect( end-start, tr.plane.normal );\n        \n        vec3 end2 = tr.endpos + vDir2;//vec3(100, -200.0f, -32 );\n        \n\t\tpmtrace_t tr2 = PM_PlayerMove( iChannelData, mapInfo, tr.endpos, end2 );\n        \n        float fLine2 = Draw3DLine( vRayOrigin, vRayDir, tr.endpos, tr2.endpos, 1.0 );\n        vResult = mix( vResult, vec3(1, 0,0), fLine2 );\n        \n    }\n#endif    \n    \n#if 0\n    // debug\n    Rect rect;\n    rect = Rect( vec2(0), vec2(15) );\n    if( Rect_ContainsPoint( rect, fragCoord ) )\n    {\n        switch( int( debug.x ) )\n        {\n            case 0:\n        \t\tvResult = vec3(0,0,0);\n            \tbreak;\n            case 1:\n        \t\tvResult = vec3(1,0,0);\n            \tbreak;\n        }\n    }\n\n    rect = Rect( vec2(16,0), vec2(31, 15) );\n    if( Rect_ContainsPoint( rect, fragCoord ) )\n    {\n        switch( int( debug.y ) )\n        {\n            case 0:\n        \t\tvResult = vec3(0,0,0);\n            \tbreak;\n            case 1:\n        \t\tvResult = vec3(1,0,0);\n            \tbreak;\n            case 2:\n        \t\tvResult = vec3(0,1,0);\n            \tbreak;\n        }\n    }\n    \n    rect = Rect( vec2(32,0), vec2(47, 15) );\n    if( Rect_ContainsPoint( rect, fragCoord ) )\n    {\n        switch( int( debug.z ) )\n        {\n            case 0:\n        \t\tvResult = vec3(0,0,0);\n            \tbreak;\n            case 1:\n        \t\tvResult = vec3(1,0,0);\n            \tbreak;\n            case 2:\n        \t\tvResult = vec3(0,1,0);\n            \tbreak;\n        }\n    }    \n    rect = Rect( vec2(48,0), vec2(63, 15) );\n    if( Rect_ContainsPoint( rect, fragCoord ) )\n    {\n        /*\n        switch( int( debug.w ) )\n        {\n            case 0:\n        \t\tvResult = vec3(0,0,0);\n            \tbreak;\n            case 1:\n        \t\tvResult = vec3(1,0,0);\n            \tbreak;\n            case 2:\n        \t\tvResult = vec3(0,1,0);\n            \tbreak;\n        }*/\n        vResult = vec3( debug.w * 0.5 + 0.5 );\n    }    \n    \n#endif\n    \n    fragColor = vec4(vResult, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Unpack Map Data from array to Buffer A\n\n/*\n#define TEX_WBRICK1_5\t\t0u\n#define TEX_CITY4_6\t\t1u\n#define TEX_WIZ1_4\t\t2u\n#define TEX_CITY4_7\t\t3u\n#define TEX_WIZWOOD1_5\t\t4u\n#define TEX_WIZMET1_2\t\t5u\n#define TEX_WIZMET1_1\t\t6u\n#define TEX_SKY1\t\t7u\n#define TEX_BRICKA2_2\t\t8u\n#define TEX_DEM4_1\t\t9u\n#define TEX_WATER1\t\t10u\n#define TEX_LAVA1\t\t11u\n#define TEX_WATER2\t\t12u\n#define TEX_WINDOW02_1\t\t13u\n#define TEX_SKILL0\t\t14u\n#define TEX_TELEPORT\t\t15u\n#define TEX_SKILL1\t\t16u\n#define TEX_SKILL2\t\t17u\n#define TEX_COP1_1\t\t18u\n#define TEX_COP3_4\t\t19u\n#define TEX_QUAKE\t\t20u\n*/\n\n#define MAP_BRUSH_COUNT 215\n#define MAP_LIGHT_COUNT 72\n#define MAP_PLANE_COUNT 1261\n#define MAP_AABB_NODE_COUNT 145\n\nstruct MapLight\n{\n\tvec3 pos;\n\tfloat radius;\n};\n\nstruct MapPlane\n{\n\tuint packedNormal;\n\tfloat planeD;\n\tuint textureIndex;\n};\n\nstruct MapBrush\n{\n\tuint packedBrushValues; // 16_16 planeStart, planeCount\n};\n\nstruct MapAABBNode\n{\n\tvec3 boundsMin;\n\tvec3 boundsMax;\n\tuint packedNodeValues; // 10_10_10_2 [childAIndex || brushIndex], [childB || brushCount], unused, node type\n};\n\nstruct Map\n{\n\tMapLight lightArray[MAP_LIGHT_COUNT];\n\tMapPlane planeArray[MAP_PLANE_COUNT];\n\tMapAABBNode aabbNodeArray[MAP_AABB_NODE_COUNT];\n\tMapBrush brushArray[MAP_BRUSH_COUNT];\n};\nMap map = Map(\n\tMapLight[MAP_LIGHT_COUNT](\n\t\tMapLight( vec3( 544.000000, 312.000000, 104.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 126.000000, 526.000000, 12.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 958.000000, 526.000000, 12.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 128.000000, 432.000000, -32.000000 ), 220.000000 ),\n\t\tMapLight( vec3( 128.000000, 624.000000, -32.000000 ), 220.000000 ),\n\t\tMapLight( vec3( 224.000000, 528.000000, -32.000000 ), 220.000000 ),\n\t\tMapLight( vec3( 128.000000, 528.000000, -48.000000 ), 220.000000 ),\n\t\tMapLight( vec3( 224.000000, 352.000000, 120.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 864.000000, 352.000000, 120.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 864.000000, 528.000000, -32.000000 ), 220.000000 ),\n\t\tMapLight( vec3( 960.000000, 624.000000, -32.000000 ), 220.000000 ),\n\t\tMapLight( vec3( 960.000000, 432.000000, -32.000000 ), 220.000000 ),\n\t\tMapLight( vec3( 960.000000, 528.000000, -48.000000 ), 220.000000 ),\n\t\tMapLight( vec3( 200.000000, 712.000000, 120.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 888.000000, 712.000000, 120.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 544.000000, 584.000000, 424.000000 ), 500.000000 ),\n\t\tMapLight( vec3( 544.000000, 1016.000000, 72.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 394.000000, 762.000000, 84.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 698.000000, 762.000000, 84.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 336.000000, 896.000000, -144.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 336.000000, 1024.000000, -144.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 336.000000, 1152.000000, -144.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 728.000000, 904.000000, -144.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 728.000000, 1080.000000, -144.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 984.000000, 1080.000000, -144.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 984.000000, 904.000000, -144.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 600.000000, 840.000000, -152.000000 ), 200.000000 ),\n\t\tMapLight( vec3( 488.000000, 840.000000, -152.000000 ), 200.000000 ),\n\t\tMapLight( vec3( 544.000000, 880.000000, 248.000000 ), 200.000000 ),\n\t\tMapLight( vec3( 544.000000, 1136.000000, 248.000000 ), 200.000000 ),\n\t\tMapLight( vec3( 480.000000, 1032.000000, -152.000000 ), 200.000000 ),\n\t\tMapLight( vec3( 608.000000, 1032.000000, -152.000000 ), 200.000000 ),\n\t\tMapLight( vec3( 362.000000, 1034.000000, 20.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 224.000000, 1136.000000, 248.000000 ), 200.000000 ),\n\t\tMapLight( vec3( 224.000000, 1008.000000, 248.000000 ), 200.000000 ),\n\t\tMapLight( vec3( 224.000000, 880.000000, 248.000000 ), 200.000000 ),\n\t\tMapLight( vec3( 88.000000, 1024.000000, 64.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 408.000000, 928.000000, 96.000000 ), 120.000000 ),\n\t\tMapLight( vec3( 680.000000, 1056.000000, 96.000000 ), 120.000000 ),\n\t\tMapLight( vec3( 992.000000, 928.000000, 64.000000 ), 120.000000 ),\n\t\tMapLight( vec3( 544.000000, 1192.000000, -152.000000 ), 200.000000 ),\n\t\tMapLight( vec3( 608.000000, 1120.000000, -152.000000 ), 200.000000 ),\n\t\tMapLight( vec3( 448.000000, 1152.000000, -56.000000 ), 120.000000 ),\n\t\tMapLight( vec3( 992.000000, 1056.000000, 128.000000 ), 120.000000 ),\n\t\tMapLight( vec3( 720.000000, 1120.000000, 128.000000 ), 120.000000 ),\n\t\tMapLight( vec3( 720.000000, 992.000000, 64.000000 ), 120.000000 ),\n\t\tMapLight( vec3( 736.000000, 992.000000, 312.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 976.000000, 1056.000000, 312.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 736.000000, 1120.000000, 312.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 976.000000, 1184.000000, 312.000000 ), 200.000000 ),\n\t\tMapLight( vec3( 976.000000, 928.000000, 312.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 736.000000, 864.000000, 312.000000 ), 200.000000 ),\n\t\tMapLight( vec3( 864.000000, 888.000000, -32.000000 ), 120.000000 ),\n\t\tMapLight( vec3( 232.000000, 1344.000000, 48.000000 ), 350.000000 ),\n\t\tMapLight( vec3( 544.000000, 1344.000000, 48.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 864.000000, 1344.000000, 48.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 808.000000, 1360.000000, 296.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 912.000000, 1360.000000, 296.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 864.000000, 1112.000000, -24.000000 ), 150.000000 ),\n\t\tMapLight( vec3( 544.000000, 496.000000, 40.000000 ), 250.000000 ),\n\t\tMapLight( vec3( 544.000000, 864.000000, -8.000000 ), 200.000000 ),\n\t\tMapLight( vec3( 64.000000, 1488.000000, 160.000000 ), 250.000000 ),\n\t\tMapLight( vec3( 386.000000, 1554.000000, 132.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 706.000000, 1554.000000, 132.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 408.000000, 1600.000000, 248.000000 ), 200.000000 ),\n\t\tMapLight( vec3( 680.000000, 1600.000000, 248.000000 ), 200.000000 ),\n\t\tMapLight( vec3( 544.000000, 1480.000000, 96.000000 ), 250.000000 ),\n\t\tMapLight( vec3( 1000.000000, 1728.000000, 24.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 1150.000000, 1526.000000, -300.000000 ), 200.000000 ),\n\t\tMapLight( vec3( 982.000000, 1598.000000, -300.000000 ), 200.000000 ),\n\t\tMapLight( vec3( 71.000000, 1655.000000, -316.000000 ), 300.000000 ),\n\t\tMapLight( vec3( 72.000000, 1656.000000, -252.000000 ), 300.000000 )\n),\n\tMapPlane[MAP_PLANE_COUNT](\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -192.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 335u, 489u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 176.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 256.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 575u, 383u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 717u, 380u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 723u, 380u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -296.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 575u, 413u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -192.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 274u, 432u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 176.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 617u, 218u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 660u, 218u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -728.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 575u, 442u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 360.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 528u, 278u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -192.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 278u, 313u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -832.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 528u, 307u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 176.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 671u, 380u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 677u, 380u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 792.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 528u, 337u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 384.000000, PACK_10_10_10_2( TEX_CITY4_6, 533u, 239u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -448.000000, PACK_10_10_10_2( TEX_CITY4_6, 699u, 185u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -704.000000, PACK_10_10_10_2( TEX_CITY4_6, 504u, 239u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 192.000000, PACK_10_10_10_2( TEX_CITY4_6, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_CITY4_6, 226u, 462u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_CITY4_6, 263u, 462u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 1000.000000, PACK_10_10_10_2( TEX_WIZ1_4, 509u, 455u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1024.000000, PACK_10_10_10_2( TEX_WIZ1_4, 484u, 361u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -216.000000, PACK_10_10_10_2( TEX_WIZ1_4, 666u, 333u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZ1_4, 696u, 276u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x1a37u), -78.424469, PACK_10_10_10_2( TEX_WIZ1_4, 479u, 462u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xe5c7u), 680.522095, PACK_10_10_10_2( TEX_WIZ1_4, 479u, 494u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -216.000000, PACK_10_10_10_2( TEX_WIZ1_4, 621u, 161u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0xffffu), 192.000000, PACK_10_10_10_2( TEX_WIZ1_4, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -808.000000, PACK_10_10_10_2( TEX_WIZ1_4, 652u, 380u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 280.000000, PACK_10_10_10_2( TEX_WIZ1_4, 652u, 386u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x65c7u), -189.736649, PACK_10_10_10_2( TEX_WIZ1_4, 653u, 202u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x65c7u), 22.768394, PACK_10_10_10_2( TEX_WIZ1_4, 639u, 163u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_CITY4_7, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -768.000000, PACK_10_10_10_2( TEX_CITY4_7, 584u, 197u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1024.000000, PACK_10_10_10_2( TEX_CITY4_7, 576u, 254u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 192.000000, PACK_10_10_10_2( TEX_CITY4_7, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_CITY4_7, 156u, 206u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -80.000000, PACK_10_10_10_2( TEX_CITY4_7, 156u, 142u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xab07u), -82.922775, PACK_10_10_10_2( TEX_WIZWOOD1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 192.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x54f7u), 69.102310, PACK_10_10_10_2( TEX_WIZWOOD1_5, 156u, 368u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -384.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 584u, 159u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1024.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 726u, 182u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x3fffu), -316.783813, PACK_10_10_10_2( TEX_WBRICK1_5, 320u, 489u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 495u, 426u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xbfffu), 305.470123, PACK_10_10_10_2( TEX_WBRICK1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 419u, 428u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 419u, 403u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 48.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -768.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 589u, 354u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 264u, 313u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 368.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 566u, 500u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 557u, 406u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 563u, 256u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 1024.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 228u, 432u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -768.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 473u, 451u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1040.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 271u, 264u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 368.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 473u, 483u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 452u, 361u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 452u, 316u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x9583u, 0x7fffu), -695.630005, PACK_10_10_10_2( TEX_WIZWOOD1_5, 201u, 341u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1024.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 671u, 199u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x1583u, 0x7fffu), 681.809570, PACK_10_10_10_2( TEX_WIZWOOD1_5, 178u, 341u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 832.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 513u, 213u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0xffffu), 192.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -768.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 568u, 182u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x6a7bu, 0x7fffu), -147.418274, PACK_10_10_10_2( TEX_WIZWOOD1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xea7bu, 0x7fffu), 133.597809, PACK_10_10_10_2( TEX_WIZWOOD1_5, 306u, 341u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 640u, 213u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 192.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -768.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 456u, 489u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 578u, 209u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -768.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 655u, 452u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -272.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 664u, 209u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 384.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 655u, 457u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -320.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 544u, 297u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 288.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 540u, 299u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 816.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 621u, 209u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -768.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 595u, 483u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 657u, 201u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 384.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 598u, 466u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -320.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 480u, 342u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 288.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 480u, 385u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -400.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 551u, 142u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -816.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 641u, 478u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 384.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 481u, 142u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 272.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 641u, 473u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -320.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 707u, 208u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), 288.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 695u, 204u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 272.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 754u, 362u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 400.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 763u, 362u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -320.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 758u, 350u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 288.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 753u, 350u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x3fffu), -497.803162, PACK_10_10_10_2( TEX_WIZMET1_2, 723u, 362u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -816.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 718u, 362u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 400.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 672u, 362u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -320.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 666u, 350u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), 288.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 651u, 350u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x3fffu), 271.529022, PACK_10_10_10_2( TEX_WIZMET1_2, 682u, 362u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x9583u, 0x7fffu), -681.809570, PACK_10_10_10_2( TEX_WIZMET1_2, 535u, 270u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1024.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 521u, 503u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x1583u, 0x7fffu), 667.989075, PACK_10_10_10_2( TEX_WIZMET1_2, 682u, 211u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 697u, 371u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0xffffu), 384.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 406u, 232u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -416.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 612u, 183u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x9583u, 0x7fffu), -681.809570, PACK_10_10_10_2( TEX_WIZMET1_2, 153u, 391u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1024.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 638u, 383u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x1583u, 0x7fffu), 667.989075, PACK_10_10_10_2( TEX_WIZMET1_2, 681u, 233u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 659u, 371u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0xffffu), 640.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 590u, 183u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -672.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 680u, 183u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x6a7bu, 0x7fffu), -133.597809, PACK_10_10_10_2( TEX_WIZMET1_2, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xea7bu, 0x7fffu), 119.777344, PACK_10_10_10_2( TEX_WIZMET1_2, 778u, 235u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 645u, 419u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 384.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 561u, 183u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -416.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 583u, 183u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x6a7bu, 0x7fffu), -133.597809, PACK_10_10_10_2( TEX_WIZMET1_2, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xea7bu, 0x7fffu), 119.777344, PACK_10_10_10_2( TEX_WIZMET1_2, 595u, 242u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 617u, 416u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 640.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 606u, 183u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -672.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 628u, 183u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x2fe9u), -421.572174, PACK_10_10_10_2( TEX_WIZMET1_1, 599u, 522u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -32.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 785u, 344u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0xd015u), 408.259369, PACK_10_10_10_2( TEX_WIZMET1_1, 609u, 377u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -16.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 692u, 280u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x3fffu), -282.842712, PACK_10_10_10_2( TEX_WIZMET1_1, 664u, 368u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x3fffu), -463.862061, PACK_10_10_10_2( TEX_WIZMET1_1, 657u, 368u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xd015u), 457.072968, PACK_10_10_10_2( TEX_WIZMET1_1, 638u, 361u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -32.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 674u, 383u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x2fe9u), -470.385773, PACK_10_10_10_2( TEX_WIZMET1_1, 609u, 384u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -16.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 729u, 294u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xbfffu), 463.862030, PACK_10_10_10_2( TEX_WIZMET1_1, 638u, 368u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0xbfffu), 282.842712, PACK_10_10_10_2( TEX_WIZMET1_1, 631u, 368u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x57f4u, 0x7fffu), 124.252853, PACK_10_10_10_2( TEX_WIZMET1_1, 612u, 361u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -32.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 669u, 443u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xd7f4u, 0x7fffu), -137.565659, PACK_10_10_10_2( TEX_WIZMET1_1, 566u, 391u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -16.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 646u, 406u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x3fffu), -282.842712, PACK_10_10_10_2( TEX_WIZMET1_1, 645u, 368u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xbfffu), 463.862061, PACK_10_10_10_2( TEX_WIZMET1_1, 691u, 368u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xa80au, 0x7fffu), -88.752037, PACK_10_10_10_2( TEX_WIZMET1_1, 657u, 175u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -32.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 671u, 438u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x280au, 0x7fffu), 75.439232, PACK_10_10_10_2( TEX_WIZMET1_1, 420u, 372u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -16.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 652u, 406u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x3fffu), -463.862030, PACK_10_10_10_2( TEX_WIZMET1_1, 624u, 368u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0xbfffu), 282.842712, PACK_10_10_10_2( TEX_WIZMET1_1, 698u, 368u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 631u, 438u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x1a37u, 0x7fffu), 78.399994, PACK_10_10_10_2( TEX_WIZMET1_1, 661u, 390u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 152.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 631u, 425u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x9a37u, 0x7fffu), -91.199997, PACK_10_10_10_2( TEX_WIZMET1_1, 703u, 338u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -544.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 746u, 378u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 512.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 738u, 384u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 72.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 631u, 424u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xe5c7u, 0x7fffu), -75.200005, PACK_10_10_10_2( TEX_WIZMET1_1, 670u, 369u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -104.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 657u, 404u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x65c7u, 0x7fffu), 62.400002, PACK_10_10_10_2( TEX_WIZMET1_1, 733u, 338u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -544.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 700u, 378u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0xffffu), 512.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 664u, 378u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -584.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 674u, 420u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0xb46fu), 318.400024, PACK_10_10_10_2( TEX_WIZMET1_1, 765u, 334u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0xffffu), 552.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 674u, 459u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x4b8fu), -331.200012, PACK_10_10_10_2( TEX_WIZMET1_1, 759u, 334u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -144.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 643u, 378u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 112.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 617u, 378u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 472.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 585u, 526u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x4b8fu), -315.200012, PACK_10_10_10_2( TEX_WIZMET1_1, 734u, 342u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -504.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 674u, 414u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xb46fu), 302.400024, PACK_10_10_10_2( TEX_WIZMET1_1, 718u, 342u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -144.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 596u, 524u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 112.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 750u, 369u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 112.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 632u, 463u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -488.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 711u, 386u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -144.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 632u, 421u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 472.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 719u, 380u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 24.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 674u, 358u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 788u, 351u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 112.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 621u, 415u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -584.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 719u, 386u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -144.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 621u, 457u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 568.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 724u, 380u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 24.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 783u, 341u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 778u, 341u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -544.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 642u, 525u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 686u, 380u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 512.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 576u, 525u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 168.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 686u, 386u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 24.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 665u, 423u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 665u, 418u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -544.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 781u, 178u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -88.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 694u, 380u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 512.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 358u, 525u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 72.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 694u, 386u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 24.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 675u, 412u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 675u, 407u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x2fe9u), -421.572174, PACK_10_10_10_2( TEX_WIZMET1_1, 609u, 361u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -32.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 652u, 347u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0xd015u), 408.259369, PACK_10_10_10_2( TEX_WIZMET1_1, 520u, 356u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -16.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 528u, 280u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x3fffu), 305.470093, PACK_10_10_10_2( TEX_WIZMET1_1, 615u, 368u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x3fffu), -1052.174927, PACK_10_10_10_2( TEX_WIZMET1_1, 678u, 368u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xd015u), 457.072968, PACK_10_10_10_2( TEX_WIZMET1_1, 583u, 361u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -32.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 584u, 437u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x2fe9u), -470.385773, PACK_10_10_10_2( TEX_WIZMET1_1, 520u, 363u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -16.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 627u, 294u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xbfffu), 1052.174805, PACK_10_10_10_2( TEX_WIZMET1_1, 666u, 368u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0xbfffu), -305.470123, PACK_10_10_10_2( TEX_WIZMET1_1, 721u, 361u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x57f4u, 0x7fffu), 816.518738, PACK_10_10_10_2( TEX_WIZMET1_1, 621u, 361u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -32.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 583u, 433u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xd7f4u, 0x7fffu), -829.831543, PACK_10_10_10_2( TEX_WIZMET1_1, 566u, 370u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -16.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 557u, 430u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x3fffu), 305.470123, PACK_10_10_10_2( TEX_WIZMET1_1, 742u, 361u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xbfffu), 1052.174927, PACK_10_10_10_2( TEX_WIZMET1_1, 685u, 368u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xa80au, 0x7fffu), -781.017883, PACK_10_10_10_2( TEX_WIZMET1_1, 471u, 521u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -32.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 581u, 464u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x280au, 0x7fffu), 767.705078, PACK_10_10_10_2( TEX_WIZMET1_1, 566u, 349u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -16.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 470u, 461u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x3fffu), -1052.174805, PACK_10_10_10_2( TEX_WIZMET1_1, 617u, 368u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0xbfffu), -305.470123, PACK_10_10_10_2( TEX_WIZMET1_1, 609u, 368u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1016.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 631u, 489u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x1a37u, 0x7fffu), 577.600037, PACK_10_10_10_2( TEX_WIZMET1_1, 572u, 349u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 984.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 631u, 473u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x9a37u, 0x7fffu), -590.400024, PACK_10_10_10_2( TEX_WIZMET1_1, 572u, 354u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -544.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 479u, 198u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 512.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 697u, 290u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 904.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 631u, 472u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xe5c7u, 0x7fffu), -574.400024, PACK_10_10_10_2( TEX_WIZMET1_1, 580u, 359u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -936.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 631u, 504u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x65c7u, 0x7fffu), 561.600037, PACK_10_10_10_2( TEX_WIZMET1_1, 580u, 364u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -544.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 584u, 378u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0xffffu), 512.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 590u, 378u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -584.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 584u, 441u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0xb46fu), 318.400024, PACK_10_10_10_2( TEX_WIZMET1_1, 576u, 370u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0xffffu), 552.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 584u, 432u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x4b8fu), -331.200012, PACK_10_10_10_2( TEX_WIZMET1_1, 660u, 320u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -976.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 633u, 378u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 944.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 638u, 378u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 472.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 642u, 407u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x4b8fu), -315.200012, PACK_10_10_10_2( TEX_WIZMET1_1, 576u, 389u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -504.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 584u, 407u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xb46fu), 302.400024, PACK_10_10_10_2( TEX_WIZMET1_1, 576u, 384u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -976.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 744u, 369u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 944.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 579u, 521u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 944.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 632u, 451u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -488.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 611u, 386u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -976.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 632u, 409u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 472.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 616u, 380u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 24.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 683u, 351u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 584u, 393u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 944.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 621u, 433u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -584.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 616u, 386u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -976.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 621u, 445u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 568.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 621u, 380u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 24.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 678u, 341u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 673u, 341u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -544.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 698u, 365u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1016.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 681u, 386u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 512.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 570u, 527u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 1000.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 658u, 380u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 24.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 696u, 325u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 697u, 285u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -544.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 585u, 427u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -920.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 584u, 527u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 512.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 585u, 439u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 904.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 699u, 380u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 24.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 684u, 221u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZMET1_1, 417u, 401u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_CITY4_6, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -368.000000, PACK_10_10_10_2( TEX_CITY4_6, 724u, 195u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -384.000000, PACK_10_10_10_2( TEX_CITY4_6, 724u, 266u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 192.000000, PACK_10_10_10_2( TEX_CITY4_6, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_CITY4_6, 419u, 142u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_CITY4_6, 296u, 314u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xab07u), -69.102303, PACK_10_10_10_2( TEX_WIZMET1_2, 540u, 313u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 192.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x54f7u), 55.281853, PACK_10_10_10_2( TEX_WIZMET1_2, 540u, 290u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -384.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 707u, 371u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 528.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 704u, 183u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -560.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 475u, 247u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xab07u), -69.102303, PACK_10_10_10_2( TEX_WIZMET1_2, 513u, 396u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 192.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x54f7u), 55.281853, PACK_10_10_10_2( TEX_WIZMET1_2, 568u, 335u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -384.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 657u, 450u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 272.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 475u, 278u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -304.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 475u, 263u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xab07u), -69.102303, PACK_10_10_10_2( TEX_WIZMET1_2, 280u, 236u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 192.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x54f7u), 55.281853, PACK_10_10_10_2( TEX_WIZMET1_2, 513u, 357u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -384.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 602u, 447u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 784.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 475u, 216u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -816.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 475u, 201u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -88.000000, PACK_10_10_10_2( TEX_WIZ1_4, 514u, 487u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_WIZ1_4, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -216.000000, PACK_10_10_10_2( TEX_WIZ1_4, 666u, 362u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZ1_4, 666u, 369u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x1a37u), -422.480286, PACK_10_10_10_2( TEX_WIZ1_4, 580u, 398u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0xe5c7u), 336.466339, PACK_10_10_10_2( TEX_WIZ1_4, 580u, 430u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -216.000000, PACK_10_10_10_2( TEX_WIZ1_4, 536u, 331u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 192.000000, PACK_10_10_10_2( TEX_WIZ1_4, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -216.000000, PACK_10_10_10_2( TEX_WIZ1_4, 652u, 368u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZ1_4, 659u, 368u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x65c7u), -333.936493, PACK_10_10_10_2( TEX_WIZ1_4, 554u, 451u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x65c7u), 166.968262, PACK_10_10_10_2( TEX_WIZ1_4, 558u, 451u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -216.000000, PACK_10_10_10_2( TEX_WIZ1_4, 476u, 299u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 192.000000, PACK_10_10_10_2( TEX_WIZ1_4, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -216.000000, PACK_10_10_10_2( TEX_WIZ1_4, 605u, 368u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZ1_4, 432u, 501u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x65c7u), -865.199097, PACK_10_10_10_2( TEX_WIZ1_4, 542u, 497u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x65c7u), 698.230896, PACK_10_10_10_2( TEX_WIZ1_4, 566u, 302u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 1000.000000, PACK_10_10_10_2( TEX_WIZ1_4, 482u, 487u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1024.000000, PACK_10_10_10_2( TEX_WIZ1_4, 457u, 393u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -216.000000, PACK_10_10_10_2( TEX_WIZ1_4, 556u, 450u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZ1_4, 671u, 306u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x1a37u), -321.287384, PACK_10_10_10_2( TEX_WIZ1_4, 471u, 483u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xe5c7u), 923.385010, PACK_10_10_10_2( TEX_WIZ1_4, 467u, 483u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -88.000000, PACK_10_10_10_2( TEX_WIZ1_4, 487u, 455u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_WIZ1_4, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -216.000000, PACK_10_10_10_2( TEX_WIZ1_4, 666u, 349u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZ1_4, 666u, 355u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x1a37u), -665.343201, PACK_10_10_10_2( TEX_WIZ1_4, 580u, 334u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0xe5c7u), 579.329224, PACK_10_10_10_2( TEX_WIZ1_4, 580u, 366u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 704.000000, PACK_10_10_10_2( TEX_CITY4_6, 622u, 330u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 320.000000, PACK_10_10_10_2( TEX_CITY4_6, 601u, 330u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_CITY4_6, 499u, 285u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_CITY4_6, 475u, 477u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x3fffu), -791.959656, PACK_10_10_10_2( TEX_CITY4_6, 654u, 330u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -384.000000, PACK_10_10_10_2( TEX_CITY4_6, 666u, 330u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 320.000000, PACK_10_10_10_2( TEX_CITY4_6, 596u, 330u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_CITY4_6, 544u, 273u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_CITY4_6, 544u, 261u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x3fffu), -22.627411, PACK_10_10_10_2( TEX_CITY4_6, 678u, 330u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 48.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 535u, 278u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -96.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 273u, 264u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 528u, 307u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 641u, 394u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 641u, 411u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xea7bu, 0x7fffu), 105.956879, PACK_10_10_10_2( TEX_WIZMET1_2, 683u, 166u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 535u, 391u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fcdu, 0x7fffu), -334.765381, PACK_10_10_10_2( TEX_WIZMET1_2, 611u, 166u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 48.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 457u, 216u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 457u, 194u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1040.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 404u, 312u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 388u, 494u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 992.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 404u, 394u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 394u, 438u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 540u, 420u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -176.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 540u, 403u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 224.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 703u, 296u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 530u, 221u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 551u, 221u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -336.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 740u, 185u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 761u, 185u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -400.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 711u, 296u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 471u, 151u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -864.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 526u, 365u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -336.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 575u, 95u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 523u, 95u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 400.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 526u, 354u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 776.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 419u, 151u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -864.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 723u, 221u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 459u, 221u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -336.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 631u, 272u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 697u, 225u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -776.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 521u, 221u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 688.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 588u, 468u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 626u, 302u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -336.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 626u, 252u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 400.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 182u, 427u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -776.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 715u, 253u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -688.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 182u, 425u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 328.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 670u, 206u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 666u, 237u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 653u, 116u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 400.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 155u, 495u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -776.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 476u, 171u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -688.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 152u, 495u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -264.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 575u, 103u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -832.000000, PACK_10_10_10_2( TEX_CITY4_7, 620u, 328u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_CITY4_7, 620u, 325u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_CITY4_7, 697u, 140u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -80.000000, PACK_10_10_10_2( TEX_CITY4_7, 726u, 140u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 416.000000, PACK_10_10_10_2( TEX_CITY4_7, 608u, 394u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -672.000000, PACK_10_10_10_2( TEX_CITY4_7, 616u, 394u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -896.000000, PACK_10_10_10_2( TEX_CITY4_7, 695u, 287u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 832.000000, PACK_10_10_10_2( TEX_CITY4_7, 639u, 360u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_CITY4_7, 651u, 170u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -80.000000, PACK_10_10_10_2( TEX_CITY4_7, 673u, 170u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x5a37u), -257.595032, PACK_10_10_10_2( TEX_CITY4_7, 635u, 394u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x5a37u), -658.298401, PACK_10_10_10_2( TEX_CITY4_7, 644u, 394u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -896.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 609u, 286u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 702u, 353u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 56.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 559u, 170u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -72.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 492u, 170u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x5a37u), 314.838348, PACK_10_10_10_2( TEX_WIZMET1_2, 652u, 393u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x5a37u), -1230.731812, PACK_10_10_10_2( TEX_WIZMET1_2, 709u, 248u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -832.000000, PACK_10_10_10_2( TEX_CITY4_7, 544u, 344u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -992.000000, PACK_10_10_10_2( TEX_CITY4_7, 714u, 363u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_CITY4_7, 601u, 320u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_CITY4_7, 513u, 140u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -80.000000, PACK_10_10_10_2( TEX_CITY4_7, 699u, 96u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x25c7u), -400.703339, PACK_10_10_10_2( TEX_CITY4_7, 710u, 398u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 720.000000, PACK_10_10_10_2( TEX_CITY4_7, 692u, 407u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -832.000000, PACK_10_10_10_2( TEX_CITY4_7, 749u, 332u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 96.000000, PACK_10_10_10_2( TEX_CITY4_7, 704u, 382u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_CITY4_7, 637u, 320u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_CITY4_7, 611u, 140u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -80.000000, PACK_10_10_10_2( TEX_CITY4_7, 642u, 140u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x25c7u), -887.271729, PACK_10_10_10_2( TEX_CITY4_7, 746u, 398u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -368.000000, PACK_10_10_10_2( TEX_CITY4_7, 686u, 407u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_CITY4_7, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1280.000000, PACK_10_10_10_2( TEX_CITY4_7, 716u, 328u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -288.000000, PACK_10_10_10_2( TEX_CITY4_7, 659u, 249u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 832.000000, PACK_10_10_10_2( TEX_CITY4_7, 776u, 301u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_CITY4_7, 363u, 73u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -80.000000, PACK_10_10_10_2( TEX_CITY4_7, 328u, 272u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 368.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 388u, 339u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 440u, 431u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -416.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 326u, 497u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 440u, 480u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 607u, 342u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 607u, 308u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 672.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 380u, 480u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 316u, 233u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -720.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 388u, 431u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 314u, 443u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 574u, 291u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 567u, 429u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 720.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 527u, 463u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 525u, 493u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 562u, 353u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 562u, 351u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xda37u, 0x7fffu), -460.800018, PACK_10_10_10_2( TEX_WIZMET1_2, 527u, 455u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 416.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 535u, 459u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 595u, 405u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 595u, 482u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 602u, 368u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xda37u, 0x7fffu), -217.600006, PACK_10_10_10_2( TEX_WIZMET1_2, 535u, 408u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -368.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 535u, 451u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 605u, 370u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 605u, 362u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 766u, 140u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x25c7u, 0x7fffu), 409.600006, PACK_10_10_10_2( TEX_WIZMET1_2, 527u, 489u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -672.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 527u, 420u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 579u, 448u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 586u, 344u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 579u, 429u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x25c7u, 0x7fffu), 652.800049, PACK_10_10_10_2( TEX_WIZMET1_2, 535u, 425u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 128.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -816.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -144.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 256.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -448.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 248.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 944.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -816.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -960.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 256.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -448.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 248.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 144.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -272.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -944.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 256.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -448.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 248.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 128.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -831.999939, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -960.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 815.999939, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -448.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 320.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 144.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -816.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -944.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 272.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -448.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 432.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x1583u, 0x7fffu), 654.168640, PACK_10_10_10_2( TEX_WIZMET1_2, 623u, 166u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 535u, 459u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x8031u, 0x7fffu), -339.996063, PACK_10_10_10_2( TEX_WIZMET1_2, 695u, 149u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1040.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 468u, 296u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 373u, 259u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 373u, 238u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -88.000000, PACK_10_10_10_2( TEX_WIZ1_4, 722u, 187u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_WIZ1_4, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 416.000000, PACK_10_10_10_2( TEX_WIZ1_4, 763u, 364u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -640.000000, PACK_10_10_10_2( TEX_WIZ1_4, 776u, 364u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x8d1bu, 0x7fffu), -149.259491, PACK_10_10_10_2( TEX_WIZ1_4, 590u, 433u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xf2e3u, 0x7fffu), 63.245552, PACK_10_10_10_2( TEX_WIZ1_4, 590u, 382u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 1000.000000, PACK_10_10_10_2( TEX_WIZ1_4, 295u, 346u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1024.000000, PACK_10_10_10_2( TEX_WIZ1_4, 295u, 509u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 416.000000, PACK_10_10_10_2( TEX_WIZ1_4, 479u, 509u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -640.000000, PACK_10_10_10_2( TEX_WIZ1_4, 90u, 508u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x72e3u, 0x7fffu), 194.796310, PACK_10_10_10_2( TEX_WIZ1_4, 489u, 356u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0d1bu, 0x7fffu), 407.301331, PACK_10_10_10_2( TEX_WIZ1_4, 489u, 407u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 144.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 579u, 451u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -768.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 252u, 475u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1008.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 579u, 437u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 752.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 252u, 489u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 80.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 502u, 139u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 575u, 118u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 271u, 475u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -880.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 664u, 316u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -896.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 271u, 489u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 848.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 673u, 316u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 80.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 676u, 274u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 667u, 274u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 638u, 362u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x6c09u), -271.639893, PACK_10_10_10_2( TEX_WIZMET1_2, 741u, 73u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -960.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 622u, 359u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x93f5u), 256.117615, PACK_10_10_10_2( TEX_WIZMET1_2, 740u, 113u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 480.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 704u, 310u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -608.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 513u, 324u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 480.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 590u, 324u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1216.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 708u, 336u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -608.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 620u, 320u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 960.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 695u, 282u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 24.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 296u, 202u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -40.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 302u, 322u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 896.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 673u, 410u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 56.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 600u, 306u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -72.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 605u, 306u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x5a37u), 314.838379, PACK_10_10_10_2( TEX_WIZMET1_2, 634u, 413u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x2fe9u), -1207.027588, PACK_10_10_10_2( TEX_WIZMET1_2, 569u, 530u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 896.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 687u, 245u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 56.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 692u, 268u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -72.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 699u, 268u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x3fffu), -45.254883, PACK_10_10_10_2( TEX_WIZMET1_2, 690u, 406u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x5a37u), -1187.799316, PACK_10_10_10_2( TEX_WIZMET1_2, 695u, 406u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 896.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 679u, 397u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 56.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 610u, 293u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -72.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 603u, 293u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x2fe9u), -257.380920, PACK_10_10_10_2( TEX_WIZMET1_2, 686u, 406u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x4b8fu), -1280.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 616u, 413u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1088.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 590u, 461u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 48.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 707u, 166u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 600u, 287u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0xa5c7u), -343.460052, PACK_10_10_10_2( TEX_WIZMET1_2, 605u, 413u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xd015u), 1402.282104, PACK_10_10_10_2( TEX_WIZMET1_2, 599u, 413u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1088.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 676u, 396u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 48.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 683u, 251u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 363u, 183u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0xbfffu), 135.764465, PACK_10_10_10_2( TEX_WIZMET1_2, 688u, 406u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xa5c7u), 1245.042603, PACK_10_10_10_2( TEX_WIZMET1_2, 656u, 409u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1088.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 667u, 396u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 48.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 647u, 113u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 706u, 82u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0xd015u), 434.884979, PACK_10_10_10_2( TEX_WIZMET1_2, 598u, 468u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xb46fu), 1292.800049, PACK_10_10_10_2( TEX_WIZMET1_2, 594u, 413u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1088.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 644u, 285u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1152.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 702u, 252u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 48.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 537u, 142u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 514u, 142u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xa5c7u), 1202.110107, PACK_10_10_10_2( TEX_WIZMET1_2, 670u, 384u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0xa5c7u), -343.460052, PACK_10_10_10_2( TEX_WIZMET1_2, 670u, 387u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 687.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 252u, 394u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1231.999878, PACK_10_10_10_2( TEX_WBRICK1_5, 517u, 478u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 517u, 390u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 293u, 169u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1088.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 517u, 429u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -695.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 252u, 443u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1231.999878, PACK_10_10_10_2( TEX_WBRICK1_5, 507u, 352u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -703.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 313u, 245u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -320.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 596u, 362u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 596u, 351u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 695.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 302u, 245u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 1151.999878, PACK_10_10_10_2( TEX_WBRICK1_5, 507u, 408u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -703.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 552u, 275u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -320.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 551u, 303u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1088.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 593u, 396u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 695.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 526u, 275u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1151.999878, PACK_10_10_10_2( TEX_WBRICK1_5, 596u, 396u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 192.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 551u, 311u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -703.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 407u, 345u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 551u, 337u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1088.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 543u, 517u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 695.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 407u, 317u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1151.999878, PACK_10_10_10_2( TEX_WBRICK1_5, 551u, 517u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 603u, 385u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -703.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 275u, 282u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -320.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 598u, 390u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 603u, 340u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1088.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 496u, 401u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 696.000000, PACK_10_10_10_2( TEX_DEM4_1, 275u, 338u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 1023.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 502u, 408u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -703.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 280u, 338u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 831.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 500u, 352u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -320.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 593u, 373u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 593u, 389u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 696.000000, PACK_10_10_10_2( TEX_DEM4_1, 280u, 282u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0007u), -959.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 502u, 352u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -703.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 430u, 403u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -320.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 605u, 347u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 696.000000, PACK_10_10_10_2( TEX_DEM4_1, 345u, 433u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1023.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 578u, 360u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 959.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 472u, 403u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 128.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 605u, 356u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -703.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 347u, 512u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 598u, 379u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 696.000000, PACK_10_10_10_2( TEX_DEM4_1, 347u, 490u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1023.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 578u, 483u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 959.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 384u, 512u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 598u, 344u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 687.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 153u, 487u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 831.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 292u, 227u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 579u, 329u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 561u, 396u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -696.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 153u, 431u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1024.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 517u, 380u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 687.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 499u, 306u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 599u, 364u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1088.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 654u, 356u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -696.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 508u, 306u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1024.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 693u, 356u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 160.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 599u, 329u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 687.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 414u, 463u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 597u, 396u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1088.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 561u, 405u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -696.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 414u, 438u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1024.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 561u, 430u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -32.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 603u, 358u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 367.999969, PACK_10_10_10_2( TEX_WBRICK1_5, 223u, 227u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1231.999878, PACK_10_10_10_2( TEX_WBRICK1_5, 158u, 488u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 831.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 478u, 333u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 494u, 350u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 498u, 350u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -391.999969, PACK_10_10_10_2( TEX_DEM4_1, 178u, 227u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1231.999878, PACK_10_10_10_2( TEX_WBRICK1_5, 222u, 487u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -399.999969, PACK_10_10_10_2( TEX_WBRICK1_5, 131u, 359u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 567u, 247u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 551u, 361u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 391.999969, PACK_10_10_10_2( TEX_WBRICK1_5, 131u, 310u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 959.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 480u, 333u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -399.999969, PACK_10_10_10_2( TEX_WBRICK1_5, 328u, 497u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 831.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 549u, 331u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 638u, 413u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 763u, 275u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 391.999969, PACK_10_10_10_2( TEX_WBRICK1_5, 397u, 222u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0007u), -895.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 222u, 431u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -399.999969, PACK_10_10_10_2( TEX_WBRICK1_5, 572u, 306u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 763u, 171u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 391.999969, PACK_10_10_10_2( TEX_WBRICK1_5, 551u, 306u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -959.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 717u, 356u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 895.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 704u, 356u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 160.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 635u, 389u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -399.999969, PACK_10_10_10_2( TEX_WBRICK1_5, 428u, 513u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 584u, 341u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 391.999969, PACK_10_10_10_2( TEX_WBRICK1_5, 428u, 488u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -959.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 593u, 455u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 895.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 593u, 480u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -32.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 638u, 389u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 432u, 318u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1200.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 571u, 316u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -896.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 432u, 302u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1104.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 364u, 343u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 644u, 204u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 635u, 204u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 1007.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 85u, 431u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1439.999878, PACK_10_10_10_2( TEX_BRICKA2_2, 387u, 439u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1039.999878, PACK_10_10_10_2( TEX_BRICKA2_2, 85u, 487u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -320.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 409u, 285u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 409u, 245u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 1087.999878, PACK_10_10_10_2( TEX_BRICKA2_2, 402u, 382u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 1007.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 344u, 245u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -320.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 569u, 373u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 569u, 390u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 959.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 463u, 457u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1015.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 359u, 339u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0007u), -1023.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 471u, 408u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 1007.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 516u, 275u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -320.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 565u, 355u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1087.999878, PACK_10_10_10_2( TEX_BRICKA2_2, 562u, 411u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1015.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 481u, 275u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 1023.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 545u, 485u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 192.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 565u, 399u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 1007.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 414u, 289u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 565u, 320u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1087.999878, PACK_10_10_10_2( TEX_BRICKA2_2, 514u, 517u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1015.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 414u, 260u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 1023.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 512u, 517u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 569u, 349u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 1007.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 311u, 469u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 783.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 471u, 352u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -320.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 562u, 363u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 562u, 377u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1015.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 311u, 413u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0007u), -895.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 466u, 408u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 1007.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 445u, 470u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -320.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 572u, 415u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -959.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 545u, 382u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1015.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 445u, 448u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 895.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 545u, 427u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 128.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 569u, 415u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 1007.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 454u, 397u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 518u, 349u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -959.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 351u, 490u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1015.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 454u, 376u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 895.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 545u, 504u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 565u, 421u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1008.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 547u, 403u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 525u, 416u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 80.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 603u, 297u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 597u, 297u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x3fffu), 147.078247, PACK_10_10_10_2( TEX_WBRICK1_5, 547u, 430u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 400.000000, PACK_10_10_10_2( TEX_WATER1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1232.000000, PACK_10_10_10_2( TEX_WATER1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -688.000000, PACK_10_10_10_2( TEX_WATER1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_WATER1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 136.000000, PACK_10_10_10_2( TEX_WATER1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_WATER1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 704.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 547u, 389u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 554u, 375u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 80.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 621u, 297u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 616u, 297u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x3fffu), -1063.488525, PACK_10_10_10_2( TEX_WBRICK1_5, 720u, 209u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 703.999939, PACK_10_10_10_2( TEX_LAVA1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1232.000000, PACK_10_10_10_2( TEX_LAVA1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1007.999939, PACK_10_10_10_2( TEX_LAVA1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_LAVA1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 112.000000, PACK_10_10_10_2( TEX_LAVA1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_LAVA1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 144.000000, PACK_10_10_10_2( TEX_WATER2, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1232.000000, PACK_10_10_10_2( TEX_WATER2, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -384.000000, PACK_10_10_10_2( TEX_WATER2, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_WATER2, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 144.000000, PACK_10_10_10_2( TEX_WATER2, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_WATER2, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 400.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 568u, 266u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xeef4u, 0x7fffu), 56.859390, PACK_10_10_10_2( TEX_WIZWOOD1_5, 366u, 208u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -544.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 478u, 259u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x6ef5u, 0x7fffu), -71.480362, PACK_10_10_10_2( TEX_WIZWOOD1_5, 366u, 343u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1232.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 669u, 242u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0xffffu), 832.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 652u, 242u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -688.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 669u, 259u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x110au, 0x7fffu), 498.738007, PACK_10_10_10_2( TEX_WIZWOOD1_5, 351u, 118u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 544.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 613u, 259u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x9109u, 0x7fffu), -513.359009, PACK_10_10_10_2( TEX_WIZWOOD1_5, 351u, 73u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1232.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 590u, 256u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 832.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 573u, 256u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -688.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 579u, 402u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x110au, 0x7fffu), 484.117004, PACK_10_10_10_2( TEX_WIZMET1_2, 706u, 170u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 544.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 697u, 268u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x9109u, 0x7fffu), -498.738007, PACK_10_10_10_2( TEX_WIZMET1_2, 694u, 209u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1024.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 556u, 258u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 992.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 538u, 258u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 400.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 642u, 378u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xeef4u, 0x7fffu), 42.238388, PACK_10_10_10_2( TEX_WIZMET1_2, 566u, 228u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -544.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 595u, 371u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x6ef5u, 0x7fffu), -56.859390, PACK_10_10_10_2( TEX_WIZMET1_2, 699u, 221u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1024.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 600u, 244u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0xffffu), 992.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 635u, 244u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 496.000000, PACK_10_10_10_2( TEX_WIZ1_4, 497u, 390u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1008.000000, PACK_10_10_10_2( TEX_WIZ1_4, 342u, 526u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -592.000000, PACK_10_10_10_2( TEX_WIZ1_4, 492u, 525u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 976.000000, PACK_10_10_10_2( TEX_WIZ1_4, 395u, 395u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 40.000000, PACK_10_10_10_2( TEX_WIZ1_4, 673u, 199u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_WIZ1_4, 659u, 199u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 47.999996, PACK_10_10_10_2( TEX_WBRICK1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1215.999878, PACK_10_10_10_2( TEX_WBRICK1_5, 545u, 419u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 831.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 552u, 419u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 566u, 206u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 563u, 380u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -63.999996, PACK_10_10_10_2( TEX_WINDOW02_1, 178u, 276u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1407.999878, PACK_10_10_10_2( TEX_WBRICK1_5, 490u, 382u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -79.999992, PACK_10_10_10_2( TEX_WBRICK1_5, 49u, 431u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -336.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 513u, 328u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 513u, 368u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 47.999996, PACK_10_10_10_2( TEX_WBRICK1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 1055.999878, PACK_10_10_10_2( TEX_WBRICK1_5, 495u, 382u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -79.999992, PACK_10_10_10_2( TEX_WBRICK1_5, 280u, 233u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 831.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 540u, 379u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 552u, 223u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 552u, 245u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 63.999996, PACK_10_10_10_2( TEX_WBRICK1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0007u), -991.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 547u, 419u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -79.999992, PACK_10_10_10_2( TEX_WBRICK1_5, 532u, 306u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 540u, 301u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 63.999996, PACK_10_10_10_2( TEX_WBRICK1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1055.999878, PACK_10_10_10_2( TEX_WBRICK1_5, 657u, 489u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 991.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 661u, 356u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 160.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 620u, 287u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -79.999992, PACK_10_10_10_2( TEX_WBRICK1_5, 251u, 306u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 620u, 296u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 63.999996, PACK_10_10_10_2( TEX_WBRICK1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1055.999878, PACK_10_10_10_2( TEX_WBRICK1_5, 552u, 376u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 991.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 552u, 397u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 32.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 620u, 304u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 80.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 523u, 266u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xeef4u, 0x7fffu), 186.823700, PACK_10_10_10_2( TEX_WIZWOOD1_5, 401u, 253u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -224.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 624u, 253u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x6ef5u, 0x7fffu), -201.444672, PACK_10_10_10_2( TEX_WIZWOOD1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1232.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 554u, 256u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0xffffu), 832.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 738u, 242u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -368.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 669u, 256u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x110au, 0x7fffu), 368.773712, PACK_10_10_10_2( TEX_WIZWOOD1_5, 385u, 298u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 224.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 624u, 249u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x9109u, 0x7fffu), -383.394714, PACK_10_10_10_2( TEX_WIZWOOD1_5, 385u, 163u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1232.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 585u, 242u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 832.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 568u, 242u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -368.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 523u, 499u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x110au, 0x7fffu), 354.152710, PACK_10_10_10_2( TEX_WIZMET1_2, 748u, 65u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 224.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 611u, 371u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x9109u, 0x7fffu), -368.773712, PACK_10_10_10_2( TEX_WIZMET1_2, 718u, 216u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1024.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 637u, 244u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 992.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 602u, 244u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 80.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 616u, 378u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xeef4u, 0x7fffu), 172.202698, PACK_10_10_10_2( TEX_WIZMET1_2, 778u, 209u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -224.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 626u, 371u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x6ef5u, 0x7fffu), -186.823700, PACK_10_10_10_2( TEX_WIZMET1_2, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1024.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 721u, 244u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0xffffu), 992.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 571u, 258u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 1007.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 555u, 295u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -959.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 559u, 386u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1015.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 390u, 507u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 895.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 559u, 401u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -128.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 572u, 380u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 572u, 397u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 496.000000, PACK_10_10_10_2( TEX_WIZ1_4, 480u, 423u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1168.000000, PACK_10_10_10_2( TEX_WIZ1_4, 395u, 417u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -592.000000, PACK_10_10_10_2( TEX_WIZ1_4, 480u, 407u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1136.000000, PACK_10_10_10_2( TEX_WIZ1_4, 395u, 441u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 40.000000, PACK_10_10_10_2( TEX_WIZ1_4, 395u, 270u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -176.000000, PACK_10_10_10_2( TEX_WIZ1_4, 687u, 182u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 272.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 482u, 421u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1248.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 282u, 305u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -696.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 451u, 527u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1232.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 433u, 182u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 48.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 282u, 169u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -176.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 637u, 149u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 80.000000, PACK_10_10_10_2( TEX_CITY4_7, 651u, 386u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1408.000000, PACK_10_10_10_2( TEX_CITY4_7, 582u, 201u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1008.000000, PACK_10_10_10_2( TEX_CITY4_7, 499u, 356u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1216.000000, PACK_10_10_10_2( TEX_CITY4_7, 582u, 225u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 32.000000, PACK_10_10_10_2( TEX_CITY4_7, 259u, 54u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -48.000000, PACK_10_10_10_2( TEX_CITY4_7, 259u, 32u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xd30bu), 1186.556641, PACK_10_10_10_2( TEX_CITY4_7, 694u, 340u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 80.000000, PACK_10_10_10_2( TEX_CITY4_7, 627u, 358u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1368.000000, PACK_10_10_10_2( TEX_CITY4_7, 742u, 342u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -288.000000, PACK_10_10_10_2( TEX_CITY4_7, 645u, 358u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 48.000000, PACK_10_10_10_2( TEX_CITY4_7, 454u, 262u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_CITY4_7, 454u, 244u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1216.000000, PACK_10_10_10_2( TEX_CITY4_7, 718u, 342u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 144.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 533u, 489u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1232.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 485u, 480u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -288.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 533u, 513u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1216.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 518u, 278u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 80.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 641u, 223u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -176.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 624u, 223u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 704.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 673u, 318u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1232.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 695u, 302u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1008.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 662u, 361u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1152.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 602u, 313u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 48.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 620u, 65u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 351u, 390u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 696.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 523u, 494u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1248.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 351u, 377u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1008.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 523u, 479u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1232.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 351u, 362u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 48.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 667u, 104u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -176.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 672u, 159u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 704.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 473u, 455u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1232.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 527u, 501u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 48.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 612u, 264u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -176.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 628u, 264u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0xbfffu), 350.724915, PACK_10_10_10_2( TEX_BRICKA2_2, 483u, 385u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1008.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 473u, 439u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1232.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 497u, 517u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 48.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 578u, 264u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -176.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 594u, 264u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xbfffu), 1561.291748, PACK_10_10_10_2( TEX_BRICKA2_2, 480u, 421u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -688.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 473u, 470u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1232.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 532u, 486u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 48.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 623u, 264u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -176.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 607u, 264u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xbfffu), 1335.017578, PACK_10_10_10_2( TEX_WBRICK1_5, 483u, 370u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 224.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 664u, 221u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1296.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 486u, 135u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -864.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 477u, 313u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1232.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 556u, 135u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -336.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 698u, 30u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 627u, 30u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 368.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 228u, 382u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1296.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 440u, 339u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -416.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 225u, 227u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1232.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 456u, 332u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 607u, 310u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 607u, 301u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 672.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 338u, 480u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1296.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 414u, 478u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -720.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 330u, 431u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1232.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 314u, 394u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 574u, 284u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 574u, 275u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 720.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 477u, 437u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1232.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 562u, 344u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1296.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 418u, 496u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 569u, 267u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xda37u, 0x7fffu), -460.800018, PACK_10_10_10_2( TEX_WIZMET1_2, 477u, 446u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 416.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 485u, 416u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1232.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 602u, 361u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1296.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 602u, 344u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 595u, 362u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xda37u, 0x7fffu), -217.600006, PACK_10_10_10_2( TEX_WIZMET1_2, 485u, 434u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -368.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 485u, 442u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1232.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 605u, 456u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1296.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 605u, 431u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 605u, 310u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x25c7u, 0x7fffu), 409.600006, PACK_10_10_10_2( TEX_WIZMET1_2, 644u, 306u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -672.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 477u, 429u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1232.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 572u, 396u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1296.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 579u, 439u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 572u, 353u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x25c7u, 0x7fffu), 652.800049, PACK_10_10_10_2( TEX_WIZMET1_2, 485u, 373u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x1583u, 0x7fffu), 654.168640, PACK_10_10_10_2( TEX_WIZMET1_2, 461u, 127u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 477u, 472u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x8031u, 0x7fffu), -339.996063, PACK_10_10_10_2( TEX_WIZMET1_2, 153u, 383u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1040.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 418u, 318u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1296.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 337u, 454u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1232.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 337u, 476u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1040.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 354u, 436u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1296.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 402u, 494u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 992.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 354u, 270u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1232.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 395u, 494u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 533u, 267u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -176.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 533u, 275u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xea7bu, 0x7fffu), 105.956879, PACK_10_10_10_2( TEX_WIZMET1_2, 635u, 116u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 477u, 463u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fcdu, 0x7fffu), -334.765381, PACK_10_10_10_2( TEX_WIZMET1_2, 659u, 116u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 48.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1296.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 457u, 172u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0xffffu), 1232.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 457u, 281u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 48.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1296.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 513u, 242u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -96.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 354u, 353u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1232.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 502u, 438u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 634u, 327u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -176.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 634u, 336u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 695.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 496u, 295u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1023.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 596u, 401u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -703.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 505u, 295u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 959.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 596u, 386u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -128.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 596u, 412u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 598u, 353u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 695.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 337u, 295u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1151.999878, PACK_10_10_10_2( TEX_BRICKA2_2, 593u, 503u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -703.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 518u, 289u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 1087.999878, PACK_10_10_10_2( TEX_BRICKA2_2, 593u, 487u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 551u, 346u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 551u, 363u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 1007.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 464u, 501u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1087.999878, PACK_10_10_10_2( TEX_BRICKA2_2, 559u, 441u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1015.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 507u, 289u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 1023.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 559u, 425u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 572u, 358u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 565u, 381u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 703.999939, PACK_10_10_10_2( TEX_WIZMET1_2, 559u, 356u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x8510u, 0x7fffu), -341.343567, PACK_10_10_10_2( TEX_WIZMET1_2, 632u, 234u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xfaedu, 0x7fffu), 134.949783, PACK_10_10_10_2( TEX_WIZMET1_2, 616u, 234u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0xf5dcu), 944.648560, PACK_10_10_10_2( TEX_WIZMET1_2, 620u, 316u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x0a22u), -1151.042358, PACK_10_10_10_2( TEX_WIZMET1_2, 558u, 316u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 703.999939, PACK_10_10_10_2( TEX_WIZMET1_2, 551u, 356u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x8510u, 0x7fffu), -341.343567, PACK_10_10_10_2( TEX_WIZMET1_2, 699u, 209u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xfaedu, 0x7fffu), 134.949783, PACK_10_10_10_2( TEX_WIZMET1_2, 714u, 209u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0xf5dcu), 1071.660034, PACK_10_10_10_2( TEX_WIZMET1_2, 573u, 316u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x0a22u), -1278.053833, PACK_10_10_10_2( TEX_WIZMET1_2, 589u, 316u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1007.999939, PACK_10_10_10_2( TEX_WIZMET1_2, 577u, 356u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7aeeu, 0x7fffu), -128.996124, PACK_10_10_10_2( TEX_WIZMET1_2, 694u, 235u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0511u, 0x7fffu), 347.297241, PACK_10_10_10_2( TEX_WIZMET1_2, 535u, 241u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xf5dcu), 1093.490234, PACK_10_10_10_2( TEX_WIZMET1_2, 617u, 316u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x0a22u), -875.189087, PACK_10_10_10_2( TEX_WIZMET1_2, 632u, 316u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1007.999939, PACK_10_10_10_2( TEX_WIZMET1_2, 568u, 356u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7aeeu, 0x7fffu), -128.996124, PACK_10_10_10_2( TEX_WIZMET1_2, 675u, 227u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0511u, 0x7fffu), 347.297241, PACK_10_10_10_2( TEX_WIZMET1_2, 659u, 227u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xf5dcu), 1220.501709, PACK_10_10_10_2( TEX_WIZMET1_2, 523u, 316u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x0a22u), -1002.200684, PACK_10_10_10_2( TEX_WIZMET1_2, 586u, 316u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 704.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1232.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1008.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 832.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -336.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 320.000000, PACK_10_10_10_2( TEX_SKY1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1007.999939, PACK_10_10_10_2( TEX_WIZMET1_2, 616u, 379u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7aeeu, 0x7fffu), -41.675667, PACK_10_10_10_2( TEX_WIZMET1_2, 582u, 247u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0511u, 0x7fffu), 259.976807, PACK_10_10_10_2( TEX_WIZMET1_2, 648u, 242u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xf5dcu), 1029.984375, PACK_10_10_10_2( TEX_WIZMET1_2, 644u, 331u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x0a22u), -811.683350, PACK_10_10_10_2( TEX_WIZMET1_2, 628u, 331u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 703.999939, PACK_10_10_10_2( TEX_WIZMET1_2, 614u, 379u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x8510u, 0x7fffu), -254.023132, PACK_10_10_10_2( TEX_WIZMET1_2, 585u, 251u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xfaedu, 0x7fffu), 47.629333, PACK_10_10_10_2( TEX_WIZMET1_2, 698u, 246u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0xf5dcu), 785.884033, PACK_10_10_10_2( TEX_WIZMET1_2, 682u, 326u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x0a22u), -992.277832, PACK_10_10_10_2( TEX_WIZMET1_2, 570u, 331u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1376.000000, PACK_10_10_10_2( TEX_SKILL0, 602u, 441u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -280.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 487u, 509u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1392.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 602u, 425u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -112.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 664u, 258u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -16.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 659u, 364u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 508u, 400u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1376.000000, PACK_10_10_10_2( TEX_SKILL0, 610u, 472u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1392.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 610u, 487u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 184.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 508u, 415u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -112.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 666u, 371u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -16.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 666u, 357u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -208.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 508u, 431u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1376.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 737u, 375u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1392.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 744u, 375u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -112.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 751u, 237u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 657u, 344u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 208.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 601u, 309u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), 96.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 771u, 237u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1376.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 778u, 387u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1392.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 710u, 391u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -16.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 717u, 241u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 657u, 297u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 208.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 411u, 397u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 738u, 241u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1384.000000, PACK_10_10_10_2( TEX_TELEPORT, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_TELEPORT, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1392.000000, PACK_10_10_10_2( TEX_TELEPORT, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 208.000000, PACK_10_10_10_2( TEX_TELEPORT, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -96.000000, PACK_10_10_10_2( TEX_TELEPORT, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_TELEPORT, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 47.999996, PACK_10_10_10_2( TEX_WBRICK1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1440.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 158u, 310u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -695.999939, PACK_10_10_10_2( TEX_WBRICK1_5, 366u, 284u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1408.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 158u, 359u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 664u, 27u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 514u, 37u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 384.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 256u, 298u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1407.999878, PACK_10_10_10_2( TEX_WBRICK1_5, 502u, 379u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -400.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 256u, 183u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 1295.999878, PACK_10_10_10_2( TEX_WBRICK1_5, 495u, 379u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -336.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 619u, 305u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 619u, 263u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 688.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 256u, 356u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0007u), -1407.999878, PACK_10_10_10_2( TEX_WBRICK1_5, 466u, 379u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -704.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 256u, 240u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xfff7u), 1295.999878, PACK_10_10_10_2( TEX_WBRICK1_5, 459u, 379u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -336.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 473u, 367u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 586u, 249u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 695.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 354u, 382u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1440.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 88u, 488u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1007.999939, PACK_10_10_10_2( TEX_BRICKA2_2, 304u, 245u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1408.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 193u, 326u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -320.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 635u, 108u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -184.000000, PACK_10_10_10_2( TEX_BRICKA2_2, 662u, 101u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1376.000000, PACK_10_10_10_2( TEX_SKILL1, 603u, 434u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -592.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 512u, 470u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1392.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 603u, 398u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -96.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 625u, 361u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 743u, 229u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 568.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 512u, 482u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1376.000000, PACK_10_10_10_2( TEX_SKILL1, 610u, 446u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1392.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 610u, 373u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 496.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 512u, 506u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -96.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 751u, 225u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 725u, 232u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -520.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 512u, 494u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1376.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 720u, 344u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1392.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 708u, 344u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -112.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 696u, 206u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -592.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 593u, 395u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 496.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 586u, 395u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), 96.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 740u, 203u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1376.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 659u, 333u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1392.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 635u, 333u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -16.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 623u, 184u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -592.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 576u, 407u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 496.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 569u, 407u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 603u, 184u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1384.000000, PACK_10_10_10_2( TEX_TELEPORT, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -568.000000, PACK_10_10_10_2( TEX_TELEPORT, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1392.000000, PACK_10_10_10_2( TEX_TELEPORT, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 520.000000, PACK_10_10_10_2( TEX_TELEPORT, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -96.000000, PACK_10_10_10_2( TEX_TELEPORT, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_TELEPORT, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1376.000000, PACK_10_10_10_2( TEX_SKILL2, 534u, 503u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -912.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 508u, 446u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1392.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 534u, 456u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -112.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 609u, 258u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -16.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 590u, 368u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 888.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 508u, 493u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1376.000000, PACK_10_10_10_2( TEX_SKILL2, 547u, 372u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1392.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 547u, 356u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 816.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 508u, 508u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -112.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 695u, 232u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -16.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 612u, 258u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -840.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 512u, 375u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1376.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 620u, 388u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1392.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 627u, 388u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -112.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 634u, 251u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -888.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 411u, 364u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 840.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 544u, 185u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), 96.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 640u, 251u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1376.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 647u, 400u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1392.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 690u, 387u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -16.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 696u, 237u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -888.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 579u, 407u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 840.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 589u, 407u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 656u, 241u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 1384.000000, PACK_10_10_10_2( TEX_TELEPORT, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -888.000000, PACK_10_10_10_2( TEX_TELEPORT, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1392.000000, PACK_10_10_10_2( TEX_TELEPORT, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 840.000000, PACK_10_10_10_2( TEX_TELEPORT, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -96.000000, PACK_10_10_10_2( TEX_TELEPORT, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_TELEPORT, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x5f01u), -797.292664, PACK_10_10_10_2( TEX_WIZWOOD1_5, 444u, 49u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1408.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 728u, 272u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0xa0fdu), 782.586304, PACK_10_10_10_2( TEX_WIZWOOD1_5, 292u, 272u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0xffffu), 1296.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 635u, 271u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -688.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 573u, 269u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 400.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 587u, 269u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x5f01u), -797.292664, PACK_10_10_10_2( TEX_WIZWOOD1_5, 259u, 372u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -1408.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 669u, 272u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0xa0fdu), 782.586304, PACK_10_10_10_2( TEX_WIZWOOD1_5, 295u, 372u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0xffffu), 1296.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 669u, 264u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -384.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 600u, 269u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 80.000000, PACK_10_10_10_2( TEX_WIZWOOD1_5, 363u, 490u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0007u), -1407.999878, PACK_10_10_10_2( TEX_WIZMET1_2, 285u, 331u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x8a21u), -75.413116, PACK_10_10_10_2( TEX_WIZMET1_2, 583u, 268u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x8a21u), 400.880249, PACK_10_10_10_2( TEX_WIZMET1_2, 575u, 244u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x8a21u), 916.864746, PACK_10_10_10_2( TEX_WIZMET1_2, 588u, 333u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x8a21u), -591.397583, PACK_10_10_10_2( TEX_WIZMET1_2, 624u, 333u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0007u), -1407.999878, PACK_10_10_10_2( TEX_WIZMET1_2, 667u, 356u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x8a21u), -75.413116, PACK_10_10_10_2( TEX_WIZMET1_2, 700u, 182u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x8a21u), 400.880249, PACK_10_10_10_2( TEX_WIZMET1_2, 553u, 232u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x8a21u), 1123.258545, PACK_10_10_10_2( TEX_WIZMET1_2, 600u, 333u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x8a21u), -797.791382, PACK_10_10_10_2( TEX_WIZMET1_2, 576u, 333u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0007u), -1407.999878, PACK_10_10_10_2( TEX_WIZMET1_2, 682u, 359u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x8a21u), -51.598450, PACK_10_10_10_2( TEX_WIZMET1_2, 572u, 244u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x8a21u), 377.065582, PACK_10_10_10_2( TEX_WIZMET1_2, 572u, 280u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x8a21u), 1020.061646, PACK_10_10_10_2( TEX_WIZMET1_2, 612u, 336u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x8a21u), -694.594482, PACK_10_10_10_2( TEX_WIZMET1_2, 587u, 162u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 384.000000, PACK_10_10_10_2( TEX_CITY4_6, 314u, 519u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -480.000000, PACK_10_10_10_2( TEX_CITY4_6, 542u, 239u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -704.000000, PACK_10_10_10_2( TEX_CITY4_6, 316u, 286u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 448.000000, PACK_10_10_10_2( TEX_CITY4_6, 578u, 239u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 16.000000, PACK_10_10_10_2( TEX_CITY4_6, 262u, 307u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_CITY4_6, 689u, 149u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x3fffu), -67.882263, PACK_10_10_10_2( TEX_CITY4_6, 409u, 446u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -384.000000, PACK_10_10_10_2( TEX_CITY4_6, 612u, 365u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0xbfffu), 22.627411, PACK_10_10_10_2( TEX_CITY4_6, 752u, 365u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 16.000000, PACK_10_10_10_2( TEX_CITY4_6, 521u, 228u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_CITY4_6, 535u, 228u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 368.000000, PACK_10_10_10_2( TEX_CITY4_6, 610u, 365u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x3fffu), -837.214417, PACK_10_10_10_2( TEX_CITY4_6, 409u, 421u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 704.000000, PACK_10_10_10_2( TEX_CITY4_6, 655u, 365u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xbfffu), 791.959595, PACK_10_10_10_2( TEX_CITY4_6, 745u, 365u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 16.000000, PACK_10_10_10_2( TEX_CITY4_6, 502u, 228u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_CITY4_6, 457u, 467u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 368.000000, PACK_10_10_10_2( TEX_CITY4_6, 611u, 365u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 352.000000, PACK_10_10_10_2( TEX_CITY4_6, 626u, 406u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -512.000000, PACK_10_10_10_2( TEX_CITY4_6, 618u, 239u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -736.000000, PACK_10_10_10_2( TEX_CITY4_6, 751u, 400u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 480.000000, PACK_10_10_10_2( TEX_CITY4_6, 704u, 239u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 32.000000, PACK_10_10_10_2( TEX_CITY4_6, 495u, 189u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_CITY4_6, 538u, 189u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x3fffu), -113.137085, PACK_10_10_10_2( TEX_CITY4_6, 494u, 527u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -512.000000, PACK_10_10_10_2( TEX_CITY4_6, 603u, 180u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0xbfffu), 67.882248, PACK_10_10_10_2( TEX_CITY4_6, 730u, 323u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 368.000000, PACK_10_10_10_2( TEX_CITY4_6, 432u, 345u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 32.000000, PACK_10_10_10_2( TEX_CITY4_6, 521u, 163u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_CITY4_6, 497u, 163u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x3fffu), -882.469299, PACK_10_10_10_2( TEX_CITY4_6, 613u, 342u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -512.000000, PACK_10_10_10_2( TEX_CITY4_6, 498u, 180u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xbfffu), 837.214478, PACK_10_10_10_2( TEX_CITY4_6, 720u, 333u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 368.000000, PACK_10_10_10_2( TEX_CITY4_6, 366u, 324u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 32.000000, PACK_10_10_10_2( TEX_CITY4_6, 423u, 163u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_CITY4_6, 297u, 469u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 320.000000, PACK_10_10_10_2( TEX_CITY4_6, 631u, 471u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -544.000000, PACK_10_10_10_2( TEX_CITY4_6, 649u, 234u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -768.000000, PACK_10_10_10_2( TEX_CITY4_6, 631u, 481u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 512.000000, PACK_10_10_10_2( TEX_CITY4_6, 721u, 226u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 48.000000, PACK_10_10_10_2( TEX_CITY4_6, 687u, 116u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_CITY4_6, 485u, 139u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x3fffu), -158.391937, PACK_10_10_10_2( TEX_CITY4_6, 656u, 358u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -544.000000, PACK_10_10_10_2( TEX_CITY4_6, 651u, 206u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0xbfffu), 113.137100, PACK_10_10_10_2( TEX_CITY4_6, 635u, 358u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 368.000000, PACK_10_10_10_2( TEX_CITY4_6, 780u, 380u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 48.000000, PACK_10_10_10_2( TEX_CITY4_6, 324u, 295u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_CITY4_6, 411u, 241u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x3fffu), -927.724121, PACK_10_10_10_2( TEX_CITY4_6, 677u, 358u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x0000u), -544.000000, PACK_10_10_10_2( TEX_CITY4_6, 720u, 384u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0xbfffu), 882.469360, PACK_10_10_10_2( TEX_CITY4_6, 697u, 358u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 368.000000, PACK_10_10_10_2( TEX_CITY4_6, 578u, 392u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 48.000000, PACK_10_10_10_2( TEX_CITY4_6, 351u, 283u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_CITY4_6, 351u, 262u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 416.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 664u, 315u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1216.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 750u, 393u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -464.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 635u, 315u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 960.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 757u, 393u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 24.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 495u, 197u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -40.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 488u, 226u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 624.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 590u, 320u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1216.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 615u, 403u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -672.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 606u, 315u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 960.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 622u, 403u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 24.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 473u, 226u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -40.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 466u, 168u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 667u, 397u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x6c09u), -271.639893, PACK_10_10_10_2( TEX_WIZMET1_2, 558u, 233u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -960.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 674u, 393u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x93f5u), 256.117615, PACK_10_10_10_2( TEX_WIZMET1_2, 558u, 265u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 416.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 559u, 324u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -464.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 544u, 324u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 832.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 659u, 397u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x6c09u), -271.639893, PACK_10_10_10_2( TEX_WIZMET1_2, 535u, 249u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -960.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 535u, 527u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x93f5u), 256.117615, PACK_10_10_10_2( TEX_WIZMET1_2, 387u, 191u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 624.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 480u, 202u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -672.000000, PACK_10_10_10_2( TEX_WIZMET1_2, 528u, 324u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 304.000000, PACK_10_10_10_2( TEX_CITY4_7, 578u, 297u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -1232.000000, PACK_10_10_10_2( TEX_CITY4_7, 664u, 407u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -352.000000, PACK_10_10_10_2( TEX_CITY4_7, 578u, 294u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 816.000000, PACK_10_10_10_2( TEX_CITY4_7, 671u, 407u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), 64.000000, PACK_10_10_10_2( TEX_CITY4_7, 476u, 225u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -80.000000, PACK_10_10_10_2( TEX_CITY4_7, 469u, 225u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 704.000000, PACK_10_10_10_2( TEX_CITY4_6, 765u, 266u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -368.000000, PACK_10_10_10_2( TEX_CITY4_6, 691u, 195u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1024.000000, PACK_10_10_10_2( TEX_CITY4_6, 745u, 266u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 192.000000, PACK_10_10_10_2( TEX_CITY4_6, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_CITY4_6, 351u, 183u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_CITY4_6, 351u, 163u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x3fffu), 452.548309, PACK_10_10_10_2( TEX_WBRICK1_5, 349u, 479u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -1024.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 352u, 479u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0xbfffu), -463.862000, PACK_10_10_10_2( TEX_WBRICK1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 832.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 575u, 318u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -256.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 337u, 355u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0xffffu, 0x7fffu), -64.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 337u, 379u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 512.000000, PACK_10_10_10_2( TEX_COP1_1, 368u, 524u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -320.000000, PACK_10_10_10_2( TEX_COP1_1, 544u, 186u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -576.000000, PACK_10_10_10_2( TEX_COP1_1, 580u, 186u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 256.000000, PACK_10_10_10_2( TEX_COP1_1, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -4.000000, PACK_10_10_10_2( TEX_COP3_4, 563u, 375u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_COP1_1, 563u, 384u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 400.000000, PACK_10_10_10_2( TEX_QUAKE, 544u, 443u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -776.000000, PACK_10_10_10_2( TEX_QUAKE, 514u, 195u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -688.000000, PACK_10_10_10_2( TEX_QUAKE, 544u, 460u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 768.000000, PACK_10_10_10_2( TEX_QUAKE, 481u, 195u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -328.000000, PACK_10_10_10_2( TEX_QUAKE, 523u, 103u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), 264.000000, PACK_10_10_10_2( TEX_QUAKE, 159u, 440u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 728.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 575u, 495u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -192.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 464u, 439u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -792.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 594u, 418u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 176.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 629u, 367u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 638u, 367u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x3fffu, 0x7fffu), 296.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 590u, 418u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x0000u), -192.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 501u, 484u, 1u ) ),\n\t\tMapPlane( PACK_16_16(0xbfffu, 0x7fffu), -360.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 439u, 446u, 0u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0xffffu), 176.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 161u, 161u, 3u ) ),\n\t\tMapPlane( PACK_16_16(0x7fffu, 0x7fffu), -192.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 719u, 367u, 2u ) ),\n\t\tMapPlane( PACK_16_16(0x0000u, 0x7fffu), -0.000000, PACK_10_10_10_2( TEX_WBRICK1_5, 650u, 367u, 2u ) )\n),\n\tMapAABBNode[MAP_AABB_NODE_COUNT](\n\t\tMapAABBNode( vec3( 47.999992, 176.000000, -192.000000), vec3(1040.000000, 1440.000977, 448.000000), PACK_10_10_10_2( 1u, 68u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 48.000000, 176.000000, -192.000000), vec3(1040.000000, 832.000000, 448.000000), PACK_10_10_10_2( 2u, 49u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 48.000000, 176.000000, -192.000000), vec3(1040.000000, 832.000000, 256.000000), PACK_10_10_10_2( 3u, 44u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 48.000000, 176.000000, -80.000000), vec3(1040.000000, 768.000000, 256.000000), PACK_10_10_10_2( 4u, 33u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 64.000000, 192.000000, -80.000000), vec3(1024.000000, 768.000000, 16.000000), PACK_10_10_10_2( 5u, 16u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 64.000000, 192.000000, -80.000000), vec3(1024.000000, 768.000000, 4.000000), PACK_10_10_10_2( 6u, 7u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 64.000000, 192.000000, -80.000000), vec3(1024.000000, 768.000000, -48.000000), PACK_10_10_10_2( 0u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 64.000000, 192.000000, -64.000000), vec3(1024.000000, 512.000000, 4.000000), PACK_10_10_10_2( 8u, 11u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 64.000000, 192.000000, -64.000000), vec3(416.000000, 512.000000, 0.000000), PACK_10_10_10_2( 9u, 10u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 64.000000, 192.000000, -64.000000), vec3(384.000977, 416.000977, 0.000000), PACK_10_10_10_2( 3u, 2u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 112.000000, 368.000000, -64.000000), vec3(416.000000, 512.000000, -16.000000), PACK_10_10_10_2( 5u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 384.000000, 192.000000, -64.000000), vec3(1024.000000, 512.000000, 4.000000), PACK_10_10_10_2( 12u, 13u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 384.000000, 192.000000, -64.000000), vec3(704.000000, 480.000000, 4.000000), PACK_10_10_10_2( 8u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 671.999939, 192.000000, -64.000000), vec3(1024.000000, 512.000000, 0.000000), PACK_10_10_10_2( 14u, 15u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 704.000000, 192.000000, -64.000000), vec3(1024.000000, 416.000000, 0.000000), PACK_10_10_10_2( 11u, 2u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 671.999939, 368.000000, -64.000000), vec3(976.000000, 512.000000, -16.000000), PACK_10_10_10_2( 13u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 72.000000, 472.000000, -64.000000), vec3(1016.000977, 584.000000, 16.000000), PACK_10_10_10_2( 17u, 26u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 72.000000, 472.000000, -64.000000), vec3(768.000000, 584.000000, 16.000000), PACK_10_10_10_2( 18u, 19u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 320.000000, 480.000000, -64.000000), vec3(768.000000, 544.000000, -32.000000), PACK_10_10_10_2( 16u, 2u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 72.000000, 472.000000, -64.000000), vec3(184.000488, 584.000000, 16.000000), PACK_10_10_10_2( 20u, 21u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 72.000000, 512.000000, -64.000000), vec3(184.000000, 584.000000, -24.000000), PACK_10_10_10_2( 18u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 72.000000, 472.000000, -40.000977), vec3(184.000488, 584.000000, 16.000000), PACK_10_10_10_2( 22u, 23u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 72.000000, 472.000000, -40.000977), vec3(184.000488, 544.000000, 0.000486), PACK_10_10_10_2( 21u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 79.999512, 479.999573, -39.999512), vec3(176.000015, 584.000000, 16.000000), PACK_10_10_10_2( 24u, 25u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 112.000000, 552.000000, -39.999512), vec3(144.000000, 584.000000, 0.000003), PACK_10_10_10_2( 24u, 1u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 79.999512, 479.999573, -32.000977), vec3(176.000015, 576.000000, 16.000000), PACK_10_10_10_2( 25u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 904.000000, 472.000000, -64.000000), vec3(1016.000977, 584.000000, 16.000000), PACK_10_10_10_2( 27u, 28u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 904.000000, 512.000000, -64.000000), vec3(1016.000977, 584.000000, -24.000000), PACK_10_10_10_2( 29u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 904.000000, 472.000000, -40.000977), vec3(1016.000977, 584.000000, 16.000000), PACK_10_10_10_2( 29u, 30u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 904.000000, 472.000000, -40.000977), vec3(1016.000977, 544.000000, 0.000608), PACK_10_10_10_2( 32u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 911.999939, 479.999969, -39.999512), vec3(1008.000122, 584.000000, 16.000000), PACK_10_10_10_2( 31u, 32u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 944.000000, 552.000000, -39.999512), vec3(976.000000, 584.000000, 0.000003), PACK_10_10_10_2( 35u, 1u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 911.999939, 479.999969, -32.000977), vec3(1008.000122, 576.000061, 16.000000), PACK_10_10_10_2( 36u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 48.000000, 176.000000, -64.000000), vec3(1040.000000, 768.000000, 256.000000), PACK_10_10_10_2( 34u, 41u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 63.999512, 176.000000, -64.000000), vec3(1024.000488, 384.001953, 256.000000), PACK_10_10_10_2( 35u, 40u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 240.000000, 176.000000, -64.000000), vec3(848.000000, 216.000000, 216.000000), PACK_10_10_10_2( 36u, 37u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 240.000000, 176.000000, -64.000000), vec3(360.000000, 216.000000, 216.000000), PACK_10_10_10_2( 40u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 280.000000, 176.000000, -64.000000), vec3(848.000000, 216.000000, 216.000000), PACK_10_10_10_2( 38u, 39u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 280.000000, 176.000000, -64.000000), vec3(808.000977, 216.000000, 192.000000), PACK_10_10_10_2( 43u, 2u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 728.000000, 176.000000, -64.000000), vec3(848.000000, 216.000000, 216.000000), PACK_10_10_10_2( 45u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 63.999512, 176.000000, -64.000000), vec3(1024.000488, 384.001953, 256.000000), PACK_10_10_10_2( 48u, 2u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 48.000000, 368.000000, -64.000000), vec3(1040.000000, 768.000000, 216.000000), PACK_10_10_10_2( 42u, 43u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 48.000000, 368.000000, -64.000000), vec3(88.000000, 768.000000, 216.000000), PACK_10_10_10_2( 50u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 1000.000000, 368.000000, -64.000000), vec3(1040.000000, 768.000000, 216.000000), PACK_10_10_10_2( 54u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 48.000000, 752.000000, -192.000000), vec3(1040.000000, 832.000000, 256.000000), PACK_10_10_10_2( 45u, 48u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 96.000000, 752.000000, -192.000000), vec3(1008.000000, 832.000000, -64.000000), PACK_10_10_10_2( 46u, 47u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 144.000000, 752.000000, -192.000000), vec3(1008.000000, 800.000000, -80.000000), PACK_10_10_10_2( 58u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 96.000000, 768.000000, -80.000000), vec3(992.000000, 832.000000, -64.000000), PACK_10_10_10_2( 61u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 48.000000, 768.000000, -184.000000), vec3(1040.000000, 832.000000, 256.000000), PACK_10_10_10_2( 64u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 48.000000, 192.000000, 150.666656), vec3(1040.000000, 832.000000, 448.000000), PACK_10_10_10_2( 50u, 61u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 64.000000, 192.000000, 175.999969), vec3(1024.000000, 816.000000, 448.000000), PACK_10_10_10_2( 51u, 56u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 64.000000, 192.000000, 175.999969), vec3(1024.000000, 768.000000, 320.000488), PACK_10_10_10_2( 52u, 55u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 64.000000, 192.000000, 175.999969), vec3(1024.000000, 416.000000, 320.000000), PACK_10_10_10_2( 53u, 54u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 64.000000, 192.000000, 176.000000), vec3(1024.000000, 384.000000, 320.000000), PACK_10_10_10_2( 68u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 64.000000, 384.000000, 175.999969), vec3(1024.000000, 416.000000, 304.000488), PACK_10_10_10_2( 72u, 2u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 64.000000, 192.000000, 175.999969), vec3(1024.000000, 768.000000, 320.000488), PACK_10_10_10_2( 74u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 128.000000, 256.000000, 248.000000), vec3(960.000000, 816.000000, 448.000000), PACK_10_10_10_2( 57u, 60u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 256.000000, 384.000000, 288.000000), vec3(832.000000, 768.000000, 320.000000), PACK_10_10_10_2( 58u, 59u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 272.000000, 384.000000, 288.000000), vec3(816.000000, 432.000000, 320.000000), PACK_10_10_10_2( 78u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 256.000000, 384.000000, 288.000000), vec3(832.000000, 768.000000, 320.000000), PACK_10_10_10_2( 81u, 2u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 128.000000, 256.000000, 248.000000), vec3(960.000000, 816.000000, 448.000000), PACK_10_10_10_2( 83u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 48.000000, 768.000000, 150.666656), vec3(1040.000000, 832.000000, 448.000000), PACK_10_10_10_2( 62u, 65u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 320.000000, 768.000000, 191.999512), vec3(864.000000, 832.000000, 336.000000), PACK_10_10_10_2( 63u, 64u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 400.000000, 768.000000, 256.000000), vec3(864.000000, 776.000000, 336.000000), PACK_10_10_10_2( 87u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 320.000000, 768.000000, 191.999512), vec3(768.000366, 832.000000, 256.000000), PACK_10_10_10_2( 91u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 48.000000, 768.000000, 150.666656), vec3(1040.000000, 832.000000, 448.000000), PACK_10_10_10_2( 66u, 67u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 48.000000, 768.000000, 150.666656), vec3(1040.000000, 832.000000, 336.000000), PACK_10_10_10_2( 95u, 2u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 128.000000, 768.000000, 256.000000), vec3(960.000000, 832.000000, 448.000000), PACK_10_10_10_2( 97u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 47.999992, 768.000000, -192.000000), vec3(1040.000000, 1440.000977, 336.000000), PACK_10_10_10_2( 69u, 108u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 47.999992, 768.000000, -192.000000), vec3(1008.000000, 1440.000977, 336.000000), PACK_10_10_10_2( 70u, 93u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 47.999992, 768.000000, -192.000000), vec3(688.000000, 1408.000000, 336.000000), PACK_10_10_10_2( 71u, 82u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 47.999992, 768.000000, -192.000000), vec3(392.000000, 1408.000000, 336.000000), PACK_10_10_10_2( 72u, 75u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 47.999992, 831.999878, -184.000000), vec3(80.000000, 1408.000000, 336.000000), PACK_10_10_10_2( 73u, 74u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 47.999992, 831.999878, -184.000000), vec3(80.000000, 1408.000000, 336.000000), PACK_10_10_10_2( 100u, 2u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 63.999992, 831.999878, -184.000000), vec3(80.000000, 1056.000000, 256.000000), PACK_10_10_10_2( 102u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 64.000000, 768.000000, -192.000000), vec3(392.000000, 1280.000000, 320.000031), PACK_10_10_10_2( 76u, 79u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 64.000000, 768.000000, -192.000000), vec3(384.000000, 1280.000000, -64.000000), PACK_10_10_10_2( 77u, 78u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 144.000000, 768.000000, -192.000000), vec3(384.000000, 1232.000977, -80.000000), PACK_10_10_10_2( 105u, 2u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 64.000000, 816.000000, -80.000000), vec3(352.000000, 1280.000000, -64.000000), PACK_10_10_10_2( 107u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 80.000000, 831.999878, -184.000000), vec3(392.000000, 1232.000977, 320.000031), PACK_10_10_10_2( 80u, 81u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 367.999939, 831.999878, -184.000000), vec3(392.000000, 1232.000977, 256.000000), PACK_10_10_10_2( 110u, 1u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 80.000000, 832.000000, 224.000000), vec3(368.000000, 1232.000977, 320.000031), PACK_10_10_10_2( 111u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 391.999939, 768.000000, -192.000000), vec3(688.000000, 1232.000977, 320.000000), PACK_10_10_10_2( 83u, 90u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 391.999939, 768.000000, -192.000000), vec3(688.000000, 1232.000977, 32.000000), PACK_10_10_10_2( 84u, 87u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 391.999939, 768.000000, -192.000000), vec3(688.000000, 1232.000977, 32.000000), PACK_10_10_10_2( 85u, 86u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 391.999939, 895.999878, -192.000000), vec3(592.000000, 1008.000000, 32.000000), PACK_10_10_10_2( 115u, 2u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 400.000000, 768.000000, -192.000000), vec3(688.000000, 1232.000977, -40.000000), PACK_10_10_10_2( 117u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 416.000000, 832.000000, -72.000000), vec3(672.000000, 1216.000000, -23.999969), PACK_10_10_10_2( 88u, 89u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 416.000000, 832.000000, -72.000000), vec3(672.000000, 960.000000, -23.999969), PACK_10_10_10_2( 120u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 416.000000, 960.000000, -40.000000), vec3(672.000000, 1216.000000, -24.000000), PACK_10_10_10_2( 123u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 391.999939, 831.999878, -184.000000), vec3(688.000000, 1232.000977, 320.000000), PACK_10_10_10_2( 91u, 92u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 391.999939, 831.999878, -184.000000), vec3(400.000000, 1232.000977, 256.000000), PACK_10_10_10_2( 126u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 400.000000, 832.000000, 223.999512), vec3(688.000000, 1232.000977, 320.000000), PACK_10_10_10_2( 129u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 47.999992, 1216.000000, -184.000000), vec3(1008.000000, 1440.000977, 336.000000), PACK_10_10_10_2( 94u, 101u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 48.000000, 1216.000000, -184.000000), vec3(1008.000000, 1408.000000, 336.000000), PACK_10_10_10_2( 95u, 98u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 48.000000, 1216.000000, -184.000000), vec3(464.000000, 1408.000000, 336.000000), PACK_10_10_10_2( 96u, 97u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 48.000000, 1216.000000, -176.000000), vec3(384.000977, 1408.000000, 336.000000), PACK_10_10_10_2( 133u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 320.000000, 1232.000000, -184.000000), vec3(464.000000, 1408.000000, 336.000000), PACK_10_10_10_2( 137u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 80.000000, 1216.000000, -176.000000), vec3(1008.000000, 1408.000000, 336.000000), PACK_10_10_10_2( 99u, 100u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 80.000000, 1216.000000, -176.000000), vec3(1008.000000, 1408.000000, -32.000000), PACK_10_10_10_2( 141u, 2u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 224.000000, 1232.000000, 191.999969), vec3(864.000000, 1408.000000, 336.000000), PACK_10_10_10_2( 143u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 47.999992, 1376.000000, -184.000000), vec3(696.000000, 1440.000977, 256.000000), PACK_10_10_10_2( 102u, 107u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 184.000000, 1376.000000, -16.000000), vec3(592.000000, 1392.000000, 112.000000), PACK_10_10_10_2( 103u, 104u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 184.000000, 1376.000000, -16.000000), vec3(280.000000, 1392.000000, 112.000000), PACK_10_10_10_2( 146u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 496.000000, 1376.000000, -16.000000), vec3(592.000000, 1392.000000, 112.000000), PACK_10_10_10_2( 105u, 106u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 496.000000, 1376.000000, -16.000000), vec3(592.000000, 1392.000000, 0.000000), PACK_10_10_10_2( 150u, 1u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 496.000000, 1376.000000, 0.000000), vec3(592.000000, 1392.000000, 112.000000), PACK_10_10_10_2( 151u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 47.999992, 1384.000000, -184.000000), vec3(696.000000, 1440.000977, 256.000000), PACK_10_10_10_2( 155u, 2u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 672.000000, 768.000000, -192.000000), vec3(1040.000000, 1440.000977, 336.000000), PACK_10_10_10_2( 109u, 126u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 687.999878, 768.000000, -192.000000), vec3(1016.000000, 1232.000977, 336.000000), PACK_10_10_10_2( 110u, 117u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 687.999878, 831.999878, -184.000000), vec3(848.000977, 1088.000977, 320.000000), PACK_10_10_10_2( 111u, 116u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 687.999878, 831.999878, -184.000000), vec3(704.000000, 1088.000977, 320.000000), PACK_10_10_10_2( 112u, 113u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 687.999878, 831.999878, -184.000000), vec3(704.000000, 1024.000000, 320.000000), PACK_10_10_10_2( 157u, 2u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 687.999878, 959.999878, -184.000000), vec3(704.000000, 1088.000977, 320.000000), PACK_10_10_10_2( 114u, 115u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 695.999878, 959.999878, -184.000000), vec3(704.000000, 1024.000977, 320.000000), PACK_10_10_10_2( 159u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 687.999878, 1023.999878, -184.000000), vec3(704.000000, 1088.000977, 320.000000), PACK_10_10_10_2( 162u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 703.999878, 879.999023, -72.000000), vec3(848.000977, 1088.000977, 256.000977), PACK_10_10_10_2( 165u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 703.999878, 768.000000, -192.000000), vec3(1016.000000, 1232.000977, 336.000000), PACK_10_10_10_2( 118u, 121u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 703.999878, 768.000000, -192.000000), vec3(1008.000000, 1232.000977, 336.000000), PACK_10_10_10_2( 119u, 120u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 703.999878, 768.000000, -192.000000), vec3(1008.000000, 1232.000977, 336.000000), PACK_10_10_10_2( 169u, 2u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 768.000000, 832.000000, -192.000000), vec3(960.000122, 1088.000977, -48.000000), PACK_10_10_10_2( 171u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 880.000000, 783.999878, -184.000000), vec3(1016.000000, 1088.000977, 320.000000), PACK_10_10_10_2( 122u, 123u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 880.000000, 896.000000, -72.000000), vec3(1008.000977, 1088.000977, 256.000977), PACK_10_10_10_2( 175u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 1007.999878, 783.999878, -184.000000), vec3(1016.000000, 1088.000977, 320.000000), PACK_10_10_10_2( 124u, 125u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 1007.999878, 783.999878, -184.000000), vec3(1016.000000, 960.000000, 320.000000), PACK_10_10_10_2( 179u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 1007.999878, 959.999878, -184.000000), vec3(1016.000000, 1088.000977, 320.000000), PACK_10_10_10_2( 183u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 672.000000, 1087.999756, -192.000000), vec3(1040.000000, 1440.000977, 336.000000), PACK_10_10_10_2( 127u, 132u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 672.000000, 1087.999756, -184.000000), vec3(772.000122, 1408.000977, 336.000000), PACK_10_10_10_2( 128u, 131u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 687.999878, 1087.999756, -184.000000), vec3(736.001099, 1232.000977, 320.000000), PACK_10_10_10_2( 129u, 130u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 695.999878, 1087.999756, -184.000000), vec3(704.000000, 1152.000000, 320.000000), PACK_10_10_10_2( 187u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 687.999878, 1088.000000, -184.000000), vec3(736.001099, 1232.000977, 320.000000), PACK_10_10_10_2( 190u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 672.000000, 1232.000000, -184.000000), vec3(772.000122, 1408.000977, 336.000000), PACK_10_10_10_2( 193u, 4u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 695.999878, 1087.999756, -192.000000), vec3(1040.000000, 1440.000977, 336.000000), PACK_10_10_10_2( 133u, 136u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 696.000000, 1088.000000, -192.000000), vec3(1008.000000, 1248.000000, -48.000000), PACK_10_10_10_2( 134u, 135u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 767.999756, 1088.000000, -192.000000), vec3(960.000061, 1200.000000, -48.000000), PACK_10_10_10_2( 197u, 2u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 696.000000, 1152.000000, -176.000000), vec3(1008.000000, 1248.000000, -48.000000), PACK_10_10_10_2( 199u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 695.999878, 1087.999756, -184.000000), vec3(1040.000000, 1440.000977, 336.000000), PACK_10_10_10_2( 137u, 140u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 703.999878, 1087.999756, -184.000000), vec3(1040.000000, 1440.000977, 336.000000), PACK_10_10_10_2( 138u, 139u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 992.000000, 1087.999756, -184.000000), vec3(1040.000000, 1440.000977, 320.000000), PACK_10_10_10_2( 202u, 2u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 703.999878, 1103.999878, 150.666656), vec3(1040.000000, 1296.000000, 336.000000), PACK_10_10_10_2( 204u, 3u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 695.999878, 1311.999756, -184.000000), vec3(1008.000000, 1440.000977, 320.000000), PACK_10_10_10_2( 141u, 142u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 695.999878, 1376.000000, -184.000000), vec3(1008.000000, 1440.000977, 320.000000), PACK_10_10_10_2( 207u, 2u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 840.000000, 1311.999756, -16.000000), vec3(980.000122, 1408.000977, 252.000000), PACK_10_10_10_2( 143u, 144u, 0u, 1u ) ),\n\t\tMapAABBNode( vec3( 852.000000, 1311.999756, 203.999878), vec3(980.000122, 1408.000977, 252.000000), PACK_10_10_10_2( 209u, 2u, 0u, 0u ) ),\n\t\tMapAABBNode( vec3( 840.000000, 1376.000000, -16.000000), vec3(912.000000, 1392.000000, 112.000000), PACK_10_10_10_2( 211u, 4u, 0u, 0u ) )\n\t),\n\tMapBrush[MAP_BRUSH_COUNT](\n\t\tMapBrush( PACK_16_16( 36u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1189u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1183u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 274u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 333u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 1147u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1165u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 178u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1141u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 18u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1237u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1225u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 328u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 1153u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1171u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 250u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1177u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1159u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 196u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 184u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 190u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 172u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 160u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 154u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 166u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 148u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 136u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 130u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 142u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 268u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 256u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 262u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 244u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 226u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 232u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 238u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 220u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 208u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 202u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 214u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 304u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 0u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1255u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 6u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 30u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1249u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 12u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 310u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 48u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1231u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 54u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 298u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 492u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 322u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 24u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 498u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 316u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 60u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 504u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 719u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 708u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 386u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 404u, 7u ) ),\n\t\tMapBrush( PACK_16_16( 411u, 7u ) ),\n\t\tMapBrush( PACK_16_16( 350u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 430u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 424u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 338u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 292u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 280u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 286u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 42u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 106u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 118u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 72u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 66u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 112u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 124u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 90u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 96u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 101u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 78u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 84u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 468u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 462u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 456u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 480u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 380u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 368u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1243u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 374u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 436u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 451u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 441u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 446u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 486u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 344u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 356u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 362u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 474u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 766u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 772u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 790u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 778u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 784u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 730u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 851u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 418u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 392u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1219u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 630u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 808u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 814u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 796u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 802u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 654u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 760u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 713u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 826u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 879u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 1207u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 516u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1213u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1195u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 522u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1201u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 636u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 642u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 648u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 754u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 736u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 748u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 742u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 940u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 934u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 845u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1120u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 912u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 890u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1036u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 907u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 832u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 838u, 7u ) ),\n\t\tMapBrush( PACK_16_16( 917u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 1114u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 884u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1006u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1012u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1018u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1000u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1072u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1060u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1078u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1054u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1066u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1024u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1030u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 594u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 612u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 946u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 600u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 606u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 618u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 624u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 588u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 995u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 964u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 528u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 553u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 724u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 984u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 533u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 510u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 398u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 548u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 538u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 543u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 974u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 990u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 690u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 702u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 820u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 696u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 672u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 678u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 958u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 684u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 952u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 576u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 582u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 564u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 570u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 869u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 896u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 902u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 1042u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1126u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 558u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 660u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 857u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 874u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 863u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 928u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 666u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 969u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 979u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 922u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1090u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1048u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1131u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 1136u, 5u ) ),\n\t\tMapBrush( PACK_16_16( 1102u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1096u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1084u, 6u ) ),\n\t\tMapBrush( PACK_16_16( 1108u, 6u ) )\n\t)\n);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 iCoord = ivec2(fragCoord);\n    \n    if ( iCoord.y > ADDR_END || iCoord.x > ADDR_WIDTH )\n    {\n        discard;\n        return;\n    }\n    \n    if ( iFrame > 0 )\n    {\n        fragColor = texelFetch( iChannel0, ivec2(fragCoord), 0 );\n        return;\n\t}\n    \n    fragColor = vec4(0);    \n    \n    \n    if( iCoord.y == ADDR_INFO )\n    {\n        fragColor = vec4( MAP_BRUSH_COUNT, MAP_PLANE_COUNT, MAP_LIGHT_COUNT, 0 );\n    }\n    else\n    if( iCoord.y >= ADDR_BRUSH && iCoord.y < (ADDR_BRUSH + ADDR_BRUSH_COUNT) )\n    {\n        if ( iCoord.x < ADDR_WIDTH )\n        {\n            int iBrushIndex = iCoord.x + (iCoord.y - ADDR_BRUSH) * ADDR_WIDTH;       \n            if ( iBrushIndex < MAP_BRUSH_COUNT )\n            {\n                uint brushPackedData = map.brushArray[iBrushIndex].packedBrushValues;\n                uint brushPlaneStart = UNPACK_16_16_A( brushPackedData );\n                uint brushPlaneCount = UNPACK_16_16_B( brushPackedData );\n                fragColor = vec4( brushPlaneStart, brushPlaneCount, 0, 0 );            \n            }\n        }\n    }    \n    else\n    if( iCoord.y >= ADDR_PLANE && iCoord.y < (ADDR_PLANE + ADDR_PLANE_COUNT) )\n    {\n        if ( iCoord.x < ADDR_WIDTH )\n        {\n            int iPlaneIndex = iCoord.x + (iCoord.y - ADDR_PLANE) * ADDR_WIDTH;       \n            if ( iPlaneIndex < MAP_PLANE_COUNT )\n            {\n                float d = map.planeArray[iPlaneIndex].planeD;\n                \n                uint normalData = map.planeArray[iPlaneIndex].packedNormal;\n                \n                int iA = int( UNPACK_16_16_A( normalData ) );\n                int iB = int( UNPACK_16_16_B( normalData ) );\n                \n                float a = (float( iA ) / 65535.0f);\n                float b = (float( iB ) / 65535.0f);\n                \n                a = a * TAU - PI;\n                b = b * PI;\n                \n                vec3 n = vec3( sin( a ) * sin( b ), cos( b ), cos( a ) * sin( b ) );\n\n                fragColor = vec4( n, d );\n            }\n        }\n    }    \n    else\n    if( iCoord.y >= ADDR_PLANE_TEX && iCoord.y < (ADDR_PLANE_TEX + ADDR_PLANE_COUNT) )\n    {\n        if ( iCoord.x < ADDR_WIDTH )\n        {\n            int iPlaneIndex = iCoord.x + (iCoord.y - ADDR_PLANE_TEX) * ADDR_WIDTH;       \n            if ( iPlaneIndex < MAP_PLANE_COUNT )\n            {\n                uint packedTextureIndex = map.planeArray[iPlaneIndex].textureIndex;\n                uint textureIndex = UNPACK_10_10_10_2_A( packedTextureIndex );\n                uint B = UNPACK_10_10_10_2_B( packedTextureIndex );\n                uint C = UNPACK_10_10_10_2_C( packedTextureIndex );\n                uint D = UNPACK_10_10_10_2_D( packedTextureIndex );\n                                \n                float fLightmapOffsetU = (float(B) * kLightmapOffsetRange) / 1023.0f + kLightmapOffsetMin;\n                float fLightmapOffsetV = (float(C) * kLightmapOffsetRange) / 1023.0f + kLightmapOffsetMin;\n                \n                fragColor = vec4( float(textureIndex), fLightmapOffsetU, fLightmapOffsetV, float(D) );            \n            }\n        }\n    }    \n    else\n    if( iCoord.y >= ADDR_LIGHT && iCoord.y < (ADDR_LIGHT + ADDR_LIGHT_COUNT) )\n    {\n        int iLightIndex = iCoord.x;\n        if ( iLightIndex < MAP_LIGHT_COUNT )\n        {\n\t        fragColor = vec4( map.lightArray[iLightIndex].pos, map.lightArray[iLightIndex].radius );            \n        }\n    }    \n    else\n    if( iCoord.y >= ADDR_AABB_NODE && iCoord.y < (ADDR_AABB_NODE + ADDR_AABB_NODE_COUNT) )\n    {\n        if ( iCoord.x < ADDR_WIDTH )\n        {\n            int iAABBNodeAddress = iCoord.x + (iCoord.y - ADDR_AABB_NODE) * ADDR_WIDTH;\n            int iAABBNodeIndex = iAABBNodeAddress / 2;\n            int iAABBNodeData = iAABBNodeAddress % 2;\n            if ( iAABBNodeIndex < MAP_AABB_NODE_COUNT )\n            {\n                uint nodePackedData = map.aabbNodeArray[iAABBNodeIndex].packedNodeValues;\n                \n                int childAIndex_brushIndex = int( UNPACK_10_10_10_2_A( nodePackedData ) );\n                int childBIndex_brushCount = int( UNPACK_10_10_10_2_B( nodePackedData ) );\n                int nodeType = int( UNPACK_10_10_10_2_D( nodePackedData ) );\n                \n                if (nodeType == 0)\n                {\n                    childBIndex_brushCount = -childBIndex_brushCount;\n                }\n                \n                if ( iAABBNodeData == 0 )\n                {\n                    fragColor = \n                        vec4( map.aabbNodeArray[iAABBNodeIndex].boundsMin,\n                              childAIndex_brushIndex);\n                }\n                else\n                {\n                    fragColor = \n                        vec4( map.aabbNodeArray[iAABBNodeIndex].boundsMax,\n                             childBIndex_brushCount);\n                                \n                }\n            }\n        }\n    }    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define TEX_WBRICK1_5\t\t0u\n#define TEX_CITY4_6\t\t1u\n#define TEX_WIZ1_4\t\t2u\n#define TEX_CITY4_7\t\t3u\n#define TEX_WIZWOOD1_5\t\t4u\n#define TEX_WIZMET1_2\t\t5u\n#define TEX_WIZMET1_1\t\t6u\n#define TEX_SKY1\t\t7u\n#define TEX_BRICKA2_2\t\t8u\n#define TEX_DEM4_1\t\t9u\n#define TEX_WATER1\t\t10u\n#define TEX_LAVA1\t\t11u\n#define TEX_WATER2\t\t12u\n#define TEX_WINDOW02_1\t\t13u\n#define TEX_SKILL0\t\t14u\n#define TEX_TELEPORT\t\t15u\n#define TEX_SKILL1\t\t16u\n#define TEX_SKILL2\t\t17u\n#define TEX_COP1_1\t\t18u\n#define TEX_COP3_4\t\t19u\n#define TEX_QUAKE\t\t20u\n\nbool IsTextureLit( uint iTexture )\n{\n    bool bLit = true;\n    switch( iTexture )\n    {\n        default:\n        \tbreak;\n        \n        case TEX_LAVA1:\n        case TEX_TELEPORT:\n        case TEX_SKY1:\n        case TEX_WATER1:\n        case TEX_WATER2:\n        \tbLit = false;\n       \t break;\n        \n    }\n    \n    return bLit;\n}\n\n\n\nvec3 playerBox = vec3(32.0, 32.0, 48.0);   \n\n#define kFarClip 10000000.0\n\n#define USE_MAP_COORDS 1\n#define USE_AABB_TREE 1\n\nconst int \n    ADDR_INFO = 0,\n\tADDR_BRUSH = 1,\n    ADDR_BRUSH_COUNT = 1,\n    ADDR_PLANE = ADDR_BRUSH + ADDR_BRUSH_COUNT,\n    ADDR_PLANE_COUNT = 4,\n    ADDR_PLANE_TEX = ADDR_PLANE + ADDR_PLANE_COUNT,\n    ADDR_LIGHT = ADDR_PLANE_TEX + ADDR_PLANE_COUNT,\n    ADDR_LIGHT_COUNT = 1,\n    ADDR_AABB_NODE = ADDR_LIGHT + ADDR_LIGHT_COUNT,\n    ADDR_AABB_NODE_COUNT = 4,\n    ADDR_END = ADDR_AABB_NODE + ADDR_AABB_NODE_COUNT,\n    \n    ADDR_WIDTH = 512;\n\nconst float kLightmapOffsetMin = -1500.0f;\nconst float kLightmapOffsetMax = 8000.0f;\nconst float kLightmapOffsetRange = kLightmapOffsetMax - kLightmapOffsetMin;\n\nconst vec2 vLightmapMin = vec2(0.0);\nconst vec2 vLightmapMax = vec2(6000.0, 3375.0);\nconst vec2 vLightmapRange = vLightmapMax - vLightmapMin;\n\nstruct Rect\n{\n    vec2 m_min;\n    vec2 m_max;\n};\n\nbool Rect_ContainsPoint( Rect rect, vec2 vPos )\n{\n    if (   vPos.x >= rect.m_min.x && vPos.x < rect.m_max.x \n        && vPos.y >= rect.m_min.y && vPos.y < rect.m_max.y ) return true;\n    \n    return false;\n}\n\n    \nstruct Box\n{\n    vec3 m_min;\n    vec3 m_max;\n};\n\nBox Box_Expand( Box box, vec3 expand )\n{\n    box.m_min -= expand;\n    box.m_max += expand;\n    \n    return box;\n}\n    \nbool Box_ContainsPoint( Box box, vec3 vPos )\n{\n    if (   vPos.x >= box.m_min.x && vPos.x < box.m_max.x \n        && vPos.y >= box.m_min.y && vPos.y < box.m_max.y \n        && vPos.z >= box.m_min.z && vPos.z < box.m_max.z ) return true;\n    \n    return false;\n}\n\nbool BoxBoxIntersect( Box boxa, Box boxb )\n{\n    if ( boxa.m_max.x < boxb.m_min.x ) return false;\n    if ( boxa.m_min.x > boxb.m_max.x ) return false;\n\n    if ( boxa.m_max.y < boxb.m_min.y ) return false;\n    if ( boxa.m_min.y > boxb.m_max.y ) return false;\n\n    if ( boxa.m_max.z < boxb.m_min.z ) return false;\n    if ( boxa.m_min.z > boxb.m_max.z ) return false;\n    \n    return true;\n}\n\nvoid Swap( inout float x, inout float y )\n{\n    float t = x;\n    x = y;\n    y = t;\n}\n\nbool RayBoxIntersect( Box box, vec3 vRO, vec3 vRD, float expand )\n{\n    box.m_min -= expand;\n    box.m_max += expand;\n    // Origin in box\n    if ( Box_ContainsPoint( box, vRO ) ) return true;\n    \n    vec3 enterT = (box.m_min - vRO.xyz) / vRD;\n    vec3 exitT  = (box.m_max - vRO.xyz) / vRD;\n    \n    if ( vRD.x < 0.0 )\n    {\n        Swap( enterT.x, exitT.x );\n    }\n\n    if ( vRD.y < 0.0 )\n    {\n        Swap( enterT.y, exitT.y );\n    }\n\n    if ( vRD.z < 0.0 )\n    {\n        Swap( enterT.z, exitT.z );\n    }\n    \n    float fEnterT = max( max( enterT.x, enterT.y ), enterT.z );\n    float fExitT = min( min( exitT.x, exitT.y ), exitT.z );\n    \n    if ( fEnterT < fExitT && fEnterT > 0.0 )\n    {\n        return true;\n    }\n\n    return false;\n}\n\nBox LineBoundingBox( vec3 vStart, vec3 vEnd )\n{\n    Box box;\n    box.m_min = min( vStart, vEnd );\n    box.m_max = max( vStart, vEnd );\n    \n    return box;\n}\n\nbool LineBoxIntersect( Box box, vec3 vStart, vec3 vEnd )\n{\n    Box box2 = LineBoundingBox( vStart, vEnd );\n    return BoxBoxIntersect( box, box2 );\n    \n    return false;\n}    \n        \nstruct MapDataInfo\n{\n    int brushCount;\n    int planeCount;\n    int lightCount;\n    int kdItemCount;\n};\n\nstruct MapDataBrush\n{\n\tint planeStart;\n\tint planeCount;\n};\n    \nstruct MapDataPlane\n{\n\tvec4 plane;\n\tuint textureIndex;\n    vec2 lightmapOffset;\n    int projectionAxis;\n};    \n    \nMapDataInfo MapData_ReadInfo( sampler2D iData )\n{\n    MapDataInfo info;\n\n    vec4 vData0 = texelFetch( iData, ivec2(0, ADDR_INFO), 0 );\n\n    info.brushCount = int(vData0.x);\n    info.planeCount = int(vData0.y);\n    info.lightCount = int(vData0.z);    \n    info.kdItemCount = int(vData0.w);    \n    \n    return info;\n}\n\nMapDataBrush MapData_ReadBrush( sampler2D iData, int iBrushIndex )\n{\n    MapDataBrush brush;\n\n    vec4 vBrushInfo = texelFetch( iData, ivec2(iBrushIndex % ADDR_WIDTH,ADDR_BRUSH + (iBrushIndex / ADDR_WIDTH)), 0 );\n\n    brush.planeStart = int(vBrushInfo.x);\n    brush.planeCount = int(vBrushInfo.y);\n    \n    return brush;\n}\n\nMapDataPlane MapData_ReadPlane( sampler2D iData, int iPlaneIndex )\n{\n    MapDataPlane plane;\n\n    vec4 vPlane = texelFetch( iData, ivec2(iPlaneIndex % ADDR_WIDTH,ADDR_PLANE + (iPlaneIndex / ADDR_WIDTH)), 0 );\n    vec4 vPlaneTex = texelFetch( iData, ivec2(iPlaneIndex % ADDR_WIDTH,ADDR_PLANE_TEX + (iPlaneIndex / ADDR_WIDTH)), 0 );\n\n    plane.plane = vPlane;\n    plane.textureIndex = uint( vPlaneTex.x );\n    plane.lightmapOffset = vPlaneTex.yz;\n    plane.projectionAxis = int( vPlaneTex.w );\n    \n    return plane;\n}\n\nstruct AABBNode\n{\n    Box bounds;\n\tint childA_brushIndex;\n\tint childB_brushCount;\n};\n\nAABBNode MapData_ReadAABBNode( sampler2D iData, int iAABBNodeIndex )\n{    \n    int iAABBNodeAddr = iAABBNodeIndex * 2;\n    vec4 vDataA = texelFetch( iData, ivec2( (iAABBNodeAddr)   % ADDR_WIDTH,ADDR_AABB_NODE + ((iAABBNodeAddr)   / ADDR_WIDTH)), 0 );\n    vec4 vDataB = texelFetch( iData, ivec2( (iAABBNodeAddr+1) % ADDR_WIDTH,ADDR_AABB_NODE + ((iAABBNodeAddr+1) / ADDR_WIDTH)), 0 );\n\n    return AABBNode( Box( vDataA.xyz, vDataB.xyz) , int(vDataA.w), int(vDataB.w) );\n}\n\nint GetProjectionAxis ( vec3 vNormal )\n{\n\tvec3 vAbsNormal = abs( vNormal.xyz );\n    \n    int iAxis = 0;\n\tif(vAbsNormal.z > vAbsNormal.y)\n\t{\n\t\tif(vAbsNormal.z > vAbsNormal.x)\n\t\t{\n            iAxis = 2;\n\t\t}\n\t\telse\n\t\t{\n            iAxis = 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(vAbsNormal.y > vAbsNormal.x)\n\t\t{\n            iAxis = 1;\n\t\t}\n\t\telse\n\t\t{\n            iAxis = 0;\n\t\t}\n\t}    \n    \n    return iAxis;\n}\n\nvec2 GetProjectedCoord( vec3 vPos, int iAxis )\n{\n    vec2 vTexCoord;\n    switch( iAxis )\n    {\n        default:\n        case 0:\n        \tvTexCoord = vPos.yz;\n\t\t\tbreak;        \n\n        case 1:\n        \tvTexCoord = vPos.xz;\n\t\t\tbreak;        \n\n        case 2:\n        \tvTexCoord = vPos.xy;\n\t\t\tbreak;        \n    }\n    \n    return vTexCoord;\n}\n\nvec2 GetProjectedCoord( vec3 vPos, vec3 vNormal )\n{\n    int iAxis = GetProjectionAxis ( vNormal );\n    return GetProjectedCoord( vPos, iAxis );\n}\n\nvec3 UnprojectCoord( vec2 vTexCoord, vec4 vPlane, int iAxis )\n{\n    vec3 vPos = vec3(0.0);\n    \n    switch( iAxis )\n    {\n        default:\n        case 0:\n        \tvPos.yz = vTexCoord;\n        \tvPos.x = -( vPos.y * vPlane.y + vPos.z * vPlane.z + vPlane.w ) / vPlane.x;\n\t\t\tbreak;        \n\n        case 1:\n\t\t\tvPos.xz = vTexCoord;\n    \t\tvPos.y = -( vPos.x * vPlane.x + vPos.z * vPlane.z + vPlane.w ) / vPlane.y;\n\t\t\tbreak;        \n\n        case 2:\n\t\t\tvPos.xy = vTexCoord;            \n            vPos.z = -(vPos.x * vPlane.x + vPos.y * vPlane.y + vPlane.w) / vPlane.z;\n\t\t\tbreak;        \n    }\n    \n    return vPos;    \n}\n\n\nvec3 UnprojectCoord( vec2 vTexCoord, vec4 vPlane )\n{\n    int iAxis = GetProjectionAxis( vPlane.xyz );\n\treturn UnprojectCoord( vTexCoord, vPlane, iAxis );\n}\n\nstruct C_HitInfo\n{\n    float fClosestT;\n    int iBrushIndex;\n    int iPlaneIndex;\n};\n    \n\nvoid BrushPlane( sampler2D iData, vec3 vRO, vec3 vRD, int iBrushIndex, int iPlaneIndex, float expand, inout C_HitInfo enterInfo, inout float fExitT )\n{\n    // Clip ray enter / exit times by plane\n    \n\tMapDataPlane plane = MapData_ReadPlane( iData, iPlaneIndex );\n    \n\tfloat fStartPlaneDist = dot(vRO, plane.plane.xyz) + plane.plane.w - expand;\n\tfloat fDeltaPlaneDist = -dot(vRD, plane.plane.xyz);\n    \n\tfloat fIntersectT = fStartPlaneDist / fDeltaPlaneDist;\n    \n    if ( fDeltaPlaneDist > 0.0 )\n    {        \n        if ( fIntersectT > enterInfo.fClosestT )\n        {\n            enterInfo = C_HitInfo(fIntersectT, iBrushIndex, iPlaneIndex);\n        }\n    }\n    else\n    {\n        if ( fIntersectT < fExitT )\n        {\n            fExitT = fIntersectT;\n        }\t\n    }\n}\n\nvoid EndBrush( C_HitInfo enterInfo, float fExitT, inout C_HitInfo hitInfo)\n{\n\tif( enterInfo.fClosestT < min(fExitT, hitInfo.fClosestT))\n\t{\n\t\thitInfo = enterInfo;\n\t}\n}\n\nvoid MapIntersectBrush( sampler2D iData, int iBrushIndex, vec3 vRO, vec3 vRD, inout C_HitInfo hitInfo, float expand )\n{\n    MapDataBrush brushInfo = MapData_ReadBrush( iData, iBrushIndex );\n    \n    C_HitInfo enterInfo = C_HitInfo( 0.0f, -1, -1 );\n    float fExitT = kFarClip;        \n\n    for ( int iPlaneIndex=0; iPlaneIndex<brushInfo.planeCount; iPlaneIndex++ )\n    {            \n        BrushPlane( iData, vRO, vRD, iBrushIndex, brushInfo.planeStart + iPlaneIndex, expand, enterInfo, fExitT );            \n    }\n\n    EndBrush( enterInfo, fExitT, hitInfo );\n}\n\n#define kMaxDist 1000.0\n#define kEpsilon 0.0001\n\n\nvoid MapIntersect( sampler2D iData, MapDataInfo mapInfo, vec3 vRO, vec3 vRD, out C_HitInfo hitInfo, float expand )\n{\n\thitInfo.fClosestT = kFarClip;\n\thitInfo.iPlaneIndex = -1;\n    hitInfo.iBrushIndex = -1;\n\n#if USE_AABB_TREE\n    \n    const int STACK_DEPTH = 10;\n    const int STACK_MAX = STACK_DEPTH - 1;\n    int node_stack[STACK_DEPTH];\n    int node_stack_ptr = 0;  \n    \n    node_stack[node_stack_ptr] = 0;\n    node_stack_ptr++;\n    \n    while ( node_stack_ptr > 0 )\n    {\t\t\n        node_stack_ptr--;\n        int iNodeIndex = node_stack[node_stack_ptr];\n        AABBNode node = MapData_ReadAABBNode( iData, iNodeIndex );\n        \n        if ( RayBoxIntersect( node.bounds, vRO, vRD, expand ) )\n        {        \n            if ( node.childB_brushCount < 0 )\n            {\n                int iFirstBrushIndex = node.childA_brushIndex;\n                int iBrushCount = abs(node.childB_brushCount);\n                for ( int iBrushArrayIndex=0; iBrushArrayIndex<iBrushCount; iBrushArrayIndex++ )\n                {          \n                    int iBrushIndex = iFirstBrushIndex + iBrushArrayIndex;               \n\n                    iBrushIndex = clamp( iBrushIndex, 0, mapInfo.brushCount - 1 );\t                                \n                    MapIntersectBrush( iData, iBrushIndex, vRO, vRD, hitInfo, expand );\n                }\n            }\n            else\n            {\n                if ( node_stack_ptr < STACK_MAX )\n                {\n                    node_stack[node_stack_ptr] = node.childA_brushIndex;\n                    node_stack_ptr++;\n                }\n\n                if ( node_stack_ptr < STACK_MAX )\n                {\n                    node_stack[node_stack_ptr] = node.childB_brushCount;\n                    node_stack_ptr++;            \n                }\n            }\n        }\n    }\n#else \n    \n    for ( int iBrushIndex=0; iBrushIndex<mapInfo.brushCount; iBrushIndex++ )\n    {          \n        MapIntersectBrush( iData, iBrushIndex, vRO, vRD, hitInfo );\n    }    \n#endif\n}\n\nbool MapShadow( sampler2D iData, MapDataInfo mapInfo, vec3 vRO, vec3 vRD, float fMinDist, float fMaxDist, float expand )\n{\n#if USE_AABB_TREE     \n    const int STACK_DEPTH = 10;\n    const int STACK_MAX = STACK_DEPTH - 1;    \n    int node_stack[STACK_DEPTH];\n    int node_stack_ptr = 0;  \n    \n    node_stack[node_stack_ptr] = 0;\n    node_stack_ptr++;\n    \n    while ( node_stack_ptr > 0 )\n    {\t\t\n        node_stack_ptr--;\n        int iNodeIndex = node_stack[node_stack_ptr];\n        AABBNode node = MapData_ReadAABBNode( iData, iNodeIndex );\n        \n        if ( RayBoxIntersect( node.bounds, vRO, vRD, expand ) )\n        {        \n            if ( node.childB_brushCount < 0 )\n            {\n                int iFirstBrushIndex = node.childA_brushIndex;\n                int iBrushCount = abs(node.childB_brushCount);\n                for ( int iBrushArrayIndex=0; iBrushArrayIndex<iBrushCount; iBrushArrayIndex++ )\n                {          \n                    int iBrushIndex = iFirstBrushIndex + iBrushArrayIndex;               \n\n                    iBrushIndex = clamp( iBrushIndex, 0, mapInfo.brushCount - 1 );\t                                \n                    \n\t\t\t        MapDataBrush brushInfo = MapData_ReadBrush( iData, iBrushIndex );\n                    \n                    C_HitInfo enterInfo = C_HitInfo( 0.0f, 0, 0 );\n                    float fExitT = kFarClip;        \n                    \n                    for ( int iPlaneIndex=0; iPlaneIndex<brushInfo.planeCount; iPlaneIndex++ )\n                    {            \n                        BrushPlane( iData, vRO, vRD, iBrushIndex, brushInfo.planeStart + iPlaneIndex, expand, enterInfo, fExitT );            \n                    }\n\n                    if( enterInfo.fClosestT >= fMinDist && enterInfo.fClosestT <= min(fExitT, fMaxDist) )\n                    {\n                        return true;\n                    }                    \n                }\n            }\n            else\n            {\n\n                if ( node_stack_ptr < STACK_MAX )\n                {\n                    node_stack[node_stack_ptr] = node.childA_brushIndex;\n                    node_stack_ptr++;\n                }\n\n                if ( node_stack_ptr < STACK_MAX )\n                {\n                    node_stack[node_stack_ptr] = node.childB_brushCount;\n                    node_stack_ptr++;            \n                }           \n            }\n        }\n    }\n    \n    return false;\n#else\n    for ( int iBrushIndex=0; iBrushIndex<mapInfo.brushCount; iBrushIndex++ )\n    {               \n        MapDataBrush brushInfo = MapData_ReadBrush( iData, iBrushIndex );\n        \n\t\tC_HitInfo enterInfo = C_HitInfo( 0.0f, -1, -1 );\n\t\tfloat fExitT = kFarClip;        \n        \n\t    for ( int iPlaneIndex=0; iPlaneIndex<brushInfo.planeCount; iPlaneIndex++ )\n    \t{            \n            BrushPlane( iData, vRO, vRD, iBrushIndex, brushInfo.planeStart + iPlaneIndex, enterInfo, fExitT );            \n        }\n        \n        if( enterInfo.fClosestT >= fMinDist && enterInfo.fClosestT <= min(fExitT, fMaxDist) )\n        {\n            return true;\n        }\n    }\n    \n    return false;    \n#endif\n}\n\n\n#define\tCONTENTS_EMPTY\t\t-1\n#define\tCONTENTS_SOLID\t\t-2\n#define\tCONTENTS_WATER\t\t-3\n#define\tCONTENTS_SLIME\t\t-4\n#define\tCONTENTS_LAVA\t\t-5\n#define\tCONTENTS_SKY\t\t-6    \n\nint PointInBrush( sampler2D iData, int iBrushIndex, vec3 vPos )\n{    \n    uint brushTexture = 0xffu;\n    MapDataBrush brushInfo = MapData_ReadBrush( iData, iBrushIndex );\n    \n    for ( int iBrushPlaneIndex=0; iBrushPlaneIndex<brushInfo.planeCount; iBrushPlaneIndex++ )\n    {            \n        int iPlaneIndex = brushInfo.planeStart + iBrushPlaneIndex;\n\t\tMapDataPlane plane = MapData_ReadPlane( iData, iPlaneIndex );\n    \n\t\tfloat fPlaneDist = dot(vPos, plane.plane.xyz) + plane.plane.w;\n        brushTexture = plane.textureIndex;\n        \n        if ( fPlaneDist >= 0.0 )\n        {\n            // outside brush\n            return CONTENTS_EMPTY;\n        }\n    }\n    \n    int contents = CONTENTS_SOLID;\n    \n    switch( brushTexture )\n    {\n\tdefault:\n        break;\n    case TEX_WATER2:\n        contents = CONTENTS_WATER;\n        break;\n        \n    case TEX_WATER1:\n        contents = CONTENTS_SLIME;\n        break;\n    case TEX_LAVA1:\n        contents = CONTENTS_LAVA;\n        break;\n    }\n    \n    return contents;\n}\n\n\nint BoxInBrush( sampler2D iData, int iBrushIndex, vec3 vPos, vec3 vSize )\n{    \n    uint brushTexture = 0xffu;\n    MapDataBrush brushInfo = MapData_ReadBrush( iData, iBrushIndex );\n    \n    for ( int iBrushPlaneIndex=0; iBrushPlaneIndex<brushInfo.planeCount; iBrushPlaneIndex++ )\n    {            \n        int iPlaneIndex = brushInfo.planeStart + iBrushPlaneIndex;\n\t\tMapDataPlane plane = MapData_ReadPlane( iData, iPlaneIndex );\n    \n\t\tvec3 offset = -vSize * sign( plane.plane.xyz );\n        \n\t\tfloat fPlaneDist = dot(vPos + offset, plane.plane.xyz) + plane.plane.w;\n        brushTexture = plane.textureIndex;\n        \n        if ( brushTexture == TEX_WIZMET1_1 )\n        {\n            return CONTENTS_EMPTY;\n        }\n        \n        if ( fPlaneDist >= 0.0 )\n        {\n            // outside brush\n            return CONTENTS_EMPTY;\n        }\n    }\n    \n    int contents = CONTENTS_SOLID;\n    \n    switch( brushTexture )\n    {\n\tdefault:\n        break;\n    case TEX_WATER2:\n        contents = CONTENTS_WATER;\n        break;\n        \n    case TEX_WATER1:\n        contents = CONTENTS_SLIME;\n        break;\n    case TEX_LAVA1:\n        contents = CONTENTS_LAVA;\n        break;\n    }\n    \n    return contents;\n}\nint MapPointContents( sampler2D iData, MapDataInfo mapInfo, vec3 vPos )\n{\n    int contents = CONTENTS_EMPTY;\n#if USE_AABB_TREE \n    const int STACK_DEPTH = 10;\n    const int STACK_MAX = STACK_DEPTH - 1;\n    int node_stack[STACK_DEPTH];\n    int node_stack_ptr = 0;  \n    \n    node_stack[node_stack_ptr] = 0;\n    node_stack_ptr++;\n    \n    while ( node_stack_ptr > 0 )\n    {\t\t\n        node_stack_ptr--;\n        int iNodeIndex = node_stack[node_stack_ptr];\n        AABBNode node = MapData_ReadAABBNode( iData, iNodeIndex );\n        \n        if ( Box_ContainsPoint( node.bounds, vPos ) )\n        {        \n            if ( node.childB_brushCount < 0 )\n            {\n                int iFirstBrushIndex = node.childA_brushIndex;\n                int iBrushCount = abs(node.childB_brushCount);\n                for ( int iBrushArrayIndex=0; iBrushArrayIndex<iBrushCount; iBrushArrayIndex++ )\n                {          \n                    int iBrushIndex = iFirstBrushIndex + iBrushArrayIndex;               \n\n                    iBrushIndex = clamp( iBrushIndex, 0, mapInfo.brushCount - 1 );\t                                \n                    \n                    int brushContents = PointInBrush( iData, iBrushIndex, vPos );\n                    if ( brushContents != CONTENTS_EMPTY )\n                    {\n                        contents = brushContents;\n                        if ( contents == CONTENTS_SOLID )\n                        {\n\t                        return CONTENTS_SOLID;\n                        }\n                    }\n                }\n            }\n            else\n            {\n\n                if ( node_stack_ptr < STACK_MAX )\n                {\n                    node_stack[node_stack_ptr] = node.childA_brushIndex;\n                    node_stack_ptr++;\n                }\n\n                if ( node_stack_ptr < STACK_MAX )\n                {\n                    node_stack[node_stack_ptr] = node.childB_brushCount;\n                    node_stack_ptr++;            \n                }\n            }\n        }\n    }\n    \n#else\n    for ( int iBrushIndex=0; iBrushIndex<mapInfo.brushCount; iBrushIndex++ )\n    {               \n        int brushContents = PointInBrush( iData, iBrushIndex, vPos );\n        if ( brushContents != CONTENTS_EMPTY )\n        {\n            contents = brushContents;\n            if ( contents == CONTENTS_SOLID )\n            {\n                return CONTENTS_SOLID;\n            }\n        }       \n    }\n#endif    \n    return contents;\n    \n}\n\nint MapBoxContents( sampler2D iData, MapDataInfo mapInfo, vec3 vPos, vec3 boxSize )\n{\n    Box testBox;\n    testBox.m_min = -boxSize - 1.0f;\n    testBox.m_max = boxSize + 1.0f;\n    \n    int contents = CONTENTS_EMPTY;\n#if USE_AABB_TREE \n    const int STACK_DEPTH = 10;\n    const int STACK_MAX = STACK_DEPTH - 1;\n    int node_stack[STACK_DEPTH];\n    int node_stack_ptr = 0;  \n    \n    node_stack[node_stack_ptr] = 0;\n    node_stack_ptr++;\n    \n    while ( node_stack_ptr > 0 )\n    {\t\t\n        node_stack_ptr--;\n        int iNodeIndex = node_stack[node_stack_ptr];\n        AABBNode node = MapData_ReadAABBNode( iData, iNodeIndex );\n        \n        Box expandedBox = Box_Expand( node.bounds, boxSize );\n        \n        if ( Box_ContainsPoint( expandedBox, vPos ) )\n        {        \n            if ( node.childB_brushCount < 0 )\n            {\n                int iFirstBrushIndex = node.childA_brushIndex;\n                int iBrushCount = abs(node.childB_brushCount);\n                for ( int iBrushArrayIndex=0; iBrushArrayIndex<iBrushCount; iBrushArrayIndex++ )\n                {          \n                    int iBrushIndex = iFirstBrushIndex + iBrushArrayIndex;               \n\n                    iBrushIndex = clamp( iBrushIndex, 0, mapInfo.brushCount - 1 );\t                                \n                    \n                    int brushContents = BoxInBrush( iData, iBrushIndex, vPos, boxSize );\n                    if ( brushContents != CONTENTS_EMPTY )\n                    {\n                        contents = brushContents;\n                        if ( contents == CONTENTS_SOLID )\n                        {\n\t                        return CONTENTS_SOLID;\n                        }\n                    }\n                }\n            }\n            else\n            {\n\n                if ( node_stack_ptr < STACK_MAX )\n                {\n                    node_stack[node_stack_ptr] = node.childA_brushIndex;\n                    node_stack_ptr++;\n                }\n\n                if ( node_stack_ptr < STACK_MAX )\n                {\n                    node_stack[node_stack_ptr] = node.childB_brushCount;\n                    node_stack_ptr++;            \n                }\n            }\n        }\n    }\n    \n#else\n    for ( int iBrushIndex=0; iBrushIndex<mapInfo.brushCount; iBrushIndex++ )\n    {               \n        int brushContents = PointInBrush( iData, iBrushIndex, vPos );\n        if ( brushContents != CONTENTS_EMPTY )\n        {\n            contents = brushContents;\n            if ( contents == CONTENTS_SOLID )\n            {\n                return CONTENTS_SOLID;\n            }\n        }       \n    }\n#endif    \n    return contents;\n    \n}\n\n\nfloat GetLighting( sampler2D iChannelData, MapDataInfo mapInfo, MapDataBrush brushInfo, MapDataPlane planeInfo, vec3 vPos, vec3 vNormal )\n{\n    float fShade = 0.0;\n    \n    vec3 vLightSurfacePos = vPos + vNormal * 0.01;\n        \n    for ( int iLightIndex=0; iLightIndex<mapInfo.lightCount; iLightIndex++ )\n    {\n        vec4 vLightInfo = texelFetch( iChannelData, ivec2(iLightIndex, ADDR_LIGHT), 0 );\n        \n\t\tvec3 vLightPos = vLightInfo.xyz;\n        float light = vLightInfo.w;\n        \n        float fDist = length(vLightSurfacePos - vLightPos);\n        if ( fDist < light )            \n        {        \n            float fAdd = (light - fDist);\n\n            vec3 vLightDir = normalize( vLightSurfacePos - vLightPos );\n\n            float scaleCos = 0.5;\n            float angle = dot(vNormal, -vLightDir);\n            \n            if ( angle > 0.0 ) // not authentic\n            {     \n                angle = (1.0 - scaleCos) * (scaleCos + angle);\n\n                fAdd *= angle;\n                if ( fAdd > 0.0 )\n                {\n                    bool bShadow = MapShadow( iChannelData, mapInfo, vLightPos, vLightDir, 0.01f, fDist - 0.01f, 0.0f);\n                    if( !bShadow )\n                    {\n                        fShade += fAdd;\n                    }\n                }\n            }\n        }\n    } \n\n    fShade /= 255.0;\n\n    fShade = clamp( fShade, 0.0, 1.0 );\n    \n    return fShade;\n}\n\n\n\n#define PACK_16_16(A,B) \t\t( ( (A) & 65535u) | (( (B) & 65535u) << 16u) )\n\n#define UNPACK_16_16_A( X ) \t( ( (X) >> 0u  ) & 65535u )\n#define UNPACK_16_16_B( X ) \t( ( (X) >> 16u ) & 65535u )\n\n\n#define PACK_10_10_10_2(A,B,C,D) ( ( (A) & 1023u) | (( (B) & 1023u) << 10u) | (( (C) & 1023u) << 20u) | (( (D) & 3u) << 30u) )\n\n#define UNPACK_10_10_10_2_A( X ) ( ( (X)       ) & 1023u )\n#define UNPACK_10_10_10_2_B( X ) ( ( (X) >> 10u) & 1023u )\n#define UNPACK_10_10_10_2_C( X ) ( ( (X) >> 20u) & 1023u )\n#define UNPACK_10_10_10_2_D( X ) ( ( (X) >> 30u) & 3u    )\n\n\n\n#define PI 3.141592654f\n#define TAU ( PI * 2.0f )\n\n#define NO_UNROLL(X) (X + min(0,iFrame))\n#define NO_UNROLLU(X) (X + uint(min(0,iFrame)))\n\n\n//  _   _           _       _____                 _   _                 \n// | | | | __ _ ___| |__   |  ___|   _ _ __   ___| |_(_) ___  _ __  ___ \n// | |_| |/ _` / __| '_ \\  | |_ | | | | '_ \\ / __| __| |/ _ \\| '_ \\/ __|\n// |  _  | (_| \\__ \\ | | | |  _|| |_| | | | | (__| |_| | (_) | | | \\__ \\\n// |_| |_|\\__,_|___/_| |_| |_|   \\__,_|_| |_|\\___|\\__|_|\\___/|_| |_|___/\n//                                                                      \n\n// http://web.archive.org/web/20071223173210/http://www.concentric.net/~Ttwang/tech/inthash.htm\nuint HashWang( uint a )\n{\n\ta = (a ^ 61u) ^ (a >> 16u);\n\ta = a + (a << 3u);\n\ta = a ^ (a >> 4u);\n\ta = a * 0x27d4eb2du;\n\ta = a ^ (a >> 15u);\n\treturn a;\n}\n\nuint HashHugo( uint n )\n{\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;    \n    \n    return n;\n}\n\nuint Rand( inout uint seed )\n{\n    seed += 13u;\n    return HashWang( seed );\n}\n\nfloat FRand( inout uint seed )\n{\n    uint urand = Rand( seed );    \n    const uint mantissaMask = (0xffffffffu) >> ( 32u - 23u );\n    return fract(float(urand & mantissaMask) / float(mantissaMask)); \n    //return uintBitsToFloat( (urand & mantissaMask) | (127u << 23u) );\n}\n\nvec2 FRand2( inout uint seed )\n{\n    return vec2( FRand( seed ), FRand( seed ) );\n}\n\nvec3 FRand3( inout uint seed )\n{\n    return vec3( FRand( seed ), FRand( seed ), FRand( seed ) );\n}\n\nfloat SRand( inout uint seed )\n{\n    return FRand( seed ) * 2.0 - 1.0;\n}\n\nvec2 SRand2( inout uint seed )\n{\n    return FRand2( seed ) * 2.0 - 1.0;\n}\n\nvec3 SRand3( inout uint seed )\n{\n    return FRand3( seed ) * 2.0 - 1.0;\n}\n\n//  ____        _          ____  _                             \n// |  _ \\  __ _| |_ __ _  / ___|| |_ ___  _ __ __ _  __ _  ___ \n// | | | |/ _` | __/ _` | \\___ \\| __/ _ \\| '__/ _` |/ _` |/ _ \\\n// | |_| | (_| | || (_| |  ___) | || (_) | | | (_| | (_| |  __/\n// |____/ \\__,_|\\__\\__,_| |____/ \\__\\___/|_|  \\__,_|\\__, |\\___|\n//                                                  |___/      \n//\n\nvec4 LoadVec4( sampler2D sampler, in ivec2 vAddr )\n{\n    return texelFetch( sampler, vAddr, 0 );\n}\n\nvec3 LoadVec3( sampler2D sampler, in ivec2 vAddr )\n{\n    return LoadVec4( sampler, vAddr ).xyz;\n}\n\nbool AtAddress( ivec2 p, ivec2 c ) { return all( equal( p, c ) ); }\n\nvoid StoreVec4( in ivec2 vAddr, in vec4 vValue, inout vec4 fragColor, in ivec2 fragCoord )\n{\n    fragColor = AtAddress( fragCoord, vAddr ) ? vValue : fragColor;\n}\n\nvoid StoreVec3( in ivec2 vAddr, in vec3 vValue, inout vec4 fragColor, in ivec2 fragCoord )\n{\n    StoreVec4( vAddr, vec4( vValue, 0.0 ), fragColor, fragCoord);\n}\n\n//\n//  ____       _        _   _             \n// |  _ \\ ___ | |_ __ _| |_(_) ___  _ __  \n// | |_) / _ \\| __/ _` | __| |/ _ \\| '_ \\ \n// |  _ < (_) | || (_| | |_| | (_) | | | |\n// |_| \\_\\___/ \\__\\__,_|\\__|_|\\___/|_| |_|\n//                                        \n//\n\nvec3 RotateX( const in vec3 vPos, const in float fAngle )\n{\n    float s = sin(fAngle);\n    float c = cos(fAngle);\n    \n    vec3 vResult = vec3( vPos.x, c * vPos.y + s * vPos.z, -s * vPos.y + c * vPos.z);\n    \n    return vResult;\n}\n\nvec3 RotateY( const in vec3 vPos, const in float fAngle )\n{\n    float s = sin(fAngle);\n    float c = cos(fAngle);\n    \n    vec3 vResult = vec3( c * vPos.x + s * vPos.z, vPos.y, -s * vPos.x + c * vPos.z);\n    \n    return vResult;\n}\n\nvec3 RotateZ( const in vec3 vPos, const in float fAngle )\n{\n    float s = sin(fAngle);\n    float c = cos(fAngle);\n    \n    vec3 vResult = vec3( c * vPos.x + s * vPos.y, -s * vPos.x + c * vPos.y, vPos.z);\n    \n    return vResult;\n}\n\n\n//   ___              _                  _             \n//  / _ \\ _   _  __ _| |_ ___ _ __ _ __ (_) ___  _ __  \n// | | | | | | |/ _` | __/ _ \\ '__| '_ \\| |/ _ \\| '_ \\ \n// | |_| | |_| | (_| | ||  __/ |  | | | | | (_) | | | |\n//  \\__\\_\\\\__,_|\\__,_|\\__\\___|_|  |_| |_|_|\\___/|_| |_|\n//                                                     \n//\n\nvec4 QuatMul(const in vec4 lhs, const in vec4 rhs) \n{\n      return vec4( lhs.y*rhs.z - lhs.z*rhs.y + lhs.x*rhs.w + lhs.w*rhs.x,\n                   lhs.z*rhs.x - lhs.x*rhs.z + lhs.y*rhs.w + lhs.w*rhs.y,\n                   lhs.x*rhs.y - lhs.y*rhs.x + lhs.z*rhs.w + lhs.w*rhs.z,\n                   lhs.w*rhs.w - lhs.x*rhs.x - lhs.y*rhs.y - lhs.z*rhs.z);\n}\n\nvec4 QuatFromAxisAngle( vec3 vAxis, float fAngle )\n{\n\treturn vec4( normalize(vAxis) * sin(fAngle), cos(fAngle) );    \n}\n\nvec4 QuatFromVec3( vec3 vRot )\n{\n    float l = length( vRot );\n    if ( l <= 0.0 )\n    {\n        return vec4( 0.0, 0.0, 0.0, 1.0 );\n    }\n    return QuatFromAxisAngle( vRot, l );\n}\n\nmat3 QuatToMat3( const in vec4 q )\n{\n\tvec4 qSq = q * q;\n\tfloat xy2 = q.x * q.y * 2.0;\n\tfloat xz2 = q.x * q.z * 2.0;\n\tfloat yz2 = q.y * q.z * 2.0;\n\tfloat wx2 = q.w * q.x * 2.0;\n\tfloat wy2 = q.w * q.y * 2.0;\n\tfloat wz2 = q.w * q.z * 2.0;\n \n\treturn mat3 (\t\n     qSq.w + qSq.x - qSq.y - qSq.z, xy2 - wz2, xz2 + wy2,\n     xy2 + wz2, qSq.w - qSq.x + qSq.y - qSq.z, yz2 - wx2,\n     xz2 - wy2, yz2 + wx2, qSq.w - qSq.x - qSq.y + qSq.z );\n}\n\nvec3 QuatMul( vec3 v, vec4 q )\n{\n    // TODO Validate vs other quat code\n    vec3 t = 2.0 * cross(q.xyz, v);\n\treturn v + q.w * t + cross(q.xyz, t);\n}\n\n//\n//  _  __          _                         _ \n// | |/ /___ _   _| |__   ___   __ _ _ __ __| |\n// | ' // _ \\ | | | '_ \\ / _ \\ / _` | '__/ _` |\n// | . \\  __/ |_| | |_) | (_) | (_| | | | (_| |\n// |_|\\_\\___|\\__, |_.__/ \\___/ \\__,_|_|  \\__,_|\n//           |___/                             \n//\n\nconst int KEY_SPACE = 32;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_A     = 65;\nconst int KEY_B     = 66;\nconst int KEY_C     = 67;\nconst int KEY_D     = 68;\nconst int KEY_E     = 69;\nconst int KEY_F     = 70;\nconst int KEY_G     = 71;\nconst int KEY_H     = 72;\nconst int KEY_I     = 73;\nconst int KEY_J     = 74;\nconst int KEY_K     = 75;\nconst int KEY_L     = 76;\nconst int KEY_M     = 77;\nconst int KEY_N     = 78;\nconst int KEY_O     = 79;\nconst int KEY_P     = 80;\nconst int KEY_Q     = 81;\nconst int KEY_R     = 82;\nconst int KEY_S     = 83;\nconst int KEY_T     = 84;\nconst int KEY_U     = 85;\nconst int KEY_V     = 86;\nconst int KEY_W     = 87;\nconst int KEY_X     = 88;\nconst int KEY_Y     = 89;\nconst int KEY_Z     = 90;\nconst int KEY_COMMA = 188;\nconst int KEY_PER   = 190;\n\nconst int KEY_1 = \t49;\nconst int KEY_2 = \t50;\nconst int KEY_3 = \t51;\nconst int KEY_ENTER = 13;\nconst int KEY_SHIFT = 16;\nconst int KEY_CTRL  = 17;\nconst int KEY_ALT   = 18;\nconst int KEY_TAB\t= 9;\n\nbool Key_IsPressed( sampler2D samp, int key)\n{\n    return texelFetch( samp, ivec2(key, 0), 0 ).x > 0.0;    \n}\n\nbool Key_IsToggled(sampler2D samp, int key)\n{\n    return texelFetch( samp, ivec2(key, 2), 0 ).x > 0.0;    \n}\n\n\n//\n//   ____                               \n//  / ___|__ _ _ __ ___   ___ _ __ __ _ \n// | |   / _` | '_ ` _ \\ / _ \\ '__/ _` |\n// | |__| (_| | | | | | |  __/ | | (_| |\n//  \\____\\__,_|_| |_| |_|\\___|_|  \\__,_|\n//                                      \n\n\nstruct CameraState\n{\n    vec3 vPos;\n    vec3 vTarget;\n    vec3 vUp;\n    float fFov;\n    vec2 vJitter;\n    float fPlaneInFocus;\n    bool bStationary;\n};\n    \nvoid Cam_LoadState( out CameraState cam, sampler2D sampler, ivec2 addr )\n{\n    vec4 vPos = LoadVec4( sampler, addr + ivec2(0,0) );\n    cam.vPos = vPos.xyz;\n    vec4 targetFov = LoadVec4( sampler, addr + ivec2(1,0) );\n    cam.vTarget = targetFov.xyz;\n    cam.fFov = targetFov.w;\n    vec4 vUp = LoadVec4( sampler, addr + ivec2(2,0) );\n    cam.vUp = vUp.xyz;\n    \n    vec4 jitterDof = LoadVec4( sampler, addr + ivec2(3,0) );\n    cam.vJitter = jitterDof.xy;\n    cam.fPlaneInFocus = jitterDof.z;\n    cam.bStationary = jitterDof.w > 0.0;\n}\n\nvoid Cam_StoreState( ivec2 addr, const in CameraState cam, inout vec4 fragColor, in ivec2 fragCoord )\n{\n    StoreVec4( addr + ivec2(0,0), vec4( cam.vPos, 0 ), fragColor, fragCoord );\n    StoreVec4( addr + ivec2(1,0), vec4( cam.vTarget, cam.fFov ), fragColor, fragCoord );    \n    StoreVec4( addr + ivec2(2,0), vec4( cam.vUp, 0 ), fragColor, fragCoord );    \n    StoreVec4( addr + ivec2(3,0), vec4( cam.vJitter, cam.fPlaneInFocus, cam.bStationary ? 1.0f : 0.0f ), fragColor, fragCoord );    \n}\n\nmat3 Cam_GetWorldToCameraRotMatrix( const CameraState cameraState )\n{\n    vec3 vForward = normalize( cameraState.vTarget - cameraState.vPos );\n\tvec3 vRight = normalize( cross( cameraState.vUp, vForward) );\n\tvec3 vUp = normalize( cross(vForward, vRight) );\n    \n    return mat3( vRight, vUp, vForward );\n}\n\nvec2 Cam_GetViewCoordFromUV( vec2 vUV, float fAspectRatio )\n{\n\tvec2 vWindow = vUV * 2.0 - 1.0;\n\tvWindow.x *= fAspectRatio;\n\n\treturn vWindow;\t\n}\n\nvoid Cam_GetCameraRay( const vec2 vUV, const float fAspectRatio, const CameraState cam, out vec3 vRayOrigin, out vec3 vRayDir )\n{\n    vec2 vView = Cam_GetViewCoordFromUV( vUV, fAspectRatio );\n    vRayOrigin = cam.vPos;\n    float fPerspDist = 1.0 / tan( radians( cam.fFov ) );\n    vRayDir = normalize( Cam_GetWorldToCameraRotMatrix( cam ) * vec3( vView, fPerspDist ) );\n    \n#if USE_MAP_COORDS    \n    vRayOrigin = vRayOrigin.xzy;\n    vRayDir = vRayDir.xzy;\n#endif    \n}\n\n// fAspectRatio = iResolution.x / iResolution.y;\nvec2 Cam_GetUVFromWindowCoord( const in vec2 vWindow, float fAspectRatio )\n{\n    vec2 vScaledWindow = vWindow;\n    vScaledWindow.x /= fAspectRatio;\n\n    return (vScaledWindow * 0.5 + 0.5);\n}\n\nvec2 Cam_WorldToWindowCoord(const in vec3 vWorldPos, const in CameraState cameraState )\n{\n    vec3 vOffset = vWorldPos - cameraState.vPos;\n    vec3 vCameraLocal;\n\n    vCameraLocal = vOffset * Cam_GetWorldToCameraRotMatrix( cameraState );\n\t\n    vec2 vWindowPos = vCameraLocal.xy / (vCameraLocal.z * tan( radians( cameraState.fFov ) ));\n    \n    return vWindowPos;\n}\n\n// ---- 8< ---- GLSL Number Printing - @P_Malin ---- 8< ----\n// Creative Commons CC0 1.0 Universal (CC-0) \n// https://www.shadertoy.com/view/4sBSWW\n\nfloat DigitBin( const int x )\n{\n    return x==0?480599.0:x==1?139810.0:x==2?476951.0:x==3?476999.0:x==4?350020.0:x==5?464711.0:x==6?464727.0:x==7?476228.0:x==8?481111.0:x==9?481095.0:0.0;\n}\n\nfloat PrintValue( const vec2 vStringCoords, const float fValue, const float fMaxDigits, const float fDecimalPlaces )\n{\n    if ((vStringCoords.y < 0.0) || (vStringCoords.y >= 1.0)) return 0.0;\n\tfloat fLog10Value = log2(abs(fValue)) / log2(10.0);\n\tfloat fBiggestIndex = max(floor(fLog10Value), 0.0);\n\tfloat fDigitIndex = fMaxDigits - floor(vStringCoords.x);\n\tfloat fCharBin = 0.0;\n\tif(fDigitIndex > (-fDecimalPlaces - 1.01)) {\n\t\tif(fDigitIndex > fBiggestIndex) {\n\t\t\tif((fValue < 0.0) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;\n\t\t} else {\t\t\n\t\t\tif(fDigitIndex == -1.0) {\n\t\t\t\tif(fDecimalPlaces > 0.0) fCharBin = 2.0;\n\t\t\t} else {\n                float fReducedRangeValue = fValue;\n                if(fDigitIndex < 0.0) { fReducedRangeValue = fract( fValue ); fDigitIndex += 1.0; }\n\t\t\t\tfloat fDigitValue = (abs(fReducedRangeValue / (pow(10.0, fDigitIndex))));\n                fCharBin = DigitBin(int(floor(mod(fDigitValue, 10.0))));\n\t\t\t}\n        }\n\t}\n    return floor(mod((fCharBin / pow(2.0, floor(fract(vStringCoords.x) * 4.0) + (floor(vStringCoords.y * 5.0) * 4.0))), 2.0));\n}\n\n// ---- 8< -------- 8< -------- 8< -------- 8< ----\n\n\nvoid AxesFromAngles( vec3 vAngles, out vec3 vRight, out vec3 vUp, out vec3 vForwards )\n{\n    mat3 rotX = mat3(1.0, 0.0, 0.0, \n                     0.0, cos(vAngles.x), sin(vAngles.x), \n                     0.0, -sin(vAngles.x), cos(vAngles.x));\n    \n    mat3 rotY = mat3(cos(vAngles.y), 0.0, -sin(vAngles.y), \n                     0.0, 1.0, 0.0, \n                     sin(vAngles.y), 0.0, cos(vAngles.y));    \n\n    mat3 rotZ = mat3(cos(vAngles.z), sin(vAngles.z), 0.0,\n                     -sin(vAngles.z), cos(vAngles.z), 0.0,\n                     0.0, 0.0, 1.0 );\n    \n    \n    mat3 m = rotY * rotX * rotZ;\n    \n    vRight = m[0];\n    vUp = m[1];\n    vForwards = m[2];    \n}\n\n// State address stuff\nconst ivec2 ADDR_CAM \t\t\t\t= ivec2( 0, 0 );\nconst ivec2 ADDR_FLYCAM \t\t\t= ivec2( 4, 0 );\nconst ivec2 ADDR_PREV_RESOLUTION \t= ivec2( 7, 0 );\nconst ivec2 ADDR_PLAYER_STATE \t\t= ivec2( 8, 0 );\nconst ivec2 ADDR_DEBUG_INFO\t\t\t= ivec2( 11, 0 );\n\n\n\n////////////////////////////////////////////////////////\n\n// Quake Code:\n\n#define vec3_t vec3\n\nvoid VectorCopy( vec3_t src, inout vec3_t dst )\n{\n    dst = src;\n}\n\nfloat DotProduct( vec3_t a, vec3_t b )\n{\n    return dot(a,b);\n}\n\nvoid CrossProduct ( vec3_t a, vec3_t b, inout vec3_t result )\n{\n    result = cross(a,b);\n}\n\nvoid VectorScale ( vec3_t a , float s, inout vec3_t result )\n{\n    result = a * s;\n}\n\nfloat VectorNormalize( inout vec3_t v )\n{\n    float l = length(v);\n    \n    if ( l != 0.0f )\n    {\n        v /= l;\n    }\n    \n    return l;\n}\n\nvoid AngleVectors( vec3_t angles, out vec3_t fd, out vec3_t rt, out vec3_t up )    \n{\n    AxesFromAngles( angles, rt, up, fd );\n    \n    fd.yz = fd.zy;\n    rt.yz = rt.zy;\n    up.yz = up.zy;\n}\n\n\nstruct pmplane_t\n{\n\tvec3_t\tnormal;\n\tfloat\tdist;\n};\n    \nstruct pmtrace_t\n{\n\tbool\t\tallsolid;\t// if true, plane is not valid\n\tbool\t\tstartsolid;\t// if true, the initial point was in a solid area\n\t//bool\t\tinopen, inwater;\n\tfloat\t\tfraction;\t\t// time completed, 1.0 = didn't hit anything\n\tvec3_t\t\tendpos;\t\t\t// final position\n\tpmplane_t\tplane;\t\t\t// surface normal at impact\n\tint\t\t\tent;\t\t\t// entity the surface is on   \n    \n    // extra data\n    int \t\tiBrushIndex;\n    int\t\t\tiPlaneIndex;\n};\n\nfloat GetStartDist( vec3 start, vec3 end, vec4 plane, vec3 offset )\n{\n    return dot(start + offset, plane.xyz) + plane.w;\n}\n\nfloat GetEndDist( vec3 start, vec3 end, vec4 plane, vec3 offset )\n{\n    return dot(end + offset, plane.xyz) + plane.w;\n}\n\npmtrace_t PM_PlayerMoveRay( sampler2D iData, MapDataInfo mapInfo, vec3 start, vec3 end )\n{\n    \n    vec3 boxExpand = playerBox + 1.0;\n    pmtrace_t trace;\n\n\tBox lineBounds = LineBoundingBox( start, end );\n    lineBounds = Box_Expand( lineBounds, boxExpand );\n\n#if 1\n    \n    trace.fraction = 1.0f;\n\ttrace.ent = -1;\n\ttrace.startsolid = false;\n    trace.allsolid = false;\n    trace.endpos = end;\n    trace.plane.normal = vec3(0,0,1);\n    trace.plane.dist = 0.0;\n    \n    trace.iBrushIndex = -1;\n    trace.iPlaneIndex = -1;\n\n    //return trace;\n    \n    const int STACK_DEPTH = 10;\n    const int STACK_MAX = STACK_DEPTH - 1;\n    int node_stack[STACK_DEPTH];\n    int node_stack_ptr = 0;  \n    \n    node_stack[node_stack_ptr] = 0;\n    node_stack_ptr++;\n    \n    while ( node_stack_ptr > 0 )\n    {\t\t\n        node_stack_ptr--;\n        int iNodeIndex = node_stack[node_stack_ptr];\n        AABBNode node = MapData_ReadAABBNode( iData, iNodeIndex );\n        \n        if ( BoxBoxIntersect( node.bounds, lineBounds ) )\n        {        \n            if ( node.childB_brushCount < 0 )\n            {\n                int iFirstBrushIndex = node.childA_brushIndex;\n                int iBrushCount = abs(node.childB_brushCount);\n                for ( int iBrushArrayIndex=0; iBrushArrayIndex<iBrushCount; iBrushArrayIndex++ )\n                {          \n                    int iBrushIndex = iFirstBrushIndex + iBrushArrayIndex;               \n\n                    iBrushIndex = clamp( iBrushIndex, 0, mapInfo.brushCount - 1 );\t                                \n\n                    bool bStartInSolidBrush = true;\n                    \n                    float brushTEnter = 0.0;\n                    vec4 brushPlane = vec4(0);\n                    float brushTExit = 1.0f;\n                    \n                    bool skipBrush = false;\n                    \n                    int iBrushHitPlaneIndex = -1;\n                    \n                    MapDataBrush brushInfo = MapData_ReadBrush( iData, iBrushIndex );\n                    for ( int iBrushPlaneIndex=0; iBrushPlaneIndex<brushInfo.planeCount; iBrushPlaneIndex++ )\n                    {            \n                        int iPlaneIndex = brushInfo.planeStart + iBrushPlaneIndex;\n                        \n\t\t\t\t\t\tMapDataPlane plane = MapData_ReadPlane( iData, iPlaneIndex );\n    \n                        vec3 offset = -playerBox * sign( plane.plane.xyz );\n                        \n\t\t\t\t\t\tfloat fStartDist = GetStartDist( start, end, plane.plane, offset );\n\t\t\t\t\t\tfloat fEndDist = GetEndDist( start, end, plane.plane, offset );\n                        \n                        float t = -fStartDist / (fEndDist - fStartDist);\n\n                        if ( fStartDist >= 0.0 )\n                        {\n                            // start point is oustide one of the brush planes\n                            bStartInSolidBrush = false;\n\n                            if ( fEndDist >= 0.0 )\n                            {\n                                // start and end outside brush, trivial reject brush\n                                skipBrush = true;\n                                break;\n                            }\n                            else\n                            {\n                                // span crosses plane, update enter dist\n                                if ( t >= brushTEnter )\n                                {\n                                    brushTEnter = t;\n                                    brushPlane = plane.plane;\n                                    iBrushHitPlaneIndex = iPlaneIndex;\n                                }\n                            }\n                        }\n                        else\n                        {\n                            // start point is inside this plane                            \n                            if ( fEndDist >= 0.0 )\n                            {\n                                // end point is outside this plane\n                                if ( t < brushTExit )\n                                {\n                                    brushTExit = t;\n                                }\n                            }\n                            else\n                            {\n                                // start and end point inside\n                            }\n                        }\n                    }\n                    \n                    if ( !skipBrush )\n                    {\n                        if ( bStartInSolidBrush )\n                        {\n                            trace.startsolid = true;\n                            trace.fraction = 0.0f;\n                            trace.ent = 0;\n                            trace.iBrushIndex = iBrushIndex;\n                            trace.iPlaneIndex = -1;\n                            break;\n                        }\n\n                        if ( brushTEnter < brushTExit )\n                        {\n                            if ( brushTEnter < trace.fraction )\n                            {\n                                trace.fraction = brushTEnter;\n                                trace.ent = 0;\n                                trace.endpos = mix( start, end, trace.fraction );\n                                trace.plane.normal = brushPlane.xyz;\n                                trace.plane.dist = brushPlane.w;\n                                \n                                trace.iBrushIndex = iBrushIndex;\n                                trace.iPlaneIndex = iBrushHitPlaneIndex;\n                                \n                                lineBounds = LineBoundingBox( start, trace.endpos );\n\t\t\t\t\t\t\t    lineBounds = Box_Expand( lineBounds, boxExpand );                                \n                            }                            \n                        }\n                    }\n                }\n            }\n            else\n            {\n                if ( node_stack_ptr < STACK_MAX )\n                {\n                    node_stack[node_stack_ptr] = node.childA_brushIndex;\n                    node_stack_ptr++;\n                }\n\n                if ( node_stack_ptr < STACK_MAX )\n                {\n                    node_stack[node_stack_ptr] = node.childB_brushCount;\n                    node_stack_ptr++;            \n                }\n            }\n        }\n    }    \n    \n    \n#else    \n    \n    vec3 vRO = start;\n\tvec3 vRD = end - start;\n    float fLen2 = dot( vRD, vRD );\n    float fLen = 0.0f;    \n    if ( fLen2 > 0.0 ) fLen = sqrt( fLen2 );\n    \n    vRD = normalize( vRD );\n    \n    C_HitInfo hitInfo;\n    \n    trace.allsolid = false;\n    trace.startsolid = false;\n    \n    trace.fraction = 1.0f;\n    trace.endpos = end;\n    \n    trace.plane.normal = vec3(0,0,1);    \n    trace.plane.dist = 0.0f;\n    trace.ent = -1;\n    \n    /*if ( MapPointInSolid( iChannelData, mapInfo, vRO ) )\n    {\n        trace.startsolid = true;\n        trace.fraction = 0.0;\n        return trace;\n    }*/\n    \n    hitInfo.fClosestT = 1000000.0;\n    \n    if ( fLen > 0.0 )\n    {\n        \n        MapIntersect( iChannelData, mapInfo, vRO, vRD, hitInfo, 0.0f );\n\n        if ( hitInfo.fClosestT <= fLen )\n        {\n            trace.fraction = hitInfo.fClosestT  / fLen;\n            trace.endpos = vRO + vRD * hitInfo.fClosestT; //mix( start, end, trace.fraction );\n\n            MapDataPlane planeData = MapData_ReadPlane( iChannelData, hitInfo.iPlaneIndex );\n\n            trace.plane.normal = planeData.plane.xyz;\n            trace.plane.dist = planeData.plane.w;\n            trace.ent = 0; // world\n        }\n    }\n    \n    if ( hitInfo.fClosestT <= 0.0 )\n    {\n        trace.startsolid = true;\n        trace.fraction = 0.0f;\n    }\n            \n#endif  \n    \n    return trace;\n}\n\n\npmtrace_t PM_PlayerMove( sampler2D iData, MapDataInfo mapInfo, vec3 start, vec3 end )\n{\n    return PM_PlayerMoveRay( iData, mapInfo, start, end );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// State Update (FlyCam / Player Movement etc.)\n\n#define iChannelFlyCam iChannel0\n#define iChannelKeyboard iChannel1\n#define iChannelData iChannel2\n\n#define FLY_CAM_INVERT_Y 1\n\n#define UPDATE_PLAYER 0\n\n//    _____ _          ____                \n//   |  ___| |_   _   / ___|__ _ _ __ ___  \n//   | |_  | | | | | | |   / _` | '_ ` _ \\ \n//   |  _| | | |_| | | |__| (_| | | | | | |\n//   |_|   |_|\\__, |  \\____\\__,_|_| |_| |_|\n//            |___/                        \n//\n\nstruct FlyCamState\n{\n    vec3 vPos;\n    vec3 vAngles;\n    vec4 vPrevMouse;\n};\n\nvoid FlyCam_LoadState( out FlyCamState flyCam, sampler2D sampler, ivec2 addr )\n{\n    vec4 vPos = LoadVec4( sampler, addr + ivec2(0,0) );\n    flyCam.vPos = vPos.xyz;\n    vec4 vAngles = LoadVec4( sampler, addr + ivec2(1,0) );\n    flyCam.vAngles = vAngles.xyz;\n    vec4 vPrevMouse = LoadVec4( sampler, addr + ivec2(2,0) );    \n    flyCam.vPrevMouse = vPrevMouse;\n}\n\nvoid FlyCam_StoreState( ivec2 addr, const in FlyCamState flyCam, inout vec4 fragColor, in ivec2 fragCoord )\n{\n    StoreVec4( addr + ivec2(0,0), vec4( flyCam.vPos, 0 ), fragColor, fragCoord );\n    StoreVec4( addr + ivec2(1,0), vec4( flyCam.vAngles, 0 ), fragColor, fragCoord );\n    StoreVec4( addr + ivec2(2,0), vec4( iMouse ), fragColor, fragCoord );\n}\n\n\n\nvoid FlyCam_GetAxes( FlyCamState flyCam, out vec3 vRight, out vec3 vUp, out vec3 vForwards )\n{\n    AxesFromAngles( flyCam.vAngles, vRight, vUp, vForwards );\n}\n\nbool FlyCam_Update( inout FlyCamState flyCam, vec3 vStartPos, vec3 vStartAngles )\n{   \n#if USE_MAP_COORDS\n    vStartPos = vStartPos.xzy;\n#endif\n    \n    bool bMoving = false;\n    //float fMoveSpeed = 0.01;\n    float fMoveSpeed = iTimeDelta * 0.5 * 100.0;\n    float fRotateSpeed = 3.0;\n    \n    if ( Key_IsPressed( iChannelKeyboard, KEY_SHIFT ) )\n    {\n        fMoveSpeed *= 4.0;\n    }\n    \n    if ( iFrame == 0 )\n    {\n        flyCam.vPos = vStartPos;\n        flyCam.vAngles = vStartAngles;\n        flyCam.vPrevMouse = iMouse;\n    }\n      \n    vec3 vMove = vec3(0.0);\n        \n    if ( Key_IsPressed( iChannelKeyboard, KEY_W ) )\n    {\n        vMove.z += fMoveSpeed;\n        bMoving = true;\n    }\n    if ( Key_IsPressed( iChannelKeyboard, KEY_S ) )\n    {\n        vMove.z -= fMoveSpeed;\n        bMoving = true;\n    }\n\n    if ( Key_IsPressed( iChannelKeyboard, KEY_A ) )\n    {\n        vMove.x -= fMoveSpeed;\n        bMoving = true;\n    }\n    if ( Key_IsPressed( iChannelKeyboard, KEY_D ) )\n    {\n        vMove.x += fMoveSpeed;\n        bMoving = true;\n    }\n    \n    vec3 vForwards, vRight, vUp;\n    FlyCam_GetAxes( flyCam, vRight, vUp, vForwards );\n        \n    flyCam.vPos += vRight * vMove.x + vForwards * vMove.z;\n    \n    vec3 vRotate = vec3(0);\n    \n    bool bMouseDown = iMouse.z > 0.0;\n    bool bMouseWasDown = flyCam.vPrevMouse.z > 0.0;\n    \n    if ( bMouseDown && bMouseWasDown )\n    {\n    \tvRotate.yx += ((iMouse.xy - flyCam.vPrevMouse.xy) / iResolution.xy) * fRotateSpeed;\n        \n        if( length(vRotate.yx) > 0.0 )\n        {\n        \tbMoving = true;\n        }\n    }\n    \n#if FLY_CAM_INVERT_Y    \n    vRotate.x *= -1.0;\n#endif    \n    \n    if ( Key_IsPressed( iChannelKeyboard, KEY_E ) )\n    {\n        vRotate.z -= fRotateSpeed * 0.01;\n        bMoving = true;\n    }\n    if ( Key_IsPressed( iChannelKeyboard, KEY_Q ) )\n    {\n        vRotate.z += fRotateSpeed * 0.01;\n        bMoving = true;\n    }\n        \n\tflyCam.vAngles += vRotate;\n    \n    flyCam.vAngles.x = clamp( flyCam.vAngles.x, -PI * .5, PI * .5 );\n    \n    return bMoving;\n}\n\n\nstruct playermove_t\n{\n\t//int\t\tsequence;\t// just for debugging prints\n\n\t// player state\n\tvec3_t\torigin;\n\tvec3_t\tangles;\n\tvec3_t\tvelocity;\n\tuint\toldbuttons;\n\tfloat\twaterjumptime;\n\tbool\tdead;\n\t//int\t\tspectator;\n\n\t// world state\n\t//int\t\tnumphysent;\n\t//physent_t\tphysents[MAX_PHYSENTS];\t// 0 should be the world\n\n\t// input\n\t//usercmd_t\tcmd;\n\n\t// results\n\t//int\t\tnumtouch;\n\t//int\t\ttouchindex[MAX_PHYSENTS];\n} ;\n\nstruct movevars_t \n{\n\tfloat\tgravity;\n\tfloat\tstopspeed;\n\tfloat\tmaxspeed;\n\t//float\tspectatormaxspeed;\n\tfloat\taccelerate;\n\tfloat\tairaccelerate;\n\t//float\twateraccelerate;\n\tfloat\tfriction;\n\tfloat\twaterfriction;\n\tfloat\tentgravity;\n};\n    \nconst movevars_t movevars = movevars_t(\n\t800.0, // float\tgravity;\n\t100.0, // float\tstopspeed;\n\t320.0, // float\tmaxspeed;\n\t// float\tspectatormaxspeed;\n\t10.0, // float\taccelerate;\n\t0.7, // float\tairaccelerate;\n\t// float\twateraccelerate;\n\t4.0,// float\tfriction;\n\t4.0,// float\twaterfriction;\n\t1.0// float\tentgravity;\n    \n    );\n\n\nconst vec3\tplayer_mins = vec3(-16, -16, -24);\nconst vec3\tplayer_maxs = vec3(16, 16, 32);\nconst vec3 vec3_origin = vec3(0);\n\nconst uint BUTTON_JUMP = 0x1u;\n\nstruct usercmd_t\n{\n\t//te\tmsec;\n\tvec3\tangles;\n\tfloat\tforwardmove, sidemove, upmove;\n    uint\tbuttons;\n\t//byte\timpulse;\n};\n\n\n\n    \n    \nstruct pmlocals\n{\n    float frametime;\n    vec3_t forward, right, up;\n    \n    int onground;\n    int waterlevel;\n    int watertype;\n    \n    \n    vec4 debug; // added for shadertoy debugging\n};    \n    \nusercmd_t GetControls( float movespeed )\n{\n    usercmd_t cmd;\n    \n    cmd.angles = vec3(0);\n    \n    cmd.forwardmove = 0.0f;\n    cmd.sidemove = 0.0f;\n    cmd.upmove = 0.0f;\n    \n    cmd.buttons = 0u;\n    \n    if ( Key_IsPressed( iChannelKeyboard, KEY_W ) )\n    {\n        cmd.forwardmove += movespeed;\n    }\n    if ( Key_IsPressed( iChannelKeyboard, KEY_S ) )\n    {\n        cmd.forwardmove -= movespeed;\n    }\n\n    if ( Key_IsPressed( iChannelKeyboard, KEY_A ) )\n    {\n        cmd.sidemove -= movespeed;\n    }\n    if ( Key_IsPressed( iChannelKeyboard, KEY_D ) )\n    {\n        cmd.sidemove += movespeed;\n    }\n    if ( Key_IsPressed( iChannelKeyboard, KEY_SPACE ) )\n    {\n        cmd.buttons |= BUTTON_JUMP;\n    }\n    \n    bool bMouseDown = iMouse.z > 0.0;\n    \n    if ( bMouseDown )\n    {\n    \t//cmd.angles.yx += ((iMouse.xy - flyCam.vPrevMouse.xy) / iResolution.xy) * fRotateSpeed;\n\t\tcmd.angles.yx = (iMouse.xy / iResolution.xy);        \n    }    \n    \n    return cmd;\n}\n    \nvoid Player_LoadState( out playermove_t playerState, sampler2D sampler, ivec2 addr )\n{\n    vec4 vPos = LoadVec4( sampler, addr + ivec2(0,0) );\n    playerState.origin = vPos.xyz;\n    vec4 vAngles = LoadVec4( sampler, addr + ivec2(1,0) );\n    playerState.angles = vAngles.xyz;\n    vec4 vVel = LoadVec4( sampler, addr + ivec2(2,0) );\n    playerState.velocity = vVel.xyz;\n    \n    playerState.dead = false;\n    playerState.oldbuttons = 0u;\n    playerState.waterjumptime = 0.0;\n}\n\nvoid Player_StoreState( ivec2 addr, const in playermove_t playerState, inout vec4 fragColor, in ivec2 fragCoord )\n{\n    StoreVec4( addr + ivec2(0,0), vec4( playerState.origin, 0 ), fragColor, fragCoord );\n    StoreVec4( addr + ivec2(1,0), vec4( playerState.angles, 0 ), fragColor, fragCoord );\n    StoreVec4( addr + ivec2(2,0), vec4( playerState.velocity, 0 ), fragColor, fragCoord );\n}\n\nint PM_PointContents( vec3 vPos )\n{\n    MapDataInfo mapInfo = MapData_ReadInfo( iChannelData );\n    \n\treturn MapBoxContents( iChannelData, mapInfo, vPos, playerBox );\n}\n    \nvoid PM_CatagorizePosition( MapDataInfo mapInfo, inout playermove_t pmove, inout pmlocals locals )\n{\n\tvec3_t\t\tpoint;\n\tint\t\t\tcont;\n\tpmtrace_t\t\ttr;\n\n// if the player hull point one unit down is solid, the player\n// is on ground\n\n// see if standing on something solid\t\n\tpoint[0] = pmove.origin[0];\n\tpoint[1] = pmove.origin[1];\n\tpoint[2] = pmove.origin[2] - 1.0f;\n\tif (pmove.velocity[2] > 180.0f)\n\t{\n\t\tlocals.onground = -1;\n\t}\n\telse\n\t{\n\t\ttr = PM_PlayerMove (iChannelData, mapInfo, pmove.origin, point);\n\t\tif ( tr.plane.normal[2] < 0.7f)\n        {\n\t\t\tlocals.onground = -1;\t// too steep\n        }\n\t\telse\n        {\n\t\t\tlocals.onground = tr.ent;\n        }\n        \n\t        //locals.debug.w = tr.plane.normal[2];\n        \n        locals.debug.z = float(tr.iPlaneIndex);\n        locals.debug.w = float(tr.iBrushIndex);\n        \n\t\tif (locals.onground != -1)\n\t\t{\n\t\t\tpmove.waterjumptime = 0.0f;\n\t\t\tif (!tr.startsolid && !tr.allsolid)\n\t\t\t\tVectorCopy (tr.endpos, pmove.origin);\n\t\t}\n\n\t\t// standing on an entity other than the world\n\t\t//if (tr.ent > 0)\n\t\t//{\n\t\t//\tpmove.touchindex[pmove.numtouch] = tr.ent;\n\t\t//\tpmove.numtouch++;\n\t\t//}\n\t}\n\n//\n// get waterlevel\n//\n\tlocals.waterlevel = 0;\n\tlocals.watertype = CONTENTS_EMPTY;\n    \n\n\tpoint[2] = pmove.origin[2] + player_mins[2] + 1.0f;\t\n\tcont = PM_PointContents (point);\n\n\tif (cont <= CONTENTS_WATER)\n\t{\n\t\tlocals.watertype = cont;\n\t\tlocals.waterlevel = 1;\n\t\tpoint[2] = pmove.origin[2] + (player_mins[2] + player_maxs[2])*0.5;\n\t\tcont = PM_PointContents (point);\n\t\tif (cont <= CONTENTS_WATER)\n\t\t{\n\t\t\tlocals.waterlevel = 2;\n\t\t\tpoint[2] = pmove.origin[2] + 22.0;\n\t\t\tcont = PM_PointContents (point);\n\t\t\tif (cont <= CONTENTS_WATER)\n\t\t\t\tlocals.waterlevel = 3;\n\t\t}\n\t}    \n}\n\n\n\nvoid PM_Friction(MapDataInfo mapInfo, inout playermove_t pmove, inout pmlocals locals)\n{\n\tfloat\tspeed, newspeed, control;\n\tfloat\tfriction;\n\tfloat\tdrop;\n\tvec3_t\tstart, stop;\n\tpmtrace_t\t\ttrace;\n\t\n\tif (pmove.waterjumptime != 0.0f)\n\t\treturn;\n\t    \n\tspeed = length( pmove.velocity );\n\tif (speed < 1.0f)\n\t{\n\t\tpmove.velocity[0] = 0.0f;\n\t\tpmove.velocity[1] = 0.0f;\n\t\treturn;\n\t}\n\n\tfriction = movevars.friction;\n\n// if the leading edge is over a dropoff, increase friction\n\tif (locals.onground != -1) {\n\t\tstart[0] = stop[0] = pmove.origin[0] + pmove.velocity[0]/speed*16.0f;\n\t\tstart[1] = stop[1] = pmove.origin[1] + pmove.velocity[1]/speed*16.0f;\n\t\tstart[2] = pmove.origin[2] + player_mins[2];\n\t\tstop[2] = start[2] - 34.0f;\n\n\t\ttrace = PM_PlayerMove (iChannelData, mapInfo, start, stop);\n\n\t\tif (trace.fraction == 1.0) {\n\t\t\tfriction *= 2.0;\n\t\t}\n\t}\n\n\tdrop = 0.0;\n\n\tif (locals.waterlevel >= 2) // apply water friction\n\t\tdrop += speed*movevars.waterfriction*float(locals.waterlevel)*locals.frametime;\n\telse if (locals.onground != -1) // apply ground friction\n\t{\n\t\tcontrol = speed < movevars.stopspeed ? movevars.stopspeed : speed;\n\t\tdrop += control*friction*locals.frametime;\n\t}\n\n\n// scale the velocity\n\tnewspeed = speed - drop;\n\tif (newspeed < 0.0f)\n\t\tnewspeed = 0.0f;\n\tnewspeed /= speed;\n\n\tpmove.velocity = pmove.velocity * newspeed;    \n}\n\n\n\n\n\n#define\tMAX_CLIP_PLANES\t5\n\n\n#define\tSTOP_EPSILON\t0.1\n\nint PM_ClipVelocity (vec3 src, vec3 normal, inout vec3 dst, float overbounce)\n{\n\tfloat\tbackoff;\n\tfloat\tchange;\n\tint\t\ti, blocked;\n\t\n\tblocked = 0;\n\tif (normal[2] > 0.0f)\n\t\tblocked |= 1;\t\t// floor\n\tif (normal[2]==0.0f)\n\t\tblocked |= 2;\t\t// step\n\t\n\tbackoff = DotProduct (src, normal) * overbounce;\n\n\tfor (i=0 ; i<3 ; i++)\n\t{\n\t\tchange = normal[i]*backoff;\n\t\tdst[i] = src[i] - change;\n\t\tif (dst[i] > -STOP_EPSILON && dst[i] < STOP_EPSILON)\n\t\t\tdst[i] = 0.0f;\n\t}\n\t\n\treturn blocked;\n}\n\nint PM_FlyMove( MapDataInfo mapInfo, inout playermove_t pmove, inout pmlocals locals)\n{\n\tint\t\t\tbumpcount, numbumps;\n\tvec3_t\t\tdir;\n\tfloat\t\td;\n\tint\t\t\tnumplanes;\n\tvec3_t\t\tplanes[MAX_CLIP_PLANES];\n\tvec3_t\t\tprimal_velocity, original_velocity;\n\tint\t\t\ti, j;\n\tpmtrace_t\t\ttrace;\n\tvec3_t\t\tend;\n\tfloat\t\ttime_left;\n\tint\t\t\tblocked;\n\t\n\tnumbumps = 4;\n\t    \n\tblocked = 0;\n\tVectorCopy (pmove.velocity, original_velocity);\n\tVectorCopy (pmove.velocity, primal_velocity);\n\tnumplanes = 0;\n\n\ttime_left = locals.frametime;\n\n\tfor (bumpcount=0 ; bumpcount<numbumps ; bumpcount++)\n\t{\n\t\tfor (i=0 ; i<3 ; i++)\n\t\t\tend[i] = pmove.origin[i] + time_left * pmove.velocity[i];\n\n\t\ttrace = PM_PlayerMove (iChannelData, mapInfo, pmove.origin, end);        \n\n\t\tif (trace.startsolid || trace.allsolid)\n\t\t{\t// entity is trapped in another solid\n\t\t\tVectorCopy (vec3_origin, pmove.velocity);\n\t\t\treturn 3;\n\t\t}\n\n\t\tif (trace.fraction > 0.0f)\n\t\t{\t// actually covered some distance\n\t\t\tVectorCopy (trace.endpos, pmove.origin);\n\t\t\tnumplanes = 0;\n\t\t}\n\n\t\tif (trace.fraction == 1.0f)\n\t\t\t break;\t\t// moved the entire distance\n\n\t\t// save entity for contact\n\t\t//pmove.touchindex[pmove.numtouch] = trace.ent;\n\t\t//pmove.numtouch++;\n\n\t\tif (trace.plane.normal[2] > 0.7)\n\t\t{\n\t\t\tblocked |= 1;\t\t// floor\n\t\t}\n\t\tif (trace.plane.normal[2]==0.0f)\n\t\t{\n\t\t\tblocked |= 2;\t\t// step\n\t\t}\n\n\t\ttime_left -= time_left * trace.fraction;\n\t\t\n\t// cliped to another plane\n\t\tif (numplanes >= MAX_CLIP_PLANES)\n\t\t{\t// this shouldn't really happen\n\t\t\tVectorCopy (vec3_origin, pmove.velocity);\n\t\t\tbreak;\n\t\t}\n\n\t\tVectorCopy (trace.plane.normal, planes[numplanes]);\n\t\tnumplanes++;\n\n//\n// modify original_velocity so it parallels all of the clip planes\n//\n\t\tfor (i=0 ; i<numplanes ; i++)\n\t\t{\n\t\t\tPM_ClipVelocity (original_velocity, planes[i], pmove.velocity, 1.0f);\n\t\t\tfor (j=0 ; j<numplanes ; j++)\n\t\t\t\tif (j != i)\n\t\t\t\t{\n\t\t\t\t\tif (DotProduct (pmove.velocity, planes[j]) < 0.0f)\n\t\t\t\t\t\tbreak;\t// not ok\n\t\t\t\t}\n\t\t\tif (j == numplanes)\n\t\t\t\tbreak;\n\t\t}\n        \t\t\n\t\tif (i != numplanes)\n\t\t{\t// go along this plane\n\t\t}\n\t\telse\n\t\t{\t// go along the crease\n\t\t\tif (numplanes != 2)\n\t\t\t{\n//\t\t\t\tCon_Printf (\"clip velocity, numplanes == %i\\n\",numplanes);\n\t\t\t\tVectorCopy (vec3_origin, pmove.velocity);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tCrossProduct (planes[0], planes[1], dir);\n\t\t\td = DotProduct (dir, pmove.velocity);\n\t\t\tVectorScale (dir, d, pmove.velocity);\n\t\t}\n\n//\n// if original velocity is against the original velocity, stop dead\n// to avoid tiny occilations in sloping corners\n//\n\t\tif (DotProduct (pmove.velocity, primal_velocity) <= 0.0f)\n\t\t{\n\t\t\tVectorCopy (vec3_origin, pmove.velocity);\n\t\t\tbreak;\n\t\t}\n\t}\n    \n\n\tif (pmove.waterjumptime != 0.0f)\n\t{\n\t\tVectorCopy (primal_velocity, pmove.velocity);\n\t}\n\treturn blocked;\n}\n  \nvoid PM_Accelerate ( inout playermove_t pmove, inout pmlocals locals, vec3 wishdir, float wishspeed, float accel)\n{\n\tint\t\t\ti;\n\tfloat\t\taddspeed, accelspeed, currentspeed;\n\n\tif (pmove.dead)\n\t\treturn;\n\tif (pmove.waterjumptime != 0.0)\n\t\treturn;\n\n\tcurrentspeed = DotProduct (pmove.velocity, wishdir);\n\taddspeed = wishspeed - currentspeed;\n\tif (addspeed <= 0.0)\n\t\treturn;\n\taccelspeed = accel*locals.frametime*wishspeed;\n\tif (accelspeed > addspeed)\n\t\taccelspeed = addspeed;\n\t\n    pmove.velocity += accelspeed*wishdir;\t\n}\n\nvoid PM_AirAccelerate(inout playermove_t pmove, inout pmlocals locals, vec3 wishdir, float wishspeed, float accel)\n{\n\tint\t\t\ti;\n\tfloat\t\taddspeed, accelspeed, currentspeed, wishspd = wishspeed;\n\t\t\n\tif (pmove.dead)\n\t\treturn;\n\tif (pmove.waterjumptime != 0.0f)\n\t\treturn;\n\n\tif (wishspd > 30.0f)\n\t\twishspd = 30.0f;\n\tcurrentspeed = DotProduct (pmove.velocity, wishdir);\n\taddspeed = wishspd - currentspeed;\n\tif (addspeed <= 0.0f)\n\t\treturn;\n\taccelspeed = accel * wishspeed * locals.frametime;\n\tif (accelspeed > addspeed)\n\t\taccelspeed = addspeed;\n\t\n\tfor (i=0 ; i<3 ; i++)\n\t\tpmove.velocity[i] += accelspeed*wishdir[i];\t\n}\n\n#define\tSTEPSIZE\t18.0f\n\nvoid PM_GroundMove( MapDataInfo mapInfo, inout playermove_t pmove, inout pmlocals locals)\n{\n\tvec3_t\tstart, dest;\n\tpmtrace_t\ttrace;\n\tvec3_t\toriginal, originalvel, down, up, downvel;\n\tfloat\tdowndist, updist;\n\n\tpmove.velocity[2] = 0.0f;\n\tif (pmove.velocity[0]==0.0 && pmove.velocity[1]==0.0 && pmove.velocity[2]==0.0)\n\t\treturn;\n\n\t// first try just moving to the destination\t\n\tdest[0] = pmove.origin[0] + pmove.velocity[0]*locals.frametime;\n\tdest[1] = pmove.origin[1] + pmove.velocity[1]*locals.frametime;\t\n\tdest[2] = pmove.origin[2];\n\n\t// first try moving directly to the next spot\n\tVectorCopy (dest, start);\n\ttrace = PM_PlayerMove (iChannelData, mapInfo, pmove.origin, dest);\n\tif (trace.fraction == 1.0f)\n\t{\n\t\tVectorCopy (trace.endpos, pmove.origin);\n\t\treturn;\n\t}\n\n\t// try sliding forward both on ground and up 16 pixels\n\t// take the move that goes farthest\n\tVectorCopy (pmove.origin, original);\n\tVectorCopy (pmove.velocity, originalvel);\n\n\t// slide move\n\tPM_FlyMove (mapInfo, pmove, locals);\n\n\tVectorCopy (pmove.origin, down);\n\tVectorCopy (pmove.velocity, downvel);\n\n\tVectorCopy (original, pmove.origin);\n\tVectorCopy (originalvel, pmove.velocity);\n\n// move up a stair height\n\tVectorCopy (pmove.origin, dest);\n\tdest[2] += STEPSIZE;\n\ttrace = PM_PlayerMove (iChannelData, mapInfo, pmove.origin, dest);\n\tif (!trace.startsolid && !trace.allsolid)\n\t{\n\t\tVectorCopy (trace.endpos, pmove.origin);\n\t}\n\n// slide move\n\tPM_FlyMove (mapInfo, pmove, locals);\n\n// press down the stepheight\n\tVectorCopy (pmove.origin, dest);\n\tdest[2] -= STEPSIZE;\n\ttrace = PM_PlayerMove (iChannelData, mapInfo, pmove.origin, dest);\n\tif ( trace.plane.normal[2] < 0.7)\n    {\n\t\tVectorCopy (down, pmove.origin);\n\t\tVectorCopy (downvel, pmove.velocity);\n        return;\n    }\n\tif (!trace.startsolid && !trace.allsolid)\n\t{\n\t\tVectorCopy (trace.endpos, pmove.origin);\n\t}\n\tVectorCopy (pmove.origin, up);\n\n\t// decide which one went farther\n\tdowndist = (down[0] - original[0])*(down[0] - original[0])\n\t\t+ (down[1] - original[1])*(down[1] - original[1]);\n\tupdist = (up[0] - original[0])*(up[0] - original[0])\n\t\t+ (up[1] - original[1])*(up[1] - original[1]);\n\n\tif (downdist > updist)\n\t{\n\n\t\tVectorCopy (down, pmove.origin);\n\t\tVectorCopy (downvel, pmove.velocity);\n\t} else // copy z value from slide move\n\t\tpmove.velocity[2] = downvel[2];\n\n// if at a dead stop, retry the move with nudges to get around lips\n\n}\n\n\n\nvoid PM_AirMove( MapDataInfo mapInfo, inout playermove_t pmove, usercmd_t cmd, inout pmlocals locals )\n{\n\tint\t\t\ti;\n\tvec3_t\t\twishvel;\n\tfloat\t\tfmove, smove;\n\tvec3_t\t\twishdir;\n\tfloat\t\twishspeed;\n\n\tfmove = cmd.forwardmove;\n\tsmove = cmd.sidemove;\n\t\n\tlocals.forward[2] = 0.0;\n\tlocals.right[2] = 0.0f;\n\tVectorNormalize (locals.forward);\n\tVectorNormalize (locals.right);\n\n\tfor (i=0 ; i<2 ; i++)\n\t\twishvel[i] = locals.forward[i]*fmove + locals.right[i]*smove;\n\twishvel[2] = 0.0f;\n\n\tVectorCopy (wishvel, wishdir);\n\twishspeed = VectorNormalize(wishdir);\n\n//\n// clamp to server defined max speed\n//\n\tif (wishspeed > movevars.maxspeed)\n\t{\n\t\tVectorScale (wishvel, movevars.maxspeed/wishspeed, wishvel);\n\t\twishspeed = movevars.maxspeed;\n\t}\n\t\n//\tif (pmove.waterjumptime)\n//\t\tCon_Printf (\"am->%f, %f, %f\\n\", pmove.velocity[0], pmove.velocity[1], pmove.velocity[2]);\n\n\tif ( locals.onground != -1)\n\t{\n\t\tpmove.velocity[2] = 0.0f;\n\t\tPM_Accelerate (pmove, locals, wishdir, wishspeed, movevars.accelerate);\n\t\tpmove.velocity[2] -= movevars.entgravity * movevars.gravity * locals.frametime;\n\t\tPM_GroundMove ( mapInfo, pmove, locals );\n\t\tlocals.debug.y = 1.0;    \n\t}\n\telse\n\t{\t// not on ground, so little effect on velocity\n\t\tPM_AirAccelerate (pmove, locals,wishdir, wishspeed, movevars.accelerate);\n\n\t\t// add gravity\n\t\tpmove.velocity[2] -= movevars.entgravity * movevars.gravity * locals.frametime;\n\n\t\tPM_FlyMove (mapInfo, pmove, locals);\n\t\tlocals.debug.y = 2.0;    \n\n\t}\n\n//Con_Printf(\"airmove:vec: %4.2f %4.2f %4.2f\\n\",\n//\t\t\tpmove.velocity[0],\n//\t\t\tpmove.velocity[1],\n//\t\t\tpmove.velocity[2]);\n//\n\n//\tif (pmove.waterjumptime)\n//\t\tCon_Printf (\"<-am%f, %f, %f\\n\", pmove.velocity[0], pmove.velocity[1], pmove.velocity[2]);\n}\n\nvoid JumpButton ( inout playermove_t pmove, inout pmlocals locals )\n{\n\tif (pmove.dead)\n\t{\n\t\tpmove.oldbuttons |= BUTTON_JUMP;\t// don't jump again until released\n\t\treturn;\n\t}\n\n\tif (pmove.waterjumptime!=0.0f)\n\t{\n\t\tpmove.waterjumptime -= locals.frametime;\n\t\tif (pmove.waterjumptime < 0.0f)\n\t\t\tpmove.waterjumptime = 0.0f;\n\t\treturn;\n\t}\n\n\tif (locals.waterlevel >= 2)\n\t{\t// swimming, not jumping\n\t\tlocals.onground = -1;\n\n\t\tif (locals.watertype == CONTENTS_WATER)\n\t\t\tpmove.velocity[2] = 100.0f;\n\t\telse if (locals.watertype == CONTENTS_SLIME)\n\t\t\tpmove.velocity[2] = 80.0f;\n\t\telse\n\t\t\tpmove.velocity[2] = 50.0f;\n\t\treturn;\n\t}\n\n\tif (locals.onground == -1)\n\t\treturn;\t\t// in air, so no effect\n\n\tif ( (pmove.oldbuttons & BUTTON_JUMP) != 0u )\n\t\treturn;\t\t// don't pogo stick\n\n\tlocals.onground = -1;\n\tpmove.velocity[2] += 270.0f;\n\n\tpmove.oldbuttons |= BUTTON_JUMP;\t// don't jump again until released\n}\n\n\n\n\n\nbool PM_TestPlayerPosition( MapDataInfo mapInfo, vec3 vPos )\n{\n    int pointContents = MapPointContents( iChannelData, mapInfo, vPos );\n    return pointContents != CONTENTS_SOLID;\n}\n\nbool NudgePosition ( inout playermove_t pmove )\n{\n\tvec3\tbase;\n\tint\t\tx, y, z;\n\tint\t\ti;\n\tfloat\t\tsgn[3] = float[3](0., -1. / 8.0, 1. / 8.0);\n\n\tVectorCopy (pmove.origin, base);\n\n    // This doesn't do anything as it is after the previous copy\n    //pmove.origin = floor(pmove.origin*8.0 + 0.5) / 8.0;        \n    \n//\tpmove.origin[2] += 0.124;\n\n//\tif (pmove.dead)\n//\t\treturn;\t\t// might be a squished point, so don'y bother\n//\tif (PM_TestPlayerPosition (pmove.origin) )\n//\t\treturn;\n\n\tMapDataInfo mapInfo = MapData_ReadInfo( iChannelData );\n    \n    \n\tfor (z=0 ; z<=2 ; z++)\n\t{\n\t\tfor (x=0 ; x<=2 ; x++)\n\t\t{\n\t\t\tfor (y=0 ; y<=2 ; y++)\n\t\t\t{\n\t\t\t\tpmove.origin[0] = base[0] + sgn[x];\n\t\t\t\tpmove.origin[1] = base[1] + sgn[y];\n\t\t\t\tpmove.origin[2] = base[2] + sgn[z];\n\t\t\t\tif (PM_TestPlayerPosition (mapInfo, pmove.origin))\n                {\n\t\t\t\t\treturn true;\n                }\n\t\t\t}\n\t\t}\n\t}\n\tVectorCopy (base, pmove.origin);\n    \n//\tCon_DPrintf (\"NudgePosition: stuck\\n\");\n    return false;\n}\n\nvoid PlayerMove( MapDataInfo mapInfo, inout playermove_t pmove, inout pmlocals locals, usercmd_t cmd )\n{\n    locals.frametime = iTimeDelta;   // pmove.cmd.msec * 0.001;\n\t//pmove.numtouch = 0;\n\n\tAngleVectors (pmove.angles, locals.forward, locals.right, locals.up);\n\n\t//if (pmove.spectator)\n\t//{\n\t//\tSpectatorMove ();\n\t//\treturn;\n\t//}\n\n\tbool nudgeResult = NudgePosition (pmove);\n    if ( !nudgeResult )\n    {\n        locals.debug.w = 1.0;\n    }\n\n\t// take angles directly from command\n\tVectorCopy (cmd.angles, pmove.angles);\n\n\t// set onground, watertype, and waterlevel\n\tPM_CatagorizePosition ( mapInfo, pmove, locals);\n\n    if ( locals.onground != -1 ) locals.debug.x = 1.0;\n\n\t//if (locals.waterlevel == 2)\n\t//\tCheckWaterJump (pmove, locals);\n\n\tif (pmove.velocity[2] < 0.0f)\n\t\tpmove.waterjumptime = 0.0f;\n\n\tif ((cmd.buttons & BUTTON_JUMP) != 0u)\n\t\tJumpButton (pmove, locals);\n\telse\n\t\tpmove.oldbuttons &= ~BUTTON_JUMP;\n\n\tPM_Friction (mapInfo, pmove, locals);\n\n\tif (locals.waterlevel >= 2)\n    {\n\t//\tPM_WaterMove ();\n    }\n\telse\n    {\n\t\tPM_AirMove ( mapInfo, pmove, cmd, locals );\n    }\n\n\t// set onground, watertype, and waterlevel for final spot\n    // we don't use this\n\t//PM_CatagorizePosition ( mapInfo, pmove, locals );\n    \n    // debugging:\n    //if ( locals.onground != -1 ) locals.debug.x = 1.0;\n}\n\nvec4 Player_Update( inout playermove_t pmove, vec3 vStartPos, vec3 vStartAngles )\n{   \n    \n#if USE_MAP_COORDS\n    //vStartPos = vStartPos.xzy;\n#endif\n    \n    if ( iFrame == 0 )\n    {\n        pmove.origin = vStartPos;\n        pmove.angles = vStartAngles;\n        pmove.velocity = vec3(0);\n    }\n    \n    MapDataInfo mapInfo = MapData_ReadInfo( iChannelData );  \n    usercmd_t cmd = GetControls( 32767.0f );\n    pmlocals locals;\n    locals.debug = vec4(0);\n    PlayerMove( mapInfo, pmove, locals, cmd );       \n    \n#if 0    \n\n    usercmd_t cmd = GetControls( 1.0f );\n \n    float fMoveSpeed = 1.0;\n        \n    \n\n    vec3 vRight, vUp, vForwards;\n    AxesFromAngles( pmove.angles, vRight, vUp, vForwards );\n    \n    vRight.yz = vRight.zy;\n    vUp.yz = vUp.zy;\n    vForwards.yz = vForwards.zy;\n    \n    \n    pmove.velocity += vRight * cmd.sidemove;\n    pmove.velocity += vForwards * cmd.forwardmove;\n        \n    \n    pmove.velocity *= 0.9;\n        \n    MapDataInfo mapInfo = MapData_ReadInfo( iChannelData );\n    \n    vec3 vRO = pmove.origin;\n    float fVLen = length( pmove.velocity );\n    if ( fVLen > 0.0 )\n    {\n        vec3 vRD = normalize( pmove.velocity );\n\n        C_HitInfo hitInfo;\n\n        MapIntersect( iChannelData, mapInfo, vRO, vRD, hitInfo, 32.0f );\n\n        if ( hitInfo.fClosestT >= fVLen )\n        {\n            pmove.origin += pmove.velocity;\n        }\n        else\n        {\n            pmove.velocity = vec3(0.0f);\n        }\n    }\n#endif\n    \n    return locals.debug;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    FlyCamState flyCam;\n    FlyCam_LoadState( flyCam, iChannelFlyCam, ADDR_FLYCAM);\n    \n    vec4 vPrevResolution = texelFetch( iChannelFlyCam, ADDR_PREV_RESOLUTION, 0);\n\n    float fPathCount = vPrevResolution.z;\n    if ( iTimeDelta < 1.0 / 50.0 )\n    {\n        fPathCount += 1.0;\n    }\n\telse\n    if ( iTimeDelta > 1.0 / 60.0 )\n\t{\n        fPathCount -= 1.0;\n\t}\n    \n    fPathCount = clamp( fPathCount, 1.0, 30.0 );\n\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n\n    if ( fragCoord.x > 12.0 || fragCoord.y > 2.0 )\n    {\n        discard;\n    }\n    \n    \n\tplayermove_t playerState;\n    Player_LoadState( playerState, iChannelFlyCam, ADDR_PLAYER_STATE );\n\n    vec4 debug = vec4(0.0f);\n    \n#if UPDATE_PLAYER    \n    vec3 vPlayerStartPos = vec3( 550.0, 300.0, 55.0 );\n    vec3 vPlayerStartAngles = vec3( 0.0, 0.0, 0 );\n    debug = Player_Update( playerState, vPlayerStartPos, vPlayerStartAngles );\n#endif    \n    \n    vec3 vStartPos = vec3( 550.0, 300.0, 50.0 );\n    vec3 vStartAngles = vec3( 0.0, 0.0, 0 );\n    \n    bool bMoving = FlyCam_Update( flyCam, vStartPos, vStartAngles );\n    \n    CameraState cam;\n\tCam_LoadState( cam, iChannelFlyCam, ADDR_CAM );\n        \n    vec3 vForwards, vRight, vUp;\n    FlyCam_GetAxes( flyCam, vRight, vUp, vForwards );\n    \n    cam.vPos = flyCam.vPos;\n    cam.vTarget = flyCam.vPos + vForwards;\n    cam.vUp = vUp;\n    cam.fFov = 25.0;\n    cam.fPlaneInFocus = 5.0;    \n    \n    cam.bStationary = !bMoving;\n    \n    if ( any(notEqual(iResolution.xy, vPrevResolution.xy)))\n    {\n        cam.bStationary = false;\n    }\n    \n    float camHeightOffset = 0.0f;\n\n    // Else flycam\n#if UPDATE_PLAYER    \n    if ( !Key_IsToggled( iChannelKeyboard, KEY_F ) )\n    {    \n        cam.vPos = playerState.origin;\n        cam.vPos.z += camHeightOffset;\n\n        AxesFromAngles( playerState.angles, vRight, vUp, vForwards );\n        cam.vPos.yz = cam.vPos.zy;    \n\n        cam.vTarget = cam.vPos + vForwards;\n        cam.vUp = vUp;\n        cam.fFov = 25.0;\n        cam.fPlaneInFocus = 5.0;\n        \n        // Set flycam position to player position\n        flyCam.vPos = cam.vPos;\n        flyCam.vAngles = playerState.angles;\n    }\n    else\n#endif\n    {\n        // Set player position to flycam position\n        playerState.origin = cam.vPos;\n        playerState.origin.yz = playerState.origin.zy;\n        playerState.origin.z -= camHeightOffset;\n    }\n    \n    Cam_StoreState( ADDR_CAM, cam, fragColor, ivec2(fragCoord.xy) );   \n    FlyCam_StoreState( ADDR_FLYCAM, flyCam, fragColor, ivec2(fragCoord));    \n    Player_StoreState( ADDR_PLAYER_STATE, playerState, fragColor, ivec2(fragCoord));\n    StoreVec4( ADDR_PREV_RESOLUTION, vec4( iResolution.xy, fPathCount, 0 ), fragColor, ivec2(fragCoord) );\n\tStoreVec4( ADDR_DEBUG_INFO, debug, fragColor, ivec2(fragCoord) );\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Render Lightmap\n\n#define iChannelData iChannel0\n#define iChannelLightmap iChannel1\n\n// Lightmap\n\nvoid SampleNeighbors( inout vec4 color, ivec2 iCoord )\n{\n    float fTotal = 0.0;\n    vec3 vColor = vec3(0.0);\n    for( int oy = -1; oy <= 1; oy++ )\n    {\n        for( int ox = -1; ox <= 1; ox++ )\n        {\n            if ( ox != 0 && oy != 0 )\n            {\n                ivec2 iSampleCoord = iCoord + ivec2( ox, oy );\n                \n                if ( iSampleCoord.x >= 0 && iSampleCoord.y >= 0 && iSampleCoord.x < int(iResolution.x) && iSampleCoord.y < int(iResolution.y) )\n                {\n                    vec4 vSample = texelFetch( iChannelLightmap, iCoord + ivec2( ox, oy ), 0);\n\n                    if ( vSample.b <= 1.0 )\n                    {\n                        vColor += vSample.rgb;\n                        fTotal += 1.0;\n                    }\n                }\n            }\n        }\n    }\n    \n    if ( fTotal > 0.0 )\n    {\n        color.rgb = vColor / fTotal;\n    }\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 vInfo = texelFetch( iChannelLightmap, ivec2(0), 0);\n    ivec2 iPrevResolution = ivec2( vInfo.xy );\n    int iPrevStage = int( vInfo.w );\n    \n    bool bResolutionChanged = ( iPrevResolution.x != int(iResolution.x) || iPrevResolution.y != int(iResolution.y) );\n    \n    ivec2 iCoord = ivec2(fragCoord);\n\n    int iStage = iPrevStage + 1;  \n    \n    if ( iFrame == 0 || bResolutionChanged )\n    {\n        iStage = 0;\n    }\n    \n    //if ( false ) // Comment in to regenerate lightmap every frame\n    if ( iStage > 8 )\n    {\n        fragColor = texelFetch( iChannelLightmap, iCoord, 0);\n        return;\n    }    \n    \n    if ( iCoord.x == 0 && iCoord.y == 0 )\n    {\n        fragColor = vec4( iResolution.xy, 0.0, iStage );\n        return;\n    }\n    \n    if ( iStage > 0 )\n    {\n        fragColor = texelFetch( iChannelLightmap, iCoord, 0);\n        \n        if ( fragColor.b > 1.0 )\n        {            \n            // Dilate lightmap\n            SampleNeighbors( fragColor, iCoord );\n        }\n        \n        return;\n    }\n    \n    vec2 vUV = fragCoord.xy / iResolution.xy;\n    \n    //fragColor = vec4(0, fract(vUV.xy * 100.0f), -1.0 );\n    fragColor = vec4(0, 0, 2.0, 1 );\n    \n    vec2 vLightmapCoord = vUV * vLightmapRange + vLightmapMin;\n    \n    MapDataInfo mapInfo = MapData_ReadInfo( iChannelData );    \n    \n    for( int iBrushIndex = 0; iBrushIndex < mapInfo.brushCount; iBrushIndex++ )\n    {\n\t\tMapDataBrush brushInfo = MapData_ReadBrush( iChannelData, iBrushIndex );\n    \tfor( int iBrushPlaneIndex = 0; iBrushPlaneIndex < brushInfo.planeCount; iBrushPlaneIndex++ )\n    \t{\n            int iPlaneArrayIndex = brushInfo.planeStart + iBrushPlaneIndex;\n\t\t\tMapDataPlane planeInfo = MapData_ReadPlane( iChannelData, iPlaneArrayIndex );\n\n            uint iPlaneTexture = planeInfo.textureIndex;\n            \n            if ( IsTextureLit( iPlaneTexture ) && planeInfo.projectionAxis != 3 )\n            {\n            \n                vec2 vProjectedPos = vLightmapCoord - planeInfo.lightmapOffset;\n                vec3 vWorldPos = UnprojectCoord( vProjectedPos, planeInfo.plane, planeInfo.projectionAxis );\n\n                bool bFailed = false;\n\n                // Clip point by all planes but this\n                for( int iClipPlaneIndex = 0; iClipPlaneIndex < brushInfo.planeCount; iClipPlaneIndex++ )\n                {\n                    if ( iClipPlaneIndex != iBrushPlaneIndex )\n                    {\n                        int iClipPlaneArrayIndex = brushInfo.planeStart + iClipPlaneIndex;\n                        MapDataPlane clipPlaneInfo = MapData_ReadPlane( iChannelData, iClipPlaneArrayIndex );\n\n                        float fDist = dot( vWorldPos, clipPlaneInfo.plane.xyz ) + clipPlaneInfo.plane.w;\n                        if ( fDist > 0.0 )\n                        {\n                            bFailed = true;\n                        }\n                    }\n                }\n\n                if ( !bFailed )\n                {\n                    fragColor = vec4(0);\n\n                    float fShade = 1.0;\n\t\t\t\t\tfShade = GetLighting( iChannelData, mapInfo, brushInfo, planeInfo, vWorldPos, planeInfo.plane.xyz );\n\n                    fragColor.rgb = vec3(fShade);\n                }\n            }\n        }\n    }    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}