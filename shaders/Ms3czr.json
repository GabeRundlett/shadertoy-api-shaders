{
    "Shader": {
        "info": {
            "date": "1517778781",
            "description": "First shader, testing out signed distance functions.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ms3czr",
            "likes": 10,
            "name": "Scaffolding",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf"
            ],
            "usePreview": 0,
            "username": "trypsonite",
            "viewed": 850
        },
        "renderpass": [
            {
                "code": "#define EPSILON 0.001\n#define FAR 200.\n#define PI2 6.28318530718\n#define PI 3.14159265359\n\nstruct MarchResult { bool hit; vec3 p; float dist; };\nstruct Camera { vec3 o; vec3 d; };\n    \nmat2 rotate(float r) { return mat2(cos(r), -sin(r), sin(r), cos(r)); }\nfloat sphere(vec3 p, float r) { return length(p) - r; }\nfloat cylinder(vec3 p, vec3 c) { return length(p.xz - c.xy) - c.z; }\n\nfloat map(vec3 p) {\n    //infinite repetition\n    vec3 i = vec3(10, 10, 20); \n    p = mod(p, i) - (i * .5);\n    \n    //joint\n \tfloat s = sphere(p, 1.1); \n    \n    //vertical cylinder\n    float yCyl = cylinder(p, vec3(0, 0, .5)); \n\n    //left-right horizontal cylinder\n    p.yz *= rotate(PI / 2.);\n    float zCyl = cylinder(p, vec3(0, 0, .5)); \n    \n    //back-front horizontal cylinder\n    p.xy *= rotate(PI / 2.);\n    float xCyl = cylinder(p, vec3(0, 0, .5)); \n    \n    return min(s, min(xCyl, min(yCyl, zCyl)));\n}\n\nvec3 normal(vec3 p) {\n    vec2 s = vec2(EPSILON, 0);\n    return normalize(vec3(\n        map(p + s.xyy) - map(p - s.xyy),\n        map(p + s.yxy) - map(p - s.yxy),\n        map(p + s.yyx) - map(p - s.yyx)\n    ));\n}\n\nvec3 lambert(vec3 p) {\n    vec3 ld = vec3(0, 1, 1);\n    vec3 lc = vec3(.4);\n    vec3 pc = vec3(.1, 0, 0);\n    return ((lc + pc) / 2.) * max(dot(normal(p), ld), 0.);\n}\n\nvec3 lighting(MarchResult mr) {\n    vec3 l = lambert(mr.p);\n    return mix(\n        mr.hit ? lambert(mr.p) : vec3(0.),\n        clamp(vec3(mr.p.y / 50.) + .4, 0., 1.),\n        mr.dist / FAR\n    );\n}\n\nMarchResult raymarch(Camera camera) {\n    vec3 m = camera.o;\n    bool hit = false;\n    float d = 0.;\n    do {\n\t\tfloat s = map(m);\n        if(s < EPSILON) {\n            hit = true;\n            break;\n        }\n        m += camera.d * s;\n        d = length(m - camera.o); \n    } while(d < FAR);\n    return MarchResult(hit, m, d);\n}\n\nCamera createCamera(vec2 uv) {\n \tCamera camera = Camera(\n        vec3(sin(iTime), cos(iTime) * .5, mod(iTime, 10.) * 10.),\n        normalize(vec3(uv.x, uv.y, 2))\n    );\n    camera.d.yz *= rotate(PI2 * sin(iTime / 3.) * 0.04);\n    camera.d.xz *= rotate(PI2 * sin(iTime / 5.) * 0.02);\n    return camera;\n}\n\nvec2 createUv(vec2 fragCoord) {\n    return (fragCoord - .5 * iResolution.xy) / iResolution.y;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(lighting(raymarch(createCamera(createUv(fragCoord)))), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}