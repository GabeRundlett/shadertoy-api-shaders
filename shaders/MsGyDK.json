{
    "Shader": {
        "info": {
            "date": "1523354392",
            "description": "Four Hilbert curves",
            "flags": 0,
            "hasliked": 0,
            "id": "MsGyDK",
            "likes": 6,
            "name": "Hilbert Square",
            "published": 3,
            "tags": [
                "hilbertcurve"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 532
        },
        "renderpass": [
            {
                "code": "// \"Hilbert Square\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Four Hilbert curves; algorithm adapted from FabriceNeyret2's Hilbert curve generator\n// (https://www.shadertoy.com/view/XljSW3)\n\n#define AA  1   // optional antialiasing (0/1 - off/on)\n\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\n\nvec3 ltDir;\nfloat tCur, dstFar, lWid;\nconst float maxIter = 5.;\nconst float pi = 3.14159;\n\nvec4 BlkHit (vec3 ro, vec3 rd, vec3 bSize)\n{\n  vec3 v, tm, tp, qnBlk;\n  float dMin, dn, df;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  dMin = dstFar;\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    qnBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  }\n  return vec4 (dMin, qnBlk);\n}\n\nfloat LineDrw (vec2 p, vec2 v)\n{\n  return (dot (p, v) > 0.) ? smoothstep (0.1, 1., abs (dot (p, vec2 (- v.y, v.x)))) : 1.;\n}\n\nfloat HilbDrw (vec2 p, float nIter)\n{\n  vec4 lr;\n  vec2 sp, e;\n  e = vec2 (1., 0.);\n  lr.xy = e.yx;\n  for (float i = 0.; i < maxIter; i ++) {\n    sp = step (0.5, p);\n    p = 2. * p - sp;\n    lr = vec4 ((sp.x > 0.) ? ((sp.y > 0.) ? - e.yx : - e) : ((sp.y > 0.) ? lr.xy : e.yx),\n       (sp.x == sp.y) ? e : ((sp.y > 0.) ? - e.yx : e.yx));\n    if (sp.x > 0.) {\n      p.x = 1. - p.x;\n      lr.xz = - lr.xz;\n      lr = lr.zwxy;\n    }\n    if (sp.y > 0.) {\n      p = 1. - p.yx;\n      lr = - lr.yxwz;\n    }\n    if (i == nIter - 1.) break;\n  }\n  p = (p - 0.5) / lWid;\n  return min (LineDrw (p, lr.xy), LineDrw (p, lr.zw));\n}\n\nfloat DotDrw (vec2 p, float nIter)\n{\n  p = mod (pow (2., nIter - 1.) * (2. * p - 1.), 1.) - 0.5;\n  return smoothstep (0.1, 1., length (p) / lWid);\n}\n\nfloat MixDrw (vec2 p, float nIter)\n{\n  return min (HilbDrw (p, nIter), DotDrw (p, nIter));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 bb;\n  vec3 col, vn;\n  vec2 w, dw;\n  float dstBlk, nIter, t, h;\n  bb = BlkHit (ro, rd, vec3 (2., 0.01, 2.));\n  dstBlk = bb.x;\n  if (dstBlk < dstFar) {\n    vn = bb.yzw;\n    ro += dstBlk * rd;\n    col = vec3 (0., 0., 0.2);\n    if (vn.y > 0.99) {\n      w = 1. - 0.5 * abs (ro.xz);\n      t = mod (0.5 * tCur, 2. * maxIter);\n      if (t >= maxIter) t = 2. * maxIter - t;\n      h = SmoothBump (0.1, 0.9, 0.1, fract (t));\n      nIter = 1. + floor (t);\n      lWid = 0.02 * pow (1.7, nIter);\n      col = mix (vec3 (0.9, 0.9, 1.), mix (vec3 (0.8, 0.8, 0.), vec3 (0.9, 0.9, 1.),\n         smoothstep (0.9, 0.91, MixDrw (w, nIter))), h);\n      dw = 0.01 * vec2 (sqrt (lWid), 0.);\n      vn.xz = vec2 (MixDrw (w - dw, nIter) - MixDrw (w + dw, nIter),\n                    MixDrw (w - dw.yx, nIter) - MixDrw (w + dw.yx, nIter));\n      vn = normalize (vec3 (h * vn.xz * sign (ro.xz), 250. * dw.x).xzy);\n    }\n    col = col * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n       0.2 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 64.);\n  } else {\n    col = vec3 (0.6, 0.6, 1.) * (0.2 + 0.2 * (rd.y + 1.) * (rd.y + 1.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.2 * pi;\n  if (mPtr.z > 0.) {\n    az = 2. * pi * mPtr.x;\n    el = -0.2 * pi + 0.2 * pi * mPtr.y;\n  } else {\n    az += 0.03 * pi * tCur;\n  }\n  el = clamp (el, -0.3 * pi, -0.15 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., -0.3, -7.);\n  dstFar = 20.;\n  ltDir = vuMat * normalize (vec3 (1., 2., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 4.;\n#endif  \n  col = vec3 (0.);\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.),\n       0.5 * pi * (a + 0.5)), 4.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}