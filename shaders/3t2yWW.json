{
    "Shader": {
        "info": {
            "date": "1594373688",
            "description": "https://www.shadertoy.com/view/wljyWh       - I learned about this from this shader\nhttps://en.wikipedia.org/wiki/Silver_ratio  - Wikipedia page\nhttps://www.youtube.com/watch?v=7lRgeTmxnlg - Numberphile video ",
            "flags": 0,
            "hasliked": 0,
            "id": "3t2yWW",
            "likes": 12,
            "name": "Silver / Pell Spiral",
            "published": 3,
            "tags": [
                "spiral",
                "silver",
                "mean",
                "ratio",
                "pell"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 424
        },
        "renderpass": [
            {
                "code": "// How can I make this zoom nicely?\n// The zoom is currently... number-crunched\n\n// https://www.shadertoy.com/view/wljyWh       - I learned about this from this shader\n// https://en.wikipedia.org/wiki/Silver_ratio  - Wikipedia page\n// https://www.youtube.com/watch?v=7lRgeTmxnlg - Numberphile video  \n\n\n#define ratio 1./(1. + sqrt(2.))\n\n\nfloat sdBox(vec2 p, float s){\n\tp = abs(p) - s;\n\treturn max(p.y, p.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    \n    float d = 10e6;\n    \n    uv /= pow(2.,mod(iTime,  2.543106606327)); // this line thanks to Fabrice! \n    \n    uv.x += sqrt(2.);\n    \n    \n\n    \n    float s = 1.;\n    \n    \n        \n    \n    float iters = 9.;\n    \n    vec2 p = uv;\n    \n    for(float i = 0.; i < 2.; i++){\n        if (i == 0.){\n            // left spiral\n            float firstBox = sdBox(uv, s);\n            d = min(d,abs(firstBox));\n            d = min(d,abs(max(length(uv - vec2(s,-s)) - s*2., firstBox)));\n        }\n        if (i == 1.){\n            // right spiral\n        \tp = uv; s = 1.;\n\n            p.x -= s*2. + s * ratio*2.;\n\n            p.x = - p.x;\n            p.y = - p.y;\n\n            float firstBox = sdBox(p, s);\n            d = min(d,abs(firstBox));\n            d = min(d,abs(max(length(p - vec2(s,-s)) - s*2., firstBox)));        \n        }\n        \n        \n        \n        for(float j = 0.; j < iters; j++){\n\n            float dSpiral;\n            if ( mod(j, 4.) == 0. ){\n                p.xy -= vec2(s,s);\n                s *= ratio;\n                p.xy -= vec2(s,-s);\n\n                dSpiral = length(p - vec2(-s,-s)) - s*2.;\n            } else if ( mod(j, 4.) == 1. ){\n                p.xy -= vec2(s,-s);\n                s *= ratio;\n                p.xy -= vec2(-s,-s);\n\n                dSpiral = length(p - vec2(-s,s)) - s*2.;\n            } else if ( mod(j, 4.) == 2. ){\n\n                p.xy -= vec2(-s,-s);\n                s *= ratio;\n                p.xy -= vec2(-s,s);\n\n                dSpiral = length(p - vec2(s,s)) - s*2.;\n            } else if ( mod(j, 4.) == 3. ){\n\n                p.xy -= vec2(-s,s);\n                s *= ratio;\n                p.xy -= vec2(s,s);\n\n                dSpiral = length(p - vec2(s,-s)) - s*2.;\n            }\n\n            float dBox = sdBox(p, s);\n\n            d = min(d,\n                    ( min( abs(dBox), max( dSpiral, dBox)))\n                   );\n        }\n    }\n    \n    \n    \n    col = mix(col,vec3(1),smoothstep(abs(dFdx(uv.x)),0.,abs(d)));\n    \n    col = pow(col,vec3(0.4545)); // gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}