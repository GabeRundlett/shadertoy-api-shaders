{
    "Shader": {
        "info": {
            "date": "1613166552",
            "description": "Each tile has different fractal parameters.",
            "flags": 0,
            "hasliked": 0,
            "id": "wtycRt",
            "likes": 5,
            "name": "Variable fractal tiles",
            "published": 3,
            "tags": [
                "fractal",
                "tiles",
                "variable"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 291
        },
        "renderpass": [
            {
                "code": "\n#define FIELD_OF_VIEW 7.\n\nmat2 r2(float a) {\n\tfloat s = sin(a), c = cos(a);\n\treturn mat2(c,-s,s,c);\n}\n\nfloat triwave(float x) {\n    return 1.-abs(fract(x)-.5)*2.;\n}\nvec3 triwave(vec3 x) {\n    return vec3(1)-abs(fract(x)-.5)*2.;\n}\n\n//Credit: IQ, integer hash 2 https://www.shadertoy.com/view/XlXcW4\nvec3 hash(uvec3 x) {\n    x = ((x>>8U)^x.yzx)*1103515245U;\n    x = ((x>>8U)^x.yzx)*1103515245U;\n    x = ((x>>8U)^x.yzx)*1103515245U;\n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = ((fragCoord)*2.-iResolution.xy)*FIELD_OF_VIEW/iResolution.y+10.+iTime,\n        ipos = pos;\n\n    //hash from local tile coordinate\n    vec3 h = hash(uvec3(floor(pos/10.),0));\n    pos = mod(pos,10.)-5.;\n    \n    //apply folds based off hash\n    for (int i = 0; i < 6; i++) {\n        float fi = h[i/2], rv = h[i%3+1];\n        if (i%2 == 0) fi = fract(fi*10.);\n        else fi = floor(fi*10.);\n           \n        int id = int(fi)%3;\n        if (id == 0) {//mirror rotate fold\n            pos = (abs(pos)-.5)*r2(rv*6.28);\n        } else if (id == 1) {//plane fold\n            rv *= 6.28;\n            vec2 pnorm = vec2(sin(rv),cos(rv));\n            pos -= pnorm*2.*min(0.,dot(pos,pnorm));\n        } else {//polar fold\n            float sz = .04+rv*1.6,\n                ang = mod(atan(pos.y,pos.x),sz)-sz*.5;\n            pos = vec2(sin(ang),cos(ang))*length(pos);\n        }\n        //apply box fold\n        float ext = h[i%3];\n        pos = clamp(pos,-ext,ext)*2.-pos;\n    }\n\n    //coloring\n    fragColor = vec4(pow(triwave(length(pos)*vec3(4,5,6)),vec3(1.6)),1);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}