{
    "Shader": {
        "info": {
            "date": "1568965058",
            "description": "DOESN'T WORK PROPERLY\nInspired by https://davidsiaw.github.io/blog/2014/11/21/hexlife/\nDraw with mouse\nOptions in Common tab",
            "flags": 32,
            "hasliked": 0,
            "id": "wscGzX",
            "likes": 4,
            "name": "Game of Hexlife",
            "published": 3,
            "tags": [
                "2d",
                "simulation",
                "automata",
                "life",
                "conway",
                "gameoflife",
                "multipass"
            ],
            "usePreview": 0,
            "username": "redline2466",
            "viewed": 424
        },
        "renderpass": [
            {
                "code": "float getState(vec2 fragCoord) {\n    ivec2 pos = ivec2(fragCoord / scale);\n    if(fract(fragCoord.x / scale) > .5 && pos.y / 2 * 2 == pos.y)\n        pos.x++;\n    return texelFetch(iChannel1, pos, 0).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec4 hc = HexCoords(fragCoord/scale);\n    if(int(hc.w) / 2 * 2 == int(hc.w))\n        hc.z++;\n    fragColor = step(1.-hc.y, texelFetch(iChannel1, ivec2(hc.zw), 0) *1.1-.1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "int get(ivec2 pos) {\n    return int(texelFetch(iChannel0, pos, 0).x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(get(ivec2(fragCoord)));\n    if(iMouse.z > 0.01) {\n        vec2 distance = abs(ceil(fragCoord.xy - HexCoords(iMouse.xy/scale).zw));\n        if(distance.x == 0. && distance.y == 0.) {\n            fragColor = vec4(1.);\n        }\n    } else if(floor(iTime * stepsPerSecond) > floor((iTime - iTimeDelta) * stepsPerSecond)) {\n        int sum =\n            get(ivec2(fragCoord) + ivec2(0.,1.)) +\n            get(ivec2(fragCoord) + ivec2(-1.,0.)) +\n            get(ivec2(fragCoord) + ivec2(1.,0.)) +\n            get(ivec2(fragCoord) + ivec2(0.,-1.));\n        if(int(fragCoord.y) / 2 * 2 == int(fragCoord.y)) { // even row\n            sum +=\n                get(ivec2(fragCoord) + ivec2(-1.,1.)) +\n            \tget(ivec2(fragCoord) + ivec2(-1.,-1.));\n        } else { // odd row\n            sum +=\n            \tget(ivec2(fragCoord) + ivec2(1.,1.)) +\n                get(ivec2(fragCoord) + ivec2(1.,-1.));\n        }\n           \n        if(sum < 3 || sum > 4)\n            fragColor = vec4(0.);\n        if(sum == 2 && get(ivec2(fragCoord)) == 0)\n            fragColor = vec4(1.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define scale 20.\n#define stepsPerSecond 10.\n#define fadeTime .05\n\nfloat HexDist(vec2 p) {\n\tp = abs(p);\n    \n    float c = dot(p, normalize(vec2(1,1.732)));\n    c = max(c, p.x);\n    \n    return c;\n}\n\nvec4 HexCoords(vec2 uv) {\n\tvec2 r = vec2(1, 1.732);\n    vec2 h = r*.5;\n    \n    vec2 a = mod(uv, r)-h;\n    vec2 b = mod(uv-h, r)-h;\n    \n    vec2 gv = dot(a, a) < dot(b,b) ? a : b;\n    \n    float x = atan(gv.x, gv.y);\n    float y = .5-HexDist(gv);\n    vec2 id = uv-gv;\n    return vec4(x, y, id.x,id.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = texelFetch(iChannel1, ivec2(fragCoord), 0).xyz;\n    color += (texelFetch(iChannel0, ivec2(fragCoord), 0).xyz - color) * iTimeDelta / fadeTime;\n    fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}