{
    "Shader": {
        "info": {
            "date": "1713564176",
            "description": "Visual enhancments and code refactoring over SoundEclipse Created by DuckMonster (https://www.shadertoy.com/view/4tGXzt)\n\nYou can adjust holo brightness by forking this project and changing multiplier value at 81 row (brightness * <your_value>)",
            "flags": 4,
            "hasliked": 0,
            "id": "4ctXR8",
            "likes": 5,
            "name": "Visual enhancments forSoundEclip",
            "published": 3,
            "tags": [
                "visualization",
                "mic",
                "virtualdj"
            ],
            "usePreview": 0,
            "username": "Xtrullor",
            "viewed": 321
        },
        "renderpass": [
            {
                "code": "// Use a more precise definition of PI for mathematical operations\nconst float PI = 3.141592653589793;\nconst float FREQ_RANGE = 64.0; // or another appropriate value\n\n#define RADIUS 0.6\n#define BRIGHTNESS 0.2\n#define SPEED 0.5\n\n\n// Convert HSV to RGB: Ensuring const correctness and vec3 for p\nvec3 hsv2rgb(const vec3 c) {\n    const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nvec3 gradientColor(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.0, 0.33, 0.67); // these control the range of colors\n    return a + b * cos(2.0 * PI * (c * t + d));\n}\n\n// Improved luminance calculation with const quality for weights\nfloat luminance(const vec3 color) {\n  const vec3 lumWeight = vec3(0.299, 0.587, 0.114);\n  return dot(color, lumWeight);\n}\n\n\n// Enhanced frequency retrieval with smooth interpolation between index frequencies\nfloat getFrequency(float x) {\n\tfloat baseIndex = floor(x * FREQ_RANGE) / FREQ_RANGE;\n\tfloat sum = 0.0;\n\tfloat count = 0.0;\n\n\n\t// Smoothing by averaging over a range of indices\n\tfor(float i = -2.0; i <= 2.0; i += 1.0){\n\t\tsum += texture(iChannel0, vec2(baseIndex + i / FREQ_RANGE, 0.25)).x;\n\t\tcount += 1.0;\n\t}\n\n\n\treturn (sum / count) + 0.06;\n}\n\n\n// Blending frequencies for smoother visual transitions\nfloat blendFrequencies(const float x) {\n    float blended = smoothstep(0.0, 1.0, fract(x * FREQ_RANGE));\n\n\n    float freq1 = getFrequency(floor(x * FREQ_RANGE) / FREQ_RANGE);\n    float freq2 = getFrequency(floor(x * FREQ_RANGE + 1.0) / FREQ_RANGE);\n\n\n    return mix(freq1, freq2, blended);\n}\n\n\n// Rendering the halo effect\nvec3 renderHalo(const vec2 fragment, const float radius) {\n    float dist = length(fragment);\n    float ring = 1.0 / abs(dist - radius);\n    float brightness = dist < radius ? BRIGHTNESS * 0.3 : BRIGHTNESS;\n    vec3 col = vec3(0.0);\n\n\n    float angle = atan(fragment.x, fragment.y);\n    vec3 hsvColor = vec3((angle + iTime * 0.25) / (PI * 2.0), 1.0, 1.0);\n    col += hsv2rgb(hsvColor) * ring * brightness;\n\n    float frequency = max(blendFrequencies(abs(angle / PI)) - 0.02, 0.0);\n    col *= frequency;\n    col *= smoothstep(radius * 0.5, radius, dist);\n    \n    float t = iTime * 0.1 + (angle + 0.5) / (PI * 2.0); // Adjust time influence\n    col += gradientColor(t) * ring * (brightness * 0.2); // Use the gradient function\n\n    return col;\n}\n\n// Generating the line visual based on frequency\nvec3 renderLine(const vec2 fragment, const float radius, const float x) {\n    vec3 col = hsv2rgb(vec3(x * 0.23 + iTime * 0.12, 1.0, 1.0));\n    float freq = abs(fragment.x * 0.5);\n    col *= (1.0 / abs(fragment.y)) * BRIGHTNESS * getFrequency(freq);  \n    col *= smoothstep(radius, radius * 1.8, abs(fragment.x));\n    return col;\n}\n\n\n// Main image function to render the visuals\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 fragPos = (fragCoord / iResolution.xy - 0.5) * 2.0;\n    fragPos.x *= iResolution.x / iResolution.y;\n\n\n    vec3 color = vec3(0.0134, 0.052, 0.1);\n    color += renderHalo(fragPos, RADIUS);\n\n\n    // Rotating the position for dynamic effects\n    float c = cos(iTime * SPEED);\n    float s = sin(iTime * SPEED);\n    vec2 rot = mat2(c, s, -s, c) * fragPos;\n    color += renderLine(rot, RADIUS, rot.x);\n\n\n    color += max(luminance(color) - 1.0, 0.0);\n\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}