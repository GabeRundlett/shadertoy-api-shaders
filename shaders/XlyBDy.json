{
    "Shader": {
        "info": {
            "date": "1543785428",
            "description": "A mousable experiment in the dark arts of shader witchcraft...\n",
            "flags": 32,
            "hasliked": 0,
            "id": "XlyBDy",
            "likes": 43,
            "name": "Weird Science III",
            "published": 3,
            "tags": [
                "fluid"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 1279
        },
        "renderpass": [
            {
                "code": "vec2 R;\nvec4 T ( vec2 U ) {return texture(iChannel0,U/R);}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    R = iResolution.xy;\n    vec4 \n        a = T(U+vec2(1,0)),\n        b = T(U-vec2(1,0)),\n        c = T(U+vec2(0,1)),\n        d = T(U-vec2(0,1));\n        \n    vec4 g = vec4(a.zw-b.zw,c.zw-d.zw);\n    vec2 dz = g.xz;\n    vec2 dw = g.yw;\n   \tvec4 v = T(U-10.*dz);\n    C.xyz = abs(sin(v.z*v.z+0.5+5.*(v.w-length(dw))*vec3(1.1,1.2,1.3)));\n    vec3 n = normalize(vec3(dz,.05));\n    vec4 tx = texture(iChannel1,reflect(vec3(0,0,1),n));\n    C = (n.x*0.3+0.9)*(C)*(0.9+0.1*tx);\n    C *= sqrt(C);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Fluid Algorithm \nvec2 R;\nfloat ln (vec2 p, vec2 a, vec2 b) { // returns distance to line segment for mouse input\n    return length(p-a-(b-a)*clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.));\n}\nvec4 T ( vec2 U ) {return texture(iChannel0,U/R);}\nfloat X (vec2 U, vec2 u, inout vec4 Q, in vec2 r) {\n    vec2 V = U + r, v = T(V).xy;\n    vec4 t = T (V-v);\n    Q.xy -= 0.25*r*(t.z-Q.z+Q.w*t.w*(t.w-Q.w));\n    return 0.5*(length(r-v+u)-length(r+v-u))+t.z;\n}\n\nvoid mainImage( out vec4 Q, in vec2 U )\n{   R = iResolution.xy;\n \tvec2 u = T(U).xy, e = vec2(1,0);\n \tfloat P = 0.; Q = T(U-u);\n \tQ.z = 0.25*(\n       X (U,u,Q, e.xy)+\n \t   X (U,u,Q,-e.xy)+\n \t   X (U,u,Q, e.yx)+\n \t   X (U,u,Q,-e.yx)\n    );\n \tfloat l = length(Q.xy);if(l>0.)Q.xy=mix(Q.xy,Q.w*Q.xy/l,0.0001);\n \tif (iFrame < 1){if (length(U-0.5*R)<7.)Q=vec4(1); else Q = vec4(0);}\n\tvec4 mo = texture(iChannel2,vec2(0));\n \tl = ln(U,mo.xy,mo.zw);\n \tif (mo.z > 0. && l < 5.) Q.xyzw += vec4((5.-l)*(mo.xy-mo.zw)/700.,0,1.-Q.w);\n \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Fluid Algorithm \nvec2 R;\nfloat ln (vec2 p, vec2 a, vec2 b) { // returns distance to line segment for mouse input\n    return length(p-a-(b-a)*clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.));\n}\nvec4 T ( vec2 U ) {return texture(iChannel0,U/R);}\nfloat X (vec2 U, vec2 u, inout vec4 Q, in vec2 r) {\n    vec2 V = U + r, v = T(V).xy;\n    vec4 t = T (V-v);\n    Q.xy -= 0.25*r*(t.z-Q.z+Q.w*t.w*(t.w-Q.w));\n    return 0.5*(length(r-v+u)-length(r+v-u))+t.z;\n}\n\nvoid mainImage( out vec4 Q, in vec2 U )\n{   R = iResolution.xy;\n \tvec2 u = T(U).xy, e = vec2(1,0);\n \tfloat P = 0.; Q = T(U-u);\n \tQ.z = 0.25*(\n       X (U,u,Q, e.xy)+\n \t   X (U,u,Q,-e.xy)+\n \t   X (U,u,Q, e.yx)+\n \t   X (U,u,Q,-e.yx)\n    );\n \tfloat l = length(Q.xy);if(l>0.)Q.xy=mix(Q.xy,Q.w*Q.xy/l,0.0001);\n \tif (iFrame < 1){if (length(U-0.5*R)<7.)Q=vec4(1); else Q = vec4(0);}\n\tvec4 mo = texture(iChannel2,vec2(0));\n \tl = ln(U,mo.xy,mo.zw);\n \tif (mo.z > 0. && l < 5.) Q.xyzw += vec4((5.-l)*(mo.xy-mo.zw)/700.,0,1.-Q.w);\n \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Fluid Algorithm \nvec2 R;\nfloat ln (vec2 p, vec2 a, vec2 b) { // returns distance to line segment for mouse input\n    return length(p-a-(b-a)*clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.));\n}\nvec4 T ( vec2 U ) {return texture(iChannel0,U/R);}\nfloat X (vec2 U, vec2 u, inout vec4 Q, in vec2 r) {\n    vec2 V = U + r, v = T(V).xy;\n    vec4 t = T (V-v);\n    Q.xy -= 0.25*r*(t.z-Q.z+Q.w*t.w*(t.w-Q.w));\n    return 0.5*(length(r-v+u)-length(r+v-u))+t.z;\n}\n\nvoid mainImage( out vec4 Q, in vec2 U )\n{   R = iResolution.xy;\n \tvec2 u = T(U).xy, e = vec2(1,0);\n \tfloat P = 0.; Q = T(U-u);\n \tQ.z = 0.25*(\n       X (U,u,Q, e.xy)+\n \t   X (U,u,Q,-e.xy)+\n \t   X (U,u,Q, e.yx)+\n \t   X (U,u,Q,-e.yx)\n    );\n \tfloat l = length(Q.xy);if(l>0.)Q.xy=mix(Q.xy,Q.w*Q.xy/l,0.0001);\n \tif (iFrame < 1){if (length(U-0.5*R)<7.)Q=vec4(1); else Q = vec4(0);}\n\tvec4 mo = texture(iChannel2,vec2(0));\n \tl = ln(U,mo.xy,mo.zw);\n \tif (mo.z > 0. && l < 5.) Q.xyzw += vec4((5.-l)*(mo.xy-mo.zw)/700.,0,1.-Q.w);\n \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// keep track of mouse\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 p = texture(iChannel0,fragCoord/iResolution.xy);\n    if (iMouse.z>0.) {\n        if (p.z>0.) fragColor =  vec4(iMouse.xy,p.xy);\n    \telse fragColor =  vec4(iMouse.xy,iMouse.xy);\n    }\n    else fragColor = vec4(-iResolution.xy,-iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}