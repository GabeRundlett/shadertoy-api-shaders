{
    "Shader": {
        "info": {
            "date": "1609479139",
            "description": "My first shader with no tutorial. Still some issues, but for the most part, I'm pretty happy with how it turned out!\n\n1/1/2021 - Mostly fixed lighting issues.",
            "flags": 0,
            "hasliked": 0,
            "id": "WltyDN",
            "likes": 3,
            "name": "Lights - Quasar",
            "published": 3,
            "tags": [
                "procedural",
                "lights"
            ],
            "usePreview": 0,
            "username": "Quasar",
            "viewed": 316
        },
        "renderpass": [
            {
                "code": "#define s smoothstep\n\nfloat rand(float x) {\n    return (cos(x * 1297436.) + 1.) / 2.;\n}\n\nvec3 light(vec2 uv, vec2 pos, float r, vec3 col, vec2 wind, float id) {\n    float blur = (cos(iTime + id * 54.) + 1.1) / 30. + 0.1;\n    vec3 c = vec3(0);\n    float sm = s(r + blur, r, length(pos - uv));\n    return col * sm;\n}\n\nvec3 getLights(vec2 uv, int amt) {\n    vec3 col = vec3(0);\n    \n    float v = 0.4;\n    \n    for (int i = 0; i < amt; i += 1) {\n        float fi = float(i);\n        \n        if (rand(fi) > 0.) {\n            fi = -fi;\n        };\n        \n        vec2 wind = vec2(15. + fi / 2., 0);\n        \n        vec2 pos = grad(vec2(i * 100)) * 1.1;\n        \n        vec2 t = vec2(iTime) / 100.;\n        \n        pos += vec2(wind * t);\n        pos.y += (getNoise(t + vec2(fi) * 3.) - 0.5) * 3.;\n        pos.x = fract(pos.x) * 2.9 - 1.6;\n        \n        vec3 color = vec3(rand(fi), rand(fi * 3.), rand(fi + 10.));\n        \n        col += light(uv, pos, 0.1, color, wind, fi);\n    };\n    \n    if (col.r > v || col.g > v || col.b > v) {\n        return col;\n    };\n    \n    for (int i = 0; i < amt; i += 1) {\n        float fi = float(i);\n        \n        if (rand(fi) > 0.) {\n            fi = -fi;\n        };\n        \n        vec2 wind = vec2(15. + fi / 2., 0);\n        \n        vec2 pos = grad(vec2(i * 100)) * 1.1;\n        \n        vec2 t = vec2(iTime) / 100.;\n        \n        pos += wind * t;\n        pos.y += (getNoise(t + vec2(fi) * 3.) - 0.5) * 3.;\n        pos.x = fract(pos.x) * 2.9 - 1.6;\n        \n        vec3 color = vec3(rand(fi), rand(fi * 3.), rand(fi + 10.));\n        \n        float d = 0.02 / (length(uv - pos) / 2.);\n        \n        col += s(0., .5, color * d);\n    };\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    vec3 col = getLights(uv, 15);\n    \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define seed 1.\n\nvec2 grad(vec2 p) {\n    p = vec2(dot(p, vec2(189.0, 75.0)), dot(p, vec2(122.0, 220.0)));\n    return fract(sin(p) * 4.432885 * seed) * 2.0 - 1.0;\n}\n\nfloat getNoise(vec2 pos) {\n\tpos *= 10.;\n    vec2 id = floor(pos);\n    vec2 uv = fract(pos);\n    \n    float dot1 = dot(uv, grad(id));\n    float dot2 = dot(uv - vec2(1., 0), grad(id + vec2(1., 0)));\n    float dot4 = dot(uv - vec2(1., 1.), grad(id + vec2(1., 1.)));\n    float dot3 = dot(uv - vec2(0., 1.), grad(id + vec2(0, 1.)));\n    \n    uv = uv * uv * (3.0 - 2.0 * uv);\n    \n    float top = mix(dot1, dot2, uv.x);\n    \n    float bottom = mix(dot3, dot4, uv.x);\n    \n    float middle = mix(top, bottom, uv.y);\n    \n    return middle * 0.5 + 0.5;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}