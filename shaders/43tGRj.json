{
    "Shader": {
        "info": {
            "date": "1716754259",
            "description": "Visualization of several metaball functions.\nMouse click selects function.",
            "flags": 0,
            "hasliked": 0,
            "id": "43tGRj",
            "likes": 2,
            "name": "Metaballs and derivatives 2D",
            "published": 3,
            "tags": [
                "metaballs"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 103
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Visualization of several metaball functions and their\n// derivatives in 2D case.\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    const int k=8;\n    vec2 xy=(2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 col=vec3(0.0625);\n    float v=0.0;\n    float R=0.5;\n    float V=0.5; // Isovalue.\n    for(int i=0;i<k;++i)\n    {\n        float t=iTime;\n        vec2 r=sin(vec2(i*i*i,i*i)+float(i)+0.25*t);\n        r-=xy;\n        r/=R;\n        #define M 6\n        int m=int(float(M)*iMouse.x/iResolution.x);\n        if(iMouse.x==0.0) m=M-1;\n        switch(m)\n        {\n            case 0:\n                // Sharp cutoff.\n                v+=step(length(r),1.0);\n                break;\n            case 1:\n                // 1/r (like electric charge potential).\n                // Seems popular on ShaderToy for whatever reason.\n                // Constant is arbitrary.\n                v+=0.125*1.0/length(r);\n                break;\n            case 2:\n                // 1/r^2 (like electric charge force).\n                // Constant is arbitrary.\n                v+=0.125*1.0/dot(r,r);\n                break;\n            case 3:\n                // Exponential.\n                v+=exp(-2.0*length(r));\n                break;\n            case 4:\n                // Gaussian.\n                // See https://www.shadertoy.com/view/4csXDM for\n                // why it may look similar to the next one.\n                v+=exp(-4.0*dot(r,r));\n                break;\n            case 5:\n                // Function from https://www.chrishecker.com/My_Liner_Notes_for_Spore\n                // Has finite support (i.e. far enough from origin the function\n                // is exactly 0), which is nice for proximity/binning, etc.,\n                // and continuous derivatives.\n                v+=pow(max(1.0-dot(r,r),0.0),4.0);\n                break;\n        }\n    }\n    col+=0.03125*step(mod(float(M)*fragCoord.x/iResolution.x,2.0),1.0);\n    vec3 n=normalize(vec3(-dFdx(v),-dFdy(v),1.0/32.0));\n    col=mix(col,vec3(1.0/32.0)+max(dot(n,normalize(vec3(1))),0.0),smoothstep(0.0,fwidth(v),v-V));\n    col.xyz=mix(12.92*col.xyz,1.055*pow(col.xyz,vec3(1.0/2.4))-0.055,step(0.0031308,col.xyz)); // sRGB\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}