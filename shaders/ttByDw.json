{
    "Shader": {
        "info": {
            "date": "1594501696",
            "description": "Interpolate between two points in 1D.\nGeneralized interpolation using walk on spheres to solve the laplacian equation with a monte carlo method.\nBuffer A has the logic.\nFor a blog post coming shortly!",
            "flags": 48,
            "hasliked": 0,
            "id": "ttByDw",
            "likes": 9,
            "name": "Demofox WoS Interpolation 1D",
            "published": 3,
            "tags": [
                "montecarlo",
                "interpolation",
                "laplace",
                "wos"
            ],
            "usePreview": 0,
            "username": "demofox",
            "viewed": 903
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // get the interpolated color\n    vec3 color = texelFetch(iChannel0, ivec2(fragCoord.xy),0).rgb;\n    \n    // convert from linear to sRGB and output the color\n    fragColor = vec4(LinearToSRGB(color), 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 DistanceToBoundaryAndColor(float x)\n{\n    // There is a boundary at x=0 and x=1. return the distance of whichever is closer.\n    // Also give the color at that boundary.\n    if (x <= 0.5)\n        return vec4(x, colorA);\n    else\n        return vec4(1.0 - x, colorB);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // initialize a random number state based on frag coord and frame\n    uint rngState = uint(uint(fragCoord.x) * uint(1973) + uint(fragCoord.y) * uint(9277) + uint(iFrame) * uint(26699)) | uint(1);    \n    \n    // this is our starting point\n\tfloat x = fragCoord.x / iResolution.x;\n    \n    // Walk on spheres algorithm\n\tvec4 distanceAndColor;\n    for (int i = 0; i < c_numStepsMax; ++i)\n    {\n        // Get distance to closest boundary.\n        // If it's close enough, we are done. Use the color of the boundary we are next to.\n        distanceAndColor = DistanceToBoundaryAndColor(x);\n        if (distanceAndColor.x < c_epsilon)\n            break;\n        \n        // Otherwise, walk the distance to the nearest boundary, in a random direction.\n        // A random direction on a numberline is just \"left or right\"\n        float direction = (RandomFloat01(rngState) < 0.5) ? -1.0 : 1.0;\n        x += direction * distanceAndColor.x;\n    }\n    \n    // see if space was pressed. if so we want to restart our render.\n    // This is useful for when we go fullscreen for a bigger image.\n    bool spacePressed = (texture(iChannel1, vec2(KEY_SPACE,0.25)).x > 0.1);  \n\n    // incremental average this new color with the old.\n    vec4 lastFrameColor = texelFetch(iChannel0, ivec2(fragCoord.xy),0);\n    float blend = (iFrame < 2 || spacePressed) ? 1.0 : 1.0 / (1.0 + (1.0 / lastFrameColor.a));\n    vec3 newColor = mix(lastFrameColor.rgb, distanceAndColor.yzw, blend);\n    fragColor = vec4(newColor, blend);    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// how close the random walk needs to get before it's considered a hit.\n// This is in a percentage of the screen\nconst float c_epsilon = 0.001;\n\n// how many steps to take on the random walk at maximum\nconst int c_numStepsMax = 32;\n\n// linear space colors we are interpolating between\nconst vec3 colorA = vec3(1.0, 0.0, 0.0);\nconst vec3 colorB = vec3(1.0, 1.0, 0.0);\n\n\n\n\n// ==================================================================\n\nconst float KEY_SPACE = 32.5/256.0;\n\n// for converting from linear to sRGB\nvec3 LinearToSRGB(vec3 rgb)\n{\n    rgb = clamp(rgb, 0.0, 1.0);\n    \n    return mix(\n        pow(rgb, vec3(1.0 / 2.4)) * 1.055 - 0.055,\n        rgb * 12.92,\n        lessThan(rgb, vec3(0.0031308, 0.0031308, 0.0031308))\n    );\n}\n\n// RNG\nuint wang_hash(inout uint seed)\n{\n    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));\n    seed *= uint(9);\n    seed = seed ^ (seed >> 4);\n    seed *= uint(0x27d4eb2d);\n    seed = seed ^ (seed >> 15);\n    return seed;\n}\n\nfloat RandomFloat01(inout uint state)\n{\n    return float(wang_hash(state)) / 4294967296.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}