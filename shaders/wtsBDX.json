{
    "Shader": {
        "info": {
            "date": "1597956527",
            "description": "Cube experiments z",
            "flags": 0,
            "hasliked": 0,
            "id": "wtsBDX",
            "likes": 3,
            "name": "Cube experiments z",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "illus0r",
            "viewed": 282
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define EPSILON 0.0001\n#define PI 3.14159265\n\n\nmat2 Rot(float a) {\n    float s = sin(a), c = cos(a);\n\treturn mat2(c, -s, s, c);\n}\n\nfloat sdSphere(vec3 p, float radius) { return length(p) - radius; }\nfloat sdBox( vec3 p, vec3 b ) { vec3 q = abs(p) - b; return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0); }\n\n\n\n\nfloat sdCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n// ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n\nvec2 getDist(vec3 p) {\n    \n    //p.x += -0.8;\n    p.xz *= Rot(iTime * 2.);\n    float scale = 0.4 + 0.1 * sin(iTime);\n\tvec2 box = vec2(1e10, 1.);\n    \n    for (float i = 0.; i < 5.; i++) {\n        vec2 box2 = vec2( sdBox(p, vec3(1)) * pow(scale, i), 0.5 + i / 5. );\n        box = box.x < box2.x ? box : box2;\n        p = abs(p);\n        p -= 1.;\n\t    p.xz *= Rot(iTime);\n        p /= scale;\n    }\n    \n    return box;\n}\n\n\n\n\n// ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n\n\n\n\nvec2 rayMarch(vec3 ro, vec3 rd) {\n\tfloat d = 0.;\n    float info = 0.;\n    //float glow = 0.;\n    float distToClosestLight = 9999999.;\n    for (int i = 0; i < MAX_STEPS; i++) {\n    \tvec2 distToClosest = getDist(ro + rd * d);\n        d += distToClosest.x;\n        info = distToClosest.y;\n        if(abs(distToClosest.x) < EPSILON || d > MAX_DIST) {\n        \tbreak;\n        }\n    }\n    return vec2(d, info);\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(EPSILON, 0.);\n    vec3 n = getDist(p).x - vec3(getDist(p - e.xyy).x,\n                               getDist(p - e.yxy).x,\n                               getDist(p - e.yyx).x);\n\treturn normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    \n    // ray origin\n    vec3 ro = vec3(0, 0., -5.5);\n    float zoom = 1.100;\n    \n    // ray direction\n    vec3 rd = normalize(vec3(uv, zoom));\n    \n    vec2 rm = rayMarch(ro, rd);\n    float d = rm[0];\n    float info = rm[1];\n    \n    float color_bw = 0.;\n    vec3 color = vec3(0.);\n    if (d < MAX_DIST) {\n        vec3 n = getNormal(ro + rd * d);\n        n.zy *= Rot(iTime);\n    \tcolor = vec3( n + 1.0 );\n        color *= info;\n        //color_bw += 0.5 + dot(n, normalize(vec3(1,1,0))) / 2.;\n    }\n    //color = vec3( color_bw );\n    \n    \n    \n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}