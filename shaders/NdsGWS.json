{
    "Shader": {
        "info": {
            "date": "1616472513",
            "description": "An exercise in differentiation, integration and solving systems of equations to form a parabola that exactly matches the slope at two points on a cosine wave (not always possible). And a shader visualization to go with it.",
            "flags": 0,
            "hasliked": 0,
            "id": "NdsGWS",
            "likes": 8,
            "name": "Parabola in the Middle",
            "published": 3,
            "tags": [
                "math",
                "quadratic",
                "analytic",
                "exercise",
                "parabola",
                "integration",
                "differentiation",
                "systemsofequations"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 184
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\n#define drawSDF(d, c) color = mix(color, c, smoothstep(unit, 0.0, d))\n#define drawFunction(f, d, t, c) color = mix(color, c, smoothstep(unit, 0.0, abs(uv.y - f(uv.x)) / sqrt(1.0 + pow(d(uv.x), 2.0)) - t))\n\n// Parabola and derivative for DE\nfloat f1(in float x) {\n    return x * x / (3.0 * PI) - 3.0 * PI / 4.0;\n}\n\nfloat f1Prime(in float x) {\n    return 2.0 * x / (3.0 * PI) ;\n}\n\n// Composition of the parabola and cosine wave\nfloat f2(in float x) {\n    return mix(f1(x), cos(x), step(0.0, abs(x) - 3.0 * PI / 2.0));\n}\n\nfloat f2Prime(in float x) {\n    return mix(f1Prime(x), -sin(x), step(0.0, abs(x) - 3.0 * PI / 2.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 16.0;\n    float unit = 32.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n\n    // Grid\n    drawSDF(abs(fract(uv.x + 0.5) - 0.5) + 0.25 * unit, vec3(0.0, 0.0, 1.0));\n    drawSDF(abs(fract(uv.y + 0.5) - 0.5) + 0.25 * unit, vec3(0.0, 0.0, 1.0));\n    drawSDF(abs(uv.x), vec3(1.0, 0.0, 0.0));\n    drawSDF(abs(uv.y), vec3(1.0, 0.0, 0.0));\n\n    drawFunction(cos, -sin, 0.25 * unit, vec3(0.0, 0.0, 1.0));\n    drawFunction(f1, f1Prime, 0.25 * unit, vec3(1.0, 0.0, 0.0));\n    drawFunction(f2, f2Prime, 0.25 * unit, vec3(0.5, 0.0, 0.5));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}