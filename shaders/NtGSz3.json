{
    "Shader": {
        "info": {
            "date": "1641086113",
            "description": "Simple shader for camera control.\nUse WASD for translating the camera.\nUse arrow keys to rotate camera.\nHold C or V to increase or decrease translational velocity.\nHold R or T to zoom in and out.",
            "flags": 48,
            "hasliked": 0,
            "id": "NtGSz3",
            "likes": 4,
            "name": "Camera control example",
            "published": 3,
            "tags": [
                "raymarching",
                "reflection",
                "control",
                "infinite"
            ],
            "usePreview": 0,
            "username": "vipiao",
            "viewed": 390
        },
        "renderpass": [
            {
                "code": "\n# define MAX_NUM_STEPS 75\n\nfloat sdSphere(in vec3 pos, in vec3 center, in float radius){\n   \treturn length(pos-center) - radius;\n}\n\nfloat sdSphereWorld(in vec3 pos){\n    pos = mod(pos, 1.0);\n    return sdSphere(pos, vec3(0.5), 0.25);\n}\n\nvec3 normalSphereWorld(in vec3 pos){\n    float sd = sdSphereWorld(pos);\n    vec2 e = vec2(0.001, 0.);\n    vec3 normal = normalize(sd - vec3(\n    \tsdSphereWorld(pos - e.xyy),\n    \tsdSphereWorld(pos - e.yxy),\n    \tsdSphereWorld(pos - e.yyx)\n    ));\n    return normal;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 cameraPos = texelFetch(iChannel0, ivec2(CAMERA_POS, 0), 0).xyz;\n    vec3 forward = normalize(texelFetch(iChannel0, ivec2(CAMERA_DIRECTION, 0), 0).xyz);\n    vec3 right = normalize(cross(forward, vec3(0,0,1)));\n    vec3 up = cross(right, forward);\n    \n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.x;\n    float aspectRatio = iResolution.x / iResolution.y;\n\n    vec3 camPos = vec3(cameraPos.x, cameraPos.y, cameraPos.z);\n    float zoom = texelFetch(iChannel0, ivec2(CAMERA_ZOOM, 0), 0).x;\n    vec3 viewDir = normalize(forward*0.8*zoom + right * uv.x + up * uv.y);\n    \n    // Calculate color.\n    vec3 color = vec3(0.1,0,0);\n    vec3 reflectionConstant = vec3(1.0);\n    vec3 pos = camPos;\n    vec3 dir = viewDir;\n    float dist = 0.0;\n    int maxNumSteps = MAX_NUM_STEPS;\n    int numSteps = 0;\n    float minDist = 0.001;\n    vec3 prevPos = pos;\n    float prevSD = 0.0;\n    float sd = 0.0;\n    for(; numSteps < maxNumSteps; numSteps++){\n        prevSD = sd;\n        sd = sdSphereWorld(pos);\n        if(sd < minDist){\n            // Collision with sphere.\n            pos = mix(pos, prevPos, (minDist - sd) / (prevSD - sd));\n            \n            vec3 normal = normalSphereWorld(pos);\n            if(dot(dir, normal) < 0.0){\n                dir = reflect(dir, normal);\n                reflectionConstant *= 0.8;\n                if(mod(pos.x, 0.1) < 0.01 || mod(pos.y, 0.1) < 0.01 || mod(pos.z, 0.1) < 0.01){\n                    if(mod(pos.x, 2.0) < 1.0){\n                        reflectionConstant.x *= 0.4;\n                    }\n                    if(mod(pos.y, 2.0) < 1.0){\n                        reflectionConstant.y *= 0.4;\n                    }\n                    if(mod(pos.z, 2.0) < 1.0){\n                        reflectionConstant.z *= 0.4;\n                    }\n                }\n            }\n            //\n        }\n        prevPos = pos;\n        pos += normalize(dir) * sd;\n        dist += sd;\n        color += vec3(0.04,0.05,0.06) * sd * reflectionConstant;\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --Global variables.\n\n// Math.\n# define PI 3.1415926538\n\n// Input.\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_SHIFT = 16;\nconst int KEY_CTRL  = 17;\nconst int KEY_SPACE  = 32;\nconst int KEY_W  = 87;\nconst int KEY_A = 65;\nconst int KEY_S  = 83;\nconst int KEY_D  = 68;\nconst int KEY_C  = 67;\nconst int KEY_V  = 86;\nconst int KEY_E  = 69;\nconst int KEY_R  = 82;\nconst int KEY_T  = 84;\n\n//\nconst int PREVIOUS_TIME = 0;\n\nconst int CAMERA_POS = 2;\nconst int CAMERA_SENSITIVITY = 3;\nconst int CAMERA_DIRECTION = 4;\nconst int CAMERA_ZOOM = 5;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec4 prevColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    // Accelerate.\n    float sensitivity = texelFetch(iChannel0, ivec2(CAMERA_SENSITIVITY, 0), 0).x;\n    if(ivec2(fragCoord) == ivec2(CAMERA_SENSITIVITY,0)){\n        if(sensitivity == 0.){\n            sensitivity = 0.03;\n            prevColor.r = 0.03;\n        }\n        if(texelFetch( iChannel1, ivec2(KEY_C,0), 0 ).x > 0.5 && prevColor.r < 1000.){\n            prevColor.r *= 1.05;\n        }\n        if(texelFetch( iChannel1, ivec2(KEY_V,0), 0 ).x > 0.5 && prevColor.r > 0.00001){\n            prevColor.r /= 1.05;\n        }\n    }\n    \n    // Zoom.\n    float zoom = texelFetch(iChannel0, ivec2(CAMERA_ZOOM, 0), 0).x;\n    if(ivec2(fragCoord) == ivec2(CAMERA_ZOOM,0)){\n        if(zoom == 0.){\n            zoom = 1.0;\n            prevColor.r = 1.0;\n        }\n        if(texelFetch( iChannel1, ivec2(KEY_R,0), 0 ).x > 0.5){\n            prevColor.r *= 1.02;\n        }\n        if(texelFetch( iChannel1, ivec2(KEY_T,0), 0 ).x > 0.5){\n            prevColor.r /= 1.02;\n        }\n    }\n    \n    // Rotate.\n    vec3 forward = texelFetch(iChannel0, ivec2(CAMERA_DIRECTION, 0), 0).xyz;\n    if(length(forward) == 0.){\n        forward = vec3(0,1,0);\n    }\n    forward = normalize(forward);\n    vec3 right = normalize(cross(forward, vec3(0,0,1)));\n    vec3 up = cross(right, forward);\n    if(ivec2(fragCoord) == ivec2(CAMERA_DIRECTION,0)){\n        bool arrowRight = texelFetch( iChannel1, ivec2(KEY_RIGHT,0), 0 ).x > 0.5;\n        bool arrowLeft = texelFetch( iChannel1, ivec2(KEY_LEFT,0), 0 ).x > 0.5;\n        bool arrowUp = texelFetch( iChannel1, ivec2(KEY_UP,0), 0 ).x > 0.5;\n        bool arrowDown = texelFetch( iChannel1, ivec2(KEY_DOWN,0), 0 ).x > 0.5;\n        float rotationSensitivity = 0.018/zoom;\n        if(arrowRight){\n            forward = normalize(forward + right*rotationSensitivity);\n        }\n        if(arrowLeft){\n            forward = normalize(forward - right*rotationSensitivity);\n        }\n        if(arrowUp){\n            forward = normalize(forward + up*rotationSensitivity);\n        }\n        if(arrowDown){\n            forward = normalize(forward - up*rotationSensitivity);\n        }\n    \tvec3 right = normalize(cross(forward, vec3(0,0,1)));\n    \tvec3 up = cross(right, forward);\n        prevColor.xyz = normalize(forward);\n    }\n    \n    // Translate.\n    if(ivec2(fragCoord) == ivec2(CAMERA_POS,0)){\n        bool dDown = texelFetch( iChannel1, ivec2(KEY_D,0), 0 ).x > 0.5;\n        bool aDown = texelFetch( iChannel1, ivec2(KEY_A,0), 0 ).x > 0.5;\n        bool spaceDown = texelFetch( iChannel1, ivec2(KEY_SPACE,0), 0 ).x > 0.5;\n        bool shiftDown = texelFetch( iChannel1, ivec2(KEY_SHIFT,0), 0 ).x > 0.5;\n        bool wDown = texelFetch( iChannel1, ivec2(KEY_W,0), 0 ).x > 0.5;\n        bool sDown = texelFetch( iChannel1, ivec2(KEY_S,0), 0 ).x > 0.5;\n        if(wDown){\n        \tprevColor.xyz += forward*sensitivity;\n        }\n        if(sDown){\n        \tprevColor.xyz -= forward*sensitivity;\n        }\n        if(dDown){\n        \tprevColor.xyz += right*sensitivity;\n        }\n        if(aDown){\n        \tprevColor.xyz -= right*sensitivity;\n        }\n        if(spaceDown){\n        \tprevColor.xyz += up*sensitivity;\n        }\n        if(shiftDown){\n        \tprevColor.xyz -= up*sensitivity;\n        }\n    }\n    \n    \n    \n    // Write data/color.\n    fragColor = prevColor;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}