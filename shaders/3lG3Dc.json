{
    "Shader": {
        "info": {
            "date": "1580019416",
            "description": "Teapot SDF model (was made as a test task for job application)",
            "flags": 0,
            "hasliked": 0,
            "id": "3lG3Dc",
            "likes": 23,
            "name": "Isosurface Teapot",
            "published": 3,
            "tags": [
                "sdf",
                "isosurface",
                "teapot",
                "tea"
            ],
            "usePreview": 0,
            "username": "klk",
            "viewed": 829
        },
        "renderpass": [
            {
                "code": "// Fork of \"Isosurface Heart\" by klk. https://shadertoy.com/view/XtVSRh\n\n// Many Thanks to IQ for wonderful idea of signed distance field!\n\n#define PI 3.1415926535897932384626433832795\n\n#define float3 vec3\n#define float2 vec2\n#define float4 vec4\n#define float3x3 mat3\n\nconst float MAX_RAY_LENGTH=10000.0;\n\nvoid RayPlane(float3 tp0, float3 dp1, float3 dp2, float3 rp0, float3 rd, out float t, out float3 uv, out float3 n)\n{\n\tfloat3 dp0=rp0-tp0;\n\n\tfloat3 dett =cross(dp1,dp2);\n\tfloat3 detuv=cross(dp0,rd);\n\n\tfloat det=(-1.0)/dot(dett,rd);\n\n\tfloat u=(dot(detuv,dp2))*det;\n\tfloat v=(dot(detuv,dp1))*det;\n\tt=(dot(dett ,dp0))*det;\n\tif(t<0.0)\n\t{\n\t\tt=MAX_RAY_LENGTH;\n\t\treturn;\n\t}\n\t\n\tuv=float3(u,v,0.0);\n\tn=normalize(dett);\n}\n\nfloat Arrows(float2 p, float t)\n{\n\tfloat2 p1=float2(p.x+p.y,p.x-p.y);\n\tfloat2 f1xy=abs(fract(p1/sqrt(8.0))-0.5)-0.25;\n\tf1xy=clamp(f1xy*t+0.5,0.0,1.0);\n\tfloat f1=mix(f1xy.x,1.0-f1xy.x,f1xy.y);\n\n\tfloat2 fxy=float2(p.x-sqrt(0.125),p.y);\n\tfxy=abs(fract((fxy*sqrt(2.0)+0.5)/2.0)-0.5)-0.25;\n\tfxy=clamp(fxy*t/sqrt(2.0)+0.5,0.0,1.0);\n\tfloat f=mix(fxy.x,1.0-f1,fxy.y);\n\n\treturn f;\n}\n\nfloat Checker(float2 p, float t)\n{\n\tfloat2 fxy=float2(p.x,p.y);\n\tfxy=abs(fract((fxy+0.5)/2.0)-0.5)-0.25;\n\tfxy=clamp(fxy*t+0.5,0.0,1.0);\n\tfloat f=mix(fxy.x,1.0-fxy.x,fxy.y);\n\n\treturn f;\n}\n\nfloat PlaneTexture(float2 p, float t)\n{\n\treturn Arrows(p,t);\n}\n\n// Trace non-SDF objects\nvoid Trace(float3 rp0, float3 rd, out float t, out float3 pos, out float3 n)\n{\n\tfloat t1=MAX_RAY_LENGTH;\n\tfloat3 col1;\n\tfloat3 n1;\n\tRayPlane(float3(0.0,-10.0,0.0),float3(-1.0,0.0,0.0),float3(0.0,0,1.0),rp0, rd, t1, col1, n1);\n\tpos=rp0+rd*t1;\n\tt=t1;\n}\n\n// Smooth combine functions from IQ\nfloat smin(float a, float b, float k)\n{\n\tfloat h=clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n\treturn mix(b, a, h)-k*h*(1.0-h);\n}\n\nfloat smax( float a, float b, float k)\n{\n\treturn -smin(-a,-b,k);\n}\n\nfloat smin( float a, float b)\n{\n\treturn smin(a,b,0.1);\n}\n\nfloat smax( float a, float b)\n{\n\treturn smax(a,b,0.1);\n}\n\nfloat sq(float x){return x*x;}\n\nfloat Torus(float x, float y, float z, float R, float r)\n{\n\treturn sqrt(sq(sqrt(sq(x)+sq(z))-R)+sq(y))-r;\n}\n\nfloat Torus(vec3 p, float R, float r)\n{\n\treturn sqrt(sq(sqrt(sq(p.x)+sq(p.z))-R)+sq(p.y))-r;\n}\n\n\nfloat Lid(float x, float y, float z)\n{\n\tfloat v=sqrt(sq(x)+sq(y-0.55)+sq(z))-1.4;\n\tv=smin(v,Torus(y-2.,x,z,.2,.08),.1);\n\tv=smax(v,-sqrt(sq(x)+sq(y-0.55)+sq(z))+1.3);\n\tv=smax(v,sqrt(sq(x)+sq(y-2.5)+sq(z))-1.3);\n\n\tv=smax(v,-sqrt(sq(x-.25)+sq(z-.35))+0.05,.05);\n\tv=smin(v,Torus(x,(y-1.45)*.75,z,.72,.065),.2);\n\treturn v;\n}\n\nfloat Nose(float x, float y, float z)\n{\n\tz-=sin((y+0.8)*3.6)*.15;\n\t\n\tfloat v=sqrt(sq(x)+sq(z));\n\t\n\tv=abs(v-.3+sin(y*1.6+.5)*0.18)-.05;\n\tv=smax(v,-y-1.);\n\tv=smax(v,y-0.85,.075);\n\t\n\treturn v;\n}\n\nfloat Teapot(float3 p)\n{\n\tfloat x=p.x;\n\tfloat y=p.y;\n\tfloat z=p.z;\n\n\tfloat v=0.0;\n\tv=sqrt(x*x+z*z)-1.2-sin(y*1.5+2.0)*.4;\n\tv=smax(v,abs(y)-1.,0.3);\n\n\n\t\n\tfloat v1=sqrt(x*x*4.+sq(y+z*.1)*1.6+sq(z+1.2))-1.0;\n\tv1=smax(v1,-sqrt(sq(z+1.2)+sq(y+z*.12+.015)*1.8)+.8,.3);\n\t\n\tv=smin(v,Torus(y*1.2+.2+z*.3,x*.75,z+1.25+y*.2,.8,.1),.25);\n\tv=smin(v,sqrt(sq(x)+sq(y-1.1)+sq(z+1.8))-.05,.32);\n\n\tfloat v3=Nose(x,(y+z)*sqrt(.5)-1.6,(z-y)*sqrt(.5)-1.1);\n\n\tv=smin(v,v3,0.2);\n\t\n\tv=smax(v,smin(sin(y*1.4+2.0)*0.5+.95-sqrt(x*x+z*z),y+.8, .2));\n\tv=smax(v,-sqrt(sq(x)+sq(y+.15)+sq(z-1.5))+.12);\n\n\tv=smin(v,Torus(x,y-0.95,z,0.9,.075));\n\tv=smin(v,Torus(x,y+1.05,z,1.15,.05),0.15);\n\t\n\t\n\tfloat v2=Lid(x,y+.5,z);\n\tv=min(v,v2);\n\n\treturn v;\n}\n\nfloat plate0(float3 p)\n{\n\tfloat v=(length(p.xz)*.8-p.y)/sqrt(1.64);\n\tv=smin(v,(length(p.xz)*.3-p.y+.7)/sqrt(1.09));\n\tv=smax(v,-p.y+.8,.1);\n\treturn v;\n}\n\nfloat Plate(float3 p)\n{\n\tfloat v;\n\tfloat vi=plate0(p);\n\tfloat vo=plate0(p+float3(0,-.1,0));\n\tv=smax(vi,-vo);\n\tv=smax(v,(length(p.xz)*2.+p.y)/sqrt(3.)-3.);\n\tv=smin(v,Torus(p.x,p.y-.7,p.z,0.8,.025),0.2);\n\treturn v;\n}\n\nfloat Value(float3 p)\n{\n\tfloat v;\n\tv=Teapot(p);\n\t//v=Plate(p);\n\treturn v;\n}\n\nstruct Ray\n{\n\tvec3 p;\n\tvec3 d;\n};\n\nbool RayMarch(\n\tconst in Ray r, \n\tconst float startT, const float endT, \n\tconst float stp, \n\tconst int N,\n\tout float t, out float v, out int i)\n{\n\tfloat t0=startT;\n\tt=t0;\n\tv=Value(r.p+r.d*t);\n\n\tif(v<0.)\n\t\treturn true;\n\n\ti=0;\n\tfor(int j=0;j<1;j+=0)\n\t{\n\t\tt+=max(v*.85, stp);\n\t\tfloat v1=Value(r.p+r.d*t);\n\t\tif(v1<0.)\n\t\t{\n\t\t\t// Linear interpolation between two last steps\n\t\t\tt=t0+(t-t0)*v/(v-v1);\n\t\t\tv=Value(r.p+r.d*t);\n\t\t\treturn true;\n\t\t}\n\t\tif(t>endT)\n\t\t\treturn false;\n\t\ti++;\n\t\tif(i>N)\n\t\t\treturn false;\n\t\tv=v1;\n\t\tt0=t;\n\t}\n\treturn false;\n}\n\nfloat3 CalcNormal(float3 p, float n0)\n{\n\tfloat3 n;\n\tfloat d=0.001;\n\tn.x=Value(p+float3(d,0.0,0.0))-n0;\n\tn.y=Value(p+float3(0.0,d,0.0))-n0;\n\tn.z=Value(p+float3(0.0,0.0,d))-n0;\n\n\tn=normalize(n);\n\treturn n;\n}\n\nstruct Sphere\n{\n\tvec3 p;\n\tfloat r;\n};\n\nbool RaySphere(in Ray r, in Sphere s, out float t0, out float t1)\n{\n\tfloat3 l=s.p-r.p;\n\tfloat tc=dot(l,r.d);\n\tif(tc<0.0)\n\t{\n\t\treturn false;\n\t};\n\n\tfloat d2=s.r*s.r+tc*tc-dot(l,l);\n\n\tif(d2<0.0)\n\t{\n\t\treturn false;\n\t};\n\n\tfloat thc=sqrt(d2);\n\tt0=tc-thc;\n\tt1=tc+thc;\n\treturn true;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat3 campos=float3(-12.0,3.0,0.0);\n\tfloat3 look_at=float3(0.0,0.5,0.0);\n\tfloat3 up=float3(0,1,0);\n\tfloat3 forward;\n\tfloat3 right;\n\n\tfloat3 light=float3(0,10,10);\n\n\tfloat T=iTime*0.45;\n\t\n\tlight.x=cos(T)*10.0;\n\tlight.z=sin(T)*10.0;\n\tlight.y=5.0;\n\t\n\tfloat mposx=iMouse.x;\n\tfloat mposy=iMouse.y;\n\t//if(iMouse.z<0.0)mposx=-iMouse.z;\n\t//if(iMouse.w<0.0)mposy=-iMouse.w;\n\t\n\tfloat a1=(0.6+(mposy/iResolution.y-0.5)*0.7)*PI;\n\tfloat a2=mposx/iResolution.x*PI*2.0-PI/3.0;\n\n\tif(iMouse.y<10.0)\n\t{\n\t\ta1=PI*0.55;\n\t\ta2=PI+0.3;\n\t}\n\n\tcampos.y=cos(a1)*campos.x;\n\tfloat camx=sin(a1)*campos.x;\n\tcampos.x=cos(a2)*camx;\n\tcampos.z=sin(a2)*camx;\n\t\n\tforward=normalize(look_at-campos);\n\tright=normalize(cross(up,forward));\n\tup=normalize(cross(forward,right));\n\n\tfloat2 scr = fragCoord.xy /iResolution.xy;\n\tscr=2.0*scr-1.0;\n\n\tfloat2 scr2ray=scr;\n\tscr2ray.x*=(iResolution.x/iResolution.y);\n\tfloat2 uv=scr2ray;\n\tfloat3 ray=normalize(forward+(up*uv.y+right*uv.x)*0.2);\n\n\tfloat3 col=float3(0.0,0.5,0.0);\n\tfloat3 n;\n\tfloat t;\n\n\tfloat3 fogcol=mix(float3(0.87,0.8,0.83),float3(0.3,0.6,1.0),clamp(1.0-(1.0-ray.y)*(1.0-ray.y),0.,1.));\n\tfragColor.rgb=fogcol;\n\tfloat3 tpos;\n\tTrace(campos, ray, t, tpos, n);\n\tcol=mix(float3(0.97,0.95,0.83),float3(0.1,0.15,0.4), smoothstep(0.0,1.0,PlaneTexture(tpos.xz*0.2,36000.0/t/t)));\n\tfloat3 tolight=normalize(light);\n\n\t// Debug visualization of SDF values \n\tif(false)\n\t{\n\t\tfloat t1=MAX_RAY_LENGTH;\n\t\tfloat3 col1;\n\t\tfloat3 colp=vec3(0);\n\t\tfloat3 n1;\n\t\tRayPlane(float3(0.,0.,0.),float3(0.0,1.0,0.0),float3(1.0,0,0.0),campos, ray, t1, col1, n1);\n\t\tfloat3 pos=campos+ray*t1;\n\t\tif(t1<t)\n\t\t{\n\t\t\tt=t1;\n\t\t\tfloat v=Value(pos);\n\t\t\tcolp.r=v>0.?fract(v):0.5;\n\t\t\tcolp.b=v<0.?fract(v):0.5;\n\t\t\tcolp.g=.5-abs(clamp(fract(v*10.),0.,1.)-0.5);\n\t\t}\n\t\tcol.rgb+=colp.rgb*0.5;\n\t\tfragColor.rgb=col;\n\t}\n\n\tif(t<MAX_RAY_LENGTH)\n\t{\n\t\tcol=mix(fogcol,col,exp(-t*0.005));\n\t\tfragColor.rgb=col;\n\t}\n\n\t{\n\t\tfloat ts0, ts1;\n\t\tfloat3 start=campos;\n\t\tfloat n0;\n\t\tSphere bound=Sphere(vec3(.0,.3,.2),2.5);\n\n\t\t// Try bounding sphere first\n\t\tbool hit=RaySphere(Ray(start,ray), bound, ts0, ts1);\n\t\t//if(hit)fragColor.rgb*=0.95;\n\t\tint nt=-1;\n\n\t\tfloat tp;\n\n\t\tif(hit)\n\t\t{\n\t\t\thit=RayMarch(Ray(start,ray),ts0,ts1,.025,180,tp,n0,nt);\n\t\t}\n\n\t\tif(hit)\n\t\t{\n\t\t\tif(tp<t)\n\t\t\t{\n\t\t\t\tt=tp;\n\t\t\t\tfloat3 p=start+ray*tp;\n\t\t\t\tfloat3 n=CalcNormal(p,n0);\n\t\t\t\tif(nt<0)\n\t\t\t\t{\n\t\t\t\t\tn=normalize(p-bound.p);\n\t\t\t\t}\n\n\t\t\t\tfloat3 halfn=normalize(tolight-ray);\n\n\t\t\t\tfloat lamb=pow(clamp(dot(n,tolight),0.0,1.0),1.0)*0.9+0.1;\n\t\t\t\tfloat3 refray=reflect(ray,n);\n\n\t\t\t\tfloat spec1=clamp(dot(halfn,n),0.0,1.0);\n\t\t\t\tfloat spec2=clamp(dot(tolight,refray),0.0,1.0);\n\n\t\t\t\tfloat3 reffog=mix(\n\t\t\t\t\tfloat3(0.87,0.8,0.83),\n\t\t\t\t\tfloat3(0.3,0.6,1.0),\n\t\t\t\t\tclamp(1.0-(1.0-refray.y)*(1.0-refray.y),0.,1.));\n\n\t\t\t\tfloat3 n1;\n\n\t\t\t\tcol=lamb*float3(0.78,0.79,0.8);\n\t\t\t\tfloat3 rpos;\n\t\t\t\tfloat3 rcol;\n\t\t\t\tfloat tr;\n\t\t\t\tTrace(p, reflect(ray,n), tr, rpos, n1);\n\t\t\t\tfloat fresn=clamp(1.0-dot(ray,-n),0.0,1.0);\n\t\t\t\tif(tp<MAX_RAY_LENGTH)\n\t\t\t\t{\n\t\t\t\t\trcol=mix(float3(0.87,0.85,0.83),float3(0.1,0.12,0.4),\n\t\t\t\t\t\tsmoothstep(0.0,1.0,PlaneTexture(rpos.xz*0.2,600.0/tr/tr)));\n\t\t\t\t\trcol=mix(reffog,rcol,exp(-tr*0.02));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\trcol=reffog;\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tcol=mix(col,rcol,pow(fresn,1.2)*0.50);\n\t\t\t\t\tcol+=rcol*(pow(fresn,2.6)*0.2+0.1);\n\t\t\t\t\tcol=mix(col,float3(1,1,1),pow(spec2,40.0)*.4);\n\t\t\t\t\tcol=mix(col,float3(1,1,1),.8*pow(spec2,180.0));\n\t\t\t\t}\n\t\t\t\tfragColor.rgb=col;\n\t\t\t}\n\t\t}\n\n\t\t// Color coded steps count\n\t\tif(false)\n\t\t{\n\t\t\tif(nt>8)\n\t\t\t\tfragColor.g+=.2;\n\t\t\tif(nt>16)\n\t\t\t\tfragColor.r+=.4;\n\t\t\tif(nt>32)\n\t\t\t\tfragColor.g-=.2;\n\t\t\tif(nt>48)\n\t\t\t\tfragColor.rb+=vec2(-.4,.4);\n\t\t}\n\t}\n\tfragColor.a=1.;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}