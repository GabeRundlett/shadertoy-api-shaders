{
    "Shader": {
        "info": {
            "date": "1697482644",
            "description": "Shows the 3-valued inverse for the cubic map defined by three roots (use mouse to drag roots). Other controls & more details, see header.\n",
            "flags": 48,
            "hasliked": 0,
            "id": "DdXXWB",
            "likes": 23,
            "name": "Inverse Complex Cubic Solver",
            "published": 3,
            "tags": [
                "function",
                "complex",
                "cubic",
                "equation",
                "rational"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 274
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Inverse Complex Cubic Solver, mla, 2023.\n//\n// Take three complex numbers and find the equation z³+Az²+Bz + C = 0 = f(z) of\n// which they are the roots, but instead of mapping each screen position z to\n// w = f(z), map w to to z = f⁻¹(w), ie. find z for which f(z) = w, ie. solve\n// the cubic equation z³+Az²+Bz+C-w = 0. This is 3-valued (for the three roots),\n// and we show all 3 branches overlaid (or use keys 1-3 to select \n// the branches to show - it can be difficult to interpret all three at once).\n//\n// The three selected roots are shown as black circles (in the z-plane, in the\n// w-plane they are all mapped to zero) and can be dragged with the mouse and\n// The real and imaginary axes are also shown in both z- and w-planes.\n//\n// <mouse>: drag roots (black circles) around\n// <up/down>: zoom in/out\n// '1','2','3': select branches to show\n// 'a': animation mode\n// 'd': use approximate derivative\n// 'r': rotation\n// 'x': show untransformed z-plane\n// 'w': hide w-axes\n// 'z': hide z-axes\n//\n////////////////////////////////////////////////////////////////////////////////\n\nvec2 ccbrt(vec2 z) {\n  float t = carg(z)/3.0;\n  return pow(length(z),1.0/3.0)*expi(t);\n}\n\nmat3x2 solvecubic(vec2 p, vec2 q) {\n  // Solve depressed cubic: x³+3px+q = 0 - note factor of 3!\n  // Put x = u+v and get x³ = u³+v³+3xuv\n  // Substitute in original equation and get:\n  // u³+v³+(3uv+3p)x + q = 0\n  // Now let's constrain u,v so that uv+p = 0, and then:\n  // uv = -p ie. u³v³ = -p³ and u³+v³ = -q\n  // This gives a quadratic equation in t with roots u³ and v³:\n  // t²+qt-p³ = 0 so try to solve as:\n  // u³ = -q + sqrt(q²+4p³), v³ = -q - sqrt(q²+4p³)\n  // and take cube roots to get solution x = u+v.\n  //\n  // HOWEVER, we can't just combine any cube roots of the\n  // quadratic solutions, the condition uv+p = 0 above must also\n  // hold, so what we do is take either one of the quadratic\n  // solutions with its three cube roots as the three values\n  // of u, and derive the corresponding v's directly as v = -p/u.\n  // As with solving a real quadratic equation, it seems prudent\n  // to use the quadratic root with the largest absolute magnitude,\n  // and given one cube root, we can easily find the others by\n  // multiplying by the cube roots of unity, ω and ω².\n  vec2 q2 = cmul(q,q);\n  vec2 p3 = cmul(p,cmul(p,p));\n  vec2 s = csqrt(q2+4.0*p3);\n  float sign = dot(q,s) > 0.0 ? -1.0 : 1.0; // Get largest magnitude root\n  vec2 u3 = 0.5*(-q+sign*s);\n  vec2 u = ccbrt(u3);\n  vec2 u1 = cmul(u,omega); // Get other cuberoots by multiplying by ω and ω².\n  vec2 u2 = cmul(u,omega2);\n  return mat3x2(u-cdiv(p,u), u1-cdiv(p,u1), u2-cdiv(p,u2));\n}\n\nmat3x2 solvecubic(vec2 B, vec2 C, vec2 D) {\n  // Solve x³+Bx²+Cx+D = 0\n  B /= 3.0; C /= 3.0;  // Simplifies sums\n  vec2 B2 = cmul(B,B); // Depress with x->x+B\n  // p = c-b*b\n  vec2 p = C-B2;\n  // q = 2.0*b*b*b - 3.0*b*c + d\n  vec2 q = cmul(B,2.0*B2-3.0*C) + D;\n  mat3x2 res = solvecubic(p,q);\n  // Undepress by subtracting B\n  return mat3x2(res[0]-B,res[1]-B,res[2]-B);\n}\n\n// d(z³+Az²+Bz+C)/dz = 3z²+2Az+B\nfloat dlen(vec2 A, vec2 B, vec2 z) {\n  // Inverse derivative length\n  vec2 w = 3.0*cmul(z,z) + 2.0*cmul(A,z) + B;\n  return 1.0/length(w); // This works!\n}\n\nfloat axes(vec2 z,float px) {      // Draw axes\n  float eps = 0.05;\n  float d = min(abs(z.x),abs(z.y));\n  float x = z.x-round(z.x);\n  float y = z.y-round(z.y);\n  d = min(d,segment(vec2(x,z.y),vec2(0,-eps),vec2(0,eps)));\n  d = min(d,segment(vec2(z.x,y),vec2(-eps,0),vec2(eps,0)));\n  return smoothstep(0.0,px,d);\n}\n\nvec3 draw(vec2 w, float px) {\n    vec3 col1 = vec3(1,1,0);\n    vec3 col2 = vec3(0,1,1);\n    vec3 neutral = vec3(1,0,0);\n    vec2 w0 = w;\n    float px0 = px;\n    if (!key(CHAR_R)) {\n      float t = 0.25*iTime;\n      w = cmul(w,expi(t));\n    }\n    px /= length(w);\n    float t = atan(0.25*length(w))/PI;\n    w = clog(w);\n    float alpha = w.y/PI;\n    vec3 basecol = alpha < 0.0 ? col1 : col2;\n    vec3 color = mix(neutral,basecol,abs(alpha));\n    vec2 uv = 10.0*w/PI;\n    px = 10.0*px/PI;\n    //px = fwidth(length(uv));// fwidth for function result\n    uv = fract(uv);\n    uv = min(uv,1.0-uv);\n    color = mix(vec3(3.0*t),color,smoothstep(0.0,px,min(uv.x,uv.y)));\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord){\n    setscale();\n    vec2 z = map(fragCoord);\n    vec2 a = getselection(0);\n    vec2 b = getselection(1);\n    vec2 c = getselection(2);\n    float px = 2.0*scale/iResolution.y; //fwidth(length(z));\n    // x³+Ax²+Bx+C = 0\n    vec2 A = -(a+b+c);\n    vec2 B = cmul(a,b)+cmul(b,c)+cmul(c,a);\n    vec2 C = -cmul(a,cmul(b,c));\n    mat3x2 roots = solvecubic(A,B,C-z);\n    vec3 dz;\n    if (!key(CHAR_D)) {\n      dz = vec3(dlen(A,B,roots[0]),\n                dlen(A,B,roots[1]),\n                dlen(A,B,roots[2]));\n      dz *= 1.414;\n    } else {\n      float eps = 1e-3;\n      mat3x2 roots2 = solvecubic(A,B,C-z-eps);\n      dz = vec3(length(roots2[0]-roots[0]),\n                length(roots2[1]-roots[1]),\n                length(roots2[2]-roots[2]))/eps;\n    }\n    vec3 color = vec3(0);\n    if (key(CHAR_X)) {\n      color += draw(z,px);\n    } else {\n      int t = 0;\n      if (!key(CHAR_0+1)) { t++; color += draw(roots[0],px*dz[0]); }\n      if (!key(CHAR_0+2)) { t++; color += draw(roots[1],px*dz[1]); }\n      if (!key(CHAR_0+3)) { t++; color += draw(roots[2],px*dz[2]); }\n      if (!key(CHAR_W)) {\n        if (!key(CHAR_0+1)) color = mix(vec3(0.2),color,axes(roots[0],px*dz[0]));\n        if (!key(CHAR_0+2)) color = mix(vec3(0.2),color,axes(roots[1],px*dz[1]));\n        if (!key(CHAR_0+3)) color = mix(vec3(0.2),color,axes(roots[2],px*dz[2]));\n      }\n      if (t == 2) color *= 0.7;\n      if (t == 3) color *= 0.5;\n    }\n    roots = solvecubic(A,B,C);\n    for (int i = 0; i < 3; i++) {\n      vec2 w = getselection(i);\n      // Draw a little circle around each root.\n      vec3 pcol = vec3(0);\n      //if (i == 0 && !key(CHAR_A)) pcol = vec3(1);\n      color = mix(pcol,color,smoothstep(0.0,px,abs(distance(w,z)-0.05)));\n    }\n    if (!key(CHAR_Z)) {\n      color = mix(vec3(0),color,axes(z,px));\n    }\n    color = pow(color,vec3(0.4545));\n    if (alert) color.r = 1.0;\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\n#define SELECTIONS\nconst int nselections = 3;\n#define getselection(i) (\\\n  (i == 0 && !key(CHAR_A)) ? 2.0*ppath(0.25*iTime) \\\n  : texelFetch(iChannel2,ivec2((i)+1,3),0).xy)\n#define map(screenpos) (scale*(2.0*(screenpos)-iResolution.xy)/iResolution.y)\n\nvec2 initselection(int i) {\n  if (i == 0) return vec2(-sqrt(3.0),-1);\n  if (i == 1) return vec2( 0,-1.618);\n  if (i == 2) return vec2(-0.5,0);\n  return vec2(0);\n}\n\nconst float PI = 3.14159265;\nconst float TWOPI = 2.0*PI;\n\nvec2 ppath(float t) {\n  return vec2(cos(t),sin(0.618*t));\n}\n  \nfloat segment(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}\n\nvec2 expi(float t) {\n  return normalize(vec2(cos(t),sin(t)));\n}\n\nvec2 cmul(vec2 z, vec2 w) {\n  return vec2(z.x*w.x-z.y*w.y,z.x*w.y+z.y*w.x);\n}\n\nvec2 cinv(vec2 z) {\n  return vec2(z.x,-z.y)/dot(z,z);\n}\n\nvec2 cdiv(vec2 z1, vec2 z2) {\n  return cmul(z1,cinv(z2));\n}\n\nvec2 clog(vec2 z) {\n  float r2 = dot(z,z);\n  return vec2(0.5*log(r2),atan(z.y,z.x));\n}\n\nfloat carg(vec2 z) {\n  return atan(z.y,z.x);\n}\n\nvec2 csqrt(vec2 z) {\n  float t = carg(z);\n  return sqrt(length(z))*vec2(cos(0.5*t),sin(0.5*t));\n}\n\n// cuberoots of 1.\nconst vec2 omega = 0.5*vec2(-1,sqrt(3.0));\nconst vec2 omega2 = omega*vec2(1,-1);\n\n// Rotate vector p by angle t.\nvec2 rotate(vec2 p, float t) {\n  return cmul(p,expi(t));\n}\n\nfloat scale = 1.0;\n#define setscale() (scale = 2.5,scale *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP))))\n\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n#define keystate(code,n) ( texelFetch(iChannel3,ivec2(code,n),0) )\n\nconst int KEY_ALT = 18;\n// const int KEY_PAGE_UP = 33;\n// const int KEY_PAGE_DOWN = 34;\n// const int KEY_LEFT = 37;\n// const int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nconst int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\n// const int CHAR_E = 69;\n// const int CHAR_F = 70;\n// const int CHAR_G = 71;\n// const int CHAR_H = 72;\nconst int CHAR_I = 73;\n// const int CHAR_J = 74;\n// const int CHAR_K = 75;\n// const int CHAR_L = 76;\n// const int CHAR_M = 77;\n// const int CHAR_N = 78;\n// const int CHAR_O = 79;\n// const int CHAR_P = 80;\n// const int CHAR_Q = 81;\nconst int CHAR_R = 82;\n// const int CHAR_S = 83;\n// const int CHAR_T = 84;\n// const int CHAR_U = 85;\n// const int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\n// const int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 t, vec2 uv) {\n  setscale();\n  int i = int(uv.x); // Column number\n  int j = int(uv.y); // Row\n  if (iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (j == 0) {\n    // First row - key count\n    // Do key repeat here as well?\n    float w1 = keystate(i,0).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      // Don't count key changes when ALT pressed\n      if (keystate(KEY_ALT,0).x == 0.0 && w1 != 0.0) {\n        t.x++; t.y = iTime;\n      }\n    }\n    // Key repeat - only when shader is running!\n    // Should have longer pause after first key press.\n    if (t.w != 0.0 && keystate(KEY_ALT,0).x == 0.0 && iTime-t.y > 0.25) {\n      t.x++; t.y = iTime;\n    }\n  } else if (j == 1) {\n    if (i == 0 && iMouse.z != 0.0) t.xy = iMouse.xy;\n    if (i == 1 && iMouse.z == 0.0) t.xy = iMouse.xy;\n  } else if (j == 2 && key(i)) {\n    // Record mouse position when key pressed\n    t = vec4(iMouse.xy,0,iTime);\n  } else if (j == 3) {\n      // Cell 0 holds currently selected item, 0 = no selection\n    if (i == 0 && iFrame != 0) {\n      if (t.x == 0.0 && iMouse.z > 0.0) {\n        vec2 mouse = map(iMouse.xy);\n        // No selection, but mouse now down\n        for (int i = nselections; i >= 1; i--) {\n          // Select topmost item (assume drawn 1..N)\n          vec2 p = getselection(i-1); //texelFetch(iChannel2,ivec2(i,3),0).xy; // Get current state\n          if (distance(mouse,p) < scale*0.05) {\n            t.x = float(i);\n            break;\n          }\n        }\n      } else if (t.x != 0.0 && iMouse.z <= 0.0) {\n        // Clear selection if mouse up.\n        t.x = 0.0;\n      }\n    } else if (iFrame == 0 || t.z != 1234.0) {\n      t.z = 1234.0;\n      t.xy = initselection(i-1); // Current coordinates\n    } else {\n      vec4 t0 = texelFetch(iChannel2,ivec2(0,3),0); // Get current state\n      if (int(t0.x) == i && iMouse.z > 0.0) {\n        // If currently selected, copy mouse position\n        t.xy = map(iMouse.xy);\n      }\n    }\n  }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}