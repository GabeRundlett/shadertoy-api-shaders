{
    "Shader": {
        "info": {
            "date": "1580239423",
            "description": "Code may not be the cleanliest",
            "flags": 32,
            "hasliked": 0,
            "id": "wlV3Wt",
            "likes": 9,
            "name": "Day 40",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 1101
        },
        "renderpass": [
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n    \n    //float m = pow(abs(sin(p.z*0.03)),10.);\n\n    // Radial blur\n    float steps = 20.;\n    float scale = 0.00 + pow(length(uv - 0.5)*1.2,3.)*0.1;\n    //float chromAb = smoothstep(0.,1.,pow(length(uv - 0.5), 0.3))*1.1;\n    float chromAb = pow(length(uv - 0.5),1.4)*3.1;\n    vec2 offs = vec2(0);\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n    \n        scale *= 0.91;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.r += texture(iChannel0, target + chromAb*1./iResolution.xy).x;\n    \tradial.g += texture(iChannel0, target).y;\n    \tradial.b += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    radial /= steps;\n    \n    \n    fragColor = radial*1.; \n    \n    fragColor *= 1.3;\n    fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.8);\n    \n    fragColor = max(fragColor, 0.);\n    fragColor.xyz = pow(fragColor.xyz, vec3(0.8,1. + sin(iTime)*0.2,1. - sin(iTime)*0.2));\n\n    //fragColor = pow(fragColor, vec4(0.4545 + dot(uvn,uvn)*1.7));\n    fragColor *= 1. - dot(uvn,uvn)*1.8;\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// It was going ok, but now I kind of hate it.\n\n\n// --------- check out CUTEMODE, looks better --------- //\n#define CUTEMODE \n\n#define mx (iTime*3. + 1.*iMouse.x/iResolution.y)\n#define my (1.*iMouse.y/iResolution.y)\n\n#define dmin(a,b) a.x < b.x ? a : b\n#define pmod(p, x) mod(p, x) - x*0.5\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n\n\nvec3 glow = vec3(0);\n\n#define modDist 5.\nvec3 u;\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e4);\n\tp.xz = pmod(p.xz, modDist);\n    \n    float pR = 4.;\n    p.y = abs(p.y);\n    p.y -= pR*1.1;\n    vec3 q = abs(p) - pR;\n    u = q;\n    float dPyra = max(q.x, q.z);\n    dPyra = max(dPyra, dot(q.xy + 0.5*pR,normalize(vec2(1))));\n    dPyra = max(dPyra, dot(q.zy + 0.5*pR,normalize(vec2(1))));\n    //d.x = min(d.x, length(p) - 0.5);\n    d.x = min(d.x, dPyra);\n    //d.x = min(d.x, length(p) - 0.5);\n    d.x *= 0.22;\n    return d;\n}\n\nvec3 getNormal(vec3 p){\n    vec2 t = vec2(0.001,0.);\n    float d = map(p).x;\n\tfloat a = map(p - t.xyy).x;\n\tfloat b = map(p - t.yxy).x;\n\tfloat c = map(p - t.yyx).x;\n    return normalize(d - vec3(a,b,c));\n}\nvoid getNormalAndEdge(vec3 p,inout vec3 n,inout float edge){\n    vec2 t = vec2(0.05,0.);\n    n = getNormal(p);\n    vec3 a = getNormal(p + t.xyy);\n    vec3 b = getNormal(p + t.yxy);\n    vec3 c = getNormal(p + t.yyx);\n    vec3 d = getNormal(p - t.xyy);\n    vec3 e = getNormal(p - t.yxy);\n    vec3 f = getNormal(p - t.yyx);\n    edge = length(a - b - c );\n    edge = length(a - b - c - d - e - f);\n}\n\n#define pal(a,b,c,d,e) (a + b*sin(c*d + e))\nvec2 march(vec3 ro, vec3 rd,inout float t,inout bool hit){\n\thit = false;\n    t = 0.;\n    vec2 d;\n    vec3 p = ro + rd*1.;\n    for(int i = 0; i < 250; i++){\n    \td = map(p);\n        //glow += exp(-d.x*15.)*pal(0.6 + sin(iTime),vec3(1.3,1.1,1.),vec3(4.7,2.2,3.), d.x*9., 10.);\n        //glow += exp(-d.x*10.)*pal(0.5,vec3(1.3 ,1.1 ,1.),vec3(1.7+ sin(iTime*2.)*1.,2.2,3.), d.x*5., 10.);\n        \n        //glow += exp(-d.x*10.)*pal(0.5,vec3(1.3,1.1,1.),vec3(4.7,2.2,3.), d.x*9., 10.);\n        glow += exp(-d.x*10.)*pal(0.5,vec3(1.3 ,1.1 ,1.),vec3(1.7+ sin(iTime*2.)*1.,2.2,3.), d.x*5., 10.);\n        //glow += exp(-d.x*0.)*pal(0.5,vec3(0.5 ,0.5 ,0.5),vec3(1.7+ sin(iTime*1.)*1.,9.2,3.), d.x*5., 10.)*0.1;\n        if(d.x < 0.001){\n        \thit = true;\n        \tbreak;\n        }\n        t += d.x;\n    \tp = ro + rd*t;\n    }\n\treturn d;\n}\n\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n    vec3 dir = normalize(lookAt - ro);\n\tvec3 right = normalize(cross(vec3(0,1,0),dir));\n\tvec3 up = normalize(cross(dir, right));\n    return normalize(dir + right*uv.x + up*uv.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0);\n    //ro.z += mx;\n    ro.x -= mx;\n    ro.y += 0.2;\n    vec3 lookAt = ro + vec3(0,0,0);\n    lookAt.x += sin(-2.);\n    vec3 rd = getRd(ro, lookAt, uv);\n    rd.yz *= rot(sin(iTime*0.5)*0.1);\n    rd.xy *= 1. - dot(uv,uv)*0.2;\n\n    float t = 0.;\n    bool hit = false;\n    vec2 d = march(ro, rd, t, hit);\n    vec3 n;\n    float edge; \n    vec3 p =ro + rd*t;\n    vec3 j = p;\n    getNormalAndEdge( j*2. - vec3(0,2.5,0), n, edge);\n    if(hit){\n        float l = 1.;\n        //n = 1.;\n        //vec3 i = p;\n        col += abs(sin(iTime*0.6))*smoothstep(l*2.5,l,pow(edge*0.29,6.))*2.*fract(clamp(sin(iTime + p.z - cos(p.x) - p.y),0.,1.));\n        //#define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n#define pi acos(-1.)\n        float mR = 6.;\n        float w = 0.2;\n        u.y = abs(u.y);\n        u = abs(u);\n        u.xy *= rot(0.25*pi);\n        u.zy *= rot(0.225*pi);\n        u = abs(u);\n        u.x -= 20.;\n        float id = floor(u.y*mR);\n        vec2 idZX = floor(p.xz/modDist);\n        #ifdef CUTEMODE\n        float m = abs(mod(u.y*mR,1.)-2.5);\n        #else \n        float m = abs(mod(u.y*mR,1.)-.9);\n        \n        #endif\n        col += smoothstep(w,w*.5 + sin(id)*1.4,m)*pal(0.5,vec3(1.9,0.7,0.1),vec3(0.7,0.2,0.8), 2. + idZX.x - idZX.y*2., id + idZX.x + iTime*0.9);\n        //col += n;\n    } else {\n    \t\n    }\n    \n    \n    col += glow*0.04;\n    col = max(col, vec3(0.00));\n    \n    //col = pow(col, vec3(1.5,1. + sin(iTime)*0.2,1. - sin(iTime)*0.2));\n    col *= 0.7;\n    //col.b*= 1.2;\n    \n    col = mix(col, vec3(0.0,0,0.0),clamp(pow(abs(t)*0.11 - 4.9, 1.), 0., 1.));\n    col = clamp(col, 0.00,1.);\n    col = mix(col,1. - col,0.01);\n    //col = smoothstep(0.,1.,col);\n    //col = mix(col, vec3(0,0,0),clamp(pow(abs(p.y)*0.5 - 0.4, 1.), 0., 1.));\n    //col = mix(col, vec3(0.04,0,0.04),clamp(pow(abs(p.y)*0.5 - 0.9, 1.), 0., 1.));\n    //col = smoothstep(-0.05,1.,col);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}