{
    "Shader": {
        "info": {
            "date": "1705165819",
            "description": "s",
            "flags": 0,
            "hasliked": 0,
            "id": "McsXzM",
            "likes": 10,
            "name": "ballssss",
            "published": 3,
            "tags": [
                "s"
            ],
            "usePreview": 0,
            "username": "Angramme",
            "viewed": 223
        },
        "renderpass": [
            {
                "code": "precision highp float;\n\n#define MAX_STEPS 200\n#define MAX_DIST 200.\n#define MIN_DIST .001\n#define N_eps .001\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec3 LIGHT_POS;\n\nvec3 TRAJ(float i){\n    i *= 0.821314159;\n    /*\n    vec3 p = vec3(\n        sin(i+.314*iTime)+cos(1.12*iTime+sin(iTime+i)), \n        cos(i + .2777*iTime), \n        .5*cos(iTime+cos(i)));\n          */\n    vec3 p = vec3(i-2.5, sin(3.*i + iTime), 0);\n    // vec2 mm = iMouse.xy - p.xy;\n    // float d = dot(mm, mm);\n    // p.xy += normalize(mm);\n    // p.xy += mm/d*max(0., 10.-d);\n    return p;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat DIST(vec3 p){\n    float minn = 1000.;\n    for(float i=0.; i<7.; i++){\n        float ball = distance(p, TRAJ(i))-.35 + 0.03*sin(i);\n        minn = opSmoothUnion(minn, ball, 0.6);\n    }\n    // float bigball = distance(p, vec3(-7, -5, 4)) - 7.;\n    // minn = opSmoothUnion(minn, bigball, 1.9);\n    \n    return minn;\n}\n\nvec3 NORM(vec3 p){\n    const float inv_N_eps = 1./N_eps;\n    const vec2 vN = vec2(N_eps, 0.);\n    return (vec3(\n        DIST(p + vN.xyy),\n        DIST(p + vN.yxy),\n        DIST(p + vN.yyx)\n    )-DIST(p))*inv_N_eps;\n}\n\nfloat MARCH(vec3 ro, vec3 rd){\n    float D = 0.;\n    for(int i=0; i<MAX_STEPS; i++){\n        float d = DIST(ro + rd*D);\n        D += d;\n        if(MAX_DIST < D || MIN_DIST > d) break;\n    }\n    return D;\n}\n\n\nvec4 genAmbientOcclusion(vec3 ro, vec3 rd)\n{\n    vec4 totao = vec4(0.0);\n    float sca = 1.0;\n\n    for (int aoi = 0; aoi < 5; aoi++)\n    {\n        float hr = 0.01 + 0.02 * float(aoi * aoi);\n        vec3 aopos = ro + rd * hr;\n        float dd = DIST(aopos);\n        float ao = clamp(-(dd - hr), 0.0, 1.0);\n        totao += ao * sca * vec4(1.0, 1.0, 1.0, 1.0);\n        sca *= 0.75;\n    }\n\n    const float aoCoef = 0.5;\n    totao.w = 1.0 - clamp(aoCoef * totao.w, 0.0, 1.0);\n\n    return totao;\n}\n\nvec3 SKY(vec3 rd){\n    return mix(vec3(0.8,.5, .5), vec3(-3., -1., 0), rd.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.x;\n\n    float T = mod(iTime, 2.*1.8)/1.8;\n\n    vec3 ro = vec3(0, 0, -10);\n    vec3 rd = normalize(vec3(uv.xy*.8, 1.));\n    \n    float D = MARCH(ro, rd);\n    vec3 P = ro + rd*D;\n    vec3 N = NORM(P);\n    vec3 Nr = N + 0.1*vec3(rand(P.xy), rand(P.xz), rand(P.yz));\n   \n    // Time varying pixel color\n    vec3 col = vec3(0);\n\n    if(D < MAX_DIST){\n           \n        col += 2.*vec3(.128, .13, .18)*max(.5, dot(Nr, vec3(0, 1, 0)));\n        col += vec3(.7, .15, .04)*max(.5, dot(Nr, normalize(vec3(1, 0, -.8))));\n        // col *= 1. + 0.3*rand(P.xy);\n        col += vec3(.2, .13, .6)*pow(max(.5, dot(rd, reflect(-normalize(vec3(1, 0, -.8)), N))), 5.);\n        col += vec3(.8)*pow(max(.5, dot(rd, reflect(normalize(vec3(1, 0.5, -.8)), N))), 105.);\n        \n        \n        vec4 totao = genAmbientOcclusion(P + N * 0.0001, N);\n        col -= totao.xyz * totao.w;\n    }else{\n        col += SKY(rd);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}