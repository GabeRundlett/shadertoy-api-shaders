{
    "Shader": {
        "info": {
            "date": "1478444574",
            "description": "just another simple ray marching example",
            "flags": 0,
            "hasliked": 0,
            "id": "XttXR4",
            "likes": 5,
            "name": "fish eye",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "lomateron",
            "viewed": 945
        },
        "renderpass": [
            {
                "code": "#define D .0001\nvec3 skyColor(float x)\n{\n\tvec3 v1 = vec3(-.376,-1.798,-2.76);\n\tvec3 v2 = vec3(1.024,2.865,3.722);\n\tvec3 v3 = vec3(.117,-.577,-.894);\n\tvec3 v4 = vec3(.116,.307,.535);\n\tvec3 v5 = vec3(.094,.121,.168);\n\tfloat x2 = x*x;\n\tfloat x3 = x2*x;\n\tfloat x4 = x3*x;\n\treturn v1*x4+v2*x3+v3*x2+v4*x+v5;\n}\nfloat sphrs(vec3 p)\n{\n    return max((length(fract(p)*2.-1.) - 1.), p.y);\n}\nvoid march(vec3 eye, vec3 cam, inout vec3 p, inout float d)\n{\n    float dep = 0.;\n    for (int i = 0; i < 16; ++i)\n    {\n        p = eye + dep*cam;\n        d = sphrs(p);\n        dep += d;\n    }\n}\nvec3 normal(vec3 p, float d){\n    return normalize(vec3(\n        d - sphrs(vec3(p.x - D, p.y, p.z)),\n        d - sphrs(vec3(p.x, p.y - D, p.z)),\n        d - sphrs(vec3(p.x, p.y, p.z - D))\n    ));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //make uv to go form -1 to 1 accros the screen\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv*2.-1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    //calculate fish eye camera\n    vec3 cam = normalize(vec3(uv,sqrt(1.-dot(uv,uv))));\n    \n    //rotate cam vector in x axis by t radians\n    float t = (sin(iTime)-1.)*-.5;\n    cam = vec3(cam.x,\n               cos(t)*cam.y-sin(t)*cam.z,\n               sin(t)*cam.y+cos(t)*cam.z);\n    \n    //calculate camera position\n    vec3 eye = vec3(iMouse.x*.01,1.,iMouse.y*.01+iTime-40.);\n    \n    //calculate final color shown in every pixel\n    vec3 p;\n    float d;\n    march(eye, cam, p, d);\n    vec3 n = cam;\n    if(d<D){ n = normal(p, d); }\n\tfragColor = vec4(skyColor(n.y),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}