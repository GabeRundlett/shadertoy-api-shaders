{
    "Shader": {
        "info": {
            "date": "1702080765",
            "description": "Volumetric lines",
            "flags": 0,
            "hasliked": 0,
            "id": "DtVfDD",
            "likes": 0,
            "name": "Volume-etric Lines ",
            "published": 3,
            "tags": [
                "cineshader"
            ],
            "usePreview": 0,
            "username": "pxlmage",
            "viewed": 699
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2013 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\nvec3 hash3( float n )\n{\n    return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(43758.5453123,22578.1459123,19642.3490423));\n}\n\nvec3 snoise3( in float x )\n{\n    float p = floor(x);\n    float f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    return -1.0 + 2.0*mix( hash3(p+0.0), hash3(p+1.0), f );\n}\n\nfloat freqs[16];\n\nfloat dot2(in vec3 v ) { return dot(v,v); }\nvec2 usqdLineSegment( vec3 ro, vec3 rd, vec3 v0, vec3 v1 )\n{\n#if 1\n\tvec3 oa = ro - v0;\n    vec3 ob = ro - v1;\n\tvec3 va = rd*dot(oa,rd)-oa;\n    vec3 vb = rd*dot(ob,rd)-ob;\n    \n    vec3 w1 = va;\n    vec3 w2 = vb-w1;\n    float h = clamp( -dot(w1,w2)/dot(w2,w2), 0.0, 1.0 );\n\n    float di = dot2(w1+w2*h);\n    \n    return vec2(di,h);\n#else\n    vec3 ba = v1-v0, oa = ro-v0;\n\n    float a = dot(ba,ba);\n    float b = dot(rd,ba);\n    float c = dot(oa,ba);\n    float e = dot(oa,rd);\n\n    vec2 st = vec2( c-b*e, b*c-a*e)/(a-b*b);\n\n    st.x = min( max( st.x, 0.0), 1.0 );\n    st.y =      max( st.y, 0.0 );\n\n    return vec2( dot2( (v0+st.x*ba)-(ro+st.y*rd) ), st.x );\n#endif  \n}\n\nvec3 castRay( vec3 ro, vec3 rd, float linesSpeed )\n{\n\tvec3 col = vec3(0.0);\n\t\n\t\t\n\tfloat mindist = 10000.0;\n\tvec3 p = vec3(0.2);\n\tfloat h = 0.0;\n\tfloat rad = 0.04 + 0.15*freqs[0];\n\tfloat mint = 0.0;\n    for( int i=0; i<128; i++ )\n\t{\n\t\tvec3 op = p;\n\t\t\n\t\top = p;\n\t\tp  = 1.25*1.0*normalize(snoise3( 64.0*h + linesSpeed*0.015*iTime ));\n\t\t\n\t\tvec2 dis = usqdLineSegment( ro, rd, op, p );\n\t\t\n\t\tvec3 lcol = 0.6 + 0.4*sin( 10.0*6.2831*h + vec3(0.0,0.6,0.9) );\n\t\t\n\t\tfloat m = pow( texture( iChannel0, vec2(h*0.5,0.25) ).x, 2.0 )*(1.0+2.0*h);\n\t\t\n\t\tfloat f = 1.0 - 4.0*dis.y*(1.0-dis.y);\n\t\tfloat width = 1240.0 - 1000.0*f;\n\t\twidth *= 0.25;\n\t\tfloat ff = 1.0*exp(-0.06*dis.y*dis.y*dis.y);\n\t\tff *= m;\n\t\tcol += 0.3*lcol*exp( -0.3*width*dis.x )*ff;\n\t\tcol += 0.5*lcol*exp( -8.0*width*dis.x )*ff;\n\t\th += 1.0/128.0;\n\t}\n\n\n    return col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\t\t \n\tfloat time = iTime;\n\n\n\tfor( int i=0; i<16; i++ )\n\t    freqs[i] = clamp( 1.9*pow( texture( iChannel0, vec2( 0.05 + 0.5*float(i)/16.0, 0.25 ) ).x, 3.0 ), 0.0, 1.0 );\n\t\n\t// camera\t\n\tvec3 ta = vec3( 0.0, 0.0, 0.0 );\n\nfloat isFast = smoothstep( 35.8, 35.81, iChannelTime[0] );\n\tisFast  -= smoothstep( 61.8, 61.81, iChannelTime[0] );\n\tisFast  += smoothstep( 78.0, 78.01, iChannelTime[0] );\n\tisFast  -= smoothstep(103.0,103.01, iChannelTime[0] );\n\tisFast  += smoothstep(140.0,140.01, iChannelTime[0] );\n\tisFast  -= smoothstep(204.0,204.01, iChannelTime[0] );\n\t\n    float camSpeed = 1.0 + 40.0*isFast;\t\n\n\n\tfloat beat = floor( max((iChannelTime[0]-35.7+0.4)/0.81,0.0) );\n\ttime += beat*10.0*isFast;\n\tcamSpeed *= mix( 1.0, sign(sin( beat*1.0 )), isFast );\n\n\t\nfloat linesSpeed =  smoothstep( 22.7, 22.71, iChannelTime[0] );\t\n\t  linesSpeed -= smoothstep( 61.8, 61.81, iChannelTime[0] );\n\t  linesSpeed += smoothstep( 78.0, 78.01, iChannelTime[0] );\n\t  linesSpeed -= smoothstep(140.0,140.01, iChannelTime[0] );\n\n\t\n\tta  = 0.2*vec3( cos(0.1*time), 0.0*sin(0.1*time), sin(0.07*time) );\n\n\tvec3 ro = vec3( 1.0*cos(camSpeed*0.05*time+6.28*mo.x), 0.0, 1.0*sin(camSpeed*0.05*time+6.2831*mo.x) );\n\tfloat roll = 0.25*sin(camSpeed*0.01*time);\n\t\n\t// camera tx\n\tvec3 cw = normalize( ta-ro );\n\tvec3 cp = vec3( sin(roll), cos(roll),0.0 );\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n\tvec3 rd = normalize( p.x*cu + p.y*cv + 1.2*cw );\n\n\tfloat curve  = smoothstep( 61.8, 71.0, iChannelTime[0] );\n\t      curve -= smoothstep(103.0,113.0, iChannelTime[0] );\n    rd.xy += curve*0.025*vec2( sin(34.0*q.y), cos(34.0*q.x) );\n\trd = normalize(rd);\n\t\n\t\n\tro *= 1.0 - linesSpeed*0.5*freqs[1];\n    vec3 col = castRay( ro, rd, 1.0 + 20.0*linesSpeed );\n    col = col*col*2.4;\n\t\n\n\n\t// fade to black\n    col *= 1.0 - smoothstep(218.0,228.00, iChannelTime[0] );\n    col *=       smoothstep(  0.0,  4.00, iChannelTime[0] );\n\tif( iChannelTime[0]>61.8 && iChannelTime[0]<65.0 )\n\tcol *= vec3(1.0)*clamp( (iChannelTime[0]-61.8)/(65.0-61.8), 0.0, 1.0 );\n   \n\n    col *= 0.15+0.85*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.15 );\n\n    fragColor=vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}