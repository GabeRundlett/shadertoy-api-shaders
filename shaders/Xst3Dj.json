{
    "Shader": {
        "info": {
            "date": "1452223198",
            "description": "Fluid-like continuous cellular automata.",
            "flags": 48,
            "hasliked": 0,
            "id": "Xst3Dj",
            "likes": 291,
            "name": "Viscous Fingering",
            "published": 3,
            "tags": [
                "diffusion",
                "feedback",
                "reaction"
            ],
            "usePreview": 1,
            "username": "cornusammonis",
            "viewed": 13339
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 texel = 1. / iResolution.xy;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 components = texture(iChannel0, uv).xyz;\n    vec3 norm = normalize(components);\n    fragColor = vec4(0.5 + norm.z);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "bool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float _K0 = -20.0/6.0; // center weight\n    const float _K1 = 4.0/6.0; // edge-neighbors\n    const float _K2 = 1.0/6.0; // vertex-neighbors\n    const float cs = 0.25; // curl scale\n    const float ls = 0.24; // laplacian scale\n    const float ps = -0.06; // laplacian of divergence scale\n    const float ds = -0.08; // divergence scale\n    const float pwr = 0.2; // power when deriving rotation angle from curl\n    const float amp = 1.0; // self-amplification\n    const float sq2 = 0.7; // diagonal weight\n\n    vec2 vUv = fragCoord.xy / iResolution.xy;\n    vec2 texel = 1. / iResolution.xy;\n    \n    // 3x3 neighborhood coordinates\n    float step_x = texel.x;\n    float step_y = texel.y;\n    vec2 n  = vec2(0.0, step_y);\n    vec2 ne = vec2(step_x, step_y);\n    vec2 e  = vec2(step_x, 0.0);\n    vec2 se = vec2(step_x, -step_y);\n    vec2 s  = vec2(0.0, -step_y);\n    vec2 sw = vec2(-step_x, -step_y);\n    vec2 w  = vec2(-step_x, 0.0);\n    vec2 nw = vec2(-step_x, step_y);\n\n    vec3 uv =    texture(iChannel0, vUv).xyz;\n    vec3 uv_n =  texture(iChannel0, vUv+n).xyz;\n    vec3 uv_e =  texture(iChannel0, vUv+e).xyz;\n    vec3 uv_s =  texture(iChannel0, vUv+s).xyz;\n    vec3 uv_w =  texture(iChannel0, vUv+w).xyz;\n    vec3 uv_nw = texture(iChannel0, vUv+nw).xyz;\n    vec3 uv_sw = texture(iChannel0, vUv+sw).xyz;\n    vec3 uv_ne = texture(iChannel0, vUv+ne).xyz;\n    vec3 uv_se = texture(iChannel0, vUv+se).xyz;\n    \n    // uv.x and uv.y are our x and y components, uv.z is divergence \n\n    // laplacian of all components\n    vec3 lapl  = _K0*uv + _K1*(uv_n + uv_e + uv_w + uv_s) + _K2*(uv_nw + uv_sw + uv_ne + uv_se);\n    float sp = ps * lapl.z;\n    \n    // calculate curl\n    // vectors point clockwise about the center point\n    float curl = uv_n.x - uv_s.x - uv_e.y + uv_w.y + sq2 * (uv_nw.x + uv_nw.y + uv_ne.x - uv_ne.y + uv_sw.y - uv_sw.x - uv_se.y - uv_se.x);\n    \n    // compute angle of rotation from curl\n    float sc = cs * sign(curl) * pow(abs(curl), pwr);\n    \n    // calculate divergence\n    // vectors point inwards towards the center point\n    float div  = uv_s.y - uv_n.y - uv_e.x + uv_w.x + sq2 * (uv_nw.x - uv_nw.y - uv_ne.x - uv_ne.y + uv_sw.x + uv_sw.y + uv_se.y - uv_se.x);\n    float sd = ds * div;\n\n    vec2 norm = normalize(uv.xy);\n    \n    // temp values for the update rule\n    float ta = amp * uv.x + ls * lapl.x + norm.x * sp + uv.x * sd;\n    float tb = amp * uv.y + ls * lapl.y + norm.y * sp + uv.y * sd;\n\n    // rotate\n    float a = ta * cos(sc) - tb * sin(sc);\n    float b = ta * sin(sc) + tb * cos(sc);\n    \n    // initialize with noise\n    if(iFrame<10 || reset()) {\n        fragColor = -0.5 + texture(iChannel1, fragCoord.xy / iResolution.xy);\n    } else {\n        fragColor = clamp(vec4(a,b,div,1), -1., 1.);\n    }\n    \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}