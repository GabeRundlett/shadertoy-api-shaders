{
    "Shader": {
        "info": {
            "date": "1392241143",
            "description": "Another terrain, a quick one. Same concept as Elevated, just a different terrain shape.",
            "flags": 0,
            "hasliked": 0,
            "id": "MdBGzG",
            "likes": 365,
            "name": "Canyon",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "raymarching",
                "distancefield",
                "terrain",
                "elevated"
            ],
            "usePreview": 1,
            "username": "iq",
            "viewed": 74682
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2014 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n//-----------------------------------------------------------------------------------\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 1   // make this 2 or 3 for antialiasing\n#endif\n//#define HIGH_QUALITY\n#define LOWDETAIL\n\nfloat noise1( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n#ifndef HIGH_QUALITY\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel2, (uv+ 0.5)/256.0, 0.0 ).yx;\n#else\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z);\n\tvec2 rg1 = textureLod( iChannel2, (uv+ vec2(0.5,0.5))/256.0, 0.0 ).yx;\n\tvec2 rg2 = textureLod( iChannel2, (uv+ vec2(1.5,0.5))/256.0, 0.0 ).yx;\n\tvec2 rg3 = textureLod( iChannel2, (uv+ vec2(0.5,1.5))/256.0, 0.0 ).yx;\n\tvec2 rg4 = textureLod( iChannel2, (uv+ vec2(1.5,1.5))/256.0, 0.0 ).yx;\n\tvec2 rg = mix( mix(rg1,rg2,f.x), mix(rg3,rg4,f.x), f.y );\n#endif\t\n\treturn mix( rg.x, rg.y, f.z );\n}\n\n//-----------------------------------------------------------------------------------\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n\nfloat displacement( vec3 p )\n{\n    float f;\n    f  = 0.5000*noise1( p ); p = m*p*2.02;\n    f += 0.2500*noise1( p ); p = m*p*2.03;\n    f += 0.1250*noise1( p ); p = m*p*2.01;\n\t#ifndef LOWDETAIL\n    f += 0.0625*noise1( p ); \n\t#endif\n    return f;\n}\n\nvec4 texcube( sampler2D sam, in vec3 p, in vec3 n )\n{\n\tvec4 x = texture( sam, p.yz );\n\tvec4 y = texture( sam, p.zx );\n\tvec4 z = texture( sam, p.xy );\n\treturn (x*abs(n.x) + y*abs(n.y) + z*abs(n.z))/(abs(n.x)+abs(n.y)+abs(n.z));\n}\n\nvec4 texcubeGrad( sampler2D sam, in vec3 p, in vec3 n, in vec3 dpdx, in vec3 dpdy )\n{\n\tvec4 x = textureGrad( sam, p.yz, dpdx.yz, dpdy.yz );\n\tvec4 y = textureGrad( sam, p.zx, dpdx.zx, dpdy.zx );\n\tvec4 z = textureGrad( sam, p.xy, dpdx.xy, dpdy.xy );\n\treturn (x*abs(n.x) + y*abs(n.y) + z*abs(n.z))/(abs(n.x)+abs(n.y)+abs(n.z));\n}\n\nvec4 textureGood( sampler2D sam, vec2 uv, float lo )\n{\n    uv = uv*1024.0 - 0.5;\n    vec2 iuv = floor(uv);\n    vec2 f = fract(uv);\n\tvec4 rg1 = textureLod( sam, (iuv+ vec2(0.5,0.5))/1024.0, lo );\n\tvec4 rg2 = textureLod( sam, (iuv+ vec2(1.5,0.5))/1024.0, lo );\n\tvec4 rg3 = textureLod( sam, (iuv+ vec2(0.5,1.5))/1024.0, lo );\n\tvec4 rg4 = textureLod( sam, (iuv+ vec2(1.5,1.5))/1024.0, lo );\n\treturn mix( mix(rg1,rg2,f.x), mix(rg3,rg4,f.x), f.y );\n}\n\n//-----------------------------------------------------------------------------------\n\nfloat terrain( in vec2 q )\n{\n\tfloat th = smoothstep( 0.0, 0.7, textureLod( iChannel0, 0.001*q, 0.0 ).x );\n    float rr = smoothstep( 0.1, 0.5, textureLod( iChannel1, 2.0*0.03*q, 0.0 ).y );\n\tfloat h = 1.9;\n\t#ifndef LOWDETAIL\n\th += -0.15 + (1.0-0.6*rr)*(1.5-1.0*th) * 0.3*(1.0-textureLod( iChannel0, 0.04*q*vec2(1.2,0.5), 0.0 ).x);\n\t#endif\n\th += th*7.0;\n    h += 0.3*rr;\n    return -h;\n}\n\nfloat terrain2( in vec2 q )\n{\n\tfloat th = smoothstep( 0.0, 0.7, textureGood( iChannel0, 0.001*q, 0.0 ).x );\n    float rr = smoothstep( 0.1, 0.5, textureGood( iChannel1, 2.0*0.03*q, 0.0 ).y );\n\tfloat h = 1.9;\n\th += th*7.0;\n    return -h;\n}\n\nvec4 map( in vec3 p )\n{\n\tfloat h = terrain( p.xz );\n\tfloat dis = displacement( 0.25*p*vec3(1.0,4.0,1.0) );\n\tdis *= 3.0;\n\treturn vec4( (dis + p.y-h)*0.25, p.x, h, 0.0 );\n}\n\nvec4 raycast( in vec3 ro, in vec3 rd, in float tmax )\n{\n    float t = 0.1;\n    vec3 res = vec3(0.0);\n    #ifdef HIGH_QUALITY\n    for( int i=0; i<512; i++ )\n    #else\n    for( int i=0; i<256; i++ )\n    #endif\n    {\n\t    vec4 tmp = map( ro+rd*t );\n        res = tmp.ywz;\n        #ifdef HIGH_QUALITY\n        t += tmp.x*0.7;\n        #else\n        t += tmp.x;\n        #endif\n        if( tmp.x<(0.001*t) || t>tmax ) break;\n    }\n\n    return vec4( t, res );\n}\n\nvec3 calcNormal( in vec3 pos, in float t )\n{\n    vec2 eps = vec2( 0.005*t, 0.0 );\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<50; i++ )\n    {\n        float h = map(ro + rd*t).x;\n        res = min( res, k*h/t );\n\t\tt += clamp( h, 0.5, 1.0 );\n\t\tif( h<0.001 ) break;\n    }\n    return clamp(res,0.0,1.0);\n}\n\n// Oren-Nayar\nfloat diffuse( in vec3 l, in vec3 n, in vec3 v, float r )\n{\n    float r2 = r*r;\n    float a = 1.0 - 0.5*(r2/(r2+0.57));\n    float b = 0.45*(r2/(r2+0.09));\n    float nl = dot(n, l);\n    float nv = dot(n, v);\n    float ga = dot(v-n*nv,n-n*nl);\n\treturn max(0.0,nl) * (a + b*max(0.0,ga) * sqrt((1.0-nv*nv)*(1.0-nl*nl)) / max(nl, nv));\n}\n\nvec3 cpath( float t )\n{\n\tvec3 pos = vec3( 0.0, 0.0, 95.0 + t );\n\t\n\tfloat a = smoothstep(5.0,30.0,t);\n\tpos.xz += a*150.0 * cos( vec2(5.0,6.0) + 1.0*0.01*t );\n\tpos.xz -= a*150.0 * cos( vec2(5.0,6.0) );\n\tpos.xz += a* 50.0 * cos( vec2(0.0,3.5) + 6.0*0.01*t );\n\tpos.xz -= a* 50.0 * cos( vec2(0.0,3.5) );\n\n\treturn pos;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n// https://iquilezles.org/articles/filteringrm\nvoid calcDpDxy( in vec3 ro, in vec3 rd, in vec3 rdx, in vec3 rdy, in float t, in vec3 nor, out vec3 dpdx, out vec3 dpdy )\n{\n    dpdx = t*(rdx*dot(rd,nor)/dot(rdx,nor) - rd);\n    dpdy = t*(rdy*dot(rd,nor)/dot(rdy,nor) - rd);\n}\n\n\n#define ZERO min(iFrame,0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n        float time = iTime - (0.5/30.0)*float(m*AA+n)/float(AA*AA);\n#else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n        float time = iTime;\n#endif\n\n        vec2 m = vec2(0.0);\n        if( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy;\n\n        //-----------------------------------------------------\n        // camera\n        //-----------------------------------------------------\n\n        float an = 0.5*(time-5.0);// + 12.0*(m.x-0.5);\n        vec3 ro = cpath( an + 0.0 );\n        vec3 ta = cpath( an + 10.0 *1.0);\n        ta = mix( ro + vec3(0.0,0.0,1.0), ta, smoothstep(5.0,25.0,an) );\n        ro.y = terrain2( ro.xz ) - 0.5;\n        ta.y = ro.y - 0.1;\n        ta.xy += step(0.01,m.x)*(m.xy-0.5)*4.0*vec2(-1.0,1.0);\n        float rl = -0.1*cos(0.05*6.2831*an);\n        float fl = 2.0;\n        // camera to world transform    \n        mat3 cam = setCamera( ro, ta, rl );\n\n        // ray\n        vec3 rd = normalize( cam * vec3(p.xy,fl) );\n\n        // ray differentials\n        vec2 px = (-iResolution.xy+2.0*(fragCoord.xy+vec2(1.0,0.0)))/iResolution.y;\n        vec2 py = (-iResolution.xy+2.0*(fragCoord.xy+vec2(0.0,1.0)))/iResolution.y;\n        vec3 rdx = normalize( cam * vec3(px,fl) );\n        vec3 rdy = normalize( cam * vec3(py,fl) );\n        vec3 drddx = rdx - rd;\n        vec3 drddy = rdy - rd;\n\n\n        //-----------------------------------------------------\n        // render\n        //-----------------------------------------------------\n\n        const vec3 klig = normalize(vec3(-1.0,0.19,0.4));\n\n        float sun = clamp(dot(klig,rd),0.0,1.0 );\n\n        vec3 hor = mix( 1.2*vec3(0.70,1.0,1.0), vec3(1.5,0.5,0.2), 0.25+0.75*sun );\n\n        vec3 col = mix( vec3(0.2,0.6,.9), hor, exp(-(4.0+2.0*(1.0-sun))*max(0.0,rd.y-0.1)) );\n        col *= 0.5;\n        col += 0.8*vec3(1.0,0.8,0.7)*pow(sun,512.0);\n        col += 0.2*vec3(1.0,0.4,0.2)*pow(sun,32.0);\n        col += 0.1*vec3(1.0,0.4,0.2)*pow(sun,4.0);\n\n        vec3 bcol = col;\n\n        // clouds\n        float pt = (1000.0-ro.y)/rd.y; \n        if( pt>0.0 )\n        {\n            vec3 spos = ro + pt*rd;\n            float clo = texture( iChannel0, 0.00006*spos.xz ).x;\t\n            vec3 cloCol = mix( vec3(0.4,0.5,0.6), vec3(1.3,0.6,0.4), pow(sun,2.0))*(0.5+0.5*clo);\n            col = mix( col, cloCol, 0.5*smoothstep( 0.4, 1.0, clo ) );\n        }\n\n        // raymarch\n        float tmax = 120.0;\n\n        // bounding plane    \n        float bt = (0.0-ro.y)/rd.y; \n        if( bt>0.0 ) tmax = min( tmax, bt );\n\n        vec4 tmat = raycast( ro, rd, tmax);\n        if( tmat.x<tmax )\n        {\n            // geometry\n            vec3 pos = ro + tmat.x*rd;\n            vec3 nor = calcNormal( pos, tmat.x );\n            vec3 ref = reflect( rd, nor );\n            vec3 dposdx = tmat.x*drddx;\n            vec3 dposdy = tmat.x*drddy;\n            calcDpDxy( ro, rd, rdx, rdy, tmat.x, nor, dposdx, dposdy );\n\n            float occ = smoothstep( 0.0, 1.5, pos.y + 11.5 ) * (1.0 - displacement( 0.25*pos*vec3(1.0,4.0,1.0) ));\n\n            // materials\n            vec4 mate = vec4(0.5,0.5,0.5,0.0);\n\n            //if( tmat.z<0.5 )\n            {\n                vec3 bnor;\n                float be = 1.0/1024.0;\n                float bf = 0.4;\n                bnor.x = texcubeGrad( iChannel0, bf*pos+vec3(be,0.0,0.0), nor, bf*dposdx, bf*dposdy ).x - texcubeGrad( iChannel0, bf*pos-vec3(be,0.0,0.0), nor, bf*dposdx, bf*dposdy ).x;\n                bnor.y = texcubeGrad( iChannel0, bf*pos+vec3(0.0,be,0.0), nor, bf*dposdx, bf*dposdy ).x - texcubeGrad( iChannel0, bf*pos-vec3(0.0,be,0.0), nor, bf*dposdx, bf*dposdy ).x;\n                bnor.z = texcubeGrad( iChannel0, bf*pos+vec3(0.0,0.0,be), nor, bf*dposdx, bf*dposdy ).x - texcubeGrad( iChannel0, bf*pos-vec3(0.0,0.0,be), nor, bf*dposdx, bf*dposdy ).x;\n                bnor = normalize(bnor);\n                float amo = 0.2  + 0.25*(1.0-smoothstep(0.6,0.7,nor.y) );\n                nor = normalize( nor + amo*(bnor-nor*dot(bnor,nor)) );\n                vec3 te = texcubeGrad( iChannel0, 0.15*pos, nor, 0.15*dposdx, 0.15*dposdy ).xyz;\n\n\n                te = 0.05 + te;\n                mate.xyz = 0.6*te;\n                mate.w = 1.5*(0.5+0.5*te.x);\n                float th = smoothstep( 0.1, 0.4, texcubeGrad( iChannel0, 0.002*pos, nor, 0.002*dposdx, 0.002*dposdy ).x );\n                vec3 dcol = mix( vec3(0.2, 0.3, 0.0), 0.4*vec3(0.65, 0.4, 0.2), 0.2+0.8*th );\n                mate.xyz = mix( mate.xyz, 2.0*dcol, th*smoothstep( 0.0, 1.0, nor.y ) );\n                mate.xyz *= 0.5;\n                float rr = smoothstep( 0.2, 0.4, texcubeGrad( iChannel1, 0.04*pos, nor, 0.04*dposdx, 0.04*dposdy ).y );\n                mate.xyz *= mix( vec3(1.0), 1.5*vec3(0.25,0.24,0.22)*1.5, rr );\n                mate.xyz *= 1.5*pow(texcubeGrad( iChannel3, 8.0*pos, nor, 8.0*dposdx, 8.0*dposdy ).xyz,vec3(0.5));\n                mate = mix( mate, vec4(0.7,0.7,0.7,.0), smoothstep(0.8,0.9,nor.y + nor.x*0.6*te.x*te.x ));\n\n                mate.xyz *= 1.5;\n            }\n\n            vec3 blig = normalize(vec3(-klig.x,0.0,-klig.z));\n            vec3 slig = vec3( 0.0, 1.0, 0.0 );\n\n            // lighting\n            float sky = 0.0;\n            sky += 0.2*diffuse( normalize(vec3( 0.0, 1.0, 0.0 )), nor, -rd, 1.0 );\n            sky += 0.2*diffuse( normalize(vec3( 3.0, 1.0, 0.0 )), nor, -rd, 1.0 );\n            sky += 0.2*diffuse( normalize(vec3(-3.0, 1.0, 0.0 )), nor, -rd, 1.0 );\n            sky += 0.2*diffuse( normalize(vec3( 0.0, 1.0, 3.0 )), nor, -rd, 1.0 );\n            sky += 0.2*diffuse( normalize(vec3( 0.0, 1.0,-3.0 )), nor, -rd, 1.0 );\n            float dif = diffuse( klig, nor, -rd, 1.0 );\n            float bac = diffuse( blig, nor, -rd, 1.0 );\n            float sha = 0.0; if( dif>0.001 ) sha=softshadow( pos+0.01*nor, klig, 0.005, 64.0 );\n            float spe = mate.w*pow( clamp(dot(reflect(rd,nor),klig),0.0,1.0),2.0)*clamp(dot(nor,klig),0.0,1.0);\n\n            // lights\n            vec3 lin = vec3(0.0);\n            lin += 7.0*dif*vec3(1.20,0.50,0.25)*vec3(sha,sha*0.5+0.5*sha*sha, sha*sha );\n            lin += 1.0*sky*vec3(0.10,0.50,0.70)*occ;\n            lin += 2.0*bac*vec3(0.30,0.15,0.15)*occ;\n            lin += 0.5*vec3(spe)*sha*occ;\n\n            // surface-light interacion\n            col = mate.xyz * lin;\n            col *= 1.4/(1.0+col); // ugly trick\n\n            // fog\n            bcol = 0.7*mix( vec3(0.2,0.5,1.0)*0.82, bcol, 0.15+0.8*sun );\n            col = mix( col, bcol, 1.0-exp(-0.02*tmat.x) );\t\t\n        }\n\n        col += 0.15*vec3(1.0,0.9,0.6)*pow( sun, 6.0 );\n\n        //-----------------------------------------------------\n        // postprocessing\n        //-----------------------------------------------------\n        col *= 1.0 - 0.25*pow(1.0-clamp(dot(cam[2],klig),0.0,1.0),3.0);\n\n\n\n        col = pow( max(col,0.0), vec3(0.45) );\n\n        col *= vec3(1.1,1.0,1.0);\n        col = clamp(col,0.0,1.0);\n        col = col*col*(3.0-2.0*col);\n        col = pow( col, vec3(0.9,1.0,1.0) );\n\n        col = mix( col, vec3(dot(col,vec3(0.333))), 0.4 );\n        col = col*0.5+0.5*col*col*(3.0-2.0*col);\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n    \n\t\n\tvec2 q = fragCoord.xy / iResolution.xy;\n\ttot *= 0.3 + 0.7*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\n    tot *= smoothstep(0.0,2.5,iTime);\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}