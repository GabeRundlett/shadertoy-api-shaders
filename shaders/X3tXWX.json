{
    "Shader": {
        "info": {
            "date": "1719711876",
            "description": "This is my first shader here, i have used c++ in the past but i dont have any experience with shaders but i was inspired by a video i saw by kishimisu.\n\nA shader inspiered by the game pong.",
            "flags": 0,
            "hasliked": 0,
            "id": "X3tXWX",
            "likes": 5,
            "name": "Pong",
            "published": 3,
            "tags": [
                "animation",
                "pong",
                "neon",
                "relaxing"
            ],
            "usePreview": 0,
            "username": "BJ",
            "viewed": 114
        },
        "renderpass": [
            {
                "code": "const float pi = 3.14159;\n\n// makes a triangle function which basicly just goes from -1 to 1 and then back to -1 forever in a loop.\nfloat TriangleWaveFunction(float x)\n    {\n        return (acos(cos(x*pi))/pi -0.5)*2.0;\n    }\n\n// a sine wave modified to have the same peaks as the triangle wave.\nfloat SineWave(float x)\n    {\n        return sin(x * pi + (pi/2.0)*3.0);\n    }\n\nfloat dist(vec2 Ball, vec2 PixelCord) \n    {\n        return sqrt(pow(Ball.x - PixelCord.x, 2.0) + pow(Ball.y - PixelCord.y, 2.0));\n    }\n\n// this sdf was made by iq, not me.\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    //pixel coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv*= 2.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 BallPos = vec2(TriangleWaveFunction(iTime)*1.4, TriangleWaveFunction(iTime)*0.6*-1.0);\n    float BallFace = step(dist(BallPos, uv),0.1);\n    \n    float RacketOffsetX = 1.6;\n    vec2 RacketPosY = vec2(SineWave(iTime), 0.5);\n    float RacketWidth = 0.005;\n    float RacketHeight = 0.25;\n    \n    float RacketFaceLeft = sdBox(vec2(uv.x+RacketOffsetX, uv.y +SineWave(iTime)*0.6), vec2(RacketWidth, RacketHeight));\n    float RacketFaceRight = sdBox(vec2(uv.x-RacketOffsetX, uv.y +SineWave(iTime*2.0)*0.6*-1.0), vec2(RacketWidth, RacketHeight));\n\n    float RacketFace = max(step(RacketFaceLeft, 0.1),step(RacketFaceRight, 0.1));\n    // Time varying pixel color\n    vec3 ColVaraity = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col = vec3(step(0.0, uv.x)*(uv.x+0.2), 0.0, step(uv.x, 0.0)*(abs(uv.x)+0.2));\n    \n    col += ColVaraity*0.5;\n    float GlobalFaces = max(BallFace, RacketFace);\n    \n    col *= GlobalFaces;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}