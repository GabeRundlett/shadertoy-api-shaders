{
    "Shader": {
        "info": {
            "date": "1621908672",
            "description": "Made with creative direction from my sister. ",
            "flags": 0,
            "hasliked": 0,
            "id": "7tf3Dr",
            "likes": 13,
            "name": "Twisting Skies",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "sun",
                "ocean",
                "twist",
                "reflective",
                "pillar",
                "chains"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 394
        },
        "renderpass": [
            {
                "code": "#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define pi 3.141596\n#define STEPS 200.0\n#define MDIST 250.0\n#define pmod(p,x) (mod(p, x) - (x)*0.5)\n\nvec3 g1 = vec3(0);\nfloat donut( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nvec2 map2(vec3 p){\n    vec3 po = p;\n    float t = iTime*0.2;\n\n    vec2 a = vec2(1);\n    a.x = donut(p,vec2(2,0.5));\n    vec2 b = vec2(2);\n    p.yz*=rot(pi/2.0);\n    b.x = donut(p+vec3(2.5,0,0),vec2(2,0.5));\n    \n    //Colors\n    a.y = mix(1.0,2.0,clamp(30.0*sin(p.y*7.0+t*3.0),0.0,1.0));\n    vec3 p2 = p;\n    p2+=t*4.0;\n    b.y = mix(1.0,2.0,step(sin((p2.x)*10.0)*sin((p2.y)*10.0)*sin((p2.z)*10.0),-0.5));\n\n    b = (b.x < a.x) ? b:a;\n    \n    a = vec2(donut(p+vec3(-2.5,0,0),vec2(2,0.5)),3.0);\n    g1 += 0.05/(0.5+abs(a.x))*vec3(1.000,0.588,0.122);\n    b = (b.x < a.x) ? b:a;\n    \n    return b;\n}\nvec2 map3(vec3 p){\n    vec3 po = p;\n    float sep = 15.0;\n    p.x = pmod(p.x,sep);\n    vec2 a = map2(p);\n    p = po;\n    p.x+=sep*0.5;\n    p.x = pmod(p.x,sep);\n    p.zy*=rot(pi/2.0);\n    vec2 b = map2(p);\n    b = (b.x < a.x) ? b:a;\n    return b;\n}\nvec2 map(vec3 p){\n    vec3 po2 = p;\n    p.zy*=rot(pi/2.0);\n    \n    \n    vec3 po = p;\n    float t = iTime;\n    p.y+=6.0;\n    float th = atan(po.y,po.x)/(2.0*pi)+0.5;\n    float r = length(po.yx)-10.;\n    th*=60.0;\n    p.y = r;\n    p.x = th;\n    p.x+=t*9.0;\n    vec2 a = map3(p);\n    \n    po.xy*=rot(p.z*0.05);\n    //Big rings\n    float size = 15.0;\n    vec3 p2 = po; \n    \n    p2.xy = abs(p2.xy)-vec2(1,1)*4.5;\n    p2.xy*=rot(-0.9);\n    p2.y-=size*10.0;\n    p2.xz*=rot(pi/2.0);\n    p2.xy*=rot(t*0.2);\n    p = p2;\n    \n    th = atan(p2.y,p2.x)/(2.0*pi)+0.5;\n    \n    r = length(p2.yx)-10.0*size;\n    th*=60.0*size;\n    p.y = r;\n    p.x = th;\n\n    \n    vec2 b = map3(p);\n    b.x*=0.7;\n    b = (b.x < a.x) ? b:a;\n    \n    //Cut Cynlinder\n    p = po;\n    a.x = length(p.xy)-50.0;\n    a.y = 2.0;\n    b.x = max(a.x,b.x);\n\n    p.z+=sin(p.x+t*6.0)*0.025;\n    p.z+=sin(p.y+t*6.0)*0.02;\n    a = vec2(length(p.z),4.0);\n    b = (b.x < a.x) ? b:a;\n\n    //Pillars\n    p = po2;\n    p.xz = abs(p.xz)-vec2(70);\n    a = vec2(length(p.xz)-6.5,5.0);\n    a.x*=0.7;\n    b = (b.x < a.x) ? b:a;\n    \n    return b;\n}\n\n\nvec3 norm(vec3 p){\n    vec2 e= vec2(0.0005,0);\n    return normalize(map(p).x-vec3(\n    map(p-e.xyy).x,\n    map(p-e.yxy).x,\n    map(p-e.yyx).x));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    float t = iTime;\n    float t2 = t*0.05;\n    float outside = 80.0;\n    \n    vec2 off = vec2(outside*sin(t2),outside*cos(t2));\n    \n    vec3 ro = vec3(off.x,8.0,off.y);\n    vec3 lk = vec3(0,14,0);\n    vec3 f = normalize(lk-ro);\n    vec3 ra = normalize(cross(vec3(0,1,0),f));\n    vec3 rd = f*1.0+uv.x*ra+uv.y*cross(f,ra);\n    vec3 p = ro;\n    float shad = 0.0;\n    float dO = 0.0;\n    float dO2;\n    vec2 d;\n    float bnc = 0.0;\n    float dist = 0.0;\n    for(float i = 0.0; i < STEPS; i++){\n        p = ro+rd*dO;\n        d = map(p);\n        d.x = abs(d.x);\n        if(abs(d.x) < 0.001) {\n            if(d.y==3.0) {\n               d.x=0.1;\n            }\n            else{\n            shad = (i)/(STEPS);\n            if(bnc == 0.0)dist=dO;\n            if(bnc== 1.0||d.y!=4.0) {shad=i/STEPS; break; d.y = 0.0;}\n            ro += rd*dO;\n            vec3 n = norm(ro);\n            rd = reflect(rd,n);\n            ro += 0.1;\n            dO = 0.0;\n            i=0.0;\n            bnc++;\n            }\n            \n        }\n        if(dO2>MDIST){\n        if(bnc==0.0)p = ro+rd*MDIST;\n        d.y = 0.0;\n        break;\n        }\n        dO += d.x;\n        dO2 += d.x;\n    }\n    vec3 po = p;\n    p.y-=5.0;\n    vec3 sky = mix(vec3(0.012,0.490,0.647),vec3(0.145,0.118,0.522),clamp(p.y*0.01,0.0,1.0));\n    sky = mix(sky,vec3(1.000,0.773,0.141) * clamp(pow(abs(1.0 / (100.0 * length(p.xy*0.0004))),3.0),0.0,0.9),\n    pow(abs(1.0 / (100.0 * length(p.xy*0.0004))),3.9));\n    p=po;\n    vec3 al = vec3(0);\n    if(d.y!=0.0)shad = 1.0-shad;\n    if(d.y==1.0){\n    al = vec3(0.310,0.122,1.000);\n    }\n    if(d.y==2.0) {\n    al = vec3(1.000,0.588,0.122);\n    }\n    if(d.y==5.0) {\n    al = vec3(0.8);\n    }\n    if(d.y==4.0) {\n    al = sky;\n    }\n    vec3 n = norm(p);\n    vec3 ld = vec3(1,1,-1);\n    float spec = pow(max(dot(n,normalize(-rd)),0.0),30.0);\n    col = vec3(shad)*al;\n    if(d.y!=0.0&&d.y!=5.0){\n    col+=spec;\n    }\n    if(d.y==5.0){\n    col+=spec*0.2;\n    }\n    if(d.y==0.0)col = mix(col,sky,clamp(dO2/200.0,0.0,1.0));\n    col += min(g1*0.25,1.0);\n    \n\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}