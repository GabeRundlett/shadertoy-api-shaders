{
    "Shader": {
        "info": {
            "date": "1579466991",
            "description": "A shadertoy port of my Graphics entry at Synchrony 2020. Placed 1st out of 4 entries.\n\nDownload the original executable version here: [url]https://www.pouet.net/prod.php?which=84621[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "tly3z3",
            "likes": 77,
            "name": "Long Way From Home",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "snow",
                "pathtraced"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 2253
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n    vec4 tex = texture(iChannel0,uv);\n    \n    // divide by sample-count\n\tvec3 color = tex.rgb/tex.a;\n    \n    #if !GRADING\n    fragColor.rgb=color;return;\n    #endif\n    \n\t// vignette to darken the corners\n\tuv-=.5;\n\tcolor *= mix(vec3(.6,.9,1),vec3(1),1.-dot(uv,uv)*.75);\n\n\t// exposure\n\tcolor *= 2.5;\n\n\t// tonemap\n\tcolor /= color+1.;\n\n\t// gamma correction\n\tcolor = pow(color, vec3(.45));\n\n\t// grading\n\t{\n\t\t// make it pop\n\t\tcolor = smoothstep(.3,1.,color);\n\n\t\t// cold tint\n\t\tcolor = pow(color,vec3(1,1.05,1.1).bgr);\n\t}\n\t    \n\tfragColor = vec4(color,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi (acos(-1.))\n\nmat2 rotate(float b)\n{\n    float c = cos(b);\n    float s = sin(b);\n    return mat2(c,-s,s,c);\n}\n\nvec2 hash2( const float n ) {\n\treturn fract(sin(vec2(n,n+1.))*vec2(43758.5453123));\n}\n\nint m;\n\nfloat footprint(vec2 p)\n{\n    vec2 h = vec2(0.125,0);\n    vec2 q = p - clamp( p, -h, h );\n    return length(q.xy);\n}\n\nfloat ridges(vec2 p)\n{\n    return smoothstep(.5,1.,cos(p.x*10.))*1.5 + sin(p.x*100.)*.5+.5;\n}\n\nfloat scene(vec3 p)\n{\n    float d = 1e9;\n    \n    // bounce-light orb\n    d=min(d,length(p-vec3(0,5,0))-2.5);\n    \n    // light direction debug orb\n    //d=min(d,length(p-vec3(0,.5,0))-.5);\n\n    // poles\n    vec3 r=p;\n    r.x=abs(r.x-1.1)-.2;\n    float dpole = max(length(r.xz+vec2(0,5.))-.01,r.y-5.);\n\n    vec3 q=p;\n    if(p.y <.3){\n    \t// snow roughness\n\t\tp.y += texture(iChannel1,p.xz*.125).r*.0009;\n\t\tp.y += texture(iChannel1,p.xz*2.*.125).r*.0011;\n\t\tp.y += texture(iChannel1,p.xz*4.*.125).r*.0021;\n\t    p.y += texture(iChannel1,p.xz*4.*.0625).r*.0051;\n\t    p.y += texture(iChannel1,p.xz*4.*.03125).r*.01;\n        p.y += sin(p.x*2.)*.05;\n        \n        // gentle curvature\n        p.y -= length(sin(p.xz*.5))*.1;\n\n        \n        // footprint meandering\n        p.z += sin(p.x*.5)*.5;\n        \n        // footprint zigzag\n        p.z += step(.5,mod(p.x,1.))*.3-.15;\n        \n        // footprints\n        float depth = .03;\n        p.x = mod(p.x,.5)-.25;\n        float dfoot = footprint(p.xz);\n        float foot = smoothstep(.1,.13,dfoot);\n        p.y += .1- foot*depth;\n        \n        // raised snow around footprints\n        p.y -= smoothstep(.05,.0,abs(dfoot-.16))*.004;\n        \n        // footprint stripe pattern\n        p.y -= (1.-foot)*.01*ridges(p.xz);\n        \n    }\n    \n    // extra mounds\n    p.y -= smoothstep(2.,0.,length(q.xz+vec2(-1.5,3.5)))*.2;\n    p.y -= smoothstep(2.,0.,length(q.xz+vec2(1,-2)))*.2;\n    \n    // floor\n    float ground = p.y;\n    d=min(d,ground);\n    \n    m=(dpole<d)?1:0;\n    d=min(d,dpole);\n    \n    return d*.9;\n}\n\nvec2 rv2;\n\nvec3 ortho(vec3 a){\n    vec3 b=cross(vec3(-1,-1,-1),a);\n    // assume b is nonzero\n    return (b);\n}\n\n// various bits of lighting code \"borrowed\" from \n// http://blog.hvidtfeldts.net/index.php/2015/01/path-tracing-3d-fractals/\nvec3 getSampleBiased(vec3  dir, float power) {\n\tdir = normalize(dir);\n\tvec3 o1 = normalize(ortho(dir));\n\tvec3 o2 = normalize(cross(dir, o1));\n\tvec2 r = rv2;\n\tr.x=r.x*2.*pi;\n\tr.y=pow(r.y,1.0/(power+1.0));\n\tfloat oneminus = sqrt(1.0-r.y*r.y);\n\treturn cos(r.x)*oneminus*o1+sin(r.x)*oneminus*o2+r.y*dir;\n}\n\nvec3 getSample(vec3 dir) {\n\treturn getSampleBiased(dir,0.0);\n}\n\nvec3 getCosineWeightedSample(vec3 dir) {\n\treturn getSampleBiased(dir,1.0);\n}\n\nvec3 getConeSample(vec3 dir, float extent) {\n\tdir = normalize(dir);\n\tvec3 o1 = normalize(ortho(dir));\n\tvec3 o2 = normalize(cross(dir, o1));\n\tvec2 r =  rv2;\n\tr.x=r.x*2.*pi;\n\tr.y=1.0-r.y*extent;\n\tfloat oneminus = sqrt(1.0-r.y*r.y);\n\treturn cos(r.x)*oneminus*o1+sin(r.x)*oneminus*o2+r.y*dir;\n}\n\nvec3 sky(vec3 dir) {\n\treturn vec3(1,2,3)*.2;\n}\n\nbool trace(vec3 cam, vec3 dir, out vec3 h, out vec3 n, out float k) {\n\tfloat t=0.;\n    for(int i=0;i<100;++i)\n    {\n        k = scene(cam+dir*t);\n        t += k;\n        if (abs(k) < .004)\n            break;\n    }\n\n    h = cam+dir*t;\n\t\n    // if we hit something\n    if(abs(k)<.004)\n    {\n        vec2 o = vec2(.001, 0);\n        k=scene(h);\n        n = normalize(vec3(\n            scene(h+o.xyy) - k,\n            scene(h+o.yxy) - k,\n            scene(h+o.yyx) - k \n        ));\n        return true;\n    }\n    return false;\n}\n\nvec3 trace(vec3 cam, vec3 dir)\n{\n    float mouseX = (iMouse.x/iResolution.x);\n    float mouseY = (iMouse.y/iResolution.y);\n    \n    mouseX = 0.65;\n    mouseY = 0.18;\n    \n    vec3 sunDirection = normalize(vec3(\n        (mouseX-.5)*2.,\n        mouseY*2.,\n        -1\n    ));\n    const float sunSize = 1e-4;\n    const vec3 sunColor = vec3(1.,.6,.2)*2.;\n    \n    vec3 accum = vec3(1);\n    vec3 direct=vec3(0);\n    for(int ibounce=0;ibounce<10;++ibounce)\n    {\n        vec3 h,n;\n        float k;\n        if (trace(cam,dir,h,n,k))\n        {\n            #if !SHADING\n            return n*.5+.5;\n            #endif\n            vec3 albedo = vec3(1);\n            \n            // pole material\n            if (m==1) {\n                albedo = vec3(0.7);\n            }\n            \n            cam = h+n*.002;\n            dir=getSampleBiased(n,1.);\n            accum*=albedo;\n             \n            vec3 sunSampleDir = getConeSample(sunDirection,sunSize);\n            float sunLight = dot(n, sunSampleDir);\n            vec3 dummy0,dummy1;\n            float dummy2;\n            if (sunLight>0.0 && !trace(h + n*.002,sunSampleDir,dummy0,dummy1,dummy2)) {\n                direct += accum*sunLight*sunColor;\n            }\n            \n            rv2=hash2(rv2.y);\n        }\n        else if (abs(k) > .1) {\n            return direct + sky(dir) * accum;\n        } else {\n            break;\n        }\n    }\n    \n    return vec3(0);\n}\n\nvec2 bokeh(){\n\tvec2 a=rv2;\n    if(a.y>a.x)\n        a=1.-a;\n    a.y*=pi*2./a.x;\n    return a.x*vec2(cos(a.y),sin(a.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // recover previous frame for iterative rendering\n   \tfragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\t\n    \n    // get UVs\n    vec2 uv = fragCoord.xy/iResolution.xy-.5;\n    \n    // seed per-pixel\n    float seed = iTime+(uv.x+iResolution.x*uv.y)*1.51269341231;\n\trv2 = hash2( seed );\n  \n    // jitter for antialiasing\n    uv += (rv2-.5)/iResolution.xy;\n    \n    // correct UVs for aspect ratio\n    uv.x*=iResolution.x/iResolution.y;\n\n    // camera params\n    const vec3 camPos = vec3(-4,2,3);\n    const vec3 lookAt = vec3(0,0,0);\n    const float focusDistance=distance(camPos,lookAt);\n    const vec2 apertureRadius=vec2(1,2)*.015;\n   \n    // make a camera\n    vec3 cam = vec3(0);\n    vec3 dir = normalize(vec3(uv,2.));\n    \n    // slight bokeh\n    #if BOKEH\n    vec2 bokehJitter=bokeh();\n    cam.xy+=bokehJitter*apertureRadius;\n    dir.xy-=bokehJitter*apertureRadius*dir.z/focusDistance;\n    #endif\n\n    // rotate/move the camera\n    vec3 lookDir = lookAt-camPos;\n    float pitch = -atan(lookDir.y,length(lookDir.xz));\n    float yaw = -atan(lookDir.x,lookDir.z);\n    cam.yz *= rotate(pitch);\n    dir.yz *= rotate(pitch);\n    cam.xz *= rotate(yaw);\n    dir.xz *= rotate(yaw);\n    cam += camPos;\n    \n    // compute the pixel color\n\tvec4 pixel = vec4(trace(cam,dir),1);\n    \n    if (iMouse.z > 0.) {\n        fragColor = vec4(0);\n    }\n    \n    if (!isnan(pixel.r) && pixel.r >= 0.)\n\t    fragColor += pixel;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SHADING 1\n#define BOKEH 1\n#define GRADING (SHADING && 1)\n\n/*\n+--------------------------------------+\n|                                      |\n|         \"Long Way From Home\"         |\n|            by yx/Polarity            |\n|                                      |\n|       4kb executable graphics        |\n|      released at Synchrony 2020      |\n|         in the graphics compo        |\n|                                      |\n|      should take no longer than      |\n|        five seconds to render        |\n|                                      |\n|             created with             |\n|    crinkler 2.1a by loonies & tbc    |\n|        shader minifier by llb        |\n|                                      |\n|          greetings to:               |\n|           alkama                     |\n|            blackle                   |\n|             cpdt                     |\n|              evvvvil                 |\n|               fizzer                 |\n|                flopine               |\n|                 noby                 |\n|                  nusan               |\n|                   slerpy             |\n|                    tdhooper          |\n|                                      |\n+--------------------------------------+\n*/",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}