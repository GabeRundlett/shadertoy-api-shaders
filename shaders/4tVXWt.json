{
    "Shader": {
        "info": {
            "date": "1486497380",
            "description": "Turlututu",
            "flags": 32,
            "hasliked": 0,
            "id": "4tVXWt",
            "likes": 5,
            "name": "Turlututu Tryptich",
            "published": 3,
            "tags": [
                "turlututu",
                "tryptich"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 506
        },
        "renderpass": [
            {
                "code": "//Motion blur from mu6k: https://www.shadertoy.com/view/lsyXRK\n\nvec2 totex(vec2 p)\n{\n    p.x=p.x*iResolution.y/iResolution.x+0.5;\n    p.y+=0.5;\n    return p; \n}\n\nvec3 sample_color(vec2 p)\n{\n    return texture(iChannel2, totex(p)).xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 p = (fragCoord.xy - iResolution.xy*.5) / iResolution.yy;\n    \n    vec4 fb = texture(iChannel2, uv);\n    \n    float amp =1./fb.w*0.01;\n    vec4 noise = texture(iChannel0, (fragCoord+floor(iTime*vec2(12.0,56.0)))/64.0);\n\t\n   \tvec3 col = vec3(0.0);\n    col += sample_color(p*((noise.x+2.0)*amp+1.0));\n    col += sample_color(p*((noise.y+1.0)*amp+1.0));\n    col += sample_color(p*((noise.z+0.0)*amp+1.0));\n    col += sample_color(p*((noise.w-1.0)*amp+1.0));\n    col += sample_color( p*((noise.x-2.0)*amp+1.0));\n    col *= 0.2;\n    col.y*=1.2;\n    col=pow(clamp(col,0.0,1.0),vec3(0.45)); \n    col=mix(col, vec3(dot(col, vec3(0.33))), -0.5);\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\nmat3 RotX(float a){a = radians(a); return mat3(1.,0.,0.,0.,cos(a),-sin(a),0.,sin(a),cos(a));}\nmat3 RotY(float a){a = radians(a); return mat3(cos(a),0.,sin(a),0.,1.,0.,-sin(a),0.,cos(a));}\nmat3 RotZ(float a){a = radians(a); return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\n\nvec2 path(float t, vec2 s)\n{\n\tvec2 p = vec2(cos(t*0.2), sin(t*-0.2)) * s * 2.;\n\tt *= 0.1;\n\tp *= mat2(cos(t),-sin(t),sin(t), cos(t));\n\treturn p;\n}\n\n// base torus => length(vec2(length(p.xy)-1.,p.z))-0.2\n\nfloat getTutu(vec3 p)\n{\n    p.z = abs(fract(p.z)-0.5); // repeat along z\n\tfloat x = length(p.xy)-0.62; // x side => circle size\n\tfloat y = max(abs(p.y),abs(p.z))-0.5; // y side => square size\n\tfloat z = max(abs(p.x),abs(p.z))-0.5; // z side => square size\n\treturn length(vec3(x,y,z))-0.15; // thick\n}\n\nvec2 df(vec3 p)\n{\n    p.xy -= path(p.z*1.2,vec2(0.,-1.2));\n    vec2 res = vec2(getTutu(p), 0.);\n    \n\tp.xy -= path(p.z,vec2(-1.5,0.8));\n    float tutu1 = getTutu(p);\n    if (res.x > tutu1)\n        res = vec2(tutu1, 1.);\n    \n\tp.xy -= path(p.z,vec2(0.8,1.5));\n\tfloat tutu2 = getTutu(p);\n    if (res.x > tutu2)\n        res = vec2(tutu2, 2.);\n    \n    return res;\n}\n\nvec3 nor(vec3 p, float prec)\n{\n\tvec3 e = vec3(prec,0,0);\n\treturn normalize(vec3(\n\t\tdf(p+e.xyz).x-df(p-e.xyz).x,\n\t\tdf(p+e.yxz).x-df(p-e.yxz).x,\n\t\tdf(p+e.yzx).x-df(p-e.yzx).x));\n}\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n    vec2 gc = fragCoord.xy;\n\tvec2 si = iResolution.xy;\n    \n\tfloat w3 = si.x / 3.;\n    \n    vec2 gs = gc / si;\n    \n    if (gs.x < 1./3.)\n    \tsi.x = w3;\n\tif (gs.x > 2./3.)\n    \tsi.x = w3*5.;\n    \n\tvec2 uv = (gc+gc-si)/si.y;\n\t\n    float t = iTime;\n\tfloat an = t * 7.;\n\tfloat di = 2.88;\n\tfloat el = 0.42;\n\t\n\tvec3 ro = vec3(0,0,an);\n    \n    if (gs.x < 1.)\n    \tro.xy += path(ro.z*1.2,vec2(0.,-1.2)); // tutu 0\n    if (gs.x < 2./3.)\n    \tro.xy += path(ro.z,vec2(-1.5,0.8)); // tutu 1\n\tif (gs.x < 1./3.)\n    \tro.xy += path(ro.z,vec2(0.8,1.5)); // tutu 2\n    \n    vec3 lpi = vec3(0,0,an + 1.);\n    lpi.xy += path(lpi.z,vec2(0.2,0.2)); // tutu 0\n    lpi.xy += path(lpi.z,vec2(-1.5,0.8)); // tutu 1\n\tlpi.xy += path(lpi.z,vec2(0.8,1.5)); // tutu 2\n    \n\tvec3 cv = ro + vec3(0,0,0.1);  \n\tvec3 cu = vec3(0,1,0);\n    \n\tvec3 z = normalize(cv-ro);\n\tvec3 x = (cross(cu,z));\n\tvec3 y = (cross(z,x));\n\tvec3 rd = normalize(3. * (uv.x * x + uv.y * y) + z);\n\t\n\tfloat d = 0., s = 1.;\n\tfor (int i=0; i< 200; i++)\n\t{\n\t\tif (log(d*d/s/1e5)>0.) break;\n\t\ts = df(ro+rd*d).x;\n\t\td += s * 0.5;\n    }\n\t\n    if (d<50.)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n    {\n        vec3 n = nor(ro+rd*d, 0.1);\n\t\tfragColor = texture(iChannel1, n);\n        \n        float mat = df(ro+rd*d).y;\n        if (mat < .5)\n            fragColor *= vec4(0.8,0.1,0.1,1);\n        else if (mat < 1.5)\n            fragColor *= vec4(0.8,0.8,0.8,1);\n        else if (mat < 2.5)\n            fragColor *= vec4(0.1,0.1,0.8,1);\n    }       \n    \n    fragColor.a = d;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}