{
    "Shader": {
        "info": {
            "date": "1717837959",
            "description": "copypast",
            "flags": 0,
            "hasliked": 0,
            "id": "4XKGRy",
            "likes": 1,
            "name": "seal of black and white",
            "published": 3,
            "tags": [
                "fractal",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nnew",
            "viewed": 258
        },
        "renderpass": [
            {
                "code": "\n\nfloat xor(float x, float y) {return float(int(x) ^ int(y));}\n\n#define R iResolution.xy\n#define T(e) texture(iChannel0, (e)/R).x\n\nfloat get(vec2 fragCoord){\n    vec2 uv = (fragCoord - 0.5*iResolution.xy);\n   \n    float col = 0.;\nfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 200.2;\nfloat si = sin(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\n    uv*=fract(iTime*0.1);\n    uv *= 20. + 1.;\n    uv*=ma;\n    vec2 iuv = vec2(uv);\n   \n    iuv = abs(iuv);\n   \n   \n   \n    float rep = 15.;\n    iuv = floor(iuv/rep)*rep;\n   \n    #define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n   \n   \n    float r = xor(iuv.x, iuv.y);\n   \n   \n    float cumm = 0.;\n   \n    r = xor(iuv.x, iuv.y);\n   \n   \n    r = floor(r*0.0112+0.3*cos(iTime));\n    for(int i = 0; i < 4; i++){\n        if(floor(mod(r, 10.)) < 4.){\n        cumm += r + r*0.5*cos(iTime);\n        }\n       \n    }\n   \n   \n    float fr = float(r);\n   \n   \n    col += clamp(cumm, 0., 1.);\n   \n    col -= step(1.-cumm*0.01*cos(iTime),0.)*1.;\n   \n    col = clamp(col, 0.,1.);\n    if (col == 0.)\n        col -= col + 1.;\n    return col;\n}\n\n\n#define R iResolution.xy\n#define T(e) texture(iChannel0, (e)/R).x\n\n\n\n\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec3 col = vec3(0);\n    float st = 1.25;    \n   \n    // antialiasing\n   \n    float t = get(U);\n    float n = get(U + vec2(0.,st)*cos(iTime));\n    float w = get(U + vec2(0.,-st)*cos(iTime));\n    float e = get(U + vec2(st,0.)*cos(iTime));\n    float s = get(U + vec2(-st,0.)*cos(iTime));\n   \n    float ne = get(U + vec2(st,st)*cos(iTime));\n    float ns = get(U + vec2(-st,st)*cos(iTime));\n    float sw = get(U + vec2(st,-st)*cos(iTime));\n    float se = get(U + vec2(-st,-st)*cos(iTime));\n   \n   \n    float cumm = t + n + w + e + s + ne + ns + sw + se;\n   \n    ;\n   \n    col += cumm/10.;\n   \n    C = vec4(col,1.0);\n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}