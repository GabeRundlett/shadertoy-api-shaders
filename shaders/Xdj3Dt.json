{
    "Shader": {
        "info": {
            "date": "1395273585",
            "description": "1K version - http://www.backtothepixel.com/demos/js/webgl/704webgl1k.html\nBased on my 704 - https://www.shadertoy.com/view/ldfGzr",
            "flags": 1,
            "hasliked": 0,
            "id": "Xdj3Dt",
            "likes": 44,
            "name": "704.2",
            "published": 3,
            "tags": [
                "procedural",
                "remake",
                "vr"
            ],
            "usePreview": 0,
            "username": "PauloFalcao",
            "viewed": 4664
        },
        "renderpass": [
            {
                "code": "//by @paulofalcao\n\nfloat inObj(vec3 p){\n  float oP=length(p);\n  p.x=sin(p.x)+sin(iTime);\n  p.z=sin(p.z)+cos(iTime);\n  return min(length(p)-1.5-sin(oP-iTime*4.0),p.y+3.0);\n}\n\nvoid cameraSetup(out vec3 prp, out vec3 scp, in vec2 fragCoord){\n  vec2 iRes=iResolution.xy;\n  vec2 vPos=-1.0+2.0*fragCoord.xy/iRes;\n\n  float zf=cos(iTime*0.2)*0.4+0.6;\n  vec3 vuv=vec3(sin(iTime),1,0);\n  vec3 vrp=vec3(sin(iTime*0.7)*10.0,0,cos(iTime*0.9)*10.0)*zf; \n  prp=vec3(\n      (sin(iTime*0.7)*20.0+20.0)*zf,\n       sin(iTime)*4.0+7.0,\n      (cos(iTime*0.6)*20.0+14.0)*zf)+vrp;\n\n  vec3 vpn=normalize(vrp-prp);\n  vec3 u=normalize(cross(vuv,vpn));\n  vec3 v=cross(vpn,u);\n  vec3 scrCoord=vpn+vPos.x*u*iRes.x/iRes.y+vPos.y*v;\n  scp=normalize(scrCoord);\n}\n\nvoid raymarching( out vec4 fragColor, in vec3 prp, in vec3 scp){\n  const vec3 e = vec3(0.1,0,0);\n  const float maxd=80.0;\n\n  float s=0.1;\n  vec3 c,p,n;\n\n  float f=-(prp.y-2.5)/scp.y;\n  if (f>0.0) p=prp+scp*f;\n  else f=maxd;\n\n  vec3 outc=vec3(0,0,0);\n\n  float far=0.0;\n  for (int ref=0;ref<=1;ref++){\n    if (ref>0){\n      scp=reflect(scp,n);\n      prp=p;\n      s=0.1;f=0.1;\n    }\n\n    for(int i=0;i<32;i++){\n      f+=s;\n      p=prp+scp*f;\n      s=inObj(p);\n      if (abs(s)<.01||f>maxd||p.y>2.5||(ref>0&&i>16)) break;\n    }\n   \n    if (f<maxd&&p.y<2.5){\n      if(p.y<-2.5){\n        if (fract(p.x/4.0)>.5)\n          if (fract(p.z/4.0)>.5)\n            c=vec3(0,0,0);\n          else\n            c=vec3(1,1,1);\n        else\n          if (fract(p.z/4.0)>.5)\n            c=vec3(1,1,1);\n          else\n            c=vec3(0,0,0);\n        c=c*max(inObj(vec3(p.x,p.y+1.0,p.z)),0.5);\n        n=vec3(0,1,0);\n      }\n      else{\n        float d=length(p);\n        c=vec3((sin(d*.25-iTime*4.0)+1.0)/2.0,\n               (sin(iTime)+1.0)/2.0,\n               (sin(d-iTime*4.0)+1.0)/2.0);\n        n=normalize(\n          vec3(s-inObj(p-e.xyy),\n               s-inObj(p-e.yxy),\n               s-inObj(p-e.yyx)));\n      }\n      float b=dot(n,normalize(prp-p));\n      if (ref==0) {\n        outc=((b+0.2)*c+pow(b,54.0))*0.7;\n        far=1.0-f*.01;\n    } else {\n      if (prp.y>-2.4) outc+=(b+0.2)*c*0.3;\n    }\n    }\n    else break;\n  }\n  fragColor=vec4(outc*far,1.0);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir ){\n  vec3 prp=(fragRayOri+vec3(0,1,0))*5.0;\n  vec3 scp=fragRayDir;\n  raymarching(fragColor,prp,scp);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec3 prp;\n  vec3 scp;\n  cameraSetup(prp,scp,fragCoord);\n  raymarching(fragColor,prp,scp);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}