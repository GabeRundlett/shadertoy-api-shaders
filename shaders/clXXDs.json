{
    "Shader": {
        "info": {
            "date": "1675464975",
            "description": "This is an example demonstrating the \"positivization\" technique for stochastically evaluating the Catmull–Rom filter compared to a stochastic and deterministic bilinear filter.\nhttps://research.nvidia.com/labs/rtr/publication/pharr2024stochtex/",
            "flags": 32,
            "hasliked": 0,
            "id": "clXXDs",
            "likes": 8,
            "name": "Stochastic Catmull–Rom filter",
            "published": 3,
            "tags": [
                "textures",
                "filtering",
                "stochastic",
                "dsp"
            ],
            "usePreview": 1,
            "username": "bartwronski",
            "viewed": 1585
        },
        "renderpass": [
            {
                "code": "// This is an example demonstrating the discrete sampling technique for stochastically evaluating the bilinear/biquadratic/Gaussian filters.\n// https://research.nvidia.com/labs/rtr/publication/pharr2024stochtex/\n// Starting from top, going clockwise:\n// Full bilinear, stochastic bilinear, stochastic Catmull-Rom (bi)quadratic, full (expensive) Catmull-Rom.\n\n// Click somewhere in the shader to disable the temporal accumulation.\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n\nvec4 cat_rom(in float t) {\n    return vec4(t*((2.0-t)*t - 1.0) / 2.0, (t*t*(3.0*t - 5.0) + 2.0) / 2.0,\n           t*((4.0 - 3.0*t)*t + 1.0) / 2.0, (t-1.0)*t*t / 2.0);\n}\n\n\nvec3 full_cat_rom(in vec2 uv, in vec2 rand) {\n    vec2 uv_full = uv * iChannelResolution[0].xy - 0.5;\n    vec2 left_top = floor(uv_full);\n    ivec2 left_top_i = ivec2(uv_full);\n    vec2 fract_part = uv_full - left_top;\n    left_top = (left_top + 0.5) / iChannelResolution[0].xy;\n    vec4 cr_x = cat_rom(fract_part.x);\n    vec4 cr_y = cat_rom(fract_part.y);\n\n    vec3 accum = vec3(0.0);\n    for (int dy = -1; dy <= 2; dy +=1) {\n        for (int dx = -1; dx <= 2; dx +=1) {\n            accum += texture(iChannel0, left_top + vec2(dx, dy)/ iChannelResolution[0].xy).xyz * cr_x[dx+1]  * cr_y[dy+1];\n        }\n    }\n\n    return accum;\n}\n\n\nvec2 sample_select_neg(in float[16] w, in float rand) {\n    float wa[] = float[](abs(w[1]), abs(w[2]), abs(w[4]), abs(w[7]), abs(w[8]), abs(w[11]), abs(w[13]), abs(w[14]));\n    float sum = (wa[0]+wa[1]+wa[2]+wa[3]+wa[4]+wa[5]+wa[6]+wa[7]);\n    float ws_cdf[] = float[](wa[0]/sum,\n                           (wa[0]+wa[1])/sum,\n                           (wa[0]+wa[1]+wa[2])/sum,\n                           (wa[0]+wa[1]+wa[2]+wa[3])/sum,\n                           (wa[0]+wa[1]+wa[2]+wa[3]+wa[4])/sum,\n                           (wa[0]+wa[1]+wa[2]+wa[3]+wa[4]+wa[5])/sum,\n                           (wa[0]+wa[1]+wa[2]+wa[3]+wa[4]+wa[5]+wa[6])/sum, \n                           (wa[0]+wa[1]+wa[2]+wa[3]+wa[4]+wa[5]+wa[6]+wa[7])/sum);\n    if (rand <= ws_cdf[0])\n        return vec2(1, -sum);\n    if (rand <= ws_cdf[1])\n        return vec2(2, -sum);\n    if (rand <= ws_cdf[2])\n        return vec2(4, -sum);\n    if (rand <= ws_cdf[3])\n        return vec2(7, -sum);\n    if (rand <= ws_cdf[4])\n        return vec2(8, -sum);\n    if (rand <= ws_cdf[5])\n        return vec2(11, -sum);\n    if (rand <= ws_cdf[6])\n        return vec2(13, -sum);\n    return vec2(14, -sum);\n\n}\n\nvec2 sample_select_pos(in float[16] w, in float rand) {\n    float wa[] = float[](abs(w[0]), abs(w[3]), abs(w[5]), abs(w[6]), abs(w[9]), abs(w[10]), abs(w[12]), abs(w[15]));\n    float sum = (wa[0]+wa[1]+wa[2]+wa[3]+wa[4]+wa[5]+wa[6]+wa[7]);\n    float ws_cdf[] = float[](wa[0]/sum,\n                           (wa[0]+wa[1])/sum,\n                           (wa[0]+wa[1]+wa[2])/sum,\n                           (wa[0]+wa[1]+wa[2]+wa[3])/sum,\n                           (wa[0]+wa[1]+wa[2]+wa[3]+wa[4])/sum,\n                           (wa[0]+wa[1]+wa[2]+wa[3]+wa[4]+wa[5])/sum,\n                           (wa[0]+wa[1]+wa[2]+wa[3]+wa[4]+wa[5]+wa[6])/sum, \n                           (wa[0]+wa[1]+wa[2]+wa[3]+wa[4]+wa[5]+wa[6]+wa[7])/sum);\n    if (rand <= ws_cdf[0])\n        return vec2(0, sum);\n    if (rand <= ws_cdf[1])\n        return vec2(3, sum);\n    if (rand <= ws_cdf[2])\n        return vec2(5, sum);\n    if (rand <= ws_cdf[3])\n        return vec2(6, sum);\n    if (rand <= ws_cdf[4])\n        return vec2(9, sum);\n    if (rand <= ws_cdf[5])\n        return vec2(10, sum);\n    if (rand <= ws_cdf[6])\n        return vec2(12, sum);\n    return vec2(15, sum);\n}\n\nvec3 stochastic_cat_rom(in vec2 uv, in vec2 rand) {\n    vec2 uv_full = uv * iChannelResolution[0].xy - 0.5;\n    vec2 left_top = floor(uv_full);\n    ivec2 left_top_i = ivec2(uv_full);\n    vec2 fract_part = uv_full - left_top;\n    left_top = (left_top + 0.5) / iChannelResolution[0].xy;\n    vec4 cr_x = cat_rom(fract_part.x);\n    vec4 cr_y = cat_rom(fract_part.y);\n  \n    float[16] all_samp = float[16](cr_x[0]*cr_y[0], cr_x[1]*cr_y[0], cr_x[2]*cr_y[0], cr_x[3]*cr_y[0],\n                     cr_x[0]*cr_y[1], cr_x[1]*cr_y[1], cr_x[2]*cr_y[1], cr_x[3]*cr_y[1],\n                     cr_x[0]*cr_y[2], cr_x[1]*cr_y[2], cr_x[2]*cr_y[2], cr_x[3]*cr_y[2],\n                     cr_x[0]*cr_y[3], cr_x[1]*cr_y[3], cr_x[2]*cr_y[3], cr_x[3]*cr_y[3]);\n    vec2 sample_ind0 = sample_select_neg(all_samp, rand.x);\n    vec2 sample_ind1 = sample_select_pos(all_samp, rand.y);\n\n    float dx0 = float(int(sample_ind0)%4)-1.0;\n    float dx1 = float(int(sample_ind1)%4)-1.0;\n    float dy0 = float(int(sample_ind0)/4)-1.0;\n    float dy1 = float(int(sample_ind1)/4)-1.0;\n    \n    vec3 accum = vec3(0.0);\n    accum += texelFetch(iChannel0, left_top_i + ivec2(dx0, dy0), 0).xyz * sample_ind0.y;\n    accum += texelFetch(iChannel0, left_top_i + ivec2(dx1, dy1), 0).xyz * sample_ind1.y;\n   \n\n    return accum;\n}\n\n\nvec3 stochastic_bilin(in vec2 uv, in vec2 rand) {\n  vec2 uv_full = uv * iChannelResolution[0].xy - 0.5;\n  vec2 left_top = floor(uv_full);\n  ivec2 left_top_i = ivec2(uv_full);\n  vec2 fract_part = uv_full - left_top;\n  left_top = (left_top + 0.5) / iChannelResolution[0].xy;\n  \n  vec4 ws = vec4((1.0-fract_part.x)*(1.0-fract_part.y),\n                 fract_part.x*(1.0-fract_part.y),\n                 (1.0-fract_part.x)*fract_part.y,\n                 fract_part.x*fract_part.y);\n  ws = vec4(ws.x, ws.x+ws.y, ws.x+ws.y+ws.z, ws.x+ws.y+ws.z+ws.w);\n  ws /= ws.w;\n  \n  int sel = 3;\n  if (rand.x < ws.x)\n  {\n      sel = 0;\n  } else if (rand.x < ws.y) {\n      sel = 1;\n  } else if (rand.x < ws.z) {\n      sel = 2;\n  }\n  \n  float dx = (sel == 1 || sel == 3) ? 1.0 : 0.0;\n  float dy = (sel == 2 || sel == 3) ? 1.0 : 0.0;\n\n  return texelFetch(iChannel0, left_top_i + ivec2(dx, dy), 0).xyz;  \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 orig_uv = uv;\n    uv *= 0.04;\n    uv += 0.1;\n    // \n    vec4 random = texture(iChannel2, orig_uv+vec2(rand(float(iFrame)), rand(iTime)));\n    vec3 col = orig_uv.x < orig_uv.y ? full_cat_rom(uv, random.xy) : stochastic_cat_rom(uv, random.xy);\n\n    if (1.0-orig_uv.x < orig_uv.y) {\n        col = texture(iChannel0, uv).xyz;\n        if (orig_uv.x > orig_uv.y) {\n            col = stochastic_bilin(uv, random.xy);\n        }\n    }\n    if (abs(1.0-orig_uv.x - orig_uv.y) < 0.005)\n        col = vec3(1,1,1);\n    if (abs(orig_uv.x - orig_uv.y) < 0.005)\n        col = vec3(1,1,1);    \n    \n    if (iTime > 0.1 && iMouse.z < fragCoord.x) {\n        col = col * 0.02 + texture(iChannel1, orig_uv).xyz * 0.98;\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}