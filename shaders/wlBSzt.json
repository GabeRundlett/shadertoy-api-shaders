{
    "Shader": {
        "info": {
            "date": "1566752328",
            "description": "medicomtoy\nhttp://www.medicomtoy.co.jp/",
            "flags": 0,
            "hasliked": 0,
            "id": "wlBSzt",
            "likes": 2,
            "name": "Bearbrick",
            "published": 3,
            "tags": [
                "raymerching",
                "bearbrick"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 388
        },
        "renderpass": [
            {
                "code": "vec4 map(vec3 p){\n    \n    vec3 pref = p;\n    vec2 uv = p.xy;\n\t\n    vec3 headPos = vec3(0.0,-1.4,0.0);\n    float head1 = sdBox(p+headPos, vec3(0.1,0.3,-0.1),0.55);\n    float head2 = sdBox(p+headPos+vec3(0.0,0.4,-0.1), vec3(0.13,0.05,0.1),0.6);\n    \n    p.x = abs(p.x);\n    p.x -= 0.7;\n    float ears = sdBox((p+headPos+vec3(0.0,-0.7,0.0))*matRotateZ(radians(-25.0)), vec3(0.05,0.1,0.0),0.25);\n    float headRes = opSmoothUnion(head1,head2,0.35);\n    headRes = opSmoothUnion(headRes,ears,0.2);\n    p = pref;\n    \n    vec3 bodyPos = vec3(0.0,0.0,0.0);\n\tfloat body1 = sdBox(p+bodyPos, vec3(0.55,0.3,0.2),0.15);\n    float body2 = sdBox(p+bodyPos+vec3(0.0,0.6,-0.1), vec3(0.3,0.05,0.05),0.5);\n    float bodyRes = opSmoothUnion(body1,body2,0.5);\n    \n    vec3 bodyBtmPos = vec3(0.0,1.4,0.0);\n\tfloat bodyBtm1 = sdBox(p+bodyBtmPos, vec3(0.6,0.25,0.2),0.15);\n    \n    p.x = abs(p.x);\n    p.x -= 0.45;\n    float bodyBtm2 = sdBox(p+bodyBtmPos+vec3(0.0,0.2,0.0), vec3(0.2,0.2,0.2),0.2);\n    float bodyBtmRes = max(bodyBtm1,-bodyBtm2);\n    p = pref;\n    \n    vec3 legPos = vec3(0.0,2.0,0.0);\n    p.x = abs(p.x);\n    p.x -= 0.45;\n    float leg1 = sdBox(p+legPos, vec3(0.2,0.6,0.2),0.1);\n    float leg2 = max(-sdBox(p+legPos+vec3(0.0,0.9,-0.2), vec3(0.4,0.3,0.5),0.0),(length(p+legPos+vec3(0.0,0.6,-0.2))-0.30));\n    float legRes = opSmoothUnion(leg1,leg2,0.12);\n    p = pref;\n    \n    vec3 armPos = vec3(0.0,0.25,0.0);\n    p.x = abs(p.x);\n    p.x -= 0.6;\n    float arm1 = sdCappedTorus((p+armPos)*matRotateZ(radians(45.0)),vec2(0.3,0.3), 0.5, 0.2);\n    p = pref;\n    p.x = abs(p.x);\n    p.x -= 1.1;\n    float arm2 = sdCappedCylinder((p+armPos+vec3(0.0,0.39,0.0)),0.198,0.4);\n    float arm3 = sdCappedTorus((p+armPos+vec3(0.0,1.07,0.0))*matRotateZ(radians(30.0)),vec2(0.1,-0.2), 0.15, 0.08);\n    float armRes = opSmoothUnion(arm1,arm2,0.0);\n    armRes = opSmoothUnion(armRes,arm3,0.25);\n    p = pref;\n    \n    vec4 res1 = vec4(vec3(0.2,0.2,0.35),headRes);\n    vec4 res2 = vec4(vec3(0.3,0.5,0.6),bodyRes);\n    vec4 res3 = vec4(vec3(0.3,0.5,0.6),bodyBtmRes);\n    vec4 res4 = vec4((uv.x<0.0)?vec3(0.5,0.65,0.8):vec3(0.1,0.3,0.5),legRes);\n    vec4 res5 = vec4((uv.x<0.0)?vec3(0.1,0.3,0.5):vec3(0.5,0.65,0.8),armRes);\n    vec4 res6 = vec4(vec3(1.0),p.y+2.6);\n    \n    return combine(combine(combine(combine(combine(res1,res2),res3),res4),res5),res6);\n}\n\nvec3 normalMap(vec3 p){\n    float d = 0.0001;\n    return normalize(vec3(\n        map(p + vec3(  d, 0.0, 0.0)).w - map(p + vec3( -d, 0.0, 0.0)).w,\n        map(p + vec3(0.0,   d, 0.0)).w - map(p + vec3(0.0,  -d, 0.0)).w,\n        map(p + vec3(0.0, 0.0,   d)).w - map(p + vec3(0.0, 0.0,  -d)).w\n    ));\n}\n\nfloat shadowMap(vec3 ro, vec3 rd){\n    float h = 0.0;\n    float c = 0.001;\n    float r = 1.0;\n    float shadow = 0.5;\n    for(float t = 0.0; t < 30.0; t++){\n        h = map(ro + rd * c).w;\n        if(h < 0.001){\n            return shadow;\n        }\n        r = min(r, h * 16.0 / c);\n        c += h;\n    }\n    return 1.0 - shadow + r * shadow;\n}\n\n// from simon green and others\nfloat ambientOcclusion(vec3 p, vec3 n)\n{\n    const int steps = 4;\n    const float delta = 0.15;\n\n    float a = 0.0;\n    float weight = 4.;\n    for(int i=1; i<=steps; i++) {\n        float d = (float(i) / float(steps)) * delta; \n        a += weight*(d - map(p + n*d).w);\n        weight *= 0.5;\n    }\n    return clamp(1.0 - a, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec2 uv = p;\n    \n    float time = iTime*2.0;\n    \n    vec3 ro = vec3( 3.5*cos(0.1*time + 6.0), 0.0, -0.5+5.5*sin(0.1*time + 6.0) );\n    vec3 ta = vec3( 0.0, -0.4, -0.7 );\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    float zoom = 1.5;\n    vec3 rd = ca * normalize( vec3(p.xy,zoom) );\n    \n    float t, dist;\n    float lastDistEval = 1e10;\n    float edge = 0.0;\n    t = 0.0;\n    vec3 distPos = ro+rd;\n    vec4 distCl = vec4(0.0);\n    for(int i = 0; i < 64; i++){\n        distCl = map(distPos);\n        dist = distCl.w;\n        t += dist;\n        distPos = ro+rd*t;\n        \n        if (dist < lastDistEval) lastDistEval = dist;\n        if(dist < 0.01 || dist > 60.0) break;\n    }\n\n    vec3 color;\n    float shadow = 1.0;\n    if(dist < 1.0){\n        // lighting\n        vec3 lightDir = vec3(0.0, 1.0, 0.0);\n        vec3 light = normalize(lightDir + vec3(0.5, 0.0, 0.9));\n        vec3 normal = normalMap(distPos);\n\n        // difuse color\n        float diffuse = clamp(dot(light, normal), 0.6, 1.0);\n        float lambert = max(.0, dot( normal, light));\n        \n        // ambient occlusion\n        float ao = ambientOcclusion(distPos,normal);\n        \n        // shadow\n        shadow = shadowMap(distPos + normal * 0.001, light);\n\n        // result\n        color += vec3(lambert);\n        color = ao*diffuse*(distCl.xyz+(.1-length(p.xy)/3.))*vec3(1.0, 1.0, 1.0);\n        \n    }else{\n        color =.84*max(mix(vec3(0.6,0.6,0.6)+(.1-length(p.xy)/3.),vec3(1),.1),0.);\n    }\n\n    // rendering result\n    float brightness = 1.5;\n    vec3 dst = (color * max(0.8, shadow))*brightness;\n    \n    fragColor = vec4(dst, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// All the distance functions from:https://iquilezles.org/articles/distfunctions\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n#define hash(h) fract(sin(h) * 43758.5453123)\n#define PI 3.141592653589793\n\nfloat sdBox( vec3 p, vec3 b, float r )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))-r\n         + min(max(d.x,max(d.y,d.z)),0.0);\n}\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb)\n{\n  p.x = abs(p.x);\n  float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n  return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); \n}\n\nvec4 combine(vec4 val1, vec4 val2 ){\n    if ( val1.w < val2.w ) {\n        return val1;\n    }\n    return val2;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n    vec3 cw = normalize(ta-ro);\n    vec3 cp = vec3(sin(cr), cos(cr),0.0);\n    vec3 cu = normalize( cross(cw,cp) );\n    vec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}