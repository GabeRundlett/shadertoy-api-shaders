{
    "Shader": {
        "info": {
            "date": "1624387057",
            "description": ":octopus:",
            "flags": 0,
            "hasliked": 0,
            "id": "sdS3zV",
            "likes": 3,
            "name": "- change of basis -",
            "published": 3,
            "tags": [
                "sdf",
                "sphere"
            ],
            "usePreview": 0,
            "username": "anahit_movsesyan",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "#define EPS 0.001\n#define MAX_DIST 20.\n\nvec3 rotateY(vec3 pos, float k) {\n    float c = cos(k);\n    float s = sin(k);\n    return mat3(c,  0, -s,\n                0,  1,  0,\n                s,  0,  c) * pos;\n}\n\nvec3 changeOfBasis(vec3 pos, vec3 origin){\n    vec3 zAxis = -origin;\n    vec3 xAxis = normalize(rotateY(vec3(origin.x, 0, origin.z), 3.14 / 2.));\n    vec3 yAxis = cross(xAxis, zAxis);\n\t\n    return transpose(mat3(xAxis, yAxis, zAxis)) * pos;\n}\n\nfloat sdBox(vec3 pos) {\n    vec3 d = abs(pos) - 0.8;\n  \treturn min(max(d.x, max(d.y, d.z)), 0.) + length(max(d, 0.));\n}\n\nfloat sdSphere(vec3 pos) {\n\treturn length(pos) - 1.;   \n}\n\nvec3 calcBoxPos() {\n    float y = 1. - 4. * abs(round(iTime / 12.) - iTime / 12.);\n    vec3 origin = vec3(sin(iTime / 0.3), y, cos(iTime / 0.3));\n    origin.xz *= cos(y * 3.14 / 2.);\n    return origin;\n}\n\nfloat calcDist(vec3 pos) {\n    vec3 origin = calcBoxPos();\n \t\n    float dBox = sdBox(changeOfBasis(1.5 * (pos + 3. * -origin), origin)) / 2. - 0.05;\n    float dSphere = sdSphere(0.35 * pos);\n\n    float morphK = 4.;\n    return -log(exp(-morphK * dSphere) + exp(-morphK * dBox)) / morphK;\n}\n\nfloat rayMarch(vec3 rayO, vec3 rayD) {\n    float distFromO = 0.;\n    for (int i = 0; i < 100; ++i) {\n\t    float dS = calcDist(rayO + rayD * distFromO);\n        distFromO += dS;\n        if (dS < EPS || distFromO > MAX_DIST) break;\n    }\n    \n    return distFromO;\n}\n\nvec3 calcNormal(vec3 pos) {\n    float d = calcDist(pos);\n\treturn normalize(vec3(d - calcDist(pos - vec3(EPS, 0,  0 )),\n\t\t\t\t\t  \t  d - calcDist(pos - vec3( 0, EPS, 0 )),\n\t\t\t\t\t   \t  d - calcDist(pos - vec3( 0,  0, EPS))));\n}\n\nvec3 calcLight(vec3 fragPos, vec3 lightPos, vec3 lightCol, vec3 camDir) {    \n\tvec3 normal = calcNormal(fragPos);\n    vec3 lightDir = normalize(lightPos - fragPos);\n    \n    vec3 ambient = vec3(0.1);\n    vec3 diffuse = vec3(max(dot(normal, lightDir), 0.0));\n    vec3 specular = vec3(0.15 * pow(max(dot(-camDir, reflect(-lightDir, normal)), 0.), 16.));\n    \n    return lightCol * (ambient + diffuse + specular);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 xy = (fragCoord.xy - iResolution.xy / 2.) / min(iResolution.x, iResolution.y);\n    \n    vec3 camPos = vec3(0, 0, -10);\n\tvec3 camDir = normalize(vec3(xy, 1.));\n    \n    float dist = rayMarch(camPos, camDir);\n    \n    vec3 col = vec3(0.7, 0.6, 0.6);\n    \n    if (dist < MAX_DIST) { \n        col = calcLight(camPos + dist * camDir, \n                        vec3(5, 0, -15), \n                        vec3(0.9, 0.6, 0.6), \n                        camDir);\n    } \n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv *= 1.0 - uv.yx;\n    col *=  vec3(pow(uv.x * uv.y * 15., 0.1)); \n    \n\tfragColor = vec4(col, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}