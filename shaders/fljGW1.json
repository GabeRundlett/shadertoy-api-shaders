{
    "Shader": {
        "info": {
            "date": "1623836174",
            "description": "The complete Mars experience",
            "flags": 32,
            "hasliked": 0,
            "id": "fljGW1",
            "likes": 20,
            "name": "Martian Tango",
            "published": 3,
            "tags": [
                "interactive",
                "mars",
                "drive",
                "helicopter",
                "rover"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 340
        },
        "renderpass": [
            {
                "code": "// \"Martian Tango\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Drive the Mars rover; mouseable; knob controls rover speed and steering\n  (otherwise random path).\n  Copter flies autonomously (sometimes close to ground); slow horizontal response\n  and rapid vertical collision avoidance leads to interesting behavior (hence\n  the tango).\n  Wheel tracks remain on ground (temporarily).\n  Inset views are from forward and downward wide-angle copter cameras.\n  You are on the pale blue dot.\n  (Portions from \"Drive The Rover\", \"Lunar Buggy\" and \"Fly The Mars Copter\".)\n*/\n\n#define VAR_ZERO min (iFrame, 0)\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat PrTorusBxDf (vec3 p, vec3 b, float ri);\nfloat Maxv2 (vec2 p);\nfloat Minv2 (vec2 p);\nfloat Maxv3 (vec3 p);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val);\nfloat Noiseff (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (int idVar);\n\nconst int npTrail = 64;  // same for image and buffer\nconst int npFst = 9;\n\nmat3 flMat;\nvec3 sunDir, qHit, carPos, wlBase, flPos;\nvec2 wlRot[2], csArm, csArmA, flHip;\nfloat tCur, dstFar, carRot, strRot, flDir, flTilt, legLenU, legLenD, aU, aD, pPitch,\n   pRot, flScl, dGlow;\nint idObj, idVu;\nbool isSh;\nconst int idChas = 1, idFuel = 2, idWhl = 3, idLnk = 4, idArm = 5, idPiv = 6, idAxl = 7,\n   idTur = 8, idGrbl = 9, idCamR = 10, idCamP = 11, idAnt = 12, idSol = 13,\n   idFlBod = 14, idLeg = 15, idPTube = 16, idProp = 17, idCamV = 18, idCamH = 19;\nconst float pi = 3.1415927;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat CarDf (vec3 p)\n{\n  vec3 q, qq, bSize;\n  vec2 kRot;\n  float dMin, d, r, a, s, rt, wlRad, armLen;\n  dMin = dstFar;\n  p -= carPos;\n  p.xz = Rot2D (p.xz, carRot);\n  bSize = vec3 (0.8, 0.3, 1.6);\n  rt = 0.07;\n  wlRad = wlBase.y;\n  armLen = 1.;\n  p.y -= wlRad;\n  for (float k = float (VAR_ZERO); k < 2.; k ++) {\n    q = p;\n    q.x = abs (q.x) - wlBase.x;\n    if (k == 1.) q.xz = Rot2D (vec2 (q.x, abs (q.z) - wlBase.z), - strRot * sign (p.x));\n    q.y -= 0.85;\n    d = PrCapsDf (q.xzy, rt, 0.15);\n    q.y -= -0.5;\n    d = min (d, max (PrTorusBxDf (q, vec3 (0.25, 0.2, 0.15), rt), q.x));\n    DMINQ (idLnk);\n  }\n  for (float k = float (VAR_ZERO); k < 6.; k ++) {\n    kRot = vec2 (2. * mod (k, 2.), floor (k / 2.)) - 1.;\n    q = p;\n    q.xz -= kRot.xy * wlBase.xz;\n    if (kRot.y != 0.) q.xz = Rot2D (q.xz, - strRot * kRot.y);\n    r = length (q.yz);\n    d = length (max (vec2 (r - wlRad, abs (q.x) - 0.15) - 0.1, 0.));\n    if (d < 0.1) {\n      d = max (length (max (vec2 (r - wlRad, abs (q.x) - 0.15), 0.)) - 0.05, wlRad - 0.02 - r);\n      q.yz = (kRot.y != 1.) ? Rot2D (q.yz, - ((kRot.x < 0.) ? wlRot[0].x : wlRot[0].y)) :\n         Rot2D (q.yz, - ((kRot.x < 0.) ? wlRot[1].x : wlRot[1].y));\n      a = (r > 0.) ? atan (q.z, - q.y) / (2. * pi) : 0.;\n      d = max (d, 0.03 - length (Rot2D (q.yz, 2. * pi * floor (28. * a + 0.5) / 28.) + \n         vec2 (wlRad + 0.05, 0.)));\n      d = min (d, max (abs (r - wlRad + 0.04) - 0.02, abs (q.x) - 0.04));\n      q.yz = Rot2D (q.yz, 2. * pi * floor (7. * a + 0.5) / 7.);\n      d = min (d, max (PrTorusBxDf (q - vec3 (0., -0.31, 0.), vec3 (0.08, 0.05, 0.1), 0.02),\n         - q.x * kRot.x));\n      d = min (d, max (r - 0.18, abs (q.x) - 0.2));\n      DMINQ (idWhl);\n    } else dMin = min (dMin, d);\n  }\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (wlBase.x, 1., -1.);\n  d = PrRoundCylDf (q.yzx, 0.1, 0.02, 0.1);\n  DMINQ (idAxl);\n  d = PrCapsDf (q, rt, 1.);\n  q.z -= 1.5;\n  d = min (d, max (PrTorusBxDf (q.yzx, vec3 (0.05, 1.1, 0.4), rt), - q.y));\n  DMINQ (idLnk);\n  q = p;\n  q.xz = abs (q.xz);\n  q -= vec3 (wlBase.xz, 0.85).xzy;\n  d = PrRoundCylDf (q.xzy, 0.1, 0.02, 0.04);\n  DMINQ (idGrbl);\n  q = p;\n  q.y -= 1.45;\n  d = PrCylDf (q.yzx, 0.1, wlBase.x);\n  q.x = abs (abs (q.x) - wlBase.x + 0.3) - 0.3;\n  d = min (d, PrRoundCylDf (q.yzx, 0.1, 0.02, 0.1));\n  DMINQ (idAxl);\n  q = p;\n  q.y -= 1.5;\n  d = PrRoundBoxDf (q, bSize, 0.02);\n  DMINQ (idChas);\n  qq = abs (q) - vec3 (0.35, 0.22, 0.8);\n  d = min (min (PrTorusBxDf (vec3 (q.yz, qq.x), vec3 (bSize.yz, 0.03), 0.03),\n     PrTorusBxDf (vec3 (q.xz, qq.y), vec3 (bSize.xz, 0.03), 0.03)),\n     PrTorusBxDf (vec3 (q.xy, qq.z), vec3 (bSize.xy, 0.03), 0.03));\n  DMIN (idGrbl);\n  q = p;\n  q.yz -= vec2 (1.85, -1.6);\n  d = PrRoundCylDf (q.yzx, 0.3, 0.1, 0.6);\n  DMINQ (idFuel);\n  d = PrTorusBxDf (q.xzy, vec3 (0.6, 0.3, 0.1), 0.03);\n  DMIN (idGrbl);\n  q = p;\n  q.x = abs (abs (q.x) - 0.18);\n  d = PrCapsDf (q - vec3 (0.05, 1.16, bSize.z), 0.04, 0.1);\n  DMIN (idGrbl);\n  q = p;\n  q.yz -= vec2 (1.75, 1.8);\n  d = PrRoundBoxDf (q, vec3 (0.15, 0.05, 0.2), 0.02);\n  DMIN (idGrbl);\n  q = p;\n  q.xz = abs (vec2 (q.x, q.z - 0.85));\n  q -= vec3 (0.55, 1.8, 0.25);\n  d = PrRoundCylDf (q.xzy, 0.1, 0.02, 0.1);\n  q.y -= 0.1;\n  d = min (d, PrSphDf (q, 0.05));\n  DMIN (idGrbl);\n  q = p;\n  q.yz -= vec2 (1.8, 1.1);\n  d = PrRoundBoxDf (q, vec3 (0.2, 0.1, 0.2), 0.02);\n  q.xz = abs (q.xz);\n  d = min (d, PrSphDf (q - vec3 (0.1, 0.12, 0.1), 0.05));\n  DMIN (idGrbl);\n  q = p;\n  q.xz = abs (vec2 (q.x, q.z + 0.1)) - vec2 (0.65, 0.3);\n  q.y -= 1.85;\n  d = PrRoundCylDf (q.xzy, 0.1, 0.02, 0.02);\n  DMIN (idGrbl);\n  q = p;\n  q.y -= 2.02;\n  d = PrRoundCylDf (q.xzy, 0.3, 0.02, 0.2);\n  DMINQ (idTur);\n  q.y -= 0.4;\n  d = PrRoundCylDf (q.xzy, 0.22, 0.02, 0.2);\n  DMINQ (idTur);\n  q = p;\n  q.y -= 2.6;\n  d = PrCapsDf (q.yzx, 0.03, 0.6);\n  DMIN (idGrbl);\n  q.x = abs (q.x) - 0.46;\n  q.yz = Rot2D (q.yz, -0.2 * pi);\n  d = PrRoundBoxDf (q, vec3 (0.15, 0.01, 0.25), 0.01);\n  DMINQ (idSol);\n  q = p;\n  q.xz = abs (vec2 (q.x, q.z - 0.3));\n  q -= vec3 (0.75, 1.8, 1.2);\n  d = PrCapsDf (q.xzy, 0.05, 0.2);\n  DMIN (idGrbl);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.78, 2.25, -0.9);\n  q.xy = Rot2D (q.xy, 0.1 * pi);\n  d = max (abs (PrSphDf (q, 0.25)) - 0.01, q.y + 0.05);\n  DMINQ (idAnt);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.75, 2., 1.55);\n  q.yz = Rot2D (q.yz, -0.05 * pi);\n  d = PrCapsDf (q, 0.1, 0.1);\n  DMINQ (idCamR);\n  q = p;\n  q.xz = abs (q.xz);\n  q -= vec3 (bSize.xz, 1.2).xzy;\n  q.yz = Rot2D (q.yz, -0.25 * pi);\n  d = PrSphDf (q, 0.1);\n  DMINQ (idCamR);\n  q = p;\n  q.y -= 1.1;\n  q.yz = Rot2D (q.yz, -0.5 * pi);\n  d = PrSphDf (q, 0.1);\n  DMINQ (idCamR);\n  q = p;\n  q.y -= 3.;\n  d = PrCylDf (q.xzy, 0.05, 0.8);\n  DMIN (idGrbl);\n  q.y -= 0.8;\n  d = PrRoundCylDf (q.xzy, 0.2, 0.02, 0.08);\n  DMINQ (idCamP);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.5, 1.2, 1.7);\n  d = PrCapsDf (q, 0.03, 0.2);\n  q.z -= 0.2;\n  d = min (d, PrCapsDf (q.xzy, 0.02, 0.3));\n  DMIN (idGrbl);\n  q = p;\n  q.yz -= vec2 (1.85, 1.9);\n  d = PrRoundCylDf (q.xzy, 0.05, 0.02, 0.05);\n  q.y -= 0.15;\n  q.yz = Rot2Cs (q.yz, csArmA) - 2. * armLen * csArm.yx;\n  q.z = abs (q.z);\n  q.yz -= 2. * armLen * (csArm * vec2 (1., -1.)).yx;\n  q.yz = Rot2Cs (q.yz, csArm * vec2 (1., -1.));\n  q.z -= - armLen;\n  d = min (d, PrRoundBoxDf (q, vec3 (0.03, 0.04, armLen), 0.02));\n  DMINQ (idArm);\n  q.z = abs (q.z) - armLen;\n  d = PrRoundCylDf (q.yzx, 0.1, 0.02, 0.08);\n  DMINQ (idPiv);\n  q = p;\n  q.yz -= vec2 (1.85, 2.) + Rot2Cs (vec2 (0., 4. * armLen * csArm.x), csArmA * vec2 (1., -1.));\n  d = PrRoundCylDf (q.xzy, 0.2, 0.02, 0.05);\n  q.z = abs (q.z);\n  q.yz -= vec2 (-0.1, 0.1);\n  d = min (d, PrCapsDf (q.xzy, 0.02, 0.05));\n  DMIN (idGrbl);\n  return dMin;\n}\n\nfloat FlyerDf (vec3 p)\n{\n  vec3 q;\n  vec2 fb;\n  float dMin, d;\n  p = flMat * (p - vec3 (flPos.xz, flHip.y * flScl).xzy);\n  p.y -= 0.5;\n  dMin = dstFar / flScl;\n  p /= flScl;\n  p.y += flHip.y;\n  q = p;\n  q.y -= flHip.y;\n  fb = normalize (vec2 (1.2, 1.));\n  for (float k = -1. + float (VAR_ZERO); k <= 1.; k += 2.) {\n    q = p;\n    q.xz = Rot2D (q.xz, k * pRot);\n    q.y -= flHip.y + 2.4 + 1.2 * k;\n    d = PrRoundCylDf (q.xzy, 0.2 - 0.05 * k, 0.01, 1.2);\n    DMINQ (idPTube);\n    q.y -= 1.;\n    d = min (max (PrRoundCylDf (vec3 (q.x, Rot2D (q.yz, k * pPitch)).xzy, 3., 0.02, 0.01),\n       dot (vec2 (q.x, abs (q.z)), fb)),\n       max (PrRoundCylDf (vec3 (q.x, Rot2D (q.yz, - k * pPitch)).xzy, 3., 0.02, 0.01),\n       dot (vec2 (- q.x, abs (q.z)), fb)));\n    DMINQ (idProp);\n  }\n  q = p;\n  q.y -= flHip.y + 0.1;\n  d = PrRoundCylDf (q.xzy, flHip.x, 0.05, 0.2);\n  q.y -= 0.4;\n  d = min (d, PrRoundCylDf (q.xzy, 0.35 * flHip.x, 0.05, 0.15));\n  DMINQ (idFlBod);\n  q = p;\n  q.y -= flHip.y - 0.2;\n  d = PrCapsDf (q.xzy, 0.35 * flHip.x, 0.1);\n  DMINQ (idCamV);\n  q.yz -= vec2 (0.2, flHip.x);\n  d = PrCapsDf (q, 0.15 * flHip.x, 0.2);\n  DMINQ (idCamH);\n  q = p;\n  q.xz = Rot2D (q.xz, pi / 6.);\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (6. * atan (q.z, - q.x) / (2. * pi)) + 0.5) / 6.);\n  q.xy = Rot2D (q.xy - flHip * vec2 (-1., 1.), aU);\n  q.x += 0.5 * legLenU;\n  d = PrCapsDf (q.yzx, 0.1 * (0.8 + 0.2 * q.x / (0.5 * legLenU)) / 0.6, 0.5 * legLenU);\n  DMINQ (idLeg);\n  q.x += 0.5 * legLenU;\n  q.xy = Rot2D (q.xy, aD - aU);\n  q.x += 0.5 * legLenD;\n  d = PrCapsDf (q.yzx, 0.1 * (0.9 + 0.1 * q.x / (0.5 * legLenD)), 0.5 * legLenD);\n  DMINQ (idLeg);\n  q.x += 0.5 * legLenD;\n  q.xy = Rot2D (q.xy, 0.5 * pi - aD);\n  q.x -= -0.02;\n  d = PrRoundCylDf (q.yzx, 0.3, 0.02, 0.05);\n  DMINQ (idLeg);\n  if (idVu == 0 && ! isSh) dGlow = min (dGlow, dMin);\n  return flScl * dMin;\n}\n\nfloat ObjCRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = CarDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nfloat ObjFRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = FlyerDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjCNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = CarDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 ObjFNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = FlyerDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    h = min (CarDf (p), FlyerDf (p));\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05 || d > dstFar) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec4 CarCol ()\n{\n  vec3 col;\n  float a, r;\n  if (idObj == idCamP || idObj == idTur || idObj == idAnt) a = atan (qHit.x, qHit.z) / (2. * pi);\n  if (idObj == idWhl || idObj == idAxl || idObj == idPiv || idObj == idFuel) r = length (qHit.yz);\n  else if (idObj == idCamP || idObj == idTur) r = length (qHit.xz);\n  if (idObj <= idPiv) {\n    if (idObj == idChas) col = vec3 (1., 1., 0.9) * (0.8 + 0.2 * smoothstep (0., 0.02,\n       abs (PrRoundBox2Df (vec2 (qHit.y, abs (abs (qHit.z) - 0.8) - 0.4), vec2 (0.05, 0.15), 0.05))));\n    else if (idObj == idFuel) col = vec3 (0.8, 0.85, 0.9) * (0.8 + 0.2 * smoothstep (0., 0.02,\n       abs (PrRoundBox2Df (qHit.xz, vec2 (0.3, 0.1), 0.02) - 0.1))) *\n       (0.8 + 0.2 * smoothstep (0., 0.02, abs (abs (r - 0.23) - 0.03)));\n    else if (idObj == idWhl) col = (r > 0.13) ? vec3 (0.95, 0.95, 1.) * (1. - 0.3 * step (0.47, r)) :\n       vec3 (1., 0.5, 0.) * (0.3 + 0.7 * smoothstep (0., 0.02, r - 0.05));\n    else if (idObj == idLnk) col = vec3 (0.9, 0.9, 1.);\n    else if (idObj == idArm) col = vec3 (0.9, 1., 0.9) * (0.8 + 0.2 * smoothstep (0., 0.02,\n       abs (mod (qHit.z + 0.1, 0.2) - 0.1)));\n    else if (idObj == idPiv) col = vec3 (0.8, 0.9, 0.9) * (0.5 + 0.5 * smoothstep (0., 0.01,\n       min (abs (abs (qHit.x) - 0.04), r - 0.02) - 0.01));\n  } else {\n    if (idObj == idAxl) col = vec3 (0.9, 0.95, 0.9) * (0.5 + 0.5 * smoothstep (0., 0.02,\n       abs (r - 0.07) - 0.01)) * (0.5 + 0.5 * smoothstep (0., 0.01, abs (abs (qHit.x) - 0.06) - 0.01));\n    else if (idObj == idTur) col = vec3 (0.9, 0.95, 0.9) * (1. - 0.3 * smoothstep (0., 0.02,\n       0.05 - abs (abs (qHit.y) - 0.1)) *  smoothstep (0., 0.02, abs (mod (8. * a + 0.5, 1.) -\n       0.5) - 0.35)) * (0.8 + 0.2 * smoothstep (0., 0.02, abs (r - 0.15) - 0.01));\n    else if (idObj == idGrbl) col = vec3 (0.9, 0.9, 0.8);\n    else if (idObj == idCamR) col = mix (vec3 (0.2), vec3 (0.9, 0.3, 0.3), (1. - step (0., qHit.z) *\n       smoothstep (0., 0.01, 0.1 - length (qHit.xy))));\n    else if (idObj == idCamP) col = mix (vec3 (0.2), vec3 (0.9, 0.3, 0.3), smoothstep (0., 0.02,\n       length (vec2 (Rot2D (qHit.xz, 2. * pi * (floor (8. * a + 0.5) / 8.)).x, qHit.y)) - 0.05)) *\n       (0.7 + 0.3 * smoothstep (0., 0.02, abs (r - 0.15) - 0.01));\n    else if (idObj == idAnt) col = vec3 (0.5, 0.9, 0.5) * (1. - 0.3 * smoothstep (0., 0.02,\n       abs (mod (16. * a + 0.5, 1.) - 0.5) - 0.35));\n    else if (idObj == idSol) col = (qHit.y > 0.) ? vec3 (0.9, 0.9, 0.3) : vec3 (0.8, 0.8, 0.7);\n  }\n  return vec4 (col, 0.1);\n}\n\nvec4 FlyerCol ()\n{\n  vec4 col4;\n  float r;\n  if (idObj == idFlBod || idObj == idProp) r = length (qHit.xz);\n  if (idObj == idFlBod) col4 = vec4 (0.9, 0.9, 1., 0.2) * (0.8 + 0.2 * smoothstep (0., 0.02,\n     abs (r - 1.1) - 0.1));\n  else if (idObj == idLeg) col4 = vec4 (0.9, 0.9, 1., 0.2) * (0.8 + 0.2 * sin (8. * pi * qHit.x));\n  else if (idObj == idPTube) col4 = vec4 (0.8, 1., 0.8, 0.2) * (1. - 0.2 *\n     sin (4. * atan (qHit.z, qHit.x)));\n  else if (idObj == idProp) col4 = vec4 (1., 0.9, 0.8, 0.2) * (0.9 + 0.1 * sin (8. * pi * r));\n  else if (idObj == idCamV) col4 = vec4 (0.1, 0.1, 0.1, 0.2);\n  else if (idObj == idCamH) col4 = mix (vec4 (0.1, 0.1, 0.1, 0.2), vec4 (0.6 +\n     0.4 * sin (4. * pi * tCur), 0., 0., -1.), step (length (qHit.xy), 0.1));\n  return col4;\n}\n\nfloat TrailShd (vec2 p)\n{\n  vec3 u;\n  vec2 gB[2], gF[2], dg, q;\n  float st, s, gLen;\n  st = 1.;\n  for (float kz = -1. + float (VAR_ZERO); kz <= 1.; kz ++) {\n    gB[0] = carPos.xz;\n    gF[0] = gB[0] + Rot2D (vec2 (0., kz * wlBase.z), - carRot);\n    for (int j = VAR_ZERO; j < npTrail; j ++) {\n      gB[1] = gB[0];\n      gF[1] = gF[0];\n      u = Loadv4 (npFst + j).xyz;\n      if (u.z >= 0.) {\n        gB[0] = u.xy;\n        gF[0] = gB[0] + Rot2D (vec2 (0., kz * wlBase.z), - u.z);\n        s = 1.;\n        if (kz == 0.) {\n          dg = gF[0] - gF[1];\n          gLen = length (dg);\n          if (gLen > 0.) {\n            q = Rot2Cs (p - 0.5 * (gF[0] + gF[1]), dg.yx / gLen);\n            q.x = abs (q.x) - wlBase.x;\n            s = min (s, PrRoundBox2Df (q, vec2 (0.08, 0.5 * gLen), 0.05));\n          }\n        } else {\n          for (float k = -1.; k <= 1.; k += 2.) {\n            dg = gF[0] - gF[1];\n            gLen = length (dg);\n            if (gLen > 0.) {\n              q = Rot2Cs (p - 0.5 * (gF[0] + gF[1]) + Rot2D (vec2 (k * wlBase.x, 0.), - u.z),\n                 dg.yx / gLen);\n              s = min (s, PrRoundBox2Df (q, vec2 (0.08, 0.5 * gLen), 0.05));\n            }\n          }\n        }\n        st = min (st, 1. - 0.3 * sqrt (1. - float (j) / float (npTrail)) *\n           (1. - smoothstep (0., 0.05, s)));\n      } else break;\n    }\n  }\n  return st;\n}\n\n#define SQ(x) ((x) * (x))\n\nvoid SetFlyerConf ()\n{\n  float legHtMin, legHtMax, toePos, d, h, c;\n  legLenU = 2.;\n  legLenD = 3.;\n  flHip.x = 1.5;\n  toePos = 4.;\n  legHtMin = 0.45 * (legLenU + legLenD);\n  legHtMax = sqrt (SQ (legLenU + legLenD) - SQ (toePos - flHip.x));\n  flHip.y = flPos.y / flScl + legHtMin;\n  h = min (flHip.y, legHtMax);\n  d = sqrt (SQ (h) + SQ (toePos - flHip.x));\n  c = (SQ (legLenU) - SQ (legLenD) + SQ (d)) / (2. * legLenU * d);\n  aU = acos (clamp (c, -1., 1.)) + acos (h / d) - 0.5 * pi;\n  c = (SQ (legLenU) + SQ (legLenD) - SQ (d)) / (2. * legLenU * legLenD);\n  aD = aU + acos (clamp (c, -1., 1.)) + pi;\n  d = flHip.y - (legLenU + legLenD);\n  if (d > 0.) {\n    d = 0.13 * pi * smoothstep (0., 5., d);\n    aU -= d;\n    aD -= d;\n  }\n}\n\nvoid SetCarConf ()\n{\n  float armAng;\n  armAng = pi * (0.2 + 0.15 * sin (0.2 * pi * tCur));\n  csArm = sin (armAng + vec2 (0.5 * pi, 0.));\n  csArmA = sin (-0.2 * pi + 0.5 * armAng + vec2 (0.5 * pi, 0.));\n}\n\nvec3 GrndCol (vec3 ro, vec3 rd, float dstGrnd, float sh)\n{\n  vec3 col, vn;\n  vec2 vf;\n  float f, h, st;\n  f = 1. - smoothstep (0.3, 0.5, dstGrnd / dstFar);\n  h = f * Fbm2 (0.5 * ro.xz);\n  h = smoothstep (0.5, 0.7, h);\n  col = vec3 (0.6, 0.45, 0.2) * (1. - 0.3 * (1. - 0.7 * smoothstep (0.5, 0.8, dstGrnd / dstFar)) *\n     Fbm2 (4. * ro.xz) * (1. - 0.5 * h));\n  col *= 1. + 0.2 * h;\n  st = TrailShd (ro.xz);\n  vn = vec3 (0., 1., 0.);\n  if (f > 0.) vn = VaryNf (2. * ro, vn, (1. - 0.5 * h) * (1. + 2. * step (st, 0.99)) * f);\n  col = col * (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.)) * (0.3 + 0.7 * st) +\n     0.15 * h * step (0.95, sh) * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n  return col;\n}\n\nvec3 StarPat (vec3 rd, float scl)\n{\n  vec3 tm, qn, u;\n  vec2 q;\n  float f;\n  tm = -1. / max (abs (rd), 0.0001);\n  qn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  u = Maxv3 (tm) * rd;\n  q = atan (vec2 (dot (u.zxy, qn), dot (u.yzx, qn)), vec2 (1.)) / pi;\n  f = 0.57 * (Fbm2 (11. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 131.13 * scl * q) +\n      Fbm2 (13. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 171.13 * scl * q.yx));\n  return 4. * vec3 (1., 1., 0.8) * pow (f, 16.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 qHitT, col, vn, bgCol;\n  float dstObj, dstCar, dstFlyer, dstGrnd, sh, f;\n  int idObjT;\n  bool isBg;\n  SetCarConf ();\n  isBg = false;\n  bgCol = vec3 (0.2, 0.15, 0.05);\n  isSh = false;\n  dstCar = ObjCRay (ro, rd);\n  idObjT = idObj;\n  qHitT = qHit;\n  dGlow = dstFar;\n  if (idVu == 0) {\n    dGlow /= flScl;\n    dstFlyer = ObjFRay (ro, rd);\n    dGlow *= flScl;\n  } else dstFlyer = dstFar;\n  dstGrnd = dstFar;\n  dstObj = min (dstCar, dstFlyer);\n  if (dstObj < dstFar) {\n    if (dstCar < dstFlyer) {\n      idObj = idObjT;\n      qHit = qHitT;\n    }\n    ro += dstObj * rd;\n    if (dstCar < dstFlyer) {\n      vn = ObjCNf (ro);\n      col4 = CarCol ();\n    } else {\n      vn = ObjFNf (ro);\n      col4 = FlyerCol ();\n    }\n    dGlow = dstFar;\n  } else if (rd.y < 0.) {\n    dstGrnd = - ro.y / rd.y;\n    ro += dstGrnd * rd;\n  } else {\n    isBg = true;\n    col = bgCol;\n  }\n  if (! isBg) {\n    if (col4.a >= 0.) {\n      isSh = true;\n      sh = (min (dstObj, dstGrnd) < dstFar) ? ObjSShadow (ro + 0.01 * vn, sunDir) : 1.;\n      if (dstObj < dstFar) col = col4.rgb * (0.2 + 0.2 * max (- dot (vn, sunDir), 0.) +\n         0.8 * sh * max (dot (vn, sunDir), 0.)) +\n         col4.a * step (0.95, sh) * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n      else col = mix (GrndCol (ro, rd, dstGrnd, sh), bgCol, smoothstep (0.5, 1.,\n         dstGrnd / dstFar));\n    } else col = col4.rgb * (0.5 - 0.5 * dot (vn, rd));\n  }\n  if (min (dstObj, dstGrnd) >= dstFar) {\n    col = bgCol + StarPat (rd, 8.);\n    col = mix (vec3 (0.2, 0.2, 1.), col, smoothstep (0., 2., 1e5 * (1. -\n       dot (rd, normalize (vec3 (1., 0.1, -1.))))));\n  }\n  if (idVu == 0) col = mix (col, vec3 (0.4, 0.6, 0.4), exp (- 16. * dGlow) *\n     (1. - 0.5 * Noiseff (tCur)));\n  return clamp (col, 0., 1.);\n}\n\nmat3 FlMat (float flTilt)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (flTilt, flDir);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n         mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y , 0., ca.y);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, stDat;\n  vec3 ro, rd, col, wgBxC, g;\n  vec2 canvas, uv, ud, um, wd, mSize, ut[2], mMid[2], cnPos;\n  float el, az, asp, aspW, zmFac, s;\n  int wgSel;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  asp = canvas.x / canvas.y;\n  stDat = Loadv4 (0);\n  mPtr.xyz = stDat.xyz;\n  wgSel = int (stDat.w);\n  stDat = Loadv4 (1);\n  carPos = stDat.xyz;\n  carRot = stDat.w;\n  stDat = Loadv4 (2);\n  wlBase = stDat.xyz;\n  stDat = Loadv4 (3);\n  strRot = stDat.y;\n  stDat = Loadv4 (4);\n  wlRot[0] = stDat.xy;\n  wlRot[1] = stDat.zw;\n  stDat = Loadv4 (5);\n  cnPos = stDat.xy;\n  stDat = Loadv4 (6);\n  flPos = stDat.xyz;\n  stDat = Loadv4 (8);\n  flDir = stDat.x;\n  flTilt = stDat.y;\n  flMat = FlMat (flTilt);\n  pRot = stDat.z;\n  pPitch = stDat.w;\n  aspW = 1.4;\n  mSize = 0.33 * vec2 (aspW, 1.);\n  mMid[0] = vec2 (- (asp - mSize.x), 1. - mSize.y);\n  mMid[1] = vec2 (asp - mSize.x, 1. - mSize.y);\n  ut[0] = abs (uv - mMid[0]) - mSize;\n  ut[1] = abs (uv - mMid[1]) - mSize;\n  idVu = 0;\n  for (int k = 0; k < 2; k ++) {\n    if (Maxv2 (ut[k]) < 0.) {\n      uv = (uv - mMid[k]) / mSize.y;\n      idVu = k + 1;\n      break;\n    }\n  }\n  flScl = 0.25;\n  SetFlyerConf ();\n  az = 0.;\n  el = -0.1 * pi;\n  if (wgSel == 0 && mPtr.z > 0.) {\n    az -= 2. * pi * mPtr.x;\n    el -= 0.5 * pi * mPtr.y;\n  }\n  el = clamp (el, -0.45 * pi, 0.);\n  vuMat = StdVuMat (el, az);\n  if (idVu == 0) {\n    ro = carPos + vuMat * vec3 (0., 3., -20.);\n    zmFac = 3.5 + 2. * el;\n    rd = vuMat * normalize (vec3 (uv, zmFac)); \n  } else if (idVu == 1) {\n    ro = flPos + vec3 (0., 2., 0.);\n    zmFac = 0.8;\n    rd = normalize (vec3 (uv, zmFac));\n    rd.yz = Rot2D (rd.yz, 0.05 * pi);\n    rd = rd * flMat;\n  } else if (idVu == 2) {\n    ro = flPos + vec3 (0., 2., 0.);\n    zmFac = 0.4;\n    rd = normalize (vec3 (uv, zmFac));\n    rd.yz = Rot2D (rd.yz, 0.5 * pi);\n    rd.xz = Rot2D (rd.xz, flDir);\n  }\n  dstFar = 200.;\n  sunDir = normalize (vec3 (1., 2., -1.));\n  col = ShowScene (ro, rd);\n  for (int k = 0; k < 2; k ++) {\n    if (Maxv2 (ut[k]) < 0. && Minv2 (abs (ut[k])) * canvas.y < 4.) col = vec3 (0.3, 0.6, 0.7);\n  }\n  if (idVu == 0) {\n    wgBxC = vec3 (0.39, -0.3, 0.135);\n    ud = 0.5 * uv - wgBxC.xy * vec2 (asp, 1.);\n    s = (length (ud) - wgBxC.z) * canvas.y;\n    col = mix (vec3 (0.7), col, smoothstep (0., 1., abs (s) - 1.));\n    if (s < 0.) {\n      col = mix (vec3 (0.7), col, smoothstep (0., 1., Minv2 (abs (ud)) * canvas.y - 1.));\n      col = mix (vec3 (0.3, 0.7, 1.), col, smoothstep (0., 1., abs (length (ud - cnPos) - 0.02) *\n         canvas.y - 1.));\n    }\n    um = vec2 (0.75, -0.96) * vec2 (asp, 1.);\n    ud = abs (uv - um) - vec2 (0.35, 0.05);\n    if (Maxv2 (ud) < 0.) {\n      uv -= um + vec2 (0.1, -0.02);\n      wd = vec2 (0.1, 0.06) * vec2 (asp, 1.);\n      g = floor (vec3 (5. * flPos.xz, 5. * (flPos.y + 1.)));\n      s = ShowInt (uv + vec2 (0.22, 0.), wd, 5., g.x) + ShowInt (uv, wd, 5., g.y) +\n         ShowInt (uv + vec2 (-0.22, 0.), wd, 5., g.z);\n      col = mix (col, vec3 (0.3, 0.7, 1.), s);\n    }\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrTorusBxDf (vec3 p, vec3 b, float ri)\n{\n  return length (vec2 (length (max (abs (p.xy) - b.xy, 0.)) - b.z, p.z)) - ri;\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat DigSeg (vec2 q)\n{\n  q = 1. - smoothstep (vec2 (0.), vec2 (0.04, 0.07), abs (q) - vec2 (0.13, 0.5));\n  return q.x * q.y;\n}\n\n#define DSG(q) k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q)\n\nfloat ShowDig (vec2 q, int iv)\n{\n  vec2 vp, vm, vo;\n  float d;\n  int k, kk;\n  vp = vec2 (0.5, 0.5);\n  vm = vec2 (-0.5, 0.5);\n  vo = vp - vm;\n  if (iv == -1) k = 8;\n  else if (iv < 2) k = (iv == 0) ? 119 : 36;\n  else if (iv < 4) k = (iv == 2) ? 93 : 109;\n  else if (iv < 6) k = (iv == 4) ? 46 : 107;\n  else if (iv < 8) k = (iv == 6) ? 122 : 37;\n  else             k = (iv == 8) ? 127 : 47;\n  q = (q - 0.5) * vec2 (1.8, 2.3);\n  d = 0.;\n  kk = k;\n  DSG (q.yx - vo);  DSG (q.xy - vp);  DSG (q.xy - vm);  DSG (q.yx);\n  DSG (q.xy + vm);  DSG (q.xy + vp);  DSG (q.yx + vo);\n  return d;\n}\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, sgn, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (Minv2 (q) >= 0. && Maxv2 (q) < 1.) {\n    q.x *= mxChar;\n    sgn = sign (val);\n    val = abs (val);\n    nDig = (val > 0.) ? floor (max (log2 (val) / log2 (10.), 0.) + 0.001) + 1. : 1.;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (idChar == mxChar - nDig - 1. && sgn < 0.) s = ShowDig (q, -1);\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  }\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Martian Tango\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Noiseff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int npTrail = 64;  // same for image and buffer\nconst int npFst = 9;\n\nvec3 carPos, wlBase;\nfloat carRot;\nconst float pi = 3.1415927;\nconst float txRow = 128.;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat;\n  vec3 wgBxC, flPos, flVel, flAcc;\n  vec2 iFrag, canvas, cnPos, wlRot[2], ud, w, wr[2];\n  float tCur, tCurP, autoMd, cRotN, strRot, wlRad, rTurn[2], spd, tc, nStep, asp, s,\n     flDir, flDirN, flTilt, pRot, pPitch;\n  int pxId, wgSel, nFrame;\n  bool init;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (pxId >= npFst + npTrail) discard;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  init = (nFrame <= 2);\n  asp = canvas.x / canvas.y;\n  if (init) {\n    carPos = vec3 (0.);\n    carRot = 0.;\n    strRot = 0.;\n    wlBase = vec3 (1.4, 0.5, 2.);\n    wlRot[0] = vec2 (0.);\n    wlRot[1] = vec2 (0.);\n    nStep = 0.;\n    cnPos = vec2 (0.);\n    mPtrP = mPtr;\n    wgSel = 0;\n    autoMd = 1.;\n    flPos = vec3 (0.);\n    flVel = vec3 (0.);\n    flDir = 0.5 * pi;\n    flTilt = 0.;\n    pRot = 0.;\n    pPitch = 0.;\n  } else {\n    stDat = Loadv4 (0);\n    mPtrP.xyz = stDat.xyz;\n    wgSel = int (stDat.w);\n    stDat = Loadv4 (1);\n    carPos = stDat.xyz;\n    carRot = stDat.w;\n    stDat = Loadv4 (2);\n    wlBase = stDat.xyz;\n    tCurP = stDat.w;\n    stDat = Loadv4 (3);\n    nStep = stDat.x;\n    strRot = stDat.y;\n    autoMd = stDat.z;\n    stDat = Loadv4 (4);\n    wlRot[0] = stDat.xy;\n    wlRot[1] = stDat.zw;\n    stDat = Loadv4 (5);\n    cnPos = stDat.xy;\n    stDat = Loadv4 (6);\n    flPos = stDat.xyz;\n    stDat = Loadv4 (7);\n    flVel = stDat.xyz;\n    stDat = Loadv4 (8);\n    flDir = stDat.x;\n    flTilt = stDat.y;\n    pRot = stDat.z;\n    pPitch = stDat.w;\n  }\n  if (pxId < npFst) {\n    wgBxC = vec3 (0.39, -0.3, 0.135);\n    if (mPtr.z > 0.) {\n      ud = mPtr.xy * vec2 (asp, 1.) - wgBxC.xy * vec2 (asp, 1.);\n      if (wgSel == 1) {\n        autoMd = - tCur;\n        cnPos = ud;\n        s = length (cnPos);\n        if (s > 0.) cnPos = min (s, wgBxC.z) * cnPos / s;\n      } else if (mPtrP.z <= 0. && length (ud) < wgBxC.z) wgSel = 1;\n    } else {\n      wgSel = 0;\n      cnPos *= 1. - 5e-3;\n    }\n    wlRad = wlBase.y;\n    ++ nStep;\n    if (autoMd > 0.) {\n      tc = 0.005 * nStep;\n      s = 2. * Noiseff (37.1 * mod (floor (tc), 16.)) - 1.;\n      s = max (0.3, abs (s)) * sign (s);\n      strRot = 0.15 * pi * s * SmoothBump (0.2, 0.8, 0.1, mod (tc, 1.));\n      spd = 0.4 * (0.12 - 0.06 * abs (strRot / (0.12 * pi)));\n      w = vec2 (- strRot / (0.15 * pi), spd / 0.5);\n      w = pow (abs (w), 1. / vec2 (1.5)) * sign (w);\n      cnPos = w * wgBxC.z;\n    } else {\n      w = cnPos / wgBxC.z;\n      w = pow (abs (w), vec2 (1.5)) * sign (w);\n      strRot = -0.15 * pi * w.x;\n      spd = 0.06 * w.y;\n      if (tCur + autoMd > 10.) autoMd = 1.;\n    }\n    wr[0] = vec2 (1.);\n    wr[1] = wr[0];\n    flAcc = vec3 (carPos.xz - flPos.xz, 0.).xzy;\n    if (abs (strRot) > 1e-4) {\n      cRotN = carRot - strRot * spd / pi;\n      rTurn[0] = wlBase.z / asin (strRot);\n      s = wlBase.z / rTurn[0];\n      rTurn[1] = rTurn[0] * sqrt (1. - s * s);\n      carPos.xz += 2. * rTurn[0] * (sin (carRot - vec2 (0.5 * pi, 0.)) -\n         sin (cRotN - vec2 (0.5 * pi, 0.)));\n      carRot = mod (cRotN, 2. * pi);\n      wr[0] += vec2 (-1., 1.) * wlBase.x / rTurn[0];\n      wr[1] += vec2 (-1., 1.) * wlBase.x / rTurn[1];\n    } else {\n      carPos.xz += spd * sin (carRot + vec2 (0., 0.5 * pi));\n    }\n    wlRot[0] += wr[0] * spd / wlRad;\n    wlRot[1] += wr[1] * spd / wlRad;\n    flVel.xz = mix (flVel.xz, flAcc.xz, 0.003);\n    flPos.xz += 0.02 * flVel.xz;\n    flDirN = (length (flVel.xz) > 0.005) ? atan (- flVel.x, flVel.z) : flDir;\n    flDirN -= 2. * pi * sign (flDirN - flDir) * step (pi, abs (flDirN - flDir));\n    flDir = mix (flDir, flDirN, 0.01);\n    flPos.y = 6. * (1. - smoothstep (4., 10., length (flAcc)));\n    flTilt = min (0.03 * pi * length (flVel.xz), 0.1 * pi);\n    flTilt *= smoothstep (1., 2., flPos.y);\n    pRot += ((flPos.y > 0.05) ? 3. : 0.7) * pi * (tCur - tCurP);\n    pPitch = 0.05 * pi * (0.5 + 1.5 * smoothstep (0.03, 0.05, flPos.y));\n    flPos.y += 0.5 * Noiseff (tCur);\n  }\n  if (! init) {\n    if (nFrame + 5 < npTrail || mod (float (nFrame), 8.) == 0. &&\n       length (carPos.xz - Loadv4 (npFst).xy) > 0.5) {\n      if (pxId == npFst) stDat = vec4 (Loadv4 (1).xzw, 0.);\n      else if (pxId > npFst && pxId < npFst + npTrail) stDat = Loadv4 (pxId - 1);\n    } else if (pxId >= npFst && pxId < npFst + npTrail) stDat = Loadv4 (pxId);\n  } else {\n    stDat = vec4 (0., 0., -1., 0.);\n  }\n  if      (pxId == 0) stDat = vec4 (mPtr.xyz, float (wgSel));\n  else if (pxId == 1) stDat = vec4 (carPos, carRot);\n  else if (pxId == 2) stDat = vec4 (wlBase, tCur);\n  else if (pxId == 3) stDat = vec4 (nStep, strRot, autoMd, 0.);\n  else if (pxId == 4) stDat = vec4 (wlRot[0], wlRot[1]);\n  else if (pxId == 5) stDat = vec4 (cnPos, 0., 0.);\n  else if (pxId == 6) stDat = vec4 (flPos, 0.);\n  else if (pxId == 7) stDat = vec4 (flVel, 0.);\n  else if (pxId == 8) stDat = vec4 (flDir, flTilt, pRot, pPitch);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}