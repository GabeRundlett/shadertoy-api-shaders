{
    "Shader": {
        "info": {
            "date": "1525665735",
            "description": "Orbital - number 6 done for @36daysoftype instagram challenge :)\nI try using orbital formula to move the object in cute way. \nAlso experimenting with the depth to make a \"smooth aura\" and more specular stuffs while reducing the marching step.",
            "flags": 64,
            "hasliked": 0,
            "id": "Md3fzS",
            "likes": 15,
            "name": "6 - Orbital",
            "published": 3,
            "tags": [
                "cute",
                "number",
                "bubble",
                "specular",
                "orbit",
                "6",
                "orbital"
            ],
            "usePreview": 0,
            "username": "Makio64",
            "viewed": 960
        },
        "renderpass": [
            {
                "code": "// By David Ronai / @Makio64\n// Orbital - number 6 done for @36daysoftype instagram challenge :)\n// I try using orbital formula to move the object in cute way. \n// Also experimenting with the depth to make a \"smooth aura\" \n// and more \"specular stuffs\" while reducing the marching step.\n\n//------------------------------------------------------------------ VISUAL QUALITY\n#define RAYMARCHING_STEP 23\n#define RAYMARCHING_JUMP 1.\nconst float PI = 3.14159265359;\nconst float PI2 = 6.28318530718;\n\nfloat snoise(in vec2 v);\nvec3 orbit(float phi, float theta, float radius){\n\treturn vec3(\n\t\tradius * sin( phi ) * cos( theta ),\n\t\tradius * cos( phi ),\n\t\tradius * sin( phi ) * sin( theta )\n\t);\n}\n\n//------------------------------------------------------------------  SIGNED PRIMITIVES\n//http://mercury.sexy/hg_sdf/\n#define saturate(x) clamp(x, 0., 1.)\nfloat fLineSegment(vec3 p, vec3 a, vec3 b) {\n\tvec3 ab = b - a;\n\tfloat t = saturate(dot(p - a, ab) / dot(ab, ab));\n\treturn length((ab*t + a) - p);\n}\n// Capsule version 2: between two end points <a> and <b> with radius r \nfloat fCapsule(vec3 p, vec3 a, vec3 b, float r) {\n\treturn fLineSegment(p, a, b) - r;\n}\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\nfloat fTorus(vec3 p, float smallRadius, float largeRadius) {\n\treturn length(vec2(length(p.xz) - largeRadius, p.y)) - smallRadius;\n}\nfloat fOpUnionRound(float a, float b, float r) {\n\tvec2 u = max(vec2(r - a,r - b), vec2(0));\n\treturn max(r, min (a, b)) - length(u);\n}\n\nvec3 color = vec3(1.7,1.1,1.);\n\n//------------------------------------------------------------------ MAP\nfloat map( in vec3 pos ) {\n    float time = iTime * 3. ;\n    vec3 q = pos + orbit(pos.x/10.+time, (pos.y*2.+time)/1., 1.);\n    float d = fCapsule(q,vec3(10.,30.,-8.),vec3(-10.,10.,-5.),6.);\n    q = pos + vec3(0.,10.,0.) + orbit(pos.x/10.+time, (pos.y+time)/1., 2.);\n    pR(q.yz,1.2);\n    d = fOpUnionRound(fTorus(q, 8.,20.),d,5.);\n    return d;\n}\n\n//------------------------------------------------------------------ RAYMARCHING\nfloat castRay( in vec3 ro, in vec3 rd, inout float depth )\n{\n\tfloat t = 15.0;\n\tfloat res;\n\tfor( int i=0; i<RAYMARCHING_STEP; i++ )\n\t{\n\t\tvec3 pos = ro+rd*t;\n\t\tres = map( pos );\n\t\tif( res < 0.01 || t > 150. ) break;\n\t\tt += res*RAYMARCHING_JUMP;\n\t\tdepth += 1./float(RAYMARCHING_STEP);\n\t}\n\treturn t;\n}\n\nvec3 calcNormal(vec3 p) {\n\tfloat eps = 0.001;\n\tconst vec3 v1 = vec3( 1.0,-1.0,-1.0);\n\tconst vec3 v2 = vec3(-1.0,-1.0, 1.0);\n\tconst vec3 v3 = vec3(-1.0, 1.0,-1.0);\n\tconst vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\treturn normalize( v1 * map( p + v1*eps ) +\n\t\t\t\t\t  v2 * map( p + v2*eps ) +\n\t\t\t\t\t  v3 * map( p + v3*eps ) +\n\t\t\t\t\t  v4 * map( p + v4*eps ) );\n}\n\n//------------------------------------------------------------------ POSTEFFECTS\nvec3 bw( in vec3 col ) { return vec3(0.299*col.r + 0.587*col.g + 0.114*col.b); }\nvec3 postEffects( in vec3 col, in vec2 uv )\n{    \n    // gamma correction\n\t//col = pow( clamp(col,0.0,1.0), vec3(0.6) );\n\t//vignetting\n\tcol *= 0.5+0.6*pow( 8.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.8 );\n    //noise\n    col -= snoise((uv*3.+iTime)*1000.)*.1;\n    //col = mix(bw(col), col, sound*3.);\n    col*=(1.6,.9,.9);\n\treturn col;\n}\n\nvec3 addLight(in vec3 lpos, inout vec3 col, in vec3 pos, in vec3 nor, in vec3 rd, in float thi){\n\tvec3 ldir = normalize(lpos-pos);\n\tfloat latt = pow( length(lpos-pos)*.03, .5 );\n    float trans =  pow( clamp( max(0.,dot(-rd, -ldir+nor)), 0., 1.), 1.) + 1.;\n\t//col = vec3(.2,.1,.1) * (max(dot(nor,ldir),0.) ) / latt;\n\tcol += vec3(.3,.3,.1) * (trans/latt)*thi;\n    return col;\n   \n}\n\n//------------------------------------------------------------------ RENDER\n\nvec3 render( in vec3 ro, in vec3 rd, in vec2 uv )\n{\n\tfloat depth = 0.;\n\tfloat t = castRay(ro,rd,depth);\n    \n\tvec3 pos = ro + t * rd;\n\tvec3 nor = calcNormal(pos);\n\n    // lighitng        \n    vec3 lig = vec3(-0.6, 0.7, -0.5);\n    vec3 ref = reflect( rd, nor );\n    float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n    float specular = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),8.0);\n\n    float sound = texture( iChannel0, vec2( 0.01, .7 ) ).x;\n    sound *= sound;\n\n\tvec3 bg = vec3(sin(uv.x*1.1),sin(uv.y*2.),.9+sound*.8);\t\n    vec3 col = bg;\n    if(t<150.){\n        col /= 3.;\n    \tcol += max(0.,dot(nor,lig))*color;\n        col += specular*.2*sound; \n        col += fre*.2;\n    }\n    col = max(vec3(.05),col);\n\tcol += depth*vec3(1.,1.,1.)*.7+sound*.2;\n    col = mix( col, bg, 1.0-exp( -0.000001*t*t*t ));\n\treturn col;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n\treturn mat3( cu, cv, cw );\n}\n\n\n//------------------------------------------------------------------ MAIN\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = -1. + 2. * uv;\n    p.x *= iResolution.x / iResolution.y;\n    \n    //Camera\n\tfloat radius = 50.;\n\tvec3 ro = orbit(PI/2.-.4,PI/2.,radius);\n\tvec3 ta  = vec3(0.);\n\tmat3 ca = setCamera( ro, ta, 0. );\n\tvec3 rd = ca * normalize( vec3(p.xy,1.) );\n\n\t// Raymarching\n\tvec3 color = render( ro, rd, uv );\n\tcolor = postEffects( color, fragCoord.xy / iResolution.xy );\n\tfragColor = vec4(color,1.0);\n}\n\n#define X .211324865405187\n#define Y .36602540378443\nvec3 permute(in vec3 x) { return mod( x*x*34.+x, 289.); }\nfloat snoise(in vec2 v) {\n  lowp vec2 i = floor((v.x+v.y)*.36602540378443 + v),\n      x0 = (i.x+i.y)*.211324865405187 + v - i,\n       j = step(x0.yx, x0),\n      x1 = x0 - j + .211324865405187, \n      x3 = x0 - .577350269189626; \n  i = mod(i,289.);\n  lowp vec3 p = permute( permute( i.y + vec3(0, j.y, 1 ))+ i.x + vec3(0, j.x, 1 )   ),\n       m = max( .5 - vec3(dot(x0,x0), dot(x1,x1), dot(x3,x3)), 0.),\n       x = fract(p * .024390243902439) * 2. - 1.,\n       h = abs(x) - .5,\n      a0 = x - floor(x + .5);\n  return .5 + 65. * dot( pow(m,vec3(4.))*(- 0.85373472095314*( a0*a0 + h*h )+1.79284291400159 ), a0 * vec3(x0.x,x1.x,x3.x) + h * vec3(x0.y,x1.y,x3.y));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 20189,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/steffenyoshiki/why-cant-i-turn-off-the-radio"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}