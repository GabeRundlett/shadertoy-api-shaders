{
    "Shader": {
        "info": {
            "date": "1545942527",
            "description": "EuroTunnel",
            "flags": 0,
            "hasliked": 0,
            "id": "WsfGWH",
            "likes": 10,
            "name": "EuroTunnel",
            "published": 3,
            "tags": [
                "eurotunnel"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 477
        },
        "renderpass": [
            {
                "code": "// EURO TUNNEL\n \n#define PI 3.141519\n#define TAU 6.283185\n\nvec2 rot(vec2 v, float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c)*v;\n}\n\n// mercury sdf\n// Repeat around the origin by a fixed angle.\n// For easier use, num of repetitions is use to specify the angle.\nfloat pModPolar(inout vec2 p, float repetitions)\n{\n\tfloat angle = 2.0*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.0)) c = abs(c);\n\treturn c;\n}\n\nfloat pMod1(inout float p, float size)\n{\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n} \n\nfloat star5( in vec2 p, float a, float size )\n{\n    p = rot(p,a);\n    float fa = (mod( atan(p.y,p.x)*5.0 + PI/2.0, 2.0*PI ) - PI)/5.0;\n    p = length(p)*vec2( sin(fa), cos(fa) );\n    const vec2 k3 = vec2(0.951056516295,  0.309016994375); // pi/10\n    return dot( vec2(abs(p.x)-size,p.y), k3);\n}\n\n\nfloat map( in vec3 pos )\n{\n    float time = iTime;\n    pos.z -= time*0.9;\n    pos.y += sin(pos.z*0.5)*0.4;\n    pos.x += sin(pos.z*0.5)*0.1;\n    float c1 = pMod1(pos.z,0.33);\n    pos.xy = rot(pos.xy,c1*0.22+time*0.1);\n\t\n    vec2 uv = pos.xy;\n    float c = pModPolar(uv,12.0);\n    uv.x -= 1.05;\n    float d = star5(uv, time*0.6+(TAU/12.0)*-c, 0.04);\t// Pos,Ang,Size\n    float dep = 0.02;\n    vec2 e = vec2( d, abs(pos.z) - dep );\n    d = min(max(e.x,e.y),0.0) + length(max(e,0.0));\n\td-= 0.015;\n    return d;\n}\n \n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n \nvec3 render( vec2 p )\n{\n     // camera movement\t\n    float time = iTime;\n    float an = 1.5;\n    if (iMouse.z>0.5)\n\t\tan = 0.6*(time-10.0);\n\tvec3 ro = vec3( 3.0*cos(an), 0.0, 3.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n \n    // create view ray\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n \n    // raymarch\n    const float tmax = 20.0;\n    float t = 0.0;\n    for( int i=0; i<140; i++ )\n    {\n        vec3 pos = ro + t*rd;\n        float h = map(pos);\n        if( h<0.0001 || t>tmax ) break;\n        t += h*0.75;\n    }\n \n    // shading/lighting\t\n\tvec3 col0 = vec3(0,0,.7);\n\tvec3 col1 = vec3(1,.8,0);\n    vec3 tot = vec3(0.0);\n\t\n    vec3 col = col0;\n    if( t<tmax )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n        float dif = clamp( dot(nor,vec3(0.57703)), 0.0, 1.0 );\n        float amb = 0.1 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n        col = vec3(0.1,0.1,0.0)*amb + (col1)*dif;\n\t\tfloat dis = t;\n        float m = exp(-0.01*dis*dis);\n        col = mix(col0,col,m);\n    }\n \n    // gamma        \n    col = sqrt( col );\n    tot += col;\n    return tot;\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )    \n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n\tvec3 col = render(p);\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}