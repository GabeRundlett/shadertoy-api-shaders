{
    "Shader": {
        "info": {
            "date": "1676101476",
            "description": "Raymarched clouds. The clouds are not very good. This is a demo shader of a blog post, in which I dissect iq's cloud shader: https://blog.42yeah.is/rendering/2023/02/11/clouds.html",
            "flags": 0,
            "hasliked": 0,
            "id": "dtjSWW",
            "likes": 12,
            "name": "Simple LoDless Shaded Clouds",
            "published": 3,
            "tags": [
                "clouds"
            ],
            "usePreview": 0,
            "username": "42yeah",
            "viewed": 4128
        },
        "renderpass": [
            {
                "code": "float rand(vec3 p) \n{\n    return fract(sin(dot(p, vec3(12.345, 67.89, 412.12))) * 42123.45) * 2.0 - 1.0;\n}\n\nfloat valueNoise(vec3 p) \n{\n    vec3 u = floor(p);\n    vec3 v = fract(p);\n    vec3 s = smoothstep(0.0, 1.0, v);\n    \n    float a = rand(u);\n    float b = rand(u + vec3(1.0, 0.0, 0.0));\n    float c = rand(u + vec3(0.0, 1.0, 0.0));\n    float d = rand(u + vec3(1.0, 1.0, 0.0));\n    float e = rand(u + vec3(0.0, 0.0, 1.0));\n    float f = rand(u + vec3(1.0, 0.0, 1.0));\n    float g = rand(u + vec3(0.0, 1.0, 1.0));\n    float h = rand(u + vec3(1.0, 1.0, 1.0));\n    \n    return mix(mix(mix(a, b, s.x), mix(c, d, s.x), s.y),\n               mix(mix(e, f, s.x), mix(g, h, s.x), s.y),\n               s.z);\n}\n\nfloat fbm(vec3 p) \n{\n    vec3 q = p - vec3(0.1, 0.0, 0.0) * iTime;\n//    vec3 q = p;\n    int numOctaves = 4;\n    float weight = 0.5;\n    float ret = 0.0;\n    \n    // fbm\n    for (int i = 0; i < numOctaves; i++)\n    {\n        ret += weight * valueNoise(q); \n        q *= 2.0;\n        weight *= 0.5;\n    }\n    return clamp(ret - p.y, 0.0, 1.0);\n}\n\nvec3 sunDir = normalize(vec3(1.0, 1.0, 2.0));\n\nvec4 volumetricMarch(vec3 ro, vec3 rd)\n{\n    float depth = 0.0;\n    vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n    \n    for (int i = 0; i < 150; i++)\n    {\n        vec3 p = ro + depth * rd;\n        float density = fbm(p);\n        \n        // If density is unignorable...\n        if (density > 1e-3)\n        {\n            // We estimate the color with w.r.t. density\n            vec4 c = vec4(mix(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0), density), density);\n            // Multiply it by a factor so that it becomes softer\n            float dif = clamp(density - fbm(p + 0.3 * sunDir) / 0.3, 0.0, 1.0);\n            vec3 lig = vec3(1.0) + vec3(0.9, 0.7, 0.0) * dif;\n            c.rgb *= lig;\n            \n            c.a *= 0.4;\n            c.rgb *= c.a;\n            color += c * (1.0 - color.a);\n        }\n        \n        // March forward a fixed distance\n        depth += max(0.05, 0.02 * depth);\n    }\n    \n    return vec4(clamp(color.rgb, 0.0, 1.0), color.a);\n}\n\nvec3 getSky(vec3 rd)\n{\n    vec3 sc = mix(vec3(1.0), vec3(0.1, 0.5, 1.0), clamp(rd.y, -1.0, 1.0) * 0.5 + 0.5);\n    sc += max(vec3(0.0), pow(dot(rd, sunDir) * vec3(1.0, 1.0, 0.0), vec3(24.0)));\n    return sc;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;\n    vec3 ro = vec3(0.0, 1.0, iTime);\n    vec3 front = normalize(vec3(0.0, -0.3, 1.0));\n    vec3 right = normalize(cross(front, vec3(0.0, 1.0, 0.0)));\n    vec3 up = normalize(cross(right, front));\n    mat3 lookAt = mat3(right, up, front);\n    vec3 rd = lookAt * normalize(vec3(uv, 1.0));\n    vec3 skyColor = getSky(rd);\n    vec4 cloudColor = volumetricMarch(ro, rd);\n    \n    // Alpha composite with sky\n    vec3 c = clamp(cloudColor.rgb + (1.0 - cloudColor.a) * skyColor, 0.0, 1.0);\n    \n    // Gamma correction\n    c = pow(c, vec3(0.4545));\n    \n    fragColor = vec4(\n        c,\n        1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}