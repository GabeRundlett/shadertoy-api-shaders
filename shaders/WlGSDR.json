{
    "Shader": {
        "info": {
            "date": "1582488129",
            "description": "code is messy. ",
            "flags": 0,
            "hasliked": 0,
            "id": "WlGSDR",
            "likes": 12,
            "name": "Day 66",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 375
        },
        "renderpass": [
            {
                "code": "// code pretty messy\n// PBR from learnopengl.com\n// Inigo quilez volcanic(?) noise and shadows\n\n#define mx (2.*iMouse.x/iResolution.x)\n#define my (2.*iMouse.y/iResolution.x)\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n#define pmod(p, x) mod(p,x) - 0.5*x\n#define dmin(a, b) a.x < b.x ? a : b\n#define T (iTime*1. + mx)\n\nvec3 glow = vec3(0);\nfloat tt = 0.;\nfloat planeOffs = 0.;\n\n#define modD 1.\n#define ballW 0.3\n#define pathFront 0.7\n#define curve smoothstep(0.,1., exp(-p.x)*0.3)\n#define curveB smoothstep(0.,1., exp(-tt)*0.3)\nvec3 ballP(float id){\n    vec3 p = vec3(0);\n    tt += 0.06;\n    p -= mix(\n        vec3(-tt,0,0), \n        vec3(\n            0. - sqrt(abs(tt*1.975))*1.4,\n            tt*(smoothstep(0.,1.,tt*0.9))*1.8,\n            0),\n        smoothstep(0.,1.,tt));\n    \n\n\treturn p;\n}\n// Noise (from iq)\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n    \n#if 1\n\tvec2 uv = (p.xy+vec2(37.0,239.0)*p.z) + f.xy;\n    vec2 rg = textureLod(iChannel2,(uv+0.5)/256.0,0.0).yx;\n#else\n    ivec3 q = ivec3(p);\n\tivec2 uv = q.xy + ivec2(37,239)*q.z;\n\n\tvec2 rg = mix(mix(texelFetch(iChannel2,(uv           )&255,0),\n\t\t\t\t      texelFetch(iChannel2,(uv+ivec2(1,0))&255,0),f.x),\n\t\t\t\t  mix(texelFetch(iChannel2,(uv+ivec2(0,1))&255,0),\n\t\t\t\t      texelFetch(iChannel2,(uv+ivec2(1,1))&255,0),f.x),f.y).yx;\n#endif    \n\treturn -1.0+2.0*mix( rg.x, rg.y, f.z );\n}\n\nfloat noiseB (vec3 p) {\n\tvec3 f = fract (p);\n\tp = floor (p);\n\tf = f * f * (3.0 - 2.0 * f);\n\tf.xy += p.xy + p.z * vec2 (37.0, 17.0);\n\tf.xy = texture (iChannel2, (f.xy + 0.5) / 256.0, -256.0).yx;\n\treturn mix (f.x, f.y, f.z);\n}\n\n\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e6);\n    \n\tvec3 u = p;\n    // balls\n    float id = floor(p.z/modD);\n    p.z = pmod(p.z,modD);\n    vec3 q = p;\n    q = p;\n    q.y -= curve;\n    q = abs(q);\n    \n    q.zy -= exp(-abs(p.x - 0.7)*20.)*0.1;\n    q.zy -= ballW*0.75;\n    \n    float path = length(q.zy) - 0.02;\n    \n    \n    path = max(path, p.x - pathFront);\n    \n    d = dmin(d, vec2(path, 1.));\n    \n    q = p;\n    \n    planeOffs = sin((u.z - T)*0.5 + 0.9)*0.1 + 0.1;\n    float planeOffsBall = sin((floor(u.z + 0.) - T )*0.5 + 0.9)*0.06 + 0.1;\n    u = p;\n    \n    vec3 n = p;\n    q.y -= planeOffs;\n    u.y -= planeOffs;\n    q.y += 0.33;\n    float dCatcher = q.y + 1.;\n    q.y += 1.;\n    q.x -= 1.7;\n    \n    q.z += 0.03;\n    dCatcher = max(dCatcher, - length(q) + ballW);\n    \n    float dcn = noise(u*20.);\n    dCatcher = max(dCatcher, q.x  - ballW*1.2);\n    dCatcher = max(dCatcher, -q.x - 0.7 + ballW*1.2);\n    \n    dCatcher += dcn*0.01;\n    d = dmin(d,vec2( dCatcher, 3.));\n    \n    tt = -id + T;\n    p.y -= curveB;\n    \n    \n    if(tt < +0.75){\n    \tp -= ballP(id);\t\n        //p.y += 0.06;\n    } else {\n        p.y += 1.36 - planeOffsBall;\n        p.x -= 1.7;\n        //p.z += 0.05;\n    }\n    \n    p -=  vec3(0.,-0.08,0.0);\n    d = dmin(d,vec2( length(p) - ballW*0.95, 2.));\n    \n        \n    d = dmin(d,vec2(\n        max(length(p) - ballW*1.,\n        length(p.xy) - 0.1)\n        , 1.));\n    \n    n = u;\n    n.y += 1.4;\n    n.x -= 1.7;\n    n = abs(n);\n    n.xz -= 0.36;\n    p = n;\n    \n    \n    \n    u.y += 1.33;\n    u.z -= modD*0.5;\n    //u.y -= 0.04;\n    \n    n = abs(n);\n    n.yz *= rot(-0.2*PI);\n    \n    d = dmin(d,vec2( length(n.xz) - ballW*0.02, 5.));\n    \n    d = dmin(d,vec2( max(length(p.xz) - ballW*0.02, u.y + 1.41), 5.));\n    \n    \n    p.y += (p.x)*0.001;\n    d = dmin(d,vec2( length(p.zy) - ballW*0.02, 5.));\n    \n    \n    d.x *= 0.5;\n    return d;\n}\n\nvec2 march(vec3 ro, vec3 rd, inout vec3 p, inout float t, inout bool hit){\n\tvec2 d = vec2(10e5);\n\tt = 0.; hit = false; p = ro;\n    for(int i = 0; i < 150; i++){\n    \td = map(p);\n        glow += exp(-d.x*20.);\n        if (d.x < 0.001){\n        \thit = true;\n            break;\n        }\n        t += d.x;\n        p = ro + rd*t;\n    }\n    return d;\n}\n\nvec3 getNormal(vec3 p){\n\tvec2 t = vec2(0.001,0);\n\treturn normalize(map(p).x - vec3(\n    \tmap(p-t.xyy).x,\n    \tmap(p-t.yxy).x,\n    \tmap(p-t.yyx).x\n    ));\n}\n\nvec3 getRd(vec3 ro,vec3 lookAt,vec2 uv){\n    vec3 dir = normalize(lookAt - ro);\n    vec3 right = normalize(cross(vec3(0,1,0), dir));\n    vec3 up = normalize(cross(dir, right));\n    return normalize(dir + (right*uv.x + up*uv.y)*0.4);\n}\nvec3 getRdIso(inout vec3 ro,vec3 lookAt,vec2 uv){\n    vec3 dir = normalize(lookAt - ro);\n    vec3 right = normalize(cross(vec3(0,1,0), dir));\n    vec3 up = normalize(cross(dir, right));\n    ro += (right*uv.x + up*uv.y)*3.;\n    ro.y += 0.2;\n    ro.x += 0.5;\n    //dir.yz *= rot(0.3);\n    //dir.xz *= rot(0.17);\n    return dir;\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax, int technique )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n\n        // traditional technique\n        if( technique==0 )\n        {\n        \tres = min( res, 10.0*h/t );\n        }\n        // improved technique\n        else\n        {\n            // use this if you are getting artifact on the first iteration, or unroll the\n            // first iteration out of the loop\n            //float y = (i==0) ? 0.0 : h*h/(2.0*ph); \n\n            float y = h*h/(2.0*ph);\n            float d = sqrt(h*h-y*y);\n            res = min( res, 10.0*d/max(0.0,t-y) );\n            ph = h;\n        }\n        \n        t += h;\n        \n        if( res<0.001 || t>tmax ) break;\n        \n    }\n    return clamp( res, 0., 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    uv *= 1. - dot(uv,uv)*0.1;\n    \n    vec3 col = mix(\n        vec3(0.001,0.001,0.001),\n        vec3(0.001,0.01,0.01),\n        dot(uv,uv)*0.5\n    )*0.02;\n    \n    vec3 ro = vec3(0);\n    //ro.z -= 2. + sin(my)*20.;\n    ro.z += T - 5.;\n    ro.y += 1.2;\n    //ro.y += sin(iTime)*0.2 + 1.2;\n    ro.x += 5.;\n    \n    vec3 lookAt = ro + vec3(-2.,-0.8,2);\n    vec3 rd = getRd(ro, lookAt,uv);\n     rd = getRdIso(ro, lookAt,uv);\n    ro -= normalize(lookAt - ro)*0.19;\n    //rd.xz *= rot(sin(mx));\n    \n    bool hit; float t; vec3 p;\n    vec2 d = march(ro, rd, p, t, hit);\n    \n    if(hit){\n        vec3 albedo = vec3(1.);\n        \n        vec3 lightCol = vec3(1.2,1.1,1.1)*2.;\n\n        //vec3 L = normalize(l - p);\n        vec3 L= normalize(vec3(0.004,0.3,-0.4)); vec3 l = L;\n        \n        vec3 n = getNormal(p);\n        vec3 H = normalize(L - rd);\n\n\n        float metalness = 0.9;\n        float roughness = 0.4 ;\n        \n        \n            float f = fbm(p*2.);\n        if(d.y == 3.){\n            \n    \t\tn.xy += f*0.43;\n            n = normalize(n);\n            metalness = 0.9;\n\n            roughness = 0.5;\n            roughness += f*0.7;\n            \n        \talbedo = vec3(0.3,0. ,0.01)*0.4;\n        }\n        if(d.y == 1.){\n            metalness = 0.9;\n            roughness = 0.4 ;\n            albedo = vec3(0.99,0.9,0.2)*1.;\n        \n        }\n        if(d.y == 2.){\n            metalness = 0.5;\n            roughness = 0.4 + f *0.4 ;\n            albedo = vec3(0.,0.,0.);\n        \n        }\n        if(d.y == 5.){\n            metalness = 0.;\n            roughness = 0.4 + f *0.4 ;\n            albedo = vec3(2.);\n        \n        }\n        \n        vec3 F0 = vec3(0.03);\n        vec3 N = n;\n        vec3 V = normalize(ro - p);\n\n        F0 = mix(F0, albedo, metalness);\n\n        // calculate per-light radiance\n        float distL    = length(l - p)*1.;\n        float attenuation = 1. / (distL * distL);\n        \n        //attenuation = clamp(attenuation, 0., 1.);\n        attenuation = 1.;\n        vec3 radiance     = lightCol * attenuation;        \n\n        // cook-torrance brdf\n        float NDF = DistributionGGX(N, H, roughness);   \n        float G   = GeometrySmith(N, V, L, roughness);      \n        vec3 F    = fresnelSchlick(clamp(dot(N, V), 0.0, 1.0), F0);     \n\n        vec3 kS = F;\n        vec3 kD = vec3(1.0) - kS;\n        kD *= 1.0 - metalness;\t  \n\n        vec3 numerator    = NDF * G * F;\n        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);\n        vec3 specular     = numerator / max(denominator, 0.001);  \n\n        // add to outgoing radiance Lo\n        float NdotL = max(dot(N, L), 0.0); \n        \n        col = (kD * albedo / PI + specular) * radiance * NdotL * attenuation; \n        \n        col *=  calcSoftshadow( p,l, 0.04, 10., 0 );\n        \n    }\n    \n    \n    col *= 1. - dot(uv*0.5,uv*0.5)*4.;\n    col *= 1.5;\n    \n    col = mix(col, smoothstep(0.,1., col), 0.4);\n    col.r *= 1.;\n    col.b *= 1.0;\n    col = pow(col, vec3(0.45));\n    \n    //col += glow*0.01;\n    \n    \n    fragColor = vec4(col,t);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define MIPLVL 1.\n\n#define PI acos(-1.)\n#define tau (2.*PI)\n#define R iResolution.xy\n\nvec4 gaussian(sampler2D chan, vec2 uv, vec2 iResolution, float mip){\n    float st = 4.;\n    vec3 t = vec3(st, 0., -st);\n    vec4 C = vec4(0);\n\t#define TC(uv) texture(chan, (uv)/R, mip) \n    // don't do defines like this lol\n    C += 4.*TC(uv);\n    C += 2.*TC(uv - t.xy) + 2.*TC(uv + t.xy) + 2.*TC(uv - t.yx) + 2.*TC(uv - t.yx);\n    C += 1.*TC(uv - t.xx) + 1.*TC(uv + t.xx) + 2.*TC(uv - t.xz) + 2.*TC(uv - t.xz);\n\n    return C / 16.;\n}\n\nfloat DistributionGGX(vec3 N, vec3 H, float roughness)\n{\n    float a = roughness*roughness;\n    float a2 = a*a;\n    float NdotH = max(dot(N, H), 0.0);\n    float NdotH2 = NdotH*NdotH;\n\n    float nom   = a2;\n    float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n    denom = PI * denom * denom;\n\n    return nom / max(denom, 0.001); // prevent divide by zero for roughness=0.0 and NdotH=1.0\n}\n\n\nfloat distributionTerm(float roughness, float ndoth) {\n\tfloat r2 = roughness * roughness;\n\tfloat d\t = (ndoth * r2 - ndoth) * ndoth + 1.0;\n\treturn r2 / (d * d * PI);\n}\n\nfloat D_GGX(float NoH, float roughness)\n{\n\tfloat a = roughness * roughness;\n    float a2 = a * a;\n    float nom = a2;\n    float denom = (NoH * NoH * (a2 - 1.0) + 1.0);\n\tdenom = PI * denom * denom;\n    \n    return nom / denom;\n}\n\n\n// ----------------------------------------------------------------------------\nfloat GeometrySchlickGGX(float NdotV, float roughness)\n{\n    float r = (roughness + 1.0);\n    float k = (r*r) / 8.0;\n\n    float nom   = NdotV;\n    float denom = NdotV * (1.0 - k) + k;\n\n    return nom / denom;\n}\n// ----------------------------------------------------------------------------\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)\n{\n    float NdotV = max(dot(N, V), 0.0);\n    float NdotL = max(dot(N, L), 0.0);\n    float ggx2 = GeometrySchlickGGX(NdotV, roughness);\n    float ggx1 = GeometrySchlickGGX(NdotL, roughness);\n\n    return ggx1 * ggx2;\n}\n// ----------------------------------------------------------------------------\nvec3 fresnelSchlick(float cosTheta, vec3 F0)\n{\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\n}\n\n\nfloat random(vec2 u){\n\treturn fract(sin(u.y*4125.1 + u.x *125.625)*225.5235);\n} \n\nfloat noise(vec2 p) {\n\tvec2 i = ceil(p);\n    vec2 f = fract(p);\n    vec2 u = f * f * (3. - 2. * f);\n   \tfloat a = random(i);\n    float b = random(i + vec2(1., 0.));\n    float c = random(i + vec2(0., 1.));\n    float d = random(i + vec2(1., 1.));\n    return mix(mix(a, b, u.x), mix(c, d, u.x), u.y);\n}\n\nfloat r31(vec3 u){\n\treturn fract(sin(u.y*125.1 + u.x *125.125 + u.z*525.5215)*115.125235);\n} \nfloat valueNoise(vec3 uv){\n    vec3 id = floor(uv);\n    vec3 fd = fract(uv);\n    fd = smoothstep(0.,1., fd);\n    \n    float ibl = r31(id + vec3(0,-1,0));\n    float ibr = r31(id + vec3(1,-1,0));\n    float itl = r31(id + vec3(0));\n    float itr = r31(id + vec3(1,0,0));\n    \n    \n    float jbl = r31(id + vec3(0,-1,1));\n    float jbr = r31(id + vec3(1,-1,1));\n    float jtl = r31(id + vec3(0,0, 1));\n    float jtr = r31(id + vec3(1,0, 1));\n    \n    \n    float ibot = mix(ibl, ibr, fd.x); \n    float iup = mix(itl, itr, fd.x);\n    float jbot = mix(jbl, jbr, fd.x);\n    float jup = mix(jtl, jtr, fd.x);\n    \n    float i = mix(ibot, iup, fd.y);\n    float j = mix(jbot, jup, fd.y);\n    \n    return mix(i, j, fd.z); \n}\n\nfloat fbm(vec3 p) { \n\tfloat s = .0;\n\tfloat m = .0;\n\tfloat a = .5;\t\n\tfor(int i = 0; i < 6; i++) {\n\t\ts += a * valueNoise(p);\n\t\tm += a;\n\t\ta *= .5;\n\t\tp *= 2.;\n\t}\n\treturn s / m;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}