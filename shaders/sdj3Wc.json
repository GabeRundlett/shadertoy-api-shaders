{
    "Shader": {
        "info": {
            "date": "1618070560",
            "description": "There once was a ship that put to sea\nAnd the name of that ship was the Billy o' Tea\nThe winds blew hard, her bow dipped down\nBlow, me bully boys, blow (huh)",
            "flags": 64,
            "hasliked": 0,
            "id": "sdj3Wc",
            "likes": 14,
            "name": "Pixellerman",
            "published": 3,
            "tags": [
                "pixel",
                "boat",
                "retrowave"
            ],
            "usePreview": 1,
            "username": "z0rg",
            "viewed": 429
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\nvec3 gradient(float f)\n{\n    vec3 cols[3];\n    \n    cols[0] = vec3(0.169,0.086,0.816);\n    cols[1] = vec3(0.835,0.216,0.843);\n    cols[2] = vec3(1.,1.,1.);\n    \n    float cnt = 2.;\n    float cur = f*cnt;\n    float curIdx = floor(cur);\n    return mix(cols[int(curIdx)], cols[int(min(curIdx+1., cnt))], sat(fract(cur)));\n}\n\nfloat lenny(vec2 v)\n{\n    return abs(v.x)+abs(v.y);\n}\n\nfloat _loz(vec2 p, float r)\n{\n    return lenny(p)-r;\n}\n\nfloat _cir(vec2 p, float r)\n{\n    return length(p)-r;\n}\nfloat _sqr(vec2 p, vec2 s)\n{\n    vec2 l = abs(p)-s;\n    return max(l.x, l.y);\n}\n\nfloat _boat(vec2 p)\n{\n    vec2 op = p;\n    p.y = abs(p.y)-.08;\n    p.y+=sin(iTime*3.)*.005;\n    p.x = mod(p.x-iTime*.05, 2.)-1.;\n    vec2 c = vec2(0.,-.1);\n    p-=c;\n    p *= r2d(sin(iTime*2.)*.1);\n    p+=c;\n    float base = max(_cir(p, .1),p.y+.05);\n    base = min(base, _sqr(p, vec2(0.005,.1)));\n    base = min(base, max(_loz(p*vec2(3.,.75)+vec2(p.y*.75-.12,0.025),.1), -p.y-.04));\n    if (op.y < 0.)\n    base = max(max(base, sin(p.y*500.)+.8), abs(p.x)-0.05-sin(p.y*150.-iTime*2.)*.025);\n    return base;\n}\n\nfloat _fence(vec2 p)\n{\n    p -= vec2(-0.1,-.3);\n    vec2 op = p;\n    p.y = abs(p.y)-.05;\n\n    p.x = min(p.x,0.15);\n\n    float rep = .1;\n    p.x = mod(p.x+.5*rep, rep)-.5*rep;\n    float bar = _sqr(p, vec2(.01,.05));\n    \n    float top = _sqr(p-vec2(0.,.05), vec2(.4,.015));\n    \n    float base = min(bar, top);\n    base = max(base, op.x-.05);\n    if (op.y < 0.)\n        base = max(max(base, sin(op.y*500.)+.8), abs(p.x)-0.01-sin(p.y*150.-iTime*2.)*.01);\n    return base;\n}\n\n#define FFT(f) texelFetch(iChannel1, ivec2(f, 0),0).x\n\nvec3 rdr(vec2 uv, vec2 fragCoord)\n{\n    float stp = 0.005;// mix(0.005,0.1, sat(.5+.5*asin(sin(iTime*.5))/1.57));\n    uv = floor(uv/stp)*stp;\n    vec3 col;\n    \n    col = gradient(sat(-uv.y*3.+.75));\n    \n    vec2 sPos = uv*vec2(1.,sign(uv.y))-vec2(0.,.1+sin(iTime*.25)*.1);\n\n    float sun = _cir(sPos, .15);\n\n    if (uv.y < 0.)\n    {\n        float sunborder = abs(sPos.x)-.1-.05*sin(sPos.y*150.+iTime);\n        sun = max(max(sun, (sin(uv.y*500.)+.8)), sunborder);\n    }\n    \n    col = mix(col, vec3(0.055,0.408,0.867), sat(-uv.y*400.));\n    col += pow(texture(iChannel0, uv).x, 25.);\n    \n    col += 2.*pow(1.-sat(lenny((uv-vec2(.55,.25))*.25)*5.),15.)*vec3(1.)*pow(sat(FFT(50)), .75);\n    col += pow(1.-sat(lenny((uv-vec2(.35,.15))*.25)*15.),15.)*vec3(1.)*pow(sat(FFT(50)+.25), .75);\n    col += pow(1.-sat(lenny((uv-vec2(.35,.15))*.25)*15.),15.)*vec3(1.)*pow(sat(FFT(100)+.25), .75);\n    col += pow(1.-sat(lenny((uv-vec2(-.35,.25))*.25)*15.),15.)*vec3(1.)*pow(sat(FFT(150)+.25), .75);\n\n    \n    col = mix(col, mix(vec3(1.000,0.784,0.000), vec3(1.,0.,0.), 1.-sat(sPos.y*16.+1.75)), 1.-sat(sun*400.));\n    \n    float boat = _boat(uv-vec2(0.4,-0.05));\n    col = mix(col, vec3(0.), 1.-sat(boat*400.));\n    \n    float fence = _fence(uv);\n    col = mix(col, vec3(0.), 1.-sat(fence*400.));\n    \n\n\n    \n    col += (texture(iChannel0, uv*2.).x-.5)*.1;\n    vec2 uvv = uv; // vignette\n    uvv.x = mod(uvv.x-iTime*.05-.4, 2.)-1.;\n    col *= pow(sat(1.-sat(length((uvv)*2.)-.5)+.35),.5)*max(pow(FFT(10),.25),.5);\n    col += vec3(1.000,0.784,0.000)*1.5*col*pow(1.-sat(lenny(2.*sPos*vec2(1.,1.))-.35), 1.);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n\n    vec3 col = rdr(uv*1.5-vec2(-0.2,-.05), fragCoord);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 28068,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/sephcarissa/the-wellerman-8-bit-version"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}