{
    "Shader": {
        "info": {
            "date": "1724639263",
            "description": "originals https://www.shadertoy.com/view/DtGyWh# https://glslsandbox.com/e#76561.0 https://www.shadertoy.com/view/4tyfWy",
            "flags": 0,
            "hasliked": 0,
            "id": "lfBfz1",
            "likes": 0,
            "name": " colorful Kaleidoscope 17",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 70
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*0.5+.5)\n\n#define time iTime\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n    vec2(12.9898,78.233)))\n    * 43758.5453123);\n}\n\nfloat rand( vec2 p ) { return fract( sin( dot(p, vec2( 12.9898, 78.233 ) ) ) * 43758.5453 + time * .35 ); }\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n    (c - a)* u.y * (1.0 - u.x) +\n    (d - b) * u.x * u.y;\n}\n\nconst float pi = acos(-1.);\nconst float pi2 = pi * 2.;\n\nvec3 lightDir = vec3(0.5, .5, -.5);\n\nmat2 rot(float a){\n\tfloat s = sin(a), c = cos(a);\n\treturn mat2(c, s, -s, c);\n}\n\nvec2 pmod(vec2 p, float d){\n\tfloat a = atan(p.x, p.y) + pi / d;\n\tfloat n = pi2 / d;\n\ta = floor(a / n) * n;\n\treturn p * rot(-a);\n}\n\nfloat sdBox(vec3 p, vec3 b){\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, 0.)) + min(max(max(d.x, d.y), d.z), 0.);\n}\n\nfloat sdSphere(vec3 p, float r){\n\treturn length(p) - r;\n}\n\nfloat map(vec3 p){\n\t\n\tp.xy = pmod(p.xy, 4.);\n\tp.y -= 2.;\n\tp.z = mod(p.z, 8.) - 4.;\n\tfloat d1 = sdBox(p, vec3(1., .3, .4));\n\tfor(int i = 0; i< 4; i++){\n\t\tp = abs(p) - 1.;\n\t\tp.xy *= rot(time * .3);\n\t\tp.xz *= rot(time * .45);\n\t}\n\td1 = min(d1, sdBox(p, vec3(1., .3, .4)));\n\treturn d1;\n}\n\nvec3 genNormal(vec3 p){\n\tvec2 d = vec2(0.001, 0.);\n\treturn normalize(vec3(\n\t\tmap(p + d.xyy) - map(p - d.xyy),\n\t\tmap(p + d.yxy) - map(p - d.yxy),\n\t\tmap(p + d.yyx) - map(p - d.yyx)\n\t\t));\n}\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    \tvec2 uv = (C.xy / iResolution.xy) - .5;\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    float t2 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + 1.07)) * 3.2;\n\tfloat si = sin(t2);\n\tfloat co = cos(t2);\n\tmat2 ma = mat2(co, si, -si, co);\n  \n   vec3 p3,r3=iResolution,c=vec3(0),\n   \n    d3=normalize(vec3((C-.5*r.xy)/r.y,1));\n \n    float s3,e,g3=0.,t3=iTime;\n    for(float i=0.;i<99.;++i)\n    {\n   \n        p3=g3*d3;\n         p3.xy*=ma*2.9;\n        p3=R(p3,vec3(vec2(1.0,0.5)*ma,0.5),iTime);  \n         ;\n        p3.z-=t3;\n        p3=sin(p3);\n        s3=2.;\n        for(int i=0;i<5;++i)\n        {\n        \n           s3*=e=2./min(dot(p3,p3),1.);\n           p3=abs(p3)*e-vec3(10,10,15);\n        }\n        g3+=e=abs(length(p3.xy-clamp(p3.xy,-.5,.5))/s3)+.005;        \n        c+=mix(vec3(1),H(log(s3)*.5),.3)*12e-5*exp(sin(i))/e;\n    }\n    c*=c*c*c*c;\n  \n  \n  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    \n    \n    \n    {\n    \n        p=g*d;\n      \n         \n         \n         \n         float normal = map(p);\n        \n        a=20.;\n        p=mod(p-a,a*2.)-a;\n        s=3.;\n        for(int i=0;i++<8;){\n      \n            p=.3-abs(p);\n            \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n       \n            s*=e=1.4+sin(iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+cos(iTime*.3+.5*cos(iTime*.3))*3.,\n                    70,\n                    4.+cos(iTime*.5)*5.\n                 )*c;\n         }\n      \n         g+=e=length(p.yx)/s;\n    }\n      uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n   O*= vec4(cheap_star(uv, anim) * vec3(0.35,0.2,1.15), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}