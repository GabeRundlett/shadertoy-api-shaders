{
    "Shader": {
        "info": {
            "date": "1591974243",
            "description": "small exercise in glsl",
            "flags": 0,
            "hasliked": 0,
            "id": "3lscW8",
            "likes": 5,
            "name": "This is fine fire",
            "published": 3,
            "tags": [
                "fire",
                "meme"
            ],
            "usePreview": 0,
            "username": "akella",
            "viewed": 475
        },
        "renderpass": [
            {
                "code": "vec3 flame1 = vec3(0.994, 0.904, 0.216);\nvec3 flame2 = vec3(0.993, 0.719, 0.000);\nvec3 border = vec3(0.211, 0.193, 0.002);\n\n\n// Worley noise  https://github.com/Erkaman/glsl-worley\n// Permutation polynomial: (34x^2 + x) mod 289\nvec3 permute(vec3 x) {\n  return mod((34.0 * x + 1.0) * x, 289.0);\n}\n\nvec3 dist(vec3 x, vec3 y, vec3 z,  bool manhattanDistance) {\n  return manhattanDistance ?  abs(x) + abs(y) + abs(z) :  (x * x + y * y + z * z);\n}\n\nvec2 worley(vec3 P, float jitter, bool manhattanDistance) {\nfloat K = 0.142857142857; // 1/7\nfloat Ko = 0.428571428571; // 1/2-K/2\nfloat  K2 = 0.020408163265306; // 1/(7*7)\nfloat Kz = 0.166666666667; // 1/6\nfloat Kzo = 0.416666666667; // 1/2-1/6*2\n\n  vec3 Pi = mod(floor(P), 289.0);\n   vec3 Pf = fract(P) - 0.5;\n\n  vec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);\n  vec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);\n  vec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);\n\n  vec3 p = permute(Pi.x + vec3(-1.0, 0.0, 1.0));\n  vec3 p1 = permute(p + Pi.y - 1.0);\n  vec3 p2 = permute(p + Pi.y);\n  vec3 p3 = permute(p + Pi.y + 1.0);\n\n  vec3 p11 = permute(p1 + Pi.z - 1.0);\n  vec3 p12 = permute(p1 + Pi.z);\n  vec3 p13 = permute(p1 + Pi.z + 1.0);\n\n  vec3 p21 = permute(p2 + Pi.z - 1.0);\n  vec3 p22 = permute(p2 + Pi.z);\n  vec3 p23 = permute(p2 + Pi.z + 1.0);\n\n  vec3 p31 = permute(p3 + Pi.z - 1.0);\n  vec3 p32 = permute(p3 + Pi.z);\n  vec3 p33 = permute(p3 + Pi.z + 1.0);\n\n  vec3 ox11 = fract(p11*K) - Ko;\n  vec3 oy11 = mod(floor(p11*K), 7.0)*K - Ko;\n  vec3 oz11 = floor(p11*K2)*Kz - Kzo; // p11 < 289 guaranteed\n\n  vec3 ox12 = fract(p12*K) - Ko;\n  vec3 oy12 = mod(floor(p12*K), 7.0)*K - Ko;\n  vec3 oz12 = floor(p12*K2)*Kz - Kzo;\n\n  vec3 ox13 = fract(p13*K) - Ko;\n  vec3 oy13 = mod(floor(p13*K), 7.0)*K - Ko;\n  vec3 oz13 = floor(p13*K2)*Kz - Kzo;\n\n  vec3 ox21 = fract(p21*K) - Ko;\n  vec3 oy21 = mod(floor(p21*K), 7.0)*K - Ko;\n  vec3 oz21 = floor(p21*K2)*Kz - Kzo;\n\n  vec3 ox22 = fract(p22*K) - Ko;\n  vec3 oy22 = mod(floor(p22*K), 7.0)*K - Ko;\n  vec3 oz22 = floor(p22*K2)*Kz - Kzo;\n\n  vec3 ox23 = fract(p23*K) - Ko;\n  vec3 oy23 = mod(floor(p23*K), 7.0)*K - Ko;\n  vec3 oz23 = floor(p23*K2)*Kz - Kzo;\n\n  vec3 ox31 = fract(p31*K) - Ko;\n  vec3 oy31 = mod(floor(p31*K), 7.0)*K - Ko;\n  vec3 oz31 = floor(p31*K2)*Kz - Kzo;\n\n  vec3 ox32 = fract(p32*K) - Ko;\n  vec3 oy32 = mod(floor(p32*K), 7.0)*K - Ko;\n  vec3 oz32 = floor(p32*K2)*Kz - Kzo;\n\n  vec3 ox33 = fract(p33*K) - Ko;\n  vec3 oy33 = mod(floor(p33*K), 7.0)*K - Ko;\n  vec3 oz33 = floor(p33*K2)*Kz - Kzo;\n\n  vec3 dx11 = Pfx + jitter*ox11;\n  vec3 dy11 = Pfy.x + jitter*oy11;\n  vec3 dz11 = Pfz.x + jitter*oz11;\n\n  vec3 dx12 = Pfx + jitter*ox12;\n  vec3 dy12 = Pfy.x + jitter*oy12;\n  vec3 dz12 = Pfz.y + jitter*oz12;\n\n  vec3 dx13 = Pfx + jitter*ox13;\n  vec3 dy13 = Pfy.x + jitter*oy13;\n  vec3 dz13 = Pfz.z + jitter*oz13;\n\n  vec3 dx21 = Pfx + jitter*ox21;\n  vec3 dy21 = Pfy.y + jitter*oy21;\n  vec3 dz21 = Pfz.x + jitter*oz21;\n\n  vec3 dx22 = Pfx + jitter*ox22;\n  vec3 dy22 = Pfy.y + jitter*oy22;\n  vec3 dz22 = Pfz.y + jitter*oz22;\n\n  vec3 dx23 = Pfx + jitter*ox23;\n  vec3 dy23 = Pfy.y + jitter*oy23;\n  vec3 dz23 = Pfz.z + jitter*oz23;\n\n  vec3 dx31 = Pfx + jitter*ox31;\n  vec3 dy31 = Pfy.z + jitter*oy31;\n  vec3 dz31 = Pfz.x + jitter*oz31;\n\n  vec3 dx32 = Pfx + jitter*ox32;\n  vec3 dy32 = Pfy.z + jitter*oy32;\n  vec3 dz32 = Pfz.y + jitter*oz32;\n\n  vec3 dx33 = Pfx + jitter*ox33;\n  vec3 dy33 = Pfy.z + jitter*oy33;\n  vec3 dz33 = Pfz.z + jitter*oz33;\n\n  vec3 d11 = dist(dx11, dy11, dz11, manhattanDistance);\n  vec3 d12 =dist(dx12, dy12, dz12, manhattanDistance);\n  vec3 d13 = dist(dx13, dy13, dz13, manhattanDistance);\n  vec3 d21 = dist(dx21, dy21, dz21, manhattanDistance);\n  vec3 d22 = dist(dx22, dy22, dz22, manhattanDistance);\n  vec3 d23 = dist(dx23, dy23, dz23, manhattanDistance);\n  vec3 d31 = dist(dx31, dy31, dz31, manhattanDistance);\n  vec3 d32 = dist(dx32, dy32, dz32, manhattanDistance);\n  vec3 d33 = dist(dx33, dy33, dz33, manhattanDistance);\n\n  vec3 d1a = min(d11, d12);\n  d12 = max(d11, d12);\n  d11 = min(d1a, d13); // Smallest now not in d12 or d13\n  d13 = max(d1a, d13);\n  d12 = min(d12, d13); // 2nd smallest now not in d13\n  vec3 d2a = min(d21, d22);\n  d22 = max(d21, d22);\n  d21 = min(d2a, d23); // Smallest now not in d22 or d23\n  d23 = max(d2a, d23);\n  d22 = min(d22, d23); // 2nd smallest now not in d23\n  vec3 d3a = min(d31, d32);\n  d32 = max(d31, d32);\n  d31 = min(d3a, d33); // Smallest now not in d32 or d33\n  d33 = max(d3a, d33);\n  d32 = min(d32, d33); // 2nd smallest now not in d33\n  vec3 da = min(d11, d21);\n  d21 = max(d11, d21);\n  d11 = min(da, d31); // Smallest now in d11\n  d31 = max(da, d31); // 2nd smallest now not in d31\n  d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;\n  d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx; // d11.x now smallest\n  d12 = min(d12, d21); // 2nd smallest now not in d21\n  d12 = min(d12, d22); // nor in d22\n  d12 = min(d12, d31); // nor in d31\n  d12 = min(d12, d32); // nor in d32\n  d11.yz = min(d11.yz,d12.xy); // nor in d12.yz\n  d11.y = min(d11.y,d12.z); // Only two more to go\n  d11.y = min(d11.y,d11.z); // Done! (Phew!)\n  return sqrt(d11.xy); // F1, F2\n\n}\n\n\nfloat aastep(float threshold, float value) {\n  #ifdef GL_OES_standard_derivatives\n    float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;\n    return smoothstep(threshold-afwidth, threshold+afwidth, value);\n  #else\n    return step(threshold, value);\n  #endif  \n}\n\nvec3 getFlame(float fl){\n  vec3 color = vec3(0.5);\n  float step1 = aastep(0.5,fl);\n  float step2 = aastep(0.78,fl) - aastep(0.8,fl);\n  float step21 = aastep(0.46,fl) - aastep(0.5,fl);\n  float step3 = -aastep(0.78,fl) + aastep(0.5,fl);\n  color =mix(color, step1*flame1 , step1);\n  color =mix(color, step3*flame2 , step3);\n  color =mix(color, step2*border , step2);\n  color =mix(color, step21*border , step21);\n  return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // fra\n    float t = floor(iTime*5.)/5.;\n    float n = 1. - worley(\n        vec3(\n    \t\t0.1*uv.x * 90.,\n    \t\t0.1*uv.y * 10. -2.*t,\n    \t\tt/3.\n    ), 1., true).x;\n\n\n    float dist = smoothstep( 0.4,1.2,length(uv - vec2(0.5, 1.1)));\n    float s1 = 2.*(dist - 0.5);\n    float fl = n + s1;\n\n\n    fragColor = vec4(getFlame(fl), 1.0);\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}