{
    "Shader": {
        "info": {
            "date": "1705582383",
            "description": "RayMarching Rope",
            "flags": 0,
            "hasliked": 0,
            "id": "McXSRX",
            "likes": 4,
            "name": "RayMarching Rope",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "misterprada",
            "viewed": 171
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 80\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\n\nvec3 col = vec3(0);\n\n// Custom gradient - https://iquilezles.org/articles/palettes/\nvec3 palette(float t) {\n    return .5+.5*cos(6.28318*(t+vec3(.3,.416,.557)));\n}\n\n// Polynomial smooth min (for copying and pasting into your shaders)\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\n\n// 2D rotation function\nmat2 rot2D(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\n// Camera rotation\nvoid cam(inout vec3 p, float t) {\n  t*=0.3;\n  p.xz *= rot2D(sin(t)*0.3);\n  p.xy *= rot2D(sin(t*0.7)*0.4);\n}\n\n\nfloat sdOctahedron(vec3 p, float s) {\n    p = abs(p);\n    return (p.x+p.y+p.z-s)*0.57735027;\n}\n\n/*\nfloat GetDistOLD(vec3 p) {\n    vec3 q = p;\n    \n    q.z += iTime * .4;\n    \n    q.xy = fract(q.xy) - 0.5;\n    //q.z = mod(p.z, 0.25) - 0.125;\n    \n   \n   \n    //q.xy *= rot2D(iTime);\n\n    vec3 spherePos = vec3(sin(iTime) * 3., 0, 0);\n    float sphere = sdSphere(p - spherePos, 1.0);\n    \n    float box = sdBox(q, vec3(.1));\n    \n    float ground = p.y + .75;\n    \n    return smin(ground, smin(sphere, box, 0.5), 0.3);\n} */\n\n\nfloat GetDist(vec3 p) {\n    p.z += iTime * .4;\n    \n    p.xy = fract(p.xy) - 0.5;\n    p.z = mod(p.z, .25) -.125;\n    \n\n    float box = sdOctahedron(p, .15);\n        \n    return box;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    int i;\n    for(i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd * dO;\n        \n        //p.y += sin(dO)*0.3;\n        p.xy *= rot2D(-dO * .1);\n       \n        float dS = GetDist(p);\n        dO += dS;\n        \n        if(dS < SURF_DIST || dO > MAX_DIST) break;\n    }\n    \n    //col = palette(dO*.04 + float(i)*.005);\n    \n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvec3 emission(vec3 color, float strength) {\n    return color * strength;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 uv = (fragCoord *2. -iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 0, -3);\n    //ro.yz *= rot2D(-m.y*PI+1.);\n    //ro.xz *= rot2D(-m.x*TAU);\n    \n    \n    //cam(ro, iTime);\n    //cam(ro, iTime);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n    \n    float d = RayMarch(ro, rd);\n\n    \n    /*\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n        \n        \n    }*/\n    \n    col = vec3(d * .06);\n    //col = vec3(d / 80.);\n   \n    \n    vec3 emissionColor = emission(vec3(0.961,0.592,0.078), d * 0.1);\n    \n    col = mix(col, emissionColor, rd.z * rd.z);\n    \n  \n    //col = pow(col, vec3(.4545));\t// gamma correction\n    \n    \n    fragColor = vec4(col,1.0);\n   \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}