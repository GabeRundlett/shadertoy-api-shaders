{
    "Shader": {
        "info": {
            "date": "1671640800",
            "description": "Make sure you click the music thingy :)\n\n(Basically the same as fork)\n\n",
            "flags": 96,
            "hasliked": 0,
            "id": "dll3Wr",
            "likes": 34,
            "name": "ðŸ˜Ž Pixel Men ðŸ˜Ž",
            "published": 3,
            "tags": [
                "2d",
                "motion",
                "pixelart",
                "human",
                "stickman"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 394
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n\n//https://lospec.com/palette-list/endesga-32\n#define c0 vec3(184,111,80)/255.\n#define c1 vec3(194,133,105)/255.\n#define c2 vec3(228,166,114)/255.\n#define c3 vec3(232,183,150)/255.\n\nvoid mainImage( out vec4 fragColor, in vec2 f )\n{\n    // Looks buggy around the border\n    f.x += 10.;\n    vec2 uv = (f - 0.5 * iResolution.xy) / iResolution.y;\n    float sc = 0.3;\n    vec3 tx = texelFetch(iChannel0, ivec2(sc*f), 0).rgb;\n    vec3 col = vec3(0);\n    \n    float w = 64. / sc;\n    f.x += floor(-30. * iTime/sc) - 4.;\n    float ix = floor(f.x/w);\n    vec4 h = h41(ix);\n    \n    if (tx == vec3(1)) tx = vec3(24,20,37)/255.;\n    else if (tx.r > 0.) col = c0 * tx.r;\n    else if (tx.b > 0.) col = c1 * tx.b;\n    else if (tx.g > 0.) col = c2 * tx.g;\n    \n    //float a = texelFetch(iChannel0, ivec2(sc*f), 0).a;\n    vec3 pl = .5+.5*cos(2.*pi*(ix/8. + vec3(0,1,2)/3.));\n    float mx = mix(0., 0.5-0.5*uv.y, .25+.25*thc(400.,2.*pi*h.x - 10.*h.x*uv.y+iTime));// + .5 * thc(4.,.2*uv.y+0.24*ix*pi+iTime);\n    //mx *= 0.5 + 0.5 * thc(4., 0.5 * iTime);\n    mx *= tanh(0.1 * iTime);\n    if (tx == vec3(0)) {\n        col = vec3(mix(240.,210.,.5-uv.y))/255.;\n        col = mix(col, pl, mx);\n    }\n    else\n        col = mix(col, col * (.6+.4*pl), mx);\n      \n    //float o = 2.*pi/3.;\n    //col += 0.2 * thc(40000., log(length(uv))*0.25 -0.5*iTime+ vec3(-o,0,o));\n\n    //vec3 col2 = vec3(exp(-8.*f.y/iResolution.y));\n    //col = mix(col, (1.-col) + col2, .5+.5*thc(40.,ix*pi + iTime));\n    //col = mix(col, col2, 1.-tx);\n        \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 31432,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/kordhell/murder-in-my-mind?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n\nfloat line(vec2 f, vec2 p, vec2 q) {\n    // Centre the coordinates at p\n    f -= p;\n\n    // Get direction from p to q, use for gradient and bounding box dimensions\n    vec2 dir = 0.5 * (q - p);\n    \n    // Look at the line as a function of x, and as a function of y\n    float d = min((abs(f.x - round(dir.x/dir.y * f.y))),\n                  (abs(f.y - round(dir.y/dir.x * f.x))));\n\n    // Restrict to the box bounded by p and q           \n    return step(d, 0.) * step(abs(f.x - dir.x), abs(dir.x))\n                       * step(abs(f.y - dir.y), abs(dir.y));           \n}\n\nfloat stride(float t, float i) {\n    float a = pi / 2.;\n    float f = min(1., mod(t + i * a, 2. * a) / a);\n    \n    // Some of these need remapping to [0,1]\n    //return pow(4.*f*(1.-f),2.);\n    //return 4. * f * (1.-f) * (1.-f);\n    return sqrt(1. - pow(2.*f-1., 2.));\n    //return 0.5 * abs(sin(pi * f));\n}\n\nvec2 footHeight(float t, float sw) {\n    t *= 0.1;\n    //return vec2(0);\n    return vec2(10. + 10. * cos(t + 0.01 * sw), 10. + 10. * cos(t));\n}\n\n\n// Gets 3rd point on isosceles triangle equidistant from p, q\nvec2 getTriPoint(vec2 f, vec2 p, vec2 q, float v) {\n    vec2 m = (p+q)/2.; \n    float d = 0.5 * length(p-q);\n    \n    // a=2. is min distance from pq line, so it doesn't snap\n    // into place and skip too many pixels at once\n    float a = 2.; // 3 is believable too\n    if (v > d) \n        a = sqrt(v * v - d * d);\n    \n    vec2 dir = normalize(vec2(p.y - q.y, q.x - p.x));\n    return round(m + a * dir); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 f )\n{\n    vec3 col = vec3(0);\n    vec2 res = iResolution.xy;\n    float t = 6. * iTime;\n       \n    float w = 64.;\n    f.x += floor(-5.*t);\n    float ix = floor(f.x / w);\n    f.x = mod(f.x, w) - w/2.;\n    f -= 0.5;\n\n    // Random values (sloppy)\n    vec4 h = h41(ix);\n    vec4 h2 = h41(2.*ix-103.4);\n    vec4 h3 = h41(-1.1*ix + 513.2);\n    vec4 h4 = h41(-0.21*ix + 317.);\n    t += 2.*pi*h.z;\n\n\n\n    // --- PARAMETERS ---  \n      \n    float sw = -2. - 20. * h.z;     // Stride width\n    vec2  sh = vec2(8); // Stride height (Left, Right)\n    \n    float vHip = 4.;         // Hip vertical motion per step\n    float xHip = (1.+5.*h4.x) * (1.5-2.*abs(cos(t))); // Hip horizontal offset\n    vec2 dimHip = vec2(8.,4.) * h2.y; // Hip dims (Length, Height-Osc)\n    float hHip = 15. + 20. * h.x;// Hip height\n    float aHip = -t;      // Hip angle\n    \n    float dTor = 4. + 35. * h.y;   // Torso length\n    float aTor = pi/2.; // Torso angle\n    \n    vec2 dimSho = vec2(10. * h2.y, 10. * h2.z);  // Shoulder dims (Length, Height-Osc)\n    \n    float dLeg = (.35 + .5 * h2.w) * hHip;  // Leg length/2, dLeg > (vHip+hHip)/2\n    \n    vec2 hFoot = 2.+0.*footHeight(t, sw); // Foot height\n    vec2 dFoot = vec2(4); // Foot length\n    float tf = 3.;    // Toe fluidity (idk how to describe this)\n \n    vec2 dElb = vec2(4. + 10. * h.z);      // Elbow length (Left, Right)\n    vec2 aElb = -0.5 * pi + 0.5*pi*(h4.z-0.5)   // Elbow angle\n                -0.5 * pi * vec2(cos(t), -cos(t)); \n    \n    vec2 dHand = 0.8 * (1. + h4.y) * dElb;//vec2(2. + 10. * h.w);     // Hand length (forearm)\n    vec2 aHand = -0.3 * pi // Hand angle \n                 -1.3 * h3.x * pi * vec2(cos(t), -cos(t));\n    \n    //vec2 dFing = vec2(2); // Finger length\n    \n    float dNeck = 2. + 10. * h3.y;             // Neck length\n    float aNeck = pi/2.+pi/8.*cos(t) + // Neck angle\n                  (2.*h3.z-1.) * pi/4.; \n    \n    float dHead = floor(2. + 6. * h3.w); // Head radius\n \n \n \n    // --- POINTS ---\n    \n    // Centre x coord\n    float spd = 0.*0.75 * sw; // (needs improving)\n    float x = spd * t;\n    \n    // Centre (of hip)\n    vec2 p = round(vec2(x - xHip, 0.*0.5*hFoot + hHip + vHip * abs(cos(t))));\n    \n    // Hip\n    vec2 pHip1 = round(p - dimHip * vec2(cos(aHip), sin(aHip)));\n    vec2 pHip2 = round(p + dimHip * vec2(cos(aHip), sin(aHip)));\n    \n    // Foot\n    vec2 pFoot1 = round(vec2(x-sw*cos(t), \n                        hFoot.x + sh.x * stride(.5*t, 0.)));\n    vec2 pFoot2 = round(vec2(x+sw*cos(t), \n                        hFoot.y + sh.y * stride(.5*t, 1.)));\n        \n    // Toe\n    float o = -pi/12.; // Land on heels or toes?\n    vec2 pToe1 = vec2(x+tf-sw*cos(t+o), \n                      hFoot.x + .5*sh.x*stride(.5*t+o, 0.));\n    vec2 pToe2 = vec2(x+tf+sw*cos(t+o), \n                      hFoot.y + .5*sh.y*stride(.5*t+o, 1.));\n    vec2 fdir1 = normalize(pToe1 - pFoot1);\n    vec2 fdir2 = normalize(pToe2 - pFoot2);\n    pToe1 = round(pFoot1 + dFoot.x * fdir1);\n    pToe2 = round(pFoot2 + dFoot.y * fdir2);\n\n    // Knee\n    vec2 pKnee1 = getTriPoint(f, pHip1, pFoot1, dLeg);\n    vec2 pKnee2 = getTriPoint(f, pHip2, pFoot2, dLeg);\n      \n    // Neck\n    vec2 pNeck = round(vec2(x + xHip, p.y) + \n                       dTor * vec2(cos(aTor), sin(aTor)));\n      \n    // Shoulder\n    vec2 pSho1 = round(pNeck - dimSho * vec2(cos(aHip), sin(aHip)));\n    vec2 pSho2 = round(pNeck + dimSho * vec2(cos(aHip), sin(aHip)));\n      \n    // Elbow\n    vec2 pElb1 = round(pSho1 + dElb.x * vec2(cos(aElb.x), sin(aElb.x)));\n    vec2 pElb2 = round(pSho2 + dElb.y * vec2(cos(aElb.y), sin(aElb.y)));\n      \n    // Hand \n    vec2 pHand1 = round(pElb1 + dHand.x * vec2(cos(aHand.x), sin(aHand.x)));\n    vec2 pHand2 = round(pElb2 + dHand.y * vec2(cos(aHand.y), sin(aHand.y)));\n      \n    // Neck\n    vec2 dirHead = vec2(cos(aNeck), sin(aNeck)); \n    vec2 pHead = round(pNeck + dNeck * dirHead);\n    \n    \n \n    // --- DRAW ---  \n      \n    // Hip\n    col.b += line(f, pHip1, pHip2);  \n    \n    // Legs\n    col.r += line(f, pHip1,  pKnee1) + \n             line(f, pKnee1, pFoot1) +\n             line(f, pFoot1, pToe1);\n    col.g += line(f, pHip2,  pKnee2) + \n             line(f, pKnee2, pFoot2) +\n             line(f, pFoot2, pToe2);\n       \n    // Torso\n    col.b += line(f, p, pNeck);\n    \n    // Shoulder\n    col.b += line(f, pSho1, pSho2);\n    \n    // Arms\n    col.r += line(f, pSho1, pElb1) +\n             line(f, pElb1, pHand1);\n    col.g += line(f, pSho2, pElb2) + \n             line(f, pElb2, pHand2);\n\n    // Neck\n    col.b += line(f, pNeck, pHead);\n   \n    // Head\n    float head = length(round(f - pHead - dHead * dirHead));\n    float sHead = step(head, dHead + .5);\n    col.b += sHead;\n   \n    float l = 1.-step(30.+20.*cos(0.1*t + 0.01*f.x), f.y);\n   \n    //float l = length(col);\n    col = clamp(col, 0., 1.);\n    fragColor = vec4(col, l);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 cell(in sampler2D tx, in ivec2 p) {\n    ivec2 r = ivec2(textureSize(tx, 0));\n    p = (p+r) % r;\n    return texelFetch(tx, p, 0 );\n}\n\nfloat mx(vec4 b) {\n    return max(b.x,max(b.y,b.z));\n}\n\nfloat mx(float a, vec4 b) {\n    return max(max(a,b.x),max(b.y,b.z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 f )\n{ \n    float n = 2.; \n    vec4 e = vec4(0); // Colors\n    vec4 e2 = vec4(0);\n    float p = 0.;     // Outline\n    for (float i = -n; i < n + 1.; i++) {\n        for (float j = -n; j < n + 1.; j++) {\n            vec4 c = cell(iChannel0, ivec2(f + vec2(i,j)));\n            if (abs(i) <= n-1. && abs(j) <= n-1.)    \n                e = max(e, c);\n            if (abs(i) != n || abs(j) != n) {\n                e2 = max(e2, c);\n                p = mx(p, c);            \n            }\n        }\n    }\n   \n    // Could replace RGB with just R and use different values\n    e.rb *= step(e.g, 0.);\n    e.r  *= step(e.b, 0.);\n    \n    e2.rb *= step(e2.g, 0.);\n    e2.r  *= step(e2.b, 0.);\n    float q = mx(e);\n    \n    if (e.b > 0.)\n        e.b -= 0.25 * e2.g;\n    if (e.r > 0.)\n        e.r -= 0.25 * e2.b;\n    e.rgb += vec3(p-q);\n\n    //e = e2 - e;//vec4(p-q);\n\n   // vec4 e3 = cell(iChannel1, ivec2(f + vec2(1,2)));\n   // e = mix(e, e3, 0.1);\n\n    fragColor = e;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Ideas:\n// - Change stride height randomly to match some obstacles, move body up\n//   and down so it appears to climb over obstacles.\n// - Make zombie army\n// - Pick from collection of movement functions e.g. for stride\n\n// Improvements:\n// - Interior outline if arm overlaps leg\n\n// From Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nvec4 h41(float p)\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);   \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}