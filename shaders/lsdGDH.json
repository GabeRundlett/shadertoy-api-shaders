{
    "Shader": {
        "info": {
            "date": "1449612206",
            "description": ".",
            "flags": 64,
            "hasliked": 0,
            "id": "lsdGDH",
            "likes": 22,
            "name": "â™« sA.2 - wave",
            "published": 3,
            "tags": [
                "2d",
                "music",
                "visualizer"
            ],
            "usePreview": 0,
            "username": "patu",
            "viewed": 1359
        },
        "renderpass": [
            {
                "code": "vec2 hash( vec2 p ) {                       // rand in [-1,1]\n    p = vec2( dot(p,vec2(127.1,311.7)),\n              dot(p,vec2(269.5,183.3)) );\n    return -1. + 2.*fract(sin(p+20.)*53758.5453123);\n}\n\nvec4 getFreq(float f) {\n\tfloat fft  = texture( iChannel0, vec2(f, 0.25) ).x; \n\tfloat wave = texture( iChannel0, vec2(f, 0.75) ).x;\n\tvec3 col = vec3( fft, 4.0 * fft * (1.0 - fft), 1.0 - fft ) * fft;\n    return max(vec4(col, 1.0), 0.);\n}\n\n\n#define k iChannelTime[0] * 6.\n#define t iTime * 6.\n#define v 2.\n#define fov 50.\n#define PI 3.1415\n\nvoid mainImage( out vec4 c, in vec2 f ) {\n\t\n    vec2 uv = f.xy / iResolution.xy - .5;\n\tvec2 muv = uv;\n    \n    float volF = getFreq(uv.x + .5).r / v;\n    float volM = getFreq(.9).r / v;\n    float volL = getFreq( .25).r / v;\n    c = vec4(.5, 0., .2 + sin(k / 16.), 0.) / 4. - .2;\n\n    for (float i = 8.; i > 0.; i--) {    \t\n        \n        muv = uv * tan (radians (i * 4. + fov)/2.0);\n    \t\n        muv.y += sin(k + volL + muv.x * 43.) * volM / 2.;\n        muv.y += sin(2.3 * k + PI + 2. + muv.x * 127.) * volM / 4.;\n        muv.y += sin(PI + 3. + muv.x * 32. + k * 3.12) * volL / 4.;\n        \n    \tif (muv.y < 0.02 && muv.y > -0.02) {\n    \t\tc += max(\n                vec4(1. - i * .15) * (1. - abs(muv.y) * 50.),\n                .0\n            );\n    \t}\n        \n        c -= (muv.y - .5) / 24.;\n        \n    }\n    \n    uv += .5;\n    \n    c += vec4(abs(sin(uv.y * PI) / 5.)) + hash(uv * 5. + t / 100.).x / 12.;\n    c *= .2 + 0.6 * pow(16.0 * uv.x * uv.y * (1.0 - uv.x) * (1.0 - uv.y), 4.);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 26465,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/thekraftwerkdatabase/ruckzuck?in=thekraftwerkdatabase/sets/kraftwerk-kraftwerk-1"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}