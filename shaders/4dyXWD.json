{
    "Shader": {
        "info": {
            "date": "1464297930",
            "description": "Mostly based on @s23b work. Added specular shading and uv mapping.\n\nMethod #2: How to enable Anisotropic filtering?\n\nhttps://www.shadertoy.com/view/XsyXzw",
            "flags": 0,
            "hasliked": 0,
            "id": "4dyXWD",
            "likes": 11,
            "name": "Sphere Room",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "specular",
                "uvmapping"
            ],
            "usePreview": 0,
            "username": "emdeka87",
            "viewed": 1107
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define Epsilon 0.0000001\n#define rot(x) mat2(cos(x), -sin(x), sin(x), cos(x))\n\n//1: Spheres\n//2: Cubes\n#define METHOD 1\n#define USE_TEXTURE 1\n\nfloat sphere(vec3 p, float radius) {\n    return length(fract(p) - .5) - .2 * radius;\n}\n\nfloat box( vec3 p, vec3 b )\n{\n  vec3 d = abs(fract(p) - .5) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n//Thanks to @Shane!\nvec3 tex3D( sampler2D t, in vec3 p, in vec3 n ){\n   \n    n = max(abs(n), 0.001); //// n = max((abs(n) - 0.2)*7., 0.001); //  etc.\n    n /= (n.x + n.y + n.z );  \n    return (texture(t, p.yz)*n.x + texture(t, p.zx)*n.y + texture(t, p.xy)*n.z).xyz;\n}\n\nfloat map(vec3 p) {\n    #if METHOD == 1\n    \tfloat r=sphere(p,1.3);\n   \t#endif\n    #if METHOD == 2\n    \tfloat r=box(p,vec3(0.25));\n    #endif\n    \n    return r;\n}\n\nfloat trace(vec3 o, vec3 r) {\n    float t = 0.;\n  \n    for (int i = 0; i < 200; ++i) { \n        float d = map(o + r * t);\n        t += d * .9;\n    }\n    \n    return t;\n}\n   \nvec3 shade(vec3 p, vec3 n, vec3 e) {\n   \n    #if USE_TEXTURE == 1\n     \t vec3 tx = tex3D(iChannel0,p,n);\n    #else\n    \tvec3 tx = vec3(1,1,1);\n    #endif\n    \n    vec3 spec = tx*2.;\n   \tvec3 ambient = 0.9*tx;\n    \n    vec3 eye = normalize(e-p);\n    vec3 light = normalize(vec3(0,1,-1)-p);\n    \n    vec3 diffuse = tx*max(0.0,dot(light,n));\n    vec3 specular = spec*max(0.0,pow(dot(reflect(-light,n),eye),3.));\n    \n    return ambient+(diffuse*specular);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n\t\n    vec3 o = vec3(0, 0,-3); \n    vec3 r = normalize(vec3(uv, 2.));\n    vec3 cam = vec3(0,0,-1);\n    \n    //float a = PI*sin(iTime)/2.;\n    //o.xz *= rot(a);\n    //r.xz *= rot(a);\n    //cam.xz *= rot(a);\n    \n    float dz = iTime*0.8;\n    float dx = sin(iTime)*0.3;\n    o.xz+=vec2(dx,dz);\n    cam.xz+=vec2(dx,dz);\n\n    float f = trace(o,r);\n\t\n    vec3 p = o + f * r;\n    vec2 eps = vec2(0, .0001);\n    vec3 normal = normalize(vec3(\n    \tmap(p + eps.yxx) - map(p - eps.yxx),\n    \tmap(p + eps.xyx) - map(p - eps.xyx),\n    \tmap(p + eps.xxy) - map(p - eps.xxy)\n\t));\n\n    vec3 c = shade(p,normal,cam);\n    \n\tfragColor = vec4(c,1.0)/f-0.1;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}