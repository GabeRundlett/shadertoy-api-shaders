{
    "Shader": {
        "info": {
            "date": "1520298356",
            "description": "font twist",
            "flags": 0,
            "hasliked": 0,
            "id": "ldtyD2",
            "likes": 6,
            "name": "Alphabet Street",
            "published": 3,
            "tags": [
                "font",
                "alpha",
                "twist"
            ],
            "usePreview": 1,
            "username": "Del",
            "viewed": 769
        },
        "renderpass": [
            {
                "code": "// Alphabet Street - Del - 06.03.2018\n//------------------------------------------------------------------------\n// Camera\n//------------------------------------------------------------------------\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in vec2 mouse )\n{\n    //mouse = vec2(0.0);\n    float an = 0.0;\t//10.0*mouse.x;\n\tcamPos = vec3(3.5*sin(an),0.0+mouse.y*4.0,4.5*cos(an) +(iTime*3.1));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n//------------------------------------------------------------------------\n// Modelling \n//------------------------------------------------------------------------\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\n// signed box distance field\nfloat sdBox(vec3 p, vec3 radius)\n{\n  vec3 dist = abs(p) - radius;\n  return min(max(dist.x, max(dist.y, dist.z)), 0.0) + length(max(dist, 0.0));\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nfloat Sampx( uint iChar, vec2 vCharUV )\n{\n    uvec2 iChPos = uvec2( iChar % 16u, iChar / 16u );\n    vec2 vUV = (vec2(iChPos) + vCharUV) / 16.0f;\n    return textureLod( iChannel0, vUV, 0.0 ).w - 0.5 ;\n}\n\n\nfloat SampleDistanceTexture(vec2 texuv,float c)\n{\n    return Sampx(64u+uint(abs(c)),texuv);\n}\n\n// http://mercury.sexy/hg_sdf/\n// Repeat space along one axis. Use like this to repeat along the x axis:\n// <float cell = pMod1(p.x,5);> - using the return value is optional.\nfloat pMod1(inout float p, float size)\n{\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n// Repeat only a few times: from indices <start> to <stop> (similar to above, but more flexible)\nfloat pModInterval1(inout float p, float size, float start, float stop) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p+halfsize, size) - halfsize;\n\tif (c > stop) { //yes, this might not be the best thing numerically.\n\t\tp += size*(c - stop);\n\t\tc = stop;\n\t}\n\tif (c <start) {\n\t\tp += size*(c - start);\n\t\tc = start;\n\t}\n\treturn c;\n}\n\n\nvec2 doModel( vec3 p )\n{\n    vec2 res = vec2( sdPlane(p+vec3(0.0,1.15,0.0)), 1.0);\t// floor...\n    p.y = -p.y;\n    //p.z -= 1.5;\n    p.z = -p.z;\n    p*= 0.25;\n\n    float xoff = pMod1(p.z,0.75);\n    //p.x += xoff*4.1;\n    p.x +=1.0;\n    pModInterval1(p.x,2.0,-0.0,1.0);\t//pMod1(p.x,0.75);\n    float c = 4.0 + xoff;\n\n    vec3 r1 = p;\n\tr1.xz *= rot(iTime*1.33 + sin(iTime*1.5-+p.y*2.1));\n    \n\tfloat symbolDist = SampleDistanceTexture( (r1.xy+vec2(0.5,0.5)),c );\n    symbolDist -= 0.00001;\n    symbolDist *= 2.0;\n\tfloat boxdist = sdBox(r1, vec3(0.5 , 0.5, 0.025));\n    //symbolDist += 0.01;\n    \n    symbolDist = max(boxdist,symbolDist);\n    res = opU(res,vec2(symbolDist,2.0+((p.y*0.15)+(c*c)*0.025)));\n    return res;\n}\n\n\nvec3 hsv2rgb(vec3 c)\n{\n  // Íñigo Quílez\n  // https://www.shadertoy.com/view/MsS3Wc\n  vec3 rgb = clamp(abs(mod(c.x*6.+vec3(0.,4.,2.),6.)-3.)-1.,0.,1.);\n  rgb = rgb * rgb * (3. - 2. * rgb);\n  return c.z * mix(vec3(1.), rgb, c.y);\n}\n\n//------------------------------------------------------------------------\n// Material \n//------------------------------------------------------------------------\n// c = colour index (added by del for some materials)\nvec3 doMaterial( in vec3 pos, in vec3 nor,float c )\n{\n    if (c<=1.0)\n    {\n        // checker floor\n        float f = mod( floor(0.75*pos.z) + floor(0.75*pos.x), 2.0);\n        vec3 col = 0.2 + 0.2*f+0.2*vec3(0.2,0.2,0.2);\n\t    return col;\n    }\n    return hsv2rgb(vec3(c,1.0,1.0)) * 0.2;\n}\n\n//------------------------------------------------------------------------\n// Lighting\n//------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal )\n{\n    vec3 lin = vec3(0.0);\n\n    // key light\n    //-----------------------------\n//    vec3  lig = normalize(vec3(0.5,0.5,0.5));\t\t// dir\n    vec3  lig = normalize(vec3(0.4,0.35,0.7));\t\t// dir\n    \n    float dif = max(dot(nor,lig),0.0);\n    float sha = 0.0;\n    if( dif>0.01 )\n        sha=calcSoftshadow( pos+0.01*nor, lig );\n    lin += dif*vec3(4.00,4.00,4.00)*sha;\n\n    // ambient light\n    //-----------------------------\n    lin += vec3(0.25,0.25,0.25);\n    \n    float _s = 1.5;\n\tfloat spec = pow(dif, 160.0) *_s;\n    \n    // surface-light interacion\n    //-----------------------------\n    vec3 col = mal*lin;\n        col+=spec;\n    \n    // fog    \n    //-----------------------------\n\tcol *= exp(-0.005*dis*dis);\n\n    return col;\n}\n\n\nvec2 calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 30.0;           // max trace distance\n\tconst float precis = 0.0001;        // precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n\t//float res = -1.0;\n    vec2 res = vec2(-1.0,0.0);\n    float c = 0.0;\n    \n    for( int i=0; i<140; i++ )          // max number of raymarching iterations is 90\n    {\n        if( h<precis||t>maxd ) break;\n        vec2 res2 = doModel( ro+rd*t );\n\t    h = res2.x;\n        c = res2.y;\n        \n        t += h;\n    }\n\n    if( t<maxd )\n    {\n        res.x = t;\n        res.y = c;\n    }\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.001;             // precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ).x + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ).x + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ).x + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ).x );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 // selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<40; i++ )         // 40 is the max numnber of raymarching steps\n    {\n        h = doModel(ro + rd*t).x;\n        res = min( res, 50.0*h/t );   // 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   // limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\n\n\nvec3 _background(vec3 p,vec3 d)//render background\n{\n\tvec3 color = mix(vec3(.8,.6,.3),vec3(.4,.5,.8),d.y*.5+.25)*0.7;\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\n\tvec3 col = _background(ro,rd);\n\n\t// raymarch\n    vec2 res = calcIntersection( ro, rd ); \n    float t = res.x;\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        // materials\n        vec3 mal = doMaterial( pos, nor, res.y );\n\n        col = doLighting( pos, nor, rd, t, mal );\n\t}\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n    // gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}