{
    "Shader": {
        "info": {
            "date": "1686063756",
            "description": "Simple pixelated & stylized torch shader. Playaround with top params for more interesting results",
            "flags": 0,
            "hasliked": 0,
            "id": "ctGXDh",
            "likes": 20,
            "name": "Simple Pixelated Torch",
            "published": 3,
            "tags": [
                "fire",
                "stylized",
                "pixelated",
                "torch"
            ],
            "usePreview": 0,
            "username": "propagant",
            "viewed": 538
        },
        "renderpass": [
            {
                "code": "// Simple pixelated torch shader written by Matej Vanco just for fun, June 2023.\n\n// Shader global params\n\nconst float particleCount = 128.0;\n\nconst float speed = 1.0;\nconst float pixelSize = 0.015;\nconst float brightness = 0.001;\n\nconst float fireShift = 0.15;\nconst float fireShiftFrequency = 5.0;\n\nconst vec2 size = vec2(0.05, 0.45);\nconst float bend = 0.0;\n\nconst vec2 glow = vec2(0.001, 0.05);\n\nconst vec3 toColor = vec3(0.4,0.35,0.2);\nconst vec3 fromColor = vec3(0.9,0.2,0.1);\n\nconst float alpha = 1.0;\n\n// Method shortcuts\n\n#define saturate(x) clamp(x, 0., 1.)\n\n#define Hash1(t) fract(cos(t * 124.97) * 248.842)-0.5;\n\n\n\nvec3 Simulate(vec2 uv, float t)\n{\n\tvec3 res = vec3(0.);\n\t\n\tfor(float i = 0.; i < particleCount; i++)\n\t{\n        // Current loop time\n        float ct = fract(t + (i+1.) / particleCount);\n        float seed = Hash1((i+1.) * (t - ct));\n        \n        // Direction\n\t\tvec2 dir = vec2(bend, size.y);\n        dir.x += (cos(t * seed) * sin(ct * fireShiftFrequency)) * mix(.0, fireShift, log(ct));\n        \n        // Current brightness\n\t\tfloat cb = saturate(mix(brightness, 0.0, ct));\n        // Current offset\n        vec2 off = vec2(seed*size.x, 0.);\n        \n\t\tres += mix(fromColor * abs(seed), toColor, ct) * smoothstep(glow.x, glow.y,\n        cb / length((uv - off - (dir * ct))));\n\t}\n\t\n\treturn res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 frag = ( fragCoord.xy - (0.5 * iResolution.xy)) / iResolution.y;\n    \n    vec2 posOffset = vec2(0.,-.2);\n    frag -= posOffset;\n    \n\tfragColor = vec4( Simulate(floor(frag / pixelSize) * pixelSize, (iTime+100.) * speed) * saturate(alpha), 1. );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}