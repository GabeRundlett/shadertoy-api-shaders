{
    "Shader": {
        "info": {
            "date": "1606866608",
            "description": "Define your own pattern in the generator function of the code, to see how it emerges on the grid of circles",
            "flags": 0,
            "hasliked": 0,
            "id": "3dGBWz",
            "likes": 8,
            "name": "Grid of circles with patterns",
            "published": 3,
            "tags": [
                "circles",
                "grid",
                "patterns",
                "generativeart",
                "creativecoding"
            ],
            "usePreview": 0,
            "username": "AI",
            "viewed": 457
        },
        "renderpass": [
            {
                "code": "float circle(in vec2 st, in float radius){\n    float d=length(st-.5);\n    return smoothstep(radius,radius-.01,d);\n    \n}\n\n// change pattern variable to get different patterns\nfloat generator (in vec2 cell,in float mult) {    \n    float pattern;\n    pattern=mult*(sin(cell.x*iTime/7.)+sin(cell.y*iTime/7.));\n    return fract(pattern);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv.x*=iResolution.x/iResolution.y;\n    float multiplier=0.8754;\n    float Ncircles=12.;    \n    uv *= Ncircles; \n    vec2 posInt = floor(uv)+1.;  //(i,j) integerr coordinates\n    vec2 posFloat = fract(uv); //(u,v) decimal cell coordinates \n    vec3 color =generator(posInt,multiplier) *vec3(1.,.5+.5*cos(iTime),.5+.5*sin(iTime));\n\tcolor*=circle(posFloat,.5);\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}