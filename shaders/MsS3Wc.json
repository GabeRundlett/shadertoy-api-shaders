{
    "Shader": {
        "info": {
            "date": "1394252538",
            "description": "C1 continuous RGB colors under linear interpolation of hue H in HSV space. ",
            "flags": 0,
            "hasliked": 0,
            "id": "MsS3Wc",
            "likes": 198,
            "name": "Smooth HSV",
            "published": 3,
            "tags": [
                "2d",
                "color",
                "hsv",
                "colorspace"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 23091
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org\n\n\n// Converting from HSV to RGB leads to C1 discontinuities, for the RGB components\n// are driven by picewise linear segments. Using a cubic smoother (smoothstep) makes \n// the color transitions in RGB C1 continuous when linearly interpolating the hue H.\n\n// C2 continuity can be achieved as well by replacing smoothstep with a quintic\n// polynomial. Of course all these cubic, quintic and trigonometric variations break \n// the standard (http://en.wikipedia.org/wiki/HSL_and_HSV), but they look better.\n\n\n// Official HSV to RGB conversion \nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n// Smooth HSV to RGB conversion \nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n// compare\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tvec3 hsl = vec3( uv.x, 1.0, uv.y );\n\n\tvec3 rgb_o = hsv2rgb( hsl );\n\tvec3 rgb_s = hsv2rgb_smooth( hsl );\n\t\n\tvec3 rgb = mix( rgb_o, rgb_s, smoothstep( -0.2, 0.2, sin(2.0*iTime)) );\n\t\n\tfragColor = vec4( rgb, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}