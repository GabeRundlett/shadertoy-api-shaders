{
    "Shader": {
        "info": {
            "date": "1724605464",
            "description": "messing around with something I was thinking about",
            "flags": 0,
            "hasliked": 0,
            "id": "Mf2Bzz",
            "likes": 2,
            "name": "subdivide blocks 2",
            "published": 3,
            "tags": [
                "noise",
                "subdivide"
            ],
            "usePreview": 0,
            "username": "0xBAMA",
            "viewed": 102
        },
        "renderpass": [
            {
                "code": "// Fork of \"subdivide blocksss\" by 0xBAMA. https://shadertoy.com/view/McjBzz\n// 2024-08-25 16:48:38\n\n// Fork of \"subdivide blocks\" by 0xBAMA. https://shadertoy.com/view/4cBfzR\n// 2024-08-25 16:35:23\n\nfloat freq = 0.3;\nconst int octaves = 2;\nfloat noise( vec3 p ) {\n    return perlinfbm( p, freq, octaves );\n}\n\nvec2 locationFromPixelIdx ( ivec2 pixIdx ) {\n    return 1.0f * vec2( pixIdx ) / iResolution.x;\n}\n\nfloat noise ( ivec2 px, int divisionSize ) {\n    return noise( vec3( locationFromPixelIdx( divisionSize * ( px / divisionSize ) + divisionSize / 2 ), iTime / 30.0f ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = vec4( 0.0f, 0.0f, 0.0f, 1.0f );\n    \n    // size of the screen\n    ivec2 fieldSize = ivec2( iResolution.xy );\n\n    // making decisions about subdivisions\n    ivec2 pixelLocation = ivec2( fragCoord.xy ) * 4;\n    int divisionSize = 256;\n    \n    // holding the sample of noise in the loop\n    float noiseValue = 0.0f;\n    \n    // is this pixel on a border?\n    ivec2 borderTrack = ivec2( 0 );\n        \n    while ( divisionSize > 1 ) {\n        // sample the noise in the quantized box location, for the given size subdivision\n        ivec2 sampleLocation = divisionSize * ( pixelLocation / divisionSize ) + divisionSize / 2;\n        borderTrack = pixelLocation % ivec2( divisionSize );\n\n        // if the noise is above a threshold, we want to break out\n        noiseValue = noise( sampleLocation, divisionSize );\n        if ( noiseValue < 0.0f ) {\n            break;\n        } else {\n            // otherwise, we want to halve the size of the division and continue\n            divisionSize /= 2;\n        }\n    }\n    \n    if ( noiseValue < 0.0f ) {    \n        fragColor.xyz = coolwarm( pow( 1.0f / float( divisionSize - 25 ), 0.5f ) );\n        if ( borderTrack.x == 0 || borderTrack.x == ( ( divisionSize / 1 ) - 1 ) ||\n             borderTrack.y == 0 || borderTrack.y == ( ( divisionSize / 1 ) - 1 ) ) {\n            fragColor.xyz = vec3( 1.0f );\n        }\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Hash by David_Hoskins\n#define UI0 1597334673U\n#define UI1 3812015801U\n#define UI2 uvec2(UI0, UI1)\n#define UI3 uvec3(UI0, UI1, 2798796415U)\n#define UIF (1.0 / float(0xffffffffU))\n\nvec3 hash33( vec3 p ) {\n\tuvec3 q = uvec3( ivec3( p ) ) * UI3;\n\tq = ( q.x ^ q.y ^ q.z )*UI3;\n\treturn -1.0 + 2.0 * vec3( q ) * UIF;\n}\n\n// Gradient noise by iq (modified to be tileable)\nfloat gradientNoise( vec3 x, float freq ) {\n    // grid\n    vec3 p = floor( x );\n    vec3 w = fract( x );\n    \n    // quintic interpolant\n    vec3 u = w * w * w * ( w * ( w * 6.0 - 15.0 ) + 10.0 );\n\n    // gradients\n    vec3 ga = hash33( mod( p + vec3( 0.0, 0.0, 0.0 ), freq ) );\n    vec3 gb = hash33( mod( p + vec3( 1.0, 0.0, 0.0 ), freq ) );\n    vec3 gc = hash33( mod( p + vec3( 0.0, 1.0, 0.0 ), freq ) );\n    vec3 gd = hash33( mod( p + vec3( 1.0, 1.0, 0.0 ), freq ) );\n    vec3 ge = hash33( mod( p + vec3( 0.0, 0.0, 1.0 ), freq ) );\n    vec3 gf = hash33( mod( p + vec3( 1.0, 0.0, 1.0 ), freq ) );\n    vec3 gg = hash33( mod( p + vec3( 0.0, 1.0, 1.0 ), freq ) );\n    vec3 gh = hash33( mod( p + vec3( 1.0, 1.0, 1.0 ), freq ) );\n    \n    // projections\n    float va = dot( ga, w - vec3( 0.0, 0.0, 0.0 ) );\n    float vb = dot( gb, w - vec3( 1.0, 0.0, 0.0 ) );\n    float vc = dot( gc, w - vec3( 0.0, 1.0, 0.0 ) );\n    float vd = dot( gd, w - vec3( 1.0, 1.0, 0.0 ) );\n    float ve = dot( ge, w - vec3( 0.0, 0.0, 1.0 ) );\n    float vf = dot( gf, w - vec3( 1.0, 0.0, 1.0 ) );\n    float vg = dot( gg, w - vec3( 0.0, 1.0, 1.0 ) );\n    float vh = dot( gh, w - vec3( 1.0, 1.0, 1.0 ) );\n\t\n    // interpolation\n    return va + \n           u.x * ( vb - va ) + \n           u.y * ( vc - va ) + \n           u.z * ( ve - va ) + \n           u.x * u.y * ( va - vb - vc + vd ) + \n           u.y * u.z * ( va - vc - ve + vg ) + \n           u.z * u.x * ( va - vb - ve + vf ) + \n           u.x * u.y * u.z * ( -va + vb + vc - vd + ve - vf - vg + vh );\n}\n\nfloat perlinfbm( vec3 p, float freq, int octaves ) {\n    float G = exp2( -0.85 );\n    float amp = 1.0;\n    float noise = 0.0;\n    for ( int i = 0; i < octaves; ++i ) {\n        noise += amp * gradientNoise( p * freq, freq );\n        freq *= 2.0;\n        amp *= G;\n    }\n    return noise;\n}\n\n\n// from: https://www.shadertoy.com/view/Nd3fR2\nvec3 inferno(float t) {\n    const vec3 c0 = vec3(0.000129,0.001094,-0.041044);\n    const vec3 c1 = vec3(0.083266,0.574933,4.155398);\n    const vec3 c2 = vec3(11.783686,-4.013093,-16.439814);\n    const vec3 c3 = vec3(-42.246539,17.689298,45.210269);\n    const vec3 c4 = vec3(78.087062,-33.838649,-83.264061);\n    const vec3 c5 = vec3(-72.108852,32.950143,74.479447);\n    const vec3 c6 = vec3(25.378501,-12.368929,-23.407604);\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\nvec3 coolwarm(float t) {\n    const vec3 c0 = vec3(0.227376,0.286898,0.752999);\n    const vec3 c1 = vec3(1.204846,2.314886,1.563499);\n    const vec3 c2 = vec3(0.102341,-7.369214,-1.860252);\n    const vec3 c3 = vec3(2.218624,32.578457,-1.643751);\n    const vec3 c4 = vec3(-5.076863,-75.374676,-3.704589);\n    const vec3 c5 = vec3(1.336276,73.453060,9.595678);\n    const vec3 c6 = vec3(0.694723,-25.863102,-4.558659);\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}