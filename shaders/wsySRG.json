{
    "Shader": {
        "info": {
            "date": "1574261802",
            "description": "3D meta ball with the Crosshatch shadow.",
            "flags": 0,
            "hasliked": 0,
            "id": "wsySRG",
            "likes": 3,
            "name": "Crosshatch shadow",
            "published": 3,
            "tags": [
                "raymarching",
                "shadow"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 489
        },
        "renderpass": [
            {
                "code": "// All the distance functions from:https://iquilezles.org/articles/distfunctions\n// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nvec3 N33(vec3 p) {\n    vec3 a = fract(p*vec3(123.34,234.34,345.65));\n    a+=dot(a,a+34.45);\n    return fract(vec3(a.x*a.y,a.y*a.z,a.z*a.x));\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec4 combine(vec4 val1, vec4 val2 ){\n    return (val1.w < val2.w)?val1:val2;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat metaball(vec3 p, float i, float t) {\n    vec3 n = N33(vec3(i));\n    vec3 p2 = sin(n*t)*1.0;\n    p2.y += 2.1;\n    vec3 spp = p-p2;\n    float sp = length(spp)-(0.5+(i*0.1));\n    return sp;\n}\n\nvec4 metaBalls(vec3 p) {\n    float res = 1.0;\n    float t = iTime*3.0;\n    vec4 mb = vec4(1.0);\n\n    float k = 0.9;\n    res = smin(res,metaball(p,1.0, t),k); \n    res = smin(res,metaball(p,2.0, t),k); \n    res = smin(res,metaball(p,3.0, t),k); \n    res = smin(res,metaball(p,4.0, t),k); \n    res = smin(res,metaball(p,5.0, t),k); \n    res = smin(res,metaball(p,6.0, t),k); \n    \n    mb = vec4(mix(vec3(p.x,0.0,p.z),vec3(1.0,1.0,1.0),0.5),res*2.0);\n    \n    return mb;\n}\n\nvec4 GetDist(vec3 p) {\n    \n    float _floor = p.y;\n\n    vec4 mb = metaBalls(p);\n    vec4 f = vec4(vec3(0.5,0.8,0.5),_floor*0.6);\n    \n    vec4 model = combine(mb,f);\n    return model;\n}\n\nvec4 RayMarch(vec3 ro, vec3 rd) {\n    vec4 dO= vec4(0.0);\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO.w;\n        vec4 dS = GetDist(p);\n        dO.w += dS.w;\n        dO.xyz = dS.xyz;\n        if(dO.w>MAX_DIST || dS.w<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).w;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).w,\n        GetDist(p-e.yxy).w,\n        GetDist(p-e.yyx).w);\n    \n    return normalize(n);\n}\n\nfloat shadowMap(vec3 ro, vec3 rd){\n    float h = 0.0;\n    float c = 0.001;\n    float r = 1.0;\n    float shadow = 0.5;\n    for(float t = 0.0; t < 30.0; t++){\n        h = GetDist(ro + rd * c).w;\n        if(h < 0.001){\n            return shadow;\n        }\n        r = min(r, h * 16.0 / c);\n        c += h;\n    }\n    return 1.0 - shadow + r * shadow;\n}\n\nfloat GetAmbientOcclusion(vec3 p, vec3 n)\n{\n    const int steps = 4;\n    const float delta = 0.15;\n\n    float a = 0.0;\n    float weight = 4.;\n    for(int i=1; i<=steps; i++) {\n        float d = (float(i) / float(steps)) * delta; \n        a += weight*(d - RayMarch(p + n*d,n).w);\n        weight *= 0.5;\n    }\n    return clamp(1.0 - a, 0.0, 1.0);\n}\n\nvec2 GetLight(vec3 p) {\n    vec3 lightPos = vec3(2,8,3);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l).w;\n\n    float ao = GetAmbientOcclusion(p,n);\n    \n    float lambert = max(.0, dot( n, l))*0.1;\n    \n    float shadow = shadowMap(p + n * 0.001, l);\n    \n    return vec2((lambert+dif*ao),max(0.9, shadow)) ;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 4, -5);\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    ro.xz *= Rot(radians(iTime*20.0));\n    ro.yz *= Rot(radians(-20.0));\n    #endif\n    \n    vec3 rd = R(uv, ro, vec3(0,1,0), 1.);\n\n    vec4 d = RayMarch(ro, rd);\n    \n    if(d.w<MAX_DIST) {\n        vec3 p = ro + rd * d.w;\n    \n        vec2 dif = GetLight(p);\n        col = vec3(dif.x)*d.xyz;\n        \n        // This only floor gets shadow effect.\n        if(p.y<0.005 && dif.y>=0.899 && dif.y<=0.9){\n            float hatch_y_offset = 12.0;\n            float lum_threshold_1 = 2.0;\n            float lum_threshold_2 = 1.7;\n            float lum_threshold_3 = 1.5;\n            float lum_threshold_4 = 1.3;\n            \n            float lum = length(col.rgb);\n            vec3 tc = vec3(1.0);\n            vec3 hatchColor  = vec3(0.0, 0.8, 1.0);\n            \n            if (lum < lum_threshold_1) \n            {\n              if (mod(fragCoord.x + fragCoord.y, hatch_y_offset) == 0.0) \n                tc = hatchColor;\n            }  \n\n            if (lum < lum_threshold_2) \n            {\n              if (mod(fragCoord.x - fragCoord.y, hatch_y_offset) == 0.0) \n                tc = hatchColor;\n            }  \n\n            if (lum < lum_threshold_3) \n            {\n              if (mod(fragCoord.x + fragCoord.y - hatch_y_offset, hatch_y_offset) == 0.0) \n                tc = hatchColor;\n            }  \n\n            if (lum < lum_threshold_4) \n            {\n              if (mod(fragCoord.x - fragCoord.y - hatch_y_offset, hatch_y_offset) == 0.0) \n                tc = hatchColor;\n            }\n            \n            col *= tc;\n        }\n        \n    } else {\n        // background\n        col = vec3(0.3,0.5,0.8);\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}