{
    "Shader": {
        "info": {
            "date": "1625013879",
            "description": "实现高斯模糊",
            "flags": 0,
            "hasliked": 0,
            "id": "NtX3D7",
            "likes": 0,
            "name": "GaussionBlur",
            "published": 3,
            "tags": [
                "gaussion"
            ],
            "usePreview": 0,
            "username": "kunnisser",
            "viewed": 258
        },
        "renderpass": [
            {
                "code": "// 高斯模糊半径\nfloat RADIUS = 1.0;\n// 因为uv的坐标系为0-1，这里为了代入高斯模糊半径计算，需要缩放到对应的量级\nfloat size = 30000.0;\nfloat PI = 3.14159;\n\n// PDF\nfloat gaussianBlur (float sigma, float x, float y) {\n    return (exp(-pow(x, 2.0) - pow(y, 2.0)) / 2.0 * pow(sigma, 2.0)) / (2.0 * pow(sigma, 2.0) * PI); \n}\n\n// 权重乘以当前获取的像素值\nvec4 computedBlur (float gauss, vec4 inputColor) {\n        return (inputColor * gauss);\n}\n\n// 高斯卷积核计算\nvec4 blurColor (vec2 uv) {\n    // 初始色值\n    vec4 color = vec4(0.0);\n    //\n    float sum = 0.0;\n    \n    // 进行二维矩阵遍历\n    for (float x = -RADIUS; x <= RADIUS; x++) {\n        for (float y = -RADIUS; y <= RADIUS; y++) {\n            // 计算对应的纹理坐标\n            vec2 target = uv + vec2(x / size, y / size);\n            // 计算出高斯权重\n            float gauss = gaussianBlur(1.5, target.x, target.y);\n            // 获取加权后的色值并累加\n            color += computedBlur(gauss, vec4(vec3(texture(iChannel0, target).x), 1.0));\n            // 计算加权概率之和\n            sum += gauss;\n        }\n    }\n    // 这里放在循环外统一进行概率归一化处理，提高计算效率\n    color /= sum;\n    return color;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 color = blurColor(uv);\n\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}