{
    "Shader": {
        "info": {
            "date": "1616254447",
            "description": "License CC0: Monochrome gas giant\nI had the idea of creating a monochrome flat gas giant\nIt didn't come out as intended but I liked the result anyway\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ssf3R2",
            "likes": 16,
            "name": "Monochrome gas giant",
            "published": 3,
            "tags": [
                "bwraysphere"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 451
        },
        "renderpass": [
            {
                "code": "// License CC0: Monochrome gas giant\n//  I had the idea of creating a monochrome flat gas giant\n//  It didn't come out as intended but I liked the result anyway\n\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define TIME            iTime\n#define TTIME           (TAU*TIME)\n#define RESOLUTION      iResolution\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PSIN(a)         (0.5+0.5*sin(a))\n#define L2(x)           dot(x, x)\n#define SCA(a)          vec2(sin(a), cos(a))\n\nconst vec3  std_gamma = vec3(2.2);\nconst vec2  miss      = vec2(1E6);\nconst vec4  sphere    = vec4(vec3(0.0), 0.4);\nconst vec4  plane     = vec4(normalize(vec3(0.0, 1.0, 0.0)), 0.0);\n\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// IQ's ray sphere intersection\nvec2 raySphere(vec3 ro, vec3 rd, vec4 sph) {\n  vec3 ce  = sph.xyz;\n  float ra = sph.w;\n  vec3 oc = ro - ce;\n  float b = dot( oc, rd );\n  float c = dot( oc, oc ) - ra*ra;\n  float h = b*b - c;\n  if( h<0.0 ) return miss; // no intersection\n  h = sqrt(h);\n  return vec2( -b-h, -b+h );\n}\n\n// IQ's ray plane  intersection\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nvec3 toPolar(vec3 p) {\n  float r   = length(p);\n  float t   = acos(p.z/r);\n  float ph  = atan(p.y, p.x);\n  return vec3(r, t, ph);\n  \n}\n\nvec2 hash2(vec2 p) {\n  p = vec2 (dot (p, vec2 (127.1, 311.7)),\n            dot (p, vec2 (269.5, 183.3)));\n  return -1. + 2.*fract (sin (p)*43758.5453123);\n}\n\nfloat noise(vec2 p) {\n  float a = sin(p.x);\n  float b = sin(p.y);\n  float c = 0.5 + 0.5*cos(p.x + p.y);\n  float d = mix(a, b, c);\n  return d;\n}\n\nfloat fbm(vec2 p) {    \n  const mat2 frot = mat2(0.80, 0.60, -0.60, 0.80);\n \n  float f = 0.0;\n  float a = 1.0;\n  float s = 0.0;\n  float m = 2.0;\n\n  for (int x = 0; x < 2; ++x) {\n    f += a*noise(p); p = frot*p*m;\n    m += 0.01;\n    s += a;\n    a *= 0.5;\n  }\n\n  return f/s;\n}\n\nfloat warp(vec2 p, float e, out vec2 v, out vec2 w) {\n  vec2 vx = vec2(0.0, 0.5)*e;\n  vec2 vy = vec2(3.2, 1.3)*e;\n\n  vec2 wx = vec2(1.7, 9.2)*e;\n  vec2 wy = vec2(8.3, 2.8)*e;\n\n  vx *= ROT(TTIME/1000.0);\n  vy *= ROT(TTIME/900.0);\n\n  wx *= ROT(TTIME/800.0);\n  wy *= ROT(TTIME/700.0);\n\n  v = vec2(fbm(p + vx), fbm(p + vy));\n  \n  w = vec2(fbm(p + -3.0*v + wx), fbm(p + 3.0*v + wy));\n  \n  return fbm(p + vec2(2.25, 1.25)*w);\n}\n\nvec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {\n  float lp = length(p);\n  vec2 np = p + 1.0/RESOLUTION.xy;\n  float rdd = (2.0+1.0*tanh_approx(lp));  // Playing around with rdd can give interesting distortions\n  vec3 rd = normalize(p.x*uu + p.y*vv + rdd*ww);\n  vec3 nrd = normalize(np.x*uu + np.y*vv + rdd*ww);\n\n  vec2 rsi = raySphere(ro, rd, sphere);\n  float rpi = rayPlane(ro, rd, plane);\n  \n  vec3 col = vec3(0.0);\n  if (rsi != miss) {\n    vec3 pi = ro + rd*rsi.x;\n    vec3 ni = normalize(pi - sphere.xyz);\n    float d = dot(-rd, ni);\n    d -= 0.;\n    float oi = smoothstep(0.0, 0.1, d);\n    float ii = 1.0-smoothstep(0.1, 0.15, d);\n    float f = oi*ii;\n\n    float rings = 1.0;\n    for (int i = 0; i < 4; ++i) {\n      rings *= sin(5.0*pi.y*sqrt(float(i+3)));\n    }\n\n    rings = tanh_approx((rings)*1.5);\n    float yf = pow(abs(pi.y)/sphere.w, 3.0);\n    rings *= mix(1.0, 0.0, yf);\n    vec3 ppi = toPolar(pi.xzy);\n\n    vec2 v;\n    vec2 w;\n    float h = warp((ppi.zy+vec2(-0.033*TIME, 0.1))*2.0*vec2(1.0, 6.0), rings, v, w);\n\n    h = mix(h, 1.0, yf);\n\n    col += vec3(1.0)*mix(1.0, h*step(0.1, d), 1.0-f);\n    col += rings*step(0.1, d);\n  }\n  \n  if (rpi >= 0.0 && rpi < rsi.x) {\n    vec3 pi = ro + rd*rpi;\n    vec3 npi = ro + nrd*rpi;\n    float aa = 2.0*length(npi-pi);\n    vec2 pp = pi.xz;\n    float r = length(pp);\n    float d = circle(pp, 0.65);\n    d = abs(d) - 0.06;\n\n    float rings = 1.0;\n    for (int i = 0; i < 3; ++i) {\n      rings *= sin(100.0*r*sqrt(float(i+3)));\n    }\n    rings = tanh_approx((rings)*3.0);\n    \n    col += mix(0.0, 1.0, smoothstep(-aa, aa, -d))*rings;\n  }\n  \n//  col = 1.0- col;\n  return col;\n}\n\n// Classic post processing\nvec3 postProcess(vec3 col, vec2 q) {\n  col = clamp(col, 0.0, 1.0);\n  col = pow(col, 1.0/std_gamma);\n  col = col*0.6+0.4*col*col*(3.0-2.0*col);\n  col = mix(col, vec3(dot(col, vec3(0.33))), -0.4);\n  col *=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 q) {\n  vec3 ro   = 0.75*vec3(0.0, 1.0, -2.0);\n  vec3 la   = vec3(0.0);\n  vec3 up = normalize(vec3(0.25,1.0,0.0));\n  vec3 ww = normalize(normalize(la - ro));\n  vec3 uu = normalize(cross(up, ww));\n  vec3 vv = normalize(cross(ww, uu));\n\n  vec3 col = color(ww, uu, vv, ro, p);\n  col = postProcess(col, q);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect(p, q);\n\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}