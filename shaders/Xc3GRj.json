{
    "Shader": {
        "info": {
            "date": "1711919357",
            "description": "Approximation of the BRDF of the cloud surface (or, in general, boundary of some turbid medium).",
            "flags": 0,
            "hasliked": 0,
            "id": "Xc3GRj",
            "likes": 5,
            "name": "Cloud surface \"BRDF\" approx.",
            "published": 3,
            "tags": [
                "clouds",
                "brdf"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 216
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// One alternative to volumetric scattering computation is to\n// pretend that the cloud surface is a hard reflecting boundary.\n// The computation then needs BRDF for such boundary. This shader\n// provides an approximation of this BRDF, based on\n//     Kokhanovsky, A. A. (2002). Simple approximate formula for the reflection function of a homogeneous, semi-infinite turbid medium. Journal of the Optical Society of America A, 19(5), 957. doi:10.1364/josaa.19.000957\n// The expression depends only on viewing geometry (viewer, light,\n// normal), cloud phase function, and relative absorption coefficient.\n\n// NOTE: the coloring in this shader is arbitrary, and not at all\n// physically based.\n\n//==============================================================================\n// Phase function.\n// We use https://www.shadertoy.com/view/4XsXRn here, but you can\n// use something much simpler, like Henyey-Greenstein.\n\nconst float pi=3.14159265358979;\n\nfloat phase_draine(float a,float g,float x)\n{\n    float d=1.0+g*g-2.0*g*x;\n    return 1.0/(4.0*pi)*(1.0-g*g)/(1.0+a*(1.0+2.0*g*g)/3.0)* // <-- constant factor.\n        (1.0+a*x*x)/(d*sqrt(d));\n}\n\nvec4 phase_params_mie(float d)\n{\n    return vec4(\n        exp(-0.0990567/(d-1.67154)),          // gHG\n        exp(-2.20679/(d+3.91029)-0.428934),   // gD\n        exp(3.62489-8.29288/(d+5.52825)),     // alpha\n        exp(-0.599085/(d-0.641583)-0.665888)  // wD\n    );\n}\n\nfloat phase_mie(vec4 M,float x)\n{\n    return mix(phase_draine(0.0,M.x,x),phase_draine(M.z,M.y,x),M.w);\n}\n\nconst float droplet_size=10.0; // In μm.\n\nfloat phase(float x)\n{\n    return phase_mie(phase_params_mie(droplet_size),x);\n}\n\nfloat asymmetry_draine(float a,float g)\n{\n    return g*(1.0+a*(3.0+2.0*g*g)/5.0)/(1.0+a*(1.0+2.0*g*g)/3.0);\n}\n\nfloat asymmetry_mie(vec4 M)\n{\n    return mix(M.x,asymmetry_draine(M.z,M.y),M.w);\n}\n\n//==============================================================================\n// Cloud reflection function. Based on\n//     Kokhanovsky, A. A. (2002). Simple approximate formula for the reflection function of a homogeneous, semi-infinite turbid medium. Journal of the Optical Society of America A, 19(5), 957. doi:10.1364/josaa.19.000957\n// eq. (6), see also:\n//     Kokhanovsky, A., “Optical properties of terrestrial clouds”, Earth Science Reviews, vol. 64, no. 3, pp. 189–241, 2004. doi:10.1016/S0012-8252(03)00042-4.\n//     https://patarnott.com/satsens/pdf/opticalPropertiesCloudsReview.pdf\n// eq. (4.5) and so on.\n\n// Returns the ratio of the reflected diffused light intensity to that\n// of a Lambertian ideally white reflector.\n// Parameters:\n//     L    - direction to light. Assumed normalized.\n//     V    - direction from viewer. Assumed normalized.\n//     N    - normal to cloud surface. Assumed normalized.\n//     beta - ratio of absorption and extinction coefficients (close to 0 for water clouds).\n//     g    - asymmetry parameter of the phase function: 2*π * ∫ p(θ)*cos(θ)*sin(θ) dθ on [0;π].\n// NOTE: Bad Things happen for high angles (dot(L,N)<=0, dot(-V,N)<=0,\n// or close). It is advised to avoid them.\n// NOTE: the approximation is only works well for small values of beta. See\n//     Kokhanovsky, A. (2002). The accuracy of selected approximations for the reflection function of a semi-infinite turbid medium. Journal of Physics D: Applied Physics, 35(10), 1057–1062. doi:10.1088/0022-3727/35/10/314\n// for more detailed version.\nfloat R(vec3 L,vec3 V,vec3 N,float beta,float g)\n{\n    const float a=1.468,b=7.748,c=0.0;\n    float xi =dot(+L,N);\n    float eta=dot(-V,N);\n    float y=4.0*sqrt(beta/(3.0*(1.0-g)));\n    float p=phase(dot(L,V));\n    return (p+a+b*xi*eta+c*(xi+eta))/(4.0*(xi+eta))-y*(9.0/49.0)*(1.0+2.0*xi)*(1.0+2.0*eta);\n}\n\n// The total fraction of radiation reflected by a semi-infinite cloud.\nfloat spherical_albedo(float beta,float g)\n{\n    return exp(-4.0*sqrt(beta/(3.0*(1.0-g))));\n}\n\n//==============================================================================\n// Noise.\n\n// https://www.shadertoy.com/view/dllSW7\nuint hash(uint x)\n{\n    x^=x>>15;\n    x^=(x*x)|1u;\n    x^=x>>17;\n    x*=0x9E3779B9u;\n    x^=x>>13;\n    return x;\n}\n\nfloat rnd2i(ivec2 v)\n{\n    return float(int(hash(uint(v.x+65536*v.y))))*4.6566129e-10;\n}\n\n// 2D value noise. Gradient in xy, value in z.\nvec3 noise2d(vec2 v)\n{\n    ivec2 i=ivec2(floor(v)),e=ivec2(0,1);\n    v=fract(v);\n    float A=rnd2i(i+e.xx);\n    float B=rnd2i(i+e.yx);\n    float C=rnd2i(i+e.xy);\n    float D=rnd2i(i+e.yy);\n    vec2 d=30.0*v*v*(v*(v-2.0)+1.0);\n    v=v*v*v*(v*(v*6.0-15.0)+10.0);\n    return vec3(\n        vec2(mix(B-A,D-C,v.y),mix(C-A,D-B,v.x))*d,\n        mix(mix(A,B,v.x),mix(C,D,v.x),v.y));\n}\n\n//==============================================================================\n// Main image.\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec3 V=vec3((2.0*fragCoord-iResolution.xy)/iResolution.y,-1.5);\n    vec3 L=vec3(4,2,-7);\n    V=normalize(V);\n    L=normalize(L);\n    // NOTE: one source of data for absorption/scattering coefficients\n    // in clouds is:\n    //     Gatebe, Charles & Kuznetsov, & Melnikova, Irina. (2014). Cloud optical parameters from airborne observation of diffuse solar radiation accomplished in USA and USSR in different geographical regions. International Journal of Remote Sensing. 35. 10.1080/01431161.2014.945000. \n    // see fig. 7(a) and 7(b).\n    float beta=0.005;\n    float g=asymmetry_mie(phase_params_mie(droplet_size));\n    vec3 C0=vec3(0.125,0.5,0.75);\n    vec3 C1=4.0*vec3(1.0,0.75,0.5);\n    vec3 col=pow(C0,vec3(pow(max(V.y,0.0),0.75)));\n    col+=C1*exp(-1e3*(1.0-dot(L,V)));\n    if(V.y<0.0)\n    {\n        vec3 N=vec3(0,1,0);\n        // Perturb normal on otherwise flat cloud surface.\n        vec2 v=0.125*V.xz/V.y;\n        mat2 m=mat2(0.6,-0.8,0.8,0.6),A=1.625*m;\n        for(int i=0;i<11;++i)\n        {\n            N.xz+=(pow(0.625,float(i))*noise2d(0.5*pow(1.25,float(i))*iTime+A*v).xy)*A/128.0;\n            A*=1.625*m;\n        }\n        N=normalize(N);\n        vec3 r=C1*R(L,V,N,beta,g)*max(dot(L,N),0.0); // Reflection of the Sun.\n        vec3 s=spherical_albedo(beta,g)*C0;          // Reflection of the sky.\n        col=mix(col,r+s,smoothstep(0.0,-0.05,V.y));\n    }\n    col=1.0-exp(-1.625*col);\n    col=mix(12.92*col,1.055*pow(col,vec3(1.0/2.4))-0.055,step(0.0031308,col)); // sRGB\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}