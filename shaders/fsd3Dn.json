{
    "Shader": {
        "info": {
            "date": "1630067519",
            "description": "some noise blending using fbms and iq's fbm pattern function, modified for my needs.",
            "flags": 0,
            "hasliked": 0,
            "id": "fsd3Dn",
            "likes": 5,
            "name": "RGB Sludge",
            "published": 3,
            "tags": [
                "noise",
                "value",
                "generation",
                "landmass"
            ],
            "usePreview": 0,
            "username": "Pelegefen",
            "viewed": 357
        },
        "renderpass": [
            {
                "code": "float hash(vec2 p) \n{\n    p  = 50.0*fract( p*0.132151241 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat noise( in vec2 p )// thanks to iq\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\nfloat pattern( in vec2 p )\n{\n    vec2 q = vec2( noise( p + vec2(0.0,0.0) ),\n                   noise( p + vec2(5.2,1.3) ) );\n\n    vec2 r = vec2( noise( p + 8.0*q + vec2(1.7,9.2) ),\n                   noise( p + 8.0*q + vec2(8.3,2.8) ) );\n\n    return noise( p + 4.0*r );\n}\nvec4 Terrain(vec2 uv){\n\nvec2 ms = (iMouse.xy / iResolution.xy);\nfloat mousePos = length(ms);\nfloat f = 0.0;\n   \n       \tuv *= 5.0;\n        mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\t\tf  = 0.5000*noise( (uv- ms)- iTime ); uv = m*uv;\n\t\tf += 0.2500*noise( (uv+ ms)+ iTime ); uv = m*uv;\n\t\tf += 0.1250*noise( (uv- ms)- (iTime * .25) ); uv = m*uv;\n\t\tf += 0.0625*noise( (uv+ ms) + (iTime * .5)); uv = m*uv;\n        f = ((fract(uv.y * uv.x + iTime)+f ));\n     \n        \n        \n      vec4 landCol = vec4(\n       sin(f*.75+ iTime)*.5+.5,\n       sin(f- iTime)   *.5+.5,\n       sin(f*.1  + iTime)*.5+.5,\n       1.);\n       \n       //landCol *= vec4(.1 + f,.7+ f,.9,1.);\n       \n       \n       vec4 colorLand = vec4(landCol + pow(f , smoothstep(.2,.21,f)));\n       float b = smoothstep(.05,.08,f);\n       float c = smoothstep(.1,.2,f);\n      float d = smoothstep(.25,.3,f);\n       vec4 color = vec4(f); \n       \n      // float  iTime = iTime - 200000.;\n        color = max(color , colorLand );\n       return color - (c * d * b) * max(pattern((uv-iTime) *.04), pattern((uv+iTime) *.04));\n       \n       }\n       \n       \n       \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n     vec3 col;\n     vec2 p = fragCoord.xy / iResolution.xy;\n    vec4 color;\n\tvec2 uv = p*vec2(iResolution.x/iResolution.y,1.0)+ 1000. ;\n\tuv -= (iMouse.xy / iResolution.xy);\n        color = Terrain(uv*1.) ;\n\n    //vignnette\n    color -= length((p*vec2(iResolution.x/iResolution.y,1.0)-vec2(.85,.5))*2.);\n    fragColor = color;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}