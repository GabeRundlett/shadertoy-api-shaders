{
    "Shader": {
        "info": {
            "date": "1553005807",
            "description": "an approx histogram to get the accumulated values of a tex in a chart format.",
            "flags": 0,
            "hasliked": 0,
            "id": "3dBXRW",
            "likes": 5,
            "name": "Texture histogram",
            "published": 3,
            "tags": [
                "simple",
                "histogram"
            ],
            "usePreview": 0,
            "username": "Loeizd",
            "viewed": 1034
        },
        "renderpass": [
            {
                "code": "#define samples 30.\n\nfloat drawRect(float i, float valLen, float val, vec2 uv) {\n    // draw the rectangle at appropriate place\n\tfloat rect = 0.;\n    \n    if ( uv.x > i/valLen && uv.x < (i+1.)/valLen ) {\n        // draw the height of rect according to val\n        if ( val / (samples * samples *.25) < uv.y ) {\n        \trect = 1.;\n        }\n    }\n\treturn rect;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).xxx;\n    \n    float[] val = float[] (0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.);\n    float valLen = float(val.length());\n    \n    for (float u = 0.; u < samples; u++) {\n        for (float v = 0.; v < samples; v++) {\n        \tfloat fullVal = texture(iChannel0, vec2(u/samples, v/samples) ).x;\n            int stepVal = int(floor(fullVal * valLen));\n            val[stepVal]++;\n    \t}\n    }\n    \n    // then add values in a array of length 10\n    // then draw a \"chart\" based on the array, representing the histogram\n    float hist = 0.;\n    for (float i = 0.; i < valLen; i++) {\n        hist += drawRect(i, valLen, val[int(i)], uv);\n    }\n\n    // Output to screen\n    fragColor = vec4(vec3(mix(uv.x, col.x, hist+.1)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}