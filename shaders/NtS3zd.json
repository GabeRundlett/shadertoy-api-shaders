{
    "Shader": {
        "info": {
            "date": "1624466474",
            "description": "a simple RGB ordered dithering, based on a 3 color gradient, and a palette filter",
            "flags": 0,
            "hasliked": 0,
            "id": "NtS3zd",
            "likes": 9,
            "name": "Colored and ordered dithering",
            "published": 3,
            "tags": [
                "colored",
                "dithering",
                "ordered"
            ],
            "usePreview": 0,
            "username": "Felipe_Rodrigues",
            "viewed": 400
        },
        "renderpass": [
            {
                "code": "float GradientColorQuantity =3.;\nfloat noisePercent = 0.2;\n\nvec3 BeforeColorPalette[] = vec3[](\n    vec3(0.102, 0.11, 0.173),\n    vec3(0.36,0.15,0.36),\n    vec3(0.69,0.24,0.33),\n    vec3(0.94,0.49,0.34),\n    \n    vec3(1.0,0.8,0.46),\n    vec3(0.65,0.94,0.44),\n    vec3(0.22,0.72,0.39),\n    vec3(0.15,0.44,0.47),\n    \n    vec3(0.16,0.21,0.44),\n    vec3(0.23,0.36,0.79),\n    vec3(0.25,0.65,0.96),\n    vec3(0.45,0.94,0.97),\n    \n    vec3(0.96,0.96,0.96),\n    vec3(0.58,0.69,0.76),\n    vec3(0.34,0.42,0.53),\n    vec3(0.2,0.24,0.34)\n);  \n\nvec3 AfterColorPalette[] = vec3[](\n    vec3(0.102, 0.11, 0.173),\n    vec3(0.36,0.15,0.36),\n    vec3(0.69,0.24,0.33),\n    vec3(0.94,0.49,0.34),\n    \n    vec3(1.0,0.8,0.46),\n    vec3(0.65,0.94,0.44),\n    vec3(0.22,0.72,0.39),\n    vec3(0.15,0.44,0.47),\n    \n    vec3(0.16,0.21,0.44),\n    vec3(0.23,0.36,0.79),\n    vec3(0.25,0.65,0.96),\n    vec3(0.45,0.94,0.97),\n    \n    vec3(0.96,0.96,0.96),\n    vec3(0.58,0.69,0.76),\n    vec3(0.34,0.42,0.53),\n    vec3(0.2,0.24,0.34)\n    \n);\n\nfloat GetNoise(vec2 uv){\n    return fract(sin(uv.x+1000.0*uv.y+iTime*20.0)*10000.0)*noisePercent;    \n}\n\nfloat Get(float pixelPosition){\n    return(mod(pixelPosition,GradientColorQuantity)/GradientColorQuantity);\n}\n\nfloat GetR(float pixelPosition)\n{\n    return Get(pixelPosition + GradientColorQuantity*1./3.);\n}\n\nfloat GetG(float pixelPosition)\n{\n    return Get(pixelPosition + GradientColorQuantity*2./3.);\n}\n\nfloat GetB(float pixelPosition)\n{\n    return Get(pixelPosition + GradientColorQuantity*3./3.);\n}\n\nvec3 GetNearstColorPalette(vec3 currentColor,vec3 colorPalette[16]){\n    float nearstDistance = 10000.0;\n    vec3 nearstColor;\n    for(int i ; i<colorPalette.length() ; i++){\n       vec3 newColor = colorPalette[i];\n       float newDistance = distance(currentColor,newColor);\n       if(newDistance<=nearstDistance){\n           nearstColor = newColor;\n           nearstDistance = newDistance; \n       } \n    }\n    return nearstColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //default uv and aspectRatio\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspectRatio = iResolution.x/iResolution.y;\n\n\n    //grayscale gradient\n    float x = Get(fragCoord.x);\n    float y = Get(fragCoord.y);\n    //float value = (x+y)/2.0;  // simple average\n    //float value = x*y; // subtrative\n    //float value = x+y; // aditive\n    float value = ((x+y)/2.0+(x*y)/2.0);\n    fragColor = vec4(value);\n   \n   \n    //pixel color sample\n    vec3 imageColor = texture(iChannel0,uv).rgb;    \n    \n    vec3 paletteColor = GetNearstColorPalette(imageColor,BeforeColorPalette);\n    //calculate a gradient x and y\n    vec3 stepEgdeX = vec3(GetR(fragCoord.x),GetG(fragCoord.x),GetB(fragCoord.x));\n    vec3 stepEgdeY = vec3(GetR(fragCoord.y),GetG(fragCoord.y),GetB(fragCoord.y));\n    \n    // mix both gradiant \n    //vec3 valueEdge = (stepEgdeX + stepEgdeY)/2.0; // simple average\n    //vec3 valueEdge = (stepEgdeX * stepEgdeY); // subtrative\n    //vec3 valueEdge = (stepEgdeX + stepEgdeY); // aditive\n    \n    vec3 valueEdge = ((stepEgdeX + stepEgdeY) + (stepEgdeX * stepEgdeY))/2.; // simple average of (subtractive and aditive)\n    \n    // dithering on the gradient\n    vec3 newColor = step(valueEdge+GetNoise(uv),paletteColor); \n    \n    \n    vec3 afterColor = GetNearstColorPalette(newColor,AfterColorPalette); \n    \n    fragColor = vec4(afterColor,1.0); // debug after palette effect\n    \n    //fragColor = vec4(newColor,1.0);      // debug the dithering\n    \n    //fragColor = vec4(imageColor,1.0);  // debug the image\n\n    //fragColor = vec4(valueEdge,1.0);   // debug the gradient \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}