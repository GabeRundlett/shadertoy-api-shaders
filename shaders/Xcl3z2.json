{
    "Shader": {
        "info": {
            "date": "1703278691",
            "description": "LMB to look around.\nChange \"QUALITY\" to 2 in Common for a nicer result.",
            "flags": 32,
            "hasliked": 0,
            "id": "Xcl3z2",
            "likes": 2,
            "name": "Burnt Orange",
            "published": 3,
            "tags": [
                "raymarching",
                "ray",
                "raymarch",
                "clouds",
                "volumetric",
                "atmosphere",
                "march"
            ],
            "usePreview": 0,
            "username": "TheSandvichMaker",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "// iChannel0: BufferB\n// iChannel1: Blue Noise\n\nconst float sharpen_kernel[9] = float[](\n\t-0.0023, -0.0432, -0.0023,\n\t-0.0432,  1.1820, -0.0432,\n\t-0.0023, -0.0432, -0.0023\n);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 sharpened = vec3(0.0);\n\n    for (int yy = 0; yy < 3; yy++)\n    {\n        for (int xx = 0; xx < 3; xx++)\n        {\n            vec3  x = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(xx - 1, yy - 1), 0).rgb;\n            float w = sharpen_kernel[xx + 3*yy];\n            sharpened += x*w;\n        }\n    }\n\n    vec3 col = texelFetch(iChannel0, ivec2(fragCoord), 0).rgb;\n\n    col = mix(col, sharpened, float(SHARPEN_AMOUNT));\n\n    vec4 blue_noise = texelFetch(iChannel1, ivec2(fragCoord.xy) % ivec2(1024, 1024), 0);\n    float phi = 0.5*(1.0 + sqrt(5.0));\n    blue_noise = fract(blue_noise + float(iFrame)*phi);\n\n    vec3 dither = -1.0 + 2.0*vec3(remap_pdf_tri_erp(blue_noise.r),\n                                  remap_pdf_tri_erp(blue_noise.g),\n                                  remap_pdf_tri_erp(blue_noise.b));\n\n    col = saturate(col + dither / 255.0);\n\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//\n// Settings\n//\n\n// Quality settings:\n// 2: high\n// 1: normal\n// 0: bad\n#define QUALITY 1\n\n#define TAA_ENABLED 1\n#define TAA_USE_NEIGHBORHOOD_CLAMPING 1\n#define TAA_ALPHA 0.1\n#define SHARPEN_AMOUNT 8.0\n\n#if QUALITY == 2\n#define PRIMARY_STEP_COUNT 32\n#define SHADOW_STEP_COUNT 128\n#elif QUALITY == 1\n#define PRIMARY_STEP_COUNT 24\n#define SHADOW_STEP_COUNT 64\n#else\n#define PRIMARY_STEP_COUNT 16\n#define SHADOW_STEP_COUNT 32\n#endif\n\n#define PRIMARY_MAX_DISTANCE 3500\n#define SHADOW_MAX_DISTANCE 2000\n#define AMBIENT_STRENGTH 2.25\n#define STEP_NONLINEARITY 2\n#define CAMERA_FILM_DISTANCE 1.55 // TODO: Fov in degrees\n\n//\n// Internal common stuff\n//\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define rcp(x) (1.0 / (x))\n#define PI 3.14159265\n\n#define remap01(x, out_lo, out_hi) ((out_lo) + x*((out_hi) - (out_lo)))\n\n// taken from https://www.shadertoy.com/view/WldSRf\nfloat remap_pdf_tri_erp( const float v )\n{\n    float r2 = 0.5 * v;\n    float f1 = sqrt( r2 );\n    float f2 = 1.0 - sqrt( r2 - 0.25 );\n    return (v < 0.5) ? f1 : f2;\n}\n\nvec3 get_camera(in vec3 zz, in vec2 p, in float tilt, out vec3 xx, out vec3 yy)\n{\n    vec3 world_up = normalize(vec3(-0.12*tilt, 1, 0));\n    xx = normalize(cross(zz, world_up));\n    yy = normalize(cross(xx, zz));\n\n    vec3 rd = normalize(p.x*xx + p.y*yy + CAMERA_FILM_DISTANCE*zz);\n    return rd;\n}\n\n// bilateral = value between -1 and 1\n// encoding/decoding to pass along between passes\nfloat encode_bilateral(float x)\n{\n    return 0.5 + 0.5*x;\n}\n\nfloat decode_bilateral(float x)\n{\n    return 2.0*x - 1.0;\n}\n\nvec3 encode_direction(vec3 dir)\n{\n    return vec3(0.5) + 0.5*dir;\n}\n\nvec3 decode_direction(vec3 dir)\n{\n    return 2.0*dir - vec3(1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// iChannel0: BufferA\n// iChannel1: Blue Noise\n\nstruct Scene\n{\n    vec3 noise;\n\n    vec3 sun_dir;\n    vec3 sun_col;\n\n    vec3 atmos_absorption;\n    vec3 atmos_scattering;\n    float atmos_k;\n\n    vec3 atmos_absorption2;\n    vec3 atmos_scattering2;\n    float atmos_k2;\n\n    float cloud_absorption;\n    float cloud_scattering;\n    float cloud_k;\n\n    float cloud_top;\n    float cloud_top_fade;\n    float cloud_bot;\n    float cloud_bot_fade;\n};\n\n// integer hash credit: https://www.shadertoy.com/view/XlXcW4\nvec3 integer_hash3( uvec3 x )\n{\n    const uint k = 1103515245U;  // GLIB C\n                                 //\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\n// 3D perlin noise credit: https://www.shadertoy.com/view/Xsl3Dl\nfloat hash(vec3 p)  // replace this by something better\n{\n    p  = fract( p*0.3183099+.1 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(i+vec3(0,0,0)), \n                        hash(i+vec3(1,0,0)),f.x),\n                   mix( hash(i+vec3(0,1,0)), \n                        hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(i+vec3(0,0,1)), \n                        hash(i+vec3(1,0,1)),f.x),\n                   mix( hash(i+vec3(0,1,1)), \n                        hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\nvec3 sky_color(in Scene s, vec2 uv, vec3 d)\n{\n    vec3 bot = vec3(0.6, 0.12, 0.05);\n    vec3 top = vec3(0.6, 0.55, 0.45);\n    vec3 col = 0.5*mix(bot, top, saturate(d.y));\n    col *= 1.0 + min(0.0, d.y);\n\n    // sun dust\n    float sun_dust_speed = 0.04;\n    float sun_dust_scale = 0.2;\n    vec3 sun_dust = vec3(0.0);\n    sun_dust += texture(iChannel1, sun_dust_scale*0.125*(uv.xy + sun_dust_speed*vec2(0.12, -0.30)*iTime)).xyz;\n    sun_dust += texture(iChannel1, sun_dust_scale*0.160*(uv.xy + sun_dust_speed*vec2(0.21, -0.08)*iTime)).xyz;\n    sun_dust += texture(iChannel1, sun_dust_scale*0.190*(uv.xy + sun_dust_speed*vec2(0.35,  0.28)*iTime)).xyz;\n    sun_dust /= 3.0; // normalize\n\n    // sun disk and fake sun bloom\n\n    float haze_wobble = 0.0105;\n    vec3  d_hazy = normalize(d + haze_wobble*(sun_dust.yzx - vec3(0.5)));\n    float sun_t = max(0.0, dot(d_hazy, s.sun_dir));\n\n    float sun_mask  = smoothstep(0.9995, 0.99995, sun_t);\n    float sun_atten = 0.50 - 0.42*sun_dust.x; // fake a stronger \"hazy atmosphere\" effect\n    col += sun_atten*s.sun_col*sun_mask;\n\n    sun_t *= sun_t;\n    sun_t *= sun_t;\n    sun_t *= sun_t;\n    sun_t *= sun_t;\n    sun_t *= sun_t;\n    sun_t *= sun_t;\n    sun_t *= sun_t;\n\n    col += 0.24*s.sun_col*sun_t;\n\n    sun_t *= sun_t;\n    sun_t *= sun_t;\n    sun_t *= sun_t;\n\n    col += 0.12*s.sun_col*sun_t;\n\n    return col;\n}\n\nvec3 cloud_layer_fade(in Scene s, in vec3 x)\n{\n    float y_offset_range = 450.0;\n    vec3 slew = vec3(-550, -500, 0) + 4.0*iTime*vec3(0.2, 1.5, 0.3);\n    float y_offset = y_offset_range*(noise((x + slew) / 3000.0) - 0.15);\n\n    vec3 result = vec3(smoothstep(s.cloud_top, s.cloud_top - s.cloud_top_fade, y_offset + x.y),\n                       smoothstep(s.cloud_bot, s.cloud_bot + s.cloud_bot_fade, y_offset + x.y),\n                       smoothstep(s.cloud_bot, s.cloud_top, y_offset + x.y));\n    return result;\n}\n\nfloat cloud_density(in vec3 x)\n{\n    float result = 0.0;\n    \n    // bias noise - creates holes in the clouds by applying bias\n    vec3 scroll = vec3(200, 100, 0) + 45.0*vec3(iTime, 0.25*iTime, 0.03*iTime);\n    float bias_noise = noise((scroll + x*vec3(1, 1.2, 1)) / 1024.0);\n\n    // cloud octaves\n    float w     = 1.0;\n    float w_sum = 0.0;\n    float wx    = 0.5;\n    vec3 x_oct  = x / 256.0;\n\n    vec4 oct_turbulence[4] = vec4[](\n        vec4(0.01, -0.005, 0, 1),\n        vec4(-0.007, 0.03, 0.01, 1),\n        vec4(0.04, 0.01, -0.002, remap01(bias_noise, 0.8, 1.0)),\n        vec4(0.02, 0.005, 0.021, remap01(bias_noise, 0.5, 1.0))\n    );\n\n    for (int i = 0; i < 4; i++) \n    {\n        result += oct_turbulence[i].w*w*noise(x_oct + 1.8*iTime*oct_turbulence[i].xyz);\n        x_oct *= 2.0;\n        w_sum += w;\n        w     *= wx;\n    }\n\n    result *= rcp(w_sum);\n    float unbiased = result;\n\n    // shaping, modulating and applying the bias noise\n    float bias_height_mod = 0.25*cos(0.0195*iTime + 2.5);\n    bias_noise = max(0.0, bias_noise - (0.35 + bias_height_mod)*exp(-(x.y - 400.0) / 8192.0));\n\n    float bias_min = 0.3;\n    float bias_max = 1.0;\n    float bias_gamma = 0.8;\n\n    float bias = remap01(pow(bias_noise, bias_gamma), bias_min, bias_max);\n    result = max(0.0, result - bias) / (1.0 - bias);\n    \n    // shaping the end result with some gamma for controllable whispiness/blobbiness\n    float result_gamma = 0.75;\n    result = pow(result, result_gamma);\n\n    // pulsars\n    {\n        // float tile_size = 2048.0;\n        float tile_size = 3128.0;\n        vec2 tile   = round(vec2(x.x, x.z) / tile_size);\n        vec3 jitter = integer_hash3(uvec3(tile.x, tile.y, 123));\n        vec2 point  = tile_size*tile + tile_size*(jitter.xy - vec2(0.5));\n\n        float dist  = length(point - vec2(x.x, x.z));\n        float pulse = 5.0*sin((pow(2.0*dist, 0.9) + 35.0*iTime) / 60.0) - unbiased*3.5;\n        float atten = exp(-dist / (350.0 + 250.0*sin(0.0239*iTime + 3.14*jitter.z)));\n        result = max(0.0, result - max(0.0, pulse*atten));\n    }\n\n    return result;\n}\n\nfloat phase(float cos_theta, float k)\n{\n    float denom = (1.0 - k*cos_theta);\n    denom *= denom;\n\n    float result = 0.25*PI*(1.0 - k*k) / denom;\n    return result;\n}\n\nfloat march_cloud_shadow(in Scene s, in vec3 ro, in vec3 rd)\n{\n    int   step_count = SHADOW_STEP_COUNT;\n    float step_max   = float(SHADOW_MAX_DISTANCE);\n    float step_size  = step_max / float(step_count);\n    float t          = s.noise.y*step_size;\n\n    float extinction = s.cloud_absorption + s.cloud_scattering;\n\n    float transmittance = 1.0;\n\n    for (int i = 0; i < step_count; i++)\n    {\n        vec3 step_p = ro + t*rd;\n\n        float density = cloud_density(step_p);\n\n        vec3 layer = cloud_layer_fade(s, step_p);\n        density *= layer.x*layer.y;\n\n        transmittance *= exp(-extinction*density*step_size); \n    }\n\n    return transmittance;\n}\n\nvoid march_clouds(in Scene s, in vec2 uv, in vec3 ro, in vec3 rd, out vec3 illumination, out vec3 transmittance)\n{\n    int   step_count = PRIMARY_STEP_COUNT;\n    float step_max   = float(PRIMARY_MAX_DISTANCE);\n    // float step_size  = step_max / float(step_count);\n    // float t          = 0.0; // s.noise.x*step_size;\n\n    vec3 cloud_extinction = vec3(s.cloud_absorption + s.cloud_scattering);\n    vec3 atmos_extinction = s.atmos_absorption + s.atmos_scattering;\n\n    illumination  = vec3(0.0);\n    transmittance = vec3(1.0);\n\n    float prev_step_distance = 0.0;\n    \n    float cos_theta = -dot(rd, s.sun_dir);\n    float phase_clouds = phase(cos_theta, s.cloud_k);\n    float phase_atmos1 = phase(cos_theta, s.atmos_k);\n    float phase_atmos2 = phase(cos_theta, s.atmos_k2);\n\n    for (int i = 0; i < step_count; i++)\n    {\n        float t = (float(i) + s.noise.x) / float(step_count);\n        float step_distance = step_max*pow(t, float(STEP_NONLINEARITY));\n        float step_size = step_distance - prev_step_distance;\n        prev_step_distance = step_distance;\n        vec3 step_p = ro + step_distance*rd;\n\n        float atmos_density = exp((-step_p.y - 450.0) / 1024.0);\n\n        if (step_p.y < -1200.0)\n        {\n            atmos_density = 0.0;\n        }\n\n        float density = cloud_density(step_p);\n\n        vec3 layer = cloud_layer_fade(s, step_p);\n        density *= layer.x*layer.y;\n\n        vec3 ambient = float(AMBIENT_STRENGTH)*sky_color(s, uv, vec3(0.0, layer.z, -1.0));\n\n        float shadow = march_cloud_shadow(s, step_p, s.sun_dir);\n\n        transmittance *= exp(-cloud_extinction*density*step_size); \n        transmittance *= exp(-atmos_extinction*atmos_density*step_size);\n\n\n        vec3 in_scattering  = shadow*s.sun_col;\n\n        vec3 out_scattering = vec3(0.0);\n        out_scattering += s.cloud_scattering*density*phase_clouds;\n        out_scattering += s.atmos_scattering*atmos_density*phase_atmos1;\n        out_scattering += s.atmos_scattering2*atmos_density*phase_atmos2;\n\n        vec3 light = in_scattering * out_scattering;\n\n#if 0\n        vec3 light = vec3(0.0);\n        light += s.cloud_scattering*density*shadow*s.sun_col*phase(cos_theta, s.cloud_k);\n        light += s.atmos_scattering*atmos_density*shadow*s.sun_col*phase(cos_theta, s.atmos_k);\n        light += s.atmos_scattering2*atmos_density*shadow*s.sun_col*phase(cos_theta, s.atmos_k2);\n        light += ambient*s.cloud_scattering*density;\n#endif\n\n        illumination += transmittance*light*step_size;\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // init scene\n    Scene s;\n    s.noise             = integer_hash3(uvec3(uvec2(fragCoord), iFrame));\n    s.sun_dir           = normalize(vec3(0.8, 0.15, 0.6));\n    s.sun_col           = 13.5*vec3(1.0, 0.25, 0.18);\n    s.atmos_absorption  = 1.0*vec3(0.00001, 0.0004, 0.0006);\n    s.atmos_scattering  = 0.25*vec3(0.00015, 0.0003, 0.0002);\n    s.atmos_k           = -0.7;\n    s.atmos_absorption2 = vec3(0.00001);\n    s.atmos_scattering2 = 0.23*vec3(0.00002, 0.00015, 0.00011);\n    s.atmos_k2          = 0.2;\n    s.cloud_absorption  = 0.0014;\n    s.cloud_scattering  = 0.008;\n    s.cloud_k           = -0.3;\n    s.cloud_top         = 0.0;\n    s.cloud_top_fade    = 450.0;\n    s.cloud_bot         = -1400.0;\n    s.cloud_bot_fade    = 150.0;\n\n    // calculate camera\n    vec2 p     = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    vec2 mouse = (-iResolution.xy + 2.0*iMouse.xy) / iResolution.y;\n    \n    if (iMouse.x == 0.0 && iMouse.y == 0.0)\n    {\n        mouse = vec2(-0.75, -0.20);\n    }\n\n    mouse += vec2(0.15*sin(0.025*iTime), -0.18*sin(0.049*iTime - 1.23));\n\n    float tilt = sin(0.01*iTime);\n    float tilt_sign = sign(tilt);\n    tilt *= tilt;\n    tilt *= tilt;\n    tilt *= tilt_sign;\n\n    vec3 zz = normalize(vec3(0, -0.1, 1) + vec3(-mouse.x, mouse.y, 0));\n\n    vec3 xx, yy;\n    vec3 rd = get_camera(zz, p, tilt, xx, yy);\n    vec3 ro = vec3(75, 35, -200);\n    ro += vec3(35.0*sin(0.05*iTime), 100.0*sin(0.099*iTime - 1.23) - 50.0, 46.0*iTime);\n\n    // render scene\n    vec3 col = sky_color(s, uv, rd);\n\n    vec3 illumination, transmittance;\n    march_clouds(s, uv, ro, rd, illumination, transmittance);\n\n    col = col*transmittance + illumination;\n    \n    // vignette\n    float vignette = length(p) / 2.0;\n    vignette *= vignette;\n    vignette *= vignette;\n    col *= 1.0 - vignette*0.33;\n    \n    // tonemap\n    col = vec3(1.0) - exp(-col);\n\n    // output\n    fragColor = vec4(col, 1.0);\n\n    // write out camera direction and tilt for TAA\n    if (fragCoord.y < 1.0)\n    {\n        if      (fragCoord.x < 1.0) fragColor.a = encode_bilateral(zz.x);\n        else if (fragCoord.x < 2.0) fragColor.a = encode_bilateral(zz.y);\n        else if (fragCoord.x < 3.0) fragColor.a = encode_bilateral(zz.z);\n        else if (fragCoord.x < 4.0) fragColor.a = encode_bilateral(tilt);\n    }\n    else if (fragCoord.y < 2.0)\n    {\n        if      (fragCoord.x < 1.0) fragColor.a = texelFetch(iChannel0, ivec2(0, 0), 0).a;\n        else if (fragCoord.x < 2.0) fragColor.a = texelFetch(iChannel0, ivec2(1, 0), 0).a;\n        else if (fragCoord.x < 3.0) fragColor.a = texelFetch(iChannel0, ivec2(2, 0), 0).a;\n        else if (fragCoord.x < 4.0) fragColor.a = texelFetch(iChannel0, ivec2(3, 0), 0).a;\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// iChannel0: BufferA (scene input)\n// iChannel1: BufferB (TAA output)\n\n// 0: off\n// 1: camera direction\n// 2: ray direction\n// 3: prev_uv\n// 4: uv (for reference)\n// 5: camera direction (mode 2)\n// 6: uv diff\n#define DEBUG_MODE 0\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 col = texelFetch(iChannel0, ivec2(fragCoord), 0).rgb;\n\n#if TAA_ENABLED\n\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 p  = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n\n    // read current camera\n    vec4 curr_data = vec4(texelFetch(iChannel0, ivec2(0, 0), 0).a,\n                          texelFetch(iChannel0, ivec2(1, 0), 0).a,\n                          texelFetch(iChannel0, ivec2(2, 0), 0).a,\n                          texelFetch(iChannel0, ivec2(3, 0), 0).a);\n\n    vec3  zz   = decode_direction(curr_data.xyz);\n    float tilt = decode_bilateral(curr_data.w);\n\n    vec3 xx, yy;\n    vec3 rd = get_camera(zz, p, tilt, xx, yy);\n\n    // read prev camera\n    vec4 prev_data = vec4(texelFetch(iChannel0, ivec2(0, 1), 0).a,\n                          texelFetch(iChannel0, ivec2(1, 1), 0).a,\n                          texelFetch(iChannel0, ivec2(2, 1), 0).a,\n                          texelFetch(iChannel0, ivec2(3, 1), 0).a);\n\n    vec3  zz_prev   = decode_direction(prev_data.xyz);\n    float tilt_prev = decode_bilateral(prev_data.w);\n\n    vec3 xx_prev, yy_prev;\n    vec3 rd_prev = get_camera(zz_prev, p, tilt_prev, xx_prev, yy_prev);\n\n    // reverse engineer pixel motion from camera rotation\n    float t              = CAMERA_FILM_DISTANCE / dot(zz_prev, rd);\n    vec2  p_prev         = vec2(dot(t*rd, xx_prev), dot(t*rd, yy_prev));\n    vec2  fragCoord_prev = 0.5*(p_prev*iResolution.y + iResolution.xy);\n    vec2  uv_prev        = fragCoord_prev / iResolution.xy;\n\n    // do TAA\n    if (uv_prev.x >= 0.0 && uv_prev.x < 1.0 &&\n        uv_prev.y >= 0.0 && uv_prev.y < 1.0)\n    {\n        vec3 old_col = texture(iChannel1, uv_prev).rgb;\n#if TAA_USE_NEIGHBORHOOD_CLAMPING\n        vec3 nb_min = col;\n        vec3 nb_max = col;\n\n        for (int yy = -1; yy <= 1; yy++)\n        {\n            for (int xx = -1; xx <= 1; xx++)\n            {\n                if (xx == 0 && yy == 0) continue;\n\n                vec3 samp = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(xx, yy), 0).rgb;\n                nb_min = min(nb_min, samp);\n                nb_max = max(nb_max, samp);\n            }\n        }\n\n        old_col = clamp(old_col, nb_min, nb_max);\n#endif\n        col     = mix(old_col, col, float(TAA_ALPHA));\n    }\n\n#if DEBUG_MODE == 1\n    col = abs(zz - zz_prev);\n#elif DEBUG_MODE == 2\n    col = abs(rd_curr - rd_prev);\n#elif DEBUG_MODE == 3\n    col = vec3(uv_prev, 0.0);\n#elif DEBUG_MODE == 4\n    col = vec3(uv, 0.0);\n#elif DEBUG_MODE == 5\n    if (uv.x < 0.5)\n        col = encode_direction(zz);\n    else\n        col = encode_direction(zz_prev);\n#elif DEBUG_MODE == 6\n    col = vec3(uv - uv_prev, 0.0);\n#endif\n\n#endif /* TAA_ENABLED */\n    \n    fragColor = vec4(col, 1.0);\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}