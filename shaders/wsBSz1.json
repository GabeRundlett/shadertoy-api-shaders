{
    "Shader": {
        "info": {
            "date": "1552907178",
            "description": "special case of \nhttps://www.shadertoy.com/view/tsjGzD\nis useful to indicate g-symmetry, simpler than a \"hand or \"horse\" shape \ng-Symmetry remains within \"the worlds ugliest (entropy minimizing) music\"\nhttps://www.youtube.com/watch?v=RENk9PK06AQ",
            "flags": 0,
            "hasliked": 0,
            "id": "wsBSz1",
            "likes": 2,
            "name": "G-symmetric [G]",
            "published": 3,
            "tags": [
                "ping",
                "sonar",
                "gsymmetry",
                "gsymmetry",
                "costas",
                "golomb"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 500
        },
        "renderpass": [
            {
                "code": "//self: https://www.shadertoy.com/view/wsBSz1\n//special case of \n//parent: https://www.shadertoy.com/view/tsjGzD\n//\n//useful to indicate g-symmetry\n//, in the context of g-symmetric costas-arrays\n//https://en.wikipedia.org/wiki/Costas_array\n//G-symmetry is often one of the few remaining symmetry sets\n//for some orders of costass-Arrays: eg order 5:\n\n/*\n\n____0   0____\n__0__   __0__\n_8___   ___8_\n___8_   _8___\n8____   ____8\n\n\n8____   ____8\n___8_   _8___\n_8___   ___8_\n__0__   __0__\n____0   0____\n\nI see this to be useful for midi-sequence compression.\nwhere ever a leitmotif (segment) \nis closer to a costasArray than to a line/arpeggio\n,BEFORE appling any deformation to it (that most likely adds entropy)\nto make it match a target-sequence.\n\nThe core concept comes down to start with \"the worlds ugliest music\"\nhttps://www.youtube.com/watch?v=RENk9PK06AQ\nand to add 100% detemrinistic \"noise\" to it, to make it LÃ–ESS ugly\n\nthe goal here is to be in absolute control over (almost) ANY added entropy\nso that (almost) ALL entropy within any midi sequence \ncan be seeded/hashed (with optional bijections in them).\n\nthis seems to be more fun with the proper inverse functions\n, that are yet to be defined and discussed:\n\n\nhttps://www.reddit.com/r/musictheory/comments/b11hmx/how_important_is_pattern_to_music/\n\n\n*/\n\n#define pi acos(-1.0)\nvec2 cs(float a){return vec2(cos(a),sin(a));}//common subroutine\n//float perpdot(vec2 c,vec2 p){return dot(vec2(c.y,-c.x),p);}\n\n\nfloat gSym(vec2 p//special case of: https://www.shadertoy.com/view/tsjGzD\n){float r=length(mat2(1,-1,1,1)*p/sqrt(2.)+vec2(.5,0))-.375//circle\n ;vec2 c=cs(.75*pi)//for 2dRotation\n ;p.x=abs(p.x);\n ;float f=dot(c*vec2(1,-1),p);\n ;c=vec2(dot(c.yx,p),step(0.,f))\n ;p.x=mix(length(p),c.x,c.y);\n ;f=mix(f,-p.x,c.y*step(c.x,0.))\n ;c=vec2(abs(p.x-(.5+1.)*0.5)-(1.-.5)*.5,f);\n ;return min(r,min(max(c.x,c.y),0.)+length(max(c,0.)))\n ;}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord\n){vec2 uv=(fragCoord*2.0-iResolution.xy)/iResolution.y\n ;uv*=1.5//viewZoom\n ;uv=uv*mat2(-1,1,-1,-1)/sqrt(2.)//eight rotation\n ;float len=gSym(uv)\n ;//orangeBlue gradientVis by iq https://www.shadertoy.com/view/4lcBWn\n ;vec3 c=1.-sign(len)*vec3(.1,.4,.7)\n ;c*=1.-exp(-2.*abs(len))\n ;c*=.8+.2*cos(120.*abs(len))\n ;c=mix(c,vec3(1),1.-smoothstep(.0,.02,abs(len)))\n ;fragColor=vec4(c,1.);}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}