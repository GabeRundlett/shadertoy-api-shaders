{
    "Shader": {
        "info": {
            "date": "1634106335",
            "description": "15 common color effects. See code for the effects names.\n\n[b]Click & drag horizontally[/b] to manually adjust the percentage value used for some effect, from 0 to 1.\n\nMore info: [url]http://redqueengraphics.com/category/color-adjustments[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "NstSWf",
            "likes": 18,
            "name": "Common Color Effects",
            "published": 3,
            "tags": [
                "color",
                "contrast",
                "saturation",
                "blend",
                "gamma",
                "brightness",
                "inversion",
                "exposure",
                "vibrance",
                "luminence"
            ],
            "usePreview": 0,
            "username": "chenglou",
            "viewed": 2035
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Divide the canvas into grids\n    vec2 gridCount = vec2(5., 3.);\n    vec2 uv = fragCoord / iResolution.xy * gridCount; // x: [0, 5[ and y: [0, 3[\n    vec2 gridID = floor(uv); // same as uv but integers\n    // Map the 2D grid ID from (0, 0) -> 1 to (4, 2) -> 15\n    int mappedID = int((gridCount.y - gridID.y - 1.) * gridCount.x + gridID.x) + 1;\n    \n    // Base and overlay texture for blending. Sometime we only use base (t1)\n    vec4 t1 = texture(iChannel0, uv);\n    vec4 t2 = texture(iChannel1, uv);\n    // Shadertoy's (non-noise) textures are in sRGB. Turn them into linear space for manipulation. Turn them back at the end\n    t1 = pow(t1, vec4(2.2));\n    t2 = pow(t2, vec4(2.2));\n    \n    // Used by certain effects. from 0 to 1\n    float percentSlider = sin(iTime) / 2. + .5;\n    // Click & drag horizontally to manually adjust the percentage\n    if (iMouse.z > 0.) percentSlider = iMouse.x / iResolution.x;\n    \n    // === Ok, start!\n    vec4 color;\n    switch (mappedID) {\n        case 1: // blend: dissolve\n            color = mix(t1, t2, percentSlider);\n            break;\n        case 2: // blend: lighten\n            color = max(t1, t2);\n            break;\n        case 3: // blend: darken\n            color = min(t1, t2);\n            break;\n        case 4: // blend: subtract\n            color = t1 - t2;\n            break;\n        case 5: // blend: multiply. Would require more calculations for non-1 alpha\n            color = t2 * t1;\n            break;\n        case 6: // blend: add. Would require more calculations for non-1 alpha\n            color = t1 + t2;\n            break;\n        case 7: // blend: divide. Would require more calculations for non-1 alpha\n            color = t1 / t2;\n            break;\n        case 8: // luminence\n            vec3 weights = vec3(0.2125, 0.7154, 0.0721); // sums to 1\n            float luminance = dot(t1.rgb, weights);\n            color = vec4(vec3(luminance), 1.);\n            break;\n        case 9: // brightness\n            color = t1 + percentSlider;\n            break;\n        case 10: // contrast\n            color = (t1 - .5) * percentSlider * 2. + .5; // 0 to 2 contrast\n            break;\n        case 11: // exposure\n            color = t1 * pow(2., percentSlider);\n            break;\n        case 12: // gamma\n            color = pow(t1, vec4(percentSlider) * 2.2); // 0 to 2.2, by convention\n            break;\n        case 13: // saturation\n            vec3 weights_ = vec3(0.2125, 0.7154, 0.0721); // sums to 1\n            float luminance_ = dot(t1.rgb, weights_);\n            color = mix(vec4(luminance_), t1, vec4(percentSlider) * 5.);\n            break;\n        case 14: // vibrance\n            float average = (t1.r + t1.g + t1.b) / 3.;\n            float mx = max(t1.r, max(t1.g, t1.b));\n            float amount = (mx - average) * percentSlider * 3. * 5.;\n            color = t1 - (mx - t1) * amount;\n            break;\n        case 15: // inversion\n            color = 1. - t1;\n            break;\n    }\n\n    fragColor = pow(color, vec4(1./2.2)); // gamma correct back\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}