{
    "Shader": {
        "info": {
            "date": "1624252804",
            "description": "The integral of smoothstep is a useful way to smoothly ramping up a stationary object into constant motion. More info: [url]https://iquilezles.org/articles/smoothstepintegral[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "sdBSWc",
            "likes": 110,
            "name": "Smoothstep Integral",
            "published": 3,
            "tags": [
                "2d",
                "smoothstep",
                "integral",
                "butterfly"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 3043
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2021 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// The left butterfly implements a naive and wrong way to\n// transition a stationary object into constant motion. The\n// butterfly to the right implements the integral of the\n// smoothstep() function in order to smoohtly transition\n// between the two states.\n//\n// More information here:\n//\n// https://iquilezles.org/articles/smoothstepintegral\n\n\n\n// Incorrect EaseInOut/Smoothstep velocity\nfloat position_bad( float t, in float T )\n{\n    return smoothstep(0.0,T,t)*t;\n    //return (t<T) ? (t*t*t)/(T*T*T)*(3.0*T-2.0*t) : t;\n}\n\n// Correct integral of EaseInOut/Smoothstep\nfloat position_good( float t, in float T )\n{\n    if( t>=T ) return t - 0.5*T;\n    float f = t/T;\n    return f*f*f*(T-t*0.5);\n}\n\n\n// =======================================\n\nvec3 trackMin( in vec3 v, in float d )\n{\n         if( d<v.x ) v=vec3(d,v.x,v.y); \n    else if( d<v.y ) v=vec3(v.x,d,v.y);\n    else if( d<v.z ) v=vec3(v.x,v.y,d);\n    return v;\n}\n\nvec4 butterfly( in vec2 p )\n{\n    p.x = abs(p.x);\n\n    p.y *= 0.9;\n    vec4 col = vec4(0.0);\n\n    float a = atan(p.x,p.y);\n    float r = length(p);\n    \n    if( p.y<0.0 )\n    {\n        float f = 0.6 + 0.01*sin( 24.0*a );\n        float w = 1.1*a-0.8;\n        f *= sin(w)*sin(w);\n\n        float th = f + 0.001;\n        float th2 = th;\n        \n        vec3 wcol = mix( vec3(210,119,40)/255.0, \n                         vec3(232,79,12)/255.0, smoothstep( 0.0, 0.7, r ) );\n        wcol *= 1.5;\n\n        wcol *= 1.0+0.1*sin(17.0*p.x+vec3(0,0,4))*sin(23.0*p.y+vec3(0,0,4));\n\n        vec2 q = p;\n        q.xy += 0.02*sin(q.yx*12.0);\n        q.y = min(q.y,0.0);\n        vec3 v = vec3(10);\n        v = trackMin(v,length(q-vec2(0.29,-0.20)));\n        v = trackMin(v,length(q-vec2(0.10,-0.30)));\n        v = trackMin(v,length(q-vec2(0.20,-0.26)));\n        v = trackMin(v,length(q-vec2(0.28,-0.29)));\n        v = trackMin(v,length(q-vec2(0.34,-0.27)));\n        v = trackMin(v,length(q-vec2(0.38,-0.24)));\n        v = trackMin(v,length(q-vec2(0.39,-0.20)));\n        v = trackMin(v,length(q-vec2(0.38,-0.15)));\n        v = trackMin(v,length(q-vec2(0.35,-0.08)));\n\n        v.yz -= v.x;\n        float g = 1.25*v.y*v.z/max(v.y+v.z,0.001);\n        wcol *= smoothstep(0.0,0.01,g);\n        th -= 0.05*(1.0-smoothstep(0.0,0.05,g))-0.02;\n\n        wcol *= smoothstep(0.02,0.03,(th-r)*th);\n\n        q = vec2( mod(a,0.1)-0.05, (r-th+0.025)*3.1415*0.5 );\n        float d = length( q )-0.015;\n        wcol = mix( wcol, vec3(1,1,1), 1.0-smoothstep( 0.0, 0.005,d) );\n        \n        wcol *= smoothstep(0.01,0.03,length(p-vec2(0.235,-0.2)));\n        \n        d = r-(th+th2)*0.5;\n        col = vec4(wcol,smoothstep( 0.0,2.0*fwidth(d),-d) );\n    }\n    \n    if( a<2.2 )\n    {\n        float f = 0.65 + 0.015*sin( 24.0*a );\n        float w = a*(3.1416/2.356);\n        float th = f*sin(w)*sin(w) + 0.001;\n        float th2 = th;\n        th += 0.25*exp2( -50.0*(w-1.4)*(w-1.4) );\n            \n        vec3 wcol = mix( vec3(0.7,0.5,0.2), \n                         vec3(0.8,0.2,0.0), smoothstep( 0.0, 1.0, r ) );\n        wcol *= 1.4;\n        wcol *= 1.0+0.1*sin(13.0*p.x+vec3(0,0,4))*sin(19.0*p.y+vec3(0,0,4));\n\n        vec3 v = vec3(10);\n        v = trackMin(v,length(p-vec2(0.25,0.2)));\n        v = trackMin(v,length(p-vec2(0.35,0.0)));\n        v = trackMin(v,length(p-vec2(0.4,0.1)));\n        v = trackMin(v,length(p-vec2(0.45,0.2)));\n        v = trackMin(v,length(p-vec2(0.45,0.3)));\n\n        v.yz -= v.x;\n        float g = 2.0*v.y*v.z/max(v.y+v.z,0.001);\n        wcol *= smoothstep(0.0,0.02,g);\n        th2 -= 0.05*(1.0-smoothstep(0.0,0.05,g));\n\n        float isblack = smoothstep(0.02,0.03,(th2-r)*th2);\n\n        vec2 q = vec2( mod(a,0.1)-0.05, (r-th+0.025)*3.1415*0.5 );\n        float d = length( q )-0.015;\n        float ww = 1.0-smoothstep( 0.0, 0.01,d);\n        \n        if( r>th2 )\n        {\n        vec2 q = fract(p*18.0)-0.5;\n        vec2 iq = floor(p*18.0);\n        float id= iq.x*111.0+iq.y*13.0;\n        q += 0.25*sin(id*vec2(15,17)+vec2(0,2));\n        float r = 1.0+0.75*sin(id*431.0);\n        ww = max( ww, 1.0-smoothstep(0.0,0.01,length(q)-0.2*r));\n        }\n        \n        wcol = mix( wcol, vec3(ww), 1.0-isblack );\n        \n        d = r-th;\n        \n        float al = smoothstep( 0.0,2.0*fwidth(d),-d);\n        col.xyz = mix( col.xyz, wcol, al );\n        col.w = 1.0 - (1.0-col.w)*(1.0-al);\n    }\n    \n    return col;\n}\n\nint hash( ivec2 z )\n{\n    int n = z.x+z.y*11111;\n    n = (n<<13)^n;\n    return (n*(n*n*15731+789221)+1376312589)>>16;\n}\n\n#if HW_PERFORMANCE==0\nconst int AA = 2;\n#else\nconst int AA = 4;\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float stime = mod( iTime, 6.0 );\n    \n    vec3 col = vec3(0.0);\n    for( int j=0; j<AA; j++ )\n    for( int i=0; i<AA; i++ )\n    {\n        vec2 of = vec2(i,j)/float(AA);\n        vec2 p = (2.0*(fragCoord+of)-iResolution.xy)/iResolution.y;\n        \n        p *= 1.6;\n        //p.y += 0.5;\n\n        float di = float( hash(ivec2(fragCoord)*AA+ivec2(i,j))&255 )/255.0;\n        float time = stime + ((float(j*AA+i)+di)/float(AA*AA))*(0.5/30.0) - 0.5*0.5/30.0;\n        \n        time += 0.07*sin( p.y );\n        \n        float wing = (p.x<0.0)?position_bad(time, 2.0):\n                               position_good(time, 2.0);\n        \n        if( p.x>0.0 ) p.x=p.x-1.4;\n        else          p.x=p.x+1.4;\n\n       \n        float an = 1.55*(0.5-0.5*cos(2.0*6.283185*wing));\n        vec2  pl = vec2(sign(p.x)*sin(an),-cos(an));\n\n        vec3 ro = vec3(0.0,0.085,2.1);\n        vec3 rd = vec3(p,-3.0);\n        vec3 pos = ro - rd*dot(ro.xz,pl)/dot(rd.xz,pl);\n        vec2 q = vec2( length(pos.xz), pos.y );\n\n        vec4 tmp = butterfly( q );\n        tmp = clamp(tmp,0.0,1.0);\n        tmp.xyz *= 0.1+0.9*mix(1.0,abs(q.y)*0.5+min(q.x*2.0,1.0),pl.x*pl.x);\n        tmp.xyz *= clamp(0.25+0.75*(pl.x-pl.y+1.0),0.0,1.0);\n        \n        \n        col += mix( vec3(0.5), tmp.xyz, tmp.w );\n    }\n    col /= float(AA*AA);\n\n    vec2 q = fragCoord/iResolution.xy;\n    col += sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1)/512.0;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}