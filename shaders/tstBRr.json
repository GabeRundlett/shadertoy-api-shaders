{
    "Shader": {
        "info": {
            "date": "1604273720",
            "description": "mouse.y sets hue\nmouse.y sets a mode\nthe \"animation\" jreally ust \"cycles the color palette\", and each pixel basically has 1 static palette color.\n\nneeds to be in fullscreen for large [MultiTile] values",
            "flags": 0,
            "hasliked": 0,
            "id": "tstBRr",
            "likes": 0,
            "name": "Costas4 PaletteAnimated",
            "published": 3,
            "tags": [
                "noise",
                "dither",
                "bluenoise",
                "costas",
                "costasarray",
                "patternfree"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 310
        },
        "renderpass": [
            {
                "code": "//     parent: https://www.shadertoy.com/view/Wsdfzr\n//grandparent: https://www.shadertoy.com/view/tdjfzR\n\n//added NAIVE detection of both diagonal mirrorings\n\n//todo, with this i am very close to ANIMATED blue noise\n//todo, 2d fourier transform\n\n    //sources:\n    //http://jameskbeard.com/jameskbeard/Files.html#CostasArrays\n    //in above link, scroll down to \"Orders 201 through 300\" or \"Orders 476 through 500\"\n    //\n    //https://ieee-dataport.org/open-access/costas-arrays-and-enumeration-order-1030\n    //in above link, login is needed\n\n/*\n\ncostas arrays are pattern free==aperiodic\n3d costas arrays are impractival (too large LUT)\nbut a self recursed 2d costas array is still semi-aperiodic\n, great for dithering (in theory)\nsome of them still compress nicely due to meta-patterns between 2 of em\n\n\ncostas array [mode==0] is pattern free \nin short, it is an extension to the \"place the most exclusive queens on a checkerboard\"\n- BUT where even ALL XY-differentials between any 2 tokens must be unique (on a torus repetition)\nThis is (in theory) ideal for dithering\n(or as a basis for a music scmapler, that just has to add local arbitiary (strided) repetitions)\n\nThe [mode==1] greyscaling gradient is BASIC (and too much of a pattern)\n\nIt can easily be more distorted\n, by applying a second greyscaling-recursionpass [mode==2] of a costas array \n\nIf that is the same CostasArray over itself, it is only SEMI-pattern-free\n, even that but likely still good enough.\n\nTo turn this into (any amount of) (pattern free) BLUE (noise)\n,simply mix(a,b,0.75) 2 of these, where the scale.xy of one of CostasArray [a] \nis an interger multiple of the scale of the scale.xy of CostasArray [b]\n(and make sure, that both costas arrays are also costas-arrays over a tiled neighborhood)\n\nalso see [worlds ugliest music]==  https://www.youtube.com/watch?v=RENk9PK06AQ\n*/\n\n#define animatePaletteSpeed .9\n\n#define mode int(5.*iMouse.y/iResolution.y)\n//#define mode 4\n\n//mode 2 shows costas array as boolean dots\n//mode 1 shows it as linear fade gradient\n//mode 9 suffles the gradeitn by the same costas array\n//- this looks fine for most costas arrays, though its only semi-pattern.free\n//I assume mode 2 fails on SIMPLE costas3() costas arrays (that compress more than a LUT)\n//it sure looked nicer on my LUT arrays.\n//mode 4 cycles trhough all modes\n\n#define period 256\n\n//place multiple smaller tiles (important to expose some pattern)\n#define MultiTile 3.\n\n//scale by period\n#define zoom (min(iResolution.x,iResolution.y)/float(period-1))\n//pixel perfect, but only in preview\n//#define zoom 1.\n\n/*  //mathematical construction of a costas array list quickly hits limits of 32bit int\n    //therefore this segment is quite limited in its utility, and therefore commented out\n\n#define base1 2\n//the  (pase,period) pairs -> (3,5) (3,7) (5,7) make costas arrays\n//the  (pase,period) pairs (2,11) (2,13) (2,29) look a lot like they make costas arrays\n//(5,9) (7 11)\n//the function below fails for too large [#] values\n//it breaks for period>=37 (overflow or low float precision?)\n#define base2 base1  //trying otherbases\n\n\n\nint poi(int a,int b){//integer pow(a,b) as loop is slow but more precise\n ;//b=abs(b) //imply b>-1\n ;int r=a;for(int i=0;i<b;i++){r*=a;}return r;}\nint costas3(int x,int b\n){//return int(round(pow(float(b),float(x)+1.)))%int(period)//round() is essential on type float\n ;return poi(int(b),int(x))%period //type int has larger range, but type int exp() is silly\n ;}\n\n/**/\n\n//return entry [a] of CostasArray list\n//return entry a of array (is a heightmap-like wrapper function)\nint ae(int a){\n ;//return (a*5)%period         //linear *5 debug\n ;//return costas3(a,base1)-1;    //works up to (2,29) with type float.\n ;//but seriously, use other LUTs:\n     \n ;//int c[]=int[16](3,13,4,15,12,6,10,2,7,8,11,1,14,16,9,5);//diagonal mirr \n ;//int c[] = int[16](6,14,10,7,9,1,4,16,5,3,12,11,15,2,13,8);//diagonal mirr\n //;int c[] = int[16](3,12,1,4,10,6,14,9,8,5,15,2,16,7,11,13);//diagonal mirr\n\n\n /*\n ;int c[] = int[256](1,17,140,33,222,156,40,49,23,238,109,172,143,56,105,65,41,39,224\n                    ,254,179,125,53,188,187,159,162,72,11,121,103,81,248,57,5,55,234\n                    ,240,26,14,82,195,102,141,244,69,32,204,79,203,180,175,84,178,74\n                    ,88,107,27,19,137,239,119,62,97,108,8,77,73,192,21,130,71,229,250\n                    ,70,256,148,42,243,30,45,98,38,211,6,118,150,157,99,4,182,85,242\n                    ,48,189,220,174,95,131,219,186,196,36,191,144,100,214,194,138,90\n                    ,117,104,215,123,18,43,165,35,80,153,217,255,221,135,152,78,252\n                    ,113,241,124,206,24,7,93,127,89,25,208,163,37,171,146,251,87,232\n                    ,245,218,10,66,86,228,16,63,164,68,58,91,3,223,46,92,61,176,114\n                    ,213,54,132,227,29,22,246,134,83,166,226,173,158,115,170,20,128\n                    ,198,122,101,199,2,149,64,201,205,136,236,225,190,247,111,9,147\n                    ,155,235,216,202,50,212,47,52,75,207,76,160,197,116,13,230,67\n                    ,210,142,154,112,106,183,133,185,120,209,231,249,139,200,34,31,59\n                    ,60,181,253,51,126,96,167,169,193,233,184,15,44,237,110,151,177\n                    ,168,28,94,161,12,145,129);//slithly erratic, slicgtly arcing\n/**/\n\n     /*\n ;int c[]  = int[256](\n    \n    \n\n);*/\n     \n;int c[]  = int[256]( 1,49,162,97,152,210,118,145,67,200,69,2,171,166,57,193,121,115,158,248,23,117,157,50,47,219,228,214,31,105,51,241,230,169,13,163,188,206,76,40,244,71,48,165,218,205,94,98,235,95,26,11,250,20,220,6,63,79,55,153,203,99,184,33,66,22,229,217,62,61,132,211,173,236,208,254,186,124,215,88,133,36,112,119,16,96,192,213,39,10,32,253,212,142,53,146,8,27,135,143,44,74,106,59,174,42,128,68,156,12,93,54,131,111,52,127,237,103,238,201,137,251,149,147,198,232,242,81,209,114,104,70,19,21,123,9,73,110,231,109,255,180,239,3,182,221,140,28,196,256,170,46,187,234,202,172,15,7,155,136,18,181,14,84,125,160,138,167,85,64,224,144,247,240,164,5,216,87,252,58,126,80,108,45,83,4,189,190,89,101,150,194,161,56,227,75,25,183,207,191,134,92,148,122,139,154,223,107,226,222,77,90,37,176,199,116,168,204,78,60,35,141,41,102,113,179,233,159,86,100,91,175,178,29,245,151,120,30,243,249,65,185,38,43,130,197,72,195,17,246,82,24,225,34,177,129\n );//very nice (apparent rotations are neat)\n//;int c[]  =  int[256](  65,113,50,161,8,98,70,209,35,56,197,146,11,118,249,1,57,83,238,104,55,245,157,194,207,59,20,166,191,41,19,49,182,105,13,131,108,30,252,152,36,103,32,37,234,205,174,242,75,255,42,107,10,68,140,214,223,239,87,89,43,67,40,97,210,230,101,153,142,61,180,179,173,156,192,78,202,44,247,200,5,84,96,151,256,80,176,85,71,26,16,253,4,222,181,34,120,123,167,47,220,90,122,155,254,58,112,116,76,188,93,6,99,15,100,31,237,135,62,137,73,91,21,115,150,88,130,145,17,2,216,22,243,149,219,201,9,190,7,109,159,228,143,227,134,221,60,204,244,240,186,126,27,250,218,92,175,39,251,248,162,53,94,132,125,144,154,199,213,48,208,128,23,224,212,133,72,119,172,74,206,64,28,45,51,52,189,14,25,229,102,82,225,168,195,171,217,215,111,95,86,12,196,138,235,170,127,203,114,46,77,106,165,160,231,164,24,124,158,236,3,141,233,54,177,147,169,63,38,148,187,79,66,29,117,183,232,110,211,185,129,121,246,139,18,69,184,163,81,198,226,136,33,178,241,193\n//);//super swirly \n//;int c[]  = int[256]( 1,113,78,225,140,190,146,81,155,252,245,46,227,2,217,193,25,11,154,108,223,101,109,158,23,83,232,114,71,73,203,49,66,137,29,123,224,10,48,220,184,79,68,213,38,221,90,14,35,135,102,195,198,88,128,226,231,183,127,185,131,59,44,161,110,178,21,249,186,141,8,235,61,80,100,122,134,160,159,76,53,40,132,191,164,180,148,69,175,150,116,77,24,202,37,126,60,147,143,247,144,214,118,51,106,54,84,200,64,240,45,82,219,87,248,39,125,239,170,41,233,243,5,171,162,156,94,17,145,222,28,34,43,133,115,105,169,42,111,253,167,120,215,91,210,173,112,192,72,212,182,234,179,246,86,16,119,15,19,188,254,165,74,152,205,244,22,47,197,20,52,36,63,4,168,181,204,31,32,6,250,228,208,189,107,136,13,58,121,149,50,238,33,172,187,3,57,255,55,103,98,256,216,70,67,230,7,163,142,218,93,166,85,196,207,56,92,176,138,96,251,157,9,194,177,75,201,199,242,104,211,151,30,237,229,95,236,26,139,153,65,89,130,99,174,117,124,27,209,18,62,12,97,206,241,129\n     //);//good shuffle\n\n//below ones seem to be worse in tiles:\n//;int c[]  = int[256]( 1,113,254,225,92,110,2,81,251,204,181,222,195,114,89,193,153,107,138,60,255,37,173,78,183,51,248,226,231,201,43,49,178,9,93,219,112,250,192,172,200,111,148,149,86,29,74,190,3,39,150,163,246,104,16,82,135,87,159,57,99,155,252,161,30,34,213,121,170,205,24,75,125,224,180,106,182,48,191,28,245,56,212,223,244,4,228,5,207,198,196,141,40,186,229,46,12,115,175,151,32,6,166,19,90,102,164,216,208,128,109,194,59,247,8,199,189,15,154,169,105,211,197,11,18,108,14,17,145,142,236,146,139,69,83,233,41,26,143,61,71,136,119,187,66,237,256,80,88,36,230,218,147,38,134,160,23,47,243,140,174,101,58,168,13,68,70,79,133,100,132,116,95,84,184,117,156,63,176,54,234,52,96,253,203,152,77,42,249,85,162,158,33,124,27,227,185,31,215,7,210,144,232,118,35,22,167,131,62,202,157,214,21,20,239,72,44,64,122,240,91,221,137,50,177,171,73,103,98,120,179,55,206,45,165,127,188,10,235,25,65,217,242,67,94,53,76,123,209,130,238,220,97,126,241,129\n//); //has a thin dominand line\n//;int c[]  = int[256]( 1,49,210,97,232,2,102,145,163,24,5,50,139,150,185,193,249,211,14,72,55,53,221,98,207,187,116,198,191,233,147,241,214,41,77,3,204,62,92,120,132,103,256,101,138,13,206,146,203,255,202,235,170,164,236,246,223,239,87,25,171,195,8,33,114,6,165,89,174,125,20,51,237,252,160,110,106,140,247,168,69,180,64,151,224,48,144,149,71,186,240,61,100,254,245,194,88,251,167,47,60,250,26,27,30,218,80,212,172,28,157,38,227,15,196,31,45,135,94,73,9,219,85,243,182,56,34,81,209,162,184,54,115,213,91,137,201,222,7,173,159,68,143,99,166,29,156,44,84,208,90,158,155,154,122,188,175,39,123,216,66,117,126,228,189,112,58,199,21,16,176,96,23,192,52,197,40,119,12,234,238,32,124,109,179,148,253,46,217,37,134,242,161,136,67,43,153,215,111,95,118,108,36,42,107,74,127,75,18,78,141,10,229,128,231,4,248,220,190,76,131,205,169,86,113,19,105,63,70,244,59,79,226,93,181,183,200,142,83,121,65,57,22,11,178,133,152,35,17,230,130,104,225,82,177\n//,129);//slightly irritaiting erratic\n    //;int c[]  = int[256](34,18,71,2,21,55,107,242,108,5,118,39,116,91,58,226,122,92,51,245,144,102,46,23,8,100,145,75,184,42,28,210,155,106,94,76,201,35,153,229,225,128,13,86,95,30,243,7,180,248,159,84,255,129,105,59,88,168,48,26,20,12,181,194,103,139,150,90,83,78,177,60,126,185,45,19,191,137,80,213,182,209,77,112,109,253,221,70,224,79,189,14,65,227,38,247,69,164,192,232,249,143,47,68,131,239,157,113,41,89,238,43,172,72,33,152,190,32,195,10,202,4,6,252,251,165,215,178,50,87,37,123,124,134,132,74,138,67,160,62,24,161,200,44,171,110,217,169,241,29,111,3,196,175,15,121,104,64,36,197,119,166,99,193,142,61,207,96,198,93,125,237,240,205,81,54,85,208,9,63,147,173,57,254,188,49,206,211,218,22,11,231,66,53,140,148,154,176,40,216,187,233,1,127,212,31,120,52,135,115,158,223,214,141,256,97,101,25,163,73,204,222,234,27,82,156,170,56,203,17,228,136,151,174,230,16,117,179,220,250,98,186,219,244,167,246,133,236,114,235,183,149,130,199,146\n//              ,162);//notable zigZagging\n//;int c[]  = int[256](63,239,216,159,30,136,12,79,113,206,99,56,153,188,183,255,247,33,244,126,165,19,251,232,253,73,10,108,109,103,225,175,252,167,235,209,34,164,50,46,154,85,246,195,80,171,180,152,217,173,144,249,112,186,66,28,141,29,197,23,185,145,62,95,120,172,3,87,148,155,170,129,139,210,150,84,48,226,101,222,163,74,54,5,214,166,6,115,53,256,102,91,122,100,211,72,14,137,149,93,18,64,96,169,132,32,198,106,2,242,187,204,177,61,218,205,203,117,196,199,135,105,51,65,220,238,168,15,143,40,110,92,193,179,233,7,71,68,245,75,77,90,189,49,76,59,114,130,234,70,160,4,41,224,192,146,221,21,9,142,200,83,228,250,219,230,128,181,243,134,38,86,133,182,202,35,94,229,98,176,212,22,82,11,1,42,27,20,215,131,44,248,223,190,17,57,151,69,157,13,156,194,58,240,121,16,45,89,24,52,43,208,67,118,213,26,174,178,36,162,81,107,39,124,47,97,231,237,236,138,201,125,104,123,147,37,254,116,161,119,127,55,60,25,184,227,78,241,207,140,8,158,31,88,111\n//                     ,191);//not soo good, [notable arc]\n//;int c[]  =  int[256](34,50,29,66,15,45,121,82,24,31,78,61,16,137,10,98,202,40,177,47,116,94,150,77,252,32,19,153,76,26,104,114,73,218,102,56,219,193,11,63,195,132,23,110,5,166,241,93,208,12,197,48,101,35,59,169,172,92,212,42,112,120,111,130,253,89,46,234,145,118,243,72,70,235,247,209,165,27,180,79,14,211,215,148,183,39,71,126,36,21,103,182,99,1,158,109,223,224,68,28,171,213,53,64,97,117,135,51,123,75,214,185,216,188,131,108,6,228,33,58,122,128,190,136,233,127,141,146,18,13,255,105,8,62,256,250,186,161,100,134,236,3,60,88,57,86,203,251,179,7,245,225,192,181,85,43,156,196,96,95,237,30,129,227,54,231,149,164,254,199,167,55,20,87,83,142,207,52,155,37,81,119,107,198,200,115,246,17,106,174,217,125,2,239,248,240,170,84,220,44,41,187,163,229,176,69,140,80,221,113,38,133,238,151,4,67,191,139,65,91,184,230,90,201,242,232,154,204,25,147,160,124,205,22,222,244,175,49,168,74,226,138,9,144,189,206,159,152,210,249,173,143,194,157,178\n//                      ,162); //medium useful [mild snake]\n//;int c[]  = int[256]( 1,17,12,33,94,28,168,49,23,110,109,44,143,184,105,65,41,39,96,126,179,125,53,60,187,159,34,200,11,121,103,81,120,57,5,55,106,112,154,142,210,195,230,141,116,69,160,76,79,203,52,175,212,50,202,216,107,27,19,137,239,119,190,97,236,136,77,73,64,21,2,71,229,122,198,128,20,170,243,158,45,226,166,211,134,246,22,157,99,132,54,85,114,176,189,92,46,95,131,219,58,68,164,191,16,228,86,66,10,218,117,232,215,123,146,43,165,35,208,153,217,255,221,135,24,206,124,113,241,252,78,152,7,93,127,89,25,80,163,37,171,18,251,87,104,245,90,138,194,214,100,144,63,36,196,186,91,3,223,174,220,61,48,242,213,182,4,227,29,150,118,6,83,38,98,173,30,115,42,148,256,70,250,101,199,130,149,192,201,205,8,108,225,62,247,111,9,147,155,235,88,74,178,84,47,180,75,207,204,32,197,244,13,102,67,82,14,26,240,234,183,133,185,248,209,231,249,139,72,162,31,59,188,181,253,51,254,224,167,169,193,233,56,15,172,237,238,151,177,40,156,222,161,140,145,129\n//);//terrible\n//;int c[]  =  int[256](34,50,61,66,239,77,25,82,88,255,206,93,80,41,10,98,202,104,81,15,52,222,22,109,188,96,115,57,12,26,168,114,233,218,230,120,59,97,107,31,35,68,247,238,37,38,145,125,16,204,229,112,133,131,155,73,108,28,148,42,176,184,79,130,29,249,174,234,49,246,83,136,198,75,215,113,197,123,116,47,142,51,183,84,151,7,39,254,228,53,71,54,195,161,30,141,191,32,4,220,11,245,85,128,1,149,103,147,219,171,86,89,24,124,227,44,134,164,193,58,122,192,62,200,137,95,173,146,18,45,223,9,72,190,64,250,186,65,36,6,172,99,252,152,217,214,43,91,19,231,21,129,256,213,117,139,92,132,160,63,13,158,33,67,182,199,181,100,126,167,135,23,212,55,179,14,175,244,251,69,241,87,203,70,8,211,118,177,106,46,121,157,2,207,56,48,170,20,156,236,201,27,3,5,240,101,76,144,253,17,166,165,110,119,196,163,159,235,225,187,248,102,90,105,242,40,154,140,185,243,224,60,237,150,94,180,143,209,232,74,226,138,169,208,221,78,127,216,210,153,205,111,194,189,178\n//,162);//close to worst [snake like]\n//;int c[]  =  int[256]( 1,17,28,33,206,44,248,49,55,222,173,60,47,8,233,65,169,71,48,238,19,189,245,76,155,63,82,24,235,249,135,81,200,185,197,87,26,64,74,254,2,35,214,205,4,5,112,92,239,171,196,79,100,98,122,40,75,251,115,9,143,151,46,97,252,216,141,201,16,213,50,103,165,42,182,80,164,90,83,14,109,18,150,51,118,230,6,221,195,20,38,21,162,128,253,108,158,255,227,187,234,212,52,95,224,116,70,114,186,138,53,56,247,91,194,11,101,131,160,25,89,159,29,167,104,62,140,113,241,12,190,232,39,157,31,217,153,32,3,229,139,66,219,119,184,181,10,58,242,198,244,96,223,180,84,106,59,99,127,30,236,125,256,34,149,166,148,67,93,134,102,246,179,22,146,237,142,211,218,36,208,54,170,37,231,178,85,144,73,13,88,124,225,174,23,15,137,243,123,203,168,250,226,228,207,68,43,111,220,240,133,132,77,86,163,130,126,202,192,154,215,69,57,72,209,7,121,107,152,210,191,27,204,117,61,147,110,176,199,41,193,105,136,175,188,45,94,183,177,120,172,78,161,156,145,129\n//);//bad\n//;int c[]  =  int[256]( 1,17,44,33,62,60,72,49,87,78,237,76,207,88,105,65,41,103,256,94,115,253,181,92,123,223,130,104,203,121,167,81,24,57,133,119,202,16,250,110,50,131,198,13,148,197,64,108,143,139,84,239,244,146,42,120,43,219,211,137,47,183,158,97,12,40,205,73,224,149,98,135,101,218,166,32,52,10,179,126,173,66,134,147,102,214,246,29,35,164,22,213,210,80,61,124,14,159,67,155,154,100,196,255,176,4,54,162,106,58,245,136,23,59,242,235,37,227,112,153,217,63,93,199,184,174,156,113,241,28,46,56,71,221,191,89,25,240,99,165,107,114,187,151,8,117,186,234,34,182,132,48,127,68,228,26,27,195,31,142,252,189,208,82,85,150,36,163,157,118,86,230,19,6,194,45,254,51,138,180,160,38,90,229,7,226,21,96,201,77,168,140,225,30,55,175,9,83,91,171,248,170,18,116,111,212,11,15,236,192,69,20,141,70,3,178,238,122,144,74,247,5,185,152,209,39,249,75,232,2,95,251,220,53,125,243,222,128,231,169,193,233,216,79,204,109,206,215,177,200,188,190,161,172,145,129\n//);//worst\n     \n \n    \n/**/\n;//return c[(       a  )%period]\n;return c[(period-a-1)%period]//reverse\n;}\n    //i admit, its quite the LUT\n    //but give it a try, because it should be VERY aperiodic, in theory, great for dithering\n    //\n    //sources:\n    //http://jameskbeard.com/jameskbeard/Files.html#CostasArrays\n    //in above link, scroll down to \"Orders 201 through 300\" or \"Orders 476 through 500\"\n    //\n    //https://ieee-dataport.org/open-access/costas-arrays-and-enumeration-order-1030\n    //in above link, login is needed\n\nbool isDiagMirr0(){  //return if ae(ae(i))=i foreach i == ae() is its own inverse.\n for(int i=0;i<period;i++\n ){int b=ae(i)\n  ;if(b>i)continue//we only check lower left half + diagonalLine\n  ;//if(b==i)//any point on diagonal line is automatically is true, no need to test\n  ;if(ae(b)!=i)return false;     \n ;}return true;}\n//below is mirrored test of above\nbool isDiagMirr1(){  //return if ae(ae(i))=i foreach i == ae() is its own inverse.\n for(int i=0;i<period;i++\n ){int b=ae(period-i)\n  ;if(b>i)continue//we only check lower left half + diagonalLine\n  ;//if(b==i)//any point on diagonal line is automatically is true, no need to test\n  ;if(ae(period-b)!=i)return false;     \n ;}return true;}\n\nvoid mainImage(out vec4 O, vec2 u\n){//u=u.yx\n ;int m=mode\n ;if (m==4)m=int(iTime+2.)%3;  \n ;if(m==0)m=2 ;else if (m==2)m=0 //swap mode 0 and 2\n ;vec3 c=vec3(0)\n ;ivec2 U=ivec2(MultiTile*u*float(period)/iResolution.y)\n ;if(u.x<float(period-1)*zoom\n   &&u.y<float(period-1)*zoom //if not the blue part\n ){\n  #ifdef MultiTile\n  ;U=U%period\n  #endif\n  ;//U=U.yx                          //sqivel domains\n  //;u*=float(period)/iResolution.y\n  ;//if(u.x<2.)c=vec3(1);\n  ;float f=0.\n  ;int a=0\n  ;if(m==0\n         //the [period-] is just for symmetry, actually optional\n  ){if(ae(U.y)==period-U.x)a=period;//black or white  \n  }else{\n   ;a=ae(U.y)+(U.x)       \n   //[period-] is just for symmetry, actually optional\n   ;a=period-a%period   //;if(a>period)a-=period //single overflow   (no mod needed) \n   ;if(m>1\n   ){a=ae(a)//+(U.y)     //+1 ae() recursion the +=y just removes symmetry, is semi arbitiary naoise\n    ;a+=ae(period-1)\n    ;a=a%period;}}\n  ;f=float(a)/float(period) \n      \n  #ifdef animatePaletteSpeed\n  ;if(m!=0){f-=fract(iTime*animatePaletteSpeed)////cos(iTime)*.5+.5\n            ;if(f<0.)f+=1.;}\n  #endif\n  ;c=mix(vec3(f,f,f),mix(vec3(0,.4,1),vec3(1,.4,0),f),iMouse.x/iResolution.x)\n ;}\n\n    \n /*\n //below code highlights lower right triangle points green \n //IFF they have a diagonal mirror\n ;if(period-U.x-1>U.y\n    ){if(ae(U.y)==period-U.x\n     ){if(ae((period-U.x-1))==U.y+1)\n         c+=vec3(1,0,1);}}//bottom left mirroreds marked white\n    \n  //IFF they have a diagonal mirror\n ;if(U.x<U.y\n    ){\n     ;if(ae(U.y)==period-U.x\n     ){\n     if(ae(U.x)==period-U.y)\n         c+=vec3(1,1,1);}}//top left mirroreds marked white\n    */\n ;O=vec4(c,1)\n ;}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nselection of some costasArrays\npersonally i only care for diagonal-mirror-SYMMETRICAL costasArrays, because these compress a lot better.\n\nall* symmetrical costas arrays of order 2 are:\n\t1\t2\nall* symmetrical costas arrays of order 3 are:\n\t1\t3\t2\nall* symmetrical costas arrays of order 4 are:\n\t1\t2\t4\t3\nall* symmetrical costas arrays of order 5 are:\n\t1\t3\t4\t2\t5                          <---- demoed \n\t2\t4\t1\t5\t3\nall* symmetrical costas arrays of order 6 are:\n\t1\t4\t5\t3\t2\t6\n\t1\t5\t3\t6\t2\t4\n\t1\t6\t3\t5\t4\t2\n\t1\t6\t4\t3\t5\t2\n\t2\t4\t5\t1\t6\t3\nall* symmetrical costas arrays of order 7 are:\n\t1\t2\t6\t4\t7\t3\t5\n\t1\t2\t7\t4\t6\t5\t3\n\t1\t2\t7\t5\t4\t6\t3\n\t1\t7\t3\t4\t6\t5\t2\n\t2\t1\t5\t7\t3\t6\t4\n\t2\t1\t6\t4\t7\t3\t5\n\t2\t5\t6\t1\t3\t7\t4\n\t2\t5\t6\t4\t1\t7\t3\n\t2\t6\t1\t3\t4\t7\t5\n\t3\t6\t1\t7\t5\t2\t4\nall* symmetrical costas arrays of order 8 are:\n\t1\t5\t8\t4\t2\t7\t6\t3\n\t1\t7\t3\t8\t6\t5\t2\t4\n\t1\t7\t4\t3\t5\t8\t2\t6\n\t3\t5\t1\t8\t2\t7\t6\t4\nall* symmetrical costas arrays of order 9 are:\n\t1\t4\t6\t2\t9\t3\t8\t7\t5\n\t2\t1\t5\t8\t3\t9\t7\t4\t6\nall* symmetrical costas arrays of order 10 are:\n\t1\t7\t4\t9\t3\t5\t8\t6\t2\t10\n\t2\t1\t9\t4\t5\t8\t10\t6\t3\t7\n\t2\t6\t8\t1\t9\t5\t3\t4\t10\t7\n\t2\t8\t9\t4\t1\t3\t7\t5\t10\t6\n\t3\t9\t1\t4\t5\t10\t8\t7\t2\t6\n\t3\t9\t7\t8\t4\t1\t6\t10\t2\t5\t\nall* symmetrical costas arrays of order 11 are:\n\t1\t6\t8\t9\t4\t10\t3\t7\t5\t2\t11\n\t1\t7\t5\t8\t10\t4\t9\t6\t2\t3\t11\n\t1\t7\t11\t6\t8\t4\t2\t5\t10\t9\t3\n\t1\t10\t4\t3\t8\t11\t9\t5\t7\t2\t6\n\t3\t10\t1\t9\t6\t5\t7\t11\t4\t2\t8\nall* symmetrical costas arrays of order 12 are:\n\t1\t2\t8\t12\t7\t9\t5\t3\t6\t11\t10\t4\n\t1\t2\t11\t5\t4\t9\t12\t10\t6\t8\t3\t7\n\t1\t4\t11\t2\t10\t7\t6\t8\t12\t5\t3\t9\n\t3\t6\t1\t12\t10\t2\t7\t9\t8\t5\t11\t4\n\nall* symmetrical costasArrays of order 16 are\n\t1\t13\t3\t16\t14\t8\t10\t6\t15\t7\t12\t11\t2\t5\t9\t4\n\t3\t12\t1\t4\t10\t6\t14\t9\t8\t5\t15\t2\t16\t7\t11\t13\n\t3\t13\t4\t15\t12\t6\t10\t2\t7\t8\t11\t1\t14\t16\t9\t5\n\t6\t14\t10\t7\t9\t1\t4\t16\t5\t3\t12\t11\t15\t2\t13\t8\n\nall* symmetrical costasArrays of order 27 are\n\t1\t25\t19\t5\t4\t12\t10\t16\t26\t7\t18\t6\t23\t27\t24\t8\t21\t11\t3\t22\t17\t20\t13\t15\t2\t9\t14\n\t3\t9\t1\t8\t13\t15\t19\t4\t2\t20\t11\t25\t5\t17\t6\t27\t14\t24\t7\t10\t26\t23\t22\t18\t12\t21\t16\n\t3\t24\t10\t26\t20\t15\t13\t23\t14\t1\t8\t4\t22\t19\t21\t2\t5\t25\t9\t17\t6\t7\t11\t16\t27\t12\t18\n\t4\t17\t21\t9\t11\t16\t25\t12\t1\t7\t26\t22\t14\t15\t13\t20\t23\t3\t24\t6\t18\t8\t2\t27\t10\t5\t19\n\t6\t10\t23\t13\t16\t1\t11\t20\t15\t2\t7\t26\t4\t27\t9\t5\t19\t25\t17\t8\t24\t22\t3\t21\t18\t12\t14\n\t6\t16\t20\t12\t14\t7\t1\t25\t8\t17\t18\t26\t11\t23\t10\t24\t15\t13\t3\t19\t22\t27\t5\t2\t9\t4\t21\n\t6\t23\t14\t8\t21\t1\t26\t4\t22\t20\t12\t11\t16\t3\t17\t13\t15\t24\t27\t10\t5\t9\t2\t18\t25\t7\t19\n\n[*]== there are more than these BUT these extra costas-arrays are just a few SPECIFIC diagonal offsets \n(aslong the mirror axis) of the ones that are listed.\nand theres always the 4 axisAligned mirrors of g-symmetry.\n\nsome symmetrical costasArrays f order 30 are:\n\t1\t23\t14\t12\t18\t26\t30\t20\t25\t11\t10\t4\t16\t3\t21\t13\t22\t5\t19\t8\t15\t17\t2\t28\t9\t6\t29\t24\t27\t7\n\t11\t22\t5\t13\t23\t10\t2\t26\t29\t15\t19\t20\t14\t4\t6\t21\t18\t27\t1\t30\t25\t7\t3\t9\t16\t28\t17\t8\t24\t12\n\t12\t24\t20\t17\t2\t9\t29\t3\t16\t4\t28\t18\t19\t27\t22\t6\t10\t1\t30\t8\t14\t25\t11\t5\t15\t7\t21\t23\t26\t13\n\t13\t26\t2\t21\t29\t4\t9\t11\t15\t27\t12\t8\t17\t18\t7\t22\t1\t30\t20\t23\t6\t24\t19\t16\t10\t3\t25\t5\t28\t14\n\na symmetrical costas array of order 35 is:\n\t1\t12\t7\t27\t32\t30\t3\t24\t31\t17\t19\t2\t16\t29\t20\t13\t10\t35\t11\t15\t23\t33\t21\t8\t26\t25\t4\t34\t14\t6\t9\t5\t22\t28\t18\n\t\na symmetrical costas array of order 65 is:\n\t1\t29\t46\t16\t24\t37\t17\t22\t12\t63\t55\t9\t15\t42\t13\t4\t7\t26\t44\t56\t50\t8\t49\t5\t40\t18\t32\t34\t2\t54\t51\t27\t65\t28\t53\t57\t6\t39\t38\t25\t48\t14\t59\t19\t62\t3\t58\t41\t23\t21\t31\t61\t35\t30\t11\t20\t36\t47\t43\t64\t52\t45\t10\t60\t33\n\na symmetrical costas array of order 99 is:\n1\t33\t94\t11\t21\t59\t40\t85\t39\t44\t4\t75\t88\t36\t73\t56\t60\t45\t67\t61\t5\t24\t55\t22\t87\t30\t92\t64\t37\t26\t49\t51\t2\t79\t38\t14\t29\t35\t9\t7\t97\t63\t89\t10\t18\t70\t62\t76\t31\t99\t32\t78\t65\t74\t23\t16\t96\t71\t6\t17\t20\t47\t42\t28\t53\t95\t19\t69\t68\t46\t58\t86\t15\t54\t12\t48\t82\t52\t34\t91\t98\t77\t93\t90\t8\t72\t25\t13\t43\t84\t80\t27\t83\t3\t66\t57\t41\t81\t50\n\n/**/\n\n/*\n\n//for compatibility with old opengl versions \n//(and to make arrays forksafe)\n//define shitty array struct\n//, with get()set()wrappers and constant array length code.\n//maxlen 27 ceashes too many tested environments (this first version is a bit shitty, too)\n#define maxLen 26\nstruct arr{int a[maxLen];int len;};\nvoid setN(inout arr u,int n,int s){n=clamp(n,1,maxLen);u.len=max(u.len,n);u.a[n-1]=s;}\nint  getN(arr u,int n){return u.a[clamp(n-1,0,u.len-1)];}//worksafing clamp()is faster than mod()\narr  newA(){arr r; r.len=1; r.a[0]=0;return r;}\n\n\n//modify setArray()to set the size of the array \n//AND the height of its pixels (last parameter)\n//theres only 1 pixel per column (later ones overwrite earlier ones)\n//any 2 pixels in the same line will be marked in white\n//where this is found ONCE (is not a CostasArray in that case)\narr setArray(){ //this could be read from a vertex buffer.\n ;arr a=newA()\n ;setN(a,1,1)\n ;setN(a,2,3)\n ;setN(a,3,4)\n ;setN(a,4,2)\n ;setN(a,5,5)\n\n//slow checker if an \n//struct arr{int a[maxLen];int len;}; \n//is a costasArray: https://www.shadertoy.com/view/tdjXWh\n//return array type[arr] as list of differentials of [a] with indexDistance [d]=[0<d<a.len]\narr strideDiff(arr a,int d\n){arr r=newA()\n ;for(int i=1;i<maxLen;i++\n ){setN(r,i,getN(a,i)-getN(a,i+d))\n  ;if (i+d>=a.len)break;}\n ;return r;}\n//getDupeEntry;\n//return pointers to the first 2 found duplicate entries in [a], comparing from a[0] till a[l].\n//if (there are no duplicate entry in [a] till entry a[l] )return ivec2(-1,-1)\nivec2 getDupeEntryS(ivec2 r,arr a,int i,int j\n){for(i=1;i<j;i++){if(getN(a,i)==getN(a,j))return ivec2(i,j);}\n ;return r;}\nivec2 getDupeEntry(arr a\n){ivec2 r=ivec2(-1,-1)//default state of [no dupes found]\n ;for(int i=0;i<maxLen-1;i++\n ){if(i==a.len)return r\n  ;r=getDupeEntryS(r,a,i,a.len-i)\n ;}return r;}\n//return if [a] is a [costas array] of order [a.len]\nivec3 isCostas(arr a\n){for(int i=1;i<=a.len;i++\n ){ivec2 dupes=getDupeEntry(strideDiff(a,i))\n  ;if(dupes.x!=-1)return ivec3(dupes,i);//return 2 indexes of found duplicate differential and dx\n  ;}\n ;return ivec3(-1,-1,-1);}//case of no dupes AND all in bounds == is costas Array\n\n/**/",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}