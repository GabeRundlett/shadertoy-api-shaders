{
    "Shader": {
        "info": {
            "date": "1637967571",
            "description": "A Finnish marmalade candy, popular around Christmas. Ref. https://en.wikipedia.org/wiki/Marmalade#/media/File:Green_balls.jpg",
            "flags": 32,
            "hasliked": 0,
            "id": "stV3zy",
            "likes": 6,
            "name": "Marmalade",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "translucency"
            ],
            "usePreview": 0,
            "username": "ruojake",
            "viewed": 790
        },
        "renderpass": [
            {
                "code": "// Marmalade by Kristian Sivonen (ruojake)\n// CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0/)\n\nfloat sqrMag(vec2 v)\n{\n    return dot(v, v);\n}\n\nfloat lum(vec3 c)\n{\n    return dot(c, vec3(.2126, .7152, .0722));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = texelFetch(iChannel0, ivec2(fragCoord), 0).rgb;\n    vec3 blr = texelFetch(iChannel1, ivec2(fragCoord), 0).rgb;\n    blr = smoothstep(vec3(.2), vec3(.8), blr);\n    \n    col += blr;\n    \n    // reinhard tonemapping\n    float lumC = lum(col);\n    col *= (1. + lumC / 3.) / (1. + lumC);\n    \n    // gamma correction\n    col = pow(col, vec3(1./2.2));\n    \n    // vignette\n    col *= 1. - smoothstep(0., 2., sqrMag(fragCoord / iResolution.xy * 2. - 1.)) * .4;\n    \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define sat(x) clamp((x), 0., 1.)\n\nvec3 hash33(vec3 p)\n{\n    vec3 q = p;\n    q += vec3(31.1343, 17.1643, 11.5281);\n    q *= dot(p, vec3(3.178, 1.513, 3.312));\n    return fract((q.yyx - q.zxy) * .06753 - (q.yzy + q.zxx) * .0143);\n}\n\nvec3 noise(vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = smoothstep(0., 1., p - i);\n    const vec2 o = vec2(1, 0);\n    \n    return mix(\n        mix(\n            mix(hash33(i), hash33(i + o.xyy), f.x),\n            mix(hash33(i + o.yxy), hash33(i + o.xxy), f.x),\n            f.y),\n        mix(\n            mix(hash33(i + o.yyx), hash33(i + o.xyx), f.x),\n            mix(hash33(i + o.yxx), hash33(i + 1.), f.x),\n            f.y),\n        f.z\n    );\n}\n\nvec3 fbm(vec3 p)\n{\n    vec3 res = vec3(0);\n    float amp = 1.; \n    for(int i = 0; i < 3; ++i)\n    {\n        res += noise(p) * amp - .5 * amp;\n        p *= 2.;\n        amp *= .5;\n    }\n    res *= .5 / pow(.5, 3.);\n    return res;\n}\n\nmat2 rot(float a)\n{\n    float s = sin(a),\n          c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sqrMag(vec3 v)\n{\n    return dot(v, v);\n}\n\nvec4 sphereIntersect(vec3 ro, vec3 rd, vec3 p, float r)\n{\n    float t = dot(rd, p - ro);\n    r = r * r - sqrMag(p - (ro + rd * t));\n    \n    float toRad = sqrt(r);\n    \n    t -= max(toRad,-toRad);\n    \n    return vec4(ro + rd * t, r < 0. ? 0. : 1.);\n}\n\nvec3 sphereInverse(vec3 ro, vec3 rd, vec3 p, float r)\n{\n    float t = dot(rd, p - ro);\n    r = r * r - sqrMag(p - (ro + rd * t));\n    \n    float toRad = sqrt(r);\n    \n    t += max(toRad,-toRad);\n    \n    return ro + rd * t;\n}\n\nvec3 sphNormal(vec3 p, vec3 sp)\n{\n    return normalize(p - sp);\n}\n\nfloat shadow(vec3 p, vec3 sp, float r, vec3 lDir)\n{\n    vec3 y = -lDir;\n    vec3 z = vec3(0, -1, 0);\n    vec3 x = cross(y, z);\n    z = cross(x, y);\n    mat3 m = (mat3(x, y, z));\n    sp *= m;\n    p *= m;\n    \n    return sat(length(sp.xz - p.xz) - r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    \n    vec3 ro = vec3(0,1. + sin(iTime * .3) * .5,-3);\n    mat2 rotation = rot(iTime * .13);\n    ro.xz *= rotation;\n    vec3 rd = normalize(vec3(uv, 1));\n    rd.yz *= rot(sin(iTime * .3) * .1);\n    rd.xz *= rotation;\n\n    vec3 sp = vec3(0, 1, 0);\n    float r = 1.;\n    \n    vec3 p = vec3(0);\n    vec4 intersect = sphereIntersect(ro, rd, sp, r);\n    \n    if(intersect.w > 0.)\n        p = intersect.xyz;\n    else\n        p = rd.y < 0. ? ro + rd * (ro.y / -rd.y) : ro + rd * 1000.;    \n\n    vec3 sgp = sphereIntersect(ro, rd, sp, r + .03).xyz;\n    vec3 sgr = fbm(sgp * 100.);\n    float hl = sat(dot(sgr, fract(sgr * 13.)));\n\n    vec3 seamPlane = normalize(vec3(2,4,1));\n    float seam = abs(dot(p - sp, seamPlane));\n    hl += sat((1.1 - seam * 30.) * .75);\n\n    vec3 n = intersect.w > 0.\n                ? normalize(sphNormal(p, sp) + sgr * .1)\n                : rd.y < 0.\n                    ? vec3(0,1,0)\n                    : -rd;\n    \n    float fnl = pow(sat(1. - dot(rd, -n)), 5.);\n    \n    vec3 lDir = normalize(vec3(1,2,3));\n    float light = dot(n, lDir);\n    \n    vec3 glow = vec3(.2, 1., 0.);\n    \n    vec3 col = vec3(1);\n    \n    if (intersect.w == 0.)\n    {\n        float sh = shadow(p, sp, r, lDir);\n        col *= sh * .75 + .25;\n        col *= sat(length(p - sp) - r * .5);\n        sh = sat(1. - sh);\n        col += sh * sh * sh * glow * .1;\n    }\n    else\n    {\n        float o = 1.;\n        float s = smoothstep(.95 - fnl, 1.1 - fnl, hl);\n        vec3 inv = sphereInverse(ro, rd, sp, r);\n        float tl = smoothstep(.2, 1., abs(light));\n        if(dot(inv - sp, seamPlane) * dot(p - sp, seamPlane) < 0.)\n        {\n            tl *= (1. - abs(dot(inv - sp, seamPlane)));\n        }\n        \n        tl *= min(1. - light, 1.);\n        \n        col = mix(vec3(.02, .2, .01), vec3(.8), s);\n        col *= (light * .5 + .5);\n        o *= sat(p.y * 4.) * .5 + .5;\n        col *= o;      \n        col += tl * glow * .125 * (1. - hl * .35);\n        \n        col += o * sat(p.y * 2. - .4) * sat(dot(reflect(rd, n), lDir) * s);\n    }\n\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 st = vec2(1. / iResolution.x, 0);\n    \n    fragColor = texture(iChannel0, uv) * 6.;\n    fragColor += texture(iChannel0, uv - st) * 4.;\n    fragColor += texture(iChannel0, uv + st) * 4.;\n    fragColor += texture(iChannel0, uv - st * 2.);\n    fragColor += texture(iChannel0, uv + st * 2.);\n    fragColor *= .0625;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 st = vec2(0, 1. / iResolution.y);\n    \n    fragColor = texture(iChannel0, uv) * 6.;\n    fragColor += texture(iChannel0, uv - st) * 4.;\n    fragColor += texture(iChannel0, uv + st) * 4.;\n    fragColor += texture(iChannel0, uv - st * 2.);\n    fragColor += texture(iChannel0, uv + st * 2.);\n    fragColor *= .0625;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}