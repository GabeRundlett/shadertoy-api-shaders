{
    "Shader": {
        "info": {
            "date": "1501158828",
            "description": "pure proceduralism means loopless : you draw only one object per pixel. \n-> cost = cheap + invariant to number of items. \nBut dealing with tiling distortion (i.e. distortion of objects center) is tricky when you don't want objects to be distorted.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ms2BzG",
            "likes": 3,
            "name": "distorted procedural tiling",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "tiling"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 653
        },
        "renderpass": [
            {
                "code": "// used in https://www.shadertoy.com/view/XdjBRy\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O -= O; \n    vec2  R = iResolution.xy, U1;\n    float N = 40./2.,                                             // number of cells/birds vertically\n          Y, k = .1,                                              // flight acceleration\n       pix = N / R.y,                                             // pixel size\n         t = iTime/2., ft = fract(t);                             // scroll time\n    U *= pix; \n    U.y -= 6.;                                                    // trigger height \n    U1 = U;\n    U.y -= ft;                                                    // scrolled scaled coordinates\n\n    vec2 P = floor(U), V = fract(U)-.5;\n    \n    if (U1.y>0.) {                                                // acceleration ( = tiling distortion )\n        Y = log(1.+k*(U1.y-1.))/k;        // inv(Y) = (exp(k*Y)-1.)/k + 1.\n        Y -= ft;\n        if (Y>=-.5) {\n             if (P.x==0.) P.x-=3.;        // track 1st accelerated on 1st column for debug\n             P.y = ceil(Y); \n              V.y =  ( exp(k*Y) - exp(k*(P.y-.5)) ) / k // pseudofrac = ( inv(Y) - inv(center) )       \n                    * exp(k*ft);                        //             / jacobian( inv(Y) )\n             // if (abs(V.y)>.5) return;\n           }\n    }\n                                                                   \n    O += step(P.x,-1.) * clamp(1.-2.5*length(V),0.,1.)            // blob\n         +  smoothstep(.1,.0,abs(length(V)-.4))                   // circle\n           * sin(P.x+P.y-floor(t)+vec4(0,2.1,-2.1,0));            // col = cell Id\n\n}\n    ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}