{
    "Shader": {
        "info": {
            "date": "1472678517",
            "description": "Basically 8 sheres with funny rotation.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtyGzR",
            "likes": 3,
            "name": "Sphere Dance",
            "published": 3,
            "tags": [
                "raycasting",
                "spheres",
                "rotation"
            ],
            "usePreview": 0,
            "username": "alexpolt",
            "viewed": 755
        },
        "renderpass": [
            {
                "code": "vec4 test_sphere( vec4 sphere, vec3 ray ) {\n    \n\tvec3 r2s = ray * dot( sphere.xyz, ray );\n    vec3 near2s = r2s - sphere.xyz;\n    \n    vec4 rgbz = vec4( 0, 0, 0, 0 );\n    \n    if( length( near2s ) < sphere.w ) {\n        vec3 r0s = r2s - ray * sqrt(  pow( sphere.w, 2. ) - pow( length( near2s ), 2. )  );\n        float l1 = 0.2-0.8*dot( ray, normalize( r0s - sphere.xyz ) );\n        vec3 c = vec3( 1, 0, 0 ) * pow( l1, 1.5 ) * ( 1.0 - smoothstep( 100., 180., sphere.z ) );\n        rgbz = vec4( c, length( r0s ) );\n    }\n    \n\treturn rgbz;\n}\n\n\n   \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ar = vec2( 1, iResolution.y / iResolution.x );\n    \n\tvec3 pos = vec3( 0, 0, -120 );\n    vec3 ray = normalize( vec3( ( uv - .5 ) * ar, 1 ) );\n    \n    vec3 v = normalize( vec3( cos( 0.7*t ), sin ( 1.2*t ), cos( 2.0*t ) ) );\n    float t2 = t + 0.05;\n    vec3 dv = normalize( ( normalize( vec3( cos( 0.7*t2 ), sin ( 1.2*t2 ), cos( 2.0*t2 ) ) ) - v ) / 0.05 );\n    mat3 obj2cam = mat3( v, dv, cross( v, dv ) );\n\n\tvec3 spheres[8];\n    spheres[0] = vec3( -1,  1, -1 );\n\tspheres[1] = vec3( -1,  1,  1 );\n\tspheres[2] = vec3(  1,  1, -1 );\n\tspheres[3] = vec3(  1,  1,  1 );\n    spheres[4] = vec3( -1, -1, -1 );\n\tspheres[5] = vec3( -1, -1,  1 );\n\tspheres[6] = vec3(  1, -1, -1 );\n\tspheres[7] = vec3(  1, -1,  1 );\n    \n\tvec4 rgbz = vec4( 0, 0, 0, 10000.0 );\n    \n    for( int i = 0; i < 8; i++ ) {\n        vec4 rgbz2 = test_sphere( vec4( 15.0 * spheres[ i ] * obj2cam - pos, 7 ), ray );\n        if( length(rgbz2) > 0. && rgbz2.w < rgbz.w ) rgbz = rgbz2;\n    }\n    \n    fragColor = vec4( rgbz.xyz, 1 );\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}