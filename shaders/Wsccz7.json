{
    "Shader": {
        "info": {
            "date": "1600761430",
            "description": "WIP; probably hopeless.\nTry to compute motion flow of bufC  via correlations between neighborhoods of current frame vs previous (buf A).\nBut detects spatial correl more than temporal ! ( especially on blurry videos ).\n→ global regularization pass required",
            "flags": 32,
            "hasliked": 0,
            "id": "Wsccz7",
            "likes": 6,
            "name": "motion flow",
            "published": 3,
            "tags": [
                "tracking",
                "opticalflow",
                "motionflow"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 618
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy; \n    O = .1 + T(u); O.a = 0.;\n    O = vec4( length(max(O,0.)) /3. );\n    O += .2*T1(u);\n }\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TILE 16\nfloat   fTILE = float(TILE);\n    \n#define T(u)    texelFetch( iChannel0, ivec2(u), 0 )\n#define T1(u)   texelFetch( iChannel1, ivec2(u), 0 )\n#define dot3(v) dot(v.rgb,v.rgb)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// --- previous frame\n\nvoid mainImage( out vec4 O, vec2 u )\n{ O = T(u); }\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// #define gain   .5   // for LOD 99.\n   #define gain   3.   // for LOD  4.\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 I = floor( U / fTILE ) * fTILE,                // tile ID / tiling\n         D = I +  fTILE/2.,                             // tile center\n         V = mod(U, fTILE) - fTILE/2.;                  // local coords in tiles\n\n//  vec4   m = textureLod(iChannel0,vec2(.5),99.),      // image average\n//        m1 = textureLod(iChannel1,vec2(.5),99.);\n    vec4   m = texelFetch(iChannel0, ivec2(D  )>>4,4),  // image average. 4 = log2(TILE)\n          m1 = texelFetch(iChannel1, ivec2(D+V)>>4,4), d;\n    float  s = gain* sqrt(max(0.,  m.a - dot3(m ))),    // image variance Ex²-E²x\n          s1 = gain* sqrt(max(0., m1.a - dot3(m1)));   \n    O-=O;\n    for (int k=0; k < TILE*TILE; k++)                   // correlation between current central tile\n        D = I + vec2(k%TILE,k/TILE),                    // and previous frame areas around\n        O += ( T(D) - m ) / s  * ( T1(D+V) - m1 ) / s1; // coorrelation centered and normalized\n     // d  = ( T(D) - m ) / s  - ( T1(D+V) - m1 ) / s1 , O += d*d; // variante: distance rather than correl\n                                                        // indeed, same thing: dist = 2*(1 - correl )\n     // O += ( T(D) - T(D+V) ) / s  * ( T1(D) - T1(D+V) ) / s1; // trying to cancel spatial correlation\n     // d  = ( T(D) - T(D+V) ) / s  - ( T1(D) - T1(D+V) ) / s1, O += 1e15*d*d; // variante: distance rather than correl\n    O /= fTILE*fTILE;\n }\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// --- current frame\n\nvoid mainImage( out vec4 O, vec2 u )\n{ O = T(u); O.a = dot3(O); }\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}