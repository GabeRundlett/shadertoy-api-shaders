{
    "Shader": {
        "info": {
            "date": "1690443779",
            "description": "New Fire. give it 10 seconds to evolve.",
            "flags": 32,
            "hasliked": 0,
            "id": "mlXyR4",
            "likes": 10,
            "name": "Fire3",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "fractal",
                "cloud",
                "fire",
                "generated"
            ],
            "usePreview": 0,
            "username": "ersh",
            "viewed": 236
        },
        "renderpass": [
            {
                "code": "// (C) Copyright 2021 by Yury Ershov\n\n#define OUTPUT_AVG     1    // Average 4 buffers or use only one\n#define SMOOTH         1    // Smooth output: 0=no; 1=slightly; 2=more\n#define PALETTE        0    // 0=fire, 1=blue, 2=green\n\nvec3 col(float x) {\n  return vec3(\n#if PALETTE == 0\n      clamp(x, 0., 1./3.),\n      clamp(x-1./3., 0., 1./3.),\n      clamp(x-2./3., 0., 1./3.)\n#elif PALETTE == 1\n      clamp(x-2./3., 0., 1./3.),\n      clamp(x-1./3., 0., 1./3.),\n      clamp(x, 0., 1./3.)\n#elif PALETTE == 2\n      clamp(x-2./3., 0., 1./3.),\n      clamp(x, 0., 1./3.),\n      clamp(x-1./3., 0., 1./3.)\n#endif\n   ) * 3.;\n}\n\n//#define AVG \\\n//  return (V(-s.x, -s.y) + V( 0.0, -s.y)*2. + V( s.x, -s.y) + \\\n//          V(-s.x,  0.0)*2. + V( 0.0,  0.0)*8. + V( s.x,  0.0)*2. + \\\n//          V(-s.x,  s.y) + V( 0.0,  s.y)*2. + V( s.x,  s.y)) / 20.; \\\n//EOM\n//#define AVG \\\n//  return (V(-s.x, -s.y) + V( 0.0, -s.y) + \\\n//          V(-s.x,  0.0) + V( 0.0,  0.0)*2.) / 5.; \\\n// EOM\n//#define AVG \\\n//  return (V(0.0, -s.y) + V(-s.x, 0.0) + V(s.x, 0.0) + V(0.0, s.y))/4.; \\\n// EOM\n//#define AVG \\\n//  return (V(-s.x, -s.y) + V( 0.0, -s.y)*2. + V( s.x, -s.y) + \\\n//          V(-s.x,  0.0)*2.                 + V( s.x,  0.0)*2. + \\\n//          V(-s.x,  s.y) + V( 0.0,  s.y)*2. + V( s.x,  s.y)) / 12.; \\\n//EOM\n//#define AVG \\\n//  float avg = \\\n//         (V(-s.x, -s.y) + V( 0.0, -s.y)*2. + V( s.x, -s.y) + \\\n//          V(-s.x,  0.0)*2.                 + V( s.x,  0.0)*2. + \\\n//          V(-s.x,  s.y) + V( 0.0,  s.y)*2. + V( s.x,  s.y)) / 12.; \\\n//  float pt = V(0.0, 0.0); \\\n//  float diff = distance(avg, pt); \\\n//  return mix(pt, avg, smoothstep(0.0, 1.0, diff*1.5)); \\\n// EOM\n\n#define min4(a1,a2,a3,a4)               min(min(a1,a2),min(a3,a4))\n#define min8(a1,a2,a3,a4,b1,b2,b3,b4)   min(min4(a1,a2,a3,a4),min4(b1,b2,b3,b4))\n#define max4(a1,a2,a3,a4)               max(max(a1,a2),max(a3,a4))\n#define max8(a1,a2,a3,a4,b1,b2,b3,b4)   max(max4(a1,a2,a3,a4),max4(b1,b2,b3,b4))\n#define AVG \\\n  float mn = min8( \\\n          V(-s.x, -s.y),  V( 0.0, -s.y),     V( s.x, -s.y), \\\n          V(-s.x,  0.0),                     V( s.x,  0.0), \\\n          V(-s.x,  s.y),  V( 0.0,  s.y),     V( s.x,  s.y)); \\\n  float mx = max8( \\\n          V(-s.x, -s.y),  V( 0.0, -s.y),     V( s.x, -s.y), \\\n          V(-s.x,  0.0),                     V( s.x,  0.0), \\\n          V(-s.x,  s.y),  V( 0.0,  s.y),     V( s.x,  s.y)); \\\n  float avg = \\\n         (V(-s.x, -s.y) + V( 0.0, -s.y)*2. + V( s.x, -s.y) + \\\n          V(-s.x,  0.0)*2.                 + V( s.x,  0.0)*2. + \\\n          V(-s.x,  s.y) + V( 0.0,  s.y)*2. + V( s.x,  s.y)) / 12.; \\\n  float pt = V(0.0, 0.0); \\\n  float minmaxdiff = clamp(distance(mn,mx), 0.01, 0.67); \\\n  float diff = distance(avg, pt); \\\n  return mix(pt, avg, smoothstep(0.0, 1.0, diff / minmaxdiff)); \\\n// EOM\n\n#define V(X,Y)   texture(iChannel0, c + vec2(X, Y)).r\nfloat avg0(in vec2 c, in vec2 s) { AVG }\n#undef V\n#define V(X,Y)   texture(iChannel1, c + vec2(X, Y)).r\nfloat avg1(in vec2 c, in vec2 s) { AVG }\n#undef V\n#define V(X,Y)   texture(iChannel2, c + vec2(X, Y)).r\nfloat avg2(in vec2 c, in vec2 s) { AVG }\n#undef V\n#define V(X,Y)   texture(iChannel3, c + vec2(X, Y)).r\nfloat avg3(in vec2 c, in vec2 s) { AVG }\n#undef V\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor.a = 1.0;\n\n#if OUTPUT_AVG\n#if SMOOTH\n    vec2 s = vec2(1., 1.) / iResolution.xy;\n\tfragColor.rgb = col(\n            (avg0(uv, s) +\n             avg1(uv, s) +\n             avg2(uv, s) +\n             avg3(uv, s)) / 4.\n        );\n#else\n\tfragColor.rgb = col(\n            (texture(iChannel0,uv).r +\n            texture(iChannel1,uv).r +\n            texture(iChannel2,uv).r +\n            texture(iChannel3,uv).r) / 4.\n        );\n#endif\n\n#else\n\n#if SMOOTH\n\tfragColor.rgb = col(avg0(uv, vec2(1., 1.) / iResolution.xy));\n#else\n\tfragColor.rgb = col(texture(iChannel0,uv).r);\n#endif\n\n#endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// (C) Copyright 2021 by Yury Ershov\n\n#define CLICK_TO_RESET  1     // Click mouse to reset the field.\n#define LOOKUP_DIST     2     // 1 => 1; 2 => 2, no corners; 3 => 2 with corners.\n#define AVG_EVERY_N     0     // Average every THIS frame; 0 => none\n#define FLARE_UP        1     // Cause the fire to flare up\n#define SPEED           1.\n#define RAND            (hash12(uv)-0.5)/100.\n\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 position)\n{\n    vec2 p = (position + mod(iTime, 200.) * 1500. + 50.0);\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n#if FLARE_UP\n#define COORD (1.-uv.y)*SPEED\n#else\n#define COORD 1.*SPEED\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    if(iFrame < 2\n#if CLICK_TO_RESET\n       || iMouse.z > 0.\n#endif\n       ) {\n        fragColor = vec4(vec3(pow(1.-uv.y, 4.)), 1.-pow(uv.y, 10.));\n        return;\n    }\n\n    if (\n      //length(iMouse.xy - fragCoord) > 10. &&\n#if AVG_EVERY_N > 0\n      (iFrame % AVG_EVERY_N != 0) &&\n#endif\n      hash12(fragCoord) > 0.05*COORD\n    ) {\n        fragColor = texture(iChannel0,uv);\n        return;\n    }\n\n    vec2 s1 = vec2(1., 1.) / iResolution.xy;\n    vec2 d = uv;\n    float v = texture(iChannel0, d).a;\n    float vv; vec2 dd;\n#define TEST(DX, DY)  \\\n    dd = uv + vec2(DX, DY); \\\n    vv = texture(iChannel0, dd).a; \\\n    if (vv > v) { v = vv; d = dd; } \\\n// EOM\n    TEST( s1.x,    0.);\n    TEST(-s1.x,    0.);\n    TEST(   0.,  s1.y);\n    TEST(   0., -s1.y);\n    TEST(-s1.x, -s1.y);\n    TEST( s1.x,  s1.y);\n    TEST(-s1.x,  s1.y);\n    TEST( s1.x, -s1.y);\n#if LOOKUP_DIST > 1\n    vec2 s2 = s1 * 2.;\n    TEST( s2.x,   0.);\n    TEST(-s2.x,   0.);\n    TEST(   0., s2.y);\n    TEST(   0.,-s2.y);\n    TEST( s2.x, s1.y);\n    TEST(-s2.x,-s1.y);\n    TEST(-s1.x, s2.y);\n    TEST( s1.x,-s2.y);\n    TEST( s2.x,-s1.y);\n    TEST(-s2.x, s1.y);\n    TEST( s1.x, s2.y);\n    TEST(-s1.x,-s2.y);\n#if LOOKUP_DIST > 2\n    TEST( s2.x, s2.y);\n    TEST(-s2.x,-s2.y);\n    TEST( s2.x,-s2.y);\n    TEST(-s2.x, s2.y);\n#endif\n#endif\n\n    float c = clamp(texture(iChannel0, d).r + RAND, 0., 1.);\n    fragColor = vec4(c,0,0,v+0.0001);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// (C) Copyright 2021 by Yury Ershov\n\n#define CLICK_TO_RESET  1     // Click mouse to reset the field.\n#define LOOKUP_DIST     2     // 1 => 1; 2 => 2, no corners; 3 => 2 with corners.\n#define AVG_EVERY_N     0     // Average every THIS frame; 0 => none\n#define FLARE_UP        0     // Cause the fire to flare up\n#define SPEED           2.\n#define RAND            (hash12(uv)-0.4-uv.y*0.5)/100.\n//#define RAND            (hash12(uv)-0.4-distance(vec2(0.5, 0.), uv)*0.5)/100.\n\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 position)\n{\n    vec2 p = (position + mod(iTime, 200.) * 1500. + 60.0);\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n#if FLARE_UP\n#define COORD (1.-uv.y)*SPEED\n#else\n#define COORD 1.*SPEED\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    if(iFrame < 2\n#if CLICK_TO_RESET\n       || iMouse.z > 0.\n#endif\n       ) {\n        fragColor = vec4(vec3(pow(1.-uv.y, 4.)), 1.-pow(uv.y, 10.));\n        return;\n    }\n\n    if (\n      //length(iMouse.xy - fragCoord) > 10. &&\n#if AVG_EVERY_N > 0\n      (iFrame % AVG_EVERY_N != 0) &&\n#endif\n      hash12(fragCoord) > 0.05*COORD\n    ) {\n        fragColor = texture(iChannel0,uv);\n        return;\n    }\n\n    vec2 s1 = vec2(1., 1.) / iResolution.xy;\n    vec2 d = uv;\n    float v = texture(iChannel0, d).a;\n    float vv; vec2 dd;\n#define TEST(DX, DY)  \\\n    dd = uv + vec2(DX, DY); \\\n    vv = texture(iChannel0, dd).a; \\\n    if (vv > v) { v = vv; d = dd; } \\\n// EOM\n    TEST( s1.x,    0.);\n    TEST(-s1.x,    0.);\n    TEST(   0.,  s1.y);\n    TEST(   0., -s1.y);\n    TEST(-s1.x, -s1.y);\n    TEST( s1.x,  s1.y);\n    TEST(-s1.x,  s1.y);\n    TEST( s1.x, -s1.y);\n#if LOOKUP_DIST > 1\n    vec2 s2 = s1 * 2.;\n    TEST( s2.x,   0.);\n    TEST(-s2.x,   0.);\n    TEST(   0., s2.y);\n    TEST(   0.,-s2.y);\n    TEST( s2.x, s1.y);\n    TEST(-s2.x,-s1.y);\n    TEST(-s1.x, s2.y);\n    TEST( s1.x,-s2.y);\n    TEST( s2.x,-s1.y);\n    TEST(-s2.x, s1.y);\n    TEST( s1.x, s2.y);\n    TEST(-s1.x,-s2.y);\n#if LOOKUP_DIST > 2\n    TEST( s2.x, s2.y);\n    TEST(-s2.x,-s2.y);\n    TEST( s2.x,-s2.y);\n    TEST(-s2.x, s2.y);\n#endif\n#endif\n\n    float c = clamp(texture(iChannel0, d).r + RAND, 0., 1.);\n    fragColor = vec4(c,0,0,v+0.0001);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// (C) Copyright 2021 by Yury Ershov\n\n#define CLICK_TO_RESET  1     // Click mouse to reset the field.\n#define LOOKUP_DIST     2     // 1 => 1; 2 => 2, no corners; 3 => 2 with corners.\n#define AVG_EVERY_N     0     // Average every THIS frame; 0 => none\n#define FLARE_UP        0     // Cause the fire to flare up\n#define SPEED           2.\n#define RAND            (hash12(uv)-0.5)/100.\n\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 position)\n{\n    vec2 p = (position + mod(iTime, 200.) * 1500. + 70.0);\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n#if FLARE_UP\n#define COORD (1.-uv.y)*SPEED\n#else\n#define COORD 1.*SPEED\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    if(iFrame < 2\n#if CLICK_TO_RESET\n       || iMouse.z > 0.\n#endif\n       ) {\n        fragColor = vec4(vec3(pow(1.-uv.y, 4.)), 1.-pow(uv.y, 10.));\n        return;\n    }\n\n    if (\n      //length(iMouse.xy - fragCoord) > 10. &&\n#if AVG_EVERY_N > 0\n      (iFrame % AVG_EVERY_N != 0) &&\n#endif\n      hash12(fragCoord) > 0.05*COORD\n    ) {\n        fragColor = texture(iChannel0,uv);\n        return;\n    }\n\n    vec2 s1 = vec2(1., 1.) / iResolution.xy;\n    vec2 d = uv;\n    float v = texture(iChannel0, d).a;\n    float vv; vec2 dd;\n#define TEST(DX, DY)  \\\n    dd = uv + vec2(DX, DY); \\\n    vv = texture(iChannel0, dd).a; \\\n    if (vv > v) { v = vv; d = dd; } \\\n// EOM\n    TEST( s1.x,    0.);\n    TEST(-s1.x,    0.);\n    TEST(   0.,  s1.y);\n    TEST(   0., -s1.y);\n    TEST(-s1.x, -s1.y);\n    TEST( s1.x,  s1.y);\n    TEST(-s1.x,  s1.y);\n    TEST( s1.x, -s1.y);\n#if LOOKUP_DIST > 1\n    vec2 s2 = s1 * 2.;\n    TEST( s2.x,   0.);\n    TEST(-s2.x,   0.);\n    TEST(   0., s2.y);\n    TEST(   0.,-s2.y);\n    TEST( s2.x, s1.y);\n    TEST(-s2.x,-s1.y);\n    TEST(-s1.x, s2.y);\n    TEST( s1.x,-s2.y);\n    TEST( s2.x,-s1.y);\n    TEST(-s2.x, s1.y);\n    TEST( s1.x, s2.y);\n    TEST(-s1.x,-s2.y);\n#if LOOKUP_DIST > 2\n    TEST( s2.x, s2.y);\n    TEST(-s2.x,-s2.y);\n    TEST( s2.x,-s2.y);\n    TEST(-s2.x, s2.y);\n#endif\n#endif\n\n    float c = clamp(texture(iChannel0, d).r + RAND, 0., 1.);\n    fragColor = vec4(c,0,0,v+0.0001);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// (C) Copyright 2021 by Yury Ershov\n\n#define CLICK_TO_RESET  1     // Click mouse to reset the field.\n#define LOOKUP_DIST     2     // 1 => 1; 2 => 2, no corners; 3 => 2 with corners.\n#define AVG_EVERY_N     0     // Average every THIS frame; 0 => none\n#define FLARE_UP        0     // Cause the fire to flare up\n#define SPEED           2.\n#define RAND            (hash12(uv)-0.5)/100.\n\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 position)\n{\n    vec2 p = (position + mod(iTime, 200.) * 1500. + 80.0);\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n#if FLARE_UP\n#define COORD (1.-uv.y)*SPEED\n#else\n#define COORD 1.*SPEED\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    if(iFrame < 2\n#if CLICK_TO_RESET\n       || iMouse.z > 0.\n#endif\n       ) {\n        fragColor = vec4(vec3(pow(1.-uv.y, 4.)), 1.-pow(uv.y, 10.));\n        return;\n    }\n\n    if (\n      //length(iMouse.xy - fragCoord) > 10. &&\n#if AVG_EVERY_N > 0\n      (iFrame % AVG_EVERY_N != 0) &&\n#endif\n      hash12(fragCoord) > 0.05*COORD\n    ) {\n        fragColor = texture(iChannel0,uv);\n        return;\n    }\n\n    vec2 s1 = vec2(1., 1.) / iResolution.xy;\n    vec2 d = uv;\n    float v = texture(iChannel0, d).a;\n    float vv; vec2 dd;\n#define TEST(DX, DY)  \\\n    dd = uv + vec2(DX, DY); \\\n    vv = texture(iChannel0, dd).a; \\\n    if (vv > v) { v = vv; d = dd; } \\\n// EOM\n    TEST( s1.x,    0.);\n    TEST(-s1.x,    0.);\n    TEST(   0.,  s1.y);\n    TEST(   0., -s1.y);\n    TEST(-s1.x, -s1.y);\n    TEST( s1.x,  s1.y);\n    TEST(-s1.x,  s1.y);\n    TEST( s1.x, -s1.y);\n#if LOOKUP_DIST > 1\n    vec2 s2 = s1 * 2.;\n    TEST( s2.x,   0.);\n    TEST(-s2.x,   0.);\n    TEST(   0., s2.y);\n    TEST(   0.,-s2.y);\n    TEST( s2.x, s1.y);\n    TEST(-s2.x,-s1.y);\n    TEST(-s1.x, s2.y);\n    TEST( s1.x,-s2.y);\n    TEST( s2.x,-s1.y);\n    TEST(-s2.x, s1.y);\n    TEST( s1.x, s2.y);\n    TEST(-s1.x,-s2.y);\n#if LOOKUP_DIST > 2\n    TEST( s2.x, s2.y);\n    TEST(-s2.x,-s2.y);\n    TEST( s2.x,-s2.y);\n    TEST(-s2.x, s2.y);\n#endif\n#endif\n\n    float c = clamp(texture(iChannel0, d).r + RAND, 0., 1.);\n    fragColor = vec4(c,0,0,v+0.0001);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}