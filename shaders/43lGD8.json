{
    "Shader": {
        "info": {
            "date": "1707406622",
            "description": "Beauty x2! Tips on how to make the fog look better? Any way to do bloom properly or DOF/Defocus Blur?",
            "flags": 32,
            "hasliked": 0,
            "id": "43lGD8",
            "likes": 2,
            "name": "TDIL Pathtracing",
            "published": 3,
            "tags": [
                "raytracing",
                "raycasting",
                "pathtracing"
            ],
            "usePreview": 0,
            "username": "pathtracerenthusiast",
            "viewed": 168
        },
        "renderpass": [
            {
                "code": "//#define BLOOM\n\n// Image definitions in Buffer A\n\nvec2 offsets[13] = vec2[](\n    vec2( 0.0, 0.0),\n    vec2( 0.0,-1.0),\n    vec2( 0.0, 1.0),\n    vec2(-1.0, 0.0),\n    vec2( 1.0, 0.0),\n    vec2( 0.0,-4.0),\n    vec2( 0.0, 4.0),\n    vec2(-4.0, 0.0),\n    vec2( 4.0, 0.0),\n    vec2( 2.0,-2.0),\n    vec2( 2.0, 2.0),\n    vec2(-2.0,-2.0),\n    vec2(-2.0, 2.0)\n);\n\nvec3 blur(sampler2D tex,vec2 coord,float k1,float e,float k2,float o) {\n    vec2 size = vec2(textureSize(tex,0));\n    vec3 color = vec3(0.0);\n    for (int i = 0; i < 13; i++) {\n        vec3 fetch = texture(tex,(coord+offsets[i])/size).xyz;\n        float brightness = dot(fetch,vec3(1.0));\n        color += brightness > 2.5 ? 0.4 * fetch : vec3(0.0);\n    }\n    color *= 0.2;\n    return color;\n}\n\nvoid mainImage(out vec4 outCol,in vec2 coord ) {\n    vec3 color1 = texture(iChannel0,coord/iResolution.xy).xyz;\n    #ifdef BLOOM\n    vec3 color2 = blur(iChannel0,coord,0.2,3.0,0.5,-0.5);\n    \n    vec3 color = color1 + 0.5 * color2;\n    #else\n    vec3 color = color1;\n    #endif\n    \n    color = colorCorrect(color);\n    \n    outCol = vec4(color,1.5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.141592653579\n#define DOF_STRENGTH 0.0\n#define FOCUS 5.0\n#define randRad rand() * PI * 2.0\n#define UP    vec3( 0.0 , 1.0 ,0.125)\n#define RIGHT vec3( 1.0 , 0.0 , 0.0 )\n#define POS   vec3( 0.0 , 0.5 , 0.0)\n#define nullHit Hit(vec3(0.0),vec3(0.0),-1.0,-1u)\n#define SAMPLES 16\n#define BOUNCES 25\n#define FOG_STRENGTH 0.05\n\n// Ln. 131: Object definitions\n// Ln. 250: Object Materials\n\nstruct Ray {\n    vec3 origin;\n    vec3 dir;\n};\n\nstruct Hit {\n    vec3 pos;\n    vec3 nor;\n    float len;\n    uint id;\n};\n\nbool hasHitInside = false;\n\nstruct Material {\n    vec3 albedo;\n    vec3 emissive;\n    float smoothness;\n    float refrCh;\n    float IOR;\n};\n\nMaterial lightMat(float bright,vec3 color,float smoothness) {\n    return Material(0.5*(color+vec3(1.0)),color*bright,smoothness,0.0,2.0);\n}\n\nMaterial lambMat(vec3 color,float smoothness) {\n    return Material(color,vec3(0.0),smoothness,0.0,2.0);\n}\n\nMaterial dielMat(vec3 color,float smoothness,float iorOff) {\n    return Material(color,vec3(0.0),smoothness,1.0,iorOff);\n}\n\nMaterial metalMat(vec3 color,float smoothness) {\n    return Material(color,vec3(0.0),smoothness,-1.0,2.0);\n}\n\nvec3 orient(vec3 vec,vec3 up, vec3 right) {\n    vec3 forward = cross(right,up);\n    return (vec.x*right) + (vec.y*up) + (vec.z*forward);\n}\n\nfloat lenSq(vec3 vec) {\n    return dot(vec,vec);\n}\n\nfloat seed = 0.0;\nfloat rand(void) {\n    float p = fract(seed * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    seed += 14.2657;\n    return fract(p);\n}\n\nvec3 sky(vec3 dir) {\n    float lerpPoint = 0.5 * dir.y + 0.5;\n    \n    float sun = max(0.0,dot(dir,normalize(vec3(0.75,0.5,-0.3))));\n    sun *= sun * sun;\n    sun *= sun * sun;\n    // ^3)^3 = ^9\n    \n    return 7.5 * mix(vec3(0.4, 0.7, 1),vec3(1.0),1.0-lerpPoint)\n        + 50.0 * sun * vec3(1.0,0.7,0.4);\n}\n\nvec3 randOnSphere() {\n    float theta = randRad;\n    float phi = randRad;\n    vec2 xz = cos(phi) * vec2(cos(theta),sin(theta));\n    return vec3(xz.x,sin(phi),xz.y);\n}\n\nHit hitPlane(float w,Ray ray,uint id) {\n  if ((ray.dir.y > 0.0 && ray.origin.y > w)\n    ||(ray.dir.y < 0.0 && ray.origin.y < w))\n      return nullHit;\n  float t = (w - ray.origin.y) / ray.dir.y;\n  vec3 p = ray.dir * t + ray.origin;\n  return Hit(p,vec3(0.0,1.0,0.0),t,id);\n}  \n\nHit hitSphere(vec3 center,float radius,Ray ray,uint id) {\n    vec3 oc = ray.origin - center;\n    float a = lenSq(ray.dir);\n    float b = 2.0 * dot(oc,ray.dir);\n    float c = lenSq(oc) - (radius*radius);\n    float h = (b*b) - (4.0 * a * c);\n    if (h<0.0001) return nullHit;\n    float temp = -b-sqrt(h);\n    temp = temp < 0.01 ? -b+sqrt(h) : temp;\n    float t = temp / 2.0 * a;\n    vec3 p = ray.dir * t + ray.origin;\n    vec3 nor = (p-center) / radius;\n    return Hit(p,nor,t,id);\n    \n}\n\nvoid checkHit(inout Hit objHit,inout Hit outHit,inout bool hasHit) {\n    bool shouldHit = objHit.len > 0.0001 && (!hasHit || objHit.len < outHit.len);\n    if (shouldHit) {\n        outHit = objHit;\n    }\n    hasHit = shouldHit ? true : hasHit;\n}\n\nHit getHit(Ray ray) {\n    Hit hit = nullHit;\n    bool hasHit = false;\n    \n    // -----------------|\n    //\n    // Object Positions |\n    //\n    // -----------------|\n    \n    Hit sphere1 = hitSphere(vec3(0.0,0.0,5.5),1.0,ray,0u);\n    \n    Hit plane1 = hitPlane(-1.0,ray,1u);\n    \n    Hit sphere2 = hitSphere(vec3(-1.75,-0.5 , 7.0 ), 0.5 ,ray,2u);\n    \n    Hit sphere3 = hitSphere(vec3( 1.75,-0.5 , 7.0 ), 0.5 ,ray,3u);\n    Hit sphere4 = hitSphere(vec3( 1.75,-0.5 , 7.0 ),-0.4 ,ray,3u);\n    \n    Hit sphere5 = hitSphere(vec3(-3.0 ,-0.25, 9.0 ), 0.75,ray,4u);\n    \n    Hit sphere6 = hitSphere(vec3( 3.0 ,-0.25, 9.0 ), 0.75,ray,5u);\n    \n    checkHit(sphere1,hit,hasHit);\n    \n    checkHit(sphere2,hit,hasHit);\n    \n    checkHit(sphere3,hit,hasHit);\n    \n    checkHit(sphere4,hit,hasHit);\n    \n    checkHit(sphere5,hit,hasHit);\n    \n    checkHit(sphere6,hit,hasHit);\n    \n    checkHit(plane1,hit,hasHit);\n    \n    return hit;\n}\n\nMaterial materials[6]; // Increase this to match the number of materials.\n\nvec3 hemi(vec3 nor) {\n    vec3 ret = randOnSphere();\n    ret = (dot(ret,nor)<0.0) ? -ret : ret;\n    return ret;\n}\n\nfloat raiseTo5(float x) {\n    return x*x*x*x*x;\n}\n\nvec3 sampleRay(vec2 coord) {\n     vec2 offset = 2.0 * vec2(rand(),rand()) - 1.0;\n     vec2 uv = (coord+offset)/iResolution.xy;\n     uv *= 2.0;\n     uv -= 1.0;\n     uv.x *= iResolution.x/iResolution.y;\n     \n     vec3 pixelPos = vec3(uv,2.5);\n     float ang = randRad;\n     float dof = DOF_STRENGTH * 2.5 / FOCUS;\n     vec3 lensPos = vec3(dof*cos(ang),dof*sin(ang),0.0);\n     lensPos = orient(lensPos,normalize(UP),normalize(RIGHT));\n     pixelPos = orient(pixelPos,normalize(UP),normalize(RIGHT));\n     \n     Ray ray = Ray(POS+lensPos,normalize(pixelPos));\n     \n     vec3 energy = vec3(0.0);\n     vec3 tint = vec3(1.0);\n     float numCanRefracts = 0.0;\n     for (int i = 0; i < BOUNCES + 1; i++) {\n         Hit hit = getHit(ray);\n         \n         if (hit.id == -1u) {\n             energy += tint * sky(ray.dir);\n             break;\n         }\n         \n         {\n             float target = rand() * hit.len;\n             float chance = 1.0 - exp(-FOG_STRENGTH*target);\n             if (rand()<chance) {\n                 ray.origin = ray.dir*target + ray.origin;\n                 ray.dir = randOnSphere();\n                 continue;\n             }\n         }\n         \n         Material mat = materials[hit.id];\n         \n         bool inside = dot(ray.dir,hit.nor)>0.0;\n         \n         float smoth = 1.0 - mat.smoothness;\n         smoth = 1.0 - smoth*smoth*smoth;\n         \n         float fresnel = 1.0-dot(ray.dir,hit.nor*(inside?-1.0:1.0));\n         float n1 = inside ? mat.IOR : 1.0;\n         float n2 = inside ? 1.0 : mat.IOR;\n         float R0 = (n1-n2)/(n1+n2);\n         R0 *= R0;\n         \n         smoth = (mat.refrCh<-0.5) ?\n             R0 + (1.0-R0)*fresnel\n             : smoth;\n         //smoth = mat.smoothness;\n         \n         vec3 outNor = normalize(smoth*hit.nor\n             + (1.0-smoth)*hemi(hit.nor));\n         \n         vec3 bounceDir = reflect(ray.dir,outNor);\n         \n         vec3 hitNor = (inside ? -1.0 : 1.0) * outNor;\n         \n         float eta = inside ? mat.IOR : 1.0/mat.IOR;\n         vec3 refractDir = refract(ray.dir,hitNor,eta);\n         \n         bool canRefract = refractDir != vec3(0.0)\n             && rand() < mat.refrCh * fresnel;\n         \n         ray.origin = hit.pos + hit.nor\n             * (inside?-1.0:1.0)\n             * (canRefract ? -0.01:0.01);\n         \n         ray.dir = canRefract ? refractDir : bounceDir;\n         energy += tint * mat.emissive;\n         tint *= mat.albedo;\n     }\n     \n     return energy;\n}\n\nvoid mainImage( out vec4 col, in vec2 coord ) {\n   if (coord.x>iResolution.x/2.0||coord.y>iResolution.y/2.0)\n       return;\n   coord *= 2.0;\n   seed = iTime + coord.x;\n   seed *= 2.0 * rand() + coord.y;\n   seed += 17.9 * rand() * (coord.x+coord.y);\n   \n   // Materials Go Here!\n   materials = Material[](\n       lightMat(4.0,vec3(1.0,0.9,0.75),0.0),\n       lambMat(vec3(0.35,0.65,0.15),0.15),\n       lambMat(vec3(0.19,0.19,0.2),0.85),\n       dielMat(vec3(0.99),1.0,1.5),\n       lambMat(vec3(0.5,0.25,0.75),0.5),\n       dielMat(vec3(1.0,1.0,1.0),0.99,1.7)\n   );\n   \n   vec3 total;\n   for (int i = 0; i < SAMPLES; i++) {\n       total += sampleRay(coord);\n   }\n   \n   col = 0.999 * texture(iChannel0,coord/iResolution.xy/2.0);\n   col += vec4(total,float(SAMPLES));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// If it looks blurry turn this off\n#define SMOOTH\n\nvoid mainImage(out vec4 color,in vec2 coord ) {\n    vec4 colorO = texture(iChannel0,(coord.xy-vec2(0.5,0.5))/iResolution.xy/2.0);\n    #ifdef SMOOTH\n    vec4 colorX = texture(iChannel0,(coord.xy+vec2(1.0,0.0))/iResolution.xy/2.0);\n    vec4 colorY = texture(iChannel0,(coord.xy+vec2(0.0,1.0))/iResolution.xy/2.0);\n    color = (colorX + colorY) * 0.5;\n    #else\n    color = colorO;\n    #endif\n    \n    color /= colorO.w;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Choose ONE\n#define HDR_MODE_EXP\n//#define HRD_MODE_INVADD\n\nvec3 colorCorrect(in vec3 color) {\n    #ifdef HDR_MODE_EXP\n    return 1.0 - pow(color+1.0,vec3(-0.75));\n    #endif\n    #ifdef HDR_MODE_INVADD\n    return color / (color + 1.0);\n    #endif\n}\n\nvec3 invColorCorrect(in vec3 color) {\n    #ifdef HDR_MODE_EXP\n    vec3 beforeExp = 1.0 - color;\n    return pow(color,vec3(-1.3333))-1.0;\n    #endif\n    #ifdef HDR_MODE_INVADD\n    return -color / (color - 1.0);\n    #endif\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}