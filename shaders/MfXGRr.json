{
    "Shader": {
        "info": {
            "date": "1702676834",
            "description": "Interesting pattern created by rotating points. ",
            "flags": 0,
            "hasliked": 0,
            "id": "MfXGRr",
            "likes": 1,
            "name": "Rotating Vornoi Tiles",
            "published": 3,
            "tags": [
                "vornoirotation"
            ],
            "usePreview": 0,
            "username": "mgmbass",
            "viewed": 141
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= vec2(0.5);\n    \n    vec3 col = vec3(.0);\n    float rotation = sin(iTime)*PI;\n    \n     // Cell positions\n    vec2 point[9];\n    vec2 pos = vec2(0.650,0.650) - vec2(0.5);\n    point[0] = rotate2d( rotation ) * pos;\n    pos = vec2(0.650,0.350) - vec2(0.5);\n    point[1] = rotate2d( rotation ) * pos;\n    pos = vec2(0.350,0.650) - vec2(0.5);\n    point[2] = rotate2d( rotation ) * pos;\n    pos =  vec2(0.350,0.350) - vec2(0.5);\n    point[3] = rotate2d( rotation ) * pos;\n    point[4] = vec2(0.5,0.500) - vec2(0.5);\n    pos = vec2(0.90,0.500) - vec2(0.5);\n    point[5] = rotate2d( -1. * rotation ) * pos;\n    pos = vec2(0.10,0.500) - vec2(0.5);\n    point[6] = rotate2d( -1. * rotation ) * pos;\n    pos = vec2(0.500,0.900) - vec2(0.5);\n    point[7] = rotate2d( -1. * rotation ) * pos;\n    pos = vec2(0.500,0.100) - vec2(0.5);\n    point[8] = rotate2d( -1. * rotation ) * pos;\n\n    float m_dist = 1.;  // minimum distance\n    vec2 m_point;        // minimum position\n    \n     // Iterate through the points positions\n    for (int i = 0; i < 9; i++) {\n        float dist = distance(uv, point[i]);\n        if ( dist < m_dist ) {\n            // Keep the closer distance\n            m_dist = dist;\n\n            // Kepp the position of the closer point\n            m_point = point[i] + vec2(0.5);\n        }\n    }\n\n    // Add distance field to closest point center\n    col += m_dist*2.;\n    \n      // tint acording the closest point position\n    col.rb = m_point;\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}