{
    "Shader": {
        "info": {
            "date": "1456753905",
            "description": "Like the cube but easier so to make it a challenge you are limited to 3 types of rotations - the top, middle and bottom. Use the mouse - you'll figure it out.",
            "flags": 32,
            "hasliked": 0,
            "id": "XdV3W3",
            "likes": 16,
            "name": "Rubik's Lesser",
            "published": 3,
            "tags": [
                "game",
                "puzzle"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 998
        },
        "renderpass": [
            {
                "code": "vec2 bx_cos(vec2 a){return clamp(abs(mod(a,8.0)-4.0)-2.0,-1.0,1.0);}\nvec2 bx_cossin(float a){return bx_cos(vec2(a,a-2.0));}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0,fragCoord/iResolution.xy);\n    if(fragColor.a<0.5){\n        float h=1.0;\n        for(float i=0.0;i<8.0;i+=1.0){\n\t\t\tvec2 v=bx_cossin(i); \n\t\t\tvec4 c=texture(iChannel0,(fragCoord+v)/iResolution.xy); \n            if(c.a>0.5){\n                float a=1.0/dot(v,v);h+=a;\n                fragColor.rgb+=c.rgb*a;\n            }\n\t\t}\n\t\tfragColor/=h;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159\n// hash without sine\n// https://www.shadertoy.com/view/4djSRW\n#define MOD3 vec3(443.8975,397.2973, 491.1871)\nfloat hash12(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat rotm(float m){\n\tif(m<1.0)return 4.5;\n\tif(m<2.0)return 6.5; \n\tif(m<3.0)return 5.5;\n\tif(m<4.0)return 1.5;\n\tif(m<5.0)return 8.5;\n\tif(m<6.0)return 7.5;\n\tif(m<7.0)return 3.5;\n\tif(m<8.0)return 2.5;\n\treturn 0.5;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tif(fragCoord.y>1.0 || fragCoord.x>37.0)discard;\n\tif(iFrame==0){\n\t\tif(fragCoord.x<9.0)fragColor=vec4(1.0,0.4,0.2,1.0);\n\t\telse if(fragCoord.x<18.0)fragColor=vec4(0.2,1.0,0.4,1.0);\n\t\telse if(fragCoord.x<27.0)fragColor=vec4(0.4,0.2,1.0,1.0);\n\t\telse if(fragCoord.x<36.0)fragColor=vec4(1.0);\n\t\telse{\n\t\t\tfragColor=vec4(0.0,0.0,1.0,0.0);//level clicked,angle,rotating\n\t\t}\n\t}else{\n\t\tvec4 st=texture(iChannel0,vec2(36.5,0.5)/iResolution.xy);\n\t\tvec2 coord=fragCoord.xy;\n\t\tif(iMouse.z>0.0 && st.z==0.0){//rotate\n\t\t\tif(st.x<0.5){\n\t\t\t\tif(iMouse.y<iResolution.y*0.35)st.x=1.0;\n\t\t\t\telse if(iMouse.y<iResolution.y*0.7)st.x=2.0;\n\t\t\t\telse st.x=3.0;\n\t\t\t}\n\t\t\tst.y=clamp(1.5*PI*(iMouse.x-iMouse.z)/iResolution.x,-2.0/3.0*PI,2.0/3.0*PI);\n\t\t}else{\n\t\t\tif(iFrame<100){\n\t\t\t\tst.y=2.0/3.0*PI;\n\t\t\t\tif(hash12(vec2(iTime,iDate.w+float(iFrame)))<0.5)st.y*=-1.0;\n\t\t\t\tst.x=1.0+floor(2.9999*hash12(vec2(iTime-iDate.w,float(iFrame))));\n\t\t\t}\n\t\t\tif(st.y!=0.0){\n\t\t\t\tst.z=1.0;\n\t\t\t\tfloat a=floor(st.y*3.0/(2.0*PI)+0.5)*2.0*PI/3.0;\n\t\t\t\tst.y+=(a-st.y)*iTimeDelta*10.0;\n\t\t\t\tif(abs(a-st.y)<0.05 && abs(a)>0.05){//do rotation\n\t\t\t\t\tif(st.x>1.5 && fragCoord.x<27.0){//simple level rotation\n\t\t\t\t\t\tfloat f=mod(fragCoord.x,9.0);\n\t\t\t\t\t\tif(f<(st.x<2.5?4.0:1.0))coord.x=mod(coord.x+sign(a)*9.0,27.0);\n\t\t\t\t\t}else if(st.x<1.5){//trickier total rotation\n\t\t\t\t\t\tfloat f=floor(fragCoord.x/9.0),m=mod(fragCoord.x,9.0),r1=0.0,r2=1.0;\n\t\t\t\t\t\tif(a<0.0){\n\t\t\t\t\t\t\tif(f==0.0){r1=27.0;r2=0.0;}\n\t\t\t\t\t\t\tif(f==1.0){r1=-9.0;r2=1.0;}\n\t\t\t\t\t\t\tif(f==2.0)r2=2.0;\n\t\t\t\t\t\t\tif(f==3.0){r1=-18.0;r2=2.0;}\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tif(f==0.0){r1=27.0;r2=2.0;}\n\t\t\t\t\t\t\tif(f==1.0)r2=1.0;\n\t\t\t\t\t\t\tif(f==2.0){r1=-18.0;r2=2.0;}\n\t\t\t\t\t\t\tif(f==3.0){r1=-9.0;r2=2.0;}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(r2>0.5)m=rotm(m);\n\t\t\t\t\t\tif(r2>1.5)m=rotm(m);\n\t\t\t\t\t\tcoord.x=f*9.0+r1+m;\n\t\t\t\t\t}\n\t\t\t\t\ta=0.0;\n\t\t\t\t}\n\t\t\t\tif(abs(a)<0.05){\n\t\t\t\t\tst.xyz=vec3(0.0);//ready to rotate again\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(fragCoord.x>36.0){fragColor=st;}\n\t\telse fragColor=texture(iChannel0,coord/iResolution.xy);\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.14159\n// hash without sine\n// https://www.shadertoy.com/view/4djSRW\n#define MOD3 vec3(443.8975,397.2973, 491.1871)\nfloat hash12(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat Plane(in vec3 z, in vec4 norm){return dot(z,norm.xyz)-norm.w;}\nmat3  rotAA(vec3 v, float angle){//axis angle rotation\n\tfloat c=cos(angle);vec3 s=v*sin(angle);\n\treturn mat3(v.xxx*v,v.yyy*v,v.zzz*v)*(1.0-c)+mat3(c,-s.z,s.y,s.z,c,-s.x,-s.y,s.x,c);\n}\n\nvec3 N0=vec3(0.0,0.0,-1.0),N1,N2,U;\nmat3 rmx;\nfloat pln_y=3.0;\nvoid setup(){\n\tvec4 st=texture(iChannel0,vec2(36.5,0.5)/iResolution.xy);\n\t\n\tfloat a=2.0/3.0*PI;\n\tmat2 mx=mat2(cos(a),sin(a),-sin(a),cos(a));\n\tfloat a2=1.0/3.0;\n\tmat2 mx2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n\tN0.yz=mx2*N0.yz;\n\tN1=N0;\n\tN1.xz=mx*N1.xz;\n\tN2=N1;\n\tN2.xz=mx*N2.xz;\n\tU=vec3(0.0,0.0,1.0);\n\tU.xz=mx*U.xz;\n\n\tvec3 N=vec3(0.0,1.0,0.0);\n\tif(st.x<1.5){\n\t\tif(st.y<0.0)N=N2;\n\t\telse N=N1;\n\t\tpln_y=3.0;\n\t}else if(st.x<2.5){\n\t\tpln_y=1.0-1.0/1.5;\n\t}else pln_y=1.0+1.0/1.5;\n\trmx=rotAA(N,st.y);\n}\n\nfloat DE(in vec3 p){\t\n\tvec3 ps=p;\n\t\n\tp=rmx*p;\n\tfloat d=-1.0-p.y;\n\td=max(d,Plane(p,vec4(N0,1.0)));\n\td=max(d,Plane(p,vec4(N1,1.0)));\n\td=max(d,Plane(p,vec4(N2,1.0)));\n\n\tif(pln_y<3.0){\n\t\td=max(d,pln_y-p.y);//abs(p.y-pln_y)-1.0/1.5);\n\t\tp=ps;\n\t\tfloat d2=-1.0-p.y;\n\t\td2=max(d2,Plane(p,vec4(N0,1.0)));\n\t\td2=max(d2,Plane(p,vec4(N1,1.0)));\n\t\td2=max(d2,Plane(p,vec4(N2,1.0)));\n\t\td=min(d,max(d2,p.y-pln_y));//1.0/1.5-abs(p.y-pln_y)));\n\t}\n\treturn d;\n}\nmat3 lookat(vec3 fw, vec3 up){//normalized!!\n\tvec3 rt=normalize(cross(fw,up));return mat3(rt,cross(rt,fw),fw);\n}\nvec3 Color(in vec3 p){\t\n\tvec3 ps=p;\n\tp=rmx*p;\n\tvec3 N=vec3(0.0,-1.0,0.0),up=vec3(0.0,1.0,0.0);\n\tfloat d1=-1.0-p.y,id=27.0;\n\tfloat d2=Plane(p,vec4(N0,1.0));\n\tif(d2>d1){d1=d2;N=N0;id=0.0;}\n\td2=Plane(p,vec4(N1,1.0));\n\tif(d2>d1){d1=d2;N=N1;id=9.0;}\n\td2=Plane(p,vec4(N2,1.0));\n\tif(d2>d1){d1=d2;N=N2;id=18.0;}\n\t\n\tif(pln_y<3.0){\n\t\td1=max(d1,pln_y-p.y);//remove non-rotated\n\t\tvec3 NN=vec3(0.0,-1.0,0.0);\n\t\tfloat d3=-1.0-ps.y,id2=27.0;\n\t\tfloat d4=Plane(ps,vec4(N0,1.0));\n\t\tif(d4>d3){d3=d4;NN=N0;id2=0.0;}\n\t\td4=Plane(ps,vec4(N1,1.0));\n\t\tif(d4>d3){d3=d4;NN=N1;id2=9.0;}\n\t\td4=Plane(ps,vec4(N2,1.0));\n\t\tif(d4>d3){d3=d4;NN=N2;id2=18.0;}\n\t\td3=max(d3,p.y-pln_y); //remove rotated\n\t\tif(d3<d1){N=NN;id=id2;p=ps;}\n\t}\n\t\n\tif(N==-up)up=U;\n\tp=p*lookat(N,up);//transform to 2d\n\n\tp.y-=0.707107;\n\tvec2 pt=p.xy*vec2(0.57735,1.0/3.0)*vec2(1.066,1.05);\n\tfloat f=0.24+pt.y;\n\tpt=pt.xx+vec2(f,-f);\n\tvec2 ff=floor(pt);\n\t\n\tif(p.y>0.707107){\n\t\t//id+=0.0;\n\t}else if(p.y>-0.707107){\n\t\tid+=3.0+ff.x+ff.y;\n\t}else{\n\t\tid+=7.0+ff.x+ff.y;\n\t}\n\t\n\tvec3 col=texture(iChannel0,vec2(id+0.5,0.5)/iResolution.xy).rgb;\n\tpt=vec2(0.5)-abs(fract(pt)-vec2(0.5));\n\tf=abs(fract(p.y*0.707107)-0.5);\n\treturn col*smoothstep(0.01,0.04,min(min(pt.x,pt.y),f));\n}\n\nvec3 mytexture(vec3 rd){\n   \trd+=sin(rd.yzx*10.0+iTime+2.4*sin(rd.zxy*9.0+iTime+1.7*sin(rd*7.0+iTime)));\n    return 0.5+0.2*rd;\n}\n\n// Tetrahedral normal from IQ.\nvec3 normal(vec3 p, float e){vec2 v=vec2(-e,e);return normalize(v.yxx*DE(p+v.yxx)+v.xxy*DE(p+v.xxy)+v.xyx*DE(p+v.xyx)+v.yyy*DE(p+v.yyy));}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tsetup();\n\tvec3 ro=vec3(0.0+sin(iTime*0.3)*2.0,sin(iTime*0.4),8.0);\n\tvec3 rd=normalize(vec3((fragCoord-0.5*iResolution.xy)/iResolution.x,1.0));\n\trd=lookat(normalize(vec3(0.0,0.75,0.0)-ro),vec3(0.0,1.0,0.0))*rd;\n\tfloat t=hash12(fragCoord)*DE(ro),d,od=1.0,g=0.0;\n\tfor(int i=0;i<64;i++){\n\t\tt+=d=DE(ro+rd*t);\n\t\tif(d<0.001 || t>12.0)break;\n\t\tod=d;g+=1.0;\n\t}\n\tvec3 col=mytexture(rd).rgb+vec3(0.8,0.4,1.0)*g/64.0;\n\tif(d<0.01){\n\t\tfloat dif=1.0-clamp(d/od,0.0,1.0);\n\t\tcol=Color(ro+rd*t);\n\t\tcol*=dif;\n        vec3 N=normal(ro+rd*t,0.001);\n        vec3 refl=reflect(rd,N),refr=refract(rd,N,1.0/1.5);\n        vec2 IR=vec2(dot(refl,N),dot(refr,-N));\n        IR=(IR-1.5*IR.yx)/(IR+1.5*IR.yx);\n        float fres=dot(IR,IR)/2.0;\n        col+=8.0*col*mytexture(reflect(rd,N)).rgb*fres;\n\t}\n\tfragColor=vec4(col,(d<0.01?0.0:1.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}