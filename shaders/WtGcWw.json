{
    "Shader": {
        "info": {
            "date": "1611088891",
            "description": "wow, less discontinuous than I thought\n\nAlternate visualization of discontinuities for https://www.shadertoy.com/view/WlKcWD",
            "flags": 0,
            "hasliked": 0,
            "id": "WtGcWw",
            "likes": 2,
            "name": "Second polar approximation test",
            "published": 3,
            "tags": [
                "test",
                "polar",
                "approx"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 262
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592654\n\nvec2 fast_polar_1(in vec2 pos) {\n  vec2 rel = abs(pos);\n  float l = length(rel);\n  rel = rel / l;\n  const mat2 poly = mat2(-0.05313198,  1.52184169,\n                         0.02548278, -0.47818779); // note : transposed\n  float angle = dot(vec2(1.0, rel.y), poly * vec2(1.0, rel.x));\n  if (pos.x * pos.y < 0.0) {\n    angle = 3.141592654 - angle;\n  }\n  if (pos.y < 0.0) {\n     angle = angle + 3.141592654;\n  }\n  \n  return vec2(l, angle);\n}\n\nvec2 fast_polar_2(in vec2 pos) {\n  vec2 rel = abs(pos);\n  float l = length(rel);\n  rel = rel / l;\n  const mat3 poly = mat3(-0.02615218,  1.52408152,  0.06801275,\n                         0.06062274, -1.67373931,  0.77403607,\n                         -0.03068766,  1.16883771, -0.74732226\n                    ); // note : transposed\n  float angle = dot(vec3(1.0, rel.y, rel.y * rel.y), poly * vec3(1.0, rel.x, rel.x * rel.x));\n  if (pos.x * pos.y < 0.0) {\n    angle = 3.141592654 - angle;\n  }\n  if (pos.y < 0.0) {\n     angle = angle + 3.141592654;\n  }\n  \n  return vec2(l, angle);\n}\n\nvec2 fast_polar_3(in vec2 pos) {\n  vec2 rel = abs(pos);\n  float l = length(rel);\n  rel = rel / l;\n  const mat4 poly = mat4(-0.01554769,  1.52800768,  0.17473044, -0.12072499,\n                         0.08148376, -3.49823103,  3.93686816, -1.51359643,\n                         -0.11363601,  6.09961648, -9.57827611,  4.39990684,\n                         0.04862359, -3.20708214,  5.6870433 , -2.79976505);\n  float angle = dot(vec4(1.0, rel.y, rel.y * rel.y * vec2(1.0, rel.y)),\n                    poly * \n                    vec4(1.0, rel.x, rel.x * rel.x * vec2(1.0, rel.x)));\n  if (pos.x * pos.y < 0.0) {\n    angle = PI - angle;\n  }\n  if (pos.y < 0.0) {\n     angle = angle + PI;\n  }\n  \n  return vec2(l, angle);\n}\n\nvec2 polar(in vec2 pos) {\n  return vec2(length(pos), mod(atan(pos.y, pos.x), 2.0 * PI));\n}\n\nfloat in_spiral(in vec2 polar) {\n  float diff = mod(20.0 * polar.x - polar.y + PI, 2.0 * PI);\n  return step(diff, 0.1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    vec2 p1 = fast_polar_1(uv);\n    vec2 p2 = fast_polar_2(uv);\n    vec2 p3 = polar(uv);\n    // Time varying pixel color\n    vec3 col = vec3(in_spiral(p1),\n                    in_spiral(p2),\n                    in_spiral(p3));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}