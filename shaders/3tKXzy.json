{
    "Shader": {
        "info": {
            "date": "1583055001",
            "description": "A complement to fizzer's [url]https://www.shadertoy.com/view/3tyXWw[/url]",
            "flags": 16,
            "hasliked": 0,
            "id": "3tKXzy",
            "likes": 6,
            "name": "Snub Hexagonal Tiling",
            "published": 3,
            "tags": [
                "tiling",
                "hexagonal",
                "snub"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 380
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Snub hexagonal tiling plus dual.\n// cf. https://www.shadertoy.com/view/3tyXWw by fizzer\n//\n// <mouse>: translate, or move Wythoff point\n// d: show dual\n// f: show fundamental region\n// m: change mouse mode\n// r: show basic grid regions\n// t: show tiling\n// z: auto zoom\n//\n// Moving the Wythoff point makes the tiling non-uniform and in some\n// positions, the tiling not drawn completely.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst float X = 1.732050808; // sqrt(3)\nconst float Y = 0.577350269; // 1/sqrt(3)\n\nconst mat2 M = 0.5*mat2(1,-X,1,X);\nconst mat2 Minv = Y*mat2(X,X,-1,1);\n\nvec2 reflection(vec2 p, vec2 q, vec2 r) {\n  // reflect p in the line through q and r\n  p -= q;\n  vec2 n = (r-q).yx * vec2(1,-1);\n  p -= 2.0*dot(p,n)*n/dot(n,n);\n  p += q;\n  return p;\n}\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  vec2 pa = p - a;\n  vec2 ba = b - a;\n  float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n  float d = length(pa - ba * h);\n  return d;\n}\n\nfloat line(vec2 p, vec2 a, vec2 b) {\n  vec2 pa = p-a;\n  vec2 ba = b-a;\n  float h = dot(pa,ba)/dot(ba,ba);\n  return length(pa - ba * h);\n}\n\nconst int CHAR_D = 68;\nconst int CHAR_F = 70;\nconst int CHAR_G = 70;\nconst int CHAR_M = 77;\nconst int CHAR_R = 82;\nconst int CHAR_T = 84;\nconst int CHAR_U = 85;\nconst int CHAR_Z = 90; // zooming\n\nbool key(int key) {\n    return texelFetch(iChannel0, ivec2(key,2),0).x != 0.0;\n}\n\nvec3 diagram(vec2 z, float scale) {\n  vec2 z0 = z;\n  z.x += 0.5;\n  z = Minv*z; // Convert to square grid\n  ivec2 index = ivec2(floor(z)); // Remember cell in grid\n  z -= floor(z);\n  z = M*z; // Back to triangles\n\n  // Map to equilateral triangles [(0,0),(1,0),(0.5,0.866)],[(0,0),(1,0),(0.5,-0.866)]\n  z.x -= 0.5;\n  bool inlower = z.y < 0.0; // Point is in lower triangle,\n  if (inlower) z = -z;      // so rotate to upper triangle\n\n  // All patterns have rotational symmetry about triangle centre, so:\n  // map centre of triangle to origin...\n  z.y -= 0.5*Y;\n\n  // ...and reflect in planes of symmetry of triangle\n  const vec2 A = 0.5*(vec2(1,X));  // normalized\n  const vec2 B = 0.5*(vec2(-1,X)); // normalized\n  float ta = dot(z,A);\n  z -= 2.0*max(ta,0.0)*A;\n  float tb = dot(z,B);\n  z -= 2.0*max(tb,0.0)*B;\n  z.y += 0.5*Y;        // Shift origin back to region centre,\n  if ((ta > 0.0) != (tb > 0.0)) z.x = -z.x; // Want even number of reflections\n\n  vec3 col = vec3(1);\n  vec3 col3 = vec3(1,0,0);\n  vec3 col4 = vec3(1,1,0);\n\n  bool inregion = length(z-z0) < 1e-4;\n  \n  scale *= 2.0*X;\n  z *= 2.0*X; // Scale so region is 1 by X\n\n  float pwidth = scale*3.0/iResolution.y;\n  float eps = 0.01;\n  float lwidth0 = 2.0*eps;\n  float lwidth1 = max(lwidth0+pwidth,4.0*eps);\n  float bwidth = max(pwidth,1.0*eps);\n\n  if (!key(CHAR_R)) {\n    float d = min(abs(z.x),z.y);\n    d = min(d,line(abs(z),vec2(0,1),vec2(X,0)));\n    float mfact = smoothstep(-bwidth,bwidth,d);\n    col = mix(col3,col4,(z.x < 0.0 ? mfact : mfact-1.0));\n    if (key(CHAR_F) && !inregion) col = mix(col,0.8*col,mfact);\n  }\n\n  vec2 p = vec2(0.48,0.44); // The snub Wythoff point\n  if (!key(CHAR_M) && iMouse.x > 0.0) {\n    p = iMouse.xy/iResolution.y;\n  }\n\n  // Now reflect p in various lines of symmetry to get the\n  // actually points of the tilings.\n  // This really needs a picture.\n  vec2 p0 = vec2(p.x,-p.y);\n  vec2 p1 = vec2(-p.x,p.y);\n  vec2 p2 = reflection(p,vec2(X,0),vec2(0,1));\n  vec2 p3 = -p2;\n  vec2 p4 = reflection(-p,vec2(-X,0),vec2(0,1));\n  vec2 p5 = reflection(p,vec2(-X,0),vec2(0,1));\n  vec2 p6 = reflection(p,vec2(-X,0),vec2(0,1));\n  vec2 p7 = reflection(p1,vec2(-X,0),vec2(0,1));\n\n  // The centre point of various triangles.\n  // This needs a picture as well.\n  vec2 t1 = (p0+p1+p2)/3.0;\n  vec2 t2 = (p0+p1+p3)/3.0;\n  vec2 t3 = (p1+p2+p6)/3.0;\n  vec2 t4 = -(-t1-vec2(-X,0))+vec2(-X,0);\n  vec2 t5 = (p1+p4+p6)/3.0;\n  vec2 t6 = -(t5-vec2(-X,0))+vec2(-X,0);\n\n  // Draw the lines. We have to draw all the lines that\n  // intersect with the fundamental region - there are\n  // quite a few, some of which only have a few pixels\n  // in common.\n  vec3 col1 = vec3(0.2);\n  vec3 col2 = vec3(0.8);\n\n  // Dual edges\n  if (!key(CHAR_D)) {\n    float d = 1e8;\n    d = min(d,segment(z,t1,t2));\n    d = min(d,segment(z,t1,vec2(X,0)));\n    d = min(d,segment(z,t1,t3));\n    d = min(d,segment(z,t1,t3));\n    d = min(d,segment(z,-t1,t4));\n    d = min(d,segment(z,-t1,t4));\n    //d = min(d,segment(z,t5,t6));\n    d = min(d,segment(z,p7,t3));\n    //d = min(d,segment(z,p7,-p7));\n    col = mix(col2,col,smoothstep(lwidth0,lwidth1,d));\n  }\n  \n  // Main tiling edges\n  if (!key(CHAR_T)) {\n    float d = 1e8;\n    d = min(d,segment(z,p0,p1));\n    d = min(d,segment(z,p1,p2));\n    d = min(d,segment(z,p2,p0));\n    d = min(d,segment(z,p1,p3));\n    d = min(d,segment(z,p1,p4));\n    d = min(d,segment(z,p1,p5));\n    col = mix(col1,col,smoothstep(lwidth0,lwidth1,d));\n  }\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord ) {\n  vec2 z = (2.0*fragCoord-iResolution.xy+0.123)/iResolution.y;\n  float scale = 1.0;\n  if (key(CHAR_Z)) scale = exp(2.0*sin(iTime));\n  z *= scale;\n  if (key(CHAR_M) && iMouse.x > 0.0) {\n    z -= (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n  }\n  vec3 col = diagram(z,scale);\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}