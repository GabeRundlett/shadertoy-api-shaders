{
    "Shader": {
        "info": {
            "date": "1678890369",
            "description": "Combination of a bunch of fun stuff, this is gonna be used as the background for my website (once I get the rest of the website working, that is). This version uses the pebbles instead of a different noise texture but I think it looks nice too",
            "flags": 0,
            "hasliked": 0,
            "id": "mdy3Rm",
            "likes": 10,
            "name": "Pixel Starry Sky",
            "published": 3,
            "tags": [
                "space",
                "stars"
            ],
            "usePreview": 1,
            "username": "spacecat",
            "viewed": 268
        },
        "renderpass": [
            {
                "code": "// Set to 0 for dark colors, 1 for light colors\n#define u_lightTheme 0\n\n#define u_time (iTime * 1000.0)\n#define u_canvasSize iResolution.xy\n#define u_noise iChannel0\n\n\n/* ----------------- *\n * Utility functions *\n * ----------------- */\n\nvec2 rotate2D(vec2 p, float angle)\n{\n    mat2 m = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    return p * m;\n}\n\n// Hash functions by David Hoskins https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat sdCircle(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\n\n/* ------------------- *\n * Rendering functions *\n * ------------------- */\n\n/* SDF for a rounded star shape */\nfloat sdStar(vec2 p, float r)\n{\n    // The shape is essentially made up of segments of four circles\n    // where each circle has radius r and center at (r,r), (r,-r), (-r,r) or (-r,-r)\n    // The shape is symmetrical along 8 axes which allows for some simplifications\n    \n    p = abs(p); // Symmetry along x and y\n    if (p.x > p.y) p.xy = p.yx; // Symmetry along diagonals\n    \n    if (p.y <= r) {\n        // Closest point is somewhere on the circle segment\n        // (but interior/exterior is flipped)\n        return -sdCircle(p - vec2(r), r);\n    } else {\n        // Closest point is (0,r)\n        return distance(p, vec2(0.0, r));\n    }\n}\n\n/* Randomly positioned and colored, rotating star based on tile ID */\nvec3 animatedStar(vec2 p, vec2 id)\n{\n    float h = hash12(id);\n    \n    // Random position and rotation\n    p += h - 0.5;\n    float angle = u_time * 0.005 * (h * 2.0 - 1.75);\n    p = rotate2D(p, angle);\n    \n    float star = sdStar(p, h - 0.5);\n    \n    // Vary size over time\n    float t = sin(u_time * 0.001 * (h + 0.5) + h * 16.0 - 8.0) * 0.2 - 0.2;\n    float hard = 1.0 - step(t, star);\n    float soft = smoothstep(t + 0.1, t - 0.3, star);\n    \n    vec3 color;\n    if (u_lightTheme == 0) {\n        // Mostly random color\n        color = clamp(vec3(0.0), vec3(1.0),\n            vec3(h + 0.2, hash12(id + 1.0) + 0.2, hash12(id + 2.0) + 0.2));\n    } else {\n        // Looks better with light theme if it's less random\n        color = vec3(0.0, 0.3, h * 5.0 - 4.6);\n    }\n    color *= hard + soft;\n    \n    return color;\n}\n\n/* Tile the plane and place a star in each tile */\nvec3 starField(in vec2 uv)\n{\n    uv *= 6.0;\n    \n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n\n    vec3 col = vec3(0.0);\n    \n    // The star might overflow into the adjacent tiles,\n    // so we need to consider the neighbours as well\n    for (int x = -1; x <= 1; ++x)\n    {\n        for (int y = -1; y <= 1; ++y)\n        {\n            col += animatedStar(f - vec2(x,y), i + vec2(x,y));\n        }\n    }\n    \n    return clamp(col, vec3(0.0), vec3(1.0));\n}\n\n/* Make clouds from noise texture using fractional Brownian motion */\nfloat fbmClouds(vec2 p)\n{\n    float f = 0.0;\n\n    for (int i = 0; i < 3; ++i)\n    {\n        // Vary direction, scale and speed at each layer\n        float t = u_time * float(i) * 0.00001;\n        vec2 direction = normalize(vec2(sin(float(i) * 0.8432 - 0.1) * -0.01,\n                                        cos(float(i) * 0.2489 - 0.8425) * -0.1));\n        float scale = float(i + 1) * 0.6;\n\n        float noise = texture(u_noise, fract((p + direction * t) * scale)).r;\n\n        f += noise * 0.5;\n    }\n\n    // Bias towards bottom of screen\n    f *= 1.0 - p.y;\n\n    // Two steps\n    f = step(0.55, f) * 0.5 + step(0.74, f);\n\n    return f;\n}\n\n\n/* ------------- *\n * Main function *\n * ------------- */\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Pixelate by making neighbouring pixels equal\n    vec2 pixelatedCoord = floor(fragCoord.xy / 4.0) * 4.0;\n\n    // Initialize color\n    vec3 col = vec3(0.0);\n\n    // UV for the stars is not normalized with canvas size\n    // This ensures they don't get too small\n    vec2 starsUV = pixelatedCoord * 0.001;\n    \n    // Two layers of stars\n    for (int i = 0; i < 2; ++i)\n    {\n        starsUV *= 1.5;\n        //starsUV += hash11(float(i));\n        starsUV += 0.37258;\n\n        float movement = u_time * 0.00001 * float(i + 1);\n        float magnitude = 1.0 / float((i + 1) * (i + 1));\n\n        col += starField(starsUV + vec2(movement, 0.0)) * magnitude;\n    }\n\n    // UV for the clouds is normalized and aspect ratio corrected\n    vec2 cloudsUV = pixelatedCoord / u_canvasSize.xy; \n    cloudsUV.x *= u_canvasSize.x / u_canvasSize.y;\n\n    // Reduce star visibility towards bottom of screen\n    // to not interfere with the clouds too much\n    col = clamp(col - max(0.5 - cloudsUV.y, 0.0), 0.0, 1.0);\n\n    // Add the clouds\n    float noise = fbmClouds(cloudsUV + vec2(0.35, 0.05));\n    col = mix(col, vec3(0.3, 0.4, 0.5), noise);\n\n    // Theme-based colors to interpolate between\n    vec3 colorA = u_lightTheme == 0\n            ? vec3(0.0, 0.03, 0.05)\n            : vec3(1.0, 0.85, 0.9);\n    vec3 colorB = u_lightTheme == 0\n            ? vec3(0.8, 0.9, 0.9)\n            : vec3(0.15, 0.0, 0.2);     \n    col = mix(colorA, colorB, col); // does each channel individually\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}