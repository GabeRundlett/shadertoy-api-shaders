{
    "Shader": {
        "info": {
            "date": "1573388870",
            "description": "I implemented powers of complex numbers and visualized a 100-degree equation.\nNever expected this result.",
            "flags": 0,
            "hasliked": 0,
            "id": "tdyXzh",
            "likes": 2,
            "name": "Stellar window",
            "published": 3,
            "tags": [
                "math",
                "mathematics"
            ],
            "usePreview": 0,
            "username": "Kanata",
            "viewed": 374
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 u )\n{\n    vec2 res = iResolution.xy,\n          z = ( u* 2. - res) / min(res.x, res.y);\n\n    float t = iTime;\n    float scale = 2.;\n    z *= scale;\n    \n    vec2 a = vec2(sin(t), cos(t));\n    vec2 b = vec2(1., 0.);\n    vec2 c = vec2(0., 1.);\n    vec2 d = vec2(1., 0.);\n    vec2 e = vec2(sin(t* 0.83), cos(t* 0.83));\n    \n    \n    float p = length(cpow(z, 100) + cmul(a, cpow(z, 4)) + cmul(b, cpow(z, 3))\n                     + cmul(c, cpow(z, 2)) + cmul(d, cpow(z, 1)) + e);\n    \n    O = vec4(vec3(0.2 / p), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 cmul(in vec2 a, in vec2 b) {\n\treturn vec2(a.x * b.x - a.y * b.y, a.y * b.x + a.x * b.y);\n}\n\nvec2 cpow(in vec2 a, in int n) {\n    vec2 z = a;\n    for (int i = 1; i < n; i++) {\n        z = cmul(z, a);\n    }\n    return z;\n}\n        ",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}