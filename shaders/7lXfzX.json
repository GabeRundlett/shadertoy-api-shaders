{
    "Shader": {
        "info": {
            "date": "1651197173",
            "description": "basic landscape 2d v2",
            "flags": 0,
            "hasliked": 0,
            "id": "7lXfzX",
            "likes": 9,
            "name": "basic landscape 2d v2",
            "published": 3,
            "tags": [
                "2d",
                "basic",
                "landscape"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 227
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2...JFP\n//basic landscape 2d v2 ----------->>>-28-abril-2022\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(8.0*antialiasing(2.0),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\n\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nvec2 rotate(vec2 v, float angle)\n{\n\treturn vec2(v.x * cos(angle) + v.y * sin(angle),\n\t\t    v.y * cos(angle) + v.x * sin(angle));\n}\n\nvec3 PisoOnda(vec2 uv,vec3 colIn, vec3 colOut )\n{   float y=uv.y + sin(uv.x*5.)*0.1;\n    vec3 col= DrawFigBorde(colIn, colOut, y);\n    return col;\n}\n\nfloat PisoOnda(vec2 uv )\n{   float y=uv.y + sin(uv.x*5.)*0.1;\n    return y;\n}\n\nvec3 PisoPlano(vec2 uv,vec3 colIn, vec3 colOut )\n{   float y= uv.y+ 1.0;\n    vec3 col= DrawFigBorde(colIn-(0.5+uv.y/8.0), colOut, y);\n    return col;\n}\n\nvec3 PisoPlanoIzq(vec2 uv,vec3 colIn, vec3 colOut )\n{   float y= uv.y+uv.x+1.0;\n    vec3 col= DrawFigBorde(colIn, colOut, y);\n    return col;\n}\n\nvec3 PisoPlanoDer(vec2 uv,vec3 colIn, vec3 colOut )\n{   float y= uv.y-uv.x+1.0;\n    vec3 col= DrawFigBorde(colIn, colOut, y);\n    return col;\n}\n\nfloat PisoPlanoIzqFl(vec2 uv )\n{   //float y= uv.y+uv.x+1.0;\n     float onda= uv.y+uv.x+sin(uv.x*10.)*0.2; \n     float y=onda;\n    return y;\n}\n\nfloat PisoPlanoDerFl(vec2 uv)\n{   //float y= uv.y-uv.x+1.0;\n    float onda= uv.y-uv.x+sin(uv.x*10.0)*0.2;\n    float y=onda;\n    return y;\n}\n\nvec3 PisoPlanoLinea(vec2 uv,vec3 colIn, vec3 colOut )\n{   float y1= uv.y+ 0.25;\n    float y2= uv.y- 0.25;\n    float dif= differenceSDF(y2,y1);\n    vec3 col= DrawFigBorde(colIn, colOut, dif);\n    return col;\n}\n\nvec3 HacerCascada(vec2 uv, vec3 colOut)\n{   float t=iTime*10.0;\n    uv.y= opRep1D(uv.y, 1.0 );\n    uv.y -= sin(uv.x*5.+t)*0.2;\n    float p1=uv.y-0.1;\n    float p2=uv.y+0.2;\n    float dif= differenceSDF(p1, p2);\n    vec3 col= DrawFigBorde(vec3(0.2,0.2,0.8), colOut, dif);\n    return col;\n}\n\nfloat HacerCascadaFlo(vec2 uv)\n{   float t=0.0;\n    uv.y= opRep1D(uv.y, 1.0 );\n    uv.y -= sin(uv.x*5.)*0.2+t;\n    float p1=uv.y-0.1;\n    float p2=uv.y+0.2;\n    float dif= differenceSDF(p1, p2);\n    return dif;\n}\n\nvec3 HacerCascadaTriangulo(vec2 uv, vec3 colOut)\n{   float t=iTime*10.0;\n    vec2 uv0=uv;\n    float dif= HacerCascadaFlo(uv+vec2(0.0+0.125*sin(t*20.0),t));\n    \n    float d1= PisoPlanoIzqFl(vec2(uv0.x, -uv0.y+5.0));\n    float d2= PisoPlanoDerFl(vec2(uv0.x, -uv0.y+5.0));\n    float d3= uv.y-10.0;\n    float uni= unionSDF(d1, d2);  //inclinados\n    float inter= differenceSDF(d3,uni);  //\n    dif= differenceSDF(dif,uni);\n    vec3 col= DrawFigBorde(vec3(1.0), colOut, inter);\n    col= DrawFigBorde(vec3(0.2,0.0,1.0), col, dif);\n    return col;\n}\n\nvec3 CascadaBloque(vec2 uv, vec3 colOut)\n{   float d1= sdBox(uv,vec2(3.0,5.0) ); //grande\n    float d2= sdBox(uv,vec2(2.5,4.5) ); //chico\n    float dif1= differenceSDF(d1, d2);\n    float t=iTime;\n    float d3=HacerCascadaFlo(uv+vec2(0.0+0.125*sin(t*20.0),t));\n    float dif2= intersectSDF(d3,d2);    \n    vec3 col= DrawFigBorde(vec3(1.0), colOut, d2);\n    col= DrawFigBorde(vec3(0.0), col, dif1);    \n    col= DrawFigBorde(vec3(0.2,0.2,0.8), col, dif2);\n    return col;\n}\n\nvec3 nubes(vec2 uv, vec3 colOut)\n{   vec3 col;\n    float d1,d2,d3;\n     d1= sdCircle(uv, 1.0 );\n     d2= sdCircle(uv-vec2(1.5,0.0), 1.5 );\n     d3= sdCircle(uv-vec2(3.0,-0.25), 1.2 );\n     float duni= unionSDF(d1, d2);\n     duni= unionSDF(duni,d3);\n     col= DrawFigBorde(vec3(1.0), colOut, duni);\n     return col;\n}\n    \nvec3 Hacermonte(vec2 uv,vec3 colIn, vec3 colOut)\n{   float x=uv.x;\n    float xx=x+2.0*cos(x*0.5);\n    float fx2=3.0*sin(xx*0.5)/xx;\n    float monte=uv.y+fx2;\n    vec3 col= DrawFigBorde(colIn, colOut, monte); //cafe\n    return col;\n}\n\nvec3 BloqueSimple(vec2 uv, vec3 colOut)\n{   float d1= sdBox(uv-vec2(0.0,2.5),vec2(2.5,0.5) ); //grande sup\n    float d2= sdBox(uv,vec2(2.0,3.0) ); //grande inf\n    float d3= PisoOnda(uv-vec2(0.0,2.5));\n    d1= differenceSDF(d1,d3);\n    vec3 col;\n    col= DrawFigBorde(vec3(0.6,1.2,0.3)*0.8-(uv.x/7.0), colOut, d2); \n    col= DrawFigBorde(vec3(0.8,0.2,0.3)*0.8-(uv.x/8.0), col, d1); \n    return col;\n}\n\n\nvec3 Hacermontev2(vec2 uv,vec3 colIn, vec3 colOut)\n{   float x=uv.x;\n    float xx=x+cos(x*0.25);\n    float fx2=3.0*sin(xx+cos(xx*1.5));\n    float monte=uv.y+fx2;\n    vec3 col= DrawFigBorde(colIn-(-0.12+uv.y/8.0), colOut, monte); //cafe\n    return col;\n}\n\n\nfloat starPattern(vec2 p)\n{\n\treturn 0.1 / (abs(cos(p.x)) + 0.01) * 0.1 / (abs(sin(p.y)) + 0.01) * abs(sin(p.x)) * abs(cos(p.y));\n}\n\nvec3 stars(vec2 p)\n{\n\tp -= 0.5;\n\n\tfloat a = starPattern(rotate(p * 26.0, 0.1)) * max(0.0, 1.3 + cos(p.x + iTime)) +\n\t\tstarPattern(rotate(p * 50.0, 0.2)) * max(0.0, 1.2 + cos(p.x * 0.4 + iTime * 2.0));\n\n\treturn vec3(a * 0.1 * (1.0 + (2.0 + sin(iTime * 30.0)) * 0.2));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.5);\n    float t=iTime;\n    //float t0=mod(t,15.0);\n    \n    vec3 col=vec3(0.0,0.1,0.8)+stars(uv*0.5);\n    \n    \n    \n    uv.x+=t;\n    uv.x= opRep1D(uv.x, 5.0 );\n    float esc=8.0;\n    uv*=esc;\n    \n    float trep=t*0.25;\n    vec2 uv0=uv;\n    float mu=2.5;\n    uv.y+=mu*sin(t*0.25);\n    \n    col= Hacermonte(uv-vec2(0.0,10.0),vec3(0.7,0.35,0.2), col);\n    col= Hacermonte(uv-vec2(10.0,8.0),vec3(0.7,0.35,0.2)*0.8, col);\n    col= Hacermontev2(uv-vec2(5.0,4.0),vec3(0.7,0.35,0.2)*0.6, col);\n    \n    col= HacerCascadaTriangulo(uv-vec2(0.0,3.0),col);\n    uv=uv0;\n    uv.y-=4.0+1.0*sin(t*0.125);\n    uv.x= opRep1D(uv.x+t, 20.0 );\n    col= nubes(uv-vec2(4.0,7.0),col);\n    col= nubes(uv-vec2(-8.0,5.0),col);\n    uv=uv0;\n    uv.y+=mu*sin(t*0.25);\n    \n    col= PisoOnda(uv+vec2(0.0,-0.2),vec3(0.0),col); //pasto\n    col= PisoOnda(uv,vec3(0.2,0.8,0.2),col); //pasto\n    col= PisoPlano(uv,vec3(0.1,0.46,0.2), col );\n    col= PisoPlanoLinea(uv-vec2(0.0,-0.8),vec3(0.5,0.4,0.3), col);\n            \n    col= BloqueSimple(uv-vec2(10.0,2.0),col);\n    \n    col=pow(col,  vec3(0.554545));\n    fragColor = vec4(col,1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}