{
    "Shader": {
        "info": {
            "date": "1700091803",
            "description": "simple wave height map generator mixed with a bump map creates this nifty water effect\nmouse to see other render passes ",
            "flags": 2,
            "hasliked": 0,
            "id": "DtyyDz",
            "likes": 1,
            "name": "additive ocean wave",
            "published": 3,
            "tags": [
                "wave",
                "water",
                "ocean",
                "additive"
            ],
            "usePreview": 1,
            "username": "aerowave",
            "viewed": 290
        },
        "renderpass": [
            {
                "code": "// this wave shader is based on a diagram i saw somewhere (i forget where)\n// this is the closest thing i could find to it:\n// https://confluence.ecmwf.int/download/attachments/340775481/Fig2.2.2A%20Decomposition%20of%20ocean%20waves%202D.png\n\n\nint waveCount = 50;\nfloat scale = 20.0;\n\nconst float PI = 3.14159265359;\n\n\n// code from https://stackoverflow.com/a/4275343\nfloat rand(vec2 co) {\n    return fract(sin(dot(co + 53.2352, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// one wave cycle is t=0 --> t=1\n// returns float 0-1\nfloat waveShape(float t) {\n    //return t; // sawtooth wave, function input\n    return sin(t * 2.0 * PI) * 0.5 + 0.5; // sine wave\n    //return 1.0 - abs(sin(t * 2.0 * PI)); // sharp sine\n}\n\n\nfloat getHeight(vec2 uv) {\n    float height = 0.0;\n    for (int i = 0; i < waveCount; i++) {\n        // wave attributes\n        float dir = rand(vec2(i, i)) * 2.0 * PI;\n        float offset = rand(vec2(i, -i));\n        float width = rand(vec2(-i, i));\n        \n        // apply wave attributes\n        float propagation = (cos(dir) * uv.x + sin(dir) * uv.y) * scale;\n        propagation *= width;\n        propagation += offset;\n    \n        // get the wave\n        height += waveShape(mod(propagation + iTime, 1.0));\n    }\n    \n    return height / float(waveCount);\n}\n\n\n// code from https://www.shadertoy.com/view/MsScRt\nvec4 bumpFromDepth(vec2 uv, vec2 resolution, float scale) {\n  vec2 step = 1. / resolution;\n    \n  float height = getHeight(uv);\n    \n  vec2 dxy = height - vec2(\n      getHeight(uv + vec2(step.x, 0.)), \n      getHeight(uv + vec2(0., step.y))\n  );\n    \n  return vec4(normalize(vec3(dxy * scale / step, 1.)), height);\n}\n\n\n\n\n// le main\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    // square resolution divider\n    float res = max(iResolution.x, iResolution.y);\n    \n    // calculated wave normal\n    vec4 normal = bumpFromDepth(fragCoord.xy/res, vec2(res), .1);\n    \n    // Image split (mouse controlled)\n    if (fragCoord.x > iMouse.x) {\n        uv += normal.rg * 0.05;\n        if (fragCoord.y > iMouse.y) {\n            // final image\n            fragColor = texture(iChannel0, uv);\n        } else {\n            // distorted image coordinates\n            fragColor = vec4(uv, 1.0, 1.0);\n        }\n    } else {\n        if (fragCoord.y > iMouse.y) {\n            // height map\n            fragColor = vec4(vec3(getHeight(fragCoord.xy/res)), 1.0);\n        } else {\n            // normal map\n            fragColor = vec4(normal.rgb * 0.5 + 0.5, 1.0);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}