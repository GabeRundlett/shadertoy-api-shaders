{
    "Shader": {
        "info": {
            "date": "1691158295",
            "description": "solving the inverse of a spline:  in green, x = invspline( y samples ).\nCompulsory to produce the yellow dots, for instance.",
            "flags": 0,
            "hasliked": 0,
            "id": "clXyWj",
            "likes": 8,
            "name": "inverse spline",
            "published": 3,
            "tags": [
                "spline",
                "inverse"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 210
        },
        "renderpass": [
            {
                "code": "// more complexe variant  h.spline + (1-h).x → here: https://www.shadertoy.com/view/DlByz1\n\n#define S(v)      smoothstep( 1.5, 0., abs(v)/fwidth(v) )\n#define dot(x,y)  smoothstep( 3./R.y, 0.,length(U-vec2(x,y)) - 5./R.y )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy,\n          U = ( 2.*u - R ) / R.y;\n \n    float y = U.y, x = U.x,  R3 = sqrt(3.),\n          a = 1. -2.*y, b = 2.*sqrt(y*(1.-y)), /* l = pow(a*a+b*b,1./6.),*/ A = atan(b,a)/3., // https://www.wolframalpha.com/input?i=solve%28y%3Dx*x*%283-2*x%29%2C+x%29\n                                               // hey,l = 1 !\n/*       X1 = (  (l+1./l)* cos(A)                        + 1. ) / 2.,\n         X2 = ( -(l+1./l)* cos(A) + R3* (l+1./l)*sin(A)  + 2. ) / 4.,   // ← the interesting one\n         X3 = ( -(l+1./l)* cos(A) - R3* (l+1./l)*sin(A)  + 2. ) / 4.;\n*/       X1 =     cos(A)               + .5,\n         X2 = ( - cos(A) + R3* sin(A)  + 1. ) / 2.,   // ← the interesting one\n         X3 = ( - cos(A) - R3* sin(A)  + 1. ) / 2.;\n\n    O = vec4( S( U.y - x*x*(3.-2.*x) ) * step( 1., mod(u.x/4.,2.) ) ) ; // dashed spline\n    if ( y*(1.-y) > 0. )          \n      O += vec4( S(U.x-X1 ) ,  S(U.x-X2 ), S(U.x-X3 ), 1 );             // R,G,B = 3 solutions\n      \n    // --- example of uses -------------------------------  \n/*\n#define invspline(y) ( a = 1. -2.*y, b = 2.*sqrt(y*(1.-y)), l = pow(a*a+b*b,1./6.), A = atan(b,a)/3., \\\n                       ( -(l+1./l)*cos(A) + 2.*R3*l*sin(A)  + 2. ) / 4.                               \\\n                     ) */\n#define invspline(y) ( a = 1. -2.*y, b = 2.*sqrt(y*(1.-y)), A = atan(b,a)/3., \\\n                       ( -cos(A) + R3*sin(A)  + 1. ) / 2.                     \\\n                     )\n\n    float t = iTime;\n\n    U.y += .2;                                                      // --- direct draw y=spline(x)\n    x = U.x;\n    x = round(x*20.-t)/20. +t/20.;                                  // steps\n    y =  x*x*(3.-2.*x);                                             // spline\n    if ( x*(1.-x) > 0. )\n      O.r += dot(x,y);                                              // dot every dx steps\n\n\n    U.y += .2;                                                      // --- inverse draw x=invspline(y)\n    y = U.y, y = round(y*20.-t)/20. +t/20.;                         // steps\n    x = invspline(y);\n    if ( y*(1.-y) > 0. )\n      O.g += dot(x,y);                                              // dot every dy steps\n\n\n    y = U.y -= .2;                                                  // --- same, using x as simple parameterization \n    x = invspline(y);\n    \n    x = round(x*20.-t)/20. +t/20.;                                  // redo the steps and spline()\n    y =  x*x*(3.-2.*x);                                             // spline\n    if ( x*(1.-x) > 0. )\n      O.rg += dot(-1.,y);                                           // free to remap to anything, e.g. vertical line\n    R.y*=3.; if ( U.x>-1. && U.x<x ) O.rg += dot(U.x,y)*.2;         // horizontal lines                     \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}