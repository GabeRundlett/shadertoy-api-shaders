{
    "Shader": {
        "info": {
            "date": "1720313207",
            "description": "Comparing a simple circular particle overlap solve against one with front/back info (e.g. matching how the particles face each other at time step start). Set INFINITE_MASS_AT_CENTER to true to better see how this \"mirror type\" works.",
            "flags": 0,
            "hasliked": 0,
            "id": "lXKXRc",
            "likes": 1,
            "name": "Contact solve (mirror type)",
            "published": 3,
            "tags": [
                "collision",
                "physics",
                "resolution"
            ],
            "usePreview": 0,
            "username": "Mytino",
            "viewed": 92
        },
        "renderpass": [
            {
                "code": "#define INFINITE_MASS_AT_CENTER (true)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.4);\n    vec2 uv = fragCoord / iResolution.x;\n    vec2 uv2 = mod(uv, vec2(0.5, 1.0));\n    vec4 m = iMouse / iResolution.x;\n    vec4 m2 = mod(m, vec4(0.5, 1.0, 0.5, 1.0));\n    float r = 0.1;\n    \n    vec2 pos = vec2(m2.xy); // Self particle\n    vec2 pos_j = vec2(0.25, 0.28); // Neighbor particle\n    \n    if (length(pos - uv2) < r) col = vec3(0.9, 0.7, 0.7);\n    if (length(pos_j - uv2) < r) col = vec3(0.7, 0.85, 0.7);\n    if (length(pos - uv2) < r && length(pos_j - uv2) < r) col = vec3(1.0, 0.9, 0.5);\n    \n    {\n        // Inverse masses\n        float w = 1.0 / 1.0;\n        float w_j = INFINITE_MASS_AT_CENTER ? 0.0 : 1.0 / 1.0;\n    \n        float restDist = r * 2.0;\n        vec2 pos_ij = pos - pos_j;\n        vec2 normal = normalize(pos_ij);\n        float depth = restDist - length(pos_ij);\n        vec2 displacement = normal * depth / (w + w_j);\n        vec2 newPos = pos + displacement * w;\n        vec2 newPos_j = pos_j - displacement * w_j;\n\n        // Outlines show resolution state.\n        float gap = 0.005;\n        bool intersection = depth > 0.0;\n        if (uv.x < 0.495 && intersection && length(newPos - uv) < r && length(newPos - uv) > r - gap) col = vec3(1.0, 0.4, 0.4);\n        if (uv.x < 0.495 && intersection && length(newPos_j - uv) < r && length(newPos_j - uv) > r - gap) col = vec3(0.4, 1.0, 0.4);\n    }\n    \n    {\n        // Inverse masses\n        float w = 1.0 / 1.0;\n        float w_j = INFINITE_MASS_AT_CENTER ? 0.0 : 1.0 / 1.0;\n    \n        vec2 m3 = abs(m.zw);\n        vec2 m4 = mod(m3, vec2(0.5, 1.0));\n        vec2 normal2 = normalize(m4.xy - pos_j);\n    \n        float restDist = r * 2.0;\n        vec2 pos_ij = pos - pos_j;\n        vec2 normal = normalize(pos_ij);\n        float depth = restDist - dot(pos_ij, normal);\n        vec2 displacement = normal * depth / (w + w_j);\n        if (dot(pos_ij, normal2) < 0.0) {\n            vec2 pos_ij_resolved = normal * restDist;\n            displacement -= dot(pos_ij_resolved, normal2) * normal2 * 2.0 / (w + w_j);\n        }\n        vec2 newPos = pos + displacement * w;\n        vec2 newPos_j = pos_j - displacement * w_j;\n        \n        // Darken the backside hemisphere\n        if (uv.x > 0.505 && length(pos - uv2) < r) {\n            if (dot(uv2 - pos, normal2) > 0.0) col *= 0.8;\n        }\n        if (uv.x > 0.505 && length(pos_j - uv2) < r) {\n            if (dot(uv2 - pos_j, normal2) < 0.0) col *= 0.8;\n        }\n\n        // Outlines show resolution state.\n        float gap = 0.005;\n        bool intersection = depth > 0.0;\n        if (uv.x > 0.505 && intersection && length(newPos - uv2) < r && length(newPos - uv2) > r - gap) col = vec3(1.0, 0.4, 0.4);\n        if (uv.x > 0.505 && intersection && length(newPos_j - uv2) < r && length(newPos_j - uv2) > r - gap) col = vec3(0.4, 1.0, 0.4);\n    }\n    \n    if (uv.x > 0.495 && uv.x < 0.505) { col = vec3(0.8); }\n \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}