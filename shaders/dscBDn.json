{
    "Shader": {
        "info": {
            "date": "1697103856",
            "description": "Fluid Lava Lamp",
            "flags": 0,
            "hasliked": 0,
            "id": "dscBDn",
            "likes": 4,
            "name": "Fluid Lava Lamp",
            "published": 3,
            "tags": [
                "fluid",
                "lava",
                "lamp"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 271
        },
        "renderpass": [
            {
                "code": "const float SMOOTHNESS = 0.5;\nconst vec3 BLOB_COL_BASE = vec3(1.0, 0.11, 0.8);\nconst vec3 BLOB_COL_GLOW = vec3(1.0, 0.9, 0.0);\nconst float ROWS = 6.0;\n\nconst float RND[30] = float[30](0.2884, 0.3388, 0.5121, 0.8102, 0.5609, 0.6835, 0.0417, 0.3324, 0.0942, 0.9385, 0.4919, 0.9025, 0.4005, 0.1238, 0.3975, 0.5206, 0.6451, 0.2493, 0.3134, 0.6284, 0.6825, 0.2130, 0.4290, 0.5830, 0.2942, 0.3272, 0.3090, 0.1650, 0.6657, 0.5425);\n\nfloat smin(float a, float b, float k) {\n    float h = max(k - abs(a - b), 0.0);\n    return min(a, b) - h * h / k * 0.25;\n}\n\nvec4 perm(vec4 x) { x *= x * 34.0 + 1.0; return x - floor(x / 289.0) * 289.0; }\n\nfloat noise(vec3 p) {\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0, 1, 0, 1);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.z;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * 0.02439024);\n    vec4 o2 = fract(k4 * 0.02439024);\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat hash11(float p) {\n    p = fract(p * 0.1031);\n    p *= p + 33.33;\n    return fract(p * p * 2.0);\n}\n\nfloat noise1d(float p)  {\n\tfloat fl = floor(p);\n\tfloat fc = fract(p);\n\treturn mix(hash11(fl), hash11(fl + 1.0), fc);\n}\n\nfloat blob(vec2 uv, float n, float i) { \n    float r = noise1d(i + iTime * 0.1) * 1.2 + 0.4 * max(iResolution.x / iResolution.y, iResolution.y / iResolution.x);    \n    float t = fract((iTime * 0.02 + i * 84.7291) / (1.0 + RND[int(i + ROWS)]));\n    vec2 pos = vec2(i * max(1.0, iResolution.x / iResolution.y) * 0.8, \n                   (smoothstep(0.0, 0.4, t) * smoothstep(0.8, 0.5, t) * 2.0 - 1.0) * (ROWS - 1.0) * iResolution.y / min(iResolution.x, iResolution.y));\n    return length(uv - pos + n) - r;\n}\n\nfloat sdf(vec2 uv, float n) {\n    float d = 9999.9;\n    for (float i = -ROWS; i <= ROWS; ++i) {\n        d = smin(d, blob(uv, n, i), SMOOTHNESS);\n    }\n    return d;\n}\n\nfloat specular(vec3 light_dir, vec3 normal) {\n    vec3 halfway = normalize(light_dir + vec3(0, 0, -3));\n    float s = dot(normal, halfway);\n    s *= s * s;\n    return s * s;\n}\n\nvec3 getNormal(vec2 uv, float d, float n) {\n    vec2 e = vec2(12, 0);\n    float nx = d - sdf(uv + e.xy, n);\n    float ny = d - sdf(uv + e.yx, n);\n    return normalize(vec3(nx, ny, e.x * 2.0));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    float min_res = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / min_res * ROWS;\n    \n    float n2 = noise(vec3((fragCoord * 2.0 - iResolution.xy) / min_res * 5.0, iTime * 0.1) * 0.7) * 0.7;\n    float d = sdf(uv, n2); \n    vec3 background = BLOB_COL_BASE * 1.0 / (6.0 + d);\n    if (d > 0.0) {\n        fragColor = vec4(background, 1);\n        return;\n    }\n    vec3 n = getNormal(uv, d, n2);\n    float m = smoothstep(0.0, -16.0 / min_res, d);\n    vec3 uvn = normalize(vec3(uv, 3));\n    float spec = max(0.0, uvn.y) * specular(vec3(uvn.x, -3, 0), n);\n    spec += min(1.0, 1.0 - uvn.y) * specular(vec3(uvn.x, 3, 0), n);\n    spec /= (spec + 3.0) * 0.2;\n\n    vec3 col = spec * spec * (BLOB_COL_GLOW * 0.3 + 0.7) + mix(BLOB_COL_BASE, BLOB_COL_GLOW, spec);\n    col -= max(0.0, 1.0 - sqrt(sqrt(-d))) * 0.7;\n    fragColor = vec4(mix(background, col, m), 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}