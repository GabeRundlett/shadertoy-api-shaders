{
    "Shader": {
        "info": {
            "date": "1600856107",
            "description": "based on a idea from fusha",
            "flags": 32,
            "hasliked": 0,
            "id": "WsdyD8",
            "likes": 5,
            "name": "pathtraced fractal test",
            "published": 3,
            "tags": [
                "fractal",
                "shadow",
                "volumetric",
                "pathtracing"
            ],
            "usePreview": 0,
            "username": "Cewein",
            "viewed": 493
        },
        "renderpass": [
            {
                "code": "// Shader made by Maximilien \"cewein\" Nowak, september 2020\n//\n// This is a path traced fractal with real indirect ligthing\n// the fractal is render with ray marching and then the color\n// found for the given pixel is accumuleted in the texture buffer\n//\n// main help came from here : \n// https://iquilezles.org/articles/simplepathtracing\n//\n// \t\t\t\t\t\t\tYOU CAN MOVE IN THE SCENE WITH YOU MOUSE\n//\n// \tCHECK BUFFER A FOR MOR INFORMATION AND THE CODE\n//\n//\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec3 col = vec3(0.0);\n    \n    if( iFrame>0 )\n    {\n        col = texture( iChannel0, uv ).xyz;\n        col /= texture( iChannel0, uv ).w;\n        col = pow( col, vec3(0.4545) );\n    }\n    \n    // color grading and vigneting    \n    col = pow( col, vec3(0.8,0.85,0.9) );\n    col *= 0.5 + 0.5*pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.1 );\n    \n    fragColor = vec4( col, 1.0 );\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Shader made by Maximilien \"cewein\" Nowak, september 2020\n//\n// This is a path traced fractal with real indirect ligthing\n// the fractal is render with ray marching and then the color\n// found for the given pixel is accumuleted in the texture buffer\n//\n// \t\t\t\t\t\t\tYOU CAN MOVE IN THE SCENE WITH YOU MOUSE\n//\n// main help came from here : \n// https://iquilezles.org/articles/simplepathtracing\n\n\n//global macro\n#define MAXSTEP 64\n#define EPSILON 0.0001\n\nfloat spp = 0.0;\n\nfloat hash(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) *vec3(.1031,.11369,.13787));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 cosineDirection( in vec2 st, in vec3 nor)\n{\n    float u = hash( 78.233 + st.yx);\n    float v = hash( 10.873 + st.xy);\n    \n    // method by pixar:  http://jcgt.org/published/0006/01/01/paper.pdf\n\tfloat ks = (nor.z>=0.0)?1.0:-1.0;     //do not use sign(nor.z), it can produce 0.0\n    float ka = 1.0 / (1.0 + abs(nor.z));\n    float kb = -ks * nor.x * nor.y * ka;\n    vec3 uu = vec3(1.0 - nor.x * nor.x * ka, ks*kb, -ks*nor.x);\n    vec3 vv = vec3(kb, ks - nor.y * nor.y * ka * ks, -nor.y);\n    \n    float a = 6.2831853 * v;\n    return sqrt(u)*(cos(a)*uu + sin(a)*vv) + sqrt(1.0-u)*nor;\n}\n\n// Scene and primitive SDF function\n\nvoid sphereFold(inout vec3 z, inout float dz)\n{\n\tfloat r2 = dot(z,z);\n\tif (r2 < 0.5)\n    { \n\t\tfloat temp = 2.0;\n\t\tz *= temp;\n\t\tdz*= temp;\n\t}\n    else if (r2 < 1.0)\n    { \n\t\tfloat temp = 1.0 / r2;\n\t\tz *= temp;\n\t\tdz*= temp;\n\t}\n}\n\nvoid boxFold(inout vec3 z, inout float dz)\n{\n\tz = clamp(z, -1.0, 1.0) * 2.0 - z;\n}\n\nfloat DE(vec3 z)\n{\n    float scale = 2.75;\n\tvec3 offset = z;\n\tfloat dr = 1.0;\n\tfor (int n = 0; n < 10; n++)\n    {\n\t\tboxFold(z,dr);\n\t\tsphereFold(z,dr);\n        z = scale * z + offset;\n        dr = dr * abs(scale) + 0.0;\n\t}\n\tfloat r = length(z);\n\treturn r / abs(dr);\n}\n\n//compute the distance between all sdf for a given pos and get the propor distance and id mat\nvec2 map(vec3 pos)\n{\n    return vec2(DE(pos), 0.0);\n}\n\n//compute the normal for a given point\nvec3 getNormal(vec3 pos)\n{\n    vec3 eps = vec3(0.0001,0.0,0.0);\n\n    return normalize( vec3(\n      map( pos+eps.xyy ).x - map( pos-eps.xyy ).x,\n      map( pos+eps.yxy ).x - map( pos-eps.yxy ).x,\n      map( pos+eps.yyx ).x - map( pos-eps.yyx ).x ) );\n}\n\n\n//marching function, it send ray into the world and get the proper mat and distance\nvec2 getDistance(vec3 ro, vec3 rd, float dmax)\n{\n    //distance for the origine is x and y is the mat id\n    vec2 dmat = vec2(0.0);\n    \n    for(int i = 0; i < MAXSTEP; i++)\n    {\n        //position along the ray\n        vec3 pos = ro + dmat.x*rd;\n        \n        //get the distance to the nearest sdf surface\n        vec2 eval = map(pos);\n        \n        //if true it mean we are inside a sdf\n        if(eval.x < 0.0001) return dmat;\n        \n        dmat.x += max(eval.x,0.0001);\n        dmat.y = eval.y;\n        \n        //true if out of range and set -1.0 for sky id\n        if(dmat.x > dmax) return vec2(dmat.x, -1.0);\n    }\n    return dmat;\n}\n\n//it is the same as the \"getDistance\" function but it's return 1.0 if no hit and 0.0 if hit\nfloat getShadow(vec3 ro, vec3 rd)\n{\n   float d = 0.002; \n   \n   for(int i = 0; i < MAXSTEP; i++)\n   {\n       vec3 pos = ro + d*rd;\n       \n       float eval = map(pos).x;\n       \n       if(eval < EPSILON) return 0.0;\n       d += max(eval,0.00001);\n       \n       if(d > 20.0) return 1.0;\n   }\n    \n   return 1.0;\n}\n\n//colorization function based on the id\nvec3 getSurfaceColor(float id)\n{\n    if(id < -0.5)\n        return vec3(0.2,0.35,0.9);\n    else\n        return vec3(0.5,0.2,0.1);\n}\n\nvec3 sunDir = vec3(.3,1.0,-0.6);\n\nvec3 sunCol =  1.0*vec3(1.0,0.8,0.6);\nvec3 skyCol =  13.0*vec3(0.2,0.35,0.5);\n\nvec3 renderPixel(vec3 ro,vec3 rd, float sa, vec2 uv)\n{\n    vec3 colorStrengh = vec3(1.0);\n    vec3 accumulatedColor = vec3(0.0);\n    vec3 oro = ro;\n    vec3 ord = rd;\n    \n    float fdis = 0.0;\n    \n    //GI bounce\n    for(int nbBounce = 0; nbBounce < 3; nbBounce++)\n    {\n        rd = normalize(rd);\n        //evaluation of distance to the sdf agregate and get the id mat in the same time\n        vec2 dist = getDistance(ro, rd, 10.0);\n        \n        if( nbBounce==0 ) fdis = dist.x;\n\n        //get the intersection position and the normal at this point\n        vec3 pos = ro + dist.x*rd;\n        vec3 norm = getNormal(pos);\n        \n        if(dist.y < 0.0)\n        {\n            if( nbBounce==0 ) { fdis=16.0; accumulatedColor = vec3(0.2,0.35,0.5); break; }\n            break;\n        }\n        \n        if( nbBounce==0 ) fdis = dist.x;\n\n        //surface color\n        colorStrengh *= getSurfaceColor(dist.y);\n        \n        vec3 col = vec3(0.0);\n\n        //lighting\n        //sun\n        float sunSha = getShadow(pos + norm * EPSILON, sunDir);\n\n        //sky\n        float sunDif = max(0.0, dot(norm, sunDir));\n        vec3 skyPoint = cosineDirection( sa + 7.1*float(iFrame) + 5681.123 + float(nbBounce)*92.13 + uv.yx, norm);\n        float skySha = getShadow(pos + norm*EPSILON, skyPoint);\n\t\t\n        //perform bounce accumulation\n        col = sunDif * sunSha * sunCol + skySha * skyCol;\n\t\taccumulatedColor += colorStrengh * col;\n        \n        //perfom the bounce\n        rd = cosineDirection(76.2 + 73.1 * float(nbBounce) + sa + 17.7*float(iFrame) + uv.xy, norm);\n        ro = pos;\n        \n    }\n    \n    float ff = exp(-0.01*fdis*fdis);\n   \taccumulatedColor *= ff; \n   \taccumulatedColor += (1.0-ff)*0.05*vec3(0.9,1.0,1.0);\n    \n    // volumetrics\n    float dt = 2.;\n    float acc = 0.0;\n    for( int i=0; i<5; i++ )\n    {\n        float t = fdis*hash(sa+1.31+13.731*float(i)+float(iFrame)*7.773 + uv.yx);\n        vec3 pos = oro + ord*t;\n        acc += dt*getShadow( pos, sunDir );\n    }\n    accumulatedColor += vec3(0.1)*pow(acc,2.0)*sunCol*0.4;\n\n\n    return accumulatedColor;\n}\n\n\n//Ray function\nvec3 getDirection(vec3 ro, vec3 target, vec2 uv, float fov)\n{\n    vec3 ww = normalize(target - ro); //front\n    vec3 uu = normalize(cross(ww,vec3(0.,1.,0.))); //right\n\tvec3 vv = normalize(cross(uu,ww)); //up\n    \n    return normalize(uv.x * uu + uv.y*vv + fov*ww);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*(fragCoord)-iResolution.xy)/iResolution.y;\n    \n    float sa = hash( dot( fragCoord, vec2(12.9898, 78.233) ) + 1113.1*float(iFrame) +  uv);\n    \n    vec2 of = -0.5 + vec2( hash(sa+13.271+uv), hash(sa+63.216+uv) );\n    \n    //mouse detection\n    float angle = iMouse.x/iResolution.x;\n    angle *= 1.2; angle -= 0.1;\n    angle = clamp(angle, 0.,1.0);\n    \n    //ray generation\n    vec3 target = mix(vec3(1.9,-0.1,.0), vec3(1.9,0.1,-.2), angle);\n   \tvec3 ro = mix(vec3(1.21,0.20,-0.6), vec3(1.21,-0.20,0.6), angle);\n    vec3 rd = getDirection(ro,target, uv, 1.5);\n    \n    //get the texture pixel color\n    vec3 col = texture( iChannel0, fragCoord/iResolution.xy ).xyz;\n    float spp = texture( iChannel0, fragCoord/iResolution.xy ).w;\n    if( iFrame==0 || iMouse.z > 0.0) \n    {\n        col = vec3(0.0);\n        spp = 0.0;\n    }\n    \n    //accumulate the rendered pixel into the color\n    col += renderPixel(ro, rd, sa, uv);\n    spp += 1.0;\n    //output the color to the screen\n    fragColor = vec4(col,spp);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}