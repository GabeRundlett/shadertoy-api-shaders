{
    "Shader": {
        "info": {
            "date": "1510945238",
            "description": "Experimenting with patterns of sample distribution on a sphere, to try and find something giving good even coverage for small and large numbers of samples.",
            "flags": 32,
            "hasliked": 0,
            "id": "ltXBz8",
            "likes": 13,
            "name": "Sphere Distribution",
            "published": 3,
            "tags": [
                "random"
            ],
            "usePreview": 0,
            "username": "TekF",
            "viewed": 689
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = texelFetch(iChannel0,ivec2(fragCoord.xy),0);\n    \n    fragColor = 1.-fragColor/(1.+sqrt(fragColor.a/80.));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// some numbers I found by experimentation\n// Pretty good pattern - covers a lot of directions in early cycles,\n// then fills in gaps, with a bit of a pattern (lower digits affect the pattern)\n//    float sina = (float((seed*0x73493U)&0xfffffU)/float(0x100000))*2. - 1.;\n//    float b = 6.283*(float((seed*0xAF71FU)&0xfffffU)/float(0x100000));\n// AAARGH! It has huge gaps at the poles!\n// tweaked it a tiny amount and got something far better\nvec3 SphereRand( uint seed )\n{\n    float sina = (float((seed*0x73494U)&0xfffffU)/float(0x100000))*2. - 1.;\n    float b = 6.283*(float((seed*0xAF71FU)&0xfffffU)/float(0x100000));\n    float cosa = sqrt(1.-sina*sina);\n    return vec3(cosa*cos(b),sina,cosa*sin(b));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if ( iFrame == 0 ) fragColor = vec4(0);\n    else fragColor = texelFetch(iChannel0,ivec2(fragCoord.xy),0);\n    \n    vec2 uv = (fragCoord.xy*2.-iResolution.xy)/iResolution.y;\n    \n    const float zoom = 1.;\n    //const float zoom = 8.; uv.x -= 7.;\n    \n    vec2 projection = normalize(vec2(1,.2));\n    \n    const uint n = 1000U; // number to add per frame\n    for ( uint i=0U; i < n; i++ )\n    {\n    \tvec3 r = SphereRand(uint(iFrame)*n+i);\n        \n        // tilt the sphere\n        //r.yz = r.yz*sqrt(.75) + r.zy*vec2(1,-1)*sqrt(.25);\n        \n        // hide back face - actually don't do this, because when I fire rays in a hemisphere I mirror them in a plane\n        //if ( r.y < .0 ) continue;\n        \n        // zoom\n        r *= zoom;\n        \n        float s = smoothstep(0.,.004,length(vec2(r.x,dot(r.yz,projection.yx*vec2(-1,1)))/**4./(dot(r.yz,projection+5.)*/-uv));\n        //fragColor *= s;\n        fragColor += 1.-s;\n    }\n    \n    fragColor.a = iTime*float(n)/(zoom*zoom);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}