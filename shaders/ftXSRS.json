{
    "Shader": {
        "info": {
            "date": "1625921803",
            "description": "Double tap system with some simple noise and sine waves to create some waves/motion.",
            "flags": 32,
            "hasliked": 0,
            "id": "ftXSRS",
            "likes": 18,
            "name": "Analogous Oceans",
            "published": 3,
            "tags": [
                "waves"
            ],
            "usePreview": 1,
            "username": "byt3_m3chanic",
            "viewed": 492
        },
        "renderpass": [
            {
                "code": "/**\n    Analogous Oceans | some abstract marching\n    @byt3_m3chanic | 07/10/21\n*/\n\nfloat offset[3] = float[]( 0.0, .7215, 1.73 );\nfloat weight[3] = float[]( 0.2, 0.35, 0.0735 );\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n\tvec2 uv = fragCoord.xy/iResolution.xy;\n\n    vec3 C = texture(iChannel0, uv).rgb;\n    vec3 R = texture(iChannel0, uv).rgb * weight[0];\n    for (int i=1; i<3; i++) {\n      R += texture(iChannel0, uv + vec2(offset[i])/iResolution.xy, 0.0).rgb * weight[i];\n      R += texture(iChannel0, uv - vec2(offset[i])/iResolution.xy, 0.0).rgb * weight[i];\n    }\n    \n    // mask for effect and mixdown \n    float dt = distance(uv.xy,vec2(.5))*.35;\n    dt = smoothstep(.80,.92,1.-dt);\n\n    vec3 Color = mix(R,C,dt);\n    \n    // output\n    Color=pow(Color, vec3(.4545));\n    fragColor = vec4(Color,1.);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/**\n    Analogous Oceans | some abstract marching\n    @byt3_m3chanic | 07/10/21\n*/\n\n#define R   iResolution\n#define M   iMouse\n#define T   iTime\n#define PI  3.14159265359\n#define PI2 6.28318530718\n\n#define MAX_DIST    100.\n#define MIN_DIST    .0001\n\nfloat hash21(vec2 p){ return fract(sin(dot(p,vec2(26.34,45.32)))*4324.23); }\nmat2 rot(float a){ return mat2(cos(a),sin(a),-sin(a),cos(a)); }\n\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = hash21(i);\n    float b = hash21(i + vec2(1.0, 0.0));\n    float c = hash21(i + vec2(0.0, 1.0));\n    float d = hash21(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3. - 2.0 * f);\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n//@iq\nfloat box(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.)-.025;\n}\n\nvec3 hit=vec3(0),hitPoint,gid,sid;\nvec3 speed = vec3(0);\nfloat glow =0.0,wtime;\nconst float size = .75;\nconst float hlf = size/2.;\nconst float dbl = size*2.;\n          \nvec2 map(in vec3 p, float sg) {\n    vec2 res = vec2(1e5,0.);\n    p += speed;\n\n    float id,nz=0.;\n    vec3 q;\n    for(int i = 0; i<2; i++)\n    {\n        float cnt = i<1 ? size : dbl;\n        q = vec3(p.x-cnt,p.yz);\n        id = floor(q.x/dbl) + .5;\n        q.x -= (id)*dbl;\n        float qf = (id)*dbl + cnt;\n\n        nz = noise(vec2(qf*.22+wtime,q.z*.22)) * 2.;\n        q.y += nz+nz*sin(q.z*.55);\n        q.y += nz+nz*cos(q.x*.35);\n        float d = box(q+vec3(0.,3.25,0.),vec3(.125,.25,50.));\n        d=max(d,-(p.y+6.4));\n        \n        if(d<res.x){\n            res = vec2(d,1.);\n            hitPoint = q+vec3(qf,qf,float(i));\n            gid = vec3(qf,nz,float(i));\n            if(sg==1. && mod(qf,6.)==0.) glow += .001/(.0005+d*d);\n        }\n        \n    }\n\n    float fl = p.y+6.5;\n    if(fl<res.x){\n        res=vec2(fl,2.);\n        hitPoint=p;\n    }\n    return res;\n}\n//Tetrahedron technique\n//https://iquilezles.org/articles/normalsSDF\nvec3 normal(vec3 p, float t)\n{\n    float e = MIN_DIST*t;\n    vec2 h =vec2(1,-1)*.5773;\n    vec3 n = h.xyy * map(p+h.xyy*e,0.).x+\n             h.yyx * map(p+h.yyx*e,0.).x+\n             h.yxy * map(p+h.yxy*e,0.).x+\n             h.xxx * map(p+h.xxx*e,0.).x;\n    return normalize(n);\n}\n\nvec2 marcher(vec3 ro, vec3 rd, int maxsteps, float sg){\n\tfloat d = 0.;\n    float m = 0.;\n    for(int i=0;i<maxsteps;i++){\n    \tvec2 ray = map(ro + rd * d, sg);\n        if(ray.x<MIN_DIST*d||d>MAX_DIST) break;\n        d += i<42?ray.x*.4:ray.x;\n        m  = ray.y;\n    }\n\treturn vec2(d,m);\n}\n\n// Tri-Planar blending function. GPU Gems 3 - Ryan Geiss:\nvec3 tex3D(sampler2D t, in vec3 p, in vec3 n ){\n    n = max(abs(n), MIN_DIST);\n    n /= dot(n, vec3(1));\n\tvec3 tx = texture(t, p.yz).xyz;\n    vec3 ty = texture(t, p.zx).xyz;\n    vec3 tz = texture(t, p.xy).xyz;\n    return (tx*tx*n.x + ty*ty*n.y + tz*tz*n.z);\n}\n\nvec4 FC = vec4(0.019,0.019,0.019,0.);\n\nvec3 hue(float t){ \n    const vec3 c = vec3(0.757,0.110,0.992);\n    return .65 + .45*cos(13.+PI2*t*(c*vec3(0.959,0.970,0.989))); \n}\n\nvec4 render(inout vec3 ro, inout vec3 rd, inout vec3 ref, bool last, inout float d, vec2 uv) {\n\n    vec3 C = vec3(0);\n    vec2 ray = marcher(ro,rd,150, 1.);\n    hitPoint = hit;\n    sid=gid;\n    d = ray.x;\n    float m = ray.y;\n    float alpha = 0.;\n    \n    if(d<MAX_DIST)\n    {\n        vec3 p = ro + rd * d;\n        vec3 n = normal(p,d);\n        vec3 lpos =vec3(1.,11,-3.);\n        vec3 l = normalize(lpos-p);\n        \n        vec3 h = vec3(.5);\n        vec3 hp = hitPoint;\n\n        float diff = clamp(dot(n,l),0.,1.);\n        float fresnel = pow(clamp(1.+dot(rd, n), 0., 1.), 9.);\n        fresnel = mix(.01, .7, fresnel);\n\n        float shdw = 1.0;\n        for( float t=.01; t < 10.; )\n        {\n            float h = map(p + l*t,0.).x;\n            if( h<MIN_DIST ) { shdw = 0.; break; }\n            shdw = min(shdw, 18.*h/t);\n            t += h;\n            if( shdw<MIN_DIST || t>32. ) break;\n        }\n\n        diff = mix(diff,diff*shdw,.75);\n\n        vec3 view = normalize(p - ro);\n        vec3 ret = reflect(normalize(lpos), n);\n        float spec = 0.3 * pow(max(dot(view, ret), 0.), 20.);\n        \n        vec3 clr = hue(sid.x*.1+sid.y)*.35;\n        // materials\n        if(m==1.){\n            h= mod(sid.x,6.)==0. ? clr : tex3D(iChannel0,hp*.1,n).rgb*clr;\n            \n            ref = h-fresnel;\n            C = (diff*h)+spec;\n        }\n        if(m==2.){\n            h=texture(iChannel0,hp.xz*.1).rgb;\n            ref = vec3(1.)-fresnel;\n            C = (diff*h)+spec;\n        }\n\n        C = mix(FC.rgb,C,exp(-.00015*d*d*d));\n        ro = p+n*.01;\n        rd = reflect(rd,n);\n        C+=clamp(glow,0.,.95)*clr;\n    } \n    return vec4(C,alpha);\n}\n\nvoid mainImage( out vec4 O, in vec2 F )\n{   \n    float T2 = T*2.;\n    float rrt = T2*PI/180.;\n    wtime=T*.1;\n    speed = vec3(T2,0,5.*sin(T*.25));\n    \n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    vec3 ro = vec3(0,.25,1.5);\n    vec3 rd = normalize(vec3(uv,-1));\n    \n    //camera\n    mat2 rx = rot(.75), ry = rot(rrt);\n    \n    ro.yz *= rx, ro.xz *= ry;\n    rd.yz *= rx, rd.xz *= ry;\n\n    // reflection loop (@BigWings)\n    vec3 C = vec3(0);\n    vec3 ref=vec3(0), fil=vec3(1);\n    float d =0.;\n    float numBounces = 2.;\n    for(float i=0.; i<numBounces; i++) {\n        vec4 pass = render(ro, rd, ref, i==numBounces-1., d, uv);\n        C += pass.rgb*fil;\n        fil*=ref;\n        if(i==0.) FC = vec4(FC.rgb,exp(-.000015*d*d*d));\n    }\n    C = mix(C,FC.rgb,1.-FC.w);\n    C = clamp(C,vec3(.01),vec3(1));\n    //C=pow(C, vec3(.4545));\n    O = vec4(C,1.0);\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}