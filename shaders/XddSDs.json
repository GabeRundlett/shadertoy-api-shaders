{
    "Shader": {
        "info": {
            "date": "1462208142",
            "description": "G-Lectric Sheep 14",
            "flags": 0,
            "hasliked": 0,
            "id": "XddSDs",
            "likes": 2,
            "name": "G-Lectric Sheep 14",
            "published": 3,
            "tags": [
                "glectricsheep14"
            ],
            "usePreview": 0,
            "username": "vox",
            "viewed": 558
        },
        "renderpass": [
            {
                "code": "//-----------------SETTINGS-----------------\n//#define TIMES_DETAILED (sin(time*32.0)+1.0)\n#define TIMES_DETAILED (1.0+.1*sin(time*PI*1.0))\n#define SPIRAL_BLUR_SCALAR (1.0+.1*sin(time*PI*1.0))\n//-----------------USEFUL-----------------\n\n#define MOUSE_X (iMouse.x/iResolution.x)\n#define MOUSE_Y (iMouse.y/iResolution.y)\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define EPS .001\n\n#define time ((saw(float(__LINE__))+1.0)*(seedling+iTime+12345.12345)/PI/2.0)\n#define saw(x) (acos(cos(x))/PI)\n#define sphereN(uv) (normalize(vec3((uv).xy, sqrt(clamp(1.0-length((uv)), 0.0, 1.0)))))\n#define rotatePoint(p,n,theta) (p*cos(theta)+cross(n,p)*sin(theta)+n*dot(p,n) *(1.0-cos(theta)))\n\nfloat seedling;\n\n//-----------------SIMPLEX-----------------\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nfloat simplex3d(vec3 p) {\n    const float F3 =  0.3333333;\n    const float G3 =  0.1666667;\n    \n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n    \n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n    \n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n    \n    vec4 w, d;\n    \n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n    \n    w = max(0.6 - w, 0.0);\n    \n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n    \n    w *= w;\n    w *= w;\n    d *= w;\n    \n    return dot(d, vec4(52.0));\n}\n\n\n//-----------------IMAGINARY-----------------\n\nvec2 cmul(vec2 v1, vec2 v2) {\n\treturn vec2(v1.x * v2.x - v1.y * v2.y, v1.y * v2.x + v1.x * v2.y);\n}\n\nvec2 cdiv(vec2 v1, vec2 v2) {\n\treturn vec2(v1.x * v2.x + v1.y * v2.y, v1.y * v2.x - v1.x * v2.y) / dot(v2, v2);\n}\n\n//-----------------GALAXY-----------------\n\nfloat galaxy(vec2 uv)\n{\n    uv *= 2.5;\n    float r1 = log(length(uv)+1.)*2.0;\n    float r2 = pow(log(length(uv)+1.)*3.0, .5);\n    \n    //float theta = atan(uv.y, uv.x)/3.14*.5+.5;\n//finalColor = vec4(vec3(theta),1.0);\n    float theta1 = atan(uv.y, uv.x)-r1*PI+iTime*.5;\n    float theta2 = atan(uv.y, uv.x)-r2*PI+iTime*.5;\n    \nvec4 finalColor = acos(1.0-(cos(theta1)*cos(theta1)+sqrt(cos(theta1+PI)*cos(theta1+PI)))/2.0)*(1.0-log(r1+1.))*vec4(1.0, 1.0, 1.0, 1.0)\n    \n              + cos(1.0-(cos(theta2)*cos(theta2)+cos(theta2+PI/2.)*cos(theta2+PI/2.))/2.0)*(1.25-log(r2+1.))*vec4(0.0, 0.0, 2.0, 1.0)\n         + simplex3d(vec3(r2+iTime*.25, cos(theta2)*5., 0.0)*4.0)*(1.5-log(r2+1.))\n         + simplex3d(vec3(r2*r2+iTime*.25, cos(theta2)*5., 0.0)*4.0)*(1.25-log(r2+1.));\n    //finalColor.g *= (2.0+sin(iTime*.55));\n    //finalColor.r *= (3.0+cos(iTime*.45));\n    finalColor.b += .75;\n    \n    finalColor /= r1;\n    \n    finalColor *= 2.0;\n    return length(finalColor);\n    \n    //fragColor += (1.0-log(r1+1.));\n    \n    //fragColor.rgb = clamp(fragColor.rgb, 0.0, 1.0)+texture(iChannel0, uv/5.0).rgb;\n    \n    //fragColor.rgb *= .5;\n    return clamp(finalColor.b, 0.0, 1.0);\n}\n\n//-----------------RENDERING-----------------\n\n\nvec2 mobius(vec2 uv)\n{\n\tvec2 a = sin(seedling+5.0*vec2(time, time*GR/E))*GR;\n\tvec2 b = sin(seedling+4.666*vec2(time, time*GR/E))*GR;\n\tvec2 c = sin(seedling+4.333*vec2(time, time*GR/E))*GR;\n\tvec2 d = sin(seedling+4.0*vec2(time, time*GR/E))*GR;\n\treturn cdiv(cmul(uv, a) + b, cmul(uv, c) + d);\n}\n\nvec2 map(vec2 uv)\n{\n    return saw(mobius((uv*2.0-1.0))*2.0*PI);\n}\n\nvec2 reflection(vec2 uv)\n{\n    return (1.0-saw(PI*(uv*.5+.5)));\n}\nvec2 spiral(vec2 uv)\n{\n    float turns = 2.0;\n    float r = length(uv);\n    float theta = atan(uv.y, uv.x)*turns-r*PI*2.0;\n    return vec2(saw(r*PI),\n                saw(theta));\n}\n\nvec2 perspective(vec2 uv, vec2 dxdy, out float magnification)\n{\n    vec2 a = uv+vec2(0.0, \t\t0.0);\n    vec2 b = uv+vec2(dxdy.x, \t0.0);\n    vec2 c = uv+vec2(dxdy.x, \tdxdy.y);\n    vec2 d = uv+vec2(0.0, \t\tdxdy.y);//((fragCoord.xy + vec2(0.0, 1.0)) / iResolution.xy * 2.0 - 1.0) * aspect;\n\n    vec2 ma = map(a);\n    vec2 mb = map(b);\n    vec2 mc = map(c);\n    vec2 md = map(d);\n    \n    float da = length(mb-ma);\n    float db = length(mc-mb);\n    float dc = length(md-mc);\n    float dd = length(ma-md);\n    \n\tfloat stretch = max(max(max(da/dxdy.x,db/dxdy.y),dc/dxdy.x),dd/dxdy.y);\n    \n    magnification = stretch;\n    \n    return map(uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.y/iResolution.x;\n   \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n   \tconst int max_i = 16;\n    float stretch = 1.0;\n    float ifs = 1.0;\n    float depth = 0.0;\n    float magnification;\n    int last_i;\n    \n    #define FUNCTION_PERSPECTIVE 0\n    #define FUNCTION_SPIRAL 1\n    \n    int function = 0;\n    vec2 next, last; \n    \n    for(int i = 0; i < max_i; i++)\n    {\n        last_i = 0;\n        seedling += fract(float(i)*123456.123456);\n        \n        if(function == FUNCTION_PERSPECTIVE)\n        {\n            last = uv;\n            next = perspective(uv, .5/iResolution.xy, magnification);\n\n            //omg so platform dependent... pls help fix:\n            float weight = smoothstep(0.0, 0.25, ifs);\n\n            ifs *= smoothstep(0.0, 1.0/TIMES_DETAILED, sqrt(1.0/(1.0+magnification)));\n\n            float delta = galaxy(next*2.0-1.0);\n        \n            if(delta == 0.0)\n            {\n            depth += delta*ifs;\n\t            uv = last*ifs+uv*(1.0-ifs);\n                uv = reflection(uv*2.0-1.0);//*clamp(pow(delta, SPIRAL_BLUR_SCALAR)*2.0, 0.0, 1.0);\n            }\n            else if(delta >= 1.0)\n            {\n                \n                uv = next*weight+uv*(1.0-weight);\n\t\t\t\tfunction = FUNCTION_SPIRAL;\n            }\n            else\n            {\n                uv = next*weight+uv*(1.0-weight);\n\t\t\t\tfunction = FUNCTION_SPIRAL;\n            }\n        }\n        else if(function == FUNCTION_SPIRAL)\n        {\n            depth += galaxy(uv*2.0-1.0)*ifs/float(max_i)/float(i);\n         \tuv = uv*(1.0-ifs)+last*ifs;;\n                \n            function = FUNCTION_PERSPECTIVE;\n        }\n        \n        //if(mod(iTime, float(max_i))-float(i) < 0.0) break;\n    }\n    \n    \n    fragColor = vec4(uv, 0.0, 1.0);\n    \n    //depth /= float(max_i);\n    float shift = time;\n\n    float stripes = depth*15.0*PI;//*floor(log(max(iResolution.x, iResolution.y))/log(2.0));\n    float black = smoothstep(0.0, .75, saw(stripes));\n    float white = smoothstep(0.75, 1.0, saw(stripes));\n        \n    \n    if(pow(ifs, 1.0/abs(float(last_i-max_i))) < 1.0/2.0) discard;//DIVERGANCE + Free motion blur :)\n        \n    \n    vec3 final = (\n        \t\t\t\tvec3(saw(depth*PI*2.0+shift),\n                \t  \t\tsaw(4.0*PI/3.0+depth*PI*2.0+shift),\n                \t  \t\tsaw(2.0*PI/3.0+depth*PI*2.0+shift)\n                 \t\t)\n        \t\t )*black\n        \t\t +white;\n    \n    fragColor = vec4(vec3(ifs), 1.0);\n    \n    fragColor = vec4(saw((depth)));\n    fragColor = vec4(final, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}