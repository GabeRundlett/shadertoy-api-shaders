{
    "Shader": {
        "info": {
            "date": "1616761651",
            "description": "inspired by https://www.youtube.com/watch?v=X-iSQQgOd1A\nSpace to reset",
            "flags": 48,
            "hasliked": 0,
            "id": "fds3Ws",
            "likes": 12,
            "name": "Travellers",
            "published": 3,
            "tags": [
                "2d",
                "abstract",
                "slime",
                "tendrils",
                "slimemould",
                "mould",
                "travellers"
            ],
            "usePreview": 0,
            "username": "Dragonpeak",
            "viewed": 892
        },
        "renderpass": [
            {
                "code": "\nconst vec2 EPS = vec2(0.0001, 0.);\nconst float SOFT = 1.;\n\nconst vec3 LIGHT = normalize(vec3(-.8, .5, .2));\n\nvec3 get_nrm(vec2 uv)\n{\n    vec3 nrm = vec3(0.);\n    nrm.x = texture(iChannel1, uv+EPS).x - texture(iChannel1, uv-EPS).x;\n    nrm.y = texture(iChannel1, uv+EPS.yx).x - texture(iChannel1, uv-EPS.yx).x;\n    nrm.z = EPS.x*SOFT;\n    nrm = normalize(nrm);\n    \n    return nrm;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.);\n\n    \n\n    float d = texture(iChannel1, uv).x;\n    \n    vec3 nrm = get_nrm(uv);\n    \n    col = mix(vec3(0,0.04, 0.08), vec3(.5, .7, .9)*1.3, d) + min((d*300.), .1);\n    if(d == 1.)col += .2;\n\n    float light = max(dot(nrm, LIGHT), 0.7);\n    col *= light;\n    //col = nrm;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int TRAVELLER_COUNT_X = 80;\nconst int TRAVELLER_COUNT_Y = 80;\nconst float FADE_RATE = .994;\nconst float RAND_WALK = .3;\nconst float SPEED = .6;\nconst float SCENT_STRENGTH = .8;\nconst float SENSOR_DIST = 2.;\nconst float START_SPREAD = 5.;\nconst float SENSOR_FORWARD = 4.;\nconst float START_VEL = .1;\n\n\nuvec2 pcg2d(uvec2 v)\n{\n    //from https://www.shadertoy.com/view/XlGcRh\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    return v;\n}\n\nuvec4 pcg4d(uvec4 v)\n{\n    //from https://www.shadertoy.com/view/XlGcRh\n\tv = v * 1664525u + 1013904223u;\n\n    v.x += v.y*v.w;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n    v.w += v.y*v.z;\n\n    v.x += v.y*v.w;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n    v.w += v.y*v.z;\n\n    v = v ^ (v>>16u);\n\n    return v;\n}\n\n\n\n\nbool is_space_down(sampler2D key)\n{\n    return texelFetch(key, ivec2(32,0),0).x>0.;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//traveller data\n\n\n\nvec4 init(vec2 p)\n{\n    uvec4 r = pcg4d(uvec4(p.xy, 1, 1));\n    return vec4(iResolution.xy/2.-START_SPREAD/2.+vec2(r.xy)/float(0xffffffffu)*START_SPREAD, (vec2(r.zw)/float(0xffffffffu)*2.-1.)*START_VEL);//vec2(r.zw)/float(0xffffffffU)*2.-1.);\n}\n\n\n\n\n\nvec2 calc_velocity(vec4 t)\n{\n    vec2 vel = t.zw;\n    \n    if(t.x < 0. || t.x > iResolution.x) vel.x = -vel.x; \n    if(t.y < 0. || t.y > iResolution.y) vel.y = -vel.y; \n    \n    vel += (vec2(pcg2d(uvec2(t.xy*iTime*60.)))/float(0xffffffffu)*2.-1.)*RAND_WALK;\n    \n    vec2 a = normalize(t.zw);\n    vec2 b = vec2(a.y, -a.x)+a*SENSOR_FORWARD;\n    vec2 c = vec2(-a.y, a.x)+a*SENSOR_FORWARD;\n    a*=SENSOR_FORWARD;\n    \n    a *= texelFetch(iChannel1, ivec2(a*SENSOR_DIST+t.xy), 0).w;\n    b *= texelFetch(iChannel1, ivec2(b*SENSOR_DIST+t.xy), 0).w;\n    c *= texelFetch(iChannel1, ivec2(c*SENSOR_DIST+t.xy), 0).w;\n    \n    vel += (a+b+c)*SCENT_STRENGTH;\n    \n    return vel*(1./length(vel))*SPEED;\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(int(fragCoord.x)+1 < TRAVELLER_COUNT_X && int(fragCoord.y)+1 < TRAVELLER_COUNT_Y)\n    {\n        if(iFrame < 5 || is_space_down(iChannel2))\n        {\n           fragColor = init(fragCoord);\n        }\n        else\n        {\n           fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n           fragColor.zw = calc_velocity(fragColor);\n\n           fragColor.xy += fragColor.zw;\n\n\n        }\n    }\n\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//diffusion\n\nconst ivec2 BLUR[] = ivec2[](ivec2(0, 1), ivec2(0,-1), ivec2(1, 0), ivec2(-1,0));\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame < 5 || is_space_down(iChannel2))\n    {\n        fragColor = vec4(0,0,0,0);\n       \n    }\n    else \n    {\n        vec4 col = vec4(0.);\n        for(int i = 0; i < 4; i++)\n        {\n            col += texelFetch(iChannel1, ivec2(fragCoord)+BLUR[i], 0)*.25;\n        }\n\n        col *= FADE_RATE;\n        for(int i = 0; i < TRAVELLER_COUNT_X; i++)\n        {\n            for(int j = 0; j < TRAVELLER_COUNT_Y; j++)\n            {\n                vec4 data = texelFetch(iChannel0, ivec2(i,j), 0);\n                if(floor(data.xy) == floor(fragCoord.xy)) col = vec4(1);\n            }\n        }\n\n        fragColor = col;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}