{
    "Shader": {
        "info": {
            "date": "1633653851",
            "description": "Supposed to look like the scene from Harry Potter when the streams from Harry and Voldemort's wands are pushing against each other and creating all the splatters and stuff",
            "flags": 32,
            "hasliked": 0,
            "id": "sdtSzX",
            "likes": 2,
            "name": "Harry Potter Wizard Duel",
            "published": 3,
            "tags": [
                "simulation",
                "fluid",
                "simulate"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 95
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 texel0 = texture(iChannel0, uv);\n\n    vec3 color = mix(vec3(texel0.xy, 0.0), vec3( length(texel0.xy) ), 0.5);\n    //vec3 color = vec3( length(texel0.xy) );\n\n    fragColor = vec4(tanh(0.1*color), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// ##### Preprocessor #####\n\n/*\n// Compile Performance\n#pragma debug(on)\n#pragma optimize(off)\n*/\n\n/*\n// Runtime Performance\n#pragma debug(off)\n#pragma optimize(on)\n*/\n\n// ##### Parameters #####\n\n#define timestep 0.1\n\n// ##### Constants #####\n\n// http://www.mimirgames.com/articles/programming/digits-of-pi-needed-for-floating-point-numbers/\n#define pi 3.141592653589793\n\n// ##### Random Number Generator #####\n\n// Random Number Generator Seed\nuint ns;\n\n// Initialize Random Number Generator\n#define INIT_RNG ns = uint(iFrame)*uint(iResolution.x*iResolution.y)+uint(gl_FragCoord.x+gl_FragCoord.y*iResolution.x)+1U\n\n// Triple32 Hash: https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17U;\n    x *= 0xED5AD4BBU;\n    x ^= x >> 11U;\n    x *= 0xAC4C1B51U;\n    x ^= x >> 15U;\n    x *= 0x31848BABU;\n    x ^= x >> 14U;\n    return x;\n}\n\n// Random Value Between 0.0 and 1.0\nfloat rand()\n{\n    ns = triple32(ns);\n    return float(ns)/float(0xFFFFFFFFU);\n}\n\n// Uniform Random Vectors\nvec2 rand2(){return vec2(rand (), rand());}\nvec3 rand3(){return vec3(rand2(), rand());}\nvec4 rand4(){return vec4(rand3(), rand());}\n\n// See michael0884's usage of PCG Random\n// https://www.shadertoy.com/view/wltcRS\n// https://www.shadertoy.com/view/WttyWX\n\n/*\nvec2 nrand2(float sigma, vec2 mean)\n{\n    vec2 z = rand2();\n    return mean+sigma*sqrt(-2.0*log(z.x   ))*vec2(cos(2.0*pi*z.y), sin(2.0*pi*z.y));\n}\n\nvec3 nrand3(float sigma, vec3 mean)\n{\n    vec4 z = rand4();\n    return mean+sigma*sqrt(-2.0*log(z.xxy ))*vec3(cos(2.0*pi*z.z), sin(2.0*pi*z.z), cos(2.0*pi*z.w));\n}\n\nvec4 nrand4(float sigma, vec4 mean)\n{\n    vec4 z = rand4();\n    return mean+sigma*sqrt(-2.0*log(z.xxyy))*vec4(cos(2.0*pi*z.z), sin(2.0*pi*z.z), cos(2.0*pi*z.w), sin(2.0*pi*z.w));\n}\n*/\n\n// Random Uniform Direction\nvec2 udir2()\n{\n    float z = rand();\n    float r = 2.0*pi*z;\n    float s = sin(r), c = cos(r);\n    return vec2(s, c);\n}\n\nvec3 udir3()\n{\n    vec2 z = rand2();\n    vec2 r = vec2(2.0*pi*z.x, acos(2.0*z.y-1.0));\n    vec2 s = sin(r), c = cos(r);\n    return vec3(c.x*s.y, s.x*s.y, c.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// ##### Buffer A #####\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    INIT_RNG;\n\n    fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\n    /*\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 velocity = texture(iChannel3, uv).xy;\n    velocity = texture(iChannel3, ( fragCoord-(timestep*velocity) )/iResolution.xy).xy;\n    */\n\n    // https://www.shadertoy.com/view/slXXRS\n    vec2 uv = fragCoord;\n    float h = timestep;\n    vec2 k1 = texture(iChannel3, (fragCoord)                /iResolution.xy).xy;\n    vec2 k2 = texture(iChannel3, (fragCoord - 0.5 * h * k1) /iResolution.xy).xy;\n    vec2 k3 = texture(iChannel3, (fragCoord - 0.5 * h * k2) /iResolution.xy).xy;\n    vec2 k4 = texture(iChannel3, (fragCoord - h * k3)       /iResolution.xy).xy;\n    uv -= h * (k1 + 2.0 * k2 + 2.0 * k3 + k4) / 6.0;\n    uv /= iResolution.xy;\n\n    vec2 velocity = texture(iChannel3, uv).xy;\n\n    if(iFrame < 1)\n    {\n        velocity = vec2(0.0);\n    }\n\n    uv = fragCoord/iResolution.xy;\n\n    // Border\n    if(uv.x < 0.01 || uv.x > 0.99 || uv.y < 0.01 || uv.y > 0.99)\n    {\n        fragColor = vec4(0.0, 0.0, 1.0, 0.0);\n        return;\n    }\n\n    //if(uv.x < 0.015 && uv.y > 0.49 && uv.y < 0.51)\n    if(uv.x < 0.1 && uv.y > 0.49 && uv.y < 0.51)\n    {\n        velocity = vec2( 100.0*(0.1*rand()+0.9), 0.0);\n        fragColor = vec4(velocity, 0.0, 0.0);\n        return;\n    }\n    //if(uv.x > 0.985 && uv.y > 0.49 && uv.y < 0.51)\n    if(uv.x > 0.9 && uv.y > 0.49 && uv.y < 0.51)\n    {\n        velocity = vec2(-100.0*(0.1*rand()+0.9), 0.0);\n        fragColor = vec4(velocity, 0.0, 0.0);\n        return;\n    }\n\n    // Border\n    if(uv.x < 0.09 || uv.x > 0.91 || uv.y < 0.02 || uv.y > 0.98)\n    {\n        fragColor = vec4(0.0, 0.0, 1.0, 0.0);\n        return;\n    }\n\n\n    /*\n    if(length(vec2(0.5, 1.0)*(uv-0.5)) < 0.02)\n    {\n        fragColor = vec4(0.0, 0.0, 1.0, 0.0);\n        return;\n    }\n    */\n\n    fragColor = vec4(velocity+( 0.1*min(dot(velocity, velocity), 150.0)*udir2()*rand()*rand() ), 0.0, 0.0);\n    //fragColor = vec4(velocity, 0.0, 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// ##### Buffer B #####\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    if(texture(iChannel0, uv).z > 0.0)\n    {\n        return;\n    }\n\n    float x0 = texture(iChannel0, (vec2(-1.0,  0.0)+fragCoord)/iResolution.xy).x;\n    float x1 = texture(iChannel0, (vec2( 1.0,  0.0)+fragCoord)/iResolution.xy).x;\n    float y0 = texture(iChannel0, (vec2( 0.0, -1.0)+fragCoord)/iResolution.xy).y;\n    float y1 = texture(iChannel0, (vec2( 0.0,  1.0)+fragCoord)/iResolution.xy).y;\n\n    float divergence = 0.5*( (x1-x0)+(y1-y0) );\n\n    fragColor = vec4(divergence, 0.0, 0.0, 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// ##### Buffer C #####\nfloat samplePressure(vec2 p)\n{\n    if(texture(iChannel0, p).z > 0.5)\n    {\n        return 0.0;\n    }\n\n    if(p.x < 0.01 || p.x > 0.99 || p.y < 0.01 || p.y > 0.99)\n    {\n        return 0.0;\n    }\n\n    return texture(iChannel2, p).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float divergence = texture(iChannel1, uv).x;\n\n    float x0 = samplePressure( (vec2(-1.0,  0.0)+fragCoord)/iResolution.xy );\n    float x1 = samplePressure( (vec2( 1.0,  0.0)+fragCoord)/iResolution.xy );\n    float y0 = samplePressure( (vec2( 0.0, -1.0)+fragCoord)/iResolution.xy );\n    float y1 = samplePressure( (vec2( 0.0,  1.0)+fragCoord)/iResolution.xy );\n\n    fragColor = vec4(0.25*( (x0+x1+y0+y1)-divergence ), 0.0, 0.0, 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// ##### Buffer D #####\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float x0 = texture(iChannel2, (vec2(-1.0,  0.0)+fragCoord)/iResolution.xy).x;\n    float x1 = texture(iChannel2, (vec2( 1.0,  0.0)+fragCoord)/iResolution.xy).x;\n    float y0 = texture(iChannel2, (vec2( 0.0, -1.0)+fragCoord)/iResolution.xy).x;\n    float y1 = texture(iChannel2, (vec2( 0.0,  1.0)+fragCoord)/iResolution.xy).x;\n\n    vec2 pressureGradient = 0.5*( vec2(x1, y1)-vec2(x0, y0) );\n\n    vec2 velocity = texture(iChannel0, uv).xy;\n\n    fragColor = vec4(velocity-pressureGradient, 0.0, 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}