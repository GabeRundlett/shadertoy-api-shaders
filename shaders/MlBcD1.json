{
    "Shader": {
        "info": {
            "date": "1508359985",
            "description": "many chains made of chains. [url=https://www.shadertoy.com/user/goneval]My brother[/url]'s idea.",
            "flags": 0,
            "hasliked": 0,
            "id": "MlBcD1",
            "likes": 16,
            "name": "chainception",
            "published": 3,
            "tags": [
                "3d",
                "fractal",
                "torus"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 657
        },
        "renderpass": [
            {
                "code": "#define rotnor(norm) mat2(norm.xy, vec2(-norm.y,norm.x))\n#define rotang(spin) mat2(cos(spin),sin(spin),-sin(spin),cos(spin))\n#define pi acos(-1.0)\n#define chains 6.0\n\n#define gammacorrect\n\nfloat torus(vec3 p, float r, float l) {\n    \n    return length(vec2(length(max(abs(p.xy)-vec2(0,l),vec2(0)))-r,p.z));\n}\n\nvec2 torusring(vec3 p) {\n    float len = 1e10;\n    float material;\n    for (float i = 0.0; i < chains; i++) {\n        float i2 = i+iTime;\n        vec2 rot = vec2(cos(i2*pi*2.0/chains),sin(i2*pi*2.0/chains));\n        \n        vec3 p2 = p;\n        p2 = p2 - vec3(rot,0)*3.0;\n        p2.xy*=rotnor(rot);\n        p2.xz*=rotang(i2*pi*0.5);\n        float len2 = torus(p2,0.5,1.5)-0.1;\n        if (len2 < len) {\n            len = len2;\n            material = i;\n        }\n    }\n    return vec2(len,material);\n}\n\nvec2 torusringintorusrings(vec3 p) {\n    vec2 len = vec2(1e10);\n    for (float i = 0.0; i < chains; i++) {\n        float i2 = i+iTime;\n        vec2 rot = vec2(cos(i2*pi*2.0/chains),sin(i2*pi*2.0/chains));\n        \n        vec3 p2 = p;\n        p2 = p2 - vec3(rot,0)*4.0;\n        p2.xy*=rotnor(rot);\n        p2.xz*=rotang(i2*2.0);\n        vec2 len2 = torusring(p2);\n        len2.y += i*chains;\n        if (len.x > len2.x) {\n            len = len2;\n        }\n    }\n    return len;\n}\n\nvec2 map(vec3 p) {\n    vec2 len = torusringintorusrings(p);\n    \n    return len;\n}\n\nvec3 normal(vec3 p) {\n    vec2 eps = vec2(0.01,0.0);\n    \n    return normalize(vec3(\n        map(p+eps.xyy).x-map(p-eps.xyy).x,\n        map(p+eps.yxy).x-map(p-eps.yxy).x,\n        map(p+eps.yyx).x-map(p-eps.yyx).x));\n}\n\n//hash function by Dave_Hoskins https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE3 vec3(.131, .130, .1973)\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * HASHSCALE3);\n   p3 += dot(p3, p3.yzx+19.19);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n//shading\nvec4 shade(vec3 p, vec3 d, vec3 objnorm, float depth, float material) {\n    vec3 sun = normalize(vec3(0,0,1));\n    vec3 reflectnorm = reflect(d,objnorm);\n    vec3 color = hash31(material)+0.1;\n    vec4 fragColor = vec4(color*max(0.4,dot(objnorm,-sun)),1.0);\n    fragColor = max(fragColor,(dot(reflectnorm,-sun)-0.9)*12.0);\n    //fragColor = mix(background,fragColor,clamp(3.0-depth*0.05,0.0,1.0));\n    return clamp(fragColor,0.0,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec3 ro = vec3(0,0,-8);\n    vec3 rd = normalize(vec3(uv,1));\n    float dist = 0.0;\n    \n    bool hit = false;\n    vec2 len;\n    for (int i = 0; i < 100; i++) {\n        len = map(ro);\n        \n        if (len.x < 0.01 || dist > 20.0) {\n            hit = len.x < 0.01;\n            break;\n        }\n        \n        dist += len.x;\n        ro += rd*len.x;\n    }\n    if (hit)\n\tfragColor = shade(ro,rd, normal(ro), dist, len.y);\n    else\n    fragColor = abs(vec4(uv,sin(iTime)*0.5+0.5,1.0))*0.2;\n    \n    #ifdef gammacorrect\n    fragColor = sqrt(fragColor);\n    #endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}