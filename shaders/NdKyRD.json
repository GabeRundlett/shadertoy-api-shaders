{
    "Shader": {
        "info": {
            "date": "1654534471",
            "description": "Created for AIAIART #8 (https://colab.research.google.com/drive/1Qpx_4wWXoiwTRTCAP1ohpoPGwDIrp9z-?usp=sharing) - currently a WIP, lesson comes out properly this weekend :)",
            "flags": 32,
            "hasliked": 0,
            "id": "NdKyRD",
            "likes": 3,
            "name": "Neural CA fork",
            "published": 3,
            "tags": [
                "clip",
                "nca"
            ],
            "usePreview": 0,
            "username": "silvestru",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "// Fork of \"Neural CA Demo\" by johnowhitaker. https://shadertoy.com/view/ftSfzG\n// 2022-06-06 16:53:51\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Apply zoom (can't figure out how to re-size buffers \n    // so this wastes a lot of compute updating the offscreen parts)\n    uv = uv/2.;\n\n    // Read the buffer\n    vec3 col = (texture(iChannel0, uv).xyz-vec3(0.5))*10. + vec3(0.5);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Paste your weights hre:\nconst int nh = 16;\nfloat b1[16] = float[16](-0.03493387997150421,-0.10716474056243896,0.3282867670059204,-0.1208450049161911,0.1560712605714798,0.05483105778694153,-0.05130641162395477,-0.048943594098091125,0.12394221127033234,0.07236608117818832,-0.10005078464746475,0.0866173580288887,0.10229668766260147,0.12560752034187317,0.029041897505521774,-0.1220850422978401);\nfloat w1[256] = float[256](-0.3977280855178833,0.10077136754989624,-0.1696157604455948,-0.02370043285191059,0.3227560818195343,0.16628700494766235,0.021654894575476646,-0.13723382353782654,-0.0428946353495121,-0.15965507924556732,-0.24806667864322662,-0.11035522818565369,0.005852674134075642,0.1373792141675949,-0.105523020029068,0.07499191164970398,-0.0020828035194426775,-0.011740612797439098,-0.24516360461711884,-0.016380181536078453,-0.3515242040157318,0.21215514838695526,0.20363038778305054,0.2092709243297577,-0.0634683147072792,0.03718245401978493,-0.15398837625980377,0.04632727801799774,0.11724033951759338,0.001949547789990902,0.47529658675193787,-0.19606049358844757,-0.2939988076686859,-0.22758153080940247,-0.06444992125034332,-0.037138067185878754,0.017914628610014915,0.16452132165431976,-0.05846777185797691,0.13793019950389862,0.05386471003293991,-0.24677370488643646,0.17700843513011932,-0.22743450105190277,0.17458108067512512,-0.17231743037700653,-0.07548206299543381,0.2870756685733795,0.12965868413448334,0.0821027085185051,0.04580215737223625,-0.06107872352004051,0.1768023818731308,-0.052107084542512894,0.15958517789840698,-0.094985730946064,-0.048802271485328674,0.03243787959218025,0.33224406838417053,0.144126757979393,-0.04608708247542381,0.25092536211013794,-0.03714563697576523,0.16364307701587677,-0.06535161286592484,-0.10936438292264938,-0.0032730104867368937,0.08396880328655243,0.28338176012039185,0.02589745819568634,0.28387197852134705,-0.14194457232952118,-0.39022231101989746,0.29011470079421997,-0.2553168535232544,0.07650812715291977,-0.1123335137963295,-0.031892284750938416,0.0835525318980217,-0.14506898820400238,-0.1488645374774933,0.09700801223516464,-0.17523863911628723,-0.14796055853366852,-0.20786601305007935,-0.14043325185775757,0.09612595289945602,-0.03260720148682594,0.2327413260936737,-0.24866364896297455,0.0588473342359066,-0.2568831443786621,0.10121035575866699,-0.05432509630918503,-0.17823414504528046,-0.2608868181705475,0.055601999163627625,0.33188939094543457,-0.09271840751171112,0.050815608352422714,-0.015439629554748535,-0.08063589781522751,-0.08342310786247253,0.0506211593747139,0.05467955768108368,-0.16247037053108215,-0.09010499715805054,0.14705918729305267,-0.23720023036003113,-0.03375853970646858,-0.30959653854370117,0.03209728002548218,0.11714625358581543,-0.08765064179897308,0.2126082479953766,-0.12496152520179749,-0.12936192750930786,0.17036810517311096,-0.06433917582035065,0.03042437881231308,-0.12154068052768707,0.03164992108941078,-0.013636874966323376,-0.10836279392242432,0.1419989913702011,0.12159768491983414,-0.1481722593307495,-0.3693365752696991,0.03972162306308746,0.2999219596385956,-0.03962958976626396,0.10690027475357056,0.1488490104675293,0.10628245025873184,0.04798061400651932,0.03348063305020332,0.05058204010128975,0.17883922159671783,0.19839176535606384,0.14659644663333893,0.09289384633302689,0.046946000307798386,0.016967816278338432,-0.24599415063858032,-0.22083035111427307,-0.23827692866325378,-0.20355288684368134,-0.09406838566064835,-0.02671331726014614,-0.02685202844440937,0.10968207567930222,0.0538632869720459,-0.1967705339193344,-0.190314382314682,-0.1381479650735855,0.2598235607147217,-0.0978485494852066,-0.22819964587688446,-0.15840190649032593,-0.1430305689573288,-0.33116862177848816,0.23568186163902283,0.05436043068766594,0.011860264465212822,0.16557109355926514,-0.36186686158180237,0.02463310956954956,-0.1996515393257141,0.09327997267246246,-0.17235471308231354,0.13313257694244385,-0.04175050929188728,0.17693153023719788,-0.08876563608646393,-0.17364217340946198,-0.17678724229335785,0.31514349579811096,0.025052759796380997,0.04145249351859093,-0.06055590882897377,-0.16541403532028198,0.19785647094249725,-0.006905845366418362,-0.06857794523239136,-0.01297837495803833,-0.014715751633048058,-0.0765470638871193,-0.22209611535072327,0.32330676913261414,-0.14500194787979126,0.1254693865776062,0.11155153065919876,-0.007389431819319725,-0.2382853776216507,-0.03194563835859299,0.030663205310702324,-0.13928428292274475,0.1281270980834961,-0.07726286351680756,-0.25983670353889465,0.22858379781246185,0.17520421743392944,0.1302463263273239,0.09278559684753418,0.04652721807360649,-0.007974999956786633,0.020420923829078674,-0.15794144570827484,0.1087065115571022,-0.02570623904466629,0.09485962241888046,-0.23127031326293945,0.10229451209306717,0.09409064799547195,0.031797394156455994,0.2075047791004181,0.010021625086665154,-0.055906496942043304,-0.06868503242731094,0.1187545508146286,-0.3361269533634186,-0.17113858461380005,-0.02865631878376007,-0.16911807656288147,-0.37431448698043823,-0.07040221989154816,0.00295406486839056,0.1399047076702118,0.10285413265228271,-0.012248911894857883,-0.10740359127521515,0.14315006136894226,0.007016888819634914,-0.2389175146818161,-0.2690475285053253,-0.07614410668611526,0.1920141577720642,0.20697186887264252,-0.2964780032634735,0.294106662273407,0.22312653064727783,-0.0966089516878128,0.27073124051094055,-0.20478402078151703,0.10303756594657898,0.06680048257112503,0.027842942625284195,-0.05004475265741348,0.19907864928245544,0.002264474518597126,-0.20953263342380524,0.13965140283107758,-0.16396641731262207,0.10652535408735275,0.12624235451221466,0.24580858647823334);\nfloat w2[64] = float[64](-0.037627652287483215,-0.04721059650182724,0.10331153869628906,-0.003279761876910925,0.018483910709619522,-0.07728970050811768,0.0023611593060195446,-0.1081169918179512,-0.031953245401382446,-0.0011707200901582837,0.15796048939228058,0.05362563207745552,0.04315163195133209,-0.030300322920084,0.047273024916648865,-0.06979307532310486,-0.11747297644615173,0.07404306530952454,-0.007222822867333889,0.033472415059804916,-0.07653094828128815,-0.10037235915660858,0.08676105737686157,0.059604711830616,-0.02251582406461239,-0.013360588811337948,-0.0878024771809578,-0.02854633331298828,0.02425902709364891,0.027499059215188026,0.05838710442185402,0.014263704419136047,0.028584493324160576,0.09932110458612442,-0.09932925552129745,0.06605923920869827,0.0420692153275013,-0.1443200707435608,0.058018770068883896,0.08876988291740417,0.0020808011759072542,0.04425524175167084,0.010630695149302483,-0.04017648845911026,-0.024900995194911957,-0.03725288435816765,-0.017006555572152138,-0.0008521393756382167,0.07511387765407562,-0.050601519644260406,0.09272532165050507,0.008488296531140804,0.011780519038438797,-0.015431687235832214,0.02026827447116375,-0.06025946885347366,-0.0035887188278138638,0.07429978996515274,-0.1464838683605194,-0.10232546180486679,-0.04530342295765877,-0.037816908210515976,-0.024610430002212524,0.05378115922212601);\n\n//Try this one:\n//const int nh = 16;\n//float b1[16] = float[16](-0.12456363439559937,0.0014599391724914312,-0.12625542283058167,0.05571504682302475,-0.1598033756017685,-0.08626449108123779,0.07393699884414673,0.0771358460187912,0.11873732507228851,-0.17219682037830353,-0.001982270972803235,0.2054184228181839,-0.08368118107318878,-0.2386559247970581,0.015173559077084064,-0.0485927201807498);\n//float w1[256] = float[256](0.29878896474838257,-0.01218341663479805,0.21580684185028076,0.007059651892632246,0.13408909738063812,0.03354993835091591,-0.35135456919670105,-0.23545853793621063,0.14670734107494354,-0.1725963056087494,-0.20654956996440887,0.10031343996524811,0.27579233050346375,0.07302017509937286,-0.00532222306355834,0.014191029593348503,-0.02150343731045723,0.1765517294406891,-0.10739174485206604,0.21030758321285248,-0.010910941287875175,0.2540366053581238,0.06531855463981628,-0.2630201280117035,-0.19651105999946594,-0.08421865850687027,0.00426778057590127,-0.24097266793251038,-0.15228746831417084,-0.1968274712562561,-0.1300676017999649,0.1935960352420807,0.014995880424976349,-0.10440982133150101,0.27504652738571167,0.2397836148738861,0.03602788224816322,0.06728735566139221,0.22330553829669952,0.07884912192821503,0.05646572634577751,-0.20508337020874023,0.16997914016246796,0.10849592834711075,-0.01899620145559311,0.11630455404520035,-0.1491909772157669,0.1897490918636322,0.17633457481861115,-0.29445508122444153,-0.030528217554092407,0.048705488443374634,0.310365229845047,0.057619597762823105,-0.07535679638385773,-0.1397850066423416,-0.26017892360687256,0.2149643450975418,0.20088770985603333,-0.20902326703071594,-0.03420129045844078,-0.26269063353538513,-0.0253387950360775,-0.010661919601261616,0.10321572422981262,0.12564872205257416,-0.07548441737890244,-0.2623882591724396,-0.05894380435347557,0.16490323841571808,-0.1613217443227768,0.20617260038852692,0.13020744919776917,-0.040533646941185,-0.22535401582717896,-0.2245151549577713,0.16697479784488678,-0.17086300253868103,0.10498687624931335,0.2541685104370117,-0.13744774460792542,-0.05267626419663429,0.25038236379623413,-0.22175106406211853,-0.2730776071548462,-0.1694387048482895,0.10514041036367416,-0.02866409160196781,-0.1387905478477478,-0.12291198968887329,0.09265997260808945,-0.24002069234848022,-0.08158763498067856,0.15747614204883575,-0.09706073999404907,-0.14679589867591858,0.07758203893899918,-0.16400744020938873,0.10406982153654099,-0.031934838742017746,0.18125997483730316,-0.06274227052927017,-0.14909091591835022,0.1020122542977333,-0.23082520067691803,0.13469554483890533,0.19411182403564453,0.23168238997459412,-0.1090119257569313,-0.24981936812400818,0.1696825474500656,-0.011052995920181274,0.21963302791118622,-0.03662069886922836,0.006105206906795502,0.18052692711353302,-0.26270368695259094,-0.02183554321527481,-0.2924295663833618,0.030967125669121742,0.234159916639328,-0.01245027594268322,0.2412480115890503,-0.285267174243927,0.017854131758213043,-0.0990714505314827,0.08976224809885025,-0.05474643409252167,-0.06104690954089165,0.15054281055927277,0.019128913059830666,0.11521913856267929,0.2660802900791168,0.08595430105924606,0.27080997824668884,-0.19135352969169617,0.1547759771347046,-0.0939982607960701,-0.24354322254657745,-0.3342815041542053,-0.11826377362012863,0.04889857769012451,-0.005967918783426285,-0.0921286940574646,-0.031696684658527374,0.15567676723003387,0.004692587535828352,-0.07729031890630722,-0.0008721477352082729,-0.16060221195220947,0.0020936657674610615,0.04631349444389343,-0.21317866444587708,-0.16970258951187134,-0.06047441437840462,-0.04840724542737007,-0.1907571256160736,0.06838184595108032,-0.162420392036438,0.2360328584909439,-0.27175790071487427,-0.028165964409708977,0.43607330322265625,0.21265295147895813,-0.012519770301878452,-0.017366932705044746,-0.05396779254078865,-0.1466580480337143,0.08263175189495087,0.01665094494819641,0.020021574571728706,0.007871863432228565,0.34841856360435486,0.08909270912408829,-0.16889746487140656,-0.052795879542827606,-0.10766635835170746,-0.07223393768072128,-0.1461402326822281,-0.17135562002658844,-0.0943448543548584,-0.06015118211507797,-0.16038385033607483,0.048993825912475586,0.13213574886322021,-0.20373283326625824,0.014941846951842308,0.2745451331138611,-0.007811054587364197,-0.22924306988716125,0.1981671154499054,-0.3347971439361572,0.12327034026384354,0.1606578528881073,0.34393227100372314,-0.07774411141872406,-0.10012626647949219,0.0434986837208271,0.24916282296180725,-0.010352550074458122,0.14922979474067688,0.09712318331003189,-0.2562682032585144,0.022768793627619743,-0.11582522839307785,0.16360192000865936,-0.15763147175312042,-0.05788576230406761,0.17763979732990265,0.27340084314346313,-0.05838683620095253,-0.20121482014656067,0.08125601708889008,0.1264190971851349,0.1967422515153885,-0.013940039090812206,0.06389348953962326,-0.07705265283584595,0.12498480081558228,0.2561611831188202,0.29565849900245667,0.08343575894832611,-0.12196356803178787,0.08790794014930725,-0.009080911055207253,0.24673861265182495,-0.20935019850730896,0.05218696966767311,0.23003453016281128,-0.06693864613771439,0.013903125189244747,-0.030288642272353172,0.058424342423677444,-0.2727517783641815,-0.031235070899128914,0.031171290203928947,0.19753600656986237,0.41765472292900085,-0.1004558876156807,0.02985973469913006,0.09803547710180283,-0.1701550930738449,-0.23704859614372253,0.11541874706745148,0.007316194474697113,-0.16992172598838806,-0.004901675507426262,-0.24797937273979187,0.11361737549304962,0.177936851978302,-0.2095121294260025,-0.09153330326080322,0.13593526184558868,0.21086157858371735,0.03888098523020744,0.24321484565734863);\n//float w2[64] = float[64](-0.03250373899936676,0.09057306498289108,0.030593153089284897,-0.06133126839995384,-0.04308276250958443,-0.026851560920476913,-0.03364826738834381,0.011371323838829994,-0.01793096587061882,-0.022006554529070854,0.11912167817354202,-0.02678142674267292,0.058701518923044205,-0.04198088496923447,-0.07674757391214371,0.062471259385347366,-0.027833284810185432,0.0035922268871217966,0.007990445010364056,-0.049327969551086426,0.029241599142551422,0.02785487100481987,-0.03600781410932541,0.03756382688879967,-0.09185482561588287,0.040369030088186264,-0.026854194700717926,0.02558893710374832,0.08188150823116302,-0.009044118225574493,-0.02627185732126236,0.011147023178637028,0.0335681214928627,-0.017458448186516762,0.020906392484903336,-0.048782553523778915,0.030438020825386047,0.029651910066604614,0.0920482948422432,-0.07077661156654358,-0.023768993094563484,0.053314290940761566,-0.006387596018612385,0.014748336747288704,-0.0659249797463417,0.0554671473801136,0.010783422738313675,-0.008800152689218521,-0.027040531858801842,0.04030459746718407,0.029981281608343124,0.024064600467681885,-0.04541541263461113,-0.01698555424809456,0.025706863030791283,0.0007951497682370245,0.04347550496459007,0.07977954298257828,-0.06669053435325623,-0.06965472549200058,0.05847298353910446,-0.03257176652550697,-0.019977224990725517,0.018568849191069603);\n\n\n\n// Random Number Generator\n// From https://www.shadertoy.com/view/MsKGWz:\n// See Stack Overflow: http://stackoverflow.com/questions/5149544/can-i-generate-a-random-number-inside-a-pixel-shader/10625698#10625698\nfloat random_1( vec2 p )\n{\n    vec2 r = vec2(\n        23.14069263277926, // e^pi (Gelfond's constant)\n         2.665144142690225 // 2^sqrt(2) (Gelfondâ€“Schneider constant)\n    );\n    return fract( cos( mod( 12345678., 256. * dot(p,r) ) ) );\n}\n\n// Samples the neighbourhood (wrapping around where needed)\nvec2 coord (vec2 fragCoord, vec2 offset){\n    float x = mod(fragCoord.x + offset.x, iResolution.x);\n    float y = mod(fragCoord.y + offset.y, iResolution.y);\n    return vec2(x, y)/iResolution.xy;\n}\nvec4[9] sample_tex (vec2 fragCoord){\n    vec4 tex[9] = vec4[9](\n        (texture(iChannel0, coord(fragCoord, vec2(-1, 1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(0, 1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(1, 1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(-1, 0)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(0, 0)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(1, 0)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(-1, -1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(0, -1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(1, -1)))-0.5)*10.\n    );\n    return tex;\n}\n\n// The four kernels used\nvec4 ident(vec2 fragCoord, vec4[9] tex){\n    return tex[4]; // no offset\n}\nvec4 sobel_x(vec2 fragCoord, vec4[9] tex){\n    vec4 result = -1.*tex[0]-2.*tex[3]-1.*tex[6]+1.*tex[2]+2.*tex[5]+1.*tex[8];\n    return result;\n}\nvec4 sobel_y(vec2 fragCoord, vec4[9] tex){\n    vec4 result = -1.*tex[0]-2.*tex[1]-1.*tex[2]+1.*tex[6]+2.*tex[7]+1.*tex[8];\n    return result;\n}\nvec4 lap(vec2 fragCoord, vec4[9] tex){\n    vec4 result = 1.*tex[0]+2.*tex[1]+1.*tex[2]+2.*tex[3]-12.*tex[4]+2.*tex[5]+1.*tex[6]+2.*tex[7]+1.*tex[8]; // was an errant +2.\n    return result;\n}\n\n// Our activation function\nfloat relu(float x){\n    if (x > 0.){return x;}\n    return 0.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Sample BufC for kernels\n    vec4 tex[9] = sample_tex(fragCoord);\n    \n    // Apply filters\n    vec4 id = ident(fragCoord, tex);\n    vec4 sx = sobel_x(fragCoord, tex);\n    vec4 sy = sobel_y(fragCoord, tex);\n    vec4 ll = lap(fragCoord, tex);\n    \n    // Create x (4 channels x 4 filters, per channel conv)\n    float x[16];\n    x[0] = id.x;x[1] = sx.x;x[2] = sy.x;x[3] = ll.x;\n    x[4] = id.y;x[5] = sx.y;x[6] = sy.y;x[7] = ll.y;\n    x[8] = id.z;x[9] = sx.z;x[10] = sy.z;x[11] = ll.z;\n    x[12] = id.w;x[13] = sx.w;x[14] = sy.w;x[15] = ll.w;\n    \n    \n    // First layer \n    float l1_out[nh];\n    for (int i = 0; i < nh; i++){\n        // Dot Product equivalent to:\n        // dot_product = x @ w1_i\n        float dot_product = 0.;\n        for (int j = 0; j < 16; j++){\n            dot_product += x[j]*w1[i*16+j];\n        }\n        // Add bias then RELU\n        l1_out[i] = relu(dot_product+b1[i]);  ;\n    }\n    \n    // Second layer\n    float l2_out[4];\n    for (int i = 0; i < 4; i++){\n        float dp2 = 0.;\n        for (int j = 0; j < nh; j++){\n            dp2 += l1_out[j]*w2[i*nh+j];\n        }\n        l2_out[i] = dp2; \n    }\n    \n    // Proposed update\n    vec4 y = vec4(l2_out[0], l2_out[1], l2_out[2], l2_out[3]);\n    \n    // Output as prev state\n    fragColor = id*0.1 + vec4(0.5);\n    \n    \n    // If (noise>0.5) apply update\n    vec2 p = vec2(uv.x/2.+sin(iTime/1000.), uv.y/2.+cos(iTime/1000.));\n    if (random_1(p) < 0.5){\n        fragColor = (id + y)*0.1 + vec4(0.5);\n    }\n    \n    // If (mouse down) paint grey around it\n    if(length(fragCoord.xy-iMouse.xy/2.)<(20.)){\n        if (iMouse.z>0.5){fragColor = vec4(0.5);}\n    }\n    \n    // Init \n    if (iFrame==0){fragColor = vec4(0.5);}\n    \n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}