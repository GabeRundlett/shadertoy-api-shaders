{
    "Shader": {
        "info": {
            "date": "1586345911",
            "description": "just circles and stuff, using the kind of min/max distance functions used in raymarching to perform csg in 2d.\n\nridiculous overkill on the antialiasing.",
            "flags": 0,
            "hasliked": 0,
            "id": "tdBczm",
            "likes": 4,
            "name": "incomplete circle experiment",
            "published": 3,
            "tags": [
                "2d",
                "geometry"
            ],
            "usePreview": 0,
            "username": "benhardy",
            "viewed": 304
        },
        "renderpass": [
            {
                "code": "float circle(vec2 pos, vec2 centre, float radius) {\n\n\treturn length(pos - centre) - radius;\n}\n\nfloat edge(float dist, float thickness) {\n    return abs(dist) - thickness;\n}\n\n#define ID_LEFT 1.0\n#define ID_MIDDLE 2.0\n#define ID_RIGHT 3.0\n\nvec2 measure(vec2 uv )\n{ \n    vec3 col = vec3(0);\n    vec2 center = vec2(0);\n    float rad = 0.25;\n    float thicc = 0.005;\n    vec2 movingCentre = 0.125 * vec2( sin(iTime), cos(iTime*1.1));\n    \n    // the red one\n\tfloat c1 = circle(uv, vec2(-0.25, 0), 0.252);\n    // the blue one\n\tfloat c4 = circle(uv, vec2(0.25, 0), 0.252);\n    // the green one\n    float c3 = circle(uv, movingCentre, 0.202);\n    // the hole around the green one\n    float hole = circle(uv, movingCentre, 0.252);\n\n    float left = max(c1, -hole);\n    if (left <= 0.0) {\n        return vec2(left, ID_LEFT);\n    }\n    \n    float right = max(c4, -hole);\n    if (right <= 0.0) {\n        return vec2(right, ID_RIGHT);\n    }\n    if (c3 <= 0.0) {\n        return vec2(c3, ID_MIDDLE);\n    }\n}\n\n#define THICC 0.005\n#define NORM_DELTA 0.00001\n\nvec3 trace(vec2 uv) {\n    vec2 di = measure(uv);\n    vec2 dx = measure(uv + vec2(-NORM_DELTA, 0));\n    vec2 dy = measure(uv + vec2(0, -NORM_DELTA));\n    vec2 dx2 = measure(uv + vec2(NORM_DELTA, 0));\n    vec2 dy2 = measure(uv + vec2(0, NORM_DELTA));\n    vec2 normal = normalize(vec2(dx2.x - dx.x, dy2.x - dy.x));\n    vec2 toLight = normalize(vec2(-0.5, 1.0));\n    float lightD = dot(normal, toLight);\n    vec3 lighting =  vec3(lightD, lightD, lightD);\n    vec3 col = vec3(0);\n    \n    if (di.y == ID_LEFT) {\n        if (di.x < -THICC) {\n            float m = fract(di.x*50.0);\n            col = vec3(0.5,0.1,0.1);\n            if (m < 0.15) {\n                col *= 0.7;\n            }\n        } else {\n            col = vec3(1,1,1);\n        }\n    }\n    \n    if (di.y == ID_RIGHT) {\n        if (di.x < -THICC) {\n            float m = fract(di.x*50.0);\n            col = vec3(0.1,0.1,0.5);\n            if (m < 0.15) {\n                col *= 0.7;\n            }\n        } else {\n            col = vec3(1,1,1);\n        }\n    }\n    \n    if (di.y == ID_MIDDLE) {\n        if (di.x < -THICC) {\n            float m = fract(di.x*50.0);\n            col = vec3(0.1,0.5,0.1);\n            if (m < 0.15) {\n                col *= 0.7;\n            }\n        } else {\n            col = vec3(1,1,1);\n        }\n    }\n    \n    if (di.x < -THICC && di.y > 0.0) {\n        float ratio = cos(di.x * 10.0);\n\t\tcol += lighting * 0.5 * ratio;\n    }\n    return clamp(col, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    float aspect = iResolution.y / iResolution.x;\n    \n    \n    vec3 col = vec3(0);\n    for (int i=-2; i <= 2; i++) {\n        float dx = 0.20 * float(i);\n\t    for (int j = -2; j <= 2; j++) {\n            float dy = 0.20 * float(j);\n            vec2 subpixel = fragCoord+vec2(dx,dy);\n\t\t    vec2 uv = (subpixel/iResolution.xy-vec2(0.5)) \n                * vec2(1, aspect);\n            col += trace(uv);\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col / 25.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}