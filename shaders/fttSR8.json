{
    "Shader": {
        "info": {
            "date": "1638703203",
            "description": "Hills covered with bending reflective forks (why?)",
            "flags": 0,
            "hasliked": 0,
            "id": "fttSR8",
            "likes": 13,
            "name": "Forkscape",
            "published": 3,
            "tags": [
                "reflection",
                "landscape",
                "fork"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 378
        },
        "renderpass": [
            {
                "code": "// \"Forkscape\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCaps2Df (vec2 p, float r, float h);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat Minv3 (vec3 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec4 Hashv4v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nstruct GrParm {\n  float gFac, hFac, fWav, aWav;\n};\nGrParm gr;\n\nstruct Arc {\n  vec2 cs;\n  float chDist, rad, ang;\n};\nArc arcc[3];\n\nstruct GrStat {\n  vec3 rPos;\n  float sAng, fSize;\n  Arc arc;\n};\nGrStat gst;\n\nvec4 dateCur;\nvec3 sunDir, qHit;\nvec2 gId;\nfloat tCur, dstFar, hgSize;\nint idObj;\nconst float pi = 3.1415927, sqrt3 = 1.732051;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat GrndHt (vec2 p)\n{ // (from \"Desert Reflections 2\")\n  mat2 qRot;\n  vec2 q;\n  float f, wAmp;\n  qRot = mat2 (0.8, -0.6, 0.6, 0.8) * gr.fWav;\n  q = gr.gFac * p;\n  wAmp = 4. * gr.hFac;\n  f = 0.;\n  for (int j = 0; j < 4; j ++) {\n    f += wAmp * Noisefv2 (q);\n    wAmp *= gr.aWav;\n    q *= qRot;\n  }\n  return f;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.5, 0.8 * h);\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = VAR_ZERO; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (p.y > GrndHt (p.xz)) sLo = s;\n      else sHi = s;\n    }\n    dHit = 0.5 * (sLo + sHi);\n  }\n  return dHit;\n}\n\nfloat GrndHtN (vec2 p)\n{\n  return GrndHt (p) + 0.04 * Fbm2 (8. * p.yx);\n}\n\nvec3 GrndNf (vec3 p)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  return normalize (vec3 (GrndHtN (p.xz) - vec2 (GrndHtN (p.xz + e.xy),\n     GrndHtN (p.xz + e.yx)), e.x)).xzy;\n}\n\nvoid SetGrdConf ()\n{\n  vec4 h;\n  vec2 p;\n  int j;\n  p = HexToPix (gId * hgSize);\n  h = Hashv4v2 (17.1 * gId + 0.3);\n  gst.rPos.xz = 0.2 * hgSize * sin (2. * pi * h.x + vec2 (0.5 * pi, 0.));\n  gst.rPos.y = GrndHt (HexToPix (gId * hgSize) + gst.rPos.xz);\n  gst.sAng = 0.1 * (h.z - 0.5) * tCur;\n  j = int (mod (2. * gId + gId.yx, 3.));\n  if (j == 0) gst.arc = arcc[0];\n  else if (j == 1) gst.arc = arcc[1];\n  else gst.arc = arcc[2];\n  gst.fSize = 0.8 + 0.2 * h.w;\n  if (abs (p.x) < 0.5 * sqrt3 * hgSize || h.y < 0.2) gst.fSize = 0.;\n}\n\n#define F(x) (sin (x) / x - b)\n\nfloat SecSolve (float b)\n{  // (from \"Bucking Bronco\")\n  vec3 t;\n  vec2 f;\n  float x;\n  if (b < 0.95) {\n    t.yz = vec2 (0.7, 1.2);\n    f = vec2 (F(t.y), F(t.z));\n    for (int nIt = 0; nIt < 4; nIt ++) {\n      t.x = (t.z * f.x - t.y * f.y) / (f.x - f.y);\n      t.zy = t.yx;\n      f = vec2 (F(t.x), f.x);\n    }\n    x = t.x;\n  } else if (b < 1.) {\n    x = sqrt (10. * (1. - sqrt (1. - 1.2 * (1. - b))));\n  } else {\n    x = 0.;\n  }\n  return x;\n}\n\nvoid ArcConf ()\n{\n  float segRot, chLen;\n  for (int k = 0; k < 3; k ++) {\n    segRot = 0.99 * pi * (0.5 + 0.5 * sin ((1. + 0.1 * float (k)) * 0.5 * tCur));\n    chLen = length (vec2 (2. * sin (0.5 * segRot), 1.));\n    arcc[k].ang = max (1e-4, SecSolve (chLen / sqrt(5.)));\n    arcc[k].chDist = chLen / tan (arcc[k].ang);\n    arcc[k].rad = sqrt (arcc[k].chDist * arcc[k].chDist + chLen * chLen);\n    arcc[k].cs = sin (- arcc[k].ang + vec2 (0.5 * pi, 0.));\n  }\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, rr, sk, bLen[2];\n  dMin = dstFar;\n  if (gst.fSize > 0.) {\n    p.xz -= HexToPix (gId * hgSize);\n    p -= gst.rPos;\n    q = p;\n    q.y -= -1.;\n    d = PrCylDf (q.xzy, 0.5, 2.);\n    DMINQ (1);\n    p.y -= 1.;\n    dMin /= gst.fSize;\n    p /= gst.fSize;\n    bLen[0] = 1.;\n    bLen[1] = 1.;\n    rr = gst.arc.rad * gst.arc.cs.y;\n    p.y -= 1.;\n    p.xz = Rot2D (p.xz, gst.sAng);\n    p.xy = vec2 (- p.y, p.x) - vec2 (1.5 * rr - bLen[1], gst.arc.chDist - gst.arc.rad);\n    for (int k = 0; k < 2; k ++) {\n      sk = sign (float (k) - 0.5);\n      q = p;\n      q.y *= - sk;\n      q.xy -= vec2 (rr * (sk - 0.5), - gst.arc.chDist);\n      d = max (max (PrRoundBox2Df (vec2 (length (q.xy) - gst.arc.rad, abs (q.z) - 0.27),\n         vec2 (0., 0.18), 0.07), dot (vec2 (abs (q.x), q.y), gst.arc.cs)), - sk * q.x);\n      DMINQ (2);\n      q.xy -= vec2 (- bLen[k] * sk, gst.arc.rad);\n      d = PrRoundBoxDf (vec3 (q.xy, abs (q.z) - 0.27), vec3 (bLen[k], 0., 0.18), 0.07);\n      if (k == 1) d = SmoothMax (SmoothMin (d, PrRoundBoxDf (q - vec3 (-0.1 * bLen[1], 0., 0.),\n         vec3 (0.9 * bLen[1], 0.05, 0.5), 0.05), 0.1), - max (PrCaps2Df (vec2 (mod (q.z + 0.15, 0.3) -\n         0.15, q.x + 0.5), 0.08, 1.), abs (q.z) - 0.5), 0.03);\n      else d = SmoothMin (d, PrRoundBoxDf (q - vec3 (0.1 * bLen[0], 0., 0.),\n         vec3 (0.9 * bLen[0], 0.05, 0.6), 0.1), 0.1);\n      DMINQ (2);\n    }\n    dMin *= gst.fSize;\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s, eps;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.y == 0.) rd.y = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  eps = 0.01;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / hgSize;\n  pM = HexToPix (PixToHex (ro.xz / hgSize));\n  gIdP = vec2 (-999.);\n  dHit = eps;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n    s = Minv3 (hv);\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId != gIdP) {\n      gIdP = gId;\n      SetGrdConf ();\n    }\n    d = ObjDf (p);\n    if (dHit + d < s) dHit += d;\n    else {\n      dHit = s + eps;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n    }\n    if (d < eps || dHit > dstFar || p.y < 0.) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 SkyBg (vec3 rd)\n{\n  rd.y = abs (rd.y);\n  return mix (vec3 (0.2, 0.3, 0.7), vec3 (0.4, 0.4, 0.7), pow (1. - max (rd.y, 0.), 8.));\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  float sd, f;\n  ro.x -= tCur;\n  sd = max (dot (rd, sunDir), 0.);\n  f = Fbm2 (0.05 * (ro + rd * (100. - ro.y) / (rd.y + 0.0001)).xz);\n  return mix (SkyBg (rd) + vec3 (1., 1., 0.9) * (0.3 * pow (sd, 32.) + 0.2 * pow (sd, 512.)),\n     vec3 (1., 1., 0.95) * (1. - 0.1 * smoothstep (0.8, 0.95, f)), clamp (0.9 * f * rd.y, 0., 1.));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstGrnd, dstObj, dFac, dMin, f, sh;\n  bool isRef;\n  ArcConf ();\n  dstObj = ObjRay (ro, rd);\n  dstGrnd = GrndRay (ro, rd);\n  isRef = false;\n  if (dstObj < min (dstGrnd, dstFar) && idObj == 2) {\n    isRef = true;\n    ro += dstObj * rd;\n    gId = PixToHex (ro.xz / hgSize);\n    vn = ObjNf (ro);\n    rd = reflect (rd, vn);\n    ro += 0.01 * rd;\n    dstObj = ObjRay (ro, rd);\n    dstGrnd = GrndRay (ro, rd);\n  }\n  dMin = min (dstObj, dstGrnd);\n  if (dMin < dstFar) {\n    dFac = 1. - smoothstep (0.35, 0.5, dMin / dstFar);\n    ro += dMin * rd;\n    if (dstObj < dstGrnd) {\n      vn = ObjNf (ro);\n      if (idObj == 1) {\n        vn = VaryNf (8. * qHit, vn, 4. * dFac);\n        col = vec3 (0.8);\n      } else if (idObj == 2) {\n        col = vec3 (0.8, 0.8, 1.);\n      }\n      col *= 0.7 + 0.3 * dFac;\n    } else {\n      vn = GrndNf (ro);\n      col = 0.9 * mix (vec3 (0.7, 0.9, 0.5), vec3 (0.8, 1., 0.5), smoothstep (3., 4., ro.y)) *\n         (1. - 0.3 * dFac * Fbm2 (2. * ro.xz));\n      if (dFac > 0.) {\n        gId = PixToHex (ro.xz / hgSize);\n        SetGrdConf ();\n        if (gst.fSize > 0.) col *= 0.8 + 0.2 * smoothstep (0.5, 0.8, length (ro.xz -\n           HexToPix (gId * hgSize) - gst.rPos.xz));\n      }\n    }\n    sh = 1. - 0.5 * smoothstep (0.3, 0.7, Fbm2 (0.03 * ro.xz - tCur * vec2 (0.15, 0.)));\n    col *= 0.2 + 0.1 * max (0., vn.y) + 0.7 * sh * max (0., dot (vn, sunDir));\n    if (isRef) col = vec3 (1., 0.9, 0.8) * mix (col, vec3 (1.), 0.1);\n    col = mix (col, SkyBg (rd), pow (dMin / dstFar, 4.));\n  } else if (rd.y < 0.) {\n    col = SkyBg (rd);\n  } else col = SkyCol (ro, rd);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, t, hSum;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCur = mod (tCur + 10., 2400.) + 30. * floor (dateCur.w / 7200.);\n  az = 0.;\n  el = -0.01 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.2 * pi * sin (0.03 * pi * tCur);\n  }\n  hgSize = 8.;\n  gr.gFac = 0.1;\n  gr.hFac = 1.3;\n  gr.fWav = 1.9;\n  gr.aWav = 0.45;\n  dstFar = 150.;\n  vuMat = StdVuMat (el, az);\n  t = 3. * tCur;\n  hSum = 0.;\n  for (float k = 0.; k < 5.; k ++) hSum += GrndHt (vec2 (0., t + 0.7 * (k - 1.)));\n  ro = vec3 (0.1, 4. * gr.hFac + hSum / 5., t);\n  sunDir = normalize (vec3 (-1., 1., -1.));\n  rd = vuMat * normalize (vec3 (uv, 3.));\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCaps2Df (vec2 p, float r, float h)\n{\n  return length (p - vec2 (0., clamp (p.y, - h, h))) - r;\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec4 Hashv4v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39);\n  return fract (sin (dot (p, cHashVA2) + vec4 (0., cHashVA2.xy, cHashVA2.x + cHashVA2.y)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}