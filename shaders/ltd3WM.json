{
    "Shader": {
        "info": {
            "date": "1469710987",
            "description": "Same as my first toon shader but with outlines added. Rotate the camera with the mouse and change SHADES to set the number of shades in each palette.",
            "flags": 0,
            "hasliked": 0,
            "id": "ltd3WM",
            "likes": 14,
            "name": "Toon Shader Test 2",
            "published": 3,
            "tags": [
                "npr"
            ],
            "usePreview": 0,
            "username": "geoff",
            "viewed": 1729
        },
        "renderpass": [
            {
                "code": "#define AO\n#define SHADOWS\n\n#define SHADES 6.0\n\nmat3 rotX(float d){\n    float s = sin(d);\n    float c = cos(d);\n    return mat3(1.0, 0.0, 0.0,\n                0.0,   c,  -s,\n                0.0,   s,   c );\n}\n\nmat3 rotY(float d){\n    float s = sin(d);\n    float c = cos(d);\n    return mat3(  c, 0.0,  -s,\n                0.0, 1.0, 0.0,\n                  s, 0.0,   c );\n}\n\nfloat closeObj = 0.0;\n\nvec2 vecMin(vec2 a, vec2 b){\n    if(a.x <= b.x){\n        return a;\n    }\n    return b;\n}\n\nvec2 mapMat(vec3 p){\n    vec3 q = p;\n    q -= vec3(0.5 * cos(iTime), 0.0, 0.5 * sin(iTime));\n    vec3 r = p;\n    r -= vec3(-2.5 * cos(iTime), 0.25, -2.5 * sin(iTime));\n    r *= rotY(iTime);\n    vec2 sphere = vec2(length(q) - 1.0, 3.0);\n    vec2 torus = vec2(length(vec2(length(r.yz) - 0.75, r.x)) - 0.5, 3.0);\n    vec2 hplane = vec2(p.y + 1.0, 3.0);\n    vec2 vplane = vec2(-p.z + 4.0, 3.0);\n    \n    return vecMin(sphere, vecMin(torus, vecMin(hplane, vplane))); \n}\n\nfloat map(vec3 p){\n    return mapMat(p).x;\n}\n\nfloat trace(vec3 ro, vec3 rd){\n    float t = 0.0;\n    float d = 0.0;\n    vec2 c;\n    int inter = 0;\n    for(int i = 0; i < 2000; i++){\n        c = mapMat(ro + rd * t);\n        d = c.x;\n        if(d < 0.0001){\n            inter = 1;\n            break;\n        }\n        if(d <= 0.01 && map(ro + rd * (t + 0.2)) > 0.0001){\n            inter = 1;\n            c.y = 4.0;\n            break;\n        }\n        t += d;\n        if(t > 50.0){\n            break;\n        }\n    }\n    closeObj = c.y;\n    if(inter == 0){\n        t = -1.0;\n    }\n    return t;\n}\n\nvec3 normal(vec3 p){\n    return normalize(vec3(map(vec3(p.x + 0.0001, p.yz)) - map(vec3(p.x - 0.0001, p.yz)),\n                          map(vec3(p.x, p.y + 0.0001, p.z)) - map(vec3(p.x, p.y - 0.0001, p.z)),\n                \t      map(vec3(p.xy, p.z + 0.0001)) - map(vec3(p.xy, p.z - 0.0001))));\n}\n\nvec3 camPos = vec3(0.0, 1.0, 0.0);\nvec3 lightPos = vec3(0.0, 1.0, -1.0);\n\nvec3 diff(vec3 c, float k, vec3 p){\n    vec3 n = normal(p);\n    vec3 l = normalize(lightPos - p);\n    return c * k * max(0.0, dot(n, l));\n}\n\nfloat shadow(vec3 ro, vec3 rd){\n    float t = 0.2;\n    float d = 0.0;\n    float shadow = 1.0;\n    for(int iter = 0; iter < 1000; iter++){\n        d = map(ro + rd * t);\n        if(d < 0.0001){\n            return 0.0;\n        }\n        if(t > length(ro - lightPos) - 0.5){\n            break;\n        }\n        shadow = min(shadow, 128.0 * d / t);\n        t += d;\n    }\n    return shadow;\n}\n\nfloat occlusion(vec3 ro, vec3 rd){\n    float k = 1.0;\n    float d = 0.0;\n    float occ = 0.0;\n    for(int i = 0; i < 25; i++){\n        d = map(ro + 0.1 * k * rd);\n        occ += 1.0 / pow(2.0, k) * (k * 0.1 - d);\n        k += 1.0;\n    }\n    return 1.0 - clamp(1.0 * occ, 0.0, 1.0);\n}\n\nvec3 colInterp(vec3 bcol, vec3 ecol, vec3 inCol, float s){\n    float st = 1.0 / SHADES;\n    float avg = inCol.x * SHADES; \n    float band = ceil(avg) / SHADES;\n    if(s != 1.0){\n        band = max(0.0, band - st);\n    }\n    return mix(bcol, ecol, band);\n}\n\nvec3 palette(float id, vec3 inCol, float s){\n    if(id == 1.0){\n        vec3 mcol = vec3(0.95);\n        vec3 bcol = mcol / 4.0;\n        return colInterp(bcol, mcol, inCol, s);\n    }\n    if(id == 2.0){\n        vec3 mcol = vec3(0.874510, 0.490196, 0.376471);\n        mcol = vec3(1.0, 1.0, 0.0);\n        vec3 bcol = mcol / 4.0;\n        bcol = vec3(0.0, 0.0, 1.0);\n        return colInterp(bcol, mcol, inCol, s);\n    }\n    if(id == 3.0){\n        vec3 mcol = vec3(0.929412, 0.882353, 0.788235);\n        mcol = vec3(1.0, 0.0, 0.0);\n        vec3 bcol = mcol / 4.0;\n        bcol = vec3(0.0, 0.0, 1.0);\n        return colInterp(bcol, mcol, inCol, s);\n    }\n    return vec3(0.0, 1.0, 0.0);\n}\n\nfloat s = 1.0;\nfloat ao = 1.0;\n\nvec3 colour(vec3 p, float id){\n    \n    #ifdef SHADOWS\n    float s = shadow(p, normalize(lightPos - p));\n    #endif\n    \n    #ifdef AO\n    float ao = occlusion(p, normal(p));\n    #endif\n    \n    if(id == 4.0){\n        return vec3(0.0);\n    }\n    \n    return palette(id, diff(vec3(1.0), 1.0, p) * ao, s);\n} \n\nfloat lastx = 0.0;\nfloat lasty = 0.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    camPos = vec3(0.0 , 0.0, -5.0);\n    lightPos = vec3(2.0, 2.0, -6.0);\n    lastx += iMouse.x - 0.5;\n    lasty += iMouse.y - 0.5;\n    vec3 ro = camPos;\n    vec3 rd = normalize(rotY(radians(lastx)) * rotX(radians(lasty)) * vec3(uv, 1.0));\n    float d = trace(ro, rd);\n    vec3 c = ro + rd * d;\n    vec3 col = vec3(1.0);\n    //If intersected\n    if(d > 0.0){\n    \tcol = colour(c, closeObj);\n    \tcol *= 1.0 / exp(d * 0.1);\n    }else{\n        col = vec3(0.0);\n    }\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}