{
    "Shader": {
        "info": {
            "date": "1468962857",
            "description": "Mirror ball in a hall of other spheres. ",
            "flags": 0,
            "hasliked": 0,
            "id": "Xt33DH",
            "likes": 4,
            "name": "Mirror Ball in Hallway",
            "published": 3,
            "tags": [
                "spheretracing"
            ],
            "usePreview": 0,
            "username": "geoff",
            "viewed": 761
        },
        "renderpass": [
            {
                "code": "#define MAX_BOUNCE 1\n\nmat3 rotX(float d){\n    float s = sin(d);\n    float c = cos(d);\n    return mat3(1.0, 0.0, 0.0,\n                0.0,   c,  -s,\n                0.0,   s,   c );\n}\n\nmat3 rotY(float d){\n    float s = sin(d);\n    float c = cos(d);\n    return mat3(  c, 0.0,  -s,\n                0.0, 1.0, 0.0,\n                  s, 0.0,   c );\n}\n\nfloat closeObj = 0.0;\n\nvec2 vecMin(vec2 a, vec2 b){\n    if(a.x <= b.x){\n        return a;\n    }\n    return b;\n}\n\nvec2 mapMat(vec3 p){\n    vec3 q = vec3(p.x, p.y, mod(p.z, 3.0) - 1.5);\n    vec3 r = vec3(q.x - 1.5, q.y, q.z);\n    vec3 s = vec3(q.x + 1.5, q.y, q.z);\n    \n    vec2 spha = vec2(length(r) - 1.0, 1.0);\n    vec2 sphb = vec2(length(s) - 1.0, 1.0);\n    vec2 sphm = vec2(length(p - vec3(0.0, 1.75, iTime + 3.0)) - 1.0, 3.0);\n    vec2 bPlane = vec2(p.y + 1.0, 2.0);\n    vec2 rPlane = vec2(p.x + 3.0, 4.0);\n    vec2 lPlane = vec2(-p.x + 3.0, 4.0);\n    vec2 tPlane = vec2(-p.y + 4.0, 2.0);\n    \n    return vecMin(tPlane, vecMin(lPlane, vecMin(rPlane, vecMin(bPlane, vecMin(sphm, vecMin(spha, sphb))))));\n}\n\nfloat map(vec3 p){\n    return mapMat(p).x;\n}\n\nfloat trace(vec3 ro, vec3 rd){\n    float t = 0.0;\n    float d = 0.0;\n    vec2 c;\n    int inter = 0;\n    for(int i = 0; i < 1000; i++){\n        c = mapMat(ro + rd * t);\n        d = c.x;\n        if(d < 0.0001){\n            inter = 1;\n            break;\n        }\n        t += d;\n        if(t > 25.0){\n            break;\n        }\n    }\n    closeObj = c.y;\n    if(inter == 0){\n        t = -1.0;\n    }\n    return t;\n}\n\nvec3 normal(vec3 p){\n    return normalize(vec3(map(vec3(p.x + 0.0001, p.yz)) - map(vec3(p.x - 0.0001, p.yz)),\n                          map(vec3(p.x, p.y + 0.0001, p.z)) - map(vec3(p.x, p.y - 0.0001, p.z)),\n                \t      map(vec3(p.xy, p.z + 0.0001)) - map(vec3(p.xy, p.z - 0.0001))));\n}\n\nvec3 camPos = vec3(0.0, 1.0, 0.0);\nvec3 lightPos = vec3(0.0, 1.0, -1.0);\n\nvec3 amb(vec3 c, float k){\n    return c * k;\n}\n\nvec3 diff(vec3 c, float k, vec3 p){\n    vec3 n = normal(p);\n    vec3 l = normalize(lightPos - p);\n    return c * k * max(0.0, dot(n, l));\n}\n\nvec3 spec(vec3 c, float k, vec3 p, float a){\n    vec3 n = normal(p);\n    vec3 l = normalize(lightPos - p);\n    vec3 v = normalize(p - camPos);\n    float facing = dot(l, n) > 0.0 ? 1.0 : 0.0;\n    vec3 r = reflect(l, n);\n    return c * k * facing * pow(max(0.0, dot(r, v)), a);\n}\n\nvec3 colour(vec3 p, float id){\n    if(id == 1.0){\n        vec3 col = vec3(1.0, 0.0, 0.0);\n        return amb(col, 0.5) + diff(col, 0.7, p) + spec(vec3(1.0), 0.75, p, 16.0);\n    }\n    if(id == 2.0){\n        vec3 col = vec3(mod(ceil(p.xz), 2.0) == vec2(0.0) || mod(ceil(p.xz), 2.0) == vec2(1.0) ? 0.8 : 0.4);\n        return amb(col, 0.5) + diff(col, 0.8, p) + spec(vec3(1.0), 0.25, p, 8.0);\n    }\n    vec3 col = vec3(mod(ceil(p.zy), 2.0) == vec2(0.0) || mod(ceil(p.zy), 2.0) == vec2(1.0) ? 0.8 : 0.4);\n    return amb(col, 0.5) + diff(col, 0.8, p) + spec(vec3(1.0), 0.25, p, 8.0);\n} \n\nfloat shadow(vec3 ro, vec3 rd){\n    float t = 0.005;\n    float d = 0.0;\n    float shadow = 1.0;\n    for(int iter = 0; iter < 1000; iter++){\n        d = map(ro + rd * t);\n        if(d < 0.0001){\n            return 0.0;\n        }\n        if(t > length(ro - lightPos) - 0.5){\n            break;\n        }\n        shadow = min(shadow, 128.0 * d / t);\n        t += d;\n    }\n    return shadow;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    camPos = vec3(0.0, 1.0, iTime);\n    lightPos = vec3(0.5 * sin(iTime), 1.0, iTime + 0.5);\n    vec3 ro = camPos;\n    vec3 rd = normalize(rotX(radians(-10.0)) * vec3(uv, 1.0));\n    float d = trace(ro, rd);\n    vec3 c = ro + rd * d;\n    vec3 col = vec3(1.0);\n    //If intersected\n    if(d > 0.0){\n        //If mirror\n        if(closeObj == 3.0){\n            //Reflect ray\n            for(int i = 0; i < MAX_BOUNCE; i++){\n                vec3 n = normal(c);\n                vec3 l = c - lightPos;\n                vec3 rr = reflect(l, n);\n                d = trace(c + rr * 0.0005, rr);\n                if(d == -1.0){\n                    break;\n                }\n                c = c + rr * d;\n                if(closeObj == 3.0){\n                    continue;\n                }\n                break;\n            }\n            //If reflection did not intersect\n            if(d == -1.0){\n                col = vec3(0.0);\n            }else if(closeObj == 3.0){\n                col = vec3(1.0);\n                vec3 n = normal(c);\n                vec3 l = normalize(c - lightPos);\n                col *= max(0.0, dot(n, l));\n                col += vec3(0.25);\n      \t\t//Colour objects in mirror\n            }else{\n                col = colour(c, closeObj);\n                //float s = shadow(c, normalize(lightPos - c)); //Enable shadows in mirrored world\n            \tcol -= vec3(0.15);\n            }\n        //Colour ray\n        }else{\n            col = colour(c, closeObj);\n            float s = shadow(c, normalize(lightPos - c));\n            col -= vec3(0.5 - 0.5 * s);\n        }\n        //Fog\n    \tcol *= 1.0 / exp(d * 0.1);\n    }else{\n        col = vec3(0.0);\n    }\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}