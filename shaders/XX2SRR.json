{
    "Shader": {
        "info": {
            "date": "1710245119",
            "description": "Samsa unveils a dance of geometry, where distinct bodies seamlessly merge, creating a fluid-like sculpture in permanent flux. This metamorphosis perpetually evolves, as if on a quest to discover its ultimate and absolute form.",
            "flags": 64,
            "hasliked": 0,
            "id": "XX2SRR",
            "likes": 10,
            "name": "SAMSA - Fragment II",
            "published": 3,
            "tags": [
                "raymarching",
                "reflection",
                "normal",
                "silver",
                "chrome",
                "morph",
                "fresnel",
                "bool",
                "cineshader",
                "samsa"
            ],
            "usePreview": 0,
            "username": "Kris_Katur",
            "viewed": 685
        },
        "renderpass": [
            {
                "code": "/* \"Samsa - Fragment III\"\n    2024\n    by KΛTUR\n    License - Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Unported License.\n\n    \n    Fragment I   - https://www.shadertoy.com/view/MflGDM\n    Fragment II  - https://www.shadertoy.com/view/XX2SRR\n    Fragment III - https://www.shadertoy.com/view/XX2SWR\n    Fragment IV  - https://www.shadertoy.com/view/4XBSRK\n    \n    https://lichterloh.tv/portfolio/samsa/\n    \n//========================================================//\n\n               ∧∨∧∨∧∨∧∨∧∨∧∨∧∨∧○∨∧∧∨∧∨∧∨∧∨∧∨∧∨∧\n               █████¬█████¬██¬¬¬██¬█████¬█████\n               █¬¬¬¬¬██¬¬█¬███¬███¬█¬¬¬¬¬██¬¬█\n               █████¬██■■█¬█¬¬█¬¬█¬█████¬██■■█\n               ¬¬¬¬█¬██¬¬█¬█¬¬¬¬¬█¬¬¬¬¬█¬██¬¬█\n               █████¬██¬¬█¬█¬¬¬¬¬█¬█████¬██¬¬█\n               ∨∧∨∧∨∧∨∧∨∧∨∧∨∧∨●∧∨∨∧∨∧∨∧∨∧∨∧∨∧∨\n\n        An exploration of light and form, continuously\n          adapting on a quest to find equilibrium.\n\n             Motivated by the uncluttered yet\n                 intricate beauty of math.\n\n//========================================================//\n\nDEFINE REFLECTION\n\n0 - Simple Reflection\n1 - Proper Reflection (accurate but GPU intense and looks crappy :) */\n\n#define REF 0\n\n\nvec3 CamTransform(float t){\n    return vec3(sin(t*.1)*sin(t*.9*.1)*7.,sin(t*.1+sin(t*.1)*3.),cos(t*.1)*-7.);\n}\n\nfloat SDF(vec3 p){\n    \n    float t = iTime*.2;\n    t += sin(iTime*.5)*.3;\n    float iter = 8.;\n        \n    // TORUS\n    float tor = 1e9;\n    for(float i=min(t,0.);i<iter;i++){\n        vec3 pt = p;\n        float s = sin(t+i)*.2+.7;\n        pt.x += sin(t*.15+i*1.3)*3.;\n        pt.y += sin(t*.52+i*1.2)+.5;\n        pt.z += sin(t*.32+i*1.1)*3.;\n        pt.xz *= Rot(t*.59-i);\n        pt.xy *= Rot(t*.62+i);\n        pt.yz *= Rot(t*.47-i);\n        tor = Smin(tor,Torus(pt,vec2(s,s*.1)),1.); \n    }\n    \n    tor += (sin(t+p.x*3.)*cos(t-p.y*2.))*.2-.2;\n    \n    // SPHERE\n    float sph = 1e9;\n    for(float i=min(t,0.);i<iter*.5;i++){\n        vec3 ps = p;\n        ps.x += sin(t*.33+i*1.1)*3.;\n        ps.y += sin(t*.21+i*1.);\n        ps.z -= sin(t*.27+i*1.5)*3.;\n        sph = Smin(sph,Sphere(ps,.7),2.);\n        sph += (cos(t*.13+i-ps.x*2.)+sin(t*.13-i+ps.y*2.)+sin(t*.15+i+ps.z*2.))*.1;\n    }\n    \n    // GYROID\n    vec3  pg = p;\n    float sg = 2.;\n    float gyr = abs(dot(sin(pg*sg), cos(pg.zxy*sg)))/sg-.3;\n    \n    // PLANE\n    vec3  pp = p;\n    pp.y += (sin(t+cos(pp.x*1.5)*2.)*cos(t-pp.z*2.)-sin(t+pp.y*2.)+15.)*.1;\n    float pla = pp.y+.2;\n    \n    // COMPOSITION                       // == Boolsche Operation ==\n    float d = Smin(sph,tor,.3);          // Union:::::::::Sdf OR Torus\n    gyr = Smax(gyr,d-.3,.3);             // Intersection::Gyroid AND bigger Sdf\n    d = Smin(d,gyr,.3);                  // Union:::::::::Gyroid OR Sdf\n    d = Smin(d,pla,1.);                  // Union:::::::::Plane OR Sdf\n    d = Smax(d,-tor+(sin(t+p.z)*.1),.3); // Subtraction:::Sdf NOT smaller Torus\n    \n    // DEFORMATION\n    float b = 52.;\n    d += (sin(p.x*b)+ cos(p.y*b)+sin(p.z*b))*(smoothstep(-.5,-2.,p.y))*0.003; // Deformation of Sdf\n    \n    // CAMERA BOUNDING SPHERE\n    d = Smax(d,-Sphere(p-CamTransform(iTime),.5),.3); //Sphere Subtraction\n    \n    return d;\n}\n\nfloat March(vec3 ro, vec3 rd){\n    float h=0.;\n    for(int i=0;i<MAX_STEPS; i++){\n        vec3 p = ro + rd*h;\n        float dS = SDF(p);\n        h += dS;\n        if(h>MAX_DIST||abs(dS)<SURF_DIST) break;\n    }\n    return h;\n}\n\nvec3 CalcNormal (vec3 p){\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=min(iFrame,0); i<4; i++ ){\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*SDF(p+.001*e);\n    }\n    return normalize(n);\n}\n\n// derived from https://www.shadertoy.com/view/NdSGDG\nvec3 Render(inout vec3 ro, inout vec3 rd, inout vec3 ref, bool last){\n    \n    float d = March(ro, rd);\n    vec3 col = texture(iChannel0,rd).rgb;\n    ref = vec3(0);\n    \n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = CalcNormal(p);\n        vec3 r = reflect(rd, n);\n        vec3 refTex = texture(iChannel0,r).rgb;\n        float fresnel = pow(clamp(1.-dot(n,-rd),0.,1.),5.);\n        \n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n            col = vec3(.1*dif);\n            ref  = vec3(1.,1.,1.);\n            if(last) col += ref*refTex;\n        ro = p+n*SURF_DIST*3.;\n        rd = r;    \n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime*.1;\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 ro = CamTransform(iTime),\n         rd = CastRay(uv, ro, vec3(0,0,0), 2.),\n         col = vec3(1);\n         \n \n    float d = March(ro, rd);\n\n    if(d<MAX_DIST){ \n        vec3 p = ro + rd*d,\n             n = CalcNormal(p),\n             r = reflect(rd, n),\n             refl = texture(iChannel0,r).rgb;   \n        float fresnel = pow(1.+dot(rd, n),5.);        \n        col = (refl+fresnel);\n    }\n    \n// derived from https://www.shadertoy.com/view/NdSGDG\n#if REF == 1  \n    vec3 ref = vec3(0.);\n    vec3 fil = vec3(1);\n    col = Render(ro,rd,ref, false);\n    \n    const int NUM_BOUNCES = 1;\n    \n    for(int i=0; i<NUM_BOUNCES; i++){\n        fil *= ref;\n        vec3 bounce = fil*Render(ro,rd,ref, i==NUM_BOUNCES-1);\n        col += bounce;\n    }\n#endif\n\n    col = mix( col, vec3(1), 1.-exp(-pow(.12*d,5.)));//fog\n    col = pow(col, vec3(.4545)); //gamma correction\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 36692,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/richarddjames/17a1?in=richarddjames/sets/selected-ambient-works-6&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/* \"Samsa - Fragment III\"\n    2024\n    by KΛTUR\n    License - Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Unported License.\n\n    \n    Fragment I   - https://www.shadertoy.com/view/MflGDM\n    Fragment II  - https://www.shadertoy.com/view/XX2SRR\n    Fragment III - https://www.shadertoy.com/view/XX2SWR\n    Fragment IV  - https://www.shadertoy.com/view/4XBSRK\n    \n    https://lichterloh.tv/portfolio/samsa/\n    \n//========================================================//\n\n               ∧∨∧∨∧∨∧∨∧∨∧∨∧∨∧○∨∧∧∨∧∨∧∨∧∨∧∨∧∨∧\n               █████¬█████¬██¬¬¬██¬█████¬█████\n               █¬¬¬¬¬██¬¬█¬███¬███¬█¬¬¬¬¬██¬¬█\n               █████¬██■■█¬█¬¬█¬¬█¬█████¬██■■█\n               ¬¬¬¬█¬██¬¬█¬█¬¬¬¬¬█¬¬¬¬¬█¬██¬¬█\n               █████¬██¬¬█¬█¬¬¬¬¬█¬█████¬██¬¬█\n               ∨∧∨∧∨∧∨∧∨∧∨∧∨∧∨●∧∨∨∧∨∧∨∧∨∧∨∧∨∧∨\n\n        An exploration of light and form, continuously\n          adapting on a quest to find equilibrium.\n\n             Motivated by the uncluttered yet\n                 intricate beauty of math.\n\n//========================================================*/\n\n#define MAX_STEPS 100\n#define MAX_DIST 50.\n#define SURF_DIST .001\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);}\n\n//===================================================================//\n// below by https://iquilezles.org/\n\nfloat Smin( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n    \nfloat Smax( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n\nfloat Sphere(vec3 p,float s){\n    return length(p)-s;\n    }\n\nfloat Torus( vec3 p, vec2 t){\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n    }\n\nfloat Box( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// above by https://iquilezles.org/\n//===================================================================//\n\nvec3 CastRay(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}