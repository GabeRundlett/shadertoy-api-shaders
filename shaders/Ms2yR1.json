{
    "Shader": {
        "info": {
            "date": "1490970591",
            "description": "Explore the Green Grotto; use the mouse to look around.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ms2yR1",
            "likes": 18,
            "name": "Green Grotto",
            "published": 3,
            "tags": [
                "reflection",
                "refraction",
                "water",
                "cave",
                "drone"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 939
        },
        "renderpass": [
            {
                "code": "// \"Green Grotto\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float s);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrRCylDf (vec3 p, float r, float rt, float h);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nconst float pi = 3.14159;\n\nvec3 ltPos[2], dronePos;\nvec2 aTilt;\nfloat dstFar, tCur, htWat;\nint idObj;\nbool uWat;\nconst int idDrBod = 1, idDrLamp = 2, idDrCam = 3;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d;\n  const float dSzFac = 6.;\n  dMin = dstFar;\n  dMin *= dSzFac;\n  qq = dSzFac * (p - dronePos);\n  qq.yz = Rot2D (qq.yz, - aTilt.y);\n  qq.yx = Rot2D (qq.yx, - aTilt.x);\n  q = qq;\n  q.y -= 0.05;\n  d = PrRCylDf (q.xzy, 0.2, 0.03, 0.07);\n  if (d < dMin) { dMin = d;  idObj = idDrBod; }\n  q.y -= 0.07;\n  d = PrRoundBoxDf (q, vec3 (0.06, 0.02, 0.12), 0.04);\n  if (d < dMin) { dMin = d;  idObj = idDrLamp; }\n  q = qq;\n  q.y -= -0.05;\n  d = PrSphDf (q, 0.17);\n  if (d < dMin) { dMin = d;  idObj = idDrCam; }\n  q = qq;\n  q.xz = abs (q.xz) - 0.7;\n  d = min (PrCylAnDf (q.xzy, 0.5, 0.05, 0.05), PrCylDf (q.xzy, 0.1, 0.03));\n  q -= vec3 (-0.4, -0.1, -0.4);\n  d = min (d, PrRCylDf (q.xzy, 0.05, 0.03, 0.15));\n  q -= vec3 (-0.3, 0.2, -0.3);\n  q.xz = Rot2D (q.xz, 0.25 * pi);\n  d = min (d, min (PrRCylDf (q, 0.05, 0.02, 1.), PrRCylDf (q.zyx, 0.05, 0.02, 1.)));\n  if (d < dMin) { dMin = d;  idObj = idDrBod; }\n  return dMin / dSzFac;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 TrackPath (float t)\n{\n  return vec3 (4.7 * sin (t * 0.15) + 2.7 * cos (t * 0.19), 0., t);\n}\n\nfloat CaveDf (vec3 p)\n{\n  float s, d;\n  s = p.y - htWat;\n  p.xy -= TrackPath (p.z).xy;\n  p += 0.1 * (1. - cos (2. * pi * (p + 0.2 * (1. - cos (2. * pi * p.zxy)))));\n  d = 0.7 * (length (cos (0.6 * p - 0.5 * sin (1.4 * p.zxy +\n     0.4 * cos (2.7 * p.yzx)))) - 1.1);\n  if (! uWat) d = min (d, s);\n  return d;\n}\n\nfloat CaveRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    d = CaveDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nfloat CaveAO (vec3 ro, vec3 rd)\n{\n  float ao, d;\n  ao = 0.;\n  for (int j = 0; j < 8; j ++) {\n    d = float (j + 1) / 8.;\n    ao += max (0., d - 3. * CaveDf (ro + rd * d));\n  }\n  return clamp (1. - 0.2 * ao, 0., 1.);\n}\n\nvec3 CaveNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (CaveDf (p + e.xxx), CaveDf (p + e.xyy),\n     CaveDf (p + e.yxy), CaveDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat CaveSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 16; j ++) {\n    h = CaveDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += max (0.2, 0.1 * d);\n    if (sh < 0.05) break;\n  }\n  return 0.4 + 0.6 * sh;\n}\n\nvec3 ObjCol (vec3 ro, vec3 rd, vec3 vn, vec3 ltDir, float atten)\n{\n  vec4 col4;\n  if (idObj == idDrBod) col4 = vec4 (1.2, 0., 0., 0.5);\n  else if (idObj == idDrLamp) col4 = vec4 (mix (vec3 (0.1),\n      vec3 (1.5), step (0., sin (10. * tCur))), -1.);\n  else if (idObj == idDrCam) col4 = vec4 (0.1, 0.1, 0.1, 1.);\n  if (col4.a >= 0.)\n    col4.rgb = col4.rgb * (0.2 + 0.8 * CaveSShadow (ro, ltDir)) *\n       (0.1 + 0.9 * atten * (max (dot (ltDir, vn), 0.) +\n       col4.a * pow (max (dot (reflect (rd, vn), ltDir), 0.), 64.)));\n  return col4.rgb;\n}\n\nvec3 CaveCol (vec3 ro, vec3 rd, vec3 vn, vec3 ltDir, float atten)\n{\n  vec3 col;\n  col = vec3 (0.4, 0.4, 0.6);\n  if (! uWat) col = mix (col, vec3 (0.2, 0.4, 0.2), smoothstep (0.2, 0.8, vn.y));\n  col *= (0.2 + 0.8 * max (dot (vn, ltDir), 0.) +\n     0.5 * pow (max (dot (reflect (ltDir, vn), rd), 0.0), 64.)) *\n     (0.1 + 0.9 * atten * min (CaveSShadow (ro, ltDir), CaveAO (ro, vn)));\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, colR, bgCol, ltVec, roo, rdo, row, vnw;\n  float dstCave, dstObj, atten, frFac;\n  bool hitWat;\n  roo = ro;\n  rdo = rd;\n  bgCol = (abs (rd.y) < 0.5) ? vec3 (0.05, 0.05, 0.1) : vec3 (0.01);\n  uWat = false;\n  hitWat = false;\n  dstCave = CaveRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  if (dstCave < min (dstObj, dstFar) && ro.y + rd.y * dstCave < htWat + 0.001) {\n    hitWat = true;\n    ro += rd * dstCave;\n    row = ro;\n    vnw = VaryNf (1.5 * ro, vec3 (0., 1., 0.), 0.1);\n    rd = reflect (rd, vnw);\n    ro += 0.01 * rd;\n    dstCave = CaveRay (ro, rd);\n    dstObj = ObjRay (ro, rd);\n  }\n  if (min (dstCave, dstObj) < dstFar) {\n    ltVec = roo + 2. * ltPos[0] - ro;\n    atten = 1. / (1. + 0.01 * dot (ltVec, ltVec));\n    ltVec = normalize (ltVec);\n    if (dstCave < dstObj) {\n      ro += rd * dstCave;\n      col = CaveCol (ro, rd, VaryNf (5. * ro, CaveNf (ro), 10.), ltVec, atten);\n      col = mix (col, bgCol, smoothstep (0.45, 0.99, dstCave / dstFar));\n    } else {\n      ro += rd * dstObj;\n      col = ObjCol (ro, rd, ObjNf (ro), ltVec, atten);\n    }\n  } else col = bgCol;\n  if (hitWat) {\n    frFac = rdo.y * rdo.y;\n    frFac *= frFac;\n    if (frFac > 0.005) {\n      rd = refract (rdo, vnw, 1./1.333);\n      ro = row + 0.01 * rd;\n      uWat = true;\n      dstCave = CaveRay (ro, rd);\n      if (dstCave < dstFar) {\n        ltVec = roo + 2. * ltPos[1] - ro;\n        atten = 1. / (1. + 0.01 * dot (ltVec, ltVec));\n        ltVec = normalize (ltVec);\n        ro += rd * dstCave;\n        colR = CaveCol (ro, rd, VaryNf (5. * ro, CaveNf (ro), 10.), ltVec, atten);\n        colR = mix (colR, bgCol, smoothstep (0.45, 0.99, dstCave / dstFar));\n      } else colR = bgCol;\n      col = mix (col, colR * vec3 (0.4, 1., 0.6) * exp (0.02 * ro.y), frFac);\n    }\n  }\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, fpF, fpB, vd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, t, tt, a;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  t = 2. * tCur;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az = az + 2. * pi * mPtr.x;\n    el = el + 0.95 * pi * mPtr.y;\n  } else {\n    tt = mod (floor (0.05 * tCur), 4.);\n    a = 0.45 * pi * SmoothBump (0.8, 0.95, 0.05, mod (0.05 * tCur, 1.));\n    if (tt < 2.) el = (2. * tt - 1.) * a;\n    else az = (2. * tt - 5.) * a;\n  }\n  tt = t + 1. + 7. * SmoothBump (0.2, 0.8, 0.15, mod (0.01 * t, 1.));\n  dronePos = TrackPath (tt);\n  aTilt = vec2 (5. * (TrackPath (tt + 0.1).x - dronePos.x), 0.);\n  fpF = TrackPath (t + 0.1);\n  fpB = TrackPath (t - 0.1);\n  ro = 0.5 * (fpF + fpB);\n  vd = fpF - fpB;\n  ori = vec2 (el, az + ((length (vd.xz) > 0.) ? atan (vd.x, vd.z) : 0.5 * pi));\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 1.5));\n  ltPos[0] = vuMat * normalize (vec3 (0., 1., -1.));\n  ltPos[1] = vuMat * normalize (vec3 (0., -1., -1.));\n  htWat = -0.5;\n  dstFar = 40.;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrRCylDf (vec3 p, float r, float rt, float h)\n{\n  vec2 dc;\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  dc = vec2 (dxy, dz) + rt;\n  return min (min (max (dc.x, dz), max (dc.y, dxy)), length (dc) - rt);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 4; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n)) * (1. / 1.9375);\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}