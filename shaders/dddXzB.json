{
    "Shader": {
        "info": {
            "date": "1680059846",
            "description": "ripples",
            "flags": 0,
            "hasliked": 0,
            "id": "dddXzB",
            "likes": 1,
            "name": "sample water ball",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "Veggiebob",
            "viewed": 218
        },
        "renderpass": [
            {
                "code": "\n\nconst vec3 light = vec3(0.0, 0.0, -2.0); // light position\nconst float EPSILON = 0.0001;\n\nvec3 rotate(vec3 v, float angle, vec3 axis)\n{\n    float cosAngle = cos(angle);\n    float sinAngle = sin(angle);\n    float oneMinusCosAngle = 1.0 - cosAngle;\n    mat3 rotationMat = mat3(\n        cosAngle + axis.x * axis.x * oneMinusCosAngle,\n        axis.x * axis.y * oneMinusCosAngle - axis.z * sinAngle,\n        axis.x * axis.z * oneMinusCosAngle + axis.y * sinAngle,\n        axis.y * axis.x * oneMinusCosAngle + axis.z * sinAngle,\n        cosAngle + axis.y * axis.y * oneMinusCosAngle,\n        axis.y * axis.z * oneMinusCosAngle - axis.x * sinAngle,\n        axis.z * axis.x * oneMinusCosAngle - axis.y * sinAngle,\n        axis.z * axis.y * oneMinusCosAngle + axis.x * sinAngle,\n        cosAngle + axis.z * axis.z * oneMinusCosAngle\n    );\n    return rotationMat * v;\n}\n\nfloat ripple(vec3 v) {\n    v += sin(v.z + iTime) * 0.3;\n    vec3 l = rotate(vec3(1., 0., 0.) + v*0.1, iTime * 0.3, vec3(0., 1., 0.));\n    l *= 0.5;\n    return dot(vec3(1.), sin(v + (cos(dot(v, l) * 2.) + iTime * 3.) * 0.5));\n}\n\nfloat sdf(vec3 p) {\n    return length(p) - 0.7 + ripple(p * 25.) * 0.003;\n}\n\nvec3 computeNormal(vec3 p)\n{\n    vec3 normal = vec3(0.0);\n    float eps = EPSILON;\n\n    normal.x = sdf(vec3(p.x + eps, p.y, p.z)) - sdf(vec3(p.x - eps, p.y, p.z));\n    normal.y = sdf(vec3(p.x, p.y + eps, p.z)) - sdf(vec3(p.x, p.y - eps, p.z));\n    normal.z = sdf(vec3(p.x, p.y, p.z + eps)) - sdf(vec3(p.x, p.y, p.z - eps));\n\n    return normalize(normal);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized device coordinates (-1 to 1)\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Camera parameters\n    vec3 camPos = vec3(0.0, 0.0, 3.0); // camera position\n    vec3 camUp = vec3(0.0, 1.0, 0.0); // camera up vector\n    float camFov = 60.0; // camera field of view (in degrees)\n\n    // rotate cam\n    vec2 mouse = iMouse.xy / iResolution.xy - vec2(0.5);\n    camPos = rotate(camPos, mouse.y * 3., cross(camPos, camUp));\n    camPos = rotate(camPos, mouse.x * 4., vec3(0., 1., 0.));\n    camPos = normalize(camPos) * 1.5;\n    \n    vec3 camDir = normalize(-camPos); // camera direction\n    vec3 camRight = normalize(cross(camDir, camUp));\n    vec3 camU = normalize(-cross(camDir, camRight));\n\n    // Compute ray direction\n    vec3 rayDir = normalize(camDir + uv.x * camRight + uv.y * camU);\n    \n    // Compute ray origin\n    vec3 rayOrigin = camPos;\n\n    // Raymarch scene\n    float t = 0.0;\n    float maxDist = 100.0;\n    float minDist = 0.001;\n    int iterations = 100;\n    vec3 p = rayOrigin;\n    for (int i = 0; i < iterations; i++) {\n        float dist = sdf(p);\n        if (dist < minDist || t > maxDist) break;\n        float d = 0.4 * dist;\n        t += d;\n        p += d * rayDir;\n    }\n\n    // Compute final color\n    vec3 color = vec3(1.0);\n    vec3 normal = computeNormal(p);\n    if (t < maxDist) {\n        vec3 toLight = normalize(light-p);\n        float diffuse = max(dot(-normalize(normal), toLight), 0.);\n        float specular = pow(max(dot(reflect(-rayDir, normal), toLight), 0.), 8.);\n        color *= (0. + diffuse + specular * 0.3);\n    }\n    color = max(color, vec3(0., 1., 1.) * 0.01 * p.y);\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}