{
    "Shader": {
        "info": {
            "date": "1689852991",
            "description": "Inspired by kastorp's shader:\nhttps://www.shadertoy.com/view/csXfRX\n\nThe map uses simplex noise from iq, and the collision code is pretty bad\n\nInstructions:\nA+D to move left+right\nSpace to jump",
            "flags": 48,
            "hasliked": 0,
            "id": "cd2fzy",
            "likes": 24,
            "name": "Mini Jumper Game",
            "published": 3,
            "tags": [
                "2d",
                "game",
                "interactive",
                "pixel",
                "simplex",
                "pixelart",
                "ca"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "vec3 drawBg(vec2 V) {\n    V += iTime;\n    return mix(vec3(99, 155, 255),\n               vec3(91, 110, 225),\n               mod(floor(V.x/12.)+floor(V.y/12.), 2.)) / 255.;\n}\n\nvec3 showMap(vec2 V) {\n    float t = cell(ch0, V + vec2(0, 1)).r;\n    float b = cell(ch0, V - vec2(0, 1)).r;\n    float l = cell(ch0, V - vec2(1, 0)).r;\n    float r = cell(ch0, V + vec2(1, 0)).r;\n    float c = cell(ch0, V).r;\n    \n    float sum = t + b + l + r;\n    \n    if (c == 1.) {\n        if (t == 0.) {\n            if (l + r == 2.) return vec3(1);\n            else if (l + r == 1.) return vec3(.85);\n            else return vec3(.7);\n        }\n        return vec3(.5);\n    } \n    else if (sum > 0.) return .8 * drawBg(V);\n    else return drawBg(V);\n}\n\nvoid mainImage( out vec4 O, vec2 I )\n{\n    vec2 U = (I-.5*R)/R.y;\n   \n    vec4 player   = cell(ch1, cPlayer);\n    vec4 follower = cell(ch1, cFollower);\n    vec4 space    = cell(ch1, cSpace);\n    \n    // Zoom\n    float zm = .06;\n    \n    // uv moves with player position so player is centered\n    vec2 V = vec2(zm * (I-.5*R) + player.xy - .5);\n    \n    // Player\n    float dPlay = max(abs(U.x), abs(U.y));\n    float sPlay = step(dPlay, .5/R.y/zm);\n    float sPlay2 = step(dPlay, 10.5/R.y/zm);\n        \n    // Follower\n    vec2 vf = V - follower.xy;\n    float dFol = max(abs(vf.x), abs(vf.y));\n    float sFol = step(dFol, .25);\n    \n    // Spacebar effect\n    float dSpace = length(V - player.xy + .5 + 4. * player.zw);\n    float rSpace = space.x / 12.;\n    float sSpace = step(abs(dSpace - 4. * rSpace * rSpace), .5 * rSpace);\n    \n    // Trail\n    float trail = cell(ch0, V).g;\n    vec3 trailCol = pal(.5 * trail + .4 + .25 * vec3(0,1,2)/3.);\n    vec3 playerCol = mix(vec3(1), vec3(1,0,0), exp(-2.*length(player.zw)));\n    \n    // Colors\n    vec3 col = showMap(V);\n    col = mix(col, vec3(1), .7 * trail);\n    col = mix(col, vec3(1), sSpace * rSpace);  \n    //col = mix(0.5*col, col, sPlay2); // Cute mode\n    col = mix(col, vec3(1.-exp(-8.*length(player.zw))), sPlay);\n    col = mix(col, vec3(1), sFol);\n    O = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n#define R iResolution.xy\n\n#define pal(a) .5 + .5 * cos(2. * pi * (a))\n\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n\n#define KEY_LEFT 65.\n#define KEY_RIGHT 68.\n#define KEY_UP 87.\n#define KEY_DOWN 83.\n#define KEY_SPACE 32.\n\n#define Dir(a) vec2(cos(a),sin(a))\n\n#define cell(ch, J) texelFetch(ch, ivec2(J), 0)\n#define key_val(key) texelFetch(ch2, ivec2(key, 0), 0).x\n//#define key_down(key) key_val(key) == 1.\n#define key_pressed(key) texelFetch(ch2, ivec2(key, 1), 0).x\n\n// Object cells\n#define cPlayer   vec2(.5)\n#define cFollower vec2(1.5, .5)\n#define cSpace    vec2(2.5, .5)\n\n\n// From iq: https://www.shadertoy.com/view/Msf3WH\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// this buffer stores map data\n\nvoid mainImage( out vec4 O, vec2 I )\n{\n    // Generate map on first frame\n    if (iFrame < 1) {\n        O = 0.*O;\n        O.r = step(noise(I/50.), .0);\n        O.r = max(0., O.r - step(noise(I/20.), -.25));\n        O.r = max(0., O.r - step(noise(I/10.), 0.));\n    }\n    else {   \n        // Draw trail around player\n        vec2 p = cell(ch1, cPlayer).xy;   \n        vec2 v = cell(ch1, cPlayer).zw;\n        \n        O = cell(ch0, I);\n        vec4 av = (cell(ch0, I + vec2(1,0)) +\n                   cell(ch0, I - vec2(1,0)) +\n                   cell(ch0, I + vec2(0,1)) +\n                   cell(ch0, I - vec2(0,1))) / 4.;\n        O.g = mix(O.g, av.g, .5);\n        O.g *= 0.97;\n        if (length(p - .5 - I) <= 1.5)\n            O.g += .6 * (1.-exp(-length(v)));     \n            \n        // Display 2x2 box containing player       \n        /*\n        p = floor(p);\n        if (p - vec2(.5,.5) == I || p - vec2(.5,-.5) == I\n         || p + vec2(.5,.5) == I || p + vec2(.5,-.5) == I)\n            O.g = 1.;\n        //*/                    \n    }   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// this buffer stores object data\n// (player, follower, spacebar)\n\n#define is I == \n\nvoid mainImage( out vec4 O, vec2 I )\n{\n    // Initialize values\n    if (iFrame < 1) {\n        if (is cPlayer || is cFollower)\n            O = vec4(.5 * R, 0, 0);\n        else if (is cSpace)\n            O = vec4(0);\n        return;\n    }\n    \n    // Previous values\n    O = cell(ch1, I);\n    \n    // Player (position, velocity)\n    if (is cPlayer) {\n        // Update velocity \n        O.z += .05 * (key_val(KEY_RIGHT) - key_val(KEY_LEFT));\n        O.w += key_pressed(KEY_SPACE) -.03;\n        O.zw *= vec2(.9, 1);\n                 \n        // Update position\n        O.xy += O.zw;\n         \n        vec2 f = floor(O.xy);\n        \n        // Player position is always within 2x2 block of cells\n        // v = (TL, TR, \n        //      BL, BR)\n        // 1 if cell.r == 1., 0 otherwise\n        vec4 v = vec4(cell(ch0, f + vec2(-.5,  .5)).r == 1.,\n                      cell(ch0, f + vec2( .5,  .5)).r == 1.,\n                      cell(ch0, f + vec2(-.5, -.5)).r == 1.,\n                      cell(ch0, f + vec2( .5, -.5)).r == 1.); \n                      \n        float sum = v.x + v.y + v.z + v.w;\n        \n        // Copy O to compare before and after collision resolution\n        vec4 C = O;       \n                       \n        // Stuck inside region, move up\n        if (v == vec4(1)) O.y++;  \n        \n        // Push away from walls\n        else if (sum >= 2.) {\n                 if (v.xy == vec2(1)) O.y = f.y;      // Top 2 cells\n            else if (v.zw == vec2(1)) O.y = f.y + 1.; // Bottom\n                 if (v.yw == vec2(1)) O.x = f.x;      // Right\n            else if (v.xz == vec2(1)) O.x = f.x + 1.; // Left\n        }\n        \n        // If resolved in x or y, set x or y velocity = 0  \n        O.zw *= vec2(C.x == O.x, C.y == O.y);\n    }\n    \n    // Follower (position, velocity)\n    else if (is cFollower) {\n        vec4 player = cell(ch1, vec2(.5));\n        O.xy = mix(O.xy, player.xy - .5 + 2. * Dir(pi/2.-cos(iTime*3.)), .1);\n        O.xy += O.zw;\n    }\n\n    // Spacebar (effect cooldown)\n    else if (is cSpace) {\n        O.x = max(0., O.x - 1.);\n        if (key_pressed(KEY_SPACE) == 1.)\n            O.x = 12.;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}