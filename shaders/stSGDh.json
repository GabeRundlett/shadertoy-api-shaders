{
    "Shader": {
        "info": {
            "date": "1623798273",
            "description": "Method for getting the distance to a rotated box that I described here (with some tweaks for preference): [url=https://www.shadertoy.com/view/NlBGDh]https://www.shadertoy.com/view/NlBGDh[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "stSGDh",
            "likes": 5,
            "name": "Maxnorm Distance to Rotated Box",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "distance",
                "maxnorm",
                "linf",
                "rotated"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 237
        },
        "renderpass": [
            {
                "code": "float sdBox(in vec2 p, in vec2 dims, in float rot) {\n    float u = cos(rot), v = sin(rot);\n\n    vec4 h = vec4(dims * u, dims * v);\n    vec2 a = vec2(h.x - h.w, h.z + h.y);\n    vec2 b = vec2(h.x + h.w, h.z - h.y);\n\n    vec2 qa = abs(mat2(u, -v, v, u) * p) - dims;\n    vec2 qb = abs(p) - max(abs(a), abs(b));\n\n    return max(max(qb.x, qb.y), max(qa.x, qa.y) / max(abs(u - v), abs(u + v)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n    float time = iTime * 0.5;\n\n    // Default before user interaction\n    if (ivec2(iMouse.xy) == ivec2(0)) mouse = vec2(0.5, 0.5 * sin(time)) * cos(time);\n\n    vec2 dims = vec2(0.3 + 0.05 * sin(iTime), 0.2 + 0.1 * cos(0.5 * iTime));\n    float dist = sdBox(uv, dims, iTime);\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(dist) * vec3(0.1, 0.4, 0.7);\n\tcolor *= 1.0 - exp(-4.0 * abs(dist));\n\tcolor *= 0.8 + 0.2 * cos(240.0 * dist);\n\tcolor = mix(color, vec3(1.0), smoothstep(unit, 0.0, abs(dist)));\n\n    float mDist = abs(sdBox(mouse, dims, iTime));\n    color = mix(color, vec3(0.0, 1.0, 0.0), smoothstep(unit, 0.0, length(uv - mouse) - 0.008));\n    color = mix(color, vec3(0.0, 1.0, 0.0), smoothstep(unit, 0.0, abs(max(abs(uv.x - mouse.x), abs(uv.y - mouse.y)) - mDist) - 0.001));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}