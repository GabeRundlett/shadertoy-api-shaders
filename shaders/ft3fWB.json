{
    "Shader": {
        "info": {
            "date": "1663578938",
            "description": "Agricultural experiment",
            "flags": 0,
            "hasliked": 0,
            "id": "ft3fWB",
            "likes": 16,
            "name": "Martian Farming",
            "published": 3,
            "tags": [
                "mars",
                "plant",
                "polyhedron",
                "farm",
                "agriculture"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 254
        },
        "renderpass": [
            {
                "code": "// \"Martian Farming\" by dr2 - 2022\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n#define AA  0   // (= 0/1) optional antialiasing\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Hashfv3 (vec3 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nfloat Fbm2e (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir, qHit;\nvec2 gId, obOff, obRand, obCs;\nfloat tCur, dstFar, rEx, trSzFac, treeHt, grndScl, dSep;\nint idObj;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat GrndDf (vec3 p)\n{\n  vec3 q;\n  float d, h, a, r, s, f;\n  q = p / grndScl;\n  r = length (q.xz);\n  d = p.y;\n  if (r > 0.) {\n    a = atan (q.z, - q.x) / (2. * pi) + 0.5;\n    s = sqrt (r) / (2. * pi);\n    f = 32.;\n    h = mix (Fbm2e (f * vec2 (s, a + 1.)), Fbm2e (f * vec2 (s, a)), a);\n    d = max (r - 20., q.y - s * mix (1., 3. * h, smoothstep (1.4, 2.2, r)) * smoothstep (1.4, 2.6, r));\n  }\n  return grndScl * d;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    p = ro + s * rd;\n    h = GrndDf (p);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.001, h);\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = VAR_ZERO; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (GrndDf (p) > 0.) sLo = s;\n      else sHi = s;\n    }\n    dHit = 0.5 * (sLo + sHi);\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = GrndDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjGdf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, r, y;\n  dMin = dstFar;\n  if (trSzFac > 0.) {\n    dMin /= trSzFac;\n    p.xz -= HexToPix (gId) + obOff;\n    p /= trSzFac;\n    q = p;\n    q.xz = Rot2Cs (q.xz, obCs);\n    q.y -= treeHt;\n    y = 0.5 * (1. + q.y / treeHt);\n    r = 0.35 * (1. - 0.5 * obRand.y) * (1. - 0.9 * y * y);\n    r *= 1. + 0.1 * sin (24. * (1. + obRand.y) * pi * y);\n    r += 0.2 * (1. - smoothstep (0., 0.1, y));\n    q.xz += Rot2D (vec2 (0.2 + 0.2 * obRand.x, 0.),\n       12. * pi * sign (obRand.x - 0.5) * (0.3 + 0.7 * obRand.y) * y + pi * obRand.x);\n    q.x += 0.5 * (0.4 + 0.6 * obRand.y) * y;\n    q.xz = abs (q.xz) - 0.3 * r;\n    d = PrCylDf (q.xzy, r, treeHt);\n    DMINQ (1);\n    q = p;\n    q.y -= 0.05;\n    q.xz += Rot2D (vec2 (0.2 + 0.2 * obRand.x, 0.), pi * obRand.x);\n    q.xz = abs (q.xz) - 0.3 * r - 0.4;\n    d = max (PrSphDf (q, 0.12), - q.y);\n    DMINQ (2);\n    dMin *= 0.6 * trSzFac;\n  }\n  return dMin;\n}\n\nvoid SetObjConf ()\n{\n  vec2 q;\n  float r;\n  obRand = Hashv2v2 (13.3 * gId + 1.1);\n  q = HexToPix (gId);\n  q = Rot2D (q, 2. * pi * floor (5. * (atan (q.y, - q.x) / (2. * pi) + 0.5) + 0.5) / 5.);\n  q.x -= dSep * rEx;\n  r = length (q) / rEx;\n  if (r > 1.) trSzFac = 0.;\n  else {\n    trSzFac = sqrt (1. - r * r) * 0.5 * sqrt3 *  0.6 * (0.85 -\n       0.15 * clamp (3. * (obRand.x - 0.5), -1., 1.));\n    if (trSzFac < 0.1) trSzFac = 0.;\n    obOff = max (0., 0.4 * sqrt3 - trSzFac) * obRand.x *\n       sin (2. * pi * obRand.y + vec2 (0.5 * pi, 0.));\n    obCs = sin ((0.4 * obRand.x + 0.2) * (obRand.y - 0.5) * pi * tCur + vec2 (0.5 * pi, 0.));\n  }\n}\n\nfloat ObjGRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s, eps;\n  eps = 0.0005;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = 1. / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2]));\n  pM = HexToPix (PixToHex (ro.xz));\n  gIdP = vec2 (-999.);\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n    s = Minv3 (hv);\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz);\n    if (gId != gIdP) {\n      gIdP = gId;\n      SetObjConf ();\n    }\n    d = ObjGdf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n    }\n    if (d < eps || dHit > dstFar || p.y < 0.) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjGNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjGdf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjGSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  gIdP = vec2 (-999.);\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    gId = PixToHex (p.xz);\n    if (gId != gIdP) {\n      gIdP = gId;\n      SetObjConf ();\n    }\n    h = ObjGdf (p);\n    sh = min (sh, smoothstep (0., 0.1 * d, h));\n    d += clamp (h, 0.05, 0.5);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 DodecSym (vec3 p)\n{\n  vec2 csD;\n  csD = sin (0.5 * atan (2.) + vec2 (0.5 * pi, 0.));\n  p.xz = Rot2Cs (vec2 (p.x, abs (p.z)), csD);\n  p.xy = Rot2D (p.xy, -0.1 * pi);\n  p.x = - abs (p.x);\n  for (int k = VAR_ZERO; k <= 3; k ++) {\n    p.zy = Rot2Cs (p.zy, vec2 (csD.x, - csD.y));\n    p.zy = Rot2Cs (vec2 (p.z, - abs (p.y)), csD);\n    if (k < 3) p.xy = Rot2Cs (p.xy, sin (-2. * pi / 5. + vec2 (0.5 * pi, 0.)));\n  }\n  p.xy = sin (mod (atan (p.x, p.y) + pi / 5., 2. * pi / 5.) - pi / 5. +\n     vec2 (0., 0.5 * pi)) * length (p.xy);\n  p.xz = - vec2 (abs (p.x), p.z);\n  return p;\n}\n\nfloat ObjDf (vec3 p)\n{ // based on \"Pentakis Dodecahedron\"\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  p.xz = Rot2D (p.xz, 2. * pi * floor (5. * (atan (p.z, - p.x) / (2. * pi) + 0.5) + 0.5) / 5.);\n  p.x -= dSep * rEx;\n  q = DodecSym (p);\n  d = SmoothMax (abs (length (p) - rEx) - 0.1, min (dot (q.yz,\n     sin (0.5 * acos (-1. / sqrt (5.)) - pi + vec2 (0., 0.5 * pi))),\n     dot (q.xy, sin (pi / 5. + vec2 (0.5 * pi, 0.)))) - 0.1, 0.05);\n  d = max (d, - p.y);\n  DMIN (3);\n  q = p;\n  d = length (max (abs (vec2 (length (q.xz) - rEx, q.y)) - vec2 (0.05, 0.1), 0.)) - 0.05;\n  DMIN (3);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05 || d > dstFar) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat TrObjDf (vec3 p)\n{\n  p.xz = Rot2D (p.xz, 2. * pi * floor (5. * (atan (p.z, - p.x) / (2. * pi) + 0.5) + 0.5) / 5.);\n  p.x -= dSep * rEx;\n  return max (abs (PrSphDf (p, rEx)) - 0.01, - p.y);\n}\n\nfloat TrObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 60; j ++) {\n    d = TrObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 TrObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = TrObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec4 GrndCol (vec3 ro, vec3 vn)\n{\n  vec4 col4;\n  col4 = vec4 (0.65, 0.5, 0.3, 0.) * (1. - 0.4 * Fbm2e (0.5 * ro.xz));\n  if (ro.y > -0.1) {\n    col4 = mix (col4, 0.8 * col4, smoothstep (0.2, 0.7, 1. - vn.y));\n    col4 = mix (col4, 1.2 * col4, smoothstep (0.6, 0.8, ro.y / grndScl +\n       0.2 * sin (32. * atan (ro.z, - ro.x))));\n  }\n  return col4;\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol;\n  vec2 q;\n  float f, fd, ff;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (8. * atan (rd.z, - rd.x))) {\n    col = vec3 (0.4, 0.3, 0.3);\n  } else {\n    q = 0.005 * (ro.xz + 20. * tCur + ((200. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.2, 0.3, 0.3) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    col = vec3 (1., 0.8, 0.8) * mix (vec3 (0.6, 0.4, 0.4), clCol,\n       0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return col;\n}\n\nfloat PerBumpf (float p)\n{\n  return 0.5 * smoothstep (0., 0.5, abs (fract (p) - 0.5));\n}\n\nvec3 PerBumpv3 (vec3 p)\n{\n  return 0.5 * smoothstep (0., 0.5, abs (fract (p) - 0.5));\n}\n\nvec3 noiseDisp;\nfloat fogAmp;\n\nfloat BumpFbm3 (vec3 p)\n{  // from \"Energy Temple\"\n  vec3 q;\n  float a, f;\n  a = 1.;\n  f = 0.;\n  q = p;\n  for (int j = 0; j < 4; j ++) {\n    p += noiseDisp;\n    p += PerBumpv3 (q + PerBumpv3 (q).yzx);\n    p *= 1.5;\n    f += a * (PerBumpf (p.z + PerBumpf (p.x + PerBumpf (p.y))));\n    q = 2. * q + 0.5;\n    a *= 0.75;\n  }\n  return f;\n}\n\nfloat FogDens (vec3 p)\n{\n  return fogAmp * BumpFbm3 (0.02 * p);\n}\n\nvec3 FogCol (vec3 col, vec3 ro, vec3 rd, float dHit)\n{  // updated from \"Sailing Home\"\n  float s, ds, f, fn;\n  noiseDisp = 0.1 * vec3 (-1., 0., 1.) * tCur + 0.02 * sin (vec3 (0.3, 0.2, 0.3) * pi * tCur);\n  s = 5.;\n  ds = 5.;\n  fn = FogDens (ro + s * rd);\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    s += ds;\n    f = fn;\n    fn = FogDens (ro + (s + 0.5 * ds * Hashfv3 (16. * rd)) * rd);\n    col = mix (col, vec3 (0.95, 0.8, 0.5) * (1. - clamp (f - fn, 0., 1.)),\n       min (f * (1. - smoothstep (0.3 * dHit, dHit, s)), 1.));\n    if (s > dHit) break;\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, roo, qHitG;\n  vec2 vf, q;\n  float dstObj, dstObjG, dstGrnd, dstTrObj, sh, f, a;\n  int idObjG;\n  fogAmp = 0.25 * SmoothBump (0.25, 0.75, 0.22, fract (0.03 * tCur));\n  rEx = 8.;\n  roo = ro;\n  vf = vec2 (0.);\n  dstObjG = ObjGRay (ro, rd);\n  idObjG = idObj;\n  qHitG = qHit;\n  dstObj = ObjRay (ro, rd);\n  dstGrnd = GrndRay (ro, rd);\n  if (min (min (dstObj, dstObjG), dstGrnd) < dstFar) {\n    if (dstObjG < min (dstObj, dstGrnd)) {\n      dstObj = dstObjG;\n      idObj = idObjG;\n      qHit = qHitG;\n      ro += dstObj * rd;\n      gId = PixToHex (ro.xz);\n      vn = ObjGNf (ro);\n      a = atan (qHit.z, - qHit.x) / pi;\n      if (idObj == 1) {\n        f = smoothstep (-0.9, -0.7, qHit.y / treeHt);\n        col4 = mix ((1. - 0.6 * obRand.x) * vec4 (0.6, 0.4, 0., 0.),\n           vec4 (0., 0.4 + 0.6 * obRand.y, 0.1, 0.05), f) *\n           (0.8 + 0.2 * SmoothBump (0.1, 0.9, 0.05, fract (8. * a)));\n        vf = vec2 (16., (3. - 2.5 * f) * (1. - smoothstep (0.1, 0.3, dstObj / dstFar)));\n      } else if (idObj == 2) {\n        col4 = mix (vec4 (0.8, 0.1, 0., 0.3), vec4 (0.7, 0.7, 0., 0.3), step (0.6, obRand.y)) *\n           (0.5 + 0.5 * SmoothBump (0.1, 0.9, 0.05, fract (4. * a)));\n        vf = vec2 (32., 1.);\n      }\n    } else if (dstObj < dstGrnd) {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      if (idObj == 3) col4 = vec4 (0.9, 0.9, 0.95, 0.2);\n    } else {\n      ro += dstGrnd * rd;\n      q = Rot2D (ro.xz, 2. * pi * floor (5. * (atan (ro.z, - ro.x) / (2. * pi) + 0.5) + 0.5) / 5.);\n      q.x -= dSep * rEx;\n      if (length (q) > rEx) {\n        vn = GrndNf (ro);\n        col4 = GrndCol (ro, vn);\n        vf = vec2 (0.5, 2. - smoothstep (0.7, 0.9, dstGrnd / (3. * grndScl)));\n      } else {\n        col4 = vec4 (0.4, 0.6, 0.3, 0.);\n        vn = vec3 (0., 1., 0.);\n        vf = vec2 (16., 0.2);\n      }\n    }\n    sh = min (ObjSShadow (ro + 0.01 * vn, sunDir), ObjGSShadow (ro + 0.01 * vn, sunDir));\n    sh = mix (sh, 1., smoothstep (0., 1., fogAmp / 0.25));\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    col = col4.rgb * (0.2 + 0.1 * max (vn.y, 0.) + 0.8 * sh * max (dot (vn, sunDir), 0.)) +\n       col4.a * step (0.95, sh) * pow (max (dot (sunDir, reflect (rd, vn)), 0.), 32.);\n  } else col = SkyBgCol (ro, rd);\n  ro = roo;\n  dstTrObj = TrObjRay (ro, rd);\n  if (dstTrObj < min (dstObj, dstFar)) {\n    ro += dstTrObj * rd;\n    vn = TrObjNf (ro);\n    col = mix (col * vec3 (1., 1., 0.7), SkyBgCol (ro, reflect (rd, vn)),\n       0.2 + 0.7 * pow (1. - max (- dot (rd, vn), 0.), 3.));\n  }\n  col = FogCol (col, roo, rd, min (dstObj, dstGrnd));\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr, t;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  treeHt = 7.;\n  dSep = 3.;\n  az = 0.;\n  el = -0.05 * pi;\n  if (mPtr.z > 0.) {\n    az -= 2. * pi * mPtr.x;\n    el -= 0.5 * pi * mPtr.y;\n  } else {\n    t = mod (0.005 * tCur, 2.);\n    az = 2.5 * pi * (0.5 - abs ((floor (16. * t) + smoothstep (0.8, 1., fract (16. * t))) / 16. - 1.));\n  }\n  el = clamp (el, -0.45 * pi, -0.02 * pi);\n  vuMat = StdVuMat (el, az);\n  grndScl = 50.;\n  ro = vec3 (0., 0.05, -1.7 + 0.5 * abs (mod (az / pi + 1., 2.) - 1.)) * grndScl;\n  ro = vuMat * ro;\n  zmFac = 3.5;\n  dstFar = 10. * grndScl;\n  sunDir = normalize (vec3 (0., 1., 1.));\n #if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, vec3 (37., 39., 41.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2e (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 6; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.96875);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.05, 0.); //vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}