{
    "Shader": {
        "info": {
            "date": "1487340767",
            "description": "Pretty unexpected animation.",
            "flags": 64,
            "hasliked": 0,
            "id": "Xdsyz4",
            "likes": 2,
            "name": "[ #03 ] - Flight of the Icarus",
            "published": 3,
            "tags": [
                "2d",
                "sound",
                "blending"
            ],
            "usePreview": 0,
            "username": "Yrai",
            "viewed": 1092
        },
        "renderpass": [
            {
                "code": "\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define res_            iResolution\n#define time_           iTime\n#define mod3_           vec3(.1031, .11369, .13787)\n\n#define crot(a)   mat2(cos(a),-sin(a),sin(a),cos(a))\n#define ccrot(a)  mat2(cos(a),sin(a),-sin(a),cos(a))\n\nvec2  domain(vec2 uv, float s);\nfloat rand(float x);\nfloat triangle(float x);\nvec3  hash3_3(vec3 p3);\n\n\nfloat _union_soft(float a, float b, float r) {\n\tfloat e = max(r - abs(a - b), 0.);\n\treturn min(a, b) - e*e*0.25/r;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n\tfloat snd = texture(iChannel0, vec2( 0.01, 0.25 ) ).x;\n    vec2 p = domain(fragCoord, 2.8);\n    p *= crot(snd);\n    p *= ccrot(.2*time_);\n    \n    float size = .5*snd+.8;\n    float squared = max(abs(p.x), abs(p.y)) - size;\n    \n    float t = 10.*sin(.3*time_);\n    float deformation = clamp(snd, 0.02, 0.08)*cos(t*atan(p.x, p.y));\n    squared += deformation;\n   \t\n    float hatch = sin(triangle(4.*p.x)*11.)*rand(p.x)*rand(p.y) + \n                  triangle(4.*p.y)*1.*rand(p.y);\n    \n   \n    vec3 c  = vec3(0.);\n    vec3 surface_color = vec3(199., 176., 145.) / 255.;\n    vec3 bg = mix(surface_color, surface_color*5., deformation*hatch);\n   \n    c = snd * bg * smoothstep(.02, .01, squared);\n    c = mix(c, bg*1.4, 2.-length(p)-.1);\n    c = mix(c, .2*vec3(4., .4, .3), .5*snd);\n   \n    if(snd > .5)\n        p.x += 6.*time_;\n    else \n        p.x += time_;\n    \n    \n    p.x = mod(p.x, 1.) - .5;\n    p.y = mod(p.y, 1.) - .5;\n    \n    vec2 q = p;\n    q *= crot(52.*time_);\n    float square_rain = max(abs(q.x), abs(q.y)) - .09;\n    \n    c += .3*smoothstep(\n        .008, .001,\n        _union_soft(square_rain, squared, rand(time_))\n    )+rand(time_)*.01;\n    \n   \tc += bg * smoothstep(.008, .001, _union_soft(square_rain, -squared, 2.));\n   \tc = mix(c, c*rand(time_), snd);\n        \n    fragColor = vec4(c, 1.);\n}\n\nvec2 domain(vec2 uv, float s) {\n    return (2.*uv.xy-res_.xy) / res_.y*s;\n}\n\nfloat rand(float x) {\n    return fract(sin(x) * 43758.5453);\n}\n\nfloat triangle(float x) {\n\treturn abs(1.0 - mod(abs(x), 2.0)) * 2.0 - 1.0;\n}\n\nvec3 hash3_3(vec3 p3) {\n\tp3 = fract(p3 * mod3_);\n    p3 += dot(p3, p3.yxz + 19.19);\n    return -1. + 2. * fract(vec3((p3.x + p3.y) * p3.z, (p3.x+p3.z) * p3.y, (p3.y+p3.z) * p3.x));\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 7250,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/astrix-official/pistolero"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}