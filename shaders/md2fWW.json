{
    "Shader": {
        "info": {
            "date": "1689742087",
            "description": "A signed distance field of two repeating overlapping circle grids, often known as the Flower of Life, slowly spin and change. Major color changes begin about 10 seconds. Shouldn't noticeably loop.",
            "flags": 0,
            "hasliked": 0,
            "id": "md2fWW",
            "likes": 8,
            "name": "Flower of Life Trance - SDF",
            "published": 3,
            "tags": [
                "2d",
                "distancefield",
                "sdf",
                "circle",
                "distance",
                "floweroflife"
            ],
            "usePreview": 0,
            "username": "13rac1",
            "viewed": 355
        },
        "renderpass": [
            {
                "code": "/*\n * Flower of Life Trance\n *\n * A signed distance field of two repeating overlapping circle grids,\n * often known as the Flower of Life, slowly spin and change.\n *\n * Designed for and with ambient music:\n * Carbon Based Lifeforms - 6EQUJ5\n * https://www.youtube.com/watch?v=a6YU4O3zq_M\n */\n\n#define SPEED 2.0\n\n#define PI 3.1415926538\n\nfloat sdRing(in vec2 p, in float r1, in float r2) {\n  return abs(length(p) - r1) - r2;\n}\n\nfloat sdFlowerOfLife( in vec2 p, in float r1, in float r2) {\n    float d = sdRing(p,r1,r2);\n\n    d = min(d, sdRing(p+vec2(0.0,-r1),r1,r2));\n    d = min(d, sdRing(p+vec2(0.0,r1),r1,r2));\n\n    vec2 pos = vec2(r1 * cos(PI/6.0), r1 * sin(PI/6.0));\n    vec2 rpos = reflect(pos, vec2(0.0,1.0));\n\n    d = min(d, sdRing(p+pos,r1,r2));\n    d = min(d, sdRing(p-pos,r1,r2));\n    d = min(d, sdRing(p+rpos,r1,r2));\n    d = min(d, sdRing(p-rpos,r1,r2));\n\n    d = min(d, sdRing(p+vec2(r1*1.73,0.0),r1,r2));\n    d = min(d, sdRing(p+vec2(-r1*1.73,0.0),r1,r2));\n    \n    vec2 pos2 = vec2(r1*1.73 * cos(PI/3.0), r1*1.73 * sin(PI/3.0));\n    vec2 rpos2 = reflect(pos2, vec2(0.0,1.0));\n    \n    d = min(d, sdRing(p+pos2,r1,r2));\n    d = min(d, sdRing(p-pos2,r1,r2));\n    d = min(d, sdRing(p+rpos2,r1,r2));\n    d = min(d, sdRing(p-rpos2,r1,r2));\n\n    d = min(d, sdRing(p+vec2(r1*1.73,r1),r1,r2));\n    d = min(d, sdRing(p+vec2(r1*1.73,-r1),r1,r2));\n    d = min(d, sdRing(p+vec2(-r1*1.73,r1),r1,r2));\n    d = min(d, sdRing(p+vec2(-r1*1.73,-r1),r1,r2));\n    \n    return d;\n}\n\nfloat sdFlowerOfLifeRepeating(in vec2 p, in float r1, in float r2) {    \n    p += vec2(r1*0.865,r1);    \n    p = mod(p,vec2(2.0*r1*0.865,2.0*r1))-vec2(r1*0.865,r1);\n    return sdFlowerOfLife(p,r1,r2);\n}\n\n// src: https://iquilezles.org/articles/palettes/\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos(2.0*PI*(c*t+d) );\n}\n\nvec3 pEarth(in float t) {   \n    return palette(t,\n        vec3(0.5, 0.5, 0.5),\n        vec3(0.5, 0.5, 0.5),\n        vec3(1.0, 1.0, 0.5),\n        vec3(0.80, 0.90, 0.30)\n    );\n}\n\nvec2 rotate(vec2 uv, float th) {\n  return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n}\n\n// src: https://www.shadertoy.com/view/7tf3Ws\nfloat easeInOutCubic(float x) {\n    return x < .5 ? 4. * x * x * x : 1. - pow(-2. * x + 2., 3.) / 2.;\n}\n\nfloat triangleWave(float x) {\n  return abs(( mod(x, 2.0)) - 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float time = iTime*SPEED;\n    \n    // Find the diviser to handle vertical and horizontal screens.\n    float resolutionDiviser = min(iResolution.y,iResolution.x);\n    vec2 uv = (fragCoord.xy-iResolution.xy*.5)/resolutionDiviser;\n\n    // Zooming\n    uv *= easeInOutCubic(1.0-abs(cos(time/25.0)))*1.5+1.0;\n    //uv *= 2.0;\n    // Spinning\n    uv = rotate(uv, easeInOutCubic(cos(time/29.0))/2.0);\n    // Repeating flowers\n    float d = sdFlowerOfLifeRepeating(uv, 0.5, 0.00005);\n    // Repeating more flowers\n    uv = rotate(uv, -easeInOutCubic(sin(time/37.0))/2.0);\n    d = min(d-0.005, sdFlowerOfLifeRepeating(uv, 0.3+0.4*easeInOutCubic(triangleWave(time/41.0)), 0.00005));\n    // Coloring\n    vec3 col = pEarth(cos(d*10.0-time/23.0));\n    // Moving\n\tcol *= 0.7 + 0.5*cos(300.0*d + time*4.0);\n    vec3 lineCol = pEarth(cos(d*30.0-time/18.0)) * vec3(1.2);\n\tcol = mix( col, lineCol, 1.0 - smoothstep(0.0, easeInOutCubic(triangleWave(time/8.0))/58.0+0.005, d));\n    \n    // Just black and white\n    //vec3 col = vec3(smoothstep(0.0, 0.01, d));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}