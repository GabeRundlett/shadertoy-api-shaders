{
    "Shader": {
        "info": {
            "date": "1651645733",
            "description": "Timelapse:\nhttps://www.youtube.com/shorts/KEueoReMhc0",
            "flags": 0,
            "hasliked": 0,
            "id": "slffDl",
            "likes": 16,
            "name": "30 Minutes 5/3",
            "published": 3,
            "tags": [
                "3d",
                "fractal",
                "reflection",
                "trippy"
            ],
            "usePreview": 0,
            "username": "scry",
            "viewed": 346
        },
        "renderpass": [
            {
                "code": "//////////////////////////////////////////////////\n#define time iTime*0.1\n#define pi 3.1415926535\n#define deg pi/180.\n\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    return max(abs(p.z)-s.z,max(abs(p.x)-s.x,abs(p.y)-s.y));\n}\n\nfloat f1(vec2 uv) {\n    float c = sdBox(vec3(uv,0.),vec3(0.));\n    float us = 0.25;\n    for (int i=0;i<10;i++) {\n        uv = abs(uv)-us;\n        c += min(c,sdBox(vec3(uv,0.),vec3(0.)));\n        us /= 2.;\n    }\n    return c;\n}\n\nvec4 map(vec3 p) {\n    p.z -= 4.;\n    p.xy *= r2d(45.*deg);\n    p.xz *= r2d(time*0.7);\n    p.yz *= r2d(time*0.3);\n    float d = sdBox(p,vec3(1.));\n    float dc = d;\n    p.zy *= r2d(45.*deg);\n    p.zy = abs(p.zy);\n    p.zy *= r2d(45.*deg);\n    p.xz *= r2d(45.*deg);\n    p.xz = abs(p.xz);\n    p.xz *= r2d(-45.*deg);\n    p.xy *= 0.5;\n    //float a = f1(p.xy);\n    //d += (sin(a*22.+time)*0.5+0.5)*0.04;\n    d = min(d,-sdBox(p,vec3(10.)));\n    p.xy = step(dc,2.)*p.xy+step(-dc,-2.)*p.xy*0.1;\n    float a = f1(p.xy);\n    d += (sin(a*22.-time*9.+sdBox(vec3(p.xy,0.),vec3(0.))*10.)*0.5+0.5)*0.1;\n    d += (sin(a*22.+time*9.)*0.5+0.5)*0.1*dc;\n    return vec4(p.xy,p.z,d);\n}\n\nvec2 RM(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    float ii = 0.;\n    for (int i=0;i<120;i++) {\n        vec3 p = ro + rd*dO;\n        float dS = map(p).w;\n        dO += dS*0.1;\n        ii += 0.01;\n        if (dO > 100. || dS < 0.01) {break;}\n    }\n    return vec2(dO,ii);\n}\n\nvec3 calcNorm(vec3 p) {\n    vec2 h = vec2(0.001,0.);\n    float m = map(p+h.x).w;\n    return normalize(vec3(\n        m - map(p-h.xyy).w,\n        m - map(p-h.yxy).w,\n        m - map(p-h.yyx).w\n    ));\n}\n\nvec3 colo(vec3 p, vec3 n, vec2 d) {\n    vec3 mp = map(p).xyz;\n    float co = f1(mp.xy);\n    //co += time*0.2;\n    co = co;\n    co += n.x*0.2;\n    float sm = 10.;\n    vec3 col = vec3(sin(co*1.*sm),sin(co*sm*1.2),sin(co*sm*1.3))*0.5+0.5;\n    if (d.x > 99.) {\n        col = vec3(d.y);\n    }\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 R = iResolution.xy;\n    float ar = R.x/R.y;\n    uv -= 0.5;\n    uv.x *= ar;\n    vec3 col = vec3(0.);\n    col += sdBox(vec3(uv,0.),vec3(0.));\n    float us = 0.25;\n    float co = f1(uv);\n    vec3 ro = vec3(0.);\n    vec3 rd = normalize(vec3(uv,1.));\n    vec2 d = RM(ro,rd);\n    vec3 p = ro+rd*d.x;\n    vec3 n = calcNorm(p);\n    vec3 mp = map(p).xyz;\n    col = colo(p,n,d);\n    for (int i=0;i<2;i++) {\n        ro = p+n*0.003;\n        rd = reflect(rd,n);\n        d = RM(ro,rd);\n        p = ro+rd*d.x;\n        n = calcNorm(p);\n        col += colo(p,n,d)*0.5;\n    }\n    col *= 0.5;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}