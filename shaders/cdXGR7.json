{
    "Shader": {
        "info": {
            "date": "1665810488",
            "description": "wave equation with a single source. Use mouse to set source position.",
            "flags": 32,
            "hasliked": 0,
            "id": "cdXGR7",
            "likes": 11,
            "name": "wave equation single source",
            "published": 3,
            "tags": [
                "waves",
                "mouseinput",
                "differenceequation"
            ],
            "usePreview": 0,
            "username": "ilia87",
            "viewed": 239
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0,ivec2(fragCoord),0)*.1+vec4(.5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.,0.,0.,1.);\n    vec2 waveSrc = iMouse.xy / vec2(iResolution.y);\n    if (iMouse.x == 0. && iMouse.y == 0.)\n    {\n        float s = 0.4;\n        waveSrc = .3 * vec2(cos(iTime*s),sin(2.*iTime*s))  + iResolution.xy/iResolution.y*.5;\n    }\n    float waveSrcSize = .005;\n    float waveSrcFreq = 5.1;\n    //float waveLength = 2.;\n    float waveSpeed = 3.3;\n    float dampRate = 0.3;\n    \n    vec2 uv = fragCoord / iResolution.y;\n    \n    float d2 = dot(uv - waveSrc,uv-waveSrc);\n    fragColor.xy = exp(-d2/(waveSrcSize*waveSrcSize)) * vec2(sin(waveSrcFreq*iTime),waveSrcFreq*cos(waveSrcFreq*iTime));\n    \n    vec4 prevPixel = texelFetch(iChannel0,ivec2(fragCoord),0);\n    float h = prevPixel.x;\n    float dh_dt = prevPixel.y;\n    \n    float L = 0.;\n    for ( int i=0;i<5;++i)\n    {\n        for ( int j=0;j<5;++j)\n        {\n            L -= texelFetch(iChannel0,ivec2(int(fragCoord.x)+i-2,int(fragCoord.y)+j-2),0).x;\n        }\n    }\n    L += 25.*h;\n    \n    float d2h_dt2 = -L*(waveSpeed*waveSpeed);\n    dh_dt += d2h_dt2 * iTimeDelta;\n    h += dh_dt * iTimeDelta;\n    \n    h *= exp(-iTimeDelta*dampRate);\n    \n    fragColor.x += h;\n    fragColor.y += dh_dt;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}