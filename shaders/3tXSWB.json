{
    "Shader": {
        "info": {
            "date": "1564016488",
            "description": "imitating handwriting",
            "flags": 32,
            "hasliked": 0,
            "id": "3tXSWB",
            "likes": 45,
            "name": "Handwriting",
            "published": 3,
            "tags": [
                "text",
                "font",
                "draw",
                "drawing",
                "writing",
                "handwriting",
                "write"
            ],
            "usePreview": 0,
            "username": "xavierseb",
            "viewed": 1064
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tfragColor = 1.-vec4(texture(iChannel0,fragCoord.xy/iResolution.xy).xyz,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// handwriting , Xavierseb 2019\n\n// bezier control points coordinates (x0,x1,x2,x3) and (y0,y1,y2,y3)\n// font char is drawn by bezier spline with control points at (x0,y0),(x1,y1),(x2,y2),(x3,y3)\n// todo: add flip/rotate/mirror/skewitalic\n// vec4( start_point, control_point_1, control_point_2, end_point)\n#define a0_x vec4(.75,-1.32,-1.44,.75)\n#define a0_y vec4(.77,1.95,-2.28,-.59)\n#define a1_x vec4(.75,1.05,.32,1.)\n#define a1_y vec4(-.59,1.82,.78,-1.)\n#define b0_x vec4(-1.,.3,-1.66,-.8)\n#define b0_y vec4(.2,3.3,5.,-1.)*2.\n#define b1_x vec4(-1.,.6,2.,-.8)\n#define b1_y vec4(.2,2.6,-1.6,-1.)\n#define c0_x vec4(.8,-.5,-2.1,.94)\n#define c0_y vec4(.8,1.8,-1.8,-.8)\n#define c1_x vec4(.7,-.5,-2.1,.94)\n#define c1_y vec4(.8,1.8,-1.8,-.8)\n#define d0_x vec4(.64,-.8,-1.8,.74)\n#define d0_y vec4(.78,1.9,-1.7,-.86)\n#define d1_x vec4(.74,1.3,-.63,1.)\n#define d1_y vec4(-.43,4.8,3.8,0.)*2.\n#define e0_x vec4(-.8,2.8,-.65,-.8)\n#define e0_y vec4(0.,-.27,2.3,-.1)\n#define e1_x vec4(-.8,-.82,-.92,1.)\n#define e1_y vec4(-.1,-.32,-1.2,-1.)\n#define f0_x vec4(-.44,2.1,-1.,0.)*2.\n#define f0_y vec4(.44,4.4,4.,-2.4)*2.\n#define f1_x vec4(0.,.6,-1.24,.62)*2.\n#define f1_y vec4(-2.4,1.28,.56,.6)*2.\n#define g0_x vec4(.9,-.4,-2.3,.84)\n#define g0_y vec4(.34,2.4,-1.8,-.99)\n#define g1_x vec4(.9,1.,-14.1,-10.)\n#define g1_y vec4(0.,-4.7,-3.5,-.9)*2.\n#define h0_x vec4(-1.,.9,-1.1,-.75)\n#define h0_y vec4(.43,4.5,3.4,-.5)*2.\n#define h1_x vec4(-.75,-.24,.78,.94)\n#define h1_y vec4(-1.,3.7,-1.35,-1.)\n#define i0_x vec4(0.,-.14,-1.19,.64)\n#define i0_y vec4(.8,-.48,-1.07,-1.)\n#define i1_x vec4(-.05,.43,-.34,.07)\n#define i1_y vec4(2.88,2.71,2.67,2.86)\n#define j0_x vec4(0.,-.3,-14.1,-10.)\n#define j0_y vec4(.5,-6.19,-1.7,-2.5)*2.\n#define j1_x vec4(-.05,.43,-.34,.03)\n#define j1_y vec4(2.88,2.71,2.67,2.96)\n#define k0_x vec4(-.94,.58,-1.1,-.94)\n#define k0_y vec4(.6,4.35,3.6,-.7)*2.\n#define k1_x vec4(.4,-2.4,.3,.8)\n#define k1_y vec4(.8,0.,0.,-1.)\n#define l0_x vec4(-.4,1.,.3,-.17)\n#define l0_y vec4(-.5,1.2,3.8,2.8)*2.\n#define l1_x vec4(-.17,-.8,.38,.84)\n#define l1_y vec4(2.8,1.8,-1.,-.5)*2.\n#define m0_x vec4(-.9,-.9,-.33,0.)\n#define m0_y vec4(-1.,.912,1.6,-.7)\n#define m1_x vec4(0.,.33,.9,.9)\n#define m1_y vec4(-.7,1.6,.912,-1.)\n#define n0_x vec4(-1.07,-.64,-.9,-.76)\n#define n0_y vec4(.35,.93,.85,-1.)\n#define n1_x vec4(-.75,-.9,.7,.94)\n#define n1_y vec4(-1.,.85,1.9,-1.)\n#define o0_x vec4(0.,-1.1,-1.1,0.)\n#define o0_y vec4(1.,.82,-.8,-1.)\n#define o1_x vec4(0.,1.1,1.1,0.)\n#define o1_y vec4(-1.,-.8,.82,1.)\n#define p0_x vec4(-1,-.43,-.58,-1.3)\n#define p0_y vec4(.43,1.5,-1.9,-3.)*2.\n#define p1_x vec4(-.7,.83,1.75,-.7)\n#define p1_y vec4(.8,1.9,-1.75,-.8)\n#define q0_x vec4(.7,-.83,-1.75,0.)\n#define q0_y vec4(.8,1.9,-1.75,-.8)\n#define q1_x vec4(.7,-1.5,-1.74,4.13)\n#define q1_y vec4(.26,-2.7,-4.76,-2.5)*2.\n#define r0_x vec4(-.88,-.28,-.43,-.5)\n#define r0_y vec4(.86,1.5,-.67,-1.)\n#define r1_x vec4(-.5,-.54,.22,.9)\n#define r1_y vec4(-1.,1.,1.,.8)\n#define s0_x vec4(.78,-.7,-1.5,0.)\n#define s0_y vec4(.88,1.34,.55,0.)\n#define s1_x vec4(0.,1.5,.67,-.9)\n#define s1_y vec4(0.,-.55,-1.35,-.8)\n#define t0_x vec4(-.55,.35,-1.37,.76)\n#define t0_y vec4(3.,1.16,-1.1,-1.)*2.\n#define t1_x vec4(-1.,-7.7,-1.4,4.5)\n#define t1_y vec4(2.84,2.4,1.7,2.)*2.\n#define u0_x vec4(-.9,-1.1,1.,.72)\n#define u0_y vec4(.9,-1.6,-1.7,.9)\n#define u1_x vec4(.72,.7,1.,1.4)\n#define u1_y vec4(.9,-1.6,-1.,-.77)\n#define v0_x vec4(-1.,-.83,-.236,0.)\n#define v0_y vec4(.88,1.5,-.73,-1.)\n#define v1_x vec4(0.,1.55,-.25,1.)\n#define v1_y vec4(-1.,1.8,.9,.65)\n#define w0_x vec4(-.7,-1.2,-.33,0.)\n#define w0_y vec4(1.,-.912,-1.6,.7)\n#define w1_x vec4(0.,.33,.9,.9)\n#define w1_y vec4(.7,-1.6,-.912,1.)\n#define x0_x vec4(.83,.25,-.3,-1.)\n#define x0_y vec4(.95,.6,-.5,-1.)\n#define x1_x vec4(-.9,.48,-.43,1.)\n#define x1_y vec4(.87,.35,-.5,-1.)\n#define y0_x vec4(-.9,-.2,.9,.9)\n#define y0_y vec4(.9,-2.9,0.,.9)\n#define y1_x vec4(.9,-.37,-14.1,-10.)\n#define y1_y vec4(.2,-4.7,-3.5,-.9)*2.\n#define z0_x vec4(-.9,1.1,1.3,0.)\n#define z0_y vec4(.9,.9,1.5,0.)\n#define z1_x vec4(0.,-1.3,-1.1,.9)\n#define z1_y vec4(0.,-1.5,-.9,-.9)\n\n#define love0_x vec4(0.,-.45,-2.,0.)*2.\n#define love0_y vec4(.58,1.4,1.,-1.)*3.\n#define love1_x vec4(0.,2.,.45,0.)*2.\n#define love1_y vec4(-1.,1.,1.4,.58)*3.\n#define qu0_x vec4(-.66,2.74,-.3,-.05)\n#define qu0_y vec4(2.9,3.35,1.6,.58)*2.\n#define qu1_x vec4(-.05,.43,-.34,.03)\n#define qu1_y vec4(-.42,-.59,-.63,-.44)\n\n// include scale and translate of raw chars which are by default \n#define draw(a,b,c,d) a/2.+.5,b/3.+1.35,c/2.+.5,d/3.+1.35\n\n// combine x and y coordinates of 1st and 2nd curves needed to draw the char\n#define A draw(a0_x,a0_y,a1_x,a1_y),\n#define B draw(b0_x,b0_y,b1_x,b1_y),\n#define C draw(c0_x,c0_y,c1_x,c1_y),\n#define D draw(d0_x,d0_y,d1_x,d1_y),\n#define E draw(e0_x,e0_y,e1_x,e1_y),\n#define F draw(f0_x,f0_y,f1_x,f1_y),\n#define G draw(g0_x,g0_y,g1_x,g1_y),\n#define H draw(h0_x,h0_y,h1_x,h1_y),\n#define I draw(i0_x,i0_y,i1_x,i1_y),\n#define J draw(j0_x,j0_y,j1_x,j1_y),\n#define K draw(k0_x,k0_y,k1_x,k1_y),\n#define L draw(l0_x,l0_y,l1_x,l1_y),\n#define M draw(m0_x,m0_y,m1_x,m1_y),\n#define N draw(n0_x,n0_y,n1_x,n1_y),\n#define O draw(o0_x,o0_y,o1_x,o1_y),\n#define P draw(p0_x,p0_y,p1_x,p1_y),\n#define Q draw(q0_x,q0_y,q1_x,q1_y),\n#define R draw(r0_x,r0_y,r1_x,r1_y),\n#define S draw(s0_x,s0_y,s1_x,s1_y),\n#define T draw(t0_x,t0_y,t1_x,t1_y),\n#define U draw(u0_x,u0_y,u1_x,u1_y),\n#define V draw(v0_x,v0_y,v1_x,v1_y),\n#define W draw(w0_x,w0_y,w1_x,w1_y),\n#define X draw(x0_x,x0_y,x1_x,x1_y),\n#define Y draw(y0_x,y0_y,y1_x,y1_y),\n#define Z draw(z0_x,z0_y,z1_x,z1_y),\n#define QU draw(qu0_x,qu0_y,qu1_x,qu1_y),\n#define LOVE draw(love0_x,love0_y,love1_x,love1_y),\n#define SP draw(vec4(1000.),vec4(1000.),vec4(1000.),vec4(1000.)),\n#define END draw(vec4(1000.),vec4(1000.),vec4(1000.),vec4(1000.))\n\n// randomizing to emulate messy handwriting\n#define rnd(p) vec4(.22*fract(sin(p/1.1)*122345.0),.58*fract(sin(p/1.2)*234567.0),.58*fract(sin(p/1.3)*333333.),.2*fract(sin(p/1.4)*222222.))\n#define rnd1(p) vec4(.2*fract(sin(p/1.5)*176543.0),.58*fract(sin(p/1.6)*456789.0),.58*fract(sin(p/1.7)*111111.),.2*fract(sin(p/1.8)*668766.))\n\n#define COLOR(r,g,b) vec4 color=vec4(1.-r,1.-g,1.-b,1.)\n  \n    //---------parameters to tinker with------------------\n    //\n\t// 2 bezier curves for each character, \n\t// e.g. for the letter a, \n\t// x coords of control points are vec4(.75,-1.32,-1.44,.75) = x-coords of curve first part of 'a', vec4(.77,1.95,-2.28,-.59) = x-coords of second curve to draw 'a'\n\t// y coords are vec4(.75,1.05,.32,1.), vec4(-.59,1.82,.78,-1.), ditto\n\t// note: combining mismatched letters can make other interesting shapes.\n\t#define widthInChars 17\n\t#define numberOfLines 3\n\t// array of wise widthInChars * [number of lines] * 4 + 4\n \tvec4 chars[] = vec4[ widthInChars * numberOfLines *4 +4] ( \n    \t\tD E A R SP  T R A C E Y LOVE SP L O O K \n    \t\tA T SP M Y SP H A N D W R I T I N G \n   \t\t\tH O P E SP Y O U SP L I K E SP I T SP \n    \t\tEND \n \t);\n\t//\n\t//\tuncomment to enable\n\t//\n\t#define DEFAULT_PEN\n\t//#define OTHER_PEN\n\t//\n\t//\n\t//\n    // density of dots drawn 1 - 60 this is related to fps, \n    // when adjusting this, adjust opacity too!\n    // higher fps monitors to need density set higher to slow \n    // down drawing animation pace, not tested on high fps monitor\n\t#define idensity 12\n\t// messiness  0.0 - 2.0\n\t//#define messiness .79 \n    // color = 0 to 1. for each r,g,b  opacity is ranged 0. to 1.\n\t#define thickness .15\n    // adjust opacity and density together to find sweet spot\n\t#define opacity  2.\n\t//vec4 color =vec4(1.)-vec4( .3, .4,.5, 0.); \n\tCOLOR(.3,.4,.5);\n\t// #define fadeout vec4(0.998,.995,.985,1.)\n    // vertical page feed\n    #define page_feed  4.5\n    // messiness  0.0 - 2.0\n    #define messiness .79 \n    // vertical offset where writing happens\n    #define yPos 1.5\n\t//\t\n\t// uncomment below to enable rotation matrix\n\t//#define ROT(angle) mat2(cos(angle),sin(angle),-sin(angle),cos(angle))\n\t//\n\t// uncomment below to enable skew matrix (italic)\n\t//#define ITALIC mat2(.5,0.,.4,1.)\n\t//\n\t//#define EVIL\n    //--------------------END-----------------------------\n\n\nvec2 getPos(float t, mat4x2 My)\n{\n    float t1 = 1.-t; \n    // bezier curve plot xout and yout ( x(t) and y(t) ) are in the range [0.0,1.0]    \n    return My*vec4(t1*t1*t1, 3.*t1*t1*t, 3.*t1*t*t, t*t*t);\n}\n\n\n        \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 disp = fragCoord.xy/iResolution.xy;\n    const int i2W = 2*widthInChars;\n    //const int numberOfLines = (chars.length()/4-1)/widthInChars;\n    const float fW = float(i2W/2);\n    const float density = float(idensity);\n\n\n    // jump from char to char (after drawing all the points of char, jump to next char)\n    int textPos = (iFrame%(i2W*idensity *numberOfLines))/idensity;    \n    float hPos = float( (textPos%i2W)/2 );//float(((iFrame%(iW*2*idensity))/idensity)/2);\n    \n    float spot=0.;\n    float mess=round(iTime/(hPos+1.));\n    mat4x2 My = \n        \t\t#ifdef ITALIC\n        \t\tITALIC *\n        \t\t#endif\n        \t\t#ifdef ROT\n        \t\tROT(.35) *\n        \t\t#endif\n        \t\ttranspose(mat2x4(\n    \t\t\tchars[2*textPos]  +rnd(mess) * messiness,\n    \t\t\tchars[2*textPos+1]*iResolution.x/iResolution.y  +rnd1(mess) * messiness)); \n    // character drawn exactly the same as the getPos() function\n\n    vec2 v = disp*fW - vec2(hPos,yPos);\n    \n    float bpos = float(iFrame%idensity)/density;\n#ifdef OTHER_PEN\n    \n    for (float mstep=0.; mstep<1./density; mstep+=.1/density) {  \n        vec2 h0 = getPos(bpos+mstep,My);\n        vec2 h1 = getPos(bpos+mstep+1./density,My);\n    \tfloat d=10.;\n        \n        h1 -= h0;\n        float y = length(h1)*10.;\n\t#ifdef EVIL\n        for(float yconst=y, b1=bpos+mstep-2./density; y>0.; y--, b1+=.1/yconst) //evil\n\t#else\n        for(float yconst=y, b1=bpos+mstep; y>0.; y-=2., b1+=.1/yconst) \n\t#endif\n            //if (d>.01) // uncomment when using thicker text\n                d=min(d,distance(v, getPos(b1,My).xy));\n        \n     \tspot += (thickness - clamp(d,0.,thickness));\n       \n    }\n    \n#else\n    // draw dot and fill in dots at density matching derivative\n    #ifdef EVIL\n    for (float mstep=0.-2./density; mstep<1./density; mstep+=.05/density)  \n    #else\n    for (float mstep=0.; mstep<1./density; mstep+=.05/density)  \n    #endif\n    {\n        vec2 xy = getPos(bpos+mstep,My);       \n    \tspot += (thickness - clamp(length(xy-v),0.,thickness));\n    }\n#endif\n    fragColor = spot*color*opacity + texture(iChannel0,disp) /* *fadeout*/; \n\n    // vertical page feed\n    if(iFrame%(i2W*idensity)==0) {\n    \tif(iFrame%(i2W*idensity*numberOfLines)==0) fragColor=vec4(0.,0.,0.,1.);   \n        else {\n            disp.y -= (page_feed/fW);\n            fragColor = texture(iChannel0,disp);\n        }\n    }       \n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}