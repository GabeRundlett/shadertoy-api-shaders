{
    "Shader": {
        "info": {
            "date": "1693752960",
            "description": "Just a test with making fractals react to an audio input. Need to fine tune",
            "flags": 64,
            "hasliked": 0,
            "id": "dtSBR1",
            "likes": 6,
            "name": "Audio Reactive Fractal",
            "published": 3,
            "tags": [
                "fractal",
                "audio",
                "dub"
            ],
            "usePreview": 0,
            "username": "FaustianBargainForTop",
            "viewed": 217
        },
        "renderpass": [
            {
                "code": "#define freq(f) texture(iChannel0, vec2(f, 0.25)).x * 0.8\nfloat avgFreq(float start, float end, float step) {\n    float div = 0.0;\n    float total = 0.0;\n    for (float pos = start; pos < end; pos += step) {\n        div += 1.0;\n        total += freq(pos);\n    }\n    return total / div;\n}\n\n\nvec3 palette( float t ) {\n\n    float bassFreq = pow(avgFreq(0.0, 0.1, 0.01), 0.2);\n    float medFreq = pow(avgFreq(0.1, 0.6, 0.01), 0.85);\n    float topFreq = pow(avgFreq(0.6, 1.0, 0.01), 0.85);\n    \n    vec3 a = vec3(0.5, 0.5, 0.5)/sin(bassFreq);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557)/sin(bassFreq/2.);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 coll = palette(length(uv));\n     \n    vec3 col = vec3(0);\n    \n    float bassFreq = pow(avgFreq(0.0, 0.1, 0.01), 0.2);\n    float medFreq = pow(avgFreq(0.1, 0.6, 0.01), 0.85);\n    float topFreq = pow(avgFreq(0.6, 1.0, 0.01), 0.85);\n    \n    float a = .7853982;\n    float s = sin(a);\n    float c = cos(a);\n    uv *= mat2(c, -s, s, c);\n    uv *= 20.;\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor( uv);\n    \n    float m = 0.-bassFreq;\n    float t = iTime+sin(medFreq);\n    \n    \n    \n    for(float y=-1. ; y<=1. ; y++) {\n        for(float x=-1. ; x<=1. ; x++) {\n            vec2 offs = vec2(x, y);\n            \n            float bassFreq = pow(avgFreq(0.0, 0.1, 0.01), 0.85);\n            float medFreq = pow(avgFreq(0.1, 0.6, 0.01), 0.85);\n            float topFreq = pow(avgFreq(0.6, 1.0, 0.01), 0.85);\n           \n            \n            float d = length(gv-offs)+mix(.1, .5, sin(medFreq));\n            float dist = length(id+offs)*.4;\n            \n            float r = mix(.3, 1.5, sin(dist-t)*.5+.5)+mix(.1, .8, sin(bassFreq));\n            m += smoothstep(r,r*.9, d)-sin(bassFreq/6.);\n            \n            }\n        }\n    float y=-1. ; y<=1. ; y++;    \n    float x=-1. ; x<=1. ; x++;    \n    vec2 offs = vec2(x, y); \n   \n    float dist = length(id+offs)*.4;\n    //col.rg = gv;\n    col += mod(m, 1.2);\n    col *= coll + sin(dist-t)*medFreq;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 34625,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/deepheads/congi-occult-feat-segilola"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}