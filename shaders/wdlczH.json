{
    "Shader": {
        "info": {
            "date": "1584199845",
            "description": "One more day.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdlczH",
            "likes": 7,
            "name": "#694 - Daily Experiments",
            "published": 3,
            "tags": [
                "2d",
                "experiment",
                "daily",
                "everyday"
            ],
            "usePreview": 0,
            "username": "sixclones",
            "viewed": 337
        },
        "renderpass": [
            {
                "code": "/* Code by Sixclones\n\nMy boilerplate: https://www.shadertoy.com/view/wdsyzH */\n\n// CONSTANTS & UTILS\n#define QP 0.785398163397448\n#define HP 1.570796326794897\n#define P 3.141592653589793\n#define TP 6.283185307179586\n\n#define t iTime\n#define ht 0.5 * t\n#define tt 0.1 * t\n\n#define S(a, b, t) smoothstep(a, b, t)\n\n// UTILS FN\n/* map a value `n` from a range `start1` -> `stop1` to a range `start2` -> `stop2` */\nfloat map(float n, float start1, float stop1, float start2, float stop2) {\n  return (n - start1) / (stop1 - start1) * (stop2 - start2) + start2;\n}\n\n/* map a value `n` from the range -1.0 -> 1.0 to a range `start2` -> `stop2`\nto be used with cos/sin\n`map01(sin(x), 0.0, 1.0)`\n*/\nfloat map01(float n, float start2, float stop2) {\n  return (0.5 * n + 0.5) * (stop2 - start2) + start2;\n}\n\n/* function to draw stroke\nx - sdf to draw\ns - size of the draw\nw - width of the stroke\np - precision of the stroke\n\ninspired by Pixel Spirit Deck `stroke` function\nhttps://github.com/patriciogonzalezvivo/PixelSpiritDeck/blob/master/lib/stroke.glsl\n*/\nfloat stroke(float x, float s, float w, float p) {\n  return clamp(\n    S(s + p, s - p, x - 0.5 * w) * S(s - p, s + p, x + 0.5 * w),\n    0.0, 1.0);\n}\n\n/* function that render the waves\nuv - uv of the screen\nn - number of waves\nid - identification of the cell\npre - precision of the waves\noffset - offset used to change the shape/position of waves\n*/\nfloat waves(vec2 uv, float n, vec2 id, float pre, float offset) {\n    // create a repetition of `n` lines on the y axis\n    float x = fract(n * uv.y);\n    \n    /* define the width of each line by offsetting with `id.y`\n\t(by width I mean the wideness of the stroke)\n\tadding a subtle wavy effect inside the wave with `QP * uv.x`\n\tyou exagerate it by multiplying by `10.0 * QP * uv.x`\n\t*/\n  \tfloat w = map01(\n\t    sin(-tt + id.y + QP * uv.x + cos(ht)),\n    \t0.1, 0.45);\n    \n    // make the wave moves and offset each line with `id.y` again\n  \tfloat s = map01(\n\t    cos(ht + HP * uv.x + id.y + offset),\n    \t1.0 - w, w);\n    \n    // combine everything\n  \treturn stroke(x, s, w, pre);\n}\n\n// MAIN\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uv0 = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n\n\t// number of lines that oscillate between 6 and 10 with a nice curve\n    float n = map01(\n      sin(ht + sin(t - P * uv.y) + cos(-t + HP * uv.x)),\n      6.0, 10.0);\n  \tvec2 id = floor(n * uv0);\n\n    // start with a white background and substract the waves\n  \tvec3 color = vec3(1.0);\n\n    // animate the precision\n  \tfloat pre = map01(cos(t + P * uv.y), 0.025, 0.125);\n    // define a different offset for each color channel\n  \tvec3 offset = vec3(\n    \t0.5 * cos(t + 1.2 * P * uv.x),\n    \t0.25 * cos(t + P * uv.x),\n    \t0.1 * cos(t + 0.8 * P * uv.x)\n  \t);\n    // make the magic happens\n  \tcolor.r -= waves(uv0, n, id, pre + 0.025, offset.x);\n  \tcolor.g -= waves(uv0, n, id, pre + 0.0, offset.y);\n  \tcolor.b -= waves(uv0, n, id, pre + 0.05, offset.z);\n\n  \tfragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}