{
    "Shader": {
        "info": {
            "date": "1611080114",
            "description": "This is a debugging functions demo inspired by st_assert(). 3 debugging functions are provided, one for float output, one for vec2, and one for vec3. If you call each function at any time, you can check the value by overwriting the final output.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttVcWD",
            "likes": 4,
            "name": "[util] debug_1F/2V/3V",
            "published": 3,
            "tags": [
                "debug",
                "util",
                "feature"
            ],
            "usePreview": 0,
            "username": "iY0Yi",
            "viewed": 318
        },
        "renderpass": [
            {
                "code": "const float MIN_DIST = .001;\nconst float MAX_DIST = 100.;\nconst int ITR = 100;\nconst float INV_ITR = (1./float(ITR));\n\nfloat map(vec3 p){\n    float d = p.y;\n    vec3 q = p;\n    p.xz = mod(p.xz, 3.)-1.5;\n    p.y-= 1.;\n    d = min(length(p)-1., d);\n    return d;\n}\n\nvec3 normal(vec3 p){\n    vec3 e = vec3(0, 1,-1)*MIN_DIST;\n    return normalize(vec3(map(p+e.yxx)-map(p+e.zxx),map(p+e.xyx)-map(p+e.xzx),map(p+e.xxy)-map(p+e.xxz)));\n}\n\nfloat march(vec3 ro, vec3 rd){\n    float t = 0.;\n    for(int i=0; i<ITR; i++){\n        vec3 p = ro + rd * t;\n        float d = map(p);\n        if(d<=MIN_DIST) break;\n        t += d;\n        if(t < MIN_DIST) break;\n        if(t >= MAX_DIST) return MAX_DIST;\n        //EX: Marching Cost\n        //dbg_1F( float(i)*(1./float(ITR)) );\n        //st_assert(i<90, 0);\n    }\n    return t;\n}\n\nvec3 render(in vec2 fragCoord){\n      vec2 uv = fragCoord/iResolution.xy;\n      uv = uv*2.-1.;\n      uv.y *= iResolution.y/iResolution.x;      \n      //EX: UV coord\n      //dbg_2V(uv);\n      \n      vec3 ro = vec3(0,4,-5);\n      vec3 rd = normalize(vec3(uv-vec2(0,.55), 2));\n      rd.xz *= mat2(cos(iTime+vec4(0,11,33,0)));\n      float d = march(ro, rd);\n      //EX: Hit distance\n      //dbg_1F( d*INV_ITR );\n      \n      vec3 col = vec3(0);\n      \n      if(d<MAX_DIST){\n          vec3 p = ro + rd * d;\n          //EX: Hit position\n          //dbg_3V( p/MAX_DIST );\n          \n          vec3 n = normal(p);\n          //EX: Hit normal\n          dbg_3V( n*.5+.5 );\n          \n          float l = max(0., dot(n,vec3(.5,1,-.5)));\n          col = vec3(.8)*l;\n      }\n      col = pow(col, vec3(.45));\n      return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec3 col = render(fragCoord);\n    fragColor = vec4(col,1.0);\n\n    drawDebug(fragColor); //You can turn on/off all debugging.\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Visual Debugging Util by iY0Yi\n// dbg_1F() / dbg_2V() / dbg_3V() / drawDebug()\n// https://www.shadertoy.com/view/ttVcWD\n// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nvec4 dbC=vec4(0);\nvoid dbg_1F(float v){dbC=vec4(v,v,v,1);}\nvoid dbg_2V(vec2 v) {dbC=vec4(v,0,1);}\nvoid dbg_3V(vec3 v) {dbC=vec4(v,1);}\nvoid drawDebug(inout vec4 frC)\n{if(dbC.w>0.)frC=pow(dbC,vec4(.4545));}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}