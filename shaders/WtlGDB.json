{
    "Shader": {
        "info": {
            "date": "1557502831",
            "description": "Still work to do, trails were working properly in another context",
            "flags": 0,
            "hasliked": 0,
            "id": "WtlGDB",
            "likes": 12,
            "name": "Stars travel",
            "published": 3,
            "tags": [
                "2d",
                "space",
                "stars"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 1117
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvec3 highlightRed = vec3(255,233,161)/155.0;\nvec3 redStr =vec3(255.0,39.0,49.0)/255.0;// vec3(0.8793, 0.213,0.421);\nconst float PI = 3.1415927;\nconst float EPS = 0.001;\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n\nfloat lenSqr(vec2 v)\n{\n  return v.x*v.x+v.y*v.y;\n}\n\nfloat lenNY(vec2 v)\n{\n  return abs(v.x)+abs(v.y);\n}\n\nfloat getAngle(vec2 uv)\n{\n  return atan(uv.y, uv.x)/PI;\n}\n\nfloat sat(float a)\n{\n  return clamp(a,0.0,1.0);\n}\n\nvec3 sat(vec3 v)\n{\n  return vec3(sat(v.x),sat(v.y),sat(v.z));\n}\n\nfloat mypow(float a)\n{\n  return pow(a,15.0);\n}\n\n\nvec3 rdrStar(vec2 uv, vec3 pos)\n{\n  float val = 1.0-clamp(length(uv-pos.xy)/pos.z,0.0,1.0);\n  return vec3(pow(val,5.0));\n}\n\n\nvec3 rdrStarTrail(vec2 uv, vec3 pos)\n{\n  //return vec3(0.0);\n  float len = length(uv);\n  float trailLen = length(pos.xy);\n  float flen = 1.0-sat(dot(-uv+pos.xy, -pos.xy));//sat(len/trailLen);\n\treturn vec3(flen)*0.01;\n  float ftrail = 1.0-sat(trailLen / (.05));//end of trail\n  return ftrail*2.2*len*len*pow(flen,50.0)*vec3(sat(mypow(dot(normalize(pos.xy), normalize(uv)))));\n}\n\n\n\nfloat renderStars(vec2 uv, float speed, float sz, float offset)\n{\n  float angle = getAngle(uv);\n  int cntStars = 20;\n  vec3 res;\n\n  for(int i = 0; i < cntStars; ++i)\n  {\n    float fi = float(i);\n    float maxRad = 1.5;\n    float r = mod(fi/float(cntStars)+iTime*speed,maxRad);\n    float a =fi*offset+offset;\n    vec2 pos = vec2(r*cos(a),r*sin(a));\n    res+= rdrStarTrail(uv, vec3(pos,sz));\n    res+= rdrStar(uv, vec3(pos,0.1*r*sz));\n  }\n  return res.x;\n  //return vec3(1.0)-sat(mix(highlightRed, redStr, res.x));\n}\n\nvec3 rdrBg(vec2 uv)\n{\n  vec3 bg = 0.6*vec3(72,12,66)/255.0;\n  float lenny = sat(lenNY(uv));\n  vec3 sun = 0.7*mix(highlightRed, vec3(0.0), sqrt(sat(lenny*1.2)));\n  vec3 sun2 = 0.2*mix(highlightRed, vec3(0.0), lenny*0.7);\n\n  return bg+sun+sun2;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord.xy / iResolution.xx;\n  vec2 cuv = uv - (iResolution.xy/iResolution.xx)*0.5;\n  if (abs(cuv.x) > EPS && abs(cuv.y) > EPS)\n  cuv = normalize(cuv)*pow(length(cuv),0.5);\n  float noise = 0.1*sat(rand(10.0*uv+vec2(iTime*0.0001,0.0)));\n  vec3 bg = rdrBg(cuv);\n  float spd = 0.5;\n\n  float str1 = renderStars(cuv,1.0*spd, 5.0, 1.0);\n  vec3 outCol = 0.5*(vec3(1.0)-sat(mix(highlightRed, redStr, str1)));\n  vec3 outCol2 = 0.5*vec3(highlightRed)*renderStars(cuv,2.0*spd, 0.7, 3.53);\n  fragColor = vec4(bg+outCol+noise+outCol2, 0.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}