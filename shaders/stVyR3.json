{
    "Shader": {
        "info": {
            "date": "1661942127",
            "description": "A collection of heat ramps that don't wrap around for debugging and visualization of various data. Optimizations and improvements are welcomed. Ramps work with t clamped to interval [0.0,1.0].",
            "flags": 0,
            "hasliked": 0,
            "id": "stVyR3",
            "likes": 5,
            "name": "Color heat ramp collection",
            "published": 3,
            "tags": [
                "heatmapramp"
            ],
            "usePreview": 0,
            "username": "Raxvan",
            "viewed": 245
        },
        "renderpass": [
            {
                "code": "\n//sources (with minor adjustments):\n// https://www.shadertoy.com/view/XtjBzG\n// https://www.shadertoy.com/view/llKGWG\n// https://www.shadertoy.com/view/ltlSRj\n// https://www.shadertoy.com/view/4ttfRn\n\n//----------------------------------------------------------------------------------------------\n//source: https://www.shadertoy.com/view/XtjBzG\n\nvec3 ramp0(float t)\n{\n    t = clamp(t, 0.0,1.0);\n    t *= 4.;\n    return clamp(vec3(min(t-1.5, 4.5-t),\n                      min(t-0.5, 3.5-t),\n                      min(t+0.5, 2.5-t)),\n                 0.0, 1.0);\n}\nvec3 ramp0_smooth(float t)\n{\n    return smoothstep(0.0, 1.0, ramp0(t));\n}\n\n//----------------------------------------------------------------------------------------------\n//source https://www.shadertoy.com/view/llKGWG\n\nvec3 ramp1(float greyValue) {\n    vec3 heat;\n    greyValue = clamp(greyValue, 0.0, 1.0);\n    heat.r = smoothstep(0.5, 0.8, greyValue);\n    if(greyValue >= 0.90) {\n        heat.r *= (1.1 - greyValue) * 5.0;\n    }\n    if(greyValue > 0.7) {\n        heat.g = smoothstep(1.0, 0.7, greyValue);\n    } else {\n        heat.g = smoothstep(0.0, 0.7, greyValue);\n    }\n    heat.b = smoothstep(1.0, 0.0, greyValue);\n    if(greyValue <= 0.3) {\n        heat.b *= greyValue / 0.3;\n    }\n    return heat;\n}\n\n\n//----------------------------------------------------------------------------------------------\n//source https://www.shadertoy.com/view/ltlSRj (optimized version)\n\nvec3 ramp_red_to_green( float t )\n{\n    return vec3(min(1., 2.-2.*t), min(1., 2.*t), 0.);\n}\nvec3 ramp_green_to_blue( float t )\n{\n    return vec3(0., min(1., 2.-2.*t), min(1., 2.*t));\n}\nvec3 heat2( float t )\n{\n    return mix(vec3(0.0, 0.0, 1.0), vec3(1.0, 0.0, 0.0), t);\n}\nvec3 heat5( float t )\n{\n    t = clamp(t, 0.0, 1.0);\n    float ta = 1.0 - t * 2.0;\n    float tb = ta + 1.0;\n    return mix(ramp_green_to_blue(ta), ramp_red_to_green(tb), step(0.5, t));\n    \n}\nvec3 heat7( float interpolant )\n{\n    if( interpolant < 1.0 / 6.0 )\n    {\n        float firstSegmentInterpolant = 6.0 * interpolant;\n        return ( 1.0 - firstSegmentInterpolant ) * vec3(0.0, 0.0, 0.0) + firstSegmentInterpolant * vec3(0.0, 0.0, 1.0);\n    }\n    else if( interpolant < 5.0 / 6.0 )\n    {\n        float midInterpolant = 0.25 * ( 6.0 * interpolant - 1.0 );\n        return heat5( midInterpolant );\n    }\n    else\n    {\n        float lastSegmentInterpolant = 6.0 * interpolant - 5.0;\n        return ( 1.0 - lastSegmentInterpolant ) * vec3(1.0, 0.0, 0.0) + lastSegmentInterpolant * vec3(1.0, 1.0, 1.0);\n    }\n}\n\n//----------------------------------------------------------------------------------------------\n//source https://www.shadertoy.com/view/4ttfRn\n\nvec3 ramp8(float t)\n{\n    vec3 c = vec3(2.,1.,0.) - 2.0 * t;\n    return clamp(vec3(1.0) - c*c,vec3(0.0), vec3(1.0));\n}\n\nvec3 ramp8_gamma(float t)\n{\n    return pow(ramp8(t), vec3(1.0 / 2.2));\n}\n\n//----------------------------------------------------------------------------------------------\n\nvec3 ramp_custom_v4(float value, vec4 intervals)\n{\n    float limit_min  = intervals.x;\n    float limit_low  = intervals.y;\n    float limit_high = intervals.z;\n    float limit_max  = intervals.w;\n\n    vec3 r;\n\n    if(value < limit_low)\n    {\n        //blue -> light blue\n        r = mix(vec3(0.0,0.0,1.0), vec3(0.0,1.0,1.0), smoothstep(limit_min, limit_low, value));\n    }\n    else if (value < limit_high)\n    {\n\n        float mp = (limit_low + limit_high) * 0.5;\n\n        //light-blue -> green\n        //green -> yellow\n        r = mix(vec3(0.0,1.0,1.0),vec3(0.0,1.0,0.0), smoothstep(limit_low, mp, value));\n        r = mix(r,vec3(1.0,1.0,0.0), smoothstep(mp, limit_high, value));\n    }\n    else\n    {\n        //yellow -> red\n        r = mix(vec3(1.0,1.0,0.0), vec3(1.0,0.0,0.0), smoothstep(limit_high, limit_max, value));\n    }\n\n    return r;\n}\nvec3 ramp_custom_v2(float value, vec2 interval)\n{\n    float r = interval.y - interval.x;\n    return ramp_custom_v4(value, vec4(interval.x) + vec4(0.0, 1.0, 2.0, 3.0) * r / 3.0);\n}\n\n\n//----------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------\n\nvec3 border(vec3 c, float y, float i, vec3 nc)\n{\n    float d = abs(y - i);\n    if(d < 0.0015)\n        return vec3(0.2);\n    if(y < i)\n        return nc;\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    float t = uv.x * 1.1 - 0.05;\n    float y = uv.y;\n\n    vec3 rgb = vec3(0.0);\n\n    rgb = border(rgb, y, 1.0, heat2(t));\n    rgb = border(rgb, y, 0.9, ramp0_smooth(t)); //dark blue -> dark red\n    rgb = border(rgb, y, 0.8, ramp0(t)); //dark blue -> dark red\n    rgb = border(rgb, y, 0.7, ramp1(t)); //black -> dark red\n    rgb = border(rgb, y, 0.6, heat7(t)); //black -> white\n    rgb = border(rgb, y, 0.5, ramp8_gamma(t)); //blue -> red\n    rgb = border(rgb, y, 0.4, ramp8(t));\n    rgb = border(rgb, y, 0.3, heat5(t));\n    rgb = border(rgb, y, 0.2, ramp_custom_v2(t, vec2(0.0,1.0)));\n    rgb = border(rgb, y, 0.1, ramp_custom_v4(t, vec4(0.0,0.25, 0.5, 1.0)));\n\n    rgb = border(rgb, t, 0.0, rgb);\n    rgb = border(rgb, t, 1.0, rgb);\n\n    fragColor = vec4(rgb,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}