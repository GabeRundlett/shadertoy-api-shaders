{
    "Shader": {
        "info": {
            "date": "1611785149",
            "description": "Raytracing in a grid to instantiate objects, cheap enough to run multisampling (you can disable it in Common line 2)",
            "flags": 32,
            "hasliked": 0,
            "id": "WlVcWK",
            "likes": 62,
            "name": "Neon ball pit",
            "published": 3,
            "tags": [
                "reflection",
                "dof",
                "bloom",
                "aa",
                "fresnel",
                "neon",
                "multisampling",
                "aces",
                "fsaa"
            ],
            "usePreview": 0,
            "username": "loicvdb",
            "viewed": 1450
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 o, vec2 u) {\n    o = sampleDof(iChannel0, iResolution.xy, vec2(.71, -.71), u);\n    float r = floor(log2(iResolution.y) - 5.5) + .5;\n    for(int i = 0; i < 4; i++)\n        o += texture(iChannel0, u/iResolution.xy, r+float(i*2))*.03;\n    vec3 x = o.rgb;\n    o = vec4((x*(2.51*x+.03))/(x*(2.43*x+.59)+.14), 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// uncomment this line for a faster version\n//#define LOW_QUALITY\n\n\n#ifdef LOW_QUALITY\n#define AA 1\n#define DOF_SAMPLES 3\n#else\n#define AA 2\n#define DOF_SAMPLES 6\n#endif\n\n\n#define APERTURE .01\n#define DOF_CLAMPING .7\n#define FOCAL_DISTANCE 8.\n\nvec4 sampleDof(sampler2D channel, vec2 channelDim, vec2 dir, vec2 u) {\n    float screenAperture = channelDim.y*APERTURE;\n    float sampleToRad = screenAperture * DOF_CLAMPING / float(DOF_SAMPLES);\n    vec4 o = vec4(0);\n    float sum = 0.;\n    for(int i = -DOF_SAMPLES; i <= DOF_SAMPLES; i++) {\n        float sRad = float(i)*sampleToRad;\n        vec4 p = texture(channel, (u+dir*sRad)/channelDim);\n        float rad = min(abs(p.a-FOCAL_DISTANCE)/p.a, DOF_CLAMPING);\n        float influence = clamp((rad*screenAperture - abs(sRad)) + .5, 0., 1.) / (rad*rad+.001);\n        o += influence * p;\n        sum += influence;\n    }\n    return o/sum;\n}\n\nfloat fresnel(const vec3 dir, const vec3 n) {\n    const float ior = 1.8;\n    const float r0 = ((1. - ior) / (1. + ior)) * ((1. - ior) / (1. + ior));\n    float x = 1.+dot(n, dir);\n    return r0 + (1.-r0) * x*x*x*x*x;\n}\n\nmat3 rotationMatrix(const vec3 rotation) {\n    vec3 c = cos(rotation), s = sin(rotation);\n    mat3 rx = mat3(1, 0, 0, 0, c.x, -s.x, 0, s.x, c.x);\n    mat3 ry = mat3(c.y, 0, -s.y, 0, 1, 0, s.y, 0, c.y);\n    mat3 rz = mat3(c.z, -s.z, 0, s.z, c.z, 0, 0, 0, 1);\n    return rz * rx * ry;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec4 sphereI(vec3 pos, const vec3 dir, vec3 sPos){\n    pos -= sPos;\n\tfloat b = -dot(pos, dir);\n\tfloat d = b * b - dot(pos, pos) + .2;\n\tif (d < 0.0) return vec4(-1.);\n\tb -= sqrt(d);\n\treturn vec4(normalize(pos+b*dir), b);\n}\n\nvec4 sceneI(const vec3 pos, const vec3 dir) {\n    vec3 s = sign(dir);\n    float t   = max(0., -(pos.y+s.y*1.3)/dir.y);\n    float end = max(0., -(pos.y-s.y*1.0)/dir.y);\n    for(int i = 0; i < 16 && t < end; i++) {\n        vec3 p = pos+t*dir;\n        vec2 fp = floor(p.xz);\n        vec2 co = cos(fp*.5+iTime);\n        vec4 sI = sphereI(pos, dir, vec3(fp+.5, co.x*co.y).xzy);\n        if(sI.w > 0.) return sI;\n        vec2 l = (s.xz*.5+.5+fp-p.xz) / dir.xz;\n        t += min(l.x, l.y) + .1;\n    }\n    return vec4(-1.);\n}\n\nvoid mainImage(out vec4 o, vec2 u) {\n    mat3 rot = rotationMatrix(vec3(-.7, iTime*.15, 0.));\n    o = vec4(0.);\n    for(int y = 1; y <= AA; y++) {\n        for(int x = 1; x <= AA; x++) {\n            vec2 uv = (floor(u)+vec2(x, y)/float(AA+1)-iResolution.xy*.5) / iResolution.y;\n            vec3 pos = vec3(0., 0., 7.) * rot;\n            vec3 dir = normalize(vec3(uv, -1.)) * rot;\n            pos.x += iTime*2.;\n            float att = 1.;\n            float d = 10.;\n            for(int i = 0; i < 2; i++) {\n                vec4 t = sceneI(pos, dir);\n                if(t.w < 0.) break;\n                if(i == 0) d = t.w;\n                pos += t.w*dir;\n                vec3 orientation = normalize(vec3(cos(floor(pos.xz) - iTime), .5).xzy);\n                vec3 emission = abs(dot(t.xyz, orientation)) < .2 ? (orientation.yxz+1.) : vec3(.0);\n                emission *= 4.*abs(fract(orientation.y*5.)*2.-1.);\n                float f = fresnel(dir, t.xyz);\n                o.rgb += att*(1.-f) * emission;\n                att *= f;\n                dir = reflect(dir, t.xyz);\n            }\n            o += vec4(att*vec3(1., 1.5, 2.)*step(0., dir.y), d);\n        }\n    }\n    o /= float(AA*AA);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 o, vec2 u) {\n    o = sampleDof(iChannel0, iResolution.xy, vec2(.71, .71), u);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}