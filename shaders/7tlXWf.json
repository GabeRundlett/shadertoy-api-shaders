{
    "Shader": {
        "info": {
            "date": "1626732886",
            "description": "\"Proper\" as in you could make a simpler version that steps a set small amount each iteration, but that would be slow or would be very inaccurate",
            "flags": 0,
            "hasliked": 0,
            "id": "7tlXWf",
            "likes": 10,
            "name": "Simplest proper voxel tracing",
            "published": 3,
            "tags": [
                "voxelraytracinginteractive"
            ],
            "usePreview": 0,
            "username": "Balint",
            "viewed": 506
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(1);\n    vec2 uv = fragCoord / iResolution.yy * 10.0;\n\n    \n    vec2 rayOrigin = vec2(6.2, 7.6);\n    vec2 mousePos = iMouse.xy / iResolution.yy * 10.0;\n    vec2 rayDirection = normalize(mousePos - rayOrigin);\n    \n    ivec2 blockPos = ivec2(uv);\n    \n    vec2 pos = rayOrigin;\n    for (int i = 0; i < 50; i++) {\n        ivec2 currentBlock = ivec2(floor(pos));\n        // If we are inside the block the pixel is in, draw grey\n        if (blockPos.x == currentBlock.x && blockPos.y == currentBlock.y) {\n            fragColor.rgb = vec3(0.5);\n            break;\n        }\n    \n        vec2 fPos = fract(pos);\n        vec2 distances = ceil(sign(rayDirection) * 0.5 + 0.5) - fPos;\n        vec2 steps = abs(distances / rayDirection);\n        float closestStep = min(steps.x, steps.y);\n        pos += rayDirection * (closestStep + 0.001);\n    }\n    \n    // Drawing grid lines\n    fragColor.rgb = mix(vec3(0, 0, 0), fragColor.rgb, step(0.05, fract(uv.x)) * step(0.05, fract(uv.y)));\n    // Drawing ray\n    vec2 normal = rayDirection.yx * vec2(-1, 1);\n    float closest = max(dot(uv - rayOrigin, rayDirection), 0.0);\n    float d = length(uv - rayOrigin - rayDirection * closest);\n    fragColor.rgb = mix(vec3(0, 1, 0), fragColor.rgb, step(0.05, d));\n    // Drawing ray origin\n    fragColor.rgb = mix(vec3(0, 0, 1), fragColor.rgb, step(0.15, length(rayOrigin - uv)));\n    // Drawing mouse pos\n    fragColor.rgb = mix(vec3(1, 0, 0), fragColor.rgb, step(0.15, length(mousePos - uv)));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}