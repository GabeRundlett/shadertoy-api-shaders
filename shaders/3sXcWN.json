{
    "Shader": {
        "info": {
            "date": "1584762228",
            "description": "网格噪声",
            "flags": 0,
            "hasliked": 0,
            "id": "3sXcWN",
            "likes": 3,
            "name": "网格噪声（CellularNoise）",
            "published": 3,
            "tags": [
                "cellularnoise"
            ],
            "usePreview": 0,
            "username": "ywqy",
            "viewed": 305
        },
        "renderpass": [
            {
                "code": "//learn from https://thebookofshaders.com/12/?lan=ch\n\nvec2 random2( vec2 p ) {\n    return fract(sin(\n        vec2(dot(p,vec2(127.1,311.7)),\n             dot(p,vec2(269.5,183.3)))\n    )*43758.5453);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    //缩放\n    //scale\n    vec2 uv = (fragCoord - iResolution.xy * .5)/iResolution.y;\n    uv *= 3.0;\n    \n    //整数小数分离\n    //Tile the space\n    vec2 i_uv = floor(uv);\n    vec2 f_uv = fract(uv);\n    \n    //最小距离\n    //minimun distance\n    float m_dist = 2.0;\n    \n    //次小距离\n    float sem_dist = 2.0;\n    \n    for (int y = -1; y <= 1; y++) {\n        for (int x = -1; x <= 1; x++) {\n        \t//相邻网格\n            //Neigbor place in the grid\n            vec2 neighbor = vec2(float(x), float(y));\n            \n            //获取相邻网格的随机值\n            //Random position from current + neighbor place in the grid\n            vec2 point = random2(i_uv + neighbor);\n            \n            //动画\n            //Animate\n            point = vec2(0.5) + .5 * sin(iTime + 3.14159 * point);\n            \n            //当前像素到相邻随机的向量\n            //Vector between the pixel and point\n            vec2 diff = f_uv - (neighbor + point);\n            \n            //距离\n            //distance to the point\n            float dist = length(diff);\n            \n            //最小距离\n            //keep the close distance\n            if(m_dist > dist) {\n            \tsem_dist = m_dist;\n                m_dist = dist;\n            }\n            \n        }\n    }\n    //画距离深度\n    //distance field\n    vec3 color = vec3(m_dist / 2.0);\n    \n    //画细胞中心\n    //Draw cell center\n    color += vec3(1. - step(.02, m_dist));\n    \n    //画等值线\n    //Show isolines\n    color -= step(.5, abs(sin(30.0 * m_dist)) ) *0.2;\n    \n    //画边界\n    //Draw broders\n    if(abs(sem_dist - m_dist)< .08)\n    color = vec3(0.6);\n    \n    \n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}