{
    "Shader": {
        "info": {
            "date": "1710817473",
            "description": "rayMarcher Texture",
            "flags": 0,
            "hasliked": 0,
            "id": "43jXzK",
            "likes": 4,
            "name": "rayMarcher Texture",
            "published": 3,
            "tags": [
                "raymarchertexture"
            ],
            "usePreview": 0,
            "username": "kenshin",
            "viewed": 149
        },
        "renderpass": [
            {
                "code": "#define MAX_DIST 100.\n#define MIN_DIST .001\n#define MAX_STEPS 100\n#define PI        3.14159265358\n#define TAU       6.28318530716\nmat2 Rot2d(float a)\n{\n    float c = cos(a),\n          s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdScene(vec3 p)\n{\n    float sphere = sdSphere(p, 1.);\n    vec2 uv = vec2(atan(p.x, p.z) / TAU, 2. * p.y / 3.) + .5;\n    float disp = texture(iChannel2, uv).r;\n    disp *= smoothstep(1., .5, abs(p.y));\n    sphere -= disp * .2;\n    return sphere * .7;\n}\n\nvec3 getNormal(vec3 p)\n{\n    float d = sdScene(p);\n    vec2  e = vec2(.001, .0);\n    return normalize(d - vec3(\n        sdScene(p - e.xyy),\n        sdScene(p - e.yxy),\n        sdScene(p - e.yyx)\n    ));\n}\n\nfloat rayMarcher(vec3 ro, vec3 rd)\n{\n    float t = .0;\n    for(int i = 0; i< MAX_STEPS; i++)\n    {\n        vec3 p = ro + t * rd;\n        float dist = sdScene(p);\n        t += dist;\n        if(dist < MIN_DIST || t > MAX_DIST) break;\n    }\n    return t;\n}\n\nvec3 getRayDirection(vec2 uv, vec3 ro, vec3 lookAt, float zoom)\n{\n    vec3 f = normalize(lookAt - ro);\n    vec3 r = normalize(cross(vec3(.0, 1., .0), f));\n    vec3 u = cross(f, r);\n    vec3 c = ro + zoom * f;\n    vec3 p = c + uv.x * r + uv.y * u;\n    return normalize(p - ro);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(.0);\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    vec3 ro = vec3(0., 0., 8.);\n    ro.xz *= Rot2d(-mouse.x * TAU + 1.);\n    ro.yz *= Rot2d(-mouse.y * PI);\n    vec3 rd = getRayDirection(uv, ro, vec3(0., 0., 0.), 3.5);\n    float t = rayMarcher(ro, rd);\n    if(t < MAX_DIST)\n    {\n        vec3 p = ro + t * rd;\n        vec3 samplerP = p * .5 + .5;\n        vec3 n = getNormal(p);\n        vec3 l = vec3(1., 2., -3.);\n        l.x *= sin(iTime);\n        l.z *= cos(iTime);\n        float diff = max(dot(n, normalize(l)), .0);\n        n = abs(n);\n        n = pow(n, vec3(20.));\n        n /= (n.x + n.y + n.z);\n        \n        vec3 colXY = texture(iChannel0, samplerP.xy).rgb;\n        vec3 colYZ = texture(iChannel0, samplerP.yz).rgb;\n        vec3 colXZ = texture(iChannel0, samplerP.xz).rgb;\n        col = colXY * abs(n.z) + colYZ * abs(n.x) + colXZ * abs(n.y);\n        \n        vec2 polar = vec2(atan(p.x, p.z) / TAU, 2.5 * p.y / 3.) + .5;\n        polar.x -= iTime * .2;\n        vec4 cats = texture(iChannel1, polar);\n        cats.a *= smoothstep(.6, .5, abs(p.y));\n        col = mix(col, cats.rgb, cats.a);\n        col *= diff;\n    }\n    \n    //col = pow(col, vec3(.4545));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}