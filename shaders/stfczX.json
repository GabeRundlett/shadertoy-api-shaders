{
    "Shader": {
        "info": {
            "date": "1648414132",
            "description": "reflect n6",
            "flags": 0,
            "hasliked": 0,
            "id": "stfczX",
            "likes": 5,
            "name": "reflect n6",
            "published": 3,
            "tags": [
                "reflectn6"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "//----------image\n//por jorge2017a1-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n#define REFLECT 2\n\n//referencia de dise√±o\n//https://www.shadertoy.com/view/7tfcRX...Created by rimina in 2022-03-27\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\n\nvec3 glow = vec3(0.0);\n\n//operacion de Union  por FabriceNeyret2\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\n\n\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{   float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n\nvoid rot(inout vec2 p, float a)\n{ p = cos(a)*p + sin(a)*vec2(p.y, -p.x); }\n\n\n//https://www.shadertoy.com/view/7tfcRX\nvec3 rotarcentro(vec3 p, vec3 tras, float a)\n{   vec3 pp = p;\n   pp -= tras;\n    rot(pp.xy, a*0.5);\n    rot(pp.xz, a*0.5);\n    rot(pp.yz, a*0.25);\n    return pp;\n}\n\nvec2 GetDist(vec3 p ) \n{\tvec2 res= vec2(9999.0, -1.0);  vec3 p0=p;\n    float planeDist1 = p.y-1.0;  //piso inf\n    res =opU2(res, vec2(planeDist1,57.0));\n    \n    float t=iTime*20.0;\n    p=p0;\n    p.y-=8.5;\n    p.xz = abs(p.xz)-vec2(15.0,10.0);\n    float d1= sdBox(p, vec3(1.5,8.0,1.5) );\n    res =opU2(res, vec2(d1,1.0));\n    \n    p=p0;\n    vec3 translate =vec3(0.0,10.0,0.0);\n    p=rotarcentro(p, translate, iTime);\n    float d2= sdBox(p, vec3(3.0,3.0,3.0) );\n    res =opU2(res, vec2(d2,2.0));\n    p=p0;\n    float d3a= sdBox(p-vec3(0.0,17.0,0.0), vec3(7.0,0.25,10.0) );\n    float d3b= sdBox(p-vec3(-25.0,5.0,0.0), vec3(0.25,10.0,6.0) );\n    p=rotate_x(p-vec3(0.0,4.0,-5.0), radians(15.0));\n    float d3c= sdBox(p, vec3(6.0,0.25,6.0) );\n    \n    res =opU2(res, vec2(d3a,201.0));\n    res =opU2(res, vec2(d3b,201.0));\n    res =opU2(res, vec2(d3c,202.0));\n    return res;\n}\n\nvec3 GetNormal(vec3 p)\n{   float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy).x,GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float PMaxSteps)\n{   float t = 0.1;\n    vec3 p;\n    vec2 hit, object=vec2(0.1,0.0);\n   for(int i=0; i <= int(PMaxSteps); i++) \n    { p = ro + rd*object.x;\n      hit = GetDist(p);\n      object.x += hit.x;\n      object.y = hit.y;\n      if (abs(hit.x) < EPSILON || object.x > MAX_DIST) break;\n    }\n    return object;\n}\n\nfloat getSoftShadow(vec3 p, vec3 lightPos) {\n    float res = 1.0;\n    float dist = 0.01;\n    float lightSize = 0.03;\n    for (int i = 0; i < MAX_STEPS; i++) {\n      float hit = GetDist(p + lightPos * dist).x;\n      res = min(res, hit / (dist * lightSize));\n      dist += hit;\n      if (hit < 0.0001 || dist > 60.0) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\n\nfloat ambOcclusion(vec3 pos, vec3 nor)\n{   float sca = 2.0, occ = 0.0;\n    for(int i = 0; i < 10; i++) {\n        float hr = 0.01 + float(i) * 0.5 / 4.0;\n        float dd = GetDist(nor * hr + pos).x;\n        occ += (hr - dd)*sca;\n        sca *= 0.6;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );\n}\n\nvec3 lightingv3(vec3 normal,vec3 p,vec3 lp,vec3 rd, vec3 ro, vec3 color )\n{   vec3 lightPos=lp;\n    vec3 hit=p;\n    vec3 norm=normal;\n    \n    vec3 light = lightPos - hit;\n    float lightDist = max(length(light), .001);\n    float atten = 1. / (1.0 + lightDist * 0.125 + lightDist * lightDist * .05);\n    light /= lightDist;\n    \n    vec3 R = reflect(-light, norm);\n    vec3 V = -rd;\n    \n    float shadow = getSoftShadow(hit, normalize(lightPos)); // shadows\n    float occ = ambOcclusion(hit, norm);// occ\n\n    vec3 ambient= 0.5*color*clamp(0.5 + 0.5*norm.y, 0.0, 1.0);\n    vec3 fresnel =  color *  pow(clamp(1.0 + dot(rd, norm), 0.0, 1.0), 2.0);;\n\n    float dif = clamp(dot(norm, light), 0.0, 1.0);\n    dif = pow(dif, 4.) * 2.;\n    vec3 diffuse =  color * dif;\n\n    float specular = pow(max(dot(R, V), 0.), 8.);\n    vec3 back = 0.5 * color * clamp(dot(norm, -light), 0.0, 1.0);// back\n  vec3 colOut = occ*color*(ambient+diffuse*shadow+.35 +back) + vec3(.7,.9,1)*specular*specular;\n   return colOut;\n}\n\n\nvec3 render_sky_color(vec3 rd)\n{   float t = (rd.x + 1.0) / 2.0;\n    vec3 col= vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n    vec3  sky = mix(vec3(.0, .1, .4)*col, vec3(.3, .6, .8), 1.0 - rd.y);\n\treturn sky;\n}\n\n//https://www.shadertoy.com/view/4lcSRn   ///IQ\nvec3 pattern( in vec2 uv )\n{   vec3 col = vec3(0.4);\n    col += 0.4*smoothstep(-0.01,0.02,cos(uv.x*0.5)*cos(uv.y*0.5)); \n    col *= smoothstep(-1.0,-0.98,cos(uv.x))*smoothstep(-1.0,-0.98,cos(uv.y));\n    return col;\n}\n\nvec3 GetColor(vec3 p,vec3 nor, float id_color)\n{  vec3 color=vec3(0.0); \n   if(id_color<50.0)\n   { color=getColor(int(id_color)); }  \n   \n    if (id_color==57.)\n        {return pattern( p.xz );}\n    if (id_color==58.)\n        {return pattern( p.xy );}\n    if (id_color==59.)\n        {return pattern( p.zy );}\n   return color;\n}\n\n\n\nvec3 linear2srgb(vec3 c) \n{ return mix(12.92 * c,1.055 * pow(c, vec3(1.0/1.8)) - 0.055, step(vec3(0.0031308), c)); }\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{ return vec3(1.0) - exp(-hdrColor * exposure); }\n\nvec3 ACESFilm(vec3 x)\n{   float a,b,c,d,e;\n    a = 2.51; b = 0.03; c = 2.43;d = 0.59; e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\n\nvec3 Render(vec3 ro, vec3 rd) \n{\n    vec3 col = vec3(0.45, 0.8, 1.0);\n    vec2 t;\n    vec3 rcol = vec3(0);\n    \n    for(int i = 0; i < 3; i++) \n    {\n    t = RayMarch(ro, rd, MAX_DIST);\n    if(t.x < MAX_DIST) \n      { vec3 pos = ro + rd*t.x;\n\t\tvec3 nor = GetNormal(pos);\n\t\tvec3 ref = reflect(rd, nor);\n        vec3 color= GetColor(pos,nor,t.y);\n        \n        rcol= lightingv3(nor,pos,light_pos1,rd, ro, color );\n        rcol+= lightingv3(nor,pos,light_pos2,rd, ro, color );\n        rcol/=2.0;\n        // set up the ray orgin and direction for reflection.\n\t\tro = pos + nor*0.001;\n            \n        if (t.y==201.0)\n        { rd = ref; rcol+=vec3(0.5); }\n        \n        if (t.y==202.0)\n        { rd=ref; rcol+=vec3(0.5);}\n            \n        if (t.y==203.0)\n        { rd = ref;}\n            \n        if (t.y==204.0)\n        { rd = ref;}\n        \n        // sky fog.\n\t\t///rcol = mix(rcol, vec3(0.45, 0.8, 1.0), 1.0 - exp(-0.00715*t.x));\n        // lighten intensity on each successive reflect.\n\t\tif(i == 0) col = rcol;\n\t\telse col = mix(rcol, col, 1.0 - exp(-0.8*float(i)));\n\t  }\n     else if(t.x>MAX_DIST)\n     col = mix(render_sky_color(rd), col, 1.0 - exp(-0.8*float(i)));\n\t}\n  return col;\n}\n\nRay RotarEnCirculo(vec3 ro,vec3 rd)\n{\n   float r=28.0;\n   float veltime=30.0;  \n    float tt = radians( -iTime*veltime);\n    vec3  pos=vec3(0.0,0.0,25.0);\n    vec3 rotation1 = pos+vec3(r*sin(tt), 0.0, r*cos(tt));\n    ro +=rotation1;   \n    rd=rotate_y( vec3(-rd.x,rd.y,-rd.z), tt);\n    return  Ray(ro,rd);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   light_pos1= vec3(-10.0, 120.0, -25.); light_color1=vec3( 1.0,1.0,1.0 );\n \tlight_pos2= vec3(10.0, 20.0, -25.0 ); light_color2 =vec3( 1.0,1.0,1.0 ); \n   vec3 ro=vec3(0.0,8.0,-25.0);\n   vec3 rd=normalize( vec3(uv.x,uv.y,1.0));\n   Ray ray= RotarEnCirculo(ro,rd);\n    ro=ray.ro;\n    rd=ray.rd;\n    \n    //light_pos1+=ro;\n    //light_pos2+=ro;\n    vec3 col= Render( ro,  rd);\n    fragColor = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//-------common\n//#define PI 3.14159265358979323846264\n#define PI 3.14159265\n\nstruct Ray\n{   vec3 ro; // origin\n    vec3 rd; // direction\n};\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0),  //0\nvec3(1.,1.,1.), //1\nvec3(1,0,0),  //2\nvec3(0,1,0),   //3\nvec3(0,0,1),   //4\nvec3(1,1,0),  //5\nvec3(0,1,1),  //6 \nvec3(1,0,1)   //7\n);\n\nvec3 getColor(int i)\n{  if (i>-1 )  return Arrcolores[i];}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}