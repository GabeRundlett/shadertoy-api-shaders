{
    "Shader": {
        "info": {
            "date": "1725792375",
            "description": "did you remarked dodecahedra have orthogonal edges ? ;-)\nMouse controls camera\nround rodes variant: uncomment #29\nreference: https://www.facebook.com/groups/tiling/posts/1903913243365545/",
            "flags": 0,
            "hasliked": 0,
            "id": "XXXyz8",
            "likes": 14,
            "name": "dodecahedra have orthogonal edge",
            "published": 3,
            "tags": [
                "wireframe",
                "dodecahedron",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 171
        },
        "renderpass": [
            {
                "code": "// docecahedron from https://shadertoy.com/view/4XfcR8\n\n#define rot(a) mat2(cos(a+vec4(0,33,11,0)))\n#define F(A)   dot(q,A) < 0. ?  q = reflect(q,A) : q \n\nvoid mainImage( out vec4 O, vec2 u ) {\n\n    vec3 R = iResolution,\n         P = vec3(0, 0, 3), q,a,\n         D = normalize(vec3( u - .5*R.xy, -R.y )),\n         M = iMouse.z > 0. ? iMouse.xyz/R -.5 :           // comment for no mouse cam\n                 vec3( .15,.07,0) * cos(.3*iTime + vec3(0,11,0)),\n         C = vec3(-.81,-.47, .36);\n          \n    float h=1., i, c;\n    for ( O=vec4(1); O.x > 0. && h > .01; O-=.004 ) {     // --- march scene\n        q = P,\n        q.yz *= rot(-6.*M.y),                             // rotations\n        q.xz *= rot(-6.*M.x-1.57);\n        a = abs(q);\n        q.yz *= rot(.35);\n        //  --- dodecahedron edges  \n        for (int i; i++ < 5; )                            // cascaded folding  p = fold(p) \n            F( vec3( 1  , 0  , 0  ) ), \n            F( vec3(-.5 , .87, 0  ) ),\n            F( C );   \n\n        q.z--;                                            // draw edge   \n     // h = length(q + C*.72 * clamp(-dot(q,C*1.44) , 0., 1.) ) - .03;\n        q = abs( q + C*.72 * clamp(-dot(q,C*1.44) , 0., 1.) ); h = max(q.x,max(q.y,q.z))-.04;\n        h = min(h, c = max(.06-h,  max(a.x,max(a.y,a.z)) -.72 )); \n        P += .4* h*D;\n    }\n    O *= O*O * 1.1                                       // color scheme\n      * (  h==c ? vec4(.9,.9,1,1) : vec4(1,.9,.9,1) );   // cube vs dodecahedron color\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}