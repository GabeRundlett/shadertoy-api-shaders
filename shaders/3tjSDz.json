{
    "Shader": {
        "info": {
            "date": "1565626020",
            "description": "Raymarching Test\n\nArt shader.Cineshader support\n[url] https://cineshader.com/view/3tjSDz",
            "flags": 0,
            "hasliked": 0,
            "id": "3tjSDz",
            "likes": 2,
            "name": "kojdj_RaymarchingTest1",
            "published": 3,
            "tags": [
                "raymarching",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "kojdj0811",
            "viewed": 474
        },
        "renderpass": [
            {
                "code": "#define PI 3.14\n#define SETP_MAX 32\n\n#define NEAR 0.02\n#define FAR 50.0\n\n#define OFFSET_TO_NORMAL 0.01\n\n\n\nvec3 Background (vec2 uv) {\n    uv.x -= iTime * 0.5 + sin(iTime * 0.2);\n    uv.y -= iTime * 0.1 + sin(iTime * 0.7);\n    \n\tfloat offsetR = sin(iTime * 2.0 + PI * 0.0);\n    float offsetG = sin(iTime * 2.0 + PI * 0.33333333) ;\n    float offsetB = sin(iTime * 2.0 + PI * 0.66666666) ;\n\n    vec3 col = vec3(abs(sin(uv.x * 50.0)) * offsetR,\n                    abs(sin(uv.x * 50.0 + PI * 0.33333333)) * offsetG,\n                    abs(sin(uv.x * 50.0 + PI * 0.66666666)) * offsetB) * 0.5 ;\n    \n    col += vec3(abs(sin(uv.y * 50.0)) ,\n                abs(sin(uv.y * 50.0 + PI * 0.33333333)),\n                abs(sin(uv.y * 50.0 + PI * 0.66666666))) * 0.5;\n    \n    return col;\n}\n\n\n\nfloat DstSphere (vec3 currentStep, vec3 origin, float radius) {\n\treturn length(origin - currentStep) - radius;\n}\n\n\n\n\nfloat World (vec3 currentStep) {\n    \n    float world = 0.0;\n\n    \n    \n    \n    float sphere0 = DstSphere (currentStep , vec3(0.6 + 1.2 * sin(iTime * 0.5), 0.0, 3.0), 0.8);\n    float sphere1 = DstSphere (currentStep , vec3(-0.6, 0.0, 3.0), 0.8);\n    \n    \n    \n    \n    \n    \n    world = min(sphere0, sphere1);\n\n    return world;\n}\n\n\n\nvec3 raymarching (vec3 dir) {\n\tfloat dist = 0.0;\n    int currentStepCount = 0;\n\n    while(true) {\n        float world = World(dir * dist);\n        dist += world;\n        \n        \n        if(world < NEAR || currentStepCount > SETP_MAX)\n            break;\n\n        if(dist >  FAR)\n            return vec3(0.0, 0.0, 0.0);\n        \n        currentStepCount++;\n    }\n    \n    return dir * dist;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x = uv.x * iResolution.x / iResolution.y;\n    \n    \n    vec3 cameraPos = vec3(0.0, 0.0, -2.5 + 0.2 * sin(iTime));\n    vec3 cameraDir = vec3(0.0, 0.0, 1.0);\n    vec3 screen = vec3(uv, 0.0);\n    vec3 dir = normalize(screen - cameraPos);\n\n    \n    vec3 world0 = raymarching(dir);\n    \n    \n    \n    dir = normalize(screen + vec3(OFFSET_TO_NORMAL, OFFSET_TO_NORMAL, 0.0) - cameraPos);\n    vec3 world1 = raymarching(dir);\n    \n    dir = normalize(screen + vec3(-OFFSET_TO_NORMAL, OFFSET_TO_NORMAL, 0.0) - cameraPos);\n    vec3 world2 = raymarching(dir);\n    \n    dir = normalize(screen + vec3(OFFSET_TO_NORMAL, -OFFSET_TO_NORMAL, 0.0) - cameraPos);\n    vec3 world3 = raymarching(dir);\n    \n    dir = normalize(screen + vec3(-OFFSET_TO_NORMAL, -OFFSET_TO_NORMAL, 0.0) - cameraPos);\n    vec3 world4 = raymarching(dir);\n\n    \n    \n    \n\n    /*\n\t(world1 - world0) + (world2 - world0) + (world3 - world0) + (world4 - world0)\n\t*/\n    \n    //vec3 worldNormal = (world1 + world2 + world3 + world4) * 0.25 ;\n    //worldNormal = normalize(worldNormal);\n    \n    vec3 normal1 = normalize(world1 - world0);\n    vec3 normal2 = normalize(world2 - world0);\n    vec3 normal3 = normalize(world3 - world0);\n    vec3 normal4 = normalize(world4 - world0);\n\tvec3 normal0 = normalize(normal1 + normal2 + normal3 + normal4);\n    \n    \n    vec3 light0_dir = normalize(vec3(-1.0, -1.0, 0.8));\n    vec3 light0_color = vec3(0.0, 2.0, 1.0);\n\n    col = light0_color * dot(normal0, light0_dir);\n    col = clamp(col, 0.0, 1.0);\n\n    float depth = (4. - length(world0)*1.4);\n    col = length(col) > 0.0 ? col : Background(uv);\n\n    fragColor = vec4(col,depth);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}