{
    "Shader": {
        "info": {
            "date": "1635389685",
            "description": "Sum up some of transition effect, what people public in this site. I added licences for each transition effect. Thanks ",
            "flags": 32,
            "hasliked": 0,
            "id": "7dGXD3",
            "likes": 5,
            "name": "Transition Effect ",
            "published": 3,
            "tags": [
                "transition"
            ],
            "usePreview": 0,
            "username": "nguyenkim495",
            "viewed": 397
        },
        "renderpass": [
            {
                "code": "#define currentTime = iTime; \n\n//swap https://www.shadertoy.com/view/fd2GDD\nvec4 Swap()\n{\n    vec4 outColor;\n    return outColor;\n}\n\n//Crosswarp https://www.shadertoy.com/view/ssj3Dh\n//iChannel1 is main draw, iChannel0 is transition effect\nvec4 Crosswarp(vec2 fragCoord, float time )\n{\n    vec4 outColor;\n  vec2 p = fragCoord/iResolution.xy;\n   float x = time;//mod(iTime,2.); // change this to alter the speed\n   \n  x=smoothstep(.0,1.0,(x*2.0+p.x-1.0));\n  outColor= mix(texture(iChannel1,(p-.5)*(1.-x)+.5), texture(iChannel0,(p-.5)*x+.5), x); \n  return outColor;\n}\n\n//Ripple Texture Transition https://www.shadertoy.com/view/3ljfzV\nvec4 Ripple(in vec2 fragCoord, float time )\n{\n    float freq = 8.0;\n    float period = 8.0;\n    float speed = 2.0;\n    float fade = 4.0;\n    float displacement = 0.2;\n    \n    vec4 outColor;\n    \n    vec2 R = iResolution.xy,\n         U = ((2. * fragCoord.xy) - R) / min(R.x, R.y),\n         T = fragCoord / R.y;\n    float D = length(U);\n\n    float frame_time = mod(iTime * speed, period);\n    float pixel_time = max(0.0, frame_time - D);\n\n    float wave_height = (cos(pixel_time * freq) + 1.0) / 2.0;\n    float wave_scale = (1.0 - min(1.0, pixel_time / fade));\n    float frac = wave_height * wave_scale;\n    if (mod(iTime * speed, period * 2.0) > period)\n    {\n        frac = 1. - frac;\n    }\n\n    vec2 tc = T + ((U / D) * -((sin(pixel_time * freq) / fade) * wave_scale) * displacement);\n    \n    vec2 p = fragCoord/iResolution.xy;\n    \n    outColor = mix(\n        texture(iChannel0, p),\n        texture(iChannel1, p),\n        frac);\n    return outColor;\n}\n\n\n//Noise https://www.shadertoy.com/view/3lB3Dm\nvec4 Noise(vec2 fragCoord, float time)\n{\n    vec4 outColor;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // get image of iChannel1\n    vec2 offset = uv.xy * 0.5;\n    vec4 channel1 = texture(iChannel0, uv);//, offset); \n    \n    float opacity = 0.5 + cos(iTime * 0.5) * 0.5;\n    \n    float amount = opacity;\n    uv.x += channel1.r * amount;\n    uv.y += channel1.g * amount;\n    uv.x -= channel1.b * amount;\n    uv.y -= channel1.a * amount;\n    \n    // get image of iChannel0\n    vec4 channel0 = texture(iChannel1, uv.xy);\n    \n    // Output to screen\n   \toutColor = channel1;\n    outColor = mix(channel1, vec4(0.5), opacity);\n    \n    return outColor;\n}\n\n//Slices https://www.shadertoy.com/view/ltVSzd\nvec4 Slices()\n{\n    vec4 outColor;\n    return outColor;\n}\n\n// luminance https://www.shadertoy.com/view/tdXfDS\nvec4 Luminance(vec2 fragCoord, float time)\n{\n    vec4 outColor;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).xyz;\n\tfloat t = mod(iTime, 5.)/3.;\n    float lum = 0.2126*col.r + 0.7152*col.g + 0.0722*col.b;\n    float a = step(1.-lum, t);\n    // Output to screen\n    outColor = vec4(col, 1.) * a;\n    return outColor;\n}\n\n//random https://www.shadertoy.com/view/wdcSzl\nvec4 Random()\n{\n    vec4 outColor;\n    return outColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float time = mod(iTime, 3.);\n    \n    // Output to screen\n    //fragColor = Crosswarp(fragCoord, time);\n    fragColor = Ripple(fragCoord, time);\n    //fragColor = Noise(fragCoord, time);\n    //fragColor = Luminance(fragCoord, time);\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Flame\n//base on this shader https://www.shadertoy.com/view/MdX3zr\n\nfloat noise(vec3 p) //Thx to Las^Mercury\n{\n\tvec3 i = floor(p);\n\tvec4 a = dot(i, vec3(1., 57., 21.)) + vec4(0., 57., 21., 78.);\n\tvec3 f = cos((p-i)*acos(-1.))*(-.5)+.5;\n\ta = mix(sin(cos(a)*a),sin(cos(1.+a)*(1.+a)), f.x);\n\ta.xy = mix(a.xz, a.yw, f.y);\n\treturn mix(a.x, a.y, f.z);\n}\n\nfloat sphere(vec3 p, vec4 spr)\n{\n\treturn length(spr.xyz-p) - spr.w;\n}\n\nfloat flame(vec3 p)\n{\n\tfloat d = sphere(p*vec3(1.,.5,1.), vec4(.0,-1.,.0,1.));\n\treturn d + (noise(p+vec3(.0,iTime*2.,.0)) + noise(p*3.)*.5)*.25*(p.y) ;\n}\n\nfloat scene(vec3 p)\n{\n\treturn min(100.-length(p) , abs(flame(p)) );\n}\n\nvec4 raymarch(vec3 org, vec3 dir)\n{\n\tfloat d = 0.0, glow = 0.0, eps = 0.02;\n\tvec3  p = org;\n\tbool glowed = false;\n\t\n\tfor(int i=0; i<64; i++)\n\t{\n\t\td = scene(p) + eps;\n\t\tp += d * dir;\n\t\tif( d>eps )\n\t\t{\n\t\t\tif(flame(p) < .0)\n\t\t\t\tglowed=true;\n\t\t\tif(glowed)\n       \t\t\tglow = float(i)/64.;\n\t\t}\n\t}\n\treturn vec4(p,glow);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 v = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n\tv.x *= iResolution.x/iResolution.y;\n\t\n\tvec3 org = vec3(0., -2., 4.);\n\tvec3 dir = normalize(vec3(v.x*1.6, -v.y, -1.5));\n\t\n\tvec4 p = raymarch(org, dir);\n\tfloat glow = p.w;\n\t\n\tvec4 col = mix(vec4(1.,.5,.1,1.), vec4(0.1,.5,1.,1.), p.y*.02+.4);\n\t\n\tfragColor = mix(vec4(0.), col, pow(glow*2.,4.));\n\t//fragColor = mix(vec4(1.), mix(vec4(1.,.5,.1,1.),vec4(0.1,.5,1.,1.),p.y*.02+.4), pow(glow*2.,4.));\n\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//wave\n//base on this shader https://www.shadertoy.com/view/fstGDN\n#define t iTime\n#define r iResolution.xy\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec3 c;\n\tfloat l,z=t;\n\tfor(int i=0;i<3;i++) {\n\t\tvec2 uv,p=fragCoord.xy/r;\n\t\tuv=p;\n\t\tp-=.5;\n\t\tp.x*=r.x/r.y;\n\t\tz+=.07;\n\t\tl=length(p);\n\t\tuv+=p/l*(tan(z)+1.)*abs(tan(l*9.-z*2.));\n\t\tc[i]=.01/length(abs(mod(uv,1.)-.5));\n\t}\n\tfragColor=vec4(c/l,t);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SS(a, b, t) smoothstep(a, b, t)\n#define gridFrequency 0.55\n#define timeForward 900.\n#define colorShiftSpeed 15. * vec3(.234, .123, .345)\n\nfloat DistToLine(vec2 point, vec2 startPoint, vec2 endPoint)\n{\n    vec2 startToPoint = point - startPoint;\n    vec2 startToEnd = endPoint - startPoint;\n    \n    float t = clamp(dot(startToPoint, startToEnd) / dot(startToEnd, startToEnd), 0., 1.);\n    \n    return length(startToPoint - startToEnd * t);\n}\n\n//Random with 2 input and 1 output\nfloat Random21 (vec2 p) \n{\n    return fract(sin(dot(p.xy,\n                         vec2(12.9898,78.233)))\n                            *43758.5453123);\n}\n\n//Random with 2 input and 2 output\nvec2 Random22 (vec2 p)\n{\n    float n = Random21(p);\n    return vec2(n, Random21(p+n));\n}\n\nvec2 GetPos(vec2 id, vec2 offset)\n{\n    vec2 n = Random22(id + offset) * (iTime + timeForward);\n    return offset + sin(n) *.4;\n}\n\nfloat DrawLine(vec2 p, vec2 a, vec2 b)\n{\n    float d = DistToLine(p, a, b);\n    float m = SS(.025, .01, d);\n    float len = length(a-b);\n    m *= SS(1., .8, len)*.5 + SS(.075, .025, abs(len-.75)) * .15;\n    return m;\n}\n\nfloat Layer(vec2 uv)\n{\n    float m = 0.;\n    vec2 gridUV = fract(uv)-.5; //Move to middle of screen\n    vec2 id = floor(uv);\n    \n    vec2 p[9];\n    int i = 0;\n    for (float y = -1.; y <= 1.; y++)\n    {\n        for (float x = -1.; x <= 1.; x++)\n        {\n            p[i++] = GetPos(id, vec2(x,y));\n        }\n    }\n    \n    float t = iTime * 5.;\n    for (int i = 0; i < 9; i++)\n    {\n        m += DrawLine(gridUV, p[4], p[i]);\n        \n        //Draw sparkle at the point\n        vec2 j = (p[i] - gridUV) * 35.; \n        float sparkle = 1./dot(j,j);\n        m += sparkle * (sin(t + fract(p[i].x) * 10.) * .5 + 0.5);\n    }\n    \n    //Draw the cut line between grids\n    m += DrawLine(gridUV, p[1], p[3]);\n    m += DrawLine(gridUV, p[1], p[5]);\n    m += DrawLine(gridUV, p[3], p[7]);\n    m += DrawLine(gridUV, p[5], p[7]);\n    \n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - .5*iResolution.xy) / iResolution.y;\n    vec2 mouse = (iMouse.xy / iResolution.xy) - .5;\n    \n    float m = 0.;\n    float t = iTime * .1;\n    \n    float gradient = -uv.y - 0.15;\n    float fft = texelFetch (iChannel0, ivec2(.7,0), 0).x;\n    \n    //Rotate the layer\n    float s = sin(t);\n    float c = cos(t);\n    mat2 rot = mat2(c, -s, s, c);\n    uv *= rot;\n    mouse *= rot;\n    \n    for (float i = 0.; i <= 1.; i += 0.33f)\n    {\n        float z = fract(i+t); //Move pass 1, snap back to 0 -> reuse Layer\n        float size = mix(10., .5, z);\n        float fade = SS(0., .5, z) * SS(1., .8, z);\n        m += Layer(uv * gridFrequency * size + i * 25. - mouse) * fade;\n    }\n\n    //Debug Point\n    //vec2 point = GetPos(id);\n    //float d = length(gridUV - point);\n    //m = SS(.1, .05, d);\n\n    //Debug grid:\n    //if (gridUV.x > .48 || gridUV.y > .48) col = vec3(1,0,0);\n    \n    //Shift color base on varying channel speed as well as UV\n    vec3 base = sin(t * colorShiftSpeed + uv.x * 2. + uv.y * 2.) * .4 + .6;\n    vec3 col = vec3(m) * base;\n    \n    //Post processing effect    \n    gradient *= fft;\n    gradient = clamp(gradient, 0., 1.);\n    col += gradient * base;\n    \n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3 glow(vec2 p, vec2 lpos)\n{\n    vec2 q = p - lpos;\n    float atten = 1./dot(q,q);\n    //atten *= (1. + atten*1e-4); // Make the inside slightly sharper\n    return vec3(1.0) * atten;\n}\n\n\nfloat rand(vec2 co){\n    // https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n/*\nfloat rand(float v){\n    return fract(sin(12.9898*v)*43758.5453);\n}\n*/\n\nfloat rand(float p)\n{\n    // Hash function by Dave Hoskins\n    // https://www.shadertoy.com/view/4djSRW\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n\nvec3 lastExplosion(float time)\n{\n    // vec3(time since last explosion,\n    //      index of last explosion,\n    //      time until next explosion)\n    float t = mod(time, 10.);\n    float interval = floor(time/10.);\n    float t0max = 0., imax=-1.;\n    float t0next = 10.;\n    for(float i=0.; i<10.; i++)\n    {\n        float t0 = rand(vec2(interval, i)) * 10.;\n        if(t > t0 && t0 > t0max)\n        {\n            t0max = t0;\n            imax = i;\n        }\n        if(t < t0 && t0 < t0next)\n        {\n            t0next = t0;\n        }\n    }\n    return vec3(t-t0max, 10.*interval+imax, t0next-t);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 lastExpl = lastExplosion(iTime);\n    float t = lastExpl.x, explNum = lastExpl.y, tFadeout = lastExpl.z;\n    \n    // Fireworks base color\n    vec3 baseCol = vec3(0.5,0.5,0.5) + 0.4*sin(vec3(1.)*explNum+vec3(0.,2.1,-2.1));\n    \n    // Number of particles\n    float N_LIGHTS = 100.;\n    for(float i=0.; i<N_LIGHTS; i++)\n    {\n        \n        // Generate points uniformly on hemisphere\n        // (see Total Compendium eq. (34))\n        float f = i/N_LIGHTS;\n        float r = sqrt(1. - f*f);\n        float th = 2.*0.618033*3.14159*i; // Use Golden Ratio for a quasirandom sequence\n        float hash = sin(explNum+i*85412.243);\n        float weight = (1.-0.2*hash);\n        th += hash *3.* 6.28/N_LIGHTS;\n        // Only take x and y coordinates\n        vec2 lpos = vec2(cos(th), sin(th)) * r;\n        // Add some physics\n        lpos.xy *= (1.-exp(-3.*t/weight)) * weight; // explosion, easing out\n        //lpos.y += t*0.3*weight - t*(1.-exp(-t*weight)) * 0.6 * weight; // vertical free-fall motion\n        float intensity = 2e-4;\n        intensity *= exp(-2.*t); // Fade out with time\n        intensity *= (1.-0.5*hash); // Randomize per particle\n        intensity *= (1.+10.*exp(-20.*t)); // Intensity burst at explosion\n        intensity *= clamp(3.*tFadeout, 0., 1.); // Fade out before next explosion\n        col += glow(p, lpos) * intensity * baseCol;\n    }\n    \n    \n    col = max(col, 0.);\n    //col = 1.-exp(-col); // Tone mapping\n    col = (col*(2.51*col+0.03))/(col*(2.43*col+0.59)+0.14); // Tone mapping\n    //col = col/(1.+col);\n    col = sqrt(col); // gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}