{
    "Shader": {
        "info": {
            "date": "1650938543",
            "description": "roads-v2",
            "flags": 32,
            "hasliked": 0,
            "id": "flfBDM",
            "likes": 6,
            "name": "roads-v2",
            "published": 3,
            "tags": [
                "2d",
                "3d",
                "mouse",
                "roadsv2"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 252
        },
        "renderpass": [
            {
                "code": "//----------image\n//por jorge2017a2-\n#define MAX_STEPS 100\n#define MAX_DIST 120.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n#define Ka 0.5\n#define Kd 0.4\n//roads-v2 --25-abril-2022\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\n\n//operacion de Union  por FabriceNeyret2\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\nfloat sdCylinderYZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.yz),p.x)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xz),p.y)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXY( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xy),p.z)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\nvec3 rotate_x(vec3 p, float phi)\n{   float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n\nvec2 GetDist(vec3 p  ) \n{\tvec2 res= vec2(9999.0, -1.0);  \n    vec3 p0=p;\n\tfloat  d0= sdBox(p-vec3(0.0,35.0,0.0), vec3(5.5,12.0,0.5));\n    float  d1a= sdBox(p-vec3(0.0,-8.0,0.0), vec3(50.0,30.0,5.0));\n    float  d1b= sdBox(p-vec3(-10.0,-14.5,0.0), vec3(105.0,35.0,10.0));\n    float  d1c= sdBox(p-vec3(-70.0,20.0,0.0), vec3(50.0,30.0,5.0));\n    float  d1ba= sdBox(p-vec3(-35.0,-11.5,0.0), vec3(25.0,30.0,15.0));\n    float  d2=sdCylinderXZ(p-vec3(-35.0,-7.0,0.0), vec2(20.0,30.) );\n    float  d3=sdCylinderXZ(p-vec3(-35.0,25.0,0.0), vec2(9.0,25.) );\n    res =opU2(res, vec2(d0,101.0));\n    res =opU2(res, vec2(d1a,100.0));\n    res =opU2(res, vec2(d1b,100.0)); //bloque medio 2 pasos\n    res =opU2(res, vec2(d1ba,100.0)); //bloque medio 2 pasos\n    res =opU2(res, vec2(d1c,100.0));  //superior 2do bloque\n    res =opU2(res, vec2(d2,100.0));  //cilindro grande\n    res =opU2(res, vec2(d3,100.0)); //cilindro chico    \n    return res;\n}\n\nvec3 GetNormal(vec3 p)\n{   float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy).x,GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, int PMaxSteps)\n{   vec3 p;\n    vec2 hit, object=vec2(0.1,0.0);\n    for(int i=0; i <= PMaxSteps; i++) \n    { p = ro + rd*object.x;\n      hit = GetDist(p);\n      object.x += hit.x;\n      object.y = hit.y;\n      if (abs(hit.x) < EPSILON || object.x > MAX_DIST) break;\n    }    \n    return object;\n}\n\nfloat getSoftShadow(vec3 p, vec3 lightPos) {\n    float res = 9999.0;\n    float dist = 0.01;\n    float lightSize = 0.03;\n    for (int i = 0; i < int(100.0*0.8); i++) {\n      float hit = GetDist(p + lightPos * dist).x;\n      res = min(res, hit / (dist * lightSize));\n      dist += hit;\n      if (hit < 0.0001 || dist > 60.0) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nfloat occlusion(vec3 pos, vec3 nor)\n{   float sca = 2.0, occ = 0.0;\n    for(int i = 0; i < 10; i++) {    \n      float hr = 0.01 + float(i) * 0.5 / 4.0;\n      float dd = GetDist(nor * hr + pos).x;\n      occ += (hr - dd)*sca;\n      sca *= 0.6;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro,vec3 lightColor, float t) \n{   vec3 lightPos=lp;\n    vec3 worldPos = p;\n    vec3 V = -rd;\n    vec3 N = normal;\n    vec3 L = normalize (lightPos - worldPos);\n    vec3 R = reflect (-L, N);\n\n    float lightDist = max(length(L), .001);\n    float atten=1.0 / (1.0 + lightDist * 0.125 + lightDist * lightDist * .05);\n    L /= (lightDist*atten);\n\n    float shadow = getSoftShadow(worldPos, L);// shadows\n        \n    float occ = occlusion(worldPos, N);// occ\n    vec3 ambient = Ka + Ka * dot(normal, vec3(0., 1., 0.))*lightColor;\n    ambient*=0.5;\n\n    vec3 fresnel =  lightColor *  pow(clamp(1.0 + dot(rd, N), 0.0, 1.0), 2.0);;\n    float diff= clamp(dot(N, L), 0.0, 1.0);\n    vec3 diffuse =  lightColor * diff;\n    float shininess=10.0;\n    float specular    = pow(max(dot(R, V), 0.0), shininess);\n\n    vec3 back = 0.5 * lightColor * clamp(dot(N, -L), 0.0, 1.0); // back\n    vec3 colOut = occ*lightColor*(ambient+diffuse*shadow+.25 +back) + vec3(.7,.9,1)*specular*specular;\n    return colOut;\n}\n\nvec3 getColorTextura( vec3 p, vec3 nor,  int i)\n{\tif (i==100 )\n    { vec3 col=tex3D(iChannel0, p/32., nor); return col*2.0; }\n\tif (i==101 ) { return tex3D(iChannel1, p/32., nor); }\n\t\n}\n\n\nvec3 GetMaterial(vec3 p,  vec3 nor, vec3 ro,  vec3 rd, int id_color)\n{  \tvec3 colobj; \n   if (id_color==100 ) { return  getColorTextura( p, nor,id_color); }\n   if (id_color==101 )\n   {   p=vec3(-p.x, p.y, p.z);\n       vec3 pnew=p-vec3(-10.0,20.0,0.0);\n       pnew*=1.2;\n       return  getColorTextura( pnew, nor,id_color); \n   }   \n}\n\nvec3 linear2srgb(vec3 c) \n{ return mix(12.92 * c,1.055 * pow(c, vec3(1.0/1.8)) - 0.055, step(vec3(0.0031308), c)); }\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{ return vec3(1.0) - exp(-hdrColor * exposure); }\n\nvec3 ACESFilm(vec3 x)\n{   float a,b,c,d,e;\n    a = 2.51; b = 0.03; c = 2.43;d = 0.59; e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nvec3 Render(vec3 ro, vec3 rd)\n{  vec3 col = vec3(0);\n  vec3 p;\n     vec2 hit=RayMarch(ro,rd, MAX_STEPS);\n      if(hit.x<MAX_DIST)\n       {   p = (ro + rd * hit.x );\n        vec3 nor=GetNormal(p);\n        vec3 colobj;\n        colobj=GetMaterial( p, nor, ro, rd,  int(hit.y));\n        vec3 result;\n         result= lightingv3(nor, p,light_pos1, rd,ro,colobj,hit.x)*light_color1;\n        result+= lightingv3(nor, p,light_pos2,rd, ro,colobj,hit.x)*light_color2;\n        col= result/2.0;\n        col= (ACESFilm(col)+linear2srgb(col)+col+ exposureToneMapping(3.0, col))/4.0 ;\n    }\n   return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float  t=iTime*10.0;\n \tlight_pos1= vec3(-10.0, 120.0, -25.); light_color1=vec3( 1.0,1.0,1.0 );\n \tlight_pos2= vec3(10.0, 20.0, -25.0 ); light_color2 =vec3( 1.0,1.0,1.0 ); \n   vec3 ro=vec3(20.0-t,60.0,-25.0);\n   ro.x= opRep1D(ro.x, 50.0 );\n   vec3 rd=normalize( vec3(uv.x,uv.y,1.0));\n   rd= rotate_x(rd, radians(50.0));\n   rd= rotate_y(rd, radians(-45.0));\n   rd= rotate_z(rd, radians(10.0));\n   \n   \n   //Camera with mouse control:\n   if( iMouse.z > 0.0)\n   //rd= rotate_y(rd, iMouse.x/iResolution.x*6.28+radians(360.*cos(iTime*1.0*+sin(iTime*1.0))));  //radians(360.*cos(iTime*vel*+sin(iTime*vel))));\n   rd= rotate_y(rd, iMouse.x/iResolution.x+0.5*cos(iTime*0.25));\n\n   \n    light_pos1+=ro;\n    light_pos2+=ro;\n    vec3 col= Render( ro,  rd);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//-------common\n#define PI 3.14159265\n\n///Gracias a Shane...16-jun-2020\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n  n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n  n /= dot(n, vec3(1)); \n  vec3 tx = texture(tex, p.yz).xyz;\n  vec3 ty = texture(tex, p.zx).xyz;\n  vec3 tz = texture(tex, p.xy).xyz;\n  return mat3(tx*tx, ty*ty, tz*tz)*n; \n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//por jorge2017a2....walk 2d-n3\n///referencia\n//https://iquilezles.org/articles/distfunctions2d\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(antialiasing(1.0),b,d)\n\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n//oneshade\nvec2 RotatePOA(in vec2 p, in vec2 o, in float a) {\n    float c = cos(a), s = sin(a);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\nvec2 cossin(float x)\n{\treturn vec2(cos(x),sin(x));  }\n\n///---------------------------\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n    \nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  //colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.5,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj-0.05,0.0)); return colOut; }\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec3 hacerPiernaIzq(vec2 p, float t, vec3 colOut,vec3 colIn)\n{   vec2 a1=vec2(3.0,8.0);vec2 b1=vec2(3.0,5.0);  //pierna\n    vec2 a2=vec2(3.0,5.0);vec2 b2=vec2(3.0,2.0); //rodilla\n    vec2 a3=vec2(3.0,2.0);vec2 b3=vec2(4.0,2.0); //pie\n\n    float t1, t2, t3;\n    float r1, r2, r3;\n\n   r1=0.6; r2=0.8; r3=0.2;    \n   t1=t;\n   t2=(1.0 + sin(t+PI));//t+TWO_PI;\n   t3=(1.0 + sin(t+PI));\n\n    float ang1=r1*sin(t1);\n    float ang2=r2*sin(t2);\n    float ang3=r3*sin(t3);\n\n    vec2 p1,p2, p3;\n    p1=RotatePOA(p,a1,ang1);\n    p2=RotatePOA(p1,a2,ang2);\n    p3=RotatePOA(p2,a3,ang3);\n\n    float d1= sdSegment(p1,a1,b1);\n    float d2= sdSegment(p2,a2,b2);\n    float d3= sdSegment(p3,a3,b3);\n\n    colOut= DrawFig(vec3(0.0,1.0,0.0), colOut,d1 );\n    colOut= DrawFig(vec3(1.0,0.0+colIn.g,0.0+colIn.b), colOut,d2 );\n    colOut= DrawFig(vec3(0.0,0.0,1.0), colOut,d3 );\n    return colOut;\n}\n\n\nvec3 hacerPiernaDer(vec2 p, float t, vec3 colOut,vec3 colIn)\n{   vec2 a1=vec2(3.0,8.0);vec2 b1=vec2(3.0,5.0);  //pierna\n    vec2 a2=vec2(3.0,5.0);vec2 b2=vec2(3.0,2.0); //rodilla\n    vec2 a3=vec2(3.0,2.0);vec2 b3=vec2(4.0,2.0); //pie\n\n    float t1, t2, t3;\n    float r1, r2, r3;\n\n  r1=0.6; r2=0.8; r3=0.2;    \n   t1=t;\n   t2=(1.0 + sin(t+PI)); //t+TWO_PI;\n   t3=(1.0 + sin(t+PI));\n\n    float ang1=r1*sin(t1);\n    float ang2=r2*sin(t2);\n    float ang3=r3*sin(t3);\n\n    vec2 p1,p2, p3;\n    p1=RotatePOA(p,a1,ang1);\n    p2=RotatePOA(p1,a2,ang2);\n    p3=RotatePOA(p2,a3,ang3);\n\n    float d1= sdSegment(p1,a1,b1);\n    float d2= sdSegment(p2,a2,b2);\n    float d3= sdSegment(p3,a3,b3);\n\n    colOut= DrawFig(vec3(0.0,1.0,0.0), colOut,d1 );\n    colOut= DrawFig(vec3(1.0,0.0+colIn.g,0.0+colIn.b), colOut,d2 );\n    colOut= DrawFig(vec3(0.0,0.0,1.0), colOut,d3 );\n    return colOut;\n}\n\n\nvec3 hacerBrazoIzq(vec2 p, float t, vec3 colOut,vec3 colIn)\n{   vec2 a1=vec2(3.0,12.0);vec2 b1=vec2(3.0,9.0);  //Brazo\n    vec2 a2=vec2(3.0,9.0);vec2 b2=vec2(3.0,6.0); //Ante brazo\n    float t1, t2, t3;\n    float r1, r2, r3;\n\n   r1=0.6; r2=0.8; r3=0.2;    \n   t1=t;\n   t2=t+TWO_PI;\n   t3=(1.0 + sin(t+PI));\n\n    float ang1=r1*sin(t1);\n    float ang2=r2*sin(t2);\n    float ang3=r3*sin(t3);\n\n    vec2 p1,p2, p3;\n    p1=RotatePOA(p,a1,ang1);\n    p2=RotatePOA(p1,a2,ang2);\n    \n    float d1= sdSegment(p1,a1,b1);\n    float d2= sdSegment(p2,a2,b2);\n    \n    colOut= DrawFig(vec3(0.0,1.0,0.0), colOut,d1 );\n    colOut= DrawFig(vec3(1.0,0.0+colIn.g,0.0+colIn.b), colOut,d2 );\n    return colOut;\n}\n\nvec3 hacerBrazoDer(vec2 p, float t, vec3 colOut,vec3 colIn)\n{   vec2 a1=vec2(3.0,12.0);vec2 b1=vec2(3.0,9.0);  //Brazo\n    vec2 a2=vec2(3.0,9.0);vec2 b2=vec2(3.0,6.0); //Ante brazo\n    \n    float t1, t2, t3;\n    float r1, r2, r3;\n\n   r1=0.6; r2=0.2; r3=0.2;    \n   t1=t;\n   t2=t+TWO_PI;\n   t3=(1.0 + sin(t+PI));\n\n    float ang1=r1*sin(t1);\n    float ang2=r2*sin(t2);\n    float ang3=r3*sin(t3);\n\n    vec2 p1,p2, p3;\n    p1=RotatePOA(p,a1,ang1);\n    p2=RotatePOA(p1,a2,ang2);\n    \n    float d1= sdSegment(p1,a1,b1);\n    float d2= sdSegment(p2,a2,b2);\n    \n    colOut= DrawFig(vec3(0.0+colIn.r,1.0,0.0+colIn.b), colOut,d1 );\n    colOut= DrawFig(vec3(1.0,0.0+colIn.g,0.0+colIn.b), colOut,d2 );\n    return colOut;\n}\n\nvec3 HacerCuerpoyCabeza(vec2 p, float t, vec3 colOut,vec3 colIn)\n{\n  vec2 a1=vec2(3.0,12.0);vec2 b1=vec2(3.0,8.0);  //Pansa\n  float d1= sdSegment(p,a1,b1);\n  float d2=sdCircle(p-vec2(3.0,13.0), 0.5 );  //cabeza\n  \n  colOut= DrawFig(vec3(0.0,1.0,0.0), colOut,d1);\n  colOut= DrawFig(vec3(0.5,5.0,1.0), colOut,d2);\n  return colOut;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(-1.0,0.0);\n    uv*=7.0;\n\n    vec3  col=vec3(0.5);\n\n   float t=iTime;\n   uv-=vec2(0.0,-7.0);\n\n    col= HacerCuerpoyCabeza(uv, t, col,vec3(0.0));\n   col= hacerPiernaIzq(uv,t, col,vec3(0.0));\n   col= hacerPiernaDer(uv,t+PI, col,vec3(0.0,0.5,0.5));\n   col= hacerBrazoIzq(uv, t, col,vec3(0.2,0.5,0.3));\n   col= hacerBrazoDer(uv, t-PI, col, vec3(1.0,0.5,0.4));\n   \n   vec2 a1=vec2(0.0,0.0);\n   vec2 b1=vec2(6.5,0.0);\n    float d1= sdSegment(uv-vec2(-2.0,2.0),a1,b1);\n    col= DrawFig(vec3(0.0,1.0,1.0), col,d1 );\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}