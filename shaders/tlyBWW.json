{
    "Shader": {
        "info": {
            "date": "1614315095",
            "description": "Now I've got to do [url=https://www.youtube.com/watch?v=MKqrLGFoK9E]Microsoft pipes[/url]! :D",
            "flags": 32,
            "hasliked": 0,
            "id": "tlyBWW",
            "likes": 22,
            "name": "Spaghetti Worms 3D",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "worms",
                "buffering",
                "spaghetti"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 414
        },
        "renderpass": [
            {
                "code": "// filt 0: no filter\n// filt 1: trilinear\n// filt 2: tricubic\n#define fetch(p) texelFetch(iChannel0, ivec2(_322(p, SIZE, RESOLUTION, iChannelResolution[0].xy)), 0)\nvec4 sampleDistanceField(in vec3 p, in int filt) {\n    vec3 halfSize = 0.5 * SIZE;\n    if (all(lessThan(abs(p), halfSize))) {\n        vec3 sp = mod(p + halfSize, SIZE) - halfSize;\n        if (filt == 0) {\n            return fetch(sp);\n        }\n\n        else {\n            vec3 UNIT = SIZE / RESOLUTION;\n            vec3 cell = floor(sp / UNIT) * UNIT;\n            vec3 local = fract(sp / UNIT);\n\n            if (filt == 2) local *= local * (3.0 - 2.0 * local);\n\n            // Sample at cell corners (8 tap)\n            vec4 ldb = fetch(cell);\n            vec4 rdb = fetch(cell + vec3(UNIT.x, 0.0, 0.0));\n            vec4 lub = fetch(cell + vec3(0.0, UNIT.y, 0.0));\n            vec4 rub = fetch(cell + vec3(UNIT.xy, 0.0));\n            vec4 ldf = fetch(cell + vec3(0.0, 0.0, UNIT.z));\n            vec4 rdf = fetch(cell + vec3(UNIT.x, 0.0, UNIT.z));\n            vec4 luf = fetch(cell + vec3(0.0, UNIT.yz));\n            vec4 ruf = fetch(cell + UNIT);\n\n            // Interpolate\n            return mix(mix(mix(ldb, rdb, local.x), mix(lub, rub, local.x), local.y),\n                       mix(mix(ldf, rdf, local.x), mix(luf, ruf, local.x), local.y), local.z);\n        }\n    }\n\n    vec3 q = abs(p) - halfSize + 0.25;\n    float bbox = max(q.x, max(q.y, q.z));\n    return vec4(0.0, 0.0, 0.0, bbox);\n}\n\nvec4 mapScene(in vec3 p) {\n    vec4 worms = sampleDistanceField(p, 1);\n    return worms;\n}\n\nvec3 getNormal(in vec3 p) {\n    vec3 e = vec3(0.05, 0.0, 0.0); // Hacky smoothing effect\n    return normalize(vec3(mapScene(p + e.xyy).w - mapScene(p - e.xyy).w,\n                          mapScene(p + e.yxy).w - mapScene(p - e.yxy).w,\n                          mapScene(p + e.yyx).w - mapScene(p - e.yyx).w));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 screenCenter = 0.5 * iResolution.xy;\n\n    vec2 mouse = (iMouse.xy - screenCenter) / iResolution.y * 3.14;\n    vec2 uv = (fragCoord - screenCenter) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 5.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    float t = 0.0;\n    for (int i=0; i < 80; i++) {\n        vec3 p = ro + rd * t;\n        vec4 d = mapScene(p);\n        if (d.w < 0.001) {\n            vec3 n = getNormal(p);\n            vec3 l = vec3(-0.58, 0.58, 0.58);\n            fragColor.rgb += d.rgb;\n            fragColor.rgb *= max(0.2, dot(n, l));\n            fragColor.rgb += pow(max(0.0, dot(reflect(rd, n), l)), 50.0);\n            break;\n        }\n\n        if (t > 8.0) {\n            break;\n        }\n\n        t += d.w;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// RESOLUTION is the number of distance samples, SIZE is the space it maps to\n#define RESOLUTION vec3(45.0)\n#define SIZE vec3(3.5)\n\n// Simulation settings\n#define NUMBER_OF_PARTICLES 20\n#define PARTICLE_RADIUS 0.08\n\n#define getParticlePos(id) texelFetch(iChannel0, ivec2(id, 0), 0).xyz\n#define getParticleVel(id) texelFetch(iChannel0, ivec2(id, 1), 0).xyz\n\n// Hashes from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec3 Hash13(in float x) {\n   vec3 p3 = fract(x * vec3(0.1031, 0.103, 0.0973));\n   p3 += dot(p3, p3.yzx + 33.33);\n   return fract((p3.xxy + p3.yzz) * p3.zyx); \n}\n\nfloat Hash11(in float x) {\n    x = fract(x * 0.1031);\n    x *= x + 33.33;\n    x *= x + x;\n    return fract(x);\n}\n\nfloat snoise(in float x) {\n    return mix(Hash11(floor(x)), Hash11(ceil(x)), smoothstep(0.0, 1.0, fract(x)));\n}\n\nfloat fbm(in float x, in float scale, in int octaves) {\n    x *= scale;\n\n    float value = 0.0;\n    float nscale = 1.0;\n    float tscale = 0.0;\n\n    for (int o=0; o < octaves; o++) {\n        value += snoise(x) * nscale;\n        tscale += nscale;\n        nscale *= 0.5;\n        x *= 2.0;\n    }\n\n    return value / tscale;\n}\n\n// Distance field sampling utilities\nvec3 _223(in vec2 p2D, in vec3 size3D, in vec3 res3D, in vec2 res2D) {\n    p2D = floor(p2D);\n    float p1D = p2D.y * res2D.x + p2D.x;\n    float x = mod(p1D, res3D.x);\n    float y = mod(p1D - x, res3D.x * res3D.y) / res3D.x;\n    float z = (p1D - x - y * res3D.x) / res3D.x / res3D.y;\n    return vec3(x, y, z) / res3D * size3D - 0.5 * size3D;\n}\n\nvec2 _322(in vec3 p3D, in vec3 size3D, in vec3 res3D, in vec2 res2D) {\n    p3D = floor(p3D / size3D * res3D + 0.5 * res3D);\n    float p1D = p3D.z * res3D.x * res3D.y + p3D.y * res3D.x + p3D.x;\n    float x = mod(p1D, res2D.x);\n    float y = (p1D - x) / res2D.x;\n    return vec2(x, y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "mat2 Rotate(in float r) {\n    float c = cos(r), s = sin(r);\n    return mat2(c, s, -s, c);\n}\n\n// Rotate on axis, from tdhooper (https://www.shadertoy.com/view/WlKyzW) who in turn got it from blackle\nvec3 RotateAxis(in vec3 p, in vec3 ax, in float ro) {\n    return mix(dot(ax, p) * ax, p, cos(ro)) + sin(ro) * cross(ax, p);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 iFragCoord = ivec2(fragCoord);\n    if (iFragCoord.x < NUMBER_OF_PARTICLES && iFragCoord.y == 0) {\n        vec3 randPos = Hash13(fragCoord.x + iDate.w) * 2.0 - 1.0;\n        fragColor = vec4(randPos, 1.0);\n    }\n\n    if (iFragCoord.x < NUMBER_OF_PARTICLES && iFragCoord.y == 1) {\n        vec3 randVel = Hash13(fragCoord.x * 365.748 + 478.487 + iDate.w) * 0.02 - 0.01;\n        fragColor = vec4(randVel, 1.0);\n    }\n\n    if (iFrame > 0) {\n        if (iFragCoord.x < NUMBER_OF_PARTICLES) {\n            vec3 pos = getParticlePos(iFragCoord.x);\n            vec3 vel = getParticleVel(iFragCoord.x);\n\n            // Bounce off boundaries (2 * radius to give extra room)\n            vel *= sign(0.5 * SIZE - abs(pos) - 2.0 * PARTICLE_RADIUS);\n\n            float twist = fbm(iTime + fragCoord.x * 487.385 + 247.374, 1.0, 5) * 3.14 - 1.57;\n            vec3 twistAxis = normalize(Hash13(iTime * 467.378 + 843.346) - 0.5);\n            vel = RotateAxis(vel, twistAxis, twist);\n\n            pos += vel;\n\n            if (iFragCoord.y == 0) {\n                fragColor = vec4(pos, 1.0);\n            }\n\n            if (iFragCoord.y == 1) {\n                fragColor = vec4(vel, 1.0);\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Precalulated distance field and colors\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 iFragCoord = ivec2(fragCoord);\n    if (iFrame == 0) fragColor = vec4(0.0, 0.0, 0.0, 1000000.0);\n    else fragColor = texelFetch(iChannel1, iFragCoord, 0);\n\n    float c = cos(iTime), s = sin(iTime);\n    mat2 colorRot = mat2(c, s, -s, c);\n\n    vec3 p = _223(fragCoord, SIZE, RESOLUTION, iResolution.xy);\n    for (int id=0; id < NUMBER_OF_PARTICLES; id++) {\n        vec3 particlePos = getParticlePos(id);\n        float newShape = length(p - particlePos) - PARTICLE_RADIUS;\n        if (newShape < fragColor.w) {\n            float fid = float(id);\n            vec3 newColor = 0.5 + 0.5 * vec3(sin(fid), 0.25 * cos(fid), 0.0);\n            fragColor.rgb = newColor;\n            fragColor.w = newShape;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}