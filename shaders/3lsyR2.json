{
    "Shader": {
        "info": {
            "date": "1592507310",
            "description": "we often need to filter by a gaussian-like with finite supports\n(1-x²)⁴ is pretty good, and cheapest.\nGraph: see [url]https://www.desmos.com/calculator/ioek66ltzu[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "3lsyR2",
            "likes": 1,
            "name": "bench ~gaussian filters",
            "published": 3,
            "tags": [
                "filter",
                "bench",
                "perf"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 332
        },
        "renderpass": [
            {
                "code": "// graph: see https://www.desmos.com/calculator/ioek66ltzu\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    for (int i = min(0,iFrame); i < 10000; i++ )\n     // O = exp(-.5*O*O/9.);                     //  7.5 fps  Gauss\n     // O = .5+.5*cos(O/6.28);                   //  7.5 fps  Cos\n        O =    (1.-O*O)    , O=O*O*O*O;          // 10.  fps  Polynomial\n    \n     // O = O.x>1. ? exp(-.5*O*O/9.)   : O-O;    //  7.5 fps  same with clamp\n     // O = O.x>1. ? .5+.5*cos(O/6.28) : O-O;    //  6.7 fps\n     // O = max(1.-O*O, 0.), O=O*O*O*O;          //  8.6 fps\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}