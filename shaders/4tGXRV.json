{
    "Shader": {
        "info": {
            "date": "1485061706",
            "description": "Just playing around with some simple CSG stuff, decided to add a fish-eye lens but typed  * instead of  - , and ended up with some weird stereographic-like distortions intead. ",
            "flags": 0,
            "hasliked": 0,
            "id": "4tGXRV",
            "likes": 2,
            "name": "warp accident",
            "published": 3,
            "tags": [
                "raymarching",
                "projection"
            ],
            "usePreview": 0,
            "username": "russ",
            "viewed": 771
        },
        "renderpass": [
            {
                "code": "const float far =50. , eps = .005;\nconst int iter = 100;\n\nfloat sphere(vec3 p, float s){\n\treturn length(p) - s;    \n}\n\nfloat roundcube(vec3 p, float s , float c){\n    p = abs(p)-s;\n    return min(max(p.x,max(p.y,p.z)), 0.) + length(max(p,0.))-c;\n}\n\nfloat cylcross(vec3 p, float s){\n \tfloat xy = dot(p.xy,p.xy);\n    float yz = dot(p.yz,p.yz);\n    float xz = dot(p.xz,p.xz);\n    return sqrt(min(xy,min(xz,yz))) -s;\n}\n\nfloat DE(vec3 p){\n    p = mod(p , 4.) - 2.;\n    float sp = sphere(p, 1.);\n    float cb = roundcube(p, .7, .05);\n    float cc = cylcross(p, .4);\n    return max(-cc,max(sp,cb));\n}\n\nfloat march (vec3 ro, vec3 rd){\n\tfloat t = 0. , d = 1e10;\n    for(int i=0;i<iter;i++){\n     \tt += d = DE(ro + t* rd);\n        if(t>= far || d <= eps) break;\n    }\n    return t;\n}\n\nvec3 light(vec3 p, vec3 lp, vec3 n){\n\tvec3 ld = normalize(lp-p);\n    float diff = max(0.2,dot(ld,n));\n    return diff * vec3(.5,.5,1);\n}\n\nvec3 getNorm(vec3 p){\n\tvec2 e = vec2(3.*eps, 0);\n    return normalize(vec3(DE(p+e.xyy)-DE(p-e.xyy),DE(p+e.yxy)-DE(p-e.yxy),DE(p+e.yyx)-DE(p-e.yyx)));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy -.5* iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0,0,-iTime);\n    vec3 rd = normalize(vec3(uv,1.*dot(uv,uv)));\n    vec2 cs = sin(iTime*.17 + vec2(1.5707963,0));\n    vec2 cs2 = sin(iTime*.29 + vec2(1.5707963,0));\n    rd.xz = mat2(cs, -cs.y,cs.x) * rd.xz;\n    rd.yz = mat2(cs2, -cs2.y,cs2.x) * rd.yz;\n    float t = march(ro,rd);\n    vec3 p = ro+t*rd;\n    vec3 col = t<far ? light(p,vec3(1,2,-3),getNorm(p)) :  abs(rd);\n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}