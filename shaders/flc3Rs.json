{
    "Shader": {
        "info": {
            "date": "1636529648",
            "description": "The code became very messy but the result is good, just don't look at the code :)",
            "flags": 0,
            "hasliked": 0,
            "id": "flc3Rs",
            "likes": 61,
            "name": "Licorice Wheel Tower",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "spiral",
                "roll"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 843
        },
        "renderpass": [
            {
                "code": "// Fork of \"Spiral SDF testing 4\" by Tater. https://shadertoy.com/view/Nl3Gzj\n// 2021-11-10 02:34:13\n\n// Fork of \"Spiral SDF testing 3\" by Tater. https://shadertoy.com/view/Nlc3Rj\n// 2021-11-08 02:08:11\n\n// Fork of \"Spiral SDF testing 2\" by Tater. https://shadertoy.com/view/fs3Xzf\n// 2021-11-08 02:05:42\n\n// Fork of \"Spiral SDF testing\" by Tater. https://shadertoy.com/view/fs3SzX\n// 2021-10-07 08:34:52\n\n//Inspiration:\n//https://twitter.com/smjtyazdi/status/1457290470497869824\n//https://www.brucescandy.com/products/red-licorice-wheels\n\n\n#define MDIST 150.0\n#define STEPS 128.0\n\n#define pmod(p,x) (mod(p,x)-0.5*(x))\n#define pi 3.1415926535\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\nvec3 rdg;\nvec3 hsv(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n//iq extrude\nfloat ext(vec3 p, float s, float h){\n  vec2 b = vec2(s,abs(p.y)-h);\n  return min(max(b.x,b.y),0.)+length(max(b,0.));\n}\n\nfloat diplane(vec3 p,vec3 b,vec3 rd){\n    vec3 dir = sign(rd)*b;   \n    vec3 rc = (dir-p)/rd;\n    return rc.z+0.01;\n}\nfloat lim(float p, float s, float lima, float limb){\n    return p-s*clamp(round(p/s),lima,limb);\n}\nfloat idlim(float p, float s, float lima, float limb){\n    return clamp(round(p/s),lima,limb);\n}\n\n\n\n//This is a large mess :)\nvec2 spiral(vec2 p, float t, float m, float scale, float size, float expand, float pz,float timeOffset){\n    \n    size-=expand-0.01;\n    float R1 = (sqrt(m*(m*pi+4.0*t*pi)))+m*sqrt(pi)/(2.0*m*sqrt(pi)) -1.0;\n    float RT1 = R1;\n    float R2 = (sqrt(m*(m*pi+4.0*max(-t+timeOffset,0.)*pi)))+m*sqrt(pi)/(2.0*m*sqrt(pi)) -1.0;\n    float RT2 = R2;\n    R1 = R1*m-m*0.5;\n    R2 = R2*m-m*0.5;\n    float centDist = 22.0*3.5*scale+sin(t*0.5+pi)*1.25;\n\n    float L = sqrt(centDist*centDist-(R2+R1)*(R2+R1));\n    \n    p.x+=L*0.5*sin(t);\n    p*=rot(-(RT2-RT1)*pi*1.0);\n    p*=rot(-atan((R2+R1)/L)-0.13);\n    p.x-=L*0.5;\n    p.y-=R2;\n\n    vec2 po3 = p;\n    float s = sign(p.x);\n    p.x = abs(p.x);\n    \n    float c = max(p.x+0.125+expand,abs(p.y)-(R2+R1)*2.0);\n    \n    p.x-=L*0.5;\n\n    p.y*=s;\n    float to2 = t;\n    t*=s;\n    \n    //if(s<0.0)t+=timeOffset;\n    \n    t = max(t,0.);\n    float to = t;\n\n    if(s>0.)t=RT1;\n    else t = RT2;\n    vec2 po = p;\n    p.y+=-t*m-m*0.5;\n\n    p*=rot(t*pi*2.+pi/2.);\n    \n    float theta = atan(p.y,p.x);\n    theta = clamp(theta,-pi,pi);\n    p = vec2(theta,length(p));\n    \n    p.y+=theta*scale*0.5;\n\n    float py = p.y;\n    float id = floor((p.y+m*0.5)/m);\n    p.y = lim(p.y,m,0.,floor(t));\n    float py2 = p.y;\n    float hel = -(theta+pi)/(2.*pi)+id; \n    \n    float a = abs(p.y)-size;\n    \n    p.y = py;\n    p.x -= pi;\n    p.y -= (floor(t)+1.5)*m-m*0.5;\n    float b = max(abs(p.y),abs(p.x)-(pi*2.)*fract(t)+size );\n    \n    if(a>b-size){\n        a=b-size;\n        py2=p.y;\n    }\n    b = abs(po.y)-size;\n    b = max(po.x*30.,b);\n    \n    if(b<a) {\n        id = ceil(t);\n        py2=-po.y;\n        hel*=id;\n    }\n    else hel*=max(id,0.4);\n    \n    float strip = (sin(hel*pi*20.)*0.5+0.5);\n    vec3 p2 = vec3(hel,py2+hel*0.1,pz)*7.0+to2*0.2;\n    p2.xy*=rot(0.4);\n    //Taken from https://www.shadertoy.com/view/tsBSzc\n    strip =  smoothstep(-.05,.05,  length(p2 - (floor(p2) + cos(floor(p2.zxy) * 10.) * .25 + .5)) - .25);\n    \n    if(b<a){\n        hel = (po3.x*(0.04/scale)-to2/(sqrt(pi)*(0.04/scale)))*1.1;\n        p2 = vec3(hel,po3.y,pz*0.8+hel*0.01)*8.0+to2*0.2;\n        p2.xy*=rot(0.4);\n        float strip2 = smoothstep(-.05,.05,  length(p2 - (floor(p2) + cos(floor(p2.zxy) * 10.) * .25 + .5)) - .3);\n        strip = mix(strip,strip2,1.0-smoothstep(-0.4,0.,po.x));\n       // strip = strip2;\n    }\n    a = min(a,b);\n    a = min(a,c); \n    return vec2(a,strip);\n}\nvec4 map(vec3 p){\n    float t = iTime;\n    vec3 rd2 = rdg;\n    \n    p.yz=p.zy;\n    rd2.yz=rd2.zy;\n    \n    p.zx*=rot(sin(t)*0.125);\n    rd2.zx*=rot(sin(t)*0.125);\n    p.zx*=rot(cos(t)*0.125);\n    rd2.zx*=rot(cos(t)*0.125);\n    p.xy*=rot(pi);\n    rd2.xy*=rot(pi);\n    p.xy*=rot(t);\n    rd2.xy*=rot(t);\n    \n    vec3 po = p;\n    vec2 a = vec2(1);\n    \n    float timeOffset = 30.0;\n    \n    float scale = 0.05;\n    float m = pi*scale;\n    float size = 0.07;\n    float expand = m*0.5;\n    float count = 14.0;\n    float thick = 0.075;\n    \n    float id = idlim(p.z,m+scale+thick*1.5,-count,count);\n    p.z = lim(p.z,m+scale+thick*1.5,-count,count);\n    t*=0.25;\n    t+=id*0.025;\n    //timeOffset+=id*1.0;\n    t = (tanh(sin(t)*1.2)*0.55+0.5)*timeOffset;\n    \n    p.xy*=rot(id*pi/30.0);\n    \n    vec2 b = spiral(p.xy, t, m, scale, size, expand, po.z,timeOffset);\n    a.x = ext(p.yzx,b.x,thick)-expand;\n    a.x*=0.9;\n    vec2 c= vec2(diplane(p,vec3(m+thick-scale),rd2)*0.9,5.0);\n    \n    a.y+=b.y;\n    float nsdf = a.x;\n    a=(a.x<c.x)?a:c;\n    return vec4(a,nsdf,id);\n}\nvec3 norm(vec3 p){\n    vec2 e = vec2(0.005,0);\n    return normalize(map(p).x-vec3(\n    map(p-e.xyy).x,\n    map(p-e.yxy).x,\n    map(p-e.yyx).x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0,7,-5)*1.1;\n    ro.yz*=rot(0.2);\n    if(iMouse.z>0.){\n    ro.yz*=rot(3.0*(iMouse.y/iResolution.y-0.2));\n    ro.zx*=rot(-7.0*(iMouse.x/iResolution.x-0.5));\n    }\n    vec3 lk = vec3(0,0,0);\n    vec3 f = normalize(lk-ro);\n    vec3 r = normalize(cross(vec3(0,1,0),f));\n    vec3 rd = normalize(f*(0.55)+uv.x*r+uv.y*cross(f,r));  \n    rdg = rd;\n    vec3 p = ro;\n    float dO = 0.;\n    bool hit = false;\n    vec4 d= vec4(0);\n    for(float i = 0.; i<STEPS; i++){\n        p = ro+rd*dO;\n        d = map(p);\n        dO+=d.x;\n        if(abs(d.x)<0.001){\n            hit = true;\n            break;\n        }\n        if(dO>MDIST){\n            dO = MDIST;\n            break;\n        }\n    }\n    vec3 bg = mix(vec3(0.710,0.310,0.792),vec3(0.184,0.031,0.286)*0.75,length(uv));\n    if(hit&&d.y!=5.0)\n    {\n        vec3 ld = normalize(vec3(0,1,0));\n      \n        //sss from nusan\n        float sss=0.15;\n        for(float i=1.; i<10.; ++i){\n            float dist = i*0.05;\n            sss += smoothstep(0.,1.,map(p+ld*dist).z/dist)*0.055;\n        }\n        vec3 al = vec3(0.25,0.25,0.373)*0.8;\n        vec3 n = norm(p);\n        vec3 r = reflect(rd,n);\n        float diff = max(0.,dot(n,ld));\n        float amb = dot(n,ld)*0.45+0.55;\n        float spec = pow(max(0.,dot(r,ld)),40.0);\n        //blackle ao\n        #define AO(a,n,p) smoothstep(-a,a,map(p+n*a).z)\n        float ao = AO(.3,n,p)*AO(.5,n,p)*AO(.9,n,p);\n\n        col = al*\n        mix(vec3(0.169,0.000,0.169),vec3(0.984,0.996,0.804),mix(amb,diff,0.75))\n        +spec*0.3;\n        col+=sss*(hsv(vec3(fract(d.w*0.5)*0.45+0.75,1.,1.35)));\n        col=pow(col,vec3(mix(1.2,1.0,d.y-1.0)));\n        col*=mix(0.8,1.0,d.y-1.0);\n        col*=mix(ao,1.,0.6);\n        col = pow(col,vec3(0.7));\n    }\n    else{\n    col = bg;\n    }\n    col = clamp(col,0.,1.);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}