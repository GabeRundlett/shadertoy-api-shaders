{
    "Shader": {
        "info": {
            "date": "1570756640",
            "description": "Different visualization presets can be selected by changing the `option` variable at the top.",
            "flags": 0,
            "hasliked": 0,
            "id": "WdVGzt",
            "likes": 5,
            "name": "Options",
            "published": 3,
            "tags": [
                "kaleidoscope",
                "trig",
                "switch"
            ],
            "usePreview": 0,
            "username": "shadeThrower",
            "viewed": 521
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //OPTIONS: (0) NONE, (1) BREATHE, (2) DISTORT, (3) BREATHE-MOVE,\n    //(4) MOVE, (5) XSIN, (6) SCAPE, (7) 2001, (8) CONVEX-ZOOM, (9) CONCAVE-ZOOM\n    //(10) CONCAVE-INTERACT\n    int option = 9;\n    float tme = iTime*.5;\n    float scale = 0.125;\n   \n    vec2 adjVec = vec2((sin(tme)*.5), (cos(tme)*.5));\n    vec2 uv = fragCoord/iResolution.xy;    \n    vec2 uvM;\n    float posMod;\n    switch(option){\n        case 1:\n\t    \tuvM = mod(uv + normalize(uv-0.5)*adjVec, scale);\n        \tbreak;\n    \tcase 2:\n\t    \tuvM = mod(uv + normalize(uv*uv-2.*scale)*adjVec, scale);\n        \tbreak;\n        case 3:\n        \tuvM = mod(uv*(uv.y) + normalize((uv-.5) + adjVec*.667)*adjVec, scale);\n        \tbreak;\n        case 4:\n        \tuvM = mod(uv + adjVec, scale);\n        \tbreak;\n        case 5:\n        \tuvM = mod(uv*sin((uv.x)*3.1416), scale);\n        \tbreak;\n        case 6:\n        \tuvM = mod(uv + uv*tan(pow(length(uv),abs(sin(adjVec.x)*30.*uv.x))), scale);\n        \tbreak;\n        case 7:\n        \tscale *= 2.;\n        \tposMod = fract(tme/5.);\n        \tif(uv.x>0.5){\n                uv.x=1.-uv.x;\n    \t\t}\n        \t//uv.x -= sin(uv.x)/8.-(pow(0.5-uv.x,-1.));\n        \n        \tuv.x += (pow(0.525,-1.))/2500.; //+ .14*(0.5-uv.x);\n        \tuv.x -=(pow(0.525-uv.x,-1.))/2500.;\n        \t//uv.x -= sin(uv.y*30.+sin(tme)*20.)*2.*(.5-uv.x)*(pow(0.5-uv.x,1.4))/14.;\n        \n        \tuv.y = uv.y-.5 - sin(tme/2.)*.65;\n\t\t\t\n        \n\t        uvM = mod(uv*tan((mod((sin(uv.x)),0.5))*3.1416)+vec2(posMod*5.,(1.-sin(tme/2.+4.7124)/2.+.5)*uv.y), scale);\n\t        //uvM = mod(uv*tan((mod((sin(uv.x)),0.5))*3.1416)+vec2(1.,uv.y), scale);\n        \tbreak;\n        case 8:\n        \tuv = (uv-.5)*length(uv-0.5)*adjVec.x*5.;\n        \tuvM = mod(uv, scale);\n        \tbreak;\n        case 9:\n        \tposMod = (cos(tme/2.+3.1416)*.95 + .05)/2.+.5;\n        \t//uv = vec2(pow((uv.x-.5)*length(normalize(uv-0.5))*5., -.05)*posMod, pow((uv.y-.5)*length(normalize(uv-0.5))*5., -.05)*posMod);\n        \t//uv = vec2(pow((uv.x-.5)*length(uv-0.5)*5., -.07)*posMod*2., pow((uv.y-.5)*length(uv-0.5)*5., -.07)*posMod*2.);\n        \tuv = vec2(pow(abs(uv.x-.5)+length(uv-.5), -.07)*posMod*3., pow(abs(uv.y-.5)+length(uv-.5), -.07)*posMod*3.);\n        \tuvM = mod(uv, scale);\n        \tbreak;\n        case 10:\n            //INTERACTIVE: Mouse X controls flight speed, Mouse Y controls depth\n            float normX;\n            float normY;\n        \tif(iMouse.y>0. || iMouse.x>0.){\n                normX = ((iMouse.x)-1.)/iResolution.x;\n                normY = ((iMouse.y)-1.)/iResolution.y;\n            }\n            else{\n                normX = 0.3;\n                normY = 0.3;\n            }\n            float zoomMult = pow(max(normY,0.001)*5., .5);\n            //uv = vec2(pow((uv.x-.5)*length(normalize(uv-0.5))*5., -.05)*posMod, pow((uv.y-.5)*length(normalize(uv-0.5))*5., -.05)*posMod);\n            //uv = vec2(pow((uv.x-.5)*length(uv-0.5)*5., -.07)*posMod*2., pow((uv.y-.5)*length(uv-0.5)*5., -.07)*posMod*2.);\n            uv = vec2(pow(abs(uv.x-.5)+length(uv-.5), -.07)*zoomMult*2., pow(abs(uv.y-.5)+length(uv-.5), -.07)*zoomMult*2.);\n            uvM = mod(uv+fract((tme)*normX)*5.*(normY*.75+.25), scale);\n        \tbreak;\n    \tdefault:\n\t        uvM = mod(uv, scale);\n    }\n    uv = normalize(uvM-vec2(scale/2.))*(adjVec+vec2(.5));\n\n    if(mod(floor((uv.x)/scale),2.) == 0.)\n            uvM.x = scale - uvM.x;\n    if(mod(floor((uv.y)/scale),2.) == 0.)\n            uvM.y = scale - uvM.y;\n\n    uvM += adjVec*length(uvM + adjVec - vec2(0.5));\n\n    // Time varying pixel color\n    vec3 col = vec3(0.5 + 0.5*tan((cos(tme)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.)))),\n                    0.5 + 0.5*tan((sin(tme*1.2)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.)))),\n                    0.5 + 0.5*tan((cos(tme*1.3)+3.)*8.*(uvM.x/sin(uvM.y+0.2+(sin(tme)/2.+1.)))));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}