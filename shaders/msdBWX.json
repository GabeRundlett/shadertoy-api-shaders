{
    "Shader": {
        "info": {
            "date": "1697732007",
            "description": "A 2D noise implementation that only requires 3 random number calls and 2 mix calls, compared to a typical 4-point 2D noise that requires 4 random number calls and 3 mix calls. Hopefully it's faster than the 4-point one\n",
            "flags": 0,
            "hasliked": 0,
            "id": "msdBWX",
            "likes": 10,
            "name": "3-Point 2D Noise",
            "published": 3,
            "tags": [
                "noise",
                "fbm",
                "3pointnoise"
            ],
            "usePreview": 0,
            "username": "virmoesiae",
            "viewed": 290
        },
        "renderpass": [
            {
                "code": "/*\n    AD BY VIRMODOETIAE, a.k.a VIRMOESIAE ---------------------------\n    \n    Do you like shaders? Would you like to toy with them offline?\n    Would you like an interactive UI to play around with your shader\n    variables/uniforms in real-time without compilation? Would you\n    like to have a layer-based shader blending, without having to\n    pass through obscure buffers all the time? Would like to export\n    your shaders directly as GIFs?\n    Would you like a stand-alone executable (currently for Windows-\n    only, but the source code is cross-platform) in less than 9MB?\n    \n    Then, my dear friend, come get your free copy of:\n        \n    >>> SHADERTHING <<<\n   \n    a live, offline, GUI-based shader editor developed by me,\n    virmodoetiae (a.k.a, virmoesiae) freely obtainable at:\n    \n        https://github.com/virmodoetiae/shaderthing\n    \n    For the release, head to :\n    \n        https://github.com/virmodoetiae/shaderthing/releases\n    \n    Everything, including the source code, is available under a \n    very permissive libz/libpng license, so you can really do\n    almost anything you want with it!\n    \n    Please note that currently no tutorials are available, but the\n    core usage should be intuitive to most ShaderToy users.\n    \n    Enjoy!\n*/\n\n// Swap with other noise implementations to check for differences\n// (best seen when VIEW is set to fbm). The novel implementations\n// are triValueNoise and triGradNoise\n#define NOISE triValueNoise\n//#define NOISE triGradNoise\n//#define NOISE quadValueNoise\n//#define NOISE quadGradNoise\n\n#define VIEW pattern\n//#define VIEW fbm\n\n// My take on the pseudo-random number thing\nfloat random(vec2 x)\n{\n    return fract(138912.*sin(dot(x, vec2(138.9, 191.2))));\n}\n\n// From iq\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\n// Your average 4-point value noise implementation\nfloat quadValueNoise(vec2 n) \n{\n\tconst vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn \n        mix\n        (\n            mix(random(b),        random(b + d.yx), f.x), \n            mix(random(b + d.xy), random(b + d.yy), f.x), \n            f.y\n        );\n}\n\n// Your average 4-point, Perlin-like noise implementation\nfloat quadGradNoise(vec2 n) \n{\n\tconst vec2 d = vec2(0.0, 1.0);\n    vec2 r = fract(n);\n    vec2 l = floor(n);\n    vec2 f = r*r*(3.0-2.0*r);\n\treturn \n        .5+.5*mix\n        (\n            mix\n            (\n                dot(random2(l), r),        \n                dot(random2(l + d.yx), r-d.yx), \n                f.x\n            ), \n            mix\n            (\n                dot(random2(l + d.xy), r-d.xy), \n                dot(random2(l + d.yy), r-d.yy), \n                f.x\n            ), \n            f.y\n        );\n}\n\n// A 2D noise implementation I came up with that requires \n// one less call to the pseudo-random number generator and\n// one less mixing. Easily extandable to 3D\nfloat triValueNoise(vec2 x)\n{\n    x.y *= 1.1547;\n    x.x -= 0.5*x.y;\n    vec2 l = floor(x);\n    vec2 r = fract(x);\n    float s = float(int(r.x+r.y > 1.));\n    vec2 e = vec2(1.,0.);\n    float a = random(l+s*e.yx);\n    float b = random(l+s*e.yx+e.xy);\n    float c = random(l+s*e.xy+(1.-s)*e.yx);\n    r.y = s+r.y*(1.-2.*s);\n    r.x = (r.x-s*r.y)/(1.-r.y);\n    r *= r*(3.-2.*r); // Same cubic profile as smoothstep\n    return mix(mix(a, b, r.x), c, r.y);\n}\n\n// Same as before but using gradients, much smoother\nfloat triGradNoise(vec2 x)\n{\n    x.y *= 1.1547;\n    x.x -= 0.5*x.y;\n    vec2 l = floor(x);\n    vec2 r = fract(x);\n    float s = float(int(r.x+r.y > 1.));\n    vec2 e = vec2(1.,0.);\n    float a = dot(random2(l+s*e.yx), r-s*e.yx);\n    float b = dot(random2(l+s*e.yx+e.xy), r-s*e.yx-e.xy);\n    float c = dot(random2(l+s*e.xy+(1.-s)*e.yx), r-s*e.xy-(1.-s)*e.yx);\n    r.y = s+r.y*(1.-2.*s);\n    r.x = (r.x-s*r.y)/(1.-r.y);\n    // Quintic profile to have null second derivate at \n    // boundaries\n    r *= 6.*r*r*r*r-15.*r*r*r+10.*r*r; \n    return .5+.5*mix(mix(a, b, r.x), c, r.y);\n}\n\n// Fractional Brownian Motion noise to test the \n// single-octave noise function\nfloat fbm(vec2 x)\n{\n    float n = 0.;\n    float A = 0.;\n    vec2 af = vec2(1., 2.);\n    for (int i=0; i<4; i++)\n    {\n        // Rotate each octave\n        float s = sin(float(2*i));\n        float c = cos(float(2*i));\n        mat2 m = mat2(c, s, -s, c);\n        n += af.x*NOISE(af.y*m*x);\n        A += af.x;\n        af *= vec2(.4,2.);\n    }\n    return n/A;\n}\n\n// A warp-based pattern inspired by https://iquilezles.org/articles/warp/\nfloat pattern(vec2 x)\n{\n    vec2 a = vec2(fbm(x)+iTime/15., fbm(x+vec2(2.2,0.)));\n    float b = fbm(x+a+iTime/10.);\n    vec2 c = vec2(fbm(x+b), fbm(a-vec2(1.7,0.)));\n    return fbm(x+.5*c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 d = 3.*vec2(2.+cos(iTime/10.), 3.+sin(iTime/10.));\n    fragColor = vec4(vec3(VIEW(2.*uv+d)), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}