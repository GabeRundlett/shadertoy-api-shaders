{
    "Shader": {
        "info": {
            "date": "1602264375",
            "description": "My first project",
            "flags": 32,
            "hasliked": 0,
            "id": "WsycRW",
            "likes": 5,
            "name": "First Project (cellular automat)",
            "published": 3,
            "tags": [
                "first"
            ],
            "usePreview": 0,
            "username": "Philipuss",
            "viewed": 286
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float pi = 3.141592653589793238462643383279502;\n\nfloat hash13 (vec3 p3)\n{\n \tp3  = fract (p3 * 0.1031);\n    p3 += dot (p3, p3.yzx + 33.33);\n    return fract ((p3.x+p3.y)*p3.z);\n}\n\nvec2 ang2vec(float a)\n{\n \treturn vec2(cos(a), sin(a));   \n}\n\nvec2 read(vec2 p) {\n\treturn texture(iChannel0, p/iResolution.xy).xy;\n}\n\nvec2 avgpool(vec2 p) {\n  vec2 acc = vec2(0.0);\n  for (int y=-1; y<=1; ++y)   \n  for (int x=-1; x<=1; ++x) {\n    acc += read(p + vec2(x, y));\n  }\n  return acc / 9.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iFrame == 0)\n    {\n    \tfloat a = hash13(vec3(fragCoord+vec2(58342.0, -58342.0), 0.0)) * 2.0 * pi;\n    \tfragColor = vec4(ang2vec(a), 0.0,0.0);\n        return;\n    }\n    vec2 v = normalize(avgpool(fragCoord));\n    fragColor = vec4(v, 0.6, v);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}