{
    "Shader": {
        "info": {
            "date": "1540837175",
            "description": "rework of https://www.shadertoy.com/view/lssfzX\nbut actually inspired by Shane's \"Quadtree Truchet\" - also press mouse button to show grid",
            "flags": 0,
            "hasliked": 0,
            "id": "Xtcfzl",
            "likes": 41,
            "name": "trigonal multiscale truchet",
            "published": 3,
            "tags": [
                "truchet",
                "pattern",
                "trigonal"
            ],
            "usePreview": 0,
            "username": "flockaroo",
            "viewed": 2240
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// trigonal multiscale truchet\n\n// rework of https://www.shadertoy.com/view/lssfzX\n// but actually inspired by Shane's \"Quadtree Truchet\" - also press mouse button to show grid\n\n#define PSEUDO3D\n//#define PURE_OULINES\n//#define SPH_ABB\n\n#define Res  iResolution.xy\n#define Res0 vec2(textureSize(iChannel0,0))\n#define Res1 vec2(textureSize(iChannel1,0))\n#define Res2 vec2(textureSize(iChannel2,0))\n#define Res3 vec2(textureSize(iChannel3,0))\n\n#define PI2 6.28318530718\n#define N(v) (v.yx*vec2(1,-1))\n#define CS(x) sin(x+vec2(PI2/4.,0))\n#define ROT2(x) mat2(CS(x),N(CS(x)))\n\nvec2 tr_i(vec2 p)\n{\n    return (p*vec2(1,.5*sqrt(3.))+vec2(.5*p.y,0));\n}\n\nvec2 tr(vec2 p)\n{\n    return (p-vec2(p.y/sqrt(3.),0))/vec2(1,.5*sqrt(3.));\n}\n\nvoid getTri(vec2 p, inout vec2 p1, inout vec2 p2, inout vec2 p3, float size)\n{\n    vec2 pt=tr(p)/size;\n    vec2 pf=floor(pt);\n    vec2 pc=ceil(pt);\n    p1=vec2(pf.x,pc.y);\n    p2=vec2(pc.x,pf.y);\n    p3=pc;\n    if(dot(pt-pf,vec2(1))<1.) p3=pf;\n    p1=tr_i(p1)*size;\n    p2=tr_i(p2)*size;\n    p3=tr_i(p3)*size;\n}\n\nfloat tri01(float x)\n{\n    return abs(fract(x)-.5)*2.;\n}\n\nvec4 getRand(vec2 p)\n{\n    //vec2 texc=(floor(p)+.5)/Res0;\n    //return textureLod(iChannel0,texc,0.);\n    //return texelFetch(iChannel0,ivec2(p)%textureSize(iChannel0,0),0);\n    //all the above ones flicker :-( dont have hw where i can reproduce...\n    //thanks iq for fixing it... :-)\n    return texelFetch(iChannel0,ivec2(mod(p+.1,256.0))&255,0);\n}\n\nvec4 getRandS(vec2 p)\n{\n    return texture(iChannel0,p);\n}\n\n#define PI 3.14159265\n\nfloat dist(vec2 p, inout vec2 p1, inout vec2 p2, inout vec2 p3, float size)\n{\n    getTri(p,p1,p2,p3,size);\n    vec4 rnd=getRand(p1+p2+p3);\n\tfloat r=rnd.z;\n    if(fract(r*2.)>.3333) { vec2 d=p3; p3=p2; p2=p1; p1=d; }\n    if(fract(r*2.)>.6666) { vec2 d=p3; p3=p2; p2=p1; p1=d; }\n    float d = 10000.;\n    d = min(d,length(p-p1));\n    d = min(d,length(p-p2));\n    return d;\n}\n\nfloat ndist(vec2 a, vec2 b)\n{\n    return length(cross(vec3(a,0),normalize(vec3(b,0))));\n}\n\nfloat schraff(vec2 dir, float period, float w, vec2 coord,float gscale)\n{\n\tfloat x=dot(dir,coord);\n\tfloat pat = tri01(x/period)*period*.5;\n\tpat=smoothstep(w*.5-1.2,w*.5+1.2,pat/gscale);\n    return pat;\n}\n\nvec3 getEnv(vec3 dir)\n{\n    return texture(iChannel1,dir).xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 fc0=fragCoord;\n    \n    float gscale=.6;\n    if(iMouse.x>0.)\n        gscale=2.*exp(-iMouse.x/Res.x*2.);\n    \n    #ifdef SPH_ABB\n    fragCoord -= Res*.5;\n    float dist2=dot(fragCoord,fragCoord);\n    fragCoord = fragCoord+fragCoord*dist2*dist2/Res.x/Res.x/Res.x/Res.x*3.;\n    fragCoord += Res*.5;\n    #endif\n    \n    float mspeed=.5;\n    fragCoord = (fragCoord-Res*.5)*gscale-Res*.5;\n    vec2 cs = CS(sin(iTime*mspeed*.13));\n    fragCoord = mat2(cs,N(cs))*(fragCoord-Res*.5);\n    \n    fragCoord+=100.*sin(vec2(0,1.6)+.33*iTime*mspeed);\n    fragCoord+=70.*iTime*mspeed;\n    \n\t//fragColor = vec4(dist(fragCoord,period,60.)/(.5*period));\n    float d=10000.;\n    //d=min(d,dist(fragCoord,.007*iResolution.x,.07*iResolution.x));\n    float sc=170./sqrt(600./iResolution.x);\n    \n    float lineWidth = 1.5/gscale*sc/170.;\n    \n    vec2 p1,p2,p3;\n    float r,sc2;\n    float divNum = float(6*2*2);\n    sc2=1.;\n    float phase;\n    float phase2;\n    for(int i=0;i<3;i++)\n    {\n        phase=((int(divNum*sc2)&1)==1)?.5:.0;\n        phase2=((int(divNum*sc2)&2)==2)?.5:.0;\n        d=dist(fragCoord,p1,p2,p3,sc*sc2); r=getRand(p1+p2+p3).x;\n        if(r>.8-float(i)*.5) break;\n        //if(r>.7-float(i)*.55) break;\n        sc2/=2.;\n    }\n    float d0 = d;\n    d = tri01((d-sc*sc2*.5)/sc*divNum+phase)*.5*sc/divNum;\n    float d2 = tri01((d0-sc*sc2*.5)/sc*divNum*.5+phase2*1.+.5)*.5*.5*sc/divNum;\n    //float d2 = d0;\n    \n    // triangular multiscale grid\n    float dg=10000.;\n    dg=min(dg,ndist(fragCoord-p1,normalize(p2-p1)));\n    dg=min(dg,ndist(fragCoord-p2,normalize(p3-p2)));\n    dg=min(dg,ndist(fragCoord-p3,normalize(p1-p3)));\n    \n\tfragColor.xyz = vec3(1);\n    \n\t#ifndef PURE_OULINES\n\tvec2 sdir = CS(7.);\n\tfloat pat1 = schraff(sdir,sc/divNum*.75,lineWidth*.05,fragCoord,gscale);\n\tfloat pat2 = schraff(N(sdir),sc/divNum*.75,lineWidth*.05,fragCoord,gscale);\n\t// force to non-cubemap version for brushed metal, because it aliases too much\n\tvec3 n1=vec3(.2,1,1)*(texture(iChannel0,fragCoord*.008*vec2(.05,1)).xyz-vec3(.5,.5,-1.));\n    n1=normalize(n1);\n    n1.xy = n1.xy*mat2(cs,N(cs));\n    vec2 scr=(fc0-.5*Res)/Res.x*3.;\n\tvec3 c1=.5+.5*getEnv(reflect(vec3(scr,-1.),n1).xzy);\n\tc1=\n\t    -.5*(texture(iChannel0,fragCoord*.008*vec2(.05,1)).xyz-.25)\n\t    -1.*(texture(iChannel0,fragCoord*.016*vec2(.05,1)).xyz-.25)\n\t;\n\tc1=vec3(0)+(.85+.3*c1.xy*ROT2(iTime*2.+3.6*getRandS(fc0/Res/Res0*3.+iTime/Res0.x*1.).x)).x;\n\tvec3 c2=vec3(1.,.8,.3)*mix(vec3(.3),vec3(1.),pat1*pat2)*clamp(pow(.6+.6*d/(sc/divNum)*2.,1.),0.,1.);\n\tfragColor.xyz *= mix(c2,c1,step(.5,fract((d0/sc*divNum+.5+phase)*.5)));\n\t#endif\n\t\n\t#ifdef PURE_OULINES\n    fragColor.xyz*=smoothstep(lineWidth*.5-1.2,lineWidth*.5+1.2,d/gscale);\n    #else\n    #ifndef PSEUDO3D\n    fragColor.xyz*=smoothstep(lineWidth*.5-1.2,lineWidth*.5+1.2,d/gscale);\n    #else\n    vec3 n3=normalize(vec3(vec2(-dFdx(d2),-dFdy(d2)),.5));\n\tfragColor.xyz = mix(\n        (.5+.5*getEnv(reflect(vec3(scr,-1.),n3).xzy))*\n        vec3(.7)*dot(n3,normalize(vec3(-1,1,.7))),\n        fragColor.xyz,\n        smoothstep(lineWidth*.5-1.2,lineWidth*.5+1.2,d/gscale)\n        );\n    #endif\n    #endif\n\n    \n    // show triangular multiscale grid\n    /*if(iMouse.x==iMouse.z && iMouse.x!=0.0)\n    {\n        fragColor.xyz*=smoothstep(lineWidth*.5-1.2,lineWidth*.5+1.2,dg/gscale);\n    }*/\n    \n\n    if(true)\n    {\n        vec2 scc=(fc0-.5*iResolution.xy)/iResolution.x;\n        float vign = 1.-.3*dot(scc,scc);\n        vign*=1.-.7*exp(-sin(fc0.x/iResolution.x*3.1416)*40.);\n        vign*=1.-.7*exp(-sin(fc0.y/iResolution.y*3.1416)*20.);\n        fragColor.xyz *= vign;\n    }\n    \n\tfragColor.w = 1.;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}