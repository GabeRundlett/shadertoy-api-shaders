{
    "Shader": {
        "info": {
            "date": "1578968506",
            "description": "reflections test agh recursion",
            "flags": 0,
            "hasliked": 0,
            "id": "3tV3DW",
            "likes": 4,
            "name": "Reflections Test",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "cowsed",
            "viewed": 382
        },
        "renderpass": [
            {
                "code": "//    \n// Testing Sebastian Aaltonen's soft shadow improvement\n//\n// The technique is based on estimating a better closest point in ray\n// at each step by triangulating from the previous march step.\n//\n// More info about the technique at slide 39 of this presentation:\n// https://www.dropbox.com/s/s9tzmyj0wqkymmz/Claybook_Simulation_Raytracing_GDC18.pptx?dl=0\n//\n// Traditional technique: https://iquilezles.org/articles/rmshadows\n//\n// Go to lines 54 to compare both.\n\n\n// make this 1 is your machine is too slow\n#define AA 2\n\n#define tMin 0.001\n#define tMax 20.1\n//------------------------------------------------------------------\nconst mat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );\n\nfloat hash( float n ){\n    return fract(sin(n)*43758.5453);\n}\nfloat noise( in vec2 x ){\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0;\n\n    return mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n               mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n}\nfloat fbm( vec2 p ){\n    float f = 0.0;\n\n    f += 0.50000*noise( p ); p = m*p*2.02;\n    f += 0.25000*noise( p ); p = m*p*2.03;\n    f += 0.12500*noise( p ); p = m*p*2.01;\n    f += 0.06250*noise( p ); p = m*p*2.04;\n    f += 0.03125*noise( p );\n\n    return f/0.984375;\n}\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\nfloat sdSphere( vec3 p ,float r)\n{\n\treturn length(p)-r;\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\nvec2 min2(vec2 a, vec2 b){\n    return (a.x < b.x) ? a : b;\n}\n\n//------------------------------------------------------------------\n\nvec2 map(vec3 pos){\n    vec3 qos = 1.*vec3( (fract(pos.x+.5)-.5)*1., pos.y,fract(pos.z+0.5)-0.5 );//repeatSpace on xz axis\n    return min2(vec2(sdPlane(pos-vec3(0)),0.)  ,  vec2(sdBox(pos-vec3(0.,.2,0.),vec3(.2)) ,1.));\n}\n//------------------------------------------------------------------\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    \n    for( int i=0; i<32; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n\n        // traditional technique\n\n        // improved technique\n        \n        // use this if you are getting artifact on the first iteration, or unroll the\n        // first iteration out of the loop\n        //float y = (i==0) ? 0.0 : h*h/(2.0*ph); \n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, 10.0*d/max(0.0,t-y) );\n        ph = h;\n        \n        \n        t += h;\n        \n        if( res<0.0001 || t>tmax ) break;\n        \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n\tfloat mat=-1.;\n\n    \n    float t = tMin;\n    for( int i=0; i<64; i++ )\n    {\n\t    float precis = 0.0005*t;\n        vec2 a=map( ro+rd*t);\n\t    float res =a.x;\n        if( res<precis || t>tMax ){\n            mat=a.y;\n        \tbreak;\n    \t}\n        t += res;\n    }\n\n    if( t>tMax ) t=-1.0;\n    return vec2(t,mat);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.001 + 0.15*float(i)/4.0;\n        float d = map( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 1.5*occ, 0.0, 1.0 );    \n}\nvec3 shader2(vec2 uv){\n\t//WE NEED TO GO DEEPER\n    uv*=1.5;\n    float r= length(uv);\n    float a=atan(uv.x,uv.y)+iTime;\n    float f=cos(a*4.)/2.;\n    return vec3(clamp(step(f,r),.1,1.)/3.)*texture(iChannel0,uv).xyz/1.3;\n}\nvec3 reflectRay(vec3 rd, vec3 n){\n\n\treturn rd-2.*dot(rd,n)*n;\n}\nvec3 render( in vec3 ro, in vec3 rd, int depth)\n{ \n    vec4 materials[3];\n    //rgb reflection 1 is [perfect mirror. 0 is totally matte\n    materials[0]=vec4(.4,.3,.2,0);//background\n    materials[1]=vec4(.7,.0,0,0.5); \n    materials[2]=vec4(.7,.0,1,0); \n\n    vec3  col = vec3(0);\n    vec2 a = castRay(ro,rd);\n\tfloat t=a.x;\n    for (int i =0; i<= depth; i++){\n    if( t>-.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        \n        // material       \n        vec2 matUV=mix(mix(vec2(pos.xz),vec2(pos.zy), nor.x), pos.xy ,nor.z);//YAY\n\t\tmaterials[0]=vec4(shader2(fract(matUV-.5)-.5),0.);        \n        //materials[0]=reflect(rd,nor);\n\t\t//materials[1]=reflect(rd,nor);\n\n\t\tvec4 mate = materials[int(a.y)];\n\t\t    // key light\n    \t    vec3  lig = normalize( vec3(-0.1, 0.3, 0.6) );\n\t        vec3  hal = normalize( lig-rd );\n    \t    float dif = 1.5*clamp( dot( nor, lig ), 0.0, 1.0 ) * \n                    calcSoftshadow( pos, lig, 0.01, 3.0 );\n\n\t\t\tfloat spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),16.0)*\n                    dif *\n                    (0.04 + 0.96*pow( clamp(1.0+dot(hal,rd),0.0,1.0), 5.0 ));\n\n    \t    float spec=2.;\n        \tvec3 lig_col = vec3(1.0,1.0,1.);\n\t\t\tcol = mate.xyz *2.0*dif*lig_col;\n    \t    col +=      spec*spe*lig_col;\n        \n\t        // ambient light\n    \t    float occ = calcAO( pos, nor );\n\t\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n    \t    col += mate.xyz*amb*occ;        \n\t        // fog\n    \t    col *= exp( -0.0005*t*t*t );\n        \n    }\n    }\n\n\treturn col;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // camera\t\n\n    vec3 ro = vec3( .0, .8, -3.0 );\n    //ro.y-=iMouse.w/iResolution.y;\n    vec3 ta = vec3( 0.0, -0.4, 1.0 );\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n\n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n\t\t//p.y-=iMouse.y/iResolution.y-1.;//cjhange angle\n                // ray direction\n        vec3 rd = normalize( vec3(p.xy,2.0) );\n\n        // render\t\n        vec3 col = render( ro, rd, 2);//2 reflections alloed\n\n\t\t// gamma\n        col = pow( col, vec3(0.4545) );\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    \n    fragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}