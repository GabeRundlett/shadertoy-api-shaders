{
    "Shader": {
        "info": {
            "date": "1724087663",
            "description": "words from___",
            "flags": 0,
            "hasliked": 0,
            "id": "XfXfRX",
            "likes": 4,
            "name": "message words",
            "published": 3,
            "tags": [
                "fractal",
                "space",
                "words"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 85
        },
        "renderpass": [
            {
                "code": "float cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n#define resolution iResolution.xy\n#define time iTime\nfloat snow(vec2 uv,float scale)\n{\nfloat w=smoothstep(1.,0.,-uv.y*(scale/10.));if(w<.0)return 0.;\nuv.x+=time*4./scale;\nuv*=scale;vec2 s=floor(uv),f=fract(uv),p;float k=40.,d;\np=.5+.35*sin(11.*fract(sin((s+p+scale)*mat2(7,3,6,5))*5.))-f;d=length(p);k=min(d,k);\nk=smoothstep(0.,k,sin(f.x+f.y)*0.003);\n    return k*w;\n}\nvec2 uv3;\n\n\n\nconst vec2 ch_size  = vec2(1.0, 2.0) * 0.6;              // character size (X,Y)\nconst vec2 ch_space = ch_size + vec2(1.0, 1.0);    // character distance Vector(X,Y)\nconst vec2 ch_start = vec2 (ch_space.x * -5., 1.); // start position\n      vec2 ch_pos   = vec2 (0.0, 0.0);             // character position(X,Y)\n//      vec3 ch_color = vec3 (1.5, 0.75, 0.5);        // character color (R,G,B)\n//const vec3 bg_color = vec3 (0.2, 0.2, 0.2);        // background color (R,G,B)\n\n#define REPEAT_SIGN false // True/False; True=Multiple, False=Single\n\n/* 16 segment display...Akin to LED Display.\n\nSegment bit positions:\n  __2__ __1__\n |\\    |    /|\n | \\   |   / |\n 3  11 40 9  0\n |   \\ | /   |\n |    \\|/    |\n  _12__ __8__\n |           |\n |    /|\\    |\n 4   / | \\   7\n | 13 14  15 |\n | /   |   \\ |\n  __5__|__6__\n\n15 12 11 8 7  4 3  0\n |  | |  | |  | |  |\n 0000 0000 0000 0000\n\nexample: letter A\n\n   12    8 7  4 3210\n    |    | |  | ||||\n 0001 0001 1001 1111\n\n binary to hex -> 0x119F\n*/\nmat2 rot(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c,-s,s,c);\n}\n#define n0 ddigit(0x22FF);\n#define n1 ddigit(0x0281);\n#define n2 ddigit(0x1177);\n#define n3 ddigit(0x11E7);\n#define n4 ddigit(0x5508);\n#define n5 ddigit(0x11EE);\n#define n6 ddigit(0x11FE);\n#define n7 ddigit(0x2206);\n#define n8 ddigit(0x11FF);\n#define n9 ddigit(0x11EF);\n\n#define A ddigit(0x119F);\n#define B ddigit(0x927E);\n#define C ddigit(0x007E);\n#define D ddigit(0x44E7);\n#define E ddigit(0x107E);\n#define F ddigit(0x101E);\n#define G ddigit(0x807E);\n#define H ddigit(0x1199);\n#define I ddigit(0x4466);\n#define J ddigit(0x4436);\n#define K ddigit(0x9218);\n#define L ddigit(0x0078);\n#define M ddigit(0x0A99);\n#define N ddigit(0x8899);\n#define O ddigit(0x00FF);\n#define P ddigit(0x111F);\n#define Q ddigit(0x80FF);\n#define R ddigit(0x911F);\n#define S ddigit(0x8866);\n#define T ddigit(0x4406);\n#define U ddigit(0x00F9);\n#define V ddigit(0x2218);\n#define W ddigit(0xA099);\n#define X ddigit(0xAA00);\n#define Y ddigit(0x4A00);\n#define Z ddigit(0x2266);\n#define _ ch_pos.x += ch_space.x;\n#define s_dot     ddigit(0);\n#define s_minus   ddigit(0x1100);\n#define s_plus    ddigit(0x5500);\n#define s_greater ddigit(0x2800);\n#define s_less    ddigit(0x8200);\n#define s_sqrt    ddigit(0x0C02);\n#define nl1 ch_pos = ch_start;  ch_pos.y -= 3.0;\n#define nl2 ch_pos = ch_start;  ch_pos.y -= 6.0;\n#define nl3 ch_pos = ch_start; ch_pos.y -= 9.0;\nvec3 hash3( vec2 p )\n{\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)),\n  dot(p,vec2(269.5,183.3)),\n  dot(p,vec2(419.2,371.9)) );\nreturn fract(sin(q)*43758.5453);\n}\n\nfloat dseg(vec2 p0, vec2 p1)\n{\nvec2 dir = normalize(p1 - p0);\nvec2 cp = (uv3 - ch_pos - p0) * mat2(dir.x, dir.y,-dir.y, dir.x);\nreturn distance(cp, clamp(cp, vec2(0), vec2(distance(p0, p1), 0)));  \n}\n\nbool bit(int n, int b)\n{\nreturn mod(floor(float(n) / exp2(floor(float(b)))), 2.0) != 0.0;\n}\n\nfloat d = 1e6;\n\nvoid ddigit(int n)\n{\n\n\nfloat v = 1e6;\nvec2 cp = uv3 - ch_pos;\n cp.xy *= rot(iTime*.5);\n    vec3 c = vec3(vec2(uv3*.1),1.);\n     uv3.xy *= rot(iTime*.25);\n     \nif (n == 0)     v = min(v, dseg(vec2(-0.405, -1.000)*c.yz, vec2(-0.500, -1.000)*c.yz));\nif (bit(n,  0)) v = min(v, dseg(vec2( 0.500,  0.063+c.x*cos(iTime)), vec2( 0.500+c.x*cos(iTime),  0.937)));\nif (bit(n,  1)) v = min(v, dseg(vec2( 0.438,  1.000)*c.yz, vec2( 0.063,  1.000)));\nif (bit(n,  2)) v = min(v, dseg(vec2(-0.063,  1.000)*c.yz, vec2(-0.438,  1.000+c.x*cos(iTime)*c.yz)));\nif (bit(n,  3)) v = min(v, dseg(vec2(-0.500+c.x*cos(iTime),  0.937), vec2(-0.500,  0.062)*c.yz));\nif (bit(n,  4)) v = min(v, dseg(vec2(-0.500, -0.063+cos(iTime)), vec2(-0.500, -0.938)*c.yz));\nif (bit(n,  5)) v = min(v, dseg(vec2(-0.438, -1.000)*c.yz, vec2(-0.063, -1.000)*c.yz));\nif (bit(n,  6)) v = min(v, dseg(vec2( 0.063, -1.000+sin(iTime))*c.xz, vec2( 0.438+c.x*sin(iTime), -1.000+c.x*sin(iTime))));\nif (bit(n,  7)) v = min(v, dseg(vec2( 0.500+c.y*sin(iTime), -0.938), vec2( 0.500, -0.063)*c.yz));\nif (bit(n,  8)) v = min(v, dseg(vec2( 0.063+c.z*cos(iTime),  0.000), vec2( 0.438, -0.000)*c.yz));\nif (bit(n,  9)) v = min(v, dseg(vec2( 0.063,  0.063)*c.yz, vec2( 0.438,  0.938)));\nif (bit(n, 10)) v = min(v, dseg(vec2( 0.000,  0.063+c.x*cos(iTime)), vec2( 0.000,  0.937)*c.yz));\nif (bit(n, 11)) v = min(v, dseg(vec2(-0.063,  0.063), vec2(-0.438,  0.938)));\nif (bit(n, 12)) v = min(v, dseg(vec2(-0.438+c.x*cos(iTime),  0.000), vec2(-0.063, -0.000)*c.yz));\nif (bit(n, 13)) v = min(v, dseg(vec2(-0.063, -0.063)*c.yz, vec2(-0.438+c.x*sin(iTime), -0.938)*c.yz));\nif (bit(n, 14)) v = min(v, dseg(vec2( 0.000, -0.938)*c.yz, vec2( 0.000, -0.063)*c.yz));\nif (bit(n, 15)) v = min(v, dseg(vec2( 0.063, -0.063+c.x*sin(iTime)), vec2( 0.438+c.x*sin(iTime), -0.938)));\nch_pos.x += ch_space.x+0.5*c.x*cos(iTime);\nd = min(d, v);\n}\nmat2 rotate(float a)\n{\nfloat c = cos(a);\nfloat s = sin(a);\nreturn mat2(c, s, -s, c);\n}\nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\nrgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\n\nreturn c.z * mix( vec3(1.0), rgb, c.y);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\nvec2 uv=(gl_FragCoord.xy*2.-resolution.xy)/min(resolution.x,resolution.y);\n     vec2 uv2 =fragCoord/iResolution.xy-0.5;\n     float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + 1.07)) * 25.2;\nfloat si = sin(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\nvec2 aspect = resolution.xy / resolution.y;\nuv3 = ( gl_FragCoord.xy / resolution.y ) - aspect / 2.0;\nfloat _d =  1.0-length(uv);\nuv3 *= 18.0 ;\nuv3 -= vec2(-3., -2.);\n//uv *= rotate(time+uv.x*0.05);\n\nvec3 ch_color = hsv2rgb_smooth(vec3(time*0.4+uv.y*0.1,0.5,1.0));\n\nvec3 bg_color = vec3(_d*0.4, _d*0.2, _d*0.1);\nuv2.x += 0.5+sin(time+uv3.y*0.7)*0.5;\nch_pos = ch_start;\n\n    _ _ _ _ _ S P A C E\n\n                 \n\nvec3 color = mix(ch_color, bg_color, 1.0- (0.08 / d*2.0));  // shading\n     uv2.y+=0.1;\nvec3 finalColor=vec3(0);\nfloat c=smoothstep(0.1,0.0,clamp(uv.x*.01+.99,0.,.99));\nc+=snow(uv*ma,3.)*.8;\nc+=snow(uv*ma,5.)*.7;\nc+=snow(uv,7.)*.6;\n\nc+=snow(uv*ma,9.)*.5;\n\nc+=snow(uv*ma,11.)*.4;\n\nc+=snow(uv,13.)*.3;\n\nc+=snow(uv*ma,15.)*.2;\n\nc+=snow(uv*ma,17.)*.1;\n\n \nfinalColor=(vec3(c*0.2,c*0.8,c*01.9));\nfragColor = vec4(finalColor,1)*81.0;\n\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1\n    fragColor*= vec4(cheap_star(uv2, anim) * vec3(0.35,0.2,0.75)*0.25, 1.0);\n    fragColor+= vec4(color, 1.0);\n}\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}