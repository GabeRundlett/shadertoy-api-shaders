{
    "Shader": {
        "info": {
            "date": "1722842674",
            "description": "source https://www.shadertoy.com/view/MfBczd https://www.shadertoy.com/view/XtVBWV",
            "flags": 1,
            "hasliked": 0,
            "id": "Xf2yRt",
            "likes": 1,
            "name": "happy star 5",
            "published": 3,
            "tags": [
                "square",
                "stars",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 203
        },
        "renderpass": [
            {
                "code": "\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n#define time iTime\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; \n            p.xy*=mat2(cos(iTime*0.01),sin(iTime*0.010),sin(iTime*0.010),cos(iTime*0.01) );// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.01,1.);\t\n}\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\nvec2  resolution = iResolution.xy;\n\t\n    // Initialize color and texture accumulators\n    vec4 color = vec4(1.0, 2.0, 3.0, 0.0);\n    vec4 baseColor = color;\n    \n    // Initialize time and amplitude variables\n\n    float amplitude = 0.5;\n\n\n     \n    vec2 uv2 = tanh(uv);\n     uv2*=10.;\n    uv2.y += iTime / 14.0;\n    uv2.x += (sin(iTime/10.0)/9.0);\n    float result = 0.0;\n    result += texture(iChannel0, uv * 0.6 + vec2(iTime*-0.003)).r;\n    result *= texture(iChannel0, uv2 * 0.9 + vec2(iTime*+0.002)).b;\n    result = pow(result, 15.0);\n    // Main loop to accumulate the effect\n    for (int i = 0; i < 18; i++) \n    {\n        // Update color with swirling pattern and length-based modulations\n        color += (1.0 + cos(baseColor + time)) \n               / length((1.0 + float(i) * dot(resolution, resolution)) \n               * sin(1.5 * uv / (0.5 - dot(uv, uv)) - 9.0 * uv.yx + time));\n\n        // Dynamic warping of coordinates\n        resolution = cos(time - 7.0 * uv * pow(amplitude += 0.03, float(i))) - 5.0 * uv;\n        uv += tanh(40.0 * dot(uv *= mat2(cos(float(i) + 0.02 * time - vec4(0, 11, 33, 0))), uv) \n                  * cos(100.0 * uv.yx + time)) / 200.0\n             + 0.2 * amplitude * uv\n             + cos(4.0 / exp(dot(color, color) / 100.0) + time) / 300.0;\n    }\n\n    // Final color adjustment for visual output\n    \n\tvec3 from=vec3(1.,.5,0.5)*result;\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\n    fragColor*= 25.6 / (min(color, vec4(13.0)) + 164.0 / color) \n              - dot(uv, uv) / 250.0;\n               uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    fragColor*= vec4(happy_star(uv, anim) * vec3(0.35,0.2,1.35)*30., 1.0);\n    fragColor+=vec4(vec3(result,result,result) ,1.);\n     \n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}