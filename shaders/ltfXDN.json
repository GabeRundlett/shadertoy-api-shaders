{
    "Shader": {
        "info": {
            "date": "1452511935",
            "description": "Particle Experiment 8",
            "flags": 32,
            "hasliked": 0,
            "id": "ltfXDN",
            "likes": 11,
            "name": "Particle Experiment 8",
            "published": 3,
            "tags": [
                "experiment",
                "8",
                "particle"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 849
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{       \n\tfragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime+5.;\n        \n    // vars\n    float z = 2.5;\n    \n    const int n = 100; // particle count\n    \n    vec3 startColor = normalize(vec3(1.,0.,0.));\n    //vec3 endColor = normalize(vec3(0.2,0.2,.8));\n    vec3 endColor = normalize(vec3(1.,sin(t)*.5+.5,cos(t)*.5+.5));\n    \n    float startRadius = 1.;\n    float endRadius = 2.;\n    \n    float power = 0.8;\n    float duration = 4.;\n    \n    vec2 \n        s = iResolution.xy,\n\t\tv = z*(2.*fragCoord.xy-s)/s.y;\n    \n    // Mouse axis y => zoom\n    if(iMouse.z>0.) v *= iMouse.y/s.y * 20.;\n    \n    // Mouse axis x => duration\n    if(iMouse.z>0.) duration = iMouse.x/s.x * 10.;\n    \n    vec3 col = vec3(0.);\n    \n    vec2 pm = v.yx*2.8;\n    \n    float dMax = duration;\n    \n    float mb = 0.;\n    float mbRadius = 0.;\n    float sum = 0.;\n    for(int i=0;i<n;i++)\n    {\n        float d = fract(t*power+48934.4238*sin(float(i)*692.7398))*duration;\n    \tfloat a = 6.28*float(i)/float(n);\n         \n        float x = d*cos(a);\n        float y = d*sin(a);\n        \n        float distRatio = d/dMax;\n        \n        mbRadius = mix(startRadius, endRadius, distRatio); \n        \n        v = mod(v,pm) - 0.5*pm;\n        \n        vec2 p = v - vec2(x,y);\n    \t\n        p = mod(p,pm) - 0.5*pm;\n        \n        mb = mbRadius/dot(p,p);\n    \t\n        sum += mb;\n        \n        col = mix(col, mix(startColor, endColor, distRatio), mb/sum);\n    }\n    \n    sum /= float(n);\n    \n    col = normalize(col) * sum;\n    \n    sum = clamp(sum, 0., .5);\n    \n    vec3 tex = vec3(1.);\n     \n    col *= smoothstep(tex, vec3(0.), vec3(sum));\n        \n    fragColor = vec4(col,1) * 0.2 + texture(iChannel0, fragCoord/s) * 0.8;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}