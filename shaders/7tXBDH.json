{
    "Shader": {
        "info": {
            "date": "1650800352",
            "description": "Turkish flag using sdf functions. Thanks to @BigWIngs for inspiration.",
            "flags": 0,
            "hasliked": 0,
            "id": "7tXBDH",
            "likes": 3,
            "name": "Turkish flag",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "nuudl3",
            "viewed": 189
        },
        "renderpass": [
            {
                "code": "float circleSDF(vec2 uv)\n{\n   return length(uv) - 0.1; \n}\n\n\nfloat Moon(vec2 uv)\n{\n    float scale = 3.f;\n    float l1 = length(uv) - 0.1 * scale;\n    float l2 = distance(vec2(0.03,0)* scale, uv) - 0.085 * scale;\n    \n    return max(l1, -l2);\n    \n}\n\nfloat sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\nfloat sdSquare(vec2 p)\n{\n  vec2 k = normalize(vec2(-0.5, 0.5));\n  p = abs(p);\n  float dk = dot(k.xy,p);\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    \n  k = normalize(vec2(-0.923, 0.328));\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n  \n  k = normalize(vec2(0.5, -0.5));\n  p -= 4.0*min(dot(k.xy,p),0.0)*k.xy;\n  return sign(p.x - 0.1f);\n  \n  \n \n  //return sign(p.y - 0.1f);\n}\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nfloat sdStar5(in vec2 p, in float r, in float rf)\n{\n    vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    \n    vec2 k = normalize(vec2(k1.x, k1.y));\n    p -= 3.0*min(dot(k.xy,p),0.0)*k.xy;\n    \n    \n    return sign(p.x - 0.08f);\n    \n    //p.y -= r;\n    //vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    //float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    //return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    vec2 uv = (fragCoord-0.5 * iResolution.xy)/iResolution.y * 0.8;    \n    uv.x = ((fragCoord-0.5 * iResolution.xy)/iResolution.y).x * 0.8 + 0.1;\n    \n    vec2 ux = fragCoord/iResolution.xy;\n    float t = uv.x*7.-2.*iTime+uv.y*3.;\n    uv.y += sin(t) * 0.02;    \n    ux.y += sin(t) * 0.02;    \n    \n    //uv.y += sin(iTime + (1.0f + uv.x) * .6) * 0.1;    \n    //uv.x += sin(iTime * uv.x)/ 32.f;\n\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col = vec3(1,0,0);\n    col = mix(vec3(1,1,1), col, step(0., Moon(uv)));    \n    //col = mix(vec3(1,1,1), col, step(0., sdStar5(uv-vec2(0.4, 0.0), 0.1f, 0.4f)));  \n    uv = rotate(uv,9.6*3.1415/32.);\n    vec2 translate = rotate(vec2(0.3, 0.0),9.6*3.1415/32.);\n    col = mix(vec3(1,1,1), col, step(0., sdStar5(uv - translate, 0.1f, 0.4f)));\n    //col = mix(vec3(0,0,0), col, step(0., ux.y-0.01));\n    col = mix(vec3(0,0,0), col, smoothstep(0. , 0.04, ux.y));    \n    col = mix(vec3(0,0,0), col, smoothstep(1. , 0.96, ux.y));    \n    col = mix(vec3(0,0,0), col, smoothstep(1. , 0.98, ux.x));\n\n\n    //col = mix(vec3(1,1,1), col, step(0., sdHexagon(uv-vec2(0.0, 0.0), 0.1f)));    \n    //col = mix(vec3(1,1,0), col, step(0., circleSDF(uv-vec2(0.07, 0.0))));    \n    //col = mix(vec3(0.5,1,0), col, step(0., sdSquare(uv-vec2(0.5, 0.0))));\n\n\n\n\n    col *= 0.8 - cos(t) * 0.1;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}