{
    "Shader": {
        "info": {
            "date": "1611504587",
            "description": "A simple fractal formula.",
            "flags": 0,
            "hasliked": 0,
            "id": "wtKcRc",
            "likes": 6,
            "name": "Fractal tile mosaic 2",
            "published": 3,
            "tags": [
                "fractal",
                "tile",
                "mosaic"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 297
        },
        "renderpass": [
            {
                "code": "//change these parameters to get different tile patterns.\n#define scale 5.5\n#define scale1 2.0\n#define scale2 2.0\n#define scale3 8.0\n#define ITERATIONS 6\n\n/*\n#define scale1 1.5\n#define scale2 4.0\n#define scale3 8.0\n#define ITERATIONS 3\n*/\n\nfloat fract1(float a){\n    return (abs(fract(a/2.0)-.5))*2.0;\n}\n\nvec2 fract1(vec2 a){\n    return (abs(fract(a/2.0)-.5))*2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col;\n    for(int c=0;c<3;c++){\n        vec2 uv = (fragCoord*20.0-iResolution.xy)/iResolution.y/10.0;\n        uv += vec2(iTime/3.0,iTime/8.0)/2.0;\n        for(int i=0;i<ITERATIONS;i++)\n        {\n            uv = (fract1(uv/scale2)+fract1(uv/scale3/2.0))*scale1;\n            uv= fract1(uv/(2.0-fract1((uv.x-uv.y)/(8.0)))-(uv/(1.7+(fract1(uv.x+uv.y))))/scale)*scale/scale1+scale1*scale;\n            uv /= scale1+col.yx;\n        \tuv=uv.yx+col.xy;\n        }\n     col[c] = abs(fract(uv.y)-fract(uv.x));\n\t}\n    \n    fragColor = vec4(col,1.0);\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}