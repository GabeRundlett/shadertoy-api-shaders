{
    "Shader": {
        "info": {
            "date": "1691911990",
            "description": "My entry to Demodulation Shader Showbattle ",
            "flags": 64,
            "hasliked": 0,
            "id": "mlByzG",
            "likes": 22,
            "name": " [2023 Demodulation] \t大龙猫 - Блоб",
            "published": 3,
            "tags": [
                "shadershowdown"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 350
        },
        "renderpass": [
            {
                "code": "#define fGlobalTime iTime\nvec3 pal(float t){return .5+.5*cos(6.28*(t+vec3(0,.3,.7)));}\nfloat diam2(vec2 p,float s){p=abs(p);return (p.x+p.y-s)*inversesqrt(3.);}\nfloat timer ;\nfloat bpm ;\nvec3 erot(vec3 p,vec3 ax,float t){return mix(dot(ax,p)*ax,p,cos(t))+cross(ax,p)*sin(t);}\nfloat tru(vec3 p){\n  \n     vec3 id = floor(p)+.5;\n     vec3 gv = p-id;\n      gv.x  *= fract(452.6*sin(dot(id,vec3(452.5,985.5,487.56)))) > .5 ? -1.:1. ;\n    gv.xz-=.5 * (gv.x >-gv.z ? 1. :-1.);\n      return max(abs(gv.y)-.05,abs(diam2(gv.xz,.5)*4.)-.05);\n  }\n vec3 path(float t){\n   \n     vec3 o=vec3(0);\n     o.x+=asin(sin(t*.45))*.5;\n    o.x+=asin(cos(t*.75))*.45;\n    o.y+=asin(cos(t*.95))*.33;\n    o.y+=asin(sin(t*.35))*.44;\n   return o;\n   }\nvec2 sdf(vec3 p){\n   vec2 h;\n   vec3 hp=p;\n  hp.z -=timer;\n   hp+=path(floor((hp.z*.025+.5))+timer);\n   h.x = length(hp)-1.-.2*mix(0.,dot(sin(hp+fGlobalTime),cos(hp.zxy*5.)),tanh(sin(bpm+fGlobalTime)*10.)*.5+.5);;\n  h.y =1.;\n  \n    vec2 t;\n    vec3 tp=p;\n    tp+=path(tp.z);\n     tp/=4.;\n    t.x = min(tru(tp.zxy),min(tru(tp),tru(tp.yzx)));\n    t.y= 2.;\n    h=t.x < h.x ? t:h;\n  return h;\n  }\n  #define q(s) s*sdf(p+s).x\n  vec3 norm(vec3 p,float ee){vec2 e=vec2(-ee,ee);return normalize(q(e.xyy)+q(e.yxy)+q(e.yyx)+q(e.xxx));}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    float rnd = float(((floatBitsToInt(uv.x)*floatBitsToInt(fragCoord.y)) ^ (floatBitsToInt(uv.y)*floatBitsToInt(fragCoord.x))))/2.19e9;\n   \n \n  bpm = floor(fGlobalTime*115./60.)+ fract(fGlobalTime*115./60.);\n   bpm +=rnd*.1;\n  bpm = floor(bpm)+smoothstep(.0,1.,pow(fract(bpm),.4));  timer +=fGlobalTime+bpm;\nvec3 col = vec3(0.);\n   vec2 puv = uv* fragCoord.x / iResolution.x;\n    puv +=.5;\n     \n    // float q = texelFetch(iChannel0,ivec2(puv.x*50.),0).r;\n    // Shadertoy version as Bonzomatic FFT is quite different\n    // Also no smoothing of FFT so quite flikering bars)\n    float q = texture(iChannel0,fract(floor(puv.xx*10.)/10.)).r*.0225;\n  float st ;\n  col+=sqrt((st=step(-(abs(uv.y)-.5),sqrt(q)))*sqrt(q));\n    if(st>.00) uv*=(1.+sqrt(q)*5.);\n    vec3 ro=vec3(0,0,-5),rt=vec3(0);\n  ro = erot(ro,vec3(0.,1.,0),bpm*.1);\n  ro.z +=timer-tanh(cos(bpm)*5.);\n   \n  ro+=path(ro.z)*2.;\n  rt.z+=timer;\n   rt+=path(ro.z);\n    vec3 z=normalize(rt-ro),x=normalize(cross(z,vec3(0.,-1.,0))),y=cross(z,x);\n    vec3 rd=mat3(x,y,z)*normalize(vec3(uv,1.+.5*tanh(sin(bpm)*5.)));\n    vec3 rp=ro;\n    vec3 light = vec3(1.,2.,-3.+timer);\n  vec3 acc=vec3(0.);\n    for(float i=0.;i++<128.;){\n      \n         vec2 d = sdf(rp);\n         if(d.y==2.){\n              acc+=vec3(.03,.04,.05)*exp(10.*-abs(d.x))/(20.-19.*exp(-3.*fract(fGlobalTime+rp.z)));\n              d.x = max(.001,abs(d.x));\n              \n           }\n         rp+=rd*d.x;\n         if(d.x <  .001){\n           \n             vec3 n = norm(rp,.001);\n             vec3 nl=  normalize(light-rp);\n              float dif = max(0.,dot(nl,n));\n              float spc = pow(max(0.,dot(rd,reflect(nl,n))),16.); \n             col = vec3(.75)*dif + spc;\n           \n           if(d.y==1.){\n               col=col*(col);\n               rd= reflect(rd,n);\n               rp+=rd*.1;\n              continue;\n             }\n             break;\n           }\n      }\n  \n  \n    // Output to screen\n    fragColor  = vec4(sqrt(col+acc),1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 34415,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/pornouzi/porno-uzi-endogenous-mushrooms"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}