{
    "Shader": {
        "info": {
            "date": "1610735890",
            "description": "hahahahah",
            "flags": 0,
            "hasliked": 0,
            "id": "3d3XW8",
            "likes": 0,
            "name": "volumetric sphere marching",
            "published": 3,
            "tags": [
                "raymarching",
                "pebbles",
                "everywhere"
            ],
            "usePreview": 0,
            "username": "Angramme",
            "viewed": 266
        },
        "renderpass": [
            {
                "code": "#define MIN_DIST .0001\n#define MAX_DIST 200.\n#define MAX_STEPS 800\n#define STEP_REDUCE .08\n\n\nfloat volume(vec3 p){\n    return smoothstep(.2, 1., textureLod(iChannel0, p, 0.).r);\n    /*float m = 1.;\n    for(float i=0.; i<9.; i++){\n        m = min(m,\n          textureLod(iChannel0, \n             .01*(p + vec3(\n                mod(i, 3.),\n                mod(floor(i/3.), 3.),\n                floor(i/9.))-1.),\n             0.).r);\n    }\n    return m;*/\n}\n\nfloat dist(vec3 p){\n    float plane = p.y + 1.;\n    float sphere = distance(p, vec3(0,sin(iTime)*.5,0))- .5 + volume(p*.4)*.8;\n    return min(plane, sphere*STEP_REDUCE);\n}\n\nvec3 normal(vec3 p){\n    vec2 eps = vec2(.001, 0);\n    return (vec3(\n        dist(p+eps.xyy),\n        dist(p+eps.yxy),\n        dist(p+eps.yyx)\n        ) - dist(p))/eps.x;\n}\n\nfloat trace(vec3 ro, vec3 rd){\n    float d0 = 0.;\n    for(int i=0; i<MAX_STEPS; i++){\n        vec3 p = ro + rd*d0;\n        float d = dist(p);\n        d0 += d;\n        if(d0 > MAX_DIST || abs(d) < MIN_DIST)break;\n    }\n    return d0;\n}\n\nfloat shadow(vec3 p, vec3 L, float ld, float k){\n    float d0 = 0.;\n    float sh = 1.;\n    for(int i=0; i<MAX_STEPS; i++){\n        vec3 p = p + L*d0;\n        float d = dist(p);\n        if(d < MIN_DIST)return 0.;\n        sh = min(sh, d*k/d0);\n        d0 += d;\n    }\n    return sh;\n}\n\nvec3 sky(vec3 rd){\n    float v = mix(.1, .9, smoothstep(1., 0., rd.y));\n    return vec3(v,v,1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.x;\n\n    vec3 col = vec3(0);\n    \n    float s = sin(iTime*.3);\n    float c = cos(iTime*.3);\n    \n    vec3 ro = vec3(c*5.,0,s*5.);\n    vec3 rd = normalize(vec3(uv, 1));\n    \n    rd.xz *= mat2(-s, -c, c, -s);\n    \n    float d = trace(ro, rd);\n    \n    if(d<MAX_DIST){\n\n        vec3 p = ro + rd*d;\n        vec3 n = normal(p);\n\n        //directional light\n        const vec3 L = normalize(vec3(1,.8,-1));\n        const vec3 lc = vec3(1,.95,.95);\n\n        //shadow\n        //float sh = shadow(p+n*MIN_DIST*2., L, 999., 8.);\n\t\t//float sh = 1.;\n        float sh = trace(p+n*MIN_DIST*4., L) > MAX_DIST ? 1. : 0.;\n        \n        //diffuse\n        col += max(0.,dot(L, n)) * sh * lc;\n        \n        //specular\n        col += pow(max(0.,dot(reflect(L, n), rd)), 8.) * sh * lc * .2;\n        \n        //sky\n        col += max(0.,dot(n,vec3(0,1,0))) * vec3(.1,.1,.8) * .1;\n\t\t\n    }else{\n        col = sky(rd);\n    }\n    \n    //gamma correction\n    const float gamma = 2.2;\n    col = pow(col, vec3(gamma));\n        \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}