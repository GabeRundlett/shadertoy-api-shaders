{
    "Shader": {
        "info": {
            "date": "1662397132",
            "description": "Yet another fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "ftycWt",
            "likes": 6,
            "name": "Fractal mosaic 11 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 371
        },
        "renderpass": [
            {
                "code": "#define fmod(x,y) mod(floor(x),y)\n\nvec2 f1(vec2 a){\n    return\n        fract(a)\n        //fract(a+floor(a.x-.5)/2.)\n    ;\n}\n\nvec2 triangle_wave1(vec2 a){\n    //a += .5;\n    //a /= (1. + fmod(min(a.x,a.y)/1.5,2.));\n\n    vec2 a2 = //change this constant to get other interesting patterns\n        vec2(1.,0.5)\n        //vec2(2.5,-1.)\n        //vec2(1.5,0.)\n        \n        //vec2(-2.,.5+mod(floor(a.x),2.))\n    ,\n    \n    a1 = a+a2;\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n    //a1 += (distance(floor(a1),round(a1)))/1.5;\n\n    return\n        abs(f1((a1)*(a2.x+a2.y))-.5)\n        //min(abs(fract((a1)*(a2.x+a2.y))-.75),abs(fract((a1+.5)*(a2.x+a2.y))-.5))\n    ;\n}\n\nvec2 triangle_wave(vec2 a){\n    return\n        triangle_wave1(a)\n        //triangle_wave1(a-.5)\n    ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 8.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    float scale = 1.5;\n    vec2 t2 = vec2(0.);\n    bool t3 = true;\n    vec2 uv1 = vec2(0.);\n    for(int k = 0; k < 6; k++){\n        //uv.x += float(int(uv.x*8.)<<2)/8.;\n        //uv += floor(vec2(uv.x,uv.y+.5)*2./1.5)/2.;\n\n        //a really interesting pattern:\n        //uv += floor(uv/1.5)/1.5;\n        \n        //uv += floor(uv+vec2(1.,.5))/1.5;\n        t3 =\n            uv.x < uv.y\n            //uv.x < uv.y && t2.x > t2.y || !t3\n            //uv.x < uv.y || !t3\n        ;\n        \n        //another awesome pattern (looks better zoomed out)\n        //if(t3){ uv = uv.yx;t2 = -t2.yx;}\n        \n        //uv.y += fmod(uv.y*2.,4.); //lace pattern\n        \n\n        uv =\n            abs(.5+uv+t2)+uv1;\n            //fract(.5+uv+t2)\n            //abs(uv+t2+1.-floor(t2.x-t2.y)*2.)\n            //abs(uv+t2*floor(uv.x-uv.y)*floor(t2.x-t2.y))\n            //abs(.5*sign(uv.y-uv.x)+uv+t2)\n            //abs(.5+uv+t2)*fract(uv/4.) //another interesting pattern\n        ;\n        \n        //uv += (distance(floor(uv),round(uv+.5)));\n\n        //uv *= sign(uv-uv.yx);\n        \n        \n        //if(uv.y>uv.x) uv = uv.yx;\n        t2 =\n            -triangle_wave(uv-.5)\n            //-triangle_wave(uv-.5+floor(uv.x+uv.y))\n            //-triangle_wave(uv-.5)/(.5+fmod(t2.x,2.))\n            //-triangle_wave(uv-1.5+fmod(t2.x/1.5,2.))\n        ;\n        //t2 /= 1. + fmod(t2.x/1.5,1.5)*.5;\n\n        //t2 -= float(!t3)/2.;\n        \n        //uv += floor(uv.y-uv.x);\n        \n        uv =\n            t2-triangle_wave(uv.yx)\n            //abs(.5+t2+triangle_wave(uv.yx))\n            //fract(uv)*fract(uv/2.)*fract(uv/4.)\n        ;\n        //uv /= 1. + fmod(uv.x/1.5,1.5)*.5;\n        //t2 *= length(uv);\n        //uv = fract(uv);\n        float c1 =\n            uv.x-uv.y\n            //abs(uv.x-uv.y)\n            //distance(uv,t2)\n            //uv.x*uv.y\n            //length(uv)\n        ;\n        //uv /= 1.+col;\n        \n        //uv.x += floor(uv.x-uv.y);\n        \n        col = col.yzx;\n        vec3 col1 = col;\n        if(t3 || uv.y < uv.x) col1 = abs(col.yzx-vec3(col.yz,c1));\n        if(!t3 || uv.y > uv.x) col1 = abs(col1-max(col,vec3(col.yz,c1)));\n        col = col1;\n        //col *= col+.5;\n        //if(t3 && uv.y < uv.x) col = vec3(col.yz,c1);\n        //uv1 += 1.5;\n        //if(t2.x>t2.y) col=col.yzx;\n        //if(uv.y<uv.x) col=col.yzx;\n    }\n    fragColor = vec4(min(col*2.,vec3(1.)),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define smod(x,y) floor(mod(floor(x)*floor(x),y))\n#define sqmod(x,y) floor(mod(floor(x)*floor(x),y*y)/y)\n\n#define fmod(x,y) mod(floor(floor((x))+floor((x)/7.)*7.),y)\n//#define fmod(a,b) mod(floor(a*sign(.5-mod(floor(a/7./5./b),2.))),b)\n//#define fmod(a,b) mod(mod(floor((a)),floor(1.+(a)/7.)),b)\n//#define fmod(a,b) mod(floor(a) + floor((a)/2.)*2.+floor((a)/4.)*4.+floor((a)/8.)*8.+floor((a)/16.)*16.,b)\n//#define fmod(x,y) mod(floor(floor(x)+floor((x)/7./7.)/7.),y)\n//#define fmod(x,y) mod(floor(x),y)\n#define fmod0(x,y) mod(floor(x)+floor((x)/4.)*4.,y)\n#define fmod1(x,y) floor(mod(floor(x)*y,y*y)/y)\n#define fmod2(x,y) mod(floor(x-floor((x)/y)),y)\n#define fmod3(x,y) mod(floor(x)*floor((x)/y),y)\n#define fmod4(x,y) abs(floor(mod(floor((x)),y)-y/2.))*2.\n#define fmod5(x,y) mod(floor((x)*2.-mod(x,y/2.)),y)\n#define fmod6(x,y) floor(sqrt(mod((x)*4.,y*y)))\n#define fmod7(x,y) mod(floor(y*((x)/y+floor((x)/y)/y)),y)\n\n#define fmax(x,y,z) max(fmod(x,z),fmod(y,z))\n\n#define fpow(x,y) pow(y,fmod(x,y))\n#define floor1(x) floor(x)*floor(mod((x)/2.,2.))\n#define powmod(x,y) mod(floor(pow(y,mod(floor(x)/y,y))),y)\n\n\nint gcd (int a, int b) {    // Euclid algorithm:   gcd(a,b) = gcd(b, a%b) ; gcd(a,0) = a\n    int c;             \n    while ( b>0 && (c = a%b) != a ) a=b, b=c; \n    return b==0 ? a : c;\n}\n\nfloat gcd(float a, float b){\n   return float(gcd(int(a),int(b)));\n}\n\nvec2 mainSound(int samp, float time){\n  \n  float tempo = 1.;\n  time /= tempo;\n  \n  //time = (time + floor(time*5.)/5.)/2.;\n  \n  //for(int i = 0; i < 5; i++){ time += fmod(floor(time*5.),2.); }\n  //for(int i = 0; i < 5; i++){ time += gcd(fmod(time+1.,10.),fmod(time+2.,10.)); }\n\n  \n  //time +=\n  //    fpow(time,4.) + fpow(time,3.) + fpow(time,2.)\n  //    floor(time*5.)/5.\n  //;\n  \n  //time = time*(1. + fmod(time*5.,2.))/2.;\n  \n  float s1 =\n      5.,\n      //5./(1.+fmod(time/2.,2.)), //varying tempo\n\n  s2 = 7.,\n  t=\n      time\n      //time + fmod(time,5.+fmod(time*5.,7.))\n      //time+floor(time*s1+floor(time/s1))*s1\n      //time+floor(time*s1)*s1\n      \n      //time/(1.+fmod(floor(time*s1)*floor(time*s1)/s1/s1,2.))/2.\n      //time /(1.+fmod(time/s1+floor(time*s1),2.))\n      //time/(1.+fmod(time/s2,2.))/(1.+fmod(time*s1,2.))\n      //time/(1.+fmod(time/s1,2.))\n  ,\n  m1 =\n      fmod(t/s1+s1,s2)\n      //fmax(t/s1+s1,t/s1,s2)\n      //fmod(floor(t*s1+floor(t/s1))+s1,s2)\n      //fmod(t/s1+floor(t*s1),s2)\n  ,\n  m4 =\n      fmod(t*s1+s1,s2)\n      //fmod(t*s1+fract(t*s1)+s1,s2)\n      //fmod(fract(t/s1)*s1+s1,s2)\n      //fmax(t*s1+s1,t*s1,s2)\n      //fmod(t*s1*(1.+fmod(gcd(t,s2),2.))+s1,s2)\n      //fmod(floor(t)*(floor(t*s1)+floor(t)),s2)\n      //fmod((t*s1)/s1+t+s1,s2)\n      //fmod(t*s1+floor(t/s1),s2)\n  ,\n  m3 =\n      //fmod((t+gcd(m1,m4))*(s1)/(m1+.5),s2);\n      fmod((t+m4)*s1/(m1+.5),s2);\n      //fmod((t+m1)*s1/(m4+.5),s2);\n  \n  //m1 = fmod(t/s1,s2),\n  //m3 = fmod(t*s1/abs(2.5-m1),s2);\n  \n  //t += m3/2.;\n  //t /= (1.+fmod(t/s1,2.)); //varying tempo\n  //t += floor(t*s1)/s1;\n \n  t *=\n      s1*s1\n      //s1*s1/2./(1.+fmod(floor(t*2.+1.)*floor(t/2.+1.),2.))/(1.+fmod(floor(t*2.)*floor(t/2.+1.),2.))\n      //s1*s1/2.*(1.+fmod(floor(t/2.*s1)/s1+t/2.,2.))/(1.+fmod(t/s1,2.))\n      //(1.+fmod(t/s1,2.))\n  ;\n  //t /= max(m1,m3)+1.;\n  \n  float m2 =\n      1. + fmod(t/s1,s1);\n      //1. + fmod(t/s1*sign(m4-m3),s1);\n      //1. + fmod(floor(t/(m3*s1+s1)),s1);\n      //1. + fmod(t/s1+floor(t/s1),s1);\n      //1. + fmod(t/s1,s2);\n      //1. + min(fmod(t/s1,s2),fmod(t/s1/2.,s1));\n      //1. + fmod(time,s1)\n  ;\n  //t /= max(m2,m1+m3+1.);\n  \n  float a=\n      //pow((1.-sqrt(fract(t/s1+m2/2.)/(1.+m1)))/4.,2.)\n      64.*pow((1.-sqrt(fract(t/s1)/(1.+m1)))/4.,2.)\n      //pow(fract(-t/s1)/(1.+m1)*4.,2.)\n\n      //sqrt((1.-sqrt(fract(t/s1)))/5.)*.2\n      //sqrt(fract(-t/s1)/5.))*.2\n\n      //sqrt((1.-sqrt(fract(t/s1))))*.2\n      //(log(1.-fract(-t/s1)/5.))*.2\n  ;\n  \n  //m3 = mod(floor(t/s1*2.),s2-m3+1.);\n  //m2 = mod(floor(t/s1/2.),s1-m2+1.);\n  \n  float nb = pow(2.,(m3+m2)/5.+7.)*tempo;\n\n  //nb *= max(fmod(m1,2.),max(fmod(m4,2.),fmod(m1,2.)));\n  return\n      abs(.5-vec2(fract(time*nb*.998*2.),fract(time*nb)))*a\n      //log(abs(.5-vec2(fract(time*nb*.998/2.),fract(time*nb)))*a)\n      //vec2(fract(time*nb*.998/m2*s1)*a,fract(time*nb/m2*s1)*a)\n  ;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}