{
    "Shader": {
        "info": {
            "date": "1529483674",
            "description": "Fork of [url]https://www.shadertoy.com/view/Mlc3Rl[/url]\n\nUses mipmaps/textureLod for long-range dependencies",
            "flags": 32,
            "hasliked": 0,
            "id": "MsKfzG",
            "likes": 52,
            "name": "Boids Predation",
            "published": 3,
            "tags": [
                "simulation",
                "mipmap",
                "predator",
                "boids",
                "prey",
                "ecology"
            ],
            "usePreview": 0,
            "username": "davidar",
            "viewed": 2074
        },
        "renderpass": [
            {
                "code": "//#define DEBUG\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = vec4(0,0,0,1);\n\n#ifdef DEBUG\n    if (fragCoord.x < iResolution.x/4.) {\n        vec4 data = textureLod(iChannel0, floor(fragCoord/16.)*16. / iResolution.xy, 4.);\n        vec2 vel = data.zw;\n\n        fragColor.rgb = .6 + .6 * cos(atan(vel.y,vel.x) + vec3(0,23,21));\n        fragColor.rgb *= 30. * length(vel);\n        \n        data = textureLod(iChannel1, fragCoord / iResolution.xy, 4.);\n    \tfragColor.rgb += 60. * length(data.zw);\n        return;\n    }\n#endif\n\n    vec4 data = texture(iChannel0, fragCoord / iResolution.xy);\n    vec2 vel = data.zw;\n\n    fragColor.rgb = .6 + .6 * cos(atan(vel.y,vel.x) + vec3(0,23,21));\n    fragColor.rgb *= 2. * length(vel);\n\n    data = texture(iChannel1, fragCoord / iResolution.xy);\n\n    for(int i = -2; i <= 2; i++) {\n        for(int j = -2; j <= 2; j++) {\n            vec4 data = texture(iChannel1, (fragCoord + vec2(i,j)) / iResolution.xy);\n            if(data.x > 0.001) {\n                fragColor.rgb += 0.4 * exp(-pow(distance(data.xy, fragCoord), 2.) / 2.);\n                return;\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Prey\n\n#define MAX_SPEED 0.9\n#define MAX_FORCE 0.05\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = vec4(0);\n    if(iFrame < 10) {\n        if(hash12(fragCoord) < 0.1) {\n            float q = 2.*PI * hash12(1. + fragCoord);\n            fragColor = vec4(fragCoord.xy, cos(q), sin(q));\n        }\n        return;\n    }\n    \n    vec4 data = texture(iChannel0, fragCoord/iResolution.xy);\n\n    if(data == vec4(0)) {\n        if (hash13(vec3(fragCoord, iFrame)) < 1e-4) {\n            data = vec4(fragCoord, 0, 0);\n        } else {\n            return;\n        }\n    }\n    \n    vec2 pos = data.xy;\n    vec2 vel = data.zw;\n\n    int nCount = 0;\n\n    vec2 alignment = vec2(0);\n    vec2 cohesion = vec2(0);\n    vec2 separation = vec2(0);\n\n    for(int i = -NEIGHBOR_DIST; i <= NEIGHBOR_DIST; i++) {\n        for(int j = -NEIGHBOR_DIST; j <= NEIGHBOR_DIST; j++) {\n            vec2 ij = vec2(i,j);\n            if(ij == vec2(0) || length(ij) > float(NEIGHBOR_DIST)) continue;\n\n            vec4 data2 = textureLod(iChannel0, fract((fragCoord + ij) / iResolution.xy), 0.);\n            if(data2.x > 0.001) {\n                vec2 pos2 = data2.xy;\n                vec2 vel2 = data2.zw;\n\n                if(distance(pos, pos2) < float(DESIRED_SEPARATION))\n                    separation += normalize(pos - pos2) / distance(pos, pos2);\n\n                if(distance(pos, pos2) < float(NEIGHBOR_DIST)) {\n                    alignment += vel2;\n                    cohesion += pos2;\n                    nCount++;\n                }\n            }\n\n            // nearby predators\n            data2 = textureLod(iChannel1, fract((fragCoord + ij) / iResolution.xy), 0.);\n            if(data2.x > 0.001) separation += normalize(pos - data2.xy);\n\n            // distant predators\n            vec2 coord = fragCoord + 16. * ij;\n            data2 = textureLod(iChannel1, fract(coord / iResolution.xy), 4.);\n            vec2 vel2 = data2.zw;\n            separation += normalize(pos - coord) * length(vel2);\n        }\n    }\n\n    if(cohesion != vec2(0)) cohesion = clamp_length(\n        MAX_SPEED * normalize(cohesion / float(nCount) - pos) - vel, MAX_FORCE);\n    if(alignment != vec2(0)) alignment = clamp_length(\n        MAX_SPEED * normalize(alignment) - vel, MAX_FORCE);\n    if(separation != vec2(0)) separation = clamp_length(\n        MAX_SPEED * normalize(separation) - vel, MAX_FORCE);\n\n    vel = clamp_length(vel + alignment + separation * 1.5 + cohesion, MAX_SPEED);\n    pos = mod(pos + vel, iResolution.xy);\n    fragColor = vec4(pos, vel);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = vec4(0);\n    for(int i = -1; i <= 1; i++) {\n        for(int j = -1; j <= 1; j++) {\n            vec4 data = texture(iChannel0, fract((fragCoord + vec2(i,j)) / iResolution.xy));\n            if(abs(data.x - fragCoord.x) < 0.5 && abs(data.y - fragCoord.y) < 0.5) {\n                fragColor = data;\n                return;\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Predators\n\n#define MAX_SPEED 1.2\n#define MAX_FORCE 0.1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = vec4(0);\n    if(iFrame < 10) {\n        if(hash12(fragCoord) < 0.001) {\n            float q = 2.*PI * hash12(1. + fragCoord);\n            fragColor = vec4(fragCoord.xy, cos(q), sin(q));\n        }\n        return;\n    }\n    \n    vec4 data = texture(iChannel0, fragCoord/iResolution.xy);\n\n    if(data == vec4(0)) {\n        if (length(hash33(vec3(fragCoord, iFrame))) < 0.015) {\n            data = vec4(fragCoord, 0, 0);\n        } else {\n            return;\n        }\n    }\n    \n    vec2 pos = data.xy;\n    vec2 vel = data.zw;\n\n    vec2 separation = vec2(0);\n\n    for(int i = -NEIGHBOR_DIST; i <= NEIGHBOR_DIST; i++) {\n        for(int j = -NEIGHBOR_DIST; j <= NEIGHBOR_DIST; j++) {\n            vec2 ij = vec2(i,j);\n            if(ij == vec2(0) || length(ij) > float(NEIGHBOR_DIST)) continue;\n\n            vec4 data2 = textureLod(iChannel0, fract((fragCoord + ij) / iResolution.xy), 0.);\n            if(data2.x > 0.001 && distance(pos, data2.xy) < float(DESIRED_SEPARATION))\n                separation += normalize(pos - data2.xy) / distance(pos, data2.xy);\n\n            // nearby prey\n            data2 = textureLod(iChannel1, fract((fragCoord + ij) / iResolution.xy), 0.);\n            if(data2.x > 0.001) separation -= normalize(pos - data2.xy);\n\n            // distant prey\n            vec2 coord = fragCoord + 16. * ij;\n            data2 = textureLod(iChannel1, fract(coord / iResolution.xy), 4.);\n            vec2 vel2 = data2.zw;\n            separation -= normalize(pos - coord) * length(vel2);\n        }\n    }\n\n    vel = MAX_SPEED * normalize(vel + MAX_FORCE * normalize(separation));\n    pos = mod(pos + vel, iResolution.xy);\n    fragColor = vec4(pos, vel);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = vec4(0);\n    for(int i = -2; i <= 2; i++) {\n        for(int j = -2; j <= 2; j++) {\n            vec4 data = texture(iChannel0, fract((fragCoord + vec2(i,j)) / iResolution.xy));\n            if(abs(data.x - fragCoord.x) < 0.5 && abs(data.y - fragCoord.y) < 0.5) {\n                fragColor = data;\n                return;\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// NEIGHBOR_DIST should be greater than DESIRED_SEPERATION, \n// otherwise you may not observe flocking behaviour.\n\n#define NEIGHBOR_DIST 6\n#define DESIRED_SEPARATION 4\n\n#define PI 3.14159265359\n\nvec2 clamp_length(vec2 v, float r) {\n    if(length(v) > r) return r * normalize(v);\n    return v;\n}\n\n// Hash without Sine\n// Creative Commons Attribution-ShareAlike 4.0 International Public License\n// Created by David Hoskins.\n\n// https://www.shadertoy.com/view/4djSRW\n// Trying to find a Hash function that is the same on ALL systens\n// and doesn't rely on trigonometry functions that change accuracy \n// depending on GPU. \n// New one on the left, sine function on the right.\n// It appears to be the same speed, but I suppose that depends.\n\n// * Note. It still goes wrong eventually!\n// * Try full-screen paused to see details.\n\n\n#define ITERATIONS 4\n\n\n// *** Change these to suit your range of random numbers..\n\n// *** Use this for integer stepped ranges, ie Value-Noise/Perlin noise functions.\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(.1031, .1030, .0973, .1099)\n\n// For smaller input rangers like audio tick or 0-1 UVs use these...\n//#define HASHSCALE1 443.8975\n//#define HASHSCALE3 vec3(443.897, 441.423, 437.195)\n//#define HASHSCALE4 vec3(443.897, 441.423, 437.195, 444.129)\n\n\n\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n        vec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n        vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n        p3  = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  2 out, 1 in...\nvec2 hash21(float p)\n{\n        vec3 p3 = fract(vec3(p) * HASHSCALE3);\n        p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n        vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 3 in...\nvec2 hash23(vec3 p3)\n{\n        p3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * HASHSCALE3);\n   p3 += dot(p3, p3.yzx+19.19);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n\n//----------------------------------------------------------------------------------------\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n        vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n//----------------------------------------------------------------------------------------\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n        p3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 1 in...\nvec4 hash41(float p)\n{\n        vec4 p4 = fract(vec4(p) * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n    \n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 2 in...\nvec4 hash42(vec2 p)\n{\n        vec4 p4 = fract(vec4(p.xyxy) * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 3 in...\nvec4 hash43(vec3 p)\n{\n        vec4 p4 = fract(vec4(p.xyzx)  * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 4 in...\nvec4 hash44(vec4 p4)\n{\n        p4 = fract(p4  * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}