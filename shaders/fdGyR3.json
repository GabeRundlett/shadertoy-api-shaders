{
    "Shader": {
        "info": {
            "date": "1655237232",
            "description": "A quick performance test designed to tank your FPS to see which operation is faster. \nif version is faster",
            "flags": 0,
            "hasliked": 0,
            "id": "fdGyR3",
            "likes": 1,
            "name": "PerfTest Hexgrid Algorithms",
            "published": 3,
            "tags": [
                "test",
                "hexagon",
                "performance",
                "branchless",
                "hex",
                "speed"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 200
        },
        "renderpass": [
            {
                "code": "/*\nTesting out different methods to make a Hexagonal Grid for perfromance. \nTo try this test for yourself, increase the \"repeat\" value to tank you fps \nuntil it goes well below 144fps. Then comment in the x value calculation\nfor the function you wish to test. \n\nThere's no one true winner here. If you need the ID values Shanes vec4 \nversion is fastest. If you don't then the BigWIngs if version is faster.\nBut try for yourself with the combination of values you need.\n\nIf you wish to learn how Hextiling works BigWIngs version has a great video \nexplaining how the math works (https://youtu.be/VmrIDyYiJBA).  \nIf you like to read more Shanes version is very well commented \n(https://www.shadertoy.com/view/Xljczw).\n*/\n\n#define sqrt3 \t\t1.7320508075\n#define half_sqrt3\t0.8660254037\n\nconst vec2 r = vec2(1, sqrt3); // 1, sqrt(3)\nconst vec2 h = vec2(0.5,half_sqrt3); // 1/2, sqrt(3) /2\n\n// Hexagonal Distanstance from the 0,0 coords\nfloat hexDist(vec2 p) {\n\tp = abs(p);   \n    return max(dot(p, h), p.x);\n}\n\n// From Amhall \"Cube Pixel Tetrahedron\" (https://www.shadertoy.com/view/7sXyRN)\n// Elegant, but slow, so use the others\nvec4 hexTile_lerp(vec2 uv) {\n    vec2 a = mod(uv, r)-h;\n    vec2 b = mod(uv-h, r)-h;\n\n    float d1 = dot(a,a);\n    float d2 = dot(b,b);\n\n    vec2 gv = mix(a, b, float(d2 < d1)); // Branch-free!\n    \n    //float eDist = hexDist(gv); // Edge distance\n    // float cDist = dot(gv, gv); // squared distance from center\n    vec2 id = uv-gv; // ID coords\n\n    return vec4(gv, id); // xy hex coords + z distance to edge\n}\n\n// From BigWIngs \"Hexagonal Tiling\" https://www.shadertoy.com/view/3sSGWt\n// If you need the ID use vec4 version\nvec4 hexCoords_if(vec2 uv) {   \n    vec2 a = mod(uv, r)-h;\n    vec2 b = mod(uv-h, r)-h;\n    \n    vec2 gv = dot(a, a) < dot(b,b) ? a : b; // Branch\n    \n    //float eDist = hexDist(gv); // Edge distance\n    //float cDist = dot(gv, gv); // squared distance from center\n    vec2 id = uv-gv; // ID coords\n    \n    return vec4(gv, id); // xy hex coords + z distance to edge\n}\n\n// From Shanes \"Minimal Hexagonal Grid\" https://www.shadertoy.com/view/Xljczw\n// This one always calculates the ID values, if you don't need those use if version\nvec4 HexCoords_vec4(vec2 p){\n    // hex centers\n    vec4 ab = vec4(p, p - vec2(.5, 1));\n    vec4 hC = floor(ab/r.xyxy) + .5;\n    // Centering the coordinates with the hexagon centers above.\n    vec4 h = vec4(p - hC.xy*r, p - (hC.zw + .5)*r);\n    \n    vec4 uvid = dot(h.xy, h.xy)<dot(h.zw, h.zw) ? vec4(h.xy, hC.xy) : vec4(h.zw, hC.zw + .5);\n    \n    //float eDist = hexDist(uvid.xy); // Edge distance.\n    //float cDist = dot(uvid.xy, uvid.xy); // Squared distance from center\n\n    //vec2 id = vec2(uvid.z, uvid.w*sqrt3); // square grid Id values otherwise use uvid.zw\n    return vec4(uvid);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y; //centered square UVs\n    vec2 subject = (uv* 2.) + (iTime * 0.2) + 100.; //some arbitrary motion\n    \n    // if you get around 144 fps use a higher repeat value\n    int repeat = 1; //3000 is enough for RTX2070\n    \n    vec4 test;\n    for(int i=0; i<repeat; i++)\n    {\n        vec2 a = subject + float(i); // permutation each iteration\n        \n        // use which ever you wish to test\n        //vec4 x = hexTile_lerp(a); //62fps \n        //vec4 x = hexCoords_if(a); //68fps \n        vec4 x = HexCoords_vec4(a); //70fps\n        \n        test += x; // each iteration adds to final result\n    }        \n    \n    fragColor = vec4(fract(test)); // Output to screen\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}