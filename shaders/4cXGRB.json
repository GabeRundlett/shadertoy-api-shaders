{
    "Shader": {
        "info": {
            "date": "1703170965",
            "description": "tiles-003",
            "flags": 0,
            "hasliked": 0,
            "id": "4cXGRB",
            "likes": 3,
            "name": "tiles-003",
            "published": 3,
            "tags": [
                "2d",
                "tiles",
                "mozaic"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 117
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n//tiles-003\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n//21-dic_2023\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(6.0*antialiasing(0.5),b,d)\n#define PI     3.14159265\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nvec3 DrawFigSolo(vec3 pColObj, vec3 colOut, float distObj ) \n{  colOut = mix(colOut,pColObj ,S( distObj,0.0)); return colOut; }\n\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nvec3 cuadro(vec2 p, vec3 col)\n{\nvec2 pos, med,pr;\nfloat ang;\nfloat d1a,d1b,d1c, d2b,d2c;\n    \npos=vec2(-0.9,-0.4);\nmed=vec2(0.75, 0.75);\nang = 135. * PI / 180.0;\npr = Rotate(p- pos, med/2.0, ang);\nd1a = sdTriangleIsosceles(pr, med);\ncol = DrawFigSolo(vec3(0.4), col, d1a);\n\n\npos=vec2(-0.45,-0.25);\nmed=vec2(0.35, 0.35);\nang = 135. * PI / 180.0;\npr = Rotate(p- pos, med/2.0, ang);\nd1b = sdTriangleIsosceles(pr, med);\ncol = DrawFigSolo(vec3(0.95), col, d1b);\n\n\npos=vec2(-0.24,-0.15);\nmed=vec2(0.155, 0.155);\nang = 135. * PI / 180.0;\npr = Rotate(p- pos, med/2.0, ang);\nd1c = sdTriangleIsosceles(pr, med);\ncol = DrawFigSolo(vec3(0.05,0.0,0.0), col, d1c);\n\n///----------cuadro inferior\npos=vec2(0.12,-0.45);\nmed=vec2(0.75, 0.75);\nang = 315. * PI / 180.0;\npr = Rotate(p- pos, med/2.0, ang);\nfloat d2a = sdTriangleIsosceles(pr, med);\ncol = DrawFigSolo(vec3(0.98), col, d2a);\n\npos=vec2(0.05,-0.25);\nmed=vec2(0.35, 0.35);\nang = 315. * PI / 180.0;\npr = Rotate(p- pos, med/2.0, ang);\nd2b = sdTriangleIsosceles(pr, med);\ncol = DrawFigSolo(vec3(0.05), col, d2b);\n\n\npos=vec2(0.0,-0.16);\nmed=vec2(0.15, 0.15);\nang = 315. * PI / 180.0;\npr = Rotate(p- pos, med/2.0, ang);\nd2c = sdTriangleIsosceles(pr, med);\ncol = DrawFigSolo(vec3(0.95), col, d2c);\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    uv*=vec2(4.0,5.0+2.0*sin(iTime));\n    vec2 iuv=floor(uv);\n    vec2 fuv=fract(uv)-0.5;\n    uv=fuv;\n    vec2 p=fuv;\n    vec3 col=vec3(1.0);\n    col=cuadro(p,col);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}