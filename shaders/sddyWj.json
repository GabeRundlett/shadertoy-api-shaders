{
    "Shader": {
        "info": {
            "date": "1654096845",
            "description": "marching cube/square/triangle is sensitive to phase, i.e. offset of the sampling grid.\n→ averaging of 9 different offsets so that grey shows the variance.\nClick for outlines instead.",
            "flags": 0,
            "hasliked": 0,
            "id": "sddyWj",
            "likes": 11,
            "name": "marching triangle on img: phase",
            "published": 3,
            "tags": [
                "short",
                "marchingsquare",
                "marchingcube",
                "vectorization"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 398
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/7d3yWS\n// variant of https://shadertoy.com/view/fddyRs\n// using marching triangles https://www.shadertoy.com/view/fdccDB\n int lod = 5;\n float thresh = .6;\n \n#define T(U)  textureLod(iChannel0, U*R.y/R , float(lod-3) ).r // or lod=0 for fun\n#define G(uv) ( ( (floor(U) + uv) *mat2(1,.5,0,.86) +d ) *Z/1024. )\n#define S(v) smoothstep( -.8,.8,(iMouse.z>0.?abs(v):v)/fwidth(v) ) // antialiasing draw\n\nfloat vector(vec2 U, vec2 d )\n{\n    float Z = exp2(float(lod));                           // scaling\n    vec2  v, R = iResolution.xy; \n    U *= 1024./Z/R.y;\n    d *= Z/288.;\n    U -= d;\n    float O = 0.;                                         // --- marching triangle -------\n    U *= mat2(1,-1./1.73, 0,2./1.73);                     // conversion to\n    vec3 g = vec3(U, 1.-U.x-U.y);                         // hexagonal coordinates\n\tg = fract(g);                                         // diamond coords\n    bool side = length(g)>1.;                             // tri: which diamond half\n \n    vec3 V = side ? vec3( T(G(vec2(1))), T(G(vec2(0,1))), T(G(vec2(1,0))) ) // samples at corder\n                  : vec3( T(G(vec2(0))), T(G(vec2(1,0))), T(G(vec2(0,1))) );\n    if (side) g = 1.-g;                                   // barycentric coordinates\n    O = S( (1.-g.x-g.y)*V.x + g.x*V.y + g.y*V.z - thresh );\n    return O;\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{   \n    O-=O;\n    for ( int k=0; k<9; k++ )\n        O += vector( U, vec2(k%3-1, k/3-1)*2. ) /9.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}