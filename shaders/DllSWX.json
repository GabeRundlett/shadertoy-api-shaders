{
    "Shader": {
        "info": {
            "date": "1675425926",
            "description": "c bo",
            "flags": 0,
            "hasliked": 0,
            "id": "DllSWX",
            "likes": 0,
            "name": "Flower - carla",
            "published": 3,
            "tags": [
                "flower"
            ],
            "usePreview": 0,
            "username": "carlito",
            "viewed": 148
        },
        "renderpass": [
            {
                "code": "// CARLA VERDUCI\n// partiel 1\n\nvec3 opRep( in vec3 pos, in vec3 c)\n{\n    return mod(pos+0.5*c,c)-0.5*c;\n}\n\n\nfloat sdSphere( vec3 pos, float s )\n{\n  return length(pos)-s;\n}\n\nfloat sdSphere1( vec3 pos, float t )\n{\n  return length(pos)-t;\n}\n\nvec2 rot(vec2 st, float a)\n{\n    return st * mat2(cos(a), -sin(a),\n                    sin(a), cos(a));\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n    \nfloat map(vec3 pos) {\n    float v = 0.0;\n    \n    vec3 spherePos = pos;\n    spherePos.x += sin(pos.y+iTime);\n    \n    \n    float sphereMB = sdSphere(pos+vec3(0.0, 0.0, 0.0), 2.0);\n    float sphereMM = sdSphere1(spherePos+vec3(0.0, -1.0, 0.0), 1.0);\n    \n    pos = opRep(pos, vec3(1.5));\n    return (length(pos)-0.4) + (sphereMM);\n    \n    v = opSmoothUnion(sphereMM, sphereMB, 0.5);\n    \n    return v;\n}\n    \n\nfloat CastRay(vec3 ro, vec3 rd){\n    float contact = 0.0;\n    for(int i=0; i<64; i++)\n    {\n        float ray= map(ro+rd*contact);\n        if(ray < (0.0001*contact))\n        {\n            return float(i)/32.;\n        }\n        contact +=ray;\n    }\n    return -1.0;\n}\n\nvec3  render(vec3 ro, vec3 rd){\n    float contact = CastRay(ro, rd);\n    vec3 col = vec3(0.0);\n    \n    \n    if(contact == -1.0){\n        col = vec3(0.0);}\n    else {\n        col = vec3(1.0-contact);}\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.*(fragCoord/iResolution.xy)-1.;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    vec3 pos = vec3 (0.7,0.5,-3.);\n    vec3 dir = normalize(vec3(uv,1.));\n    \n    float shad = 1.;\n    \n    for (int i=0;i<60;i++)\n    {\n        float d = map(pos);\n        if (d<0.001)\n        {\n            shad = float(i)/64.;\n            break;\n        }\n        pos += d*dir;\n    }\n    \n    vec3 cameraPos = vec3(-0.5, 0.0, 2.0*iTime-5.0);\n    vec3 cameraTar = vec3(-0.5, 0.0, 2.0*iTime);\n    \n    cameraPos.xz = rot(cameraPos.xz, iTime);\n    \n    vec3 forward = normalize(cameraTar - cameraPos);\n    vec3 right = normalize(cross(vec3(0.0, -1.0, 0.0), forward));\n    vec3 up = normalize(cross(right, forward));\n    vec3 viewDir = normalize(uv.x * right + uv.y * up +2.0 * forward);\n\n    vec3 col = render(cameraPos, viewDir) + vec3(1.0 - shad) * vec3(1.1, 1.0, 1.5) -0.3 + 0.2*cos(iTime) ;\n    \n    //vec3 col = vec3(1.0 - shad) + 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4))* vec3(0.3, 0.5, 0.2);\n    vec3 col2 = vec3(1.0 - shad) * vec3(1.1, 1.0, 1.5) -0.3 + 0.2*cos(iTime);\n\n    fragColor = vec4(col2,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}