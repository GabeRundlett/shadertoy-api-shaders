{
    "Shader": {
        "info": {
            "date": "1528714030",
            "description": "ETC1 and ETC2,(4bpp),[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression] Ericsson Texture Compression [/url]\nBaboon is also one of classic standard test image.:)\nHere used GPU Texture Compression is called ETC2.and it include ETC1.",
            "flags": 32,
            "hasliked": 0,
            "id": "4sKBD1",
            "likes": 11,
            "name": "Baboon (ETC2/ETC1) ",
            "published": 3,
            "tags": [
                "compression",
                "image",
                "decode",
                "etc1",
                "etc2"
            ],
            "usePreview": 0,
            "username": "834144373",
            "viewed": 1059
        },
        "renderpass": [
            {
                "code": "/********************************************\n    Baboon (ETC2/ETC1).glsl webgl2.0 Created by 834144373\n    2018.6.11\n\tPS：834144373 is TNWX or 恬纳微晰 or 祝元洪\n*********************************************/\n/*\n\tThis \"Baboon\" Texture Compression technology is used by ETC2(ETC1)\n\tAnd it's also 4bpp!\n\t1. BufA,BufB is fast store full 16bit float into 32bit float buffer,\n\t(note: here use 16bit per component,because ETC2 is not custom design)\n\t2. BufC is ETC2 and ETC1 Decoder,\n\t3. Image is show result.\n\nIf you want to know more about GPU Texture Compression,\n\t\tthe below Texture Compression Can help you.:)\n------------------------------------------------------------------------\n------------------>All About Image Decompresion<------------------ \n\t\t\thttps://www.shadertoy.com/playlist/7scBzN\n------------------------------------------------------------------------\nETC2 and ETC1  4bpp : https://www.shadertoy.com/view/4sKBD1 by 834144373 (higher PSNR)\nS3TC(custom)   4bpp : https://www.shadertoy.com/view/XsycRW by 834144373\nATC            4bpp : https://www.shadertoy.com/view/lt2fRz by 834144373\nDXT1           4bpp : https://www.shadertoy.com/view/MtBfRR by 834144373\nBC4            4bpp : https://www.shadertoy.com/view/Xlffz2 by 834144373\nShaderToyTC I  1bpp : https://www.shadertoy.com/view/MtyGzV by 834144373\nPVRTC          4bpp : https://www.shadertoy.com/view/ltV3zD by 834144373\nYUV Special    2bpp : https://www.shadertoy.com/view/XlGGzh by 834144373\n...more Confidentiality Texture Compression will be coming soon and GIF!!!\n------------------------------------------------------------------------\n\nNode : Yes! You didn't read the wrong words!\n       more Confidentiality Texture Compression will be coming soon!!!\n\t   Crack Crack and Crack!!!\n\n----->hum...but it seems that I have no more sparetime to...:( \n*/\n\n//----->And here special super thanks for FabriceNeyret2 debug (I use clamp with wrong)<--------\n\nvoid mainImage( out vec4 c, in vec2 u )\n{\n \n    c -= c ;\n    vec3 R = iResolution;\n\tu -= R.xy*vec2(0.27,0.1);\n    u /= R.y*R.xy/256.*1.6;\n    if(u.x>0.&& u.y>0.){\n\t\tc = texture(iChannel0,u);\n    \tvec4 highFrequency1 = c - texture(iChannel0,u,2.);\n    \tvec4 highFrequency2 = texture(iChannel0,u,2.) - texture(iChannel0,u,3.);\n        c = c + highFrequency1 + highFrequency2*0.5;\n    }\n    else \n        c = vec4(1./3.);\n}\n/*\n\t------------------Shader Story------------------\n\tAll just cost 1.5 days,hum...When I am planning to study some software,\n\t\n\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "highp ivec2 SV_DispatchThreadID = ivec2(0,0);\nhighp int Double_pixelID = 0;\nhighp vec4 col = vec4(0.,0.,0.,0.);\nint i = 0;\n//pass !\nvoid A(uvec4 data){\n    \n    if(Double_pixelID == i++){\n        if((SV_DispatchThreadID.x & 0x1) == 0){\n        \tcol.xy = unpackUnorm2x16(data.s);\n    \t\tcol.zw = unpackUnorm2x16(data.t);\n        }\n        else{\n        \tcol.xy = unpackUnorm2x16(data.p);\n    \t\tcol.zw = unpackUnorm2x16(data.q);\n        }\n    }\n}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    SV_DispatchThreadID = ivec2(floor(U-0.5));\n    if(SV_DispatchThreadID.x >= 32 || SV_DispatchThreadID.y >= 32){\n    \tC = vec4(1./3.);\n        //return;\n    }\n    if(iFrame > 2){\n    \tC = texture(iChannel0,U/iResolution.xy);\n        //discard;\n    }\n    //1个像素存一个数据块\n    //16 x 32, 16为其中2个像素存2个块数据\n    //像素ID编号\n    Double_pixelID = (SV_DispatchThreadID.x>>1) + (SV_DispatchThreadID.y<<4); \n    //-------------------------------------------\n    A(uvec4(0x83827B63u,0x84495D5u,0x43888979u,0x11151995u));\n\tA(uvec4(0x43908979u,0x99191115u,0x438B8B73u,0xAFD29DDDu));\n\tA(uvec4(0x638E8880u,0x1D15D19Fu,0x43687972u,0x9E115155u));\n\tA(uvec4(0x25456767u,0xB2249D5Du,0x27395A62u,0x9AA355DDu));\n\tA(uvec4(0x4B416272u,0x24819D17u,0x6B5A8A99u,0x1DE81D11u));\n\tA(uvec4(0x638AAAB1u,0x1591DDD5u,0x4393A3A3u,0x33331951u));\n\tA(uvec4(0x4393A2A3u,0x73B31191u,0x63A1A8B1u,0x559991DDu));\n\tA(uvec4(0xA39299A3u,0x44489155u,0x479090AAu,0x11771191u));\n\tA(uvec4(0xA38A98AAu,0x4CC41911u,0x4799A0B3u,0x9919DD99u));\n\tA(uvec4(0xA38B9AABu,0x8059D5u,0x6398AFB0u,0x11511199u));\n\tA(uvec4(0x638BA9B1u,0x59151991u,0x6383A9B8u,0x119111D1u));\n\tA(uvec4(0xAA749E98u,0x1F1111u,0x473B7A7Bu,0x6A511175u));\n\tA(uvec4(0x4739636Bu,0xA2D811D1u,0x27325353u,0x5331D555u));\n\tA(uvec4(0x44335555u,0x99ED3311u,0x43485959u,0x5089FD57u));\n\tA(uvec4(0x47495959u,0x1093D119u,0x475A6962u,0xF1DD15FDu));\n\tA(uvec4(0x274B4B52u,0x12391DD5u,0x26414949u,0xFF171199u));\n\tA(uvec4(0x6909881u,0x3331D4FBu,0x28F9081u,0xB8310200u));\n\tA(uvec4(0xC705274Bu,0x997355A7u,0x21999A89u,0x14E45CC5u));\n\tA(uvec4(0x3879089u,0x2F9100B9u,0x76F8081u,0xFCE800ECu));\n\tA(uvec4(0x22487778u,0xDE9410A7u,0x27426272u,0x37E3C47Bu));\n\tA(uvec4(0x5798A8F2u,0x979E7F01u,0x4383A9B0u,0x1407704u));\n\tA(uvec4(0xA3BBBBF3u,0x33B67786u,0x7A8B7B7u,0xCEB121C0u));\n\tA(uvec4(0x7ACACBEu,0x5B628B3u,0x278C94B9u,0x8DAEA8FEu));\n\tA(uvec4(0x217485BCu,0x455B22A2u,0x27757DBAu,0x912CE872u));\n\tA(uvec4(0x27757DBAu,0x70D1EE28u,0x86B876F3u,0x106FA170u));\n\tA(uvec4(0x278D95B6u,0x9E13EE86u,0x467B8298u,0x9F4EC3Eu));\n\tA(uvec4(0x27979697u,0x1F37E0E6u,0x7AFB4ADu,0xBADBEB3Bu));\n\tA(uvec4(0x42969891u,0x1788801Fu,0x27719F9Fu,0x5C9613F8u));\n\tA(uvec4(0x2665878Eu,0xF0900C36u,0x3517A7Au,0xAC4B07FCu));\n\tA(uvec4(0x457777u,0x5E06C03Fu,0x3506969u,0xD80EF520u));\n\tA(uvec4(0x64B5B62u,0xBCC1320Fu,0x23777F70u,0x90748E79u));\n\tA(uvec4(0x23636362u,0x4DA45794u,0x275B5A59u,0x82897013u));\n\tA(uvec4(0x39FA091u,0x9FBABC5Fu,0x28FA79Fu,0x61087357u));\n\tA(uvec4(0x276A7A1u,0x180BD1Eu,0x785A69Fu,0x2C02E332u));\n\tA(uvec4(0x2769F98u,0xB87032F6u,0x466C9DADu,0xC030FF39u));\n\tA(uvec4(0x2C567788u,0xF0848E31u,0x2658788Au,0x244B9553u));\n\tA(uvec4(0x2381A0B7u,0xCF042F95u,0x7B7B0B7u,0x817982u));\n\tA(uvec4(0x3B7BEB6u,0xC6A0EA3Au,0x2A9998A1u,0x11482C76u));\n\tA(uvec4(0x49797BBu,0x2AF13770u,0x226C75BBu,0x90A91E67u));\n\tA(uvec4(0x35361D7u,0x7FE87783u,0x2B636BDEu,0x5182FF10u));\n\tA(uvec4(0x2A6B1C6Bu,0x759F7367u,0x37179C9u,0x589D47DCu));\n\tA(uvec4(0x57C6871Cu,0x30F41778u,0x4A7A79A7u,0x79C5830Eu));\n\tA(uvec4(0x48878798u,0x460AF897u,0x2A7A7380u,0xEC703C81u));\n\tA(uvec4(0x2E727169u,0x4B185800u,0x781908Fu,0x28B10C3Du));\n\tA(uvec4(0x77A9190u,0xA321140u,0x27639190u,0xA82B34B3u));\n\tA(uvec4(0x7517A81u,0xA9386272u,0x25F7F87u,0x9CEC31F0u));\n\tA(uvec4(0x2526A70u,0x82133747u,0x25B7171u,0x6B311F81u));\n\tA(uvec4(0x22787870u,0x1983C30u,0x26808777u,0x100739Cu));\n\tA(uvec4(0x390A199u,0x8891C47u,0x387A0A0u,0x8EB82073u));\n\tA(uvec4(0x2276A0A3u,0xA409CE39u,0x264A9EB5u,0x18307080u));\n\tA(uvec4(0x224989A0u,0x179A40EFu,0x22488FA7u,0x13609841u));\n\tA(uvec4(0x465B8198u,0x10A37173u,0x77989A0u,0x1F421E91u));\n\tA(uvec4(0x397A7AFu,0xAAA4C6EBu,0x2BAFAFA7u,0x383F8E30u));\n\tA(uvec4(0x5292999Au,0x30027367u,0x67A2A2B1u,0x1804756Eu));\n\tA(uvec4(0x238B8ABEu,0xA1FD8A81u,0x278B8ABDu,0x611619Du));\n\tA(uvec4(0x23A091B6u,0x8E541991u,0x7AEA6B6u,0x65701B89u));\n\tA(uvec4(0x26ACA4BEu,0x88CF8908u,0x79E96BFu,0x89E3BC1Fu));\n\tA(uvec4(0x435C0D55u,0xCC81B913u,0xA6BA77F3u,0x2D82EF7Du));\n\tA(uvec4(0x438A8A9Bu,0x6E1D0034u,0x2E9C94A4u,0x1FB0B136u));\n\tA(uvec4(0x4A808087u,0x7D15013Eu,0x2B968E7Fu,0x69AF906u));\n\tA(uvec4(0x27899F97u,0x160407Fu,0x23829998u,0x3CE40376u));\n\tA(uvec4(0x26779F9Fu,0xAA0A7336u,0x7597980u,0x1F182050u));\n\tA(uvec4(0x7597171u,0x1C66Cu,0x2627970u,0x2B00D718u));\n\tA(uvec4(0x2798170u,0x47D01F1Fu,0x3808170u,0x2771E813u));\n\tA(uvec4(0x38FB0B1u,0x110C97Du,0x27EA8B8u,0x282C1663u));\n\tA(uvec4(0x366A0BAu,0xB089FFCFu,0x648A7C7u,0x357B78F3u));\n\tA(uvec4(0x24896AEu,0x30734574u,0x264E869Fu,0x6C15F0CCu));\n\tA(uvec4(0x4B6F97A7u,0x49181F00u,0x688A6B6u,0xD23139CCu));\n\tA(uvec4(0x4B9F9F98u,0x8CC001C8u,0x269B9A92u,0x5FACBD33u));\n\tA(uvec4(0x27B7B7AFu,0xF8A03A8u,0x49A7A7AAu,0xD8222EAu));\n\tA(uvec4(0x458585ADu,0xE408F06Eu,0x217475BEu,0xF25DEE2Eu));\n\tA(uvec4(0x77B755F9u,0x10012152u,0x235E5FD3u,0xC2402FE8u));\n\tA(uvec4(0x9B7A076Bu,0xFE8FECEEu,0x46E565F9u,0xFE8EFECu));\n\tA(uvec4(0xAB6A0C54u,0x993CCFCEu,0x2B978899u,0xF8B1EF88u));\n\tA(uvec4(0x2BA6A5B4u,0x6DE0EE01u,0x27A1A0BFu,0xB8A1BC79u));\n\tA(uvec4(0x4A9D9CA4u,0x8C25D37Eu,0x6E7A7171u,0x6B39138Cu));\n\tA(uvec4(0x26989282u,0xC4833C63u,0x3839991u,0x2399A760u));\n\tA(uvec4(0x27638B92u,0x3185E666u,0x2675979Fu,0xCBA5077u));\n\tA(uvec4(0x3617A79u,0xC8C010D1u,0x637787EBu,0xDFCDE00Eu));\n\tA(uvec4(0x2728878u,0x82E23FE0u,0x22798878u,0xCD1723u));\n\tA(uvec4(0x377B0B9u,0x24008CF0u,0x276B0C0u,0x68000C77u));\n\tA(uvec4(0x2255AEC8u,0x30A6F20Eu,0x27479DC6u,0x4C8223FEu));\n\tA(uvec4(0x24188AEu,0xAE6981F8u,0x2A658F99u,0x89A00C37u));\n\tA(uvec4(0x265B89A8u,0x89ED45CCu,0x47889098u,0x10C24090u));\n\tA(uvec4(0x4AA0999Fu,0x40F0E610u,0x2BB5B5A5u,0x6EA001FCu));\n\tA(uvec4(0x9B9966F3u,0x4D107E17u,0x66C643FAu,0x17008E21u));\n\tA(uvec4(0x33D4FE9u,0x11090F23u,0x32040F0u,0x10002803u));\n\tA(uvec4(0x57D543FAu,0xCEF121u,0x23E48F0u,0x600EF70u));\n\tA(uvec4(0x23F454FAu,0x88407737u,0x7B0C447Au,0x508A6F46u));\n\tA(uvec4(0xF7155878u,0x4CC95F48u,0xA3720753u,0x6FB3EF8Cu));\n\tA(uvec4(0x2A7A7278u,0x3690A4C9u,0x4B958D85u,0x4A5392ECu));\n\tA(uvec4(0x29898898u,0x2F6F4E00u,0x4A918896u,0xB0CD3F01u));\n\tA(uvec4(0x4F948C7Du,0x3F19800Cu,0x2AEA891u,0xE0869E1Cu));\n\tA(uvec4(0x296A8A0u,0x314837D9u,0x76AA0A0u,0x3B415B9u));\n\tA(uvec4(0x20668787u,0x4398E8C2u,0x25A6A69u,0x13E32C0Bu));\n\tA(uvec4(0x1778877u,0x14FF4F00u,0x27A917Au,0x34003EA3u));\n\tA(uvec4(0x26DB7C8u,0x3B297304u,0x357B7C9u,0x50A8308u));\n\tA(uvec4(0x24FA0C2u,0x9F420F1u,0xA3A97C6u,0x7FF090FBu));\n\tA(uvec4(0x46407990u,0x6CB40E81u,0x26397A8Bu,0xDF104046u));\n\tA(uvec4(0x4673A8C6u,0x8C5ACF99u,0x23939399u,0x4C2F719Cu));\n\tA(uvec4(0x4FA59D95u,0x1A4103C2u,0x4F878578u,0x89218EB9u));\n\tA(uvec4(0xFFF35C4Cu,0x944A6648u,0x23848E9u,0x88800077u));\n\tA(uvec4(0xFB0C447Au,0x128A774Au,0x33948F6u,0xCCD511B1u));\n\tA(uvec4(0x214656EDu,0x9E60F00u,0x326BF272u,0x31FFCC08u));\n\tA(uvec4(0x35151E8u,0x8220904u,0x52E554FAu,0x44058840u));\n\tA(uvec4(0x127AF27Au,0xCF0A10F1u,0xF20C487Cu,0x45E9874Cu));\n\tA(uvec4(0x777765F3u,0xD330E5u,0x685766Eu,0x9B6CBFD2u));\n\tA(uvec4(0x6B7F7E76u,0x9080A67Fu,0x4F8F878Du,0x560983ECu));\n\tA(uvec4(0x48787877u,0xF4511049u,0x22989989u,0xA244866Cu));\n\tA(uvec4(0x939AA915u,0x86D60680u,0x277B9888u,0x771000F0u));\n\tA(uvec4(0x7637978u,0x1F4411FEu,0x6627169u,0xC030C00Fu));\n\tA(uvec4(0x2788979u,0x8496779Bu,0x22809080u,0x10CF0u));\n\tA(uvec4(0x267B1C9u,0x9108CE3Cu,0x340AAD8u,0x1289D0DDu));\n\tA(uvec4(0x338A1D1u,0x6BF070F5u,0x244396C8u,0xF08EFEF0u));\n\tA(uvec4(0x263A6372u,0x74E5680Cu,0x264B8999u,0xB1748339u));\n\tA(uvec4(0x4255F354u,0xB3A9ECC4u,0x229FA69Eu,0x88DF6694u));\n\tA(uvec4(0x6D767666u,0x158888ACu,0x2465555Au,0x950672FFu));\n\tA(uvec4(0x33F48E1u,0xB10FF0Cu,0x73E655FAu,0x20512073u));\n\tA(uvec4(0x27466EFu,0x3D8B3980u,0x293344DCu,0x1BE8C813u));\n\tA(uvec4(0x53D654FAu,0x1183237Cu,0x65E67E6u,0x89EF1310u));\n\tA(uvec4(0x26475EE7u,0x6DFB638Cu,0x34951F7u,0x88A80873u));\n\tA(uvec4(0x46F565FAu,0x33F37777u,0x32949F0u,0x224084C8u));\n\tA(uvec4(0x2F0E4A7Cu,0x46E83775u,0x269C8676u,0x5DC67FB3u));\n\tA(uvec4(0x2687706Eu,0x9425758Au,0x26635B52u,0xABC95065u));\n\tA(uvec4(0x2A6B635Bu,0xB8462092u,0x26918971u,0x1A31CCC0u));\n\tA(uvec4(0x7909F87u,0x1130AA32u,0x7798887u,0x46A401B8u));\n\tA(uvec4(0x27767E77u,0x489BA99u,0x3777F77u,0x9492BF28u));\n\tA(uvec4(0x270877Fu,0x8219E30Cu,0x3708880u,0x86376F80u));\n\tA(uvec4(0x250A9D0u,0x2B410C29u,0x24FB8D8u,0x2196EB3u));\n\tA(uvec4(0x638B7D8u,0x3CCA81F8u,0x64086ACu,0x81F1F0F6u));\n\tA(uvec4(0x46497070u,0x2144CB7Du,0x226A8A8Au,0x741C06A0u));\n\tA(uvec4(0x228BA2A1u,0x30B64E9Du,0x2E9CA495u,0x845120E4u));\n\tA(uvec4(0x476F6757u,0x41804417u,0x2075655Au,0x13CF3DFFu));\n\tA(uvec4(0x22848E9u,0x77DFu,0x2A4757E4u,0xA0B389C8u));\n\tA(uvec4(0x47D53214u,0xB180A249u,0x414857CDu,0xAD234504u));\n\tA(uvec4(0x96D766F9u,0x8F26E85u,0xC26B0773u,0xC88877EEu));\n\tA(uvec4(0x454857CDu,0x37920050u,0x4F414BAAu,0xA9556346u));\n\tA(uvec4(0x464050C3u,0x55914404u,0x33A52E9u,0x4B23CCC4u));\n\tA(uvec4(0x36053E7Eu,0x116B3F75u,0x3998068u,0xBCA6FF21u));\n\tA(uvec4(0x6807058u,0x54AE3B63u,0xA817962u,0xBC922EBBu));\n\tA(uvec4(0x268F7F6Fu,0x3239999u,0x23968F77u,0x1800A902u));\n\tA(uvec4(0x238D9C7Eu,0xECA622F2u,0x276F7E77u,0x1067077u));\n\tA(uvec4(0x661776Fu,0xF4039ACDu,0x2686961u,0x6D9C9AC0u));\n\tA(uvec4(0x2617169u,0xCB040E4Du,0x23768F87u,0x580882FAu));\n\tA(uvec4(0xA26D066Du,0x8B42EECEu,0x248B9D8u,0x618CF9Du));\n\tA(uvec4(0x2657BDD8u,0x10B131F3u,0x468784F3u,0x905F60BCu));\n\tA(uvec4(0xA416766u,0xFC39738Eu,0x2B729F96u,0xBF92F00u));\n\tA(uvec4(0x2290AFA7u,0x62BD77C4u,0x2C869686u,0x1361C0E0u));\n\tA(uvec4(0x465B5342u,0x169AE68Eu,0x86565514u,0x3BC4CC0Au));\n\tA(uvec4(0xAA42F26Au,0xF7390C00u,0x3273F26Au,0xDD17CC66u));\n\tA(uvec4(0x276C6DDBu,0x59189E8u,0xC26BF272u,0xCC0D1101u));\n\tA(uvec4(0x24A51EFu,0x71800Cu,0x35058E8u,0x10072F5u));\n\tA(uvec4(0x66E653FAu,0x18011911u,0x86D853FAu,0x30232132u));\n\tA(uvec4(0x76C76E3u,0xAB99DCFDu,0xA3EA1C43u,0x60FF37u));\n\tA(uvec4(0xA66866F2u,0x648C88FBu,0x2AF7960u,0x738911ACu));\n\tA(uvec4(0x279D7D5Eu,0x4C10210Au,0x26968666u,0x8812FF3Cu));\n\tA(uvec4(0x26817261u,0x9BC13347u,0x7878768u,0x8D294675u));\n\tA(uvec4(0x3717969u,0x8D85AEB1u,0x277E7F77u,0x14D21BEDu));\n\tA(uvec4(0x226C756Du,0xC5C8EE66u,0x2486758u,0x8071AF0Cu));\n\tA(uvec4(0x566767u,0x1A138C8Fu,0x3677F70u,0xB1003C6Bu));\n\tA(uvec4(0x248B0D0u,0x63461B41u,0x748BED7u,0x80009E21u));\n\tA(uvec4(0x248AFD7u,0x5FD9E0FCu,0x424886A4u,0x281363B6u));\n\tA(uvec4(0x2A415F66u,0x6272D455u,0x677C846Du,0xD111D84u));\n\tA(uvec4(0x2B949C8Du,0x19218C44u,0x46747C6Cu,0x3B1C8E0u));\n\tA(uvec4(0x46534B3Au,0x51112A82u,0xB836B4Au,0xFCA6CE07u));\n\tA(uvec4(0x8756551Cu,0x9AEFEC0u,0x295A68D6u,0x6B561919u));\n\tA(uvec4(0xA37A0D5Du,0x377F73F7u,0x32948E8u,0x41010C6u));\n\tA(uvec4(0x63A49E8u,0x1100400Fu,0xFA1C5E74u,0x584C8754u));\n\tA(uvec4(0x42E553FAu,0x270C5802u,0x8EC753FAu,0x800048u));\n\tA(uvec4(0x336B0E4Du,0x13EB3311u,0x46AB8370u,0xBDC20CC4u));\n\tA(uvec4(0xB768680Du,0xA8B2B73Du,0x2B937258u,0xD0B9CF7u));\n\tA(uvec4(0x26907152u,0x348A20EAu,0x237F765Eu,0xEA781164u));\n\tA(uvec4(0x236D6E5Eu,0xA68EFE6Fu,0x237E7E6Eu,0xE644AE08u));\n\tA(uvec4(0x27757D6Eu,0x642322AAu,0x23576758u,0xC500E8BFu));\n\tA(uvec4(0x22576058u,0xA884664Eu,0x2576058u,0x59FE13D9u));\n\tA(uvec4(0x2506161u,0x61030B4Cu,0x3507768u,0xBC5A704u));\n\tA(uvec4(0x342A1C9u,0x327144E0u,0x473896BFu,0xCD1000C6u));\n\tA(uvec4(0x234E9DC6u,0xDD7208F3u,0x284386A7u,0x378CCF3u));\n\tA(uvec4(0x2631404Eu,0x50507365u,0x264E4F4Fu,0x76E7EEFEu));\n\tA(uvec4(0x2A3B433Bu,0x6C54CFCDu,0x66656C64u,0xCDCDEEFCu));\n\tA(uvec4(0x2251573Fu,0x32292ECCu,0x2AA17950u,0xAB830F6Cu));\n\tA(uvec4(0x8AA2794Bu,0xC2C015Fu,0x26C49D7Eu,0xB38C842Fu));\n\tA(uvec4(0xC69A991Cu,0xDEC92306u,0x13EAF363u,0x820071FFu));\n\tA(uvec4(0x22948F7u,0x210FF0Eu,0x3273F272u,0x386CF80Cu));\n\tA(uvec4(0x33850E8u,0x8014CCu,0x285A68F9u,0xBF2C7F61u));\n\tA(uvec4(0x44BD9B89u,0xFD140E31u,0x4AB18877u,0xEB2BE38Cu));\n\tA(uvec4(0x2AD5A576u,0xBC1CCCC1u,0xCA69680Cu,0x85684B59u));\n\tA(uvec4(0x27937251u,0x9100D18Du,0x2847557u,0xFD5EF8B0u));\n\tA(uvec4(0x266E6F50u,0xC9AED9DCu,0x5666655u,0x5B4739FEu));\n\tA(uvec4(0x2575958u,0xB253CC9Fu,0x6496058u,0x99F0BF3Fu));\n\tA(uvec4(0x35F6859u,0x77C8A358u,0x7496160u,0x287257E0u));\n\tA(uvec4(0x2576F60u,0xC8FA16C9u,0x2486860u,0xA88EEC8Bu));\n\tA(uvec4(0x154A9CBu,0x44622322u,0x25798C7u,0x12309873u));\n\tA(uvec4(0x3397A92u,0x3AD771CEu,0x2347868Fu,0xD41982F8u));\n\tA(uvec4(0x48325353u,0x9C4C3123u,0x27454D46u,0x1404532Du));\n\tA(uvec4(0x4B4C4C45u,0x12568608u,0x2E4A4A41u,0x75266EF6u));\n\tA(uvec4(0x6E534947u,0x88C1FB1Fu,0x2AB38B59u,0xA1896F23u));\n\tA(uvec4(0x4AB99161u,0x91CD3811u,0x4BC09981u,0xC183FC07u));\n\tA(uvec4(0x26D0B79Fu,0xA0862E0u,0xA3EA0D55u,0x2FF010FFu));\n\tA(uvec4(0x21A41E8u,0x18EE8Fu,0x26161D8u,0x1A160EF1u));\n\tA(uvec4(0x33F50E8u,0x9002F9u,0xDABB55F9u,0xF0B1F07Fu));\n\tA(uvec4(0x62C39B82u,0x3CC8F01u,0x4AC4A485u,0x9E0110C7u));\n\tA(uvec4(0x24DDBA86u,0x90DF3910u,0x47C89877u,0x5D90E338u));\n\tA(uvec4(0x24C79664u,0x4B9BF3E0u,0x265E5740u,0x66C40829u));\n\tA(uvec4(0x5455544u,0xFBA97747u,0x27525A4Au,0xCCD06746u));\n\tA(uvec4(0x2A596253u,0x49A820DFu,0x2B5D7566u,0x2833833u));\n\tA(uvec4(0x7496159u,0x6937608u,0x3586961u,0x2872EC8u));\n\tA(uvec4(0x224F6758u,0x8228C88Au,0x2385951u,0x200372B7u));\n\tA(uvec4(0x2249A0C0u,0x8541BB9u,0x234A99BFu,0x4C0A8EBu));\n\tA(uvec4(0x254488A9u,0x3C440B1u,0x2A407D85u,0xF622D060u));\n\tA(uvec4(0x4637474Eu,0x4D2866C4u,0x7283031u,0x3226877u));\n\tA(uvec4(0x233E453Fu,0x369A5701u,0x36474E46u,0x6C00FEEEu));\n\tA(uvec4(0x48594734u,0x8A853E23u,0x46D7A163u,0xE1C703E0u));\n\tA(uvec4(0x26DEA983u,0xC30C1701u,0x6C9A283u,0x72303DC9u));\n\tA(uvec4(0x22C9B79Fu,0x1381443Cu,0xCD5B5AEu,0x990FF3F0u));\n\tA(uvec4(0x22E443FAu,0xD68FF98Fu,0x73D655F9u,0x7097E09Cu));\n\tA(uvec4(0x23E453FAu,0xE62100FEu,0xAB6A0E4Du,0x8C000F00u));\n\tA(uvec4(0x46BB9A81u,0x8EF0300Cu,0xADDBDA4u,0xB83C0270u));\n\tA(uvec4(0x26D1B190u,0x3E8E8F30u,0xAE4B57Eu,0xD91C1143u));\n\tA(uvec4(0x2CD8B774u,0x186C3CF1u,0x234E563Fu,0x8AE1A61Du));\n\tA(uvec4(0x2575841u,0x13491943u,0x27596951u,0x6C469D01u));\n\tA(uvec4(0x265E7658u,0x910059D5u,0x26506158u,0xB81A7307u));\n\tA(uvec4(0x23576F67u,0x5C05826u,0x7506867u,0x45A81EFu));\n\tA(uvec4(0x24F6058u,0x8155057u,0x2406058u,0x22A88DEFu));\n\tA(uvec4(0x26438BAAu,0x1008068Eu,0x25A99B7u,0xF650901Bu));\n\tA(uvec4(0x2751838Bu,0xD7100072u,0x2F395B5Au,0x8F7A2067u));\n\tA(uvec4(0x26304E47u,0xDD81C414u,0x2373939u,0x19A3A783u));\n\tA(uvec4(0x2293138u,0xC5C96C11u,0x223D443Du,0xE08FEEF0u));\n\tA(uvec4(0x686C4925u,0xF1C30707u,0x26D0A87Fu,0xBCC6C01Fu));\n\tA(uvec4(0xC69BCDF3u,0x8ECC01F0u,0x22D1B29Bu,0xD7B11FF9u));\n\tA(uvec4(0x27D1B9A8u,0xC00FEC0Fu,0x2CC4A5AFu,0x8F00E0F8u));\n\tA(uvec4(0x22148F7u,0xF03FF37Fu,0xC263F36Au,0x31680FFu));\n\tA(uvec4(0xFEF25E72u,0xDAED0630u,0x645D5BEAu,0x1008CF7Cu));\n\tA(uvec4(0x2D8C6A6u,0xECDB1FE7u,0x3D8C0A8u,0x8B09F38u));\n\tA(uvec4(0x6D7AA8Bu,0xA1F0C708u,0xF2C50E56u,0xC21031FFu));\n\tA(uvec4(0x47BB935Bu,0x5E5340F8u,0x7394939u,0xA3017EEu));\n\tA(uvec4(0x22495941u,0x367C0611u,0x2365765Fu,0xC0835429u));\n\tA(uvec4(0x27496158u,0x4125A081u,0x27576858u,0xB4492172u));\n\tA(uvec4(0x7496158u,0x3498867u,0x2A2BF333u,0x6E41F63Fu));\n\tA(uvec4(0x3496858u,0x88E8F3FDu,0x2405857u,0x8360D6F3u));\n\tA(uvec4(0x465198AFu,0x8289CCu,0x75897A5u,0xD52E1063u));\n\tA(uvec4(0x758969Du,0x4762266Au,0x27578D8Du,0x486166F6u));\n\tA(uvec4(0x28345555u,0x1B33907Bu,0x23283939u,0x6859A6CAu));\n\tA(uvec4(0x27314241u,0xA0E8349Bu,0x22363D3Du,0x144CF0EEu));\n\tA(uvec4(0x64AE7B47u,0xE7010F83u,0x46C39B6Bu,0x9803C03u));\n\tA(uvec4(0x2DFC6A6u,0xC0B1E1F8u,0x3D1B89Fu,0x73130700u));\n\tA(uvec4(0x2D1B293u,0xA1017EE3u,0x37F5ACF2u,0x30FFC0FFu));\n\tA(uvec4(0xA2720572u,0x80F900F0u,0xB7C967F9u,0xD0B5F07Bu));\n\tA(uvec4(0x608375CEu,0xC8310F4u,0xA37A0E55u,0xFF8DFF0Eu));\n\tA(uvec4(0x26D8B993u,0x10308FF8u,0x2D8B99Au,0x3C110EC9u));\n\tA(uvec4(0xCA8ACDF3u,0x413030CFu,0x22DAC0ADu,0x8708CF3u));\n\tA(uvec4(0x4EDBA76u,0xA30800C1u,0xDB2CF222u,0xB1338F00u));\n\tA(uvec4(0xA4B5B4Au,0xDA033913u,0x276F7867u,0x3F19199u));\n\tA(uvec4(0x265E7767u,0x82464CA0u,0x22506960u,0x50C16C88u));\n\tA(uvec4(0x26496959u,0x4580B3CEu,0x25F7E67u,0x9A9878A6u));\n\tA(uvec4(0x23486050u,0x870C1077u,0x22406757u,0x10D87967u));\n    //-------------------------------------------\n    C = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "highp ivec2 SV_DispatchThreadID = ivec2(0,0);\nhighp int Double_pixelID = 0;\nhighp vec4 col = vec4(0.,0.,0.,0.);\nint i = 256;\n\n//pass !\nvoid A(uvec4 data){\n    \n    if(Double_pixelID == i++){\n        if((SV_DispatchThreadID.x & 0x1) == 0){\n        \tcol.xy = unpackUnorm2x16(data.s);\n    \t\tcol.zw = unpackUnorm2x16(data.t);\n        }\n        else{\n        \tcol.xy = unpackUnorm2x16(data.p);\n    \t\tcol.zw = unpackUnorm2x16(data.q);\n        }\n    }\n}\n\nvoid mainImage( out vec4 C, in vec2 U)\n{\n    SV_DispatchThreadID = ivec2(floor(U-0.5));\n    if(SV_DispatchThreadID.x >= 32 || SV_DispatchThreadID.y >= 32){\n    \tC = vec4(1./3.);\n        return;\n    }\n    if(iFrame > 2){\n    \tC = texture(iChannel1,U/iResolution.xy);\n        discard;\n    }\n    //1个像素存一个数据块\n    //16 x 32, 16为其中2个像素存2个块数据\n    //像素ID编号\n    Double_pixelID = (SV_DispatchThreadID.x>>1) + (SV_DispatchThreadID.y<<4); \n    //------------------------------------\n    A(uvec4(0x27598E95u,0x2F46EE0Au,0x2B5F8586u,0x1783A0FAu));\n\tA(uvec4(0x674E6767u,0x5944882Au,0x23385F5Fu,0xF92060AAu));\n\tA(uvec4(0x26325050u,0x816FB66Fu,0x264D5D5Du,0xFC0D9C31u));\n\tA(uvec4(0x26304F4Fu,0x2088F256u,0x2E3B3938u,0xE09FFD3Fu));\n\tA(uvec4(0x4AD7995Au,0xFCC301E8u,0x20DDAB58u,0xF1F80302u));\n\tA(uvec4(0x6DFBF97u,0xC380EC1Fu,0x2D8C7AEu,0x10E637E0u));\n\tA(uvec4(0xD69BCDF3u,0x191E07E0u,0x127A1C63u,0x1473F0FFu));\n\tA(uvec4(0xF305427Au,0x45A97F48u,0xDADC076Bu,0xFBE1F0FFu));\n\tA(uvec4(0x8AE853FAu,0x1F001E00u,0x4A5C0572u,0xC000F0u));\n\tA(uvec4(0x2E7B98Bu,0xC0871Eu,0x2D8B992u,0xC968C71Eu));\n\tA(uvec4(0x4DDCBB9u,0x433EEF71u,0x22D2AA82u,0x10F9CF0Cu));\n\tA(uvec4(0x23E8B979u,0x10C07Cu,0x24B59655u,0xFB0F0F9u));\n\tA(uvec4(0x26586951u,0xE8C20D33u,0x7667F67u,0x87E59B13u));\n\tA(uvec4(0x23527A62u,0x4058F917u,0x27526B62u,0x2144D928u));\n\tA(uvec4(0x265E7E6Eu,0x3BA37780u,0x22577758u,0x5C3F0872u));\n\tA(uvec4(0x22ABF233u,0xEEB007FBu,0x34F6F5Fu,0x486C1AFDu));\n\tA(uvec4(0x27587785u,0x24E2FC27u,0x2A556C6Du,0x2E32F399u));\n\tA(uvec4(0x263F575Eu,0x8C8B43C8u,0x26395A52u,0xED981FC3u));\n\tA(uvec4(0x4B56540Du,0x18601B0Eu,0x264F6666u,0xC6A2C178u));\n\tA(uvec4(0x27394A51u,0x2EA27687u,0x47338B0Cu,0x9E01710Fu));\n\tA(uvec4(0xC659BE0Eu,0xC027801Fu,0x6EDBF78u,0xE19713C0u));\n\tA(uvec4(0x26DFB182u,0xCF07F01u,0x2D8C7A6u,0x890F038u));\n\tA(uvec4(0xDDCBB9u,0x10F37B0u,0x47F5781Cu,0xA07C70F3u));\n\tA(uvec4(0x7606447Au,0x6A9874Au,0x268B73E4u,0xF886F06u));\n\tA(uvec4(0x7BF96870u,0x190E0F42u,0xBA630572u,0xD000F0u));\n\tA(uvec4(0x2D9B992u,0x1FFECFu,0x22D8C7B5u,0x1030700Cu));\n\tA(uvec4(0x3D8C0AFu,0x710408C0u,0x27D0B087u,0xBE1630CFu));\n\tA(uvec4(0x2E1C096u,0x8C01DF9u,0x28C5A664u,0x1F0830F0u));\n\tA(uvec4(0x2651624Au,0xCE3AE3Bu,0x26617968u,0x69241389u));\n\tA(uvec4(0x26718971u,0xD5557557u,0x67D957Eu,0xB80AD0E1u));\n\tA(uvec4(0x21567867u,0xC9508CDDu,0x274A7161u,0x909CC7B9u));\n\tA(uvec4(0x22516A60u,0xCB311364u,0x27607961u,0x500B99F9u));\n\tA(uvec4(0x275E7E8Du,0x81CC889Bu,0x29436565u,0x85A80070u));\n\tA(uvec4(0x43406161u,0xF5613791u,0x27496161u,0xB78A6F22u));\n\tA(uvec4(0x474A7271u,0xA218997Cu,0x47537272u,0xC97437C0u));\n\tA(uvec4(0x465E6E6Eu,0x78A57207u,0x5655AD0Du,0xDF0FB80Fu));\n\tA(uvec4(0x26D29B5Au,0x17E03001u,0x6DDBC85u,0x3E818038u));\n\tA(uvec4(0x2E0B983u,0xF1100FCCu,0x2DFC09Au,0x81E7C80Fu));\n\tA(uvec4(0xDDCBA8u,0xC30CF010u,0x56F69A1Cu,0x90FEE0FFu));\n\tA(uvec4(0x1244EEu,0xF300000u,0x5264076Bu,0x7F607077u));\n\tA(uvec4(0x5265EEu,0x29887633u,0x92720763u,0x7703FF0Fu));\n\tA(uvec4(0xD38BBD15u,0x10FDF002u,0x2D9C0AFu,0xE0F10CF3u));\n\tA(uvec4(0x3E0C09Fu,0x8E00FFFEu,0x26E0B887u,0x300071u));\n\tA(uvec4(0x22D9B178u,0x1EEFCF00u,0x8E8B865u,0xCD7E10F0u));\n\tA(uvec4(0x264A624Au,0x605007EFu,0x2A6B7B63u,0x6E558E19u));\n\tA(uvec4(0x228F9879u,0x8178DDAEu,0x77A927Au,0x306108FCu));\n\tA(uvec4(0x6789179u,0x2FB9E6B9u,0x2B5A7A69u,0xA062DCu));\n\tA(uvec4(0x5557766u,0x477619C7u,0x2B5E866Eu,0xF1233383u));\n\tA(uvec4(0x27425A5Au,0xAD99C99u,0x4A3F6566u,0x66080110u));\n\tA(uvec4(0x263A5B5Bu,0x99086736u,0x22507980u,0xB27AEEC9u));\n\tA(uvec4(0x45668888u,0xEFE87704u,0x2B6F9796u,0x56A231BBu));\n\tA(uvec4(0x475B7A73u,0x8A92C8D9u,0x5253665Cu,0xF110FB0Fu));\n\tA(uvec4(0x22DAA35Bu,0xECC80F00u,0x27D8B776u,0xE5CBF003u));\n\tA(uvec4(0xD21C4143u,0xFAD7C3C7u,0x2D8B993u,0x128088Fu));\n\tA(uvec4(0x6E0C09Fu,0x8100FCFFu,0x52DD0673u,0xF7FB0F00u));\n\tA(uvec4(0x21948F7u,0xC80F00Fu,0x266B6AEEu,0xF02CFD8u));\n\tA(uvec4(0x224C67E1u,0xBC040ECu,0x36E567F3u,0xDFF02u));\n\tA(uvec4(0x2D8B89Fu,0xC8C01C04u,0x2E0C092u,0x203A338u));\n\tA(uvec4(0x3D8B890u,0x871F10Cu,0x2E1C096u,0x31F1u));\n\tA(uvec4(0x7E0BF77u,0x3E0F710Eu,0x422CFB35u,0x1F00F0u));\n\tA(uvec4(0xB5A7158u,0x55B5FF06u,0x277A8970u,0x853073C4u));\n\tA(uvec4(0x469DAE88u,0x9901DF11u,0x6879F80u,0x77A2911Cu));\n\tA(uvec4(0x27788979u,0xE12317Fu,0x2E6E8E7Du,0xEB040130u));\n\tA(uvec4(0x22668F77u,0x31AD5519u,0x3578767u,0xA0F46EFBu));\n\tA(uvec4(0x6486171u,0xC0165155u,0x2749616Au,0xF26777DFu));\n\tA(uvec4(0xB537A7Bu,0xEB19D65u,0x26678080u,0x3EA6B65Cu));\n\tA(uvec4(0x3244F34Cu,0x3C13CC73u,0x47769796u,0x512513F3u));\n\tA(uvec4(0x45667777u,0xA8C523CEu,0x2667746Du,0x8435DC79u));\n\tA(uvec4(0xDA6A690Du,0x817FF180u,0x22DAAB63u,0x8C1F1EFFu));\n\tA(uvec4(0x6E7C781u,0x1007FE0u,0x7D8C79Eu,0x23003F01u));\n\tA(uvec4(0xCB1C4347u,0xF857C4C3u,0x5A550673u,0xF0FF0F00u));\n\tA(uvec4(0x16E465FAu,0xE30010FFu,0x32F31572u,0x1F2690FFu));\n\tA(uvec4(0x23C5FE9u,0xA100E0FEu,0xE307547Cu,0x6CAFF64u));\n\tA(uvec4(0x22D8B9A0u,0x7EBE0F71u,0x3E0C09Fu,0x3CC7u));\n\tA(uvec4(0x2E7C79Eu,0x108078E6u,0x2E1C096u,0x800DFFBu));\n\tA(uvec4(0x2F6C676u,0x100CF9F1u,0x4AB4FA35u,0x88EF00F0u));\n\tA(uvec4(0x27868F60u,0xE6E0EF00u,0x2B83927Au,0xCC11EE1Fu));\n\tA(uvec4(0x2689937Bu,0x8841330Bu,0x696AE97u,0xC610F0CDu));\n\tA(uvec4(0x2680ADA4u,0xA020FECEu,0x769887u,0x3947ECF9u));\n\tA(uvec4(0x66E9686u,0xFE80BFC8u,0x26396951u,0x931B2497u));\n\tA(uvec4(0x26395959u,0xF8408278u,0x23476F77u,0x2DA70328u));\n\tA(uvec4(0x27486971u,0xE572244u,0x275F7879u,0xE7A72EDBu));\n\tA(uvec4(0x2A507878u,0x1BD88C02u,0x22689796u,0x87F6C86Eu));\n\tA(uvec4(0x27638179u,0x53E194EBu,0x475B6362u,0x1EE510F7u));\n\tA(uvec4(0x449C7956u,0x338B8FF8u,0x2E0B163u,0x73800B04u));\n\tA(uvec4(0x2DFC68Eu,0xC029EB6Cu,0x3D9B988u,0xB00B8DCCu));\n\tA(uvec4(0x2D8B98Bu,0x80C7003Fu,0x46E6BCF2u,0x704FF0BFu));\n\tA(uvec4(0x223557E7u,0xFAA0000u,0x2AF31572u,0x9FB490BDu));\n\tA(uvec4(0x9A721572u,0x36F70F00u,0x56D653FAu,0xC01E30F1u));\n\tA(uvec4(0x62D1B393u,0x380F8Eu,0x2D9C0A7u,0x2608719Eu));\n\tA(uvec4(0x3E8C088u,0x1063FEu,0x3E0B886u,0xEB79F388u));\n\tA(uvec4(0xEEBB76u,0x978F0010u,0x9668AC0Eu,0x20B5C07Eu));\n\tA(uvec4(0x23838969u,0x81B4D31Du,0x23909879u,0xEFC5010Cu));\n\tA(uvec4(0x39FAF97u,0xEFCFABD8u,0x788A091u,0x61314ABu));\n\tA(uvec4(0x26809989u,0x99088B9u,0x385A797u,0x275ACB9Cu));\n\tA(uvec4(0x27688979u,0x72DAC4BCu,0x274A7969u,0x14FC6956u));\n\tA(uvec4(0x274F7070u,0xD4F07766u,0x26426B72u,0x484984DFu));\n\tA(uvec4(0x26508181u,0xBF28EE4Fu,0x47669C9Cu,0x64537637u));\n\tA(uvec4(0x27599190u,0x909066F0u,0x27678778u,0x25E70199u));\n\tA(uvec4(0x277E968Eu,0x19378CB3u,0xA708777u,0x8C033DCu));\n\tA(uvec4(0x5A459C0Du,0x9301EC0Eu,0x2EFB86Au,0x1900388u));\n\tA(uvec4(0x27D0B777u,0x29FC7C01u,0x2E7C089u,0x10C0FFFFu));\n\tA(uvec4(0x2D1BA9Bu,0xC0011CD3u,0x47C6BCF2u,0xC08F30FFu));\n\tA(uvec4(0x224C66E7u,0xCD170CCu,0x23352D8u,0xDC83CF0Cu));\n\tA(uvec4(0x22F5FE8u,0xE100C01Cu,0x45566ECu,0xF078FE0u));\n\tA(uvec4(0xD24CEB4Eu,0xF6FF0F00u,0x2D8CFAEu,0x8868DDF3u));\n\tA(uvec4(0x2DAB987u,0x39008CFCu,0x26EDBE6Fu,0x6C0061u));\n\tA(uvec4(0x29EBB976u,0x244AF00u,0x8757AC0Du,0xA893C06Cu));\n\tA(uvec4(0x78E9676u,0x63FE3662u,0x3899178u,0x3F6D8EB2u));\n\tA(uvec4(0x22819982u,0xE8C88F68u,0x280A18Au,0x5C0833ECu));\n\tA(uvec4(0x288B7A6u,0x592F1FB3u,0x476B9A8Au,0x8804DCE9u));\n\tA(uvec4(0x466F9080u,0x4380F605u,0x46578776u,0x3E499164u));\n\tA(uvec4(0x4638606Fu,0x10092656u,0x45447777u,0x91C05101u));\n\tA(uvec4(0x275F8888u,0x82C0CA61u,0x2A679E9Eu,0x5422D577u));\n\tA(uvec4(0x6619190u,0x5B768F7Eu,0x22597A7Au,0x1804E638u));\n\tA(uvec4(0x4A577D7Du,0x4827176u,0x4A5F766Du,0x5A19E7CCu));\n\tA(uvec4(0x45857554u,0x1093B38Bu,0x33CCA560u,0x9921CC3Eu));\n\tA(uvec4(0x23DAAA61u,0x39B3CD88u,0x26CAAA73u,0xBF0C883Fu));\n\tA(uvec4(0x3D9C0A7u,0x50010348u,0x4BB5BC15u,0xF08000FFu));\n\tA(uvec4(0x265C6EC9u,0xC97C0CF1u,0xA2B4AA2u,0x78F00F00u));\n\tA(uvec4(0x36D552FAu,0x72000C8u,0x26576FCCu,0x60E001F0u));\n\tA(uvec4(0xD39C9B14u,0x708FF0FFu,0x3E0CF9Fu,0x3B22u));\n\tA(uvec4(0x26D0B07Eu,0xCE481062u,0x7E4BD61u,0x8275AE88u));\n\tA(uvec4(0xE76B890Eu,0x984AFF4Eu,0x6727253u,0xA48AFACFu));\n\tA(uvec4(0x25858675u,0x2CEA63B7u,0x44577867u,0x8A334897u));\n\tA(uvec4(0x26799282u,0xD0A74DEEu,0x3729982u,0x8F2B7C11u));\n\tA(uvec4(0x387AF90u,0xFA39666Eu,0x787AF90u,0xEB673740u));\n\tA(uvec4(0x26609079u,0x8E2D5483u,0x4E5A8979u,0x332E877u));\n\tA(uvec4(0x46487879u,0x19063FDBu,0x26417272u,0x8C1151Du));\n\tA(uvec4(0x265F9E9Eu,0xAFC673A3u,0x26509797u,0xA02F1CC1u));\n\tA(uvec4(0x46538B8Au,0x54B031C7u,0x2A60968Fu,0xABAAE873u));\n\tA(uvec4(0x2F6D8D8Cu,0xE91502B1u,0x47516867u,0x83893833u));\n\tA(uvec4(0x265E6E65u,0xEB67F790u,0x632C0622u,0xC0ED0031u));\n\tA(uvec4(0x432BFA2Cu,0xEE144C22u,0x63D3AA7Eu,0x1049F80u));\n\tA(uvec4(0x3E0C78Eu,0x28CAAAAu,0x24B3A495u,0xFB03F078u));\n\tA(uvec4(0x566D6F93u,0x710003F0u,0x4837478Bu,0x880EEF0Fu));\n\tA(uvec4(0x46B652FAu,0xC978C7Fu,0x3A5577F3u,0x408580FEu));\n\tA(uvec4(0x808D7C6Au,0x78580E9Cu,0x7DEB889u,0x8D192144u));\n\tA(uvec4(0xFECC57Eu,0x20A0BBu,0xAA58BE0Eu,0x10E18898u));\n\tA(uvec4(0x467F684Au,0x8FA888FEu,0x22606151u,0x51F5334Fu));\n\tA(uvec4(0x27516960u,0xCA73C318u,0x275B7362u,0xB4EF0540u));\n\tA(uvec4(0x26789888u,0x27132FF4u,0x22719383u,0xE1500B6Fu));\n\tA(uvec4(0x2787A090u,0x3F916242u,0x267FAF9Eu,0xDE44464u));\n\tA(uvec4(0x2E749D8Eu,0xDA51C688u,0x45457867u,0x81B160C6u));\n\tA(uvec4(0x6F3F7676u,0x24707F01u,0x26498181u,0x69AD60DDu));\n\tA(uvec4(0x2E619191u,0x92115D77u,0x67589088u,0x8D04419u));\n\tA(uvec4(0x2A619890u,0x754FC3ECu,0x2676A696u,0x26F57F88u));\n\tA(uvec4(0x275B7A72u,0x17350819u,0x23707877u,0x4D84D581u));\n\tA(uvec4(0x27626A5Au,0x40A11299u,0x5756440Cu,0xB8A2D0Au));\n\tA(uvec4(0x4F665143u,0xA8983722u,0x6A668A0Du,0xAAEA6666u));\n\tA(uvec4(0x65B69666u,0x4E7567EEu,0x8B6E6E5Eu,0x214B3677u));\n\tA(uvec4(0x64666759u,0x3CF88EFEu,0x4426476Au,0x17F338Fu));\n\tA(uvec4(0x44466A9u,0x4AB3CC80u,0x4F4B5250u,0xE13E1430u));\n\tA(uvec4(0x66B50622u,0x77403073u,0x29DAB875u,0x5D558888u));\n\tA(uvec4(0xDA6A770Eu,0x33624455u,0x6F948552u,0x22CCC8FDu));\n\tA(uvec4(0x26615A49u,0xA9B1C63u,0x2767F60u,0x5F5FBC93u));\n\tA(uvec4(0x26617162u,0x48A9701Du,0x27698069u,0x4FD6F88u));\n\tA(uvec4(0x278EA788u,0x812059C6u,0x278DAF9Fu,0xDE82EC2Eu));\n\tA(uvec4(0x38FB798u,0x2DC771A6u,0x2279A292u,0x3FFD4CB9u));\n\tA(uvec4(0x2475A897u,0xF0F8F710u,0x265E8E7Eu,0x575E01F0u));\n\tA(uvec4(0x6B387071u,0xC260E715u,0x26418E87u,0x3AC3C848u));\n\tA(uvec4(0x27589190u,0xE15F8BECu,0x276FA099u,0xC38017D9u));\n\tA(uvec4(0x265A928Au,0x1268069Fu,0x4276ACA4u,0xA0F2F9DEu));\n\tA(uvec4(0x4778877u,0x9A6434C3u,0x23778776u,0x2C842A37u));\n\tA(uvec4(0x7687960u,0x7586613u,0x75E7765u,0x4F9501D1u));\n\tA(uvec4(0x29647463u,0xF0CEAABAu,0x19647463u,0x113188A8u));\n\tA(uvec4(0x68585847u,0x794888B9u,0x4F535B4Bu,0x576080E3u));\n\tA(uvec4(0x4A475053u,0x7F1CF78Eu,0x6234363u,0x92B8BA89u));\n\tA(uvec4(0x223B5980u,0x877EE1Cu,0x6B5D674Fu,0x978040C8u));\n\tA(uvec4(0x4A5B6B53u,0x82113E13u,0x23707875u,0xAF4291C9u));\n\tA(uvec4(0x25768685u,0x22D26A67u,0x4B7F8785u,0xB56ECC18u));\n\tA(uvec4(0x4B727A6Bu,0x13E31573u,0xB6E7667u,0x182346AFu));\n\tA(uvec4(0x265A6A61u,0x6B3288E7u,0x7778777u,0x2923BA96u));\n\tA(uvec4(0x267A9389u,0xC16229FAu,0x2687A091u,0x748F5F11u));\n\tA(uvec4(0x2687A09Fu,0x186344D4u,0x77AA99u,0xC5DC17ECu));\n\tA(uvec4(0x276F9F88u,0x115398F1u,0x2665958Cu,0x86268F38u));\n\tA(uvec4(0x25347777u,0x4CA5D826u,0x26417A7Au,0x20B12C8Bu));\n\tA(uvec4(0x4A4B8389u,0x41166C66u,0x26EA79Fu,0x29B42633u));\n\tA(uvec4(0x22609097u,0xAFA50151u,0x26628880u,0x4481A29Fu));\n\tA(uvec4(0x467D867Du,0x893D8C8u,0x26616A58u,0x8168880Du));\n\tA(uvec4(0xA84957Du,0xB8E489E0u,0x3A346215u,0xF55AEE37u));\n\tA(uvec4(0x6500576Cu,0x15331F91u,0x2B5371F3u,0x131131u));\n\tA(uvec4(0x8A373840u,0x89CF3EEu,0x463B5352u,0x89D92CC3u));\n\tA(uvec4(0x6344545Cu,0x6D6F72FFu,0x6214241u,0x9E323F55u));\n\tA(uvec4(0x23375E64u,0x67E9F3ECu,0x4A495A6Eu,0x38868F38u));\n\tA(uvec4(0x2E416052u,0xAF8AD7BCu,0xF2B3B3Au,0xE9B6EC7Fu));\n\tA(uvec4(0x2910272Au,0xA4EA5401u,0x5A5581F3u,0x23B73363u));\n\tA(uvec4(0x4F747C6Cu,0x8470E70Au,0x476B7B72u,0xE75808F3u));\n\tA(uvec4(0x265A6959u,0x18B0734Du,0x25778877u,0x922BFD7u));\n\tA(uvec4(0xB789F8Fu,0x3F0AFD51u,0x2784AD9Du,0xCA2CABBBu));\n\tA(uvec4(0x277EA089u,0xB9E0EC1u,0x2476A998u,0x1194EC38u));\n\tA(uvec4(0x4B5F877Fu,0x69C0C02Du,0x27497971u,0xE72B886Bu));\n\tA(uvec4(0x29438686u,0x79553B28u,0x4A417979u,0x680D0D11u));\n\tA(uvec4(0x2B5EA59Du,0xCB4213D4u,0x2B61AF98u,0x9628CE9Du));\n\tA(uvec4(0x76E9E96u,0x4F6720F6u,0x2A56746Du,0x2981F068u));\n\tA(uvec4(0x274F5E57u,0x8330E276u,0x6394241u,0x6498EBCEu));\n\tA(uvec4(0x23475647u,0x55F000E4u,0x4B4561F2u,0xFE0FFF88u));\n\tA(uvec4(0x12B21463u,0xE73788FAu,0x276461F2u,0x8688A988u));\n\tA(uvec4(0xAB333B49u,0x8FC8C89Fu,0x67475D4Fu,0x9E6DC8FEu));\n\tA(uvec4(0x2213131u,0x1FC0330Fu,0x7334B42u,0x5D68FF67u));\n\tA(uvec4(0x27335242u,0xAF0F6FFu,0x2A384951u,0xB47ACF88u));\n\tA(uvec4(0x4E5E756Du,0x11B91873u,0x24343738u,0x59679709u));\n\tA(uvec4(0x2676811Cu,0x6A00A4u,0x16B7420Eu,0xB9FE4811u));\n\tA(uvec4(0x4A5D7465u,0x5F8F908Fu,0x2F7D9484u,0x10B98BF8u));\n\tA(uvec4(0x3646E5Eu,0xFDC8BA8Eu,0x2B777869u,0x8F98FF8Eu));\n\tA(uvec4(0x266A7B6Bu,0x22989E29u,0x7709188u,0xEF3EC68Du));\n\tA(uvec4(0xB699189u,0x7350DC99u,0x2B598A82u,0xE4276105u));\n\tA(uvec4(0x6A669C94u,0xC440A0u,0x2657877Fu,0xB4CD32BBu));\n\tA(uvec4(0x46376F6Fu,0x24C5CF34u,0x4A397979u,0x554A8333u));\n\tA(uvec4(0x4658928Au,0x411ECD46u,0x6767A79Eu,0x98C073CFu));\n\tA(uvec4(0x46508F87u,0xAC3730D6u,0x264E6E6Du,0x362BB1C9u));\n\tA(uvec4(0x27394B4Au,0x6D610472u,0x3314248u,0x594C5077u));\n\tA(uvec4(0x3314141u,0xC1F26477u,0x72A3A40u,0xB0D042F5u));\n\tA(uvec4(0x72A3A3Au,0x245D5575u,0x3293941u,0xFD7215D9u));\n\tA(uvec4(0x3293940u,0x2051947u,0x2B3B4341u,0xCA7E10u));\n\tA(uvec4(0x4B5B6267u,0x1BF57375u,0xF43534Au,0x87267FFu));\n\tA(uvec4(0x25475746u,0x3FF19D7Fu,0x2B334341u,0x891944F7u));\n\tA(uvec4(0x6324241u,0xDB3223AEu,0x4357585Fu,0xFE6E7F67u));\n\tA(uvec4(0x93D30522u,0x73441111u,0x93D30522u,0x64331111u));\n\tA(uvec4(0x263E4E4Eu,0x23CCF611u,0x33F4848u,0x61C0DEBAu));\n\tA(uvec4(0x7314840u,0x2A2DF71u,0x73A4949u,0x6E136646u));\n\tA(uvec4(0x2B6C7E76u,0x27327F8Au,0x266E8880u,0x26435C33u));\n\tA(uvec4(0x27769890u,0xB0C94174u,0x2671A198u,0x218ECFD8u));\n\tA(uvec4(0x27669780u,0x5089F42Du,0x4742726Au,0xBD1AC438u));\n\tA(uvec4(0x6214B53u,0x1E59C4ECu,0x26407272u,0x68441F29u));\n\tA(uvec4(0x26508A89u,0xA1C51BF8u,0x6648908Fu,0x111331u));\n\tA(uvec4(0x2F538B82u,0x2893CCD5u,0xE598879u,0x22791873u));\n\tA(uvec4(0x2A417760u,0xB8881137u,0x4B637362u,0xC292E77Du));\n\tA(uvec4(0x276B725Au,0x5B6275C5u,0x26777860u,0x1B1D9D99u));\n\tA(uvec4(0xA5F6757u,0xBD079BC0u,0x2A506750u,0x66015CBFu));\n\tA(uvec4(0x46696858u,0x5D659B13u,0x27848474u,0x9558D18Fu));\n\tA(uvec4(0x29969675u,0x18C3CCBAu,0x2E5B6251u,0x8EB8F888u));\n\tA(uvec4(0x2FA49C7Eu,0x9968DF89u,0x4BA19170u,0xAA568919u));\n\tA(uvec4(0x656A7A68u,0x98D8B5FFu,0x465B6251u,0xAD72731Du));\n\tA(uvec4(0x29696957u,0xB8339D99u,0x655A5A48u,0xCA44D9DDu));\n\tA(uvec4(0x25596957u,0x315FDF55u,0x25485846u,0x86AA5445u));\n\tA(uvec4(0x2B535B51u,0xB90211D1u,0x474A5B59u,0x44689D0Bu));\n\tA(uvec4(0x275A7269u,0x5EA7F517u,0x27537B72u,0x76E86A15u));\n\tA(uvec4(0x45669988u,0xA19B018Cu,0x276F9888u,0xB5BA4450u));\n\tA(uvec4(0x2774A49Cu,0x2C20013Du,0x43426B63u,0x9C04C6Du));\n\tA(uvec4(0x4337666Eu,0x9F26F3D8u,0x2B47847Eu,0xD60FCF00u));\n\tA(uvec4(0x26407A79u,0xD149A61Bu,0x463A827Au,0xF311C81Cu));\n\tA(uvec4(0x475E9D8Eu,0xC348678Eu,0x2B5F8071u,0xB1D1F082u));\n\tA(uvec4(0x27528171u,0x1859EA3Bu,0x2779927Bu,0xC21EDD7Fu));\n\tA(uvec4(0x27868870u,0x6E6DF17Fu,0x2B688060u,0x4191E4DBu));\n\tA(uvec4(0x4B5A6B5Bu,0x2619D8FFu,0x27717A69u,0x2D151DB9u));\n\tA(uvec4(0x4B5A6359u,0x93697577u,0x2B5A6252u,0x41F2765Du));\n\tA(uvec4(0x47536258u,0x9DD19575u,0x2F4B5B49u,0x384315u));\n\tA(uvec4(0x27536251u,0x49DAFD23u,0x2B6B6B59u,0x31C17603u));\n\tA(uvec4(0x47707F58u,0x891A2623u,0x27717161u,0x16E49E77u));\n\tA(uvec4(0x46616958u,0x88A1666Eu,0x27707159u,0x6E51C6EEu));\n\tA(uvec4(0x27948D75u,0x5D11F28u,0x2AA59D86u,0x40B49E80u));\n\tA(uvec4(0x4A717962u,0xAD844037u,0x27718279u,0x525FDD9Du));\n\tA(uvec4(0x2A859687u,0x9E44EB38u,0x276A8A82u,0x28B1841Cu));\n\tA(uvec4(0x26769F90u,0xC93FE144u,0x777A79Fu,0xE5317EF0u));\n\tA(uvec4(0x2A5E8079u,0x1A7A5000u,0x27417169u,0x9F0FC8BEu));\n    //------------------------------------\n    C = col + texelFetch(iChannel0,SV_DispatchThreadID,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*********************************************************\n\tBaboon (ETC2/ETC1) Decoder\nETC2 and ETC1 is also Block Compression,\n\n//you can easy direct know decode C/C++ code form\nNote: Lisence by author's declare:\n1. https://github.com/Ericsson/ETCPACK\n2. https://github.com/hglm/texgenpack\nAbout knowledge:\nhttps://en.wikipedia.org/wiki/Ericsson_Texture_Compression\n**********************************************************/\n//-----------------------------------------------\nstruct BlockData{\n\tuint block_part_1;//低位 (LSB)\n    uint block_part_2;//高位 (MSB)\n};\nBlockData blockdata;\nuint[8] bitstring;\nconst int[8] etc2_distance_table = int[](3, 6, 11, 16, 23, 32, 41, 64 );\nconst int[] complement3bitshifted_table = int[](0, 8, 16, 24, -32, -24, -16, -8);\nconst ivec4[8] modifier_table = ivec4[](\n\t  ivec4( 2, 8, -2, -8 ),\n\t  ivec4( 5, 17, -5, -17 ),\n      ivec4( 9, 29, -9, -29 ),\n      ivec4( 13, 42, -13, -42 ),\n      ivec4( 18, 60, -18, -60 ),\n      ivec4( 24, 80, -24, -80 ),\n      ivec4( 33, 106, -33, -106 ),\n      ivec4( 47, 183, -47, -183 )\n);\nint complement3bitshifted(uint index){\n\treturn complement3bitshifted_table[index];\n}\n\nivec3 ETC2_T_or_H_mode(int mode,int x,int y,int id){\n\tint base_color1_R, base_color1_G, base_color1_B;\n    int base_color2_R, base_color2_G, base_color2_B;\n    ivec3[4] paint_color;\n    int distance = 0;\n    if (mode == 0)\n    {\n        // T mode.\n        base_color1_R = int(((bitstring[0] & 0x18u) >> 1) | (bitstring[0] & 0x3u));\n        base_color1_R |= base_color1_R << 4;\n        base_color1_G = int(bitstring[1] & 0xF0u);\n        base_color1_G |= base_color1_G >> 4;\n        base_color1_B = int(bitstring[1] & 0x0Fu);\n        base_color1_B |= base_color1_B << 4;\n        base_color2_R = int(bitstring[2] & 0xF0u);\n        base_color2_R |= base_color2_R >> 4;\n        base_color2_G = int(bitstring[2] & 0x0Fu);\n        base_color2_G |= base_color2_G << 4;\n        base_color2_B = int(bitstring[3] & 0xF0u);\n        base_color2_B |= base_color2_B >> 4;\n        distance = int(etc2_distance_table[((bitstring[3] & 0x0Cu) >> 1) | (bitstring[3] & 0x1u)]);\n        paint_color[0].r = base_color1_R;\n        paint_color[0].g = base_color1_G;\n        paint_color[0].b = base_color1_B;\n        paint_color[2].r = base_color2_R;\n        paint_color[2].g = base_color2_G;\n        paint_color[2].b = base_color2_B;\n        paint_color[1].r = base_color2_R + distance;\n        paint_color[1].g = base_color2_G + distance;\n        paint_color[1].b = base_color2_B + distance;\n        paint_color[3].r = base_color2_R - distance;\n        paint_color[3].g = base_color2_G - distance;\n        paint_color[3].b = base_color2_B - distance;\n        \n    }\n    else\n    {\n        // H mode.\n        base_color1_R = int((bitstring[0] & 0x78u) >> 3);\n        base_color1_R |= base_color1_R << 4;\n        base_color1_G = int(((bitstring[0] & 0x07u) << 1) | ((bitstring[1] & 0x10u) >> 4));\n        base_color1_G |= base_color1_G << 4;\n        base_color1_B = int((bitstring[1] & 0x08u) | ((bitstring[1] & 0x03u) << 1) | ((bitstring[2] & 0x80u) >> 7));\n        base_color1_B |= base_color1_B << 4;\n        base_color2_R = int((bitstring[2] & 0x78u) >> 3);\n        base_color2_R |= base_color2_R << 4;\n        base_color2_G = int(((bitstring[2] & 0x07u) << 1) | ((bitstring[3] & 0x80u) >> 7));\n        base_color2_G |= base_color2_G << 4;\n        base_color2_B = int((bitstring[3] & 0x78u) >> 3);\n        base_color2_B |= base_color2_B << 4;\n        int base_color1_value = (base_color1_R << 16) + (base_color1_G << 8) + base_color1_B;\n        int base_color2_value = (base_color2_R << 16) + (base_color2_G << 8) + base_color2_B;\n        uint bit = uint(base_color1_value >= base_color2_value);\n        distance = etc2_distance_table[(bitstring[3] & 0x04u) | ((bitstring[3] & 0x01u) << 1) | bit];\n        paint_color[0].r = base_color1_R + distance;\n        paint_color[0].g = base_color1_G + distance;\n        paint_color[0].b = base_color1_B + distance;\n        paint_color[1].r = base_color1_R - distance;\n        paint_color[1].g = base_color1_G - distance;\n        paint_color[1].b = base_color1_B - distance;\n        paint_color[2].r = base_color2_R + distance;\n        paint_color[2].g = base_color2_G + distance;\n        paint_color[2].b = base_color2_B + distance;\n        paint_color[3].r = base_color2_R - distance;\n        paint_color[3].g = base_color2_G - distance;\n        paint_color[3].b = base_color2_B - distance;\n    }\n    uint pixel_index_word = (bitstring[4] << 24) | (bitstring[5] << 16) | (bitstring[6] << 8) | bitstring[7];\n    uint pixel_index = ((pixel_index_word & (1u << id)) >> id) | ((pixel_index_word & (0x10000u << id)) >> (16 + id - 1));\n    ivec3 col = paint_color[pixel_index];\n    return col;\n}\nivec3 ETC2_Planar_mode(int x,int y,int id){\n\t// Each color O, H and V is in 6-7-6 format.\n    int RO = int((bitstring[0] & 0x7Eu) >> 1);\n    int GO = int(((bitstring[0] & 0x1u) << 6) | ((bitstring[1] & 0x7Eu) >> 1));\n    int BO = int(((bitstring[1] & 0x1u) << 5) | (bitstring[2] & 0x18u) | ((bitstring[2] & 0x03u) << 1) | ((bitstring[3] & 0x80u) >> 7));\n    int RH = int(((bitstring[3] & 0x7Cu) >> 1) | (bitstring[3] & 0x1u));\n    int GH = int((bitstring[4] & 0xFEu) >> 1);\n    int BH = int(((bitstring[4] & 0x1u) << 5) | ((bitstring[5] & 0xF8u) >> 3));\n    int RV = int(((bitstring[5] & 0x7u) << 3) | ((bitstring[6] & 0xE0u) >> 5));\n    int GV = int(((bitstring[6] & 0x1Fu) << 2) | ((bitstring[7] & 0xC0u) >> 6));\n    int BV = int(bitstring[7] & 0x3Fu);\n    RO = (RO << 2) | ((RO & 0x30) >> 4);    // Replicate bits.\n    GO = (GO << 1) | ((GO & 0x40) >> 6);\n    BO = (BO << 2) | ((BO & 0x30) >> 4);\n    RH = (RH << 2) | ((RH & 0x30) >> 4);\n    GH = (GH << 1) | ((GH & 0x40) >> 6);\n    BH = (BH << 2) | ((BH & 0x30) >> 4);\n    RV = (RV << 2) | ((RV & 0x30) >> 4);\n    GV = (GV << 1) | ((GV & 0x40) >> 6);\n    BV = (BV << 2) | ((BV & 0x30) >> 4);\n    ivec3 col = ivec3(\n        (x * (RH - RO) + y * (RV - RO) + 4 * RO + 2),\n        (x * (GH - GO) + y * (GV - GO) + 4 * GO + 2),\n        (x * (BH - BO) + y * (BV - BO) + 4 * BO + 2)\n    ) >>2;\n    return col;\n}\nivec3 ETC1_Decode_mode(int x,int y,int id){\n    int differential_mode = int(bitstring[3] & 2u);\n    int flipbit = int(bitstring[3] & 1u);\n    int base_color_subblock1_R;\n    int base_color_subblock1_G;\n    int base_color_subblock1_B;\n    int base_color_subblock2_R;\n    int base_color_subblock2_G;\n    int base_color_subblock2_B;\n\n    if (differential_mode > 0){\n        base_color_subblock1_R = int(bitstring[0] & 0xF8u);\n        base_color_subblock1_R |= ((base_color_subblock1_R & 224) >> 5);\n        base_color_subblock1_G = int(bitstring[1] & 0xF8u);\n        base_color_subblock1_G |= (base_color_subblock1_G & 224) >> 5;\n        base_color_subblock1_B = int(bitstring[2] & 0xF8u);\n        base_color_subblock1_B |= (base_color_subblock1_B & 224) >> 5;\n        base_color_subblock2_R = int(bitstring[0] & 0xF8u);             // 5 highest order bits.\n        base_color_subblock2_R += complement3bitshifted(bitstring[0] & 7u);  // Add difference.\n        base_color_subblock2_R |= (base_color_subblock2_R & 224) >> 5;      // Replicate.\n        base_color_subblock2_G = int(bitstring[1] & 0xF8u);\n        base_color_subblock2_G += complement3bitshifted(bitstring[1] & 7u);\n        base_color_subblock2_G |= (base_color_subblock2_G & 224) >> 5;\n        base_color_subblock2_B = int(bitstring[2] & 0xF8u);\n        base_color_subblock2_B += complement3bitshifted(bitstring[2] & 7u);\n        base_color_subblock2_B |= (base_color_subblock2_B & 224) >> 5;\n    }\n    else{\n        base_color_subblock1_R = int(bitstring[0] & 0xF0u);\n        base_color_subblock1_R |= base_color_subblock1_R >> 4;\n        base_color_subblock1_G = int(bitstring[1] & 0xF0u);\n        base_color_subblock1_G |= base_color_subblock1_G >> 4;\n        base_color_subblock1_B = int(bitstring[2] & 0xF0u);\n        base_color_subblock1_B |= base_color_subblock1_B >> 4;\n        base_color_subblock2_R = int(bitstring[0] & 0x0Fu);\n        base_color_subblock2_R |= base_color_subblock2_R << 4;\n        base_color_subblock2_G = int(bitstring[1] & 0x0Fu);\n        base_color_subblock2_G |= base_color_subblock2_G << 4;\n        base_color_subblock2_B = int(bitstring[2] & 0x0Fu);\n        base_color_subblock2_B |= base_color_subblock2_B << 4;\n    }\n    int table_codeword1 = int((bitstring[3] & 224u) >> 5);\n    int table_codeword2 = int((bitstring[3] & 28u) >> 2);\n    uint pixel_index_word = (bitstring[4] << 24) | (bitstring[5] << 16) | (bitstring[6] << 8) | bitstring[7];\n\n    int pixel_index = int(((pixel_index_word & (1u << id)) >> id) | ((pixel_index_word & (0x10000u << id)) >> (16 + id - 1)));    \n    int r, g, b;\n    if (flipbit == 0)\n    {\n        // Two 2x4 blocks side-by-side.\n        if (id < 8)\n        {\n            // Subblock 1.\n            int modifier = modifier_table[table_codeword1][pixel_index];\n            r = base_color_subblock1_R + modifier;\n            g = base_color_subblock1_G + modifier;\n            b = base_color_subblock1_B + modifier;\n        }\n        else\n        {\n            // Subblock 2.\n            int modifier = modifier_table[table_codeword2][pixel_index];\n            r = base_color_subblock2_R + modifier;\n            g = base_color_subblock2_G + modifier;\n            b = base_color_subblock2_B + modifier;\n        }\n    }\n    else\n    {\n        // Two 4x2 blocks on top of each other.\n        if ((id & 2) == 0)\n        {\n            // Subblock 1.\n            int modifier = modifier_table[table_codeword1][pixel_index];\n            r = base_color_subblock1_R + modifier;\n            g = base_color_subblock1_G + modifier;\n            b = base_color_subblock1_B + modifier;\n        }\n        else\n        {\n            // Subblock 2.\n            int modifier = modifier_table[table_codeword2][pixel_index];\n            r = base_color_subblock2_R + modifier;\n            g = base_color_subblock2_G + modifier;\n            b = base_color_subblock2_B + modifier;\n        }\n    }\n    ivec3 col = ivec3(r,g,b);\n    return col;\n}\n\nvoid GetBlock(ivec2 U){\n    vec4 values = texelFetch(iChannel0,U>>2,0);//x,y,z,w 16,16,16,16\n\tblockdata.block_part_1 = packUnorm2x16(values.st);\n    blockdata.block_part_2 = packUnorm2x16(values.pq);\n}\n\nvoid GetBytes(){\n\tbitstring[0] =  blockdata.block_part_1 & 0xFFu;\n    bitstring[1] = (blockdata.block_part_1 & 0xFF00u) >> 8;\n    bitstring[2] = (blockdata.block_part_1 & 0xFF0000u) >> 16;\n    bitstring[3] = (blockdata.block_part_1 & 0xFF000000u) >> 24;\n    \n    bitstring[4] =  blockdata.block_part_2 & 0xFFu;\n    bitstring[5] = (blockdata.block_part_2 & 0xFF00u) >> 8;\n    bitstring[6] = (blockdata.block_part_2 & 0xFF0000u) >> 16;\n    bitstring[7] = (blockdata.block_part_2 & 0xFF000000u) >> 24;\n}\nivec3 ETC2_Decode(int x,int y){\n\tint id = y + x*4;\n    ivec3 col;\n    if ((bitstring[3] & 2u) != 0u){\n        int R = int((bitstring[0] & 0xF8u));\n        R += complement3bitshifted(bitstring[0] & 7u);\n        int G = int((bitstring[1] & 0xF8u));\n        G += int(complement3bitshifted(bitstring[1] & 7u));\n        int B = int((bitstring[2] & 0xF8u));\n        B += complement3bitshifted(bitstring[2] & 7u);\n        if ((R & 0xFF07) > 0)\n            // T mode.\n            col = ETC2_T_or_H_mode(0,x,y,id);\n        else if ((G & 0xFF07) > 0)\n            // H mode.\n            col = ETC2_T_or_H_mode(1,x,y,id);\n        else if ((B & 0xFF07) > 0)\n            // Planar mode.\n            col = ETC2_Planar_mode(x,y,id);\n        else\n            // with ETC1 mode.\n            col = ETC1_Decode_mode(x,y,id);\n    }\n    else\n        // direct ETC1 mode.\n        col = ETC1_Decode_mode(x,y,id);\n    return clamp(col,0,255);\n}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    ivec2 iU = ivec2(floor(U - 0.5));\n    if(any(greaterThan (iU,ivec2(127)))){\n    \tC = vec4(1./3.);\n        return;\n    }\n    //init and get values\n    GetBlock(iU);\n    GetBytes();\n    iU = iU % 4;\n    ivec3 col = ETC2_Decode(iU.x,iU.y);\n    C = vec4(col,255.)/256.;\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}