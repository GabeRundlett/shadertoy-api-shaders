{
    "Shader": {
        "info": {
            "date": "1655412760",
            "description": "Implementation of Catlike Coding's Direction Flow [url]https://catlikecoding.com/unity/tutorials/flow/directional-flow/ [/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "fsKczd",
            "likes": 6,
            "name": "Directional Flow Bilinear",
            "published": 3,
            "tags": [
                "wave",
                "water",
                "flow",
                "vectorfield",
                "direction",
                "directionalflow"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 464
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2022 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/* \nUpdate2: I created an even faster version Square Directional Flow \n(https://www.shadertoy.com/view/7dtBWl).\n\nUpdate: I created a faster version of this shader by using hexagon pattern\nwith 2 less texture lookups (https://www.shadertoy.com/view/fsGyDG).\n\nThis is an implementation of directional flow. It animates and rotates a \ntexture in multiple directions with a flowmap. This means that water wave \ntextures can flow in multiple directions at the same time, while the waves \npoint in the right direction. This is not possible with trational flow \nanimation, which either has only one wind direction or stretches the texture \nwith temporal blending. The directional flow blends in the spatial dimension. \nThe disadvantage is that directional flow costs 4 flow texture plus 4 texture \nlookups in 2D and 8+8 in 3D, while the temporal blending only needs one flow \ntexture lookup and 2 texture in 2D/3D.\n\nThe earliest iteration of directional flow I could find is from 2010:\nhttps://www.rug.nl/society-business/centre-for-information-technology/research/hpcv/publications/watershader/\nBut CatlikeCoding's version is much better explained, so I recommend reading \nit as a guide:\nhttps://catlikecoding.com/unity/tutorials/flow/directional-flow/\n*/\n\n//#define ShowGrid\n\n// generates pixelated directional flow\nvec3 flowCell(sampler2D tex, sampler2D flow, vec2 uv, \n              vec2 offset, float gridRes, float time) {              \n    // pixelation and square grid\n    uv = uv * gridRes + offset;\n    vec2 grid = fract(uv) - 0.5;\n    vec2 id = ((uv - grid) - offset)/gridRes; \n    \n    // sample flowmap with pixelized id values\n    vec2 flowMap = flowMap(flow, id);\n\n    // animate and rotate texture using flowmap\n    return PanDirectionalTex(tex, grid, flowMap, time); // moving and rotating\n}\n\n// 4 pixaled flowing textures their edges get hidden by each other\nvec3 bilinearDirectionalFlow(sampler2D tex, sampler2D flow, vec2 uv, \n                             float gridRes, float time, float contrast) {\n    vec3 a = flowCell(tex, flow, uv, vec2(.0,.0), gridRes, time);\n    vec3 b = flowCell(tex, flow, uv, vec2(.5,.0), gridRes, time);\n    vec3 c = flowCell(tex, flow, uv, vec2(.0,.5), gridRes, time);\n    vec3 d = flowCell(tex, flow, uv, vec2(.5,.5), gridRes, time);\n\n    // generate alpha\n    vec2 zickzack = abs(2.* fract(uv * gridRes) - 1.);    \n\tfloat wA = (1. - zickzack.x) * (1. - zickzack.y);\n\tfloat wB = zickzack.x * (1. - zickzack.y);\n\tfloat wC = (1. - zickzack.x) * zickzack.y;\n\tfloat wD = zickzack.x * zickzack.y;\n    vec4 alpha = vec4(wA, wB, wC, wD); \n    \n    alpha = smoothContrast(alpha, contrast); // increase contrast\n    \n    // interpolate result\n    vec3 col = a * alpha.x + b * alpha.y + c * alpha.z + d * alpha.w;\n    \n#ifdef ShowGrid\n    // overlaying the edges of the alpha mask\n    float lineThickness = 0.03; // must be smaller than 0.1\n    vec4 mask = step(abs(alpha - 0.1), vec4(lineThickness));\n    return max(mask.xyz, col * (1.-mask.w));\n#else\n    return col;\n#endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {    \n    float time = iTime* .4; // flow speed multiplier\n    float gridRes = 8.; // the number of subdivisions for the sampling of the flowmap\n    float contrast = 2.;  // 1-inf, increased the contrast between the tiles\n    \n    vec2 uv = fragCoord/iResolution.y; //square UV pattern\n\n    vec3 bdf = bilinearDirectionalFlow(iChannel0, iChannel1, uv, gridRes, time, contrast);\n    \n#ifndef  ShowGrid   \n    bdf += vec3(0.0,0.2,0.5); //adding arbitrary watery color\n#endif\n    \n    fragColor = vec4(bdf, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// struct to hold 5 floats at a time of my tiling functions\nstruct tilingVal {\n    vec2 grid;       // Coordinates of the cell in the grid (UV centered on cell)\n    vec2 id;         // ID values\n    float edgeDist;  // Edge distance from the cell's center to its boundaries\n};\n\n// rotates UV by direction\nvec2 rotateUV(vec2 uv, vec2 direction)\n{\n    // Normalize the direction vector\n    direction = normalize(direction);\n\n    // Calculate the rotation matrix\n    mat2 rotationMatrix = mat2(\n        direction.x, -direction.y,\n        direction.y, direction.x\n    );\n\n    // Rotate the UV coordinates\n    return rotationMatrix * uv;\n}\n\n// rotates and animates texture in flowmap direction \nvec3 PanDirectionalTex (sampler2D sam, vec2 uv, vec2 flowMap, float time) {  \n    uv += flowMap*time; // add offset with time\n\n    uv = rotateUV(uv, flowMap); // rotate UVs\n    \n    // scale UVs so the entire texture is visible in a tile\n    // the proper range is ~1-3 and artists don't read, so this is hard set to\n    uv *= 2.0;\n    \n    return texture(sam, uv).xyz; // sample texture\n}\n\n// generates a -1-1 smooth flowmap\nvec2 flowMap(sampler2D sam, vec2 uv) {\n    //a random spot in the noise map, normally you use an actual flowmap\n    vec2 flowMap = texture(sam, uv*0.05).xy;\n    return flowMap * 2. -1.; // constant bias scale for -1 to 1 range\n}\n\n// Increases the steepness of Alpha while preserving 0-1 range and 1 sum\n// See 2 value example (https://www.desmos.com/calculator/dpxa6mytnv)\nvec4 smoothContrast(vec4 alpha, float contrast) {\n    // increase steepness using power\n    vec4 powAlpha = pow(alpha, vec4(contrast));\n    \n    // normalize back to precentage of 1\n    return powAlpha/(powAlpha.x + powAlpha.y + powAlpha.z + powAlpha.w);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}