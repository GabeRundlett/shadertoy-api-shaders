{
    "Shader": {
        "info": {
            "date": "1471876314",
            "description": "sphere",
            "flags": 0,
            "hasliked": 0,
            "id": "ltd3W2",
            "likes": 5,
            "name": "a normal sphere zone",
            "published": 3,
            "tags": [
                "sphere"
            ],
            "usePreview": 0,
            "username": "netgrind",
            "viewed": 529
        },
        "renderpass": [
            {
                "code": "// hacked by cale bradbury, based off original work by...\n\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// A list of usefull distance function to simple primitives, and an example on how to \n// do some interesting boolean operations, repetition and displacement.\n//\n// More info here: https://iquilezles.org/articles/distfunctions\n\n#define time mod(iTime,1.)\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n#if 0\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n#else\n    float d1 = q.z-h.y;\n    float d2 = max((q.x*0.866025+q.y*0.5),q.y)-h.x;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n#if 0\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n#else\n    float d1 = q.z-h.y;\n    float d2 = max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n#if 0\n\treturn max( max( dot(q,c.xy), p.y), -p.y-c.z );\n#else\n    float d1 = -p.y-c.z;\n    float d2 = max( dot(q,c.xy), p.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif    \n}\n\nfloat length2( vec2 p )\n{\n\treturn sqrt( p.x*p.x + p.y*p.y );\n}\n\nfloat length6( vec2 p )\n{\n\tp = p*p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/6.0 );\n}\n\nfloat length8( vec2 p )\n{\n\tp = p*p; p = p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/8.0 );\n}\n\nfloat sdTorus82( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length2(p.xz)-t.x,p.y);\n  return length8(q)-t.y;\n}\n\nfloat sdTorus88( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length8(p.xz)-t.x,p.y);\n  return length8(q)-t.y;\n}\n\nfloat sdCylinder6( vec3 p, vec2 h )\n{\n  return max( length6(p.xz)-h.x, abs(p.y)-h.y );\n}\n\n//----------------------------------------------------------------------\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nvec3 opTwist( vec3 p, float freq, float phase )\n{\n    float  c = cos(freq*p.y+phase);\n    float  s = sin(freq*p.y+phase);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\n//----------------------------------------------------------------------\n\nvec2 map( in vec3 pos )\n{\n    \n   vec2 res =  vec2(100.,0.);\n\tvec3 p = pos;           \n    pos.xyz = mod(pos.xyz-.5,1.)-.5;  \n    \n   \t//pos.xyz = opTwist(pos.xzy,3.,0.);\n    float s = opS(sdSphere(    pos+vec3(0.,0.,0.), .4),\n\t\t             sdBox(  pos+vec3(0.,0.,.5), vec3(0.5,0.1+sin((p.z-time)*5.)*.05,1.0))\n\t                 );\n    \n    s = opS(s,\n\t\t             sdBox(  pos+vec3(0.,0.,.5), vec3(0.1+cos((p.z-time)*5.)*.05,0.5,1.0))\n\t                 );\n    s = opS(\ts, sdCylinder( pos.xzy, vec2 (.25,1.01)));\n    res = opU( res, vec2( s, 50. ) );\n    \n\n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 0.1;\n    float tmax = 20.0;\n    \n#if 0\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n\tfloat precis = 0.000001;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<128; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=m;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.0001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0. );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\n\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.8, 0.9, 1.0);\n    vec2 res = castRay(ro,rd);\n    vec3 pos = ro + res.x*rd;\n    vec3 nor = calcNormal( pos);\n        \n    col = 1.0-res.xxx*.2;\n    col = vec3( clamp(col,0.0,1.0) );\n    col = col*abs(nor*.5+.5);\n\t//col = pow( col, vec3(0.4545) );\n    col = 1.0-col;\n    \n\treturn col;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvec4 getColor(vec2 q){\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\t\t \n\n\t// camera\t\n\tvec3 ro = vec3( 0.0,.0,+time );\n\tvec3 ta = ro+vec3(0., .0, 1.0 );\n\t\n\t// camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    // ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,2.5) );\n    \n    // render\t\n    return vec4(render( ro, rd ), 1.);\n}\n\n\nmat3 Gx = mat3(-1.0, 0.0, 1.0,\n               -2.0, 0.0, 2.0,\n               -1.0, 0.0, 1.0);\n\nmat3 Gy = mat3(-1.0, -2.0, -1.0,\n               0.0, 0.0, 0.0,\n               1.0, 2.0, 1.0);\n\n\nfloat applyKernel(mat3 gx, mat3 gy,  vec2 uv) {\n    float final = 0.0;\n    \n   \n    float horizontal = 0.0;\n    float vertical = 0.0;\n    \n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n          vec2 d = vec2(float(i), float(j)) / iResolution.xy;\n          float averagePixel = dot(getColor( uv+d).xyz, vec3(0.33333));\n            \n          horizontal += averagePixel * gx[i][j];\n          vertical += averagePixel * gy[i][j];            \n        }\n    }\n    \n    final = sqrt(horizontal * horizontal + vertical * vertical);\n    return final;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x-=.5;\n    uv.x = abs(uv.x);\n    uv.x+=.5;\n    uv.x = 1.0-uv.x;\n    \n    vec4 color = getColor( uv);\n    //color.rgb = sin(color.rgb*3.+4.5)*.5+.5;;\n    color = pow(color,vec4(.5));\n    float edgeIntensity = applyKernel(Gx, Gy, uv);\n    edgeIntensity *=1.;\n    \n    vec4 edgeColor = mix(        \n        vec4( 1.1),\n        color,\n        1.0-edgeIntensity);\n    \n    color = edgeColor;\n    \n\tfragColor = color;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}