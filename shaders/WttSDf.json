{
    "Shader": {
        "info": {
            "date": "1581872090",
            "description": "compute the correlation between the image and the region around the mouse.\nred: positive correlation blue : anti-correlation\n\nstrange: N=32 faster than 31 and 33 !",
            "flags": 0,
            "hasliked": 0,
            "id": "WttSDf",
            "likes": 6,
            "name": "auto-correlation in texture",
            "published": 3,
            "tags": [
                "statistics",
                "autocorrelation"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 426
        },
        "renderpass": [
            {
                "code": "#define N 32   // correlation window size\n\n//#define T(U)   texelFetch(iChannel0, ivec2(U*1.), 0).x           // pixel precision\n//#define T(U)   texture(iChannel0, (U)/R ).x                      // fit to screen\n  #define T(U)   smoothstep(0.,1., texture(iChannel0, (U)/R ).x )  // amplify contrasts\n//#define T(U) ( texture(iChannel0, (U)/R ) - texture(iChannel0, (U+1.)/R ) ).x // analyse Sobel\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U -= .5;\n    vec2 M = iMouse.xy, P,\n         R = iResolution.xy; \n    if (length(M)<15.) M = floor( R*(.5 + .3*cos(iTime+vec2(0,11))) );\n    \n    float m0=0., m1=0., m01=0., m00=0., m11=0., c, v0, v1, v01, n2=float(N*N);\n    for (int k=0; k < N*N; k++) {               // compute all moments around M,U and cross\n        P = vec2(k%N,k/N) - float(N+1)/2.;\n        v0   = T(M+P);                          // texture around mouse\n        v1   = T(U+P);                          // texture around pixel\n        m0  += v0;                              // E(X0)\n        m1  += v1;                              // E(X1)\n        m01 += v0*v1;                           // E(X0.X1)\n        m00 += v0*v0;                           // E(X0²)\n        m11 += v1*v1;                           // E(X1²)\n    }\n    m0/=n2; m1/=n2; m01/=n2; m00/=n2; m11/=n2;  // moments of order 1 & 2\n    v0  = m00 - m0*m0;                          // variance X0\n    v1  = m11 - m1*m1;                          // variance X1\n    v01 = m01 - m0*m1;                          // covariance\n    c   = v01 / sqrt(v0*v1);                    // correlation\n    \n    O = vec4( c , .3*T(U), -c, 1 ) \n        + pow(max(0.,c),8.); // emphase maximum. variant: abs(c)\n    \n    U = abs(U-M) - floor(float(N)/2.*R.y/iChannelResolution[0].y);  // draw stat window around mouse\n    if (U.x*U.y==0. && ( U.x<0. || U.y<0.) ) O +=.3;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}