{
    "Shader": {
        "info": {
            "date": "1726620166",
            "description": "A decent raytracer with reflections. I don't have a proper BDRF for the rough reflections (currently I just add a roughly uniform random vector), and it's got some bugs, but I'm pretty happy overall :)",
            "flags": 32,
            "hasliked": 0,
            "id": "l3XyRf",
            "likes": 5,
            "name": "Bingle Decent Raytracing",
            "published": 3,
            "tags": [
                "raytracing"
            ],
            "usePreview": 0,
            "username": "Bingle",
            "viewed": 158
        },
        "renderpass": [
            {
                "code": "// Raytracing Boilerplate by Bingle\n/* Axis orientation (from default camera view):\n\n             ^ +Y\n             |\n             |\n     +X      |\n     <-------+\n              \\\n               \\| +Z\n              ‾‾\n*/\n// See Buffer A for the actual code\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    fragColor = sqrt(texture(iChannel0,fragCoord/iResolution.xy));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "struct cam{\n    vec3 pos;\n    vec3 dir;\n    vec3 up;\n    float viewDist;\n};\n\nstruct ray{\n    vec3 pos;\n    vec3 dir;\n};\n\nstruct hit{\n    bool collided;\n    vec3 pos;\n    vec3 norm;\n    vec3 col;\n    float rough;\n    bool emit;\n};\n\n// Takes UV coords -0.5 to 0.5 (or in whatever centered range really) and returns a ray\nray getCamRay(cam c,vec2 uv){\n    vec3 side = cross(c.dir,c.up);\n    vec3 up = cross(side,c.dir);\n    \n    return ray(c.pos,normalize(c.dir*c.viewDist + side*uv.x + up*uv.y));\n}\n\n// Returns the point at distance t along ray r\nvec3 at(ray r,float t){\n    return r.pos + r.dir*t;\n}\n\n// Taken from: https://raytracing.github.io/books/RayTracingInOneWeekend.html\n// Could be optimized more, but works well for testing\nfloat sphere_intersect(vec3 center, float radius,ray r){\n    vec3 oc = r.pos - center;\n    \n    float a = dot(r.dir,r.dir);\n    float b = 2.0 * dot(oc,r.dir);\n    float c = dot(oc,oc) - radius*radius;\n    \n    float desc = (b*b) - 4.0*a*c;\n    \n    if (desc<0.0){\n        return -1.0;\n    }else{\n        return (-b - sqrt(desc)) / (2.0*a);\n    }\n}\n\nfloat plane_intersect(vec4 plane, ray r){\n    return dot(plane,vec4(r.pos,1.0))/-dot(plane.xyz,r.dir);\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nhit test_scene(ray r,samplerCube sky,int iFrame){\n    hit result = hit(false,vec3(0.0),vec3(0.0),vec3(1.0,0.0,1.0),0.1,false);\n    int sceneNum = (iFrame/120);\n    float minDist = 100000000.0;\n    for (int x=0;x<10;x++){\n        for (int y=0;y<10;y++){\n            float rad = hash12(vec2(x+10*(iFrame/120),y))*0.5;\n            float dist = sphere_intersect(vec3(x,rad,y),rad,r);\n            if (dist>0.0 && dist<minDist){\n                minDist = dist;\n                result.pos = at(r,dist);\n                result.norm = normalize(result.pos-vec3(x,rad,y));\n                result.col = hash32(vec2(x,y));\n                result.collided = true;\n                result.rough = pow(hash12(vec2(x-10*(iFrame/120+1),y)),2.0);\n                if (hash12(vec2(x,y+10*(iFrame/120+2)))<0.05){\n                    result.emit = true;\n                    result.col*=5.0;\n                }\n            }\n        }\n    }\n    if (!result.collided){\n        float dist = plane_intersect(vec4(0.0,1.0,0.0,0.0),r);\n        if (dist>0.0){\n            result.pos = at(r,dist);\n            result.norm = vec3(0.0,1.0,0.0);\n            result.col = vec3(1.0);\n            if ((mod(result.pos.x,2.0)>1.0)==(mod(result.pos.z,2.0)>1.0)){\n                result.col = vec3(0.3);\n            }\n            result.rough = 0.8;\n            result.collided = true;\n        }\n    }\n    if (!result.collided){\n        result.col = texture(sky,r.dir).rgb;\n    }\n    return result;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec3 trace(ray r,float iTime,int iFrame){\n    hit result = test_scene(r,iChannel0,iFrame);\n    vec3 col = result.col;\n    if (result.collided && !result.emit){\n        for (int i=0;i<4;i++){\n            vec4 noise = hash44(vec4(r.dir+r.pos,iTime));\n            vec3 rough = normalize(noise.xyz-vec3(0.5))*noise.w;\n            r = ray(\n                result.pos+result.norm*0.0001,\n                reflect(r.dir,result.norm)+rough*result.rough\n            );\n            result = test_scene(r,iChannel0,iFrame);\n            col*=result.col;\n            if (!result.collided || result.emit){\n                break;\n            }\n        }\n        if (result.collided && !result.emit){ // Ray did not reach the sky\n            col = vec3(0.0);\n        }\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    cam camera = cam(vec3(4.5,4.0,0.0),normalize(vec3(0,-1,1)),vec3(0,1,0),0.5);\n    \n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.0);\n    \n    ray r = getCamRay(camera,uv+hash23(vec3(uv,iTime))/iResolution.xy);\n    \n    fragColor = mix(vec4(trace(r,iTime,iFrame),1.0),texelFetch(iChannel1,ivec2(fragCoord),0),1.0-1.0/(mod(float(iFrame),120.0)+1.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}