{
    "Shader": {
        "info": {
            "date": "1606330403",
            "description": "Elipse Mic TOMY",
            "flags": 4,
            "hasliked": 0,
            "id": "tdtfWs",
            "likes": 9,
            "name": "Audio Eclipse TOMY",
            "published": 3,
            "tags": [
                "tomy"
            ],
            "usePreview": 0,
            "username": "TOMY",
            "viewed": 508
        },
        "renderpass": [
            {
                "code": "// Fork of \"Audio Eclipse\" by airtight. https://shadertoy.com/view/MdsXWM\n// 2020-10-08 16:15:41\n\n#define SOUND_MULTIPLIER 1.0\nconst float dots = 50.; //number of lights\nconst float radius = .35; //radius of light ring\nconst float brightness = 0.03;\n\n//convert HSV to RGB\nvec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\t\t\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t\n\tvec2 p=(fragCoord.xy-.5*iResolution.xy)/min(iResolution.x,iResolution.y);\n    vec3 c=vec3(0,0,0.1); //background color\n\t\t\n    for(float i=0.;i<dots; i++){\n\t\n\t\t//read frequency for this dot from audio input channel \n\t\t//based on its index in the circle\n\t\t//float vol =  texture(iChannel0, vec2(i/dots, 0.0)).x;\n        float vol = SOUND_MULTIPLIER * texture(iChannel0, vec2(i/dots, 0.0)).x;\n\t\tfloat b = vol * brightness;\n\t\t\n\t\t//get location of dot\n        float x = radius*cos(2.*3.14*float(i)/dots);\n        float y = radius*sin(2.*3.14*float(i)/dots);\n        vec2 o = vec2(x,y);\n\t    \n\t\t//get color of dot based on its index in the \n\t\t//circle + time to rotate colors\n\t\tvec3 dotCol = hsv2rgb(vec3((i + iTime*10.)/dots,1.,1.0));\n\t    \n        //get brightness of this pixel based on distance to dot\n\t\tc += b/(length(p-o))*dotCol;\n    }\n\t\n    //black circle overlay\t   \n\tfloat dist = distance(p , vec2(0));  \n\tc = c * smoothstep(0.43, 0.46, dist);\n\t \n\tfragColor = vec4(c,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}