{
    "Shader": {
        "info": {
            "date": "1667809808",
            "description": "brush",
            "flags": 16,
            "hasliked": 0,
            "id": "csj3Ry",
            "likes": 0,
            "name": "brushlsw",
            "published": 3,
            "tags": [
                "image"
            ],
            "usePreview": 0,
            "username": "lsw",
            "viewed": 99
        },
        "renderpass": [
            {
                "code": "const float KEY_1 = 49.5/256.0;\nconst float KEY_2 = 50.5/256.0;\nconst float KEY_3 = 51.5/256.0;\nconst float KEY_4 = 52.5/256.0;\n\nconst float KEY_Q = 81.5/256.0;\nconst float KEY_W = 87.5/256.0;\nconst float KEY_E = 69.5/256.0;\nconst float KEY_R = 82.5/256.0;\n\nvec3 HSVtoRGB(vec3 hsv);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 pointer = iMouse.xy / iResolution.xy;\n //   fragColor =vec4(0);\n    \n    \n    float Q = texture( iChannel3, vec2( KEY_Q, 0.75 )).r;\n    float W = texture( iChannel3, vec2( KEY_W, 0.75 )).r;\n    \n    vec2 brush = vec2(2.) * iResolution.xy / iResolution.xx;\n    if( Q > .5 )\n        brush.x *= 8.;\n    if( W > .5 )\n        brush.y *= 8.;\n    \n    if( (length( (uv - pointer) * brush ) > 0.1 || iMouse.z < 0.) && (uv.x < 0.95 && uv.y < 0.95) )\n        discard;\n    pointer.x = dFdx( fragColor.x ) *1000.;\n    float pallette = mod( iTime, 8. );\n    vec2 localuv = uv - pointer + .1;\n    \n    float tex1 = texture( iChannel3, vec2( KEY_1, 0.75 )).r;\n    float tex2 = texture( iChannel3, vec2( KEY_2, 0.75 )).r;\n    float tex3 = texture( iChannel3, vec2( KEY_3, 0.75 )).r;\n    float tex4 = texture( iChannel3, vec2( KEY_4, 0.75 )).r;\n    \n    if( tex2 > .5 )\n        fragColor.rgb += texture( iChannel0, localuv ).rgb;\n    if( tex3 > .5 )\n        fragColor.rgb += texture( iChannel1, localuv ).rgb;\n    if( tex4 > .5 )\n        fragColor.rgb += texture( iChannel2, localuv ).rgb;\n    \n    if( !(tex1 > .5) )\n    {\n        vec3 hsv = vec3(mod(iTime, 10.) / 10., 0.5, 0.5 );\n        fragColor.rgb += HSVtoRGB( hsv ) / 255.;\n    }\n    fragColor.rgb *= abs(2.0 - mod( iTime, 4. ));\n\tfragColor.a = 1.;\n}\n\n\n\nvec3 HSVtoRGB(vec3 hsv)\n{\n\tfloat R, G, B;\n\tfloat H = hsv.x;\n\tfloat S = hsv.y;\n\tfloat V = hsv.z;\n\tif( S == 0.0 )\n    {\n        R = G = B = floor(V * 255.0);\n    }\n    else\n    {\n        float vH = H * 6.0;\n        float vI = floor( vH );\n        float   v = floor(V * 255.0);\n        float  v1 = floor(V * (1.0 - S) * 255.0);\n        float  v2 = floor(V * (1.0 - S * (vH - vI)) * 255.0);\n        float  v3 = floor(V * (1.0 - S * (1.0 - (vH - vI))) * 255.0);\n\n        if     ( vI == 0.0 ) { R =  v; G = v3; B = v1; }\n        else if( vI == 1.0 ) { R = v2; G =  v; B = v1; }\n        else if( vI == 2.0 ) { R = v1; G =  v; B = v3; }\n        else if( vI == 3.0 ) { R = v1; G = v2; B =  v; }\n        else if( vI == 4.0 ) { R = v3; G = v1; B =  v; }\n        else               { R =  v; G = v1; B = v2; }\n    }\n\treturn vec3(R,G,B);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}