{
    "Shader": {
        "info": {
            "date": "1637682023",
            "description": "quite happy with this one",
            "flags": 0,
            "hasliked": 0,
            "id": "7tGGDW",
            "likes": 11,
            "name": "Log Polar Cog Distortion",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 305
        },
        "renderpass": [
            {
                "code": "float thc(float a, float b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nfloat ths(float a, float b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec2 thc(float a, vec2 b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nvec2 ths(float a, vec2 b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    uv /= cosh(length(uv) * 1.1);\n\n    float a = atan(uv.y, uv.x);\n    float r = length(uv);\n    \n    uv = vec2(thc(2.,a), thc(2., 0.1 * thc(3.,10. * a + iTime) + log(r) - 0.5 * iTime));\n\n    float sc = 0. + 1.5 * (1. + 0.1 * thc(3., log(r) + 1. * iTime)) * thc(1., 4. * r + iTime);\n    //sc = tan(sc);\n    //vec2 ipos = floor(sc * uv) + 0.5;\n    vec2 fpos = fract(sc * uv) - 0.5;\n    \n    float d = length(fpos);\n    float v = 0.5 + 0.5 * cos(6. * uv.y - iTime);    \n    float k = 0.4 * (1.-v); // anything * (1.-v) works\n    float s = smoothstep(-k,k,v-d) - smoothstep(-k,k, 0.3-d); // was 0.1\n    \n    // s * X + ..., higher X = more distortion\n    s = cos(s*4. + 2. * a + 8. * r + iTime);\n    vec3 col = s * pal(uv.y + s, vec3(1.), vec3(1.), vec3(1.), vec3(0.,uv.y,2. * uv.y));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}