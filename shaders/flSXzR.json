{
    "Shader": {
        "info": {
            "date": "1626872560",
            "description": "i have stolen together some algorithms to test if i can replicate something i did in c# by stealing togehter algorithms.\n\ni triedto do a voxelspace like implementation, but in a fragment shader raytracing makes way more sence. so meh",
            "flags": 96,
            "hasliked": 0,
            "id": "flSXzR",
            "likes": 11,
            "name": "Islands in wavy shallow water",
            "published": 3,
            "tags": [
                "terrain",
                "water",
                "islands"
            ],
            "usePreview": 0,
            "username": "Arrangemonk",
            "viewed": 753
        },
        "renderpass": [
            {
                "code": "// Created by Arrangemonk 2021, arrangemonk@gmail.com\n// where i have a clear source i added shadertoy link\n\n\nvec3 rampBiome(float x){\n    vec3 col = biome[0];\n    float step_size = 1./(float(biome.length())-1.);\n    for(int i = 0; i < biome.length()-1; i++){\n        col =mix(col, biome[i+1], linearstep(float(i)*step_size, (float(i)+1.)*step_size, x));\n    }\n    return col;\n}\n \n vec3 rampSky(float x){\n    vec3 col = sky[0];\n    float step_size = 1./(float(sky.length())-1.);\n    for(int i = 0; i < sky.length()-1; i++){\n             col =mix(col, sky[i+1], linearstep(float(i)*step_size, (float(i)+1.)*step_size, x));\n    }\n    return col;\n}\n\nfloat h(in vec2 uv,bool water)\n    {\n    uv = uv * 0.005;\n    float result = texture(iChannel0,uv).x - texture(iChannel3,uv*45.).x *0.025;\n    if(!water)\n        result = max(waterline + waterripple(uv*5.,iChannel3,iTime).z *0.03,result);\n    return result ;\n    }\n\n//https://www.shadertoy.com/view/3sSSW1\nvec3 texNormalMap(in vec2 uv,float scale)\n{ \n    float p  = h(uv,true);\n    float h1 = h(uv + vec2(scale,0),true);\n    float v1 = h(uv +  vec2(0,scale),true);\n       \n   \tvec2 normal = (p - vec2(h1, v1));\n    \n    normal *= normalStrength;\n    normal += 0.5;\n    \n    return normalize(vec3(normal, 1.));\n}\n\n\n\nvec3 color( in vec2 uv,float height)\n{ \n    return mix(rampBiome(height*0.25),mix(fbm(uv,iChannel1,octaves).rgb,rampBiome(height*0.25),0.75),height/6. +0.1);\n}\n\nvec3 target(in vec3 origin,in vec3 direction,in float distance)\n    {\n        return origin + (direction * distance);\n    }\n\n//lost link, most likely iqs doing\nfloat RayMarch(vec3 origin,vec3 direction,in bool water, out bool result)\n{\n    float t = 0.;\n    for (int i = 0; i < 72; i++)\n    {\n        vec3 rp = target(origin,direction,t);\n        float h = rp.y - (h(rp.xz,water));\n        if (abs(h) < (.0015 * t) || t > DrawDistance) break;\n        t += h;\n    }\n    result = t < DrawDistance;\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    time = iTime;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 sunDir = normalize(vec3(6.,-3., 2.));\n    \n    //low resolution \n   //  uv = floor(uv*vec2(320.,240.))/vec2(320.,240.);\n    float aspect = iResolution.x / iResolution.y;\n    \n    vec3 rd = normalize(vec3((1.- 2. * uv.x) * aspect + sin(time * 0.1)*0.2+sin(time *3.)*.01,-1. + 2. * uv.y-0.6+sin(time *3.)*.01, -3.0));\n    vec3 ro = vec3(sin(time * 0.1)*3.+sin(time *3.)*.01,5.+sin(time *5.)*.009, -time+sin(time *4.)*.011);\n\n    bool result;\n    float distance = RayMarch(ro,rd,false,result);\n    float distfract = clamp(distance*DrawDistanceFract,0.,1.);\n    \n     vec3 c = rampSky((uv.y-0.4)*1.1);\n     if(result)\n     {\n         vec3 point = target(ro,rd,distance);\n         float height =  h(point.xz,false);\n         if(h(point.xz,true) < height) // why water isnt at 0 u ask? i winged it, thats why\n         {\n            vec3 waternormal = normalize(waterripple(point.xz * 0.02 + distance * 0.002,iChannel3,iTime) + vec3(0,0,2.+ (distfract * distfract) * 10.));\n            vec3 wd = refract(rd,waternormal, .97);\n            vec3 wr = normalize(reflect(rd,waternormal));\n             float wdistance = RayMarch(point,wd,true,result);\n             float wdistfract = clamp(wdistance*DrawDistanceFract,0.,1.);\n             vec3 wp = target(point,wd,wdistance);\n             float wheight =  h(wp.xz,true)-0.1;\n             \n             float hilight = clamp((dot(wr,waternormal) * 0.5 + 0.5)* distance *0.035,0.,1.);\n             //vec3 skyreflect = rampSky(1.1 -wr.z * 0.6);\n             vec3 skyreflect = rampSky(1.1 - texture(iChannel2,-wr).r* 0.6);\n             skyreflect = mix(skyreflect,texture(iChannel2,wr).rgb,.5);\n             \n             float wsun = dot( texNormalMap(wp.xz,1.), sunDir);\n             wsun += dot( texNormalMap(wp.xz,0.25), sunDir )*2.;\n             wsun += dot( texNormalMap(wp.xz,0.02), sunDir )*4.,\n             wsun *= 0.143;\n             wsun = clamp( wsun, 0.0, 1.0 )-0.6;\n             float cst = caustics(wp.zx * 5. + wp.y,time*2.)*0.4 * clamp(wdistance,0.,1.)*clamp(wp.y/8.,0.,1.);\n             \n             vec3 c1 = mix(color(wp.xz,mix(3.-wdistfract*10.,wheight,.2)) + wsun,skyreflect,hilight) +cst;\n             //vec3 c1 = vec3(cst,cst,cst);\n       \n             c = mix(c1,c,distfract);\n             c = foam(point.xz + waternormal.xy *0.15 - vec2(0.2,0.2)*time,iChannel3,iChannel1,c,wheight);\n         }\n         else{\n             float sun = dot( texNormalMap(point.xz,1.), sunDir);\n             sun += dot( texNormalMap(point.xz,0.25), sunDir )*2.;\n             sun += dot( texNormalMap(point.xz,0.02), sunDir )*4.,\n             sun *= 0.143;\n             sun = clamp( sun, 0.0, 1.0 )-0.6;\n             c = mix(color(point.xz,height) + sun,c,distfract);\n             c += foamborder(point.xz - vec2(0.1,0.1)*time,iChannel3,height*height -5.45);\n         }\n     }\n    fragColor = vec4(c,1.0);\n\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//https://www.shadertoy.com/view/XttyRX\n#define tau 6.28318530718\n\n#define tile_factor .25\n#define noise_factor 0.03\n#define textureOffset 2.\n#define heightMapResolution iChannelResolution[0]\n#define normalStrength 10.0\n\nfloat DrawDistance = 100.0;\nfloat DrawDistanceFract = 0.01;\nfloat angle = 0.0;\nfloat time;\nfloat waterline = 2.9;\nfloat octaves = 16.;\n\n \nconst vec3 biome[] = vec3[](\n\nvec3(  0.,  34., 154.) /255.,\nvec3(  8.,  65., 159.) /255.,\nvec3( 15., 110., 161.) /255.,\nvec3( 77., 178., 179.) /255.,\nvec3(250., 252., 227.) /255.,\nvec3( 28., 150.,  74.) /255.\n);\n\nconst vec3 sky[] =vec3[](\nvec3(207., 107.,  40.) / 255.,\nvec3(207., 107.,  40.) / 255.,\nvec3(207., 107.,  40.) / 255.,\nvec3(240., 200., 150.) / 255.,\nvec3(195., 216., 224.) / 255.,\nvec3(147., 198., 237.) / 255.,\nvec3( 70., 130., 200.) / 255.,\nvec3(  1.,  97., 180.) / 255.\n);\n\nfloat sin01(float x) {\n\treturn (sin(x*tau)+1.)/2.;\n}\nfloat cos01(float x) {\n\treturn (cos(x*tau)+1.)/2.;\n}\n\n//https://www.shadertoy.com/view/Xt23zV\nfloat linearstep(float edge0, float edge1, float x)\n{\n    return  clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n}\n\nfloat foamborder(vec2 uv,sampler2D iChannel2,float height)\n{\n    float border = clamp(abs(1./(height -waterline))*0.1,0.,1.);\n    return border * border * border * texture( iChannel2, uv * 0.5 ).x * 0.5;\n}\n\n\n//foam from https://www.shadertoy.com/view/ldj3Dm\nvec3 foam (vec2 uv,sampler2D iChannel2,sampler2D iChannel3,vec3 col,float height)\n{\n    float border = foamborder(uv,iChannel2,height);\n\tfloat sur = texture( iChannel3,  0.05 * uv ).x;\n\tsur = smoothstep( 0.5, 1.0, sur )*0.5 + 0.5*sur*sur*smoothstep(0.2,1.0,texture( iChannel2, uv * 0.5 ).x);\n\treturn mix( col, vec3(1.0), border + sur);\n}\n\n\n// rand func from theartofcode (youtube channel)\nvec2 rand01(vec2 p) {\n    vec3 a = fract(p.xyx * vec3(123.5, 234.34, 345.65));\n    a += dot(a, a+34.45);\n    \n    return fract (vec2(a.x * a.y, a.y * a.z));\n}\n\nfloat circ(vec2 uv, vec2 pos, float r) {\n    return smoothstep(r, 0., length(uv - pos));\n}\n\nfloat smoothFract(float x, float blurLevel) {\n\treturn pow(cos01(x), 1./blurLevel);\n}\n\nfloat manDist(vec2 from, vec2 to) {\n    return abs(from.x - to.x) + abs(from.y - to.y);\n}\n\n\nfloat distFn(vec2 from, vec2 to) {\n\tfloat x = length (from - to);\n    return pow (x, 4.);\n}\n\nfloat voronoi(vec2 uv, float t, float seed, float size) {\n    \n    float minDist = 100.;\n    \n    float gridSize = size;\n    \n    vec2 cellUv = fract(uv * gridSize) - 0.5;\n    vec2 cellCoord = floor(uv * gridSize);\n    \n    for (float x = -1.; x <= 1.; ++ x) {\n        for (float y = -1.; y <= 1.; ++ y) {\n            vec2 cellOffset = vec2(x,y);\n            \n            // Random 0-1 for each cell\n            vec2 rand01Cell = rand01(cellOffset + cellCoord + seed);\n\t\t\t\n            // Get position of point\n            vec2 point = cellOffset + sin(rand01Cell * (t+10.)) * .5;\n            \n\t\t\t// Get distance between pixel and point\n            float dist = distFn(cellUv, point);\n    \t\tminDist = min(minDist, dist);\n        }\n    }\n    \n    return minDist;\n}\n\nvec3 fbm(in vec2 uv,sampler2D tex, float octaves)\n{\nuv = uv * 0.07;\nfloat factor = 2.;\nfloat facorinverse = 0.5;\nvec3 result = texture(tex,uv).rgb;\n    for(float i =0.; i < octaves;i++)\n    {\n    result += (mod(i,1.)*2.-1.)* (texture(tex,uv*factor).rgb)* facorinverse;\n    factor *= 2.;\n    facorinverse *= 0.5;\n    }\n    return result;\n}\n\n\n    //https://www.shadertoy.com/view/4sXXRj\nvec3 waterripple(vec2 uv, sampler2D tex,float iTime)\n    {\n\tvec2 p = uv * vec2(-1.0, -2.0);\n    \n    \tfloat t = iTime/300.0;\n\t\n\t\tvec2 waterCoord = vec2(p.x, 1.0-uv.y);\n\t\tvec2 texCoordNormal0 = waterCoord * tile_factor;\n\t\ttexCoordNormal0 += t ;\n\t\t\n\t\tvec2 texCoordNormal1 = waterCoord * tile_factor;\n\t\ttexCoordNormal1.s -= t ;\n\t\ttexCoordNormal1.t += t ;\n\t\t\n\t\tvec3 normal0 = texture(tex, texCoordNormal0).rgb * 2.0 - 1.0;\n\t\tvec3 normal1 = texture(tex, texCoordNormal1).rgb * 2.0 - 1.0;\n\t\treturn normalize(normal0 + normal1);\n    }\n    \nmat2 rotationMatrix(float angle)\n{\n    float s=sin(angle), c=cos(angle);\n    return mat2( c, -s, s, c );\n}\n\nfloat caustics(vec2 uv,float time)\n{\n    float t = time * .35;\n    \n    float amplitude = .12;\n    float turbulence = .5;\n    vec2 uva = uv.xy + sin01(uv.x*turbulence + t) * amplitude;\n    uva.xy -= cos01(uv.y*turbulence + t) * amplitude;\n    vec2 uvb = uv.xy + sin01(uv.x*turbulence + t*1.3-2.) * amplitude * 0.7;\n    uvb.xy -= cos01(uv.y*turbulence + t*1.-2.3) * amplitude * 0.7;\n    uvb = uvb * rotationMatrix(1.04);\n    vec2 uvc = uv.xy + sin01(uv.x*turbulence + t*1.4 + 3.) * amplitude * 0.3;\n    uvc.xy -= cos01(uv.y*turbulence + t*1.4 + 3.) * amplitude * 0.3;\n    uvc = uvc * rotationMatrix(2.08);\n    \n    float v;\n    v += voronoi(uva, t * 2., 0.5, 2.5)/2.;\n    v += voronoi(uvb, t * 3., 0., 3.) / 2.;\n    v += voronoi(uvc, t * 4., 0., 4.) / 2.;\n    \n    return v;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec2 R = vec2(0);\n\nfloat h(in vec2 uv)\n{\nfloat factor = 2.;\nfloat result = 1.2 -texture(iChannel0,uv).r;\n    for(float i =0.; i < octaves;i++)\n    {\n    result += (mod(i,1.)*2.-1.)*(texture(iChannel0,uv*factor).r)/factor;\n    factor *= 2.;\n    }\n    result = result *5. -.4;\n    return result;\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    \n   if (R != iResolution.xy) {\n            R = iResolution.xy;\n            vec2 uv = U/R;\n            float height = h(uv);\n            O = vec4(height,height,height,1.0);\n        \n        return;\n    }\n    \n\tO = texelFetch(iChannel1,ivec2(U), 0);\n\n }\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 28043,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/extandnb/meteor?in=royaltyfreemusic-nocopyrightmusic/sets/creative-commons-music"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}