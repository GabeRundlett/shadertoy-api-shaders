{
    "Shader": {
        "info": {
            "date": "1567149819",
            "description": "Partially reflective varying polyhedra (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "3ljSDV",
            "likes": 17,
            "name": "Reflective Polyhedra",
            "published": 3,
            "tags": [
                "optics",
                "fresnel",
                "reflect",
                "polyhedron"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 472
        },
        "renderpass": [
            {
                "code": "// \"Reflective Polyhedra\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Partially reflective varying polyhedra (mouseable).\n\n// Polyhedra based on knighty's \"Polyhedron again\" (https://www.shadertoy.com/view/XlX3zB)\n\nfloat PrSphDf (vec3 p, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\n\nvec3 ltDir, vc, pMid, vp[3];\nfloat tCur, dstFar;\nint idObj, pType;\nbool showFace;\nconst int idFace = 1, idEdge = 2, idSph = 3;\nconst float pi = 3.14159, phi = 1.618034;\n\nvoid PInit ()\n{\n  vec3 c;\n  float cp, sp, t;\n  t = 0.02 * tCur;\n  pType = int (mod (t, 3.)) + 3;\n  c = 0.5 * (1. + sin (vec3 (1., 2., 4.) * 4. * pi * t));\n  cp = cos (pi / float (pType));\n  sp = sqrt (0.75 - cp * cp);\n  vc = vec3 (-0.5, - cp, sp);\n  vp[0] = vec3 (0., 0., 1.);\n  vp[1] = vec3 (sp, 0., 0.5);\n  vp[2] = vec3 (0., sp, cp);\n  pMid = (length (c) > 0.) ? normalize ((c.x * vp[0] + c.y * vp[1] + c.z * vp[2])) : vec3 (0.);\n  vp[1] = normalize (vp[1]);\n  vp[2] = normalize (vp[2]);\n}\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, dv;\n  float dMin, d;\n  dMin = dstFar;\n  if (! showFace) {\n    d = PrSphDf (p, 0.25);\n    DMIN (idSph);\n  }\n  for (int k = 0; k < 5; k ++) {\n    p.xy = abs (p.xy);\n    p -= 2. * min (0., dot (p, vc)) * vc;\n    if (k == pType - 1) break;\n  }\n  q = p - pMid;\n  if (showFace) {\n    dv = vec3 (dot (q, vp[0]), dot (q, vp[1]), dot (q, vp[2]));\n    d = Maxv3 (dv);\n    DMIN (idFace);\n  }\n  dv = vec3 (length (q - min (0., q.x) * vec3 (1., 0., 0.)), \n     length (q - min (0., q.y) * vec3 (0., 1., 0.)),\n     length (q - min (0., dot (q, vc)) * vc));\n  d = Minv3 (dv) - 0.01;\n  DMIN (idEdge);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 80; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0005, -0.0005);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec4 SphFib (vec3 v, float n)\n{   // Keinert et al's inverse spherical Fibonacci mapping\n  vec4 b;\n  vec3 vf, vfMin;\n  vec2 ff, c;\n  float fk, ddMin, dd, a, aMin, z, ni;\n  ni = 1. / n;\n  fk = pow (phi, max (2., floor (log (n * pi * sqrt (5.) * dot (v.xy, v.xy)) /\n     log (phi + 1.)))) / sqrt (5.);\n  ff = vec2 (floor (fk + 0.5), floor (fk * phi + 0.5));\n  b = vec4 (ff * ni, pi * (fract ((ff + 1.) * phi) - (phi - 1.)));\n  c = floor ((0.5 * mat2 (b.y, - b.x, b.w, - b.z) / (b.y * b.z - b.x * b.w)) *\n     vec2 (atan (v.y, v.x), v.z - (1. - ni)));\n  ddMin = 4.1;\n  for (int j = 0; j < 4; j ++) {\n    a = dot (ff, vec2 (j - 2 * (j / 2), j / 2) + c);\n    z = 1. - (2. * a + 1.) * ni;\n    vf = vec3 (sin (2. * pi * fract (phi * a) + vec2 (0.5 * pi, 0.)) * sqrt (1. - z * z), z);\n    dd = dot (vf - v, vf - v);\n    if (dd < ddMin) {\n      ddMin = dd;\n      vfMin = vf;\n      aMin = a;\n    }\n  }\n  return vec4 (aMin, vfMin);\n}\n\nvec3 BgCol (vec3 rd)\n{\n  vec3 c;\n  vec2 f;\n  f = mod (64. * vec2 (atan (rd.z, - rd.x), asin (rd.y)) / pi, 1.);\n  c = 0.5 * mix (vec3 (0.2, 0.3, 0.6), vec3 (0.7, 0.7, 0.4),\n     max (SmoothBump (0.47, 0.53, 0.01, f.x), SmoothBump (0.47, 0.53, 0.01, f.y))) *\n     (0.7 + 0.3 * rd.y);\n  c = max (c, 0.5 * vec3 (1., 1., 0.) * (1. - smoothstep (0.01, 0.015,\n     length (SphFib (rd, 2048.).yzw - rd))));\n  return c;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstObj, nDotL;\n  showFace = false;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    vn = ObjNf (ro + dstObj * rd);\n    nDotL = max (dot (vn, ltDir), 0.);\n    if (idObj == idEdge) {\n      nDotL *= nDotL;\n      nDotL *= nDotL;\n      col = vec3 (0.5, 0.3, 0.1);\n    } else if (idObj == idSph) {\n      col = vec3 (0.5, 0.7, 0.7);\n    }\n    col = col * (0.2 + 0.8 * nDotL) +\n       0.2 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n  } else col = BgCol (rd);\n  showFace = true;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    vn = ObjNf (ro + dstObj * rd);\n    if (idObj == idFace) {\n      col = mix (col * vec3 (0.5, 1., 0.5), BgCol (reflect (rd, vn)),\n         1. - pow (max (- dot (rd, vn), 0.), 5.));\n    } else if (idObj == idEdge) {\n      nDotL = max (dot (vn, ltDir), 0.);\n      nDotL *= nDotL;\n      col = vec3 (0.5, 0.3, 0.1) * (0.2 + 0.8 * nDotL * nDotL) +\n         0.2 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n    }\n  } else col = BgCol (rd);\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\n#define AA  1\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.03 * pi * tCur;\n    el -= 0.1 * pi * sin (0.02 * pi * tCur);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -8.);\n  zmFac = 6.5;\n  dstFar = 20.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  PInit ();\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.9)), 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}