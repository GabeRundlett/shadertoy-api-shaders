{
    "Shader": {
        "info": {
            "date": "1636715970",
            "description": "Random idea",
            "flags": 32,
            "hasliked": 0,
            "id": "fldGzX",
            "likes": 22,
            "name": "927487 ZEX",
            "published": 3,
            "tags": [
                "glass",
                "sex",
                "fov",
                "zex"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 548
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(0.,f*factor);\n        if (nuv.y > 0. && nuv.y < 1.)\n            col += texture(iChannel0, uv+vec2(0.,f*factor)).xyz/float(steps);\n    }\n    \n    vec3 rgb = texture(iChannel1, uv).xyz+GLOW_OPACITY*pow(col, vec3(GLOW_POW));\n\n    fragColor = vec4(rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define GLOW_SAMPLES 40\n#define GLOW_DISTANCE 0.05\n#define GLOW_POW 1.25\n#define GLOW_OPACITY 1.5\n#define sat(a) clamp(a, 0., 1.)\n\n// Stolen from 0b5vr here https://www.shadertoy.com/view/ss3SD8\nfloat hash11(float p)\n{\n    return (fract(sin((p)*114.514)*1919.810));\n}\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(l.x, max(l.y, l.z));\n}\n// Thanks IQ\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\n// Thanks IQ\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat seed;\nfloat rand()\n{\n    seed++;\n    return hash11(seed);\n}\n\n#define METAL_MAT 0.\n#define GLASS_MAT 1.\n#define STAND_GLASS_MAT 2.\n#define BRACKET_MAT 3.\n#define TABLE_MAT 4.\n#define WALL_MAT 5.\n\nvec2 map(vec3 p, float ignoreMat)\n{\n    vec2 acc = vec2(10000.,-1.);\n    \n    \n    acc = _min(acc, vec2(_cube(p-vec3(0.,-0.02,0.), vec3(5.,1.,13.)), TABLE_MAT));\n    //acc = _min(acc, vec2(_cube(p-vec3(-5.,0.,0.), vec3(1.,5.,1.)), WALL_MAT));\n    acc = _min(acc, vec2(_cube(p-vec3(-5.,-2.,-3.), vec3(1.,1.,1.)), -1.));\n    acc = _min(acc, vec2(_cube(p-vec3(-5.,-2.,-5.), vec3(1.,1.,2.)), WALL_MAT));\n \n    p.y -= -1.55;\n    vec3 opg = p;\n    p.x = abs(p.x)-.7;\n    float glass = max(length(p.xy)-.5, abs(p.z)-.01);\n    if (ignoreMat != GLASS_MAT)\n        acc = _min(acc, vec2(glass, GLASS_MAT));\n    \n    float glassborder = sdTorus(p, vec2(.5,.02));\n    acc = _min(acc, vec2(glassborder, METAL_MAT));\n    \n    vec3 pstand = p-vec3(-.5,0.07,0.);\n    float stand = max(max(length(pstand.xy)-.02,-p.z),p.z-.1);\n    acc = _min(acc, vec2(stand, METAL_MAT));\n    \n    pstand.z += -.1;\n    pstand.x += .04;\n    pstand.xy *= r2d(.2);\n    float standplate = max(length(pstand.yz*vec2(1.,2.))-.1, abs(pstand.x)-.002);\n    if (ignoreMat != STAND_GLASS_MAT)\n        acc = _min(acc, vec2(standplate, STAND_GLASS_MAT));\n    \n    float link = max(max(sdTorus(opg-vec3(0.,.3,0.), vec2(.5,.02)), abs(opg.x)-.2),opg.y);\n    acc = _min(acc, vec2(link, METAL_MAT));\n    \n    p.z -= .08;\n    p.x -= .57;\n    float bracket = max(sdRoundBox(p, vec3(.05,.02,.1), .01),\n    -sdRoundBox(p-vec3(-0.07,0.,.02), vec3(.1,1.,.1), .01));\n    bracket = min(bracket, sdRoundBox(p-vec3(0.04,0.,1.), vec3(.001,0.001,1.), .01));\n    acc = _min(acc, vec2(bracket, METAL_MAT));\n    \n    p.z -= .9;\n    p.yz *= r2d(.5*pow(abs(p.z)*.4, 5.));\n    float backbracket = sdRoundBox(p-vec3(0.05,.0,1.5), vec3(.01,0.02,.7), .01);\n    \n    acc = _min(acc, vec2(backbracket, BRACKET_MAT));\n    \n    return acc;\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+(r*uv.x+u*uv.y)*3.);\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.001,0.);\n    return normalize(vec3(d)-vec3(\n    map(p-e.xyy, -1.).x,\n    map(p-e.yxy, -1.).x,\n    map(p-e.yyx, -1.).x));\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps, float ignoreMat)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p, ignoreMat);\n        if (res.x < 0.001)\n            return vec3(res.x, distance(p, ro), res.y);\n        p+=rd*res.x*.7;\n    }\n    return vec3(-1.);\n}\n\nvec3 getEnv(vec3 rd)\n{\n    rd.xz *= r2d(2.5);\n    float env = texture(iChannel1, rd*vec3(1.,-1.,1.)).x;\n    return (.25*vec3(pow(env, 3.))+5.*pow(env, 15.)*vec3(1.000,0.078,0.310).yzx)*.7;\n}\n\nfloat getLetter(vec2 uv, float idx)\n{\n    vec2 sz = vec2(1.)/vec2(16.,16.);\n    vec2 coords = (uv-vec2(-.5,-.2))*vec2(1.,-1.4)*.5-vec2(-.04,-0.02);\n    coords *= .6;\n    coords = clamp(coords, vec2(0.), sz);\n    coords -= sz+vec2(sz.x*mod(idx, 16.), sz.y*float(int(idx)/16));\n    return texture(iChannel3, coords).x;\n    return sat((length(coords)-.1)*400.);\n}\n\nvec3 getMat(vec3 res, vec3 rd, vec3 p, vec3 n)\n{\n    vec3 col = n*.5+.5;\n    vec3 lpos = vec3(0.,5.,5.);\n    vec3 ldir = p-lpos;\n    vec3 h = normalize(rd+ldir);\n    if (res.z == TABLE_MAT)\n    {\n        col = vec3(.1);\n    }\n    if (res.z == GLASS_MAT)\n    {\n        col = vec3(0.459,0.082,0.176)*.2;\n    }\n    if (res.z == METAL_MAT)\n    {\n        vec3 refl = normalize(reflect(rd, n));\n        vec3 envrefl = getEnv(refl).x*vec3(0.992,0.847,0.647);\n        col = pow(envrefl, vec3(1.)) + 1.*pow(envrefl, vec3(2.5));\n        col *= 1.5+sat(.3+(pow(sat(-dot(n, fwidth(n))),.01))); // To reduce aliasing on reflect\n    }\n    if (res.z == BRACKET_MAT)\n    {\n        col = vec3(.05)+vec3(0.941,0.580,0.580)*pow(sat(dot(n, h)),2.);\n    }\n    if (res.z == WALL_MAT)\n    {\n        vec2 letteruv = p.zy*.1-vec2(-.15,0.05);\n        float letters = getLetter(letteruv, 92.);\n        letters += getLetter(letteruv+vec2(-0.1,0.), 74.);\n        letters += getLetter(letteruv+vec2(-0.2,0.), 87.);\n        float beat = 1./2.;\n        col = mix(.15,1.,mod(iTime, beat)/beat)*vec3(1.000,0.059,0.294)*pow(letters,.2)+vec3(1.)*letters*.5;\n    }\n    return col;\n}\n\nvec3 rdr(vec2 uv, float doffactor)\n{\n    vec3 col = vec3(0.);\n    \n    vec3 dof = vec3(rand()-.5, rand()-.5, 0.)*.00001*doffactor;\n    vec3 ro = vec3(1.7+.25*sin(iTime*.15),-1.19,-1.)+dof;\n    vec3 ta = vec3(-1.,-2.4,1.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv)-dof;\n    \n    vec3 res = trace(ro, rd, 256, -1.);\n    if (res.y > 0.)\n    {\n        vec3 p = ro + rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = n*.5+.5;\n        col = getMat(res, rd, p, n);\n        \n        if (res.z == TABLE_MAT || res.z == GLASS_MAT)\n        {\n            float spec = mix(.03, 0.1, pow(texture(iChannel0, p.xz*.05).x,2.));\n            if (res.z == GLASS_MAT)\n                spec = 0.01;\n            vec3 specrefl = normalize(reflect(rd, n)+(vec3(rand(), rand(), rand())-.5)*2.*spec);\n            vec3 resrefl = trace(p+n*.01, specrefl, 128, -1.);\n            if (resrefl.y > 0.)\n            {\n                vec3 prefl = p+specrefl*resrefl.y;\n                vec3 nrefl = getNorm(prefl, resrefl.x);\n                col = getMat(resrefl, specrefl, prefl, nrefl);\n            }\n            else\n                col = getEnv(specrefl);\n        }\n    }\n    else\n        col = getEnv(rd)*.75;\n    col *=( 1.-sat(length(uv)*1.75-.2));\n    col = pow(col, vec3(.6));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    seed=texture(iChannel0,uv).x;\n    seed+=fract(iTime);\n    \n    vec3 col = rdr(uv,1.);\n    col = sat(col);\n\n    col = mix(col, texture(iChannel2, fragCoord.xy/iResolution.xy).xyz, .95);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(f*factor, 0.);\n        if (nuv.x > 0. && nuv.x < 1.)\n          col += texture(iChannel0, uv+vec2(f*factor,0.)).xyz/float(steps);\n    }\n    \n    vec3 rgb = texture(iChannel1, uv).xyz+2.*pow(col, vec3(GLOW_POW));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}