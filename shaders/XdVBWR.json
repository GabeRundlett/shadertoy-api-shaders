{
    "Shader": {
        "info": {
            "date": "1528317201",
            "description": "Mouse moves the camera.\nRaymarching some clouds.",
            "flags": 0,
            "hasliked": 0,
            "id": "XdVBWR",
            "likes": 3,
            "name": "Volumetrics Study",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "volumetric"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 571
        },
        "renderpass": [
            {
                "code": "#define STEPS       128\n#define FAR         10.\n#define PI acos( -1.0 )\n#define PROCEDURAL\n#define HASHSCALE .1031\n\n/*\nfloat hash( float n )\n{\n\n    return fract( sin( n ) * 45843.349 );\n    \n}\n*/\n\n// https://www.shadertoy.com/view/4djSRW\n\nfloat hash(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// iq's\n\n#ifdef PROCEDURAL\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\n#else\n\nfloat noise( in vec3 x )\n{\n\n    vec3 p = floor( x );\n    vec3 k = fract( x );\n    \n    k *= k * k * ( 3.0 - 2.0 * k );\n    \n    float n = p.x + p.y * 57.0 + p.z * 113.0; \n    \n    float a = hash( n );\n    float b = hash( n + 1.0 );\n    float c = hash( n + 57.0 );\n    float d = hash( n + 58.0 );\n    \n    float e = hash( n + 113.0 );\n    float f = hash( n + 114.0 );\n    float g = hash( n + 170.0 );\n    float h = hash( n + 171.0 );\n    \n    float res = mix( mix( mix ( a, b, k.x ), mix( c, d, k.x ), k.y ),\n                     mix( mix ( e, f, k.x ), mix( g, h, k.x ), k.y ),\n                     k.z\n    \t\t\t\t );\n    \n    return res;\n    \n}\n\n#endif\n\nfloat fbm( in vec3 p )\n{\n\n    float wav = texture( iChannel1, vec2( 0.0, 0.25 ) ).x;\n    float fre = texture( iChannel1, vec2( 0.0, 0.15 ) ).x;\n    float f = 0.0;\n    f += 0.5000 * noise( p ); p *= 2.02; p -= iTime * 0.1 + wav;\n    f += 0.2500 * noise( p ); p *= 2.03; p += iTime * 0.2 + fre;\n    f += 0.1250 * noise( p ); p *= 2.01; p -= iTime * 0.1 + wav;\n    f += 0.0625 * noise( p );\n    f += 0.0125 * noise( p );\n    return f / 0.9375;\n    \n}\n\nfloat map( vec3 p )\n{\n\n    //return p.y + 1.0 * fbm( p + iTime * 0.2 );\n\t//return 0.4 - length( p ) * fbm( p + iTime );\n    \n    p.z -= iTime * 0.4;\n    \n    float f = fbm( p );\n    \n    return f;\n    \n}\n\nfloat ray( vec3 ro, vec3 rd, out float den )\n{\n\n    float t = 0.0, maxD = 0.0, d = 1.0; den = 0.0;\n    \n    for( int i = 0; i < STEPS; ++i )\n    {\n        \n        vec3 p = ro + rd * t;\n    \n        den = d * ( 1.0 * map( p ) * t * t * 0.025 );\n        //den = map( p );\n        maxD = maxD < den ? den : maxD;\n        \n        if( maxD > 1.0 || t > FAR ) break;\n        \n        // https://www.shadertoy.com/view/MscXRH\n        t += max( maxD*.1, .05 );\n        \n        //t += 0.05;\n    \n    }\n    \n    den = maxD;\n    \n    return t;\n\n}\n\nvec3 shad( vec3 ro, vec3 rd, vec2 uv )\n{\n\n    float den = 0.0;\n    float t = ray( ro, rd, den );\n    \n    vec3 p = ro + rd * t;\n\n    vec3 col = mix( mix( vec3( 0.7 ), vec3( 0.2, 0.5, 0.8 ), uv.y ), mix( vec3( 0 ), vec3( 1 ), den ), den );\n    //vec3 col = mix( vec3( 1 ), colB, den );\n    \n    col *= sqrt( col );\n    \n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n\n    vec2 mou = iMouse.xy / iResolution.xy;\n    \n    vec3 ro = 3.0 * vec3( sin( mou.x * 2.0 * PI ), 0.0, cos( -mou.x * 2.0 * PI ) );\n    vec3 ww = normalize( vec3( 0 ) - ro );\n    vec3 uu = normalize( cross( vec3( 0, 1, 0 ), ww ) );\n    vec3 vv = normalize( cross( ww, uu ) );\n    vec3 rd = normalize( uv.x * uu + uv.y * vv + 1.5 * ww );\n    \n    float den = 0.0, t = ray( ro, rd, den );\n    \n    vec3 col = shad( ro, rd, uv );\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 34,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}