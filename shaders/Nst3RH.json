{
    "Shader": {
        "info": {
            "date": "1629152104",
            "description": "I originally made this for a project with @Drayken where he did the lighting and I did the geometry, but I've come back to it a number of times so I figured I would publish my version.\n\n@Drayken's version: [url]https://www.shadertoy.com/view/7djXRm[/url]\n",
            "flags": 0,
            "hasliked": 0,
            "id": "Nst3RH",
            "likes": 22,
            "name": "Lost Wander Cube",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "fractal"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 513
        },
        "renderpass": [
            {
                "code": "#define STEPS 128.0\n#define MDIST 250.0\n#define pi 3.1415926535\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define pmod(p, x) (mod(p,x)-0.5*(x))\nfloat glow = 0.0;\n\nfloat box(vec3 p, vec3 s){\n    vec3 d = abs(p)-s;\n    return max(d.x,max(d.y,d.z));\n}\n\nfloat frame(vec3 p, vec3 s, float e){\n    vec2 h = vec2(e,0);\n    float a = box(p,s);\n    float b = box(p,s*1.01-h.xxy);\n    a = max(-b,a);\n    b = box(p,s*1.01-h.xyx);\n    a = max(-b,a);\n    b = box(p,s*1.01-h.yxx);\n    a = max(-b,a);\n    return a;\n}\n\nfloat timeRemap (float t,float s1, float s2, float c){\n    return 0.5*(s2-s1)*(t-asin(cos(t*pi)/sqrt(c*c+1.0))/pi)+s1*t;  \n}\n\nvoid mo(inout vec2 p){\n  //p = abs(p)-d;\n  if(p.y>p.x) p = p.yx;\n}\nvec3 kifs;\nvec2 map(vec3 p){\n    vec3 po2 = p;\n    \n    p.xz*=rot(iTime*0.8);\n    p.xy*=rot(iTime*0.4);\n    vec3 po = p;\n    float t = iTime*0.7;\n    t = timeRemap(t*1.3, 0.0, 2.3, 0.1);\n\n    for(float i = 0.0; i< 9.0; i++){\n        p = abs(p)-2.0*i*kifs;\n        p.xz*=rot(pi/2.0);\n        mo(p.xy);\n        mo(p.zy);\n        p.x-=sign(p.y)*sin(t);\n       \n    }\n    \n    //Inner Cubes\n    p = pmod(p,2.2);\n    vec2 a = vec2(box(p,vec3(0.5)),1.0);\n    a.x = abs(a.x)-0.2;\n    a.x = abs(a.x)-0.1;\n    vec2 b = vec2(box(p,vec3(0.45)),2.0);\n    \n    a = (a.x<b.x)?a:b;\n    \n    p = po;\n    p.xy*=rot(pi/4.0);\n    \n    //Boundry Cut Cube\n    vec3 cube = vec3(4,4,4)*vec3(1.2+0.5*sin(t),1.2+0.5*cos(t),1.2+0.5*sin(t));\n    a.x = max(box(p,cube),a.x);\n    b.x = max(box(p,cube),b.x);\n    glow+=0.01/(0.01+b.x*b.x);\n    //Outer Frame\n    b= vec2(frame(p,cube+0.15,0.45),3.0);\n    a = (a.x<b.x)?a:b;\n    \n    //Repeating Poles\n    vec3 po3 = po2;\n    po3.xy*=rot(sin(t)*0.9);\n    //po3.yz*=rot(sin(t)*0.4);\n    po3.zx*=rot(sin(t+0.5)*0.9);\n    po3+=sin(t)*3.0;\n    \n    \n    \n    po2.y-=iTime*20.0;\n    po2=mod(po2,80.0)-40.0;\n    po2.x+=sin(po3.y*0.05+iTime);\n    b.x = length(po2.xz)-2.0-clamp(sin(po3.y*0.5-iTime*10.0),-0.2,0.2);\n    b.x = min(b.x,length(po2.zy)-2.0-clamp(sin(po3.x*0.5),-0.2,0.2));\n    b.x = min(b.x,length(po2.xy)-2.0-clamp(sin(po3.z*0.5),-0.2,0.2));\n    b.y=4.0;\n    a = (a.x<b.x)?a:b;\n    \n    return a;\n}\nvec3 norm(vec3 p){\n    vec2 e= vec2(0.03,0);\n    return normalize(map(p).x-vec3(\n    map(p-e.xyy).x,\n    map(p-e.yxy).x,\n    map(p-e.yyx).x));\n}\nvoid render( out vec4 fragColor, in vec2 fragCoord )\n{\n    glow = 0.;\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    vec3 al;\n    vec3 ro = vec3(0,2,-20);\n    //ro.xz*=rot(iTime*0.4);\n    vec3 lk = vec3(0,0,0);\n    vec3 f = normalize(lk-ro);\n    vec3 r = normalize(cross(vec3(0,1,0),f));\n    vec3 rd = normalize(f*1.0+uv.x*r+uv.y*cross(f,r));\n    \n    vec3 p = ro;\n    float dO;\n    float shad = 0.0;\n    vec2 d;\n    float t = iTime*0.7;\n    t = timeRemap(t*1.3, 0.0, 2.3, 0.1);\n    //Kifs Style taken from by FMS_Cat <3\n    kifs = abs(vec3(asin(sin(t*0.15)),0.2*asin(sin(t*0.22)),0.3*asin(sin(t*0.38))));\n    for(float i = 0.0; i < STEPS; i++){\n        d = map(p);\n        float dStep = d.x;\n        if(d.x>1.0) dStep = pow(d.x,1.0-d.x/MDIST);\n        dO += dStep;\n        p = ro+rd*dO;\n        if(abs(d.x)<0.001||i==STEPS-1.0 ){\n            shad = i/STEPS;\n            break;\n        }\n        if(dO>MDIST) break;\n    }\n    if(d.y==1.0) al = vec3(0.863,0.043,0.020);\n    if(d.y==2.0) al = vec3(0.529,0.000,0.722);\n    if(d.y==3.0) al = vec3(0.000,0.000,0.000);\n    if(d.y==4.0) al = vec3(0.000,0.000,0.000);\n    \n    vec3 n = norm(p);\n    float aor=dO/50.;\n    float ao=exp2(-2.*pow(max(0.,1.-map(p+n*aor).x/aor),4.));\n    al*=(.5*ao+0.5);\n    col = vec3(pow(1.0-shad,2.))*al;\n    \n\n    vec3 ld = vec3(1,1,-1);\n    vec3 h = normalize(ld-rd);\n    float spec = pow(max(dot(reflect(-rd,n),rd),0.3),5.);\n    float fres = pow(1. - max(dot(n, -rd),0.), 5.);\n    float diff = max(dot(n, ld),0.);\n    \n    vec3 light = vec3(0.910,0.800,1.000);\n    col*=clamp(diff,0.6,1.0)*light;\n    if(d.y!=4.0)col+=spec*light*0.25;\n    if(d.y!=3.0&&d.y!=4.0)col+=glow*0.105*\n    mix(vec3(0.569,0.082,1.000),vec3(0.267,0.082,1.000),sin(length(p)*2.0)*0.5+0.5);\n    col = mix(col,vec3(0.318,0.180,0.439)*(1.-length(uv)*0.6),clamp(dO/MDIST,0.0,1.0));\n    \n    col = pow(col,vec3(0.85));//Gamma correction\n    fragColor = vec4(col,1);\n}\n#define AA 1.0\n#define ZERO min(0.0,iTime)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float px = 1.0/AA;\n    vec4 col = vec4(0);\n    \n    if(AA==1.0) {render(col,fragCoord); fragColor = col; return;}\n    \n    for(float i = ZERO; i <AA; i++){\n        for(float j = ZERO; j <AA; j++){\n            vec4 col2;\n            vec2 coord = vec2(fragCoord.x+px*i,fragCoord.y+px*j);\n            render(col2,coord);\n            col.rgb+=col2.rgb;\n            glow = 0.;\n        }\n    }\n    col/=AA*AA;\n    fragColor = vec4(col);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}