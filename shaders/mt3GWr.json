{
    "Shader": {
        "info": {
            "date": "1682208656",
            "description": "Kaleidoscope fractal tunnel. Use mouse to look around.",
            "flags": 4,
            "hasliked": 0,
            "id": "mt3GWr",
            "likes": 0,
            "name": "KalleidoEllo BMove",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "elloskelling",
            "viewed": 222
        },
        "renderpass": [
            {
                "code": "// from https://www.shadertoy.com/view/XtcXWM\n\n#define BEATMOVE 1\n\nfloat time() { return iTime; }\nvec2 resolution() { return iResolution.xy; }\n\nfloat hash(float n) {\n    return fract(sin(n)*43578.5453);\n}\n\nmat2 rotate(float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\t\n\treturn mat2(c, s, -s, c);\n}\n\nfloat de(vec3 p) {\n\tvec3 op = p;\n\tp = fract(p + 0.5) - 0.5;\n\tp.xz *= rotate(3.14159);\n\tconst int it = 7;\n\tfor(int i = 0; i < it; i++) {\n\t\tp = abs(p);\n\t\tp.xz *= rotate(-0.1 + 0.1*sin(time()));\n\t\tp.xy *= rotate(0.3);\n\t\tp.yz *= rotate(0.0 + 0.2*cos(0.45*time()));\n\t\tp = 2.0*p - 1.0;\n\t}\n    \n    float c = length(op.xz - vec2(0, 0.1*time())) - 0.08;\n\t\n\treturn max(-c, (length(max(abs(p) - 1.3 + texture(iChannel0, vec2(0)).r, 0.0)))*exp2(-float(it)));\n}\n\nfloat trace(vec3 ro, vec3 rd, float mx) {\n\tfloat t = 0.0;\n\tfor(int i = 0; i < 100; i++) {\n\t\tfloat d = de(ro + rd*t);\n\t\tif(d < 0.001*t || t >= mx) break;\n\t\tt += d;\n\t}\n\treturn t;\n}\n\nvec3 normal(vec3 p) {\n\tvec2 h = vec2(0.001, 0.0);\n\tvec3 n = vec3(\n\t\tde(p + h.xyy) - de(p - h.xyy),\n\t\tde(p + h.yxy) - de(p - h.yxy),\n\t\tde(p + h.yyx) - de(p - h.yyx)\n\t);\n\treturn normalize(n);\n}\n\nfloat ao(vec3 p, vec3 n) {\n\tfloat o = 0.0, s = 0.005;\n\tfor(int i= 0; i < 15; i++) {\n\t\tfloat d = de(p + n*s);\n\t\to += (s - d);\n\t\ts += s/(float(i) + 1.0);\n\t}\n\treturn 1.0 - clamp(o, 0.0, 1.0);\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n\tvec3 col = vec3(1);\n\t\n\tfloat t = trace(ro, rd, 10.0);\n    if(t < 10.0) {\n        vec3 pos = ro + rd*t;\n        vec3 nor = normal(pos);\n        vec3 ref = normalize(reflect(rd, nor));\n\n        float occ = ao(pos, nor);\n        float dom = smoothstep(0.0, 0.3, trace(pos + nor*0.001, ref, 0.3));\n\n        col = 0.1*vec3(occ);\n        col += clamp(1.0 + dot(rd, nor), 0.0, 1.0)*mix(vec3(1), vec3(1.0, 0.3, 0.3), 1.0 - dom);\n\t\tcol *= vec3(7.0*abs(cos(20.0*pos.x)), 2.3*abs(sin(10.0*pos.z)), 3.0 + t);\t\n    }\n    \n    col = mix(col, vec3(10), 1.0 - exp(-0.16*t));\n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = (-resolution() + 2.0*fragCoord.xy)/resolution().y;\n  \n\tfloat atime = 0.1*time();\n\tvec3 ro = vec3(0.0, 0.0, atime);    \n    vec3 la = vec3(vec2(0), atime + 1.0);\n    \n\tvec3 ww = normalize(la-ro);\n\tvec3 uu = normalize(cross(vec3(0, 1, 0), ww));\n\tvec3 vv = normalize(cross(ww, uu));\n    mat3 ca = mat3(uu, vv, ww);\n\tvec3 rd = normalize(ca*vec3(uv, 1.97));\n\t\n\tvec3 col = render(ro, rd);\n\t\n\tcol = 1.0 - exp(-0.5*col);\n\tcol = pow(abs(col), vec3(1.0/2.2));\n\tfragColor = vec4(col*0.9, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}