{
    "Shader": {
        "info": {
            "date": "1454888551",
            "description": " An image of a circle map showing the average number of iterations until Î¸n+1 ~= Î¸0 for random starting positions.\nBased off this image here: https://commons.wikimedia.org/wiki/File:Circle_map_poincare_recurrence.jpeg",
            "flags": 32,
            "hasliked": 0,
            "id": "XsVGDw",
            "likes": 13,
            "name": "Standard Circle Map",
            "published": 3,
            "tags": [
                "math",
                "chaos",
                "iteration",
                "discrete"
            ],
            "usePreview": 0,
            "username": "Flyguy",
            "viewed": 1443
        },
        "renderpass": [
            {
                "code": "//https://en.wikipedia.org/wiki/Arnold_tongue\n\nfloat tau = atan(1.0)*8.0;\n\nvec3 rainbow(float x)\n{\n    vec3 col = vec3(0);\n    col.r = cos(x * tau - (0.0/3.0)*tau);\n    col.g = cos(x * tau - (1.0/3.0)*tau);\n    col.b = cos(x * tau - (2.0/3.0)*tau);\n    \n    return col * 0.5 + 0.5;\n}\n\nvec3 grad(float x)\n{\n\tvec3 col = vec3(0);\n    col = mix(vec3(0), rainbow(1.0 - x - 0.11), smoothstep(0.0, 0.3, x));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    uv.x -= res.x/2.0 - 0.5;\n    \n    float n = texture(iChannel0, uv).r / float(iFrame) / 256.0;\n    \n    vec3 col = grad(n * 5.0);\n    \n    col *= step(0.0, uv.x) - step(1.0, uv.x);\n    \n\tfragColor = vec4(col, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define ITERATIONS 256\n#define EPSILON 0.001\n\nfloat pi = atan(1.0)*4.0;\nfloat tau = atan(1.0)*8.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //Parameters Omega (0-1 along X), K (0 - 4pi along Y)\n    float Om = uv.x;\n    float K = uv.y * 4.0 * pi;\n    \n    //Random initial value\n    vec2 offs = vec2(cos(iTime*5.532), sin(iTime*8.823));\n    float t0 = texture(iChannel1, ((uv + offs) * iResolution.xy) / iChannelResolution[1].xy).x;\n    \n    float tn = t0;\n    float tn1 = 0.0;\n    \n    //number of iterations until |tn1 - t0| < epsilon\n\tfloat n = 0.0;\n    \n    for(int i = 0;i < ITERATIONS;i++)\n    {  \n        //Î¸n+1 = Î¸n + Î© - (K/2Ï€)sin(2Ï€*Î¸n)\n        \n        tn1 = fract(tn + Om - (K/tau)*sin(tau*tn));\n        \n        if(abs(tn1 - t0) < EPSILON)\n        {\n            n = float(i);\n            break;\n        }\n        \n        tn = tn1;\n    }\n    \n    float ln = texture(iChannel0, uv).r;\n    \n    fragColor = vec4(ln + n,0,0,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}