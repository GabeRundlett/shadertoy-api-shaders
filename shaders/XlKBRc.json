{
    "Shader": {
        "info": {
            "date": "1543455870",
            "description": "( Update, I added some color to the fog).. Iv'e been messing with radial blurs and they look pretty cool in a ray marched scene. More description and references in Image tab. Try fullscreen!",
            "flags": 32,
            "hasliked": 0,
            "id": "XlKBRc",
            "likes": 25,
            "name": "Light Zone",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "fbm",
                "radialblur",
                "godray",
                "godray"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 1198
        },
        "renderpass": [
            {
                "code": "// Made by Plento\n\n\n// Blur Stuff\n\n\n// This is my attempt at using a radial blur as god rays with a raymarch.\n// all of the lighting and shadowing is faked\n// The fbm fog might be a little slow sorry about that.\n\n// I learned how simple radial blur works here: https://www.shadertoy.com/view/XsfSDs\n// My shader's blur is based off of Shane's in: https://www.shadertoy.com/view/XsKGRW\n// Thats where I learned the noise trick too\n\n// Instead of blurring the whole image, I made a mask of only the brightest parts\n// and blur / add that to the color.\n\nfloat hash( vec2 p ){ return fract(sin(dot(p, vec2(41, 289)))*45758.5453); }\n\n// blur samples.\nconst int SAMPLES = 25;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;\n \tvec2 uv2 = fragCoord/iResolution.xy;\n    \n    vec3 col = texture(iChannel0, uv2).xyz;\n    \n    float w = 0.1; \n    vec2 tuv = vec2(uv2.x-0.5, uv2.y - 0.66);\n    vec2 dTuv = tuv*0.99/float(SAMPLES);\n    \n    // uv jitter\n    uv2 += dTuv*(hash(uv.xy + fract(iTime))*2.0 );\n    \n    for(int i = 0;i < SAMPLES; i++)\n    {\n        uv2 -= dTuv;\n        vec3 samp = texture(iChannel0, uv2).xyz * w;\n       \n        // Add mask\n        col += step(0.026, length(samp)) * vec3(1.0, 0.8, 0.7) * 0.00320;\n       \n        w *= 0.97;\n    }\n    \n    col *= 1.6;\n    col *= smoothstep(1.2, 1.2 - 0.6, length(uv ));\n    \n    fragColor = vec4(sqrt(clamp(col, 0.0, 1.0)), 1.0);\n \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Raymarching / coloring stuff in this buffer\n\nfloat sdBox( vec3 p, vec3 b ){\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0))   ;\n}\n\nfloat rand(vec2 n){ \n\treturn fract(sin(dot(n, vec2(17.12037, 5.71713))) * 12345.6789);\n}\n\nfloat noise(vec2 n){\n\tvec2 d = vec2(0.0, 1.0);\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b + d.xx), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat fbm(vec2 n){\n\tfloat sum = 0.0, amp = 1.0;\n   \n\tfor (int i = 0; i < 4; i++)\n    {\n         n.x += iTime*0.05;\n        \n\t\tsum += noise(n) * amp;\n\t\tn += n;\n\t\tamp *= 0.5;\n\t}\n\treturn sum;\n}\n\nfloat opU(float d1, float d2){ return min(d1, d2);}\n\n// This could surely be simplified but I'm leaving it for now\nfloat map(vec3 rp)\n{\n    vec3 pos = rp - vec3(iTime * 0.5, 0.0, 6.0); \n    vec3 pos3 = rp - vec3(0.0, -0.2, 5.7); \n    \n    vec3 b = vec3(0.4, 0.0, 0.0);\n \n    pos = mod(pos, b)-0.5 * b;\n    pos3 = mod(pos3, b)-0.5 * b;\n    \n    float res = sdBox(pos, vec3(0.1, 1.7, 0.2));\n\t\n    res = opU(res, pos.y + 0.3);\n    res = opU(res, sdBox(pos3, vec3(4.0, 0.7, 1.0)));\n    res = opU(res, -pos.y + 2.6);\n   \n    return res;\n}\n\nvec3 getNormal(vec3 p){\n    vec2 e = vec2(0.0035, -0.0035); \n    return normalize(\n        e.xyy * map(p + e.xyy) + \n        e.yyx * map(p + e.yyx) + \n        e.yxy * map(p + e.yxy) + \n        e.xxx * map(p + e.xxx));\n}\n\nvec3 color(vec3 ro, vec3 rd, vec3 norm, float t)\n{\n    vec3 p = ro + rd * t;\n  \n    vec2 f = floor(vec2(p.x - iTime*0.5, p.z - 0.4) * 1.0);\n   \n    vec3 col = abs(1.0 - smoothstep(-1.4,-0.9, p.y)) * \n        vec3(1) * mod(f.x - f.y, 2.0) * 0.0057;\n    \n     // Shadowing\n    col *= max(0.0055, smoothstep(0.2, 1.9, 0.2 / exp(-t + 2.0)));\n    \n    col *= 2.0;\n    return col;\n    \n}\n\n\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    float t = 0.0; \n    float d = 0.0; \n    \n    for (int i = 0; i < 80; i++){\n        d = map(ro + rd*t);\n        \n        if(abs(d)<0.001 || t > 30.0) {break;}\n        \n        t += d * 0.9;\n    }\n    \n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y; \n \n    vec3 ro = vec3(0.0, 0.5, 3.0); \n    vec3 rd = normalize(vec3(uv, 1.0 - dot(uv, uv) * 0.35));\n   \n    float t = trace(ro, rd);\n    \n    ro += rd * t;\n   \n    vec3 norm = getNormal(ro); \n    \n    vec3 col = color(ro, rd, norm, t);\n    \n    // Moon thing\n    col += vec3(0.0006) * smoothstep(0.2, 0.09, length(vec2(uv.x + 1.0, uv.y - 0.6)));\n    \n    \n    // fbm fog and the bright object\n    col = mix( col, vec3(2.0, 0.9, 0.7)*1.5 + \n              8.0*smoothstep(0.1, 0.02, length(vec2(uv.x*0.2, uv.y*1.3 - 0.1)*0.5)), \n              1.0 - exp( -0.000001*t*t*t ) ) * fbm(uv*5.0);\n    \n    // fog option without the fbm (defiantly not as cool)\n    //col = mix( col, vec3(1.0, 0.9, 0.7), 1.0 - exp( -0.00001*t*t*t ) );\n    \n    \n    fragColor = vec4(sqrt(clamp(col, 0.0, 1.0)), 1.0);\n \n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}