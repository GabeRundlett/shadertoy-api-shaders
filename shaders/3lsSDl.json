{
    "Shader": {
        "info": {
            "date": "1564646387",
            "description": "Saved 71 chars from https://www.shadertoy.com/view/Md2fzm",
            "flags": 0,
            "hasliked": 0,
            "id": "3lsSDl",
            "likes": 4,
            "name": "Kis-Snowflakes Code Golfed 209c",
            "published": 3,
            "tags": [
                "triangle",
                "tiling",
                "kisrhombille",
                "reptile",
                "equerre"
            ],
            "usePreview": 0,
            "username": "ttoinou",
            "viewed": 470
        },
        "renderpass": [
            {
                "code": "// 209 with mainImage trick + no E variable + normalize + init optimization\n// Thanks Fabrice !\nvoid mainImage(out vec4 z, vec2 u) {\n    vec2 A=u-u,B=A,C=z.xw, G, b = u/iResolution.y;\n    B.x = 1.7;\n    for(float a, i=0. ; i++ < 15. ; C = (b-G)/3. )\n        a = dot( normalize(G = b-A-B), normalize(B+B-A) ),\n        A = a < -.5 ? z.r = .9 - z.g, A : B + C,\n        B = a >  .5 ? z.g = 1. - z.b, B : C,\n        z = 1. - z.gbra; } /*\nz = .8 - z variant with -5 chars ==> Koch curve !\nz = cos(iTime)*.5+.5 - z // animated variant\n\n // 229 :\nvoid mainImage( out vec4 z, vec2 b )\n{\n    vec2 A,B,C  ,E,G;\n    z -= z;\n    A=B=C -= C;\n    b /= 6e2;\n    \n    B.x = 1.7;\n    C.y++;\n    \n    for(int i = 0 ; i++ < 15 ;  C = (b-G)/3.)\n        G = b - A - B,\n        E = B + B - A,\n        \n        z.a = dot(G,E)/(length(G)*length(E)),\n        A =   z.a < -.5\n            ? z.r = .9 - z.g,A\n            : B + C\n        ,\n        B =   z.a > .5\n            ? z.g = 1. - z.b,B\n            : C\n        ,\n        z = 1. - z.gbra;\n}\n\n// 235c original :\nvoid mainImage( out vec4 z, vec2 b )\n{\n    vec2 A,B,C  ,E,G;\n    z -= z;\n    A=B=C -= C;\n    //A=B=C=z.xy -= C; // doesnt save any char\n    \n    b /= 6e2; // b /= 2.*iResolution.y;\n    \n    \n    B.x = 1.7; // 1.7320 // sqrt(3)\n    C.y = 1.;\n    \n    \n    for(int i = 0 ; i < 15 ; i++)\n    //for(; z.a < 17. ; z.a++) saves 2 char but makes it crash, need int loop not float\n    //{\n        // A is doubled for char optinization, saves 8 chars\n\n        //D = A + B,\n        \n       // G = b - D,\n        //E = B*3. - D,\n        // becomes when removing D :\n\n       // D = A + B,\n        //G = b - A - B\n        //E = B + B - A,\n\t\t\n        \n        G = b - A - B,\n        E = B + B - A,\n        \n        // z.a = cos( angle )\n        z.a = dot(G,E)/(length(G)*length(E)),\n        // inverse distance would save 2 chars ? but inequation more complicated :/\n        //z.a = length(G)*length(E)/dot(G,E);\n        // find approximation of distance ?!\n        // would let me optimize G and E expression after\n        \n        // ACD Triangle : cos(angle) < -1/2 = COS(2PI/3)\n        // => A stays the same \n        A =   z.a < -.5\n            ? z.r = .9 - z.g,A\n        // was previously temporary E\n            : B + C\n        ,\n            \n        \n        // EBD Triangle : cos(angle) > 1/2 = COS( PI/3)\n        // => B stays the same\n        B =   z.a > .5\n            ? z.g = 1. - z.b,B\n            : C\n        ,\n        \n        // smoooth effect is obtained by using z.a which is a smooth distance\n        //z += cos(iTime - z.bagr ) ;\n        //z += cos(iTime - z.bagr + b.y )  ;\n        //z += cos(iTime - z.gbra ) ;\n        z.rgb = 1. - z.gbr,\n        \n        // G = b - (A+B) => A+B = b - G   saves 2 chars\n        C = (b-G)/3.;\n    //}                           \n    \n    \n    \n}*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}