{
    "Shader": {
        "info": {
            "date": "1486488805",
            "description": "Made from scratch on my phone in my last vacation using an app on Android called ShaderBox.\nI've always loved this kind of effects.\nTried to keep the code as readable as possible.",
            "flags": 0,
            "hasliked": 0,
            "id": "XtKXWt",
            "likes": 7,
            "name": "Checkerboard Flight",
            "published": 3,
            "tags": [
                "raytracing",
                "raymarching",
                "simple",
                "checkerboard",
                "flight",
                "mobile"
            ],
            "usePreview": 0,
            "username": "PauloFalcao",
            "viewed": 1181
        },
        "renderpass": [
            {
                "code": "// Checkerboard Flight\n//\n// I've always loved this kind of effects\n//\n// Made from scratch on my phone when I was on vacation using an app on Android called ShaderBox\n// Tried to keep the code as readable as possible.\n\n\n// Textures\nvec3 checkerboard(vec2 p,float size){\n  p*=size;\n  vec2 f=fract(p.xy)-0.5;\n  return vec3(f.x*f.y>0.0?1.0:0.0);\n}\n\n// Object Color\nvec3 objcolor(vec3 p){\n  return checkerboard(p.xz,0.4);\n}\n\n/*\n\n// Ray marching Distance function\n\n// Objects\nfloat plane(float p, float dist){\n  return p-dist;\n}\n\nfloat objdistance(vec3 p){\n   return min(plane(p.y,-2.0),plane(-p.y,-1.0));\n   //return min(plane(sin(p.z)*0.3+sin(p.x+iTime*8.0)*0.3+p.y,-2.0),plane(-p.y,-1.0)); //use raymarching\n}\n\n*/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n  vec2 uv=fragCoord.xy/iResolution.xy-0.5;\n  uv.x*=iResolution.x/iResolution.y;\n\n  //Camera\n  vec3 lookat=vec3(0.0,-2.0,-iTime*16.0);\n  vec3 cam=vec3(sin(iTime*2.0)*4.0,0.0,10.0)+vec3(0.0,0.0,lookat.z);\n  vec3 up=vec3(sin(iTime*2.0+3.14)*0.5,1.0,0.0);\n\n  float camdist=2.0;\n  float camsize=2.0;\n  float maxdist=50.0;\n  float preci=0.001;\n\n  vec3 v=cam-lookat;\n  vec3 camx=normalize(cross(up,v))*camsize;\n  vec3 camy=normalize(cross(v,camx))*camsize;\n\n  vec3 campoint=cam-normalize(v)*camdist+\n      camx*uv.x+\n      camy*uv.y;\n\n  vec3 ray=normalize(campoint-cam);\n\n  //Ray tracing plane y=-2.0 and y=1.0\n  float s = (-2.0-campoint.y)/ray.y;\n  if( s<0.0 ) s = (1.0-campoint.y)/ray.y;\n  vec3 p=campoint + ray*s;\n    \n  /*\n  //Ray marching\n  //\n  vec3 p=campoint;\n  float d=maxdist;\n  float s=0.0;\n  for(int i=0;i<64;i++){\n      d=objdistance(p);\n      s+=d;\n      if (d<preci) break;\n      if (s>maxdist) break;\n      p=campoint+ray*s;\n  }\n  */\n\n  float fadeout=max(maxdist-s,0.0)/maxdist;\n  fragColor = vec4(objcolor(p)*fadeout, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}