{
    "Shader": {
        "info": {
            "date": "1697863295",
            "description": "If the image is empty, it's working.\n\nWritten to illustrate the article:\nhttps://lousodrome.net/blog/light/2023/10/21/the-white-furnace-test/\n",
            "flags": 32,
            "hasliked": 0,
            "id": "md3BDs",
            "likes": 32,
            "name": "White furnace test example",
            "published": 3,
            "tags": [
                "pathtracing",
                "whitefurnacetest"
            ],
            "usePreview": 1,
            "username": "Zavie",
            "viewed": 24291
        },
        "renderpass": [
            {
                "code": "/*\n\nThis shader demonstrates the white furnace test.\n\nWritten to illustrate the article:\nhttps://lousodrome.net/blog/light/2023/10/21/the-white-furnace-test/\n\nIt's not just an expensive way to render an empty screen,\nbut a rendering test showing that the Monte Carlo\nintegration is done correctly.\n\nWhen the scene appears empty, it is in fact rendering a\nsingle white sphere in a uniformly lit environment.\nAdditional smaller spheres are rendered to darken or\nlighten the edges of the white sphere and thus make it\n\"appear\". Similarly, it becomes visible when using a non\nuniform environment.\n\nThe material used is a Lambert BRDF, which is perfectly\nenergy conserving, to illustrate well the effect of the\nwhite furnace.\n\nLicense: CC BY 4.0\n\n--\nZavie\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 screenCoord = fragCoord.xy / iResolution.xy;\n    float gamma = 2.2;\n    vec3 radiance = texture(iChannel0, screenCoord).rgb;\n    vec3 rgb = pow(clamp(radiance, 0., 1.), vec3(1.0 / gamma));\n\tfragColor = vec4(rgb, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n\nThis shader demonstrates the white furnace test.\n\nWritten to illustrate the article:\nhttps://lousodrome.net/blog/light/2023/10/21/the-white-furnace-test/\n\nIt's not just an expensive way to render an empty screen,\nbut a rendering test showing that the Monte Carlo\nintegration is done correctly.\n\nWhen the scene appears empty, it is in fact rendering a\nsingle white sphere in a uniformly lit environment.\nAdditional smaller spheres are rendered to darken or\nlighten the edges of the white sphere and thus make it\n\"appear\". Similarly, it becomes visible when using a non\nuniform environment.\n\nThe material used is a Lambert BRDF, which is perfectly\nenergy conserving, to illustrate well the effect of the\nwhite furnace.\n\nLicense: CC BY 4.0\n\n--\nZavie\n\n*/\n\n// Set to 1 for an incorrect integration, and see how it\n// that error is revealed by the test.\n#define SIMULATE_INCORRECT_INTEGRATION 0\n\n#define SAMPLES_PER_FRAME 2\n#define MAX_DEPTH 10\n\n// Set to 1 to accumulate samples over multiple frames.\n#define ENABLE_ACCUMULATION 1\n#define MAX_ACCUMULATION_SAMPLES 40\n\n// Set to 1 to add two coloured spheres on the sides,\n// thus revealing the white sphere in the center.\n#define SHOW_COLORED_SPHERES 1\n\n// Set to 1 so the environement is not uniform,\n// thus revealing the white sphere in the center.\n#define SHOW_NON_UNIFORM_ENVIRONMENT 1\n\n// Set SAMPLING to either UNIFORM_SAMPLING or COSINE_SAMPLING.\n#define UNIFORM_SAMPLING 1\n#define COSINE_SAMPLING 2\n#define SAMPLING COSINE_SAMPLING\n\n#define PI acos(-1.)\n\n// ---8<----------------------------------------------------------------------\n// Material\n\nstruct Material\n{\n    vec3 e;\t\t// luminance\n    vec3 c;\t\t// diffuse color\n    float f0;\t// specular color (monochrome)\n};\n\n// ---8<----------------------------------------------------------------------\n// Geometry\n\nstruct Ray\n{\n    vec3 o;\t\t// origin\n    vec3 d;\t\t// direction\n};\n\nstruct Hit\n{\n    float t;\t// solution to p=o+t*d\n    vec3 n;\t\t// normal\n    Material m;\t// material\n};\nconst Hit noHit = Hit(1e10, vec3(0.), Material(vec3(0.), vec3(0.), 0.));\n\nstruct Sphere\n{\n\tfloat r;\t// radius\n    vec3 p;\t\t// center position\n    Material m;\t// material\n};\n\nHit intersectSphere(Sphere s, Ray r)\n{\n\tvec3 op = s.p - r.o;\n    float b = dot(op, r.d);\n    float det = b * b - dot(op, op) + s.r * s.r;\n    if (det < 0.) return noHit;\n\n    det = sqrt(det);\n    float t = b - det;\n    if (t < 0.) t = b + det;\n    if (t < 0.) return noHit;\n\n    return Hit(t, (r.o + t*r.d - s.p) / s.r, s.m);\n}\n\nbool compare(inout Hit a, Hit b)\n{\n    if (b.m.f0 >= 0. && b.t < a.t)\n    {\n        a = b;\n        return true;\n    }\n    return false;\n}\n\nHit intersectScene(Ray r)\n{\n    Sphere snowBall = Sphere(1., vec3(0.0), Material(vec3(0.0), vec3(1.0), 0.04));\n\n    Hit hit = noHit;\n    compare(hit, intersectSphere(snowBall, r));\n\n#if SHOW_COLORED_SPHERES\n    float t = abs(fract(iTime * 0.1 - 0.5) * 2.0 - 1.0);\n    if (t > 0.5)\n    {\n        Sphere redSphere = Sphere(0.45, vec3(-1.4, 0.6, 0.0), Material(vec3(0.0), vec3(0.8, 0.1, 0.02), 0.04));\n        compare(hit, intersectSphere(redSphere, r));\n    }\n    if (t > 0.75)\n    {\n        Sphere whiteSphere = Sphere(0.45, vec3(-1.4, -0.6, 0.0), Material(vec3(0.0), vec3(1.0), 0.04));\n        compare(hit, intersectSphere(whiteSphere, r));\n    }\n    if (t > 0.8)\n    {\n        Sphere glowingSphere = Sphere(0.45, vec3(1.5, 0.0, 0.0), Material(vec3(0.25, 0.7, 1.0), vec3(0.8), 0.04));\n        compare(hit, intersectSphere(glowingSphere, r));\n    }\n#endif\n\n    return hit;\n}\n\n// ---8<----------------------------------------------------------------------\n// Lights\n\nvec3 environmentLight(vec3 d)\n{\n    vec3 uniformEnv = vec3(0.5);\n\n#if SHOW_NON_UNIFORM_ENVIRONMENT\n    float t = abs(fract(iTime * 0.05 - 0.75) * 2.0 - 1.0);\n\n    if (d.x * 0.5 + 0.5 < clamp(t * 2.0 - 1.0, 0.0, 1.0))\n    {\n        return texture(iChannel1, d).rgb;\n    }\n#endif\n\n    return uniformEnv;\n}\n\n// ---8<----------------------------------------------------------------------\n// Random number generator\n\n// https://www.pcg-random.org/\nuint pcg(uint v)\n{\n\tuint state = v * 747796405u + 2891336453u;\n\tuint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n\treturn (word >> 22u) ^ word;\n}\n\nuvec2 pcg2d(uvec2 v)\n{\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    return v;\n}\n\n// http://www.jcgt.org/published/0009/03/02/\nuvec3 pcg3d(uvec3 v) {\n\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n\n    v ^= v >> 16u;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n\n    return v;\n}\n\n// http://www.jcgt.org/published/0009/03/02/\nuvec3 pcg3d16(uvec3 v)\n{\n    v = v * 12829u + 47989u;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n\n\tv >>= 16u;\n\n    return v;\n}\n\n// http://www.jcgt.org/published/0009/03/02/\nuvec4 pcg4d(uvec4 v)\n{\n    v = v * 1664525u + 1013904223u;\n    \n    v.x += v.y*v.w;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n    v.w += v.y*v.z;\n    \n    v ^= v >> 16u;\n    \n    v.x += v.y*v.w;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n    v.w += v.y*v.z;\n    \n    return v;\n}\n\nuvec3 seed = uvec3(0);\nvoid initSeed(vec2 fragCoord)\n{\n    // FIXME: how to eliminate time glitches?\n    seed = uvec3(fragCoord, iTime * 1e5);\n    seed.zy ^= pcg2d(seed.xz);\n}\n\nfloat rand1()\n{\n    seed = seed.yzx;\n    seed.x = pcg(seed.x);\n    return float(seed.x) * (1.0 / float(0xffffffffu));\n}\n\nvec2 rand2()\n{\n    seed = seed.yzx;\n    seed.xy = pcg2d(seed.xy);\n    return vec2(seed.xy) * (1.0 / float(0xffffffffu));\n}\n\nvec3 rand3()\n{\n    seed = pcg3d(seed);\n    return vec3(seed) * (1.0 / float(0xffffffffu));\n}\n\n// ---8<----------------------------------------------------------------------\n// Sampling\n\nfloat VanDerCorput(int i)\n{\n\tuint b =  (uint(i) << 16u) | (uint(i) >> 16u);\n\tb = (b & 0x55555555u) << 1u | (b & 0xaaaaaaaau) >> 1u;\n\tb = (b & 0x33333333u) << 2u | (b & 0xccccccccu) >> 2u;\n\tb = (b & 0x0f0f0f0fu) << 4u | (b & 0xf0f0f0f0u) >> 4u;\n\tb = (b & 0x00ff00ffu) << 8u | (b & 0xff00ff00u) >> 8u;\n\treturn float(b) * 2.3283064365386963e-10; // / 0x100000000\n}\n\n//\n// [Wong 1997] Sampling with Hammersley and Halton Points\n//\nvec2 Hammersley(int i, int N)\n{\n\treturn vec2(float(i) / float(N), VanDerCorput(i));\n}\n\nmat3 basis(vec3 N)\n{\n    // Hugues-MÃ¶ller algorithm:\n    vec3 a = abs(N);\n\n    vec3 T;\n    if (a.x <= a.y && a.x <= a.z)\n    {\n        T = vec3(0, -N.z, N.y);\n    }\n    else if (a.y <= a.x && a.y <= a.z)\n    {\n        T = vec3(-N.z, 0, N.x);\n    }\n    else\n    {\n        T = vec3(-N.y, N.x, 0);\n    }\n    T = normalize(T);\n    vec3 B = normalize(cross(N, T));\n\n    return mat3(T, B, N);\n}\n\nvec3 sphericalToCathesian(float phi, float sinTheta, float cosTheta)\n{\n\treturn vec3(\n\t\tsinTheta * cos(phi),\n\t\tsinTheta * sin(phi),\n\t\tcosTheta);\n}\n\nvec3 uniformSample(vec2 Xi)\n{\n    float phi = 2. * PI * Xi.x;\n    float cosTheta = Xi.y;\n    float sinTheta = sqrt(1. - cosTheta * cosTheta);\n\treturn sphericalToCathesian(phi, sinTheta, cosTheta);\n}\n\nvec3 cosineSample(vec2 Xi)\n{\n    float phi = 2. * PI * Xi.x;\n    float sqrSinTheta = Xi.y;\n    float sinTheta = sqrt(sqrSinTheta);\n    float cosTheta = sqrt(1. - sqrSinTheta);\n\treturn sphericalToCathesian(phi, sinTheta, cosTheta);\n}\n\n// ---8<----------------------------------------------------------------------\n\nvec3 BRDF_Lambert(Material m, vec3 N, vec3 L, vec3 E)\n{\n    return m.c / PI;\n}\n\nvec3 radiance(Ray r) {\n\tvec3 acc = vec3(0.);\n\tvec3 mask = vec3(1.);\n\n    for (int depth = 0; depth < MAX_DEPTH; ++depth)\n    {\n        Hit hit = intersectScene(r);\n\t\tif (hit == noHit)\n        {\n            acc += mask * environmentLight(r.d);\n            break;\n        }\n\n        vec3 N = hit.n;\n        vec3 E = -r.d;\n        mat3 TStoWS = basis(N);\n\n        vec2 Xi = rand2();\n\n        acc += mask * hit.m.e;\n\n#if SAMPLING == UNIFORM_SAMPLING\n        vec3 L = TStoWS * uniformSample(Xi);\n        float ndotl = clamp(dot(N, L), 0.0, 1.0);\n\n#if SIMULATE_INCORRECT_INTEGRATION\n        // Oh no, we forgot that an hemisphere is 2Pi!\n        // The result appears too dark.\n        mask *= BRDF_Lambert(hit.m, N, E, L) * ndotl * PI;\n#else\n        mask *= BRDF_Lambert(hit.m, N, E, L) * ndotl * 2. * PI;\n#endif\n#elif SAMPLING == COSINE_SAMPLING\n        vec3 L = TStoWS * cosineSample(Xi);\n\n#if SIMULATE_INCORRECT_INTEGRATION\n        // Oh no, we forgot to change the integrand based on the sampling distribution!\n        // The result appears too bright.\n        float ndotl = clamp(dot(N, L), 0.0, 1.0);\n        mask *= BRDF_Lambert(hit.m, N, E, L) * ndotl * 2. * PI;\n#else\n        float ndotl_divided_by_pdf = PI;\n        mask *= BRDF_Lambert(hit.m, N, E, L) * ndotl_divided_by_pdf;\n#endif\n#endif // SAMPLING\n\n        if (dot(mask, mask) < 1e-3)\n        {\n            break;\n        }\n\n        r = Ray(hit.t * r.d + r.o + 1e-3 * L, L);\n\t}\n\treturn acc;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 screenCoord = fragCoord.xy / iResolution.xy;\n\tvec2 uv = (screenCoord * 2.0 - 1.0) * vec2(1., iResolution.y / iResolution.x);\n    vec2 duv = uv / iResolution.xy;\n    initSeed(fragCoord);\n\n    vec3 camPos = vec3(0.0, 0.0, -10.0);\n    vec3 color = vec3(0.);\n\tfor (int i = 0; i < SAMPLES_PER_FRAME + min(0, iFrame); ++i)\n    {\n        vec3 rd = normalize(vec3(uv + duv * Hammersley(i, SAMPLES_PER_FRAME), 5.0));\n\t\tcolor += radiance(Ray(camPos, rd));\n    }\n    \n#if ENABLE_ACCUMULATION\n    vec4 accum = texture(iChannel0, screenCoord);\n    float prev_samples = min(accum.a, float(MAX_ACCUMULATION_SAMPLES - SAMPLES_PER_FRAME));\n    float samples = prev_samples + float(SAMPLES_PER_FRAME);\n\tfragColor = vec4((accum.rgb * prev_samples + color) / samples, samples);\n#else\n    color /= float(SAMPLES_PER_FRAME);\n\tfragColor = vec4(color, 1.);\n#endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}