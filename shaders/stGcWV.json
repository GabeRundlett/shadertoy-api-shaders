{
    "Shader": {
        "info": {
            "date": "1662224171",
            "description": "Control the speed of the propeller with the mouse (x), with the center being speed 0",
            "flags": 0,
            "hasliked": 0,
            "id": "stGcWV",
            "likes": 4,
            "name": "Rolling Shutter - Spi3lot",
            "published": 3,
            "tags": [
                "sin",
                "cos",
                "plane",
                "trig",
                "matrix",
                "airplane",
                "tangent",
                "tangent",
                "trigonometry",
                "aircraft",
                "shutter",
                "tan",
                "windmill",
                "rolling",
                "propeller"
            ],
            "usePreview": 0,
            "username": "Spi3lot",
            "viewed": 168
        },
        "renderpass": [
            {
                "code": "#define AA 4\n\n#define ROLLING_SHUTTER\n#define CENTER_RADIUS 0.125\n#define BLADE_RADIUS 0.25\n#define BLADE_THICKNESS 0.25\n#define BLADES 3.0\n#define SPEED 50.0 * (iMouse.x / iResolution.x - 0.5)\n\n\nconst float pi = 3.1415926535;\nconst float tau = pi * 2.0;\nconst float dist = CENTER_RADIUS + BLADE_RADIUS - 0.05;\n\n\nbool circle(vec2 p, vec2 center, float radius)\n{\n    return distance(p, center) <= radius;\n}\n\nfloat collides(vec2 p)\n{\n    // Center\n    bool collision = circle(p, vec2(0), CENTER_RADIUS);\n    float t = iTime;\n    \n#ifdef ROLLING_SHUTTER\n    t += p.y * 0.125;\n#endif\n\n    for (float i = 0.; i < BLADES; i++)\n    {\n        float a = i * tau / BLADES + t * SPEED;\n        vec2 cs = vec2(cos(a), sin(a));\n        mat2 m = mat2(cs.x, cs.y/BLADE_THICKNESS, -cs.y, cs.x/BLADE_THICKNESS);\n\n        // Blade\n        collision = collision || circle(m * p, vec2(dist, 0), BLADE_RADIUS);\n    }\n\n    return float(collision);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float mini = min(iResolution.x, iResolution.y);\n    float c = 0.0;\n\n    // MSAA\n    for (int j = 0; j < AA; j++)\n        for (int i = 0; i < AA; i++)\n        {\n            vec2 co = floor(fragCoord);\n            vec2 offset = vec2(i, j) / float(AA);\n            vec2 uv = (2.0 * (co + offset) - iResolution.xy) / mini;\n            c += collides(uv);\n        }\n\n    c /= float(AA * AA);\n    fragColor = vec4(c);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}