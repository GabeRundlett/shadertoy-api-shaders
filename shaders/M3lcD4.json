{
    "Shader": {
        "info": {
            "date": "1726944722",
            "description": "Poincaire disc projection of the hopf fibration,",
            "flags": 0,
            "hasliked": 0,
            "id": "M3lcD4",
            "likes": 2,
            "name": "Hopf + Poincare",
            "published": 3,
            "tags": [
                "poincare",
                "hopf"
            ],
            "usePreview": 0,
            "username": "nbardy",
            "viewed": 73
        },
        "renderpass": [
            {
                "code": "// ShaderToy Shader: Hopf Fibration with Poincaré Disk, Glass Effects, and Rotations\n// Author: [Your Name]\n\n// This shader visualizes the Hopf fibration within the Poincaré disk model,\n// adding light transport, refraction, reflection, and rotations to simulate glass and dynamic movement.\n\n// Constants for refraction\nconst float refractiveIndex = 1.5; // Refractive index of glass\n\n// Function to compute the Hopf map\nvec3 hopfMap(vec3 p) {\n    // Normalize the input vector to lie on S3 (3-sphere)\n    float lenSq = dot(p, p);\n    vec4 q = vec4(2.0 * p, lenSq - 1.0) / (lenSq + 1.0);\n\n    // Map to S2 using the Hopf fibration formula\n    float x = 2.0 * (q.x * q.z + q.y * q.w);\n    float y = 2.0 * (q.y * q.z - q.x * q.w);\n    float z = q.w * q.w + q.z * q.z - q.x * q.x - q.y * q.y;\n\n    return vec3(x, y, z);\n}\n\n// Function to map points onto the Poincaré disk\nvec2 poincareDisk(vec2 uv) {\n    // Map the plane onto the unit disk using a conformal mapping\n    float r = length(uv);\n    float theta = atan(uv.y, uv.x);\n    float s = tanh(r);\n    return s * vec2(cos(theta), sin(theta));\n}\n\n// Function to compute the refracted ray\nvec3 refractRay(vec3 I, vec3 N, float eta) {\n    float cosi = clamp(dot(-I, N), -1.0, 1.0);\n    float k = 1.0 - eta * eta * (1.0 - cosi * cosi);\n    return k < 0.0 ? vec3(0.0) : eta * I + (eta * cosi - sqrt(k)) * N;\n}\n\n// Function to apply rotation around the Y-axis\nmat3 rotationY(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat3(\n        c,  0.0, s,\n        0.0, 1.0, 0.0,\n       -s,  0.0, c\n    );\n}\n\n// Function to apply rotation around the X-axis\nmat3 rotationX(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat3(\n        1.0, 0.0, 0.0,\n        0.0, c, -s,\n        0.0, s,  c\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize pixel coordinates to range [-1, 1]\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    // Apply the Poincaré disk mapping\n    vec2 diskUV = poincareDisk(uv);\n\n    // Time variable for animation\n    float t = iTime * 0.5;\n\n    // Construct a point on S3 using parameters that vary over time and the Poincaré disk coordinates\n    vec3 p;\n    p.x = sin(t) * diskUV.x;\n    p.y = sin(t) * diskUV.y;\n    p.z = cos(t) * length(diskUV);\n\n    // Apply rotations\n    mat3 rotY = rotationY(t);\n    mat3 rotX = rotationX(t * 0.5);\n    p = rotY * rotX * p;\n\n    // Apply the Hopf map\n    vec3 mapped = hopfMap(p);\n\n    // Normalize the result\n    vec3 normal = normalize(mapped);\n\n    // Simulate light direction\n    vec3 lightDir = normalize(vec3(0.0, 0.0, 1.0));\n\n    // Compute reflection and refraction\n    float eta = 1.0 / refractiveIndex;\n    vec3 refracted = refractRay(-lightDir, normal, eta);\n    vec3 reflected = reflect(-lightDir, normal);\n\n    // Fresnel term\n    float cosi = clamp(dot(-lightDir, normal), 0.0, 1.0);\n    float fresnel = mix(pow(1.0 - cosi, 3.0), 1.0, 0.1);\n\n    // Compute color from refraction and reflection\n    vec3 refractedColor = 0.5 + 0.5 * refracted;\n    vec3 reflectedColor = 0.5 + 0.5 * reflected;\n\n    // Combine colors\n    vec3 color = mix(refractedColor, reflectedColor, fresnel);\n\n    // Apply a circular mask to confine the visualization to the Poincaré disk\n    float mask = smoothstep(1.0, 0.99, length(uv));\n\n    fragColor = vec4(color * mask, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}