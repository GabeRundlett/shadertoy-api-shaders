{
    "Shader": {
        "info": {
            "date": "1528554381",
            "description": "Trying out glass in a sphere-tracing setup. Not very efficient, not fully correct, but the best I could sort out at the moment... best \"wing it\"-effort so to speak :)",
            "flags": 0,
            "hasliked": 0,
            "id": "lsGBDh",
            "likes": 8,
            "name": "Sphere-traced glass attempt",
            "published": 3,
            "tags": [
                "3d",
                "glass",
                "spheretracing",
                "fresnel"
            ],
            "usePreview": 0,
            "username": "MacSlow",
            "viewed": 835
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// some thing in a sliced box - more experimenting with boolean operations\n//\n// Copyright 2018 Mirco Müller\n//\n// Author(s):\n//   Mirco \"MacSlow\" Müller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst int MAX_ITER = 64;\nconst float EPSILON = .000125;\nconst float STEP_BIAS = .75;\n\nstruct HitResult {\n\tfloat dist;\n\tint materialId;\n};\n\nstruct Material {\n    vec3 diffuse;\n    bool doesReflect;\n    bool doesRefract;\n    float ior;\n};\n\nfloat sdTerrain (in vec3 p, in float height)\n{\n    float h = .5*texture (iChannel0, .1*p.xz).r;\n    h += .25*texture (iChannel0, .2*p.xz).r;\n    h += .125*texture (iChannel0, .4*p.xz).r;\n    h += .0625*texture (iChannel0, .8*p.xz).r;\n    h /= (.5 + .25 + .125 + .0625);\n    h += height;\n    return p.y - .0625*h*.25;\n}\n\nfloat sdBox (in vec3 p, in vec3 size, in float r)\n{\n  vec3 d = abs(p) - size;\n  return min (max (d.x, max (d.y,d.z)), .0) + length (max (d, .0)) - r;\n}\n\nmat2 r2d (in float degree)\n{\n\tfloat rad = radians (degree);\n\tfloat c = cos (rad);\n\tfloat s = sin (rad);\n\n\treturn mat2 (c, s, -s, c);\n}\n\nHitResult scene (in vec3 p)\n{\n\tfloat ground = sdTerrain (p, -22.);\n\n\tvec3 boxCenter = p + vec3 (.0, -.5, .0);\n\tboxCenter.xy *= r2d(60.*iTime);\n\tboxCenter.yz *= r2d(-30.*iTime);\n\tboxCenter.zx *= r2d(40.*iTime);\n\tfloat outterBox = sdBox (boxCenter, vec3 (.4), .05);\n\tfloat innerBox = sdBox (boxCenter, vec3 (.375), .05);\n\toutterBox = max (-innerBox, outterBox);\n\t\n\tvec3 cutterBoxCenter = p + vec3 (.0, -.2, .0);\n\tcutterBoxCenter.xy *= r2d(20.*iTime);\n\tcutterBoxCenter.yz *= r2d(40.*iTime);\n\tcutterBoxCenter.y += .4*cos (iTime);\n\tcutterBoxCenter.y = mod (cutterBoxCenter.y + .1, .2) - .1;\n\tfloat cutterBoxes = sdBox (cutterBoxCenter, vec3 (1., .035, 1.), .0);\n\toutterBox = max (outterBox, cutterBoxes);\n\n\tvec3 ballCenter = p + vec3 (.0, -.5, .0);\n\tfloat warp = .2 + .1*(.5+.5*cos (20.*ballCenter.y + 5.*iTime));\n\tfloat ball = length (ballCenter) - warp;\n\n\tHitResult result = HitResult (.0, -1);\n\tresult.dist = min (ball, min (outterBox, ground));\n\tresult.materialId = result.dist == outterBox ? 0 : (result.dist == ground ? 2 : (result.dist == ball ? 1 : -1));\n\n\treturn result;\n}\n\nfloat raymarch (in vec3 ro, in vec3 rd, inout int id)\n{\n\tfloat t = .0;\n\tfloat d = .0;\n\tint i = 0;\n\tfor (; i < MAX_ITER; ++i) {\n\t\tHitResult result = scene (ro + t*rd);\n\t\td = result.dist;\n\t\tid = result.materialId;\n\t\tif (abs (d) < EPSILON*(1. + .125*d)) break;\n\t\tt += d*STEP_BIAS;\n\t}\n\n\treturn t;\n}\n\nvec3 normal (in vec3 p, in float epsilon)\n{\n\tvec2 e = vec2 (epsilon, .0);\n\tfloat d = scene (p).dist;\n\treturn normalize (vec3 (scene (p + e.xyy).dist,\n\t\t\t\t\t\t\tscene (p + e.yxy).dist,\n\t\t\t\t\t\t\tscene (p + e.yyx).dist) - d);\n}\n\nfloat shadow (in vec3 p, in vec3 n, in vec3 lPos)\n{\n    vec3 rd = normalize (lPos - p);\n    float result = 1.;\n    float t = .1;\n    float ph = 1e10;\n    for (int i = 0; i < 64; i++) {\n        float h = scene (p + .01*n + t * rd).dist;\n        if (h < .00001) return .0;\n        float y = h*h/(2.*ph);\n        float d = sqrt (h*h - y*y);\n        result = min (result, 10.*d/max (.0, t - y));\n        ph = h;\n        t += h*.5;\n    }\n\n    return result;\n}\n\nMaterial materials[4] = Material[4] (Material (vec3 (1., .1, .2), false, true, 1./1.33),\n\t\t\t\t\t\t\t         Material (vec3 (.3, 1., .2), true, false, 1.0),\n\t\t\t\t\t\t\t         Material (vec3 (.75, .85, .95), true, false, 1.0),\n\t\t\t\t\t\t\t         Material (vec3 (1., .5, .25), false, false, 1.0));\n\nvec3 shade (in vec3 ro,\n\t\t\tin vec3 rd,\n\t\t\tin float d,\n\t\t\tin vec3 n,\n\t\t\tin int matId,\n\t\t\tin vec3 lPos,\n\t\t\tin vec3 lCol)\n{\n\tvec3 p = ro + d*rd;\n\tvec3 l = normalize (lPos - p);\n\tfloat diffuse = max (dot (l, n), .0);\n\tfloat sha = shadow (p, n, lPos);\n\tfloat lDist = distance (lPos, p);\n\tfloat attenuation = 2. / (lDist*lDist);\n\tvec3 diffTerm = sha*diffuse*lCol*attenuation;\n\n\tvec3 h = normalize (l - rd);\n\tfloat specular = pow (max (dot (n, h), .0), 20.);\n\tvec3 specColor = vec3 (1.);\n\tvec3 specTerm = (sha > .1) ? attenuation*specular*specColor : vec3 (.0);\n\n\treturn diffTerm * materials[matId].diffuse + specTerm;\n}\n\nvec3 shadeReflect (in vec3 ro,\n\t\t\t       in vec3 rd,\n\t\t\t       in float d,\n\t\t\t       in vec3 n,\n\t\t\t       in int matId,\n\t\t\t       in vec3 lPos,\n\t\t\t       in vec3 lCol)\n{\n    vec3 base = shade (ro, rd, d, n, matId, lPos, lCol);\n\n    vec3 p = ro + d*rd;\n\tvec3 l = normalize (lPos - p);\n\tfloat diffuse = max (dot (l, n), .0);\n\tfloat sha = shadow (p, n, lPos);\n\tfloat lDist = distance (lPos, p);\n\tfloat attenuation = 2. / (lDist*lDist);\n\tvec3 diffTerm = sha*diffuse*lCol*attenuation;\n\n\tvec3 h = normalize (l - rd);\n\tfloat specular = pow (max (dot (n, h), .0), 20.);\n\tvec3 specColor = vec3 (1.);\n\tvec3 specTerm = (sha > .1) ? attenuation*specular*specColor : vec3 (.0);\n\n\treturn base + diffTerm * materials[matId].diffuse + specTerm;\n}\n\nvec3 camera (in vec3 ro, in vec3 aim, in float zoom, in vec2 uv)\n{\n\tvec3 forward = normalize (aim - ro);\n\tvec3 worldUp = vec3 (.0, 1., .0);\n\tvec3 right = normalize (cross (forward, worldUp));\n\tvec3 up = normalize (cross (right, forward));\n\tvec3 center = ro + forward*zoom;\n\n\treturn normalize (center + uv.x*right + uv.y*up - ro);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvRaw = uv;\n\tuv = uv * 2. - 1.;\n\tuv.x *= iResolution.x/iResolution.y;\n\n\tvec3 ro = vec3 (2.*cos (iTime), .7, 2.*sin (iTime));\n\tvec3 rd = camera (ro, vec3 (.0, .3, .0), 1.5, uv);\n\n\tvec3 lPos1 = vec3 (1.);\n\tvec3 lCol1 = vec3 (.975, .95, .925);\n\tvec3 lPos2 = vec3 (1., 2., -1.);\n\tvec3 lCol2 = vec3 (.925, .95, .975);\n\n\tint materialId = 0;\n\tfloat d = raymarch (ro, rd, materialId);\n\tfloat fog = 1. / (1. + d*d*.1);\n\tvec3 p = ro + d*rd;\n\tvec3 n = normal (p, d*EPSILON);\n\tvec3 col = vec3 (.1);\n\tcol += shade (ro, rd, d, n, materialId, lPos1, lCol1);\n\tcol += shade (ro, rd, d, n, materialId, lPos2, lCol2);\n\n    const float airIOR = 1.;\n    const float waterIOR = 1.33;\n    float rZero = pow (((airIOR - waterIOR) / (airIOR + waterIOR)), 2.);\n\n    vec3 lDir1 = normalize (lPos1 - p);\n    vec3 lDir2 = normalize (lPos2 - p);\n    float cosTheta1 = max (.0, dot (n, lDir1));\n    float cosTheta2 = max (.0, dot (n, lDir2));\n    float fresnel1  = rZero + (1. - rZero) * pow((1. - cosTheta1), 5.);\n    float fresnel2  = rZero + (1. - rZero) * pow((1. - cosTheta2), 5.);\n\n    if (materials[materialId].doesReflect) {\n        vec3 refl = normalize (reflect (rd, n));\n        float refd = raymarch (p + .01*n, refl, materialId);\n        vec3 refp = p + refd*refl;\n        vec3 refn = normal (refp, refd*EPSILON);\n        vec3 refc = shade (p, refl, refd, refn, materialId, lPos1, lCol1);\n        refc += shade (p, refl, refd, refn, materialId, lPos2, lCol2);\n\n        col += fresnel1*fresnel2*.35*refc;\n    }\n\n    if (materials[materialId].doesRefract) {\n        vec3 refractedDir = normalize (refract (rd, n, materials[materialId].ior));\n        float dist = raymarch (p - .125*n, refractedDir, materialId);\n        vec3 refractedHit = p + dist*refractedDir;\n        vec3 refractedHitNormal = normal (refractedHit, dist*EPSILON);\n        col += shade (p, refractedDir, dist, refractedHitNormal, materialId, lPos1, lCol1);\n\t\tcol += shade (p, refractedDir, dist, refractedHitNormal, materialId, lPos2, lCol2);\n\n        if (materials[materialId].doesRefract) {\n            refractedDir = normalize (refract (refractedDir, refractedHitNormal, materials[materialId].ior));\n            dist = raymarch (refractedHit - .125*refractedHitNormal, refractedDir, materialId);\n            refractedHit = refractedHit + dist*refractedDir;\n            refractedHitNormal = normal (refractedHit, dist*EPSILON);\n            col += shade (refractedHit, refractedDir, dist, refractedHitNormal, materialId, lPos1, lCol1);\n            col += shade (refractedHit, refractedDir, dist, refractedHitNormal, materialId, lPos2, lCol2);\n        }\n\n        if (materials[materialId].doesReflect) {\n            vec3 refl = normalize (reflect (refractedDir, refractedHitNormal));\n            float refd = raymarch (refractedHit + .01*refractedHitNormal, refl, materialId);\n            vec3 refp = refractedHit + refd*refl;\n            vec3 refn = normal (refp, refd*EPSILON);\n            vec3 refc = shade (refractedHit, refl, refd, refn, materialId, lPos1, lCol1);\n            refc += shade (refractedHit, refl, refd, refn, materialId, lPos2, lCol2);\n            col += fresnel1*fresnel2*.25*refc;\n    \t}\n    }\n\n\tcol = mix (col, vec3 (.925, .95, .975), pow (1. - 1. / d, 15.));\n\tcol *= fog;\n\tcol = col / (1. + col);\n\tcol *= vec3 (.875, .85, .8);\n\tcol = .1*col + .9*sqrt (col);\n\tcol *= .2 + .8*pow(16.*uvRaw.x*uvRaw.y*(1. - uvRaw.x)*(1. - uvRaw.y), .3);\n\n    fragColor = vec4 (col, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}