{
    "Shader": {
        "info": {
            "date": "1654721292",
            "description": "License CC0: Face in the clouds\nSymmetry around y-axis can often create an illusion of a face\nor a human body. I was playing around with smeared FBM\nand added some glowing points to mislead the brain to think it's eyes\nof a malevolent cloud being.",
            "flags": 64,
            "hasliked": 0,
            "id": "sdKcDz",
            "likes": 30,
            "name": "Face in the clouds",
            "published": 3,
            "tags": [
                "fbm"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 922
        },
        "renderpass": [
            {
                "code": "// License CC0: Face in the clouds\n//  Symmetry around y-axis can often create an illusion of a face\n//  or a human body. I was playing around with smeared FBM\n//  and added some glowing points to mislead the brain to think it's eyes\n//  of a malevolent cloud being\n\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define TIME        iTime\n#define TTIME       (TIME*TAU)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n#define DOT2(x)     dot(x, x)\n#define RESOLUTION  iResolution\n\nconst mat2 frot = ROT(PI/3.33);\n\nvec2 g_vx = vec2(0.0, 0.0);\nvec2 g_vy = vec2(3.2, 1.3);\n\nvec2 g_wx = vec2(1.7, 9.2);\nvec2 g_wy = vec2(8.3, 2.8);\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nfloat sRGB(float t) { return mix(1.055*pow(t, 1./2.4) - 0.055, 12.92*t, step(t, 0.0031308)); }\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(in vec3 c) { return vec3 (sRGB(c.x), sRGB(c.y), sRGB(c.z)); }\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat vesica(vec2 p, vec2 sz) {\n  if (sz.x < sz.y) {\n    sz = sz.yx;\n  } else {\n    p  = p.yx; \n  }\n  vec2 sz2 = sz*sz;\n  float d  = (sz2.x-sz2.y)/(2.0*sz.y);\n  float r  = sqrt(sz2.x+d*d);\n  float b  = sz.x;\n  p = abs(p);\n  return ((p.y-b)*d>p.x*b) ? length(p-vec2(0.0,b))\n                           : length(p-vec2(-d,0.0))-r;\n}\n\nfloat pabs(float a, float k) {\n  return -pmin(a, -a, k);\n}\n\nfloat noise(vec2 p) {\n  float a = sin(p.x);\n  float b = sin(p.y);\n  float c = 0.5 + 0.5*cos(p.x + p.y);\n  float d = mix(a, b, c);\n  return d;\n}\n\nfloat fbm(vec2 p) {    \n  float f = 0.0;\n  float a = 1.0;\n  float s = 0.0;\n  float m = 2.0;\n  for (int x = 0; x < 4; ++x) {\n    f += a*noise(p); p = frot*p*m;\n    m += 0.01;\n    s += a;\n    a *= 0.5;\n  }\n  return f/s;\n}\n\nvec2 df(vec2 p) {\n  vec2 p0 = p;\n  p0.x = abs(p0.x);\n  p0 -= vec2(0.75, 0.4);\n  p0 *= ROT(PI/9.0);\n  float d0 = vesica(p0, vec2(0.45, 0.2));\n  float g0 = length(p0);\n\n  float d = d0;\n  float g = g0;\n\n  return vec2(d, g);\n}\n\nfloat warp(vec2 p, out vec2 v, out vec2 w) {\n  float d = df(p).x-0.1;\n  p.x = -pabs(p.x, 0.125);\n\n  v = vec2(fbm(p + g_vx), fbm(p + g_vy));\n  w = vec2(fbm(p + 3.0*v + g_wx), fbm(p + 3.0*v + g_wy));\n\n  float h = fbm(p + 2.25*w);\n\n  float aa = 0.2;\n  h *= mix(1.0, 0.05, smoothstep(aa, -aa, d));\n\n  return h*smoothstep(2.5, 0.15, abs(p.x+0.5*p.y));\n}\n\nvec3 normal(vec2 p) {\n  vec2 v;\n  vec2 w;\n  float eps = 2.0/RESOLUTION.y;\n  vec2 e = vec2(eps, 0);\n  \n  vec3 n;\n  n.x = warp(p + e.xy, v, w) - warp(p - e.xy, v, w);\n  n.y = 2.0*e.x;\n  n.z = warp(p + e.yx, v, w) - warp(p - e.yx, v, w);\n  \n  return normalize(n);\n}\n\nvec3 smear(vec2 p, vec2 q) {\n  float aa = 2.0/RESOLUTION.y;\n  g_vx *= ROT(TTIME/1000.0);\n  g_vy *= ROT(TTIME/900.0);\n  g_wx *= ROT(TTIME/800.0);\n  g_wy *= ROT(TTIME/700.0);\n\n  vec2 v;\n  vec2 w;\n \n  vec2 d2 = df(p);\n  float d = abs(d2.x) - 2.0*aa;\n  float g = d2.y;\n  float h = warp(p, v, w);\n  vec3 n  = normal(p);\n\n  vec3 ld1  = normalize(vec3(0.5, 0.2, 0.4));\n  vec3 ld2  = normalize(vec3(-0.5, 0.2, -0.4));\n  vec3 lcol1= HSV2RGB(vec3(0.9, 0.333, 1.0));\n  vec3 lcol2= HSV2RGB(vec3(0.6, 0.125, 2.0));\n  vec3 acol = HSV2RGB(vec3(0.6, 0.0, 0.3));\n\n  float dif1 = pow(max(dot(ld1, n), .0), 1.0);\n  float dif2 = pow(max(dot(ld2, n), .0), 2.0);\n\n  const vec3 col11 = HSV2RGB(vec3(0.9, 0.9, 0.5));\n  const vec3 col21 = HSV2RGB(vec3(0.4, 0.9, 0.5));\n  const vec3 col12 = HSV2RGB(vec3(0.6, 0.9, 1.5));\n  const vec3 col22 = HSV2RGB(vec3(0.0, 0.9, 1.5));\n\n  vec3 col1 = mix(col11, col12, q.x);\n  vec3 col2 = mix(col21, col22, q.y);\n  \n  vec3 col = vec3(0.0);\n  float lv = length(v);\n  float lw = length(w);\n  col += lv*col1*dif1*lcol1;\n  col += lw*col2*dif1*lcol1;\n  col += lv*col1*dif2*lcol2;\n  col += lw*col2*dif2*lcol2;\n  col += lv*col1*acol;\n  col += lw*col2*acol;\n  col *= smoothstep(0.0, 1., (h*h+0.05+0.75*0.125*(1.0+p.y)));\n//  col *= smoothstep(0.0, 1., (h*h+0.125));\n  col *= smoothstep(2.0, 8.0, TIME-length(p));\n  col += mix(5.0, 1.0, 0.5+0.5*sin(TTIME/8.0))*HSV2RGB(vec3(0.6, 0.8, 1.0))*exp(-40.0*g);\n  col *= smoothstep(0.0, 4.0, TIME);\n//  col = mix(col, vec3(1.0), smoothstep(aa, -aa, d));\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = smear(p, q);\n  col = aces_approx(col);\n  col = sRGB(col);\n\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 29088,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/shadowofthebeatofficial/scared-away"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}