{
    "Shader": {
        "info": {
            "date": "1675715036",
            "description": "Very simple scrolling mosaic. I can't figure out how to scroll rows or columns by odd number of moves, so now mosaic will back to original position after 4 moves. I added changing colors in time to mask that XD (change line 21 to const to see this).",
            "flags": 0,
            "hasliked": 0,
            "id": "cllXWM",
            "likes": 4,
            "name": "Very simple scrolling mosaic",
            "published": 3,
            "tags": [
                "simple",
                "mosaic",
                "scrolling"
            ],
            "usePreview": 0,
            "username": "maras",
            "viewed": 244
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(8.4325, 94.3412))) * 334.1243);\n}\n\nfloat timeShift(float min_speed, float offset, float ref) {\n    return min_speed * floor(mod(ref, offset));\n}\n\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\n\nmat2 rotate(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvec3 createMosaic(vec2 p, float tiles) {\n    p *= tiles;\n  \n    if (floor(mod(iTime / (PI / 2.0), 2.0)) < 1.0) p.x += timeShift(2.0, 4.0, p.y) * sin(iTime);\n    else p.y += timeShift(4.0, 2.0, p.x) * sin(iTime);\n        \n    if (mod(iTime / (PI / 2.0) + 1.0, 4.0) >= 2.0) p.x += timeShift(2.0, 4.0, p.y);\n    else p.y += timeShift(4.0, 2.0, p.x);\n    \n    float rand_col = rand(floor(p));\n    float time_change_color = iTime / 3.0;\n    return vec3(rand_col * abs(sin(time_change_color)),\n               rand_col * abs(cos(time_change_color)),\n               rand_col * abs(cos(time_change_color * rand_col)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord / iResolution.xy;\n    p -= 0.5;\n    p *= scale(vec2(abs(sin(iTime / 10.0)) * 2.0 + 1.0));\n    p *= rotate(iTime / 7.0);\n    p += 0.5;\n    vec3 col = createMosaic(p, 12.0);\n       \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}