{
    "Shader": {
        "info": {
            "date": "1608678571",
            "description": "Heavily inspired by this masterpiece from Monad and Macau Export\nhttps://www.youtube.com/watch?v=mVdISz9-iFc",
            "flags": 0,
            "hasliked": 0,
            "id": "wlccz7",
            "likes": 3,
            "name": "Space launch !",
            "published": 3,
            "tags": [
                "space",
                "sky",
                "yeah"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 253
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n// Heavily inspired by this masterpiece from Monad and Macau Export\n// https://www.youtube.com/watch?v=mVdISz9-iFc\n\n\n#define sat(a) clamp(a, 0., 1.)\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\nconst vec3 red = vec3(217, 72, 20)/255.;\nconst vec3 orange = vec3(255, 179, 48)/255.;\nconst vec3 clear = vec3(182, 224, 227)/255.;\nconst vec3 dark = vec3(46, 96, 171)/255.;\nconst vec3 black = vec3(31, 58, 99)/255.;\n\nfloat lenny(vec2 v)\n{\n    return abs(v.x)+abs(v.y);\n}\n\nfloat loz(vec2 p, float sz)\n{\n    return lenny(p)-sz;\n}\n\nfloat cir(vec2 p, float sz)\n{\n    return length(p)-sz;\n}\n\nfloat sqr(vec2 p, vec2 sz)\n{\n    vec2 q = abs(p)-sz;\n    return max(q.x,q.y);\n}\n\nfloat spike(vec2 p, vec2 sz)\n{\n    float lz = loz(p-vec2(0.,sz.y), sz.x);\n    float sq = sqr(p, sz);\n    \n    float szThr = .5;\n    p.y = p.y + sz.y + sz.x*szThr;\n    float thr = max(cir(p, sz.x*szThr), -p.y);\n    \n    return min(min(lz, sq), thr);\n}\n\nvec3 gradSky(float val)\n{\n    vec3 cols[6];\n    \n    cols[0] = vec3(0.07);\n    cols[1] = red;\n    cols[2] = orange;\n    cols[3] = clear;\n    cols[4] = dark;\n    cols[5] = black;\n    \n    float maxVal = 5.;\n    int intPart = int(val*maxVal);\n    int nextPart = min(intPart+1, int(maxVal));\n    float delta = pow(fract(val*maxVal), .6);\n    return mix(cols[intPart], cols[nextPart], delta);\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col;\n    float shp =2.;// iResolution.x*.3;\n    \n    vec2 p = uv * r2d(-.2);\n    \n    \n    col = gradSky(sat(p.y*2.5+.5));\n    \n    vec2 spkSz = vec2(.025, .1);\n    \n    float opa = .5;\n    float power = 500.;\n    \n    float spkM = spike(p, spkSz);\n    col = mix(col, col * opa, pow(1.-sat(spkM*shp), power)*(1.-sat(abs(p.x*7.))));\n    \n    // Side rockets\n    float angle = .25;\n    vec2 off = vec2(.1,0.1);\n    float sc = .5;\n    \n    float spkL = spike((p+off*vec2(1.,1.))*r2d(-angle), spkSz*sc);\n    col = mix(col, col * opa, pow(1.-sat(spkL*shp), power));\n    \n    float spkR = spike((p+off*vec2(-1.,1.))*r2d(angle), spkSz*sc);\n    col = mix(col, col * opa, pow(1.-sat(spkR*shp), power));\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n\n    vec3 col = rdr(uv);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}