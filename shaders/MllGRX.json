{
    "Shader": {
        "info": {
            "date": "1423938939",
            "description": "Testing a basic 2d fft function, probably not the optimal way of doing it.\nIncrease FFT_SIZE to get a higher quality image.",
            "flags": 0,
            "hasliked": 0,
            "id": "MllGRX",
            "likes": 27,
            "name": "2D DFT Test",
            "published": 3,
            "tags": [
                "2d",
                "fft",
                "fouriertransform",
                "dft"
            ],
            "usePreview": 0,
            "username": "Flyguy",
            "viewed": 3726
        },
        "renderpass": [
            {
                "code": "#define FFT_SIZE 48\n#define PI 3.14159265359\n\n#define avg(v) ((v.x+v.y+v.z)/3.0)\n\nvec2 fft(vec2 uv)\n{\n    vec2 complex = vec2(0,0);\n    \n    uv *= float(FFT_SIZE);\n    \n    float size = float(FFT_SIZE);\n    \n    for(int x = 0;x < FFT_SIZE;x++)\n    {\n    \tfor(int y = 0;y < FFT_SIZE;y++)\n    \t{\n            float a = 2.0 * PI * (uv.x * (float(x)/size) + uv.y * (float(y)/size));\n            vec3 samplev = texture(iChannel0,mod(vec2(x,y)/size,1.0)).rgb;\n            complex += avg(samplev)*vec2(cos(a),sin(a));\n        }\n    }\n    \n    return complex;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    uv.x += (1.0-res.x)/2.0;\n    uv.y = 1.0-uv.y;\n    \n    vec3 color = vec3(0.0);\n    \n    color = texture(iChannel0,uv).rgb;\n    \n    if(uv.x < 1.0 && uv.x > 0.0)\n    {\n    \tcolor = vec3(length(fft(uv-0.5))/float(FFT_SIZE));\n    }\n    \n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}