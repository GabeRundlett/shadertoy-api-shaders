{
    "Shader": {
        "info": {
            "date": "1573144352",
            "description": "a project for Nodevember day 7, “Moss”. it’s simpler than I’d like—I was experimenting with some more interesting lighting effects, but the sphere displacement messes up the distance metric enough that most of them straight-up didn’t work.",
            "flags": 0,
            "hasliked": 0,
            "id": "WscXDl",
            "likes": 5,
            "name": "symbiote",
            "published": 3,
            "tags": [
                "raymarch",
                "moss",
                "nodevember"
            ],
            "usePreview": 0,
            "username": "mahalis",
            "viewed": 565
        },
        "renderpass": [
            {
                "code": "// except where otherwise noted, this code is CC BY-NC https://creativecommons.org/licenses/by-nc/4.0/\n\n// -----------------\n\n// 3d noise by iq, from https://www.shadertoy.com/view/Xsl3Dl\n\n// The MIT License\n// Copyright © 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nvec3 hash( vec3 p )\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec3 p )\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\n\n// -----------------\n\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\n// x: distance, y: index of closest material\n\nvec2 d(vec3 position) {\n    float mossDist = sdSphere(position, 0.48) - pow(max(0.0, noise(position * 4.0 + vec3(0.05,0.1,0.02) * iTime)), 0.7) * 0.08;\n    \n    float sphereDist = sdSphere(position, 0.48);\n    if (mossDist < sphereDist) {\n        return vec2(mossDist, 1.0);\n    }\n    \n    return vec2(sphereDist, 0.0);\n}\n\nvec3 gradient(vec3 p, float v) {\n    const vec3 eps = vec3(0.0001, 0.0, 0.0);\n    return (vec3(d(p + eps.xyy).x, d(p + eps.yxy).x, d(p + eps.yyx).x) - v) / eps.x;\n}\n\n// x: distance traveled, y: distance to surface at the intersection point, z: material index\nvec3 march(vec3 from, vec3 towards, float prec) {\n    vec3 lastSamplePosition = from;\n    float lastDistance = 0.0;\n    float rayLength = 0.0;\n    for(int i = 0; i < 90; i++) {\n        float stepLength = max(lastDistance * 0.8, prec);\n        vec3 samplePosition = lastSamplePosition + stepLength * towards;\n        rayLength += stepLength;\n        \n        vec2 distanceAndMaterial = d(samplePosition);\n        \n        lastSamplePosition = samplePosition;\n        lastDistance = distanceAndMaterial.x;\n        \n        if (lastDistance < 0.0) {\n            return vec3(rayLength, lastDistance, distanceAndMaterial.y);\n        }\n    }\n    return vec3(0.0,1.0,0.0);\n}\n\nvec3 lightSurface(vec3 position, vec3 normal, vec3 toEye, float materialIndex) {\n    vec3 toLight = normalize(vec3(-0.3, 0.9, 0.5)  - position);\n    float ndotL = max(0.0, dot(normal, toLight));\n    float ndotV = max(0.0, dot(normal, toEye));\n    float ndotH = max(0.0, dot(normal, normalize(toEye + toLight)));\n    \n    float localNoiseValue = noise(position * 160.);\n    \n    vec3 albedo = mix(vec3(0.7 + 0.1 * localNoiseValue), mix(vec3(0.3,0.6,0.1), vec3(0.1,0.3,0.), pow(1.-abs(localNoiseValue),2.0)), materialIndex);\n    \n    float ambience = mix(0.2,0.5,clamp(dot(normal, vec3(0.0,-1.0,0.0)), 0.0, 1.0));\n    const float specular = 0.4;\n    float specularPower = mix(8.,2.,materialIndex); // moss is rougher\n    float shadow = smoothstep(0.0, 0.1, march(position + normal * 0.05, toLight, 0.002).y);\n    float lighting = (ndotL + pow(ndotH, specularPower) * specular) * shadow + ambience;\n    float fres = pow(clamp(1.0 - ndotV, 0.0, 1.0), 3.0) * materialIndex * 0.4;\n    \n    return lighting * albedo + fres;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2.0 * (fragCoord.xy / iResolution.xy - 0.5);\n    uv.x *= iResolution.x / iResolution.y;\n    const vec3 cameraLookAt = vec3(0.0, 0.0, 0.0);\n    vec3 cameraPosition = vec3(0.0, 0.4, 2.0);\n    vec3 cameraForward = normalize(cameraLookAt - cameraPosition);\n    vec3 cameraRight = cross(cameraForward, vec3(0.0, 1.0, 0.0));\n    vec3 cameraUp = cross(cameraRight, cameraForward);\n\tvec3 rayDirection = normalize(uv.x * cameraRight + uv.y * cameraUp + 3.0 * cameraForward);\n    \n    vec3 marchResult = march(cameraPosition, rayDirection, 0.001);\n    if (marchResult.y > 0.0) {\n        fragColor = vec4(0.0); // “sky” color\n    } else {\n        vec3 position = cameraPosition + rayDirection * marchResult.x;\n        fragColor = vec4(lightSurface(position, gradient(position, marchResult.y), -rayDirection, marchResult.z), 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}