{
    "Shader": {
        "info": {
            "date": "1723178340",
            "description": "for projectors + microphones",
            "flags": 4,
            "hasliked": 0,
            "id": "4fjyDd",
            "likes": 0,
            "name": "aug82024",
            "published": 3,
            "tags": [
                "popart"
            ],
            "usePreview": 0,
            "username": "brendanluu",
            "viewed": 84
        },
        "renderpass": [
            {
                "code": "vec3 palette(float t) {\n    vec3 a = vec3(1.000,1.000,1.000);\n    vec3 b = vec3(0.278,0.278,0.278);\n    vec3 c = vec3(0.757,0.051,0.773);\n    vec3 d = vec3(1.000,1.000,1.000);\n    \n    return a + b*cos(6.28318*(c*t+d) );\n}\n\nfloat getAudioKick() {\n    return texture(iChannel0, vec2(0.1, 0.0)).x; // Low frequencies\n}\n\nfloat getAudioSnare() {\n    return texture(iChannel0, vec2(0.2, 0.0)).x; // Mid frequencies\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y; \n    vec2 uv0 = uv;\n    \n    vec3 finalColor = vec3(0.0);\n    \n    // Get audio data\n    float kickIntensity = getAudioKick();\n    float snareIntensity = getAudioSnare();\n    float beatIntensity = max(kickIntensity, snareIntensity);\n    \n    // Beat detection threshold\n    float beatThreshold = .5; // Adjust this value as needed\n    \n    // Number of fractal iterations based on beat\n    float iterations = 3.0 + 6.5 * step(beatThreshold, beatIntensity);\n    \n    for(float i = 0.0; i < iterations; i++){\n        // Use beat intensity to influence the fractal\n        float beatEffect = 1.0 + beatIntensity * 70.0;\n        uv = fract(uv * .028979 * beatEffect) - 0.5;\n        \n        float d = length(uv);\n        vec3 col = palette(length(uv0) + beatIntensity);\n        d = abs(d);\n        d = .04 / d;\n        finalColor += col * d;\n    }\n    \n    // Add vignette effect\n    vec2 vignetteUV = fragCoord / iResolution.xy;\n    vignetteUV = (vignetteUV - 0.5) * 2.0;\n    float vignette = 0.85 - dot(vignetteUV, vignetteUV);\n    vignette = pow(vignette, 2.9);\n    \n    finalColor *= vignette;\n    \n    // Intensify colors based on beat\n    finalColor *= 1.0 + beatIntensity;\n    \n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}