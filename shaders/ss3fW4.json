{
    "Shader": {
        "info": {
            "date": "1656454983",
            "description": "Cell interior distances for triangle voronoi",
            "flags": 0,
            "hasliked": 0,
            "id": "ss3fW4",
            "likes": 51,
            "name": "Triangle Voronoi Borders",
            "published": 3,
            "tags": [
                "2d",
                "voronoi",
                "triangle"
            ],
            "usePreview": 1,
            "username": "tdhooper",
            "viewed": 1403
        },
        "renderpass": [
            {
                "code": "/*\n\n    Triangle Voronoi Borders\n    ........................\n\n    Based on iq's two-step voronoi distance method, but\n    using a triangle distance metric.\n    \n    To repeat iq, just doing F2-F1 Voronoi results in\n    errors at the borders, so in our second pass we\n    calculate an accurate distance to the border between\n    the overlapping triangles.\n    \n    See also:\n    \n    * Old version with sharp corners and no normals\n    https://www.shadertoy.com/view/Ns3fD7\n    \n    * Akira Saito's visualisation of how this works\n    https://twitter.com/a_saito/status/1231035875439415301\n    \n    * iq's two-step voronoi distance method\n    https://shadertoy.com/view/ldl3W8\n\n    * Overview of triangle voronoi from Shane\n    https://www.shadertoy.com/view/MlVXzd\n    \n*/\n\nconst float PI = 3.14159265359;\nconst float s3 = sin(PI / 3.);\n\nvec3 sdTriEdges(vec2 p) {\n    return vec3(\n        dot(p, vec2(0,-1)),\n        dot(p, vec2(s3, .5)),\n        dot(p, vec2(-s3, .5))\n    );\n}\n\nfloat sdTri(vec2 p) {\n    vec3 t = sdTriEdges(p);\n    return max(t.x, max(t.y, t.z));\n}\n\n// Adapted from Fizzer (found through Shane in the comments of https://www.shadertoy.com/view/Wl3fD2)\n// Picks the dominant axis and its sign:\n// vec3(1, 2, -3) -> vec3(0, 0, -1)\nvec3 primaryAxis(vec3 p) {\n    vec3 a = abs(p);\n//  return step(a.yzx, a.xyz)*step(a.zxy, a.xyz)*sign(p); // fails to pick a compoent when two have equal length, eg vec3(0,-2,2)\n    return (1.-step(a.xyz, a.yzx))*step(a.zxy, a.xyz)*sign(p);\n}\n\n// This is the interesting bit\n// Signed distance and gradient to border\nvec3 sdgBorder(vec2 pt1, vec2 pt2) {\n    \n    vec3 tbRel = sdTriEdges(pt2 - pt1);    \n    vec3 axis = primaryAxis(tbRel);\n    \n    vec2 gA = vec2(0,-1);\n    vec2 gB = vec2(s3, .5);\n    vec2 gC = vec2(-s3, .5);\n    \n    vec2 norA = gC * axis.x + gA * axis.y + gB * axis.z;\n    vec2 norB = gB * -axis.x + gC * -axis.y + gA * -axis.z;\n    \n    vec2 dir = gA * axis.x + gB * axis.y + gC * axis.z;\n    vec2 corner = dir * dot(dir, pt1 - pt2) * 2./3.;\n    \n    mat2 r90 = mat2(0,-1,1,0);\n    \n    bool isEdge = axis.x + axis.y + axis.z < 0.;\n    \n    if (isEdge) {\n        corner = pt2 + corner;\n        vec2 ca = corner + min(0., dot(corner, -norA)) * norA;\n        vec2 cb = corner + max(0., dot(corner, -norB)) * norB;\n        float side = step(dot(corner, dir * r90), 0.);\n        corner = mix(cb, ca, side);\n    } else {\n        corner = pt1 - corner;\n        vec2 ca = corner + max(0., dot(corner, -norA)) * norA;\n        vec2 cb = corner + min(0., dot(corner, -norB)) * norB;\n        float side = step(dot(corner, dir * r90), 0.);\n        corner = mix(ca, cb, side);\n    }\n    \n    vec2 nor = normalize(corner);\n\n    float d = length(corner);\n\n    return vec3(abs(d), nor);\n}\n\n\n// From here on is almost exactly like iq's voronoi https://shadertoy.com/view/ldl3W8\n\n#define ANIMATE\n\nvec2 hash2( vec2 p )\n{\n\t// texture based white noise\n\treturn textureLod( iChannel0, (p+0.5)/256.0, 0.0 ).xy;\n\t\n    // procedural white noise\t\n\t//return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nfloat time;\n\n\nvec2 cellPoint(vec2 n, vec2 f, vec2 cell) {\n    vec2 coord = n + cell;\n    vec2 o = hash2( n + cell );\n    #ifdef ANIMATE\n        o = 0.5 + 0.5*sin( time * PI * 2. + 6.2831*o );\n    #endif\t\n    vec2 point = cell + o - f;\n    return point;\n}\n\nvec3 voronoi( in vec2 x, out vec2 nor )\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 closestCell, closestPoint;\n\n    const int reach = 2;\n\n    float closestDist = 8.0;\n    for( int j = -reach; j <= reach; j++ )\n    for( int i = -reach; i <= reach; i++ )\n    {\n        vec2 cell = vec2(i, j);\n        vec2 point = cellPoint(n, f, cell);\n        float dist = sdTri(point);\n\n        if( dist < closestDist )\n        {\n            closestDist = dist;\n            closestPoint = point;\n            closestCell = cell;\n        }\n    }\n\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    closestDist = 8.0;\n    for( int j = -reach-1; j <= reach+1; j++ )\n    for( int i = -reach-1; i <= reach+1; i++ )\n    {\n        vec2 cell = closestCell + vec2(i, j);\n        vec2 point = cellPoint(n, f, cell);\n\n        float dist = sdTri(closestPoint - point);\n\n        if( dist > 0.00001 ) {\n            vec3 sdg = sdgBorder(closestPoint, point);\n            if (sdg.x < closestDist) {\n                closestDist = sdg.x;\n                nor = sdg.yz;\n            }\n        }\n    }\n\n    return vec3( closestDist, closestPoint );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xx;\n    \n    time = fract(iTime / 6.);\n\n    p *= 8.;\n\n    vec2 nor;\n    vec3 c = voronoi(p, nor);\n\n    float aa = length(fwidth(p)) * .5;\n\n\t// isolines\n    float n = 15.;\n    vec3 col = smoothstep(.25 - aa * n, .25 + aa * n, abs(mod(c.x * n + .25, 1.) - .5)) * vec3(1);\n    // normals\n    nor = mix(nor, vec2(0), smoothstep(2./n - aa, 2./n + aa, c.x));\n    col = mix(col, normalize(vec3(nor, 1)) * .5 + .5, .9);\n    // borders\t\n    col = mix( vec3(0.5,1.0,0.5) * 0., col, smoothstep( 0.01 - aa, 0.01 + aa, c.x));\n    // feature points\n\tfloat dd = length( c.yz );\n\tcol *= .2 + .8 * smoothstep( 0.00, 0.12, dd);\n    col = mix(col, vec3(1), smoothstep( 0.035 + aa, 0.035 - aa, dd));\n\n\tfragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}