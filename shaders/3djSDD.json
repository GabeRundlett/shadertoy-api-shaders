{
    "Shader": {
        "info": {
            "date": "1559703174",
            "description": "diffusion radar",
            "flags": 0,
            "hasliked": 0,
            "id": "3djSDD",
            "likes": 16,
            "name": "Diffusion Radar",
            "published": 3,
            "tags": [
                "radar",
                "diffusion"
            ],
            "usePreview": 0,
            "username": "JungleFish",
            "viewed": 1363
        },
        "renderpass": [
            {
                "code": "//Author: asmith13\n//Free to use as you wish. Have fun\n\n#define green vec3(0.0,1.0,0.0)\n\n// returns a vec3 color from every pixel requested.\n// Generates a BnW Ping on normalized 2d coordinate system\nvec3 RadarPing(in vec2 uv, in vec2 center, in float innerTail, \n               in float frontierBorder, in float timeResetSeconds, \n               in float radarPingSpeed, in float fadeDistance)\n{\n    vec2 diff = center-uv;\n    float r = length(diff);\n    float time = mod(iTime, timeResetSeconds) * radarPingSpeed;\n   \n    float circle;\n    // r is the distance to the center.\n    // circle = BipCenter---//---innerTail---time---frontierBorder\n    //illustration\n    //https://sketch.io/render/sk-14b54f90080084bad1602f81cadd4d07.jpeg\n    circle += smoothstep(time - innerTail, time, r) * smoothstep(time + frontierBorder,time, r);\n\tcircle *= smoothstep(fadeDistance, 0.0, r); // fade to 0 after fadeDistance\n        \n    return vec3(circle);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    //normalize coordinates \n    vec2 uv = fragCoord.xy / iResolution.xy; //move coordinates to 0..1\n    uv = uv.xy*2.; // translate to the center\n    uv += vec2(-1.0, -1.0);\n    uv.x *= iResolution.x/iResolution.y; //correct the aspect ratio\n    \n\tvec3 color;\n    // generate some radar pings\n    float fadeDistance = 1.0;\n    float resetTimeSec = 4.0;\n    float radarPingSpeed = 0.3;\n    vec2 greenPing = vec2(0.0, 0.0);\n    color += RadarPing(uv, greenPing, 0.25, 0.025, resetTimeSec, radarPingSpeed, fadeDistance) * green;\n    \n    //return the new color\n\tfragColor = vec4(color,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}