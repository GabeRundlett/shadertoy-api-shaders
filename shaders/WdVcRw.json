{
    "Shader": {
        "info": {
            "date": "1602483408",
            "description": "matrix initialization in GLSL offers many goodies.",
            "flags": 0,
            "hasliked": 0,
            "id": "WdVcRw",
            "likes": 6,
            "name": "lovely matrices: gLSL tricks",
            "published": 3,
            "tags": [
                "glsl",
                "matrix",
                "tuto"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 985
        },
        "renderpass": [
            {
                "code": "// display value v at cell (X,Y)\n#define dV(v,X,Y)    D( J!=ivec2(0) ? O : (v) , X,Y )\n\n// display matrix M : n × n  from cell (X,Y)\n#define dM(M,n,X,Y)  D( min(J.x,J.y) < 0 || max(J.x,J.y) >= n ? O : (M)[J.x][J.y], X,Y )\n\n#define D(v,X,Y)     J = I - ivec2(X,Y);                             \\\n                     P = ivec2( ( U-vec2(X,Y) ) * p ) % int(p);      \\\n                     O = v  *vec4(1,1.2,1.4,1)/4. * vec4(P.x*P.y>0)\n                                                    \nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    U /= R.y; U.y = 1.-U.y;\n    \n    float N = 8.,\n          p = R.y/N;                          // cell size in pixels\n    ivec2 I = ivec2(U*=N), J, P;              // cell id\n\n    O = vec4(.5,0,0,0);\n    \n    vec2 a = vec2(1,2), b = vec2(3,4);        // --- top, from left to right:\n    mat2 m2 = mat2(a,b);  dM( m2,2, 0,0);     // define mat from column vectors\n    \n    m2[0] = m2[1]; dM( m2,2, 4,0);            // use m2[0], m2[1] columns as vectors\n    m2[0]-=2.;\n\n    dM( mat2(1),2,7,0);                       // define mat from diagonal\n    \n                                              // --- middle, from left to right:\n    mat3 m3 = mat3(m2); dM( m3,3, 0,3);       // define mat3 from mat2 \n\n    m2 = mat2(transpose(m3)); dM( m2,2, 4,3); // define mat2 from mat3\n    \n    dM( mat2(normalize(vec4(m2))),2,  8,3);   // normalize matrix by L2 norm\n // dM( mat2(m2/length(vec4(m2))),2,  8,3);   // variant\n    dM( mat2(-m2/determinant(m2)),2, 11,3);   // normalize matrix by determinant\n\n                                              // --- bottom, from left to right:\n    mat3x2 m = mat3x2(1.+m3);\n    dV(  dot( m[0]/m[0], m[0]/m[0] ), 1,7 );                 // find matrix height\n    #define T transpose\n    dV( dot( T(m)[0]/T(m)[0], T(m)[0]/T(m)[0] ), 3,7 ) ;     // find matrix width\n\n    dM( mat2(cos(iTime+ vec4(0,11,33,0)))   *2.+2.,2,  8,6); // rotation matrix.     cf https://www.shadertoy.com/view/llySRh\n    dM( mat2(cos(iTime+ vec4(0,23,21,0))*.5+.5)*4.,2, 11,6); // HLS <1,j,j²> matrix. same ref\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}