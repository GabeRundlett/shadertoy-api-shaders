{
    "Shader": {
        "info": {
            "date": "1681321802",
            "description": "4k exegfx for revision 2023",
            "flags": 32,
            "hasliked": 0,
            "id": "DsVXzK",
            "likes": 43,
            "name": "Pins&Needles",
            "published": 3,
            "tags": [
                "4kexegfx"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 505
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n\n#define FK(k) floatBitsToInt(k*k*7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n  int x = FK(a); int y = FK(b);\n  return float((x-y*y)*(x*x+y)-x)/2.14e9;\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec2 uv=(fragCoord/iResolution.xy-0.5)/vec2(iResolution.y/iResolution.x,1);\n    float noise = hash(uv.x,uv.y);\n    fragColor = pow(smoothstep(vec4(-.1,-.12,-.16,0.)*.5,vec4(1.5),sqrt(\n        fragColor/fragColor.w/4.*(1.0 - dot(uv,uv)*0.6))\n    ) + noise*.025,vec4(1.2,1.15,1.1,1.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat linedist(vec3 p, vec3 a, vec3 b, float sc) {\n    float k = dot(p-a,b-a)/dot(b-a,b-a);\n    return distance(p,mix(a,b,clamp(k+cos((k*k*k)*dot(b-a,b-a)*23.)*sc,0.,1.)));\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nfloat knob(vec3 p, float sc) {\n    p = abs(p);\n    p = erot(p,normalize(vec3(1,1,0)),.95);\n    p -= .6-sc*5.;\n    p = abs(p);\n    return linedist(p,vec3(0),vec3(.5),sc)-sc;\n}\n\nfloat scene(vec3 p) {\n    float d = 100000.;\n    \n    vec3 op = p;\n    for (int i = 0; i < 10; i++) {\n        float a = float(i);\n        p = erot(op, normalize(vec3(sin(a), cos(a*3.34), sin(a*-4.2+4.))), .5);\n        d = min(d,knob(p,mix(.02,.01,float(i)/8.)));\n    }\n    return d;\n}\n\nvec3 norm(vec3 p) {\n    mat3 k = mat3(p,p,p)-mat3(0.001);\n    return normalize(scene(p) - vec3(scene(k[0]), scene(k[1]), scene(k[2])));\n}\n\n\n#define FK(k) floatBitsToInt(k*k*7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n  int x = FK(a); int y = FK(b);\n  return float((x-y*y)*(x*x+y)-x)/2.14e9;\n}\n\nvec3 pixel_color( vec2 uv, float hs )\n{\n    uv.x += .25;\n    float animorphic = 2.39;\n    uv.y /= animorphic;\n    // float hs = hash(hash(uv.x,uv.y),t);\n    float hs2 = hash(hs,4.);\n    float hs3 = hash(hs,6.);\n    vec3 off = normalize(tan(vec3(hs,hs2,hs3)))*.015;\n    vec3 init = vec3(-1.75,1.1,.0);\n    vec3 cam = normalize(vec3(1.2+off.x,uv));\n    cam = erot(cam,vec3(1,0,0),off.z);\n    \n    init = erot(init,vec3(0,0,1),5.48);\n    cam = erot(cam,vec3(0,0,1),5.48);\n    cam.z *= animorphic;\n    cam = erot(cam,normalize(vec3(-2,1,0)),.5);\n    \n    vec3 p = init;\n    float atten = 1.;\n    for (int i = 0; i < 250; i++) {\n        float dist = scene(p);\n        if (abs(dist) < 0.0001) {\n            vec3 n = norm(p);\n            atten *= (1.-abs(dot(cam,n))*.98)*.9;\n            cam = reflect(cam,n);\n            p += n*.001;\n        }\n        p += cam*dist*mix(1.,1.3,smoothstep(.2,1.,dist));\n        if (distance(init,p)>10.) break;\n    }\n    return vec3(8.*atten);\n}\n\nbool logo(vec2 uv) {\n    float id = round(uv.y * 10.5);\n    vec2 uv2 = vec2(uv.x, id / 10.5);\n    if (length(uv2*vec2(1.0,0.8) + vec2(0.75, 0.0)) < 1. && length(uv2) < .9) return mod(id,2.) > .5;\n    if (length(uv)<1.&&uv.x<0.)return true;\n    return abs(length(uv) - 1.) < 0.07;\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    vec2 uv=(fragCoord/iResolution.xy-0.5)/vec2(iResolution.y/iResolution.x,1);\n    \n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    if (iFrame == 0) {\n        fragColor = vec4(0);\n    }\n    \n    float noise = hash(uv.x,uv.y);\n    float hs = hash(noise,float(iFrame));\n    float hs2 = hash(hs,345.);\n\n    uv+=vec2(hs,hs2)/iResolution.x;\n\n    if (abs(uv.y) > 1./2.39) {\n        fragColor += vec4(.01,.011,.012,1);\n        return;\n    }\n    if (logo((uv+vec2(-.83,.36))*40.)) {\n        fragColor += vec4(2,2,2, 1);\n        return;\n    }\n    vec3 col = pixel_color(uv, hash(hs,25.));\n    fragColor += vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}