{
    "Shader": {
        "info": {
            "date": "1572635132",
            "description": "Hex grid cyclic cellular automaton.",
            "flags": 32,
            "hasliked": 0,
            "id": "WstXRl",
            "likes": 42,
            "name": "Shadertober 30 Waves -jaburns",
            "published": 3,
            "tags": [
                "automata",
                "hex",
                "cyclic"
            ],
            "usePreview": 0,
            "username": "jaburns",
            "viewed": 1177
        },
        "renderpass": [
            {
                "code": "#define PI    3.14159\n#define sqrt3 1.73205\n\nfloat hexDist( vec2 p )\n{\n    p = abs(p);\n    return max(dot(p, normalize(vec2(1, sqrt3))), p.x);\n}\n\nstruct HexCoord\n{\n    vec2 id;\n    vec2 xy;\n    float dist;\n};\n\nHexCoord hexCoord( vec2 uv )\n{\n    const vec2 hexDim = vec2(1, sqrt3);\n    const vec2 normHexDim = normalize(hexDim);\n    \n    vec2 uva = mod(uv, hexDim) - .5*hexDim;\n    vec2 uvb = mod(uv + .5*hexDim, hexDim) - .5*hexDim;\n    \n    vec2 guv;\n    float idx;\n    \n    if (length(uva) < length(uvb)) {\n        guv = uva;\n        idx = .5;\n    } else {\n \t\tguv = uvb;\n        uv += .5*hexDim;\n        idx = 0.;\n    }\n\n    vec2 q = abs(guv);\n    return HexCoord(\n        vec2(floor(uv.x), 2.*(floor(uv.y / sqrt3)+idx)),\n        2. * guv,\n        max(dot(q, normHexDim), q.x)\n    );\n}\n\nmat2 rot( float theta )\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2( c, s, -s, c );\n}\n\nvec3 getColor( float l, float off )\n{\n    float t = mix(l, (1.-l), .5+.5*sin(.1*off));\n    return mix(\n        vec3(230, 28, 93)/255.,\n        vec3(255, 233, 138)/255.,\n\tt);\n}\n\nvec3 image( vec2 uv )\n{\n    HexCoord hx = hexCoord(uv);\n    float l = texelFetch( iChannel1, ivec2(hx.id) % ivec2(iResolution.xy), 0 ).b;\n    float AA = .15;    \n    float v = 1. - smoothstep(l+.1,l+.1+AA, hx.dist*2.2);\n    return vec3(v * getColor(l, uv.x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float T = .5*iTime;\n    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(250., 250., -20);\n    ro.xy += 125.*vec2(sin(.05*T), cos(.05*T));\n    \n    vec3 rd = normalize(vec3(uv, 1.));\n    \n    rd.xz *= rot(.5*sin(.3*T));\n    rd.yz *= rot(.2*sin(.7*T));\n    \n    float ph = -ro.z / rd.z;\n    vec3 p = ro + ph*rd;\n    fragColor = vec4(image(p.xy), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float hash21( vec2 p )\n{\n\treturn fract(sin(dot(p ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nint valueAt( ivec2 coord )\n{\n    if( coord.x < 0 ) coord.x += int(iResolution.x);\n    if( coord.y < 0 ) coord.y += int(iResolution.y);\n    return int( texelFetch( iChannel1, coord % ivec2(iResolution), 0 ).r * LEVELSf );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    ivec2 coord = ivec2( fragCoord );\n    vec4 clock = texelFetch( iChannel1, ivec2(0), 0 );\n    \n    if( coord == ivec2(0) ) {\n        float newShuffleTime = 1. - mod(iTime, SHUFFLE_PERIOD) / SHUFFLE_PERIOD;\n        float newStepTime    = 1. - mod(iTime, STEP_PERIOD)    / STEP_PERIOD;\n        \n        clock = vec4(\n            newShuffleTime > clock.z ? 1. : 0.,\n            newStepTime    > clock.w ? 1. : 0.,\n            newShuffleTime,\n            newStepTime\n        );\n        \n        fragColor = clock;\n        return;\n    }\n\n    if( clock.x > .5 ) {\n        fragColor = texelFetch( iChannel1, coord, 0 );\n        float v = hash21( fragCoord / iResolution.xy + iTime );\n        v = floor( v * LEVELSf ) / LEVELSf;\n        fragColor = vec4(v,fragColor.g,fragColor.b,0);\n        return;\n    }\n    if( clock.y < .5 ) {\n        fragColor = texelFetch( iChannel1, coord, 0 );\n        fragColor.b = mix( fragColor.r, fragColor.g, clock.w );\n        return;\n    }\n    \n    int vn, pv, v;\n    pv = v = valueAt( coord );\n       \n    vn = valueAt( coord + ivec2( 1, 0 ));\n    if( vn == ((v + 1) % LEVELSi) ) v = vn;\n    vn = valueAt( coord + ivec2( -1, 0 ));\n    if( vn == ((v + 1) % LEVELSi) ) v = vn;\n\n    vn = valueAt( coord + ivec2( 0, 1 ));\n    if( vn == ((v + 1) % LEVELSi) ) v = vn;\n    vn = valueAt( coord + ivec2( coord.y % 2 == 0 ? -1 : 1, 1 ));\n    if( vn == ((v + 1) % LEVELSi) ) v = vn;\n\n    vn = valueAt( coord + ivec2( 0, -1 ));\n    if( vn == ((v + 1) % LEVELSi) ) v = vn;\n    vn = valueAt( coord + ivec2( coord.y % 2 == 0 ? -1 : 1, -1 ));\n    if( vn == ((v + 1) % LEVELSi) ) v = vn;\n    \n\tfragColor = vec4(float(v), float(pv), float(pv), 0 ) / LEVELSf;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float SHUFFLE_PERIOD = 10.;\nconst float STEP_PERIOD    = .2;\n\nconst int   LEVELSi = 7;\nconst float LEVELSf = float(LEVELSi);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}