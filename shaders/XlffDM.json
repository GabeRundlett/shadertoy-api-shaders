{
    "Shader": {
        "info": {
            "date": "1512046177",
            "description": "Example on how to generate a very good looking yet cheap starfield with varying density.\n\nFor example usage of a similar method see this submission: [url=https://www.shadertoy.com/view/ltSyDc]Rays in Space[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "XlffDM",
            "likes": 2,
            "name": "Static Starfield",
            "published": 3,
            "tags": [
                "star",
                "stars",
                "static",
                "starfield",
                "hash"
            ],
            "usePreview": 0,
            "username": "DrLuke",
            "viewed": 1077
        },
        "renderpass": [
            {
                "code": "// This work is licensed under a Creative Commons Attribution 4.0 International License.\n// https://creativecommons.org/licenses/by/4.0/\n\n\n#define HASHSCRAMBLE\n\n\n// Hash function\nfloat hash2(vec2 p)\n{\t\n    return fract(3527.9445673*(cos(p.x * 1543.1425234) + cos(p.y * 2063.234621234)));\n}\n\n// Simple rotation Matrix\nmat2 rot2(float angle)\n{\n    return mat2( cos( angle ), -sin( angle ), sin( angle ),  cos( angle ));\n}\n\n// Generates the starfield\nvec3 StaticStarfield(vec2 p, float intensity)\n{\n    // Sample noise at pixel coordinate\n    vec4 noise = texture(iChannel0, p/iChannelResolution[0].xy);\n    \n    #ifdef HASHSCRAMBLE\n    // Use hash to scramble the 4 noise channels to produce a more random pattern\n    // This way the star pattern won't repeat itself multiple times on the screen\n    float hash = hash2(p);\n    float star = mix(noise.r, noise.g, step(0.25, hash));\n    star = mix(star, noise.b, step(0.5, hash));\n    star = mix(star, noise.a, step(0.75, hash));\n    #else\n    float star = noise.r;\n    #endif\n    \n    // Squash the brightness values to create bright stars with black voids inbetween\n    float ssfbrightness = pow((star-intensity)/(1.-intensity), 6.);\n    // Add some random colors to stars by subtracting noise texture value\n    #define SSFCOL (vec3(1) - noise.rgb*0.2)*ssfbrightness\n    return clamp(SSFCOL, 0., 1.);\n}\n\n// Example application of the static star field\n// It works by generating a mask for where the stars shall have a higher density\n// and then increases the density in those areas. It also applies a haze to where\n// the density is higher. Google some pictures of Globular Cluster to see this \n// effect in real images.\n#define PI 3.14159\n#define PI2 (2.*PI)\nvec3 Stars(vec2 fragCoord)\n{\n    vec2 uv = (fragCoord.xy * 2.) / iResolution.xy - vec2(1);\t// UV only needed for generating mask\n    \n    // Generate a mask with two distorted ellipses\n\tfloat starmask = length(rot2(-PI2*0.04)*(uv-vec2(0.7 - 0.2*(uv.y * uv.y), 0.1))/vec2(0.6,4));\n    starmask = min(starmask, length(rot2(PI2*0.1)*(uv-vec2(-0.5, -0.4 + 0.7*(uv.x * uv.x )))/vec2(0.6,2)));\n    starmask = 1.-smoothstep(-0.4, 0.7, starmask);\t// Apply smoothstep to get a blobby mask\n    \n    //return vec3(starmask);\t// Uncomment to see mask\n    \n    float density = 0.96 - starmask*0.5;\t// Subtract mask from base density value (decreased value => more stars)\n    vec3 outcol = StaticStarfield(fragCoord, density);\t// Generate stars with applied density map\n    \n\toutcol += vec3(2, 1, 1) * starmask*0.05;\t// Also add the mask itself to generate a haze where the star\n    \t\t\t\t\t\t\t\t\t\t\t// density is higher to make it look more awesome (Try without!)\n    \n    return outcol;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = vec4(vec3(Stars(fragCoord.xy).rgb),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}