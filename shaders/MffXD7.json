{
    "Shader": {
        "info": {
            "date": "1705335861",
            "description": "slightly different rule with growth",
            "flags": 32,
            "hasliked": 0,
            "id": "MffXD7",
            "likes": 14,
            "name": "3-regular automata 2",
            "published": 3,
            "tags": [
                "graph",
                "ca",
                "cellularautomata",
                "retract"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 272
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 o, vec2 px )\n{\n    o = cell(px);   \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define res iResolution.xy\n#define cell(p) texelFetch(iChannel0, ivec2(mod(p, res)), 0)\n\n// from Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 o, vec2 px )\n{   \n    if (iFrame < 1) { // Initial state\n        vec2 u = (px - .5 * res) / res.y;\n        vec2 f = fract(16.*u) - .5;\n        float d = length(f);\n        float s = step(d, .25);\n        o = 0.*o + s * hash12(1e3*fract(iDate[3]) + 1e-5*px);\n    }\n    else {\n        o = cell(px);\n        \n        float sum, t;\n        vec2 p;\n        \n        float n = 5.;\n        for (float i = -n; i <= n; i++)\n        for (float j = -n; j <= n; j++) {\n            // Weight each neighbor\n            float w = max(abs(i), abs(j));\n            \n            // Neighbor value * weight\n            float c = cell(px + vec2(i, j)).x * w;\n\n            sum += c;            // Sum neighbor val * weight\n            p += c * vec2(i, j); // Sum weighted relative positions\n            t += w;              // Sum weights\n        }\n        \n        sum /= t; // Map to [0,1] range\n        p /= t;   // Map to [-1,1]^2 range (I think)\n        \n        // Magical equation I don't understand\n        o -= 2. * sum * dot(p,p)\n           * (step(sum+sqrt(sum), length(p)) - .5);\n        \n        o = clamp(o, 0., 1.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}