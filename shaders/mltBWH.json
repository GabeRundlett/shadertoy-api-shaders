{
    "Shader": {
        "info": {
            "date": "1701202976",
            "description": "Simple Gray-Scott reaction diffusion simulation.",
            "flags": 32,
            "hasliked": 0,
            "id": "mltBWH",
            "likes": 2,
            "name": "Reaction Diffusion asteriskman2",
            "published": 3,
            "tags": [
                "simplediffusion"
            ],
            "usePreview": 0,
            "username": "asteriskman",
            "viewed": 167
        },
        "renderpass": [
            {
                "code": "//Simple color mapping of chemical b density\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    fragColor = texture(iChannel0, uv);\n    \n    //colors to interpolate between assuming b density doesn't get much above 0.5\n    vec4 c0 = vec4(0.2, 0., 0.2, 1.);\n    vec4 c1 = vec4(0., 1.9, 0.1, 1.);\n    \n    //draw chemical b density\n    fragColor = (1. - fragColor.g) * c0 + fragColor.g * c1;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n  Simulate reaction diffusion based on https://www.karlsims.com/rd.html.\n  Value of chemical A is in r channel and chemical B is in g channel.\n  Initial value is a small, slightly random, circle of B in the center.\n*/\n//reaction diffusion constants\n#define DA 1.0\n#define DB 0.5\n#define F 0.055\n#define K 0.062\n#define CONVC -1.\n#define CONVA 0.2\n#define CONVD 0.05\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //uv to use with the buffer\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 draw = texture(iChannel0, uv);\n    \n    //uv distance to the \"next pixel\"\n    float diffx = 1. / iResolution.x;\n    float diffy = 1. / iResolution.y;\n    \n    if (iTime < 0.2) {\n      //initialize with some slightly rnd data in the middle\n      vec4 v = texture(iChannel1, vec2(mod((mod(fragCoord.x,  64.)) / 64. + iDate.w, 1.), mod(mod(fragCoord.y, 64.) / 64. + iDate.z, 1.)));\n      float dx = fragCoord.x - iResolution.x * 0.5;\n      float dy = fragCoord.y - iResolution.y * 0.5;\n      float d = sqrt(dx * dx + dy * dy);\n      fragColor = vec4(1., d < 10. ? (v.r / 2.) : 0., 0., 1.0);\n    } else {\n      //take reaction diffusion step based on https://www.karlsims.com/rd.html\n      //chemical A is in r channel and chemical B is in b channel\n      float a = draw.r;\n      float b = draw.g;\n      //unroll convolution with \n      /*\n        | convD, convA, convD |\n        | convA, convC, convA |\n        | convD, convA, convD |\n      */\n      //assuming adjacent pixels are diff uv away\n      float la = CONVC * a +\n        CONVA * texture(iChannel0, uv + vec2(-diffx,     0.)).r +\n        CONVA * texture(iChannel0, uv + vec2(+diffx,     0.)).r +\n        CONVA * texture(iChannel0, uv + vec2(0.    , -diffy)).r +\n        CONVA * texture(iChannel0, uv + vec2(0.    , +diffy)).r +\n        CONVD * texture(iChannel0, uv + vec2(-diffx, -diffy)).r +\n        CONVD * texture(iChannel0, uv + vec2(+diffx, +diffy)).r +\n        CONVD * texture(iChannel0, uv + vec2(-diffx, +diffy)).r +\n        CONVD * texture(iChannel0, uv + vec2(+diffx, -diffy)).r;        \n      float lb = CONVC * b +\n        CONVA * texture(iChannel0, uv + vec2(-diffx,     0.)).g +\n        CONVA * texture(iChannel0, uv + vec2(+diffx,     0.)).g +\n        CONVA * texture(iChannel0, uv + vec2(0.    , -diffy)).g +\n        CONVA * texture(iChannel0, uv + vec2(0.    , +diffy)).g +\n        CONVD * texture(iChannel0, uv + vec2(-diffx, -diffy)).g +\n        CONVD * texture(iChannel0, uv + vec2(+diffx, +diffy)).g +\n        CONVD * texture(iChannel0, uv + vec2(-diffx, +diffy)).g +\n        CONVD * texture(iChannel0, uv + vec2(+diffx, -diffy)).g;\n      float abb = a * b * b;\n      float da = DA * la - abb + F * (1. -a);\n      float db = DB * lb + abb - (K + F) * b;\n      fragColor.r = a + da;\n      fragColor.g = b + db;\n      fragColor.b = 0.;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}