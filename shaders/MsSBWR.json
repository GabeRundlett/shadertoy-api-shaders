{
    "Shader": {
        "info": {
            "date": "1501471176",
            "description": "Control one of the cells with the mouse, see the code for an explanation.",
            "flags": 0,
            "hasliked": 0,
            "id": "MsSBWR",
            "likes": 6,
            "name": "[SH17C] Poincare Voronoi",
            "published": 3,
            "tags": [
                "2d",
                "voronoi",
                "hyperbolic"
            ],
            "usePreview": 0,
            "username": "Ebanflo",
            "viewed": 1200
        },
        "renderpass": [
            {
                "code": "/*\nThe Poincare disk model is a model for the hyperbolic plane in which straight lines are represented\nas circle arcs that are orthogonal (orthogonal meaning that they have perpendicular tangent lines,\nin this case) to the boundary circle. \n*/\n\n#define numCells 20\nconst float pi2 = 1.5708;\n\n/*\nthe line element for this space, i.e. the square distance for two infitesimally separated points is\n(dx^2+dy^2)/(1-x^2-y^2)\nAs an aside, this line element is invariant under conformal maps (Mobius transformations) from the\ndisk to itself. We could calculate distance between points by taking the square root of this line \nelement and integrating along a geodesic, which is probably some nasty business. Luckily, there's\na metric that works for finitely separated points, it would look ugly if written out here so you can\nlook at my code directly below or check out the wikipedia for more info:\nhttps://en.wikipedia.org/wiki/Poincar%C3%A9_disk_model\n*/\nfloat metric(vec2 a, vec2 b){\n    float d = 2.0 * dot(a - b, a - b);//two times the square distance between a and b\n    d /= 1.0 - dot(a, a);//divided by 1 minus the square distance of each point to the origin\n    d /= 1.0 - dot(b, b);\n    d = acosh(1.0 + d);//the inverse hyperbolic cosine of one plus all that\n    return d;\n}\n\n//A pseudorandom function thanks to Dave Hoskins that will be used to determine the motion\n//of each cell.\nvec3 hash31(float p)//https://www.shadertoy.com/view/4djSRW\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+19.19);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n//two dimensional rotation\nvec2 rot(vec2 v, float t){\n    vec2 tr = sin(t + vec2(0, pi2));\n    return vec2(tr.x * v.x - tr.y * v.y, tr.x * v.y + tr.y * v.x);\n}\n\nvec2 voronoi(vec2 p){\n    //initialize distance to a very high number\n    float d = 9e9;\n    //declare an integer for kepping tack of which point 'p' is closest to\n    int index = 0;\n    //usually when renderring voronoi diagrams you only loop through the nearest cells,\n    //but since we're using such an unordinary metric that would proably lead to lots of artifacts\n    for(int i = 0; i < numCells; i++){\n        //declare 'o', which will be the center of the cell\n        vec2 c;\n        //for the first cell, we make o depend on mouse position\n        if(i == 0) c=(iMouse.xy==vec2(0))?vec2(0):(2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n        else {\n            //otherwise we generate a random number and do some stuff with it to make center move \n            //around inside the disk\n            vec3 h = hash31(float(i));\n            c = .5 * h.xy - .25;\n            c = mix(c, -c, .5 + .5 * sin(h.z * iTime));\n            c = rot(c, (h.z - h.x - h.y) * iTime);\n            c *= inversesqrt(sqrt(dot(c, c)));\n        }\n        //calculate the distance from the center to p using the Poincare metric\n        float d0 = metric(p, c);\n        //if that distance is less than the current minimum distance, reset the minimum distance to\n        //it and do the same for the index of the cell\n        if(d0 < d){index = i; d = d0;}\n        //if all we wanted was distance data, i.e. for making Worley noise, we could just say\n        //d=min(d,d0) which would be nice since its less branching, but we want the index of the cell\n        //as well so we need the conditional.\n    }\n    return vec2(index, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    if(dot(xy, xy) > 1.0) fragColor.xyz = vec3(0);\n    else {\n    \tvec2 v = voronoi(xy);\n    \tfragColor.xyz = .5 + .5 * sin(vec3(v.x + 1.0) * vec3(3, 6, 9) + vec3(2, 4, 6));\n        fragColor.xyz = pow(fragColor.xyz, vec3(2.0 * v.y));\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}