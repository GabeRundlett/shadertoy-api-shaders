{
    "Shader": {
        "info": {
            "date": "1560324615",
            "description": "Solutions to y^x=x^y where x and y are complex numbers. This surface is four dimensional, so it's visualized in a weird bad way. At some point I might try to a raymarcher with stereographic projection from the C2 unit sphere to R3.",
            "flags": 0,
            "hasliked": 0,
            "id": "tljGRV",
            "likes": 6,
            "name": "y^x=x^y; x,y ∈ ℂ",
            "published": 3,
            "tags": [
                "math",
                "wip",
                "graph",
                "complex"
            ],
            "usePreview": 0,
            "username": "BenjaminL",
            "viewed": 479
        },
        "renderpass": [
            {
                "code": "#define EPSILON 0.1\n#define Complex vec2\n\nComplex expc(Complex z) {\n    return exp(z.x) * Complex(cos(z.y), sin(z.y));\n}\n\nComplex powcf(float a, Complex b) {\n    return expc(b * log(a));\n}\n\nComplex powfc(Complex a, float b) {\n    float r = length(a);\n    float theta = atan(a.y, a.x);\n    return expc(b * Complex(log(r), theta));\n}\n\nComplex mulc(Complex a, Complex b) {\n    return Complex(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\nComplex powcc(Complex a, Complex b) {\n    float r = length(a);\n    float theta = atan(a.y, a.x);\n    return expc(mulc(b, Complex(log(r), theta)));\n}\n\nfloat sat(Complex x, Complex y) {\n    float dist = abs(length(powcc(x, y)) - length(powcc(y, x)));\n    return dist / max(fwidth(dist), 0.01);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 imag = 10.0 * iMouse.xy / iResolution.xy - 5.0;\n\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    for(int xi = -10; xi < 10; xi++) {\n        for(int yi = -10; yi < 10; yi++) {\n            vec2 realImag = vec2(float(xi), float(yi)) / 3.0;\n            vec2 xy = uv * 10.0;\n            float c = 1.0 / sat(Complex(xy.x, imag.x + realImag.x), Complex(xy.y, imag.y + realImag.y));\n            //c = smoothstep(0.5, 1.0, c);\n            c = min(c, 1.0);\n            float theta = atan(realImag.y, realImag.x);\n            fragColor.rgb += 0.02 * vec3(cos(theta / 2.0), sin(theta / 2.0), length(realImag) / sqrt(200.0)) * c;\n        }\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}