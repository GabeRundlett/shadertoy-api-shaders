{
    "Shader": {
        "info": {
            "date": "1722708999",
            "description": "sources https://www.shadertoy.com/view/DtGyWh https://glslsandbox.com/e#102093.0",
            "flags": 0,
            "hasliked": 0,
            "id": "lfBczc",
            "likes": 2,
            "name": "cubus busta",
            "published": 3,
            "tags": [
                "fractal",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 171
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(10,13,11))*.5+.5)\nfloat trucatedicosahedron(vec3 p, float r)\n{\n\tvec4 q\t= vec4(.30901699437, .5,.80901699437, 0.);\t\n\t//p = abs(p);\n\tfloat d = 0.;\n\n\tp\t= abs(p);\n\td\t= max(max(max(max(max(p.x, p.y), p.z), dot(p, q.zxy)), dot(p, q.xyz)), dot(p, q.yzx));\t\n\td \t= max(max(max(dot(p, q.ywz), dot(p, q.zyw)),dot(p, q.wzy)), d - .125);\t\t\t\n\td\t-= r - .125;\n\treturn  d;\n}\n#define  time iTime\n#define  resolution iResolution.xy\n\n// --------[ Original ShaderToy begins here ]---------- //\nvec3 gl1 = vec3(0.);\nvec3 gl2 = vec3(0.);\nvec3 gl3 = vec3(0.);\nvec3 gl4 = vec3(0.);\n\nmat2 r2d(float a){\n    float s = sin(a), c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat vma(vec3 v) {\n    return max(v.x, max(v.y, v.z));\n}\n\n// from hg_sdf\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vma(min(d, vec3(0)));\n}\n   \nvec2 de(vec3 p) {\n\n    float d = 0.;\n   \n\n    p.xz*=r2d(iTime);\n     p.yz*=r2d(iTime);\n    vec3 q = p;\n    vec3 z = p;\n    \n    vec2 a = vec2(9999.);\n    vec2 b = vec2(9999.);\n    \n    float h = .5;\n    vec3 k = vec3(.2);\n    \n    a.x = max ( fBox(p, vec3(h + .18, h + .18, h + .18)), -length(p) + .8);\n    a.x = max ( a.x, -fBox(abs(p) - vec3( h, h, h), k));\n    \n    gl1+=(0.0004/(0.03+a.x*a.x))*vec3(0,1,1);\n    a.y = .5;\n    \n    b.x = fBox(abs(p) - vec3( h, h, h), k);\n    b.y = .3;\n    gl3+=(0.0004/(0.03+b.x*b.x))*vec3(0,1,0);\n    a = (a.x < b.x) ? a : b;\n\n    p = q;\n    p.xz *= r2d(iTime * 2.);\n    b.x = length(abs(p) - vec3(.5, 0., 0.)) - .2;\n    gl4+=(0.0004/(0.03+b.x*b.x))*vec3(0,0,1);\n    b.y = .3;\n    a = (a.x < b.x) ? a : b;\n    \n    p = q;\n    p.xy *= r2d(iTime * 2.);\n    b.x = length(abs(p) - vec3(0., .5, 0.)) - .2;\n    gl4+=(0.0004/(0.03+b.x*b.x))*vec3(0,0,1);\n    b.y = .5;\n    a = (a.x < b.x) ? a : b;\n    \n    return a;\n}\n\nconst vec2 e = vec2(.000035, -.000035);\nvec3 norm(vec3 po) {\n        return normalize(e.yyx*de(po+e.yyx).x + e.yxy*de(po+e.yxy).x +\n                         e.xyy*de(po+e.xyy).x + e.xxx*de(po+e.xxx).x);\n}\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    \n    vec2 uv = (C - iResolution.xy * .5) / iResolution.y;\n    float time = iTime * 2.;\n    \n    vec3 ro = vec3(0., 0., 17.);\n    vec3 ta = vec3(0.);\n    \n    vec3 vd = normalize(ta - ro);\n    vec3 ri = normalize(cross(vd, vec3(.0, 3., 0.)));\n    vec3 dw = normalize(cross(ri, vd));\n    vec3 rd = normalize(ri * uv.x + dw * uv.y + 3. * vd);\n    float tr =  trucatedicosahedron(vd,2.);\n    float t = 0.;\n    vec2 h;\n    vec3 po = vec3(0.); \n    \n    for (int i = 0; i < 64; i++) {\n        po = ro + rd * t;   \n        h = de(po);\n        if (h.x < .001) {\n            if (h.y == .5) {\n                vec3 n = norm(po);\n                rd = reflect(rd, n);\n                ro = po + n * .01;\n                t = .0;\n            } else \n                if(h.y == .3)\n                    h.x = abs(h.x) + .001;\n        }\n        t += h.x;\n    }\n    \n    vec3 c = vec3(.1);\n\n    c += gl1 * .7;\n    c += gl2 * .9;\n    c += gl3 * .5;\n    c += gl4 * .9;\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p=g*d;\n        \n       \n        a=30.;\n        p=mod(p-a,a*2.)-a;\n        s=3.;\n           \n    \n    p.xz*=r2d(iTime*0.1);\n     p.yz*=-r2d(iTime*0.1);\n\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            \n \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            p.y<p.x?p=p.zxy:p;\n            \n            s*=e=1.4+sin(iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+cos(iTime*.3+.5*cos(iTime*.3))*3.,\n                    120,\n                    8.+cos(iTime*.5)*5.\n                 )*c;\n         }\n       \n         g+=e=length(p.yx)/s;\n       \n    }\n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    O*= vec4(happy_star(uv, anim) * vec3(0.35,0.2,0.15)*100., 1.0);\n    O*=vec4(c,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}