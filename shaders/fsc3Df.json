{
    "Shader": {
        "info": {
            "date": "1630726906",
            "description": "Reproduction of the album artwork of \"Into The Dream\" by Vanilla:\nhttps://vanillabeats.bandcamp.com/album/into-the-dream-3",
            "flags": 0,
            "hasliked": 0,
            "id": "fsc3Df",
            "likes": 3,
            "name": "Into the Dream",
            "published": 3,
            "tags": [
                "2d",
                "text",
                "antialiasing",
                "reproduction",
                "vanilla"
            ],
            "usePreview": 0,
            "username": "rackman",
            "viewed": 277
        },
        "renderpass": [
            {
                "code": "/**\n * Reproduction of the album artwork of \n * \"Into The Dream\" by Vanilla\n * https://vanillabeats.bandcamp.com/album/into-the-dream-3\n */\n\n#define PI 3.1415926\n#define RADIUS 0.791\n#define RINGS 10.0\n#define SECTIONS 8.0\n#define AA 2\n\nconst int[] SECTION_IDS = int[](\n     0,  1,  1,  1,  1,  0,  0,  0,\n     0,  1,  3,  3,  3,  2,  0,  0,\n     0,  1,  3,  5,  5,  5,  4,  0,\n     0,  1,  3,  5,  7,  7,  7,  6,\n     8,  1,  3,  5,  7,  9,  9,  9,\n    11, 10,  3,  5,  7,  9, 11, 11,\n    13, 13, 12,  5,  7,  9, 11, 13,\n    15, 15, 15, 14, 16, 17, 18, 19,\n    15, 15, 15, 14, 16, 17, 18, 19,\n    15, 15, 15, 14, 16, 17, 18, 19\n);\n\n// https://www.shadertoy.com/view/MsS3Wc by iq\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvec3 color_for_section(int s) {\n    float hue = 0.25 + 0.25 * sin(iTime*0.25) + (float(s) / 45.0);\n    return hsb2rgb(vec3(hue, 0.65, 0.71));\n}\n\n// https://www.shadertoy.com/view/XtfyRS by knarkowicz\nfloat glyph_sdf(vec2 p, float char) {\n\tp = abs(p.x - .5) > .5 || abs(p.y - .5) > .5 ? vec2(0.) : p;\n\treturn 2. * (texture(iChannel0, p / 16. + fract(vec2(char, 15. - floor(char / 16.)) / 16.)).w - 127. / 255.);\n}\n\n// https://www.shadertoy.com/view/XtfyRS by knarkowicz\nvoid text(inout vec3 color, vec2 p) {\n\tfloat glyphRatio = 2.0;\n\tvec2 glyphScale = 6. * vec2(1., glyphRatio);\n    \n\tvec2 t = floor(p / glyphScale + 1e-6);\n\n\tuint v = 0u;\n\tv = t.y == 1. ? ( t.x < 4. ? 1229865302u : ( t.x < 8. ? 4279372u : 0u ) ) : v;\n    v = t.x >= 0. && t.x < 16. ? v : 0u;\n\tfloat char = float((v >> uint(8. * t.x)) & 255u);\n\n\tvec2 posInCell = (p - t * glyphScale) / glyphScale;\n\tposInCell.x = (posInCell.x - .5) / glyphRatio + .5;\n\n\tfloat sdf = glyph_sdf(posInCell, char);\n\tif (char != 0.) {\n\t\tcolor = mix(vec3(.2), color, smoothstep(-.04, +.04, sdf));\n\t}\n    \n    p.x += 41.0;\n    \n    t = floor(p / glyphScale + 1e-6);\n\n\tv = 0u;\n    v = t.y == 0. ? ( t.x < 4. ? 1330925129u : ( t.x < 8. ? 1162368032u : ( t.x < 12. ? 1163019296u : 19777u ) ) ) : v;\n    v = t.x >= 0. && t.x < 16. ? v : 0u;\n\tchar = float((v >> uint(8. * t.x)) & 255u);\n\n\tposInCell = (p - t * glyphScale) / glyphScale;\n\tposInCell.x = (posInCell.x - .5) / glyphRatio + .5;\n\n\tsdf = glyph_sdf(posInCell, char);\n\tif (char != 0.) {\n        float m = clamp((p.x - 25.0) * 0.2, 0.0, 1.0);\n        vec3 text_color = mix(color_for_section(14), color_for_section(19), m);\n\t\tcolor = mix(text_color, color, smoothstep(-.04, +.04, sdf));\n\t}\n}\n\nvec3 image(vec2 uv) {\n    float a = atan(uv.y, uv.x);\n    float r = length(uv);\n    \n    vec2 st = vec2(a, r);\n    st.x = st.x * 0.5 / PI + 0.5;\n    st.y = st.y * 1.0 / RADIUS*2.0;\n\n    float s_id = SECTIONS-1.0 - floor(st.x * SECTIONS);\n    float r_id = RINGS-1.0 - floor(st.y * RINGS);\n\n    int id = SECTION_IDS[int(r_id*SECTIONS+s_id)];\n    \n    return id == 0 || st.y > 1.0 ? vec3(0.85) : color_for_section(id);\n}\n\nmat2 rot2d(float a) {\n    return mat2(cos(a),-sin(a),sin(a),cos(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec3 color = vec3(0.0);  \n    \n    for (int m = 0; m < AA; ++m) {\n    for (int n = 0; n < AA; ++n) {\n        vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n        vec2 uv = ((fragCoord + o) - 0.5 * iResolution.xy) / iResolution.y;\n        vec3 col = image(uv);\n        uv *= rot2d(PI/4.0);\n        uv += vec2(0.395, 0.073);\n        uv *= 320.0;\n        text(col, uv);\n        color += col;    \n    }\n    }\n    \n    color /= float(AA*AA);\n    color.rgb = pow(color.rgb, vec3(1.0/2.2));\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}