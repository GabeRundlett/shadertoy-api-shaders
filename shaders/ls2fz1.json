{
    "Shader": {
        "info": {
            "date": "1518972567",
            "description": "Julia set with a custom gradient function",
            "flags": 0,
            "hasliked": 0,
            "id": "ls2fz1",
            "likes": 5,
            "name": "Julia gradient",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "julia",
                "gradient",
                "set"
            ],
            "usePreview": 0,
            "username": "zeletochoy",
            "viewed": 627
        },
        "renderpass": [
            {
                "code": "#define MAX_ITER 100\n#define PT_RAD 0.03\n#define PI6 0.52359877559\n\nvec2 csqr(vec2 c)\n{\n    return vec2(c.x*c.x - c.y*c.y, 2.*c.x*c.y);\n}\n\nint julia_iters(vec2 z, vec2 c)\n{\n    for (int i = 0; i < MAX_ITER; ++i)\n    {\n        z = csqr(z) + c;\n        if (z.x*z.x + z.y*z.y > 4.)\n            return i;\n    }\n    return MAX_ITER;\n}\n\nfloat julia(vec2 z, vec2 c)\n{\n    float dist = float(MAX_ITER) - float(julia_iters(z, c));\n    float coef = pow(dist / float(MAX_ITER), 6.);\n    return coef;\n}\n\nvec3 gradient(float t)\n{\n    float c1 = 0.3 + 1.4 * max(abs(sin(0.5 * t + 9. * PI6)) - 0.5, 0.);\n    float c2 = 0.3 + 1.4 * max(abs(sin(0.5 * t + 11. * PI6)) - 0.5, 0.);\n    float c3 = 0.3 + 1.4 * max(abs(sin(0.5 * t + 13. * PI6)) - 0.5, 0.);\n    return vec3(c1, c2, c3);\n}\n\nvec3 julia_color(float coef, float t)\n{\n    vec3 col_in = vec3(0.);\n    vec3 col_out = gradient(t);\n    return mix(col_in, col_out, coef);\n}\n\nvec2 c_curve(float t)\n{\n    float d = 0.7885 + 0.1 * sin(5. * t);\n    return vec2(d * cos(t), d * sin(t));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float t = iTime / 3.;\n    vec2 z = 2.5 * (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    vec2 c = c_curve(t);\n    \n    float coef = julia(z, c);\n    vec3 col = julia_color(coef, t);\n\tfragColor = vec4(col, 1.);\n    \n    float dist = distance(z, c);\n    if (dist < PT_RAD)\n    {\n        vec3 inv_col = vec3(1.) - fragColor.xyz;\n        coef = smoothstep(PT_RAD, 0., dist);\n        fragColor.xyz = mix(fragColor.xyz, inv_col, coef*coef);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}