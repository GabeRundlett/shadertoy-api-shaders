{
    "Shader": {
        "info": {
            "date": "1635520011",
            "description": "Implementation of a stateful random number generator designed to make working with random numbers in a shader fast and easy, with demo.",
            "flags": 32,
            "hasliked": 0,
            "id": "ssGXDd",
            "likes": 67,
            "name": "Random Number Generator Library",
            "published": 3,
            "tags": [
                "noise",
                "random",
                "number",
                "normal",
                "gaussian",
                "generator",
                "rng"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 2561
        },
        "renderpass": [
            {
                "code": "// see Common tab for implementation\n\n//////////////////////////////////////////////////////////\n\nfloat qh(ivec2 fc, int a) {\n    if (fc.x / 8 == a)\n        return 1.0;\n    return 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    ivec2 fc = ivec2(fragCoord);\n\n    vec3 col = vec3(0.0);\n    \n    if (fc.y > 0) {\n        col += texelFetch(iChannel0, fc, 0).rgb;\n    }\n\n    // demonstrate gaussian\n    vec4 dist = texelFetch(iChannel0, ivec2(fc.x, 0), 0);\n    if ((dist.x / dist.w)*0.75 > uv.y) {\n        col += vec3(1.0);\n    }\n    \n    // demonstrate sampling 4 unique values from N elements\n    int N = 16;\n    int a = iFrame % N;\n    Random rng = seed(seed(iFrame), fc.y/4);\n    if ((fc.y > 100) && (fc.y < 120)) {\n        ivec3 k = sample_k_3(rng, N, a);\n        col += vec3(0.5) * qh(fc, a);\n        col += vec3(1.0,0.0,0.0) * qh(fc, k.x);\n        col += vec3(0.0,1.0,0.0) * qh(fc, k.y);\n        col += vec3(0.0,0.0,1.0) * qh(fc, k.z);\n    }\n    \n    // put some noise on our noise so we can randomize while we randomize\n    rng = seed(seed(fragCoord), iTime);\n    fragColor = vec4(clamp(col,vec3(0.0),vec3(1.0)) * range(rng, vec3(0.6), vec3(1.0)),1.0);\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// random number generator library (https://www.shadertoy.com/view/ssGXDd)\n// by Leonard Ritter (@leonard_ritter)\n\n// based on https://www.shadertoy.com/view/MdcfDj\n// license: https://unlicense.org/\n\n// 2022/11/27: added support for hexagon sampling\n\n// comment out for faster but lower quality hashing\n#define RNGL_HIGH_QUALITY\n\nstruct Random { uint s0; uint s1; };\n\n// constructors; note that constructors are wilfully unique,\n// i.e. calling a different constructor with the same arguments will not\n// necessarily produce the same state.\nuint uhash(uint a, uint b);\nRandom seed(uint s) { return Random(s, uhash(0x1ef7c663u, s)); }\nRandom seed(uvec2 s) { return Random(s.y, uhash(s.x, s.y)); }\nRandom seed(Random a, uint b) { return Random(b, uhash(a.s1, b)); }\nRandom seed(Random a, uvec2 b) { return seed(a, uhash(b.x, b.y)); }\nRandom seed(Random a, uvec3 b) { return seed(a, uhash(uhash(b.x, b.y), b.z)); }\nRandom seed(Random a, uvec4 b) { return seed(a, uhash(uhash(b.x, b.y), uhash(b.z, b.w))); }\nRandom seed(uvec3 s) { return seed(seed(s.xy), s.z); }\nRandom seed(uvec4 s) { return seed(seed(s.xy), s.zw); }\nRandom seed(int s) { return seed(uint(s)); }\nRandom seed(ivec2 s) { return seed(uvec2(s)); }\nRandom seed(ivec3 s) { return seed(uvec3(s)); }\nRandom seed(ivec4 s) { return seed(uvec4(s)); }\nRandom seed(Random a, int b) { return seed(a, uint(b)); }\nRandom seed(Random a, ivec2 b) { return seed(a, uvec2(b)); }\nRandom seed(Random a, ivec3 b) { return seed(a, uvec3(b)); }\nRandom seed(Random a, ivec4 b) { return seed(a, uvec4(b)); }\nRandom seed(float s) { return seed(floatBitsToUint(s)); }\nRandom seed(vec2 s) { return seed(floatBitsToUint(s)); }\nRandom seed(vec3 s) { return seed(floatBitsToUint(s)); }\nRandom seed(vec4 s) { return seed(floatBitsToUint(s)); }\nRandom seed(Random a, float b) { return seed(a, floatBitsToUint(b)); }\nRandom seed(Random a, vec2 b) { return seed(a, floatBitsToUint(b)); }\nRandom seed(Random a, vec3 b) { return seed(a, floatBitsToUint(b)); }\nRandom seed(Random a, vec4 b) { return seed(a, floatBitsToUint(b)); }\n\n// fundamental functions to fetch a new random number\n// the last static call to the rng will be optimized out\nuint urandom(inout Random rng) {\n    uint last = rng.s1;\n    uint next = uhash(rng.s0, rng.s1);\n    rng.s0 = rng.s1; rng.s1 = next;\n    return last;\n}\nuvec2 urandom2(inout Random rng) { return uvec2(urandom(rng),urandom(rng)); }\nuvec3 urandom3(inout Random rng) { return uvec3(urandom2(rng),urandom(rng)); }\nuvec4 urandom4(inout Random rng) { return uvec4(urandom2(rng),urandom2(rng)); }\nint irandom(inout Random rng) { return int(urandom(rng)); }\nivec2 irandom2(inout Random rng) { return ivec2(urandom2(rng)); }\nivec3 irandom3(inout Random rng) { return ivec3(urandom3(rng)); }\nivec4 irandom4(inout Random rng) { return ivec4(urandom4(rng)); }\n\nfloat unorm(uint n);\nfloat random(inout Random rng) { return unorm(urandom(rng)); }\nvec2 random2(inout Random rng) { return vec2(random(rng),random(rng)); }\nvec3 random3(inout Random rng) { return vec3(random2(rng),random(rng)); }\nvec4 random4(inout Random rng) { return vec4(random2(rng),random2(rng)); }\n\n// ranged random value < maximum value\nint range(inout Random rng, int mn, int mx) { return mn + (irandom(rng) % (mx - mn)); }\nivec2 range(inout Random rng, ivec2 mn, ivec2 mx) { return mn + (irandom2(rng) % (mx - mn)); }\nivec3 range(inout Random rng, ivec3 mn, ivec3 mx) { return mn + (irandom3(rng) % (mx - mn)); }\nivec4 range(inout Random rng, ivec4 mn, ivec4 mx) { return mn + (irandom4(rng) % (mx - mn)); }\nuint range(inout Random rng, uint mn, uint mx) { return mn + (urandom(rng) % (mx - mn)); }\nuvec2 range(inout Random rng, uvec2 mn, uvec2 mx) { return mn + (urandom2(rng) % (mx - mn)); }\nuvec3 range(inout Random rng, uvec3 mn, uvec3 mx) { return mn + (urandom3(rng) % (mx - mn)); }\nuvec4 range(inout Random rng, uvec4 mn, uvec4 mx) { return mn + (urandom4(rng) % (mx - mn)); }\nfloat range(inout Random rng, float mn, float mx) { float x=random(rng); return mn*(1.0-x) + mx*x; }\nvec2 range(inout Random rng, vec2 mn, vec2 mx) { vec2 x=random2(rng); return mn*(1.0-x) + mx*x; }\nvec3 range(inout Random rng, vec3 mn, vec3 mx) { vec3 x=random3(rng); return mn*(1.0-x) + mx*x; }\nvec4 range(inout Random rng, vec4 mn, vec4 mx) { vec4 x=random4(rng); return mn*(1.0-x) + mx*x; }\n\n// marshalling functions for storage in image buffer and rng replay\nvec2 marshal(Random a) { return uintBitsToFloat(uvec2(a.s0,a.s1)); }\nRandom unmarshal(vec2 a) { uvec2 u = floatBitsToUint(a); return Random(u.x, u.y); }\n\n//// specific distributions\n\n// normal/gaussian distribution\n// see https://en.wikipedia.org/wiki/Normal_distribution\nfloat gaussian(inout Random rng, float mu, float sigma) {\n    vec2 q = random2(rng);\n    float g2rad = sqrt(-2.0 * (log(1.0 - q.y)));\n    float z = cos(q.x*6.28318530718) * g2rad;\n    return mu + z * sigma;\n}\n\n// triangular distribution\n// see https://en.wikipedia.org/wiki/Triangular_distribution\n// mode is a mixing argument in the range 0..1\nfloat triangular(inout Random rng, float low, float high, float mode) {\n    float u = random(rng);\n    if (u > mode) {\n        return high + (low - high) * (sqrt ((1.0 - u) * (1.0 - mode)));\n    } else {\n        return low + (high - low) * (sqrt (u * mode));\n    }\n}\nfloat triangular(inout Random rng, float low, float high) { return triangular(rng, low, high, 0.5); }\n\n// after https://www.shadertoy.com/view/4t2SDh\n// triangle distribution in the range -0.5 .. 1.5\nfloat triangle(inout Random rng) {\n    float u = random(rng);\n    float o = u * 2.0 - 1.0;\n    return max(-1.0, o / sqrt(abs(o))) - sign(o) + 0.5;\n}\n\n//// geometric & euclidean distributions\n\n// uniformly random point on the edge of a unit circle\n// produces 2d normal vector as well\nvec2 uniform_circle_edge (inout Random rng) {\n    float u = random(rng);\n    float phi = 6.28318530718*u;\n    return vec2(cos(phi),sin(phi));\n}\n\n// uniformly random point in unit circle\nvec2 uniform_circle_area (inout Random rng) {\n    return uniform_circle_edge(rng)*sqrt(random(rng));\n}\n\n// gaussian random point in unit circle\nvec2 gaussian_circle_area (inout Random rng, float k) {\n    return uniform_circle_edge(rng)*sqrt(-k*log(random(rng)));\n}\nvec2 gaussian_circle_area (inout Random rng) { return gaussian_circle_area(rng, 0.5); }\n\n// cartesian coordinates of a uniformly random point within a hexagon\nvec2 uniform_hexagon_area (inout Random rng, float phase) {\n    vec2 u = random2(rng);\n    float phi = 6.28318530718*u.x;\n    \n    const float sqrt3div4 = sqrt(3.0 / 4.0);\n    const float pidiv6 = 0.5235987755982988;\n    float r = sqrt3div4 / cos(mod(phi + phase, 2.0 * pidiv6) - pidiv6);\n\n    return vec2(cos(phi), sin(phi)) * r * sqrt(u.y);\n}\n\nvec2 uniform_hexagon_area (inout Random rng) {\n    return uniform_hexagon_area(rng, 1.5707963267948966);\n}\n\n// barycentric coordinates of a uniformly random point within a triangle\nvec3 uniform_triangle_area (inout Random rng) {\n    vec2 u = random2(rng);\n    if (u.x + u.y > 1.0) {\n        u = 1.0 - u;\n    }\n    return vec3(u.x, u.y, 1.0-u.x-u.y);\n}\n\n// uniformly random on the surface of a sphere\n// produces normal vectors as well\nvec3 uniform_sphere_area (inout Random rng) {\n    vec2 u = random2(rng);\n    float phi = 6.28318530718*u.x;\n    float rho_c = 2.0 * u.y - 1.0;\n    float rho_s = sqrt(1.0 - (rho_c * rho_c));\n    return vec3(rho_s * cos(phi), rho_s * sin(phi), rho_c);\n}\n\n// uniformly random within the volume of a sphere\nvec3 uniform_sphere_volume (inout Random rng) {\n    return uniform_sphere_area(rng) * pow(random(rng), 1.0/3.0);\n}\n\n// barycentric coordinates of a uniformly random point within a 3-simplex\n// based on \"Generating Random Points in a Tetrahedron\" by Rocchini et al\nvec4 uniform_simplex_volume (inout Random rng) {\n    vec3 u = random3(rng);\n    if(u.x + u.y > 1.0) {\n        u = 1.0 - u;\n    }\n    if(u.y + u.z > 1.0) {\n        u.yz = vec2(1.0 - u.z, 1.0 - u.x - u.y);\n    } else if(u.x + u.y + u.z > 1.0) {\n        u.xz = vec2(1.0 - u.y - u.z, u.x + u.y + u.z - 1.0);\n    }\n    return vec4(1.0 - u.x - u.y - u.z, u); \n}\n\n// for differential evolution, in addition to index K, we need to draw three more\n// indices a,b,c for a list of N items, without any collisions between k,a,b,c.\n// this is the O(1) hardcoded fisher-yates shuffle for this situation.\nivec3 sample_k_3(inout Random rng, int N, int K) {\n    ivec3 t = range(rng, ivec3(1,2,3), ivec3(N));\n    int db = (t.y == t.x)?1:t.y;\n    int dc = (t.z == t.y)?((t.x != 2)?2:1):((t.z == t.x)?1:t.z);\n    return (K + ivec3(t.x, db, dc)) % N;\n}\n\n/////////////////////////////////////////////////////////////////////////\n\n// auxiliary functions from http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/\n// The Unreasonable Effectiveness of Quasirandom Sequences, by Martin Roberts\nfloat r1(float o, int i) {\n    return fract(o + float(i * 10368889)/exp2(24.0));\n}\nvec2 r2(vec2 o, int i) {\n    return fract(o + vec2(i * ivec2(12664745, 9560333))/exp2(24.0));\n}\nvec3 r3(vec3 o, int i) {\n    return fract(o + vec3(i * ivec3(13743434, 11258243, 9222443))/exp2(24.0));\n}\nvec4 r4(vec4 o, int i) {\n    return fract(o + vec4(i * ivec4(14372619, 12312662, 10547948, 9036162))/exp2(24.0));\n}\n\nfloat r1(int i) { return r1(0.5, i); }\nvec2 r2(int i) { return r2(vec2(0.5), i); }\nvec3 r3(int i) { return r3(vec3(0.5), i); }\nvec4 r4(int i) { return r4(vec4(0.5), i); }\n\n/////////////////////////////////////////////////////////////////////////\n\n// if it turns out that you are unhappy with the distribution or performance\n// it is possible to exchange this function without changing the interface\nuint uhash(uint a, uint b) { \n    uint x = ((a * 1597334673U) ^ (b * 3812015801U));\n#ifdef RNGL_HIGH_QUALITY\n    // from https://nullprogram.com/blog/2018/07/31/\n    x = x ^ (x >> 16u);\n    x = x * 0x7feb352du;\n    x = x ^ (x >> 15u);\n    x = x * 0x846ca68bu;\n    x = x ^ (x >> 16u);\n#else\n    x = x * 0x7feb352du;\n    x = x ^ (x >> 15u);\n    x = x * 0x846ca68bu;\n#endif\n    return x;\n}\nfloat unorm(uint n) { return float(n) * (1.0 / float(0xffffffffU)); }",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "ivec2 topixel(vec2 uv) {\n    uv.x /= (iResolution.x/iResolution.y);\n    uv = (uv*0.5+0.5);\n    return ivec2(uv * iResolution.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 fc = ivec2(fragCoord);\n    vec4 src = vec4(0.0); \n    if (iFrame > 0) {\n        src = texelFetch(iChannel0, fc, 0);\n    } else {\n        src.x = 0.0;\n    }\n    Random rng_base = seed(seed(fragCoord), iFrame);\n    if (fc.y == 0) {\n        Random rng = rng_base;// make a copy\n        // bin a gaussian distribution\n        float q = 1.0/iResolution.y;\n        for (int i = 0; i < 256; ++i) {\n            float n = gaussian(rng, 0.5, 0.2);\n            //float n = triangular(rng, 0.0, 1.0, 0.25);\n            int x = int(n * iResolution.x + 0.5);\n            if (x == fc.x) {\n                src.x += 1.0;\n            }       \n        }\n        src.w += 1.0;\n    } else {\n        Random rng = rng_base;// make a copy\n        src.rgb *= 0.983333;\n        for (int i = 0; i < 64; ++i) {\n            ivec2 p;\n            p = topixel(uniform_circle_area(rng)*0.25 + vec2(-1.5,1.0-0.3));\n            if (p == fc) { src.rgb += vec3(1.0,0.25,0.5); }\n            p = topixel(uniform_hexagon_area(rng)*0.25 + vec2(-0.75,1.0-0.3));\n            if (p == fc) { src.rgb += vec3(1.0,0.75,0.25); }\n            vec3 w = uniform_triangle_area(rng);\n            p = topixel(w.x*vec2(0.0,0.0)+w.y*vec2(0.57735*0.5,0.5)+w.z*vec2(0.57735,0.0) + vec2(-0.57735*0.5,0.45));\n            if (p == fc) { src.rgb += vec3(0.25,0.75,1.0); }\n            p = topixel(uniform_sphere_area(rng).xy*0.25 + vec2(0.75,1.0-0.3));\n            //p = topixel(uniform_sphere_volume(rng).xy*0.25 + vec2(0.75,1.0-0.3));\n            if (p == fc) { src.rgb += vec3(0.25,1.0,0.5); }            \n            vec4 u = uniform_simplex_volume(rng);\n            vec2 uc = u.x*vec2(-1.0,-1.0)+u.y*vec2(0.8,-0.8)+u.z*vec2(-0.8,0.8)+u.w*vec2(1.0,1.0);\n            p = topixel(uc*0.25 + vec2(1.5,0.7));\n            if (p == fc) { src.rgb += vec3(0.5,0.25,1.0); }\n        }\n    }\n    fragColor = src;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}