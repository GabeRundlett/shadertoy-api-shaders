{
    "Shader": {
        "info": {
            "date": "1481748742",
            "description": "A cheaper smoothstep function based on the quartic polynomial f(x) = (1 - (1 - x^2)^2). It features the same smooth arrival properties as smoothstep, but is no longer symmetric around the diagonal. This is generally not an issue for most graphics uses.",
            "flags": 0,
            "hasliked": 0,
            "id": "4ldSD2",
            "likes": 87,
            "name": "Cheapstep",
            "published": 3,
            "tags": [
                "smoothstep",
                "cheapstep"
            ],
            "usePreview": 0,
            "username": "stubbe",
            "viewed": 5406
        },
        "renderpass": [
            {
                "code": "// The familiar cubic smoothstep function is widely used in computer graphics. The smooth arrival\n// at the endpoints often makes for more natural looking blends than simple linear interpolation.\n\n// Smoothstep has the following constraints: f(0)=0, f(1)=1, df/dx(0)=0 and df/dx(1)=0.\n// These 4 constraints uniquely determine the 4 parameters of the cubic.\n// f(x) = 3x^2 - 2x^3 = x^2(3 - 2x)\n// This can be evaluated efficiently on most platforms with 3 instructions: MAD, MUL, MUL.\n\n// Perhaps counter to intuition, one instruction can be saved by instead evaluating\n// a quartic polynomial satisfying the same constraints:\n// g(x) = 1 - (1 - x^2)^2.\n// g can be evaluated in just two MAD instructions.\n\n// The following code plots the two curves against each other. The cubic smoothstep is green\n// and the quartic alternative 'cheapstep' is red.\n\n// Chances are this is already known and documented somewhere, I just haven't been able to find it :)\n\nfloat _smoothstep(float x)\n{\n    return x*x*(3.0 - 2.0*x);\t//MAD, MUL, MUL\n}\n\nfloat cheapstep(float x)\n{\n    x = 1.0 - x*x;\t// MAD\n    x = 1.0 - x*x;\t// MAD\n    return x;\n}\n\nvec3 blendCurve(vec3 backgroundColor, vec3 curveColor, float delta)\n{\n    delta *= iResolution.y * 0.7;\n    float alpha = exp2(-delta*delta);\n    return mix(backgroundColor, curveColor, alpha);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - vec2((iResolution.x-iResolution.y)*0.5, 0.0)) / iResolution.y;\n    uv = (uv - 0.5) * 1.1 + 0.5;\n    vec3 col = vec3(1.0);\n    float clamped_x = clamp(uv.x, 0.0, 1.0);\n    \n    vec2 smallGrid = abs(0.5-fract(uv*10.0-0.5))*0.4;\n    vec2 bigGrid = abs(0.5-fract(uv-0.5))*2.0;\n    \n    col = blendCurve(col, vec3(0.8, 0.8, 0.8), min(smallGrid.x, smallGrid.y));\n    col = blendCurve(col, vec3(0.0, 0.0, 0.0), min(bigGrid.x, bigGrid.y));\n    col = blendCurve(col, vec3(0.0, 1.0, 0.05), _smoothstep(clamped_x) - uv.y);\n    col = blendCurve(col, vec3(1.0, 0.1, 0.05), cheapstep(clamped_x) - uv.y);\n    \n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}