{
    "Shader": {
        "info": {
            "date": "1467243449",
            "description": "A recreation of the trail created by Asriel, from Undertale. Move the cirlce around with the mouse.\n\nProbably could've been done more efficiently, but I'm pretty happy with the results. Uncomment line 9 to make it Nyan cat instead :P",
            "flags": 32,
            "hasliked": 0,
            "id": "lsKXW3",
            "likes": 7,
            "name": "Asriel's Afterimage",
            "published": 3,
            "tags": [
                "buffer",
                "undertale",
                "asriel",
                "afterimage"
            ],
            "usePreview": 1,
            "username": "jackdavenport",
            "viewed": 1426
        },
        "renderpass": [
            {
                "code": "// Asriel's Afterimage\n// by jackdavenport\n// Inspiration: http://i.imgur.com/wv01I15.jpg?fb\n// Color code: https://www.reddit.com/r/Unitale/comments/46jyo2/asriels_idle_animation_recreated_download_in/\n\n#define CIRCLE_RADIUS .4\n#define PI 3.14159\n\n//#define NYAN_MODE\n\nconst vec2 txbase = vec2(0.,1.);\nvec4 loadValue( in vec2 re )\n{\n    return texture( iChannel0, (0.5+re) / iChannelResolution[0].xy, -100.0 );\n}\n\nfloat circle(vec2 p, float r, float t, vec2 uv) {\n \n    float dst = length(p-uv)-r;\n    float ax  = asin(p.x-uv.x);\n    dst = max(dst,-(length(p-uv)-r*.5+.1*sin(ax*25.+t*5.)));\n    return dst;\n    \n}\nvec3 getNyanCat(vec2 p, vec2 uv, vec4 tint, float t, bool ai, vec3 fragColor) {\n \n    vec2 st = p-uv;\n    st.y = 1. - st.y;\n    st.y -= .5;\n    st.x += .5;\n    st = clamp(st / vec2(7.,1.), 0., 1.);\n  \n    if(st.x > .15) {\n    \tst.x = 0.;   \n    }\n//    float frame = mod(floor(t / .1),6.);\n//    if(st.x > clamp(.15+.15*frame,0.,1.) || st.x < clamp(0.+.15*frame,0.,1.)) {\n//    \tst.x -= .15;   \n//    }\n    \n    vec4 tx = texture(iChannel1, st);\n    if(ai) {\n    \ttx.xyz = vec3(tx.x+tx.y+tx.z) / 3.;   \n    }\n    return mix(fragColor, tx.xyz*tint.xyz, tx.a*tint.a);\n    \n}\n\nvoid calcAfterImage(vec4 ai, vec2 uv, out vec4 fragColor) {\n \n    float rgbDiff = ai.z + .2;\n    float r = (sin(rgbDiff*7.5)*127.+128.);\n    float g = (sin(rgbDiff*7.5-2.*PI/3.)*127.+128.);\n    float b = (sin(rgbDiff*7.5-4.*PI/3.)*127.+128.);\n        \n    float a = max(.5 - ai.z * .78, 0.);\n    \n    #ifndef NYAN_MODE\n    \tfloat dst = circle(ai.xy, CIRCLE_RADIUS, ai.w, uv);\n    \tif(dst <= 0.) {\n        \tfragColor.xyz = mix(fragColor.xyz, vec3(r,g,b)/255., a);\n    \t}\n    #else\n    \tvec3 col = vec3(r,g,b)/255.;\n    \tfragColor.xyz = getNyanCat(ai.xy,uv,vec4(col,a),ai.z,true,fragColor.xyz);\n        //fragColor.xyz = vec3(r,g,b)/255.;\n    #endif\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / min(iResolution.x,iResolution.y)) * 2. - 1. - vec2(.7,0.);\n    \n    fragColor = texture(iChannel2, (fragCoord / iResolution.xy));\n    for(int i = 0; i < 20; i++) {\n    \tcalcAfterImage(loadValue(vec2(float(i),0.)),uv,fragColor);   \n    }\n    \n    #ifndef NYAN_MODE\n    \tfloat dst = circle(loadValue(txbase).xy, CIRCLE_RADIUS, iTime, uv);\n    \tif(dst <= 0.) {\n    \t\tfragColor.xyz = vec3(1.);   \n    \t}\n    #else\n    \tfragColor.xyz = getNyanCat(loadValue(txbase).xy,uv,vec4(1.),iTime,false,fragColor.xyz);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const vec2 tximg1 = vec2(0.,0.);\nconst vec2 tximg2 = vec2(1.,0.);\nconst vec2 tximg3 = vec2(2.,0.);\nconst vec2 tximg4 = vec2(3.,0.);\nconst vec2 tximg5 = vec2(4.,0.);\nconst vec2 tximg6 = vec2(5.,0.);\nconst vec2 tximg7 = vec2(6.,0.);\nconst vec2 tximg8 = vec2(7.,0.);\nconst vec2 tximg9 = vec2(8.,0.);\nconst vec2 tximg10 = vec2(9.,0.);\nconst vec2 tximg11 = vec2(10.,0.);\nconst vec2 tximg12 = vec2(11.,0.);\nconst vec2 tximg13 = vec2(12.,0.);\nconst vec2 tximg14 = vec2(13.,0.);\nconst vec2 tximg15 = vec2(14.,0.);\nconst vec2 tximg16 = vec2(15.,0.);\nconst vec2 tximg17 = vec2(16.,0.);\nconst vec2 tximg18 = vec2(17.,0.);\nconst vec2 tximg19 = vec2(18.,0.);\nconst vec2 tximg20 = vec2(19.,0.);\nconst vec2 txbase = vec2(0.,1.);\n\nfloat isInside( vec2 p, vec2 c ) { vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); }\nfloat isInside( vec2 p, vec4 c ) { vec2 d = abs(p-0.5-c.xy-c.zw*0.5) - 0.5*c.zw - 0.5; return -max(d.x,d.y); }\nvec4 loadValue( in vec2 re )\n{\n    return texture( iChannel0, (0.5+re) / iChannelResolution[0].xy, -100.0 );\n}\nvoid storeValue( in vec2 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;\n}\nvoid storeValue( in vec4 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 img1 = loadValue(tximg1);\n    vec4 img2 = loadValue(tximg2);\n    vec4 img3 = loadValue(tximg3);\n    vec4 img4 = loadValue(tximg4);\n    vec4 img5 = loadValue(tximg5);\n    vec4 img6 = loadValue(tximg6);\n    vec4 img7 = loadValue(tximg7);\n    vec4 img8 = loadValue(tximg8);\n    vec4 img9 = loadValue(tximg9);\n    vec4 img10 = loadValue(tximg10);\n    vec4 img11 = loadValue(tximg11);\n    vec4 img12 = loadValue(tximg12);\n    vec4 img13 = loadValue(tximg13);\n    vec4 img14 = loadValue(tximg14);\n    vec4 img15 = loadValue(tximg15);\n    vec4 img16 = loadValue(tximg16);\n    vec4 img17 = loadValue(tximg17);\n    vec4 img18 = loadValue(tximg18);\n    vec4 img19 = loadValue(tximg19);\n    vec4 img20 = loadValue(tximg20);\n    vec4 base = loadValue(txbase);\n    \n    if(iFrame <= 0) {\n    \timg1 = img2 = img3 = img4 = img5 = img6 = img7 = img8 = img9 = img10 =\n        img11 = img12 = img13 = img14 = img15 = img16 = img17 = img18 = img19 =\n        img20 = vec4(0.,0.,15.,0.);\n    }\n    \n    float mx = sin(iTime * 1.28);\n   \tfloat my = (.5+.5*cos(iTime * 1.28)) - .5;\n    if(iMouse.z > 0.) {\n    \tvec2 m = (iMouse.xy / min(iResolution.x,iResolution.y)) * 2. - 1. - vec2(.7,0.);\n        mx = m.x;\n        my = m.y;\n    }\n    base.xy = vec2(mx,my);\n    base.z -= iTimeDelta;\n    \n    img1.z += iTimeDelta;\n    img2.z += iTimeDelta;\n    img3.z += iTimeDelta;\n    img4.z += iTimeDelta;\n    img5.z += iTimeDelta;\n    img6.z += iTimeDelta;\n    img7.z += iTimeDelta;\n    img8.z += iTimeDelta;\n    img9.z += iTimeDelta;\n    img10.z += iTimeDelta;\n    img11.z += iTimeDelta;\n    img12.z += iTimeDelta;\n    img13.z += iTimeDelta;\n    img14.z += iTimeDelta;\n    img15.z += iTimeDelta;\n    img16.z += iTimeDelta;\n    img17.z += iTimeDelta;\n    img18.z += iTimeDelta;\n    img19.z += iTimeDelta;\n    img20.z += iTimeDelta;\n    \n    if(base.z <= 0.) {\n        \n        base.z = 1./30.;\n        img1 = img2;\n    \timg2 = img3;\n    \timg3 = img4;\n    \timg4 = img5;\n        img5 = img6;\n    \timg6 = img7;\n    \timg7 = img8;\n    \timg8 = img9;\n        img9 = img10;\n        img10 = img11;\n    \timg11 = img12;\n        img12 = img13;\n    \timg13 = img14;\n    \timg14 = img15;\n        img15 = img16;\n    \timg16 = img17;\n    \timg17 = img18;\n    \timg18 = img19;\n        img19 = img20;\n    \n    \timg20.xy = base.xy;\n    \timg20.z  = 0.;\n        img20.w  = iTime;\n        \n    }\n    \n    fragColor = vec4(0.);\n    storeValue(tximg1, img1, fragColor, fragCoord);\n    storeValue(tximg2, img2, fragColor, fragCoord);\n    storeValue(tximg3, img3, fragColor, fragCoord);\n    storeValue(tximg4, img4, fragColor, fragCoord);\n    storeValue(tximg5, img5, fragColor, fragCoord);\n    storeValue(tximg6, img6, fragColor, fragCoord);\n    storeValue(tximg7, img7, fragColor, fragCoord);\n    storeValue(tximg8, img8, fragColor, fragCoord);\n    storeValue(tximg9, img9, fragColor, fragCoord);\n    storeValue(tximg10, img10, fragColor, fragCoord);\n    storeValue(tximg11, img11, fragColor, fragCoord);\n    storeValue(tximg12, img12, fragColor, fragCoord);\n    storeValue(tximg13, img13, fragColor, fragCoord);\n    storeValue(tximg14, img14, fragColor, fragCoord);\n    storeValue(tximg15, img15, fragColor, fragCoord);\n    storeValue(tximg16, img16, fragColor, fragCoord);\n    storeValue(tximg17, img17, fragColor, fragCoord);\n    storeValue(tximg18, img18, fragColor, fragCoord);\n    storeValue(tximg19, img19, fragColor, fragCoord);\n    storeValue(tximg20, img20, fragColor, fragCoord);\n    storeValue(txbase, base, fragColor, fragCoord);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}