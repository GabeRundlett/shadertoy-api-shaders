{
    "Shader": {
        "info": {
            "date": "1692890106",
            "description": "Partially transparent nested Mandelbulbs",
            "flags": 32,
            "hasliked": 0,
            "id": "dllfD8",
            "likes": 14,
            "name": "Interactive Mandelbulb 3",
            "published": 3,
            "tags": [
                "mandelbulb",
                "transparent"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 210
        },
        "renderpass": [
            {
                "code": "// \"Interactive Mandelbulb 3\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n/*\n  Sliders control zoom, transparency and iteration count; default mode\n  sweeps latter two parameters; mouseable.\n  (Based on \"Interactive Mandelbulb 2\")\n*/\n\n#define AA   1     // (= 0/1) optional antialiasing\n\n#define VAR_ZERO min (nFrame, 0)\n\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nvec2 Rot2D (vec2 q, float a);\nmat3 StdVuMat (float el, float az);\nvec4 Loadv4 (int idVar);\n\nvec3 ltDir;\nfloat dstFar, tCur, sFac, trFac;\nint nFrame, nItMx;\nconst float pi = 3.1415927;\n\nfloat ObjDf (vec3 p)\n{\n  vec4 aa, sa, ca;\n  vec3 c, q, qd;\n  float qLen, qdLen, q2, q4, phi, theta, thetad, phid;\n  q = p.xzy / sFac;\n  c = q;\n  qLen = length (q);\n  phi = atan (q.y, q.x);\n  theta = (qLen > 0.) ? acos (q.z / qLen) : 0.;\n  thetad = 0.;\n  phid = 0.;\n  qdLen = 1.;\n  for (int n = VAR_ZERO; n < nItMx; n ++) {\n    q2 = qLen * qLen;\n    q4 = q2 * q2;\n    aa = vec4 (8. * vec2 (theta, phi), 7. * vec2 (theta, phi) + vec2 (thetad, phid));\n    sa = sin (aa);\n    ca = cos (aa);\n    q = q4 * q4 * vec3 (sa.x * vec2 (ca.y, sa.y), ca.x) + c;\n    qd = 8. * q4 * q2 * qLen * qdLen * vec3 (sa.z * vec2 (ca.w, sa.w), ca.z) + 1.;\n    qLen = length (q);\n    phi = atan (q.y, q.x);\n    theta = (qLen > 0.) ? acos (q.z / qLen) : 0.;\n    qdLen = length (qd);\n    phid = atan (qd.y, qd.x);\n    thetad = (qdLen > 0.) ? asin (qd.z / qdLen) : 0.;\n    if (qLen > 3.1623) break;\n  }\n  return (qLen > 0.) ? sFac * 0.5 * qLen * log (qLen) / qdLen : 0.;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d, dMin, eps;\n  eps = 2e-4;\n  dMin = dstFar;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = 0.001 * vec2 (1., -1.);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 ShowWg (vec2 uv, vec2 canvas, vec3 col, vec3 parmV)\n{\n  vec4 wgBx[3];\n  vec3 cc[3], cw;\n  vec2 ut, ust, c;\n  float asp;\n  c = vec2 (1., 0.5);\n  cc[0] = c.xyy;\n  cc[1] = c.yxy;\n  cc[2] = c.yyx;\n  asp = canvas.x / canvas.y;\n  for (int k = 0; k < 3; k ++)\n     wgBx[k] = vec4 ((0.36 + 0.05 * float (k)) * asp, -0.15, 0.014 * asp, 0.18);\n  for (int k = 0; k < 3; k ++) {\n    ut = 0.5 * uv - wgBx[k].xy;\n    ust = abs (ut) - wgBx[k].zw * vec2 (0.7, 1.);\n    if (Maxv2 (ust) < 0.) {\n      if (Minv2 (abs (ust)) * canvas.y < 2.) cw = 0.3 * cc[k];\n      else cw = (mod (0.5 * ((0.5 * uv.y - wgBx[k].y) / wgBx[k].w - 0.99), 0.1) *\n         canvas.y < 6.) ? 0.3 * cc[k] : 0.6 * cc[k];\n    }\n    ut.y -= (parmV[k] - 0.5) * 2. * wgBx[k].w;\n    cw = mix (cc[k], cw, smoothstep (0., 0.5, abs (length (ut * vec2 (1., 1.5)) - 0.015) *\n       canvas.y - 3.));\n  }\n  return mix (col, cw, length (cw));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, roo, rdo, colS[3], cc[3];\n  vec2 c;\n  float dHit, b, rLim, nDotL;\n  roo = ro;\n  rdo = rd;\n  rLim = 3.;\n  c = vec2 (1., 0.2);\n  cc[0] = c.xyy;\n  cc[1] = c.yxy;\n  cc[2] = c.yyx;\n  b = - dot (ro, rd);\n  for (int k = VAR_ZERO; k < 3; k ++) {\n    sFac = 0.6 + 0.2 * float (k);\n    ro = roo;\n    rd = rdo;\n    dHit = b * b - dot (ro, ro) + sFac * rLim;\n    if (dHit > 0.) {\n      ro += (b - sqrt (dHit)) * rd;\n      dHit = ObjRay (ro, rd);\n    } else dHit = dstFar;\n    if (dHit < dstFar) {\n      ro += dHit * rd;\n      vn = ObjNf (ro);\n      nDotL = max (dot (vn, ltDir), 0.);\n      colS[k] = cc[k] * (0.7 + 0.3 * smoothstep (0.7, 1., length (ro) / sFac));\n      colS[k] *= 0.2 + 0.8 * nDotL * nDotL + pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n    } else colS[k] = vec3 (0.1);\n  }\n  col = mix (colS[0], colS[1], trFac);\n  col = mix (col, colS[2], 2. * max (trFac - 0.5, 0.));\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat;\n  vec3 ro, rd, col, parmV;\n  vec2 canvas, uv;\n  float az, el, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  nFrame = iFrame;\n  stDat = Loadv4 (0);\n  el = stDat.x;\n  az = stDat.y;\n  stDat = Loadv4 (2);\n  parmV = stDat.yzw;\n  zmFac = 30. * parmV.x + 8.;\n  trFac = parmV.y;\n  nItMx = 1 + int (5. * parmV.z);\n  dstFar = 20.;\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -14.);\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif\n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowWg (uv, canvas, ShowScene (ro, rd), parmV);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 32.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Interactive Mandelbulb 3\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nint nFrame;\nconst float txRow = 32.;\nconst float pi = 3.1415927;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[3], stDat, mPtr, mPtrP;\n  vec3 parmV;\n  vec2 iFrag, canvas, ust;\n  float tCur, tCurP, el, az, asp, autoMod, tMan;\n  int pxId, wgSel, wgReg, kSel;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  nFrame = iFrame;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 3) discard;\n  wgSel = -1;\n  wgReg = -2;\n  if (nFrame <= 1) {\n    el = -0.2 * pi;\n    az = 0.;\n    parmV = vec3 (0.1, 0.3, 0.3);\n    mPtrP = mPtr;\n    autoMod = 1.;\n    tMan = tCur;\n    tCurP = tCur;\n  } else {\n    stDat = Loadv4 (0);\n    el = stDat.x;\n    az = stDat.y;\n    autoMod = stDat.z;\n    tMan = stDat.w;\n    stDat = Loadv4 (1);\n    mPtrP = vec4 (stDat.xyz, 0.);\n    wgSel = int (stDat.w);\n    stDat = Loadv4 (2);\n    tCurP = stDat.x;\n    parmV = stDat.yzw;\n  }\n  wgReg = -2;\n  asp = canvas.x / canvas.y;\n  if (mPtr.z > 0.) {\n    for (int k = 0; k < 3; k ++)\n       wgBx[k] = vec4 ((0.36 + 0.05 * float (k)) * asp, -0.15, 0.014 * asp, 0.18);\n    for (int k = 0; k < 3; k ++) {\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n    autoMod = 0.;\n    tMan = tCur;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0.) {\n      az += 0.1 * (1. - 0.85 * parmV.x) * mPtr.x;\n      el += 0.1 * (1. - 0.85 * parmV.x) * mPtr.y;\n    }\n  } else {\n    parmV[wgSel] = clamp (0.5 + 0.5 * (mPtr.y - wgBx[wgSel].y) / wgBx[wgSel].w, 0., 0.99);\n  }\n  if (autoMod == 1.) {\n    az = mod (az + 0.05 * (tCur - tCurP), 2. * pi);\n    el = mod (el + 0.02 * (tCur - tCurP), 2. * pi);\n    parmV.y = SmoothBump (0.25, 0.75, 0.25, fract (0.03 * tCur));\n    parmV.z = 0.7 * SmoothBump (0.25, 0.75, 0.25, fract (0.02 * tCur));\n  } else if (tCur - tMan > 3.) {\n    autoMod = 1.;\n    tMan = tCur;\n  }\n  if      (pxId == 0) stDat = vec4 (el, az, autoMod, tMan);\n  else if (pxId == 1) stDat = vec4 (mPtr.xyz, float (wgSel));\n  else if (pxId == 2) stDat = vec4 (tCur, parmV);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}