{
    "Shader": {
        "info": {
            "date": "1542673271",
            "description": "Version #2 with some parameters to change - see GetWaveDisplacement() - click mouse to show height map",
            "flags": 0,
            "hasliked": 0,
            "id": "XlyBDw",
            "likes": 11,
            "name": "Smooth purple (twist)",
            "published": 3,
            "tags": [
                "waves",
                "raymarch",
                "smooth",
                "purple"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 752
        },
        "renderpass": [
            {
                "code": "// simple plane march\nmat2 rotate(float a)\n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n#define\tTAU 6.28318\n\n\n\nfloat GetWaveDisplacement(vec3 p)\n{\n    float time = iTime;\n\tfloat waveStrength = 0.1;\n\tfloat frequency = 5.0;\n\tfloat waveSpeed = -0.35;\n\tfloat rotSpeed = 0.01;\n\tfloat twist = 0.15;\n\tfloat falloffRange = 2.0;\t// the other values have been tweaked around this...\n\t\n\tfloat d = length(p);\n\tp.xz *= rotate(d*twist+(time*rotSpeed)*TAU);\n\tvec2 dv = p.xz*0.15;\n\td = length(dv);\n\td = clamp(d,0.0,falloffRange);\n\tfloat d2 = d-falloffRange;\n\tfloat t = fract(time*waveSpeed)*TAU;\n\tfloat s = sin(frequency*d*d+t);\n\tfloat k = s * waveStrength * d2*d2;\n\tk *= p.x*p.z*0.5;\n\t//k-= 0.4;\t\t\t\t\t// mix it up a little...\n\t//k -= sin(time)*0.5*d2;\t\t\t// really mix it up... :)\n\tk = smoothstep(0.0,0.75,k*k);\n\treturn k;\n\t\n}\n\n\nfloat map(vec3 p)\n{\n\tfloat k = GetWaveDisplacement(p);\n\tfloat dist = p.y - k - 1.0;\n\treturn dist;\n    \n    //float d =  length(p.xz);\n    //float t2 = fract(iTime*0.5) * TAU;\n\t//float y = 0.5+sin(t2 + d)*0.5;\n\t//y = y*=abs(p.x*p.z)*0.125;\n\t//y = smoothstep(0.0,4.0,y);\n\t//return p.y - y*y;\n}\n\nvec3 normal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ) );\n}\nvec3 render(vec3 ro, vec3 rd)\n{\n\t// march\t\n\tfloat tmin = 0.1;\n\tfloat tmax = 120.;\n\tvec3 p;\n\tfloat t = tmin;\n\tfor (int i = 0; i < 80; i++)\n\t{\n\t\tp = ro + t * rd;\n\t\tfloat d = map(p);\n\t\tt += d*0.5;\n\t\tif (t > tmax)\n\t\t\tbreak;\t\t\n\t}\n\t\n    // light\n\tif (t < tmax)\n\t{\n\t   \tvec3 lightDir = normalize(vec3(1.5, 1.0, 0.5));\n\t\tvec3 nor = normal(p);\n\t\tvec3 c = vec3(0.3, 0.1, 0.5);\n\t\t\n\t\tfloat dif = max(dot(nor, lightDir), 0.0);\n\t\tc += vec3(0.2) * dif;\n\t\t\n\t\tvec3 ref = reflect(rd, nor);\n\t\tfloat spe = max(dot(ref, lightDir), 0.0);\n\t\tc += vec3(3.0) * pow(spe, 16.);\n\t\t\n\t\treturn c;\n\t}\n\t\n\treturn vec3(0.2,0.2,0.6);\n}\n\nmat3 camera(vec3 ro, vec3 ta, vec3 up)\n{\n\tvec3 nz = normalize(ta - ro);\n\tvec3 nx = cross(nz, normalize(up));\n\tvec3 ny = cross(nx, nz);\n\treturn mat3(nx, ny, nz);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 q = fragCoord.xy / iResolution.xy;\n\tvec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.xy;\n\tp.x *= iResolution.x / iResolution.y;\n    \n\tvec3 ro = vec3(0.0, 10.0, -10.0);\n\tvec3 ta = vec3(0.0, 0.0, -2.0);\n\tvec3 rd = camera(ro, ta, vec3(0.0, 1.0, 0.0)) * normalize(vec3(p.xy, 1.0));\n\t\n\tvec3 c = render(ro, rd);\n\n    // vignette\n    c *= 0.4 + 0.6*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\n    if (iMouse.z>0.5)\n    {\n        p*= 10.0;\n        float v = GetWaveDisplacement(vec3(p.x,0.0,p.y));\n        v = clamp(v,0.0,1.0);\n        c = vec3(v);\n    }\n    \n    \n\tfragColor = vec4(c, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}