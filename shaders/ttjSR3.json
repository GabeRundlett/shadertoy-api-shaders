{
    "Shader": {
        "info": {
            "date": "1566647160",
            "description": "Fooling around with x-ray rendering again",
            "flags": 0,
            "hasliked": 0,
            "id": "ttjSR3",
            "likes": 60,
            "name": "Phase ripple",
            "published": 3,
            "tags": [
                "glow",
                "xray"
            ],
            "usePreview": 1,
            "username": "tdhooper",
            "viewed": 1439
        },
        "renderpass": [
            {
                "code": "// Adapted from https://www.shadertoy.com/view/WdB3Dw\n\n#define PI 3.14159265359\n#define fTime mod(iTime / 4., 1.)\n\n\n// https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nvec3 spectrum(float n) {\n    return pal( n, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n}\n\n// HG_SDF\nvoid pR(inout vec2 p, float a) {\n    p = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat map(vec3 p) {\n    return length(p) - .5;\n}\n\nmat3 calcLookAtMatrix(vec3 ro, vec3 ta, vec3 up) {\n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww,up));\n    vec3 vv = normalize(cross(uu,ww));\n    return mat3(uu, vv, ww);\n}\n\nconst float ITER = 400.;\nconst float FUDGE_FACTORR = .25;\nconst float INTERSECTION_PRECISION = .0001;\nconst float MAX_DIST = 4.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2. * fragCoord.xy) / iResolution.y;\n    \n    vec3 pos;\n    float rayLength = 0.;\n\tfloat dist = 0.;\n\n\tvec3 origin = vec3(0,.0,2.9);\n    \n    vec2 rot = vec2(.525,-.41);\n\tvec2 im = (iMouse.xy / iResolution.xy) * 2. - 1.;\n    if (im.x > -1. && im.y > -1.) {\n       rot += im;\n    }\n    pR(origin.zy, rot.y*1.5);\n    pR(origin.zx, rot.x*1.5);\n    \n    mat3 camMat = calcLookAtMatrix(origin, vec3(0), vec3(0,1,0));\n    vec3 rd = normalize(camMat * vec3(p, 4.));\n\n    vec3 color = vec3(10,0,12)*.0007;\n    vec3 c;    \n\n    for (float i = 0.; i < ITER; i++) {\n\n        // Step a little slower so we can accumilate glow\n        rayLength += max(INTERSECTION_PRECISION, abs(dist) * FUDGE_FACTORR);\n        pos = origin + rd * rayLength;\n\n        // warp space\n        float w = smoothstep(0., .2, fTime) - pow(smoothstep(.2, 1., fTime), 1.);\n        float q = smoothstep(0., .2, fTime) * .5 + smoothstep(.2, 1., fTime) * .5;\n        pos += sin((pos) * mix(10., 100., fTime)) * mix(.0, .05, w);\n        \n        dist = map(pos);\n\n        // Add a lot of light when we're really close to the surface\n        c = vec3(max(0., .001 - abs(dist)) * .5);\n        c *= vec3(1.4,2.1,1.7); // blue green tint\n\n        // Accumilate some purple glow for every step\n        c += vec3(.6,.25,.7) * FUDGE_FACTORR / 160.;\n        c *= smoothstep(20., 7., length(pos));\n\n        // Fade out further away from the surface\n        c *= smoothstep(.01, .0, dist) * .5;\n        \n        // Vary colour as we move through space\n        c *= spectrum(length(sin(pos - vec3(.45,0,0))) * 10. - .6 - fTime*5.);\n\n        color += c;\n        \n        if (rayLength > MAX_DIST) {\n            break;\n        }\n    }\n\n    // Tonemapping and gamma\n    color = pow(color, vec3(1. / 1.8)) * 2.;\n    color = pow(color, vec3(2.)) * 3.;\n    color = pow(color, vec3(1. / 2.2));\n\n\n    fragColor = vec4(color,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}