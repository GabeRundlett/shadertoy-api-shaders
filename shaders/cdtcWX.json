{
    "Shader": {
        "info": {
            "date": "1695622674",
            "description": "I made this tangent space matirx from scratch for cubemapping. ",
            "flags": 0,
            "hasliked": 0,
            "id": "cdtcWX",
            "likes": 1,
            "name": "Tangent Space Matrix CubeSphere",
            "published": 3,
            "tags": [
                "3d",
                "derivative",
                "mapping",
                "cubemapping",
                "matrix",
                "tangent",
                "cubesphere",
                "finitedifference",
                "tangentspace",
                "tbn"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 310
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2023 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/*\nThis demo showcases the process of translating a vector between tangent \nand world space for cubemapping without relying on any vertices. This \napproach is particularly useful for tasks like transforming directions \nbetween world and tangent space in a cubemap.\n\nTo achieve this, it's essential to compute the normal, tangent, and \nbitangent vectors corresponding to your cubemap. The normal vector \npoints outward from the center of the cube, while the tangent vector \naligns with the direction of the cube's local +X axis in world space. \nSimilarly, the bitangent vector corresponds to the +Y direction of the \ncube.\n\nI couldn't find anyone else doing this for cubemaps, so I built two \nversions. First, I constructed the inverse of the cubemapping function \nand used it with the finite difference method to generate the \napproximate tangent and bitangent vectors. And second, I derived the \ntrue TBN matrix from the derivative of the cubemapping function. I \nomitted the correction part for the true Tangent as it's almost \nidentical but would becomes considerably more expensive and less \nlegible.\n\nThese vectors are combined within a 3x3 matrix (TBN). When this matrix \nis multiplied by a vector, it effectively transforms the vector to world \nspace. Conversely, the inverse of this matrix enables the translation \nof a vector from world space back to the tangent space of your cubemap.\n\nThe visual representation consists of two quiver plots. In red, we have \nthe derivative TBN quiver plot, while the finite difference TBN matrix \nis depicted in green on the sphere. These two representations are nearly \nidentical, resulting in arrows that are consistently yellow. The \nworldspace flow direction is shown with a RGB flowplot.\n\nSee here how I got to the math with my python script:\nhttps://pastebin.com/8mzdNrTt\n\nSee here how the quiverplot works:\nhttps://www.shadertoy.com/view/dssyzf\n\nSee here how the flow plot works:\nhttps://www.shadertoy.com/view/dlSyDw\n\nThis plot has mouse controls to look around. Play with the constants\nbelow to edit the visualized vectors.\n\nMaking this was quite a pain.\n*/\n\n// Define your custom direction here\n//#define DIRECTION vec3(1.,0.,0.)\n\n// enable DIRECTION is worldspace, disable DIRECTION is tangent space\n#define DIRECTIONIWORLDSPACE\n\n// holds cubemap params\nstruct cubemap {\n    vec2 uv; //texture coordinates\n    vec3 side; // vector pointing at the side of the cube\n};\n\n// Cubemap, that is folded so all but 6 edges align\ncubemap CubemapFolded(vec3 uvw) {\n    // bitmask for flipping some sides\n    vec3 sUVW = sign(uvw);\n\n    // intersect cube\n    vec3 n = abs(uvw);\n    vec3 v;\n    vec3 side;\n    if (n.x > n.y && n.x > n.z) {\n        // x sides\n        v = vec3(uvw.x, uvw.y, sUVW.x * uvw.z);\n        side = vec3(sUVW.x, 0., 0.);\n    } else if (n.y > n.z) {\n        // y sides\n        v = vec3(uvw.y, -uvw.x, sUVW.y * uvw.z);\n        side = vec3(0., sUVW.y, 0.);\n    } else {\n        // z sides\n        v = vec3(uvw.z, sUVW.z * uvw.x, uvw.y);\n        side = vec3(0., 0., sUVW.z);\n    }\n    \n    // project into face\n    vec2 uv = v.yz/v.x;\n    \n    // Cass Everitt's piecewise quadratic warp \n    // https://github.com/casseveritt/projection/blob/master/envmap.h (Ctrl+F pinch)\n    vec2 distort = (1.45109572583 - 0.451095725826*abs(uv));\n    uv *= distort;\n    \n    // rescale to 0-1 range\n    uv = 0.5+0.5*uv;\n    \n    return cubemap(uv, side);\n}\n\n// TBN Matrix from derivatives for the cubemapping above\nmat3 cubeTBNMatrixDerivative(vec3 normal) {\n    // bitmask for flipping some sides\n    vec3 sgn = sign(normal);\n    \n    // intersect cube\n    vec3 n = abs(normal);\n    vec3 tangent;\n    vec3 bitangent; // bitangent is not perpendicular to tangent!\n    \n    if (n.x > n.y && n.x > n.z) {\n        // x sides\n        tangent = vec3(- normal.y,                         // C\n                       (1.+ normal.y * normal.y)   *sgn.x, // B\n                       - normal.y * normal.z       *sgn.x  // A\n                       );\n        bitangent = vec3(- normal.z                *sgn.x, // C\n                         - normal.y * normal.z,            // A\n                         1.+ normal.z * normal.z           // B\n                         );\n    } else if (n.y > n.z) {\n        // y sides\n        tangent = vec3((1.+ normal.x * normal.x)   *sgn.y, // B\n                       - normal.x,                         // C\n                       - normal.x * normal.z       *sgn.y  // A\n                       ) * -1.; // flipped\n        bitangent = vec3(- normal.x * normal.z,            // A\n                         - normal.z                *sgn.y, // C\n                         1. + normal.x * normal.x          // B\n                         );\n    } else {\n        // z sides\n        tangent = vec3(1.+ normal.y * normal.y,            // B\n                       - normal.x * normal.y,              // A\n                       - normal.x                  *sgn.z  // C\n                       );\n        bitangent = vec3(- normal.x * normal.y     *sgn.z, // A\n                         (1.+ normal.x * normal.x) *sgn.z, // B\n                         - normal.y                        // C\n                         );\n    }\n    \n    // Normalize the vectors after branching\n    tangent = normalize(tangent);\n    bitangent = normalize(bitangent);\n    \n    return mat3(tangent, bitangent, normal);\n}\n\n// inverse of CubemapFolded function\nvec3 CubemapUnfolded(cubemap cube) {\n    vec2 uv = cube.uv;\n    vec3 side = cube.side;\n    \n    // rescale -1 to 1\n    uv = uv*2.-1.;\n    \n    // reverse Cass Everitt's piecewise quadratic warp \n    uv = sign(uv) * -1.108412 * (-1.451096 + sqrt(2.105679 - 1.804383 * abs(uv)));\n    \n    // recreate normal vector with side being up\n    float partial = sqrt((uv.x*uv.x) + (uv.y*uv.y) +1.);\n    vec3 normal = vec3(uv.x/partial, uv.y/partial, 1./partial);\n    \n    // flip normals to their sides\n    vec3 n = abs(side);\n    vec3 uvw;\n    if (n.x > 0.5) {\n        // x sides\n        uvw = vec3(normal.z * side.x, normal.x * side.x, normal.y);\n    } else if (n.y > 0.5) {\n        // y sides\n        uvw = vec3(-normal.x * side.y, normal.z * side.y, normal.y);\n    } else {\n        // z sides\n        uvw = vec3(normal.x, normal.y * side.z, normal.z * side.z);\n    }\n    \n    return uvw;\n}\n\n// TBN Matrix using finite difference for the cubemapping above\nmat3 cubeTBNMatrixFiniteDif(vec3 normal) {\n    // cubemapping\n    cubemap cube = CubemapFolded(normal);\n\n    // if you make this smaller it gets more accurate, \n    // but you may run into float errors, so KISS\n    float accuracy = 0.001;\n    \n    // make tangent\n    vec2 uOffsetUV = cube.uv + vec2(accuracy, 0.); // tiny offset in x dir\n    vec3 uNormalOffset = CubemapUnfolded(cubemap(uOffsetUV, cube.side));\n    vec3 tangent = normalize(uNormalOffset - normal);\n    \n    // make bitangent ! not orthogonal to tangnet !\n    vec2 vOffsetUV = cube.uv + vec2(0., accuracy); // tiny offset in y dir\n    vec3 vNormalOffset = CubemapUnfolded(cubemap(vOffsetUV, cube.side));\n    // vec3 bitangent = cross(normal, tangent); // WRONG not orthogonal!!!\n    vec3 bitangent = normalize(vNormalOffset - normal);\n    \n    return mat3(tangent, bitangent, normal);\n}\n\nvec3 TangentSpacePlot(vec3 normal, vec3 direction) {\n    // cubemapping\n    cubemap cube = CubemapFolded(normal);\n    vec2 uv = cube.uv;\n    \n    // tangent space matrix\n    mat3 tbnMatrixDer = cubeTBNMatrixDerivative(normal);\n    mat3 tbnMatrixFin = cubeTBNMatrixFiniteDif(normal);\n    \n    #ifdef DIRECTIONIWORLDSPACE\n        // translate world space vector to tangent space\n        vec3 dirWSDer = direction;\n        vec2 dirTSDer = vec3(inverse(tbnMatrixDer) * direction).xy;\n        \n        vec3 dirWSFin = direction;\n        vec2 dirTSFin = vec3(inverse(tbnMatrixFin) * direction).xy;\n    #else\n        // translate tangent space vector to world space\n        vec3 dirWSDer = tbnMatrixDer * vec3(direction.xyz);\n        vec2 dirTSDer = direction.xy;\n        \n        vec3 dirWSFin = tbnMatrixFin * vec3(direction.xyz);\n        vec2 dirTSFin = direction.xy;\n    #endif\n    \n    //Tangent space plot\n    float tsPlotDer = quiverPlot(uv, dirTSDer, 10.);    \n    float tsPlotFin = quiverPlot(uv, dirTSFin, 10.);\n    \n    // World Space flow plot\n    float time = iTime * 0.25;\n    vec3 wsPlot = flowPlot(normal, dirWSFin, time);\n    \n    // making joint version of all plots in a color\n    vec3 col = vec3(max(wsPlot.x, tsPlotDer), max(wsPlot.y, tsPlotFin), wsPlot.z);\n    return col;\n}\n\n// _____________________________3D Section_____________________________\n// https://www.shadertoy.com/view/4sjXW1 by nimitz (twitter: @stormoid)\n\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}\n\nfloat iSphere(in vec3 ro, in vec3 rd)\n{\n    vec3 oc = ro;\n    float b = dot(oc, rd);\n    float c = dot(oc,oc) - 1.;\n    float h = b*b - c;\n    if(h <0.0) return -1.;\n    return -b - sqrt(h);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\tvec2 p = fragCoord.xy/iResolution.xy-0.5;\n\tp.x*=iResolution.x/iResolution.y;\n\tvec2 um = iMouse.xy / iResolution.xy-.5;\n\tum.x *= iResolution.x/iResolution.y;\n    p*= 1.5;\n\t\n    //camera\n\tvec3 ro = vec3(0.,0.,2.4);\n    vec3 rd = normalize(vec3(p,-1.5));\n    mat2 mx = mm2(um.x*5.);\n    mat2 my = mm2(um.y*5.);\n    ro.xz *= mx;rd.xz *= mx;\n    ro.xy *= my;rd.xy *= my;\n    \n    float t = iSphere(ro,rd);\n    \n    // nice spinning animation while unset\n    #ifdef DIRECTION\n        vec3 direction = DIRECTION;\n    #else\n        float time = iTime * 0.5;\n        float c = cos(time);\n        float s = sin(time);\n        vec3 direction = vec3(c*s,s*s,c);\n    #endif\n    \n    vec3 col;\n    \n    if (t > 0.)\n    {\n    \tvec3 pos = ro+rd*t;\n        // Sphere mapping\n    \tcol = TangentSpacePlot(pos, direction);\n    } else {\n        // Background mapping\n        vec3 pos = rd;  \n        col = direction *0.5+0.5;\n    }\n    \n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "//_____________________Quiver Plot______________________________\n\n// Rotate coordinates in vector direction\nvec2 rotateUV(vec2 uv, vec2 direction) {\n    // Calculate the rotation matrix\n    mat2 rotationMatrix = mat2( direction.y, direction.x,\n                                -direction.x, direction.y );\n\n    // Rotate the UV coordinates\n    return rotationMatrix * uv;\n}\n\n#define SMALLESTFLOAT (1.0 / float(0xffffffffU))\n// Generates a grid of arrows that point in the direction\nfloat quiverPlot(vec2 uv, vec2 direction, float gridSize) {\n    float lineThickness = 0.03;    // Thickness of the arrow line\n    float tipSteepness = 3.0;      // Controls the angle of the arrow tip\n\n    float maxSize = 0.9;           // Maximum arrow length (1 should be the max)\n    float minSize = 0.2;           // Minimum arrow length\n\n    // Calculate the square of the length of the vector\n    float lenSq = dot(direction, direction);\n    \n    // Check if the squared length is greater than a tiny threshold\n    if (lenSq > SMALLESTFLOAT) {\n    \n        // break UV coordinates into grid sections\n        uv = fract(uv * gridSize) - 0.5;\n\n        // caculate the direction vector length    \n        float vectorLen = sqrt(lenSq); \n\n        // Scale uv by vector size\n        float size = mix(minSize, maxSize, clamp(vectorLen, 0.,1.)); \n        uv /= size;\n\n        // Rotate UV coordinates based on the normalized direction vector\n        uv = rotateUV(uv, direction / vectorLen);\n\n        // absolute position\n        float absV = abs(uv.x);\n\n        // Calculate center line of the arrow shape\n        float lineOffset = tipSteepness * lineThickness; // offset so lines doesn't go over the tip\n        float line = max(absV, abs(uv.y + lineOffset) - 0.5 + lineOffset);\n\n        // Caculation of the Arror Tip\n        float tip = max(abs((uv.y / tipSteepness) + absV - (0.5 / tipSteepness) + lineThickness), -uv.y + 0.1);\n\n        // Combine line and tip to create the arrow shape\n        float arrowDist = min(tip, line) - lineThickness;\n\n        // Create a mask based on the arrow shape\n        return step(arrowDist, 0.0); // no AA\n        //float blur = (gridSize * 1.0)/(size * 720.);\n        //return  smoothstep(blur, -blur, arrowDist) ; // cheap AA\n        \n    } else {\n        // if the direction length is 0. then no arrows\n        return 0.;\n    }    \n}\n\n//_____________________Flow Plot______________________________\n\n// 3D cube grid with lines in RGB for XYZ axes\nvec3 cubeGrid(vec3 uvw, float lineThickness) {\n    // Side distance of the cube\n    vec3 sideDistBig = abs(fract(uvw + 0.5) - 0.5);\n    \n    // Smaller scaled side distance of the cube\n    float detailScale = 4.0;\n    uvw *= detailScale;\n    vec3 sideDistDetail = abs(fract(uvw + 0.5) - 0.5);\n    \n    // Merge grids\n    vec3 joined = min(sideDistBig, sideDistDetail);\n    \n    // Create hard outlines of sides\n    return step(joined, vec3(lineThickness)); \n}\n\n// viszalizes 3D Vector\nvec3 flowPlot(vec3 uvw, vec3 direction, float time) {\n    // should probably be input paramters\n    float gridScale = 1.3;\n    float lineThickness = 0.02;\n    float vectorScale = 0.15;\n    \n    direction *= vectorScale;\n    \n    uvw *= gridScale;\n    \n    // Static grid (looks calmer)\n    vec3 grid = cubeGrid(uvw, lineThickness);\n    \n    // Animated grid\n    int count = 7;\n    for (int index = 1; index < count; index += 1) {\n        // Unique percentage of each individual grid \n        float percent = fract(float(index) / float(count - 1) + time);        \n        // Fading brightness\n        float brightness = 1.0 - percent;\n        \n        // Scale offset\n        vec3 offset = percent * direction;\n        \n        // Sample grid\n        vec3 aniGrid = cubeGrid(uvw - offset, lineThickness);\n        \n        // Apply brightness which fades with distance\n        aniGrid *= brightness;\n\n        // Add to the existing grid color output\n        grid = max(grid, aniGrid);\n    }\n    \n    return grid;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}