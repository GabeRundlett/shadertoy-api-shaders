{
    "Shader": {
        "info": {
            "date": "1525712086",
            "description": "Mouse does stuff",
            "flags": 0,
            "hasliked": 0,
            "id": "MsyyRc",
            "likes": 4,
            "name": "Twisty",
            "published": 3,
            "tags": [
                "3d",
                "sdf",
                "antialiasing"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 505
        },
        "renderpass": [
            {
                "code": "#define EPS      0.002\n#define STEPS     1028\n#define FAR      100.0\n#define PI 3.141592653\n#define REFLECTIONS  3\n// AA from https://www.shadertoy.com/view/XlyGzh\n#define SS\n// When SS is defined uncomment the next line to get reflections\n//#define REFLECT\n\nconst float f = 1.5;\nconst int samples = 2;\n\nvec3 modP( vec3 p )\n{\n\n    float rep = 10.0;\n    float a = atan( p.y, p.x );\n    float r = length( p.xy );\n    a = mod( a, 2.0 * PI / rep ) - PI / rep;\n    p.xy = r * vec2( cos( a ), sin( a ) );\n    p.x -= 1.8;\n    p.z = mod( p.z, 1.0 ) - 0.5;\n    \n    return p;\n\n}\n\nvec3 twiY( vec3 p, float f )\n{\n\n    vec2 mou = iMouse.xy / iResolution.xy;\n    \n    if( mou.y == 0.0 ) mou = vec2( 0, sin( iTime * 0.2 ) );\n    \n    float a = mou.y * p.y * f;\n    \n    p.xz = cos( a ) * p.xz + sin( a ) * vec2( -p.z, p.x );\n    \n    return p;\n\n}\n\nvec3 twiX( vec3 p, float f )\n{\n\n    vec2 mou = iMouse.xy / iResolution.xy;\n    \n    if( mou.x == 0.0 ) mou = vec2( 0.3, 0 );\n    \n    float a = mou.x * p.x * f;\n    \n    p.yz = cos( a ) * p.yz + sin( a ) * vec2( -p.z, p.y );\n    \n    return p;\n\n}\n\nfloat sph( vec3 p ) \n{\n    \n    return length( p ) - 1.3;\n\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    \n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n\n}\n\nfloat pla( vec3 p )\n{\n\n    return p.y + 2.0;\n\n}\n\nvec2 map( vec3 p )\n{\n\n    vec2 pla = vec2( pla( p ), 1.0 );\n    p = twiX( p, 2.0 );\n    p = twiY( p, 2.0 );\n    vec2 cub = vec2( sdBox( p, vec3( 1.0 ) ), 0.0 );\n    vec2 sds = vec2( sph( p ), 0.0 );\n    vec2 fin = max( -sds, cub );\n    \n    if( pla.x < fin.x ) fin = pla;\n\n    return fin;\n    \n}\n\nvec3 nor( vec3 p )\n{\n\n    vec2 e = vec2( EPS, 0.0 );\n    return normalize( vec3( map( p + e.xyy ).x - map( p - e.xyy ).x,\n                            map( p + e.yxy ).x - map( p - e.yxy ).x,\n                            map( p + e.yyx ).x - map( p - e.yyx ).x\n                           )\n                     );\n    \n}\n\nfloat ray( in vec3 ro, in vec3 rd, out float d )\n{\n\n    float t = 0.0;\n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n        d = 0.5 * map( ro + rd * t ).x;\n        if( d < EPS || t > FAR ) break;\n        t += d;\n    \n    }\n    \n    return t;\n        \n}\n\nfloat softShadows( in vec3 ro, in vec3 rd )  \n{\n\n    float res = 1.0;\n    for( float t = 0.1; t < 8.0; ++t )\n    {\n    \n        float h = map( ro + rd * t ).x;\n        res = min( res, 8.0 * h / t );\n        \n        t += h;\n    \n    }\n    \n    return res;\n\n}\n\nvec3 sha( vec3 ro, vec3 rd )\n{\n\n    vec3 col = vec3( 0.0 );\n    vec3 lig = normalize( vec3( 1.0, 0.8, 0.6 ) );\n    vec3 blig = vec3( -lig.x, -lig.y, -lig.z );\n    \n    float d = EPS;\n    float t = ray( ro, rd, d );\n    vec3 p = ro + rd * t;\n    vec3 n = nor( p );\n    vec3 ref = reflect( rd, n );\n    \n    float amb = 0.5 + 0.5 * n.y;\n    float dif = max( 0.0, dot( n, lig ) );\n    float bac = max( 0.0, 0.5 + 0.2 * dot( n, blig ) );\n    float sha = softShadows( p, lig );\n    float spe = pow( clamp( dot( ref, lig ), 0.0, 1.0 ), 16.0 );\n    float speO = pow( clamp( dot( ref, blig ), 0.0, 1.0 ), 16.0 );\n    \n    col += amb * vec3( 0.1, 0.15, 0.2 );\n    col += dif * vec3( 1.0, 0.97, 0.85 ) * sha;\n    col += 1.0 * spe;\n    col += 1.0 * speO;\n    if( map( p ).y == 1.0 ) col *= vec3( 2.0 );\n    if( map( p ).y == 0.0 ) col *= n;\n    \n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n\n    vec2 mou = iMouse.xy / iResolution.xy;\n    \n    vec3 ro = 3.0 * vec3( sin( 0.0 ), 0.0, cos( 0.0) );\n    //vec3 rd = normalize( vec3( uv, -1.0 ) );\n    // Camera matrix\n    vec3 ww = normalize( vec3( 0.0 ) - ro );\n    vec3 uu = normalize( cross( vec3( 0.0, 1.0, 0.0 ), ww  ) );\n    vec3 vv = normalize( cross( ww, uu ) );\n    vec3 rd = normalize( uv.x * uu + uv.y * vv + 1.5 * ww );\n    \n    float d = EPS;\n    float t = ray( ro, rd, d );\n    vec3 p = ro + rd * t;\n    vec3 n = nor( p );\n    \n    vec3 col = vec3( 0 );\n    \n    #ifdef SS\n    for (int x = - samples / 2; x < samples / 2; x++) {\n        for (int y = - samples / 2; y < samples / 2; y++) {\n\t\t\tvec3 rd = normalize(\n                (float(x) / iResolution.y + uv.x)*uu +\n                (float(y) / iResolution.y + uv.y)*vv +\n                f*ww );\n            t = ray(ro, rd, d);\n            col += d < EPS ? sha( ro, rd ) : mix( vec3( 1.0 ), vec3( 0.4, 0.2, 0.1 ), uv.y );\n        }\n    }\n    \n    col = col / float(samples * samples);\n    col *= vec3( samples * samples );\n    \n    #ifdef REFLECT\n    \n    if( map( p ).y == 0.0 )\n        \n    for( int i = 0; i < REFLECTIONS; i++ )\n    {\n\n        p = p + ro * 0.05;\n        p += EPS * rd;\n        ro = p + rd * 0.02;\n        rd = reflect( rd, n );\n\n        col += d < EPS ? sha( ro, rd ) : vec3( 0.0 );\n        \n    }\n    \n    #else\n    \n    #endif\n\n\tfragColor = vec4( col / float(samples * samples), 1.0 );\n\n    #else\n    \n    col = d < EPS ? sha( ro, rd ) : mix( vec3( 1.0 ), vec3( 0.4, 0.2, 0.1 ), uv.y );\n    \n    if( map( p ).y == 0.0 )\n        \n    for( int i = 0; i < REFLECTIONS; i++ )\n    {\n\n        p = p + ro * 0.05;\n        p += EPS * rd;\n        ro = p + rd * 0.02;\n        rd = reflect( rd, n );\n\n        col += d < EPS ? sha( ro, rd ) * 0.1 : vec3( 0.0 );\n        \n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    #endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}