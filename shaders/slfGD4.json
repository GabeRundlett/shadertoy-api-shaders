{
    "Shader": {
        "info": {
            "date": "1622076895",
            "description": "False girl ... a woman from behind ... I got from a tiktok video ..... but it is necessary to add hands, feet ... etc",
            "flags": 0,
            "hasliked": 0,
            "id": "slfGD4",
            "likes": 5,
            "name": "v1-  Bezier-Fake girl",
            "published": 3,
            "tags": [
                "2d",
                "bezier",
                "draw"
            ],
            "usePreview": 1,
            "username": "jorge2017a1",
            "viewed": 879
        },
        "renderpass": [
            {
                "code": "//-----Modificado por\n//------jorge2017a1\n//descripcion:\n//False girl ... a woman from behind ... I got from a tiktok video .....\n//but it is necessary to add hands, feet ... etc\n\n//Referencia----------\n//https://www.shadertoy.com/view/XdBXDt    ..... de Casteljau\n//Created by vgs in 2014-11-25\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(antialiasing(0.55),b,d)\n#define Sv(d,b,v) smoothstep(antialiasing(v),b,d)\n\n\nconst vec3 colNegro= vec3(0.0);\nconst vec3 colBlanco= vec3(1.0);\nconst vec3 colRojo= vec3(1.0,0.0,0.0);\nconst vec3 colVerde= vec3(0.0,1.0,0.0);\n\nvec3 ponerBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S(abs( distObj),0.0));\n  return colOut;\n}\n\n\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\n\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\n\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n//-------------------------------------------\n\n\nstruct Bezier {\n    vec2 a, b, c, d;\n};\n\n// splits a bezier B (t = 0.5) into beziers L and R.\nvoid decasteljau(in Bezier B, out Bezier L, out Bezier R) {\n\tL.a = B.a;          R.d = B.d;\n    L.b = .5*(B.a+B.b); R.c = .5*(B.c+B.d); \n    vec2 tmp = .5*(B.b+B.c);\n    L.c = .5*(L.b+tmp); R.b = .5*(R.c+tmp);\n    L.d = R.a = .5*(L.c+R.b);\n}\n\n// distance to the control points.\nfloat distCP(vec2 p, Bezier B) {\n    return min(min(length(p - B.a), length(p - B.b)),\n               min(length(p - B.c), length(p - B.d)));\n}\n\n// distance to a line segment.\nfloat segment(vec2 p, vec2 a, vec2 b) {\n    vec2 ap = p - a, ab = b - a;\n    float k = clamp(dot(ap, ab)/dot(ab,ab), 0.0, 1.0);\n    return length(ap - k*ab);\n}\n\n// distance to the linear approximation.\nfloat distLinear(vec2 p, Bezier B) {\n    return min(min(segment(p, B.a, B.b), segment(p, B.b, B.c)), segment(p, B.c, B.d));\n}\n\n\n\nfloat HacerFiguraBezier(vec2  uv, vec2 PA,\tvec2 PB ,vec2 PC ,vec2 PD )\n{\n\nBezier bezier[16]; \n    bezier[0] = Bezier(PA, PB, PC, PD);\n    float dCP  = distCP(uv, bezier[0]);\n    float dLCP = distLinear(uv, bezier[0]);\n    \n    \n    // just an unrolled recursion, yey! :D\n    decasteljau(bezier[0], bezier[0], bezier[8]); \n    decasteljau(bezier[0], bezier[0], bezier[4]);\n    /*\n    decasteljau(bezier[8], bezier[8], bezier[12]);   decasteljau(bezier[0], bezier[0], bezier[2]);\n    decasteljau(bezier[4], bezier[4], bezier[6]);    decasteljau(bezier[8], bezier[8], bezier[10]);\n    decasteljau(bezier[12], bezier[12], bezier[14]); decasteljau(bezier[0], bezier[0], bezier[1]);\n    decasteljau(bezier[2], bezier[2], bezier[3]);    decasteljau(bezier[4], bezier[4], bezier[5]);\n    decasteljau(bezier[6], bezier[6], bezier[7]);    decasteljau(bezier[8], bezier[8], bezier[9]);\n    decasteljau(bezier[10], bezier[10], bezier[11]); decasteljau(bezier[12], bezier[12], bezier[13]);\n    decasteljau(bezier[14], bezier[14], bezier[15]);\n    */\n    \n    \tfloat dLA = 100.0;\n    for (int i = 0; i < 16; ++i)\n        dLA = min(dLA, distLinear(uv, bezier[i]));\n    \n   \n    return  dLA;\n}    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    \n    /*vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;    */\n    uv*=0.65;\n    uv-=vec2(-0.3,-0.3);\n    \n    // Control points .\n\nvec2 pc1p1=vec2(.177,.718);\nvec2 pc1p2=vec2(.172,.832);\nvec2 pc1p3=vec2(.214,.911);\nvec2 pc1p4=vec2(.236,.932);\n\nvec2 pc2p1=vec2(.236,.932);\nvec2 pc2p2=vec2(.260,.949);\nvec2 pc2p3=vec2(.304,.953);\nvec2 pc2p4=vec2(.327,.919);\n\nvec2 pc3p1=vec2(.326,.921);\nvec2 pc3p2=vec2(.373,.843);\nvec2 pc3p3=vec2(.402,.777);\nvec2 pc3p4=vec2(.443,.690);\n\nvec2 pc4p1=vec2(.440,.692);\nvec2 pc4p2=vec2(.458,.648);\nvec2 pc4p3=vec2(.461,.595);\nvec2 pc4p4=vec2(.438,.559);\n\nvec2 pc5p1=vec2(.245,.511);\nvec2 pc5p2=vec2(.339,.531);\nvec2 pc5p3=vec2(.388,.542);\nvec2 pc5p4=vec2(.438,.558);\n\nvec2 pc6p1=vec2(.175,.723);\nvec2 pc6p2=vec2(.186,.634);\nvec2 pc6p3=vec2(.208,.559);\nvec2 pc6p4=vec2(.244,.510);\n\nvec2 pc7p1=vec2(.178,.732);\nvec2 pc7p2=vec2(.246,.751);\nvec2 pc7p3=vec2(.354,.755);\nvec2 pc7p4=vec2(.425,.733);\n\nvec2 pc8p1=vec2(.174,.732);\nvec2 pc8p2=vec2(.225,.515);\nvec2 pc8p3=vec2(.242,.441);\nvec2 pc8p4=vec2(.224,.374);\n\nvec2 pc9p1=vec2(.426,.732);\nvec2 pc9p2=vec2(.484,.532);\nvec2 pc9p3=vec2(.395,.460);\nvec2 pc9p4=vec2(.440,.381);\n\nvec2 pc10p1=vec2(.224,.375);\nvec2 pc10p2=vec2(.290,.375);\nvec2 pc10p3=vec2(.348,.376);\nvec2 pc10p4=vec2(.440,.380);\n\nvec2 pc11p1=vec2(.221,.374);\nvec2 pc11p2=vec2(.178,.236);\nvec2 pc11p3=vec2(.141,.090);\nvec2 pc11p4=vec2(.171,.006);\n\nvec2 pc12p1=vec2(.173,.006);\nvec2 pc12p2=vec2(.232,.007);\nvec2 pc12p3=vec2(.291,.006);\nvec2 pc12p4=vec2(.330,.008);\n\nvec2 pc13p1=vec2(.332,.010);\nvec2 pc13p2=vec2(.313,.101);\nvec2 pc13p3=vec2(.378,.135);\nvec2 pc13p4=vec2(.327,.208);\n\nvec2 pc14p1=vec2(.348,.106);\nvec2 pc14p2=vec2(.351,.015);\nvec2 pc14p3=vec2(.349,.035);\nvec2 pc14p4=vec2(.350,.005);\n\nvec2 pc15p1=vec2(.358,.004);\nvec2 pc15p2=vec2(.411,.004);\nvec2 pc15p3=vec2(.461,.004);\nvec2 pc15p4=vec2(.509,.009);\n\nvec2 pc16p1=vec2(.380,.220);\nvec2 pc16p2=vec2(.334,.149);\nvec2 pc16p3=vec2(.339,.058);\nvec2 pc16p4=vec2(.443,.046);\n\nvec2 pc17p1=vec2(.440,.382);\nvec2 pc17p2=vec2(.487,.283);\nvec2 pc17p3=vec2(.544,.139);\nvec2 pc17p4=vec2(.513,.004);\nvec3  col=vec3(0.0);\n\n\nfloat d1= HacerFiguraBezier(uv,pc1p1,pc1p2,pc1p3,pc1p4);\nfloat d2= HacerFiguraBezier(uv,pc2p1,pc2p2,pc2p3,pc2p4);\nfloat d3= HacerFiguraBezier(uv,pc3p1,pc3p2,pc3p3,pc3p4);\nfloat d4= HacerFiguraBezier(uv,pc4p1,pc4p2,pc4p3,pc4p4);\nfloat d5= HacerFiguraBezier(uv,pc5p1,pc5p2,pc5p3,pc5p4);\nfloat d6= HacerFiguraBezier(uv,pc6p1,pc6p2,pc6p3,pc6p4);\nfloat d7= HacerFiguraBezier(uv,pc7p1,pc7p2,pc7p3,pc7p4);\nfloat d8= HacerFiguraBezier(uv,pc8p1,pc8p2,pc8p3,pc8p4);\nfloat d9= HacerFiguraBezier(uv,pc9p1,pc9p2,pc9p3,pc9p4);\nfloat d10= HacerFiguraBezier(uv,pc10p1,pc10p2,pc10p3,pc10p4);\nfloat d11= HacerFiguraBezier(uv,pc11p1,pc11p2,pc11p3,pc11p4);\nfloat d12= HacerFiguraBezier(uv,pc12p1,pc12p2,pc12p3,pc12p4);\nfloat d13= HacerFiguraBezier(uv,pc13p1,pc13p2,pc13p3,pc13p4);\nfloat d14= HacerFiguraBezier(uv,pc14p1,pc14p2,pc14p3,pc14p4);\nfloat d15= HacerFiguraBezier(uv,pc15p1,pc15p2,pc15p3,pc15p4);\nfloat d16= HacerFiguraBezier(uv,pc16p1,pc16p2,pc16p3,pc16p4);\nfloat d17= HacerFiguraBezier(uv,pc17p1,pc17p2,pc17p3,pc17p4);\n\ncol=ponerBorde(colBlanco,col,d1);\ncol=ponerBorde(colBlanco,col,d2);\ncol=ponerBorde(colBlanco,col,d3);\ncol=ponerBorde(colBlanco,col,d4);\ncol=ponerBorde(colBlanco,col,d5);\ncol=ponerBorde(colBlanco,col,d6);\ncol=ponerBorde(colRojo,col,d7);\ncol=ponerBorde(colRojo,col,d8);\ncol=ponerBorde(colRojo,col,d9);\ncol=ponerBorde(colVerde,col,d10);\ncol=ponerBorde(colVerde,col,d11);\ncol=ponerBorde(colVerde,col,d12);\ncol=ponerBorde(colVerde,col,d13);\ncol=ponerBorde(colVerde,col,d14);\ncol=ponerBorde(colVerde,col,d15);\ncol=ponerBorde(colVerde,col,d16);\ncol=ponerBorde(colVerde,col,d17);\n\n  \n\tfragColor = vec4(pow(col, vec3(1.0/6.2)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}