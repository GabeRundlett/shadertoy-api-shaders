{
    "Shader": {
        "info": {
            "date": "1538672707",
            "description": "Some weird old Mandelbrot code, resurrected from a stash of old C code, with added animation.\n\nPannable version: http://glslsandbox.com/e#49533",
            "flags": 0,
            "hasliked": 0,
            "id": "MttBz8",
            "likes": 59,
            "name": "Mandelleaves",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "leaves"
            ],
            "usePreview": 0,
            "username": "WAHa_06x36",
            "viewed": 1722
        },
        "renderpass": [
            {
                "code": "vec2 cmul(vec2 a, vec2 b) { return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x); }\n\nvec3 hsv(float h, float s, float v) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(vec3(h) + K.xyz) * 6.0 - K.www);\n\treturn v * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), s);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 surfacePosition = 0.5 * (2.0 * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    float mouseY = iMouse.y == 0.0 ? 0.0 : iMouse.y / iResolution.y - 0.5;\n\tfloat zoom = exp(mouseY * 8.0);\n    \n    //vec2 p = zoom * 2.0 * surfacePosition - vec2(0.7, 0.0);\n\tvec2 p = zoom * 0.016 * surfacePosition - vec2(0.805, -0.176);\n\t//vec2 p = zoom * 0.001 * surfacePosition - vec2(1.924, 0.0);\n\n\tvec2 z = p;\n\tvec2 c = p;\n\tvec2 dz = vec2(1.0, 0.0);\n\tfloat it = 0.0;\n\tfor(float i = 0.0; i<1024.0; i+=1.0) {\n\t\tdz = 2.0 * cmul(z, dz) + vec2(1.0, 0.0);\n\t\tz = cmul(z, z) + c;\n\n        float a = sin(iTime * 1.5 + i * 2.0) * 0.3 + i * 1.3;\n\t\tvec2 t = mat2(cos(a), sin(a), -sin(a), cos(a)) * z;\n\t\tif(abs(t.x) > 2.0 && abs(t.y) > 2.0) { it = i; break; }\n\t}\n\n\tif (it == 0.0) {\n\t\tfragColor = vec4(vec3(0.0), 1.0);\n\t} else {\n\t\tfloat z2 = z.x * z.x + z.y * z.y;\n\t\tfloat dist = log(z2) * sqrt(z2) / length(dz);\n\t\tfloat r = sqrt(z2);\n\n\t\tfloat pixelsize = fwidth(p.x);\n\t\tfloat diagonal = length(iResolution.xy);\n\t\tfloat glowsize = pixelsize * diagonal / 400.0;\n\t\tfloat shadowsize = pixelsize * diagonal / 80.0;\n\n\t\tfloat fadeout = 0.0, glow = 0.0;\n\t\tif(dist < pixelsize) {\n\t\t\tfadeout = dist / pixelsize;\n\t\t\tglow = 1.0;\n \t\t} else {\n\t\t\tfadeout = min(shadowsize / (dist + shadowsize - pixelsize) + 1.0 / (r + 1.0), 1.0);\n\t\t\tglow = min(glowsize / (dist + glowsize - pixelsize), 1.0);\n\t\t}\n\n\t\tfragColor = vec4(hsv(\n\t\t\tit / 32.0 + 0.4,\n\t\t\t1.0 - glow,\n\t\t\tfadeout\n\t\t), 1.0);\t\t\n\t}\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}