{
    "Shader": {
        "info": {
            "date": "1698955654",
            "description": "CC0: A rough copy of twitter art\n@tequibo shared their most popular piece. I really liked it and thought I\nshould make a stab at shaderify it. It's kind of there but not really.\nOriginal: https://x.com/tequibo/status/1720022416452190249",
            "flags": 0,
            "hasliked": 0,
            "id": "DtdczN",
            "likes": 23,
            "name": "A rough copy of twitter art",
            "published": 3,
            "tags": [
                "2d",
                "twitter"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 288
        },
        "renderpass": [
            {
                "code": "// CC0: A rough copy of twitter art\n//  @tequibo shared their most popular piece. I really liked it and thought I\n//  should make a stab at shaderify it. It's kind of there but not really.\n//  Lots of hacking with little thought to try to replicate the original roughly.\n//  Original: https://x.com/tequibo/status/1720022416452190249\n\n//  I really like how something so simple looks very cool\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n\nfloat tri(vec2 p, float r) {\n  p = -p;\n  const float k = sqrt(3.0);\n  p.x = abs(p.x) - r;\n  p.y = p.y + r/k;\n  if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n  p.x -= clamp( p.x, -2.0*r, 0.0 );\n  return -length(p)*sign(p.y);\n}\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\nfloat dot2(vec2 p) {\n  return dot(p,p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  const float stp = max(0.1, 0.01);\n  const float mx = 1.;\n  const float cnt = 1.0/stp;\n  const float add = 0.05;\n  const vec3 bgcol = HSV2RGB(vec3(0., 0.95, 0.025));\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float aa = sqrt(2.0)/RESOLUTION.y;\n  vec3 col = vec3(0.0);\n  const float hue = 0.4666;\n  float tm = TIME;\n  for (float i = mx; i > 0.; i -= stp) {\n    float r0 = i;\n    vec2 p0 = p;\n    mat2 r = ROT(TAU/6.0*sin(tm-2.25*i));\n    vec3 gcol0 = hsv2rgb(vec3(hue, 1.25*sqrt(r0), mix(1.0, 0.125, sqrt(r0))));\n    p0 *= r;\n    float d0 = tri(p0, i);\n    if (d0 < 0.0) {\n      col = mix(col, gcol0 , mix(1.0, 0.5*dot2(p), r0));\n    }\n\n    float r1 = i-0.5*stp;\n    vec2 p1 = p ;    \n    vec3 gcol1 = hsv2rgb(vec3(hue, 1.25*sqrt(r1), mix(1.0, 0.125, sqrt(r1))));\n    p1 *= transpose(r);\n    float d1 = tri(p1, i-0.5*stp);\n    if (d1 < 0.0) {\n      col = mix(col, gcol1, mix(1.0, 0.5*dot2(p), r1));\n    }\n  }\n  col *= smoothstep(1., 0.0, length(p));\n  col += bgcol;\n    \n  col = sqrt(col);\n  \n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}