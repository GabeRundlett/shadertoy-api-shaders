{
    "Shader": {
        "info": {
            "date": "1589165143",
            "description": "automaton",
            "flags": 32,
            "hasliked": 0,
            "id": "tsXfDX",
            "likes": 5,
            "name": "Yin Yang Biological Simulation",
            "published": 3,
            "tags": [
                "multipass"
            ],
            "usePreview": 0,
            "username": "tomachi",
            "viewed": 627
        },
        "renderpass": [
            {
                "code": "#define herbtex(g) texture(iChannel0, (g)/iResolution.xy)\n#define amoebatex(g) texture(iChannel1, (g)/iResolution.xy)\n#define webcam(g) texture(iChannel2, (g)/iResolution.xy)\n#define width int 100\n#define height int 100\n#define cellCol[height] uniform float \n#define toxic 10000.0\n#define toxfactor 0.001\n#define brightness 1.01\n#define blueness 0.25\nfloat sigmoid(float a, float f)\n{\n\treturn 1.0/(1.0+exp(-f*a));\n}\n\n//void mainImage(out vec4 fragColor, vec2 fragCoord)\n//{\n  //  edgeStrength = sigmoid(edgeStrength - 0.2, 32.0); \n//}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{       \n    // x,y => pos\n\t// z => pressure\n\t// w => ink\t\n\n   \tvec4 aa = herbtex(fragCoord+vec2(1,0)); // look to the left\n\tvec4 bb = herbtex(fragCoord+vec2(0,1)); // right\n\tvec4 cc = herbtex(fragCoord+vec2(-1,0));// up\n\tvec4 dd = herbtex(fragCoord+vec2(0,-1));// down\n\tvec4 herb = herbtex(fragCoord);\n\tvec4 amoeba = amoebatex(fragCoord);\n\n    float r, g, b, pressure;\n  \tfloat rh, gh, bh;\n    float biomass = abs( aa.w + bb.w +  cc.w + dd.w) + abs(aa.z + bb.z + cc.z + dd.z); // abs converts to positive\n\tfloat pollenSpeed = max(max(abs(aa.x) , abs(bb.x)),max(abs(cc.x) , abs(dd.x)));   \n\n    r = (abs(herbtex(fragCoord).x)) + (herbtex(fragCoord).w) + biomass;\n    g = abs(herbtex(fragCoord).z);// +   herbtex(fragCoord).w;\n    b = (abs(herbtex(fragCoord).y)) * (herbtex(fragCoord).w ) ;// * 0.00016);\n    \n    rh = herb.r + 0.5; // RED\n    gh = (herb.g*0.5) + rh; // GREEN \n    bh = (herb.b*0.5)+ rh; // BLUE\n    if (rh < 0.5) { rh=1.; r=1.; } // 10X BRIGHTEN\n    if (gh > 0.5) { gh*=2.; g+=0.1; } // BRIGHTEN\n    if (amoeba.r > 0.025) { r+=brightness; }\n    if (amoeba.g > 0.025) { g+=brightness; }\n    if (amoeba.b > 0.025) { b+=brightness; }\n\n   // if (herb.r < 0.5) { r+=0.95; }\n    //if (herb.g < 0.5) { g+=0.25; }\n    //if (herb.b < 0.5) { b+=0.25; }\n    \n \tfloat amb = sigmoid( 10., amoeba.z)*0.25;// amoeba.z) ;\n \tfloat hrb = sigmoid( 10., herb.z)*0.5 ;\n    \n\tvec4 apixel = vec4( amb*1.99, amb*1.9, amb*0.05, 0.);\n    vec4 hpixel = vec4( hrb* 0.1, hrb* 0.9, hrb* 0.30, 0.);\n    \n    fragColor = apixel + hpixel;\n    \n //\tfragColor = amoeba*0.5;// + (herb*0.25);// + amoeba;\n \t//fragColor = vec4(herb);// + amoeba;\n \t// fragColor = vec4(amoeba);// + amoeba;\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// VEGETATION LAYER\n#define magic 0.27\n#define border 60.\n#define count 28\n#define herbtex(g) texture(iChannel0, (g)/iResolution.xy)\n#define amoebatex(g) texture(iChannel1, (g)/iResolution.xy)\n#define topspeed 1000.76\n#define tides 0.0833\n#define rotation 0.2583\n#define expansion 0.001\n#define radius 0.943\n#define emitSize 2.\n#define force 1.01\n#define constraint 0.51\n#define effect 0.99\n#define toxic 1000.\n#define emit(v,s) if (length(g-(v)) < emitSize) fragColor.xy = fragColor.xy * (1.0 - force) + force * (s), fragColor.w = 1.0\n#define wallCircle(v,d) if (length(g-(v)) < (d)) fragColor.w = fragColor.z / (length(fragColor.xy)+0.0001), fragColor.xy *= 0.\n#define s iResolution.xy\n#define theTides(offset) 0.003951*(sin((iTime*tides)+offset+30.)-0.5)\nfloat shape(vec2 p, vec2 d)\n{\n\tfloat r = min(d.x, d.y);\n\tfloat tri = max(abs(p.x)-p.y,p.y) - r;\n    return tri;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // x,y => pos\n\t// z => pressure\n\t// w => ink\n\tvec2 xy = fragCoord;\n\tvec2 g = fragCoord;\n\n    vec4 a = herbtex(xy+vec2(1,0));\n\tvec4 b = herbtex(xy+vec2(0,1));\n\tvec4 c = herbtex(xy+vec2(-1,0));\n\tvec4 d = herbtex(xy+vec2(0,-1));\n    vec4 herb = herbtex(xy);\n    \n  //  float red = herb.r;\n    float green = herb.g;\n    float blue = herb.b;\n    \n    \n\tvec4 tomachiBoost = vec4(1.0001,1.0001,1.0001,0.99);\n\tvec4 tomachiSuppress = vec4(-0.999,-0.999,0.99,0.99);\n    vec4 tomachi = tomachiBoost;\n   // vec4 herbi = herbtex(xy);\n    vec4 amoeba = amoebatex(xy);\n\n    // LOAD PREVIOUS COLOUR FROM TEXTURE\n\t//fragColor = tex(g-tex(g).xy) * tomachi; // last state\n    //fragColor.r += webcamPixel.r;\n    fragColor = herb;\n    //fragColor.b += webcamPixel.b;\n\n    \n\n\tvec2 gp = vec2(a.z-c.z,b.z-d.z); // pressure gradient\n    float sidepresh = abs(gp.x);\n    float vertpresh = abs(gp.y);\n    \n\t// ANYTHING ABOVE 0.25 CREATES BEAUTIFUL CHAOS. 0.2499 BORING. \n    //float pressure = (0.259519-theTides()) * ((a.z + b.z + c.z + d.z) - 0.05) * (c.x - a.x + d.y - b.y);\n    gp += vec2(theTides(1.), theTides(0.)); // TIDES GENTLY MOVE SHIT\n\tfloat pressure =  magic  * (a.z + b.z + c.z + d.z) - 0.05 * (c.x - a.x + d.y - b.y);\n    float population = abs(pressure);\n    // float pressure = 0.2499 * (a.z + b.z + c.z + d.z) - 0.05 * (c.x - a.x + d.y - b.y);\n    if (sidepresh > toxic || vertpresh > toxic || abs(pressure) > 0.26 ) {\n            \tpressure *= 0.89751;\n    }// OVERPRESSURE VALVE\n    if (population > 0.75) { // OVERPRESSURE VALVE. 0.5 was a good value\n    \tpopulation *= 0.89751;\n    \t//pressure *= 0.34; // <----- VERY GOOD\n \n    } else if (population < 0.25) {\n     population *= 0.79;\n        //gp.x = 2.1;\n      \tgp.y += 2.5;\n\n    }\n    if (abs(gp.x) > topspeed) { // OVERSPEED VALVE\n      // gp.x *= 0.1;\n       pressure *= 0.999;\n    } \n    if (abs(gp.y) > topspeed) {\n      // gp.x *= 0.1;\n       population *= 0.999;\n    }\n    \n  \n    \n   if (iFrame < 5) {\n      emit(fragCoord, vec2(pressure, population));\n  //    fragColor = vec4(\n   //  \t sin(fragCoord.x*0.05)*0.01,\n    // \t sin(fragCoord.y*0.05)*0.01,\n    // \t 500.5,\n   // \t  500.0\n    //  );\n    }\n\t\n   // if (xy.x < 1. || xy.y < 1. || xy.x > s.x - 1. || xy.y > s.y - 1.) fragColor.xy *= -0.5;\n    if (xy.x < border || xy.y < border || xy.x > s.x - border || xy.y > s.y - border) {\n       //fragColor.z *= 0.78941;\n       fragColor.z *= 0.7;\n      // fragColor.xy *= 0.59;\n       fragColor.xy *= vec2(0.95);\n       pressure *= 0.95;\n    }\n\t//if (xy.x < 1. || xy.y < 1. || xy.x > s.x - 1. || xy.y > s.y - 1.) fragColor.xy *= 0.95;\n\t\n    if (herb.z > 10.1) { \n     \tpressure -=  0.8* amoeba.z;\n     \tpopulation -=  0.8* amoeba.z;\n    }\n    if (amoeba.z > 1.951) { \n     \tpressure *= 0.95;\n     \tpopulation *= 0.95;\n    }\t\n    \tfragColor = vec4(\n\t\tfragColor.x + (gp.x*  0.4) ,// less horizontal\n\t\tfragColor.y + (gp.y* 0.5),// 1.0001),// gives vertical bias\n        pressure,\n        population);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// THE AMOEBA LIKES TO EAT THE HERB\n#define herbtex(g) texture(iChannel0, (g)/iResolution.xy)\n#define amoebatex(g) texture(iChannel1, (g)/iResolution.xy)\n#define toxic 12.\n#define emit(v,s) if (length(g-(v)) < emitSize) fragColor.xy = fragColor.xy * (1.0 - force) + force * (s), fragColor.z = 1.0\n#define emitSize 1.950\n#define force 0.99\nfloat sigmoid(float a, float f)\n{\n\treturn 1.0/(1.0+exp(-f*a));\n}\n\nfloat smoothbump(float center, float width, float x) {\n  float w2 = width/2.0;\n  float cp = center+w2;\n  float cm = center-w2;\n  float c = smoothstep(cm, center, x) * (1.0-smoothstep(center, cp, x));\n  return c;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n// xy = direction vec2\n//  z = pressure float\n//  w = ? \n    vec2 left  =  vec2(1,0);\n\tvec2 right =  vec2(0,1);\n\tvec2 up   =  vec2(-1,0);\n\tvec2 down =  vec2(0,-1);\n\n        \n\n    \n    vec2 g = fragCoord;\n    vec4 amoeba = amoebatex(g);\n    vec4 herb = herbtex(g);\n    vec2 direction = amoeba.xy; // direction\n    float pressure = amoeba.z; // pressure\n    float population = amoeba.r*0.4296; // pop\n    // SAMPLE THE HERBIVORE\n    vec4 a = herbtex(g+left);\n\tvec4 b = herbtex(g+right);\n\tvec4 c = herbtex(g+up);\n\tvec4 d = herbtex(g+down);\n    \n    float curl = a.r + b.r + c.r + d.r; // amoeba IS STORED IN THE RED CHANNEL\n    // SAMPLE THE 'erb\n    vec4 ll = herbtex(fragCoord+vec2(1,0));\n\tvec4 rr = herbtex(fragCoord+vec2(0,1));\n\tvec4 uu = herbtex(fragCoord+vec2(-1,0));\n\tvec4 dd = herbtex(fragCoord+vec2(0,-1));\n    \n    if (iFrame < 2) {\n\t\tpopulation = 0.;\n\t\tfragColor = vec4(0.0);\n        return;\n    } else if (iFrame < 5) {\n        population =  sin(g.x )*0.01;\n        fragColor = vec4(0.2);\n\t\treturn;\n    }\n    \n    // IF CURRENT AREA CONTAINS HERBIVORES (RED PIXELS),\n    // DECIDE WHICH WAY TO MOVE AND PARTY \n    if (population > 0.) {\n     float avg = (ll.z +  rr.z + uu.z + dd.z)*0.25; //average herb health to expect / beat\n        // RIGHT\n        if (rr.z > avg && a.r == 0.) { // IF THE BEST AND NOT OCCUPIED\n            emit(right, population);\n            fragColor.z = population;\n        // DOWN \n        } else if (dd.z > avg && b.r == 0.) { // IF THE BEST AND NOT OCCUPIED\n            emit(down, population);\n\n            // LEFT\n        } else if (up.g > avg && c.r == 0.) { // IF THE BEST AND NOT OCCUPIED\n            emit(left, population);\n\n            // UP\n        } else if (down.g >= avg && d.r == 0.) { // IF THE BEST AND NOT OCCUPIED\n            emit(up, population);\n\n        }\n        \n            \n    } else {\n     \temit(g, 0.1);\n        pressure += 1.1;\n        fragColor = vec4(population);\n\t\t//return;\n    }\n    \n    // PULL LAST STATE:\n \t//tomachiAmp += herbtex(g-herbtex(g).xy); // last state\n \t//pressure += population + pressure; // last state\n    \n    // ANALYSE THE SAMPLE\n    pressure = 0.250919 * (a.z + b.z + c.z + d.z) - 0.05 * (c.x - a.x + d.y - b.y);\n\tvec2 gp = vec2(a.z-c.z,b.z-d.z); // pressure gradient\n    float biomass =abs( a.w + b.w +  c.w + d.w + a.z + b.z + c.z + d.z); // abs converts to positive\n  \n    // GENESIS\n    if (abs(pressure) > 5.99) {\n    \tpopulation -= 1.1;\n    }\n\n    // support mouse clicks \n    float mouseX = iMouse.x;\n    float mouseY = iMouse.y;\n    float mouseZ = iMouse.z;\n    float mouseW = iMouse.w;\n    \n    //float food = a.z + b.z + c.z + d.z;\n    float food = a.r + b.g+ c.z + d.z;\n    if ( food < 0.10 ) {\n     \tpressure = 0.;   \n     \tpopulation = 0.;   \n     \tdirection.x = 0.;   \n     \tdirection.y = 0.;  \n        amoeba.z = 0.;\n    }\n    \n  vec2  uv = (fragCoord.xy / iResolution.xy);\n  vec4  m  = iMouse / iResolution.xyxy;\n  float m0 = 0.;//(m.z > 0.0) ? 0.1 : 0.2;\n  float m1 = smoothbump(abs(m.z),0.1,uv.x) *\n             smoothbump(abs(m.w),0.1,uv.y);\n  float m2 = smoothbump(m.x,0.05,uv.x) *\n             smoothbump(m.y,0.05,uv.y);\n\t\tvec4 mouseClick = vec4(m1,m1,0.,0.5);\n\n    \n    \n   // tomachiAmp *= m1+m0+m2;\n    \n    if (iFrame < 400) {\n//population += 0.5;\n       //emit(left, vec2(10.));\n\n    }\n    \n    \n   // fragColor = vec4(population);\n    \n   \t//emit(uv,m.z);\n    fragColor = vec4(\n    \tdirection.x,\n    \tdirection.y,\n    \tpressure,\n    \therb.z\n    );\n    \n   fragColor = vec4(abs(amoeba*0.1)) + (vec4(pressure, herb.z,herb.x,1.)*0.1);\n  //  fragColor = vec4(abs(pressure) +m1, 0., 0.25, 0.);\n   // fragColor = vec4(m1, m2, m0, 0.);\n\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}