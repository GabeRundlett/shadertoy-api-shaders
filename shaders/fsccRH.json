{
    "Shader": {
        "info": {
            "date": "1653017004",
            "description": "4-dimensional version of Mandelbulb\nThis shader shows the 3d XYZ slices of the 4D Mandelbulb.",
            "flags": 0,
            "hasliked": 0,
            "id": "fsccRH",
            "likes": 5,
            "name": "4D Mandelbulb",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal",
                "mandelbrot",
                "mandelbulb",
                "4d"
            ],
            "usePreview": 0,
            "username": "Fraktoler",
            "viewed": 440
        },
        "renderpass": [
            {
                "code": "#define MAX_ITER 10\n#define MAX_STEPS 100\n#define MAX_DIST 8.\n#define MIN_DIST .0001\n#define EPSILON .0001\n\n//3 dimensional rotations\n\nvec3 rotate(vec3 p, vec3 rot) {\n    vec2 v = mulComplex(p.yz, cis(rot.x));\n    vec3 p_prime = vec3(p.x, v.xy);\n    v = mulComplex(p_prime.xz, cis(rot.y));\n    p_prime = vec3(v.x, p_prime.y, v.y);\n    v = mulComplex(p_prime.xy, cis(rot.z));\n    p_prime = vec3(v.xy, p_prime.z);\n    return p_prime;\n}\n\n//4 dimensional rotations\n\nvec4 rotateXY(vec4 p, float rot) {\n    mat4 rotXY = mat4(\n    cos(rot), -sin(rot), 0.0, 0.0,\n    sin(rot), cos(rot), 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 1.0\n    );\n    return rotXY * p;\n}\n\nvec4 rotateXZ(vec4 p, float rot) {\n    mat4 rotXZ = mat4(\n    cos(rot), 0.0, -sin(rot), 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    sin(rot), 0.0, cos(rot), 0.0,\n    0.0, 0.0, 0.0, 1.0\n    );\n    return rotXZ * p;\n}\n\nvec4 rotateZW(vec4 p, float rot) {\n    mat4 rotZW = mat4(\n    1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, cos(rot), -sin(rot),\n    0.0, 0.0, sin(rot), cos(rot)\n    );\n    return rotZW * p;\n}\n\n\nvec4 toSpherical(vec4 z) {\n    float r = length(z);\n    return vec4(r, acos(z.wz / vec2(r, length(z.xyz))), atan(z.y, z.x));//2.0 * atan(z.x / (z.y + length(z.xy))));\n}\n\nvec4 toCartesian(vec4 z) {\n    return z.x * vec4(cos(z.y), sin(z.y) * vec3(cos(z.z), sin(z.z) * cis(z.w)));\n}\n\nfloat DE(vec3 v) {\n    vec4 c = vec4(v, sin(iTime * 0.25));\n    vec4 z = toSpherical(c);\n    float power = 8.0;\n    float bailout = 2.0;\n    float dr = 1.0;\n    float r = 0.0;\n    for (int k = 0; k < MAX_ITER; k++) {\n\t\tif (z.x > bailout) break;\n\t\tdr = power * pow(z.x, power - 1.0) * dr + 1.0;\t\t\n\t\tz = toCartesian(vec4(pow(z.x, power), power * z.yzw)) + c;\n        z = toSpherical(z);\n    }\n    return 0.5 * log(z.x) * z.x / dr;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.0;    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = DE(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<MIN_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 normalVector(vec3 p) {\n\tfloat d = DE(p);\n    vec2 e = vec2(EPSILON, 0);\n    \n    vec3 n = d - vec3(\n        DE(p-e.xyy),\n        DE(p-e.yxy),\n        DE(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat lighting(vec3 p) {\n    vec3 lightPos = vec3(0.0, -5.0, 5.0);\n    //lightPos = rotate(lightPos, vec3(-0.5, 0., -iTime / 5.));\n    vec3 l = normalize(lightPos - p);\n    vec3 n = normalVector(p);\n    \n    float dif = clamp(dot(n, l), 0.0, 1.0);\n    float d = RayMarch(p + n * MIN_DIST * 2.0, l);\n    //if(d < length(lightPos - p)) dif *= .1;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = 1.5;\n    vec2 uv = zoom * (fragCoord - 0.5 * iResolution.xy) / iResolution.x;\n    \n    //vec3 rot = vec3(-0.5, 0.0, -iTime / 5.);\n    vec3 ro = vec3(0.0, -3.0, 0.0);\n    //ro = rotate(ro, rot);\n    vec3 rd = normalize(vec3(uv.x, 1.0, uv.y));\n    //rd = rotate(rd, rot);\n\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = lighting(p);\n    vec3 col = vec3(dif);\n    \n    col = pow(col, vec3(0.45));\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Complex (C) functions\nvec2 cis(float theta) {\n    return vec2(cos(theta), sin(theta));\n}\n\nvec2 mulComplex(vec2 z, vec2 w) {\n    return z.x * w + z.y * vec2(-w.y, w.x);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}