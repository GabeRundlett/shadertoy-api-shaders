{
    "Shader": {
        "info": {
            "date": "1697550565",
            "description": "I was working on something else but to test the randomness I started to create these metaballs",
            "flags": 0,
            "hasliked": 0,
            "id": "ddtBzl",
            "likes": 2,
            "name": "Metaballs V2",
            "published": 3,
            "tags": [
                "metaballs",
                "colorful",
                "random"
            ],
            "usePreview": 0,
            "username": "MrNissenDK",
            "viewed": 236
        },
        "renderpass": [
            {
                "code": "#define numOfPoints 30\n#define seed (35487457)\n#define a (1103515245)\n#define c (12345)\n#define m (1<<31)\nfloat rand(int i) {\n    uint ui = uint(i);\n    uint ua = uint(a);\n    uint uc = uint(c);\n    uint useed = uint(seed);\n    ui += ua + useed;\n    float v = float(ua * ui + uc + useed + useed);\n    if (v == 0.) v = 1.;\n    return abs(float(ui) / v);\n}\nfloat rand(float i) {\n    float k = i;\n    if (i == 0.) k = 1.;\n    int i2 = int(i * 10000.0 + 500. / k);\n    return (rand(int(i)) + rand(i2)) / 2.0;\n}\nvec3 hash23(vec2 src) {\n    vec3 randV = vec3(rand(src.x), rand(src.y), rand(src.x * src.y + src.x + src.y + 8912.2793));\n    randV += dot(randV, randV+vec3(3799.6274,9567.3518,8575.2724));\n    \n    return fract(randV);\n}\nvec2 hash32(vec3 src) {\n    vec2 randV = vec2(rand(src.x), rand(src.y)) + vec2(rand(src.z), rand(src.z + 9463.9522));\n    randV += dot(randV, randV+vec2(8183.0119,4912.9833));\n    \n    return fract(randV);\n}\nfloat d(vec2 p0, vec2 p1) {\n    return sqrt(pow(p0.x - p1.x, 2.0) + pow(p0.y - p1.y, 2.0));\n}\n\nvec2 closest(vec2 points[numOfPoints], vec2 pos) {\n    int current = 0;\n    float l = d(pos, points[0]);\n    for(int i = 1; i < numOfPoints; i++) {\n        float nLen = d(pos, points[i]);\n        if( l < nLen ) {\n            l = nLen;\n            current = i;\n        }\n    }\n    return points[current];\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = ((fragCoord - .5 * iResolution.xy) / iResolution.y);\n    \n    \n    // Time varying pixel color\n    vec3 col = vec3(0);//hash23(fragCoord);\n    for(int i = 0; i < numOfPoints; i++) {\n        vec2 pointBase = vec2(float(i) + 6939.9375, float(numOfPoints - i) + 539.2171);\n        float time = iTime / 5.;\n        float t = fract(time);\n        vec2 prev = hash32(vec3(pointBase, floor(time)));\n        vec2 next = hash32(vec3(pointBase, ceil(time)));\n        vec2 point = (prev + ((next - prev) * t)) * iResolution.xy;\n        float dist = d(point, fragCoord);\n        \n        vec3 col1 = hash23(prev);\n        vec3 col2 = hash23(next);\n        \n        if(dist < 100.) col += (col1 + ((col2 - col1) * t))  * smoothstep(1., 0., dist / 100.);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}