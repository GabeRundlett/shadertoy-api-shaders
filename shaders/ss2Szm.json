{
    "Shader": {
        "info": {
            "date": "1619960548",
            "description": "License CC0: Sunday threads\nResult after a bit of random coding on sunday afternoon\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ss2Szm",
            "likes": 33,
            "name": "Sunday Threads",
            "published": 3,
            "tags": [
                "3d",
                "raymarching"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 804
        },
        "renderpass": [
            {
                "code": "// License CC0: Sunday threads\n// Result after a bit of random coding on sunday afternoon\n\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define TIME            iTime\n#define RESOLUTION      iResolution\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PCOS(a)         (0.5+0.5*cos(a))\n\n#define TOLERANCE       0.00001\n#define MAX_RAY_LENGTH  10.0\n#define MAX_RAY_MARCHES 60\n#define NORM_OFF        0.001\n\n#define PATHA vec2(0.1147, 0.2093)\n#define PATHB vec2(13.0, 3.0)\n\nconst mat2 rot0             = ROT(0.0);\nconst vec3 std_gamma        = vec3(2.2);\n\nmat2  g_rot  = rot0;\nfloat g_hit  = 0.0;\n\nfloat hash(float x) {\n  return fract(sin(x*12.9898) * 13758.5453);\n}\n\n// From https://www.shadertoy.com/view/XdcfR8\nvec3 cam_path(float z) {\n  return vec3(sin(z*PATHA)*PATHB, z);\n}\n\nvec3 dcam_path(float z) {\n  return vec3(PATHA*PATHB*cos(PATHA*z), 1.0);\n}\n\nvec3 ddcam_path(float z) {\n  return vec3(-PATHA*PATHA*PATHB*sin(PATHA*z), 0.0);\n}\n\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// From: http://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\n// From: https://stackoverflow.com/a/17897228/418488\nvec3 hsv2rgb(vec3 c) {\n  const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 postProcess(vec3 col, vec2 q) {\n  col = clamp(col, 0.0, 1.0);\n  col = pow(col, 1.0/std_gamma);\n  col = col*0.6+0.4*col*col*(3.0-2.0*col);\n  col = mix(col, vec3(dot(col, vec3(0.33))), -0.4);\n  col *=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);\n  return col;\n}\n\nfloat df(vec3 p) {\n  vec3 cam = cam_path(p.z);\n  vec3 dcam = normalize(dcam_path(p.z));\n  p.xy -= cam.xy;\n  p -= dcam*dot(vec3(p.xy, 0), dcam)*0.5*vec3(1,1,-1);\n\n  float dc = length(p.xy) - 0.5;\n  vec2 p2 = p.xy;\n  mat2 rr = ROT(p.z*0.5);\n  p2      *= rr;\n  rr      *= g_rot;\n  \n  float d = 1E6;\n\n  const float ss = 0.45;\n  const float oo = 0.125;\n  float s = 1.0;\n\n  vec2 np = mod2(p2, vec2(0.75));\n  float hit = 0.0;\n  float qs  = 0.5; \n  const int max_iter = 3;\n  for (int i = 0; i < max_iter; ++i) {\n    vec2 sp2 = sign(p2);\n    hit += qs*(3.0 + sp2.x + 2.0*sp2.y)/8.0;\n    p2 = abs(p2);\n    p2 -= oo*s;\n    float dp = length(p2) - 0.75*ss*oo*s;\n//    d = max(d, -(dp-0.1*s));\n    if (dp < d) {\n      d = dp;\n      g_hit = hit+np.x+10.0*np.y;\n    }\n    s  *= ss;\n    rr  = transpose(rr);\n    p2 *= rr;\n    qs *= 0.5;\n  }\n  return max(d, -dc);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, out int iter) {\n  float t = 0.0;\n  int i = 0;\n  for (i = 0; i < MAX_RAY_MARCHES; i++) {\n    float d = df(ro + rd*t);\n    if (d < TOLERANCE || t > MAX_RAY_LENGTH) break;\n    t += d;\n  }\n  iter = i;\n  return t;\n}\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nfloat softShadow(vec3 pos, vec3 ld, float ll, float mint, float k) {\n  const float minShadow = 0.25;\n  float res = 1.0;\n  float t = mint;\n  for (int i=0; i<24; i++) {\n    float d = df(pos + ld*t);\n    res = min(res, k*d/t);\n    if (ll <= t) break;\n    if(res <= minShadow) break;\n    t += max(mint*0.2, d);\n  }\n  return clamp(res,minShadow,1.0);\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n  vec3 lightPos = cam_path(ro.z+0.85);\n  float alpha   = 0.05*TIME;\n  \n  const vec3 skyCol = vec3(0.0);\n\n  int iter    = 0;\n  g_hit       = 0.0;\n  float t     = rayMarch(ro, rd, iter);\n  float hit   = g_hit;\n  float r     = hash(hit+123.4);\n\n  if (t >= MAX_RAY_LENGTH) {\n    return vec3(0.0);\n  }\n\n  vec3 pos    = ro + t*rd;\n  vec3 nor    = normal(pos);\n  vec3 refl   = reflect(rd, nor);\n\n  float ifade= 1.0-tanh_approx(1.25*float(iter)/float(MAX_RAY_MARCHES));\n  float aa   = 10.0*pos.z-6.0*TIME*fract(113.0*r);\n  float band = smoothstep(0.9, 0.92, PCOS(aa));\n  vec3 hsv   = (vec3(fract(-0.25+0.25*r+0.025*pos.z), (1.0-ifade), mix(0.125, 2.0, band)));\n  vec3 color = hsv2rgb(hsv);\n\n  vec3 lv   = lightPos - pos;\n  float ll2 = dot(lv, lv);\n  float ll  = sqrt(ll2);\n  vec3 ld   = lv / ll;\n  float sha = softShadow(pos, ld, ll*0.95, 0.01, 16.0);\n\n  float dm  = .5/ll2;\n  float dif = max(dot(nor,ld),0.0)*(dm+0.05);\n  float spe = pow(max(dot(refl, ld), 0.), 20.);\n  float l   = dif*sha;\n\n  vec3 col = l*color + spe*sha;\n\n  return col*ifade;\n}\n\nvec3 effect3d(vec2 p, vec2 q) {\n  float z   = TIME;\n  g_rot     = ROT(0.25*TIME); \n  vec3 cam  = cam_path(z);\n  vec3 dcam = dcam_path(z);\n  vec3 ddcam= ddcam_path(z);\n  \n  vec3 ro = cam;\n  vec3 ww = normalize(dcam);\n  vec3 uu = normalize(cross(vec3(0.0,1.0,0.0)+ddcam*2.0, ww ));\n  vec3 vv = normalize(cross(ww,uu));\n  vec3 rd = normalize( p.x*uu + p.y*vv + 2.5*ww );\n\n  return render(ro, rd);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect3d(p, q);\n\n  col = postProcess(col, q);\n\n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}