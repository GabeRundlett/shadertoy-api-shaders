{
    "Shader": {
        "info": {
            "date": "1700954419",
            "description": "debugging hexagon functions, still buggy",
            "flags": 0,
            "hasliked": 0,
            "id": "ltc3Dr",
            "likes": 2,
            "name": "HexDebug",
            "published": 3,
            "tags": [
                "hexagon",
                "debug"
            ],
            "usePreview": 0,
            "username": "jherico",
            "viewed": 135
        },
        "renderpass": [
            {
                "code": "\n\nconst vec3 DARKGREY = vec3(0.1);\nconst vec3 LIGHTGREY = vec3(0.2);\nconst vec3 WHITE = vec3(1);\nconst vec3 AMBER = vec3(1, 0.49, 0);\nconst vec3 TRON_BLUE = vec3(0.1, 0.5, 0.8);\n\nconst vec3 HEX_BORDER = LIGHTGREY;\nconst vec3 HEX_BODY = DARKGREY;\nconst vec3 HAZE = LIGHTGREY;\nconst float HEX_SIZE = 18.0;\n\nivec3 cube_round(vec3 h) {\n    vec3 r = floor(h + 0.5);\n    vec3 diff = abs(r - h);\n    if (diff.x > diff.y && diff.x > diff.z) {\n        r.x = -r.y - r.z;\n    } else if (diff.y > diff.z) {\n        r.y = -r.x - r.z;\n    } else {\n        r.z = -r.x - r.y;\n    }\n    return ivec3(int(r.x), int(r.y), int(r.z));\n}\n\nfloat cube_distance(ivec3 a, ivec3 b) {\n    vec3 ab = abs(vec3(a) - vec3(b));\n    \n    return max(max(ab.x, ab.y), ab.z);\n}\n        \nivec2 cube_to_hex(ivec3 c) {\n    return c.xy;\n}\n\nivec3 hex_to_cube(ivec2 h) {\n    return ivec3(h.x, h.y, -h.x - h.y);\n}\n\nvec3 hex_to_cube(vec2 h) {\n    return vec3(h.x, h.y, -h.x - h.y);\n}\n\nivec2 hex_round(vec2 h) {\n    return cube_to_hex(cube_round(hex_to_cube(h)));\n}\n\nivec2 pixel_to_hex(in vec2 pixel) {\n    const vec2 PIXEL_TO_HEX_CONST = vec2(sqrt(3.0), 2.0) / 3.0;\n    vec2 result = PIXEL_TO_HEX_CONST * pixel;\n    result.x -= pixel.y / 3.0;\n    \n    return hex_round(result);\n}\n\nvec2 hex_to_pixel(in ivec2 hex2)  {\n    vec2 hex = vec2(hex2);\n    return vec2(sqrt(3.0) * (hex.x + hex.y/2.0), 1.5 * hex.y);\n}\n\nvec2 hex_center(in vec2 pixel) {\n    return hex_to_pixel(pixel_to_hex(pixel));\n}\n\nfloat point_line_distance(vec2 slope, vec2 p)\n{\n  vec2 normal = vec2(-slope.y, slope.x);\n  return abs(dot(normalize(normal), p));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 col = DARKGREY;\n\n    vec2 xy = 1.0 - 2.0 * fragCoord.xy/iResolution.xy;\n    xy *= HEX_SIZE;\n    xy.y /= iResolution.x / iResolution.y;\n    vec2 mousexy = 1.0 - 2.0 * iMouse.xy/iResolution.xy;\n    mousexy.y /=  iResolution.x / iResolution.y;\n    mousexy *= HEX_SIZE;\n\n    \n    float lineDist = point_line_distance(mousexy, xy);\n    if (lineDist < 0.03) {\n        fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    \n    col = mix(col, vec3(1.0, 0.0, 0.0), smoothstep(0.05, 0.03, lineDist));\n    \n    ivec2 hex = pixel_to_hex(xy);\n    vec2 hexCenter = hex_to_pixel(hex);\n    \n    \n    ivec2 origin = ivec2(0);\n    if (hex == origin) {\n        fragColor = vec4(0.0, 1.0, 1.0, 1.0);\n        return;\n    }\n\n    ivec2 mousehex = pixel_to_hex(mousexy);\n    ivec3 cur = hex_to_cube(hex);\n    ivec3 a = hex_to_cube(origin);\n    ivec3 b = hex_to_cube(mousehex);\n\n    if (cur == b) {\n        fragColor = vec4(0.0, 0.0, 1.0, 1.0);\n        return;\n    }\n    \n    \n    float cubedist = floor(cube_distance(a, b));\n    for (float i = 0.0; i < 10000.0; i += 0.01) {\n        if (i > cubedist) {\n            break;\n        }\n        float mixAmount = i / cubedist;\n        ivec3 testCube = cube_round(mix(vec3(a), vec3(b), mixAmount));\n        ivec2 testHex = cube_to_hex(testCube);\n        if (hex == testHex) {\n            fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n            return;\n        }\n    }\n\n    vec2 hexPos = hex_to_pixel(hex.xy);\n    float dist = length(xy - hexPos);\n    if (dist < 0.3) {\n        col = vec3(1.0, 0.0, 1.0);\n    }\n    // gamma\n\t//col = pow(col,vec3(0.4545));\n\n    // vignetting\t\n\t//col *= 0.5 + 0.5*pow( (xy.x+1.0)*(xy.y+1.0)*(xy.x-1.0)*(xy.y-1.0), 0.1 );\n\t\n    #ifdef STEREO\t\n    //col *= vec3( isCyan, 1.0-isCyan, 1.0-isCyan );\t\n\t#endif\n\t\n\tfragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}