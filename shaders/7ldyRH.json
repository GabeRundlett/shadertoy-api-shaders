{
    "Shader": {
        "info": {
            "date": "1659294232",
            "description": "inspired by reference:  https://twitter.com/kineticgraphics/status/1537861671296741376",
            "flags": 0,
            "hasliked": 0,
            "id": "7ldyRH",
            "likes": 28,
            "name": "infinite nested block",
            "published": 3,
            "tags": [
                "raymarching",
                "short",
                "reproduction"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 405
        },
        "renderpass": [
            {
                "code": "#define rot(a)       mat2(cos(a+vec4(0,-1.57,1.57,0)))     // rotation \n#define C(q)         max( q.x, max(q.y,q.z) )\n#define B(d,y,k,p)   r = abs( q+ vec3(6, y, 2.+4.*min(d,T-k)).p ), t = min(t, C(r) -2. )  \n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9., T = mod(iTime,8.); \n    vec3  R = iResolution,\n          D = normalize(vec3(U+U, -4.*R.y) - R),           // ray direction\n          p = vec3(0,0,20), q, r,                          // marching point along ray \n          M = iMouse.z > 0. ? .5*(iMouse.xyz/R -.5)\n              :  0.*vec3( 10,4,0)/1e2 * cos(iTime + vec3(0,11,0)); \n    p *= exp2(-T/8.);                                      // zoom\n    for (O=vec4(1); O.x > 0. && t > .01; O-=.01)           // march scene\n        q = p,\n        q.xy *= rot(.5*iTime),\n        q.yz *= rot(.78-6.*M.y),                           // rotations\n        q.xz *= rot(.78-6.*M.x), \n        t = C(q),                                          // main cube\n     // a = 8.-abs(q), t = max(t, -C(-a) ),                // hollow cube\n        t = max(t, -C(-8.-q)),                             // pyBlob simplif\n        B(1.,6.,2.,xyz),                                   // flying bricks\n        B(0.,6.,3.,yzx), \n        B(0.,6.,4.,zxy), \n        B(0.,6.,5.,xyz), \n        B(0.,2.,6.,yzx), \n        B(0.,2.,7.,zxy), \n        B(0.,2.,8.,xyz), \n        p += .5*t*D;                                       // step forward = dist to obj          \n\n // O = texture(iChannel0, .1*(t==q.x||t==a.x ? q.yz : t==q.y||t==a.y ? q.xz : q.xy) ).rrrr;\n // O *= t==q.x||t==a.x ? .5 : t==q.y||t==a.y ? .7 : 1.;\n    O *= O * 1.5 *exp2(-fract(T/8.)/5.) ;\n}\n\n\n\n\n\n/** // --- version adapted from pyBlob fixes. https://www.shadertoy.com/view/NtdyRN\n    // but restoring the block speed ( del 5.* in B() ) breaks the luminance continuity\n    // plus the faces are \"too identical\" while for strange reason it wasn't the case before. \n\n\n#define rot(a)       mat2(cos(a+vec4(0,-1.57,1.57,0)))     // rotation \n#define C(q)         max( q.x, max(q.y,q.z) )\n#define B(d,y,k,p)   r = abs( q+ vec3(6, y, 2.+4.*min(d,5.*(T-k))).p ), t = min(t, C(r) -2. )  \n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9., T = mod(iTime,8.); \n    vec3  R = iResolution,\n          D = normalize(vec3(U+U, -4.*R.y) - R),           // ray direction\n          p = vec3(11.5), q, a, r,                         // marching point along ray\n          M = iMouse.z > 0. ? .5*(iMouse.xyz/R -.5)\n              :  0.*vec3( 10,4,0)/1e2 * cos(iTime + vec3(0,11,0)); \n    p *= exp2(-T/8.);                                      // zoom\n    D.xy *= rot(.5*iTime),\n    D.yz *= rot(-.6*M.y+.60),                              // rotations\n    D.xz *= rot(-.6*M.x+.78); \n    for\n      ( O=vec4(1)\n      ; O.x > 0. &&  t > .01 * exp2(-T/8.) // adjust cutoff for \"t\" based on zoom (depending on chosen ray origin, best factor may vary between 7..8)\n      ; O-=.01\n      )                                                    // march scene\n        q = p,\n      //t = C(q), a = 8.-abs(q), t = max(t, -C(-a) ),      // hollow cube\n        a = q + 8. * step(q, min(q.yzx, q.zxy)), t = C(a), // corner sdf\n        B(1.,6.,2.,xyz),                                   // flying bricks\n        B(0.,6.,3.,yzx), \n        B(0.,6.,4.,zxy), \n        B(0.,6.,5.,xyz), \n        B(0.,2.,6.,yzx), \n        B(0.,2.,7.,zxy), \n        B(0.,2.,8.,xyz),\n        p += .5*t*D;                                       // step forward = dist to obj          \n\n // O = texture(iChannel0, .1*(t==q.x||t==a.x ? q.yz : t==q.y||t==a.y ? q.xz : q.xy) ).rrrr;\n // O *= t==q.x||t==a.x ? .5 : t==q.y||t==a.y ? .7 : 1.;\n    O *= O*O*1.7;\n // O = 1.9*exp(-4.*(1.-O));\n}\n\n/**/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}