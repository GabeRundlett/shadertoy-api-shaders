{
    "Shader": {
        "info": {
            "date": "1639874864",
            "description": "Somthing I made on bonzomatic originally as a training for live shader showdown.\nCode is not cleaned at all !",
            "flags": 4,
            "hasliked": 0,
            "id": "NtK3Rc",
            "likes": 5,
            "name": "CubesLive",
            "published": 3,
            "tags": [
                "zefzef"
            ],
            "usePreview": 1,
            "username": "z0rg",
            "viewed": 522
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat _time;\n#define FFT(a) pow(sat(texture(iChannel0, vec2(a,0.)).x*100.),1.)\n\n#define sat(a) clamp(a, 0., 1.)\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\nfloat _cube(vec3 p, vec3 s)\n{\n  s.xz -= (sin(p.y*20.)*.2+.8)*.05;\n  vec3 l = abs(p)-s;\n  return max(l.x, max(l.y, l.z));\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n  if (a.x < b.x)\n    return a;\n  return b;\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n  vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n  vec3 defr = r;\n  defr.xy *= r2d(uv.y*10.);\n  r = mix(r, defr, sin(_time));\n  vec3 u = normalize(cross(rd, r));\n  return normalize(rd+(r*uv.x+u*uv.y)*(asin(sin(_time))*.2+.8));\n}\nvec2 map(vec3 p)\n{\n  p.y = -abs(p.y);\n  vec3 vp = p;\n  vec2 acc = vec2(1000.,-1.);\n  \n  float rep = 0.4;\n  float w = .1;\n  //p.y = texture(tex\n  p.xz *= r2d(sin(p.y+_time)*.2);\n  vec2 idx = floor((p.xz+rep*.5)/rep);\n  p.xz = mod(p.xz+rep*.5,rep)-rep*.5;\n  float cubes = _cube(p, vec3(w, 1.+FFT(length(idx)*.2), w));\n  \n  float repv = .3*length(idx);\n  vp.y = mod(vp.y+repv*.5-_time*length(idx)*.15,repv)-repv*.5;\n  cubes = max(cubes, _cube(vp, vec3(10.,.1,10.)));\n  \n  acc = _min(acc, vec2(cubes, floor(length(idx)+_time)));\n  \n  //acc = _min(acc, vec2(-p.y, 0.));\n  \n  \n  \n  return acc;\n}\nvec3 getNorm(vec3 p, float d)\n{\n  vec2 e = vec2(0.01,0.);\n  return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n  return normalize(cross(dFdx(p), dFdy(p)));\n}\n\n\nfloat accAO;\nvec3 accCol2;\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n  accAO = 0.;\n  accCol2 = vec3(0.);\n  vec3 p = ro;\n  for (int i = 0; i < steps; ++i)\n  {\n    vec2 res = map(p);\n    if (res.x < 0.01)\n      return vec3(res.x, distance(p, ro), res.y);\n    accAO += sat(res.x/0.01)*.002;\n    accCol2 += vec3(sin(p.x+_time*10.)*.2+.5,.2,.5)*pow(sat(res.x/.05),1.)*.01;\n    p+=rd*res.x*.15;\n  }\n  return vec3(-1.);\n}\n\nvec3 rdr(vec2 uv)\n{\n  vec3 col = vec3(0.);\n \n  float dist = 5.;\n  vec3 ro = vec3(sin(_time*.33)*dist,-5.*sin(_time*.1),cos(_time*.25)*dist);\n  vec3 ta = vec3(0.,0.,0.);\n  vec3 rd = normalize(ta-ro);\n  \n  rd = getCam(rd, uv);\n  vec3 res = trace(ro, rd, 512);\n  if (res.y > 0.)\n  {\n    vec3 p = ro +rd*res.y;\n    vec3 n = getNorm(p, res.x);\n    col = n*.5+.5;\n    float fade = 1.;//(1.-sat((length(p.xz)-sin(_time+length(p.xz)))*1.));\n    vec3 ldir = normalize(vec3(1.,1.,1.));\n    col = vec3(1.)*pow(sat(-dot(n, normalize(ldir+rd))),.8)\n    +vec3(.3,.25,.25);\n    col *= fade;\n    col = 1.-col;\n    float ffti = _time;//texture(texFFTIntegrated, length(p.xz)*.1+_time).x*0.1;\n    if (dot(n, vec3(0.,1.,0.)) < -0.5 && p.y < -0.1)\n      col = vec3(sin(res.z)*.5+.5, .3, sin(res.z*10.)*.2+.8)*sat(sin(length(p.xz)*5.-_time*10.))*1.5;\n    col *= 1.-accAO;\n    col += accCol2;\n  }\n  \n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy -.5*iResolution.xy)/iResolution.xx;\n  _time = iTime+texture(iChannel1, fragCoord.xy/8.).x*1.*sat(length(uv));\n  //uv *= r2d(texture(texFFTIntegrated, 1.).x*.25);\n  vec3 col = rdr(uv);\n  col.xy *= r2d(_time);\n  col.xy = .2+.8*abs(col.xy);\n  fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}