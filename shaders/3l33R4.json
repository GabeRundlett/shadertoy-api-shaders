{
    "Shader": {
        "info": {
            "date": "1575676836",
            "description": "Too bright to look at?\nUsing [url=https://www.shadertoy.com/view/Wtt3R8]Hue-correct saturation[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "3l33R4",
            "likes": 14,
            "name": "saturation demo - bloom",
            "published": 3,
            "tags": [
                "color",
                "postprocess",
                "hdr"
            ],
            "usePreview": 1,
            "username": "ttg",
            "viewed": 928
        },
        "renderpass": [
            {
                "code": "const vec3 msat = vec3(.3,.3,.3);\nconst float msdiv = .12;\nvec3 saturate( vec3 v ) {\n  // https://www.shadertoy.com/view/Wtt3R8\n  float sv = dot(v,msat);\n  vec3 hs = v/sv*msdiv;\n  float ls = (1.-exp(-sv))*.9;\n  float s = 1.-exp(-sv*sv/10.);\n  vec3 hs2 = mix(hs,vec3(1),s);\n  return ls*hs2/mix(msdiv,1.,s);\n}\n\nvec3 image( sampler2D chan, vec2 uv, vec3 gain )\n{\n  vec3 v = 1.*pow(texelFetch(chan, ivec2(uv*iResolution.xy), 0).rgb,vec3(2.2));\n  v+=.1*old_bloom(chan, iResolution.y/100., ivec2(uv*iResolution.xy)).rgb;\n  //v=imgbloom(chan, iResolution.xy, iResolution.y/100., uv*iResolution.xy).rgb;\n  v*=gain;\n  if (iMouse.z>0.) return v;\n  return saturate(v);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 v = image(iChannel0, uv, vec3(1));\n\n    fragColor = vec4(pow(v,vec3(1./2.2)),1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.yy;\n    vec2 m  = (iMouse.xy-iResolution.xy*.5)/iResolution.yy;\n    //vec3 v = vec3(length(uv-m)<.01);\n    //v=.001*vec3(ivec2(fragCoord.xy)==ivec2(iResolution.xy/2.))*pow(iResolution.y,2.);\n    vec3 v = texture(iChannel0, uv/2.).rrr;\n    //v=texelFetch(iChannel0, ivec2(fragCoord), 0).rrr;\n    //v *= vec3(.1,.2,20.).brg/10.;\n    vec3 r = pow(.5+.5*sin(uv.x*3.+2.1*vec3(0,1,2)),vec3(1.9));//*.2/vec3(.2126,.7152,.0722);\n    v*=r*5.;\n    v*=.5+.4*sin(uv.y+uv.x+iTime);\n    fragColor = vec4(v,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 old_bloom(sampler2D samp, float rmin, ivec2 i) {\n  const int levels = 6;\n  float scale = sqrt(rmin)/2.;\n  scale = max(1.,scale);\n  int lmin=max(0,int(log2(scale)));\n  float r = ((scale/float(1<<lmin)))*2.;\n  const int ri = 5;\n  vec4 tsum = vec4(0.);\n  for (int l=lmin; l<lmin+levels; l++) {\n    for (int ix=-ri;ix<=ri;ix++) {\n      for (int iy=-ri;iy<=ri;iy++) {\n        ivec2 si = (i>>l)+ivec2(ix,iy);\n        vec2 u = vec2((si<<l)-i)*exp2(-float(l))+vec2(.25,.5);\n        float w = exp(-sqrt(dot(u,u)/(r*r)));\n        tsum+=w*texelFetch(samp, si, l)*exp2(float(l)*-0.5);\n      }\n    }\n  }\n  return tsum/(r)/16.;\n}\n\nfloat kernel(float x) {\n  return   abs(x) < 1.88 ? exp(-.5*x*x/1.4) :\n           abs(x) > 6. ? 1.35/abs(x*x*x) :\n           ( exp(-.5*x*x/1.4) + 2.7/abs(x*x*x) )/2.;\n}\n\nvec4 imgbloom(sampler2D samp, vec2 R, float scale, vec2 f) {\n  vec4 v = vec4(0.);\n  const float nseg=8.;\n  const float nrad=14.;\n  for (float i=0.;i<nseg;i++) {\n    vec2 A = cos(6.2831855*(i/nseg+vec2(0.,.25)));\n    for (float j=0.;j<nrad;j++) {\n      float r = exp(j*.5)/nseg;\n      float d = r*6.28/nseg;\n      float l = log2(d);\n      float w = kernel(r/scale);\n      vec2 S = f+r*A;\n      // S+=vec2(0.,0.)*exp2(l);\n      v+=w*textureLod(samp, S/R, l+1.);\n    }   \n  }\n  return v*.04;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}