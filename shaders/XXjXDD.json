{
    "Shader": {
        "info": {
            "date": "1710616951",
            "description": "experimenting with ways of rendering patterns based on hypocycloids",
            "flags": 0,
            "hasliked": 0,
            "id": "XXjXDD",
            "likes": 5,
            "name": "groovy hypocycloid",
            "published": 3,
            "tags": [
                "2d",
                "outline",
                "hypocycloid"
            ],
            "usePreview": 0,
            "username": "piefayth",
            "viewed": 140
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159\n\nconst int touchpointAmount = 3;\nconst int touchpointOffset = 0;\nconst int layers = 13; \nconst float largestRadius = 0.5;\nconst float rollingRadiusRatio = 1. / 16.;\nconst float thickness = 0.005;\nconst float outlineThickness = 0.003;\nconst float aaEdgeWidth = 0.0015;\nconst vec3 outlineColor = vec3(0., 0., 0.);\n\nvec3 palette(float t) {\n    vec3 a = vec3(0.9, 0.5, 0.3);\n    vec3 b = vec3(0.5, 0.2, 0.2);\n    vec3 c = vec3(1.0, 0.7, 0.4);\n    vec3 d = vec3(0.1, 0.2, 0.3);\n\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nfloat distanceToLine(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\nfloat antialiasSDF(float sdfValue, float edgeWidth) {\n    return smoothstep(-edgeWidth, edgeWidth, sdfValue);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n\n\n    vec3 color = vec3(0.);\n    float anyLine = 0.0;\n\n    for(int layer = 0; layer < layers; ++layer) {\n        float guideRadius = (float(layer) + 1.0) * (largestRadius / float(layers));\n        float rollingRadius = guideRadius * rollingRadiusRatio;\n        float fixedPointRadius = sin(iTime * 0.75) * 0.75;\n        int calculatedTouchpoints = touchpointAmount * int(1.0 / rollingRadiusRatio) + touchpointOffset;\n        \n        float t = 0.0;\n        float x = (guideRadius - rollingRadius) * cos(t) + fixedPointRadius * cos(((guideRadius - rollingRadius) / rollingRadius) * t);\n        float y = (guideRadius - rollingRadius) * sin(t) - fixedPointRadius * sin(((guideRadius - rollingRadius) / rollingRadius) * t);\n        vec2 currentPos = vec2(x, y);\n        vec2 prevPos = vec2(x, y); \n    \n        float minDist = 1.0; \n        for(int i = 1; i <= calculatedTouchpoints; ++i) {\n            t = 2.0 * PI * float(i) / float(calculatedTouchpoints);\n            x = (guideRadius - rollingRadius) * cos(t) + fixedPointRadius * cos(((guideRadius - rollingRadius) / rollingRadius) * t);\n            y = (guideRadius - rollingRadius) * sin(t) - fixedPointRadius * sin(((guideRadius - rollingRadius) / rollingRadius) * t);\n            currentPos = vec2(x, y);\n\n            float dist = distanceToLine(uv, prevPos, currentPos);\n            if (dist < minDist) {\n                minDist = dist;\n            }\n            prevPos = currentPos; \n        }\n\n        float lineStep = antialiasSDF(thickness - minDist, aaEdgeWidth);\n        float outlineStep = antialiasSDF(thickness + outlineThickness - minDist, aaEdgeWidth);\n        \n        if (outlineStep > 0.) {\n            float layerRatio = 1. / float(layers);\n            vec3 layerColor = palette(float(layer + 1) * PI);\n            color = mix(outlineColor, layerColor, lineStep);\n            anyLine = outlineStep;\n            break;\n        }\n\n    }\n\n    color = mix(vec3(0.2, 0.15, 0.1), color, anyLine);\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}