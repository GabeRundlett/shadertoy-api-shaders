{
    "Shader": {
        "info": {
            "date": "1727038388",
            "description": "Gradients of noise functions.",
            "flags": 0,
            "hasliked": 0,
            "id": "XXBczD",
            "likes": 10,
            "name": "âˆ‡ noise()",
            "published": 3,
            "tags": [
                "noise",
                "gradient",
                "derivative"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 117
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Derivatives of 2D and 3D noise functions (both value noise\n// and gradient noise). Intended as self-contained, copypaste-friendly\n// snippets.\n// Mostly the same thing as\n//     https://iquilezles.org/articles/morenoise/\n//     https://iquilezles.org/articles/gradientnoise/\n// but somewhat shorter (and quite possibly slower). NOTE: this has\n// different convention (value goes into the last component, so the\n// derivatives match their subscript: d/dx noise = noise.x, etc.).\n\n//==============================================================================\n// Hash functions.\n// NOTE: these are integer hashes disguised as float-based.\n// For demonstration purposes only. In practice you probably want\n// to either switch to actual float-based hashes, of slightly\n// modify the code to use integer hashes directly.\n\n// https://www.shadertoy.com/view/dllSW7\nuint hash(uint x)\n{\n    x^=x>>15;\n    x^=(x*x)|1u;\n    x^=x>>17;\n    x*=0x9E3779B9u;\n    x^=x>>13;\n    return x;\n}\n\nfloat hash(vec2 r)\n{\n    ivec2 v=ivec2(r);\n    return float(int(hash(uint(v.x+65535*v.y))))*4.6566129e-10;\n}\n\nfloat hash(vec3 r)\n{\n    ivec3 v=ivec3(r);\n    return float(int(hash(uint(v.x+1024*v.y+1048576*v.z))))*4.6566129e-10;\n}\n\nvec2 hash2(vec2 r)\n{\n    ivec2 v=ivec2(r);\n    uint h=hash(uint(v.x+65535*v.y));\n    return vec2(h&65535u,h>>16)/32768.0-1.0;\n}\n\nvec3 hash3(vec3 r)\n{\n    ivec3 v=ivec3(r);\n    uint h=hash(uint(v.x+1024*v.y+1048576*v.z));\n    return vec3(h&1023u,(h>>10)&1023u,(h>>20)&1023u)/512.0-1.0;\n}\n\n//==============================================================================\n// Noise functions with derivatives.\n\n#if 0\n// 2D value noise. Gradient in xy, value in z.\nvec3 noise2(vec2 r)\n{\n    vec2 i=floor(r),v=fract(r),k=vec2(0,1),t=v*v*v*(v*(v*6.0-15.0)+10.0);\n    float A=hash(i+k.xx);\n    float B=hash(i+k.yx);\n    float C=hash(i+k.xy);\n    float D=hash(i+k.yy);\n    return vec3(vec2(mix(B-A,D-C,t.y),mix(C-A,D-B,t.x))*30.0*v*v*(v*(v-2.0)+1.0),\n                mix(mix(A,B,t.x),mix(C,D,t.x),t.y));\n}\n\n// 3D value noise. Gradient in xyz, value in w.\nvec4 noise3(vec3 r)\n{\n    vec3 i=floor(r),v=fract(r),k=vec3(0,1,0),t=v*v*v*(v*(v*6.0-15.0)+10.0);\n    float A=hash(i+k.xxx);\n    float B=hash(i+k.yxx);\n    float C=hash(i+k.xyx);\n    float D=hash(i+k.yyx);\n    float E=hash(i+k.xxy);\n    float F=hash(i+k.yxy);\n    float G=hash(i+k.xyy);\n    float H=hash(i+k.yyy);\n    return vec4(mix(mix(vec3(B-A,C-A,E-A),vec3(D-C,G-E,F-B),t.yzx),\n                    mix(vec3(F-E,D-B,G-C),vec3(H-G,H-F,H-D),t.yzx),t.zxy)*30.0*v*v*(v*(v-2.0)+1.0),\n                mix(mix(mix(A,B,t.x),mix(C,D,t.x),t.y),\n                    mix(mix(E,F,t.x),mix(G,H,t.x),t.y),t.z));\n}\n#else\n// 2D gradient noise. Gradient in xy, value in z.\nvec3 noise2(vec2 r)\n{\n    vec2 i=floor(r),v=fract(r),k=vec2(0,1),t=v*v*v*(v*(v*6.0-15.0)+10.0);\n    vec2 A=hash2(i+k.xx); float a=dot(A,v-k.xx);\n    vec2 B=hash2(i+k.yx); float b=dot(B,v-k.yx);\n    vec2 C=hash2(i+k.xy); float c=dot(C,v-k.xy);\n    vec2 D=hash2(i+k.yy); float d=dot(D,v-k.yy);\n    return vec3(mix(vec2(b-a,c-a),vec2(d-c,d-b),t.yx)*30.0*v*v*(v*(v-2.0)+1.0)+\n                mix(mix(A,B,t.x),mix(C,D,t.x),t.y),\n                mix(mix(a,b,t.x),mix(c,d,t.x),t.y));\n}\n\n// 3D gradient noise. Gradient in xyz, value in w.\nvec4 noise3(vec3 r)\n{\n    vec3 i=floor(r),v=fract(r),k=vec3(0,1,0),t=v*v*v*(v*(v*6.0-15.0)+10.0);\n    vec3 A=hash3(i+k.xxx); float a=dot(A,v-k.xxx);\n    vec3 B=hash3(i+k.yxx); float b=dot(B,v-k.yxx);\n    vec3 C=hash3(i+k.xyx); float c=dot(C,v-k.xyx);\n    vec3 D=hash3(i+k.yyx); float d=dot(D,v-k.yyx);\n    vec3 E=hash3(i+k.xxy); float e=dot(E,v-k.xxy);\n    vec3 F=hash3(i+k.yxy); float f=dot(F,v-k.yxy);\n    vec3 G=hash3(i+k.xyy); float g=dot(G,v-k.xyy);\n    vec3 H=hash3(i+k.yyy); float h=dot(H,v-k.yyy);\n    return vec4(mix(mix(vec3(b-a,c-a,e-a),vec3(d-c,g-e,f-b),t.yzx),\n                    mix(vec3(f-e,d-b,g-c),vec3(h-g,h-f,h-d),t.yzx),t.zxy)*30.0*v*v*(v*(v-2.0)+1.0)+\n                mix(mix(mix(A,B,t.x),mix(C,D,t.x),t.y),\n                    mix(mix(E,F,t.x),mix(G,H,t.x),t.y),t.z),\n                mix(mix(mix(a,b,t.x),mix(c,d,t.x),t.y),\n                    mix(mix(e,f,t.x),mix(g,h,t.x),t.y),t.z));\n}\n#endif\n\n//==============================================================================\n// Simple fBm heightmap.\n// See also https://www.shadertoy.com/view/DtdyDl for slightly more advanced cases.\n\nvec4 height(vec3 r)\n{\n    float a=0.375,b=2.25,A=1.0,B=1.0;\n    vec4 ret=vec4(0);\n    for(int i=0;i<8;++i)\n    {\n        ret+=vec4(A*B,A*B,A*B,A)*noise3(B*r);\n        A*=a;\n        B*=b;\n    }\n    return ret;\n}\n\n//==============================================================================\n// Main image.\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 uv=(2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 col=0.03125*vec3(0.433,0.3257,0.27655); // Cosmic latte (CIE xz=(0.345,0.345)).\n    vec3 ro=vec3(0,0,2);\n    vec3 rd=normalize(vec3(uv,-1.5));\n    vec3 n=normalize(rd-dot(ro,rd)/dot(ro,ro)*ro),l=normalize(vec3(1));\n    float R=1.0,p=dot(ro,rd),d=p*p-dot(ro,ro)+R*R;\n    if(d>0.0)\n    {\n        float t=-p-sqrt(d);\n        vec3 r=ro+t*rd;\n        n=normalize(r);\n        vec4 q=vec4(cos(0.25*iTime)*normalize(vec3(2,5,1)),sin(0.25*iTime));\n        vec3 v=n+2.0*cross(q.xyz,cross(q.xyz,n)+q.w*n);                        // Rotate.\n        vec4 h=height(2.0*v+1.0);\n        h.xyz=h.xyz+2.0*cross(q.xyz,cross(q.xyz,h.xyz)-q.w*h.xyz);             // Un-rotate.\n        col=mix(col,mix(\n            vec3(0.025,0.1,0.5)*pow(max(dot(n,normalize(l-rd)),0.0),8.0),      // Ocean.\n            vec3(0.4,0.3,0.2)*(0.125+max(dot(normalize(n-0.25*h.xyz),l),0.0)), // Land.\n            smoothstep(-0.05,0.0,h.w)),smoothstep(0.0,fwidth(d),d));\n    }\n    col+=(0.125+max(dot(n,l),0.0))*vec3(0.1,0.2,0.7)*exp(-17.0*max(-d,0.0)/(R*R))/(1.0+4.0*max(d,0.0)/(R*R)); // Atmosphere.\n    col=mix(12.92*col,1.055*pow(col,vec3(1.0/2.4))-0.055,step(0.0031308,col)); // sRGB\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}