{
    "Shader": {
        "info": {
            "date": "1600847848",
            "description": "3d worley noise for creating 3D ckoud textures. Loopable in all directions.",
            "flags": 32,
            "hasliked": 0,
            "id": "WddyW8",
            "likes": 0,
            "name": "3D fbm worley noise",
            "published": 3,
            "tags": [
                "2d",
                "3d",
                "noise",
                "fbm",
                "worley"
            ],
            "usePreview": 0,
            "username": "Jaromir",
            "viewed": 559
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 offset = vec2(iTime*0.05,sin(iTime*0.05));\n    \n\tvec3 col = texture(iChannel0,uv+offset).rgb;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec3 hash33(vec3 p3)\n{\n\tvec3 p = fract(p3 * vec3(.1031,.11369,.13787));\n    p += dot(p, p.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p.x + p.y)*p.z, (p.x+p.z)*p.y, (p.y+p.z)*p.x));\n}\n\nfloat worley(vec3 p, float scale){\n\n    vec3 id = floor(p);\n    vec3 fd = fract(p);\n\n    float n = 0.;\n\n    float minimalDist = 1.;\n\n\n    for(float x = -2.; x <=2.; x++){\n        for(float y = -2.; y <=2.; y++){\n            for(float z = -2.; z <=2.; z++){\n\n                vec3 coord = vec3(x,y,z);\n                vec3 rId = hash33(mod(abs(id+coord),scale))*0.33;\n\n                vec3 r = coord + rId - fd; \n\n                float d = dot(r,r);\n\n                if(d < minimalDist){\n                    minimalDist = d;\n                }\n\n            }//z\n        }//y\n    }//x\n\n  return minimalDist;\n}\n\n\nfloat fbm(vec3 p,float scale){\n  float G = exp(-0.3);\n  float amp = 1.;\n  float freq = 1.;\n  float n = 0.;\n    \n  for(int i = 0; i <5; i++){\n    n+= worley(p*freq,scale*freq)*amp;\n    freq*=2.;\n    amp*=G;\n  }\n    \n  return n*n;  \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float scale = 2.;\n    uv*=scale;\n    \n    vec3 p = vec3(uv,iMouse.x/iResolution.x*5. + iTime*0.1);\n        \n    float n = fbm(p,scale);\n    \n    vec3 col = vec3(1.-n);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}