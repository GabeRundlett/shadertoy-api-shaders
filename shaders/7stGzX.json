{
    "Shader": {
        "info": {
            "date": "1635779632",
            "description": "Baking a simple path tracer into a cube map ",
            "flags": 0,
            "hasliked": 0,
            "id": "7stGzX",
            "likes": 17,
            "name": "Bake PT cubemap",
            "published": 3,
            "tags": [
                "bake"
            ],
            "usePreview": 0,
            "username": "jvb",
            "viewed": 436
        },
        "renderpass": [
            {
                "code": "\nvec3 rm(in vec3 ro, in vec3 rd, float time)\n{\n\tvec3 color = vec3(0.0);  \n\tvec3 tex = vec3(0);\n    \n    vec3 pos = ro; \n\t\tfloat dist = 0.0; \n\t\tvec2 d = vec2(0); \n\t\t\n\n\t\tfor (int i = 0; i < 64; i++) {\n        \td = scene(pos); \n            if (abs(d.x) < 0.0001) break; \n\t\t\tpos += rd*d.x;\n\t\t}\n        \n \t   //vec3 n = get_normal(pos);\n    \tcolor = texture(iChannel2,pos.xyz).xyz; \n\treturn color; \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec2 p = 2.0*( fragCoord.xy / iResolution.xy )-1.0;\n\n    // Time varying pixel color\n    vec3 color =  vec3(0);\n\n    \n    vec3 ro, rd; \n    \n    // persp\n\t#if 1\n\tp.x *= iResolution.x/iResolution.y; \n\tro = vec3(3.0+sin(iTime*1.1),-0.9,1.0+sin(iTime*0.7));\n    //ro = vec3(0,0,0);\n\trd = normalize(vec3(p.x,p.y,-1.0)); \n\t#endif\n\n    \n\tvec2 tmouse = vec2(iMouse.x*0.001,iMouse.y*0.001);\t\n    #if 1\n\trd = rotatex(rd, -0.0+1.0f*tmouse.y*10.0);\n\trd = rotatey(rd, -1.5+1.0f*tmouse.x*10.0);\n    #endif\n\n    \n    color = rm(ro,rd,iTime); \n    \n\t#define GAMMA 1\n\t#if GAMMA\n\tcolor = pow(color,vec3(1.0/1.5));\n\t#endif\n    // Output to screen\n    fragColor = vec4(color, 1.0); \n    //fragColor = texture(iChannel0,uv);\n    //fragColor = texture(iChannel2,vec3(uv.x,uv.y,0.0)); \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat random(vec3 scale, float seed) { \n\treturn fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed); \n} \n\nvec3 cosineWeightedDirection(float seed, vec3 normal) {\n#if 0\n\tfloat a = 2.0*random(vec3(12.9898, 78.233, 151.7182), seed)-1.0; \n\tfloat b = 2.0*random(vec3(63.7264, 10.873, 623.6736), seed)-1.0; \n\tfloat c = sqrt(1.0-a*a);\n\tvec3 r = vec3(c*cos(b),a,c*sin(b)); \n\treturn dot(r,normal) > 0.0 ? r : -r; \n#else\n\tfloat u = random(vec3(12.9898, 78.233, 151.7182), seed); \n\tfloat v = random(vec3(63.7264, 10.873, 623.6736), seed); \n\tfloat r = sqrt(u); \n\tfloat angle = 6.283185307179586 * v; \n\tvec3 sdir, tdir; \n\tif (abs(normal.x)<.5) { \n\t\tsdir = cross(normal, vec3(1,0,0)); \n\t} else { \n\t\tsdir = cross(normal, vec3(0,1,0)); \n\t} \n\ttdir = cross(normal, sdir); \n\treturn r*cos(angle)*sdir + r*sin(angle)*tdir + sqrt(1.-u)*normal; \n#endif\n} \n\nvec3 uniformlyRandomDirection(float seed) { \n\tfloat u = random(vec3(12.9898, 78.233, 151.7182), seed); \n\tfloat v = random(vec3(63.7264, 10.873, 623.6736), seed); \n\tfloat z = 1.0 - 2.0 * u; float r = sqrt(1.0 - z * z); \n\tfloat angle = 6.283185307179586 * v; \n\treturn vec3(r * cos(angle), r * sin(angle), z); \n} \n\nvec3 uniformlyRandomVector(float seed) { \n\treturn uniformlyRandomDirection(seed) * sqrt(random(vec3(36.7539, 50.3658, 306.2759), seed)); \n} \n\n\n\nvec3 rm(in vec3 ro, in vec3 rd, float time)\n{\n\tvec3 colorMask = vec3(1.0); \n\tvec3 color = vec3(0.0);  \n\tvec3 surfaceColor = vec3(0);\n\tvec3 tex = vec3(0);\n#define BOUNCES 3\n\tfor (int bounce = 0; bounce < BOUNCES; bounce++) {\n\t\tvec3 pos = ro; \n\t\tfloat dist = 0.0; \n\t\tvec2 d = vec2(0); \n\t\t\n\t\tif (bounce == 0) {\n            for (int i = 0; i < 64; i++) {\n                d = scene(pos); \n                if (abs(d.x) < 0.0001) break; \n                pos += rd*d.x;\n            }\n\t\t}\n\t\telse {\n            for (int i = 0; i < 64; i++) {\n                d = scene(pos); \n                if (abs(d.x) < 0.0001) break; \n                pos += rd*d.x;\n            }\t\t\t\n\t\t}\n        dist = length(pos-ro); \n\t\tif (dist < 10000.0 && abs(d.x) < 100.0) {\n\t\t\tfloat o = d.y;\n\t\t\tvec3 n = get_normal(pos); \n\t\t\tfloat shade = 1.0; //ambientOcclusion(pos+0.001*n, 1.0*n)*1.0;\n\n\t\t\t#define MULTISAMPLE_TEX 0\n\t\t\tif (true) {\n\t\t\t#if MULTISAMPLE_TEX\n\t\t\ttex = vec3(0);\n\t\t\t\tfor (int i = 0; i < 16; i++) {\n\t\t\t\t\tfloat AA = 0.01; \n\t\t\t\t\ttex += get_tex(pos + AA*uniformlyRandomVector(float(time)+float(i))); \n\t\t\t\t}\n\t\t\t\ttex /= 16.0;\n\t\t\t#else\n\t\t\t\ttex = get_tex(pos); \n\t\t\t#endif\n\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\tif (d.y == 1.0) {\n\t\t\t\t// Light, luminance\n\t\t\t\tsurfaceColor =vec3(1,1,1)*100.0; \n\t\t\t}\n\t\t\tif (d.y == 2.0) {\n\t\t\t\tsurfaceColor = vec3(1,0,0); \n\t\t\t}\n\t\t\tif (d.y == 3.0) {\n\t\t\t\tsurfaceColor = tex*vec3(1,1,1); \n\t\t\t}\n\t\t\tif (d.y == 4.0) {\n\t\t\t\tvec3 lightpos = vec3(10,0,-4); \n\t\t\t\tvec3 l = normalize(lightpos - pos);\n\t\t\t\tfloat diff = clamp(dot(n,l), 0.0,1.0);\n\t\t\t\tsurfaceColor = mix(vec3(1,1,1)*1.0,vec3(1,1,1)*1.1,diff);\n//\t\t\t\tsurfaceColor = vec3(1);\n\t\t\t}\n\t\t\tif (bounce == 0) {\n\t\t\t\tcolorMask *= surfaceColor;\n\t\t\t\tcolor += 0.5*(shade*surfaceColor); //*colorMask; \n\t\t\t}\n\t\t\telse {\n\t\t\t\tcolorMask *= surfaceColor;\n\t\t\t\tcolor += 0.5*(shade*surfaceColor)*clamp(dist*0.25,0.0,32.0); //*colorMask; \n\t\t\t}\n\t\t\tfloat refl = 0.0;\n\t\t            float rr = random(vec3(36.7539, 50.3658, 306.2759), time+float(bounce));\n\t\t            refl = clamp(refl*rr, 0.0, 1.0);\n\t\t\tro = pos+n*0.001; \n\t\t\tvec3 rd2 = reflect(rd, n); \n\t\t\trd = normalize(cosineWeightedDirection(time+float(bounce), n));\t\t\t\t\t\n\t\t\trd = normalize(mix(rd, rd2, refl));\n\t\t\t\n\t\t}\t\n\t}\n\treturn clamp(color, 0.0, 1.0); \n}\n\n\n\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n    vec3 color = vec3(0); \n    \n\t#define SSAMPLES 1\n\tfor (int i = 0; i < SSAMPLES; i++) {\n\t\tcolor += rm(ro, rd, iTime+float(i)); \n\t}\n\tcolor /= float(SSAMPLES);\n\t    \n    // Output to cubemap\n    color = mix(color, texture(iChannel0, rd).xyz, 0.99); \n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    }
                ],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            },
            {
                "code": "\n//uniform float time;\n//uniform vec2 mouse;\n//uniform vec2 resolution;\n\nvec3 rotatey(in vec3 p, float ang) { return vec3(p.x*cos(ang)-p.z*sin(ang),p.y,p.x*sin(ang)+p.z*cos(ang));  }\nvec3 rotatex(in vec3 p, float ang) { return vec3(p.x,p.y*cos(ang)-p.z*sin(ang),p.y*sin(ang)+p.z*cos(ang));  }\nvec3 rotatez(in vec3 p, float ang) { return vec3(p.x*cos(ang)-p.y*sin(ang),p.x*sin(ang)+p.y*cos(ang),p.z);  }\n\nvec2 sph(in vec3 p, float r, float o) { return vec2(length(p)-r, o); }\nvec2 rbox(in vec3 p, in vec3 b, float r, float o) { return vec2(length(max(abs(p)-b,0.0))-r, o); }\nvec2 sdbox( vec3 p, vec3 b, float o ) { vec3 d = abs(p) - b; return vec2(min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0)), o); }\nvec2 plane(in vec3 p, in vec3 n, float d, float o) { return vec2(dot(p,n)-d, o); }\n\nvec2 min2(in vec2 o1, in vec2 o2) { if (o1.x < o2.x) return o1; else return o2; }\nvec2 max2(in vec2 o1, in vec2 o2) { if (o1.x > o2.x) return o1; else return o2; }\nfloat lightgap = 1.0;\nvec2 scene(in vec3 p)\t\n{\n\tvec2 d = vec2(1000.0, 0);     \n   \td = min2(d, vec2(-1,1)*sdbox(p-vec3(0,0,0), vec3(6,2,8),3.0));\t\n\td = max2(d, vec2(-1,1)*sdbox(p-vec3(0,-2,0), vec3(5,1,7),3.0));\t\n\td = max2(d, vec2(-1,1)*sdbox(p-vec3(0,-2,0), vec3(4,2,2),3.0));\t\n\n    return d; \n}\n\nvec3 get_tex(in vec3 p)\n{\n\tvec3 col = vec3(0.0);\n    if (p.x < -5.999 && abs(p.z+p.y+4.0) < 2.0) col += vec3(25);\n    if (p.x < -5.999 && abs(p.z-p.y-4.0) < 2.0) col += vec3(25);\t\n\treturn col*0.5;\n}\nvec3 get_normal(in vec3 p)\n{\n\tvec3 eps = vec3(0.001, 0, 0); \n\tfloat nx = scene(p + eps.xyy).x - scene(p - eps.xyy).x; \n\tfloat ny = scene(p + eps.yxy).x - scene(p - eps.yxy).x; \n\tfloat nz = scene(p + eps.yyx).x - scene(p - eps.yyx).x; \n\treturn normalize(vec3(nx,ny,nz)); \n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}