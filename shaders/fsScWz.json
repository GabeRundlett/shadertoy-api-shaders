{
    "Shader": {
        "info": {
            "date": "1643966728",
            "description": "art",
            "flags": 0,
            "hasliked": 0,
            "id": "fsScWz",
            "likes": 1,
            "name": "box sdf try-out",
            "published": 3,
            "tags": [
                "lines"
            ],
            "usePreview": 0,
            "username": "magnias",
            "viewed": 50
        },
        "renderpass": [
            {
                "code": "#define hash(p)  fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n#define hash2(p) fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123)\n#define hash3(p) fract(sin((p)*mat3(127.1,311.7, 74.7,  269.5,183.3,246.1,  113.5,271.9,124.6))*43758.5453123)\n#define hash2x3(p) fract(sin((p)*mat3x2(127.1,311.7,  269.5,183.3,  113.5,271.9))*43758.5453123)\n\n#define SHOW_EDGES false\n#define SHOW_SHADOWS true\n\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nfloat sdBox( in vec3 p, in vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdf( in vec3 p )\n{\n    vec3 c = vec3(3);\n    vec3 modPos = mod(p + .5 * c, c) - .5 * c;\n    vec3 pos = vec3(modPos.x, p.y, modPos.z);\n    pos = p;\n    //return max(length(p - vec3(0, 0, 0)) - 1., length(p - vec3(1., 0., 1.3 * sin(iTime))) - 1.1);\n    //p = mod(p + vec3(5), 10.) - vec3(5);\n    //return sdBox(vec3(modPos.x, p.y, modPos.z), vec3(1));\n    \n    // Sphere moving through cube\n    float d = min(\n        sdBox(pos, vec3(1)),\n        sdBox(pos - vec3(0, -2, 0), vec3(15, 1, 15))\n    );\n    \n    d = max( d, -(length(vec3(pos.x, pos.y + sin(iTime / 2.), pos.z)) - 1.2) );\n    for(int x=-1; x<=1; x++) for(int z=-1; z<=1; z++)\n    {\n        if ( x == 0 && z == 0) continue;\n        d = max( d, -(length(vec3(pos.x + 3.4 * float(x), pos.y - sin(iTime / 2.), pos.z + 3.4 * float(z))) - 1.2) );\n    }\n    \n    return d;\n}\n\nvec3 calcNormal( in vec3 p ) // for function f(p)\n{\n    const float h = 0.0001;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*sdf( p + k.xyy*h ) + \n                      k.yyx*sdf( p + k.yyx*h ) + \n                      k.yxy*sdf( p + k.yxy*h ) + \n                      k.xxx*sdf( p + k.xxx*h ) );\n}\n\nfloat ray_march( in vec3 origin, in vec3 direction )\n{\n\n    vec3 pos = origin;\n    \n    // early escape if origin is inside sdf\n    if ( sdf(pos) < 0. )\n    {\n        return -1.;\n    }\n\n    float dist = 0.;\n    for (int i=0; i<100; i++)\n    {\n        float step_dist = sdf(pos);\n        dist += step_dist;\n        pos = origin + dist * direction;\n        \n        if ( step_dist < 0.0001)\n        {\n            return dist;\n        }\n        \n    }\n\n    return -1.;\n}\n\nbool is_edge( in vec3 position )\n{\n    vec3 p = vec3(0);\n    \n    float totalSdf = 0.;\n    float possible_max = 0.;\n    \n    float scale = 0.015;\n    float minVal = -1. * scale;\n    float maxVal = 1. * scale;\n    float stepSize = .5 * scale;\n    for(p.x = minVal; p.x <= maxVal; p.x += stepSize)\n    for(p.y = minVal; p.y <= maxVal; p.y += stepSize)\n    for(p.z = minVal; p.z <= maxVal; p.z += stepSize)\n    {\n        if ( p == vec3(0.) ) continue;\n        \n        float weight = (abs(p.x) * abs(p.y) * abs(p.z));\n        if ( sdf(position + p) > 0. ) totalSdf += weight;\n        else totalSdf -= weight;\n        \n        possible_max += weight;\n        \n        //totalSdf += sdf(p);\n    }\n    \n    totalSdf /= possible_max;\n    if ( totalSdf > 0.5 ) return true;\n    \n    return false;\n}\n\nvec3 march_scene( in vec3 origin, in vec3 direction )\n{\n    float dist = ray_march(origin, direction);\n    \n    // No hit\n    if ( dist == -1. )\n    {\n        // Calculate sky color\n        //return vec3(0.5, 0.85, 0.9) + vec3(dot(direction, vec3(0, 1, 0) * 0.6));\n        return vec3(.1);\n    }\n   \n    vec3 pos = origin + direction * dist;\n    \n    vec3 lightdir = normalize(vec3(1, -.6, 1));\n    vec3 lightcolor = vec3(1, .3, .8);\n    vec3 color = vec3(1, 0, 0) * lightcolor * max(dot(-lightdir, calcNormal(pos)), 0.1);\n    \n    if ( SHOW_SHADOWS )\n    {\n        float dist_to_light = ray_march(pos + -vec3(20) * lightdir , lightdir);\n        if ( dist_to_light < 20. - 0.001 ) \n        {\n            color = vec3(.05);\n        }\n    }\n    \n    if (SHOW_EDGES && is_edge(pos) )\n    {\n        return vec3(0.34);\n    }\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Camera setup\n    vec2 uv = fragCoord.xy / vec2(iResolution.x,iResolution.y) * 2.0 - 1.0;\n    float aspect = iResolution.x / iResolution.y;\n    uv *= vec2(6, 6. / aspect);\n\n    vec3 worldpos = vec3(uv.x, uv.y, 0.);\n    worldpos -= vec3(0, 0, 20); // camera position\n    vec3 worlddir = normalize(vec3(0, 0, 1));\n    mat3 rot = rotateX(-0.4) * rotateY(0.4) * rotateZ(0.0);\n    worldpos = rot * worldpos;\n    worlddir = rot * worlddir;\n\n    vec3 color = vec3(0);\n    color = march_scene(worldpos, worlddir);\n\t\n    fragColor = vec4( color, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}