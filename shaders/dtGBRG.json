{
    "Shader": {
        "info": {
            "date": "1702257505",
            "description": "Took jt's grass shader https://www.shadertoy.com/view/dtGBDz and modified it so that the repetition will work with any N value > 2, not just odd values\n\nIt has a curve applied to radius, this is not correct sdf, disable by setting SUCCULENT_RADIUS to 0",
            "flags": 0,
            "hasliked": 0,
            "id": "dtGBRG",
            "likes": 10,
            "name": "Succulent (Any N)",
            "published": 3,
            "tags": [
                "grass",
                "succulent"
            ],
            "usePreview": 0,
            "username": "Dain",
            "viewed": 169
        },
        "renderpass": [
            {
                "code": "// https://www.shadertoy.com/view/dtGBDz orthogonal circles grassy plant, 2023 jt\n// based on https://www.shadertoy.com/view/ctyBzm orthogonal circles flower sdf 3d\n// based on https://www.shadertoy.com/view/clGBzm orthogonal circles flower sdf 2\n// based on https://www.shadertoy.com/view/dldBWl orthogonal circles flower sdf\n// exact sdf for shape related to https://www.shadertoy.com/view/cltfW2 orthogonal circles flower\n// SDF exactness using https://www.shadertoy.com/view/DdX3WH Interior Distance Detect Errors\n\n// Circle arcs orthogonal to unit sphere\n// with circle segment endpoints at equidistant latitude / longitude.\n// Reminds me of a clumpy grass variant I like.\n\n// TODO: Can something similar be done with spherical fibonacci instead?\n//       (see e.g. https://www.shadertoy.com/view/lllXz4 )\n\n// tags: sdf, flower, circle, grass, distance, conformal, disk, plant, loopless, exact, orthogonal\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//succulent makes DF not so precise, so set to 0 if you want exact SDF\n//It doesn't appear to miss the surface, but it will jump further into the grass rather than landing on the 0 contour\n#define SUCCULENT_RADIUS .08\n\n//exact SDF radius, if somewhat boring looking\n#define GRASS_RADIUS 0.01\n\n#define pi 3.1415926\n\nfloat ortho_circle_flower_sdf(float n, vec2 p) // https://www.shadertoy.com/view/dldBWl orthogonal circle flower sdf (jt)\n{\n    p.x = abs(p.x);\n \n    n = 2.01+ abs(sin(iTime*.5)*10.0);//Any N > 2 will work now\n\n    float slice2 = (pi*2.0)/float(n);\n    \n    // endpoints\n    float phiReal = atan(p.x,p.y);\n\n    float endPtRound = fract(n*.5);\n    \n   //quantized phi--but do it so it works with any N value not just odd\n    float phi = (round(phiReal/slice2 - endPtRound)+endPtRound)*slice2;\n    \n    vec2 c = vec2(sin(phi),cos(phi));\n    \n    float d = length(p-c);//distance to endpoint\n    \n\n    bool wantCircle = dot(p,c)<1.0 \n                    ||  phi <0.0; //Without this sometimes you get a floating tip at center/top with non odd N :/\n    \n    \n    //we can skip this circle stuff when outside the shape\n    if(wantCircle){\n    \n        float slice = slice2*.5;\n        float a = (p.y*p.y+2.0*p.y+p.x*p.x+1.0);\n        float b = p.x*2.0;\n    \n        float ang1 = floor(atan(a,b)/slice)*slice;\n    \n        float r0 = tan(ang1);         // quantize floor angle\n        float r1 = tan(ang1 + slice); // quantize ceil angle\n \n        d =  min(abs(length(p-vec2(r0,-1))-r0),\n                 abs(length(p-vec2(r1,-1))-r1));\n    }\n    return d;\n }\n\nfloat dot2(vec2 a){\n   // return length(a);\n    return dot(a,a);\n}\nfloat fade(float f){\n   // return sin(f*pi);\n    f = 1.0-f*f;\n    f = 1.0-f*f;\n    return f;\n}\nfloat ortho_circle_flower_sdf(float m, float n, vec3 p) // https://www.shadertoy.com/view/dtGBDz orthogonal circles grassy plant (jt)\n{\n    float phi = round(atan(p.y,p.x)/(2.0*pi/float(m)))*(2.0*pi/float(m)); // polar & quantize\n  //  phi  = abs(phi);\n    p.xy = mat2(cos(phi),-sin(phi),sin(phi),cos(phi))*p.xy;\n   // p.x = abs(p.x);\n//    return length(vec2(ortho_circle_flower_sdf(n, vec2(p.xz)),p.y));\n    \n    float q = ortho_circle_flower_sdf(float(n), vec2(p.x,p.z));\n\n    return length(vec2(q,p.y))-SUCCULENT_RADIUS*fade(1.0-min(dot2(p.xz),1.0));;\n    \n}\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat map(vec3 p)\n{\n    float n = float(mix(3.0, 11.0, 0.5+0.5*cos(2.0*pi*iTime/10.0))); // animate number of leafs\n   // n = 5.0;\n    float m =2.01 + cos(iTime*.2)*10.0;\n   // m =3;\n    return ortho_circle_flower_sdf(m, n, p)-GRASS_RADIUS;\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p )\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) +\n                      k.yyx*map( p + k.yyx*h ) +\n                      k.yxy*map( p + k.yxy*h ) +\n                      k.xxx*map( p + k.xxx*h ) );\n}\n\nfloat trace(vec3 ro, vec3 rd, float t0, float t1) // pass on running out of iterations\n{\n    // NOTE: Limited number of iterations to avoid stalling\n    //       when ray passes closely (just above EPSILON)\n    //       in parallel to a surface.\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n\n    return t; // stop on running out of iterations\n    //return t1; // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1) < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t);\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvec3 material(vec3 p)\n{\n    return vec3(0.1,1.0,0.0);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-2.5);\n    vec3 rd = normalize(vec3(I.xy, 2.0)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    //ro.z += 1.0;\n\n    vec3 color = vec3(1);\n    float dist = trace(ro, rd, 0.0, DIST_MAX);\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * dist;\n        vec3 n = normal(dst);\n\n        //color *= (n * 0.5 + 0.5);\n        color *= material(dst);\n\n        vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n        vec3 ambient = vec3(0.4);\n        float brightness = max(dot(lightdir, n), 0.0);\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0);\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        vec3 fog_color = vec3(0.2);\n        color = mix(fog_color, vec3(color), exp(-pow(dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        //color *= mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(-rd.z)); // sky\n        color *= 0.0;\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    color = sqrt(color); // approximate gamma\n    fragColor = vec4(color, 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}