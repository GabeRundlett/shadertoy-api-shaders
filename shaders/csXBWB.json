{
    "Shader": {
        "info": {
            "date": "1691032369",
            "description": "I started with a box and made it move around the screen. I wanted it to move randomly and watch when it hits the corner like the Office episode. I added the speed up slow down, rotations and blur. It reminds me of a sea creature now.",
            "flags": 0,
            "hasliked": 0,
            "id": "csXBWB",
            "likes": 2,
            "name": "Inebriated Bouncing Cross DVD",
            "published": 3,
            "tags": [
                "tutorial",
                "learning",
                "rotation",
                "practice"
            ],
            "usePreview": 0,
            "username": "martymarty",
            "viewed": 187
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\nfloat box1(in vec2 _st, in vec2 _size, float blur){\n    _size = vec2(0.5) - _size*0.5;\n    vec2 uv = smoothstep(_size,_size+vec2(blur), _st) \n              - smoothstep(vec2(1.0)-_size - vec2(blur), vec2(1.0)- _size, _st);\n    //uv *= smoothstep(_size, _size + vec2(0.001), vec2(1.0)- _st);\n    clamp(uv,0.0,1.0);\n    return uv.x*uv.y;\n}\n\nfloat box2(in vec2 _st, in vec2 _size, float blur){\n    _size = vec2(0.5) - _size*0.5;\n    //vec2 uv = smoothstep(_size,_size+vec2(0.001), _st) \n    //          - smoothstep(vec2(1.0)-_size - vec2(0.001), vec2(1.0) - _size, _st);\n    vec2 uv = smoothstep(_size, _size + vec2(2.0), _st);\n    uv *= smoothstep(_size, _size + vec2(2.0), vec2(1.0)- _st);\n    return uv.x*uv.y;\n}\n\nfloat drawcross(in vec2 _st, float _size, float blur){\n    return box1(_st, vec2(_size,_size/4.0), blur) + box1(_st, vec2(_size/4.0, _size), blur);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle), sin(_angle), cos(_angle));\n}\n\nmat2 scale2d(vec2 _scale){\n    return mat2(_scale.x,0.0,0.0,_scale.y);\n}\nfloat triangle(float top, float period, float x){\n    return top*abs(2.0*fract(x/period-0.5)-1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    fragCoord.x = fragCoord.x -  0.5*(iResolution.x-iResolution.y);\n    vec2 uv = fragCoord/iResolution.y;\n    vec3 col = vec3(0.0);\n    vec2 translate = vec2(-0.375+triangle(0.75,1.0/sqrt(2.0),(iTime+4.0*sin(iTime*0.25))*0.1+0.1),-0.375+triangle(0.75,1.0/sqrt(3.0),(iTime+3.0*sin(iTime*0.33))*0.1+0.15));\n    //vec2 translate = vec2(-0.375*cos(2.0*PI*sqrt(2.0)*((iTime+4.0*sin(iTime*0.25))*0.1+0.1)),-0.375*cos(2.0*PI*sqrt(3.0)*((iTime+3.0*sin(iTime*0.33))*0.1+0.15)));\n    float newTime = iTime-0.02;\n    float newTimeCos = newTime -0.03;\n    vec2 translate2 = vec2(-0.375+triangle(0.75,1.0/sqrt(2.0),(newTime+4.0*sin(newTime*0.25))*0.1+0.1),-0.375+triangle(0.75,1.0/sqrt(3.0),(newTime+3.0*sin(newTime*0.33))*0.1+0.15));\n    vec2 translate2cos = vec2(-0.375*cos(2.0*PI*sqrt(2.0)*((newTimeCos+4.0*sin(newTimeCos*0.25))*0.1+0.1)),-0.375*cos(2.0*PI*sqrt(3.0)*((newTimeCos+3.0*sin(newTimeCos*0.33))*0.1+0.15)));\n    translate2 = (3.5*translate2+translate2cos)/4.5;\n    translate.x *= 2.07;\n    translate2.x *= 2.07;\n    vec2 echouv = vec2(uv.x,uv.y);\n    echouv -=translate2;\n    uv -= translate;\n    col = vec3(0.0,1.1*uv.y,1.1*uv.x);\n    uv -= vec2(0.5);\n    echouv -= vec2(0.5);\n    uv *= rotate2d(2.0*PI*sin(iTime*0.2));\n    echouv *= rotate2d(2.0*PI*sin((newTimeCos-0.4)*0.20));\n    uv += vec2(0.5);\n    echouv += vec2(0.5);\n    vec2 echo1 = uv*0.66667+echouv*0.33333;\n    vec2 echo2 = uv*0.33333+echouv*0.66667;\n    //col += 0.2*(5.0*vec3(cross(uv,0.25,0.001))+1.0*vec3(cross(echouv,0.25,0.1)));\n    float cross1 = drawcross(uv,0.25,0.003);\n    float cross2 = drawcross(echo1,0.26,0.025);\n    float cross3 = drawcross(echo2,0.26,0.025);\n    float cross4 = drawcross(echouv,0.27,0.025);\n\n    col += 0.9*vec3(cross1);\n    col += 0.25*vec3(cross2);\n    col += 0.15*vec3(cross3);\n    col += 0.1*vec3(cross4);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}