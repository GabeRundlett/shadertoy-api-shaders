{
    "Shader": {
        "info": {
            "date": "1527035389",
            "description": "It's yet another hashing function, this one based on the x,y position of a fragment and the time, producing a float used as a brightness value. Behavior here may depend on hardware precision.",
            "flags": 0,
            "hasliked": 0,
            "id": "XsdBDf",
            "likes": 3,
            "name": "Basic 3D-to-1D Hash",
            "published": 3,
            "tags": [
                "hash"
            ],
            "usePreview": 0,
            "username": "TEttinger",
            "viewed": 741
        },
        "renderpass": [
            {
                "code": "// CC0 license, do what thou wilt\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 uv = mod((vec3((fragCoord.xy / iResolution.xy), iTime) * 11035.15245)\n                  // these are based off a number I had good results with as an increment with\n                  // 64-bit integer CPU hashing, 0x369DEA0F31A53F85, and its powers modulo 64 bits\n                  + vec3(393555.9000370003845, -55865.4634555294951, 782941.5577042901757),\n                  96.9875);\n    float h = fract(dot(uv + uv.yzx + uv.zxy, fract(uv * uv)));\n// to generate grayscale:\n    fragColor = vec4(h, h, h, 1.0);\n// to generate color:\n//    float r = h;\n//    float g = fract(h * 78294.15577042901757);\n//    float b = fract(h * 258.654634555294951);\n//    fragColor = vec4(r, g, b, 1.0);\n}\n\n// below has occasional pure-black frames when any component of uv is 0.0 .\n//    float h = fract(dot((uv * uv.yzx * uv.zxy), fract(uv * uv)));\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}