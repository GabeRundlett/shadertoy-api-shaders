{
    "Shader": {
        "info": {
            "date": "1685276290",
            "description": "A raymarched texture extruder with stacked planes, using domain repetition and brightness level cutting. It (almost) doesn't suffer from discontinuities. Adjust steps_multiplier to reveal slices. Buffer A  contains https://www.shadertoy.com/view/fsSSzw",
            "flags": 32,
            "hasliked": 0,
            "id": "cltSDn",
            "likes": 10,
            "name": "ExtrudedOldShader",
            "published": 3,
            "tags": [
                "extruder"
            ],
            "usePreview": 1,
            "username": "Del",
            "viewed": 287
        },
        "renderpass": [
            {
                "code": "// Kali's 'Extruder' - https://www.shadertoy.com/view/dtdSzM\n// with my galaxy ripple - https://www.shadertoy.com/view/fsSSzw\n#define  steps_multiplier .01\n#define  extrusion  .5\n#define  height_scale  .2\n#define  rotationXY  iTime*.1\n#define  rotationXZ  0.\n#define  rotationYZ  -.3\n#define  cameraX  0.\n#define  cameraY  .3\n#define  cameraZ  -1.2\n#define  fov  .8\n#define  lightdirX  1.\n#define  lightdirY  1.\n#define  lightdirZ  1.\n#define  ambient  .5\n#define  diffuse  1.\n#define  invert  false\n#define  distortX  0.\n#define  distortY  0.\n#define  distortZ  0.\n#define  distort_scale  0.\n#define  fudge_factor  .5\n\n#define resolution iResolution\n\nfloat maxdist=50., det=.001;\nvec3 objcol;\n\nmat2 rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat box(vec3 p, vec3 c) {\n    return length(max(vec3(0.),abs(p)-c));\n}\n\nfloat de(vec3 p) {\n  p.xy*=rot(p.z*distortZ*5.);\n  p.xz*=rot(-p.y*distortY);\n  p.yz*=rot(p.x*distortX);\n  float st=steps_multiplier*.3;\n  float extrude=extrusion*5.;\n  p.z+=extrude*.5;\n  p.z+=.5;\n  vec3 p2=p;\n  p2.x*=3./5.;\n  if(!invert) objcol=texture(iChannel0,p2.xy*.15*(1.+p.z*3.*(distort_scale))+.5).rgb;\n  else objcol=1.-texture(iChannel0,p2.xy*.15*(1.+p.z*3.*(distort_scale))+.5).rgb;\n  float l=length(objcol)*.5*height_scale*2.;\n  float z=p.z;\n  p.z=mod(p.z,st)-st*.5;\n  float d=box(p, vec3(5.,3.,.01));\n  d=max(d,abs(z)-extrude*.5);\n  d+=smoothstep(1.-(z+extrude*.5)/extrude,0.,l)*.05;\n  return d*fudge_factor;\n  }\n\nvec3 normal(vec3 p) {\n    vec2 e=vec2(0.,det);\n    return normalize(vec3(de(p+e.yxx),de(p+e.xyx),de(p+e.xxy))-de(p));\n}\n\nvec3 march(vec3 from, vec3 dir) {\n    vec3 p, col=vec3(0.);\n    float d, td=0.;\n    for (int i=0; i<2000; i++) {\n        p=from+dir*td;\n        d=de(p);\n        if (d<det || td>maxdist) break;\n        td+=d;\n    }\n    if (d<det) {\n        p-=dir*det;\n        vec3 n=normal(p);\n        vec3 ldir=normalize(vec3(lightdirX,lightdirY,lightdirZ));\n        col+=objcol*max(ambient,max(0.,dot(ldir,n))*diffuse);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = gl_FragCoord.xy/resolution.xy-.5;\n    uv.x*=resolution.x/resolution.y;\n    vec3 from=vec3(cameraX*4.,cameraY*4.,cameraZ*10.);\n     vec3 dir=normalize(vec3(uv,fov*3.));\n    from.xz*=rot(rotationXZ*3.1416);\n    dir.xz*=rot(rotationXZ*3.1416);\n    from.yz*=rot(-rotationYZ*3.1416);\n    dir.yz*=rot(-rotationYZ*3.1416);\n    from.xy*=rot(rotationXY*3.1416);\n    dir.xy*=rot(rotationXY*3.1416);\n    vec3 col = march(from,dir);\n    fragColor = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://www.shadertoy.com/view/fsSSzw\n// galaxy ripple nebula effect\n//#define PROCEDURAL_HASH\n\n#ifdef PROCEDURAL_HASH\nvec3 hash33(vec3 p)\n{\n    const float UIF = (1.0/ float(0xffffffffU));\n    const uvec3 UI3 = uvec3(1597334673U, 3812015801U, 2798796415U);\n    uvec3 q = uvec3(ivec3(p)) * UI3;\n\tq = (q.x ^ q.y ^ q.z)*UI3;\n\treturn vec3(q) * UIF;\n}\n#else\nvec3 hash33( vec3 x )\n{\n\treturn texture( iChannel0, (x.xy+vec2(3.0,1.0)*x.z+0.5)/256.0, -100.0 ).xyz;\n}\n#endif\n\n\n// 3D Voronoi- (IQ)\nfloat voronoi(vec3 p){\n\n\tvec3 b, r, g = floor(p);\n\tp = fract(p);\n\tfloat d = 1.; \n\tfor(int j = -1; j <= 1; j++)\n    {\n\t    for(int i = -1; i <= 1; i++)\n        {\n\t\t    b = vec3(i, j, -1);\n\t\t    r = b - p + hash33(g+b);\n\t\t    d = min(d, dot(r,r));\n\t\t    b.z = 0.0;\n\t\t    r = b - p + hash33(g+b);\n\t\t    d = min(d, dot(r,r));\n\t\t    b.z = 1.;\n\t\t    r = b - p + hash33(g+b);\n\t\t    d = min(d, dot(r,r));\n\t    }\n\t}\n\treturn d;\n}\n\n// fbm layer\nfloat noiseLayers(in vec3 p) {\n\n    vec3 pp = vec3(0., 0., p.z + iTime*.05);\n    float t = 0.;\n    float s = 0.;\n    float amp = 1.;\n    for (int i = 0; i < 5; i++)\n    {\n        t += voronoi(p + pp) * amp;\n        p *= 2.;\n        pp *= 1.5;\n        s += amp;\n        amp *= .5;\n    }\n    return t/s;\n}\n\nmat2 rot( float th ){ vec2 a = sin(vec2(1.5707963, 0) + th); return mat2(a, -a.y, a.x); }\n#define TWO_PI 6.2831853\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n        float dd = length(uv*uv)*.025;\n    \n\tvec3 rd = vec3(uv.x, uv.y, 1.0);\n    \n    float rip = 0.5+sin(length(uv)*20.0+iTime)*0.5;\n    rip = pow(rip*.38,4.15);\n    rd.z=1.0+rip*1.15;// apply a subtle ripple\n    rd = normalize(rd);\n    rd.xy *= rot(dd-iTime*.025);\n    rd*=2.0;\n\t\n\tfloat c = noiseLayers(rd*1.85);\n    float oc = c;\n    c = max(c + dot(hash33(rd)*2. - 1., vec3(.006)), 0.);\n    c = pow(c*1.55,2.5);    \n    vec3 col =  vec3(.55,0.5,1.25);\n    vec3 col2 =  vec3(1.95,0.95,1.4)*5.0;\n    float pulse2 = voronoi(vec3((rd.xy*1.5),iTime*.255));\n    float pulse = pow(oc*1.35,4.0);\n    col = mix(col,col2,pulse*pulse2)*c;\n    \n    if (iMouse.z>0.5)\n        col = col.yxz;\n    fragColor = vec4(sqrt(col),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}