{
    "Shader": {
        "info": {
            "date": "1722406527",
            "description": "The left side of the image is a checkerboard of 2 randomly chosen alternating colors. Top-right is their average in the srgb space, bottom-right is their average in the linear space. You can see that the average only looks right in the linear space.",
            "flags": 0,
            "hasliked": 0,
            "id": "McSyWm",
            "likes": 6,
            "name": "sRGB vs Linear averaging",
            "published": 3,
            "tags": [
                "blending",
                "colorspace",
                "srgb"
            ],
            "usePreview": 0,
            "username": "Suslik",
            "viewed": 178
        },
        "renderpass": [
            {
                "code": "// For whatever reason checkerboard seems to work worse in this test than alternating lines.\n// Change this macro to 1 to see what checkerboard looks like and let me know why it looks worse than lines.\n#define USE_CHECKERBOARD 0\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 pixel_idx = ivec2(fragCoord.xy);\n\n    vec3 srgb_col0 = 0.5 + 0.5*cos(iTime + vec3(0,2,4));\n    vec3 srgb_col1 = 0.5 + 0.5*cos(iTime + vec3(10) + vec3(0,2,4));\n    \n    if(iMouse.z > 0.5)\n    {\n        srgb_col0 = vec3(0.0);\n        srgb_col1 = vec3(1.0);\n    }\n\n    if(pixel_idx.x < int(iResolution.x) / 2)\n    {\n        // The left side of the image is a checkerboard/stripes of 2 alternating colors: srgb_col0 and srgb_col1\n        if((pixel_idx.y + pixel_idx.x * USE_CHECKERBOARD) % 2 == 0)\n        {\n            fragColor = vec4(srgb_col0, 1.0);\n        }else\n        {\n            fragColor = vec4(srgb_col1, 1.0);\n        }\n    }else\n    {\n        //top-right\n        if(pixel_idx.y > int(iResolution.y) / 2)\n        {\n            // One might think that alternating colors srgb_col0 and srgb_col1\n            // should average to (srgb_col0 + srgb_col1) / 2.0\n            vec3 srgb_avg = (srgb_col0 + srgb_col1) / 2.0;\n            // This is the color that's assigned to the top-right rectangle\n            // and you should clearly see that visually it does not look like an average at all.\n            // This is because srgb is a nonlinear color space and intermediate colors in this space aren't actually intermediate colors.\n            \n            fragColor = vec4(srgb_avg, 1.0);\n        }else\n        //bottom-right\n        {\n            // In order to get an actual intermediate color between srgb_col0 and srgb_col1,\n            // we first convert them from srgb color space to linear:\n            vec3 linear_col0 = pow(srgb_col0, vec3(2.2));\n            vec3 linear_col1 = pow(srgb_col1, vec3(2.2));\n            // Then we calculate their average in the linear space:\n            vec3 linear_avg = (linear_col0 + linear_col1) / 2.0;\n            // Then we transform it back to srgb:\n            vec3 srgb_avg = pow(linear_avg, vec3(1.0 / 2.2));\n            // Since shadertoy swapchain uses srgb colors, we output it directly\n            fragColor = vec4(srgb_avg, 1.0);\n            \n            // Note that 2.2 here is not a user-tweakable parameter. It's not an artistic choice and it's not supposed to have any\n            // other value. Gamma-2.2 is a simplified approximation of srgb->linear transformation and averaging in the linear space\n            // should look correct on every well-calibrated monitor.\n        }\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}