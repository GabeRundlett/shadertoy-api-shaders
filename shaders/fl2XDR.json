{
    "Shader": {
        "info": {
            "date": "1627441333",
            "description": "A test",
            "flags": 32,
            "hasliked": 0,
            "id": "fl2XDR",
            "likes": 14,
            "name": "Participating Media Test",
            "published": 3,
            "tags": [
                "montecarlo",
                "volumetrics"
            ],
            "usePreview": 0,
            "username": "milesWaugh",
            "viewed": 590
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//HASH BY DAVE HOSKINS\n//https://www.shadertoy.com/view/4djSRW\nvec3 rnd(vec3 p3) {\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz + 33.33);\n    return fract((p3.xxy + p3.yxx) * p3.zyx);\n\n}\n\nfloat noise(vec3 z) {\n    float x = texture(iChannel0, z * .1).r * 2.;\n    x += texture(iChannel0, z * .2).r;\n    x += texture(iChannel0, z * .4).r * .7;\n    x += texture(iChannel0, z * .8).r * .4;\n    x *= 0.6;\n    return x;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    vec3 col = vec3(0.);\n    vec3 inc = normalize(vec3(uv, .5));\n    vec3 contribution = vec3(1.);\n    vec3 radt = vec3(0.);\n    float dmag = 0.0001;\n    vec3 dz = normalize(vec3(1., 1., -.5)) * dmag;\n\n    float rl = 0.;\n    for(int i = 0; i < 100; i++) {\n        rl += 0.02;\n        vec3 z = inc * rl - vec3(0., 0., 2.);\n        float density = max(.5 - dot(z, z) + noise(z), 0.) * .15;\n        vec3 l = normalize(rnd(z * 1000. + iTime) - 0.5);\n        dz = l * dmag;\n        float dens2 = max(.5 - dot(z + dz, z + dz) + noise(z), 0.) * .15;\n        vec3 t = texture(iChannel1, l).rgb;\n        t = pow(t, vec3(5.));\n        vec3 chd = max((density - dens2) / dmag, 0.) * t * 200.;\n        vec3 rad = chd;\n        float d = exp(-density);\n        contribution *= d;\n        radt += contribution * rad * density;\n    }\n\n    vec3 tex = texture(iChannel1, inc).rgb;\n    tex *= tex;\n    col = contribution * tex + radt;\n    col *= 3.;\n    col = col / (col + 1.);\n    col = smoothstep(0., 1., col);\n    col = sqrt(col);\n\n    fragColor = (vec4(col, 1.0) + texture(iChannel2, fragCoord / iResolution.xy) * float(iFrame)) / (float(iFrame) + 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}