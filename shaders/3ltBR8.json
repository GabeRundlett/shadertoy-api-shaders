{
    "Shader": {
        "info": {
            "date": "1612227943",
            "description": "Another neural model.",
            "flags": 0,
            "hasliked": 0,
            "id": "3ltBR8",
            "likes": 4,
            "name": "Nefertiti Statue",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "neuralnetwork",
                "siren",
                "statue",
                "nefertiti",
                "bust"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 169
        },
        "renderpass": [
            {
                "code": "// Nefertiti model\n\nvec3 IntersectSphere(in vec3 ro, in vec3 rd, in float r) {\n    float a = dot(rd, rd);\n    float b = dot(2.0 * ro, rd);\n    float c = dot(ro, ro) - r * r;\n\n    vec3 intersect = vec3(0.0);\n\n    float discr = b * b - 4.0 * a * c;\n    if (discr > 0.0) {\n        float root = sqrt(discr);\n        float denom = 2.0 * a;\n        float t1 =  (root - b) / denom; // 1st root\n        float t2 = -(root + b) / denom; // 2nd root\n        intersect = vec3(t1, t2, 1.0);\n    }\n\n    return intersect;\n}\n\nfloat sdNefertiti(in vec3 p) {\n    if (length(p) > 1.2) return length(p) - 1.0;\n    p = p.yxz * vec3(1.0, 1.0, -1.0);\n    vec4 f0_0=sin(p.y*vec4(3.51,-3.13,-.40,.35)+p.z*vec4(-.86,-1.62,-3.98,3.57)+p.x*vec4(3.59,5.25,-3.42,4.02)+vec4(-8.49,-10.08,8.78,-6.04));\n    vec4 f0_1=sin(p.y*vec4(-1.63,-2.98,3.49,1.58)+p.z*vec4(.52,-4.85,-1.08,1.32)+p.x*vec4(.01,1.37,4.03,3.90)+vec4(-13.95,-7.99,4.53,-5.74));\n    vec4 f0_2=sin(p.y*vec4(-3.29,-1.02,3.65,4.56)+p.z*vec4(1.07,-.72,-1.34,-1.61)+p.x*vec4(-3.36,4.21,-4.95,-4.13)+vec4(-11.44,.60,-6.32,-2.63));\n    vec4 f0_3=sin(p.y*vec4(.58,-1.38,3.34,-1.44)+p.z*vec4(.05,3.23,-2.07,3.21)+p.x*vec4(3.88,-3.73,-1.75,-3.57)+vec4(-1.33,-11.77,-1.04,6.43));\n    vec4 f1_0=sin(mat4(.22,-.86,.36,-.54,-.07,-.24,-.06,-.15,.13,-.26,-.64,.19,.10,.03,.61,-.16)*f0_0+\n        mat4(.09,-.67,.43,.06,.04,.28,-.16,.14,.16,.74,-.06,.00,.27,.35,-.53,.29)*f0_1+\n        mat4(.66,.45,.54,-.43,.28,.24,-.25,.45,-.14,.19,-.08,-.00,-.22,.04,.13,-.13)*f0_2+\n        mat4(-.46,-.57,-.45,.26,.88,1.04,-.13,-.26,-.05,-.43,-.00,-.27,-.30,-1.25,-.02,-.62)*f0_3+\n        vec4(4.81,-.98,6.28,-.74))/1.0+f0_0;\n    vec4 f1_1=sin(mat4(-.27,.42,-.36,.32,-.08,-.20,-.26,-.02,.29,.29,.20,-.02,-.20,-.35,-.30,.02)*f0_0+\n        mat4(1.66,-1.29,-.06,-.21,.05,.08,.15,-.06,.27,-.36,.28,-.34,-.15,-.54,.26,-.63)*f0_1+\n        mat4(.35,.21,-.38,-.52,-.08,-.10,.06,.66,.07,-.16,-.32,-.12,.27,-.65,-.07,-.34)*f0_2+\n        mat4(-.07,.78,.46,-.01,.54,-.32,-.94,.17,-.29,-.23,-.20,.06,-.45,-.15,.62,.10)*f0_3+\n        vec4(-1.89,1.74,-.76,-.96))/1.0+f0_1;\n    vec4 f1_2=sin(mat4(-.87,-.24,1.15,-.29,-.15,.03,.38,-.11,.08,-.11,-.86,.64,-.49,.53,.66,-.60)*f0_0+\n        mat4(-.71,-1.29,-1.90,.82,-.04,.07,-.61,-.32,.46,1.63,-1.38,1.04,-.01,-.78,.18,.13)*f0_1+\n        mat4(-.07,1.04,-1.08,1.20,-.09,.41,-.85,-.72,-.32,-.48,-.20,.62,-.18,-.37,.04,.25)*f0_2+\n        mat4(.45,.78,-.19,.47,-.52,.66,-.36,.12,.28,.78,.43,.22,.38,-1.23,-.20,-.15)*f0_3+\n        vec4(.60,1.14,-6.51,-1.79))/1.0+f0_2;\n    vec4 f1_3=sin(mat4(-.41,.70,.41,-.73,.14,.38,.27,.20,.11,.11,-.59,.07,-.18,-.25,.42,-.10)*f0_0+\n        mat4(-.28,-.63,1.12,-.41,-.34,-.43,.19,-.04,.15,-.73,-1.26,.16,.68,.39,-.15,-.22)*f0_1+\n        mat4(-.42,-.54,-.83,-.19,.04,.28,.99,.48,.13,.10,-.20,-.20,-.35,.17,-.08,-.18)*f0_2+\n        mat4(.10,.49,-.16,-.17,.48,1.18,-.31,.88,.20,.61,.04,.08,-.23,-.93,.22,-1.21)*f0_3+\n        vec4(3.90,-.94,-3.29,-1.35))/1.0+f0_3;\n    vec4 f2_0=sin(mat4(.24,-.06,.61,-.51,-.19,.21,.23,-.06,1.15,.42,-.74,.79,-.63,-.64,.25,-.38)*f1_0+\n        mat4(.70,-.21,-1.04,2.07,.36,.20,-.16,.18,-.71,-.09,-.90,-.17,.97,.82,-.08,1.25)*f1_1+\n        mat4(-.15,-.55,.15,-.33,-.27,-.03,-.02,-.11,-.31,.22,-.10,-.01,-.15,-.20,-.03,.25)*f1_2+\n        mat4(.42,.42,-.54,.36,.36,.26,.07,.09,-.54,.20,.35,-.22,-.49,-.84,-.59,.14)*f1_3+\n        vec4(6.07,-2.37,6.11,-.52))/1.4+f1_0;\n    vec4 f2_1=sin(mat4(-.62,.67,-1.20,1.23,-.16,-.56,.31,.00,1.21,.40,.54,-.50,-.89,-.76,-.26,.18)*f1_0+\n        mat4(1.84,-1.51,1.06,-2.01,-.23,-.11,-.24,-.28,.13,.16,.10,-.21,.59,-.08,.78,-1.07)*f1_1+\n        mat4(-.72,.58,-.23,.79,-.03,.32,.04,.39,-.20,.50,-.66,-.22,.20,.31,-.44,-.76)*f1_2+\n        mat4(1.10,-.44,1.30,-.81,-.31,-.63,.87,-.41,-.23,-.10,-.34,-.12,.03,.43,-.75,-1.37)*f1_3+\n        vec4(-.97,-5.92,-1.36,4.12))/1.4+f1_1;\n    vec4 f2_2=sin(mat4(.18,-.08,-1.15,.44,-.04,.34,.32,-.10,-.36,-.11,-.88,.12,.53,.39,-.17,.05)*f1_0+\n        mat4(-1.51,-.88,-1.64,-1.42,.17,.32,-.64,-.39,.35,.01,.05,.30,-.67,.28,1.26,-1.26)*f1_1+\n        mat4(.64,.74,-2.54,.82,.16,.09,-.81,.17,-.41,.80,-.17,-.11,-.56,-.00,-1.03,-.64)*f1_2+\n        mat4(-.67,.07,1.58,-1.46,-.35,.17,-.50,-.03,.28,.45,-.10,-.61,.85,-.02,.70,-1.91)*f1_3+\n        vec4(-2.05,-2.64,-6.35,.91))/1.4+f1_2;\n    vec4 f2_3=sin(mat4(-.14,.63,-.10,-.10,.03,1.54,.35,-.15,.35,-1.13,-.32,.77,-.64,.85,-.27,-.90)*f1_0+\n        mat4(-.74,2.39,-1.83,.94,.27,-.73,-.13,.18,-.65,-1.80,.31,-.33,.57,-1.26,-.17,.36)*f1_1+\n        mat4(-.57,-2.96,.40,-.89,-.09,.41,-.20,-.64,-.00,-.05,.01,.26,.05,-.13,-.33,.43)*f1_2+\n        mat4(.74,1.25,-.18,.51,-.27,-.71,.35,-.53,.24,-.45,.16,.05,.50,-.22,.36,.63)*f1_3+\n        vec4(-1.12,3.49,-2.69,-4.95))/1.4+f1_3;\n    return dot(f2_0,vec4(-.08,-.10,.13,-.16))+\n        dot(f2_1,vec4(-.10,.07,-.07,-.04))+\n        dot(f2_2,vec4(-.13,-.06,-.02,-.03))+\n        dot(f2_3,vec4(-.11,.01,-.08,-.11))+\n        -0.175;\n}\n\nvec3 getStatueNormal(in vec3 p) {\n    vec3 e = vec3(0.01, 0.0, 0.0);\n    return normalize(vec3(sdNefertiti(p + e.xyy) - sdNefertiti(p - e.xyy),\n                          sdNefertiti(p + e.yxy) - sdNefertiti(p - e.yxy),\n                          sdNefertiti(p + e.yyx) - sdNefertiti(p - e.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 screenCenter = 0.5 * iResolution.xy;\n\n    vec2 mouse = vec2(iTime, 0.0);\n    if (iMouse.z > 0.0) {\n        mouse = (iMouse.xy - screenCenter) / iResolution.y * 3.14;\n    }\n\n    vec2 uv = (fragCoord - screenCenter) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 2.5);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    vec3 skyColor = mix(vec3(1.0, 0.6, 0.0), vec3(1.0, 1.0, 0.8), 0.5 + 0.5 * rd.y);\n\n    vec3 bSphereIntersect = IntersectSphere(ro, rd, 1.0);\n    if (bSphereIntersect.z > 0.5) {\n        float tMin = min(bSphereIntersect.x, bSphereIntersect.y);\n        float tMax = max(bSphereIntersect.x, bSphereIntersect.y);\n\n        vec3 p;\n        bool hitModel = false;\n        float t = tMin;\n        for (int i=0; i < 100; i++) {\n            p = ro + rd * t;\n            float d = sdNefertiti(p);\n            if (d < 0.001) {\n                hitModel = true;\n                break;\n            }\n\n            if (t > tMax) {\n                break;\n            }\n\n            t += d;\n        }\n\n        if (hitModel) {\n            vec3 n = getStatueNormal(p);\n            vec3 l = vec3(-0.58, 0.58, 0.58);\n            vec3 refr = refract(rd, n, 1.0003 / 1.5);\n\n            fragColor.rgb += vec3(0.7, 0.4, 0.0) + 0.1;\n\n            float lambertian = dot(n, l);\n            fragColor.rgb *= max(0.3, lambertian);\n\n            if (lambertian > 0.0) {\n                vec3 r = reflect(l, n);\n                float specAngle = max(0.0, dot(r, rd));\n                fragColor.rgb += max(0.0, pow(specAngle, 16.0)) / 3.0;\n            }\n        }\n\n        else {\n            fragColor.rgb += skyColor;\n        }\n    }\n\n    else {\n        fragColor.rgb += skyColor;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}