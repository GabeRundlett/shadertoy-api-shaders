{
    "Shader": {
        "info": {
            "date": "1512815248",
            "description": "Tile variant of [url]https://shadertoy.com/view/lllBRf[/url]\nCompute moments and covariant matrix to track video content (almost free using MIPmap).\nBottom inset: cleanup analyzed image.\nSwitch #define A   for the continuous version.",
            "flags": 32,
            "hasliked": 0,
            "id": "4lXfRl",
            "likes": 12,
            "name": "video tracking (almost free)",
            "published": 3,
            "tags": [
                "tracking",
                "quadratic",
                "integration",
                "fitting",
                "moments",
                "covariant",
                "gpmipmap"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 907
        },
        "renderpass": [
            {
                "code": "// Tile variant of https://shadertoy.com/view/lllBRf\n// see also: better working CubeMap variant ( because power-of-2 â†’ MIPmap not bugged ) : https://www.shadertoy.com/view/XlcyR2\n\n// --- tracking a grouped object using the moments in the image\n// almost free version (thanks MIPmap) of https://shadertoy.com/view/XtG3WK\n\n  #define L floor(min(t,8.-t))\n  #define A(ch)  textureLod(ch, vec2(.5/R+(floor(exp2(L)*u)+.5))/exp2(L), floor(log2(R.y))-L) // sum on sub-images\n//#define A(ch)  textureLod(ch, u, floor(log2(R.y))-L) // interpolated sum on floating-tile\n    \nvoid mainImage( out vec4 O,  vec2 U )\n{\n    vec2  R = iResolution.xy, u = U / R, B;\n    float t = mod(iTime-4.,8.),\n          I = A(iChannel1).z, r, det;            // I average\n    vec2  M = A(iChannel1).xy / I,               // shape barycenter: E(x),E(y)  \n         M2 = A(iChannel2).xy / I;               // M2 matrix: E(xx), E(yy) \n          r = A(iChannel2).z  / I;               //            E(xy)\n\n\tM2 = M2 - M*M; r = r - M.x*M.y;              // centered moments\n  //mat2 cov = mat2(M2.x, r, r, M2.y),           // covariant matrix\n  //    icov = inverse( cov );\n    det = M2.x*M2.y-r*r ;\n    mat2 icov = mat2(M2.y, -r, -r, M2.x) / det;  // inverse\n    \n    O = texture(iChannel0, u );                                             // draw image\n    B = mod(U,floor(R/exp2(L)))-.5; if (B.x*B.y==0.) O.b ++;\n    u *= 5.; u.x-=4.; if (fract(u)==u) O-=O, O.g = texture(iChannel0, u).a; // draw stencil\n    if (sqrt(det)/R.x/R.y>1e-5) if ( dot( (U-M),icov*(U-M) ) < 2. ) O.r++;  // draw covariant ellips ( quadratic form )\n}   // first test: floating-tile case can cause ill-formed covariant matrices.",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --- source video\n\nvoid mainImage( out vec4 O,  vec2 U ) {\n    U /= iResolution.xy;\n    O   = texture(iChannel0,U);            // source image\n    O.a = max(0.,2.*O.r-1.);               // stencil to analyze\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// --- compute M1 moments E(x),E(y) and M0=E(I) in MIPmap LODs. (M1 to be normalized by M0) \n\nvoid mainImage( out vec4 O, vec2 U ) {\n    O = vec4( U, 1, 0 ) * texture(iChannel0,U/iResolution.xy ).a;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// --- compute M2 matrix E(xx),E(yy),E(xy) in MIPmap LODs (to be normalized by Imean)\n\nvoid mainImage( out vec4 O, vec2 U ) {   \n    O = vec4( U*U, U.x*U.y, 0 ) * texture(iChannel0,U/iResolution.xy).a;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}