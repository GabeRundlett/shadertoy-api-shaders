{
    "Shader": {
        "info": {
            "date": "1573120022",
            "description": "Screw",
            "flags": 0,
            "hasliked": 0,
            "id": "ws3SDl",
            "likes": 12,
            "name": "Turn of the Screw",
            "published": 3,
            "tags": [
                "raymarch",
                "kinematics",
                "screw"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 319
        },
        "renderpass": [
            {
                "code": "// \"Turn of the Screw\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Fbm2 (vec2 p);\n\nvec3 ltDir, qHit;\nfloat tCur, dstFar, tPhs;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, len, r, a;\n  dMin = dstFar;\n  len = 3.;\n  q = p;\n  q.xy = Rot2D (q.xy, -4. * len * pi * tPhs);\n  q.z -= len * (1. - 2. * tPhs);\n  a = (length (q.xy) > 0.) ? atan (q.y, - q.x) / (2. * pi) : 0.;\n  r = 0.3 + 0.2 * q.z / len - 0.2 * abs (sin (2. * pi * (q.z - a)));\n  r = max (0.07, r);\n  d = 0.7 * PrCylDf (q, r, len);\n  DMINQ (1);\n  q.z -= len - 0.2;\n  d = max (PrSphDf (q, 0.9), - q.z + 0.2);\n  q.z -= 0.9;\n  d = max (d, - min (PrBox2Df (q.xz, vec2 (0.1, 0.4)), PrBox2Df (q.yz, vec2 (0.1, 0.4))));\n  DMINQ (2);\n  q = p;\n  q.z -= -0.5;\n  d = PrBoxDf (q, vec3 (2.5, 2.5, 0.5));\n  DMINQ (3);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = 0; j < 60; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.03 * d, h));\n    d += clamp (h, 0.05, 0.4);\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nfloat BgPat (vec3 rd)\n{\n  vec3 tm, qn, u;\n  vec2 q;\n  tm = -1. / max (abs (rd), 0.0001);\n  qn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  u = max (max (tm.x, tm.y), tm.z) * rd;\n  q = mod (8. * vec2 (dot (u.zxy, qn), dot (u.yzx, qn)), vec2 (1.));\n  return min (SmoothBump (0.16, 0.84, 0.06, q.x), SmoothBump (0.16, 0.84, 0.06, q.y));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  float dstObj, nDotL, sh, t;\n  bool refBg;\n  t = mod (0.03 * tCur, 1.);\n  tPhs = SmoothBump (0.25, 0.75, 0.23, t);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    refBg = (idObj == 1 || idObj == 2 && length (qHit + vec3 (0., 0., 0.9)) > 0.899 &&\n       qHit.z > -0.69);\n    if (idObj == 1 || idObj == 2) {\n      col4 = vec4 (0.7, 0.7, 0.6, 0.2) * (1. -\n         0.07 * cos (8. * atan (qHit.y, - qHit.x)));\n    } else if (idObj == 3) {\n      col4 = vec4 (0.5, 0.3, 0.1, 0.05);\n      if (abs (vn.z) > 0.99) col4.rgb *= 1. - 0.3 * Fbm2 (qHit.xy * vec2 (4., 1.));\n      else col4.rgb *= 0.95 + 0.05 * cos (16. * pi * qHit.z);\n      if (vn.z < -0.99) col4.rgb *= mix (0.5 + 0.5 * smoothstep (0.05, 0.2, length (qHit.xy)),\n         1., smoothstep (0.2, 0.24, abs (t - 0.75)));\n    }\n    nDotL = max (dot (vn, ltDir), 0.);\n    if (idObj == 1 || idObj == 2) {\n      nDotL *= nDotL;\n      nDotL *= nDotL;\n    }\n    sh = ObjSShadow (ro, ltDir);\n    col = col4.rgb * (0.2 + 0.1 * max (dot (vn, - ltDir), 0.) + 0.8 * sh * nDotL) +\n       col4.a * step (0.95, sh) * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 16.);\n    if (refBg) col = mix (col, vec3 (1.) * (0.9 + 0.1 * BgPat (reflect (rd, vn))), 0.2);\n  } else {\n    col = mix (vec3 (0.07, 0.1, 0.07), vec3 (1.) * (0.9 + 0.1 * BgPat (rd)), 0.1);\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define AA  1   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.7 * pi;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 2. * pi * mPtr.y;\n  } else {\n    az += 0.01 * pi * tCur;\n    el -= 0.2 * pi * sin (0.05 * pi * tCur);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -30.);\n  zmFac = 5.;\n  dstFar = 50.;\n  ltDir = vuMat * normalize (vec3 (-1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}