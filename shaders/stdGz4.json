{
    "Shader": {
        "info": {
            "date": "1635808115",
            "description": "By removing any reference to the current pixel position in the seeding it's possible to animation all iterations of the suddivision. \n\n(Mouseable)\n\n3D coming soon",
            "flags": 0,
            "hasliked": 0,
            "id": "stdGz4",
            "likes": 74,
            "name": "Fully Animated Subdivision",
            "published": 3,
            "tags": [
                "2d",
                "mouse",
                "subdivision",
                "boxes"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 1624
        },
        "renderpass": [
            {
                "code": "// Fork of \"Rectagular Subdivisor\" by Tater. https://shadertoy.com/view/7sV3WD\n// 2021-09-21 21:08:49\n\n#define pi 3.1415926535\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\nfloat h11 (float a) {\n    return fract(sin((a)*12.9898)*43758.5453123);\n}\n//iq palette\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n    return a + b*cos(2.*pi*(c*t+d));\n}\nfloat box(vec2 p, vec2 b){\n    vec2 d = abs(p)-b;\n    return max(d.x,d.y);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 R = iResolution.xy;\n    vec2 uv = (fragCoord-0.5*R.xy)/R.y;\n    vec3 col = vec3(0);\n    float t = mod(iTime,6000.)*0.8;\n    float px = 1./iResolution.y;\n    \n    vec2 dMin = vec2(-0.5);\n    vec2 dMax = vec2(0.5);\n    dMin.x*=R.x/R.y;\n    dMax.x*=R.x/R.y;\n    vec2 dim = dMax - dMin;\n    float id = 0.;\n    float ITERS = 7.;\n    float seed = 0.4;\n\n \n    vec2 M = iMouse.xy/iResolution.xy;\n    \n    float MIN_SIZE = 0.01;\n    //float ITERS = its;\n    float BORDER_SIZE = 0.003;\n    float MIN_ITERS = 1.;\n\n    \n    //BIG THANKS to @0b5vr for letting me use his cleaner subdiv implementation\n    //https://www.shadertoy.com/view/NsKGDy\n    vec2 diff2 = vec2(1);\n    for(float i = 0.;i<ITERS;i++){\n    \n        \n        // divide the box into quads\n        //Big thanks to @SnoopethDuckDuck for telling me about tanh(sin(x)*a)\n        vec2 divHash=tanh(vec2(sin(t*pi/3.+id+i*t*0.05),cos(t*pi/3.+h11(id)*100.+i*t*0.05))*7.)*0.35+0.5;\n        \n        //Less agressive animation\n        //divHash=vec2(sin(t*pi/3.+id),cos(t*pi/3.+h11(id)*100.))*0.5+0.5;\n        \n        \n        \n        if(iMouse.z>0.5){\n        divHash = mix(divHash,M,0.3);\n        }\n        \n\n        vec2 divide = divHash * dim + dMin;\n        \n        //Clamp division line\n        divide = clamp(divide, dMin + MIN_SIZE+0.01, dMax - MIN_SIZE-0.01);\n        \n        \n        //Find the minimum dimension size\n        vec2 minAxis = min(abs(dMin - divide), abs(dMax - divide));\n        float minSize = min( minAxis.x, minAxis.y);\n        \n        //if minimum dimension is too small break out\n        bool smallEnough = minSize < MIN_SIZE;\n        if (smallEnough && i + 1. > MIN_ITERS) { break; }\n        \n        // update the box domain\n        dMax = mix( dMax, divide, step( uv, divide ));\n        dMin = mix( divide, dMin, step( uv, divide ));\n\n        //Deterministic seeding for future divisions \n        diff2 =step( uv, divide)-\n        vec2(h11(diff2.x)*10.,h11(diff2.y)*10.);\n        \n        // id will be used for coloring \n        id = length(diff2)*100.0;\n\n        // recalculate the dimension\n        dim = dMax - dMin;\n    }\n    \n    //Calculate 2d box sdf\n    vec2 center = (dMin + dMax)/2.0;\n    float a = box(uv-center,dim*0.5);\n    //a = length(uv-center)-min(dim.x,dim.y)*0.5;\n    \n    //Color box\n    id = h11(id)*1000.0;\n    vec3 e = vec3(0.5);\n    vec3 al = pal(fract(id)*0.75+0.8,e*1.3,e,e*2.0,vec3(0,0.33,0.66));\n    col = clamp(al,0.,1.);\n    col-=smoothstep(-px,px,a+BORDER_SIZE);\n    //col = vec3(-a*10.0);\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}