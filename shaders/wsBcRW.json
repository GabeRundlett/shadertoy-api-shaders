{
    "Shader": {
        "info": {
            "date": "1586180129",
            "description": "Pappus' theorem on the hyperbolic plane, using the hyperboloid model.",
            "flags": 0,
            "hasliked": 0,
            "id": "wsBcRW",
            "likes": 6,
            "name": "Hyperbolic Pappus",
            "published": 3,
            "tags": [
                "hyperbolic",
                "pappus",
                "hyperboloid"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 364
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Pappus's theorem on Hyperbolic Plane.\n//\n// Doing geometry on the hyperbolic plane.\n//\n// No animation, just the mouse, which moves things around.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nbool halfspace = false; // Set true for the half-plane model!\n\nfloat rdot(vec3 r1, vec3 r2) {\n  // Minkowski inner product\n  return dot(vec3(1,1,-1)*r1,r2);\n}\n\n// Normalize a point\nvec3 hnormalize(vec3 p) {\n  if (p.z < 0.0) p = -p;\n  return p/sqrt(-rdot(p,p));\n}\n\n// Normalize a line\nvec3 lnormalize(vec3 p) {\n  return p/sqrt(rdot(p,p));\n}\n\n// Distance from point\n// cosh(x) = y = 1 + 0.5*x*x + O(x^4)\n// so for x close to 1 (so y is small)\n// acosh(y) = x = sqrt(2*(y-1)) is good approximation\nfloat hpoint(vec3 p, vec3 q) {\n  //return acosh(-rdot(p,q));\n  return sqrt(-2.0*(rdot(p,q)+1.0));\n}\n\n// Distance from line\nfloat hline(vec3 p, vec3 q) {\n  return abs(rdot(p,q));\n}\n\n// We want that rdot(p,hcross(p,q)) = rdot(q,hcross(p,q)) = 0\nvec3 hcross(vec3 p, vec3 q) {\n  return cross(p,q)*vec3(-1,-1,1);\n}\n\nvec3 linejoin(vec3 p, vec3 q) {\n  return lnormalize(hcross(p,q));\n}\n\nvec3 pointjoin(vec3 p, vec3 q) {\n  return hnormalize(hcross(p,q));\n}\n\nvec2 rotate(in vec2 p, in float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nvec3 color(vec3 p, float time) {\n  vec3 col = vec3(0.2);\n  vec3 A0 = hnormalize(vec3(-0.5,0.8,1));\n  vec3 C0 = hnormalize(vec3(0.4,0.9,1));\n  float k0 = 0.5;\n  vec3 B0 = hnormalize(k0*A0+(1.0-k0)*C0);\n  vec3 A1 = hnormalize(vec3(-0.5,-0.8,1));\n  vec3 C1 = hnormalize(vec3(0.9,-0.3,1));\n  float k1 = 0.6;\n  vec3 B1 = hnormalize(k1*A1+(1.0-k1)*C1);\n  vec3 L0 = linejoin(A0,C0);\n  vec3 L1 = linejoin(A1,C1);\n  vec3 AB0 = linejoin(A0,B1);\n  vec3 AB1 = linejoin(A1,B0);\n  vec3 BC0 = linejoin(B0,C1);\n  vec3 BC1 = linejoin(B1,C0);\n  vec3 CA0 = linejoin(C0,A1);\n  vec3 CA1 = linejoin(C1,A0);\n  vec3 P = pointjoin(AB0,AB1);\n  vec3 Q = pointjoin(BC0,BC1);\n  \n  if (true) {\n    float d = 1e8;\n    d = min(d,hline(p,L0));\n    d = min(d,hline(p,L1));\n    d = min(d,hline(p,AB0));\n    d = min(d,hline(p,AB1));\n    d = min(d,hline(p,BC0));\n    d = min(d,hline(p,BC1));\n    d = min(d,hline(p,CA0));\n    d = min(d,hline(p,CA1));\n    d = min(d,hline(p,linejoin(P,Q)));\n    col = mix(vec3(1,1,0),col,smoothstep(0.01,0.02,d));\n  }\n  if (true) {\n    float d = 1e8;\n    d = min(d,hpoint(p,A0));\n    d = min(d,hpoint(p,B0));\n    d = min(d,hpoint(p,C0));\n    d = min(d,hpoint(p,A1));\n    d = min(d,hpoint(p,B1));\n    d = min(d,hpoint(p,C1));\n    d = min(d,hpoint(p,P));\n    d = min(d,hpoint(p,Q));\n    d = min(d,hpoint(p,pointjoin(CA0,CA1)));\n    col = mix(vec3(1,0,0),col,smoothstep(0.05,0.06,d));\n  }\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec3 aacol = vec3(0);\n  float AA = 2.0;\n  for (float i = 0.0; i < AA; i++) {\n    for (float j = 0.0; j < AA; j++) {\n      // Normalized pixel coordinates (from 0 to 1)\n      vec2 z = (2.0 * (fragCoord+vec2(i,j)/AA) - iResolution.xy)/iResolution.y;\n      if (halfspace) {\n        z.y += 2.0;\n        z *= 2.0/dot(z,z);\n        z.y -= 1.0;\n      }\n      if (iMouse.x > 0.0) {\n        vec2 m = (2.0 * iMouse.xy -iResolution.xy) / iResolution.y;\n        // Map origin to m with an inversion\n        float k = 1.0/dot(m,m);\n        vec2 c = k*m; // m inverted in unit circle\n        z -= c;\n        z *= (k-1.0)/dot(z,z);\n        z += c;\n        z.x = -z.x;\n      }\n      z = rotate(z,0.1*iTime);\n      float r2 = dot(z,z);\n      vec3 col = vec3(0);\n      if (r2 < 1.0) {\n        vec3 p = vec3(2.0*z,1.0+r2)/(1.0-r2);\n        col = color(p,iTime*0.2);\n      }\n      aacol += col;\n    }\n  }\n  fragColor = vec4(aacol/(AA*AA),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}