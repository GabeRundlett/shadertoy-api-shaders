{
    "Shader": {
        "info": {
            "date": "1631198802",
            "description": "shader",
            "flags": 0,
            "hasliked": 0,
            "id": "NsKGzD",
            "likes": 7,
            "name": "livecoding_2021_09_09",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "butadiene",
            "viewed": 314
        },
        "renderpass": [
            {
                "code": "#define time mod(iTime,30.)\nfloat PI = acos(-1.);\n\nmat2 rot(float r){\n    return mat2(cos(r),sin(r),-sin(r),cos(r));\n  }\n\nfloat box(vec3 p,vec3 s){\n  vec3 q = abs(p);\n  vec3 m = max(s-q,0.);\n  return length(max(q-s,0.))-min(min(m.x,m.y),m.z);\n  }\n  \n  vec2 pmod(vec2 p,float n){\n    float np = 2.0*PI/n;\n    float r = atan(p.x,p.y)-0.5*np;\n    r = mod(r,np)-0.5*np;\n    return length(p)*vec2(cos(r),sin(r));\n    }\n  \n  \n  vec3 modfunc(vec3 p,float ss){\n    p.xz = pmod(p.xz,6.);\n    p.x -= ss;\n    return p;\n    }\n\nvec4 dist(vec3 p){\n  if(time>24.&&time<30.) p.z += 6.,p.y += 20.*time;\n  float kz = 30.;\n  if(time>18.&&time<24.)p = modfunc(p,22.);\n  if(time>24.&&time<30.)p = modfunc(p,22.),p.y = mod(p.y,kz)-0.5*kz;\n \n  float slllt = time;\n  if(time>24.&&time<30.)slllt = 23.9;\n  float sct = floor(mod(slllt*0.5,3.))+clamp(mod(slllt*1.5,3.),0.0,1.0);\n  if(time>24.&&time<30.)slllt =time;\n  float ksst = slllt+0.1;\n    \n  float sca = floor(ksst*0.5)+clamp(mod(ksst*1.5,3.),0.0,1.0);\n  float spt = 0.56+sct;\n    float d = box(p+vec3(0.,-0.3,-1.),vec3(spt*4.));\n  \n  float dc = 0.1;\n  for(int i = 0;i<1;i++){    \n    p = sin(clamp(p,-spt*PI,spt*PI))-0.1;\n    p.xz *= rot(0.3+sca);\n    p.yz *= rot(0.4+sca);\n    p.xy *= rot(sca);\n    p = abs(p)+0.;\n    }\n    d = max(d,box(p-vec3(0.3,0.6,0.3),vec3(0.2,0.5,0.2)));\n    \n        \n    p = sin(clamp(p,-spt*PI,spt*PI))-0.1;\n    p.xz *= rot(0.3+sca);\n    p.yz *= rot(0.4+sca);\n    p.xy *= rot(sca);\n    p = abs(p)+0.;\n    vec3 sssp = p;\n    \n        p = sin(clamp(p,-spt*PI,spt*PI))-0.1;\n    p.xz *= rot(0.3+sca);\n    p.yz *= rot(0.4+sca);\n    p.xy *= rot(sca);\n    p = abs(p)+0.;\n    \n    vec3 sc = vec3(0.02)+0.04*sin(PI*clamp(mod(time*1.5,3.),0.0,1.0));\n    sc += p.zxy*0.1+0.1*sssp;\n    sc *= 0.5;\n  vec3 col =sc;\n  return vec4(col,d);\n  }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec2 p =uv- 0.5;\n\tp /= vec2(iResolution.y / iResolution.x, 1);\n  float ra = 20.0;\n  if(time<6.) {ra = 20.0;}\n  else if(time<12.){ra = 10.0;}\n  if(time>18.&&time<24.) ra = 40.;\n  if(time>24.&&time<30.) ra = 1.3;\n  float rh =5.5;\n  if(time>12.&&time<18.)rh = 10.;\n  if(time>18.&&time<24.)rh = 14.;\n  if(time>24.&&time<30.)rh = 5.3;\n  float kt = time*0.3;\n  vec3 ro = vec3(ra*cos(kt),rh,ra*sin(kt));\n  vec3 ta = vec3(0);\n  \n  \n  \n  vec3 cdir = normalize(ta-ro);\n  vec3 side = cross(cdir,vec3(0,1,0));\n  vec3 up = cross(side,cdir);\n  float fov = 0.6;\n  vec3 rd = normalize(side*p.x+up*p.y+fov*cdir);\n  float d,t = 0.0;\n  float esp = 0.00001;\n  vec3 col = vec3(0.0);\n  vec3 ac = vec3(0.0);\n  for(int i = 0;i<127;i++){\n    vec4 rsd = dist(ro+rd*t);\n    d = rsd.w;\n    t += d;\n    if(d<esp) break;\n    ac += exp(-3.0*d)*rsd.xyz;\n    }\n  \n  col = 0.6*vec3(ac);\n  \n  col = pow(clamp(col,0.,1.),vec3(1.3));\n    \n  vec3 fincol =col;// vec3(p,0.);\n  \n   fragColor = vec4(fincol,1.);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}