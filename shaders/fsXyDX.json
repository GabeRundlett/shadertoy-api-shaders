{
    "Shader": {
        "info": {
            "date": "1643116454",
            "description": "My participation to genuary 2022\nCombine two (or more) of your pieces from previous days to make a new piece.\nIt's heavy as hell I might optimize it later\nCode is messy I know :p\nhttps://www.shadertoy.com/view/NsfyWj\nhttps://www.shadertoy.com/view/fslyzl",
            "flags": 32,
            "hasliked": 0,
            "id": "fsXyDX",
            "likes": 11,
            "name": "Genuary 2022 - Day21",
            "published": 3,
            "tags": [
                "architecture",
                "genuary",
                "2022"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 384
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(0.,f*factor);\n        if (nuv.y > 0. && nuv.y < 1.)\n            col += texture(iChannel0, uv+vec2(0.,f*factor)).xyz/float(steps);\n    }\n    \n    vec3 rgb = texture(iChannel1, uv).xyz+GLOW_OPACITY*pow(col, vec3(GLOW_POW));\n    rgb = pow(rgb*1.2, vec3(2.2));\n    vec2 cuv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    //rgb *= 1.-sat(length(cuv*2.)-.5);\n    //rgb += vec3(.5)*(1.-sat((abs(cuv.x)-.115)*400.));\n\n    fragColor = vec4(rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define GLOW_SAMPLES 80\n#define GLOW_DISTANCE 0.2\n#define GLOW_POW .8\n#define GLOW_OPACITY .4\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n\nmat2 r2d(float a) { float c= cos(a), s = sin(a); return mat2(c, -s, s, c); }\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 1.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+(r*uv.x+u*uv.y)*fov);\n}\nfloat _sqr(vec2 uv, vec2 s)\n{\n    vec2 l = abs(uv)-s;\n    return max(l.x, l.y);\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(l.x,max(l.y, l.z));\n}\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\nfloat _cucube(vec3 p, vec3 s, vec3 th)\n{\n    vec3 l = abs(p)-s;\n    float cube = max(max(l.x, l.y), l.z);\n    l = abs(l)-th;\n    float x = max(l.y, l.z);\n    float y = max(l.x, l.z);\n    float z = max(l.x, l.y);\n    \n    return max(min(min(x, y), z), cube);\n}\n// Stolen from 0b5vr here https://www.shadertoy.com/view/ss3SD8\nfloat hash11(float p)\n{\n    return (fract(sin((p)*114.514)*1919.810));\n}\n\n// Thanks IQ\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n// Thanks IQ\nfloat _rsqr(vec2 uv, vec2 s, float r)\n{\n    vec2 l = abs(uv)-s;\n    return min(length(max(l, 0.)+min(max(l.x, l.y), 0.))-r, max(l.x, l.y));\n}\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\n// Below code is taken from https://www.shadertoy.com/view/slKGzy\n//noise from iq's www.shadertoy.com/view/lsf3WH\nfloat hash(vec2 p) {\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\nfloat noise( in vec2 p ){\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\nfloat fracNoise(vec2 uv){\n    uv *= 8.0;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\tfloat fr  = 0.5000*noise( uv ); \n    uv = m*uv;\n\tfr += 0.2500*noise( uv ); uv = m*uv;\n\tfr += 0.1250*noise( uv ); uv = m*uv;\n\tfr += 0.0625*noise( uv ); uv = m*uv;\n    fr = 0.5 + 0.5*fr;\n    return fr;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define GROUND_MAT 0.\n#define WALL_MAT 1.\n#define BACK_LEFT_WALL 2.\n#define FRONT_LEFT_WALL 3.\n#define CEILING_MAT 4.\n#define RIGHT_WALL_MAT 5.\n#define FEET_MAT 6.\n#define SCREEN_MAT 7.\n#define BUTTON_MAT 8.\n#define BORDER_MAT 9.\n#define TV_MAT 10.\n#define GRID_MAT 11.\n\n\nstruct matProp\n{\n    vec3 SpecularColor;\n    vec3 DiffuseColor;\n    float Glossiness;\n    vec3 EmissionColor;\n};\n\nfloat seed;\nfloat rand()\n{\n    seed++;\n    return hash11(seed);\n}\n\n\nvec2 map(vec3 p)\n{\n\n    vec2 acc = vec2(10000., -1.);\n    \n    acc = _min(acc, vec2(-p.y, GROUND_MAT));\n    float wallth = .2;\n    // RightWall\n    float rightWall = _cube(p-vec3(1.,0.,0.), vec3(wallth,5., 10.));\n    rightWall = max(rightWall, -(_sqr(p.zy-vec2(-1.,-2.2), vec2(.5,1.3))));\n    rightWall = max(rightWall, -(_sqr(p.zy-vec2(-3.,-2.2), vec2(.5,1.3))));\n    acc = _min(acc, vec2(rightWall, RIGHT_WALL_MAT));\n    \n    float gridRep = 0.3;\n    vec3 pGrid = p;\n    vec3 pGrid2 = p;\n    pGrid.y = mod(pGrid.y+gridRep*.5, gridRep)-gridRep*.5;\n    pGrid2.z = mod(pGrid2.z+gridRep*.5, gridRep)-gridRep*.5;\n    float rightWindowGrids = _cube(pGrid-vec3(1.,0.,0.), vec3(.025,.025,5.));\n    rightWindowGrids = min(rightWindowGrids, _cube(pGrid2-vec3(1.,0.,0.), vec3(.025,5.,.025)));\n    acc = _min(acc, vec2(rightWindowGrids, WALL_MAT));\n    \n    // Left nearest wall\n    float leftNearWall = _cube(p-vec3(-4.,0.,-2.), vec3(3.,5., wallth));\n    leftNearWall = max(leftNearWall, -(length(p.xy-vec2(-2.2,-1.5))-0.7));\n    leftNearWall = max(leftNearWall, -(_sqr(p.xy-vec2(-2.2,-3.), vec2(.2,.5))));\n    acc = _min(acc, vec2(leftNearWall, FRONT_LEFT_WALL));\n   \n    // Back wall\n    acc = _min(acc, vec2(_cube(p-vec3(-2.,0.,0.), vec3(3.,5., wallth)), BACK_LEFT_WALL));\n    \n    acc = _min(acc, vec2(max(p.y+4.5, p.x-.8), CEILING_MAT));\n    \n    vec3 ptv = p-vec3(-2.,-0.7,-2.5);\n    float tv = _cube(ptv, vec3(0.5,0.4,0.3));\n    \n    acc = _min(acc, vec2(tv, TV_MAT));\n\n    vec3 pfeet = ptv;\n    pfeet.xy *= r2d(.2*sign(pfeet.x));\n    pfeet.z = abs(pfeet.z);\n    pfeet.x = abs(pfeet.x);\n    pfeet -= vec3(.3,0.,0.1);\n    float feet = max(length(pfeet.xz)-.02, -pfeet.y);\n    acc = _min(acc, vec2(feet, FEET_MAT));\n    \n    \n    float border = _cucube(ptv-vec3(-0.35,0.,-.11), vec3(.1,.35,.2), vec3(.01));\n    acc = _min(acc, vec2(border, BORDER_MAT));\n\n    float repgrid = .03;\n    vec3 pgrid = ptv-vec3(-0.35,0.,-.11);\n    pgrid.y = mod(pgrid.y+repgrid*.5, repgrid)-repgrid*.5;\n    float grid = _cube(pgrid, vec3(.1,.01,.22));\n    grid = max(max(grid, -p.y-.8), p.y+.4);\n    acc = _min(acc, vec2(grid, GRID_MAT));\n\n    float bordertv = _cucube(ptv-vec3(0.,0.,-.02), vec3(0.5,0.4,0.3), vec3(.01));\n    acc = _min(acc, vec2(bordertv, BORDER_MAT));\n\n    vec3 pbtn = ptv-vec3(-0.35,-0.25,-.3);\n    float btn = max(length(pbtn.xy)-.05, abs(pbtn.z)-.05);\n    acc = _min(acc, vec2(btn, BUTTON_MAT));\n\n    vec3 pscreen = ptv-vec3(0.125,0.,-.3);\n    float screen = max(_rsqr(pscreen.xy, vec2(.28,.27), .05), abs(pbtn.z)-.02);\n    acc = _min(acc, vec2(screen, SCREEN_MAT));\n\n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.001,0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\n\nvec3 accLight;\nvec3 trace(vec3 ro, vec3 rd, int steps, float maxDist)\n{\n    accLight = vec3(0.);\n    vec3 p = ro;\n    for (int i = 0; i < steps && distance(p, ro) < maxDist;++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.001)\n            return vec3(res.x, distance(p, ro), res.y);\n        /*if (res.y == FLAME_MAT)\n        accLight += vec3(0.941,0.376,0.000)*(1.-sat(res.x/.05))*.05;*/\n        p+= rd*res.x*.25;//*.0125;\n    }\n    return vec3(( distance(p, ro) < maxDist ? -1. : -2.));\n}\n\nfloat getShadow(vec3 ro, vec3 lpos, int steps)\n{\n    float maxDist = distance(ro, lpos);\n    vec3 rd = -normalize(lpos-ro);\n    vec3 p = ro;\n    for (int i = 0; i < steps && distance(p, ro) < maxDist;++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.001)\n            return 0.;\n        p+= rd*res.x*.125;\n    }\n    return float(distance(p, ro) > maxDist);\n}\nvec3 getEnv(vec3 rd)\n{\n    return vec3(0.);\n    //return 5.*texture(iChannel2, rd*vec3(1.,-1.,1.)).xyz*vec3(0.941,1.000,1.000);//*.25;\n    vec2 uv = vec2(atan(rd.z, rd.x)/PI, (acos(rd.y)/PI-.5)*2.);\n    float stars = pow(texture(iChannel0, uv*5.*vec2(2.,1.)).x, 10.)*sat(-rd.y);\n    vec3 back = mix(vec3(0.910,0.671,0.588), vec3(0.176,0.180,0.345)*.75, pow(sat(-rd.y*2.+.2), .3)); \n    back += vec3(0.455,0.871,0.925)*pow(sat(-(rd.x-2.1)*.4+rd.y*2.),1.2)*.5;\n    back += vec3(0.733,0.416,0.208)*pow(sat(-(rd.x-1.9)*.4+rd.y*2.),3.);\n    back *= 1.-sat(length((uv-vec2(.75,0.1))*.5*vec2(2.,2.)));\n    return back+ vec3(1.)*stars+vec3(.2,.4,.7)*stars*1.;\n}\n\nmatProp getMat(float idMat, vec3 p, vec3 n)\n{\n    matProp mat;\n    mat.SpecularColor = vec3(.05);\n    mat.DiffuseColor = n*.5+.5;\n    mat.Glossiness = .7;\n    \n    mat.EmissionColor = vec3(0.);\n    \n    if (idMat == GROUND_MAT)\n    {\n        mat.DiffuseColor = vec3(.6)*pow(texture(iChannel3, p.xz*r2d(PI*.5)*1.).x,.25);\n        mat.SpecularColor = vec3(1.);\n        mat.Glossiness = 1.;\n    }\n    if (idMat == FRONT_LEFT_WALL)\n    {\n        mat.DiffuseColor = vec3(0.898,0.600,0.263);\n    }\n    if (idMat == RIGHT_WALL_MAT)\n    {\n        mat.DiffuseColor = vec3(1.000,0.478,0.514);\n    }\n    if (idMat == BACK_LEFT_WALL)\n    {\n        mat.DiffuseColor = vec3(0.149,0.329,0.259);\n    }\n    if (idMat == BORDER_MAT)\n    {\n        mat.DiffuseColor = vec3(.1);\n        mat.SpecularColor = vec3(.5);\n        mat.Glossiness = .8;\n    }\n    if (idMat == FEET_MAT)\n    {\n        mat.DiffuseColor = vec3(.1);\n        mat.SpecularColor = vec3(.5);\n        mat.Glossiness = .8;\n    }\n    if (idMat == BUTTON_MAT)\n    {\n        mat.DiffuseColor = vec3(.1);\n    }\n    if (idMat == GRID_MAT)\n    {\n        mat.DiffuseColor = vec3(.2);\n        mat.SpecularColor = vec3(.5);\n        mat.Glossiness = .5;\n    }\n    if (idMat == TV_MAT)\n    {\n        mat.DiffuseColor = texture(iChannel0, p.xz).xxx*vec3(0.361,0.255,0.200);\n    }\n    if (idMat == SCREEN_MAT)\n    {\n        mat.DiffuseColor = mat.SpecularColor = vec3(0.);\n        mat.EmissionColor = 5.*texture(iChannel2, (p.xy*vec2(1.,-1.)+vec2(.2,-0.05))).xyz;\n    }\n    return mat;\n}\n\n\nvec3 getDirectLighting(vec3 res, vec3 rd, vec3 p, vec3 n)\n{\n    matProp mat = getMat(res.z, p, n);\n    vec3 col = vec3(0.);//n*.5+.5;\n    vec3 lpos = vec3(-40.,15.,-10.)*.35+1.*(vec3(rand(), rand(), rand())-.5);\n    vec3 ldir= p-lpos;\n    vec3 lcol = vec3(0.384,0.812,0.996)*1.;\n    vec3 h = normalize(rd+ldir);\n\n    float ndotl = sat(dot(n, normalize(ldir)));\n    \n    col += mat.DiffuseColor*.15;\n\n    if (getShadow(p+n*0.01,  lpos, 256) > 0.5)\n    {\n        vec3 spec = lcol*mat.SpecularColor*pow(sat(dot(n,h)), mat.Glossiness);\n        vec3 remainingLight = max(lcol-spec, vec3(0.));\n        col += spec+mat.DiffuseColor*ndotl*remainingLight;\n    }\n    col += mat.EmissionColor;\n    \n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    float xpos = sin(iTime*0.+.5)*2.2;\n    float offy = -.85;\n    float zoff = 5.9;\n    //uv *= r2d(.25);\n    vec3 dof = (vec3(rand(), rand(), rand())-.5)*.008*0.;\n    vec3 ro = vec3(-5.,-1.7,-8.1)*.9+dof;\n    vec3 ta = vec3(0.5,-.7,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv)-dof*0.0025;\n    vec3 res = trace(ro, rd, 4096*2, 15.);\n    float maxdist = 20.;\n    float dist = maxdist;\n    if (res.y > 0.)\n    {\n        dist = res.y;\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = n*.5+.5;\n        col = getDirectLighting(res, rd, p, n);\n        //col += accLight;\n        if (true)\n        {\n            vec3 lastCol = col;\n            for (int i = 0; i < 3; ++i)\n            {\n                \n                matProp mat = getMat(res.z, p, n);\n                float doSpec = sat((rand()-0.5)*400.0); // 0 or 1\n                \n                float spec = mat.Glossiness;\n                vec3 glossSamplePos = normalize(vec3(rand(), rand(), rand())-.5)*spec;\n                vec3 refl = normalize(reflect(rd, n)+spec+glossSamplePos);\n                refl = mix(refl, normalize(vec3(rand(), rand(), rand())-.5), doSpec);\n            \n                if (dot(refl, n) < 0.0 && doSpec < 0.5)\n                    refl = -refl;\n                vec3 resrefl = trace(p+n*0.01, refl, 4096*2, 7.);\n                if (resrefl.y > 0.)\n                {\n                    vec3 prefl = p+refl*resrefl.y;\n                    vec3 nrefl = getNorm(prefl, resrefl.x);\n                    vec3 retCol = getDirectLighting(resrefl, refl, prefl, nrefl);\n                    col += retCol;\n                    lastCol = retCol;\n                    n = nrefl;\n                    p = prefl;\n                }\n                else\n                {\n                    if (res.x != -1.)\n                        col += getEnv(refl)*mix(mat.DiffuseColor, mat.SpecularColor, doSpec);\n                    break;\n                }\n                \n                rd = refl;\n            }\n\n\n        }\n    col = mix(col, vec3(0.), sat(exp(-dist*.05-.1)));\n    }\n    else\n    {\n        col = getEnv(rd);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    float scaleF = 1.;\n    uv *= scaleF;\n    seed=texture(iChannel0,uv).x;\n    seed+=fract(iTime);\n    vec2 off = (vec2(rand(), rand())-.5)*3.*vec2(1., -1.)/(iResolution.x*1.75/scaleF);\n    vec3 col = rdr(uv+off);\n    col *= vec3(0.800,0.980,1.000);\n    //col = sat(col);\n    // Thanks IQ https://www.shadertoy.com/view/Xd2fzR\n    // gain\n    col *= 2.9/(1.0+col);\n    // burn the highlights\n    float g = dot(col,vec3(0.3333));\n    col = mix( col, vec3(g), min(g*0.2,1.0) );\n    // gamma\n    col = pow( col, vec3(0.84545) );\n    \n    \n    //col = pow(col, vec3(.9));\n    col = sat(col);\n    col *= 1.-sat(length(uv*2.)-.5);\n    if (iFrame > 1)\n        col = mix(col, texture(iChannel1, fragCoord/iResolution.xy).xyz,  .8);\n         //col = mix(texture(iChannel1, fragCoord/iResolution.xy).xyz, col,  1.0 / float(iFrame + 1));\n   \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(f*factor, 0.);\n        if (nuv.x > 0. && nuv.x < 1.)\n          col += texture(iChannel0, uv+vec2(f*factor,0.)).xyz/float(steps);\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(10000.,-1.);\n    \n    vec2 reptour = vec2(50.);\n    \n    vec3 ptour = p;\n    ptour.xz = clamp(ptour.xz, vec2(-175.), vec2(175.));\n    ptour.xz = mod(ptour.xz+reptour*.5,reptour)-reptour*.5;\n    acc = _min(acc, vec2(_cube(ptour, vec3(1.,55.,1.)), 1.));\n    \n    vec2 rep = vec2(5.);\n    vec3 sz = vec3(.2);\n    vec3 psee = p;\n    vec2 id = floor((psee.xz+rep*.5)/rep);\n    float h = sin(id.x+iTime)\n    +sin(id.x*.5+id.y*.25+iTime*.35)*2.\n    +sin(id.x+id.y+iTime*.75)*.5\n    +sin((id.x-id.y)*10.+iTime*.75)*.25;\n    psee.xz = mod(psee.xz+.5*rep, rep)-rep*.5;\n    psee.y -= h;\n    acc = _min(acc, vec2(_cube(psee, sz), 0.));\n    \n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.01, 0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\nvec3 accLight;\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    accLight = vec3(0.);\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n            return vec3(res.x, distance(p, ro), res.y);\n        accLight += sat(mix(vec3(0.533,0.294,0.725), vec3(0.486,0.996,0.800), p.y))\n        *(1.-sat(res.x/1.5))*.1;\n        p+=rd*res.x*.5;\n    }\n    return vec3(-1.);\n}\n\nvec3 getEnv(vec3 rd)\n{\n    vec2 coords = vec2(atan(rd.z, rd.x), acos(rd.y));\n    return sat(vec3(0.737,0.882,0.835)\n    *fracNoise(coords+vec2(iTime*.01, sin(iTime*.125)*.1))\n    *pow(fracNoise(coords*.1+iTime*0.01),2.)\n    *sat(pow(1.-sat(abs(dot(rd, vec3(0.,1.,0.)))),25.)+.2)*3.)*2.;\n\n    float cloud = texture(iChannel0, coords*.1).x*\n    texture(iChannel0, coords*.01+iTime*.001).x;\n    return sat(pow(cloud, 1.)-0.)*\n    vec3(1.);\n}\n\nvec3 getMat(vec3 res, vec3 rd, vec3 p, vec3 n)\n{\n    vec3 col = n*.5+.5;\n    if (res.z == 1.)\n    {\n        col = vec3(.1);\n    }\n    if (res.z == 0.)\n    {\n        col = mix(vec3(0.533,0.294,0.725), vec3(0.486,0.996,0.800), p.y);\n    }\n    return sat(col);\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(sin(iTime*.25)*15.,-15.+5.*sin(iTime*.25),-35.);\n    vec3 ta = vec3(cos(iTime*.15)*55.,-10.,sin(iTime*.15)*5.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    vec3 res = trace(ro, rd, 128);\n\n    vec3 glow = accLight;\n    float dist = 100.;\n    float py = 5.;\n    if (res.y > 0.)\n    {\n        dist = res.y;\n        vec3 p = ro+rd*res.y;\n        py = p.y;\n        vec3 n = getNorm(p, res.x);\n        col = getMat(res, rd, p, n);\n        vec3 refl = normalize(reflect(rd, n));\n        refl = normalize(refl+(fracNoise(p.xy)-.5)*.05);\n        vec3 resrefl = trace(p+n*0.01,refl, 128);\n        vec3 reflCol = getEnv(refl);\n        if (resrefl.y > 0.)\n        {\n            vec3 prefl = p+refl*resrefl.y;\n            vec3 nrefl = getNorm(prefl, resrefl.x);\n            reflCol = getMat(resrefl, refl, prefl, nrefl);\n        }\n        col+= reflCol;\n    }\n    else\n        col = getEnv(rd);\n    col += glow;\n    col = mix(col, vec3(0.,0.,0.), sat(1.-exp(-py*0.5+1.5)));        \n    col = mix(col, vec3(0.,0.,0.), sat(1.-exp(-dist*0.01+.5)));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n\n    vec3 col = rdr(uv);\n    col *= 1.5/(1.+col); \n    col = pow(col, vec3(1.4545));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}