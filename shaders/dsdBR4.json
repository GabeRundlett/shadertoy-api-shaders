{
    "Shader": {
        "info": {
            "date": "1696970578",
            "description": "( turn off VFlip for images the lens distortion function flips the image for some reason idkk didn't write it )\nalso the code quality was pretty decent before i started to endlessly mess with it...\nshit happening before the transition is actually unwanted",
            "flags": 0,
            "hasliked": 0,
            "id": "dsdBR4",
            "likes": 3,
            "name": "ilovelensdistortions",
            "published": 3,
            "tags": [
                "lensdistortions"
            ],
            "usePreview": 0,
            "username": "kwyntes",
            "viewed": 336
        },
        "renderpass": [
            {
                "code": "// adapted from https://www.shadertoy.com/view/4lSGRw\n\n#define PI 3.14159265358979\n\nfloat someBezierThing(float t /* [0, 1] */)\n{\n    float a = 1.0;\n    float b = 1.0;\n    float c = 1.0;\n    float d = 2.0;\n    \n    float T = 1.0 - t;\n    \n    // a (1-t)^3 + 3b (1-t)^2 t + 3c (1-t) t^2 + d t^3 - 1\n    return a*T*T*T + 3.*b*T*T*t + 3.*c*T*t*t + d*t*t*t - 1.;\n}\n\nvec2 computeUV(vec2 uv, float k, float kcube, bool yes)\n{   \n    // temp, for debugging only\n    if (!yes) return uv;\n\n\n    vec2  t  = uv - 0.5;\n    float r2 = t.x * t.x + t.y * t.y;\n    \n    float f = 1.0 + r2 * (k + kcube * sqrt(r2));\n    \n    vec2  nUV = f * t + 0.5;\n    nUV.y = 1.0 - nUV.y;\n    \n    return nUV;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n \n    // Duration idea: pi/2 seconds   ** cos(4*pi/2)-1 = 0 which should be nice for this.\n    // TODO: make this configurable....\n \n \n    float t    = (PI/2.0)*(iMouse.x/iResolution.x); //iTime;\n    float tmod = mod(t, PI/2.0);\n    \n    // -- Lens distortion + chromatic abberation + zoom --\n\n    float intensity = 0.9;\n    bool doSIN = false; // makes it freeze a little bit (or bouncy for high intensities)\n                        // also limits the intensity of the effect a lot.\n\n    //float x      = intensity * (cos(4.0 * t) * tmod*tmod - 1.0);//someBezierThing(sin(iTime)) * 2.;\n    \n    \n    bool  doStupidWobble = false;\n    bool  doStupidMix    = true;\n    float mixval         = 0.7;\n    \n    \n    //float w = 1.8; // arbitrary, but lots of values don't work? see https://www.desmos.com/calculator/euovdhkgsw\n    float x = 0.9 * (doStupidWobble ? sin(4.0 * tmod) : cos(4.0 * tmod) - 1.0);\n    \n    if (doStupidMix)\n    {\n        x = 0.9 * mix(sin(4.0 * tmod), cos(4.0 * tmod) - 1.0, mixval);\n    }\n    \n    \n    \n    \n    \n    float k      = 1.0 * (doSIN ? sin(x * 0.9) : x);\n    float kcube  = 0.5 * (doSIN ? sin(x      ) : x);\n    float offset = 0.1 * (doSIN ? sin(x * 0.5) : x);\n    \n    // Zoom [TODO: in slightly, then out]\n    \n    // 1.31945... is approx. the y-value of the third peek of this function\n    //float theta /* greek letters make you sound smarter */ = -sin(6.0 * tmod) * tmod / 1.31945;\n    \n    // stupid piecewise thing i made up\n    float w = 1.8; // arbitrary, but lots of values don't work? see https://www.desmos.com/calculator/euovdhkgsw\n    float theta = tmod <= PI/6.0 ? -sin(6.0 * tmod) * tmod :\n                  tmod <= PI/3.0 ? pow(6.0/PI, w) * pow(tmod - PI/6.0, w) :\n                /*tmod <= PI/2.0*/ -pow(6.0/PI, 2.0) * pow(tmod - PI/2.0, 2.0);                                               //mix(pow(6.0/PI, w) * pow(tmod - PI/6.0, w),   -pow(6.0/PI, 2.0) * pow(tmod - PI/2.0, 2.0), sqrt(tmod/(PI/2.0)));\n    \n    \n    bool doZOOM = true;\n    \n    float zoom = pow(2.0, theta);//pow(2.0, (x+0.5)/4.);//pow(2.0, sin(t)); // This should go from 1.0 to <...> to 2.0 to 1.0\n    uv = doZOOM ? (uv - 0.5) * zoom + 0.5 : uv;\n    \n    \n    // Offset each colour seperately to achieve the chromatic abberation effect\n    bool doLD = true;\n    bool doCHROMABB = true;\n    \n    float r, g, b;\n    \n    // why is there no nicer way to do this .........\n    if (tmod <= PI/3.0) {\n        r = texture(iChannel0, computeUV(uv, k + (doCHROMABB ? offset : 0.0), kcube, doLD)).r; \n        g = texture(iChannel0, computeUV(uv, k                              , kcube, doLD)).g; \n        b = texture(iChannel0, computeUV(uv, k - (doCHROMABB ? offset : 0.0), kcube, doLD)).b;\n    } else {\n        r = texture(iChannel1, computeUV(uv, k + (doCHROMABB ? offset : 0.0), kcube, doLD)).r; \n        g = texture(iChannel1, computeUV(uv, k                              , kcube, doLD)).g; \n        b = texture(iChannel1, computeUV(uv, k - (doCHROMABB ? offset : 0.0), kcube, doLD)).b;\n    }\n    \n    fragColor = vec4(r, g, b, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}