{
    "Shader": {
        "info": {
            "date": "1542642898",
            "description": "Lazy Cloth",
            "flags": 32,
            "hasliked": 0,
            "id": "llyBDW",
            "likes": 31,
            "name": "Lazy Cloth",
            "published": 3,
            "tags": [
                "simulation",
                "physics",
                "spring",
                "cloth"
            ],
            "usePreview": 1,
            "username": "834144373",
            "viewed": 1992
        },
        "renderpass": [
            {
                "code": "/*\n\tCreated by 834144373(祝元洪)\n*/\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    ivec2 iU = ivec2(U);\n    vec4 data = texelFetch(iChannel0,iU,0);\n\n    float d = 200.;\n    \n    for(int x=0;x < GridSize.x;x++){\n    \tfor(int y=0;y < GridSize.y;y++){\n    \t\tvec2 p = texelFetch(iChannel0,ivec2(x,y),0).xy;\n            float dd = length(U/iResolution.y - p);\n            d = min(d,dd);\n    \t}\n    }\n    \n    C = vec4(d<0.005);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//#define GridSize ivec2(18,18)\nconst float K = 0.1;\n\nconst float Friction = 0.01;\n\nconst vec2 Gravity = vec2(0.,-4.8);\n\nconst float R1 = 0.04;\nconst float R2 = R1 * sqrt(2.);\nconst float R3 = R1 * 2.;\nconst float R4 = R3 * sqrt(2.);\n\nvec2 HukeLaw(in vec2 localP,in vec2 otherP,float k,float r){\n\tvec2 AB = otherP - localP;\n\tfloat dis_AB = length(AB);\n    vec2 dir_AB = AB / dis_AB;\n    return (dis_AB - r)*k * dir_AB;\n}\n\nvec4 GetP(in ivec2 iU){\n\treturn texelFetch(iChannel0,iU,0);\n}\nvec2 GetOtherP(in ivec2 iU,in ivec2 offset){\n\treturn texelFetch(iChannel0,iU+offset,0).xy;\n}\n\nvec2 Simulation(vec2 localP,ivec2 iU,ivec2 offset,float k,float r){\n\tvec2 otherP = GetOtherP(iU,offset);\t    \t\n\treturn HukeLaw(localP,otherP,K,R1);\n}\n\nvec2 Constraint(in ivec2 iU,in vec2 localP){\n    //Structure Constraint\n    if(iU.x > 0){\n        localP += Simulation(localP,iU,ivec2(-1, 0),K,R1);\n    }\n    if(iU.y > 0){\n        localP += Simulation(localP,iU,ivec2( 0,-1),K,R1);\n    }\n    if(iU.x < GridSize.x - 1){\n    \tlocalP += Simulation(localP,iU,ivec2( 1, 0),K,R1);\n    }\n    if(iU.y < GridSize.y - 1){\n    \tlocalP += Simulation(localP,iU,ivec2( 0, 1),K,R1);\n    }\n    //Shear Constraint\n    if(iU.x>0 && iU.y>0){\n    \tlocalP += Simulation(localP,iU,ivec2(-1,-1),K,R2);\n    }\n    if(iU.x>0 && iU.y<GridSize.y - 1){\n    \tlocalP += Simulation(localP,iU,ivec2(-1, 1),K,R2);\n    }\n    if(iU.y>0 && iU.x<GridSize.x - 1){\n    \tlocalP += Simulation(localP,iU,ivec2( 1,-1),K,R2);\n    }\n    if(iU.x<GridSize.x - 1 && iU.y<GridSize.y - 1){\n    \tlocalP += Simulation(localP,iU,ivec2( 1, 1),K,R2);\n    }\n\t//Blend Constraint\n    /**/\n    if(iU.x>1){\n    \tlocalP += Simulation(localP,iU,ivec2(-2, 0),K,R3);\n    }\n    if(iU.y>1){\n    \tlocalP += Simulation(localP,iU,ivec2( 0,-2),K,R3);\n    }\n    if(iU.x<GridSize.x-2){\n    \tlocalP += Simulation(localP,iU,ivec2( 2, 0),K,R3);\n    }\n    if(iU.y<GridSize.y-2){\n    \tlocalP += Simulation(localP,iU,ivec2( 0, 2),K,R3);\n    }\n    /*\n    if(iU.x>1 && iU.y>1){\n    \tlocalP += Simulation(localP,iU,ivec2(-2,-2),K,R4);\n    }\n    if(iU.x>1 && iU.y<GridSize.y-2){\n    \tlocalP += Simulation(localP,iU,ivec2(-2, 2),K,R4);\n    }\n    if(iU.y>1 && iU.x<GridSize.x-2){\n    \tlocalP += Simulation(localP,iU,ivec2( 2,-2),K,R4);\n    }\n    if(iU.x<GridSize.x-2 && iU.y<GridSize.y-2){\n    \tlocalP += Simulation(localP,iU,ivec2( 2, 2),K,R4);\n    }\n    \n    /**/\n    return localP;\n}\n\n//Verlet Intergral\n#define R iResolution.xy\nvec4 VerletIntegral(in ivec2 iU){\n\tvec4 P = GetP(iU);\n    if(iU.y == GridSize.y-1 ){\n        vec2 mouse = (iMouse.xy*2.-R)/R.y;\n        if(iMouse.x == 0. && iMouse.y == 0.)\n            mouse = vec2(0.);\n            \n    \tP.xy = vec2(iU.x+12,iU.y+5)*R1 + mouse;\t\n    }\n    vec2 PreviousP = P.zw;\n    vec2 CurrentP = Constraint(iU,P.xy);\n    vec2 NextP = CurrentP + (CurrentP - PreviousP)*(1.-Friction) + Gravity*iTimeDelta*iTimeDelta/2.;\n    \n    PreviousP = CurrentP;\n    \n    return vec4(NextP,PreviousP);\n}\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    ivec2 iU = ivec2(U);\n    if(any(greaterThanEqual(iU,GridSize)))\n        return ;\n    \n    if(iFrame < 2)\n        C = vec4(vec2(iU.x+12,iU.y+5).xyxy)*R1;\n    else\n    \tC = VerletIntegral(iU);\n    \n\t//C.r = 1.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define GridSize ivec2(20,20)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}