{
    "Shader": {
        "info": {
            "date": "1652762697",
            "description": "Feather Fractal (z^3 / (1 + z â¨€ z)) recreated in Shadertoy.\nFractalSoundExplorer by @CodeParade reference.",
            "flags": 0,
            "hasliked": 0,
            "id": "fl2fDK",
            "likes": 3,
            "name": "Feather Fractal recreated",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "complex"
            ],
            "usePreview": 0,
            "username": "Fraktoler",
            "viewed": 845
        },
        "renderpass": [
            {
                "code": "//Credit: https://youtu.be/GiAj9WW1OfQ?t=315\n\nvec2 div(in vec2 z, in vec2 w) {\n    return (w.x * z + w.y * vec2(z.y, -z.x)) / dot(w, w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float zoom = exp((0.5 + 0.5 * cos(iTime * 0.35)) * (log(6.) - log(0.035)) + log(0.035));\n    vec2 center = vec2(0.254, 0.844);\n    vec2 c = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.x * zoom + center;\n    vec2 z = c, z2;\n    int iter = 0;\n    const int max_iter = 256;\n    while (iter < max_iter) {\n        z2 = z * z;\n        z *= vec2(z2.x - z2.y) + vec2(-2.0, 2.0) * z2.yx;\n        z = div(z, vec2(1.0, 0.0) + z2) + c;\n        if (z2.x + z2.y > 1.0e3) {\n            break;\n        }\n        iter++;\n    }\n    if (iter == max_iter) {\n        fragColor = vec4(vec3(0.0), 1.0);\n    } else {\n        float n = float(iter) * 0.1;\n        vec3 col = vec3(sin(n), cos(n), 1.0) * 0.5 + 0.5;\n        fragColor = vec4(col, 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}