{
    "Shader": {
        "info": {
            "date": "1580891529",
            "description": "video glitch color",
            "flags": 2,
            "hasliked": 0,
            "id": "tttXD8",
            "likes": 10,
            "name": "Airsolid glitch color",
            "published": 3,
            "tags": [
                "color",
                "glitch",
                "airsolid"
            ],
            "usePreview": 1,
            "username": "airsolid",
            "viewed": 991
        },
        "renderpass": [
            {
                "code": "//Airsolid Test Glitch\n\nfloat rand(vec2 p)\n{\n    float t = floor(iTime * 50.) / 10.;  //speed \n    return fract(sin(dot(p, vec2(t * 12.9898, t * 78.233))) * 43758.5453);\n}\n\nfloat noise(vec2 uv, float blockiness)\n{   \n    vec2 lv = fract(uv);\n    vec2 id = floor(uv);\n    \n    float n1 = rand(id);\n    float n2 = rand(id+vec2(1,0));\n    float n3 = rand(id+vec2(0,1));\n    float n4 = rand(id+vec2(1,1));\n    \n    vec2 u = smoothstep(0.0, 1.0 + blockiness, lv);\n\n    return mix(mix(n1, n2, u.x), mix(n3, n4, u.x), u.y);\n}\n\nfloat fbm(vec2 uv, int count, float blockiness, float complexity)\n{\n    float val = 0.0;\n    float amp = 0.5;\n    \n    while(count != 0)\n    {\n    \tval += amp * noise(uv, blockiness);\n        amp *= 0.5;\n        uv *= complexity;    \n        count--;\n    }\n    \n    return val;\n}\n\nconst float glitchAmplitude = 0.9; // increase this\nconst float glitchNarrowness = 400.0;\nconst float glitchBlockiness = 10000.0;\nconst float glitchMinimizer = 10.0; // decrease this\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 a = vec2(uv.x * (iResolution.x / iResolution.y), uv.y);\n    vec2 uv2 = vec2(a.x / iResolution.x, exp(a.y));\n\tvec2 id = floor(uv * 20.0);                           // size noise\n    //id.x /= floor(texture(iChannel0, vec2(id / 8.0)).r * 8.0);\n\n    // Generate shift amplitude\n    float shift = glitchAmplitude * pow(fbm(uv2, int(rand(id) * 6.), glitchBlockiness, glitchNarrowness), glitchMinimizer);\n    \n    // Create a scanline effect\n    float scanline = abs(cos(uv.y * 400.));      //scanline intensite\n    scanline = smoothstep(0.0, 2.0, scanline);\n    shift = smoothstep(0.00001, 0.2, shift);\n    \n    // Apply glitch and RGB shift\n    float colR = texture(iChannel0, vec2(uv.x + shift, uv.y)).r * (1. - shift) ;\n    float colG = texture(iChannel0, vec2(uv.x - shift, uv.y)).g * (1. - shift) + rand(id) * shift;\n    float colB = texture(iChannel0, vec2(uv.x - shift, uv.y)).b * (1. - shift);\n    // Mix with the scanline effect\n    vec3 f = vec3(colR, colG, colB) - (0.1 * scanline); //scanline intensite\n    \n    // Output to screen\n    fragColor = vec4(f, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}