{
    "Shader": {
        "info": {
            "date": "1701226342",
            "description": "Check the common tab. Useful for detailed control of cyclic animations/tweens/etc. You can define an attack time, a sustain time, a release time, and a reset time. Surely has been done before, but I haven't run across it.",
            "flags": 0,
            "hasliked": 0,
            "id": "dtcBW4",
            "likes": 4,
            "name": "periodic attack-sustain-release",
            "published": 3,
            "tags": [
                "animation",
                "tween",
                "timing"
            ],
            "usePreview": 0,
            "username": "LydianLights",
            "viewed": 180
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // set up uvs\n    vec2 uv0 = fragCoord / iResolution.y;\n    float maxX = iResolution.x / iResolution.y;\n    \n    vec2 uv = uv0;\n    float id = floor(uv.y / 0.25);\n    uv.y = mod(uv.y, 0.25);\n    uv *= 4.0;\n    \n    vec2 uvAnim = uv;\n    uvAnim.x -= 4.0 * maxX - 1.0;\n    uvAnim = 2.0 * uvAnim - 1.0;\n    \n    uv.x -= 1.0;\n    uv *= 1.5;\n    \n    vec3 color = vec3(0.1);\n    \n    // grid\n    float gt = 0.01;\n    if (abs(uv.x) < 2.0 * gt) {\n        color = vec3(0.7);\n    } else if (mod(uv.x, 1.0) < gt || abs(uv.y) < gt) {\n        color = vec3(0.3);\n    }\n    \n    // curves\n    float t = 0.5 * iTime;\n    float x = uv.x + t;\n    \n    float valX;\n    float valT;\n    vec3 funcColor;\n    if (id == 3.0) {\n        valX = pasr(x, 1.0, 1.0, 1.0, 1.0);\n        valT = pasr(t, 1.0, 1.0, 1.0, 1.0);\n        funcColor = vec3(1.0, 1.0, 0.3);\n    }\n    else if (id == 2.0) {\n        valX = pasr(x, 0.2, 0.4, 0.6, 0.8);\n        valT = pasr(t, 0.2, 0.4, 0.6, 0.8);\n        funcColor = vec3(0.3, 0.5, 1.0);\n    }\n    else if (id == 1.0) {\n        valX = pasr(x, 0.3, 1.0, 0.3, 0.0);\n        valT = pasr(t, 0.3, 1.0, 0.3, 0.0);\n        funcColor = vec3(0.6, 1.0, 0.6);\n    }\n    else if (id == 0.0) {\n        valX = pasr(x, 1.0, 1.0, 1.0, 1.0);\n        valX = valX * valX * valX;\n        valT = pasr(t, 1.0, 1.0, 1.0, 1.0);\n        valT = valT * valT * valT;\n        funcColor = vec3(1.0, 0.3, 0.3);\n    }\n    \n    \n    if (uvAnim.x > -1.0) {\n        // draw circles\n        float r = 0.1 + 0.7 * valT;\n        float d = step(length(uvAnim), r);\n        if (d > 0.0) {\n            color = vec3(d) * funcColor;\n        } else {\n            color = vec3(0.1);\n        }\n    } else {\n        // draw curves\n        float d = 1.0 - step(0.03, abs(uv.y - valX));\n        if (d > 0.0) {\n            color = d * funcColor;\n        }\n    }\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// see https://www.shadertoy.com/view/ml3fD4 for a version with separate attack and release return values,\n// allowing separate smoothing functions to be applied to each\n\n// periodic attack-sustain-release curve\n// x = input value\n// t1 = attack time\n// t2 = sustain time\n// t3 = release time\n// t4 = reset time\nfloat pasr(float x, float t1, float t2, float t3, float t4) {\n    float t = mod(x, t1 + t2 + t3 + t4);\n    if (t < t1) {\n        return t / t1;\n    } else if (t < t1 + t2) {\n        return 1.0;\n    } else if (t < t1 + t2 + t3) {\n        return 1.0 - (t - t1 - t2) / t3;\n    } else {\n        return 0.0;\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}