{
    "Shader": {
        "info": {
            "date": "1533569117",
            "description": "test of bilinear distribution sampling.",
            "flags": 0,
            "hasliked": 0,
            "id": "lttczf",
            "likes": 13,
            "name": "Bilinear warping",
            "published": 3,
            "tags": [
                "warping",
                "sampling",
                "distribution"
            ],
            "usePreview": 0,
            "username": "lycium",
            "viewed": 545
        },
        "renderpass": [
            {
                "code": "float warp1d(float x, float a, float b)\n{\n    float s = b - a;\n    if (abs(s) < 2e-5) return x; // check for flat distribution\n\n\tfloat D = a*a + (b*b - a*a) * x;\n\treturn (sqrt(max(0.0, D)) - a) / s; // max with 0 to prevent -ve sqrt\n}\n\n// Data points are arranged as follows:\n//\n// a -- b\n// |    |\n// c -- d\n//\n// p_in is a point in [0,1] to be warped to this bilinear distribution.\nvec2 warp2d(vec2 p_in, float a, float b, float c, float d)\n{\n\tfloat y = warp1d(p_in.y, a + b, c + d);\n\n\tfloat x0 = a + (c - a) * y;\n\tfloat x1 = b + (d - b) * y;\n\tfloat x  = warp1d(p_in.x, x0, x1);\n\n\treturn vec2(x, y);\n}\n\nfloat sint(float a, float b, float t) { float v = cos(t * 0.191 * a + b); return 1.0 - v * v; }\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tfloat aspect = iResolution.y / iResolution.x;\n\tvec2  pixel_scale = vec2(1.0 / iResolution.x, -aspect / iResolution.y) * 2.0;\n\tvec2  pixel = (fragCoord - iResolution.xy * 0.5) * pixel_scale;\n\n\tfloat pixel_bright = 0.0;\n    \n    if (pixel.x < -0.5 || pixel.x >= 0.5 ||\n\t\tpixel.y < -0.5 || pixel.y >= 0.5)\n    {\n        pixel_bright += 0.0125;\n    }\n    else\n    {\n        const float num_samples = float(233);\n        const float norm = 1.0 / num_samples;\n\n        const float g = 1.22074408460575947536;\n        const vec3 lattice_vec = vec3(\n            1.0 / (g    ),\n            1.0 / (g * g),\n            1.0 / (g*g*g)\n        );\n\n        vec3 x_z = vec3(0.0, 0.0, 0.0);\n        for (float z = 0.0; z < num_samples; z += 1.0)\n        {\n            float x = (z + 0.5) * norm;\n            float y = mod(x * 144.0, 1.0);\n            vec2 u = vec2(x, y);\n            vec2 x_z = u;\n            //x_z += lattice_vec;\n            //x_z -= floor(x_z);\n            \n            float t_z = iTime;// + (x_z.z - 0.5) * 0.0016666;\n\n            float\n                a = sint(5.4534, 1.427, t_z),\n                b = sint(9.9531, 0.492, t_z),\n                c = sint(7.1511, 1.119, t_z),\n                d = sint(2.3593, 1.122, t_z);\n\n            vec2 warped = warp2d(x_z.xy, a, b, c, d);\n\n            vec2 s = (warped - 0.5) - pixel;\n            float thresh = 0.000081;\n            float falloff = 0.00003;\n            pixel_bright += smoothstep(thresh, thresh - falloff, dot(s, s));\n        }\n    }\n\n\tvec3 colour_sRGB = vec3(sqrt(pixel_bright)); // gross approx\n    fragColor = vec4(colour_sRGB, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}