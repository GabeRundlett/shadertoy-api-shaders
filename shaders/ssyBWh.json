{
    "Shader": {
        "info": {
            "date": "1658072333",
            "description": "A variant of my \"Banded mosaic\" pattern with a more interesting color palette.",
            "flags": 8,
            "hasliked": 0,
            "id": "ssyBWh",
            "likes": 12,
            "name": "Fractal mosaic 4",
            "published": 3,
            "tags": [
                "fractal",
                "mosaic"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 436
        },
        "renderpass": [
            {
                "code": "float fmod(float x,float y){return mod(floor(x),y);}\n\n\nvec2 triangle_wave(vec2 a,float scale){\n    return abs(fract((a+vec2(1.,0.5))*scale)-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 36.*1.5;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0 + vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec2 t2 = vec2(0.);\n    float scale = 1.5;\n    for(int k = 0; k < 12; k++){\n        float p1 = sign(uv.x);\n        //t2 *= (1.+p1);\n\n\n        uv = (uv+t2)/scale;\n        //uv = abs(uv);\n        t2 = -p1*triangle_wave(uv-.5,scale);\n        uv =\n            t2-p1*triangle_wave(uv.yx,scale)\n            //fract(t2-p1*triangle_wave(uv.yx,scale))\n            //t2-p1*triangle_wave(uv.yx+fmod(t2.x/1.5,2.),scale);\n        ;\n        col.x = max(uv.y-uv.x-col.x,col.x*3.);\n        col = abs(col.yzx-col.x/3.);\n        //if(uv.x < uv.y) col = abs(col.x-col.yzx);\n        //if(uv.x < uv.y) uv.x += 1.;\n\n        //uv -= .25;\n        //if(t2.x<t2.y||t2.x>t2.y) {uv=uv.yx;t2=t2.yx;}\n    }\n    fragColor = vec4(col*3.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define fmod(x,y) mod(floor(x),y)\n#define fmod1(x,y) mod(floor(x+floor(t0)),y)\n#define fmod2(x,y) mod(floor(y*((x)/y+floor((x)/y)/y)),y)\n\n#define smod(x,y) floor(mod(floor(x)*floor(x),y))\n#define sqmod(x,y) floor(mod(floor(x)*floor(x),y*y)/y)\n#define floor1(x) floor(x)*floor(mod((x)/2.,2.))\n\nvec2 mainSound(int samp, float t){\n  float tempo = 1.;\n  t /= tempo;\n  \n  float t0=t, s1 =\n      8.;\n  float m1 = 0.,m3=0.;\n  for(int i = 0; i < 5; i++){\n  \n  t = t + m1/s1;\n  \n  m1 =\n      max(floor(m3+m1/s1),fmod(t,s1));\n      \n  t /=\n      (1.+fmod(t*s1,2.))\n\n  ;\n  m3 =\n      max(floor(m1+m3/s1),fmod(t,s1));\n  t *=\n      (1.+fmod(t*s1,2.))\n  ;\n  }\n  float a=sqrt((1.-sqrt(fract(t*s1))))*.2,\n\n  nb = pow(2.,(m3)/5.+7.)*tempo;\n\n  return vec2(fract(t*nb*.998)*a\n   ,fract(t*nb)*a);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}