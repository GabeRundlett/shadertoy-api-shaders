{
    "Shader": {
        "info": {
            "date": "1587247065",
            "description": "Simple classical wave equation with non-trivial initializer and discrete lattice vibrating velocity (single mode frequency). Displacements are real values though to significantly increase lattice resolution. Based on Wyatt's \"Schrodinger Equation\"",
            "flags": 32,
            "hasliked": 0,
            "id": "WsByDy",
            "likes": 7,
            "name": "Stateful Waves (click&wait)",
            "published": 3,
            "tags": [
                "physics",
                "computation"
            ],
            "usePreview": 0,
            "username": "brianhaak",
            "viewed": 446
        },
        "renderpass": [
            {
                "code": "#define R iResolution.xy\nvoid mainImage( out vec4 pixel, in vec2 U )\n{\n    vec4 state = texture(iChannel0,U/R);\n\n    pixel.r = state.y;\n    pixel.g = abs(state.x * 0.0015);\n    pixel.b = -state.y;\n    \n    // Comment these two lines to visualise the discrete velocities\n    pixel.r = pixel.g;\n    pixel.b = pixel.g;\n\n    pixel.a = 1.0;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Based on Wyatt's https://www.shadertoy.com/view/Ws2XzR\n\n#define R iResolution.xy\nvec4 read_memory (vec2 U) {return texture(iChannel0, U / R);}\n\nvoid mainImage( out vec4 Q, in vec2 U ) {\n    \n    vec2 center = read_memory(U).xy;\n    float north_disp = read_memory(U + vec2(0, 1)).x;\n    float east_disp =  read_memory(U + vec2(1, 0)).x;\n    float south_disp = read_memory(U - vec2(0, 1)).x;\n    float west_disp =  read_memory(U - vec2(1, 0)).x;\n    \n    float old_displacement = center.x;\n    float old_velocity = center.y;\n    \n    \n    // Diffusion\n    //float new_displacement = 0.25 *\n    //    (north_disp + east_disp + south_disp + west_disp);\n    \n    // Wave or Schrodinger\n    float new_displacement = old_velocity +\n        0.25 * (north_disp + east_disp + south_disp + west_disp);\n    \n    // Schrodinger\n    //float new_velocity = 0.0 - old_displacement;\n    \n    // Classic wave\n    float new_velocity = new_displacement - old_displacement;\n    \n\n    Q.xy = vec2(new_displacement, new_velocity);\n    \n    Q.xy *= (U.x < 1. || U.y < 1. || R.x-U.x<1. || R.y-U.y<1.) ?\n        0.1 : 1.0;\n\n    \n    vec2 M = (U - iMouse.xy) / 2.5;\n    vec2 m = (iMouse.xy - iMouse.zw) / 2.5;\n    if (iMouse.z > 0.0 ) {\n        Q.xy = mix(\n            Q.xy,\n            vec2(\n                cos(m.x*M.x+m.y*M.y),\n                sin(m.x*M.x+m.y*M.y)),\n           \texp(-0.3 * dot(M, M))\n        );\n    }\n    \n    if (iFrame < 1) {\n        //vec2 D = (U - 0.5 * R) / 10.0;\n\t\t//Q.xy = 3.0 * exp(-dot(D, D))\n        //    * (vec2(cos(-9.*D.x+D.y),sin(-9.*D.x+D.y)));\n        \n    }\n    \n  \n    // Discrete velocity\n    Q.y = sign(Q.y);\n}\n\n\n\n\n/*\nvec4 average_neighborhood = 0.25 * (north + east + south + west);\n   \n    // float dt = 1.0;//0.05;\n\n\t// Classical Wave Equation :\n    //Q.x = dt * laplacian + center.x * mm[0].x + center.y * mm[0].y;\n    //Q.y = dt * laplacian + center.x * mm[1].x + center.y * mm[1].y;\n\n\t// laplacian - center.x\n\n    \n    //Q.x = dt * (average_neighborhood.x - center.x) + center.x + center.y;\n\n    //Q.y = dt * (average_neighborhood.x - center.x) + center.y;\n    \n    \n    // Q.x = average_neighborhood.x + center.y;\n\n    \n    //Q.y = average_neighborhood.x + center.y - center.x;\n\n\t//Q.x = Q.y + center.x;\n    \n    \n    \n    \n    // Q.y = average_neighborhood.x - center.x + center.y;\n    \n    //Q.y = average_neighborhood.x - center.x + center.y;\n    //Q.x = Q.y + center.x;\n\n\n\n\n    // Crazy system of rect filling (in the classic wave mode)\n    //new_displacement = Q.x > 0.0 ? 0.99 : 0.01;//00001;\n    //new_velocity = Q.y > 0.0 ? 0.0 : -0.5;\n    \n    //Q.xy = vec2(new_displacement, new_velocity);\n    \n    //Q.x = sign(Q.x);\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}