{
    "Shader": {
        "info": {
            "date": "1613319156",
            "description": "Using a 2D fractal as a audio synthesizer, each seed creates a different noise. The seed changes each second. Pretty happy with the amount of different sounds it can produce.",
            "flags": 8,
            "hasliked": 0,
            "id": "3l3BWS",
            "likes": 6,
            "name": "Variable Fractal Synthesizer",
            "published": 3,
            "tags": [
                "fractal",
                "sound",
                "audio",
                "synthesizer",
                "variable"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 325
        },
        "renderpass": [
            {
                "code": "//See Common for code\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //display multiple bar graphs of different scales over top each other\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    float s = 0.;\n    for (float i = .0001; i < .01; i += i) {\n        s += step(uv.y,instrument(floor(iTime/SWITCH_DELAY)*SWITCH_DELAY+.5+floor(uv.x*50.)/50.*i));\n    }\n    fragColor = vec4(s/10.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//See Common\n\nvec2 mainSound( int samp, float time )\n{\n    return vec2(instrument(time)*.3);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "/*Ethan Alexander Shulman 2021 - https://xaloez.com/\nCC0, public domain\n\nUsing a 2D fractal as a audio synthesizer, each seed creates a different noise.\nIn this demo the seed is changed constantly.\nPretty happy with the amount of different sounds it can produce.\n*/\n\n\n//How often the instrument seed is switched.\n#define SWITCH_DELAY .4\n\n\n//Modified FNV-1A hash https://www.shadertoy.com/view/WtdfRX\nuvec4 hash(uvec4 seed) {\n    uvec4 h = (0x6A7F8FAAu^seed)*0x01000193u;\n    h = ((h.wxyz>>3u)^h^seed.yzwx)*0x01000193u;\n    h = ((h.zwxy>>8u)^h^seed.wxyz)*0x01000193u;\n    return h^(h>>11u);\n}\n#define I2F (1./float(0xFFFFFFFFu))\n\nmat2 r2(float a) {\n\tfloat s = sin(a), c = cos(a);\n\treturn mat2(c,-s,s,c);\n}\n\nfloat triwave(float x) {\n    return 1.-abs(fract(x)-.5)*2.;\n}\nfloat triwave2(float x) {\n    return fract(x);\n}\nfloat squarewave(float x) {\n    return floor(fract(x)*2.);\n}\n\n//From my shader \"Variable Fractal Tiles\" https://www.shadertoy.com/view/wtycRt\nfloat fractal(float t, float repX, float repY, float freq, uvec4 p) {\n    vec4 h = vec4(hash(p))*I2F;\n    vec2 pos = fract(vec2(t/repX,floor(t/repX)/repY));\n    \n    //apply folds based off hash\n    for (int i = 0; i < 8; i++) {\n        float fi = h[i/2], rv = h[(i+1)%4];\n        if (i%2 == 0) fi = fract(fi*10.)*10.;\n        else fi = floor(fi*10.);\n           \n        int id = int(fi)%4;\n        if (id == 0) {//mirror rotate fold\n            pos = (abs(pos)-.5)*r2(rv*6.28);\n        } else if (id == 1) {//plane fold\n            rv *= 6.28;\n            vec2 pnorm = vec2(sin(rv),cos(rv));\n            pos -= pnorm*2.*min(0.,dot(pos,pnorm));\n        } else {//polar fold\n            float sz = .04+rv*1.6,\n                ang = mod(atan(pos.y,pos.x),sz)-sz*.5;\n            pos = vec2(sin(ang),cos(ang))*length(pos);\n        }\n        //apply box fold\n        float ext = h[i%4];\n        pos = clamp(pos,-ext,ext)*2.-pos;\n    }\n    float l = length(pos)*freq;\n    \n    \n    //try different waves\n    return triwave(l)*2.-1.;\n    //return squarewave(l)*2.-1.;\n    //return triwave2(l)*2.-1.;\n    //return sin(l*6.28);\n}\n\n//Use fractal as a synth\nfloat instrument(float t) {\n    //change instrument parameters every second\n    float iid = floor(t/SWITCH_DELAY);\n    vec4 params = vec4(hash(uvec4(iid,0,0,0)))*I2F;\n    return fractal(t, mix(0.006,0.03,pow(params.x,2.)),//x repetitions is base pattern wavelength\n                     mix(100.,1000.,params.y),//y repetitions is a second pattern wavelength\n                     mix(2.,15.,params.z),//wave frequency\n                     uvec4(iid)//fractal seed, each one creates a different noise\n                     );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}