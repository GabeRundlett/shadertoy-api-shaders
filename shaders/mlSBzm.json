{
    "Shader": {
        "info": {
            "date": "1693885821",
            "description": "Rays March\nArrow keys & WASD to move",
            "flags": 48,
            "hasliked": 0,
            "id": "mlSBzm",
            "likes": 0,
            "name": "Ray Marcher (The Better One)",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "cool"
            ],
            "usePreview": 0,
            "username": "Supercooldude",
            "viewed": 130
        },
        "renderpass": [
            {
                "code": "float marchEpsilon = 0.001;\nfloat epsilonNormal = 0.001;\n\n\nfloat dist(vec3 point)\n{\n    return distance(fract(point), vec3(0.5, 0.5, 0.5)) * 0.5;\n}\n\nvec3 getNormal(vec3 pos)\n{\n    vec3 normal;\n    \n    normal.x = dist(pos + vec3(epsilonNormal, 0.0, 0.0));\n    normal.x -= dist(pos + vec3(-epsilonNormal, 0.0, 0.0));\n    \n    normal.y = dist(pos + vec3(0.0, epsilonNormal, 0.0));\n    normal.y -= dist(pos + vec3(0.0, -epsilonNormal, 0.0));\n    \n    normal.z = dist(pos + vec3(0.0, 0.0, epsilonNormal));\n    normal.z -= dist(pos + vec3(0.0, 0.0, -epsilonNormal));\n    \n    return normalize(normal);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int stepCount = 255;\n    vec2 uv = fragCoord/iResolution.x;\n    float ar = iResolution.y/iResolution.x;\n    \n    vec3 sunDir = normalize(vec3(sin(iTime * 0.1), 1.0, cos(iTime * 0.1)));\n    \n    vec3 startPos = texelFetch(iChannel0, ivec2(0, 0), 0).xyz;\n    vec3 rot = texelFetch(iChannel0, ivec2(1, 0), 0).xyz;\n    \n    vec3 pos = startPos;\n    vec3 dir = normalize(vec3(uv.x - 0.5, uv.y - 0.5 * ar, 1.0));\n\n    \n    vec3 old = dir;\n    dir.y = old.y * cos(rot.y) + old.z * sin(rot.y);\n    dir.z = old.z * cos(rot.y) + old.y * -sin(rot.y);\n    old = dir;\n    dir.x = old.x * cos(rot.x) + old.z * sin(rot.x);\n    dir.z = old.z * cos(rot.x) + old.x * -sin(rot.x);\n\n    \n\n    \n    \n    int marchStep = 0;\n    int endStepCount = 0;\n    while (marchStep < stepCount)\n    {\n        float dist = dist(pos);\n\n\n        if (dist < marchEpsilon)\n        {\n            endStepCount = marchStep;\n            marchStep = stepCount;\n        }\n        pos += dir * dist;\n        marchStep++;\n    }\n    vec3 endCol;\n    if (marchStep == stepCount + 1)\n    {\n        vec3 col = vec3(1.0, 1.0, 1.0);\n        float brightness = (0.5 + 0.5 * dot(getNormal(pos), sunDir)) * (1.0 - float(endStepCount) / float(stepCount));\n        endCol = col * brightness;\n    }\n    else\n    {\n       endCol = vec3(0.5 + 0.25 * dot(dir, vec3(0.0, 1.0, 0.0)), 0.75 + 0.25 * dot(dir, vec3(0.0, 1.0, 0.0)), 1.0);\n    }\n\n    fragColor = vec4(endCol, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int KEY_UP    = 38;\nconst int KEY_DOWN  = 40;\nconst int KEY_LEFT  = 37;\nconst int KEY_RIGHT = 39;\n\nconst int KEY_W = 87;\nconst int KEY_S = 83;\nconst int KEY_A = 65;\nconst int KEY_D = 68;\nconst int KEY_E = 69;\nconst int KEY_Q = 81;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ipos = ivec2(int(fragCoord.x), int(fragCoord.y));\n    if ((ipos.x == 0 || ipos.x == 1) && ipos.y == 0)\n    {\n        vec3 pos = vec3(texelFetch(iChannel0, ivec2(0, 0), 0));\n        vec3 rot = vec3(texelFetch(iChannel0, ivec2(1, 0), 0));\n        \n        float xAxis = texelFetch(iChannel1, ivec2(KEY_D, 0), 0).r;\n        xAxis -= texelFetch(iChannel1, ivec2(KEY_A, 0), 0).r;\n        \n        float yAxis = texelFetch(iChannel1, ivec2(KEY_E, 0), 0).r;\n        yAxis -= texelFetch(iChannel1, ivec2(KEY_Q, 0), 0).r;\n        \n        float zAxis = texelFetch(iChannel1, ivec2(KEY_W, 0), 0).r;\n        zAxis -= texelFetch(iChannel1, ivec2(KEY_S, 0), 0).r;\n        \n        float hAxis = texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).r;\n        hAxis -= texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).r;\n        \n        float vAxis = texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).r;\n        vAxis -= texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).r;\n        \n        pos.x += (cos(rot.x) * xAxis + sin(rot.x) * zAxis) * iTimeDelta;\n        pos.y += yAxis * iTimeDelta;\n        pos.z += (cos(rot.x) * zAxis + -sin(rot.x) * xAxis) * iTimeDelta;\n\n        rot.x += iTimeDelta * hAxis;\n        rot.y += iTimeDelta * vAxis;\n        \n        rot.y = min(max(rot.y, -1.5707), 1.5707);\n        if (ipos.x == 0)\n        {\n            fragColor = vec4(pos, 0.0);\n        }\n        else\n        {\n            fragColor = vec4(rot, 0.0);\n        }\n    }\n    \n    if (iFrame == 0)\n    {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}