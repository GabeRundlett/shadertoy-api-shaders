{
    "Shader": {
        "info": {
            "date": "1497778988",
            "description": "Four simple objects based on the icosahedron (quatre objets simples basés sur l'icosaèdre, pour Fabrice); mousing allowed.",
            "flags": 0,
            "hasliked": 0,
            "id": "MdXfWS",
            "likes": 17,
            "name": "Icosahedral Variations",
            "published": 3,
            "tags": [
                "icosahedron",
                "symmetry"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 663
        },
        "renderpass": [
            {
                "code": "// \"Icosahedral Variations\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat SmoothMin (float a, float b, float r);\nvec2 Rot2D (vec2 q, float a);\n\nvec3 ltDir;\nfloat dstFar, tCur;\nconst float pi = 3.14159;\n\nvec3 IcosSym (vec3 p)\n{\n  const float dihedIcos = 0.5 * acos (sqrt (5.) / 3.);\n  float a, w;\n  w = 2. * pi / 3.;\n  p.z = abs (p.z);\n  p.yz = Rot2D (p.yz, - dihedIcos);\n  p.x = - abs (p.x);\n  for (int k = 0; k < 4; k ++) {\n    p.zy = Rot2D (p.zy, - dihedIcos);\n    p.y = - abs (p.y);\n    p.zy = Rot2D (p.zy, dihedIcos);\n    if (k < 3) p.xy = Rot2D (p.xy, - w);\n  }\n  p.z = - p.z;\n  a = mod (atan (p.x, p.y) + 0.5 * w, w) - 0.5 * w;\n  p.yx = vec2 (cos (a), sin (a)) * length (p.xy);\n  p.x -= 2. * p.x * step (0., p.x);\n  return p;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 pIco;\n  float d1, d2, t;\n  pIco = IcosSym (p);\n  t = floor (mod (0.2 * tCur, 4.));\n  d1 = 0.05 - ((t < 2.) ? abs (length (p) - 2.5) : abs (pIco.z + 2.3));\n  d2 = (mod (t, 2.) == 1.) ? 0.02 - abs (mod (pIco.y, 0.1) - 0.05) : 0.7 - pIco.y;\n  return - SmoothMin (d1, d2, 0.02);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.0001, -0.0001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col;\n  float dstObj, vDotL;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    vDotL = dot (ltDir, vn);\n    col = (dot (ro, vn) < 0.) ? vec3 (0.7, 0.2, 0.2) : vec3 (0.9, 0.9, 1.);\n    col = col * (0.1 + 0.2 * max (- vDotL, 0.) + 0.8 * max (vDotL, 0.)) +\n       0.3 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 256.);\n  } else col = vec3 (0., 0., 0.1);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  if (mPtr.z > 0.) {\n    az = 3. * pi * mPtr.x;\n    el = -0.1 * pi + 1. * pi * mPtr.y;\n  } else {\n    az = -0.02 * pi * tCur;\n    el = 0.1 * pi * sin (0.022 * pi * tCur);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 3.));\n  ro = vuMat * vec3 (0., 0., -10.);\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  dstFar = 20.;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}