{
    "Shader": {
        "info": {
            "date": "1492281826",
            "description": "Paste this into your browser's console to load the texture:\n\ngShaderToy.SetTexture(0, {mSrc:'https://i.imgur.com/oysPA9C.png', mType:'texture', mID:0, mSampler:{ filter: 'nearest', wrap: 'clamp', vflip:'true', srgb:'false', internal:'byte' }});\n\nGPLv3",
            "flags": 96,
            "hasliked": 0,
            "id": "ls2cWW",
            "likes": 7,
            "name": "metaview logo effect",
            "published": 3,
            "tags": [
                "glitch"
            ],
            "usePreview": 0,
            "username": "Limeth",
            "viewed": 1255
        },
        "renderpass": [
            {
                "code": "// Noise code under the BSD license, taken from https://www.shadertoy.com/view/4dS3Wd\n#define NOISE fbm\n#define NUM_NOISE_OCTAVES 5\n\n\nfloat hash(float n) { return fract(sin(n) * 1e4); }\nfloat hash(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\n\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(hash(i), hash(i + 1.0), u);\n}\n\n\nfloat noise(vec2 x) {\n    vec2 i = floor(x);\n    vec2 f = fract(x);\n\n\t// Four corners in 2D of a tile\n\tfloat a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n\n    // Simple 2D lerp using smoothstep envelope between the values.\n\t// return vec3(mix(mix(a, b, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tmix(c, d, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tsmoothstep(0.0, 1.0, f.y)));\n\n\t// Same code, with the clamps in smoothstep and common subexpressions\n\t// optimized away.\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n\nfloat fbm(float x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tfloat shift = float(100);\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n\nfloat fbm(vec2 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n\t// Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = rot * x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n// END OF NOISE\n// The rest of code is under the GPLv3 license\nfloat cubicBezier(float start, float startDirection, float endDirection, float end, float x) {\n    // y=u0(1−x3)+3u1(1−x2)x+3u2(1−x)x2+u3x3\n    //return start*(1.0 - x*x*x) + 3.0*startDirection*(1.0 - x*x)*x + 3.0*endDirection*(1.0 - x)*x*x + end*x*x*x;\n    float oneMinusX = 1.0 - x;\n    return start*oneMinusX*oneMinusX*oneMinusX + 3.0*startDirection*oneMinusX*oneMinusX*x + 3.0*endDirection*oneMinusX*x*x + end*x*x*x;\n}\n\nfloat symmetricPow(in float x, in float power) {\n    return sign(x) * (1.0 - pow(1.0 - abs(x), power));\n}\n\nvec4 getLogoPixel(in vec2 uv, in vec2 fragCoord, in float noiseOffset, in float fft, in float fftDelta) {\n    const vec2 textureSize = vec2(740, 93);\n    const float maxTextureSize = max(textureSize.x, textureSize.y);\n    const float minTextureSize = min(textureSize.x, textureSize.y);\n    const float scale = 0.75;\n    \n    // resized to fit into iResolution.xy\n    vec2 resLogoSize = textureSize * max(iResolution.x, iResolution.y) / max(textureSize.x, textureSize.y);\n    vec2 relLogoSize = resLogoSize / iResolution.xy;\n    \n    // scale\n    uv = (uv - vec2(0.5)) * 2.0;\n    uv /= scale;\n    uv = uv / 2.0 + vec2(0.5);\n    \n    // translation\n    vec2 displacement = -(1.0 - relLogoSize) / 2.0;\n    uv += displacement;\n    \n    // glitch effect\n    const float noisinessY = 4.0;\n    const float noisinessTime = 5.0;\n    const float noiseThresholdMax = 0.8;\n    const float noiseJump = 0.2;\n    const float noiseScaleMin = 0.1;\n    const float noiseScaleMax = 0.2;\n    const float fftWhenNoSound = 0.5;\n    const float fftDeltaWhenNoSound = 0.3;\n    \n    // magnify the delta\n    fftDelta = symmetricPow(fftDelta + 0.05 /* shift the curve */, 10.0);\n    \n    // ensure glitchiness when no music is playing\n    fft += fft > 0.0 ? 0.0 : fftWhenNoSound;\n    fftDelta += fftDelta > 0.0 ? 0.0 : fftDeltaWhenNoSound;\n    \n    // remove negative values\n    fftDelta = fftDelta < 0.0 ? 0.0 : fftDelta;\n    \n    float noiseThreshold = noiseThresholdMax * (1.0 - fftDelta);\n    float noiseScale = noiseScaleMin + (noiseScaleMax - noiseScaleMin) * fft;\n    \n    float originalNoise = fbm(vec2(uv.y, iTime) * vec2(noisinessY, noisinessTime));  // <0; 1)\n    originalNoise = originalNoise * 2.0 - 1.0;\n    \n    float noiseEnabled = step(noiseThreshold, abs(originalNoise));  // no noise if we didn't reach the threshold\n    float noiseDirection = sign(originalNoise);\n    float noise = originalNoise * noiseEnabled;\n    noise = noiseEnabled * (noise - noiseThreshold * noiseDirection) / (1.0 - noiseThreshold);\n    noise += noiseEnabled * noiseJump * noiseDirection;\n    noise *= 1.0 + noiseOffset * noiseDirection;  // apply the rgb offset\n    noise *= noiseScale;\n    \n    uv += vec2(noise, 0);\n    \n    // don't repeat the texture\n    if(uv.x < 0.0 || uv.x >= relLogoSize.x || uv.y < 0.0 || uv.y >= relLogoSize.y) {\n        return vec4(0.0);\n    }\n    \n    vec2 texUv = uv / relLogoSize;\n    \n    return texture(iChannel0, texUv);\n}\n\nvec3 rgb_from_hsv(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec4 chromatic_abbr_sum(in vec2 uv, in vec2 fragCoord, in float fft, in float fftDelta) {\n    const int steps = 8;\n    const float intensity = 0.5;\n    vec3 result = vec3(0.0, 0.0, 0.0);\n    float max_component_value = 0.0;\n    \n    for (int i = 0; i < steps; i++) {\n        float progress = float(i) / float(steps);\n        vec3 rgb_mask = rgb_from_hsv(vec3(progress, 1.0, 1.0));\n        float offset = (0.5 - progress) * intensity;\n        vec3 color_at_offset = getLogoPixel(uv, fragCoord, offset, fft, fftDelta).rgb;\n        \n        max_component_value += rgb_mask.r;\n        result += color_at_offset * rgb_mask;\n    }\n    \n    return vec4(result / max_component_value, 0.0);\n}\n\nvec4 chromatic_abbr_simple(in vec2 uv, in vec2 fragCoord, in float fft, in float fftDelta) {\n    return vec4(\n        getLogoPixel(uv, fragCoord, 0.1, fft, fftDelta).r,\n        getLogoPixel(uv, fragCoord, 0.0, fft, fftDelta).g,\n        getLogoPixel(uv, fragCoord, -0.1, fft, fftDelta).b,\n        1.0\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float modify = (sin(iTime) + 1.0) / 2.0;\n    float modify2 = (cos(iTime) + 1.0) / 2.0;\n    float fft = texture(iChannel1, vec2(0.0)).x;\n    float fftDelta = texture(iChannel2, vec2(0.0)).x;\n    float bufB = texture(iChannel3, vec2(0.0)).x;\n    float fftDeltaModified = symmetricPow(fftDelta + 0.05 /* shift the curve */, 10.0);\n    \n\tfragColor = chromatic_abbr_sum(uv, fragCoord, fft, fftDelta)\n      + vec4((bufB > uv.y ? 1.0 : 0.0) * step(0.48, abs(uv.x - 0.5))) * 0.5\n      + vec4((fft > uv.y ? 1.0 : 0.0) * step(0.49, abs(uv.x - 0.5))) * 0.5;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This buffer creates a value from the audio channel and stores it.\n// The value represents the intensity at given time.\n\nfloat fft(sampler2D channel) {\n    const int fftSamples = 1000;\n    const float sampleOffset =  (1.0 / float(fftSamples)) / 2.0;\n    float totalWeight = 0.0;\n    float totalFFT = 0.0;\n    \n    for(int sampleIndex = 0; sampleIndex < fftSamples; sampleIndex++) {\n        // weight: (1/10)^(x-1)\n        float samplePointer = sampleOffset + float(sampleIndex) / float(fftSamples);\n        float weight = pow(1.0 - samplePointer, 10.0);\n        totalWeight += weight;\n        totalFFT += texture(channel, vec2(samplePointer, 0.25)).x * weight;\n    }\n    \n\tfloat fft = totalFFT / totalWeight;\n    fft = pow(fft, 1.5);\n\t//float fft = texture(iChannel1, vec2(uv.x, 0.25)).x;\n    \n    return fft;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = vec4(fft(iChannel0), vec3(0.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 10500,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/andypeor/broke-for-free-calm-the-fuck-down"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This buffer is an intermediate buffer which saves the average of its previous result and the immediate value\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    const float persistanceAbove = 0.95;  // don't forget to update `persistanceAbove` in Buf C aswell\n    const float persistanceBelow = 0.85;  // don't forget to update `persistanceBelow` in Buf C aswell\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float currentValue = texture(iChannel0, vec2(0.0)).x;\n    \n    if(iFrame == 0) {\n        fragColor = vec4(currentValue, vec3(0.0));\n        return;\n    }\n    \n    float cachedValue = texture(iChannel1, vec2(0.0)).x;\n    float persistance = currentValue > cachedValue ? persistanceAbove : persistanceBelow;\n    float newCachedValue = cachedValue * persistance + currentValue * (1.0 - persistance);\n    fragColor = vec4(newCachedValue, vec3(0.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This buffer provides the delta between the last average and the new immediate value\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    const float persistanceAbove = 0.95;  // don't forget to update `persistanceAbove` in Buf C aswell\n    const float persistanceBelow = 0.85;  // don't forget to update `persistanceBelow` in Buf C aswell\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float currentValue = texture(iChannel0, vec2(0.0)).x;\n    \n    if(iFrame == 0) {\n        fragColor = vec4(currentValue, vec3(0.0));\n        return;\n    }\n    \n    float cachedValue = texture(iChannel1, vec2(0.0)).x;\n    float persistance = currentValue > cachedValue ? persistanceAbove : persistanceBelow;\n    fragColor = vec4((currentValue - cachedValue) / persistance, vec3(0.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}