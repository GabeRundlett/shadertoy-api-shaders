{
    "Shader": {
        "info": {
            "date": "1615040483",
            "description": "okota shader 0306",
            "flags": 0,
            "hasliked": 0,
            "id": "3tGBDV",
            "likes": 8,
            "name": " Underground disposal facility",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "butadiene",
            "viewed": 382
        },
        "renderpass": [
            {
                "code": "//Copyright (c) 2021 Butadiene\n//Released under the MIT license\n//https://opensource.org/licenses/mit-license.php\n\n#define time iTime\nfloat bpm = 140.;\nfloat PI = acos(-1.);\n\nfloat random (in vec2 st) {return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 6\nfloat fbm (in vec2 st) {\nst *= 10.;\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value*0.45;\n}\n\n\nmat2 rot(float r){\n  return mat2(cos(r),sin(r),-sin(r),cos(r));\n  }\n  \n  vec2 pmod(vec2 p,float n){\n    float np = 2.0*PI/n;\n    float r = atan(p.x,p.y)-0.5*np;\n    r = mod(r,np)-0.5*np;\n    return length(p)*vec2(cos(r),sin(r));\n    }\n\n    float dist(vec3 p){\n      vec3 sp = p;\n      p.xz = mod(p.xz,2.)-1.;\n       p.y = mod(p.y,10.)-5.;\n      p.xz = pmod(p.xz,4.);\n      float scale = 1.0;\n      for(int i = 0;i<10;i++){\n        p = abs(p)-vec3(0.4,2.0,0.);\n        float r2 = dot(p,p);\n        float sc = 2.0/clamp(r2,0.4,1.0);\n        scale *= sc;\n        p *= sc;\n        p -= vec3(0.35,1.0,0.35);\n        p.xz *= rot(0.25*PI);\n        }\n        float ssx = (1.0+0.1*length(p.xz)*pow(abs(sin(sp.y*5.+2.*time)),6.));\n      \n      \n        float d= length(p)/scale-0.002*ssx;\n      return d;\n      } \n    \n      vec3 gn(vec3 p){\n        vec2 e = vec2(0.001,0.);\n        return normalize(vec3(\n        dist(p+e.xyy)-dist(p-e.xyy),\n        dist(p+e.yxy)-dist(p-e.yxy),\n        dist(p+e.yyx)-dist(p-e.yyx)\n        ));\n        \n        \n        }\n      \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col =vec3(0);\n vec2 p = uv-0.5;\n    p.x *= iResolution.x/iResolution.y;\n  p.y += 0.1*fbm(vec2(0.0,5.*time));\n    vec3 of = vec3(3.0,0.2*time,0.2);\n  vec3 ta =vec3(0)-of;\n  vec3 ro = vec3(1,0,0)-of;\nfloat t  = 0.;\n  float fov = 0.8;\n  float frag = 0.0;\n  float sty = fract(0.125*0.125*time*bpm/60.);\n  if(sty>0.75){\n    fov = 0.4;\n    of = vec3(0.24,-0.2*time,10);\n    ta = vec3(0)-of;\n    float rsa = 0.15;\n    float ksst = 0.2*time;\n    ro = vec3(rsa*cos(ksst),1.,rsa*sin(ksst))-of;\n    t= 0.1;\n    }else\n    if(sty>0.5){\n              \n    of = vec3(0,-3.,0.3*time);\n    ta = vec3(0)-of;\n    float rsa = 0.1;\n    float ksst = 0.;\n    ro = vec3(rsa*cos(ksst),0.,rsa*sin(ksst))-of;\n      t = 0.;\n      }else if(sty>0.25){\n        fov = 1.5;\n        of = vec3(0,0.1*time,0);\n        ta= vec3(0)-of;\n        ro = vec3(1,0,0)-of;\n        frag = 1.0;\n        }\n\n\n  \n  vec3 cdir = normalize(ta-ro);\n  vec3 side = cross(cdir,vec3(0,1,0));\n  vec3 up = cross(side,cdir);\n  \n  vec3 rd = normalize(p.x*side+p.y*up+cdir*fov);\n  if(frag == 1.0) rd.yz*= rot(0.5*PI);\n  float d;\n  float ac = 0.;\n  float ep = 0.001;\n  for(int i = 0;i<77;i++){\n    d =dist(ro+rd*t);\n    t += d;\n    ac += exp(-3.0*d);\n    if(d<ep)break;\n  }\n\n  if(d<ep){\n    vec3 ld = normalize(vec3(1));\n   vec3 sp = ro+rd*t;\n    vec3 normal = gn(sp);\n    \n    float sca = 10.;\n    float noiy =fbm(sp.xz*sca);\n    float noiz = fbm(sp.xy*sca);\n    float noibound = smoothstep(0.03,0.05,noiy*noiz);\n    \n    float scb = sca*50.;\n    float noix2 = fbm(sp.yz*scb);\n    float noiy2 = fbm(sp.xz*scb);\n    float noiz2 = fbm(sp.xy*scb);\n    \n      if(noibound<0.9)normal = normalize(normal+vec3(noix2,noiy2,noiz2));\n\n    float alp = 0.5;\n    float NdotL = max(dot(normal,ld),0.);\n    vec3 diff = 0.4*vec3(pow(NdotL*alp+1.-alp,2.0));\n    vec3 df = diff;\n    diff = mix(diff*vec3(0.9,0.4,0.1),diff,noibound);\n    if(noibound<1.)diff = mix(df*vec3(0.9,0.2,0.1),diff,smoothstep(0.03,0.05,noiy2*noiz2));\n    if(noiy*noiz>0.03&&noiy*noiz<0.038) diff *= 0.;\n    vec3 R = reflect(rd,normal);\n    float spec = pow(max(dot(ld,R),0.),5.0);\n    if(noibound<0.9)spec *= 0.;\n    col = diff+0.7*spec;\n    }\n  vec3 fogcol = vec3(0.1);\n    float far = 3.0;\n    col = mix(col,fogcol,clamp(t/far,0.0,1.0));\n  float noifog = fbm(uv*0.5-time*vec2(0.05,0.1));\n  float noifog2 = fbm(uv*0.5-time*vec2(-0.05,0.1));\n    col += (noifog+noifog2)*0.5;\n    col = pow(col,vec3(1.0,1.0,1.3));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}