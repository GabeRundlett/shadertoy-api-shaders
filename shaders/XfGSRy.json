{
    "Shader": {
        "info": {
            "date": "1715317745",
            "description": "Simple Cellular Automata base",
            "flags": 32,
            "hasliked": 0,
            "id": "XfGSRy",
            "likes": 5,
            "name": "Float Conway Cellular Automata",
            "published": 3,
            "tags": [
                "automata",
                "cellular",
                "cell",
                "conway",
                "gameoflife",
                "float"
            ],
            "usePreview": 0,
            "username": "GabeRundlett",
            "viewed": 146
        },
        "renderpass": [
            {
                "code": "// You can switch the shadertoy to use Conway's Game of Life rules with the define\n// in the Buffer A shader code.\n#define ZOOM 4\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord / iResolution.xy;\n  Cell cell = unpack_cell(texelFetch(iChannel0, ivec2(fragCoord) / ZOOM, 0));\n  fragColor = cell_color(cell);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float hash12(vec2 p) {\n  vec3 p3 = fract(vec3(p.xyx) * .1031);\n  p3 += dot(p3, p3.yzx + 33.33);\n  return fract((p3.x + p3.y) * p3.z);\n}\n\nivec2 positive_modulo(ivec2 x, ivec2 bounds) {\n  return ((x % bounds) + bounds) % bounds;\n}\n\nvec3 hsv2rgb(in vec3 c) {\n  vec3 rgb = clamp(abs(mod(c.x * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0,\n                   0.0, 1.0);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nstruct Cell {\n  float density;\n};\n\nCell unpack_cell(vec4 pixel_value) {\n  Cell result;\n  result.density = pixel_value.x;\n  return result;\n}\n\nvec4 pack_cell(Cell cell) {\n  vec4 result = vec4(0);\n  result.x = cell.density;\n  return result;\n}\n\nvec4 cell_color(Cell cell) {\n  return vec4(hsv2rgb(vec3(cell.density, 0.9, cell.density > 0.5 ? 1.0 : 0.0)), 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n#define CONWAY_RULES 0\n\nCell init_cell(ivec2 cell_i) {\n  Cell new_cell;\n  new_cell.density =\n      hash12(vec2(cell_i + ivec2(iFrame * 987) % ivec2(iResolution)));\n#if CONWAY_RULES\n  new_cell.density = floor(new_cell.density * 1.9);\n#endif\n  return new_cell;\n}\n\nvoid starve_cell(inout Cell cell, float surrounding_density) {\n#if CONWAY_RULES\n  cell.density = 0.0;\n#else\n  cell.density = 0.0;\n#endif\n}\n\nvoid suffocate_cell(inout Cell cell, float surrounding_density) {\n#if CONWAY_RULES\n  cell.density = 0.0;\n#else\n  cell.density *= 0.75;\n#endif\n}\n\nvoid reproduce_cell(inout Cell cell, float surrounding_density) {\n#if CONWAY_RULES\n  cell.density = 1.0;\n#else\n  cell.density += (0.5 - abs(surrounding_density - 3.0)) + 0.05;\n#endif\n}\n\nCell simulate_cell(ivec2 cell_i) {\n  float surrounding_density = 0.0;\n  Cell new_cell;\n\n  for (int i = 0; i < 9; ++i) {\n    ivec2 offset = ivec2(i % 3, i / 3) - 1;\n    Cell neighbor_cell = unpack_cell(texelFetch(\n        iChannel0, positive_modulo(cell_i + offset, ivec2(iResolution)), 0));\n    if (all(equal(offset, ivec2(0)))) {\n      new_cell = neighbor_cell;\n      continue;\n    }\n    surrounding_density += neighbor_cell.density;\n  }\n\n  if (surrounding_density < 2.0) {\n    starve_cell(new_cell, surrounding_density);\n  }\n  if (surrounding_density > 3.0) {\n    suffocate_cell(new_cell, surrounding_density);\n  }\n  if (abs(surrounding_density - 3.0) < 0.5) {\n    reproduce_cell(new_cell, surrounding_density);\n  }\n\n  return new_cell;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  ivec2 cell_i = ivec2(fragCoord);\n\n  Cell new_cell;\n\n  if (iFrame == 0) {\n    new_cell = init_cell(cell_i);\n  } else {\n    new_cell = simulate_cell(cell_i);\n  }\n\n  fragColor = pack_cell(new_cell);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}