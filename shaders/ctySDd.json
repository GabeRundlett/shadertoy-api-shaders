{
    "Shader": {
        "info": {
            "date": "1686450197",
            "description": "2D Stylized Ocean\nI got burnt out while doing the clouds.",
            "flags": 0,
            "hasliked": 0,
            "id": "ctySDd",
            "likes": 5,
            "name": "2D Stylized Waterline",
            "published": 3,
            "tags": [
                "2d",
                "ocean",
                "stylized"
            ],
            "usePreview": 0,
            "username": "Bricktronic",
            "viewed": 220
        },
        "renderpass": [
            {
                "code": "float rand(vec2 c){\n\treturn fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n#define PI 3.14159\nfloat noise(vec2 p, float freq ){\n\tfloat unit = 2000.0 / freq;\n\tvec2 ij = floor(p/unit);\n\tvec2 xy = mod(p,unit)/unit;\n\txy = .5*(1.-cos(PI*xy));\n\tfloat a = rand((ij+vec2(0.,0.)));\n\tfloat b = rand((ij+vec2(1.,0.)));\n\tfloat c = rand((ij+vec2(0.,1.)));\n\tfloat d = rand((ij+vec2(1.,1.)));\n\tfloat x1 = mix(a, b, xy.x);\n\tfloat x2 = mix(c, d, xy.x);\n\treturn mix(x1, x2, xy.y);\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nconst vec3 skyTop = vec3(0.5, 0.8, 0.97);\nconst vec3 skyHorizon = vec3(0.9, 0.9, 0.8);\nconst vec3 cloudColor = vec3(0.97, 0.95, 0.94);\nvec3 renderSky(vec2 uv)\n{\n    float horizonFac = map(uv.y, 0.5, 1.0, 0.0, 1.0);\n    vec3 skyColor = mix(skyHorizon, skyTop, horizonFac);\n    \n    vec2 cloudUV = vec2(uv.x + iTime * .05, uv.y);\n    float cloudFac = 1.5;\n    for(float i = 1.0; i < 3.; i++)\n    {\n        float n = noise(cloudUV + i, i * 10000.);\n        \n        if(n > 0.)\n            cloudFac *= n;\n    }\n    \n    cloudFac = clamp(cloudFac, 0., 1.) * horizonFac;\n    \n    return mix(skyColor, mix(skyHorizon, cloudColor, cloudFac), cloudFac);\n}\n\nconst vec3 waterColor = vec3(0.3, 0.68, 0.75);\nvec3 renderWater(vec2 uv, float depth)\n{\n    float lipFac = clamp(depth * 125., 0.25, 1.);\n    float depthFac = (1.0 - depth) + (uv.y * .75);\n    return waterColor * depthFac * lipFac;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float uvNoise = noise(uv + iTime, 2000.);\n    float height = 0.5 + (uvNoise * 0.1);\n    \n    if(uv.y < height)\n    color = renderWater(uv, height - uv.y);\n     else\n    color = renderSky(uv);\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}