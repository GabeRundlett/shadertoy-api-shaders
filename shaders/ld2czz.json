{
    "Shader": {
        "info": {
            "date": "1490723058",
            "description": "Flight through terrain adapted from Shane's \"Canyon Pass\"",
            "flags": 0,
            "hasliked": 0,
            "id": "ld2czz",
            "likes": 3,
            "name": "Drone Flight",
            "published": 3,
            "tags": [
                "raymarch",
                "flight",
                "drone",
                "canyon"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 777
        },
        "renderpass": [
            {
                "code": "// \"Drone Flight\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Flight through terrain adapted from Shane's \"Canyon Pass\"\n\nfloat PrSphDf (vec3 p, float s);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrRCylDf (vec3 p, float r, float rt, float h);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nvec2 Rot2D (vec2 q, float a);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nconst float pi = 3.14159;\n\nvec3 dronePos, ltPos;\nvec2 aTilt;\nfloat dstFar, tCur;\nint idObj;\nconst int idDrBod = 1, idDrLamp = 2, idDrCam = 3;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d;\n  const float dSzFac = 6.;\n  dMin = dstFar;\n  dMin *= dSzFac;\n  qq = dSzFac * (p - dronePos);\n  qq.yz = Rot2D (qq.yz, - aTilt.y);\n  qq.yx = Rot2D (qq.yx, - aTilt.x);\n  q = qq;\n  q.y -= 0.05;\n  d = PrRCylDf (q.xzy, 0.2, 0.03, 0.07);\n  if (d < dMin) { dMin = d;  idObj = idDrBod; }\n  q.y -= 0.07;\n  d = PrRoundBoxDf (q, vec3 (0.06, 0.02, 0.12), 0.04);\n  if (d < dMin) { dMin = d;  idObj = idDrLamp; }\n  q = qq;\n  q.y -= -0.05;\n  d = PrSphDf (q, 0.17);\n  if (d < dMin) { dMin = d;  idObj = idDrCam; }\n  q = qq;\n  q.xz = abs (q.xz) - 0.7;\n  d = min (PrCylAnDf (q.xzy, 0.5, 0.05, 0.05), PrCylDf (q.xzy, 0.1, 0.03));\n  q -= vec3 (-0.4, -0.15, -0.4);\n  d = min (d, PrRCylDf (q.xzy, 0.05, 0.03, 0.2));\n  q -= vec3 (-0.3, 0.2, -0.3);\n  q.xz = Rot2D (q.xz, 0.25 * pi);\n  d = min (d, min (PrRCylDf (q, 0.05, 0.02, 1.), PrRCylDf (q.zyx, 0.05, 0.02, 1.)));\n  if (d < dMin) { dMin = d;  idObj = idDrBod; }\n  return dMin / dSzFac;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 50; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 TrackPath (float t)\n{\n  return vec3 (vec2 (sin (t * 0.15), cos (t * 0.17)) * mat2 (4., -1.5, 1.3, 1.7), t);\n}\n\nfloat GrndDf (vec3 p)\n{\n  vec3 pt;\n  float s;\n  p.xy -= TrackPath (p.z).xy;\n  s = p.y + 3.;\n  pt = abs (fract (p + abs (fract (p.zxy) - 0.5)) - 0.5);\n  p += (pt - 0.25) * 0.3;\n  return min (length (cos (0.6 * p + 0.8 * sin (1.3 * p.zxy))) - 1.1,\n     s + 0.07 * dot (pt, vec3 (1.)));\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = GrndDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nfloat GrndAO (vec3 ro, vec3 rd)\n{\n  float ao, d;\n  ao = 0.;\n  for (int j = 0; j < 8; j ++) {\n    d = float (j + 1) / 8.;\n    ao += max (0., d - 3. * GrndDf (ro + rd * d));\n  }\n  return clamp (1. - 0.2 * ao, 0., 1.);\n}\n\nvec3 GrndNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (GrndDf (p + e.xxx), GrndDf (p + e.xyy),\n     GrndDf (p + e.yxy), GrndDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat GrndSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 16; j ++) {\n    h = GrndDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += max (0.2, 0.1 * d);\n    if (sh < 0.05) break;\n  }\n  return 0.3 + 0.7 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, bgCol, vn, ltDir;\n  float dstGrnd, dstObj, ltDist, atten, spec;\n  bgCol = vec3 (0.8, 0.8, 0.9);\n  dstGrnd = GrndRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  if (min (dstGrnd, dstObj) < dstFar) {\n    ltDir = ltPos - ro;\n    ltDist = length (ltDir);\n    ltDir /= ltDist;\n    atten = 1. / (1. + 0.002 * ltDist * ltDist);\n    if (dstGrnd < dstObj) {\n      ro += rd * dstGrnd;\n      vn = GrndNf (ro);\n      vn = VaryNf (5. * ro, vn, 50.);\n      col = mix (vec3 (0.5, 0.4, 0.1), vec3 (0.4, 0.8, 0.4),\n         clamp (0.5 + vn.y, 0., 1.)) *\n         (0.2 + 0.8 * max (dot (vn, ltDir), 0.) +\n         pow (max (dot (reflect (ltDir, vn), rd), 0.0), 32.)) *\n         (0.1 + 0.9 * atten * min (GrndSShadow (ro, ltDir), GrndAO (ro, vn)));\n      col = mix (col, bgCol, smoothstep (0.45, 0.99, dstGrnd / dstFar));\n    } else {\n      ro += rd * dstObj;\n      vn = ObjNf (ro);\n      if (idObj == idDrBod) {\n        col = vec3 (1.5, 1., 1.5);\n        spec = 0.5;\n      } else if (idObj == idDrLamp) {\n        col = mix (vec3 (0.3, 0.3, 2.), vec3 (2., 0., 0.),\n           step (0., sin (10. * tCur)));\n        spec = -1.;\n      } else if (idObj == idDrCam) {\n        col = vec3 (0.1, 0.1, 0.1);\n        spec = 1.;\n      }\n      if (spec >= 0.)\n        col = col * (0.2 + 0.8 * GrndSShadow (ro, ltDir)) *\n           (0.1 + 0.9 * atten * (max (dot (ltDir, vn), 0.) +\n           spec * pow (max (dot (reflect (rd, vn), ltDir), 0.), 64.)));\n    }\n  } else col = bgCol;\n  return pow (clamp (col, 0., 1.), vec3 (0.9));\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, fpF, fpB, vd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, s, ss;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  s = 4. * tCur;\n  ss = s + 2.5 + 1.5 * cos (0.1 * s);\n  dronePos = TrackPath (ss);\n  aTilt = vec2 (12. * (TrackPath (ss + 0.1).x - dronePos.x), 0.2);\n  fpF = TrackPath (s + 0.1);\n  fpB = TrackPath (s - 0.1);\n  ro = 0.5 * (fpF + fpB);\n  vd = fpF - fpB;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az = az + 2. * pi * mPtr.x;\n    el = el + 0.95 * pi * mPtr.y;\n  }\n  ori = vec2 (el, az + ((length (vd.xz) > 0.) ? atan (vd.x, vd.z) : 0.5 * pi));\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 1.6));\n  ltPos = ro + 10. * normalize (vec3 (-0.5, 1., -1.));\n  dstFar = 30.;\n  fragColor = vec4 (ShowScene (ro, rd), 2.);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrRCylDf (vec3 p, float r, float rt, float h)\n{\n  vec2 dc;\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  dc = vec2 (dxy, dz) + rt;\n  return min (min (max (dc.x, dz), max (dc.y, dxy)), length (dc) - rt);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n)) * (1. / 1.9375);\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}