{
    "Shader": {
        "info": {
            "date": "1467388884",
            "description": "something else kinda interesting to look at. for some reason it looks like some of the cells are orange. it is also possible I'm going blind.",
            "flags": 0,
            "hasliked": 0,
            "id": "4dVSWt",
            "likes": 36,
            "name": "shifting lines",
            "published": 3,
            "tags": [
                "procedural",
                "grid",
                "lines",
                "blackandwhite"
            ],
            "usePreview": 0,
            "username": "mahalis",
            "viewed": 1449
        },
        "renderpass": [
            {
                "code": "float noiseish(vec2 coord, vec2 coordMultiplier1, vec2 coordMultiplier2, vec2 coordMultiplier3, vec3 timeMultipliers) {\n    return 0.333 * (sin(dot(coordMultiplier1, coord) + timeMultipliers.x * iTime) + sin(dot(coordMultiplier2, coord) + timeMultipliers.y * iTime) + sin(dot(coordMultiplier3, coord) + timeMultipliers.z * iTime));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    vec2 uvOffset;\n    uvOffset.x = .2 * sin(iTime * 0.41 + 0.7) *pow(abs(uv.y - 0.5), 3.1) - sin(iTime * 0.07 + 0.1);\n    uvOffset.y = -iTime * 0.03 + .05 * sin(iTime * 0.3) * pow(abs(uv.x - 0.5), 1.8);\n    uv += uvOffset;\n    const float cellResolution = 7.0;\n    const float lineSmoothingWidth = 0.05;\n    vec2 localUV = fract(uv * cellResolution);\n    vec2 cellCoord = floor(uv * cellResolution);\n    \n    vec2 angle = 4.9 * normalize(vec2(noiseish(cellCoord, vec2(1.7, 0.9), vec2(2.6, 1.1), vec2(0.0), vec3(0.55, 0.93, 0.0)), noiseish(cellCoord, vec2(0.6, 1.9), vec2(1.3, 0.3), vec2(0.0), vec3(1.25, 0.83, 0.0))));\n    \n    float v = smoothstep(-lineSmoothingWidth, lineSmoothingWidth, abs(fract(dot(localUV, angle) + 3.6*iTime)-0.5) - 0.25);\n    \n    const float borderSmoothingWidth = 0.02;\n    // apply borders\n    vec2 centeredLocalUV = localUV - vec2(0.5);\n    const float borderDistance = 0.45; // 0.5 = all the way to the edge of the cell\n    v = max(v, max(smoothstep(-borderSmoothingWidth, borderSmoothingWidth, abs(centeredLocalUV.x) - borderDistance), smoothstep(-borderSmoothingWidth, borderSmoothingWidth, abs(centeredLocalUV.y) - borderDistance)));\n    \n    fragColor = vec4(v, v, v, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}