{
    "Shader": {
        "info": {
            "date": "1722718087",
            "description": "bruh",
            "flags": 0,
            "hasliked": 0,
            "id": "4c2cz3",
            "likes": 1,
            "name": "aug22024",
            "published": 3,
            "tags": [
                "popart"
            ],
            "usePreview": 0,
            "username": "brendanluu",
            "viewed": 56
        },
        "renderpass": [
            {
                "code": "\nvec3 palette(float t) {\n    vec3 a = vec3(1.000,0.000,0.733);\n    vec3 b = vec3(0.333,0.169,0.263);\n    vec3 c = vec3(0.310,0.012,0.216);\n    vec3 d = vec3(0.416,0.165,0.165);\n    \n    return a + b*cos(6.28318*(c*t-d) );\n}\n\nfloat vignette(vec2 uv, float radius, float softness) {\n    float d = length(uv);\n    float v = smoothstep(radius, radius - softness, d);\n    return v;\n}\n\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nvec2 hash( vec2 p ) {\n    p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise(vec2 p) {\n    const float K1 = 0.366025404;\n    const float K2 = 0.211324865;\n    \n    vec2 i = floor(p + (p.x+p.y)*K1);\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n    vec2 b = a - o + K2;\n    vec2 c = a - 1.0 + 2.0*K2;\n    \n    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c)), 0.0);\n    \n    vec3 n = h*h*h*h*vec3(dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    \n    return dot(n, vec3(70.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 backgroundColor = vec3(0.,0.,0.); // Green background\n    vec3 finalColor = backgroundColor;\n    \n    // Create droplet effect\n    float dropletScale = 4.;\n    vec2 dropletUV = uv * dropletScale;\n    vec2 id = floor(dropletUV);\n    vec2 gv = fract(dropletUV) - 0.5;\n    \n    for (float y = -2.0; y <= 2.0; y++) {\n        for (float x = -2.0; x <= 2.0; x++) {\n            vec2 offset = vec2(x, y);\n            vec2 n = hash(id + offset);\n            vec2 p = offset + sin(n * iTime) * 9.;\n            float d = length(gv - p);\n            \n            float rippleSpeed = 1.;\n            float rippleStrength = -88.9;\n            float r = smoothstep(.1, 11., d);\n            r *= 4.0 + sin(iTime * rippleSpeed + noise(id + offset) * 1.0) * rippleStrength;\n            \n            if (d < r) {\n                vec2 dropUV = (gv - p) / r + 0.1;\n                dropUV = dropUV * 1.0 - 1.0;\n                \n                float dropD = length(dropUV);\n                vec3 col = palette(iTime * -88.0 + noise(id + offset));\n                dropD = sin(dropD * 3.0 + (iTime + noise(id + offset) * 5.0) / 4.0) / 8.0;\n                dropD = abs(dropD);\n                dropD = 0.1 / dropD;\n                finalColor = mix(finalColor, col * dropD * 1.0, r);\n            }\n        }\n    }\n    \n    \n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}