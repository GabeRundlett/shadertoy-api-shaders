{
    "Shader": {
        "info": {
            "date": "1637222977",
            "description": "Out on a mission...",
            "flags": 0,
            "hasliked": 0,
            "id": "flyGzD",
            "likes": 16,
            "name": "Helicopter Squadron",
            "published": 3,
            "tags": [
                "flight"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 364
        },
        "renderpass": [
            {
                "code": "// \"Helicopter Squadron\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat ShowIntPZ (vec2 q, vec2 cBox, float mxChar, float val);\nvec2 Hashv2v2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nmat3 flMat;\nvec3 qHit, sunDir, flDisp;\nvec2 gId;\nfloat tCur, dstFar, hgSize, grLim, hVel, heliSz;\nint idObj;\nconst int idHeli = 1, idRotorM = 2, idRotorT = 3, idSkd = 4, idGun = 5;\nconst float pi = 3.1415927;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{  // (from \"Piz Gloria With Helicopter\")\n  vec3 q;\n  vec2 csRotor;\n  float dMin, d, r, s;\n  csRotor = sin (10.3 * pi * tCur + vec2 (0.5 * pi, 0.));\n  dMin = dstFar / heliSz;\n  p -= flDisp;\n  p.xz = Rot2D (p.xz, 0.25 * pi);\n  p = flMat * p / heliSz;\n  q = p;\n  r = 1.;\n  if (q.z < -0.1) {\n    s = (q.z + 0.1) * (q.z + 0.1);\n    r *= 1. - 0.1 * s;\n    q.y -= 0.05 * s;\n  } else if (q.z > 0.1) {\n    s = (q.z - 0.1) * (q.z - 0.1);\n    r *= 1. - 0.03 * s;\n  }\n  q.x *= 0.8;\n  d = PrCapsDf (q, max (r, 0.), 2.);\n  q = p;\n  q.yz = Rot2D (q.yz - vec2 (1.1, -4.2), -0.05 * pi);\n  r = 0.2 * (1. + 0.25 * q.z);\n  q.y *= 0.7;\n  d = min (d, PrCapsDf (q, r, 1.5));\n  q = p;\n  q.yz -= vec2 (1.7, -0.2);\n  d = min (d, PrCylDf (q.xzy, 0.4, 0.4));\n  q = p;\n  q.yz -= vec2 (0.4, -1.);\n  r = 1.1;\n  if (q.z < 0.) {\n    s = q.z * q.z;\n    r *= 1. - 0.2 * s;\n    q.y -= 0.1 * s;\n  }\n  q.y *= 0.8;\n  d = SmoothMin (d, PrCapsDf (q, max (r, 0.), 1.5), 0.03);\n  q = p;\n  q.yz -= vec2 (1.4, -6.15);\n  d = min (d, max (PrRoundCylDf (q.yzx, 0.5, 0.05, 0.02), 0.35 - length (q.yz)));\n  q = p;\n  DMINQ (idHeli);\n  q = p;\n  q.yz = Rot2Cs (q.yz - vec2 (1.4, -6.15), csRotor);\n  d = PrRoundBoxDf (q, vec3 (0.01, 0.32, 0.04), 0.02);\n  DMINQ (idRotorT);\n  q = p;\n  q.yz -= vec2 (2., -0.2);\n  d = PrCylDf (q.xzy, 0.12, 0.5);\n  q.y -= 0.4;\n  q.xz = Rot2Cs (q.xz, csRotor);\n  d = min (d, PrRoundBoxDf (q, vec3 (4.5, 0.02, 0.08), 0.03));\n  DMINQ (idRotorM);\n  q = p;\n  q.x = abs (q.x);\n  q.xy -= vec2 (0.9, -1.4);\n  d = PrRoundBoxDf (q, vec3 (0.1, 0.01, 1.4), 0.04);\n  q.xy = Rot2D (q.xy, -0.1 * pi);\n  q.z = abs (q.z);\n  q.yz -= vec2 (0.4, 0.7);\n  d = min (d, PrCylDf (q.xzy, 0.06, 0.4));\n  DMINQ (idSkd);\n  q = p;\n  q.yz -= vec2 (-0.8, 2.1);\n  d = PrCapsDf (q.xzy, 0.2, 0.2);\n  q.yz -= vec2 (-0.2, 0.3);\n  d = min (d, PrCylDf (q, 0.1, 0.3));\n  DMINQ (idGun);\n  return 0.7 * heliSz * dMin;\n}\n\nvoid ObjState ()\n{\n  vec3 vd, cb, sb;\n  vec2 h;\n  float tc, t, tt, flPit, flYaw, flRol;\n  tc = tCur + 0.7 * (gId.x + gId.y);\n  t = cos (2. * pi * mod (0.6 * tc, 1.));\n  tt = (mod (0.3 * tc, 6.) - 2.) / 4.;\n  h = Hashv2v2 (vec2 (17.1, 19.1) * gId + 1.1) - 0.5;\n  flDisp.xz = hgSize * (gId + 0.5 + 0.2 * h);\n  flDisp.y = 2. + ((tt > 0.) ? 0.2 * (1. - t) + (7. + dot (h, vec2 (0.5))) *\n     SmoothBump (0.2, 0.8, 0.2, tt) : 0.);\n  flPit = 0.03 * pi + 0.02 * pi * sin (0.4 * pi * (h.x + h.y) * tCur);\n  flYaw = 0.03 * pi * sin (0.3 * pi * h.y * tCur);\n  flRol = 0.02 * pi * sin (0.2 * pi * h.x * tCur);\n  cb = cos (vec3 (flPit, flYaw, flRol));\n  sb = sin (vec3 (flPit, flYaw, flRol));\n  flMat = mat3 (1., 0., 0., 0., cb.x, - sb.x, 0., sb.x, cb.x) *\n          mat3 (cb.z, - sb.z, 0., sb.z, cb.z, 0., 0., 0., 1.) *\n          mat3 (cb.y, 0., - sb.y, 0., 1., 0., sb.y , 0., cb.y);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{ // (from \"Flying Bathtubs\")\n  vec3 p, rdi;\n  vec2 gIdP, s;\n  float dHit, d, eps;\n  eps = 0.0005;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  rdi.xz = 1. / rd.xz;\n  gIdP = vec2 (-999.);\n  dHit = eps;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + dHit * rd;\n    gId = floor (p.xz / hgSize);\n    if (gId != gIdP) {\n      ObjState ();\n      gIdP = gId;\n    }\n    d = (Maxv2 (abs (gId)) <= grLim) ? ObjDf (p) : dstFar;\n    s = (hgSize * (gId + step (0., rd.xz)) - p.xz) * rdi.xz;\n    d = min (d, abs (Minv2 (s)) + eps);\n    dHit += d;\n    if (d < eps || dHit > dstFar || p.y < 0.) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  gIdP = vec2 (-999.);\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    gId = floor (p.xz / hgSize);\n    if (gId != gIdP) {\n      ObjState ();\n      gIdP = gId;\n    }\n    if (Maxv2 (abs (gId)) <= grLim) {\n      h = ObjDf (p);\n      sh = min (sh, smoothstep (0., 0.05 * d, h));\n    } else h = 0.3 * hgSize;\n    d += clamp (h, 0.02, 0.5);\n    if (sh < 0.05 || d > dstFar) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol;\n  vec2 q;\n  float f, fd, ff;\n  q = 0.01 * (ro.xz + tCur * vec2 (0.5, 2.) + ((100. - ro.y) / rd.y) * rd.xz);\n  ff = Fbm2 (q);\n  f = smoothstep (0.1, 0.8, ff);\n  fd = smoothstep (0.1, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n  clCol = (0.8 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n     smoothstep (0., 0.05, abs (fd)));\n  fd = smoothstep (0.01, 0.1, rd.y);\n  col = mix (mix (vec3 (0.8, 0.8, 0.75), vec3 (0.4, 0.5, 0.8), 0.3 + 0.7 * fd), clCol,\n     0.1 + 0.9 * f * fd);\n  return col;\n}\n\nfloat GrndHt (vec2 p)\n{  // (from \"Wind Farm\")\n  return Fbm2 (0.4 * p) - 0.45;\n}\n\nfloat GrndHtN (vec2 p)\n{\n  float h;\n  h = GrndHt (p);\n  if (h > 0.) h = 0.3 * h + 0.3 * Fbm2 (2. * p);\n  return h;\n}\n\nvec3 GrndNf (vec2 p)\n{\n  vec2 e;\n  e = vec2 (0.001, 0.);\n  return normalize (vec3 (GrndHtN (p) - vec2 (GrndHtN (p + e.xy), GrndHtN (p + e.yx)), e.x)).xzy;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, row;\n  vec2 s;\n  float dstObj, dstGrnd, sh;\n  bool wtRefl;\n  heliSz = 0.5;\n  wtRefl = false;\n  dstGrnd = (rd.y < 0.) ? - ro.y / rd.y : dstFar;\n  dstObj = ObjRay (ro, rd);\n  if (dstGrnd < min (dstObj, dstFar)) {\n    row = ro + dstGrnd * rd;\n    s = row.xz + (hVel / sqrt(2.)) * tCur;\n    if (GrndHt (s) < 0.) {\n      ro = row;\n      row.xz = s;\n      vn = VaryNf (2. * row, vec3 (0., 1., 0.), 0.05 * (1. - smoothstep (0.1, 0.4, dstGrnd / dstFar)));\n      rd = reflect (rd, vn);\n      ro += 0.01 * rd;\n      dstObj = ObjRay (ro, rd);\n      dstGrnd = dstFar;\n      wtRefl = true;\n    }\n  }\n  if (min (dstObj, dstGrnd) < dstFar) {\n    if (dstObj < dstGrnd) {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      if (idObj == idHeli) {\n        col4 = mix (vec4 (1., 0., 0., 0.2), vec4 (0.75, 0.85, 0.9, 0.2), smoothstep (0., 0.02,\n           abs (qHit.y) - 0.04));\n        if (length (vec2 (qHit.x, qHit.y / 0.8)) > 1.24 && qHit.y > 0.55 && qHit.z > 0.4 &&\n           abs (abs (qHit.x) - 0.3) > 0.05) col4 = vec4 (0., 0.5, 0.5, -1.);\n        if (PrRoundBox2Df (qHit.zy - vec2 (-1., 0.8), vec2 (1.2, 0.6), 0.01) < 0.) col4 =\n           mix (col4, vec4 (1., 0., 0., 0.2), ShowIntPZ ((qHit.zy - vec2 (-1.2 + 0.4 * sign (qHit.x), 0.8)),\n           vec2 (sign (qHit.x), 0.5), 3., 1. + grLim - gId.x + (2. * grLim + 1.) * (grLim - gId.y)));\n      } else if (idObj == idRotorM) {\n        col4 = (length (qHit.xz) < 4.2) ? vec4 (0.8, 0.8, 0.9, 0.1) : vec4 (1., 1., 0.2, 0.1);\n      } else if (idObj == idRotorT) {\n        col4 = (length (qHit.yz) > 0.06) ? vec4 (0.8, 0.8, 0.9, 0.1) : vec4 (1., 1., 0.2, 0.1);\n      } else if (idObj == idSkd) {\n        col4 = vec4 (0.7, 0.7, 0.75, 0.1);\n      } else if (idObj == idGun) {\n        col4 = vec4 (0.8, 0.8, 0.8, 0.2);\n      }\n    } else {\n      ro += dstGrnd * rd;\n      gId = floor (ro.xz / hgSize);\n      s = ro.xz + (hVel / sqrt(2.)) * tCur;\n      col4 = mix (vec4 (0.4, 0.5, 0.3, 0.), vec4 (0., 0.5, 0.1, 0.),\n         smoothstep (0.2, 0.8, Fbm2 (4. * s)));\n      col4 = mix (vec4 (0.2, 0.5, 0.2, 0.), col4,  1. - smoothstep (0.3, 0.6, dstGrnd / dstFar));\n      vn = GrndNf (s);\n    }\n    if (col4.a >= 0.) {\n      sh = (min (dstObj, dstGrnd) < dstFar) ? ObjSShadow (ro + 0.01 * vn, sunDir) : 1.;\n      col = col4.rgb * (0.2 + 0.2 * max (- dot (vn, sunDir), 0.) + 0.8 * sh * max (dot (vn, sunDir), 0.)) +\n         step (0.95, sh) * col4.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n      col = mix (col, SkyCol (ro, rd), (wtRefl ? 0.2 + 0.8 * smoothstep (0.4, 0.6, dstObj / dstFar) :\n         smoothstep (0.8, 0.9, min (dstGrnd, dstObj) / dstFar)));\n    } else col = mix (col4.rgb, SkyCol (ro, reflect (rd, vn)), 0.8);\n  } else col = SkyCol (ro, rd);\n  col *= vec3 (1., 0.85, 0.85) * (wtRefl ? 0.85 : 1.);\n  return clamp (col, 0., 1.);\n}\n\n#define AA  0   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  hgSize = 8.;\n  grLim = 4.;\n  hVel = 2.;\n  az = pi;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az -= 2. * pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n  } else {\n    az = pi + 2. * pi * (0.5 + abs (mod (0.01 * tCur, 2.) - 1.));\n  }\n  el = clamp (el, -0.2 * pi, 0.2 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vec3 (0., 2., -4. - 1.4 * (grLim + 1.) * hgSize * (0.9 - 0.1 * cos (4. * az)));\n  ro.xz = Rot2D (ro.xz, - az) + 0.5 * hgSize;\n  zmFac = 2.5;\n  dstFar = 150.;\n  sunDir = vuMat * normalize (vec3 (1., 1.5, -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat DigSeg (vec2 q)\n{\n  q = 1. - smoothstep (vec2 (0.), vec2 (0.04, 0.07), abs (q) - vec2 (0.13, 0.5));\n  return q.x * q.y;\n}\n\n#define DSG(q) k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q)\n\nfloat ShowDig (vec2 q, int iv)\n{\n  vec2 vp, vm, vo;\n  float d;\n  int k, kk;\n  vp = vec2 (0.5, 0.5);\n  vm = vec2 (-0.5, 0.5);\n  vo = vp - vm;\n  if (iv == -1) k = 8;\n  else if (iv < 2) k = (iv == 0) ? 119 : 36;\n  else if (iv < 4) k = (iv == 2) ? 93 : 109;\n  else if (iv < 6) k = (iv == 4) ? 46 : 107;\n  else if (iv < 8) k = (iv == 6) ? 122 : 37;\n  else             k = (iv == 8) ? 127 : 47;\n  q = (q - 0.5) * vec2 (1.8, 2.3);\n  d = 0.;\n  kk = k;\n  DSG (q.yx - vo);  DSG (q.xy - vp);  DSG (q.xy - vm);  DSG (q.yx);\n  DSG (q.xy + vm);  DSG (q.xy + vp);  DSG (q.yx + vo);\n  return d;\n}\n\nfloat ShowIntPZ (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (Minv2 (q) >= 0. && Maxv2 (q) < 1.) {\n    q.x *= mxChar;\n    nDig = mxChar;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = max (val, 0.) / pow (10., mxChar - idChar - 1.);\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}