{
    "Shader": {
        "info": {
            "date": "1628339788",
            "description": "Basically computing the path integral for waves",
            "flags": 32,
            "hasliked": 0,
            "id": "flBXzd",
            "likes": 40,
            "name": "Wave path tracing",
            "published": 3,
            "tags": [
                "waves",
                "green"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 941
        },
        "renderpass": [
            {
                "code": "vec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\trgb = rgb*rgb*(3.0-2.0*rgb); \t\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Output to screen\n    vec4 res = texture(iChannel0, fragCoord/iResolution.xy);\n    vec2 wave = rot(-8.0*iTime)*res.xy/res.w;\n    \n    float ang = atan(wave.y, wave.x);\n    vec3 col = hsv2rgb(vec3(ang/TWO_PI, 0.9, 4.0*length(wave)));\n    fragColor = vec4(tanh(pow(2.0*col,vec3(0.75))),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float MAX_D = 8.0;\nconst int Diffraction_Order = 2;\n\nvec2 pix2world(vec2 p)\n{\n    return 10.0*(p - iResolution.xy*0.5)/iResolution.y;\n}\n\nfloat sdHexagram( in vec2 p, in float r )\n{\n    const vec4 k = vec4(-0.5,0.8660254038,0.5773502692,1.7320508076);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= 2.0*min(dot(k.yx,p),0.0)*k.yx;\n    p -= vec2(clamp(p.x,r*k.z,r*k.w),r);\n    return length(p)*sign(p.y);\n}\n\nfloat sdMoon(vec2 p, float d, float ra, float rb )\n{\n    p.y = abs(p.y);\n    float a = (ra*ra - rb*rb + d*d)/(2.0*d);\n    float b = sqrt(max(ra*ra-a*a,0.0));\n    if( d*(p.x*b-p.y*a) > d*d*max(b-p.y,0.0) )\n          return length(p-vec2(a,b));\n    return max( (length(p          )-ra),\n               -(length(p-vec2(d,0))-rb));\n}\n\nfloat scene(vec2 p)\n{\n    float de = 1e10;\n    //de = min(de, length(p) - 1.0);\n    de = min(de, sdHexagram(p + vec2(2.0, 0.0), 1.0));\n    de = min(de, sdMoon(p - vec2(3.0, 0.0), 1.0, 1.0, 0.8 ));\n    return de;\n}\n\nvec2 normal(vec2 p)\n{\n    vec2 dx = vec2(0,1)*1e-3;\n    return normalize(vec2(scene(p + dx.yx) - scene(p - dx.yx), scene(p + dx.xy) - scene(p - dx.xy))); \n}\n\nfloat trace(vec2 ro, vec2 rd, float maxd)\n{\n    float td = 0.0;\n    for(int i = 0; i < 256; i++)\n    {\n        float sd = scene(ro + rd*td);\n        \n        if(sd < 0.0) break;\n        \n        if(sd < td*0.001) \n        {\n            td -= sd*2.0;\n            break;\n        }\n        \n        td += sd;\n        if(td > maxd) break;\n    }\n    return td;\n}\n\n\nfloat importanceSampleD()\n{\n    float c = asinh(MAX_D);\n    return sinh(rand()*c);\n}\n\nfloat freq = 6.0;\n\nvec2 NEE_wave(vec2 p, float totd, float phi)\n{\n    vec2 ls = pix2world(iMouse.xy);\n    vec2 rd = normalize(ls - p);\n    float d0 =distance(ls,p);\n    float td = trace(p, rd, d0);\n    \n    return step(d0, td)*dir(phi + d0*freq)/(0.1 + totd+d0);\n}\n\nvec2 wavetrace(vec2 ro)\n{\n    vec2 rd = udir();\n    vec2 A = vec2(0.0);\n    float d = 0.0;\n    float phi = 0.0;\n    float prob = 1.0;\n    //A += NEE_wave(ro, d, phi);\n    for(int i = 0; i < Diffraction_Order; i++)\n    {\n        //diffraction\n        float td_diff = importanceSampleD();\n        //reflection\n        float td_refl = trace(ro, rd, MAX_D);\n        \n        float td;\n        if(td_diff < td_refl) //diffract\n        {\n            td = td_diff;\n            phi += freq*td; //we are already importance sampling by distance so add only phase\n            ro += rd*td;\n            prob /= PI;\n            rd = udir();  \n        }\n        else //reflect\n        {\n            td = td_refl;\n            \n            phi += freq*td + PI;\n            d += td;\n            \n            ro += rd*td;\n            vec2 N = normal(ro);\n            ro += N*0.002;\n            prob /= PI;\n            rd = normalize(udir() + N);  \n        }    \n        \n        if(td > MAX_D) break;\n    }\n    \n    A += NEE_wave(ro, d, phi)/prob;\n    \n    return A;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    rng_initialize(fragCoord, iFrame);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = pix2world(fragCoord + rand());\n\n    float sd = scene(p);\n    //freq = (rand()>0.5)?2.0:10.0;\n    \n    vec4 wave = vec4(0.0);\n    for(int i = 0; i < 10; i++)\n        wave += vec4(wavetrace(p).xyx,1.0);\n    \n    vec4 prev = texture(iChannel0, fragCoord/iResolution.xy);\n    \n    if(iMouse.z > 0.0)\n        prev*= 0.9;\n    \n    // Output to screen\n    fragColor = prev + wave;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define TWO_PI 6.28318530718\n#define PI 3.14159265359\n\n//internal RNG state \nuvec4 s0, s1; \nivec2 pixel;\n\nvoid rng_initialize(vec2 p, int frame)\n{\n    pixel = ivec2(p);\n\n    //white noise seed\n    s0 = uvec4(p, uint(frame), uint(p.x) + uint(p.y));\n    \n    //blue noise seed\n    s1 = uvec4(frame, frame*15843, frame*31 + 4566, frame*2345 + 58585);\n}\n\n// https://www.pcg-random.org/\nuvec4 pcg4d(inout uvec4 v)\n{\n\tv = v * 1664525u + 1013904223u;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v = v ^ (v>>16u);\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    return v;\n}\n\nfloat rand(){ return float(pcg4d(s0).x)/float(0xffffffffu); }\nvec2 rand2(){ return vec2(pcg4d(s0).xy)/float(0xffffffffu); }\nvec3 rand3(){ return vec3(pcg4d(s0).xyz)/float(0xffffffffu); }\nvec4 rand4(){ return vec4(pcg4d(s0))/float(0xffffffffu); }\n\nvec2 nrand2(float sigma, vec2 mean)\n{\n\tvec2 Z = rand2();\n    return mean + sigma * sqrt(-2.0 * log(Z.x)) * \n           vec2(cos(TWO_PI * Z.y),sin(TWO_PI * Z.y));\n}\n\nvec3 nrand3(float sigma, vec3 mean)\n{\n\tvec4 Z = rand4();\n    return mean + sigma * sqrt(-2.0 * log(Z.xxy)) * \n           vec3(cos(TWO_PI * Z.z),sin(TWO_PI * Z.z),cos(TWO_PI * Z.w));\n}\n\n//uniformly spherically distributed\nvec3 udir(vec2 rng)\n{\n    vec2 r = vec2(2.*PI*rng.x, acos(2.*rng.y-1.));\n    vec2 c = cos(r), s = sin(r);\n    return vec3(c.x*s.y, s.x*s.y, c.y);\n}\n\n\nvec2 dir(float a)\n{\n    return vec2(cos(a), sin(a));\n}\n\nmat2 rot(float a)\n{\n    vec2 d = dir(a);\n    return mat2(d.x, d.y, -d.y, d.x);\n}\n\nvec2 udir()\n{\n    float a = TWO_PI*rand();\n    return dir(a);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}