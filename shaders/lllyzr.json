{
    "Shader": {
        "info": {
            "date": "1503256630",
            "description": "work in progress.\nref images: [url]https://www.google.fr/search?q=celtic+knot&tbm=isch[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "lllyzr",
            "likes": 10,
            "name": "Celtic knot 3",
            "published": 3,
            "tags": [
                "2d",
                "pattern",
                "knot",
                "canvas",
                "short",
                "weaving",
                "celtic"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 767
        },
        "renderpass": [
            {
                "code": "// ref images: https://www.google.fr/search?q=celtic+knot&tbm=isch\n\n#define S(v)   smoothstep( p, 0., v)             \n// draw band:       alpha-mask   alpha                  pattern\n#define D(l)   O += (1.-O.a) * S( l-.3 ) * vec4( vec3( S( abs(l -.3 -p/2.) ) ), 1)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n\tvec2 R = iResolution.xy, I, C;\n    float N = 9.,                          // canvas size\n          z = N + 1.,\n          W = ceil(N/2.*R.x/R.y),\n          p = 8. * z / R.y;                // pixel size (for antialiasing)\n     \n\tU = z * ( U - .5*R) / R.y;\n    C = mod( I = round(U) , 2.);\n\n    O -= O;\n       \n    U = fract(U+.5)*2.-1.;\n    //if (abs(U.y)>.99) O.b++;\n\n #define L(a)  U.a += sign(I.a)*1.57,  D ( abs(length(U)-.79-.32)*1.41)  // 1.58 = 2-.3*sqrt(2)\n \n    if (mod(C.x+C.y,2.)==0.) {             // cross tiles\n        if (abs(I.x) > W) {}               \n        else if (abs(I.x) == W)            // side loops  \n            L(x);                        \n        else if (abs(I.y)==ceil(N/2.))     // top loops\n            L(y);                      \n        else  {                            // really cross\n            if (C.x == 0.) U.y = -U.y;     //    switch order\n            D( abs( U.x - U.y ) );         //    draw diag 1\n            D( abs( U.x + U.y ) );         //    draw diag 2\n        }\n    }\n    else {                                 // corners tiles\n        U = 1.-abs(U);\n        D( U.x + U.y ); \n    }\n    \n    O = 1.-O;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}