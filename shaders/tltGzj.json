{
    "Shader": {
        "info": {
            "date": "1576957441",
            "description": "click and drag to compare.\n\na quick sketch. I wanted to experiment with stylized/toon shading a bit, and also I put in a nice quote temporal antialiasing unquote.\n\nwish I had more time today, and more ideas. if you have any tips, leave a comment!",
            "flags": 0,
            "hasliked": 0,
            "id": "tltGzj",
            "likes": 25,
            "name": "stylized shading — sat.sketch #4",
            "published": 3,
            "tags": [
                "3d",
                "flat",
                "aliasing",
                "motionblur",
                "shading",
                "gradient",
                "hatching",
                "toon",
                "cel",
                "style",
                "taa"
            ],
            "usePreview": 0,
            "username": "szczm_",
            "viewed": 1096
        },
        "renderpass": [
            {
                "code": "// comment line below to increase performance\n#define QUOTE_TAA_UNQUOTE\n\n/*****************************************************************************************\n\n stylized shading — saturday sketch #4\n  by Matthias Scherba (szczm_)\n\n this is a quick sketch. I wanted to experiment with stylized/toon shading a bit,\n and also I put a nice quote temporal antialiasing unquote just because I could.\n\n from top left, to bottom right, going left to right:\n\n 1. simple lambert + phong for reference\n 2. flat shading\n 3. one step cel\n 4. one step cel warped with cel specular\n 5. two step cel\n 6. full range gradient\n 7. two step cel + gradient\n 8. two step cel + gradient + animated hatching <3 probably my favourite.\n 9. flatter gradient + flat specular\n\n click and drag to compare!\n\n any questions? leave a comment! I like to talk.\n\n\n*****************************************************************************************/\n\nprecision highp float;\n\nconst int MAX_STEPS = 50;\nconst float MIN_DIST = 1.0;\nconst float MAX_DIST = 9.0;\nconst float EPSILON = 0.01;\n\nfloat time;\n\n\nstruct HitInfo {\n    float dist;\n    float minDist;\n};\n    \n\n// https://github.com/hughsk/glsl-hsv2rgb/blob/master/index.glsl\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}    \n    \n\nfloat sphereSDF(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat boxSDF(vec3 p, vec3 b)\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat octahedronSDF(vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat torusSDF(vec3 p, vec2 t)\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\n// gotta fix those for my drivers\n#define TAU 6.28318530718\nfloat sinf(float arg) { return sin(mod(arg, TAU)); }\nfloat cosf(float arg) { return cos(mod(arg, TAU)); }\n\n\nfloat sceneSDF(vec3 p)\n{\n\tfloat scene = sphereSDF(p - vec3(1.5, 0.0, 1.0), 1.0);\n    scene = min(scene, boxSDF(p - vec3(-1.5, 0.0, 1.0), vec3(0.8)));\n    scene = min(scene, torusSDF(p - vec3(0.0, 0.0, -1.5), vec2(0.9, 0.3)));\n    \n    return scene;\n}\n\nHitInfo shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    int i;\n    float minDist = 10e6;\n    \n    for (i = 0; i < MAX_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        \n        depth += dist;\n        \n        minDist = min(minDist, dist / depth);\n        \n        if (dist < EPSILON) {\n\t\t\tbreak;\n        }\n        \n        if (depth >= end) {\n            depth = end;\n            break;\n        }\n    }\n    \n    return HitInfo(depth, minDist);\n}      \n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nvec3 normal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nvec3 lightPosition()\n{\n    return normalize(vec3(sinf(time), sinf(time * 1.5 + 2.0), sinf(time * 2.0 + 4.0)));\n}\n\nvec3 lightColor()\n{\n    return vec3(1.0, 1.0, 1.0);\n}\n\nvec3 lighting(in vec3 position, in vec3 normal, in vec3 color, in vec2 coords, in vec3 viewDir, float clicked)\n{\n    float variantNorm = 6.0 - floor(coords.y) * 3.0 + floor(coords.x);\n\n    float variantComp1 = floor(9.0 * iMouse.x / iResolution.x);\n    float variantComp2 = 8.0 - floor(9.0 * iMouse.y / iResolution.y);\n        \n   \tfloat variantComp = mix(variantComp1, variantComp2, step(0.5, coords.x));\n    float variant = mix(variantNorm, variantComp, clicked);\n        \n    vec3 lightPos = lightPosition();\n    vec3 lightCol = lightColor();\n    \n    // specular\n    \n   \tfloat shininess = 8.0;\n    float specularPhong = pow(max(dot(reflect(lightPos, normal), viewDir), 0.0), shininess);\n    float specularFlat = pow(max(dot(reflect(lightPos, normal), viewDir), 0.0), 0.5);\n\n    // ambient\n    \n    vec3 ambientColor = vec3(0.6, 0.53, 0.37);\n    \n    // diffuse terms\n    \n    float ndotl = dot(normal, lightPos);\n    \n    float diffuseLambert = max(0.0, ndotl) + specularPhong;\n    float diffuse1Step = step(0.0, ndotl);\n    float diffuse2Step = 0.5 * (step(-1./3., ndotl) + step(1./3., ndotl));\n    float diffuseFlat = 1.0;    \n    \n    float ndotlWrap = (ndotl + 0.5) * 2./3.;\n    float diffuseLambertWrap = max(0.0, ndotlWrap);\n    float diffuse1StepWrap = 0.5 * (step(0.0, ndotlWrap) + step(0.8, specularFlat));\n    \n    float diffuseGradient = 0.5 + 0.5 * ndotl;\n    float diffuse2StepGradient = mix(diffuseGradient, diffuse2Step, 0.3);\n    \n    vec3 textureCoords = 1.0 * position + 0.7 * vec3(floor(mod(time * 9.0, 3.0)));\n    float xySample = texture(iChannel1, textureCoords.xy * 0.5).r;\n    float xzSample = texture(iChannel1, textureCoords.xz).r;\n    float yzSample = texture(iChannel1, textureCoords.yz).r;\n    \n    vec3 normBlend = pow(normal, vec3(2.0));\n    normBlend = normBlend / (normBlend.x + normBlend.y + normBlend.z);\n    \n    float hatch = xySample * normBlend.z + xzSample * normBlend.y + yzSample * normBlend.x;    \n    float diffuse1StepHatch = step(-0.5 + hatch * 1.0, ndotl);\n    diffuse1StepHatch = mix(diffuse1StepHatch, diffuseGradient, 0.5);\n    \n    float diffuseFlatgrad = 0.7 + 0.3 * ndotl;\n    float diffuseFlatgradSpec = mix(diffuseFlatgrad, specularFlat, 0.5);\n    \n    // final terms\n    \n    vec3 ambient = ambientColor;\n    \n    float diffuse = diffuseLambert;\n    \n    diffuse = mix(diffuse, diffuseFlat, step(1.0, variant));\n    diffuse = mix(diffuse, diffuse1Step, step(2.0, variant));\n    diffuse = mix(diffuse, diffuse1StepWrap, step(3.0, variant));\n    \n    diffuse = mix(diffuse, diffuse2Step, step(4.0, variant));\n    diffuse = mix(diffuse, diffuseGradient, step(5.0, variant));\n    diffuse = mix(diffuse, diffuse2StepGradient, step(6.0, variant));\n    diffuse = mix(diffuse, diffuse1StepHatch, step(7.0, variant));\n    diffuse = mix(diffuse, diffuseFlatgradSpec, step(8.0, variant));\n    \n    diffuse = mix(diffuse, 0.0, step(9.0, variant));\n    \n    vec3 final = mix(ambient, lightCol, diffuse);\n    \n    return final * color;\n}\n      \nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float clicked = step(1.0, iMouse.z);\n        \n    time = iTime;\n       \n\tvec3 viewDir = rayDirection(75.0, iResolution.xy, mod(fragCoord * 3.0, iResolution.xy));\n    \n    vec3 eye = vec3(sinf(time * 0.5) * 5.0, 2.0, cosf(time * 0.5) * 5.0);\n    mat4 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    vec3 worldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n    \n    vec2 coord = fragCoord / iResolution.xy;\n    \n    vec3 color = vec3(0.0);\n    vec3 objects = vec3(1.0, 0.82, 0.55);\n    \n    float dt = 0.0;\n    float da = 0.0;\n    \n    #ifdef QUOTE_TAA_UNQUOTE\n    \n    #define DDT 0.005\n    #define DS 4.0\n    \n    for (dt = -DS*0.5*DDT; dt < DS*0.5*DDT; dt += DDT)\n    {\n    da = dt / DDT;\n        \n    #endif\n    \n\ttime = iTime + dt;\n    \n    float scale = mix(3.0, 1.0, clicked);\n        \n    eye = vec3(sinf(time * 0.5) * 5.0, 2.0, cosf(time * 0.5) * 5.0);\n    viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    worldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n        \n    vec2 coords = fragCoord * scale;\n    \n    vec2 sampleOffset = vec2(cos(da), sin(da));\n\tviewDir = rayDirection(75.0, iResolution.xy, mod(coords + sampleOffset, iResolution.xy));\n\tworldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n    HitInfo hitInfo = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n        \n    vec3 c = texture(iChannel0, worldDir).rgb;\n        \n    if (hitInfo.dist < MAX_DIST)\n    {    \n        vec3 p = eye + hitInfo.dist * worldDir;\n        vec3 n = normal(p);\n\n        coords /= iResolution.xy;\n        \n        c = lighting(p, n, objects, coords, worldDir, clicked);\n    }\n        \n    else if (hitInfo.minDist < 0.01)\n    {\n        float v = dot(c, c);\n        c = objects * mix(1.0 - v, 1.0, 0.8);\n    }\n        \n    color += c;\n    \n    #ifdef QUOTE_TAA_UNQUOTE\n    }\n    \n    color /= DS;\n    \n    #endif\n        \n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}