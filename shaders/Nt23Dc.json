{
    "Shader": {
        "info": {
            "date": "1624885548",
            "description": "a simple way to get an unrealistic shading with 3 numbers input.\nsome results have a nice translucency feel :)",
            "flags": 0,
            "hasliked": 0,
            "id": "Nt23Dc",
            "likes": 19,
            "name": "shading with 1 random color",
            "published": 3,
            "tags": [
                "shadingpalette"
            ],
            "usePreview": 0,
            "username": "sympou",
            "viewed": 481
        },
        "renderpass": [
            {
                "code": "const float gridSize = 75.;\nconst float sphereSize = 0.92;\nconst float speed = 10.;\n\n//https://www.shadertoy.com/view/4djSRW\nvec3 hash32(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec3 lightDir = normalize(vec3(cos(iTime)*0.25,0.5,sin(iTime)*0.25));\n    \n    //slowly panning coordinates\n    vec2 uv = (fragCoord+iTime*vec2(2.,1.)*speed)/gridSize;\n\n    //a square that contains the sphere\n    vec2 uv2 = (fract(uv)*2.-1.)/sphereSize;\n    \n    // a method to get sphere normals in orthographic projection\n    // (if d >= 1. then we are not touching the sphere)  \n    float d = dot(uv2,uv2);\n    float z = (d>=1.) ? 0. : sqrt(1.-d);\n    vec3 normals = vec3(uv2,z);\n    \n    //phong reflection model\n    float specular = pow(max(2.*z*dot(lightDir,normals) -lightDir.z, 0.0),20.)*0.25;\n    float diffuse = 0.5 + dot(normals,lightDir)*0.5;\n    \n    //here is the palette\n    vec2 seed = floor(uv);\n    vec3 rnd = hash32(seed);\n    vec3 col = min(mix(0.1/(1.-rnd),rnd.zxy,diffuse),1.);\n    //vec3 col = mix(min(0.1/(1.-rnd),1.),rnd.zxy,diffuse);\n    //vec3 col = mix(rnd*rnd*rnd,rnd.zxy,diffuse).yzx;\n    \n    //antialiasing\n    col *= min(15.*z*z,1.);\n    \n    // Output to screen\n    fragColor = vec4(col+specular,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}