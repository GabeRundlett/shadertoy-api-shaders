{
    "Shader": {
        "info": {
            "date": "1575157662",
            "description": "3D graph - not perfect, a little complicated, but there is no other way to raymarch a graph... \n\nuses a buffer to build the distance field, then I march through it. Cellular automata sort the graph vertices. ",
            "flags": 32,
            "hasliked": 0,
            "id": "wsGXWc",
            "likes": 23,
            "name": "Graph 3D",
            "published": 3,
            "tags": [
                "graph"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 1014
        },
        "renderpass": [
            {
                "code": "void get (out vec3 a, out vec3 b, vec3 U) {\n    U.z = floor(U.z+0.5);\n\ta = A(U).xyz;\n    b = B(U).xyz;\n}\nmat2 M;\nfloat map (vec3 p, vec3 r) {\n    p.xz = (p.xz-0.5*R3D.xz)*M+0.5*R3D.xz;\n    vec3 a, b;\n    get(a,b,p+r);\n    float d = min(length(a-p),length(b-p))-.7;\n    d = min(ln(p,a,b).x-.5,d);\n\treturn min(d,1.3*N*N-p.z);\n}\nvec3 norm (vec3 p) {\n\t#define e vec2(1e-3,0)\n    return normalize(vec3(\n    \tmap(p+e.xyy,vec3(0))-map(p-e.xyy,vec3(0)),\n    \tmap(p+e.yxy,vec3(0))-map(p-e.yxy,vec3(0)),\n    \tmap(p+e.yyx,vec3(0))-map(p-e.yyx,vec3(0))\n    ));\n}\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    R = iResolution.xy;\n    M = ro(-.4+.5*sin(.4*iTime));\n    vec3 p = vec3(0.5*R/N,-2.*N*N),\n         d = normalize(vec3(2.*(U-0.5*R)/R.y,R.y/90.)),\n         li = vec3(1.*R.x+20.*cos(iTime),.3*R.y,-5.*N*N);\n    if (iMouse.z>0.) li.xy = iMouse.xy-.3*R;\n\n    for (int i = 0; i < 40; i++) {\n        float m = map(p,vec3(0));\n        p += d*m;\n    }\n    vec3 n = norm(p);\n    d = normalize(li-p);\n    p += d*1e-3;\n    for (int i = 0; i < 90; i++) {\n        float m = map(p,vec3(0));p += d*min(m,length(p-li)-1.);\n    }\n    Q.xyz = 0.5+0.5*n;\n    Q = vec4(dot(n,d))*(exp(-.01*length(p-li)));   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define N floor(R.y/45.)\nvec2 R;\n#define R3D vec3(R/N,N*N)\nvec2 d2 (vec3 U) {\n    U = clamp(U,vec3(1),vec3(R/N,N*N));\n\treturn U.xy+vec2(mod(U.z,N),floor(U.z/N))*R/N;\n}\nvec3 d3 (vec2 u) {\n    vec2 o = floor(u/R*N);\n\treturn vec3(mod(u,R/N),o.x+o.y*N);\n}\nmat2 ro(float a) {\n\tfloat c = cos(a), s = sin(a);\n    return mat2(c,-s,s,c);\n}\nvec2 ln (vec3 p, vec3 a, vec3 b) {\n    float i = clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.);\n\treturn vec2(length(p-a-(b-a)*i),i);\n}\nvec3 hash(vec3 p3) // Dave H\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n#define A(U) texelFetch(iChannel0,ivec2(d2(U)),0)\n#define B(U) texelFetch(iChannel1,ivec2(d2(U)),0)\n#define NP int(R.y/5.)\n#define MX .5*R.y/N\n#define I 300",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void get (out vec3 a, out vec3 b, vec3 U) {\n\ta = A(U).xyz;\n    b = B(U).xyz;\n}\nvoid X (inout vec3 a, inout vec3 b, vec3 U, vec3 r) {\n    vec3 na, nb;\n    get(na,nb,U+r);\n    if (ln(U,na,nb).x<ln(U,a,b).x) {a = na; b = nb;}\n    else if (ln(U,a,nb).x<ln(U,a,b).x) b = nb;\n    else if (ln(U,a,na).x<ln(U,a,b).x) b = na;\n    \n}\nvoid mainImage( out vec4 Q, in vec2 u )\n{\n    R = iResolution.xy;\n    vec3 U = d3(u);\n    vec3 a, b;\n    get(a,b,U);\n    \n    X (a,b,U,vec3(1,0,0));\n    X (a,b,U,vec3(-1,0,0));\n    X (a,b,U,vec3(0,1,0));\n    X (a,b,U,vec3(0,-1,0));\n    X (a,b,U,vec3(0,0,1));\n    X (a,b,U,vec3(0,0,-1));\n    X (a,b,U,vec3(1,1,0));\n    X (a,b,U,vec3(0,1,1));\n    X (a,b,U,vec3(1,0,1));\n    X (a,b,U,vec3(-1,-1,0));\n    X (a,b,U,vec3(0,1,1));\n    X (a,b,U,vec3(1,0,1));\n    if (a.x  < 1.) a = b;\n    Q.xyz = a;\n    if (iFrame%I < NP) {\n    \tvec3 n = R3D*(hash(float(iFrame)+iDate.yzw)*0.9+0.05);\n        if (length(U-n) < 1.5) Q.xyz = n;\n    }\n    if (iFrame%(I*2) < 1) {\n    \tQ.xyz = 0.6*R3D;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void get (out vec3 a, out vec3 b, vec3 U) {\n\ta = A(U).xyz;\n    b = B(U).xyz;\n}\nvoid X (inout vec3 a, inout vec3 b, vec3 U, vec3 r) {\n    vec3 na, nb;\n    get(na,nb,U+r);\n    if (ln(U,na,nb).x<ln(U,a,b).x) {a = na; b = nb;}\n    else if (ln(U,a,nb).x<ln(U,a,b).x) b = nb;\n    else if (ln(U,a,na).x<ln(U,a,b).x) b = na;\n    \n}\nvoid mainImage( out vec4 Q, in vec2 u )\n{\n    R = iResolution.xy;\n    vec3 U = d3(u);\n    vec3 a, b;\n    get(a,b,U);\n    \n    X (a,b,U,vec3(1,0,0));\n    X (a,b,U,vec3(-1,0,0));\n    X (a,b,U,vec3(0,1,0));\n    X (a,b,U,vec3(0,-1,0));\n    X (a,b,U,vec3(0,0,1));\n    X (a,b,U,vec3(0,0,-1));\n    if (b.x  < 1.) b = a;\n    if (length(a-b)>MX) b = a;\n    Q.xyz = b;\n    if (iFrame%I < NP) {\n    \tvec3 n = R3D*(hash(float(iFrame)+iDate.yzw)*0.9+0.05);\n        if (length(U-n) < 1.5) Q.xyz = n;\n    }\n    if (iFrame%(I*2) < 1) {\n    \tQ.xyz = 0.2*R3D;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void get (out vec3 a, out vec3 b, vec3 U) {\n\ta = A(U).xyz;\n    b = B(U).xyz;\n}\nvoid X (inout vec3 a, inout vec3 b, vec3 U, vec3 r) {\n    vec3 na, nb;\n    get(na,nb,U+r);\n    if (ln(U,na,nb).x<ln(U,a,b).x) {a = na; b = nb;}\n    else if (ln(U,a,nb).x<ln(U,a,b).x) b = nb;\n    else if (ln(U,a,na).x<ln(U,a,b).x) b = na;\n    \n}\nvoid mainImage( out vec4 Q, in vec2 u )\n{\n    R = iResolution.xy;\n    vec3 U = d3(u);\n    vec3 a, b;\n    get(a,b,U);\n    \n    X (a,b,U,vec3(1,0,0));\n    X (a,b,U,vec3(-1,0,0));\n    X (a,b,U,vec3(0,1,0));\n    X (a,b,U,vec3(0,-1,0));\n    X (a,b,U,vec3(0,0,1));\n    X (a,b,U,vec3(0,0,-1));\n    if (a.x  < 1.) a = b;\n    Q.xyz = a;\n    if (iFrame%I < NP) {\n    \tvec3 n = R3D*(hash(float(iFrame)+iDate.yzw)*0.9+0.05);\n        if (length(U-n) < 1.5) Q.xyz = n;\n    }\n    if (iFrame%(I*2) < 1) {\n    \tQ.xyz = 0.6*R3D;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void get (out vec3 a, out vec3 b, vec3 U) {\n\ta = A(U).xyz;\n    b = B(U).xyz;\n}\nvoid X (inout vec3 a, inout vec3 b, vec3 U, vec3 r) {\n    vec3 na, nb;\n    get(na,nb,U+r);\n    if (ln(U,na,nb).x<ln(U,a,b).x) {a = na; b = nb;}\n    else if (ln(U,a,nb).x<ln(U,a,b).x) b = nb;\n    else if (ln(U,a,na).x<ln(U,a,b).x) b = na;\n    \n}\nvoid mainImage( out vec4 Q, in vec2 u )\n{\n    R = iResolution.xy;\n    vec3 U = d3(u);\n    vec3 a, b;\n    get(a,b,U);\n    \n    X (a,b,U,vec3(1,0,0));\n    X (a,b,U,vec3(-1,0,0));\n    X (a,b,U,vec3(0,1,0));\n    X (a,b,U,vec3(0,-1,0));\n    X (a,b,U,vec3(0,0,1));\n    X (a,b,U,vec3(0,0,-1));\n    if (b.x  < 1.) b = a;\n    if (length(a-b)>MX) b = a;\n    Q.xyz = b;\n    if (iFrame%I < NP) {\n    \tvec3 n = R3D*(hash(float(iFrame)+iDate.yzw)*0.9+0.05);\n        if (length(U-n) < 1.5) Q.xyz = n;\n    }\n    if (iFrame%(I*2) < 1) {\n    \tQ.xyz = 0.2*R3D;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}