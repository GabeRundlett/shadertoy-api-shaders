{
    "Shader": {
        "info": {
            "date": "1456059591",
            "description": "Gray-Scott reaction-diffusion test. Draw something with your mouse. If growing black squares appear, try setting a lower speed in code for Buffer A and resetting the shader.",
            "flags": 32,
            "hasliked": 0,
            "id": "XdG3WG",
            "likes": 2,
            "name": "Gray-Scott",
            "published": 3,
            "tags": [
                "2d",
                "diffusion",
                "reactiondiffusion",
                "reaction",
                "grayscott"
            ],
            "usePreview": 0,
            "username": "piotrekli",
            "viewed": 1434
        },
        "renderpass": [
            {
                "code": "float sampleLightY(sampler2D channel, vec2 fragCoord)\n{\n    float light = 0.0;\n#   define S(DX, DY, WEIGHT) light += texture(channel, (fragCoord+vec2(DX, DY))/iResolution.xy).y*WEIGHT;\n    S( 0,  1, -0.2)\n    S( 0, -1,  0.2)\n    S( 1,  0,  0.2)\n    S(-1,  0, -0.2)\n#   undef S\n    return light;\n}\n\nvec3 hsv2rgb(vec3 hsv)\n{\n    vec3 rgb;\n    float h = mod(hsv.x * 6.0, 6.0);\n    float q = h-float(int(h));\n    if      (h < 1.0) rgb = vec3( 1.0,    q,  0.0);\n    else if (h < 2.0) rgb = vec3(1.-q,  1.0,  0.0);\n    else if (h < 3.0) rgb = vec3( 0.0,  1.0,    q);\n    else if (h < 4.0) rgb = vec3( 0.0, 1.-q,  1.0);\n    else if (h < 5.0) rgb = vec3(   q,  0.0,  1.0);\n    else if (h < 6.0) rgb = vec3( 1.0,  0.0, 1.-q);\n    rgb = hsv.z*(1.0-hsv.y*(1.0-rgb));\n    return rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float uValue = texture(iChannel0, uv).x;\n    float light = sampleLightY(iChannel0, fragCoord)*8.0;\n\tfragColor = vec4(hsv2rgb(vec3(1.0-uValue*0.8-0.16,\n                                  light > 0.0 ? 1.-light : 1.,\n                                  light > 0.0 ? 1. : 1.+light)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define DV 0.5 /* scale */\n#define F 0.022 /* feed parameter, see http://mrob.com/pub/comp/xmorphia/ */\n#define K 0.053 /* kill parameter, see http://mrob.com/pub/comp/xmorphia/ */\n#define SPEED 0.5 /* timestep */\n\nvec2 random(vec2 uv)\n{\n    return texture(iChannel3, uv).xy;\n}\n\n// function from http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\nfloat segmentDistance(vec2 v, vec2 w, vec2 p)\n{\n    float l2 = dot(w-v, w-v);\n    if (l2 == 0.0) return distance(p, v);\n    float t = max(0.0, min(1.0, dot(p-v, w-v)/l2));\n    vec2 projection = v + t*(w-v);\n    return distance(p, projection);\n}\n\nvec2 cr(vec2 xy)\n{\n  \tif (xy.x < 0.0) xy.x += iResolution.x;\n    if (xy.x >= iResolution.x) xy.x -= iResolution.x;\n    if (xy.y < 0.0) xy.y += iResolution.y;\n    if (xy.y >= iResolution.y) xy.y -= iResolution.y;\n    return xy;\n}\n\n#define S(DX, DY, WEIGHT) laplacian += texture(channel, cr(fragCoord+vec2(DX, DY))/iResolution.xy).xy*WEIGHT;\nvec2 laplacian(sampler2D channel, vec2 fragCoord)\n{\n    vec2 laplacian = vec2(0);\n    S( 0,  0, -1.0)\n    S( 0,  1,  0.2)\n    S( 0, -1,  0.2)\n    S( 1,  0,  0.2)\n    S(-1,  0,  0.2)\n    S( 1,  1,  0.05)\n    S( 1, -1,  0.05)\n    S(-1,  1,  0.05)\n    S(-1, -1,  0.05)\n    return laplacian;\n}\n#undef S\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 prevColor = texture(iChannel0, uv);\n    float u = prevColor.x;\n    float v = prevColor.y;\n    if (iFrame == 1)\n    {\n        vec2 rand = random(uv);\n        u = rand.x;\n        v = rand.y;\n    }\n    else\n    {\n        float rate = u * v * v;\n        vec2 diffusion = laplacian(iChannel0, fragCoord);\n        float deltaU = diffusion.x*DV*2. - rate + F*(1.0-u);\n        float deltaV = diffusion.y*DV*1. + rate - v*(F+K);\n        float g = // mouse\n            0.9 - segmentDistance(texture(iChannel1, vec2(0.0)).xy,\n                                  texture(iChannel1, vec2(1.0)).xy, fragCoord)*0.1;\n        if (g > v) v = g;\n        float dt = SPEED;\n        u += deltaU * dt;\n        v += deltaV * dt;\n    }\n    fragColor = vec4(u, v, 0.0, 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // mouse handling\n    if (iFrame == 0 || fragCoord.x < 1.0) fragColor = iMouse;\n    else fragColor = texture(iChannel0, vec2(0.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}