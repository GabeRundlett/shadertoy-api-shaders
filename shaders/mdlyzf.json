{
    "Shader": {
        "info": {
            "date": "1687080011",
            "description": "Graphic Design Experiment 8",
            "flags": 0,
            "hasliked": 0,
            "id": "mdlyzf",
            "likes": 23,
            "name": "Graphic Design Experiment 8",
            "published": 3,
            "tags": [
                "graphicdesign",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 1490
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define deg45 .707\n#define R45(p) (( p + vec2(p.y,-p.x) ) *deg45)\n#define Tri(p,s) max(R45(p).x,max(R45(p).y,B(p,s)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define SPEED 200.\n#define ZERO (min(iFrame,0))\n\nfloat SimpleVesicaDistanceX(vec2 p, float r, float d) {\n    p.y = abs(p.y);\n    p.y+=d;\n    return length(p)-r;\n}\n\nfloat drawEye(vec2 p){\n    vec2 prevP = p;\n    float d = 0.;\n    \n    float thickness = 0.003;\n    \n    d = abs(length(p)-0.04)-thickness;\n    \n    p*=Rot(radians(iTime*10.));\n    p = DF(p,4.);\n    p-=0.09;\n    p*=Rot(deg45);\n    p.x*=2.0;\n    float d2 = Tri(p,vec2(0.03));\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=Rot(radians(iTime*-15.));    \n    p = DF(p,7.);\n    p-=0.13;\n    p*=Rot(deg45);\n    p.x*=2.0;\n    d2 = Tri(p,vec2(0.03));\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=Rot(radians(iTime*-10.));        \n    p = DF(p,8.);\n    p-=0.155;\n    p*=Rot(deg45);\n    p.x*=2.0;\n    d2 = Tri(p,vec2(0.03));\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=Rot(radians(iTime*-17.));            \n    p = DF(p,10.);\n    p-=0.18;\n    p*=Rot(deg45);\n    p.x*=2.0;\n    d2 = Tri(p,vec2(0.03));\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=Rot(radians(iTime*17.));            \n    p = DF(p,16.);\n    p-=0.2;\n    p*=Rot(deg45);\n    p.x*=2.0;\n    p.y*=-1.;\n    d2 = Tri(p,vec2(0.02));\n    d = min(d,d2);\n    \n    p = prevP;\n    \n    float s = mod(iTime*0.5,2.3);\n    if(s<1.){\n        p.y*=1.+s;\n    } else if(s>=1. && s<2.){\n        p.y*=1.+2.-s;\n    }\n    d2 = abs(SimpleVesicaDistanceX(p,0.5,0.2))-thickness;\n    float d3 = SimpleVesicaDistanceX(p,0.5,0.2);\n    d = max(d3,d);    \n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat drawHalfMoon(vec2 p){\n    vec2 prevP = p;\n    float d = length(p)-0.05;\n    p.y*=1.2;\n    float d2 = length(p-vec2(-0.025,0.0))-0.05;\n    d = max(-d2,d);\n    return d;\n}\n\nfloat drawSmallEye(vec2 p){\n    p*=1.2;\n    vec2 prevP = p;\n    float thickness = 0.007;\n    float d = abs(length(p)-0.07)-thickness;\n    \n    p*=Rot(radians(30.));\n    p*=1.3;\n    float d2 = drawHalfMoon(p);\n    d = min(d,d2);\n    \n    p = prevP;\n    float s = mod(-iTime*0.3,2.3);\n    if(s<1.){\n        p.y*=1.+s;\n    } else if(s>=1. && s<2.){\n        p.y*=1.+2.-s;\n    }\n    d2 = abs(SimpleVesicaDistanceX(p,0.15,0.05))-thickness;\n    float d3 = SimpleVesicaDistanceX(p,0.15,0.05);\n    d = max(d3,d);    \n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat arrowItem(vec2 p){\n    p*=vec2(2.3,2.);\n    vec2 prevP = p;\n    p.y-=0.1;\n    p.y*=0.6;\n    float d = Tri(p,vec2(0.06));\n    p.y+=0.04;\n    float d2 = Tri(p,vec2(0.06));\n    d = max(-d2,d);\n    \n    p = prevP;\n    p.y+=0.07;\n    p.y*= -1.0;\n    d2 = Tri(p,vec2(0.06));\n\n    p.y+=0.04;\n    d2 = max(-Tri(p,vec2(0.06)),d2);\n    \n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat circleItem(vec2 p){\n    p*=1.3;\n    vec2 prevP = p;\n    p*=Rot(radians(-iTime*15.));\n    p = DF(p,6.);\n    p-=0.15;\n    p*=Rot(deg45);\n    float d = arrowItem(p);\n    \n    p = prevP;\n    p*=Rot(radians(-iTime*15.));\n    p = DF(p,2.);\n    p-=0.05;\n    p*=Rot(radians(30.));\n    float d2 = Tri(p,vec2(0.02));\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=Rot(radians(iTime*12.));\n    p = DF(p,3.);\n    p-=0.095;\n    p*=Rot(deg45);\n    p.y*=-1.;\n    p*=1.2;\n    d2 = arrowItem(p);\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat drawGraphics(vec2 p){\n    vec2 prevP = p;\n    float d = drawEye(p);\n    p.x = abs(p.x)-0.5;\n    float d2 = drawHalfMoon(p);\n    p = prevP;\n    d = min(d,d2);\n    \n    p.x = abs(p.x)-0.57;\n    p.y = abs(p.y)-0.27;\n    d2 = circleItem(p);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.x = abs(p.x)-0.25;\n    p.y = abs(p.y)-0.36;\n    p*=Rot(radians(-15.));\n    d2 = drawSmallEye(p);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.y = abs(p.y)-0.38;\n    p*=0.7;\n    d2 = arrowItem(p);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.x = abs(p.x)-0.65;\n    p*=Rot(radians(90.));\n    p*=0.7;\n    d2 = arrowItem(p);\n    d = min(d,d2);    \n    \n    return d;\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    float d = drawGraphics(p.xy);\n    d = max(abs(p.z)-0.005,d);\n    return vec2(d*0.6,0);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<4; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,10,-10));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float shadow = step(RayMarch(p+n*0.3,lightDir,1.0, 15).x,0.9);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*shadow*occ;\n    diffCol += col*vec3(1.0,1.0,1.0)*skyDiff*occ;\n    diffCol += col*vec3(0.8)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.)*occ; // spec\n        \n    return diffCol;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    col = diffuseMaterial(n,rd,p,vec3(1.2));\n    return col;\n}\n\nvec3 ACESFilmic(vec3 x, float a, float b, float c, float d, float e){\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    \n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0, -1.05);\n    if(iMouse.z>0.){\n        ro.yz *= Rot(m.y*3.14+1.);\n        ro.y = max(-0.9,ro.y);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        ro.yz *= Rot(radians(-5.0));\n        //ro.xz *= Rot(radians(sin(iTime*0.3)*60.0));\n    }\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    }\n    \n    col = ACESFilmic(col,3.,0.03,2.43,0.59,0.14);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}