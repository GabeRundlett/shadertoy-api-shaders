{
    "Shader": {
        "info": {
            "date": "1642519807",
            "description": "\"Realtime\" gi",
            "flags": 40,
            "hasliked": 0,
            "id": "sdfcRs",
            "likes": 7,
            "name": "Crystal Planet",
            "published": 3,
            "tags": [
                "gi"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 482
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, in vec2 U ) {\n  O=texture(iChannel0,U/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define rez iResolution\n#define TAU 6.283\n#define maxDepth 30.0\n//trying to mimick a packet of photons\nconst float fov = 2.5,blurAmount = 0.007;\nconst int RaySteps=64, maxBounces=6;\nconst float FudgeFactor=0.9;\nconst vec3 ior=vec3(1.0,1.52,1.0/1.52);//water=1.33,glass=1.52,diamond=2.42\n\n//struct material {vec3 color;float refrRefl,difExp,spec,specExp;};\n\nvec4 orbitTrap;  \nfloat DE(vec3 z0){\n  vec4 z = vec4(z0,1.1);\n  for (int n = 0; n < 5; n++) {\n    z.xyz=clamp(z.xyz, -1.0, 1.0) *2.0-z.xyz;\n    z*=-2./clamp(dot(z.xyz,z.xyz),1.,4.);\n    z.y+=2.05; \n  }\n  orbitTrap=z;z=abs(z);\n  return (max(z.x,max(z.y,z.z))-2.667)/z.w;\n}\n\nvec3 getBackground( in vec3 rd ){\n vec3 sunDir=normalize(vec3(0.3,0.9,-0.5)), sunColor=vec3(1.0,0.9,0.6);\n vec3 lit=vec3(0);\n for(float i=0.;i<5.;i++){\n   vec2 p=vec2(sin(i+iTime),sin(i+1.+iTime));\n   float d=length(p-rd.xz);\n   lit+=100.*vec3(p,sin(i+2.))*exp(-d*20.);\n }\n return lit+sunColor*.4+rd*0.25+sunColor*(max(0.0,dot(rd,sunDir))+30.*pow(abs(dot(rd,sunDir)),40.0));\n}\n\n//random seed and generator\nvec2 randv2;\nvec2 rand2(){// implementation derived from one found at: lumina.sourceforge.net/Tutorials/Noise.html\n randv2+=vec2(1.0,1.0);\n return vec2(fract(sin(dot(randv2.xy ,vec2(12.9898,78.233))) * 4375.5453),\n  fract(cos(dot(randv2.xy ,vec2(4.898,7.23))) * 2342.631));\n}\n\nvec3 scene(vec3 ro, vec3 rd) \n{// find color and depth of scene\n vec3 fcol=vec3(1.0);//color frequency mask\n vec2 rnd=rand2();//a couple random numbers\n float HitDistance=1.0/rez.x;\n float d,t=rnd.x*HitDistance*10.0,side=sign(DE(ro+t*rd));//dist to obj, total ray len, len to first obj, -inside or +outside of obj\n int i,iHitCount=0;\n for(i=0; i<RaySteps && t<maxDepth; i++ ){// march loop\n  t+=d=DE(ro+t*rd)*side*FudgeFactor;//march\n  if(abs(d)<HitDistance*t){//hit\n   t+=d=DE(ro+t*rd)*side;//move close to the hit point without fudging\n   ro+=rd*t;// advance ray position to hit point\n   vec2 ve=vec2(HitDistance*0.1,0.0);\n   vec3 nor = side*normalize(vec3(-DE(ro-ve.xyy)+DE(ro+ve.xyy),\n    -DE(ro-ve.yxy)+DE(ro+ve.yxy),\n    -DE(ro-ve.yyx)+DE(ro+ve.yyx)));// get the surface normal\n   if(nor!=nor)nor=-rd;//is this !isNum(nor) which only happens when nor~/=-rd!!\n   rnd=rand2();//a couple more random numbers\n   vec3 refl=reflect(rd,nor),newRay=refl;//setting up for a new ray direction and defaulting to a reflection\n   vec3 refr=refract(rd,nor,(side>=0.0)?ior.z:ior.y);//calc the probabilty of reflecting instead\n   vec2 ca=vec2(dot(nor,rd),dot(nor,refr)),n=(side>=0.0)?ior.xy:ior.yx,nn=vec2(n.x,-n.y);\n   if(rnd.y+rnd.x>pow(dot(nn,ca)/dot(n,ca),2.0)+pow(dot(nn,ca.yx)/dot(n,ca.yx),2.0)){newRay=refr;nor=-nor;}\n   rd=newRay;//powDir(nor,newRay,m.difExp);//redirect the ray\n   vec3 col=abs(sin(3.*orbitTrap.rgb/orbitTrap.w))*.5+.5;\n   fcol*=col;\n   t=max(d*side*5.0,HitDistance);//hopefully pushs thru the surface\n   if(iHitCount++>maxBounces || dot(fcol,fcol)<0.01)break;\n   side=sign(DE(ro+t*rd));//keep track of which side you are on\n  }\n }\n return clamp(fcol*getBackground(rd),0.0,1.0);//light the scene\n} \nmat3 lookat(vec3 fw){\n  fw=normalize(fw);vec3 rt=normalize(cross(fw,vec3(0.0,1.0,0.0)));return mat3(rt,cross(rt,fw),fw); \n}\nvoid Setup(float t, out vec3 eye, out vec3 tgt){\n  t*=.5;t+=sin(t);t*=.1;\n  eye=vec3(sin(t),0.,cos(t))*(1.+t*.5);eye.y=2.2;\n  tgt=eye+normalize(vec3(eye.x,-1.5,eye.y))*.25;\n}\nvoid mainImage(out vec4 O, in vec2 U) {\n randv2=fract(cos(U.xy+U.yx*vec2(113.0,107.0)+vec2(iTime+float(iFrame)*0.1))*4231.8413);\n vec3 eye,tgt;\n if(iFrame<2)O=vec4(0);else O=texture(iChannel0,U/rez.xy)*0.9;\n Setup(iTime,eye,tgt);tgt-=eye;\n float focusDistance=length(tgt);\n mat3 looky=lookat(tgt);\n vec2 pxl=(-rez.xy+2.0*(U.xy+rand2()))/rez.y;\n vec3 er = normalize( vec3( pxl.xy, fov ) );\n vec3 go = blurAmount*focusDistance*vec3( -1.0 + 2.0*rand2(), 0.0 );\n vec3 gd = normalize( er*focusDistance - go );gd.z=0.0;\n O+=vec4(scene(eye+looky*go,looky*normalize(er+gd)),1.0)*0.1;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define bps 8.0 \nfloat rnd(float t){return fract(sin(mod(t,32.123)*32.123)*41.123);} \nvec2 nofs(float n){//the song's \"random\" ring \n  float r=0.5+0.5*rnd(floor(n));//random volume as well \n  n=mod(n,8.0); \n  if(n<1.0)n= 6.0; \n  else if(n<2.0)n= 5.0; \n  else if(n<3.0)n= -5.0; \n  else if(n<4.0)n= -6.0; \n  else if(n<5.0)n= 6.0; \n  else if(n<6.0)n= 5.0; \n  else if(n<7.0)n= 6.0; \n  else n=0.0;\n  return vec2(n,r); \n}\n\nfloat scale(float note){//throws out dissonant tones \n float n2=mod(note,12.); \n  if((n2==2.)||(n2==4.)||(n2==6.)||(n2==9.)||(n2==10.))note=-100.;//neapolitan minor \n return note; \n} \n// note number to frequency  from https://www.shadertoy.com/view/ldfSW2 \nfloat ntof(float n){return (n>0.0)?440.0 * pow(2.0, (n - 67.0) / 12.0):0.0;} \nconst float PI=3.14159; \nfloat Cos(float a){return cos(mod(a,PI*2.));} \nfloat Sin(float a){return Cos(a+PI/2.);} \nstruct instr{float att,fo,vibe,vphas,phas,dtun;}; \nvec2 I(float n,float t,float bt,instr i){//note,time,bt 0-8,instrument \n float f=ntof(scale(n));if(f<12.)return vec2(0.0);f-=bt*i.dtun;f*=t*PI*2.; \n f=exp(-bt*i.fo)*(1.0-exp(-bt*i.att))*Sin(f+Cos(bt*i.vibe*PI/8.+i.vphas*PI/2.)*Sin(f*i.phas))*(1.0-bt*0.125); \n n+=t;return vec2(f*Sin(n),f*Cos(n));\n} \nvec2 mainSound(int samp, float time){//att,fo,vibe,vphs,phs,dtun\n instr epiano=instr(50.0,0.1,2.5,0.1,1.501,0.001);//silly fm synth instruments \n float tim=time*bps,b0,b1,b2,t0,t1,t2; \n vec2 a=vec2(0.0);//accumulator \n for(float i=0.;i<8.;i+=1.){//go back 8 beats and add note tails \n   b0=floor(tim);b1=floor(tim*0.5);b2=floor(tim*0.25); \n   vec2 n2=nofs(b2*0.125)+nofs(b2*0.25)+nofs(b2*0.5)+nofs(b2);//build notes on top of notes like fbm \n   vec2 n1=n2+nofs(b1),n0=n1+nofs(b0); \n   t0=fract(tim)+i; \n   a+=I(n0.x+84.0,time,t0,epiano)*n0.y*.5;\n   //if(mod(i,1.)<1.)a+=I(n0.x+93.0,time+Sin(t0*272.0),t0,stick)*n0.y;  \n   if(mod(i,2.)<1.){//notes that play every 2 beats \n     t1=fract(tim*0.5)*2.0+i;\n     //a+=I(n1.x+67.0,time,t1,epiano)*n1.y;\n     a+=I(n1.x+75.0,time,t1,epiano)*n1.y; \n     a+=I(n1.x+72.0,time,t1,epiano)*n1.y; \n     //a+=I(n1.x+36.0,time,t1,pluckbass)*n1.y*4.0;\n     if(mod(i,4.)<1.){//every 4 \n       t2=fract(tim*0.25)*4.0+i;\n       a+=I(n2.x+60.0,time,t2,epiano)*n2.y; \n       //a+=I(n2.x+32.0,t2/bps+0.008*sin(t2*5.0),t2,bassdrum)*12.0;\n       //a+=I(n2.x+31.0,t2/bps+0.008*sin(t2*6.0),t2,bassdrum)*12.0;\n     } \n   } \n   tim-=1.;//go back in time to find old notes still decaying \n } \n return clamp(a/64.0,-1.,1.); \n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}