{
    "Shader": {
        "info": {
            "date": "1519833396",
            "description": "Animated version \"Twisted Ladder\" (mouseable)\niapafoto got me thinking about animation, but this differs from his suggestion",
            "flags": 0,
            "hasliked": 0,
            "id": "Xsdczl",
            "likes": 16,
            "name": "Twisted Ladder 2",
            "published": 3,
            "tags": [
                "mobius",
                "animation",
                "symmetry",
                "trefoil"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 3368
        },
        "renderpass": [
            {
                "code": "// \"Twisted Ladder 2\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nvec2 Rot2D (vec2 q, float a);\n\nvec3 qHit;\nfloat tCur, dstFar;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, a, r, ns, aa;\n  r = 3.5;\n  ns = 32.;\n  dMin = dstFar;\n  aa = 2. * pi * mod (0.05 * tCur, 1.);\n  q = p;\n  a = atan (q.z, q.x);\n  q.xz = vec2 (length (q.xz) - r, q.y);\n  q.xz = Rot2D (q.xz, 1.5 * a);\n  q.xz = Rot2D (q.xz, - pi * (floor (atan (q.z, q.x) / pi + 0.5)));\n  q.x -= 1.;\n  q.y = a - aa;\n  d = length (PrBox2Df (q.xz, vec2 (0.3))) - 0.05;\n  DMINQ (1);\n  q = p;\n  q.xz = Rot2D (q.xz, aa);\n  a = atan (q.z, - q.x) / (2. * pi);\n  a = 2. * pi * (floor (ns * a) + 0.5) / ns;\n  q.xz = Rot2D (q.xz, a);\n  q.x += r;\n  q.xy = Rot2D (q.xy, 1.5 * (a + aa));\n  d = PrRoundCylDf (q.xzy, 0.2, 0.02, 1.45);\n  DMINQ (2);\n  return 0.4 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0002 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 BgCol (vec3 rd)\n{\n  return vec3 (0.6, 1., 0.6) * (0.05 + 0.245 * (rd.y + 1.) * (rd.y + 1.));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstObj;\n  col = BgCol (rd);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (dot (rd, vn) < -0.001) col = BgCol (reflect (rd, vn));\n    if (idObj == 1) {\n      col *= vec3 (1., 1., 0.9) * (0.95 + 0.05 * cos (8. * pi * qHit.z)) *\n         mix (1., 0.9 + 0.1 * cos (32. * qHit.y), step (abs (qHit.x), 0.29));\n    }\n    else if (idObj == 2) col *= vec3 (1., 0.9, 0.9) * mix (1., 0.95 +\n       0.05 * cos (16. * atan (qHit.z, - qHit.x)), step (abs (qHit.y), 1.44));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvs, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uvs = uv;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.5 * pi;\n  el = -0.3 * pi;\n  if (mPtr.z > 0.) {\n    az += 3. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.03 * pi * tCur;\n    el -= 0.3 * pi * sin (0.025 * pi * tCur);\n  }\n  el = clamp (el, -0.5 * pi, 0.5 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -20.);\n  zmFac = 4.8 - abs (el);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  dstFar = 40.;\n  col = ShowScene (ro, rd);\n  uvs *= uvs * uvs;\n  col *= mix (0.8, 1., pow (1. - 0.5 * length (uvs * uvs), 4.));\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  return min (min (max (dxy + rt, dz), max (dxy, dz + rt)), length (vec2 (dxy, dz) + rt) - rt);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}