{
    "Shader": {
        "info": {
            "date": "1474066192",
            "description": "Authentic nostalgic VGA palette in a shader.\nUse + / - to cycle colors.",
            "flags": 24,
            "hasliked": 0,
            "id": "4lG3Wz",
            "likes": 11,
            "name": "VGA Mandelbrot",
            "published": 3,
            "tags": [
                "mandelbrot",
                "palette",
                "vga"
            ],
            "usePreview": 0,
            "username": "P_Malin",
            "viewed": 1279
        },
        "renderpass": [
            {
                "code": "\n// See Common Tab for VGA Palette Code\n\n///////////////////////////\n// Keyboard\n///////////////////////////\n\nconst float KEY_SPACE = 32.5/256.0;\nconst float KEY_LEFT  = 37.5/256.0;\nconst float KEY_UP    = 38.5/256.0;\nconst float KEY_RIGHT = 39.5/256.0;\nconst float KEY_DOWN  = 40.5/256.0;\n\nconst float KEY_PLUS \t= 187.5/256.0;\nconst float KEY_MINUS  \t= 189.5/256.0;\n\nbool Key_IsPressed(float key)\n{\n    return texture( iChannel0, vec2(key, 0.0) ).x > 0.0;\n}\n\nbool Key_IsToggled(float key)\n{\n    return texture( iChannel0, vec2(key, 1.0) ).x > 0.0;\n}\n\n///////////////////////////\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 vUV = fragCoord.xy / iResolution.xy;\n    \n    vec2 vFakeResolution = vec2(640,480);\n    vUV = floor(vUV * vFakeResolution) / vFakeResolution;\n    \n    vec2 vFocus = vec2(-0.5, 0.0);\n    vec2 vScale = vec2(2.0);\n    \n    if ( iMouse.z > 0.0 )\n    {\n    \tvFocus += 2.0 * ((iMouse.xy / iResolution.xy) * 2.0 - 1.0);\n    \tvScale *= 0.02;\n    }\n    \n    vScale.y /= iResolution.x / iResolution.y;\n    \n    vec2 z = vec2(0);\n    vec2 c = vFocus + (vUV * 2.0 - 1.0) * vScale;\n    \n    bool bInside = true;\n    \n    int iter=0;\n    for(iter = 0; iter < 512; iter++)\n    {        \n \t\tz = mat2(z,-z.y,z.x) * z + c;\n     \n        if ( dot(z,z) > 4.0 )            \n        {\n            bInside = false;\n            break;\n        }       \n    }\n    \n    float fIter = float(iter);\n    \n    float fIndex = 0.0;\n    if ( bInside ) \n    {\n        //fIndex = 0.0; // black set\n        fIndex = 1.0; // blue set\n    }\n    else\n    {\n \n        if ( Key_IsToggled( KEY_PLUS ) || Key_IsToggled( KEY_RIGHT ) )\n        {\n        \tfIter += iTime * 10.0;\n        }\n        else\n        if ( Key_IsToggled( KEY_MINUS ) || Key_IsToggled( KEY_LEFT ) )\n        {\n        \tfIter -= iTime * 10.0;\n        }\n        \n    \tfIndex = 1.0 + mod( fIter, 255.0 );\n    }\n    \n\tfragColor.rgb = VGAPaletteEntry( fIndex ) / 63.0;\n    fragColor.a = 1.0;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound( in int samp, float time )\n{\n    if(time < 1.0)\n    \treturn vec2(0.0);\n    \n    float pitch = 440.0;\n    if(time > 1.4)\n    \treturn vec2(0.0);\n    else if(time > 1.28)\n    \tpitch *= 14.0 / 12.0;\n    else if(time > 1.14)\n    \tpitch *= 13.0 / 12.0;\n    \n    return vec2( sign(sin( 6.2831*pitch*time ) ) ) * 0.25;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 38
                    }
                ],
                "type": "sound"
            },
            {
                "code": "float VGARainbowChannel( float i, float a, float b, float c, float d, float e )\n{    \n    if ( i >= 8.0 ) i = 16.0 - i;\n    if ( i <= 0.0 ) return a;\n    if ( i == 1.0 ) return b;\n    if ( i == 2.0 ) return c;\n    if ( i == 3.0 ) return d;\n    if ( i >= 4.0 ) return e;\n    return a;\n}\n\nvec3 VGARainbow( float i, float a, float e )\n{\n    vec3 vi = mod( vec3( i ) + vec3(0,16,8), vec3(24) );\n\n    float b = floor(a * 3./4. + e * 1.0 / 4.0 + 0.25);\n    float c = floor(a * 2./4. + e * 2.0 / 4.0 + 0.25);\n    float d = floor(a * 1./4. + e * 3.0 / 4.0 + 0.25);\n    \n    vec3 col;\n    col.r = VGARainbowChannel( vi.r, a, b, c, d, e );\n    col.g = VGARainbowChannel( vi.g, a, b, c, d, e );\n    col.b = VGARainbowChannel( vi.b, a, b, c, d, e );\n\n    return col;\n}\n\nvec3 VGAPaletteEntry( float i )\n{\n    i = floor( i );\n    \n    // EGA\n    if ( i < 16.0 )\n    {\n        vec3 col;\n        col.b  = floor( mod( i / 1.0, 2.0  )) * 2.0;\n        col.g  = floor( mod( i / 2.0, 2.0  )) * 2.0;\n        col.r  = floor( mod( i / 4.0, 2.0  )) * 2.0;        \n        \n        col += floor( mod( i / 8.0, 2.0  ) );\n        \n        if ( i == 6.0 ) col = vec3(2,1,0); // Special brown!\n\n        return col * 21.;\n    }\n\n    // Greys\n    if ( i == 16.0 ) return vec3(0.0);\n    \n    if ( i < 32.0 )\n    {        \n        float x = (i - 17.0);        \n        return vec3( floor( .00084 * x * x * x * x - .01662 * x * x * x + .1859 * x * x + 2.453 * x + 5.6038 ) );\n    }\n    \n    // Rainbows\n    float rainbowIndex = mod( i - 32.0, 24.0 );\n    float rainbowType = floor( (i - 32.0) / 24.0 );\n    \n    float rainbowTypeMod = floor( mod( rainbowType, 3.0 ) );\n    float rainbowTypeDiv = floor( rainbowType / 3.0 );\n    \n    float rainbowLow = 0.;\n    if ( rainbowTypeMod == 1.0 ) rainbowLow = 31.0;\n    if ( rainbowTypeMod == 2.0 ) rainbowLow = 45.0;\n    \n    float rainbowHigh = 63.;\n    if ( rainbowTypeDiv == 1.0 )\n    {\n        rainbowHigh = 28.0;\n        rainbowLow = floor( rainbowLow / 2.2 );\n    }\n    if ( rainbowTypeDiv == 2.0 )\n    {\n        rainbowHigh = 16.0;\n        rainbowLow = floor( rainbowLow / 3.8 );\n    }\n    \n    if ( rainbowType < 9.0 )\n    {\n\t    return VGARainbow( rainbowIndex, rainbowLow, rainbowHigh );\n    }\n    \n    return vec3( 0.0 );\n}\n\n\n/*\nvec3 VGAPaletteEntry( float i )\n{\n    float testIndex = 0.0;\n    \n    i = floor( i );\n    \n    #define PALETTE_ENTRY(R,G,B) if(i==testIndex) return vec3(R,G,B); testIndex++\n\n    // EGA bit\n    PALETTE_ENTRY(0, 0, 0);\n    PALETTE_ENTRY(0, 0, 42);\n    PALETTE_ENTRY(0, 42, 0);\n    PALETTE_ENTRY(0, 42, 42);\n    PALETTE_ENTRY(42, 0, 0);\n    PALETTE_ENTRY(42, 0, 42);\n    PALETTE_ENTRY(42, 21, 0);\n    PALETTE_ENTRY(42, 42, 42);\n    PALETTE_ENTRY(21, 21, 21);\n    PALETTE_ENTRY(21, 21, 63);\n    PALETTE_ENTRY(21, 63, 21);\n    PALETTE_ENTRY(21, 63, 63);\n    PALETTE_ENTRY(63, 21, 21);\n    PALETTE_ENTRY(63, 21, 63);\n    PALETTE_ENTRY(63, 63, 21);\n    PALETTE_ENTRY(63, 63, 63);\n    \n    // Greyscale\n    PALETTE_ENTRY(0, 0, 0);\n    PALETTE_ENTRY(5, 5, 5);\n    PALETTE_ENTRY(8, 8, 8);\n    PALETTE_ENTRY(11, 11, 11);\n    PALETTE_ENTRY(14, 14, 14);\n    PALETTE_ENTRY(17, 17, 17);\n    PALETTE_ENTRY(20, 20, 20);\n    PALETTE_ENTRY(24, 24, 24);\n    PALETTE_ENTRY(28, 28, 28);\n    PALETTE_ENTRY(32, 32, 32);\n    PALETTE_ENTRY(36, 36, 36);\n    PALETTE_ENTRY(40, 40, 40);\n    PALETTE_ENTRY(45, 45, 45);\n    PALETTE_ENTRY(50, 50, 50);\n    PALETTE_ENTRY(56, 56, 56);\n    PALETTE_ENTRY(63, 63, 63);\n    \n    // Rainbows\n    PALETTE_ENTRY(0, 0, 63);\n    PALETTE_ENTRY(16, 0, 63);\n    PALETTE_ENTRY(31, 0, 63);\n    PALETTE_ENTRY(47, 0, 63);\n    PALETTE_ENTRY(63, 0, 63);\n    PALETTE_ENTRY(63, 0, 47);\n    PALETTE_ENTRY(63, 0, 31);\n    PALETTE_ENTRY(63, 0, 16);\n    PALETTE_ENTRY(63, 0, 0);\n    PALETTE_ENTRY(63, 16, 0);\n    PALETTE_ENTRY(63, 31, 0);\n    PALETTE_ENTRY(63, 47, 0);\n    PALETTE_ENTRY(63, 63, 0);\n    PALETTE_ENTRY(47, 63, 0);\n    PALETTE_ENTRY(31, 63, 0);\n    PALETTE_ENTRY(16, 63, 0);\n    PALETTE_ENTRY(0, 63, 0);\n    PALETTE_ENTRY(0, 63, 16);\n    PALETTE_ENTRY(0, 63, 31);\n    PALETTE_ENTRY(0, 63, 47);\n    PALETTE_ENTRY(0, 63, 63);\n    PALETTE_ENTRY(0, 47, 63);\n    PALETTE_ENTRY(0, 31, 63);\n    PALETTE_ENTRY(0, 16, 63);\n    \n    PALETTE_ENTRY(31, 31, 63); \n    PALETTE_ENTRY(39, 31, 63);\n    PALETTE_ENTRY(47, 31, 63);\n    PALETTE_ENTRY(55, 31, 63);\n    PALETTE_ENTRY(63, 31, 63);\n    PALETTE_ENTRY(63, 31, 55);\n    PALETTE_ENTRY(63, 31, 47);\n    PALETTE_ENTRY(63, 31, 39);\n    PALETTE_ENTRY(63, 31, 31);\n    PALETTE_ENTRY(63, 39, 31);\n    PALETTE_ENTRY(63, 47, 31);\n    PALETTE_ENTRY(63, 55, 31);\n    PALETTE_ENTRY(63, 63, 31);\n    PALETTE_ENTRY(55, 63, 31);\n    PALETTE_ENTRY(47, 63, 31);\n    PALETTE_ENTRY(39, 63, 31);\n    PALETTE_ENTRY(31, 63, 31);\n    PALETTE_ENTRY(31, 63, 39);\n    PALETTE_ENTRY(31, 63, 47);\n    PALETTE_ENTRY(31, 63, 55);\n    PALETTE_ENTRY(31, 63, 63);\n    PALETTE_ENTRY(31, 55, 63);\n    PALETTE_ENTRY(31, 47, 63);\n    PALETTE_ENTRY(31, 39, 63);\n    \n    PALETTE_ENTRY(45, 45, 63); \n    PALETTE_ENTRY(49, 45, 63);\n    PALETTE_ENTRY(54, 45, 63);\n    PALETTE_ENTRY(58, 45, 63);\n    PALETTE_ENTRY(63, 45, 63);\n    PALETTE_ENTRY(63, 45, 58);\n    PALETTE_ENTRY(63, 45, 54);\n    PALETTE_ENTRY(63, 45, 49);\n    PALETTE_ENTRY(63, 45, 45);\n    PALETTE_ENTRY(63, 49, 45);\n    PALETTE_ENTRY(63, 54, 45);\n    PALETTE_ENTRY(63, 58, 45);\n    PALETTE_ENTRY(63, 63, 45);\n    PALETTE_ENTRY(58, 63, 45);\n    PALETTE_ENTRY(54, 63, 45);\n    PALETTE_ENTRY(49, 63, 45);\n    PALETTE_ENTRY(45, 63, 45);\n    PALETTE_ENTRY(45, 63, 49);\n    PALETTE_ENTRY(45, 63, 54);\n    PALETTE_ENTRY(45, 63, 58);\n    PALETTE_ENTRY(45, 63, 63);\n    PALETTE_ENTRY(45, 58, 63);\n    PALETTE_ENTRY(45, 54, 63);\n    PALETTE_ENTRY(45, 49, 63);\n    \n    PALETTE_ENTRY(0, 0, 28); \n    PALETTE_ENTRY(7, 0, 28);\n    PALETTE_ENTRY(14, 0, 28);\n    PALETTE_ENTRY(21, 0, 28);\n    PALETTE_ENTRY(28, 0, 28);\n    PALETTE_ENTRY(28, 0, 21);\n    PALETTE_ENTRY(28, 0, 14);\n    PALETTE_ENTRY(28, 0, 7);\n    PALETTE_ENTRY(28, 0, 0);\n    PALETTE_ENTRY(28, 7, 0);\n    PALETTE_ENTRY(28, 14, 0);\n    PALETTE_ENTRY(28, 21, 0);\n    PALETTE_ENTRY(28, 28, 0);\n    PALETTE_ENTRY(21, 28, 0);\n    PALETTE_ENTRY(14, 28, 0);\n    PALETTE_ENTRY(7, 28, 0);\n    PALETTE_ENTRY(0, 28, 0);\n    PALETTE_ENTRY(0, 28, 7);\n    PALETTE_ENTRY(0, 28, 14);\n    PALETTE_ENTRY(0, 28, 21);\n    PALETTE_ENTRY(0, 28, 28);\n    PALETTE_ENTRY(0, 21, 28);\n    PALETTE_ENTRY(0, 14, 28);\n    PALETTE_ENTRY(0, 7, 28);\n    \n    PALETTE_ENTRY(14, 14, 28);\n    PALETTE_ENTRY(17, 14, 28);\n    PALETTE_ENTRY(21, 14, 28);\n    PALETTE_ENTRY(24, 14, 28);\n    PALETTE_ENTRY(28, 14, 28);\n    PALETTE_ENTRY(28, 14, 24);\n    PALETTE_ENTRY(28, 14, 21);\n    PALETTE_ENTRY(28, 14, 17);\n    PALETTE_ENTRY(28, 14, 14);\n    PALETTE_ENTRY(28, 17, 14);\n    PALETTE_ENTRY(28, 21, 14);\n    PALETTE_ENTRY(28, 24, 14);\n    PALETTE_ENTRY(28, 28, 14);\n    PALETTE_ENTRY(24, 28, 14);\n    PALETTE_ENTRY(21, 28, 14);\n    PALETTE_ENTRY(17, 28, 14);\n    PALETTE_ENTRY(14, 28, 14);\n    PALETTE_ENTRY(14, 28, 17);\n    PALETTE_ENTRY(14, 28, 21);\n    PALETTE_ENTRY(14, 28, 24);\n    PALETTE_ENTRY(14, 28, 28);\n    PALETTE_ENTRY(14, 24, 28);\n    PALETTE_ENTRY(14, 21, 28);\n    PALETTE_ENTRY(14, 17, 28);\n        \n    PALETTE_ENTRY(20, 20, 28);\n    PALETTE_ENTRY(22, 20, 28);\n    PALETTE_ENTRY(24, 20, 28);\n    PALETTE_ENTRY(26, 20, 28);\n    PALETTE_ENTRY(28, 20, 28);\n    PALETTE_ENTRY(28, 20, 26);\n    PALETTE_ENTRY(28, 20, 24);\n    PALETTE_ENTRY(28, 20, 22);\n    PALETTE_ENTRY(28, 20, 20);\n    PALETTE_ENTRY(28, 22, 20);\n    PALETTE_ENTRY(28, 24, 20);\n    PALETTE_ENTRY(28, 26, 20);\n    PALETTE_ENTRY(28, 28, 20);\n    PALETTE_ENTRY(26, 28, 20);\n    PALETTE_ENTRY(24, 28, 20);\n    PALETTE_ENTRY(22, 28, 20);\n    PALETTE_ENTRY(20, 28, 20);\n    PALETTE_ENTRY(20, 28, 22);\n    PALETTE_ENTRY(20, 28, 24);\n    PALETTE_ENTRY(20, 28, 26);\n    PALETTE_ENTRY(20, 28, 28);\n    PALETTE_ENTRY(20, 26, 28);\n    PALETTE_ENTRY(20, 24, 28);\n    PALETTE_ENTRY(20, 22, 28);       \n    \n    PALETTE_ENTRY(0, 0, 16);\n    PALETTE_ENTRY(4, 0, 16);\n    PALETTE_ENTRY(8, 0, 16);\n    PALETTE_ENTRY(12, 0, 16);\n    PALETTE_ENTRY(16, 0, 16);\n    PALETTE_ENTRY(16, 0, 12);\n    PALETTE_ENTRY(16, 0, 8);\n    PALETTE_ENTRY(16, 0, 4);\n    PALETTE_ENTRY(16, 0, 0);\n    PALETTE_ENTRY(16, 4, 0);\n    PALETTE_ENTRY(16, 8, 0);\n    PALETTE_ENTRY(16, 12, 0);\n    PALETTE_ENTRY(16, 16, 0);\n    PALETTE_ENTRY(12, 16, 0);\n    PALETTE_ENTRY(8, 16, 0);\n    PALETTE_ENTRY(4, 16, 0);\n    PALETTE_ENTRY(0, 16, 0);\n    PALETTE_ENTRY(0, 16, 4);\n    PALETTE_ENTRY(0, 16, 8);\n    PALETTE_ENTRY(0, 16, 12);\n    PALETTE_ENTRY(0, 16, 16);\n    PALETTE_ENTRY(0, 12, 16);\n    PALETTE_ENTRY(0, 8, 16);\n    PALETTE_ENTRY(0, 4, 16);\n    \n    PALETTE_ENTRY(8, 8, 16);\n    PALETTE_ENTRY(10, 8, 16);\n    PALETTE_ENTRY(12, 8, 16);\n    PALETTE_ENTRY(14, 8, 16);\n    PALETTE_ENTRY(16, 8, 16);\n    PALETTE_ENTRY(16, 8, 14);\n    PALETTE_ENTRY(16, 8, 12);\n    PALETTE_ENTRY(16, 8, 10);\n    PALETTE_ENTRY(16, 8, 8);\n    PALETTE_ENTRY(16, 10, 8);\n    PALETTE_ENTRY(16, 12, 8);\n    PALETTE_ENTRY(16, 14, 8);\n    PALETTE_ENTRY(16, 16, 8);\n    PALETTE_ENTRY(14, 16, 8);\n    PALETTE_ENTRY(12, 16, 8);\n    PALETTE_ENTRY(10, 16, 8);\n    PALETTE_ENTRY(8, 16, 8);\n    PALETTE_ENTRY(8, 16, 10);\n    PALETTE_ENTRY(8, 16, 12);\n    PALETTE_ENTRY(8, 16, 14);\n    PALETTE_ENTRY(8, 16, 16);\n    PALETTE_ENTRY(8, 14, 16);\n    PALETTE_ENTRY(8, 12, 16);\n    PALETTE_ENTRY(8, 10, 16);\n    \n    PALETTE_ENTRY(11, 11, 16);\n    PALETTE_ENTRY(12, 11, 16);\n    PALETTE_ENTRY(13, 11, 16);\n    PALETTE_ENTRY(15, 11, 16);\n    PALETTE_ENTRY(16, 11, 16);\n    PALETTE_ENTRY(16, 11, 15);\n    PALETTE_ENTRY(16, 11, 13);\n    PALETTE_ENTRY(16, 11, 12);\n    PALETTE_ENTRY(16, 11, 11);\n    PALETTE_ENTRY(16, 12, 11);\n    PALETTE_ENTRY(16, 13, 11);\n    PALETTE_ENTRY(16, 15, 11);\n    PALETTE_ENTRY(16, 16, 11);\n    PALETTE_ENTRY(15, 16, 11);\n    PALETTE_ENTRY(13, 16, 11);\n    PALETTE_ENTRY(12, 16, 11);\n    PALETTE_ENTRY(11, 16, 11);\n    PALETTE_ENTRY(11, 16, 12);\n    PALETTE_ENTRY(11, 16, 13);\n    PALETTE_ENTRY(11, 16, 15);\n    PALETTE_ENTRY(11, 16, 16);\n    PALETTE_ENTRY(11, 15, 16);\n    PALETTE_ENTRY(11, 13, 16);\n    PALETTE_ENTRY(11, 12, 16);\n    \n    PALETTE_ENTRY(0, 0, 0);\n    PALETTE_ENTRY(0, 0, 0);\n    PALETTE_ENTRY(0, 0, 0);\n    PALETTE_ENTRY(0, 0, 0);\n    PALETTE_ENTRY(0, 0, 0);\n    PALETTE_ENTRY(0, 0, 0);\n    PALETTE_ENTRY(0, 0, 0);\n    PALETTE_ENTRY(0, 0, 0);\n\n    return vec3(0);\n}\n*/\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}