{
    "Shader": {
        "info": {
            "date": "1544735752",
            "description": "Witchy stuff idk\n[url=https://www.shadertoy.com/playlist/s3BcD1]FRACTAL PLAYLIST[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "MlyBWh",
            "likes": 9,
            "name": "Pentagractal",
            "published": 3,
            "tags": [
                "fractal",
                "triangle",
                "infinite",
                "goldenratio",
                "pentagon",
                "nested",
                "pentagram"
            ],
            "usePreview": 0,
            "username": "domrally",
            "viewed": 472
        },
        "renderpass": [
            {
                "code": "/// by Dom Mandy in 2018\n\n\nconst float pi = 3.1415926535897932384626433832795;\n\n\n/*\ntranslate distance function\n*/\nvec2 translate(vec2 p, vec2 offset) {\n    return p - offset;\n}\n\n\n/*\nrotate distance function\n*/\nvec2 rotate(vec2 p, float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    mat2 R = mat2(c, -s, s, c);\n    return R * p;\n}\n\n\n/*\nrepeat with rotational symmetry\n*/\nvec2 mirror(vec2 p, float degree) {\n    const float tau = pi * 2.0;\n    const float piHalf = 1.57079632679489661923;\n    float angle = tau / degree;\n    float theta = atan(p.y, p.x) + piHalf + angle / 2.0;\n    float turn = floor(theta / angle) * angle;\n    return rotate(p, turn);\n}\n\n\n/*\ndraw antialiased point with minimum pixel size \n*/\nvec3 draw(vec3 buffer, float d, float r, vec3 color) {\n    float up = min(iResolution.x,iResolution.y);\n    d = up * d;\n    r = r * up / 360.0;\n    r = clamp(r, 1.5, 10000.0);\n  \tfloat aa = fwidth(d);\n   \treturn mix(buffer, color, 1.0 - smoothstep(r - aa, r + aa / 2.0, d));\n}\n\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    // normalize pixel coordinates centered at origin\n    vec2 coord = fragCoord - iResolution.xy / 2.0;\n    vec2 uv = coord / min(iResolution.x, iResolution.y);\n    // periodic time varying pixel color\n    vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4));\n    // geometry: the golden ratios of the pentagram/pentagon\n    const float r = 0.5;\n    const float phi\t= (sqrt(5.0) + 1.0) / 2.0;\n    const float phiSquared = phi * phi;\n    const float rSmaller = r / phiSquared;\n    const float a = r * phi / 2.0;\n    const float h = a - rSmaller;\n    const float w = r * sqrt((sqrt(5.0) + 5.0) / 2.0) / phi;\n    // zoom\n    const float phiToThe4th = phiSquared * phiSquared;\n\tconst float logPhiSquared = log(phiSquared);\n    float t = 1.0 + mod(iTime, phiToThe4th - 1.0);\n    float u = 0.5 * log(t) / logPhiSquared;\n    float z = mix(1.0, 1.0 / phiToThe4th, u);\n    vec2 q = uv * z;\n    // fractalize\n    float l = length(q);\n    float n = floor(log(r / l) / logPhiSquared);\n    float s = pow(phi, 2.0 * n);\n    // flip & spin\n    q = rotate(q, pi * n - iTime / 8.0);\n    // 5-way symmetry\n    q = mirror(q, 5.0);\n    // scale\n    q = q * s;\n    // position pentagram at height appropriate for level in the fractal\n    q = translate(q, vec2(0.0, -rSmaller));\n    // calculate distance from oriented base triangle\n    float d = sdTriangleIsosceles(vec2(w / 2.0, -h), q) / (s * z);\n\t// render anti-aliased lines scaled to position in fractal\n    float b = length(uv);\n    col = draw(vec3(0.0), abs(d), 8.0 * b, 4.0 * sqrt(b) * col);\n    // output to screen\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/// Inigo Quilez's signed distance to a 2D triangle\n// reference Demo: https://www.shadertoy.com/view/MldcD7\nfloat sdTriangleIsosceles( in vec2 q, in vec2 p )\n{\n    p.x = abs(p.x);\n    \n\tvec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    \n    float s = -sign( q.y );\n\n    vec2 d = min( vec2( dot( a, a ), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot( b, b ), s*(p.y-q.y)  ));\n\n\treturn -sqrt(d.x)*sign(d.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}