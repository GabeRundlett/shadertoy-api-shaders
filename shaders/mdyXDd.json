{
    "Shader": {
        "info": {
            "date": "1681791939",
            "description": "Converted from SVG with https://gist.github.com/Ninja-Koala/74fa7652fb4de248949ce1e27b989c14",
            "flags": 0,
            "hasliked": 0,
            "id": "mdyXDd",
            "likes": 1,
            "name": "bonjour-logo",
            "published": 3,
            "tags": [
                "icon"
            ],
            "usePreview": 0,
            "username": "dreness",
            "viewed": 161
        },
        "renderpass": [
            {
                "code": "#define ZERO min(0,iFrame)\n\nfloat border;\n\n// Modified from http://tog.acm.org/resources/GraphicsGems/gems/Roots3And4.c\n// Credits to Doublefresh for hinting there\nint solve_quadric(vec2 coeffs, inout vec2 roots){\n\n\t// normal form: x^2 + px + q = 0\n\tfloat p = coeffs[1] / 2.;\n\tfloat q = coeffs[0];\n\n\tfloat D = p * p - q;\n\n\tif (D < 0.){\n\t\treturn 0;\n\t}\n\telse{\n\t\troots[0] = -sqrt(D) - p;\n\t\troots[1] = sqrt(D) - p;\n\n\t\treturn 2;\n\t}\n}\n\n//From Trisomie21\n//But instead of his cancellation fix i'm using a newton iteration\nint solve_cubic(vec3 coeffs, inout vec3 r){\n\n\tfloat a = coeffs[2];\n\tfloat b = coeffs[1];\n\tfloat c = coeffs[0];\n\n\tfloat p = b - a*a / 3.0;\n\tfloat q = a * (2.0*a*a - 9.0*b) / 27.0 + c;\n\tfloat p3 = p*p*p;\n\tfloat d = q*q + 4.0*p3 / 27.0;\n\tfloat offset = -a / 3.0;\n\tif(d >= 0.0) { // Single solution\n\t\tfloat z = sqrt(d);\n\t\tfloat u = (-q + z) / 2.0;\n\t\tfloat v = (-q - z) / 2.0;\n\t\tu = sign(u)*pow(abs(u),1.0/3.0);\n\t\tv = sign(v)*pow(abs(v),1.0/3.0);\n\t\tr[0] = offset + u + v;\t\n\n\t\t//Single newton iteration to account for cancellation\n\t\tfloat f = ((r[0] + a) * r[0] + b) * r[0] + c;\n\t\tfloat f1 = (3. * r[0] + 2. * a) * r[0] + b;\n\n\t\tr[0] -= f / f1;\n\n\t\treturn 1;\n\t}\n\tfloat u = sqrt(-p / 3.0);\n\tfloat v = acos(-sqrt( -27.0 / p3) * q / 2.0) / 3.0;\n\tfloat m = cos(v), n = sin(v)*1.732050808;\n\n\t//Single newton iteration to account for cancellation\n\t//(once for every root)\n\tr[0] = offset + u * (m + m);\n\tr[1] = offset - u * (n + m);\n\tr[2] = offset + u * (n - m);\n\n\tvec3 f = ((r + a) * r + b) * r + c;\n\tvec3 f1 = (3. * r + 2. * a) * r + b;\n\n\tr -= f / f1;\n\t\n\treturn 3;\n}\n\nfloat quadratic_bezier_normal_iteration(float t, vec2 a0, vec2 a1, vec2 a2){\n\t//horner's method\n\tvec2 a_1=a1+t*a2;\n\n\tvec2 uv_to_p=a0+t*a_1;\n\tvec2 tang=a_1+t*a2;\n\n\tfloat l_tang=dot(tang,tang);\n\treturn t-dot(tang,uv_to_p)/l_tang;\n}\n\nfloat quadratic_bezier_dis_approx_sq(vec2 uv, vec2 p0, vec2 p1, vec2 p2){\n\tvec2 a2 = p0 - 2. * p1 + p2;\n\tvec2 a1 = -2. * p0 + 2. * p1;\n\tvec2 a0 = p0 - uv;\n\n\tfloat d0 = 1e38;\n\n\tfloat t;\n\tvec3 params=vec3(0,.5,1);\n\t\n\tif(all(lessThan(uv,max(max(p0,p1),p2)+border)) && all(greaterThan(uv,min(min(p0,p1),p2)-border))){\n\t\tfor(int i=ZERO;i<3;i++){\n\t\t\tt=params[i];\n\t\t\tfor(int j=ZERO;j<3;j++){\n\t\t\t\tt=quadratic_bezier_normal_iteration(t,a0,a1,a2);\n\t\t\t}\n\t\t\tt=clamp(t,0.,1.);\n\t\t\tvec2 uv_to_p=(a2*t+a1)*t+a0;\n\t\t\td0=min(d0,dot(uv_to_p,uv_to_p));\n\t\t}\n\t}\n\n\treturn d0;\n}\n\nfloat cubic_bezier_normal_iteration(float t, vec2 a0, vec2 a1, vec2 a2, vec2 a3){\n\t//horner's method\n\tvec2 a_2=a2+t*a3;\n\tvec2 a_1=a1+t*a_2;\n\tvec2 b_2=a_2+t*a3;\n\n\tvec2 uv_to_p=a0+t*a_1;\n\tvec2 tang=a_1+t*b_2;\n\n\tfloat l_tang=dot(tang,tang);\n\treturn t-dot(tang,uv_to_p)/l_tang;\n}\n\nfloat cubic_bezier_dis_approx_sq(vec2 uv, vec2 p0, vec2 p1, vec2 p2, vec2 p3){\n\tvec2 a3 = (-p0 + 3. * p1 - 3. * p2 + p3);\n\tvec2 a2 = (3. * p0 - 6. * p1 + 3. * p2);\n\tvec2 a1 = (-3. * p0 + 3. * p1);\n\tvec2 a0 = p0 - uv;\n\n\tfloat d0 = 1e38;\n\n\tfloat t;\n\tvec3 params=vec3(0,.5,1);\n\n\tif(all(lessThan(uv,max(max(p0,p1),max(p2,p3))+border)) && all(greaterThan(uv,min(min(p0,p1),min(p2,p3))-border))){\n\t\tfor(int i=ZERO;i<3;i++){\n\t\t\tt=params[i];\n\t\t\tfor(int j=ZERO;j<3;j++){\n\t\t\t\tt=cubic_bezier_normal_iteration(t,a0,a1,a2,a3);\n\t\t\t}\n\t\t\tt=clamp(t,0.,1.);\n\t\t\tvec2 uv_to_p=((a3*t+a2)*t+a1)*t+a0;\n\t\t\td0=min(d0,dot(uv_to_p,uv_to_p));\n\t\t}\n\t}\n\n\treturn d0;\n}\n\n//segment_dis_sq by iq\nfloat length2( vec2 v ) { return dot(v,v); }\n\nfloat segment_dis_sq( vec2 p, vec2 a, vec2 b ){\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length2( pa - ba*h );\n}\n\nint segment_int_test(vec2 uv, vec2 p0, vec2 p1){\n\tp0-=uv;\n\tp1-=uv;\n\n\tint ret;\n\t\n\tif(p0.y*p1.y<0.){\n\t\tvec2 nor=p0-p1;\n\t\tnor=vec2(nor.y,-nor.x);\n\t\t\n\t\tfloat sgn;\n\t\t\n\t\tif(p0.y>p1.y){\n\t\t\tsgn=1.;\n\t\t}\n\t\telse{\n\t\t\tsgn=-1.;\n\t\t}\n\n\t\tif(dot(nor,p0)*sgn<0.){\n\t\t\tret=0;\n\t\t}\n\t\telse{\n\t\t\tret=1;\n\t\t}\n\t}\n\telse{\n\t\tret=0;\n\t}\n\n\treturn ret;\n}\n\nint quadratic_bezier_int_test(vec2 uv, vec2 p0, vec2 p1, vec2 p2){\n\n\tfloat qu = (p0.y - 2. * p1.y + p2.y);\n\tfloat li = (-2. * p0.y + 2. * p1.y);\n\tfloat co = p0.y - uv.y;\n\n\tvec2 roots = vec2(1e38);\n\tint n_roots = solve_quadric(vec2(co/qu,li/qu),roots);\n\n\tint n_ints = 0;\n\n\tfor(int i=ZERO;i<n_roots;i++){\n\t\tif(roots[i] >= 0. && roots[i] <= 1.){\n\t\t\tfloat x_pos = p0.x - 2. * p1.x + p2.x;\n\t\t\tx_pos = x_pos * roots[i] + -2. * p0.x + 2. * p1.x;\n\t\t\tx_pos = x_pos * roots[i] + p0.x;\n\n\t\t\tif(x_pos > uv.x){\n\t\t\t\tn_ints++;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn n_ints;\n}\n\nint cubic_bezier_int_test(vec2 uv, vec2 p0, vec2 p1, vec2 p2, vec2 p3){\n\n\tfloat cu = (-p0.y + 3. * p1.y - 3. * p2.y + p3.y);\n\tfloat qu = (3. * p0.y - 6. * p1.y + 3. * p2.y);\n\tfloat li = (-3. * p0.y + 3. * p1.y);\n\tfloat co = p0.y - uv.y;\n\n\tvec3 roots = vec3(1e38);\n\tint n_roots;\n\t\n\tint n_ints=0;\n\n\tif(uv.x<min(min(p0.x,p1.x),min(p2.x,p3.x))){\n\t\tif(uv.y>=min(p0.y,p3.y) && uv.y<=max(p0.y,p3.y)){\n\t\t\tn_ints=1;\n\t\t}\n\t}\n    \telse{\n\t\tif(abs(cu) < .0001){\n\t\t\tn_roots = solve_quadric(vec2(co/qu,li/qu),roots.xy);\n\t\t}\n\t\telse{\n\t\t\tn_roots = solve_cubic(vec3(co/cu,li/cu,qu/cu),roots);\n\t\t}\n\n\t\tfor(int i=ZERO;i<n_roots;i++){\n\t\t\tif(roots[i] >= 0. && roots[i] <= 1.){\n\t\t\t\tfloat x_pos = -p0.x + 3. * p1.x - 3. * p2.x + p3.x;\n\t\t\t\tx_pos = x_pos * roots[i] + 3. * p0.x - 6. * p1.x + 3. * p2.x;\n\t\t\t\tx_pos = x_pos * roots[i] + -3. * p0.x + 3. * p1.x;\n\t\t\t\tx_pos = x_pos * roots[i] + p0.x;\n\n\t\t\t\tif(x_pos > uv.x){\n\t\t\t\t\tn_ints++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn n_ints;\n}\n\nfloat path0_dis_sq(vec2 uv){\n\tfloat dis_sq=1e38;\n\n\tint num_its=0;\n\n\tvec2[78] p=vec2[](vec2(-0.221429,0.0935788),\n\t                  vec2(-0.221429,0.0274293),\n\t                  vec2(-0.14065,-0.0407099),\n\t                  vec2(-0.00529893,-0.0407099),\n\t                  vec2(0.0585909,-0.0407099),\n\t                  vec2(0.114833,-0.0250937),\n\t                  vec2(0.155012,0.00318739),\n\t                  vec2(0.145155,0.00821305),\n\t                  vec2(0.136588,0.0161222),\n\t                  vec2(0.13039,0.0253467),\n\t                  vec2(0.100136,-0.00248757),\n\t                  vec2(0.0524272,-0.0177156),\n\t                  vec2(-0.00529893,-0.0177156),\n\t                  vec2(-0.124562,-0.0177156),\n\t                  vec2(-0.170264,0.0462584),\n\t                  vec2(-0.170264,0.0840084),\n\t                  vec2(-0.170264,0.0926428),\n\t                  vec2(-0.168788,0.100679),\n\t                  vec2(-0.166233,0.10745),\n\t                  vec2(-0.183316,0.117712),\n\t                  vec2(-0.194868,0.136026),\n\t                  vec2(-0.196808,0.155875),\n\t                  vec2(-0.213132,0.140057),\n\t                  vec2(-0.221429,0.118757),\n\t                  vec2(0.101932,-0.0863272),\n\t                  vec2(0.101932,-0.00284158),\n\t                  vec2(0.0216754,0.121658),\n\t                  vec2(-0.0688512,0.16456),\n\t                  vec2(-0.068792,0.163877),\n\t                  vec2(-0.068792,0.163101),\n\t                  vec2(-0.068792,0.162629),\n\t                  vec2(-0.068792,0.152249),\n\t                  vec2(-0.0712882,0.142291),\n\t                  vec2(-0.0758584,0.133201),\n\t                  vec2(-0.00373913,0.10965),\n\t                  vec2(0.0634055,0.0137529),\n\t                  vec2(0.0634055,-0.0666723),\n\t                  vec2(0.0634055,-0.112964),\n\t                  vec2(0.0355884,-0.147266),\n\t                  vec2(0.000772347,-0.147266),\n\t                  vec2(0.00194447,-0.152468),\n\t                  vec2(0.00263565,-0.15773),\n\t                  vec2(0.00263565,-0.162933),\n\t                  vec2(0.00263565,-0.175809),\n\t                  vec2(-0.00109139,-0.188052),\n\t                  vec2(-0.00836803,-0.198676),\n\t                  vec2(-0.00753352,-0.198735),\n\t                  vec2(-0.00652157,-0.198735),\n\t                  vec2(-0.00556876,-0.198735),\n\t                  vec2(0.0568791,-0.198735),\n\t                  vec2(0.101932,-0.151726),\n\t                  vec2(0.11775,0.178987),\n\t                  vec2(0.00744199,0.178987),\n\t                  vec2(-0.112799,0.0156162),\n\t                  vec2(-0.112799,-0.0863272),\n\t                  vec2(-0.112799,-0.096758),\n\t                  vec2(-0.111416,-0.107551),\n\t                  vec2(-0.108684,-0.118589),\n\t                  vec2(-0.0995944,-0.108563),\n\t                  vec2(-0.0859089,-0.100864),\n\t                  vec2(-0.070158,-0.0986213),\n\t                  vec2(-0.0728312,-0.0893881),\n\t                  vec2(-0.0744838,-0.0780136),\n\t                  vec2(-0.0744838,-0.0666723),\n\t                  vec2(-0.0744838,0.0226398),\n\t                  vec2(0.0130241,0.139078),\n\t                  vec2(0.0994191,0.139078),\n\t                  vec2(0.122472,0.139078),\n\t                  vec2(0.141048,0.130469),\n\t                  vec2(0.151107,0.115485),\n\t                  vec2(0.160947,0.121531),\n\t                  vec2(0.172112,0.124508),\n\t                  vec2(0.184212,0.124508),\n\t                  vec2(0.192391,0.124508),\n\t                  vec2(0.200359,0.122948),\n\t                  vec2(0.207484,0.120367),\n\t                  vec2(0.19697,0.157064),\n\t                  vec2(0.163933,0.178987));\n\n\tivec4[26] c_bez=ivec4[](ivec4(0,1,2,3),\n\t                        ivec4(3,4,5,6),\n\t                        ivec4(6,7,8,9),\n\t                        ivec4(9,10,11,12),\n\t                        ivec4(12,13,14,15),\n\t                        ivec4(15,16,17,18),\n\t                        ivec4(18,19,20,21),\n\t                        ivec4(21,22,23,0),\n\t                        ivec4(24,25,26,27),\n\t                        ivec4(27,28,29,30),\n\t                        ivec4(30,31,32,33),\n\t                        ivec4(33,34,35,36),\n\t                        ivec4(36,37,38,39),\n\t                        ivec4(39,40,41,42),\n\t                        ivec4(42,43,44,45),\n\t                        ivec4(45,46,47,48),\n\t                        ivec4(48,49,50,24),\n\t                        ivec4(51,52,53,54),\n\t                        ivec4(54,55,56,57),\n\t                        ivec4(57,58,59,60),\n\t                        ivec4(60,61,62,63),\n\t                        ivec4(63,64,65,66),\n\t                        ivec4(66,67,68,69),\n\t                        ivec4(69,70,71,72),\n\t                        ivec4(72,73,74,75),\n\t                        ivec4(75,76,77,51));\n\n\tif(all(lessThan(uv,vec2(0.207484,0.178987)+border)) && all(greaterThan(uv,vec2(-0.221429,-0.198735)-border))){\n\t\tfor(int i=ZERO;i<26;i++){\n\t\t\tdis_sq=min(dis_sq,cubic_bezier_dis_approx_sq(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]));\n\t\t\tnum_its+=cubic_bezier_int_test(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]);\n\t\t}\n\t}\n\n\tfloat sgn=1.;\n\n\tif(num_its%2==1){\n\t\tsgn=-1.;\n\t}\n\n\treturn sgn*dis_sq;\n}\n\nfloat path1_dis_sq(vec2 uv){\n\tfloat dis_sq=1e38;\n\n\tint num_its=0;\n\n\tvec2[36] p=vec2[](vec2(-0.133103,0.12541),\n\t                  vec2(-0.11231,0.12541),\n\t                  vec2(-0.0958842,0.141776),\n\t                  vec2(-0.0958842,0.162629),\n\t                  vec2(-0.0958842,0.183271),\n\t                  vec2(-0.112462,0.2),\n\t                  vec2(-0.133103,0.2),\n\t                  vec2(-0.153804,0.2),\n\t                  vec2(-0.170533,0.183271),\n\t                  vec2(-0.170533,0.162629),\n\t                  vec2(-0.170533,0.14208),\n\t                  vec2(-0.153804,0.12541),\n\t                  vec2(0.184212,0.0230698),\n\t                  vec2(0.204913,0.0230698),\n\t                  vec2(0.221429,0.0394959),\n\t                  vec2(0.221429,0.0602893),\n\t                  vec2(0.221429,0.0809898),\n\t                  vec2(0.204761,0.097719),\n\t                  vec2(0.184212,0.097719),\n\t                  vec2(0.16357,0.097719),\n\t                  vec2(0.146841,0.0809898),\n\t                  vec2(0.146841,0.0602893),\n\t                  vec2(0.146841,0.0397994),\n\t                  vec2(0.16357,0.0230698),\n\t                  vec2(-0.0616755,-0.2),\n\t                  vec2(-0.040823,-0.2),\n\t                  vec2(-0.0244561,-0.183633),\n\t                  vec2(-0.0244561,-0.162933),\n\t                  vec2(-0.0244561,-0.14208),\n\t                  vec2(-0.0411857,-0.125562),\n\t                  vec2(-0.0616755,-0.125562),\n\t                  vec2(-0.0823761,-0.125562),\n\t                  vec2(-0.0990465,-0.14208),\n\t                  vec2(-0.0990465,-0.162933),\n\t                  vec2(-0.0990465,-0.183482),\n\t                  vec2(-0.0823761,-0.2));\n\n\tivec4[12] c_bez=ivec4[](ivec4(0,1,2,3),\n\t                        ivec4(3,4,5,6),\n\t                        ivec4(6,7,8,9),\n\t                        ivec4(9,10,11,0),\n\t                        ivec4(12,13,14,15),\n\t                        ivec4(15,16,17,18),\n\t                        ivec4(18,19,20,21),\n\t                        ivec4(21,22,23,12),\n\t                        ivec4(24,25,26,27),\n\t                        ivec4(27,28,29,30),\n\t                        ivec4(30,31,32,33),\n\t                        ivec4(33,34,35,24));\n\n\tif(all(lessThan(uv,vec2(0.221429,0.2)+border)) && all(greaterThan(uv,vec2(-0.170533,-0.2)-border))){\n\t\tfor(int i=ZERO;i<12;i++){\n\t\t\tdis_sq=min(dis_sq,cubic_bezier_dis_approx_sq(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]));\n\t\t\tnum_its+=cubic_bezier_int_test(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]);\n\t\t}\n\t}\n\n\tfloat sgn=1.;\n\n\tif(num_its%2==1){\n\t\tsgn=-1.;\n\t}\n\n\treturn sgn*dis_sq;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tborder=1./iResolution.x;\n\n\tvec2 uv=fragCoord.xy/iResolution.xy;\n\tuv-=.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\n    vec2 mouse=vec2(0);\n\n\tif(iMouse.x>0.0){\n\t\tmouse = iMouse.xy / iResolution.y;\n\t\tmouse.x -= .5 * iResolution.x / iResolution.y;\n\t\tmouse.y -= .75;\n\t}\n\t\n\tconst float pi=3.14159265358979;\n\n\tfloat t0=smoothstep(0.,0.,iTime);\n\tfloat t1=t0*6.*pi;\n\n\tmat2 rot=mat2(cos(t1),sin(t1),-sin(t1),cos(t1));\n\n\tborder*=exp(4.*mouse.y)*exp(1.-1.*t0);\n\tuv*=exp(4.*mouse.y)*exp(1.-1.*t0);\n\tuv*=rot;\n\n\tuv.x+=mouse.x;\n\n\tfloat dis_sq=1e38;\n\n\tif(all(lessThan(uv,vec2(0.221429,0.2)+border)) && all(greaterThan(uv,vec2(-0.221429,-0.2)-border))){\n\t\tdis_sq=min(dis_sq,path0_dis_sq(uv));\n\t\tdis_sq=min(dis_sq,path1_dis_sq(uv));\n\t}\n\n\tfloat dis=sign(dis_sq)*sqrt(abs(dis_sq));\n\n\tfragColor=vec4(smoothstep(-border, border, dis));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}