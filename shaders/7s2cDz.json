{
    "Shader": {
        "info": {
            "date": "1643375334",
            "description": "Playing around with sine waves ;D",
            "flags": 0,
            "hasliked": 0,
            "id": "7s2cDz",
            "likes": 5,
            "name": "Additive Synthesis",
            "published": 3,
            "tags": [
                "additivesynthesis"
            ],
            "usePreview": 0,
            "username": "Tech_",
            "viewed": 272
        },
        "renderpass": [
            {
                "code": "#define ITERATIONS (int((sin(iTime) * 0.5 + 0.5) * 40.0) + 1)\n\nfloat pow2(float x) { return x * x; }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= 3.0;\n\n    float saw = 0.0;\n    float square = 0.0;\n    float triangle = 0.0;\n    for (int i = 0; i < ITERATIONS; i++) \n    {\n        saw += sin(uv.x * 10.0 * float(i + 1)) / 8.0 / float(i + 1);\n        square += sin(uv.x * 10.0 * float(2 * i + 1)) / 8.0 / float(2 * i + 1);\n        triangle += sin(uv.x * 10.0 * float(2 * i + 1)) / 8.0 / pow2(float(2 * i + 1)) * (mod(float(i), 2.0) * 2.0 - 1.0);\n    }\n\n    // Time varying pixel color\n    vec3 col;\n    int cellID = int(floor(uv.y * 3.0));\n    float cellUv = fract(uv.y * 3.0);\n    \n    if      (cellID == 0) cellUv -= saw;\n    else if (cellID == 1) cellUv -= square;\n    else                  cellUv -= triangle;\n    \n    col += smoothstep(0.01, 0.005, abs(cellUv - 0.5));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}