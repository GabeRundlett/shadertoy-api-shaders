{
    "Shader": {
        "info": {
            "date": "1722794889",
            "description": "source https://www.shadertoy.com/view/4tyfWy https://glslsandbox.com/e#79119.0 https://glslsandbox.com/e#79102.1 https://www.shadertoy.com/view/DtGyWh#",
            "flags": 0,
            "hasliked": 0,
            "id": "XcByRd",
            "likes": 3,
            "name": "new tunnel",
            "published": 3,
            "tags": [
                "fractal",
                "tunnel",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 179
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(23,23,21))*1.5+.5)\n#define time iTime\n#define resolution iResolution.xy\nvec2 hyperbolic(vec2 p) {\n\tfloat denominator = 1.0 + sqrt(abs(1.0 - p.x * p.x + p.y * p.y));\n\treturn vec2(2.0 * p.x / denominator, 2.0 * p.y / denominator);\n}\n\nvec2 spherical(vec2 p, float z) {\n\tfloat X = p.x / (1.0 - z);\n\tfloat Y = p.y / (1.0 - z);\n\tfloat denominator = 1.0 + X * X + Y * Y;\n\t\n\treturn vec2(2.0 * X / denominator, 2.0 * Y / denominator) / ((-1.0 + X * X + Y * Y) / denominator);\n}\n\nvec2 lerp(vec2 a, vec2 b, float i) {\n\treturn a + (b - a) * i;\n}\n\nvec3 image(vec2 p) {\n\tfloat t = time;\n\tvec2 position = (p - 0.5 * resolution) / min(resolution.x, resolution.y);\n\tposition *= clamp(sin(t * 1.5) * 0.5 + 0.6, 0.0, 1.1) * 2.0;\n\n\tvec2 pos = lerp(hyperbolic(position), spherical(position, 1.4), clamp(sin(t * 0.5) * 2.0 + 1.0, 0.0, 1.0));\n\tvec3 color = vec3(0.0);\n\tvec2 pt = vec2(fract(pos.x * 10.0 + t * 4.0  * 10.0) - 0.5, fract(pos.y * 10.0 + sin(t * 2.0) * 2.0  * 10.0) - 0.5);\n\t\n\tif(abs(pt.x) > 0.45 || abs(pt.y) > 0.45) {\n\t\tcolor = pow(distance(pt, vec2(0.0)), 5.0) * vec3(pos, 1.0) * 10.0;\n\t} else {\n\t\tcolor = pow(distance(pt, vec2(0.0)), 3.0) * vec3(pos, 1.0) * 1.4;\n\t}\n\t\n\tcolor = clamp(color, 0.0, 1.0);\n\t\n\treturn color;\n}\n#define AA  4.\n\n\nuniform vec2 mouse;\n\n\nconst float pi = acos(-1.);\nconst float pi2 = pi * 2.0;\n\nvec3 lightDir = vec3(0.15, .5, -.05);\n\nmat2 rot(float a){\n\tfloat s = sin(a), c = cos(a);\n\treturn mat2(c, s, -s, c);\n}\n\nvec2 pmod(vec2 p, float d){\n\tfloat a = atan(p.x, p.y) + pi / d;\n\tfloat n = pi2 / d;\n\ta = floor(a / n) * n;\n\treturn p * rot(-a);\n}\n\nfloat sdBox(vec3 p, vec3 b){\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, 0.)) + min(max(max(d.x, d.y), d.z), 0.);\n}\n\nfloat sdSphere(vec3 p, float r){\n\treturn length(p) - r;\n}\n\n\nfloat map(vec3 p){\n\n\t  p.xy *= rot(floor(p.z * 0.0015) * iTime*1.201);\n\tp.xy = pmod(p.xy, 4.);\n    \n\tp.y -= 2.;\n\tp.z = mod(p.z, 8.) - 4.;\n\tfloat d1 = sdBox(p, vec3(1., .3, .4));\n\tfor(int i = 0; i< 4; i++){\n\t\tp = abs(p) - 1.;\n       \n\t\tp.xy *= rot(time * .03);\n\t\tp.xz *= rot(time * .0035);\n\t}\n\td1 = min(d1, sdBox(p, vec3(.5, .3, .4)));\n\treturn d1;\n}\n\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    vec3 color = vec3(0.0);\n\t\n\tfor(float x = 0.0; x < AA; x++) {\n\t\tfor(float y = 0.0; y < AA; y++) {\n\t\t\tcolor += image(gl_FragCoord.xy + vec2(x, y) / AA - 1.0);\n\t\t}\n\t}\n\t\n    \n    vec2 p3 = ( gl_FragCoord.xy * 2. - resolution.xy ) / min(resolution.x, resolution.y);\n\n\tvec3 color3 = vec3(0.0);\n\t//color.xy = p;\n\t\n\tvec3 cPos = vec3(0., 0., -3. + time);\n    cPos.xy *= rot(floor(cPos.z * 1.0005) * iTime);\n\tvec3 t = vec3(0., 0., time);\n\tvec3 fwd = normalize(t - cPos);\n\tvec3 u = normalize(vec3(0., 1., 0.));\n\tvec3 side = normalize(cross(u, fwd));\n\tu = normalize(cross(fwd, side));\n\tvec3 rd = normalize(p3.x * side + p3.y * u + fwd * (1. - .1 * (1. - dot(p3, p3))));\n\t\n\tfloat d3;\n\tfloat ac,ac2;\n\t\n\tfor(int i = 0; i < 100; i++){\n\t\td3 = map(cPos);\n\t\t\n\t\td3 = max(abs(d3), 0.001);\n\t\tif(mod(length(cPos.z + time * 4.), 150.) < 3.){\n\t\t\tac2 += exp(-d3 * 3.);\n\t\t\t//ac += exp(-d * 3.);\n\t\t}\t\t\n\t\tac += exp(-d3 * 3.);\n\t\tcPos += d3 * rd;\n\t}\n\t\n\tfloat base = (ac * 0.05 + ac2 * 0.01) * 0.35 * (1.0 - length(p3) * 0.2);\n\tcolor3.r = pow(base * 0.8, 1.7);\n\tcolor3.g = pow(base * 0.6, 2.2);\n\tcolor3.b = pow(base * 1.3, 0.7);\n\tcolor /= AA * AA;\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*2.1),sin(.8))*1./e/8e3\n    )\n    {\n        p=g*d;\n           \n        p.z+=iTime*1.5;\n        a=30.;\n        p=mod(p-a,a*2.)-a;\n        s=6.;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            s*=e=1.4+sin(iTime*.1)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+sin(iTime*.3+.5*sin(iTime*.3))*3.,\n                    120,\n                    8.+cos(iTime*.5)*5.\n                 )*color3;\n         }\n         g+=e=length(p.yzx)/s;\n    \n    }\n     vec2 uv = ( C - .5*iResolution.xy ) / iResolution.y;\n      uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    O*= vec4(happy_star(uv, anim) * vec3(0.35,0.2,0.55)*2., 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}