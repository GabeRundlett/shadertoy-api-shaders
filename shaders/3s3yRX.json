{
    "Shader": {
        "info": {
            "date": "1601333386",
            "description": "https://twitter.com/i_dianov/status/1310708480727281667",
            "flags": 0,
            "hasliked": 0,
            "id": "3s3yRX",
            "likes": 1,
            "name": "44 Explearth",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "illus0r",
            "viewed": 332
        },
        "renderpass": [
            {
                "code": "float rnd(float x) {return 2.*fract(54321.987 * sin(987.12345 * x))-1.;}\nvec4 textureCubeZ(sampler2D tex, vec3 p) {\n  float absX = abs(p.x);\n  float absY = abs(p.y);\n  float absZ = abs(p.z);\n\n  int isXPositive = p.x > 0. ? 1 : 0;\n  int isYPositive = p.y > 0. ? 1 : 0;\n  int isZPositive = p.z > 0. ? 1 : 0;\n\n  float maxAxis, uc, vc;\n  vec2 crop;\n\n  // POSITIVE X\n  if (isXPositive!=0 && absX >= absY && absX >= absZ) {\n    maxAxis = absX;\n    uc = -p.z;\n    vc = p.y;\n    crop=vec2(2,1);\n  }\n  // NEGATIVE X\n  if (isXPositive==0 && absX >= absY && absX >= absZ) {\n    maxAxis = absX;\n    uc = p.z;\n    vc = p.y;\n    crop=vec2(0,1);\n  }\n  // NEGATIVE Y\n  if (isYPositive!=0 && absY >= absX && absY >= absZ) {\n    maxAxis = absY;\n    uc = p.x;\n    vc = -p.z;\n    crop=vec2(1,2);\n  }\n  // POSITIVE Y\n  if (isYPositive==0 && absY >= absX && absY >= absZ) {\n    maxAxis = absY;\n    uc = p.x;\n    vc = p.z;\n    crop=vec2(1,0);\n  }\n  // POSITIVE Z\n  if (isZPositive!=0 && absZ >= absX && absZ >= absY) {\n    maxAxis = absZ;\n    uc = p.x;\n    vc = p.y;\n    crop=vec2(1,1);\n  }\n  // NEGATIVE Z\n  if (isZPositive==0 && absZ >= absX && absZ >= absY) {\n    maxAxis = absZ;\n    uc = -p.x;\n    vc = p.y;\n    crop=vec2(3,1);\n  }\n\n  // Convert range from -1 to 1 to 0 to 1\n  vec2 uv = 0.5 * (vec2(uc,vc) / maxAxis + 1.0);\n\n  uv+=crop;\n  uv/=vec2(4,3);\n\n  return texture2D(tex, uv);\n}\n#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define EPSILON 0.001\n#define PI 3.14159265\n#define COL1 1.\n#define COL2 2.\n#define COL3 3.\n\nmat2 rot(float a) {float s = sin(a), c = cos(a);return mat2(c, -s, s, c);}\nfloat sdBox( vec3 p, vec3 b ){  vec3 q = abs(p) - b;  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);}\nfloat opSmoothUnion( float d1, float d2, float k ) {    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );    return mix( d2, d1, h ) - k*h*(1.0-h); }\nfloat opSmoothSubtraction( float d1, float d2, float k ) {    float h = clamp( 0.5 - 0.5*(d1+d2)/k, 0.0, 1.0 );    return mix( d1, -d2, h ) + k*h*(1.0-h); }\nfloat fsnoiseDigits(vec2 c){return fract(sin(dot(c, vec2(0.129898, 0.78233))) * 437.585453);}\nfloat fsnoise(vec2 c){return fract(sin(dot(c, vec2(12.9898, 78.233))) * 43758.5453);}\nfloat hash( float n ) { return fract(sin(n)*753.5453123); }\n// Some useful functions\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\nfloat snoise(vec2 v) {\n\n    // Precompute values for skewed triangular grid\n    const vec4 C = vec4(0.211324865405187,\n                        // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,\n                        // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,\n                        // -1.0 + 2.0 * C.x\n                        0.024390243902439);\n                        // 1.0 / 41.0\n\n    // First corner (x0)\n    vec2 i  = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n\n    // Other two corners (x1, x2)\n    vec2 i1 = vec2(0.0);\n    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);\n    vec2 x1 = x0.xy + C.xx - i1;\n    vec2 x2 = x0.xy + C.zz;\n\n    // Do some permutations to avoid\n    // truncation effects in permutation\n    i = mod289(i);\n    vec3 p = permute(\n            permute( i.y + vec3(0.0, i1.y, 1.0))\n                + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(\n                        dot(x0,x0),\n                        dot(x1,x1),\n                        dot(x2,x2)\n                        ), 0.0);\n\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients:\n    //  41 pts uniformly over a line, mapped onto a diamond\n    //  The ring size 17*17 = 289 is close to a multiple\n    //      of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt(a0*a0 + h*h);\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);\n\n    // Compute final noise value at P\n    vec3 g = vec3(0.0);\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n    return 130.0 * dot(m, g);\n}\nfloat rand(vec2 n) {\n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\nfloat noise(vec2 n) {\n  //https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n\tconst vec2 d = vec2(0.0, 1.0);\n  vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\n\n// ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n\nvec2 getDist(vec3 p) {\n  p.xy *= rot(PI/8.);\n  p.xz *= rot(iTime);\n  p.x*=-1.;\n  vec3 amp=vec3(pow(sin(iTime*2.)*.5+.5,6.)*.1);\n  p.x+=amp.x*snoise(p.yz*3.+iTime);\n  p.y+=amp.y*snoise(p.xz*3.+iTime);\n  p.z+=amp.z*snoise(p.xy*3.+iTime);\n  float obj = (length(p)-.5)*.4;\n  return vec2(obj,1);\n}\n\n// ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n\n\n\n\n\n\n\nvec3 rayMarch(vec3 ro, vec3 rd) {\n\tfloat d = 0.;\n    float info = 0.;\n    float minAngleToObstacle = 1e10;\n    for (int i = 0; i < MAX_STEPS; i++) {\n    \tvec2 distToClosest = getDist(ro + rd * d);\n        minAngleToObstacle = min(minAngleToObstacle, atan(distToClosest.x, d));\n        d += abs(distToClosest.x);\n        info = distToClosest.y;\n        if(abs(distToClosest.x) < EPSILON || d > MAX_DIST) {\n        \tbreak;\n        }\n    }\n    return vec3(d, info, minAngleToObstacle);\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(EPSILON, 0.);\n    vec3 n = getDist(p).x - vec3(getDist(p - e.xyy).x,\n                               getDist(p - e.yxy).x,\n                               getDist(p - e.yyx).x);\n\treturn normalize(n);\n}\n\nvec3 getRayDirection (vec3 ro, vec2 uv, vec3 lookAt) {\n    vec3 rd;\n    rd = normalize(vec3(uv - vec2(0, 0.), 1.));\n    vec3 lookTo = lookAt - ro;\n    float horizAngle = acos(dot(lookTo.xz, rd.xz) / length(lookTo.xz) * length(rd.xz));\n    rd.xz *= rot(horizAngle);\n    return rd;\n}\n\nvec3 getRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 p, color,rd,rm,n,ro;\n    ro=vec3(0,0.*sin(iTime),-2);\n    ro.xz*=rot(iMouse.x*10.);\n    float d, info, dtotal=0.;\n    rd = getRayDir(uv, ro, vec3(0), 1.);\n\n    rm = rayMarch(ro, rd);\n    d = rm[0];\n    info = rm[1];\n\n    if (d < MAX_DIST) {\n      n = getNormal(ro+rd*d);\n      n.xy *= rot(PI/8.);\n      n.xz *= rot(iTime);\n      n.x*=-1.;\n      color = texture(iChannel0, n).xyz;\n\n      n = getNormal(ro+rd*d);\n      float shade = dot(n, vec3(1,1,-1))*.5+.5;\n      color *= shade;\n    }\n    else {\n      color = vec3(step(.9,snoise(rd.xy*100.)));\n    }\n    fragColor = vec4(color,1);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}