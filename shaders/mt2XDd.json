{
    "Shader": {
        "info": {
            "date": "1676835928",
            "description": "Basic long shadow effect, couldn't find an example of this on Shadertoy yet for some reason :)",
            "flags": 0,
            "hasliked": 0,
            "id": "mt2XDd",
            "likes": 1,
            "name": "Long Shadow",
            "published": 3,
            "tags": [
                "2d",
                "chroma",
                "shadow",
                "drop",
                "sample",
                "sampler",
                "dropshadow"
            ],
            "usePreview": 0,
            "username": "MysteryPancake",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "float getAlpha(vec3 color) {\n    return smoothstep(0.5, 0.7, distance(color.rgb, vec3(0.0, 1.0, 0.0)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 vid = texture(iChannel0, uv);\n    fragColor = vid;\n    \n    // Correct aspect ratio for non-square images\n    vec2 aspect = 1.0 / iResolution.xy;\n    \n    // In pixels\n    float shadowLength = 512.0;\n    // Lower values mean better precision\n    float shadowPrecision = 4.0;\n    // In radians\n    float shadowAngle = iTime;\n    \n    float shadowMatte = 0.0;\n    for (float i = shadowPrecision; i <= shadowLength; i += shadowPrecision) {\n        vec2 offset = vec2(sin(shadowAngle), cos(shadowAngle));\n\t\tvec4 col = texture(iChannel0, uv + offset * i * aspect);\n        shadowMatte = max(shadowMatte, getAlpha(col.rgb));\n\t}\n    \n    // Use shadow to darken\n    fragColor -= shadowMatte * 0.25;\n\t\n    // Add back original video\n\tfragColor = mix(fragColor, vid, getAlpha(vid.rgb));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}