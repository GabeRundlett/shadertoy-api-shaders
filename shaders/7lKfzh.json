{
    "Shader": {
        "info": {
            "date": "1664091460",
            "description": "Press mouse to see sums.\n\nrecoding \"Path with max sum\" by Envy24. [url] https://shadertoy.com/view/7lGfz1 [/url]\nwith buffer (and thus progressive )",
            "flags": 32,
            "hasliked": 0,
            "id": "7lKfzh",
            "likes": 10,
            "name": "Path with max sum  - buffer",
            "published": 3,
            "tags": [
                "dynamic",
                "path",
                "max",
                "sum",
                "finding"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 209
        },
        "renderpass": [
            {
                "code": "// inspired by \"Path with max sum\" by Envy24. https://shadertoy.com/view/7lGfz1\n// redone with buffer (and thus progressive )\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    U = floor(N*U/R.y);\n    vec2 P = vec2(0);\n    for (float i = 0.; i < N+N*R.x/R.y -2. ; i++ )\n    {\n        P[ T(P+vec2(1,0)).g < T(P+vec2(0,1)).g ? 1 : 0 ] ++;\n     // P += T(P+vec2(1,0)).g < T(P+vec2(0,1)).g ? vec2(0,1) : vec2(1,0);\n        if ( P==U ) { O = vec4(0,1,0,1); return; }\n    }    \n\n   O = iMouse.z > 0. \n          ? .5+.5*sin(T(U).gggg) // T(U).gggg / (N*length(R)/R.y)\n          : T(U).rrrr;\n          \n// O.b *= float( max(U.x,U.y) < float(iFrame%60) );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float N = 64.;\n\n#define R    iResolution.xy\n#define T(U) texelFetch(iChannel0, ivec2(U), 0 )\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// precompute max sum field array ( opposite of distance field )\n// .r = randow value\n// .g = local max sum field\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if ( U.y > N || U.x > N*R.x/R.y ) return;  // only compute at resolution N\n    \n    U = floor(U);\n    if (iFrame%120 < 1 ) { O*=0.; O.r = fract(1e4*sin(dot(U,R-57.)-iTime)); return; } // init\n    \n    O = T(U);                        // previous state\n    O.g = O.r;\n    \n#if 0                                // purely local computations\n    float l = U.x>0. ? T(U-vec2(1,0)).g : 0., \n          b = U.y>0. ? T(U-vec2(0,1)).g : 0.;\n    O.g += U.x==0. ? b\n         : U.y==0. ? l\n         :           max(l,b);   \n#else                                // boost(?) progression by directly computing borders\n         if (U.x==0.) for (float y=0.; y < U.y; y++ ) O.g += T(U+vec2(0,y)).r;\n    else if (U.y==0.) for (float x=0.; x < U.x; x++ ) O.g += T(U+vec2(x,0)).r;\n    else O.g += max( T(U-vec2(1,0)).g, T(U-vec2(0,1)).g ); // progressively computing the max sum field\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}