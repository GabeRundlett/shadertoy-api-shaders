{
    "Shader": {
        "info": {
            "date": "1521477648",
            "description": "How can i add perspective projection to this?\n\n1. real ellipsoid shading\n2. added 256 color simulate\n3. added antialiasing",
            "flags": 0,
            "hasliked": 0,
            "id": "4sKcRw",
            "likes": 1,
            "name": "ecstatica like ellipsoid shader",
            "published": 3,
            "tags": [
                "ellipsoid",
                "ecstatica"
            ],
            "usePreview": 0,
            "username": "mihart",
            "viewed": 490
        },
        "renderpass": [
            {
                "code": "#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define frame(fragCoord)  (fragCoord+fragCoord - r) /r.y\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec4 baseColor = vec4(0.0, 0.5, 0.5, 1.0);\n    fragColor = baseColor;\n\tvec2 r = iResolution.xy, \n         M = iMouse.xy;\n\n         fragCoord = frame(fragCoord)*.7;\n         M = frame(M)*3.;\n    \n\tvec3 halfAxis  = vec3(1.0,0.5,0.5),\n         ro = vec3(0,0,5),                \t\t\t\t// ray origin\n         rd = normalize(vec3(fragCoord,-4));\t\t\t// ray dir\n    \n        vec3 light = vec3(1.0 + sin(iTime) * 2.0, sin(iTime / 2.0) * 1.0, 1.0);\n    \n    \n    mat2 Ra = rot(M.x),\n         Rb = rot(M.y); \n    ro.xz *= Ra; ro.xy *= Rb;             \t\t\t\t// goto ellipsoid frame ( rotations )\n    rd.xz *= Ra; rd.xy *= Rb;\n    \n   vec3  eo = ro/halfAxis, ed = rd/halfAxis;\t\t\t// goto sphere frame ( scaling by 1/R )\n    float A = dot(ed,ed),\t\t\t\t\t\t\t\t// solve ray - sphere intersection :\n          B = dot(ed,eo),\t\t\t\t\t\t\t\t// P = O+l.D & |P|²=1  =>  A.l² + 2B.l + C = 0\n          C = dot(eo,eo)-1.,\n          D = B*B-A*C;\n    if (D>=0.0) {\n        light.xz *= Ra; light.xy *= Rb;\n        light /= halfAxis;\n        light = normalize(light);\n        vec3 P = ro + rd*(-B-sqrt(D))/A,\t\t\t\t// hit point ( in ellipsoid frame )\n             N = normalize(P / (halfAxis*halfAxis) ),   // normal at hit point\n             H = normalize(light-rd);         \t\t\t// half-vector\n                      \n        fragColor = vec4(1.0, 0.0, 0.0, 1.0);   \t\t// color\n        fragColor =  (.2 + .8* clamp(dot(N,light),0.,1.) ) *fragColor;   // ambiant & diffuse\n        fragColor = round(fragColor * 16.0)/16.0;\n        fragColor = mix(fragColor,baseColor, smoothstep(0.1,0.0,D*dot(halfAxis, halfAxis)));\n    }\n}\n    \n    ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}