{
    "Shader": {
        "info": {
            "date": "1724786053",
            "description": "https://v0.dev/chat/V6ZGKOgVHQr 7 iterations for this result",
            "flags": 0,
            "hasliked": 0,
            "id": "4fSfDR",
            "likes": 1,
            "name": "Futuristic Shader Design",
            "published": 3,
            "tags": [
                "aigenerationv0dev"
            ],
            "usePreview": 0,
            "username": "Sergeindamix",
            "viewed": 76
        },
        "renderpass": [
            {
                "code": "precision highp float;\nuniform vec2 resolution;\n#define time iTime\n\n#define PI 3.14159265359\n\nfloat random(vec2 st) {\n  return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nvec2 rotate(vec2 uv, float angle) {\n  mat2 rotation = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n  return uv * rotation;\n}\n\nfloat sdBox(vec2 p, vec2 b) {\n  vec2 d = abs(p) - b;\n  return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\nfloat sdCircle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nfloat opSmoothUnion(float d1, float d2, float k) {\n  float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);\n  return mix(d2, d1, h) - k * h * (1.0 - h);\n}\n\nvec3 neonPalette(float t) {\n  vec3 a = vec3(0.5, 0.5, 0.5);\n  vec3 b = vec3(0.5, 0.5, 0.5);\n  vec3 c = vec3(1.0, 1.0, 1.0);\n  vec3 d = vec3(0.0, 0.33, 0.67);\n  return a + b * cos(6.28318 * (c * t + d));\n}\n\nfloat sdHexagon(vec2 p, float r) {\n  const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n  p = abs(p);\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  return length(p)*sign(p.y);\n}\n\nfloat neonWalls(vec2 uv) {\n  float wallPattern = 0.0;\n  for (float i = 0.0; i < 3.0; i++) {\n      vec2 p = rotate(uv, time * (0.1 + i * 0.05) + i * PI / 3.0);\n      float wall = sdBox(p, vec2(0.8 + sin(time + i) * 0.2, 0.1));\n      wallPattern = opSmoothUnion(wallPattern, wall, 0.1);\n  }\n  return wallPattern;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy)/min(iResolution.x, iResolution.y);\n\n  // Neon walls\n  float walls = neonWalls(uv);\n  vec3 wallColor = neonPalette(length(uv) + time * 0.2);\n  vec3 finalColor = wallColor * (1.0 - smoothstep(0.0, 0.01, abs(walls)));\n\n  // Neon lights\n  for (float i = 0.0; i < 5.0; i++) {\n      vec2 p = rotate(uv, time * 0.2 + i * PI / 2.5);\n      p += vec2(sin(time * 0.5 + i), cos(time * 0.7 + i)) * 0.3;\n      float d = sdHexagon(p, 0.1 + sin(time + i) * 0.05);\n      vec3 lightColor = neonPalette(i / 5.0 + time * 0.1);\n      finalColor += lightColor * (0.01 / (abs(d) + 0.01)) * (1.0 + sin(time * 3.0 + i * PI) * 0.5);\n  }\n\n  // Add some noise for texture\n  finalColor += vec3(random(uv + time)) * 0.05;\n\n  // Vignette effect\n  float vignette = smoothstep(1.2, 0.5, length(uv));\n  //finalColor *= vignette;\n\n  fragColor = vec4(finalColor, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}