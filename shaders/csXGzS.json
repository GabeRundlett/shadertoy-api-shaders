{
    "Shader": {
        "info": {
            "date": "1666284776",
            "description": "crude particle simulation with some stuff distortions and stuff (for loop isn't ideal)",
            "flags": 32,
            "hasliked": 0,
            "id": "csXGzS",
            "likes": 19,
            "name": "Particle Thingies",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 297
        },
        "renderpass": [
            {
                "code": "// all of this is a mess\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragCoord.y += 2. * cos(uv.x * 10. + iTime);\n    fragCoord.x += 2. * cos(0.04 * fragCoord.y + iTime);\n    vec3 col = texelFetch(iChannel0, ivec2(fragCoord), 0).rgb;\n    //col += (0.125 + 0.025 * thc(2., 150. * uv.y - 4. * iTime)) * exp(-4. * length(uv));\n    //col *= 1. + 0.2 *  thc(4., 20. * log(length(uv)) - iTime);\n    \n    col = 1.25 * pow(col, vec3(1.5)); \n    col = sqrt(col);\n   \n    col /= cosh(2.5 * length(uv));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Maths and stuff:\n// http://jwilson.coe.uga.edu/EMAT6680Su06/Swanagan/Assignment7/BSAssignment7.html\n\n#define pi 3.14159\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nvec4 cell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 );\n}\n\nvec4 cell2(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel1, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel1, p, 0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy;\n    vec2 uv = (fragCoord - 0.5 * res) / res.y;\n    float t = float(iFrame) / 60.;\n    //uv.x += 0.5 - 0.05 * t;\n    //uv *= rot(t);\n    ivec2 f = ivec2(fragCoord);\n    vec4 cel = cell(f);\n    \n    float xp = exp(-0.2 * t);\n    float k = xp / res.y;\n    \n    vec3 col = cel.rgb;\n    \n    for (int i = 0; i < 30; i++) {\n        float io = 2. * pi * float(i) / 20.;\n        vec2 p = (cell2(ivec2(i,0)).rg - 0. * res) / res.y;\n\n        float r = 0.02 + 0.012 * thc(12., 5. * t + io);\n        r *= xp;\n        float d = length(uv - p);\n        float s = smoothstep(-k, k, 2. * k - abs(d - r));\n        float s2 = smoothstep(-k, k, -2. * k - d + r);\n\n        col -= xp * vec3(clamp(s2, 0., 1.));\n        col = clamp(col, 0., 1.);\n        col += xp * 0.25 * vec3(0.5 + 0.5 * sin(10. * t + io),\n                           0.6,\n                           0.5) \n                    * vec3(clamp(s, 0., 1.));\n        col = clamp(col, 0., 1.);\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 cell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 );\n}\n\n#define sc 0.5\n\nvoid mainImage( out vec4 fragColor, in vec2 f )\n{\n    //rg == xy pos, ba == xy vel\n    vec4 col = vec4(0);\n\n    if (iFrame == 0) {\n        col.rg = 0.5 * f;\n    }\n                \n    float t = float(iFrame) / 60.;\n    col = cell(ivec2(f));\n    float h1 = h21(vec2(f.x + .01 * t, f.y - .015 * t));\n    float h2 = h21(vec2(f.y + .02 * t, f.x + f.y + .51 * t));\n    col.b += sc * (h1 - 0.5);\n    col.a += sc * (h2 - 0.5);\n    col.ba *= 0.99;\n    col.r += col.b;\n    col.g += col.a;\n\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define thc(a,b) tanh(a*cos(b))/tanh(a)\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}