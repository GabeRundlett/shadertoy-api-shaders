{
    "Shader": {
        "info": {
            "date": "1660245290",
            "description": "cccccccc",
            "flags": 0,
            "hasliked": 0,
            "id": "fltcRf",
            "likes": 21,
            "name": "Day 966",
            "published": 3,
            "tags": [
                "voxel",
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 581
        },
        "renderpass": [
            {
                "code": "\nconst float pixelScale = 70.;\n\nvec3 camPos;\n\nfloat map(vec3 p){\n    p *= 1./pixelScale;\n    float n = noise(p*(2. + 5.*floor(fract(iTime*0.05)*3.)),iTime);\n    float cbox = -length(p-camPos) +0.5;\n    p.y += 0.1 + n * 0.3;\n    \n   \n    p.y += sin(p.x + cos(p.z*2.)*4.  + cos(p.z*2.)*4.)*0.2;\n    \n    float d = p.y;\n    \n    d = min(d, abs(p.y -1.8) - 0.1*sin(iTime));\n    \n    //d = max(d, (p.y+0.4));\n    \n    //d -= dot(p.xz,p.xz)*0.01;\n    d = max(d,cbox);\n    \n    d = max(d,-length(p - vec3(0,sin(iTime*0.5 + sin(iTime*0.5)),0)) +0.4);\n    return d;\n}\n\nfloat mapQuantized(vec3 p){\n    return map(floor(p));\n}\n\nvec3 getRd(vec3 ro, vec3 target, vec2 uv){\n    vec3 dir = normalize(target - ro);\n    vec3 right = normalize(cross(vec3(0,1,0),dir));\n    vec3 up = normalize(cross(dir,right));\n    return normalize(dir + right*uv.x + up * uv.y);\n}\n\n\nvec3 getNormal(vec3 p){\n    vec2 t= vec2(0.001,0.);\n    return normalize(vec3(\n        map(p + t.xyy) - map(p - t.xyy),\n        map(p + t.yxy) - map(p - t.yxy),\n        map(p + t.yyx) - map(p - t.yyx)\n    ));\n}\n\n\nvec3 getNormalQuantized(vec3 p, int hitAxis){\n    vec2 t= vec2(0.4,0.);\n    vec3 hitVec = vec3(0);\n    hitVec[hitAxis] = 1.;\n    hitVec = mix(hitVec,vec3(1),0.3);\n    return normalize(vec3(\n        mapQuantized(p + t.xyy*hitVec) - mapQuantized(p - t.xyy*hitVec),\n        mapQuantized(p + t.yxy*hitVec) - mapQuantized(p - t.yxy*hitVec),\n        mapQuantized(p + t.yyx*hitVec) - mapQuantized(p - t.yyx*hitVec)\n    ));\n}\n\nvoid mainImage( out vec4 C, vec2 U){\n    vec2 uv = (U-0.5*R.xy)/R.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0);\n    \n    vec2 muv = iMouse.xy/R.xy;\n    float rotEnv = (iTime + sin(iTime + sin(iTime*0.7)*0.4)*0.4)*0.2;\n    ro.xz = vec2(cos(rotEnv +muv.x*pi),sin(rotEnv +muv.x*pi));\n    ro.y = 0.9;\n    \n    ro.y += sin(iTime)*0. - muv.y*2. + 0.;\n    \n    camPos = ro;\n    ro *= pixelScale;\n    \n    //ro = floor(ro); // truley amazine\n    vec3 p = ro;\n    \n    \n    vec3 rd = getRd(ro, sin(vec3(3,2,1)*iTime*0.1)*pixelScale*0.2,uv);\n    \n    float t = 0.;\n    bool hit = false;\n    \n    \n    int hitAxis = 0;\n    \n\n    float fZ;\n    float fX;\n    float fY;\n\n    float mn = 100.;\n    \n    // voxel march\n    {\n\n        // basic trigonometry used to calculate the step size in each dir.\n        // sin(angle) = opposite/hypotenuse\n        // hypotenuse = 1./sin(angle)\n        \n        float zHypot;\n        float xHypot;\n        float yHypot;\n        \n        {\n            float zAngle = atan(rd.x/rd.z);\n            if(rd.z < 0.)\n                zAngle *= -1.;\n            if(rd.x < 0.)\n                zAngle *= -1.;\n\n            zHypot = 1./sin(zAngle);\n        }\n        {\n            float xAngle = atan(rd.z/rd.x);\n            if(rd.z < 0.)\n                xAngle *= -1.;\n            if(rd.x < 0.)\n                xAngle *= -1.;\n\n            xHypot = 1./sin(xAngle);\n        }\n        \n        {\n            float yAngle = acos(rd.y);\n            yHypot = 1./sin(yAngle); \n        }\n        \n            \n\n        \n        for(float i = 0.; i < 1414.; i++){\n            vec3 fracP = fract(p);\n            \n            float d = map(floor(p));\n            \n            if(d < 0.){\n                hit = true;\n                break;\n            }            \n            \n            if(rd.z < 0. && fracP.z != 0.){\n                fracP.z = 1. - fracP.z;\n            }\n            if(rd.x < 0. && fracP.x != 0.){\n                fracP.x = 1. - fracP.x;\n            }\n            if(rd.y < 0. && fracP.y != 0.){\n                fracP.y = 1. - fracP.y;\n            }\n            \n            const float overStepFac = 1.004;\n            fZ = xHypot*(overStepFac-fracP.z);\n            fX = zHypot*(overStepFac-fracP.x);\n            fY = yHypot*(overStepFac-fracP.y);\n            \n            vec3 op = p;\n            \n            \n            p += (min(min(fZ,fX),fY)) * rd;\n            \n        }    \n\n    }\n    \n    if(fZ < mn){\n        mn = fZ;\n        hitAxis = 2;\n    }if(fX < mn){\n        mn = fX;\n        hitAxis = 0;\n    }if(fY < mn){\n        mn = fY;\n        hitAxis = 1;\n    }    \n    \n    col = vec3(1);\n    \n    \n    #define ao(p,n,d,amt) mix(1.,clamp(map(p+n*d)/d/pixelScale,0.,1.),amt)\n    \n    // sghading\n    if(hit){\n        vec3 gn;\n        \n        vec3 nq = getNormalQuantized(p, hitAxis);\n        vec3 n = getNormal(p);\n        \n        col = sin(vec3(1,2,3) + n.x*1111.\n            //+ float(fract(iTime*0.1) < 0.25)*(dot(p.xz,p.xz)*0.01 + iTime*10.)\n            )*1. + 1.;\n        col *= 1.4;\n        \n        vec3 q = abs(fract(p) - 0.5)*2.;\n        q[hitAxis] = 0.;\n        col = mix(col,col*-(0. + float(fract(iTime*0.1) < 0.5)),max(q.x,max(q.y,q.z)));\n        col = abs(col);\n        float AO = ao(p + nq*0.,nq,0.6*pixelScale,0.9)\n            * ao(p + nq*0.,n,0.1*pixelScale,0.4)\n            * ao(p + nq*0. + vec3(0.5,0.4,0)*pixelScale,n,1.*pixelScale,.4)\n            * ao(p,normalize(mix(n,vec3(1,1,0),1.)),1.4*pixelScale,0.8)\n            //* ao(p + nq*0. + vec3(0,1,0),n,3.4*pixelScale,0.4)\n            ;\n        col *= \n            max(dot(n,normalize(vec3(1,1.,0))),0.)*0.4*AO \n            + 0.4*AO\n            //*ao(p,n,0.1*pixelScale,0.5)\n            //*ao(p,n,1.9*pixelScale,0.5)\n            ;\n        col *= smoothstep(-30.5,40.,p.y);\n        col *= 1.3;\n    }\n    \n    \n    col = mix(col, vec3(1),\n        smoothstep(1.,5.,length((ro-p)/pixelScale))\n        \n        );\n    \n    col *= 1. - dot(uv,uv)*0.7;\n    C = vec4(col,1.0);\n    \n    C = abs(C);\n    C = 1.-exp(-C);\n    C = pow(C,vec4(0.454545));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi acos(-1.)\n#define R iResolution.xy\n#define iTime (iTime + 7.)\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n// cyclic noise by nimitz. i have a tutorial on it on shadertoy\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\nfloat noise(vec3 p_, float t){\n    float n = 0.;\n    float amp = 1.;\n    vec4 p = vec4(p_,11.+ (t + sin(t))*0.4);\n    p.xy *= rot(1.4);\n    p.x *= 3.;\n    for(float i = 0.; i < 2.; i++){\n        p.yz *= rot(.5);\n        p.xz *= rot(2.5 + i);\n        p.wy *= rot(1.5-i);\n        p += cos(p*1. + vec4(3,2,1,1.) )*amp*.5;\n        n += dot(sin(p),cos(p))*amp;\n    \n        amp *= 2.4;\n        p *= 1.5;\n    }\n    \n    //n = n * 0.9;\n    //n = sin(n*2.);\n    return n;\n}\n\n\nfloat luma(vec4 color) {\n  return dot(color.rgb, vec3(0.299, 0.587, 0.114));\n}\nfloat luma(vec3 color) {\n  return dot(color.rgb, vec3(0.299, 0.587, 0.114));\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n// from iq\nvec3 hsv2rgbSmooth( in vec3 hsv )\n{\n    vec3 rgb = clamp( abs(mod(hsv.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\n\n\n\n    return hsv.z * mix( vec3(1.0), rgb, hsv.y);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}