{
    "Shader": {
        "info": {
            "date": "1541413892",
            "description": "Felt like trying to mimic halftone printing style you can see in newspapers and cheap books.\n\nhttps://en.wikipedia.org/wiki/Halftone",
            "flags": 0,
            "hasliked": 0,
            "id": "XlcBWj",
            "likes": 5,
            "name": "Halftone printing style",
            "published": 3,
            "tags": [
                "2d",
                "halftone",
                "dots",
                "comic",
                "print"
            ],
            "usePreview": 0,
            "username": "Gaktan",
            "viewed": 714
        },
        "renderpass": [
            {
                "code": "#define DIST_INSTEAD_OF_CIRCLES\t\t0\n#define SMOOTH\t\t\t\t\t\t1\n#define CONTROL_ROTATION\t\t\t1\n#define CONTROL_SCALE\t\t\t\t0\n\nvec4 RGBtoCMYK(in vec3 col)\n{    \n    float K = 1.0 - max(col.r, max(col.g, col.b));\n    //vec3 CMY = (1.0 - col - K) / (1.0 - K);\n    vec3 CMY = col / (K - 1.0) + 1.0;\n    \n    return vec4(CMY, K);\n}\n\nfloat circle(vec2 uv, vec2 center, float size)\n{\n    vec2 d = uv - center;\n#if !DIST_INSTEAD_OF_CIRCLES\n    return step(dot(d,d), size*size);\n#else\n    return dot(d,d)*(size*5.0);\n#endif    \n}\n\nvec2 rot(in vec2 uv, in float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    mat2 rot_mat = mat2(c, -s, s, c);\n    \n    return rot_mat * uv;\n}\n\nfloat degToRad(float deg)\n{\n    return deg * 0.0174533;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    \n#if CONTROL_SCALE\n    float SCALE = 0.005 / (iMouse.x / iResolution.x);\n#else    \n    float SCALE = 1.0 / 100.0;\n#endif    \n    \n    vec2 texUV = uv * vec2(0.5, 1.0);\n#if !SMOOTH    \n    texUV = floor(texUV / SCALE) * SCALE;\n#endif\n    vec3 col = texture(iChannel0, texUV).rgb;\n    \n    // Not sure why, but we need to convert from sRGB to have correct colors\n    col = pow(col, vec3(2.2));\n       \n    // Time varying pixel color\n    //col = 0.5 + 0.5*cos(iTime+texUV.xyx+vec3(0,2,4));\n    \n    vec4 cmyk = RGBtoCMYK(col);\n    \n    vec4 angles1 = vec4(15.0, 75.0, 0.0, 45.0);\n    vec4 angles2 = vec4(105.0, 75.0, 90.0, 15.0);\n    vec4 angles3 = vec4(15.0, 45.0, 0.0, 75.0);\n    vec4 angles4 = vec4(165.0, 45.0, 90.0, 105.0);\n    \n#if CONTROL_ROTATION\n    vec4 angles12 = mix(angles1, angles2, iMouse.x / iResolution.x);\n    vec4 angles34 = mix(angles3, angles4, iMouse.x / iResolution.x);\n    vec4 angles = mix(angles12, angles34, iMouse.y / iResolution.y);\n#else\n    vec4 angles = angles1;\n#endif    \n    \n    const float blackMul = 0.58;\n    const float colorMul = 0.5;\n    const vec4 mul = vec4(colorMul, colorMul, colorMul, blackMul);\n    \n    vec3 colors[4] = vec3[4]\n    (\n        vec3(1.0, 0.0, 0.0),\n        vec3(0.0, 1.0, 0.0),\n        vec3(0.0, 0.0, 1.0),\n        vec3(1.0)\n    );\n    \n    vec3 finalColor = vec3(1.0);\n    for (int i = 0; i < 4; i++)\n    {\n        vec2 cellUV = mod(rot(uv, degToRad(angles[i])), SCALE);\n        cellUV *= 1.0 / (SCALE);\n        \n        finalColor -= circle(cellUV, vec2(0.5), cmyk[i] * mul[i]) * colors[i];\n    }\n\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n    //fragColor = vec4(cmyk);\n    //fragColor = vec4(mix(pow(col, vec3(1.0/2.2)), finalColor, iMouse.x/iResolution.x), 1.0);\n    fragColor = vec4(finalColor, 1.0);    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}