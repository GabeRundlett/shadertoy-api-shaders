{
    "Shader": {
        "info": {
            "date": "1715014900",
            "description": "water",
            "flags": 0,
            "hasliked": 0,
            "id": "XcySDz",
            "likes": 10,
            "name": "water, just testing stuff",
            "published": 3,
            "tags": [
                "water"
            ],
            "usePreview": 0,
            "username": "ianertson",
            "viewed": 233
        },
        "renderpass": [
            {
                "code": "#define R iResolution\n#define T (iTime)\n\nvec3 hash33(vec3 ip) {\n    uvec3 p = floatBitsToUint(ip);\n    uvec3 k = ~p;\n    p ^= p << 17U; p ^= p >> 13U;\n    p ^= p << 5U;\n    p += ((k * 512U) >> 7U) * 34125U;\n    p.y += p.x ^= k.z ^= p.z;\n    p.z += p.y ^= k.x ^= p.x;\n    p.x += p.z ^= k.y ^= p.y;\n    p *= 501304U;\n    return vec3(p) / float(0xFFFFFFFFU);\n}\n\nvec3 noise33(vec3 p) {\n    vec3 id = floor(p);\n    vec3 lv = fract(p);\n    lv = lv*lv*(3.0-2.0*lv);\n    return mix(mix(\n        mix(hash33(id + vec3(0, 0, 0)), hash33(id + vec3(1, 0, 0)), lv.x),\n        mix(hash33(id + vec3(0, 1, 0)), hash33(id + vec3(1, 1, 0)), lv.x),\n        lv.y\n    ), mix(\n        mix(hash33(id + vec3(0, 0, 1)), hash33(id + vec3(1, 0, 1)), lv.x),\n        mix(hash33(id + vec3(0, 1, 1)), hash33(id + vec3(1, 1, 1)), lv.x),\n        lv.y\n    ), lv.z);\n}\n\nvec3 noise33(vec3 p, float freq, int oct) {\n    vec3 n = vec3(0.0);\n    float amp = 1.0;\n    float div = 0.0;\n    \n    for (int i = min(iFrame, 0); i < oct; i++) {\n        n += amp * noise33(p * freq);\n        div += amp;\n        amp *= 0.5;\n        freq *= 2.0;\n    }\n    \n    return n / div;\n}\nfloat sigmoid(float x) {\n  return 1.0f / (1.0 + exp(-x));\n}\nvec3 sigmoid(vec3 v) {\n  return vec3(sigmoid(v.x), sigmoid(v.y), sigmoid(v.z));\n}\nmat2 rot(float a) { float c = cos(a); float s = sin(a); return mat2(c, s, -s, c); }\n\nvec3 wave(in vec3 p, float freq, int oct, in float eps, vec4 m){\n  vec3 a = noise33(p, freq, oct);\n  \n  float di = 0.0;\n  \n  if (m.z > 0.001) {\n      vec3 n = normalize(a*2.0-1.0);\n      vec2 uv = mix(mix(p.xy, p.yz, abs(dot(n, vec3(1, 0, 0)))), p.xz, abs(dot(n, vec3(0, 1, 0))));\n      di = dot(uv, m.xy*freq);\n  }\n  \n  vec2 e = vec2(eps + (di*eps*2.0), 0.0);\n\n  return abs(a.x - vec3(\n      noise33(p - e.xyy, freq, oct).x,\n      noise33(p - e.yxy, freq, oct).x,\n      noise33(p - e.yyx, freq, oct).x\n  ));\n   \n}\n  \n\n\nvoid mainImage(out vec4 o, in vec2 fc)\n{\n    vec3 col = vec3(0.0);\n    vec2 uv = (fc.xy - 0.5 * R.xy) / R.y;\n    vec4 m = vec4((iMouse.xy - 0.5 * R.xy) / R.y, iMouse.zw);\n    \n    vec3 rd = normalize(vec3(uv.xy, 1.0));\n    float eps = 0.06;\n    float freq = 1.6;\n    int oct = 6;\n    float t = T*0.1;\n    vec3 sh = vec3(sin(t), cos(t), 1.0);\n    \n    vec3 w = \n     wave(rd + sh.xyz + wave(rd + sh.yzx + wave(rd + sh.zxy,\n         freq, oct, eps, m),\n         freq, oct, eps, m),\n         freq, oct, eps, m);\n    \n    vec3 N = normalize(w);\n    vec3 L = normalize(vec3(1, 2, -1));\n    vec3 ref = reflect(N, L);\n    float VdotR = max(0.0, dot(rd, ref));\n    float spec = pow(VdotR, 64.0)*2.;\n    float NdotL = max(0.01, dot(N, L));\n    vec3 dif = vec3(0.005, 0.39, 0.76);\n    col += NdotL * (spec + dif);\n    col = col*col;\n    col += col*col;\n    col += 0.25*sigmoid(20.0*col-3.);\n    col = max(vec3(0.0), col);\n    col = pow(col, vec3(1.0 / 2.2));\n    \n    o = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}