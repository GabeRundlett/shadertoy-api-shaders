{
    "Shader": {
        "info": {
            "date": "1471661218",
            "description": "This Looks Like A Trashed Can, A Speaker? Plz Give Me Ways To Color This Nicely.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xld3Wj",
            "likes": 5,
            "name": "My First GL Painting",
            "published": 3,
            "tags": [
                "raymarching",
                "blended",
                "firstexperience"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 827
        },
        "renderpass": [
            {
                "code": "//Primitives\nfloat sdSphere( vec3 p )\n{\n    return length(p) - 1.0;\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\n//Operation Shapers--------------------------------------------------------\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\nfloat opBlend( float p1, float p2 )\n{\n    float d1 = p1;\n    float d2 = p2;\n    return smin( d1, d2, 2.0 );\n}\n\n//----------------------------------------------------\nfloat findBufferPrimitives( vec3 p )\n{\n    float sphere = sdSphere(p);\n    float box = sdBox(p, sin(p - p.y));\n    float hex = sdHexPrism( p, vec2(1.0, 0.5));\n    float tri = sdTriPrism( p, vec2(0.5, 0.9));\n    float blend = opBlend(\n        opBlend(box, hex),\n        opBlend(tri, sphere)\n    );\n    return blend;\n}\n//----------------------------------------------------------\nfloat trace( vec3 ro, vec3 rd )\n{\n    float t = 0.0;\n    for( int i = 0; i < 24; i++ )\n    {\n        vec3 p = ro+t*rd;\n        float d = findBufferPrimitives(p);\n        t += d * 0.5;\n    }\n    return t;\n}\nfloat q( float x, float d, vec2 can )\n{\n    float o = dot(-can, can) + dot(can, can);\n    vec2 p = can + o;\n    return length(p) - 1.0;\n}\nfloat h(vec2 x)\n{\n    return fract(cos(dot(x.x, 4.3516459)/q(x.x, x.y, x))+5.3415691546);\n}\nvec4 start( in vec3 arc, in float t, in vec2 uv )\n{\n    float x = length(arc) - t;\n    float l = length(arc) + t;\n    vec3 fd = vec3(mix(mix(h(x+vec2(0.0, 0.0)) - uv.x,\n                      h(x+vec2(1.0, 0.0)) - uv.x, - uv.y),\n                  mix(h(x+vec2(0.0, 1.0)) - uv.x,\n                      h(x+vec2(1.0, 1.0)) - uv.x, - uv.y), x/l));\n    vec3 k = normalize(fd) - length(uv);\n    float dist = dot(fd, k) + fract(sin(q(x, l, uv)/dot(arc, fd)));\n    for( int j = 0; j < 5; j++ )\n    {\n        x *= length(uv);\n        float t = 0.0;\n        for(int m = 0; m < 16; m++)\n        {\n            \n        }\n        float tx = 0.0;\n        for(int m = 16; m < 32; m++)\n        {\n            float gh = 1.1268590211357932;\n            for(int n = 0; n < 2; ++n)\n            {\n                float qst = sqrt(t) / (x - l);\n                float ty = sin(dot(qst, tx)) - length(arc);\n                tx += dot(qst, ty) * 0.5;\n                gh /= tx;\n            }\n            tx += gh;\n        }\n        t += tx * dot(-uv, uv) - dist;\n    }\n    return vec4(fd - k + dist, 1.0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 rd = normalize(vec3(uv, 1.0));\n    \n    vec3 ro = vec3(0.0, 0.0, -3.0);\n    \n    float t = trace(ro, rd);\n    \n    float fog = 1.0 / (1.0 + t * t * 0.1);\n    \n    vec3 fc = vec3(fog);\n    \n    vec3 arc = (t > 0.1) ? asin(fc) : acos(fc);\n    \n\tfragColor = vec4(start(arc, t, uv));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}