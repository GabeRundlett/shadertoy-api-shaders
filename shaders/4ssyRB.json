{
    "Shader": {
        "info": {
            "date": "1488743468",
            "description": "+ shadows, in the style of Jen Stark's paper cut  [url]http://www.jenstark.com/[/url]\n\nBest seen in fullscreen",
            "flags": 0,
            "hasliked": 0,
            "id": "4ssyRB",
            "likes": 19,
            "name": "isovalues 2c",
            "published": 3,
            "tags": [
                "noise",
                "contour"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 984
        },
        "renderpass": [
            {
                "code": "// analytical derivatives version of https://www.shadertoy.com/view/MdfcRS\n\n// --- noise from procedural pseudo-Perlin ( adapted from IQ ) ---------\n\nfloat noise3( vec3 x , out vec2 g) {\n    vec3 p = floor(x),f = fract(x),\n        F = f*f*(3.-2.*f);  // or smoothstep     // to make derivative continuous at borders\n\n#define hash3(p)  fract(sin(1e3*dot(p,vec3(1,57,-13.7)))*4375.5453)        // rand\n    \n    float v000 = hash3(p+vec3(0,0,0)), v100 = hash3(p+vec3(1,0,0)),\n          v010 = hash3(p+vec3(0,1,0)), v110 = hash3(p+vec3(1,1,0)),\n          v001 = hash3(p+vec3(0,0,1)), v101 = hash3(p+vec3(1,0,1)),\n          v011 = hash3(p+vec3(0,1,1)), v111 = hash3(p+vec3(1,1,1));\n    \n    g.x = 6.*f.x*(1.-f.x)                        // gradients\n          * mix( mix( v100 - v000, v110 - v010, F.y),\n                 mix( v101 - v001, v111 - v011, F.y), F.z);\n    g.y = 6.*f.y*(1.-f.y)\n          * mix( mix( v010 - v000, v110 - v100, F.x),\n                 mix( v011 - v001, v111 - v101, F.x), F.z);\n    \n    return mix( mix(mix( v000, v100, F.x),       // triilinear interp\n                    mix( v010, v110, F.x),F.y),\n                mix(mix( v001, v101, F.x),       \n                    mix( v011, v111, F.x),F.y), F.z);\n}\n\n\nfloat noise(vec3 x, out vec2 g) {     // pseudoperlin improvement from foxes idea \n    vec2 g0,g1;\n    float n = (noise3(x,g0)+noise3(x+11.5,g1)) / 2.;\n    g = (g0+g1)/2.;\n    return n;\n}\n\n\nvoid mainImage( out vec4 O, vec2 U ) // ------------ draw isovalues\n{\n    vec2 R = iResolution.xy;\n    U *= 8./R.y;\n    vec2 g;\n    float n = noise(vec3(U,.1*iTime), g),    \n          v = sin(6.28*10.*n);\n    //g = vec2(dFdx(n),dFdy(n));\n    //O = vec4( sin(10.*atan(g.y,g.x)), v, 0,0); return; // debug\n    g *= 6.28*10.*cos(6.28*10.*n) * 8./R.y;\n    float d = (abs(g.x)+abs(g.y));\n  //v = tanh(2.*abs(v) / d); // better antialiasing than smoothstep\n    v = tanh(min(2.*abs(v) / d, 10.)); // some systems dislike tanh(big)\n    n = floor(n*20.)/20.;\n\tO = v * mix(vec4(1),.5+.5*cos(12.*n+vec4(0,2.1,-2.1,0)),1.); // vec4(n); \n    \n    // shadows\n    float n2 = noise(vec3(U+.05,.1*iTime), g);\n    g *= 6.28*10.*cos(6.28*10.*n) * 8./R.y;\n    d = (abs(g.x)+abs(g.y));\n    if (n>n2) O *= exp(-(n-n2)/d*13.*pow(1e3/R.y,1.5));  // 1.5: perceptually better than 1 at small resolutions\n  //if (ceil(n2*20.)== floor(n*20.)) O *= exp(-(n-n2)/d*10.*1e3/R.y);  // O -= -(n-n2)*20.;\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}