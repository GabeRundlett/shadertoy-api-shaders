{
    "Shader": {
        "info": {
            "date": "1494934030",
            "description": "Simple toon shader using hsv quantization, median and sobel filters.",
            "flags": 0,
            "hasliked": 0,
            "id": "ldsfzH",
            "likes": 23,
            "name": "Simple Toon",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "wizgrav",
            "viewed": 2408
        },
        "renderpass": [
            {
                "code": "// median filter by Morgan McGuire\n\n#define s2(a, b)\t\t\t\ttemp = a; a = min(a, b); b = max(temp, b);\n#define mn3(a, b, c)\t\t\ts2(a, b); s2(a, c);\n#define mx3(a, b, c)\t\t\ts2(b, c); s2(a, c);\n\n#define mnmx3(a, b, c)\t\t\tmx3(a, b, c); s2(a, b);                                   // 3 exchanges\n#define mnmx4(a, b, c, d)\t\ts2(a, b); s2(c, d); s2(a, c); s2(b, d);                   // 4 exchanges\n#define mnmx5(a, b, c, d, e)\ts2(a, b); s2(c, d); mn3(a, c, e); mx3(b, d, e);           // 6 exchanges\n#define mnmx6(a, b, c, d, e, f) s2(a, d); s2(b, e); s2(c, f); mn3(a, b, c); mx3(d, e, f); // 7 exchanges\n\nmat3 sx = mat3( \n    1.0, 2.0, 1.0, \n    0.0, 0.0, 0.0, \n   -1.0, -2.0, -1.0 \n);\n\nmat3 sy = mat3( \n    1.0, 0.0, -1.0, \n    2.0, 0.0, -2.0, \n    1.0, 0.0, -1.0 \n);\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 toon(vec2 uv) {\n\tvec4 texel = texture(iChannel0, uv);\n    vec3 c = texel.rgb;\n    vec3 f = vec3(3.,5.,6.);\n    c = rgb2hsv(c);\n    c = floor(c * f) / f;\n    return c;\n}\n\nvec3 median(vec2 uv, vec2 tsize) {\n\n  vec3 v[9];\n  mat3 I; \n\n  for(int dX = -1; dX <= 1; ++dX) {\n      for(int dY = -1; dY <= 1; ++dY) {\n      \tvec2 offset = vec2(float(dX), float(dY));\n\t\tvec3 c = toon(uv.xy + offset * tsize);\n      \tv[(dX + 1) * 3 + (dY + 1)] = c;\n        I[dX + 1][dY + 1] = c.x * c.y * c.z;\n        \n    }\n  }\n\n  vec3 temp;\n\tvec3 orig = v[4];\n  // Starting with a subset of size 6, remove the min and max each time\n  mnmx6(v[0], v[1], v[2], v[3], v[4], v[5]);\n  mnmx5(v[1], v[2], v[3], v[4], v[6]);\n  mnmx4(v[2], v[3], v[4], v[7]);\n  mnmx3(v[3], v[4], v[8]);\n    \n  float gx = dot(sx[0], I[0]) + dot(sx[1], I[1]) + dot(sx[2], I[2]); \n  float gy = dot(sy[0], I[0]) + dot(sy[1], I[1]) + dot(sy[2], I[2]);\n\n  float g = sqrt(pow(gx, 2.0)+pow(gy, 2.0));\n  return mix(v[4], orig, g) - g;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n\tvec3 c = median(uv, 1.6 / iResolution.xy);\n    c = hsv2rgb(c); \n    fragColor = vec4(c,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}