{
    "Shader": {
        "info": {
            "date": "1589724055",
            "description": "A prototype for playing maximally even musical scales (of 12 tones, but you can choose other equal divisions).",
            "flags": 32,
            "hasliked": 0,
            "id": "tdBfzm",
            "likes": 8,
            "name": "Proto maximally even5b",
            "published": 3,
            "tags": [
                "music",
                "b",
                "prototype",
                "scales",
                "musical",
                "even",
                "maximally",
                "five"
            ],
            "usePreview": 0,
            "username": "Yambam",
            "viewed": 571
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor = texture(iChannel0,uv);\n    //f = 1.-smoothstep(f,f+0.01, vec4(1));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float TAU = 6.28318530718;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n//  Ambifix is a \"notation\" I (@Yambam) invented, my goal is to make learning and making use of maths more intuitive.\n//  Comments like this these are statements in a hypothetical shader language based on ambifix, with the values omitted.\n    \n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mouse = vec2(iMouse.x,iMouse.y)/iResolution.xy;\n    vec2 uv_t = uv; //.5*uv+.5*mouse;\n    //uv_t = vec2(pow(abs(uv_t.x-.5),1.3)*8.*sign(uv_t.x-.5)+.5,uv_t.y);\n    \n    //float x = iResolution.x/iResolution.y * (1.*uv.x-.5) + .5;\n    float x = mod(.5+2.*uv_t.x,1.);\n    \n    float ed = 12.+floor(24.*mouse.x); //floor(1. + 35. * mouse.y); //sin(TAU/16. * iTime);\n    float n = ceil(ed*uv_t.y);\n    float nt = 1.+ed*uv_t.y-n;\n    float d = ed;\n    float t = -10000.;\n    float fr = mod(float(iFrame)/1.61803398875,ceil(n/(ed+1.-n))); //clamp((mouse.x-.25)*2.,0.,1.); //.5*min(3.,floor(iTime)); //1.*mod(1.*iTime,1.); //mod(8.*iTime,2.*d*d)-d*d;\n    vec2 sa = mod((-floor(floor(-x  * vec2(n+0.,n+1.)     + fr          )  * d     / vec2(n,n+1.)                   )  / d),       1. );\n//  float s =                      (*              *) (+    +) (floor) (*   *) (/              /) (floor) (negate) (/   /) (mod    )\n    float s = (1.-nt)*sa[0]+(nt)*sa[1];\n    \n    float a = mod((mod(s  - x,        1. )  + .5  ),     1. )  - .5;\n//  float a =            (-   -) (mod    ) (+    +) (mod    ) (-    -)\n    //a *= 50.;\n    //a = -log(abs(a))-3.; //*mouse.y);\n    //float t = a+2.5*sin(TAU/4.*iTime);\n    \n    float tn = 1.*(1.-500.*abs(a)); //+1.*sin(TAU/12.*iTime));\n    if (tn > t) {\n        t = tn;\n    }\n    //t = 1.+float(t>.95)-1.*t*t;\n    //t = clamp(t,       0.,1. );\n//  //t =         (clamp       )\n    vec3 colGrad = (1.  - uv.x  )  * vec3(1,.4,.4)     + uv.x  * vec3(.4,.4,1);\n//  vec3 colGrad =     (-      -) (*               *) (+      (*               *) +)\n    vec3 col = (1. - t  )  * colGrad     + t  * vec3(1,1,1);\n//                (-   -) (* colGrad *) (+   (*             *) +)\n    //vec3 col = t*vec3(1,1,1);\n    \n    vec4 colBuf = texture(iChannel0,uv);\n    //fragColor = vec4(col,1.);\n    fragColor = max(vec4(col,1.),colBuf);\n    if (iTime<.25\n    ||  iMouse.w>0.) { //.5*iResolution.y) {\n    \tfragColor = mix(fragColor,vec4(0,0,0,1),.0625);\n    \t//fragColor = mix(vec4(col,1.),vec4(0,0,0,1),.1);\n        //fragColor *= vec4(.99,.99,.99,1.);\n        //fragColor += vec4(.01,.01,.01,0.);\n    }\n    //fragColor *= 0.;\n    /*if (mod(x,1./d)<.005) {\n        fragColor.b = .2;\n    }*/\n    /*if (mod(iTime,2.)<.5) {\n        fragColor *= vec4(.9,.9,.9,1.);\n    }*/\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}