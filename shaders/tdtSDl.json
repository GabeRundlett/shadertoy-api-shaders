{
    "Shader": {
        "info": {
            "date": "1573164141",
            "description": "start pattern using lines ",
            "flags": 0,
            "hasliked": 0,
            "id": "tdtSDl",
            "likes": 10,
            "name": "Maths art",
            "published": 3,
            "tags": [
                "patterns"
            ],
            "usePreview": 0,
            "username": "ircss",
            "viewed": 388
        },
        "renderpass": [
            {
                "code": "#define PI             3.14159265359\n#define smoothing      0.006\n#define lineWidth      0.002\n\n#define mainLinesColor vec3(0.8,0.2,0.1)\n#define eLinesColor    vec3(0.6,0.8,0.1)\n#define dotColors      vec3(0.1,0.3,0.)\n\nvoid DrawPoint(vec2 pos, vec2 uv,float size, vec3 dotColor, inout vec3 sceneColor){\n    \n    float d    = distance(uv, pos);\n    sceneColor = mix(dotColor, sceneColor, smoothstep(size, size +smoothing, d));\n    \n}\n\nvoid DrawLine(float m, float c, vec2 uv, float size, vec3 lineColor, inout vec3 sceneColor){\n\n    vec2  xy   = vec2(uv.x, uv.x * m + c); \n    float d    = distance(xy, uv);\n    sceneColor = mix(lineColor, sceneColor, smoothstep(size, size + smoothing, d));\n    \n}\n\nvoid DrawVector(vec2 origin, vec2 vector, vec2 uv, float size, vec3 lineColor, inout vec3 sceneColor){\n    \n          uv  -= origin;\n    float v2   = dot(vector, vector);\n    float vUv  = dot(vector, uv);\n    vec2  p    = vector * vUv/v2;\n    float d    = distance(p, uv);\n    sceneColor = mix(lineColor, sceneColor, smoothstep(size, size +smoothing, d));\n    \n}\n\nvoid DrawHalfVector(vec2 origin, vec2 vector, vec2 uv, float size, vec3 lineColor, inout vec3 sceneColor){\n    \n          uv  -= origin;\n    float v2   = dot(vector, vector);\n    float vUv  = dot(vector, uv);\n    vec2  p    = vector * vUv/v2;\n    float d    = distance(p, uv);\n    float m    = 1. - step(0.,vUv/v2);\n    sceneColor = mix(lineColor, sceneColor, clamp(smoothstep(size, size +smoothing, d)+ m, 0. ,1.)); \n}\n\nvoid DrawHalfVectorWithLength(vec2 origin, vec2 vector, float len, vec2 uv, float size, vec3 lineColor, inout vec3 sceneColor){\n    \n          uv  -= origin;\n    float v2   = dot(vector, vector);\n    float vUv  = dot(vector, uv);\n    vec2  p    = vector * vUv/v2;\n    float d    = distance(p, uv);\n    float m    = 1. - step(0.,vUv/v2);\n          m   += step(len, vUv/v2);\n    sceneColor = mix(lineColor, sceneColor, clamp(smoothstep(size, size + smoothing, d)+ m, 0. ,1.)); \n}\n\nvoid DrawCurveSide(vec2 graphOrigin, vec2 uvCoordinate, float sideLengths, float numberOfPoints, vec2 side1, vec2 side2, inout vec3 col){\n        float side2Sqr        = dot(side2, side2);\n    \n    DrawHalfVectorWithLength( graphOrigin, normalize( side1), sideLengths,uvCoordinate, lineWidth, mainLinesColor, col);\n    DrawHalfVectorWithLength( graphOrigin, side2, sideLengths,uvCoordinate, lineWidth, mainLinesColor, col);\n    \n    \n\n    for(float i = 1. ; i < numberOfPoints; i ++){\n        \n        float f    = (i / numberOfPoints);\n        \n        vec2 point = graphOrigin + normalize(side1) * f*sideLengths;\n        \n        DrawPoint(point, uvCoordinate, 0.01,dotColors, col); \n        \n        // projection on the other line\n        \n             f        = 1.-f;\n        vec2 endPoint = graphOrigin + normalize(side2) * f*sideLengths;\n        \n\n        DrawPoint(endPoint , uvCoordinate,  0.01,dotColors, col); \n        \n        vec2 e    = point - endPoint; \n        \n        DrawHalfVectorWithLength(endPoint, normalize(e), length(e), uvCoordinate,lineWidth*0.1, eLinesColor, col);\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // ---------------------------------------------------------\n    // ---COORDINATE SETUP\n    \n    vec2  uvCoordinate    =  fragCoord/iResolution.xy;\n    float aCorreection    =  iResolution.x/iResolution.y;\n    \n          uvCoordinate.x *=  aCorreection;\n          uvCoordinate   -=  vec2(aCorreection/2., 0.5);\n    \n    // ---------------------------------------------------------\n\tvec3  col             = vec3(0.6,0.6,0.6);\n\n    \n    vec2  graphOrigin     = vec2(clamp(sin(iTime)*0.5, -1.,0.), 0.);\n    float sideLengths     = 0.5;\n    vec2  side1           = vec2(0., -1.);\n    vec2  side2           = vec2(1.,0.);\n    \n    float numberOfPoints  = 12.* abs(sin(iTime*0.4));\n   \n    \n    DrawCurveSide(graphOrigin, uvCoordinate, sideLengths, numberOfPoints, side1, side2, col);\n    \n          graphOrigin     = vec2(clamp(sin(iTime + PI)*0.5, -1.,0.), 0.);\n\n          side1           = vec2(0., 1.);\n          side2           = vec2(1.,0.);\n    \n    DrawCurveSide(graphOrigin, uvCoordinate, sideLengths, numberOfPoints, side1, side2, col);\n    \n       \n          graphOrigin     = vec2(clamp(sin(iTime)*0.5, 0.,1.), 0.);\n\n          side1           = vec2(0., 1.);\n          side2           = vec2(-1.,0.);\n    \n    DrawCurveSide(graphOrigin, uvCoordinate, sideLengths, numberOfPoints, side1, side2, col);\n    \n          graphOrigin     = vec2(clamp(sin(iTime + PI)*0.5, 0.,1.), 0.);\n\n          side1           = vec2(0., -1.);\n          side2           = vec2(-1.,0.);\n    \n    DrawCurveSide(graphOrigin, uvCoordinate, sideLengths, numberOfPoints, side1, side2, col);\n    \n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}