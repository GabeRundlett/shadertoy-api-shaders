{
    "Shader": {
        "info": {
            "date": "1698972949",
            "description": "Use it as a funny mirror.",
            "flags": 34,
            "hasliked": 0,
            "id": "ctcyRM",
            "likes": 1,
            "name": "False Mirror Distortions v3",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "distortion"
            ],
            "usePreview": 0,
            "username": "ersh",
            "viewed": 197
        },
        "renderpass": [
            {
                "code": "// Liquid curved mirror.\n// Feel free ro replace the texture in Channel1 to any other texture or video or webcam!\n\n/*\n VARIANT:\n   1 = horizontal + diagonal\n   2 = horizontal + diagonal\n   3 = horizontal + vertical\n   4 = 2 diagonal\n   5 = 2 directions, relative to 0 and 90 deg\n   6 = 2 directions, relative to +/- 45 deg\n   7 = constrained angle around +/- 45 deg\n   8 = 8 directions\n*/\n#define VARIANT 5\n\n// Amount of distortion\n#define SCALE 1.\n\n//// One of {\n//#define TRANSFORM      NONE\n//#define TRANSFORM      LOOP\n//#define TRANSFORM      MIRROR\n#define TRANSFORM      MIRRORX\n//// }\n\nvec4 T(ivec2 x) { return texelFetch(iChannel0, x, 0); }\n\nvec4 T2(vec2 x) {\n#define NONE(X)           X\n#define LOOP(X)           fract(X)\n#define MIRROR(X)         abs((mod(X + 1., 2.)) - 1.)\n#define MIRRORX(X)         vec2(abs((mod(X.x, 2.)) - 1.), abs((mod(X.y + 1., 2.)) - 1.))\n  return texture(iChannel1, TRANSFORM(x), 0.);\n}\n\n#define XYSQ     vec2(1., iResolution.x / iResolution.y)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n#if VARIANT == 1\n    vec2 s1 = vec2(\n        T(ivec2(int(fragCoord.x), 1)).r,\n        T(ivec2(int(fragCoord.y/iResolution.y*iResolution.x), 3)).r\n    );\n    vec2 s2 = vec2(\n        T(ivec2(int(fragCoord.x), 2)).r,\n        T(ivec2(int(fragCoord.y/iResolution.y*iResolution.x), 4)).r\n    );\n    s2 = vec2(s2.x+s2.y, s2.x-s2.y)/1.45;\n#elif VARIANT == 2\n    vec2 s1 = vec2(\n        T(ivec2(int(fragCoord.x), 1)).r,\n        T(ivec2(int(fragCoord.y/iResolution.y*iResolution.x), 3)).r\n    );\n    vec2 s2 = vec2(\n        T(ivec2(int(fragCoord.x), 2)).r,\n        T(ivec2(int(fragCoord.y/iResolution.y*iResolution.x), 4)).r\n    );\n    s2 = vec2(s2.x+s2.y, s2.x-s2.y)/1.45;\n#elif VARIANT == 3\n    vec2 s1 = vec2(\n        T(ivec2(int(fragCoord.x), 1)).r,\n        T(ivec2(int(fragCoord.y/iResolution.y*iResolution.x), 3)).r\n    );\n    vec2 s2 = vec2(\n        T(ivec2(int(fragCoord.x), 2)).r,\n        T(ivec2(int(fragCoord.y/iResolution.y*iResolution.x), 4)).r\n    );\n    s2 = vec2(s2.y, s2.x);\n#elif VARIANT == 4\n    vec2 s1 = vec2(\n        T(ivec2(int(fragCoord.x), 1)).r,\n        T(ivec2(int(fragCoord.y/iResolution.y*iResolution.x), 3)).r\n    );\n    vec2 s2 = vec2(\n        T(ivec2(int(fragCoord.x), 2)).r,\n        T(ivec2(int(fragCoord.y/iResolution.y*iResolution.x), 4)).r\n    );\n    s1 = vec2(s1.x+s1.y, s1.x-s1.y)/1.45;\n    s2 = vec2(s2.x-s2.y, s2.x+s2.y)/1.45;\n#elif VARIANT == 5\n    vec2 s1 = vec2(\n        T(ivec2(int(fragCoord.x), 1)).r,\n        T(ivec2(int(fragCoord.y/iResolution.y*iResolution.x), 3)).r\n    );\n    float a1 = T(ivec2(int(fragCoord.x), 0)).r * 3.1415926;\n    float cs1 = cos(a1), sn1 = sin(a1);\n    s1 = vec2(cs1 * s1.x + sn1 * s1.y, -sn1 * s1.x + cs1 * s1.y);\n\n    vec2 s2 = vec2(\n        T(ivec2(int(fragCoord.x), 2)).r,\n        T(ivec2(int(fragCoord.y/iResolution.y*iResolution.x), 4)).r\n    );\n    float a2 = T(ivec2(int(fragCoord.x), 5)).r * 3.1415926 + 3.1415926/2.;\n    float cs2 = cos(a2), sn2 = sin(a2);\n    s2 = vec2(cs2 * s2.x + sn2 * s2.y, -sn2 * s2.x + cs2 * s2.y);\n#elif VARIANT == 6\n    vec2 s1 = vec2(\n        T(ivec2(int(fragCoord.x), 1)).r,\n        T(ivec2(int(fragCoord.y/iResolution.y*iResolution.x), 3)).r\n    );\n    float a1 = T(ivec2(int(fragCoord.x), 0)).r * 3.1415926 - 3.1415926/4.;\n    float cs1 = cos(a1), sn1 = sin(a1);\n    s1 = vec2(cs1 * s1.x + sn1 * s1.y, -sn1 * s1.x + cs1 * s1.y);\n\n    vec2 s2 = vec2(\n        T(ivec2(int(fragCoord.x), 2)).r,\n        T(ivec2(int(fragCoord.y/iResolution.y*iResolution.x), 4)).r\n    );\n    float a2 = T(ivec2(int(fragCoord.x), 5)).r * 3.1415926 + 3.1415926/4.;\n    float cs2 = cos(a2), sn2 = sin(a2);\n    s2 = vec2(cs2 * s2.x + sn2 * s2.y, -sn2 * s2.x + cs2 * s2.y);\n#elif VARIANT == 7\n    vec2 s1 = vec2(\n        T(ivec2(int(fragCoord.x), 1)).r,\n        T(ivec2(int(fragCoord.y/iResolution.y*iResolution.x), 3)).r\n    );\n    float a1 = T(ivec2(int(fragCoord.x), 0)).r * 3.1415926/4. - 3.1415926/4.;\n    float cs1 = cos(a1), sn1 = sin(a1);\n    s1 = vec2(cs1 * s1.x + sn1 * s1.y, -sn1 * s1.x + cs1 * s1.y);\n\n    vec2 s2 = vec2(\n        T(ivec2(int(fragCoord.x), 2)).r,\n        T(ivec2(int(fragCoord.y/iResolution.y*iResolution.x), 4)).r\n    );\n    float a2 = T(ivec2(int(fragCoord.x), 5)).r * 3.1415926/4. + 3.1415926/4.;\n    float cs2 = cos(a2), sn2 = sin(a2);\n    s2 = vec2(cs2 * s2.x + sn2 * s2.y, -sn2 * s2.x + cs2 * s2.y);\n#elif VARIANT == 8\n    vec2 s1 = vec2(\n        T(ivec2(int(fragCoord.x), 1)).r,\n        T(ivec2(int(fragCoord.y/iResolution.y*iResolution.x), 3)).r\n    );\n    vec2 s2 = vec2(\n        T(ivec2(int(fragCoord.x), 2)).r,\n        T(ivec2(int(fragCoord.y/iResolution.y*iResolution.x), 4)).r\n    );\n    s2 = vec2(s2.y, s2.x);\n    vec2 s3 = vec2(\n        T(ivec2(int(fragCoord.x), 5)).r,\n        T(ivec2(int(fragCoord.y/iResolution.y*iResolution.x), 7)).r\n    );\n    vec2 s4 = vec2(\n        T(ivec2(int(fragCoord.x), 6)).r,\n        T(ivec2(int(fragCoord.y/iResolution.y*iResolution.x), 8)).r\n    );\n    s3 = vec2(s3.x+s3.y, -s3.x+s3.y)/1.45;\n    s4 = vec2(s4.x-s4.y,  s4.x+s4.y)/1.45;\n    fragColor = vec4(T2(uv + (s1 + s2 + s3 + s4) / 2.4 * SCALE * XYSQ).rgb, 1.0);\n    return;\n#endif\n    fragColor = vec4(T2(uv + (s1 + s2) / 2. * SCALE * XYSQ).rgb, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//#define T(X)     texelFetch(iChannel0, X, 0)\n\nint imod(int a, int b) { return a % b; }\nint iabs(int x) { return x >= 0 ? x : -x; }\nint isign(int x) { return x >= 0 ? 1 : -1; }\nvec4 T(ivec2 x, int maxx) {\n  // return x.x > 0 && x.x < maxx ? texelFetch(iChannel0, x, 0) : vec4(0.);\n\n  //if (x.x < 0) x.x = 0; else if (x.x > maxx) x.x = maxx; return texelFetch(iChannel0, x, 0);\n\n  //return\n  //    x.x < 0 ? texelFetch(iChannel0, ivec2(-x.x, x.y), 0) :\n  //    x.x > maxx ? texelFetch(iChannel0, ivec2(maxx-x.x, x.y), 0) :\n  //    texelFetch(iChannel0, x, 0);\n\n  return\n      x.x < 0 ? texelFetch(iChannel0, ivec2(0, x.y), 0) - texelFetch(iChannel0, ivec2(-x.x, x.y), 0) :\n      x.x > maxx ? texelFetch(iChannel0, ivec2(maxx, x.y), 0) - texelFetch(iChannel0, ivec2(maxx-x.x, x.y), 0) :\n      texelFetch(iChannel0, x, 0);\n\n#define FETCH(X)               texelFetch(iChannel0, X, 0)\n#define SAW(X, MAXX)           ivec2(iabs((imod(X.x + MAXX, MAXX * 2)) - MAXX), X.y)\n#define SGN(X, MAXX)           float(-isign(imod(X.x, MAXX * 2) - MAXX))\n#define MIRROR(FN, X, MAXX)    (FN(SAW(X, MAXX)) * SGN(X, MAXX))\n  // return MIRROR(FETCH, x, maxx);\n}\n\nint tier_n(int x) {\n  if ((x & 0xffff) == 0) { return 16; }\n  int ret = 0;\n  if ((x & 0xff) == 0) { ret += 8; x >>= 8; }\n  if ((x & 0x0f) == 0) { ret += 4; x >>= 4; }\n  if ((x & 3) == 0) { ret += 2; x >>= 2; }\n  if ((x & 1) == 0) { ret += 1; }\n  return ret;\n}\n\nint tier_s(int x) {\n  if ((x & 0xffff) == 0) { return 0x10000; }\n  int ret = 1;\n  if ((x & 0xff) == 0) { ret <<= 8; x >>= 8; }\n  if ((x & 0x0f) == 0) { ret <<= 4; x >>= 4; }\n  if ((x & 3) == 0) { ret <<= 2; x >>= 2; }\n  if ((x & 1) == 0) { ret <<= 1; }\n  return ret;\n}\n\nint pow2ceil(int x) {\n  x |= x >> 1;\n  x |= x >> 2;\n  x |= x >> 4;\n  x |= x >> 8;\n  x |= x >> 16;\n  return x+1;\n}\n\nfloat pow_of_2_adj(vec2 iResolution) {\n  return  iResolution.y / iResolution.x / pow(2., ceil(log(min(iResolution.x,iResolution.y)+1.)/log(2.)) - 2.);\n}\n\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 position)\n{\n    vec2 p = (position + mod(iTime, 200.) * 1500. + 50.0);\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat rand(ivec2 nx, int t, float tm)\n{\n    //if (nx.x == 0) return 0.;\n//    if (t < 5) return 0.;\n//    return 0.1;\n    vec2 p = (vec2(nx) + mod(tm, 200.) * 1501. + 50.0);\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    float sh = sin(float(t + nx*5) + iTime/2.) / float(t+1) / iResolution.x * iResolution.y;\n    return (fract((p3.x + p3.y) * p3.z) - 0.5 + sh) / 2. / iResolution.x * iResolution.y;\n}\n\nfloat randt(ivec2 nx, int t, float y) {\n    float tm = ((100. + iTime + y*33.33)*(1. - y * 0.01)  + float(nx.x)/100.)/float(t+1);\n    float tt = floor(tm), tf = fract(tm);\n    return mix(rand(nx, t, tt), rand(nx, t, tt+1.), smoothstep(0., 1., tf));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.y > 30.) return;\n    ivec2 fragCoord_i = ivec2(fragCoord);\n    ivec2 iResolution_i = ivec2(iResolution);\n    int maxx = iResolution_i.x - 1;\n\n    if (fragCoord_i.x == iResolution_i.x/2) {\n        fragColor.r = 0.;\n            // randt(fragCoord_i, tier_n(pow2ceil(iResolution_i.x)), fragCoord.y)\n            // * iResolution.x * pow_of_2_adj(iResolution.xy) / 2.;\n        return;\n    }\n\n    int pow2_mid_adj = (pow2ceil(iResolution_i.x) - iResolution_i.x) >> 1;\n    int tier =  tier_n(fragCoord_i.x + pow2_mid_adj);\n    int st = (1 << tier); //tier_s(fragCoord_i.x);\n    //if (st > iResolution_i.x) st = iResolution_i.x;\n\n    fragColor.r =\n        randt(fragCoord_i, tier, fragCoord.y)\n        * float(st)\n        * pow_of_2_adj(iResolution.xy)\n        + (T(ivec2(fragCoord_i.x - st, fragCoord_i.y), maxx).r\n        + T(ivec2(fragCoord_i.x + st, fragCoord_i.y), maxx)).r / 2.;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}