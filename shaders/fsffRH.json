{
    "Shader": {
        "info": {
            "date": "1644457878",
            "description": ".",
            "flags": 0,
            "hasliked": 0,
            "id": "fsffRH",
            "likes": 19,
            "name": "Three Point Circumcircle",
            "published": 3,
            "tags": [
                "triangle",
                "circle",
                "geometry",
                "points",
                "circumcircle",
                "boundingcircle"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "// Drawing utilities\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\n\n// Align SDF with an axis\nvec2 axisAlign(in vec2 p, in vec2 up) {\n    up = normalize(up);\n    return p * mat2(up.y, -up.x, up);\n}\n\n// SDFs\nfloat sdDisk(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    p = abs(p) - b;\n    return length(max(p, 0.0)) + min(0.0, max(p.x, p.y));\n}\n\nfloat sdSegment(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * dot(pa, ba) / dot(ba, ba));\n}\n\n// vec3(x, y, radius)\nvec2 perp(in vec2 v) { return vec2(-v.y, v.x); }\nvec3 circumcircle(in vec2 a, in vec2 b, in vec2 c) {\n    vec2 baT = perp(b - a), cb = c - b;\n    vec2 pos = (a + b + baT * dot(c - a, cb) / dot(baT, cb)) / 2.0;\n    return vec3(pos, length(a - pos));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    // Animated points\n    vec2 a = vec2(sin(iTime * 0.75), cos(iTime));\n    vec2 b = vec2(cos(iTime), sin(iTime * 1.25));\n    vec2 c = vec2(cos(iTime * 1.25), cos(iTime * 0.5));\n\n    // Midpoints\n    vec2 abMid = (a + b) / 2.0;\n    vec2 bcMid = (b + c) / 2.0;\n    vec2 caMid = (c + a) / 2.0;\n\n    // Target points for perpendicular bisectors\n    vec2 abPerp = abMid + perp(b - abMid);\n    vec2 bcPerp = bcMid + perp(c - bcMid);\n    vec2 caPerp = caMid + perp(a - caMid);\n\n    drawSDF(abs(sdBox(axisAlign(uv - abMid, abPerp - abMid) + 0.08, vec2(0.08))), vec3(1.0));\n    drawSDF(abs(sdBox(axisAlign(uv - bcMid, bcPerp - bcMid) + 0.08, vec2(0.08))), vec3(1.0));\n    drawSDF(abs(sdBox(axisAlign(uv - caMid, caPerp - caMid) + 0.08, vec2(0.08))), vec3(1.0));\n\n    // Triangle edges\n    drawSDF(sdSegment(uv, a, b), vec3(0.5, 0.4, 0.0));\n    drawSDF(sdSegment(uv, b, c), vec3(0.5, 0.4, 0.0));\n    drawSDF(sdSegment(uv, c, a), vec3(0.5, 0.4, 0.0));\n\n    // Perpendicular bisectors\n    drawSDF(sdLine(uv, abMid, abPerp), vec3(1.0, 0.8, 0.0));\n    drawSDF(sdLine(uv, bcMid, bcPerp), vec3(1.0, 0.8, 0.0));\n    drawSDF(sdLine(uv, caMid, caPerp), vec3(1.0, 0.8, 0.0));\n\n    // Circumcircle center\n    vec3 circ = circumcircle(a, b, c);\n    drawSDF(sdDisk(uv, circ.xy, 0.05), vec3(1.0, 0.0, 0.0)); // Center\n    drawSDF(abs(sdDisk(uv, circ.xy, circ.z)), vec3(0.0, 1.0, 0.0)); // Circle\n\n    // Midpoints\n    drawSDF(sdDisk(uv, abMid, 0.03), vec3(0.0, 0.0, 1.0));\n    drawSDF(sdDisk(uv, bcMid, 0.03), vec3(0.0, 0.0, 1.0));\n    drawSDF(sdDisk(uv, caMid, 0.03), vec3(0.0, 0.0, 1.0));\n\n    // Points\n    drawSDF(sdDisk(uv, a, 0.05), vec3(1.0));\n    drawSDF(sdDisk(uv, b, 0.05), vec3(1.0));\n    drawSDF(sdDisk(uv, c, 0.05), vec3(1.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}