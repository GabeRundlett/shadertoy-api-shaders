{
    "Shader": {
        "info": {
            "date": "1714498072",
            "description": "trippy energy effect mashed up with a simple color wheel \nmouse to effect color rotation",
            "flags": 0,
            "hasliked": 0,
            "id": "4c3XWf",
            "likes": 9,
            "name": "hexagon color wheel energy",
            "published": 3,
            "tags": [
                "hexagons"
            ],
            "usePreview": 0,
            "username": "timmaffett",
            "viewed": 252
        },
        "renderpass": [
            {
                "code": "// Fork of \"hexagon energy\" by laserdog. https://shadertoy.com/view/llcyDH\n// 2024-04-30 15:52:33\n// mashed up with:\n// Fork of \"colors wheel\" by g_Bloxy. https://shadertoy.com/view/XXSGzR\n// 2024-02-22 08:25:01\n\n#define S(r,v,a) smoothstep(a/iResolution.y,0.,abs(v-(r)))\n\nvec3 hcalc(vec3 c, float s){\n    return c * mat3(c += .33 - (c = vec3(cos(s), s = -sin(s) * .6, -s)).x / 3., c.zxy, c.yzx);\n}\n\n\n// simple mouse rotate and zoom for shader\n#define pi 3.14159265359 \n\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nvec2 mouseRotZoom(vec2 uv) {\n    // allow mouse zoom and rotate    \n    vec2 mouse = (iMouse.xy == vec2(0.)) ? vec2(1.0) : iMouse.xy/iResolution.xy;\n    uv.xy *= r2d(-(mouse.x)*pi*2.);\n    uv *= (1./(10.0*mouse.y));\n    return uv;\n}\n\nconst vec2 s = vec2(1, 1.7320508); // 1.7320508 = sqrt(3)\n\nfloat calcHexDistance(vec2 p)\n{\n    p = abs(p);\n    return max(dot(p, s * .5), p.x);\n}\n\nvec2 calcHexOffset(vec2 uv)\n{\n    vec4 hexCenter = round(vec4(uv, uv - vec2(.5, 1.)) / s.xyxy);\n    vec4 offset = vec4(uv - hexCenter.xy * s, uv - (hexCenter.zw + .5) * s);\n    return dot(offset.xy, offset.xy) < dot(offset.zw, offset.zw) ? offset.xy : offset.zw;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    \n    vec2 uv2 = mouseRotZoom(uv);\n    \n    //uv2 -= iResolution.xy * 0.5;  // This will make entire color cycle through color wheel..\n\n    uv2.xy *= r2d(-(iTime/5.)*pi*2.);\n     \n    \n\tvec2 hexInfo = calcHexOffset(uv * 3.);\n\n\n    float a = cos(2. * (2. * length(uv) - iTime));\n\tfloat h = calcHexDistance(hexInfo);\n\n\n    float dist = length(uv2);\n    vec3 circleColor = hcalc(vec3(0.9, 0.5, 0.2), atan(uv2.x, uv2.y));\n    float gradientFactor = smoothstep(0.1, 1.25, h);\n    vec3 finalColor = mix(circleColor, vec3(0.0), gradientFactor);\n    fragColor = vec4(finalColor, 1.0);\n\n    vec4 f2 = fragColor;\n\n\tf2 *= S(abs(sin(h * a * 10.)), 1., 12.) + .3 * S(h, .45, 20.) + .15\n        + .3 * smoothstep(.25 + 12./iResolution.y, .25, h);\n       \n    fragColor *= f2; // color on black\n    fragColor += f2; // intensify\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}