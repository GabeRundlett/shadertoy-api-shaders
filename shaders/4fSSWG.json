{
    "Shader": {
        "info": {
            "date": "1706733461",
            "description": "[URL]https://en.wikipedia.org/wiki/Chaos_game[/URL]\n\n[URL]https://mathworld.wolfram.com/ChaosGame.html[/URL]",
            "flags": 0,
            "hasliked": 0,
            "id": "4fSSWG",
            "likes": 3,
            "name": "2D chaos game - tge",
            "published": 3,
            "tags": [
                "game",
                "cube",
                "random",
                "chaos",
                "sierpinski",
                "carpet",
                "parallelogram"
            ],
            "usePreview": 0,
            "username": "tsakal",
            "viewed": 167
        },
        "renderpass": [
            {
                "code": "const float PI = acos(-1.),\n\tTAU = 2.*PI,\n    SCALE = 2.,\n    RAD = .99*SCALE;\nconst vec3 bgColor = vec3(0.,0.,.25),\n            lineColor = vec3(.95),\n            pointColor = vec3(1.,1.,0.),\n            fillColor = vec3(255.,0.,0.)/255.;\nfloat lThick = 3., AR, T;\nvec2 randomPoint;\n//========================\nfloat rand(vec2 co, float seed){\n    return fract(sin(dot(co.xy*seed,vec2(12.9898,78.233)))*43758.5453);\n}\n//========================\nmat2 rotate(float a) {\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, -s, s, c);\n}\n//========================\nfloat sdCircle( vec2 p, float r ) {\n    return length(p) - r;\n}\n//========================\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b ) {\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n//========================\nvec3 shadePoint(vec3 col, vec3 col1, float fValue, float thick) {\n    col = mix( col, col1, smoothstep( thick, .0, (fValue) ) );\n    return col;\n}\n//========================\nvec2 randomTrianglePoint(vec2 a, vec2 b, vec2 c, float r1, float r2) {\n    // https://stackoverflow.com/questions/19654251/random-point-inside-tetrangle-inside-java?rq=1\n    // P(x) = (1 - sqrt(r1)) * A(x) + (sqrt(r1) * (1 - r2)) * B(x) + (sqrt(r1) * r2) * C(x)\n    // P(y) = (1 - sqrt(r1)) * A(y) + (sqrt(r1) * (1 - r2)) * B(y) + (sqrt(r1) * r2) * C(y)\n    float sqrt_r1 = sqrt(r1); \n    return vec2(\n        (1. - sqrt_r1) * a.x + (sqrt_r1 * (1. - r2)) * b.x + (sqrt_r1 * r2) * c.x, \n        (1. - sqrt_r1) * a.y + (sqrt_r1 * (1. - r2)) * b.y + (sqrt_r1 * r2) * c.y\n    );\n}\n//========================\nvec3 sierpinskiPoints(vec3 col, vec2 p, vec2 a, vec2 b, vec2 c, vec2 d, float count){\n    vec2 randomSierpinski = randomPoint, random_abcd,\n         mab=.5*(a+b), mbc=.5*(b+c), mcd=.5*(c+d), mda=.5*(d+a);\n    for (float r, n=0.; n<count; n++) {\n        r = floor(rand(p, n)*8.);\n        random_abcd = (r==0.)?a:(r==1.?b:(r==2.?c:(r==3.?d:(r==4.?mab:(r==5.?mbc:(r==6.?mcd:mda))))));\n        randomSierpinski = (2.*random_abcd+randomSierpinski)/3.;\n        col = shadePoint(col, pointColor, sdCircle(p-randomSierpinski, lThick), lThick*3.);\n    }\n    return col;\n}\n//========================\nvec3 parallelogram(vec3 col, vec2 p, vec2 cc, vec2 b, vec2 c, vec2 d, float count) {\n    float r1 = rand(p, count-T), r2 = rand(p, count+T);\n    randomPoint = randomTrianglePoint(cc, b, d, r1, r2);\n    col = sierpinskiPoints(col, p, cc, b, c, d, count);\n    col = shadePoint(col, lineColor, sdLine(p, cc, b), .5*lThick);\n    col = shadePoint(col, lineColor, sdLine(p, b, c), .5*lThick);\n    col = shadePoint(col, lineColor, sdLine(p, c, d), .5*lThick);\n    return col;\n}\n//========================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    lThick *= length(fwidth(p));\n    p *= SCALE;\n    AR = iResolution.x / iResolution.y;\n    T = iTime * .25;\n    float count = 96.;\n    mat2 rot = rotate(PI/3.);\n    vec3 col = bgColor;\n    vec2 cc = vec2(0., 0.);\n    vec2 a = vec2(0., RAD);\n    vec2 b = a*rot;\n    vec2 c = b*rot;\n    vec2 d = c*rot;\n    vec2 e = d*rot;\n    vec2 f = e*rot;\n    p *= rotate(T);\n    col = parallelogram(col, p, cc, b, a, f, count);\n    col = parallelogram(col, p, cc, d, c, b, count);\n    col = parallelogram(col, p, cc, f, e, d, count);\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}