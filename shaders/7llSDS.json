{
    "Shader": {
        "info": {
            "date": "1626480767",
            "description": "Seizure warning. Game of life in Shader form, now with more colors!",
            "flags": 34,
            "hasliked": 0,
            "id": "7llSDS",
            "likes": 4,
            "name": "Multicolor Subpixel Game of Life",
            "published": 3,
            "tags": [
                "gameoflife"
            ],
            "usePreview": 0,
            "username": "CharmingSalmon",
            "viewed": 457
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Output to screen\n    fragColor = texelFetch(iChannel1, ivec2(fragCoord.xy),0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "int life(int value, int neighborCount);\n\nvec4 texFetchColor(sampler2D channel, vec2 coord){\n    return  texelFetch(channel,ivec2(coord),0);\n}\n\nivec4 fetchAdj(vec2 coord, int x, int y){\n return ivec4(round(texFetchColor(iChannel0,coord - vec2(x,y))));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n //Pause if mouse is down\n  if(iMouse.z > 0.) {\n  fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n  return;}\n  \n  //Count neighbors\n  ivec3 neighborCount = ivec3(0);\n  \n  ivec4 px9 = fetchAdj(fragCoord, -1,-1);\n  ivec4 px8 = fetchAdj(fragCoord, 0,-1);\n  ivec4 px7 = fetchAdj(fragCoord, 1,-1);\n  \n  ivec4 px6 = fetchAdj(fragCoord, -1,0);\n  ivec4 px5 = fetchAdj(fragCoord, 0,0);\n  ivec4 px4 = fetchAdj(fragCoord, 1,0);\n  \n  ivec4 px3 = fetchAdj(fragCoord, -1,1);\n  ivec4 px2 = fetchAdj(fragCoord, 0,1);\n  ivec4 px1 = fetchAdj(fragCoord, 1,1);\n  \n  neighborCount.r = px9.b + px8.r + px8.g + px6.b + px5.g + px3.b + px2.r + px2.g; //All adjacent subpixels\n  neighborCount.g = px8.r + px8.g + px8.b + px5.r + px5.b + px2.r + px2.g + px2.b; \n  neighborCount.b = px8.g + px8.b + px7.r + px5.g + px4.r + px2.g + px1.r + px1.g;\n    \nivec4 prevPixel = px5;\nfragColor = vec4(life(prevPixel.r, neighborCount.r), life(prevPixel.g, neighborCount.g), life(prevPixel.b, neighborCount.b),1.);\n}\n\nint life(int value, int neighborCount){\n //Adjust state as appropriate\n  switch(neighborCount){\n  case 3:\n      return 1;\n  break;\n  case 2:\n      return value;\n  break;\n  default:\n      return 0;\n  }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec2 mod2(vec2 vecA, vec2 vecB){\n  return vec2(mod(vecA.x,vecB.x),mod(vecA.y,vecB.y));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec4 px = texelFetch(iChannel0,ivec2(fragCoord),0);\n//  if( iFrame % 10 == 0 && rand(fragCoord - 2.*vec2(iFrame % 200, mod(iTime,200.))) < 0.1 ){\n\n//  }}\n  \n  if(rand(fragCoord - 2.*vec2(iFrame % 200, mod(iTime,200.))) < (1./1e34) * pow(sin(iTime/20.),2.) ) {\n  \n        vec2 texSize = vec2(textureSize(iChannel1,0));\n  vec4 texel = texelFetch(iChannel1,ivec2(mod2(fragCoord,texSize)),0);\n  if(texel != vec4(0)){\n  if(px == vec4(0) || px == vec4(0,0,0,1)) fragColor = round(texel);\n  return;\n  }\n      switch(int(rand(fragCoord-vec2(iTime))*3.)){\n      case 0:\n      fragColor = vec4(1,px.g,px.b,1);\n      break;\n      case 1:\n      fragColor = vec4(px.r,1,px.b,1);\n      break;\n      case 2:\n      fragColor = vec4(px.r,px.g,1,1);\n      }\n  return;\n  }\n  \n  \n \n  \n  ivec2 dist = ivec2(abs(fragCoord.xy - iMouse.xy));\n  if(dist.x <= 1 && dist.y <= 1){\n      fragColor = vec4(1);\n  } else {\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord.xy),0);\n    }\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    //Gravity warp\n       vec2 gravity = vec2(0.,0.);\n  //Gravity Calculation\n for(int adj_col = -3; adj_col <= 3; adj_col++){\n    for(int adj_row = -3; adj_row <= 3; adj_row++){\n    if(adj_col == 0 && adj_row==0) continue;\n    if(texelFetch(iChannel0,ivec2(fragCoord+vec2(adj_col,adj_row)),0) == vec4(1.))\n       gravity += vec2(adj_col,adj_row) * 1e5;\n    }\n  }\n  if(1./gravity.x < 1e-6 || 1./gravity.y < 1e-6) {\n  fragColor = texelFetch(iChannel0,ivec2(fragCoord),0); return;\n  }\n  //fragColor = vec4(ceil(1./gravity.x),ceil(1./gravity.y),1,1) * texelFetch(iChannel0,ivec2(fragCoord),0);\n  fragColor = texelFetch(iChannel0,ivec2(fragCoord-ceil(1./gravity)),0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}