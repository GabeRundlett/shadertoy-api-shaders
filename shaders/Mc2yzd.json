{
    "Shader": {
        "info": {
            "date": "1722876236",
            "description": "source  https://glslsandbox.com/e#53510.2  https://glslsandbox.com/e#53540.1",
            "flags": 0,
            "hasliked": 0,
            "id": "Mc2yzd",
            "likes": 2,
            "name": "fractalic peace",
            "published": 3,
            "tags": [
                "fractal",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 143
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(20,23,51))*0.2+.5)\n\n\n\nmat2 rotate(float a) {\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n\n}\nvec3 hueToRGB(float hue){\n\tvec3 c = abs(fract((hue + vec3(3.0, 2.0, 1.0)) / 3.0) * 2.0 - 1.0);\n\tc = max(c * 1.5 - 0.5, 0.0);\n\t\n\treturn c / max(max(c.r, c.g), c.b);\n}\n#define time iTime\n#define resolution iResolution.xy\n\nconst float PI = acos(-1.0);\nconst float TAU = PI * 2.0;\nconst float phi = sqrt(5.0) * 0.5 + 0.5;\n\nconst float goldenAngle = TAU / phi / phi;\n\nvec2 rotateAroundPoint(float x){\n\treturn vec2(sin(x), cos(x));\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\t\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 calculateGoldenShape(vec2 p){\n\tconst int steps =64;\n\tconst float rSteps = 1.0 / float(steps);\n\t\n\tvec3 result = vec3(0.0);\n\t\n\tfor (int i = 0; i < steps; ++i)\n\t{\n\t\tfloat n = float(i);\n\t\t\n\t\tfloat inc = n * rSteps;\n\t\tvec2 offset = rotateAroundPoint(fract(-time*0.055)*6.28+n * goldenAngle*sin(time*0.0025)) * inc * 0.45;\n\t\t\n\t\tvec3 dist = vec3(distance(p, offset));\n\t\t     dist = exp2(-dist * 64.0) * hsv2rgb(vec3(fract(time*0.2)+inc*0.75, 1.0, 1.0));\n\t\t\n\t\tresult = max(result, dist);\n\t}\n\t\n\treturn result;\n}\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    vec2 uv = (2. * C.xy - resolution) / resolution.y;\n     uv += vec2(uv.x, -uv.y) * dot(uv, uv);\nvec3 col3 = vec3(abs(uv.y)*0.5);\n\n\tcol3.gr *= 0.5;\n\t\n    vec2 position = (gl_FragCoord.xy / resolution.xy - 0.5) * vec2(resolution.x/ resolution.y, 1.0);\n\n\tvec3 color = vec3(0.0);\n\t     color += sin(calculateGoldenShape(position) * 3.0);\n\t     color = pow(color, vec3(2.2));\n\t     color /= sin(color + 1.0);\n\t     color = pow(color, vec3(1.0 / 2.2));\n\tfloat r = .1;\n\tfor (float i = 0.; i < 28.; i++)\n\t{\n\t\t\n\t\t\n\t\tfloat a = atan(uv.x, uv.y) + time*0.4 * i / 10.;\n\t\tfloat n = 6.28 / 6.;\n\t\ta = mod(a, n) - n / 2.;\n\t\tfloat l = length(uv);\n\t\t\n\t\tvec2 p = l * vec2(cos(a), sin(a));\n\t\t\t\n\t\tp.x -= 0.1*sin(time) + i * .05;\n\t\tfloat d = length(p);\n\t\t\n\t\tr *= (.5 + .5 * cos(time*0.125 + l * 8.*sin(time*0.5)));\n\t\tfloat v = smoothstep(r + .025, r, d*1.5);\n\t\t\n\t\tvec3 ccc = hueToRGB(time-d*48.0)*v;\n\t\t\n\t\tcol3 += ccc;\t//smoothstep(r + .05, r, d);\n\t\t\n\t}\n\tuv *= 5.;\n\tvec3 col = vec3(0.);\n\t\t\n\tfloat k = 6.28 / 360.;\n\tuv *= rotate(sin(iTime*0.0011)  * 360.);\n\tfloat t = 1.;\n\tfloat s = 1.;\n\tfor (int i = 0; i < 8; i++) {\n\t\tuv = abs(uv * s) - t;\n\t\tuv *= rotate(k*cos(iTime*0.11)  * 360.);\n\t\tt *= .75;\n\t\ts *= 1.01;\n\t}\n\t\n\t\n\tfloat d = length(uv);\n\t\n\tcol += smoothstep(.2, .02, d);\n\tcol *= .5 + .5 * cos(d * 100. + time + vec3(23, 21, 10));\n\t\n    vec3 p,q,r3=iResolution,\n    d2=normalize(vec3((C*2.-r3.xy)/r3.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<70.;\n        O.xyz+=mix(vec3(1),H(g*.1),.8)*1./e/8e3\n    )\n    {\n        p=g*d2;\n       \n        a=50.;\n        p=mod(p-a,a*2.)-a;\n        s=6.;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            s*=e=1.4+sin(iTime*.1)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+sin(iTime*.3+.5*sin(iTime*.3))*3.,\n                    120,\n                    8.+cos(iTime*.5)*5.\n                 )*col*col3;\n         }\n         g+=e=length(p.yz)/s;\n    }\n    O*=vec4(color*0.5,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}