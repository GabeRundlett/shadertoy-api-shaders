{
    "Shader": {
        "info": {
            "date": "1691224020",
            "description": "Guess who is in vacation in the country side.\nAnother layers of noise that look like something.",
            "flags": 0,
            "hasliked": 0,
            "id": "dllcDj",
            "likes": 39,
            "name": "Cloudy Blue Sky",
            "published": 3,
            "tags": [
                "2d",
                "cloud",
                "sky"
            ],
            "usePreview": 1,
            "username": "leon",
            "viewed": 1007
        },
        "renderpass": [
            {
                "code": "\n// Cloudy Blue Sky\n// by Leon Denise\n// 05/08/2023\n\n// Guess who is in vacation in the country side.\n// Another layers of noise that look like something.\n// Trying to push noise patterns farer to create complex shapes with simple code.\n\n// Could be very golfed and textureless,\n// but the blue noise scrolling is really adding to the picture,\n// and would be hard to golf.\n\n\n// Gyroid pattern\n// Explained by Martijn Steinrucken at:\n// https://www.youtube.com/watch?v=b0AayhCO7s8\nfloat gyroid (vec3 p) { return dot(sin(p),cos(p.yzx)); }\n\n// FBM type of noise with gyroid pattern\nfloat noise (vec3 p, float t, float w, float aa)\n{\n    float result = 0., a = .5;\n    for (float i = 0.; i < 4.; ++i, a/=aa)\n    {\n        p.z += t+result*w; // distortion\n        result += abs(gyroid(p/a))*a; // noise pattern\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0);\n    \n    // coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = 2.*(fragCoord-iResolution.xy/2.)/iResolution.y;\n    \n    // blue noise scroll\n    // by Inigo Quilez from:\n    // https://www.shadertoy.com/view/tlySzR\n    ivec2 pp = ivec2(fragCoord);\n    pp = (pp+(iFrame*196)*ivec2(113,127)) & 1023;\n    vec3 blu = texelFetch(iChannel0,pp,0).xyz;\n    \n    // shape from noise\n    vec3 q = vec3(p, 0.);\n    float t = iTime*.05-.2/(uv.y); // animation and perspective\n    q.y += noise(q*10., -t*4., 0., 1.9)*.1; // small details\n    color += noise(q, t, .3, 1.7)*.5-.5; // overall shape\n    color += blu.x*0.4; // extra shape reveal with blue noise\n    color *= smoothstep(.05,.4,uv.y); // fade out horizon\n    \n    // color\n    vec3 sky = mix(vec3(1), vec3(.4,.8,1), smoothstep(-.4, .4, uv.y));\n    color = mix(sky, vec3(1), smoothstep(.0,.2,color.r));\n    \n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}