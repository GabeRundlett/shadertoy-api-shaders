{
    "Shader": {
        "info": {
            "date": "1719509729",
            "description": "simple interactive water",
            "flags": 32,
            "hasliked": 0,
            "id": "MX3XWS",
            "likes": 1,
            "name": "Temp - Interactive Water",
            "published": 3,
            "tags": [
                "water"
            ],
            "usePreview": 0,
            "username": "sotyi",
            "viewed": 103
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor =vec4( texture(iChannel1, uv).x);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "# define RADIUS 0.05\n# define SPREAD 1\n# define SPREAD_RADIUS 10.0\n# define DAMPING 0.95\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // viewport ratio\n    vec2 xyRatio = vec2(iResolution.x/iResolution.y,1.0);\n    \n    // mouse input\n    vec4 mouse = iMouse;\n    vec2 mousePos = mouse.xy/iResolution.xy;\n    \n    float current = .0;\n    float dist = .0;\n    if(mouse.z > .0)\n    {\n        dist = length((uv - mousePos)*xyRatio);\n        dist = smoothstep(RADIUS, .0, dist);\n    }    \n    \n    // spread \n    #if SPREAD\n    float ddx = dFdx(uv.x)*SPREAD_RADIUS;\n    float ddy = dFdy(uv.y)*SPREAD_RADIUS;\n    current = texture(iChannel0,vec2(uv.x+ddx,uv.y)).x+\\\n              texture(iChannel0,vec2(uv.x-ddx,uv.y)).x+\\\n              texture(iChannel0,vec2(uv.x,uv.y+ddy)).x+\\\n              texture(iChannel0,vec2(uv.x,uv.y-ddy)).x;\n\n    current = current*0.25 + dist;\n    current *=DAMPING;    \n    #else\n    current = dist;\n    #endif\n    \n    \n    fragColor = vec4(current,.0,.0,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "# define RADIUS 0.02\n# define SPREAD_RADIUS 1.0\n# define DAMPING 0.99\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;        \n    vec2 xyRatio = vec2(iResolution.x/iResolution.y,1.0);\n    \n    // mouse input\n    vec4 mouse = iMouse;\n    vec2 mousePos = mouse.xy/iResolution.xy;\n    \n    float current = .0;\n    float dist = .0;\n    if(mouse.z > .0)\n    {\n        dist = length((uv - mousePos)*xyRatio);\n        dist = smoothstep(RADIUS, .0, dist);\n        current = dist;\n    }\n\n    // get prev\n    float prev = texture(iChannel1, uv).x;\n    float prev_prev = texture(iChannel1, uv).y;\n    \n    // spread    \n    float ddx = dFdx(uv.x)*SPREAD_RADIUS;\n    float ddy = dFdy(uv.y)*SPREAD_RADIUS;\n    current += (texture(iChannel1, vec2(uv.x+ddx,uv.y)).r + \\\n               texture(iChannel1, vec2(uv.x-ddx,uv.y)).r + \\\n               texture(iChannel1, vec2(uv.x,uv.y+ddy)).r + \\\n               texture(iChannel1, vec2(uv.x,uv.y-ddy)).r)/2.0 - prev_prev;                 \n    current *= DAMPING;\n        \n    current*=smoothstep(0.,1.,float(iFrame>=60));\n\n    fragColor = vec4(current, prev,.0,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "# define HIGHLIGHT 0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;  \n    \n    float height = texture(iChannel0,uv).x;\n    vec2 n = vec2(dFdx(height),dFdy(height));\n    \n    float highlight = smoothstep(0.,.2,5.*dot(n,vec2(1.,-1.)));\n    \n    #if HIGHLIGHT\n    fragColor = vec4(highlight);\n    #else\n    fragColor = vec4(n,.0,.0);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}