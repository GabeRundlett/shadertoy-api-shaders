{
    "Shader": {
        "info": {
            "date": "1724085636",
            "description": "color",
            "flags": 0,
            "hasliked": 0,
            "id": "lcsfz2",
            "likes": 2,
            "name": "color semaphore",
            "published": 3,
            "tags": [
                "fractal",
                "color",
                "neon"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 132
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)cos((h)*6.3+vec3(0,23,21))*.5+.5\nconst float PLASTIC = 1.324717957244746;\nconst float PLASTIC_2 = pow( PLASTIC, 2. );\nconst float PLASTIC_3 = pow( PLASTIC, 3. );\nconst float PLASTIC_4 = pow( PLASTIC, 4. );\nconst float PLASTIC_5 = pow( PLASTIC, 5. );\nconst float PLASTIC_6 = pow( PLASTIC, 6. );\nconst float PLASTIC_7 = pow( PLASTIC, 7. );\nconst float PLASTIC_8 = pow( PLASTIC, 8. );\nconst float PLASTIC_9 = pow( PLASTIC, 9. );\n\nconst vec2 HEX0 = vec2( 1., 0. );\nconst vec2 HEX1 = vec2( .5, sqrt( .75 ) );\nconst mat2 TO_HEX0_HEX1 = inverse( mat2( HEX0, HEX1 ) );\n\n\nconst vec2 RECURSE_PT = vec2( PLASTIC_7 - PLASTIC_3, PLASTIC_3 );\n\nconst vec2 FIXED_PT = mix( RECURSE_PT, vec2( 0. ), -1./(PLASTIC_8-1.) );\n\n// shape of the tile\nbool inTile( vec2 h ) // h is in hex coords\n{\n    if ( h.y < 0. ) return false;  \n    if ( h.x < 0. ) return false;\n    if ( h.x + h.y > PLASTIC_9 ) return false;  \n    if ( h.x + h.y > PLASTIC_8 && h.x < PLASTIC_6 ) return false;\n    return true;\n}\n\n// map subtile -> parent tile\nvec2 fromBigTile( vec2 h )\n{\n    return h.yx * PLASTIC;\n}\n// map subtile -> parent tile\nvec2 fromMediumTile( vec2 h )\n{\n    return mat2( 0., -1., 1., -1. ) * (h - vec2(PLASTIC_9, 0.)) * PLASTIC_2;\n}\n// map subtile -> parent tile\nvec2 fromSmallTile( vec2 h )\n{\n    return mat2( -1., 1., 0., 1. ) * (h - vec2(PLASTIC_7, 0.)) * PLASTIC_4;\n}\n\nconst int NO_TILE = -1;\nconst int SMALL_TILE = 0;\nconst int MEDIUM_TILE = 1;\nconst int BIG_TILE = 2;\nvec2 substitution( vec2 h, out int tileType )\n{\n    vec2 hh;\n    hh = fromBigTile( h );    if ( inTile( hh ) ) { tileType = BIG_TILE;    return hh; }\n    hh = fromMediumTile( h ); if ( inTile( hh ) ) { tileType = MEDIUM_TILE; return hh; }\n    hh = fromSmallTile( h );  if ( inTile( hh ) ) { tileType = SMALL_TILE;  return hh; }\n    tileType = NO_TILE;  \n    return h;\n}\n\nvec3 colorForTile( int tileType )\n{\n    if ( tileType == BIG_TILE ) return vec3( 1., 0., 0. );\n    if ( tileType == MEDIUM_TILE ) return vec3( 0., 1., 0. );\n    if ( tileType == SMALL_TILE ) return vec3( 0., 0., 1. );\n    return vec3( 0., 0., 0. );\n}\n\n// tile size\nfloat zoom( int tileType )\n{\n    if ( tileType == BIG_TILE ) return 1.;\n    if ( tileType == MEDIUM_TILE ) return 2.;\n    if ( tileType == SMALL_TILE ) return 4.;\n    return 999.;\n}\n\n//\nfloat bump( float x )\n{\n    return smoothstep( -2., 5., abs( x ) ) - smoothstep( 5., 32., abs( x ) );\n}\n\nvec3 go( vec2 h, float viewportZoom )\n{      \n    vec3 color = vec3( 0. );\n    int tileType;    \n   \n    float totalZoom = viewportZoom;\n\n    float colorScale = 1.;\n    while ( totalZoom < 50. )\n    {    \n        h = substitution( h, tileType );\n        color += colorForTile( tileType ) * bump( totalZoom ) * .15 * mix( 2., 0.2, totalZoom/20. );\n        totalZoom += zoom( tileType );\n    }\n       \n    return color;\n}\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n   \n    vec2 uv = (C*2.-iResolution.xy)/iResolution.y;\n   \n\n    vec2 h = TO_HEX0_HEX1 * uv;\n   \n\n    float t = iTime;\n    float viewportZoom = mod( t * 0.1, 4. ) * -2. - 16.;\n   \n    h *= pow( PLASTIC, viewportZoom );\n    h += FIXED_PT;    \n   \n    vec3 col = go( h, viewportZoom );    \n   \n   \n    vec3 p,r=iResolution,\n    d=normalize(vec3((C-.5*r.xy)/r.y,1));  \n   \n    for(\n        float i=0.,g=0.,e,s;\n        ++i<99.;\n        O.rgb+=mix(r/r,H(log(s)),.7)*.05*exp(-.45*i*i*e))\n    {\n        p=g*d-vec3(0,.0,-4.5+h);\n     \n        p=R(p,normalize(vec3(0,0,1)),h.y+iTime);\n        s=4.;\n        vec4 q=vec4(p,sin(iTime*.4)*.5);\nfor(int j=0;j++<8;)\n            q=abs(q),\n            q=q.x<q.y?q.zwxy:q.zwyx ,\n                  q=q.w<q.z?q.xyzw:q.xyzw ,\n            s*=e=1.35/min(dot(q,q),0.54),\n            q=q*e-vec4(0,4,.8,3);\n        g+=e=min(\n            length(q.w)/s,\n            length(cross(q.xyz,normalize(vec3(1,2,3))))/s-.0002\n        );\n    }\n    O=pow(O,vec4(5));\n }\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}