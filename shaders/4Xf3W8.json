{
    "Shader": {
        "info": {
            "date": "1707382002",
            "description": "-tmm just added some color to Lona by @Elsio\nDeformações clássicas pra cumprir tabela no shadertoy",
            "flags": 0,
            "hasliked": 0,
            "id": "4Xf3W8",
            "likes": 9,
            "name": "Lona w/some Color/rot/zoom",
            "published": 3,
            "tags": [
                "atan",
                "surface",
                "tecido",
                "toalha"
            ],
            "usePreview": 0,
            "username": "timmaffett",
            "viewed": 182
        },
        "renderpass": [
            {
                "code": "// Fork of \"Lona\" by Elsio. https://shadertoy.com/view/mtsczM\n// 2024-02-08 08:37:27\n\nvec2 deform(float z) {\n    return  vec2(\n        cos(z * 1.), \n        sin(z * 2.) \n    );\n}\n\n\nvec3 hsb2rgb( in vec3 c )\n{\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return (c.z * mix( vec3(1.0), rgb, c.y));\n}\n\n\n// simple mouse rotate and zoom for shader\n#define pi 3.14159265359 \n\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nvec2 mouse;\nvec2 mouseRotZoom(vec2 uv) {\n    // allow mouse zoom and rotate    \n    uv.xy *= r2d(-(mouse.x)*pi*2.);\n    uv *= (1./(1.0*mouse.y));\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/iResolution.y;\n\n    mouse = (iMouse.xy == vec2(0.)) ? vec2(1.0) : iMouse.xy/iResolution.xy;\n\n    uv = mouseRotZoom(uv);\n\n    vec2 p = uv * 5.;\n    vec3 col = vec3(0);\n    vec3 mouseColor;\n    if(iMouse.xy!=vec2(0.)) {\n      vec2 mouseUV = iMouse.xy / iResolution.xy;\n      mouseColor = hsb2rgb(vec3(mouseUV.x, mouseUV.y, 1.0));\n    } else {\n      mouseColor = vec3(1.);\n    }\n    \n \n    for (float i= .63; i < 6.3; i += .63){\n        p -= deform(i + iTime * .1); \n        \n        // spiral\n        float a = atan(p.x, p.y);\n        float r = length(p);\n        col += cos(r * 22. + a * 22. + iTime * 12.) * .2;\n    }\n        \n    //vec3 col2 = hsb2rgb(vec3((col.r+col.g)/3.14151*col.b*mouse.x/mouse.y, 0.9,0.9));\n    vec3 col2 = hsb2rgb(col);\n    col = mouseColor * col2 * pow(col, vec3(1., 1., 1. + cos(iTime) *.25));\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}