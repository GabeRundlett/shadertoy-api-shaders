{
    "Shader": {
        "info": {
            "date": "1703508040",
            "description": "features:\nspecular lighting\nsoft shadows\nsmooth min composition\nspatial repetition\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ddGBzt",
            "likes": 2,
            "name": "My first attempt at a raymarcher",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "Monetenbube",
            "viewed": 183
        },
        "renderpass": [
            {
                "code": "//Parts inspired by \n//https://michaelwalczyk.com/blog-ray-marching.html\n//https://iquilezles.org/articles/distfunctions/\n#define PI 3.1415926538\n\n\n#define MIN_D 0.001\n#define MAX_D 100.0\n#define MAX_I 1000\n#define SHADOW_SOFTNESS 0.9\n#define BG_C vec3(0.3, 0.8, 1.0)\n\n\n\n#define Sphere(x, y, z, r, cr, cg, cb) sdSphere(ray, vec3(x, y, z), r, vec3(cr, cg, cb))\n#define HPlane(h, cr, cg, cb) sdHPlane(ray, h, vec3(cr, cg, cb))\n#define MandelBulb(power, i, cr, cg, cb) sdMandelBulb(ray, power, i, vec3(cr, cg, cb))\n\n\nstruct MarchResult {\n    float d;\n    vec3 c;\n};\n\nvoid repeatXZ(inout vec3 ray, vec2 r) {\n    vec2 tmp = mod(ray.xz, r) - 0.5*r;\n\tray =  vec3(tmp.x, ray.y, tmp.y);\n}\nvoid repeatXYZ(inout vec3 ray, vec3 r) {\n    ray = mod(ray, r) - 0.5 * r;\n}\n\n\nMarchResult opU(MarchResult a, MarchResult b) {//Union\n    if (a.d < b.d) {\n        return a;\n    }\n    return b;\n}\n\nMarchResult opSU(MarchResult b, MarchResult a, float k) {//Smooth union\n    float smin = -log2(exp2( -k*a.d ) + exp2( -k*b.d ))/k;\n    \n    float t = clamp(b.d - a.d, -1.0, 1.0) / 2.0 + 0.5;\n    a.c = a.c * t + b.c * (1.0-t);\n    \n    a.d = smin;\n    return a;\n}\n\n\nMarchResult sdSphere(vec3 ray, vec3 p, float r, vec3 c) {\n    return MarchResult(distance(ray, p) - r, c);\n}\n\nMarchResult sdHPlane(vec3 ray, float h, vec3 c) {\n    return MarchResult(ray.y - h, c);\n}\n\nMarchResult sdMandelBulb(vec3 pos,float power, int max_i, vec3 c) {//Taken from http://blog.hvidtfeldts.net/index.php/2011/09/distance-estimated-3d-fractals-v-the-mandelbulb-different-de-approximations/\n\tvec3 z = pos;\n\tfloat dr = 1.0;\n\tfloat r = 0.0;\n\tfor (int i = 0; i < max_i ; i++) {\n\t\tr = length(z);\n\t\tif (r>4.0) break;\n\t\t\n\t\t// convert to polar coordinates\n\t\tfloat theta = acos(z.z/r);\n\t\tfloat phi = atan(z.y,z.x);\n\t\tdr =  pow( r, power-1.0)*power*dr + 1.0;\n\t\t\n\t\t// scale and rotate the point\n\t\tfloat zr = pow( r,power);\n\t\ttheta = theta*power;\n\t\tphi = phi*power;\n\t\t\n\t\t// convert back to cartesian coordinates\n\t\tz = zr*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));\n\t\tz+=pos;\n\t}\n\treturn MarchResult(0.5*log(r)*r/dr, c);\n}\n\nMarchResult sdScene(in vec3 ray) {\n    \n    //MarchResult p = HPlane(-3.0,    0.0, 1.0, 0.0);\n    \n    //repeatXYZ(ray, vec3(5.0, 5.0,  5.0));\n    /*\n    \n    return opSU(\n        Sphere(3.0*sin(iTime), -1.0, 5.0,    1.0,   1.0, 0.0, 0.0),\n        opSU(\n            Sphere(3.0*sin(iTime + PI * 2.0 / 3.0), -1.0, 5.0,    1.0,   0.0, 1.0, 0.0),\n            Sphere(3.0*sin(iTime + PI * 4.0 / 3.0), -1.0, 5.0,    1.0,   0.0, 0.0, 1.0),\n            8.0),\n        8.0\n    );*/\n    /*return opSU(\n        Sphere(0.0, -2.5, 0.0, 1.0,    1.0, 0.0, 0.0),\n        p,\n        5.0\n    );*/\n    return MandelBulb(8.0,min(10, int(iTime/10.0 + 3.0)), 1.0, 1.0, 1.0);\n    \n}\n\nvec3 calculate_normal(vec3 p) {\n    const vec3 s = vec3(0.001, 0.0, 0.0);\n\n    float gradient_x = sdScene(p + s.xyy).d - sdScene(p - s.xyy).d;\n    float gradient_y = sdScene(p + s.yxy).d - sdScene(p - s.yxy).d;\n    float gradient_z = sdScene(p + s.yyx).d - sdScene(p - s.yyx).d;\n\n    vec3 normal = vec3(gradient_x, gradient_y, gradient_z);\n    return normalize(normal);\n}   \n\n\nMarchResult marchRay(vec3 ray, vec3 rd) {\n    \n    for (int i = 0; i < MAX_I; i++) {\n        MarchResult res = sdScene(ray);\n        if (res.d > MAX_D) {\n            res.c = BG_C;\n            return res;\n        }\n        else if (res.d < MIN_D) {//hit \n        \n            vec3 light_position = vec3(5.0, 5.0, 5.0);\n            //light_position.x += iTime*10.0;\n            //light_position.z += iTime*2.0;\n            vec3 dir_to_light = normalize(light_position - ray);\n        \n            //Specular lighting\n            vec3 normal = calculate_normal(ray);\n            float diffuse_intensity = max(0.3, dot(normal, dir_to_light));\n            res.c *= diffuse_intensity;\n            \n            //Shadows\n            MarchResult closest = MarchResult(MAX_D, vec3(0.0));\n            ray += dir_to_light * SHADOW_SOFTNESS;\n            for (int j = 0; j < MAX_I; j++) {\n                MarchResult sres = sdScene(ray);\n                if (sres.d < closest.d) {closest = sres;}\n                if (sres.d > MAX_D) {\n                    break;\n                }\n                else if (res.d < MIN_D) {\n                    break;\n                }\n                ray += dir_to_light * sres.d;\n            }\n            float shadow_intensity = closest.d / SHADOW_SOFTNESS;\n            res.c *= shadow_intensity;\n            \n            \n            return res;\n        }\n        else {\n            ray += rd * res.d;\n        }\n    }\n    return MarchResult(MAX_D, BG_C);\n    \n    \n\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n\n    \n    vec3 ro = vec3(cos(iTime/2.0) * 2.5, -sin(iTime/2.0) * 2.5, sin(iTime/2.0) * 2.5);//ray origin(Camera position)\n\n    vec3 ta = vec3(0.0);//What the camera looks at(target)\n    //Camera rotation matrix\n    vec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(0.0), cos(0.0),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    mat3 camera_matrix =  mat3( cu, cv, cw );\n    \n    vec3 rd = camera_matrix * normalize(vec3(uv.x, uv.y * iResolution.y / iResolution.x, 1.0));//ray direction\n    MarchResult res = marchRay(ro, rd);\n\n    // Output to screen\n    fragColor = vec4(res.c,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}