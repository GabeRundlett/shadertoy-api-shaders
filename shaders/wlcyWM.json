{
    "Shader": {
        "info": {
            "date": "1609246470",
            "description": "Growth, wait a minute for the full experience",
            "flags": 32,
            "hasliked": 0,
            "id": "wlcyWM",
            "likes": 2,
            "name": "Cell tissue",
            "published": 3,
            "tags": [
                "growth"
            ],
            "usePreview": 0,
            "username": "andrinr",
            "viewed": 278
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 buffer = texture(iChannel0,uv).xyz;\n    fragColor = vec4(vec3(buffer.z),1.);\n    //fragColor = vec4(buffer,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Lichen\n\n\n// Andrin Rehmann\n// 2020\n// andrinrehmann.ch\n// andrinrehmann@gmail.com\n\n#define EXPANSION 7.5\n\n//note: uniformly distributed, normalized rand, [0;1[\nfloat nrand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nfloat rand( vec2 uv )\n{\n\tfloat t = fract( iTime );\n\treturn nrand( uv + 0.07*t );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat du = 1. / iResolution.x;\n    float dv = 1. / iResolution.y;\n    \n\tvec2 uv = fragCoord/iResolution.xy;\n    \n    // Cell\n\tfloat y = texture(iChannel0,uv).x;\n    // food\n    float f = texture(iChannel0,uv).z;\n    \n    // sum of surrounding y's\n    float s = 1./16. * texture(iChannel0,uv + vec2(-du,-dv)).x +\n              3./16.  * texture(iChannel0,uv + vec2(-du,0)).x + \n              1./16. * texture(iChannel0,uv + vec2(-du,dv)).x + \n              3./16.  * texture(iChannel0,uv + vec2(0,-dv)).x + \n              3./16.  * texture(iChannel0,uv + vec2(0,dv)).x +\n              1./16. * texture(iChannel0,uv + vec2(du,-dv)).x +\n              3./16.  * texture(iChannel0,uv + vec2(du,0)).x + \n              1./16. * texture(iChannel0,uv + vec2(du,dv)).x;\n\n    \n    // Diffusion\n    y = y + iTimeDelta * EXPANSION * (-y + s);\n    \n    // Food increases constantly\n    f += 0.01;\n    \n    // Food is eaten by cell\n    if (y > 0.1){\n       f -= 0.02;\n    }\n    \n    // Cell dies when not enough food\n    if (f < 0.1){\n        y -= 0.02;\n    }\n    // Cell grwos if enough food\n    else if (f > 0.9){\n        y += 0.01;\n    }\n    \n    if (distance(iMouse.xy, fragCoord) < 15. && iMouse.z > 0.){\n        f = 1.;\n    }\n    \n    // Init\n    if (iFrame < 1){\n        y = rand(uv);\n        f = rand(uv+vec2(0.2));\n    }\n    \n    fragColor = vec4(y, 0, f, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}