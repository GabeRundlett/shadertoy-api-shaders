{
    "Shader": {
        "info": {
            "date": "1587755188",
            "description": "Deeply Trippy Spiral Action :)",
            "flags": 0,
            "hasliked": 0,
            "id": "wdXBz4",
            "likes": 9,
            "name": "Spiral Offset 3",
            "published": 3,
            "tags": [
                "spiraltrippysinwibble"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 482
        },
        "renderpass": [
            {
                "code": "// non-black screen version - go full screen, keep watching... !!\n\n#define TAU 6.283185\n\nvec2 rot(vec2 v, float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c)*v;\n}\n\n// IQ UnevenCapsule distance func\nfloat cro(in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\nfloat sdUnevenCapsule( in vec2 p, in vec2 pa, in vec2 pb, in float ra, in float rb )\n{\n    p  -= pa;\n    pb -= pa;\n    float h = dot(pb,pb);\n    vec2  q = vec2( dot(p,vec2(pb.y,-pb.x)), dot(p,pb) )/h;\n    \n    //-----------\n    \n    q.x = abs(q.x);\n    \n    float b = ra-rb;\n    vec2  c = vec2(sqrt(h-b*b),b);\n    \n    float k = cro(c,q);\n    float m = dot(c,q);\n    float n = dot(q,q);\n    \n         if( k < 0.0 ) return sqrt(h*(n            )) - ra;\n    else if( k > c.x ) return sqrt(h*(n+1.0-2.0*q.y)) - rb;\n                       return m                       - ra;\n}\n\nfloat TimerInOut(vec4 v)\n{\n    return smoothstep(v.y,v.y+v.w,v.x) - smoothstep(v.z-v.w,v.z,v.x);\n}\nfloat Stime(float _t, float scale)\n{\n    return fract(_t*scale)*TAU;\n}\nfloat Mtime(float _t, float mval)\n{\n    return mod(_t,mval);\n}\n\n// Trippy spiral calc - Del 06/01/2018\nvec2 spiral(vec2 uv,float zoom, float len, float offset,vec2 capoff, float trip, float scount,float rmod)\n{\n    float d = length(uv) * zoom;\n    d=log(d*trip);\n    uv = rot(uv,sin(d*offset)+d*scount*rmod);\n\tfloat v = 1.0-sdUnevenCapsule(uv,vec2(0.0,0.0)+capoff,vec2(0.4*len,0.0)+capoff,0.0,0.4*len)*14.0;\n    return vec2(v,d);\t// dx , dy\n}\n\nvec2 directionalWaveNormal(vec2 p, float amp, vec2 dir, float freq, float speed, float time, float k)\n{\t\n\tfloat a = dot(p, dir) * freq + time * speed;\n\tfloat b = 0.5 * k * freq * amp * pow((sin(a) + 1.0) * 0.5, k) * cos(a);\n\treturn vec2(dir.x * b, dir.y * b);\n}\n\nvec3 summedWaveNormal(vec2 p)\n{\n    float time = iTime;\n\tvec2 sum = vec2(0.0);\n\tsum += directionalWaveNormal(p, 0.5, normalize(vec2(1, 1)), 5.0, 1.5, time, 1.0);\n\tsum += directionalWaveNormal(p, 0.25,normalize(vec2(1.4, 1.0)), 11.0, 2.4, time, 1.5);\n\tsum += directionalWaveNormal(p, 0.125, normalize(vec2(-0.8, -1.0)), 10.0, 2.0, time, 2.0);\n\tsum += directionalWaveNormal(p, 0.0625, normalize(vec2(1.3, 1.0)), 15.0, 4.0, time, 2.2);\n\tsum += directionalWaveNormal(p, 0.03125, normalize(vec2(-1.7, -1.0)), 5.0, 1.8, time, 3.0);\n\treturn normalize(vec3(-sum.x, -sum.y, 1.0));\n}\nvec3 background(vec2 p)\n{\n\tvec3 normal = summedWaveNormal(p);\n\tvec3 c = mix(vec3(0.1, 0.15, 0.1), vec3(0.2, 0.25, 0.4),  dot(normal, normalize(vec3(0.2, 0.2, 0.5))) * 0.5 + 0.5);\n\tc = mix(c, vec3(0.7, 0.9, 1.0), pow(dot(normal, normalize(vec3(-0.4, 0.1, 1.0))) * 0.5 + 0.5, 2.0));\n\tc = mix(c, vec3(0.95, 0.98, 1.0), pow(dot(normal, normalize(vec3(-0.1, -0.3, 0.5))) * 0.5 + 0.5, 10.0));\n    return clamp(c,0.0,1.0);\n}\n\nfloat Bub(vec2 uv,float scale)\n{\n    float time = iTime*0.75;\n    uv.y-=time*2./scale;\n    //uv.x += time*0.2;\n    uv.x+=sin(uv.y+time*.95)*0.025;\t///scale;\n\tuv*=scale;\n    vec2 s=floor(uv);\n    vec2 f=fract(uv);\n    float k=3.0;\n\tvec2 p =.5+.35*sin(11.*fract(sin((s+scale)*mat2(7.0,3.0,6.0,5.0))*5.))-f;\n    float d=length(p);\n    k=min(d,k);\n\tk=smoothstep(0.0,k,sin(f.x+f.y)*0.01);\n   \treturn k;\n}\n\nvec3 Bubbles(vec2 uv,float head,float d)\n{\n\tfloat c = Bub(uv,30.)*.3;\n\tc+=Bub(uv,20.)*.5;\n\tc+=Bub(uv,15.)*.8;\n\tc+=Bub(uv,10.);\n\tc+=Bub(uv,8.);\n\tc+=Bub(uv,6.);\n\tc+=Bub(uv,5.);\n    vec3 scol = vec3(clamp(c*0.3,0.0,0.3));\n    return scol;\n}\n\nvec3 checks(vec2 p)\n{\n    float d = length(p);\n    float head = 1.0-length(p);\n    d+=(0.5+sin(iTime*2.0)*0.5)*0.25;\n    p *= 0.25;\n    return Bubbles(p*(d+0.5), head,d);\n}\n\nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nfloat pMod1(inout float p, float size)\n{\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    float _t = iTime+2.8;\n    \n\n    // Create some blends over time...\n    float t1 = TimerInOut(vec4(Mtime(_t,9.6),1.0, 7.2, 1.8));\n    float t2 = TimerInOut(vec4(Mtime(_t,12.0),1.0, 9.0, 1.5));\n    float t3 = TimerInOut(vec4(Mtime(_t,21.0),6.0, 14.2, 2.8));\n    float t4 = TimerInOut(vec4(Mtime(_t,60.0),15.0,45.0,1.0));\n    float t5 = TimerInOut(vec4(Mtime(_t,85.0),57.0, 67.0, 3.1));\n    float t6 = TimerInOut(vec4(Mtime(_t,123.0),77.0,101.0,10.0));\n    float t7 = TimerInOut(vec4(Mtime(_t,50.0),28.0,45.0,3.5));\n    float t8 = TimerInOut(vec4(Mtime(_t,20.0),1.0,13.0,3.1));\n    float t9 = TimerInOut(vec4(Mtime(_t,200.0),100.0,159.0,0.5));\n    float t10 = TimerInOut(vec4(Mtime(_t,45.0),21.0,31.0,0.75));\n    float t11 = TimerInOut(vec4(Mtime(_t,30.0),7.0,11.0,0.75));\n    \n    // various spiral modifiers applied over time\n    float t = Stime(_t,0.4);\n    float offset = 25.0 * t1;\n\tfloat zoom = 1.0 + (sin(Stime(_t,0.17))*0.5) * t2;\n    vec2 capoff = vec2(sin(uv.y*4.0+Stime(_t,0.125))*0.25, sin(uv.x*2.0+Stime(_t,0.25))*0.75) * t3;\n    float m = 0.48+sin(Stime(_t,0.15)+uv.y+uv.x)*0.5;\n    float trip = 1.0-(m*t4);\n    float scmod = sin(Stime(_t,0.176));\n    float scount = 5.0+((3.0+(scmod*5.0))*t5);\n\n    float rmod = mix (1.0,sin(Stime(_t,0.1))*2.5,t11);\n\n    // debug... (disable effects)\n    //scount = 5.0;\n    //offset=0.0;\n    //zoom = 1.0;\n    //trip = 1.0;\n    //capoff = vec2(0.0);\n    \n\tvec2 dist = spiral(uv, zoom, t, offset, capoff, trip, scount,rmod);\n    \n    float distmod = 0.49+sin(dist.x*0.34+dist.y*1.6+sin(Stime(_t,.1)))*0.5;\n    dist.x = mix(dist.x, dist.x*distmod, t10);\n    \n//\tfloat v2 = smoothstep(0.5-0.1,0.5+0.1,dist.x);\n//\tfloat v2 = smoothstep(0.0,0.5,dist.x);\n\tfloat v2 = smoothstep(0.0, 1.5*fwidth(dist.x-0.5), dist.x-0.5);\n    \n\tfloat v = mix(v2,clamp(dist.x,0.0,3.0), t6);\n    //vec3 col = vec3(v*1.0-l/t);\n    vec3 col1 = checks(uv);\t////vec3(0.0,0.0,0.2);\n    vec3 col2 = vec3(1.0,0.6,0.5);\n    \n    // rainbow flavour...\n\tcol2 = mix(col2,hsv2rgb_smooth(vec3(fract(iTime*0.2)+dist.x*0.09+dist.y*0.2,0.8,clamp(v,0.35,1.0)))*0.7,t9);\n    \n    vec3 col3 = background(uv);\t//vec3(0.5,0.7,0.5);\n    col1 = mix(col1,col3*0.3, t7);\n    col2 = mix(col2,col3*0.9, t8);\n    //vec3 col = mix(col1,col2,v*1.0-dist.y/t);\n\n    float finalblend = clamp(v*1.0-dist.y/t,0.0,5.0);\n    vec3 col = mix(col1,col2,finalblend);\n\n    // vignette\n \tvec2 q = fragCoord/iResolution.xy;\n    col *= 0.3 + 0.7*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.25);\n    \n    // utter hack, overlay some coloured circles to show active mods... :)\n    if (iMouse.z>0.5)\n    {\n        uv.xy += 0.05;\n        float c = pMod1(uv.y,0.1);\n        if (c<-3.0)\n        {\n            uv.x -= 0.3;\n            c = pMod1(uv.x,0.1);\n            if (c>=-8.0)\n            {\n                float dd = length(uv)*2.0;\n                dd = 1.0-smoothstep(0.0,0.1,dd);\n                vec3 cf = vec3(0.0);\n                vec3 cc = hsv2rgb_smooth( vec3((c+8.0)/12.0,1.0,dd));\n                if (c<-7.0) cf = cc*t1;\n                else if (c<-6.0) cf = cc*t2;\n                else if (c<-5.0) cf = cc*t3;\n                else if (c<-4.0) cf = cc*t4;\n                else if (c<-3.0) cf = cc*t5;\n                else if (c<-2.0) cf = cc*t6;\n                else if (c<-1.0) cf = cc*t7;\n                else if (c<-0.0) cf = cc*t8;\n                else if (c<1.0) cf = cc*t9;\n                else if (c<2.0) cf = cc*t10;\n                else if (c<3.0) cf = cc*t11;\n                float _mm = smoothstep(0.0,0.1,length(cf)-0.2);\n                col = mix(col,cf,_mm);\n           \t}\n        }\n    }\n    \n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}