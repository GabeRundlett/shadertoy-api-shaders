{
    "Shader": {
        "info": {
            "date": "1661372197",
            "description": "A wallpaper",
            "flags": 0,
            "hasliked": 0,
            "id": "7lGyD1",
            "likes": 4,
            "name": "The Redmond wrinkle",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "abstract"
            ],
            "usePreview": 0,
            "username": "ruojake",
            "viewed": 296
        },
        "renderpass": [
            {
                "code": "// The Redmond wrinkle by Kristian Sivonen (ruojake)\n// CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0/)\n\nmat2 rot(float a)\n{\n    float s = sin(a),\n          c = cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat scene(vec3 p)\n{\n    p.xz *= rot(.2);\n    float a = atan(p.z, p.x) * 2.5;\n    a += length(p.xz) * 1.3;\n    p.xz *= 1. + (sin(a) + sin(a * 2.) * .5 + sin(a * 3.) * .25) * .25;\n    float t = abs(abs(abs(abs(abs(length(p.xz) - .5) - .4) - .2) - .1) - .05) - .001;\n    return max(t, p.y + 1. - (length(p.xz) * .4 - .1) - .2 * dot(sin(p.xz * 2.5), vec2(p.z * 3. + .5)));\n}\n\nvec3 normal(vec3 p, float d)\n{\n    const vec2 e = vec2(.00075,0);\n    return normalize(\n        d - vec3(\n            scene(p - e.xyy),\n            scene(p - e.yxy),\n            scene(p - e.yyx)\n        )\n    );\n}\n\nfloat shadow(vec3 ro, vec3 rd)\n{\n    float res = 1.;\n    float t = 0.;\n    \n    for(int i = 0; i < 160; ++i)\n    {\n        float d = scene(ro+rd*t);\n        res = min(res, 8.*d/t);\n        t += d;\n    }\n    \n    return max(res,0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n\n    float dth = fract(dot(fragCoord, vec2(.155013, .61233)));\n\n    vec3 col = vec3(.75 + uv.y * .5),\n          ro = vec3(0,.5,-2),\n          rd = normalize(vec3(uv, 1)),\n          p;\n          \n    rd.yz *= rot(.45);\n    float i, d = 0., t = dth * .2;\n    \n    for(i = 0.; i < 1. && t < 12.; i += 1./512.)\n    {\n        p = ro + rd * t;\n        d = scene(p)*.33;\n        if (abs(d) < .0001) break;\n        t += d;\n    }\n    \n    if (t < 12.)\n    {\n        vec3 n = normal(p,d);\n        vec3 ld = normalize(vec3(1,1,-1));\n        float frn = pow(1. - max(dot(rd,-n), 0.), 16.);\n        float l = dot(ld,n) * .5 + .5;\n        l *= l;\n        \n        l *= shadow(p + n * .001, ld);\n        l = max(l, frn * .5);\n        col = mix(vec3(.05, .1, .2), vec3(.1,.3,1.), sqrt(l));\n        col = mix(col, vec3(l), l*l*.75);\n    }\n\n    col *= 1. - pow(length(fragCoord / iResolution.xy - .5), 3.);\n\n    fragColor = vec4(col + dth / 255.,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}