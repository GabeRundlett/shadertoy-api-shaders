{
    "Shader": {
        "info": {
            "date": "1506661430",
            "description": "thing",
            "flags": 0,
            "hasliked": 0,
            "id": "XlXcz2",
            "likes": 0,
            "name": "Hyper Hyperboloids",
            "published": 3,
            "tags": [
                "raytrace",
                "4d"
            ],
            "usePreview": 0,
            "username": "Simplex",
            "viewed": 99
        },
        "renderpass": [
            {
                "code": "const float pi = 4.0*atan(1.0);\n\n#define numSlices 30\n#define sliceDiff .1\n\nvec3 r(vec3 v, vec2 r)//rodolphito's rotation\n{\n    vec4 t = sin(vec4(r, r + 1.5707963268));\n    float g = dot(v.yz, t.yw);\n    return vec3(v.x * t.z - g * t.x,\n                v.y * t.w - v.z * t.y,\n                v.x * t.x + g * t.z);\n}\n\nfloat potential(vec4 x, mat4 A, vec4 B, float C){return dot(x, A * x) + dot(B, x) + C;}\n\nstruct intersection {vec4 norm; vec2 proj;};\n\nintersection trace(vec4 ro, vec4 rd, mat4 A, vec4 B, float C){\n    float a = dot(rd, A * rd);\n    float b = dot(rd, (A + transpose(A)) * ro + B);\n    float c = C + dot(A * ro + B, ro);\n    float disc = b * b - 4.0 * a * c;\n    if(disc < 0.0) return intersection(vec4(0), vec2(9e9));\n    disc = sqrt(disc);\n    float t = .5 * (disc * sign(-potential(ro, A, B, C)) - b) / a;\n    if (t < 0.0) return intersection(vec4(0), vec2(9e9));\n    return intersection(normalize(A*(t*rd + ro)), t*vec2(length(rd.xyz), rd.w));\n}\n\nvec4 render(vec4 ro, vec2 p){\n    vec3 col = vec3(0);\n    //*\n    mat4 A = mat4(-10, 0.0, 0.0, 0.0,\n\t              0.0, 10, 0.0, 0.0,\n                  0.0, 0.0, 10, 0.0,\n                  0.0, 0.0, 0.0, -10);\n//*/\n    vec4 B = vec4(0.0, 0.0, 0.0, 0.0);\n    float C = -1.0;\n    \n    //vec2 m = sin(0.25*vec2(iTime, iTime + 2.0*pi));\n    vec2 m = (iMouse.xy == vec2(0)) ? vec2(0) : (2.0*iMouse.xy - iResolution.xy)/iResolution.y;\n    intersection intersect;\n    for(int i = -numSlices/2; i < numSlices/2; i++){\n        float fi = float(i);\n        vec4 hyperPix = vec4(p, 2, sliceDiff*fi);\n        vec4 rd = normalize(hyperPix - ro);\n        ro.xyw = r(ro.xyw, m);\n        rd.xyw = r(rd.xyw, m);\n        intersect = trace(ro, rd, A, B, C);\n        if(intersect.proj.x < 9e4){\n            if(intersect.proj.y < 0.0) col.r -= .01/intersect.proj.y;\n            else col.g += .01/intersect.proj.y;\n            col.b += .1/intersect.proj.x;\n        }\n    }\n    col *= max(0.0, intersect.norm.x*intersect.norm.x);\n    return vec4(col, 1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    vec4 ro = vec4(0, 0, -2, 0);\n    vec2 m = (2.0*iMouse.xy - iResolution.xy)/iResolution.y;\n    fragColor = render(ro, p);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}