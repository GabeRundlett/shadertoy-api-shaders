{
    "Shader": {
        "info": {
            "date": "1663039363",
            "description": "Simple shader to do a rounded rectangle learned from https://www.warp.dev/blog/how-to-draw-styled-rectangles-using-the-gpu-and-metal and https://stackoverflow.com/questions/59197671/glsl-rounded-rectangle-with-variable-border",
            "flags": 0,
            "hasliked": 0,
            "id": "NldBDH",
            "likes": 2,
            "name": "fyne rounded rectangle",
            "published": 3,
            "tags": [
                "stroke",
                "rectangle",
                "fill",
                "rounded",
                "fyne"
            ],
            "usePreview": 0,
            "username": "bluebugs",
            "viewed": 327
        },
        "renderpass": [
            {
                "code": "const float strokeWidth = 10.0;\nconst float radius = 350.0;\n\nconst vec2 backgroundGradientStart = vec2(0.0,0.0);\nconst vec2 backgroundGradientEnd = vec2(1.0,0.0);\nconst float backgroundSteps[8]= float[8](0.0, 0.5, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0);\nconst vec4 backgroundColors[8] = vec4[8](vec4(0,0,1.0,1.0), vec4(0,0,0.0,1.0), vec4(0,0,1.0,1.0), vec4(0,0,1.0,1.0),\n                                         vec4(0,0,1.0,1.0), vec4(0,0,0.5,1.0), vec4(0,0,0.3,1.0), vec4(0,0,1.0,1.0));\n\nconst vec2 strokeGradientStart = vec2(0.0,0.0);\nconst vec2 strokeGradientEnd = vec2(1.0,1.0);\nconst float strokeSteps[8] = float[8](0.1, 0.2, 0.3, 0.4, 0.6, 0.7, 0.8, 0.9);\nconst vec4 strokeColors[8] = vec4[8](vec4(0,1.0,0,1.0),vec4(0,0.3,0,1.0),vec4(0,1.0,0,1.0),vec4(0,0.3,0,1.0),\n                                     vec4(0,1.0,0,1.0),vec4(0,0.3,0,1.0),vec4(0,1.0,0,1.0),vec4(0,0.3,0,1.0));\nconst vec2 fillGradientStart = vec2(0.0,0.0);\nconst vec2 fillGradientEnd = vec2(1.0,1.0);\nconst float fillSteps[8] = float[8](0.0, 0.2, 0.3, 0.4, 0.6,0.7, 0.8, 1.0);\nconst vec4 fillColors[8] = vec4[8](vec4(1.0,0,0,1.0),vec4(0.3,0,0,1.0),vec4(1.0,0,0,1.0),vec4(0.3,0,0,1.0),\n                                   vec4(1.0,0,0,1.0),vec4(0.3,0,0,1.0),vec4(1.0,0,0,1.0),vec4(0.3,0,0,1.0));\n\nfloat rectangleDistanceField(vec2 pixelPosition, vec2 rectangleCenter, float r)\n{\n    vec2 q = abs(pixelPosition) - rectangleCenter + vec2(r);\n\treturn length(max(q, 0.0)) + min(max(q.x, q.y), 0.0) - r;   \n}\n\nvec4 deriveColor(vec2 pixelPosition, vec2 startGradient, vec2 endGradient, in float[8] steps, in vec4[8] colors)\n{\n   vec2 adjustedEnd = endGradient - startGradient;\n   // -1.0 <= dot <= 1.0 => 0.0 < step < 1.0\n   float h = (1.0 + dot(pixelPosition - startGradient, endGradient) / dot(endGradient, endGradient))/2.0;\n   \n   vec4 outColor = mix(colors[0], colors[1], smoothstep(steps[0], steps[1], h));\n   for (int i = 2; i < 8; i++)\n   {\n     outColor = mix(outColor, colors[i], smoothstep(steps[i-1], steps[i], h));\n   }\n   return outColor;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float halfStrokeWidth = strokeWidth / 2.0;\n\n    vec2 halfResolution = iResolution.xy / 2.0;\n    vec2 halfRectangleSize = halfResolution - vec2(halfStrokeWidth);    \n\tvec2 pixelPosition = (fragCoord - halfResolution);\n    vec2 relativePixelPosition = pixelPosition / iResolution.xy;\n    \n    float dist = rectangleDistanceField(pixelPosition, halfRectangleSize, radius - halfStrokeWidth);\n\n    vec4 insideColor = deriveColor(relativePixelPosition, strokeGradientStart, strokeGradientEnd, strokeSteps, strokeColors);\n    vec4 outsideColor = deriveColor(relativePixelPosition, backgroundGradientStart, backgroundGradientEnd, backgroundSteps, backgroundColors);\n\n    if (halfStrokeWidth > 0.0)\n    {\n        if (dist < 0.0)\n        {\n            outsideColor = deriveColor(relativePixelPosition, fillGradientStart, fillGradientEnd, fillSteps, fillColors);\n        } \n        \n        dist = abs(dist) - halfStrokeWidth;\n    }\n    \n    float blendAmount = smoothstep(-1.0, 1.0, dist);\n    \n    fragColor = mix(insideColor, outsideColor, blendAmount);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}