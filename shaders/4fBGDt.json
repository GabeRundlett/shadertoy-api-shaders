{
    "Shader": {
        "info": {
            "date": "1704763032",
            "description": "cellular automata that uses convolutions. click to randomize",
            "flags": 32,
            "hasliked": 0,
            "id": "4fBGDt",
            "likes": 7,
            "name": "neural worms",
            "published": 3,
            "tags": [
                "convolution"
            ],
            "usePreview": 0,
            "username": "HoosierTransfer",
            "viewed": 201
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = vec4(texture(iChannel0, uv).x, 0, 0, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float hash( vec2 f )\n{   uvec2 //x = vec2BitsToUvec2 uvec2( floatBitsToUint(f.x), floatBitsToUint(f.y) ),\n          x = floatBitsToUint(f),\n          q = 1103515245U * ( x>>1U ^ x.yx    );\n    return float( 1103515245U * (q.x ^ q.y>>3U) ) / float(0xffffffffU);\n}\n\nvec2 getCoords(vec2 coord, vec2 offset){\n    return mod(coord + (1./iResolution.xy) * offset, 1.0);\n}\n\nfloat inverse_gaussian(float x) {\n  return -1./pow(2., (0.6*pow(x, 2.)))+1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    if (iFrame == 0 || iMouse.w > 0.) {\n        fragColor = vec4(hash(fragCoord + iTime));\n        return;\n    }\n    float kernel[9] = float[9](0.68, -0.9, 0.68, -0.9, -0.66, -0.9, 0.68, -0.9, 0.68);\n    vec2 uv = fragCoord/iResolution.xy;\n    float sum = \n                  texture(iChannel0, getCoords(uv, vec2( 1.,-1.))).x * kernel[0] \n                + texture(iChannel0, getCoords(uv, vec2( 0.,-1.))).x * kernel[1]\n                + texture(iChannel0, getCoords(uv, vec2(-1.,-1.))).x * kernel[2]\n                + texture(iChannel0, getCoords(uv, vec2( 1., 0.))).x * kernel[3]\n                + texture(iChannel0, getCoords(uv, vec2( 0., 0.))).x * kernel[4]\n                + texture(iChannel0, getCoords(uv, vec2(-1., 0.))).x * kernel[5]\n                + texture(iChannel0, getCoords(uv, vec2( 1., 1.))).x * kernel[6]\n                + texture(iChannel0, getCoords(uv, vec2( 0., 1.))).x * kernel[7]\n                + texture(iChannel0, getCoords(uv, vec2(-1., 1.))).x * kernel[8];\n    fragColor = vec4(clamp(inverse_gaussian(sum), 0., 1.));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}