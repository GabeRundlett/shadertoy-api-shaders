{
    "Shader": {
        "info": {
            "date": "1454969869",
            "description": "feel the motion sickness ",
            "flags": 0,
            "hasliked": 0,
            "id": "4dy3Ry",
            "likes": 7,
            "name": "radical rings",
            "published": 3,
            "tags": [
                "raymarching",
                "raymarch",
                "torus",
                "color",
                "motion",
                "shift",
                "sickness"
            ],
            "usePreview": 0,
            "username": "asneakyfatcat",
            "viewed": 805
        },
        "renderpass": [
            {
                "code": "float map(vec3 a)\n{\n    //return length(p)-1.0;\n    vec3 p = fract(a)*2.0-1.0;\n    //vec2 q = vec2(length(p.xz)-2.0 - sin(iTime),p.y);\n    vec2 q = vec2(length(p.xz)-1.0,p.y);\n    return length(q)-.07;\n}\n\nfloat trace(vec3 origin, vec3 ray)\n{\n\tfloat t = 0.0;\n    for (int i = 0; i < 64; ++i){\n     \tvec3 p = origin + ray*t;\n        float d = map(p);\n        t += d*.35;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv*2.0 - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    //comment for no warping\n    uv.x += sin(uv.y+iTime);\n    \n    vec3 rey = normalize(vec3(uv, .5)); // decrease z for greater camera FoV\n    \n    float the = iTime*.5;\n    //rey.xz *= mat2(cos(the),-sin(the),sin(the),cos(the));\n    \n    // rotation matrix\n    rey *= mat3(cos(the),sin(the),sin(the),.7*sin(the),.7,0.0,-sin(the),cos(the),cos(the)); \n    \n    vec3 origin = vec3(iTime*.4,iTime*.2, 0.0);\n    float t = trace(origin, rey);\n    float fog = 1.0/(0.5+t*t*.3);\n    //vec3 fc = vec3(fog);\n    vec3 fc = vec3(sin(t)*9.0);\n    fc.x = sin(iTime)*fc.x;\n    fc.y = .33*sin(iTime)*fc.y;\n    fc.z = .7*cos(iTime)+1.0;\n    vec3 fcc = vec3(fog)*fc;\n    \n    //fc.x = (sin(iTime)+1.0)/2.0;\n    //fc.x = 2.0-2.0*sin(iTime);\n\tfragColor = vec4(fcc,.9);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}