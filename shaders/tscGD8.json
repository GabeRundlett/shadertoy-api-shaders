{
    "Shader": {
        "info": {
            "date": "1568398505",
            "description": "Toying some equalizer ideas.\n\nSource music:\nhttps://soundcloud.com/maximum-sunshine/caged-tigers",
            "flags": 96,
            "hasliked": 0,
            "id": "tscGD8",
            "likes": 4,
            "name": "Maximum Sunshine",
            "published": 3,
            "tags": [
                "music",
                "equalizer"
            ],
            "usePreview": 0,
            "username": "antonOTI",
            "viewed": 732
        },
        "renderpass": [
            {
                "code": "#define fGlobalTime (iTime * .4)\n\nmat2 rot(float a)\n{\n  float ca = cos(a);float sa = sin(a);\n  return mat2(ca,-sa,sa,ca);\n}\n\nfloat fbm(vec2 p)\n{\n  mat2 m = mat2(.8,-.6,.6,.8);\n  float acc = 0.;\n  p *= -m * m * .5;\n  for(float i = 1.; i < 6.; ++i)\n  {\n    p += vec2(i * 1251.675, i * 6568.457) + vec2(-fGlobalTime * .3);\n    p *= m;\n    float octave = (sin(p.x * i) + cos(p.y * i)) * 1./(i * .5); \n     // octave = pow(octave , 2.);\n    acc += octave;\n  }\n\n  return acc;\n}\nfloat mHeight = 0.;\n\nfloat map(vec3 p)\n{\n    vec2 samplePos = p.xz;\n    samplePos.y = 1. - samplePos.y;\n    samplePos.y += 10.;\n    samplePos.y *= .025;\n\t//samplePos += (hash11(p.x + 1000.) - .5) * .1;\n    samplePos.x *= .01;\n    samplePos = abs(samplePos);\n    samplePos.x = .25 - samplePos.x;\n    \n    float musicSample = texture(iChannel0, samplePos.yx).r;\n    mHeight = musicSample;\n    \n    float diff = musicSample ;\n    diff = -(diff) * .5;\n    diff -= (diff + .1) * fbm(p.xz) * .2;\n    \n    p.y += diff;\n    p.y += pow(p.z * .1, 2.) + pow(p.x * .095, 2.);\n    \n    return p.y;\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 e = vec2(.01,.0);\n    return normalize(vec3(\n    \tmap(p + e.xyy) - map(p - e.xyy),\n    \tmap(p + e.yxy) - map(p - e.yxy),\n    \tmap(p + e.yyx) - map(p - e.yyx)\n    ));\n}\n\nvoid ray(inout vec3 cp,in vec3 rd,out float st,out float cd,out float d)\n{\n    for(st = 0.; st < 1.; st += 1. / 64.)\n    {\n        cd = map(cp);\n        if(cd < .01 || cd > 15.)\n        {\n           break;\n        }\n        \n        d += cd;\n        cp += rd * cd ;\n    }\n}\n\nvec3 lookAt(vec3 ro, vec3 ta, vec2 uv)\n{\n    vec3 fd = normalize(ta - ro);\n    vec3 up = cross(fd, vec3(1.,0.,0.));\n   \tvec3 ri = cross(fd, up);\n    \n   return normalize(fd - ri * uv.x + up * uv.y); \n}\n\nvec3 blueSky = vec3(.729, .708, .922) * .3;\nvec3 sunCol = vec3(.98,.735,.04);\nvec3 darkBlue = vec3(.05,.01,.15);\n\nvec3 skyCol(vec3 rd)\n{\n    vec3 sunDir = normalize(vec3(0.,.3,1.));\n\n//    sunDir = normalize(vec3(0.,-.5,1.));\n    \n    float sky = dot(rd, sunDir);\n    \n    \n    vec3 up = cross(-sunDir, vec3(0.,1.,0.));\n    vec3 ri = cross(up, -sunDir);\n    vec2 dp = vec2(dot(rd, ri), dot(rd,up));\n    float a = atan(dp.y, dp.x) / TAU + .5;\n    a += (hash11(a+1.)- .5) * .01;\n    a = fract(a + fGlobalTime * .1);\n    float nowSound = texture(iChannel0, vec2(0.,a)).x;\n\tnowSound = sin(nowSound * PI - PI * .5) * .5 + .5;\n    //nowSound += .1;\n    \n    float radius = .09 - nowSound * .005;\n    \n    float circle = 1. - smoothstep(abs(sky - 1. + radius), -.005,.01);\n    circle *= circle;\n    sky = pow(sky, 19.);\n    sky = clamp(sky *2.2, 0.,1.);\n    vec3 col = mix(sunCol, blueSky, 1. - sky); \n    col += circle * (nowSound * nowSound + .025);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5)/iResolution.y;\n\tvec3 col = vec3(0.);\n    \n    float len = length(uv - vec2(0.,.2));\n    float a = (atan(uv.y, uv.x) + PI) / TAU;\n    \n    a = fract(a + fGlobalTime * .1);\n    \n    float nowSound = texture(iChannel0, vec2(0.,a)).x;\n\tnowSound = sin(nowSound * PI - PI * .5) * .5 + .5;\n    nowSound += .1;\n    float circl = 1. - smoothstep(abs(len - .2 - nowSound * .025), -.0025, .0025);\n    \n    vec3 cp = vec3(0.,5.,-10.);\n    vec3 ta = vec3(0.,0.,0.);\n    vec3 rd = lookAt(cp,ta,uv);\n    \n    float st, cd, dist;\n    ray(cp, rd, st, cd, dist);\n    \n    col = skyCol(rd);\n    \n\n    //col += circl * nowSound * nowSound;        \n    if(cd < .01)\n    {\n        \n        col = vec3(0.);\n        vec3 seaCol = vec3(.01,.05,.07);\n        float height = mHeight;\n        \n        vec3 norm = normal(cp);\n        float si = clamp(dot(norm, -rd), 0.,1.);\n        //col += seaCol * si;\n        //col = grad(height * 3.) * texture(iChannel0,vec2(0.,0.)).a;\n        \n        \n        float skyUpI = clamp(dot(norm, vec3(0.,1.,0.)),0.,1.);\n        col = mix(col, darkBlue, skyUpI * 2.);\n        \n        vec3 refl = reflect(rd, norm);\n        \n        float skyFdI = dot(refl, normalize(vec3(0.,1.,1.)));\n        \n        vec3 skyFdCol = skyCol(refl);\n        col += skyFdCol * skyFdI * .5;\n    }\n    \n    \n    \n    col = pow(col, vec3(.4545));\n    \n    fragColor = vec4(col,1.0);\n\tif(iMouse.z > 0.)\n    {\n        fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define DEFFIL 1.\n\nconst float damp = .001;\nconst float songDuration = 213.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord.xy / iResolution.xy);\n    \n    \n    float now = texture(iChannel0,vec2(uv.y, .0)).x;\n\t\n    now += dFdy(now)*.1;\n    \n//    now -= .255;\n    now *= 2.;\n    now *= now;\n   // fragColor = vec4(0.);\n\n    fragColor = vec4(now);\n    \n    if(fragCoord.x > DEFFIL)\n    {\n        float pastX = floor(fragCoord.x * DEFFIL) / DEFFIL - DEFFIL;\n        pastX /= iResolution.x;\n        vec4 past = texture(iChannel1,vec2(pastX, uv.y));\n        fragColor = past;\n        fragColor.b = max(past.b - damp,0.);\n    \t//fragColor.b = dFdx(fragColor.b) * step(0.,fragColor.r);\n    }\n    \n    fragColor.a = iChannelTime[0] / songDuration;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 19544,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/maximum-sunshine/caged-tigers"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.14159\n#define TAU  6.28319\n\n// Hashes from https://www.shadertoy.com/view/4djSRW\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n//----------------------------------------------------------------------------------------\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n//from https://www.shadertoy.com/view/4t2SWW\n// The MIT License\n// Copyright Â© 2015 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 grad(float f)\n{\n    return pal( f, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30) );\n} \n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}