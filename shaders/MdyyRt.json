{
    "Shader": {
        "info": {
            "date": "1522916853",
            "description": "Fast EdgeDetection & FXAA",
            "flags": 32,
            "hasliked": 0,
            "id": "MdyyRt",
            "likes": 80,
            "name": "Edge FXAA",
            "published": 3,
            "tags": [
                "edgedetection",
                "fxaa",
                "freesytle"
            ],
            "usePreview": 0,
            "username": "834144373",
            "viewed": 2892
        },
        "renderpass": [
            {
                "code": "//This FreeStyle OutLine Edge by 834144373(恬纳微晰)\n/*----------------------\n\tFXAA\nhum...you can also find on wiki\n----------------------*/\n#define _Strength 10.\n#define R iResolution.xy\n#define _EdgeTexture iChannel0\nfloat GetLumi(vec3 col){\n    return dot(col,vec3(0.299, 0.587, 0.114));\n}\nvec4 FXAA(sampler2D _Tex,vec2 uv){\n    vec3 e = vec3(1./R,0.);\n\n    float reducemul = 0.125;// 1. / 8.;\n    float reducemin = 0.0078125;// 1. / 128.;\n\n    vec4 Or = texture(_Tex,uv); //P\n    vec4 LD = texture(_Tex,uv - e.xy); //左下\n    vec4 RD = texture(_Tex,uv + vec2( e.x,-e.y)); //右下\n    vec4 LT = texture(_Tex,uv + vec2(-e.x, e.y)); //左上\n    vec4 RT = texture(_Tex,uv + e.xy); // 右上\n\n    float Or_Lum = GetLumi(Or.rgb);\n    float LD_Lum = GetLumi(LD.rgb);\n    float RD_Lum = GetLumi(RD.rgb);\n    float LT_Lum = GetLumi(LT.rgb);\n    float RT_Lum = GetLumi(RT.rgb);\n\n    float min_Lum = min(Or_Lum,min(min(LD_Lum,RD_Lum),min(LT_Lum,RT_Lum)));\n    float max_Lum = max(Or_Lum,max(max(LD_Lum,RD_Lum),max(LT_Lum,RT_Lum)));\n\n    //x direction,-y direction\n    vec2 dir = vec2((LT_Lum+RT_Lum)-(LD_Lum+RD_Lum),(LD_Lum+LT_Lum)-(RD_Lum+RT_Lum));\n    float dir_reduce = max((LD_Lum+RD_Lum+LT_Lum+RT_Lum)*reducemul*0.25,reducemin);\n    float dir_min = 1./(min(abs(dir.x),abs(dir.y))+dir_reduce);\n    dir = min(vec2(_Strength),max(-vec2(_Strength),dir*dir_min)) * e.xy;\n\n    //------\n    vec4 resultA = 0.5*(texture(_Tex,uv-0.166667*dir)+texture(_Tex,uv+0.166667*dir));\n    vec4 resultB = resultA*0.5+0.25*(texture(_Tex,uv-0.5*dir)+texture(_Tex,uv+0.5*dir));\n    float B_Lum = GetLumi(resultB.rgb);\n\n    //return resultA;\n    if(B_Lum < min_Lum || B_Lum > max_Lum)\n        return resultA;\n    else \n        return resultB;\n}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n\tC = FXAA(_EdgeTexture,U/R);\n    if(iMouse.y>R.y/2.)\n\t\tC = texture(_EdgeTexture,U/R);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Venice. Created by Reinder Nijhoff 2013\n// @reindernijhoff\n//\n// https://www.shadertoy.com/view/MdXGW2\n//\n// My attempt to create a procedural city with a lot of lights. The city is inspired by Venice. \n// The shader is a combination of my shaders: https://www.shadertoy.com/view/Mdf3zM and \n// https://www.shadertoy.com/view/lslGDB.\n// (I have never been in Venice btw)\n//\n\n// #define SHOW_ORNAMENTS\n#define SHOW_GALLERY\n#define SHOW_LIGHTS\n#define SHOW_BRIDGES\n#define SHOW_MOON_AND_CLOUDS\n\n//----------------------------------------------------------------------\n\n#define BUMPFACTOR 0.2\n#define EPSILON 0.1\n#define BUMPDISTANCE 200.\n\n#define CAMERASPEED 15.\n\n#define BUILDINGSPACING 20.\n#define MAXBUILDINGINSET 12.\n\n#define GALLERYHEIGHT 10.5\n#define GALLERYINSET 2.5\n\nfloat time;\n\nfloat hash( float n ) {\n\treturn fract(sin(n)*32.5454412211233);\n}\nvec2 hash2( float n ) {\n\treturn fract(sin(vec2(n,n+1.0))*vec2(11.1451239123,34.349430423));\n}\nvec3 hash3( float n ) {\n\treturn fract(sin(vec3(n,n+1.0,n+2.0))*vec3(84.54531253,42.145259123,23.349041223));\n}\n\nfloat noise( in vec2 x ) {\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\n\tvec2 uv = p.xy + f.xy*f.xy*(3.0-2.0*f.xy);\n\n\treturn -1.0 + 2.0*textureLod( iChannel0, (uv+0.5)/256.0, 0.0 ).x;\n}\n\nfloat noise( in vec3 x )\n{\n\tfloat  z = x.z*64.0;\n\tvec2 offz = vec2(0.317,0.123);\n\tvec2 uv1 = x.xy + offz*floor(z); \n\tvec2 uv2 = uv1  + offz;\n\treturn mix(textureLod( iChannel0, uv1 ,0.0).x,textureLod( iChannel0, uv2 ,0.0).x,fract(z))-0.5;\n}\n\nconst mat2 m2 = mat2( 0.80, -0.60, 0.60, 0.80 );\n\nconst mat3 m3 = mat3( 0.00,  0.80,  0.60,\n                     -0.80,  0.36, -0.48,\n                     -0.60, -0.48,  0.64 );\n\nfloat fbm( vec3 p ) {\n    float f = 0.0;\n    f += 0.5000*noise( p ); p = m3*p*2.02;\n    f += 0.2500*noise( p ); p = m3*p*2.03;\n    f += 0.1250*noise( p ); p = m3*p*2.01;\n    f += 0.0625*noise( p );\n    return f/0.9375;\n}\n\n//----------------------------------------------------------------------\n// distance functions\n\nfloat sdBox( vec3 p, vec3 b ) {\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\nfloat sdSphere( vec3 p, float s ) {\n    return length(p)-s;\n}\nfloat udBox( vec3 p, vec3 b) {\n  return length(max(abs(p)-b,0.0));\n}\nfloat sdCylinderXY( vec3 p, vec2 h ) {\n  return max( length(p.xy)-h.x, abs(p.z)-h.y );\n}\nfloat sdCylinderXZ( vec3 p, vec2 h ) {\n  return max( length(p.xz)-h.x, abs(p.y)-h.y );\n}\nfloat sdTriPrism( vec3 p, vec2 h ) {\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\n//----------------------------------------------------------------------\n\nfloat opS( float d1, float d2 ) {\n    return max(-d2,d1);\n}\nfloat opU( float d1, float d2 ) {\n    return min(d2,d1);\n}\nvec2 opU( vec2 d1, vec2 d2 ) {\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\nfloat opI( float d1, float d2 ) {\n    return max(d1,d2);\n}\n\n//----------------------------------------------------------------------\n// building functions\n\nfloat getXoffset( float z ) {\n\treturn 20.*sin( z*0.02);\n}\n\nvec2 getBuildingInfo( in vec3 pos ) {\n\tvec2 res;\n\t// base index\t\n\tres.x = floor( pos.z/BUILDINGSPACING + 0.5 );\n\t// base z coord\n\tres.y = res.x * BUILDINGSPACING;\n\t\n\t// negative index for buildings at the right side\n\tres.x *= sign( pos.x + getXoffset(pos.z) );\n\t\n\treturn res;\n}\n\nvec4 getBuildingParams( in float buildingindex ) {\n\tvec3 h = hash3( buildingindex );\n\treturn vec4(\n\t\t20. + 4.5*floor( h.x*7. ),\t // height\n\t\th.y*MAXBUILDINGINSET,\n\t\tstep(h.z, 0.5),\t\t\t\t // sidewalk\n\t\tstep(abs(h.z-0.4),0.25)\t\t // balcony\n\t);\n}\n\nfloat baseBuilding( in vec3 pos, in float h ) {\n\tvec3 tpos = vec3( pos.z, pos.y, pos.x );\n\t\n\tfloat res = \n\topS(\t\t\n\t\t// main building\n\t\tudBox( tpos, vec3( 8.75, h, 8.75 ) ),\n\t\t\t// windows\n\t\topS(\n\t\t\topU(\n\t\t\t\tsdBox( vec3( mod(tpos.x+1.75, 3.5)-1.75, mod(tpos.y+4.5, 9.)-2.5, tpos.z-5.), vec3( 1.,2.,4.) ),\n\t\t\t\tsdCylinderXY( vec3( mod(tpos.x+1.75, 3.5)-1.75, mod(tpos.y+4.5, 9.)-4.5, tpos.z-5.), vec2( 1.,4.) )\n\t\t\t),\n\t\t\tudBox( tpos+vec3(0.,-h,0.), vec3( 9.0, 1.0, 9.0 ) )\n\t\t)\t\t\n\t);\n\t\n\tres =\n\topU( \n\t\tres,\n\t\topI( // main building windows\n\t\t\tudBox( tpos, vec3( 8.75, h, 8.75 ) ), \n\t\t\topU(\n\t\t\t\tudBox(  vec3( mod(tpos.x+1.75, 3.5)-1.75, tpos.y, tpos.z-8.45), vec3( 0.05, h, 0.05 ) ),\n\t\t\t\tudBox(  vec3( tpos.x, mod(tpos.y+0.425, 1.75)-0.875, tpos.z-8.45), vec3( 10.0, 0.05, 0.05 ) )\n\t\t\t)\n\t\t)\n\t);\n\treturn res;\t\n}\n\nfloat baseGallery( in vec3 pos ) {\n\tvec3 tpos = vec3( pos.z, pos.y, pos.x );\n\t\n\tfloat res = \n\topU(\t\n\t\topS(\n\t\t\tudBox( tpos+vec3(0.,0.,-GALLERYINSET), vec3( 8.75, GALLERYHEIGHT, 0.125 ) ),\n\t\t\topU(\n\t\t\t\tsdBox( vec3( mod(tpos.x+1.75, 3.5)-1.75, tpos.y-5., tpos.z-5.), vec3( 1.6,3.,10.) ),\n\t\t\t\tsdCylinderXY( vec3( mod(tpos.x+1.75, 3.5)-1.75, tpos.y-8., tpos.z-5.), vec2( 1.6,10.) )\n\t\t\t)\n\t\t),\n\t\tsdTriPrism( vec3( tpos.z+3.4,-44.4+3.9*tpos.y, tpos.x), vec2( 7.5, 8.7 ) )\n\t);\n\t\n\treturn res;\t\n}\n\nfloat baseBalcony( in vec3 pos, in float h ) {\n\tfloat res = opI(\t\t\n\t\t// main building\n\t\tudBox( pos, vec3( 9.0, h, 9.0 ) ),\n\t\t\t// balcony\n\t\tsdBox( vec3( pos.x, mod(pos.y+4.5, 9.)-7.5, pos.z-5.), vec3( 40.,0.5,40.) )\n\t);\n\treturn res;\t\t\n}\n\nfloat baseBridge( in vec3 pos ) {\n\tpos.x *= 0.38;\n\tfloat res = \n\topS(\t\n\t\topU( \n\t\t\tsdBox( pos, vec3( 4., 2., 2.5 ) ),\n\t\t\tsdTriPrism( vec3( pos.x,-8.+3.*pos.y, pos.z), vec2( 4.5, 2.5 ) )\n\t\t),\n\t\tsdCylinderXY( pos+vec3( 0., 1.5, 0. ), vec2( 3.8, 3. ) )\n\t);\n\treturn res;\n}\n\n// dinstancefield definitions\n\nfloat mapSimpleTerrain( in vec3 p ) {\t\n\tp.x += getXoffset( p.z );\t\n\tp.x = -abs( p.x );\n\tvec2 res = vec2( udBox( vec3(p.x+30., p.y-1., p.z) , vec3( 20., 100.25, 99999. ) ), 1.);\n\n#ifdef SHOW_BRIDGES\n\tfloat zcenter = mod(p.z+60.,120.)-70.;\n\tres = opU( res, vec2( baseBridge( vec3( p.x, p.y, zcenter) ), 8. ) ); // bridge\n#endif\n\t\n\treturn min( res.x, p.y+10. );\n}\n\nvec2 mapTerrain( in vec3 p ) {\t\n\tvec2 buildingInfo = getBuildingInfo( p );\n\tvec4 buildingParams = getBuildingParams( buildingInfo.x );\n\t\n\tvec3 pos = p;\n\tpos.x += getXoffset( pos.z );\n\tpos.x = -abs( pos.x );\n\t\n\tvec2 res = vec2( udBox( vec3(pos.x+30., pos.y, pos.z) , vec3( 20., 0.25, 99999. ) ), 1.); // ground\n\t\n\tfloat z = buildingInfo.y;\n\tfloat zcenter = mod(pos.z+10.,20.)-10.;\n\n#ifdef SHOW_BRIDGES\n\tres = opU( res, vec2( baseBridge( vec3( pos.x, pos.y,  mod(pos.z+60.,120.)-70.) ), 8. ) ); // bridge\n#endif\n\t\t\n\tres =  opU( res, vec2( sdSphere( vec3( pos.x+11.5, pos.y-6.0, zcenter) , 0.5 ), 3. ) ); // light\t\n\tres =  opU( res, vec2( sdSphere( vec3( pos.x+11.5, pos.y-5.4, zcenter+0.6) , 0.35 ), 3. ) ); // light\t\n\tres =  opU( res, vec2( sdSphere( vec3( pos.x+11.5, pos.y-5.4, zcenter-0.6) , 0.35 ), 3. ) ); // light\n\t\n\tres =  opU( res, vec2( sdCylinderXZ( vec3( pos.x+11.5, pos.y, zcenter), vec2( 0.1, 6.0) ), 4.)); // \n\t\t\t\t\t\t  \n\tpos += vec3( 28.75+buildingParams.y, 2.5, 0.);\t\t\n\tres =  opU( res, vec2( baseBuilding( vec3( pos.x, pos.y, zcenter), buildingParams.x+2.5  ), 2. ) );\n\n#ifdef SHOW_ORNAMENTS\n\tres = mix( res, opU( res, vec2( baseBalcony( vec3( pos.x, pos.y, zcenter), buildingParams.x+2.5  ), 9. ) ), buildingParams.w );\n#endif\n\t\n#ifdef SHOW_GALLERY\n\tpos.x += -8.75-GALLERYINSET;\t\t\n\tres = mix( res, opU( res, vec2( baseGallery( vec3( pos.x, pos.y, zcenter) ), 5. ) ), buildingParams.z );\n#endif\t\n\t\t\t\t\t\t\t\t\t  \n\treturn vec2( min( res.x,  11.-zcenter ), res.y );\n}\n\nfloat waterHeightMap( vec2 pos ) {\n\tvec2 posm = 0.02*pos * m2;\n\tposm.x += 0.001*time;\n\tfloat f = fbm( vec3( posm*1.9, time*0.01 ));\n\tfloat height = 0.5+0.1*f;\n\theight += 0.05*sin( posm.x*6.0 + 10.0*f );\n\t\n\treturn  height;\n}\n\n// intersection functions\n\nbool intersectPlane(vec3 ro, vec3 rd, float height, out float dist) {\t\n\tif (rd.y==0.0) {\n\t\treturn false;\n\t}\n\t\t\n\tfloat d = -(ro.y - height)/rd.y;\n\td = min(100000.0, d);\n\tif( d > 0. ) {\n\t\tdist = d;\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nbool intersectSphere ( in vec3 ro, in vec3 rd, in vec4 sph, out vec3 normal ) {\n    vec3  ds = ro - sph.xyz;\n    float bs = dot( rd, ds );\n    float cs = dot(  ds, ds ) - sph.w*sph.w;\n    float ts = bs*bs - cs;\n\t\n    if( ts > 0.0 ) {\n        ts = -bs - sqrt( ts );\n\t\tif( ts>0. ) {\n\t\t\tnormal = normalize( ((ro+ts*rd)-sph.xyz)/sph.w );\n\t\t\treturn true;\n\t\t}\n    }\n\n    return false;\n}\n\nvec3 intersect( const vec3 ro, const vec3 rd ) {\n\tfloat maxd = 1500.0;\n\tfloat precis = 0.01;\n    float h=precis*2.0;\n    float t = 0.0;\n\tfloat d = 0.0;\n    float m = 1.0;\n    for( int i=0; i<140; i++ ) {\n\t\tif( abs(h)<precis || t>maxd ) break; {\n\t\t\tt += h;\n\t\t\tvec2 mt = mapTerrain( ro+rd*t );\n\t\t\th = 0.96*mt.x;\n\t\t\tm = mt.y;\n\t\t}\n    }\n\n    if( t>maxd ) m=-1.0;\n    return vec3( t, d, m );\n}\n\nfloat intersectSimple( const vec3 ro, const vec3 rd ) {\n\tfloat maxd = 10000.0;\n\tfloat precis = 0.01;\n    float h=precis*2.0;\n    float t = 0.0;\n    for( int i=0; i<50; i++ ) {\n\t\tif( abs(h)<precis || t>maxd ) break;  {\n\t\t\tt += h;\n\t\t\th = mapSimpleTerrain( ro+rd*t );\n\t\t}\n    }\n\n    return t;\n}\n\nvec3 calcNormal( const vec3 pos ) {\n    vec3 eps = vec3(0.1,0.0,0.0);\n\n\treturn normalize( vec3(\n           mapTerrain(pos+eps.xyy).x - mapTerrain(pos-eps.xyy).x,\n           mapTerrain(pos+eps.yxy).x - mapTerrain(pos-eps.yxy).x,\n           mapTerrain(pos+eps.yyx).x - mapTerrain(pos-eps.yyx).x ) );\n}\n\n//-----------------------------------------------------\n\nvec3 path( float time ) {\n\tfloat z = time*CAMERASPEED;\t\n\treturn vec3( -getXoffset(z)+5.*cos(time*0.1), 1.25, z );\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    time = iTime/1.5+43.;\n    vec2 q = fragCoord.xy / iResolution.xy;\n\tvec2 p = -1.0 + 2.0*q;\n\tp.x *= iResolution.x / iResolution.y;\n\t\n    // camera\t\n\tvec3 ro = path( time+0.0 );\n\tvec3 ta = path( time+1.6 );\n\t\n\tta.y *= 1.1 + 0.25*sin(0.09*time);\n\tfloat roll = 0.3*sin(1.0+0.07*time);\n\t\n\t// camera tx\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(roll), cos(roll),0.0);\n\tvec3 cu = normalize(cross(cw,cp));\n\tvec3 cv = normalize(cross(cu,cw));\n\t\n\tvec3 rd = normalize( p.x*cu + p.y*cv + 2.1*cw );\n\t\n\t// raymarch\n    float distSimple = intersectSimple(ro,rd);\n\tbool reflection = false;\n\t\n\tfloat dist, totaldist = 0., depth = 0.;\n\tvec3 normal=vec3(1.), tmat = vec3(1000.), lp, lig;\n\t\n\tif( intersectPlane( ro, rd, 0., dist ) && dist < distSimple ) {\t\t\t\n\t\tro = ro+rd*dist;\n\t\ttotaldist = dist;\n\t\t\n\t\tdepth = mapTerrain(ro).x;\n\t\t\n\t\tvec2 coord = ro.xz;\n\t\tvec2 dx = vec2( EPSILON, 0. );\n\t\tvec2 dz = vec2( 0., EPSILON );\n\t\t\n\t\tfloat bumpfactor = BUMPFACTOR * (1. - smoothstep( 0., BUMPDISTANCE, dist) );\n\t\t\t\t\n\t\tnormal = vec3( 0., 1., 0. );\n\t\tnormal.x = -bumpfactor * (waterHeightMap(coord + dx) - waterHeightMap(coord-dx) ) / (2. * EPSILON);\n\t\tnormal.z = -bumpfactor * (waterHeightMap(coord + dz) - waterHeightMap(coord-dz) ) / (2. * EPSILON);\n\t\tnormal = normalize( normal );\n\t\t\n\t\trd = reflect( rd, normal );\n\t\treflection = true;\n\t} \n\t\n\t// intersect scene\t\n\ttmat = intersect(ro,rd);\n\ttotaldist += tmat.x;\n\t\n    vec3 pos = ro + tmat.x*rd;\n\tvec3 nor = vec3(0.);\n    if( tmat.z>-0.5 && totaldist < 500.) {\n        nor = calcNormal(pos);\n\t}\n    else{\n    \ttmat.x = 500.;\n    } \n    fragColor = vec4( nor, tmat.x);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*----------------------\n\tEdge Detection\n----------------------*/\n#define _DepthDiffCoeff 5.\n#define _NormalDiffCoeff 1.\n#define _CameraDepthNormalsTexture iChannel0\n#define R iResolution.xy\n\nfloat CheckDiff(vec4 _centerNormalDepth,vec4 _otherNormalDepth) {\n    float depth_diff = abs(_centerNormalDepth.w - _otherNormalDepth.w);\n    vec3 normal_diff = abs(_centerNormalDepth.xyz - _otherNormalDepth.xyz);\n    return \n        (float(depth_diff > _DepthDiffCoeff))\n        +\n        float(dot(normal_diff,normal_diff))*_NormalDiffCoeff;\n}\nfloat FastEdge(vec2 uv) {\n    vec3 e = vec3(1./R, 0.);\n    vec4 Center_P = texture(_CameraDepthNormalsTexture,uv);\n    vec4 LD = texture(_CameraDepthNormalsTexture, uv + e.xy);\n    vec4 RD = texture(_CameraDepthNormalsTexture, uv + vec2(e.x,-e.y));\n\n    float Edge = 0.;\n    Edge += CheckDiff(Center_P,LD);\n    Edge += CheckDiff(Center_P,RD);\n    return float(smoothstep(1., 0., Edge));\n}\n\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n\tC = vec4(FastEdge(U/R));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}