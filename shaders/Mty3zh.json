{
    "Shader": {
        "info": {
            "date": "1473074525",
            "description": "A light facing to the floor of a room; The floors look like cells with nucleus, \nThe Room Is Blue.\n\nAdded what the point to my shader is.",
            "flags": 0,
            "hasliked": 0,
            "id": "Mty3zh",
            "likes": 2,
            "name": "Light On Floor",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "flashlight",
                "cell"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 821
        },
        "renderpass": [
            {
                "code": "float hashRace(vec3 p)\n{\n    vec2 noise = p.xy / fract(sin(dot(p.xy, vec2(0.15963, 2.968))*length(cos(p))));\n    float perl = length(clamp(p, vec3(noise, 1.0), vec3(noise, 2.0))*mod(p, sqrt(p))) - 189.0;\n    vec3 newP = smoothstep(vec3(sin(iTime)),\n                           step(vec3(noise, perl), vec3(perl, noise)) - length(tan(p)),\n                           step(vec3(noise, perl), vec3(perl, noise)) - length(sqrt(p))\n                           );\n    return length(cos(sin(newP)));\n}\nvec2 sdlineRoundTile(vec3 p)\n{\n    return vec2(hashRace(p - sin(atan(iTime))),gl_FragCoord.xy/iResolution.xy);\n}\nvec4 trace(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    float m = 0.0;\n    for(int i = 0; i < 24; i++)\n    {\n        vec3 p = ro+t*rd;\n        vec2 rm = sdlineRoundTile(p);\n        //vec2 rm2 = sdlineRoundTile(p*2.);\n        //float d = min(rm.x,rm2.x);\n        float d = rm.x;\n        m = rm.y;\n        t += d * 0.5;\n    }\n    vec3 ocol = vec3(0.);\n    \n    if(mod(m,1.)*2.0-1.0 < -0.5) ocol = vec3(1.0,0.0,1.0);\n    else if(mod(m,1.)*2.0-1.0 < 0.) ocol = vec3(0.0,1.0,1.0);\n    else if(mod(m,1.)*2.0-1.0 < 0.5) ocol = vec3(0.5,1.0,0.0);\n    else ocol = vec3(1.0, 0.5,0.0);\n    \n    return vec4(t, ocol);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 rd = normalize(vec3(uv, 1.0));\n    float t = iTime;\n    rd.xz *= mat2(-cos(t), sin(t), sin(t), cos(t));\n    rd.xy *= mat2(cos(t), -sin(t), sin(t), cos(t));\n    rd.yz *= mat2(cos(t), sin(t), -sin(t), cos(t));\n    vec3 ro = vec3(sin(t), cos(t), -3.0);\n    vec4 txc = trace(ro,rd);\n    float x = txc.x;\n    vec3 col = txc.yzw;\n    vec3 fc = vec3(1.0/(1.0+x*x*0.1));\n\tfragColor = vec4(fc, 1.0) + (length(fc) * 5.0) +\n        vec4(cos(uv.y + 0.814293))*vec4(col,1.0) - vec4(length(ro+rd)-2.0);\n    //Gamma Correcting more like gamma color overflower yeah\n    //fragColor = pow(fragColor, vec4(1./2.2));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}