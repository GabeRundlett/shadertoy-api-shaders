{
    "Shader": {
        "info": {
            "date": "1485814785",
            "description": "Simple shadowmap implementation for basic algorithm, PCF and VSM",
            "flags": 48,
            "hasliked": 0,
            "id": "MlKSRm",
            "likes": 24,
            "name": "Simple shadowmap",
            "published": 3,
            "tags": [
                "shadows",
                "shadowmapping",
                "pcf",
                "vsm",
                "varianceshadowmapping",
                "percentagecloserfiltering"
            ],
            "usePreview": 0,
            "username": "sibaku",
            "viewed": 2634
        },
        "renderpass": [
            {
                "code": "/**\n*\n* This is a demonstration of how shadow mapping works\n* \n* Most of the code is just setup to render in accord to the usual OpenGL rendering\n* with view and projection matrices. Also a little bit of code for tracing the objects.\n*\n* Implemented are:\n*\t- (1) Basic shadow mapping\n*\t- (2) PCF\n*\t- (3) Variance shadow mapping (VSM)\n*\n* By default you see (3). You can see (2) by pressing 'p' and (1) by pressing 'b'\n*\n*\n* The code is organized as follows:\n*\n* Buf A:\n*\t- Renders the image from the light's point of view with the light's view \n* \t\tand projection matrix. Output is both perspective depth (z_p) and \n*\t\tlinear depth (z_l) and their squares: Output vec4(z_p,z_p^2,z_l,z_l^2)\n*\n*\t\tRelevant code is in main function\n*\n* Buf B + C:\n*\t- Perform a separable box blur filter. First pass in x, second in y direction\n*\n* Image:\n*\t- Renders the image from the cameras point of view. Then transforms the object's\n*\t\tpoints into the light's coordinate system to perform the shadow map lookup\n*\t\twith one of the above mentioned techniques\n*\t\n*\t\tRelevant code is in main, shadow, shadowPCF and shadowVSM functions\n*\n*\n*\n*\n**/\n\n#define INF 3.402823466e+38\n\n// Keys\n\n#define KEY_A 65\n#define KEY_B 66\n#define KEY_C 67\n#define KEY_D 68\n#define KEY_E 69\n#define KEY_F 70\n#define KEY_G 71\n#define KEY_H 72\n#define KEY_I 73\n#define KEY_J 74\n#define KEY_K 75\n#define KEY_L 76\n#define KEY_M 77\n#define KEY_N 78\n#define KEY_O 79\n#define KEY_P 80\n#define KEY_Q 81\n#define KEY_R 82\n#define KEY_S 83\n#define KEY_T 84\n#define KEY_U 85\n#define KEY_V 86\n#define KEY_W 87\n#define KEY_X 88\n#define KEY_Y 89\n#define KEY_Z 90\n\nstruct Sphere\n{\n\t\tvec3 center;\n\t\tfloat r;\n};\n\nstruct Box\n{\n\t\tvec3 bmin;\n\t\tvec3 bmax;\n};\n\nBox makeBox(vec3 center, vec3 halfSize)\n{\n \treturn Box(center-halfSize,center + halfSize);   \n}\n\nstruct Hit\n{\n  vec3 n;\n  float t;\n    \n};\n\nvec3 computeNormalSphere(vec3 p,Sphere s)\n{\n\treturn normalize(p - s.center);\n}\nvec3 computeNormalBox(vec3 p,Box b)\n{\n    \n\t// project on edges\n\n\tvec3 center = (b.bmax + b.bmin)/2.;\n\tvec3 halfSize = (b.bmax - b.bmin)/2.;\n\tvec3 nx = vec3(1.,0.,0.);\n\tvec3 ny = vec3(0.,1.,0.);\n\tvec3 nz = vec3(0.,0.,1.);\n\n\tvec3 f1 = center + nx*halfSize.x;\n\tvec3 f2 = center - nx*halfSize.x;\n\n\tvec3 f3 = center + ny*halfSize.y;\n\tvec3 f4 = center - ny*halfSize.y;\n\n\tvec3 f5 = center + nz*halfSize.z;\n\tvec3 f6 = center - nz*halfSize.z;\n\n\n\t// compute side distance\n\tif(abs(dot(f1-p,nx)) < 0.00001)\n\t{\n\t\treturn nx;\n\t}\n\tif(abs(dot(f2-p,nx)) < 0.00001)\n\t{\n\t\treturn -nx;\n\t}\n\tif(abs(dot(f3-p,ny)) < 0.00001)\n\t{\n\t\treturn ny;\n\t}\n\tif(abs(dot(f4-p,ny)) < 0.00001)\n\t{\n\t\treturn -ny;\n\t}\n\n\tif(abs(dot(f5-p,nz)) < 0.00001)\n\t{\n\t\treturn nz;\n\t}\n\tif(abs(dot(f6-p,nz)) < 0.00001)\n\t{\n\t\treturn -nz;\n\t}\n\n\n\n\treturn normalize(vec3(1.,1.,1.));\n}\n\nbool intersectAABB(Box b, vec3 p, vec3 dir,out Hit h)\n{\n\t\tfloat tmin;\n\t\tfloat tmax;\n\t\tfloat tymin;\n\t\tfloat tymax;\n\t\tfloat tzmin;\n\t\tfloat tzmax;\n\n\t\tvec3 dirFrac = vec3(1.)/dir;\n\n\t\tvec3 bminOrig = b.bmin - p;\n\t\tvec3 bmaxOrig = b.bmax - p;\n\n\t\tvec3 bminOrigFrac = bminOrig * dirFrac;\n\t\tvec3 bmaxOrigFrac = bmaxOrig * dirFrac;\n\t\tif(dirFrac.x >= 0.)\n\t\t{\n\t\t\t\ttmin = bminOrigFrac.x;\n\t\t\t\ttmax = bmaxOrigFrac.x;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\ttmin = bmaxOrigFrac.x;\n\t\t\t\ttmax = bminOrigFrac.x;\n\t\t}\n\n\t\tif(dirFrac.y >= 0.)\n\t\t{\n\t\t\t\ttymin = bminOrigFrac.y;\n\t\t\t\ttymax = bmaxOrigFrac.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\ttymin = bmaxOrigFrac.y;\n\t\t\t\ttymax = bminOrigFrac.y;\n\t\t}\n\n\t\n    \tif ( (tmin> tymax)|| (tymin> tmax))\n\t\t\t\treturn false;\n    \n\t\tif (tymin> tmin)\n\t\t\t\ttmin = tymin;\n\t\tif (tymax < tmax)\n\t\t\t\ttmax = tymax;\n\n\t\tif(dirFrac.z >= 0.)\n\t\t{\n\t\t\t\ttzmin = bminOrigFrac.z;\n\t\t\t\ttzmax = bmaxOrigFrac.z;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\ttzmin = bmaxOrigFrac.z;\n\t\t\t\ttzmax = bminOrigFrac.z;\n\t\t}\n    if ( (tmin> tzmax)|| (tzmin> tmax))\n\t\t\t\treturn false;\n\t\tif (tzmin > tmin)\n\t\t\t\ttmin = tzmin;\n\t\tif (tzmax < tmax)\n\t\t\t\ttmax = tzmax;\n\n\n    \tfloat t = tmin >= 0. ? tmin : tmax;\n    \t\n    \n    \n    \n    \th = Hit(computeNormalBox(p + t*dir, b),t);\n\n\t\treturn t >= 0.;\n    \n\n}\n\nbool intersectSphere(Sphere s,vec3 p, vec3 dir,out Hit h)\n{\n\n\tvec3 oc = p - s.center;\n\n\tfloat loc = dot(dir,oc);\n\n\tfloat discr = loc*loc - dot(oc,oc) + s.r*s.r;\n\n\tif(discr < 0.)\n\t\treturn false;\n\n    float t;\n\tif(abs(discr) < 0.00001)\n\t{\n\t\tt = -loc;\n        \n\t}\n\telse{\n\t\tfloat sq = sqrt(discr);\n\t\tt = -loc - sq;\n        // if inside use outgoing one\n        t = t < 0. ? -loc + sq : t;\n        \n\t}\n\t\n    h = Hit(computeNormalSphere(p+t*dir,s),t);\n\t\n    return t >= 0.;\n\n}\n\nbool intersectScene(vec3 p, vec3 dir,out Hit h)\n{\n    Hit ht;\n    h.t = INF;\n    bool hit = false;\n    Sphere s1 = Sphere(vec3(0.,0.,0.), 1.);\n    \n    \n   \tBox b1 = makeBox(vec3(0.,-2.,0.),vec3(20.,0.5,20.));\n    Box b2 = makeBox(vec3(-3.,0.,0.), vec3(1.,1.,1.));\n    \n    if(intersectSphere(s1,p,dir,ht))\n    {\n     \th = ht;  \n        hit = true;\n    }\n    if(intersectAABB(b1,p,dir,ht) && ht.t < h.t)\n    {\n     \th = ht;  \n        hit = true;\n    }\n    if(intersectAABB(b2,p,dir,ht) && ht.t < h.t)\n    {\n     \th = ht;  \n        hit = true;\n    }\n    \n    return hit;\n    \n}\n\n\n// matrix operations\nmat4 translate(vec3 t)\n{\n \treturn mat4(\n        vec4(1.,0.,0.,0.),\n        vec4(0.,1.,0.,0.),\n        vec4(0.,0.,1.,0.),\n        vec4(t,1.)\n        );\n}\nmat4 translateInv(vec3 t)\n{\n \treturn translate(-t);   \n}\n\nmat4 scale(vec3 s)\n{\n \treturn mat4(\n        vec4(s.x,0.,0.,0.),\n        vec4(0.,s.y,0.,0.),\n        vec4(0.,0.,s.z,0.),\n        vec4(0.,0.,0.,1.)\n        );\n}\nmat4 scaleInv(vec3 s)\n{\n \treturn scale(1./s);   \n}\n\nmat4 rightToLeft()\n{\n    // 1 0 0  0\n    // 0 1 0  0\n    // 0 0 -1 0\n    // 0 0 0  1\n \treturn scale(vec3(1.,1.,-1.));\n}\n\nmat4 rightToLeftInv()\n{\n    // same matrix\n    return rightToLeft();\n}\n\t\n\nmat4 ortho(float l, float r, float b, float t, float n, float f)\n{\n\n    \n       // translation and scale\n    return scale(vec3(2./(r-l),2./(t-b),2./(f-n))) * \n                 translate(vec3(-(l+r)/2.,-(t+b)/2.,-(f+n)/2.));\n    \n}\n\nmat4 orthoInv(float l, float r, float b, float t, float n, float f)\n{\n    return translateInv(vec3(-(l+r)/2.,-(t+b)/2.,-(f+n)/2.)) *\n        scaleInv(vec3(2./(r-l),2./(t-b),2./(f-n)));\n}\n\nmat4 projection(float n, float f)\n{\n \t// n 0 0 0\t0\n    // 0 n 0 0\t0\n    // 0 0 n+f\t-fn\n    // 0 0 1\t0\n    return mat4(\n        vec4(n,0.,0.,0.),\n        vec4(0.,n,0.,0.),\n        vec4(0.,0.,n+f,1.),\n        vec4(0.,0.,-f*n,0.)\n        );\n}\n\nmat4 projectionInv(float n, float f)\n{\n \t// 1/n \t0 \t0 \t\t0\n    // 0 \t1/n\t0 \t\t0\n    // 0\t0\t0 \t\t1\n    // 0\t0\t-1/fn\t(f+n)/fn\n    \n    return mat4(\n        vec4(1./n,0.,0.,0.),\n        vec4(0.,1./n,0.,0.),\n        vec4(0.,0.,0.,-1./(f*n)),\n        vec4(0.,0.,1.,(f+n)/(f*n))\n        );\n}\n\n\nmat4 perspective(float fov, float aspect, float n, float f)\n{\n \t   float l = tan(fov/2.)*n;\n       float b = l/aspect;\n    \n    \treturn ortho(-l,l,-b,b,n,f)*\n            projection(n,f)*rightToLeft();\n}\n\n\nmat4 perspectiveInv(float fov, float aspect,float n, float f)\n{\n     float l = tan(fov/2.)*n;\n       float b = l/aspect;\n    \n    return rightToLeftInv()*\n        projectionInv(n,f)*\n        orthoInv(-l,l,-b,b,n,f);\n}\n\nmat4 lookAt(vec3 eye, vec3 center, vec3 up)\n{\n \t\n    vec3 z = normalize(eye-center);\n    vec3 x = normalize(cross(up,z));\n    vec3 y = cross(z,x);\n    \n    mat4 v = mat4(\n        vec4(x.x,y.x,z.x,0.),\n        vec4(x.y,y.y,z.y,0.),\n        vec4(x.z,y.z,z.z,0.),\n        vec4(0.,0.,0.,1.)\n        );\n    \n    return v*translate(-eye);\n}\n\nmat4 lookAtInv(vec3 eye, vec3 center, vec3 up)\n{\n \tvec3 z = normalize(eye-center);\n    vec3 x = normalize(cross(up,z));\n    vec3 y = cross(z,x);  \n    \n    return translateInv(-eye)*mat4(\n        vec4(x,0.),\n        vec4(y,0.),\n        vec4(z,0.),\n        vec4(0.,0.,0.,1.)\n        );\n}\n\n\nvec3 createRay(vec2 px, mat4 PInv, mat4 VInv)\n{\n\n\n    vec2 pxNDS = px*2. - 1.;\n    vec3 rayNDS = vec3 (pxNDS,1.);\n\n    vec4 rayClip = vec4 (rayNDS.xy, -1.0, 1.0);\n    vec4 rayEye = PInv * rayClip;\n\n    rayEye.w = 0.;\n\n    vec3 rayWorld = (VInv * rayEye).xyz;\n    return normalize (rayWorld);   \n}\n\n\nbool isPressed(int key)\n{\n    float val = texture( iChannel3, vec2( (float(key)+0.5)/256.0, 0.25 ) ).x;\n\treturn val > 0.5;\n}\n\nbool isToggled(int key)\n{\n    float val = texture( iChannel3, vec2( (float(key)+0.5)/256.0, 0.75 ) ).x;\n\treturn val > 0.5;\n}\n\n\n\nfloat shadow(vec3 px)\n{\n    // check whether the shadow maps z value is higher than the current one\n    // if it's not, the point lies in shadow\n     vec4 lookup = texture(iChannel0,px.xy);\n     return float(lookup.x  > px.z - 0.002); \n}\n\nfloat shadowPCF(vec3 px)\n{\n    // texture delta\n    vec2 delta = 1./iChannelResolution[0].xy;\n    \n    float factor = 0.;\n    // filter size\n    const int r = 3;\n    for(int y = -r; y <= r; y++)\n    {\n     \tfor(int x = -r; x <= r; x++)\n        {\n         \tvec2 offset = delta * vec2(x,y);\n            // count the number of shadow hits\n\t\t\tfactor += float(texture(iChannel0,px.xy + offset).x > px.z - 0.002);\n            \n        }\n    }\n    int size = 2*r +1;\n    \n    int elements = size*size;\n    \n    // average of shadow hits\n    return factor/float(elements);\n}\n\nfloat shadowVSM(vec3 px,float linearDepth)\n{\n    // use linear depth for better precision\n   \n    vec4 lookup = texture(iChannel2,px.xy);\n   \n    // after the blurring stages, the z and w fields\n    // contain estimates of the expected value of\n    // depth and squared depth\n    float Ex = lookup.z;\n    float Ex2 = lookup.w;\n    \n    // compute variance\n    float variance = Ex2 - Ex*Ex;\n    \n    // temporary for formula\n   \tfloat znorm = linearDepth - Ex;\n    float znorm2 = znorm*znorm;\n    \n    // compute upper bounds of probabilty of shading\n    // using Chebyshev's inequality\n    float p = variance/(variance + znorm2);\n    \n    // formula is only valid if depth is less than the expected\n    // value. The max formulation is taken from an nvidia presentation\n    // just called \"Variance Shadow Mapping\"\n    return max( p, float(linearDepth <= Ex) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\n \t// compute light position\n   \n    float lightRadius = 6.;\n    float lightHeight = 5.;\n    vec3 lightPos = vec3(sin(iTime+2.6)*lightRadius,\n                         lightHeight,\n                         cos(iTime+2.6)*lightRadius);\n    \n    vec3 lightCenter = vec3(0.,0.,0.);\n    \n    float aspect = iResolution.x / iResolution.y;\n    \n   \n    // Get the light's view and projection matrices\n    mat4 PLight = perspective(radians(120.),aspect,0.1,100.);\n    mat4 VLight = lookAt(lightPos,lightCenter,vec3(0.,1.,0.));\n    \n    \n    // camera\n    vec3 eye = vec3(3,8.,5.);\n\n    vec2 relativeMouse = iMouse.z <= 0. ? vec2(.5/iResolution.xy) : iMouse.xy/iResolution.xy-.5;\n\teye += vec3(0.,relativeMouse.yx)*12.;\n    vec3 center = vec3(0.,1.,0.);\n   \n    \n   \n    // inverse matrices for ray generation\n    mat4 PInv = perspectiveInv(radians(90.),aspect,0.1,100.);\n    mat4 VInv = lookAtInv(eye,center,vec3(0.,1.,0.));\n    \n   \n    // create view ray\n    vec3 rayDir = createRay(uv,PInv,VInv);\n   \tHit h;\n    \n    \n    \n    // intersect scene\n    if(!intersectScene(eye,rayDir,h))\n    {\n        // no intersection\n        fragColor = vec4(vec3(0.2,0.2,0.2),1.0);\n    }\n    else\n    {\n        \n        vec3 hitpoint = eye + h.t * rayDir;\n        \n        // for simple phong diffuse lighting\n        vec3 l = normalize(lightPos-hitpoint);\n        \n        // transform into light coordinate system\n        vec4 plv = VLight*vec4(hitpoint,1.);\n        // transform into light clip space\n        vec4 plp = PLight*plv;\n        // light NDC\n        vec3 pl = (plp/plp.w).xyz;\n        \n        \n        // transform from [-1,1] to [0,1] for texture lookup\n        pl.xy = pl.xy*0.5 + 0.5;\n        \n        vec4 color;\n        // manual border clamping\n        if(pl.x < 0. || pl.x > 1. ||pl.y < 0. || pl.y > 1.)\n        {\n            color = vec4(dot(h.n,l));\n        }\n        else\n        {\n            float shadowed;\n            \n            \n            // different techniques\n            if(isPressed(KEY_P))\n            {\n                shadowed = shadowPCF(pl);\n            }\n            else if(isPressed(KEY_B))\n            {\n               shadowed = shadow(pl); \n            }\n            else\n            {\n                shadowed = shadowVSM(pl,-plv.z);\n            }\n            \n            color = vec4(dot(h.n,l)*shadowed);\n       \n        }\n        \n        \n        \n        fragColor =  color;\n        \n        \n    }\n    \n    \n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/**\n*\n* This is a demonstration of how shadow mapping works\n* \n* Most of the code is just setup to render in accord to the usual OpenGL rendering\n* with view and projection matrices. Also a little bit of code for tracing the objects.\n*\n* Implemented are:\n*\t- (1) Basic shadow mapping\n*\t- (2) PCF\n*\t- (3) Variance shadow mapping (VSM)\n*\n* By default you see (3). You can see (2) by pressing 'p' and (1) by pressing 'b'\n*\n*\n* The code is organized as follows:\n*\n* Buf A:\n*\t- Renders the image from the light's point of view with the light's view \n* \t\tand projection matrix. Output is both perspective depth (z_p) and \n*\t\tlinear depth (z_l) and their squares: Output vec4(z_p,z_p^2,z_l,z_l^2)\n*\n*\t\tRelevant code is in main function\n*\n* Buf B + C:\n*\t- Perform a separable box blur filter. First pass in x, second in y direction\n*\n* Image:\n*\t- Renders the image from the cameras point of view. Then transforms the object's\n*\t\tpoints into the light's coordinate system to perform the shadow map lookup\n*\t\twith one of the above mentioned techniques\n*\t\n*\t\tRelevant code is in main, shadow, shadowPCF and shadowVSM functions\n*\n*\n*\n*\n**/\n\n\n#define INF 3.402823466e+38\n\nstruct Sphere\n{\n\t\tvec3 center;\n\t\tfloat r;\n};\n\nstruct Box\n{\n\t\tvec3 bmin;\n\t\tvec3 bmax;\n};\n\nBox makeBox(vec3 center, vec3 halfSize)\n{\n \treturn Box(center-halfSize,center + halfSize);   \n}\n\nstruct Hit\n{\n  vec3 n;\n  float t;\n    \n};\n\nvec3 computeNormalSphere(vec3 p,Sphere s)\n{\n\treturn normalize(p - s.center);\n}\nvec3 computeNormalBox(vec3 p,Box b)\n{\n    \n\t// project on edges\n\n\tvec3 center = (b.bmax + b.bmin)/2.;\n\tvec3 halfSize = (b.bmax - b.bmin)/2.;\n\tvec3 nx = vec3(1.,0.,0.);\n\tvec3 ny = vec3(0.,1.,0.);\n\tvec3 nz = vec3(0.,0.,1.);\n\n\tvec3 f1 = center + nx*halfSize.x;\n\tvec3 f2 = center - nx*halfSize.x;\n\n\tvec3 f3 = center + ny*halfSize.y;\n\tvec3 f4 = center - ny*halfSize.y;\n\n\tvec3 f5 = center + nz*halfSize.z;\n\tvec3 f6 = center - nz*halfSize.z;\n\n\n\t// compute side distance\n\tif(abs(dot(f1-p,nx)) < 0.00001)\n\t{\n\t\treturn nx;\n\t}\n\tif(abs(dot(f2-p,nx)) < 0.00001)\n\t{\n\t\treturn -nx;\n\t}\n\tif(abs(dot(f3-p,ny)) < 0.00001)\n\t{\n\t\treturn ny;\n\t}\n\tif(abs(dot(f4-p,ny)) < 0.00001)\n\t{\n\t\treturn -ny;\n\t}\n\n\tif(abs(dot(f5-p,nz)) < 0.00001)\n\t{\n\t\treturn nz;\n\t}\n\tif(abs(dot(f6-p,nz)) < 0.00001)\n\t{\n\t\treturn -nz;\n\t}\n\n\n\n\treturn normalize(vec3(1.,1.,1.));\n}\n\nbool intersectAABB(Box b, vec3 p, vec3 dir,out Hit h)\n{\n\t\tfloat tmin;\n\t\tfloat tmax;\n\t\tfloat tymin;\n\t\tfloat tymax;\n\t\tfloat tzmin;\n\t\tfloat tzmax;\n\n\t\tvec3 dirFrac = vec3(1.)/dir;\n\n\t\tvec3 bminOrig = b.bmin - p;\n\t\tvec3 bmaxOrig = b.bmax - p;\n\n\t\tvec3 bminOrigFrac = bminOrig * dirFrac;\n\t\tvec3 bmaxOrigFrac = bmaxOrig * dirFrac;\n\t\tif(dirFrac.x >= 0.)\n\t\t{\n\t\t\t\ttmin = bminOrigFrac.x;\n\t\t\t\ttmax = bmaxOrigFrac.x;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\ttmin = bmaxOrigFrac.x;\n\t\t\t\ttmax = bminOrigFrac.x;\n\t\t}\n\n\t\tif(dirFrac.y >= 0.)\n\t\t{\n\t\t\t\ttymin = bminOrigFrac.y;\n\t\t\t\ttymax = bmaxOrigFrac.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\ttymin = bmaxOrigFrac.y;\n\t\t\t\ttymax = bminOrigFrac.y;\n\t\t}\n\n\t\n    \tif ( (tmin> tymax)|| (tymin> tmax))\n\t\t\t\treturn false;\n    \n\t\tif (tymin> tmin)\n\t\t\t\ttmin = tymin;\n\t\tif (tymax < tmax)\n\t\t\t\ttmax = tymax;\n\n\t\tif(dirFrac.z >= 0.)\n\t\t{\n\t\t\t\ttzmin = bminOrigFrac.z;\n\t\t\t\ttzmax = bmaxOrigFrac.z;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\ttzmin = bmaxOrigFrac.z;\n\t\t\t\ttzmax = bminOrigFrac.z;\n\t\t}\n    if ( (tmin> tzmax)|| (tzmin> tmax))\n\t\t\t\treturn false;\n\t\tif (tzmin > tmin)\n\t\t\t\ttmin = tzmin;\n\t\tif (tzmax < tmax)\n\t\t\t\ttmax = tzmax;\n\n\n    \tfloat t = tmin >= 0. ? tmin : tmax;\n    \t\n    \n    \n    \n    \th = Hit(computeNormalBox(p + t*dir, b),t);\n\n\t\treturn t >= 0.;\n    \n\n}\n\nbool intersectSphere(Sphere s,vec3 p, vec3 dir,out Hit h)\n{\n\n\tvec3 oc = p - s.center;\n\n\tfloat loc = dot(dir,oc);\n\n\tfloat discr = loc*loc - dot(oc,oc) + s.r*s.r;\n\n\tif(discr < 0.)\n\t\treturn false;\n\n    float t;\n\tif(abs(discr) < 0.00001)\n\t{\n\t\tt = -loc;\n        \n\t}\n\telse{\n\t\tfloat sq = sqrt(discr);\n\t\tt = -loc - sq;\n        // if inside use outgoing one\n        t = t < 0. ? -loc + sq : t;\n        \n\t}\n\t\n    h = Hit(computeNormalSphere(p+t*dir,s),t);\n\t\n    return t >= 0.;\n\n}\n\nbool intersectScene(vec3 p, vec3 dir,out Hit h)\n{\n    Hit ht;\n    h.t = INF;\n    bool hit = false;\n    Sphere s1 = Sphere(vec3(0.,0.,0.), 1.);\n    \n    \n    Box b1 = makeBox(vec3(0.,-2.,0.),vec3(20.,0.5,20.));\n    Box b2 = makeBox(vec3(-3.,0.,0.), vec3(1.,1.,1.));\n    \n    if(intersectSphere(s1,p,dir,ht))\n    {\n     \th = ht;  \n        hit = true;\n    }\n    if(intersectAABB(b1,p,dir,ht) && ht.t < h.t)\n    {\n     \th = ht;  \n        hit = true;\n    }\n     if(intersectAABB(b2,p,dir,ht) && ht.t < h.t)\n    {\n     \th = ht;  \n        hit = true;\n    }\n    \n    return hit;\n    \n}\n\n\n// matrix operations\nmat4 translate(vec3 t)\n{\n \treturn mat4(\n        vec4(1.,0.,0.,0.),\n        vec4(0.,1.,0.,0.),\n        vec4(0.,0.,1.,0.),\n        vec4(t,1.)\n        );\n}\nmat4 translateInv(vec3 t)\n{\n \treturn translate(-t);   \n}\n\nmat4 scale(vec3 s)\n{\n \treturn mat4(\n        vec4(s.x,0.,0.,0.),\n        vec4(0.,s.y,0.,0.),\n        vec4(0.,0.,s.z,0.),\n        vec4(0.,0.,0.,1.)\n        );\n}\nmat4 scaleInv(vec3 s)\n{\n \treturn scale(1./s);   \n}\n\nmat4 rightToLeft()\n{\n    // 1 0 0  0\n    // 0 1 0  0\n    // 0 0 -1 0\n    // 0 0 0  1\n \treturn scale(vec3(1.,1.,-1.));\n}\n\nmat4 rightToLeftInv()\n{\n    // same matrix\n    return rightToLeft();\n}\n\t\n\nmat4 ortho(float l, float r, float b, float t, float n, float f)\n{\n\n    \n       // translation and scale\n    return scale(vec3(2./(r-l),2./(t-b),2./(f-n))) * \n                 translate(vec3(-(l+r)/2.,-(t+b)/2.,-(f+n)/2.));\n    \n}\n\nmat4 orthoInv(float l, float r, float b, float t, float n, float f)\n{\n    return translateInv(vec3(-(l+r)/2.,-(t+b)/2.,-(f+n)/2.)) *\n        scaleInv(vec3(2./(r-l),2./(t-b),2./(f-n)));\n}\n\nmat4 projection(float n, float f)\n{\n \t// n 0 0 0\t0\n    // 0 n 0 0\t0\n    // 0 0 n+f\t-fn\n    // 0 0 1\t0\n    return mat4(\n        vec4(n,0.,0.,0.),\n        vec4(0.,n,0.,0.),\n        vec4(0.,0.,n+f,1.),\n        vec4(0.,0.,-f*n,0.)\n        );\n}\n\nmat4 projectionInv(float n, float f)\n{\n \t// 1/n \t0 \t0 \t\t0\n    // 0 \t1/n\t0 \t\t0\n    // 0\t0\t0 \t\t1\n    // 0\t0\t-1/fn\t(f+n)/fn\n    \n    return mat4(\n        vec4(1./n,0.,0.,0.),\n        vec4(0.,1./n,0.,0.),\n        vec4(0.,0.,0.,-1./(f*n)),\n        vec4(0.,0.,1.,(f+n)/(f*n))\n        );\n}\n\n\nmat4 perspective(float fov, float aspect, float n, float f)\n{\n \t   float l = tan(fov/2.)*n;\n       float b = l/aspect;\n    \n    \treturn ortho(-l,l,-b,b,n,f)*\n            projection(n,f)*rightToLeft();\n}\n\n\nmat4 perspectiveInv(float fov, float aspect,float n, float f)\n{\n     float l = tan(fov/2.)*n;\n       float b = l/aspect;\n    \n    return rightToLeftInv()*\n        projectionInv(n,f)*\n        orthoInv(-l,l,-b,b,n,f);\n}\n\nmat4 lookAt(vec3 eye, vec3 center, vec3 up)\n{\n \t\n    vec3 z = normalize(eye-center);\n    vec3 x = normalize(cross(up,z));\n    vec3 y = cross(z,x);\n    \n    mat4 v = mat4(\n        vec4(x.x,y.x,z.x,0.),\n        vec4(x.y,y.y,z.y,0.),\n        vec4(x.z,y.z,z.z,0.),\n        vec4(0.,0.,0.,1.)\n        );\n    \n    return v*translate(-eye);\n}\n\nmat4 lookAtInv(vec3 eye, vec3 center, vec3 up)\n{\n \tvec3 z = normalize(eye-center);\n    vec3 x = normalize(cross(up,z));\n    vec3 y = cross(z,x);  \n    \n    return translateInv(-eye)*mat4(\n        vec4(x,0.),\n        vec4(y,0.),\n        vec4(z,0.),\n        vec4(0.,0.,0.,1.)\n        );\n}\n\n\nvec3 createRay(vec2 px, mat4 PInv, mat4 VInv)\n{\n\n\n    vec2 pxNDS = px*2. - 1.;\n    vec3 rayNDS = vec3 (pxNDS,1.);\n\n    vec4 rayClip = vec4 (rayNDS.xy, -1.0, 1.0);\n    vec4 rayEye = PInv * rayClip;\n\n    rayEye.w = 0.;\n\n    vec3 rayWorld = (VInv * rayEye).xyz;\n    \n    return normalize (rayWorld);   \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n\n  \n    // compute light position\n    float lightRadius = 6.;\n    float lightHeight = 5.;\n    vec3 lightPos = vec3(sin(iTime+2.6)*lightRadius,\n                         lightHeight,\n                         cos(iTime+2.6)*lightRadius);\n    \n    vec3 lightCenter = vec3(0.,0.,0.);\n    \n    // aspect ratio\n    float aspect = iResolution.x / iResolution.y;\n    \n    // inverse perspective and view matrices to compute rays for the ray tracing\n    // objects here are given in world space, so we use rays in world space\n    // model transforms aren't implemented here, but could be added pretty easily\n    mat4 PInv = perspectiveInv(radians(120.),aspect,0.1,100.);\n    mat4 VInv = lookAtInv(lightPos,lightCenter,vec3(0.,1.,0.));\n    \n    // projection and view matrix\n    mat4 P = perspective(radians(120.),aspect,0.1,100.);\n    mat4 V = lookAt(lightPos,lightCenter,vec3(0.,1.,0.));\n    \n    \n    // creates a ray\n    vec3 rayDir = createRay(uv,PInv,VInv);\n   \tHit h;\n    \n    // check for intersection\n    if(!intersectScene(lightPos,rayDir,h))\n    {\n        // no intersection, use max values\n        fragColor = vec4(1.,1.,100.,10000.);\n    }\n    else\n    {\n        \n        vec3 hitpoint = lightPos + h.t * rayDir;\n        // transform into viewspace\n        vec4 hpV = V*vec4(hitpoint,1.);\n        // transform into clip space\n        vec4 hpP = P*hpV;\n        \n        // NDC\n        vec3 hp = (hpP/hpP.w).xyz;\n        \n        // revert view space z to stay positive\n     \tfragColor = vec4(hp.z,hp.z*hp.z,-hpV.z,hpV.z*hpV.z); \n        \n        \n    }\n    \n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/**\n*\n* This is a demonstration of how shadow mapping works\n* \n* Most of the code is just setup to render in accord to the usual OpenGL rendering\n* with view and projection matrices. Also a little bit of code for tracing the objects.\n*\n* Implemented are:\n*\t- (1) Basic shadow mapping\n*\t- (2) PCF\n*\t- (3) Variance shadow mapping (VSM)\n*\n* By default you see (3). You can see (2) by pressing 'p' and (1) by pressing 'b'\n*\n*\n* The code is organized as follows:\n*\n* Buf A:\n*\t- Renders the image from the light's point of view with the light's view \n* \t\tand projection matrix. Output is both perspective depth (z_p) and \n*\t\tlinear depth (z_l) and their squares: Output vec4(z_p,z_p^2,z_l,z_l^2)\n*\n*\t\tRelevant code is in main function\n*\n* Buf B + C:\n*\t- Perform a separable box blur filter. First pass in x, second in y direction\n*\n* Image:\n*\t- Renders the image from the cameras point of view. Then transforms the object's\n*\t\tpoints into the light's coordinate system to perform the shadow map lookup\n*\t\twith one of the above mentioned techniques\n*\t\n*\t\tRelevant code is in main, shadow, shadowPCF and shadowVSM functions\n*\n*\n*\n*\n**/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n    \n    vec2 uv = fragCoord.xy / iChannelResolution[0].xy;\n    vec2 stepSize = vec2(1./iChannelResolution[0].x,0.);\n    \n    const int r = 6;\n    // Box filter x\n    vec4 sum = vec4(0.,0.,0.,0.);\n    for(int i = -r; i <= r; i++)\n    {\n        sum += texture(iChannel0,uv+float(i)*stepSize);\n    }\n    \n    fragColor = sum/float(2*r+1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/**\n*\n* This is a demonstration of how shadow mapping works\n* \n* Most of the code is just setup to render in accord to the usual OpenGL rendering\n* with view and projection matrices. Also a little bit of code for tracing the objects.\n*\n* Implemented are:\n*\t- (1) Basic shadow mapping\n*\t- (2) PCF\n*\t- (3) Variance shadow mapping (VSM)\n*\n* By default you see (3). You can see (2) by pressing 'p' and (1) by pressing 'b'\n*\n*\n* The code is organized as follows:\n*\n* Buf A:\n*\t- Renders the image from the light's point of view with the light's view \n* \t\tand projection matrix. Output is both perspective depth (z_p) and \n*\t\tlinear depth (z_l) and their squares: Output vec4(z_p,z_p^2,z_l,z_l^2)\n*\n*\t\tRelevant code is in main function\n*\n* Buf B + C:\n*\t- Perform a separable box blur filter. First pass in x, second in y direction\n*\n* Image:\n*\t- Renders the image from the cameras point of view. Then transforms the object's\n*\t\tpoints into the light's coordinate system to perform the shadow map lookup\n*\t\twith one of the above mentioned techniques\n*\t\n*\t\tRelevant code is in main, shadow, shadowPCF and shadowVSM functions\n*\n*\n*\n*\n**/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n    \n    vec2 uv = fragCoord.xy / iChannelResolution[0].xy;\n    vec2 stepSize = vec2(0.,1./iChannelResolution[0].y);\n    \n    const int r = 6;\n    // Box filter y\n    vec4 sum = vec4(0.,0.,0.,0.);\n    for(int i = -r; i <= r; i++)\n    {\n        sum += texture(iChannel0,uv+float(i)*stepSize);\n    }\n    \n    fragColor = sum/float(2*r+1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}