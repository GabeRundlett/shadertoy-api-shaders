{
    "Shader": {
        "info": {
            "date": "1692457345",
            "description": "plasma",
            "flags": 0,
            "hasliked": 0,
            "id": "DlBcWV",
            "likes": 10,
            "name": "plasma_noise",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "DoomHunter",
            "viewed": 231
        },
        "renderpass": [
            {
                "code": "const float PI2 = 6.283185;\nconst int MIN_DEPTH = 2;\nconst int MAX_DEPTH = 8;\n\n\nvec2 rotate_vec2 (in vec2 v, in float r, in vec2 pivod)\n{\n    float rad = r * PI2;\n    float s = sin(rad);\n    float c = cos(rad);\n    \n    return vec2((v-pivod) * mat2(c, s, -s, c)) + pivod;\n    \n    //return vec2(dot(v-pivod, vec2(c, s)),\n    //            dot(v-pivod, vec2(-s, c))) + pivod;\n}\n\n\n\n\nvec4 g2c(in vec2 p) \n{\n    float d = dot(p, vec2(123.34547, 321.5643));\n    vec4 f = vec4(4823.9471,5643.2356, 1045.3865, 8326.3953) / (d + 0.513254);\n    vec4 s = fract(sin(f * 4572.8462));\n    return s;\n}\n\n\n\n\n\nfloat noise(in vec2 uv, in float scale, in float disorder)\n{\n    vec2 g = uv * scale;\n    vec2 g_id = floor(g); \n    vec2 g_uv = g - g_id;\n    vec2 g_uv_inv = 1.0 - g_uv;\n    \n    \n    \n    vec3 cubx = vec3(g_uv.x, g_uv.x, g_uv_inv.x) * vec3(g_uv.x, g_uv_inv.x, g_uv_inv.x) * vec3(0.5, 1.0, 0.5) + vec3(0.0, 0.5, 0.0);\n    vec3 cuby = vec3(g_uv.y, g_uv.y, g_uv_inv.y) * vec3(g_uv.y, g_uv_inv.y, g_uv_inv.y) * vec3(0.5, 1.0, 0.5) + vec3(0.0, 0.5, 0.0);\n    \n    mat3 cubm = mat3(cubx.x*cuby.x, cubx.x*cuby.y, cubx.x*cuby.z,\n                    cubx.y*cuby.x, cubx.y*cuby.y, cubx.y*cuby.z, \n                    cubx.z*cuby.x, cubx.z*cuby.y, cubx.z*cuby.z);\n    \n    \n    \n    \n    vec4 n4 = g2c(g_id-vec2(0.0, 0.0))* cubm[0][0] + g2c(g_id-vec2(1.0, 0.0))* cubm[1][0] + g2c(g_id-vec2(2.0, 0.0))* cubm[2][0] +\n              g2c(g_id-vec2(0.0, 1.0))* cubm[0][1] + g2c(g_id-vec2(1.0, 1.0))* cubm[1][1] + g2c(g_id-vec2(2.0, 1.0))* cubm[2][1] +\n              g2c(g_id-vec2(0.0, 2.0))* cubm[0][2] + g2c(g_id-vec2(1.0, 2.0))* cubm[1][2] + g2c(g_id-vec2(2.0, 2.0))* cubm[2][2];\n   \n    return 1.0 - sqrt(length(rotate_vec2(n4.xy, disorder, vec2(0.5, 0.5)) - n4.zw));\n}\n\n\n\nfloat fract_noise(vec2 uv, float disorder, int minDepth, int maxDepth){\n\n    float fract_noise = 0.0;\n    \n    for( int i = minDepth; i < maxDepth; i++){\n    \n        float currentDepth2pow = pow(2.0, float(i - minDepth + 1));\n        float fi = float(i);\n        \n        fract_noise += noise(uv, pow(2.0, fi), disorder * currentDepth2pow) * (1.0 / currentDepth2pow);\n    }\n    return fract_noise;\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / min(iResolution.x, iResolution.y);\n    float t = iTime / 2.0;\n    \n    float fbm = fract_noise(uv, t, MIN_DEPTH, MAX_DEPTH);\n    fbm = pow(fbm, 3.0);\n    \n    //float fbm = pow( 0.50000 * noise(uv, 8.000, t * 1.0) +\n    //                 0.25000 * noise(uv, 16.00, t * 2.0) +\n    //                 0.12500 * noise(uv, 32.00, t * 4.0) +\n    //                 0.06250 * noise(uv, 64.00, t * 8.0), 3.0);\n        \n    fragColor = vec4(vec3(fbm), 1.0) * vec4(3.0, 1.0, 0.5, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}