{
    "Shader": {
        "info": {
            "date": "1719890573",
            "description": "This shader creates a lifelike appearance of a blinking eye. Ideal for use in 3D graphics, animations, and visual effects.",
            "flags": 0,
            "hasliked": 0,
            "id": "X3yXRw",
            "likes": 2,
            "name": "Moving Eye Ball",
            "published": 3,
            "tags": [
                "perlinnoise",
                "eye",
                "blink",
                "human",
                "pupilmovement",
                "iristexture"
            ],
            "usePreview": 0,
            "username": "mr_vero",
            "viewed": 100
        },
        "renderpass": [
            {
                "code": "// Shadertoy Shader\n// By Iravan\n// https://www.shadertoy.com/view/...\n\n// Function to generate Perlin noise\nfloat noise(vec2 p) {\n    return fract(sin(dot(p ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n// Smooth noise function\nfloat smoothNoise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    f = f*f*(3.0-2.0*f);\n    return mix(mix(noise(i + vec2(0.0, 0.0)), noise(i + vec2(1.0, 0.0)), f.x),\n               mix(noise(i + vec2(0.0, 1.0)), noise(i + vec2(1.0, 1.0)), f.x), f.y);\n}\n\n// Function to create iris texture\nvec3 irisTexture(vec2 uv) {\n    float n = smoothNoise(uv * 30.0);\n    return vec3(0.2, 0.5, 0.8) + vec3(n * 0.2, n * 0.1, n * 0.1);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0; // Map to range [-1, 1]\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Time variable\n    float time = iTime * 0.8;\n\n    // Parameters for eye blink\n    float blinkSpeed = 0.5; // Speed of blink\n    float blink = abs(sin(time * blinkSpeed)); // Sinusoidal blink\n\n    // Define the radius of the eye\n    float radius = 0.5;\n    float pupilRadius = 0.1;\n    float irisRadius = 0.2;\n\n    // Calculate distance from center\n    float dist = length(uv);\n\n    // Pupil position (moving with time)\n    vec2 pupilPos = vec2(0.1 * sin(time), 0.1 * cos(time));\n\n    // Define the colors\n    vec3 eyeWhiteColor = vec3(1.0, 1.0, 1.0);\n    vec3 pupilColor = vec3(0.0, 0.0, 0.0);\n\n    // Calculate the blinking mask\n    float blinkMask = smoothstep(radius * blink, radius, dist);\n\n    // Determine the color based on the blink and position\n    vec3 color = eyeWhiteColor;\n\n    // Iris and pupil rendering\n    float irisDist = length(uv - pupilPos);\n    if (irisDist < irisRadius) {\n        color = irisTexture(uv - pupilPos);\n        if (irisDist < pupilRadius) {\n            color = pupilColor;\n        }\n    }\n\n    // Apply the blink mask\n    color = mix(color, vec3(0.0), blinkMask);\n\n    // Add specular highlight\n    vec2 specPos = vec2(0.2, 0.2);\n    float specSize = 0.05;\n    if (length(uv - specPos) < specSize) {\n        color += vec3(1.0, 1.0, 1.0) * (1.0 - length(uv - specPos) / specSize);\n    }\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}