{
    "Shader": {
        "info": {
            "date": "1588653507",
            "description": "tick",
            "flags": 0,
            "hasliked": 0,
            "id": "tsXBz2",
            "likes": 4,
            "name": "Metronome",
            "published": 3,
            "tags": [
                "fractal",
                "kifs"
            ],
            "usePreview": 0,
            "username": "blepfo",
            "viewed": 289
        },
        "renderpass": [
            {
                "code": "// Toggle to view different elements of the scene\n// 1 - Menger Kifs\n// 2 - Sierpinski Kifs\n// 3 - Combined Menger+Sierpinski Kifs\n// 4 - Tiled\n#define VIEW_LAYER 3\n\n\n#define PI (3.141)\n#define MAX_ITERATIONS (16)\n#define ITERATIONS 10\n\n\nmat2 rotate2d(float theta) {\n    return mat2(cos(theta), -sin(theta),\n                sin(theta), cos(theta));\n}\n\n\nfloat circSdf(vec2 uv, float r) {\n    return length(uv) - r;\n}\n\n\nvec2 fold(vec2 uv, float theta) {\n    vec2 normal = vec2(cos(-theta), sin(-theta));\n    float d = dot(uv, normal);\n    return uv - (2. * min(0., d) * normal);\n}\n\n\nvec2 sierpinskiKifs(vec2 uv, int N) {\n    uv -= vec2(-0.5, 0.);\n    for(int i = 0; i < 12; i++) {\n        if (i >= N) { break; }\n        uv *= 2.;\n        uv.x -= 1.5;\n        \n        float animationSpeed = 0.5;\n        //float iTime = 4.072;\n        // Oscillate between (PI / 6) and (PI / 2)\n        float animatedAngle = ((cos(iTime*animationSpeed) + 1.) / 2.) * ((PI / 2.) - (PI / 6.)) + (PI / 6.);\n        uv = fold(uv, animatedAngle);\n    \tuv = fold(uv, -PI/6.);\n    }\n    return uv;\n}\n\n\nvec2 mengerKifs(vec2 uv, int N) {\n    for(int i = 0; i < 12; i++) {\n        if (i >= N) { break; }\n        uv *= 3.;  \n        uv.x = abs(uv.x);\n        uv.y = abs(uv.y);\n        uv = fold(uv, 0.33 * PI);\n        uv.x -= 1.*sqrt(2.);\n        uv = fold(uv, 0.33 * PI);\n        uv.x -= 1.*sqrt(2.);\n    }\n    return uv;\n}\n\n\n// Menger Kifs\nfloat viewLayerMenger(vec2 uv) {\n    //return vec3(1.);\n    uv *= 2.;\n    vec2 mengerUv = mengerKifs(uv, ITERATIONS);\n    float cSdf = circSdf(mengerUv, 1.);\n    float pixelSize = (2. * pow(3., float(ITERATIONS))) / iResolution.x;\n    float c = smoothstep(2.*pixelSize, 0., cSdf);\n    return c;\n}\n\n\n// Sierpinski Kifs\nfloat viewLayerSierpinski(vec2 uv) {\n    uv.x += 0.2;\n    uv *= rotate2d(PI / 6.);\n    vec2 sierpinskiUv = sierpinskiKifs(uv, ITERATIONS+2);\n    float cSdf = circSdf(sierpinskiUv, 1.);\n    float pixelSize = (2. * pow(3., float(ITERATIONS))) / iResolution.x;\n    float c = smoothstep(2.*pixelSize, 0., cSdf);\n    return c;\n}\n\n// Menger+Sierpinski\nfloat viewLayerMerge(vec2 uv) {\n    uv.x += 0.2;\n    uv *= rotate2d(PI / 6.);\n    vec2 hybridUv = sierpinskiKifs(uv, ITERATIONS);\n    hybridUv = mengerKifs(hybridUv, ITERATIONS);\n    float cSdf = circSdf(hybridUv, 1.);\n    float pixelSize = (1. * (pow(3., float(ITERATIONS)) * pow(2., float(ITERATIONS)))) / iResolution.x;\n    float c = smoothstep(2.*pixelSize, 0., cSdf);\n    return c;\n}\n\n\n// Tiled Menger + Sierpinski\nfloat viewLayerTiling(vec2 uv) {\n    float globalScale = 2.000;\n    uv *= globalScale;\n    uv *= rotate2d(PI / 2.);\n    vec2 tileIdx = floor(uv);\n    float flipSign = (2.*mod(floor(tileIdx.y), 2.)) - 1.;\n    uv = fract(uv);\n    uv.y *= flipSign ;\n    uv += vec2(-0.7, -0.5 * flipSign);\n    uv.y += -0.04;\n    uv *= -rotate2d(PI / 6.);\n    vec2 hybridUv = sierpinskiKifs(uv, ITERATIONS);\n    hybridUv = mengerKifs(hybridUv, ITERATIONS);\n    float cSdf = circSdf(hybridUv, 1.);\n    float pixelSize = (2. * globalScale * pow(3., float(ITERATIONS+1))) / iResolution.x;\n    float c = smoothstep(2.*pixelSize, 0., cSdf);\n    return c;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 1.5;\n    \n    float globalScale = 1.;\n    uv *= globalScale;\n    \n    float c = 0.;\n    if (VIEW_LAYER == 1) {\n        c = viewLayerMenger(uv);\n    } else if (VIEW_LAYER == 2) {\n        c = viewLayerSierpinski(uv);\n    } else if (VIEW_LAYER == 3) {\n        c = viewLayerMerge(uv);\n    } else if (VIEW_LAYER == 4) {\n        c = viewLayerTiling(uv);\n    } else {\n        c = 0.;\n    }\n    \n    vec3 color = vec3(0.165,0.123,0.130);\n    color = mix(color, vec3(0.750,0.909,0.975), c);\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}