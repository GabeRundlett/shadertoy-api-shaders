{
    "Shader": {
        "info": {
            "date": "1700546693",
            "description": "A truchet weave pattern using triangle waves instead of trigonometric functions.",
            "flags": 8,
            "hasliked": 0,
            "id": "mtGcRd",
            "likes": 7,
            "name": "Multiscale triangle wave truchet",
            "published": 3,
            "tags": [
                "truchet",
                "multiscale",
                "weave"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 174
        },
        "renderpass": [
            {
                "code": "#define triwave(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1(p) (abs(fract(p/8.0)-.5)-abs(fract(p/2.0)-.5)/2.)\n\nvec4 t1(vec2 c, vec2 p){\n    return triwave((.5 - length( min(p=fract(p*sign(triwave1(c*c.y))), 1.-p.yx) )) * vec4(22,7,5,0));\n}\n\nvoid mainImage(out vec4 O, vec2 I)\n{\n    vec2 p = (I/1e2+iTime)*2.;\n    vec4 t_ = t1(ceil(p),p);\n    vec4 t1_ = t1(ceil(p/4.),p/4.);\n    \n    if(\n        //Lots of interesting patterns here!\n        //t_.y>t_.x\n        //t1_.y>t1_.z\n        //1.-t_.z>t1_.y||1.-t_.y>t1_.x||1.-t_.x>t1_.z\n        t_.y>.5&&t_.y<t1_.y\n        //t1_.y>t_.y||t1_.z>t_.z||t1_.x>t_.x\n        //t_.y<t1_.y\n        \n        //an interesting knot pattern\n        //t_.x>t1_.x&&t_.y<t1_.x\n        //t_.z>.5||t_.y>.5||t_.z>.5\n        //t1_.z>t_.z||t1_.y>t_.y||t1_.z>t_.z\n    ) O = t_;\n    else O = t1_;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float m1(float a, float b, float c){\n    return floor(floor(floor(a)/b)/c);\n}\n\nfloat mod1(float a,float b){\n    return \n        mod(a,b)\n        //mod(a+mod(a,3.)-mod(a,5.),b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    //a *= (1.+mod(floor(a/8.),2.));\n    //a += m1(a/8.,5.+b,3.+b);\n    //a += mod(b/2.,2.);\n    return\n        //mod1(mod1(8.+floor(a/8.),b*2.+floor(b*a)-floor(a/8.)),b)\n        //mod(mod(8.+floor(a/2.),8.+floor(a)),b)\n        //mod(floor(a/b-mod(a/8.,2.)+mod(a/8.,3.)),b)\n        //mod(floor(a/2.),b)*mod(floor(a/b)*floor(a/b),b/2.)\n        mod(floor(8./b+a*b/8./2.),b)\n        //mod(mod(floor(8./b+a*b/8./2.),b+floor(a/8./2.)),b)\n        //mod(mod(8.+floor(a/8.+b/8.),b*2.+floor(b*a+8./b)-floor(a/8.+8./b)),b)\n    ;\n}\n\n#define fract1(a) pow(fract(a),1.+log(2.)-log(1.+fract(a)))\n\nvec2 mainSound1(int samp, float time,float scale){\n  time /= 4.;\n  float s1 =\n      8.,\n  s2 = 8.,\n  t = time,\n  m1 = fmod(t*4.,s1/2.),\n  p1 = pow(2.,m1)\n  ;\n  t = \n      s1*pow(2.,fmod(t*16.+m1,2.))*t/(1.+fmod(floor(t*4.),2.))\n      //s1*pow(2.,fmod(t*8.+m1,3.))*t;\n  ;\n\n  float\n  m3 =\n      floor(fmod(time*8.*p1,s1/2.)/2.)\n  ;\n  float m2 =\n      1. + fmod(t*8.,s1/2.)\n      //1. + fmod((t+floor(t/8.))*8.,s1/2.)\n  ;\n  float a=\n      //128.*pow((1.-sqrt(fract(t)/2.))/2.,2.)\n      //pow(log(fract(t)/8.),2.)\n      \n      //gamelan\n      pow(log(.125+fract(t)/4.),2.)\n\n      \n  ;\n  float nb = time*pow(2.,(m3+m2-m1)/7.+scale);\n  return\n      //abs(.5-vec2(fract(nb*.998),fract(nb)))*a\n      \n      //gamelan\n      //a/16./2.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb*4.*.998),fract1(nb*4.)))/2.))\n      //+.5*log(1./4.+a*abs(1./4.-abs(.5-vec2(fract1(nb*2.*.998),fract1(nb*2.)))/2.)))   \n      \n      //sitar\n      log(.125*4.+abs(a/32.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a))\n      //log(1./8.*4.+a*abs(1./8.-abs(.5-vec2(fract(nb*.998),fract(nb/2.)))))\n      \n      //log(1.+abs(a/32.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a))\n      //abs(.5-abs(.5-vec2(fract(nb*.998),fract(nb)))*a)\n  ;\n}\n\nvec2 mainSound(int a,float b){\n    //return mainSound1(a,b,8.);\n    //return (mainSound1(a,b/2.,10.)+mainSound1(a,b,10.))/2.;\n    return (mainSound1(a,b,9.)*mainSound1(a,b,10.));\n    //return mainSound1(a,b,8.)+mainSound1(a,b*2.,8.)/2.+mainSound1(a,b*4.,8.)/4.+mainSound1(a,b/8.,8.)/8.;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}